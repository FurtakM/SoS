// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 20215 0 0
// PrepareRussian ;
  12: CALL 2018 0 0
// PrepareArabian ;
  16: CALL 438 0 0
// Action ;
  20: CALL 3761 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy , blockPatrolThread , firstArmouryDialog , weaponsAmount , canEquipWeapons , giveSniperRifleToMike , ruKilledHex ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// blockPatrolThread := false ;
 359: LD_ADDR_EXP 38
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// firstArmouryDialog := false ;
 367: LD_ADDR_EXP 39
 371: PUSH
 372: LD_INT 0
 374: ST_TO_ADDR
// giveSniperRifleToMike := false ;
 375: LD_ADDR_EXP 42
 379: PUSH
 380: LD_INT 0
 382: ST_TO_ADDR
// weaponsAmount := [ 6 , 5 , 4 , 3 ] [ Difficulty ] ;
 383: LD_ADDR_EXP 40
 387: PUSH
 388: LD_INT 6
 390: PUSH
 391: LD_INT 5
 393: PUSH
 394: LD_INT 4
 396: PUSH
 397: LD_INT 3
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// canEquipWeapons := false ;
 412: LD_ADDR_EXP 41
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// ruKilledHex := [ ] ;
 420: LD_ADDR_EXP 43
 424: PUSH
 425: EMPTY
 426: ST_TO_ADDR
// enable ( entranceEvent ) ;
 427: LD_INT 1
 429: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 430: LD_INT 2
 432: DISABLE_MARKED
// end ; end_of_file
 433: LD_VAR 0 1
 437: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 438: LD_INT 0
 440: PPUSH
 441: PPUSH
// uc_side := 4 ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_INT 4
 449: ST_TO_ADDR
// uc_nation := 1 ;
 450: LD_ADDR_OWVAR 21
 454: PUSH
 455: LD_INT 1
 457: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 458: LD_ADDR_EXP 56
 462: PUSH
 463: LD_STRING 07_Americans
 465: PPUSH
 466: CALL_OW 31
 470: ST_TO_ADDR
// if americanSquad < 5 then
 471: LD_EXP 56
 475: PUSH
 476: LD_INT 5
 478: LESS
 479: IFFALSE 573
// begin if not americanSquad then
 481: LD_EXP 56
 485: NOT
 486: IFFALSE 495
// americanSquad := [ ] ;
 488: LD_ADDR_EXP 56
 492: PUSH
 493: EMPTY
 494: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 495: LD_ADDR_VAR 0 2
 499: PUSH
 500: DOUBLE
 501: LD_EXP 56
 505: DEC
 506: ST_TO_ADDR
 507: LD_INT 2
 509: PUSH
 510: LD_INT 3
 512: PUSH
 513: LD_INT 4
 515: PUSH
 516: LD_INT 4
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: PUSH
 525: LD_OWVAR 67
 529: ARRAY
 530: PUSH
 531: FOR_TO
 532: IFFALSE 569
// begin PrepareHuman ( false , 2 , 6 ) ;
 534: LD_INT 0
 536: PPUSH
 537: LD_INT 2
 539: PPUSH
 540: LD_INT 6
 542: PPUSH
 543: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 547: LD_ADDR_EXP 56
 551: PUSH
 552: LD_EXP 56
 556: PPUSH
 557: CALL_OW 44
 561: PPUSH
 562: CALL 66083 0 2
 566: ST_TO_ADDR
// end ;
 567: GO 531
 569: POP
 570: POP
// end else
 571: GO 620
// for i := Count ( americanSquad ) downto 5 do
 573: LD_ADDR_VAR 0 2
 577: PUSH
 578: DOUBLE
 579: LD_EXP 56
 583: PPUSH
 584: CALL 30750 0 1
 588: INC
 589: ST_TO_ADDR
 590: LD_INT 5
 592: PUSH
 593: FOR_DOWNTO
 594: IFFALSE 618
// americanSquad := Delete ( americanSquad , i ) ;
 596: LD_ADDR_EXP 56
 600: PUSH
 601: LD_EXP 56
 605: PPUSH
 606: LD_VAR 0 2
 610: PPUSH
 611: CALL_OW 3
 615: ST_TO_ADDR
 616: GO 593
 618: POP
 619: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 620: LD_ADDR_EXP 58
 624: PUSH
 625: LD_STRING UsCommander
 627: PPUSH
 628: LD_EXP 1
 632: NOT
 633: PPUSH
 634: LD_STRING 07_
 636: PPUSH
 637: CALL 28648 0 3
 641: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 642: LD_INT 1
 644: PPUSH
 645: LD_INT 6
 647: PPUSH
 648: CALL_OW 381
// Jerry := CreateHuman ;
 652: LD_ADDR_EXP 59
 656: PUSH
 657: CALL_OW 44
 661: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 662: LD_EXP 59
 666: PPUSH
 667: LD_INT 33
 669: PPUSH
 670: CALL_OW 336
// if not Doug then
 674: LD_EXP 58
 678: NOT
 679: IFFALSE 701
// begin PrepareSoldier ( sex_male , 6 ) ;
 681: LD_INT 1
 683: PPUSH
 684: LD_INT 6
 686: PPUSH
 687: CALL_OW 381
// Doug := CreateHuman ;
 691: LD_ADDR_EXP 58
 695: PUSH
 696: CALL_OW 44
 700: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 701: LD_EXP 58
 705: PPUSH
 706: LD_INT 33
 708: PPUSH
 709: CALL_OW 336
// if johnnySaved or debug then
 713: LD_EXP 3
 717: PUSH
 718: LD_EXP 1
 722: OR
 723: IFFALSE 750
// begin Harris := NewCharacter ( Harris ) ;
 725: LD_ADDR_EXP 57
 729: PUSH
 730: LD_STRING Harris
 732: PPUSH
 733: CALL_OW 25
 737: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 738: LD_EXP 57
 742: PPUSH
 743: LD_INT 33
 745: PPUSH
 746: CALL_OW 336
// end ; uc_side := 2 ;
 750: LD_ADDR_OWVAR 20
 754: PUSH
 755: LD_INT 2
 757: ST_TO_ADDR
// uc_nation := 2 ;
 758: LD_ADDR_OWVAR 21
 762: PUSH
 763: LD_INT 2
 765: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 766: LD_ADDR_EXP 44
 770: PUSH
 771: LD_STRING Heike
 773: PPUSH
 774: LD_EXP 1
 778: NOT
 779: PPUSH
 780: LD_EXP 2
 784: PPUSH
 785: CALL 28648 0 3
 789: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 790: LD_ADDR_EXP 47
 794: PUSH
 795: LD_STRING Ibrahim
 797: PPUSH
 798: LD_EXP 1
 802: NOT
 803: PPUSH
 804: LD_EXP 2
 808: PPUSH
 809: CALL 28648 0 3
 813: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 814: LD_ADDR_EXP 45
 818: PUSH
 819: LD_STRING Givi
 821: PPUSH
 822: LD_EXP 1
 826: NOT
 827: PPUSH
 828: LD_EXP 2
 832: PPUSH
 833: CALL 28648 0 3
 837: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 838: LD_ADDR_EXP 48
 842: PUSH
 843: LD_STRING Kamil
 845: PPUSH
 846: LD_EXP 1
 850: NOT
 851: PPUSH
 852: LD_EXP 2
 856: PPUSH
 857: CALL 28648 0 3
 861: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 862: LD_ADDR_EXP 49
 866: PUSH
 867: LD_STRING Kaia
 869: PPUSH
 870: LD_EXP 1
 874: NOT
 875: PPUSH
 876: LD_EXP 2
 880: PPUSH
 881: CALL 28648 0 3
 885: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 886: LD_ADDR_EXP 50
 890: PUSH
 891: LD_STRING Sophia
 893: PPUSH
 894: LD_EXP 1
 898: NOT
 899: PPUSH
 900: LD_EXP 2
 904: PPUSH
 905: CALL 28648 0 3
 909: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 910: LD_ADDR_EXP 51
 914: PUSH
 915: LD_STRING Markov
 917: PPUSH
 918: LD_EXP 1
 922: NOT
 923: PPUSH
 924: LD_EXP 2
 928: PPUSH
 929: CALL 28648 0 3
 933: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 934: LD_ADDR_EXP 54
 938: PUSH
 939: LD_STRING Aviradze
 941: PPUSH
 942: LD_EXP 1
 946: NOT
 947: PPUSH
 948: LD_EXP 2
 952: PPUSH
 953: CALL 28648 0 3
 957: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 958: LD_ADDR_EXP 53
 962: PUSH
 963: LD_STRING Kurt
 965: PPUSH
 966: LD_EXP 1
 970: NOT
 971: PPUSH
 972: LD_EXP 2
 976: PPUSH
 977: CALL 28648 0 3
 981: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 982: LD_ADDR_EXP 46
 986: PUSH
 987: LD_STRING Mike
 989: PPUSH
 990: LD_EXP 1
 994: NOT
 995: PPUSH
 996: LD_EXP 2
1000: PPUSH
1001: CALL 28648 0 3
1005: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1006: LD_ADDR_EXP 52
1010: PUSH
1011: LD_STRING Olaf
1013: PPUSH
1014: LD_EXP 1
1018: NOT
1019: PPUSH
1020: LD_EXP 2
1024: PPUSH
1025: CALL 28648 0 3
1029: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1030: LD_ADDR_EXP 55
1034: PUSH
1035: LD_STRING 07_others
1037: PPUSH
1038: CALL_OW 31
1042: ST_TO_ADDR
// end ;
1043: LD_VAR 0 1
1047: RET
// export function PrepareGame ; var i ; begin
1048: LD_INT 0
1050: PPUSH
1051: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
1052: LD_EXP 44
1056: PPUSH
1057: LD_INT 23
1059: PPUSH
1060: CALL_OW 52
// if Givi then
1064: LD_EXP 45
1068: IFFALSE 1106
// begin SetSide ( Givi , 5 ) ;
1070: LD_EXP 45
1074: PPUSH
1075: LD_INT 5
1077: PPUSH
1078: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1082: LD_EXP 45
1086: PPUSH
1087: LD_INT 9
1089: PPUSH
1090: LD_INT 0
1092: PPUSH
1093: CALL_OW 49
// ComHold ( Givi ) ;
1097: LD_EXP 45
1101: PPUSH
1102: CALL_OW 140
// end ; if Markov then
1106: LD_EXP 51
1110: IFFALSE 1148
// begin SetSide ( Markov , 5 ) ;
1112: LD_EXP 51
1116: PPUSH
1117: LD_INT 5
1119: PPUSH
1120: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1124: LD_EXP 51
1128: PPUSH
1129: LD_INT 3
1131: PPUSH
1132: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1136: LD_EXP 51
1140: PPUSH
1141: LD_INT 61
1143: PPUSH
1144: CALL_OW 52
// end ; if Mike then
1148: LD_EXP 46
1152: IFFALSE 1190
// begin SetSide ( Mike , 5 ) ;
1154: LD_EXP 46
1158: PPUSH
1159: LD_INT 5
1161: PPUSH
1162: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1166: LD_EXP 46
1170: PPUSH
1171: LD_INT 17
1173: PPUSH
1174: LD_INT 0
1176: PPUSH
1177: CALL_OW 49
// ComHold ( Mike ) ;
1181: LD_EXP 46
1185: PPUSH
1186: CALL_OW 140
// end ; if Olaf then
1190: LD_EXP 52
1194: IFFALSE 1235
// begin SetSide ( Olaf , 5 ) ;
1196: LD_EXP 52
1200: PPUSH
1201: LD_INT 5
1203: PPUSH
1204: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1208: LD_EXP 52
1212: PPUSH
1213: LD_INT 16
1215: PPUSH
1216: LD_INT 0
1218: PPUSH
1219: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1223: LD_EXP 52
1227: PPUSH
1228: LD_INT 3
1230: PPUSH
1231: CALL 69235 0 2
// end ; if Kamil then
1235: LD_EXP 48
1239: IFFALSE 1265
// begin SetSide ( Kamil , 5 ) ;
1241: LD_EXP 48
1245: PPUSH
1246: LD_INT 5
1248: PPUSH
1249: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1253: LD_EXP 48
1257: PPUSH
1258: LD_INT 109
1260: PPUSH
1261: CALL_OW 52
// end ; if Kurt then
1265: LD_EXP 53
1269: IFFALSE 1295
// begin SetSide ( Kurt , 5 ) ;
1271: LD_EXP 53
1275: PPUSH
1276: LD_INT 5
1278: PPUSH
1279: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1283: LD_EXP 53
1287: PPUSH
1288: LD_INT 169
1290: PPUSH
1291: CALL_OW 52
// end ; if Kaia then
1295: LD_EXP 49
1299: IFFALSE 1325
// begin SetSide ( Kaia , 5 ) ;
1301: LD_EXP 49
1305: PPUSH
1306: LD_INT 5
1308: PPUSH
1309: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1313: LD_EXP 49
1317: PPUSH
1318: LD_INT 147
1320: PPUSH
1321: CALL_OW 52
// end ; if Sophia then
1325: LD_EXP 50
1329: IFFALSE 1370
// begin SetSide ( Sophia , 5 ) ;
1331: LD_EXP 50
1335: PPUSH
1336: LD_INT 5
1338: PPUSH
1339: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1343: LD_EXP 50
1347: PPUSH
1348: LD_INT 142
1350: PPUSH
1351: LD_INT 96
1353: PPUSH
1354: LD_INT 0
1356: PPUSH
1357: CALL_OW 48
// ComHold ( Sophia ) ;
1361: LD_EXP 50
1365: PPUSH
1366: CALL_OW 140
// end ; if Harris then
1370: LD_EXP 57
1374: IFFALSE 1412
// begin SetSide ( Harris , 4 ) ;
1376: LD_EXP 57
1380: PPUSH
1381: LD_INT 4
1383: PPUSH
1384: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1388: LD_EXP 57
1392: PPUSH
1393: LD_INT 20
1395: PPUSH
1396: LD_INT 0
1398: PPUSH
1399: CALL_OW 49
// ComHold ( i ) ;
1403: LD_VAR 0 2
1407: PPUSH
1408: CALL_OW 140
// end ; if Doug then
1412: LD_EXP 58
1416: IFFALSE 1442
// begin SetSide ( Doug , 4 ) ;
1418: LD_EXP 58
1422: PPUSH
1423: LD_INT 4
1425: PPUSH
1426: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1430: LD_EXP 58
1434: PPUSH
1435: LD_INT 106
1437: PPUSH
1438: CALL_OW 52
// end ; if Aviradze then
1442: LD_EXP 54
1446: IFFALSE 1472
// begin SetSide ( Aviradze , 5 ) ;
1448: LD_EXP 54
1452: PPUSH
1453: LD_INT 5
1455: PPUSH
1456: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1460: LD_EXP 54
1464: PPUSH
1465: LD_INT 119
1467: PPUSH
1468: CALL_OW 52
// end ; if Ibrahim then
1472: LD_EXP 47
1476: IFFALSE 1502
// begin SetSide ( Ibrahim , 5 ) ;
1478: LD_EXP 47
1482: PPUSH
1483: LD_INT 5
1485: PPUSH
1486: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1490: LD_EXP 47
1494: PPUSH
1495: LD_INT 119
1497: PPUSH
1498: CALL_OW 52
// end ; if Jerry then
1502: LD_EXP 59
1506: IFFALSE 1547
// begin SetSide ( Jerry , 4 ) ;
1508: LD_EXP 59
1512: PPUSH
1513: LD_INT 4
1515: PPUSH
1516: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1520: LD_EXP 59
1524: PPUSH
1525: LD_INT 119
1527: PPUSH
1528: LD_INT 59
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL_OW 48
// ComHold ( Jerry ) ;
1538: LD_EXP 59
1542: PPUSH
1543: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1547: LD_EXP 63
1551: PPUSH
1552: LD_INT 119
1554: PPUSH
1555: CALL_OW 52
// for i in americanSquad do
1559: LD_ADDR_VAR 0 2
1563: PUSH
1564: LD_EXP 56
1568: PUSH
1569: FOR_IN
1570: IFFALSE 1598
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1572: LD_VAR 0 2
1576: PPUSH
1577: LD_INT 21
1579: PPUSH
1580: LD_INT 0
1582: PPUSH
1583: CALL_OW 49
// ComHold ( i ) ;
1587: LD_VAR 0 2
1591: PPUSH
1592: CALL_OW 140
// end ;
1596: GO 1569
1598: POP
1599: POP
// for i in heikeSecondSquad do
1600: LD_ADDR_VAR 0 2
1604: PUSH
1605: LD_EXP 55
1609: PUSH
1610: FOR_IN
1611: IFFALSE 1651
// begin SetSide ( i , 5 ) ;
1613: LD_VAR 0 2
1617: PPUSH
1618: LD_INT 5
1620: PPUSH
1621: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1625: LD_VAR 0 2
1629: PPUSH
1630: LD_INT 22
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 49
// ComHold ( i ) ;
1640: LD_VAR 0 2
1644: PPUSH
1645: CALL_OW 140
// end ;
1649: GO 1610
1651: POP
1652: POP
// if not hasVodka then
1653: LD_EXP 4
1657: NOT
1658: IFFALSE 1717
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1660: LD_ADDR_VAR 0 2
1664: PUSH
1665: LD_INT 2
1667: PUSH
1668: LD_INT 22
1670: PUSH
1671: LD_INT 2
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 22
1680: PUSH
1681: LD_INT 5
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PPUSH
1693: CALL_OW 69
1697: PUSH
1698: FOR_IN
1699: IFFALSE 1715
// SetLives ( i , 500 ) ;
1701: LD_VAR 0 2
1705: PPUSH
1706: LD_INT 500
1708: PPUSH
1709: CALL_OW 234
1713: GO 1698
1715: POP
1716: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: LD_INT 22
1724: PUSH
1725: LD_INT 4
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PPUSH
1732: CALL_OW 69
1736: PUSH
1737: FOR_IN
1738: IFFALSE 1754
// SetLives ( i , 500 ) ;
1740: LD_VAR 0 2
1744: PPUSH
1745: LD_INT 500
1747: PPUSH
1748: CALL_OW 234
1752: GO 1737
1754: POP
1755: POP
// end ;
1756: LD_VAR 0 1
1760: RET
// export function SetClassKaiaRevolver ; begin
1761: LD_INT 0
1763: PPUSH
// if not IsOk ( Kaia ) then
1764: LD_EXP 49
1768: PPUSH
1769: CALL_OW 302
1773: NOT
1774: IFFALSE 1778
// exit ;
1776: GO 1797
// SetClass ( Kaia , class_revolver ) ;
1778: LD_EXP 49
1782: PPUSH
1783: LD_INT 34
1785: PPUSH
1786: CALL_OW 336
// SetAchievement ( ACH_REVOLVER ) ;
1790: LD_STRING ACH_REVOLVER
1792: PPUSH
1793: CALL_OW 543
// end ;
1797: LD_VAR 0 1
1801: RET
// export function SpawnHeikeAsRussian ; begin
1802: LD_INT 0
1804: PPUSH
// RemoveUnit ( Heike ) ;
1805: LD_EXP 44
1809: PPUSH
1810: CALL_OW 64
// heikeTmp := Heike ;
1814: LD_ADDR_EXP 60
1818: PUSH
1819: LD_EXP 44
1823: ST_TO_ADDR
// uc_side := 2 ;
1824: LD_ADDR_OWVAR 20
1828: PUSH
1829: LD_INT 2
1831: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1832: LD_ADDR_EXP 44
1836: PUSH
1837: LD_STRING HeikeRu
1839: PPUSH
1840: CALL_OW 25
1844: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1845: LD_EXP 60
1849: PPUSH
1850: LD_EXP 44
1854: PPUSH
1855: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1859: LD_EXP 44
1863: PPUSH
1864: LD_INT 165
1866: PPUSH
1867: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1871: LD_EXP 44
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL_OW 336
// heikeAsRussian := true ;
1883: LD_ADDR_EXP 27
1887: PUSH
1888: LD_INT 1
1890: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1891: LD_STRING M1-laundry-out
1893: PPUSH
1894: CALL_OW 604
// SetAchievement ( ACH_HEIKERU ) ;
1898: LD_STRING ACH_HEIKERU
1900: PPUSH
1901: CALL_OW 543
// end ;
1905: LD_VAR 0 1
1909: RET
// export function SpawnGiviAsRussian ; begin
1910: LD_INT 0
1912: PPUSH
// RemoveUnit ( Givi ) ;
1913: LD_EXP 45
1917: PPUSH
1918: CALL_OW 64
// giviTmp := Givi ;
1922: LD_ADDR_EXP 61
1926: PUSH
1927: LD_EXP 45
1931: ST_TO_ADDR
// uc_side := 2 ;
1932: LD_ADDR_OWVAR 20
1936: PUSH
1937: LD_INT 2
1939: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1940: LD_ADDR_EXP 45
1944: PUSH
1945: LD_STRING GiviRu
1947: PPUSH
1948: CALL_OW 25
1952: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1953: LD_EXP 61
1957: PPUSH
1958: LD_EXP 45
1962: PPUSH
1963: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1967: LD_EXP 45
1971: PPUSH
1972: LD_INT 165
1974: PPUSH
1975: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
1979: LD_EXP 45
1983: PPUSH
1984: LD_INT 1
1986: PPUSH
1987: CALL_OW 336
// giviAsRussian := true ;
1991: LD_ADDR_EXP 28
1995: PUSH
1996: LD_INT 1
1998: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1999: LD_STRING M1-laundry-out
2001: PPUSH
2002: CALL_OW 604
// SetAchievement ( ACH_GIVIRU ) ;
2006: LD_STRING ACH_GIVIRU
2008: PPUSH
2009: CALL_OW 543
// end ; end_of_file
2013: LD_VAR 0 1
2017: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , un , tmp ; begin
2018: LD_INT 0
2020: PPUSH
2021: PPUSH
2022: PPUSH
2023: PPUSH
2024: PPUSH
// uc_side := 3 ;
2025: LD_ADDR_OWVAR 20
2029: PUSH
2030: LD_INT 3
2032: ST_TO_ADDR
// uc_nation := 3 ;
2033: LD_ADDR_OWVAR 21
2037: PUSH
2038: LD_INT 3
2040: ST_TO_ADDR
// SetBName ( ruKitchen , kitchen ) ;
2041: LD_INT 192
2043: PPUSH
2044: LD_STRING kitchen
2046: PPUSH
2047: CALL_OW 500
// SetBName ( laundry , laundry ) ;
2051: LD_INT 165
2053: PPUSH
2054: LD_STRING laundry
2056: PPUSH
2057: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
2061: LD_INT 54
2063: PPUSH
2064: LD_STRING adminSection
2066: PPUSH
2067: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: LD_INT 21
2078: PUSH
2079: LD_INT 3
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: PPUSH
2086: CALL_OW 69
2090: PUSH
2091: FOR_IN
2092: IFFALSE 2108
// SetBLevel ( i , 7 ) ;
2094: LD_VAR 0 2
2098: PPUSH
2099: LD_INT 7
2101: PPUSH
2102: CALL_OW 241
2106: GO 2091
2108: POP
2109: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2110: LD_ADDR_VAR 0 2
2114: PUSH
2115: LD_INT 22
2117: PUSH
2118: LD_INT 3
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 2
2127: PUSH
2128: LD_INT 30
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PUSH
2138: LD_INT 30
2140: PUSH
2141: LD_INT 1
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: PPUSH
2157: CALL_OW 69
2161: PUSH
2162: FOR_IN
2163: IFFALSE 2227
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2165: LD_VAR 0 2
2169: PPUSH
2170: CALL_OW 274
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_INT 1000
2180: PPUSH
2181: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2185: LD_VAR 0 2
2189: PPUSH
2190: CALL_OW 274
2194: PPUSH
2195: LD_INT 2
2197: PPUSH
2198: LD_INT 1000
2200: PPUSH
2201: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2205: LD_VAR 0 2
2209: PPUSH
2210: CALL_OW 274
2214: PPUSH
2215: LD_INT 3
2217: PPUSH
2218: LD_INT 100
2220: PPUSH
2221: CALL_OW 277
// end ;
2225: GO 2162
2227: POP
2228: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2229: LD_ADDR_VAR 0 2
2233: PUSH
2234: LD_INT 22
2236: PUSH
2237: LD_INT 3
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: PUSH
2244: LD_INT 30
2246: PUSH
2247: LD_INT 32
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PPUSH
2258: CALL_OW 69
2262: PUSH
2263: FOR_IN
2264: IFFALSE 2298
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2266: LD_INT 0
2268: PPUSH
2269: LD_INT 5
2271: PUSH
2272: LD_OWVAR 67
2276: PLUS
2277: PPUSH
2278: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2282: CALL_OW 44
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: CALL_OW 52
// end ;
2296: GO 2263
2298: POP
2299: POP
// for i := 1 to 2 do
2300: LD_ADDR_VAR 0 2
2304: PUSH
2305: DOUBLE
2306: LD_INT 1
2308: DEC
2309: ST_TO_ADDR
2310: LD_INT 2
2312: PUSH
2313: FOR_TO
2314: IFFALSE 2366
// begin PrepareMechanic ( false , 8 ) ;
2316: LD_INT 0
2318: PPUSH
2319: LD_INT 8
2321: PPUSH
2322: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2326: LD_ADDR_EXP 65
2330: PUSH
2331: LD_EXP 65
2335: PPUSH
2336: CALL_OW 44
2340: PPUSH
2341: CALL 66083 0 2
2345: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2346: LD_EXP 65
2350: PUSH
2351: LD_EXP 65
2355: ARRAY
2356: PPUSH
2357: LD_INT 61
2359: PPUSH
2360: CALL_OW 52
// end ;
2364: GO 2313
2366: POP
2367: POP
// PrepareMechanic ( sex_male , 8 ) ;
2368: LD_INT 1
2370: PPUSH
2371: LD_INT 8
2373: PPUSH
2374: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2378: LD_ADDR_EXP 66
2382: PUSH
2383: LD_EXP 66
2387: PPUSH
2388: CALL_OW 44
2392: PPUSH
2393: CALL 66083 0 2
2397: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2398: LD_EXP 66
2402: PUSH
2403: LD_EXP 66
2407: ARRAY
2408: PPUSH
2409: LD_INT 196
2411: PPUSH
2412: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2416: LD_INT 1
2418: PPUSH
2419: LD_INT 8
2421: PPUSH
2422: CALL_OW 383
// hc_name := Stiepan Simonov ;
2426: LD_ADDR_OWVAR 26
2430: PUSH
2431: LD_STRING Stiepan Simonov
2433: ST_TO_ADDR
// Stiopa := CreateHuman ;
2434: LD_ADDR_EXP 67
2438: PUSH
2439: CALL_OW 44
2443: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2444: LD_INT 2
2446: PPUSH
2447: LD_INT 8
2449: PPUSH
2450: CALL_OW 383
// hc_name := Laura Dragunov ;
2454: LD_ADDR_OWVAR 26
2458: PUSH
2459: LD_STRING Laura Dragunov
2461: ST_TO_ADDR
// Laura := CreateHuman ;
2462: LD_ADDR_EXP 68
2466: PUSH
2467: CALL_OW 44
2471: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2472: LD_EXP 68
2476: PPUSH
2477: LD_INT 196
2479: PPUSH
2480: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2484: LD_INT 1
2486: PPUSH
2487: LD_INT 8
2489: PPUSH
2490: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2494: LD_ADDR_EXP 65
2498: PUSH
2499: LD_EXP 65
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 44
2511: PPUSH
2512: CALL_OW 2
2516: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2517: LD_EXP 65
2521: PUSH
2522: LD_INT 1
2524: ARRAY
2525: PPUSH
2526: LD_INT 61
2528: PPUSH
2529: CALL_OW 52
// PrepareSoldier ( sex_male , 8 ) ;
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 8
2538: PPUSH
2539: CALL_OW 381
// hc_name := Pavel Muchin ;
2543: LD_ADDR_OWVAR 26
2547: PUSH
2548: LD_STRING Pavel Muchin
2550: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2551: LD_ADDR_OWVAR 29
2555: PUSH
2556: LD_INT 13
2558: PUSH
2559: LD_INT 13
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2566: LD_ADDR_EXP 64
2570: PUSH
2571: CALL_OW 44
2575: ST_TO_ADDR
// InitHC_All ( ) ;
2576: CALL_OW 584
// if Difficulty > 1 then
2580: LD_OWVAR 67
2584: PUSH
2585: LD_INT 1
2587: GREATER
2588: IFFALSE 2708
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: DOUBLE
2596: LD_INT 1
2598: DEC
2599: ST_TO_ADDR
2600: LD_INT 3
2602: PUSH
2603: LD_INT 4
2605: PUSH
2606: LD_INT 5
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: LIST
2613: PUSH
2614: LD_OWVAR 67
2618: PUSH
2619: LD_INT 1
2621: PLUS
2622: ARRAY
2623: PUSH
2624: FOR_TO
2625: IFFALSE 2706
// begin PrepareSoldier ( false , [ 5 , 6 , 7 ] [ Difficulty + 1 ] ) ;
2627: LD_INT 0
2629: PPUSH
2630: LD_INT 5
2632: PUSH
2633: LD_INT 6
2635: PUSH
2636: LD_INT 7
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: LIST
2643: PUSH
2644: LD_OWVAR 67
2648: PUSH
2649: LD_INT 1
2651: PLUS
2652: ARRAY
2653: PPUSH
2654: CALL_OW 381
// un := CreateHuman ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: CALL_OW 44
2667: ST_TO_ADDR
// PlaceUnitArea ( un , [ westGroup1Area , westGroup2Area ] [ i mod 2 + 1 ] , false ) ;
2668: LD_VAR 0 4
2672: PPUSH
2673: LD_INT 62
2675: PUSH
2676: LD_INT 63
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: LD_VAR 0 2
2687: PUSH
2688: LD_INT 2
2690: MOD
2691: PUSH
2692: LD_INT 1
2694: PLUS
2695: ARRAY
2696: PPUSH
2697: LD_INT 0
2699: PPUSH
2700: CALL_OW 49
// end ;
2704: GO 2624
2706: POP
2707: POP
// end ; uc_side := 6 ;
2708: LD_ADDR_OWVAR 20
2712: PUSH
2713: LD_INT 6
2715: ST_TO_ADDR
// uc_nation := 3 ;
2716: LD_ADDR_OWVAR 21
2720: PUSH
2721: LD_INT 3
2723: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2724: LD_ADDR_VAR 0 5
2728: PUSH
2729: LD_INT 14
2731: PUSH
2732: LD_INT 15
2734: PUSH
2735: LD_INT 48
2737: PUSH
2738: LD_INT 24
2740: PUSH
2741: LD_INT 149
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: ST_TO_ADDR
// for i in tmp do
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: PUSH
2761: FOR_IN
2762: IFFALSE 2810
// begin for j := 1 to 2 do
2764: LD_ADDR_VAR 0 3
2768: PUSH
2769: DOUBLE
2770: LD_INT 1
2772: DEC
2773: ST_TO_ADDR
2774: LD_INT 2
2776: PUSH
2777: FOR_TO
2778: IFFALSE 2806
// begin PrepareSoldier ( false , 7 ) ;
2780: LD_INT 0
2782: PPUSH
2783: LD_INT 7
2785: PPUSH
2786: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2790: CALL_OW 44
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// end ;
2804: GO 2777
2806: POP
2807: POP
// end ;
2808: GO 2761
2810: POP
2811: POP
// end ;
2812: LD_VAR 0 1
2816: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2817: LD_INT 0
2819: PPUSH
2820: PPUSH
2821: PPUSH
2822: PPUSH
// uc_side := 3 ;
2823: LD_ADDR_OWVAR 20
2827: PUSH
2828: LD_INT 3
2830: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2831: LD_ADDR_OWVAR 21
2835: PUSH
2836: LD_INT 1
2838: PPUSH
2839: LD_INT 3
2841: PPUSH
2842: CALL_OW 12
2846: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2847: LD_ADDR_VAR 0 4
2851: PUSH
2852: LD_INT 5
2854: PPUSH
2855: LD_INT 0
2857: PPUSH
2858: CALL_OW 517
2862: ST_TO_ADDR
// for i := 1 to 3 do
2863: LD_ADDR_VAR 0 2
2867: PUSH
2868: DOUBLE
2869: LD_INT 1
2871: DEC
2872: ST_TO_ADDR
2873: LD_INT 3
2875: PUSH
2876: FOR_TO
2877: IFFALSE 2946
// begin PrepareHuman ( false , 33 , 0 ) ;
2879: LD_INT 0
2881: PPUSH
2882: LD_INT 33
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 380
// un := CreateHuman ;
2892: LD_ADDR_VAR 0 3
2896: PUSH
2897: CALL_OW 44
2901: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2902: LD_VAR 0 3
2906: PPUSH
2907: LD_VAR 0 4
2911: PUSH
2912: LD_INT 1
2914: ARRAY
2915: PUSH
2916: LD_VAR 0 2
2920: ARRAY
2921: PPUSH
2922: LD_VAR 0 4
2926: PUSH
2927: LD_INT 2
2929: ARRAY
2930: PUSH
2931: LD_VAR 0 2
2935: ARRAY
2936: PPUSH
2937: LD_INT 1
2939: PPUSH
2940: CALL_OW 601
// end ;
2944: GO 2876
2946: POP
2947: POP
// end ;
2948: LD_VAR 0 1
2952: RET
// export function PrepareFirstScene ; var i , un ; begin
2953: LD_INT 0
2955: PPUSH
2956: PPUSH
2957: PPUSH
// uc_side := 4 ;
2958: LD_ADDR_OWVAR 20
2962: PUSH
2963: LD_INT 4
2965: ST_TO_ADDR
// uc_nation := 1 ;
2966: LD_ADDR_OWVAR 21
2970: PUSH
2971: LD_INT 1
2973: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
2974: LD_INT 0
2976: PPUSH
2977: LD_INT 33
2979: PPUSH
2980: LD_INT 0
2982: PPUSH
2983: CALL_OW 380
// for i := 1 to 2 do
2987: LD_ADDR_VAR 0 2
2991: PUSH
2992: DOUBLE
2993: LD_INT 1
2995: DEC
2996: ST_TO_ADDR
2997: LD_INT 2
2999: PUSH
3000: FOR_TO
3001: IFFALSE 3066
// begin un := CreateHuman ;
3003: LD_ADDR_VAR 0 3
3007: PUSH
3008: CALL_OW 44
3012: ST_TO_ADDR
// SetDir ( un , 1 ) ;
3013: LD_VAR 0 3
3017: PPUSH
3018: LD_INT 1
3020: PPUSH
3021: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
3025: LD_VAR 0 3
3029: PPUSH
3030: LD_INT 6
3032: PPUSH
3033: LD_INT 0
3035: PPUSH
3036: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
3040: LD_VAR 0 3
3044: PPUSH
3045: LD_INT 1
3047: PPUSH
3048: CALL 69235 0 2
// SetLives ( un , 300 ) ;
3052: LD_VAR 0 3
3056: PPUSH
3057: LD_INT 300
3059: PPUSH
3060: CALL_OW 234
// end ;
3064: GO 3000
3066: POP
3067: POP
// uc_side := 3 ;
3068: LD_ADDR_OWVAR 20
3072: PUSH
3073: LD_INT 3
3075: ST_TO_ADDR
// uc_nation := 3 ;
3076: LD_ADDR_OWVAR 21
3080: PUSH
3081: LD_INT 3
3083: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
3084: LD_INT 1
3086: PPUSH
3087: LD_INT 5
3089: PPUSH
3090: CALL_OW 381
// for i := 1 to 3 do
3094: LD_ADDR_VAR 0 2
3098: PUSH
3099: DOUBLE
3100: LD_INT 1
3102: DEC
3103: ST_TO_ADDR
3104: LD_INT 3
3106: PUSH
3107: FOR_TO
3108: IFFALSE 3181
// begin un := CreateHuman ;
3110: LD_ADDR_VAR 0 3
3114: PUSH
3115: CALL_OW 44
3119: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
3120: LD_ADDR_EXP 62
3124: PUSH
3125: LD_EXP 62
3129: PPUSH
3130: LD_VAR 0 3
3134: PPUSH
3135: CALL 66083 0 2
3139: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 4
3147: PPUSH
3148: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
3152: LD_VAR 0 3
3156: PPUSH
3157: LD_INT 7
3159: PPUSH
3160: LD_INT 0
3162: PPUSH
3163: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 4
3174: PPUSH
3175: CALL 69235 0 2
// end ;
3179: GO 3107
3181: POP
3182: POP
// ruCommisar := CreateHuman ;
3183: LD_ADDR_EXP 63
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
3193: LD_EXP 63
3197: PPUSH
3198: LD_INT 124
3200: PPUSH
3201: LD_INT 37
3203: PPUSH
3204: LD_INT 0
3206: PPUSH
3207: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
3211: LD_EXP 63
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
3223: LD_EXP 63
3227: PPUSH
3228: LD_INT 3
3230: PPUSH
3231: CALL 69235 0 2
// end ;
3235: LD_VAR 0 1
3239: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3240: LD_INT 0
3242: PPUSH
3243: PPUSH
3244: PPUSH
3245: PPUSH
// uc_side := 6 ;
3246: LD_ADDR_OWVAR 20
3250: PUSH
3251: LD_INT 6
3253: ST_TO_ADDR
// uc_nation := 3 ;
3254: LD_ADDR_OWVAR 21
3258: PUSH
3259: LD_INT 3
3261: ST_TO_ADDR
// ruPatrol := [ ] ;
3262: LD_ADDR_EXP 69
3266: PUSH
3267: EMPTY
3268: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3269: LD_ADDR_VAR 0 4
3273: PUSH
3274: LD_INT 26
3276: PUSH
3277: LD_INT 30
3279: PUSH
3280: LD_INT 39
3282: PUSH
3283: LD_INT 43
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: ST_TO_ADDR
// for i := 1 to spawn do
3292: LD_ADDR_VAR 0 2
3296: PUSH
3297: DOUBLE
3298: LD_INT 1
3300: DEC
3301: ST_TO_ADDR
3302: LD_VAR 0 4
3306: PUSH
3307: FOR_TO
3308: IFFALSE 3419
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3310: LD_INT 0
3312: PPUSH
3313: LD_INT 4
3315: PUSH
3316: LD_INT 5
3318: PUSH
3319: LD_INT 6
3321: PUSH
3322: LD_INT 7
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: PUSH
3331: LD_OWVAR 67
3335: ARRAY
3336: PPUSH
3337: CALL_OW 381
// un := CreateHuman ;
3341: LD_ADDR_VAR 0 3
3345: PUSH
3346: CALL_OW 44
3350: ST_TO_ADDR
// SetTag ( un , i ) ;
3351: LD_VAR 0 3
3355: PPUSH
3356: LD_VAR 0 2
3360: PPUSH
3361: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3365: LD_ADDR_EXP 69
3369: PUSH
3370: LD_EXP 69
3374: PPUSH
3375: LD_VAR 0 3
3379: PPUSH
3380: CALL 66083 0 2
3384: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3385: LD_VAR 0 3
3389: PPUSH
3390: LD_VAR 0 4
3394: PUSH
3395: LD_VAR 0 2
3399: ARRAY
3400: PPUSH
3401: LD_INT 0
3403: PPUSH
3404: CALL_OW 49
// ComHold ( un ) ;
3408: LD_VAR 0 3
3412: PPUSH
3413: CALL_OW 140
// end ;
3417: GO 3307
3419: POP
3420: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3421: LD_ADDR_VAR 0 4
3425: PUSH
3426: LD_INT 48
3428: PUSH
3429: LD_INT 49
3431: PUSH
3432: LD_INT 50
3434: PUSH
3435: LD_INT 51
3437: PUSH
3438: LD_INT 52
3440: PUSH
3441: LD_INT 53
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: ST_TO_ADDR
// for i := 1 to spawn do
3452: LD_ADDR_VAR 0 2
3456: PUSH
3457: DOUBLE
3458: LD_INT 1
3460: DEC
3461: ST_TO_ADDR
3462: LD_VAR 0 4
3466: PUSH
3467: FOR_TO
3468: IFFALSE 3577
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3470: LD_INT 0
3472: PPUSH
3473: LD_INT 4
3475: PUSH
3476: LD_INT 5
3478: PUSH
3479: LD_INT 6
3481: PUSH
3482: LD_INT 7
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: PUSH
3491: LD_OWVAR 67
3495: ARRAY
3496: PPUSH
3497: CALL_OW 381
// un := CreateHuman ;
3501: LD_ADDR_VAR 0 3
3505: PUSH
3506: CALL_OW 44
3510: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3511: LD_VAR 0 3
3515: PPUSH
3516: LD_INT 0
3518: PPUSH
3519: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3523: LD_ADDR_EXP 69
3527: PUSH
3528: LD_EXP 69
3532: PPUSH
3533: LD_VAR 0 3
3537: PPUSH
3538: CALL 66083 0 2
3542: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3543: LD_VAR 0 3
3547: PPUSH
3548: LD_VAR 0 4
3552: PUSH
3553: LD_VAR 0 2
3557: ARRAY
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// ComHold ( un ) ;
3566: LD_VAR 0 3
3570: PPUSH
3571: CALL_OW 140
// end ;
3575: GO 3467
3577: POP
3578: POP
// end ;
3579: LD_VAR 0 1
3583: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3584: LD_INT 0
3586: PPUSH
3587: PPUSH
3588: PPUSH
3589: PPUSH
// uc_side := 6 ;
3590: LD_ADDR_OWVAR 20
3594: PUSH
3595: LD_INT 6
3597: ST_TO_ADDR
// uc_nation := nation_russian ;
3598: LD_ADDR_OWVAR 21
3602: PUSH
3603: LD_INT 3
3605: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3606: LD_ADDR_VAR 0 4
3610: PUSH
3611: LD_INT 54
3613: PUSH
3614: LD_INT 55
3616: PUSH
3617: LD_INT 56
3619: PUSH
3620: LD_INT 57
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: ST_TO_ADDR
// for i := 1 to spawn do
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: DOUBLE
3635: LD_INT 1
3637: DEC
3638: ST_TO_ADDR
3639: LD_VAR 0 4
3643: PUSH
3644: FOR_TO
3645: IFFALSE 3754
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3647: LD_INT 0
3649: PPUSH
3650: LD_INT 4
3652: PUSH
3653: LD_INT 5
3655: PUSH
3656: LD_INT 6
3658: PUSH
3659: LD_INT 7
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: PUSH
3668: LD_OWVAR 67
3672: ARRAY
3673: PPUSH
3674: CALL_OW 381
// un := CreateHuman ;
3678: LD_ADDR_VAR 0 3
3682: PUSH
3683: CALL_OW 44
3687: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3688: LD_VAR 0 3
3692: PPUSH
3693: LD_INT 0
3695: PPUSH
3696: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3700: LD_ADDR_EXP 69
3704: PUSH
3705: LD_EXP 69
3709: PPUSH
3710: LD_VAR 0 3
3714: PPUSH
3715: CALL 66083 0 2
3719: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3720: LD_VAR 0 3
3724: PPUSH
3725: LD_VAR 0 4
3729: PUSH
3730: LD_VAR 0 2
3734: ARRAY
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: CALL_OW 49
// ComHold ( un ) ;
3743: LD_VAR 0 3
3747: PPUSH
3748: CALL_OW 140
// end ;
3752: GO 3644
3754: POP
3755: POP
// end ; end_of_file
3756: LD_VAR 0 1
3760: RET
// export function Action ; var speaker , i , tmp ; begin
3761: LD_INT 0
3763: PPUSH
3764: PPUSH
3765: PPUSH
3766: PPUSH
// Video ( true ) ;
3767: LD_INT 1
3769: PPUSH
3770: CALL 66055 0 1
// hasNormalScene := Kaia or Givi ;
3774: LD_ADDR_EXP 5
3778: PUSH
3779: LD_EXP 49
3783: PUSH
3784: LD_EXP 45
3788: OR
3789: ST_TO_ADDR
// if hasNormalScene then
3790: LD_EXP 5
3794: IFFALSE 4035
// begin for i in americanSquad do
3796: LD_ADDR_VAR 0 3
3800: PUSH
3801: LD_EXP 56
3805: PUSH
3806: FOR_IN
3807: IFFALSE 3853
// begin SetClass ( i , class_prison ) ;
3809: LD_VAR 0 3
3813: PPUSH
3814: LD_INT 33
3816: PPUSH
3817: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3821: LD_VAR 0 3
3825: PPUSH
3826: LD_INT 78
3828: PPUSH
3829: LD_INT 16
3831: PPUSH
3832: LD_INT 5
3834: PPUSH
3835: LD_INT 0
3837: PPUSH
3838: CALL_OW 50
// ComHold ( i ) ;
3842: LD_VAR 0 3
3846: PPUSH
3847: CALL_OW 140
// end ;
3851: GO 3806
3853: POP
3854: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3855: LD_ADDR_VAR 0 4
3859: PUSH
3860: LD_EXP 46
3864: PUSH
3865: LD_EXP 47
3869: PUSH
3870: LD_EXP 48
3874: PUSH
3875: LD_EXP 49
3879: PUSH
3880: LD_EXP 50
3884: PUSH
3885: LD_EXP 51
3889: PUSH
3890: LD_EXP 52
3894: PUSH
3895: LD_EXP 53
3899: PUSH
3900: LD_EXP 45
3904: PUSH
3905: LD_EXP 54
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: PUSH
3922: LD_EXP 55
3926: UNION
3927: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
3928: LD_EXP 44
3932: PPUSH
3933: LD_INT 33
3935: PPUSH
3936: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
3940: LD_EXP 44
3944: PPUSH
3945: LD_INT 117
3947: PPUSH
3948: LD_INT 24
3950: PPUSH
3951: LD_INT 3
3953: PPUSH
3954: LD_INT 0
3956: PPUSH
3957: CALL 68223 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
3961: LD_EXP 44
3965: PPUSH
3966: LD_INT 123
3968: PPUSH
3969: LD_INT 39
3971: PPUSH
3972: CALL_OW 118
// for i in tmp do
3976: LD_ADDR_VAR 0 3
3980: PUSH
3981: LD_VAR 0 4
3985: PUSH
3986: FOR_IN
3987: IFFALSE 4033
// begin SetClass ( i , class_prison ) ;
3989: LD_VAR 0 3
3993: PPUSH
3994: LD_INT 33
3996: PPUSH
3997: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
4001: LD_VAR 0 3
4005: PPUSH
4006: LD_INT 3
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
4016: LD_VAR 0 3
4020: PPUSH
4021: LD_INT 113
4023: PPUSH
4024: LD_INT 16
4026: PPUSH
4027: CALL_OW 118
// end ;
4031: GO 3986
4033: POP
4034: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
4035: LD_INT 124
4037: PPUSH
4038: LD_INT 39
4040: PPUSH
4041: CALL_OW 86
// PrepareDeadBodies ;
4045: CALL 2817 0 0
// PrepareFirstScene ;
4049: CALL 2953 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4053: LD_INT 152
4055: PPUSH
4056: LD_INT 65
4058: PPUSH
4059: LD_INT 2
4061: PPUSH
4062: LD_INT 70
4064: NEG
4065: PPUSH
4066: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4070: LD_INT 152
4072: PPUSH
4073: LD_INT 65
4075: PPUSH
4076: LD_INT 2
4078: PPUSH
4079: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
4083: LD_INT 122
4085: PPUSH
4086: LD_INT 40
4088: PPUSH
4089: LD_INT 2
4091: PPUSH
4092: LD_INT 8
4094: NEG
4095: PPUSH
4096: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
4100: LD_INT 124
4102: PPUSH
4103: LD_INT 37
4105: PPUSH
4106: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
4110: LD_EXP 63
4114: PPUSH
4115: LD_STRING DRum-Execution-1
4117: PPUSH
4118: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
4122: LD_EXP 63
4126: PPUSH
4127: LD_STRING DRum-Execution-2
4129: PPUSH
4130: CALL_OW 88
// wait ( 0 0$01 ) ;
4134: LD_INT 35
4136: PPUSH
4137: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
4141: LD_EXP 63
4145: PPUSH
4146: LD_STRING DRum-Execution-3
4148: PPUSH
4149: CALL_OW 88
// wait ( 0 0$1 ) ;
4153: LD_INT 35
4155: PPUSH
4156: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
4160: LD_EXP 63
4164: PPUSH
4165: LD_STRING DRum-Execution-4
4167: PPUSH
4168: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
4172: LD_EXP 62
4176: PUSH
4177: LD_INT 1
4179: ARRAY
4180: PPUSH
4181: LD_INT 122
4183: PPUSH
4184: LD_INT 39
4186: PPUSH
4187: CALL_OW 428
4191: PPUSH
4192: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
4196: LD_EXP 62
4200: PUSH
4201: LD_INT 2
4203: ARRAY
4204: PPUSH
4205: LD_INT 123
4207: PPUSH
4208: LD_INT 41
4210: PPUSH
4211: CALL_OW 428
4215: PPUSH
4216: CALL_OW 115
// AddComHold ( russianKillers ) ;
4220: LD_EXP 62
4224: PPUSH
4225: CALL_OW 200
// wait ( 0 0$1 ) ;
4229: LD_INT 35
4231: PPUSH
4232: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4236: LD_INT 122
4238: PPUSH
4239: LD_INT 40
4241: PPUSH
4242: LD_INT 2
4244: PPUSH
4245: CALL_OW 331
// for i in russianKillers union ruCommisar do
4249: LD_ADDR_VAR 0 3
4253: PUSH
4254: LD_EXP 62
4258: PUSH
4259: LD_EXP 63
4263: UNION
4264: PUSH
4265: FOR_IN
4266: IFFALSE 4279
// RemoveUnit ( i ) ;
4268: LD_VAR 0 3
4272: PPUSH
4273: CALL_OW 64
4277: GO 4265
4279: POP
4280: POP
// if hasNormalScene then
4281: LD_EXP 5
4285: IFFALSE 4293
// ActionNormal else
4287: CALL 4302 0 0
4291: GO 4297
// ActionAdditional ;
4293: CALL 6120 0 0
// end ;
4297: LD_VAR 0 1
4301: RET
// function ActionNormal ; var i , tmp ; begin
4302: LD_INT 0
4304: PPUSH
4305: PPUSH
4306: PPUSH
// CenterNowOnUnits ( Heike ) ;
4307: LD_EXP 44
4311: PPUSH
4312: CALL_OW 87
// wait ( 0 0$1 ) ;
4316: LD_INT 35
4318: PPUSH
4319: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4323: LD_EXP 44
4327: PPUSH
4328: LD_INT 115
4330: PPUSH
4331: LD_INT 19
4333: PPUSH
4334: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4338: LD_EXP 44
4342: PPUSH
4343: LD_INT 113
4345: PPUSH
4346: LD_INT 16
4348: PPUSH
4349: CALL_OW 178
// wait ( 0 0$2 ) ;
4353: LD_INT 70
4355: PPUSH
4356: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4360: LD_EXP 44
4364: PPUSH
4365: LD_STRING DH-Conspiracy-1
4367: PPUSH
4368: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4372: LD_EXP 49
4376: PPUSH
4377: LD_STRING DK-Conspiracy-2
4379: PPUSH
4380: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4384: LD_EXP 45
4388: PPUSH
4389: LD_STRING DG-Conspiracy-3
4391: PPUSH
4392: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4396: LD_EXP 45
4400: PPUSH
4401: LD_STRING DG-Conspiracy-4
4403: PPUSH
4404: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4408: LD_EXP 44
4412: PPUSH
4413: LD_STRING DH-Conspiracy-5
4415: PPUSH
4416: CALL_OW 88
// if IsOk ( Kamil ) then
4420: LD_EXP 48
4424: PPUSH
4425: CALL_OW 302
4429: IFFALSE 4487
// begin hasVodka := true ;
4431: LD_ADDR_EXP 4
4435: PUSH
4436: LD_INT 1
4438: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4439: LD_EXP 48
4443: PPUSH
4444: LD_STRING DKam-Conspiracy-6
4446: PPUSH
4447: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4451: LD_EXP 48
4455: PPUSH
4456: LD_STRING DKam-Conspiracy-7
4458: PPUSH
4459: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4463: LD_EXP 48
4467: PPUSH
4468: LD_STRING DKam-Conspiracy-8
4470: PPUSH
4471: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4475: LD_EXP 48
4479: PPUSH
4480: LD_STRING DKam-Conspiracy-9
4482: PPUSH
4483: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4487: LD_EXP 50
4491: PPUSH
4492: CALL_OW 302
4496: IFFALSE 4677
// begin americanContact := true ;
4498: LD_ADDR_EXP 10
4502: PUSH
4503: LD_INT 1
4505: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4506: LD_STRING M1-american
4508: PPUSH
4509: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4513: LD_EXP 50
4517: PPUSH
4518: LD_STRING DS-Conspiracy-10
4520: PPUSH
4521: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4525: LD_EXP 51
4529: PPUSH
4530: LD_STRING DM-Conspiracy-11
4532: PPUSH
4533: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4537: LD_EXP 50
4541: PPUSH
4542: LD_STRING DS-Conspiracy-12
4544: PPUSH
4545: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4549: LD_INT 84
4551: PPUSH
4552: LD_INT 19
4554: PPUSH
4555: LD_INT 105
4557: PPUSH
4558: CALL 19576 0 3
// if johnnySaved then
4562: LD_EXP 3
4566: IFFALSE 4606
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4568: LD_EXP 50
4572: PPUSH
4573: LD_STRING DS-Conspiracy-13
4575: PPUSH
4576: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4580: LD_EXP 44
4584: PPUSH
4585: LD_STRING DH-Conspiracy-14
4587: PPUSH
4588: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
4592: LD_EXP 50
4596: PPUSH
4597: LD_STRING DH-Conspiracy-15
4599: PPUSH
4600: CALL_OW 88
// end else
4604: GO 4642
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4606: LD_EXP 50
4610: PPUSH
4611: LD_STRING DS-Conspiracy-a-13
4613: PPUSH
4614: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4618: LD_EXP 44
4622: PPUSH
4623: LD_STRING DH-Conspiracy-a-14
4625: PPUSH
4626: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-15 ) ;
4630: LD_EXP 44
4634: PPUSH
4635: LD_STRING DH-Conspiracy-a-15
4637: PPUSH
4638: CALL_OW 88
// end ; if IsOk ( Givi ) then
4642: LD_EXP 45
4646: PPUSH
4647: CALL_OW 302
4651: IFFALSE 4677
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4653: LD_EXP 45
4657: PPUSH
4658: LD_STRING DG-Conspiracy-a-16
4660: PPUSH
4661: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4665: LD_EXP 44
4669: PPUSH
4670: LD_STRING DH-Conspiracy-a-17
4672: PPUSH
4673: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4677: LD_EXP 44
4681: PPUSH
4682: LD_STRING DH-Conspiracy-16
4684: PPUSH
4685: CALL_OW 88
// if IsOk ( Givi ) then
4689: LD_EXP 45
4693: PPUSH
4694: CALL_OW 302
4698: IFFALSE 4970
// begin hasStimDrugs := true ;
4700: LD_ADDR_EXP 9
4704: PUSH
4705: LD_INT 1
4707: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4708: LD_STRING M1-drugs
4710: PPUSH
4711: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4715: LD_EXP 45
4719: PPUSH
4720: LD_STRING DG-Conspiracy-17
4722: PPUSH
4723: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4727: LD_INT 162
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4737: LD_INT 194
4739: PPUSH
4740: LD_INT 98
4742: PPUSH
4743: LD_INT 105
4745: PPUSH
4746: CALL 19576 0 3
// SetSide ( drugsLab , 3 ) ;
4750: LD_INT 162
4752: PPUSH
4753: LD_INT 3
4755: PPUSH
4756: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4760: LD_EXP 45
4764: PPUSH
4765: LD_STRING DG-Conspiracy-18
4767: PPUSH
4768: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4772: LD_EXP 45
4776: PPUSH
4777: LD_STRING DG-Conspiracy-19
4779: PPUSH
4780: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4784: LD_EXP 45
4788: PPUSH
4789: LD_STRING DG-Conspiracy-20
4791: PPUSH
4792: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4796: LD_EXP 44
4800: PPUSH
4801: LD_STRING DH-Conspiracy-21
4803: PPUSH
4804: CALL_OW 88
// if IsOk ( Kaia ) then
4808: LD_EXP 49
4812: PPUSH
4813: CALL_OW 302
4817: IFFALSE 4891
// begin hasExplosions := true ;
4819: LD_ADDR_EXP 6
4823: PUSH
4824: LD_INT 1
4826: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4827: LD_STRING M1-explosive
4829: PPUSH
4830: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4834: LD_EXP 49
4838: PPUSH
4839: LD_STRING DK-Conspiracy-22
4841: PPUSH
4842: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4846: LD_INT 73
4848: PPUSH
4849: LD_INT 2
4851: PPUSH
4852: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4856: LD_INT 170
4858: PPUSH
4859: LD_INT 104
4861: PPUSH
4862: LD_INT 105
4864: PPUSH
4865: CALL 19576 0 3
// SetSide ( barExplosion , 3 ) ;
4869: LD_INT 73
4871: PPUSH
4872: LD_INT 3
4874: PPUSH
4875: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4879: LD_EXP 49
4883: PPUSH
4884: LD_STRING DK-Conspiracy-23
4886: PPUSH
4887: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4891: LD_EXP 52
4895: PPUSH
4896: CALL_OW 302
4900: IFFALSE 4970
// begin hasExplosionsInFactory := true ;
4902: LD_ADDR_EXP 7
4906: PUSH
4907: LD_INT 1
4909: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4910: LD_EXP 52
4914: PPUSH
4915: LD_STRING DO-Conspiracy-24
4917: PPUSH
4918: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4922: LD_INT 175
4924: PPUSH
4925: LD_INT 54
4927: PPUSH
4928: LD_INT 70
4930: PPUSH
4931: CALL 19576 0 3
// if IsOk ( Markov ) then
4935: LD_EXP 51
4939: PPUSH
4940: CALL_OW 302
4944: IFFALSE 4970
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
4946: LD_EXP 51
4950: PPUSH
4951: LD_STRING DMar-Conspiracy-25
4953: PPUSH
4954: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
4958: LD_EXP 51
4962: PPUSH
4963: LD_STRING DMar-Conspiracy-26
4965: PPUSH
4966: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
4970: LD_EXP 53
4974: PPUSH
4975: CALL_OW 302
4979: PUSH
4980: LD_EXP 49
4984: PPUSH
4985: CALL_OW 302
4989: AND
4990: IFFALSE 5450
// begin hasWeapons := true ;
4992: LD_ADDR_EXP 19
4996: PUSH
4997: LD_INT 1
4999: ST_TO_ADDR
// hasRevolver := true ;
5000: LD_ADDR_EXP 8
5004: PUSH
5005: LD_INT 1
5007: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
5008: LD_STRING M1-weapons
5010: PPUSH
5011: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
5015: LD_EXP 53
5019: PPUSH
5020: LD_STRING DKs-Conspiracy-27
5022: PPUSH
5023: CALL_OW 88
// if IsOk ( Givi ) then
5027: LD_EXP 45
5031: PPUSH
5032: CALL_OW 302
5036: IFFALSE 5052
// Say ( Givi , DG-Conspiracy-28 ) else
5038: LD_EXP 45
5042: PPUSH
5043: LD_STRING DG-Conspiracy-28
5045: PPUSH
5046: CALL_OW 88
5050: GO 5117
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
5052: LD_EXP 55
5056: PPUSH
5057: LD_INT 26
5059: PUSH
5060: LD_INT 1
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PPUSH
5067: CALL_OW 72
5071: PUSH
5072: LD_INT 1
5074: ARRAY
5075: PPUSH
5076: LD_STRING DArm-Conspiracy-a-28
5078: PPUSH
5079: CALL_OW 88
5083: NOT
5084: IFFALSE 5117
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
5086: LD_EXP 55
5090: PPUSH
5091: LD_INT 26
5093: PUSH
5094: LD_INT 2
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 72
5105: PUSH
5106: LD_INT 1
5108: ARRAY
5109: PPUSH
5110: LD_STRING DArf-Conspiracy-a-28
5112: PPUSH
5113: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
5117: LD_EXP 53
5121: PPUSH
5122: LD_STRING DKs-Conspiracy-29
5124: PPUSH
5125: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
5129: LD_INT 192
5131: PPUSH
5132: LD_INT 122
5134: PPUSH
5135: LD_INT 105
5137: PPUSH
5138: CALL 19576 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
5142: LD_EXP 53
5146: PPUSH
5147: LD_STRING DKs-Conspiracy-30
5149: PPUSH
5150: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
5154: LD_EXP 49
5158: PPUSH
5159: LD_STRING DK-Conspiracy-31
5161: PPUSH
5162: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
5166: LD_EXP 51
5170: PPUSH
5171: LD_STRING DMar-Conspiracy-33
5173: PPUSH
5174: CALL_OW 88
5178: NOT
5179: PUSH
5180: LD_EXP 55
5184: AND
5185: IFFALSE 5252
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
5187: LD_EXP 55
5191: PPUSH
5192: LD_INT 26
5194: PUSH
5195: LD_INT 1
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PPUSH
5202: CALL_OW 72
5206: PUSH
5207: LD_INT 1
5209: ARRAY
5210: PPUSH
5211: LD_STRING DArm-Conspiracy-a-34
5213: PPUSH
5214: CALL_OW 88
5218: NOT
5219: IFFALSE 5252
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
5221: LD_EXP 55
5225: PPUSH
5226: LD_INT 26
5228: PUSH
5229: LD_INT 2
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 72
5240: PUSH
5241: LD_INT 1
5243: ARRAY
5244: PPUSH
5245: LD_STRING DArf-Conspiracy-a-34
5247: PPUSH
5248: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5252: LD_EXP 49
5256: PPUSH
5257: LD_STRING DK-Conspiracy-34
5259: PPUSH
5260: CALL_OW 88
// if IsOk ( Markov ) then
5264: LD_EXP 51
5268: PPUSH
5269: CALL_OW 302
5273: IFFALSE 5358
// begin hasSniperRifle := true ;
5275: LD_ADDR_EXP 11
5279: PUSH
5280: LD_INT 1
5282: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5283: LD_EXP 51
5287: PPUSH
5288: LD_STRING DMar-Conspiracy-35
5290: PPUSH
5291: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5295: LD_EXP 49
5299: PPUSH
5300: LD_STRING DK-Conspiracy-36
5302: PPUSH
5303: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5307: LD_EXP 51
5311: PPUSH
5312: LD_STRING DMar-Conspiracy-37
5314: PPUSH
5315: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5319: LD_EXP 51
5323: PPUSH
5324: LD_STRING DMar-Conspiracy-38
5326: PPUSH
5327: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5331: LD_INT 137
5333: PPUSH
5334: LD_INT 98
5336: PPUSH
5337: LD_INT 105
5339: PPUSH
5340: CALL 19576 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5344: LD_EXP 51
5348: PPUSH
5349: LD_STRING DMar-Conspiracy-39
5351: PPUSH
5352: CALL_OW 88
// end else
5356: GO 5450
// if heikeSecondSquad then
5358: LD_EXP 55
5362: IFFALSE 5450
// begin hasSniperRifle := true ;
5364: LD_ADDR_EXP 11
5368: PUSH
5369: LD_INT 1
5371: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5372: LD_INT 137
5374: PPUSH
5375: LD_INT 98
5377: PPUSH
5378: LD_INT 105
5380: PPUSH
5381: CALL 19576 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5385: LD_EXP 55
5389: PPUSH
5390: LD_INT 26
5392: PUSH
5393: LD_INT 1
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PPUSH
5400: CALL_OW 72
5404: PUSH
5405: LD_INT 1
5407: ARRAY
5408: PPUSH
5409: LD_STRING DArm-Conspiracy-a-35
5411: PPUSH
5412: CALL_OW 88
5416: NOT
5417: IFFALSE 5450
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5419: LD_EXP 55
5423: PPUSH
5424: LD_INT 26
5426: PUSH
5427: LD_INT 2
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: PPUSH
5434: CALL_OW 72
5438: PUSH
5439: LD_INT 1
5441: ARRAY
5442: PPUSH
5443: LD_STRING DArf-Conspiracy-a-35
5445: PPUSH
5446: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5450: LD_EXP 44
5454: PPUSH
5455: LD_STRING DH-Conspiracy-40
5457: PPUSH
5458: CALL_OW 88
// if IsOk ( Mike ) then
5462: LD_EXP 46
5466: PPUSH
5467: CALL_OW 302
5471: IFFALSE 5530
// begin hasScout := true ;
5473: LD_ADDR_EXP 12
5477: PUSH
5478: LD_INT 1
5480: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5481: LD_EXP 46
5485: PPUSH
5486: LD_STRING DM-Conspiracy-41
5488: PPUSH
5489: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5493: LD_EXP 46
5497: PPUSH
5498: LD_STRING DM-Conspiracy-42
5500: PPUSH
5501: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5505: LD_INT 73
5507: PPUSH
5508: LD_INT 102
5510: PPUSH
5511: LD_INT 105
5513: PPUSH
5514: CALL 19576 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5518: LD_EXP 46
5522: PPUSH
5523: LD_STRING DM-Conspiracy-43
5525: PPUSH
5526: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5530: LD_EXP 4
5534: PUSH
5535: LD_EXP 49
5539: PPUSH
5540: CALL_OW 302
5544: AND
5545: PUSH
5546: LD_EXP 53
5550: PPUSH
5551: CALL_OW 302
5555: AND
5556: IFFALSE 5602
// begin hasMethanol := true ;
5558: LD_ADDR_EXP 13
5562: PUSH
5563: LD_INT 1
5565: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5566: LD_EXP 49
5570: PPUSH
5571: LD_STRING DK-Conspiracy-44
5573: PPUSH
5574: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5578: LD_EXP 49
5582: PPUSH
5583: LD_STRING DK-Conspiracy-45
5585: PPUSH
5586: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5590: LD_EXP 48
5594: PPUSH
5595: LD_STRING DKam-Conspiracy-46
5597: PPUSH
5598: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5602: LD_EXP 44
5606: PPUSH
5607: LD_STRING DH-Conspiracy-47
5609: PPUSH
5610: CALL_OW 88
// wait ( 0 0$1 ) ;
5614: LD_INT 35
5616: PPUSH
5617: CALL_OW 67
// your_side := 8 ;
5621: LD_ADDR_OWVAR 2
5625: PUSH
5626: LD_INT 8
5628: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5629: LD_INT 1
5631: PPUSH
5632: LD_INT 1
5634: PPUSH
5635: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5639: LD_ADDR_VAR 0 2
5643: PUSH
5644: LD_INT 2
5646: PUSH
5647: LD_INT 22
5649: PUSH
5650: LD_INT 2
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PUSH
5657: LD_INT 22
5659: PUSH
5660: LD_INT 4
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: LIST
5671: PUSH
5672: LD_INT 21
5674: PUSH
5675: LD_INT 1
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: PPUSH
5686: CALL_OW 69
5690: PUSH
5691: FOR_IN
5692: IFFALSE 5705
// RemoveUnit ( i ) ;
5694: LD_VAR 0 2
5698: PPUSH
5699: CALL_OW 64
5703: GO 5691
5705: POP
5706: POP
// wait ( 0 0$0.3 ) ;
5707: LD_INT 10
5709: PPUSH
5710: CALL_OW 67
// Query ( StartInfo1 ) ;
5714: LD_STRING StartInfo1
5716: PPUSH
5717: CALL_OW 97
// wait ( 0 0$1 ) ;
5721: LD_INT 35
5723: PPUSH
5724: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5728: LD_STRING colors_night.txt
5730: PPUSH
5731: CALL_OW 544
// Query ( StartInfo2 ) ;
5735: LD_STRING StartInfo2
5737: PPUSH
5738: CALL_OW 97
// PrepareGame ;
5742: CALL 1048 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5746: LD_INT 152
5748: PPUSH
5749: LD_INT 65
5751: PPUSH
5752: LD_INT 2
5754: PPUSH
5755: LD_INT 70
5757: NEG
5758: PPUSH
5759: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5763: LD_INT 152
5765: PPUSH
5766: LD_INT 65
5768: PPUSH
5769: LD_INT 2
5771: PPUSH
5772: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5776: LD_INT 133
5778: PPUSH
5779: LD_INT 76
5781: PPUSH
5782: LD_INT 2
5784: PPUSH
5785: LD_INT 6
5787: NEG
5788: PPUSH
5789: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5793: LD_INT 152
5795: PPUSH
5796: LD_INT 65
5798: PPUSH
5799: LD_INT 8
5801: PPUSH
5802: LD_INT 70
5804: NEG
5805: PPUSH
5806: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5810: LD_INT 152
5812: PPUSH
5813: LD_INT 65
5815: PPUSH
5816: LD_INT 8
5818: PPUSH
5819: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5823: LD_INT 133
5825: PPUSH
5826: LD_INT 76
5828: PPUSH
5829: LD_INT 8
5831: PPUSH
5832: LD_INT 6
5834: NEG
5835: PPUSH
5836: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5840: LD_INT 23
5842: PPUSH
5843: CALL_OW 87
// dialogue_skipped := false ;
5847: LD_ADDR_OWVAR 59
5851: PUSH
5852: LD_INT 0
5854: ST_TO_ADDR
// InitRuPatrols ;
5855: CALL 3240 0 0
// Say ( Heike , DH-Escape-1 ) ;
5859: LD_EXP 44
5863: PPUSH
5864: LD_STRING DH-Escape-1
5866: PPUSH
5867: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5871: LD_EXP 44
5875: PPUSH
5876: LD_STRING DH-Escape-2
5878: PPUSH
5879: CALL_OW 88
// StartLockerMinigame ;
5883: CALL 20361 0 0
// wait ( 0 0$1 ) ;
5887: LD_INT 35
5889: PPUSH
5890: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5894: LD_EXP 44
5898: PPUSH
5899: LD_STRING DH-Escape-4
5901: PPUSH
5902: CALL_OW 88
// wait ( 0 0$3 ) ;
5906: LD_INT 105
5908: PPUSH
5909: CALL_OW 67
// your_side := 2 ;
5913: LD_ADDR_OWVAR 2
5917: PUSH
5918: LD_INT 2
5920: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5921: LD_EXP 44
5925: PPUSH
5926: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5930: LD_INT 152
5932: PPUSH
5933: LD_INT 65
5935: PPUSH
5936: LD_INT 2
5938: PPUSH
5939: LD_INT 70
5941: NEG
5942: PPUSH
5943: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5947: LD_INT 152
5949: PPUSH
5950: LD_INT 65
5952: PPUSH
5953: LD_INT 2
5955: PPUSH
5956: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
5960: LD_INT 133
5962: PPUSH
5963: LD_INT 76
5965: PPUSH
5966: LD_INT 8
5968: PPUSH
5969: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
5973: LD_EXP 44
5977: PPUSH
5978: LD_INT 128
5980: PPUSH
5981: LD_INT 64
5983: PPUSH
5984: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5988: LD_INT 35
5990: PPUSH
5991: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
5995: LD_EXP 44
5999: PPUSH
6000: LD_INT 128
6002: PPUSH
6003: LD_INT 64
6005: PPUSH
6006: CALL_OW 307
6010: IFFALSE 5988
// ComHold ( Heike ) ;
6012: LD_EXP 44
6016: PPUSH
6017: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
6021: LD_EXP 44
6025: PPUSH
6026: LD_STRING DH-Start-1
6028: PPUSH
6029: CALL_OW 88
// if not americanContact then
6033: LD_EXP 10
6037: NOT
6038: IFFALSE 6054
// Say ( Heike , DH-Start-c-2 ) else
6040: LD_EXP 44
6044: PPUSH
6045: LD_STRING DH-Start-c-2
6047: PPUSH
6048: CALL_OW 88
6052: GO 6086
// if johnnySaved then
6054: LD_EXP 3
6058: IFFALSE 6074
// Say ( Heike , DH-Start-a-2 ) else
6060: LD_EXP 44
6064: PPUSH
6065: LD_STRING DH-Start-a-2
6067: PPUSH
6068: CALL_OW 88
6072: GO 6086
// Say ( Heike , DH-Start-b-2 ) ;
6074: LD_EXP 44
6078: PPUSH
6079: LD_STRING DH-Start-b-2
6081: PPUSH
6082: CALL_OW 88
// Video ( false ) ;
6086: LD_INT 0
6088: PPUSH
6089: CALL 66055 0 1
// tick := 0 ;
6093: LD_ADDR_OWVAR 1
6097: PUSH
6098: LD_INT 0
6100: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
6101: LD_STRING M1
6103: PPUSH
6104: CALL_OW 337
// enable ( gameStartEvent ) ;
6108: LD_INT 2
6110: ENABLE_MARKED
// SaveForQuickRestart ;
6111: CALL_OW 22
// end ;
6115: LD_VAR 0 1
6119: RET
// function ActionAdditional ; var i , un , tmp ; begin
6120: LD_INT 0
6122: PPUSH
6123: PPUSH
6124: PPUSH
6125: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
6126: LD_INT 115
6128: PPUSH
6129: LD_INT 27
6131: PPUSH
6132: LD_INT 2
6134: PPUSH
6135: LD_INT 6
6137: NEG
6138: PPUSH
6139: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
6143: LD_EXP 44
6147: PPUSH
6148: LD_INT 115
6150: PPUSH
6151: LD_INT 27
6153: PPUSH
6154: CALL_OW 428
6158: PPUSH
6159: CALL_OW 52
// SetClass ( Heike , 33 ) ;
6163: LD_EXP 44
6167: PPUSH
6168: LD_INT 33
6170: PPUSH
6171: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
6175: LD_INT 124
6177: PPUSH
6178: LD_INT 39
6180: PPUSH
6181: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
6185: LD_EXP 44
6189: PPUSH
6190: LD_STRING DH-Fail-1
6192: PPUSH
6193: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
6197: LD_INT 3
6199: PPUSH
6200: CALL_OW 427
// ComExit ( Heike ) ;
6204: LD_EXP 44
6208: PPUSH
6209: CALL 66481 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
6213: LD_EXP 44
6217: PPUSH
6218: LD_INT 109
6220: PPUSH
6221: LD_INT 33
6223: PPUSH
6224: CALL_OW 171
// AddComHold ( Heike ) ;
6228: LD_EXP 44
6232: PPUSH
6233: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6237: LD_INT 115
6239: PPUSH
6240: LD_INT 27
6242: PPUSH
6243: LD_INT 2
6245: PPUSH
6246: CALL_OW 331
// wait ( 0 0$2 ) ;
6250: LD_INT 70
6252: PPUSH
6253: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6257: LD_INT 35
6259: PPUSH
6260: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6264: LD_EXP 44
6268: PPUSH
6269: LD_INT 109
6271: PPUSH
6272: LD_INT 33
6274: PPUSH
6275: CALL_OW 307
6279: IFFALSE 6257
// Say ( Heike , DH-Fail-2 ) ;
6281: LD_EXP 44
6285: PPUSH
6286: LD_STRING DH-Fail-2
6288: PPUSH
6289: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6293: LD_EXP 44
6297: PPUSH
6298: LD_INT 111
6300: PPUSH
6301: LD_INT 48
6303: PPUSH
6304: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6308: LD_INT 35
6310: PPUSH
6311: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6315: LD_EXP 44
6319: PPUSH
6320: LD_INT 111
6322: PPUSH
6323: LD_INT 48
6325: PPUSH
6326: CALL_OW 297
6330: PUSH
6331: LD_INT 4
6333: LESS
6334: IFFALSE 6308
// AddComMoveXY ( Heike , 106 , 72 ) ;
6336: LD_EXP 44
6340: PPUSH
6341: LD_INT 106
6343: PPUSH
6344: LD_INT 72
6346: PPUSH
6347: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6351: LD_EXP 44
6355: PPUSH
6356: LD_INT 103
6358: PPUSH
6359: LD_INT 80
6361: PPUSH
6362: CALL_OW 171
// uc_side := 3 ;
6366: LD_ADDR_OWVAR 20
6370: PUSH
6371: LD_INT 3
6373: ST_TO_ADDR
// uc_nation := 3 ;
6374: LD_ADDR_OWVAR 21
6378: PUSH
6379: LD_INT 3
6381: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6382: LD_INT 1
6384: PPUSH
6385: LD_INT 1
6387: PPUSH
6388: LD_INT 6
6390: PPUSH
6391: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6395: LD_ADDR_OWVAR 29
6399: PUSH
6400: LD_INT 12
6402: PUSH
6403: LD_INT 12
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: ST_TO_ADDR
// un := CreateHuman ;
6410: LD_ADDR_VAR 0 3
6414: PUSH
6415: CALL_OW 44
6419: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6420: LD_VAR 0 3
6424: PPUSH
6425: LD_INT 134
6427: PPUSH
6428: LD_INT 52
6430: PPUSH
6431: LD_INT 4
6433: PPUSH
6434: LD_INT 0
6436: PPUSH
6437: CALL 68223 0 5
// ComTurnUnit ( un , Heike ) ;
6441: LD_VAR 0 3
6445: PPUSH
6446: LD_EXP 44
6450: PPUSH
6451: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6455: LD_VAR 0 3
6459: PPUSH
6460: LD_EXP 44
6464: PPUSH
6465: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
6469: LD_VAR 0 3
6473: PPUSH
6474: LD_STRING DRum-Fail-3
6476: PPUSH
6477: CALL_OW 88
// for i := 1 to 3 do
6481: LD_ADDR_VAR 0 2
6485: PUSH
6486: DOUBLE
6487: LD_INT 1
6489: DEC
6490: ST_TO_ADDR
6491: LD_INT 3
6493: PUSH
6494: FOR_TO
6495: IFFALSE 6568
// begin PrepareSoldier ( false , 10 ) ;
6497: LD_INT 0
6499: PPUSH
6500: LD_INT 10
6502: PPUSH
6503: CALL_OW 381
// un := CreateHuman ;
6507: LD_ADDR_VAR 0 3
6511: PUSH
6512: CALL_OW 44
6516: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6517: LD_ADDR_VAR 0 4
6521: PUSH
6522: LD_VAR 0 4
6526: PPUSH
6527: LD_VAR 0 3
6531: PPUSH
6532: CALL 66083 0 2
6536: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6537: LD_VAR 0 3
6541: PPUSH
6542: LD_INT 8
6544: PPUSH
6545: LD_INT 0
6547: PPUSH
6548: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6552: LD_VAR 0 3
6556: PPUSH
6557: LD_EXP 44
6561: PPUSH
6562: CALL_OW 119
// end ;
6566: GO 6494
6568: POP
6569: POP
// repeat wait ( 0 0$1 ) ;
6570: LD_INT 35
6572: PPUSH
6573: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6577: LD_VAR 0 4
6581: PPUSH
6582: LD_INT 101
6584: PUSH
6585: LD_INT 2
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PPUSH
6592: CALL_OW 72
6596: PUSH
6597: LD_INT 1
6599: GREATER
6600: IFFALSE 6570
// wait ( 0 0$1 ) ;
6602: LD_INT 35
6604: PPUSH
6605: CALL_OW 67
// DialogueOn ;
6609: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6613: LD_EXP 44
6617: PPUSH
6618: LD_STRING DH-Fail-4
6620: PPUSH
6621: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6625: LD_EXP 44
6629: PPUSH
6630: LD_STRING DH-Fail-5
6632: PPUSH
6633: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6637: LD_EXP 44
6641: PPUSH
6642: LD_STRING DH-Fail-6
6644: PPUSH
6645: CALL_OW 88
// DialogueOff ;
6649: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6653: LD_VAR 0 4
6657: PPUSH
6658: LD_EXP 44
6662: PPUSH
6663: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6667: LD_INT 35
6669: PPUSH
6670: CALL_OW 67
// until IsDying ( Heike ) ;
6674: LD_EXP 44
6678: PPUSH
6679: CALL_OW 303
6683: IFFALSE 6667
// KillUnit ( Heike ) ;
6685: LD_EXP 44
6689: PPUSH
6690: CALL_OW 66
// wait ( 0 0$4 ) ;
6694: LD_INT 140
6696: PPUSH
6697: CALL_OW 67
// ResetFog ;
6701: CALL_OW 335
// DialogueOn ;
6705: CALL_OW 6
// dwait ( 0 0$1 ) ;
6709: LD_INT 35
6711: PPUSH
6712: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6716: LD_ADDR_EXP 44
6720: PUSH
6721: LD_STRING Heike
6723: PPUSH
6724: LD_EXP 1
6728: NOT
6729: PPUSH
6730: LD_EXP 2
6734: PPUSH
6735: CALL 28648 0 3
6739: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6740: LD_EXP 44
6744: PPUSH
6745: LD_STRING DH-Fail-7
6747: PPUSH
6748: CALL_OW 89
// DialogueOff ;
6752: CALL_OW 7
// YouLost ( Fail ) ;
6756: LD_STRING Fail
6758: PPUSH
6759: CALL_OW 104
// end ;
6763: LD_VAR 0 1
6767: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6768: LD_INT 2
6770: PPUSH
6771: LD_INT 173
6773: PPUSH
6774: LD_INT 29
6776: PPUSH
6777: CALL_OW 293
6781: PUSH
6782: LD_EXP 44
6786: PPUSH
6787: LD_INT 173
6789: PPUSH
6790: LD_INT 29
6792: PPUSH
6793: CALL_OW 297
6797: PUSH
6798: LD_INT 6
6800: LESS
6801: AND
6802: IFFALSE 6819
6804: GO 6806
6806: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6807: LD_EXP 44
6811: PPUSH
6812: LD_STRING DH-EastRoad
6814: PPUSH
6815: CALL_OW 88
6819: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6820: LD_INT 2
6822: PPUSH
6823: LD_INT 149
6825: PPUSH
6826: LD_INT 3
6828: PPUSH
6829: CALL_OW 293
6833: PUSH
6834: LD_EXP 44
6838: PPUSH
6839: LD_INT 149
6841: PPUSH
6842: LD_INT 3
6844: PPUSH
6845: CALL_OW 297
6849: PUSH
6850: LD_INT 6
6852: LESS
6853: AND
6854: IFFALSE 6871
6856: GO 6858
6858: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6859: LD_EXP 44
6863: PPUSH
6864: LD_STRING DH-EastRoad
6866: PPUSH
6867: CALL_OW 88
6871: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6872: LD_INT 2
6874: PPUSH
6875: LD_INT 217
6877: PPUSH
6878: LD_INT 120
6880: PPUSH
6881: CALL_OW 293
6885: PUSH
6886: LD_EXP 44
6890: PPUSH
6891: LD_INT 217
6893: PPUSH
6894: LD_INT 120
6896: PPUSH
6897: CALL_OW 297
6901: PUSH
6902: LD_INT 6
6904: LESS
6905: AND
6906: IFFALSE 6923
6908: GO 6910
6910: DISABLE
// Say ( Heike , DH-EastEnd ) ;
6911: LD_EXP 44
6915: PPUSH
6916: LD_STRING DH-EastEnd
6918: PPUSH
6919: CALL_OW 88
6923: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
6924: LD_EXP 44
6928: PPUSH
6929: LD_INT 11
6931: PPUSH
6932: CALL_OW 308
6936: IFFALSE 6974
6938: GO 6940
6940: DISABLE
// begin if not heikeSquad then
6941: LD_EXP 14
6945: NOT
6946: IFFALSE 6962
// Say ( Heike , DH-Hill ) else
6948: LD_EXP 44
6952: PPUSH
6953: LD_STRING DH-Hill
6955: PPUSH
6956: CALL_OW 88
6960: GO 6974
// Say ( Heike , DH-Hill-a ) ;
6962: LD_EXP 44
6966: PPUSH
6967: LD_STRING DH-Hill-a
6969: PPUSH
6970: CALL_OW 88
// end ;
6974: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
6975: LD_EXP 44
6979: PPUSH
6980: LD_INT 12
6982: PPUSH
6983: CALL_OW 308
6987: IFFALSE 7174
6989: GO 6991
6991: DISABLE
6992: LD_INT 0
6994: PPUSH
6995: PPUSH
6996: PPUSH
// begin DialogueOn ;
6997: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7001: LD_EXP 44
7005: PPUSH
7006: CALL_OW 87
// x := GetX ( Heike ) ;
7010: LD_ADDR_VAR 0 1
7014: PUSH
7015: LD_EXP 44
7019: PPUSH
7020: CALL_OW 250
7024: ST_TO_ADDR
// y := GetY ( Heike ) ;
7025: LD_ADDR_VAR 0 2
7029: PUSH
7030: LD_EXP 44
7034: PPUSH
7035: CALL_OW 251
7039: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7040: LD_VAR 0 1
7044: PPUSH
7045: LD_VAR 0 2
7049: PPUSH
7050: LD_INT 2
7052: PPUSH
7053: LD_INT 12
7055: NEG
7056: PPUSH
7057: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7061: LD_VAR 0 1
7065: PPUSH
7066: LD_VAR 0 2
7070: PPUSH
7071: LD_INT 2
7073: PPUSH
7074: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7078: LD_INT 101
7080: PUSH
7081: LD_INT 2
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: LD_INT 2
7090: PUSH
7091: LD_INT 30
7093: PUSH
7094: LD_INT 32
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 30
7103: PUSH
7104: LD_INT 33
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: LIST
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PPUSH
7120: CALL_OW 69
7124: IFFALSE 7136
// v := 3 else
7126: LD_ADDR_VAR 0 3
7130: PUSH
7131: LD_INT 3
7133: ST_TO_ADDR
7134: GO 7144
// v := 2 ;
7136: LD_ADDR_VAR 0 3
7140: PUSH
7141: LD_INT 2
7143: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7144: LD_EXP 44
7148: PPUSH
7149: LD_STRING DH-Outpost-
7151: PUSH
7152: LD_INT 1
7154: PPUSH
7155: LD_VAR 0 3
7159: PPUSH
7160: CALL_OW 12
7164: STR
7165: PPUSH
7166: CALL_OW 88
// DialogueOff ;
7170: CALL_OW 7
// end ;
7174: PPOPN 3
7176: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorder2Area ) marked gameStartEvent do var x , y , v ;
7177: LD_EXP 44
7181: PPUSH
7182: LD_INT 64
7184: PPUSH
7185: CALL_OW 308
7189: IFFALSE 7376
7191: GO 7193
7193: DISABLE
7194: LD_INT 0
7196: PPUSH
7197: PPUSH
7198: PPUSH
// begin DialogueOn ;
7199: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7203: LD_EXP 44
7207: PPUSH
7208: CALL_OW 87
// x := GetX ( Heike ) ;
7212: LD_ADDR_VAR 0 1
7216: PUSH
7217: LD_EXP 44
7221: PPUSH
7222: CALL_OW 250
7226: ST_TO_ADDR
// y := GetY ( Heike ) ;
7227: LD_ADDR_VAR 0 2
7231: PUSH
7232: LD_EXP 44
7236: PPUSH
7237: CALL_OW 251
7241: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7242: LD_VAR 0 1
7246: PPUSH
7247: LD_VAR 0 2
7251: PPUSH
7252: LD_INT 2
7254: PPUSH
7255: LD_INT 12
7257: NEG
7258: PPUSH
7259: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7263: LD_VAR 0 1
7267: PPUSH
7268: LD_VAR 0 2
7272: PPUSH
7273: LD_INT 2
7275: PPUSH
7276: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7280: LD_INT 101
7282: PUSH
7283: LD_INT 2
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_INT 2
7292: PUSH
7293: LD_INT 30
7295: PUSH
7296: LD_INT 32
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: PUSH
7303: LD_INT 30
7305: PUSH
7306: LD_INT 33
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: LIST
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PPUSH
7322: CALL_OW 69
7326: IFFALSE 7338
// v := 3 else
7328: LD_ADDR_VAR 0 3
7332: PUSH
7333: LD_INT 3
7335: ST_TO_ADDR
7336: GO 7346
// v := 2 ;
7338: LD_ADDR_VAR 0 3
7342: PUSH
7343: LD_INT 2
7345: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7346: LD_EXP 44
7350: PPUSH
7351: LD_STRING DH-Outpost-
7353: PUSH
7354: LD_INT 1
7356: PPUSH
7357: LD_VAR 0 3
7361: PPUSH
7362: CALL_OW 12
7366: STR
7367: PPUSH
7368: CALL_OW 88
// DialogueOff ;
7372: CALL_OW 7
// end ;
7376: PPOPN 3
7378: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
7379: LD_EXP 44
7383: PPUSH
7384: LD_INT 19
7386: PPUSH
7387: CALL_OW 308
7391: PUSH
7392: LD_EXP 22
7396: NOT
7397: AND
7398: PUSH
7399: LD_EXP 30
7403: NOT
7404: AND
7405: IFFALSE 7478
7407: GO 7409
7409: DISABLE
// begin DialogueOn ;
7410: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
7414: LD_INT 152
7416: PPUSH
7417: LD_INT 115
7419: PPUSH
7420: LD_INT 2
7422: PPUSH
7423: LD_INT 16
7425: NEG
7426: PPUSH
7427: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7431: LD_INT 152
7433: PPUSH
7434: LD_INT 115
7436: PPUSH
7437: LD_INT 2
7439: PPUSH
7440: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7444: LD_INT 152
7446: PPUSH
7447: LD_INT 115
7449: PPUSH
7450: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7454: LD_EXP 44
7458: PPUSH
7459: LD_STRING DH-Stealth-1
7461: PPUSH
7462: CALL_OW 88
// DialogueOff ;
7466: CALL_OW 7
// adminAreaDiscovered := true ;
7470: LD_ADDR_EXP 22
7474: PUSH
7475: LD_INT 1
7477: ST_TO_ADDR
// end ;
7478: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7479: LD_INT 2
7481: PPUSH
7482: LD_EXP 45
7486: PPUSH
7487: CALL_OW 292
7491: PUSH
7492: LD_EXP 44
7496: PPUSH
7497: LD_EXP 45
7501: PPUSH
7502: CALL_OW 296
7506: PUSH
7507: LD_INT 6
7509: LESS
7510: AND
7511: PUSH
7512: LD_EXP 17
7516: NOT
7517: AND
7518: PUSH
7519: LD_EXP 30
7523: NOT
7524: AND
7525: IFFALSE 7631
7527: GO 7529
7529: DISABLE
// begin DialogueOn ;
7530: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7534: LD_EXP 45
7538: PPUSH
7539: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7543: LD_EXP 45
7547: PPUSH
7548: LD_EXP 44
7552: PPUSH
7553: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7557: LD_EXP 44
7561: PPUSH
7562: LD_EXP 45
7566: PPUSH
7567: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7571: LD_EXP 44
7575: PPUSH
7576: LD_STRING DH-Givi-1
7578: PPUSH
7579: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7583: LD_EXP 45
7587: PPUSH
7588: LD_STRING DG-Givi-2
7590: PPUSH
7591: CALL_OW 88
// DialogueOff ;
7595: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7599: LD_EXP 45
7603: PPUSH
7604: LD_INT 2
7606: PPUSH
7607: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7611: LD_ADDR_EXP 14
7615: PUSH
7616: LD_EXP 14
7620: PPUSH
7621: LD_EXP 45
7625: PPUSH
7626: CALL 66083 0 2
7630: ST_TO_ADDR
// end ;
7631: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7632: LD_INT 2
7634: PPUSH
7635: LD_EXP 50
7639: PPUSH
7640: CALL_OW 292
7644: PUSH
7645: LD_EXP 44
7649: PPUSH
7650: LD_EXP 50
7654: PPUSH
7655: CALL_OW 296
7659: PUSH
7660: LD_INT 6
7662: LESS
7663: AND
7664: PUSH
7665: LD_EXP 17
7669: NOT
7670: AND
7671: PUSH
7672: LD_EXP 30
7676: NOT
7677: AND
7678: IFFALSE 7784
7680: GO 7682
7682: DISABLE
// begin DialogueOn ;
7683: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7687: LD_EXP 50
7691: PPUSH
7692: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7696: LD_EXP 50
7700: PPUSH
7701: LD_EXP 44
7705: PPUSH
7706: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7710: LD_EXP 44
7714: PPUSH
7715: LD_EXP 50
7719: PPUSH
7720: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7724: LD_EXP 44
7728: PPUSH
7729: LD_STRING DH-Sophia-1
7731: PPUSH
7732: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7736: LD_EXP 50
7740: PPUSH
7741: LD_STRING DS-Sophia-2
7743: PPUSH
7744: CALL_OW 88
// DialogueOff ;
7748: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7752: LD_EXP 50
7756: PPUSH
7757: LD_INT 2
7759: PPUSH
7760: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7764: LD_ADDR_EXP 14
7768: PUSH
7769: LD_EXP 14
7773: PPUSH
7774: LD_EXP 50
7778: PPUSH
7779: CALL 66083 0 2
7783: ST_TO_ADDR
// end ;
7784: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7785: LD_INT 2
7787: PPUSH
7788: LD_EXP 52
7792: PPUSH
7793: CALL_OW 292
7797: PUSH
7798: LD_EXP 44
7802: PPUSH
7803: LD_EXP 52
7807: PPUSH
7808: CALL_OW 296
7812: PUSH
7813: LD_INT 6
7815: LESS
7816: AND
7817: PUSH
7818: LD_EXP 17
7822: NOT
7823: AND
7824: PUSH
7825: LD_EXP 30
7829: NOT
7830: AND
7831: IFFALSE 7927
7833: GO 7835
7835: DISABLE
// begin DialogueOn ;
7836: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7840: LD_EXP 52
7844: PPUSH
7845: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7849: LD_EXP 44
7853: PPUSH
7854: LD_STRING DH-Olaf-1
7856: PPUSH
7857: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7861: LD_EXP 52
7865: PPUSH
7866: LD_STRING DO-Olaf-2
7868: PPUSH
7869: CALL_OW 88
// if explosionsTakenByRussians then
7873: LD_EXP 21
7877: IFFALSE 7891
// Say ( Olaf , DO-Olaf-a-3 ) ;
7879: LD_EXP 52
7883: PPUSH
7884: LD_STRING DO-Olaf-a-3
7886: PPUSH
7887: CALL_OW 88
// DialogueOff ;
7891: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7895: LD_EXP 52
7899: PPUSH
7900: LD_INT 2
7902: PPUSH
7903: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7907: LD_ADDR_EXP 14
7911: PUSH
7912: LD_EXP 14
7916: PPUSH
7917: LD_EXP 52
7921: PPUSH
7922: CALL 66083 0 2
7926: ST_TO_ADDR
// end ;
7927: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
7928: LD_INT 2
7930: PPUSH
7931: LD_EXP 46
7935: PPUSH
7936: CALL_OW 292
7940: PUSH
7941: LD_EXP 44
7945: PPUSH
7946: LD_EXP 46
7950: PPUSH
7951: CALL_OW 296
7955: PUSH
7956: LD_INT 6
7958: LESS
7959: AND
7960: PUSH
7961: LD_EXP 17
7965: NOT
7966: AND
7967: PUSH
7968: LD_EXP 30
7972: NOT
7973: AND
7974: IFFALSE 8202
7976: GO 7978
7978: DISABLE
7979: LD_INT 0
7981: PPUSH
7982: PPUSH
// begin DialogueOn ;
7983: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
7987: LD_EXP 46
7991: PPUSH
7992: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
7996: LD_ADDR_VAR 0 2
8000: PUSH
8001: LD_INT 18
8003: PPUSH
8004: LD_INT 0
8006: PPUSH
8007: CALL_OW 517
8011: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
8012: LD_ADDR_VAR 0 1
8016: PUSH
8017: DOUBLE
8018: LD_INT 1
8020: DEC
8021: ST_TO_ADDR
8022: LD_VAR 0 2
8026: PUSH
8027: LD_INT 1
8029: ARRAY
8030: PUSH
8031: FOR_TO
8032: IFFALSE 8114
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
8034: LD_VAR 0 2
8038: PUSH
8039: LD_INT 1
8041: ARRAY
8042: PUSH
8043: LD_VAR 0 1
8047: ARRAY
8048: PPUSH
8049: LD_VAR 0 2
8053: PUSH
8054: LD_INT 2
8056: ARRAY
8057: PUSH
8058: LD_VAR 0 1
8062: ARRAY
8063: PPUSH
8064: LD_INT 2
8066: PPUSH
8067: LD_INT 3
8069: NEG
8070: PPUSH
8071: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
8075: LD_VAR 0 2
8079: PUSH
8080: LD_INT 1
8082: ARRAY
8083: PUSH
8084: LD_VAR 0 1
8088: ARRAY
8089: PPUSH
8090: LD_VAR 0 2
8094: PUSH
8095: LD_INT 2
8097: ARRAY
8098: PUSH
8099: LD_VAR 0 1
8103: ARRAY
8104: PPUSH
8105: LD_INT 2
8107: PPUSH
8108: CALL_OW 331
// end ;
8112: GO 8031
8114: POP
8115: POP
// Say ( Mike , DM-Mike-1 ) ;
8116: LD_EXP 46
8120: PPUSH
8121: LD_STRING DM-Mike-1
8123: PPUSH
8124: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
8128: LD_EXP 44
8132: PPUSH
8133: LD_STRING DH-Mike-2
8135: PPUSH
8136: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
8140: LD_INT 78
8142: PPUSH
8143: LD_INT 104
8145: PPUSH
8146: CALL_OW 84
// dwait ( 0 0$1 ) ;
8150: LD_INT 35
8152: PPUSH
8153: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8157: LD_EXP 44
8161: PPUSH
8162: CALL_OW 87
// DialogueOff ;
8166: CALL_OW 7
// SetSide ( Mike , 2 ) ;
8170: LD_EXP 46
8174: PPUSH
8175: LD_INT 2
8177: PPUSH
8178: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
8182: LD_ADDR_EXP 14
8186: PUSH
8187: LD_EXP 14
8191: PPUSH
8192: LD_EXP 46
8196: PPUSH
8197: CALL 66083 0 2
8201: ST_TO_ADDR
// end ;
8202: PPOPN 2
8204: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and not hasMuchin and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
8205: LD_EXP 44
8209: PPUSH
8210: LD_EXP 49
8214: PPUSH
8215: CALL_OW 296
8219: PUSH
8220: LD_INT 6
8222: LESS
8223: PUSH
8224: LD_EXP 49
8228: PPUSH
8229: CALL_OW 257
8233: PUSH
8234: LD_INT 33
8236: EQUAL
8237: AND
8238: PUSH
8239: LD_EXP 17
8243: NOT
8244: AND
8245: PUSH
8246: LD_EXP 30
8250: NOT
8251: AND
8252: PUSH
8253: LD_EXP 49
8257: PPUSH
8258: CALL_OW 302
8262: AND
8263: PUSH
8264: LD_EXP 20
8268: AND
8269: PUSH
8270: LD_EXP 49
8274: PUSH
8275: LD_EXP 14
8279: IN
8280: AND
8281: PUSH
8282: LD_EXP 49
8286: PPUSH
8287: CALL_OW 255
8291: PUSH
8292: LD_INT 2
8294: EQUAL
8295: AND
8296: IFFALSE 8325
8298: GO 8300
8300: DISABLE
// begin DialogueOn ;
8301: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
8305: LD_EXP 44
8309: PPUSH
8310: LD_STRING DH-Kaia-Revolver-2
8312: PPUSH
8313: CALL_OW 88
// SetClassKaiaRevolver ;
8317: CALL 1761 0 0
// DialogueOff ;
8321: CALL_OW 7
// end ;
8325: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
8326: LD_EXP 47
8330: PUSH
8331: LD_EXP 54
8335: AND
8336: PUSH
8337: LD_EXP 54
8341: PPUSH
8342: CALL_OW 255
8346: PUSH
8347: LD_INT 2
8349: NONEQUAL
8350: AND
8351: PUSH
8352: LD_EXP 47
8356: PPUSH
8357: CALL_OW 255
8361: PUSH
8362: LD_INT 2
8364: NONEQUAL
8365: AND
8366: PUSH
8367: LD_EXP 14
8371: PPUSH
8372: LD_INT 22
8374: PUSH
8375: LD_INT 2
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: PPUSH
8382: CALL_OW 72
8386: PUSH
8387: LD_INT 5
8389: GREATER
8390: AND
8391: PUSH
8392: LD_EXP 17
8396: NOT
8397: AND
8398: PUSH
8399: LD_EXP 30
8403: NOT
8404: AND
8405: IFFALSE 9122
8407: GO 8409
8409: DISABLE
8410: LD_INT 0
8412: PPUSH
8413: PPUSH
// begin DialogueOn ;
8414: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8418: LD_ADDR_VAR 0 2
8422: PUSH
8423: LD_EXP 45
8427: PPUSH
8428: CALL_OW 302
8432: PUSH
8433: LD_EXP 45
8437: PUSH
8438: LD_EXP 14
8442: IN
8443: AND
8444: PUSH
8445: LD_EXP 45
8449: PPUSH
8450: CALL_OW 255
8454: PUSH
8455: LD_INT 2
8457: EQUAL
8458: AND
8459: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8460: LD_EXP 44
8464: PPUSH
8465: LD_STRING DH-Med-1
8467: PPUSH
8468: CALL_OW 88
// if hasGivi then
8472: LD_VAR 0 2
8476: IFFALSE 8492
// Say ( Givi , DG-Med-2 ) else
8478: LD_EXP 45
8482: PPUSH
8483: LD_STRING DG-Med-2
8485: PPUSH
8486: CALL_OW 88
8490: GO 8597
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8492: LD_EXP 14
8496: PUSH
8497: LD_EXP 55
8501: ISECT
8502: PPUSH
8503: LD_INT 22
8505: PUSH
8506: LD_INT 2
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PUSH
8513: LD_INT 26
8515: PUSH
8516: LD_INT 1
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: PPUSH
8527: CALL_OW 72
8531: PUSH
8532: LD_INT 1
8534: ARRAY
8535: PPUSH
8536: LD_STRING DArm-Med-e-2
8538: PPUSH
8539: CALL_OW 88
8543: NOT
8544: IFFALSE 8597
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8546: LD_EXP 14
8550: PUSH
8551: LD_EXP 55
8555: ISECT
8556: PPUSH
8557: LD_INT 22
8559: PUSH
8560: LD_INT 2
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 26
8569: PUSH
8570: LD_INT 2
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: PPUSH
8581: CALL_OW 72
8585: PUSH
8586: LD_INT 1
8588: ARRAY
8589: PPUSH
8590: LD_STRING DArf-Med-e-2
8592: PPUSH
8593: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8597: LD_INT 154
8599: PPUSH
8600: LD_INT 119
8602: PPUSH
8603: LD_INT 70
8605: PPUSH
8606: CALL 19576 0 3
// Say ( Heike , DH-Med-3 ) ;
8610: LD_EXP 44
8614: PPUSH
8615: LD_STRING DH-Med-3
8617: PPUSH
8618: CALL_OW 88
// if hasGivi then
8622: LD_VAR 0 2
8626: IFFALSE 8642
// Say ( Givi , DG-Med-4 ) else
8628: LD_EXP 45
8632: PPUSH
8633: LD_STRING DG-Med-4
8635: PPUSH
8636: CALL_OW 88
8640: GO 8747
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8642: LD_EXP 14
8646: PUSH
8647: LD_EXP 55
8651: ISECT
8652: PPUSH
8653: LD_INT 22
8655: PUSH
8656: LD_INT 2
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: LD_INT 26
8665: PUSH
8666: LD_INT 1
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PPUSH
8677: CALL_OW 72
8681: PUSH
8682: LD_INT 1
8684: ARRAY
8685: PPUSH
8686: LD_STRING DArm-Med-e-4
8688: PPUSH
8689: CALL_OW 88
8693: NOT
8694: IFFALSE 8747
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8696: LD_EXP 14
8700: PUSH
8701: LD_EXP 55
8705: ISECT
8706: PPUSH
8707: LD_INT 22
8709: PUSH
8710: LD_INT 2
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: LD_INT 26
8719: PUSH
8720: LD_INT 2
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PPUSH
8731: CALL_OW 72
8735: PUSH
8736: LD_INT 1
8738: ARRAY
8739: PPUSH
8740: LD_STRING DArf-Med-e-4
8742: PPUSH
8743: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8747: LD_ADDR_VAR 0 1
8751: PUSH
8752: LD_EXP 49
8756: PPUSH
8757: CALL_OW 302
8761: PUSH
8762: LD_EXP 49
8766: PUSH
8767: LD_EXP 14
8771: IN
8772: AND
8773: PUSH
8774: LD_EXP 49
8778: PPUSH
8779: CALL_OW 255
8783: PUSH
8784: LD_INT 2
8786: EQUAL
8787: AND
8788: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8789: LD_EXP 46
8793: PPUSH
8794: CALL_OW 302
8798: PUSH
8799: LD_EXP 46
8803: PUSH
8804: LD_EXP 14
8808: IN
8809: AND
8810: PUSH
8811: LD_EXP 49
8815: PPUSH
8816: CALL_OW 255
8820: PUSH
8821: LD_INT 2
8823: EQUAL
8824: AND
8825: IFFALSE 8857
// begin Say ( Mike , DM-Med-5 ) ;
8827: LD_EXP 46
8831: PPUSH
8832: LD_STRING DM-Med-5
8834: PPUSH
8835: CALL_OW 88
// if hasKaia then
8839: LD_VAR 0 1
8843: IFFALSE 8857
// Say ( Kaia , DK-Med-6 ) ;
8845: LD_EXP 49
8849: PPUSH
8850: LD_STRING DK-Med-6
8852: PPUSH
8853: CALL_OW 88
// end ; if hasKaia then
8857: LD_VAR 0 1
8861: IFFALSE 9102
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8863: LD_INT 175
8865: PPUSH
8866: LD_INT 123
8868: PPUSH
8869: LD_INT 2
8871: PPUSH
8872: LD_INT 8
8874: NEG
8875: PPUSH
8876: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8880: LD_INT 175
8882: PPUSH
8883: LD_INT 123
8885: PPUSH
8886: LD_INT 2
8888: PPUSH
8889: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8893: LD_INT 175
8895: PPUSH
8896: LD_INT 123
8898: PPUSH
8899: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
8903: LD_EXP 49
8907: PPUSH
8908: LD_STRING DK-Med-7
8910: PPUSH
8911: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8915: LD_EXP 49
8919: PPUSH
8920: LD_STRING DK-Med-8
8922: PPUSH
8923: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
8927: LD_EXP 51
8931: PPUSH
8932: CALL_OW 302
8936: PUSH
8937: LD_EXP 51
8941: PUSH
8942: LD_EXP 14
8946: IN
8947: AND
8948: PUSH
8949: LD_EXP 51
8953: PPUSH
8954: CALL_OW 255
8958: PUSH
8959: LD_INT 2
8961: EQUAL
8962: AND
8963: IFFALSE 9021
// begin Say ( Markov , DMar-Med-9 ) ;
8965: LD_EXP 51
8969: PPUSH
8970: LD_STRING DMar-Med-9
8972: PPUSH
8973: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
8977: LD_EXP 49
8981: PPUSH
8982: LD_STRING DK-Med-10
8984: PPUSH
8985: CALL_OW 88
// if hasGivi then
8989: LD_VAR 0 2
8993: IFFALSE 9009
// Say ( Kaia , DK-Med-11 ) else
8995: LD_EXP 49
8999: PPUSH
9000: LD_STRING DK-Med-11
9002: PPUSH
9003: CALL_OW 88
9007: GO 9021
// Say ( Kaia , DK-Med-a-11 ) ;
9009: LD_EXP 49
9013: PPUSH
9014: LD_STRING DK-Med-a-11
9016: PPUSH
9017: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9021: LD_EXP 48
9025: PPUSH
9026: CALL_OW 302
9030: PUSH
9031: LD_EXP 48
9035: PUSH
9036: LD_EXP 14
9040: IN
9041: AND
9042: PUSH
9043: LD_EXP 48
9047: PPUSH
9048: CALL_OW 255
9052: PUSH
9053: LD_INT 2
9055: EQUAL
9056: AND
9057: IFFALSE 9102
// begin Say ( Kamil , DKam-Med-12 ) ;
9059: LD_EXP 48
9063: PPUSH
9064: LD_STRING DKam-Med-12
9066: PPUSH
9067: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9071: LD_EXP 48
9075: PPUSH
9076: LD_STRING DKam-Med-13
9078: PPUSH
9079: CALL_OW 88
// if not hasExplosionCollected then
9083: LD_EXP 23
9087: NOT
9088: IFFALSE 9102
// Say ( Heike , DH-Med-d-14 ) ;
9090: LD_EXP 44
9094: PPUSH
9095: LD_STRING DH-Med-d-14
9097: PPUSH
9098: CALL_OW 88
// end ; end ; DialogueOff ;
9102: CALL_OW 7
// adminAreaDiscovered := true ;
9106: LD_ADDR_EXP 22
9110: PUSH
9111: LD_INT 1
9113: ST_TO_ADDR
// laundryAllowed := true ;
9114: LD_ADDR_EXP 26
9118: PUSH
9119: LD_INT 1
9121: ST_TO_ADDR
// end ;
9122: PPOPN 2
9124: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9125: LD_EXP 47
9129: NOT
9130: PUSH
9131: LD_EXP 54
9135: AND
9136: PUSH
9137: LD_EXP 54
9141: PUSH
9142: LD_EXP 14
9146: IN
9147: NOT
9148: AND
9149: PUSH
9150: LD_EXP 14
9154: PPUSH
9155: LD_INT 22
9157: PUSH
9158: LD_INT 2
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 72
9169: PUSH
9170: LD_INT 4
9172: GREATER
9173: AND
9174: PUSH
9175: LD_EXP 17
9179: NOT
9180: AND
9181: PUSH
9182: LD_EXP 30
9186: NOT
9187: AND
9188: IFFALSE 9905
9190: GO 9192
9192: DISABLE
9193: LD_INT 0
9195: PPUSH
9196: PPUSH
// begin DialogueOn ;
9197: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9201: LD_ADDR_VAR 0 1
9205: PUSH
9206: LD_EXP 45
9210: PPUSH
9211: CALL_OW 302
9215: PUSH
9216: LD_EXP 45
9220: PUSH
9221: LD_EXP 14
9225: IN
9226: AND
9227: PUSH
9228: LD_EXP 45
9232: PPUSH
9233: CALL_OW 255
9237: PUSH
9238: LD_INT 2
9240: EQUAL
9241: AND
9242: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
9243: LD_EXP 44
9247: PPUSH
9248: LD_STRING DH-Med-a-1
9250: PPUSH
9251: CALL_OW 88
// if hasGivi then
9255: LD_VAR 0 1
9259: IFFALSE 9275
// Say ( Givi , DG-Med-a-2 ) else
9261: LD_EXP 45
9265: PPUSH
9266: LD_STRING DG-Med-a-2
9268: PPUSH
9269: CALL_OW 88
9273: GO 9380
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9275: LD_EXP 14
9279: PUSH
9280: LD_EXP 55
9284: ISECT
9285: PPUSH
9286: LD_INT 22
9288: PUSH
9289: LD_INT 2
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: LD_INT 26
9298: PUSH
9299: LD_INT 1
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: PPUSH
9310: CALL_OW 72
9314: PUSH
9315: LD_INT 1
9317: ARRAY
9318: PPUSH
9319: LD_STRING DArm-Med-f-2
9321: PPUSH
9322: CALL_OW 88
9326: NOT
9327: IFFALSE 9380
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9329: LD_EXP 14
9333: PUSH
9334: LD_EXP 55
9338: ISECT
9339: PPUSH
9340: LD_INT 22
9342: PUSH
9343: LD_INT 2
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 26
9352: PUSH
9353: LD_INT 2
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 72
9368: PUSH
9369: LD_INT 1
9371: ARRAY
9372: PPUSH
9373: LD_STRING DArf-Med-f-2
9375: PPUSH
9376: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9380: LD_INT 154
9382: PPUSH
9383: LD_INT 119
9385: PPUSH
9386: LD_INT 70
9388: PPUSH
9389: CALL 19576 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9393: LD_EXP 44
9397: PPUSH
9398: LD_STRING DH-Med-a-3
9400: PPUSH
9401: CALL_OW 88
// if hasGivi then
9405: LD_VAR 0 1
9409: IFFALSE 9425
// Say ( Givi , DG-Med-a-4 ) else
9411: LD_EXP 45
9415: PPUSH
9416: LD_STRING DG-Med-a-4
9418: PPUSH
9419: CALL_OW 88
9423: GO 9530
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9425: LD_EXP 14
9429: PUSH
9430: LD_EXP 55
9434: ISECT
9435: PPUSH
9436: LD_INT 22
9438: PUSH
9439: LD_INT 2
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: LD_INT 26
9448: PUSH
9449: LD_INT 1
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: PPUSH
9460: CALL_OW 72
9464: PUSH
9465: LD_INT 1
9467: ARRAY
9468: PPUSH
9469: LD_STRING DArm-Med-f-4
9471: PPUSH
9472: CALL_OW 88
9476: NOT
9477: IFFALSE 9530
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9479: LD_EXP 14
9483: PUSH
9484: LD_EXP 55
9488: ISECT
9489: PPUSH
9490: LD_INT 22
9492: PUSH
9493: LD_INT 2
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PUSH
9500: LD_INT 26
9502: PUSH
9503: LD_INT 2
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PPUSH
9514: CALL_OW 72
9518: PUSH
9519: LD_INT 1
9521: ARRAY
9522: PPUSH
9523: LD_STRING DArf-Med-f-4
9525: PPUSH
9526: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9530: LD_ADDR_VAR 0 2
9534: PUSH
9535: LD_EXP 49
9539: PPUSH
9540: CALL_OW 302
9544: PUSH
9545: LD_EXP 49
9549: PUSH
9550: LD_EXP 14
9554: IN
9555: AND
9556: PUSH
9557: LD_EXP 49
9561: PPUSH
9562: CALL_OW 255
9566: PUSH
9567: LD_INT 2
9569: EQUAL
9570: AND
9571: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9572: LD_EXP 46
9576: PPUSH
9577: CALL_OW 302
9581: PUSH
9582: LD_EXP 46
9586: PUSH
9587: LD_EXP 14
9591: IN
9592: AND
9593: PUSH
9594: LD_EXP 46
9598: PPUSH
9599: CALL_OW 255
9603: PUSH
9604: LD_INT 2
9606: EQUAL
9607: AND
9608: IFFALSE 9640
// begin Say ( Mike , DM-Med-5 ) ;
9610: LD_EXP 46
9614: PPUSH
9615: LD_STRING DM-Med-5
9617: PPUSH
9618: CALL_OW 88
// if hasKaia then
9622: LD_VAR 0 2
9626: IFFALSE 9640
// Say ( Kaia , DK-Med-6 ) ;
9628: LD_EXP 49
9632: PPUSH
9633: LD_STRING DK-Med-6
9635: PPUSH
9636: CALL_OW 88
// end ; if hasKaia then
9640: LD_VAR 0 2
9644: IFFALSE 9885
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9646: LD_INT 175
9648: PPUSH
9649: LD_INT 123
9651: PPUSH
9652: LD_INT 2
9654: PPUSH
9655: LD_INT 8
9657: NEG
9658: PPUSH
9659: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9663: LD_INT 175
9665: PPUSH
9666: LD_INT 123
9668: PPUSH
9669: LD_INT 2
9671: PPUSH
9672: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9676: LD_INT 175
9678: PPUSH
9679: LD_INT 123
9681: PPUSH
9682: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9686: LD_EXP 49
9690: PPUSH
9691: LD_STRING DK-Med-7
9693: PPUSH
9694: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9698: LD_EXP 49
9702: PPUSH
9703: LD_STRING DK-Med-8
9705: PPUSH
9706: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9710: LD_EXP 51
9714: PPUSH
9715: CALL_OW 302
9719: PUSH
9720: LD_EXP 51
9724: PUSH
9725: LD_EXP 14
9729: IN
9730: AND
9731: PUSH
9732: LD_EXP 51
9736: PPUSH
9737: CALL_OW 255
9741: PUSH
9742: LD_INT 2
9744: EQUAL
9745: AND
9746: IFFALSE 9804
// begin Say ( Markov , DMar-Med-9 ) ;
9748: LD_EXP 51
9752: PPUSH
9753: LD_STRING DMar-Med-9
9755: PPUSH
9756: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9760: LD_EXP 49
9764: PPUSH
9765: LD_STRING DK-Med-10
9767: PPUSH
9768: CALL_OW 88
// if hasGivi then
9772: LD_VAR 0 1
9776: IFFALSE 9792
// Say ( Kaia , DK-Med-11 ) else
9778: LD_EXP 49
9782: PPUSH
9783: LD_STRING DK-Med-11
9785: PPUSH
9786: CALL_OW 88
9790: GO 9804
// Say ( Kaia , DK-Med-a-11 ) ;
9792: LD_EXP 49
9796: PPUSH
9797: LD_STRING DK-Med-a-11
9799: PPUSH
9800: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9804: LD_EXP 48
9808: PPUSH
9809: CALL_OW 302
9813: PUSH
9814: LD_EXP 48
9818: PUSH
9819: LD_EXP 14
9823: IN
9824: AND
9825: PUSH
9826: LD_EXP 48
9830: PPUSH
9831: CALL_OW 255
9835: PUSH
9836: LD_INT 2
9838: EQUAL
9839: AND
9840: IFFALSE 9885
// begin Say ( Kamil , DKam-Med-12 ) ;
9842: LD_EXP 48
9846: PPUSH
9847: LD_STRING DKam-Med-12
9849: PPUSH
9850: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9854: LD_EXP 48
9858: PPUSH
9859: LD_STRING DKam-Med-13
9861: PPUSH
9862: CALL_OW 88
// if not hasExplosionCollected then
9866: LD_EXP 23
9870: NOT
9871: IFFALSE 9885
// Say ( Heike , DH-Med-d-14 ) ;
9873: LD_EXP 44
9877: PPUSH
9878: LD_STRING DH-Med-d-14
9880: PPUSH
9881: CALL_OW 88
// end ; end ; DialogueOff ;
9885: CALL_OW 7
// adminAreaDiscovered := true ;
9889: LD_ADDR_EXP 22
9893: PUSH
9894: LD_INT 1
9896: ST_TO_ADDR
// laundryAllowed := true ;
9897: LD_ADDR_EXP 26
9901: PUSH
9902: LD_INT 1
9904: ST_TO_ADDR
// end ;
9905: PPOPN 2
9907: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9908: LD_EXP 47
9912: PUSH
9913: LD_EXP 54
9917: NOT
9918: AND
9919: PUSH
9920: LD_EXP 47
9924: PUSH
9925: LD_EXP 14
9929: IN
9930: NOT
9931: AND
9932: PUSH
9933: LD_EXP 14
9937: PPUSH
9938: LD_INT 22
9940: PUSH
9941: LD_INT 2
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PPUSH
9948: CALL_OW 72
9952: PUSH
9953: LD_INT 4
9955: GREATER
9956: AND
9957: PUSH
9958: LD_EXP 17
9962: NOT
9963: AND
9964: PUSH
9965: LD_EXP 30
9969: NOT
9970: AND
9971: IFFALSE 10688
9973: GO 9975
9975: DISABLE
9976: LD_INT 0
9978: PPUSH
9979: PPUSH
// begin DialogueOn ;
9980: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9984: LD_ADDR_VAR 0 1
9988: PUSH
9989: LD_EXP 45
9993: PPUSH
9994: CALL_OW 302
9998: PUSH
9999: LD_EXP 45
10003: PUSH
10004: LD_EXP 14
10008: IN
10009: AND
10010: PUSH
10011: LD_EXP 45
10015: PPUSH
10016: CALL_OW 255
10020: PUSH
10021: LD_INT 2
10023: EQUAL
10024: AND
10025: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
10026: LD_EXP 44
10030: PPUSH
10031: LD_STRING DH-Med-b-1
10033: PPUSH
10034: CALL_OW 88
// if hasGivi then
10038: LD_VAR 0 1
10042: IFFALSE 10058
// Say ( Givi , DG-Med-a-2 ) else
10044: LD_EXP 45
10048: PPUSH
10049: LD_STRING DG-Med-a-2
10051: PPUSH
10052: CALL_OW 88
10056: GO 10163
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
10058: LD_EXP 14
10062: PUSH
10063: LD_EXP 55
10067: ISECT
10068: PPUSH
10069: LD_INT 22
10071: PUSH
10072: LD_INT 2
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: LD_INT 26
10081: PUSH
10082: LD_INT 1
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: PPUSH
10093: CALL_OW 72
10097: PUSH
10098: LD_INT 1
10100: ARRAY
10101: PPUSH
10102: LD_STRING DArm-Med-f-2
10104: PPUSH
10105: CALL_OW 88
10109: NOT
10110: IFFALSE 10163
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
10112: LD_EXP 14
10116: PUSH
10117: LD_EXP 55
10121: ISECT
10122: PPUSH
10123: LD_INT 22
10125: PUSH
10126: LD_INT 2
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: LD_INT 26
10135: PUSH
10136: LD_INT 2
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PPUSH
10147: CALL_OW 72
10151: PUSH
10152: LD_INT 1
10154: ARRAY
10155: PPUSH
10156: LD_STRING DArf-Med-f-2
10158: PPUSH
10159: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
10163: LD_INT 154
10165: PPUSH
10166: LD_INT 119
10168: PPUSH
10169: LD_INT 70
10171: PPUSH
10172: CALL 19576 0 3
// Say ( Heike , DH-Med-a-3 ) ;
10176: LD_EXP 44
10180: PPUSH
10181: LD_STRING DH-Med-a-3
10183: PPUSH
10184: CALL_OW 88
// if hasGivi then
10188: LD_VAR 0 1
10192: IFFALSE 10208
// Say ( Givi , DG-Med-a-4 ) else
10194: LD_EXP 45
10198: PPUSH
10199: LD_STRING DG-Med-a-4
10201: PPUSH
10202: CALL_OW 88
10206: GO 10313
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
10208: LD_EXP 14
10212: PUSH
10213: LD_EXP 55
10217: ISECT
10218: PPUSH
10219: LD_INT 22
10221: PUSH
10222: LD_INT 2
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 26
10231: PUSH
10232: LD_INT 1
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PPUSH
10243: CALL_OW 72
10247: PUSH
10248: LD_INT 1
10250: ARRAY
10251: PPUSH
10252: LD_STRING DArm-Med-f-4
10254: PPUSH
10255: CALL_OW 88
10259: NOT
10260: IFFALSE 10313
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
10262: LD_EXP 14
10266: PUSH
10267: LD_EXP 55
10271: ISECT
10272: PPUSH
10273: LD_INT 22
10275: PUSH
10276: LD_INT 2
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: LD_INT 26
10285: PUSH
10286: LD_INT 2
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PPUSH
10297: CALL_OW 72
10301: PUSH
10302: LD_INT 1
10304: ARRAY
10305: PPUSH
10306: LD_STRING DArf-Med-f-4
10308: PPUSH
10309: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
10313: LD_ADDR_VAR 0 2
10317: PUSH
10318: LD_EXP 49
10322: PPUSH
10323: CALL_OW 302
10327: PUSH
10328: LD_EXP 49
10332: PUSH
10333: LD_EXP 14
10337: IN
10338: AND
10339: PUSH
10340: LD_EXP 49
10344: PPUSH
10345: CALL_OW 255
10349: PUSH
10350: LD_INT 2
10352: EQUAL
10353: AND
10354: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
10355: LD_EXP 46
10359: PPUSH
10360: CALL_OW 302
10364: PUSH
10365: LD_EXP 46
10369: PUSH
10370: LD_EXP 14
10374: IN
10375: AND
10376: PUSH
10377: LD_EXP 46
10381: PPUSH
10382: CALL_OW 255
10386: PUSH
10387: LD_INT 2
10389: EQUAL
10390: AND
10391: IFFALSE 10423
// begin Say ( Mike , DM-Med-5 ) ;
10393: LD_EXP 46
10397: PPUSH
10398: LD_STRING DM-Med-5
10400: PPUSH
10401: CALL_OW 88
// if hasKaia then
10405: LD_VAR 0 2
10409: IFFALSE 10423
// Say ( Kaia , DK-Med-6 ) ;
10411: LD_EXP 49
10415: PPUSH
10416: LD_STRING DK-Med-6
10418: PPUSH
10419: CALL_OW 88
// end ; if hasKaia then
10423: LD_VAR 0 2
10427: IFFALSE 10668
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
10429: LD_INT 175
10431: PPUSH
10432: LD_INT 123
10434: PPUSH
10435: LD_INT 2
10437: PPUSH
10438: LD_INT 8
10440: NEG
10441: PPUSH
10442: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10446: LD_INT 175
10448: PPUSH
10449: LD_INT 123
10451: PPUSH
10452: LD_INT 2
10454: PPUSH
10455: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10459: LD_INT 175
10461: PPUSH
10462: LD_INT 123
10464: PPUSH
10465: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10469: LD_EXP 49
10473: PPUSH
10474: LD_STRING DK-Med-7
10476: PPUSH
10477: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10481: LD_EXP 49
10485: PPUSH
10486: LD_STRING DK-Med-8
10488: PPUSH
10489: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10493: LD_EXP 51
10497: PPUSH
10498: CALL_OW 302
10502: PUSH
10503: LD_EXP 51
10507: PUSH
10508: LD_EXP 14
10512: IN
10513: AND
10514: PUSH
10515: LD_EXP 51
10519: PPUSH
10520: CALL_OW 255
10524: PUSH
10525: LD_INT 2
10527: EQUAL
10528: AND
10529: IFFALSE 10587
// begin Say ( Markov , DMar-Med-9 ) ;
10531: LD_EXP 51
10535: PPUSH
10536: LD_STRING DMar-Med-9
10538: PPUSH
10539: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10543: LD_EXP 49
10547: PPUSH
10548: LD_STRING DK-Med-10
10550: PPUSH
10551: CALL_OW 88
// if hasGivi then
10555: LD_VAR 0 1
10559: IFFALSE 10575
// Say ( Kaia , DK-Med-11 ) else
10561: LD_EXP 49
10565: PPUSH
10566: LD_STRING DK-Med-11
10568: PPUSH
10569: CALL_OW 88
10573: GO 10587
// Say ( Kaia , DK-Med-a-11 ) ;
10575: LD_EXP 49
10579: PPUSH
10580: LD_STRING DK-Med-a-11
10582: PPUSH
10583: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10587: LD_EXP 48
10591: PPUSH
10592: CALL_OW 302
10596: PUSH
10597: LD_EXP 48
10601: PUSH
10602: LD_EXP 14
10606: IN
10607: AND
10608: PUSH
10609: LD_EXP 48
10613: PPUSH
10614: CALL_OW 255
10618: PUSH
10619: LD_INT 2
10621: EQUAL
10622: AND
10623: IFFALSE 10668
// begin Say ( Kamil , DKam-Med-12 ) ;
10625: LD_EXP 48
10629: PPUSH
10630: LD_STRING DKam-Med-12
10632: PPUSH
10633: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10637: LD_EXP 48
10641: PPUSH
10642: LD_STRING DKam-Med-13
10644: PPUSH
10645: CALL_OW 88
// if not hasExplosionCollected then
10649: LD_EXP 23
10653: NOT
10654: IFFALSE 10668
// Say ( Heike , DH-Med-d-14 ) ;
10656: LD_EXP 44
10660: PPUSH
10661: LD_STRING DH-Med-d-14
10663: PPUSH
10664: CALL_OW 88
// end ; end ; DialogueOff ;
10668: CALL_OW 7
// adminAreaDiscovered := true ;
10672: LD_ADDR_EXP 22
10676: PUSH
10677: LD_INT 1
10679: ST_TO_ADDR
// laundryAllowed := true ;
10680: LD_ADDR_EXP 26
10684: PUSH
10685: LD_INT 1
10687: ST_TO_ADDR
// end ;
10688: PPOPN 2
10690: END
// every 0 0$1 trigger laundryAllowed do
10691: LD_EXP 26
10695: IFFALSE 10707
10697: GO 10699
10699: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10700: LD_STRING M1-laundry
10702: PPUSH
10703: CALL_OW 337
10707: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10708: LD_EXP 47
10712: NOT
10713: PUSH
10714: LD_EXP 54
10718: NOT
10719: AND
10720: PUSH
10721: LD_EXP 52
10725: PPUSH
10726: CALL_OW 302
10730: AND
10731: PUSH
10732: LD_EXP 52
10736: PUSH
10737: LD_EXP 14
10741: IN
10742: AND
10743: PUSH
10744: LD_EXP 52
10748: PPUSH
10749: CALL_OW 255
10753: PUSH
10754: LD_INT 2
10756: EQUAL
10757: AND
10758: PUSH
10759: LD_EXP 17
10763: NOT
10764: AND
10765: PUSH
10766: LD_EXP 30
10770: NOT
10771: AND
10772: IFFALSE 10928
10774: GO 10776
10776: DISABLE
// begin DialogueOn ;
10777: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10781: LD_INT 152
10783: PPUSH
10784: LD_INT 115
10786: PPUSH
10787: LD_INT 2
10789: PPUSH
10790: LD_INT 16
10792: NEG
10793: PPUSH
10794: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10798: LD_INT 152
10800: PPUSH
10801: LD_INT 115
10803: PPUSH
10804: LD_INT 2
10806: PPUSH
10807: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10811: LD_INT 152
10813: PPUSH
10814: LD_INT 115
10816: PPUSH
10817: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10821: LD_EXP 52
10825: PPUSH
10826: LD_STRING DO-Med-c-1
10828: PPUSH
10829: CALL_OW 88
// if not hasExplosionCollected then
10833: LD_EXP 23
10837: NOT
10838: IFFALSE 10854
// Say ( Heike , DH-Med-d-14 ) else
10840: LD_EXP 44
10844: PPUSH
10845: LD_STRING DH-Med-d-14
10847: PPUSH
10848: CALL_OW 88
10852: GO 10916
// begin Say ( Heike , DH-Med-c-2 ) ;
10854: LD_EXP 44
10858: PPUSH
10859: LD_STRING DH-Med-c-2
10861: PPUSH
10862: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10866: LD_EXP 49
10870: PPUSH
10871: CALL_OW 302
10875: PUSH
10876: LD_EXP 49
10880: PUSH
10881: LD_EXP 14
10885: IN
10886: AND
10887: PUSH
10888: LD_EXP 49
10892: PPUSH
10893: CALL_OW 255
10897: PUSH
10898: LD_INT 2
10900: EQUAL
10901: AND
10902: IFFALSE 10916
// Say ( Kaia , DK-Med-c-3 ) ;
10904: LD_EXP 49
10908: PPUSH
10909: LD_STRING DK-Med-c-3
10911: PPUSH
10912: CALL_OW 88
// end ; DialogueOff ;
10916: CALL_OW 7
// adminAreaDiscovered := true ;
10920: LD_ADDR_EXP 22
10924: PUSH
10925: LD_INT 1
10927: ST_TO_ADDR
// end ;
10928: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
10929: LD_EXP 49
10933: PPUSH
10934: CALL_OW 256
10938: PUSH
10939: LD_INT 250
10941: LESS
10942: PUSH
10943: LD_EXP 49
10947: PUSH
10948: LD_EXP 14
10952: IN
10953: AND
10954: PUSH
10955: LD_EXP 17
10959: AND
10960: PUSH
10961: LD_EXP 24
10965: AND
10966: IFFALSE 11095
10968: GO 10970
10970: DISABLE
// begin DialogueOn ;
10971: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10975: LD_EXP 49
10979: PPUSH
10980: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
10984: LD_EXP 49
10988: PPUSH
10989: LD_STRING DK-death-1
10991: PPUSH
10992: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
10996: LD_EXP 44
11000: PPUSH
11001: LD_STRING DH-death-2
11003: PPUSH
11004: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
11008: LD_EXP 49
11012: PPUSH
11013: LD_STRING DK-death-3
11015: PPUSH
11016: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
11020: LD_EXP 49
11024: PPUSH
11025: LD_STRING DK-death-4
11027: PPUSH
11028: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
11032: LD_EXP 49
11036: PPUSH
11037: LD_INT 8
11039: PPUSH
11040: CALL_OW 235
// ComStop ( Kaia ) ;
11044: LD_EXP 49
11048: PPUSH
11049: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
11053: LD_INT 8
11055: PPUSH
11056: LD_INT 2
11058: PPUSH
11059: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
11063: LD_ADDR_EXP 14
11067: PUSH
11068: LD_EXP 14
11072: PUSH
11073: LD_EXP 49
11077: DIFF
11078: ST_TO_ADDR
// DialogueOff ;
11079: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
11083: LD_EXP 46
11087: PPUSH
11088: LD_STRING DM-death-5
11090: PPUSH
11091: CALL_OW 88
// end ;
11095: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11096: LD_EXP 25
11100: NOT
11101: PUSH
11102: LD_EXP 30
11106: NOT
11107: AND
11108: PUSH
11109: LD_EXP 57
11113: PUSH
11114: LD_EXP 14
11118: IN
11119: NOT
11120: AND
11121: PUSH
11122: LD_INT 2
11124: PPUSH
11125: LD_EXP 57
11129: PPUSH
11130: CALL_OW 292
11134: AND
11135: PUSH
11136: LD_EXP 44
11140: PPUSH
11141: LD_EXP 57
11145: PPUSH
11146: CALL_OW 296
11150: PUSH
11151: LD_INT 6
11153: LESS
11154: AND
11155: PUSH
11156: LD_EXP 17
11160: NOT
11161: AND
11162: IFFALSE 11386
11164: GO 11166
11166: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11167: LD_EXP 57
11171: PPUSH
11172: LD_EXP 44
11176: PPUSH
11177: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11181: LD_EXP 44
11185: PPUSH
11186: LD_EXP 57
11190: PPUSH
11191: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11195: LD_INT 10
11197: PPUSH
11198: CALL_OW 67
// DialogueOn ;
11202: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11206: LD_EXP 57
11210: PPUSH
11211: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
11215: LD_EXP 44
11219: PPUSH
11220: LD_STRING DH-Deal-1
11222: PPUSH
11223: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
11227: LD_EXP 57
11231: PPUSH
11232: LD_STRING DJ-Deal-2
11234: PPUSH
11235: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
11239: LD_EXP 44
11243: PPUSH
11244: LD_STRING DH-Deal-3
11246: PPUSH
11247: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
11251: LD_EXP 57
11255: PPUSH
11256: LD_STRING DJ-Deal-4
11258: PPUSH
11259: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
11263: LD_EXP 57
11267: PPUSH
11268: LD_STRING DJ-Deal-5
11270: PPUSH
11271: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
11275: LD_EXP 57
11279: PPUSH
11280: LD_STRING DJ-Deal-6
11282: PPUSH
11283: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
11287: LD_EXP 57
11291: PPUSH
11292: LD_STRING DJ-Deal-7
11294: PPUSH
11295: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
11299: LD_EXP 44
11303: PPUSH
11304: LD_STRING DH-Deal-8
11306: PPUSH
11307: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
11311: LD_EXP 44
11315: PPUSH
11316: LD_STRING DH-Deal-9
11318: PPUSH
11319: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
11323: LD_EXP 57
11327: PPUSH
11328: LD_STRING DJ-Deal-10
11330: PPUSH
11331: CALL_OW 88
// DialogueOff ;
11335: CALL_OW 7
// contactWithAmerican := true ;
11339: LD_ADDR_EXP 25
11343: PUSH
11344: LD_INT 1
11346: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11347: LD_STRING M1-american-out
11349: PPUSH
11350: CALL_OW 604
// SetSide ( Harris , 2 ) ;
11354: LD_EXP 57
11358: PPUSH
11359: LD_INT 2
11361: PPUSH
11362: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11366: LD_ADDR_EXP 14
11370: PUSH
11371: LD_EXP 14
11375: PPUSH
11376: LD_EXP 57
11380: PPUSH
11381: CALL 66083 0 2
11385: ST_TO_ADDR
// end ;
11386: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11387: LD_EXP 25
11391: PUSH
11392: LD_EXP 30
11396: NOT
11397: AND
11398: PUSH
11399: LD_EXP 57
11403: PUSH
11404: LD_EXP 14
11408: IN
11409: NOT
11410: AND
11411: PUSH
11412: LD_INT 2
11414: PPUSH
11415: LD_EXP 57
11419: PPUSH
11420: CALL_OW 292
11424: AND
11425: PUSH
11426: LD_EXP 44
11430: PPUSH
11431: LD_EXP 57
11435: PPUSH
11436: CALL_OW 296
11440: PUSH
11441: LD_INT 6
11443: LESS
11444: AND
11445: PUSH
11446: LD_EXP 17
11450: NOT
11451: AND
11452: IFFALSE 11577
11454: GO 11456
11456: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11457: LD_EXP 57
11461: PPUSH
11462: LD_EXP 44
11466: PPUSH
11467: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11471: LD_EXP 44
11475: PPUSH
11476: LD_EXP 57
11480: PPUSH
11481: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11485: LD_INT 10
11487: PPUSH
11488: CALL_OW 67
// DialogueOn ;
11492: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11496: LD_EXP 57
11500: PPUSH
11501: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11505: LD_EXP 57
11509: PPUSH
11510: LD_STRING DJ-Escort-1
11512: PPUSH
11513: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11517: LD_EXP 44
11521: PPUSH
11522: LD_STRING DH-Escort-2
11524: PPUSH
11525: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11529: LD_EXP 57
11533: PPUSH
11534: LD_STRING DJ-Escort-3
11536: PPUSH
11537: CALL_OW 88
// DialogueOff ;
11541: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11545: LD_EXP 57
11549: PPUSH
11550: LD_INT 2
11552: PPUSH
11553: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11557: LD_ADDR_EXP 14
11561: PUSH
11562: LD_EXP 14
11566: PPUSH
11567: LD_EXP 57
11571: PPUSH
11572: CALL 66083 0 2
11576: ST_TO_ADDR
// end ;
11577: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11578: LD_EXP 25
11582: PUSH
11583: LD_EXP 30
11587: NOT
11588: AND
11589: PUSH
11590: LD_EXP 56
11594: PUSH
11595: LD_EXP 14
11599: DIFF
11600: PPUSH
11601: LD_INT 22
11603: PUSH
11604: LD_INT 4
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 3
11613: PUSH
11614: LD_INT 120
11616: PUSH
11617: LD_INT 1
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: LD_INT 101
11630: PUSH
11631: LD_INT 2
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 72
11647: AND
11648: PUSH
11649: LD_EXP 17
11653: NOT
11654: AND
11655: IFFALSE 11882
11657: GO 11659
11659: DISABLE
11660: LD_INT 0
11662: PPUSH
// begin enable ;
11663: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11664: LD_ADDR_VAR 0 1
11668: PUSH
11669: LD_EXP 56
11673: PUSH
11674: LD_EXP 14
11678: DIFF
11679: PPUSH
11680: LD_INT 22
11682: PUSH
11683: LD_INT 4
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 91
11692: PUSH
11693: LD_EXP 44
11697: PUSH
11698: LD_INT 6
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: LIST
11705: PUSH
11706: LD_INT 101
11708: PUSH
11709: LD_INT 2
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: LIST
11720: PPUSH
11721: CALL_OW 72
11725: PPUSH
11726: LD_EXP 44
11730: PPUSH
11731: CALL_OW 74
11735: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11736: LD_VAR 0 1
11740: PPUSH
11741: LD_EXP 44
11745: PPUSH
11746: CALL_OW 296
11750: PUSH
11751: LD_INT 6
11753: LESS
11754: IFFALSE 11882
// begin DialogueOn ;
11756: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11760: LD_VAR 0 1
11764: PPUSH
11765: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11769: LD_EXP 44
11773: PPUSH
11774: LD_STRING DH-USsol-1
11776: PPUSH
11777: CALL_OW 88
// if un <> Jerry then
11781: LD_VAR 0 1
11785: PUSH
11786: LD_EXP 59
11790: NONEQUAL
11791: IFFALSE 11834
// if GetSex ( un ) = sex_male then
11793: LD_VAR 0 1
11797: PPUSH
11798: CALL_OW 258
11802: PUSH
11803: LD_INT 1
11805: EQUAL
11806: IFFALSE 11822
// Say ( un , DUSM-USsol-2 ) else
11808: LD_VAR 0 1
11812: PPUSH
11813: LD_STRING DUSM-USsol-2
11815: PPUSH
11816: CALL_OW 88
11820: GO 11834
// Say ( un , DUSF-USsol-2 ) ;
11822: LD_VAR 0 1
11826: PPUSH
11827: LD_STRING DUSF-USsol-2
11829: PPUSH
11830: CALL_OW 88
// DialogueOff ;
11834: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11838: LD_ADDR_EXP 14
11842: PUSH
11843: LD_EXP 14
11847: PPUSH
11848: LD_VAR 0 1
11852: PPUSH
11853: CALL 66083 0 2
11857: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11858: LD_VAR 0 1
11862: PPUSH
11863: LD_INT 1
11865: PPUSH
11866: CALL_OW 109
// SetSide ( un , 2 ) ;
11870: LD_VAR 0 1
11874: PPUSH
11875: LD_INT 2
11877: PPUSH
11878: CALL_OW 235
// end ; end ;
11882: PPOPN 1
11884: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11885: LD_EXP 55
11889: PUSH
11890: LD_EXP 30
11894: NOT
11895: AND
11896: PUSH
11897: LD_EXP 55
11901: PUSH
11902: LD_EXP 14
11906: DIFF
11907: PPUSH
11908: LD_INT 3
11910: PUSH
11911: LD_INT 120
11913: PUSH
11914: LD_INT 1
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 91
11927: PUSH
11928: LD_EXP 44
11932: PUSH
11933: LD_INT 6
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 101
11943: PUSH
11944: LD_INT 2
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: LIST
11955: PPUSH
11956: CALL_OW 72
11960: AND
11961: PUSH
11962: LD_EXP 17
11966: NOT
11967: AND
11968: IFFALSE 12183
11970: GO 11972
11972: DISABLE
11973: LD_INT 0
11975: PPUSH
// begin enable ;
11976: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11977: LD_ADDR_VAR 0 1
11981: PUSH
11982: LD_EXP 55
11986: PUSH
11987: LD_EXP 14
11991: DIFF
11992: PPUSH
11993: LD_INT 22
11995: PUSH
11996: LD_INT 5
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 91
12005: PUSH
12006: LD_EXP 44
12010: PUSH
12011: LD_INT 6
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 101
12021: PUSH
12022: LD_INT 2
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: PPUSH
12034: CALL_OW 72
12038: PPUSH
12039: LD_EXP 44
12043: PPUSH
12044: CALL_OW 74
12048: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12049: LD_VAR 0 1
12053: PPUSH
12054: LD_EXP 44
12058: PPUSH
12059: CALL_OW 296
12063: PUSH
12064: LD_INT 6
12066: LESS
12067: IFFALSE 12183
// begin DialogueOn ;
12069: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12073: LD_VAR 0 1
12077: PPUSH
12078: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12082: LD_EXP 44
12086: PPUSH
12087: LD_STRING DH-USsol-1
12089: PPUSH
12090: CALL_OW 88
// if GetSex ( un ) = sex_male then
12094: LD_VAR 0 1
12098: PPUSH
12099: CALL_OW 258
12103: PUSH
12104: LD_INT 1
12106: EQUAL
12107: IFFALSE 12123
// Say ( un , DArm-USsol-2 ) else
12109: LD_VAR 0 1
12113: PPUSH
12114: LD_STRING DArm-USsol-2
12116: PPUSH
12117: CALL_OW 88
12121: GO 12135
// Say ( un , DArf-USsol-3 ) ;
12123: LD_VAR 0 1
12127: PPUSH
12128: LD_STRING DArf-USsol-3
12130: PPUSH
12131: CALL_OW 88
// DialogueOff ;
12135: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12139: LD_ADDR_EXP 14
12143: PUSH
12144: LD_EXP 14
12148: PPUSH
12149: LD_VAR 0 1
12153: PPUSH
12154: CALL 66083 0 2
12158: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12159: LD_VAR 0 1
12163: PPUSH
12164: LD_INT 1
12166: PPUSH
12167: CALL_OW 109
// SetSide ( un , 2 ) ;
12171: LD_VAR 0 1
12175: PPUSH
12176: LD_INT 2
12178: PPUSH
12179: CALL_OW 235
// end ; end ;
12183: PPOPN 1
12185: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
12186: LD_EXP 56
12190: PPUSH
12191: LD_INT 101
12193: PUSH
12194: LD_INT 2
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PPUSH
12201: CALL_OW 72
12205: PUSH
12206: LD_EXP 14
12210: PPUSH
12211: LD_INT 22
12213: PUSH
12214: LD_INT 2
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PPUSH
12221: CALL_OW 72
12225: PUSH
12226: LD_INT 5
12228: GREATER
12229: AND
12230: PUSH
12231: LD_EXP 10
12235: NOT
12236: AND
12237: PUSH
12238: LD_EXP 30
12242: NOT
12243: AND
12244: PUSH
12245: LD_EXP 25
12249: NOT
12250: AND
12251: PUSH
12252: LD_EXP 17
12256: NOT
12257: AND
12258: IFFALSE 12373
12260: GO 12262
12262: DISABLE
12263: LD_INT 0
12265: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
12266: LD_ADDR_VAR 0 1
12270: PUSH
12271: LD_EXP 56
12275: PPUSH
12276: LD_INT 22
12278: PUSH
12279: LD_INT 4
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: LD_INT 101
12288: PUSH
12289: LD_INT 2
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PPUSH
12300: CALL_OW 72
12304: PUSH
12305: LD_INT 1
12307: ARRAY
12308: ST_TO_ADDR
// DialogueOn ;
12309: CALL_OW 6
// if GetSex ( un ) = sex_male then
12313: LD_VAR 0 1
12317: PPUSH
12318: CALL_OW 258
12322: PUSH
12323: LD_INT 1
12325: EQUAL
12326: IFFALSE 12342
// Say ( un , DUSm-USsol-a-2 ) else
12328: LD_VAR 0 1
12332: PPUSH
12333: LD_STRING DUSm-USsol-a-2
12335: PPUSH
12336: CALL_OW 88
12340: GO 12354
// Say ( un , DUSf-USsol-a-2 ) ;
12342: LD_VAR 0 1
12346: PPUSH
12347: LD_STRING DUSf-USsol-a-2
12349: PPUSH
12350: CALL_OW 88
// DialogueOff ;
12354: CALL_OW 7
// wait ( 0 0$2 ) ;
12358: LD_INT 70
12360: PPUSH
12361: CALL_OW 67
// isAlarm := true ;
12365: LD_ADDR_EXP 17
12369: PUSH
12370: LD_INT 1
12372: ST_TO_ADDR
// end ;
12373: PPOPN 1
12375: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
12376: LD_EXP 17
12380: NOT
12381: PUSH
12382: LD_EXP 45
12386: PPUSH
12387: CALL_OW 302
12391: AND
12392: PUSH
12393: LD_EXP 45
12397: PPUSH
12398: CALL_OW 255
12402: PUSH
12403: LD_INT 2
12405: EQUAL
12406: AND
12407: PUSH
12408: LD_EXP 26
12412: AND
12413: PUSH
12414: LD_EXP 28
12418: NOT
12419: AND
12420: PUSH
12421: LD_EXP 27
12425: NOT
12426: AND
12427: PUSH
12428: LD_EXP 30
12432: NOT
12433: AND
12434: PUSH
12435: LD_EXP 45
12439: PPUSH
12440: LD_INT 165
12442: PPUSH
12443: CALL 19889 0 2
12447: AND
12448: IFFALSE 12580
12450: GO 12452
12452: DISABLE
// begin enable ;
12453: ENABLE
// InGameOn ;
12454: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12458: LD_EXP 45
12462: PPUSH
12463: LD_INT 5
12465: PPUSH
12466: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12470: LD_INT 165
12472: PPUSH
12473: LD_INT 5
12475: PPUSH
12476: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12480: LD_EXP 45
12484: PPUSH
12485: LD_INT 165
12487: PPUSH
12488: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12492: LD_INT 35
12494: PPUSH
12495: CALL_OW 67
// until IsInUnit ( Givi ) ;
12499: LD_EXP 45
12503: PPUSH
12504: CALL_OW 310
12508: IFFALSE 12492
// case Query ( GiviInLaundry ) of 1 :
12510: LD_STRING GiviInLaundry
12512: PPUSH
12513: CALL_OW 97
12517: PUSH
12518: LD_INT 1
12520: DOUBLE
12521: EQUAL
12522: IFTRUE 12526
12524: GO 12533
12526: POP
// SpawnGiviAsRussian ; 2 :
12527: CALL 1910 0 0
12531: GO 12545
12533: LD_INT 2
12535: DOUBLE
12536: EQUAL
12537: IFTRUE 12541
12539: GO 12544
12541: POP
// ; end ;
12542: GO 12545
12544: POP
// ComExitBuilding ( Givi ) ;
12545: LD_EXP 45
12549: PPUSH
12550: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12554: LD_EXP 45
12558: PPUSH
12559: LD_INT 2
12561: PPUSH
12562: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12566: LD_INT 165
12568: PPUSH
12569: LD_INT 3
12571: PPUSH
12572: CALL_OW 235
// InGameOff ;
12576: CALL_OW 9
// end ;
12580: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12581: LD_EXP 17
12585: NOT
12586: PUSH
12587: LD_EXP 28
12591: AND
12592: PUSH
12593: LD_EXP 45
12597: PPUSH
12598: CALL_OW 255
12602: PUSH
12603: LD_INT 2
12605: EQUAL
12606: AND
12607: PUSH
12608: LD_EXP 45
12612: PPUSH
12613: CALL_OW 248
12617: PUSH
12618: LD_INT 3
12620: EQUAL
12621: AND
12622: PUSH
12623: LD_EXP 45
12627: PPUSH
12628: LD_INT 119
12630: PPUSH
12631: CALL 19889 0 2
12635: AND
12636: PUSH
12637: LD_EXP 30
12641: NOT
12642: AND
12643: IFFALSE 12867
12645: GO 12647
12647: DISABLE
// begin InGameOn ;
12648: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12652: LD_EXP 45
12656: PPUSH
12657: LD_INT 3
12659: PPUSH
12660: CALL_OW 235
// ComEnterUnit ( Givi , ruLab ) ;
12664: LD_EXP 45
12668: PPUSH
12669: LD_INT 119
12671: PPUSH
12672: CALL_OW 120
// wait ( 0 0$1 ) ;
12676: LD_INT 35
12678: PPUSH
12679: CALL_OW 67
// DialogueOn ;
12683: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12687: LD_EXP 45
12691: PPUSH
12692: LD_STRING DG-Captive-1
12694: PPUSH
12695: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12699: LD_EXP 63
12703: PPUSH
12704: LD_STRING DCom-Captive-2
12706: PPUSH
12707: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12711: LD_EXP 45
12715: PPUSH
12716: LD_STRING DG-Captive-3
12718: PPUSH
12719: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12723: LD_EXP 63
12727: PPUSH
12728: LD_STRING DCom-Captive-4
12730: PPUSH
12731: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12735: LD_EXP 63
12739: PPUSH
12740: CALL_OW 64
// DialogueOff ;
12744: CALL_OW 7
// InGameOff ;
12748: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12752: LD_EXP 45
12756: PPUSH
12757: LD_INT 2
12759: PPUSH
12760: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12764: LD_EXP 45
12768: PPUSH
12769: CALL_OW 122
// if Aviradze then
12773: LD_EXP 54
12777: IFFALSE 12820
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12779: LD_ADDR_EXP 14
12783: PUSH
12784: LD_EXP 14
12788: PPUSH
12789: LD_EXP 54
12793: PPUSH
12794: CALL 66083 0 2
12798: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12799: LD_EXP 54
12803: PPUSH
12804: LD_INT 2
12806: PPUSH
12807: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12811: LD_EXP 54
12815: PPUSH
12816: CALL_OW 122
// end ; if Ibrahim then
12820: LD_EXP 47
12824: IFFALSE 12867
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12826: LD_ADDR_EXP 14
12830: PUSH
12831: LD_EXP 14
12835: PPUSH
12836: LD_EXP 47
12840: PPUSH
12841: CALL 66083 0 2
12845: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12846: LD_EXP 47
12850: PPUSH
12851: LD_INT 2
12853: PPUSH
12854: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12858: LD_EXP 47
12862: PPUSH
12863: CALL_OW 122
// end ; end ;
12867: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12868: LD_EXP 17
12872: NOT
12873: PUSH
12874: LD_EXP 27
12878: AND
12879: PUSH
12880: LD_EXP 44
12884: PPUSH
12885: CALL_OW 248
12889: PUSH
12890: LD_INT 3
12892: EQUAL
12893: AND
12894: PUSH
12895: LD_EXP 44
12899: PPUSH
12900: LD_INT 119
12902: PPUSH
12903: CALL 19889 0 2
12907: AND
12908: PUSH
12909: LD_EXP 30
12913: NOT
12914: AND
12915: IFFALSE 13177
12917: GO 12919
12919: DISABLE
// begin InGameOn ;
12920: CALL_OW 8
// SetSide ( Heike , 3 ) ;
12924: LD_EXP 44
12928: PPUSH
12929: LD_INT 3
12931: PPUSH
12932: CALL_OW 235
// ComEnterUnit ( Heike , ruLab ) ;
12936: LD_EXP 44
12940: PPUSH
12941: LD_INT 119
12943: PPUSH
12944: CALL_OW 120
// wait ( 0 0$1 ) ;
12948: LD_INT 35
12950: PPUSH
12951: CALL_OW 67
// DialogueOn ;
12955: CALL_OW 6
// if Aviradze and Ibrahim then
12959: LD_EXP 54
12963: PUSH
12964: LD_EXP 47
12968: AND
12969: IFFALSE 12985
// Say ( Heike , DH-Captive-a-1 ) else
12971: LD_EXP 44
12975: PPUSH
12976: LD_STRING DH-Captive-a-1
12978: PPUSH
12979: CALL_OW 88
12983: GO 12997
// Say ( Heike , DH-Captive-a-b-1 ) ;
12985: LD_EXP 44
12989: PPUSH
12990: LD_STRING DH-Captive-a-b-1
12992: PPUSH
12993: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
12997: LD_EXP 63
13001: PPUSH
13002: LD_STRING DCom-Captive-a-2
13004: PPUSH
13005: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
13009: LD_EXP 44
13013: PPUSH
13014: LD_STRING DH-Captive-a-3
13016: PPUSH
13017: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
13021: LD_EXP 63
13025: PPUSH
13026: LD_STRING DCom-Captive-a-4
13028: PPUSH
13029: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
13033: LD_EXP 44
13037: PPUSH
13038: LD_STRING DH-Captive-a-5
13040: PPUSH
13041: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13045: LD_EXP 63
13049: PPUSH
13050: CALL_OW 64
// DialogueOff ;
13054: CALL_OW 7
// InGameOff ;
13058: CALL_OW 9
// SetSide ( Heike , 2 ) ;
13062: LD_EXP 44
13066: PPUSH
13067: LD_INT 2
13069: PPUSH
13070: CALL_OW 235
// ComExitBuilding ( Heike ) ;
13074: LD_EXP 44
13078: PPUSH
13079: CALL_OW 122
// if Aviradze then
13083: LD_EXP 54
13087: IFFALSE 13130
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13089: LD_ADDR_EXP 14
13093: PUSH
13094: LD_EXP 14
13098: PPUSH
13099: LD_EXP 54
13103: PPUSH
13104: CALL 66083 0 2
13108: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13109: LD_EXP 54
13113: PPUSH
13114: LD_INT 2
13116: PPUSH
13117: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13121: LD_EXP 54
13125: PPUSH
13126: CALL_OW 122
// end ; if Ibrahim then
13130: LD_EXP 47
13134: IFFALSE 13177
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13136: LD_ADDR_EXP 14
13140: PUSH
13141: LD_EXP 14
13145: PPUSH
13146: LD_EXP 47
13150: PPUSH
13151: CALL 66083 0 2
13155: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13156: LD_EXP 47
13160: PPUSH
13161: LD_INT 2
13163: PPUSH
13164: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13168: LD_EXP 47
13172: PPUSH
13173: CALL_OW 122
// end ; end ;
13177: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
13178: LD_INT 2
13180: PUSH
13181: LD_INT 25
13183: PUSH
13184: LD_INT 32
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PUSH
13191: LD_INT 25
13193: PUSH
13194: LD_INT 34
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: LIST
13205: PPUSH
13206: CALL_OW 69
13210: IFFALSE 13222
13212: GO 13214
13214: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
13215: LD_STRING M1-weapons-out
13217: PPUSH
13218: CALL_OW 604
13222: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
13223: LD_INT 2
13225: PPUSH
13226: LD_EXP 59
13230: PPUSH
13231: CALL_OW 292
13235: PUSH
13236: LD_EXP 44
13240: PPUSH
13241: LD_EXP 59
13245: PPUSH
13246: CALL_OW 296
13250: AND
13251: PUSH
13252: LD_EXP 17
13256: NOT
13257: AND
13258: PUSH
13259: LD_EXP 30
13263: NOT
13264: AND
13265: IFFALSE 14123
13267: GO 13269
13269: DISABLE
13270: LD_INT 0
13272: PPUSH
13273: PPUSH
// begin if contactWithAmerican then
13274: LD_EXP 25
13278: IFFALSE 13375
// begin DialogueOn ;
13280: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13284: LD_EXP 59
13288: PPUSH
13289: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
13293: LD_EXP 44
13297: PPUSH
13298: LD_STRING DH-USsol-1
13300: PPUSH
13301: CALL_OW 88
// SetSide ( Jerry , 2 ) ;
13305: LD_EXP 59
13309: PPUSH
13310: LD_INT 2
13312: PPUSH
13313: CALL_OW 235
// americanSquad := Join ( americanSquad , Jerry ) ;
13317: LD_ADDR_EXP 56
13321: PUSH
13322: LD_EXP 56
13326: PPUSH
13327: LD_EXP 59
13331: PPUSH
13332: CALL 66083 0 2
13336: ST_TO_ADDR
// heikeSquad := Join ( heikeSquad , Mike ) ;
13337: LD_ADDR_EXP 14
13341: PUSH
13342: LD_EXP 14
13346: PPUSH
13347: LD_EXP 46
13351: PPUSH
13352: CALL 66083 0 2
13356: ST_TO_ADDR
// SetTag ( Jerry , tagCaptured ) ;
13357: LD_EXP 59
13361: PPUSH
13362: LD_INT 1
13364: PPUSH
13365: CALL_OW 109
// DialogueOff ;
13369: CALL_OW 7
// exit ;
13373: GO 14123
// end ; DialogueOn ;
13375: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13379: LD_EXP 59
13383: PPUSH
13384: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
13388: LD_EXP 59
13392: PPUSH
13393: LD_STRING DJy-Food-1
13395: PPUSH
13396: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
13400: LD_EXP 44
13404: PPUSH
13405: LD_STRING DH-Food-2
13407: PPUSH
13408: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
13412: LD_EXP 59
13416: PPUSH
13417: LD_STRING DJy-Food-3
13419: PPUSH
13420: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
13424: LD_EXP 59
13428: PPUSH
13429: LD_STRING DJy-Food-4
13431: PPUSH
13432: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
13436: LD_EXP 44
13440: PPUSH
13441: LD_STRING DH-Food-5
13443: PPUSH
13444: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
13448: LD_EXP 59
13452: PPUSH
13453: LD_STRING DJy-Food-6
13455: PPUSH
13456: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
13460: LD_EXP 59
13464: PPUSH
13465: LD_STRING DJy-Food-7
13467: PPUSH
13468: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
13472: LD_EXP 59
13476: PPUSH
13477: LD_STRING DJy-Food-8
13479: PPUSH
13480: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
13484: LD_EXP 44
13488: PPUSH
13489: LD_STRING DH-Food-9
13491: PPUSH
13492: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
13496: LD_EXP 59
13500: PPUSH
13501: LD_STRING DJy-Food-10
13503: PPUSH
13504: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
13508: LD_EXP 44
13512: PPUSH
13513: LD_STRING DH-Food-11
13515: PPUSH
13516: CALL_OW 88
// DialogueOff ;
13520: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13524: LD_STRING M3
13526: PPUSH
13527: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13531: LD_INT 5
13533: PPUSH
13534: LD_INT 215
13536: PPUSH
13537: LD_INT 117
13539: PPUSH
13540: LD_INT 0
13542: PPUSH
13543: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13547: LD_INT 215
13549: PPUSH
13550: LD_INT 118
13552: PPUSH
13553: LD_INT 2
13555: PPUSH
13556: LD_INT 6
13558: NEG
13559: PPUSH
13560: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
13564: LD_INT 215
13566: PPUSH
13567: LD_INT 118
13569: PPUSH
13570: LD_INT 2
13572: PPUSH
13573: CALL_OW 331
// foodDelivered := false ;
13577: LD_ADDR_VAR 0 2
13581: PUSH
13582: LD_INT 0
13584: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13585: LD_INT 35
13587: PPUSH
13588: CALL_OW 67
// if hasMuchin then
13592: LD_EXP 30
13596: IFFALSE 13600
// continue ;
13598: GO 13585
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
13600: LD_ADDR_VAR 0 1
13604: PUSH
13605: LD_EXP 14
13609: PUSH
13610: LD_EXP 44
13614: UNION
13615: PPUSH
13616: LD_INT 91
13618: PUSH
13619: LD_EXP 59
13623: PUSH
13624: LD_INT 6
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: LIST
13631: PUSH
13632: LD_INT 25
13634: PUSH
13635: LD_INT 33
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PPUSH
13646: CALL_OW 72
13650: PUSH
13651: FOR_IN
13652: IFFALSE 13852
// if Carry ( i ) then
13654: LD_VAR 0 1
13658: PPUSH
13659: CALL_OW 281
13663: IFFALSE 13850
// begin DialogueOn ;
13665: CALL_OW 6
// foodDelivered := true ;
13669: LD_ADDR_VAR 0 2
13673: PUSH
13674: LD_INT 1
13676: ST_TO_ADDR
// case i of Heike :
13677: LD_VAR 0 1
13681: PUSH
13682: LD_EXP 44
13686: DOUBLE
13687: EQUAL
13688: IFTRUE 13692
13690: GO 13707
13692: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
13693: LD_EXP 44
13697: PPUSH
13698: LD_STRING DH-Food-12
13700: PPUSH
13701: CALL_OW 88
13705: GO 13833
13707: LD_EXP 49
13711: DOUBLE
13712: EQUAL
13713: IFTRUE 13717
13715: GO 13732
13717: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13718: LD_EXP 49
13722: PPUSH
13723: LD_STRING DK-Food-a-12
13725: PPUSH
13726: CALL_OW 88
13730: GO 13833
13732: LD_EXP 51
13736: DOUBLE
13737: EQUAL
13738: IFTRUE 13742
13740: GO 13757
13742: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13743: LD_EXP 51
13747: PPUSH
13748: LD_STRING DMar-Food-a-12
13750: PPUSH
13751: CALL_OW 88
13755: GO 13833
13757: LD_EXP 45
13761: DOUBLE
13762: EQUAL
13763: IFTRUE 13767
13765: GO 13782
13767: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13768: LD_EXP 45
13772: PPUSH
13773: LD_STRING DG-Food-a-14
13775: PPUSH
13776: CALL_OW 88
13780: GO 13833
13782: LD_EXP 46
13786: DOUBLE
13787: EQUAL
13788: IFTRUE 13792
13790: GO 13807
13792: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13793: LD_EXP 46
13797: PPUSH
13798: LD_STRING DM-Food-a-15
13800: PPUSH
13801: CALL_OW 88
13805: GO 13833
13807: LD_EXP 48
13811: DOUBLE
13812: EQUAL
13813: IFTRUE 13817
13815: GO 13832
13817: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
13818: LD_EXP 48
13822: PPUSH
13823: LD_STRING DKam-Food-a-16
13825: PPUSH
13826: CALL_OW 88
13830: GO 13833
13832: POP
// SetCargo ( i , mat_cans , 0 ) ;
13833: LD_VAR 0 1
13837: PPUSH
13838: LD_INT 1
13840: PPUSH
13841: LD_INT 0
13843: PPUSH
13844: CALL_OW 290
// break ;
13848: GO 13852
// end ;
13850: GO 13651
13852: POP
13853: POP
// until foodDelivered ;
13854: LD_VAR 0 2
13858: IFFALSE 13585
// givenFood := true ;
13860: LD_ADDR_EXP 33
13864: PUSH
13865: LD_INT 1
13867: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
13868: LD_EXP 59
13872: PPUSH
13873: LD_STRING DJy-Food-13
13875: PPUSH
13876: CALL_OW 88
// hasVirus := true ;
13880: LD_ADDR_EXP 31
13884: PUSH
13885: LD_INT 1
13887: ST_TO_ADDR
// if not americanContact then
13888: LD_EXP 10
13892: NOT
13893: IFFALSE 13943
// begin Say ( Heike , DH-Food-14 ) ;
13895: LD_EXP 44
13899: PPUSH
13900: LD_STRING DH-Food-14
13902: PPUSH
13903: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
13907: LD_EXP 59
13911: PPUSH
13912: LD_STRING DJy-Food-15
13914: PPUSH
13915: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
13919: LD_EXP 59
13923: PPUSH
13924: LD_STRING DJy-Food-16
13926: PPUSH
13927: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
13931: LD_EXP 59
13935: PPUSH
13936: LD_STRING DJy-Food-17
13938: PPUSH
13939: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
13943: LD_STRING M3-out
13945: PPUSH
13946: CALL_OW 337
// DialogueOff ;
13950: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
13954: LD_EXP 59
13958: PPUSH
13959: LD_INT 1
13961: PPUSH
13962: LD_INT 10
13964: PPUSH
13965: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
13969: LD_EXP 59
13973: PPUSH
13974: LD_INT 95
13976: PPUSH
13977: LD_INT 17
13979: PPUSH
13980: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13984: LD_INT 35
13986: PPUSH
13987: CALL_OW 67
// if not HasTask ( Jerry ) then
13991: LD_EXP 59
13995: PPUSH
13996: CALL_OW 314
14000: NOT
14001: IFFALSE 14018
// ComMoveXY ( Jerry , 95 , 17 ) ;
14003: LD_EXP 59
14007: PPUSH
14008: LD_INT 95
14010: PPUSH
14011: LD_INT 17
14013: PPUSH
14014: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
14018: LD_EXP 59
14022: PPUSH
14023: LD_INT 95
14025: PPUSH
14026: LD_INT 17
14028: PPUSH
14029: CALL_OW 307
14033: IFFALSE 13984
// SetCargo ( Jerry , mat_cans , 0 ) ;
14035: LD_EXP 59
14039: PPUSH
14040: LD_INT 1
14042: PPUSH
14043: LD_INT 0
14045: PPUSH
14046: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
14050: LD_ADDR_EXP 56
14054: PUSH
14055: LD_EXP 56
14059: PPUSH
14060: LD_EXP 59
14064: PPUSH
14065: CALL 66083 0 2
14069: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
14070: LD_ADDR_VAR 0 1
14074: PUSH
14075: LD_INT 22
14077: PUSH
14078: LD_INT 4
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 23
14087: PUSH
14088: LD_INT 1
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PPUSH
14099: CALL_OW 69
14103: PUSH
14104: FOR_IN
14105: IFFALSE 14121
// SetLives ( i , 1000 ) ;
14107: LD_VAR 0 1
14111: PPUSH
14112: LD_INT 1000
14114: PPUSH
14115: CALL_OW 234
14119: GO 14104
14121: POP
14122: POP
// end ;
14123: PPOPN 2
14125: END
// every 0 0$2 trigger not hasMuchin and hasExplosions marked gameStartEvent do var un , tmp ;
14126: LD_EXP 30
14130: NOT
14131: PUSH
14132: LD_EXP 6
14136: AND
14137: IFFALSE 14568
14139: GO 14141
14141: DISABLE
14142: LD_INT 0
14144: PPUSH
14145: PPUSH
// begin tmp := [ ] ;
14146: LD_ADDR_VAR 0 2
14150: PUSH
14151: EMPTY
14152: ST_TO_ADDR
// uc_side := 3 ;
14153: LD_ADDR_OWVAR 20
14157: PUSH
14158: LD_INT 3
14160: ST_TO_ADDR
// uc_nation := 3 ;
14161: LD_ADDR_OWVAR 21
14165: PUSH
14166: LD_INT 3
14168: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
14169: LD_INT 1
14171: PPUSH
14172: LD_INT 8
14174: PPUSH
14175: CALL_OW 381
// un := CreateHuman ;
14179: LD_ADDR_VAR 0 1
14183: PUSH
14184: CALL_OW 44
14188: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
14189: LD_VAR 0 1
14193: PPUSH
14194: LD_INT 173
14196: PPUSH
14197: LD_INT 104
14199: PPUSH
14200: LD_INT 0
14202: PPUSH
14203: CALL_OW 48
// tmp := Join ( tmp , un ) ;
14207: LD_ADDR_VAR 0 2
14211: PUSH
14212: LD_VAR 0 2
14216: PPUSH
14217: LD_VAR 0 1
14221: PPUSH
14222: CALL 66083 0 2
14226: ST_TO_ADDR
// un := CreateHuman ;
14227: LD_ADDR_VAR 0 1
14231: PUSH
14232: CALL_OW 44
14236: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
14237: LD_VAR 0 1
14241: PPUSH
14242: LD_INT 73
14244: PPUSH
14245: CALL_OW 52
// tmp := Join ( tmp , un ) ;
14249: LD_ADDR_VAR 0 2
14253: PUSH
14254: LD_VAR 0 2
14258: PPUSH
14259: LD_VAR 0 1
14263: PPUSH
14264: CALL 66083 0 2
14268: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14269: LD_INT 35
14271: PPUSH
14272: CALL_OW 67
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 8 and UnitFilter ( tmp , [ f_see , 2 ] ) ;
14276: LD_EXP 49
14280: PPUSH
14281: CALL_OW 255
14285: PUSH
14286: LD_INT 2
14288: EQUAL
14289: PUSH
14290: LD_EXP 49
14294: PPUSH
14295: LD_INT 73
14297: PPUSH
14298: CALL_OW 296
14302: PUSH
14303: LD_INT 8
14305: LESS
14306: AND
14307: PUSH
14308: LD_VAR 0 2
14312: PPUSH
14313: LD_INT 101
14315: PUSH
14316: LD_INT 2
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 72
14327: AND
14328: IFFALSE 14269
// InGameOn ;
14330: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
14334: LD_INT 73
14336: PPUSH
14337: CALL_OW 250
14341: PPUSH
14342: LD_INT 73
14344: PPUSH
14345: CALL_OW 251
14349: PPUSH
14350: LD_INT 2
14352: PPUSH
14353: LD_INT 9
14355: NEG
14356: PPUSH
14357: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
14361: LD_INT 73
14363: PPUSH
14364: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
14368: LD_EXP 49
14372: PPUSH
14373: LD_INT 73
14375: PPUSH
14376: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
14380: LD_EXP 49
14384: PPUSH
14385: LD_STRING DK-Plastic-1
14387: PPUSH
14388: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
14392: LD_EXP 49
14396: PPUSH
14397: LD_STRING DK-Plastic-2
14399: PPUSH
14400: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
14404: LD_EXP 49
14408: PPUSH
14409: LD_INT 73
14411: PPUSH
14412: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14416: LD_INT 35
14418: PPUSH
14419: CALL_OW 67
// until GetDistUnits ( Kaia , barExplosion ) < 6 ;
14423: LD_EXP 49
14427: PPUSH
14428: LD_INT 73
14430: PPUSH
14431: CALL_OW 296
14435: PUSH
14436: LD_INT 6
14438: LESS
14439: IFFALSE 14416
// ComHold ( Kaia ) ;
14441: LD_EXP 49
14445: PPUSH
14446: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
14450: LD_VAR 0 2
14454: PUSH
14455: LD_INT 1
14457: ARRAY
14458: PPUSH
14459: LD_STRING DRum-Plastic-3
14461: PPUSH
14462: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
14466: LD_VAR 0 2
14470: PUSH
14471: LD_INT 2
14473: ARRAY
14474: PPUSH
14475: LD_STRING DRum2-Plastic-4
14477: PPUSH
14478: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
14482: LD_VAR 0 2
14486: PUSH
14487: LD_INT 1
14489: ARRAY
14490: PPUSH
14491: LD_STRING DRum-Plastic-5
14493: PPUSH
14494: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14498: LD_VAR 0 2
14502: PUSH
14503: LD_INT 2
14505: ARRAY
14506: PPUSH
14507: LD_STRING DRum2-Plastic-6
14509: PPUSH
14510: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14514: LD_EXP 49
14518: PPUSH
14519: LD_STRING DK-Plastic-7
14521: PPUSH
14522: CALL_OW 88
// InGameOff ;
14526: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14530: LD_INT 73
14532: PPUSH
14533: CALL_OW 250
14537: PPUSH
14538: LD_INT 73
14540: PPUSH
14541: CALL_OW 251
14545: PPUSH
14546: LD_INT 2
14548: PPUSH
14549: CALL_OW 331
// explosionsTakenByRussians := true ;
14553: LD_ADDR_EXP 21
14557: PUSH
14558: LD_INT 1
14560: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
14561: LD_STRING ExplosivesInfo
14563: PPUSH
14564: CALL_OW 97
// end ;
14568: PPOPN 2
14570: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do
14571: LD_EXP 21
14575: PUSH
14576: LD_EXP 49
14580: PPUSH
14581: CALL_OW 255
14585: PUSH
14586: LD_INT 2
14588: EQUAL
14589: AND
14590: PUSH
14591: LD_EXP 49
14595: PPUSH
14596: LD_INT 61
14598: PPUSH
14599: CALL 19889 0 2
14603: AND
14604: PUSH
14605: LD_EXP 17
14609: NOT
14610: AND
14611: PUSH
14612: LD_EXP 30
14616: NOT
14617: AND
14618: IFFALSE 14774
14620: GO 14622
14622: DISABLE
// begin InGameOn ;
14623: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
14627: LD_INT 61
14629: PPUSH
14630: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14634: LD_EXP 49
14638: PPUSH
14639: LD_INT 3
14641: PPUSH
14642: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
14646: LD_EXP 49
14650: PPUSH
14651: LD_INT 61
14653: PPUSH
14654: CALL_OW 120
// wait ( 0 0$2 ) ;
14658: LD_INT 70
14660: PPUSH
14661: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14665: LD_EXP 49
14669: PPUSH
14670: LD_STRING DK-Plastic-8
14672: PPUSH
14673: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14677: LD_EXP 65
14681: PUSH
14682: LD_INT 1
14684: ARRAY
14685: PPUSH
14686: LD_STRING DRuMch-Plastic-9
14688: PPUSH
14689: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14693: LD_EXP 49
14697: PPUSH
14698: LD_STRING DK-Plastic-10
14700: PPUSH
14701: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14705: LD_EXP 65
14709: PUSH
14710: LD_INT 1
14712: ARRAY
14713: PPUSH
14714: LD_STRING DRuMch-Plastic-a-11
14716: PPUSH
14717: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
14721: LD_EXP 49
14725: PPUSH
14726: LD_STRING DK-Plastic-a-12
14728: PPUSH
14729: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
14733: LD_EXP 65
14737: PUSH
14738: LD_INT 1
14740: ARRAY
14741: PPUSH
14742: LD_STRING DRuMch-Plastic-a-13
14744: PPUSH
14745: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
14749: LD_EXP 49
14753: PPUSH
14754: LD_INT 2
14756: PPUSH
14757: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14761: LD_EXP 49
14765: PPUSH
14766: CALL_OW 122
// InGameOff ;
14770: CALL_OW 9
// end ;
14774: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do
14775: LD_EXP 21
14779: PUSH
14780: LD_EXP 49
14784: PPUSH
14785: CALL_OW 255
14789: PUSH
14790: LD_INT 2
14792: EQUAL
14793: AND
14794: PUSH
14795: LD_EXP 49
14799: PPUSH
14800: LD_INT 196
14802: PPUSH
14803: CALL 19889 0 2
14807: AND
14808: PUSH
14809: LD_EXP 17
14813: NOT
14814: AND
14815: PUSH
14816: LD_EXP 30
14820: NOT
14821: AND
14822: IFFALSE 15161
14824: GO 14826
14826: DISABLE
// begin InGameOn ;
14827: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
14831: LD_INT 196
14833: PPUSH
14834: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14838: LD_EXP 49
14842: PPUSH
14843: LD_INT 3
14845: PPUSH
14846: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
14850: LD_EXP 49
14854: PPUSH
14855: LD_INT 196
14857: PPUSH
14858: CALL_OW 120
// wait ( 0 0$2 ) ;
14862: LD_INT 70
14864: PPUSH
14865: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14869: LD_EXP 49
14873: PPUSH
14874: LD_STRING DK-Plastic-8
14876: PPUSH
14877: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
14881: LD_EXP 66
14885: PUSH
14886: LD_INT 1
14888: ARRAY
14889: PPUSH
14890: LD_STRING DRuMch-Plastic-9
14892: PPUSH
14893: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14897: LD_EXP 49
14901: PPUSH
14902: LD_STRING DK-Plastic-10
14904: PPUSH
14905: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
14909: LD_EXP 66
14913: PUSH
14914: LD_INT 1
14916: ARRAY
14917: PPUSH
14918: LD_STRING DRuMch-Plastic-11
14920: PPUSH
14921: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
14925: LD_EXP 49
14929: PPUSH
14930: LD_STRING DK-Plastic-12
14932: PPUSH
14933: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
14937: LD_EXP 49
14941: PPUSH
14942: LD_STRING DK-Plastic-13
14944: PPUSH
14945: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
14949: LD_EXP 66
14953: PUSH
14954: LD_INT 1
14956: ARRAY
14957: PPUSH
14958: LD_STRING DRuMch-Plastic-14
14960: PPUSH
14961: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
14965: LD_EXP 67
14969: PPUSH
14970: LD_INT 167
14972: PPUSH
14973: LD_INT 34
14975: PPUSH
14976: LD_INT 3
14978: PPUSH
14979: LD_INT 0
14981: PPUSH
14982: CALL 68223 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14986: LD_EXP 67
14990: PPUSH
14991: LD_INT 196
14993: PPUSH
14994: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14998: LD_INT 35
15000: PPUSH
15001: CALL_OW 67
// if not HasTask ( Stiopa ) then
15005: LD_EXP 67
15009: PPUSH
15010: CALL_OW 314
15014: NOT
15015: IFFALSE 15029
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15017: LD_EXP 67
15021: PPUSH
15022: LD_INT 196
15024: PPUSH
15025: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
15029: LD_EXP 67
15033: PPUSH
15034: CALL_OW 310
15038: IFFALSE 14998
// Say ( Stiopa , DSpn-Plastic-15 ) ;
15040: LD_EXP 67
15044: PPUSH
15045: LD_STRING DSpn-Plastic-15
15047: PPUSH
15048: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
15052: LD_EXP 68
15056: PPUSH
15057: LD_STRING DLr-Plastic-16
15059: PPUSH
15060: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
15064: LD_EXP 49
15068: PPUSH
15069: LD_STRING DK-Plastic-17
15071: PPUSH
15072: CALL_OW 88
// wait ( 0 0$0.3 ) ;
15076: LD_INT 10
15078: PPUSH
15079: CALL_OW 67
// UnitsBlockingEntrance ( ruWorkshop ) ;
15083: LD_INT 196
15085: PPUSH
15086: CALL 19615 0 1
// SetSide ( Kaia , 2 ) ;
15090: LD_EXP 49
15094: PPUSH
15095: LD_INT 2
15097: PPUSH
15098: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15102: LD_EXP 49
15106: PPUSH
15107: CALL_OW 122
// InGameOff ;
15111: CALL_OW 9
// explosionsTakenByRussians := false ;
15115: LD_ADDR_EXP 21
15119: PUSH
15120: LD_INT 0
15122: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
15123: LD_INT 170
15125: PPUSH
15126: LD_INT 28
15128: PPUSH
15129: LD_INT 2
15131: PPUSH
15132: LD_INT 6
15134: NEG
15135: PPUSH
15136: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
15140: LD_INT 170
15142: PPUSH
15143: LD_INT 28
15145: PPUSH
15146: LD_INT 2
15148: PPUSH
15149: CALL_OW 331
// knowWhereExplosivesAre := true ;
15153: LD_ADDR_EXP 34
15157: PUSH
15158: LD_INT 1
15160: ST_TO_ADDR
// end ;
15161: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
15162: LD_EXP 34
15166: PUSH
15167: LD_EXP 49
15171: PPUSH
15172: CALL_OW 255
15176: PUSH
15177: LD_INT 2
15179: EQUAL
15180: AND
15181: PUSH
15182: LD_EXP 49
15186: PPUSH
15187: LD_INT 195
15189: PPUSH
15190: CALL 19889 0 2
15194: AND
15195: PUSH
15196: LD_EXP 17
15200: NOT
15201: AND
15202: PUSH
15203: LD_EXP 30
15207: NOT
15208: AND
15209: IFFALSE 15315
15211: GO 15213
15213: DISABLE
// begin InGameOn ;
15214: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
15218: LD_EXP 49
15222: PPUSH
15223: LD_INT 3
15225: PPUSH
15226: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
15230: LD_EXP 49
15234: PPUSH
15235: LD_INT 195
15237: PPUSH
15238: CALL_OW 120
// wait ( 0 0$1 ) ;
15242: LD_INT 35
15244: PPUSH
15245: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
15249: LD_EXP 49
15253: PPUSH
15254: LD_STRING DK-Plastic-18
15256: PPUSH
15257: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
15261: LD_STRING ExplosivesInfoUsage
15263: PPUSH
15264: CALL_OW 97
// UnitsBlockingEntrance ( ruExpDep ) ;
15268: LD_INT 195
15270: PPUSH
15271: CALL 19615 0 1
// SetSide ( Kaia , 2 ) ;
15275: LD_EXP 49
15279: PPUSH
15280: LD_INT 2
15282: PPUSH
15283: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15287: LD_EXP 49
15291: PPUSH
15292: CALL_OW 122
// InGameOff ;
15296: CALL_OW 9
// hasExplosionCollected := true ;
15300: LD_ADDR_EXP 23
15304: PUSH
15305: LD_INT 1
15307: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
15308: LD_STRING M1-explosive-out
15310: PPUSH
15311: CALL_OW 337
// end ;
15315: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
15316: LD_EXP 23
15320: PUSH
15321: LD_EXP 17
15325: NOT
15326: AND
15327: PUSH
15328: LD_EXP 30
15332: NOT
15333: AND
15334: IFFALSE 15509
15336: GO 15338
15338: DISABLE
15339: LD_INT 0
15341: PPUSH
15342: PPUSH
// begin for i in importantBuildingsList do
15343: LD_ADDR_VAR 0 1
15347: PUSH
15348: LD_EXP 35
15352: PUSH
15353: FOR_IN
15354: IFFALSE 15370
// MarkBuilding ( i , true ) ;
15356: LD_VAR 0 1
15360: PPUSH
15361: LD_INT 1
15363: PPUSH
15364: CALL 20263 0 2
15368: GO 15353
15370: POP
15371: POP
// repeat wait ( 0 0$1 ) ;
15372: LD_INT 35
15374: PPUSH
15375: CALL_OW 67
// for i in importantBuildingsList do
15379: LD_ADDR_VAR 0 1
15383: PUSH
15384: LD_EXP 35
15388: PUSH
15389: FOR_IN
15390: IFFALSE 15500
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
15392: LD_EXP 44
15396: PUSH
15397: LD_EXP 14
15401: UNION
15402: PPUSH
15403: LD_INT 22
15405: PUSH
15406: LD_INT 2
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PUSH
15413: LD_INT 21
15415: PUSH
15416: LD_INT 1
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 91
15425: PUSH
15426: LD_VAR 0 1
15430: PUSH
15431: LD_INT 6
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: PPUSH
15444: CALL_OW 72
15448: IFFALSE 15498
// begin CenterNowOnUnits ( i ) ;
15450: LD_VAR 0 1
15454: PPUSH
15455: CALL_OW 87
// PlaceExplosives ( i ) ;
15459: LD_VAR 0 1
15463: PPUSH
15464: CALL 20160 0 1
// MarkBuilding ( i , false ) ;
15468: LD_VAR 0 1
15472: PPUSH
15473: LD_INT 0
15475: PPUSH
15476: CALL 20263 0 2
// importantBuildingsList := importantBuildingsList diff i ;
15480: LD_ADDR_EXP 35
15484: PUSH
15485: LD_EXP 35
15489: PUSH
15490: LD_VAR 0 1
15494: DIFF
15495: ST_TO_ADDR
// continue ;
15496: GO 15389
// end ; end ;
15498: GO 15389
15500: POP
15501: POP
// until not importantBuildingsList ;
15502: LD_EXP 35
15506: NOT
15507: IFFALSE 15372
// end ;
15509: PPOPN 2
15511: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
15512: LD_EXP 14
15516: PPUSH
15517: LD_INT 22
15519: PUSH
15520: LD_INT 2
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: LD_INT 95
15529: PUSH
15530: LD_INT 23
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PPUSH
15541: CALL_OW 72
15545: PUSH
15546: LD_EXP 44
15550: PPUSH
15551: CALL_OW 302
15555: AND
15556: PUSH
15557: LD_EXP 30
15561: NOT
15562: AND
15563: IFFALSE 15591
15565: GO 15567
15567: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
15568: LD_EXP 44
15572: PPUSH
15573: LD_STRING DH-End-1
15575: PPUSH
15576: CALL_OW 88
// if not activeExplosives then
15580: LD_EXP 36
15584: NOT
15585: IFFALSE 15591
// Explode ;
15587: CALL 23022 0 0
// end ;
15591: END
// function SayHEmpty ( ) ; begin
15592: LD_INT 0
15594: PPUSH
// case rand ( 1 , 3 ) of 1 :
15595: LD_INT 1
15597: PPUSH
15598: LD_INT 3
15600: PPUSH
15601: CALL_OW 12
15605: PUSH
15606: LD_INT 1
15608: DOUBLE
15609: EQUAL
15610: IFTRUE 15614
15612: GO 15629
15614: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
15615: LD_EXP 44
15619: PPUSH
15620: LD_STRING DH-Empty-1
15622: PPUSH
15623: CALL_OW 88
15627: GO 15676
15629: LD_INT 2
15631: DOUBLE
15632: EQUAL
15633: IFTRUE 15637
15635: GO 15652
15637: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
15638: LD_EXP 44
15642: PPUSH
15643: LD_STRING DH-Empty-2
15645: PPUSH
15646: CALL_OW 88
15650: GO 15676
15652: LD_INT 3
15654: DOUBLE
15655: EQUAL
15656: IFTRUE 15660
15658: GO 15675
15660: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
15661: LD_EXP 44
15665: PPUSH
15666: LD_STRING DH-Empty-3
15668: PPUSH
15669: CALL_OW 88
15673: GO 15676
15675: POP
// end ;
15676: LD_VAR 0 1
15680: RET
// function SayHVisited ( ) ; begin
15681: LD_INT 0
15683: PPUSH
// case rand ( 1 , 3 ) of 1 :
15684: LD_INT 1
15686: PPUSH
15687: LD_INT 3
15689: PPUSH
15690: CALL_OW 12
15694: PUSH
15695: LD_INT 1
15697: DOUBLE
15698: EQUAL
15699: IFTRUE 15703
15701: GO 15718
15703: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
15704: LD_EXP 44
15708: PPUSH
15709: LD_STRING DH-Visited-1
15711: PPUSH
15712: CALL_OW 88
15716: GO 15765
15718: LD_INT 2
15720: DOUBLE
15721: EQUAL
15722: IFTRUE 15726
15724: GO 15741
15726: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
15727: LD_EXP 44
15731: PPUSH
15732: LD_STRING DH-Visited-2
15734: PPUSH
15735: CALL_OW 88
15739: GO 15765
15741: LD_INT 3
15743: DOUBLE
15744: EQUAL
15745: IFTRUE 15749
15747: GO 15764
15749: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
15750: LD_EXP 44
15754: PPUSH
15755: LD_STRING DH-Visited-3
15757: PPUSH
15758: CALL_OW 88
15762: GO 15765
15764: POP
// end ;
15765: LD_VAR 0 1
15769: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
15770: LD_EXP 17
15774: NOT
15775: PUSH
15776: LD_EXP 15
15780: AND
15781: PUSH
15782: LD_EXP 44
15786: PPUSH
15787: CALL_OW 255
15791: PUSH
15792: LD_INT 2
15794: EQUAL
15795: AND
15796: PUSH
15797: LD_EXP 44
15801: PPUSH
15802: CALL_OW 302
15806: AND
15807: PUSH
15808: LD_EXP 44
15812: PPUSH
15813: CALL_OW 316
15817: AND
15818: PUSH
15819: LD_EXP 30
15823: NOT
15824: AND
15825: IFFALSE 15891
15827: GO 15829
15829: DISABLE
15830: LD_INT 0
15832: PPUSH
// begin enable ;
15833: ENABLE
// for i in entranceAllowedList do
15834: LD_ADDR_VAR 0 1
15838: PUSH
15839: LD_EXP 15
15843: PUSH
15844: FOR_IN
15845: IFFALSE 15889
// if InEntrance ( Heike , i ) then
15847: LD_EXP 44
15851: PPUSH
15852: LD_VAR 0 1
15856: PPUSH
15857: CALL 19889 0 2
15861: IFFALSE 15887
// begin disable ( entranceEvent ) ;
15863: LD_INT 1
15865: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
15866: LD_VAR 0 1
15870: PPUSH
15871: CALL 15894 0 1
// wait ( 0 0$3 ) ;
15875: LD_INT 105
15877: PPUSH
15878: CALL_OW 67
// enable ( entranceEvent ) ;
15882: LD_INT 1
15884: ENABLE_MARKED
// break ;
15885: GO 15889
// end ;
15887: GO 15844
15889: POP
15890: POP
// end ;
15891: PPOPN 1
15893: END
// function HeikeEnterBuilding ( building ) ; var i , tmp , tmp2 ; begin
15894: LD_INT 0
15896: PPUSH
15897: PPUSH
15898: PPUSH
15899: PPUSH
// if not building then
15900: LD_VAR 0 1
15904: NOT
15905: IFFALSE 15909
// exit ;
15907: GO 18534
// if building in entranceVisitedList then
15909: LD_VAR 0 1
15913: PUSH
15914: LD_EXP 16
15918: IN
15919: IFFALSE 15927
// begin SayHVisited ( ) ;
15921: CALL 15681 0 0
// exit ;
15925: GO 18534
// end ; case Query ( EnterBuilding ) of 1 :
15927: LD_STRING EnterBuilding
15929: PPUSH
15930: CALL_OW 97
15934: PUSH
15935: LD_INT 1
15937: DOUBLE
15938: EQUAL
15939: IFTRUE 15943
15941: GO 15946
15943: POP
// ; 2 :
15944: GO 15960
15946: LD_INT 2
15948: DOUBLE
15949: EQUAL
15950: IFTRUE 15954
15952: GO 15959
15954: POP
// exit ; end ;
15955: GO 18534
15957: GO 15960
15959: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
15960: LD_ADDR_EXP 16
15964: PUSH
15965: LD_EXP 16
15969: PPUSH
15970: LD_VAR 0 1
15974: PPUSH
15975: CALL 66083 0 2
15979: ST_TO_ADDR
// InGameOn ;
15980: CALL_OW 8
// SetSide ( Heike , 5 ) ;
15984: LD_EXP 44
15988: PPUSH
15989: LD_INT 5
15991: PPUSH
15992: CALL_OW 235
// SetSide ( building , 5 ) ;
15996: LD_VAR 0 1
16000: PPUSH
16001: LD_INT 5
16003: PPUSH
16004: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
16008: LD_EXP 44
16012: PPUSH
16013: LD_VAR 0 1
16017: PPUSH
16018: CALL_OW 120
// wait ( 0 0$3 ) ;
16022: LD_INT 105
16024: PPUSH
16025: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
16029: LD_ADDR_VAR 0 4
16033: PUSH
16034: LD_INT 165
16036: PUSH
16037: LD_INT 106
16039: PUSH
16040: LD_INT 135
16042: PUSH
16043: LD_INT 162
16045: PUSH
16046: LD_INT 61
16048: PUSH
16049: LD_INT 109
16051: PUSH
16052: LD_INT 169
16054: PUSH
16055: LD_INT 13
16057: PUSH
16058: LD_INT 147
16060: PUSH
16061: LD_INT 137
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: ST_TO_ADDR
// if not building in tmp then
16076: LD_VAR 0 1
16080: PUSH
16081: LD_VAR 0 4
16085: IN
16086: NOT
16087: IFFALSE 16095
// SayHEmpty ( ) else
16089: CALL 15592 0 0
16093: GO 18481
// case building of laundry :
16095: LD_VAR 0 1
16099: PUSH
16100: LD_INT 165
16102: DOUBLE
16103: EQUAL
16104: IFTRUE 16108
16106: GO 16212
16108: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
16109: LD_EXP 26
16113: PUSH
16114: LD_EXP 27
16118: NOT
16119: AND
16120: PUSH
16121: LD_EXP 28
16125: NOT
16126: AND
16127: IFFALSE 16182
// begin case Query ( HeikeInLaundry ) of 1 :
16129: LD_STRING HeikeInLaundry
16131: PPUSH
16132: CALL_OW 97
16136: PUSH
16137: LD_INT 1
16139: DOUBLE
16140: EQUAL
16141: IFTRUE 16145
16143: GO 16152
16145: POP
// SpawnHeikeAsRussian ; 2 :
16146: CALL 1802 0 0
16150: GO 16180
16152: LD_INT 2
16154: DOUBLE
16155: EQUAL
16156: IFTRUE 16160
16158: GO 16179
16160: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
16161: LD_ADDR_EXP 16
16165: PUSH
16166: LD_EXP 16
16170: PUSH
16171: LD_VAR 0 1
16175: DIFF
16176: ST_TO_ADDR
16177: GO 16180
16179: POP
// end else
16180: GO 16210
// begin entranceVisitedList := entranceVisitedList diff building ;
16182: LD_ADDR_EXP 16
16186: PUSH
16187: LD_EXP 16
16191: PUSH
16192: LD_VAR 0 1
16196: DIFF
16197: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16198: LD_EXP 44
16202: PPUSH
16203: LD_STRING DH-Locked
16205: PPUSH
16206: CALL_OW 88
// end ; end ; dougBar :
16210: GO 18481
16212: LD_INT 106
16214: DOUBLE
16215: EQUAL
16216: IFTRUE 16220
16218: GO 16582
16220: POP
// begin if contactWithAmerican and americanContact then
16221: LD_EXP 25
16225: PUSH
16226: LD_EXP 10
16230: AND
16231: IFFALSE 16295
// begin Say ( Heike , DH-Escort-a-1 ) ;
16233: LD_EXP 44
16237: PPUSH
16238: LD_STRING DH-Escort-a-1
16240: PPUSH
16241: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
16245: LD_EXP 58
16249: PPUSH
16250: LD_STRING DCa-Escort-a-2
16252: PPUSH
16253: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
16257: LD_EXP 58
16261: PPUSH
16262: LD_STRING DCa-Escort-a-3
16264: PPUSH
16265: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
16269: LD_EXP 44
16273: PPUSH
16274: LD_STRING DH-Escort-a-4
16276: PPUSH
16277: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
16281: LD_EXP 44
16285: PPUSH
16286: LD_STRING DH-Escort-a-5
16288: PPUSH
16289: CALL_OW 88
// end else
16293: GO 16539
// if contactWithAmerican then
16295: LD_EXP 25
16299: IFFALSE 16339
// begin Say ( Heike , DH-Escort-b-1 ) ;
16301: LD_EXP 44
16305: PPUSH
16306: LD_STRING DH-Escort-b-1
16308: PPUSH
16309: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
16313: LD_EXP 58
16317: PPUSH
16318: LD_STRING DCa-Escort-b-2
16320: PPUSH
16321: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
16325: LD_EXP 58
16329: PPUSH
16330: LD_STRING DCa-Escort-b-3
16332: PPUSH
16333: CALL_OW 88
// end else
16337: GO 16539
// begin Say ( Doug , DCa-Deal-a-1 ) ;
16339: LD_EXP 58
16343: PPUSH
16344: LD_STRING DCa-Deal-a-1
16346: PPUSH
16347: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
16351: LD_EXP 58
16355: PPUSH
16356: LD_STRING DCa-Deal-a-2
16358: PPUSH
16359: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
16363: LD_EXP 44
16367: PPUSH
16368: LD_STRING DH-Deal-a-3
16370: PPUSH
16371: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
16375: LD_EXP 58
16379: PPUSH
16380: LD_STRING DCa-Deal-a-4
16382: PPUSH
16383: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
16387: LD_EXP 44
16391: PPUSH
16392: LD_STRING DH-Deal-a-5
16394: PPUSH
16395: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
16399: LD_EXP 58
16403: PPUSH
16404: LD_STRING DCa-Deal-a-6
16406: PPUSH
16407: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
16411: LD_EXP 58
16415: PPUSH
16416: LD_STRING DCa-Deal-a-7
16418: PPUSH
16419: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
16423: LD_EXP 58
16427: PPUSH
16428: LD_STRING DCa-Deal-a-8
16430: PPUSH
16431: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
16435: LD_EXP 58
16439: PPUSH
16440: LD_STRING DCa-Deal-a-9
16442: PPUSH
16443: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
16447: LD_EXP 58
16451: PPUSH
16452: LD_STRING DCa-Deal-a-10
16454: PPUSH
16455: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
16459: LD_EXP 58
16463: PPUSH
16464: LD_STRING DCa-Deal-a-11
16466: PPUSH
16467: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16471: LD_INT 10
16473: PPUSH
16474: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
16478: LD_EXP 58
16482: PPUSH
16483: LD_STRING DCa-Deal-a-12
16485: PPUSH
16486: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
16490: LD_EXP 44
16494: PPUSH
16495: LD_STRING DH-Deal-a-13
16497: PPUSH
16498: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
16502: LD_EXP 44
16506: PPUSH
16507: LD_STRING DH-Deal-a-14
16509: PPUSH
16510: CALL_OW 88
// contactWithAmerican := true ;
16514: LD_ADDR_EXP 25
16518: PUSH
16519: LD_INT 1
16521: ST_TO_ADDR
// SaveVariable ( 1 , 08_DealWithDoug ) ;
16522: LD_INT 1
16524: PPUSH
16525: LD_STRING 08_DealWithDoug
16527: PPUSH
16528: CALL_OW 39
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
16532: LD_STRING M1-american-out
16534: PPUSH
16535: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
16539: LD_EXP 58
16543: PPUSH
16544: LD_INT 2
16546: PPUSH
16547: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
16551: LD_ADDR_EXP 14
16555: PUSH
16556: LD_EXP 14
16560: PPUSH
16561: LD_EXP 58
16565: PPUSH
16566: CALL 66083 0 2
16570: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
16571: LD_EXP 58
16575: PPUSH
16576: CALL_OW 122
// end ; usLab :
16580: GO 18481
16582: LD_INT 135
16584: DOUBLE
16585: EQUAL
16586: IFTRUE 16590
16588: GO 16909
16590: POP
// begin if hasSniperRifle then
16591: LD_EXP 11
16595: IFFALSE 16907
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
16597: LD_EXP 49
16601: PPUSH
16602: CALL_OW 302
16606: PUSH
16607: LD_EXP 49
16611: PUSH
16612: LD_EXP 14
16616: IN
16617: AND
16618: PUSH
16619: LD_EXP 49
16623: PPUSH
16624: CALL_OW 255
16628: PUSH
16629: LD_INT 2
16631: EQUAL
16632: AND
16633: IFFALSE 16881
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
16635: LD_EXP 44
16639: PPUSH
16640: LD_EXP 49
16644: PPUSH
16645: CALL_OW 296
16649: PUSH
16650: LD_INT 10
16652: GREATER
16653: IFFALSE 16678
// begin Query ( KaiaDistance ) ;
16655: LD_STRING KaiaDistance
16657: PPUSH
16658: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
16662: LD_ADDR_EXP 16
16666: PUSH
16667: LD_EXP 16
16671: PUSH
16672: LD_INT 135
16674: DIFF
16675: ST_TO_ADDR
// end else
16676: GO 16879
// begin SetSide ( Kaia , 5 ) ;
16678: LD_EXP 49
16682: PPUSH
16683: LD_INT 5
16685: PPUSH
16686: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
16690: LD_EXP 49
16694: PPUSH
16695: LD_INT 135
16697: PPUSH
16698: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16702: LD_INT 35
16704: PPUSH
16705: CALL_OW 67
// until IsInUnit ( Kaia ) ;
16709: LD_EXP 49
16713: PPUSH
16714: CALL_OW 310
16718: IFFALSE 16702
// Say ( Kaia , DK-Sniper-1 ) ;
16720: LD_EXP 49
16724: PPUSH
16725: LD_STRING DK-Sniper-1
16727: PPUSH
16728: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
16732: LD_EXP 49
16736: PPUSH
16737: CALL_OW 257
16741: PUSH
16742: LD_INT 34
16744: EQUAL
16745: PUSH
16746: LD_EXP 46
16750: PUSH
16751: LD_EXP 14
16755: IN
16756: AND
16757: PUSH
16758: LD_EXP 46
16762: PPUSH
16763: CALL_OW 302
16767: AND
16768: IFFALSE 16799
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
16770: LD_EXP 49
16774: PPUSH
16775: LD_STRING DK-Sniper-a-2
16777: PPUSH
16778: CALL_OW 88
// giveSniperRifleToMike := true ;
16782: LD_ADDR_EXP 42
16786: PUSH
16787: LD_INT 1
16789: ST_TO_ADDR
// Query ( QSniperMike ) ;
16790: LD_STRING QSniperMike
16792: PPUSH
16793: CALL_OW 97
// end else
16797: GO 16858
// begin Say ( Kaia , DK-Sniper-2 ) ;
16799: LD_EXP 49
16803: PPUSH
16804: LD_STRING DK-Sniper-2
16806: PPUSH
16807: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
16811: LD_EXP 49
16815: PPUSH
16816: LD_INT 32
16818: PPUSH
16819: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
16823: LD_EXP 51
16827: PPUSH
16828: CALL_OW 302
16832: PUSH
16833: LD_EXP 51
16837: PUSH
16838: LD_EXP 14
16842: IN
16843: AND
16844: IFFALSE 16858
// Say ( Markov , DMar-Sniper-3 ) ;
16846: LD_EXP 51
16850: PPUSH
16851: LD_STRING DMar-Sniper-3
16853: PPUSH
16854: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
16858: LD_EXP 49
16862: PPUSH
16863: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
16867: LD_EXP 49
16871: PPUSH
16872: LD_INT 2
16874: PPUSH
16875: CALL_OW 235
// end ; end else
16879: GO 16907
// begin entranceVisitedList := entranceVisitedList diff usLab ;
16881: LD_ADDR_EXP 16
16885: PUSH
16886: LD_EXP 16
16890: PUSH
16891: LD_INT 135
16893: DIFF
16894: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16895: LD_EXP 44
16899: PPUSH
16900: LD_STRING DH-Locked
16902: PPUSH
16903: CALL_OW 88
// end ; end ; end ; drugsLab :
16907: GO 18481
16909: LD_INT 162
16911: DOUBLE
16912: EQUAL
16913: IFTRUE 16917
16915: GO 17050
16917: POP
// begin if hasStimDrugs then
16918: LD_EXP 9
16922: IFFALSE 17036
// begin wait ( 0 0$1 ) ;
16924: LD_INT 35
16926: PPUSH
16927: CALL_OW 67
// if not hasStimDrugsCollected then
16931: LD_EXP 24
16935: NOT
16936: IFFALSE 16978
// begin Say ( Heike , DH-Lab-1 ) ;
16938: LD_EXP 44
16942: PPUSH
16943: LD_STRING DH-Lab-1
16945: PPUSH
16946: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
16950: LD_INT 5
16952: PPUSH
16953: LD_INT 2
16955: PPUSH
16956: LD_INT 2
16958: PPUSH
16959: CALL_OW 322
// hasStimDrugsCollected := true ;
16963: LD_ADDR_EXP 24
16967: PUSH
16968: LD_INT 1
16970: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
16971: LD_STRING M1-drugs-out
16973: PPUSH
16974: CALL_OW 604
// end ; if not hasExplosionCollected then
16978: LD_EXP 23
16982: NOT
16983: IFFALSE 17001
// entranceVisitedList := entranceVisitedList diff drugsLab else
16985: LD_ADDR_EXP 16
16989: PUSH
16990: LD_EXP 16
16994: PUSH
16995: LD_INT 162
16997: DIFF
16998: ST_TO_ADDR
16999: GO 17034
// begin wait ( 0 0$3 ) ;
17001: LD_INT 105
17003: PPUSH
17004: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
17008: LD_EXP 44
17012: PPUSH
17013: LD_STRING DH-Lab-2
17015: PPUSH
17016: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
17020: LD_STRING M1-drugsLab-out
17022: PPUSH
17023: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
17027: LD_INT 162
17029: PPUSH
17030: CALL 20160 0 1
// end ; end else
17034: GO 17048
// Say ( Heike , DH-Locked ) ;
17036: LD_EXP 44
17040: PPUSH
17041: LD_STRING DH-Locked
17043: PPUSH
17044: CALL_OW 88
// end ; ruFac :
17048: GO 18481
17050: LD_INT 61
17052: DOUBLE
17053: EQUAL
17054: IFTRUE 17058
17056: GO 17168
17058: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
17059: LD_EXP 51
17063: PPUSH
17064: CALL_OW 302
17068: PUSH
17069: LD_EXP 51
17073: PUSH
17074: LD_EXP 14
17078: IN
17079: NOT
17080: AND
17081: IFFALSE 17162
// begin Say ( Heike , DH-Krastyo-1 ) ;
17083: LD_EXP 44
17087: PPUSH
17088: LD_STRING DH-Krastyo-1
17090: PPUSH
17091: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
17095: LD_EXP 51
17099: PPUSH
17100: LD_STRING DMar-Krastyo-2
17102: PPUSH
17103: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
17107: LD_EXP 51
17111: PPUSH
17112: LD_STRING DMar-Krastyo-3
17114: PPUSH
17115: CALL_OW 88
// SetSide ( Markov , 2 ) ;
17119: LD_EXP 51
17123: PPUSH
17124: LD_INT 2
17126: PPUSH
17127: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
17131: LD_ADDR_EXP 14
17135: PUSH
17136: LD_EXP 14
17140: PPUSH
17141: LD_EXP 51
17145: PPUSH
17146: CALL 66083 0 2
17150: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
17151: LD_EXP 51
17155: PPUSH
17156: CALL_OW 122
// end else
17160: GO 17166
// SayHEmpty ( ) ;
17162: CALL 15592 0 0
// end ; ruBarKam :
17166: GO 18481
17168: LD_INT 109
17170: DOUBLE
17171: EQUAL
17172: IFTRUE 17176
17174: GO 17323
17176: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
17177: LD_EXP 48
17181: PPUSH
17182: CALL_OW 302
17186: PUSH
17187: LD_EXP 48
17191: PUSH
17192: LD_EXP 14
17196: IN
17197: NOT
17198: AND
17199: IFFALSE 17317
// begin Say ( Heike , DH-Kamil-1 ) ;
17201: LD_EXP 44
17205: PPUSH
17206: LD_STRING DH-Kamil-1
17208: PPUSH
17209: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
17213: LD_EXP 48
17217: PPUSH
17218: LD_STRING DKam-Kamil-2
17220: PPUSH
17221: CALL_OW 88
// if IsOk ( Sophia ) then
17225: LD_EXP 50
17229: PPUSH
17230: CALL_OW 302
17234: IFFALSE 17274
// if Sophia in heikeSquad then
17236: LD_EXP 50
17240: PUSH
17241: LD_EXP 14
17245: IN
17246: IFFALSE 17262
// Say ( Kamil , DKam-Kamil-a-3 ) else
17248: LD_EXP 48
17252: PPUSH
17253: LD_STRING DKam-Kamil-a-3
17255: PPUSH
17256: CALL_OW 88
17260: GO 17274
// Say ( Kamil , DKam-Kamil-3 ) ;
17262: LD_EXP 48
17266: PPUSH
17267: LD_STRING DKam-Kamil-3
17269: PPUSH
17270: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
17274: LD_EXP 48
17278: PPUSH
17279: LD_INT 2
17281: PPUSH
17282: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
17286: LD_ADDR_EXP 14
17290: PUSH
17291: LD_EXP 14
17295: PPUSH
17296: LD_EXP 48
17300: PPUSH
17301: CALL 66083 0 2
17305: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
17306: LD_EXP 48
17310: PPUSH
17311: CALL_OW 122
// end else
17315: GO 17321
// SayHEmpty ( ) ;
17317: CALL 15592 0 0
// end ; ruOutpost1 :
17321: GO 18481
17323: LD_INT 169
17325: DOUBLE
17326: EQUAL
17327: IFTRUE 17331
17329: GO 17568
17331: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
17332: LD_EXP 53
17336: PPUSH
17337: CALL_OW 302
17341: PUSH
17342: LD_EXP 53
17346: PUSH
17347: LD_EXP 14
17351: IN
17352: NOT
17353: AND
17354: IFFALSE 17562
// begin if hasMethanol then
17356: LD_EXP 13
17360: IFFALSE 17491
// begin Say ( Heike , DH-Kurt-1 ) ;
17362: LD_EXP 44
17366: PPUSH
17367: LD_STRING DH-Kurt-1
17369: PPUSH
17370: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17374: LD_EXP 53
17378: PPUSH
17379: LD_STRING DKs-Kurt-2
17381: PPUSH
17382: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
17386: LD_EXP 45
17390: PPUSH
17391: LD_INT 169
17393: PPUSH
17394: CALL_OW 296
17398: PUSH
17399: LD_INT 10
17401: LESS
17402: PUSH
17403: LD_EXP 45
17407: PUSH
17408: LD_EXP 14
17412: IN
17413: AND
17414: IFFALSE 17489
// begin ComMoveXY ( Givi , 100 , 37 ) ;
17416: LD_EXP 45
17420: PPUSH
17421: LD_INT 100
17423: PPUSH
17424: LD_INT 37
17426: PPUSH
17427: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
17431: LD_EXP 45
17435: PPUSH
17436: LD_INT 169
17438: PPUSH
17439: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
17443: LD_INT 35
17445: PPUSH
17446: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
17450: LD_EXP 45
17454: PPUSH
17455: LD_INT 169
17457: PPUSH
17458: CALL_OW 296
17462: PUSH
17463: LD_INT 7
17465: LESS
17466: IFFALSE 17443
// Say ( Givi , DG-Kurt-3 ) ;
17468: LD_EXP 45
17472: PPUSH
17473: LD_STRING DG-Kurt-3
17475: PPUSH
17476: CALL_OW 88
// ComStop ( Givi ) ;
17480: LD_EXP 45
17484: PPUSH
17485: CALL_OW 141
// end ; end else
17489: GO 17519
// begin Say ( Heike , DH-Kurt-1 ) ;
17491: LD_EXP 44
17495: PPUSH
17496: LD_STRING DH-Kurt-1
17498: PPUSH
17499: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17503: LD_EXP 53
17507: PPUSH
17508: LD_STRING DKs-Kurt-2
17510: PPUSH
17511: CALL_OW 88
// SpawnAdditionalRuGuards ;
17515: CALL 3584 0 0
// end ; SetSide ( Kurt , 2 ) ;
17519: LD_EXP 53
17523: PPUSH
17524: LD_INT 2
17526: PPUSH
17527: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
17531: LD_ADDR_EXP 14
17535: PUSH
17536: LD_EXP 14
17540: PPUSH
17541: LD_EXP 53
17545: PPUSH
17546: CALL 66083 0 2
17550: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
17551: LD_EXP 53
17555: PPUSH
17556: CALL_OW 122
// end else
17560: GO 17566
// SayHEmpty ( ) ;
17562: CALL 15592 0 0
// end ; ruOutpostBar :
17566: GO 18481
17568: LD_INT 13
17570: DOUBLE
17571: EQUAL
17572: IFTRUE 17576
17574: GO 17622
17576: POP
// begin if not hasGuardPatrolPlan then
17577: LD_EXP 18
17581: NOT
17582: IFFALSE 17616
// begin Say ( Heike , DH-PatrolPlan ) ;
17584: LD_EXP 44
17588: PPUSH
17589: LD_STRING DH-PatrolPlan
17591: PPUSH
17592: CALL_OW 88
// hasGuardPatrolPlan := true ;
17596: LD_ADDR_EXP 18
17600: PUSH
17601: LD_INT 1
17603: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
17604: LD_INT 6
17606: PPUSH
17607: LD_INT 2
17609: PPUSH
17610: CALL_OW 343
// end else
17614: GO 17620
// SayHEmpty ( ) ;
17616: CALL 15592 0 0
// end ; ruKaiaBar :
17620: GO 18481
17622: LD_INT 147
17624: DOUBLE
17625: EQUAL
17626: IFTRUE 17630
17628: GO 17777
17630: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
17631: LD_EXP 49
17635: PPUSH
17636: CALL_OW 302
17640: PUSH
17641: LD_EXP 49
17645: PUSH
17646: LD_EXP 14
17650: IN
17651: NOT
17652: AND
17653: IFFALSE 17775
// begin Say ( Heike , DH-Kaia-1 ) ;
17655: LD_EXP 44
17659: PPUSH
17660: LD_STRING DH-Kaia-1
17662: PPUSH
17663: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
17667: LD_EXP 49
17671: PPUSH
17672: LD_STRING DK-Kaia-2
17674: PPUSH
17675: CALL_OW 88
// if hasSniperRifle then
17679: LD_EXP 11
17683: IFFALSE 17734
// begin if IsOk ( Markov ) then
17685: LD_EXP 51
17689: PPUSH
17690: CALL_OW 302
17694: IFFALSE 17710
// Say ( Kaia , DK-Kaia-3 ) else
17696: LD_EXP 49
17700: PPUSH
17701: LD_STRING DK-Kaia-3
17703: PPUSH
17704: CALL_OW 88
17708: GO 17722
// Say ( Kaia , DK-Kaia-a-3 ) ;
17710: LD_EXP 49
17714: PPUSH
17715: LD_STRING DK-Kaia-a-3
17717: PPUSH
17718: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
17722: LD_EXP 44
17726: PPUSH
17727: LD_STRING DH-Kaia-4
17729: PPUSH
17730: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
17734: LD_EXP 49
17738: PPUSH
17739: LD_INT 2
17741: PPUSH
17742: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
17746: LD_ADDR_EXP 14
17750: PUSH
17751: LD_EXP 14
17755: PPUSH
17756: LD_EXP 49
17760: PPUSH
17761: CALL 66083 0 2
17765: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
17766: LD_EXP 49
17770: PPUSH
17771: CALL_OW 122
// end ; end ; ruWeaponsBar :
17775: GO 18481
17777: LD_INT 137
17779: DOUBLE
17780: EQUAL
17781: IFTRUE 17785
17783: GO 18480
17785: POP
// begin if hasWeapons then
17786: LD_EXP 19
17790: IFFALSE 18466
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
17792: LD_ADDR_EXP 16
17796: PUSH
17797: LD_EXP 16
17801: PUSH
17802: LD_INT 137
17804: DIFF
17805: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
17806: LD_ADDR_VAR 0 4
17810: PUSH
17811: LD_EXP 14
17815: PPUSH
17816: LD_INT 91
17818: PUSH
17819: LD_EXP 44
17823: PUSH
17824: LD_INT 8
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: LIST
17831: PPUSH
17832: CALL_OW 72
17836: ST_TO_ADDR
// if not heikeSquad or not tmp then
17837: LD_EXP 14
17841: NOT
17842: PUSH
17843: LD_VAR 0 4
17847: NOT
17848: OR
17849: IFFALSE 17865
// Say ( Heike , DH-Weapons-Alone ) else
17851: LD_EXP 44
17855: PPUSH
17856: LD_STRING DH-Weapons-Alone
17858: PPUSH
17859: CALL_OW 88
17863: GO 18464
// begin if not firstArmouryDialog then
17865: LD_EXP 39
17869: NOT
17870: IFFALSE 17929
// begin Say ( Heike , DH-Weapons-1 ) ;
17872: LD_EXP 44
17876: PPUSH
17877: LD_STRING DH-Weapons-1
17879: PPUSH
17880: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
17884: LD_EXP 44
17888: PPUSH
17889: LD_STRING DH-Weapons-2
17891: PPUSH
17892: CALL_OW 88
// Query ( Weapons ) ;
17896: LD_STRING Weapons
17898: PPUSH
17899: CALL_OW 97
// SetAreaMapShow ( weaponariesArea , 1 ) ;
17903: LD_INT 65
17905: PPUSH
17906: LD_INT 1
17908: PPUSH
17909: CALL_OW 424
// canEquipWeapons := true ;
17913: LD_ADDR_EXP 41
17917: PUSH
17918: LD_INT 1
17920: ST_TO_ADDR
// firstArmouryDialog := true ;
17921: LD_ADDR_EXP 39
17925: PUSH
17926: LD_INT 1
17928: ST_TO_ADDR
// end ; if hasRevolver and Kaia in tmp and GetClass ( Kaia ) <> class_revolver then
17929: LD_EXP 8
17933: PUSH
17934: LD_EXP 49
17938: PUSH
17939: LD_VAR 0 4
17943: IN
17944: AND
17945: PUSH
17946: LD_EXP 49
17950: PPUSH
17951: CALL_OW 257
17955: PUSH
17956: LD_INT 34
17958: NONEQUAL
17959: AND
17960: IFFALSE 18106
// begin SetSide ( Kaia , 5 ) ;
17962: LD_EXP 49
17966: PPUSH
17967: LD_INT 5
17969: PPUSH
17970: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
17974: LD_EXP 49
17978: PPUSH
17979: LD_INT 137
17981: PPUSH
17982: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17986: LD_INT 35
17988: PPUSH
17989: CALL_OW 67
// until IsInUnit ( Kaia ) ;
17993: LD_EXP 49
17997: PPUSH
17998: CALL_OW 310
18002: IFFALSE 17986
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
18004: LD_EXP 44
18008: PPUSH
18009: LD_STRING DH-Kaia-Revolver-2
18011: PPUSH
18012: CALL_OW 88
// SetClassKaiaRevolver ;
18016: CALL 1761 0 0
// hasRevolver := false ;
18020: LD_ADDR_EXP 8
18024: PUSH
18025: LD_INT 0
18027: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
18028: LD_EXP 49
18032: PPUSH
18033: LD_INT 2
18035: PPUSH
18036: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
18040: LD_EXP 49
18044: PPUSH
18045: CALL_OW 122
// if GetClass ( Kaia ) = class_hunter and Mike in heikeSquad and GetSide ( Mike ) = 2 then
18049: LD_EXP 49
18053: PPUSH
18054: CALL_OW 257
18058: PUSH
18059: LD_INT 32
18061: EQUAL
18062: PUSH
18063: LD_EXP 46
18067: PUSH
18068: LD_EXP 14
18072: IN
18073: AND
18074: PUSH
18075: LD_EXP 46
18079: PPUSH
18080: CALL_OW 255
18084: PUSH
18085: LD_INT 2
18087: EQUAL
18088: AND
18089: IFFALSE 18106
// begin giveSniperRifleToMike := true ;
18091: LD_ADDR_EXP 42
18095: PUSH
18096: LD_INT 1
18098: ST_TO_ADDR
// Query ( QSniperMike ) ;
18099: LD_STRING QSniperMike
18101: PPUSH
18102: CALL_OW 97
// end ; end ; if Givi in tmp and GetClass ( Givi ) = class_prison then
18106: LD_EXP 45
18110: PUSH
18111: LD_VAR 0 4
18115: IN
18116: PUSH
18117: LD_EXP 45
18121: PPUSH
18122: CALL_OW 257
18126: PUSH
18127: LD_INT 33
18129: EQUAL
18130: AND
18131: IFFALSE 18272
// begin SetSide ( Givi , 5 ) ;
18133: LD_EXP 45
18137: PPUSH
18138: LD_INT 5
18140: PPUSH
18141: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
18145: LD_EXP 45
18149: PPUSH
18150: LD_INT 137
18152: PPUSH
18153: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18157: LD_INT 35
18159: PPUSH
18160: CALL_OW 67
// until IsInUnit ( Givi ) ;
18164: LD_EXP 45
18168: PPUSH
18169: CALL_OW 310
18173: IFFALSE 18157
// Say ( Givi , DG-Weapons-3 ) ;
18175: LD_EXP 45
18179: PPUSH
18180: LD_STRING DG-Weapons-3
18182: PPUSH
18183: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
18187: LD_EXP 44
18191: PPUSH
18192: LD_STRING DH-Weapons-4
18194: PPUSH
18195: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
18199: LD_EXP 45
18203: PPUSH
18204: LD_STRING DG-Weapons-5
18206: PPUSH
18207: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
18211: LD_EXP 45
18215: PPUSH
18216: LD_INT 11
18218: PPUSH
18219: CALL_OW 336
// ComExitBuilding ( Givi ) ;
18223: LD_EXP 45
18227: PPUSH
18228: CALL_OW 122
// SetSide ( Givi , 2 ) ;
18232: LD_EXP 45
18236: PPUSH
18237: LD_INT 2
18239: PPUSH
18240: CALL_OW 235
// if hasRevolver then
18244: LD_EXP 8
18248: IFFALSE 18270
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18250: LD_EXP 44
18254: PPUSH
18255: LD_STRING DH-Kaia-Revolver-1
18257: PPUSH
18258: CALL_OW 88
// heikeHasRevolver := true ;
18262: LD_ADDR_EXP 20
18266: PUSH
18267: LD_INT 1
18269: ST_TO_ADDR
// end ; end else
18270: GO 18464
// if Kamil in tmp and GetClass ( Kamil ) = class_prison then
18272: LD_EXP 48
18276: PUSH
18277: LD_VAR 0 4
18281: IN
18282: PUSH
18283: LD_EXP 48
18287: PPUSH
18288: CALL_OW 257
18292: PUSH
18293: LD_INT 33
18295: EQUAL
18296: AND
18297: IFFALSE 18426
// begin SetSide ( Kamil , 5 ) ;
18299: LD_EXP 48
18303: PPUSH
18304: LD_INT 5
18306: PPUSH
18307: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
18311: LD_EXP 48
18315: PPUSH
18316: LD_INT 137
18318: PPUSH
18319: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18323: LD_INT 35
18325: PPUSH
18326: CALL_OW 67
// until IsInUnit ( Kamil ) ;
18330: LD_EXP 48
18334: PPUSH
18335: CALL_OW 310
18339: IFFALSE 18323
// Say ( Kamil , DKam-Weapons-a-3 ) ;
18341: LD_EXP 48
18345: PPUSH
18346: LD_STRING DKam-Weapons-a-3
18348: PPUSH
18349: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
18353: LD_EXP 44
18357: PPUSH
18358: LD_STRING DH-Weapons-a-4
18360: PPUSH
18361: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
18365: LD_EXP 48
18369: PPUSH
18370: LD_INT 11
18372: PPUSH
18373: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
18377: LD_EXP 48
18381: PPUSH
18382: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
18386: LD_EXP 48
18390: PPUSH
18391: LD_INT 2
18393: PPUSH
18394: CALL_OW 235
// if hasRevolver then
18398: LD_EXP 8
18402: IFFALSE 18424
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18404: LD_EXP 44
18408: PPUSH
18409: LD_STRING DH-Kaia-Revolver-1
18411: PPUSH
18412: CALL_OW 88
// heikeHasRevolver := true ;
18416: LD_ADDR_EXP 20
18420: PUSH
18421: LD_INT 1
18423: ST_TO_ADDR
// end ; end else
18424: GO 18464
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
18426: LD_EXP 44
18430: PPUSH
18431: LD_STRING DH-Weapons-Alone-2
18433: PPUSH
18434: CALL_OW 88
// if hasRevolver then
18438: LD_EXP 8
18442: IFFALSE 18464
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
18444: LD_EXP 44
18448: PPUSH
18449: LD_STRING DH-Kaia-Revolver-1a
18451: PPUSH
18452: CALL_OW 88
// heikeHasRevolver := true ;
18456: LD_ADDR_EXP 20
18460: PUSH
18461: LD_INT 1
18463: ST_TO_ADDR
// end ; end ; end ; end else
18464: GO 18478
// Say ( Heike , DH-Locked ) ;
18466: LD_EXP 44
18470: PPUSH
18471: LD_STRING DH-Locked
18473: PPUSH
18474: CALL_OW 88
// end ; end ;
18478: GO 18481
18480: POP
// SetSide ( building , 3 ) ;
18481: LD_VAR 0 1
18485: PPUSH
18486: LD_INT 3
18488: PPUSH
18489: CALL_OW 235
// UnitsBlockingEntrance ( building ) ;
18493: LD_VAR 0 1
18497: PPUSH
18498: CALL 19615 0 1
// wait ( 0 0$0.3 ) ;
18502: LD_INT 10
18504: PPUSH
18505: CALL_OW 67
// ComExitBuilding ( Heike ) ;
18509: LD_EXP 44
18513: PPUSH
18514: CALL_OW 122
// SetSide ( Heike , 2 ) ;
18518: LD_EXP 44
18522: PPUSH
18523: LD_INT 2
18525: PPUSH
18526: CALL_OW 235
// InGameOff ;
18530: CALL_OW 9
// end ;
18534: LD_VAR 0 2
18538: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
18539: LD_EXP 30
18543: NOT
18544: PUSH
18545: LD_EXP 17
18549: NOT
18550: AND
18551: PUSH
18552: LD_INT 22
18554: PUSH
18555: LD_INT 5
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 21
18564: PUSH
18565: LD_INT 1
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PPUSH
18576: CALL_OW 69
18580: PUSH
18581: LD_INT 0
18583: EQUAL
18584: AND
18585: PUSH
18586: LD_INT 22
18588: PUSH
18589: LD_INT 4
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 21
18598: PUSH
18599: LD_INT 1
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PPUSH
18610: CALL_OW 69
18614: PUSH
18615: LD_INT 0
18617: EQUAL
18618: PUSH
18619: LD_EXP 25
18623: AND
18624: PUSH
18625: LD_EXP 25
18629: NOT
18630: OR
18631: AND
18632: IFFALSE 18664
18634: GO 18636
18636: DISABLE
// begin DialogueOn ;
18637: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
18641: LD_EXP 44
18645: PPUSH
18646: LD_STRING DH-Alarm-2
18648: PPUSH
18649: CALL_OW 88
// DialogueOff ;
18653: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
18657: LD_STRING M1-people-out
18659: PPUSH
18660: CALL_OW 337
// end ;
18664: END
// every 0 0$2 trigger GetSide ( Mike ) = 2 and Mike in heikeSquad and GetDistUnits ( Heike , Mike ) < 6 and not hasMuchin and giveSniperRifleToMike marked gameStartEvent do
18665: LD_EXP 46
18669: PPUSH
18670: CALL_OW 255
18674: PUSH
18675: LD_INT 2
18677: EQUAL
18678: PUSH
18679: LD_EXP 46
18683: PUSH
18684: LD_EXP 14
18688: IN
18689: AND
18690: PUSH
18691: LD_EXP 44
18695: PPUSH
18696: LD_EXP 46
18700: PPUSH
18701: CALL_OW 296
18705: PUSH
18706: LD_INT 6
18708: LESS
18709: AND
18710: PUSH
18711: LD_EXP 30
18715: NOT
18716: AND
18717: PUSH
18718: LD_EXP 42
18722: AND
18723: IFFALSE 18740
18725: GO 18727
18727: DISABLE
// SetClass ( Mike , class_hunter ) ;
18728: LD_EXP 46
18732: PPUSH
18733: LD_INT 32
18735: PPUSH
18736: CALL_OW 336
18740: END
// every 0 0$5 trigger canEquipWeapons and weaponsAmount and GetSide ( ruWeaponsBar ) = 3 and UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) and not GetAttitude ( 2 , 3 ) = att_enemy and not GetDistUnits ( ruDisturb , ruWeaponsBar ) < 12 marked gameStartEvent do var i , tmp ;
18741: LD_EXP 41
18745: PUSH
18746: LD_EXP 40
18750: AND
18751: PUSH
18752: LD_INT 137
18754: PPUSH
18755: CALL_OW 255
18759: PUSH
18760: LD_INT 3
18762: EQUAL
18763: AND
18764: PUSH
18765: LD_EXP 14
18769: PPUSH
18770: LD_INT 95
18772: PUSH
18773: LD_INT 65
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 22
18782: PUSH
18783: LD_INT 2
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 25
18792: PUSH
18793: LD_INT 33
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: LIST
18804: PPUSH
18805: CALL_OW 72
18809: AND
18810: PUSH
18811: LD_INT 2
18813: PPUSH
18814: LD_INT 3
18816: PPUSH
18817: CALL_OW 81
18821: PUSH
18822: LD_INT 2
18824: EQUAL
18825: NOT
18826: AND
18827: PUSH
18828: LD_EXP 64
18832: PPUSH
18833: LD_INT 137
18835: PPUSH
18836: CALL_OW 296
18840: PUSH
18841: LD_INT 12
18843: LESS
18844: NOT
18845: AND
18846: IFFALSE 19100
18848: GO 18850
18850: DISABLE
18851: LD_INT 0
18853: PPUSH
18854: PPUSH
// begin enable ;
18855: ENABLE
// tmp := UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) ;
18856: LD_ADDR_VAR 0 2
18860: PUSH
18861: LD_EXP 14
18865: PPUSH
18866: LD_INT 95
18868: PUSH
18869: LD_INT 65
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 22
18878: PUSH
18879: LD_INT 2
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 25
18888: PUSH
18889: LD_INT 33
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: LIST
18900: PPUSH
18901: CALL_OW 72
18905: ST_TO_ADDR
// if Query ( QWeapons ) = 1 then
18906: LD_STRING QWeapons
18908: PPUSH
18909: CALL_OW 97
18913: PUSH
18914: LD_INT 1
18916: EQUAL
18917: IFFALSE 19100
// begin for i in tmp do
18919: LD_ADDR_VAR 0 1
18923: PUSH
18924: LD_VAR 0 2
18928: PUSH
18929: FOR_IN
18930: IFFALSE 19098
// begin if UnitsInside ( ruWeaponsBar ) = 6 then
18932: LD_INT 137
18934: PPUSH
18935: CALL_OW 313
18939: PUSH
18940: LD_INT 6
18942: EQUAL
18943: IFFALSE 18947
// continue ;
18945: GO 18929
// SetSide ( i , 3 ) ;
18947: LD_VAR 0 1
18951: PPUSH
18952: LD_INT 3
18954: PPUSH
18955: CALL_OW 235
// ComEnterUnit ( i , ruWeaponsBar ) ;
18959: LD_VAR 0 1
18963: PPUSH
18964: LD_INT 137
18966: PPUSH
18967: CALL_OW 120
// weaponsAmount := Dec ( weaponsAmount ) ;
18971: LD_ADDR_EXP 40
18975: PUSH
18976: LD_EXP 40
18980: PPUSH
18981: CALL 67466 0 1
18985: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
18986: LD_INT 10
18988: PPUSH
18989: CALL_OW 67
// until IsInUnit ( i ) ;
18993: LD_VAR 0 1
18997: PPUSH
18998: CALL_OW 310
19002: IFFALSE 18986
// SetClass ( i , class_soldier ) ;
19004: LD_VAR 0 1
19008: PPUSH
19009: LD_INT 1
19011: PPUSH
19012: CALL_OW 336
// repeat ComExitBuilding ( i ) ;
19016: LD_VAR 0 1
19020: PPUSH
19021: CALL_OW 122
// wait ( 0 0$1 ) ;
19025: LD_INT 35
19027: PPUSH
19028: CALL_OW 67
// until not IsInUnit ( i ) ;
19032: LD_VAR 0 1
19036: PPUSH
19037: CALL_OW 310
19041: NOT
19042: IFFALSE 19016
// SetSide ( i , 2 ) ;
19044: LD_VAR 0 1
19048: PPUSH
19049: LD_INT 2
19051: PPUSH
19052: CALL_OW 235
// AddComMoveXY ( i , 191 , 126 ) ;
19056: LD_VAR 0 1
19060: PPUSH
19061: LD_INT 191
19063: PPUSH
19064: LD_INT 126
19066: PPUSH
19067: CALL_OW 171
// if weaponsAmount = 0 then
19071: LD_EXP 40
19075: PUSH
19076: LD_INT 0
19078: EQUAL
19079: IFFALSE 19096
// begin SetAreaMapShow ( weaponariesArea , 0 ) ;
19081: LD_INT 65
19083: PPUSH
19084: LD_INT 0
19086: PPUSH
19087: CALL_OW 424
// disable ;
19091: DISABLE
// exit ;
19092: POP
19093: POP
19094: GO 19100
// end ; end ;
19096: GO 18929
19098: POP
19099: POP
// end ; end ; end_of_file
19100: PPOPN 2
19102: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
19103: LD_VAR 0 1
19107: PUSH
19108: LD_INT 3
19110: DOUBLE
19111: EQUAL
19112: IFTRUE 19116
19114: GO 19146
19116: POP
// begin repeat wait ( 0 0$1 ) ;
19117: LD_INT 35
19119: PPUSH
19120: CALL_OW 67
// CenterOnUnits ( Heike ) ;
19124: LD_EXP 44
19128: PPUSH
19129: CALL_OW 85
// until IsDying ( Heike ) ;
19133: LD_EXP 44
19137: PPUSH
19138: CALL_OW 303
19142: IFFALSE 19117
// end ; end ;
19144: GO 19147
19146: POP
// end ;
19147: PPOPN 1
19149: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
19150: LD_OWVAR 59
19154: IFFALSE 19158
// exit ;
19156: GO 19232
// if showPlaceEvent then
19158: LD_INT 4
19160: IFFALSE 19232
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
19162: LD_VAR 0 2
19166: PPUSH
19167: LD_VAR 0 3
19171: PPUSH
19172: LD_INT 2
19174: PPUSH
19175: LD_INT 6
19177: NEG
19178: PPUSH
19179: CALL_OW 330
// CenterOnXY ( x , y ) ;
19183: LD_VAR 0 2
19187: PPUSH
19188: LD_VAR 0 3
19192: PPUSH
19193: CALL_OW 84
// wait ( time ) ;
19197: LD_VAR 0 4
19201: PPUSH
19202: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
19206: LD_EXP 44
19210: PPUSH
19211: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
19215: LD_VAR 0 2
19219: PPUSH
19220: LD_VAR 0 3
19224: PPUSH
19225: LD_INT 2
19227: PPUSH
19228: CALL_OW 331
// end ; end ;
19232: PPOPN 7
19234: END
// on UnitDestroyed ( un ) do var x , y ;
19235: LD_INT 0
19237: PPUSH
19238: PPUSH
// begin if un = Heike and hasNormalScene then
19239: LD_VAR 0 1
19243: PUSH
19244: LD_EXP 44
19248: EQUAL
19249: PUSH
19250: LD_EXP 5
19254: AND
19255: IFFALSE 19279
// if loseCounter then
19257: LD_EXP 32
19261: IFFALSE 19272
// YouLost ( HeikeNoSurrender ) else
19263: LD_STRING HeikeNoSurrender
19265: PPUSH
19266: CALL_OW 104
19270: GO 19279
// YouLost ( Heike ) ;
19272: LD_STRING Heike
19274: PPUSH
19275: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
19279: LD_VAR 0 1
19283: PPUSH
19284: CALL_OW 255
19288: PUSH
19289: LD_INT 2
19291: EQUAL
19292: PUSH
19293: LD_VAR 0 1
19297: PPUSH
19298: CALL_OW 247
19302: PUSH
19303: LD_INT 1
19305: EQUAL
19306: AND
19307: IFFALSE 19324
// loseCounter := Inc ( loseCounter ) ;
19309: LD_ADDR_EXP 32
19313: PUSH
19314: LD_EXP 32
19318: PPUSH
19319: CALL 67444 0 1
19323: ST_TO_ADDR
// if GetSide ( un ) = 6 and not isAlarm and un in ruPatrol then
19324: LD_VAR 0 1
19328: PPUSH
19329: CALL_OW 255
19333: PUSH
19334: LD_INT 6
19336: EQUAL
19337: PUSH
19338: LD_EXP 17
19342: NOT
19343: AND
19344: PUSH
19345: LD_VAR 0 1
19349: PUSH
19350: LD_EXP 69
19354: IN
19355: AND
19356: IFFALSE 19460
// begin x := GetX ( un ) ;
19358: LD_ADDR_VAR 0 2
19362: PUSH
19363: LD_VAR 0 1
19367: PPUSH
19368: CALL_OW 250
19372: ST_TO_ADDR
// y := GetY ( un ) ;
19373: LD_ADDR_VAR 0 3
19377: PUSH
19378: LD_VAR 0 1
19382: PPUSH
19383: CALL_OW 251
19387: ST_TO_ADDR
// ruKilledHex := Join ( ruKilledHex , [ x , y ] ) ;
19388: LD_ADDR_EXP 43
19392: PUSH
19393: LD_EXP 43
19397: PPUSH
19398: LD_VAR 0 2
19402: PUSH
19403: LD_VAR 0 3
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PPUSH
19412: CALL 66083 0 2
19416: ST_TO_ADDR
// ruPatrol := ruPatrol diff un ;
19417: LD_ADDR_EXP 69
19421: PUSH
19422: LD_EXP 69
19426: PUSH
19427: LD_VAR 0 1
19431: DIFF
19432: ST_TO_ADDR
// if SeeXY ( 3 , x , y ) then
19433: LD_INT 3
19435: PPUSH
19436: LD_VAR 0 2
19440: PPUSH
19441: LD_VAR 0 3
19445: PPUSH
19446: CALL_OW 293
19450: IFFALSE 19460
// isAlarm := true ;
19452: LD_ADDR_EXP 17
19456: PUSH
19457: LD_INT 1
19459: ST_TO_ADDR
// end ; end ;
19460: PPOPN 3
19462: END
// on Contact ( s1 , s2 ) do begin if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
19463: LD_VAR 0 1
19467: PUSH
19468: LD_INT 2
19470: EQUAL
19471: PUSH
19472: LD_VAR 0 2
19476: PUSH
19477: LD_INT 3
19479: EQUAL
19480: AND
19481: PUSH
19482: LD_VAR 0 1
19486: PUSH
19487: LD_INT 3
19489: EQUAL
19490: PUSH
19491: LD_VAR 0 2
19495: PUSH
19496: LD_INT 2
19498: EQUAL
19499: AND
19500: OR
19501: IFFALSE 19511
// isAlarm := true ;
19503: LD_ADDR_EXP 17
19507: PUSH
19508: LD_INT 1
19510: ST_TO_ADDR
// end ; end_of_file
19511: PPOPN 2
19513: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
19514: LD_INT 0
19516: PPUSH
19517: PPUSH
19518: PPUSH
// u1 := IsInUnit ( unit1 ) ;
19519: LD_ADDR_VAR 0 4
19523: PUSH
19524: LD_VAR 0 1
19528: PPUSH
19529: CALL_OW 310
19533: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
19534: LD_ADDR_VAR 0 5
19538: PUSH
19539: LD_VAR 0 2
19543: PPUSH
19544: CALL_OW 310
19548: ST_TO_ADDR
// result := u1 and u1 = u2 ;
19549: LD_ADDR_VAR 0 3
19553: PUSH
19554: LD_VAR 0 4
19558: PUSH
19559: LD_VAR 0 4
19563: PUSH
19564: LD_VAR 0 5
19568: EQUAL
19569: AND
19570: ST_TO_ADDR
// end ;
19571: LD_VAR 0 3
19575: RET
// export function ShowPlace ( x , y , time ) ; begin
19576: LD_INT 0
19578: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
19579: LD_INT 4
19581: PPUSH
19582: LD_VAR 0 1
19586: PPUSH
19587: LD_VAR 0 2
19591: PPUSH
19592: LD_VAR 0 3
19596: PPUSH
19597: LD_INT 0
19599: PPUSH
19600: LD_INT 0
19602: PPUSH
19603: LD_INT 0
19605: PPUSH
19606: CALL_OW 595
// end ;
19610: LD_VAR 0 4
19614: RET
// export function UnitsBlockingEntrance ( building ) ; var i , x , y , d , entrance ; begin
19615: LD_INT 0
19617: PPUSH
19618: PPUSH
19619: PPUSH
19620: PPUSH
19621: PPUSH
19622: PPUSH
// if not IsOk ( building ) then
19623: LD_VAR 0 1
19627: PPUSH
19628: CALL_OW 302
19632: NOT
19633: IFFALSE 19637
// exit ;
19635: GO 19884
// x := GetX ( building ) ;
19637: LD_ADDR_VAR 0 4
19641: PUSH
19642: LD_VAR 0 1
19646: PPUSH
19647: CALL_OW 250
19651: ST_TO_ADDR
// y := GetY ( building ) ;
19652: LD_ADDR_VAR 0 5
19656: PUSH
19657: LD_VAR 0 1
19661: PPUSH
19662: CALL_OW 251
19666: ST_TO_ADDR
// d := GetDir ( building ) ;
19667: LD_ADDR_VAR 0 6
19671: PUSH
19672: LD_VAR 0 1
19676: PPUSH
19677: CALL_OW 254
19681: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
19682: LD_ADDR_VAR 0 7
19686: PUSH
19687: LD_VAR 0 4
19691: PPUSH
19692: LD_VAR 0 6
19696: PPUSH
19697: LD_INT 3
19699: PPUSH
19700: CALL_OW 272
19704: PUSH
19705: LD_VAR 0 5
19709: PPUSH
19710: LD_VAR 0 6
19714: PPUSH
19715: LD_INT 3
19717: PPUSH
19718: CALL_OW 273
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
19727: LD_VAR 0 7
19731: PUSH
19732: LD_INT 1
19734: ARRAY
19735: PPUSH
19736: LD_VAR 0 7
19740: PUSH
19741: LD_INT 2
19743: ARRAY
19744: PPUSH
19745: CALL_OW 488
19749: NOT
19750: IFFALSE 19754
// exit ;
19752: GO 19884
// result := FilterAllUnits ( [ [ f_distxy , x , y , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
19754: LD_ADDR_VAR 0 2
19758: PUSH
19759: LD_INT 92
19761: PUSH
19762: LD_VAR 0 4
19766: PUSH
19767: LD_VAR 0 5
19771: PUSH
19772: LD_INT 4
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 3
19783: PUSH
19784: LD_INT 54
19786: PUSH
19787: EMPTY
19788: LIST
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PPUSH
19798: CALL_OW 69
19802: ST_TO_ADDR
// if not result then
19803: LD_VAR 0 2
19807: NOT
19808: IFFALSE 19812
// exit ;
19810: GO 19884
// for i in result do
19812: LD_ADDR_VAR 0 3
19816: PUSH
19817: LD_VAR 0 2
19821: PUSH
19822: FOR_IN
19823: IFFALSE 19882
// ComMoveXY ( i , ShiftX ( GetX ( i ) , d , 3 ) , ShiftY ( GetY ( i ) , d , 3 ) ) ;
19825: LD_VAR 0 3
19829: PPUSH
19830: LD_VAR 0 3
19834: PPUSH
19835: CALL_OW 250
19839: PPUSH
19840: LD_VAR 0 6
19844: PPUSH
19845: LD_INT 3
19847: PPUSH
19848: CALL_OW 272
19852: PPUSH
19853: LD_VAR 0 3
19857: PPUSH
19858: CALL_OW 251
19862: PPUSH
19863: LD_VAR 0 6
19867: PPUSH
19868: LD_INT 3
19870: PPUSH
19871: CALL_OW 273
19875: PPUSH
19876: CALL_OW 111
19880: GO 19822
19882: POP
19883: POP
// end ;
19884: LD_VAR 0 2
19888: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
19889: LD_INT 0
19891: PPUSH
19892: PPUSH
19893: PPUSH
19894: PPUSH
19895: PPUSH
19896: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
19897: LD_VAR 0 1
19901: PPUSH
19902: CALL_OW 302
19906: NOT
19907: PUSH
19908: LD_VAR 0 2
19912: PPUSH
19913: CALL_OW 302
19917: NOT
19918: OR
19919: PUSH
19920: LD_VAR 0 2
19924: PPUSH
19925: CALL_OW 313
19929: PUSH
19930: LD_INT 6
19932: EQUAL
19933: OR
19934: IFFALSE 19938
// exit ;
19936: GO 20155
// btype := GetBType ( building ) ;
19938: LD_ADDR_VAR 0 8
19942: PUSH
19943: LD_VAR 0 2
19947: PPUSH
19948: CALL_OW 266
19952: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
19953: LD_VAR 0 8
19957: PUSH
19958: LD_INT 0
19960: PUSH
19961: LD_INT 1
19963: PUSH
19964: LD_INT 2
19966: PUSH
19967: LD_INT 4
19969: PUSH
19970: LD_INT 5
19972: PUSH
19973: LD_INT 3
19975: PUSH
19976: LD_INT 6
19978: PUSH
19979: LD_INT 7
19981: PUSH
19982: LD_INT 8
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: IN
19996: NOT
19997: IFFALSE 20001
// exit ;
19999: GO 20155
// x := GetX ( building ) ;
20001: LD_ADDR_VAR 0 4
20005: PUSH
20006: LD_VAR 0 2
20010: PPUSH
20011: CALL_OW 250
20015: ST_TO_ADDR
// y := GetY ( building ) ;
20016: LD_ADDR_VAR 0 5
20020: PUSH
20021: LD_VAR 0 2
20025: PPUSH
20026: CALL_OW 251
20030: ST_TO_ADDR
// d := GetDir ( building ) ;
20031: LD_ADDR_VAR 0 6
20035: PUSH
20036: LD_VAR 0 2
20040: PPUSH
20041: CALL_OW 254
20045: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
20046: LD_ADDR_VAR 0 7
20050: PUSH
20051: LD_VAR 0 4
20055: PPUSH
20056: LD_VAR 0 6
20060: PPUSH
20061: LD_INT 3
20063: PPUSH
20064: CALL_OW 272
20068: PUSH
20069: LD_VAR 0 5
20073: PPUSH
20074: LD_VAR 0 6
20078: PPUSH
20079: LD_INT 3
20081: PPUSH
20082: CALL_OW 273
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
20091: LD_VAR 0 7
20095: PUSH
20096: LD_INT 1
20098: ARRAY
20099: PPUSH
20100: LD_VAR 0 7
20104: PUSH
20105: LD_INT 2
20107: ARRAY
20108: PPUSH
20109: CALL_OW 488
20113: NOT
20114: IFFALSE 20118
// exit ;
20116: GO 20155
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
20118: LD_ADDR_VAR 0 3
20122: PUSH
20123: LD_VAR 0 1
20127: PPUSH
20128: LD_VAR 0 7
20132: PUSH
20133: LD_INT 1
20135: ARRAY
20136: PPUSH
20137: LD_VAR 0 7
20141: PUSH
20142: LD_INT 2
20144: ARRAY
20145: PPUSH
20146: CALL_OW 297
20150: PUSH
20151: LD_INT 4
20153: LESS
20154: ST_TO_ADDR
// end ;
20155: LD_VAR 0 3
20159: RET
// export function PlaceExplosives ( building ) ; begin
20160: LD_INT 0
20162: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
20163: LD_ADDR_EXP 29
20167: PUSH
20168: LD_EXP 29
20172: PPUSH
20173: LD_VAR 0 1
20177: PPUSH
20178: CALL 66083 0 2
20182: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
20183: LD_VAR 0 1
20187: PPUSH
20188: CALL_OW 250
20192: PPUSH
20193: LD_VAR 0 1
20197: PPUSH
20198: CALL_OW 251
20202: PPUSH
20203: LD_STRING PlantBomb
20205: PPUSH
20206: CALL_OW 366
// end ;
20210: LD_VAR 0 2
20214: RET
// export function CreateNature ; var i ; begin
20215: LD_INT 0
20217: PPUSH
20218: PPUSH
// PrepareFrog ;
20219: CALL 62573 0 0
// for i := 1 to 3 do
20223: LD_ADDR_VAR 0 2
20227: PUSH
20228: DOUBLE
20229: LD_INT 1
20231: DEC
20232: ST_TO_ADDR
20233: LD_INT 3
20235: PUSH
20236: FOR_TO
20237: IFFALSE 20256
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
20239: CALL_OW 44
20243: PPUSH
20244: LD_INT 24
20246: PPUSH
20247: LD_INT 0
20249: PPUSH
20250: CALL_OW 49
20254: GO 20236
20256: POP
20257: POP
// end ;
20258: LD_VAR 0 1
20262: RET
// export function MarkBuilding ( building , marker ) ; begin
20263: LD_INT 0
20265: PPUSH
// if marker then
20266: LD_VAR 0 2
20270: IFFALSE 20317
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
20272: LD_VAR 0 1
20276: PPUSH
20277: CALL_OW 250
20281: PPUSH
20282: LD_VAR 0 1
20286: PPUSH
20287: CALL_OW 251
20291: PPUSH
20292: LD_INT 2
20294: PPUSH
20295: LD_INT 3
20297: NEG
20298: PPUSH
20299: CALL_OW 330
// SetBName ( building , target ) ;
20303: LD_VAR 0 1
20307: PPUSH
20308: LD_STRING target
20310: PPUSH
20311: CALL_OW 500
// end else
20315: GO 20356
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
20317: LD_VAR 0 1
20321: PPUSH
20322: CALL_OW 250
20326: PPUSH
20327: LD_VAR 0 1
20331: PPUSH
20332: CALL_OW 251
20336: PPUSH
20337: LD_INT 2
20339: PPUSH
20340: CALL_OW 331
// SetBName ( building ,  ) ;
20344: LD_VAR 0 1
20348: PPUSH
20349: LD_STRING 
20351: PPUSH
20352: CALL_OW 500
// end ; end ; end_of_file
20356: LD_VAR 0 3
20360: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
20361: LD_INT 0
20363: PPUSH
// lockerCodeValid := false ;
20364: LD_ADDR_EXP 70
20368: PUSH
20369: LD_INT 0
20371: ST_TO_ADDR
// if not step then
20372: LD_LOC 1
20376: NOT
20377: IFFALSE 20387
// step := 1 ;
20379: LD_ADDR_LOC 1
20383: PUSH
20384: LD_INT 1
20386: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
20387: LD_STRING HEscape
20389: PUSH
20390: LD_LOC 1
20394: STR
20395: PPUSH
20396: CALL_OW 97
20400: PUSH
20401: LD_INT 1
20403: DOUBLE
20404: EQUAL
20405: IFTRUE 20409
20407: GO 20416
20409: POP
// LockerMinigameSearch ; 2 :
20410: CALL 20449 0 0
20414: GO 20432
20416: LD_INT 2
20418: DOUBLE
20419: EQUAL
20420: IFTRUE 20424
20422: GO 20431
20424: POP
// LockerMinigameSetCode ; end ;
20425: CALL 20523 0 0
20429: GO 20432
20431: POP
// if lockerCodeValid then
20432: LD_EXP 70
20436: IFFALSE 20440
// exit ;
20438: GO 20444
// StartLockerMinigame ;
20440: CALL 20361 0 0
// end ;
20444: LD_VAR 0 1
20448: RET
// function LockerMinigameSearch ; begin
20449: LD_INT 0
20451: PPUSH
// if code then
20452: LD_LOC 2
20456: IFFALSE 20472
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
20458: LD_EXP 44
20462: PPUSH
20463: LD_STRING DH-Escape-3-Hint-0
20465: PPUSH
20466: CALL_OW 88
// exit ;
20470: GO 20518
// end ; Randomize ;
20472: CALL_OW 10
// code := rand ( 1 , 5 ) ;
20476: LD_ADDR_LOC 2
20480: PUSH
20481: LD_INT 1
20483: PPUSH
20484: LD_INT 5
20486: PPUSH
20487: CALL_OW 12
20491: ST_TO_ADDR
// step := 2 ;
20492: LD_ADDR_LOC 1
20496: PUSH
20497: LD_INT 2
20499: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
20500: LD_EXP 44
20504: PPUSH
20505: LD_STRING DH-Escape-3-Hint-
20507: PUSH
20508: LD_LOC 2
20512: STR
20513: PPUSH
20514: CALL_OW 88
// end ;
20518: LD_VAR 0 1
20522: RET
// function LockerMinigameSetCode ; begin
20523: LD_INT 0
20525: PPUSH
// if not code then
20526: LD_LOC 2
20530: NOT
20531: IFFALSE 20541
// code := 0 ;
20533: LD_ADDR_LOC 2
20537: PUSH
20538: LD_INT 0
20540: ST_TO_ADDR
// lockerBusy := true ;
20541: LD_ADDR_EXP 71
20545: PUSH
20546: LD_INT 1
20548: ST_TO_ADDR
// InGameOff ;
20549: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
20553: LD_STRING initLockerMinigame("
20555: PUSH
20556: LD_LOC 2
20560: STR
20561: PUSH
20562: LD_STRING ")
20564: STR
20565: PPUSH
20566: CALL_OW 559
// step := 3 ;
20570: LD_ADDR_LOC 1
20574: PUSH
20575: LD_INT 3
20577: ST_TO_ADDR
// repeat wait ( 1 ) ;
20578: LD_INT 1
20580: PPUSH
20581: CALL_OW 67
// until not lockerBusy ;
20585: LD_EXP 71
20589: NOT
20590: IFFALSE 20578
// InGameOn ;
20592: CALL_OW 8
// if not lockerCodeValid then
20596: LD_EXP 70
20600: NOT
20601: IFFALSE 20627
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
20603: LD_EXP 44
20607: PPUSH
20608: LD_STRING DH-Escape-3-Fail-
20610: PUSH
20611: LD_INT 1
20613: PPUSH
20614: LD_INT 2
20616: PPUSH
20617: CALL_OW 12
20621: STR
20622: PPUSH
20623: CALL_OW 88
// end ; end_of_file
20627: LD_VAR 0 1
20631: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
20632: LD_VAR 0 2
20636: PUSH
20637: LD_INT 102
20639: EQUAL
20640: IFFALSE 20662
// begin lockerBusy := false ;
20642: LD_ADDR_EXP 71
20646: PUSH
20647: LD_INT 0
20649: ST_TO_ADDR
// lockerCodeValid := p3 ;
20650: LD_ADDR_EXP 70
20654: PUSH
20655: LD_VAR 0 3
20659: ST_TO_ADDR
// end else
20660: GO 20716
// if p2 = 103 then
20662: LD_VAR 0 2
20666: PUSH
20667: LD_INT 103
20669: EQUAL
20670: IFFALSE 20682
// begin weatherBusy := false ;
20672: LD_ADDR_EXP 37
20676: PUSH
20677: LD_INT 0
20679: ST_TO_ADDR
// end else
20680: GO 20716
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
20682: LD_VAR 0 1
20686: PPUSH
20687: LD_VAR 0 2
20691: PPUSH
20692: LD_VAR 0 3
20696: PPUSH
20697: LD_VAR 0 4
20701: PPUSH
20702: LD_VAR 0 5
20706: PPUSH
20707: LD_VAR 0 6
20711: PPUSH
20712: CALL 70240 0 6
// end ;
20716: PPOPN 6
20718: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
20719: LD_STRING killGameMusic();
20721: PPUSH
20722: CALL_OW 559
// PlayOriginalMusic ;
20726: CALL 90346 0 0
// SOS_MapStart ( ) ;
20730: CALL 70144 0 0
// end ; end_of_file
20734: PPOPN 1
20736: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
20737: LD_EXP 17
20741: NOT
20742: PUSH
20743: LD_EXP 69
20747: AND
20748: IFFALSE 21328
20750: GO 20752
20752: DISABLE
20753: LD_INT 0
20755: PPUSH
20756: PPUSH
20757: PPUSH
20758: PPUSH
20759: PPUSH
// begin enable ;
20760: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
20761: LD_ADDR_VAR 0 3
20765: PUSH
20766: LD_INT 26
20768: PUSH
20769: LD_INT 27
20771: PUSH
20772: LD_INT 28
20774: PUSH
20775: LD_INT 29
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 30
20786: PUSH
20787: LD_INT 31
20789: PUSH
20790: LD_INT 32
20792: PUSH
20793: LD_INT 33
20795: PUSH
20796: LD_INT 34
20798: PUSH
20799: LD_INT 35
20801: PUSH
20802: LD_INT 36
20804: PUSH
20805: LD_INT 37
20807: PUSH
20808: LD_INT 38
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 39
20824: PUSH
20825: LD_INT 40
20827: PUSH
20828: LD_INT 41
20830: PUSH
20831: LD_INT 42
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 43
20842: PUSH
20843: LD_INT 44
20845: PUSH
20846: LD_INT 45
20848: PUSH
20849: LD_INT 46
20851: PUSH
20852: LD_INT 47
20854: PUSH
20855: LD_INT 46
20857: PUSH
20858: LD_INT 45
20860: PUSH
20861: LD_INT 44
20863: PUSH
20864: LD_INT 43
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: ST_TO_ADDR
// for i in ruPatrol do
20884: LD_ADDR_VAR 0 1
20888: PUSH
20889: LD_EXP 69
20893: PUSH
20894: FOR_IN
20895: IFFALSE 21326
// begin if not IsOk ( i ) then
20897: LD_VAR 0 1
20901: PPUSH
20902: CALL_OW 302
20906: NOT
20907: IFFALSE 20911
// continue ;
20909: GO 20894
// if Count ( ruKilledHex ) then
20911: LD_EXP 43
20915: PPUSH
20916: CALL 30750 0 1
20920: IFFALSE 20993
// for j in ruKilledHex do
20922: LD_ADDR_VAR 0 2
20926: PUSH
20927: LD_EXP 43
20931: PUSH
20932: FOR_IN
20933: IFFALSE 20991
// if GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) < 6 then
20935: LD_VAR 0 1
20939: PPUSH
20940: LD_VAR 0 2
20944: PUSH
20945: LD_INT 1
20947: ARRAY
20948: PPUSH
20949: LD_VAR 0 2
20953: PUSH
20954: LD_INT 2
20956: ARRAY
20957: PPUSH
20958: CALL_OW 297
20962: PUSH
20963: LD_INT 6
20965: LESS
20966: IFFALSE 20989
// begin Query ( QBody ) ;
20968: LD_STRING QBody
20970: PPUSH
20971: CALL_OW 97
// isAlarm := true ;
20975: LD_ADDR_EXP 17
20979: PUSH
20980: LD_INT 1
20982: ST_TO_ADDR
// exit ;
20983: POP
20984: POP
20985: POP
20986: POP
20987: GO 21328
// end ;
20989: GO 20932
20991: POP
20992: POP
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
20993: LD_ADDR_VAR 0 5
20997: PUSH
20998: LD_INT 22
21000: PUSH
21001: LD_INT 2
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 21
21010: PUSH
21011: LD_INT 1
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 91
21020: PUSH
21021: LD_VAR 0 1
21025: PUSH
21026: LD_INT 7
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: LIST
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: LIST
21038: PPUSH
21039: CALL_OW 69
21043: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
21044: LD_INT 2
21046: PPUSH
21047: LD_VAR 0 1
21051: PPUSH
21052: CALL_OW 292
21056: PUSH
21057: LD_VAR 0 5
21061: AND
21062: IFFALSE 21212
// begin if ( hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 ) or blockPatrolThread then
21064: LD_EXP 30
21068: PUSH
21069: LD_VAR 0 1
21073: PPUSH
21074: LD_EXP 64
21078: PPUSH
21079: CALL_OW 296
21083: PUSH
21084: LD_INT 16
21086: LESS
21087: AND
21088: PUSH
21089: LD_EXP 38
21093: OR
21094: IFFALSE 21098
// continue ;
21096: GO 20894
// for j in tmp do
21098: LD_ADDR_VAR 0 2
21102: PUSH
21103: LD_VAR 0 5
21107: PUSH
21108: FOR_IN
21109: IFFALSE 21170
// tmp := tmp union FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , j , 4 ] ] ) ;
21111: LD_ADDR_VAR 0 5
21115: PUSH
21116: LD_VAR 0 5
21120: PUSH
21121: LD_INT 22
21123: PUSH
21124: LD_INT 2
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 21
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 91
21143: PUSH
21144: LD_VAR 0 2
21148: PUSH
21149: LD_INT 4
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: LIST
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: LIST
21161: PPUSH
21162: CALL_OW 69
21166: UNION
21167: ST_TO_ADDR
21168: GO 21108
21170: POP
21171: POP
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
21172: LD_VAR 0 1
21176: PPUSH
21177: LD_VAR 0 5
21181: PPUSH
21182: LD_VAR 0 1
21186: PPUSH
21187: CALL_OW 74
21191: PPUSH
21192: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
21196: LD_VAR 0 1
21200: PPUSH
21201: LD_VAR 0 5
21205: PPUSH
21206: CALL 21331 0 2
// continue ;
21210: GO 20894
// end ; if HasTask ( i ) then
21212: LD_VAR 0 1
21216: PPUSH
21217: CALL_OW 314
21221: IFFALSE 21225
// continue ;
21223: GO 20894
// tag := GetTag ( i ) ;
21225: LD_ADDR_VAR 0 4
21229: PUSH
21230: LD_VAR 0 1
21234: PPUSH
21235: CALL_OW 110
21239: ST_TO_ADDR
// if not tag then
21240: LD_VAR 0 4
21244: NOT
21245: IFFALSE 21258
// begin ComHold ( i ) ;
21247: LD_VAR 0 1
21251: PPUSH
21252: CALL_OW 140
// continue ;
21256: GO 20894
// end ; for j := 1 to points [ tag ] do
21258: LD_ADDR_VAR 0 2
21262: PUSH
21263: DOUBLE
21264: LD_INT 1
21266: DEC
21267: ST_TO_ADDR
21268: LD_VAR 0 3
21272: PUSH
21273: LD_VAR 0 4
21277: ARRAY
21278: PUSH
21279: FOR_TO
21280: IFFALSE 21322
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
21282: LD_VAR 0 1
21286: PPUSH
21287: LD_VAR 0 3
21291: PUSH
21292: LD_VAR 0 4
21296: ARRAY
21297: PUSH
21298: LD_VAR 0 2
21302: ARRAY
21303: PPUSH
21304: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
21308: LD_VAR 0 1
21312: PPUSH
21313: LD_INT 70
21315: PPUSH
21316: CALL_OW 202
// end ;
21320: GO 21279
21322: POP
21323: POP
// end ;
21324: GO 20894
21326: POP
21327: POP
// end ;
21328: PPOPN 5
21330: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
21331: LD_INT 0
21333: PPUSH
21334: PPUSH
21335: PPUSH
// if UnitFilter ( units , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
21336: LD_VAR 0 2
21340: PPUSH
21341: LD_INT 2
21343: PUSH
21344: LD_INT 25
21346: PUSH
21347: LD_INT 1
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 25
21356: PUSH
21357: LD_INT 11
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 25
21366: PUSH
21367: LD_INT 34
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 25
21376: PUSH
21377: LD_INT 32
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: PUSH
21391: EMPTY
21392: LIST
21393: PPUSH
21394: CALL_OW 72
21398: IFFALSE 21511
// begin blockPatrolThread := true ;
21400: LD_ADDR_EXP 38
21404: PUSH
21405: LD_INT 1
21407: ST_TO_ADDR
// DialogueOn ;
21408: CALL_OW 6
// case GetSex ( guard ) of sex_male :
21412: LD_VAR 0 1
21416: PPUSH
21417: CALL_OW 258
21421: PUSH
21422: LD_INT 1
21424: DOUBLE
21425: EQUAL
21426: IFTRUE 21430
21428: GO 21445
21430: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
21431: LD_VAR 0 1
21435: PPUSH
21436: LD_STRING DRum-Fail-3
21438: PPUSH
21439: CALL_OW 88
21443: GO 21469
21445: LD_INT 2
21447: DOUBLE
21448: EQUAL
21449: IFTRUE 21453
21451: GO 21468
21453: POP
// Say ( guard , DRuf-Fail-3 ) ; end ;
21454: LD_VAR 0 1
21458: PPUSH
21459: LD_STRING DRuf-Fail-3
21461: PPUSH
21462: CALL_OW 88
21466: GO 21469
21468: POP
// DialogueOff ;
21469: CALL_OW 7
// wait ( 0 0$5 ) ;
21473: LD_INT 175
21475: PPUSH
21476: CALL_OW 67
// if IsOk ( guard ) then
21480: LD_VAR 0 1
21484: PPUSH
21485: CALL_OW 302
21489: IFFALSE 21501
// isAlarm := true else
21491: LD_ADDR_EXP 17
21495: PUSH
21496: LD_INT 1
21498: ST_TO_ADDR
21499: GO 21509
// blockPatrolThread := false ;
21501: LD_ADDR_EXP 38
21505: PUSH
21506: LD_INT 0
21508: ST_TO_ADDR
// exit ;
21509: GO 22512
// end ; if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
21511: LD_VAR 0 2
21515: PPUSH
21516: LD_INT 23
21518: PUSH
21519: LD_INT 3
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PPUSH
21526: CALL_OW 72
21530: PUSH
21531: LD_VAR 0 2
21535: PPUSH
21536: LD_INT 95
21538: PUSH
21539: LD_INT 61
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PPUSH
21546: CALL_OW 72
21550: OR
21551: IFFALSE 21555
// exit ;
21553: GO 22512
// DialogueOn ;
21555: CALL_OW 6
// blockPatrolThread := true ;
21559: LD_ADDR_EXP 38
21563: PUSH
21564: LD_INT 1
21566: ST_TO_ADDR
// CenterNowOnUnits ( guard ) ;
21567: LD_VAR 0 1
21571: PPUSH
21572: CALL_OW 87
// if not Heike in units then
21576: LD_EXP 44
21580: PUSH
21581: LD_VAR 0 2
21585: IN
21586: NOT
21587: IFFALSE 21953
// begin case GetSex ( guard ) of sex_male :
21589: LD_VAR 0 1
21593: PPUSH
21594: CALL_OW 258
21598: PUSH
21599: LD_INT 1
21601: DOUBLE
21602: EQUAL
21603: IFTRUE 21607
21605: GO 21622
21607: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
21608: LD_VAR 0 1
21612: PPUSH
21613: LD_STRING DRum-Guard-1
21615: PPUSH
21616: CALL_OW 88
21620: GO 21646
21622: LD_INT 2
21624: DOUBLE
21625: EQUAL
21626: IFTRUE 21630
21628: GO 21645
21630: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
21631: LD_VAR 0 1
21635: PPUSH
21636: LD_STRING DRuf-Guard-1
21638: PPUSH
21639: CALL_OW 88
21643: GO 21646
21645: POP
// case Query ( SurrenderInfoPeople ) of 1 :
21646: LD_STRING SurrenderInfoPeople
21648: PPUSH
21649: CALL_OW 97
21653: PUSH
21654: LD_INT 1
21656: DOUBLE
21657: EQUAL
21658: IFTRUE 21662
21660: GO 21771
21662: POP
// begin Query ( CaughtSquadInfo ) ;
21663: LD_STRING CaughtSquadInfo
21665: PPUSH
21666: CALL_OW 97
// for i in units do
21670: LD_ADDR_VAR 0 4
21674: PUSH
21675: LD_VAR 0 2
21679: PUSH
21680: FOR_IN
21681: IFFALSE 21738
// begin if Carry ( i ) then
21683: LD_VAR 0 4
21687: PPUSH
21688: CALL_OW 281
21692: IFFALSE 21709
// SetCargo ( i , mat_cans , 0 ) ;
21694: LD_VAR 0 4
21698: PPUSH
21699: LD_INT 1
21701: PPUSH
21702: LD_INT 0
21704: PPUSH
21705: CALL_OW 290
// SetSide ( i , 5 ) ;
21709: LD_VAR 0 4
21713: PPUSH
21714: LD_INT 5
21716: PPUSH
21717: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
21721: LD_VAR 0 4
21725: PPUSH
21726: LD_INT 113
21728: PPUSH
21729: LD_INT 17
21731: PPUSH
21732: CALL_OW 111
// end ;
21736: GO 21680
21738: POP
21739: POP
// ComMoveXY ( guard , 117 , 25 ) ;
21740: LD_VAR 0 1
21744: PPUSH
21745: LD_INT 117
21747: PPUSH
21748: LD_INT 25
21750: PPUSH
21751: CALL_OW 111
// DialogueOff ;
21755: CALL_OW 7
// blockPatrolThread := false ;
21759: LD_ADDR_EXP 38
21763: PUSH
21764: LD_INT 0
21766: ST_TO_ADDR
// exit ;
21767: GO 22512
// end ; 2 :
21769: GO 21953
21771: LD_INT 2
21773: DOUBLE
21774: EQUAL
21775: IFTRUE 21779
21777: GO 21952
21779: POP
// begin DialogueOff ;
21780: CALL_OW 7
// wait ( 0 0$2 ) ;
21784: LD_INT 70
21786: PPUSH
21787: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
21791: LD_INT 6
21793: PPUSH
21794: LD_INT 2
21796: PPUSH
21797: LD_INT 2
21799: PPUSH
21800: LD_INT 1
21802: PPUSH
21803: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
21807: LD_VAR 0 1
21811: PPUSH
21812: LD_VAR 0 2
21816: PUSH
21817: LD_INT 1
21819: ARRAY
21820: PPUSH
21821: CALL_OW 115
// case GetSex ( guard ) of sex_male :
21825: LD_VAR 0 1
21829: PPUSH
21830: CALL_OW 258
21834: PUSH
21835: LD_INT 1
21837: DOUBLE
21838: EQUAL
21839: IFTRUE 21843
21841: GO 21858
21843: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
21844: LD_VAR 0 1
21848: PPUSH
21849: LD_STRING DRum-Fail-3
21851: PPUSH
21852: CALL_OW 88
21856: GO 21882
21858: LD_INT 2
21860: DOUBLE
21861: EQUAL
21862: IFTRUE 21866
21864: GO 21881
21866: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
21867: LD_VAR 0 1
21871: PPUSH
21872: LD_STRING DRum-Fail-3
21874: PPUSH
21875: CALL_OW 88
21879: GO 21882
21881: POP
// wait ( 0 0$5 ) ;
21882: LD_INT 175
21884: PPUSH
21885: CALL_OW 67
// if IsOk ( guard ) then
21889: LD_VAR 0 1
21893: PPUSH
21894: CALL_OW 302
21898: IFFALSE 21910
// isAlarm := true else
21900: LD_ADDR_EXP 17
21904: PUSH
21905: LD_INT 1
21907: ST_TO_ADDR
21908: GO 21942
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
21910: LD_INT 6
21912: PPUSH
21913: LD_INT 2
21915: PPUSH
21916: LD_INT 0
21918: PPUSH
21919: LD_INT 1
21921: PPUSH
21922: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
21926: LD_INT 3
21928: PPUSH
21929: LD_INT 2
21931: PPUSH
21932: LD_INT 0
21934: PPUSH
21935: LD_INT 1
21937: PPUSH
21938: CALL_OW 80
// end ; blockPatrolThread := false ;
21942: LD_ADDR_EXP 38
21946: PUSH
21947: LD_INT 0
21949: ST_TO_ADDR
// end ; end ;
21950: GO 21953
21952: POP
// end ; if Carry ( Heike ) then
21953: LD_EXP 44
21957: PPUSH
21958: CALL_OW 281
21962: IFFALSE 22038
// begin case GetSex ( guard ) of sex_male :
21964: LD_VAR 0 1
21968: PPUSH
21969: CALL_OW 258
21973: PUSH
21974: LD_INT 1
21976: DOUBLE
21977: EQUAL
21978: IFTRUE 21982
21980: GO 21997
21982: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
21983: LD_VAR 0 1
21987: PPUSH
21988: LD_STRING DRum-FoodFail-1
21990: PPUSH
21991: CALL_OW 88
21995: GO 22021
21997: LD_INT 2
21999: DOUBLE
22000: EQUAL
22001: IFTRUE 22005
22003: GO 22020
22005: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
22006: LD_VAR 0 1
22010: PPUSH
22011: LD_STRING DRuf-FoodFail-2
22013: PPUSH
22014: CALL_OW 88
22018: GO 22021
22020: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
22021: LD_EXP 44
22025: PPUSH
22026: LD_INT 1
22028: PPUSH
22029: LD_INT 0
22031: PPUSH
22032: CALL_OW 290
// end else
22036: GO 22095
// begin case GetSex ( guard ) of sex_male :
22038: LD_VAR 0 1
22042: PPUSH
22043: CALL_OW 258
22047: PUSH
22048: LD_INT 1
22050: DOUBLE
22051: EQUAL
22052: IFTRUE 22056
22054: GO 22071
22056: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
22057: LD_VAR 0 1
22061: PPUSH
22062: LD_STRING DRum-Seen-1
22064: PPUSH
22065: CALL_OW 88
22069: GO 22095
22071: LD_INT 2
22073: DOUBLE
22074: EQUAL
22075: IFTRUE 22079
22077: GO 22094
22079: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
22080: LD_VAR 0 1
22084: PPUSH
22085: LD_STRING DRuf-Seen-1
22087: PPUSH
22088: CALL_OW 88
22092: GO 22095
22094: POP
// end ; alone := ( units = 1 ) ;
22095: LD_ADDR_VAR 0 5
22099: PUSH
22100: LD_VAR 0 2
22104: PUSH
22105: LD_INT 1
22107: EQUAL
22108: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
22109: LD_STRING SurrenderInfo
22111: PPUSH
22112: CALL_OW 97
22116: PUSH
22117: LD_INT 1
22119: DOUBLE
22120: EQUAL
22121: IFTRUE 22125
22123: GO 22314
22125: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
22126: LD_INT 23
22128: PPUSH
22129: CALL_OW 87
// RemoveUnit ( Heike ) ;
22133: LD_EXP 44
22137: PPUSH
22138: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
22142: LD_EXP 44
22146: PPUSH
22147: LD_INT 23
22149: PPUSH
22150: CALL_OW 52
// if not alone then
22154: LD_VAR 0 5
22158: NOT
22159: IFFALSE 22226
// for i in units diff Heike do
22161: LD_ADDR_VAR 0 4
22165: PUSH
22166: LD_VAR 0 2
22170: PUSH
22171: LD_EXP 44
22175: DIFF
22176: PUSH
22177: FOR_IN
22178: IFFALSE 22224
// begin RemoveUnit ( i ) ;
22180: LD_VAR 0 4
22184: PPUSH
22185: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
22189: LD_VAR 0 4
22193: PPUSH
22194: LD_INT 114
22196: PPUSH
22197: LD_INT 17
22199: PPUSH
22200: LD_INT 10
22202: PPUSH
22203: LD_INT 0
22205: PPUSH
22206: CALL_OW 50
// SetSide ( i , 5 ) ;
22210: LD_VAR 0 4
22214: PPUSH
22215: LD_INT 5
22217: PPUSH
22218: CALL_OW 235
// end ;
22222: GO 22177
22224: POP
22225: POP
// wait ( 0 0$0.3 ) ;
22226: LD_INT 10
22228: PPUSH
22229: CALL_OW 67
// if alone then
22233: LD_VAR 0 5
22237: IFFALSE 22248
// Query ( CaughtInfoAlone ) else
22239: LD_STRING CaughtInfoAlone
22241: PPUSH
22242: CALL_OW 97
22246: GO 22255
// Query ( CaughtInfo ) ;
22248: LD_STRING CaughtInfo
22250: PPUSH
22251: CALL_OW 97
// wait ( 0 0$2 ) ;
22255: LD_INT 70
22257: PPUSH
22258: CALL_OW 67
// StartLockerMinigame ;
22262: CALL 20361 0 0
// Say ( Heike , DH-Reset ) ;
22266: LD_EXP 44
22270: PPUSH
22271: LD_STRING DH-Reset
22273: PPUSH
22274: CALL_OW 88
// DialogueOff ;
22278: CALL_OW 7
// InGameOff ;
22282: CALL_OW 9
// blockPatrolThread := false ;
22286: LD_ADDR_EXP 38
22290: PUSH
22291: LD_INT 0
22293: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
22294: LD_EXP 44
22298: PPUSH
22299: CALL_OW 122
// ComFree ( guard ) ;
22303: LD_VAR 0 1
22307: PPUSH
22308: CALL_OW 139
// end ; 2 :
22312: GO 22504
22314: LD_INT 2
22316: DOUBLE
22317: EQUAL
22318: IFTRUE 22322
22320: GO 22503
22322: POP
// begin Say ( Heike , DH-Guard-2 ) ;
22323: LD_EXP 44
22327: PPUSH
22328: LD_STRING DH-Guard-2
22330: PPUSH
22331: CALL_OW 88
// DialogueOff ;
22335: CALL_OW 7
// wait ( 0 0$2 ) ;
22339: LD_INT 70
22341: PPUSH
22342: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22346: LD_INT 6
22348: PPUSH
22349: LD_INT 2
22351: PPUSH
22352: LD_INT 2
22354: PPUSH
22355: LD_INT 1
22357: PPUSH
22358: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
22362: LD_VAR 0 1
22366: PPUSH
22367: LD_EXP 44
22371: PPUSH
22372: CALL_OW 115
// case GetSex ( guard ) of sex_male :
22376: LD_VAR 0 1
22380: PPUSH
22381: CALL_OW 258
22385: PUSH
22386: LD_INT 1
22388: DOUBLE
22389: EQUAL
22390: IFTRUE 22394
22392: GO 22409
22394: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22395: LD_VAR 0 1
22399: PPUSH
22400: LD_STRING DRum-Fail-3
22402: PPUSH
22403: CALL_OW 88
22407: GO 22433
22409: LD_INT 2
22411: DOUBLE
22412: EQUAL
22413: IFTRUE 22417
22415: GO 22432
22417: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
22418: LD_VAR 0 1
22422: PPUSH
22423: LD_STRING DRum-Fail-3
22425: PPUSH
22426: CALL_OW 88
22430: GO 22433
22432: POP
// wait ( 0 0$5 ) ;
22433: LD_INT 175
22435: PPUSH
22436: CALL_OW 67
// if IsOk ( guard ) then
22440: LD_VAR 0 1
22444: PPUSH
22445: CALL_OW 302
22449: IFFALSE 22461
// isAlarm := true else
22451: LD_ADDR_EXP 17
22455: PUSH
22456: LD_INT 1
22458: ST_TO_ADDR
22459: GO 22493
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
22461: LD_INT 6
22463: PPUSH
22464: LD_INT 2
22466: PPUSH
22467: LD_INT 0
22469: PPUSH
22470: LD_INT 1
22472: PPUSH
22473: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
22477: LD_INT 3
22479: PPUSH
22480: LD_INT 2
22482: PPUSH
22483: LD_INT 0
22485: PPUSH
22486: LD_INT 1
22488: PPUSH
22489: CALL_OW 80
// end ; blockPatrolThread := false ;
22493: LD_ADDR_EXP 38
22497: PUSH
22498: LD_INT 0
22500: ST_TO_ADDR
// end ; end ;
22501: GO 22504
22503: POP
// blockPatrolThread := false ;
22504: LD_ADDR_EXP 38
22508: PUSH
22509: LD_INT 0
22511: ST_TO_ADDR
// end ;
22512: LD_VAR 0 3
22516: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
22517: LD_EXP 14
22521: PPUSH
22522: LD_INT 22
22524: PUSH
22525: LD_INT 5
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 3
22534: PUSH
22535: LD_INT 101
22537: PUSH
22538: LD_INT 6
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 92
22551: PUSH
22552: LD_INT 113
22554: PUSH
22555: LD_INT 16
22557: PUSH
22558: LD_INT 12
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 91
22569: PUSH
22570: LD_EXP 44
22574: PUSH
22575: LD_INT 6
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: LIST
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: PPUSH
22589: CALL_OW 72
22593: PUSH
22594: LD_EXP 30
22598: NOT
22599: AND
22600: IFFALSE 22705
22602: GO 22604
22604: DISABLE
22605: LD_INT 0
22607: PPUSH
// begin enable ;
22608: ENABLE
// DialogueOn ;
22609: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
22613: LD_EXP 44
22617: PPUSH
22618: LD_STRING DH-Join-
22620: PUSH
22621: LD_INT 1
22623: PPUSH
22624: LD_INT 3
22626: PPUSH
22627: CALL_OW 12
22631: STR
22632: PPUSH
22633: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
22637: LD_ADDR_VAR 0 1
22641: PUSH
22642: LD_EXP 14
22646: PPUSH
22647: LD_INT 22
22649: PUSH
22650: LD_INT 5
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 91
22659: PUSH
22660: LD_EXP 44
22664: PUSH
22665: LD_INT 10
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: LIST
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PPUSH
22677: CALL_OW 72
22681: PUSH
22682: FOR_IN
22683: IFFALSE 22699
// SetSide ( i , 2 ) ;
22685: LD_VAR 0 1
22689: PPUSH
22690: LD_INT 2
22692: PPUSH
22693: CALL_OW 235
22697: GO 22682
22699: POP
22700: POP
// DialogueOff ;
22701: CALL_OW 7
// end ; end_of_file
22705: PPOPN 1
22707: END
// every 0 0$2 trigger isAlarm and hasNormalScene do var i , points , tmp ;
22708: LD_EXP 17
22712: PUSH
22713: LD_EXP 5
22717: AND
22718: IFFALSE 23019
22720: GO 22722
22722: DISABLE
22723: LD_INT 0
22725: PPUSH
22726: PPUSH
22727: PPUSH
// begin PlaySoundXY ( - 1 , - 1 , alarm ) ;
22728: LD_INT 1
22730: NEG
22731: PPUSH
22732: LD_INT 1
22734: NEG
22735: PPUSH
22736: LD_STRING alarm
22738: PPUSH
22739: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
22743: LD_INT 3
22745: PPUSH
22746: LD_INT 2
22748: PPUSH
22749: LD_INT 2
22751: PPUSH
22752: LD_INT 1
22754: PPUSH
22755: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22759: LD_INT 6
22761: PPUSH
22762: LD_INT 2
22764: PPUSH
22765: LD_INT 2
22767: PPUSH
22768: LD_INT 1
22770: PPUSH
22771: CALL_OW 80
// DialogueOn ;
22775: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
22779: LD_EXP 44
22783: PPUSH
22784: LD_STRING DH-Alarm-1
22786: PPUSH
22787: CALL_OW 88
// DialogueOff ;
22791: CALL_OW 7
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
22795: LD_ADDR_VAR 0 2
22799: PUSH
22800: LD_INT 107
22802: PUSH
22803: LD_INT 39
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 143
22812: PUSH
22813: LD_INT 33
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 180
22822: PUSH
22823: LD_INT 115
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 96
22832: PUSH
22833: LD_INT 90
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 59
22842: PUSH
22843: LD_INT 52
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 16
22852: PUSH
22853: LD_INT 15
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 90
22862: PUSH
22863: LD_INT 120
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
22879: LD_ADDR_VAR 0 3
22883: PUSH
22884: LD_INT 22
22886: PUSH
22887: LD_INT 6
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 25
22896: PUSH
22897: LD_INT 1
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PPUSH
22908: CALL_OW 69
22912: ST_TO_ADDR
// for i in tmp do
22913: LD_ADDR_VAR 0 1
22917: PUSH
22918: LD_VAR 0 3
22922: PUSH
22923: FOR_IN
22924: IFFALSE 22992
// begin ComExit ( i ) ;
22926: LD_VAR 0 1
22930: PPUSH
22931: CALL 66481 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
22935: LD_VAR 0 1
22939: PPUSH
22940: LD_VAR 0 2
22944: PUSH
22945: LD_VAR 0 1
22949: PUSH
22950: LD_INT 7
22952: MOD
22953: PUSH
22954: LD_INT 1
22956: PLUS
22957: ARRAY
22958: PUSH
22959: LD_INT 1
22961: ARRAY
22962: PPUSH
22963: LD_VAR 0 2
22967: PUSH
22968: LD_VAR 0 1
22972: PUSH
22973: LD_INT 7
22975: MOD
22976: PUSH
22977: LD_INT 1
22979: PLUS
22980: ARRAY
22981: PUSH
22982: LD_INT 2
22984: ARRAY
22985: PPUSH
22986: CALL_OW 174
// end ;
22990: GO 22923
22992: POP
22993: POP
// Explode ;
22994: CALL 23022 0 0
// wait ( 0 0$45 ) ;
22998: LD_INT 1575
23000: PPUSH
23001: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
23005: LD_VAR 0 3
23009: PPUSH
23010: LD_EXP 44
23014: PPUSH
23015: CALL_OW 175
// end ;
23019: PPOPN 3
23021: END
// export function Explode ; var i , x , y , j ; begin
23022: LD_INT 0
23024: PPUSH
23025: PPUSH
23026: PPUSH
23027: PPUSH
23028: PPUSH
// if hasExplosionsInFactory then
23029: LD_EXP 7
23033: IFFALSE 23053
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
23035: LD_ADDR_EXP 29
23039: PUSH
23040: LD_EXP 29
23044: PPUSH
23045: LD_INT 61
23047: PPUSH
23048: CALL 66083 0 2
23052: ST_TO_ADDR
// if explosivePlantedList then
23053: LD_EXP 29
23057: IFFALSE 23205
// begin for i in explosivePlantedList do
23059: LD_ADDR_VAR 0 2
23063: PUSH
23064: LD_EXP 29
23068: PUSH
23069: FOR_IN
23070: IFFALSE 23173
// begin x := GetX ( i ) ;
23072: LD_ADDR_VAR 0 3
23076: PUSH
23077: LD_VAR 0 2
23081: PPUSH
23082: CALL_OW 250
23086: ST_TO_ADDR
// y := GetY ( i ) ;
23087: LD_ADDR_VAR 0 4
23091: PUSH
23092: LD_VAR 0 2
23096: PPUSH
23097: CALL_OW 251
23101: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
23102: LD_ADDR_VAR 0 5
23106: PUSH
23107: LD_INT 1
23109: PUSH
23110: LD_INT 3
23112: PUSH
23113: LD_INT 5
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: LIST
23120: PUSH
23121: FOR_IN
23122: IFFALSE 23169
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
23124: LD_VAR 0 3
23128: PPUSH
23129: LD_VAR 0 5
23133: PPUSH
23134: LD_INT 2
23136: PPUSH
23137: CALL_OW 272
23141: PPUSH
23142: LD_VAR 0 4
23146: PPUSH
23147: LD_VAR 0 5
23151: PPUSH
23152: LD_INT 2
23154: PPUSH
23155: CALL_OW 273
23159: PPUSH
23160: LD_INT 1
23162: PPUSH
23163: CALL_OW 453
23167: GO 23121
23169: POP
23170: POP
// end ;
23171: GO 23069
23173: POP
23174: POP
// Say ( Heike , DH-End-2 ) ;
23175: LD_EXP 44
23179: PPUSH
23180: LD_STRING DH-End-2
23182: PPUSH
23183: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
23187: LD_INT 175
23189: PUSH
23190: LD_EXP 29
23194: PPUSH
23195: CALL 30750 0 1
23199: MUL
23200: PPUSH
23201: CALL_OW 67
// end ; if not isAlarm then
23205: LD_EXP 17
23209: NOT
23210: IFFALSE 23220
// isAlarm := true ;
23212: LD_ADDR_EXP 17
23216: PUSH
23217: LD_INT 1
23219: ST_TO_ADDR
// end ;
23220: LD_VAR 0 1
23224: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
23225: LD_INT 22
23227: PUSH
23228: LD_INT 2
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 21
23237: PUSH
23238: LD_INT 2
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 2
23247: PUSH
23248: LD_INT 101
23250: PUSH
23251: LD_INT 3
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 101
23260: PUSH
23261: LD_INT 6
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: LIST
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: LIST
23277: PPUSH
23278: CALL_OW 69
23282: IFFALSE 23295
23284: GO 23286
23286: DISABLE
// isAlarm := true ; end_of_file
23287: LD_ADDR_EXP 17
23291: PUSH
23292: LD_INT 1
23294: ST_TO_ADDR
23295: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
23296: LD_EXP 14
23300: PPUSH
23301: LD_INT 22
23303: PUSH
23304: LD_INT 2
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PPUSH
23311: CALL_OW 72
23315: PUSH
23316: LD_INT 3
23318: GREATER
23319: PUSH
23320: LD_EXP 17
23324: NOT
23325: AND
23326: IFFALSE 27229
23328: GO 23330
23330: DISABLE
23331: LD_INT 0
23333: PPUSH
23334: PPUSH
23335: PPUSH
23336: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
23337: LD_EXP 64
23341: PPUSH
23342: LD_INT 155
23344: PPUSH
23345: LD_INT 68
23347: PPUSH
23348: LD_INT 0
23350: PPUSH
23351: CALL_OW 48
// wait ( 0 0$1 ) ;
23355: LD_INT 35
23357: PPUSH
23358: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23362: LD_INT 35
23364: PPUSH
23365: CALL_OW 67
// if not HasTask ( ruDisturb ) then
23369: LD_EXP 64
23373: PPUSH
23374: CALL_OW 314
23378: NOT
23379: IFFALSE 23395
// ComMoveUnit ( ruDisturb , Heike ) ;
23381: LD_EXP 64
23385: PPUSH
23386: LD_EXP 44
23390: PPUSH
23391: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
23395: LD_EXP 44
23399: PPUSH
23400: LD_EXP 64
23404: PPUSH
23405: CALL_OW 296
23409: PUSH
23410: LD_INT 6
23412: LESS
23413: PUSH
23414: LD_EXP 64
23418: PPUSH
23419: CALL_OW 302
23423: AND
23424: IFFALSE 23362
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23426: LD_EXP 14
23430: PPUSH
23431: LD_INT 22
23433: PUSH
23434: LD_INT 2
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 91
23443: PUSH
23444: LD_EXP 64
23448: PUSH
23449: LD_INT 8
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 2
23459: PUSH
23460: LD_INT 25
23462: PUSH
23463: LD_INT 1
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 25
23472: PUSH
23473: LD_INT 11
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 25
23482: PUSH
23483: LD_INT 32
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 25
23492: PUSH
23493: LD_INT 34
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: LIST
23511: PPUSH
23512: CALL_OW 72
23516: IFFALSE 23526
// isAlarm := true ;
23518: LD_ADDR_EXP 17
23522: PUSH
23523: LD_INT 1
23525: ST_TO_ADDR
// if isAlarm then
23526: LD_EXP 17
23530: IFFALSE 23534
// exit ;
23532: GO 27229
// DialogueOn ;
23534: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
23538: LD_EXP 64
23542: PPUSH
23543: LD_STRING DMcn-Interrupt-1
23545: PPUSH
23546: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
23550: LD_EXP 64
23554: PPUSH
23555: LD_STRING DMcn-Interrupt-2
23557: PPUSH
23558: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
23562: LD_EXP 64
23566: PPUSH
23567: LD_STRING DMcn-Interrupt-3
23569: PPUSH
23570: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
23574: LD_EXP 44
23578: PPUSH
23579: LD_STRING DH-Interrupt-a-4
23581: PPUSH
23582: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
23586: LD_EXP 64
23590: PPUSH
23591: LD_STRING DMcn-Interrupt-a-5
23593: PPUSH
23594: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
23598: LD_EXP 44
23602: PPUSH
23603: LD_STRING DH-Interrupt-a-6
23605: PPUSH
23606: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
23610: LD_EXP 64
23614: PPUSH
23615: LD_STRING DMcn-Interrupt-a-7
23617: PPUSH
23618: CALL_OW 88
// DialogueOff ;
23622: CALL_OW 7
// hasMuchin := true ;
23626: LD_ADDR_EXP 30
23630: PUSH
23631: LD_INT 1
23633: ST_TO_ADDR
// Query ( MuchinInfo ) ;
23634: LD_STRING MuchinInfo
23636: PPUSH
23637: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
23641: LD_STRING M2a
23643: PPUSH
23644: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
23648: LD_INT 105
23650: PPUSH
23651: LD_INT 55
23653: PPUSH
23654: CALL_OW 428
23658: PPUSH
23659: LD_INT 2
23661: PPUSH
23662: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
23666: LD_INT 115
23668: PPUSH
23669: LD_INT 65
23671: PPUSH
23672: CALL_OW 428
23676: PPUSH
23677: LD_INT 2
23679: PPUSH
23680: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
23684: LD_INT 109
23686: PPUSH
23687: LD_INT 59
23689: PPUSH
23690: LD_INT 2
23692: PPUSH
23693: LD_INT 10
23695: NEG
23696: PPUSH
23697: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
23701: LD_INT 109
23703: PPUSH
23704: LD_INT 59
23706: PPUSH
23707: CALL_OW 84
// wait ( 0 0$2 ) ;
23711: LD_INT 70
23713: PPUSH
23714: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
23718: LD_INT 109
23720: PPUSH
23721: LD_INT 59
23723: PPUSH
23724: LD_INT 2
23726: PPUSH
23727: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
23731: LD_INT 35
23733: PPUSH
23734: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
23738: LD_EXP 64
23742: PPUSH
23743: LD_EXP 44
23747: PPUSH
23748: CALL_OW 296
23752: PUSH
23753: LD_INT 6
23755: GREATER
23756: IFFALSE 23772
// ComMoveUnit ( ruDisturb , Heike ) ;
23758: LD_EXP 64
23762: PPUSH
23763: LD_EXP 44
23767: PPUSH
23768: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23772: LD_EXP 14
23776: PPUSH
23777: LD_INT 22
23779: PUSH
23780: LD_INT 2
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 91
23789: PUSH
23790: LD_EXP 64
23794: PUSH
23795: LD_INT 8
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 2
23805: PUSH
23806: LD_INT 25
23808: PUSH
23809: LD_INT 1
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 25
23818: PUSH
23819: LD_INT 11
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 25
23828: PUSH
23829: LD_INT 32
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 25
23838: PUSH
23839: LD_INT 34
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: LIST
23857: PPUSH
23858: CALL_OW 72
23862: IFFALSE 23874
// begin isAlarm := true ;
23864: LD_ADDR_EXP 17
23868: PUSH
23869: LD_INT 1
23871: ST_TO_ADDR
// exit ;
23872: GO 27229
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
23874: LD_INT 105
23876: PPUSH
23877: LD_INT 55
23879: PPUSH
23880: CALL_OW 428
23884: NOT
23885: PUSH
23886: LD_INT 115
23888: PPUSH
23889: LD_INT 65
23891: PPUSH
23892: CALL_OW 428
23896: NOT
23897: OR
23898: IFFALSE 23910
// begin isAlarm := true ;
23900: LD_ADDR_EXP 17
23904: PUSH
23905: LD_INT 1
23907: ST_TO_ADDR
// exit ;
23908: GO 27229
// end ; until not BuildingsInProgress ( 2 ) ;
23910: LD_INT 2
23912: PPUSH
23913: CALL_OW 345
23917: NOT
23918: IFFALSE 23731
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
23920: LD_INT 105
23922: PPUSH
23923: LD_INT 55
23925: PPUSH
23926: CALL_OW 428
23930: PPUSH
23931: LD_INT 3
23933: PPUSH
23934: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
23938: LD_INT 115
23940: PPUSH
23941: LD_INT 65
23943: PPUSH
23944: CALL_OW 428
23948: PPUSH
23949: LD_INT 3
23951: PPUSH
23952: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
23956: LD_STRING M2a-out
23958: PPUSH
23959: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
23963: LD_EXP 64
23967: PPUSH
23968: LD_INT 2
23970: PPUSH
23971: CALL_OW 120
// wait ( 0 0$3 ) ;
23975: LD_INT 105
23977: PPUSH
23978: CALL_OW 67
// hasMuchin := false ;
23982: LD_ADDR_EXP 30
23986: PUSH
23987: LD_INT 0
23989: ST_TO_ADDR
// wait ( 2 2$00 ) ;
23990: LD_INT 4200
23992: PPUSH
23993: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23997: LD_INT 35
23999: PPUSH
24000: CALL_OW 67
// if not HasTask ( ruDisturb ) then
24004: LD_EXP 64
24008: PPUSH
24009: CALL_OW 314
24013: NOT
24014: IFFALSE 24030
// ComMoveUnit ( ruDisturb , Heike ) ;
24016: LD_EXP 64
24020: PPUSH
24021: LD_EXP 44
24025: PPUSH
24026: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
24030: LD_EXP 44
24034: PPUSH
24035: LD_EXP 64
24039: PPUSH
24040: CALL_OW 296
24044: PUSH
24045: LD_INT 6
24047: LESS
24048: PUSH
24049: LD_EXP 64
24053: PPUSH
24054: CALL_OW 302
24058: AND
24059: IFFALSE 23997
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24061: LD_EXP 14
24065: PPUSH
24066: LD_INT 22
24068: PUSH
24069: LD_INT 2
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 91
24078: PUSH
24079: LD_EXP 64
24083: PUSH
24084: LD_INT 8
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 2
24094: PUSH
24095: LD_INT 25
24097: PUSH
24098: LD_INT 1
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 25
24107: PUSH
24108: LD_INT 11
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 25
24117: PUSH
24118: LD_INT 32
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 25
24127: PUSH
24128: LD_INT 34
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: LIST
24146: PPUSH
24147: CALL_OW 72
24151: IFFALSE 24161
// isAlarm := true ;
24153: LD_ADDR_EXP 17
24157: PUSH
24158: LD_INT 1
24160: ST_TO_ADDR
// if isAlarm then
24161: LD_EXP 17
24165: IFFALSE 24169
// exit ;
24167: GO 27229
// DialogueOn ;
24169: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24173: LD_EXP 64
24177: PPUSH
24178: LD_STRING DMcn-Interrupt-1
24180: PPUSH
24181: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24185: LD_EXP 64
24189: PPUSH
24190: LD_STRING DMcn-Interrupt-2
24192: PPUSH
24193: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
24197: LD_INT 176
24199: PPUSH
24200: LD_INT 54
24202: PPUSH
24203: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
24207: LD_INT 176
24209: PPUSH
24210: LD_INT 54
24212: PPUSH
24213: LD_INT 2
24215: PPUSH
24216: LD_INT 6
24218: NEG
24219: PPUSH
24220: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
24224: LD_INT 10
24226: PPUSH
24227: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
24231: LD_EXP 64
24235: PPUSH
24236: LD_STRING DMcn-Interrupt-b-3
24238: PPUSH
24239: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
24243: LD_EXP 44
24247: PPUSH
24248: LD_STRING DH-Interrupt-b-4
24250: PPUSH
24251: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
24255: LD_EXP 64
24259: PPUSH
24260: LD_STRING DMcn-Interrupt-b-5
24262: PPUSH
24263: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
24267: LD_EXP 44
24271: PPUSH
24272: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
24276: LD_INT 176
24278: PPUSH
24279: LD_INT 54
24281: PPUSH
24282: LD_INT 2
24284: PPUSH
24285: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
24289: LD_EXP 64
24293: PPUSH
24294: LD_STRING DMcn-Interrupt-b-6
24296: PPUSH
24297: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
24301: LD_EXP 44
24305: PPUSH
24306: LD_STRING DH-Interrupt-b-7
24308: PPUSH
24309: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
24313: LD_EXP 64
24317: PPUSH
24318: LD_STRING DMcn-Interrupt-b-8
24320: PPUSH
24321: CALL_OW 88
// DialogueOff ;
24325: CALL_OW 7
// Query ( MuchinInfo ) ;
24329: LD_STRING MuchinInfo
24331: PPUSH
24332: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
24336: LD_STRING M2b
24338: PPUSH
24339: CALL_OW 337
// hasMuchin := true ;
24343: LD_ADDR_EXP 30
24347: PUSH
24348: LD_INT 1
24350: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24351: LD_INT 35
24353: PPUSH
24354: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24358: LD_EXP 64
24362: PPUSH
24363: LD_EXP 44
24367: PPUSH
24368: CALL_OW 296
24372: PUSH
24373: LD_INT 6
24375: GREATER
24376: IFFALSE 24392
// ComMoveUnit ( ruDisturb , Heike ) ;
24378: LD_EXP 64
24382: PPUSH
24383: LD_EXP 44
24387: PPUSH
24388: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24392: LD_EXP 14
24396: PPUSH
24397: LD_INT 22
24399: PUSH
24400: LD_INT 2
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 91
24409: PUSH
24410: LD_EXP 64
24414: PUSH
24415: LD_INT 8
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 2
24425: PUSH
24426: LD_INT 25
24428: PUSH
24429: LD_INT 1
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 25
24438: PUSH
24439: LD_INT 11
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 25
24448: PUSH
24449: LD_INT 32
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 25
24458: PUSH
24459: LD_INT 34
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: LIST
24477: PPUSH
24478: CALL_OW 72
24482: IFFALSE 24494
// begin isAlarm := true ;
24484: LD_ADDR_EXP 17
24488: PUSH
24489: LD_INT 1
24491: ST_TO_ADDR
// exit ;
24492: GO 27229
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
24494: LD_EXP 44
24498: PPUSH
24499: LD_INT 61
24501: PPUSH
24502: CALL_OW 296
24506: PUSH
24507: LD_INT 4
24509: LESS
24510: IFFALSE 24351
// InGameOn ;
24512: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
24516: LD_INT 173
24518: PPUSH
24519: LD_INT 54
24521: PPUSH
24522: LD_INT 2
24524: PPUSH
24525: LD_INT 8
24527: NEG
24528: PPUSH
24529: CALL_OW 330
// SetSide ( Heike , 3 ) ;
24533: LD_EXP 44
24537: PPUSH
24538: LD_INT 3
24540: PPUSH
24541: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
24545: LD_EXP 44
24549: PPUSH
24550: LD_INT 61
24552: PPUSH
24553: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
24557: LD_EXP 64
24561: PPUSH
24562: LD_INT 61
24564: PPUSH
24565: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
24569: LD_EXP 51
24573: PUSH
24574: LD_EXP 14
24578: IN
24579: PUSH
24580: LD_EXP 51
24584: PPUSH
24585: LD_INT 61
24587: PPUSH
24588: CALL_OW 296
24592: PUSH
24593: LD_INT 12
24595: LESS
24596: AND
24597: IFFALSE 24641
// begin SetSide ( Markov , 3 ) ;
24599: LD_EXP 51
24603: PPUSH
24604: LD_INT 3
24606: PPUSH
24607: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
24611: LD_EXP 51
24615: PPUSH
24616: LD_INT 61
24618: PPUSH
24619: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
24623: LD_INT 35
24625: PPUSH
24626: CALL_OW 67
// until IsInUnit ( Markov ) ;
24630: LD_EXP 51
24634: PPUSH
24635: CALL_OW 310
24639: IFFALSE 24623
// end ; repeat wait ( 0 0$1 ) ;
24641: LD_INT 35
24643: PPUSH
24644: CALL_OW 67
// until IsInUnit ( Heike ) ;
24648: LD_EXP 44
24652: PPUSH
24653: CALL_OW 310
24657: IFFALSE 24641
// SetClass ( Heike , class_mechanic ) ;
24659: LD_EXP 44
24663: PPUSH
24664: LD_INT 3
24666: PPUSH
24667: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
24671: LD_INT 61
24673: PPUSH
24674: LD_INT 21
24676: PPUSH
24677: LD_INT 3
24679: PPUSH
24680: LD_INT 3
24682: PPUSH
24683: LD_INT 43
24685: PPUSH
24686: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
24690: LD_EXP 31
24694: PUSH
24695: LD_EXP 51
24699: PUSH
24700: LD_EXP 14
24704: IN
24705: PUSH
24706: LD_EXP 51
24710: PPUSH
24711: CALL_OW 310
24715: PUSH
24716: LD_INT 61
24718: EQUAL
24719: OR
24720: AND
24721: IFFALSE 25211
// begin wait ( 0 0$5 ) ;
24723: LD_INT 175
24725: PPUSH
24726: CALL_OW 67
// SetSide ( Heike , 2 ) ;
24730: LD_EXP 44
24734: PPUSH
24735: LD_INT 2
24737: PPUSH
24738: CALL_OW 235
// SetSide ( Markov , 2 ) ;
24742: LD_EXP 51
24746: PPUSH
24747: LD_INT 2
24749: PPUSH
24750: CALL_OW 235
// if not Markov in heikeSquad then
24754: LD_EXP 51
24758: PUSH
24759: LD_EXP 14
24763: IN
24764: NOT
24765: IFFALSE 24787
// heikeSquad := Join ( heikeSquad , Markov ) ;
24767: LD_ADDR_EXP 14
24771: PUSH
24772: LD_EXP 14
24776: PPUSH
24777: LD_EXP 51
24781: PPUSH
24782: CALL 66083 0 2
24786: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
24787: LD_EXP 51
24791: PPUSH
24792: LD_STRING DMar-Factory-1
24794: PPUSH
24795: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
24799: LD_INT 61
24801: PPUSH
24802: LD_INT 99
24804: PPUSH
24805: CALL_OW 329
// game_speed := 4 ;
24809: LD_ADDR_OWVAR 65
24813: PUSH
24814: LD_INT 4
24816: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
24817: LD_EXP 64
24821: PPUSH
24822: CALL_OW 122
// ComExitBuilding ( Markov ) ;
24826: LD_EXP 51
24830: PPUSH
24831: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
24835: LD_EXP 64
24839: PPUSH
24840: LD_INT 171
24842: PPUSH
24843: LD_INT 51
24845: PPUSH
24846: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
24850: LD_EXP 51
24854: PPUSH
24855: LD_INT 167
24857: PPUSH
24858: LD_INT 50
24860: PPUSH
24861: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
24865: LD_EXP 51
24869: PPUSH
24870: LD_EXP 64
24874: PPUSH
24875: CALL_OW 179
// wait ( 0 0$5 ) ;
24879: LD_INT 175
24881: PPUSH
24882: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
24886: LD_EXP 51
24890: PPUSH
24891: LD_STRING DMar-Factory-2
24893: PPUSH
24894: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
24898: LD_ADDR_VAR 0 2
24902: PUSH
24903: LD_INT 22
24905: PUSH
24906: LD_INT 3
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 33
24915: PUSH
24916: LD_INT 3
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PPUSH
24927: CALL_OW 69
24931: PUSH
24932: LD_INT 1
24934: ARRAY
24935: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
24936: LD_EXP 64
24940: PPUSH
24941: LD_VAR 0 2
24945: PPUSH
24946: CALL_OW 119
// game_speed := 4 ;
24950: LD_ADDR_OWVAR 65
24954: PUSH
24955: LD_INT 4
24957: ST_TO_ADDR
// async ;
24958: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
24959: LD_EXP 64
24963: PPUSH
24964: LD_STRING DMcn-Factory-3
24966: PPUSH
24967: CALL_OW 88
// wait ( 0 0$0.6 ) ;
24971: LD_INT 21
24973: PPUSH
24974: CALL_OW 67
// ComAttackUnit ( veh , ruDisturb ) ;
24978: LD_VAR 0 2
24982: PPUSH
24983: LD_EXP 64
24987: PPUSH
24988: CALL_OW 115
// sync ;
24992: SYNC
// wait ( 0 0$1 ) ;
24993: LD_INT 35
24995: PPUSH
24996: CALL_OW 67
// KillUnit ( ruDisturb ) ;
25000: LD_EXP 64
25004: PPUSH
25005: CALL_OW 66
// SetSide ( veh , 7 ) ;
25009: LD_VAR 0 2
25013: PPUSH
25014: LD_INT 7
25016: PPUSH
25017: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
25021: LD_VAR 0 2
25025: PPUSH
25026: LD_INT 84
25028: PPUSH
25029: LD_INT 38
25031: PPUSH
25032: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
25036: LD_EXP 65
25040: PUSH
25041: LD_INT 1
25043: ARRAY
25044: PPUSH
25045: CALL_OW 258
25049: PUSH
25050: LD_INT 1
25052: EQUAL
25053: IFFALSE 25073
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
25055: LD_EXP 65
25059: PUSH
25060: LD_INT 1
25062: ARRAY
25063: PPUSH
25064: LD_STRING DRum-Factory-4
25066: PPUSH
25067: CALL_OW 88
25071: GO 25089
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
25073: LD_EXP 65
25077: PUSH
25078: LD_INT 1
25080: ARRAY
25081: PPUSH
25082: LD_STRING DRuf-Factory-4
25084: PPUSH
25085: CALL_OW 88
// wait ( 0 0$1 ) ;
25089: LD_INT 35
25091: PPUSH
25092: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
25096: LD_EXP 65
25100: PPUSH
25101: LD_INT 26
25103: PUSH
25104: LD_INT 1
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PPUSH
25111: CALL_OW 72
25115: PUSH
25116: LD_INT 1
25118: ARRAY
25119: PPUSH
25120: LD_STRING DRum-Factory-6
25122: PPUSH
25123: CALL_OW 88
// wait ( 0 0$2 ) ;
25127: LD_INT 70
25129: PPUSH
25130: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
25134: LD_EXP 44
25138: PPUSH
25139: LD_INT 33
25141: PPUSH
25142: CALL_OW 336
// ComExitBuilding ( Heike ) ;
25146: LD_EXP 44
25150: PPUSH
25151: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25155: LD_EXP 44
25159: PPUSH
25160: LD_INT 168
25162: PPUSH
25163: LD_INT 54
25165: PPUSH
25166: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
25170: LD_INT 173
25172: PPUSH
25173: LD_INT 54
25175: PPUSH
25176: LD_INT 2
25178: PPUSH
25179: CALL_OW 331
// InGameOff ;
25183: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
25187: LD_STRING M2b-out
25189: PPUSH
25190: CALL_OW 337
// SetAchievement ( ACH_TOY ) ;
25194: LD_STRING ACH_TOY
25196: PPUSH
25197: CALL_OW 543
// hasMuchin := false ;
25201: LD_ADDR_EXP 30
25205: PUSH
25206: LD_INT 0
25208: ST_TO_ADDR
// exit ;
25209: GO 27229
// end ; wait ( 0 0$5 ) ;
25211: LD_INT 175
25213: PPUSH
25214: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
25218: LD_INT 61
25220: PPUSH
25221: LD_INT 99
25223: PPUSH
25224: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
25228: LD_EXP 51
25232: PUSH
25233: LD_EXP 14
25237: IN
25238: PUSH
25239: LD_EXP 51
25243: PPUSH
25244: CALL_OW 255
25248: PUSH
25249: LD_INT 3
25251: EQUAL
25252: AND
25253: IFFALSE 25276
// begin SetSide ( Markov , 2 ) ;
25255: LD_EXP 51
25259: PPUSH
25260: LD_INT 2
25262: PPUSH
25263: CALL_OW 235
// ComExitBuilding ( Markov ) ;
25267: LD_EXP 51
25271: PPUSH
25272: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
25276: LD_EXP 44
25280: PPUSH
25281: LD_INT 2
25283: PPUSH
25284: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
25288: LD_EXP 44
25292: PPUSH
25293: LD_INT 33
25295: PPUSH
25296: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
25300: LD_EXP 64
25304: PPUSH
25305: CALL_OW 122
// ComExitBuilding ( Heike ) ;
25309: LD_EXP 44
25313: PPUSH
25314: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25318: LD_EXP 44
25322: PPUSH
25323: LD_INT 168
25325: PPUSH
25326: LD_INT 54
25328: PPUSH
25329: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
25333: LD_INT 173
25335: PPUSH
25336: LD_INT 54
25338: PPUSH
25339: LD_INT 2
25341: PPUSH
25342: CALL_OW 331
// InGameOff ;
25346: CALL_OW 9
// wait ( 3 ) ;
25350: LD_INT 3
25352: PPUSH
25353: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
25357: LD_EXP 64
25361: PPUSH
25362: LD_INT 2
25364: PPUSH
25365: CALL_OW 120
// wait ( 0 0$3 ) ;
25369: LD_INT 105
25371: PPUSH
25372: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
25376: LD_STRING M2b-out
25378: PPUSH
25379: CALL_OW 337
// hasMuchin := false ;
25383: LD_ADDR_EXP 30
25387: PUSH
25388: LD_INT 0
25390: ST_TO_ADDR
// wait ( 2 2$00 ) ;
25391: LD_INT 4200
25393: PPUSH
25394: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
25398: LD_INT 35
25400: PPUSH
25401: CALL_OW 67
// if not HasTask ( ruDisturb ) then
25405: LD_EXP 64
25409: PPUSH
25410: CALL_OW 314
25414: NOT
25415: IFFALSE 25431
// ComMoveUnit ( ruDisturb , Heike ) ;
25417: LD_EXP 64
25421: PPUSH
25422: LD_EXP 44
25426: PPUSH
25427: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
25431: LD_EXP 44
25435: PPUSH
25436: LD_EXP 64
25440: PPUSH
25441: CALL_OW 296
25445: PUSH
25446: LD_INT 2
25448: LESS
25449: PUSH
25450: LD_EXP 64
25454: PPUSH
25455: CALL_OW 302
25459: AND
25460: IFFALSE 25398
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25462: LD_EXP 14
25466: PPUSH
25467: LD_INT 22
25469: PUSH
25470: LD_INT 2
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 91
25479: PUSH
25480: LD_EXP 64
25484: PUSH
25485: LD_INT 8
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 2
25495: PUSH
25496: LD_INT 25
25498: PUSH
25499: LD_INT 1
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 25
25508: PUSH
25509: LD_INT 11
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 25
25518: PUSH
25519: LD_INT 32
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 25
25528: PUSH
25529: LD_INT 34
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: LIST
25547: PPUSH
25548: CALL_OW 72
25552: IFFALSE 25562
// isAlarm := true ;
25554: LD_ADDR_EXP 17
25558: PUSH
25559: LD_INT 1
25561: ST_TO_ADDR
// if isAlarm then
25562: LD_EXP 17
25566: IFFALSE 25570
// exit ;
25568: GO 27229
// ComTurnUnit ( Heike , ruDisturb ) ;
25570: LD_EXP 44
25574: PPUSH
25575: LD_EXP 64
25579: PPUSH
25580: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
25584: LD_EXP 64
25588: PPUSH
25589: LD_EXP 44
25593: PPUSH
25594: CALL_OW 119
// wait ( 3 ) ;
25598: LD_INT 3
25600: PPUSH
25601: CALL_OW 67
// for i := 1 to 3 do
25605: LD_ADDR_VAR 0 1
25609: PUSH
25610: DOUBLE
25611: LD_INT 1
25613: DEC
25614: ST_TO_ADDR
25615: LD_INT 3
25617: PUSH
25618: FOR_TO
25619: IFFALSE 25636
// CreateCratesArea ( 5 , cratesArea , false ) ;
25621: LD_INT 5
25623: PPUSH
25624: LD_INT 58
25626: PPUSH
25627: LD_INT 0
25629: PPUSH
25630: CALL_OW 55
25634: GO 25618
25636: POP
25637: POP
// uc_side := 3 ;
25638: LD_ADDR_OWVAR 20
25642: PUSH
25643: LD_INT 3
25645: ST_TO_ADDR
// uc_nation := nation_russian ;
25646: LD_ADDR_OWVAR 21
25650: PUSH
25651: LD_INT 3
25653: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
25654: LD_INT 21
25656: PPUSH
25657: LD_INT 3
25659: PPUSH
25660: LD_INT 1
25662: PPUSH
25663: LD_INT 51
25665: PPUSH
25666: LD_INT 100
25668: PPUSH
25669: CALL 33631 0 5
// veh := CreateVehicle ;
25673: LD_ADDR_VAR 0 2
25677: PUSH
25678: CALL_OW 45
25682: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
25683: LD_VAR 0 2
25687: PPUSH
25688: LD_INT 104
25690: PPUSH
25691: LD_INT 41
25693: PPUSH
25694: LD_INT 3
25696: PPUSH
25697: LD_INT 0
25699: PPUSH
25700: CALL 68223 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
25704: LD_VAR 0 2
25708: PPUSH
25709: LD_INT 1
25711: PPUSH
25712: LD_INT 100
25714: PPUSH
25715: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
25719: CALL_OW 44
25723: PPUSH
25724: LD_VAR 0 2
25728: PPUSH
25729: CALL_OW 52
// DialogueOn ;
25733: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
25737: LD_EXP 64
25741: PPUSH
25742: LD_STRING DMcn-Interrupt-1
25744: PPUSH
25745: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
25749: LD_EXP 64
25753: PPUSH
25754: LD_STRING DMcn-Interrupt-2
25756: PPUSH
25757: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
25761: LD_EXP 64
25765: PPUSH
25766: LD_STRING DMcn-Interrupt-c-3
25768: PPUSH
25769: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
25773: LD_INT 101
25775: PPUSH
25776: LD_INT 38
25778: PPUSH
25779: LD_INT 2
25781: PPUSH
25782: LD_INT 10
25784: NEG
25785: PPUSH
25786: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
25790: LD_INT 101
25792: PPUSH
25793: LD_INT 38
25795: PPUSH
25796: CALL_OW 84
// wait ( 0 0$2 ) ;
25800: LD_INT 70
25802: PPUSH
25803: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
25807: LD_INT 101
25809: PPUSH
25810: LD_INT 38
25812: PPUSH
25813: LD_INT 2
25815: PPUSH
25816: CALL_OW 331
// RemoveUnit ( veh ) ;
25820: LD_VAR 0 2
25824: PPUSH
25825: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
25829: LD_EXP 64
25833: PPUSH
25834: LD_STRING DMcn-Interrupt-c-4
25836: PPUSH
25837: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
25841: LD_EXP 44
25845: PPUSH
25846: LD_STRING DH-Interrupt-c-5
25848: PPUSH
25849: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
25853: LD_EXP 64
25857: PPUSH
25858: LD_STRING DMcn-Interrupt-c-6
25860: PPUSH
25861: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
25865: LD_EXP 44
25869: PPUSH
25870: LD_STRING DH-Interrupt-c-7
25872: PPUSH
25873: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
25877: LD_EXP 64
25881: PPUSH
25882: LD_STRING DMcn-Interrupt-c-8
25884: PPUSH
25885: CALL_OW 88
// DialogueOff ;
25889: CALL_OW 7
// hasMuchin := true ;
25893: LD_ADDR_EXP 30
25897: PUSH
25898: LD_INT 1
25900: ST_TO_ADDR
// Query ( MuchinInfo ) ;
25901: LD_STRING MuchinInfo
25903: PPUSH
25904: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
25908: LD_STRING M2c
25910: PPUSH
25911: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
25915: LD_INT 35
25917: PPUSH
25918: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
25922: LD_EXP 64
25926: PPUSH
25927: LD_EXP 44
25931: PPUSH
25932: CALL_OW 296
25936: PUSH
25937: LD_INT 6
25939: GREATER
25940: IFFALSE 25956
// ComMoveUnit ( ruDisturb , Heike ) ;
25942: LD_EXP 64
25946: PPUSH
25947: LD_EXP 44
25951: PPUSH
25952: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25956: LD_EXP 14
25960: PPUSH
25961: LD_INT 22
25963: PUSH
25964: LD_INT 2
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 91
25973: PUSH
25974: LD_EXP 64
25978: PUSH
25979: LD_INT 8
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 2
25989: PUSH
25990: LD_INT 25
25992: PUSH
25993: LD_INT 1
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 25
26002: PUSH
26003: LD_INT 11
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 25
26012: PUSH
26013: LD_INT 32
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 25
26022: PUSH
26023: LD_INT 34
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: LIST
26041: PPUSH
26042: CALL_OW 72
26046: IFFALSE 26058
// begin isAlarm := true ;
26048: LD_ADDR_EXP 17
26052: PUSH
26053: LD_INT 1
26055: ST_TO_ADDR
// exit ;
26056: GO 27229
// end ; until UnitFilter ( heikeSquad union Heike , [ f_distxy , 100 , 37 , 6 ] ) ;
26058: LD_EXP 14
26062: PUSH
26063: LD_EXP 44
26067: UNION
26068: PPUSH
26069: LD_INT 92
26071: PUSH
26072: LD_INT 100
26074: PUSH
26075: LD_INT 37
26077: PUSH
26078: LD_INT 6
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: PPUSH
26087: CALL_OW 72
26091: IFFALSE 25915
// PlaceSeeing ( 100 , 37 , 3 , - 10 ) ;
26093: LD_INT 100
26095: PPUSH
26096: LD_INT 37
26098: PPUSH
26099: LD_INT 3
26101: PPUSH
26102: LD_INT 10
26104: NEG
26105: PPUSH
26106: CALL_OW 330
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
26110: LD_ADDR_VAR 0 3
26114: PUSH
26115: LD_EXP 14
26119: PUSH
26120: LD_EXP 44
26124: UNION
26125: PPUSH
26126: LD_INT 25
26128: PUSH
26129: LD_INT 33
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 91
26138: PUSH
26139: LD_INT 6
26141: PUSH
26142: LD_INT 12
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: LIST
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PPUSH
26154: CALL_OW 72
26158: ST_TO_ADDR
// for i in tmp do
26159: LD_ADDR_VAR 0 1
26163: PUSH
26164: LD_VAR 0 3
26168: PUSH
26169: FOR_IN
26170: IFFALSE 26201
// begin SetSide ( i , 3 ) ;
26172: LD_VAR 0 1
26176: PPUSH
26177: LD_INT 3
26179: PPUSH
26180: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
26184: LD_VAR 0 1
26188: PPUSH
26189: LD_INT 101
26191: PPUSH
26192: LD_INT 38
26194: PPUSH
26195: CALL_OW 111
// end ;
26199: GO 26169
26201: POP
26202: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
26203: LD_EXP 64
26207: PPUSH
26208: LD_INT 104
26210: PPUSH
26211: LD_INT 37
26213: PPUSH
26214: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
26218: LD_EXP 64
26222: PPUSH
26223: LD_EXP 44
26227: PPUSH
26228: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
26232: LD_INT 35
26234: PPUSH
26235: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
26239: LD_ADDR_VAR 0 4
26243: PUSH
26244: LD_INT 58
26246: PPUSH
26247: CALL_OW 435
26251: ST_TO_ADDR
// for i in tmp do
26252: LD_ADDR_VAR 0 1
26256: PUSH
26257: LD_VAR 0 3
26261: PUSH
26262: FOR_IN
26263: IFFALSE 26306
// if not HasTask ( i ) then
26265: LD_VAR 0 1
26269: PPUSH
26270: CALL_OW 314
26274: NOT
26275: IFFALSE 26304
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
26277: LD_VAR 0 1
26281: PPUSH
26282: LD_VAR 0 4
26286: PUSH
26287: LD_INT 1
26289: ARRAY
26290: PPUSH
26291: LD_VAR 0 4
26295: PUSH
26296: LD_INT 2
26298: ARRAY
26299: PPUSH
26300: CALL_OW 117
26304: GO 26262
26306: POP
26307: POP
// until not cr ;
26308: LD_VAR 0 4
26312: NOT
26313: IFFALSE 26232
// wait ( 0 0$2 ) ;
26315: LD_INT 70
26317: PPUSH
26318: CALL_OW 67
// RemoveSeeing ( 100 , 37 , 3 ) ;
26322: LD_INT 100
26324: PPUSH
26325: LD_INT 37
26327: PPUSH
26328: LD_INT 3
26330: PPUSH
26331: CALL_OW 331
// for i in tmp do
26335: LD_ADDR_VAR 0 1
26339: PUSH
26340: LD_VAR 0 3
26344: PUSH
26345: FOR_IN
26346: IFFALSE 26362
// SetSide ( i , 2 ) ;
26348: LD_VAR 0 1
26352: PPUSH
26353: LD_INT 2
26355: PPUSH
26356: CALL_OW 235
26360: GO 26345
26362: POP
26363: POP
// if Kaia in tmp then
26364: LD_EXP 49
26368: PUSH
26369: LD_VAR 0 3
26373: IN
26374: IFFALSE 26651
// begin InGameOn ;
26376: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
26380: LD_EXP 49
26384: PPUSH
26385: LD_EXP 64
26389: PPUSH
26390: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
26394: LD_EXP 64
26398: PPUSH
26399: LD_EXP 49
26403: PPUSH
26404: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
26408: LD_EXP 49
26412: PPUSH
26413: LD_EXP 64
26417: PPUSH
26418: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
26422: LD_EXP 49
26426: PPUSH
26427: LD_STRING DK-Assassin-1
26429: PPUSH
26430: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
26434: LD_EXP 64
26438: PPUSH
26439: LD_STRING DMcn-Assassin-2
26441: PPUSH
26442: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
26446: LD_EXP 49
26450: PPUSH
26451: LD_STRING DK-Assassin-3
26453: PPUSH
26454: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
26458: LD_EXP 64
26462: PPUSH
26463: LD_STRING DMcn-Assassin-4
26465: PPUSH
26466: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
26470: LD_EXP 49
26474: PPUSH
26475: LD_STRING DK-Assassin-5
26477: PPUSH
26478: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
26482: LD_EXP 64
26486: PPUSH
26487: LD_STRING DMcn-Assassin-6
26489: PPUSH
26490: CALL_OW 88
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
26494: LD_EXP 49
26498: PUSH
26499: LD_EXP 64
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PPUSH
26508: LD_INT 6
26510: PPUSH
26511: CALL_OW 120
// wait ( 0 0$5 ) ;
26515: LD_INT 175
26517: PPUSH
26518: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
26522: LD_EXP 49
26526: PPUSH
26527: LD_STRING DK-Assassin-7
26529: PPUSH
26530: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
26534: LD_EXP 64
26538: PPUSH
26539: LD_STRING DMcn-Assassin-8
26541: PPUSH
26542: CALL_OW 88
// wait ( 0 0$0.3 ) ;
26546: LD_INT 10
26548: PPUSH
26549: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
26553: LD_EXP 49
26557: PPUSH
26558: LD_STRING DK-Assassin-9
26560: PPUSH
26561: CALL_OW 88
// wait ( 0 0$2 ) ;
26565: LD_INT 70
26567: PPUSH
26568: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
26572: LD_EXP 49
26576: PPUSH
26577: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
26581: LD_EXP 64
26585: PPUSH
26586: CALL_OW 64
// AddComMoveUnit ( Kaia , Heike ) ;
26590: LD_EXP 49
26594: PPUSH
26595: LD_EXP 44
26599: PPUSH
26600: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
26604: LD_EXP 49
26608: PPUSH
26609: LD_STRING DK-Assasin-10
26611: PPUSH
26612: CALL_OW 88
// InGameOff ;
26616: CALL_OW 9
// SetAchievement ( ACH_POKER ) ;
26620: LD_STRING ACH_POKER
26622: PPUSH
26623: CALL_OW 543
// ChangeMissionObjectives ( M2c-out ) ;
26627: LD_STRING M2c-out
26629: PPUSH
26630: CALL_OW 337
// wait ( 0 0$3 ) ;
26634: LD_INT 105
26636: PPUSH
26637: CALL_OW 67
// hasMuchin := false ;
26641: LD_ADDR_EXP 30
26645: PUSH
26646: LD_INT 0
26648: ST_TO_ADDR
// exit ;
26649: GO 27229
// end ; ChangeMissionObjectives ( M2c-out ) ;
26651: LD_STRING M2c-out
26653: PPUSH
26654: CALL_OW 337
// InGameOn ;
26658: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
26662: LD_EXP 64
26666: PPUSH
26667: LD_STRING DMcn-Fail-1
26669: PPUSH
26670: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
26674: LD_VAR 0 3
26678: PPUSH
26679: LD_INT 114
26681: PPUSH
26682: LD_INT 17
26684: PPUSH
26685: CALL_OW 111
// wait ( 0 0$1 ) ;
26689: LD_INT 35
26691: PPUSH
26692: CALL_OW 67
// async ;
26696: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
26697: LD_EXP 64
26701: PPUSH
26702: LD_EXP 44
26706: PPUSH
26707: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
26711: LD_EXP 64
26715: PPUSH
26716: LD_STRING DMcn-Fail-2
26718: PPUSH
26719: CALL_OW 88
// ComStop ( Heike ) ;
26723: LD_EXP 44
26727: PPUSH
26728: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
26732: LD_EXP 44
26736: PPUSH
26737: LD_EXP 64
26741: PPUSH
26742: CALL_OW 179
// sync ;
26746: SYNC
// Say ( Heike , DH-Fail-3 ) ;
26747: LD_EXP 44
26751: PPUSH
26752: LD_STRING DH-Fail-3
26754: PPUSH
26755: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
26759: LD_EXP 64
26763: PPUSH
26764: LD_STRING DMcn-Fail-4
26766: PPUSH
26767: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
26771: LD_EXP 44
26775: PUSH
26776: LD_EXP 64
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PPUSH
26785: LD_INT 41
26787: PPUSH
26788: LD_INT 19
26790: PPUSH
26791: CALL_OW 111
// wait ( 0 0$2 ) ;
26795: LD_INT 70
26797: PPUSH
26798: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
26802: LD_EXP 64
26806: PPUSH
26807: LD_INT 40
26809: PPUSH
26810: LD_INT 19
26812: PPUSH
26813: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
26817: LD_EXP 44
26821: PPUSH
26822: LD_INT 43
26824: PPUSH
26825: LD_INT 21
26827: PPUSH
26828: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
26832: LD_EXP 64
26836: PPUSH
26837: LD_EXP 44
26841: PPUSH
26842: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
26846: LD_EXP 44
26850: PPUSH
26851: LD_EXP 64
26855: PPUSH
26856: CALL_OW 179
// RaiseSailEvent ( centerCamEvent ) ;
26860: LD_INT 3
26862: PPUSH
26863: CALL_OW 427
// wait ( 0 0$2 ) ;
26867: LD_INT 70
26869: PPUSH
26870: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
26874: LD_EXP 64
26878: PPUSH
26879: LD_STRING DMcn-Fail-5
26881: PPUSH
26882: CALL_OW 88
// wait ( 0 0$2 ) ;
26886: LD_INT 70
26888: PPUSH
26889: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
26893: LD_EXP 64
26897: PPUSH
26898: LD_STRING DMcn-Fail-6
26900: PPUSH
26901: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
26905: LD_INT 35
26907: PPUSH
26908: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
26912: LD_EXP 44
26916: PPUSH
26917: LD_INT 43
26919: PPUSH
26920: LD_INT 21
26922: PPUSH
26923: CALL_OW 307
26927: IFFALSE 26905
// case Query ( MuchinQuestion ) of 1 :
26929: LD_STRING MuchinQuestion
26931: PPUSH
26932: CALL_OW 97
26936: PUSH
26937: LD_INT 1
26939: DOUBLE
26940: EQUAL
26941: IFTRUE 26945
26943: GO 27045
26945: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
26946: LD_EXP 64
26950: PPUSH
26951: LD_STRING DMcn-Fail-7
26953: PPUSH
26954: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
26958: LD_EXP 44
26962: PPUSH
26963: LD_STRING DH-Fail-8
26965: PPUSH
26966: CALL_OW 88
// wait ( 0 0$0.3 ) ;
26970: LD_INT 10
26972: PPUSH
26973: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
26977: LD_EXP 44
26981: PPUSH
26982: LD_STRING DH-Fail-9
26984: PPUSH
26985: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
26989: LD_EXP 44
26993: PPUSH
26994: LD_STRING DH-Fail-10
26996: PPUSH
26997: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
27001: LD_EXP 64
27005: PPUSH
27006: LD_STRING DMcn-Fail-11
27008: PPUSH
27009: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
27013: LD_EXP 64
27017: PPUSH
27018: LD_EXP 44
27022: PPUSH
27023: CALL_OW 115
// wait ( 0 0$2 ) ;
27027: LD_INT 70
27029: PPUSH
27030: CALL_OW 67
// KillUnit ( Heike ) ;
27034: LD_EXP 44
27038: PPUSH
27039: CALL_OW 66
// end ; 2 :
27043: GO 27225
27045: LD_INT 2
27047: DOUBLE
27048: EQUAL
27049: IFTRUE 27053
27051: GO 27224
27053: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
27054: LD_EXP 44
27058: PPUSH
27059: LD_STRING DH-Fail-a-8
27061: PPUSH
27062: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
27066: LD_EXP 44
27070: PPUSH
27071: LD_STRING DH-Fail-a-9
27073: PPUSH
27074: CALL_OW 88
// Say ( ruDisturb , DH-Fail-10 ) ;
27078: LD_EXP 64
27082: PPUSH
27083: LD_STRING DH-Fail-10
27085: PPUSH
27086: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
27090: LD_EXP 44
27094: PPUSH
27095: LD_STRING DH-Fail-a-11
27097: PPUSH
27098: CALL_OW 88
// async ;
27102: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
27103: LD_EXP 64
27107: PPUSH
27108: LD_EXP 44
27112: PPUSH
27113: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
27117: LD_EXP 64
27121: PPUSH
27122: LD_EXP 44
27126: PPUSH
27127: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
27131: LD_EXP 64
27135: PPUSH
27136: LD_STRING DH-Fail-12
27138: PPUSH
27139: CALL_OW 88
// sync ;
27143: SYNC
// wait ( 0 0$1 ) ;
27144: LD_INT 35
27146: PPUSH
27147: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
27151: LD_EXP 44
27155: PPUSH
27156: LD_STRING DH-Fail-a-13
27158: PPUSH
27159: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
27163: LD_EXP 64
27167: PPUSH
27168: LD_INT 100
27170: PPUSH
27171: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
27175: LD_EXP 64
27179: PPUSH
27180: LD_STRING DMcn-Fail-a-14
27182: PPUSH
27183: CALL_OW 91
// KillUnit ( ruDisturb ) ;
27187: LD_EXP 64
27191: PPUSH
27192: CALL_OW 66
// wait ( 0 0$1 ) ;
27196: LD_INT 35
27198: PPUSH
27199: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
27203: LD_EXP 44
27207: PPUSH
27208: LD_STRING DH-Fail-a-15
27210: PPUSH
27211: CALL_OW 88
// YouLost ( FailMuchin ) ;
27215: LD_STRING FailMuchin
27217: PPUSH
27218: CALL_OW 104
// end ; end ;
27222: GO 27225
27224: POP
// InGameOff ;
27225: CALL_OW 9
// end ; end_of_file
27229: PPOPN 4
27231: END
// every 0 0$1 marked gameStartEvent do
27232: GO 27234
27234: DISABLE
// begin enable ;
27235: ENABLE
// if not contactWithAmerican then
27236: LD_EXP 25
27240: NOT
27241: IFFALSE 27286
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
27243: LD_ADDR_OWVAR 47
27247: PUSH
27248: LD_STRING #X108-1
27250: PUSH
27251: LD_INT 22
27253: PUSH
27254: LD_INT 5
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 21
27263: PUSH
27264: LD_INT 1
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PPUSH
27275: CALL_OW 69
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: ST_TO_ADDR
27284: GO 27375
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , #X108-2 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ] ;
27286: LD_ADDR_OWVAR 47
27290: PUSH
27291: LD_STRING #X108-1
27293: PUSH
27294: LD_INT 22
27296: PUSH
27297: LD_INT 5
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 21
27306: PUSH
27307: LD_INT 1
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 50
27316: PUSH
27317: EMPTY
27318: LIST
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: LIST
27324: PPUSH
27325: CALL_OW 69
27329: PUSH
27330: LD_STRING #X108-2
27332: PUSH
27333: LD_INT 22
27335: PUSH
27336: LD_INT 4
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 21
27345: PUSH
27346: LD_INT 1
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 50
27355: PUSH
27356: EMPTY
27357: LIST
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: LIST
27363: PPUSH
27364: CALL_OW 69
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: ST_TO_ADDR
// end ; end_of_file
27375: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
27376: LD_EXP 44
27380: PPUSH
27381: LD_INT 59
27383: PPUSH
27384: CALL_OW 308
27388: IFFALSE 27510
27390: GO 27392
27392: DISABLE
// begin Query ( FinalInfo ) ;
27393: LD_STRING FinalInfo
27395: PPUSH
27396: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
27400: LD_INT 59
27402: PPUSH
27403: LD_INT 1
27405: PPUSH
27406: CALL_OW 424
// end_the_mission_allowed := true ;
27410: LD_ADDR_OWVAR 57
27414: PUSH
27415: LD_INT 1
27417: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27418: LD_INT 35
27420: PPUSH
27421: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
27425: LD_INT 22
27427: PUSH
27428: LD_INT 2
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 21
27437: PUSH
27438: LD_INT 1
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 95
27447: PUSH
27448: LD_INT 59
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: LIST
27459: PPUSH
27460: CALL_OW 69
27464: PPUSH
27465: CALL 30750 0 1
27469: PUSH
27470: LD_INT 22
27472: PUSH
27473: LD_INT 2
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 21
27482: PUSH
27483: LD_INT 1
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PPUSH
27494: CALL_OW 69
27498: PPUSH
27499: CALL 30750 0 1
27503: EQUAL
27504: IFFALSE 27418
// EndMission ;
27506: CALL 27518 0 0
// end ;
27510: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
27511: CALL 27518 0 0
// end ;
27515: PPOPN 1
27517: END
// function EndMission ; begin
27518: LD_INT 0
27520: PPUSH
// PlayOriginalMusic ;
27521: CALL 90346 0 0
// if not IsInArea ( Heike , finalArea ) then
27525: LD_EXP 44
27529: PPUSH
27530: LD_INT 59
27532: PPUSH
27533: CALL_OW 308
27537: NOT
27538: IFFALSE 27549
// begin Query ( HeikeOutOfArea ) ;
27540: LD_STRING HeikeOutOfArea
27542: PPUSH
27543: CALL_OW 97
// exit ;
27547: GO 28446
// end ; if not IsOk ( Heike ) then
27549: LD_EXP 44
27553: PPUSH
27554: CALL_OW 302
27558: NOT
27559: IFFALSE 27570
// begin Query ( HeikeIsHurt ) ;
27561: LD_STRING HeikeIsHurt
27563: PPUSH
27564: CALL_OW 97
// exit ;
27568: GO 28446
// end ; if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ) < 6 then
27570: LD_INT 22
27572: PUSH
27573: LD_INT 2
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 21
27582: PUSH
27583: LD_INT 1
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 50
27592: PUSH
27593: EMPTY
27594: LIST
27595: PUSH
27596: LD_INT 95
27598: PUSH
27599: LD_INT 59
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: PPUSH
27612: CALL_OW 69
27616: PPUSH
27617: CALL 30750 0 1
27621: PUSH
27622: LD_INT 6
27624: LESS
27625: IFFALSE 27634
// YouLost ( NeedMorePep ) ;
27627: LD_STRING NeedMorePep
27629: PPUSH
27630: CALL_OW 104
// if tick < 20 20$00 then
27634: LD_OWVAR 1
27638: PUSH
27639: LD_INT 42000
27641: LESS
27642: IFFALSE 27651
// SetAchievement ( ACH_HSPEED_8 ) ;
27644: LD_STRING ACH_HSPEED_8
27646: PPUSH
27647: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
27651: LD_INT 22
27653: PUSH
27654: LD_INT 5
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 21
27663: PUSH
27664: LD_INT 1
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PPUSH
27675: CALL_OW 69
27679: PUSH
27680: LD_INT 0
27682: EQUAL
27683: PUSH
27684: LD_EXP 32
27688: PUSH
27689: LD_INT 0
27691: EQUAL
27692: AND
27693: IFFALSE 27707
// AddMedal ( med1 , 1 ) else
27695: LD_STRING med1
27697: PPUSH
27698: LD_INT 1
27700: PPUSH
27701: CALL_OW 101
27705: GO 27718
// AddMedal ( med1 , - 1 ) ;
27707: LD_STRING med1
27709: PPUSH
27710: LD_INT 1
27712: NEG
27713: PPUSH
27714: CALL_OW 101
// if explosivePlantedList >= 3 then
27718: LD_EXP 29
27722: PUSH
27723: LD_INT 3
27725: GREATEREQUAL
27726: IFFALSE 27740
// AddMedal ( med2 , 1 ) else
27728: LD_STRING med2
27730: PPUSH
27731: LD_INT 1
27733: PPUSH
27734: CALL_OW 101
27738: GO 27774
// if explosivePlantedList < 3 then
27740: LD_EXP 29
27744: PUSH
27745: LD_INT 3
27747: LESS
27748: IFFALSE 27763
// AddMedal ( med2 , - 2 ) else
27750: LD_STRING med2
27752: PPUSH
27753: LD_INT 2
27755: NEG
27756: PPUSH
27757: CALL_OW 101
27761: GO 27774
// AddMedal ( med2 , - 1 ) ;
27763: LD_STRING med2
27765: PPUSH
27766: LD_INT 1
27768: NEG
27769: PPUSH
27770: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
27774: LD_INT 5
27776: PPUSH
27777: LD_INT 2
27779: PPUSH
27780: CALL_OW 321
27784: PUSH
27785: LD_INT 2
27787: EQUAL
27788: IFFALSE 27802
// AddMedal ( med3 , 1 ) else
27790: LD_STRING med3
27792: PPUSH
27793: LD_INT 1
27795: PPUSH
27796: CALL_OW 101
27800: GO 27813
// AddMedal ( med3 , - 1 ) ;
27802: LD_STRING med3
27804: PPUSH
27805: LD_INT 1
27807: NEG
27808: PPUSH
27809: CALL_OW 101
// GiveMedals ( MAIN ) ;
27813: LD_STRING MAIN
27815: PPUSH
27816: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
27820: LD_INT 22
27822: PUSH
27823: LD_INT 2
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 23
27832: PUSH
27833: LD_INT 2
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 21
27842: PUSH
27843: LD_INT 1
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: LIST
27854: PPUSH
27855: CALL_OW 69
27859: PPUSH
27860: CALL_OW 43
// if Doug and GetSide ( Doug ) = 2 then
27864: LD_EXP 58
27868: PUSH
27869: LD_EXP 58
27873: PPUSH
27874: CALL_OW 255
27878: PUSH
27879: LD_INT 2
27881: EQUAL
27882: AND
27883: IFFALSE 27897
// SaveCharacters ( Doug , 08_UsCommander ) ;
27885: LD_EXP 58
27889: PPUSH
27890: LD_STRING 08_UsCommander
27892: PPUSH
27893: CALL_OW 38
// if Harris and GetSide ( Harris ) = 2 then
27897: LD_EXP 57
27901: PUSH
27902: LD_EXP 57
27906: PPUSH
27907: CALL_OW 255
27911: PUSH
27912: LD_INT 2
27914: EQUAL
27915: AND
27916: IFFALSE 27930
// SaveCharacters ( Harris , 08_Harris ) ;
27918: LD_EXP 57
27922: PPUSH
27923: LD_STRING 08_Harris
27925: PPUSH
27926: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff [ Doug , Harris ] , 08_Americans ) ;
27930: LD_INT 22
27932: PUSH
27933: LD_INT 2
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 23
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 21
27952: PUSH
27953: LD_INT 1
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: LIST
27964: PPUSH
27965: CALL_OW 69
27969: PUSH
27970: LD_EXP 58
27974: PUSH
27975: LD_EXP 57
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: DIFF
27984: PPUSH
27985: LD_STRING 08_Americans
27987: PPUSH
27988: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
27992: LD_EXP 44
27996: PPUSH
27997: CALL_OW 248
28001: PUSH
28002: LD_INT 3
28004: EQUAL
28005: IFFALSE 28035
// begin CopySkills ( Heike , HeikeTmp ) ;
28007: LD_EXP 44
28011: PPUSH
28012: LD_EXP 60
28016: PPUSH
28017: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
28021: LD_EXP 60
28025: PPUSH
28026: LD_STRING 08_Heike
28028: PPUSH
28029: CALL_OW 38
// end else
28033: GO 28047
// SaveCharacters ( Heike , 08_Heike ) ;
28035: LD_EXP 44
28039: PPUSH
28040: LD_STRING 08_Heike
28042: PPUSH
28043: CALL_OW 38
// if Aviradze and GetSide ( Aviradze ) = 2 then
28047: LD_EXP 54
28051: PUSH
28052: LD_EXP 54
28056: PPUSH
28057: CALL_OW 255
28061: PUSH
28062: LD_INT 2
28064: EQUAL
28065: AND
28066: IFFALSE 28080
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
28068: LD_EXP 54
28072: PPUSH
28073: LD_STRING 08_Aviradze
28075: PPUSH
28076: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
28080: LD_EXP 47
28084: PUSH
28085: LD_EXP 47
28089: PPUSH
28090: CALL_OW 255
28094: PUSH
28095: LD_INT 2
28097: EQUAL
28098: AND
28099: IFFALSE 28113
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
28101: LD_EXP 47
28105: PPUSH
28106: LD_STRING 08_Ibrahim
28108: PPUSH
28109: CALL_OW 38
// if Kamil and GetSide ( Kamil ) = 2 then
28113: LD_EXP 48
28117: PUSH
28118: LD_EXP 48
28122: PPUSH
28123: CALL_OW 255
28127: PUSH
28128: LD_INT 2
28130: EQUAL
28131: AND
28132: IFFALSE 28146
// SaveCharacters ( Kamil , 08_Kamil ) ;
28134: LD_EXP 48
28138: PPUSH
28139: LD_STRING 08_Kamil
28141: PPUSH
28142: CALL_OW 38
// if Sophia and GetSide ( Sophia ) = 2 then
28146: LD_EXP 50
28150: PUSH
28151: LD_EXP 50
28155: PPUSH
28156: CALL_OW 255
28160: PUSH
28161: LD_INT 2
28163: EQUAL
28164: AND
28165: IFFALSE 28179
// SaveCharacters ( Sophia , 08_Sophia ) ;
28167: LD_EXP 50
28171: PPUSH
28172: LD_STRING 08_Sophia
28174: PPUSH
28175: CALL_OW 38
// if Kaia and GetSide ( Kaia ) = 2 then
28179: LD_EXP 49
28183: PUSH
28184: LD_EXP 49
28188: PPUSH
28189: CALL_OW 255
28193: PUSH
28194: LD_INT 2
28196: EQUAL
28197: AND
28198: IFFALSE 28212
// SaveCharacters ( Kaia , 08_Kaia ) ;
28200: LD_EXP 49
28204: PPUSH
28205: LD_STRING 08_Kaia
28207: PPUSH
28208: CALL_OW 38
// if Givi and GetSide ( Givi ) = 2 then
28212: LD_EXP 45
28216: PUSH
28217: LD_EXP 45
28221: PPUSH
28222: CALL_OW 255
28226: PUSH
28227: LD_INT 2
28229: EQUAL
28230: AND
28231: IFFALSE 28288
// if GetNation ( Givi ) = nation_russian then
28233: LD_EXP 45
28237: PPUSH
28238: CALL_OW 248
28242: PUSH
28243: LD_INT 3
28245: EQUAL
28246: IFFALSE 28276
// begin CopySkills ( Givi , GiviTmp ) ;
28248: LD_EXP 45
28252: PPUSH
28253: LD_EXP 61
28257: PPUSH
28258: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
28262: LD_EXP 61
28266: PPUSH
28267: LD_STRING 08_Givi
28269: PPUSH
28270: CALL_OW 38
// end else
28274: GO 28288
// SaveCharacters ( Givi , 08_Givi ) ;
28276: LD_EXP 45
28280: PPUSH
28281: LD_STRING 08_Givi
28283: PPUSH
28284: CALL_OW 38
// if Mike and GetSide ( Mike ) = 2 then
28288: LD_EXP 46
28292: PUSH
28293: LD_EXP 46
28297: PPUSH
28298: CALL_OW 255
28302: PUSH
28303: LD_INT 2
28305: EQUAL
28306: AND
28307: IFFALSE 28321
// SaveCharacters ( Mike , 08_Mike ) ;
28309: LD_EXP 46
28313: PPUSH
28314: LD_STRING 08_Mike
28316: PPUSH
28317: CALL_OW 38
// if Markov and GetSide ( Markov ) = 2 then
28321: LD_EXP 51
28325: PUSH
28326: LD_EXP 51
28330: PPUSH
28331: CALL_OW 255
28335: PUSH
28336: LD_INT 2
28338: EQUAL
28339: AND
28340: IFFALSE 28354
// SaveCharacters ( Markov , 08_Markov ) ;
28342: LD_EXP 51
28346: PPUSH
28347: LD_STRING 08_Markov
28349: PPUSH
28350: CALL_OW 38
// if Kurt and GetSide ( Kurt ) = 2 then
28354: LD_EXP 53
28358: PUSH
28359: LD_EXP 53
28363: PPUSH
28364: CALL_OW 255
28368: PUSH
28369: LD_INT 2
28371: EQUAL
28372: AND
28373: IFFALSE 28387
// SaveCharacters ( Kurt , 08_Kurt ) ;
28375: LD_EXP 53
28379: PPUSH
28380: LD_STRING 08_Kurt
28382: PPUSH
28383: CALL_OW 38
// if Olaf and GetSide ( Olaf ) = 2 then
28387: LD_EXP 52
28391: PUSH
28392: LD_EXP 52
28396: PPUSH
28397: CALL_OW 255
28401: PUSH
28402: LD_INT 2
28404: EQUAL
28405: AND
28406: IFFALSE 28420
// SaveCharacters ( Olaf , 08_Olaf ) ;
28408: LD_EXP 52
28412: PPUSH
28413: LD_STRING 08_Olaf
28415: PPUSH
28416: CALL_OW 38
// if heikeSecondSquad then
28420: LD_EXP 55
28424: IFFALSE 28438
// SaveCharacters ( heikeSecondSquad , 08_others ) ;
28426: LD_EXP 55
28430: PPUSH
28431: LD_STRING 08_others
28433: PPUSH
28434: CALL_OW 38
// YouWin ;
28438: CALL_OW 103
// DialogueOff ;
28442: CALL_OW 7
// end ; end_of_file
28446: LD_VAR 0 1
28450: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
28451: LD_EXP 5
28455: IFFALSE 28645
28457: GO 28459
28459: DISABLE
28460: LD_INT 0
28462: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
28463: LD_INT 35
28465: PPUSH
28466: LD_INT 2100
28468: PPUSH
28469: CALL_OW 12
28473: PPUSH
28474: CALL_OW 67
// StopOriginalMusic ;
28478: CALL 90331 0 0
// weatherBusy := true ;
28482: LD_ADDR_EXP 37
28486: PUSH
28487: LD_INT 1
28489: ST_TO_ADDR
// for i := 1 to 3 do
28490: LD_ADDR_VAR 0 1
28494: PUSH
28495: DOUBLE
28496: LD_INT 1
28498: DEC
28499: ST_TO_ADDR
28500: LD_INT 3
28502: PUSH
28503: FOR_TO
28504: IFFALSE 28538
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
28506: LD_INT 1
28508: PPUSH
28509: LD_INT 100
28511: PUSH
28512: LD_INT 100
28514: PUSH
28515: LD_VAR 0 1
28519: MUL
28520: PLUS
28521: PPUSH
28522: LD_INT 60
28524: PPUSH
28525: CALL_OW 550
// wait ( 0 0$2 ) ;
28529: LD_INT 70
28531: PPUSH
28532: CALL_OW 67
// end ;
28536: GO 28503
28538: POP
28539: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
28540: LD_STRING ArStormRain.wav
28542: PPUSH
28543: LD_STRING OW_CUSTOM_COMMAND(103);
28545: PPUSH
28546: CALL 90361 0 2
// wait ( 0 0$3 ) ;
28550: LD_INT 105
28552: PPUSH
28553: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
28557: LD_INT 1
28559: PPUSH
28560: LD_INT 900
28562: PPUSH
28563: LD_INT 120
28565: PPUSH
28566: CALL_OW 550
// wait ( 0 0$10 ) ;
28570: LD_INT 350
28572: PPUSH
28573: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
28577: LD_INT 1
28579: PPUSH
28580: LD_INT 1500
28582: PPUSH
28583: LD_INT 300
28585: PPUSH
28586: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
28590: LD_INT 35
28592: PPUSH
28593: CALL_OW 67
// until not weatherBusy ;
28597: LD_EXP 37
28601: NOT
28602: IFFALSE 28590
// SetWeather ( 0 , 0 , 0 ) ;
28604: LD_INT 0
28606: PPUSH
28607: LD_INT 0
28609: PPUSH
28610: LD_INT 0
28612: PPUSH
28613: CALL_OW 550
// wait ( 5 5$00 ) ;
28617: LD_INT 10500
28619: PPUSH
28620: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
28624: LD_STRING ArStormNormal.wav
28626: PPUSH
28627: LD_STRING OW_CUSTOM_COMMAND(103);
28629: PPUSH
28630: CALL 90361 0 2
// wait ( 5 5$00 ) ;
28634: LD_INT 10500
28636: PPUSH
28637: CALL_OW 67
// PlayOriginalMusic ;
28641: CALL 90346 0 0
// end ; end_of_file
28645: PPOPN 1
28647: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28648: LD_INT 0
28650: PPUSH
28651: PPUSH
// if exist_mode then
28652: LD_VAR 0 2
28656: IFFALSE 28681
// unit := CreateCharacter ( prefix & ident ) else
28658: LD_ADDR_VAR 0 5
28662: PUSH
28663: LD_VAR 0 3
28667: PUSH
28668: LD_VAR 0 1
28672: STR
28673: PPUSH
28674: CALL_OW 34
28678: ST_TO_ADDR
28679: GO 28696
// unit := NewCharacter ( ident ) ;
28681: LD_ADDR_VAR 0 5
28685: PUSH
28686: LD_VAR 0 1
28690: PPUSH
28691: CALL_OW 25
28695: ST_TO_ADDR
// result := unit ;
28696: LD_ADDR_VAR 0 4
28700: PUSH
28701: LD_VAR 0 5
28705: ST_TO_ADDR
// end ;
28706: LD_VAR 0 4
28710: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28711: LD_INT 0
28713: PPUSH
28714: PPUSH
// if not side or not nation then
28715: LD_VAR 0 1
28719: NOT
28720: PUSH
28721: LD_VAR 0 2
28725: NOT
28726: OR
28727: IFFALSE 28731
// exit ;
28729: GO 29499
// case nation of nation_american :
28731: LD_VAR 0 2
28735: PUSH
28736: LD_INT 1
28738: DOUBLE
28739: EQUAL
28740: IFTRUE 28744
28742: GO 28958
28744: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28745: LD_ADDR_VAR 0 4
28749: PUSH
28750: LD_INT 35
28752: PUSH
28753: LD_INT 45
28755: PUSH
28756: LD_INT 46
28758: PUSH
28759: LD_INT 47
28761: PUSH
28762: LD_INT 82
28764: PUSH
28765: LD_INT 83
28767: PUSH
28768: LD_INT 84
28770: PUSH
28771: LD_INT 85
28773: PUSH
28774: LD_INT 86
28776: PUSH
28777: LD_INT 1
28779: PUSH
28780: LD_INT 2
28782: PUSH
28783: LD_INT 6
28785: PUSH
28786: LD_INT 15
28788: PUSH
28789: LD_INT 16
28791: PUSH
28792: LD_INT 7
28794: PUSH
28795: LD_INT 12
28797: PUSH
28798: LD_INT 13
28800: PUSH
28801: LD_INT 10
28803: PUSH
28804: LD_INT 14
28806: PUSH
28807: LD_INT 20
28809: PUSH
28810: LD_INT 21
28812: PUSH
28813: LD_INT 22
28815: PUSH
28816: LD_INT 25
28818: PUSH
28819: LD_INT 32
28821: PUSH
28822: LD_INT 27
28824: PUSH
28825: LD_INT 36
28827: PUSH
28828: LD_INT 69
28830: PUSH
28831: LD_INT 39
28833: PUSH
28834: LD_INT 34
28836: PUSH
28837: LD_INT 40
28839: PUSH
28840: LD_INT 48
28842: PUSH
28843: LD_INT 49
28845: PUSH
28846: LD_INT 50
28848: PUSH
28849: LD_INT 51
28851: PUSH
28852: LD_INT 52
28854: PUSH
28855: LD_INT 53
28857: PUSH
28858: LD_INT 54
28860: PUSH
28861: LD_INT 55
28863: PUSH
28864: LD_INT 56
28866: PUSH
28867: LD_INT 57
28869: PUSH
28870: LD_INT 58
28872: PUSH
28873: LD_INT 59
28875: PUSH
28876: LD_INT 60
28878: PUSH
28879: LD_INT 61
28881: PUSH
28882: LD_INT 62
28884: PUSH
28885: LD_INT 80
28887: PUSH
28888: LD_INT 82
28890: PUSH
28891: LD_INT 83
28893: PUSH
28894: LD_INT 84
28896: PUSH
28897: LD_INT 85
28899: PUSH
28900: LD_INT 86
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: ST_TO_ADDR
28956: GO 29423
28958: LD_INT 2
28960: DOUBLE
28961: EQUAL
28962: IFTRUE 28966
28964: GO 29192
28966: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28967: LD_ADDR_VAR 0 4
28971: PUSH
28972: LD_INT 35
28974: PUSH
28975: LD_INT 45
28977: PUSH
28978: LD_INT 46
28980: PUSH
28981: LD_INT 47
28983: PUSH
28984: LD_INT 82
28986: PUSH
28987: LD_INT 83
28989: PUSH
28990: LD_INT 84
28992: PUSH
28993: LD_INT 85
28995: PUSH
28996: LD_INT 87
28998: PUSH
28999: LD_INT 70
29001: PUSH
29002: LD_INT 1
29004: PUSH
29005: LD_INT 11
29007: PUSH
29008: LD_INT 3
29010: PUSH
29011: LD_INT 4
29013: PUSH
29014: LD_INT 5
29016: PUSH
29017: LD_INT 6
29019: PUSH
29020: LD_INT 15
29022: PUSH
29023: LD_INT 18
29025: PUSH
29026: LD_INT 7
29028: PUSH
29029: LD_INT 17
29031: PUSH
29032: LD_INT 8
29034: PUSH
29035: LD_INT 20
29037: PUSH
29038: LD_INT 21
29040: PUSH
29041: LD_INT 22
29043: PUSH
29044: LD_INT 72
29046: PUSH
29047: LD_INT 26
29049: PUSH
29050: LD_INT 69
29052: PUSH
29053: LD_INT 39
29055: PUSH
29056: LD_INT 40
29058: PUSH
29059: LD_INT 41
29061: PUSH
29062: LD_INT 42
29064: PUSH
29065: LD_INT 43
29067: PUSH
29068: LD_INT 48
29070: PUSH
29071: LD_INT 49
29073: PUSH
29074: LD_INT 50
29076: PUSH
29077: LD_INT 51
29079: PUSH
29080: LD_INT 52
29082: PUSH
29083: LD_INT 53
29085: PUSH
29086: LD_INT 54
29088: PUSH
29089: LD_INT 55
29091: PUSH
29092: LD_INT 56
29094: PUSH
29095: LD_INT 60
29097: PUSH
29098: LD_INT 61
29100: PUSH
29101: LD_INT 62
29103: PUSH
29104: LD_INT 66
29106: PUSH
29107: LD_INT 67
29109: PUSH
29110: LD_INT 68
29112: PUSH
29113: LD_INT 81
29115: PUSH
29116: LD_INT 82
29118: PUSH
29119: LD_INT 83
29121: PUSH
29122: LD_INT 84
29124: PUSH
29125: LD_INT 85
29127: PUSH
29128: LD_INT 87
29130: PUSH
29131: LD_INT 88
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: ST_TO_ADDR
29190: GO 29423
29192: LD_INT 3
29194: DOUBLE
29195: EQUAL
29196: IFTRUE 29200
29198: GO 29422
29200: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29201: LD_ADDR_VAR 0 4
29205: PUSH
29206: LD_INT 46
29208: PUSH
29209: LD_INT 47
29211: PUSH
29212: LD_INT 1
29214: PUSH
29215: LD_INT 2
29217: PUSH
29218: LD_INT 82
29220: PUSH
29221: LD_INT 83
29223: PUSH
29224: LD_INT 84
29226: PUSH
29227: LD_INT 85
29229: PUSH
29230: LD_INT 86
29232: PUSH
29233: LD_INT 11
29235: PUSH
29236: LD_INT 9
29238: PUSH
29239: LD_INT 20
29241: PUSH
29242: LD_INT 19
29244: PUSH
29245: LD_INT 21
29247: PUSH
29248: LD_INT 24
29250: PUSH
29251: LD_INT 22
29253: PUSH
29254: LD_INT 25
29256: PUSH
29257: LD_INT 28
29259: PUSH
29260: LD_INT 29
29262: PUSH
29263: LD_INT 30
29265: PUSH
29266: LD_INT 31
29268: PUSH
29269: LD_INT 37
29271: PUSH
29272: LD_INT 38
29274: PUSH
29275: LD_INT 32
29277: PUSH
29278: LD_INT 27
29280: PUSH
29281: LD_INT 33
29283: PUSH
29284: LD_INT 69
29286: PUSH
29287: LD_INT 39
29289: PUSH
29290: LD_INT 34
29292: PUSH
29293: LD_INT 40
29295: PUSH
29296: LD_INT 71
29298: PUSH
29299: LD_INT 23
29301: PUSH
29302: LD_INT 44
29304: PUSH
29305: LD_INT 48
29307: PUSH
29308: LD_INT 49
29310: PUSH
29311: LD_INT 50
29313: PUSH
29314: LD_INT 51
29316: PUSH
29317: LD_INT 52
29319: PUSH
29320: LD_INT 53
29322: PUSH
29323: LD_INT 54
29325: PUSH
29326: LD_INT 55
29328: PUSH
29329: LD_INT 56
29331: PUSH
29332: LD_INT 57
29334: PUSH
29335: LD_INT 58
29337: PUSH
29338: LD_INT 59
29340: PUSH
29341: LD_INT 63
29343: PUSH
29344: LD_INT 64
29346: PUSH
29347: LD_INT 65
29349: PUSH
29350: LD_INT 82
29352: PUSH
29353: LD_INT 83
29355: PUSH
29356: LD_INT 84
29358: PUSH
29359: LD_INT 85
29361: PUSH
29362: LD_INT 86
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: ST_TO_ADDR
29420: GO 29423
29422: POP
// if state > - 1 and state < 3 then
29423: LD_VAR 0 3
29427: PUSH
29428: LD_INT 1
29430: NEG
29431: GREATER
29432: PUSH
29433: LD_VAR 0 3
29437: PUSH
29438: LD_INT 3
29440: LESS
29441: AND
29442: IFFALSE 29499
// for i in result do
29444: LD_ADDR_VAR 0 5
29448: PUSH
29449: LD_VAR 0 4
29453: PUSH
29454: FOR_IN
29455: IFFALSE 29497
// if GetTech ( i , side ) <> state then
29457: LD_VAR 0 5
29461: PPUSH
29462: LD_VAR 0 1
29466: PPUSH
29467: CALL_OW 321
29471: PUSH
29472: LD_VAR 0 3
29476: NONEQUAL
29477: IFFALSE 29495
// result := result diff i ;
29479: LD_ADDR_VAR 0 4
29483: PUSH
29484: LD_VAR 0 4
29488: PUSH
29489: LD_VAR 0 5
29493: DIFF
29494: ST_TO_ADDR
29495: GO 29454
29497: POP
29498: POP
// end ;
29499: LD_VAR 0 4
29503: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29504: LD_INT 0
29506: PPUSH
29507: PPUSH
29508: PPUSH
// result := true ;
29509: LD_ADDR_VAR 0 3
29513: PUSH
29514: LD_INT 1
29516: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29517: LD_ADDR_VAR 0 5
29521: PUSH
29522: LD_VAR 0 2
29526: PPUSH
29527: CALL_OW 480
29531: ST_TO_ADDR
// if not tmp then
29532: LD_VAR 0 5
29536: NOT
29537: IFFALSE 29541
// exit ;
29539: GO 29590
// for i in tmp do
29541: LD_ADDR_VAR 0 4
29545: PUSH
29546: LD_VAR 0 5
29550: PUSH
29551: FOR_IN
29552: IFFALSE 29588
// if GetTech ( i , side ) <> state_researched then
29554: LD_VAR 0 4
29558: PPUSH
29559: LD_VAR 0 1
29563: PPUSH
29564: CALL_OW 321
29568: PUSH
29569: LD_INT 2
29571: NONEQUAL
29572: IFFALSE 29586
// begin result := false ;
29574: LD_ADDR_VAR 0 3
29578: PUSH
29579: LD_INT 0
29581: ST_TO_ADDR
// exit ;
29582: POP
29583: POP
29584: GO 29590
// end ;
29586: GO 29551
29588: POP
29589: POP
// end ;
29590: LD_VAR 0 3
29594: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29595: LD_INT 0
29597: PPUSH
29598: PPUSH
29599: PPUSH
29600: PPUSH
29601: PPUSH
29602: PPUSH
29603: PPUSH
29604: PPUSH
29605: PPUSH
29606: PPUSH
29607: PPUSH
29608: PPUSH
29609: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29610: LD_VAR 0 1
29614: NOT
29615: PUSH
29616: LD_VAR 0 1
29620: PPUSH
29621: CALL_OW 257
29625: PUSH
29626: LD_INT 9
29628: NONEQUAL
29629: OR
29630: IFFALSE 29634
// exit ;
29632: GO 30207
// side := GetSide ( unit ) ;
29634: LD_ADDR_VAR 0 9
29638: PUSH
29639: LD_VAR 0 1
29643: PPUSH
29644: CALL_OW 255
29648: ST_TO_ADDR
// tech_space := tech_spacanom ;
29649: LD_ADDR_VAR 0 12
29653: PUSH
29654: LD_INT 29
29656: ST_TO_ADDR
// tech_time := tech_taurad ;
29657: LD_ADDR_VAR 0 13
29661: PUSH
29662: LD_INT 28
29664: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29665: LD_ADDR_VAR 0 11
29669: PUSH
29670: LD_VAR 0 1
29674: PPUSH
29675: CALL_OW 310
29679: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29680: LD_VAR 0 11
29684: PPUSH
29685: CALL_OW 247
29689: PUSH
29690: LD_INT 2
29692: EQUAL
29693: IFFALSE 29697
// exit ;
29695: GO 30207
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29697: LD_ADDR_VAR 0 8
29701: PUSH
29702: LD_INT 81
29704: PUSH
29705: LD_VAR 0 9
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 3
29716: PUSH
29717: LD_INT 21
29719: PUSH
29720: LD_INT 3
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PPUSH
29735: CALL_OW 69
29739: ST_TO_ADDR
// if not tmp then
29740: LD_VAR 0 8
29744: NOT
29745: IFFALSE 29749
// exit ;
29747: GO 30207
// if in_unit then
29749: LD_VAR 0 11
29753: IFFALSE 29777
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29755: LD_ADDR_VAR 0 10
29759: PUSH
29760: LD_VAR 0 8
29764: PPUSH
29765: LD_VAR 0 11
29769: PPUSH
29770: CALL_OW 74
29774: ST_TO_ADDR
29775: GO 29797
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29777: LD_ADDR_VAR 0 10
29781: PUSH
29782: LD_VAR 0 8
29786: PPUSH
29787: LD_VAR 0 1
29791: PPUSH
29792: CALL_OW 74
29796: ST_TO_ADDR
// if not enemy then
29797: LD_VAR 0 10
29801: NOT
29802: IFFALSE 29806
// exit ;
29804: GO 30207
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29806: LD_VAR 0 11
29810: PUSH
29811: LD_VAR 0 11
29815: PPUSH
29816: LD_VAR 0 10
29820: PPUSH
29821: CALL_OW 296
29825: PUSH
29826: LD_INT 13
29828: GREATER
29829: AND
29830: PUSH
29831: LD_VAR 0 1
29835: PPUSH
29836: LD_VAR 0 10
29840: PPUSH
29841: CALL_OW 296
29845: PUSH
29846: LD_INT 12
29848: GREATER
29849: OR
29850: IFFALSE 29854
// exit ;
29852: GO 30207
// missile := [ 1 ] ;
29854: LD_ADDR_VAR 0 14
29858: PUSH
29859: LD_INT 1
29861: PUSH
29862: EMPTY
29863: LIST
29864: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29865: LD_VAR 0 9
29869: PPUSH
29870: LD_VAR 0 12
29874: PPUSH
29875: CALL_OW 325
29879: IFFALSE 29908
// missile := Replace ( missile , missile + 1 , 2 ) ;
29881: LD_ADDR_VAR 0 14
29885: PUSH
29886: LD_VAR 0 14
29890: PPUSH
29891: LD_VAR 0 14
29895: PUSH
29896: LD_INT 1
29898: PLUS
29899: PPUSH
29900: LD_INT 2
29902: PPUSH
29903: CALL_OW 1
29907: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29908: LD_VAR 0 9
29912: PPUSH
29913: LD_VAR 0 13
29917: PPUSH
29918: CALL_OW 325
29922: PUSH
29923: LD_VAR 0 10
29927: PPUSH
29928: CALL_OW 255
29932: PPUSH
29933: LD_VAR 0 13
29937: PPUSH
29938: CALL_OW 325
29942: NOT
29943: AND
29944: IFFALSE 29973
// missile := Replace ( missile , missile + 1 , 3 ) ;
29946: LD_ADDR_VAR 0 14
29950: PUSH
29951: LD_VAR 0 14
29955: PPUSH
29956: LD_VAR 0 14
29960: PUSH
29961: LD_INT 1
29963: PLUS
29964: PPUSH
29965: LD_INT 3
29967: PPUSH
29968: CALL_OW 1
29972: ST_TO_ADDR
// if missile < 2 then
29973: LD_VAR 0 14
29977: PUSH
29978: LD_INT 2
29980: LESS
29981: IFFALSE 29985
// exit ;
29983: GO 30207
// x := GetX ( enemy ) ;
29985: LD_ADDR_VAR 0 4
29989: PUSH
29990: LD_VAR 0 10
29994: PPUSH
29995: CALL_OW 250
29999: ST_TO_ADDR
// y := GetY ( enemy ) ;
30000: LD_ADDR_VAR 0 5
30004: PUSH
30005: LD_VAR 0 10
30009: PPUSH
30010: CALL_OW 251
30014: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30015: LD_ADDR_VAR 0 6
30019: PUSH
30020: LD_VAR 0 4
30024: PUSH
30025: LD_INT 1
30027: NEG
30028: PPUSH
30029: LD_INT 1
30031: PPUSH
30032: CALL_OW 12
30036: PLUS
30037: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30038: LD_ADDR_VAR 0 7
30042: PUSH
30043: LD_VAR 0 5
30047: PUSH
30048: LD_INT 1
30050: NEG
30051: PPUSH
30052: LD_INT 1
30054: PPUSH
30055: CALL_OW 12
30059: PLUS
30060: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30061: LD_VAR 0 6
30065: PPUSH
30066: LD_VAR 0 7
30070: PPUSH
30071: CALL_OW 488
30075: NOT
30076: IFFALSE 30098
// begin _x := x ;
30078: LD_ADDR_VAR 0 6
30082: PUSH
30083: LD_VAR 0 4
30087: ST_TO_ADDR
// _y := y ;
30088: LD_ADDR_VAR 0 7
30092: PUSH
30093: LD_VAR 0 5
30097: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30098: LD_ADDR_VAR 0 3
30102: PUSH
30103: LD_INT 1
30105: PPUSH
30106: LD_VAR 0 14
30110: PPUSH
30111: CALL_OW 12
30115: ST_TO_ADDR
// case i of 1 :
30116: LD_VAR 0 3
30120: PUSH
30121: LD_INT 1
30123: DOUBLE
30124: EQUAL
30125: IFTRUE 30129
30127: GO 30146
30129: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30130: LD_VAR 0 1
30134: PPUSH
30135: LD_VAR 0 10
30139: PPUSH
30140: CALL_OW 115
30144: GO 30207
30146: LD_INT 2
30148: DOUBLE
30149: EQUAL
30150: IFTRUE 30154
30152: GO 30176
30154: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30155: LD_VAR 0 1
30159: PPUSH
30160: LD_VAR 0 6
30164: PPUSH
30165: LD_VAR 0 7
30169: PPUSH
30170: CALL_OW 153
30174: GO 30207
30176: LD_INT 3
30178: DOUBLE
30179: EQUAL
30180: IFTRUE 30184
30182: GO 30206
30184: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30185: LD_VAR 0 1
30189: PPUSH
30190: LD_VAR 0 6
30194: PPUSH
30195: LD_VAR 0 7
30199: PPUSH
30200: CALL_OW 154
30204: GO 30207
30206: POP
// end ;
30207: LD_VAR 0 2
30211: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30212: LD_INT 0
30214: PPUSH
30215: PPUSH
30216: PPUSH
30217: PPUSH
30218: PPUSH
30219: PPUSH
// if not unit or not building then
30220: LD_VAR 0 1
30224: NOT
30225: PUSH
30226: LD_VAR 0 2
30230: NOT
30231: OR
30232: IFFALSE 30236
// exit ;
30234: GO 30394
// x := GetX ( building ) ;
30236: LD_ADDR_VAR 0 5
30240: PUSH
30241: LD_VAR 0 2
30245: PPUSH
30246: CALL_OW 250
30250: ST_TO_ADDR
// y := GetY ( building ) ;
30251: LD_ADDR_VAR 0 6
30255: PUSH
30256: LD_VAR 0 2
30260: PPUSH
30261: CALL_OW 251
30265: ST_TO_ADDR
// for i = 0 to 5 do
30266: LD_ADDR_VAR 0 4
30270: PUSH
30271: DOUBLE
30272: LD_INT 0
30274: DEC
30275: ST_TO_ADDR
30276: LD_INT 5
30278: PUSH
30279: FOR_TO
30280: IFFALSE 30392
// begin _x := ShiftX ( x , i , 3 ) ;
30282: LD_ADDR_VAR 0 7
30286: PUSH
30287: LD_VAR 0 5
30291: PPUSH
30292: LD_VAR 0 4
30296: PPUSH
30297: LD_INT 3
30299: PPUSH
30300: CALL_OW 272
30304: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30305: LD_ADDR_VAR 0 8
30309: PUSH
30310: LD_VAR 0 6
30314: PPUSH
30315: LD_VAR 0 4
30319: PPUSH
30320: LD_INT 3
30322: PPUSH
30323: CALL_OW 273
30327: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30328: LD_VAR 0 7
30332: PPUSH
30333: LD_VAR 0 8
30337: PPUSH
30338: CALL_OW 488
30342: NOT
30343: IFFALSE 30347
// continue ;
30345: GO 30279
// if HexInfo ( _x , _y ) = 0 then
30347: LD_VAR 0 7
30351: PPUSH
30352: LD_VAR 0 8
30356: PPUSH
30357: CALL_OW 428
30361: PUSH
30362: LD_INT 0
30364: EQUAL
30365: IFFALSE 30390
// begin ComMoveXY ( unit , _x , _y ) ;
30367: LD_VAR 0 1
30371: PPUSH
30372: LD_VAR 0 7
30376: PPUSH
30377: LD_VAR 0 8
30381: PPUSH
30382: CALL_OW 111
// exit ;
30386: POP
30387: POP
30388: GO 30394
// end ; end ;
30390: GO 30279
30392: POP
30393: POP
// end ;
30394: LD_VAR 0 3
30398: RET
// export function ScanBase ( side , base_area ) ; begin
30399: LD_INT 0
30401: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30402: LD_ADDR_VAR 0 3
30406: PUSH
30407: LD_VAR 0 2
30411: PPUSH
30412: LD_INT 81
30414: PUSH
30415: LD_VAR 0 1
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PPUSH
30424: CALL_OW 70
30428: ST_TO_ADDR
// end ;
30429: LD_VAR 0 3
30433: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30434: LD_INT 0
30436: PPUSH
30437: PPUSH
30438: PPUSH
30439: PPUSH
// result := false ;
30440: LD_ADDR_VAR 0 2
30444: PUSH
30445: LD_INT 0
30447: ST_TO_ADDR
// side := GetSide ( unit ) ;
30448: LD_ADDR_VAR 0 3
30452: PUSH
30453: LD_VAR 0 1
30457: PPUSH
30458: CALL_OW 255
30462: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30463: LD_ADDR_VAR 0 4
30467: PUSH
30468: LD_VAR 0 1
30472: PPUSH
30473: CALL_OW 248
30477: ST_TO_ADDR
// case nat of 1 :
30478: LD_VAR 0 4
30482: PUSH
30483: LD_INT 1
30485: DOUBLE
30486: EQUAL
30487: IFTRUE 30491
30489: GO 30502
30491: POP
// tech := tech_lassight ; 2 :
30492: LD_ADDR_VAR 0 5
30496: PUSH
30497: LD_INT 12
30499: ST_TO_ADDR
30500: GO 30541
30502: LD_INT 2
30504: DOUBLE
30505: EQUAL
30506: IFTRUE 30510
30508: GO 30521
30510: POP
// tech := tech_mortar ; 3 :
30511: LD_ADDR_VAR 0 5
30515: PUSH
30516: LD_INT 41
30518: ST_TO_ADDR
30519: GO 30541
30521: LD_INT 3
30523: DOUBLE
30524: EQUAL
30525: IFTRUE 30529
30527: GO 30540
30529: POP
// tech := tech_bazooka ; end ;
30530: LD_ADDR_VAR 0 5
30534: PUSH
30535: LD_INT 44
30537: ST_TO_ADDR
30538: GO 30541
30540: POP
// if Researched ( side , tech ) then
30541: LD_VAR 0 3
30545: PPUSH
30546: LD_VAR 0 5
30550: PPUSH
30551: CALL_OW 325
30555: IFFALSE 30582
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30557: LD_ADDR_VAR 0 2
30561: PUSH
30562: LD_INT 5
30564: PUSH
30565: LD_INT 8
30567: PUSH
30568: LD_INT 9
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: LIST
30575: PUSH
30576: LD_VAR 0 4
30580: ARRAY
30581: ST_TO_ADDR
// end ;
30582: LD_VAR 0 2
30586: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30587: LD_INT 0
30589: PPUSH
30590: PPUSH
30591: PPUSH
// if not mines then
30592: LD_VAR 0 2
30596: NOT
30597: IFFALSE 30601
// exit ;
30599: GO 30745
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30601: LD_ADDR_VAR 0 5
30605: PUSH
30606: LD_INT 81
30608: PUSH
30609: LD_VAR 0 1
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 3
30620: PUSH
30621: LD_INT 21
30623: PUSH
30624: LD_INT 3
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PPUSH
30639: CALL_OW 69
30643: ST_TO_ADDR
// for i in mines do
30644: LD_ADDR_VAR 0 4
30648: PUSH
30649: LD_VAR 0 2
30653: PUSH
30654: FOR_IN
30655: IFFALSE 30743
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30657: LD_VAR 0 4
30661: PUSH
30662: LD_INT 1
30664: ARRAY
30665: PPUSH
30666: LD_VAR 0 4
30670: PUSH
30671: LD_INT 2
30673: ARRAY
30674: PPUSH
30675: CALL_OW 458
30679: NOT
30680: IFFALSE 30684
// continue ;
30682: GO 30654
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30684: LD_VAR 0 4
30688: PUSH
30689: LD_INT 1
30691: ARRAY
30692: PPUSH
30693: LD_VAR 0 4
30697: PUSH
30698: LD_INT 2
30700: ARRAY
30701: PPUSH
30702: CALL_OW 428
30706: PUSH
30707: LD_VAR 0 5
30711: IN
30712: IFFALSE 30741
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30714: LD_VAR 0 4
30718: PUSH
30719: LD_INT 1
30721: ARRAY
30722: PPUSH
30723: LD_VAR 0 4
30727: PUSH
30728: LD_INT 2
30730: ARRAY
30731: PPUSH
30732: LD_VAR 0 1
30736: PPUSH
30737: CALL_OW 456
// end ;
30741: GO 30654
30743: POP
30744: POP
// end ;
30745: LD_VAR 0 3
30749: RET
// export function Count ( array ) ; begin
30750: LD_INT 0
30752: PPUSH
// result := array + 0 ;
30753: LD_ADDR_VAR 0 2
30757: PUSH
30758: LD_VAR 0 1
30762: PUSH
30763: LD_INT 0
30765: PLUS
30766: ST_TO_ADDR
// end ;
30767: LD_VAR 0 2
30771: RET
// export function IsEmpty ( building ) ; begin
30772: LD_INT 0
30774: PPUSH
// if not building then
30775: LD_VAR 0 1
30779: NOT
30780: IFFALSE 30784
// exit ;
30782: GO 30827
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30784: LD_ADDR_VAR 0 2
30788: PUSH
30789: LD_VAR 0 1
30793: PUSH
30794: LD_INT 22
30796: PUSH
30797: LD_VAR 0 1
30801: PPUSH
30802: CALL_OW 255
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 58
30813: PUSH
30814: EMPTY
30815: LIST
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PPUSH
30821: CALL_OW 69
30825: IN
30826: ST_TO_ADDR
// end ;
30827: LD_VAR 0 2
30831: RET
// export function IsNotFull ( building ) ; var places ; begin
30832: LD_INT 0
30834: PPUSH
30835: PPUSH
// if not building then
30836: LD_VAR 0 1
30840: NOT
30841: IFFALSE 30845
// exit ;
30843: GO 31016
// result := false ;
30845: LD_ADDR_VAR 0 2
30849: PUSH
30850: LD_INT 0
30852: ST_TO_ADDR
// places := 0 ;
30853: LD_ADDR_VAR 0 3
30857: PUSH
30858: LD_INT 0
30860: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
30861: LD_VAR 0 1
30865: PPUSH
30866: CALL_OW 266
30870: PUSH
30871: LD_INT 0
30873: DOUBLE
30874: EQUAL
30875: IFTRUE 30933
30877: LD_INT 1
30879: DOUBLE
30880: EQUAL
30881: IFTRUE 30933
30883: LD_INT 6
30885: DOUBLE
30886: EQUAL
30887: IFTRUE 30933
30889: LD_INT 7
30891: DOUBLE
30892: EQUAL
30893: IFTRUE 30933
30895: LD_INT 8
30897: DOUBLE
30898: EQUAL
30899: IFTRUE 30933
30901: LD_INT 4
30903: DOUBLE
30904: EQUAL
30905: IFTRUE 30933
30907: LD_INT 5
30909: DOUBLE
30910: EQUAL
30911: IFTRUE 30933
30913: LD_INT 2
30915: DOUBLE
30916: EQUAL
30917: IFTRUE 30933
30919: LD_INT 3
30921: DOUBLE
30922: EQUAL
30923: IFTRUE 30933
30925: LD_INT 35
30927: DOUBLE
30928: EQUAL
30929: IFTRUE 30933
30931: GO 30944
30933: POP
// places := 6 ; b_bunker , b_breastwork :
30934: LD_ADDR_VAR 0 3
30938: PUSH
30939: LD_INT 6
30941: ST_TO_ADDR
30942: GO 30989
30944: LD_INT 32
30946: DOUBLE
30947: EQUAL
30948: IFTRUE 30958
30950: LD_INT 31
30952: DOUBLE
30953: EQUAL
30954: IFTRUE 30958
30956: GO 30969
30958: POP
// places := 1 ; b_control_tower :
30959: LD_ADDR_VAR 0 3
30963: PUSH
30964: LD_INT 1
30966: ST_TO_ADDR
30967: GO 30989
30969: LD_INT 36
30971: DOUBLE
30972: EQUAL
30973: IFTRUE 30977
30975: GO 30988
30977: POP
// places := 3 ; end ;
30978: LD_ADDR_VAR 0 3
30982: PUSH
30983: LD_INT 3
30985: ST_TO_ADDR
30986: GO 30989
30988: POP
// if places then
30989: LD_VAR 0 3
30993: IFFALSE 31016
// result := UnitsInside ( building ) < places ;
30995: LD_ADDR_VAR 0 2
30999: PUSH
31000: LD_VAR 0 1
31004: PPUSH
31005: CALL_OW 313
31009: PUSH
31010: LD_VAR 0 3
31014: LESS
31015: ST_TO_ADDR
// end ;
31016: LD_VAR 0 2
31020: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31021: LD_INT 0
31023: PPUSH
31024: PPUSH
31025: PPUSH
31026: PPUSH
// tmp := [ ] ;
31027: LD_ADDR_VAR 0 3
31031: PUSH
31032: EMPTY
31033: ST_TO_ADDR
// list := [ ] ;
31034: LD_ADDR_VAR 0 5
31038: PUSH
31039: EMPTY
31040: ST_TO_ADDR
// for i = 16 to 25 do
31041: LD_ADDR_VAR 0 4
31045: PUSH
31046: DOUBLE
31047: LD_INT 16
31049: DEC
31050: ST_TO_ADDR
31051: LD_INT 25
31053: PUSH
31054: FOR_TO
31055: IFFALSE 31128
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31057: LD_ADDR_VAR 0 3
31061: PUSH
31062: LD_VAR 0 3
31066: PUSH
31067: LD_INT 22
31069: PUSH
31070: LD_VAR 0 1
31074: PPUSH
31075: CALL_OW 255
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 91
31086: PUSH
31087: LD_VAR 0 1
31091: PUSH
31092: LD_INT 6
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 30
31102: PUSH
31103: LD_VAR 0 4
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: LIST
31116: PUSH
31117: EMPTY
31118: LIST
31119: PPUSH
31120: CALL_OW 69
31124: ADD
31125: ST_TO_ADDR
31126: GO 31054
31128: POP
31129: POP
// for i = 1 to tmp do
31130: LD_ADDR_VAR 0 4
31134: PUSH
31135: DOUBLE
31136: LD_INT 1
31138: DEC
31139: ST_TO_ADDR
31140: LD_VAR 0 3
31144: PUSH
31145: FOR_TO
31146: IFFALSE 31234
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31148: LD_ADDR_VAR 0 5
31152: PUSH
31153: LD_VAR 0 5
31157: PUSH
31158: LD_VAR 0 3
31162: PUSH
31163: LD_VAR 0 4
31167: ARRAY
31168: PPUSH
31169: CALL_OW 266
31173: PUSH
31174: LD_VAR 0 3
31178: PUSH
31179: LD_VAR 0 4
31183: ARRAY
31184: PPUSH
31185: CALL_OW 250
31189: PUSH
31190: LD_VAR 0 3
31194: PUSH
31195: LD_VAR 0 4
31199: ARRAY
31200: PPUSH
31201: CALL_OW 251
31205: PUSH
31206: LD_VAR 0 3
31210: PUSH
31211: LD_VAR 0 4
31215: ARRAY
31216: PPUSH
31217: CALL_OW 254
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: PUSH
31228: EMPTY
31229: LIST
31230: ADD
31231: ST_TO_ADDR
31232: GO 31145
31234: POP
31235: POP
// result := list ;
31236: LD_ADDR_VAR 0 2
31240: PUSH
31241: LD_VAR 0 5
31245: ST_TO_ADDR
// end ;
31246: LD_VAR 0 2
31250: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31251: LD_INT 0
31253: PPUSH
31254: PPUSH
31255: PPUSH
31256: PPUSH
31257: PPUSH
31258: PPUSH
31259: PPUSH
// if not factory then
31260: LD_VAR 0 1
31264: NOT
31265: IFFALSE 31269
// exit ;
31267: GO 31862
// if control = control_apeman then
31269: LD_VAR 0 4
31273: PUSH
31274: LD_INT 5
31276: EQUAL
31277: IFFALSE 31386
// begin tmp := UnitsInside ( factory ) ;
31279: LD_ADDR_VAR 0 8
31283: PUSH
31284: LD_VAR 0 1
31288: PPUSH
31289: CALL_OW 313
31293: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31294: LD_VAR 0 8
31298: PPUSH
31299: LD_INT 25
31301: PUSH
31302: LD_INT 12
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PPUSH
31309: CALL_OW 72
31313: NOT
31314: IFFALSE 31324
// control := control_manual ;
31316: LD_ADDR_VAR 0 4
31320: PUSH
31321: LD_INT 1
31323: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31324: LD_ADDR_VAR 0 8
31328: PUSH
31329: LD_VAR 0 1
31333: PPUSH
31334: CALL 31021 0 1
31338: ST_TO_ADDR
// if tmp then
31339: LD_VAR 0 8
31343: IFFALSE 31386
// begin for i in tmp do
31345: LD_ADDR_VAR 0 7
31349: PUSH
31350: LD_VAR 0 8
31354: PUSH
31355: FOR_IN
31356: IFFALSE 31384
// if i [ 1 ] = b_ext_radio then
31358: LD_VAR 0 7
31362: PUSH
31363: LD_INT 1
31365: ARRAY
31366: PUSH
31367: LD_INT 22
31369: EQUAL
31370: IFFALSE 31382
// begin control := control_remote ;
31372: LD_ADDR_VAR 0 4
31376: PUSH
31377: LD_INT 2
31379: ST_TO_ADDR
// break ;
31380: GO 31384
// end ;
31382: GO 31355
31384: POP
31385: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31386: LD_VAR 0 1
31390: PPUSH
31391: LD_VAR 0 2
31395: PPUSH
31396: LD_VAR 0 3
31400: PPUSH
31401: LD_VAR 0 4
31405: PPUSH
31406: LD_VAR 0 5
31410: PPUSH
31411: CALL_OW 448
31415: IFFALSE 31450
// begin result := [ chassis , engine , control , weapon ] ;
31417: LD_ADDR_VAR 0 6
31421: PUSH
31422: LD_VAR 0 2
31426: PUSH
31427: LD_VAR 0 3
31431: PUSH
31432: LD_VAR 0 4
31436: PUSH
31437: LD_VAR 0 5
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: ST_TO_ADDR
// exit ;
31448: GO 31862
// end ; _chassis := AvailableChassisList ( factory ) ;
31450: LD_ADDR_VAR 0 9
31454: PUSH
31455: LD_VAR 0 1
31459: PPUSH
31460: CALL_OW 475
31464: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31465: LD_ADDR_VAR 0 11
31469: PUSH
31470: LD_VAR 0 1
31474: PPUSH
31475: CALL_OW 476
31479: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31480: LD_ADDR_VAR 0 12
31484: PUSH
31485: LD_VAR 0 1
31489: PPUSH
31490: CALL_OW 477
31494: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31495: LD_ADDR_VAR 0 10
31499: PUSH
31500: LD_VAR 0 1
31504: PPUSH
31505: CALL_OW 478
31509: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31510: LD_VAR 0 9
31514: NOT
31515: PUSH
31516: LD_VAR 0 11
31520: NOT
31521: OR
31522: PUSH
31523: LD_VAR 0 12
31527: NOT
31528: OR
31529: PUSH
31530: LD_VAR 0 10
31534: NOT
31535: OR
31536: IFFALSE 31571
// begin result := [ chassis , engine , control , weapon ] ;
31538: LD_ADDR_VAR 0 6
31542: PUSH
31543: LD_VAR 0 2
31547: PUSH
31548: LD_VAR 0 3
31552: PUSH
31553: LD_VAR 0 4
31557: PUSH
31558: LD_VAR 0 5
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: ST_TO_ADDR
// exit ;
31569: GO 31862
// end ; if not chassis in _chassis then
31571: LD_VAR 0 2
31575: PUSH
31576: LD_VAR 0 9
31580: IN
31581: NOT
31582: IFFALSE 31608
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31584: LD_ADDR_VAR 0 2
31588: PUSH
31589: LD_VAR 0 9
31593: PUSH
31594: LD_INT 1
31596: PPUSH
31597: LD_VAR 0 9
31601: PPUSH
31602: CALL_OW 12
31606: ARRAY
31607: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31608: LD_VAR 0 2
31612: PPUSH
31613: LD_VAR 0 3
31617: PPUSH
31618: CALL 31867 0 2
31622: NOT
31623: IFFALSE 31682
// repeat engine := _engine [ 1 ] ;
31625: LD_ADDR_VAR 0 3
31629: PUSH
31630: LD_VAR 0 11
31634: PUSH
31635: LD_INT 1
31637: ARRAY
31638: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31639: LD_ADDR_VAR 0 11
31643: PUSH
31644: LD_VAR 0 11
31648: PPUSH
31649: LD_INT 1
31651: PPUSH
31652: CALL_OW 3
31656: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31657: LD_VAR 0 2
31661: PPUSH
31662: LD_VAR 0 3
31666: PPUSH
31667: CALL 31867 0 2
31671: PUSH
31672: LD_VAR 0 11
31676: PUSH
31677: EMPTY
31678: EQUAL
31679: OR
31680: IFFALSE 31625
// if not control in _control then
31682: LD_VAR 0 4
31686: PUSH
31687: LD_VAR 0 12
31691: IN
31692: NOT
31693: IFFALSE 31719
// control := _control [ rand ( 1 , _control ) ] ;
31695: LD_ADDR_VAR 0 4
31699: PUSH
31700: LD_VAR 0 12
31704: PUSH
31705: LD_INT 1
31707: PPUSH
31708: LD_VAR 0 12
31712: PPUSH
31713: CALL_OW 12
31717: ARRAY
31718: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31719: LD_VAR 0 2
31723: PPUSH
31724: LD_VAR 0 5
31728: PPUSH
31729: CALL 32087 0 2
31733: NOT
31734: IFFALSE 31793
// repeat weapon := _weapon [ 1 ] ;
31736: LD_ADDR_VAR 0 5
31740: PUSH
31741: LD_VAR 0 10
31745: PUSH
31746: LD_INT 1
31748: ARRAY
31749: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31750: LD_ADDR_VAR 0 10
31754: PUSH
31755: LD_VAR 0 10
31759: PPUSH
31760: LD_INT 1
31762: PPUSH
31763: CALL_OW 3
31767: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31768: LD_VAR 0 2
31772: PPUSH
31773: LD_VAR 0 5
31777: PPUSH
31778: CALL 32087 0 2
31782: PUSH
31783: LD_VAR 0 10
31787: PUSH
31788: EMPTY
31789: EQUAL
31790: OR
31791: IFFALSE 31736
// result := [ ] ;
31793: LD_ADDR_VAR 0 6
31797: PUSH
31798: EMPTY
31799: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31800: LD_VAR 0 1
31804: PPUSH
31805: LD_VAR 0 2
31809: PPUSH
31810: LD_VAR 0 3
31814: PPUSH
31815: LD_VAR 0 4
31819: PPUSH
31820: LD_VAR 0 5
31824: PPUSH
31825: CALL_OW 448
31829: IFFALSE 31862
// result := [ chassis , engine , control , weapon ] ;
31831: LD_ADDR_VAR 0 6
31835: PUSH
31836: LD_VAR 0 2
31840: PUSH
31841: LD_VAR 0 3
31845: PUSH
31846: LD_VAR 0 4
31850: PUSH
31851: LD_VAR 0 5
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: ST_TO_ADDR
// end ;
31862: LD_VAR 0 6
31866: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31867: LD_INT 0
31869: PPUSH
// if not chassis or not engine then
31870: LD_VAR 0 1
31874: NOT
31875: PUSH
31876: LD_VAR 0 2
31880: NOT
31881: OR
31882: IFFALSE 31886
// exit ;
31884: GO 32082
// case engine of engine_solar :
31886: LD_VAR 0 2
31890: PUSH
31891: LD_INT 2
31893: DOUBLE
31894: EQUAL
31895: IFTRUE 31899
31897: GO 31937
31899: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31900: LD_ADDR_VAR 0 3
31904: PUSH
31905: LD_INT 11
31907: PUSH
31908: LD_INT 12
31910: PUSH
31911: LD_INT 13
31913: PUSH
31914: LD_INT 14
31916: PUSH
31917: LD_INT 1
31919: PUSH
31920: LD_INT 2
31922: PUSH
31923: LD_INT 3
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: ST_TO_ADDR
31935: GO 32066
31937: LD_INT 1
31939: DOUBLE
31940: EQUAL
31941: IFTRUE 31945
31943: GO 32007
31945: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31946: LD_ADDR_VAR 0 3
31950: PUSH
31951: LD_INT 11
31953: PUSH
31954: LD_INT 12
31956: PUSH
31957: LD_INT 13
31959: PUSH
31960: LD_INT 14
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: LD_INT 2
31968: PUSH
31969: LD_INT 3
31971: PUSH
31972: LD_INT 4
31974: PUSH
31975: LD_INT 5
31977: PUSH
31978: LD_INT 21
31980: PUSH
31981: LD_INT 23
31983: PUSH
31984: LD_INT 22
31986: PUSH
31987: LD_INT 24
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: ST_TO_ADDR
32005: GO 32066
32007: LD_INT 3
32009: DOUBLE
32010: EQUAL
32011: IFTRUE 32015
32013: GO 32065
32015: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32016: LD_ADDR_VAR 0 3
32020: PUSH
32021: LD_INT 13
32023: PUSH
32024: LD_INT 14
32026: PUSH
32027: LD_INT 2
32029: PUSH
32030: LD_INT 3
32032: PUSH
32033: LD_INT 4
32035: PUSH
32036: LD_INT 5
32038: PUSH
32039: LD_INT 21
32041: PUSH
32042: LD_INT 22
32044: PUSH
32045: LD_INT 23
32047: PUSH
32048: LD_INT 24
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: ST_TO_ADDR
32063: GO 32066
32065: POP
// result := ( chassis in result ) ;
32066: LD_ADDR_VAR 0 3
32070: PUSH
32071: LD_VAR 0 1
32075: PUSH
32076: LD_VAR 0 3
32080: IN
32081: ST_TO_ADDR
// end ;
32082: LD_VAR 0 3
32086: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32087: LD_INT 0
32089: PPUSH
// if not chassis or not weapon then
32090: LD_VAR 0 1
32094: NOT
32095: PUSH
32096: LD_VAR 0 2
32100: NOT
32101: OR
32102: IFFALSE 32106
// exit ;
32104: GO 33166
// case weapon of us_machine_gun :
32106: LD_VAR 0 2
32110: PUSH
32111: LD_INT 2
32113: DOUBLE
32114: EQUAL
32115: IFTRUE 32119
32117: GO 32149
32119: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32120: LD_ADDR_VAR 0 3
32124: PUSH
32125: LD_INT 1
32127: PUSH
32128: LD_INT 2
32130: PUSH
32131: LD_INT 3
32133: PUSH
32134: LD_INT 4
32136: PUSH
32137: LD_INT 5
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: ST_TO_ADDR
32147: GO 33150
32149: LD_INT 3
32151: DOUBLE
32152: EQUAL
32153: IFTRUE 32157
32155: GO 32187
32157: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32158: LD_ADDR_VAR 0 3
32162: PUSH
32163: LD_INT 1
32165: PUSH
32166: LD_INT 2
32168: PUSH
32169: LD_INT 3
32171: PUSH
32172: LD_INT 4
32174: PUSH
32175: LD_INT 5
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: ST_TO_ADDR
32185: GO 33150
32187: LD_INT 11
32189: DOUBLE
32190: EQUAL
32191: IFTRUE 32195
32193: GO 32225
32195: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32196: LD_ADDR_VAR 0 3
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: LD_INT 2
32206: PUSH
32207: LD_INT 3
32209: PUSH
32210: LD_INT 4
32212: PUSH
32213: LD_INT 5
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: ST_TO_ADDR
32223: GO 33150
32225: LD_INT 4
32227: DOUBLE
32228: EQUAL
32229: IFTRUE 32233
32231: GO 32259
32233: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32234: LD_ADDR_VAR 0 3
32238: PUSH
32239: LD_INT 2
32241: PUSH
32242: LD_INT 3
32244: PUSH
32245: LD_INT 4
32247: PUSH
32248: LD_INT 5
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: ST_TO_ADDR
32257: GO 33150
32259: LD_INT 5
32261: DOUBLE
32262: EQUAL
32263: IFTRUE 32267
32265: GO 32293
32267: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32268: LD_ADDR_VAR 0 3
32272: PUSH
32273: LD_INT 2
32275: PUSH
32276: LD_INT 3
32278: PUSH
32279: LD_INT 4
32281: PUSH
32282: LD_INT 5
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: ST_TO_ADDR
32291: GO 33150
32293: LD_INT 9
32295: DOUBLE
32296: EQUAL
32297: IFTRUE 32301
32299: GO 32327
32301: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32302: LD_ADDR_VAR 0 3
32306: PUSH
32307: LD_INT 2
32309: PUSH
32310: LD_INT 3
32312: PUSH
32313: LD_INT 4
32315: PUSH
32316: LD_INT 5
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: ST_TO_ADDR
32325: GO 33150
32327: LD_INT 7
32329: DOUBLE
32330: EQUAL
32331: IFTRUE 32335
32333: GO 32361
32335: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32336: LD_ADDR_VAR 0 3
32340: PUSH
32341: LD_INT 2
32343: PUSH
32344: LD_INT 3
32346: PUSH
32347: LD_INT 4
32349: PUSH
32350: LD_INT 5
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: ST_TO_ADDR
32359: GO 33150
32361: LD_INT 12
32363: DOUBLE
32364: EQUAL
32365: IFTRUE 32369
32367: GO 32395
32369: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32370: LD_ADDR_VAR 0 3
32374: PUSH
32375: LD_INT 2
32377: PUSH
32378: LD_INT 3
32380: PUSH
32381: LD_INT 4
32383: PUSH
32384: LD_INT 5
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: ST_TO_ADDR
32393: GO 33150
32395: LD_INT 13
32397: DOUBLE
32398: EQUAL
32399: IFTRUE 32403
32401: GO 32429
32403: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32404: LD_ADDR_VAR 0 3
32408: PUSH
32409: LD_INT 2
32411: PUSH
32412: LD_INT 3
32414: PUSH
32415: LD_INT 4
32417: PUSH
32418: LD_INT 5
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: ST_TO_ADDR
32427: GO 33150
32429: LD_INT 14
32431: DOUBLE
32432: EQUAL
32433: IFTRUE 32437
32435: GO 32455
32437: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32438: LD_ADDR_VAR 0 3
32442: PUSH
32443: LD_INT 4
32445: PUSH
32446: LD_INT 5
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: ST_TO_ADDR
32453: GO 33150
32455: LD_INT 6
32457: DOUBLE
32458: EQUAL
32459: IFTRUE 32463
32461: GO 32481
32463: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32464: LD_ADDR_VAR 0 3
32468: PUSH
32469: LD_INT 4
32471: PUSH
32472: LD_INT 5
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: ST_TO_ADDR
32479: GO 33150
32481: LD_INT 10
32483: DOUBLE
32484: EQUAL
32485: IFTRUE 32489
32487: GO 32507
32489: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32490: LD_ADDR_VAR 0 3
32494: PUSH
32495: LD_INT 4
32497: PUSH
32498: LD_INT 5
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: ST_TO_ADDR
32505: GO 33150
32507: LD_INT 22
32509: DOUBLE
32510: EQUAL
32511: IFTRUE 32515
32513: GO 32541
32515: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32516: LD_ADDR_VAR 0 3
32520: PUSH
32521: LD_INT 11
32523: PUSH
32524: LD_INT 12
32526: PUSH
32527: LD_INT 13
32529: PUSH
32530: LD_INT 14
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: ST_TO_ADDR
32539: GO 33150
32541: LD_INT 23
32543: DOUBLE
32544: EQUAL
32545: IFTRUE 32549
32547: GO 32575
32549: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32550: LD_ADDR_VAR 0 3
32554: PUSH
32555: LD_INT 11
32557: PUSH
32558: LD_INT 12
32560: PUSH
32561: LD_INT 13
32563: PUSH
32564: LD_INT 14
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: ST_TO_ADDR
32573: GO 33150
32575: LD_INT 24
32577: DOUBLE
32578: EQUAL
32579: IFTRUE 32583
32581: GO 32609
32583: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32584: LD_ADDR_VAR 0 3
32588: PUSH
32589: LD_INT 11
32591: PUSH
32592: LD_INT 12
32594: PUSH
32595: LD_INT 13
32597: PUSH
32598: LD_INT 14
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: ST_TO_ADDR
32607: GO 33150
32609: LD_INT 30
32611: DOUBLE
32612: EQUAL
32613: IFTRUE 32617
32615: GO 32643
32617: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32618: LD_ADDR_VAR 0 3
32622: PUSH
32623: LD_INT 11
32625: PUSH
32626: LD_INT 12
32628: PUSH
32629: LD_INT 13
32631: PUSH
32632: LD_INT 14
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: ST_TO_ADDR
32641: GO 33150
32643: LD_INT 25
32645: DOUBLE
32646: EQUAL
32647: IFTRUE 32651
32649: GO 32669
32651: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32652: LD_ADDR_VAR 0 3
32656: PUSH
32657: LD_INT 13
32659: PUSH
32660: LD_INT 14
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: ST_TO_ADDR
32667: GO 33150
32669: LD_INT 27
32671: DOUBLE
32672: EQUAL
32673: IFTRUE 32677
32675: GO 32695
32677: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32678: LD_ADDR_VAR 0 3
32682: PUSH
32683: LD_INT 13
32685: PUSH
32686: LD_INT 14
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: ST_TO_ADDR
32693: GO 33150
32695: LD_INT 92
32697: DOUBLE
32698: EQUAL
32699: IFTRUE 32703
32701: GO 32729
32703: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32704: LD_ADDR_VAR 0 3
32708: PUSH
32709: LD_INT 11
32711: PUSH
32712: LD_INT 12
32714: PUSH
32715: LD_INT 13
32717: PUSH
32718: LD_INT 14
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: ST_TO_ADDR
32727: GO 33150
32729: LD_INT 28
32731: DOUBLE
32732: EQUAL
32733: IFTRUE 32737
32735: GO 32755
32737: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32738: LD_ADDR_VAR 0 3
32742: PUSH
32743: LD_INT 13
32745: PUSH
32746: LD_INT 14
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: ST_TO_ADDR
32753: GO 33150
32755: LD_INT 29
32757: DOUBLE
32758: EQUAL
32759: IFTRUE 32763
32761: GO 32781
32763: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32764: LD_ADDR_VAR 0 3
32768: PUSH
32769: LD_INT 13
32771: PUSH
32772: LD_INT 14
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: ST_TO_ADDR
32779: GO 33150
32781: LD_INT 31
32783: DOUBLE
32784: EQUAL
32785: IFTRUE 32789
32787: GO 32807
32789: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32790: LD_ADDR_VAR 0 3
32794: PUSH
32795: LD_INT 13
32797: PUSH
32798: LD_INT 14
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: ST_TO_ADDR
32805: GO 33150
32807: LD_INT 26
32809: DOUBLE
32810: EQUAL
32811: IFTRUE 32815
32813: GO 32833
32815: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32816: LD_ADDR_VAR 0 3
32820: PUSH
32821: LD_INT 13
32823: PUSH
32824: LD_INT 14
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: ST_TO_ADDR
32831: GO 33150
32833: LD_INT 42
32835: DOUBLE
32836: EQUAL
32837: IFTRUE 32841
32839: GO 32867
32841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32842: LD_ADDR_VAR 0 3
32846: PUSH
32847: LD_INT 21
32849: PUSH
32850: LD_INT 22
32852: PUSH
32853: LD_INT 23
32855: PUSH
32856: LD_INT 24
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: ST_TO_ADDR
32865: GO 33150
32867: LD_INT 43
32869: DOUBLE
32870: EQUAL
32871: IFTRUE 32875
32873: GO 32901
32875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32876: LD_ADDR_VAR 0 3
32880: PUSH
32881: LD_INT 21
32883: PUSH
32884: LD_INT 22
32886: PUSH
32887: LD_INT 23
32889: PUSH
32890: LD_INT 24
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: ST_TO_ADDR
32899: GO 33150
32901: LD_INT 44
32903: DOUBLE
32904: EQUAL
32905: IFTRUE 32909
32907: GO 32935
32909: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32910: LD_ADDR_VAR 0 3
32914: PUSH
32915: LD_INT 21
32917: PUSH
32918: LD_INT 22
32920: PUSH
32921: LD_INT 23
32923: PUSH
32924: LD_INT 24
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: ST_TO_ADDR
32933: GO 33150
32935: LD_INT 45
32937: DOUBLE
32938: EQUAL
32939: IFTRUE 32943
32941: GO 32969
32943: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32944: LD_ADDR_VAR 0 3
32948: PUSH
32949: LD_INT 21
32951: PUSH
32952: LD_INT 22
32954: PUSH
32955: LD_INT 23
32957: PUSH
32958: LD_INT 24
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: ST_TO_ADDR
32967: GO 33150
32969: LD_INT 49
32971: DOUBLE
32972: EQUAL
32973: IFTRUE 32977
32975: GO 33003
32977: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32978: LD_ADDR_VAR 0 3
32982: PUSH
32983: LD_INT 21
32985: PUSH
32986: LD_INT 22
32988: PUSH
32989: LD_INT 23
32991: PUSH
32992: LD_INT 24
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: ST_TO_ADDR
33001: GO 33150
33003: LD_INT 51
33005: DOUBLE
33006: EQUAL
33007: IFTRUE 33011
33009: GO 33037
33011: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33012: LD_ADDR_VAR 0 3
33016: PUSH
33017: LD_INT 21
33019: PUSH
33020: LD_INT 22
33022: PUSH
33023: LD_INT 23
33025: PUSH
33026: LD_INT 24
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: ST_TO_ADDR
33035: GO 33150
33037: LD_INT 52
33039: DOUBLE
33040: EQUAL
33041: IFTRUE 33045
33043: GO 33071
33045: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33046: LD_ADDR_VAR 0 3
33050: PUSH
33051: LD_INT 21
33053: PUSH
33054: LD_INT 22
33056: PUSH
33057: LD_INT 23
33059: PUSH
33060: LD_INT 24
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: ST_TO_ADDR
33069: GO 33150
33071: LD_INT 53
33073: DOUBLE
33074: EQUAL
33075: IFTRUE 33079
33077: GO 33097
33079: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33080: LD_ADDR_VAR 0 3
33084: PUSH
33085: LD_INT 23
33087: PUSH
33088: LD_INT 24
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: ST_TO_ADDR
33095: GO 33150
33097: LD_INT 46
33099: DOUBLE
33100: EQUAL
33101: IFTRUE 33105
33103: GO 33123
33105: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33106: LD_ADDR_VAR 0 3
33110: PUSH
33111: LD_INT 23
33113: PUSH
33114: LD_INT 24
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: ST_TO_ADDR
33121: GO 33150
33123: LD_INT 47
33125: DOUBLE
33126: EQUAL
33127: IFTRUE 33131
33129: GO 33149
33131: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33132: LD_ADDR_VAR 0 3
33136: PUSH
33137: LD_INT 23
33139: PUSH
33140: LD_INT 24
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: ST_TO_ADDR
33147: GO 33150
33149: POP
// result := ( chassis in result ) ;
33150: LD_ADDR_VAR 0 3
33154: PUSH
33155: LD_VAR 0 1
33159: PUSH
33160: LD_VAR 0 3
33164: IN
33165: ST_TO_ADDR
// end ;
33166: LD_VAR 0 3
33170: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33171: LD_INT 0
33173: PPUSH
33174: PPUSH
33175: PPUSH
33176: PPUSH
33177: PPUSH
33178: PPUSH
33179: PPUSH
// result := array ;
33180: LD_ADDR_VAR 0 5
33184: PUSH
33185: LD_VAR 0 1
33189: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33190: LD_VAR 0 1
33194: NOT
33195: PUSH
33196: LD_VAR 0 2
33200: NOT
33201: OR
33202: PUSH
33203: LD_VAR 0 3
33207: NOT
33208: OR
33209: PUSH
33210: LD_VAR 0 2
33214: PUSH
33215: LD_VAR 0 1
33219: GREATER
33220: OR
33221: PUSH
33222: LD_VAR 0 3
33226: PUSH
33227: LD_VAR 0 1
33231: GREATER
33232: OR
33233: IFFALSE 33237
// exit ;
33235: GO 33533
// if direction then
33237: LD_VAR 0 4
33241: IFFALSE 33305
// begin d := 1 ;
33243: LD_ADDR_VAR 0 9
33247: PUSH
33248: LD_INT 1
33250: ST_TO_ADDR
// if i_from > i_to then
33251: LD_VAR 0 2
33255: PUSH
33256: LD_VAR 0 3
33260: GREATER
33261: IFFALSE 33287
// length := ( array - i_from ) + i_to else
33263: LD_ADDR_VAR 0 11
33267: PUSH
33268: LD_VAR 0 1
33272: PUSH
33273: LD_VAR 0 2
33277: MINUS
33278: PUSH
33279: LD_VAR 0 3
33283: PLUS
33284: ST_TO_ADDR
33285: GO 33303
// length := i_to - i_from ;
33287: LD_ADDR_VAR 0 11
33291: PUSH
33292: LD_VAR 0 3
33296: PUSH
33297: LD_VAR 0 2
33301: MINUS
33302: ST_TO_ADDR
// end else
33303: GO 33366
// begin d := - 1 ;
33305: LD_ADDR_VAR 0 9
33309: PUSH
33310: LD_INT 1
33312: NEG
33313: ST_TO_ADDR
// if i_from > i_to then
33314: LD_VAR 0 2
33318: PUSH
33319: LD_VAR 0 3
33323: GREATER
33324: IFFALSE 33344
// length := i_from - i_to else
33326: LD_ADDR_VAR 0 11
33330: PUSH
33331: LD_VAR 0 2
33335: PUSH
33336: LD_VAR 0 3
33340: MINUS
33341: ST_TO_ADDR
33342: GO 33366
// length := ( array - i_to ) + i_from ;
33344: LD_ADDR_VAR 0 11
33348: PUSH
33349: LD_VAR 0 1
33353: PUSH
33354: LD_VAR 0 3
33358: MINUS
33359: PUSH
33360: LD_VAR 0 2
33364: PLUS
33365: ST_TO_ADDR
// end ; if not length then
33366: LD_VAR 0 11
33370: NOT
33371: IFFALSE 33375
// exit ;
33373: GO 33533
// tmp := array ;
33375: LD_ADDR_VAR 0 10
33379: PUSH
33380: LD_VAR 0 1
33384: ST_TO_ADDR
// for i = 1 to length do
33385: LD_ADDR_VAR 0 6
33389: PUSH
33390: DOUBLE
33391: LD_INT 1
33393: DEC
33394: ST_TO_ADDR
33395: LD_VAR 0 11
33399: PUSH
33400: FOR_TO
33401: IFFALSE 33521
// begin for j = 1 to array do
33403: LD_ADDR_VAR 0 7
33407: PUSH
33408: DOUBLE
33409: LD_INT 1
33411: DEC
33412: ST_TO_ADDR
33413: LD_VAR 0 1
33417: PUSH
33418: FOR_TO
33419: IFFALSE 33507
// begin k := j + d ;
33421: LD_ADDR_VAR 0 8
33425: PUSH
33426: LD_VAR 0 7
33430: PUSH
33431: LD_VAR 0 9
33435: PLUS
33436: ST_TO_ADDR
// if k > array then
33437: LD_VAR 0 8
33441: PUSH
33442: LD_VAR 0 1
33446: GREATER
33447: IFFALSE 33457
// k := 1 ;
33449: LD_ADDR_VAR 0 8
33453: PUSH
33454: LD_INT 1
33456: ST_TO_ADDR
// if not k then
33457: LD_VAR 0 8
33461: NOT
33462: IFFALSE 33474
// k := array ;
33464: LD_ADDR_VAR 0 8
33468: PUSH
33469: LD_VAR 0 1
33473: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33474: LD_ADDR_VAR 0 10
33478: PUSH
33479: LD_VAR 0 10
33483: PPUSH
33484: LD_VAR 0 8
33488: PPUSH
33489: LD_VAR 0 1
33493: PUSH
33494: LD_VAR 0 7
33498: ARRAY
33499: PPUSH
33500: CALL_OW 1
33504: ST_TO_ADDR
// end ;
33505: GO 33418
33507: POP
33508: POP
// array := tmp ;
33509: LD_ADDR_VAR 0 1
33513: PUSH
33514: LD_VAR 0 10
33518: ST_TO_ADDR
// end ;
33519: GO 33400
33521: POP
33522: POP
// result := array ;
33523: LD_ADDR_VAR 0 5
33527: PUSH
33528: LD_VAR 0 1
33532: ST_TO_ADDR
// end ;
33533: LD_VAR 0 5
33537: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33538: LD_INT 0
33540: PPUSH
33541: PPUSH
// result := 0 ;
33542: LD_ADDR_VAR 0 3
33546: PUSH
33547: LD_INT 0
33549: ST_TO_ADDR
// if not array or not value in array then
33550: LD_VAR 0 1
33554: NOT
33555: PUSH
33556: LD_VAR 0 2
33560: PUSH
33561: LD_VAR 0 1
33565: IN
33566: NOT
33567: OR
33568: IFFALSE 33572
// exit ;
33570: GO 33626
// for i = 1 to array do
33572: LD_ADDR_VAR 0 4
33576: PUSH
33577: DOUBLE
33578: LD_INT 1
33580: DEC
33581: ST_TO_ADDR
33582: LD_VAR 0 1
33586: PUSH
33587: FOR_TO
33588: IFFALSE 33624
// if value = array [ i ] then
33590: LD_VAR 0 2
33594: PUSH
33595: LD_VAR 0 1
33599: PUSH
33600: LD_VAR 0 4
33604: ARRAY
33605: EQUAL
33606: IFFALSE 33622
// begin result := i ;
33608: LD_ADDR_VAR 0 3
33612: PUSH
33613: LD_VAR 0 4
33617: ST_TO_ADDR
// exit ;
33618: POP
33619: POP
33620: GO 33626
// end ;
33622: GO 33587
33624: POP
33625: POP
// end ;
33626: LD_VAR 0 3
33630: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33631: LD_INT 0
33633: PPUSH
// vc_chassis := chassis ;
33634: LD_ADDR_OWVAR 37
33638: PUSH
33639: LD_VAR 0 1
33643: ST_TO_ADDR
// vc_engine := engine ;
33644: LD_ADDR_OWVAR 39
33648: PUSH
33649: LD_VAR 0 2
33653: ST_TO_ADDR
// vc_control := control ;
33654: LD_ADDR_OWVAR 38
33658: PUSH
33659: LD_VAR 0 3
33663: ST_TO_ADDR
// vc_weapon := weapon ;
33664: LD_ADDR_OWVAR 40
33668: PUSH
33669: LD_VAR 0 4
33673: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33674: LD_ADDR_OWVAR 41
33678: PUSH
33679: LD_VAR 0 5
33683: ST_TO_ADDR
// end ;
33684: LD_VAR 0 6
33688: RET
// export function WantPlant ( unit ) ; var task ; begin
33689: LD_INT 0
33691: PPUSH
33692: PPUSH
// result := false ;
33693: LD_ADDR_VAR 0 2
33697: PUSH
33698: LD_INT 0
33700: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33701: LD_ADDR_VAR 0 3
33705: PUSH
33706: LD_VAR 0 1
33710: PPUSH
33711: CALL_OW 437
33715: ST_TO_ADDR
// if task then
33716: LD_VAR 0 3
33720: IFFALSE 33748
// if task [ 1 ] [ 1 ] = p then
33722: LD_VAR 0 3
33726: PUSH
33727: LD_INT 1
33729: ARRAY
33730: PUSH
33731: LD_INT 1
33733: ARRAY
33734: PUSH
33735: LD_STRING p
33737: EQUAL
33738: IFFALSE 33748
// result := true ;
33740: LD_ADDR_VAR 0 2
33744: PUSH
33745: LD_INT 1
33747: ST_TO_ADDR
// end ;
33748: LD_VAR 0 2
33752: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33753: LD_INT 0
33755: PPUSH
33756: PPUSH
33757: PPUSH
33758: PPUSH
// if pos < 1 then
33759: LD_VAR 0 2
33763: PUSH
33764: LD_INT 1
33766: LESS
33767: IFFALSE 33771
// exit ;
33769: GO 34074
// if pos = 1 then
33771: LD_VAR 0 2
33775: PUSH
33776: LD_INT 1
33778: EQUAL
33779: IFFALSE 33812
// result := Replace ( arr , pos [ 1 ] , value ) else
33781: LD_ADDR_VAR 0 4
33785: PUSH
33786: LD_VAR 0 1
33790: PPUSH
33791: LD_VAR 0 2
33795: PUSH
33796: LD_INT 1
33798: ARRAY
33799: PPUSH
33800: LD_VAR 0 3
33804: PPUSH
33805: CALL_OW 1
33809: ST_TO_ADDR
33810: GO 34074
// begin tmp := arr ;
33812: LD_ADDR_VAR 0 6
33816: PUSH
33817: LD_VAR 0 1
33821: ST_TO_ADDR
// s_arr := [ tmp ] ;
33822: LD_ADDR_VAR 0 7
33826: PUSH
33827: LD_VAR 0 6
33831: PUSH
33832: EMPTY
33833: LIST
33834: ST_TO_ADDR
// for i = 1 to pos - 1 do
33835: LD_ADDR_VAR 0 5
33839: PUSH
33840: DOUBLE
33841: LD_INT 1
33843: DEC
33844: ST_TO_ADDR
33845: LD_VAR 0 2
33849: PUSH
33850: LD_INT 1
33852: MINUS
33853: PUSH
33854: FOR_TO
33855: IFFALSE 33900
// begin tmp := tmp [ pos [ i ] ] ;
33857: LD_ADDR_VAR 0 6
33861: PUSH
33862: LD_VAR 0 6
33866: PUSH
33867: LD_VAR 0 2
33871: PUSH
33872: LD_VAR 0 5
33876: ARRAY
33877: ARRAY
33878: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33879: LD_ADDR_VAR 0 7
33883: PUSH
33884: LD_VAR 0 7
33888: PUSH
33889: LD_VAR 0 6
33893: PUSH
33894: EMPTY
33895: LIST
33896: ADD
33897: ST_TO_ADDR
// end ;
33898: GO 33854
33900: POP
33901: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33902: LD_ADDR_VAR 0 6
33906: PUSH
33907: LD_VAR 0 6
33911: PPUSH
33912: LD_VAR 0 2
33916: PUSH
33917: LD_VAR 0 2
33921: ARRAY
33922: PPUSH
33923: LD_VAR 0 3
33927: PPUSH
33928: CALL_OW 1
33932: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33933: LD_ADDR_VAR 0 7
33937: PUSH
33938: LD_VAR 0 7
33942: PPUSH
33943: LD_VAR 0 7
33947: PPUSH
33948: LD_VAR 0 6
33952: PPUSH
33953: CALL_OW 1
33957: ST_TO_ADDR
// for i = s_arr downto 2 do
33958: LD_ADDR_VAR 0 5
33962: PUSH
33963: DOUBLE
33964: LD_VAR 0 7
33968: INC
33969: ST_TO_ADDR
33970: LD_INT 2
33972: PUSH
33973: FOR_DOWNTO
33974: IFFALSE 34058
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33976: LD_ADDR_VAR 0 6
33980: PUSH
33981: LD_VAR 0 7
33985: PUSH
33986: LD_VAR 0 5
33990: PUSH
33991: LD_INT 1
33993: MINUS
33994: ARRAY
33995: PPUSH
33996: LD_VAR 0 2
34000: PUSH
34001: LD_VAR 0 5
34005: PUSH
34006: LD_INT 1
34008: MINUS
34009: ARRAY
34010: PPUSH
34011: LD_VAR 0 7
34015: PUSH
34016: LD_VAR 0 5
34020: ARRAY
34021: PPUSH
34022: CALL_OW 1
34026: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34027: LD_ADDR_VAR 0 7
34031: PUSH
34032: LD_VAR 0 7
34036: PPUSH
34037: LD_VAR 0 5
34041: PUSH
34042: LD_INT 1
34044: MINUS
34045: PPUSH
34046: LD_VAR 0 6
34050: PPUSH
34051: CALL_OW 1
34055: ST_TO_ADDR
// end ;
34056: GO 33973
34058: POP
34059: POP
// result := s_arr [ 1 ] ;
34060: LD_ADDR_VAR 0 4
34064: PUSH
34065: LD_VAR 0 7
34069: PUSH
34070: LD_INT 1
34072: ARRAY
34073: ST_TO_ADDR
// end ; end ;
34074: LD_VAR 0 4
34078: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34079: LD_INT 0
34081: PPUSH
34082: PPUSH
// if not list then
34083: LD_VAR 0 1
34087: NOT
34088: IFFALSE 34092
// exit ;
34090: GO 34183
// i := list [ pos1 ] ;
34092: LD_ADDR_VAR 0 5
34096: PUSH
34097: LD_VAR 0 1
34101: PUSH
34102: LD_VAR 0 2
34106: ARRAY
34107: ST_TO_ADDR
// if not i then
34108: LD_VAR 0 5
34112: NOT
34113: IFFALSE 34117
// exit ;
34115: GO 34183
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34117: LD_ADDR_VAR 0 1
34121: PUSH
34122: LD_VAR 0 1
34126: PPUSH
34127: LD_VAR 0 2
34131: PPUSH
34132: LD_VAR 0 1
34136: PUSH
34137: LD_VAR 0 3
34141: ARRAY
34142: PPUSH
34143: CALL_OW 1
34147: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34148: LD_ADDR_VAR 0 1
34152: PUSH
34153: LD_VAR 0 1
34157: PPUSH
34158: LD_VAR 0 3
34162: PPUSH
34163: LD_VAR 0 5
34167: PPUSH
34168: CALL_OW 1
34172: ST_TO_ADDR
// result := list ;
34173: LD_ADDR_VAR 0 4
34177: PUSH
34178: LD_VAR 0 1
34182: ST_TO_ADDR
// end ;
34183: LD_VAR 0 4
34187: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34188: LD_INT 0
34190: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34191: LD_ADDR_VAR 0 5
34195: PUSH
34196: LD_VAR 0 1
34200: PPUSH
34201: CALL_OW 250
34205: PPUSH
34206: LD_VAR 0 1
34210: PPUSH
34211: CALL_OW 251
34215: PPUSH
34216: LD_VAR 0 2
34220: PPUSH
34221: LD_VAR 0 3
34225: PPUSH
34226: LD_VAR 0 4
34230: PPUSH
34231: CALL 34241 0 5
34235: ST_TO_ADDR
// end ;
34236: LD_VAR 0 5
34240: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34241: LD_INT 0
34243: PPUSH
34244: PPUSH
34245: PPUSH
34246: PPUSH
// if not list then
34247: LD_VAR 0 3
34251: NOT
34252: IFFALSE 34256
// exit ;
34254: GO 34644
// result := [ ] ;
34256: LD_ADDR_VAR 0 6
34260: PUSH
34261: EMPTY
34262: ST_TO_ADDR
// for i in list do
34263: LD_ADDR_VAR 0 7
34267: PUSH
34268: LD_VAR 0 3
34272: PUSH
34273: FOR_IN
34274: IFFALSE 34476
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34276: LD_ADDR_VAR 0 9
34280: PUSH
34281: LD_VAR 0 7
34285: PPUSH
34286: LD_VAR 0 1
34290: PPUSH
34291: LD_VAR 0 2
34295: PPUSH
34296: CALL_OW 297
34300: ST_TO_ADDR
// if not result then
34301: LD_VAR 0 6
34305: NOT
34306: IFFALSE 34332
// result := [ [ i , tmp ] ] else
34308: LD_ADDR_VAR 0 6
34312: PUSH
34313: LD_VAR 0 7
34317: PUSH
34318: LD_VAR 0 9
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: EMPTY
34328: LIST
34329: ST_TO_ADDR
34330: GO 34474
// begin if result [ result ] [ 2 ] < tmp then
34332: LD_VAR 0 6
34336: PUSH
34337: LD_VAR 0 6
34341: ARRAY
34342: PUSH
34343: LD_INT 2
34345: ARRAY
34346: PUSH
34347: LD_VAR 0 9
34351: LESS
34352: IFFALSE 34394
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34354: LD_ADDR_VAR 0 6
34358: PUSH
34359: LD_VAR 0 6
34363: PPUSH
34364: LD_VAR 0 6
34368: PUSH
34369: LD_INT 1
34371: PLUS
34372: PPUSH
34373: LD_VAR 0 7
34377: PUSH
34378: LD_VAR 0 9
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PPUSH
34387: CALL_OW 2
34391: ST_TO_ADDR
34392: GO 34474
// for j = 1 to result do
34394: LD_ADDR_VAR 0 8
34398: PUSH
34399: DOUBLE
34400: LD_INT 1
34402: DEC
34403: ST_TO_ADDR
34404: LD_VAR 0 6
34408: PUSH
34409: FOR_TO
34410: IFFALSE 34472
// begin if tmp < result [ j ] [ 2 ] then
34412: LD_VAR 0 9
34416: PUSH
34417: LD_VAR 0 6
34421: PUSH
34422: LD_VAR 0 8
34426: ARRAY
34427: PUSH
34428: LD_INT 2
34430: ARRAY
34431: LESS
34432: IFFALSE 34470
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34434: LD_ADDR_VAR 0 6
34438: PUSH
34439: LD_VAR 0 6
34443: PPUSH
34444: LD_VAR 0 8
34448: PPUSH
34449: LD_VAR 0 7
34453: PUSH
34454: LD_VAR 0 9
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PPUSH
34463: CALL_OW 2
34467: ST_TO_ADDR
// break ;
34468: GO 34472
// end ; end ;
34470: GO 34409
34472: POP
34473: POP
// end ; end ;
34474: GO 34273
34476: POP
34477: POP
// if result and not asc then
34478: LD_VAR 0 6
34482: PUSH
34483: LD_VAR 0 4
34487: NOT
34488: AND
34489: IFFALSE 34564
// begin tmp := result ;
34491: LD_ADDR_VAR 0 9
34495: PUSH
34496: LD_VAR 0 6
34500: ST_TO_ADDR
// for i = tmp downto 1 do
34501: LD_ADDR_VAR 0 7
34505: PUSH
34506: DOUBLE
34507: LD_VAR 0 9
34511: INC
34512: ST_TO_ADDR
34513: LD_INT 1
34515: PUSH
34516: FOR_DOWNTO
34517: IFFALSE 34562
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34519: LD_ADDR_VAR 0 6
34523: PUSH
34524: LD_VAR 0 6
34528: PPUSH
34529: LD_VAR 0 9
34533: PUSH
34534: LD_VAR 0 7
34538: MINUS
34539: PUSH
34540: LD_INT 1
34542: PLUS
34543: PPUSH
34544: LD_VAR 0 9
34548: PUSH
34549: LD_VAR 0 7
34553: ARRAY
34554: PPUSH
34555: CALL_OW 1
34559: ST_TO_ADDR
34560: GO 34516
34562: POP
34563: POP
// end ; tmp := [ ] ;
34564: LD_ADDR_VAR 0 9
34568: PUSH
34569: EMPTY
34570: ST_TO_ADDR
// if mode then
34571: LD_VAR 0 5
34575: IFFALSE 34644
// begin for i = 1 to result do
34577: LD_ADDR_VAR 0 7
34581: PUSH
34582: DOUBLE
34583: LD_INT 1
34585: DEC
34586: ST_TO_ADDR
34587: LD_VAR 0 6
34591: PUSH
34592: FOR_TO
34593: IFFALSE 34632
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34595: LD_ADDR_VAR 0 9
34599: PUSH
34600: LD_VAR 0 9
34604: PPUSH
34605: LD_VAR 0 7
34609: PPUSH
34610: LD_VAR 0 6
34614: PUSH
34615: LD_VAR 0 7
34619: ARRAY
34620: PUSH
34621: LD_INT 1
34623: ARRAY
34624: PPUSH
34625: CALL_OW 1
34629: ST_TO_ADDR
34630: GO 34592
34632: POP
34633: POP
// result := tmp ;
34634: LD_ADDR_VAR 0 6
34638: PUSH
34639: LD_VAR 0 9
34643: ST_TO_ADDR
// end ; end ;
34644: LD_VAR 0 6
34648: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34649: LD_INT 0
34651: PPUSH
34652: PPUSH
34653: PPUSH
34654: PPUSH
34655: PPUSH
34656: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34657: LD_ADDR_VAR 0 5
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: LD_INT 0
34667: PUSH
34668: LD_INT 0
34670: PUSH
34671: EMPTY
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: ST_TO_ADDR
// if not x or not y then
34679: LD_VAR 0 2
34683: NOT
34684: PUSH
34685: LD_VAR 0 3
34689: NOT
34690: OR
34691: IFFALSE 34695
// exit ;
34693: GO 36345
// if not range then
34695: LD_VAR 0 4
34699: NOT
34700: IFFALSE 34710
// range := 10 ;
34702: LD_ADDR_VAR 0 4
34706: PUSH
34707: LD_INT 10
34709: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34710: LD_ADDR_VAR 0 8
34714: PUSH
34715: LD_INT 81
34717: PUSH
34718: LD_VAR 0 1
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 92
34729: PUSH
34730: LD_VAR 0 2
34734: PUSH
34735: LD_VAR 0 3
34739: PUSH
34740: LD_VAR 0 4
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 3
34753: PUSH
34754: LD_INT 21
34756: PUSH
34757: LD_INT 3
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: LIST
34772: PPUSH
34773: CALL_OW 69
34777: ST_TO_ADDR
// if not tmp then
34778: LD_VAR 0 8
34782: NOT
34783: IFFALSE 34787
// exit ;
34785: GO 36345
// for i in tmp do
34787: LD_ADDR_VAR 0 6
34791: PUSH
34792: LD_VAR 0 8
34796: PUSH
34797: FOR_IN
34798: IFFALSE 36320
// begin points := [ 0 , 0 , 0 ] ;
34800: LD_ADDR_VAR 0 9
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: LD_INT 0
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: LIST
34818: ST_TO_ADDR
// bpoints := 1 ;
34819: LD_ADDR_VAR 0 10
34823: PUSH
34824: LD_INT 1
34826: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34827: LD_VAR 0 6
34831: PPUSH
34832: CALL_OW 247
34836: PUSH
34837: LD_INT 1
34839: DOUBLE
34840: EQUAL
34841: IFTRUE 34845
34843: GO 35423
34845: POP
// begin if GetClass ( i ) = 1 then
34846: LD_VAR 0 6
34850: PPUSH
34851: CALL_OW 257
34855: PUSH
34856: LD_INT 1
34858: EQUAL
34859: IFFALSE 34880
// points := [ 10 , 5 , 3 ] ;
34861: LD_ADDR_VAR 0 9
34865: PUSH
34866: LD_INT 10
34868: PUSH
34869: LD_INT 5
34871: PUSH
34872: LD_INT 3
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: LIST
34879: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34880: LD_VAR 0 6
34884: PPUSH
34885: CALL_OW 257
34889: PUSH
34890: LD_INT 2
34892: PUSH
34893: LD_INT 3
34895: PUSH
34896: LD_INT 4
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: LIST
34903: IN
34904: IFFALSE 34925
// points := [ 3 , 2 , 1 ] ;
34906: LD_ADDR_VAR 0 9
34910: PUSH
34911: LD_INT 3
34913: PUSH
34914: LD_INT 2
34916: PUSH
34917: LD_INT 1
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: LIST
34924: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34925: LD_VAR 0 6
34929: PPUSH
34930: CALL_OW 257
34934: PUSH
34935: LD_INT 5
34937: EQUAL
34938: IFFALSE 34959
// points := [ 130 , 5 , 2 ] ;
34940: LD_ADDR_VAR 0 9
34944: PUSH
34945: LD_INT 130
34947: PUSH
34948: LD_INT 5
34950: PUSH
34951: LD_INT 2
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: LIST
34958: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34959: LD_VAR 0 6
34963: PPUSH
34964: CALL_OW 257
34968: PUSH
34969: LD_INT 8
34971: EQUAL
34972: IFFALSE 34993
// points := [ 35 , 35 , 30 ] ;
34974: LD_ADDR_VAR 0 9
34978: PUSH
34979: LD_INT 35
34981: PUSH
34982: LD_INT 35
34984: PUSH
34985: LD_INT 30
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: LIST
34992: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34993: LD_VAR 0 6
34997: PPUSH
34998: CALL_OW 257
35002: PUSH
35003: LD_INT 9
35005: EQUAL
35006: IFFALSE 35027
// points := [ 20 , 55 , 40 ] ;
35008: LD_ADDR_VAR 0 9
35012: PUSH
35013: LD_INT 20
35015: PUSH
35016: LD_INT 55
35018: PUSH
35019: LD_INT 40
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: LIST
35026: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35027: LD_VAR 0 6
35031: PPUSH
35032: CALL_OW 257
35036: PUSH
35037: LD_INT 12
35039: PUSH
35040: LD_INT 16
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: IN
35047: IFFALSE 35068
// points := [ 5 , 3 , 2 ] ;
35049: LD_ADDR_VAR 0 9
35053: PUSH
35054: LD_INT 5
35056: PUSH
35057: LD_INT 3
35059: PUSH
35060: LD_INT 2
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: LIST
35067: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35068: LD_VAR 0 6
35072: PPUSH
35073: CALL_OW 257
35077: PUSH
35078: LD_INT 17
35080: EQUAL
35081: IFFALSE 35102
// points := [ 100 , 50 , 75 ] ;
35083: LD_ADDR_VAR 0 9
35087: PUSH
35088: LD_INT 100
35090: PUSH
35091: LD_INT 50
35093: PUSH
35094: LD_INT 75
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: LIST
35101: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35102: LD_VAR 0 6
35106: PPUSH
35107: CALL_OW 257
35111: PUSH
35112: LD_INT 15
35114: EQUAL
35115: IFFALSE 35136
// points := [ 10 , 5 , 3 ] ;
35117: LD_ADDR_VAR 0 9
35121: PUSH
35122: LD_INT 10
35124: PUSH
35125: LD_INT 5
35127: PUSH
35128: LD_INT 3
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: LIST
35135: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35136: LD_VAR 0 6
35140: PPUSH
35141: CALL_OW 257
35145: PUSH
35146: LD_INT 14
35148: EQUAL
35149: IFFALSE 35170
// points := [ 10 , 0 , 0 ] ;
35151: LD_ADDR_VAR 0 9
35155: PUSH
35156: LD_INT 10
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: LD_INT 0
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: LIST
35169: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35170: LD_VAR 0 6
35174: PPUSH
35175: CALL_OW 257
35179: PUSH
35180: LD_INT 11
35182: EQUAL
35183: IFFALSE 35204
// points := [ 30 , 10 , 5 ] ;
35185: LD_ADDR_VAR 0 9
35189: PUSH
35190: LD_INT 30
35192: PUSH
35193: LD_INT 10
35195: PUSH
35196: LD_INT 5
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: LIST
35203: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35204: LD_VAR 0 1
35208: PPUSH
35209: LD_INT 5
35211: PPUSH
35212: CALL_OW 321
35216: PUSH
35217: LD_INT 2
35219: EQUAL
35220: IFFALSE 35237
// bpoints := bpoints * 1.8 ;
35222: LD_ADDR_VAR 0 10
35226: PUSH
35227: LD_VAR 0 10
35231: PUSH
35232: LD_REAL  1.80000000000000E+0000
35235: MUL
35236: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35237: LD_VAR 0 6
35241: PPUSH
35242: CALL_OW 257
35246: PUSH
35247: LD_INT 1
35249: PUSH
35250: LD_INT 2
35252: PUSH
35253: LD_INT 3
35255: PUSH
35256: LD_INT 4
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: IN
35265: PUSH
35266: LD_VAR 0 1
35270: PPUSH
35271: LD_INT 51
35273: PPUSH
35274: CALL_OW 321
35278: PUSH
35279: LD_INT 2
35281: EQUAL
35282: AND
35283: IFFALSE 35300
// bpoints := bpoints * 1.2 ;
35285: LD_ADDR_VAR 0 10
35289: PUSH
35290: LD_VAR 0 10
35294: PUSH
35295: LD_REAL  1.20000000000000E+0000
35298: MUL
35299: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35300: LD_VAR 0 6
35304: PPUSH
35305: CALL_OW 257
35309: PUSH
35310: LD_INT 5
35312: PUSH
35313: LD_INT 7
35315: PUSH
35316: LD_INT 9
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: LIST
35323: IN
35324: PUSH
35325: LD_VAR 0 1
35329: PPUSH
35330: LD_INT 52
35332: PPUSH
35333: CALL_OW 321
35337: PUSH
35338: LD_INT 2
35340: EQUAL
35341: AND
35342: IFFALSE 35359
// bpoints := bpoints * 1.5 ;
35344: LD_ADDR_VAR 0 10
35348: PUSH
35349: LD_VAR 0 10
35353: PUSH
35354: LD_REAL  1.50000000000000E+0000
35357: MUL
35358: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35359: LD_VAR 0 1
35363: PPUSH
35364: LD_INT 66
35366: PPUSH
35367: CALL_OW 321
35371: PUSH
35372: LD_INT 2
35374: EQUAL
35375: IFFALSE 35392
// bpoints := bpoints * 1.1 ;
35377: LD_ADDR_VAR 0 10
35381: PUSH
35382: LD_VAR 0 10
35386: PUSH
35387: LD_REAL  1.10000000000000E+0000
35390: MUL
35391: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35392: LD_ADDR_VAR 0 10
35396: PUSH
35397: LD_VAR 0 10
35401: PUSH
35402: LD_VAR 0 6
35406: PPUSH
35407: LD_INT 1
35409: PPUSH
35410: CALL_OW 259
35414: PUSH
35415: LD_REAL  1.15000000000000E+0000
35418: MUL
35419: MUL
35420: ST_TO_ADDR
// end ; unit_vehicle :
35421: GO 36249
35423: LD_INT 2
35425: DOUBLE
35426: EQUAL
35427: IFTRUE 35431
35429: GO 36237
35431: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35432: LD_VAR 0 6
35436: PPUSH
35437: CALL_OW 264
35441: PUSH
35442: LD_INT 2
35444: PUSH
35445: LD_INT 42
35447: PUSH
35448: LD_INT 24
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: LIST
35455: IN
35456: IFFALSE 35477
// points := [ 25 , 5 , 3 ] ;
35458: LD_ADDR_VAR 0 9
35462: PUSH
35463: LD_INT 25
35465: PUSH
35466: LD_INT 5
35468: PUSH
35469: LD_INT 3
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: LIST
35476: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35477: LD_VAR 0 6
35481: PPUSH
35482: CALL_OW 264
35486: PUSH
35487: LD_INT 4
35489: PUSH
35490: LD_INT 43
35492: PUSH
35493: LD_INT 25
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: LIST
35500: IN
35501: IFFALSE 35522
// points := [ 40 , 15 , 5 ] ;
35503: LD_ADDR_VAR 0 9
35507: PUSH
35508: LD_INT 40
35510: PUSH
35511: LD_INT 15
35513: PUSH
35514: LD_INT 5
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: LIST
35521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35522: LD_VAR 0 6
35526: PPUSH
35527: CALL_OW 264
35531: PUSH
35532: LD_INT 3
35534: PUSH
35535: LD_INT 23
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: IN
35542: IFFALSE 35563
// points := [ 7 , 25 , 8 ] ;
35544: LD_ADDR_VAR 0 9
35548: PUSH
35549: LD_INT 7
35551: PUSH
35552: LD_INT 25
35554: PUSH
35555: LD_INT 8
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: LIST
35562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35563: LD_VAR 0 6
35567: PPUSH
35568: CALL_OW 264
35572: PUSH
35573: LD_INT 5
35575: PUSH
35576: LD_INT 27
35578: PUSH
35579: LD_INT 44
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: LIST
35586: IN
35587: IFFALSE 35608
// points := [ 14 , 50 , 16 ] ;
35589: LD_ADDR_VAR 0 9
35593: PUSH
35594: LD_INT 14
35596: PUSH
35597: LD_INT 50
35599: PUSH
35600: LD_INT 16
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: LIST
35607: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35608: LD_VAR 0 6
35612: PPUSH
35613: CALL_OW 264
35617: PUSH
35618: LD_INT 6
35620: PUSH
35621: LD_INT 46
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: IN
35628: IFFALSE 35649
// points := [ 32 , 120 , 70 ] ;
35630: LD_ADDR_VAR 0 9
35634: PUSH
35635: LD_INT 32
35637: PUSH
35638: LD_INT 120
35640: PUSH
35641: LD_INT 70
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: LIST
35648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35649: LD_VAR 0 6
35653: PPUSH
35654: CALL_OW 264
35658: PUSH
35659: LD_INT 7
35661: PUSH
35662: LD_INT 28
35664: PUSH
35665: LD_INT 45
35667: PUSH
35668: LD_INT 92
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: IN
35677: IFFALSE 35698
// points := [ 35 , 20 , 45 ] ;
35679: LD_ADDR_VAR 0 9
35683: PUSH
35684: LD_INT 35
35686: PUSH
35687: LD_INT 20
35689: PUSH
35690: LD_INT 45
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: LIST
35697: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35698: LD_VAR 0 6
35702: PPUSH
35703: CALL_OW 264
35707: PUSH
35708: LD_INT 47
35710: PUSH
35711: EMPTY
35712: LIST
35713: IN
35714: IFFALSE 35735
// points := [ 67 , 45 , 75 ] ;
35716: LD_ADDR_VAR 0 9
35720: PUSH
35721: LD_INT 67
35723: PUSH
35724: LD_INT 45
35726: PUSH
35727: LD_INT 75
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: LIST
35734: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35735: LD_VAR 0 6
35739: PPUSH
35740: CALL_OW 264
35744: PUSH
35745: LD_INT 26
35747: PUSH
35748: EMPTY
35749: LIST
35750: IN
35751: IFFALSE 35772
// points := [ 120 , 30 , 80 ] ;
35753: LD_ADDR_VAR 0 9
35757: PUSH
35758: LD_INT 120
35760: PUSH
35761: LD_INT 30
35763: PUSH
35764: LD_INT 80
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: LIST
35771: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35772: LD_VAR 0 6
35776: PPUSH
35777: CALL_OW 264
35781: PUSH
35782: LD_INT 22
35784: PUSH
35785: EMPTY
35786: LIST
35787: IN
35788: IFFALSE 35809
// points := [ 40 , 1 , 1 ] ;
35790: LD_ADDR_VAR 0 9
35794: PUSH
35795: LD_INT 40
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: LD_INT 1
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: LIST
35808: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35809: LD_VAR 0 6
35813: PPUSH
35814: CALL_OW 264
35818: PUSH
35819: LD_INT 29
35821: PUSH
35822: EMPTY
35823: LIST
35824: IN
35825: IFFALSE 35846
// points := [ 70 , 200 , 400 ] ;
35827: LD_ADDR_VAR 0 9
35831: PUSH
35832: LD_INT 70
35834: PUSH
35835: LD_INT 200
35837: PUSH
35838: LD_INT 400
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: LIST
35845: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35846: LD_VAR 0 6
35850: PPUSH
35851: CALL_OW 264
35855: PUSH
35856: LD_INT 14
35858: PUSH
35859: LD_INT 53
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: IN
35866: IFFALSE 35887
// points := [ 40 , 10 , 20 ] ;
35868: LD_ADDR_VAR 0 9
35872: PUSH
35873: LD_INT 40
35875: PUSH
35876: LD_INT 10
35878: PUSH
35879: LD_INT 20
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: LIST
35886: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35887: LD_VAR 0 6
35891: PPUSH
35892: CALL_OW 264
35896: PUSH
35897: LD_INT 9
35899: PUSH
35900: EMPTY
35901: LIST
35902: IN
35903: IFFALSE 35924
// points := [ 5 , 70 , 20 ] ;
35905: LD_ADDR_VAR 0 9
35909: PUSH
35910: LD_INT 5
35912: PUSH
35913: LD_INT 70
35915: PUSH
35916: LD_INT 20
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: LIST
35923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35924: LD_VAR 0 6
35928: PPUSH
35929: CALL_OW 264
35933: PUSH
35934: LD_INT 10
35936: PUSH
35937: EMPTY
35938: LIST
35939: IN
35940: IFFALSE 35961
// points := [ 35 , 110 , 70 ] ;
35942: LD_ADDR_VAR 0 9
35946: PUSH
35947: LD_INT 35
35949: PUSH
35950: LD_INT 110
35952: PUSH
35953: LD_INT 70
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: LIST
35960: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35961: LD_VAR 0 6
35965: PPUSH
35966: CALL_OW 265
35970: PUSH
35971: LD_INT 25
35973: EQUAL
35974: IFFALSE 35995
// points := [ 80 , 65 , 100 ] ;
35976: LD_ADDR_VAR 0 9
35980: PUSH
35981: LD_INT 80
35983: PUSH
35984: LD_INT 65
35986: PUSH
35987: LD_INT 100
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: LIST
35994: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35995: LD_VAR 0 6
35999: PPUSH
36000: CALL_OW 263
36004: PUSH
36005: LD_INT 1
36007: EQUAL
36008: IFFALSE 36043
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36010: LD_ADDR_VAR 0 10
36014: PUSH
36015: LD_VAR 0 10
36019: PUSH
36020: LD_VAR 0 6
36024: PPUSH
36025: CALL_OW 311
36029: PPUSH
36030: LD_INT 3
36032: PPUSH
36033: CALL_OW 259
36037: PUSH
36038: LD_INT 4
36040: MUL
36041: MUL
36042: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36043: LD_VAR 0 6
36047: PPUSH
36048: CALL_OW 263
36052: PUSH
36053: LD_INT 2
36055: EQUAL
36056: IFFALSE 36107
// begin j := IsControledBy ( i ) ;
36058: LD_ADDR_VAR 0 7
36062: PUSH
36063: LD_VAR 0 6
36067: PPUSH
36068: CALL_OW 312
36072: ST_TO_ADDR
// if j then
36073: LD_VAR 0 7
36077: IFFALSE 36107
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36079: LD_ADDR_VAR 0 10
36083: PUSH
36084: LD_VAR 0 10
36088: PUSH
36089: LD_VAR 0 7
36093: PPUSH
36094: LD_INT 3
36096: PPUSH
36097: CALL_OW 259
36101: PUSH
36102: LD_INT 3
36104: MUL
36105: MUL
36106: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36107: LD_VAR 0 6
36111: PPUSH
36112: CALL_OW 264
36116: PUSH
36117: LD_INT 5
36119: PUSH
36120: LD_INT 6
36122: PUSH
36123: LD_INT 46
36125: PUSH
36126: LD_INT 44
36128: PUSH
36129: LD_INT 47
36131: PUSH
36132: LD_INT 45
36134: PUSH
36135: LD_INT 28
36137: PUSH
36138: LD_INT 7
36140: PUSH
36141: LD_INT 27
36143: PUSH
36144: LD_INT 29
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: IN
36159: PUSH
36160: LD_VAR 0 1
36164: PPUSH
36165: LD_INT 52
36167: PPUSH
36168: CALL_OW 321
36172: PUSH
36173: LD_INT 2
36175: EQUAL
36176: AND
36177: IFFALSE 36194
// bpoints := bpoints * 1.2 ;
36179: LD_ADDR_VAR 0 10
36183: PUSH
36184: LD_VAR 0 10
36188: PUSH
36189: LD_REAL  1.20000000000000E+0000
36192: MUL
36193: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36194: LD_VAR 0 6
36198: PPUSH
36199: CALL_OW 264
36203: PUSH
36204: LD_INT 6
36206: PUSH
36207: LD_INT 46
36209: PUSH
36210: LD_INT 47
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: LIST
36217: IN
36218: IFFALSE 36235
// bpoints := bpoints * 1.2 ;
36220: LD_ADDR_VAR 0 10
36224: PUSH
36225: LD_VAR 0 10
36229: PUSH
36230: LD_REAL  1.20000000000000E+0000
36233: MUL
36234: ST_TO_ADDR
// end ; unit_building :
36235: GO 36249
36237: LD_INT 3
36239: DOUBLE
36240: EQUAL
36241: IFTRUE 36245
36243: GO 36248
36245: POP
// ; end ;
36246: GO 36249
36248: POP
// for j = 1 to 3 do
36249: LD_ADDR_VAR 0 7
36253: PUSH
36254: DOUBLE
36255: LD_INT 1
36257: DEC
36258: ST_TO_ADDR
36259: LD_INT 3
36261: PUSH
36262: FOR_TO
36263: IFFALSE 36316
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36265: LD_ADDR_VAR 0 5
36269: PUSH
36270: LD_VAR 0 5
36274: PPUSH
36275: LD_VAR 0 7
36279: PPUSH
36280: LD_VAR 0 5
36284: PUSH
36285: LD_VAR 0 7
36289: ARRAY
36290: PUSH
36291: LD_VAR 0 9
36295: PUSH
36296: LD_VAR 0 7
36300: ARRAY
36301: PUSH
36302: LD_VAR 0 10
36306: MUL
36307: PLUS
36308: PPUSH
36309: CALL_OW 1
36313: ST_TO_ADDR
36314: GO 36262
36316: POP
36317: POP
// end ;
36318: GO 34797
36320: POP
36321: POP
// result := Replace ( result , 4 , tmp ) ;
36322: LD_ADDR_VAR 0 5
36326: PUSH
36327: LD_VAR 0 5
36331: PPUSH
36332: LD_INT 4
36334: PPUSH
36335: LD_VAR 0 8
36339: PPUSH
36340: CALL_OW 1
36344: ST_TO_ADDR
// end ;
36345: LD_VAR 0 5
36349: RET
// export function DangerAtRange ( unit , range ) ; begin
36350: LD_INT 0
36352: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36353: LD_ADDR_VAR 0 3
36357: PUSH
36358: LD_VAR 0 1
36362: PPUSH
36363: CALL_OW 255
36367: PPUSH
36368: LD_VAR 0 1
36372: PPUSH
36373: CALL_OW 250
36377: PPUSH
36378: LD_VAR 0 1
36382: PPUSH
36383: CALL_OW 251
36387: PPUSH
36388: LD_VAR 0 2
36392: PPUSH
36393: CALL 34649 0 4
36397: ST_TO_ADDR
// end ;
36398: LD_VAR 0 3
36402: RET
// export function DangerInArea ( side , area ) ; begin
36403: LD_INT 0
36405: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36406: LD_ADDR_VAR 0 3
36410: PUSH
36411: LD_VAR 0 2
36415: PPUSH
36416: LD_INT 81
36418: PUSH
36419: LD_VAR 0 1
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PPUSH
36428: CALL_OW 70
36432: ST_TO_ADDR
// end ;
36433: LD_VAR 0 3
36437: RET
// export function IsExtension ( b ) ; begin
36438: LD_INT 0
36440: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36441: LD_ADDR_VAR 0 2
36445: PUSH
36446: LD_VAR 0 1
36450: PUSH
36451: LD_INT 23
36453: PUSH
36454: LD_INT 20
36456: PUSH
36457: LD_INT 22
36459: PUSH
36460: LD_INT 17
36462: PUSH
36463: LD_INT 24
36465: PUSH
36466: LD_INT 21
36468: PUSH
36469: LD_INT 19
36471: PUSH
36472: LD_INT 16
36474: PUSH
36475: LD_INT 25
36477: PUSH
36478: LD_INT 18
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: IN
36493: ST_TO_ADDR
// end ;
36494: LD_VAR 0 2
36498: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36499: LD_INT 0
36501: PPUSH
36502: PPUSH
36503: PPUSH
// result := [ ] ;
36504: LD_ADDR_VAR 0 4
36508: PUSH
36509: EMPTY
36510: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36511: LD_ADDR_VAR 0 5
36515: PUSH
36516: LD_VAR 0 2
36520: PPUSH
36521: LD_INT 21
36523: PUSH
36524: LD_INT 3
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PPUSH
36531: CALL_OW 70
36535: ST_TO_ADDR
// if not tmp then
36536: LD_VAR 0 5
36540: NOT
36541: IFFALSE 36545
// exit ;
36543: GO 36609
// if checkLink then
36545: LD_VAR 0 3
36549: IFFALSE 36599
// begin for i in tmp do
36551: LD_ADDR_VAR 0 6
36555: PUSH
36556: LD_VAR 0 5
36560: PUSH
36561: FOR_IN
36562: IFFALSE 36597
// if GetBase ( i ) <> base then
36564: LD_VAR 0 6
36568: PPUSH
36569: CALL_OW 274
36573: PUSH
36574: LD_VAR 0 1
36578: NONEQUAL
36579: IFFALSE 36595
// ComLinkToBase ( base , i ) ;
36581: LD_VAR 0 1
36585: PPUSH
36586: LD_VAR 0 6
36590: PPUSH
36591: CALL_OW 169
36595: GO 36561
36597: POP
36598: POP
// end ; result := tmp ;
36599: LD_ADDR_VAR 0 4
36603: PUSH
36604: LD_VAR 0 5
36608: ST_TO_ADDR
// end ;
36609: LD_VAR 0 4
36613: RET
// export function ComComplete ( units , b ) ; var i ; begin
36614: LD_INT 0
36616: PPUSH
36617: PPUSH
// if not units then
36618: LD_VAR 0 1
36622: NOT
36623: IFFALSE 36627
// exit ;
36625: GO 36717
// for i in units do
36627: LD_ADDR_VAR 0 4
36631: PUSH
36632: LD_VAR 0 1
36636: PUSH
36637: FOR_IN
36638: IFFALSE 36715
// if BuildingStatus ( b ) = bs_build then
36640: LD_VAR 0 2
36644: PPUSH
36645: CALL_OW 461
36649: PUSH
36650: LD_INT 1
36652: EQUAL
36653: IFFALSE 36713
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36655: LD_VAR 0 4
36659: PPUSH
36660: LD_STRING h
36662: PUSH
36663: LD_VAR 0 2
36667: PPUSH
36668: CALL_OW 250
36672: PUSH
36673: LD_VAR 0 2
36677: PPUSH
36678: CALL_OW 251
36682: PUSH
36683: LD_VAR 0 2
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: LD_INT 0
36693: PUSH
36694: LD_INT 0
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: PUSH
36706: EMPTY
36707: LIST
36708: PPUSH
36709: CALL_OW 446
36713: GO 36637
36715: POP
36716: POP
// end ;
36717: LD_VAR 0 3
36721: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36722: LD_INT 0
36724: PPUSH
36725: PPUSH
36726: PPUSH
36727: PPUSH
36728: PPUSH
36729: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36730: LD_VAR 0 1
36734: NOT
36735: PUSH
36736: LD_VAR 0 1
36740: PPUSH
36741: CALL_OW 263
36745: PUSH
36746: LD_INT 2
36748: NONEQUAL
36749: OR
36750: IFFALSE 36754
// exit ;
36752: GO 37070
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36754: LD_ADDR_VAR 0 6
36758: PUSH
36759: LD_INT 22
36761: PUSH
36762: LD_VAR 0 1
36766: PPUSH
36767: CALL_OW 255
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 2
36778: PUSH
36779: LD_INT 30
36781: PUSH
36782: LD_INT 36
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 34
36791: PUSH
36792: LD_INT 31
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: LIST
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PPUSH
36808: CALL_OW 69
36812: ST_TO_ADDR
// if not tmp then
36813: LD_VAR 0 6
36817: NOT
36818: IFFALSE 36822
// exit ;
36820: GO 37070
// result := [ ] ;
36822: LD_ADDR_VAR 0 2
36826: PUSH
36827: EMPTY
36828: ST_TO_ADDR
// for i in tmp do
36829: LD_ADDR_VAR 0 3
36833: PUSH
36834: LD_VAR 0 6
36838: PUSH
36839: FOR_IN
36840: IFFALSE 36911
// begin t := UnitsInside ( i ) ;
36842: LD_ADDR_VAR 0 4
36846: PUSH
36847: LD_VAR 0 3
36851: PPUSH
36852: CALL_OW 313
36856: ST_TO_ADDR
// if t then
36857: LD_VAR 0 4
36861: IFFALSE 36909
// for j in t do
36863: LD_ADDR_VAR 0 7
36867: PUSH
36868: LD_VAR 0 4
36872: PUSH
36873: FOR_IN
36874: IFFALSE 36907
// result := Replace ( result , result + 1 , j ) ;
36876: LD_ADDR_VAR 0 2
36880: PUSH
36881: LD_VAR 0 2
36885: PPUSH
36886: LD_VAR 0 2
36890: PUSH
36891: LD_INT 1
36893: PLUS
36894: PPUSH
36895: LD_VAR 0 7
36899: PPUSH
36900: CALL_OW 1
36904: ST_TO_ADDR
36905: GO 36873
36907: POP
36908: POP
// end ;
36909: GO 36839
36911: POP
36912: POP
// if not result then
36913: LD_VAR 0 2
36917: NOT
36918: IFFALSE 36922
// exit ;
36920: GO 37070
// mech := result [ 1 ] ;
36922: LD_ADDR_VAR 0 5
36926: PUSH
36927: LD_VAR 0 2
36931: PUSH
36932: LD_INT 1
36934: ARRAY
36935: ST_TO_ADDR
// if result > 1 then
36936: LD_VAR 0 2
36940: PUSH
36941: LD_INT 1
36943: GREATER
36944: IFFALSE 37056
// begin for i = 2 to result do
36946: LD_ADDR_VAR 0 3
36950: PUSH
36951: DOUBLE
36952: LD_INT 2
36954: DEC
36955: ST_TO_ADDR
36956: LD_VAR 0 2
36960: PUSH
36961: FOR_TO
36962: IFFALSE 37054
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36964: LD_ADDR_VAR 0 4
36968: PUSH
36969: LD_VAR 0 2
36973: PUSH
36974: LD_VAR 0 3
36978: ARRAY
36979: PPUSH
36980: LD_INT 3
36982: PPUSH
36983: CALL_OW 259
36987: PUSH
36988: LD_VAR 0 2
36992: PUSH
36993: LD_VAR 0 3
36997: ARRAY
36998: PPUSH
36999: CALL_OW 432
37003: MINUS
37004: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37005: LD_VAR 0 4
37009: PUSH
37010: LD_VAR 0 5
37014: PPUSH
37015: LD_INT 3
37017: PPUSH
37018: CALL_OW 259
37022: PUSH
37023: LD_VAR 0 5
37027: PPUSH
37028: CALL_OW 432
37032: MINUS
37033: GREATEREQUAL
37034: IFFALSE 37052
// mech := result [ i ] ;
37036: LD_ADDR_VAR 0 5
37040: PUSH
37041: LD_VAR 0 2
37045: PUSH
37046: LD_VAR 0 3
37050: ARRAY
37051: ST_TO_ADDR
// end ;
37052: GO 36961
37054: POP
37055: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37056: LD_VAR 0 1
37060: PPUSH
37061: LD_VAR 0 5
37065: PPUSH
37066: CALL_OW 135
// end ;
37070: LD_VAR 0 2
37074: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37075: LD_INT 0
37077: PPUSH
37078: PPUSH
37079: PPUSH
37080: PPUSH
37081: PPUSH
37082: PPUSH
37083: PPUSH
37084: PPUSH
37085: PPUSH
37086: PPUSH
37087: PPUSH
37088: PPUSH
37089: PPUSH
// result := [ ] ;
37090: LD_ADDR_VAR 0 7
37094: PUSH
37095: EMPTY
37096: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37097: LD_VAR 0 1
37101: PPUSH
37102: CALL_OW 266
37106: PUSH
37107: LD_INT 0
37109: PUSH
37110: LD_INT 1
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: IN
37117: NOT
37118: IFFALSE 37122
// exit ;
37120: GO 38756
// if name then
37122: LD_VAR 0 3
37126: IFFALSE 37142
// SetBName ( base_dep , name ) ;
37128: LD_VAR 0 1
37132: PPUSH
37133: LD_VAR 0 3
37137: PPUSH
37138: CALL_OW 500
// base := GetBase ( base_dep ) ;
37142: LD_ADDR_VAR 0 15
37146: PUSH
37147: LD_VAR 0 1
37151: PPUSH
37152: CALL_OW 274
37156: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37157: LD_ADDR_VAR 0 16
37161: PUSH
37162: LD_VAR 0 1
37166: PPUSH
37167: CALL_OW 255
37171: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37172: LD_ADDR_VAR 0 17
37176: PUSH
37177: LD_VAR 0 1
37181: PPUSH
37182: CALL_OW 248
37186: ST_TO_ADDR
// if sources then
37187: LD_VAR 0 5
37191: IFFALSE 37238
// for i = 1 to 3 do
37193: LD_ADDR_VAR 0 8
37197: PUSH
37198: DOUBLE
37199: LD_INT 1
37201: DEC
37202: ST_TO_ADDR
37203: LD_INT 3
37205: PUSH
37206: FOR_TO
37207: IFFALSE 37236
// AddResourceType ( base , i , sources [ i ] ) ;
37209: LD_VAR 0 15
37213: PPUSH
37214: LD_VAR 0 8
37218: PPUSH
37219: LD_VAR 0 5
37223: PUSH
37224: LD_VAR 0 8
37228: ARRAY
37229: PPUSH
37230: CALL_OW 276
37234: GO 37206
37236: POP
37237: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37238: LD_ADDR_VAR 0 18
37242: PUSH
37243: LD_VAR 0 15
37247: PPUSH
37248: LD_VAR 0 2
37252: PPUSH
37253: LD_INT 1
37255: PPUSH
37256: CALL 36499 0 3
37260: ST_TO_ADDR
// InitHc ;
37261: CALL_OW 19
// InitUc ;
37265: CALL_OW 18
// uc_side := side ;
37269: LD_ADDR_OWVAR 20
37273: PUSH
37274: LD_VAR 0 16
37278: ST_TO_ADDR
// uc_nation := nation ;
37279: LD_ADDR_OWVAR 21
37283: PUSH
37284: LD_VAR 0 17
37288: ST_TO_ADDR
// if buildings then
37289: LD_VAR 0 18
37293: IFFALSE 38615
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37295: LD_ADDR_VAR 0 19
37299: PUSH
37300: LD_VAR 0 18
37304: PPUSH
37305: LD_INT 2
37307: PUSH
37308: LD_INT 30
37310: PUSH
37311: LD_INT 29
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 30
37320: PUSH
37321: LD_INT 30
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: LIST
37332: PPUSH
37333: CALL_OW 72
37337: ST_TO_ADDR
// if tmp then
37338: LD_VAR 0 19
37342: IFFALSE 37390
// for i in tmp do
37344: LD_ADDR_VAR 0 8
37348: PUSH
37349: LD_VAR 0 19
37353: PUSH
37354: FOR_IN
37355: IFFALSE 37388
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37357: LD_VAR 0 8
37361: PPUSH
37362: CALL_OW 250
37366: PPUSH
37367: LD_VAR 0 8
37371: PPUSH
37372: CALL_OW 251
37376: PPUSH
37377: LD_VAR 0 16
37381: PPUSH
37382: CALL_OW 441
37386: GO 37354
37388: POP
37389: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37390: LD_VAR 0 18
37394: PPUSH
37395: LD_INT 2
37397: PUSH
37398: LD_INT 30
37400: PUSH
37401: LD_INT 32
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 30
37410: PUSH
37411: LD_INT 33
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: LIST
37422: PPUSH
37423: CALL_OW 72
37427: IFFALSE 37515
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37429: LD_ADDR_VAR 0 8
37433: PUSH
37434: LD_VAR 0 18
37438: PPUSH
37439: LD_INT 2
37441: PUSH
37442: LD_INT 30
37444: PUSH
37445: LD_INT 32
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 30
37454: PUSH
37455: LD_INT 33
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: LIST
37466: PPUSH
37467: CALL_OW 72
37471: PUSH
37472: FOR_IN
37473: IFFALSE 37513
// begin if not GetBWeapon ( i ) then
37475: LD_VAR 0 8
37479: PPUSH
37480: CALL_OW 269
37484: NOT
37485: IFFALSE 37511
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37487: LD_VAR 0 8
37491: PPUSH
37492: LD_VAR 0 8
37496: PPUSH
37497: LD_VAR 0 2
37501: PPUSH
37502: CALL 38761 0 2
37506: PPUSH
37507: CALL_OW 431
// end ;
37511: GO 37472
37513: POP
37514: POP
// end ; for i = 1 to personel do
37515: LD_ADDR_VAR 0 8
37519: PUSH
37520: DOUBLE
37521: LD_INT 1
37523: DEC
37524: ST_TO_ADDR
37525: LD_VAR 0 6
37529: PUSH
37530: FOR_TO
37531: IFFALSE 38595
// begin if i > 4 then
37533: LD_VAR 0 8
37537: PUSH
37538: LD_INT 4
37540: GREATER
37541: IFFALSE 37545
// break ;
37543: GO 38595
// case i of 1 :
37545: LD_VAR 0 8
37549: PUSH
37550: LD_INT 1
37552: DOUBLE
37553: EQUAL
37554: IFTRUE 37558
37556: GO 37638
37558: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37559: LD_ADDR_VAR 0 12
37563: PUSH
37564: LD_VAR 0 18
37568: PPUSH
37569: LD_INT 22
37571: PUSH
37572: LD_VAR 0 16
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 58
37583: PUSH
37584: EMPTY
37585: LIST
37586: PUSH
37587: LD_INT 2
37589: PUSH
37590: LD_INT 30
37592: PUSH
37593: LD_INT 32
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 30
37602: PUSH
37603: LD_INT 4
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 30
37612: PUSH
37613: LD_INT 5
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: LIST
37630: PPUSH
37631: CALL_OW 72
37635: ST_TO_ADDR
37636: GO 37860
37638: LD_INT 2
37640: DOUBLE
37641: EQUAL
37642: IFTRUE 37646
37644: GO 37708
37646: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37647: LD_ADDR_VAR 0 12
37651: PUSH
37652: LD_VAR 0 18
37656: PPUSH
37657: LD_INT 22
37659: PUSH
37660: LD_VAR 0 16
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 2
37671: PUSH
37672: LD_INT 30
37674: PUSH
37675: LD_INT 0
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 30
37684: PUSH
37685: LD_INT 1
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: LIST
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PPUSH
37701: CALL_OW 72
37705: ST_TO_ADDR
37706: GO 37860
37708: LD_INT 3
37710: DOUBLE
37711: EQUAL
37712: IFTRUE 37716
37714: GO 37778
37716: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37717: LD_ADDR_VAR 0 12
37721: PUSH
37722: LD_VAR 0 18
37726: PPUSH
37727: LD_INT 22
37729: PUSH
37730: LD_VAR 0 16
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 2
37741: PUSH
37742: LD_INT 30
37744: PUSH
37745: LD_INT 2
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 30
37754: PUSH
37755: LD_INT 3
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: LIST
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PPUSH
37771: CALL_OW 72
37775: ST_TO_ADDR
37776: GO 37860
37778: LD_INT 4
37780: DOUBLE
37781: EQUAL
37782: IFTRUE 37786
37784: GO 37859
37786: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37787: LD_ADDR_VAR 0 12
37791: PUSH
37792: LD_VAR 0 18
37796: PPUSH
37797: LD_INT 22
37799: PUSH
37800: LD_VAR 0 16
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: LD_INT 30
37814: PUSH
37815: LD_INT 6
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 30
37824: PUSH
37825: LD_INT 7
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 30
37834: PUSH
37835: LD_INT 8
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PPUSH
37852: CALL_OW 72
37856: ST_TO_ADDR
37857: GO 37860
37859: POP
// if i = 1 then
37860: LD_VAR 0 8
37864: PUSH
37865: LD_INT 1
37867: EQUAL
37868: IFFALSE 37979
// begin tmp := [ ] ;
37870: LD_ADDR_VAR 0 19
37874: PUSH
37875: EMPTY
37876: ST_TO_ADDR
// for j in f do
37877: LD_ADDR_VAR 0 9
37881: PUSH
37882: LD_VAR 0 12
37886: PUSH
37887: FOR_IN
37888: IFFALSE 37961
// if GetBType ( j ) = b_bunker then
37890: LD_VAR 0 9
37894: PPUSH
37895: CALL_OW 266
37899: PUSH
37900: LD_INT 32
37902: EQUAL
37903: IFFALSE 37930
// tmp := Insert ( tmp , 1 , j ) else
37905: LD_ADDR_VAR 0 19
37909: PUSH
37910: LD_VAR 0 19
37914: PPUSH
37915: LD_INT 1
37917: PPUSH
37918: LD_VAR 0 9
37922: PPUSH
37923: CALL_OW 2
37927: ST_TO_ADDR
37928: GO 37959
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37930: LD_ADDR_VAR 0 19
37934: PUSH
37935: LD_VAR 0 19
37939: PPUSH
37940: LD_VAR 0 19
37944: PUSH
37945: LD_INT 1
37947: PLUS
37948: PPUSH
37949: LD_VAR 0 9
37953: PPUSH
37954: CALL_OW 2
37958: ST_TO_ADDR
37959: GO 37887
37961: POP
37962: POP
// if tmp then
37963: LD_VAR 0 19
37967: IFFALSE 37979
// f := tmp ;
37969: LD_ADDR_VAR 0 12
37973: PUSH
37974: LD_VAR 0 19
37978: ST_TO_ADDR
// end ; x := personel [ i ] ;
37979: LD_ADDR_VAR 0 13
37983: PUSH
37984: LD_VAR 0 6
37988: PUSH
37989: LD_VAR 0 8
37993: ARRAY
37994: ST_TO_ADDR
// if x = - 1 then
37995: LD_VAR 0 13
37999: PUSH
38000: LD_INT 1
38002: NEG
38003: EQUAL
38004: IFFALSE 38213
// begin for j in f do
38006: LD_ADDR_VAR 0 9
38010: PUSH
38011: LD_VAR 0 12
38015: PUSH
38016: FOR_IN
38017: IFFALSE 38209
// repeat InitHc ;
38019: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38023: LD_VAR 0 9
38027: PPUSH
38028: CALL_OW 266
38032: PUSH
38033: LD_INT 5
38035: EQUAL
38036: IFFALSE 38106
// begin if UnitsInside ( j ) < 3 then
38038: LD_VAR 0 9
38042: PPUSH
38043: CALL_OW 313
38047: PUSH
38048: LD_INT 3
38050: LESS
38051: IFFALSE 38087
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38053: LD_INT 0
38055: PPUSH
38056: LD_INT 5
38058: PUSH
38059: LD_INT 8
38061: PUSH
38062: LD_INT 9
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: LIST
38069: PUSH
38070: LD_VAR 0 17
38074: ARRAY
38075: PPUSH
38076: LD_VAR 0 4
38080: PPUSH
38081: CALL_OW 380
38085: GO 38104
// PrepareHuman ( false , i , skill ) ;
38087: LD_INT 0
38089: PPUSH
38090: LD_VAR 0 8
38094: PPUSH
38095: LD_VAR 0 4
38099: PPUSH
38100: CALL_OW 380
// end else
38104: GO 38123
// PrepareHuman ( false , i , skill ) ;
38106: LD_INT 0
38108: PPUSH
38109: LD_VAR 0 8
38113: PPUSH
38114: LD_VAR 0 4
38118: PPUSH
38119: CALL_OW 380
// un := CreateHuman ;
38123: LD_ADDR_VAR 0 14
38127: PUSH
38128: CALL_OW 44
38132: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38133: LD_ADDR_VAR 0 7
38137: PUSH
38138: LD_VAR 0 7
38142: PPUSH
38143: LD_INT 1
38145: PPUSH
38146: LD_VAR 0 14
38150: PPUSH
38151: CALL_OW 2
38155: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38156: LD_VAR 0 14
38160: PPUSH
38161: LD_VAR 0 9
38165: PPUSH
38166: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38170: LD_VAR 0 9
38174: PPUSH
38175: CALL_OW 313
38179: PUSH
38180: LD_INT 6
38182: EQUAL
38183: PUSH
38184: LD_VAR 0 9
38188: PPUSH
38189: CALL_OW 266
38193: PUSH
38194: LD_INT 32
38196: PUSH
38197: LD_INT 31
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: IN
38204: OR
38205: IFFALSE 38019
38207: GO 38016
38209: POP
38210: POP
// end else
38211: GO 38593
// for j = 1 to x do
38213: LD_ADDR_VAR 0 9
38217: PUSH
38218: DOUBLE
38219: LD_INT 1
38221: DEC
38222: ST_TO_ADDR
38223: LD_VAR 0 13
38227: PUSH
38228: FOR_TO
38229: IFFALSE 38591
// begin InitHc ;
38231: CALL_OW 19
// if not f then
38235: LD_VAR 0 12
38239: NOT
38240: IFFALSE 38329
// begin PrepareHuman ( false , i , skill ) ;
38242: LD_INT 0
38244: PPUSH
38245: LD_VAR 0 8
38249: PPUSH
38250: LD_VAR 0 4
38254: PPUSH
38255: CALL_OW 380
// un := CreateHuman ;
38259: LD_ADDR_VAR 0 14
38263: PUSH
38264: CALL_OW 44
38268: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38269: LD_ADDR_VAR 0 7
38273: PUSH
38274: LD_VAR 0 7
38278: PPUSH
38279: LD_INT 1
38281: PPUSH
38282: LD_VAR 0 14
38286: PPUSH
38287: CALL_OW 2
38291: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38292: LD_VAR 0 14
38296: PPUSH
38297: LD_VAR 0 1
38301: PPUSH
38302: CALL_OW 250
38306: PPUSH
38307: LD_VAR 0 1
38311: PPUSH
38312: CALL_OW 251
38316: PPUSH
38317: LD_INT 10
38319: PPUSH
38320: LD_INT 0
38322: PPUSH
38323: CALL_OW 50
// continue ;
38327: GO 38228
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38329: LD_VAR 0 12
38333: PUSH
38334: LD_INT 1
38336: ARRAY
38337: PPUSH
38338: CALL_OW 313
38342: PUSH
38343: LD_VAR 0 12
38347: PUSH
38348: LD_INT 1
38350: ARRAY
38351: PPUSH
38352: CALL_OW 266
38356: PUSH
38357: LD_INT 32
38359: PUSH
38360: LD_INT 31
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: IN
38367: AND
38368: PUSH
38369: LD_VAR 0 12
38373: PUSH
38374: LD_INT 1
38376: ARRAY
38377: PPUSH
38378: CALL_OW 313
38382: PUSH
38383: LD_INT 6
38385: EQUAL
38386: OR
38387: IFFALSE 38407
// f := Delete ( f , 1 ) ;
38389: LD_ADDR_VAR 0 12
38393: PUSH
38394: LD_VAR 0 12
38398: PPUSH
38399: LD_INT 1
38401: PPUSH
38402: CALL_OW 3
38406: ST_TO_ADDR
// if not f then
38407: LD_VAR 0 12
38411: NOT
38412: IFFALSE 38430
// begin x := x + 2 ;
38414: LD_ADDR_VAR 0 13
38418: PUSH
38419: LD_VAR 0 13
38423: PUSH
38424: LD_INT 2
38426: PLUS
38427: ST_TO_ADDR
// continue ;
38428: GO 38228
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38430: LD_VAR 0 12
38434: PUSH
38435: LD_INT 1
38437: ARRAY
38438: PPUSH
38439: CALL_OW 266
38443: PUSH
38444: LD_INT 5
38446: EQUAL
38447: IFFALSE 38521
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38449: LD_VAR 0 12
38453: PUSH
38454: LD_INT 1
38456: ARRAY
38457: PPUSH
38458: CALL_OW 313
38462: PUSH
38463: LD_INT 3
38465: LESS
38466: IFFALSE 38502
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38468: LD_INT 0
38470: PPUSH
38471: LD_INT 5
38473: PUSH
38474: LD_INT 8
38476: PUSH
38477: LD_INT 9
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: LIST
38484: PUSH
38485: LD_VAR 0 17
38489: ARRAY
38490: PPUSH
38491: LD_VAR 0 4
38495: PPUSH
38496: CALL_OW 380
38500: GO 38519
// PrepareHuman ( false , i , skill ) ;
38502: LD_INT 0
38504: PPUSH
38505: LD_VAR 0 8
38509: PPUSH
38510: LD_VAR 0 4
38514: PPUSH
38515: CALL_OW 380
// end else
38519: GO 38538
// PrepareHuman ( false , i , skill ) ;
38521: LD_INT 0
38523: PPUSH
38524: LD_VAR 0 8
38528: PPUSH
38529: LD_VAR 0 4
38533: PPUSH
38534: CALL_OW 380
// un := CreateHuman ;
38538: LD_ADDR_VAR 0 14
38542: PUSH
38543: CALL_OW 44
38547: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38548: LD_ADDR_VAR 0 7
38552: PUSH
38553: LD_VAR 0 7
38557: PPUSH
38558: LD_INT 1
38560: PPUSH
38561: LD_VAR 0 14
38565: PPUSH
38566: CALL_OW 2
38570: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38571: LD_VAR 0 14
38575: PPUSH
38576: LD_VAR 0 12
38580: PUSH
38581: LD_INT 1
38583: ARRAY
38584: PPUSH
38585: CALL_OW 52
// end ;
38589: GO 38228
38591: POP
38592: POP
// end ;
38593: GO 37530
38595: POP
38596: POP
// result := result ^ buildings ;
38597: LD_ADDR_VAR 0 7
38601: PUSH
38602: LD_VAR 0 7
38606: PUSH
38607: LD_VAR 0 18
38611: ADD
38612: ST_TO_ADDR
// end else
38613: GO 38756
// begin for i = 1 to personel do
38615: LD_ADDR_VAR 0 8
38619: PUSH
38620: DOUBLE
38621: LD_INT 1
38623: DEC
38624: ST_TO_ADDR
38625: LD_VAR 0 6
38629: PUSH
38630: FOR_TO
38631: IFFALSE 38754
// begin if i > 4 then
38633: LD_VAR 0 8
38637: PUSH
38638: LD_INT 4
38640: GREATER
38641: IFFALSE 38645
// break ;
38643: GO 38754
// x := personel [ i ] ;
38645: LD_ADDR_VAR 0 13
38649: PUSH
38650: LD_VAR 0 6
38654: PUSH
38655: LD_VAR 0 8
38659: ARRAY
38660: ST_TO_ADDR
// if x = - 1 then
38661: LD_VAR 0 13
38665: PUSH
38666: LD_INT 1
38668: NEG
38669: EQUAL
38670: IFFALSE 38674
// continue ;
38672: GO 38630
// PrepareHuman ( false , i , skill ) ;
38674: LD_INT 0
38676: PPUSH
38677: LD_VAR 0 8
38681: PPUSH
38682: LD_VAR 0 4
38686: PPUSH
38687: CALL_OW 380
// un := CreateHuman ;
38691: LD_ADDR_VAR 0 14
38695: PUSH
38696: CALL_OW 44
38700: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38701: LD_VAR 0 14
38705: PPUSH
38706: LD_VAR 0 1
38710: PPUSH
38711: CALL_OW 250
38715: PPUSH
38716: LD_VAR 0 1
38720: PPUSH
38721: CALL_OW 251
38725: PPUSH
38726: LD_INT 10
38728: PPUSH
38729: LD_INT 0
38731: PPUSH
38732: CALL_OW 50
// result := result ^ un ;
38736: LD_ADDR_VAR 0 7
38740: PUSH
38741: LD_VAR 0 7
38745: PUSH
38746: LD_VAR 0 14
38750: ADD
38751: ST_TO_ADDR
// end ;
38752: GO 38630
38754: POP
38755: POP
// end ; end ;
38756: LD_VAR 0 7
38760: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38761: LD_INT 0
38763: PPUSH
38764: PPUSH
38765: PPUSH
38766: PPUSH
38767: PPUSH
38768: PPUSH
38769: PPUSH
38770: PPUSH
38771: PPUSH
38772: PPUSH
38773: PPUSH
38774: PPUSH
38775: PPUSH
38776: PPUSH
38777: PPUSH
38778: PPUSH
// result := false ;
38779: LD_ADDR_VAR 0 3
38783: PUSH
38784: LD_INT 0
38786: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38787: LD_VAR 0 1
38791: NOT
38792: PUSH
38793: LD_VAR 0 1
38797: PPUSH
38798: CALL_OW 266
38802: PUSH
38803: LD_INT 32
38805: PUSH
38806: LD_INT 33
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: IN
38813: NOT
38814: OR
38815: IFFALSE 38819
// exit ;
38817: GO 39928
// nat := GetNation ( tower ) ;
38819: LD_ADDR_VAR 0 12
38823: PUSH
38824: LD_VAR 0 1
38828: PPUSH
38829: CALL_OW 248
38833: ST_TO_ADDR
// side := GetSide ( tower ) ;
38834: LD_ADDR_VAR 0 16
38838: PUSH
38839: LD_VAR 0 1
38843: PPUSH
38844: CALL_OW 255
38848: ST_TO_ADDR
// x := GetX ( tower ) ;
38849: LD_ADDR_VAR 0 10
38853: PUSH
38854: LD_VAR 0 1
38858: PPUSH
38859: CALL_OW 250
38863: ST_TO_ADDR
// y := GetY ( tower ) ;
38864: LD_ADDR_VAR 0 11
38868: PUSH
38869: LD_VAR 0 1
38873: PPUSH
38874: CALL_OW 251
38878: ST_TO_ADDR
// if not x or not y then
38879: LD_VAR 0 10
38883: NOT
38884: PUSH
38885: LD_VAR 0 11
38889: NOT
38890: OR
38891: IFFALSE 38895
// exit ;
38893: GO 39928
// weapon := 0 ;
38895: LD_ADDR_VAR 0 18
38899: PUSH
38900: LD_INT 0
38902: ST_TO_ADDR
// fac_list := [ ] ;
38903: LD_ADDR_VAR 0 17
38907: PUSH
38908: EMPTY
38909: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38910: LD_ADDR_VAR 0 6
38914: PUSH
38915: LD_VAR 0 1
38919: PPUSH
38920: CALL_OW 274
38924: PPUSH
38925: LD_VAR 0 2
38929: PPUSH
38930: LD_INT 0
38932: PPUSH
38933: CALL 36499 0 3
38937: PPUSH
38938: LD_INT 30
38940: PUSH
38941: LD_INT 3
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PPUSH
38948: CALL_OW 72
38952: ST_TO_ADDR
// if not factories then
38953: LD_VAR 0 6
38957: NOT
38958: IFFALSE 38962
// exit ;
38960: GO 39928
// for i in factories do
38962: LD_ADDR_VAR 0 8
38966: PUSH
38967: LD_VAR 0 6
38971: PUSH
38972: FOR_IN
38973: IFFALSE 38998
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38975: LD_ADDR_VAR 0 17
38979: PUSH
38980: LD_VAR 0 17
38984: PUSH
38985: LD_VAR 0 8
38989: PPUSH
38990: CALL_OW 478
38994: UNION
38995: ST_TO_ADDR
38996: GO 38972
38998: POP
38999: POP
// if not fac_list then
39000: LD_VAR 0 17
39004: NOT
39005: IFFALSE 39009
// exit ;
39007: GO 39928
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39009: LD_ADDR_VAR 0 5
39013: PUSH
39014: LD_INT 4
39016: PUSH
39017: LD_INT 5
39019: PUSH
39020: LD_INT 9
39022: PUSH
39023: LD_INT 10
39025: PUSH
39026: LD_INT 6
39028: PUSH
39029: LD_INT 7
39031: PUSH
39032: LD_INT 11
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 27
39046: PUSH
39047: LD_INT 28
39049: PUSH
39050: LD_INT 26
39052: PUSH
39053: LD_INT 30
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 43
39064: PUSH
39065: LD_INT 44
39067: PUSH
39068: LD_INT 46
39070: PUSH
39071: LD_INT 45
39073: PUSH
39074: LD_INT 47
39076: PUSH
39077: LD_INT 49
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: LIST
39092: PUSH
39093: LD_VAR 0 12
39097: ARRAY
39098: ST_TO_ADDR
// list := list isect fac_list ;
39099: LD_ADDR_VAR 0 5
39103: PUSH
39104: LD_VAR 0 5
39108: PUSH
39109: LD_VAR 0 17
39113: ISECT
39114: ST_TO_ADDR
// if not list then
39115: LD_VAR 0 5
39119: NOT
39120: IFFALSE 39124
// exit ;
39122: GO 39928
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39124: LD_VAR 0 12
39128: PUSH
39129: LD_INT 3
39131: EQUAL
39132: PUSH
39133: LD_INT 49
39135: PUSH
39136: LD_VAR 0 5
39140: IN
39141: AND
39142: PUSH
39143: LD_INT 31
39145: PPUSH
39146: LD_VAR 0 16
39150: PPUSH
39151: CALL_OW 321
39155: PUSH
39156: LD_INT 2
39158: EQUAL
39159: AND
39160: IFFALSE 39220
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39162: LD_INT 22
39164: PUSH
39165: LD_VAR 0 16
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 35
39176: PUSH
39177: LD_INT 49
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 91
39186: PUSH
39187: LD_VAR 0 1
39191: PUSH
39192: LD_INT 10
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: LIST
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: LIST
39204: PPUSH
39205: CALL_OW 69
39209: NOT
39210: IFFALSE 39220
// weapon := ru_time_lapser ;
39212: LD_ADDR_VAR 0 18
39216: PUSH
39217: LD_INT 49
39219: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39220: LD_VAR 0 12
39224: PUSH
39225: LD_INT 1
39227: PUSH
39228: LD_INT 2
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: IN
39235: PUSH
39236: LD_INT 11
39238: PUSH
39239: LD_VAR 0 5
39243: IN
39244: PUSH
39245: LD_INT 30
39247: PUSH
39248: LD_VAR 0 5
39252: IN
39253: OR
39254: AND
39255: PUSH
39256: LD_INT 6
39258: PPUSH
39259: LD_VAR 0 16
39263: PPUSH
39264: CALL_OW 321
39268: PUSH
39269: LD_INT 2
39271: EQUAL
39272: AND
39273: IFFALSE 39438
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39275: LD_INT 22
39277: PUSH
39278: LD_VAR 0 16
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 2
39289: PUSH
39290: LD_INT 35
39292: PUSH
39293: LD_INT 11
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 35
39302: PUSH
39303: LD_INT 30
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 91
39317: PUSH
39318: LD_VAR 0 1
39322: PUSH
39323: LD_INT 18
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: LIST
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: LIST
39335: PPUSH
39336: CALL_OW 69
39340: NOT
39341: PUSH
39342: LD_INT 22
39344: PUSH
39345: LD_VAR 0 16
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 2
39356: PUSH
39357: LD_INT 30
39359: PUSH
39360: LD_INT 32
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 30
39369: PUSH
39370: LD_INT 33
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 91
39384: PUSH
39385: LD_VAR 0 1
39389: PUSH
39390: LD_INT 12
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: LIST
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: LIST
39402: PUSH
39403: EMPTY
39404: LIST
39405: PPUSH
39406: CALL_OW 69
39410: PUSH
39411: LD_INT 2
39413: GREATER
39414: AND
39415: IFFALSE 39438
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39417: LD_ADDR_VAR 0 18
39421: PUSH
39422: LD_INT 11
39424: PUSH
39425: LD_INT 30
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_VAR 0 12
39436: ARRAY
39437: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39438: LD_VAR 0 18
39442: NOT
39443: PUSH
39444: LD_INT 40
39446: PPUSH
39447: LD_VAR 0 16
39451: PPUSH
39452: CALL_OW 321
39456: PUSH
39457: LD_INT 2
39459: EQUAL
39460: AND
39461: PUSH
39462: LD_INT 7
39464: PUSH
39465: LD_VAR 0 5
39469: IN
39470: PUSH
39471: LD_INT 28
39473: PUSH
39474: LD_VAR 0 5
39478: IN
39479: OR
39480: PUSH
39481: LD_INT 45
39483: PUSH
39484: LD_VAR 0 5
39488: IN
39489: OR
39490: AND
39491: IFFALSE 39745
// begin hex := GetHexInfo ( x , y ) ;
39493: LD_ADDR_VAR 0 4
39497: PUSH
39498: LD_VAR 0 10
39502: PPUSH
39503: LD_VAR 0 11
39507: PPUSH
39508: CALL_OW 546
39512: ST_TO_ADDR
// if hex [ 1 ] then
39513: LD_VAR 0 4
39517: PUSH
39518: LD_INT 1
39520: ARRAY
39521: IFFALSE 39525
// exit ;
39523: GO 39928
// height := hex [ 2 ] ;
39525: LD_ADDR_VAR 0 15
39529: PUSH
39530: LD_VAR 0 4
39534: PUSH
39535: LD_INT 2
39537: ARRAY
39538: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39539: LD_ADDR_VAR 0 14
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: LD_INT 2
39549: PUSH
39550: LD_INT 3
39552: PUSH
39553: LD_INT 5
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: ST_TO_ADDR
// for i in tmp do
39562: LD_ADDR_VAR 0 8
39566: PUSH
39567: LD_VAR 0 14
39571: PUSH
39572: FOR_IN
39573: IFFALSE 39743
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39575: LD_ADDR_VAR 0 9
39579: PUSH
39580: LD_VAR 0 10
39584: PPUSH
39585: LD_VAR 0 8
39589: PPUSH
39590: LD_INT 5
39592: PPUSH
39593: CALL_OW 272
39597: PUSH
39598: LD_VAR 0 11
39602: PPUSH
39603: LD_VAR 0 8
39607: PPUSH
39608: LD_INT 5
39610: PPUSH
39611: CALL_OW 273
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39620: LD_VAR 0 9
39624: PUSH
39625: LD_INT 1
39627: ARRAY
39628: PPUSH
39629: LD_VAR 0 9
39633: PUSH
39634: LD_INT 2
39636: ARRAY
39637: PPUSH
39638: CALL_OW 488
39642: IFFALSE 39741
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39644: LD_ADDR_VAR 0 4
39648: PUSH
39649: LD_VAR 0 9
39653: PUSH
39654: LD_INT 1
39656: ARRAY
39657: PPUSH
39658: LD_VAR 0 9
39662: PUSH
39663: LD_INT 2
39665: ARRAY
39666: PPUSH
39667: CALL_OW 546
39671: ST_TO_ADDR
// if hex [ 1 ] then
39672: LD_VAR 0 4
39676: PUSH
39677: LD_INT 1
39679: ARRAY
39680: IFFALSE 39684
// continue ;
39682: GO 39572
// h := hex [ 2 ] ;
39684: LD_ADDR_VAR 0 13
39688: PUSH
39689: LD_VAR 0 4
39693: PUSH
39694: LD_INT 2
39696: ARRAY
39697: ST_TO_ADDR
// if h + 7 < height then
39698: LD_VAR 0 13
39702: PUSH
39703: LD_INT 7
39705: PLUS
39706: PUSH
39707: LD_VAR 0 15
39711: LESS
39712: IFFALSE 39741
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39714: LD_ADDR_VAR 0 18
39718: PUSH
39719: LD_INT 7
39721: PUSH
39722: LD_INT 28
39724: PUSH
39725: LD_INT 45
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: PUSH
39733: LD_VAR 0 12
39737: ARRAY
39738: ST_TO_ADDR
// break ;
39739: GO 39743
// end ; end ; end ;
39741: GO 39572
39743: POP
39744: POP
// end ; if not weapon then
39745: LD_VAR 0 18
39749: NOT
39750: IFFALSE 39810
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39752: LD_ADDR_VAR 0 5
39756: PUSH
39757: LD_VAR 0 5
39761: PUSH
39762: LD_INT 11
39764: PUSH
39765: LD_INT 30
39767: PUSH
39768: LD_INT 49
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: LIST
39775: DIFF
39776: ST_TO_ADDR
// if not list then
39777: LD_VAR 0 5
39781: NOT
39782: IFFALSE 39786
// exit ;
39784: GO 39928
// weapon := list [ rand ( 1 , list ) ] ;
39786: LD_ADDR_VAR 0 18
39790: PUSH
39791: LD_VAR 0 5
39795: PUSH
39796: LD_INT 1
39798: PPUSH
39799: LD_VAR 0 5
39803: PPUSH
39804: CALL_OW 12
39808: ARRAY
39809: ST_TO_ADDR
// end ; if weapon then
39810: LD_VAR 0 18
39814: IFFALSE 39928
// begin tmp := CostOfWeapon ( weapon ) ;
39816: LD_ADDR_VAR 0 14
39820: PUSH
39821: LD_VAR 0 18
39825: PPUSH
39826: CALL_OW 451
39830: ST_TO_ADDR
// j := GetBase ( tower ) ;
39831: LD_ADDR_VAR 0 9
39835: PUSH
39836: LD_VAR 0 1
39840: PPUSH
39841: CALL_OW 274
39845: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39846: LD_VAR 0 9
39850: PPUSH
39851: LD_INT 1
39853: PPUSH
39854: CALL_OW 275
39858: PUSH
39859: LD_VAR 0 14
39863: PUSH
39864: LD_INT 1
39866: ARRAY
39867: GREATEREQUAL
39868: PUSH
39869: LD_VAR 0 9
39873: PPUSH
39874: LD_INT 2
39876: PPUSH
39877: CALL_OW 275
39881: PUSH
39882: LD_VAR 0 14
39886: PUSH
39887: LD_INT 2
39889: ARRAY
39890: GREATEREQUAL
39891: AND
39892: PUSH
39893: LD_VAR 0 9
39897: PPUSH
39898: LD_INT 3
39900: PPUSH
39901: CALL_OW 275
39905: PUSH
39906: LD_VAR 0 14
39910: PUSH
39911: LD_INT 3
39913: ARRAY
39914: GREATEREQUAL
39915: AND
39916: IFFALSE 39928
// result := weapon ;
39918: LD_ADDR_VAR 0 3
39922: PUSH
39923: LD_VAR 0 18
39927: ST_TO_ADDR
// end ; end ;
39928: LD_VAR 0 3
39932: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39933: LD_INT 0
39935: PPUSH
39936: PPUSH
// result := true ;
39937: LD_ADDR_VAR 0 3
39941: PUSH
39942: LD_INT 1
39944: ST_TO_ADDR
// if array1 = array2 then
39945: LD_VAR 0 1
39949: PUSH
39950: LD_VAR 0 2
39954: EQUAL
39955: IFFALSE 40015
// begin for i = 1 to array1 do
39957: LD_ADDR_VAR 0 4
39961: PUSH
39962: DOUBLE
39963: LD_INT 1
39965: DEC
39966: ST_TO_ADDR
39967: LD_VAR 0 1
39971: PUSH
39972: FOR_TO
39973: IFFALSE 40011
// if array1 [ i ] <> array2 [ i ] then
39975: LD_VAR 0 1
39979: PUSH
39980: LD_VAR 0 4
39984: ARRAY
39985: PUSH
39986: LD_VAR 0 2
39990: PUSH
39991: LD_VAR 0 4
39995: ARRAY
39996: NONEQUAL
39997: IFFALSE 40009
// begin result := false ;
39999: LD_ADDR_VAR 0 3
40003: PUSH
40004: LD_INT 0
40006: ST_TO_ADDR
// break ;
40007: GO 40011
// end ;
40009: GO 39972
40011: POP
40012: POP
// end else
40013: GO 40023
// result := false ;
40015: LD_ADDR_VAR 0 3
40019: PUSH
40020: LD_INT 0
40022: ST_TO_ADDR
// end ;
40023: LD_VAR 0 3
40027: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40028: LD_INT 0
40030: PPUSH
40031: PPUSH
// if not array1 or not array2 then
40032: LD_VAR 0 1
40036: NOT
40037: PUSH
40038: LD_VAR 0 2
40042: NOT
40043: OR
40044: IFFALSE 40048
// exit ;
40046: GO 40112
// result := true ;
40048: LD_ADDR_VAR 0 3
40052: PUSH
40053: LD_INT 1
40055: ST_TO_ADDR
// for i = 1 to array1 do
40056: LD_ADDR_VAR 0 4
40060: PUSH
40061: DOUBLE
40062: LD_INT 1
40064: DEC
40065: ST_TO_ADDR
40066: LD_VAR 0 1
40070: PUSH
40071: FOR_TO
40072: IFFALSE 40110
// if array1 [ i ] <> array2 [ i ] then
40074: LD_VAR 0 1
40078: PUSH
40079: LD_VAR 0 4
40083: ARRAY
40084: PUSH
40085: LD_VAR 0 2
40089: PUSH
40090: LD_VAR 0 4
40094: ARRAY
40095: NONEQUAL
40096: IFFALSE 40108
// begin result := false ;
40098: LD_ADDR_VAR 0 3
40102: PUSH
40103: LD_INT 0
40105: ST_TO_ADDR
// break ;
40106: GO 40110
// end ;
40108: GO 40071
40110: POP
40111: POP
// end ;
40112: LD_VAR 0 3
40116: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40117: LD_INT 0
40119: PPUSH
40120: PPUSH
40121: PPUSH
// pom := GetBase ( fac ) ;
40122: LD_ADDR_VAR 0 5
40126: PUSH
40127: LD_VAR 0 1
40131: PPUSH
40132: CALL_OW 274
40136: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40137: LD_ADDR_VAR 0 4
40141: PUSH
40142: LD_VAR 0 2
40146: PUSH
40147: LD_INT 1
40149: ARRAY
40150: PPUSH
40151: LD_VAR 0 2
40155: PUSH
40156: LD_INT 2
40158: ARRAY
40159: PPUSH
40160: LD_VAR 0 2
40164: PUSH
40165: LD_INT 3
40167: ARRAY
40168: PPUSH
40169: LD_VAR 0 2
40173: PUSH
40174: LD_INT 4
40176: ARRAY
40177: PPUSH
40178: CALL_OW 449
40182: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40183: LD_ADDR_VAR 0 3
40187: PUSH
40188: LD_VAR 0 5
40192: PPUSH
40193: LD_INT 1
40195: PPUSH
40196: CALL_OW 275
40200: PUSH
40201: LD_VAR 0 4
40205: PUSH
40206: LD_INT 1
40208: ARRAY
40209: GREATEREQUAL
40210: PUSH
40211: LD_VAR 0 5
40215: PPUSH
40216: LD_INT 2
40218: PPUSH
40219: CALL_OW 275
40223: PUSH
40224: LD_VAR 0 4
40228: PUSH
40229: LD_INT 2
40231: ARRAY
40232: GREATEREQUAL
40233: AND
40234: PUSH
40235: LD_VAR 0 5
40239: PPUSH
40240: LD_INT 3
40242: PPUSH
40243: CALL_OW 275
40247: PUSH
40248: LD_VAR 0 4
40252: PUSH
40253: LD_INT 3
40255: ARRAY
40256: GREATEREQUAL
40257: AND
40258: ST_TO_ADDR
// end ;
40259: LD_VAR 0 3
40263: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40264: LD_INT 0
40266: PPUSH
40267: PPUSH
40268: PPUSH
40269: PPUSH
// pom := GetBase ( building ) ;
40270: LD_ADDR_VAR 0 3
40274: PUSH
40275: LD_VAR 0 1
40279: PPUSH
40280: CALL_OW 274
40284: ST_TO_ADDR
// if not pom then
40285: LD_VAR 0 3
40289: NOT
40290: IFFALSE 40294
// exit ;
40292: GO 40464
// btype := GetBType ( building ) ;
40294: LD_ADDR_VAR 0 5
40298: PUSH
40299: LD_VAR 0 1
40303: PPUSH
40304: CALL_OW 266
40308: ST_TO_ADDR
// if btype = b_armoury then
40309: LD_VAR 0 5
40313: PUSH
40314: LD_INT 4
40316: EQUAL
40317: IFFALSE 40327
// btype := b_barracks ;
40319: LD_ADDR_VAR 0 5
40323: PUSH
40324: LD_INT 5
40326: ST_TO_ADDR
// if btype = b_depot then
40327: LD_VAR 0 5
40331: PUSH
40332: LD_INT 0
40334: EQUAL
40335: IFFALSE 40345
// btype := b_warehouse ;
40337: LD_ADDR_VAR 0 5
40341: PUSH
40342: LD_INT 1
40344: ST_TO_ADDR
// if btype = b_workshop then
40345: LD_VAR 0 5
40349: PUSH
40350: LD_INT 2
40352: EQUAL
40353: IFFALSE 40363
// btype := b_factory ;
40355: LD_ADDR_VAR 0 5
40359: PUSH
40360: LD_INT 3
40362: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40363: LD_ADDR_VAR 0 4
40367: PUSH
40368: LD_VAR 0 5
40372: PPUSH
40373: LD_VAR 0 1
40377: PPUSH
40378: CALL_OW 248
40382: PPUSH
40383: CALL_OW 450
40387: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40388: LD_ADDR_VAR 0 2
40392: PUSH
40393: LD_VAR 0 3
40397: PPUSH
40398: LD_INT 1
40400: PPUSH
40401: CALL_OW 275
40405: PUSH
40406: LD_VAR 0 4
40410: PUSH
40411: LD_INT 1
40413: ARRAY
40414: GREATEREQUAL
40415: PUSH
40416: LD_VAR 0 3
40420: PPUSH
40421: LD_INT 2
40423: PPUSH
40424: CALL_OW 275
40428: PUSH
40429: LD_VAR 0 4
40433: PUSH
40434: LD_INT 2
40436: ARRAY
40437: GREATEREQUAL
40438: AND
40439: PUSH
40440: LD_VAR 0 3
40444: PPUSH
40445: LD_INT 3
40447: PPUSH
40448: CALL_OW 275
40452: PUSH
40453: LD_VAR 0 4
40457: PUSH
40458: LD_INT 3
40460: ARRAY
40461: GREATEREQUAL
40462: AND
40463: ST_TO_ADDR
// end ;
40464: LD_VAR 0 2
40468: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40469: LD_INT 0
40471: PPUSH
40472: PPUSH
40473: PPUSH
// pom := GetBase ( building ) ;
40474: LD_ADDR_VAR 0 4
40478: PUSH
40479: LD_VAR 0 1
40483: PPUSH
40484: CALL_OW 274
40488: ST_TO_ADDR
// if not pom then
40489: LD_VAR 0 4
40493: NOT
40494: IFFALSE 40498
// exit ;
40496: GO 40599
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40498: LD_ADDR_VAR 0 5
40502: PUSH
40503: LD_VAR 0 2
40507: PPUSH
40508: LD_VAR 0 1
40512: PPUSH
40513: CALL_OW 248
40517: PPUSH
40518: CALL_OW 450
40522: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40523: LD_ADDR_VAR 0 3
40527: PUSH
40528: LD_VAR 0 4
40532: PPUSH
40533: LD_INT 1
40535: PPUSH
40536: CALL_OW 275
40540: PUSH
40541: LD_VAR 0 5
40545: PUSH
40546: LD_INT 1
40548: ARRAY
40549: GREATEREQUAL
40550: PUSH
40551: LD_VAR 0 4
40555: PPUSH
40556: LD_INT 2
40558: PPUSH
40559: CALL_OW 275
40563: PUSH
40564: LD_VAR 0 5
40568: PUSH
40569: LD_INT 2
40571: ARRAY
40572: GREATEREQUAL
40573: AND
40574: PUSH
40575: LD_VAR 0 4
40579: PPUSH
40580: LD_INT 3
40582: PPUSH
40583: CALL_OW 275
40587: PUSH
40588: LD_VAR 0 5
40592: PUSH
40593: LD_INT 3
40595: ARRAY
40596: GREATEREQUAL
40597: AND
40598: ST_TO_ADDR
// end ;
40599: LD_VAR 0 3
40603: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40604: LD_INT 0
40606: PPUSH
40607: PPUSH
40608: PPUSH
40609: PPUSH
40610: PPUSH
40611: PPUSH
40612: PPUSH
40613: PPUSH
40614: PPUSH
40615: PPUSH
40616: PPUSH
// result := false ;
40617: LD_ADDR_VAR 0 8
40621: PUSH
40622: LD_INT 0
40624: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40625: LD_VAR 0 5
40629: NOT
40630: PUSH
40631: LD_VAR 0 1
40635: NOT
40636: OR
40637: PUSH
40638: LD_VAR 0 2
40642: NOT
40643: OR
40644: PUSH
40645: LD_VAR 0 3
40649: NOT
40650: OR
40651: IFFALSE 40655
// exit ;
40653: GO 41469
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40655: LD_ADDR_VAR 0 14
40659: PUSH
40660: LD_VAR 0 1
40664: PPUSH
40665: LD_VAR 0 2
40669: PPUSH
40670: LD_VAR 0 3
40674: PPUSH
40675: LD_VAR 0 4
40679: PPUSH
40680: LD_VAR 0 5
40684: PUSH
40685: LD_INT 1
40687: ARRAY
40688: PPUSH
40689: CALL_OW 248
40693: PPUSH
40694: LD_INT 0
40696: PPUSH
40697: CALL 42702 0 6
40701: ST_TO_ADDR
// if not hexes then
40702: LD_VAR 0 14
40706: NOT
40707: IFFALSE 40711
// exit ;
40709: GO 41469
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40711: LD_ADDR_VAR 0 17
40715: PUSH
40716: LD_VAR 0 5
40720: PPUSH
40721: LD_INT 22
40723: PUSH
40724: LD_VAR 0 13
40728: PPUSH
40729: CALL_OW 255
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 2
40740: PUSH
40741: LD_INT 30
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 30
40753: PUSH
40754: LD_INT 1
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: LIST
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PPUSH
40770: CALL_OW 72
40774: ST_TO_ADDR
// for i = 1 to hexes do
40775: LD_ADDR_VAR 0 9
40779: PUSH
40780: DOUBLE
40781: LD_INT 1
40783: DEC
40784: ST_TO_ADDR
40785: LD_VAR 0 14
40789: PUSH
40790: FOR_TO
40791: IFFALSE 41467
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40793: LD_ADDR_VAR 0 13
40797: PUSH
40798: LD_VAR 0 14
40802: PUSH
40803: LD_VAR 0 9
40807: ARRAY
40808: PUSH
40809: LD_INT 1
40811: ARRAY
40812: PPUSH
40813: LD_VAR 0 14
40817: PUSH
40818: LD_VAR 0 9
40822: ARRAY
40823: PUSH
40824: LD_INT 2
40826: ARRAY
40827: PPUSH
40828: CALL_OW 428
40832: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40833: LD_VAR 0 14
40837: PUSH
40838: LD_VAR 0 9
40842: ARRAY
40843: PUSH
40844: LD_INT 1
40846: ARRAY
40847: PPUSH
40848: LD_VAR 0 14
40852: PUSH
40853: LD_VAR 0 9
40857: ARRAY
40858: PUSH
40859: LD_INT 2
40861: ARRAY
40862: PPUSH
40863: CALL_OW 351
40867: PUSH
40868: LD_VAR 0 14
40872: PUSH
40873: LD_VAR 0 9
40877: ARRAY
40878: PUSH
40879: LD_INT 1
40881: ARRAY
40882: PPUSH
40883: LD_VAR 0 14
40887: PUSH
40888: LD_VAR 0 9
40892: ARRAY
40893: PUSH
40894: LD_INT 2
40896: ARRAY
40897: PPUSH
40898: CALL_OW 488
40902: NOT
40903: OR
40904: PUSH
40905: LD_VAR 0 13
40909: PPUSH
40910: CALL_OW 247
40914: PUSH
40915: LD_INT 3
40917: EQUAL
40918: OR
40919: IFFALSE 40925
// exit ;
40921: POP
40922: POP
40923: GO 41469
// if not tmp then
40925: LD_VAR 0 13
40929: NOT
40930: IFFALSE 40934
// continue ;
40932: GO 40790
// result := true ;
40934: LD_ADDR_VAR 0 8
40938: PUSH
40939: LD_INT 1
40941: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40942: LD_VAR 0 6
40946: PUSH
40947: LD_VAR 0 13
40951: PPUSH
40952: CALL_OW 247
40956: PUSH
40957: LD_INT 2
40959: EQUAL
40960: AND
40961: PUSH
40962: LD_VAR 0 13
40966: PPUSH
40967: CALL_OW 263
40971: PUSH
40972: LD_INT 1
40974: EQUAL
40975: AND
40976: IFFALSE 41140
// begin if IsDrivenBy ( tmp ) then
40978: LD_VAR 0 13
40982: PPUSH
40983: CALL_OW 311
40987: IFFALSE 40991
// continue ;
40989: GO 40790
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40991: LD_VAR 0 6
40995: PPUSH
40996: LD_INT 3
40998: PUSH
40999: LD_INT 60
41001: PUSH
41002: EMPTY
41003: LIST
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 3
41011: PUSH
41012: LD_INT 55
41014: PUSH
41015: EMPTY
41016: LIST
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PPUSH
41026: CALL_OW 72
41030: IFFALSE 41138
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41032: LD_ADDR_VAR 0 18
41036: PUSH
41037: LD_VAR 0 6
41041: PPUSH
41042: LD_INT 3
41044: PUSH
41045: LD_INT 60
41047: PUSH
41048: EMPTY
41049: LIST
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 3
41057: PUSH
41058: LD_INT 55
41060: PUSH
41061: EMPTY
41062: LIST
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PPUSH
41072: CALL_OW 72
41076: PUSH
41077: LD_INT 1
41079: ARRAY
41080: ST_TO_ADDR
// if IsInUnit ( driver ) then
41081: LD_VAR 0 18
41085: PPUSH
41086: CALL_OW 310
41090: IFFALSE 41101
// ComExit ( driver ) ;
41092: LD_VAR 0 18
41096: PPUSH
41097: CALL 66481 0 1
// AddComEnterUnit ( driver , tmp ) ;
41101: LD_VAR 0 18
41105: PPUSH
41106: LD_VAR 0 13
41110: PPUSH
41111: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41115: LD_VAR 0 18
41119: PPUSH
41120: LD_VAR 0 7
41124: PPUSH
41125: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41129: LD_VAR 0 18
41133: PPUSH
41134: CALL_OW 181
// end ; continue ;
41138: GO 40790
// end ; if not cleaners or not tmp in cleaners then
41140: LD_VAR 0 6
41144: NOT
41145: PUSH
41146: LD_VAR 0 13
41150: PUSH
41151: LD_VAR 0 6
41155: IN
41156: NOT
41157: OR
41158: IFFALSE 41465
// begin if dep then
41160: LD_VAR 0 17
41164: IFFALSE 41300
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41166: LD_ADDR_VAR 0 16
41170: PUSH
41171: LD_VAR 0 17
41175: PUSH
41176: LD_INT 1
41178: ARRAY
41179: PPUSH
41180: CALL_OW 250
41184: PPUSH
41185: LD_VAR 0 17
41189: PUSH
41190: LD_INT 1
41192: ARRAY
41193: PPUSH
41194: CALL_OW 254
41198: PPUSH
41199: LD_INT 5
41201: PPUSH
41202: CALL_OW 272
41206: PUSH
41207: LD_VAR 0 17
41211: PUSH
41212: LD_INT 1
41214: ARRAY
41215: PPUSH
41216: CALL_OW 251
41220: PPUSH
41221: LD_VAR 0 17
41225: PUSH
41226: LD_INT 1
41228: ARRAY
41229: PPUSH
41230: CALL_OW 254
41234: PPUSH
41235: LD_INT 5
41237: PPUSH
41238: CALL_OW 273
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41247: LD_VAR 0 16
41251: PUSH
41252: LD_INT 1
41254: ARRAY
41255: PPUSH
41256: LD_VAR 0 16
41260: PUSH
41261: LD_INT 2
41263: ARRAY
41264: PPUSH
41265: CALL_OW 488
41269: IFFALSE 41300
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41271: LD_VAR 0 13
41275: PPUSH
41276: LD_VAR 0 16
41280: PUSH
41281: LD_INT 1
41283: ARRAY
41284: PPUSH
41285: LD_VAR 0 16
41289: PUSH
41290: LD_INT 2
41292: ARRAY
41293: PPUSH
41294: CALL_OW 111
// continue ;
41298: GO 40790
// end ; end ; r := GetDir ( tmp ) ;
41300: LD_ADDR_VAR 0 15
41304: PUSH
41305: LD_VAR 0 13
41309: PPUSH
41310: CALL_OW 254
41314: ST_TO_ADDR
// if r = 5 then
41315: LD_VAR 0 15
41319: PUSH
41320: LD_INT 5
41322: EQUAL
41323: IFFALSE 41333
// r := 0 ;
41325: LD_ADDR_VAR 0 15
41329: PUSH
41330: LD_INT 0
41332: ST_TO_ADDR
// for j = r to 5 do
41333: LD_ADDR_VAR 0 10
41337: PUSH
41338: DOUBLE
41339: LD_VAR 0 15
41343: DEC
41344: ST_TO_ADDR
41345: LD_INT 5
41347: PUSH
41348: FOR_TO
41349: IFFALSE 41463
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41351: LD_ADDR_VAR 0 11
41355: PUSH
41356: LD_VAR 0 13
41360: PPUSH
41361: CALL_OW 250
41365: PPUSH
41366: LD_VAR 0 10
41370: PPUSH
41371: LD_INT 2
41373: PPUSH
41374: CALL_OW 272
41378: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41379: LD_ADDR_VAR 0 12
41383: PUSH
41384: LD_VAR 0 13
41388: PPUSH
41389: CALL_OW 251
41393: PPUSH
41394: LD_VAR 0 10
41398: PPUSH
41399: LD_INT 2
41401: PPUSH
41402: CALL_OW 273
41406: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41407: LD_VAR 0 11
41411: PPUSH
41412: LD_VAR 0 12
41416: PPUSH
41417: CALL_OW 488
41421: PUSH
41422: LD_VAR 0 11
41426: PPUSH
41427: LD_VAR 0 12
41431: PPUSH
41432: CALL_OW 428
41436: NOT
41437: AND
41438: IFFALSE 41461
// begin ComMoveXY ( tmp , _x , _y ) ;
41440: LD_VAR 0 13
41444: PPUSH
41445: LD_VAR 0 11
41449: PPUSH
41450: LD_VAR 0 12
41454: PPUSH
41455: CALL_OW 111
// break ;
41459: GO 41463
// end ; end ;
41461: GO 41348
41463: POP
41464: POP
// end ; end ;
41465: GO 40790
41467: POP
41468: POP
// end ;
41469: LD_VAR 0 8
41473: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41474: LD_INT 0
41476: PPUSH
// result := true ;
41477: LD_ADDR_VAR 0 3
41481: PUSH
41482: LD_INT 1
41484: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41485: LD_VAR 0 2
41489: PUSH
41490: LD_INT 24
41492: DOUBLE
41493: EQUAL
41494: IFTRUE 41504
41496: LD_INT 33
41498: DOUBLE
41499: EQUAL
41500: IFTRUE 41504
41502: GO 41529
41504: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41505: LD_ADDR_VAR 0 3
41509: PUSH
41510: LD_INT 32
41512: PPUSH
41513: LD_VAR 0 1
41517: PPUSH
41518: CALL_OW 321
41522: PUSH
41523: LD_INT 2
41525: EQUAL
41526: ST_TO_ADDR
41527: GO 41845
41529: LD_INT 20
41531: DOUBLE
41532: EQUAL
41533: IFTRUE 41537
41535: GO 41562
41537: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41538: LD_ADDR_VAR 0 3
41542: PUSH
41543: LD_INT 6
41545: PPUSH
41546: LD_VAR 0 1
41550: PPUSH
41551: CALL_OW 321
41555: PUSH
41556: LD_INT 2
41558: EQUAL
41559: ST_TO_ADDR
41560: GO 41845
41562: LD_INT 22
41564: DOUBLE
41565: EQUAL
41566: IFTRUE 41576
41568: LD_INT 36
41570: DOUBLE
41571: EQUAL
41572: IFTRUE 41576
41574: GO 41601
41576: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41577: LD_ADDR_VAR 0 3
41581: PUSH
41582: LD_INT 15
41584: PPUSH
41585: LD_VAR 0 1
41589: PPUSH
41590: CALL_OW 321
41594: PUSH
41595: LD_INT 2
41597: EQUAL
41598: ST_TO_ADDR
41599: GO 41845
41601: LD_INT 30
41603: DOUBLE
41604: EQUAL
41605: IFTRUE 41609
41607: GO 41634
41609: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41610: LD_ADDR_VAR 0 3
41614: PUSH
41615: LD_INT 20
41617: PPUSH
41618: LD_VAR 0 1
41622: PPUSH
41623: CALL_OW 321
41627: PUSH
41628: LD_INT 2
41630: EQUAL
41631: ST_TO_ADDR
41632: GO 41845
41634: LD_INT 28
41636: DOUBLE
41637: EQUAL
41638: IFTRUE 41648
41640: LD_INT 21
41642: DOUBLE
41643: EQUAL
41644: IFTRUE 41648
41646: GO 41673
41648: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41649: LD_ADDR_VAR 0 3
41653: PUSH
41654: LD_INT 21
41656: PPUSH
41657: LD_VAR 0 1
41661: PPUSH
41662: CALL_OW 321
41666: PUSH
41667: LD_INT 2
41669: EQUAL
41670: ST_TO_ADDR
41671: GO 41845
41673: LD_INT 16
41675: DOUBLE
41676: EQUAL
41677: IFTRUE 41681
41679: GO 41706
41681: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41682: LD_ADDR_VAR 0 3
41686: PUSH
41687: LD_INT 84
41689: PPUSH
41690: LD_VAR 0 1
41694: PPUSH
41695: CALL_OW 321
41699: PUSH
41700: LD_INT 2
41702: EQUAL
41703: ST_TO_ADDR
41704: GO 41845
41706: LD_INT 19
41708: DOUBLE
41709: EQUAL
41710: IFTRUE 41720
41712: LD_INT 23
41714: DOUBLE
41715: EQUAL
41716: IFTRUE 41720
41718: GO 41745
41720: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41721: LD_ADDR_VAR 0 3
41725: PUSH
41726: LD_INT 83
41728: PPUSH
41729: LD_VAR 0 1
41733: PPUSH
41734: CALL_OW 321
41738: PUSH
41739: LD_INT 2
41741: EQUAL
41742: ST_TO_ADDR
41743: GO 41845
41745: LD_INT 17
41747: DOUBLE
41748: EQUAL
41749: IFTRUE 41753
41751: GO 41778
41753: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41754: LD_ADDR_VAR 0 3
41758: PUSH
41759: LD_INT 39
41761: PPUSH
41762: LD_VAR 0 1
41766: PPUSH
41767: CALL_OW 321
41771: PUSH
41772: LD_INT 2
41774: EQUAL
41775: ST_TO_ADDR
41776: GO 41845
41778: LD_INT 18
41780: DOUBLE
41781: EQUAL
41782: IFTRUE 41786
41784: GO 41811
41786: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41787: LD_ADDR_VAR 0 3
41791: PUSH
41792: LD_INT 40
41794: PPUSH
41795: LD_VAR 0 1
41799: PPUSH
41800: CALL_OW 321
41804: PUSH
41805: LD_INT 2
41807: EQUAL
41808: ST_TO_ADDR
41809: GO 41845
41811: LD_INT 27
41813: DOUBLE
41814: EQUAL
41815: IFTRUE 41819
41817: GO 41844
41819: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41820: LD_ADDR_VAR 0 3
41824: PUSH
41825: LD_INT 35
41827: PPUSH
41828: LD_VAR 0 1
41832: PPUSH
41833: CALL_OW 321
41837: PUSH
41838: LD_INT 2
41840: EQUAL
41841: ST_TO_ADDR
41842: GO 41845
41844: POP
// end ;
41845: LD_VAR 0 3
41849: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41850: LD_INT 0
41852: PPUSH
41853: PPUSH
41854: PPUSH
41855: PPUSH
41856: PPUSH
41857: PPUSH
41858: PPUSH
41859: PPUSH
41860: PPUSH
41861: PPUSH
41862: PPUSH
// result := false ;
41863: LD_ADDR_VAR 0 6
41867: PUSH
41868: LD_INT 0
41870: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41871: LD_VAR 0 1
41875: NOT
41876: PUSH
41877: LD_VAR 0 1
41881: PPUSH
41882: CALL_OW 266
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: IN
41897: NOT
41898: OR
41899: PUSH
41900: LD_VAR 0 2
41904: NOT
41905: OR
41906: PUSH
41907: LD_VAR 0 5
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: LD_INT 3
41923: PUSH
41924: LD_INT 4
41926: PUSH
41927: LD_INT 5
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: IN
41938: NOT
41939: OR
41940: PUSH
41941: LD_VAR 0 3
41945: PPUSH
41946: LD_VAR 0 4
41950: PPUSH
41951: CALL_OW 488
41955: NOT
41956: OR
41957: IFFALSE 41961
// exit ;
41959: GO 42697
// side := GetSide ( depot ) ;
41961: LD_ADDR_VAR 0 9
41965: PUSH
41966: LD_VAR 0 1
41970: PPUSH
41971: CALL_OW 255
41975: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41976: LD_VAR 0 9
41980: PPUSH
41981: LD_VAR 0 2
41985: PPUSH
41986: CALL 41474 0 2
41990: NOT
41991: IFFALSE 41995
// exit ;
41993: GO 42697
// pom := GetBase ( depot ) ;
41995: LD_ADDR_VAR 0 10
41999: PUSH
42000: LD_VAR 0 1
42004: PPUSH
42005: CALL_OW 274
42009: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42010: LD_ADDR_VAR 0 11
42014: PUSH
42015: LD_VAR 0 2
42019: PPUSH
42020: LD_VAR 0 1
42024: PPUSH
42025: CALL_OW 248
42029: PPUSH
42030: CALL_OW 450
42034: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42035: LD_VAR 0 10
42039: PPUSH
42040: LD_INT 1
42042: PPUSH
42043: CALL_OW 275
42047: PUSH
42048: LD_VAR 0 11
42052: PUSH
42053: LD_INT 1
42055: ARRAY
42056: GREATEREQUAL
42057: PUSH
42058: LD_VAR 0 10
42062: PPUSH
42063: LD_INT 2
42065: PPUSH
42066: CALL_OW 275
42070: PUSH
42071: LD_VAR 0 11
42075: PUSH
42076: LD_INT 2
42078: ARRAY
42079: GREATEREQUAL
42080: AND
42081: PUSH
42082: LD_VAR 0 10
42086: PPUSH
42087: LD_INT 3
42089: PPUSH
42090: CALL_OW 275
42094: PUSH
42095: LD_VAR 0 11
42099: PUSH
42100: LD_INT 3
42102: ARRAY
42103: GREATEREQUAL
42104: AND
42105: NOT
42106: IFFALSE 42110
// exit ;
42108: GO 42697
// if GetBType ( depot ) = b_depot then
42110: LD_VAR 0 1
42114: PPUSH
42115: CALL_OW 266
42119: PUSH
42120: LD_INT 0
42122: EQUAL
42123: IFFALSE 42135
// dist := 28 else
42125: LD_ADDR_VAR 0 14
42129: PUSH
42130: LD_INT 28
42132: ST_TO_ADDR
42133: GO 42143
// dist := 36 ;
42135: LD_ADDR_VAR 0 14
42139: PUSH
42140: LD_INT 36
42142: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42143: LD_VAR 0 1
42147: PPUSH
42148: LD_VAR 0 3
42152: PPUSH
42153: LD_VAR 0 4
42157: PPUSH
42158: CALL_OW 297
42162: PUSH
42163: LD_VAR 0 14
42167: GREATER
42168: IFFALSE 42172
// exit ;
42170: GO 42697
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42172: LD_ADDR_VAR 0 12
42176: PUSH
42177: LD_VAR 0 2
42181: PPUSH
42182: LD_VAR 0 3
42186: PPUSH
42187: LD_VAR 0 4
42191: PPUSH
42192: LD_VAR 0 5
42196: PPUSH
42197: LD_VAR 0 1
42201: PPUSH
42202: CALL_OW 248
42206: PPUSH
42207: LD_INT 0
42209: PPUSH
42210: CALL 42702 0 6
42214: ST_TO_ADDR
// if not hexes then
42215: LD_VAR 0 12
42219: NOT
42220: IFFALSE 42224
// exit ;
42222: GO 42697
// hex := GetHexInfo ( x , y ) ;
42224: LD_ADDR_VAR 0 15
42228: PUSH
42229: LD_VAR 0 3
42233: PPUSH
42234: LD_VAR 0 4
42238: PPUSH
42239: CALL_OW 546
42243: ST_TO_ADDR
// if hex [ 1 ] then
42244: LD_VAR 0 15
42248: PUSH
42249: LD_INT 1
42251: ARRAY
42252: IFFALSE 42256
// exit ;
42254: GO 42697
// height := hex [ 2 ] ;
42256: LD_ADDR_VAR 0 13
42260: PUSH
42261: LD_VAR 0 15
42265: PUSH
42266: LD_INT 2
42268: ARRAY
42269: ST_TO_ADDR
// for i = 1 to hexes do
42270: LD_ADDR_VAR 0 7
42274: PUSH
42275: DOUBLE
42276: LD_INT 1
42278: DEC
42279: ST_TO_ADDR
42280: LD_VAR 0 12
42284: PUSH
42285: FOR_TO
42286: IFFALSE 42616
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42288: LD_VAR 0 12
42292: PUSH
42293: LD_VAR 0 7
42297: ARRAY
42298: PUSH
42299: LD_INT 1
42301: ARRAY
42302: PPUSH
42303: LD_VAR 0 12
42307: PUSH
42308: LD_VAR 0 7
42312: ARRAY
42313: PUSH
42314: LD_INT 2
42316: ARRAY
42317: PPUSH
42318: CALL_OW 488
42322: NOT
42323: PUSH
42324: LD_VAR 0 12
42328: PUSH
42329: LD_VAR 0 7
42333: ARRAY
42334: PUSH
42335: LD_INT 1
42337: ARRAY
42338: PPUSH
42339: LD_VAR 0 12
42343: PUSH
42344: LD_VAR 0 7
42348: ARRAY
42349: PUSH
42350: LD_INT 2
42352: ARRAY
42353: PPUSH
42354: CALL_OW 428
42358: PUSH
42359: LD_INT 0
42361: GREATER
42362: OR
42363: PUSH
42364: LD_VAR 0 12
42368: PUSH
42369: LD_VAR 0 7
42373: ARRAY
42374: PUSH
42375: LD_INT 1
42377: ARRAY
42378: PPUSH
42379: LD_VAR 0 12
42383: PUSH
42384: LD_VAR 0 7
42388: ARRAY
42389: PUSH
42390: LD_INT 2
42392: ARRAY
42393: PPUSH
42394: CALL_OW 351
42398: OR
42399: IFFALSE 42405
// exit ;
42401: POP
42402: POP
42403: GO 42697
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42405: LD_ADDR_VAR 0 8
42409: PUSH
42410: LD_VAR 0 12
42414: PUSH
42415: LD_VAR 0 7
42419: ARRAY
42420: PUSH
42421: LD_INT 1
42423: ARRAY
42424: PPUSH
42425: LD_VAR 0 12
42429: PUSH
42430: LD_VAR 0 7
42434: ARRAY
42435: PUSH
42436: LD_INT 2
42438: ARRAY
42439: PPUSH
42440: CALL_OW 546
42444: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42445: LD_VAR 0 8
42449: PUSH
42450: LD_INT 1
42452: ARRAY
42453: PUSH
42454: LD_VAR 0 8
42458: PUSH
42459: LD_INT 2
42461: ARRAY
42462: PUSH
42463: LD_VAR 0 13
42467: PUSH
42468: LD_INT 2
42470: PLUS
42471: GREATER
42472: OR
42473: PUSH
42474: LD_VAR 0 8
42478: PUSH
42479: LD_INT 2
42481: ARRAY
42482: PUSH
42483: LD_VAR 0 13
42487: PUSH
42488: LD_INT 2
42490: MINUS
42491: LESS
42492: OR
42493: PUSH
42494: LD_VAR 0 8
42498: PUSH
42499: LD_INT 3
42501: ARRAY
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: LD_INT 8
42508: PUSH
42509: LD_INT 9
42511: PUSH
42512: LD_INT 10
42514: PUSH
42515: LD_INT 11
42517: PUSH
42518: LD_INT 12
42520: PUSH
42521: LD_INT 13
42523: PUSH
42524: LD_INT 16
42526: PUSH
42527: LD_INT 17
42529: PUSH
42530: LD_INT 18
42532: PUSH
42533: LD_INT 19
42535: PUSH
42536: LD_INT 20
42538: PUSH
42539: LD_INT 21
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: IN
42557: NOT
42558: OR
42559: PUSH
42560: LD_VAR 0 8
42564: PUSH
42565: LD_INT 5
42567: ARRAY
42568: NOT
42569: OR
42570: PUSH
42571: LD_VAR 0 8
42575: PUSH
42576: LD_INT 6
42578: ARRAY
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: LD_INT 2
42585: PUSH
42586: LD_INT 7
42588: PUSH
42589: LD_INT 9
42591: PUSH
42592: LD_INT 10
42594: PUSH
42595: LD_INT 11
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: IN
42606: NOT
42607: OR
42608: IFFALSE 42614
// exit ;
42610: POP
42611: POP
42612: GO 42697
// end ;
42614: GO 42285
42616: POP
42617: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42618: LD_VAR 0 9
42622: PPUSH
42623: LD_VAR 0 3
42627: PPUSH
42628: LD_VAR 0 4
42632: PPUSH
42633: LD_INT 20
42635: PPUSH
42636: CALL 34649 0 4
42640: PUSH
42641: LD_INT 4
42643: ARRAY
42644: IFFALSE 42648
// exit ;
42646: GO 42697
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42648: LD_VAR 0 2
42652: PUSH
42653: LD_INT 29
42655: PUSH
42656: LD_INT 30
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: IN
42663: PUSH
42664: LD_VAR 0 3
42668: PPUSH
42669: LD_VAR 0 4
42673: PPUSH
42674: LD_VAR 0 9
42678: PPUSH
42679: CALL_OW 440
42683: NOT
42684: AND
42685: IFFALSE 42689
// exit ;
42687: GO 42697
// result := true ;
42689: LD_ADDR_VAR 0 6
42693: PUSH
42694: LD_INT 1
42696: ST_TO_ADDR
// end ;
42697: LD_VAR 0 6
42701: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42702: LD_INT 0
42704: PPUSH
42705: PPUSH
42706: PPUSH
42707: PPUSH
42708: PPUSH
42709: PPUSH
42710: PPUSH
42711: PPUSH
42712: PPUSH
42713: PPUSH
42714: PPUSH
42715: PPUSH
42716: PPUSH
42717: PPUSH
42718: PPUSH
42719: PPUSH
42720: PPUSH
42721: PPUSH
42722: PPUSH
42723: PPUSH
42724: PPUSH
42725: PPUSH
42726: PPUSH
42727: PPUSH
42728: PPUSH
42729: PPUSH
42730: PPUSH
42731: PPUSH
42732: PPUSH
42733: PPUSH
42734: PPUSH
42735: PPUSH
42736: PPUSH
42737: PPUSH
42738: PPUSH
42739: PPUSH
42740: PPUSH
42741: PPUSH
42742: PPUSH
42743: PPUSH
42744: PPUSH
42745: PPUSH
42746: PPUSH
42747: PPUSH
42748: PPUSH
42749: PPUSH
42750: PPUSH
42751: PPUSH
42752: PPUSH
42753: PPUSH
42754: PPUSH
42755: PPUSH
42756: PPUSH
42757: PPUSH
42758: PPUSH
42759: PPUSH
42760: PPUSH
42761: PPUSH
// result = [ ] ;
42762: LD_ADDR_VAR 0 7
42766: PUSH
42767: EMPTY
42768: ST_TO_ADDR
// temp_list = [ ] ;
42769: LD_ADDR_VAR 0 9
42773: PUSH
42774: EMPTY
42775: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42776: LD_VAR 0 4
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: LD_INT 1
42786: PUSH
42787: LD_INT 2
42789: PUSH
42790: LD_INT 3
42792: PUSH
42793: LD_INT 4
42795: PUSH
42796: LD_INT 5
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: IN
42807: NOT
42808: PUSH
42809: LD_VAR 0 1
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: IN
42824: PUSH
42825: LD_VAR 0 5
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: LD_INT 3
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: LIST
42843: IN
42844: NOT
42845: AND
42846: OR
42847: IFFALSE 42851
// exit ;
42849: GO 61242
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42851: LD_VAR 0 1
42855: PUSH
42856: LD_INT 6
42858: PUSH
42859: LD_INT 7
42861: PUSH
42862: LD_INT 8
42864: PUSH
42865: LD_INT 13
42867: PUSH
42868: LD_INT 12
42870: PUSH
42871: LD_INT 15
42873: PUSH
42874: LD_INT 11
42876: PUSH
42877: LD_INT 14
42879: PUSH
42880: LD_INT 10
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: IN
42894: IFFALSE 42904
// btype = b_lab ;
42896: LD_ADDR_VAR 0 1
42900: PUSH
42901: LD_INT 6
42903: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42904: LD_VAR 0 6
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: LIST
42922: IN
42923: NOT
42924: PUSH
42925: LD_VAR 0 1
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: LD_INT 2
42938: PUSH
42939: LD_INT 3
42941: PUSH
42942: LD_INT 6
42944: PUSH
42945: LD_INT 36
42947: PUSH
42948: LD_INT 4
42950: PUSH
42951: LD_INT 5
42953: PUSH
42954: LD_INT 31
42956: PUSH
42957: LD_INT 32
42959: PUSH
42960: LD_INT 33
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: IN
42976: NOT
42977: PUSH
42978: LD_VAR 0 6
42982: PUSH
42983: LD_INT 1
42985: EQUAL
42986: AND
42987: OR
42988: PUSH
42989: LD_VAR 0 1
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: LD_INT 3
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: IN
43004: NOT
43005: PUSH
43006: LD_VAR 0 6
43010: PUSH
43011: LD_INT 2
43013: EQUAL
43014: AND
43015: OR
43016: IFFALSE 43026
// mode = 0 ;
43018: LD_ADDR_VAR 0 6
43022: PUSH
43023: LD_INT 0
43025: ST_TO_ADDR
// case mode of 0 :
43026: LD_VAR 0 6
43030: PUSH
43031: LD_INT 0
43033: DOUBLE
43034: EQUAL
43035: IFTRUE 43039
43037: GO 54492
43039: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43040: LD_ADDR_VAR 0 11
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: NEG
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 1
43109: NEG
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: LD_INT 2
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: LD_INT 2
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: LD_INT 2
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: LD_INT 2
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 1
43186: PUSH
43187: LD_INT 3
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: LD_INT 3
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: PUSH
43208: LD_INT 2
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43233: LD_ADDR_VAR 0 12
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: LD_INT 0
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: LD_INT 1
43253: NEG
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 1
43314: PUSH
43315: LD_INT 1
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 2
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 2
43356: NEG
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 2
43367: NEG
43368: PUSH
43369: LD_INT 1
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: LD_INT 1
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 3
43390: NEG
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 3
43401: NEG
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43429: LD_ADDR_VAR 0 13
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: LD_INT 1
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: LD_INT 2
43514: NEG
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 2
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 2
43552: NEG
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 2
43564: NEG
43565: PUSH
43566: LD_INT 2
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: LD_INT 3
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 3
43588: NEG
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 3
43600: NEG
43601: PUSH
43602: LD_INT 3
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43628: LD_ADDR_VAR 0 14
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: LD_INT 0
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 1
43686: NEG
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: LD_INT 2
43713: NEG
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 0
43721: PUSH
43722: LD_INT 2
43724: NEG
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: LD_INT 2
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: LD_INT 3
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 3
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: LD_INT 2
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43824: LD_ADDR_VAR 0 15
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 0
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 2
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 2
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 2
43958: NEG
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 2
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 3
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 3
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44017: LD_ADDR_VAR 0 16
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: LD_INT 2
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: LD_INT 2
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: LD_INT 2
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: NEG
44153: PUSH
44154: LD_INT 2
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 3
44164: PUSH
44165: LD_INT 2
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 3
44174: PUSH
44175: LD_INT 3
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: LD_INT 3
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44210: LD_ADDR_VAR 0 17
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 2
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: LD_INT 2
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 2
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 2
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: LD_INT 2
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 2
44386: NEG
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: NEG
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: NEG
44410: PUSH
44411: LD_INT 2
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44440: LD_ADDR_VAR 0 18
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: LD_INT 2
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: LD_INT 2
44536: NEG
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 1
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: LD_INT 2
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 2
44639: NEG
44640: PUSH
44641: LD_INT 2
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44670: LD_ADDR_VAR 0 19
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 1
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: LD_INT 2
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: LD_INT 2
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 2
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 2
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 2
44805: PUSH
44806: LD_INT 2
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: LD_INT 2
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: LD_INT 2
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: NEG
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 2
44846: NEG
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 2
44857: NEG
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 2
44869: NEG
44870: PUSH
44871: LD_INT 2
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44900: LD_ADDR_VAR 0 20
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: LD_INT 2
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 2
45035: PUSH
45036: LD_INT 2
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: LD_INT 2
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: LD_INT 2
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: LD_INT 1
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 2
45076: NEG
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 2
45087: NEG
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 2
45099: NEG
45100: PUSH
45101: LD_INT 2
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45130: LD_ADDR_VAR 0 21
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 1
45188: NEG
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: LD_INT 2
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 2
45306: NEG
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 2
45317: NEG
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 2
45329: NEG
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45360: LD_ADDR_VAR 0 22
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 2
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: LD_INT 2
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 2
45536: NEG
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 2
45547: NEG
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 2
45559: NEG
45560: PUSH
45561: LD_INT 2
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45590: LD_ADDR_VAR 0 23
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 2
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: LD_INT 2
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: LD_INT 2
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: LD_INT 2
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 2
45766: NEG
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 2
45777: NEG
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 2
45789: NEG
45790: PUSH
45791: LD_INT 2
45793: NEG
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: LD_INT 3
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: LD_INT 3
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: LD_INT 2
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 2
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45870: LD_ADDR_VAR 0 24
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: LD_INT 2
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: LD_INT 2
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 2
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 3
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 3
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46146: LD_ADDR_VAR 0 25
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: LD_INT 2
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: LD_INT 2
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 2
46333: NEG
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 2
46345: NEG
46346: PUSH
46347: LD_INT 2
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 3
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 3
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: LD_INT 3
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: LD_INT 3
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46420: LD_ADDR_VAR 0 26
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: NEG
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: LD_INT 3
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: LD_INT 3
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 2
46662: NEG
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46696: LD_ADDR_VAR 0 27
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: LD_INT 2
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: LD_INT 2
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 2
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: NEG
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: NEG
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: NEG
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: NEG
46908: PUSH
46909: LD_INT 2
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 2
46918: NEG
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 3
46929: NEG
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 3
46941: NEG
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46976: LD_ADDR_VAR 0 28
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: LD_INT 2
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 2
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 2
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 2
47152: NEG
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 2
47163: NEG
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: LD_INT 2
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: LD_INT 3
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: LD_INT 3
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 3
47211: NEG
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 3
47223: NEG
47224: PUSH
47225: LD_INT 2
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47258: LD_ADDR_VAR 0 29
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: LD_INT 2
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: LD_INT 2
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 2
47436: NEG
47437: PUSH
47438: LD_INT 2
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 2
47448: NEG
47449: PUSH
47450: LD_INT 3
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 3
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: LD_INT 3
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: LD_INT 2
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 3
47502: NEG
47503: PUSH
47504: LD_INT 2
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47537: LD_ADDR_VAR 0 30
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: LD_INT 2
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: LD_INT 2
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 2
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 2
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 2
47703: NEG
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 2
47714: NEG
47715: PUSH
47716: LD_INT 1
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: LD_INT 3
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 3
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 2
47759: PUSH
47760: LD_INT 3
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 2
47769: NEG
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 3
47780: NEG
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47815: LD_ADDR_VAR 0 31
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: LD_INT 2
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: LD_INT 2
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: LD_INT 2
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 2
48004: NEG
48005: PUSH
48006: LD_INT 3
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 2
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 3
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: LD_INT 3
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: LD_INT 2
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 3
48058: NEG
48059: PUSH
48060: LD_INT 2
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48093: LD_ADDR_VAR 0 32
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: LD_INT 2
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 2
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 2
48218: PUSH
48219: LD_INT 2
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: LD_INT 2
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: LD_INT 2
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 2
48259: NEG
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: LD_INT 3
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: LD_INT 2
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 3
48305: PUSH
48306: LD_INT 2
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 2
48315: PUSH
48316: LD_INT 3
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 2
48325: NEG
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 3
48336: NEG
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48371: LD_ADDR_VAR 0 33
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: LD_INT 2
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 2
48526: NEG
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: LD_INT 2
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 2
48561: NEG
48562: PUSH
48563: LD_INT 3
48565: NEG
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 2
48573: PUSH
48574: LD_INT 1
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 3
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: LD_INT 3
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 3
48615: NEG
48616: PUSH
48617: LD_INT 2
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48650: LD_ADDR_VAR 0 34
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: LD_INT 2
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 2
48775: PUSH
48776: LD_INT 2
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 2
48817: NEG
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 2
48829: NEG
48830: PUSH
48831: LD_INT 2
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: LD_INT 3
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: LD_INT 2
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 3
48864: PUSH
48865: LD_INT 2
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: LD_INT 3
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 2
48884: NEG
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 3
48895: NEG
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48930: LD_ADDR_VAR 0 35
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: LD_INT 1
49003: NEG
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 2
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49042: LD_ADDR_VAR 0 36
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: NEG
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: LD_INT 2
49127: NEG
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: LD_INT 2
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49154: LD_ADDR_VAR 0 37
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49266: LD_ADDR_VAR 0 38
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 2
49357: NEG
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49378: LD_ADDR_VAR 0 39
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: LD_INT 2
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49490: LD_ADDR_VAR 0 40
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49602: LD_ADDR_VAR 0 41
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: NEG
49684: PUSH
49685: LD_INT 2
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 2
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: LD_INT 2
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: LD_INT 2
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 2
49757: NEG
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: NEG
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: LD_INT 2
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: LD_INT 3
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 3
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 3
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 3
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 3
49845: PUSH
49846: LD_INT 3
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: LD_INT 3
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 2
49865: NEG
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 3
49876: NEG
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 3
49887: NEG
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 3
49899: NEG
49900: PUSH
49901: LD_INT 2
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 3
49911: NEG
49912: PUSH
49913: LD_INT 3
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49952: LD_ADDR_VAR 0 42
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 2
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: LD_INT 3
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: LD_INT 3
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: LD_INT 3
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: LD_INT 2
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 3
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 3
50198: PUSH
50199: LD_INT 3
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: LD_INT 3
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: LD_INT 3
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 3
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 2
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 3
50249: NEG
50250: PUSH
50251: LD_INT 2
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 3
50261: NEG
50262: PUSH
50263: LD_INT 3
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50302: LD_ADDR_VAR 0 43
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: LD_INT 2
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: LD_INT 2
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: LD_INT 2
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 2
50479: NEG
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: LD_INT 3
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: LD_INT 3
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: LD_INT 2
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 3
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 3
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: LD_INT 3
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 3
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: LD_INT 2
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 3
50598: NEG
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 3
50609: NEG
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50650: LD_ADDR_VAR 0 44
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: NEG
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 2
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 2
50774: PUSH
50775: LD_INT 2
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: LD_INT 2
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 2
50805: NEG
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 2
50816: NEG
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 2
50828: NEG
50829: PUSH
50830: LD_INT 2
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 2
50840: NEG
50841: PUSH
50842: LD_INT 3
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 3
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 3
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 3
50883: PUSH
50884: LD_INT 2
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 3
50893: PUSH
50894: LD_INT 3
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 2
50903: PUSH
50904: LD_INT 3
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 2
50913: NEG
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 3
50924: NEG
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 3
50935: NEG
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 3
50947: NEG
50948: PUSH
50949: LD_INT 2
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 3
50959: NEG
50960: PUSH
50961: LD_INT 3
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51000: LD_ADDR_VAR 0 45
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 1
51069: NEG
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: LD_INT 2
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 2
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 2
51125: PUSH
51126: LD_INT 2
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: LD_INT 2
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: LD_INT 2
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 2
51166: NEG
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 2
51178: NEG
51179: PUSH
51180: LD_INT 2
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 2
51190: NEG
51191: PUSH
51192: LD_INT 3
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: LD_INT 3
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 3
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: LD_INT 2
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 3
51236: PUSH
51237: LD_INT 2
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 3
51246: PUSH
51247: LD_INT 3
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: LD_INT 3
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: LD_INT 3
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: LD_INT 3
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 3
51297: NEG
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 3
51309: NEG
51310: PUSH
51311: LD_INT 3
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51350: LD_ADDR_VAR 0 46
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: LD_INT 2
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 2
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 2
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: LD_INT 2
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 2
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 1
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: NEG
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 2
51527: NEG
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: LD_INT 3
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: LD_INT 3
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 2
51573: PUSH
51574: LD_INT 1
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 3
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 3
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: LD_INT 3
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: LD_INT 3
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 3
51646: NEG
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 3
51657: NEG
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51698: LD_ADDR_VAR 0 47
51702: PUSH
51703: LD_INT 0
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: LD_INT 1
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: LD_INT 2
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: LD_INT 2
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51849: LD_ADDR_VAR 0 48
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: LD_INT 2
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: LD_INT 2
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 2
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51996: LD_ADDR_VAR 0 49
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 2
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52140: LD_ADDR_VAR 0 50
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: LD_INT 1
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 2
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 2
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: LD_INT 2
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52284: LD_ADDR_VAR 0 51
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: LD_INT 1
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: LD_INT 2
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 2
52407: NEG
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52431: LD_ADDR_VAR 0 52
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: NEG
52513: PUSH
52514: LD_INT 2
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 2
52535: NEG
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 2
52558: NEG
52559: PUSH
52560: LD_INT 2
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52582: LD_ADDR_VAR 0 53
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: LD_INT 2
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 2
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 2
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 2
52781: NEG
52782: PUSH
52783: LD_INT 2
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52812: LD_ADDR_VAR 0 54
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: LD_INT 2
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: LD_INT 2
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 2
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 2
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: LD_INT 2
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: LD_INT 2
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: NEG
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 2
52988: NEG
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: LD_INT 2
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53042: LD_ADDR_VAR 0 55
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 1
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: LD_INT 2
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: LD_INT 2
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 2
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 2
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 2
53177: PUSH
53178: LD_INT 2
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: LD_INT 2
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 2
53218: NEG
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 2
53229: NEG
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 2
53241: NEG
53242: PUSH
53243: LD_INT 2
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53272: LD_ADDR_VAR 0 56
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: LD_INT 2
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 2
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 2
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 2
53448: NEG
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 2
53459: NEG
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 2
53471: NEG
53472: PUSH
53473: LD_INT 2
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53502: LD_ADDR_VAR 0 57
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: LD_INT 2
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: LD_INT 2
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 2
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: LD_INT 2
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 2
53678: NEG
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: LD_INT 2
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53732: LD_ADDR_VAR 0 58
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: LD_INT 1
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: LD_INT 2
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: LD_INT 2
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 2
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 2
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 2
53867: PUSH
53868: LD_INT 2
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: LD_INT 2
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: LD_INT 2
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: NEG
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: LD_INT 2
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53962: LD_ADDR_VAR 0 59
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54050: LD_ADDR_VAR 0 60
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54138: LD_ADDR_VAR 0 61
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54226: LD_ADDR_VAR 0 62
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 1
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54314: LD_ADDR_VAR 0 63
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54402: LD_ADDR_VAR 0 64
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: ST_TO_ADDR
// end ; 1 :
54490: GO 60387
54492: LD_INT 1
54494: DOUBLE
54495: EQUAL
54496: IFTRUE 54500
54498: GO 57123
54500: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54501: LD_ADDR_VAR 0 11
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: LD_INT 3
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: LD_INT 3
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: LIST
54544: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54545: LD_ADDR_VAR 0 12
54549: PUSH
54550: LD_INT 2
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 3
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 3
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: LIST
54585: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54586: LD_ADDR_VAR 0 13
54590: PUSH
54591: LD_INT 3
54593: PUSH
54594: LD_INT 2
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 3
54603: PUSH
54604: LD_INT 3
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 2
54613: PUSH
54614: LD_INT 3
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: LIST
54625: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54626: LD_ADDR_VAR 0 14
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: LD_INT 3
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: LD_INT 3
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: LD_INT 2
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: LIST
54666: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54667: LD_ADDR_VAR 0 15
54671: PUSH
54672: LD_INT 2
54674: NEG
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 3
54685: NEG
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 3
54696: NEG
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: LIST
54710: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54711: LD_ADDR_VAR 0 16
54715: PUSH
54716: LD_INT 2
54718: NEG
54719: PUSH
54720: LD_INT 3
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 3
54730: NEG
54731: PUSH
54732: LD_INT 2
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 3
54742: NEG
54743: PUSH
54744: LD_INT 3
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: LIST
54756: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54757: LD_ADDR_VAR 0 17
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: LD_INT 3
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: LD_INT 3
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: LIST
54800: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54801: LD_ADDR_VAR 0 18
54805: PUSH
54806: LD_INT 2
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 3
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 3
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: LIST
54841: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54842: LD_ADDR_VAR 0 19
54846: PUSH
54847: LD_INT 3
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 3
54859: PUSH
54860: LD_INT 3
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 2
54869: PUSH
54870: LD_INT 3
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: LIST
54881: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54882: LD_ADDR_VAR 0 20
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: LD_INT 3
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 3
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: LIST
54922: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54923: LD_ADDR_VAR 0 21
54927: PUSH
54928: LD_INT 2
54930: NEG
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 3
54941: NEG
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 3
54952: NEG
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: LIST
54966: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54967: LD_ADDR_VAR 0 22
54971: PUSH
54972: LD_INT 2
54974: NEG
54975: PUSH
54976: LD_INT 3
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 3
54986: NEG
54987: PUSH
54988: LD_INT 2
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 3
54998: NEG
54999: PUSH
55000: LD_INT 3
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: LIST
55012: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55013: LD_ADDR_VAR 0 23
55017: PUSH
55018: LD_INT 0
55020: PUSH
55021: LD_INT 3
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: LD_INT 4
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: LD_INT 3
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: LIST
55056: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55057: LD_ADDR_VAR 0 24
55061: PUSH
55062: LD_INT 3
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 3
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 4
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: LIST
55097: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55098: LD_ADDR_VAR 0 25
55102: PUSH
55103: LD_INT 3
55105: PUSH
55106: LD_INT 3
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 4
55115: PUSH
55116: LD_INT 3
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 3
55125: PUSH
55126: LD_INT 4
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: LIST
55137: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55138: LD_ADDR_VAR 0 26
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: LD_INT 3
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: LD_INT 4
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: LD_INT 3
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: LIST
55178: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55179: LD_ADDR_VAR 0 27
55183: PUSH
55184: LD_INT 3
55186: NEG
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 3
55197: NEG
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 4
55208: NEG
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: LIST
55222: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55223: LD_ADDR_VAR 0 28
55227: PUSH
55228: LD_INT 3
55230: NEG
55231: PUSH
55232: LD_INT 3
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 3
55242: NEG
55243: PUSH
55244: LD_INT 4
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 4
55254: NEG
55255: PUSH
55256: LD_INT 3
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: LIST
55268: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55269: LD_ADDR_VAR 0 29
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: LD_INT 3
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: LD_INT 3
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: LD_INT 2
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: LD_INT 4
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 4
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: LD_INT 3
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: LD_INT 5
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: LD_INT 5
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: LD_INT 4
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: LD_INT 6
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 6
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 5
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55424: LD_ADDR_VAR 0 30
55428: PUSH
55429: LD_INT 2
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 3
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 3
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 3
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 4
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 4
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 4
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 5
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 5
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 5
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 6
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 6
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55567: LD_ADDR_VAR 0 31
55571: PUSH
55572: LD_INT 3
55574: PUSH
55575: LD_INT 2
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 3
55584: PUSH
55585: LD_INT 3
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: LD_INT 3
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 4
55604: PUSH
55605: LD_INT 3
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 4
55614: PUSH
55615: LD_INT 4
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 3
55624: PUSH
55625: LD_INT 4
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 5
55634: PUSH
55635: LD_INT 4
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 5
55644: PUSH
55645: LD_INT 5
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 4
55654: PUSH
55655: LD_INT 5
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 6
55664: PUSH
55665: LD_INT 5
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 6
55674: PUSH
55675: LD_INT 6
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 5
55684: PUSH
55685: LD_INT 6
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55706: LD_ADDR_VAR 0 32
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: LD_INT 3
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: LD_INT 3
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: LD_INT 2
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: LD_INT 4
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: LD_INT 4
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: LD_INT 3
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: LD_INT 5
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: LD_INT 5
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: LD_INT 4
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 1
55806: PUSH
55807: LD_INT 6
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: LD_INT 6
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: LD_INT 5
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55849: LD_ADDR_VAR 0 33
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 3
55867: NEG
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 3
55878: NEG
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 3
55890: NEG
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 4
55901: NEG
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 4
55912: NEG
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 4
55924: NEG
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 5
55935: NEG
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 5
55946: NEG
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 5
55958: NEG
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 6
55969: NEG
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 6
55980: NEG
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56004: LD_ADDR_VAR 0 34
56008: PUSH
56009: LD_INT 2
56011: NEG
56012: PUSH
56013: LD_INT 3
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 3
56023: NEG
56024: PUSH
56025: LD_INT 2
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 3
56035: NEG
56036: PUSH
56037: LD_INT 3
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 3
56047: NEG
56048: PUSH
56049: LD_INT 4
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 4
56059: NEG
56060: PUSH
56061: LD_INT 3
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 4
56071: NEG
56072: PUSH
56073: LD_INT 4
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 4
56083: NEG
56084: PUSH
56085: LD_INT 5
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 5
56095: NEG
56096: PUSH
56097: LD_INT 4
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 5
56107: NEG
56108: PUSH
56109: LD_INT 5
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 5
56119: NEG
56120: PUSH
56121: LD_INT 6
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 6
56131: NEG
56132: PUSH
56133: LD_INT 5
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 6
56143: NEG
56144: PUSH
56145: LD_INT 6
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56167: LD_ADDR_VAR 0 41
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: LD_INT 3
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: LD_INT 2
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: LIST
56210: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56211: LD_ADDR_VAR 0 42
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 3
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: LIST
56251: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56252: LD_ADDR_VAR 0 43
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: LD_INT 2
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 3
56269: PUSH
56270: LD_INT 2
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 2
56279: PUSH
56280: LD_INT 3
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: LIST
56291: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56292: LD_ADDR_VAR 0 44
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: LD_INT 2
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: LD_INT 3
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: LD_INT 2
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: LIST
56332: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56333: LD_ADDR_VAR 0 45
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 3
56362: NEG
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: LIST
56376: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56377: LD_ADDR_VAR 0 46
56381: PUSH
56382: LD_INT 2
56384: NEG
56385: PUSH
56386: LD_INT 2
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 2
56396: NEG
56397: PUSH
56398: LD_INT 3
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 3
56408: NEG
56409: PUSH
56410: LD_INT 2
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: LIST
56422: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56423: LD_ADDR_VAR 0 47
56427: PUSH
56428: LD_INT 2
56430: NEG
56431: PUSH
56432: LD_INT 3
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: LD_INT 3
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56456: LD_ADDR_VAR 0 48
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: LD_INT 2
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 2
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56487: LD_ADDR_VAR 0 49
56491: PUSH
56492: LD_INT 3
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 3
56504: PUSH
56505: LD_INT 2
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56516: LD_ADDR_VAR 0 50
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: LD_INT 3
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: LD_INT 3
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56545: LD_ADDR_VAR 0 51
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: LD_INT 2
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: NEG
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56576: LD_ADDR_VAR 0 52
56580: PUSH
56581: LD_INT 3
56583: NEG
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 3
56595: NEG
56596: PUSH
56597: LD_INT 2
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56609: LD_ADDR_VAR 0 53
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: LD_INT 3
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: LD_INT 3
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: LD_INT 2
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: LIST
56652: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56653: LD_ADDR_VAR 0 54
56657: PUSH
56658: LD_INT 2
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 3
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 3
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: LIST
56693: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56694: LD_ADDR_VAR 0 55
56698: PUSH
56699: LD_INT 3
56701: PUSH
56702: LD_INT 2
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 3
56711: PUSH
56712: LD_INT 3
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: LD_INT 3
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: LIST
56733: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56734: LD_ADDR_VAR 0 56
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: LD_INT 3
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 3
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: LD_INT 2
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: LIST
56774: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56775: LD_ADDR_VAR 0 57
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 3
56793: NEG
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 3
56804: NEG
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: LIST
56818: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56819: LD_ADDR_VAR 0 58
56823: PUSH
56824: LD_INT 2
56826: NEG
56827: PUSH
56828: LD_INT 3
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 3
56838: NEG
56839: PUSH
56840: LD_INT 2
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 3
56850: NEG
56851: PUSH
56852: LD_INT 3
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: LIST
56864: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56865: LD_ADDR_VAR 0 59
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 2
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: LD_INT 2
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: LIST
56908: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56909: LD_ADDR_VAR 0 60
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 2
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 2
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: LIST
56949: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56950: LD_ADDR_VAR 0 61
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: LIST
56989: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56990: LD_ADDR_VAR 0 62
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: LD_INT 2
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 2
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: LIST
57030: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57031: LD_ADDR_VAR 0 63
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: NEG
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 2
57060: NEG
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: LIST
57074: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57075: LD_ADDR_VAR 0 64
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: LD_INT 2
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 2
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 2
57106: NEG
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: LIST
57120: ST_TO_ADDR
// end ; 2 :
57121: GO 60387
57123: LD_INT 2
57125: DOUBLE
57126: EQUAL
57127: IFTRUE 57131
57129: GO 60386
57131: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57132: LD_ADDR_VAR 0 29
57136: PUSH
57137: LD_INT 4
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 4
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 5
57160: PUSH
57161: LD_INT 0
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 5
57170: PUSH
57171: LD_INT 1
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 4
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 3
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 3
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 3
57211: PUSH
57212: LD_INT 2
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 5
57222: PUSH
57223: LD_INT 2
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 3
57232: PUSH
57233: LD_INT 3
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 3
57242: PUSH
57243: LD_INT 2
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 4
57252: PUSH
57253: LD_INT 3
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 4
57262: PUSH
57263: LD_INT 4
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 3
57272: PUSH
57273: LD_INT 4
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 2
57282: PUSH
57283: LD_INT 3
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 4
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 2
57312: PUSH
57313: LD_INT 4
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: LD_INT 4
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 3
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: LD_INT 4
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: LD_INT 5
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: LD_INT 5
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: LD_INT 4
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: LD_INT 3
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: LD_INT 5
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: LD_INT 3
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 3
57415: NEG
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 3
57426: NEG
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 2
57438: NEG
57439: PUSH
57440: LD_INT 0
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 2
57449: NEG
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 3
57460: NEG
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 4
57471: NEG
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 4
57482: NEG
57483: PUSH
57484: LD_INT 1
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 4
57494: NEG
57495: PUSH
57496: LD_INT 2
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 2
57506: NEG
57507: PUSH
57508: LD_INT 2
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 4
57517: NEG
57518: PUSH
57519: LD_INT 4
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 4
57529: NEG
57530: PUSH
57531: LD_INT 5
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 3
57541: NEG
57542: PUSH
57543: LD_INT 4
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 3
57553: NEG
57554: PUSH
57555: LD_INT 3
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 4
57565: NEG
57566: PUSH
57567: LD_INT 3
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 5
57577: NEG
57578: PUSH
57579: LD_INT 4
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 5
57589: NEG
57590: PUSH
57591: LD_INT 5
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 3
57601: NEG
57602: PUSH
57603: LD_INT 5
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 5
57613: NEG
57614: PUSH
57615: LD_INT 3
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57670: LD_ADDR_VAR 0 30
57674: PUSH
57675: LD_INT 4
57677: PUSH
57678: LD_INT 4
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 4
57687: PUSH
57688: LD_INT 3
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 5
57697: PUSH
57698: LD_INT 4
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 5
57707: PUSH
57708: LD_INT 5
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 4
57717: PUSH
57718: LD_INT 5
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 3
57727: PUSH
57728: LD_INT 4
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 3
57737: PUSH
57738: LD_INT 3
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 5
57747: PUSH
57748: LD_INT 3
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 3
57757: PUSH
57758: LD_INT 5
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: LD_INT 3
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: LD_INT 2
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 3
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: LD_INT 4
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: LD_INT 4
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: NEG
57818: PUSH
57819: LD_INT 3
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: LD_INT 2
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 2
57839: PUSH
57840: LD_INT 4
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 2
57849: NEG
57850: PUSH
57851: LD_INT 2
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 4
57860: NEG
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 4
57871: NEG
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 3
57883: NEG
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 3
57894: NEG
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 4
57905: NEG
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 5
57916: NEG
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 5
57927: NEG
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 5
57939: NEG
57940: PUSH
57941: LD_INT 2
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 3
57951: NEG
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 3
57962: NEG
57963: PUSH
57964: LD_INT 3
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 3
57974: NEG
57975: PUSH
57976: LD_INT 4
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: NEG
57987: PUSH
57988: LD_INT 3
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 2
57998: NEG
57999: PUSH
58000: LD_INT 2
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 3
58010: NEG
58011: PUSH
58012: LD_INT 2
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 4
58022: NEG
58023: PUSH
58024: LD_INT 3
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 4
58034: NEG
58035: PUSH
58036: LD_INT 4
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: NEG
58047: PUSH
58048: LD_INT 4
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 4
58058: NEG
58059: PUSH
58060: LD_INT 2
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: LD_INT 4
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 5
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: LD_INT 4
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: LD_INT 3
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: LD_INT 3
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: LD_INT 4
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: LD_INT 5
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: LD_INT 3
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 2
58160: NEG
58161: PUSH
58162: LD_INT 5
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58217: LD_ADDR_VAR 0 31
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: LD_INT 4
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: LD_INT 3
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: LD_INT 4
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: LD_INT 5
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: LD_INT 5
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: LD_INT 4
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 1
58285: NEG
58286: PUSH
58287: LD_INT 3
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: PUSH
58297: LD_INT 5
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 2
58306: NEG
58307: PUSH
58308: LD_INT 3
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 3
58317: NEG
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 3
58328: NEG
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 2
58340: NEG
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 2
58351: NEG
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 3
58362: NEG
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 4
58373: NEG
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 4
58384: NEG
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 4
58396: NEG
58397: PUSH
58398: LD_INT 2
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 2
58408: NEG
58409: PUSH
58410: LD_INT 2
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 4
58419: NEG
58420: PUSH
58421: LD_INT 4
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 4
58431: NEG
58432: PUSH
58433: LD_INT 5
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 3
58443: NEG
58444: PUSH
58445: LD_INT 4
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 3
58455: NEG
58456: PUSH
58457: LD_INT 3
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 4
58467: NEG
58468: PUSH
58469: LD_INT 3
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 5
58479: NEG
58480: PUSH
58481: LD_INT 4
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 5
58491: NEG
58492: PUSH
58493: LD_INT 5
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 3
58503: NEG
58504: PUSH
58505: LD_INT 5
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 5
58515: NEG
58516: PUSH
58517: LD_INT 3
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: LD_INT 3
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: LD_INT 4
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: LD_INT 3
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: LD_INT 2
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_INT 2
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: LD_INT 3
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: NEG
58595: PUSH
58596: LD_INT 4
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: LD_INT 2
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 2
58617: NEG
58618: PUSH
58619: LD_INT 4
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 4
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 4
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 5
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 5
58660: PUSH
58661: LD_INT 1
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 4
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 3
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 3
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 3
58701: PUSH
58702: LD_INT 2
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 5
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58767: LD_ADDR_VAR 0 32
58771: PUSH
58772: LD_INT 4
58774: NEG
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 4
58785: NEG
58786: PUSH
58787: LD_INT 1
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 3
58797: NEG
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 3
58808: NEG
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 4
58819: NEG
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 5
58830: NEG
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 5
58841: NEG
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 5
58853: NEG
58854: PUSH
58855: LD_INT 2
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 3
58865: NEG
58866: PUSH
58867: LD_INT 2
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 3
58876: NEG
58877: PUSH
58878: LD_INT 3
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 3
58888: NEG
58889: PUSH
58890: LD_INT 4
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 2
58900: NEG
58901: PUSH
58902: LD_INT 3
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 2
58912: NEG
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 3
58924: NEG
58925: PUSH
58926: LD_INT 2
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 4
58936: NEG
58937: PUSH
58938: LD_INT 3
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 4
58948: NEG
58949: PUSH
58950: LD_INT 4
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 2
58960: NEG
58961: PUSH
58962: LD_INT 4
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 4
58972: NEG
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: LD_INT 4
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: LD_INT 5
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: LD_INT 4
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: LD_INT 3
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: LD_INT 3
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 1
59039: NEG
59040: PUSH
59041: LD_INT 4
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 1
59051: NEG
59052: PUSH
59053: LD_INT 5
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: LD_INT 3
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: LD_INT 5
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 3
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 3
59096: PUSH
59097: LD_INT 1
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 4
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 4
59117: PUSH
59118: LD_INT 1
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 3
59127: PUSH
59128: LD_INT 1
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 2
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 2
59147: PUSH
59148: LD_INT 1
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 2
59158: PUSH
59159: LD_INT 2
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 4
59169: PUSH
59170: LD_INT 2
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 4
59179: PUSH
59180: LD_INT 4
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 4
59189: PUSH
59190: LD_INT 3
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 5
59199: PUSH
59200: LD_INT 4
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 5
59209: PUSH
59210: LD_INT 5
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 4
59219: PUSH
59220: LD_INT 5
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 3
59229: PUSH
59230: LD_INT 4
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 3
59239: PUSH
59240: LD_INT 3
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 5
59249: PUSH
59250: LD_INT 3
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 3
59259: PUSH
59260: LD_INT 5
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59314: LD_ADDR_VAR 0 33
59318: PUSH
59319: LD_INT 4
59321: NEG
59322: PUSH
59323: LD_INT 4
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 4
59333: NEG
59334: PUSH
59335: LD_INT 5
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 3
59345: NEG
59346: PUSH
59347: LD_INT 4
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 3
59357: NEG
59358: PUSH
59359: LD_INT 3
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 4
59369: NEG
59370: PUSH
59371: LD_INT 3
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 5
59381: NEG
59382: PUSH
59383: LD_INT 4
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 5
59393: NEG
59394: PUSH
59395: LD_INT 5
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 3
59405: NEG
59406: PUSH
59407: LD_INT 5
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 5
59417: NEG
59418: PUSH
59419: LD_INT 3
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 0
59429: PUSH
59430: LD_INT 3
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: LD_INT 4
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: LD_INT 3
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: LD_INT 2
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: LD_INT 2
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: LD_INT 3
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 4
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 2
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 2
59519: NEG
59520: PUSH
59521: LD_INT 4
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 4
59531: PUSH
59532: LD_INT 0
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 4
59541: PUSH
59542: LD_INT 1
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 5
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 5
59562: PUSH
59563: LD_INT 1
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 4
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 3
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 3
59592: PUSH
59593: LD_INT 1
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 3
59603: PUSH
59604: LD_INT 2
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 5
59614: PUSH
59615: LD_INT 2
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 3
59624: PUSH
59625: LD_INT 3
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 3
59634: PUSH
59635: LD_INT 2
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 4
59644: PUSH
59645: LD_INT 3
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 4
59654: PUSH
59655: LD_INT 4
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 3
59664: PUSH
59665: LD_INT 4
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 2
59674: PUSH
59675: LD_INT 3
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 2
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 4
59694: PUSH
59695: LD_INT 2
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 2
59704: PUSH
59705: LD_INT 4
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: LD_INT 4
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: LD_INT 3
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: LD_INT 4
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 1
59744: PUSH
59745: LD_INT 5
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: LD_INT 5
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 1
59764: NEG
59765: PUSH
59766: LD_INT 4
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: LD_INT 3
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: LD_INT 5
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 2
59796: NEG
59797: PUSH
59798: LD_INT 3
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59852: LD_ADDR_VAR 0 34
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: LD_INT 4
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: LD_INT 5
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: LD_INT 4
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: LD_INT 3
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: LD_INT 3
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: LD_INT 4
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: LD_INT 5
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: PUSH
59939: LD_INT 3
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 2
59949: NEG
59950: PUSH
59951: LD_INT 5
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 3
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 3
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 4
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 4
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 3
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 2
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: LD_INT 2
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 4
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 4
60054: PUSH
60055: LD_INT 4
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 4
60064: PUSH
60065: LD_INT 3
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 5
60074: PUSH
60075: LD_INT 4
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 5
60084: PUSH
60085: LD_INT 5
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 4
60094: PUSH
60095: LD_INT 5
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 3
60104: PUSH
60105: LD_INT 4
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 3
60114: PUSH
60115: LD_INT 3
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 5
60124: PUSH
60125: LD_INT 3
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 3
60134: PUSH
60135: LD_INT 5
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 0
60144: PUSH
60145: LD_INT 3
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: LD_INT 3
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: LD_INT 4
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: LD_INT 4
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: LD_INT 3
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: NEG
60206: PUSH
60207: LD_INT 2
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 2
60216: PUSH
60217: LD_INT 4
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 2
60226: NEG
60227: PUSH
60228: LD_INT 2
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 4
60237: NEG
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 4
60248: NEG
60249: PUSH
60250: LD_INT 1
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 3
60260: NEG
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 3
60271: NEG
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 4
60282: NEG
60283: PUSH
60284: LD_INT 1
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 5
60293: NEG
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 5
60304: NEG
60305: PUSH
60306: LD_INT 1
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 5
60316: NEG
60317: PUSH
60318: LD_INT 2
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 3
60328: NEG
60329: PUSH
60330: LD_INT 2
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: ST_TO_ADDR
// end ; end ;
60384: GO 60387
60386: POP
// case btype of b_depot , b_warehouse :
60387: LD_VAR 0 1
60391: PUSH
60392: LD_INT 0
60394: DOUBLE
60395: EQUAL
60396: IFTRUE 60406
60398: LD_INT 1
60400: DOUBLE
60401: EQUAL
60402: IFTRUE 60406
60404: GO 60607
60406: POP
// case nation of nation_american :
60407: LD_VAR 0 5
60411: PUSH
60412: LD_INT 1
60414: DOUBLE
60415: EQUAL
60416: IFTRUE 60420
60418: GO 60476
60420: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60421: LD_ADDR_VAR 0 9
60425: PUSH
60426: LD_VAR 0 11
60430: PUSH
60431: LD_VAR 0 12
60435: PUSH
60436: LD_VAR 0 13
60440: PUSH
60441: LD_VAR 0 14
60445: PUSH
60446: LD_VAR 0 15
60450: PUSH
60451: LD_VAR 0 16
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: PUSH
60464: LD_VAR 0 4
60468: PUSH
60469: LD_INT 1
60471: PLUS
60472: ARRAY
60473: ST_TO_ADDR
60474: GO 60605
60476: LD_INT 2
60478: DOUBLE
60479: EQUAL
60480: IFTRUE 60484
60482: GO 60540
60484: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60485: LD_ADDR_VAR 0 9
60489: PUSH
60490: LD_VAR 0 17
60494: PUSH
60495: LD_VAR 0 18
60499: PUSH
60500: LD_VAR 0 19
60504: PUSH
60505: LD_VAR 0 20
60509: PUSH
60510: LD_VAR 0 21
60514: PUSH
60515: LD_VAR 0 22
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: PUSH
60528: LD_VAR 0 4
60532: PUSH
60533: LD_INT 1
60535: PLUS
60536: ARRAY
60537: ST_TO_ADDR
60538: GO 60605
60540: LD_INT 3
60542: DOUBLE
60543: EQUAL
60544: IFTRUE 60548
60546: GO 60604
60548: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60549: LD_ADDR_VAR 0 9
60553: PUSH
60554: LD_VAR 0 23
60558: PUSH
60559: LD_VAR 0 24
60563: PUSH
60564: LD_VAR 0 25
60568: PUSH
60569: LD_VAR 0 26
60573: PUSH
60574: LD_VAR 0 27
60578: PUSH
60579: LD_VAR 0 28
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: PUSH
60592: LD_VAR 0 4
60596: PUSH
60597: LD_INT 1
60599: PLUS
60600: ARRAY
60601: ST_TO_ADDR
60602: GO 60605
60604: POP
60605: GO 61160
60607: LD_INT 2
60609: DOUBLE
60610: EQUAL
60611: IFTRUE 60621
60613: LD_INT 3
60615: DOUBLE
60616: EQUAL
60617: IFTRUE 60621
60619: GO 60677
60621: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60622: LD_ADDR_VAR 0 9
60626: PUSH
60627: LD_VAR 0 29
60631: PUSH
60632: LD_VAR 0 30
60636: PUSH
60637: LD_VAR 0 31
60641: PUSH
60642: LD_VAR 0 32
60646: PUSH
60647: LD_VAR 0 33
60651: PUSH
60652: LD_VAR 0 34
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: PUSH
60665: LD_VAR 0 4
60669: PUSH
60670: LD_INT 1
60672: PLUS
60673: ARRAY
60674: ST_TO_ADDR
60675: GO 61160
60677: LD_INT 16
60679: DOUBLE
60680: EQUAL
60681: IFTRUE 60739
60683: LD_INT 17
60685: DOUBLE
60686: EQUAL
60687: IFTRUE 60739
60689: LD_INT 18
60691: DOUBLE
60692: EQUAL
60693: IFTRUE 60739
60695: LD_INT 19
60697: DOUBLE
60698: EQUAL
60699: IFTRUE 60739
60701: LD_INT 22
60703: DOUBLE
60704: EQUAL
60705: IFTRUE 60739
60707: LD_INT 20
60709: DOUBLE
60710: EQUAL
60711: IFTRUE 60739
60713: LD_INT 21
60715: DOUBLE
60716: EQUAL
60717: IFTRUE 60739
60719: LD_INT 23
60721: DOUBLE
60722: EQUAL
60723: IFTRUE 60739
60725: LD_INT 24
60727: DOUBLE
60728: EQUAL
60729: IFTRUE 60739
60731: LD_INT 25
60733: DOUBLE
60734: EQUAL
60735: IFTRUE 60739
60737: GO 60795
60739: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60740: LD_ADDR_VAR 0 9
60744: PUSH
60745: LD_VAR 0 35
60749: PUSH
60750: LD_VAR 0 36
60754: PUSH
60755: LD_VAR 0 37
60759: PUSH
60760: LD_VAR 0 38
60764: PUSH
60765: LD_VAR 0 39
60769: PUSH
60770: LD_VAR 0 40
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: PUSH
60783: LD_VAR 0 4
60787: PUSH
60788: LD_INT 1
60790: PLUS
60791: ARRAY
60792: ST_TO_ADDR
60793: GO 61160
60795: LD_INT 6
60797: DOUBLE
60798: EQUAL
60799: IFTRUE 60851
60801: LD_INT 7
60803: DOUBLE
60804: EQUAL
60805: IFTRUE 60851
60807: LD_INT 8
60809: DOUBLE
60810: EQUAL
60811: IFTRUE 60851
60813: LD_INT 13
60815: DOUBLE
60816: EQUAL
60817: IFTRUE 60851
60819: LD_INT 12
60821: DOUBLE
60822: EQUAL
60823: IFTRUE 60851
60825: LD_INT 15
60827: DOUBLE
60828: EQUAL
60829: IFTRUE 60851
60831: LD_INT 11
60833: DOUBLE
60834: EQUAL
60835: IFTRUE 60851
60837: LD_INT 14
60839: DOUBLE
60840: EQUAL
60841: IFTRUE 60851
60843: LD_INT 10
60845: DOUBLE
60846: EQUAL
60847: IFTRUE 60851
60849: GO 60907
60851: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60852: LD_ADDR_VAR 0 9
60856: PUSH
60857: LD_VAR 0 41
60861: PUSH
60862: LD_VAR 0 42
60866: PUSH
60867: LD_VAR 0 43
60871: PUSH
60872: LD_VAR 0 44
60876: PUSH
60877: LD_VAR 0 45
60881: PUSH
60882: LD_VAR 0 46
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: PUSH
60895: LD_VAR 0 4
60899: PUSH
60900: LD_INT 1
60902: PLUS
60903: ARRAY
60904: ST_TO_ADDR
60905: GO 61160
60907: LD_INT 36
60909: DOUBLE
60910: EQUAL
60911: IFTRUE 60915
60913: GO 60971
60915: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60916: LD_ADDR_VAR 0 9
60920: PUSH
60921: LD_VAR 0 47
60925: PUSH
60926: LD_VAR 0 48
60930: PUSH
60931: LD_VAR 0 49
60935: PUSH
60936: LD_VAR 0 50
60940: PUSH
60941: LD_VAR 0 51
60945: PUSH
60946: LD_VAR 0 52
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: PUSH
60959: LD_VAR 0 4
60963: PUSH
60964: LD_INT 1
60966: PLUS
60967: ARRAY
60968: ST_TO_ADDR
60969: GO 61160
60971: LD_INT 4
60973: DOUBLE
60974: EQUAL
60975: IFTRUE 60997
60977: LD_INT 5
60979: DOUBLE
60980: EQUAL
60981: IFTRUE 60997
60983: LD_INT 34
60985: DOUBLE
60986: EQUAL
60987: IFTRUE 60997
60989: LD_INT 37
60991: DOUBLE
60992: EQUAL
60993: IFTRUE 60997
60995: GO 61053
60997: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60998: LD_ADDR_VAR 0 9
61002: PUSH
61003: LD_VAR 0 53
61007: PUSH
61008: LD_VAR 0 54
61012: PUSH
61013: LD_VAR 0 55
61017: PUSH
61018: LD_VAR 0 56
61022: PUSH
61023: LD_VAR 0 57
61027: PUSH
61028: LD_VAR 0 58
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: PUSH
61041: LD_VAR 0 4
61045: PUSH
61046: LD_INT 1
61048: PLUS
61049: ARRAY
61050: ST_TO_ADDR
61051: GO 61160
61053: LD_INT 31
61055: DOUBLE
61056: EQUAL
61057: IFTRUE 61103
61059: LD_INT 32
61061: DOUBLE
61062: EQUAL
61063: IFTRUE 61103
61065: LD_INT 33
61067: DOUBLE
61068: EQUAL
61069: IFTRUE 61103
61071: LD_INT 27
61073: DOUBLE
61074: EQUAL
61075: IFTRUE 61103
61077: LD_INT 26
61079: DOUBLE
61080: EQUAL
61081: IFTRUE 61103
61083: LD_INT 28
61085: DOUBLE
61086: EQUAL
61087: IFTRUE 61103
61089: LD_INT 29
61091: DOUBLE
61092: EQUAL
61093: IFTRUE 61103
61095: LD_INT 30
61097: DOUBLE
61098: EQUAL
61099: IFTRUE 61103
61101: GO 61159
61103: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61104: LD_ADDR_VAR 0 9
61108: PUSH
61109: LD_VAR 0 59
61113: PUSH
61114: LD_VAR 0 60
61118: PUSH
61119: LD_VAR 0 61
61123: PUSH
61124: LD_VAR 0 62
61128: PUSH
61129: LD_VAR 0 63
61133: PUSH
61134: LD_VAR 0 64
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: PUSH
61147: LD_VAR 0 4
61151: PUSH
61152: LD_INT 1
61154: PLUS
61155: ARRAY
61156: ST_TO_ADDR
61157: GO 61160
61159: POP
// temp_list2 = [ ] ;
61160: LD_ADDR_VAR 0 10
61164: PUSH
61165: EMPTY
61166: ST_TO_ADDR
// for i in temp_list do
61167: LD_ADDR_VAR 0 8
61171: PUSH
61172: LD_VAR 0 9
61176: PUSH
61177: FOR_IN
61178: IFFALSE 61230
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61180: LD_ADDR_VAR 0 10
61184: PUSH
61185: LD_VAR 0 10
61189: PUSH
61190: LD_VAR 0 8
61194: PUSH
61195: LD_INT 1
61197: ARRAY
61198: PUSH
61199: LD_VAR 0 2
61203: PLUS
61204: PUSH
61205: LD_VAR 0 8
61209: PUSH
61210: LD_INT 2
61212: ARRAY
61213: PUSH
61214: LD_VAR 0 3
61218: PLUS
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: EMPTY
61225: LIST
61226: ADD
61227: ST_TO_ADDR
61228: GO 61177
61230: POP
61231: POP
// result = temp_list2 ;
61232: LD_ADDR_VAR 0 7
61236: PUSH
61237: LD_VAR 0 10
61241: ST_TO_ADDR
// end ;
61242: LD_VAR 0 7
61246: RET
// export function EnemyInRange ( unit , dist ) ; begin
61247: LD_INT 0
61249: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61250: LD_ADDR_VAR 0 3
61254: PUSH
61255: LD_VAR 0 1
61259: PPUSH
61260: CALL_OW 255
61264: PPUSH
61265: LD_VAR 0 1
61269: PPUSH
61270: CALL_OW 250
61274: PPUSH
61275: LD_VAR 0 1
61279: PPUSH
61280: CALL_OW 251
61284: PPUSH
61285: LD_VAR 0 2
61289: PPUSH
61290: CALL 34649 0 4
61294: PUSH
61295: LD_INT 4
61297: ARRAY
61298: ST_TO_ADDR
// end ;
61299: LD_VAR 0 3
61303: RET
// export function PlayerSeeMe ( unit ) ; begin
61304: LD_INT 0
61306: PPUSH
// result := See ( your_side , unit ) ;
61307: LD_ADDR_VAR 0 2
61311: PUSH
61312: LD_OWVAR 2
61316: PPUSH
61317: LD_VAR 0 1
61321: PPUSH
61322: CALL_OW 292
61326: ST_TO_ADDR
// end ;
61327: LD_VAR 0 2
61331: RET
// export function ReverseDir ( unit ) ; begin
61332: LD_INT 0
61334: PPUSH
// if not unit then
61335: LD_VAR 0 1
61339: NOT
61340: IFFALSE 61344
// exit ;
61342: GO 61367
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61344: LD_ADDR_VAR 0 2
61348: PUSH
61349: LD_VAR 0 1
61353: PPUSH
61354: CALL_OW 254
61358: PUSH
61359: LD_INT 3
61361: PLUS
61362: PUSH
61363: LD_INT 6
61365: MOD
61366: ST_TO_ADDR
// end ;
61367: LD_VAR 0 2
61371: RET
// export function ReverseArray ( array ) ; var i ; begin
61372: LD_INT 0
61374: PPUSH
61375: PPUSH
// if not array then
61376: LD_VAR 0 1
61380: NOT
61381: IFFALSE 61385
// exit ;
61383: GO 61440
// result := [ ] ;
61385: LD_ADDR_VAR 0 2
61389: PUSH
61390: EMPTY
61391: ST_TO_ADDR
// for i := array downto 1 do
61392: LD_ADDR_VAR 0 3
61396: PUSH
61397: DOUBLE
61398: LD_VAR 0 1
61402: INC
61403: ST_TO_ADDR
61404: LD_INT 1
61406: PUSH
61407: FOR_DOWNTO
61408: IFFALSE 61438
// result := Join ( result , array [ i ] ) ;
61410: LD_ADDR_VAR 0 2
61414: PUSH
61415: LD_VAR 0 2
61419: PPUSH
61420: LD_VAR 0 1
61424: PUSH
61425: LD_VAR 0 3
61429: ARRAY
61430: PPUSH
61431: CALL 66083 0 2
61435: ST_TO_ADDR
61436: GO 61407
61438: POP
61439: POP
// end ;
61440: LD_VAR 0 2
61444: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61445: LD_INT 0
61447: PPUSH
61448: PPUSH
61449: PPUSH
61450: PPUSH
61451: PPUSH
61452: PPUSH
// if not unit or not hexes then
61453: LD_VAR 0 1
61457: NOT
61458: PUSH
61459: LD_VAR 0 2
61463: NOT
61464: OR
61465: IFFALSE 61469
// exit ;
61467: GO 61592
// dist := 9999 ;
61469: LD_ADDR_VAR 0 5
61473: PUSH
61474: LD_INT 9999
61476: ST_TO_ADDR
// for i = 1 to hexes do
61477: LD_ADDR_VAR 0 4
61481: PUSH
61482: DOUBLE
61483: LD_INT 1
61485: DEC
61486: ST_TO_ADDR
61487: LD_VAR 0 2
61491: PUSH
61492: FOR_TO
61493: IFFALSE 61580
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61495: LD_ADDR_VAR 0 6
61499: PUSH
61500: LD_VAR 0 1
61504: PPUSH
61505: LD_VAR 0 2
61509: PUSH
61510: LD_VAR 0 4
61514: ARRAY
61515: PUSH
61516: LD_INT 1
61518: ARRAY
61519: PPUSH
61520: LD_VAR 0 2
61524: PUSH
61525: LD_VAR 0 4
61529: ARRAY
61530: PUSH
61531: LD_INT 2
61533: ARRAY
61534: PPUSH
61535: CALL_OW 297
61539: ST_TO_ADDR
// if tdist < dist then
61540: LD_VAR 0 6
61544: PUSH
61545: LD_VAR 0 5
61549: LESS
61550: IFFALSE 61578
// begin hex := hexes [ i ] ;
61552: LD_ADDR_VAR 0 8
61556: PUSH
61557: LD_VAR 0 2
61561: PUSH
61562: LD_VAR 0 4
61566: ARRAY
61567: ST_TO_ADDR
// dist := tdist ;
61568: LD_ADDR_VAR 0 5
61572: PUSH
61573: LD_VAR 0 6
61577: ST_TO_ADDR
// end ; end ;
61578: GO 61492
61580: POP
61581: POP
// result := hex ;
61582: LD_ADDR_VAR 0 3
61586: PUSH
61587: LD_VAR 0 8
61591: ST_TO_ADDR
// end ;
61592: LD_VAR 0 3
61596: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61597: LD_INT 0
61599: PPUSH
61600: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61601: LD_VAR 0 1
61605: NOT
61606: PUSH
61607: LD_VAR 0 1
61611: PUSH
61612: LD_INT 21
61614: PUSH
61615: LD_INT 2
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 23
61624: PUSH
61625: LD_INT 2
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PPUSH
61636: CALL_OW 69
61640: IN
61641: NOT
61642: OR
61643: IFFALSE 61647
// exit ;
61645: GO 61694
// for i = 1 to 3 do
61647: LD_ADDR_VAR 0 3
61651: PUSH
61652: DOUBLE
61653: LD_INT 1
61655: DEC
61656: ST_TO_ADDR
61657: LD_INT 3
61659: PUSH
61660: FOR_TO
61661: IFFALSE 61692
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61663: LD_VAR 0 1
61667: PPUSH
61668: CALL_OW 250
61672: PPUSH
61673: LD_VAR 0 1
61677: PPUSH
61678: CALL_OW 251
61682: PPUSH
61683: LD_INT 1
61685: PPUSH
61686: CALL_OW 453
61690: GO 61660
61692: POP
61693: POP
// end ;
61694: LD_VAR 0 2
61698: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61699: LD_INT 0
61701: PPUSH
61702: PPUSH
61703: PPUSH
61704: PPUSH
61705: PPUSH
61706: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61707: LD_VAR 0 1
61711: NOT
61712: PUSH
61713: LD_VAR 0 2
61717: NOT
61718: OR
61719: PUSH
61720: LD_VAR 0 1
61724: PPUSH
61725: CALL_OW 314
61729: OR
61730: IFFALSE 61734
// exit ;
61732: GO 62201
// if GetLives ( i ) < 250 then
61734: LD_VAR 0 4
61738: PPUSH
61739: CALL_OW 256
61743: PUSH
61744: LD_INT 250
61746: LESS
61747: IFFALSE 61760
// begin ComAutodestruct ( i ) ;
61749: LD_VAR 0 4
61753: PPUSH
61754: CALL 61597 0 1
// exit ;
61758: GO 62201
// end ; x := GetX ( enemy_unit ) ;
61760: LD_ADDR_VAR 0 7
61764: PUSH
61765: LD_VAR 0 2
61769: PPUSH
61770: CALL_OW 250
61774: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61775: LD_ADDR_VAR 0 8
61779: PUSH
61780: LD_VAR 0 2
61784: PPUSH
61785: CALL_OW 251
61789: ST_TO_ADDR
// if not x or not y then
61790: LD_VAR 0 7
61794: NOT
61795: PUSH
61796: LD_VAR 0 8
61800: NOT
61801: OR
61802: IFFALSE 61806
// exit ;
61804: GO 62201
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61806: LD_ADDR_VAR 0 6
61810: PUSH
61811: LD_VAR 0 7
61815: PPUSH
61816: LD_INT 0
61818: PPUSH
61819: LD_INT 4
61821: PPUSH
61822: CALL_OW 272
61826: PUSH
61827: LD_VAR 0 8
61831: PPUSH
61832: LD_INT 0
61834: PPUSH
61835: LD_INT 4
61837: PPUSH
61838: CALL_OW 273
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_VAR 0 7
61851: PPUSH
61852: LD_INT 1
61854: PPUSH
61855: LD_INT 4
61857: PPUSH
61858: CALL_OW 272
61862: PUSH
61863: LD_VAR 0 8
61867: PPUSH
61868: LD_INT 1
61870: PPUSH
61871: LD_INT 4
61873: PPUSH
61874: CALL_OW 273
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_VAR 0 7
61887: PPUSH
61888: LD_INT 2
61890: PPUSH
61891: LD_INT 4
61893: PPUSH
61894: CALL_OW 272
61898: PUSH
61899: LD_VAR 0 8
61903: PPUSH
61904: LD_INT 2
61906: PPUSH
61907: LD_INT 4
61909: PPUSH
61910: CALL_OW 273
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_VAR 0 7
61923: PPUSH
61924: LD_INT 3
61926: PPUSH
61927: LD_INT 4
61929: PPUSH
61930: CALL_OW 272
61934: PUSH
61935: LD_VAR 0 8
61939: PPUSH
61940: LD_INT 3
61942: PPUSH
61943: LD_INT 4
61945: PPUSH
61946: CALL_OW 273
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_VAR 0 7
61959: PPUSH
61960: LD_INT 4
61962: PPUSH
61963: LD_INT 4
61965: PPUSH
61966: CALL_OW 272
61970: PUSH
61971: LD_VAR 0 8
61975: PPUSH
61976: LD_INT 4
61978: PPUSH
61979: LD_INT 4
61981: PPUSH
61982: CALL_OW 273
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_VAR 0 7
61995: PPUSH
61996: LD_INT 5
61998: PPUSH
61999: LD_INT 4
62001: PPUSH
62002: CALL_OW 272
62006: PUSH
62007: LD_VAR 0 8
62011: PPUSH
62012: LD_INT 5
62014: PPUSH
62015: LD_INT 4
62017: PPUSH
62018: CALL_OW 273
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: ST_TO_ADDR
// for i = tmp downto 1 do
62035: LD_ADDR_VAR 0 4
62039: PUSH
62040: DOUBLE
62041: LD_VAR 0 6
62045: INC
62046: ST_TO_ADDR
62047: LD_INT 1
62049: PUSH
62050: FOR_DOWNTO
62051: IFFALSE 62152
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62053: LD_VAR 0 6
62057: PUSH
62058: LD_VAR 0 4
62062: ARRAY
62063: PUSH
62064: LD_INT 1
62066: ARRAY
62067: PPUSH
62068: LD_VAR 0 6
62072: PUSH
62073: LD_VAR 0 4
62077: ARRAY
62078: PUSH
62079: LD_INT 2
62081: ARRAY
62082: PPUSH
62083: CALL_OW 488
62087: NOT
62088: PUSH
62089: LD_VAR 0 6
62093: PUSH
62094: LD_VAR 0 4
62098: ARRAY
62099: PUSH
62100: LD_INT 1
62102: ARRAY
62103: PPUSH
62104: LD_VAR 0 6
62108: PUSH
62109: LD_VAR 0 4
62113: ARRAY
62114: PUSH
62115: LD_INT 2
62117: ARRAY
62118: PPUSH
62119: CALL_OW 428
62123: PUSH
62124: LD_INT 0
62126: NONEQUAL
62127: OR
62128: IFFALSE 62150
// tmp := Delete ( tmp , i ) ;
62130: LD_ADDR_VAR 0 6
62134: PUSH
62135: LD_VAR 0 6
62139: PPUSH
62140: LD_VAR 0 4
62144: PPUSH
62145: CALL_OW 3
62149: ST_TO_ADDR
62150: GO 62050
62152: POP
62153: POP
// j := GetClosestHex ( unit , tmp ) ;
62154: LD_ADDR_VAR 0 5
62158: PUSH
62159: LD_VAR 0 1
62163: PPUSH
62164: LD_VAR 0 6
62168: PPUSH
62169: CALL 61445 0 2
62173: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62174: LD_VAR 0 1
62178: PPUSH
62179: LD_VAR 0 5
62183: PUSH
62184: LD_INT 1
62186: ARRAY
62187: PPUSH
62188: LD_VAR 0 5
62192: PUSH
62193: LD_INT 2
62195: ARRAY
62196: PPUSH
62197: CALL_OW 111
// end ;
62201: LD_VAR 0 3
62205: RET
// export function PrepareApemanSoldier ( ) ; begin
62206: LD_INT 0
62208: PPUSH
// uc_nation := 0 ;
62209: LD_ADDR_OWVAR 21
62213: PUSH
62214: LD_INT 0
62216: ST_TO_ADDR
// hc_sex := sex_male ;
62217: LD_ADDR_OWVAR 27
62221: PUSH
62222: LD_INT 1
62224: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62225: LD_ADDR_OWVAR 28
62229: PUSH
62230: LD_INT 15
62232: ST_TO_ADDR
// hc_gallery :=  ;
62233: LD_ADDR_OWVAR 33
62237: PUSH
62238: LD_STRING 
62240: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62241: LD_ADDR_OWVAR 31
62245: PUSH
62246: LD_INT 0
62248: PPUSH
62249: LD_INT 3
62251: PPUSH
62252: CALL_OW 12
62256: PUSH
62257: LD_INT 0
62259: PPUSH
62260: LD_INT 3
62262: PPUSH
62263: CALL_OW 12
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: ST_TO_ADDR
// end ;
62280: LD_VAR 0 1
62284: RET
// export function PrepareApemanEngineer ( ) ; begin
62285: LD_INT 0
62287: PPUSH
// uc_nation := 0 ;
62288: LD_ADDR_OWVAR 21
62292: PUSH
62293: LD_INT 0
62295: ST_TO_ADDR
// hc_sex := sex_male ;
62296: LD_ADDR_OWVAR 27
62300: PUSH
62301: LD_INT 1
62303: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62304: LD_ADDR_OWVAR 28
62308: PUSH
62309: LD_INT 16
62311: ST_TO_ADDR
// hc_gallery :=  ;
62312: LD_ADDR_OWVAR 33
62316: PUSH
62317: LD_STRING 
62319: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62320: LD_ADDR_OWVAR 31
62324: PUSH
62325: LD_INT 0
62327: PPUSH
62328: LD_INT 3
62330: PPUSH
62331: CALL_OW 12
62335: PUSH
62336: LD_INT 0
62338: PPUSH
62339: LD_INT 3
62341: PPUSH
62342: CALL_OW 12
62346: PUSH
62347: LD_INT 0
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: ST_TO_ADDR
// end ;
62359: LD_VAR 0 1
62363: RET
// export function PrepareApeman ( agressivity ) ; begin
62364: LD_INT 0
62366: PPUSH
// uc_side := 0 ;
62367: LD_ADDR_OWVAR 20
62371: PUSH
62372: LD_INT 0
62374: ST_TO_ADDR
// uc_nation := 0 ;
62375: LD_ADDR_OWVAR 21
62379: PUSH
62380: LD_INT 0
62382: ST_TO_ADDR
// hc_sex := sex_male ;
62383: LD_ADDR_OWVAR 27
62387: PUSH
62388: LD_INT 1
62390: ST_TO_ADDR
// hc_class := class_apeman ;
62391: LD_ADDR_OWVAR 28
62395: PUSH
62396: LD_INT 12
62398: ST_TO_ADDR
// hc_gallery :=  ;
62399: LD_ADDR_OWVAR 33
62403: PUSH
62404: LD_STRING 
62406: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62407: LD_ADDR_OWVAR 35
62411: PUSH
62412: LD_VAR 0 1
62416: NEG
62417: PPUSH
62418: LD_VAR 0 1
62422: PPUSH
62423: CALL_OW 12
62427: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62428: LD_ADDR_OWVAR 31
62432: PUSH
62433: LD_INT 0
62435: PPUSH
62436: LD_INT 3
62438: PPUSH
62439: CALL_OW 12
62443: PUSH
62444: LD_INT 0
62446: PPUSH
62447: LD_INT 3
62449: PPUSH
62450: CALL_OW 12
62454: PUSH
62455: LD_INT 0
62457: PUSH
62458: LD_INT 0
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: ST_TO_ADDR
// end ;
62467: LD_VAR 0 2
62471: RET
// export function PrepareTiger ( agressivity ) ; begin
62472: LD_INT 0
62474: PPUSH
// uc_side := 0 ;
62475: LD_ADDR_OWVAR 20
62479: PUSH
62480: LD_INT 0
62482: ST_TO_ADDR
// uc_nation := 0 ;
62483: LD_ADDR_OWVAR 21
62487: PUSH
62488: LD_INT 0
62490: ST_TO_ADDR
// hc_class := class_tiger ;
62491: LD_ADDR_OWVAR 28
62495: PUSH
62496: LD_INT 14
62498: ST_TO_ADDR
// hc_gallery :=  ;
62499: LD_ADDR_OWVAR 33
62503: PUSH
62504: LD_STRING 
62506: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62507: LD_ADDR_OWVAR 35
62511: PUSH
62512: LD_VAR 0 1
62516: NEG
62517: PPUSH
62518: LD_VAR 0 1
62522: PPUSH
62523: CALL_OW 12
62527: ST_TO_ADDR
// end ;
62528: LD_VAR 0 2
62532: RET
// export function PrepareEnchidna ( ) ; begin
62533: LD_INT 0
62535: PPUSH
// uc_side := 0 ;
62536: LD_ADDR_OWVAR 20
62540: PUSH
62541: LD_INT 0
62543: ST_TO_ADDR
// uc_nation := 0 ;
62544: LD_ADDR_OWVAR 21
62548: PUSH
62549: LD_INT 0
62551: ST_TO_ADDR
// hc_class := class_baggie ;
62552: LD_ADDR_OWVAR 28
62556: PUSH
62557: LD_INT 13
62559: ST_TO_ADDR
// hc_gallery :=  ;
62560: LD_ADDR_OWVAR 33
62564: PUSH
62565: LD_STRING 
62567: ST_TO_ADDR
// end ;
62568: LD_VAR 0 1
62572: RET
// export function PrepareFrog ( ) ; begin
62573: LD_INT 0
62575: PPUSH
// uc_side := 0 ;
62576: LD_ADDR_OWVAR 20
62580: PUSH
62581: LD_INT 0
62583: ST_TO_ADDR
// uc_nation := 0 ;
62584: LD_ADDR_OWVAR 21
62588: PUSH
62589: LD_INT 0
62591: ST_TO_ADDR
// hc_class := class_frog ;
62592: LD_ADDR_OWVAR 28
62596: PUSH
62597: LD_INT 19
62599: ST_TO_ADDR
// hc_gallery :=  ;
62600: LD_ADDR_OWVAR 33
62604: PUSH
62605: LD_STRING 
62607: ST_TO_ADDR
// end ;
62608: LD_VAR 0 1
62612: RET
// export function PrepareFish ( ) ; begin
62613: LD_INT 0
62615: PPUSH
// uc_side := 0 ;
62616: LD_ADDR_OWVAR 20
62620: PUSH
62621: LD_INT 0
62623: ST_TO_ADDR
// uc_nation := 0 ;
62624: LD_ADDR_OWVAR 21
62628: PUSH
62629: LD_INT 0
62631: ST_TO_ADDR
// hc_class := class_fish ;
62632: LD_ADDR_OWVAR 28
62636: PUSH
62637: LD_INT 20
62639: ST_TO_ADDR
// hc_gallery :=  ;
62640: LD_ADDR_OWVAR 33
62644: PUSH
62645: LD_STRING 
62647: ST_TO_ADDR
// end ;
62648: LD_VAR 0 1
62652: RET
// export function PrepareBird ( ) ; begin
62653: LD_INT 0
62655: PPUSH
// uc_side := 0 ;
62656: LD_ADDR_OWVAR 20
62660: PUSH
62661: LD_INT 0
62663: ST_TO_ADDR
// uc_nation := 0 ;
62664: LD_ADDR_OWVAR 21
62668: PUSH
62669: LD_INT 0
62671: ST_TO_ADDR
// hc_class := class_phororhacos ;
62672: LD_ADDR_OWVAR 28
62676: PUSH
62677: LD_INT 18
62679: ST_TO_ADDR
// hc_gallery :=  ;
62680: LD_ADDR_OWVAR 33
62684: PUSH
62685: LD_STRING 
62687: ST_TO_ADDR
// end ;
62688: LD_VAR 0 1
62692: RET
// export function PrepareHorse ( ) ; begin
62693: LD_INT 0
62695: PPUSH
// uc_side := 0 ;
62696: LD_ADDR_OWVAR 20
62700: PUSH
62701: LD_INT 0
62703: ST_TO_ADDR
// uc_nation := 0 ;
62704: LD_ADDR_OWVAR 21
62708: PUSH
62709: LD_INT 0
62711: ST_TO_ADDR
// hc_class := class_horse ;
62712: LD_ADDR_OWVAR 28
62716: PUSH
62717: LD_INT 21
62719: ST_TO_ADDR
// hc_gallery :=  ;
62720: LD_ADDR_OWVAR 33
62724: PUSH
62725: LD_STRING 
62727: ST_TO_ADDR
// end ;
62728: LD_VAR 0 1
62732: RET
// export function PrepareMastodont ( ) ; begin
62733: LD_INT 0
62735: PPUSH
// uc_side := 0 ;
62736: LD_ADDR_OWVAR 20
62740: PUSH
62741: LD_INT 0
62743: ST_TO_ADDR
// uc_nation := 0 ;
62744: LD_ADDR_OWVAR 21
62748: PUSH
62749: LD_INT 0
62751: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62752: LD_ADDR_OWVAR 37
62756: PUSH
62757: LD_INT 31
62759: ST_TO_ADDR
// vc_control := control_rider ;
62760: LD_ADDR_OWVAR 38
62764: PUSH
62765: LD_INT 4
62767: ST_TO_ADDR
// end ;
62768: LD_VAR 0 1
62772: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62773: LD_INT 0
62775: PPUSH
62776: PPUSH
62777: PPUSH
// uc_side = 0 ;
62778: LD_ADDR_OWVAR 20
62782: PUSH
62783: LD_INT 0
62785: ST_TO_ADDR
// uc_nation = 0 ;
62786: LD_ADDR_OWVAR 21
62790: PUSH
62791: LD_INT 0
62793: ST_TO_ADDR
// InitHc_All ( ) ;
62794: CALL_OW 584
// InitVc ;
62798: CALL_OW 20
// if mastodonts then
62802: LD_VAR 0 6
62806: IFFALSE 62873
// for i = 1 to mastodonts do
62808: LD_ADDR_VAR 0 11
62812: PUSH
62813: DOUBLE
62814: LD_INT 1
62816: DEC
62817: ST_TO_ADDR
62818: LD_VAR 0 6
62822: PUSH
62823: FOR_TO
62824: IFFALSE 62871
// begin vc_chassis := 31 ;
62826: LD_ADDR_OWVAR 37
62830: PUSH
62831: LD_INT 31
62833: ST_TO_ADDR
// vc_control := control_rider ;
62834: LD_ADDR_OWVAR 38
62838: PUSH
62839: LD_INT 4
62841: ST_TO_ADDR
// animal := CreateVehicle ;
62842: LD_ADDR_VAR 0 12
62846: PUSH
62847: CALL_OW 45
62851: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62852: LD_VAR 0 12
62856: PPUSH
62857: LD_VAR 0 8
62861: PPUSH
62862: LD_INT 0
62864: PPUSH
62865: CALL 65001 0 3
// end ;
62869: GO 62823
62871: POP
62872: POP
// if horses then
62873: LD_VAR 0 5
62877: IFFALSE 62944
// for i = 1 to horses do
62879: LD_ADDR_VAR 0 11
62883: PUSH
62884: DOUBLE
62885: LD_INT 1
62887: DEC
62888: ST_TO_ADDR
62889: LD_VAR 0 5
62893: PUSH
62894: FOR_TO
62895: IFFALSE 62942
// begin hc_class := 21 ;
62897: LD_ADDR_OWVAR 28
62901: PUSH
62902: LD_INT 21
62904: ST_TO_ADDR
// hc_gallery :=  ;
62905: LD_ADDR_OWVAR 33
62909: PUSH
62910: LD_STRING 
62912: ST_TO_ADDR
// animal := CreateHuman ;
62913: LD_ADDR_VAR 0 12
62917: PUSH
62918: CALL_OW 44
62922: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62923: LD_VAR 0 12
62927: PPUSH
62928: LD_VAR 0 8
62932: PPUSH
62933: LD_INT 0
62935: PPUSH
62936: CALL 65001 0 3
// end ;
62940: GO 62894
62942: POP
62943: POP
// if birds then
62944: LD_VAR 0 1
62948: IFFALSE 63015
// for i = 1 to birds do
62950: LD_ADDR_VAR 0 11
62954: PUSH
62955: DOUBLE
62956: LD_INT 1
62958: DEC
62959: ST_TO_ADDR
62960: LD_VAR 0 1
62964: PUSH
62965: FOR_TO
62966: IFFALSE 63013
// begin hc_class = 18 ;
62968: LD_ADDR_OWVAR 28
62972: PUSH
62973: LD_INT 18
62975: ST_TO_ADDR
// hc_gallery =  ;
62976: LD_ADDR_OWVAR 33
62980: PUSH
62981: LD_STRING 
62983: ST_TO_ADDR
// animal := CreateHuman ;
62984: LD_ADDR_VAR 0 12
62988: PUSH
62989: CALL_OW 44
62993: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62994: LD_VAR 0 12
62998: PPUSH
62999: LD_VAR 0 8
63003: PPUSH
63004: LD_INT 0
63006: PPUSH
63007: CALL 65001 0 3
// end ;
63011: GO 62965
63013: POP
63014: POP
// if tigers then
63015: LD_VAR 0 2
63019: IFFALSE 63103
// for i = 1 to tigers do
63021: LD_ADDR_VAR 0 11
63025: PUSH
63026: DOUBLE
63027: LD_INT 1
63029: DEC
63030: ST_TO_ADDR
63031: LD_VAR 0 2
63035: PUSH
63036: FOR_TO
63037: IFFALSE 63101
// begin hc_class = class_tiger ;
63039: LD_ADDR_OWVAR 28
63043: PUSH
63044: LD_INT 14
63046: ST_TO_ADDR
// hc_gallery =  ;
63047: LD_ADDR_OWVAR 33
63051: PUSH
63052: LD_STRING 
63054: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63055: LD_ADDR_OWVAR 35
63059: PUSH
63060: LD_INT 7
63062: NEG
63063: PPUSH
63064: LD_INT 7
63066: PPUSH
63067: CALL_OW 12
63071: ST_TO_ADDR
// animal := CreateHuman ;
63072: LD_ADDR_VAR 0 12
63076: PUSH
63077: CALL_OW 44
63081: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63082: LD_VAR 0 12
63086: PPUSH
63087: LD_VAR 0 8
63091: PPUSH
63092: LD_INT 0
63094: PPUSH
63095: CALL 65001 0 3
// end ;
63099: GO 63036
63101: POP
63102: POP
// if apemans then
63103: LD_VAR 0 3
63107: IFFALSE 63230
// for i = 1 to apemans do
63109: LD_ADDR_VAR 0 11
63113: PUSH
63114: DOUBLE
63115: LD_INT 1
63117: DEC
63118: ST_TO_ADDR
63119: LD_VAR 0 3
63123: PUSH
63124: FOR_TO
63125: IFFALSE 63228
// begin hc_class = class_apeman ;
63127: LD_ADDR_OWVAR 28
63131: PUSH
63132: LD_INT 12
63134: ST_TO_ADDR
// hc_gallery =  ;
63135: LD_ADDR_OWVAR 33
63139: PUSH
63140: LD_STRING 
63142: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63143: LD_ADDR_OWVAR 35
63147: PUSH
63148: LD_INT 2
63150: NEG
63151: PPUSH
63152: LD_INT 2
63154: PPUSH
63155: CALL_OW 12
63159: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63160: LD_ADDR_OWVAR 31
63164: PUSH
63165: LD_INT 1
63167: PPUSH
63168: LD_INT 3
63170: PPUSH
63171: CALL_OW 12
63175: PUSH
63176: LD_INT 1
63178: PPUSH
63179: LD_INT 3
63181: PPUSH
63182: CALL_OW 12
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: LD_INT 0
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: ST_TO_ADDR
// animal := CreateHuman ;
63199: LD_ADDR_VAR 0 12
63203: PUSH
63204: CALL_OW 44
63208: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63209: LD_VAR 0 12
63213: PPUSH
63214: LD_VAR 0 8
63218: PPUSH
63219: LD_INT 0
63221: PPUSH
63222: CALL 65001 0 3
// end ;
63226: GO 63124
63228: POP
63229: POP
// if enchidnas then
63230: LD_VAR 0 4
63234: IFFALSE 63301
// for i = 1 to enchidnas do
63236: LD_ADDR_VAR 0 11
63240: PUSH
63241: DOUBLE
63242: LD_INT 1
63244: DEC
63245: ST_TO_ADDR
63246: LD_VAR 0 4
63250: PUSH
63251: FOR_TO
63252: IFFALSE 63299
// begin hc_class = 13 ;
63254: LD_ADDR_OWVAR 28
63258: PUSH
63259: LD_INT 13
63261: ST_TO_ADDR
// hc_gallery =  ;
63262: LD_ADDR_OWVAR 33
63266: PUSH
63267: LD_STRING 
63269: ST_TO_ADDR
// animal := CreateHuman ;
63270: LD_ADDR_VAR 0 12
63274: PUSH
63275: CALL_OW 44
63279: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63280: LD_VAR 0 12
63284: PPUSH
63285: LD_VAR 0 8
63289: PPUSH
63290: LD_INT 0
63292: PPUSH
63293: CALL 65001 0 3
// end ;
63297: GO 63251
63299: POP
63300: POP
// if fishes then
63301: LD_VAR 0 7
63305: IFFALSE 63372
// for i = 1 to fishes do
63307: LD_ADDR_VAR 0 11
63311: PUSH
63312: DOUBLE
63313: LD_INT 1
63315: DEC
63316: ST_TO_ADDR
63317: LD_VAR 0 7
63321: PUSH
63322: FOR_TO
63323: IFFALSE 63370
// begin hc_class = 20 ;
63325: LD_ADDR_OWVAR 28
63329: PUSH
63330: LD_INT 20
63332: ST_TO_ADDR
// hc_gallery =  ;
63333: LD_ADDR_OWVAR 33
63337: PUSH
63338: LD_STRING 
63340: ST_TO_ADDR
// animal := CreateHuman ;
63341: LD_ADDR_VAR 0 12
63345: PUSH
63346: CALL_OW 44
63350: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63351: LD_VAR 0 12
63355: PPUSH
63356: LD_VAR 0 9
63360: PPUSH
63361: LD_INT 0
63363: PPUSH
63364: CALL 65001 0 3
// end ;
63368: GO 63322
63370: POP
63371: POP
// end ;
63372: LD_VAR 0 10
63376: RET
// export function WantHeal ( sci , unit ) ; begin
63377: LD_INT 0
63379: PPUSH
// if GetTaskList ( sci ) > 0 then
63380: LD_VAR 0 1
63384: PPUSH
63385: CALL_OW 437
63389: PUSH
63390: LD_INT 0
63392: GREATER
63393: IFFALSE 63463
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63395: LD_VAR 0 1
63399: PPUSH
63400: CALL_OW 437
63404: PUSH
63405: LD_INT 1
63407: ARRAY
63408: PUSH
63409: LD_INT 1
63411: ARRAY
63412: PUSH
63413: LD_STRING l
63415: EQUAL
63416: PUSH
63417: LD_VAR 0 1
63421: PPUSH
63422: CALL_OW 437
63426: PUSH
63427: LD_INT 1
63429: ARRAY
63430: PUSH
63431: LD_INT 4
63433: ARRAY
63434: PUSH
63435: LD_VAR 0 2
63439: EQUAL
63440: AND
63441: IFFALSE 63453
// result := true else
63443: LD_ADDR_VAR 0 3
63447: PUSH
63448: LD_INT 1
63450: ST_TO_ADDR
63451: GO 63461
// result := false ;
63453: LD_ADDR_VAR 0 3
63457: PUSH
63458: LD_INT 0
63460: ST_TO_ADDR
// end else
63461: GO 63471
// result := false ;
63463: LD_ADDR_VAR 0 3
63467: PUSH
63468: LD_INT 0
63470: ST_TO_ADDR
// end ;
63471: LD_VAR 0 3
63475: RET
// export function HealTarget ( sci ) ; begin
63476: LD_INT 0
63478: PPUSH
// if not sci then
63479: LD_VAR 0 1
63483: NOT
63484: IFFALSE 63488
// exit ;
63486: GO 63553
// result := 0 ;
63488: LD_ADDR_VAR 0 2
63492: PUSH
63493: LD_INT 0
63495: ST_TO_ADDR
// if GetTaskList ( sci ) then
63496: LD_VAR 0 1
63500: PPUSH
63501: CALL_OW 437
63505: IFFALSE 63553
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63507: LD_VAR 0 1
63511: PPUSH
63512: CALL_OW 437
63516: PUSH
63517: LD_INT 1
63519: ARRAY
63520: PUSH
63521: LD_INT 1
63523: ARRAY
63524: PUSH
63525: LD_STRING l
63527: EQUAL
63528: IFFALSE 63553
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63530: LD_ADDR_VAR 0 2
63534: PUSH
63535: LD_VAR 0 1
63539: PPUSH
63540: CALL_OW 437
63544: PUSH
63545: LD_INT 1
63547: ARRAY
63548: PUSH
63549: LD_INT 4
63551: ARRAY
63552: ST_TO_ADDR
// end ;
63553: LD_VAR 0 2
63557: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63558: LD_INT 0
63560: PPUSH
63561: PPUSH
63562: PPUSH
63563: PPUSH
// if not base_units then
63564: LD_VAR 0 1
63568: NOT
63569: IFFALSE 63573
// exit ;
63571: GO 63660
// result := false ;
63573: LD_ADDR_VAR 0 2
63577: PUSH
63578: LD_INT 0
63580: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63581: LD_ADDR_VAR 0 5
63585: PUSH
63586: LD_VAR 0 1
63590: PPUSH
63591: LD_INT 21
63593: PUSH
63594: LD_INT 3
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PPUSH
63601: CALL_OW 72
63605: ST_TO_ADDR
// if not tmp then
63606: LD_VAR 0 5
63610: NOT
63611: IFFALSE 63615
// exit ;
63613: GO 63660
// for i in tmp do
63615: LD_ADDR_VAR 0 3
63619: PUSH
63620: LD_VAR 0 5
63624: PUSH
63625: FOR_IN
63626: IFFALSE 63658
// begin result := EnemyInRange ( i , 22 ) ;
63628: LD_ADDR_VAR 0 2
63632: PUSH
63633: LD_VAR 0 3
63637: PPUSH
63638: LD_INT 22
63640: PPUSH
63641: CALL 61247 0 2
63645: ST_TO_ADDR
// if result then
63646: LD_VAR 0 2
63650: IFFALSE 63656
// exit ;
63652: POP
63653: POP
63654: GO 63660
// end ;
63656: GO 63625
63658: POP
63659: POP
// end ;
63660: LD_VAR 0 2
63664: RET
// export function FilterByTag ( units , tag ) ; begin
63665: LD_INT 0
63667: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63668: LD_ADDR_VAR 0 3
63672: PUSH
63673: LD_VAR 0 1
63677: PPUSH
63678: LD_INT 120
63680: PUSH
63681: LD_VAR 0 2
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PPUSH
63690: CALL_OW 72
63694: ST_TO_ADDR
// end ;
63695: LD_VAR 0 3
63699: RET
// export function IsDriver ( un ) ; begin
63700: LD_INT 0
63702: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63703: LD_ADDR_VAR 0 2
63707: PUSH
63708: LD_VAR 0 1
63712: PUSH
63713: LD_INT 55
63715: PUSH
63716: EMPTY
63717: LIST
63718: PPUSH
63719: CALL_OW 69
63723: IN
63724: ST_TO_ADDR
// end ;
63725: LD_VAR 0 2
63729: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63730: LD_INT 0
63732: PPUSH
63733: PPUSH
// list := [ ] ;
63734: LD_ADDR_VAR 0 5
63738: PUSH
63739: EMPTY
63740: ST_TO_ADDR
// case d of 0 :
63741: LD_VAR 0 3
63745: PUSH
63746: LD_INT 0
63748: DOUBLE
63749: EQUAL
63750: IFTRUE 63754
63752: GO 63887
63754: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63755: LD_ADDR_VAR 0 5
63759: PUSH
63760: LD_VAR 0 1
63764: PUSH
63765: LD_INT 4
63767: MINUS
63768: PUSH
63769: LD_VAR 0 2
63773: PUSH
63774: LD_INT 4
63776: MINUS
63777: PUSH
63778: LD_INT 2
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: LIST
63785: PUSH
63786: LD_VAR 0 1
63790: PUSH
63791: LD_INT 3
63793: MINUS
63794: PUSH
63795: LD_VAR 0 2
63799: PUSH
63800: LD_INT 1
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: LIST
63807: PUSH
63808: LD_VAR 0 1
63812: PUSH
63813: LD_INT 4
63815: PLUS
63816: PUSH
63817: LD_VAR 0 2
63821: PUSH
63822: LD_INT 4
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: LIST
63829: PUSH
63830: LD_VAR 0 1
63834: PUSH
63835: LD_INT 3
63837: PLUS
63838: PUSH
63839: LD_VAR 0 2
63843: PUSH
63844: LD_INT 3
63846: PLUS
63847: PUSH
63848: LD_INT 5
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: LIST
63855: PUSH
63856: LD_VAR 0 1
63860: PUSH
63861: LD_VAR 0 2
63865: PUSH
63866: LD_INT 4
63868: PLUS
63869: PUSH
63870: LD_INT 0
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: LIST
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: ST_TO_ADDR
// end ; 1 :
63885: GO 64585
63887: LD_INT 1
63889: DOUBLE
63890: EQUAL
63891: IFTRUE 63895
63893: GO 64028
63895: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63896: LD_ADDR_VAR 0 5
63900: PUSH
63901: LD_VAR 0 1
63905: PUSH
63906: LD_VAR 0 2
63910: PUSH
63911: LD_INT 4
63913: MINUS
63914: PUSH
63915: LD_INT 3
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: LIST
63922: PUSH
63923: LD_VAR 0 1
63927: PUSH
63928: LD_INT 3
63930: MINUS
63931: PUSH
63932: LD_VAR 0 2
63936: PUSH
63937: LD_INT 3
63939: MINUS
63940: PUSH
63941: LD_INT 2
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: LIST
63948: PUSH
63949: LD_VAR 0 1
63953: PUSH
63954: LD_INT 4
63956: MINUS
63957: PUSH
63958: LD_VAR 0 2
63962: PUSH
63963: LD_INT 1
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: LIST
63970: PUSH
63971: LD_VAR 0 1
63975: PUSH
63976: LD_VAR 0 2
63980: PUSH
63981: LD_INT 3
63983: PLUS
63984: PUSH
63985: LD_INT 0
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: LIST
63992: PUSH
63993: LD_VAR 0 1
63997: PUSH
63998: LD_INT 4
64000: PLUS
64001: PUSH
64002: LD_VAR 0 2
64006: PUSH
64007: LD_INT 4
64009: PLUS
64010: PUSH
64011: LD_INT 5
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: LIST
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: ST_TO_ADDR
// end ; 2 :
64026: GO 64585
64028: LD_INT 2
64030: DOUBLE
64031: EQUAL
64032: IFTRUE 64036
64034: GO 64165
64036: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64037: LD_ADDR_VAR 0 5
64041: PUSH
64042: LD_VAR 0 1
64046: PUSH
64047: LD_VAR 0 2
64051: PUSH
64052: LD_INT 3
64054: MINUS
64055: PUSH
64056: LD_INT 3
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: LIST
64063: PUSH
64064: LD_VAR 0 1
64068: PUSH
64069: LD_INT 4
64071: PLUS
64072: PUSH
64073: LD_VAR 0 2
64077: PUSH
64078: LD_INT 4
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: LIST
64085: PUSH
64086: LD_VAR 0 1
64090: PUSH
64091: LD_VAR 0 2
64095: PUSH
64096: LD_INT 4
64098: PLUS
64099: PUSH
64100: LD_INT 0
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: LIST
64107: PUSH
64108: LD_VAR 0 1
64112: PUSH
64113: LD_INT 3
64115: MINUS
64116: PUSH
64117: LD_VAR 0 2
64121: PUSH
64122: LD_INT 1
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: LIST
64129: PUSH
64130: LD_VAR 0 1
64134: PUSH
64135: LD_INT 4
64137: MINUS
64138: PUSH
64139: LD_VAR 0 2
64143: PUSH
64144: LD_INT 4
64146: MINUS
64147: PUSH
64148: LD_INT 2
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: LIST
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: ST_TO_ADDR
// end ; 3 :
64163: GO 64585
64165: LD_INT 3
64167: DOUBLE
64168: EQUAL
64169: IFTRUE 64173
64171: GO 64306
64173: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64174: LD_ADDR_VAR 0 5
64178: PUSH
64179: LD_VAR 0 1
64183: PUSH
64184: LD_INT 3
64186: PLUS
64187: PUSH
64188: LD_VAR 0 2
64192: PUSH
64193: LD_INT 4
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: LIST
64200: PUSH
64201: LD_VAR 0 1
64205: PUSH
64206: LD_INT 4
64208: PLUS
64209: PUSH
64210: LD_VAR 0 2
64214: PUSH
64215: LD_INT 4
64217: PLUS
64218: PUSH
64219: LD_INT 5
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: LIST
64226: PUSH
64227: LD_VAR 0 1
64231: PUSH
64232: LD_INT 4
64234: MINUS
64235: PUSH
64236: LD_VAR 0 2
64240: PUSH
64241: LD_INT 1
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: LIST
64248: PUSH
64249: LD_VAR 0 1
64253: PUSH
64254: LD_VAR 0 2
64258: PUSH
64259: LD_INT 4
64261: MINUS
64262: PUSH
64263: LD_INT 3
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: LIST
64270: PUSH
64271: LD_VAR 0 1
64275: PUSH
64276: LD_INT 3
64278: MINUS
64279: PUSH
64280: LD_VAR 0 2
64284: PUSH
64285: LD_INT 3
64287: MINUS
64288: PUSH
64289: LD_INT 2
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: LIST
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: ST_TO_ADDR
// end ; 4 :
64304: GO 64585
64306: LD_INT 4
64308: DOUBLE
64309: EQUAL
64310: IFTRUE 64314
64312: GO 64447
64314: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64315: LD_ADDR_VAR 0 5
64319: PUSH
64320: LD_VAR 0 1
64324: PUSH
64325: LD_VAR 0 2
64329: PUSH
64330: LD_INT 4
64332: PLUS
64333: PUSH
64334: LD_INT 0
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: LIST
64341: PUSH
64342: LD_VAR 0 1
64346: PUSH
64347: LD_INT 3
64349: PLUS
64350: PUSH
64351: LD_VAR 0 2
64355: PUSH
64356: LD_INT 3
64358: PLUS
64359: PUSH
64360: LD_INT 5
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: LIST
64367: PUSH
64368: LD_VAR 0 1
64372: PUSH
64373: LD_INT 4
64375: PLUS
64376: PUSH
64377: LD_VAR 0 2
64381: PUSH
64382: LD_INT 4
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: LIST
64389: PUSH
64390: LD_VAR 0 1
64394: PUSH
64395: LD_VAR 0 2
64399: PUSH
64400: LD_INT 3
64402: MINUS
64403: PUSH
64404: LD_INT 3
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: LIST
64411: PUSH
64412: LD_VAR 0 1
64416: PUSH
64417: LD_INT 4
64419: MINUS
64420: PUSH
64421: LD_VAR 0 2
64425: PUSH
64426: LD_INT 4
64428: MINUS
64429: PUSH
64430: LD_INT 2
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: LIST
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: ST_TO_ADDR
// end ; 5 :
64445: GO 64585
64447: LD_INT 5
64449: DOUBLE
64450: EQUAL
64451: IFTRUE 64455
64453: GO 64584
64455: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64456: LD_ADDR_VAR 0 5
64460: PUSH
64461: LD_VAR 0 1
64465: PUSH
64466: LD_INT 4
64468: MINUS
64469: PUSH
64470: LD_VAR 0 2
64474: PUSH
64475: LD_INT 1
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: LIST
64482: PUSH
64483: LD_VAR 0 1
64487: PUSH
64488: LD_VAR 0 2
64492: PUSH
64493: LD_INT 4
64495: MINUS
64496: PUSH
64497: LD_INT 3
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: LIST
64504: PUSH
64505: LD_VAR 0 1
64509: PUSH
64510: LD_INT 4
64512: PLUS
64513: PUSH
64514: LD_VAR 0 2
64518: PUSH
64519: LD_INT 4
64521: PLUS
64522: PUSH
64523: LD_INT 5
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: LIST
64530: PUSH
64531: LD_VAR 0 1
64535: PUSH
64536: LD_INT 3
64538: PLUS
64539: PUSH
64540: LD_VAR 0 2
64544: PUSH
64545: LD_INT 4
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: LIST
64552: PUSH
64553: LD_VAR 0 1
64557: PUSH
64558: LD_VAR 0 2
64562: PUSH
64563: LD_INT 3
64565: PLUS
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: LIST
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: ST_TO_ADDR
// end ; end ;
64582: GO 64585
64584: POP
// result := list ;
64585: LD_ADDR_VAR 0 4
64589: PUSH
64590: LD_VAR 0 5
64594: ST_TO_ADDR
// end ;
64595: LD_VAR 0 4
64599: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64600: LD_INT 0
64602: PPUSH
64603: PPUSH
64604: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64605: LD_VAR 0 1
64609: NOT
64610: PUSH
64611: LD_VAR 0 2
64615: PUSH
64616: LD_INT 1
64618: PUSH
64619: LD_INT 2
64621: PUSH
64622: LD_INT 3
64624: PUSH
64625: LD_INT 4
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: IN
64634: NOT
64635: OR
64636: IFFALSE 64640
// exit ;
64638: GO 64723
// tmp := [ ] ;
64640: LD_ADDR_VAR 0 5
64644: PUSH
64645: EMPTY
64646: ST_TO_ADDR
// for i in units do
64647: LD_ADDR_VAR 0 4
64651: PUSH
64652: LD_VAR 0 1
64656: PUSH
64657: FOR_IN
64658: IFFALSE 64692
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64660: LD_ADDR_VAR 0 5
64664: PUSH
64665: LD_VAR 0 5
64669: PPUSH
64670: LD_VAR 0 4
64674: PPUSH
64675: LD_VAR 0 2
64679: PPUSH
64680: CALL_OW 259
64684: PPUSH
64685: CALL 66083 0 2
64689: ST_TO_ADDR
64690: GO 64657
64692: POP
64693: POP
// if not tmp then
64694: LD_VAR 0 5
64698: NOT
64699: IFFALSE 64703
// exit ;
64701: GO 64723
// result := SortListByListDesc ( units , tmp ) ;
64703: LD_ADDR_VAR 0 3
64707: PUSH
64708: LD_VAR 0 1
64712: PPUSH
64713: LD_VAR 0 5
64717: PPUSH
64718: CALL_OW 77
64722: ST_TO_ADDR
// end ;
64723: LD_VAR 0 3
64727: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64728: LD_INT 0
64730: PPUSH
64731: PPUSH
64732: PPUSH
// result := false ;
64733: LD_ADDR_VAR 0 3
64737: PUSH
64738: LD_INT 0
64740: ST_TO_ADDR
// if not building then
64741: LD_VAR 0 2
64745: NOT
64746: IFFALSE 64750
// exit ;
64748: GO 64888
// x := GetX ( building ) ;
64750: LD_ADDR_VAR 0 4
64754: PUSH
64755: LD_VAR 0 2
64759: PPUSH
64760: CALL_OW 250
64764: ST_TO_ADDR
// y := GetY ( building ) ;
64765: LD_ADDR_VAR 0 5
64769: PUSH
64770: LD_VAR 0 2
64774: PPUSH
64775: CALL_OW 251
64779: ST_TO_ADDR
// if not x or not y then
64780: LD_VAR 0 4
64784: NOT
64785: PUSH
64786: LD_VAR 0 5
64790: NOT
64791: OR
64792: IFFALSE 64796
// exit ;
64794: GO 64888
// if GetTaskList ( unit ) then
64796: LD_VAR 0 1
64800: PPUSH
64801: CALL_OW 437
64805: IFFALSE 64888
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64807: LD_STRING e
64809: PUSH
64810: LD_VAR 0 1
64814: PPUSH
64815: CALL_OW 437
64819: PUSH
64820: LD_INT 1
64822: ARRAY
64823: PUSH
64824: LD_INT 1
64826: ARRAY
64827: EQUAL
64828: PUSH
64829: LD_VAR 0 4
64833: PUSH
64834: LD_VAR 0 1
64838: PPUSH
64839: CALL_OW 437
64843: PUSH
64844: LD_INT 1
64846: ARRAY
64847: PUSH
64848: LD_INT 2
64850: ARRAY
64851: EQUAL
64852: AND
64853: PUSH
64854: LD_VAR 0 5
64858: PUSH
64859: LD_VAR 0 1
64863: PPUSH
64864: CALL_OW 437
64868: PUSH
64869: LD_INT 1
64871: ARRAY
64872: PUSH
64873: LD_INT 3
64875: ARRAY
64876: EQUAL
64877: AND
64878: IFFALSE 64888
// result := true end ;
64880: LD_ADDR_VAR 0 3
64884: PUSH
64885: LD_INT 1
64887: ST_TO_ADDR
// end ;
64888: LD_VAR 0 3
64892: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64893: LD_INT 0
64895: PPUSH
// result := false ;
64896: LD_ADDR_VAR 0 4
64900: PUSH
64901: LD_INT 0
64903: ST_TO_ADDR
// if GetTaskList ( unit ) then
64904: LD_VAR 0 1
64908: PPUSH
64909: CALL_OW 437
64913: IFFALSE 64996
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64915: LD_STRING M
64917: PUSH
64918: LD_VAR 0 1
64922: PPUSH
64923: CALL_OW 437
64927: PUSH
64928: LD_INT 1
64930: ARRAY
64931: PUSH
64932: LD_INT 1
64934: ARRAY
64935: EQUAL
64936: PUSH
64937: LD_VAR 0 2
64941: PUSH
64942: LD_VAR 0 1
64946: PPUSH
64947: CALL_OW 437
64951: PUSH
64952: LD_INT 1
64954: ARRAY
64955: PUSH
64956: LD_INT 2
64958: ARRAY
64959: EQUAL
64960: AND
64961: PUSH
64962: LD_VAR 0 3
64966: PUSH
64967: LD_VAR 0 1
64971: PPUSH
64972: CALL_OW 437
64976: PUSH
64977: LD_INT 1
64979: ARRAY
64980: PUSH
64981: LD_INT 3
64983: ARRAY
64984: EQUAL
64985: AND
64986: IFFALSE 64996
// result := true ;
64988: LD_ADDR_VAR 0 4
64992: PUSH
64993: LD_INT 1
64995: ST_TO_ADDR
// end ; end ;
64996: LD_VAR 0 4
65000: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65001: LD_INT 0
65003: PPUSH
65004: PPUSH
65005: PPUSH
65006: PPUSH
// if not unit or not area then
65007: LD_VAR 0 1
65011: NOT
65012: PUSH
65013: LD_VAR 0 2
65017: NOT
65018: OR
65019: IFFALSE 65023
// exit ;
65021: GO 65186
// tmp := AreaToList ( area , i ) ;
65023: LD_ADDR_VAR 0 6
65027: PUSH
65028: LD_VAR 0 2
65032: PPUSH
65033: LD_VAR 0 5
65037: PPUSH
65038: CALL_OW 517
65042: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65043: LD_ADDR_VAR 0 5
65047: PUSH
65048: DOUBLE
65049: LD_INT 1
65051: DEC
65052: ST_TO_ADDR
65053: LD_VAR 0 6
65057: PUSH
65058: LD_INT 1
65060: ARRAY
65061: PUSH
65062: FOR_TO
65063: IFFALSE 65184
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65065: LD_ADDR_VAR 0 7
65069: PUSH
65070: LD_VAR 0 6
65074: PUSH
65075: LD_INT 1
65077: ARRAY
65078: PUSH
65079: LD_VAR 0 5
65083: ARRAY
65084: PUSH
65085: LD_VAR 0 6
65089: PUSH
65090: LD_INT 2
65092: ARRAY
65093: PUSH
65094: LD_VAR 0 5
65098: ARRAY
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
65104: LD_INT 92
65106: PUSH
65107: LD_VAR 0 7
65111: PUSH
65112: LD_INT 1
65114: ARRAY
65115: PUSH
65116: LD_VAR 0 7
65120: PUSH
65121: LD_INT 2
65123: ARRAY
65124: PUSH
65125: LD_INT 3
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: PPUSH
65134: CALL_OW 69
65138: PUSH
65139: LD_INT 0
65141: EQUAL
65142: IFFALSE 65182
// begin PlaceUnitArea ( unit , area , mode ) ;
65144: LD_VAR 0 1
65148: PPUSH
65149: LD_VAR 0 2
65153: PPUSH
65154: LD_VAR 0 3
65158: PPUSH
65159: CALL_OW 49
// result := IsPlaced ( unit ) ;
65163: LD_ADDR_VAR 0 4
65167: PUSH
65168: LD_VAR 0 1
65172: PPUSH
65173: CALL_OW 305
65177: ST_TO_ADDR
// exit ;
65178: POP
65179: POP
65180: GO 65186
// end ; end ;
65182: GO 65062
65184: POP
65185: POP
// end ;
65186: LD_VAR 0 4
65190: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65191: LD_INT 0
65193: PPUSH
65194: PPUSH
65195: PPUSH
// if not side or side > 8 then
65196: LD_VAR 0 1
65200: NOT
65201: PUSH
65202: LD_VAR 0 1
65206: PUSH
65207: LD_INT 8
65209: GREATER
65210: OR
65211: IFFALSE 65215
// exit ;
65213: GO 65402
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65215: LD_ADDR_VAR 0 4
65219: PUSH
65220: LD_INT 22
65222: PUSH
65223: LD_VAR 0 1
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 21
65234: PUSH
65235: LD_INT 3
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PPUSH
65246: CALL_OW 69
65250: ST_TO_ADDR
// if not tmp then
65251: LD_VAR 0 4
65255: NOT
65256: IFFALSE 65260
// exit ;
65258: GO 65402
// enable_addtolog := true ;
65260: LD_ADDR_OWVAR 81
65264: PUSH
65265: LD_INT 1
65267: ST_TO_ADDR
// AddToLog ( [ ) ;
65268: LD_STRING [
65270: PPUSH
65271: CALL_OW 561
// for i in tmp do
65275: LD_ADDR_VAR 0 3
65279: PUSH
65280: LD_VAR 0 4
65284: PUSH
65285: FOR_IN
65286: IFFALSE 65393
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65288: LD_STRING [
65290: PUSH
65291: LD_VAR 0 3
65295: PPUSH
65296: CALL_OW 266
65300: STR
65301: PUSH
65302: LD_STRING , 
65304: STR
65305: PUSH
65306: LD_VAR 0 3
65310: PPUSH
65311: CALL_OW 250
65315: STR
65316: PUSH
65317: LD_STRING , 
65319: STR
65320: PUSH
65321: LD_VAR 0 3
65325: PPUSH
65326: CALL_OW 251
65330: STR
65331: PUSH
65332: LD_STRING , 
65334: STR
65335: PUSH
65336: LD_VAR 0 3
65340: PPUSH
65341: CALL_OW 254
65345: STR
65346: PUSH
65347: LD_STRING , 
65349: STR
65350: PUSH
65351: LD_VAR 0 3
65355: PPUSH
65356: LD_INT 1
65358: PPUSH
65359: CALL_OW 268
65363: STR
65364: PUSH
65365: LD_STRING , 
65367: STR
65368: PUSH
65369: LD_VAR 0 3
65373: PPUSH
65374: LD_INT 2
65376: PPUSH
65377: CALL_OW 268
65381: STR
65382: PUSH
65383: LD_STRING ],
65385: STR
65386: PPUSH
65387: CALL_OW 561
// end ;
65391: GO 65285
65393: POP
65394: POP
// AddToLog ( ]; ) ;
65395: LD_STRING ];
65397: PPUSH
65398: CALL_OW 561
// end ;
65402: LD_VAR 0 2
65406: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65407: LD_INT 0
65409: PPUSH
65410: PPUSH
65411: PPUSH
65412: PPUSH
65413: PPUSH
// if not area or not rate or not max then
65414: LD_VAR 0 1
65418: NOT
65419: PUSH
65420: LD_VAR 0 2
65424: NOT
65425: OR
65426: PUSH
65427: LD_VAR 0 4
65431: NOT
65432: OR
65433: IFFALSE 65437
// exit ;
65435: GO 65626
// while 1 do
65437: LD_INT 1
65439: IFFALSE 65626
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65441: LD_ADDR_VAR 0 9
65445: PUSH
65446: LD_VAR 0 1
65450: PPUSH
65451: LD_INT 1
65453: PPUSH
65454: CALL_OW 287
65458: PUSH
65459: LD_INT 10
65461: MUL
65462: ST_TO_ADDR
// r := rate / 10 ;
65463: LD_ADDR_VAR 0 7
65467: PUSH
65468: LD_VAR 0 2
65472: PUSH
65473: LD_INT 10
65475: DIVREAL
65476: ST_TO_ADDR
// time := 1 1$00 ;
65477: LD_ADDR_VAR 0 8
65481: PUSH
65482: LD_INT 2100
65484: ST_TO_ADDR
// if amount < min then
65485: LD_VAR 0 9
65489: PUSH
65490: LD_VAR 0 3
65494: LESS
65495: IFFALSE 65513
// r := r * 2 else
65497: LD_ADDR_VAR 0 7
65501: PUSH
65502: LD_VAR 0 7
65506: PUSH
65507: LD_INT 2
65509: MUL
65510: ST_TO_ADDR
65511: GO 65539
// if amount > max then
65513: LD_VAR 0 9
65517: PUSH
65518: LD_VAR 0 4
65522: GREATER
65523: IFFALSE 65539
// r := r / 2 ;
65525: LD_ADDR_VAR 0 7
65529: PUSH
65530: LD_VAR 0 7
65534: PUSH
65535: LD_INT 2
65537: DIVREAL
65538: ST_TO_ADDR
// time := time / r ;
65539: LD_ADDR_VAR 0 8
65543: PUSH
65544: LD_VAR 0 8
65548: PUSH
65549: LD_VAR 0 7
65553: DIVREAL
65554: ST_TO_ADDR
// if time < 0 then
65555: LD_VAR 0 8
65559: PUSH
65560: LD_INT 0
65562: LESS
65563: IFFALSE 65580
// time := time * - 1 ;
65565: LD_ADDR_VAR 0 8
65569: PUSH
65570: LD_VAR 0 8
65574: PUSH
65575: LD_INT 1
65577: NEG
65578: MUL
65579: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65580: LD_VAR 0 8
65584: PUSH
65585: LD_INT 35
65587: PPUSH
65588: LD_INT 875
65590: PPUSH
65591: CALL_OW 12
65595: PLUS
65596: PPUSH
65597: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65601: LD_INT 1
65603: PPUSH
65604: LD_INT 5
65606: PPUSH
65607: CALL_OW 12
65611: PPUSH
65612: LD_VAR 0 1
65616: PPUSH
65617: LD_INT 1
65619: PPUSH
65620: CALL_OW 55
// end ;
65624: GO 65437
// end ;
65626: LD_VAR 0 5
65630: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65631: LD_INT 0
65633: PPUSH
65634: PPUSH
65635: PPUSH
65636: PPUSH
65637: PPUSH
65638: PPUSH
65639: PPUSH
65640: PPUSH
// if not turrets or not factories then
65641: LD_VAR 0 1
65645: NOT
65646: PUSH
65647: LD_VAR 0 2
65651: NOT
65652: OR
65653: IFFALSE 65657
// exit ;
65655: GO 65964
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65657: LD_ADDR_VAR 0 10
65661: PUSH
65662: LD_INT 5
65664: PUSH
65665: LD_INT 6
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 2
65674: PUSH
65675: LD_INT 4
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 3
65684: PUSH
65685: LD_INT 5
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 24
65699: PUSH
65700: LD_INT 25
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 23
65709: PUSH
65710: LD_INT 27
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 42
65723: PUSH
65724: LD_INT 43
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 44
65733: PUSH
65734: LD_INT 46
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 45
65743: PUSH
65744: LD_INT 47
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: LIST
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: LIST
65760: ST_TO_ADDR
// result := [ ] ;
65761: LD_ADDR_VAR 0 3
65765: PUSH
65766: EMPTY
65767: ST_TO_ADDR
// for i in turrets do
65768: LD_ADDR_VAR 0 4
65772: PUSH
65773: LD_VAR 0 1
65777: PUSH
65778: FOR_IN
65779: IFFALSE 65962
// begin nat := GetNation ( i ) ;
65781: LD_ADDR_VAR 0 7
65785: PUSH
65786: LD_VAR 0 4
65790: PPUSH
65791: CALL_OW 248
65795: ST_TO_ADDR
// weapon := 0 ;
65796: LD_ADDR_VAR 0 8
65800: PUSH
65801: LD_INT 0
65803: ST_TO_ADDR
// if not nat then
65804: LD_VAR 0 7
65808: NOT
65809: IFFALSE 65813
// continue ;
65811: GO 65778
// for j in list [ nat ] do
65813: LD_ADDR_VAR 0 5
65817: PUSH
65818: LD_VAR 0 10
65822: PUSH
65823: LD_VAR 0 7
65827: ARRAY
65828: PUSH
65829: FOR_IN
65830: IFFALSE 65871
// if GetBWeapon ( i ) = j [ 1 ] then
65832: LD_VAR 0 4
65836: PPUSH
65837: CALL_OW 269
65841: PUSH
65842: LD_VAR 0 5
65846: PUSH
65847: LD_INT 1
65849: ARRAY
65850: EQUAL
65851: IFFALSE 65869
// begin weapon := j [ 2 ] ;
65853: LD_ADDR_VAR 0 8
65857: PUSH
65858: LD_VAR 0 5
65862: PUSH
65863: LD_INT 2
65865: ARRAY
65866: ST_TO_ADDR
// break ;
65867: GO 65871
// end ;
65869: GO 65829
65871: POP
65872: POP
// if not weapon then
65873: LD_VAR 0 8
65877: NOT
65878: IFFALSE 65882
// continue ;
65880: GO 65778
// for k in factories do
65882: LD_ADDR_VAR 0 6
65886: PUSH
65887: LD_VAR 0 2
65891: PUSH
65892: FOR_IN
65893: IFFALSE 65958
// begin weapons := AvailableWeaponList ( k ) ;
65895: LD_ADDR_VAR 0 9
65899: PUSH
65900: LD_VAR 0 6
65904: PPUSH
65905: CALL_OW 478
65909: ST_TO_ADDR
// if not weapons then
65910: LD_VAR 0 9
65914: NOT
65915: IFFALSE 65919
// continue ;
65917: GO 65892
// if weapon in weapons then
65919: LD_VAR 0 8
65923: PUSH
65924: LD_VAR 0 9
65928: IN
65929: IFFALSE 65956
// begin result := [ i , weapon ] ;
65931: LD_ADDR_VAR 0 3
65935: PUSH
65936: LD_VAR 0 4
65940: PUSH
65941: LD_VAR 0 8
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: ST_TO_ADDR
// exit ;
65950: POP
65951: POP
65952: POP
65953: POP
65954: GO 65964
// end ; end ;
65956: GO 65892
65958: POP
65959: POP
// end ;
65960: GO 65778
65962: POP
65963: POP
// end ;
65964: LD_VAR 0 3
65968: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65969: LD_INT 0
65971: PPUSH
// if not side or side > 8 then
65972: LD_VAR 0 3
65976: NOT
65977: PUSH
65978: LD_VAR 0 3
65982: PUSH
65983: LD_INT 8
65985: GREATER
65986: OR
65987: IFFALSE 65991
// exit ;
65989: GO 66050
// if not range then
65991: LD_VAR 0 4
65995: NOT
65996: IFFALSE 66007
// range := - 12 ;
65998: LD_ADDR_VAR 0 4
66002: PUSH
66003: LD_INT 12
66005: NEG
66006: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66007: LD_VAR 0 1
66011: PPUSH
66012: LD_VAR 0 2
66016: PPUSH
66017: LD_VAR 0 3
66021: PPUSH
66022: LD_VAR 0 4
66026: PPUSH
66027: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66031: LD_VAR 0 1
66035: PPUSH
66036: LD_VAR 0 2
66040: PPUSH
66041: LD_VAR 0 3
66045: PPUSH
66046: CALL_OW 331
// end ;
66050: LD_VAR 0 5
66054: RET
// export function Video ( mode ) ; begin
66055: LD_INT 0
66057: PPUSH
// ingame_video = mode ;
66058: LD_ADDR_OWVAR 52
66062: PUSH
66063: LD_VAR 0 1
66067: ST_TO_ADDR
// interface_hidden = mode ;
66068: LD_ADDR_OWVAR 54
66072: PUSH
66073: LD_VAR 0 1
66077: ST_TO_ADDR
// end ;
66078: LD_VAR 0 2
66082: RET
// export function Join ( array , element ) ; begin
66083: LD_INT 0
66085: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66086: LD_ADDR_VAR 0 3
66090: PUSH
66091: LD_VAR 0 1
66095: PPUSH
66096: LD_VAR 0 1
66100: PUSH
66101: LD_INT 1
66103: PLUS
66104: PPUSH
66105: LD_VAR 0 2
66109: PPUSH
66110: CALL_OW 1
66114: ST_TO_ADDR
// end ;
66115: LD_VAR 0 3
66119: RET
// export function JoinUnion ( array , element ) ; begin
66120: LD_INT 0
66122: PPUSH
// result := array union element ;
66123: LD_ADDR_VAR 0 3
66127: PUSH
66128: LD_VAR 0 1
66132: PUSH
66133: LD_VAR 0 2
66137: UNION
66138: ST_TO_ADDR
// end ;
66139: LD_VAR 0 3
66143: RET
// export function GetBehemoths ( side ) ; begin
66144: LD_INT 0
66146: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66147: LD_ADDR_VAR 0 2
66151: PUSH
66152: LD_INT 22
66154: PUSH
66155: LD_VAR 0 1
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 31
66166: PUSH
66167: LD_INT 25
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PPUSH
66178: CALL_OW 69
66182: ST_TO_ADDR
// end ;
66183: LD_VAR 0 2
66187: RET
// export function Shuffle ( array ) ; var i , index ; begin
66188: LD_INT 0
66190: PPUSH
66191: PPUSH
66192: PPUSH
// result := [ ] ;
66193: LD_ADDR_VAR 0 2
66197: PUSH
66198: EMPTY
66199: ST_TO_ADDR
// if not array then
66200: LD_VAR 0 1
66204: NOT
66205: IFFALSE 66209
// exit ;
66207: GO 66308
// Randomize ;
66209: CALL_OW 10
// for i = array downto 1 do
66213: LD_ADDR_VAR 0 3
66217: PUSH
66218: DOUBLE
66219: LD_VAR 0 1
66223: INC
66224: ST_TO_ADDR
66225: LD_INT 1
66227: PUSH
66228: FOR_DOWNTO
66229: IFFALSE 66306
// begin index := rand ( 1 , array ) ;
66231: LD_ADDR_VAR 0 4
66235: PUSH
66236: LD_INT 1
66238: PPUSH
66239: LD_VAR 0 1
66243: PPUSH
66244: CALL_OW 12
66248: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66249: LD_ADDR_VAR 0 2
66253: PUSH
66254: LD_VAR 0 2
66258: PPUSH
66259: LD_VAR 0 2
66263: PUSH
66264: LD_INT 1
66266: PLUS
66267: PPUSH
66268: LD_VAR 0 1
66272: PUSH
66273: LD_VAR 0 4
66277: ARRAY
66278: PPUSH
66279: CALL_OW 2
66283: ST_TO_ADDR
// array := Delete ( array , index ) ;
66284: LD_ADDR_VAR 0 1
66288: PUSH
66289: LD_VAR 0 1
66293: PPUSH
66294: LD_VAR 0 4
66298: PPUSH
66299: CALL_OW 3
66303: ST_TO_ADDR
// end ;
66304: GO 66228
66306: POP
66307: POP
// end ;
66308: LD_VAR 0 2
66312: RET
// export function GetBaseMaterials ( base ) ; begin
66313: LD_INT 0
66315: PPUSH
// result := [ 0 , 0 , 0 ] ;
66316: LD_ADDR_VAR 0 2
66320: PUSH
66321: LD_INT 0
66323: PUSH
66324: LD_INT 0
66326: PUSH
66327: LD_INT 0
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: LIST
66334: ST_TO_ADDR
// if not base then
66335: LD_VAR 0 1
66339: NOT
66340: IFFALSE 66344
// exit ;
66342: GO 66393
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66344: LD_ADDR_VAR 0 2
66348: PUSH
66349: LD_VAR 0 1
66353: PPUSH
66354: LD_INT 1
66356: PPUSH
66357: CALL_OW 275
66361: PUSH
66362: LD_VAR 0 1
66366: PPUSH
66367: LD_INT 2
66369: PPUSH
66370: CALL_OW 275
66374: PUSH
66375: LD_VAR 0 1
66379: PPUSH
66380: LD_INT 3
66382: PPUSH
66383: CALL_OW 275
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: LIST
66392: ST_TO_ADDR
// end ;
66393: LD_VAR 0 2
66397: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66398: LD_INT 0
66400: PPUSH
66401: PPUSH
// result := array ;
66402: LD_ADDR_VAR 0 3
66406: PUSH
66407: LD_VAR 0 1
66411: ST_TO_ADDR
// if size >= result then
66412: LD_VAR 0 2
66416: PUSH
66417: LD_VAR 0 3
66421: GREATEREQUAL
66422: IFFALSE 66426
// exit ;
66424: GO 66476
// if size then
66426: LD_VAR 0 2
66430: IFFALSE 66476
// for i := array downto size do
66432: LD_ADDR_VAR 0 4
66436: PUSH
66437: DOUBLE
66438: LD_VAR 0 1
66442: INC
66443: ST_TO_ADDR
66444: LD_VAR 0 2
66448: PUSH
66449: FOR_DOWNTO
66450: IFFALSE 66474
// result := Delete ( result , result ) ;
66452: LD_ADDR_VAR 0 3
66456: PUSH
66457: LD_VAR 0 3
66461: PPUSH
66462: LD_VAR 0 3
66466: PPUSH
66467: CALL_OW 3
66471: ST_TO_ADDR
66472: GO 66449
66474: POP
66475: POP
// end ;
66476: LD_VAR 0 3
66480: RET
// export function ComExit ( unit ) ; var tmp ; begin
66481: LD_INT 0
66483: PPUSH
66484: PPUSH
// if not IsInUnit ( unit ) then
66485: LD_VAR 0 1
66489: PPUSH
66490: CALL_OW 310
66494: NOT
66495: IFFALSE 66499
// exit ;
66497: GO 66559
// tmp := IsInUnit ( unit ) ;
66499: LD_ADDR_VAR 0 3
66503: PUSH
66504: LD_VAR 0 1
66508: PPUSH
66509: CALL_OW 310
66513: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66514: LD_VAR 0 3
66518: PPUSH
66519: CALL_OW 247
66523: PUSH
66524: LD_INT 2
66526: EQUAL
66527: IFFALSE 66540
// ComExitVehicle ( unit ) else
66529: LD_VAR 0 1
66533: PPUSH
66534: CALL_OW 121
66538: GO 66549
// ComExitBuilding ( unit ) ;
66540: LD_VAR 0 1
66544: PPUSH
66545: CALL_OW 122
// result := tmp ;
66549: LD_ADDR_VAR 0 2
66553: PUSH
66554: LD_VAR 0 3
66558: ST_TO_ADDR
// end ;
66559: LD_VAR 0 2
66563: RET
// export function ComExitAll ( units ) ; var i ; begin
66564: LD_INT 0
66566: PPUSH
66567: PPUSH
// if not units then
66568: LD_VAR 0 1
66572: NOT
66573: IFFALSE 66577
// exit ;
66575: GO 66603
// for i in units do
66577: LD_ADDR_VAR 0 3
66581: PUSH
66582: LD_VAR 0 1
66586: PUSH
66587: FOR_IN
66588: IFFALSE 66601
// ComExit ( i ) ;
66590: LD_VAR 0 3
66594: PPUSH
66595: CALL 66481 0 1
66599: GO 66587
66601: POP
66602: POP
// end ;
66603: LD_VAR 0 2
66607: RET
// export function ResetHc ; begin
66608: LD_INT 0
66610: PPUSH
// InitHc ;
66611: CALL_OW 19
// hc_importance := 0 ;
66615: LD_ADDR_OWVAR 32
66619: PUSH
66620: LD_INT 0
66622: ST_TO_ADDR
// end ;
66623: LD_VAR 0 1
66627: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66628: LD_INT 0
66630: PPUSH
66631: PPUSH
66632: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66633: LD_ADDR_VAR 0 6
66637: PUSH
66638: LD_VAR 0 1
66642: PUSH
66643: LD_VAR 0 3
66647: PLUS
66648: PUSH
66649: LD_INT 2
66651: DIV
66652: ST_TO_ADDR
// if _x < 0 then
66653: LD_VAR 0 6
66657: PUSH
66658: LD_INT 0
66660: LESS
66661: IFFALSE 66678
// _x := _x * - 1 ;
66663: LD_ADDR_VAR 0 6
66667: PUSH
66668: LD_VAR 0 6
66672: PUSH
66673: LD_INT 1
66675: NEG
66676: MUL
66677: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66678: LD_ADDR_VAR 0 7
66682: PUSH
66683: LD_VAR 0 2
66687: PUSH
66688: LD_VAR 0 4
66692: PLUS
66693: PUSH
66694: LD_INT 2
66696: DIV
66697: ST_TO_ADDR
// if _y < 0 then
66698: LD_VAR 0 7
66702: PUSH
66703: LD_INT 0
66705: LESS
66706: IFFALSE 66723
// _y := _y * - 1 ;
66708: LD_ADDR_VAR 0 7
66712: PUSH
66713: LD_VAR 0 7
66717: PUSH
66718: LD_INT 1
66720: NEG
66721: MUL
66722: ST_TO_ADDR
// result := [ _x , _y ] ;
66723: LD_ADDR_VAR 0 5
66727: PUSH
66728: LD_VAR 0 6
66732: PUSH
66733: LD_VAR 0 7
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: ST_TO_ADDR
// end ;
66742: LD_VAR 0 5
66746: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66747: LD_INT 0
66749: PPUSH
66750: PPUSH
66751: PPUSH
66752: PPUSH
// task := GetTaskList ( unit ) ;
66753: LD_ADDR_VAR 0 7
66757: PUSH
66758: LD_VAR 0 1
66762: PPUSH
66763: CALL_OW 437
66767: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66768: LD_VAR 0 7
66772: NOT
66773: PUSH
66774: LD_VAR 0 1
66778: PPUSH
66779: LD_VAR 0 2
66783: PPUSH
66784: CALL_OW 308
66788: NOT
66789: AND
66790: IFFALSE 66794
// exit ;
66792: GO 66912
// if IsInArea ( unit , area ) then
66794: LD_VAR 0 1
66798: PPUSH
66799: LD_VAR 0 2
66803: PPUSH
66804: CALL_OW 308
66808: IFFALSE 66826
// begin ComMoveToArea ( unit , goAway ) ;
66810: LD_VAR 0 1
66814: PPUSH
66815: LD_VAR 0 3
66819: PPUSH
66820: CALL_OW 113
// exit ;
66824: GO 66912
// end ; if task [ 1 ] [ 1 ] <> M then
66826: LD_VAR 0 7
66830: PUSH
66831: LD_INT 1
66833: ARRAY
66834: PUSH
66835: LD_INT 1
66837: ARRAY
66838: PUSH
66839: LD_STRING M
66841: NONEQUAL
66842: IFFALSE 66846
// exit ;
66844: GO 66912
// x := task [ 1 ] [ 2 ] ;
66846: LD_ADDR_VAR 0 5
66850: PUSH
66851: LD_VAR 0 7
66855: PUSH
66856: LD_INT 1
66858: ARRAY
66859: PUSH
66860: LD_INT 2
66862: ARRAY
66863: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66864: LD_ADDR_VAR 0 6
66868: PUSH
66869: LD_VAR 0 7
66873: PUSH
66874: LD_INT 1
66876: ARRAY
66877: PUSH
66878: LD_INT 3
66880: ARRAY
66881: ST_TO_ADDR
// if InArea ( x , y , area ) then
66882: LD_VAR 0 5
66886: PPUSH
66887: LD_VAR 0 6
66891: PPUSH
66892: LD_VAR 0 2
66896: PPUSH
66897: CALL_OW 309
66901: IFFALSE 66912
// ComStop ( unit ) ;
66903: LD_VAR 0 1
66907: PPUSH
66908: CALL_OW 141
// end ;
66912: LD_VAR 0 4
66916: RET
// export function Abs ( value ) ; begin
66917: LD_INT 0
66919: PPUSH
// result := value ;
66920: LD_ADDR_VAR 0 2
66924: PUSH
66925: LD_VAR 0 1
66929: ST_TO_ADDR
// if value < 0 then
66930: LD_VAR 0 1
66934: PUSH
66935: LD_INT 0
66937: LESS
66938: IFFALSE 66955
// result := value * - 1 ;
66940: LD_ADDR_VAR 0 2
66944: PUSH
66945: LD_VAR 0 1
66949: PUSH
66950: LD_INT 1
66952: NEG
66953: MUL
66954: ST_TO_ADDR
// end ;
66955: LD_VAR 0 2
66959: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66960: LD_INT 0
66962: PPUSH
66963: PPUSH
66964: PPUSH
66965: PPUSH
66966: PPUSH
66967: PPUSH
66968: PPUSH
66969: PPUSH
// if not unit or not building then
66970: LD_VAR 0 1
66974: NOT
66975: PUSH
66976: LD_VAR 0 2
66980: NOT
66981: OR
66982: IFFALSE 66986
// exit ;
66984: GO 67212
// x := GetX ( building ) ;
66986: LD_ADDR_VAR 0 4
66990: PUSH
66991: LD_VAR 0 2
66995: PPUSH
66996: CALL_OW 250
67000: ST_TO_ADDR
// y := GetY ( building ) ;
67001: LD_ADDR_VAR 0 6
67005: PUSH
67006: LD_VAR 0 2
67010: PPUSH
67011: CALL_OW 251
67015: ST_TO_ADDR
// d := GetDir ( building ) ;
67016: LD_ADDR_VAR 0 8
67020: PUSH
67021: LD_VAR 0 2
67025: PPUSH
67026: CALL_OW 254
67030: ST_TO_ADDR
// r := 4 ;
67031: LD_ADDR_VAR 0 9
67035: PUSH
67036: LD_INT 4
67038: ST_TO_ADDR
// for i := 1 to 5 do
67039: LD_ADDR_VAR 0 10
67043: PUSH
67044: DOUBLE
67045: LD_INT 1
67047: DEC
67048: ST_TO_ADDR
67049: LD_INT 5
67051: PUSH
67052: FOR_TO
67053: IFFALSE 67210
// begin _x := ShiftX ( x , d , r + i ) ;
67055: LD_ADDR_VAR 0 5
67059: PUSH
67060: LD_VAR 0 4
67064: PPUSH
67065: LD_VAR 0 8
67069: PPUSH
67070: LD_VAR 0 9
67074: PUSH
67075: LD_VAR 0 10
67079: PLUS
67080: PPUSH
67081: CALL_OW 272
67085: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67086: LD_ADDR_VAR 0 7
67090: PUSH
67091: LD_VAR 0 6
67095: PPUSH
67096: LD_VAR 0 8
67100: PPUSH
67101: LD_VAR 0 9
67105: PUSH
67106: LD_VAR 0 10
67110: PLUS
67111: PPUSH
67112: CALL_OW 273
67116: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67117: LD_VAR 0 5
67121: PPUSH
67122: LD_VAR 0 7
67126: PPUSH
67127: CALL_OW 488
67131: PUSH
67132: LD_VAR 0 5
67136: PPUSH
67137: LD_VAR 0 7
67141: PPUSH
67142: CALL_OW 428
67146: PPUSH
67147: CALL_OW 247
67151: PUSH
67152: LD_INT 3
67154: PUSH
67155: LD_INT 2
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: IN
67162: NOT
67163: AND
67164: IFFALSE 67208
// begin ComMoveXY ( unit , _x , _y ) ;
67166: LD_VAR 0 1
67170: PPUSH
67171: LD_VAR 0 5
67175: PPUSH
67176: LD_VAR 0 7
67180: PPUSH
67181: CALL_OW 111
// result := [ _x , _y ] ;
67185: LD_ADDR_VAR 0 3
67189: PUSH
67190: LD_VAR 0 5
67194: PUSH
67195: LD_VAR 0 7
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: ST_TO_ADDR
// exit ;
67204: POP
67205: POP
67206: GO 67212
// end ; end ;
67208: GO 67052
67210: POP
67211: POP
// end ;
67212: LD_VAR 0 3
67216: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67217: LD_INT 0
67219: PPUSH
67220: PPUSH
67221: PPUSH
// result := 0 ;
67222: LD_ADDR_VAR 0 3
67226: PUSH
67227: LD_INT 0
67229: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67230: LD_VAR 0 1
67234: PUSH
67235: LD_INT 0
67237: LESS
67238: PUSH
67239: LD_VAR 0 1
67243: PUSH
67244: LD_INT 8
67246: GREATER
67247: OR
67248: PUSH
67249: LD_VAR 0 2
67253: PUSH
67254: LD_INT 0
67256: LESS
67257: OR
67258: PUSH
67259: LD_VAR 0 2
67263: PUSH
67264: LD_INT 8
67266: GREATER
67267: OR
67268: IFFALSE 67272
// exit ;
67270: GO 67347
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67272: LD_ADDR_VAR 0 4
67276: PUSH
67277: LD_INT 22
67279: PUSH
67280: LD_VAR 0 2
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PPUSH
67289: CALL_OW 69
67293: PUSH
67294: FOR_IN
67295: IFFALSE 67345
// begin un := UnitShoot ( i ) ;
67297: LD_ADDR_VAR 0 5
67301: PUSH
67302: LD_VAR 0 4
67306: PPUSH
67307: CALL_OW 504
67311: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67312: LD_VAR 0 5
67316: PPUSH
67317: CALL_OW 255
67321: PUSH
67322: LD_VAR 0 1
67326: EQUAL
67327: IFFALSE 67343
// begin result := un ;
67329: LD_ADDR_VAR 0 3
67333: PUSH
67334: LD_VAR 0 5
67338: ST_TO_ADDR
// exit ;
67339: POP
67340: POP
67341: GO 67347
// end ; end ;
67343: GO 67294
67345: POP
67346: POP
// end ;
67347: LD_VAR 0 3
67351: RET
// export function GetCargoBay ( units ) ; begin
67352: LD_INT 0
67354: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67355: LD_ADDR_VAR 0 2
67359: PUSH
67360: LD_VAR 0 1
67364: PPUSH
67365: LD_INT 2
67367: PUSH
67368: LD_INT 34
67370: PUSH
67371: LD_INT 12
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 34
67380: PUSH
67381: LD_INT 51
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 34
67390: PUSH
67391: LD_INT 32
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 34
67400: PUSH
67401: LD_INT 89
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: PPUSH
67415: CALL_OW 72
67419: ST_TO_ADDR
// end ;
67420: LD_VAR 0 2
67424: RET
// export function Negate ( value ) ; begin
67425: LD_INT 0
67427: PPUSH
// result := not value ;
67428: LD_ADDR_VAR 0 2
67432: PUSH
67433: LD_VAR 0 1
67437: NOT
67438: ST_TO_ADDR
// end ;
67439: LD_VAR 0 2
67443: RET
// export function Inc ( value ) ; begin
67444: LD_INT 0
67446: PPUSH
// result := value + 1 ;
67447: LD_ADDR_VAR 0 2
67451: PUSH
67452: LD_VAR 0 1
67456: PUSH
67457: LD_INT 1
67459: PLUS
67460: ST_TO_ADDR
// end ;
67461: LD_VAR 0 2
67465: RET
// export function Dec ( value ) ; begin
67466: LD_INT 0
67468: PPUSH
// result := value - 1 ;
67469: LD_ADDR_VAR 0 2
67473: PUSH
67474: LD_VAR 0 1
67478: PUSH
67479: LD_INT 1
67481: MINUS
67482: ST_TO_ADDR
// end ;
67483: LD_VAR 0 2
67487: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67488: LD_INT 0
67490: PPUSH
67491: PPUSH
67492: PPUSH
67493: PPUSH
67494: PPUSH
67495: PPUSH
67496: PPUSH
67497: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67498: LD_VAR 0 1
67502: PPUSH
67503: LD_VAR 0 2
67507: PPUSH
67508: CALL_OW 488
67512: NOT
67513: PUSH
67514: LD_VAR 0 3
67518: PPUSH
67519: LD_VAR 0 4
67523: PPUSH
67524: CALL_OW 488
67528: NOT
67529: OR
67530: IFFALSE 67543
// begin result := - 1 ;
67532: LD_ADDR_VAR 0 5
67536: PUSH
67537: LD_INT 1
67539: NEG
67540: ST_TO_ADDR
// exit ;
67541: GO 67778
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67543: LD_ADDR_VAR 0 12
67547: PUSH
67548: LD_VAR 0 1
67552: PPUSH
67553: LD_VAR 0 2
67557: PPUSH
67558: LD_VAR 0 3
67562: PPUSH
67563: LD_VAR 0 4
67567: PPUSH
67568: CALL 66628 0 4
67572: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67573: LD_ADDR_VAR 0 11
67577: PUSH
67578: LD_VAR 0 1
67582: PPUSH
67583: LD_VAR 0 2
67587: PPUSH
67588: LD_VAR 0 12
67592: PUSH
67593: LD_INT 1
67595: ARRAY
67596: PPUSH
67597: LD_VAR 0 12
67601: PUSH
67602: LD_INT 2
67604: ARRAY
67605: PPUSH
67606: CALL_OW 298
67610: ST_TO_ADDR
// distance := 9999 ;
67611: LD_ADDR_VAR 0 10
67615: PUSH
67616: LD_INT 9999
67618: ST_TO_ADDR
// for i := 0 to 5 do
67619: LD_ADDR_VAR 0 6
67623: PUSH
67624: DOUBLE
67625: LD_INT 0
67627: DEC
67628: ST_TO_ADDR
67629: LD_INT 5
67631: PUSH
67632: FOR_TO
67633: IFFALSE 67776
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67635: LD_ADDR_VAR 0 7
67639: PUSH
67640: LD_VAR 0 1
67644: PPUSH
67645: LD_VAR 0 6
67649: PPUSH
67650: LD_VAR 0 11
67654: PPUSH
67655: CALL_OW 272
67659: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67660: LD_ADDR_VAR 0 8
67664: PUSH
67665: LD_VAR 0 2
67669: PPUSH
67670: LD_VAR 0 6
67674: PPUSH
67675: LD_VAR 0 11
67679: PPUSH
67680: CALL_OW 273
67684: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67685: LD_VAR 0 7
67689: PPUSH
67690: LD_VAR 0 8
67694: PPUSH
67695: CALL_OW 488
67699: NOT
67700: IFFALSE 67704
// continue ;
67702: GO 67632
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67704: LD_ADDR_VAR 0 9
67708: PUSH
67709: LD_VAR 0 12
67713: PUSH
67714: LD_INT 1
67716: ARRAY
67717: PPUSH
67718: LD_VAR 0 12
67722: PUSH
67723: LD_INT 2
67725: ARRAY
67726: PPUSH
67727: LD_VAR 0 7
67731: PPUSH
67732: LD_VAR 0 8
67736: PPUSH
67737: CALL_OW 298
67741: ST_TO_ADDR
// if tmp < distance then
67742: LD_VAR 0 9
67746: PUSH
67747: LD_VAR 0 10
67751: LESS
67752: IFFALSE 67774
// begin result := i ;
67754: LD_ADDR_VAR 0 5
67758: PUSH
67759: LD_VAR 0 6
67763: ST_TO_ADDR
// distance := tmp ;
67764: LD_ADDR_VAR 0 10
67768: PUSH
67769: LD_VAR 0 9
67773: ST_TO_ADDR
// end ; end ;
67774: GO 67632
67776: POP
67777: POP
// end ;
67778: LD_VAR 0 5
67782: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67783: LD_INT 0
67785: PPUSH
67786: PPUSH
// if not driver or not IsInUnit ( driver ) then
67787: LD_VAR 0 1
67791: NOT
67792: PUSH
67793: LD_VAR 0 1
67797: PPUSH
67798: CALL_OW 310
67802: NOT
67803: OR
67804: IFFALSE 67808
// exit ;
67806: GO 67898
// vehicle := IsInUnit ( driver ) ;
67808: LD_ADDR_VAR 0 3
67812: PUSH
67813: LD_VAR 0 1
67817: PPUSH
67818: CALL_OW 310
67822: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67823: LD_VAR 0 1
67827: PPUSH
67828: LD_STRING \
67830: PUSH
67831: LD_INT 0
67833: PUSH
67834: LD_INT 0
67836: PUSH
67837: LD_INT 0
67839: PUSH
67840: LD_INT 0
67842: PUSH
67843: LD_INT 0
67845: PUSH
67846: LD_INT 0
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: PUSH
67858: LD_STRING E
67860: PUSH
67861: LD_INT 0
67863: PUSH
67864: LD_INT 0
67866: PUSH
67867: LD_VAR 0 3
67871: PUSH
67872: LD_INT 0
67874: PUSH
67875: LD_INT 0
67877: PUSH
67878: LD_INT 0
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PPUSH
67894: CALL_OW 446
// end ;
67898: LD_VAR 0 2
67902: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67903: LD_INT 0
67905: PPUSH
67906: PPUSH
// if not driver or not IsInUnit ( driver ) then
67907: LD_VAR 0 1
67911: NOT
67912: PUSH
67913: LD_VAR 0 1
67917: PPUSH
67918: CALL_OW 310
67922: NOT
67923: OR
67924: IFFALSE 67928
// exit ;
67926: GO 68018
// vehicle := IsInUnit ( driver ) ;
67928: LD_ADDR_VAR 0 3
67932: PUSH
67933: LD_VAR 0 1
67937: PPUSH
67938: CALL_OW 310
67942: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67943: LD_VAR 0 1
67947: PPUSH
67948: LD_STRING \
67950: PUSH
67951: LD_INT 0
67953: PUSH
67954: LD_INT 0
67956: PUSH
67957: LD_INT 0
67959: PUSH
67960: LD_INT 0
67962: PUSH
67963: LD_INT 0
67965: PUSH
67966: LD_INT 0
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: PUSH
67978: LD_STRING E
67980: PUSH
67981: LD_INT 0
67983: PUSH
67984: LD_INT 0
67986: PUSH
67987: LD_VAR 0 3
67991: PUSH
67992: LD_INT 0
67994: PUSH
67995: LD_INT 0
67997: PUSH
67998: LD_INT 0
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PPUSH
68014: CALL_OW 447
// end ;
68018: LD_VAR 0 2
68022: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68023: LD_INT 0
68025: PPUSH
68026: PPUSH
68027: PPUSH
// tmp := [ ] ;
68028: LD_ADDR_VAR 0 5
68032: PUSH
68033: EMPTY
68034: ST_TO_ADDR
// for i in units do
68035: LD_ADDR_VAR 0 4
68039: PUSH
68040: LD_VAR 0 1
68044: PUSH
68045: FOR_IN
68046: IFFALSE 68084
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68048: LD_ADDR_VAR 0 5
68052: PUSH
68053: LD_VAR 0 5
68057: PPUSH
68058: LD_VAR 0 5
68062: PUSH
68063: LD_INT 1
68065: PLUS
68066: PPUSH
68067: LD_VAR 0 4
68071: PPUSH
68072: CALL_OW 256
68076: PPUSH
68077: CALL_OW 2
68081: ST_TO_ADDR
68082: GO 68045
68084: POP
68085: POP
// if not tmp then
68086: LD_VAR 0 5
68090: NOT
68091: IFFALSE 68095
// exit ;
68093: GO 68143
// if asc then
68095: LD_VAR 0 2
68099: IFFALSE 68123
// result := SortListByListAsc ( units , tmp ) else
68101: LD_ADDR_VAR 0 3
68105: PUSH
68106: LD_VAR 0 1
68110: PPUSH
68111: LD_VAR 0 5
68115: PPUSH
68116: CALL_OW 76
68120: ST_TO_ADDR
68121: GO 68143
// result := SortListByListDesc ( units , tmp ) ;
68123: LD_ADDR_VAR 0 3
68127: PUSH
68128: LD_VAR 0 1
68132: PPUSH
68133: LD_VAR 0 5
68137: PPUSH
68138: CALL_OW 77
68142: ST_TO_ADDR
// end ;
68143: LD_VAR 0 3
68147: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68148: LD_INT 0
68150: PPUSH
68151: PPUSH
// task := GetTaskList ( mech ) ;
68152: LD_ADDR_VAR 0 4
68156: PUSH
68157: LD_VAR 0 1
68161: PPUSH
68162: CALL_OW 437
68166: ST_TO_ADDR
// if not task then
68167: LD_VAR 0 4
68171: NOT
68172: IFFALSE 68176
// exit ;
68174: GO 68218
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68176: LD_ADDR_VAR 0 3
68180: PUSH
68181: LD_VAR 0 4
68185: PUSH
68186: LD_INT 1
68188: ARRAY
68189: PUSH
68190: LD_INT 1
68192: ARRAY
68193: PUSH
68194: LD_STRING r
68196: EQUAL
68197: PUSH
68198: LD_VAR 0 4
68202: PUSH
68203: LD_INT 1
68205: ARRAY
68206: PUSH
68207: LD_INT 4
68209: ARRAY
68210: PUSH
68211: LD_VAR 0 2
68215: EQUAL
68216: AND
68217: ST_TO_ADDR
// end ;
68218: LD_VAR 0 3
68222: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68223: LD_INT 0
68225: PPUSH
// SetDir ( unit , d ) ;
68226: LD_VAR 0 1
68230: PPUSH
68231: LD_VAR 0 4
68235: PPUSH
68236: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68240: LD_VAR 0 1
68244: PPUSH
68245: LD_VAR 0 2
68249: PPUSH
68250: LD_VAR 0 3
68254: PPUSH
68255: LD_VAR 0 5
68259: PPUSH
68260: CALL_OW 48
// end ;
68264: LD_VAR 0 6
68268: RET
// export function ToNaturalNumber ( number ) ; begin
68269: LD_INT 0
68271: PPUSH
// result := number div 1 ;
68272: LD_ADDR_VAR 0 2
68276: PUSH
68277: LD_VAR 0 1
68281: PUSH
68282: LD_INT 1
68284: DIV
68285: ST_TO_ADDR
// if number < 0 then
68286: LD_VAR 0 1
68290: PUSH
68291: LD_INT 0
68293: LESS
68294: IFFALSE 68304
// result := 0 ;
68296: LD_ADDR_VAR 0 2
68300: PUSH
68301: LD_INT 0
68303: ST_TO_ADDR
// end ;
68304: LD_VAR 0 2
68308: RET
// export function SortByClass ( units , class ) ; var un ; begin
68309: LD_INT 0
68311: PPUSH
68312: PPUSH
// if not units or not class then
68313: LD_VAR 0 1
68317: NOT
68318: PUSH
68319: LD_VAR 0 2
68323: NOT
68324: OR
68325: IFFALSE 68329
// exit ;
68327: GO 68424
// result := [ ] ;
68329: LD_ADDR_VAR 0 3
68333: PUSH
68334: EMPTY
68335: ST_TO_ADDR
// for un in units do
68336: LD_ADDR_VAR 0 4
68340: PUSH
68341: LD_VAR 0 1
68345: PUSH
68346: FOR_IN
68347: IFFALSE 68422
// if GetClass ( un ) = class then
68349: LD_VAR 0 4
68353: PPUSH
68354: CALL_OW 257
68358: PUSH
68359: LD_VAR 0 2
68363: EQUAL
68364: IFFALSE 68391
// result := Insert ( result , 1 , un ) else
68366: LD_ADDR_VAR 0 3
68370: PUSH
68371: LD_VAR 0 3
68375: PPUSH
68376: LD_INT 1
68378: PPUSH
68379: LD_VAR 0 4
68383: PPUSH
68384: CALL_OW 2
68388: ST_TO_ADDR
68389: GO 68420
// result := Replace ( result , result + 1 , un ) ;
68391: LD_ADDR_VAR 0 3
68395: PUSH
68396: LD_VAR 0 3
68400: PPUSH
68401: LD_VAR 0 3
68405: PUSH
68406: LD_INT 1
68408: PLUS
68409: PPUSH
68410: LD_VAR 0 4
68414: PPUSH
68415: CALL_OW 1
68419: ST_TO_ADDR
68420: GO 68346
68422: POP
68423: POP
// end ;
68424: LD_VAR 0 3
68428: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68429: LD_INT 0
68431: PPUSH
68432: PPUSH
68433: PPUSH
68434: PPUSH
68435: PPUSH
68436: PPUSH
68437: PPUSH
// result := [ ] ;
68438: LD_ADDR_VAR 0 4
68442: PUSH
68443: EMPTY
68444: ST_TO_ADDR
// if x - r < 0 then
68445: LD_VAR 0 1
68449: PUSH
68450: LD_VAR 0 3
68454: MINUS
68455: PUSH
68456: LD_INT 0
68458: LESS
68459: IFFALSE 68471
// min_x := 0 else
68461: LD_ADDR_VAR 0 8
68465: PUSH
68466: LD_INT 0
68468: ST_TO_ADDR
68469: GO 68487
// min_x := x - r ;
68471: LD_ADDR_VAR 0 8
68475: PUSH
68476: LD_VAR 0 1
68480: PUSH
68481: LD_VAR 0 3
68485: MINUS
68486: ST_TO_ADDR
// if y - r < 0 then
68487: LD_VAR 0 2
68491: PUSH
68492: LD_VAR 0 3
68496: MINUS
68497: PUSH
68498: LD_INT 0
68500: LESS
68501: IFFALSE 68513
// min_y := 0 else
68503: LD_ADDR_VAR 0 7
68507: PUSH
68508: LD_INT 0
68510: ST_TO_ADDR
68511: GO 68529
// min_y := y - r ;
68513: LD_ADDR_VAR 0 7
68517: PUSH
68518: LD_VAR 0 2
68522: PUSH
68523: LD_VAR 0 3
68527: MINUS
68528: ST_TO_ADDR
// max_x := x + r ;
68529: LD_ADDR_VAR 0 9
68533: PUSH
68534: LD_VAR 0 1
68538: PUSH
68539: LD_VAR 0 3
68543: PLUS
68544: ST_TO_ADDR
// max_y := y + r ;
68545: LD_ADDR_VAR 0 10
68549: PUSH
68550: LD_VAR 0 2
68554: PUSH
68555: LD_VAR 0 3
68559: PLUS
68560: ST_TO_ADDR
// for _x = min_x to max_x do
68561: LD_ADDR_VAR 0 5
68565: PUSH
68566: DOUBLE
68567: LD_VAR 0 8
68571: DEC
68572: ST_TO_ADDR
68573: LD_VAR 0 9
68577: PUSH
68578: FOR_TO
68579: IFFALSE 68680
// for _y = min_y to max_y do
68581: LD_ADDR_VAR 0 6
68585: PUSH
68586: DOUBLE
68587: LD_VAR 0 7
68591: DEC
68592: ST_TO_ADDR
68593: LD_VAR 0 10
68597: PUSH
68598: FOR_TO
68599: IFFALSE 68676
// begin if not ValidHex ( _x , _y ) then
68601: LD_VAR 0 5
68605: PPUSH
68606: LD_VAR 0 6
68610: PPUSH
68611: CALL_OW 488
68615: NOT
68616: IFFALSE 68620
// continue ;
68618: GO 68598
// if GetResourceTypeXY ( _x , _y ) then
68620: LD_VAR 0 5
68624: PPUSH
68625: LD_VAR 0 6
68629: PPUSH
68630: CALL_OW 283
68634: IFFALSE 68674
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68636: LD_ADDR_VAR 0 4
68640: PUSH
68641: LD_VAR 0 4
68645: PPUSH
68646: LD_VAR 0 4
68650: PUSH
68651: LD_INT 1
68653: PLUS
68654: PPUSH
68655: LD_VAR 0 5
68659: PUSH
68660: LD_VAR 0 6
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PPUSH
68669: CALL_OW 1
68673: ST_TO_ADDR
// end ;
68674: GO 68598
68676: POP
68677: POP
68678: GO 68578
68680: POP
68681: POP
// end ;
68682: LD_VAR 0 4
68686: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68687: LD_INT 0
68689: PPUSH
68690: PPUSH
68691: PPUSH
68692: PPUSH
68693: PPUSH
68694: PPUSH
68695: PPUSH
68696: PPUSH
// if not units then
68697: LD_VAR 0 1
68701: NOT
68702: IFFALSE 68706
// exit ;
68704: GO 69230
// result := UnitFilter ( units , [ f_ok ] ) ;
68706: LD_ADDR_VAR 0 3
68710: PUSH
68711: LD_VAR 0 1
68715: PPUSH
68716: LD_INT 50
68718: PUSH
68719: EMPTY
68720: LIST
68721: PPUSH
68722: CALL_OW 72
68726: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68727: LD_ADDR_VAR 0 8
68731: PUSH
68732: LD_VAR 0 1
68736: PUSH
68737: LD_INT 1
68739: ARRAY
68740: PPUSH
68741: CALL_OW 255
68745: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68746: LD_ADDR_VAR 0 10
68750: PUSH
68751: LD_INT 29
68753: PUSH
68754: LD_INT 91
68756: PUSH
68757: LD_INT 49
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: LIST
68764: ST_TO_ADDR
// if not result then
68765: LD_VAR 0 3
68769: NOT
68770: IFFALSE 68774
// exit ;
68772: GO 69230
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68774: LD_ADDR_VAR 0 5
68778: PUSH
68779: LD_INT 81
68781: PUSH
68782: LD_VAR 0 8
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PPUSH
68791: CALL_OW 69
68795: ST_TO_ADDR
// for i in result do
68796: LD_ADDR_VAR 0 4
68800: PUSH
68801: LD_VAR 0 3
68805: PUSH
68806: FOR_IN
68807: IFFALSE 69228
// begin tag := GetTag ( i ) + 1 ;
68809: LD_ADDR_VAR 0 9
68813: PUSH
68814: LD_VAR 0 4
68818: PPUSH
68819: CALL_OW 110
68823: PUSH
68824: LD_INT 1
68826: PLUS
68827: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68828: LD_ADDR_VAR 0 7
68832: PUSH
68833: LD_VAR 0 4
68837: PPUSH
68838: CALL_OW 250
68842: PPUSH
68843: LD_VAR 0 4
68847: PPUSH
68848: CALL_OW 251
68852: PPUSH
68853: LD_INT 6
68855: PPUSH
68856: CALL 68429 0 3
68860: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68861: LD_VAR 0 4
68865: PPUSH
68866: CALL_OW 247
68870: PUSH
68871: LD_INT 2
68873: EQUAL
68874: PUSH
68875: LD_VAR 0 7
68879: AND
68880: PUSH
68881: LD_VAR 0 4
68885: PPUSH
68886: CALL_OW 264
68890: PUSH
68891: LD_VAR 0 10
68895: IN
68896: NOT
68897: AND
68898: IFFALSE 68937
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68900: LD_VAR 0 4
68904: PPUSH
68905: LD_VAR 0 7
68909: PUSH
68910: LD_INT 1
68912: ARRAY
68913: PUSH
68914: LD_INT 1
68916: ARRAY
68917: PPUSH
68918: LD_VAR 0 7
68922: PUSH
68923: LD_INT 1
68925: ARRAY
68926: PUSH
68927: LD_INT 2
68929: ARRAY
68930: PPUSH
68931: CALL_OW 116
68935: GO 69226
// if path > tag then
68937: LD_VAR 0 2
68941: PUSH
68942: LD_VAR 0 9
68946: GREATER
68947: IFFALSE 69155
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68949: LD_ADDR_VAR 0 6
68953: PUSH
68954: LD_VAR 0 5
68958: PPUSH
68959: LD_INT 91
68961: PUSH
68962: LD_VAR 0 4
68966: PUSH
68967: LD_INT 8
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: LIST
68974: PPUSH
68975: CALL_OW 72
68979: ST_TO_ADDR
// if nearEnemy then
68980: LD_VAR 0 6
68984: IFFALSE 69053
// begin if GetWeapon ( i ) = ru_time_lapser then
68986: LD_VAR 0 4
68990: PPUSH
68991: CALL_OW 264
68995: PUSH
68996: LD_INT 49
68998: EQUAL
68999: IFFALSE 69027
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69001: LD_VAR 0 4
69005: PPUSH
69006: LD_VAR 0 6
69010: PPUSH
69011: LD_VAR 0 4
69015: PPUSH
69016: CALL_OW 74
69020: PPUSH
69021: CALL_OW 112
69025: GO 69051
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69027: LD_VAR 0 4
69031: PPUSH
69032: LD_VAR 0 6
69036: PPUSH
69037: LD_VAR 0 4
69041: PPUSH
69042: CALL_OW 74
69046: PPUSH
69047: CALL_OW 115
// end else
69051: GO 69153
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69053: LD_VAR 0 4
69057: PPUSH
69058: LD_VAR 0 2
69062: PUSH
69063: LD_VAR 0 9
69067: ARRAY
69068: PUSH
69069: LD_INT 1
69071: ARRAY
69072: PPUSH
69073: LD_VAR 0 2
69077: PUSH
69078: LD_VAR 0 9
69082: ARRAY
69083: PUSH
69084: LD_INT 2
69086: ARRAY
69087: PPUSH
69088: CALL_OW 297
69092: PUSH
69093: LD_INT 6
69095: GREATER
69096: IFFALSE 69139
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69098: LD_VAR 0 4
69102: PPUSH
69103: LD_VAR 0 2
69107: PUSH
69108: LD_VAR 0 9
69112: ARRAY
69113: PUSH
69114: LD_INT 1
69116: ARRAY
69117: PPUSH
69118: LD_VAR 0 2
69122: PUSH
69123: LD_VAR 0 9
69127: ARRAY
69128: PUSH
69129: LD_INT 2
69131: ARRAY
69132: PPUSH
69133: CALL_OW 114
69137: GO 69153
// SetTag ( i , tag ) ;
69139: LD_VAR 0 4
69143: PPUSH
69144: LD_VAR 0 9
69148: PPUSH
69149: CALL_OW 109
// end else
69153: GO 69226
// if enemy then
69155: LD_VAR 0 5
69159: IFFALSE 69226
// begin if GetWeapon ( i ) = ru_time_lapser then
69161: LD_VAR 0 4
69165: PPUSH
69166: CALL_OW 264
69170: PUSH
69171: LD_INT 49
69173: EQUAL
69174: IFFALSE 69202
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69176: LD_VAR 0 4
69180: PPUSH
69181: LD_VAR 0 5
69185: PPUSH
69186: LD_VAR 0 4
69190: PPUSH
69191: CALL_OW 74
69195: PPUSH
69196: CALL_OW 112
69200: GO 69226
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69202: LD_VAR 0 4
69206: PPUSH
69207: LD_VAR 0 5
69211: PPUSH
69212: LD_VAR 0 4
69216: PPUSH
69217: CALL_OW 74
69221: PPUSH
69222: CALL_OW 115
// end ; end ;
69226: GO 68806
69228: POP
69229: POP
// end ;
69230: LD_VAR 0 3
69234: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69235: LD_INT 0
69237: PPUSH
69238: PPUSH
69239: PPUSH
// if not unit or IsInUnit ( unit ) then
69240: LD_VAR 0 1
69244: NOT
69245: PUSH
69246: LD_VAR 0 1
69250: PPUSH
69251: CALL_OW 310
69255: OR
69256: IFFALSE 69260
// exit ;
69258: GO 69351
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69260: LD_ADDR_VAR 0 4
69264: PUSH
69265: LD_VAR 0 1
69269: PPUSH
69270: CALL_OW 250
69274: PPUSH
69275: LD_VAR 0 2
69279: PPUSH
69280: LD_INT 1
69282: PPUSH
69283: CALL_OW 272
69287: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69288: LD_ADDR_VAR 0 5
69292: PUSH
69293: LD_VAR 0 1
69297: PPUSH
69298: CALL_OW 251
69302: PPUSH
69303: LD_VAR 0 2
69307: PPUSH
69308: LD_INT 1
69310: PPUSH
69311: CALL_OW 273
69315: ST_TO_ADDR
// if ValidHex ( x , y ) then
69316: LD_VAR 0 4
69320: PPUSH
69321: LD_VAR 0 5
69325: PPUSH
69326: CALL_OW 488
69330: IFFALSE 69351
// ComTurnXY ( unit , x , y ) ;
69332: LD_VAR 0 1
69336: PPUSH
69337: LD_VAR 0 4
69341: PPUSH
69342: LD_VAR 0 5
69346: PPUSH
69347: CALL_OW 118
// end ;
69351: LD_VAR 0 3
69355: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69356: LD_INT 0
69358: PPUSH
69359: PPUSH
// result := false ;
69360: LD_ADDR_VAR 0 3
69364: PUSH
69365: LD_INT 0
69367: ST_TO_ADDR
// if not units then
69368: LD_VAR 0 2
69372: NOT
69373: IFFALSE 69377
// exit ;
69375: GO 69422
// for i in units do
69377: LD_ADDR_VAR 0 4
69381: PUSH
69382: LD_VAR 0 2
69386: PUSH
69387: FOR_IN
69388: IFFALSE 69420
// if See ( side , i ) then
69390: LD_VAR 0 1
69394: PPUSH
69395: LD_VAR 0 4
69399: PPUSH
69400: CALL_OW 292
69404: IFFALSE 69418
// begin result := true ;
69406: LD_ADDR_VAR 0 3
69410: PUSH
69411: LD_INT 1
69413: ST_TO_ADDR
// exit ;
69414: POP
69415: POP
69416: GO 69422
// end ;
69418: GO 69387
69420: POP
69421: POP
// end ;
69422: LD_VAR 0 3
69426: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69427: LD_INT 0
69429: PPUSH
69430: PPUSH
69431: PPUSH
69432: PPUSH
// if not unit or not points then
69433: LD_VAR 0 1
69437: NOT
69438: PUSH
69439: LD_VAR 0 2
69443: NOT
69444: OR
69445: IFFALSE 69449
// exit ;
69447: GO 69539
// dist := 99999 ;
69449: LD_ADDR_VAR 0 5
69453: PUSH
69454: LD_INT 99999
69456: ST_TO_ADDR
// for i in points do
69457: LD_ADDR_VAR 0 4
69461: PUSH
69462: LD_VAR 0 2
69466: PUSH
69467: FOR_IN
69468: IFFALSE 69537
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69470: LD_ADDR_VAR 0 6
69474: PUSH
69475: LD_VAR 0 1
69479: PPUSH
69480: LD_VAR 0 4
69484: PUSH
69485: LD_INT 1
69487: ARRAY
69488: PPUSH
69489: LD_VAR 0 4
69493: PUSH
69494: LD_INT 2
69496: ARRAY
69497: PPUSH
69498: CALL_OW 297
69502: ST_TO_ADDR
// if tmpDist < dist then
69503: LD_VAR 0 6
69507: PUSH
69508: LD_VAR 0 5
69512: LESS
69513: IFFALSE 69535
// begin result := i ;
69515: LD_ADDR_VAR 0 3
69519: PUSH
69520: LD_VAR 0 4
69524: ST_TO_ADDR
// dist := tmpDist ;
69525: LD_ADDR_VAR 0 5
69529: PUSH
69530: LD_VAR 0 6
69534: ST_TO_ADDR
// end ; end ;
69535: GO 69467
69537: POP
69538: POP
// end ;
69539: LD_VAR 0 3
69543: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69544: LD_INT 0
69546: PPUSH
// uc_side := side ;
69547: LD_ADDR_OWVAR 20
69551: PUSH
69552: LD_VAR 0 1
69556: ST_TO_ADDR
// uc_nation := 3 ;
69557: LD_ADDR_OWVAR 21
69561: PUSH
69562: LD_INT 3
69564: ST_TO_ADDR
// vc_chassis := 25 ;
69565: LD_ADDR_OWVAR 37
69569: PUSH
69570: LD_INT 25
69572: ST_TO_ADDR
// vc_engine := engine_siberite ;
69573: LD_ADDR_OWVAR 39
69577: PUSH
69578: LD_INT 3
69580: ST_TO_ADDR
// vc_control := control_computer ;
69581: LD_ADDR_OWVAR 38
69585: PUSH
69586: LD_INT 3
69588: ST_TO_ADDR
// vc_weapon := 59 ;
69589: LD_ADDR_OWVAR 40
69593: PUSH
69594: LD_INT 59
69596: ST_TO_ADDR
// result := CreateVehicle ;
69597: LD_ADDR_VAR 0 5
69601: PUSH
69602: CALL_OW 45
69606: ST_TO_ADDR
// SetDir ( result , d ) ;
69607: LD_VAR 0 5
69611: PPUSH
69612: LD_VAR 0 4
69616: PPUSH
69617: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69621: LD_VAR 0 5
69625: PPUSH
69626: LD_VAR 0 2
69630: PPUSH
69631: LD_VAR 0 3
69635: PPUSH
69636: LD_INT 0
69638: PPUSH
69639: CALL_OW 48
// end ;
69643: LD_VAR 0 5
69647: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69648: LD_INT 0
69650: PPUSH
69651: PPUSH
69652: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69653: LD_ADDR_VAR 0 2
69657: PUSH
69658: LD_INT 0
69660: PUSH
69661: LD_INT 0
69663: PUSH
69664: LD_INT 0
69666: PUSH
69667: LD_INT 0
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69676: LD_VAR 0 1
69680: NOT
69681: PUSH
69682: LD_VAR 0 1
69686: PPUSH
69687: CALL_OW 264
69691: PUSH
69692: LD_INT 12
69694: PUSH
69695: LD_INT 51
69697: PUSH
69698: LD_INT 32
69700: PUSH
69701: LD_INT 89
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: IN
69710: NOT
69711: OR
69712: IFFALSE 69716
// exit ;
69714: GO 69814
// for i := 1 to 3 do
69716: LD_ADDR_VAR 0 3
69720: PUSH
69721: DOUBLE
69722: LD_INT 1
69724: DEC
69725: ST_TO_ADDR
69726: LD_INT 3
69728: PUSH
69729: FOR_TO
69730: IFFALSE 69812
// begin tmp := GetCargo ( cargo , i ) ;
69732: LD_ADDR_VAR 0 4
69736: PUSH
69737: LD_VAR 0 1
69741: PPUSH
69742: LD_VAR 0 3
69746: PPUSH
69747: CALL_OW 289
69751: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69752: LD_ADDR_VAR 0 2
69756: PUSH
69757: LD_VAR 0 2
69761: PPUSH
69762: LD_VAR 0 3
69766: PPUSH
69767: LD_VAR 0 4
69771: PPUSH
69772: CALL_OW 1
69776: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69777: LD_ADDR_VAR 0 2
69781: PUSH
69782: LD_VAR 0 2
69786: PPUSH
69787: LD_INT 4
69789: PPUSH
69790: LD_VAR 0 2
69794: PUSH
69795: LD_INT 4
69797: ARRAY
69798: PUSH
69799: LD_VAR 0 4
69803: PLUS
69804: PPUSH
69805: CALL_OW 1
69809: ST_TO_ADDR
// end ;
69810: GO 69729
69812: POP
69813: POP
// end ;
69814: LD_VAR 0 2
69818: RET
// export function Length ( array ) ; begin
69819: LD_INT 0
69821: PPUSH
// result := array + 0 ;
69822: LD_ADDR_VAR 0 2
69826: PUSH
69827: LD_VAR 0 1
69831: PUSH
69832: LD_INT 0
69834: PLUS
69835: ST_TO_ADDR
// end ;
69836: LD_VAR 0 2
69840: RET
// export function PrepareArray ( array ) ; begin
69841: LD_INT 0
69843: PPUSH
// result := array diff 0 ;
69844: LD_ADDR_VAR 0 2
69848: PUSH
69849: LD_VAR 0 1
69853: PUSH
69854: LD_INT 0
69856: DIFF
69857: ST_TO_ADDR
// if not result [ 1 ] then
69858: LD_VAR 0 2
69862: PUSH
69863: LD_INT 1
69865: ARRAY
69866: NOT
69867: IFFALSE 69887
// result := Delete ( result , 1 ) ;
69869: LD_ADDR_VAR 0 2
69873: PUSH
69874: LD_VAR 0 2
69878: PPUSH
69879: LD_INT 1
69881: PPUSH
69882: CALL_OW 3
69886: ST_TO_ADDR
// end ;
69887: LD_VAR 0 2
69891: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69892: LD_INT 0
69894: PPUSH
69895: PPUSH
69896: PPUSH
69897: PPUSH
// sibRocketRange := 25 ;
69898: LD_ADDR_VAR 0 6
69902: PUSH
69903: LD_INT 25
69905: ST_TO_ADDR
// result := false ;
69906: LD_ADDR_VAR 0 4
69910: PUSH
69911: LD_INT 0
69913: ST_TO_ADDR
// for i := 0 to 5 do
69914: LD_ADDR_VAR 0 5
69918: PUSH
69919: DOUBLE
69920: LD_INT 0
69922: DEC
69923: ST_TO_ADDR
69924: LD_INT 5
69926: PUSH
69927: FOR_TO
69928: IFFALSE 69995
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69930: LD_VAR 0 1
69934: PPUSH
69935: LD_VAR 0 5
69939: PPUSH
69940: LD_VAR 0 6
69944: PPUSH
69945: CALL_OW 272
69949: PPUSH
69950: LD_VAR 0 2
69954: PPUSH
69955: LD_VAR 0 5
69959: PPUSH
69960: LD_VAR 0 6
69964: PPUSH
69965: CALL_OW 273
69969: PPUSH
69970: LD_VAR 0 3
69974: PPUSH
69975: CALL_OW 309
69979: IFFALSE 69993
// begin result := true ;
69981: LD_ADDR_VAR 0 4
69985: PUSH
69986: LD_INT 1
69988: ST_TO_ADDR
// exit ;
69989: POP
69990: POP
69991: GO 69997
// end ;
69993: GO 69927
69995: POP
69996: POP
// end ;
69997: LD_VAR 0 4
70001: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70002: LD_INT 0
70004: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70005: LD_VAR 0 1
70009: PPUSH
70010: LD_VAR 0 2
70014: PPUSH
70015: LD_INT 0
70017: PPUSH
70018: LD_INT 0
70020: PPUSH
70021: LD_INT 1
70023: PPUSH
70024: LD_INT 0
70026: PPUSH
70027: CALL_OW 587
// end ;
70031: LD_VAR 0 3
70035: RET
// export function CenterOnNow ( unit ) ; begin
70036: LD_INT 0
70038: PPUSH
// result := IsInUnit ( unit ) ;
70039: LD_ADDR_VAR 0 2
70043: PUSH
70044: LD_VAR 0 1
70048: PPUSH
70049: CALL_OW 310
70053: ST_TO_ADDR
// if not result then
70054: LD_VAR 0 2
70058: NOT
70059: IFFALSE 70071
// result := unit ;
70061: LD_ADDR_VAR 0 2
70065: PUSH
70066: LD_VAR 0 1
70070: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70071: LD_VAR 0 1
70075: PPUSH
70076: CALL_OW 87
// end ; end_of_file
70080: LD_VAR 0 2
70084: RET
// export globalGameSaveCounter ; every 0 0$1 do
70085: GO 70087
70087: DISABLE
// begin enable ;
70088: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
70089: LD_STRING updateTimer(
70091: PUSH
70092: LD_OWVAR 1
70096: STR
70097: PUSH
70098: LD_STRING );
70100: STR
70101: PPUSH
70102: CALL_OW 559
// end ;
70106: END
// every 0 0$1 do
70107: GO 70109
70109: DISABLE
// begin globalGameSaveCounter := 0 ;
70110: LD_ADDR_EXP 72
70114: PUSH
70115: LD_INT 0
70117: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
70118: LD_STRING setGameSaveCounter(0)
70120: PPUSH
70121: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
70125: LD_STRING initStreamRollete();
70127: PPUSH
70128: CALL_OW 559
// InitStreamMode ;
70132: CALL 71458 0 0
// DefineStreamItems ( false ) ;
70136: LD_INT 0
70138: PPUSH
70139: CALL 71922 0 1
// end ;
70143: END
// export function SOS_MapStart ( ) ; begin
70144: LD_INT 0
70146: PPUSH
// if streamModeActive then
70147: LD_EXP 73
70151: IFFALSE 70160
// DefineStreamItems ( true ) ;
70153: LD_INT 1
70155: PPUSH
70156: CALL 71922 0 1
// UpdateLuaVariables ( ) ;
70160: CALL 70177 0 0
// UpdateFactoryWaypoints ( ) ;
70164: CALL 84783 0 0
// UpdateWarehouseGatheringPoints ( ) ;
70168: CALL 85040 0 0
// end ;
70172: LD_VAR 0 1
70176: RET
// function UpdateLuaVariables ( ) ; begin
70177: LD_INT 0
70179: PPUSH
// if globalGameSaveCounter then
70180: LD_EXP 72
70184: IFFALSE 70218
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
70186: LD_ADDR_EXP 72
70190: PUSH
70191: LD_EXP 72
70195: PPUSH
70196: CALL 67444 0 1
70200: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
70201: LD_STRING setGameSaveCounter(
70203: PUSH
70204: LD_EXP 72
70208: STR
70209: PUSH
70210: LD_STRING )
70212: STR
70213: PPUSH
70214: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
70218: LD_STRING setGameDifficulty(
70220: PUSH
70221: LD_OWVAR 67
70225: STR
70226: PUSH
70227: LD_STRING )
70229: STR
70230: PPUSH
70231: CALL_OW 559
// end ;
70235: LD_VAR 0 1
70239: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70240: LD_INT 0
70242: PPUSH
// if p2 = stream_mode then
70243: LD_VAR 0 2
70247: PUSH
70248: LD_INT 100
70250: EQUAL
70251: IFFALSE 71254
// begin if not StreamModeActive then
70253: LD_EXP 73
70257: NOT
70258: IFFALSE 70268
// StreamModeActive := true ;
70260: LD_ADDR_EXP 73
70264: PUSH
70265: LD_INT 1
70267: ST_TO_ADDR
// if p3 = 0 then
70268: LD_VAR 0 3
70272: PUSH
70273: LD_INT 0
70275: EQUAL
70276: IFFALSE 70282
// InitStreamMode ;
70278: CALL 71458 0 0
// if p3 = 1 then
70282: LD_VAR 0 3
70286: PUSH
70287: LD_INT 1
70289: EQUAL
70290: IFFALSE 70300
// sRocket := true ;
70292: LD_ADDR_EXP 78
70296: PUSH
70297: LD_INT 1
70299: ST_TO_ADDR
// if p3 = 2 then
70300: LD_VAR 0 3
70304: PUSH
70305: LD_INT 2
70307: EQUAL
70308: IFFALSE 70318
// sSpeed := true ;
70310: LD_ADDR_EXP 77
70314: PUSH
70315: LD_INT 1
70317: ST_TO_ADDR
// if p3 = 3 then
70318: LD_VAR 0 3
70322: PUSH
70323: LD_INT 3
70325: EQUAL
70326: IFFALSE 70336
// sEngine := true ;
70328: LD_ADDR_EXP 79
70332: PUSH
70333: LD_INT 1
70335: ST_TO_ADDR
// if p3 = 4 then
70336: LD_VAR 0 3
70340: PUSH
70341: LD_INT 4
70343: EQUAL
70344: IFFALSE 70354
// sSpec := true ;
70346: LD_ADDR_EXP 76
70350: PUSH
70351: LD_INT 1
70353: ST_TO_ADDR
// if p3 = 5 then
70354: LD_VAR 0 3
70358: PUSH
70359: LD_INT 5
70361: EQUAL
70362: IFFALSE 70372
// sLevel := true ;
70364: LD_ADDR_EXP 80
70368: PUSH
70369: LD_INT 1
70371: ST_TO_ADDR
// if p3 = 6 then
70372: LD_VAR 0 3
70376: PUSH
70377: LD_INT 6
70379: EQUAL
70380: IFFALSE 70390
// sArmoury := true ;
70382: LD_ADDR_EXP 81
70386: PUSH
70387: LD_INT 1
70389: ST_TO_ADDR
// if p3 = 7 then
70390: LD_VAR 0 3
70394: PUSH
70395: LD_INT 7
70397: EQUAL
70398: IFFALSE 70408
// sRadar := true ;
70400: LD_ADDR_EXP 82
70404: PUSH
70405: LD_INT 1
70407: ST_TO_ADDR
// if p3 = 8 then
70408: LD_VAR 0 3
70412: PUSH
70413: LD_INT 8
70415: EQUAL
70416: IFFALSE 70426
// sBunker := true ;
70418: LD_ADDR_EXP 83
70422: PUSH
70423: LD_INT 1
70425: ST_TO_ADDR
// if p3 = 9 then
70426: LD_VAR 0 3
70430: PUSH
70431: LD_INT 9
70433: EQUAL
70434: IFFALSE 70444
// sHack := true ;
70436: LD_ADDR_EXP 84
70440: PUSH
70441: LD_INT 1
70443: ST_TO_ADDR
// if p3 = 10 then
70444: LD_VAR 0 3
70448: PUSH
70449: LD_INT 10
70451: EQUAL
70452: IFFALSE 70462
// sFire := true ;
70454: LD_ADDR_EXP 85
70458: PUSH
70459: LD_INT 1
70461: ST_TO_ADDR
// if p3 = 11 then
70462: LD_VAR 0 3
70466: PUSH
70467: LD_INT 11
70469: EQUAL
70470: IFFALSE 70480
// sRefresh := true ;
70472: LD_ADDR_EXP 86
70476: PUSH
70477: LD_INT 1
70479: ST_TO_ADDR
// if p3 = 12 then
70480: LD_VAR 0 3
70484: PUSH
70485: LD_INT 12
70487: EQUAL
70488: IFFALSE 70498
// sExp := true ;
70490: LD_ADDR_EXP 87
70494: PUSH
70495: LD_INT 1
70497: ST_TO_ADDR
// if p3 = 13 then
70498: LD_VAR 0 3
70502: PUSH
70503: LD_INT 13
70505: EQUAL
70506: IFFALSE 70516
// sDepot := true ;
70508: LD_ADDR_EXP 88
70512: PUSH
70513: LD_INT 1
70515: ST_TO_ADDR
// if p3 = 14 then
70516: LD_VAR 0 3
70520: PUSH
70521: LD_INT 14
70523: EQUAL
70524: IFFALSE 70534
// sFlag := true ;
70526: LD_ADDR_EXP 89
70530: PUSH
70531: LD_INT 1
70533: ST_TO_ADDR
// if p3 = 15 then
70534: LD_VAR 0 3
70538: PUSH
70539: LD_INT 15
70541: EQUAL
70542: IFFALSE 70552
// sKamikadze := true ;
70544: LD_ADDR_EXP 97
70548: PUSH
70549: LD_INT 1
70551: ST_TO_ADDR
// if p3 = 16 then
70552: LD_VAR 0 3
70556: PUSH
70557: LD_INT 16
70559: EQUAL
70560: IFFALSE 70570
// sTroll := true ;
70562: LD_ADDR_EXP 98
70566: PUSH
70567: LD_INT 1
70569: ST_TO_ADDR
// if p3 = 17 then
70570: LD_VAR 0 3
70574: PUSH
70575: LD_INT 17
70577: EQUAL
70578: IFFALSE 70588
// sSlow := true ;
70580: LD_ADDR_EXP 99
70584: PUSH
70585: LD_INT 1
70587: ST_TO_ADDR
// if p3 = 18 then
70588: LD_VAR 0 3
70592: PUSH
70593: LD_INT 18
70595: EQUAL
70596: IFFALSE 70606
// sLack := true ;
70598: LD_ADDR_EXP 100
70602: PUSH
70603: LD_INT 1
70605: ST_TO_ADDR
// if p3 = 19 then
70606: LD_VAR 0 3
70610: PUSH
70611: LD_INT 19
70613: EQUAL
70614: IFFALSE 70624
// sTank := true ;
70616: LD_ADDR_EXP 102
70620: PUSH
70621: LD_INT 1
70623: ST_TO_ADDR
// if p3 = 20 then
70624: LD_VAR 0 3
70628: PUSH
70629: LD_INT 20
70631: EQUAL
70632: IFFALSE 70642
// sRemote := true ;
70634: LD_ADDR_EXP 103
70638: PUSH
70639: LD_INT 1
70641: ST_TO_ADDR
// if p3 = 21 then
70642: LD_VAR 0 3
70646: PUSH
70647: LD_INT 21
70649: EQUAL
70650: IFFALSE 70660
// sPowell := true ;
70652: LD_ADDR_EXP 104
70656: PUSH
70657: LD_INT 1
70659: ST_TO_ADDR
// if p3 = 22 then
70660: LD_VAR 0 3
70664: PUSH
70665: LD_INT 22
70667: EQUAL
70668: IFFALSE 70678
// sTeleport := true ;
70670: LD_ADDR_EXP 107
70674: PUSH
70675: LD_INT 1
70677: ST_TO_ADDR
// if p3 = 23 then
70678: LD_VAR 0 3
70682: PUSH
70683: LD_INT 23
70685: EQUAL
70686: IFFALSE 70696
// sOilTower := true ;
70688: LD_ADDR_EXP 109
70692: PUSH
70693: LD_INT 1
70695: ST_TO_ADDR
// if p3 = 24 then
70696: LD_VAR 0 3
70700: PUSH
70701: LD_INT 24
70703: EQUAL
70704: IFFALSE 70714
// sShovel := true ;
70706: LD_ADDR_EXP 110
70710: PUSH
70711: LD_INT 1
70713: ST_TO_ADDR
// if p3 = 25 then
70714: LD_VAR 0 3
70718: PUSH
70719: LD_INT 25
70721: EQUAL
70722: IFFALSE 70732
// sSheik := true ;
70724: LD_ADDR_EXP 111
70728: PUSH
70729: LD_INT 1
70731: ST_TO_ADDR
// if p3 = 26 then
70732: LD_VAR 0 3
70736: PUSH
70737: LD_INT 26
70739: EQUAL
70740: IFFALSE 70750
// sEarthquake := true ;
70742: LD_ADDR_EXP 113
70746: PUSH
70747: LD_INT 1
70749: ST_TO_ADDR
// if p3 = 27 then
70750: LD_VAR 0 3
70754: PUSH
70755: LD_INT 27
70757: EQUAL
70758: IFFALSE 70768
// sAI := true ;
70760: LD_ADDR_EXP 114
70764: PUSH
70765: LD_INT 1
70767: ST_TO_ADDR
// if p3 = 28 then
70768: LD_VAR 0 3
70772: PUSH
70773: LD_INT 28
70775: EQUAL
70776: IFFALSE 70786
// sCargo := true ;
70778: LD_ADDR_EXP 117
70782: PUSH
70783: LD_INT 1
70785: ST_TO_ADDR
// if p3 = 29 then
70786: LD_VAR 0 3
70790: PUSH
70791: LD_INT 29
70793: EQUAL
70794: IFFALSE 70804
// sDLaser := true ;
70796: LD_ADDR_EXP 118
70800: PUSH
70801: LD_INT 1
70803: ST_TO_ADDR
// if p3 = 30 then
70804: LD_VAR 0 3
70808: PUSH
70809: LD_INT 30
70811: EQUAL
70812: IFFALSE 70822
// sExchange := true ;
70814: LD_ADDR_EXP 119
70818: PUSH
70819: LD_INT 1
70821: ST_TO_ADDR
// if p3 = 31 then
70822: LD_VAR 0 3
70826: PUSH
70827: LD_INT 31
70829: EQUAL
70830: IFFALSE 70840
// sFac := true ;
70832: LD_ADDR_EXP 120
70836: PUSH
70837: LD_INT 1
70839: ST_TO_ADDR
// if p3 = 32 then
70840: LD_VAR 0 3
70844: PUSH
70845: LD_INT 32
70847: EQUAL
70848: IFFALSE 70858
// sPower := true ;
70850: LD_ADDR_EXP 121
70854: PUSH
70855: LD_INT 1
70857: ST_TO_ADDR
// if p3 = 33 then
70858: LD_VAR 0 3
70862: PUSH
70863: LD_INT 33
70865: EQUAL
70866: IFFALSE 70876
// sRandom := true ;
70868: LD_ADDR_EXP 122
70872: PUSH
70873: LD_INT 1
70875: ST_TO_ADDR
// if p3 = 34 then
70876: LD_VAR 0 3
70880: PUSH
70881: LD_INT 34
70883: EQUAL
70884: IFFALSE 70894
// sShield := true ;
70886: LD_ADDR_EXP 123
70890: PUSH
70891: LD_INT 1
70893: ST_TO_ADDR
// if p3 = 35 then
70894: LD_VAR 0 3
70898: PUSH
70899: LD_INT 35
70901: EQUAL
70902: IFFALSE 70912
// sTime := true ;
70904: LD_ADDR_EXP 124
70908: PUSH
70909: LD_INT 1
70911: ST_TO_ADDR
// if p3 = 36 then
70912: LD_VAR 0 3
70916: PUSH
70917: LD_INT 36
70919: EQUAL
70920: IFFALSE 70930
// sTools := true ;
70922: LD_ADDR_EXP 125
70926: PUSH
70927: LD_INT 1
70929: ST_TO_ADDR
// if p3 = 101 then
70930: LD_VAR 0 3
70934: PUSH
70935: LD_INT 101
70937: EQUAL
70938: IFFALSE 70948
// sSold := true ;
70940: LD_ADDR_EXP 90
70944: PUSH
70945: LD_INT 1
70947: ST_TO_ADDR
// if p3 = 102 then
70948: LD_VAR 0 3
70952: PUSH
70953: LD_INT 102
70955: EQUAL
70956: IFFALSE 70966
// sDiff := true ;
70958: LD_ADDR_EXP 91
70962: PUSH
70963: LD_INT 1
70965: ST_TO_ADDR
// if p3 = 103 then
70966: LD_VAR 0 3
70970: PUSH
70971: LD_INT 103
70973: EQUAL
70974: IFFALSE 70984
// sFog := true ;
70976: LD_ADDR_EXP 94
70980: PUSH
70981: LD_INT 1
70983: ST_TO_ADDR
// if p3 = 104 then
70984: LD_VAR 0 3
70988: PUSH
70989: LD_INT 104
70991: EQUAL
70992: IFFALSE 71002
// sReset := true ;
70994: LD_ADDR_EXP 95
70998: PUSH
70999: LD_INT 1
71001: ST_TO_ADDR
// if p3 = 105 then
71002: LD_VAR 0 3
71006: PUSH
71007: LD_INT 105
71009: EQUAL
71010: IFFALSE 71020
// sSun := true ;
71012: LD_ADDR_EXP 96
71016: PUSH
71017: LD_INT 1
71019: ST_TO_ADDR
// if p3 = 106 then
71020: LD_VAR 0 3
71024: PUSH
71025: LD_INT 106
71027: EQUAL
71028: IFFALSE 71038
// sTiger := true ;
71030: LD_ADDR_EXP 92
71034: PUSH
71035: LD_INT 1
71037: ST_TO_ADDR
// if p3 = 107 then
71038: LD_VAR 0 3
71042: PUSH
71043: LD_INT 107
71045: EQUAL
71046: IFFALSE 71056
// sBomb := true ;
71048: LD_ADDR_EXP 93
71052: PUSH
71053: LD_INT 1
71055: ST_TO_ADDR
// if p3 = 108 then
71056: LD_VAR 0 3
71060: PUSH
71061: LD_INT 108
71063: EQUAL
71064: IFFALSE 71074
// sWound := true ;
71066: LD_ADDR_EXP 101
71070: PUSH
71071: LD_INT 1
71073: ST_TO_ADDR
// if p3 = 109 then
71074: LD_VAR 0 3
71078: PUSH
71079: LD_INT 109
71081: EQUAL
71082: IFFALSE 71092
// sBetray := true ;
71084: LD_ADDR_EXP 105
71088: PUSH
71089: LD_INT 1
71091: ST_TO_ADDR
// if p3 = 110 then
71092: LD_VAR 0 3
71096: PUSH
71097: LD_INT 110
71099: EQUAL
71100: IFFALSE 71110
// sContamin := true ;
71102: LD_ADDR_EXP 106
71106: PUSH
71107: LD_INT 1
71109: ST_TO_ADDR
// if p3 = 111 then
71110: LD_VAR 0 3
71114: PUSH
71115: LD_INT 111
71117: EQUAL
71118: IFFALSE 71128
// sOil := true ;
71120: LD_ADDR_EXP 108
71124: PUSH
71125: LD_INT 1
71127: ST_TO_ADDR
// if p3 = 112 then
71128: LD_VAR 0 3
71132: PUSH
71133: LD_INT 112
71135: EQUAL
71136: IFFALSE 71146
// sStu := true ;
71138: LD_ADDR_EXP 112
71142: PUSH
71143: LD_INT 1
71145: ST_TO_ADDR
// if p3 = 113 then
71146: LD_VAR 0 3
71150: PUSH
71151: LD_INT 113
71153: EQUAL
71154: IFFALSE 71164
// sBazooka := true ;
71156: LD_ADDR_EXP 115
71160: PUSH
71161: LD_INT 1
71163: ST_TO_ADDR
// if p3 = 114 then
71164: LD_VAR 0 3
71168: PUSH
71169: LD_INT 114
71171: EQUAL
71172: IFFALSE 71182
// sMortar := true ;
71174: LD_ADDR_EXP 116
71178: PUSH
71179: LD_INT 1
71181: ST_TO_ADDR
// if p3 = 115 then
71182: LD_VAR 0 3
71186: PUSH
71187: LD_INT 115
71189: EQUAL
71190: IFFALSE 71200
// sRanger := true ;
71192: LD_ADDR_EXP 126
71196: PUSH
71197: LD_INT 1
71199: ST_TO_ADDR
// if p3 = 116 then
71200: LD_VAR 0 3
71204: PUSH
71205: LD_INT 116
71207: EQUAL
71208: IFFALSE 71218
// sComputer := true ;
71210: LD_ADDR_EXP 127
71214: PUSH
71215: LD_INT 1
71217: ST_TO_ADDR
// if p3 = 117 then
71218: LD_VAR 0 3
71222: PUSH
71223: LD_INT 117
71225: EQUAL
71226: IFFALSE 71236
// s30 := true ;
71228: LD_ADDR_EXP 128
71232: PUSH
71233: LD_INT 1
71235: ST_TO_ADDR
// if p3 = 118 then
71236: LD_VAR 0 3
71240: PUSH
71241: LD_INT 118
71243: EQUAL
71244: IFFALSE 71254
// s60 := true ;
71246: LD_ADDR_EXP 129
71250: PUSH
71251: LD_INT 1
71253: ST_TO_ADDR
// end ; if p2 = hack_mode then
71254: LD_VAR 0 2
71258: PUSH
71259: LD_INT 101
71261: EQUAL
71262: IFFALSE 71390
// begin case p3 of 1 :
71264: LD_VAR 0 3
71268: PUSH
71269: LD_INT 1
71271: DOUBLE
71272: EQUAL
71273: IFTRUE 71277
71275: GO 71284
71277: POP
// hHackUnlimitedResources ; 2 :
71278: CALL 83529 0 0
71282: GO 71390
71284: LD_INT 2
71286: DOUBLE
71287: EQUAL
71288: IFTRUE 71292
71290: GO 71299
71292: POP
// hHackSetLevel10 ; 3 :
71293: CALL 83662 0 0
71297: GO 71390
71299: LD_INT 3
71301: DOUBLE
71302: EQUAL
71303: IFTRUE 71307
71305: GO 71314
71307: POP
// hHackSetLevel10YourUnits ; 4 :
71308: CALL 83747 0 0
71312: GO 71390
71314: LD_INT 4
71316: DOUBLE
71317: EQUAL
71318: IFTRUE 71322
71320: GO 71329
71322: POP
// hHackInvincible ; 5 :
71323: CALL 84195 0 0
71327: GO 71390
71329: LD_INT 5
71331: DOUBLE
71332: EQUAL
71333: IFTRUE 71337
71335: GO 71344
71337: POP
// hHackInvisible ; 6 :
71338: CALL 84306 0 0
71342: GO 71390
71344: LD_INT 6
71346: DOUBLE
71347: EQUAL
71348: IFTRUE 71352
71350: GO 71359
71352: POP
// hHackChangeYourSide ; 7 :
71353: CALL 84363 0 0
71357: GO 71390
71359: LD_INT 7
71361: DOUBLE
71362: EQUAL
71363: IFTRUE 71367
71365: GO 71374
71367: POP
// hHackChangeUnitSide ; 8 :
71368: CALL 84405 0 0
71372: GO 71390
71374: LD_INT 8
71376: DOUBLE
71377: EQUAL
71378: IFTRUE 71382
71380: GO 71389
71382: POP
// hHackFog ; end ;
71383: CALL 84506 0 0
71387: GO 71390
71389: POP
// end ; if p2 = game_save_mode then
71390: LD_VAR 0 2
71394: PUSH
71395: LD_INT 102
71397: EQUAL
71398: IFFALSE 71453
// begin if p3 = 1 then
71400: LD_VAR 0 3
71404: PUSH
71405: LD_INT 1
71407: EQUAL
71408: IFFALSE 71420
// globalGameSaveCounter := p4 ;
71410: LD_ADDR_EXP 72
71414: PUSH
71415: LD_VAR 0 4
71419: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
71420: LD_VAR 0 3
71424: PUSH
71425: LD_INT 2
71427: EQUAL
71428: PUSH
71429: LD_EXP 72
71433: AND
71434: IFFALSE 71453
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
71436: LD_STRING setGameSaveCounter(
71438: PUSH
71439: LD_EXP 72
71443: STR
71444: PUSH
71445: LD_STRING )
71447: STR
71448: PPUSH
71449: CALL_OW 559
// end ; end ;
71453: LD_VAR 0 7
71457: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
71458: LD_INT 0
71460: PPUSH
// streamModeActive := false ;
71461: LD_ADDR_EXP 73
71465: PUSH
71466: LD_INT 0
71468: ST_TO_ADDR
// normalCounter := 36 ;
71469: LD_ADDR_EXP 74
71473: PUSH
71474: LD_INT 36
71476: ST_TO_ADDR
// hardcoreCounter := 18 ;
71477: LD_ADDR_EXP 75
71481: PUSH
71482: LD_INT 18
71484: ST_TO_ADDR
// sRocket := false ;
71485: LD_ADDR_EXP 78
71489: PUSH
71490: LD_INT 0
71492: ST_TO_ADDR
// sSpeed := false ;
71493: LD_ADDR_EXP 77
71497: PUSH
71498: LD_INT 0
71500: ST_TO_ADDR
// sEngine := false ;
71501: LD_ADDR_EXP 79
71505: PUSH
71506: LD_INT 0
71508: ST_TO_ADDR
// sSpec := false ;
71509: LD_ADDR_EXP 76
71513: PUSH
71514: LD_INT 0
71516: ST_TO_ADDR
// sLevel := false ;
71517: LD_ADDR_EXP 80
71521: PUSH
71522: LD_INT 0
71524: ST_TO_ADDR
// sArmoury := false ;
71525: LD_ADDR_EXP 81
71529: PUSH
71530: LD_INT 0
71532: ST_TO_ADDR
// sRadar := false ;
71533: LD_ADDR_EXP 82
71537: PUSH
71538: LD_INT 0
71540: ST_TO_ADDR
// sBunker := false ;
71541: LD_ADDR_EXP 83
71545: PUSH
71546: LD_INT 0
71548: ST_TO_ADDR
// sHack := false ;
71549: LD_ADDR_EXP 84
71553: PUSH
71554: LD_INT 0
71556: ST_TO_ADDR
// sFire := false ;
71557: LD_ADDR_EXP 85
71561: PUSH
71562: LD_INT 0
71564: ST_TO_ADDR
// sRefresh := false ;
71565: LD_ADDR_EXP 86
71569: PUSH
71570: LD_INT 0
71572: ST_TO_ADDR
// sExp := false ;
71573: LD_ADDR_EXP 87
71577: PUSH
71578: LD_INT 0
71580: ST_TO_ADDR
// sDepot := false ;
71581: LD_ADDR_EXP 88
71585: PUSH
71586: LD_INT 0
71588: ST_TO_ADDR
// sFlag := false ;
71589: LD_ADDR_EXP 89
71593: PUSH
71594: LD_INT 0
71596: ST_TO_ADDR
// sKamikadze := false ;
71597: LD_ADDR_EXP 97
71601: PUSH
71602: LD_INT 0
71604: ST_TO_ADDR
// sTroll := false ;
71605: LD_ADDR_EXP 98
71609: PUSH
71610: LD_INT 0
71612: ST_TO_ADDR
// sSlow := false ;
71613: LD_ADDR_EXP 99
71617: PUSH
71618: LD_INT 0
71620: ST_TO_ADDR
// sLack := false ;
71621: LD_ADDR_EXP 100
71625: PUSH
71626: LD_INT 0
71628: ST_TO_ADDR
// sTank := false ;
71629: LD_ADDR_EXP 102
71633: PUSH
71634: LD_INT 0
71636: ST_TO_ADDR
// sRemote := false ;
71637: LD_ADDR_EXP 103
71641: PUSH
71642: LD_INT 0
71644: ST_TO_ADDR
// sPowell := false ;
71645: LD_ADDR_EXP 104
71649: PUSH
71650: LD_INT 0
71652: ST_TO_ADDR
// sTeleport := false ;
71653: LD_ADDR_EXP 107
71657: PUSH
71658: LD_INT 0
71660: ST_TO_ADDR
// sOilTower := false ;
71661: LD_ADDR_EXP 109
71665: PUSH
71666: LD_INT 0
71668: ST_TO_ADDR
// sShovel := false ;
71669: LD_ADDR_EXP 110
71673: PUSH
71674: LD_INT 0
71676: ST_TO_ADDR
// sSheik := false ;
71677: LD_ADDR_EXP 111
71681: PUSH
71682: LD_INT 0
71684: ST_TO_ADDR
// sEarthquake := false ;
71685: LD_ADDR_EXP 113
71689: PUSH
71690: LD_INT 0
71692: ST_TO_ADDR
// sAI := false ;
71693: LD_ADDR_EXP 114
71697: PUSH
71698: LD_INT 0
71700: ST_TO_ADDR
// sCargo := false ;
71701: LD_ADDR_EXP 117
71705: PUSH
71706: LD_INT 0
71708: ST_TO_ADDR
// sDLaser := false ;
71709: LD_ADDR_EXP 118
71713: PUSH
71714: LD_INT 0
71716: ST_TO_ADDR
// sExchange := false ;
71717: LD_ADDR_EXP 119
71721: PUSH
71722: LD_INT 0
71724: ST_TO_ADDR
// sFac := false ;
71725: LD_ADDR_EXP 120
71729: PUSH
71730: LD_INT 0
71732: ST_TO_ADDR
// sPower := false ;
71733: LD_ADDR_EXP 121
71737: PUSH
71738: LD_INT 0
71740: ST_TO_ADDR
// sRandom := false ;
71741: LD_ADDR_EXP 122
71745: PUSH
71746: LD_INT 0
71748: ST_TO_ADDR
// sShield := false ;
71749: LD_ADDR_EXP 123
71753: PUSH
71754: LD_INT 0
71756: ST_TO_ADDR
// sTime := false ;
71757: LD_ADDR_EXP 124
71761: PUSH
71762: LD_INT 0
71764: ST_TO_ADDR
// sTools := false ;
71765: LD_ADDR_EXP 125
71769: PUSH
71770: LD_INT 0
71772: ST_TO_ADDR
// sSold := false ;
71773: LD_ADDR_EXP 90
71777: PUSH
71778: LD_INT 0
71780: ST_TO_ADDR
// sDiff := false ;
71781: LD_ADDR_EXP 91
71785: PUSH
71786: LD_INT 0
71788: ST_TO_ADDR
// sFog := false ;
71789: LD_ADDR_EXP 94
71793: PUSH
71794: LD_INT 0
71796: ST_TO_ADDR
// sReset := false ;
71797: LD_ADDR_EXP 95
71801: PUSH
71802: LD_INT 0
71804: ST_TO_ADDR
// sSun := false ;
71805: LD_ADDR_EXP 96
71809: PUSH
71810: LD_INT 0
71812: ST_TO_ADDR
// sTiger := false ;
71813: LD_ADDR_EXP 92
71817: PUSH
71818: LD_INT 0
71820: ST_TO_ADDR
// sBomb := false ;
71821: LD_ADDR_EXP 93
71825: PUSH
71826: LD_INT 0
71828: ST_TO_ADDR
// sWound := false ;
71829: LD_ADDR_EXP 101
71833: PUSH
71834: LD_INT 0
71836: ST_TO_ADDR
// sBetray := false ;
71837: LD_ADDR_EXP 105
71841: PUSH
71842: LD_INT 0
71844: ST_TO_ADDR
// sContamin := false ;
71845: LD_ADDR_EXP 106
71849: PUSH
71850: LD_INT 0
71852: ST_TO_ADDR
// sOil := false ;
71853: LD_ADDR_EXP 108
71857: PUSH
71858: LD_INT 0
71860: ST_TO_ADDR
// sStu := false ;
71861: LD_ADDR_EXP 112
71865: PUSH
71866: LD_INT 0
71868: ST_TO_ADDR
// sBazooka := false ;
71869: LD_ADDR_EXP 115
71873: PUSH
71874: LD_INT 0
71876: ST_TO_ADDR
// sMortar := false ;
71877: LD_ADDR_EXP 116
71881: PUSH
71882: LD_INT 0
71884: ST_TO_ADDR
// sRanger := false ;
71885: LD_ADDR_EXP 126
71889: PUSH
71890: LD_INT 0
71892: ST_TO_ADDR
// sComputer := false ;
71893: LD_ADDR_EXP 127
71897: PUSH
71898: LD_INT 0
71900: ST_TO_ADDR
// s30 := false ;
71901: LD_ADDR_EXP 128
71905: PUSH
71906: LD_INT 0
71908: ST_TO_ADDR
// s60 := false ;
71909: LD_ADDR_EXP 129
71913: PUSH
71914: LD_INT 0
71916: ST_TO_ADDR
// end ;
71917: LD_VAR 0 1
71921: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
71922: LD_INT 0
71924: PPUSH
71925: PPUSH
71926: PPUSH
71927: PPUSH
71928: PPUSH
71929: PPUSH
71930: PPUSH
// result := [ ] ;
71931: LD_ADDR_VAR 0 2
71935: PUSH
71936: EMPTY
71937: ST_TO_ADDR
// if campaign_id = 1 then
71938: LD_OWVAR 69
71942: PUSH
71943: LD_INT 1
71945: EQUAL
71946: IFFALSE 75112
// begin case mission_number of 1 :
71948: LD_OWVAR 70
71952: PUSH
71953: LD_INT 1
71955: DOUBLE
71956: EQUAL
71957: IFTRUE 71961
71959: GO 72037
71961: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
71962: LD_ADDR_VAR 0 2
71966: PUSH
71967: LD_INT 2
71969: PUSH
71970: LD_INT 4
71972: PUSH
71973: LD_INT 11
71975: PUSH
71976: LD_INT 12
71978: PUSH
71979: LD_INT 15
71981: PUSH
71982: LD_INT 16
71984: PUSH
71985: LD_INT 22
71987: PUSH
71988: LD_INT 23
71990: PUSH
71991: LD_INT 26
71993: PUSH
71994: EMPTY
71995: LIST
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: LIST
72003: LIST
72004: PUSH
72005: LD_INT 101
72007: PUSH
72008: LD_INT 102
72010: PUSH
72011: LD_INT 106
72013: PUSH
72014: LD_INT 116
72016: PUSH
72017: LD_INT 117
72019: PUSH
72020: LD_INT 118
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: PUSH
72031: EMPTY
72032: LIST
72033: LIST
72034: ST_TO_ADDR
72035: GO 75110
72037: LD_INT 2
72039: DOUBLE
72040: EQUAL
72041: IFTRUE 72045
72043: GO 72129
72045: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
72046: LD_ADDR_VAR 0 2
72050: PUSH
72051: LD_INT 2
72053: PUSH
72054: LD_INT 4
72056: PUSH
72057: LD_INT 11
72059: PUSH
72060: LD_INT 12
72062: PUSH
72063: LD_INT 15
72065: PUSH
72066: LD_INT 16
72068: PUSH
72069: LD_INT 22
72071: PUSH
72072: LD_INT 23
72074: PUSH
72075: LD_INT 26
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: PUSH
72089: LD_INT 101
72091: PUSH
72092: LD_INT 102
72094: PUSH
72095: LD_INT 105
72097: PUSH
72098: LD_INT 106
72100: PUSH
72101: LD_INT 108
72103: PUSH
72104: LD_INT 116
72106: PUSH
72107: LD_INT 117
72109: PUSH
72110: LD_INT 118
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: ST_TO_ADDR
72127: GO 75110
72129: LD_INT 3
72131: DOUBLE
72132: EQUAL
72133: IFTRUE 72137
72135: GO 72225
72137: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
72138: LD_ADDR_VAR 0 2
72142: PUSH
72143: LD_INT 2
72145: PUSH
72146: LD_INT 4
72148: PUSH
72149: LD_INT 5
72151: PUSH
72152: LD_INT 11
72154: PUSH
72155: LD_INT 12
72157: PUSH
72158: LD_INT 15
72160: PUSH
72161: LD_INT 16
72163: PUSH
72164: LD_INT 22
72166: PUSH
72167: LD_INT 26
72169: PUSH
72170: LD_INT 36
72172: PUSH
72173: EMPTY
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: LIST
72182: LIST
72183: LIST
72184: PUSH
72185: LD_INT 101
72187: PUSH
72188: LD_INT 102
72190: PUSH
72191: LD_INT 105
72193: PUSH
72194: LD_INT 106
72196: PUSH
72197: LD_INT 108
72199: PUSH
72200: LD_INT 116
72202: PUSH
72203: LD_INT 117
72205: PUSH
72206: LD_INT 118
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: LIST
72213: LIST
72214: LIST
72215: LIST
72216: LIST
72217: LIST
72218: PUSH
72219: EMPTY
72220: LIST
72221: LIST
72222: ST_TO_ADDR
72223: GO 75110
72225: LD_INT 4
72227: DOUBLE
72228: EQUAL
72229: IFTRUE 72233
72231: GO 72329
72233: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
72234: LD_ADDR_VAR 0 2
72238: PUSH
72239: LD_INT 2
72241: PUSH
72242: LD_INT 4
72244: PUSH
72245: LD_INT 5
72247: PUSH
72248: LD_INT 8
72250: PUSH
72251: LD_INT 11
72253: PUSH
72254: LD_INT 12
72256: PUSH
72257: LD_INT 15
72259: PUSH
72260: LD_INT 16
72262: PUSH
72263: LD_INT 22
72265: PUSH
72266: LD_INT 23
72268: PUSH
72269: LD_INT 26
72271: PUSH
72272: LD_INT 36
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 101
72291: PUSH
72292: LD_INT 102
72294: PUSH
72295: LD_INT 105
72297: PUSH
72298: LD_INT 106
72300: PUSH
72301: LD_INT 108
72303: PUSH
72304: LD_INT 116
72306: PUSH
72307: LD_INT 117
72309: PUSH
72310: LD_INT 118
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: LIST
72321: LIST
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: ST_TO_ADDR
72327: GO 75110
72329: LD_INT 5
72331: DOUBLE
72332: EQUAL
72333: IFTRUE 72337
72335: GO 72449
72337: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
72338: LD_ADDR_VAR 0 2
72342: PUSH
72343: LD_INT 2
72345: PUSH
72346: LD_INT 4
72348: PUSH
72349: LD_INT 5
72351: PUSH
72352: LD_INT 6
72354: PUSH
72355: LD_INT 8
72357: PUSH
72358: LD_INT 11
72360: PUSH
72361: LD_INT 12
72363: PUSH
72364: LD_INT 15
72366: PUSH
72367: LD_INT 16
72369: PUSH
72370: LD_INT 22
72372: PUSH
72373: LD_INT 23
72375: PUSH
72376: LD_INT 25
72378: PUSH
72379: LD_INT 26
72381: PUSH
72382: LD_INT 36
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: LIST
72389: LIST
72390: LIST
72391: LIST
72392: LIST
72393: LIST
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 101
72403: PUSH
72404: LD_INT 102
72406: PUSH
72407: LD_INT 105
72409: PUSH
72410: LD_INT 106
72412: PUSH
72413: LD_INT 108
72415: PUSH
72416: LD_INT 109
72418: PUSH
72419: LD_INT 112
72421: PUSH
72422: LD_INT 116
72424: PUSH
72425: LD_INT 117
72427: PUSH
72428: LD_INT 118
72430: PUSH
72431: EMPTY
72432: LIST
72433: LIST
72434: LIST
72435: LIST
72436: LIST
72437: LIST
72438: LIST
72439: LIST
72440: LIST
72441: LIST
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: ST_TO_ADDR
72447: GO 75110
72449: LD_INT 6
72451: DOUBLE
72452: EQUAL
72453: IFTRUE 72457
72455: GO 72589
72457: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
72458: LD_ADDR_VAR 0 2
72462: PUSH
72463: LD_INT 2
72465: PUSH
72466: LD_INT 4
72468: PUSH
72469: LD_INT 5
72471: PUSH
72472: LD_INT 6
72474: PUSH
72475: LD_INT 8
72477: PUSH
72478: LD_INT 11
72480: PUSH
72481: LD_INT 12
72483: PUSH
72484: LD_INT 15
72486: PUSH
72487: LD_INT 16
72489: PUSH
72490: LD_INT 20
72492: PUSH
72493: LD_INT 21
72495: PUSH
72496: LD_INT 22
72498: PUSH
72499: LD_INT 23
72501: PUSH
72502: LD_INT 25
72504: PUSH
72505: LD_INT 26
72507: PUSH
72508: LD_INT 30
72510: PUSH
72511: LD_INT 31
72513: PUSH
72514: LD_INT 32
72516: PUSH
72517: LD_INT 36
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: LIST
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: PUSH
72541: LD_INT 101
72543: PUSH
72544: LD_INT 102
72546: PUSH
72547: LD_INT 105
72549: PUSH
72550: LD_INT 106
72552: PUSH
72553: LD_INT 108
72555: PUSH
72556: LD_INT 109
72558: PUSH
72559: LD_INT 112
72561: PUSH
72562: LD_INT 116
72564: PUSH
72565: LD_INT 117
72567: PUSH
72568: LD_INT 118
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: LIST
72575: LIST
72576: LIST
72577: LIST
72578: LIST
72579: LIST
72580: LIST
72581: LIST
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: ST_TO_ADDR
72587: GO 75110
72589: LD_INT 7
72591: DOUBLE
72592: EQUAL
72593: IFTRUE 72597
72595: GO 72709
72597: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
72598: LD_ADDR_VAR 0 2
72602: PUSH
72603: LD_INT 2
72605: PUSH
72606: LD_INT 4
72608: PUSH
72609: LD_INT 5
72611: PUSH
72612: LD_INT 7
72614: PUSH
72615: LD_INT 11
72617: PUSH
72618: LD_INT 12
72620: PUSH
72621: LD_INT 15
72623: PUSH
72624: LD_INT 16
72626: PUSH
72627: LD_INT 20
72629: PUSH
72630: LD_INT 21
72632: PUSH
72633: LD_INT 22
72635: PUSH
72636: LD_INT 23
72638: PUSH
72639: LD_INT 25
72641: PUSH
72642: LD_INT 26
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: PUSH
72661: LD_INT 101
72663: PUSH
72664: LD_INT 102
72666: PUSH
72667: LD_INT 103
72669: PUSH
72670: LD_INT 105
72672: PUSH
72673: LD_INT 106
72675: PUSH
72676: LD_INT 108
72678: PUSH
72679: LD_INT 112
72681: PUSH
72682: LD_INT 116
72684: PUSH
72685: LD_INT 117
72687: PUSH
72688: LD_INT 118
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: PUSH
72703: EMPTY
72704: LIST
72705: LIST
72706: ST_TO_ADDR
72707: GO 75110
72709: LD_INT 8
72711: DOUBLE
72712: EQUAL
72713: IFTRUE 72717
72715: GO 72857
72717: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
72718: LD_ADDR_VAR 0 2
72722: PUSH
72723: LD_INT 2
72725: PUSH
72726: LD_INT 4
72728: PUSH
72729: LD_INT 5
72731: PUSH
72732: LD_INT 6
72734: PUSH
72735: LD_INT 7
72737: PUSH
72738: LD_INT 8
72740: PUSH
72741: LD_INT 11
72743: PUSH
72744: LD_INT 12
72746: PUSH
72747: LD_INT 15
72749: PUSH
72750: LD_INT 16
72752: PUSH
72753: LD_INT 20
72755: PUSH
72756: LD_INT 21
72758: PUSH
72759: LD_INT 22
72761: PUSH
72762: LD_INT 23
72764: PUSH
72765: LD_INT 25
72767: PUSH
72768: LD_INT 26
72770: PUSH
72771: LD_INT 30
72773: PUSH
72774: LD_INT 31
72776: PUSH
72777: LD_INT 32
72779: PUSH
72780: LD_INT 36
72782: PUSH
72783: EMPTY
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: LIST
72795: LIST
72796: LIST
72797: LIST
72798: LIST
72799: LIST
72800: LIST
72801: LIST
72802: LIST
72803: LIST
72804: PUSH
72805: LD_INT 101
72807: PUSH
72808: LD_INT 102
72810: PUSH
72811: LD_INT 103
72813: PUSH
72814: LD_INT 105
72816: PUSH
72817: LD_INT 106
72819: PUSH
72820: LD_INT 108
72822: PUSH
72823: LD_INT 109
72825: PUSH
72826: LD_INT 112
72828: PUSH
72829: LD_INT 116
72831: PUSH
72832: LD_INT 117
72834: PUSH
72835: LD_INT 118
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: LIST
72846: LIST
72847: LIST
72848: LIST
72849: LIST
72850: PUSH
72851: EMPTY
72852: LIST
72853: LIST
72854: ST_TO_ADDR
72855: GO 75110
72857: LD_INT 9
72859: DOUBLE
72860: EQUAL
72861: IFTRUE 72865
72863: GO 73013
72865: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
72866: LD_ADDR_VAR 0 2
72870: PUSH
72871: LD_INT 2
72873: PUSH
72874: LD_INT 4
72876: PUSH
72877: LD_INT 5
72879: PUSH
72880: LD_INT 6
72882: PUSH
72883: LD_INT 7
72885: PUSH
72886: LD_INT 8
72888: PUSH
72889: LD_INT 11
72891: PUSH
72892: LD_INT 12
72894: PUSH
72895: LD_INT 15
72897: PUSH
72898: LD_INT 16
72900: PUSH
72901: LD_INT 20
72903: PUSH
72904: LD_INT 21
72906: PUSH
72907: LD_INT 22
72909: PUSH
72910: LD_INT 23
72912: PUSH
72913: LD_INT 25
72915: PUSH
72916: LD_INT 26
72918: PUSH
72919: LD_INT 28
72921: PUSH
72922: LD_INT 30
72924: PUSH
72925: LD_INT 31
72927: PUSH
72928: LD_INT 32
72930: PUSH
72931: LD_INT 36
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: LIST
72938: LIST
72939: LIST
72940: LIST
72941: LIST
72942: LIST
72943: LIST
72944: LIST
72945: LIST
72946: LIST
72947: LIST
72948: LIST
72949: LIST
72950: LIST
72951: LIST
72952: LIST
72953: LIST
72954: LIST
72955: LIST
72956: PUSH
72957: LD_INT 101
72959: PUSH
72960: LD_INT 102
72962: PUSH
72963: LD_INT 103
72965: PUSH
72966: LD_INT 105
72968: PUSH
72969: LD_INT 106
72971: PUSH
72972: LD_INT 108
72974: PUSH
72975: LD_INT 109
72977: PUSH
72978: LD_INT 112
72980: PUSH
72981: LD_INT 114
72983: PUSH
72984: LD_INT 116
72986: PUSH
72987: LD_INT 117
72989: PUSH
72990: LD_INT 118
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: PUSH
73007: EMPTY
73008: LIST
73009: LIST
73010: ST_TO_ADDR
73011: GO 75110
73013: LD_INT 10
73015: DOUBLE
73016: EQUAL
73017: IFTRUE 73021
73019: GO 73217
73021: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
73022: LD_ADDR_VAR 0 2
73026: PUSH
73027: LD_INT 2
73029: PUSH
73030: LD_INT 4
73032: PUSH
73033: LD_INT 5
73035: PUSH
73036: LD_INT 6
73038: PUSH
73039: LD_INT 7
73041: PUSH
73042: LD_INT 8
73044: PUSH
73045: LD_INT 9
73047: PUSH
73048: LD_INT 10
73050: PUSH
73051: LD_INT 11
73053: PUSH
73054: LD_INT 12
73056: PUSH
73057: LD_INT 13
73059: PUSH
73060: LD_INT 14
73062: PUSH
73063: LD_INT 15
73065: PUSH
73066: LD_INT 16
73068: PUSH
73069: LD_INT 17
73071: PUSH
73072: LD_INT 18
73074: PUSH
73075: LD_INT 19
73077: PUSH
73078: LD_INT 20
73080: PUSH
73081: LD_INT 21
73083: PUSH
73084: LD_INT 22
73086: PUSH
73087: LD_INT 23
73089: PUSH
73090: LD_INT 24
73092: PUSH
73093: LD_INT 25
73095: PUSH
73096: LD_INT 26
73098: PUSH
73099: LD_INT 28
73101: PUSH
73102: LD_INT 30
73104: PUSH
73105: LD_INT 31
73107: PUSH
73108: LD_INT 32
73110: PUSH
73111: LD_INT 36
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: LIST
73118: LIST
73119: LIST
73120: LIST
73121: LIST
73122: LIST
73123: LIST
73124: LIST
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: LIST
73132: LIST
73133: LIST
73134: LIST
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: PUSH
73145: LD_INT 101
73147: PUSH
73148: LD_INT 102
73150: PUSH
73151: LD_INT 103
73153: PUSH
73154: LD_INT 104
73156: PUSH
73157: LD_INT 105
73159: PUSH
73160: LD_INT 106
73162: PUSH
73163: LD_INT 107
73165: PUSH
73166: LD_INT 108
73168: PUSH
73169: LD_INT 109
73171: PUSH
73172: LD_INT 110
73174: PUSH
73175: LD_INT 111
73177: PUSH
73178: LD_INT 112
73180: PUSH
73181: LD_INT 114
73183: PUSH
73184: LD_INT 116
73186: PUSH
73187: LD_INT 117
73189: PUSH
73190: LD_INT 118
73192: PUSH
73193: EMPTY
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: PUSH
73211: EMPTY
73212: LIST
73213: LIST
73214: ST_TO_ADDR
73215: GO 75110
73217: LD_INT 11
73219: DOUBLE
73220: EQUAL
73221: IFTRUE 73225
73223: GO 73429
73225: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
73226: LD_ADDR_VAR 0 2
73230: PUSH
73231: LD_INT 2
73233: PUSH
73234: LD_INT 3
73236: PUSH
73237: LD_INT 4
73239: PUSH
73240: LD_INT 5
73242: PUSH
73243: LD_INT 6
73245: PUSH
73246: LD_INT 7
73248: PUSH
73249: LD_INT 8
73251: PUSH
73252: LD_INT 9
73254: PUSH
73255: LD_INT 10
73257: PUSH
73258: LD_INT 11
73260: PUSH
73261: LD_INT 12
73263: PUSH
73264: LD_INT 13
73266: PUSH
73267: LD_INT 14
73269: PUSH
73270: LD_INT 15
73272: PUSH
73273: LD_INT 16
73275: PUSH
73276: LD_INT 17
73278: PUSH
73279: LD_INT 18
73281: PUSH
73282: LD_INT 19
73284: PUSH
73285: LD_INT 20
73287: PUSH
73288: LD_INT 21
73290: PUSH
73291: LD_INT 22
73293: PUSH
73294: LD_INT 23
73296: PUSH
73297: LD_INT 24
73299: PUSH
73300: LD_INT 25
73302: PUSH
73303: LD_INT 26
73305: PUSH
73306: LD_INT 28
73308: PUSH
73309: LD_INT 30
73311: PUSH
73312: LD_INT 31
73314: PUSH
73315: LD_INT 32
73317: PUSH
73318: LD_INT 34
73320: PUSH
73321: LD_INT 36
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: LIST
73339: LIST
73340: LIST
73341: LIST
73342: LIST
73343: LIST
73344: LIST
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: PUSH
73357: LD_INT 101
73359: PUSH
73360: LD_INT 102
73362: PUSH
73363: LD_INT 103
73365: PUSH
73366: LD_INT 104
73368: PUSH
73369: LD_INT 105
73371: PUSH
73372: LD_INT 106
73374: PUSH
73375: LD_INT 107
73377: PUSH
73378: LD_INT 108
73380: PUSH
73381: LD_INT 109
73383: PUSH
73384: LD_INT 110
73386: PUSH
73387: LD_INT 111
73389: PUSH
73390: LD_INT 112
73392: PUSH
73393: LD_INT 114
73395: PUSH
73396: LD_INT 116
73398: PUSH
73399: LD_INT 117
73401: PUSH
73402: LD_INT 118
73404: PUSH
73405: EMPTY
73406: LIST
73407: LIST
73408: LIST
73409: LIST
73410: LIST
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: ST_TO_ADDR
73427: GO 75110
73429: LD_INT 12
73431: DOUBLE
73432: EQUAL
73433: IFTRUE 73437
73435: GO 73657
73437: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
73438: LD_ADDR_VAR 0 2
73442: PUSH
73443: LD_INT 1
73445: PUSH
73446: LD_INT 2
73448: PUSH
73449: LD_INT 3
73451: PUSH
73452: LD_INT 4
73454: PUSH
73455: LD_INT 5
73457: PUSH
73458: LD_INT 6
73460: PUSH
73461: LD_INT 7
73463: PUSH
73464: LD_INT 8
73466: PUSH
73467: LD_INT 9
73469: PUSH
73470: LD_INT 10
73472: PUSH
73473: LD_INT 11
73475: PUSH
73476: LD_INT 12
73478: PUSH
73479: LD_INT 13
73481: PUSH
73482: LD_INT 14
73484: PUSH
73485: LD_INT 15
73487: PUSH
73488: LD_INT 16
73490: PUSH
73491: LD_INT 17
73493: PUSH
73494: LD_INT 18
73496: PUSH
73497: LD_INT 19
73499: PUSH
73500: LD_INT 20
73502: PUSH
73503: LD_INT 21
73505: PUSH
73506: LD_INT 22
73508: PUSH
73509: LD_INT 23
73511: PUSH
73512: LD_INT 24
73514: PUSH
73515: LD_INT 25
73517: PUSH
73518: LD_INT 26
73520: PUSH
73521: LD_INT 27
73523: PUSH
73524: LD_INT 28
73526: PUSH
73527: LD_INT 30
73529: PUSH
73530: LD_INT 31
73532: PUSH
73533: LD_INT 32
73535: PUSH
73536: LD_INT 33
73538: PUSH
73539: LD_INT 34
73541: PUSH
73542: LD_INT 36
73544: PUSH
73545: EMPTY
73546: LIST
73547: LIST
73548: LIST
73549: LIST
73550: LIST
73551: LIST
73552: LIST
73553: LIST
73554: LIST
73555: LIST
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: LIST
73574: LIST
73575: LIST
73576: LIST
73577: LIST
73578: LIST
73579: LIST
73580: PUSH
73581: LD_INT 101
73583: PUSH
73584: LD_INT 102
73586: PUSH
73587: LD_INT 103
73589: PUSH
73590: LD_INT 104
73592: PUSH
73593: LD_INT 105
73595: PUSH
73596: LD_INT 106
73598: PUSH
73599: LD_INT 107
73601: PUSH
73602: LD_INT 108
73604: PUSH
73605: LD_INT 109
73607: PUSH
73608: LD_INT 110
73610: PUSH
73611: LD_INT 111
73613: PUSH
73614: LD_INT 112
73616: PUSH
73617: LD_INT 113
73619: PUSH
73620: LD_INT 114
73622: PUSH
73623: LD_INT 116
73625: PUSH
73626: LD_INT 117
73628: PUSH
73629: LD_INT 118
73631: PUSH
73632: EMPTY
73633: LIST
73634: LIST
73635: LIST
73636: LIST
73637: LIST
73638: LIST
73639: LIST
73640: LIST
73641: LIST
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: LIST
73647: LIST
73648: LIST
73649: LIST
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: ST_TO_ADDR
73655: GO 75110
73657: LD_INT 13
73659: DOUBLE
73660: EQUAL
73661: IFTRUE 73665
73663: GO 73873
73665: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
73666: LD_ADDR_VAR 0 2
73670: PUSH
73671: LD_INT 1
73673: PUSH
73674: LD_INT 2
73676: PUSH
73677: LD_INT 3
73679: PUSH
73680: LD_INT 4
73682: PUSH
73683: LD_INT 5
73685: PUSH
73686: LD_INT 8
73688: PUSH
73689: LD_INT 9
73691: PUSH
73692: LD_INT 10
73694: PUSH
73695: LD_INT 11
73697: PUSH
73698: LD_INT 12
73700: PUSH
73701: LD_INT 14
73703: PUSH
73704: LD_INT 15
73706: PUSH
73707: LD_INT 16
73709: PUSH
73710: LD_INT 17
73712: PUSH
73713: LD_INT 18
73715: PUSH
73716: LD_INT 19
73718: PUSH
73719: LD_INT 20
73721: PUSH
73722: LD_INT 21
73724: PUSH
73725: LD_INT 22
73727: PUSH
73728: LD_INT 23
73730: PUSH
73731: LD_INT 24
73733: PUSH
73734: LD_INT 25
73736: PUSH
73737: LD_INT 26
73739: PUSH
73740: LD_INT 27
73742: PUSH
73743: LD_INT 28
73745: PUSH
73746: LD_INT 30
73748: PUSH
73749: LD_INT 31
73751: PUSH
73752: LD_INT 32
73754: PUSH
73755: LD_INT 33
73757: PUSH
73758: LD_INT 34
73760: PUSH
73761: LD_INT 36
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: LIST
73768: LIST
73769: LIST
73770: LIST
73771: LIST
73772: LIST
73773: LIST
73774: LIST
73775: LIST
73776: LIST
73777: LIST
73778: LIST
73779: LIST
73780: LIST
73781: LIST
73782: LIST
73783: LIST
73784: LIST
73785: LIST
73786: LIST
73787: LIST
73788: LIST
73789: LIST
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: LIST
73795: LIST
73796: PUSH
73797: LD_INT 101
73799: PUSH
73800: LD_INT 102
73802: PUSH
73803: LD_INT 103
73805: PUSH
73806: LD_INT 104
73808: PUSH
73809: LD_INT 105
73811: PUSH
73812: LD_INT 106
73814: PUSH
73815: LD_INT 107
73817: PUSH
73818: LD_INT 108
73820: PUSH
73821: LD_INT 109
73823: PUSH
73824: LD_INT 110
73826: PUSH
73827: LD_INT 111
73829: PUSH
73830: LD_INT 112
73832: PUSH
73833: LD_INT 113
73835: PUSH
73836: LD_INT 114
73838: PUSH
73839: LD_INT 116
73841: PUSH
73842: LD_INT 117
73844: PUSH
73845: LD_INT 118
73847: PUSH
73848: EMPTY
73849: LIST
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: LIST
73865: LIST
73866: PUSH
73867: EMPTY
73868: LIST
73869: LIST
73870: ST_TO_ADDR
73871: GO 75110
73873: LD_INT 14
73875: DOUBLE
73876: EQUAL
73877: IFTRUE 73881
73879: GO 74105
73881: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
73882: LD_ADDR_VAR 0 2
73886: PUSH
73887: LD_INT 1
73889: PUSH
73890: LD_INT 2
73892: PUSH
73893: LD_INT 3
73895: PUSH
73896: LD_INT 4
73898: PUSH
73899: LD_INT 5
73901: PUSH
73902: LD_INT 6
73904: PUSH
73905: LD_INT 7
73907: PUSH
73908: LD_INT 8
73910: PUSH
73911: LD_INT 9
73913: PUSH
73914: LD_INT 10
73916: PUSH
73917: LD_INT 11
73919: PUSH
73920: LD_INT 12
73922: PUSH
73923: LD_INT 13
73925: PUSH
73926: LD_INT 14
73928: PUSH
73929: LD_INT 15
73931: PUSH
73932: LD_INT 16
73934: PUSH
73935: LD_INT 17
73937: PUSH
73938: LD_INT 18
73940: PUSH
73941: LD_INT 19
73943: PUSH
73944: LD_INT 20
73946: PUSH
73947: LD_INT 21
73949: PUSH
73950: LD_INT 22
73952: PUSH
73953: LD_INT 23
73955: PUSH
73956: LD_INT 24
73958: PUSH
73959: LD_INT 25
73961: PUSH
73962: LD_INT 26
73964: PUSH
73965: LD_INT 27
73967: PUSH
73968: LD_INT 28
73970: PUSH
73971: LD_INT 29
73973: PUSH
73974: LD_INT 30
73976: PUSH
73977: LD_INT 31
73979: PUSH
73980: LD_INT 32
73982: PUSH
73983: LD_INT 33
73985: PUSH
73986: LD_INT 34
73988: PUSH
73989: LD_INT 36
73991: PUSH
73992: EMPTY
73993: LIST
73994: LIST
73995: LIST
73996: LIST
73997: LIST
73998: LIST
73999: LIST
74000: LIST
74001: LIST
74002: LIST
74003: LIST
74004: LIST
74005: LIST
74006: LIST
74007: LIST
74008: LIST
74009: LIST
74010: LIST
74011: LIST
74012: LIST
74013: LIST
74014: LIST
74015: LIST
74016: LIST
74017: LIST
74018: LIST
74019: LIST
74020: LIST
74021: LIST
74022: LIST
74023: LIST
74024: LIST
74025: LIST
74026: LIST
74027: LIST
74028: PUSH
74029: LD_INT 101
74031: PUSH
74032: LD_INT 102
74034: PUSH
74035: LD_INT 103
74037: PUSH
74038: LD_INT 104
74040: PUSH
74041: LD_INT 105
74043: PUSH
74044: LD_INT 106
74046: PUSH
74047: LD_INT 107
74049: PUSH
74050: LD_INT 108
74052: PUSH
74053: LD_INT 109
74055: PUSH
74056: LD_INT 110
74058: PUSH
74059: LD_INT 111
74061: PUSH
74062: LD_INT 112
74064: PUSH
74065: LD_INT 113
74067: PUSH
74068: LD_INT 114
74070: PUSH
74071: LD_INT 116
74073: PUSH
74074: LD_INT 117
74076: PUSH
74077: LD_INT 118
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: LIST
74084: LIST
74085: LIST
74086: LIST
74087: LIST
74088: LIST
74089: LIST
74090: LIST
74091: LIST
74092: LIST
74093: LIST
74094: LIST
74095: LIST
74096: LIST
74097: LIST
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: ST_TO_ADDR
74103: GO 75110
74105: LD_INT 15
74107: DOUBLE
74108: EQUAL
74109: IFTRUE 74113
74111: GO 74337
74113: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
74114: LD_ADDR_VAR 0 2
74118: PUSH
74119: LD_INT 1
74121: PUSH
74122: LD_INT 2
74124: PUSH
74125: LD_INT 3
74127: PUSH
74128: LD_INT 4
74130: PUSH
74131: LD_INT 5
74133: PUSH
74134: LD_INT 6
74136: PUSH
74137: LD_INT 7
74139: PUSH
74140: LD_INT 8
74142: PUSH
74143: LD_INT 9
74145: PUSH
74146: LD_INT 10
74148: PUSH
74149: LD_INT 11
74151: PUSH
74152: LD_INT 12
74154: PUSH
74155: LD_INT 13
74157: PUSH
74158: LD_INT 14
74160: PUSH
74161: LD_INT 15
74163: PUSH
74164: LD_INT 16
74166: PUSH
74167: LD_INT 17
74169: PUSH
74170: LD_INT 18
74172: PUSH
74173: LD_INT 19
74175: PUSH
74176: LD_INT 20
74178: PUSH
74179: LD_INT 21
74181: PUSH
74182: LD_INT 22
74184: PUSH
74185: LD_INT 23
74187: PUSH
74188: LD_INT 24
74190: PUSH
74191: LD_INT 25
74193: PUSH
74194: LD_INT 26
74196: PUSH
74197: LD_INT 27
74199: PUSH
74200: LD_INT 28
74202: PUSH
74203: LD_INT 29
74205: PUSH
74206: LD_INT 30
74208: PUSH
74209: LD_INT 31
74211: PUSH
74212: LD_INT 32
74214: PUSH
74215: LD_INT 33
74217: PUSH
74218: LD_INT 34
74220: PUSH
74221: LD_INT 36
74223: PUSH
74224: EMPTY
74225: LIST
74226: LIST
74227: LIST
74228: LIST
74229: LIST
74230: LIST
74231: LIST
74232: LIST
74233: LIST
74234: LIST
74235: LIST
74236: LIST
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: PUSH
74261: LD_INT 101
74263: PUSH
74264: LD_INT 102
74266: PUSH
74267: LD_INT 103
74269: PUSH
74270: LD_INT 104
74272: PUSH
74273: LD_INT 105
74275: PUSH
74276: LD_INT 106
74278: PUSH
74279: LD_INT 107
74281: PUSH
74282: LD_INT 108
74284: PUSH
74285: LD_INT 109
74287: PUSH
74288: LD_INT 110
74290: PUSH
74291: LD_INT 111
74293: PUSH
74294: LD_INT 112
74296: PUSH
74297: LD_INT 113
74299: PUSH
74300: LD_INT 114
74302: PUSH
74303: LD_INT 116
74305: PUSH
74306: LD_INT 117
74308: PUSH
74309: LD_INT 118
74311: PUSH
74312: EMPTY
74313: LIST
74314: LIST
74315: LIST
74316: LIST
74317: LIST
74318: LIST
74319: LIST
74320: LIST
74321: LIST
74322: LIST
74323: LIST
74324: LIST
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: PUSH
74331: EMPTY
74332: LIST
74333: LIST
74334: ST_TO_ADDR
74335: GO 75110
74337: LD_INT 16
74339: DOUBLE
74340: EQUAL
74341: IFTRUE 74345
74343: GO 74481
74345: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
74346: LD_ADDR_VAR 0 2
74350: PUSH
74351: LD_INT 2
74353: PUSH
74354: LD_INT 4
74356: PUSH
74357: LD_INT 5
74359: PUSH
74360: LD_INT 7
74362: PUSH
74363: LD_INT 11
74365: PUSH
74366: LD_INT 12
74368: PUSH
74369: LD_INT 15
74371: PUSH
74372: LD_INT 16
74374: PUSH
74375: LD_INT 20
74377: PUSH
74378: LD_INT 21
74380: PUSH
74381: LD_INT 22
74383: PUSH
74384: LD_INT 23
74386: PUSH
74387: LD_INT 25
74389: PUSH
74390: LD_INT 26
74392: PUSH
74393: LD_INT 30
74395: PUSH
74396: LD_INT 31
74398: PUSH
74399: LD_INT 32
74401: PUSH
74402: LD_INT 33
74404: PUSH
74405: LD_INT 34
74407: PUSH
74408: EMPTY
74409: LIST
74410: LIST
74411: LIST
74412: LIST
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: LIST
74418: LIST
74419: LIST
74420: LIST
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: LIST
74427: LIST
74428: PUSH
74429: LD_INT 101
74431: PUSH
74432: LD_INT 102
74434: PUSH
74435: LD_INT 103
74437: PUSH
74438: LD_INT 106
74440: PUSH
74441: LD_INT 108
74443: PUSH
74444: LD_INT 112
74446: PUSH
74447: LD_INT 113
74449: PUSH
74450: LD_INT 114
74452: PUSH
74453: LD_INT 116
74455: PUSH
74456: LD_INT 117
74458: PUSH
74459: LD_INT 118
74461: PUSH
74462: EMPTY
74463: LIST
74464: LIST
74465: LIST
74466: LIST
74467: LIST
74468: LIST
74469: LIST
74470: LIST
74471: LIST
74472: LIST
74473: LIST
74474: PUSH
74475: EMPTY
74476: LIST
74477: LIST
74478: ST_TO_ADDR
74479: GO 75110
74481: LD_INT 17
74483: DOUBLE
74484: EQUAL
74485: IFTRUE 74489
74487: GO 74713
74489: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
74490: LD_ADDR_VAR 0 2
74494: PUSH
74495: LD_INT 1
74497: PUSH
74498: LD_INT 2
74500: PUSH
74501: LD_INT 3
74503: PUSH
74504: LD_INT 4
74506: PUSH
74507: LD_INT 5
74509: PUSH
74510: LD_INT 6
74512: PUSH
74513: LD_INT 7
74515: PUSH
74516: LD_INT 8
74518: PUSH
74519: LD_INT 9
74521: PUSH
74522: LD_INT 10
74524: PUSH
74525: LD_INT 11
74527: PUSH
74528: LD_INT 12
74530: PUSH
74531: LD_INT 13
74533: PUSH
74534: LD_INT 14
74536: PUSH
74537: LD_INT 15
74539: PUSH
74540: LD_INT 16
74542: PUSH
74543: LD_INT 17
74545: PUSH
74546: LD_INT 18
74548: PUSH
74549: LD_INT 19
74551: PUSH
74552: LD_INT 20
74554: PUSH
74555: LD_INT 21
74557: PUSH
74558: LD_INT 22
74560: PUSH
74561: LD_INT 23
74563: PUSH
74564: LD_INT 24
74566: PUSH
74567: LD_INT 25
74569: PUSH
74570: LD_INT 26
74572: PUSH
74573: LD_INT 27
74575: PUSH
74576: LD_INT 28
74578: PUSH
74579: LD_INT 29
74581: PUSH
74582: LD_INT 30
74584: PUSH
74585: LD_INT 31
74587: PUSH
74588: LD_INT 32
74590: PUSH
74591: LD_INT 33
74593: PUSH
74594: LD_INT 34
74596: PUSH
74597: LD_INT 36
74599: PUSH
74600: EMPTY
74601: LIST
74602: LIST
74603: LIST
74604: LIST
74605: LIST
74606: LIST
74607: LIST
74608: LIST
74609: LIST
74610: LIST
74611: LIST
74612: LIST
74613: LIST
74614: LIST
74615: LIST
74616: LIST
74617: LIST
74618: LIST
74619: LIST
74620: LIST
74621: LIST
74622: LIST
74623: LIST
74624: LIST
74625: LIST
74626: LIST
74627: LIST
74628: LIST
74629: LIST
74630: LIST
74631: LIST
74632: LIST
74633: LIST
74634: LIST
74635: LIST
74636: PUSH
74637: LD_INT 101
74639: PUSH
74640: LD_INT 102
74642: PUSH
74643: LD_INT 103
74645: PUSH
74646: LD_INT 104
74648: PUSH
74649: LD_INT 105
74651: PUSH
74652: LD_INT 106
74654: PUSH
74655: LD_INT 107
74657: PUSH
74658: LD_INT 108
74660: PUSH
74661: LD_INT 109
74663: PUSH
74664: LD_INT 110
74666: PUSH
74667: LD_INT 111
74669: PUSH
74670: LD_INT 112
74672: PUSH
74673: LD_INT 113
74675: PUSH
74676: LD_INT 114
74678: PUSH
74679: LD_INT 116
74681: PUSH
74682: LD_INT 117
74684: PUSH
74685: LD_INT 118
74687: PUSH
74688: EMPTY
74689: LIST
74690: LIST
74691: LIST
74692: LIST
74693: LIST
74694: LIST
74695: LIST
74696: LIST
74697: LIST
74698: LIST
74699: LIST
74700: LIST
74701: LIST
74702: LIST
74703: LIST
74704: LIST
74705: LIST
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: ST_TO_ADDR
74711: GO 75110
74713: LD_INT 18
74715: DOUBLE
74716: EQUAL
74717: IFTRUE 74721
74719: GO 74869
74721: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
74722: LD_ADDR_VAR 0 2
74726: PUSH
74727: LD_INT 2
74729: PUSH
74730: LD_INT 4
74732: PUSH
74733: LD_INT 5
74735: PUSH
74736: LD_INT 7
74738: PUSH
74739: LD_INT 11
74741: PUSH
74742: LD_INT 12
74744: PUSH
74745: LD_INT 15
74747: PUSH
74748: LD_INT 16
74750: PUSH
74751: LD_INT 20
74753: PUSH
74754: LD_INT 21
74756: PUSH
74757: LD_INT 22
74759: PUSH
74760: LD_INT 23
74762: PUSH
74763: LD_INT 25
74765: PUSH
74766: LD_INT 26
74768: PUSH
74769: LD_INT 30
74771: PUSH
74772: LD_INT 31
74774: PUSH
74775: LD_INT 32
74777: PUSH
74778: LD_INT 33
74780: PUSH
74781: LD_INT 34
74783: PUSH
74784: LD_INT 35
74786: PUSH
74787: LD_INT 36
74789: PUSH
74790: EMPTY
74791: LIST
74792: LIST
74793: LIST
74794: LIST
74795: LIST
74796: LIST
74797: LIST
74798: LIST
74799: LIST
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: PUSH
74813: LD_INT 101
74815: PUSH
74816: LD_INT 102
74818: PUSH
74819: LD_INT 103
74821: PUSH
74822: LD_INT 106
74824: PUSH
74825: LD_INT 108
74827: PUSH
74828: LD_INT 112
74830: PUSH
74831: LD_INT 113
74833: PUSH
74834: LD_INT 114
74836: PUSH
74837: LD_INT 115
74839: PUSH
74840: LD_INT 116
74842: PUSH
74843: LD_INT 117
74845: PUSH
74846: LD_INT 118
74848: PUSH
74849: EMPTY
74850: LIST
74851: LIST
74852: LIST
74853: LIST
74854: LIST
74855: LIST
74856: LIST
74857: LIST
74858: LIST
74859: LIST
74860: LIST
74861: LIST
74862: PUSH
74863: EMPTY
74864: LIST
74865: LIST
74866: ST_TO_ADDR
74867: GO 75110
74869: LD_INT 19
74871: DOUBLE
74872: EQUAL
74873: IFTRUE 74877
74875: GO 75109
74877: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
74878: LD_ADDR_VAR 0 2
74882: PUSH
74883: LD_INT 1
74885: PUSH
74886: LD_INT 2
74888: PUSH
74889: LD_INT 3
74891: PUSH
74892: LD_INT 4
74894: PUSH
74895: LD_INT 5
74897: PUSH
74898: LD_INT 6
74900: PUSH
74901: LD_INT 7
74903: PUSH
74904: LD_INT 8
74906: PUSH
74907: LD_INT 9
74909: PUSH
74910: LD_INT 10
74912: PUSH
74913: LD_INT 11
74915: PUSH
74916: LD_INT 12
74918: PUSH
74919: LD_INT 13
74921: PUSH
74922: LD_INT 14
74924: PUSH
74925: LD_INT 15
74927: PUSH
74928: LD_INT 16
74930: PUSH
74931: LD_INT 17
74933: PUSH
74934: LD_INT 18
74936: PUSH
74937: LD_INT 19
74939: PUSH
74940: LD_INT 20
74942: PUSH
74943: LD_INT 21
74945: PUSH
74946: LD_INT 22
74948: PUSH
74949: LD_INT 23
74951: PUSH
74952: LD_INT 24
74954: PUSH
74955: LD_INT 25
74957: PUSH
74958: LD_INT 26
74960: PUSH
74961: LD_INT 27
74963: PUSH
74964: LD_INT 28
74966: PUSH
74967: LD_INT 29
74969: PUSH
74970: LD_INT 30
74972: PUSH
74973: LD_INT 31
74975: PUSH
74976: LD_INT 32
74978: PUSH
74979: LD_INT 33
74981: PUSH
74982: LD_INT 34
74984: PUSH
74985: LD_INT 35
74987: PUSH
74988: LD_INT 36
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: LIST
74995: LIST
74996: LIST
74997: LIST
74998: LIST
74999: LIST
75000: LIST
75001: LIST
75002: LIST
75003: LIST
75004: LIST
75005: LIST
75006: LIST
75007: LIST
75008: LIST
75009: LIST
75010: LIST
75011: LIST
75012: LIST
75013: LIST
75014: LIST
75015: LIST
75016: LIST
75017: LIST
75018: LIST
75019: LIST
75020: LIST
75021: LIST
75022: LIST
75023: LIST
75024: LIST
75025: LIST
75026: LIST
75027: LIST
75028: PUSH
75029: LD_INT 101
75031: PUSH
75032: LD_INT 102
75034: PUSH
75035: LD_INT 103
75037: PUSH
75038: LD_INT 104
75040: PUSH
75041: LD_INT 105
75043: PUSH
75044: LD_INT 106
75046: PUSH
75047: LD_INT 107
75049: PUSH
75050: LD_INT 108
75052: PUSH
75053: LD_INT 109
75055: PUSH
75056: LD_INT 110
75058: PUSH
75059: LD_INT 111
75061: PUSH
75062: LD_INT 112
75064: PUSH
75065: LD_INT 113
75067: PUSH
75068: LD_INT 114
75070: PUSH
75071: LD_INT 115
75073: PUSH
75074: LD_INT 116
75076: PUSH
75077: LD_INT 117
75079: PUSH
75080: LD_INT 118
75082: PUSH
75083: EMPTY
75084: LIST
75085: LIST
75086: LIST
75087: LIST
75088: LIST
75089: LIST
75090: LIST
75091: LIST
75092: LIST
75093: LIST
75094: LIST
75095: LIST
75096: LIST
75097: LIST
75098: LIST
75099: LIST
75100: LIST
75101: LIST
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: ST_TO_ADDR
75107: GO 75110
75109: POP
// end else
75110: GO 75341
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
75112: LD_ADDR_VAR 0 2
75116: PUSH
75117: LD_INT 1
75119: PUSH
75120: LD_INT 2
75122: PUSH
75123: LD_INT 3
75125: PUSH
75126: LD_INT 4
75128: PUSH
75129: LD_INT 5
75131: PUSH
75132: LD_INT 6
75134: PUSH
75135: LD_INT 7
75137: PUSH
75138: LD_INT 8
75140: PUSH
75141: LD_INT 9
75143: PUSH
75144: LD_INT 10
75146: PUSH
75147: LD_INT 11
75149: PUSH
75150: LD_INT 12
75152: PUSH
75153: LD_INT 13
75155: PUSH
75156: LD_INT 14
75158: PUSH
75159: LD_INT 15
75161: PUSH
75162: LD_INT 16
75164: PUSH
75165: LD_INT 17
75167: PUSH
75168: LD_INT 18
75170: PUSH
75171: LD_INT 19
75173: PUSH
75174: LD_INT 20
75176: PUSH
75177: LD_INT 21
75179: PUSH
75180: LD_INT 22
75182: PUSH
75183: LD_INT 23
75185: PUSH
75186: LD_INT 24
75188: PUSH
75189: LD_INT 25
75191: PUSH
75192: LD_INT 26
75194: PUSH
75195: LD_INT 27
75197: PUSH
75198: LD_INT 28
75200: PUSH
75201: LD_INT 29
75203: PUSH
75204: LD_INT 30
75206: PUSH
75207: LD_INT 31
75209: PUSH
75210: LD_INT 32
75212: PUSH
75213: LD_INT 33
75215: PUSH
75216: LD_INT 34
75218: PUSH
75219: LD_INT 35
75221: PUSH
75222: LD_INT 36
75224: PUSH
75225: EMPTY
75226: LIST
75227: LIST
75228: LIST
75229: LIST
75230: LIST
75231: LIST
75232: LIST
75233: LIST
75234: LIST
75235: LIST
75236: LIST
75237: LIST
75238: LIST
75239: LIST
75240: LIST
75241: LIST
75242: LIST
75243: LIST
75244: LIST
75245: LIST
75246: LIST
75247: LIST
75248: LIST
75249: LIST
75250: LIST
75251: LIST
75252: LIST
75253: LIST
75254: LIST
75255: LIST
75256: LIST
75257: LIST
75258: LIST
75259: LIST
75260: LIST
75261: LIST
75262: PUSH
75263: LD_INT 101
75265: PUSH
75266: LD_INT 102
75268: PUSH
75269: LD_INT 103
75271: PUSH
75272: LD_INT 104
75274: PUSH
75275: LD_INT 105
75277: PUSH
75278: LD_INT 106
75280: PUSH
75281: LD_INT 107
75283: PUSH
75284: LD_INT 108
75286: PUSH
75287: LD_INT 109
75289: PUSH
75290: LD_INT 110
75292: PUSH
75293: LD_INT 111
75295: PUSH
75296: LD_INT 112
75298: PUSH
75299: LD_INT 113
75301: PUSH
75302: LD_INT 114
75304: PUSH
75305: LD_INT 115
75307: PUSH
75308: LD_INT 116
75310: PUSH
75311: LD_INT 117
75313: PUSH
75314: LD_INT 118
75316: PUSH
75317: EMPTY
75318: LIST
75319: LIST
75320: LIST
75321: LIST
75322: LIST
75323: LIST
75324: LIST
75325: LIST
75326: LIST
75327: LIST
75328: LIST
75329: LIST
75330: LIST
75331: LIST
75332: LIST
75333: LIST
75334: LIST
75335: LIST
75336: PUSH
75337: EMPTY
75338: LIST
75339: LIST
75340: ST_TO_ADDR
// if result then
75341: LD_VAR 0 2
75345: IFFALSE 76131
// begin normal :=  ;
75347: LD_ADDR_VAR 0 5
75351: PUSH
75352: LD_STRING 
75354: ST_TO_ADDR
// hardcore :=  ;
75355: LD_ADDR_VAR 0 6
75359: PUSH
75360: LD_STRING 
75362: ST_TO_ADDR
// active :=  ;
75363: LD_ADDR_VAR 0 7
75367: PUSH
75368: LD_STRING 
75370: ST_TO_ADDR
// for i = 1 to normalCounter do
75371: LD_ADDR_VAR 0 8
75375: PUSH
75376: DOUBLE
75377: LD_INT 1
75379: DEC
75380: ST_TO_ADDR
75381: LD_EXP 74
75385: PUSH
75386: FOR_TO
75387: IFFALSE 75488
// begin tmp := 0 ;
75389: LD_ADDR_VAR 0 3
75393: PUSH
75394: LD_STRING 0
75396: ST_TO_ADDR
// if result [ 1 ] then
75397: LD_VAR 0 2
75401: PUSH
75402: LD_INT 1
75404: ARRAY
75405: IFFALSE 75470
// if result [ 1 ] [ 1 ] = i then
75407: LD_VAR 0 2
75411: PUSH
75412: LD_INT 1
75414: ARRAY
75415: PUSH
75416: LD_INT 1
75418: ARRAY
75419: PUSH
75420: LD_VAR 0 8
75424: EQUAL
75425: IFFALSE 75470
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
75427: LD_ADDR_VAR 0 2
75431: PUSH
75432: LD_VAR 0 2
75436: PPUSH
75437: LD_INT 1
75439: PPUSH
75440: LD_VAR 0 2
75444: PUSH
75445: LD_INT 1
75447: ARRAY
75448: PPUSH
75449: LD_INT 1
75451: PPUSH
75452: CALL_OW 3
75456: PPUSH
75457: CALL_OW 1
75461: ST_TO_ADDR
// tmp := 1 ;
75462: LD_ADDR_VAR 0 3
75466: PUSH
75467: LD_STRING 1
75469: ST_TO_ADDR
// end ; normal := normal & tmp ;
75470: LD_ADDR_VAR 0 5
75474: PUSH
75475: LD_VAR 0 5
75479: PUSH
75480: LD_VAR 0 3
75484: STR
75485: ST_TO_ADDR
// end ;
75486: GO 75386
75488: POP
75489: POP
// for i = 1 to hardcoreCounter do
75490: LD_ADDR_VAR 0 8
75494: PUSH
75495: DOUBLE
75496: LD_INT 1
75498: DEC
75499: ST_TO_ADDR
75500: LD_EXP 75
75504: PUSH
75505: FOR_TO
75506: IFFALSE 75611
// begin tmp := 0 ;
75508: LD_ADDR_VAR 0 3
75512: PUSH
75513: LD_STRING 0
75515: ST_TO_ADDR
// if result [ 2 ] then
75516: LD_VAR 0 2
75520: PUSH
75521: LD_INT 2
75523: ARRAY
75524: IFFALSE 75593
// if result [ 2 ] [ 1 ] = 100 + i then
75526: LD_VAR 0 2
75530: PUSH
75531: LD_INT 2
75533: ARRAY
75534: PUSH
75535: LD_INT 1
75537: ARRAY
75538: PUSH
75539: LD_INT 100
75541: PUSH
75542: LD_VAR 0 8
75546: PLUS
75547: EQUAL
75548: IFFALSE 75593
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
75550: LD_ADDR_VAR 0 2
75554: PUSH
75555: LD_VAR 0 2
75559: PPUSH
75560: LD_INT 2
75562: PPUSH
75563: LD_VAR 0 2
75567: PUSH
75568: LD_INT 2
75570: ARRAY
75571: PPUSH
75572: LD_INT 1
75574: PPUSH
75575: CALL_OW 3
75579: PPUSH
75580: CALL_OW 1
75584: ST_TO_ADDR
// tmp := 1 ;
75585: LD_ADDR_VAR 0 3
75589: PUSH
75590: LD_STRING 1
75592: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
75593: LD_ADDR_VAR 0 6
75597: PUSH
75598: LD_VAR 0 6
75602: PUSH
75603: LD_VAR 0 3
75607: STR
75608: ST_TO_ADDR
// end ;
75609: GO 75505
75611: POP
75612: POP
// if isGameLoad then
75613: LD_VAR 0 1
75617: IFFALSE 76092
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
75619: LD_ADDR_VAR 0 4
75623: PUSH
75624: LD_EXP 78
75628: PUSH
75629: LD_EXP 77
75633: PUSH
75634: LD_EXP 79
75638: PUSH
75639: LD_EXP 76
75643: PUSH
75644: LD_EXP 80
75648: PUSH
75649: LD_EXP 81
75653: PUSH
75654: LD_EXP 82
75658: PUSH
75659: LD_EXP 83
75663: PUSH
75664: LD_EXP 84
75668: PUSH
75669: LD_EXP 85
75673: PUSH
75674: LD_EXP 86
75678: PUSH
75679: LD_EXP 87
75683: PUSH
75684: LD_EXP 88
75688: PUSH
75689: LD_EXP 89
75693: PUSH
75694: LD_EXP 97
75698: PUSH
75699: LD_EXP 98
75703: PUSH
75704: LD_EXP 99
75708: PUSH
75709: LD_EXP 100
75713: PUSH
75714: LD_EXP 102
75718: PUSH
75719: LD_EXP 103
75723: PUSH
75724: LD_EXP 104
75728: PUSH
75729: LD_EXP 107
75733: PUSH
75734: LD_EXP 109
75738: PUSH
75739: LD_EXP 110
75743: PUSH
75744: LD_EXP 111
75748: PUSH
75749: LD_EXP 113
75753: PUSH
75754: LD_EXP 114
75758: PUSH
75759: LD_EXP 117
75763: PUSH
75764: LD_EXP 118
75768: PUSH
75769: LD_EXP 119
75773: PUSH
75774: LD_EXP 120
75778: PUSH
75779: LD_EXP 121
75783: PUSH
75784: LD_EXP 122
75788: PUSH
75789: LD_EXP 123
75793: PUSH
75794: LD_EXP 124
75798: PUSH
75799: LD_EXP 125
75803: PUSH
75804: LD_EXP 90
75808: PUSH
75809: LD_EXP 91
75813: PUSH
75814: LD_EXP 94
75818: PUSH
75819: LD_EXP 95
75823: PUSH
75824: LD_EXP 96
75828: PUSH
75829: LD_EXP 92
75833: PUSH
75834: LD_EXP 93
75838: PUSH
75839: LD_EXP 101
75843: PUSH
75844: LD_EXP 105
75848: PUSH
75849: LD_EXP 106
75853: PUSH
75854: LD_EXP 108
75858: PUSH
75859: LD_EXP 112
75863: PUSH
75864: LD_EXP 115
75868: PUSH
75869: LD_EXP 116
75873: PUSH
75874: LD_EXP 126
75878: PUSH
75879: LD_EXP 127
75883: PUSH
75884: LD_EXP 128
75888: PUSH
75889: LD_EXP 129
75893: PUSH
75894: EMPTY
75895: LIST
75896: LIST
75897: LIST
75898: LIST
75899: LIST
75900: LIST
75901: LIST
75902: LIST
75903: LIST
75904: LIST
75905: LIST
75906: LIST
75907: LIST
75908: LIST
75909: LIST
75910: LIST
75911: LIST
75912: LIST
75913: LIST
75914: LIST
75915: LIST
75916: LIST
75917: LIST
75918: LIST
75919: LIST
75920: LIST
75921: LIST
75922: LIST
75923: LIST
75924: LIST
75925: LIST
75926: LIST
75927: LIST
75928: LIST
75929: LIST
75930: LIST
75931: LIST
75932: LIST
75933: LIST
75934: LIST
75935: LIST
75936: LIST
75937: LIST
75938: LIST
75939: LIST
75940: LIST
75941: LIST
75942: LIST
75943: LIST
75944: LIST
75945: LIST
75946: LIST
75947: LIST
75948: LIST
75949: ST_TO_ADDR
// tmp :=  ;
75950: LD_ADDR_VAR 0 3
75954: PUSH
75955: LD_STRING 
75957: ST_TO_ADDR
// for i = 1 to normalCounter do
75958: LD_ADDR_VAR 0 8
75962: PUSH
75963: DOUBLE
75964: LD_INT 1
75966: DEC
75967: ST_TO_ADDR
75968: LD_EXP 74
75972: PUSH
75973: FOR_TO
75974: IFFALSE 76010
// begin if flags [ i ] then
75976: LD_VAR 0 4
75980: PUSH
75981: LD_VAR 0 8
75985: ARRAY
75986: IFFALSE 76008
// tmp := tmp & i & ; ;
75988: LD_ADDR_VAR 0 3
75992: PUSH
75993: LD_VAR 0 3
75997: PUSH
75998: LD_VAR 0 8
76002: STR
76003: PUSH
76004: LD_STRING ;
76006: STR
76007: ST_TO_ADDR
// end ;
76008: GO 75973
76010: POP
76011: POP
// for i = 1 to hardcoreCounter do
76012: LD_ADDR_VAR 0 8
76016: PUSH
76017: DOUBLE
76018: LD_INT 1
76020: DEC
76021: ST_TO_ADDR
76022: LD_EXP 75
76026: PUSH
76027: FOR_TO
76028: IFFALSE 76074
// begin if flags [ normalCounter + i ] then
76030: LD_VAR 0 4
76034: PUSH
76035: LD_EXP 74
76039: PUSH
76040: LD_VAR 0 8
76044: PLUS
76045: ARRAY
76046: IFFALSE 76072
// tmp := tmp & ( 100 + i ) & ; ;
76048: LD_ADDR_VAR 0 3
76052: PUSH
76053: LD_VAR 0 3
76057: PUSH
76058: LD_INT 100
76060: PUSH
76061: LD_VAR 0 8
76065: PLUS
76066: STR
76067: PUSH
76068: LD_STRING ;
76070: STR
76071: ST_TO_ADDR
// end ;
76072: GO 76027
76074: POP
76075: POP
// if tmp then
76076: LD_VAR 0 3
76080: IFFALSE 76092
// active := tmp ;
76082: LD_ADDR_VAR 0 7
76086: PUSH
76087: LD_VAR 0 3
76091: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
76092: LD_STRING getStreamItemsFromMission("
76094: PUSH
76095: LD_VAR 0 5
76099: STR
76100: PUSH
76101: LD_STRING ","
76103: STR
76104: PUSH
76105: LD_VAR 0 6
76109: STR
76110: PUSH
76111: LD_STRING ","
76113: STR
76114: PUSH
76115: LD_VAR 0 7
76119: STR
76120: PUSH
76121: LD_STRING ")
76123: STR
76124: PPUSH
76125: CALL_OW 559
// end else
76129: GO 76138
// ToLua ( getStreamItemsFromMission("","","") ) ;
76131: LD_STRING getStreamItemsFromMission("","","")
76133: PPUSH
76134: CALL_OW 559
// end ;
76138: LD_VAR 0 2
76142: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
76143: LD_EXP 73
76147: PUSH
76148: LD_EXP 78
76152: AND
76153: IFFALSE 76277
76155: GO 76157
76157: DISABLE
76158: LD_INT 0
76160: PPUSH
76161: PPUSH
// begin enable ;
76162: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
76163: LD_ADDR_VAR 0 2
76167: PUSH
76168: LD_INT 22
76170: PUSH
76171: LD_OWVAR 2
76175: PUSH
76176: EMPTY
76177: LIST
76178: LIST
76179: PUSH
76180: LD_INT 2
76182: PUSH
76183: LD_INT 34
76185: PUSH
76186: LD_INT 7
76188: PUSH
76189: EMPTY
76190: LIST
76191: LIST
76192: PUSH
76193: LD_INT 34
76195: PUSH
76196: LD_INT 45
76198: PUSH
76199: EMPTY
76200: LIST
76201: LIST
76202: PUSH
76203: LD_INT 34
76205: PUSH
76206: LD_INT 28
76208: PUSH
76209: EMPTY
76210: LIST
76211: LIST
76212: PUSH
76213: LD_INT 34
76215: PUSH
76216: LD_INT 47
76218: PUSH
76219: EMPTY
76220: LIST
76221: LIST
76222: PUSH
76223: EMPTY
76224: LIST
76225: LIST
76226: LIST
76227: LIST
76228: LIST
76229: PUSH
76230: EMPTY
76231: LIST
76232: LIST
76233: PPUSH
76234: CALL_OW 69
76238: ST_TO_ADDR
// if not tmp then
76239: LD_VAR 0 2
76243: NOT
76244: IFFALSE 76248
// exit ;
76246: GO 76277
// for i in tmp do
76248: LD_ADDR_VAR 0 1
76252: PUSH
76253: LD_VAR 0 2
76257: PUSH
76258: FOR_IN
76259: IFFALSE 76275
// begin SetLives ( i , 0 ) ;
76261: LD_VAR 0 1
76265: PPUSH
76266: LD_INT 0
76268: PPUSH
76269: CALL_OW 234
// end ;
76273: GO 76258
76275: POP
76276: POP
// end ;
76277: PPOPN 2
76279: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
76280: LD_EXP 73
76284: PUSH
76285: LD_EXP 79
76289: AND
76290: IFFALSE 76374
76292: GO 76294
76294: DISABLE
76295: LD_INT 0
76297: PPUSH
76298: PPUSH
// begin enable ;
76299: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
76300: LD_ADDR_VAR 0 2
76304: PUSH
76305: LD_INT 22
76307: PUSH
76308: LD_OWVAR 2
76312: PUSH
76313: EMPTY
76314: LIST
76315: LIST
76316: PUSH
76317: LD_INT 32
76319: PUSH
76320: LD_INT 3
76322: PUSH
76323: EMPTY
76324: LIST
76325: LIST
76326: PUSH
76327: EMPTY
76328: LIST
76329: LIST
76330: PPUSH
76331: CALL_OW 69
76335: ST_TO_ADDR
// if not tmp then
76336: LD_VAR 0 2
76340: NOT
76341: IFFALSE 76345
// exit ;
76343: GO 76374
// for i in tmp do
76345: LD_ADDR_VAR 0 1
76349: PUSH
76350: LD_VAR 0 2
76354: PUSH
76355: FOR_IN
76356: IFFALSE 76372
// begin SetLives ( i , 0 ) ;
76358: LD_VAR 0 1
76362: PPUSH
76363: LD_INT 0
76365: PPUSH
76366: CALL_OW 234
// end ;
76370: GO 76355
76372: POP
76373: POP
// end ;
76374: PPOPN 2
76376: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
76377: LD_EXP 73
76381: PUSH
76382: LD_EXP 76
76386: AND
76387: IFFALSE 76480
76389: GO 76391
76391: DISABLE
76392: LD_INT 0
76394: PPUSH
// begin enable ;
76395: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
76396: LD_ADDR_VAR 0 1
76400: PUSH
76401: LD_INT 22
76403: PUSH
76404: LD_OWVAR 2
76408: PUSH
76409: EMPTY
76410: LIST
76411: LIST
76412: PUSH
76413: LD_INT 2
76415: PUSH
76416: LD_INT 25
76418: PUSH
76419: LD_INT 5
76421: PUSH
76422: EMPTY
76423: LIST
76424: LIST
76425: PUSH
76426: LD_INT 25
76428: PUSH
76429: LD_INT 9
76431: PUSH
76432: EMPTY
76433: LIST
76434: LIST
76435: PUSH
76436: LD_INT 25
76438: PUSH
76439: LD_INT 8
76441: PUSH
76442: EMPTY
76443: LIST
76444: LIST
76445: PUSH
76446: EMPTY
76447: LIST
76448: LIST
76449: LIST
76450: LIST
76451: PUSH
76452: EMPTY
76453: LIST
76454: LIST
76455: PPUSH
76456: CALL_OW 69
76460: PUSH
76461: FOR_IN
76462: IFFALSE 76478
// begin SetClass ( i , 1 ) ;
76464: LD_VAR 0 1
76468: PPUSH
76469: LD_INT 1
76471: PPUSH
76472: CALL_OW 336
// end ;
76476: GO 76461
76478: POP
76479: POP
// end ;
76480: PPOPN 1
76482: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
76483: LD_EXP 73
76487: PUSH
76488: LD_EXP 77
76492: AND
76493: PUSH
76494: LD_OWVAR 65
76498: PUSH
76499: LD_INT 7
76501: LESS
76502: AND
76503: IFFALSE 76517
76505: GO 76507
76507: DISABLE
// begin enable ;
76508: ENABLE
// game_speed := 7 ;
76509: LD_ADDR_OWVAR 65
76513: PUSH
76514: LD_INT 7
76516: ST_TO_ADDR
// end ;
76517: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
76518: LD_EXP 73
76522: PUSH
76523: LD_EXP 80
76527: AND
76528: IFFALSE 76730
76530: GO 76532
76532: DISABLE
76533: LD_INT 0
76535: PPUSH
76536: PPUSH
76537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
76538: LD_ADDR_VAR 0 3
76542: PUSH
76543: LD_INT 81
76545: PUSH
76546: LD_OWVAR 2
76550: PUSH
76551: EMPTY
76552: LIST
76553: LIST
76554: PUSH
76555: LD_INT 21
76557: PUSH
76558: LD_INT 1
76560: PUSH
76561: EMPTY
76562: LIST
76563: LIST
76564: PUSH
76565: EMPTY
76566: LIST
76567: LIST
76568: PPUSH
76569: CALL_OW 69
76573: ST_TO_ADDR
// if not tmp then
76574: LD_VAR 0 3
76578: NOT
76579: IFFALSE 76583
// exit ;
76581: GO 76730
// if tmp > 5 then
76583: LD_VAR 0 3
76587: PUSH
76588: LD_INT 5
76590: GREATER
76591: IFFALSE 76603
// k := 5 else
76593: LD_ADDR_VAR 0 2
76597: PUSH
76598: LD_INT 5
76600: ST_TO_ADDR
76601: GO 76613
// k := tmp ;
76603: LD_ADDR_VAR 0 2
76607: PUSH
76608: LD_VAR 0 3
76612: ST_TO_ADDR
// for i := 1 to k do
76613: LD_ADDR_VAR 0 1
76617: PUSH
76618: DOUBLE
76619: LD_INT 1
76621: DEC
76622: ST_TO_ADDR
76623: LD_VAR 0 2
76627: PUSH
76628: FOR_TO
76629: IFFALSE 76728
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
76631: LD_VAR 0 3
76635: PUSH
76636: LD_VAR 0 1
76640: ARRAY
76641: PPUSH
76642: LD_VAR 0 1
76646: PUSH
76647: LD_INT 4
76649: MOD
76650: PUSH
76651: LD_INT 1
76653: PLUS
76654: PPUSH
76655: CALL_OW 259
76659: PUSH
76660: LD_INT 10
76662: LESS
76663: IFFALSE 76726
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
76665: LD_VAR 0 3
76669: PUSH
76670: LD_VAR 0 1
76674: ARRAY
76675: PPUSH
76676: LD_VAR 0 1
76680: PUSH
76681: LD_INT 4
76683: MOD
76684: PUSH
76685: LD_INT 1
76687: PLUS
76688: PPUSH
76689: LD_VAR 0 3
76693: PUSH
76694: LD_VAR 0 1
76698: ARRAY
76699: PPUSH
76700: LD_VAR 0 1
76704: PUSH
76705: LD_INT 4
76707: MOD
76708: PUSH
76709: LD_INT 1
76711: PLUS
76712: PPUSH
76713: CALL_OW 259
76717: PUSH
76718: LD_INT 1
76720: PLUS
76721: PPUSH
76722: CALL_OW 237
76726: GO 76628
76728: POP
76729: POP
// end ;
76730: PPOPN 3
76732: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
76733: LD_EXP 73
76737: PUSH
76738: LD_EXP 81
76742: AND
76743: IFFALSE 76763
76745: GO 76747
76747: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
76748: LD_INT 4
76750: PPUSH
76751: LD_OWVAR 2
76755: PPUSH
76756: LD_INT 0
76758: PPUSH
76759: CALL_OW 324
76763: END
// every 0 0$1 trigger StreamModeActive and sShovel do
76764: LD_EXP 73
76768: PUSH
76769: LD_EXP 110
76773: AND
76774: IFFALSE 76794
76776: GO 76778
76778: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
76779: LD_INT 19
76781: PPUSH
76782: LD_OWVAR 2
76786: PPUSH
76787: LD_INT 0
76789: PPUSH
76790: CALL_OW 324
76794: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
76795: LD_EXP 73
76799: PUSH
76800: LD_EXP 82
76804: AND
76805: IFFALSE 76907
76807: GO 76809
76809: DISABLE
76810: LD_INT 0
76812: PPUSH
76813: PPUSH
// begin enable ;
76814: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
76815: LD_ADDR_VAR 0 2
76819: PUSH
76820: LD_INT 22
76822: PUSH
76823: LD_OWVAR 2
76827: PUSH
76828: EMPTY
76829: LIST
76830: LIST
76831: PUSH
76832: LD_INT 2
76834: PUSH
76835: LD_INT 34
76837: PUSH
76838: LD_INT 11
76840: PUSH
76841: EMPTY
76842: LIST
76843: LIST
76844: PUSH
76845: LD_INT 34
76847: PUSH
76848: LD_INT 30
76850: PUSH
76851: EMPTY
76852: LIST
76853: LIST
76854: PUSH
76855: EMPTY
76856: LIST
76857: LIST
76858: LIST
76859: PUSH
76860: EMPTY
76861: LIST
76862: LIST
76863: PPUSH
76864: CALL_OW 69
76868: ST_TO_ADDR
// if not tmp then
76869: LD_VAR 0 2
76873: NOT
76874: IFFALSE 76878
// exit ;
76876: GO 76907
// for i in tmp do
76878: LD_ADDR_VAR 0 1
76882: PUSH
76883: LD_VAR 0 2
76887: PUSH
76888: FOR_IN
76889: IFFALSE 76905
// begin SetLives ( i , 0 ) ;
76891: LD_VAR 0 1
76895: PPUSH
76896: LD_INT 0
76898: PPUSH
76899: CALL_OW 234
// end ;
76903: GO 76888
76905: POP
76906: POP
// end ;
76907: PPOPN 2
76909: END
// every 0 0$1 trigger StreamModeActive and sBunker do
76910: LD_EXP 73
76914: PUSH
76915: LD_EXP 83
76919: AND
76920: IFFALSE 76940
76922: GO 76924
76924: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
76925: LD_INT 32
76927: PPUSH
76928: LD_OWVAR 2
76932: PPUSH
76933: LD_INT 0
76935: PPUSH
76936: CALL_OW 324
76940: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
76941: LD_EXP 73
76945: PUSH
76946: LD_EXP 84
76950: AND
76951: IFFALSE 77132
76953: GO 76955
76955: DISABLE
76956: LD_INT 0
76958: PPUSH
76959: PPUSH
76960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
76961: LD_ADDR_VAR 0 2
76965: PUSH
76966: LD_INT 22
76968: PUSH
76969: LD_OWVAR 2
76973: PUSH
76974: EMPTY
76975: LIST
76976: LIST
76977: PUSH
76978: LD_INT 33
76980: PUSH
76981: LD_INT 3
76983: PUSH
76984: EMPTY
76985: LIST
76986: LIST
76987: PUSH
76988: EMPTY
76989: LIST
76990: LIST
76991: PPUSH
76992: CALL_OW 69
76996: ST_TO_ADDR
// if not tmp then
76997: LD_VAR 0 2
77001: NOT
77002: IFFALSE 77006
// exit ;
77004: GO 77132
// side := 0 ;
77006: LD_ADDR_VAR 0 3
77010: PUSH
77011: LD_INT 0
77013: ST_TO_ADDR
// for i := 1 to 8 do
77014: LD_ADDR_VAR 0 1
77018: PUSH
77019: DOUBLE
77020: LD_INT 1
77022: DEC
77023: ST_TO_ADDR
77024: LD_INT 8
77026: PUSH
77027: FOR_TO
77028: IFFALSE 77076
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
77030: LD_OWVAR 2
77034: PUSH
77035: LD_VAR 0 1
77039: NONEQUAL
77040: PUSH
77041: LD_OWVAR 2
77045: PPUSH
77046: LD_VAR 0 1
77050: PPUSH
77051: CALL_OW 81
77055: PUSH
77056: LD_INT 2
77058: EQUAL
77059: AND
77060: IFFALSE 77074
// begin side := i ;
77062: LD_ADDR_VAR 0 3
77066: PUSH
77067: LD_VAR 0 1
77071: ST_TO_ADDR
// break ;
77072: GO 77076
// end ;
77074: GO 77027
77076: POP
77077: POP
// if not side then
77078: LD_VAR 0 3
77082: NOT
77083: IFFALSE 77087
// exit ;
77085: GO 77132
// for i := 1 to tmp do
77087: LD_ADDR_VAR 0 1
77091: PUSH
77092: DOUBLE
77093: LD_INT 1
77095: DEC
77096: ST_TO_ADDR
77097: LD_VAR 0 2
77101: PUSH
77102: FOR_TO
77103: IFFALSE 77130
// if Prob ( 60 ) then
77105: LD_INT 60
77107: PPUSH
77108: CALL_OW 13
77112: IFFALSE 77128
// SetSide ( i , side ) ;
77114: LD_VAR 0 1
77118: PPUSH
77119: LD_VAR 0 3
77123: PPUSH
77124: CALL_OW 235
77128: GO 77102
77130: POP
77131: POP
// end ;
77132: PPOPN 3
77134: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
77135: LD_EXP 73
77139: PUSH
77140: LD_EXP 86
77144: AND
77145: IFFALSE 77264
77147: GO 77149
77149: DISABLE
77150: LD_INT 0
77152: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
77153: LD_ADDR_VAR 0 1
77157: PUSH
77158: LD_INT 22
77160: PUSH
77161: LD_OWVAR 2
77165: PUSH
77166: EMPTY
77167: LIST
77168: LIST
77169: PUSH
77170: LD_INT 21
77172: PUSH
77173: LD_INT 1
77175: PUSH
77176: EMPTY
77177: LIST
77178: LIST
77179: PUSH
77180: LD_INT 3
77182: PUSH
77183: LD_INT 23
77185: PUSH
77186: LD_INT 0
77188: PUSH
77189: EMPTY
77190: LIST
77191: LIST
77192: PUSH
77193: EMPTY
77194: LIST
77195: LIST
77196: PUSH
77197: EMPTY
77198: LIST
77199: LIST
77200: LIST
77201: PPUSH
77202: CALL_OW 69
77206: PUSH
77207: FOR_IN
77208: IFFALSE 77262
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
77210: LD_VAR 0 1
77214: PPUSH
77215: CALL_OW 257
77219: PUSH
77220: LD_INT 1
77222: PUSH
77223: LD_INT 2
77225: PUSH
77226: LD_INT 3
77228: PUSH
77229: LD_INT 4
77231: PUSH
77232: EMPTY
77233: LIST
77234: LIST
77235: LIST
77236: LIST
77237: IN
77238: IFFALSE 77260
// SetClass ( un , rand ( 1 , 4 ) ) ;
77240: LD_VAR 0 1
77244: PPUSH
77245: LD_INT 1
77247: PPUSH
77248: LD_INT 4
77250: PPUSH
77251: CALL_OW 12
77255: PPUSH
77256: CALL_OW 336
77260: GO 77207
77262: POP
77263: POP
// end ;
77264: PPOPN 1
77266: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
77267: LD_EXP 73
77271: PUSH
77272: LD_EXP 85
77276: AND
77277: IFFALSE 77356
77279: GO 77281
77281: DISABLE
77282: LD_INT 0
77284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
77285: LD_ADDR_VAR 0 1
77289: PUSH
77290: LD_INT 22
77292: PUSH
77293: LD_OWVAR 2
77297: PUSH
77298: EMPTY
77299: LIST
77300: LIST
77301: PUSH
77302: LD_INT 21
77304: PUSH
77305: LD_INT 3
77307: PUSH
77308: EMPTY
77309: LIST
77310: LIST
77311: PUSH
77312: EMPTY
77313: LIST
77314: LIST
77315: PPUSH
77316: CALL_OW 69
77320: ST_TO_ADDR
// if not tmp then
77321: LD_VAR 0 1
77325: NOT
77326: IFFALSE 77330
// exit ;
77328: GO 77356
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
77330: LD_VAR 0 1
77334: PUSH
77335: LD_INT 1
77337: PPUSH
77338: LD_VAR 0 1
77342: PPUSH
77343: CALL_OW 12
77347: ARRAY
77348: PPUSH
77349: LD_INT 100
77351: PPUSH
77352: CALL_OW 234
// end ;
77356: PPOPN 1
77358: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
77359: LD_EXP 73
77363: PUSH
77364: LD_EXP 87
77368: AND
77369: IFFALSE 77467
77371: GO 77373
77373: DISABLE
77374: LD_INT 0
77376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77377: LD_ADDR_VAR 0 1
77381: PUSH
77382: LD_INT 22
77384: PUSH
77385: LD_OWVAR 2
77389: PUSH
77390: EMPTY
77391: LIST
77392: LIST
77393: PUSH
77394: LD_INT 21
77396: PUSH
77397: LD_INT 1
77399: PUSH
77400: EMPTY
77401: LIST
77402: LIST
77403: PUSH
77404: EMPTY
77405: LIST
77406: LIST
77407: PPUSH
77408: CALL_OW 69
77412: ST_TO_ADDR
// if not tmp then
77413: LD_VAR 0 1
77417: NOT
77418: IFFALSE 77422
// exit ;
77420: GO 77467
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
77422: LD_VAR 0 1
77426: PUSH
77427: LD_INT 1
77429: PPUSH
77430: LD_VAR 0 1
77434: PPUSH
77435: CALL_OW 12
77439: ARRAY
77440: PPUSH
77441: LD_INT 1
77443: PPUSH
77444: LD_INT 4
77446: PPUSH
77447: CALL_OW 12
77451: PPUSH
77452: LD_INT 3000
77454: PPUSH
77455: LD_INT 9000
77457: PPUSH
77458: CALL_OW 12
77462: PPUSH
77463: CALL_OW 492
// end ;
77467: PPOPN 1
77469: END
// every 0 0$1 trigger StreamModeActive and sDepot do
77470: LD_EXP 73
77474: PUSH
77475: LD_EXP 88
77479: AND
77480: IFFALSE 77500
77482: GO 77484
77484: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
77485: LD_INT 1
77487: PPUSH
77488: LD_OWVAR 2
77492: PPUSH
77493: LD_INT 0
77495: PPUSH
77496: CALL_OW 324
77500: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
77501: LD_EXP 73
77505: PUSH
77506: LD_EXP 89
77510: AND
77511: IFFALSE 77594
77513: GO 77515
77515: DISABLE
77516: LD_INT 0
77518: PPUSH
77519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
77520: LD_ADDR_VAR 0 2
77524: PUSH
77525: LD_INT 22
77527: PUSH
77528: LD_OWVAR 2
77532: PUSH
77533: EMPTY
77534: LIST
77535: LIST
77536: PUSH
77537: LD_INT 21
77539: PUSH
77540: LD_INT 3
77542: PUSH
77543: EMPTY
77544: LIST
77545: LIST
77546: PUSH
77547: EMPTY
77548: LIST
77549: LIST
77550: PPUSH
77551: CALL_OW 69
77555: ST_TO_ADDR
// if not tmp then
77556: LD_VAR 0 2
77560: NOT
77561: IFFALSE 77565
// exit ;
77563: GO 77594
// for i in tmp do
77565: LD_ADDR_VAR 0 1
77569: PUSH
77570: LD_VAR 0 2
77574: PUSH
77575: FOR_IN
77576: IFFALSE 77592
// SetBLevel ( i , 10 ) ;
77578: LD_VAR 0 1
77582: PPUSH
77583: LD_INT 10
77585: PPUSH
77586: CALL_OW 241
77590: GO 77575
77592: POP
77593: POP
// end ;
77594: PPOPN 2
77596: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
77597: LD_EXP 73
77601: PUSH
77602: LD_EXP 90
77606: AND
77607: IFFALSE 77718
77609: GO 77611
77611: DISABLE
77612: LD_INT 0
77614: PPUSH
77615: PPUSH
77616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77617: LD_ADDR_VAR 0 3
77621: PUSH
77622: LD_INT 22
77624: PUSH
77625: LD_OWVAR 2
77629: PUSH
77630: EMPTY
77631: LIST
77632: LIST
77633: PUSH
77634: LD_INT 25
77636: PUSH
77637: LD_INT 1
77639: PUSH
77640: EMPTY
77641: LIST
77642: LIST
77643: PUSH
77644: EMPTY
77645: LIST
77646: LIST
77647: PPUSH
77648: CALL_OW 69
77652: ST_TO_ADDR
// if not tmp then
77653: LD_VAR 0 3
77657: NOT
77658: IFFALSE 77662
// exit ;
77660: GO 77718
// un := tmp [ rand ( 1 , tmp ) ] ;
77662: LD_ADDR_VAR 0 2
77666: PUSH
77667: LD_VAR 0 3
77671: PUSH
77672: LD_INT 1
77674: PPUSH
77675: LD_VAR 0 3
77679: PPUSH
77680: CALL_OW 12
77684: ARRAY
77685: ST_TO_ADDR
// if Crawls ( un ) then
77686: LD_VAR 0 2
77690: PPUSH
77691: CALL_OW 318
77695: IFFALSE 77706
// ComWalk ( un ) ;
77697: LD_VAR 0 2
77701: PPUSH
77702: CALL_OW 138
// SetClass ( un , class_sniper ) ;
77706: LD_VAR 0 2
77710: PPUSH
77711: LD_INT 5
77713: PPUSH
77714: CALL_OW 336
// end ;
77718: PPOPN 3
77720: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
77721: LD_EXP 73
77725: PUSH
77726: LD_EXP 91
77730: AND
77731: PUSH
77732: LD_OWVAR 67
77736: PUSH
77737: LD_INT 4
77739: LESS
77740: AND
77741: IFFALSE 77760
77743: GO 77745
77745: DISABLE
// begin Difficulty := Difficulty + 1 ;
77746: LD_ADDR_OWVAR 67
77750: PUSH
77751: LD_OWVAR 67
77755: PUSH
77756: LD_INT 1
77758: PLUS
77759: ST_TO_ADDR
// end ;
77760: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
77761: LD_EXP 73
77765: PUSH
77766: LD_EXP 92
77770: AND
77771: IFFALSE 77874
77773: GO 77775
77775: DISABLE
77776: LD_INT 0
77778: PPUSH
// begin for i := 1 to 5 do
77779: LD_ADDR_VAR 0 1
77783: PUSH
77784: DOUBLE
77785: LD_INT 1
77787: DEC
77788: ST_TO_ADDR
77789: LD_INT 5
77791: PUSH
77792: FOR_TO
77793: IFFALSE 77872
// begin uc_nation := nation_nature ;
77795: LD_ADDR_OWVAR 21
77799: PUSH
77800: LD_INT 0
77802: ST_TO_ADDR
// uc_side := 0 ;
77803: LD_ADDR_OWVAR 20
77807: PUSH
77808: LD_INT 0
77810: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
77811: LD_ADDR_OWVAR 29
77815: PUSH
77816: LD_INT 12
77818: PUSH
77819: LD_INT 12
77821: PUSH
77822: EMPTY
77823: LIST
77824: LIST
77825: ST_TO_ADDR
// hc_agressivity := 20 ;
77826: LD_ADDR_OWVAR 35
77830: PUSH
77831: LD_INT 20
77833: ST_TO_ADDR
// hc_class := class_tiger ;
77834: LD_ADDR_OWVAR 28
77838: PUSH
77839: LD_INT 14
77841: ST_TO_ADDR
// hc_gallery :=  ;
77842: LD_ADDR_OWVAR 33
77846: PUSH
77847: LD_STRING 
77849: ST_TO_ADDR
// hc_name :=  ;
77850: LD_ADDR_OWVAR 26
77854: PUSH
77855: LD_STRING 
77857: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
77858: CALL_OW 44
77862: PPUSH
77863: LD_INT 0
77865: PPUSH
77866: CALL_OW 51
// end ;
77870: GO 77792
77872: POP
77873: POP
// end ;
77874: PPOPN 1
77876: END
// every 0 0$1 trigger StreamModeActive and sBomb do
77877: LD_EXP 73
77881: PUSH
77882: LD_EXP 93
77886: AND
77887: IFFALSE 77896
77889: GO 77891
77891: DISABLE
// StreamSibBomb ;
77892: CALL 77897 0 0
77896: END
// export function StreamSibBomb ; var i , x , y ; begin
77897: LD_INT 0
77899: PPUSH
77900: PPUSH
77901: PPUSH
77902: PPUSH
// result := false ;
77903: LD_ADDR_VAR 0 1
77907: PUSH
77908: LD_INT 0
77910: ST_TO_ADDR
// for i := 1 to 16 do
77911: LD_ADDR_VAR 0 2
77915: PUSH
77916: DOUBLE
77917: LD_INT 1
77919: DEC
77920: ST_TO_ADDR
77921: LD_INT 16
77923: PUSH
77924: FOR_TO
77925: IFFALSE 78124
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
77927: LD_ADDR_VAR 0 3
77931: PUSH
77932: LD_INT 10
77934: PUSH
77935: LD_INT 20
77937: PUSH
77938: LD_INT 30
77940: PUSH
77941: LD_INT 40
77943: PUSH
77944: LD_INT 50
77946: PUSH
77947: LD_INT 60
77949: PUSH
77950: LD_INT 70
77952: PUSH
77953: LD_INT 80
77955: PUSH
77956: LD_INT 90
77958: PUSH
77959: LD_INT 100
77961: PUSH
77962: LD_INT 110
77964: PUSH
77965: LD_INT 120
77967: PUSH
77968: LD_INT 130
77970: PUSH
77971: LD_INT 140
77973: PUSH
77974: LD_INT 150
77976: PUSH
77977: EMPTY
77978: LIST
77979: LIST
77980: LIST
77981: LIST
77982: LIST
77983: LIST
77984: LIST
77985: LIST
77986: LIST
77987: LIST
77988: LIST
77989: LIST
77990: LIST
77991: LIST
77992: LIST
77993: PUSH
77994: LD_INT 1
77996: PPUSH
77997: LD_INT 15
77999: PPUSH
78000: CALL_OW 12
78004: ARRAY
78005: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78006: LD_ADDR_VAR 0 4
78010: PUSH
78011: LD_INT 10
78013: PUSH
78014: LD_INT 20
78016: PUSH
78017: LD_INT 30
78019: PUSH
78020: LD_INT 40
78022: PUSH
78023: LD_INT 50
78025: PUSH
78026: LD_INT 60
78028: PUSH
78029: LD_INT 70
78031: PUSH
78032: LD_INT 80
78034: PUSH
78035: LD_INT 90
78037: PUSH
78038: LD_INT 100
78040: PUSH
78041: LD_INT 110
78043: PUSH
78044: LD_INT 120
78046: PUSH
78047: LD_INT 130
78049: PUSH
78050: LD_INT 140
78052: PUSH
78053: LD_INT 150
78055: PUSH
78056: EMPTY
78057: LIST
78058: LIST
78059: LIST
78060: LIST
78061: LIST
78062: LIST
78063: LIST
78064: LIST
78065: LIST
78066: LIST
78067: LIST
78068: LIST
78069: LIST
78070: LIST
78071: LIST
78072: PUSH
78073: LD_INT 1
78075: PPUSH
78076: LD_INT 15
78078: PPUSH
78079: CALL_OW 12
78083: ARRAY
78084: ST_TO_ADDR
// if ValidHex ( x , y ) then
78085: LD_VAR 0 3
78089: PPUSH
78090: LD_VAR 0 4
78094: PPUSH
78095: CALL_OW 488
78099: IFFALSE 78122
// begin result := [ x , y ] ;
78101: LD_ADDR_VAR 0 1
78105: PUSH
78106: LD_VAR 0 3
78110: PUSH
78111: LD_VAR 0 4
78115: PUSH
78116: EMPTY
78117: LIST
78118: LIST
78119: ST_TO_ADDR
// break ;
78120: GO 78124
// end ; end ;
78122: GO 77924
78124: POP
78125: POP
// if result then
78126: LD_VAR 0 1
78130: IFFALSE 78190
// begin ToLua ( playSibBomb() ) ;
78132: LD_STRING playSibBomb()
78134: PPUSH
78135: CALL_OW 559
// wait ( 0 0$14 ) ;
78139: LD_INT 490
78141: PPUSH
78142: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
78146: LD_VAR 0 1
78150: PUSH
78151: LD_INT 1
78153: ARRAY
78154: PPUSH
78155: LD_VAR 0 1
78159: PUSH
78160: LD_INT 2
78162: ARRAY
78163: PPUSH
78164: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
78168: LD_VAR 0 1
78172: PUSH
78173: LD_INT 1
78175: ARRAY
78176: PPUSH
78177: LD_VAR 0 1
78181: PUSH
78182: LD_INT 2
78184: ARRAY
78185: PPUSH
78186: CALL_OW 429
// end ; end ;
78190: LD_VAR 0 1
78194: RET
// every 0 0$1 trigger StreamModeActive and sReset do
78195: LD_EXP 73
78199: PUSH
78200: LD_EXP 95
78204: AND
78205: IFFALSE 78217
78207: GO 78209
78209: DISABLE
// YouLost (  ) ;
78210: LD_STRING 
78212: PPUSH
78213: CALL_OW 104
78217: END
// every 0 0$1 trigger StreamModeActive and sFog do
78218: LD_EXP 73
78222: PUSH
78223: LD_EXP 94
78227: AND
78228: IFFALSE 78242
78230: GO 78232
78232: DISABLE
// FogOff ( your_side ) ;
78233: LD_OWVAR 2
78237: PPUSH
78238: CALL_OW 344
78242: END
// every 0 0$1 trigger StreamModeActive and sSun do
78243: LD_EXP 73
78247: PUSH
78248: LD_EXP 96
78252: AND
78253: IFFALSE 78281
78255: GO 78257
78257: DISABLE
// begin solar_recharge_percent := 0 ;
78258: LD_ADDR_OWVAR 79
78262: PUSH
78263: LD_INT 0
78265: ST_TO_ADDR
// wait ( 5 5$00 ) ;
78266: LD_INT 10500
78268: PPUSH
78269: CALL_OW 67
// solar_recharge_percent := 100 ;
78273: LD_ADDR_OWVAR 79
78277: PUSH
78278: LD_INT 100
78280: ST_TO_ADDR
// end ;
78281: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
78282: LD_EXP 73
78286: PUSH
78287: LD_EXP 97
78291: AND
78292: IFFALSE 78531
78294: GO 78296
78296: DISABLE
78297: LD_INT 0
78299: PPUSH
78300: PPUSH
78301: PPUSH
// begin tmp := [ ] ;
78302: LD_ADDR_VAR 0 3
78306: PUSH
78307: EMPTY
78308: ST_TO_ADDR
// for i := 1 to 6 do
78309: LD_ADDR_VAR 0 1
78313: PUSH
78314: DOUBLE
78315: LD_INT 1
78317: DEC
78318: ST_TO_ADDR
78319: LD_INT 6
78321: PUSH
78322: FOR_TO
78323: IFFALSE 78428
// begin uc_nation := nation_nature ;
78325: LD_ADDR_OWVAR 21
78329: PUSH
78330: LD_INT 0
78332: ST_TO_ADDR
// uc_side := 0 ;
78333: LD_ADDR_OWVAR 20
78337: PUSH
78338: LD_INT 0
78340: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78341: LD_ADDR_OWVAR 29
78345: PUSH
78346: LD_INT 12
78348: PUSH
78349: LD_INT 12
78351: PUSH
78352: EMPTY
78353: LIST
78354: LIST
78355: ST_TO_ADDR
// hc_agressivity := 20 ;
78356: LD_ADDR_OWVAR 35
78360: PUSH
78361: LD_INT 20
78363: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
78364: LD_ADDR_OWVAR 28
78368: PUSH
78369: LD_INT 17
78371: ST_TO_ADDR
// hc_gallery :=  ;
78372: LD_ADDR_OWVAR 33
78376: PUSH
78377: LD_STRING 
78379: ST_TO_ADDR
// hc_name :=  ;
78380: LD_ADDR_OWVAR 26
78384: PUSH
78385: LD_STRING 
78387: ST_TO_ADDR
// un := CreateHuman ;
78388: LD_ADDR_VAR 0 2
78392: PUSH
78393: CALL_OW 44
78397: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
78398: LD_VAR 0 2
78402: PPUSH
78403: LD_INT 1
78405: PPUSH
78406: CALL_OW 51
// tmp := tmp ^ un ;
78410: LD_ADDR_VAR 0 3
78414: PUSH
78415: LD_VAR 0 3
78419: PUSH
78420: LD_VAR 0 2
78424: ADD
78425: ST_TO_ADDR
// end ;
78426: GO 78322
78428: POP
78429: POP
// repeat wait ( 0 0$1 ) ;
78430: LD_INT 35
78432: PPUSH
78433: CALL_OW 67
// for un in tmp do
78437: LD_ADDR_VAR 0 2
78441: PUSH
78442: LD_VAR 0 3
78446: PUSH
78447: FOR_IN
78448: IFFALSE 78522
// begin if IsDead ( un ) then
78450: LD_VAR 0 2
78454: PPUSH
78455: CALL_OW 301
78459: IFFALSE 78479
// begin tmp := tmp diff un ;
78461: LD_ADDR_VAR 0 3
78465: PUSH
78466: LD_VAR 0 3
78470: PUSH
78471: LD_VAR 0 2
78475: DIFF
78476: ST_TO_ADDR
// continue ;
78477: GO 78447
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
78479: LD_VAR 0 2
78483: PPUSH
78484: LD_INT 3
78486: PUSH
78487: LD_INT 22
78489: PUSH
78490: LD_INT 0
78492: PUSH
78493: EMPTY
78494: LIST
78495: LIST
78496: PUSH
78497: EMPTY
78498: LIST
78499: LIST
78500: PPUSH
78501: CALL_OW 69
78505: PPUSH
78506: LD_VAR 0 2
78510: PPUSH
78511: CALL_OW 74
78515: PPUSH
78516: CALL_OW 115
// end ;
78520: GO 78447
78522: POP
78523: POP
// until not tmp ;
78524: LD_VAR 0 3
78528: NOT
78529: IFFALSE 78430
// end ;
78531: PPOPN 3
78533: END
// every 0 0$1 trigger StreamModeActive and sTroll do
78534: LD_EXP 73
78538: PUSH
78539: LD_EXP 98
78543: AND
78544: IFFALSE 78598
78546: GO 78548
78548: DISABLE
// begin ToLua ( displayTroll(); ) ;
78549: LD_STRING displayTroll();
78551: PPUSH
78552: CALL_OW 559
// wait ( 3 3$00 ) ;
78556: LD_INT 6300
78558: PPUSH
78559: CALL_OW 67
// ToLua ( hideTroll(); ) ;
78563: LD_STRING hideTroll();
78565: PPUSH
78566: CALL_OW 559
// wait ( 1 1$00 ) ;
78570: LD_INT 2100
78572: PPUSH
78573: CALL_OW 67
// ToLua ( displayTroll(); ) ;
78577: LD_STRING displayTroll();
78579: PPUSH
78580: CALL_OW 559
// wait ( 1 1$00 ) ;
78584: LD_INT 2100
78586: PPUSH
78587: CALL_OW 67
// ToLua ( hideTroll(); ) ;
78591: LD_STRING hideTroll();
78593: PPUSH
78594: CALL_OW 559
// end ;
78598: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
78599: LD_EXP 73
78603: PUSH
78604: LD_EXP 99
78608: AND
78609: IFFALSE 78672
78611: GO 78613
78613: DISABLE
78614: LD_INT 0
78616: PPUSH
// begin p := 0 ;
78617: LD_ADDR_VAR 0 1
78621: PUSH
78622: LD_INT 0
78624: ST_TO_ADDR
// repeat game_speed := 1 ;
78625: LD_ADDR_OWVAR 65
78629: PUSH
78630: LD_INT 1
78632: ST_TO_ADDR
// wait ( 0 0$1 ) ;
78633: LD_INT 35
78635: PPUSH
78636: CALL_OW 67
// p := p + 1 ;
78640: LD_ADDR_VAR 0 1
78644: PUSH
78645: LD_VAR 0 1
78649: PUSH
78650: LD_INT 1
78652: PLUS
78653: ST_TO_ADDR
// until p >= 60 ;
78654: LD_VAR 0 1
78658: PUSH
78659: LD_INT 60
78661: GREATEREQUAL
78662: IFFALSE 78625
// game_speed := 4 ;
78664: LD_ADDR_OWVAR 65
78668: PUSH
78669: LD_INT 4
78671: ST_TO_ADDR
// end ;
78672: PPOPN 1
78674: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
78675: LD_EXP 73
78679: PUSH
78680: LD_EXP 100
78684: AND
78685: IFFALSE 78831
78687: GO 78689
78689: DISABLE
78690: LD_INT 0
78692: PPUSH
78693: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
78694: LD_ADDR_VAR 0 1
78698: PUSH
78699: LD_INT 22
78701: PUSH
78702: LD_OWVAR 2
78706: PUSH
78707: EMPTY
78708: LIST
78709: LIST
78710: PUSH
78711: LD_INT 2
78713: PUSH
78714: LD_INT 30
78716: PUSH
78717: LD_INT 0
78719: PUSH
78720: EMPTY
78721: LIST
78722: LIST
78723: PUSH
78724: LD_INT 30
78726: PUSH
78727: LD_INT 1
78729: PUSH
78730: EMPTY
78731: LIST
78732: LIST
78733: PUSH
78734: EMPTY
78735: LIST
78736: LIST
78737: LIST
78738: PUSH
78739: EMPTY
78740: LIST
78741: LIST
78742: PPUSH
78743: CALL_OW 69
78747: ST_TO_ADDR
// if not depot then
78748: LD_VAR 0 1
78752: NOT
78753: IFFALSE 78757
// exit ;
78755: GO 78831
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
78757: LD_ADDR_VAR 0 2
78761: PUSH
78762: LD_VAR 0 1
78766: PUSH
78767: LD_INT 1
78769: PPUSH
78770: LD_VAR 0 1
78774: PPUSH
78775: CALL_OW 12
78779: ARRAY
78780: PPUSH
78781: CALL_OW 274
78785: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
78786: LD_VAR 0 2
78790: PPUSH
78791: LD_INT 1
78793: PPUSH
78794: LD_INT 0
78796: PPUSH
78797: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
78801: LD_VAR 0 2
78805: PPUSH
78806: LD_INT 2
78808: PPUSH
78809: LD_INT 0
78811: PPUSH
78812: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
78816: LD_VAR 0 2
78820: PPUSH
78821: LD_INT 3
78823: PPUSH
78824: LD_INT 0
78826: PPUSH
78827: CALL_OW 277
// end ;
78831: PPOPN 2
78833: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
78834: LD_EXP 73
78838: PUSH
78839: LD_EXP 101
78843: AND
78844: IFFALSE 78941
78846: GO 78848
78848: DISABLE
78849: LD_INT 0
78851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78852: LD_ADDR_VAR 0 1
78856: PUSH
78857: LD_INT 22
78859: PUSH
78860: LD_OWVAR 2
78864: PUSH
78865: EMPTY
78866: LIST
78867: LIST
78868: PUSH
78869: LD_INT 21
78871: PUSH
78872: LD_INT 1
78874: PUSH
78875: EMPTY
78876: LIST
78877: LIST
78878: PUSH
78879: LD_INT 3
78881: PUSH
78882: LD_INT 23
78884: PUSH
78885: LD_INT 0
78887: PUSH
78888: EMPTY
78889: LIST
78890: LIST
78891: PUSH
78892: EMPTY
78893: LIST
78894: LIST
78895: PUSH
78896: EMPTY
78897: LIST
78898: LIST
78899: LIST
78900: PPUSH
78901: CALL_OW 69
78905: ST_TO_ADDR
// if not tmp then
78906: LD_VAR 0 1
78910: NOT
78911: IFFALSE 78915
// exit ;
78913: GO 78941
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
78915: LD_VAR 0 1
78919: PUSH
78920: LD_INT 1
78922: PPUSH
78923: LD_VAR 0 1
78927: PPUSH
78928: CALL_OW 12
78932: ARRAY
78933: PPUSH
78934: LD_INT 200
78936: PPUSH
78937: CALL_OW 234
// end ;
78941: PPOPN 1
78943: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
78944: LD_EXP 73
78948: PUSH
78949: LD_EXP 102
78953: AND
78954: IFFALSE 79033
78956: GO 78958
78958: DISABLE
78959: LD_INT 0
78961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
78962: LD_ADDR_VAR 0 1
78966: PUSH
78967: LD_INT 22
78969: PUSH
78970: LD_OWVAR 2
78974: PUSH
78975: EMPTY
78976: LIST
78977: LIST
78978: PUSH
78979: LD_INT 21
78981: PUSH
78982: LD_INT 2
78984: PUSH
78985: EMPTY
78986: LIST
78987: LIST
78988: PUSH
78989: EMPTY
78990: LIST
78991: LIST
78992: PPUSH
78993: CALL_OW 69
78997: ST_TO_ADDR
// if not tmp then
78998: LD_VAR 0 1
79002: NOT
79003: IFFALSE 79007
// exit ;
79005: GO 79033
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
79007: LD_VAR 0 1
79011: PUSH
79012: LD_INT 1
79014: PPUSH
79015: LD_VAR 0 1
79019: PPUSH
79020: CALL_OW 12
79024: ARRAY
79025: PPUSH
79026: LD_INT 60
79028: PPUSH
79029: CALL_OW 234
// end ;
79033: PPOPN 1
79035: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
79036: LD_EXP 73
79040: PUSH
79041: LD_EXP 103
79045: AND
79046: IFFALSE 79145
79048: GO 79050
79050: DISABLE
79051: LD_INT 0
79053: PPUSH
79054: PPUSH
// begin enable ;
79055: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
79056: LD_ADDR_VAR 0 1
79060: PUSH
79061: LD_INT 22
79063: PUSH
79064: LD_OWVAR 2
79068: PUSH
79069: EMPTY
79070: LIST
79071: LIST
79072: PUSH
79073: LD_INT 61
79075: PUSH
79076: EMPTY
79077: LIST
79078: PUSH
79079: LD_INT 33
79081: PUSH
79082: LD_INT 2
79084: PUSH
79085: EMPTY
79086: LIST
79087: LIST
79088: PUSH
79089: EMPTY
79090: LIST
79091: LIST
79092: LIST
79093: PPUSH
79094: CALL_OW 69
79098: ST_TO_ADDR
// if not tmp then
79099: LD_VAR 0 1
79103: NOT
79104: IFFALSE 79108
// exit ;
79106: GO 79145
// for i in tmp do
79108: LD_ADDR_VAR 0 2
79112: PUSH
79113: LD_VAR 0 1
79117: PUSH
79118: FOR_IN
79119: IFFALSE 79143
// if IsControledBy ( i ) then
79121: LD_VAR 0 2
79125: PPUSH
79126: CALL_OW 312
79130: IFFALSE 79141
// ComUnlink ( i ) ;
79132: LD_VAR 0 2
79136: PPUSH
79137: CALL_OW 136
79141: GO 79118
79143: POP
79144: POP
// end ;
79145: PPOPN 2
79147: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
79148: LD_EXP 73
79152: PUSH
79153: LD_EXP 104
79157: AND
79158: IFFALSE 79298
79160: GO 79162
79162: DISABLE
79163: LD_INT 0
79165: PPUSH
79166: PPUSH
// begin ToLua ( displayPowell(); ) ;
79167: LD_STRING displayPowell();
79169: PPUSH
79170: CALL_OW 559
// uc_side := 0 ;
79174: LD_ADDR_OWVAR 20
79178: PUSH
79179: LD_INT 0
79181: ST_TO_ADDR
// uc_nation := 2 ;
79182: LD_ADDR_OWVAR 21
79186: PUSH
79187: LD_INT 2
79189: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
79190: LD_ADDR_OWVAR 37
79194: PUSH
79195: LD_INT 14
79197: ST_TO_ADDR
// vc_engine := engine_siberite ;
79198: LD_ADDR_OWVAR 39
79202: PUSH
79203: LD_INT 3
79205: ST_TO_ADDR
// vc_control := control_apeman ;
79206: LD_ADDR_OWVAR 38
79210: PUSH
79211: LD_INT 5
79213: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
79214: LD_ADDR_OWVAR 40
79218: PUSH
79219: LD_INT 29
79221: ST_TO_ADDR
// un := CreateVehicle ;
79222: LD_ADDR_VAR 0 2
79226: PUSH
79227: CALL_OW 45
79231: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79232: LD_VAR 0 2
79236: PPUSH
79237: LD_INT 1
79239: PPUSH
79240: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
79244: LD_INT 35
79246: PPUSH
79247: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
79251: LD_VAR 0 2
79255: PPUSH
79256: LD_INT 22
79258: PUSH
79259: LD_OWVAR 2
79263: PUSH
79264: EMPTY
79265: LIST
79266: LIST
79267: PPUSH
79268: CALL_OW 69
79272: PPUSH
79273: LD_VAR 0 2
79277: PPUSH
79278: CALL_OW 74
79282: PPUSH
79283: CALL_OW 115
// until IsDead ( un ) ;
79287: LD_VAR 0 2
79291: PPUSH
79292: CALL_OW 301
79296: IFFALSE 79244
// end ;
79298: PPOPN 2
79300: END
// every 0 0$1 trigger StreamModeActive and sStu do
79301: LD_EXP 73
79305: PUSH
79306: LD_EXP 112
79310: AND
79311: IFFALSE 79327
79313: GO 79315
79315: DISABLE
// begin ToLua ( displayStucuk(); ) ;
79316: LD_STRING displayStucuk();
79318: PPUSH
79319: CALL_OW 559
// ResetFog ;
79323: CALL_OW 335
// end ;
79327: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
79328: LD_EXP 73
79332: PUSH
79333: LD_EXP 105
79337: AND
79338: IFFALSE 79479
79340: GO 79342
79342: DISABLE
79343: LD_INT 0
79345: PPUSH
79346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79347: LD_ADDR_VAR 0 2
79351: PUSH
79352: LD_INT 22
79354: PUSH
79355: LD_OWVAR 2
79359: PUSH
79360: EMPTY
79361: LIST
79362: LIST
79363: PUSH
79364: LD_INT 21
79366: PUSH
79367: LD_INT 1
79369: PUSH
79370: EMPTY
79371: LIST
79372: LIST
79373: PUSH
79374: EMPTY
79375: LIST
79376: LIST
79377: PPUSH
79378: CALL_OW 69
79382: ST_TO_ADDR
// if not tmp then
79383: LD_VAR 0 2
79387: NOT
79388: IFFALSE 79392
// exit ;
79390: GO 79479
// un := tmp [ rand ( 1 , tmp ) ] ;
79392: LD_ADDR_VAR 0 1
79396: PUSH
79397: LD_VAR 0 2
79401: PUSH
79402: LD_INT 1
79404: PPUSH
79405: LD_VAR 0 2
79409: PPUSH
79410: CALL_OW 12
79414: ARRAY
79415: ST_TO_ADDR
// SetSide ( un , 0 ) ;
79416: LD_VAR 0 1
79420: PPUSH
79421: LD_INT 0
79423: PPUSH
79424: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
79428: LD_VAR 0 1
79432: PPUSH
79433: LD_OWVAR 3
79437: PUSH
79438: LD_VAR 0 1
79442: DIFF
79443: PPUSH
79444: LD_VAR 0 1
79448: PPUSH
79449: CALL_OW 74
79453: PPUSH
79454: CALL_OW 115
// wait ( 0 0$20 ) ;
79458: LD_INT 700
79460: PPUSH
79461: CALL_OW 67
// SetSide ( un , your_side ) ;
79465: LD_VAR 0 1
79469: PPUSH
79470: LD_OWVAR 2
79474: PPUSH
79475: CALL_OW 235
// end ;
79479: PPOPN 2
79481: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
79482: LD_EXP 73
79486: PUSH
79487: LD_EXP 106
79491: AND
79492: IFFALSE 79598
79494: GO 79496
79496: DISABLE
79497: LD_INT 0
79499: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79500: LD_ADDR_VAR 0 1
79504: PUSH
79505: LD_INT 22
79507: PUSH
79508: LD_OWVAR 2
79512: PUSH
79513: EMPTY
79514: LIST
79515: LIST
79516: PUSH
79517: LD_INT 2
79519: PUSH
79520: LD_INT 30
79522: PUSH
79523: LD_INT 0
79525: PUSH
79526: EMPTY
79527: LIST
79528: LIST
79529: PUSH
79530: LD_INT 30
79532: PUSH
79533: LD_INT 1
79535: PUSH
79536: EMPTY
79537: LIST
79538: LIST
79539: PUSH
79540: EMPTY
79541: LIST
79542: LIST
79543: LIST
79544: PUSH
79545: EMPTY
79546: LIST
79547: LIST
79548: PPUSH
79549: CALL_OW 69
79553: ST_TO_ADDR
// if not depot then
79554: LD_VAR 0 1
79558: NOT
79559: IFFALSE 79563
// exit ;
79561: GO 79598
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
79563: LD_VAR 0 1
79567: PUSH
79568: LD_INT 1
79570: ARRAY
79571: PPUSH
79572: CALL_OW 250
79576: PPUSH
79577: LD_VAR 0 1
79581: PUSH
79582: LD_INT 1
79584: ARRAY
79585: PPUSH
79586: CALL_OW 251
79590: PPUSH
79591: LD_INT 70
79593: PPUSH
79594: CALL_OW 495
// end ;
79598: PPOPN 1
79600: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
79601: LD_EXP 73
79605: PUSH
79606: LD_EXP 107
79610: AND
79611: IFFALSE 79822
79613: GO 79615
79615: DISABLE
79616: LD_INT 0
79618: PPUSH
79619: PPUSH
79620: PPUSH
79621: PPUSH
79622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79623: LD_ADDR_VAR 0 5
79627: PUSH
79628: LD_INT 22
79630: PUSH
79631: LD_OWVAR 2
79635: PUSH
79636: EMPTY
79637: LIST
79638: LIST
79639: PUSH
79640: LD_INT 21
79642: PUSH
79643: LD_INT 1
79645: PUSH
79646: EMPTY
79647: LIST
79648: LIST
79649: PUSH
79650: EMPTY
79651: LIST
79652: LIST
79653: PPUSH
79654: CALL_OW 69
79658: ST_TO_ADDR
// if not tmp then
79659: LD_VAR 0 5
79663: NOT
79664: IFFALSE 79668
// exit ;
79666: GO 79822
// for i in tmp do
79668: LD_ADDR_VAR 0 1
79672: PUSH
79673: LD_VAR 0 5
79677: PUSH
79678: FOR_IN
79679: IFFALSE 79820
// begin d := rand ( 0 , 5 ) ;
79681: LD_ADDR_VAR 0 4
79685: PUSH
79686: LD_INT 0
79688: PPUSH
79689: LD_INT 5
79691: PPUSH
79692: CALL_OW 12
79696: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
79697: LD_ADDR_VAR 0 2
79701: PUSH
79702: LD_VAR 0 1
79706: PPUSH
79707: CALL_OW 250
79711: PPUSH
79712: LD_VAR 0 4
79716: PPUSH
79717: LD_INT 3
79719: PPUSH
79720: LD_INT 12
79722: PPUSH
79723: CALL_OW 12
79727: PPUSH
79728: CALL_OW 272
79732: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
79733: LD_ADDR_VAR 0 3
79737: PUSH
79738: LD_VAR 0 1
79742: PPUSH
79743: CALL_OW 251
79747: PPUSH
79748: LD_VAR 0 4
79752: PPUSH
79753: LD_INT 3
79755: PPUSH
79756: LD_INT 12
79758: PPUSH
79759: CALL_OW 12
79763: PPUSH
79764: CALL_OW 273
79768: ST_TO_ADDR
// if ValidHex ( x , y ) then
79769: LD_VAR 0 2
79773: PPUSH
79774: LD_VAR 0 3
79778: PPUSH
79779: CALL_OW 488
79783: IFFALSE 79818
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
79785: LD_VAR 0 1
79789: PPUSH
79790: LD_VAR 0 2
79794: PPUSH
79795: LD_VAR 0 3
79799: PPUSH
79800: LD_INT 3
79802: PPUSH
79803: LD_INT 6
79805: PPUSH
79806: CALL_OW 12
79810: PPUSH
79811: LD_INT 1
79813: PPUSH
79814: CALL_OW 483
// end ;
79818: GO 79678
79820: POP
79821: POP
// end ;
79822: PPOPN 5
79824: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
79825: LD_EXP 73
79829: PUSH
79830: LD_EXP 108
79834: AND
79835: IFFALSE 79929
79837: GO 79839
79839: DISABLE
79840: LD_INT 0
79842: PPUSH
79843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
79844: LD_ADDR_VAR 0 2
79848: PUSH
79849: LD_INT 22
79851: PUSH
79852: LD_OWVAR 2
79856: PUSH
79857: EMPTY
79858: LIST
79859: LIST
79860: PUSH
79861: LD_INT 32
79863: PUSH
79864: LD_INT 1
79866: PUSH
79867: EMPTY
79868: LIST
79869: LIST
79870: PUSH
79871: LD_INT 21
79873: PUSH
79874: LD_INT 2
79876: PUSH
79877: EMPTY
79878: LIST
79879: LIST
79880: PUSH
79881: EMPTY
79882: LIST
79883: LIST
79884: LIST
79885: PPUSH
79886: CALL_OW 69
79890: ST_TO_ADDR
// if not tmp then
79891: LD_VAR 0 2
79895: NOT
79896: IFFALSE 79900
// exit ;
79898: GO 79929
// for i in tmp do
79900: LD_ADDR_VAR 0 1
79904: PUSH
79905: LD_VAR 0 2
79909: PUSH
79910: FOR_IN
79911: IFFALSE 79927
// SetFuel ( i , 0 ) ;
79913: LD_VAR 0 1
79917: PPUSH
79918: LD_INT 0
79920: PPUSH
79921: CALL_OW 240
79925: GO 79910
79927: POP
79928: POP
// end ;
79929: PPOPN 2
79931: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
79932: LD_EXP 73
79936: PUSH
79937: LD_EXP 109
79941: AND
79942: IFFALSE 80008
79944: GO 79946
79946: DISABLE
79947: LD_INT 0
79949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
79950: LD_ADDR_VAR 0 1
79954: PUSH
79955: LD_INT 22
79957: PUSH
79958: LD_OWVAR 2
79962: PUSH
79963: EMPTY
79964: LIST
79965: LIST
79966: PUSH
79967: LD_INT 30
79969: PUSH
79970: LD_INT 29
79972: PUSH
79973: EMPTY
79974: LIST
79975: LIST
79976: PUSH
79977: EMPTY
79978: LIST
79979: LIST
79980: PPUSH
79981: CALL_OW 69
79985: ST_TO_ADDR
// if not tmp then
79986: LD_VAR 0 1
79990: NOT
79991: IFFALSE 79995
// exit ;
79993: GO 80008
// DestroyUnit ( tmp [ 1 ] ) ;
79995: LD_VAR 0 1
79999: PUSH
80000: LD_INT 1
80002: ARRAY
80003: PPUSH
80004: CALL_OW 65
// end ;
80008: PPOPN 1
80010: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
80011: LD_EXP 73
80015: PUSH
80016: LD_EXP 111
80020: AND
80021: IFFALSE 80150
80023: GO 80025
80025: DISABLE
80026: LD_INT 0
80028: PPUSH
// begin uc_side := 0 ;
80029: LD_ADDR_OWVAR 20
80033: PUSH
80034: LD_INT 0
80036: ST_TO_ADDR
// uc_nation := nation_arabian ;
80037: LD_ADDR_OWVAR 21
80041: PUSH
80042: LD_INT 2
80044: ST_TO_ADDR
// hc_gallery :=  ;
80045: LD_ADDR_OWVAR 33
80049: PUSH
80050: LD_STRING 
80052: ST_TO_ADDR
// hc_name :=  ;
80053: LD_ADDR_OWVAR 26
80057: PUSH
80058: LD_STRING 
80060: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
80061: LD_INT 1
80063: PPUSH
80064: LD_INT 11
80066: PPUSH
80067: LD_INT 10
80069: PPUSH
80070: CALL_OW 380
// un := CreateHuman ;
80074: LD_ADDR_VAR 0 1
80078: PUSH
80079: CALL_OW 44
80083: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80084: LD_VAR 0 1
80088: PPUSH
80089: LD_INT 1
80091: PPUSH
80092: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80096: LD_INT 35
80098: PPUSH
80099: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80103: LD_VAR 0 1
80107: PPUSH
80108: LD_INT 22
80110: PUSH
80111: LD_OWVAR 2
80115: PUSH
80116: EMPTY
80117: LIST
80118: LIST
80119: PPUSH
80120: CALL_OW 69
80124: PPUSH
80125: LD_VAR 0 1
80129: PPUSH
80130: CALL_OW 74
80134: PPUSH
80135: CALL_OW 115
// until IsDead ( un ) ;
80139: LD_VAR 0 1
80143: PPUSH
80144: CALL_OW 301
80148: IFFALSE 80096
// end ;
80150: PPOPN 1
80152: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
80153: LD_EXP 73
80157: PUSH
80158: LD_EXP 113
80162: AND
80163: IFFALSE 80175
80165: GO 80167
80167: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
80168: LD_STRING earthquake(getX(game), 0, 32)
80170: PPUSH
80171: CALL_OW 559
80175: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
80176: LD_EXP 73
80180: PUSH
80181: LD_EXP 114
80185: AND
80186: IFFALSE 80277
80188: GO 80190
80190: DISABLE
80191: LD_INT 0
80193: PPUSH
// begin enable ;
80194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
80195: LD_ADDR_VAR 0 1
80199: PUSH
80200: LD_INT 22
80202: PUSH
80203: LD_OWVAR 2
80207: PUSH
80208: EMPTY
80209: LIST
80210: LIST
80211: PUSH
80212: LD_INT 21
80214: PUSH
80215: LD_INT 2
80217: PUSH
80218: EMPTY
80219: LIST
80220: LIST
80221: PUSH
80222: LD_INT 33
80224: PUSH
80225: LD_INT 3
80227: PUSH
80228: EMPTY
80229: LIST
80230: LIST
80231: PUSH
80232: EMPTY
80233: LIST
80234: LIST
80235: LIST
80236: PPUSH
80237: CALL_OW 69
80241: ST_TO_ADDR
// if not tmp then
80242: LD_VAR 0 1
80246: NOT
80247: IFFALSE 80251
// exit ;
80249: GO 80277
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
80251: LD_VAR 0 1
80255: PUSH
80256: LD_INT 1
80258: PPUSH
80259: LD_VAR 0 1
80263: PPUSH
80264: CALL_OW 12
80268: ARRAY
80269: PPUSH
80270: LD_INT 1
80272: PPUSH
80273: CALL_OW 234
// end ;
80277: PPOPN 1
80279: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
80280: LD_EXP 73
80284: PUSH
80285: LD_EXP 115
80289: AND
80290: IFFALSE 80431
80292: GO 80294
80294: DISABLE
80295: LD_INT 0
80297: PPUSH
80298: PPUSH
80299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80300: LD_ADDR_VAR 0 3
80304: PUSH
80305: LD_INT 22
80307: PUSH
80308: LD_OWVAR 2
80312: PUSH
80313: EMPTY
80314: LIST
80315: LIST
80316: PUSH
80317: LD_INT 25
80319: PUSH
80320: LD_INT 1
80322: PUSH
80323: EMPTY
80324: LIST
80325: LIST
80326: PUSH
80327: EMPTY
80328: LIST
80329: LIST
80330: PPUSH
80331: CALL_OW 69
80335: ST_TO_ADDR
// if not tmp then
80336: LD_VAR 0 3
80340: NOT
80341: IFFALSE 80345
// exit ;
80343: GO 80431
// un := tmp [ rand ( 1 , tmp ) ] ;
80345: LD_ADDR_VAR 0 2
80349: PUSH
80350: LD_VAR 0 3
80354: PUSH
80355: LD_INT 1
80357: PPUSH
80358: LD_VAR 0 3
80362: PPUSH
80363: CALL_OW 12
80367: ARRAY
80368: ST_TO_ADDR
// if Crawls ( un ) then
80369: LD_VAR 0 2
80373: PPUSH
80374: CALL_OW 318
80378: IFFALSE 80389
// ComWalk ( un ) ;
80380: LD_VAR 0 2
80384: PPUSH
80385: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
80389: LD_VAR 0 2
80393: PPUSH
80394: LD_INT 9
80396: PPUSH
80397: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
80401: LD_INT 28
80403: PPUSH
80404: LD_OWVAR 2
80408: PPUSH
80409: LD_INT 2
80411: PPUSH
80412: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
80416: LD_INT 29
80418: PPUSH
80419: LD_OWVAR 2
80423: PPUSH
80424: LD_INT 2
80426: PPUSH
80427: CALL_OW 322
// end ;
80431: PPOPN 3
80433: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
80434: LD_EXP 73
80438: PUSH
80439: LD_EXP 116
80443: AND
80444: IFFALSE 80555
80446: GO 80448
80448: DISABLE
80449: LD_INT 0
80451: PPUSH
80452: PPUSH
80453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80454: LD_ADDR_VAR 0 3
80458: PUSH
80459: LD_INT 22
80461: PUSH
80462: LD_OWVAR 2
80466: PUSH
80467: EMPTY
80468: LIST
80469: LIST
80470: PUSH
80471: LD_INT 25
80473: PUSH
80474: LD_INT 1
80476: PUSH
80477: EMPTY
80478: LIST
80479: LIST
80480: PUSH
80481: EMPTY
80482: LIST
80483: LIST
80484: PPUSH
80485: CALL_OW 69
80489: ST_TO_ADDR
// if not tmp then
80490: LD_VAR 0 3
80494: NOT
80495: IFFALSE 80499
// exit ;
80497: GO 80555
// un := tmp [ rand ( 1 , tmp ) ] ;
80499: LD_ADDR_VAR 0 2
80503: PUSH
80504: LD_VAR 0 3
80508: PUSH
80509: LD_INT 1
80511: PPUSH
80512: LD_VAR 0 3
80516: PPUSH
80517: CALL_OW 12
80521: ARRAY
80522: ST_TO_ADDR
// if Crawls ( un ) then
80523: LD_VAR 0 2
80527: PPUSH
80528: CALL_OW 318
80532: IFFALSE 80543
// ComWalk ( un ) ;
80534: LD_VAR 0 2
80538: PPUSH
80539: CALL_OW 138
// SetClass ( un , class_mortar ) ;
80543: LD_VAR 0 2
80547: PPUSH
80548: LD_INT 8
80550: PPUSH
80551: CALL_OW 336
// end ;
80555: PPOPN 3
80557: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
80558: LD_EXP 73
80562: PUSH
80563: LD_EXP 117
80567: AND
80568: IFFALSE 80712
80570: GO 80572
80572: DISABLE
80573: LD_INT 0
80575: PPUSH
80576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
80577: LD_ADDR_VAR 0 2
80581: PUSH
80582: LD_INT 22
80584: PUSH
80585: LD_OWVAR 2
80589: PUSH
80590: EMPTY
80591: LIST
80592: LIST
80593: PUSH
80594: LD_INT 21
80596: PUSH
80597: LD_INT 2
80599: PUSH
80600: EMPTY
80601: LIST
80602: LIST
80603: PUSH
80604: LD_INT 2
80606: PUSH
80607: LD_INT 34
80609: PUSH
80610: LD_INT 12
80612: PUSH
80613: EMPTY
80614: LIST
80615: LIST
80616: PUSH
80617: LD_INT 34
80619: PUSH
80620: LD_INT 51
80622: PUSH
80623: EMPTY
80624: LIST
80625: LIST
80626: PUSH
80627: LD_INT 34
80629: PUSH
80630: LD_INT 32
80632: PUSH
80633: EMPTY
80634: LIST
80635: LIST
80636: PUSH
80637: EMPTY
80638: LIST
80639: LIST
80640: LIST
80641: LIST
80642: PUSH
80643: EMPTY
80644: LIST
80645: LIST
80646: LIST
80647: PPUSH
80648: CALL_OW 69
80652: ST_TO_ADDR
// if not tmp then
80653: LD_VAR 0 2
80657: NOT
80658: IFFALSE 80662
// exit ;
80660: GO 80712
// for i in tmp do
80662: LD_ADDR_VAR 0 1
80666: PUSH
80667: LD_VAR 0 2
80671: PUSH
80672: FOR_IN
80673: IFFALSE 80710
// if GetCargo ( i , mat_artifact ) = 0 then
80675: LD_VAR 0 1
80679: PPUSH
80680: LD_INT 4
80682: PPUSH
80683: CALL_OW 289
80687: PUSH
80688: LD_INT 0
80690: EQUAL
80691: IFFALSE 80708
// SetCargo ( i , mat_siberit , 100 ) ;
80693: LD_VAR 0 1
80697: PPUSH
80698: LD_INT 3
80700: PPUSH
80701: LD_INT 100
80703: PPUSH
80704: CALL_OW 290
80708: GO 80672
80710: POP
80711: POP
// end ;
80712: PPOPN 2
80714: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
80715: LD_EXP 73
80719: PUSH
80720: LD_EXP 118
80724: AND
80725: IFFALSE 80908
80727: GO 80729
80729: DISABLE
80730: LD_INT 0
80732: PPUSH
80733: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80734: LD_ADDR_VAR 0 2
80738: PUSH
80739: LD_INT 22
80741: PUSH
80742: LD_OWVAR 2
80746: PUSH
80747: EMPTY
80748: LIST
80749: LIST
80750: PPUSH
80751: CALL_OW 69
80755: ST_TO_ADDR
// if not tmp then
80756: LD_VAR 0 2
80760: NOT
80761: IFFALSE 80765
// exit ;
80763: GO 80908
// for i := 1 to 2 do
80765: LD_ADDR_VAR 0 1
80769: PUSH
80770: DOUBLE
80771: LD_INT 1
80773: DEC
80774: ST_TO_ADDR
80775: LD_INT 2
80777: PUSH
80778: FOR_TO
80779: IFFALSE 80906
// begin uc_side := your_side ;
80781: LD_ADDR_OWVAR 20
80785: PUSH
80786: LD_OWVAR 2
80790: ST_TO_ADDR
// uc_nation := nation_american ;
80791: LD_ADDR_OWVAR 21
80795: PUSH
80796: LD_INT 1
80798: ST_TO_ADDR
// vc_chassis := us_morphling ;
80799: LD_ADDR_OWVAR 37
80803: PUSH
80804: LD_INT 5
80806: ST_TO_ADDR
// vc_engine := engine_siberite ;
80807: LD_ADDR_OWVAR 39
80811: PUSH
80812: LD_INT 3
80814: ST_TO_ADDR
// vc_control := control_computer ;
80815: LD_ADDR_OWVAR 38
80819: PUSH
80820: LD_INT 3
80822: ST_TO_ADDR
// vc_weapon := us_double_laser ;
80823: LD_ADDR_OWVAR 40
80827: PUSH
80828: LD_INT 10
80830: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
80831: LD_VAR 0 2
80835: PUSH
80836: LD_INT 1
80838: ARRAY
80839: PPUSH
80840: CALL_OW 310
80844: NOT
80845: IFFALSE 80892
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
80847: CALL_OW 45
80851: PPUSH
80852: LD_VAR 0 2
80856: PUSH
80857: LD_INT 1
80859: ARRAY
80860: PPUSH
80861: CALL_OW 250
80865: PPUSH
80866: LD_VAR 0 2
80870: PUSH
80871: LD_INT 1
80873: ARRAY
80874: PPUSH
80875: CALL_OW 251
80879: PPUSH
80880: LD_INT 12
80882: PPUSH
80883: LD_INT 1
80885: PPUSH
80886: CALL_OW 50
80890: GO 80904
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
80892: CALL_OW 45
80896: PPUSH
80897: LD_INT 1
80899: PPUSH
80900: CALL_OW 51
// end ;
80904: GO 80778
80906: POP
80907: POP
// end ;
80908: PPOPN 2
80910: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
80911: LD_EXP 73
80915: PUSH
80916: LD_EXP 119
80920: AND
80921: IFFALSE 81143
80923: GO 80925
80925: DISABLE
80926: LD_INT 0
80928: PPUSH
80929: PPUSH
80930: PPUSH
80931: PPUSH
80932: PPUSH
80933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
80934: LD_ADDR_VAR 0 6
80938: PUSH
80939: LD_INT 22
80941: PUSH
80942: LD_OWVAR 2
80946: PUSH
80947: EMPTY
80948: LIST
80949: LIST
80950: PUSH
80951: LD_INT 21
80953: PUSH
80954: LD_INT 1
80956: PUSH
80957: EMPTY
80958: LIST
80959: LIST
80960: PUSH
80961: LD_INT 3
80963: PUSH
80964: LD_INT 23
80966: PUSH
80967: LD_INT 0
80969: PUSH
80970: EMPTY
80971: LIST
80972: LIST
80973: PUSH
80974: EMPTY
80975: LIST
80976: LIST
80977: PUSH
80978: EMPTY
80979: LIST
80980: LIST
80981: LIST
80982: PPUSH
80983: CALL_OW 69
80987: ST_TO_ADDR
// if not tmp then
80988: LD_VAR 0 6
80992: NOT
80993: IFFALSE 80997
// exit ;
80995: GO 81143
// s1 := rand ( 1 , 4 ) ;
80997: LD_ADDR_VAR 0 2
81001: PUSH
81002: LD_INT 1
81004: PPUSH
81005: LD_INT 4
81007: PPUSH
81008: CALL_OW 12
81012: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
81013: LD_ADDR_VAR 0 4
81017: PUSH
81018: LD_VAR 0 6
81022: PUSH
81023: LD_INT 1
81025: ARRAY
81026: PPUSH
81027: LD_VAR 0 2
81031: PPUSH
81032: CALL_OW 259
81036: ST_TO_ADDR
// if s1 = 1 then
81037: LD_VAR 0 2
81041: PUSH
81042: LD_INT 1
81044: EQUAL
81045: IFFALSE 81065
// s2 := rand ( 2 , 4 ) else
81047: LD_ADDR_VAR 0 3
81051: PUSH
81052: LD_INT 2
81054: PPUSH
81055: LD_INT 4
81057: PPUSH
81058: CALL_OW 12
81062: ST_TO_ADDR
81063: GO 81073
// s2 := 1 ;
81065: LD_ADDR_VAR 0 3
81069: PUSH
81070: LD_INT 1
81072: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
81073: LD_ADDR_VAR 0 5
81077: PUSH
81078: LD_VAR 0 6
81082: PUSH
81083: LD_INT 1
81085: ARRAY
81086: PPUSH
81087: LD_VAR 0 3
81091: PPUSH
81092: CALL_OW 259
81096: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
81097: LD_VAR 0 6
81101: PUSH
81102: LD_INT 1
81104: ARRAY
81105: PPUSH
81106: LD_VAR 0 2
81110: PPUSH
81111: LD_VAR 0 5
81115: PPUSH
81116: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
81120: LD_VAR 0 6
81124: PUSH
81125: LD_INT 1
81127: ARRAY
81128: PPUSH
81129: LD_VAR 0 3
81133: PPUSH
81134: LD_VAR 0 4
81138: PPUSH
81139: CALL_OW 237
// end ;
81143: PPOPN 6
81145: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
81146: LD_EXP 73
81150: PUSH
81151: LD_EXP 120
81155: AND
81156: IFFALSE 81235
81158: GO 81160
81160: DISABLE
81161: LD_INT 0
81163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
81164: LD_ADDR_VAR 0 1
81168: PUSH
81169: LD_INT 22
81171: PUSH
81172: LD_OWVAR 2
81176: PUSH
81177: EMPTY
81178: LIST
81179: LIST
81180: PUSH
81181: LD_INT 30
81183: PUSH
81184: LD_INT 3
81186: PUSH
81187: EMPTY
81188: LIST
81189: LIST
81190: PUSH
81191: EMPTY
81192: LIST
81193: LIST
81194: PPUSH
81195: CALL_OW 69
81199: ST_TO_ADDR
// if not tmp then
81200: LD_VAR 0 1
81204: NOT
81205: IFFALSE 81209
// exit ;
81207: GO 81235
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
81209: LD_VAR 0 1
81213: PUSH
81214: LD_INT 1
81216: PPUSH
81217: LD_VAR 0 1
81221: PPUSH
81222: CALL_OW 12
81226: ARRAY
81227: PPUSH
81228: LD_INT 1
81230: PPUSH
81231: CALL_OW 234
// end ;
81235: PPOPN 1
81237: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
81238: LD_EXP 73
81242: PUSH
81243: LD_EXP 121
81247: AND
81248: IFFALSE 81360
81250: GO 81252
81252: DISABLE
81253: LD_INT 0
81255: PPUSH
81256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
81257: LD_ADDR_VAR 0 2
81261: PUSH
81262: LD_INT 22
81264: PUSH
81265: LD_OWVAR 2
81269: PUSH
81270: EMPTY
81271: LIST
81272: LIST
81273: PUSH
81274: LD_INT 2
81276: PUSH
81277: LD_INT 30
81279: PUSH
81280: LD_INT 27
81282: PUSH
81283: EMPTY
81284: LIST
81285: LIST
81286: PUSH
81287: LD_INT 30
81289: PUSH
81290: LD_INT 26
81292: PUSH
81293: EMPTY
81294: LIST
81295: LIST
81296: PUSH
81297: LD_INT 30
81299: PUSH
81300: LD_INT 28
81302: PUSH
81303: EMPTY
81304: LIST
81305: LIST
81306: PUSH
81307: EMPTY
81308: LIST
81309: LIST
81310: LIST
81311: LIST
81312: PUSH
81313: EMPTY
81314: LIST
81315: LIST
81316: PPUSH
81317: CALL_OW 69
81321: ST_TO_ADDR
// if not tmp then
81322: LD_VAR 0 2
81326: NOT
81327: IFFALSE 81331
// exit ;
81329: GO 81360
// for i in tmp do
81331: LD_ADDR_VAR 0 1
81335: PUSH
81336: LD_VAR 0 2
81340: PUSH
81341: FOR_IN
81342: IFFALSE 81358
// SetLives ( i , 1 ) ;
81344: LD_VAR 0 1
81348: PPUSH
81349: LD_INT 1
81351: PPUSH
81352: CALL_OW 234
81356: GO 81341
81358: POP
81359: POP
// end ;
81360: PPOPN 2
81362: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
81363: LD_EXP 73
81367: PUSH
81368: LD_EXP 122
81372: AND
81373: IFFALSE 81660
81375: GO 81377
81377: DISABLE
81378: LD_INT 0
81380: PPUSH
81381: PPUSH
81382: PPUSH
// begin i := rand ( 1 , 7 ) ;
81383: LD_ADDR_VAR 0 1
81387: PUSH
81388: LD_INT 1
81390: PPUSH
81391: LD_INT 7
81393: PPUSH
81394: CALL_OW 12
81398: ST_TO_ADDR
// case i of 1 :
81399: LD_VAR 0 1
81403: PUSH
81404: LD_INT 1
81406: DOUBLE
81407: EQUAL
81408: IFTRUE 81412
81410: GO 81422
81412: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
81413: LD_STRING earthquake(getX(game), 0, 32)
81415: PPUSH
81416: CALL_OW 559
81420: GO 81660
81422: LD_INT 2
81424: DOUBLE
81425: EQUAL
81426: IFTRUE 81430
81428: GO 81444
81430: POP
// begin ToLua ( displayStucuk(); ) ;
81431: LD_STRING displayStucuk();
81433: PPUSH
81434: CALL_OW 559
// ResetFog ;
81438: CALL_OW 335
// end ; 3 :
81442: GO 81660
81444: LD_INT 3
81446: DOUBLE
81447: EQUAL
81448: IFTRUE 81452
81450: GO 81556
81452: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81453: LD_ADDR_VAR 0 2
81457: PUSH
81458: LD_INT 22
81460: PUSH
81461: LD_OWVAR 2
81465: PUSH
81466: EMPTY
81467: LIST
81468: LIST
81469: PUSH
81470: LD_INT 25
81472: PUSH
81473: LD_INT 1
81475: PUSH
81476: EMPTY
81477: LIST
81478: LIST
81479: PUSH
81480: EMPTY
81481: LIST
81482: LIST
81483: PPUSH
81484: CALL_OW 69
81488: ST_TO_ADDR
// if not tmp then
81489: LD_VAR 0 2
81493: NOT
81494: IFFALSE 81498
// exit ;
81496: GO 81660
// un := tmp [ rand ( 1 , tmp ) ] ;
81498: LD_ADDR_VAR 0 3
81502: PUSH
81503: LD_VAR 0 2
81507: PUSH
81508: LD_INT 1
81510: PPUSH
81511: LD_VAR 0 2
81515: PPUSH
81516: CALL_OW 12
81520: ARRAY
81521: ST_TO_ADDR
// if Crawls ( un ) then
81522: LD_VAR 0 3
81526: PPUSH
81527: CALL_OW 318
81531: IFFALSE 81542
// ComWalk ( un ) ;
81533: LD_VAR 0 3
81537: PPUSH
81538: CALL_OW 138
// SetClass ( un , class_mortar ) ;
81542: LD_VAR 0 3
81546: PPUSH
81547: LD_INT 8
81549: PPUSH
81550: CALL_OW 336
// end ; 4 :
81554: GO 81660
81556: LD_INT 4
81558: DOUBLE
81559: EQUAL
81560: IFTRUE 81564
81562: GO 81638
81564: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
81565: LD_ADDR_VAR 0 2
81569: PUSH
81570: LD_INT 22
81572: PUSH
81573: LD_OWVAR 2
81577: PUSH
81578: EMPTY
81579: LIST
81580: LIST
81581: PUSH
81582: LD_INT 30
81584: PUSH
81585: LD_INT 29
81587: PUSH
81588: EMPTY
81589: LIST
81590: LIST
81591: PUSH
81592: EMPTY
81593: LIST
81594: LIST
81595: PPUSH
81596: CALL_OW 69
81600: ST_TO_ADDR
// if not tmp then
81601: LD_VAR 0 2
81605: NOT
81606: IFFALSE 81610
// exit ;
81608: GO 81660
// CenterNowOnUnits ( tmp [ 1 ] ) ;
81610: LD_VAR 0 2
81614: PUSH
81615: LD_INT 1
81617: ARRAY
81618: PPUSH
81619: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
81623: LD_VAR 0 2
81627: PUSH
81628: LD_INT 1
81630: ARRAY
81631: PPUSH
81632: CALL_OW 65
// end ; 5 .. 7 :
81636: GO 81660
81638: LD_INT 5
81640: DOUBLE
81641: GREATEREQUAL
81642: IFFALSE 81650
81644: LD_INT 7
81646: DOUBLE
81647: LESSEQUAL
81648: IFTRUE 81652
81650: GO 81659
81652: POP
// StreamSibBomb ; end ;
81653: CALL 77897 0 0
81657: GO 81660
81659: POP
// end ;
81660: PPOPN 3
81662: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
81663: LD_EXP 73
81667: PUSH
81668: LD_EXP 123
81672: AND
81673: IFFALSE 81829
81675: GO 81677
81677: DISABLE
81678: LD_INT 0
81680: PPUSH
81681: PPUSH
81682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
81683: LD_ADDR_VAR 0 2
81687: PUSH
81688: LD_INT 81
81690: PUSH
81691: LD_OWVAR 2
81695: PUSH
81696: EMPTY
81697: LIST
81698: LIST
81699: PUSH
81700: LD_INT 2
81702: PUSH
81703: LD_INT 21
81705: PUSH
81706: LD_INT 1
81708: PUSH
81709: EMPTY
81710: LIST
81711: LIST
81712: PUSH
81713: LD_INT 21
81715: PUSH
81716: LD_INT 2
81718: PUSH
81719: EMPTY
81720: LIST
81721: LIST
81722: PUSH
81723: EMPTY
81724: LIST
81725: LIST
81726: LIST
81727: PUSH
81728: EMPTY
81729: LIST
81730: LIST
81731: PPUSH
81732: CALL_OW 69
81736: ST_TO_ADDR
// if not tmp then
81737: LD_VAR 0 2
81741: NOT
81742: IFFALSE 81746
// exit ;
81744: GO 81829
// p := 0 ;
81746: LD_ADDR_VAR 0 3
81750: PUSH
81751: LD_INT 0
81753: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
81754: LD_INT 35
81756: PPUSH
81757: CALL_OW 67
// p := p + 1 ;
81761: LD_ADDR_VAR 0 3
81765: PUSH
81766: LD_VAR 0 3
81770: PUSH
81771: LD_INT 1
81773: PLUS
81774: ST_TO_ADDR
// for i in tmp do
81775: LD_ADDR_VAR 0 1
81779: PUSH
81780: LD_VAR 0 2
81784: PUSH
81785: FOR_IN
81786: IFFALSE 81817
// if GetLives ( i ) < 1000 then
81788: LD_VAR 0 1
81792: PPUSH
81793: CALL_OW 256
81797: PUSH
81798: LD_INT 1000
81800: LESS
81801: IFFALSE 81815
// SetLives ( i , 1000 ) ;
81803: LD_VAR 0 1
81807: PPUSH
81808: LD_INT 1000
81810: PPUSH
81811: CALL_OW 234
81815: GO 81785
81817: POP
81818: POP
// until p > 20 ;
81819: LD_VAR 0 3
81823: PUSH
81824: LD_INT 20
81826: GREATER
81827: IFFALSE 81754
// end ;
81829: PPOPN 3
81831: END
// every 0 0$1 trigger StreamModeActive and sTime do
81832: LD_EXP 73
81836: PUSH
81837: LD_EXP 124
81841: AND
81842: IFFALSE 81877
81844: GO 81846
81846: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
81847: LD_INT 28
81849: PPUSH
81850: LD_OWVAR 2
81854: PPUSH
81855: LD_INT 2
81857: PPUSH
81858: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
81862: LD_INT 30
81864: PPUSH
81865: LD_OWVAR 2
81869: PPUSH
81870: LD_INT 2
81872: PPUSH
81873: CALL_OW 322
// end ;
81877: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
81878: LD_EXP 73
81882: PUSH
81883: LD_EXP 125
81887: AND
81888: IFFALSE 82009
81890: GO 81892
81892: DISABLE
81893: LD_INT 0
81895: PPUSH
81896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81897: LD_ADDR_VAR 0 2
81901: PUSH
81902: LD_INT 22
81904: PUSH
81905: LD_OWVAR 2
81909: PUSH
81910: EMPTY
81911: LIST
81912: LIST
81913: PUSH
81914: LD_INT 21
81916: PUSH
81917: LD_INT 1
81919: PUSH
81920: EMPTY
81921: LIST
81922: LIST
81923: PUSH
81924: LD_INT 3
81926: PUSH
81927: LD_INT 23
81929: PUSH
81930: LD_INT 0
81932: PUSH
81933: EMPTY
81934: LIST
81935: LIST
81936: PUSH
81937: EMPTY
81938: LIST
81939: LIST
81940: PUSH
81941: EMPTY
81942: LIST
81943: LIST
81944: LIST
81945: PPUSH
81946: CALL_OW 69
81950: ST_TO_ADDR
// if not tmp then
81951: LD_VAR 0 2
81955: NOT
81956: IFFALSE 81960
// exit ;
81958: GO 82009
// for i in tmp do
81960: LD_ADDR_VAR 0 1
81964: PUSH
81965: LD_VAR 0 2
81969: PUSH
81970: FOR_IN
81971: IFFALSE 82007
// begin if Crawls ( i ) then
81973: LD_VAR 0 1
81977: PPUSH
81978: CALL_OW 318
81982: IFFALSE 81993
// ComWalk ( i ) ;
81984: LD_VAR 0 1
81988: PPUSH
81989: CALL_OW 138
// SetClass ( i , 2 ) ;
81993: LD_VAR 0 1
81997: PPUSH
81998: LD_INT 2
82000: PPUSH
82001: CALL_OW 336
// end ;
82005: GO 81970
82007: POP
82008: POP
// end ;
82009: PPOPN 2
82011: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
82012: LD_EXP 73
82016: PUSH
82017: LD_EXP 126
82021: AND
82022: IFFALSE 82310
82024: GO 82026
82026: DISABLE
82027: LD_INT 0
82029: PPUSH
82030: PPUSH
82031: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
82032: LD_OWVAR 2
82036: PPUSH
82037: LD_INT 9
82039: PPUSH
82040: LD_INT 1
82042: PPUSH
82043: LD_INT 1
82045: PPUSH
82046: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
82050: LD_INT 9
82052: PPUSH
82053: LD_OWVAR 2
82057: PPUSH
82058: CALL_OW 343
// uc_side := 9 ;
82062: LD_ADDR_OWVAR 20
82066: PUSH
82067: LD_INT 9
82069: ST_TO_ADDR
// uc_nation := 2 ;
82070: LD_ADDR_OWVAR 21
82074: PUSH
82075: LD_INT 2
82077: ST_TO_ADDR
// hc_name := Dark Warrior ;
82078: LD_ADDR_OWVAR 26
82082: PUSH
82083: LD_STRING Dark Warrior
82085: ST_TO_ADDR
// hc_gallery :=  ;
82086: LD_ADDR_OWVAR 33
82090: PUSH
82091: LD_STRING 
82093: ST_TO_ADDR
// hc_noskilllimit := true ;
82094: LD_ADDR_OWVAR 76
82098: PUSH
82099: LD_INT 1
82101: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
82102: LD_ADDR_OWVAR 31
82106: PUSH
82107: LD_INT 30
82109: PUSH
82110: LD_INT 30
82112: PUSH
82113: LD_INT 30
82115: PUSH
82116: LD_INT 30
82118: PUSH
82119: EMPTY
82120: LIST
82121: LIST
82122: LIST
82123: LIST
82124: ST_TO_ADDR
// un := CreateHuman ;
82125: LD_ADDR_VAR 0 3
82129: PUSH
82130: CALL_OW 44
82134: ST_TO_ADDR
// hc_noskilllimit := false ;
82135: LD_ADDR_OWVAR 76
82139: PUSH
82140: LD_INT 0
82142: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82143: LD_VAR 0 3
82147: PPUSH
82148: LD_INT 1
82150: PPUSH
82151: CALL_OW 51
// ToLua ( playRanger() ) ;
82155: LD_STRING playRanger()
82157: PPUSH
82158: CALL_OW 559
// p := 0 ;
82162: LD_ADDR_VAR 0 2
82166: PUSH
82167: LD_INT 0
82169: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82170: LD_INT 35
82172: PPUSH
82173: CALL_OW 67
// p := p + 1 ;
82177: LD_ADDR_VAR 0 2
82181: PUSH
82182: LD_VAR 0 2
82186: PUSH
82187: LD_INT 1
82189: PLUS
82190: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
82191: LD_VAR 0 3
82195: PPUSH
82196: CALL_OW 256
82200: PUSH
82201: LD_INT 1000
82203: LESS
82204: IFFALSE 82218
// SetLives ( un , 1000 ) ;
82206: LD_VAR 0 3
82210: PPUSH
82211: LD_INT 1000
82213: PPUSH
82214: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
82218: LD_VAR 0 3
82222: PPUSH
82223: LD_INT 81
82225: PUSH
82226: LD_OWVAR 2
82230: PUSH
82231: EMPTY
82232: LIST
82233: LIST
82234: PUSH
82235: LD_INT 91
82237: PUSH
82238: LD_VAR 0 3
82242: PUSH
82243: LD_INT 30
82245: PUSH
82246: EMPTY
82247: LIST
82248: LIST
82249: LIST
82250: PUSH
82251: EMPTY
82252: LIST
82253: LIST
82254: PPUSH
82255: CALL_OW 69
82259: PPUSH
82260: LD_VAR 0 3
82264: PPUSH
82265: CALL_OW 74
82269: PPUSH
82270: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
82274: LD_VAR 0 2
82278: PUSH
82279: LD_INT 80
82281: GREATER
82282: PUSH
82283: LD_VAR 0 3
82287: PPUSH
82288: CALL_OW 301
82292: OR
82293: IFFALSE 82170
// if un then
82295: LD_VAR 0 3
82299: IFFALSE 82310
// RemoveUnit ( un ) ;
82301: LD_VAR 0 3
82305: PPUSH
82306: CALL_OW 64
// end ;
82310: PPOPN 3
82312: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
82313: LD_EXP 127
82317: IFFALSE 82433
82319: GO 82321
82321: DISABLE
82322: LD_INT 0
82324: PPUSH
82325: PPUSH
82326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
82327: LD_ADDR_VAR 0 2
82331: PUSH
82332: LD_INT 81
82334: PUSH
82335: LD_OWVAR 2
82339: PUSH
82340: EMPTY
82341: LIST
82342: LIST
82343: PUSH
82344: LD_INT 21
82346: PUSH
82347: LD_INT 1
82349: PUSH
82350: EMPTY
82351: LIST
82352: LIST
82353: PUSH
82354: EMPTY
82355: LIST
82356: LIST
82357: PPUSH
82358: CALL_OW 69
82362: ST_TO_ADDR
// ToLua ( playComputer() ) ;
82363: LD_STRING playComputer()
82365: PPUSH
82366: CALL_OW 559
// if not tmp then
82370: LD_VAR 0 2
82374: NOT
82375: IFFALSE 82379
// exit ;
82377: GO 82433
// for i in tmp do
82379: LD_ADDR_VAR 0 1
82383: PUSH
82384: LD_VAR 0 2
82388: PUSH
82389: FOR_IN
82390: IFFALSE 82431
// for j := 1 to 4 do
82392: LD_ADDR_VAR 0 3
82396: PUSH
82397: DOUBLE
82398: LD_INT 1
82400: DEC
82401: ST_TO_ADDR
82402: LD_INT 4
82404: PUSH
82405: FOR_TO
82406: IFFALSE 82427
// SetSkill ( i , j , 10 ) ;
82408: LD_VAR 0 1
82412: PPUSH
82413: LD_VAR 0 3
82417: PPUSH
82418: LD_INT 10
82420: PPUSH
82421: CALL_OW 237
82425: GO 82405
82427: POP
82428: POP
82429: GO 82389
82431: POP
82432: POP
// end ;
82433: PPOPN 3
82435: END
// every 0 0$1 trigger s30 do var i , tmp ;
82436: LD_EXP 128
82440: IFFALSE 82509
82442: GO 82444
82444: DISABLE
82445: LD_INT 0
82447: PPUSH
82448: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82449: LD_ADDR_VAR 0 2
82453: PUSH
82454: LD_INT 22
82456: PUSH
82457: LD_OWVAR 2
82461: PUSH
82462: EMPTY
82463: LIST
82464: LIST
82465: PPUSH
82466: CALL_OW 69
82470: ST_TO_ADDR
// if not tmp then
82471: LD_VAR 0 2
82475: NOT
82476: IFFALSE 82480
// exit ;
82478: GO 82509
// for i in tmp do
82480: LD_ADDR_VAR 0 1
82484: PUSH
82485: LD_VAR 0 2
82489: PUSH
82490: FOR_IN
82491: IFFALSE 82507
// SetLives ( i , 300 ) ;
82493: LD_VAR 0 1
82497: PPUSH
82498: LD_INT 300
82500: PPUSH
82501: CALL_OW 234
82505: GO 82490
82507: POP
82508: POP
// end ;
82509: PPOPN 2
82511: END
// every 0 0$1 trigger s60 do var i , tmp ;
82512: LD_EXP 129
82516: IFFALSE 82585
82518: GO 82520
82520: DISABLE
82521: LD_INT 0
82523: PPUSH
82524: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82525: LD_ADDR_VAR 0 2
82529: PUSH
82530: LD_INT 22
82532: PUSH
82533: LD_OWVAR 2
82537: PUSH
82538: EMPTY
82539: LIST
82540: LIST
82541: PPUSH
82542: CALL_OW 69
82546: ST_TO_ADDR
// if not tmp then
82547: LD_VAR 0 2
82551: NOT
82552: IFFALSE 82556
// exit ;
82554: GO 82585
// for i in tmp do
82556: LD_ADDR_VAR 0 1
82560: PUSH
82561: LD_VAR 0 2
82565: PUSH
82566: FOR_IN
82567: IFFALSE 82583
// SetLives ( i , 600 ) ;
82569: LD_VAR 0 1
82573: PPUSH
82574: LD_INT 600
82576: PPUSH
82577: CALL_OW 234
82581: GO 82566
82583: POP
82584: POP
// end ;
82585: PPOPN 2
82587: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
82588: LD_INT 0
82590: PPUSH
// case cmd of 301 :
82591: LD_VAR 0 1
82595: PUSH
82596: LD_INT 301
82598: DOUBLE
82599: EQUAL
82600: IFTRUE 82604
82602: GO 82636
82604: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
82605: LD_VAR 0 6
82609: PPUSH
82610: LD_VAR 0 7
82614: PPUSH
82615: LD_VAR 0 8
82619: PPUSH
82620: LD_VAR 0 4
82624: PPUSH
82625: LD_VAR 0 5
82629: PPUSH
82630: CALL 83837 0 5
82634: GO 82757
82636: LD_INT 302
82638: DOUBLE
82639: EQUAL
82640: IFTRUE 82644
82642: GO 82681
82644: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
82645: LD_VAR 0 6
82649: PPUSH
82650: LD_VAR 0 7
82654: PPUSH
82655: LD_VAR 0 8
82659: PPUSH
82660: LD_VAR 0 9
82664: PPUSH
82665: LD_VAR 0 4
82669: PPUSH
82670: LD_VAR 0 5
82674: PPUSH
82675: CALL 83928 0 6
82679: GO 82757
82681: LD_INT 303
82683: DOUBLE
82684: EQUAL
82685: IFTRUE 82689
82687: GO 82726
82689: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
82690: LD_VAR 0 6
82694: PPUSH
82695: LD_VAR 0 7
82699: PPUSH
82700: LD_VAR 0 8
82704: PPUSH
82705: LD_VAR 0 9
82709: PPUSH
82710: LD_VAR 0 4
82714: PPUSH
82715: LD_VAR 0 5
82719: PPUSH
82720: CALL 82762 0 6
82724: GO 82757
82726: LD_INT 304
82728: DOUBLE
82729: EQUAL
82730: IFTRUE 82734
82732: GO 82756
82734: POP
// hHackTeleport ( unit , x , y ) ; end ;
82735: LD_VAR 0 2
82739: PPUSH
82740: LD_VAR 0 4
82744: PPUSH
82745: LD_VAR 0 5
82749: PPUSH
82750: CALL 84521 0 3
82754: GO 82757
82756: POP
// end ;
82757: LD_VAR 0 12
82761: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
82762: LD_INT 0
82764: PPUSH
82765: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
82766: LD_VAR 0 1
82770: PUSH
82771: LD_INT 1
82773: LESS
82774: PUSH
82775: LD_VAR 0 1
82779: PUSH
82780: LD_INT 3
82782: GREATER
82783: OR
82784: PUSH
82785: LD_VAR 0 5
82789: PPUSH
82790: LD_VAR 0 6
82794: PPUSH
82795: CALL_OW 428
82799: OR
82800: IFFALSE 82804
// exit ;
82802: GO 83524
// uc_side := your_side ;
82804: LD_ADDR_OWVAR 20
82808: PUSH
82809: LD_OWVAR 2
82813: ST_TO_ADDR
// uc_nation := nation ;
82814: LD_ADDR_OWVAR 21
82818: PUSH
82819: LD_VAR 0 1
82823: ST_TO_ADDR
// bc_level = 1 ;
82824: LD_ADDR_OWVAR 43
82828: PUSH
82829: LD_INT 1
82831: ST_TO_ADDR
// case btype of 1 :
82832: LD_VAR 0 2
82836: PUSH
82837: LD_INT 1
82839: DOUBLE
82840: EQUAL
82841: IFTRUE 82845
82843: GO 82856
82845: POP
// bc_type := b_depot ; 2 :
82846: LD_ADDR_OWVAR 42
82850: PUSH
82851: LD_INT 0
82853: ST_TO_ADDR
82854: GO 83468
82856: LD_INT 2
82858: DOUBLE
82859: EQUAL
82860: IFTRUE 82864
82862: GO 82875
82864: POP
// bc_type := b_warehouse ; 3 :
82865: LD_ADDR_OWVAR 42
82869: PUSH
82870: LD_INT 1
82872: ST_TO_ADDR
82873: GO 83468
82875: LD_INT 3
82877: DOUBLE
82878: EQUAL
82879: IFTRUE 82883
82881: GO 82894
82883: POP
// bc_type := b_lab ; 4 .. 9 :
82884: LD_ADDR_OWVAR 42
82888: PUSH
82889: LD_INT 6
82891: ST_TO_ADDR
82892: GO 83468
82894: LD_INT 4
82896: DOUBLE
82897: GREATEREQUAL
82898: IFFALSE 82906
82900: LD_INT 9
82902: DOUBLE
82903: LESSEQUAL
82904: IFTRUE 82908
82906: GO 82960
82908: POP
// begin bc_type := b_lab_half ;
82909: LD_ADDR_OWVAR 42
82913: PUSH
82914: LD_INT 7
82916: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
82917: LD_ADDR_OWVAR 44
82921: PUSH
82922: LD_INT 10
82924: PUSH
82925: LD_INT 11
82927: PUSH
82928: LD_INT 12
82930: PUSH
82931: LD_INT 15
82933: PUSH
82934: LD_INT 14
82936: PUSH
82937: LD_INT 13
82939: PUSH
82940: EMPTY
82941: LIST
82942: LIST
82943: LIST
82944: LIST
82945: LIST
82946: LIST
82947: PUSH
82948: LD_VAR 0 2
82952: PUSH
82953: LD_INT 3
82955: MINUS
82956: ARRAY
82957: ST_TO_ADDR
// end ; 10 .. 13 :
82958: GO 83468
82960: LD_INT 10
82962: DOUBLE
82963: GREATEREQUAL
82964: IFFALSE 82972
82966: LD_INT 13
82968: DOUBLE
82969: LESSEQUAL
82970: IFTRUE 82974
82972: GO 83051
82974: POP
// begin bc_type := b_lab_full ;
82975: LD_ADDR_OWVAR 42
82979: PUSH
82980: LD_INT 8
82982: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
82983: LD_ADDR_OWVAR 44
82987: PUSH
82988: LD_INT 10
82990: PUSH
82991: LD_INT 12
82993: PUSH
82994: LD_INT 14
82996: PUSH
82997: LD_INT 13
82999: PUSH
83000: EMPTY
83001: LIST
83002: LIST
83003: LIST
83004: LIST
83005: PUSH
83006: LD_VAR 0 2
83010: PUSH
83011: LD_INT 9
83013: MINUS
83014: ARRAY
83015: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
83016: LD_ADDR_OWVAR 45
83020: PUSH
83021: LD_INT 11
83023: PUSH
83024: LD_INT 15
83026: PUSH
83027: LD_INT 12
83029: PUSH
83030: LD_INT 15
83032: PUSH
83033: EMPTY
83034: LIST
83035: LIST
83036: LIST
83037: LIST
83038: PUSH
83039: LD_VAR 0 2
83043: PUSH
83044: LD_INT 9
83046: MINUS
83047: ARRAY
83048: ST_TO_ADDR
// end ; 14 :
83049: GO 83468
83051: LD_INT 14
83053: DOUBLE
83054: EQUAL
83055: IFTRUE 83059
83057: GO 83070
83059: POP
// bc_type := b_workshop ; 15 :
83060: LD_ADDR_OWVAR 42
83064: PUSH
83065: LD_INT 2
83067: ST_TO_ADDR
83068: GO 83468
83070: LD_INT 15
83072: DOUBLE
83073: EQUAL
83074: IFTRUE 83078
83076: GO 83089
83078: POP
// bc_type := b_factory ; 16 :
83079: LD_ADDR_OWVAR 42
83083: PUSH
83084: LD_INT 3
83086: ST_TO_ADDR
83087: GO 83468
83089: LD_INT 16
83091: DOUBLE
83092: EQUAL
83093: IFTRUE 83097
83095: GO 83108
83097: POP
// bc_type := b_ext_gun ; 17 :
83098: LD_ADDR_OWVAR 42
83102: PUSH
83103: LD_INT 17
83105: ST_TO_ADDR
83106: GO 83468
83108: LD_INT 17
83110: DOUBLE
83111: EQUAL
83112: IFTRUE 83116
83114: GO 83144
83116: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
83117: LD_ADDR_OWVAR 42
83121: PUSH
83122: LD_INT 19
83124: PUSH
83125: LD_INT 23
83127: PUSH
83128: LD_INT 19
83130: PUSH
83131: EMPTY
83132: LIST
83133: LIST
83134: LIST
83135: PUSH
83136: LD_VAR 0 1
83140: ARRAY
83141: ST_TO_ADDR
83142: GO 83468
83144: LD_INT 18
83146: DOUBLE
83147: EQUAL
83148: IFTRUE 83152
83150: GO 83163
83152: POP
// bc_type := b_ext_radar ; 19 :
83153: LD_ADDR_OWVAR 42
83157: PUSH
83158: LD_INT 20
83160: ST_TO_ADDR
83161: GO 83468
83163: LD_INT 19
83165: DOUBLE
83166: EQUAL
83167: IFTRUE 83171
83169: GO 83182
83171: POP
// bc_type := b_ext_radio ; 20 :
83172: LD_ADDR_OWVAR 42
83176: PUSH
83177: LD_INT 22
83179: ST_TO_ADDR
83180: GO 83468
83182: LD_INT 20
83184: DOUBLE
83185: EQUAL
83186: IFTRUE 83190
83188: GO 83201
83190: POP
// bc_type := b_ext_siberium ; 21 :
83191: LD_ADDR_OWVAR 42
83195: PUSH
83196: LD_INT 21
83198: ST_TO_ADDR
83199: GO 83468
83201: LD_INT 21
83203: DOUBLE
83204: EQUAL
83205: IFTRUE 83209
83207: GO 83220
83209: POP
// bc_type := b_ext_computer ; 22 :
83210: LD_ADDR_OWVAR 42
83214: PUSH
83215: LD_INT 24
83217: ST_TO_ADDR
83218: GO 83468
83220: LD_INT 22
83222: DOUBLE
83223: EQUAL
83224: IFTRUE 83228
83226: GO 83239
83228: POP
// bc_type := b_ext_track ; 23 :
83229: LD_ADDR_OWVAR 42
83233: PUSH
83234: LD_INT 16
83236: ST_TO_ADDR
83237: GO 83468
83239: LD_INT 23
83241: DOUBLE
83242: EQUAL
83243: IFTRUE 83247
83245: GO 83258
83247: POP
// bc_type := b_ext_laser ; 24 :
83248: LD_ADDR_OWVAR 42
83252: PUSH
83253: LD_INT 25
83255: ST_TO_ADDR
83256: GO 83468
83258: LD_INT 24
83260: DOUBLE
83261: EQUAL
83262: IFTRUE 83266
83264: GO 83277
83266: POP
// bc_type := b_control_tower ; 25 :
83267: LD_ADDR_OWVAR 42
83271: PUSH
83272: LD_INT 36
83274: ST_TO_ADDR
83275: GO 83468
83277: LD_INT 25
83279: DOUBLE
83280: EQUAL
83281: IFTRUE 83285
83283: GO 83296
83285: POP
// bc_type := b_breastwork ; 26 :
83286: LD_ADDR_OWVAR 42
83290: PUSH
83291: LD_INT 31
83293: ST_TO_ADDR
83294: GO 83468
83296: LD_INT 26
83298: DOUBLE
83299: EQUAL
83300: IFTRUE 83304
83302: GO 83315
83304: POP
// bc_type := b_bunker ; 27 :
83305: LD_ADDR_OWVAR 42
83309: PUSH
83310: LD_INT 32
83312: ST_TO_ADDR
83313: GO 83468
83315: LD_INT 27
83317: DOUBLE
83318: EQUAL
83319: IFTRUE 83323
83321: GO 83334
83323: POP
// bc_type := b_turret ; 28 :
83324: LD_ADDR_OWVAR 42
83328: PUSH
83329: LD_INT 33
83331: ST_TO_ADDR
83332: GO 83468
83334: LD_INT 28
83336: DOUBLE
83337: EQUAL
83338: IFTRUE 83342
83340: GO 83353
83342: POP
// bc_type := b_armoury ; 29 :
83343: LD_ADDR_OWVAR 42
83347: PUSH
83348: LD_INT 4
83350: ST_TO_ADDR
83351: GO 83468
83353: LD_INT 29
83355: DOUBLE
83356: EQUAL
83357: IFTRUE 83361
83359: GO 83372
83361: POP
// bc_type := b_barracks ; 30 :
83362: LD_ADDR_OWVAR 42
83366: PUSH
83367: LD_INT 5
83369: ST_TO_ADDR
83370: GO 83468
83372: LD_INT 30
83374: DOUBLE
83375: EQUAL
83376: IFTRUE 83380
83378: GO 83391
83380: POP
// bc_type := b_solar_power ; 31 :
83381: LD_ADDR_OWVAR 42
83385: PUSH
83386: LD_INT 27
83388: ST_TO_ADDR
83389: GO 83468
83391: LD_INT 31
83393: DOUBLE
83394: EQUAL
83395: IFTRUE 83399
83397: GO 83410
83399: POP
// bc_type := b_oil_power ; 32 :
83400: LD_ADDR_OWVAR 42
83404: PUSH
83405: LD_INT 26
83407: ST_TO_ADDR
83408: GO 83468
83410: LD_INT 32
83412: DOUBLE
83413: EQUAL
83414: IFTRUE 83418
83416: GO 83429
83418: POP
// bc_type := b_siberite_power ; 33 :
83419: LD_ADDR_OWVAR 42
83423: PUSH
83424: LD_INT 28
83426: ST_TO_ADDR
83427: GO 83468
83429: LD_INT 33
83431: DOUBLE
83432: EQUAL
83433: IFTRUE 83437
83435: GO 83448
83437: POP
// bc_type := b_oil_mine ; 34 :
83438: LD_ADDR_OWVAR 42
83442: PUSH
83443: LD_INT 29
83445: ST_TO_ADDR
83446: GO 83468
83448: LD_INT 34
83450: DOUBLE
83451: EQUAL
83452: IFTRUE 83456
83454: GO 83467
83456: POP
// bc_type := b_siberite_mine ; end ;
83457: LD_ADDR_OWVAR 42
83461: PUSH
83462: LD_INT 30
83464: ST_TO_ADDR
83465: GO 83468
83467: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
83468: LD_ADDR_VAR 0 8
83472: PUSH
83473: LD_VAR 0 5
83477: PPUSH
83478: LD_VAR 0 6
83482: PPUSH
83483: LD_VAR 0 3
83487: PPUSH
83488: CALL_OW 47
83492: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
83493: LD_OWVAR 42
83497: PUSH
83498: LD_INT 32
83500: PUSH
83501: LD_INT 33
83503: PUSH
83504: EMPTY
83505: LIST
83506: LIST
83507: IN
83508: IFFALSE 83524
// PlaceWeaponTurret ( b , weapon ) ;
83510: LD_VAR 0 8
83514: PPUSH
83515: LD_VAR 0 4
83519: PPUSH
83520: CALL_OW 431
// end ;
83524: LD_VAR 0 7
83528: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
83529: LD_INT 0
83531: PPUSH
83532: PPUSH
83533: PPUSH
83534: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
83535: LD_ADDR_VAR 0 4
83539: PUSH
83540: LD_INT 22
83542: PUSH
83543: LD_OWVAR 2
83547: PUSH
83548: EMPTY
83549: LIST
83550: LIST
83551: PUSH
83552: LD_INT 2
83554: PUSH
83555: LD_INT 30
83557: PUSH
83558: LD_INT 0
83560: PUSH
83561: EMPTY
83562: LIST
83563: LIST
83564: PUSH
83565: LD_INT 30
83567: PUSH
83568: LD_INT 1
83570: PUSH
83571: EMPTY
83572: LIST
83573: LIST
83574: PUSH
83575: EMPTY
83576: LIST
83577: LIST
83578: LIST
83579: PUSH
83580: EMPTY
83581: LIST
83582: LIST
83583: PPUSH
83584: CALL_OW 69
83588: ST_TO_ADDR
// if not tmp then
83589: LD_VAR 0 4
83593: NOT
83594: IFFALSE 83598
// exit ;
83596: GO 83657
// for i in tmp do
83598: LD_ADDR_VAR 0 2
83602: PUSH
83603: LD_VAR 0 4
83607: PUSH
83608: FOR_IN
83609: IFFALSE 83655
// for j = 1 to 3 do
83611: LD_ADDR_VAR 0 3
83615: PUSH
83616: DOUBLE
83617: LD_INT 1
83619: DEC
83620: ST_TO_ADDR
83621: LD_INT 3
83623: PUSH
83624: FOR_TO
83625: IFFALSE 83651
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
83627: LD_VAR 0 2
83631: PPUSH
83632: CALL_OW 274
83636: PPUSH
83637: LD_VAR 0 3
83641: PPUSH
83642: LD_INT 99999
83644: PPUSH
83645: CALL_OW 277
83649: GO 83624
83651: POP
83652: POP
83653: GO 83608
83655: POP
83656: POP
// end ;
83657: LD_VAR 0 1
83661: RET
// export function hHackSetLevel10 ; var i , j ; begin
83662: LD_INT 0
83664: PPUSH
83665: PPUSH
83666: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
83667: LD_ADDR_VAR 0 2
83671: PUSH
83672: LD_INT 21
83674: PUSH
83675: LD_INT 1
83677: PUSH
83678: EMPTY
83679: LIST
83680: LIST
83681: PPUSH
83682: CALL_OW 69
83686: PUSH
83687: FOR_IN
83688: IFFALSE 83740
// if IsSelected ( i ) then
83690: LD_VAR 0 2
83694: PPUSH
83695: CALL_OW 306
83699: IFFALSE 83738
// begin for j := 1 to 4 do
83701: LD_ADDR_VAR 0 3
83705: PUSH
83706: DOUBLE
83707: LD_INT 1
83709: DEC
83710: ST_TO_ADDR
83711: LD_INT 4
83713: PUSH
83714: FOR_TO
83715: IFFALSE 83736
// SetSkill ( i , j , 10 ) ;
83717: LD_VAR 0 2
83721: PPUSH
83722: LD_VAR 0 3
83726: PPUSH
83727: LD_INT 10
83729: PPUSH
83730: CALL_OW 237
83734: GO 83714
83736: POP
83737: POP
// end ;
83738: GO 83687
83740: POP
83741: POP
// end ;
83742: LD_VAR 0 1
83746: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
83747: LD_INT 0
83749: PPUSH
83750: PPUSH
83751: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
83752: LD_ADDR_VAR 0 2
83756: PUSH
83757: LD_INT 22
83759: PUSH
83760: LD_OWVAR 2
83764: PUSH
83765: EMPTY
83766: LIST
83767: LIST
83768: PUSH
83769: LD_INT 21
83771: PUSH
83772: LD_INT 1
83774: PUSH
83775: EMPTY
83776: LIST
83777: LIST
83778: PUSH
83779: EMPTY
83780: LIST
83781: LIST
83782: PPUSH
83783: CALL_OW 69
83787: PUSH
83788: FOR_IN
83789: IFFALSE 83830
// begin for j := 1 to 4 do
83791: LD_ADDR_VAR 0 3
83795: PUSH
83796: DOUBLE
83797: LD_INT 1
83799: DEC
83800: ST_TO_ADDR
83801: LD_INT 4
83803: PUSH
83804: FOR_TO
83805: IFFALSE 83826
// SetSkill ( i , j , 10 ) ;
83807: LD_VAR 0 2
83811: PPUSH
83812: LD_VAR 0 3
83816: PPUSH
83817: LD_INT 10
83819: PPUSH
83820: CALL_OW 237
83824: GO 83804
83826: POP
83827: POP
// end ;
83828: GO 83788
83830: POP
83831: POP
// end ;
83832: LD_VAR 0 1
83836: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
83837: LD_INT 0
83839: PPUSH
// uc_side := your_side ;
83840: LD_ADDR_OWVAR 20
83844: PUSH
83845: LD_OWVAR 2
83849: ST_TO_ADDR
// uc_nation := nation ;
83850: LD_ADDR_OWVAR 21
83854: PUSH
83855: LD_VAR 0 1
83859: ST_TO_ADDR
// InitHc ;
83860: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
83864: LD_INT 0
83866: PPUSH
83867: LD_VAR 0 2
83871: PPUSH
83872: LD_VAR 0 3
83876: PPUSH
83877: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
83881: LD_VAR 0 4
83885: PPUSH
83886: LD_VAR 0 5
83890: PPUSH
83891: CALL_OW 428
83895: PUSH
83896: LD_INT 0
83898: EQUAL
83899: IFFALSE 83923
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
83901: CALL_OW 44
83905: PPUSH
83906: LD_VAR 0 4
83910: PPUSH
83911: LD_VAR 0 5
83915: PPUSH
83916: LD_INT 1
83918: PPUSH
83919: CALL_OW 48
// end ;
83923: LD_VAR 0 6
83927: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
83928: LD_INT 0
83930: PPUSH
83931: PPUSH
// uc_side := your_side ;
83932: LD_ADDR_OWVAR 20
83936: PUSH
83937: LD_OWVAR 2
83941: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
83942: LD_VAR 0 1
83946: PUSH
83947: LD_INT 1
83949: PUSH
83950: LD_INT 2
83952: PUSH
83953: LD_INT 3
83955: PUSH
83956: LD_INT 4
83958: PUSH
83959: LD_INT 5
83961: PUSH
83962: EMPTY
83963: LIST
83964: LIST
83965: LIST
83966: LIST
83967: LIST
83968: IN
83969: IFFALSE 83981
// uc_nation := nation_american else
83971: LD_ADDR_OWVAR 21
83975: PUSH
83976: LD_INT 1
83978: ST_TO_ADDR
83979: GO 84024
// if chassis in [ 11 , 12 , 13 , 14 ] then
83981: LD_VAR 0 1
83985: PUSH
83986: LD_INT 11
83988: PUSH
83989: LD_INT 12
83991: PUSH
83992: LD_INT 13
83994: PUSH
83995: LD_INT 14
83997: PUSH
83998: EMPTY
83999: LIST
84000: LIST
84001: LIST
84002: LIST
84003: IN
84004: IFFALSE 84016
// uc_nation := nation_arabian else
84006: LD_ADDR_OWVAR 21
84010: PUSH
84011: LD_INT 2
84013: ST_TO_ADDR
84014: GO 84024
// uc_nation := nation_russian ;
84016: LD_ADDR_OWVAR 21
84020: PUSH
84021: LD_INT 3
84023: ST_TO_ADDR
// vc_chassis := chassis ;
84024: LD_ADDR_OWVAR 37
84028: PUSH
84029: LD_VAR 0 1
84033: ST_TO_ADDR
// vc_engine := engine ;
84034: LD_ADDR_OWVAR 39
84038: PUSH
84039: LD_VAR 0 2
84043: ST_TO_ADDR
// vc_control := control ;
84044: LD_ADDR_OWVAR 38
84048: PUSH
84049: LD_VAR 0 3
84053: ST_TO_ADDR
// vc_weapon := weapon ;
84054: LD_ADDR_OWVAR 40
84058: PUSH
84059: LD_VAR 0 4
84063: ST_TO_ADDR
// un := CreateVehicle ;
84064: LD_ADDR_VAR 0 8
84068: PUSH
84069: CALL_OW 45
84073: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
84074: LD_VAR 0 8
84078: PPUSH
84079: LD_INT 0
84081: PPUSH
84082: LD_INT 5
84084: PPUSH
84085: CALL_OW 12
84089: PPUSH
84090: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
84094: LD_VAR 0 8
84098: PPUSH
84099: LD_VAR 0 5
84103: PPUSH
84104: LD_VAR 0 6
84108: PPUSH
84109: LD_INT 1
84111: PPUSH
84112: CALL_OW 48
// end ;
84116: LD_VAR 0 7
84120: RET
// export hInvincible ; every 1 do
84121: GO 84123
84123: DISABLE
// hInvincible := [ ] ;
84124: LD_ADDR_EXP 130
84128: PUSH
84129: EMPTY
84130: ST_TO_ADDR
84131: END
// every 10 do var i ;
84132: GO 84134
84134: DISABLE
84135: LD_INT 0
84137: PPUSH
// begin enable ;
84138: ENABLE
// if not hInvincible then
84139: LD_EXP 130
84143: NOT
84144: IFFALSE 84148
// exit ;
84146: GO 84192
// for i in hInvincible do
84148: LD_ADDR_VAR 0 1
84152: PUSH
84153: LD_EXP 130
84157: PUSH
84158: FOR_IN
84159: IFFALSE 84190
// if GetLives ( i ) < 1000 then
84161: LD_VAR 0 1
84165: PPUSH
84166: CALL_OW 256
84170: PUSH
84171: LD_INT 1000
84173: LESS
84174: IFFALSE 84188
// SetLives ( i , 1000 ) ;
84176: LD_VAR 0 1
84180: PPUSH
84181: LD_INT 1000
84183: PPUSH
84184: CALL_OW 234
84188: GO 84158
84190: POP
84191: POP
// end ;
84192: PPOPN 1
84194: END
// export function hHackInvincible ; var i ; begin
84195: LD_INT 0
84197: PPUSH
84198: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
84199: LD_ADDR_VAR 0 2
84203: PUSH
84204: LD_INT 2
84206: PUSH
84207: LD_INT 21
84209: PUSH
84210: LD_INT 1
84212: PUSH
84213: EMPTY
84214: LIST
84215: LIST
84216: PUSH
84217: LD_INT 21
84219: PUSH
84220: LD_INT 2
84222: PUSH
84223: EMPTY
84224: LIST
84225: LIST
84226: PUSH
84227: EMPTY
84228: LIST
84229: LIST
84230: LIST
84231: PPUSH
84232: CALL_OW 69
84236: PUSH
84237: FOR_IN
84238: IFFALSE 84299
// if IsSelected ( i ) then
84240: LD_VAR 0 2
84244: PPUSH
84245: CALL_OW 306
84249: IFFALSE 84297
// begin if i in hInvincible then
84251: LD_VAR 0 2
84255: PUSH
84256: LD_EXP 130
84260: IN
84261: IFFALSE 84281
// hInvincible := hInvincible diff i else
84263: LD_ADDR_EXP 130
84267: PUSH
84268: LD_EXP 130
84272: PUSH
84273: LD_VAR 0 2
84277: DIFF
84278: ST_TO_ADDR
84279: GO 84297
// hInvincible := hInvincible union i ;
84281: LD_ADDR_EXP 130
84285: PUSH
84286: LD_EXP 130
84290: PUSH
84291: LD_VAR 0 2
84295: UNION
84296: ST_TO_ADDR
// end ;
84297: GO 84237
84299: POP
84300: POP
// end ;
84301: LD_VAR 0 1
84305: RET
// export function hHackInvisible ; var i , j ; begin
84306: LD_INT 0
84308: PPUSH
84309: PPUSH
84310: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84311: LD_ADDR_VAR 0 2
84315: PUSH
84316: LD_INT 21
84318: PUSH
84319: LD_INT 1
84321: PUSH
84322: EMPTY
84323: LIST
84324: LIST
84325: PPUSH
84326: CALL_OW 69
84330: PUSH
84331: FOR_IN
84332: IFFALSE 84356
// if IsSelected ( i ) then
84334: LD_VAR 0 2
84338: PPUSH
84339: CALL_OW 306
84343: IFFALSE 84354
// ComForceInvisible ( i ) ;
84345: LD_VAR 0 2
84349: PPUSH
84350: CALL_OW 496
84354: GO 84331
84356: POP
84357: POP
// end ;
84358: LD_VAR 0 1
84362: RET
// export function hHackChangeYourSide ; begin
84363: LD_INT 0
84365: PPUSH
// if your_side = 8 then
84366: LD_OWVAR 2
84370: PUSH
84371: LD_INT 8
84373: EQUAL
84374: IFFALSE 84386
// your_side := 0 else
84376: LD_ADDR_OWVAR 2
84380: PUSH
84381: LD_INT 0
84383: ST_TO_ADDR
84384: GO 84400
// your_side := your_side + 1 ;
84386: LD_ADDR_OWVAR 2
84390: PUSH
84391: LD_OWVAR 2
84395: PUSH
84396: LD_INT 1
84398: PLUS
84399: ST_TO_ADDR
// end ;
84400: LD_VAR 0 1
84404: RET
// export function hHackChangeUnitSide ; var i , j ; begin
84405: LD_INT 0
84407: PPUSH
84408: PPUSH
84409: PPUSH
// for i in all_units do
84410: LD_ADDR_VAR 0 2
84414: PUSH
84415: LD_OWVAR 3
84419: PUSH
84420: FOR_IN
84421: IFFALSE 84499
// if IsSelected ( i ) then
84423: LD_VAR 0 2
84427: PPUSH
84428: CALL_OW 306
84432: IFFALSE 84497
// begin j := GetSide ( i ) ;
84434: LD_ADDR_VAR 0 3
84438: PUSH
84439: LD_VAR 0 2
84443: PPUSH
84444: CALL_OW 255
84448: ST_TO_ADDR
// if j = 8 then
84449: LD_VAR 0 3
84453: PUSH
84454: LD_INT 8
84456: EQUAL
84457: IFFALSE 84469
// j := 0 else
84459: LD_ADDR_VAR 0 3
84463: PUSH
84464: LD_INT 0
84466: ST_TO_ADDR
84467: GO 84483
// j := j + 1 ;
84469: LD_ADDR_VAR 0 3
84473: PUSH
84474: LD_VAR 0 3
84478: PUSH
84479: LD_INT 1
84481: PLUS
84482: ST_TO_ADDR
// SetSide ( i , j ) ;
84483: LD_VAR 0 2
84487: PPUSH
84488: LD_VAR 0 3
84492: PPUSH
84493: CALL_OW 235
// end ;
84497: GO 84420
84499: POP
84500: POP
// end ;
84501: LD_VAR 0 1
84505: RET
// export function hHackFog ; begin
84506: LD_INT 0
84508: PPUSH
// FogOff ( true ) ;
84509: LD_INT 1
84511: PPUSH
84512: CALL_OW 344
// end ;
84516: LD_VAR 0 1
84520: RET
// export function hHackTeleport ( unit , x , y ) ; begin
84521: LD_INT 0
84523: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
84524: LD_VAR 0 1
84528: PPUSH
84529: LD_VAR 0 2
84533: PPUSH
84534: LD_VAR 0 3
84538: PPUSH
84539: LD_INT 1
84541: PPUSH
84542: LD_INT 1
84544: PPUSH
84545: CALL_OW 483
// CenterOnXY ( x , y ) ;
84549: LD_VAR 0 2
84553: PPUSH
84554: LD_VAR 0 3
84558: PPUSH
84559: CALL_OW 84
// end ;
84563: LD_VAR 0 4
84567: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
84568: LD_INT 0
84570: PPUSH
84571: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
84572: LD_VAR 0 1
84576: NOT
84577: PUSH
84578: LD_VAR 0 2
84582: PPUSH
84583: LD_VAR 0 3
84587: PPUSH
84588: CALL_OW 488
84592: NOT
84593: OR
84594: PUSH
84595: LD_VAR 0 1
84599: PPUSH
84600: CALL_OW 266
84604: PUSH
84605: LD_INT 3
84607: NONEQUAL
84608: PUSH
84609: LD_VAR 0 1
84613: PPUSH
84614: CALL_OW 247
84618: PUSH
84619: LD_INT 1
84621: EQUAL
84622: NOT
84623: AND
84624: OR
84625: IFFALSE 84629
// exit ;
84627: GO 84778
// if GetType ( factory ) = unit_human then
84629: LD_VAR 0 1
84633: PPUSH
84634: CALL_OW 247
84638: PUSH
84639: LD_INT 1
84641: EQUAL
84642: IFFALSE 84659
// factory := IsInUnit ( factory ) ;
84644: LD_ADDR_VAR 0 1
84648: PUSH
84649: LD_VAR 0 1
84653: PPUSH
84654: CALL_OW 310
84658: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
84659: LD_VAR 0 1
84663: PPUSH
84664: CALL_OW 266
84668: PUSH
84669: LD_INT 3
84671: NONEQUAL
84672: IFFALSE 84676
// exit ;
84674: GO 84778
// if HexInfo ( x , y ) = factory then
84676: LD_VAR 0 2
84680: PPUSH
84681: LD_VAR 0 3
84685: PPUSH
84686: CALL_OW 428
84690: PUSH
84691: LD_VAR 0 1
84695: EQUAL
84696: IFFALSE 84723
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
84698: LD_ADDR_EXP 131
84702: PUSH
84703: LD_EXP 131
84707: PPUSH
84708: LD_VAR 0 1
84712: PPUSH
84713: LD_INT 0
84715: PPUSH
84716: CALL_OW 1
84720: ST_TO_ADDR
84721: GO 84774
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
84723: LD_ADDR_EXP 131
84727: PUSH
84728: LD_EXP 131
84732: PPUSH
84733: LD_VAR 0 1
84737: PPUSH
84738: LD_VAR 0 1
84742: PPUSH
84743: CALL_OW 255
84747: PUSH
84748: LD_VAR 0 1
84752: PUSH
84753: LD_VAR 0 2
84757: PUSH
84758: LD_VAR 0 3
84762: PUSH
84763: EMPTY
84764: LIST
84765: LIST
84766: LIST
84767: LIST
84768: PPUSH
84769: CALL_OW 1
84773: ST_TO_ADDR
// UpdateFactoryWaypoints ;
84774: CALL 84783 0 0
// end ;
84778: LD_VAR 0 4
84782: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
84783: LD_INT 0
84785: PPUSH
84786: PPUSH
84787: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
84788: LD_STRING resetFactoryWaypoint();
84790: PPUSH
84791: CALL_OW 559
// if factoryWaypoints then
84795: LD_EXP 131
84799: IFFALSE 84925
// begin list := PrepareArray ( factoryWaypoints ) ;
84801: LD_ADDR_VAR 0 3
84805: PUSH
84806: LD_EXP 131
84810: PPUSH
84811: CALL 69841 0 1
84815: ST_TO_ADDR
// for i := 1 to list do
84816: LD_ADDR_VAR 0 2
84820: PUSH
84821: DOUBLE
84822: LD_INT 1
84824: DEC
84825: ST_TO_ADDR
84826: LD_VAR 0 3
84830: PUSH
84831: FOR_TO
84832: IFFALSE 84923
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
84834: LD_STRING setFactoryWaypointXY(
84836: PUSH
84837: LD_VAR 0 3
84841: PUSH
84842: LD_VAR 0 2
84846: ARRAY
84847: PUSH
84848: LD_INT 1
84850: ARRAY
84851: STR
84852: PUSH
84853: LD_STRING ,
84855: STR
84856: PUSH
84857: LD_VAR 0 3
84861: PUSH
84862: LD_VAR 0 2
84866: ARRAY
84867: PUSH
84868: LD_INT 2
84870: ARRAY
84871: STR
84872: PUSH
84873: LD_STRING ,
84875: STR
84876: PUSH
84877: LD_VAR 0 3
84881: PUSH
84882: LD_VAR 0 2
84886: ARRAY
84887: PUSH
84888: LD_INT 3
84890: ARRAY
84891: STR
84892: PUSH
84893: LD_STRING ,
84895: STR
84896: PUSH
84897: LD_VAR 0 3
84901: PUSH
84902: LD_VAR 0 2
84906: ARRAY
84907: PUSH
84908: LD_INT 4
84910: ARRAY
84911: STR
84912: PUSH
84913: LD_STRING )
84915: STR
84916: PPUSH
84917: CALL_OW 559
84921: GO 84831
84923: POP
84924: POP
// end ; end ;
84925: LD_VAR 0 1
84929: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
84930: LD_INT 0
84932: PPUSH
// if HexInfo ( x , y ) = warehouse then
84933: LD_VAR 0 2
84937: PPUSH
84938: LD_VAR 0 3
84942: PPUSH
84943: CALL_OW 428
84947: PUSH
84948: LD_VAR 0 1
84952: EQUAL
84953: IFFALSE 84980
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
84955: LD_ADDR_EXP 132
84959: PUSH
84960: LD_EXP 132
84964: PPUSH
84965: LD_VAR 0 1
84969: PPUSH
84970: LD_INT 0
84972: PPUSH
84973: CALL_OW 1
84977: ST_TO_ADDR
84978: GO 85031
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
84980: LD_ADDR_EXP 132
84984: PUSH
84985: LD_EXP 132
84989: PPUSH
84990: LD_VAR 0 1
84994: PPUSH
84995: LD_VAR 0 1
84999: PPUSH
85000: CALL_OW 255
85004: PUSH
85005: LD_VAR 0 1
85009: PUSH
85010: LD_VAR 0 2
85014: PUSH
85015: LD_VAR 0 3
85019: PUSH
85020: EMPTY
85021: LIST
85022: LIST
85023: LIST
85024: LIST
85025: PPUSH
85026: CALL_OW 1
85030: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
85031: CALL 85040 0 0
// end ;
85035: LD_VAR 0 4
85039: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
85040: LD_INT 0
85042: PPUSH
85043: PPUSH
85044: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
85045: LD_STRING resetWarehouseGatheringPoints();
85047: PPUSH
85048: CALL_OW 559
// if warehouseGatheringPoints then
85052: LD_EXP 132
85056: IFFALSE 85182
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
85058: LD_ADDR_VAR 0 3
85062: PUSH
85063: LD_EXP 132
85067: PPUSH
85068: CALL 69841 0 1
85072: ST_TO_ADDR
// for i := 1 to list do
85073: LD_ADDR_VAR 0 2
85077: PUSH
85078: DOUBLE
85079: LD_INT 1
85081: DEC
85082: ST_TO_ADDR
85083: LD_VAR 0 3
85087: PUSH
85088: FOR_TO
85089: IFFALSE 85180
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85091: LD_STRING setWarehouseGatheringPointXY(
85093: PUSH
85094: LD_VAR 0 3
85098: PUSH
85099: LD_VAR 0 2
85103: ARRAY
85104: PUSH
85105: LD_INT 1
85107: ARRAY
85108: STR
85109: PUSH
85110: LD_STRING ,
85112: STR
85113: PUSH
85114: LD_VAR 0 3
85118: PUSH
85119: LD_VAR 0 2
85123: ARRAY
85124: PUSH
85125: LD_INT 2
85127: ARRAY
85128: STR
85129: PUSH
85130: LD_STRING ,
85132: STR
85133: PUSH
85134: LD_VAR 0 3
85138: PUSH
85139: LD_VAR 0 2
85143: ARRAY
85144: PUSH
85145: LD_INT 3
85147: ARRAY
85148: STR
85149: PUSH
85150: LD_STRING ,
85152: STR
85153: PUSH
85154: LD_VAR 0 3
85158: PUSH
85159: LD_VAR 0 2
85163: ARRAY
85164: PUSH
85165: LD_INT 4
85167: ARRAY
85168: STR
85169: PUSH
85170: LD_STRING )
85172: STR
85173: PPUSH
85174: CALL_OW 559
85178: GO 85088
85180: POP
85181: POP
// end ; end ;
85182: LD_VAR 0 1
85186: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
85187: LD_EXP 132
85191: IFFALSE 85876
85193: GO 85195
85195: DISABLE
85196: LD_INT 0
85198: PPUSH
85199: PPUSH
85200: PPUSH
85201: PPUSH
85202: PPUSH
85203: PPUSH
85204: PPUSH
85205: PPUSH
85206: PPUSH
// begin enable ;
85207: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
85208: LD_ADDR_VAR 0 3
85212: PUSH
85213: LD_EXP 132
85217: PPUSH
85218: CALL 69841 0 1
85222: ST_TO_ADDR
// if not list then
85223: LD_VAR 0 3
85227: NOT
85228: IFFALSE 85232
// exit ;
85230: GO 85876
// for i := 1 to list do
85232: LD_ADDR_VAR 0 1
85236: PUSH
85237: DOUBLE
85238: LD_INT 1
85240: DEC
85241: ST_TO_ADDR
85242: LD_VAR 0 3
85246: PUSH
85247: FOR_TO
85248: IFFALSE 85874
// begin depot := list [ i ] [ 2 ] ;
85250: LD_ADDR_VAR 0 8
85254: PUSH
85255: LD_VAR 0 3
85259: PUSH
85260: LD_VAR 0 1
85264: ARRAY
85265: PUSH
85266: LD_INT 2
85268: ARRAY
85269: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
85270: LD_ADDR_VAR 0 5
85274: PUSH
85275: LD_VAR 0 3
85279: PUSH
85280: LD_VAR 0 1
85284: ARRAY
85285: PUSH
85286: LD_INT 1
85288: ARRAY
85289: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
85290: LD_VAR 0 8
85294: PPUSH
85295: CALL_OW 301
85299: PUSH
85300: LD_VAR 0 5
85304: PUSH
85305: LD_VAR 0 8
85309: PPUSH
85310: CALL_OW 255
85314: NONEQUAL
85315: OR
85316: IFFALSE 85345
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
85318: LD_ADDR_EXP 132
85322: PUSH
85323: LD_EXP 132
85327: PPUSH
85328: LD_VAR 0 8
85332: PPUSH
85333: LD_INT 0
85335: PPUSH
85336: CALL_OW 1
85340: ST_TO_ADDR
// exit ;
85341: POP
85342: POP
85343: GO 85876
// end ; x := list [ i ] [ 3 ] ;
85345: LD_ADDR_VAR 0 6
85349: PUSH
85350: LD_VAR 0 3
85354: PUSH
85355: LD_VAR 0 1
85359: ARRAY
85360: PUSH
85361: LD_INT 3
85363: ARRAY
85364: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
85365: LD_ADDR_VAR 0 7
85369: PUSH
85370: LD_VAR 0 3
85374: PUSH
85375: LD_VAR 0 1
85379: ARRAY
85380: PUSH
85381: LD_INT 4
85383: ARRAY
85384: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
85385: LD_ADDR_VAR 0 9
85389: PUSH
85390: LD_VAR 0 6
85394: PPUSH
85395: LD_VAR 0 7
85399: PPUSH
85400: LD_INT 16
85402: PPUSH
85403: CALL 68429 0 3
85407: ST_TO_ADDR
// if not cratesNearbyPoint then
85408: LD_VAR 0 9
85412: NOT
85413: IFFALSE 85419
// exit ;
85415: POP
85416: POP
85417: GO 85876
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
85419: LD_ADDR_VAR 0 4
85423: PUSH
85424: LD_INT 22
85426: PUSH
85427: LD_VAR 0 5
85431: PUSH
85432: EMPTY
85433: LIST
85434: LIST
85435: PUSH
85436: LD_INT 3
85438: PUSH
85439: LD_INT 60
85441: PUSH
85442: EMPTY
85443: LIST
85444: PUSH
85445: EMPTY
85446: LIST
85447: LIST
85448: PUSH
85449: LD_INT 91
85451: PUSH
85452: LD_VAR 0 8
85456: PUSH
85457: LD_INT 6
85459: PUSH
85460: EMPTY
85461: LIST
85462: LIST
85463: LIST
85464: PUSH
85465: LD_INT 2
85467: PUSH
85468: LD_INT 25
85470: PUSH
85471: LD_INT 2
85473: PUSH
85474: EMPTY
85475: LIST
85476: LIST
85477: PUSH
85478: LD_INT 25
85480: PUSH
85481: LD_INT 16
85483: PUSH
85484: EMPTY
85485: LIST
85486: LIST
85487: PUSH
85488: EMPTY
85489: LIST
85490: LIST
85491: LIST
85492: PUSH
85493: EMPTY
85494: LIST
85495: LIST
85496: LIST
85497: LIST
85498: PPUSH
85499: CALL_OW 69
85503: PUSH
85504: LD_VAR 0 8
85508: PPUSH
85509: CALL_OW 313
85513: PPUSH
85514: LD_INT 3
85516: PUSH
85517: LD_INT 60
85519: PUSH
85520: EMPTY
85521: LIST
85522: PUSH
85523: EMPTY
85524: LIST
85525: LIST
85526: PUSH
85527: LD_INT 2
85529: PUSH
85530: LD_INT 25
85532: PUSH
85533: LD_INT 2
85535: PUSH
85536: EMPTY
85537: LIST
85538: LIST
85539: PUSH
85540: LD_INT 25
85542: PUSH
85543: LD_INT 16
85545: PUSH
85546: EMPTY
85547: LIST
85548: LIST
85549: PUSH
85550: EMPTY
85551: LIST
85552: LIST
85553: LIST
85554: PUSH
85555: EMPTY
85556: LIST
85557: LIST
85558: PPUSH
85559: CALL_OW 72
85563: UNION
85564: ST_TO_ADDR
// if tmp then
85565: LD_VAR 0 4
85569: IFFALSE 85649
// begin tmp := ShrinkArray ( tmp , 3 ) ;
85571: LD_ADDR_VAR 0 4
85575: PUSH
85576: LD_VAR 0 4
85580: PPUSH
85581: LD_INT 3
85583: PPUSH
85584: CALL 66398 0 2
85588: ST_TO_ADDR
// for j in tmp do
85589: LD_ADDR_VAR 0 2
85593: PUSH
85594: LD_VAR 0 4
85598: PUSH
85599: FOR_IN
85600: IFFALSE 85643
// begin if IsInUnit ( j ) then
85602: LD_VAR 0 2
85606: PPUSH
85607: CALL_OW 310
85611: IFFALSE 85622
// ComExit ( j ) ;
85613: LD_VAR 0 2
85617: PPUSH
85618: CALL 66481 0 1
// AddComCollect ( j , x , y ) ;
85622: LD_VAR 0 2
85626: PPUSH
85627: LD_VAR 0 6
85631: PPUSH
85632: LD_VAR 0 7
85636: PPUSH
85637: CALL_OW 177
// end ;
85641: GO 85599
85643: POP
85644: POP
// exit ;
85645: POP
85646: POP
85647: GO 85876
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
85649: LD_ADDR_VAR 0 4
85653: PUSH
85654: LD_INT 22
85656: PUSH
85657: LD_VAR 0 5
85661: PUSH
85662: EMPTY
85663: LIST
85664: LIST
85665: PUSH
85666: LD_INT 91
85668: PUSH
85669: LD_VAR 0 8
85673: PUSH
85674: LD_INT 8
85676: PUSH
85677: EMPTY
85678: LIST
85679: LIST
85680: LIST
85681: PUSH
85682: LD_INT 2
85684: PUSH
85685: LD_INT 34
85687: PUSH
85688: LD_INT 12
85690: PUSH
85691: EMPTY
85692: LIST
85693: LIST
85694: PUSH
85695: LD_INT 34
85697: PUSH
85698: LD_INT 51
85700: PUSH
85701: EMPTY
85702: LIST
85703: LIST
85704: PUSH
85705: LD_INT 34
85707: PUSH
85708: LD_INT 32
85710: PUSH
85711: EMPTY
85712: LIST
85713: LIST
85714: PUSH
85715: LD_INT 34
85717: PUSH
85718: LD_INT 89
85720: PUSH
85721: EMPTY
85722: LIST
85723: LIST
85724: PUSH
85725: EMPTY
85726: LIST
85727: LIST
85728: LIST
85729: LIST
85730: LIST
85731: PUSH
85732: EMPTY
85733: LIST
85734: LIST
85735: LIST
85736: PPUSH
85737: CALL_OW 69
85741: ST_TO_ADDR
// if tmp then
85742: LD_VAR 0 4
85746: IFFALSE 85872
// begin for j in tmp do
85748: LD_ADDR_VAR 0 2
85752: PUSH
85753: LD_VAR 0 4
85757: PUSH
85758: FOR_IN
85759: IFFALSE 85870
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
85761: LD_VAR 0 2
85765: PPUSH
85766: CALL_OW 262
85770: PUSH
85771: LD_INT 3
85773: EQUAL
85774: PUSH
85775: LD_VAR 0 2
85779: PPUSH
85780: CALL_OW 261
85784: PUSH
85785: LD_INT 20
85787: GREATER
85788: OR
85789: PUSH
85790: LD_VAR 0 2
85794: PPUSH
85795: CALL_OW 314
85799: NOT
85800: AND
85801: PUSH
85802: LD_VAR 0 2
85806: PPUSH
85807: CALL_OW 263
85811: PUSH
85812: LD_INT 1
85814: NONEQUAL
85815: PUSH
85816: LD_VAR 0 2
85820: PPUSH
85821: CALL_OW 311
85825: OR
85826: AND
85827: IFFALSE 85868
// begin ComCollect ( j , x , y ) ;
85829: LD_VAR 0 2
85833: PPUSH
85834: LD_VAR 0 6
85838: PPUSH
85839: LD_VAR 0 7
85843: PPUSH
85844: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
85848: LD_VAR 0 2
85852: PPUSH
85853: LD_VAR 0 8
85857: PPUSH
85858: CALL_OW 172
// exit ;
85862: POP
85863: POP
85864: POP
85865: POP
85866: GO 85876
// end ;
85868: GO 85758
85870: POP
85871: POP
// end ; end ;
85872: GO 85247
85874: POP
85875: POP
// end ; end_of_file
85876: PPOPN 9
85878: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
85879: LD_VAR 0 1
85883: PUSH
85884: LD_INT 200
85886: DOUBLE
85887: GREATEREQUAL
85888: IFFALSE 85896
85890: LD_INT 299
85892: DOUBLE
85893: LESSEQUAL
85894: IFTRUE 85898
85896: GO 85930
85898: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
85899: LD_VAR 0 1
85903: PPUSH
85904: LD_VAR 0 2
85908: PPUSH
85909: LD_VAR 0 3
85913: PPUSH
85914: LD_VAR 0 4
85918: PPUSH
85919: LD_VAR 0 5
85923: PPUSH
85924: CALL 86418 0 5
85928: GO 86007
85930: LD_INT 300
85932: DOUBLE
85933: GREATEREQUAL
85934: IFFALSE 85942
85936: LD_INT 399
85938: DOUBLE
85939: LESSEQUAL
85940: IFTRUE 85944
85942: GO 86006
85944: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
85945: LD_VAR 0 1
85949: PPUSH
85950: LD_VAR 0 2
85954: PPUSH
85955: LD_VAR 0 3
85959: PPUSH
85960: LD_VAR 0 4
85964: PPUSH
85965: LD_VAR 0 5
85969: PPUSH
85970: LD_VAR 0 6
85974: PPUSH
85975: LD_VAR 0 7
85979: PPUSH
85980: LD_VAR 0 8
85984: PPUSH
85985: LD_VAR 0 9
85989: PPUSH
85990: LD_VAR 0 10
85994: PPUSH
85995: LD_VAR 0 11
85999: PPUSH
86000: CALL 82588 0 11
86004: GO 86007
86006: POP
// end ;
86007: PPOPN 11
86009: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86010: LD_VAR 0 1
86014: PPUSH
86015: LD_VAR 0 2
86019: PPUSH
86020: LD_VAR 0 3
86024: PPUSH
86025: LD_VAR 0 4
86029: PPUSH
86030: LD_VAR 0 5
86034: PPUSH
86035: CALL 86154 0 5
// end ; end_of_file
86039: PPOPN 5
86041: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
86042: LD_INT 0
86044: PPUSH
86045: PPUSH
86046: PPUSH
86047: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
86048: LD_VAR 0 1
86052: PPUSH
86053: CALL_OW 264
86057: PUSH
86058: LD_INT 91
86060: EQUAL
86061: IFFALSE 86133
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
86063: LD_INT 68
86065: PPUSH
86066: LD_VAR 0 1
86070: PPUSH
86071: CALL_OW 255
86075: PPUSH
86076: CALL_OW 321
86080: PUSH
86081: LD_INT 2
86083: EQUAL
86084: IFFALSE 86096
// eff := 70 else
86086: LD_ADDR_VAR 0 4
86090: PUSH
86091: LD_INT 70
86093: ST_TO_ADDR
86094: GO 86104
// eff := 30 ;
86096: LD_ADDR_VAR 0 4
86100: PUSH
86101: LD_INT 30
86103: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
86104: LD_VAR 0 1
86108: PPUSH
86109: CALL_OW 250
86113: PPUSH
86114: LD_VAR 0 1
86118: PPUSH
86119: CALL_OW 251
86123: PPUSH
86124: LD_VAR 0 4
86128: PPUSH
86129: CALL_OW 495
// end ; end ;
86133: LD_VAR 0 2
86137: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
86138: LD_INT 0
86140: PPUSH
// end ;
86141: LD_VAR 0 4
86145: RET
// export function SOS_Command ( cmd ) ; begin
86146: LD_INT 0
86148: PPUSH
// end ;
86149: LD_VAR 0 2
86153: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
86154: LD_INT 0
86156: PPUSH
// end ;
86157: LD_VAR 0 6
86161: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
86162: LD_INT 0
86164: PPUSH
86165: PPUSH
// if not vehicle or not factory then
86166: LD_VAR 0 1
86170: NOT
86171: PUSH
86172: LD_VAR 0 2
86176: NOT
86177: OR
86178: IFFALSE 86182
// exit ;
86180: GO 86413
// if factoryWaypoints >= factory then
86182: LD_EXP 131
86186: PUSH
86187: LD_VAR 0 2
86191: GREATEREQUAL
86192: IFFALSE 86413
// if factoryWaypoints [ factory ] then
86194: LD_EXP 131
86198: PUSH
86199: LD_VAR 0 2
86203: ARRAY
86204: IFFALSE 86413
// begin if GetControl ( vehicle ) = control_manual then
86206: LD_VAR 0 1
86210: PPUSH
86211: CALL_OW 263
86215: PUSH
86216: LD_INT 1
86218: EQUAL
86219: IFFALSE 86300
// begin driver := IsDrivenBy ( vehicle ) ;
86221: LD_ADDR_VAR 0 4
86225: PUSH
86226: LD_VAR 0 1
86230: PPUSH
86231: CALL_OW 311
86235: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86236: LD_VAR 0 4
86240: PPUSH
86241: LD_EXP 131
86245: PUSH
86246: LD_VAR 0 2
86250: ARRAY
86251: PUSH
86252: LD_INT 3
86254: ARRAY
86255: PPUSH
86256: LD_EXP 131
86260: PUSH
86261: LD_VAR 0 2
86265: ARRAY
86266: PUSH
86267: LD_INT 4
86269: ARRAY
86270: PPUSH
86271: CALL_OW 171
// AddComExitVehicle ( driver ) ;
86275: LD_VAR 0 4
86279: PPUSH
86280: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
86284: LD_VAR 0 4
86288: PPUSH
86289: LD_VAR 0 2
86293: PPUSH
86294: CALL_OW 180
// end else
86298: GO 86413
// if GetControl ( vehicle ) = control_remote then
86300: LD_VAR 0 1
86304: PPUSH
86305: CALL_OW 263
86309: PUSH
86310: LD_INT 2
86312: EQUAL
86313: IFFALSE 86374
// begin wait ( 0 0$2 ) ;
86315: LD_INT 70
86317: PPUSH
86318: CALL_OW 67
// if Connect ( vehicle ) then
86322: LD_VAR 0 1
86326: PPUSH
86327: CALL 36722 0 1
86331: IFFALSE 86372
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86333: LD_VAR 0 1
86337: PPUSH
86338: LD_EXP 131
86342: PUSH
86343: LD_VAR 0 2
86347: ARRAY
86348: PUSH
86349: LD_INT 3
86351: ARRAY
86352: PPUSH
86353: LD_EXP 131
86357: PUSH
86358: LD_VAR 0 2
86362: ARRAY
86363: PUSH
86364: LD_INT 4
86366: ARRAY
86367: PPUSH
86368: CALL_OW 171
// end else
86372: GO 86413
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86374: LD_VAR 0 1
86378: PPUSH
86379: LD_EXP 131
86383: PUSH
86384: LD_VAR 0 2
86388: ARRAY
86389: PUSH
86390: LD_INT 3
86392: ARRAY
86393: PPUSH
86394: LD_EXP 131
86398: PUSH
86399: LD_VAR 0 2
86403: ARRAY
86404: PUSH
86405: LD_INT 4
86407: ARRAY
86408: PPUSH
86409: CALL_OW 171
// end ; end ;
86413: LD_VAR 0 3
86417: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
86418: LD_INT 0
86420: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
86421: LD_VAR 0 1
86425: PUSH
86426: LD_INT 250
86428: EQUAL
86429: PUSH
86430: LD_VAR 0 2
86434: PPUSH
86435: CALL_OW 264
86439: PUSH
86440: LD_INT 81
86442: EQUAL
86443: AND
86444: IFFALSE 86465
// MinerPlaceMine ( unit , x , y ) ;
86446: LD_VAR 0 2
86450: PPUSH
86451: LD_VAR 0 4
86455: PPUSH
86456: LD_VAR 0 5
86460: PPUSH
86461: CALL 88850 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
86465: LD_VAR 0 1
86469: PUSH
86470: LD_INT 251
86472: EQUAL
86473: PUSH
86474: LD_VAR 0 2
86478: PPUSH
86479: CALL_OW 264
86483: PUSH
86484: LD_INT 81
86486: EQUAL
86487: AND
86488: IFFALSE 86509
// MinerDetonateMine ( unit , x , y ) ;
86490: LD_VAR 0 2
86494: PPUSH
86495: LD_VAR 0 4
86499: PPUSH
86500: LD_VAR 0 5
86504: PPUSH
86505: CALL 89125 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
86509: LD_VAR 0 1
86513: PUSH
86514: LD_INT 252
86516: EQUAL
86517: PUSH
86518: LD_VAR 0 2
86522: PPUSH
86523: CALL_OW 264
86527: PUSH
86528: LD_INT 81
86530: EQUAL
86531: AND
86532: IFFALSE 86553
// MinerCreateMinefield ( unit , x , y ) ;
86534: LD_VAR 0 2
86538: PPUSH
86539: LD_VAR 0 4
86543: PPUSH
86544: LD_VAR 0 5
86548: PPUSH
86549: CALL 89542 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
86553: LD_VAR 0 1
86557: PUSH
86558: LD_INT 253
86560: EQUAL
86561: PUSH
86562: LD_VAR 0 2
86566: PPUSH
86567: CALL_OW 257
86571: PUSH
86572: LD_INT 5
86574: EQUAL
86575: AND
86576: IFFALSE 86597
// ComBinocular ( unit , x , y ) ;
86578: LD_VAR 0 2
86582: PPUSH
86583: LD_VAR 0 4
86587: PPUSH
86588: LD_VAR 0 5
86592: PPUSH
86593: CALL 89911 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
86597: LD_VAR 0 1
86601: PUSH
86602: LD_INT 254
86604: EQUAL
86605: PUSH
86606: LD_VAR 0 2
86610: PPUSH
86611: CALL_OW 264
86615: PUSH
86616: LD_INT 99
86618: EQUAL
86619: AND
86620: PUSH
86621: LD_VAR 0 3
86625: PPUSH
86626: CALL_OW 263
86630: PUSH
86631: LD_INT 3
86633: EQUAL
86634: AND
86635: IFFALSE 86651
// HackDestroyVehicle ( unit , selectedUnit ) ;
86637: LD_VAR 0 2
86641: PPUSH
86642: LD_VAR 0 3
86646: PPUSH
86647: CALL 88214 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
86651: LD_VAR 0 1
86655: PUSH
86656: LD_INT 255
86658: EQUAL
86659: PUSH
86660: LD_VAR 0 2
86664: PPUSH
86665: CALL_OW 264
86669: PUSH
86670: LD_INT 14
86672: PUSH
86673: LD_INT 53
86675: PUSH
86676: EMPTY
86677: LIST
86678: LIST
86679: IN
86680: AND
86681: PUSH
86682: LD_VAR 0 4
86686: PPUSH
86687: LD_VAR 0 5
86691: PPUSH
86692: CALL_OW 488
86696: AND
86697: IFFALSE 86721
// CutTreeXYR ( unit , x , y , 12 ) ;
86699: LD_VAR 0 2
86703: PPUSH
86704: LD_VAR 0 4
86708: PPUSH
86709: LD_VAR 0 5
86713: PPUSH
86714: LD_INT 12
86716: PPUSH
86717: CALL 86784 0 4
// if cmd = 256 then
86721: LD_VAR 0 1
86725: PUSH
86726: LD_INT 256
86728: EQUAL
86729: IFFALSE 86750
// SetFactoryWaypoint ( unit , x , y ) ;
86731: LD_VAR 0 2
86735: PPUSH
86736: LD_VAR 0 4
86740: PPUSH
86741: LD_VAR 0 5
86745: PPUSH
86746: CALL 84568 0 3
// if cmd = 257 then
86750: LD_VAR 0 1
86754: PUSH
86755: LD_INT 257
86757: EQUAL
86758: IFFALSE 86779
// SetWarehouseGatheringPoint ( unit , x , y ) ;
86760: LD_VAR 0 2
86764: PPUSH
86765: LD_VAR 0 4
86769: PPUSH
86770: LD_VAR 0 5
86774: PPUSH
86775: CALL 84930 0 3
// end ;
86779: LD_VAR 0 6
86783: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
86784: LD_INT 0
86786: PPUSH
86787: PPUSH
86788: PPUSH
86789: PPUSH
86790: PPUSH
86791: PPUSH
86792: PPUSH
86793: PPUSH
86794: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
86795: LD_VAR 0 1
86799: NOT
86800: PUSH
86801: LD_VAR 0 2
86805: PPUSH
86806: LD_VAR 0 3
86810: PPUSH
86811: CALL_OW 488
86815: NOT
86816: OR
86817: PUSH
86818: LD_VAR 0 4
86822: NOT
86823: OR
86824: IFFALSE 86828
// exit ;
86826: GO 87168
// list := [ ] ;
86828: LD_ADDR_VAR 0 13
86832: PUSH
86833: EMPTY
86834: ST_TO_ADDR
// if x - r < 0 then
86835: LD_VAR 0 2
86839: PUSH
86840: LD_VAR 0 4
86844: MINUS
86845: PUSH
86846: LD_INT 0
86848: LESS
86849: IFFALSE 86861
// min_x := 0 else
86851: LD_ADDR_VAR 0 7
86855: PUSH
86856: LD_INT 0
86858: ST_TO_ADDR
86859: GO 86877
// min_x := x - r ;
86861: LD_ADDR_VAR 0 7
86865: PUSH
86866: LD_VAR 0 2
86870: PUSH
86871: LD_VAR 0 4
86875: MINUS
86876: ST_TO_ADDR
// if y - r < 0 then
86877: LD_VAR 0 3
86881: PUSH
86882: LD_VAR 0 4
86886: MINUS
86887: PUSH
86888: LD_INT 0
86890: LESS
86891: IFFALSE 86903
// min_y := 0 else
86893: LD_ADDR_VAR 0 8
86897: PUSH
86898: LD_INT 0
86900: ST_TO_ADDR
86901: GO 86919
// min_y := y - r ;
86903: LD_ADDR_VAR 0 8
86907: PUSH
86908: LD_VAR 0 3
86912: PUSH
86913: LD_VAR 0 4
86917: MINUS
86918: ST_TO_ADDR
// max_x := x + r ;
86919: LD_ADDR_VAR 0 9
86923: PUSH
86924: LD_VAR 0 2
86928: PUSH
86929: LD_VAR 0 4
86933: PLUS
86934: ST_TO_ADDR
// max_y := y + r ;
86935: LD_ADDR_VAR 0 10
86939: PUSH
86940: LD_VAR 0 3
86944: PUSH
86945: LD_VAR 0 4
86949: PLUS
86950: ST_TO_ADDR
// for _x = min_x to max_x do
86951: LD_ADDR_VAR 0 11
86955: PUSH
86956: DOUBLE
86957: LD_VAR 0 7
86961: DEC
86962: ST_TO_ADDR
86963: LD_VAR 0 9
86967: PUSH
86968: FOR_TO
86969: IFFALSE 87086
// for _y = min_y to max_y do
86971: LD_ADDR_VAR 0 12
86975: PUSH
86976: DOUBLE
86977: LD_VAR 0 8
86981: DEC
86982: ST_TO_ADDR
86983: LD_VAR 0 10
86987: PUSH
86988: FOR_TO
86989: IFFALSE 87082
// begin if not ValidHex ( _x , _y ) then
86991: LD_VAR 0 11
86995: PPUSH
86996: LD_VAR 0 12
87000: PPUSH
87001: CALL_OW 488
87005: NOT
87006: IFFALSE 87010
// continue ;
87008: GO 86988
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
87010: LD_VAR 0 11
87014: PPUSH
87015: LD_VAR 0 12
87019: PPUSH
87020: CALL_OW 351
87024: PUSH
87025: LD_VAR 0 11
87029: PPUSH
87030: LD_VAR 0 12
87034: PPUSH
87035: CALL_OW 554
87039: AND
87040: IFFALSE 87080
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
87042: LD_ADDR_VAR 0 13
87046: PUSH
87047: LD_VAR 0 13
87051: PPUSH
87052: LD_VAR 0 13
87056: PUSH
87057: LD_INT 1
87059: PLUS
87060: PPUSH
87061: LD_VAR 0 11
87065: PUSH
87066: LD_VAR 0 12
87070: PUSH
87071: EMPTY
87072: LIST
87073: LIST
87074: PPUSH
87075: CALL_OW 2
87079: ST_TO_ADDR
// end ;
87080: GO 86988
87082: POP
87083: POP
87084: GO 86968
87086: POP
87087: POP
// if not list then
87088: LD_VAR 0 13
87092: NOT
87093: IFFALSE 87097
// exit ;
87095: GO 87168
// for i in list do
87097: LD_ADDR_VAR 0 6
87101: PUSH
87102: LD_VAR 0 13
87106: PUSH
87107: FOR_IN
87108: IFFALSE 87166
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
87110: LD_VAR 0 1
87114: PPUSH
87115: LD_STRING M
87117: PUSH
87118: LD_VAR 0 6
87122: PUSH
87123: LD_INT 1
87125: ARRAY
87126: PUSH
87127: LD_VAR 0 6
87131: PUSH
87132: LD_INT 2
87134: ARRAY
87135: PUSH
87136: LD_INT 0
87138: PUSH
87139: LD_INT 0
87141: PUSH
87142: LD_INT 0
87144: PUSH
87145: LD_INT 0
87147: PUSH
87148: EMPTY
87149: LIST
87150: LIST
87151: LIST
87152: LIST
87153: LIST
87154: LIST
87155: LIST
87156: PUSH
87157: EMPTY
87158: LIST
87159: PPUSH
87160: CALL_OW 447
87164: GO 87107
87166: POP
87167: POP
// end ;
87168: LD_VAR 0 5
87172: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
87173: LD_EXP 134
87177: NOT
87178: IFFALSE 87228
87180: GO 87182
87182: DISABLE
// begin initHack := true ;
87183: LD_ADDR_EXP 134
87187: PUSH
87188: LD_INT 1
87190: ST_TO_ADDR
// hackTanks := [ ] ;
87191: LD_ADDR_EXP 135
87195: PUSH
87196: EMPTY
87197: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
87198: LD_ADDR_EXP 136
87202: PUSH
87203: EMPTY
87204: ST_TO_ADDR
// hackLimit := 3 ;
87205: LD_ADDR_EXP 137
87209: PUSH
87210: LD_INT 3
87212: ST_TO_ADDR
// hackDist := 12 ;
87213: LD_ADDR_EXP 138
87217: PUSH
87218: LD_INT 12
87220: ST_TO_ADDR
// hackCounter := [ ] ;
87221: LD_ADDR_EXP 139
87225: PUSH
87226: EMPTY
87227: ST_TO_ADDR
// end ;
87228: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
87229: LD_EXP 134
87233: PUSH
87234: LD_INT 34
87236: PUSH
87237: LD_INT 99
87239: PUSH
87240: EMPTY
87241: LIST
87242: LIST
87243: PPUSH
87244: CALL_OW 69
87248: AND
87249: IFFALSE 87502
87251: GO 87253
87253: DISABLE
87254: LD_INT 0
87256: PPUSH
87257: PPUSH
// begin enable ;
87258: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
87259: LD_ADDR_VAR 0 1
87263: PUSH
87264: LD_INT 34
87266: PUSH
87267: LD_INT 99
87269: PUSH
87270: EMPTY
87271: LIST
87272: LIST
87273: PPUSH
87274: CALL_OW 69
87278: PUSH
87279: FOR_IN
87280: IFFALSE 87500
// begin if not i in hackTanks then
87282: LD_VAR 0 1
87286: PUSH
87287: LD_EXP 135
87291: IN
87292: NOT
87293: IFFALSE 87376
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
87295: LD_ADDR_EXP 135
87299: PUSH
87300: LD_EXP 135
87304: PPUSH
87305: LD_EXP 135
87309: PUSH
87310: LD_INT 1
87312: PLUS
87313: PPUSH
87314: LD_VAR 0 1
87318: PPUSH
87319: CALL_OW 1
87323: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
87324: LD_ADDR_EXP 136
87328: PUSH
87329: LD_EXP 136
87333: PPUSH
87334: LD_EXP 136
87338: PUSH
87339: LD_INT 1
87341: PLUS
87342: PPUSH
87343: EMPTY
87344: PPUSH
87345: CALL_OW 1
87349: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
87350: LD_ADDR_EXP 139
87354: PUSH
87355: LD_EXP 139
87359: PPUSH
87360: LD_EXP 139
87364: PUSH
87365: LD_INT 1
87367: PLUS
87368: PPUSH
87369: EMPTY
87370: PPUSH
87371: CALL_OW 1
87375: ST_TO_ADDR
// end ; if not IsOk ( i ) then
87376: LD_VAR 0 1
87380: PPUSH
87381: CALL_OW 302
87385: NOT
87386: IFFALSE 87399
// begin HackUnlinkAll ( i ) ;
87388: LD_VAR 0 1
87392: PPUSH
87393: CALL 87505 0 1
// continue ;
87397: GO 87279
// end ; HackCheckCapturedStatus ( i ) ;
87399: LD_VAR 0 1
87403: PPUSH
87404: CALL 87948 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
87408: LD_ADDR_VAR 0 2
87412: PUSH
87413: LD_INT 81
87415: PUSH
87416: LD_VAR 0 1
87420: PPUSH
87421: CALL_OW 255
87425: PUSH
87426: EMPTY
87427: LIST
87428: LIST
87429: PUSH
87430: LD_INT 33
87432: PUSH
87433: LD_INT 3
87435: PUSH
87436: EMPTY
87437: LIST
87438: LIST
87439: PUSH
87440: LD_INT 91
87442: PUSH
87443: LD_VAR 0 1
87447: PUSH
87448: LD_EXP 138
87452: PUSH
87453: EMPTY
87454: LIST
87455: LIST
87456: LIST
87457: PUSH
87458: LD_INT 50
87460: PUSH
87461: EMPTY
87462: LIST
87463: PUSH
87464: EMPTY
87465: LIST
87466: LIST
87467: LIST
87468: LIST
87469: PPUSH
87470: CALL_OW 69
87474: ST_TO_ADDR
// if not tmp then
87475: LD_VAR 0 2
87479: NOT
87480: IFFALSE 87484
// continue ;
87482: GO 87279
// HackLink ( i , tmp ) ;
87484: LD_VAR 0 1
87488: PPUSH
87489: LD_VAR 0 2
87493: PPUSH
87494: CALL 87641 0 2
// end ;
87498: GO 87279
87500: POP
87501: POP
// end ;
87502: PPOPN 2
87504: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
87505: LD_INT 0
87507: PPUSH
87508: PPUSH
87509: PPUSH
// if not hack in hackTanks then
87510: LD_VAR 0 1
87514: PUSH
87515: LD_EXP 135
87519: IN
87520: NOT
87521: IFFALSE 87525
// exit ;
87523: GO 87636
// index := GetElementIndex ( hackTanks , hack ) ;
87525: LD_ADDR_VAR 0 4
87529: PUSH
87530: LD_EXP 135
87534: PPUSH
87535: LD_VAR 0 1
87539: PPUSH
87540: CALL 33538 0 2
87544: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
87545: LD_EXP 136
87549: PUSH
87550: LD_VAR 0 4
87554: ARRAY
87555: IFFALSE 87636
// begin for i in hackTanksCaptured [ index ] do
87557: LD_ADDR_VAR 0 3
87561: PUSH
87562: LD_EXP 136
87566: PUSH
87567: LD_VAR 0 4
87571: ARRAY
87572: PUSH
87573: FOR_IN
87574: IFFALSE 87600
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
87576: LD_VAR 0 3
87580: PUSH
87581: LD_INT 1
87583: ARRAY
87584: PPUSH
87585: LD_VAR 0 3
87589: PUSH
87590: LD_INT 2
87592: ARRAY
87593: PPUSH
87594: CALL_OW 235
87598: GO 87573
87600: POP
87601: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
87602: LD_ADDR_EXP 136
87606: PUSH
87607: LD_EXP 136
87611: PPUSH
87612: LD_VAR 0 4
87616: PPUSH
87617: EMPTY
87618: PPUSH
87619: CALL_OW 1
87623: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
87624: LD_VAR 0 1
87628: PPUSH
87629: LD_INT 0
87631: PPUSH
87632: CALL_OW 505
// end ; end ;
87636: LD_VAR 0 2
87640: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
87641: LD_INT 0
87643: PPUSH
87644: PPUSH
87645: PPUSH
// if not hack in hackTanks or not vehicles then
87646: LD_VAR 0 1
87650: PUSH
87651: LD_EXP 135
87655: IN
87656: NOT
87657: PUSH
87658: LD_VAR 0 2
87662: NOT
87663: OR
87664: IFFALSE 87668
// exit ;
87666: GO 87943
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
87668: LD_ADDR_VAR 0 2
87672: PUSH
87673: LD_VAR 0 1
87677: PPUSH
87678: LD_VAR 0 2
87682: PPUSH
87683: LD_INT 1
87685: PPUSH
87686: LD_INT 1
87688: PPUSH
87689: CALL 34188 0 4
87693: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
87694: LD_ADDR_VAR 0 5
87698: PUSH
87699: LD_EXP 135
87703: PPUSH
87704: LD_VAR 0 1
87708: PPUSH
87709: CALL 33538 0 2
87713: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
87714: LD_EXP 136
87718: PUSH
87719: LD_VAR 0 5
87723: ARRAY
87724: PUSH
87725: LD_EXP 137
87729: LESS
87730: IFFALSE 87919
// begin for i := 1 to vehicles do
87732: LD_ADDR_VAR 0 4
87736: PUSH
87737: DOUBLE
87738: LD_INT 1
87740: DEC
87741: ST_TO_ADDR
87742: LD_VAR 0 2
87746: PUSH
87747: FOR_TO
87748: IFFALSE 87917
// begin if hackTanksCaptured [ index ] = hackLimit then
87750: LD_EXP 136
87754: PUSH
87755: LD_VAR 0 5
87759: ARRAY
87760: PUSH
87761: LD_EXP 137
87765: EQUAL
87766: IFFALSE 87770
// break ;
87768: GO 87917
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
87770: LD_ADDR_EXP 139
87774: PUSH
87775: LD_EXP 139
87779: PPUSH
87780: LD_VAR 0 5
87784: PPUSH
87785: LD_EXP 139
87789: PUSH
87790: LD_VAR 0 5
87794: ARRAY
87795: PUSH
87796: LD_INT 1
87798: PLUS
87799: PPUSH
87800: CALL_OW 1
87804: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
87805: LD_ADDR_EXP 136
87809: PUSH
87810: LD_EXP 136
87814: PPUSH
87815: LD_VAR 0 5
87819: PUSH
87820: LD_EXP 136
87824: PUSH
87825: LD_VAR 0 5
87829: ARRAY
87830: PUSH
87831: LD_INT 1
87833: PLUS
87834: PUSH
87835: EMPTY
87836: LIST
87837: LIST
87838: PPUSH
87839: LD_VAR 0 2
87843: PUSH
87844: LD_VAR 0 4
87848: ARRAY
87849: PUSH
87850: LD_VAR 0 2
87854: PUSH
87855: LD_VAR 0 4
87859: ARRAY
87860: PPUSH
87861: CALL_OW 255
87865: PUSH
87866: EMPTY
87867: LIST
87868: LIST
87869: PPUSH
87870: CALL 33753 0 3
87874: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
87875: LD_VAR 0 2
87879: PUSH
87880: LD_VAR 0 4
87884: ARRAY
87885: PPUSH
87886: LD_VAR 0 1
87890: PPUSH
87891: CALL_OW 255
87895: PPUSH
87896: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
87900: LD_VAR 0 2
87904: PUSH
87905: LD_VAR 0 4
87909: ARRAY
87910: PPUSH
87911: CALL_OW 141
// end ;
87915: GO 87747
87917: POP
87918: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
87919: LD_VAR 0 1
87923: PPUSH
87924: LD_EXP 136
87928: PUSH
87929: LD_VAR 0 5
87933: ARRAY
87934: PUSH
87935: LD_INT 0
87937: PLUS
87938: PPUSH
87939: CALL_OW 505
// end ;
87943: LD_VAR 0 3
87947: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
87948: LD_INT 0
87950: PPUSH
87951: PPUSH
87952: PPUSH
87953: PPUSH
// if not hack in hackTanks then
87954: LD_VAR 0 1
87958: PUSH
87959: LD_EXP 135
87963: IN
87964: NOT
87965: IFFALSE 87969
// exit ;
87967: GO 88209
// index := GetElementIndex ( hackTanks , hack ) ;
87969: LD_ADDR_VAR 0 4
87973: PUSH
87974: LD_EXP 135
87978: PPUSH
87979: LD_VAR 0 1
87983: PPUSH
87984: CALL 33538 0 2
87988: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
87989: LD_ADDR_VAR 0 3
87993: PUSH
87994: DOUBLE
87995: LD_EXP 136
87999: PUSH
88000: LD_VAR 0 4
88004: ARRAY
88005: INC
88006: ST_TO_ADDR
88007: LD_INT 1
88009: PUSH
88010: FOR_DOWNTO
88011: IFFALSE 88183
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
88013: LD_ADDR_VAR 0 5
88017: PUSH
88018: LD_EXP 136
88022: PUSH
88023: LD_VAR 0 4
88027: ARRAY
88028: PUSH
88029: LD_VAR 0 3
88033: ARRAY
88034: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
88035: LD_VAR 0 5
88039: PUSH
88040: LD_INT 1
88042: ARRAY
88043: PPUSH
88044: CALL_OW 302
88048: NOT
88049: PUSH
88050: LD_VAR 0 5
88054: PUSH
88055: LD_INT 1
88057: ARRAY
88058: PPUSH
88059: CALL_OW 255
88063: PUSH
88064: LD_VAR 0 1
88068: PPUSH
88069: CALL_OW 255
88073: NONEQUAL
88074: OR
88075: IFFALSE 88181
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
88077: LD_VAR 0 5
88081: PUSH
88082: LD_INT 1
88084: ARRAY
88085: PPUSH
88086: CALL_OW 305
88090: PUSH
88091: LD_VAR 0 5
88095: PUSH
88096: LD_INT 1
88098: ARRAY
88099: PPUSH
88100: CALL_OW 255
88104: PUSH
88105: LD_VAR 0 1
88109: PPUSH
88110: CALL_OW 255
88114: EQUAL
88115: AND
88116: IFFALSE 88140
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
88118: LD_VAR 0 5
88122: PUSH
88123: LD_INT 1
88125: ARRAY
88126: PPUSH
88127: LD_VAR 0 5
88131: PUSH
88132: LD_INT 2
88134: ARRAY
88135: PPUSH
88136: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
88140: LD_ADDR_EXP 136
88144: PUSH
88145: LD_EXP 136
88149: PPUSH
88150: LD_VAR 0 4
88154: PPUSH
88155: LD_EXP 136
88159: PUSH
88160: LD_VAR 0 4
88164: ARRAY
88165: PPUSH
88166: LD_VAR 0 3
88170: PPUSH
88171: CALL_OW 3
88175: PPUSH
88176: CALL_OW 1
88180: ST_TO_ADDR
// end ; end ;
88181: GO 88010
88183: POP
88184: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
88185: LD_VAR 0 1
88189: PPUSH
88190: LD_EXP 136
88194: PUSH
88195: LD_VAR 0 4
88199: ARRAY
88200: PUSH
88201: LD_INT 0
88203: PLUS
88204: PPUSH
88205: CALL_OW 505
// end ;
88209: LD_VAR 0 2
88213: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
88214: LD_INT 0
88216: PPUSH
88217: PPUSH
88218: PPUSH
88219: PPUSH
// if not hack in hackTanks then
88220: LD_VAR 0 1
88224: PUSH
88225: LD_EXP 135
88229: IN
88230: NOT
88231: IFFALSE 88235
// exit ;
88233: GO 88320
// index := GetElementIndex ( hackTanks , hack ) ;
88235: LD_ADDR_VAR 0 5
88239: PUSH
88240: LD_EXP 135
88244: PPUSH
88245: LD_VAR 0 1
88249: PPUSH
88250: CALL 33538 0 2
88254: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
88255: LD_ADDR_VAR 0 4
88259: PUSH
88260: DOUBLE
88261: LD_INT 1
88263: DEC
88264: ST_TO_ADDR
88265: LD_EXP 136
88269: PUSH
88270: LD_VAR 0 5
88274: ARRAY
88275: PUSH
88276: FOR_TO
88277: IFFALSE 88318
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
88279: LD_EXP 136
88283: PUSH
88284: LD_VAR 0 5
88288: ARRAY
88289: PUSH
88290: LD_VAR 0 4
88294: ARRAY
88295: PUSH
88296: LD_INT 1
88298: ARRAY
88299: PUSH
88300: LD_VAR 0 2
88304: EQUAL
88305: IFFALSE 88316
// KillUnit ( vehicle ) ;
88307: LD_VAR 0 2
88311: PPUSH
88312: CALL_OW 66
88316: GO 88276
88318: POP
88319: POP
// end ;
88320: LD_VAR 0 3
88324: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
88325: LD_EXP 140
88329: NOT
88330: IFFALSE 88365
88332: GO 88334
88334: DISABLE
// begin initMiner := true ;
88335: LD_ADDR_EXP 140
88339: PUSH
88340: LD_INT 1
88342: ST_TO_ADDR
// minersList := [ ] ;
88343: LD_ADDR_EXP 141
88347: PUSH
88348: EMPTY
88349: ST_TO_ADDR
// minerMinesList := [ ] ;
88350: LD_ADDR_EXP 142
88354: PUSH
88355: EMPTY
88356: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
88357: LD_ADDR_EXP 143
88361: PUSH
88362: LD_INT 5
88364: ST_TO_ADDR
// end ;
88365: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
88366: LD_EXP 140
88370: PUSH
88371: LD_INT 34
88373: PUSH
88374: LD_INT 81
88376: PUSH
88377: EMPTY
88378: LIST
88379: LIST
88380: PPUSH
88381: CALL_OW 69
88385: AND
88386: IFFALSE 88847
88388: GO 88390
88390: DISABLE
88391: LD_INT 0
88393: PPUSH
88394: PPUSH
88395: PPUSH
88396: PPUSH
// begin enable ;
88397: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
88398: LD_ADDR_VAR 0 1
88402: PUSH
88403: LD_INT 34
88405: PUSH
88406: LD_INT 81
88408: PUSH
88409: EMPTY
88410: LIST
88411: LIST
88412: PPUSH
88413: CALL_OW 69
88417: PUSH
88418: FOR_IN
88419: IFFALSE 88491
// begin if not i in minersList then
88421: LD_VAR 0 1
88425: PUSH
88426: LD_EXP 141
88430: IN
88431: NOT
88432: IFFALSE 88489
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
88434: LD_ADDR_EXP 141
88438: PUSH
88439: LD_EXP 141
88443: PPUSH
88444: LD_EXP 141
88448: PUSH
88449: LD_INT 1
88451: PLUS
88452: PPUSH
88453: LD_VAR 0 1
88457: PPUSH
88458: CALL_OW 1
88462: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
88463: LD_ADDR_EXP 142
88467: PUSH
88468: LD_EXP 142
88472: PPUSH
88473: LD_EXP 142
88477: PUSH
88478: LD_INT 1
88480: PLUS
88481: PPUSH
88482: EMPTY
88483: PPUSH
88484: CALL_OW 1
88488: ST_TO_ADDR
// end end ;
88489: GO 88418
88491: POP
88492: POP
// for i := minerMinesList downto 1 do
88493: LD_ADDR_VAR 0 1
88497: PUSH
88498: DOUBLE
88499: LD_EXP 142
88503: INC
88504: ST_TO_ADDR
88505: LD_INT 1
88507: PUSH
88508: FOR_DOWNTO
88509: IFFALSE 88845
// begin if IsLive ( minersList [ i ] ) then
88511: LD_EXP 141
88515: PUSH
88516: LD_VAR 0 1
88520: ARRAY
88521: PPUSH
88522: CALL_OW 300
88526: IFFALSE 88554
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
88528: LD_EXP 141
88532: PUSH
88533: LD_VAR 0 1
88537: ARRAY
88538: PPUSH
88539: LD_EXP 142
88543: PUSH
88544: LD_VAR 0 1
88548: ARRAY
88549: PPUSH
88550: CALL_OW 505
// if not minerMinesList [ i ] then
88554: LD_EXP 142
88558: PUSH
88559: LD_VAR 0 1
88563: ARRAY
88564: NOT
88565: IFFALSE 88569
// continue ;
88567: GO 88508
// for j := minerMinesList [ i ] downto 1 do
88569: LD_ADDR_VAR 0 2
88573: PUSH
88574: DOUBLE
88575: LD_EXP 142
88579: PUSH
88580: LD_VAR 0 1
88584: ARRAY
88585: INC
88586: ST_TO_ADDR
88587: LD_INT 1
88589: PUSH
88590: FOR_DOWNTO
88591: IFFALSE 88841
// begin side := GetSide ( minersList [ i ] ) ;
88593: LD_ADDR_VAR 0 3
88597: PUSH
88598: LD_EXP 141
88602: PUSH
88603: LD_VAR 0 1
88607: ARRAY
88608: PPUSH
88609: CALL_OW 255
88613: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
88614: LD_ADDR_VAR 0 4
88618: PUSH
88619: LD_EXP 142
88623: PUSH
88624: LD_VAR 0 1
88628: ARRAY
88629: PUSH
88630: LD_VAR 0 2
88634: ARRAY
88635: PUSH
88636: LD_INT 1
88638: ARRAY
88639: PPUSH
88640: LD_EXP 142
88644: PUSH
88645: LD_VAR 0 1
88649: ARRAY
88650: PUSH
88651: LD_VAR 0 2
88655: ARRAY
88656: PUSH
88657: LD_INT 2
88659: ARRAY
88660: PPUSH
88661: CALL_OW 428
88665: ST_TO_ADDR
// if not tmp then
88666: LD_VAR 0 4
88670: NOT
88671: IFFALSE 88675
// continue ;
88673: GO 88590
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
88675: LD_VAR 0 4
88679: PUSH
88680: LD_INT 81
88682: PUSH
88683: LD_VAR 0 3
88687: PUSH
88688: EMPTY
88689: LIST
88690: LIST
88691: PPUSH
88692: CALL_OW 69
88696: IN
88697: PUSH
88698: LD_EXP 142
88702: PUSH
88703: LD_VAR 0 1
88707: ARRAY
88708: PUSH
88709: LD_VAR 0 2
88713: ARRAY
88714: PUSH
88715: LD_INT 1
88717: ARRAY
88718: PPUSH
88719: LD_EXP 142
88723: PUSH
88724: LD_VAR 0 1
88728: ARRAY
88729: PUSH
88730: LD_VAR 0 2
88734: ARRAY
88735: PUSH
88736: LD_INT 2
88738: ARRAY
88739: PPUSH
88740: CALL_OW 458
88744: AND
88745: IFFALSE 88839
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
88747: LD_EXP 142
88751: PUSH
88752: LD_VAR 0 1
88756: ARRAY
88757: PUSH
88758: LD_VAR 0 2
88762: ARRAY
88763: PUSH
88764: LD_INT 1
88766: ARRAY
88767: PPUSH
88768: LD_EXP 142
88772: PUSH
88773: LD_VAR 0 1
88777: ARRAY
88778: PUSH
88779: LD_VAR 0 2
88783: ARRAY
88784: PUSH
88785: LD_INT 2
88787: ARRAY
88788: PPUSH
88789: LD_VAR 0 3
88793: PPUSH
88794: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
88798: LD_ADDR_EXP 142
88802: PUSH
88803: LD_EXP 142
88807: PPUSH
88808: LD_VAR 0 1
88812: PPUSH
88813: LD_EXP 142
88817: PUSH
88818: LD_VAR 0 1
88822: ARRAY
88823: PPUSH
88824: LD_VAR 0 2
88828: PPUSH
88829: CALL_OW 3
88833: PPUSH
88834: CALL_OW 1
88838: ST_TO_ADDR
// end ; end ;
88839: GO 88590
88841: POP
88842: POP
// end ;
88843: GO 88508
88845: POP
88846: POP
// end ;
88847: PPOPN 4
88849: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
88850: LD_INT 0
88852: PPUSH
88853: PPUSH
// result := false ;
88854: LD_ADDR_VAR 0 4
88858: PUSH
88859: LD_INT 0
88861: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
88862: LD_VAR 0 1
88866: PPUSH
88867: CALL_OW 264
88871: PUSH
88872: LD_INT 81
88874: EQUAL
88875: NOT
88876: IFFALSE 88880
// exit ;
88878: GO 89120
// index := GetElementIndex ( minersList , unit ) ;
88880: LD_ADDR_VAR 0 5
88884: PUSH
88885: LD_EXP 141
88889: PPUSH
88890: LD_VAR 0 1
88894: PPUSH
88895: CALL 33538 0 2
88899: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
88900: LD_EXP 142
88904: PUSH
88905: LD_VAR 0 5
88909: ARRAY
88910: PUSH
88911: LD_EXP 143
88915: GREATEREQUAL
88916: IFFALSE 88920
// exit ;
88918: GO 89120
// ComMoveXY ( unit , x , y ) ;
88920: LD_VAR 0 1
88924: PPUSH
88925: LD_VAR 0 2
88929: PPUSH
88930: LD_VAR 0 3
88934: PPUSH
88935: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
88939: LD_INT 35
88941: PPUSH
88942: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
88946: LD_VAR 0 1
88950: PPUSH
88951: LD_VAR 0 2
88955: PPUSH
88956: LD_VAR 0 3
88960: PPUSH
88961: CALL 64893 0 3
88965: NOT
88966: PUSH
88967: LD_VAR 0 1
88971: PPUSH
88972: CALL_OW 314
88976: AND
88977: IFFALSE 88981
// exit ;
88979: GO 89120
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
88981: LD_VAR 0 2
88985: PPUSH
88986: LD_VAR 0 3
88990: PPUSH
88991: CALL_OW 428
88995: PUSH
88996: LD_VAR 0 1
89000: EQUAL
89001: PUSH
89002: LD_VAR 0 1
89006: PPUSH
89007: CALL_OW 314
89011: NOT
89012: AND
89013: IFFALSE 88939
// PlaySoundXY ( x , y , PlantMine ) ;
89015: LD_VAR 0 2
89019: PPUSH
89020: LD_VAR 0 3
89024: PPUSH
89025: LD_STRING PlantMine
89027: PPUSH
89028: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
89032: LD_VAR 0 2
89036: PPUSH
89037: LD_VAR 0 3
89041: PPUSH
89042: LD_VAR 0 1
89046: PPUSH
89047: CALL_OW 255
89051: PPUSH
89052: LD_INT 0
89054: PPUSH
89055: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
89059: LD_ADDR_EXP 142
89063: PUSH
89064: LD_EXP 142
89068: PPUSH
89069: LD_VAR 0 5
89073: PUSH
89074: LD_EXP 142
89078: PUSH
89079: LD_VAR 0 5
89083: ARRAY
89084: PUSH
89085: LD_INT 1
89087: PLUS
89088: PUSH
89089: EMPTY
89090: LIST
89091: LIST
89092: PPUSH
89093: LD_VAR 0 2
89097: PUSH
89098: LD_VAR 0 3
89102: PUSH
89103: EMPTY
89104: LIST
89105: LIST
89106: PPUSH
89107: CALL 33753 0 3
89111: ST_TO_ADDR
// result := true ;
89112: LD_ADDR_VAR 0 4
89116: PUSH
89117: LD_INT 1
89119: ST_TO_ADDR
// end ;
89120: LD_VAR 0 4
89124: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
89125: LD_INT 0
89127: PPUSH
89128: PPUSH
89129: PPUSH
// if not unit in minersList then
89130: LD_VAR 0 1
89134: PUSH
89135: LD_EXP 141
89139: IN
89140: NOT
89141: IFFALSE 89145
// exit ;
89143: GO 89537
// index := GetElementIndex ( minersList , unit ) ;
89145: LD_ADDR_VAR 0 6
89149: PUSH
89150: LD_EXP 141
89154: PPUSH
89155: LD_VAR 0 1
89159: PPUSH
89160: CALL 33538 0 2
89164: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
89165: LD_ADDR_VAR 0 5
89169: PUSH
89170: DOUBLE
89171: LD_EXP 142
89175: PUSH
89176: LD_VAR 0 6
89180: ARRAY
89181: INC
89182: ST_TO_ADDR
89183: LD_INT 1
89185: PUSH
89186: FOR_DOWNTO
89187: IFFALSE 89348
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
89189: LD_EXP 142
89193: PUSH
89194: LD_VAR 0 6
89198: ARRAY
89199: PUSH
89200: LD_VAR 0 5
89204: ARRAY
89205: PUSH
89206: LD_INT 1
89208: ARRAY
89209: PUSH
89210: LD_VAR 0 2
89214: EQUAL
89215: PUSH
89216: LD_EXP 142
89220: PUSH
89221: LD_VAR 0 6
89225: ARRAY
89226: PUSH
89227: LD_VAR 0 5
89231: ARRAY
89232: PUSH
89233: LD_INT 2
89235: ARRAY
89236: PUSH
89237: LD_VAR 0 3
89241: EQUAL
89242: AND
89243: IFFALSE 89346
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
89245: LD_EXP 142
89249: PUSH
89250: LD_VAR 0 6
89254: ARRAY
89255: PUSH
89256: LD_VAR 0 5
89260: ARRAY
89261: PUSH
89262: LD_INT 1
89264: ARRAY
89265: PPUSH
89266: LD_EXP 142
89270: PUSH
89271: LD_VAR 0 6
89275: ARRAY
89276: PUSH
89277: LD_VAR 0 5
89281: ARRAY
89282: PUSH
89283: LD_INT 2
89285: ARRAY
89286: PPUSH
89287: LD_VAR 0 1
89291: PPUSH
89292: CALL_OW 255
89296: PPUSH
89297: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
89301: LD_ADDR_EXP 142
89305: PUSH
89306: LD_EXP 142
89310: PPUSH
89311: LD_VAR 0 6
89315: PPUSH
89316: LD_EXP 142
89320: PUSH
89321: LD_VAR 0 6
89325: ARRAY
89326: PPUSH
89327: LD_VAR 0 5
89331: PPUSH
89332: CALL_OW 3
89336: PPUSH
89337: CALL_OW 1
89341: ST_TO_ADDR
// exit ;
89342: POP
89343: POP
89344: GO 89537
// end ; end ;
89346: GO 89186
89348: POP
89349: POP
// for i := minerMinesList [ index ] downto 1 do
89350: LD_ADDR_VAR 0 5
89354: PUSH
89355: DOUBLE
89356: LD_EXP 142
89360: PUSH
89361: LD_VAR 0 6
89365: ARRAY
89366: INC
89367: ST_TO_ADDR
89368: LD_INT 1
89370: PUSH
89371: FOR_DOWNTO
89372: IFFALSE 89535
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
89374: LD_EXP 142
89378: PUSH
89379: LD_VAR 0 6
89383: ARRAY
89384: PUSH
89385: LD_VAR 0 5
89389: ARRAY
89390: PUSH
89391: LD_INT 1
89393: ARRAY
89394: PPUSH
89395: LD_EXP 142
89399: PUSH
89400: LD_VAR 0 6
89404: ARRAY
89405: PUSH
89406: LD_VAR 0 5
89410: ARRAY
89411: PUSH
89412: LD_INT 2
89414: ARRAY
89415: PPUSH
89416: LD_VAR 0 2
89420: PPUSH
89421: LD_VAR 0 3
89425: PPUSH
89426: CALL_OW 298
89430: PUSH
89431: LD_INT 6
89433: LESS
89434: IFFALSE 89533
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
89436: LD_EXP 142
89440: PUSH
89441: LD_VAR 0 6
89445: ARRAY
89446: PUSH
89447: LD_VAR 0 5
89451: ARRAY
89452: PUSH
89453: LD_INT 1
89455: ARRAY
89456: PPUSH
89457: LD_EXP 142
89461: PUSH
89462: LD_VAR 0 6
89466: ARRAY
89467: PUSH
89468: LD_VAR 0 5
89472: ARRAY
89473: PUSH
89474: LD_INT 2
89476: ARRAY
89477: PPUSH
89478: LD_VAR 0 1
89482: PPUSH
89483: CALL_OW 255
89487: PPUSH
89488: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
89492: LD_ADDR_EXP 142
89496: PUSH
89497: LD_EXP 142
89501: PPUSH
89502: LD_VAR 0 6
89506: PPUSH
89507: LD_EXP 142
89511: PUSH
89512: LD_VAR 0 6
89516: ARRAY
89517: PPUSH
89518: LD_VAR 0 5
89522: PPUSH
89523: CALL_OW 3
89527: PPUSH
89528: CALL_OW 1
89532: ST_TO_ADDR
// end ; end ;
89533: GO 89371
89535: POP
89536: POP
// end ;
89537: LD_VAR 0 4
89541: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
89542: LD_INT 0
89544: PPUSH
89545: PPUSH
89546: PPUSH
89547: PPUSH
89548: PPUSH
89549: PPUSH
89550: PPUSH
89551: PPUSH
89552: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
89553: LD_VAR 0 1
89557: PPUSH
89558: CALL_OW 264
89562: PUSH
89563: LD_INT 81
89565: EQUAL
89566: NOT
89567: PUSH
89568: LD_VAR 0 1
89572: PUSH
89573: LD_EXP 141
89577: IN
89578: NOT
89579: OR
89580: IFFALSE 89584
// exit ;
89582: GO 89906
// index := GetElementIndex ( minersList , unit ) ;
89584: LD_ADDR_VAR 0 6
89588: PUSH
89589: LD_EXP 141
89593: PPUSH
89594: LD_VAR 0 1
89598: PPUSH
89599: CALL 33538 0 2
89603: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
89604: LD_ADDR_VAR 0 8
89608: PUSH
89609: LD_EXP 143
89613: PUSH
89614: LD_EXP 142
89618: PUSH
89619: LD_VAR 0 6
89623: ARRAY
89624: MINUS
89625: ST_TO_ADDR
// if not minesFreeAmount then
89626: LD_VAR 0 8
89630: NOT
89631: IFFALSE 89635
// exit ;
89633: GO 89906
// tmp := [ ] ;
89635: LD_ADDR_VAR 0 7
89639: PUSH
89640: EMPTY
89641: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
89642: LD_ADDR_VAR 0 5
89646: PUSH
89647: DOUBLE
89648: LD_INT 1
89650: DEC
89651: ST_TO_ADDR
89652: LD_VAR 0 8
89656: PUSH
89657: FOR_TO
89658: IFFALSE 89853
// begin _d := rand ( 0 , 5 ) ;
89660: LD_ADDR_VAR 0 11
89664: PUSH
89665: LD_INT 0
89667: PPUSH
89668: LD_INT 5
89670: PPUSH
89671: CALL_OW 12
89675: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
89676: LD_ADDR_VAR 0 12
89680: PUSH
89681: LD_INT 2
89683: PPUSH
89684: LD_INT 6
89686: PPUSH
89687: CALL_OW 12
89691: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
89692: LD_ADDR_VAR 0 9
89696: PUSH
89697: LD_VAR 0 2
89701: PPUSH
89702: LD_VAR 0 11
89706: PPUSH
89707: LD_VAR 0 12
89711: PPUSH
89712: CALL_OW 272
89716: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
89717: LD_ADDR_VAR 0 10
89721: PUSH
89722: LD_VAR 0 3
89726: PPUSH
89727: LD_VAR 0 11
89731: PPUSH
89732: LD_VAR 0 12
89736: PPUSH
89737: CALL_OW 273
89741: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
89742: LD_VAR 0 9
89746: PPUSH
89747: LD_VAR 0 10
89751: PPUSH
89752: CALL_OW 488
89756: PUSH
89757: LD_VAR 0 9
89761: PUSH
89762: LD_VAR 0 10
89766: PUSH
89767: EMPTY
89768: LIST
89769: LIST
89770: PUSH
89771: LD_VAR 0 7
89775: IN
89776: NOT
89777: AND
89778: PUSH
89779: LD_VAR 0 9
89783: PPUSH
89784: LD_VAR 0 10
89788: PPUSH
89789: CALL_OW 458
89793: NOT
89794: AND
89795: IFFALSE 89837
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
89797: LD_ADDR_VAR 0 7
89801: PUSH
89802: LD_VAR 0 7
89806: PPUSH
89807: LD_VAR 0 7
89811: PUSH
89812: LD_INT 1
89814: PLUS
89815: PPUSH
89816: LD_VAR 0 9
89820: PUSH
89821: LD_VAR 0 10
89825: PUSH
89826: EMPTY
89827: LIST
89828: LIST
89829: PPUSH
89830: CALL_OW 1
89834: ST_TO_ADDR
89835: GO 89851
// i := i - 1 ;
89837: LD_ADDR_VAR 0 5
89841: PUSH
89842: LD_VAR 0 5
89846: PUSH
89847: LD_INT 1
89849: MINUS
89850: ST_TO_ADDR
// end ;
89851: GO 89657
89853: POP
89854: POP
// for i in tmp do
89855: LD_ADDR_VAR 0 5
89859: PUSH
89860: LD_VAR 0 7
89864: PUSH
89865: FOR_IN
89866: IFFALSE 89904
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
89868: LD_VAR 0 1
89872: PPUSH
89873: LD_VAR 0 5
89877: PUSH
89878: LD_INT 1
89880: ARRAY
89881: PPUSH
89882: LD_VAR 0 5
89886: PUSH
89887: LD_INT 2
89889: ARRAY
89890: PPUSH
89891: CALL 88850 0 3
89895: NOT
89896: IFFALSE 89902
// exit ;
89898: POP
89899: POP
89900: GO 89906
89902: GO 89865
89904: POP
89905: POP
// end ;
89906: LD_VAR 0 4
89910: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
89911: LD_INT 0
89913: PPUSH
89914: PPUSH
89915: PPUSH
89916: PPUSH
89917: PPUSH
89918: PPUSH
89919: PPUSH
// if not GetClass ( unit ) = class_sniper then
89920: LD_VAR 0 1
89924: PPUSH
89925: CALL_OW 257
89929: PUSH
89930: LD_INT 5
89932: EQUAL
89933: NOT
89934: IFFALSE 89938
// exit ;
89936: GO 90326
// dist := 8 ;
89938: LD_ADDR_VAR 0 5
89942: PUSH
89943: LD_INT 8
89945: ST_TO_ADDR
// viewRange := 12 ;
89946: LD_ADDR_VAR 0 7
89950: PUSH
89951: LD_INT 12
89953: ST_TO_ADDR
// side := GetSide ( unit ) ;
89954: LD_ADDR_VAR 0 6
89958: PUSH
89959: LD_VAR 0 1
89963: PPUSH
89964: CALL_OW 255
89968: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
89969: LD_INT 61
89971: PPUSH
89972: LD_VAR 0 6
89976: PPUSH
89977: CALL_OW 321
89981: PUSH
89982: LD_INT 2
89984: EQUAL
89985: IFFALSE 89995
// viewRange := 16 ;
89987: LD_ADDR_VAR 0 7
89991: PUSH
89992: LD_INT 16
89994: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
89995: LD_VAR 0 1
89999: PPUSH
90000: LD_VAR 0 2
90004: PPUSH
90005: LD_VAR 0 3
90009: PPUSH
90010: CALL_OW 297
90014: PUSH
90015: LD_VAR 0 5
90019: GREATER
90020: IFFALSE 90099
// begin ComMoveXY ( unit , x , y ) ;
90022: LD_VAR 0 1
90026: PPUSH
90027: LD_VAR 0 2
90031: PPUSH
90032: LD_VAR 0 3
90036: PPUSH
90037: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
90041: LD_INT 35
90043: PPUSH
90044: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
90048: LD_VAR 0 1
90052: PPUSH
90053: LD_VAR 0 2
90057: PPUSH
90058: LD_VAR 0 3
90062: PPUSH
90063: CALL 64893 0 3
90067: NOT
90068: IFFALSE 90072
// exit ;
90070: GO 90326
// until GetDistUnitXY ( unit , x , y ) < dist ;
90072: LD_VAR 0 1
90076: PPUSH
90077: LD_VAR 0 2
90081: PPUSH
90082: LD_VAR 0 3
90086: PPUSH
90087: CALL_OW 297
90091: PUSH
90092: LD_VAR 0 5
90096: LESS
90097: IFFALSE 90041
// end ; ComTurnXY ( unit , x , y ) ;
90099: LD_VAR 0 1
90103: PPUSH
90104: LD_VAR 0 2
90108: PPUSH
90109: LD_VAR 0 3
90113: PPUSH
90114: CALL_OW 118
// wait ( 5 ) ;
90118: LD_INT 5
90120: PPUSH
90121: CALL_OW 67
// _d := GetDir ( unit ) ;
90125: LD_ADDR_VAR 0 10
90129: PUSH
90130: LD_VAR 0 1
90134: PPUSH
90135: CALL_OW 254
90139: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
90140: LD_ADDR_VAR 0 8
90144: PUSH
90145: LD_VAR 0 1
90149: PPUSH
90150: CALL_OW 250
90154: PPUSH
90155: LD_VAR 0 10
90159: PPUSH
90160: LD_VAR 0 5
90164: PPUSH
90165: CALL_OW 272
90169: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
90170: LD_ADDR_VAR 0 9
90174: PUSH
90175: LD_VAR 0 1
90179: PPUSH
90180: CALL_OW 251
90184: PPUSH
90185: LD_VAR 0 10
90189: PPUSH
90190: LD_VAR 0 5
90194: PPUSH
90195: CALL_OW 273
90199: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
90200: LD_VAR 0 8
90204: PPUSH
90205: LD_VAR 0 9
90209: PPUSH
90210: CALL_OW 488
90214: NOT
90215: IFFALSE 90219
// exit ;
90217: GO 90326
// ComAnimCustom ( unit , 1 ) ;
90219: LD_VAR 0 1
90223: PPUSH
90224: LD_INT 1
90226: PPUSH
90227: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
90231: LD_VAR 0 8
90235: PPUSH
90236: LD_VAR 0 9
90240: PPUSH
90241: LD_VAR 0 6
90245: PPUSH
90246: LD_VAR 0 7
90250: PPUSH
90251: CALL_OW 330
// repeat wait ( 1 ) ;
90255: LD_INT 1
90257: PPUSH
90258: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
90262: LD_VAR 0 1
90266: PPUSH
90267: CALL_OW 316
90271: PUSH
90272: LD_VAR 0 1
90276: PPUSH
90277: CALL_OW 314
90281: OR
90282: PUSH
90283: LD_VAR 0 1
90287: PPUSH
90288: CALL_OW 302
90292: NOT
90293: OR
90294: PUSH
90295: LD_VAR 0 1
90299: PPUSH
90300: CALL_OW 301
90304: OR
90305: IFFALSE 90255
// RemoveSeeing ( _x , _y , side ) ;
90307: LD_VAR 0 8
90311: PPUSH
90312: LD_VAR 0 9
90316: PPUSH
90317: LD_VAR 0 6
90321: PPUSH
90322: CALL_OW 331
// end ; end_of_file
90326: LD_VAR 0 4
90330: RET
// export function StopOriginalMusic ; begin
90331: LD_INT 0
90333: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
90334: LD_STRING OW_FORCEMUSICDISABLE(true);
90336: PPUSH
90337: CALL_OW 559
// end ;
90341: LD_VAR 0 1
90345: RET
// export function PlayOriginalMusic ; begin
90346: LD_INT 0
90348: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
90349: LD_STRING OW_FORCEMUSICDISABLE(false);
90351: PPUSH
90352: CALL_OW 559
// end ;
90356: LD_VAR 0 1
90360: RET
// export function PlayCustomMusic ( track , callback ) ; begin
90361: LD_INT 0
90363: PPUSH
// StopOriginalMusic ;
90364: CALL 90331 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
90368: LD_STRING playMusic("
90370: PUSH
90371: LD_VAR 0 1
90375: STR
90376: PUSH
90377: LD_STRING ", "
90379: STR
90380: PUSH
90381: LD_VAR 0 2
90385: STR
90386: PUSH
90387: LD_STRING ")
90389: STR
90390: PPUSH
90391: CALL_OW 559
// end ;
90395: LD_VAR 0 3
90399: RET
