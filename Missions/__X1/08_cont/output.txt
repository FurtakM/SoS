// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 27 0 0
// PrepareHeike ;
   8: CALL 51 0 0
// Action ;
  12: CALL 728 0 0
// SetAreaMapShow ( deadArea , 11 ) ;
  16: LD_INT 5
  18: PPUSH
  19: LD_INT 11
  21: PPUSH
  22: CALL_OW 424
// end ;
  26: END
// export debug , prefix ; function Init ; begin
  27: LD_INT 0
  29: PPUSH
// debug := true ;
  30: LD_ADDR_EXP 1
  34: PUSH
  35: LD_INT 1
  37: ST_TO_ADDR
// prefix := 07_ ;
  38: LD_ADDR_EXP 2
  42: PUSH
  43: LD_STRING 07_
  45: ST_TO_ADDR
// end ; end_of_file
  46: LD_VAR 0 1
  50: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareHeike ; var i , tmp , un , veh ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
  56: PPUSH
  57: PPUSH
// uc_side := 4 ;
  58: LD_ADDR_OWVAR 20
  62: PUSH
  63: LD_INT 4
  65: ST_TO_ADDR
// uc_nation := 1 ;
  66: LD_ADDR_OWVAR 21
  70: PUSH
  71: LD_INT 1
  73: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
  74: LD_ADDR_EXP 15
  78: PUSH
  79: LD_STRING 07_Americans
  81: PPUSH
  82: CALL_OW 31
  86: ST_TO_ADDR
// if americanSquad < 5 then
  87: LD_EXP 15
  91: PUSH
  92: LD_INT 5
  94: LESS
  95: IFFALSE 152
// begin for i := americanSquad to 5 do
  97: LD_ADDR_VAR 0 2
 101: PUSH
 102: DOUBLE
 103: LD_EXP 15
 107: DEC
 108: ST_TO_ADDR
 109: LD_INT 5
 111: PUSH
 112: FOR_TO
 113: IFFALSE 150
// begin PrepareHuman ( false , 2 , 6 ) ;
 115: LD_INT 0
 117: PPUSH
 118: LD_INT 2
 120: PPUSH
 121: LD_INT 6
 123: PPUSH
 124: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 128: LD_ADDR_EXP 15
 132: PUSH
 133: LD_EXP 15
 137: PPUSH
 138: CALL_OW 44
 142: PPUSH
 143: CALL 37476 0 2
 147: ST_TO_ADDR
// end ;
 148: GO 112
 150: POP
 151: POP
// end ; for i in americanSquad do
 152: LD_ADDR_VAR 0 2
 156: PUSH
 157: LD_EXP 15
 161: PUSH
 162: FOR_IN
 163: IFFALSE 230
// begin SetClass ( i , 2 ) ;
 165: LD_VAR 0 2
 169: PPUSH
 170: LD_INT 2
 172: PPUSH
 173: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
 177: LD_VAR 0 2
 181: PPUSH
 182: LD_INT 78
 184: PPUSH
 185: LD_INT 16
 187: PPUSH
 188: LD_INT 5
 190: PPUSH
 191: LD_INT 0
 193: PPUSH
 194: CALL_OW 50
// ComHold ( i ) ;
 198: LD_VAR 0 2
 202: PPUSH
 203: CALL_OW 140
// if Prob ( 60 ) then
 207: LD_INT 60
 209: PPUSH
 210: CALL_OW 13
 214: IFFALSE 228
// ForceSleep ( i , true ) ;
 216: LD_VAR 0 2
 220: PPUSH
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 585
// end ;
 228: GO 162
 230: POP
 231: POP
// uc_side := 2 ;
 232: LD_ADDR_OWVAR 20
 236: PUSH
 237: LD_INT 2
 239: ST_TO_ADDR
// uc_nation := 2 ;
 240: LD_ADDR_OWVAR 21
 244: PUSH
 245: LD_INT 2
 247: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 248: LD_ADDR_EXP 3
 252: PUSH
 253: LD_STRING Heike
 255: PPUSH
 256: LD_EXP 1
 260: NOT
 261: PPUSH
 262: LD_EXP 2
 266: PPUSH
 267: CALL 795 0 3
 271: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 272: LD_ADDR_EXP 6
 276: PUSH
 277: LD_STRING Ibrahim
 279: PPUSH
 280: LD_EXP 1
 284: NOT
 285: PPUSH
 286: LD_EXP 2
 290: PPUSH
 291: CALL 795 0 3
 295: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 296: LD_ADDR_EXP 4
 300: PUSH
 301: LD_STRING Givi
 303: PPUSH
 304: LD_EXP 1
 308: NOT
 309: PPUSH
 310: LD_EXP 2
 314: PPUSH
 315: CALL 795 0 3
 319: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 320: LD_ADDR_EXP 7
 324: PUSH
 325: LD_STRING Kamil
 327: PPUSH
 328: LD_EXP 1
 332: NOT
 333: PPUSH
 334: LD_EXP 2
 338: PPUSH
 339: CALL 795 0 3
 343: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 344: LD_ADDR_EXP 8
 348: PUSH
 349: LD_STRING Kaia
 351: PPUSH
 352: LD_EXP 1
 356: NOT
 357: PPUSH
 358: LD_EXP 2
 362: PPUSH
 363: CALL 795 0 3
 367: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 368: LD_ADDR_EXP 9
 372: PUSH
 373: LD_STRING Sophia
 375: PPUSH
 376: LD_EXP 1
 380: NOT
 381: PPUSH
 382: LD_EXP 2
 386: PPUSH
 387: CALL 795 0 3
 391: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 392: LD_ADDR_EXP 10
 396: PUSH
 397: LD_STRING Markov
 399: PPUSH
 400: LD_EXP 1
 404: NOT
 405: PPUSH
 406: LD_EXP 2
 410: PPUSH
 411: CALL 795 0 3
 415: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 416: LD_ADDR_EXP 13
 420: PUSH
 421: LD_STRING Aviradze
 423: PPUSH
 424: LD_EXP 1
 428: NOT
 429: PPUSH
 430: LD_EXP 2
 434: PPUSH
 435: CALL 795 0 3
 439: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 440: LD_ADDR_EXP 12
 444: PUSH
 445: LD_STRING Kurt
 447: PPUSH
 448: LD_EXP 1
 452: NOT
 453: PPUSH
 454: LD_EXP 2
 458: PPUSH
 459: CALL 795 0 3
 463: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 464: LD_ADDR_EXP 5
 468: PUSH
 469: LD_STRING Mike
 471: PPUSH
 472: LD_EXP 1
 476: NOT
 477: PPUSH
 478: LD_EXP 2
 482: PPUSH
 483: CALL 795 0 3
 487: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 488: LD_ADDR_EXP 11
 492: PUSH
 493: LD_STRING Olaf
 495: PPUSH
 496: LD_INT 0
 498: PPUSH
 499: LD_STRING 
 501: PPUSH
 502: CALL 795 0 3
 506: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 507: LD_ADDR_EXP 14
 511: PUSH
 512: LD_STRING 07_others
 514: PPUSH
 515: CALL_OW 31
 519: ST_TO_ADDR
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
 520: LD_ADDR_VAR 0 3
 524: PUSH
 525: LD_EXP 5
 529: PUSH
 530: LD_EXP 6
 534: PUSH
 535: LD_EXP 7
 539: PUSH
 540: LD_EXP 8
 544: PUSH
 545: LD_EXP 9
 549: PUSH
 550: LD_EXP 10
 554: PUSH
 555: LD_EXP 11
 559: PUSH
 560: LD_EXP 12
 564: PUSH
 565: LD_EXP 13
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: LIST
 580: PUSH
 581: LD_EXP 14
 585: UNION
 586: ST_TO_ADDR
// end ; end_of_file
 587: LD_VAR 0 1
 591: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
 592: LD_INT 0
 594: PPUSH
 595: PPUSH
 596: PPUSH
 597: PPUSH
// uc_side := 3 ;
 598: LD_ADDR_OWVAR 20
 602: PUSH
 603: LD_INT 3
 605: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
 606: LD_ADDR_OWVAR 21
 610: PUSH
 611: LD_INT 1
 613: PPUSH
 614: LD_INT 3
 616: PPUSH
 617: CALL_OW 12
 621: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
 622: LD_ADDR_VAR 0 4
 626: PUSH
 627: LD_INT 5
 629: PPUSH
 630: LD_INT 0
 632: PPUSH
 633: CALL_OW 517
 637: ST_TO_ADDR
// for i := 1 to 3 do
 638: LD_ADDR_VAR 0 2
 642: PUSH
 643: DOUBLE
 644: LD_INT 1
 646: DEC
 647: ST_TO_ADDR
 648: LD_INT 3
 650: PUSH
 651: FOR_TO
 652: IFFALSE 721
// begin PrepareHuman ( false , 2 , 0 ) ;
 654: LD_INT 0
 656: PPUSH
 657: LD_INT 2
 659: PPUSH
 660: LD_INT 0
 662: PPUSH
 663: CALL_OW 380
// un := CreateHuman ;
 667: LD_ADDR_VAR 0 3
 671: PUSH
 672: CALL_OW 44
 676: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
 677: LD_VAR 0 3
 681: PPUSH
 682: LD_VAR 0 4
 686: PUSH
 687: LD_INT 1
 689: ARRAY
 690: PUSH
 691: LD_VAR 0 2
 695: ARRAY
 696: PPUSH
 697: LD_VAR 0 4
 701: PUSH
 702: LD_INT 2
 704: ARRAY
 705: PUSH
 706: LD_VAR 0 2
 710: ARRAY
 711: PPUSH
 712: LD_INT 1
 714: PPUSH
 715: CALL_OW 601
// end ;
 719: GO 651
 721: POP
 722: POP
// end ; end_of_file
 723: LD_VAR 0 1
 727: RET
// export function Action ; begin
 728: LD_INT 0
 730: PPUSH
// InGameOn ;
 731: CALL_OW 8
// PrepareDeadBodies ;
 735: CALL 592 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 90 ) ;
 739: LD_INT 152
 741: PPUSH
 742: LD_INT 65
 744: PPUSH
 745: LD_INT 2
 747: PPUSH
 748: LD_INT 90
 750: NEG
 751: PPUSH
 752: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
 756: LD_INT 152
 758: PPUSH
 759: LD_INT 65
 761: PPUSH
 762: LD_INT 2
 764: PPUSH
 765: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
 769: LD_INT 122
 771: PPUSH
 772: LD_INT 40
 774: PPUSH
 775: LD_INT 2
 777: PPUSH
 778: LD_INT 8
 780: NEG
 781: PPUSH
 782: CALL_OW 330
// InGameOff ;
 786: CALL_OW 9
// end ; end_of_file
 790: LD_VAR 0 1
 794: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 795: LD_INT 0
 797: PPUSH
 798: PPUSH
// if exist_mode then
 799: LD_VAR 0 2
 803: IFFALSE 828
// unit := CreateCharacter ( prefix & ident ) else
 805: LD_ADDR_VAR 0 5
 809: PUSH
 810: LD_VAR 0 3
 814: PUSH
 815: LD_VAR 0 1
 819: STR
 820: PPUSH
 821: CALL_OW 34
 825: ST_TO_ADDR
 826: GO 843
// unit := NewCharacter ( ident ) ;
 828: LD_ADDR_VAR 0 5
 832: PUSH
 833: LD_VAR 0 1
 837: PPUSH
 838: CALL_OW 25
 842: ST_TO_ADDR
// result := unit ;
 843: LD_ADDR_VAR 0 4
 847: PUSH
 848: LD_VAR 0 5
 852: ST_TO_ADDR
// end ;
 853: LD_VAR 0 4
 857: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 858: LD_INT 0
 860: PPUSH
 861: PPUSH
// if not side or not nation then
 862: LD_VAR 0 1
 866: NOT
 867: PUSH
 868: LD_VAR 0 2
 872: NOT
 873: OR
 874: IFFALSE 878
// exit ;
 876: GO 1646
// case nation of nation_american :
 878: LD_VAR 0 2
 882: PUSH
 883: LD_INT 1
 885: DOUBLE
 886: EQUAL
 887: IFTRUE 891
 889: GO 1105
 891: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 892: LD_ADDR_VAR 0 4
 896: PUSH
 897: LD_INT 35
 899: PUSH
 900: LD_INT 45
 902: PUSH
 903: LD_INT 46
 905: PUSH
 906: LD_INT 47
 908: PUSH
 909: LD_INT 82
 911: PUSH
 912: LD_INT 83
 914: PUSH
 915: LD_INT 84
 917: PUSH
 918: LD_INT 85
 920: PUSH
 921: LD_INT 86
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: LD_INT 2
 929: PUSH
 930: LD_INT 6
 932: PUSH
 933: LD_INT 15
 935: PUSH
 936: LD_INT 16
 938: PUSH
 939: LD_INT 7
 941: PUSH
 942: LD_INT 12
 944: PUSH
 945: LD_INT 13
 947: PUSH
 948: LD_INT 10
 950: PUSH
 951: LD_INT 14
 953: PUSH
 954: LD_INT 20
 956: PUSH
 957: LD_INT 21
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_INT 25
 965: PUSH
 966: LD_INT 32
 968: PUSH
 969: LD_INT 27
 971: PUSH
 972: LD_INT 36
 974: PUSH
 975: LD_INT 69
 977: PUSH
 978: LD_INT 39
 980: PUSH
 981: LD_INT 34
 983: PUSH
 984: LD_INT 40
 986: PUSH
 987: LD_INT 48
 989: PUSH
 990: LD_INT 49
 992: PUSH
 993: LD_INT 50
 995: PUSH
 996: LD_INT 51
 998: PUSH
 999: LD_INT 52
1001: PUSH
1002: LD_INT 53
1004: PUSH
1005: LD_INT 54
1007: PUSH
1008: LD_INT 55
1010: PUSH
1011: LD_INT 56
1013: PUSH
1014: LD_INT 57
1016: PUSH
1017: LD_INT 58
1019: PUSH
1020: LD_INT 59
1022: PUSH
1023: LD_INT 60
1025: PUSH
1026: LD_INT 61
1028: PUSH
1029: LD_INT 62
1031: PUSH
1032: LD_INT 80
1034: PUSH
1035: LD_INT 82
1037: PUSH
1038: LD_INT 83
1040: PUSH
1041: LD_INT 84
1043: PUSH
1044: LD_INT 85
1046: PUSH
1047: LD_INT 86
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: ST_TO_ADDR
1103: GO 1570
1105: LD_INT 2
1107: DOUBLE
1108: EQUAL
1109: IFTRUE 1113
1111: GO 1339
1113: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1114: LD_ADDR_VAR 0 4
1118: PUSH
1119: LD_INT 35
1121: PUSH
1122: LD_INT 45
1124: PUSH
1125: LD_INT 46
1127: PUSH
1128: LD_INT 47
1130: PUSH
1131: LD_INT 82
1133: PUSH
1134: LD_INT 83
1136: PUSH
1137: LD_INT 84
1139: PUSH
1140: LD_INT 85
1142: PUSH
1143: LD_INT 87
1145: PUSH
1146: LD_INT 70
1148: PUSH
1149: LD_INT 1
1151: PUSH
1152: LD_INT 11
1154: PUSH
1155: LD_INT 3
1157: PUSH
1158: LD_INT 4
1160: PUSH
1161: LD_INT 5
1163: PUSH
1164: LD_INT 6
1166: PUSH
1167: LD_INT 15
1169: PUSH
1170: LD_INT 18
1172: PUSH
1173: LD_INT 7
1175: PUSH
1176: LD_INT 17
1178: PUSH
1179: LD_INT 8
1181: PUSH
1182: LD_INT 20
1184: PUSH
1185: LD_INT 21
1187: PUSH
1188: LD_INT 22
1190: PUSH
1191: LD_INT 72
1193: PUSH
1194: LD_INT 26
1196: PUSH
1197: LD_INT 69
1199: PUSH
1200: LD_INT 39
1202: PUSH
1203: LD_INT 40
1205: PUSH
1206: LD_INT 41
1208: PUSH
1209: LD_INT 42
1211: PUSH
1212: LD_INT 43
1214: PUSH
1215: LD_INT 48
1217: PUSH
1218: LD_INT 49
1220: PUSH
1221: LD_INT 50
1223: PUSH
1224: LD_INT 51
1226: PUSH
1227: LD_INT 52
1229: PUSH
1230: LD_INT 53
1232: PUSH
1233: LD_INT 54
1235: PUSH
1236: LD_INT 55
1238: PUSH
1239: LD_INT 56
1241: PUSH
1242: LD_INT 60
1244: PUSH
1245: LD_INT 61
1247: PUSH
1248: LD_INT 62
1250: PUSH
1251: LD_INT 66
1253: PUSH
1254: LD_INT 67
1256: PUSH
1257: LD_INT 68
1259: PUSH
1260: LD_INT 81
1262: PUSH
1263: LD_INT 82
1265: PUSH
1266: LD_INT 83
1268: PUSH
1269: LD_INT 84
1271: PUSH
1272: LD_INT 85
1274: PUSH
1275: LD_INT 87
1277: PUSH
1278: LD_INT 88
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: ST_TO_ADDR
1337: GO 1570
1339: LD_INT 3
1341: DOUBLE
1342: EQUAL
1343: IFTRUE 1347
1345: GO 1569
1347: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1348: LD_ADDR_VAR 0 4
1352: PUSH
1353: LD_INT 46
1355: PUSH
1356: LD_INT 47
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: LD_INT 2
1364: PUSH
1365: LD_INT 82
1367: PUSH
1368: LD_INT 83
1370: PUSH
1371: LD_INT 84
1373: PUSH
1374: LD_INT 85
1376: PUSH
1377: LD_INT 86
1379: PUSH
1380: LD_INT 11
1382: PUSH
1383: LD_INT 9
1385: PUSH
1386: LD_INT 20
1388: PUSH
1389: LD_INT 19
1391: PUSH
1392: LD_INT 21
1394: PUSH
1395: LD_INT 24
1397: PUSH
1398: LD_INT 22
1400: PUSH
1401: LD_INT 25
1403: PUSH
1404: LD_INT 28
1406: PUSH
1407: LD_INT 29
1409: PUSH
1410: LD_INT 30
1412: PUSH
1413: LD_INT 31
1415: PUSH
1416: LD_INT 37
1418: PUSH
1419: LD_INT 38
1421: PUSH
1422: LD_INT 32
1424: PUSH
1425: LD_INT 27
1427: PUSH
1428: LD_INT 33
1430: PUSH
1431: LD_INT 69
1433: PUSH
1434: LD_INT 39
1436: PUSH
1437: LD_INT 34
1439: PUSH
1440: LD_INT 40
1442: PUSH
1443: LD_INT 71
1445: PUSH
1446: LD_INT 23
1448: PUSH
1449: LD_INT 44
1451: PUSH
1452: LD_INT 48
1454: PUSH
1455: LD_INT 49
1457: PUSH
1458: LD_INT 50
1460: PUSH
1461: LD_INT 51
1463: PUSH
1464: LD_INT 52
1466: PUSH
1467: LD_INT 53
1469: PUSH
1470: LD_INT 54
1472: PUSH
1473: LD_INT 55
1475: PUSH
1476: LD_INT 56
1478: PUSH
1479: LD_INT 57
1481: PUSH
1482: LD_INT 58
1484: PUSH
1485: LD_INT 59
1487: PUSH
1488: LD_INT 63
1490: PUSH
1491: LD_INT 64
1493: PUSH
1494: LD_INT 65
1496: PUSH
1497: LD_INT 82
1499: PUSH
1500: LD_INT 83
1502: PUSH
1503: LD_INT 84
1505: PUSH
1506: LD_INT 85
1508: PUSH
1509: LD_INT 86
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: ST_TO_ADDR
1567: GO 1570
1569: POP
// if state > - 1 and state < 3 then
1570: LD_VAR 0 3
1574: PUSH
1575: LD_INT 1
1577: NEG
1578: GREATER
1579: PUSH
1580: LD_VAR 0 3
1584: PUSH
1585: LD_INT 3
1587: LESS
1588: AND
1589: IFFALSE 1646
// for i in result do
1591: LD_ADDR_VAR 0 5
1595: PUSH
1596: LD_VAR 0 4
1600: PUSH
1601: FOR_IN
1602: IFFALSE 1644
// if GetTech ( i , side ) <> state then
1604: LD_VAR 0 5
1608: PPUSH
1609: LD_VAR 0 1
1613: PPUSH
1614: CALL_OW 321
1618: PUSH
1619: LD_VAR 0 3
1623: NONEQUAL
1624: IFFALSE 1642
// result := result diff i ;
1626: LD_ADDR_VAR 0 4
1630: PUSH
1631: LD_VAR 0 4
1635: PUSH
1636: LD_VAR 0 5
1640: DIFF
1641: ST_TO_ADDR
1642: GO 1601
1644: POP
1645: POP
// end ;
1646: LD_VAR 0 4
1650: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1651: LD_INT 0
1653: PPUSH
1654: PPUSH
1655: PPUSH
// result := true ;
1656: LD_ADDR_VAR 0 3
1660: PUSH
1661: LD_INT 1
1663: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1664: LD_ADDR_VAR 0 5
1668: PUSH
1669: LD_VAR 0 2
1673: PPUSH
1674: CALL_OW 480
1678: ST_TO_ADDR
// if not tmp then
1679: LD_VAR 0 5
1683: NOT
1684: IFFALSE 1688
// exit ;
1686: GO 1737
// for i in tmp do
1688: LD_ADDR_VAR 0 4
1692: PUSH
1693: LD_VAR 0 5
1697: PUSH
1698: FOR_IN
1699: IFFALSE 1735
// if GetTech ( i , side ) <> state_researched then
1701: LD_VAR 0 4
1705: PPUSH
1706: LD_VAR 0 1
1710: PPUSH
1711: CALL_OW 321
1715: PUSH
1716: LD_INT 2
1718: NONEQUAL
1719: IFFALSE 1733
// begin result := false ;
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: LD_INT 0
1728: ST_TO_ADDR
// exit ;
1729: POP
1730: POP
1731: GO 1737
// end ;
1733: GO 1698
1735: POP
1736: POP
// end ;
1737: LD_VAR 0 3
1741: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1742: LD_INT 0
1744: PPUSH
1745: PPUSH
1746: PPUSH
1747: PPUSH
1748: PPUSH
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
1753: PPUSH
1754: PPUSH
1755: PPUSH
1756: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1757: LD_VAR 0 1
1761: NOT
1762: PUSH
1763: LD_VAR 0 1
1767: PPUSH
1768: CALL_OW 257
1772: PUSH
1773: LD_INT 9
1775: NONEQUAL
1776: OR
1777: IFFALSE 1781
// exit ;
1779: GO 2354
// side := GetSide ( unit ) ;
1781: LD_ADDR_VAR 0 9
1785: PUSH
1786: LD_VAR 0 1
1790: PPUSH
1791: CALL_OW 255
1795: ST_TO_ADDR
// tech_space := tech_spacanom ;
1796: LD_ADDR_VAR 0 12
1800: PUSH
1801: LD_INT 29
1803: ST_TO_ADDR
// tech_time := tech_taurad ;
1804: LD_ADDR_VAR 0 13
1808: PUSH
1809: LD_INT 28
1811: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1812: LD_ADDR_VAR 0 11
1816: PUSH
1817: LD_VAR 0 1
1821: PPUSH
1822: CALL_OW 310
1826: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1827: LD_VAR 0 11
1831: PPUSH
1832: CALL_OW 247
1836: PUSH
1837: LD_INT 2
1839: EQUAL
1840: IFFALSE 1844
// exit ;
1842: GO 2354
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1844: LD_ADDR_VAR 0 8
1848: PUSH
1849: LD_INT 81
1851: PUSH
1852: LD_VAR 0 9
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: PUSH
1861: LD_INT 3
1863: PUSH
1864: LD_INT 21
1866: PUSH
1867: LD_INT 3
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: ST_TO_ADDR
// if not tmp then
1887: LD_VAR 0 8
1891: NOT
1892: IFFALSE 1896
// exit ;
1894: GO 2354
// if in_unit then
1896: LD_VAR 0 11
1900: IFFALSE 1924
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1902: LD_ADDR_VAR 0 10
1906: PUSH
1907: LD_VAR 0 8
1911: PPUSH
1912: LD_VAR 0 11
1916: PPUSH
1917: CALL_OW 74
1921: ST_TO_ADDR
1922: GO 1944
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1924: LD_ADDR_VAR 0 10
1928: PUSH
1929: LD_VAR 0 8
1933: PPUSH
1934: LD_VAR 0 1
1938: PPUSH
1939: CALL_OW 74
1943: ST_TO_ADDR
// if not enemy then
1944: LD_VAR 0 10
1948: NOT
1949: IFFALSE 1953
// exit ;
1951: GO 2354
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1953: LD_VAR 0 11
1957: PUSH
1958: LD_VAR 0 11
1962: PPUSH
1963: LD_VAR 0 10
1967: PPUSH
1968: CALL_OW 296
1972: PUSH
1973: LD_INT 13
1975: GREATER
1976: AND
1977: PUSH
1978: LD_VAR 0 1
1982: PPUSH
1983: LD_VAR 0 10
1987: PPUSH
1988: CALL_OW 296
1992: PUSH
1993: LD_INT 12
1995: GREATER
1996: OR
1997: IFFALSE 2001
// exit ;
1999: GO 2354
// missile := [ 1 ] ;
2001: LD_ADDR_VAR 0 14
2005: PUSH
2006: LD_INT 1
2008: PUSH
2009: EMPTY
2010: LIST
2011: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2012: LD_VAR 0 9
2016: PPUSH
2017: LD_VAR 0 12
2021: PPUSH
2022: CALL_OW 325
2026: IFFALSE 2055
// missile := Replace ( missile , missile + 1 , 2 ) ;
2028: LD_ADDR_VAR 0 14
2032: PUSH
2033: LD_VAR 0 14
2037: PPUSH
2038: LD_VAR 0 14
2042: PUSH
2043: LD_INT 1
2045: PLUS
2046: PPUSH
2047: LD_INT 2
2049: PPUSH
2050: CALL_OW 1
2054: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2055: LD_VAR 0 9
2059: PPUSH
2060: LD_VAR 0 13
2064: PPUSH
2065: CALL_OW 325
2069: PUSH
2070: LD_VAR 0 10
2074: PPUSH
2075: CALL_OW 255
2079: PPUSH
2080: LD_VAR 0 13
2084: PPUSH
2085: CALL_OW 325
2089: NOT
2090: AND
2091: IFFALSE 2120
// missile := Replace ( missile , missile + 1 , 3 ) ;
2093: LD_ADDR_VAR 0 14
2097: PUSH
2098: LD_VAR 0 14
2102: PPUSH
2103: LD_VAR 0 14
2107: PUSH
2108: LD_INT 1
2110: PLUS
2111: PPUSH
2112: LD_INT 3
2114: PPUSH
2115: CALL_OW 1
2119: ST_TO_ADDR
// if missile < 2 then
2120: LD_VAR 0 14
2124: PUSH
2125: LD_INT 2
2127: LESS
2128: IFFALSE 2132
// exit ;
2130: GO 2354
// x := GetX ( enemy ) ;
2132: LD_ADDR_VAR 0 4
2136: PUSH
2137: LD_VAR 0 10
2141: PPUSH
2142: CALL_OW 250
2146: ST_TO_ADDR
// y := GetY ( enemy ) ;
2147: LD_ADDR_VAR 0 5
2151: PUSH
2152: LD_VAR 0 10
2156: PPUSH
2157: CALL_OW 251
2161: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2162: LD_ADDR_VAR 0 6
2166: PUSH
2167: LD_VAR 0 4
2171: PUSH
2172: LD_INT 1
2174: NEG
2175: PPUSH
2176: LD_INT 1
2178: PPUSH
2179: CALL_OW 12
2183: PLUS
2184: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2185: LD_ADDR_VAR 0 7
2189: PUSH
2190: LD_VAR 0 5
2194: PUSH
2195: LD_INT 1
2197: NEG
2198: PPUSH
2199: LD_INT 1
2201: PPUSH
2202: CALL_OW 12
2206: PLUS
2207: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2208: LD_VAR 0 6
2212: PPUSH
2213: LD_VAR 0 7
2217: PPUSH
2218: CALL_OW 488
2222: NOT
2223: IFFALSE 2245
// begin _x := x ;
2225: LD_ADDR_VAR 0 6
2229: PUSH
2230: LD_VAR 0 4
2234: ST_TO_ADDR
// _y := y ;
2235: LD_ADDR_VAR 0 7
2239: PUSH
2240: LD_VAR 0 5
2244: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2245: LD_ADDR_VAR 0 3
2249: PUSH
2250: LD_INT 1
2252: PPUSH
2253: LD_VAR 0 14
2257: PPUSH
2258: CALL_OW 12
2262: ST_TO_ADDR
// case i of 1 :
2263: LD_VAR 0 3
2267: PUSH
2268: LD_INT 1
2270: DOUBLE
2271: EQUAL
2272: IFTRUE 2276
2274: GO 2293
2276: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2277: LD_VAR 0 1
2281: PPUSH
2282: LD_VAR 0 10
2286: PPUSH
2287: CALL_OW 115
2291: GO 2354
2293: LD_INT 2
2295: DOUBLE
2296: EQUAL
2297: IFTRUE 2301
2299: GO 2323
2301: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2302: LD_VAR 0 1
2306: PPUSH
2307: LD_VAR 0 6
2311: PPUSH
2312: LD_VAR 0 7
2316: PPUSH
2317: CALL_OW 153
2321: GO 2354
2323: LD_INT 3
2325: DOUBLE
2326: EQUAL
2327: IFTRUE 2331
2329: GO 2353
2331: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2332: LD_VAR 0 1
2336: PPUSH
2337: LD_VAR 0 6
2341: PPUSH
2342: LD_VAR 0 7
2346: PPUSH
2347: CALL_OW 154
2351: GO 2354
2353: POP
// end ;
2354: LD_VAR 0 2
2358: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2359: LD_INT 0
2361: PPUSH
2362: PPUSH
2363: PPUSH
2364: PPUSH
2365: PPUSH
2366: PPUSH
// if not unit or not building then
2367: LD_VAR 0 1
2371: NOT
2372: PUSH
2373: LD_VAR 0 2
2377: NOT
2378: OR
2379: IFFALSE 2383
// exit ;
2381: GO 2541
// x := GetX ( building ) ;
2383: LD_ADDR_VAR 0 5
2387: PUSH
2388: LD_VAR 0 2
2392: PPUSH
2393: CALL_OW 250
2397: ST_TO_ADDR
// y := GetY ( building ) ;
2398: LD_ADDR_VAR 0 6
2402: PUSH
2403: LD_VAR 0 2
2407: PPUSH
2408: CALL_OW 251
2412: ST_TO_ADDR
// for i = 0 to 5 do
2413: LD_ADDR_VAR 0 4
2417: PUSH
2418: DOUBLE
2419: LD_INT 0
2421: DEC
2422: ST_TO_ADDR
2423: LD_INT 5
2425: PUSH
2426: FOR_TO
2427: IFFALSE 2539
// begin _x := ShiftX ( x , i , 3 ) ;
2429: LD_ADDR_VAR 0 7
2433: PUSH
2434: LD_VAR 0 5
2438: PPUSH
2439: LD_VAR 0 4
2443: PPUSH
2444: LD_INT 3
2446: PPUSH
2447: CALL_OW 272
2451: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2452: LD_ADDR_VAR 0 8
2456: PUSH
2457: LD_VAR 0 6
2461: PPUSH
2462: LD_VAR 0 4
2466: PPUSH
2467: LD_INT 3
2469: PPUSH
2470: CALL_OW 273
2474: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2475: LD_VAR 0 7
2479: PPUSH
2480: LD_VAR 0 8
2484: PPUSH
2485: CALL_OW 488
2489: NOT
2490: IFFALSE 2494
// continue ;
2492: GO 2426
// if HexInfo ( _x , _y ) = 0 then
2494: LD_VAR 0 7
2498: PPUSH
2499: LD_VAR 0 8
2503: PPUSH
2504: CALL_OW 428
2508: PUSH
2509: LD_INT 0
2511: EQUAL
2512: IFFALSE 2537
// begin ComMoveXY ( unit , _x , _y ) ;
2514: LD_VAR 0 1
2518: PPUSH
2519: LD_VAR 0 7
2523: PPUSH
2524: LD_VAR 0 8
2528: PPUSH
2529: CALL_OW 111
// exit ;
2533: POP
2534: POP
2535: GO 2541
// end ; end ;
2537: GO 2426
2539: POP
2540: POP
// end ;
2541: LD_VAR 0 3
2545: RET
// export function ScanBase ( side , base_area ) ; begin
2546: LD_INT 0
2548: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2549: LD_ADDR_VAR 0 3
2553: PUSH
2554: LD_VAR 0 2
2558: PPUSH
2559: LD_INT 81
2561: PUSH
2562: LD_VAR 0 1
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: PPUSH
2571: CALL_OW 70
2575: ST_TO_ADDR
// end ;
2576: LD_VAR 0 3
2580: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2581: LD_INT 0
2583: PPUSH
2584: PPUSH
2585: PPUSH
2586: PPUSH
// result := false ;
2587: LD_ADDR_VAR 0 2
2591: PUSH
2592: LD_INT 0
2594: ST_TO_ADDR
// side := GetSide ( unit ) ;
2595: LD_ADDR_VAR 0 3
2599: PUSH
2600: LD_VAR 0 1
2604: PPUSH
2605: CALL_OW 255
2609: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2610: LD_ADDR_VAR 0 4
2614: PUSH
2615: LD_VAR 0 1
2619: PPUSH
2620: CALL_OW 248
2624: ST_TO_ADDR
// case nat of 1 :
2625: LD_VAR 0 4
2629: PUSH
2630: LD_INT 1
2632: DOUBLE
2633: EQUAL
2634: IFTRUE 2638
2636: GO 2649
2638: POP
// tech := tech_lassight ; 2 :
2639: LD_ADDR_VAR 0 5
2643: PUSH
2644: LD_INT 12
2646: ST_TO_ADDR
2647: GO 2688
2649: LD_INT 2
2651: DOUBLE
2652: EQUAL
2653: IFTRUE 2657
2655: GO 2668
2657: POP
// tech := tech_mortar ; 3 :
2658: LD_ADDR_VAR 0 5
2662: PUSH
2663: LD_INT 41
2665: ST_TO_ADDR
2666: GO 2688
2668: LD_INT 3
2670: DOUBLE
2671: EQUAL
2672: IFTRUE 2676
2674: GO 2687
2676: POP
// tech := tech_bazooka ; end ;
2677: LD_ADDR_VAR 0 5
2681: PUSH
2682: LD_INT 44
2684: ST_TO_ADDR
2685: GO 2688
2687: POP
// if Researched ( side , tech ) then
2688: LD_VAR 0 3
2692: PPUSH
2693: LD_VAR 0 5
2697: PPUSH
2698: CALL_OW 325
2702: IFFALSE 2729
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2704: LD_ADDR_VAR 0 2
2708: PUSH
2709: LD_INT 5
2711: PUSH
2712: LD_INT 8
2714: PUSH
2715: LD_INT 9
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: PUSH
2723: LD_VAR 0 4
2727: ARRAY
2728: ST_TO_ADDR
// end ;
2729: LD_VAR 0 2
2733: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2734: LD_INT 0
2736: PPUSH
2737: PPUSH
2738: PPUSH
// if not mines then
2739: LD_VAR 0 2
2743: NOT
2744: IFFALSE 2748
// exit ;
2746: GO 2892
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2748: LD_ADDR_VAR 0 5
2752: PUSH
2753: LD_INT 81
2755: PUSH
2756: LD_VAR 0 1
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: PUSH
2765: LD_INT 3
2767: PUSH
2768: LD_INT 21
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: PPUSH
2786: CALL_OW 69
2790: ST_TO_ADDR
// for i in mines do
2791: LD_ADDR_VAR 0 4
2795: PUSH
2796: LD_VAR 0 2
2800: PUSH
2801: FOR_IN
2802: IFFALSE 2890
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2804: LD_VAR 0 4
2808: PUSH
2809: LD_INT 1
2811: ARRAY
2812: PPUSH
2813: LD_VAR 0 4
2817: PUSH
2818: LD_INT 2
2820: ARRAY
2821: PPUSH
2822: CALL_OW 458
2826: NOT
2827: IFFALSE 2831
// continue ;
2829: GO 2801
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2831: LD_VAR 0 4
2835: PUSH
2836: LD_INT 1
2838: ARRAY
2839: PPUSH
2840: LD_VAR 0 4
2844: PUSH
2845: LD_INT 2
2847: ARRAY
2848: PPUSH
2849: CALL_OW 428
2853: PUSH
2854: LD_VAR 0 5
2858: IN
2859: IFFALSE 2888
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2861: LD_VAR 0 4
2865: PUSH
2866: LD_INT 1
2868: ARRAY
2869: PPUSH
2870: LD_VAR 0 4
2874: PUSH
2875: LD_INT 2
2877: ARRAY
2878: PPUSH
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL_OW 456
// end ;
2888: GO 2801
2890: POP
2891: POP
// end ;
2892: LD_VAR 0 3
2896: RET
// export function Count ( array ) ; var i ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
// result := 0 ;
2901: LD_ADDR_VAR 0 2
2905: PUSH
2906: LD_INT 0
2908: ST_TO_ADDR
// for i in array do
2909: LD_ADDR_VAR 0 3
2913: PUSH
2914: LD_VAR 0 1
2918: PUSH
2919: FOR_IN
2920: IFFALSE 2944
// if i then
2922: LD_VAR 0 3
2926: IFFALSE 2942
// result := result + 1 ;
2928: LD_ADDR_VAR 0 2
2932: PUSH
2933: LD_VAR 0 2
2937: PUSH
2938: LD_INT 1
2940: PLUS
2941: ST_TO_ADDR
2942: GO 2919
2944: POP
2945: POP
// end ;
2946: LD_VAR 0 2
2950: RET
// export function IsEmpty ( building ) ; begin
2951: LD_INT 0
2953: PPUSH
// if not building then
2954: LD_VAR 0 1
2958: NOT
2959: IFFALSE 2963
// exit ;
2961: GO 3006
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2963: LD_ADDR_VAR 0 2
2967: PUSH
2968: LD_VAR 0 1
2972: PUSH
2973: LD_INT 22
2975: PUSH
2976: LD_VAR 0 1
2980: PPUSH
2981: CALL_OW 255
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PUSH
2990: LD_INT 58
2992: PUSH
2993: EMPTY
2994: LIST
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PPUSH
3000: CALL_OW 69
3004: IN
3005: ST_TO_ADDR
// end ;
3006: LD_VAR 0 2
3010: RET
// export function IsNotFull ( building ) ; begin
3011: LD_INT 0
3013: PPUSH
// if not building then
3014: LD_VAR 0 1
3018: NOT
3019: IFFALSE 3023
// exit ;
3021: GO 3042
// result := UnitsInside ( building ) < 6 ;
3023: LD_ADDR_VAR 0 2
3027: PUSH
3028: LD_VAR 0 1
3032: PPUSH
3033: CALL_OW 313
3037: PUSH
3038: LD_INT 6
3040: LESS
3041: ST_TO_ADDR
// end ;
3042: LD_VAR 0 2
3046: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3047: LD_INT 0
3049: PPUSH
3050: PPUSH
3051: PPUSH
3052: PPUSH
// tmp := [ ] ;
3053: LD_ADDR_VAR 0 3
3057: PUSH
3058: EMPTY
3059: ST_TO_ADDR
// list := [ ] ;
3060: LD_ADDR_VAR 0 5
3064: PUSH
3065: EMPTY
3066: ST_TO_ADDR
// for i = 16 to 25 do
3067: LD_ADDR_VAR 0 4
3071: PUSH
3072: DOUBLE
3073: LD_INT 16
3075: DEC
3076: ST_TO_ADDR
3077: LD_INT 25
3079: PUSH
3080: FOR_TO
3081: IFFALSE 3154
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3083: LD_ADDR_VAR 0 3
3087: PUSH
3088: LD_VAR 0 3
3092: PUSH
3093: LD_INT 22
3095: PUSH
3096: LD_VAR 0 1
3100: PPUSH
3101: CALL_OW 255
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: PUSH
3110: LD_INT 91
3112: PUSH
3113: LD_VAR 0 1
3117: PUSH
3118: LD_INT 6
3120: PUSH
3121: EMPTY
3122: LIST
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 30
3128: PUSH
3129: LD_VAR 0 4
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: ADD
3151: ST_TO_ADDR
3152: GO 3080
3154: POP
3155: POP
// for i = 1 to tmp do
3156: LD_ADDR_VAR 0 4
3160: PUSH
3161: DOUBLE
3162: LD_INT 1
3164: DEC
3165: ST_TO_ADDR
3166: LD_VAR 0 3
3170: PUSH
3171: FOR_TO
3172: IFFALSE 3260
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3174: LD_ADDR_VAR 0 5
3178: PUSH
3179: LD_VAR 0 5
3183: PUSH
3184: LD_VAR 0 3
3188: PUSH
3189: LD_VAR 0 4
3193: ARRAY
3194: PPUSH
3195: CALL_OW 266
3199: PUSH
3200: LD_VAR 0 3
3204: PUSH
3205: LD_VAR 0 4
3209: ARRAY
3210: PPUSH
3211: CALL_OW 250
3215: PUSH
3216: LD_VAR 0 3
3220: PUSH
3221: LD_VAR 0 4
3225: ARRAY
3226: PPUSH
3227: CALL_OW 251
3231: PUSH
3232: LD_VAR 0 3
3236: PUSH
3237: LD_VAR 0 4
3241: ARRAY
3242: PPUSH
3243: CALL_OW 254
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: ADD
3257: ST_TO_ADDR
3258: GO 3171
3260: POP
3261: POP
// result := list ;
3262: LD_ADDR_VAR 0 2
3266: PUSH
3267: LD_VAR 0 5
3271: ST_TO_ADDR
// end ;
3272: LD_VAR 0 2
3276: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3277: LD_INT 0
3279: PPUSH
3280: PPUSH
3281: PPUSH
3282: PPUSH
3283: PPUSH
3284: PPUSH
3285: PPUSH
// if not factory then
3286: LD_VAR 0 1
3290: NOT
3291: IFFALSE 3295
// exit ;
3293: GO 3888
// if control = control_apeman then
3295: LD_VAR 0 4
3299: PUSH
3300: LD_INT 5
3302: EQUAL
3303: IFFALSE 3412
// begin tmp := UnitsInside ( factory ) ;
3305: LD_ADDR_VAR 0 8
3309: PUSH
3310: LD_VAR 0 1
3314: PPUSH
3315: CALL_OW 313
3319: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3320: LD_VAR 0 8
3324: PPUSH
3325: LD_INT 25
3327: PUSH
3328: LD_INT 12
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PPUSH
3335: CALL_OW 72
3339: NOT
3340: IFFALSE 3350
// control := control_manual ;
3342: LD_ADDR_VAR 0 4
3346: PUSH
3347: LD_INT 1
3349: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3350: LD_ADDR_VAR 0 8
3354: PUSH
3355: LD_VAR 0 1
3359: PPUSH
3360: CALL 3047 0 1
3364: ST_TO_ADDR
// if tmp then
3365: LD_VAR 0 8
3369: IFFALSE 3412
// begin for i in tmp do
3371: LD_ADDR_VAR 0 7
3375: PUSH
3376: LD_VAR 0 8
3380: PUSH
3381: FOR_IN
3382: IFFALSE 3410
// if i [ 1 ] = b_ext_radio then
3384: LD_VAR 0 7
3388: PUSH
3389: LD_INT 1
3391: ARRAY
3392: PUSH
3393: LD_INT 22
3395: EQUAL
3396: IFFALSE 3408
// begin control := control_remote ;
3398: LD_ADDR_VAR 0 4
3402: PUSH
3403: LD_INT 2
3405: ST_TO_ADDR
// break ;
3406: GO 3410
// end ;
3408: GO 3381
3410: POP
3411: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3412: LD_VAR 0 1
3416: PPUSH
3417: LD_VAR 0 2
3421: PPUSH
3422: LD_VAR 0 3
3426: PPUSH
3427: LD_VAR 0 4
3431: PPUSH
3432: LD_VAR 0 5
3436: PPUSH
3437: CALL_OW 448
3441: IFFALSE 3476
// begin result := [ chassis , engine , control , weapon ] ;
3443: LD_ADDR_VAR 0 6
3447: PUSH
3448: LD_VAR 0 2
3452: PUSH
3453: LD_VAR 0 3
3457: PUSH
3458: LD_VAR 0 4
3462: PUSH
3463: LD_VAR 0 5
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: ST_TO_ADDR
// exit ;
3474: GO 3888
// end ; _chassis := AvailableChassisList ( factory ) ;
3476: LD_ADDR_VAR 0 9
3480: PUSH
3481: LD_VAR 0 1
3485: PPUSH
3486: CALL_OW 475
3490: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3491: LD_ADDR_VAR 0 11
3495: PUSH
3496: LD_VAR 0 1
3500: PPUSH
3501: CALL_OW 476
3505: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3506: LD_ADDR_VAR 0 12
3510: PUSH
3511: LD_VAR 0 1
3515: PPUSH
3516: CALL_OW 477
3520: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3521: LD_ADDR_VAR 0 10
3525: PUSH
3526: LD_VAR 0 1
3530: PPUSH
3531: CALL_OW 478
3535: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3536: LD_VAR 0 9
3540: NOT
3541: PUSH
3542: LD_VAR 0 11
3546: NOT
3547: OR
3548: PUSH
3549: LD_VAR 0 12
3553: NOT
3554: OR
3555: PUSH
3556: LD_VAR 0 10
3560: NOT
3561: OR
3562: IFFALSE 3597
// begin result := [ chassis , engine , control , weapon ] ;
3564: LD_ADDR_VAR 0 6
3568: PUSH
3569: LD_VAR 0 2
3573: PUSH
3574: LD_VAR 0 3
3578: PUSH
3579: LD_VAR 0 4
3583: PUSH
3584: LD_VAR 0 5
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: ST_TO_ADDR
// exit ;
3595: GO 3888
// end ; if not chassis in _chassis then
3597: LD_VAR 0 2
3601: PUSH
3602: LD_VAR 0 9
3606: IN
3607: NOT
3608: IFFALSE 3634
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3610: LD_ADDR_VAR 0 2
3614: PUSH
3615: LD_VAR 0 9
3619: PUSH
3620: LD_INT 1
3622: PPUSH
3623: LD_VAR 0 9
3627: PPUSH
3628: CALL_OW 12
3632: ARRAY
3633: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3634: LD_VAR 0 2
3638: PPUSH
3639: LD_VAR 0 3
3643: PPUSH
3644: CALL 3893 0 2
3648: NOT
3649: IFFALSE 3708
// repeat engine := _engine [ 1 ] ;
3651: LD_ADDR_VAR 0 3
3655: PUSH
3656: LD_VAR 0 11
3660: PUSH
3661: LD_INT 1
3663: ARRAY
3664: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3665: LD_ADDR_VAR 0 11
3669: PUSH
3670: LD_VAR 0 11
3674: PPUSH
3675: LD_INT 1
3677: PPUSH
3678: CALL_OW 3
3682: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3683: LD_VAR 0 2
3687: PPUSH
3688: LD_VAR 0 3
3692: PPUSH
3693: CALL 3893 0 2
3697: PUSH
3698: LD_VAR 0 11
3702: PUSH
3703: EMPTY
3704: EQUAL
3705: OR
3706: IFFALSE 3651
// if not control in _control then
3708: LD_VAR 0 4
3712: PUSH
3713: LD_VAR 0 12
3717: IN
3718: NOT
3719: IFFALSE 3745
// control := _control [ rand ( 1 , _control ) ] ;
3721: LD_ADDR_VAR 0 4
3725: PUSH
3726: LD_VAR 0 12
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_VAR 0 12
3738: PPUSH
3739: CALL_OW 12
3743: ARRAY
3744: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3745: LD_VAR 0 2
3749: PPUSH
3750: LD_VAR 0 5
3754: PPUSH
3755: CALL 4113 0 2
3759: NOT
3760: IFFALSE 3819
// repeat weapon := _weapon [ 1 ] ;
3762: LD_ADDR_VAR 0 5
3766: PUSH
3767: LD_VAR 0 10
3771: PUSH
3772: LD_INT 1
3774: ARRAY
3775: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3776: LD_ADDR_VAR 0 10
3780: PUSH
3781: LD_VAR 0 10
3785: PPUSH
3786: LD_INT 1
3788: PPUSH
3789: CALL_OW 3
3793: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3794: LD_VAR 0 2
3798: PPUSH
3799: LD_VAR 0 5
3803: PPUSH
3804: CALL 4113 0 2
3808: PUSH
3809: LD_VAR 0 10
3813: PUSH
3814: EMPTY
3815: EQUAL
3816: OR
3817: IFFALSE 3762
// result := [ ] ;
3819: LD_ADDR_VAR 0 6
3823: PUSH
3824: EMPTY
3825: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3826: LD_VAR 0 1
3830: PPUSH
3831: LD_VAR 0 2
3835: PPUSH
3836: LD_VAR 0 3
3840: PPUSH
3841: LD_VAR 0 4
3845: PPUSH
3846: LD_VAR 0 5
3850: PPUSH
3851: CALL_OW 448
3855: IFFALSE 3888
// result := [ chassis , engine , control , weapon ] ;
3857: LD_ADDR_VAR 0 6
3861: PUSH
3862: LD_VAR 0 2
3866: PUSH
3867: LD_VAR 0 3
3871: PUSH
3872: LD_VAR 0 4
3876: PUSH
3877: LD_VAR 0 5
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: ST_TO_ADDR
// end ;
3888: LD_VAR 0 6
3892: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3893: LD_INT 0
3895: PPUSH
// if not chassis or not engine then
3896: LD_VAR 0 1
3900: NOT
3901: PUSH
3902: LD_VAR 0 2
3906: NOT
3907: OR
3908: IFFALSE 3912
// exit ;
3910: GO 4108
// case engine of engine_solar :
3912: LD_VAR 0 2
3916: PUSH
3917: LD_INT 2
3919: DOUBLE
3920: EQUAL
3921: IFTRUE 3925
3923: GO 3963
3925: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3926: LD_ADDR_VAR 0 3
3930: PUSH
3931: LD_INT 11
3933: PUSH
3934: LD_INT 12
3936: PUSH
3937: LD_INT 13
3939: PUSH
3940: LD_INT 14
3942: PUSH
3943: LD_INT 1
3945: PUSH
3946: LD_INT 2
3948: PUSH
3949: LD_INT 3
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: ST_TO_ADDR
3961: GO 4092
3963: LD_INT 1
3965: DOUBLE
3966: EQUAL
3967: IFTRUE 3971
3969: GO 4033
3971: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3972: LD_ADDR_VAR 0 3
3976: PUSH
3977: LD_INT 11
3979: PUSH
3980: LD_INT 12
3982: PUSH
3983: LD_INT 13
3985: PUSH
3986: LD_INT 14
3988: PUSH
3989: LD_INT 1
3991: PUSH
3992: LD_INT 2
3994: PUSH
3995: LD_INT 3
3997: PUSH
3998: LD_INT 4
4000: PUSH
4001: LD_INT 5
4003: PUSH
4004: LD_INT 21
4006: PUSH
4007: LD_INT 23
4009: PUSH
4010: LD_INT 22
4012: PUSH
4013: LD_INT 24
4015: PUSH
4016: EMPTY
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: ST_TO_ADDR
4031: GO 4092
4033: LD_INT 3
4035: DOUBLE
4036: EQUAL
4037: IFTRUE 4041
4039: GO 4091
4041: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4042: LD_ADDR_VAR 0 3
4046: PUSH
4047: LD_INT 13
4049: PUSH
4050: LD_INT 14
4052: PUSH
4053: LD_INT 2
4055: PUSH
4056: LD_INT 3
4058: PUSH
4059: LD_INT 4
4061: PUSH
4062: LD_INT 5
4064: PUSH
4065: LD_INT 21
4067: PUSH
4068: LD_INT 22
4070: PUSH
4071: LD_INT 23
4073: PUSH
4074: LD_INT 24
4076: PUSH
4077: EMPTY
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: ST_TO_ADDR
4089: GO 4092
4091: POP
// result := ( chassis in result ) ;
4092: LD_ADDR_VAR 0 3
4096: PUSH
4097: LD_VAR 0 1
4101: PUSH
4102: LD_VAR 0 3
4106: IN
4107: ST_TO_ADDR
// end ;
4108: LD_VAR 0 3
4112: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4113: LD_INT 0
4115: PPUSH
// if not chassis or not weapon then
4116: LD_VAR 0 1
4120: NOT
4121: PUSH
4122: LD_VAR 0 2
4126: NOT
4127: OR
4128: IFFALSE 4132
// exit ;
4130: GO 5194
// case weapon of us_machine_gun :
4132: LD_VAR 0 2
4136: PUSH
4137: LD_INT 2
4139: DOUBLE
4140: EQUAL
4141: IFTRUE 4145
4143: GO 4175
4145: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4146: LD_ADDR_VAR 0 3
4150: PUSH
4151: LD_INT 1
4153: PUSH
4154: LD_INT 2
4156: PUSH
4157: LD_INT 3
4159: PUSH
4160: LD_INT 4
4162: PUSH
4163: LD_INT 5
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: ST_TO_ADDR
4173: GO 5178
4175: LD_INT 3
4177: DOUBLE
4178: EQUAL
4179: IFTRUE 4183
4181: GO 4213
4183: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4184: LD_ADDR_VAR 0 3
4188: PUSH
4189: LD_INT 1
4191: PUSH
4192: LD_INT 2
4194: PUSH
4195: LD_INT 3
4197: PUSH
4198: LD_INT 4
4200: PUSH
4201: LD_INT 5
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: ST_TO_ADDR
4211: GO 5178
4213: LD_INT 11
4215: DOUBLE
4216: EQUAL
4217: IFTRUE 4221
4219: GO 4251
4221: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4222: LD_ADDR_VAR 0 3
4226: PUSH
4227: LD_INT 1
4229: PUSH
4230: LD_INT 2
4232: PUSH
4233: LD_INT 3
4235: PUSH
4236: LD_INT 4
4238: PUSH
4239: LD_INT 5
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: ST_TO_ADDR
4249: GO 5178
4251: LD_INT 4
4253: DOUBLE
4254: EQUAL
4255: IFTRUE 4259
4257: GO 4285
4259: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4260: LD_ADDR_VAR 0 3
4264: PUSH
4265: LD_INT 2
4267: PUSH
4268: LD_INT 3
4270: PUSH
4271: LD_INT 4
4273: PUSH
4274: LD_INT 5
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: ST_TO_ADDR
4283: GO 5178
4285: LD_INT 5
4287: DOUBLE
4288: EQUAL
4289: IFTRUE 4293
4291: GO 4319
4293: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4294: LD_ADDR_VAR 0 3
4298: PUSH
4299: LD_INT 2
4301: PUSH
4302: LD_INT 3
4304: PUSH
4305: LD_INT 4
4307: PUSH
4308: LD_INT 5
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: ST_TO_ADDR
4317: GO 5178
4319: LD_INT 9
4321: DOUBLE
4322: EQUAL
4323: IFTRUE 4327
4325: GO 4353
4327: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4328: LD_ADDR_VAR 0 3
4332: PUSH
4333: LD_INT 2
4335: PUSH
4336: LD_INT 3
4338: PUSH
4339: LD_INT 4
4341: PUSH
4342: LD_INT 5
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: ST_TO_ADDR
4351: GO 5178
4353: LD_INT 7
4355: DOUBLE
4356: EQUAL
4357: IFTRUE 4361
4359: GO 4387
4361: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4362: LD_ADDR_VAR 0 3
4366: PUSH
4367: LD_INT 2
4369: PUSH
4370: LD_INT 3
4372: PUSH
4373: LD_INT 4
4375: PUSH
4376: LD_INT 5
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: ST_TO_ADDR
4385: GO 5178
4387: LD_INT 12
4389: DOUBLE
4390: EQUAL
4391: IFTRUE 4395
4393: GO 4421
4395: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4396: LD_ADDR_VAR 0 3
4400: PUSH
4401: LD_INT 2
4403: PUSH
4404: LD_INT 3
4406: PUSH
4407: LD_INT 4
4409: PUSH
4410: LD_INT 5
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: ST_TO_ADDR
4419: GO 5178
4421: LD_INT 13
4423: DOUBLE
4424: EQUAL
4425: IFTRUE 4429
4427: GO 4455
4429: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4430: LD_ADDR_VAR 0 3
4434: PUSH
4435: LD_INT 2
4437: PUSH
4438: LD_INT 3
4440: PUSH
4441: LD_INT 4
4443: PUSH
4444: LD_INT 5
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: ST_TO_ADDR
4453: GO 5178
4455: LD_INT 14
4457: DOUBLE
4458: EQUAL
4459: IFTRUE 4463
4461: GO 4481
4463: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4464: LD_ADDR_VAR 0 3
4468: PUSH
4469: LD_INT 4
4471: PUSH
4472: LD_INT 5
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: ST_TO_ADDR
4479: GO 5178
4481: LD_INT 6
4483: DOUBLE
4484: EQUAL
4485: IFTRUE 4489
4487: GO 4507
4489: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4490: LD_ADDR_VAR 0 3
4494: PUSH
4495: LD_INT 4
4497: PUSH
4498: LD_INT 5
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: ST_TO_ADDR
4505: GO 5178
4507: LD_INT 10
4509: DOUBLE
4510: EQUAL
4511: IFTRUE 4515
4513: GO 4533
4515: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4516: LD_ADDR_VAR 0 3
4520: PUSH
4521: LD_INT 4
4523: PUSH
4524: LD_INT 5
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: ST_TO_ADDR
4531: GO 5178
4533: LD_INT 22
4535: DOUBLE
4536: EQUAL
4537: IFTRUE 4541
4539: GO 4567
4541: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4542: LD_ADDR_VAR 0 3
4546: PUSH
4547: LD_INT 11
4549: PUSH
4550: LD_INT 12
4552: PUSH
4553: LD_INT 13
4555: PUSH
4556: LD_INT 14
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: ST_TO_ADDR
4565: GO 5178
4567: LD_INT 23
4569: DOUBLE
4570: EQUAL
4571: IFTRUE 4575
4573: GO 4601
4575: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4576: LD_ADDR_VAR 0 3
4580: PUSH
4581: LD_INT 11
4583: PUSH
4584: LD_INT 12
4586: PUSH
4587: LD_INT 13
4589: PUSH
4590: LD_INT 14
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: ST_TO_ADDR
4599: GO 5178
4601: LD_INT 24
4603: DOUBLE
4604: EQUAL
4605: IFTRUE 4609
4607: GO 4635
4609: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4610: LD_ADDR_VAR 0 3
4614: PUSH
4615: LD_INT 11
4617: PUSH
4618: LD_INT 12
4620: PUSH
4621: LD_INT 13
4623: PUSH
4624: LD_INT 14
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: ST_TO_ADDR
4633: GO 5178
4635: LD_INT 30
4637: DOUBLE
4638: EQUAL
4639: IFTRUE 4643
4641: GO 4669
4643: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4644: LD_ADDR_VAR 0 3
4648: PUSH
4649: LD_INT 11
4651: PUSH
4652: LD_INT 12
4654: PUSH
4655: LD_INT 13
4657: PUSH
4658: LD_INT 14
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: ST_TO_ADDR
4667: GO 5178
4669: LD_INT 25
4671: DOUBLE
4672: EQUAL
4673: IFTRUE 4677
4675: GO 4695
4677: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4678: LD_ADDR_VAR 0 3
4682: PUSH
4683: LD_INT 13
4685: PUSH
4686: LD_INT 14
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: ST_TO_ADDR
4693: GO 5178
4695: LD_INT 27
4697: DOUBLE
4698: EQUAL
4699: IFTRUE 4703
4701: GO 4721
4703: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4704: LD_ADDR_VAR 0 3
4708: PUSH
4709: LD_INT 13
4711: PUSH
4712: LD_INT 14
4714: PUSH
4715: EMPTY
4716: LIST
4717: LIST
4718: ST_TO_ADDR
4719: GO 5178
4721: LD_EXP 21
4725: DOUBLE
4726: EQUAL
4727: IFTRUE 4731
4729: GO 4757
4731: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4732: LD_ADDR_VAR 0 3
4736: PUSH
4737: LD_INT 11
4739: PUSH
4740: LD_INT 12
4742: PUSH
4743: LD_INT 13
4745: PUSH
4746: LD_INT 14
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: ST_TO_ADDR
4755: GO 5178
4757: LD_INT 28
4759: DOUBLE
4760: EQUAL
4761: IFTRUE 4765
4763: GO 4783
4765: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4766: LD_ADDR_VAR 0 3
4770: PUSH
4771: LD_INT 13
4773: PUSH
4774: LD_INT 14
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: ST_TO_ADDR
4781: GO 5178
4783: LD_INT 29
4785: DOUBLE
4786: EQUAL
4787: IFTRUE 4791
4789: GO 4809
4791: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4792: LD_ADDR_VAR 0 3
4796: PUSH
4797: LD_INT 13
4799: PUSH
4800: LD_INT 14
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: ST_TO_ADDR
4807: GO 5178
4809: LD_INT 31
4811: DOUBLE
4812: EQUAL
4813: IFTRUE 4817
4815: GO 4835
4817: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4818: LD_ADDR_VAR 0 3
4822: PUSH
4823: LD_INT 13
4825: PUSH
4826: LD_INT 14
4828: PUSH
4829: EMPTY
4830: LIST
4831: LIST
4832: ST_TO_ADDR
4833: GO 5178
4835: LD_INT 26
4837: DOUBLE
4838: EQUAL
4839: IFTRUE 4843
4841: GO 4861
4843: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4844: LD_ADDR_VAR 0 3
4848: PUSH
4849: LD_INT 13
4851: PUSH
4852: LD_INT 14
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: ST_TO_ADDR
4859: GO 5178
4861: LD_INT 42
4863: DOUBLE
4864: EQUAL
4865: IFTRUE 4869
4867: GO 4895
4869: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4870: LD_ADDR_VAR 0 3
4874: PUSH
4875: LD_INT 21
4877: PUSH
4878: LD_INT 22
4880: PUSH
4881: LD_INT 23
4883: PUSH
4884: LD_INT 24
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: ST_TO_ADDR
4893: GO 5178
4895: LD_INT 43
4897: DOUBLE
4898: EQUAL
4899: IFTRUE 4903
4901: GO 4929
4903: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4904: LD_ADDR_VAR 0 3
4908: PUSH
4909: LD_INT 21
4911: PUSH
4912: LD_INT 22
4914: PUSH
4915: LD_INT 23
4917: PUSH
4918: LD_INT 24
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: ST_TO_ADDR
4927: GO 5178
4929: LD_INT 44
4931: DOUBLE
4932: EQUAL
4933: IFTRUE 4937
4935: GO 4963
4937: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4938: LD_ADDR_VAR 0 3
4942: PUSH
4943: LD_INT 21
4945: PUSH
4946: LD_INT 22
4948: PUSH
4949: LD_INT 23
4951: PUSH
4952: LD_INT 24
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: ST_TO_ADDR
4961: GO 5178
4963: LD_INT 45
4965: DOUBLE
4966: EQUAL
4967: IFTRUE 4971
4969: GO 4997
4971: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4972: LD_ADDR_VAR 0 3
4976: PUSH
4977: LD_INT 21
4979: PUSH
4980: LD_INT 22
4982: PUSH
4983: LD_INT 23
4985: PUSH
4986: LD_INT 24
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: ST_TO_ADDR
4995: GO 5178
4997: LD_INT 49
4999: DOUBLE
5000: EQUAL
5001: IFTRUE 5005
5003: GO 5031
5005: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5006: LD_ADDR_VAR 0 3
5010: PUSH
5011: LD_INT 21
5013: PUSH
5014: LD_INT 22
5016: PUSH
5017: LD_INT 23
5019: PUSH
5020: LD_INT 24
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: ST_TO_ADDR
5029: GO 5178
5031: LD_INT 51
5033: DOUBLE
5034: EQUAL
5035: IFTRUE 5039
5037: GO 5065
5039: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5040: LD_ADDR_VAR 0 3
5044: PUSH
5045: LD_INT 21
5047: PUSH
5048: LD_INT 22
5050: PUSH
5051: LD_INT 23
5053: PUSH
5054: LD_INT 24
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: ST_TO_ADDR
5063: GO 5178
5065: LD_INT 52
5067: DOUBLE
5068: EQUAL
5069: IFTRUE 5073
5071: GO 5099
5073: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5074: LD_ADDR_VAR 0 3
5078: PUSH
5079: LD_INT 21
5081: PUSH
5082: LD_INT 22
5084: PUSH
5085: LD_INT 23
5087: PUSH
5088: LD_INT 24
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: ST_TO_ADDR
5097: GO 5178
5099: LD_INT 53
5101: DOUBLE
5102: EQUAL
5103: IFTRUE 5107
5105: GO 5125
5107: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5108: LD_ADDR_VAR 0 3
5112: PUSH
5113: LD_INT 23
5115: PUSH
5116: LD_INT 24
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: ST_TO_ADDR
5123: GO 5178
5125: LD_INT 46
5127: DOUBLE
5128: EQUAL
5129: IFTRUE 5133
5131: GO 5151
5133: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5134: LD_ADDR_VAR 0 3
5138: PUSH
5139: LD_INT 23
5141: PUSH
5142: LD_INT 24
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: ST_TO_ADDR
5149: GO 5178
5151: LD_INT 47
5153: DOUBLE
5154: EQUAL
5155: IFTRUE 5159
5157: GO 5177
5159: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5160: LD_ADDR_VAR 0 3
5164: PUSH
5165: LD_INT 23
5167: PUSH
5168: LD_INT 24
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: ST_TO_ADDR
5175: GO 5178
5177: POP
// result := ( chassis in result ) ;
5178: LD_ADDR_VAR 0 3
5182: PUSH
5183: LD_VAR 0 1
5187: PUSH
5188: LD_VAR 0 3
5192: IN
5193: ST_TO_ADDR
// end ;
5194: LD_VAR 0 3
5198: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5199: LD_INT 0
5201: PPUSH
5202: PPUSH
5203: PPUSH
5204: PPUSH
5205: PPUSH
5206: PPUSH
5207: PPUSH
// result := array ;
5208: LD_ADDR_VAR 0 5
5212: PUSH
5213: LD_VAR 0 1
5217: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5218: LD_VAR 0 1
5222: NOT
5223: PUSH
5224: LD_VAR 0 2
5228: NOT
5229: OR
5230: PUSH
5231: LD_VAR 0 3
5235: NOT
5236: OR
5237: PUSH
5238: LD_VAR 0 2
5242: PUSH
5243: LD_VAR 0 1
5247: GREATER
5248: OR
5249: PUSH
5250: LD_VAR 0 3
5254: PUSH
5255: LD_VAR 0 1
5259: GREATER
5260: OR
5261: IFFALSE 5265
// exit ;
5263: GO 5561
// if direction then
5265: LD_VAR 0 4
5269: IFFALSE 5333
// begin d := 1 ;
5271: LD_ADDR_VAR 0 9
5275: PUSH
5276: LD_INT 1
5278: ST_TO_ADDR
// if i_from > i_to then
5279: LD_VAR 0 2
5283: PUSH
5284: LD_VAR 0 3
5288: GREATER
5289: IFFALSE 5315
// length := ( array - i_from ) + i_to else
5291: LD_ADDR_VAR 0 11
5295: PUSH
5296: LD_VAR 0 1
5300: PUSH
5301: LD_VAR 0 2
5305: MINUS
5306: PUSH
5307: LD_VAR 0 3
5311: PLUS
5312: ST_TO_ADDR
5313: GO 5331
// length := i_to - i_from ;
5315: LD_ADDR_VAR 0 11
5319: PUSH
5320: LD_VAR 0 3
5324: PUSH
5325: LD_VAR 0 2
5329: MINUS
5330: ST_TO_ADDR
// end else
5331: GO 5394
// begin d := - 1 ;
5333: LD_ADDR_VAR 0 9
5337: PUSH
5338: LD_INT 1
5340: NEG
5341: ST_TO_ADDR
// if i_from > i_to then
5342: LD_VAR 0 2
5346: PUSH
5347: LD_VAR 0 3
5351: GREATER
5352: IFFALSE 5372
// length := i_from - i_to else
5354: LD_ADDR_VAR 0 11
5358: PUSH
5359: LD_VAR 0 2
5363: PUSH
5364: LD_VAR 0 3
5368: MINUS
5369: ST_TO_ADDR
5370: GO 5394
// length := ( array - i_to ) + i_from ;
5372: LD_ADDR_VAR 0 11
5376: PUSH
5377: LD_VAR 0 1
5381: PUSH
5382: LD_VAR 0 3
5386: MINUS
5387: PUSH
5388: LD_VAR 0 2
5392: PLUS
5393: ST_TO_ADDR
// end ; if not length then
5394: LD_VAR 0 11
5398: NOT
5399: IFFALSE 5403
// exit ;
5401: GO 5561
// tmp := array ;
5403: LD_ADDR_VAR 0 10
5407: PUSH
5408: LD_VAR 0 1
5412: ST_TO_ADDR
// for i = 1 to length do
5413: LD_ADDR_VAR 0 6
5417: PUSH
5418: DOUBLE
5419: LD_INT 1
5421: DEC
5422: ST_TO_ADDR
5423: LD_VAR 0 11
5427: PUSH
5428: FOR_TO
5429: IFFALSE 5549
// begin for j = 1 to array do
5431: LD_ADDR_VAR 0 7
5435: PUSH
5436: DOUBLE
5437: LD_INT 1
5439: DEC
5440: ST_TO_ADDR
5441: LD_VAR 0 1
5445: PUSH
5446: FOR_TO
5447: IFFALSE 5535
// begin k := j + d ;
5449: LD_ADDR_VAR 0 8
5453: PUSH
5454: LD_VAR 0 7
5458: PUSH
5459: LD_VAR 0 9
5463: PLUS
5464: ST_TO_ADDR
// if k > array then
5465: LD_VAR 0 8
5469: PUSH
5470: LD_VAR 0 1
5474: GREATER
5475: IFFALSE 5485
// k := 1 ;
5477: LD_ADDR_VAR 0 8
5481: PUSH
5482: LD_INT 1
5484: ST_TO_ADDR
// if not k then
5485: LD_VAR 0 8
5489: NOT
5490: IFFALSE 5502
// k := array ;
5492: LD_ADDR_VAR 0 8
5496: PUSH
5497: LD_VAR 0 1
5501: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5502: LD_ADDR_VAR 0 10
5506: PUSH
5507: LD_VAR 0 10
5511: PPUSH
5512: LD_VAR 0 8
5516: PPUSH
5517: LD_VAR 0 1
5521: PUSH
5522: LD_VAR 0 7
5526: ARRAY
5527: PPUSH
5528: CALL_OW 1
5532: ST_TO_ADDR
// end ;
5533: GO 5446
5535: POP
5536: POP
// array := tmp ;
5537: LD_ADDR_VAR 0 1
5541: PUSH
5542: LD_VAR 0 10
5546: ST_TO_ADDR
// end ;
5547: GO 5428
5549: POP
5550: POP
// result := array ;
5551: LD_ADDR_VAR 0 5
5555: PUSH
5556: LD_VAR 0 1
5560: ST_TO_ADDR
// end ;
5561: LD_VAR 0 5
5565: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5566: LD_INT 0
5568: PPUSH
5569: PPUSH
// result := 0 ;
5570: LD_ADDR_VAR 0 3
5574: PUSH
5575: LD_INT 0
5577: ST_TO_ADDR
// if not array or not value in array then
5578: LD_VAR 0 1
5582: NOT
5583: PUSH
5584: LD_VAR 0 2
5588: PUSH
5589: LD_VAR 0 1
5593: IN
5594: NOT
5595: OR
5596: IFFALSE 5600
// exit ;
5598: GO 5654
// for i = 1 to array do
5600: LD_ADDR_VAR 0 4
5604: PUSH
5605: DOUBLE
5606: LD_INT 1
5608: DEC
5609: ST_TO_ADDR
5610: LD_VAR 0 1
5614: PUSH
5615: FOR_TO
5616: IFFALSE 5652
// if value = array [ i ] then
5618: LD_VAR 0 2
5622: PUSH
5623: LD_VAR 0 1
5627: PUSH
5628: LD_VAR 0 4
5632: ARRAY
5633: EQUAL
5634: IFFALSE 5650
// begin result := i ;
5636: LD_ADDR_VAR 0 3
5640: PUSH
5641: LD_VAR 0 4
5645: ST_TO_ADDR
// exit ;
5646: POP
5647: POP
5648: GO 5654
// end ;
5650: GO 5615
5652: POP
5653: POP
// end ;
5654: LD_VAR 0 3
5658: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5659: LD_INT 0
5661: PPUSH
// vc_chassis := chassis ;
5662: LD_ADDR_OWVAR 37
5666: PUSH
5667: LD_VAR 0 1
5671: ST_TO_ADDR
// vc_engine := engine ;
5672: LD_ADDR_OWVAR 39
5676: PUSH
5677: LD_VAR 0 2
5681: ST_TO_ADDR
// vc_control := control ;
5682: LD_ADDR_OWVAR 38
5686: PUSH
5687: LD_VAR 0 3
5691: ST_TO_ADDR
// vc_weapon := weapon ;
5692: LD_ADDR_OWVAR 40
5696: PUSH
5697: LD_VAR 0 4
5701: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5702: LD_ADDR_OWVAR 41
5706: PUSH
5707: LD_VAR 0 5
5711: ST_TO_ADDR
// end ;
5712: LD_VAR 0 6
5716: RET
// export function WantPlant ( unit ) ; var task ; begin
5717: LD_INT 0
5719: PPUSH
5720: PPUSH
// result := false ;
5721: LD_ADDR_VAR 0 2
5725: PUSH
5726: LD_INT 0
5728: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5729: LD_ADDR_VAR 0 3
5733: PUSH
5734: LD_VAR 0 1
5738: PPUSH
5739: CALL_OW 437
5743: ST_TO_ADDR
// if task then
5744: LD_VAR 0 3
5748: IFFALSE 5776
// if task [ 1 ] [ 1 ] = p then
5750: LD_VAR 0 3
5754: PUSH
5755: LD_INT 1
5757: ARRAY
5758: PUSH
5759: LD_INT 1
5761: ARRAY
5762: PUSH
5763: LD_STRING p
5765: EQUAL
5766: IFFALSE 5776
// result := true ;
5768: LD_ADDR_VAR 0 2
5772: PUSH
5773: LD_INT 1
5775: ST_TO_ADDR
// end ;
5776: LD_VAR 0 2
5780: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5781: LD_INT 0
5783: PPUSH
5784: PPUSH
5785: PPUSH
5786: PPUSH
// if pos < 1 then
5787: LD_VAR 0 2
5791: PUSH
5792: LD_INT 1
5794: LESS
5795: IFFALSE 5799
// exit ;
5797: GO 6102
// if pos = 1 then
5799: LD_VAR 0 2
5803: PUSH
5804: LD_INT 1
5806: EQUAL
5807: IFFALSE 5840
// result := Replace ( arr , pos [ 1 ] , value ) else
5809: LD_ADDR_VAR 0 4
5813: PUSH
5814: LD_VAR 0 1
5818: PPUSH
5819: LD_VAR 0 2
5823: PUSH
5824: LD_INT 1
5826: ARRAY
5827: PPUSH
5828: LD_VAR 0 3
5832: PPUSH
5833: CALL_OW 1
5837: ST_TO_ADDR
5838: GO 6102
// begin tmp := arr ;
5840: LD_ADDR_VAR 0 6
5844: PUSH
5845: LD_VAR 0 1
5849: ST_TO_ADDR
// s_arr := [ tmp ] ;
5850: LD_ADDR_VAR 0 7
5854: PUSH
5855: LD_VAR 0 6
5859: PUSH
5860: EMPTY
5861: LIST
5862: ST_TO_ADDR
// for i = 1 to pos - 1 do
5863: LD_ADDR_VAR 0 5
5867: PUSH
5868: DOUBLE
5869: LD_INT 1
5871: DEC
5872: ST_TO_ADDR
5873: LD_VAR 0 2
5877: PUSH
5878: LD_INT 1
5880: MINUS
5881: PUSH
5882: FOR_TO
5883: IFFALSE 5928
// begin tmp := tmp [ pos [ i ] ] ;
5885: LD_ADDR_VAR 0 6
5889: PUSH
5890: LD_VAR 0 6
5894: PUSH
5895: LD_VAR 0 2
5899: PUSH
5900: LD_VAR 0 5
5904: ARRAY
5905: ARRAY
5906: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5907: LD_ADDR_VAR 0 7
5911: PUSH
5912: LD_VAR 0 7
5916: PUSH
5917: LD_VAR 0 6
5921: PUSH
5922: EMPTY
5923: LIST
5924: ADD
5925: ST_TO_ADDR
// end ;
5926: GO 5882
5928: POP
5929: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5930: LD_ADDR_VAR 0 6
5934: PUSH
5935: LD_VAR 0 6
5939: PPUSH
5940: LD_VAR 0 2
5944: PUSH
5945: LD_VAR 0 2
5949: ARRAY
5950: PPUSH
5951: LD_VAR 0 3
5955: PPUSH
5956: CALL_OW 1
5960: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5961: LD_ADDR_VAR 0 7
5965: PUSH
5966: LD_VAR 0 7
5970: PPUSH
5971: LD_VAR 0 7
5975: PPUSH
5976: LD_VAR 0 6
5980: PPUSH
5981: CALL_OW 1
5985: ST_TO_ADDR
// for i = s_arr downto 2 do
5986: LD_ADDR_VAR 0 5
5990: PUSH
5991: DOUBLE
5992: LD_VAR 0 7
5996: INC
5997: ST_TO_ADDR
5998: LD_INT 2
6000: PUSH
6001: FOR_DOWNTO
6002: IFFALSE 6086
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6004: LD_ADDR_VAR 0 6
6008: PUSH
6009: LD_VAR 0 7
6013: PUSH
6014: LD_VAR 0 5
6018: PUSH
6019: LD_INT 1
6021: MINUS
6022: ARRAY
6023: PPUSH
6024: LD_VAR 0 2
6028: PUSH
6029: LD_VAR 0 5
6033: PUSH
6034: LD_INT 1
6036: MINUS
6037: ARRAY
6038: PPUSH
6039: LD_VAR 0 7
6043: PUSH
6044: LD_VAR 0 5
6048: ARRAY
6049: PPUSH
6050: CALL_OW 1
6054: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6055: LD_ADDR_VAR 0 7
6059: PUSH
6060: LD_VAR 0 7
6064: PPUSH
6065: LD_VAR 0 5
6069: PUSH
6070: LD_INT 1
6072: MINUS
6073: PPUSH
6074: LD_VAR 0 6
6078: PPUSH
6079: CALL_OW 1
6083: ST_TO_ADDR
// end ;
6084: GO 6001
6086: POP
6087: POP
// result := s_arr [ 1 ] ;
6088: LD_ADDR_VAR 0 4
6092: PUSH
6093: LD_VAR 0 7
6097: PUSH
6098: LD_INT 1
6100: ARRAY
6101: ST_TO_ADDR
// end ; end ;
6102: LD_VAR 0 4
6106: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6107: LD_INT 0
6109: PPUSH
6110: PPUSH
// if not list then
6111: LD_VAR 0 1
6115: NOT
6116: IFFALSE 6120
// exit ;
6118: GO 6211
// i := list [ pos1 ] ;
6120: LD_ADDR_VAR 0 5
6124: PUSH
6125: LD_VAR 0 1
6129: PUSH
6130: LD_VAR 0 2
6134: ARRAY
6135: ST_TO_ADDR
// if not i then
6136: LD_VAR 0 5
6140: NOT
6141: IFFALSE 6145
// exit ;
6143: GO 6211
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6145: LD_ADDR_VAR 0 1
6149: PUSH
6150: LD_VAR 0 1
6154: PPUSH
6155: LD_VAR 0 2
6159: PPUSH
6160: LD_VAR 0 1
6164: PUSH
6165: LD_VAR 0 3
6169: ARRAY
6170: PPUSH
6171: CALL_OW 1
6175: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6176: LD_ADDR_VAR 0 1
6180: PUSH
6181: LD_VAR 0 1
6185: PPUSH
6186: LD_VAR 0 3
6190: PPUSH
6191: LD_VAR 0 5
6195: PPUSH
6196: CALL_OW 1
6200: ST_TO_ADDR
// result := list ;
6201: LD_ADDR_VAR 0 4
6205: PUSH
6206: LD_VAR 0 1
6210: ST_TO_ADDR
// end ;
6211: LD_VAR 0 4
6215: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6216: LD_INT 0
6218: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6219: LD_ADDR_VAR 0 5
6223: PUSH
6224: LD_VAR 0 1
6228: PPUSH
6229: CALL_OW 250
6233: PPUSH
6234: LD_VAR 0 1
6238: PPUSH
6239: CALL_OW 251
6243: PPUSH
6244: LD_VAR 0 2
6248: PPUSH
6249: LD_VAR 0 3
6253: PPUSH
6254: LD_VAR 0 4
6258: PPUSH
6259: CALL 6269 0 5
6263: ST_TO_ADDR
// end ;
6264: LD_VAR 0 5
6268: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6269: LD_INT 0
6271: PPUSH
6272: PPUSH
6273: PPUSH
6274: PPUSH
// if not list then
6275: LD_VAR 0 3
6279: NOT
6280: IFFALSE 6284
// exit ;
6282: GO 6672
// result := [ ] ;
6284: LD_ADDR_VAR 0 6
6288: PUSH
6289: EMPTY
6290: ST_TO_ADDR
// for i in list do
6291: LD_ADDR_VAR 0 7
6295: PUSH
6296: LD_VAR 0 3
6300: PUSH
6301: FOR_IN
6302: IFFALSE 6504
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6304: LD_ADDR_VAR 0 9
6308: PUSH
6309: LD_VAR 0 7
6313: PPUSH
6314: LD_VAR 0 1
6318: PPUSH
6319: LD_VAR 0 2
6323: PPUSH
6324: CALL_OW 297
6328: ST_TO_ADDR
// if not result then
6329: LD_VAR 0 6
6333: NOT
6334: IFFALSE 6360
// result := [ [ i , tmp ] ] else
6336: LD_ADDR_VAR 0 6
6340: PUSH
6341: LD_VAR 0 7
6345: PUSH
6346: LD_VAR 0 9
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: PUSH
6355: EMPTY
6356: LIST
6357: ST_TO_ADDR
6358: GO 6502
// begin if result [ result ] [ 2 ] < tmp then
6360: LD_VAR 0 6
6364: PUSH
6365: LD_VAR 0 6
6369: ARRAY
6370: PUSH
6371: LD_INT 2
6373: ARRAY
6374: PUSH
6375: LD_VAR 0 9
6379: LESS
6380: IFFALSE 6422
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6382: LD_ADDR_VAR 0 6
6386: PUSH
6387: LD_VAR 0 6
6391: PPUSH
6392: LD_VAR 0 6
6396: PUSH
6397: LD_INT 1
6399: PLUS
6400: PPUSH
6401: LD_VAR 0 7
6405: PUSH
6406: LD_VAR 0 9
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PPUSH
6415: CALL_OW 2
6419: ST_TO_ADDR
6420: GO 6502
// for j = 1 to result do
6422: LD_ADDR_VAR 0 8
6426: PUSH
6427: DOUBLE
6428: LD_INT 1
6430: DEC
6431: ST_TO_ADDR
6432: LD_VAR 0 6
6436: PUSH
6437: FOR_TO
6438: IFFALSE 6500
// begin if tmp < result [ j ] [ 2 ] then
6440: LD_VAR 0 9
6444: PUSH
6445: LD_VAR 0 6
6449: PUSH
6450: LD_VAR 0 8
6454: ARRAY
6455: PUSH
6456: LD_INT 2
6458: ARRAY
6459: LESS
6460: IFFALSE 6498
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6462: LD_ADDR_VAR 0 6
6466: PUSH
6467: LD_VAR 0 6
6471: PPUSH
6472: LD_VAR 0 8
6476: PPUSH
6477: LD_VAR 0 7
6481: PUSH
6482: LD_VAR 0 9
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PPUSH
6491: CALL_OW 2
6495: ST_TO_ADDR
// break ;
6496: GO 6500
// end ; end ;
6498: GO 6437
6500: POP
6501: POP
// end ; end ;
6502: GO 6301
6504: POP
6505: POP
// if result and not asc then
6506: LD_VAR 0 6
6510: PUSH
6511: LD_VAR 0 4
6515: NOT
6516: AND
6517: IFFALSE 6592
// begin tmp := result ;
6519: LD_ADDR_VAR 0 9
6523: PUSH
6524: LD_VAR 0 6
6528: ST_TO_ADDR
// for i = tmp downto 1 do
6529: LD_ADDR_VAR 0 7
6533: PUSH
6534: DOUBLE
6535: LD_VAR 0 9
6539: INC
6540: ST_TO_ADDR
6541: LD_INT 1
6543: PUSH
6544: FOR_DOWNTO
6545: IFFALSE 6590
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6547: LD_ADDR_VAR 0 6
6551: PUSH
6552: LD_VAR 0 6
6556: PPUSH
6557: LD_VAR 0 9
6561: PUSH
6562: LD_VAR 0 7
6566: MINUS
6567: PUSH
6568: LD_INT 1
6570: PLUS
6571: PPUSH
6572: LD_VAR 0 9
6576: PUSH
6577: LD_VAR 0 7
6581: ARRAY
6582: PPUSH
6583: CALL_OW 1
6587: ST_TO_ADDR
6588: GO 6544
6590: POP
6591: POP
// end ; tmp := [ ] ;
6592: LD_ADDR_VAR 0 9
6596: PUSH
6597: EMPTY
6598: ST_TO_ADDR
// if mode then
6599: LD_VAR 0 5
6603: IFFALSE 6672
// begin for i = 1 to result do
6605: LD_ADDR_VAR 0 7
6609: PUSH
6610: DOUBLE
6611: LD_INT 1
6613: DEC
6614: ST_TO_ADDR
6615: LD_VAR 0 6
6619: PUSH
6620: FOR_TO
6621: IFFALSE 6660
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6623: LD_ADDR_VAR 0 9
6627: PUSH
6628: LD_VAR 0 9
6632: PPUSH
6633: LD_VAR 0 7
6637: PPUSH
6638: LD_VAR 0 6
6642: PUSH
6643: LD_VAR 0 7
6647: ARRAY
6648: PUSH
6649: LD_INT 1
6651: ARRAY
6652: PPUSH
6653: CALL_OW 1
6657: ST_TO_ADDR
6658: GO 6620
6660: POP
6661: POP
// result := tmp ;
6662: LD_ADDR_VAR 0 6
6666: PUSH
6667: LD_VAR 0 9
6671: ST_TO_ADDR
// end ; end ;
6672: LD_VAR 0 6
6676: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6677: LD_INT 0
6679: PPUSH
6680: PPUSH
6681: PPUSH
6682: PPUSH
6683: PPUSH
6684: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6685: LD_ADDR_VAR 0 5
6689: PUSH
6690: LD_INT 0
6692: PUSH
6693: LD_INT 0
6695: PUSH
6696: LD_INT 0
6698: PUSH
6699: EMPTY
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: ST_TO_ADDR
// if not x or not y then
6707: LD_VAR 0 2
6711: NOT
6712: PUSH
6713: LD_VAR 0 3
6717: NOT
6718: OR
6719: IFFALSE 6723
// exit ;
6721: GO 8375
// if not range then
6723: LD_VAR 0 4
6727: NOT
6728: IFFALSE 6738
// range := 10 ;
6730: LD_ADDR_VAR 0 4
6734: PUSH
6735: LD_INT 10
6737: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6738: LD_ADDR_VAR 0 8
6742: PUSH
6743: LD_INT 81
6745: PUSH
6746: LD_VAR 0 1
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: LD_INT 92
6757: PUSH
6758: LD_VAR 0 2
6762: PUSH
6763: LD_VAR 0 3
6767: PUSH
6768: LD_VAR 0 4
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: PUSH
6779: LD_INT 3
6781: PUSH
6782: LD_INT 21
6784: PUSH
6785: LD_INT 3
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PPUSH
6801: CALL_OW 69
6805: ST_TO_ADDR
// if not tmp then
6806: LD_VAR 0 8
6810: NOT
6811: IFFALSE 6815
// exit ;
6813: GO 8375
// for i in tmp do
6815: LD_ADDR_VAR 0 6
6819: PUSH
6820: LD_VAR 0 8
6824: PUSH
6825: FOR_IN
6826: IFFALSE 8350
// begin points := [ 0 , 0 , 0 ] ;
6828: LD_ADDR_VAR 0 9
6832: PUSH
6833: LD_INT 0
6835: PUSH
6836: LD_INT 0
6838: PUSH
6839: LD_INT 0
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: LIST
6846: ST_TO_ADDR
// bpoints := 1 ;
6847: LD_ADDR_VAR 0 10
6851: PUSH
6852: LD_INT 1
6854: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6855: LD_VAR 0 6
6859: PPUSH
6860: CALL_OW 247
6864: PUSH
6865: LD_INT 1
6867: DOUBLE
6868: EQUAL
6869: IFTRUE 6873
6871: GO 7451
6873: POP
// begin if GetClass ( i ) = 1 then
6874: LD_VAR 0 6
6878: PPUSH
6879: CALL_OW 257
6883: PUSH
6884: LD_INT 1
6886: EQUAL
6887: IFFALSE 6908
// points := [ 10 , 5 , 3 ] ;
6889: LD_ADDR_VAR 0 9
6893: PUSH
6894: LD_INT 10
6896: PUSH
6897: LD_INT 5
6899: PUSH
6900: LD_INT 3
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: LIST
6907: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6908: LD_VAR 0 6
6912: PPUSH
6913: CALL_OW 257
6917: PUSH
6918: LD_INT 2
6920: PUSH
6921: LD_INT 3
6923: PUSH
6924: LD_INT 4
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: LIST
6931: IN
6932: IFFALSE 6953
// points := [ 3 , 2 , 1 ] ;
6934: LD_ADDR_VAR 0 9
6938: PUSH
6939: LD_INT 3
6941: PUSH
6942: LD_INT 2
6944: PUSH
6945: LD_INT 1
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: LIST
6952: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6953: LD_VAR 0 6
6957: PPUSH
6958: CALL_OW 257
6962: PUSH
6963: LD_INT 5
6965: EQUAL
6966: IFFALSE 6987
// points := [ 130 , 5 , 2 ] ;
6968: LD_ADDR_VAR 0 9
6972: PUSH
6973: LD_INT 130
6975: PUSH
6976: LD_INT 5
6978: PUSH
6979: LD_INT 2
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: LIST
6986: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6987: LD_VAR 0 6
6991: PPUSH
6992: CALL_OW 257
6996: PUSH
6997: LD_INT 8
6999: EQUAL
7000: IFFALSE 7021
// points := [ 35 , 35 , 30 ] ;
7002: LD_ADDR_VAR 0 9
7006: PUSH
7007: LD_INT 35
7009: PUSH
7010: LD_INT 35
7012: PUSH
7013: LD_INT 30
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: LIST
7020: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7021: LD_VAR 0 6
7025: PPUSH
7026: CALL_OW 257
7030: PUSH
7031: LD_INT 9
7033: EQUAL
7034: IFFALSE 7055
// points := [ 20 , 55 , 40 ] ;
7036: LD_ADDR_VAR 0 9
7040: PUSH
7041: LD_INT 20
7043: PUSH
7044: LD_INT 55
7046: PUSH
7047: LD_INT 40
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7055: LD_VAR 0 6
7059: PPUSH
7060: CALL_OW 257
7064: PUSH
7065: LD_INT 12
7067: PUSH
7068: LD_INT 16
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: IN
7075: IFFALSE 7096
// points := [ 5 , 3 , 2 ] ;
7077: LD_ADDR_VAR 0 9
7081: PUSH
7082: LD_INT 5
7084: PUSH
7085: LD_INT 3
7087: PUSH
7088: LD_INT 2
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: LIST
7095: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7096: LD_VAR 0 6
7100: PPUSH
7101: CALL_OW 257
7105: PUSH
7106: LD_INT 17
7108: EQUAL
7109: IFFALSE 7130
// points := [ 100 , 50 , 75 ] ;
7111: LD_ADDR_VAR 0 9
7115: PUSH
7116: LD_INT 100
7118: PUSH
7119: LD_INT 50
7121: PUSH
7122: LD_INT 75
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: LIST
7129: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7130: LD_VAR 0 6
7134: PPUSH
7135: CALL_OW 257
7139: PUSH
7140: LD_INT 15
7142: EQUAL
7143: IFFALSE 7164
// points := [ 10 , 5 , 3 ] ;
7145: LD_ADDR_VAR 0 9
7149: PUSH
7150: LD_INT 10
7152: PUSH
7153: LD_INT 5
7155: PUSH
7156: LD_INT 3
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: LIST
7163: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7164: LD_VAR 0 6
7168: PPUSH
7169: CALL_OW 257
7173: PUSH
7174: LD_INT 14
7176: EQUAL
7177: IFFALSE 7198
// points := [ 10 , 0 , 0 ] ;
7179: LD_ADDR_VAR 0 9
7183: PUSH
7184: LD_INT 10
7186: PUSH
7187: LD_INT 0
7189: PUSH
7190: LD_INT 0
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7198: LD_VAR 0 6
7202: PPUSH
7203: CALL_OW 257
7207: PUSH
7208: LD_INT 11
7210: EQUAL
7211: IFFALSE 7232
// points := [ 30 , 10 , 5 ] ;
7213: LD_ADDR_VAR 0 9
7217: PUSH
7218: LD_INT 30
7220: PUSH
7221: LD_INT 10
7223: PUSH
7224: LD_INT 5
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: LIST
7231: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7232: LD_VAR 0 1
7236: PPUSH
7237: LD_INT 5
7239: PPUSH
7240: CALL_OW 321
7244: PUSH
7245: LD_INT 2
7247: EQUAL
7248: IFFALSE 7265
// bpoints := bpoints * 1.8 ;
7250: LD_ADDR_VAR 0 10
7254: PUSH
7255: LD_VAR 0 10
7259: PUSH
7260: LD_REAL  1.80000000000000E+0000
7263: MUL
7264: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7265: LD_VAR 0 6
7269: PPUSH
7270: CALL_OW 257
7274: PUSH
7275: LD_INT 1
7277: PUSH
7278: LD_INT 2
7280: PUSH
7281: LD_INT 3
7283: PUSH
7284: LD_INT 4
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: IN
7293: PUSH
7294: LD_VAR 0 1
7298: PPUSH
7299: LD_INT 51
7301: PPUSH
7302: CALL_OW 321
7306: PUSH
7307: LD_INT 2
7309: EQUAL
7310: AND
7311: IFFALSE 7328
// bpoints := bpoints * 1.2 ;
7313: LD_ADDR_VAR 0 10
7317: PUSH
7318: LD_VAR 0 10
7322: PUSH
7323: LD_REAL  1.20000000000000E+0000
7326: MUL
7327: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7328: LD_VAR 0 6
7332: PPUSH
7333: CALL_OW 257
7337: PUSH
7338: LD_INT 5
7340: PUSH
7341: LD_INT 7
7343: PUSH
7344: LD_INT 9
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: IN
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: LD_INT 52
7360: PPUSH
7361: CALL_OW 321
7365: PUSH
7366: LD_INT 2
7368: EQUAL
7369: AND
7370: IFFALSE 7387
// bpoints := bpoints * 1.5 ;
7372: LD_ADDR_VAR 0 10
7376: PUSH
7377: LD_VAR 0 10
7381: PUSH
7382: LD_REAL  1.50000000000000E+0000
7385: MUL
7386: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7387: LD_VAR 0 1
7391: PPUSH
7392: LD_INT 66
7394: PPUSH
7395: CALL_OW 321
7399: PUSH
7400: LD_INT 2
7402: EQUAL
7403: IFFALSE 7420
// bpoints := bpoints * 1.1 ;
7405: LD_ADDR_VAR 0 10
7409: PUSH
7410: LD_VAR 0 10
7414: PUSH
7415: LD_REAL  1.10000000000000E+0000
7418: MUL
7419: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7420: LD_ADDR_VAR 0 10
7424: PUSH
7425: LD_VAR 0 10
7429: PUSH
7430: LD_VAR 0 6
7434: PPUSH
7435: LD_INT 1
7437: PPUSH
7438: CALL_OW 259
7442: PUSH
7443: LD_REAL  1.15000000000000E+0000
7446: MUL
7447: MUL
7448: ST_TO_ADDR
// end ; unit_vehicle :
7449: GO 8279
7451: LD_INT 2
7453: DOUBLE
7454: EQUAL
7455: IFTRUE 7459
7457: GO 8267
7459: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7460: LD_VAR 0 6
7464: PPUSH
7465: CALL_OW 264
7469: PUSH
7470: LD_INT 2
7472: PUSH
7473: LD_INT 42
7475: PUSH
7476: LD_INT 24
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: IN
7484: IFFALSE 7505
// points := [ 25 , 5 , 3 ] ;
7486: LD_ADDR_VAR 0 9
7490: PUSH
7491: LD_INT 25
7493: PUSH
7494: LD_INT 5
7496: PUSH
7497: LD_INT 3
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: LIST
7504: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7505: LD_VAR 0 6
7509: PPUSH
7510: CALL_OW 264
7514: PUSH
7515: LD_INT 4
7517: PUSH
7518: LD_INT 43
7520: PUSH
7521: LD_INT 25
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: LIST
7528: IN
7529: IFFALSE 7550
// points := [ 40 , 15 , 5 ] ;
7531: LD_ADDR_VAR 0 9
7535: PUSH
7536: LD_INT 40
7538: PUSH
7539: LD_INT 15
7541: PUSH
7542: LD_INT 5
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7550: LD_VAR 0 6
7554: PPUSH
7555: CALL_OW 264
7559: PUSH
7560: LD_INT 3
7562: PUSH
7563: LD_INT 23
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: IN
7570: IFFALSE 7591
// points := [ 7 , 25 , 8 ] ;
7572: LD_ADDR_VAR 0 9
7576: PUSH
7577: LD_INT 7
7579: PUSH
7580: LD_INT 25
7582: PUSH
7583: LD_INT 8
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: LIST
7590: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 264
7600: PUSH
7601: LD_INT 5
7603: PUSH
7604: LD_INT 27
7606: PUSH
7607: LD_INT 44
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: LIST
7614: IN
7615: IFFALSE 7636
// points := [ 14 , 50 , 16 ] ;
7617: LD_ADDR_VAR 0 9
7621: PUSH
7622: LD_INT 14
7624: PUSH
7625: LD_INT 50
7627: PUSH
7628: LD_INT 16
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7636: LD_VAR 0 6
7640: PPUSH
7641: CALL_OW 264
7645: PUSH
7646: LD_INT 6
7648: PUSH
7649: LD_INT 46
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: IN
7656: IFFALSE 7677
// points := [ 32 , 120 , 70 ] ;
7658: LD_ADDR_VAR 0 9
7662: PUSH
7663: LD_INT 32
7665: PUSH
7666: LD_INT 120
7668: PUSH
7669: LD_INT 70
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: LIST
7676: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7677: LD_VAR 0 6
7681: PPUSH
7682: CALL_OW 264
7686: PUSH
7687: LD_INT 7
7689: PUSH
7690: LD_INT 28
7692: PUSH
7693: LD_INT 45
7695: PUSH
7696: LD_EXP 21
7700: PUSH
7701: EMPTY
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: IN
7707: IFFALSE 7728
// points := [ 35 , 20 , 45 ] ;
7709: LD_ADDR_VAR 0 9
7713: PUSH
7714: LD_INT 35
7716: PUSH
7717: LD_INT 20
7719: PUSH
7720: LD_INT 45
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: LIST
7727: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7728: LD_VAR 0 6
7732: PPUSH
7733: CALL_OW 264
7737: PUSH
7738: LD_INT 47
7740: PUSH
7741: EMPTY
7742: LIST
7743: IN
7744: IFFALSE 7765
// points := [ 67 , 45 , 75 ] ;
7746: LD_ADDR_VAR 0 9
7750: PUSH
7751: LD_INT 67
7753: PUSH
7754: LD_INT 45
7756: PUSH
7757: LD_INT 75
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: LIST
7764: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7765: LD_VAR 0 6
7769: PPUSH
7770: CALL_OW 264
7774: PUSH
7775: LD_INT 26
7777: PUSH
7778: EMPTY
7779: LIST
7780: IN
7781: IFFALSE 7802
// points := [ 120 , 30 , 80 ] ;
7783: LD_ADDR_VAR 0 9
7787: PUSH
7788: LD_INT 120
7790: PUSH
7791: LD_INT 30
7793: PUSH
7794: LD_INT 80
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: LIST
7801: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7802: LD_VAR 0 6
7806: PPUSH
7807: CALL_OW 264
7811: PUSH
7812: LD_INT 22
7814: PUSH
7815: EMPTY
7816: LIST
7817: IN
7818: IFFALSE 7839
// points := [ 40 , 1 , 1 ] ;
7820: LD_ADDR_VAR 0 9
7824: PUSH
7825: LD_INT 40
7827: PUSH
7828: LD_INT 1
7830: PUSH
7831: LD_INT 1
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: LIST
7838: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7839: LD_VAR 0 6
7843: PPUSH
7844: CALL_OW 264
7848: PUSH
7849: LD_INT 29
7851: PUSH
7852: EMPTY
7853: LIST
7854: IN
7855: IFFALSE 7876
// points := [ 70 , 200 , 400 ] ;
7857: LD_ADDR_VAR 0 9
7861: PUSH
7862: LD_INT 70
7864: PUSH
7865: LD_INT 200
7867: PUSH
7868: LD_INT 400
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: LIST
7875: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7876: LD_VAR 0 6
7880: PPUSH
7881: CALL_OW 264
7885: PUSH
7886: LD_INT 14
7888: PUSH
7889: LD_INT 53
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: IN
7896: IFFALSE 7917
// points := [ 40 , 10 , 20 ] ;
7898: LD_ADDR_VAR 0 9
7902: PUSH
7903: LD_INT 40
7905: PUSH
7906: LD_INT 10
7908: PUSH
7909: LD_INT 20
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: LIST
7916: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7917: LD_VAR 0 6
7921: PPUSH
7922: CALL_OW 264
7926: PUSH
7927: LD_INT 9
7929: PUSH
7930: EMPTY
7931: LIST
7932: IN
7933: IFFALSE 7954
// points := [ 5 , 70 , 20 ] ;
7935: LD_ADDR_VAR 0 9
7939: PUSH
7940: LD_INT 5
7942: PUSH
7943: LD_INT 70
7945: PUSH
7946: LD_INT 20
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: LIST
7953: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7954: LD_VAR 0 6
7958: PPUSH
7959: CALL_OW 264
7963: PUSH
7964: LD_INT 10
7966: PUSH
7967: EMPTY
7968: LIST
7969: IN
7970: IFFALSE 7991
// points := [ 35 , 110 , 70 ] ;
7972: LD_ADDR_VAR 0 9
7976: PUSH
7977: LD_INT 35
7979: PUSH
7980: LD_INT 110
7982: PUSH
7983: LD_INT 70
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: LIST
7990: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7991: LD_VAR 0 6
7995: PPUSH
7996: CALL_OW 265
8000: PUSH
8001: LD_INT 25
8003: EQUAL
8004: IFFALSE 8025
// points := [ 80 , 65 , 100 ] ;
8006: LD_ADDR_VAR 0 9
8010: PUSH
8011: LD_INT 80
8013: PUSH
8014: LD_INT 65
8016: PUSH
8017: LD_INT 100
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: LIST
8024: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8025: LD_VAR 0 6
8029: PPUSH
8030: CALL_OW 263
8034: PUSH
8035: LD_INT 1
8037: EQUAL
8038: IFFALSE 8073
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8040: LD_ADDR_VAR 0 10
8044: PUSH
8045: LD_VAR 0 10
8049: PUSH
8050: LD_VAR 0 6
8054: PPUSH
8055: CALL_OW 311
8059: PPUSH
8060: LD_INT 3
8062: PPUSH
8063: CALL_OW 259
8067: PUSH
8068: LD_INT 4
8070: MUL
8071: MUL
8072: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8073: LD_VAR 0 6
8077: PPUSH
8078: CALL_OW 263
8082: PUSH
8083: LD_INT 2
8085: EQUAL
8086: IFFALSE 8137
// begin j := IsControledBy ( i ) ;
8088: LD_ADDR_VAR 0 7
8092: PUSH
8093: LD_VAR 0 6
8097: PPUSH
8098: CALL_OW 312
8102: ST_TO_ADDR
// if j then
8103: LD_VAR 0 7
8107: IFFALSE 8137
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8109: LD_ADDR_VAR 0 10
8113: PUSH
8114: LD_VAR 0 10
8118: PUSH
8119: LD_VAR 0 7
8123: PPUSH
8124: LD_INT 3
8126: PPUSH
8127: CALL_OW 259
8131: PUSH
8132: LD_INT 3
8134: MUL
8135: MUL
8136: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8137: LD_VAR 0 6
8141: PPUSH
8142: CALL_OW 264
8146: PUSH
8147: LD_INT 5
8149: PUSH
8150: LD_INT 6
8152: PUSH
8153: LD_INT 46
8155: PUSH
8156: LD_INT 44
8158: PUSH
8159: LD_INT 47
8161: PUSH
8162: LD_INT 45
8164: PUSH
8165: LD_INT 28
8167: PUSH
8168: LD_INT 7
8170: PUSH
8171: LD_INT 27
8173: PUSH
8174: LD_INT 29
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: IN
8189: PUSH
8190: LD_VAR 0 1
8194: PPUSH
8195: LD_INT 52
8197: PPUSH
8198: CALL_OW 321
8202: PUSH
8203: LD_INT 2
8205: EQUAL
8206: AND
8207: IFFALSE 8224
// bpoints := bpoints * 1.2 ;
8209: LD_ADDR_VAR 0 10
8213: PUSH
8214: LD_VAR 0 10
8218: PUSH
8219: LD_REAL  1.20000000000000E+0000
8222: MUL
8223: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8224: LD_VAR 0 6
8228: PPUSH
8229: CALL_OW 264
8233: PUSH
8234: LD_INT 6
8236: PUSH
8237: LD_INT 46
8239: PUSH
8240: LD_INT 47
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: LIST
8247: IN
8248: IFFALSE 8265
// bpoints := bpoints * 1.2 ;
8250: LD_ADDR_VAR 0 10
8254: PUSH
8255: LD_VAR 0 10
8259: PUSH
8260: LD_REAL  1.20000000000000E+0000
8263: MUL
8264: ST_TO_ADDR
// end ; unit_building :
8265: GO 8279
8267: LD_INT 3
8269: DOUBLE
8270: EQUAL
8271: IFTRUE 8275
8273: GO 8278
8275: POP
// ; end ;
8276: GO 8279
8278: POP
// for j = 1 to 3 do
8279: LD_ADDR_VAR 0 7
8283: PUSH
8284: DOUBLE
8285: LD_INT 1
8287: DEC
8288: ST_TO_ADDR
8289: LD_INT 3
8291: PUSH
8292: FOR_TO
8293: IFFALSE 8346
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8295: LD_ADDR_VAR 0 5
8299: PUSH
8300: LD_VAR 0 5
8304: PPUSH
8305: LD_VAR 0 7
8309: PPUSH
8310: LD_VAR 0 5
8314: PUSH
8315: LD_VAR 0 7
8319: ARRAY
8320: PUSH
8321: LD_VAR 0 9
8325: PUSH
8326: LD_VAR 0 7
8330: ARRAY
8331: PUSH
8332: LD_VAR 0 10
8336: MUL
8337: PLUS
8338: PPUSH
8339: CALL_OW 1
8343: ST_TO_ADDR
8344: GO 8292
8346: POP
8347: POP
// end ;
8348: GO 6825
8350: POP
8351: POP
// result := Replace ( result , 4 , tmp ) ;
8352: LD_ADDR_VAR 0 5
8356: PUSH
8357: LD_VAR 0 5
8361: PPUSH
8362: LD_INT 4
8364: PPUSH
8365: LD_VAR 0 8
8369: PPUSH
8370: CALL_OW 1
8374: ST_TO_ADDR
// end ;
8375: LD_VAR 0 5
8379: RET
// export function DangerAtRange ( unit , range ) ; begin
8380: LD_INT 0
8382: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8383: LD_ADDR_VAR 0 3
8387: PUSH
8388: LD_VAR 0 1
8392: PPUSH
8393: CALL_OW 255
8397: PPUSH
8398: LD_VAR 0 1
8402: PPUSH
8403: CALL_OW 250
8407: PPUSH
8408: LD_VAR 0 1
8412: PPUSH
8413: CALL_OW 251
8417: PPUSH
8418: LD_VAR 0 2
8422: PPUSH
8423: CALL 6677 0 4
8427: ST_TO_ADDR
// end ;
8428: LD_VAR 0 3
8432: RET
// export function DangerInArea ( side , area ) ; begin
8433: LD_INT 0
8435: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8436: LD_ADDR_VAR 0 3
8440: PUSH
8441: LD_VAR 0 2
8445: PPUSH
8446: LD_INT 81
8448: PUSH
8449: LD_VAR 0 1
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PPUSH
8458: CALL_OW 70
8462: ST_TO_ADDR
// end ;
8463: LD_VAR 0 3
8467: RET
// export function IsExtension ( b ) ; begin
8468: LD_INT 0
8470: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8471: LD_ADDR_VAR 0 2
8475: PUSH
8476: LD_VAR 0 1
8480: PUSH
8481: LD_INT 23
8483: PUSH
8484: LD_INT 20
8486: PUSH
8487: LD_INT 22
8489: PUSH
8490: LD_INT 17
8492: PUSH
8493: LD_INT 24
8495: PUSH
8496: LD_INT 21
8498: PUSH
8499: LD_INT 19
8501: PUSH
8502: LD_INT 16
8504: PUSH
8505: LD_INT 25
8507: PUSH
8508: LD_INT 18
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: IN
8523: ST_TO_ADDR
// end ;
8524: LD_VAR 0 2
8528: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8529: LD_INT 0
8531: PPUSH
8532: PPUSH
8533: PPUSH
// result := [ ] ;
8534: LD_ADDR_VAR 0 4
8538: PUSH
8539: EMPTY
8540: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8541: LD_ADDR_VAR 0 5
8545: PUSH
8546: LD_VAR 0 2
8550: PPUSH
8551: LD_INT 21
8553: PUSH
8554: LD_INT 3
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PPUSH
8561: CALL_OW 70
8565: ST_TO_ADDR
// if not tmp then
8566: LD_VAR 0 5
8570: NOT
8571: IFFALSE 8575
// exit ;
8573: GO 8639
// if checkLink then
8575: LD_VAR 0 3
8579: IFFALSE 8629
// begin for i in tmp do
8581: LD_ADDR_VAR 0 6
8585: PUSH
8586: LD_VAR 0 5
8590: PUSH
8591: FOR_IN
8592: IFFALSE 8627
// if GetBase ( i ) <> base then
8594: LD_VAR 0 6
8598: PPUSH
8599: CALL_OW 274
8603: PUSH
8604: LD_VAR 0 1
8608: NONEQUAL
8609: IFFALSE 8625
// ComLinkToBase ( base , i ) ;
8611: LD_VAR 0 1
8615: PPUSH
8616: LD_VAR 0 6
8620: PPUSH
8621: CALL_OW 169
8625: GO 8591
8627: POP
8628: POP
// end ; result := tmp ;
8629: LD_ADDR_VAR 0 4
8633: PUSH
8634: LD_VAR 0 5
8638: ST_TO_ADDR
// end ;
8639: LD_VAR 0 4
8643: RET
// export function ComComplete ( units , b ) ; var i ; begin
8644: LD_INT 0
8646: PPUSH
8647: PPUSH
// if not units then
8648: LD_VAR 0 1
8652: NOT
8653: IFFALSE 8657
// exit ;
8655: GO 8747
// for i in units do
8657: LD_ADDR_VAR 0 4
8661: PUSH
8662: LD_VAR 0 1
8666: PUSH
8667: FOR_IN
8668: IFFALSE 8745
// if BuildingStatus ( b ) = bs_build then
8670: LD_VAR 0 2
8674: PPUSH
8675: CALL_OW 461
8679: PUSH
8680: LD_INT 1
8682: EQUAL
8683: IFFALSE 8743
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8685: LD_VAR 0 4
8689: PPUSH
8690: LD_STRING h
8692: PUSH
8693: LD_VAR 0 2
8697: PPUSH
8698: CALL_OW 250
8702: PUSH
8703: LD_VAR 0 2
8707: PPUSH
8708: CALL_OW 251
8712: PUSH
8713: LD_VAR 0 2
8717: PUSH
8718: LD_INT 0
8720: PUSH
8721: LD_INT 0
8723: PUSH
8724: LD_INT 0
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: PUSH
8736: EMPTY
8737: LIST
8738: PPUSH
8739: CALL_OW 446
8743: GO 8667
8745: POP
8746: POP
// end ;
8747: LD_VAR 0 3
8751: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8752: LD_INT 0
8754: PPUSH
8755: PPUSH
8756: PPUSH
8757: PPUSH
8758: PPUSH
8759: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8760: LD_VAR 0 1
8764: NOT
8765: PUSH
8766: LD_VAR 0 1
8770: PPUSH
8771: CALL_OW 263
8775: PUSH
8776: LD_INT 2
8778: NONEQUAL
8779: OR
8780: IFFALSE 8784
// exit ;
8782: GO 9100
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8784: LD_ADDR_VAR 0 6
8788: PUSH
8789: LD_INT 22
8791: PUSH
8792: LD_VAR 0 1
8796: PPUSH
8797: CALL_OW 255
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PUSH
8806: LD_INT 2
8808: PUSH
8809: LD_INT 30
8811: PUSH
8812: LD_INT 36
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: LD_INT 34
8821: PUSH
8822: LD_INT 31
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: LIST
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: PPUSH
8838: CALL_OW 69
8842: ST_TO_ADDR
// if not tmp then
8843: LD_VAR 0 6
8847: NOT
8848: IFFALSE 8852
// exit ;
8850: GO 9100
// result := [ ] ;
8852: LD_ADDR_VAR 0 2
8856: PUSH
8857: EMPTY
8858: ST_TO_ADDR
// for i in tmp do
8859: LD_ADDR_VAR 0 3
8863: PUSH
8864: LD_VAR 0 6
8868: PUSH
8869: FOR_IN
8870: IFFALSE 8941
// begin t := UnitsInside ( i ) ;
8872: LD_ADDR_VAR 0 4
8876: PUSH
8877: LD_VAR 0 3
8881: PPUSH
8882: CALL_OW 313
8886: ST_TO_ADDR
// if t then
8887: LD_VAR 0 4
8891: IFFALSE 8939
// for j in t do
8893: LD_ADDR_VAR 0 7
8897: PUSH
8898: LD_VAR 0 4
8902: PUSH
8903: FOR_IN
8904: IFFALSE 8937
// result := Replace ( result , result + 1 , j ) ;
8906: LD_ADDR_VAR 0 2
8910: PUSH
8911: LD_VAR 0 2
8915: PPUSH
8916: LD_VAR 0 2
8920: PUSH
8921: LD_INT 1
8923: PLUS
8924: PPUSH
8925: LD_VAR 0 7
8929: PPUSH
8930: CALL_OW 1
8934: ST_TO_ADDR
8935: GO 8903
8937: POP
8938: POP
// end ;
8939: GO 8869
8941: POP
8942: POP
// if not result then
8943: LD_VAR 0 2
8947: NOT
8948: IFFALSE 8952
// exit ;
8950: GO 9100
// mech := result [ 1 ] ;
8952: LD_ADDR_VAR 0 5
8956: PUSH
8957: LD_VAR 0 2
8961: PUSH
8962: LD_INT 1
8964: ARRAY
8965: ST_TO_ADDR
// if result > 1 then
8966: LD_VAR 0 2
8970: PUSH
8971: LD_INT 1
8973: GREATER
8974: IFFALSE 9086
// begin for i = 2 to result do
8976: LD_ADDR_VAR 0 3
8980: PUSH
8981: DOUBLE
8982: LD_INT 2
8984: DEC
8985: ST_TO_ADDR
8986: LD_VAR 0 2
8990: PUSH
8991: FOR_TO
8992: IFFALSE 9084
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8994: LD_ADDR_VAR 0 4
8998: PUSH
8999: LD_VAR 0 2
9003: PUSH
9004: LD_VAR 0 3
9008: ARRAY
9009: PPUSH
9010: LD_INT 3
9012: PPUSH
9013: CALL_OW 259
9017: PUSH
9018: LD_VAR 0 2
9022: PUSH
9023: LD_VAR 0 3
9027: ARRAY
9028: PPUSH
9029: CALL_OW 432
9033: MINUS
9034: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9035: LD_VAR 0 4
9039: PUSH
9040: LD_VAR 0 5
9044: PPUSH
9045: LD_INT 3
9047: PPUSH
9048: CALL_OW 259
9052: PUSH
9053: LD_VAR 0 5
9057: PPUSH
9058: CALL_OW 432
9062: MINUS
9063: GREATEREQUAL
9064: IFFALSE 9082
// mech := result [ i ] ;
9066: LD_ADDR_VAR 0 5
9070: PUSH
9071: LD_VAR 0 2
9075: PUSH
9076: LD_VAR 0 3
9080: ARRAY
9081: ST_TO_ADDR
// end ;
9082: GO 8991
9084: POP
9085: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9086: LD_VAR 0 1
9090: PPUSH
9091: LD_VAR 0 5
9095: PPUSH
9096: CALL_OW 135
// end ;
9100: LD_VAR 0 2
9104: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9105: LD_INT 0
9107: PPUSH
9108: PPUSH
9109: PPUSH
9110: PPUSH
9111: PPUSH
9112: PPUSH
9113: PPUSH
9114: PPUSH
9115: PPUSH
9116: PPUSH
9117: PPUSH
9118: PPUSH
9119: PPUSH
// result := [ ] ;
9120: LD_ADDR_VAR 0 7
9124: PUSH
9125: EMPTY
9126: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9127: LD_VAR 0 1
9131: PPUSH
9132: CALL_OW 266
9136: PUSH
9137: LD_INT 0
9139: PUSH
9140: LD_INT 1
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: IN
9147: NOT
9148: IFFALSE 9152
// exit ;
9150: GO 10786
// if name then
9152: LD_VAR 0 3
9156: IFFALSE 9172
// SetBName ( base_dep , name ) ;
9158: LD_VAR 0 1
9162: PPUSH
9163: LD_VAR 0 3
9167: PPUSH
9168: CALL_OW 500
// base := GetBase ( base_dep ) ;
9172: LD_ADDR_VAR 0 15
9176: PUSH
9177: LD_VAR 0 1
9181: PPUSH
9182: CALL_OW 274
9186: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9187: LD_ADDR_VAR 0 16
9191: PUSH
9192: LD_VAR 0 1
9196: PPUSH
9197: CALL_OW 255
9201: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9202: LD_ADDR_VAR 0 17
9206: PUSH
9207: LD_VAR 0 1
9211: PPUSH
9212: CALL_OW 248
9216: ST_TO_ADDR
// if sources then
9217: LD_VAR 0 5
9221: IFFALSE 9268
// for i = 1 to 3 do
9223: LD_ADDR_VAR 0 8
9227: PUSH
9228: DOUBLE
9229: LD_INT 1
9231: DEC
9232: ST_TO_ADDR
9233: LD_INT 3
9235: PUSH
9236: FOR_TO
9237: IFFALSE 9266
// AddResourceType ( base , i , sources [ i ] ) ;
9239: LD_VAR 0 15
9243: PPUSH
9244: LD_VAR 0 8
9248: PPUSH
9249: LD_VAR 0 5
9253: PUSH
9254: LD_VAR 0 8
9258: ARRAY
9259: PPUSH
9260: CALL_OW 276
9264: GO 9236
9266: POP
9267: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9268: LD_ADDR_VAR 0 18
9272: PUSH
9273: LD_VAR 0 15
9277: PPUSH
9278: LD_VAR 0 2
9282: PPUSH
9283: LD_INT 1
9285: PPUSH
9286: CALL 8529 0 3
9290: ST_TO_ADDR
// InitHc ;
9291: CALL_OW 19
// InitUc ;
9295: CALL_OW 18
// uc_side := side ;
9299: LD_ADDR_OWVAR 20
9303: PUSH
9304: LD_VAR 0 16
9308: ST_TO_ADDR
// uc_nation := nation ;
9309: LD_ADDR_OWVAR 21
9313: PUSH
9314: LD_VAR 0 17
9318: ST_TO_ADDR
// if buildings then
9319: LD_VAR 0 18
9323: IFFALSE 10645
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9325: LD_ADDR_VAR 0 19
9329: PUSH
9330: LD_VAR 0 18
9334: PPUSH
9335: LD_INT 2
9337: PUSH
9338: LD_INT 30
9340: PUSH
9341: LD_INT 29
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: PUSH
9348: LD_INT 30
9350: PUSH
9351: LD_INT 30
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: LIST
9362: PPUSH
9363: CALL_OW 72
9367: ST_TO_ADDR
// if tmp then
9368: LD_VAR 0 19
9372: IFFALSE 9420
// for i in tmp do
9374: LD_ADDR_VAR 0 8
9378: PUSH
9379: LD_VAR 0 19
9383: PUSH
9384: FOR_IN
9385: IFFALSE 9418
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9387: LD_VAR 0 8
9391: PPUSH
9392: CALL_OW 250
9396: PPUSH
9397: LD_VAR 0 8
9401: PPUSH
9402: CALL_OW 251
9406: PPUSH
9407: LD_VAR 0 16
9411: PPUSH
9412: CALL_OW 441
9416: GO 9384
9418: POP
9419: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9420: LD_VAR 0 18
9424: PPUSH
9425: LD_INT 2
9427: PUSH
9428: LD_INT 30
9430: PUSH
9431: LD_INT 32
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PUSH
9438: LD_INT 30
9440: PUSH
9441: LD_INT 33
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: LIST
9452: PPUSH
9453: CALL_OW 72
9457: IFFALSE 9545
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9459: LD_ADDR_VAR 0 8
9463: PUSH
9464: LD_VAR 0 18
9468: PPUSH
9469: LD_INT 2
9471: PUSH
9472: LD_INT 30
9474: PUSH
9475: LD_INT 32
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: PUSH
9482: LD_INT 30
9484: PUSH
9485: LD_INT 33
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: LIST
9496: PPUSH
9497: CALL_OW 72
9501: PUSH
9502: FOR_IN
9503: IFFALSE 9543
// begin if not GetBWeapon ( i ) then
9505: LD_VAR 0 8
9509: PPUSH
9510: CALL_OW 269
9514: NOT
9515: IFFALSE 9541
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9517: LD_VAR 0 8
9521: PPUSH
9522: LD_VAR 0 8
9526: PPUSH
9527: LD_VAR 0 2
9531: PPUSH
9532: CALL 10791 0 2
9536: PPUSH
9537: CALL_OW 431
// end ;
9541: GO 9502
9543: POP
9544: POP
// end ; for i = 1 to personel do
9545: LD_ADDR_VAR 0 8
9549: PUSH
9550: DOUBLE
9551: LD_INT 1
9553: DEC
9554: ST_TO_ADDR
9555: LD_VAR 0 6
9559: PUSH
9560: FOR_TO
9561: IFFALSE 10625
// begin if i > 4 then
9563: LD_VAR 0 8
9567: PUSH
9568: LD_INT 4
9570: GREATER
9571: IFFALSE 9575
// break ;
9573: GO 10625
// case i of 1 :
9575: LD_VAR 0 8
9579: PUSH
9580: LD_INT 1
9582: DOUBLE
9583: EQUAL
9584: IFTRUE 9588
9586: GO 9668
9588: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9589: LD_ADDR_VAR 0 12
9593: PUSH
9594: LD_VAR 0 18
9598: PPUSH
9599: LD_INT 22
9601: PUSH
9602: LD_VAR 0 16
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PUSH
9611: LD_INT 58
9613: PUSH
9614: EMPTY
9615: LIST
9616: PUSH
9617: LD_INT 2
9619: PUSH
9620: LD_INT 30
9622: PUSH
9623: LD_INT 32
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 30
9632: PUSH
9633: LD_INT 4
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: LD_INT 30
9642: PUSH
9643: LD_INT 5
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: LIST
9660: PPUSH
9661: CALL_OW 72
9665: ST_TO_ADDR
9666: GO 9890
9668: LD_INT 2
9670: DOUBLE
9671: EQUAL
9672: IFTRUE 9676
9674: GO 9738
9676: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9677: LD_ADDR_VAR 0 12
9681: PUSH
9682: LD_VAR 0 18
9686: PPUSH
9687: LD_INT 22
9689: PUSH
9690: LD_VAR 0 16
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: PUSH
9699: LD_INT 2
9701: PUSH
9702: LD_INT 30
9704: PUSH
9705: LD_INT 0
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: LD_INT 30
9714: PUSH
9715: LD_INT 1
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PPUSH
9731: CALL_OW 72
9735: ST_TO_ADDR
9736: GO 9890
9738: LD_INT 3
9740: DOUBLE
9741: EQUAL
9742: IFTRUE 9746
9744: GO 9808
9746: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9747: LD_ADDR_VAR 0 12
9751: PUSH
9752: LD_VAR 0 18
9756: PPUSH
9757: LD_INT 22
9759: PUSH
9760: LD_VAR 0 16
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: LD_INT 2
9771: PUSH
9772: LD_INT 30
9774: PUSH
9775: LD_INT 2
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 30
9784: PUSH
9785: LD_INT 3
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 72
9805: ST_TO_ADDR
9806: GO 9890
9808: LD_INT 4
9810: DOUBLE
9811: EQUAL
9812: IFTRUE 9816
9814: GO 9889
9816: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9817: LD_ADDR_VAR 0 12
9821: PUSH
9822: LD_VAR 0 18
9826: PPUSH
9827: LD_INT 22
9829: PUSH
9830: LD_VAR 0 16
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: PUSH
9839: LD_INT 2
9841: PUSH
9842: LD_INT 30
9844: PUSH
9845: LD_INT 6
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: LD_INT 30
9854: PUSH
9855: LD_INT 7
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: LD_INT 30
9864: PUSH
9865: LD_INT 8
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 72
9886: ST_TO_ADDR
9887: GO 9890
9889: POP
// if i = 1 then
9890: LD_VAR 0 8
9894: PUSH
9895: LD_INT 1
9897: EQUAL
9898: IFFALSE 10009
// begin tmp := [ ] ;
9900: LD_ADDR_VAR 0 19
9904: PUSH
9905: EMPTY
9906: ST_TO_ADDR
// for j in f do
9907: LD_ADDR_VAR 0 9
9911: PUSH
9912: LD_VAR 0 12
9916: PUSH
9917: FOR_IN
9918: IFFALSE 9991
// if GetBType ( j ) = b_bunker then
9920: LD_VAR 0 9
9924: PPUSH
9925: CALL_OW 266
9929: PUSH
9930: LD_INT 32
9932: EQUAL
9933: IFFALSE 9960
// tmp := Insert ( tmp , 1 , j ) else
9935: LD_ADDR_VAR 0 19
9939: PUSH
9940: LD_VAR 0 19
9944: PPUSH
9945: LD_INT 1
9947: PPUSH
9948: LD_VAR 0 9
9952: PPUSH
9953: CALL_OW 2
9957: ST_TO_ADDR
9958: GO 9989
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9960: LD_ADDR_VAR 0 19
9964: PUSH
9965: LD_VAR 0 19
9969: PPUSH
9970: LD_VAR 0 19
9974: PUSH
9975: LD_INT 1
9977: PLUS
9978: PPUSH
9979: LD_VAR 0 9
9983: PPUSH
9984: CALL_OW 2
9988: ST_TO_ADDR
9989: GO 9917
9991: POP
9992: POP
// if tmp then
9993: LD_VAR 0 19
9997: IFFALSE 10009
// f := tmp ;
9999: LD_ADDR_VAR 0 12
10003: PUSH
10004: LD_VAR 0 19
10008: ST_TO_ADDR
// end ; x := personel [ i ] ;
10009: LD_ADDR_VAR 0 13
10013: PUSH
10014: LD_VAR 0 6
10018: PUSH
10019: LD_VAR 0 8
10023: ARRAY
10024: ST_TO_ADDR
// if x = - 1 then
10025: LD_VAR 0 13
10029: PUSH
10030: LD_INT 1
10032: NEG
10033: EQUAL
10034: IFFALSE 10243
// begin for j in f do
10036: LD_ADDR_VAR 0 9
10040: PUSH
10041: LD_VAR 0 12
10045: PUSH
10046: FOR_IN
10047: IFFALSE 10239
// repeat InitHc ;
10049: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10053: LD_VAR 0 9
10057: PPUSH
10058: CALL_OW 266
10062: PUSH
10063: LD_INT 5
10065: EQUAL
10066: IFFALSE 10136
// begin if UnitsInside ( j ) < 3 then
10068: LD_VAR 0 9
10072: PPUSH
10073: CALL_OW 313
10077: PUSH
10078: LD_INT 3
10080: LESS
10081: IFFALSE 10117
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10083: LD_INT 0
10085: PPUSH
10086: LD_INT 5
10088: PUSH
10089: LD_INT 8
10091: PUSH
10092: LD_INT 9
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: LIST
10099: PUSH
10100: LD_VAR 0 17
10104: ARRAY
10105: PPUSH
10106: LD_VAR 0 4
10110: PPUSH
10111: CALL_OW 380
10115: GO 10134
// PrepareHuman ( false , i , skill ) ;
10117: LD_INT 0
10119: PPUSH
10120: LD_VAR 0 8
10124: PPUSH
10125: LD_VAR 0 4
10129: PPUSH
10130: CALL_OW 380
// end else
10134: GO 10153
// PrepareHuman ( false , i , skill ) ;
10136: LD_INT 0
10138: PPUSH
10139: LD_VAR 0 8
10143: PPUSH
10144: LD_VAR 0 4
10148: PPUSH
10149: CALL_OW 380
// un := CreateHuman ;
10153: LD_ADDR_VAR 0 14
10157: PUSH
10158: CALL_OW 44
10162: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10163: LD_ADDR_VAR 0 7
10167: PUSH
10168: LD_VAR 0 7
10172: PPUSH
10173: LD_INT 1
10175: PPUSH
10176: LD_VAR 0 14
10180: PPUSH
10181: CALL_OW 2
10185: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10186: LD_VAR 0 14
10190: PPUSH
10191: LD_VAR 0 9
10195: PPUSH
10196: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10200: LD_VAR 0 9
10204: PPUSH
10205: CALL_OW 313
10209: PUSH
10210: LD_INT 6
10212: EQUAL
10213: PUSH
10214: LD_VAR 0 9
10218: PPUSH
10219: CALL_OW 266
10223: PUSH
10224: LD_INT 32
10226: PUSH
10227: LD_INT 31
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: IN
10234: OR
10235: IFFALSE 10049
10237: GO 10046
10239: POP
10240: POP
// end else
10241: GO 10623
// for j = 1 to x do
10243: LD_ADDR_VAR 0 9
10247: PUSH
10248: DOUBLE
10249: LD_INT 1
10251: DEC
10252: ST_TO_ADDR
10253: LD_VAR 0 13
10257: PUSH
10258: FOR_TO
10259: IFFALSE 10621
// begin InitHc ;
10261: CALL_OW 19
// if not f then
10265: LD_VAR 0 12
10269: NOT
10270: IFFALSE 10359
// begin PrepareHuman ( false , i , skill ) ;
10272: LD_INT 0
10274: PPUSH
10275: LD_VAR 0 8
10279: PPUSH
10280: LD_VAR 0 4
10284: PPUSH
10285: CALL_OW 380
// un := CreateHuman ;
10289: LD_ADDR_VAR 0 14
10293: PUSH
10294: CALL_OW 44
10298: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10299: LD_ADDR_VAR 0 7
10303: PUSH
10304: LD_VAR 0 7
10308: PPUSH
10309: LD_INT 1
10311: PPUSH
10312: LD_VAR 0 14
10316: PPUSH
10317: CALL_OW 2
10321: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10322: LD_VAR 0 14
10326: PPUSH
10327: LD_VAR 0 1
10331: PPUSH
10332: CALL_OW 250
10336: PPUSH
10337: LD_VAR 0 1
10341: PPUSH
10342: CALL_OW 251
10346: PPUSH
10347: LD_INT 10
10349: PPUSH
10350: LD_INT 0
10352: PPUSH
10353: CALL_OW 50
// continue ;
10357: GO 10258
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10359: LD_VAR 0 12
10363: PUSH
10364: LD_INT 1
10366: ARRAY
10367: PPUSH
10368: CALL_OW 313
10372: PUSH
10373: LD_VAR 0 12
10377: PUSH
10378: LD_INT 1
10380: ARRAY
10381: PPUSH
10382: CALL_OW 266
10386: PUSH
10387: LD_INT 32
10389: PUSH
10390: LD_INT 31
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: IN
10397: AND
10398: PUSH
10399: LD_VAR 0 12
10403: PUSH
10404: LD_INT 1
10406: ARRAY
10407: PPUSH
10408: CALL_OW 313
10412: PUSH
10413: LD_INT 6
10415: EQUAL
10416: OR
10417: IFFALSE 10437
// f := Delete ( f , 1 ) ;
10419: LD_ADDR_VAR 0 12
10423: PUSH
10424: LD_VAR 0 12
10428: PPUSH
10429: LD_INT 1
10431: PPUSH
10432: CALL_OW 3
10436: ST_TO_ADDR
// if not f then
10437: LD_VAR 0 12
10441: NOT
10442: IFFALSE 10460
// begin x := x + 2 ;
10444: LD_ADDR_VAR 0 13
10448: PUSH
10449: LD_VAR 0 13
10453: PUSH
10454: LD_INT 2
10456: PLUS
10457: ST_TO_ADDR
// continue ;
10458: GO 10258
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10460: LD_VAR 0 12
10464: PUSH
10465: LD_INT 1
10467: ARRAY
10468: PPUSH
10469: CALL_OW 266
10473: PUSH
10474: LD_INT 5
10476: EQUAL
10477: IFFALSE 10551
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10479: LD_VAR 0 12
10483: PUSH
10484: LD_INT 1
10486: ARRAY
10487: PPUSH
10488: CALL_OW 313
10492: PUSH
10493: LD_INT 3
10495: LESS
10496: IFFALSE 10532
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10498: LD_INT 0
10500: PPUSH
10501: LD_INT 5
10503: PUSH
10504: LD_INT 8
10506: PUSH
10507: LD_INT 9
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: LIST
10514: PUSH
10515: LD_VAR 0 17
10519: ARRAY
10520: PPUSH
10521: LD_VAR 0 4
10525: PPUSH
10526: CALL_OW 380
10530: GO 10549
// PrepareHuman ( false , i , skill ) ;
10532: LD_INT 0
10534: PPUSH
10535: LD_VAR 0 8
10539: PPUSH
10540: LD_VAR 0 4
10544: PPUSH
10545: CALL_OW 380
// end else
10549: GO 10568
// PrepareHuman ( false , i , skill ) ;
10551: LD_INT 0
10553: PPUSH
10554: LD_VAR 0 8
10558: PPUSH
10559: LD_VAR 0 4
10563: PPUSH
10564: CALL_OW 380
// un := CreateHuman ;
10568: LD_ADDR_VAR 0 14
10572: PUSH
10573: CALL_OW 44
10577: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10578: LD_ADDR_VAR 0 7
10582: PUSH
10583: LD_VAR 0 7
10587: PPUSH
10588: LD_INT 1
10590: PPUSH
10591: LD_VAR 0 14
10595: PPUSH
10596: CALL_OW 2
10600: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10601: LD_VAR 0 14
10605: PPUSH
10606: LD_VAR 0 12
10610: PUSH
10611: LD_INT 1
10613: ARRAY
10614: PPUSH
10615: CALL_OW 52
// end ;
10619: GO 10258
10621: POP
10622: POP
// end ;
10623: GO 9560
10625: POP
10626: POP
// result := result ^ buildings ;
10627: LD_ADDR_VAR 0 7
10631: PUSH
10632: LD_VAR 0 7
10636: PUSH
10637: LD_VAR 0 18
10641: ADD
10642: ST_TO_ADDR
// end else
10643: GO 10786
// begin for i = 1 to personel do
10645: LD_ADDR_VAR 0 8
10649: PUSH
10650: DOUBLE
10651: LD_INT 1
10653: DEC
10654: ST_TO_ADDR
10655: LD_VAR 0 6
10659: PUSH
10660: FOR_TO
10661: IFFALSE 10784
// begin if i > 4 then
10663: LD_VAR 0 8
10667: PUSH
10668: LD_INT 4
10670: GREATER
10671: IFFALSE 10675
// break ;
10673: GO 10784
// x := personel [ i ] ;
10675: LD_ADDR_VAR 0 13
10679: PUSH
10680: LD_VAR 0 6
10684: PUSH
10685: LD_VAR 0 8
10689: ARRAY
10690: ST_TO_ADDR
// if x = - 1 then
10691: LD_VAR 0 13
10695: PUSH
10696: LD_INT 1
10698: NEG
10699: EQUAL
10700: IFFALSE 10704
// continue ;
10702: GO 10660
// PrepareHuman ( false , i , skill ) ;
10704: LD_INT 0
10706: PPUSH
10707: LD_VAR 0 8
10711: PPUSH
10712: LD_VAR 0 4
10716: PPUSH
10717: CALL_OW 380
// un := CreateHuman ;
10721: LD_ADDR_VAR 0 14
10725: PUSH
10726: CALL_OW 44
10730: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10731: LD_VAR 0 14
10735: PPUSH
10736: LD_VAR 0 1
10740: PPUSH
10741: CALL_OW 250
10745: PPUSH
10746: LD_VAR 0 1
10750: PPUSH
10751: CALL_OW 251
10755: PPUSH
10756: LD_INT 10
10758: PPUSH
10759: LD_INT 0
10761: PPUSH
10762: CALL_OW 50
// result := result ^ un ;
10766: LD_ADDR_VAR 0 7
10770: PUSH
10771: LD_VAR 0 7
10775: PUSH
10776: LD_VAR 0 14
10780: ADD
10781: ST_TO_ADDR
// end ;
10782: GO 10660
10784: POP
10785: POP
// end ; end ;
10786: LD_VAR 0 7
10790: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10791: LD_INT 0
10793: PPUSH
10794: PPUSH
10795: PPUSH
10796: PPUSH
10797: PPUSH
10798: PPUSH
10799: PPUSH
10800: PPUSH
10801: PPUSH
10802: PPUSH
10803: PPUSH
10804: PPUSH
10805: PPUSH
10806: PPUSH
10807: PPUSH
10808: PPUSH
// result := false ;
10809: LD_ADDR_VAR 0 3
10813: PUSH
10814: LD_INT 0
10816: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10817: LD_VAR 0 1
10821: NOT
10822: PUSH
10823: LD_VAR 0 1
10827: PPUSH
10828: CALL_OW 266
10832: PUSH
10833: LD_INT 32
10835: PUSH
10836: LD_INT 33
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: IN
10843: NOT
10844: OR
10845: IFFALSE 10849
// exit ;
10847: GO 11958
// nat := GetNation ( tower ) ;
10849: LD_ADDR_VAR 0 12
10853: PUSH
10854: LD_VAR 0 1
10858: PPUSH
10859: CALL_OW 248
10863: ST_TO_ADDR
// side := GetSide ( tower ) ;
10864: LD_ADDR_VAR 0 16
10868: PUSH
10869: LD_VAR 0 1
10873: PPUSH
10874: CALL_OW 255
10878: ST_TO_ADDR
// x := GetX ( tower ) ;
10879: LD_ADDR_VAR 0 10
10883: PUSH
10884: LD_VAR 0 1
10888: PPUSH
10889: CALL_OW 250
10893: ST_TO_ADDR
// y := GetY ( tower ) ;
10894: LD_ADDR_VAR 0 11
10898: PUSH
10899: LD_VAR 0 1
10903: PPUSH
10904: CALL_OW 251
10908: ST_TO_ADDR
// if not x or not y then
10909: LD_VAR 0 10
10913: NOT
10914: PUSH
10915: LD_VAR 0 11
10919: NOT
10920: OR
10921: IFFALSE 10925
// exit ;
10923: GO 11958
// weapon := 0 ;
10925: LD_ADDR_VAR 0 18
10929: PUSH
10930: LD_INT 0
10932: ST_TO_ADDR
// fac_list := [ ] ;
10933: LD_ADDR_VAR 0 17
10937: PUSH
10938: EMPTY
10939: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10940: LD_ADDR_VAR 0 6
10944: PUSH
10945: LD_VAR 0 1
10949: PPUSH
10950: CALL_OW 274
10954: PPUSH
10955: LD_VAR 0 2
10959: PPUSH
10960: LD_INT 0
10962: PPUSH
10963: CALL 8529 0 3
10967: PPUSH
10968: LD_INT 30
10970: PUSH
10971: LD_INT 3
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PPUSH
10978: CALL_OW 72
10982: ST_TO_ADDR
// if not factories then
10983: LD_VAR 0 6
10987: NOT
10988: IFFALSE 10992
// exit ;
10990: GO 11958
// for i in factories do
10992: LD_ADDR_VAR 0 8
10996: PUSH
10997: LD_VAR 0 6
11001: PUSH
11002: FOR_IN
11003: IFFALSE 11028
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11005: LD_ADDR_VAR 0 17
11009: PUSH
11010: LD_VAR 0 17
11014: PUSH
11015: LD_VAR 0 8
11019: PPUSH
11020: CALL_OW 478
11024: UNION
11025: ST_TO_ADDR
11026: GO 11002
11028: POP
11029: POP
// if not fac_list then
11030: LD_VAR 0 17
11034: NOT
11035: IFFALSE 11039
// exit ;
11037: GO 11958
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11039: LD_ADDR_VAR 0 5
11043: PUSH
11044: LD_INT 4
11046: PUSH
11047: LD_INT 5
11049: PUSH
11050: LD_INT 9
11052: PUSH
11053: LD_INT 10
11055: PUSH
11056: LD_INT 6
11058: PUSH
11059: LD_INT 7
11061: PUSH
11062: LD_INT 11
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 27
11076: PUSH
11077: LD_INT 28
11079: PUSH
11080: LD_INT 26
11082: PUSH
11083: LD_INT 30
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: PUSH
11092: LD_INT 43
11094: PUSH
11095: LD_INT 44
11097: PUSH
11098: LD_INT 46
11100: PUSH
11101: LD_INT 45
11103: PUSH
11104: LD_INT 47
11106: PUSH
11107: LD_INT 49
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: PUSH
11123: LD_VAR 0 12
11127: ARRAY
11128: ST_TO_ADDR
// list := list isect fac_list ;
11129: LD_ADDR_VAR 0 5
11133: PUSH
11134: LD_VAR 0 5
11138: PUSH
11139: LD_VAR 0 17
11143: ISECT
11144: ST_TO_ADDR
// if not list then
11145: LD_VAR 0 5
11149: NOT
11150: IFFALSE 11154
// exit ;
11152: GO 11958
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11154: LD_VAR 0 12
11158: PUSH
11159: LD_INT 3
11161: EQUAL
11162: PUSH
11163: LD_INT 49
11165: PUSH
11166: LD_VAR 0 5
11170: IN
11171: AND
11172: PUSH
11173: LD_INT 31
11175: PPUSH
11176: LD_VAR 0 16
11180: PPUSH
11181: CALL_OW 321
11185: PUSH
11186: LD_INT 2
11188: EQUAL
11189: AND
11190: IFFALSE 11250
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11192: LD_INT 22
11194: PUSH
11195: LD_VAR 0 16
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PUSH
11204: LD_INT 35
11206: PUSH
11207: LD_INT 49
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: PUSH
11214: LD_INT 91
11216: PUSH
11217: LD_VAR 0 1
11221: PUSH
11222: LD_INT 10
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: LIST
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: LIST
11234: PPUSH
11235: CALL_OW 69
11239: NOT
11240: IFFALSE 11250
// weapon := ru_time_lapser ;
11242: LD_ADDR_VAR 0 18
11246: PUSH
11247: LD_INT 49
11249: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11250: LD_VAR 0 12
11254: PUSH
11255: LD_INT 1
11257: PUSH
11258: LD_INT 2
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: IN
11265: PUSH
11266: LD_INT 11
11268: PUSH
11269: LD_VAR 0 5
11273: IN
11274: PUSH
11275: LD_INT 30
11277: PUSH
11278: LD_VAR 0 5
11282: IN
11283: OR
11284: AND
11285: PUSH
11286: LD_INT 6
11288: PPUSH
11289: LD_VAR 0 16
11293: PPUSH
11294: CALL_OW 321
11298: PUSH
11299: LD_INT 2
11301: EQUAL
11302: AND
11303: IFFALSE 11468
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11305: LD_INT 22
11307: PUSH
11308: LD_VAR 0 16
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: LD_INT 2
11319: PUSH
11320: LD_INT 35
11322: PUSH
11323: LD_INT 11
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: LD_INT 35
11332: PUSH
11333: LD_INT 30
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: LIST
11344: PUSH
11345: LD_INT 91
11347: PUSH
11348: LD_VAR 0 1
11352: PUSH
11353: LD_INT 18
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 69
11370: NOT
11371: PUSH
11372: LD_INT 22
11374: PUSH
11375: LD_VAR 0 16
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: LD_INT 30
11389: PUSH
11390: LD_INT 32
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: LD_INT 30
11399: PUSH
11400: LD_INT 33
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 91
11414: PUSH
11415: LD_VAR 0 1
11419: PUSH
11420: LD_INT 12
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: LIST
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: LIST
11432: PUSH
11433: EMPTY
11434: LIST
11435: PPUSH
11436: CALL_OW 69
11440: PUSH
11441: LD_INT 2
11443: GREATER
11444: AND
11445: IFFALSE 11468
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11447: LD_ADDR_VAR 0 18
11451: PUSH
11452: LD_INT 11
11454: PUSH
11455: LD_INT 30
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: LD_VAR 0 12
11466: ARRAY
11467: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11468: LD_VAR 0 18
11472: NOT
11473: PUSH
11474: LD_INT 40
11476: PPUSH
11477: LD_VAR 0 16
11481: PPUSH
11482: CALL_OW 321
11486: PUSH
11487: LD_INT 2
11489: EQUAL
11490: AND
11491: PUSH
11492: LD_INT 7
11494: PUSH
11495: LD_VAR 0 5
11499: IN
11500: PUSH
11501: LD_INT 28
11503: PUSH
11504: LD_VAR 0 5
11508: IN
11509: OR
11510: PUSH
11511: LD_INT 45
11513: PUSH
11514: LD_VAR 0 5
11518: IN
11519: OR
11520: AND
11521: IFFALSE 11775
// begin hex := GetHexInfo ( x , y ) ;
11523: LD_ADDR_VAR 0 4
11527: PUSH
11528: LD_VAR 0 10
11532: PPUSH
11533: LD_VAR 0 11
11537: PPUSH
11538: CALL_OW 546
11542: ST_TO_ADDR
// if hex [ 1 ] then
11543: LD_VAR 0 4
11547: PUSH
11548: LD_INT 1
11550: ARRAY
11551: IFFALSE 11555
// exit ;
11553: GO 11958
// height := hex [ 2 ] ;
11555: LD_ADDR_VAR 0 15
11559: PUSH
11560: LD_VAR 0 4
11564: PUSH
11565: LD_INT 2
11567: ARRAY
11568: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11569: LD_ADDR_VAR 0 14
11573: PUSH
11574: LD_INT 0
11576: PUSH
11577: LD_INT 2
11579: PUSH
11580: LD_INT 3
11582: PUSH
11583: LD_INT 5
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: ST_TO_ADDR
// for i in tmp do
11592: LD_ADDR_VAR 0 8
11596: PUSH
11597: LD_VAR 0 14
11601: PUSH
11602: FOR_IN
11603: IFFALSE 11773
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11605: LD_ADDR_VAR 0 9
11609: PUSH
11610: LD_VAR 0 10
11614: PPUSH
11615: LD_VAR 0 8
11619: PPUSH
11620: LD_INT 5
11622: PPUSH
11623: CALL_OW 272
11627: PUSH
11628: LD_VAR 0 11
11632: PPUSH
11633: LD_VAR 0 8
11637: PPUSH
11638: LD_INT 5
11640: PPUSH
11641: CALL_OW 273
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11650: LD_VAR 0 9
11654: PUSH
11655: LD_INT 1
11657: ARRAY
11658: PPUSH
11659: LD_VAR 0 9
11663: PUSH
11664: LD_INT 2
11666: ARRAY
11667: PPUSH
11668: CALL_OW 488
11672: IFFALSE 11771
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11674: LD_ADDR_VAR 0 4
11678: PUSH
11679: LD_VAR 0 9
11683: PUSH
11684: LD_INT 1
11686: ARRAY
11687: PPUSH
11688: LD_VAR 0 9
11692: PUSH
11693: LD_INT 2
11695: ARRAY
11696: PPUSH
11697: CALL_OW 546
11701: ST_TO_ADDR
// if hex [ 1 ] then
11702: LD_VAR 0 4
11706: PUSH
11707: LD_INT 1
11709: ARRAY
11710: IFFALSE 11714
// continue ;
11712: GO 11602
// h := hex [ 2 ] ;
11714: LD_ADDR_VAR 0 13
11718: PUSH
11719: LD_VAR 0 4
11723: PUSH
11724: LD_INT 2
11726: ARRAY
11727: ST_TO_ADDR
// if h + 7 < height then
11728: LD_VAR 0 13
11732: PUSH
11733: LD_INT 7
11735: PLUS
11736: PUSH
11737: LD_VAR 0 15
11741: LESS
11742: IFFALSE 11771
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11744: LD_ADDR_VAR 0 18
11748: PUSH
11749: LD_INT 7
11751: PUSH
11752: LD_INT 28
11754: PUSH
11755: LD_INT 45
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: LIST
11762: PUSH
11763: LD_VAR 0 12
11767: ARRAY
11768: ST_TO_ADDR
// break ;
11769: GO 11773
// end ; end ; end ;
11771: GO 11602
11773: POP
11774: POP
// end ; if not weapon then
11775: LD_VAR 0 18
11779: NOT
11780: IFFALSE 11840
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11782: LD_ADDR_VAR 0 5
11786: PUSH
11787: LD_VAR 0 5
11791: PUSH
11792: LD_INT 11
11794: PUSH
11795: LD_INT 30
11797: PUSH
11798: LD_INT 49
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: LIST
11805: DIFF
11806: ST_TO_ADDR
// if not list then
11807: LD_VAR 0 5
11811: NOT
11812: IFFALSE 11816
// exit ;
11814: GO 11958
// weapon := list [ rand ( 1 , list ) ] ;
11816: LD_ADDR_VAR 0 18
11820: PUSH
11821: LD_VAR 0 5
11825: PUSH
11826: LD_INT 1
11828: PPUSH
11829: LD_VAR 0 5
11833: PPUSH
11834: CALL_OW 12
11838: ARRAY
11839: ST_TO_ADDR
// end ; if weapon then
11840: LD_VAR 0 18
11844: IFFALSE 11958
// begin tmp := CostOfWeapon ( weapon ) ;
11846: LD_ADDR_VAR 0 14
11850: PUSH
11851: LD_VAR 0 18
11855: PPUSH
11856: CALL_OW 451
11860: ST_TO_ADDR
// j := GetBase ( tower ) ;
11861: LD_ADDR_VAR 0 9
11865: PUSH
11866: LD_VAR 0 1
11870: PPUSH
11871: CALL_OW 274
11875: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11876: LD_VAR 0 9
11880: PPUSH
11881: LD_INT 1
11883: PPUSH
11884: CALL_OW 275
11888: PUSH
11889: LD_VAR 0 14
11893: PUSH
11894: LD_INT 1
11896: ARRAY
11897: GREATEREQUAL
11898: PUSH
11899: LD_VAR 0 9
11903: PPUSH
11904: LD_INT 2
11906: PPUSH
11907: CALL_OW 275
11911: PUSH
11912: LD_VAR 0 14
11916: PUSH
11917: LD_INT 2
11919: ARRAY
11920: GREATEREQUAL
11921: AND
11922: PUSH
11923: LD_VAR 0 9
11927: PPUSH
11928: LD_INT 3
11930: PPUSH
11931: CALL_OW 275
11935: PUSH
11936: LD_VAR 0 14
11940: PUSH
11941: LD_INT 3
11943: ARRAY
11944: GREATEREQUAL
11945: AND
11946: IFFALSE 11958
// result := weapon ;
11948: LD_ADDR_VAR 0 3
11952: PUSH
11953: LD_VAR 0 18
11957: ST_TO_ADDR
// end ; end ;
11958: LD_VAR 0 3
11962: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11963: LD_INT 0
11965: PPUSH
11966: PPUSH
// result := true ;
11967: LD_ADDR_VAR 0 3
11971: PUSH
11972: LD_INT 1
11974: ST_TO_ADDR
// if array1 = array2 then
11975: LD_VAR 0 1
11979: PUSH
11980: LD_VAR 0 2
11984: EQUAL
11985: IFFALSE 12045
// begin for i = 1 to array1 do
11987: LD_ADDR_VAR 0 4
11991: PUSH
11992: DOUBLE
11993: LD_INT 1
11995: DEC
11996: ST_TO_ADDR
11997: LD_VAR 0 1
12001: PUSH
12002: FOR_TO
12003: IFFALSE 12041
// if array1 [ i ] <> array2 [ i ] then
12005: LD_VAR 0 1
12009: PUSH
12010: LD_VAR 0 4
12014: ARRAY
12015: PUSH
12016: LD_VAR 0 2
12020: PUSH
12021: LD_VAR 0 4
12025: ARRAY
12026: NONEQUAL
12027: IFFALSE 12039
// begin result := false ;
12029: LD_ADDR_VAR 0 3
12033: PUSH
12034: LD_INT 0
12036: ST_TO_ADDR
// break ;
12037: GO 12041
// end ;
12039: GO 12002
12041: POP
12042: POP
// end else
12043: GO 12053
// result := false ;
12045: LD_ADDR_VAR 0 3
12049: PUSH
12050: LD_INT 0
12052: ST_TO_ADDR
// end ;
12053: LD_VAR 0 3
12057: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12058: LD_INT 0
12060: PPUSH
12061: PPUSH
// if not array1 or not array2 then
12062: LD_VAR 0 1
12066: NOT
12067: PUSH
12068: LD_VAR 0 2
12072: NOT
12073: OR
12074: IFFALSE 12078
// exit ;
12076: GO 12142
// result := true ;
12078: LD_ADDR_VAR 0 3
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// for i = 1 to array1 do
12086: LD_ADDR_VAR 0 4
12090: PUSH
12091: DOUBLE
12092: LD_INT 1
12094: DEC
12095: ST_TO_ADDR
12096: LD_VAR 0 1
12100: PUSH
12101: FOR_TO
12102: IFFALSE 12140
// if array1 [ i ] <> array2 [ i ] then
12104: LD_VAR 0 1
12108: PUSH
12109: LD_VAR 0 4
12113: ARRAY
12114: PUSH
12115: LD_VAR 0 2
12119: PUSH
12120: LD_VAR 0 4
12124: ARRAY
12125: NONEQUAL
12126: IFFALSE 12138
// begin result := false ;
12128: LD_ADDR_VAR 0 3
12132: PUSH
12133: LD_INT 0
12135: ST_TO_ADDR
// break ;
12136: GO 12140
// end ;
12138: GO 12101
12140: POP
12141: POP
// end ;
12142: LD_VAR 0 3
12146: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12147: LD_INT 0
12149: PPUSH
12150: PPUSH
12151: PPUSH
// pom := GetBase ( fac ) ;
12152: LD_ADDR_VAR 0 5
12156: PUSH
12157: LD_VAR 0 1
12161: PPUSH
12162: CALL_OW 274
12166: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12167: LD_ADDR_VAR 0 4
12171: PUSH
12172: LD_VAR 0 2
12176: PUSH
12177: LD_INT 1
12179: ARRAY
12180: PPUSH
12181: LD_VAR 0 2
12185: PUSH
12186: LD_INT 2
12188: ARRAY
12189: PPUSH
12190: LD_VAR 0 2
12194: PUSH
12195: LD_INT 3
12197: ARRAY
12198: PPUSH
12199: LD_VAR 0 2
12203: PUSH
12204: LD_INT 4
12206: ARRAY
12207: PPUSH
12208: CALL_OW 449
12212: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12213: LD_ADDR_VAR 0 3
12217: PUSH
12218: LD_VAR 0 5
12222: PPUSH
12223: LD_INT 1
12225: PPUSH
12226: CALL_OW 275
12230: PUSH
12231: LD_VAR 0 4
12235: PUSH
12236: LD_INT 1
12238: ARRAY
12239: GREATEREQUAL
12240: PUSH
12241: LD_VAR 0 5
12245: PPUSH
12246: LD_INT 2
12248: PPUSH
12249: CALL_OW 275
12253: PUSH
12254: LD_VAR 0 4
12258: PUSH
12259: LD_INT 2
12261: ARRAY
12262: GREATEREQUAL
12263: AND
12264: PUSH
12265: LD_VAR 0 5
12269: PPUSH
12270: LD_INT 3
12272: PPUSH
12273: CALL_OW 275
12277: PUSH
12278: LD_VAR 0 4
12282: PUSH
12283: LD_INT 3
12285: ARRAY
12286: GREATEREQUAL
12287: AND
12288: ST_TO_ADDR
// end ;
12289: LD_VAR 0 3
12293: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12294: LD_INT 0
12296: PPUSH
12297: PPUSH
12298: PPUSH
12299: PPUSH
// pom := GetBase ( building ) ;
12300: LD_ADDR_VAR 0 3
12304: PUSH
12305: LD_VAR 0 1
12309: PPUSH
12310: CALL_OW 274
12314: ST_TO_ADDR
// if not pom then
12315: LD_VAR 0 3
12319: NOT
12320: IFFALSE 12324
// exit ;
12322: GO 12494
// btype := GetBType ( building ) ;
12324: LD_ADDR_VAR 0 5
12328: PUSH
12329: LD_VAR 0 1
12333: PPUSH
12334: CALL_OW 266
12338: ST_TO_ADDR
// if btype = b_armoury then
12339: LD_VAR 0 5
12343: PUSH
12344: LD_INT 4
12346: EQUAL
12347: IFFALSE 12357
// btype := b_barracks ;
12349: LD_ADDR_VAR 0 5
12353: PUSH
12354: LD_INT 5
12356: ST_TO_ADDR
// if btype = b_depot then
12357: LD_VAR 0 5
12361: PUSH
12362: LD_INT 0
12364: EQUAL
12365: IFFALSE 12375
// btype := b_warehouse ;
12367: LD_ADDR_VAR 0 5
12371: PUSH
12372: LD_INT 1
12374: ST_TO_ADDR
// if btype = b_workshop then
12375: LD_VAR 0 5
12379: PUSH
12380: LD_INT 2
12382: EQUAL
12383: IFFALSE 12393
// btype := b_factory ;
12385: LD_ADDR_VAR 0 5
12389: PUSH
12390: LD_INT 3
12392: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12393: LD_ADDR_VAR 0 4
12397: PUSH
12398: LD_VAR 0 5
12402: PPUSH
12403: LD_VAR 0 1
12407: PPUSH
12408: CALL_OW 248
12412: PPUSH
12413: CALL_OW 450
12417: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12418: LD_ADDR_VAR 0 2
12422: PUSH
12423: LD_VAR 0 3
12427: PPUSH
12428: LD_INT 1
12430: PPUSH
12431: CALL_OW 275
12435: PUSH
12436: LD_VAR 0 4
12440: PUSH
12441: LD_INT 1
12443: ARRAY
12444: GREATEREQUAL
12445: PUSH
12446: LD_VAR 0 3
12450: PPUSH
12451: LD_INT 2
12453: PPUSH
12454: CALL_OW 275
12458: PUSH
12459: LD_VAR 0 4
12463: PUSH
12464: LD_INT 2
12466: ARRAY
12467: GREATEREQUAL
12468: AND
12469: PUSH
12470: LD_VAR 0 3
12474: PPUSH
12475: LD_INT 3
12477: PPUSH
12478: CALL_OW 275
12482: PUSH
12483: LD_VAR 0 4
12487: PUSH
12488: LD_INT 3
12490: ARRAY
12491: GREATEREQUAL
12492: AND
12493: ST_TO_ADDR
// end ;
12494: LD_VAR 0 2
12498: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12499: LD_INT 0
12501: PPUSH
12502: PPUSH
12503: PPUSH
// pom := GetBase ( building ) ;
12504: LD_ADDR_VAR 0 4
12508: PUSH
12509: LD_VAR 0 1
12513: PPUSH
12514: CALL_OW 274
12518: ST_TO_ADDR
// if not pom then
12519: LD_VAR 0 4
12523: NOT
12524: IFFALSE 12528
// exit ;
12526: GO 12629
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12528: LD_ADDR_VAR 0 5
12532: PUSH
12533: LD_VAR 0 2
12537: PPUSH
12538: LD_VAR 0 1
12542: PPUSH
12543: CALL_OW 248
12547: PPUSH
12548: CALL_OW 450
12552: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12553: LD_ADDR_VAR 0 3
12557: PUSH
12558: LD_VAR 0 4
12562: PPUSH
12563: LD_INT 1
12565: PPUSH
12566: CALL_OW 275
12570: PUSH
12571: LD_VAR 0 5
12575: PUSH
12576: LD_INT 1
12578: ARRAY
12579: GREATEREQUAL
12580: PUSH
12581: LD_VAR 0 4
12585: PPUSH
12586: LD_INT 2
12588: PPUSH
12589: CALL_OW 275
12593: PUSH
12594: LD_VAR 0 5
12598: PUSH
12599: LD_INT 2
12601: ARRAY
12602: GREATEREQUAL
12603: AND
12604: PUSH
12605: LD_VAR 0 4
12609: PPUSH
12610: LD_INT 3
12612: PPUSH
12613: CALL_OW 275
12617: PUSH
12618: LD_VAR 0 5
12622: PUSH
12623: LD_INT 3
12625: ARRAY
12626: GREATEREQUAL
12627: AND
12628: ST_TO_ADDR
// end ;
12629: LD_VAR 0 3
12633: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12634: LD_INT 0
12636: PPUSH
12637: PPUSH
12638: PPUSH
12639: PPUSH
12640: PPUSH
12641: PPUSH
12642: PPUSH
12643: PPUSH
12644: PPUSH
12645: PPUSH
12646: PPUSH
// result := false ;
12647: LD_ADDR_VAR 0 8
12651: PUSH
12652: LD_INT 0
12654: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12655: LD_VAR 0 5
12659: NOT
12660: PUSH
12661: LD_VAR 0 1
12665: NOT
12666: OR
12667: PUSH
12668: LD_VAR 0 2
12672: NOT
12673: OR
12674: PUSH
12675: LD_VAR 0 3
12679: NOT
12680: OR
12681: IFFALSE 12685
// exit ;
12683: GO 13499
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12685: LD_ADDR_VAR 0 14
12689: PUSH
12690: LD_VAR 0 1
12694: PPUSH
12695: LD_VAR 0 2
12699: PPUSH
12700: LD_VAR 0 3
12704: PPUSH
12705: LD_VAR 0 4
12709: PPUSH
12710: LD_VAR 0 5
12714: PUSH
12715: LD_INT 1
12717: ARRAY
12718: PPUSH
12719: CALL_OW 248
12723: PPUSH
12724: LD_INT 0
12726: PPUSH
12727: CALL 14736 0 6
12731: ST_TO_ADDR
// if not hexes then
12732: LD_VAR 0 14
12736: NOT
12737: IFFALSE 12741
// exit ;
12739: GO 13499
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12741: LD_ADDR_VAR 0 17
12745: PUSH
12746: LD_VAR 0 5
12750: PPUSH
12751: LD_INT 22
12753: PUSH
12754: LD_VAR 0 13
12758: PPUSH
12759: CALL_OW 255
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: PUSH
12768: LD_INT 2
12770: PUSH
12771: LD_INT 30
12773: PUSH
12774: LD_INT 0
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: LD_INT 30
12783: PUSH
12784: LD_INT 1
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: LIST
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PPUSH
12800: CALL_OW 72
12804: ST_TO_ADDR
// for i = 1 to hexes do
12805: LD_ADDR_VAR 0 9
12809: PUSH
12810: DOUBLE
12811: LD_INT 1
12813: DEC
12814: ST_TO_ADDR
12815: LD_VAR 0 14
12819: PUSH
12820: FOR_TO
12821: IFFALSE 13497
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12823: LD_ADDR_VAR 0 13
12827: PUSH
12828: LD_VAR 0 14
12832: PUSH
12833: LD_VAR 0 9
12837: ARRAY
12838: PUSH
12839: LD_INT 1
12841: ARRAY
12842: PPUSH
12843: LD_VAR 0 14
12847: PUSH
12848: LD_VAR 0 9
12852: ARRAY
12853: PUSH
12854: LD_INT 2
12856: ARRAY
12857: PPUSH
12858: CALL_OW 428
12862: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12863: LD_VAR 0 14
12867: PUSH
12868: LD_VAR 0 9
12872: ARRAY
12873: PUSH
12874: LD_INT 1
12876: ARRAY
12877: PPUSH
12878: LD_VAR 0 14
12882: PUSH
12883: LD_VAR 0 9
12887: ARRAY
12888: PUSH
12889: LD_INT 2
12891: ARRAY
12892: PPUSH
12893: CALL_OW 351
12897: PUSH
12898: LD_VAR 0 14
12902: PUSH
12903: LD_VAR 0 9
12907: ARRAY
12908: PUSH
12909: LD_INT 1
12911: ARRAY
12912: PPUSH
12913: LD_VAR 0 14
12917: PUSH
12918: LD_VAR 0 9
12922: ARRAY
12923: PUSH
12924: LD_INT 2
12926: ARRAY
12927: PPUSH
12928: CALL_OW 488
12932: NOT
12933: OR
12934: PUSH
12935: LD_VAR 0 13
12939: PPUSH
12940: CALL_OW 247
12944: PUSH
12945: LD_INT 3
12947: EQUAL
12948: OR
12949: IFFALSE 12955
// exit ;
12951: POP
12952: POP
12953: GO 13499
// if not tmp then
12955: LD_VAR 0 13
12959: NOT
12960: IFFALSE 12964
// continue ;
12962: GO 12820
// result := true ;
12964: LD_ADDR_VAR 0 8
12968: PUSH
12969: LD_INT 1
12971: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12972: LD_VAR 0 6
12976: PUSH
12977: LD_VAR 0 13
12981: PPUSH
12982: CALL_OW 247
12986: PUSH
12987: LD_INT 2
12989: EQUAL
12990: AND
12991: PUSH
12992: LD_VAR 0 13
12996: PPUSH
12997: CALL_OW 263
13001: PUSH
13002: LD_INT 1
13004: EQUAL
13005: AND
13006: IFFALSE 13170
// begin if IsDrivenBy ( tmp ) then
13008: LD_VAR 0 13
13012: PPUSH
13013: CALL_OW 311
13017: IFFALSE 13021
// continue ;
13019: GO 12820
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13021: LD_VAR 0 6
13025: PPUSH
13026: LD_INT 3
13028: PUSH
13029: LD_INT 60
13031: PUSH
13032: EMPTY
13033: LIST
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PUSH
13039: LD_INT 3
13041: PUSH
13042: LD_INT 55
13044: PUSH
13045: EMPTY
13046: LIST
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PPUSH
13056: CALL_OW 72
13060: IFFALSE 13168
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13062: LD_ADDR_VAR 0 18
13066: PUSH
13067: LD_VAR 0 6
13071: PPUSH
13072: LD_INT 3
13074: PUSH
13075: LD_INT 60
13077: PUSH
13078: EMPTY
13079: LIST
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 3
13087: PUSH
13088: LD_INT 55
13090: PUSH
13091: EMPTY
13092: LIST
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PPUSH
13102: CALL_OW 72
13106: PUSH
13107: LD_INT 1
13109: ARRAY
13110: ST_TO_ADDR
// if IsInUnit ( driver ) then
13111: LD_VAR 0 18
13115: PPUSH
13116: CALL_OW 310
13120: IFFALSE 13131
// ComExit ( driver ) ;
13122: LD_VAR 0 18
13126: PPUSH
13127: CALL 37864 0 1
// AddComEnterUnit ( driver , tmp ) ;
13131: LD_VAR 0 18
13135: PPUSH
13136: LD_VAR 0 13
13140: PPUSH
13141: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13145: LD_VAR 0 18
13149: PPUSH
13150: LD_VAR 0 7
13154: PPUSH
13155: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13159: LD_VAR 0 18
13163: PPUSH
13164: CALL_OW 181
// end ; continue ;
13168: GO 12820
// end ; if not cleaners or not tmp in cleaners then
13170: LD_VAR 0 6
13174: NOT
13175: PUSH
13176: LD_VAR 0 13
13180: PUSH
13181: LD_VAR 0 6
13185: IN
13186: NOT
13187: OR
13188: IFFALSE 13495
// begin if dep then
13190: LD_VAR 0 17
13194: IFFALSE 13330
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13196: LD_ADDR_VAR 0 16
13200: PUSH
13201: LD_VAR 0 17
13205: PUSH
13206: LD_INT 1
13208: ARRAY
13209: PPUSH
13210: CALL_OW 250
13214: PPUSH
13215: LD_VAR 0 17
13219: PUSH
13220: LD_INT 1
13222: ARRAY
13223: PPUSH
13224: CALL_OW 254
13228: PPUSH
13229: LD_INT 5
13231: PPUSH
13232: CALL_OW 272
13236: PUSH
13237: LD_VAR 0 17
13241: PUSH
13242: LD_INT 1
13244: ARRAY
13245: PPUSH
13246: CALL_OW 251
13250: PPUSH
13251: LD_VAR 0 17
13255: PUSH
13256: LD_INT 1
13258: ARRAY
13259: PPUSH
13260: CALL_OW 254
13264: PPUSH
13265: LD_INT 5
13267: PPUSH
13268: CALL_OW 273
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13277: LD_VAR 0 16
13281: PUSH
13282: LD_INT 1
13284: ARRAY
13285: PPUSH
13286: LD_VAR 0 16
13290: PUSH
13291: LD_INT 2
13293: ARRAY
13294: PPUSH
13295: CALL_OW 488
13299: IFFALSE 13330
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13301: LD_VAR 0 13
13305: PPUSH
13306: LD_VAR 0 16
13310: PUSH
13311: LD_INT 1
13313: ARRAY
13314: PPUSH
13315: LD_VAR 0 16
13319: PUSH
13320: LD_INT 2
13322: ARRAY
13323: PPUSH
13324: CALL_OW 111
// continue ;
13328: GO 12820
// end ; end ; r := GetDir ( tmp ) ;
13330: LD_ADDR_VAR 0 15
13334: PUSH
13335: LD_VAR 0 13
13339: PPUSH
13340: CALL_OW 254
13344: ST_TO_ADDR
// if r = 5 then
13345: LD_VAR 0 15
13349: PUSH
13350: LD_INT 5
13352: EQUAL
13353: IFFALSE 13363
// r := 0 ;
13355: LD_ADDR_VAR 0 15
13359: PUSH
13360: LD_INT 0
13362: ST_TO_ADDR
// for j = r to 5 do
13363: LD_ADDR_VAR 0 10
13367: PUSH
13368: DOUBLE
13369: LD_VAR 0 15
13373: DEC
13374: ST_TO_ADDR
13375: LD_INT 5
13377: PUSH
13378: FOR_TO
13379: IFFALSE 13493
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13381: LD_ADDR_VAR 0 11
13385: PUSH
13386: LD_VAR 0 13
13390: PPUSH
13391: CALL_OW 250
13395: PPUSH
13396: LD_VAR 0 10
13400: PPUSH
13401: LD_INT 2
13403: PPUSH
13404: CALL_OW 272
13408: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13409: LD_ADDR_VAR 0 12
13413: PUSH
13414: LD_VAR 0 13
13418: PPUSH
13419: CALL_OW 251
13423: PPUSH
13424: LD_VAR 0 10
13428: PPUSH
13429: LD_INT 2
13431: PPUSH
13432: CALL_OW 273
13436: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13437: LD_VAR 0 11
13441: PPUSH
13442: LD_VAR 0 12
13446: PPUSH
13447: CALL_OW 488
13451: PUSH
13452: LD_VAR 0 11
13456: PPUSH
13457: LD_VAR 0 12
13461: PPUSH
13462: CALL_OW 428
13466: NOT
13467: AND
13468: IFFALSE 13491
// begin ComMoveXY ( tmp , _x , _y ) ;
13470: LD_VAR 0 13
13474: PPUSH
13475: LD_VAR 0 11
13479: PPUSH
13480: LD_VAR 0 12
13484: PPUSH
13485: CALL_OW 111
// break ;
13489: GO 13493
// end ; end ;
13491: GO 13378
13493: POP
13494: POP
// end ; end ;
13495: GO 12820
13497: POP
13498: POP
// end ;
13499: LD_VAR 0 8
13503: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13504: LD_INT 0
13506: PPUSH
// result := true ;
13507: LD_ADDR_VAR 0 3
13511: PUSH
13512: LD_INT 1
13514: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13515: LD_VAR 0 2
13519: PUSH
13520: LD_INT 24
13522: DOUBLE
13523: EQUAL
13524: IFTRUE 13534
13526: LD_INT 33
13528: DOUBLE
13529: EQUAL
13530: IFTRUE 13534
13532: GO 13559
13534: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13535: LD_ADDR_VAR 0 3
13539: PUSH
13540: LD_INT 32
13542: PPUSH
13543: LD_VAR 0 1
13547: PPUSH
13548: CALL_OW 321
13552: PUSH
13553: LD_INT 2
13555: EQUAL
13556: ST_TO_ADDR
13557: GO 13879
13559: LD_INT 20
13561: DOUBLE
13562: EQUAL
13563: IFTRUE 13567
13565: GO 13592
13567: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13568: LD_ADDR_VAR 0 3
13572: PUSH
13573: LD_INT 6
13575: PPUSH
13576: LD_VAR 0 1
13580: PPUSH
13581: CALL_OW 321
13585: PUSH
13586: LD_INT 2
13588: EQUAL
13589: ST_TO_ADDR
13590: GO 13879
13592: LD_INT 22
13594: DOUBLE
13595: EQUAL
13596: IFTRUE 13606
13598: LD_INT 36
13600: DOUBLE
13601: EQUAL
13602: IFTRUE 13606
13604: GO 13631
13606: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13607: LD_ADDR_VAR 0 3
13611: PUSH
13612: LD_INT 15
13614: PPUSH
13615: LD_VAR 0 1
13619: PPUSH
13620: CALL_OW 321
13624: PUSH
13625: LD_INT 2
13627: EQUAL
13628: ST_TO_ADDR
13629: GO 13879
13631: LD_INT 30
13633: DOUBLE
13634: EQUAL
13635: IFTRUE 13639
13637: GO 13664
13639: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13640: LD_ADDR_VAR 0 3
13644: PUSH
13645: LD_INT 20
13647: PPUSH
13648: LD_VAR 0 1
13652: PPUSH
13653: CALL_OW 321
13657: PUSH
13658: LD_INT 2
13660: EQUAL
13661: ST_TO_ADDR
13662: GO 13879
13664: LD_INT 28
13666: DOUBLE
13667: EQUAL
13668: IFTRUE 13678
13670: LD_INT 21
13672: DOUBLE
13673: EQUAL
13674: IFTRUE 13678
13676: GO 13703
13678: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13679: LD_ADDR_VAR 0 3
13683: PUSH
13684: LD_INT 21
13686: PPUSH
13687: LD_VAR 0 1
13691: PPUSH
13692: CALL_OW 321
13696: PUSH
13697: LD_INT 2
13699: EQUAL
13700: ST_TO_ADDR
13701: GO 13879
13703: LD_INT 16
13705: DOUBLE
13706: EQUAL
13707: IFTRUE 13711
13709: GO 13738
13711: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13712: LD_ADDR_VAR 0 3
13716: PUSH
13717: LD_EXP 29
13721: PPUSH
13722: LD_VAR 0 1
13726: PPUSH
13727: CALL_OW 321
13731: PUSH
13732: LD_INT 2
13734: EQUAL
13735: ST_TO_ADDR
13736: GO 13879
13738: LD_INT 19
13740: DOUBLE
13741: EQUAL
13742: IFTRUE 13752
13744: LD_INT 23
13746: DOUBLE
13747: EQUAL
13748: IFTRUE 13752
13750: GO 13779
13752: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13753: LD_ADDR_VAR 0 3
13757: PUSH
13758: LD_EXP 28
13762: PPUSH
13763: LD_VAR 0 1
13767: PPUSH
13768: CALL_OW 321
13772: PUSH
13773: LD_INT 2
13775: EQUAL
13776: ST_TO_ADDR
13777: GO 13879
13779: LD_INT 17
13781: DOUBLE
13782: EQUAL
13783: IFTRUE 13787
13785: GO 13812
13787: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13788: LD_ADDR_VAR 0 3
13792: PUSH
13793: LD_INT 39
13795: PPUSH
13796: LD_VAR 0 1
13800: PPUSH
13801: CALL_OW 321
13805: PUSH
13806: LD_INT 2
13808: EQUAL
13809: ST_TO_ADDR
13810: GO 13879
13812: LD_INT 18
13814: DOUBLE
13815: EQUAL
13816: IFTRUE 13820
13818: GO 13845
13820: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13821: LD_ADDR_VAR 0 3
13825: PUSH
13826: LD_INT 40
13828: PPUSH
13829: LD_VAR 0 1
13833: PPUSH
13834: CALL_OW 321
13838: PUSH
13839: LD_INT 2
13841: EQUAL
13842: ST_TO_ADDR
13843: GO 13879
13845: LD_INT 27
13847: DOUBLE
13848: EQUAL
13849: IFTRUE 13853
13851: GO 13878
13853: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13854: LD_ADDR_VAR 0 3
13858: PUSH
13859: LD_INT 35
13861: PPUSH
13862: LD_VAR 0 1
13866: PPUSH
13867: CALL_OW 321
13871: PUSH
13872: LD_INT 2
13874: EQUAL
13875: ST_TO_ADDR
13876: GO 13879
13878: POP
// end ;
13879: LD_VAR 0 3
13883: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13884: LD_INT 0
13886: PPUSH
13887: PPUSH
13888: PPUSH
13889: PPUSH
13890: PPUSH
13891: PPUSH
13892: PPUSH
13893: PPUSH
13894: PPUSH
13895: PPUSH
13896: PPUSH
// result := false ;
13897: LD_ADDR_VAR 0 6
13901: PUSH
13902: LD_INT 0
13904: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13905: LD_VAR 0 1
13909: NOT
13910: PUSH
13911: LD_VAR 0 1
13915: PPUSH
13916: CALL_OW 266
13920: PUSH
13921: LD_INT 0
13923: PUSH
13924: LD_INT 1
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: IN
13931: NOT
13932: OR
13933: PUSH
13934: LD_VAR 0 2
13938: NOT
13939: OR
13940: PUSH
13941: LD_VAR 0 5
13945: PUSH
13946: LD_INT 0
13948: PUSH
13949: LD_INT 1
13951: PUSH
13952: LD_INT 2
13954: PUSH
13955: LD_INT 3
13957: PUSH
13958: LD_INT 4
13960: PUSH
13961: LD_INT 5
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: IN
13972: NOT
13973: OR
13974: PUSH
13975: LD_VAR 0 3
13979: PPUSH
13980: LD_VAR 0 4
13984: PPUSH
13985: CALL_OW 488
13989: NOT
13990: OR
13991: IFFALSE 13995
// exit ;
13993: GO 14731
// side := GetSide ( depot ) ;
13995: LD_ADDR_VAR 0 9
13999: PUSH
14000: LD_VAR 0 1
14004: PPUSH
14005: CALL_OW 255
14009: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14010: LD_VAR 0 9
14014: PPUSH
14015: LD_VAR 0 2
14019: PPUSH
14020: CALL 13504 0 2
14024: NOT
14025: IFFALSE 14029
// exit ;
14027: GO 14731
// pom := GetBase ( depot ) ;
14029: LD_ADDR_VAR 0 10
14033: PUSH
14034: LD_VAR 0 1
14038: PPUSH
14039: CALL_OW 274
14043: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14044: LD_ADDR_VAR 0 11
14048: PUSH
14049: LD_VAR 0 2
14053: PPUSH
14054: LD_VAR 0 1
14058: PPUSH
14059: CALL_OW 248
14063: PPUSH
14064: CALL_OW 450
14068: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14069: LD_VAR 0 10
14073: PPUSH
14074: LD_INT 1
14076: PPUSH
14077: CALL_OW 275
14081: PUSH
14082: LD_VAR 0 11
14086: PUSH
14087: LD_INT 1
14089: ARRAY
14090: GREATEREQUAL
14091: PUSH
14092: LD_VAR 0 10
14096: PPUSH
14097: LD_INT 2
14099: PPUSH
14100: CALL_OW 275
14104: PUSH
14105: LD_VAR 0 11
14109: PUSH
14110: LD_INT 2
14112: ARRAY
14113: GREATEREQUAL
14114: AND
14115: PUSH
14116: LD_VAR 0 10
14120: PPUSH
14121: LD_INT 3
14123: PPUSH
14124: CALL_OW 275
14128: PUSH
14129: LD_VAR 0 11
14133: PUSH
14134: LD_INT 3
14136: ARRAY
14137: GREATEREQUAL
14138: AND
14139: NOT
14140: IFFALSE 14144
// exit ;
14142: GO 14731
// if GetBType ( depot ) = b_depot then
14144: LD_VAR 0 1
14148: PPUSH
14149: CALL_OW 266
14153: PUSH
14154: LD_INT 0
14156: EQUAL
14157: IFFALSE 14169
// dist := 28 else
14159: LD_ADDR_VAR 0 14
14163: PUSH
14164: LD_INT 28
14166: ST_TO_ADDR
14167: GO 14177
// dist := 36 ;
14169: LD_ADDR_VAR 0 14
14173: PUSH
14174: LD_INT 36
14176: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14177: LD_VAR 0 1
14181: PPUSH
14182: LD_VAR 0 3
14186: PPUSH
14187: LD_VAR 0 4
14191: PPUSH
14192: CALL_OW 297
14196: PUSH
14197: LD_VAR 0 14
14201: GREATER
14202: IFFALSE 14206
// exit ;
14204: GO 14731
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14206: LD_ADDR_VAR 0 12
14210: PUSH
14211: LD_VAR 0 2
14215: PPUSH
14216: LD_VAR 0 3
14220: PPUSH
14221: LD_VAR 0 4
14225: PPUSH
14226: LD_VAR 0 5
14230: PPUSH
14231: LD_VAR 0 1
14235: PPUSH
14236: CALL_OW 248
14240: PPUSH
14241: LD_INT 0
14243: PPUSH
14244: CALL 14736 0 6
14248: ST_TO_ADDR
// if not hexes then
14249: LD_VAR 0 12
14253: NOT
14254: IFFALSE 14258
// exit ;
14256: GO 14731
// hex := GetHexInfo ( x , y ) ;
14258: LD_ADDR_VAR 0 15
14262: PUSH
14263: LD_VAR 0 3
14267: PPUSH
14268: LD_VAR 0 4
14272: PPUSH
14273: CALL_OW 546
14277: ST_TO_ADDR
// if hex [ 1 ] then
14278: LD_VAR 0 15
14282: PUSH
14283: LD_INT 1
14285: ARRAY
14286: IFFALSE 14290
// exit ;
14288: GO 14731
// height := hex [ 2 ] ;
14290: LD_ADDR_VAR 0 13
14294: PUSH
14295: LD_VAR 0 15
14299: PUSH
14300: LD_INT 2
14302: ARRAY
14303: ST_TO_ADDR
// for i = 1 to hexes do
14304: LD_ADDR_VAR 0 7
14308: PUSH
14309: DOUBLE
14310: LD_INT 1
14312: DEC
14313: ST_TO_ADDR
14314: LD_VAR 0 12
14318: PUSH
14319: FOR_TO
14320: IFFALSE 14650
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14322: LD_VAR 0 12
14326: PUSH
14327: LD_VAR 0 7
14331: ARRAY
14332: PUSH
14333: LD_INT 1
14335: ARRAY
14336: PPUSH
14337: LD_VAR 0 12
14341: PUSH
14342: LD_VAR 0 7
14346: ARRAY
14347: PUSH
14348: LD_INT 2
14350: ARRAY
14351: PPUSH
14352: CALL_OW 488
14356: NOT
14357: PUSH
14358: LD_VAR 0 12
14362: PUSH
14363: LD_VAR 0 7
14367: ARRAY
14368: PUSH
14369: LD_INT 1
14371: ARRAY
14372: PPUSH
14373: LD_VAR 0 12
14377: PUSH
14378: LD_VAR 0 7
14382: ARRAY
14383: PUSH
14384: LD_INT 2
14386: ARRAY
14387: PPUSH
14388: CALL_OW 428
14392: PUSH
14393: LD_INT 0
14395: GREATER
14396: OR
14397: PUSH
14398: LD_VAR 0 12
14402: PUSH
14403: LD_VAR 0 7
14407: ARRAY
14408: PUSH
14409: LD_INT 1
14411: ARRAY
14412: PPUSH
14413: LD_VAR 0 12
14417: PUSH
14418: LD_VAR 0 7
14422: ARRAY
14423: PUSH
14424: LD_INT 2
14426: ARRAY
14427: PPUSH
14428: CALL_OW 351
14432: OR
14433: IFFALSE 14439
// exit ;
14435: POP
14436: POP
14437: GO 14731
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14439: LD_ADDR_VAR 0 8
14443: PUSH
14444: LD_VAR 0 12
14448: PUSH
14449: LD_VAR 0 7
14453: ARRAY
14454: PUSH
14455: LD_INT 1
14457: ARRAY
14458: PPUSH
14459: LD_VAR 0 12
14463: PUSH
14464: LD_VAR 0 7
14468: ARRAY
14469: PUSH
14470: LD_INT 2
14472: ARRAY
14473: PPUSH
14474: CALL_OW 546
14478: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14479: LD_VAR 0 8
14483: PUSH
14484: LD_INT 1
14486: ARRAY
14487: PUSH
14488: LD_VAR 0 8
14492: PUSH
14493: LD_INT 2
14495: ARRAY
14496: PUSH
14497: LD_VAR 0 13
14501: PUSH
14502: LD_INT 2
14504: PLUS
14505: GREATER
14506: OR
14507: PUSH
14508: LD_VAR 0 8
14512: PUSH
14513: LD_INT 2
14515: ARRAY
14516: PUSH
14517: LD_VAR 0 13
14521: PUSH
14522: LD_INT 2
14524: MINUS
14525: LESS
14526: OR
14527: PUSH
14528: LD_VAR 0 8
14532: PUSH
14533: LD_INT 3
14535: ARRAY
14536: PUSH
14537: LD_INT 0
14539: PUSH
14540: LD_INT 8
14542: PUSH
14543: LD_INT 9
14545: PUSH
14546: LD_INT 10
14548: PUSH
14549: LD_INT 11
14551: PUSH
14552: LD_INT 12
14554: PUSH
14555: LD_INT 13
14557: PUSH
14558: LD_INT 16
14560: PUSH
14561: LD_INT 17
14563: PUSH
14564: LD_INT 18
14566: PUSH
14567: LD_INT 19
14569: PUSH
14570: LD_INT 20
14572: PUSH
14573: LD_INT 21
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: IN
14591: NOT
14592: OR
14593: PUSH
14594: LD_VAR 0 8
14598: PUSH
14599: LD_INT 5
14601: ARRAY
14602: NOT
14603: OR
14604: PUSH
14605: LD_VAR 0 8
14609: PUSH
14610: LD_INT 6
14612: ARRAY
14613: PUSH
14614: LD_INT 1
14616: PUSH
14617: LD_INT 2
14619: PUSH
14620: LD_INT 7
14622: PUSH
14623: LD_INT 9
14625: PUSH
14626: LD_INT 10
14628: PUSH
14629: LD_INT 11
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: IN
14640: NOT
14641: OR
14642: IFFALSE 14648
// exit ;
14644: POP
14645: POP
14646: GO 14731
// end ;
14648: GO 14319
14650: POP
14651: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14652: LD_VAR 0 9
14656: PPUSH
14657: LD_VAR 0 3
14661: PPUSH
14662: LD_VAR 0 4
14666: PPUSH
14667: LD_INT 20
14669: PPUSH
14670: CALL 6677 0 4
14674: PUSH
14675: LD_INT 4
14677: ARRAY
14678: IFFALSE 14682
// exit ;
14680: GO 14731
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14682: LD_VAR 0 2
14686: PUSH
14687: LD_INT 29
14689: PUSH
14690: LD_INT 30
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: IN
14697: PUSH
14698: LD_VAR 0 3
14702: PPUSH
14703: LD_VAR 0 4
14707: PPUSH
14708: LD_VAR 0 9
14712: PPUSH
14713: CALL_OW 440
14717: NOT
14718: AND
14719: IFFALSE 14723
// exit ;
14721: GO 14731
// result := true ;
14723: LD_ADDR_VAR 0 6
14727: PUSH
14728: LD_INT 1
14730: ST_TO_ADDR
// end ;
14731: LD_VAR 0 6
14735: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14736: LD_INT 0
14738: PPUSH
14739: PPUSH
14740: PPUSH
14741: PPUSH
14742: PPUSH
14743: PPUSH
14744: PPUSH
14745: PPUSH
14746: PPUSH
14747: PPUSH
14748: PPUSH
14749: PPUSH
14750: PPUSH
14751: PPUSH
14752: PPUSH
14753: PPUSH
14754: PPUSH
14755: PPUSH
14756: PPUSH
14757: PPUSH
14758: PPUSH
14759: PPUSH
14760: PPUSH
14761: PPUSH
14762: PPUSH
14763: PPUSH
14764: PPUSH
14765: PPUSH
14766: PPUSH
14767: PPUSH
14768: PPUSH
14769: PPUSH
14770: PPUSH
14771: PPUSH
14772: PPUSH
14773: PPUSH
14774: PPUSH
14775: PPUSH
14776: PPUSH
14777: PPUSH
14778: PPUSH
14779: PPUSH
14780: PPUSH
14781: PPUSH
14782: PPUSH
14783: PPUSH
14784: PPUSH
14785: PPUSH
14786: PPUSH
14787: PPUSH
14788: PPUSH
14789: PPUSH
14790: PPUSH
14791: PPUSH
14792: PPUSH
14793: PPUSH
14794: PPUSH
14795: PPUSH
// result = [ ] ;
14796: LD_ADDR_VAR 0 7
14800: PUSH
14801: EMPTY
14802: ST_TO_ADDR
// temp_list = [ ] ;
14803: LD_ADDR_VAR 0 9
14807: PUSH
14808: EMPTY
14809: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14810: LD_VAR 0 4
14814: PUSH
14815: LD_INT 0
14817: PUSH
14818: LD_INT 1
14820: PUSH
14821: LD_INT 2
14823: PUSH
14824: LD_INT 3
14826: PUSH
14827: LD_INT 4
14829: PUSH
14830: LD_INT 5
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: IN
14841: NOT
14842: PUSH
14843: LD_VAR 0 1
14847: PUSH
14848: LD_INT 0
14850: PUSH
14851: LD_INT 1
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: IN
14858: PUSH
14859: LD_VAR 0 5
14863: PUSH
14864: LD_INT 1
14866: PUSH
14867: LD_INT 2
14869: PUSH
14870: LD_INT 3
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: LIST
14877: IN
14878: NOT
14879: AND
14880: OR
14881: IFFALSE 14885
// exit ;
14883: GO 33276
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14885: LD_VAR 0 1
14889: PUSH
14890: LD_INT 6
14892: PUSH
14893: LD_INT 7
14895: PUSH
14896: LD_INT 8
14898: PUSH
14899: LD_INT 13
14901: PUSH
14902: LD_INT 12
14904: PUSH
14905: LD_INT 15
14907: PUSH
14908: LD_INT 11
14910: PUSH
14911: LD_INT 14
14913: PUSH
14914: LD_INT 10
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: IN
14928: IFFALSE 14938
// btype = b_lab ;
14930: LD_ADDR_VAR 0 1
14934: PUSH
14935: LD_INT 6
14937: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14938: LD_VAR 0 6
14942: PUSH
14943: LD_INT 0
14945: PUSH
14946: LD_INT 1
14948: PUSH
14949: LD_INT 2
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: LIST
14956: IN
14957: NOT
14958: PUSH
14959: LD_VAR 0 1
14963: PUSH
14964: LD_INT 0
14966: PUSH
14967: LD_INT 1
14969: PUSH
14970: LD_INT 2
14972: PUSH
14973: LD_INT 3
14975: PUSH
14976: LD_INT 6
14978: PUSH
14979: LD_INT 36
14981: PUSH
14982: LD_INT 4
14984: PUSH
14985: LD_INT 5
14987: PUSH
14988: LD_INT 31
14990: PUSH
14991: LD_INT 32
14993: PUSH
14994: LD_INT 33
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: IN
15010: NOT
15011: PUSH
15012: LD_VAR 0 6
15016: PUSH
15017: LD_INT 1
15019: EQUAL
15020: AND
15021: OR
15022: PUSH
15023: LD_VAR 0 1
15027: PUSH
15028: LD_INT 2
15030: PUSH
15031: LD_INT 3
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: IN
15038: NOT
15039: PUSH
15040: LD_VAR 0 6
15044: PUSH
15045: LD_INT 2
15047: EQUAL
15048: AND
15049: OR
15050: IFFALSE 15060
// mode = 0 ;
15052: LD_ADDR_VAR 0 6
15056: PUSH
15057: LD_INT 0
15059: ST_TO_ADDR
// case mode of 0 :
15060: LD_VAR 0 6
15064: PUSH
15065: LD_INT 0
15067: DOUBLE
15068: EQUAL
15069: IFTRUE 15073
15071: GO 26526
15073: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15074: LD_ADDR_VAR 0 11
15078: PUSH
15079: LD_INT 0
15081: PUSH
15082: LD_INT 0
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: LD_INT 0
15091: PUSH
15092: LD_INT 1
15094: NEG
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 1
15102: PUSH
15103: LD_INT 0
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 1
15112: PUSH
15113: LD_INT 1
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PUSH
15120: LD_INT 0
15122: PUSH
15123: LD_INT 1
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: LD_INT 1
15132: NEG
15133: PUSH
15134: LD_INT 0
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: LD_INT 1
15143: NEG
15144: PUSH
15145: LD_INT 1
15147: NEG
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: LD_INT 1
15155: NEG
15156: PUSH
15157: LD_INT 2
15159: NEG
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 0
15167: PUSH
15168: LD_INT 2
15170: NEG
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: LD_INT 1
15178: PUSH
15179: LD_INT 1
15181: NEG
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 1
15189: PUSH
15190: LD_INT 2
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 0
15199: PUSH
15200: LD_INT 2
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: PUSH
15207: LD_INT 1
15209: NEG
15210: PUSH
15211: LD_INT 1
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: LD_INT 1
15220: PUSH
15221: LD_INT 3
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: LD_INT 0
15230: PUSH
15231: LD_INT 3
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 1
15240: NEG
15241: PUSH
15242: LD_INT 2
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15267: LD_ADDR_VAR 0 12
15271: PUSH
15272: LD_INT 0
15274: PUSH
15275: LD_INT 0
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: LD_INT 0
15284: PUSH
15285: LD_INT 1
15287: NEG
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: LD_INT 1
15295: PUSH
15296: LD_INT 0
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 1
15305: PUSH
15306: LD_INT 1
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: LD_INT 0
15315: PUSH
15316: LD_INT 1
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 1
15325: NEG
15326: PUSH
15327: LD_INT 0
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PUSH
15334: LD_INT 1
15336: NEG
15337: PUSH
15338: LD_INT 1
15340: NEG
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 1
15348: PUSH
15349: LD_INT 1
15351: NEG
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 2
15359: PUSH
15360: LD_INT 0
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 2
15369: PUSH
15370: LD_INT 1
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: LD_INT 1
15379: NEG
15380: PUSH
15381: LD_INT 1
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: LD_INT 2
15390: NEG
15391: PUSH
15392: LD_INT 0
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: LD_INT 2
15401: NEG
15402: PUSH
15403: LD_INT 1
15405: NEG
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 2
15413: NEG
15414: PUSH
15415: LD_INT 1
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: LD_INT 3
15424: NEG
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 3
15435: NEG
15436: PUSH
15437: LD_INT 1
15439: NEG
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15463: LD_ADDR_VAR 0 13
15467: PUSH
15468: LD_INT 0
15470: PUSH
15471: LD_INT 0
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 0
15480: PUSH
15481: LD_INT 1
15483: NEG
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 1
15491: PUSH
15492: LD_INT 0
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 1
15501: PUSH
15502: LD_INT 1
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: LD_INT 0
15511: PUSH
15512: LD_INT 1
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: PUSH
15519: LD_INT 1
15521: NEG
15522: PUSH
15523: LD_INT 0
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: LD_INT 1
15532: NEG
15533: PUSH
15534: LD_INT 1
15536: NEG
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 1
15544: NEG
15545: PUSH
15546: LD_INT 2
15548: NEG
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 2
15556: PUSH
15557: LD_INT 1
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 2
15566: PUSH
15567: LD_INT 2
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: LD_INT 1
15576: PUSH
15577: LD_INT 2
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: LD_INT 2
15586: NEG
15587: PUSH
15588: LD_INT 1
15590: NEG
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 2
15598: NEG
15599: PUSH
15600: LD_INT 2
15602: NEG
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: LD_INT 2
15610: NEG
15611: PUSH
15612: LD_INT 3
15614: NEG
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: LD_INT 3
15622: NEG
15623: PUSH
15624: LD_INT 2
15626: NEG
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 3
15634: NEG
15635: PUSH
15636: LD_INT 3
15638: NEG
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15662: LD_ADDR_VAR 0 14
15666: PUSH
15667: LD_INT 0
15669: PUSH
15670: LD_INT 0
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 0
15679: PUSH
15680: LD_INT 1
15682: NEG
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: LD_INT 1
15690: PUSH
15691: LD_INT 0
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 1
15700: PUSH
15701: LD_INT 1
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 0
15710: PUSH
15711: LD_INT 1
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 1
15720: NEG
15721: PUSH
15722: LD_INT 0
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 1
15731: NEG
15732: PUSH
15733: LD_INT 1
15735: NEG
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: LD_INT 1
15743: NEG
15744: PUSH
15745: LD_INT 2
15747: NEG
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: LD_INT 0
15755: PUSH
15756: LD_INT 2
15758: NEG
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: PUSH
15764: LD_INT 1
15766: PUSH
15767: LD_INT 1
15769: NEG
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 1
15777: PUSH
15778: LD_INT 2
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: LD_INT 0
15787: PUSH
15788: LD_INT 2
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: PUSH
15795: LD_INT 1
15797: NEG
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 1
15808: NEG
15809: PUSH
15810: LD_INT 3
15812: NEG
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 0
15820: PUSH
15821: LD_INT 3
15823: NEG
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: LD_INT 1
15831: PUSH
15832: LD_INT 2
15834: NEG
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15858: LD_ADDR_VAR 0 15
15862: PUSH
15863: LD_INT 0
15865: PUSH
15866: LD_INT 0
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: LD_INT 0
15875: PUSH
15876: LD_INT 1
15878: NEG
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 1
15886: PUSH
15887: LD_INT 0
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 1
15896: PUSH
15897: LD_INT 1
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: LD_INT 0
15906: PUSH
15907: LD_INT 1
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 1
15916: NEG
15917: PUSH
15918: LD_INT 0
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 1
15927: NEG
15928: PUSH
15929: LD_INT 1
15931: NEG
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: LD_INT 1
15939: PUSH
15940: LD_INT 1
15942: NEG
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PUSH
15948: LD_INT 2
15950: PUSH
15951: LD_INT 0
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: LD_INT 2
15960: PUSH
15961: LD_INT 1
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: LD_INT 1
15970: NEG
15971: PUSH
15972: LD_INT 1
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 2
15981: NEG
15982: PUSH
15983: LD_INT 0
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: LD_INT 2
15992: NEG
15993: PUSH
15994: LD_INT 1
15996: NEG
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 2
16004: PUSH
16005: LD_INT 1
16007: NEG
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 3
16015: PUSH
16016: LD_INT 0
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: LD_INT 3
16025: PUSH
16026: LD_INT 1
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16051: LD_ADDR_VAR 0 16
16055: PUSH
16056: LD_INT 0
16058: PUSH
16059: LD_INT 0
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PUSH
16066: LD_INT 0
16068: PUSH
16069: LD_INT 1
16071: NEG
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 1
16079: PUSH
16080: LD_INT 0
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 1
16089: PUSH
16090: LD_INT 1
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: LD_INT 0
16099: PUSH
16100: LD_INT 1
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PUSH
16107: LD_INT 1
16109: NEG
16110: PUSH
16111: LD_INT 0
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 1
16120: NEG
16121: PUSH
16122: LD_INT 1
16124: NEG
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 1
16132: NEG
16133: PUSH
16134: LD_INT 2
16136: NEG
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 2
16144: PUSH
16145: LD_INT 1
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 2
16154: PUSH
16155: LD_INT 2
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: LD_INT 1
16164: PUSH
16165: LD_INT 2
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: LD_INT 2
16174: NEG
16175: PUSH
16176: LD_INT 1
16178: NEG
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 2
16186: NEG
16187: PUSH
16188: LD_INT 2
16190: NEG
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 3
16198: PUSH
16199: LD_INT 2
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: LD_INT 3
16208: PUSH
16209: LD_INT 3
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 2
16218: PUSH
16219: LD_INT 3
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16244: LD_ADDR_VAR 0 17
16248: PUSH
16249: LD_INT 0
16251: PUSH
16252: LD_INT 0
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 0
16261: PUSH
16262: LD_INT 1
16264: NEG
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 1
16272: PUSH
16273: LD_INT 0
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 1
16282: PUSH
16283: LD_INT 1
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 0
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 1
16302: NEG
16303: PUSH
16304: LD_INT 0
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 1
16313: NEG
16314: PUSH
16315: LD_INT 1
16317: NEG
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 1
16325: NEG
16326: PUSH
16327: LD_INT 2
16329: NEG
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 0
16337: PUSH
16338: LD_INT 2
16340: NEG
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 1
16348: PUSH
16349: LD_INT 1
16351: NEG
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 2
16359: PUSH
16360: LD_INT 0
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 2
16369: PUSH
16370: LD_INT 1
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 2
16379: PUSH
16380: LD_INT 2
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 1
16389: PUSH
16390: LD_INT 2
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 0
16399: PUSH
16400: LD_INT 2
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: LD_INT 1
16409: NEG
16410: PUSH
16411: LD_INT 1
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: PUSH
16418: LD_INT 2
16420: NEG
16421: PUSH
16422: LD_INT 0
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: LD_INT 2
16431: NEG
16432: PUSH
16433: LD_INT 1
16435: NEG
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 2
16443: NEG
16444: PUSH
16445: LD_INT 2
16447: NEG
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16474: LD_ADDR_VAR 0 18
16478: PUSH
16479: LD_INT 0
16481: PUSH
16482: LD_INT 0
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 0
16491: PUSH
16492: LD_INT 1
16494: NEG
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 1
16502: PUSH
16503: LD_INT 0
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 1
16512: PUSH
16513: LD_INT 1
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 0
16522: PUSH
16523: LD_INT 1
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 1
16532: NEG
16533: PUSH
16534: LD_INT 0
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 1
16543: NEG
16544: PUSH
16545: LD_INT 1
16547: NEG
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: LD_INT 1
16555: NEG
16556: PUSH
16557: LD_INT 2
16559: NEG
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: LD_INT 0
16567: PUSH
16568: LD_INT 2
16570: NEG
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 1
16578: PUSH
16579: LD_INT 1
16581: NEG
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 2
16589: PUSH
16590: LD_INT 0
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 2
16599: PUSH
16600: LD_INT 1
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 2
16609: PUSH
16610: LD_INT 2
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 1
16619: PUSH
16620: LD_INT 2
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 0
16629: PUSH
16630: LD_INT 2
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 1
16639: NEG
16640: PUSH
16641: LD_INT 1
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: LD_INT 2
16650: NEG
16651: PUSH
16652: LD_INT 0
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 2
16661: NEG
16662: PUSH
16663: LD_INT 1
16665: NEG
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PUSH
16671: LD_INT 2
16673: NEG
16674: PUSH
16675: LD_INT 2
16677: NEG
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16704: LD_ADDR_VAR 0 19
16708: PUSH
16709: LD_INT 0
16711: PUSH
16712: LD_INT 0
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 0
16721: PUSH
16722: LD_INT 1
16724: NEG
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 1
16732: PUSH
16733: LD_INT 0
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: PUSH
16740: LD_INT 1
16742: PUSH
16743: LD_INT 1
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 0
16752: PUSH
16753: LD_INT 1
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 1
16762: NEG
16763: PUSH
16764: LD_INT 0
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: LD_INT 1
16773: NEG
16774: PUSH
16775: LD_INT 1
16777: NEG
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 1
16785: NEG
16786: PUSH
16787: LD_INT 2
16789: NEG
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: LD_INT 0
16797: PUSH
16798: LD_INT 2
16800: NEG
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 1
16808: PUSH
16809: LD_INT 1
16811: NEG
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PUSH
16817: LD_INT 2
16819: PUSH
16820: LD_INT 0
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 2
16829: PUSH
16830: LD_INT 1
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: LD_INT 2
16839: PUSH
16840: LD_INT 2
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 1
16849: PUSH
16850: LD_INT 2
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 0
16859: PUSH
16860: LD_INT 2
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 1
16869: NEG
16870: PUSH
16871: LD_INT 1
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 2
16880: NEG
16881: PUSH
16882: LD_INT 0
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 2
16891: NEG
16892: PUSH
16893: LD_INT 1
16895: NEG
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 2
16903: NEG
16904: PUSH
16905: LD_INT 2
16907: NEG
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16934: LD_ADDR_VAR 0 20
16938: PUSH
16939: LD_INT 0
16941: PUSH
16942: LD_INT 0
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PUSH
16949: LD_INT 0
16951: PUSH
16952: LD_INT 1
16954: NEG
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: LD_INT 1
16962: PUSH
16963: LD_INT 0
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: LD_INT 1
16972: PUSH
16973: LD_INT 1
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PUSH
16980: LD_INT 0
16982: PUSH
16983: LD_INT 1
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: LD_INT 1
16992: NEG
16993: PUSH
16994: LD_INT 0
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 1
17003: NEG
17004: PUSH
17005: LD_INT 1
17007: NEG
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PUSH
17013: LD_INT 1
17015: NEG
17016: PUSH
17017: LD_INT 2
17019: NEG
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PUSH
17025: LD_INT 0
17027: PUSH
17028: LD_INT 2
17030: NEG
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: LD_INT 1
17038: PUSH
17039: LD_INT 1
17041: NEG
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 2
17049: PUSH
17050: LD_INT 0
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 2
17059: PUSH
17060: LD_INT 1
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 2
17069: PUSH
17070: LD_INT 2
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 1
17079: PUSH
17080: LD_INT 2
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 0
17089: PUSH
17090: LD_INT 2
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 1
17099: NEG
17100: PUSH
17101: LD_INT 1
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: LD_INT 2
17110: NEG
17111: PUSH
17112: LD_INT 0
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 2
17121: NEG
17122: PUSH
17123: LD_INT 1
17125: NEG
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: LD_INT 2
17133: NEG
17134: PUSH
17135: LD_INT 2
17137: NEG
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17164: LD_ADDR_VAR 0 21
17168: PUSH
17169: LD_INT 0
17171: PUSH
17172: LD_INT 0
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: LD_INT 0
17181: PUSH
17182: LD_INT 1
17184: NEG
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: LD_INT 1
17192: PUSH
17193: LD_INT 0
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: LD_INT 1
17202: PUSH
17203: LD_INT 1
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 0
17212: PUSH
17213: LD_INT 1
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 1
17222: NEG
17223: PUSH
17224: LD_INT 0
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: LD_INT 1
17233: NEG
17234: PUSH
17235: LD_INT 1
17237: NEG
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 1
17245: NEG
17246: PUSH
17247: LD_INT 2
17249: NEG
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 0
17257: PUSH
17258: LD_INT 2
17260: NEG
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: LD_INT 1
17268: PUSH
17269: LD_INT 1
17271: NEG
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 2
17279: PUSH
17280: LD_INT 0
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 2
17289: PUSH
17290: LD_INT 1
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 2
17299: PUSH
17300: LD_INT 2
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 1
17309: PUSH
17310: LD_INT 2
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 0
17319: PUSH
17320: LD_INT 2
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 1
17329: NEG
17330: PUSH
17331: LD_INT 1
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 2
17340: NEG
17341: PUSH
17342: LD_INT 0
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 2
17351: NEG
17352: PUSH
17353: LD_INT 1
17355: NEG
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: LD_INT 2
17363: NEG
17364: PUSH
17365: LD_INT 2
17367: NEG
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17394: LD_ADDR_VAR 0 22
17398: PUSH
17399: LD_INT 0
17401: PUSH
17402: LD_INT 0
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 0
17411: PUSH
17412: LD_INT 1
17414: NEG
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 1
17422: PUSH
17423: LD_INT 0
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 1
17432: PUSH
17433: LD_INT 1
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 0
17442: PUSH
17443: LD_INT 1
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: LD_INT 1
17452: NEG
17453: PUSH
17454: LD_INT 0
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: LD_INT 1
17463: NEG
17464: PUSH
17465: LD_INT 1
17467: NEG
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 1
17475: NEG
17476: PUSH
17477: LD_INT 2
17479: NEG
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 0
17487: PUSH
17488: LD_INT 2
17490: NEG
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 1
17498: PUSH
17499: LD_INT 1
17501: NEG
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 2
17509: PUSH
17510: LD_INT 0
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: LD_INT 2
17519: PUSH
17520: LD_INT 1
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 2
17529: PUSH
17530: LD_INT 2
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 1
17539: PUSH
17540: LD_INT 2
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 0
17549: PUSH
17550: LD_INT 2
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 1
17559: NEG
17560: PUSH
17561: LD_INT 1
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 2
17570: NEG
17571: PUSH
17572: LD_INT 0
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 2
17581: NEG
17582: PUSH
17583: LD_INT 1
17585: NEG
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: LD_INT 2
17593: NEG
17594: PUSH
17595: LD_INT 2
17597: NEG
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17624: LD_ADDR_VAR 0 23
17628: PUSH
17629: LD_INT 0
17631: PUSH
17632: LD_INT 0
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 0
17641: PUSH
17642: LD_INT 1
17644: NEG
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: LD_INT 1
17652: PUSH
17653: LD_INT 0
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PUSH
17660: LD_INT 1
17662: PUSH
17663: LD_INT 1
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: LD_INT 0
17672: PUSH
17673: LD_INT 1
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 1
17682: NEG
17683: PUSH
17684: LD_INT 0
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 1
17693: NEG
17694: PUSH
17695: LD_INT 1
17697: NEG
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 1
17705: NEG
17706: PUSH
17707: LD_INT 2
17709: NEG
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 0
17717: PUSH
17718: LD_INT 2
17720: NEG
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 1
17728: PUSH
17729: LD_INT 1
17731: NEG
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 2
17739: PUSH
17740: LD_INT 0
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 2
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 2
17759: PUSH
17760: LD_INT 2
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 1
17769: PUSH
17770: LD_INT 2
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 0
17779: PUSH
17780: LD_INT 2
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 1
17789: NEG
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 2
17800: NEG
17801: PUSH
17802: LD_INT 0
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: LD_INT 2
17811: NEG
17812: PUSH
17813: LD_INT 1
17815: NEG
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 2
17823: NEG
17824: PUSH
17825: LD_INT 2
17827: NEG
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 2
17835: NEG
17836: PUSH
17837: LD_INT 3
17839: NEG
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 1
17847: NEG
17848: PUSH
17849: LD_INT 3
17851: NEG
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: LD_INT 1
17859: PUSH
17860: LD_INT 2
17862: NEG
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 2
17870: PUSH
17871: LD_INT 1
17873: NEG
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17904: LD_ADDR_VAR 0 24
17908: PUSH
17909: LD_INT 0
17911: PUSH
17912: LD_INT 0
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 0
17921: PUSH
17922: LD_INT 1
17924: NEG
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 1
17932: PUSH
17933: LD_INT 0
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 1
17942: PUSH
17943: LD_INT 1
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 0
17952: PUSH
17953: LD_INT 1
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 1
17962: NEG
17963: PUSH
17964: LD_INT 0
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 1
17973: NEG
17974: PUSH
17975: LD_INT 1
17977: NEG
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 1
17985: NEG
17986: PUSH
17987: LD_INT 2
17989: NEG
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 0
17997: PUSH
17998: LD_INT 2
18000: NEG
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 1
18008: PUSH
18009: LD_INT 1
18011: NEG
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 2
18019: PUSH
18020: LD_INT 0
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 2
18029: PUSH
18030: LD_INT 1
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 2
18039: PUSH
18040: LD_INT 2
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 1
18049: PUSH
18050: LD_INT 2
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 0
18059: PUSH
18060: LD_INT 2
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: LD_INT 1
18069: NEG
18070: PUSH
18071: LD_INT 1
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 2
18080: NEG
18081: PUSH
18082: LD_INT 0
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 2
18091: NEG
18092: PUSH
18093: LD_INT 1
18095: NEG
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 2
18103: NEG
18104: PUSH
18105: LD_INT 2
18107: NEG
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 1
18115: PUSH
18116: LD_INT 2
18118: NEG
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 2
18126: PUSH
18127: LD_INT 1
18129: NEG
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 3
18137: PUSH
18138: LD_INT 1
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 3
18147: PUSH
18148: LD_INT 2
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18180: LD_ADDR_VAR 0 25
18184: PUSH
18185: LD_INT 0
18187: PUSH
18188: LD_INT 0
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 0
18197: PUSH
18198: LD_INT 1
18200: NEG
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 1
18208: PUSH
18209: LD_INT 0
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: LD_INT 1
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 0
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 1
18238: NEG
18239: PUSH
18240: LD_INT 0
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 1
18249: NEG
18250: PUSH
18251: LD_INT 1
18253: NEG
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 1
18261: NEG
18262: PUSH
18263: LD_INT 2
18265: NEG
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 0
18273: PUSH
18274: LD_INT 2
18276: NEG
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 1
18284: PUSH
18285: LD_INT 1
18287: NEG
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 2
18295: PUSH
18296: LD_INT 0
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 2
18305: PUSH
18306: LD_INT 1
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 2
18315: PUSH
18316: LD_INT 2
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 1
18325: PUSH
18326: LD_INT 2
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 0
18335: PUSH
18336: LD_INT 2
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 1
18345: NEG
18346: PUSH
18347: LD_INT 1
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 2
18356: NEG
18357: PUSH
18358: LD_INT 0
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 2
18367: NEG
18368: PUSH
18369: LD_INT 1
18371: NEG
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 2
18379: NEG
18380: PUSH
18381: LD_INT 2
18383: NEG
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 3
18391: PUSH
18392: LD_INT 1
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 3
18401: PUSH
18402: LD_INT 2
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 2
18411: PUSH
18412: LD_INT 3
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: LD_INT 3
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18454: LD_ADDR_VAR 0 26
18458: PUSH
18459: LD_INT 0
18461: PUSH
18462: LD_INT 0
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 0
18471: PUSH
18472: LD_INT 1
18474: NEG
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: LD_INT 0
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 1
18492: PUSH
18493: LD_INT 1
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 0
18502: PUSH
18503: LD_INT 1
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 1
18512: NEG
18513: PUSH
18514: LD_INT 0
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 1
18523: NEG
18524: PUSH
18525: LD_INT 1
18527: NEG
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 1
18535: NEG
18536: PUSH
18537: LD_INT 2
18539: NEG
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 0
18547: PUSH
18548: LD_INT 2
18550: NEG
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 1
18558: PUSH
18559: LD_INT 1
18561: NEG
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 2
18569: PUSH
18570: LD_INT 0
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 2
18579: PUSH
18580: LD_INT 1
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 2
18589: PUSH
18590: LD_INT 2
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 1
18599: PUSH
18600: LD_INT 2
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 0
18609: PUSH
18610: LD_INT 2
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 1
18619: NEG
18620: PUSH
18621: LD_INT 1
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 2
18630: NEG
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 2
18641: NEG
18642: PUSH
18643: LD_INT 1
18645: NEG
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 2
18653: NEG
18654: PUSH
18655: LD_INT 2
18657: NEG
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 2
18665: PUSH
18666: LD_INT 3
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 1
18675: PUSH
18676: LD_INT 3
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 1
18685: NEG
18686: PUSH
18687: LD_INT 2
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 2
18696: NEG
18697: PUSH
18698: LD_INT 1
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18730: LD_ADDR_VAR 0 27
18734: PUSH
18735: LD_INT 0
18737: PUSH
18738: LD_INT 0
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 0
18747: PUSH
18748: LD_INT 1
18750: NEG
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 1
18758: PUSH
18759: LD_INT 0
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: LD_INT 1
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 0
18778: PUSH
18779: LD_INT 1
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 1
18788: NEG
18789: PUSH
18790: LD_INT 0
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 1
18799: NEG
18800: PUSH
18801: LD_INT 1
18803: NEG
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 1
18811: NEG
18812: PUSH
18813: LD_INT 2
18815: NEG
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 0
18823: PUSH
18824: LD_INT 2
18826: NEG
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 1
18834: PUSH
18835: LD_INT 1
18837: NEG
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: LD_INT 2
18845: PUSH
18846: LD_INT 0
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 2
18855: PUSH
18856: LD_INT 1
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 2
18865: PUSH
18866: LD_INT 2
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 1
18875: PUSH
18876: LD_INT 2
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 0
18885: PUSH
18886: LD_INT 2
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 1
18895: NEG
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 2
18906: NEG
18907: PUSH
18908: LD_INT 0
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 2
18917: NEG
18918: PUSH
18919: LD_INT 1
18921: NEG
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 2
18929: NEG
18930: PUSH
18931: LD_INT 2
18933: NEG
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 1
18941: NEG
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 2
18952: NEG
18953: PUSH
18954: LD_INT 1
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 3
18963: NEG
18964: PUSH
18965: LD_INT 1
18967: NEG
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 3
18975: NEG
18976: PUSH
18977: LD_INT 2
18979: NEG
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19010: LD_ADDR_VAR 0 28
19014: PUSH
19015: LD_INT 0
19017: PUSH
19018: LD_INT 0
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 0
19027: PUSH
19028: LD_INT 1
19030: NEG
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 1
19038: PUSH
19039: LD_INT 0
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 1
19048: PUSH
19049: LD_INT 1
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 0
19058: PUSH
19059: LD_INT 1
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 1
19068: NEG
19069: PUSH
19070: LD_INT 0
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 1
19079: NEG
19080: PUSH
19081: LD_INT 1
19083: NEG
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 1
19091: NEG
19092: PUSH
19093: LD_INT 2
19095: NEG
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 0
19103: PUSH
19104: LD_INT 2
19106: NEG
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 1
19114: PUSH
19115: LD_INT 1
19117: NEG
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 2
19125: PUSH
19126: LD_INT 0
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 2
19135: PUSH
19136: LD_INT 1
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 2
19145: PUSH
19146: LD_INT 2
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 1
19155: PUSH
19156: LD_INT 2
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 0
19165: PUSH
19166: LD_INT 2
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 1
19175: NEG
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 2
19186: NEG
19187: PUSH
19188: LD_INT 0
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 2
19197: NEG
19198: PUSH
19199: LD_INT 1
19201: NEG
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 2
19209: NEG
19210: PUSH
19211: LD_INT 2
19213: NEG
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 2
19221: NEG
19222: PUSH
19223: LD_INT 3
19225: NEG
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 1
19233: NEG
19234: PUSH
19235: LD_INT 3
19237: NEG
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 3
19245: NEG
19246: PUSH
19247: LD_INT 1
19249: NEG
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 3
19257: NEG
19258: PUSH
19259: LD_INT 2
19261: NEG
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19292: LD_ADDR_VAR 0 29
19296: PUSH
19297: LD_INT 0
19299: PUSH
19300: LD_INT 0
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 0
19309: PUSH
19310: LD_INT 1
19312: NEG
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 1
19320: PUSH
19321: LD_INT 0
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 1
19330: PUSH
19331: LD_INT 1
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 0
19340: PUSH
19341: LD_INT 1
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 1
19350: NEG
19351: PUSH
19352: LD_INT 0
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: LD_INT 1
19361: NEG
19362: PUSH
19363: LD_INT 1
19365: NEG
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 1
19373: NEG
19374: PUSH
19375: LD_INT 2
19377: NEG
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 0
19385: PUSH
19386: LD_INT 2
19388: NEG
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 1
19396: PUSH
19397: LD_INT 1
19399: NEG
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 2
19407: PUSH
19408: LD_INT 0
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 2
19417: PUSH
19418: LD_INT 1
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 1
19427: PUSH
19428: LD_INT 2
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 0
19437: PUSH
19438: LD_INT 2
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 1
19447: NEG
19448: PUSH
19449: LD_INT 1
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 2
19458: NEG
19459: PUSH
19460: LD_INT 1
19462: NEG
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 2
19470: NEG
19471: PUSH
19472: LD_INT 2
19474: NEG
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 2
19482: NEG
19483: PUSH
19484: LD_INT 3
19486: NEG
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 2
19494: PUSH
19495: LD_INT 1
19497: NEG
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 3
19505: PUSH
19506: LD_INT 1
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 1
19515: PUSH
19516: LD_INT 3
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 1
19525: NEG
19526: PUSH
19527: LD_INT 2
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 3
19536: NEG
19537: PUSH
19538: LD_INT 2
19540: NEG
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19571: LD_ADDR_VAR 0 30
19575: PUSH
19576: LD_INT 0
19578: PUSH
19579: LD_INT 0
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 0
19588: PUSH
19589: LD_INT 1
19591: NEG
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 1
19599: PUSH
19600: LD_INT 0
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 1
19609: PUSH
19610: LD_INT 1
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 0
19619: PUSH
19620: LD_INT 1
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 1
19629: NEG
19630: PUSH
19631: LD_INT 0
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 1
19640: NEG
19641: PUSH
19642: LD_INT 1
19644: NEG
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: LD_INT 1
19652: NEG
19653: PUSH
19654: LD_INT 2
19656: NEG
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 0
19664: PUSH
19665: LD_INT 2
19667: NEG
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 1
19675: PUSH
19676: LD_INT 1
19678: NEG
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 2
19686: PUSH
19687: LD_INT 0
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 2
19696: PUSH
19697: LD_INT 1
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 2
19706: PUSH
19707: LD_INT 2
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 1
19716: PUSH
19717: LD_INT 2
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 1
19726: NEG
19727: PUSH
19728: LD_INT 1
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 2
19737: NEG
19738: PUSH
19739: LD_INT 0
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 2
19748: NEG
19749: PUSH
19750: LD_INT 1
19752: NEG
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 1
19760: NEG
19761: PUSH
19762: LD_INT 3
19764: NEG
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 1
19772: PUSH
19773: LD_INT 2
19775: NEG
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 3
19783: PUSH
19784: LD_INT 2
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 2
19793: PUSH
19794: LD_INT 3
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 2
19803: NEG
19804: PUSH
19805: LD_INT 1
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 3
19814: NEG
19815: PUSH
19816: LD_INT 1
19818: NEG
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19849: LD_ADDR_VAR 0 31
19853: PUSH
19854: LD_INT 0
19856: PUSH
19857: LD_INT 0
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 0
19866: PUSH
19867: LD_INT 1
19869: NEG
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 1
19877: PUSH
19878: LD_INT 0
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 1
19887: PUSH
19888: LD_INT 1
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 0
19897: PUSH
19898: LD_INT 1
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 1
19907: NEG
19908: PUSH
19909: LD_INT 0
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 1
19918: NEG
19919: PUSH
19920: LD_INT 1
19922: NEG
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 1
19930: NEG
19931: PUSH
19932: LD_INT 2
19934: NEG
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 1
19942: PUSH
19943: LD_INT 1
19945: NEG
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 2
19953: PUSH
19954: LD_INT 0
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 2
19963: PUSH
19964: LD_INT 1
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 2
19973: PUSH
19974: LD_INT 2
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 1
19983: PUSH
19984: LD_INT 2
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 0
19993: PUSH
19994: LD_INT 2
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 1
20003: NEG
20004: PUSH
20005: LD_INT 1
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 2
20014: NEG
20015: PUSH
20016: LD_INT 1
20018: NEG
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 2
20026: NEG
20027: PUSH
20028: LD_INT 2
20030: NEG
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 2
20038: NEG
20039: PUSH
20040: LD_INT 3
20042: NEG
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 2
20050: PUSH
20051: LD_INT 1
20053: NEG
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 3
20061: PUSH
20062: LD_INT 1
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 1
20071: PUSH
20072: LD_INT 3
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 1
20081: NEG
20082: PUSH
20083: LD_INT 2
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 3
20092: NEG
20093: PUSH
20094: LD_INT 2
20096: NEG
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20127: LD_ADDR_VAR 0 32
20131: PUSH
20132: LD_INT 0
20134: PUSH
20135: LD_INT 0
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 0
20144: PUSH
20145: LD_INT 1
20147: NEG
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 1
20155: PUSH
20156: LD_INT 0
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 1
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 0
20175: PUSH
20176: LD_INT 1
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 1
20185: NEG
20186: PUSH
20187: LD_INT 0
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 1
20196: NEG
20197: PUSH
20198: LD_INT 1
20200: NEG
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 1
20208: NEG
20209: PUSH
20210: LD_INT 2
20212: NEG
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 0
20220: PUSH
20221: LD_INT 2
20223: NEG
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 1
20231: PUSH
20232: LD_INT 1
20234: NEG
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 2
20242: PUSH
20243: LD_INT 1
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 2
20252: PUSH
20253: LD_INT 2
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 1
20262: PUSH
20263: LD_INT 2
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 0
20272: PUSH
20273: LD_INT 2
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 1
20282: NEG
20283: PUSH
20284: LD_INT 1
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 2
20293: NEG
20294: PUSH
20295: LD_INT 0
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 2
20304: NEG
20305: PUSH
20306: LD_INT 1
20308: NEG
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 1
20316: NEG
20317: PUSH
20318: LD_INT 3
20320: NEG
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: LD_INT 2
20331: NEG
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 3
20339: PUSH
20340: LD_INT 2
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 2
20349: PUSH
20350: LD_INT 3
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 2
20359: NEG
20360: PUSH
20361: LD_INT 1
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 3
20370: NEG
20371: PUSH
20372: LD_INT 1
20374: NEG
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20405: LD_ADDR_VAR 0 33
20409: PUSH
20410: LD_INT 0
20412: PUSH
20413: LD_INT 0
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 0
20422: PUSH
20423: LD_INT 1
20425: NEG
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 1
20433: PUSH
20434: LD_INT 0
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 1
20443: PUSH
20444: LD_INT 1
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 0
20453: PUSH
20454: LD_INT 1
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 1
20463: NEG
20464: PUSH
20465: LD_INT 0
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 1
20474: NEG
20475: PUSH
20476: LD_INT 1
20478: NEG
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 1
20486: NEG
20487: PUSH
20488: LD_INT 2
20490: NEG
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 1
20498: PUSH
20499: LD_INT 1
20501: NEG
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 2
20509: PUSH
20510: LD_INT 0
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 2
20519: PUSH
20520: LD_INT 1
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 1
20529: PUSH
20530: LD_INT 2
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 0
20539: PUSH
20540: LD_INT 2
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 1
20549: NEG
20550: PUSH
20551: LD_INT 1
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 2
20560: NEG
20561: PUSH
20562: LD_INT 0
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 2
20571: NEG
20572: PUSH
20573: LD_INT 1
20575: NEG
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 2
20583: NEG
20584: PUSH
20585: LD_INT 2
20587: NEG
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 2
20595: NEG
20596: PUSH
20597: LD_INT 3
20599: NEG
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 2
20607: PUSH
20608: LD_INT 1
20610: NEG
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 3
20618: PUSH
20619: LD_INT 1
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 1
20628: PUSH
20629: LD_INT 3
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 1
20638: NEG
20639: PUSH
20640: LD_INT 2
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 3
20649: NEG
20650: PUSH
20651: LD_INT 2
20653: NEG
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20684: LD_ADDR_VAR 0 34
20688: PUSH
20689: LD_INT 0
20691: PUSH
20692: LD_INT 0
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 0
20701: PUSH
20702: LD_INT 1
20704: NEG
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: LD_INT 1
20712: PUSH
20713: LD_INT 0
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 1
20722: PUSH
20723: LD_INT 1
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 0
20732: PUSH
20733: LD_INT 1
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 1
20742: NEG
20743: PUSH
20744: LD_INT 0
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 1
20753: NEG
20754: PUSH
20755: LD_INT 1
20757: NEG
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 1
20765: NEG
20766: PUSH
20767: LD_INT 2
20769: NEG
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 0
20777: PUSH
20778: LD_INT 2
20780: NEG
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 1
20788: PUSH
20789: LD_INT 1
20791: NEG
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 2
20799: PUSH
20800: LD_INT 1
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 2
20809: PUSH
20810: LD_INT 2
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 1
20819: PUSH
20820: LD_INT 2
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 1
20829: NEG
20830: PUSH
20831: LD_INT 1
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 2
20840: NEG
20841: PUSH
20842: LD_INT 0
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 2
20851: NEG
20852: PUSH
20853: LD_INT 1
20855: NEG
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 2
20863: NEG
20864: PUSH
20865: LD_INT 2
20867: NEG
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 1
20875: NEG
20876: PUSH
20877: LD_INT 3
20879: NEG
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 1
20887: PUSH
20888: LD_INT 2
20890: NEG
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 3
20898: PUSH
20899: LD_INT 2
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 2
20908: PUSH
20909: LD_INT 3
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 2
20918: NEG
20919: PUSH
20920: LD_INT 1
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 3
20929: NEG
20930: PUSH
20931: LD_INT 1
20933: NEG
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20964: LD_ADDR_VAR 0 35
20968: PUSH
20969: LD_INT 0
20971: PUSH
20972: LD_INT 0
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 0
20981: PUSH
20982: LD_INT 1
20984: NEG
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 1
20992: PUSH
20993: LD_INT 0
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 1
21002: PUSH
21003: LD_INT 1
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 0
21012: PUSH
21013: LD_INT 1
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 1
21022: NEG
21023: PUSH
21024: LD_INT 0
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 1
21033: NEG
21034: PUSH
21035: LD_INT 1
21037: NEG
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 2
21045: PUSH
21046: LD_INT 1
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: LD_INT 2
21055: NEG
21056: PUSH
21057: LD_INT 1
21059: NEG
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21076: LD_ADDR_VAR 0 36
21080: PUSH
21081: LD_INT 0
21083: PUSH
21084: LD_INT 0
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 0
21093: PUSH
21094: LD_INT 1
21096: NEG
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 1
21104: PUSH
21105: LD_INT 0
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: LD_INT 1
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 0
21124: PUSH
21125: LD_INT 1
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 1
21134: NEG
21135: PUSH
21136: LD_INT 0
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 1
21145: NEG
21146: PUSH
21147: LD_INT 1
21149: NEG
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 1
21157: NEG
21158: PUSH
21159: LD_INT 2
21161: NEG
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 1
21169: PUSH
21170: LD_INT 2
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21188: LD_ADDR_VAR 0 37
21192: PUSH
21193: LD_INT 0
21195: PUSH
21196: LD_INT 0
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 0
21205: PUSH
21206: LD_INT 1
21208: NEG
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 1
21216: PUSH
21217: LD_INT 0
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 1
21226: PUSH
21227: LD_INT 1
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 0
21236: PUSH
21237: LD_INT 1
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 1
21246: NEG
21247: PUSH
21248: LD_INT 0
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 1
21257: NEG
21258: PUSH
21259: LD_INT 1
21261: NEG
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 1
21269: PUSH
21270: LD_INT 1
21272: NEG
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 1
21280: NEG
21281: PUSH
21282: LD_INT 1
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21300: LD_ADDR_VAR 0 38
21304: PUSH
21305: LD_INT 0
21307: PUSH
21308: LD_INT 0
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 0
21317: PUSH
21318: LD_INT 1
21320: NEG
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 1
21328: PUSH
21329: LD_INT 0
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 1
21338: PUSH
21339: LD_INT 1
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 0
21348: PUSH
21349: LD_INT 1
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 1
21358: NEG
21359: PUSH
21360: LD_INT 0
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 1
21369: NEG
21370: PUSH
21371: LD_INT 1
21373: NEG
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 2
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 2
21391: NEG
21392: PUSH
21393: LD_INT 1
21395: NEG
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21412: LD_ADDR_VAR 0 39
21416: PUSH
21417: LD_INT 0
21419: PUSH
21420: LD_INT 0
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 0
21429: PUSH
21430: LD_INT 1
21432: NEG
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 1
21440: PUSH
21441: LD_INT 0
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 1
21450: PUSH
21451: LD_INT 1
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 0
21460: PUSH
21461: LD_INT 1
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: PUSH
21472: LD_INT 0
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 1
21481: NEG
21482: PUSH
21483: LD_INT 1
21485: NEG
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 1
21493: NEG
21494: PUSH
21495: LD_INT 2
21497: NEG
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 1
21505: PUSH
21506: LD_INT 2
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21524: LD_ADDR_VAR 0 40
21528: PUSH
21529: LD_INT 0
21531: PUSH
21532: LD_INT 0
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 0
21541: PUSH
21542: LD_INT 1
21544: NEG
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 1
21552: PUSH
21553: LD_INT 0
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 1
21562: PUSH
21563: LD_INT 1
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 0
21572: PUSH
21573: LD_INT 1
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 1
21582: NEG
21583: PUSH
21584: LD_INT 0
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 1
21593: NEG
21594: PUSH
21595: LD_INT 1
21597: NEG
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 1
21605: PUSH
21606: LD_INT 1
21608: NEG
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 1
21616: NEG
21617: PUSH
21618: LD_INT 1
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21636: LD_ADDR_VAR 0 41
21640: PUSH
21641: LD_INT 0
21643: PUSH
21644: LD_INT 0
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 0
21653: PUSH
21654: LD_INT 1
21656: NEG
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 1
21664: PUSH
21665: LD_INT 0
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 1
21674: PUSH
21675: LD_INT 1
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 0
21684: PUSH
21685: LD_INT 1
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 1
21694: NEG
21695: PUSH
21696: LD_INT 0
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 1
21705: NEG
21706: PUSH
21707: LD_INT 1
21709: NEG
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 1
21717: NEG
21718: PUSH
21719: LD_INT 2
21721: NEG
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 1
21729: PUSH
21730: LD_INT 1
21732: NEG
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 2
21740: PUSH
21741: LD_INT 0
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 2
21750: PUSH
21751: LD_INT 1
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 2
21760: PUSH
21761: LD_INT 2
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 1
21770: PUSH
21771: LD_INT 2
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 1
21780: NEG
21781: PUSH
21782: LD_INT 1
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 2
21791: NEG
21792: PUSH
21793: LD_INT 0
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 2
21802: NEG
21803: PUSH
21804: LD_INT 1
21806: NEG
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 2
21814: NEG
21815: PUSH
21816: LD_INT 2
21818: NEG
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 2
21826: NEG
21827: PUSH
21828: LD_INT 3
21830: NEG
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 2
21838: PUSH
21839: LD_INT 1
21841: NEG
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 3
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 3
21859: PUSH
21860: LD_INT 1
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 3
21869: PUSH
21870: LD_INT 2
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 3
21879: PUSH
21880: LD_INT 3
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 2
21889: PUSH
21890: LD_INT 3
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 2
21899: NEG
21900: PUSH
21901: LD_INT 1
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 3
21910: NEG
21911: PUSH
21912: LD_INT 0
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 3
21921: NEG
21922: PUSH
21923: LD_INT 1
21925: NEG
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 3
21933: NEG
21934: PUSH
21935: LD_INT 2
21937: NEG
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 3
21945: NEG
21946: PUSH
21947: LD_INT 3
21949: NEG
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21986: LD_ADDR_VAR 0 42
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: LD_INT 0
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 0
22003: PUSH
22004: LD_INT 1
22006: NEG
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: LD_INT 0
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 1
22024: PUSH
22025: LD_INT 1
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 0
22034: PUSH
22035: LD_INT 1
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 1
22044: NEG
22045: PUSH
22046: LD_INT 0
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 1
22055: NEG
22056: PUSH
22057: LD_INT 1
22059: NEG
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 1
22067: NEG
22068: PUSH
22069: LD_INT 2
22071: NEG
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 0
22079: PUSH
22080: LD_INT 2
22082: NEG
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 1
22090: PUSH
22091: LD_INT 1
22093: NEG
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 2
22101: PUSH
22102: LD_INT 1
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 2
22111: PUSH
22112: LD_INT 2
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 1
22121: PUSH
22122: LD_INT 2
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: LD_INT 2
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 1
22141: NEG
22142: PUSH
22143: LD_INT 1
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 2
22152: NEG
22153: PUSH
22154: LD_INT 1
22156: NEG
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 2
22164: NEG
22165: PUSH
22166: LD_INT 2
22168: NEG
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 2
22176: NEG
22177: PUSH
22178: LD_INT 3
22180: NEG
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 1
22188: NEG
22189: PUSH
22190: LD_INT 3
22192: NEG
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 0
22200: PUSH
22201: LD_INT 3
22203: NEG
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 1
22211: PUSH
22212: LD_INT 2
22214: NEG
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 3
22222: PUSH
22223: LD_INT 2
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 3
22232: PUSH
22233: LD_INT 3
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 2
22242: PUSH
22243: LD_INT 3
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 1
22252: PUSH
22253: LD_INT 3
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 0
22262: PUSH
22263: LD_INT 3
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 1
22272: NEG
22273: PUSH
22274: LD_INT 2
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 3
22283: NEG
22284: PUSH
22285: LD_INT 2
22287: NEG
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 3
22295: NEG
22296: PUSH
22297: LD_INT 3
22299: NEG
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22336: LD_ADDR_VAR 0 43
22340: PUSH
22341: LD_INT 0
22343: PUSH
22344: LD_INT 0
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 0
22353: PUSH
22354: LD_INT 1
22356: NEG
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: LD_INT 0
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 1
22374: PUSH
22375: LD_INT 1
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 0
22384: PUSH
22385: LD_INT 1
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 1
22394: NEG
22395: PUSH
22396: LD_INT 0
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 1
22405: NEG
22406: PUSH
22407: LD_INT 1
22409: NEG
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 1
22417: NEG
22418: PUSH
22419: LD_INT 2
22421: NEG
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 0
22429: PUSH
22430: LD_INT 2
22432: NEG
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 1
22440: PUSH
22441: LD_INT 1
22443: NEG
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 2
22451: PUSH
22452: LD_INT 0
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 2
22461: PUSH
22462: LD_INT 1
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 1
22471: PUSH
22472: LD_INT 2
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 0
22481: PUSH
22482: LD_INT 2
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 1
22491: NEG
22492: PUSH
22493: LD_INT 1
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 2
22502: NEG
22503: PUSH
22504: LD_INT 0
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 2
22513: NEG
22514: PUSH
22515: LD_INT 1
22517: NEG
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 1
22525: NEG
22526: PUSH
22527: LD_INT 3
22529: NEG
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 0
22537: PUSH
22538: LD_INT 3
22540: NEG
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 1
22548: PUSH
22549: LD_INT 2
22551: NEG
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 2
22559: PUSH
22560: LD_INT 1
22562: NEG
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 3
22570: PUSH
22571: LD_INT 0
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 3
22580: PUSH
22581: LD_INT 1
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: LD_INT 3
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 0
22600: PUSH
22601: LD_INT 3
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 1
22610: NEG
22611: PUSH
22612: LD_INT 2
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 2
22621: NEG
22622: PUSH
22623: LD_INT 1
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 3
22632: NEG
22633: PUSH
22634: LD_INT 0
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 3
22643: NEG
22644: PUSH
22645: LD_INT 1
22647: NEG
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22684: LD_ADDR_VAR 0 44
22688: PUSH
22689: LD_INT 0
22691: PUSH
22692: LD_INT 0
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 0
22701: PUSH
22702: LD_INT 1
22704: NEG
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 1
22712: PUSH
22713: LD_INT 0
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 1
22722: PUSH
22723: LD_INT 1
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 0
22732: PUSH
22733: LD_INT 1
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 1
22742: NEG
22743: PUSH
22744: LD_INT 0
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 1
22753: NEG
22754: PUSH
22755: LD_INT 1
22757: NEG
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 1
22765: NEG
22766: PUSH
22767: LD_INT 2
22769: NEG
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 1
22777: PUSH
22778: LD_INT 1
22780: NEG
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 2
22788: PUSH
22789: LD_INT 0
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 2
22798: PUSH
22799: LD_INT 1
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 2
22808: PUSH
22809: LD_INT 2
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 1
22818: PUSH
22819: LD_INT 2
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 1
22828: NEG
22829: PUSH
22830: LD_INT 1
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 2
22839: NEG
22840: PUSH
22841: LD_INT 0
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 2
22850: NEG
22851: PUSH
22852: LD_INT 1
22854: NEG
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 2
22862: NEG
22863: PUSH
22864: LD_INT 2
22866: NEG
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 2
22874: NEG
22875: PUSH
22876: LD_INT 3
22878: NEG
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 2
22886: PUSH
22887: LD_INT 1
22889: NEG
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 3
22897: PUSH
22898: LD_INT 0
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 3
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 3
22917: PUSH
22918: LD_INT 2
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 3
22927: PUSH
22928: LD_INT 3
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 2
22937: PUSH
22938: LD_INT 3
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 2
22947: NEG
22948: PUSH
22949: LD_INT 1
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 3
22958: NEG
22959: PUSH
22960: LD_INT 0
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 3
22969: NEG
22970: PUSH
22971: LD_INT 1
22973: NEG
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 3
22981: NEG
22982: PUSH
22983: LD_INT 2
22985: NEG
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 3
22993: NEG
22994: PUSH
22995: LD_INT 3
22997: NEG
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23034: LD_ADDR_VAR 0 45
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: LD_INT 0
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: LD_INT 1
23054: NEG
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 1
23062: PUSH
23063: LD_INT 0
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: LD_INT 1
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 0
23082: PUSH
23083: LD_INT 1
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 1
23092: NEG
23093: PUSH
23094: LD_INT 0
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 1
23103: NEG
23104: PUSH
23105: LD_INT 1
23107: NEG
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 1
23115: NEG
23116: PUSH
23117: LD_INT 2
23119: NEG
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 0
23127: PUSH
23128: LD_INT 2
23130: NEG
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 1
23138: PUSH
23139: LD_INT 1
23141: NEG
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 2
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 2
23159: PUSH
23160: LD_INT 2
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 1
23169: PUSH
23170: LD_INT 2
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 0
23179: PUSH
23180: LD_INT 2
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 1
23189: NEG
23190: PUSH
23191: LD_INT 1
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 2
23200: NEG
23201: PUSH
23202: LD_INT 1
23204: NEG
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 2
23212: NEG
23213: PUSH
23214: LD_INT 2
23216: NEG
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 2
23224: NEG
23225: PUSH
23226: LD_INT 3
23228: NEG
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 1
23236: NEG
23237: PUSH
23238: LD_INT 3
23240: NEG
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 0
23248: PUSH
23249: LD_INT 3
23251: NEG
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 1
23259: PUSH
23260: LD_INT 2
23262: NEG
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 3
23270: PUSH
23271: LD_INT 2
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 3
23280: PUSH
23281: LD_INT 3
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 2
23290: PUSH
23291: LD_INT 3
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 1
23300: PUSH
23301: LD_INT 3
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: LD_INT 0
23310: PUSH
23311: LD_INT 3
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 1
23320: NEG
23321: PUSH
23322: LD_INT 2
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 3
23331: NEG
23332: PUSH
23333: LD_INT 2
23335: NEG
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 3
23343: NEG
23344: PUSH
23345: LD_INT 3
23347: NEG
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23384: LD_ADDR_VAR 0 46
23388: PUSH
23389: LD_INT 0
23391: PUSH
23392: LD_INT 0
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 0
23401: PUSH
23402: LD_INT 1
23404: NEG
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 1
23412: PUSH
23413: LD_INT 0
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 1
23422: PUSH
23423: LD_INT 1
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 0
23432: PUSH
23433: LD_INT 1
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 1
23442: NEG
23443: PUSH
23444: LD_INT 0
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 1
23453: NEG
23454: PUSH
23455: LD_INT 1
23457: NEG
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 1
23465: NEG
23466: PUSH
23467: LD_INT 2
23469: NEG
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 0
23477: PUSH
23478: LD_INT 2
23480: NEG
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 1
23488: PUSH
23489: LD_INT 1
23491: NEG
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 2
23499: PUSH
23500: LD_INT 0
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 2
23509: PUSH
23510: LD_INT 1
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 1
23519: PUSH
23520: LD_INT 2
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 0
23529: PUSH
23530: LD_INT 2
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 1
23539: NEG
23540: PUSH
23541: LD_INT 1
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 2
23550: NEG
23551: PUSH
23552: LD_INT 0
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 2
23561: NEG
23562: PUSH
23563: LD_INT 1
23565: NEG
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 1
23573: NEG
23574: PUSH
23575: LD_INT 3
23577: NEG
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 0
23585: PUSH
23586: LD_INT 3
23588: NEG
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 1
23596: PUSH
23597: LD_INT 2
23599: NEG
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 2
23607: PUSH
23608: LD_INT 1
23610: NEG
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 3
23618: PUSH
23619: LD_INT 0
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 3
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 1
23638: PUSH
23639: LD_INT 3
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 0
23648: PUSH
23649: LD_INT 3
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 1
23658: NEG
23659: PUSH
23660: LD_INT 2
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 2
23669: NEG
23670: PUSH
23671: LD_INT 1
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 3
23680: NEG
23681: PUSH
23682: LD_INT 0
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 3
23691: NEG
23692: PUSH
23693: LD_INT 1
23695: NEG
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23732: LD_ADDR_VAR 0 47
23736: PUSH
23737: LD_INT 0
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 0
23749: PUSH
23750: LD_INT 1
23752: NEG
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 1
23760: PUSH
23761: LD_INT 0
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 1
23770: PUSH
23771: LD_INT 1
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 0
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 1
23790: NEG
23791: PUSH
23792: LD_INT 0
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 1
23801: NEG
23802: PUSH
23803: LD_INT 1
23805: NEG
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 1
23813: NEG
23814: PUSH
23815: LD_INT 2
23817: NEG
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 0
23825: PUSH
23826: LD_INT 2
23828: NEG
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: LD_INT 1
23839: NEG
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 2
23847: NEG
23848: PUSH
23849: LD_INT 1
23851: NEG
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: LD_INT 2
23859: NEG
23860: PUSH
23861: LD_INT 2
23863: NEG
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23883: LD_ADDR_VAR 0 48
23887: PUSH
23888: LD_INT 0
23890: PUSH
23891: LD_INT 0
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 0
23900: PUSH
23901: LD_INT 1
23903: NEG
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 1
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 1
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 0
23931: PUSH
23932: LD_INT 1
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 1
23941: NEG
23942: PUSH
23943: LD_INT 0
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 1
23952: NEG
23953: PUSH
23954: LD_INT 1
23956: NEG
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 1
23964: NEG
23965: PUSH
23966: LD_INT 2
23968: NEG
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 0
23976: PUSH
23977: LD_INT 2
23979: NEG
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 1
23987: PUSH
23988: LD_INT 1
23990: NEG
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 2
23998: PUSH
23999: LD_INT 0
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: LD_INT 2
24008: PUSH
24009: LD_INT 1
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24030: LD_ADDR_VAR 0 49
24034: PUSH
24035: LD_INT 0
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 0
24047: PUSH
24048: LD_INT 1
24050: NEG
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 1
24058: PUSH
24059: LD_INT 0
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 1
24068: PUSH
24069: LD_INT 1
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 0
24078: PUSH
24079: LD_INT 1
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 1
24088: NEG
24089: PUSH
24090: LD_INT 0
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 1
24099: NEG
24100: PUSH
24101: LD_INT 1
24103: NEG
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 1
24111: PUSH
24112: LD_INT 1
24114: NEG
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 2
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 2
24132: PUSH
24133: LD_INT 1
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 2
24142: PUSH
24143: LD_INT 2
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 1
24152: PUSH
24153: LD_INT 2
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24174: LD_ADDR_VAR 0 50
24178: PUSH
24179: LD_INT 0
24181: PUSH
24182: LD_INT 0
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: LD_INT 1
24194: NEG
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 1
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 0
24222: PUSH
24223: LD_INT 1
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 1
24232: NEG
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 1
24243: NEG
24244: PUSH
24245: LD_INT 1
24247: NEG
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 2
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 2
24265: PUSH
24266: LD_INT 2
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 1
24275: PUSH
24276: LD_INT 2
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 0
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 1
24295: NEG
24296: PUSH
24297: LD_INT 1
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24318: LD_ADDR_VAR 0 51
24322: PUSH
24323: LD_INT 0
24325: PUSH
24326: LD_INT 0
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 0
24335: PUSH
24336: LD_INT 1
24338: NEG
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 1
24346: PUSH
24347: LD_INT 0
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 1
24356: PUSH
24357: LD_INT 1
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 0
24366: PUSH
24367: LD_INT 1
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 1
24376: NEG
24377: PUSH
24378: LD_INT 0
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: LD_INT 1
24391: NEG
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 1
24399: PUSH
24400: LD_INT 2
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 0
24409: PUSH
24410: LD_INT 2
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 1
24419: NEG
24420: PUSH
24421: LD_INT 1
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 2
24430: NEG
24431: PUSH
24432: LD_INT 0
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 2
24441: NEG
24442: PUSH
24443: LD_INT 1
24445: NEG
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24465: LD_ADDR_VAR 0 52
24469: PUSH
24470: LD_INT 0
24472: PUSH
24473: LD_INT 0
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 0
24482: PUSH
24483: LD_INT 1
24485: NEG
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 1
24493: PUSH
24494: LD_INT 0
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 1
24503: PUSH
24504: LD_INT 1
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 0
24513: PUSH
24514: LD_INT 1
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 1
24523: NEG
24524: PUSH
24525: LD_INT 0
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: LD_INT 1
24538: NEG
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 1
24546: NEG
24547: PUSH
24548: LD_INT 2
24550: NEG
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 1
24558: NEG
24559: PUSH
24560: LD_INT 1
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 2
24569: NEG
24570: PUSH
24571: LD_INT 0
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 2
24580: NEG
24581: PUSH
24582: LD_INT 1
24584: NEG
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 2
24592: NEG
24593: PUSH
24594: LD_INT 2
24596: NEG
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24616: LD_ADDR_VAR 0 53
24620: PUSH
24621: LD_INT 0
24623: PUSH
24624: LD_INT 0
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 0
24633: PUSH
24634: LD_INT 1
24636: NEG
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 1
24644: PUSH
24645: LD_INT 0
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 1
24654: PUSH
24655: LD_INT 1
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 0
24664: PUSH
24665: LD_INT 1
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 1
24674: NEG
24675: PUSH
24676: LD_INT 0
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 1
24685: NEG
24686: PUSH
24687: LD_INT 1
24689: NEG
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 1
24697: NEG
24698: PUSH
24699: LD_INT 2
24701: NEG
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 0
24709: PUSH
24710: LD_INT 2
24712: NEG
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 1
24720: PUSH
24721: LD_INT 1
24723: NEG
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 2
24731: PUSH
24732: LD_INT 0
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 2
24741: PUSH
24742: LD_INT 1
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 2
24751: PUSH
24752: LD_INT 2
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 1
24761: PUSH
24762: LD_INT 2
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 0
24771: PUSH
24772: LD_INT 2
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 1
24781: NEG
24782: PUSH
24783: LD_INT 1
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 2
24792: NEG
24793: PUSH
24794: LD_INT 0
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 2
24803: NEG
24804: PUSH
24805: LD_INT 1
24807: NEG
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 2
24815: NEG
24816: PUSH
24817: LD_INT 2
24819: NEG
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24846: LD_ADDR_VAR 0 54
24850: PUSH
24851: LD_INT 0
24853: PUSH
24854: LD_INT 0
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 0
24863: PUSH
24864: LD_INT 1
24866: NEG
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 1
24874: PUSH
24875: LD_INT 0
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 1
24884: PUSH
24885: LD_INT 1
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 0
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 1
24904: NEG
24905: PUSH
24906: LD_INT 0
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 1
24915: NEG
24916: PUSH
24917: LD_INT 1
24919: NEG
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 1
24927: NEG
24928: PUSH
24929: LD_INT 2
24931: NEG
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 0
24939: PUSH
24940: LD_INT 2
24942: NEG
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: PUSH
24951: LD_INT 1
24953: NEG
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 2
24961: PUSH
24962: LD_INT 0
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 2
24971: PUSH
24972: LD_INT 1
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 2
24981: PUSH
24982: LD_INT 2
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 1
24991: PUSH
24992: LD_INT 2
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 0
25001: PUSH
25002: LD_INT 2
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 1
25011: NEG
25012: PUSH
25013: LD_INT 1
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 2
25022: NEG
25023: PUSH
25024: LD_INT 0
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 2
25033: NEG
25034: PUSH
25035: LD_INT 1
25037: NEG
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 2
25045: NEG
25046: PUSH
25047: LD_INT 2
25049: NEG
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25076: LD_ADDR_VAR 0 55
25080: PUSH
25081: LD_INT 0
25083: PUSH
25084: LD_INT 0
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 0
25093: PUSH
25094: LD_INT 1
25096: NEG
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 1
25104: PUSH
25105: LD_INT 0
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 1
25114: PUSH
25115: LD_INT 1
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: LD_INT 1
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 1
25134: NEG
25135: PUSH
25136: LD_INT 0
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 1
25145: NEG
25146: PUSH
25147: LD_INT 1
25149: NEG
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 1
25157: NEG
25158: PUSH
25159: LD_INT 2
25161: NEG
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 0
25169: PUSH
25170: LD_INT 2
25172: NEG
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 1
25180: PUSH
25181: LD_INT 1
25183: NEG
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 2
25191: PUSH
25192: LD_INT 0
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 2
25201: PUSH
25202: LD_INT 1
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 2
25211: PUSH
25212: LD_INT 2
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 1
25221: PUSH
25222: LD_INT 2
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 0
25231: PUSH
25232: LD_INT 2
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 1
25241: NEG
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 2
25252: NEG
25253: PUSH
25254: LD_INT 0
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 2
25263: NEG
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 2
25275: NEG
25276: PUSH
25277: LD_INT 2
25279: NEG
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25306: LD_ADDR_VAR 0 56
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 0
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 1
25334: PUSH
25335: LD_INT 0
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 1
25344: PUSH
25345: LD_INT 1
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: LD_INT 1
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 1
25364: NEG
25365: PUSH
25366: LD_INT 0
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 1
25375: NEG
25376: PUSH
25377: LD_INT 1
25379: NEG
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 1
25387: NEG
25388: PUSH
25389: LD_INT 2
25391: NEG
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 0
25399: PUSH
25400: LD_INT 2
25402: NEG
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 1
25410: PUSH
25411: LD_INT 1
25413: NEG
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 2
25421: PUSH
25422: LD_INT 0
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 2
25431: PUSH
25432: LD_INT 1
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 2
25441: PUSH
25442: LD_INT 2
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 1
25451: PUSH
25452: LD_INT 2
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 0
25461: PUSH
25462: LD_INT 2
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 1
25471: NEG
25472: PUSH
25473: LD_INT 1
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 2
25482: NEG
25483: PUSH
25484: LD_INT 0
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 2
25493: NEG
25494: PUSH
25495: LD_INT 1
25497: NEG
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 2
25505: NEG
25506: PUSH
25507: LD_INT 2
25509: NEG
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25536: LD_ADDR_VAR 0 57
25540: PUSH
25541: LD_INT 0
25543: PUSH
25544: LD_INT 0
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 0
25553: PUSH
25554: LD_INT 1
25556: NEG
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 1
25564: PUSH
25565: LD_INT 0
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 1
25574: PUSH
25575: LD_INT 1
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 0
25584: PUSH
25585: LD_INT 1
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 1
25594: NEG
25595: PUSH
25596: LD_INT 0
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 1
25605: NEG
25606: PUSH
25607: LD_INT 1
25609: NEG
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 1
25617: NEG
25618: PUSH
25619: LD_INT 2
25621: NEG
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 0
25629: PUSH
25630: LD_INT 2
25632: NEG
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 1
25640: PUSH
25641: LD_INT 1
25643: NEG
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 2
25651: PUSH
25652: LD_INT 0
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 2
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 2
25671: PUSH
25672: LD_INT 2
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 1
25681: PUSH
25682: LD_INT 2
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 0
25691: PUSH
25692: LD_INT 2
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 1
25701: NEG
25702: PUSH
25703: LD_INT 1
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 2
25712: NEG
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 2
25723: NEG
25724: PUSH
25725: LD_INT 1
25727: NEG
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 2
25735: NEG
25736: PUSH
25737: LD_INT 2
25739: NEG
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25766: LD_ADDR_VAR 0 58
25770: PUSH
25771: LD_INT 0
25773: PUSH
25774: LD_INT 0
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 0
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 1
25794: PUSH
25795: LD_INT 0
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 1
25804: PUSH
25805: LD_INT 1
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 0
25814: PUSH
25815: LD_INT 1
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 1
25824: NEG
25825: PUSH
25826: LD_INT 0
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 1
25835: NEG
25836: PUSH
25837: LD_INT 1
25839: NEG
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 1
25847: NEG
25848: PUSH
25849: LD_INT 2
25851: NEG
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 0
25859: PUSH
25860: LD_INT 2
25862: NEG
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 1
25870: PUSH
25871: LD_INT 1
25873: NEG
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 2
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 2
25891: PUSH
25892: LD_INT 1
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 2
25901: PUSH
25902: LD_INT 2
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 1
25911: PUSH
25912: LD_INT 2
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 0
25921: PUSH
25922: LD_INT 2
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 1
25931: NEG
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 2
25942: NEG
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 2
25953: NEG
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 2
25965: NEG
25966: PUSH
25967: LD_INT 2
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25996: LD_ADDR_VAR 0 59
26000: PUSH
26001: LD_INT 0
26003: PUSH
26004: LD_INT 0
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 0
26013: PUSH
26014: LD_INT 1
26016: NEG
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: LD_INT 0
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 1
26034: PUSH
26035: LD_INT 1
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 0
26044: PUSH
26045: LD_INT 1
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 1
26054: NEG
26055: PUSH
26056: LD_INT 0
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 1
26065: NEG
26066: PUSH
26067: LD_INT 1
26069: NEG
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26084: LD_ADDR_VAR 0 60
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: LD_INT 0
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 0
26101: PUSH
26102: LD_INT 1
26104: NEG
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 1
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 0
26132: PUSH
26133: LD_INT 1
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 1
26142: NEG
26143: PUSH
26144: LD_INT 0
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 1
26153: NEG
26154: PUSH
26155: LD_INT 1
26157: NEG
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26172: LD_ADDR_VAR 0 61
26176: PUSH
26177: LD_INT 0
26179: PUSH
26180: LD_INT 0
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 0
26189: PUSH
26190: LD_INT 1
26192: NEG
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 1
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 1
26210: PUSH
26211: LD_INT 1
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 0
26220: PUSH
26221: LD_INT 1
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 1
26230: NEG
26231: PUSH
26232: LD_INT 0
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 1
26241: NEG
26242: PUSH
26243: LD_INT 1
26245: NEG
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26260: LD_ADDR_VAR 0 62
26264: PUSH
26265: LD_INT 0
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: LD_INT 1
26280: NEG
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 1
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: LD_INT 1
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 1
26318: NEG
26319: PUSH
26320: LD_INT 0
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: LD_INT 1
26333: NEG
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26348: LD_ADDR_VAR 0 63
26352: PUSH
26353: LD_INT 0
26355: PUSH
26356: LD_INT 0
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 0
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 1
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 0
26396: PUSH
26397: LD_INT 1
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 1
26406: NEG
26407: PUSH
26408: LD_INT 0
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: LD_INT 1
26421: NEG
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26436: LD_ADDR_VAR 0 64
26440: PUSH
26441: LD_INT 0
26443: PUSH
26444: LD_INT 0
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: LD_INT 1
26456: NEG
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 1
26464: PUSH
26465: LD_INT 0
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 1
26474: PUSH
26475: LD_INT 1
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 0
26484: PUSH
26485: LD_INT 1
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 1
26494: NEG
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 1
26505: NEG
26506: PUSH
26507: LD_INT 1
26509: NEG
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: ST_TO_ADDR
// end ; 1 :
26524: GO 32421
26526: LD_INT 1
26528: DOUBLE
26529: EQUAL
26530: IFTRUE 26534
26532: GO 29157
26534: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26535: LD_ADDR_VAR 0 11
26539: PUSH
26540: LD_INT 1
26542: NEG
26543: PUSH
26544: LD_INT 3
26546: NEG
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 0
26554: PUSH
26555: LD_INT 3
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: LD_INT 2
26568: NEG
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: LIST
26578: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26579: LD_ADDR_VAR 0 12
26583: PUSH
26584: LD_INT 2
26586: PUSH
26587: LD_INT 1
26589: NEG
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 3
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 3
26607: PUSH
26608: LD_INT 1
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: LIST
26619: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26620: LD_ADDR_VAR 0 13
26624: PUSH
26625: LD_INT 3
26627: PUSH
26628: LD_INT 2
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 3
26637: PUSH
26638: LD_INT 3
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 2
26647: PUSH
26648: LD_INT 3
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: LIST
26659: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26660: LD_ADDR_VAR 0 14
26664: PUSH
26665: LD_INT 1
26667: PUSH
26668: LD_INT 3
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: LD_INT 3
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: LD_INT 2
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: LIST
26700: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26701: LD_ADDR_VAR 0 15
26705: PUSH
26706: LD_INT 2
26708: NEG
26709: PUSH
26710: LD_INT 1
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 3
26719: NEG
26720: PUSH
26721: LD_INT 0
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 3
26730: NEG
26731: PUSH
26732: LD_INT 1
26734: NEG
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: LIST
26744: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26745: LD_ADDR_VAR 0 16
26749: PUSH
26750: LD_INT 2
26752: NEG
26753: PUSH
26754: LD_INT 3
26756: NEG
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 3
26764: NEG
26765: PUSH
26766: LD_INT 2
26768: NEG
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 3
26776: NEG
26777: PUSH
26778: LD_INT 3
26780: NEG
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: LIST
26790: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26791: LD_ADDR_VAR 0 17
26795: PUSH
26796: LD_INT 1
26798: NEG
26799: PUSH
26800: LD_INT 3
26802: NEG
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: LD_INT 3
26813: NEG
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: LD_INT 2
26824: NEG
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: LIST
26834: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26835: LD_ADDR_VAR 0 18
26839: PUSH
26840: LD_INT 2
26842: PUSH
26843: LD_INT 1
26845: NEG
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 3
26853: PUSH
26854: LD_INT 0
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 3
26863: PUSH
26864: LD_INT 1
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: LIST
26875: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26876: LD_ADDR_VAR 0 19
26880: PUSH
26881: LD_INT 3
26883: PUSH
26884: LD_INT 2
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 3
26893: PUSH
26894: LD_INT 3
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 2
26903: PUSH
26904: LD_INT 3
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: LIST
26915: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26916: LD_ADDR_VAR 0 20
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: LD_INT 3
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 0
26933: PUSH
26934: LD_INT 3
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 1
26943: NEG
26944: PUSH
26945: LD_INT 2
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: LIST
26956: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26957: LD_ADDR_VAR 0 21
26961: PUSH
26962: LD_INT 2
26964: NEG
26965: PUSH
26966: LD_INT 1
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 3
26975: NEG
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 3
26986: NEG
26987: PUSH
26988: LD_INT 1
26990: NEG
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: LIST
27000: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27001: LD_ADDR_VAR 0 22
27005: PUSH
27006: LD_INT 2
27008: NEG
27009: PUSH
27010: LD_INT 3
27012: NEG
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 3
27020: NEG
27021: PUSH
27022: LD_INT 2
27024: NEG
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 3
27032: NEG
27033: PUSH
27034: LD_INT 3
27036: NEG
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: LIST
27046: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27047: LD_ADDR_VAR 0 23
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: LD_INT 3
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 1
27065: NEG
27066: PUSH
27067: LD_INT 4
27069: NEG
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 1
27077: PUSH
27078: LD_INT 3
27080: NEG
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: LIST
27090: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27091: LD_ADDR_VAR 0 24
27095: PUSH
27096: LD_INT 3
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 3
27108: PUSH
27109: LD_INT 1
27111: NEG
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 4
27119: PUSH
27120: LD_INT 1
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: LIST
27131: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27132: LD_ADDR_VAR 0 25
27136: PUSH
27137: LD_INT 3
27139: PUSH
27140: LD_INT 3
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 4
27149: PUSH
27150: LD_INT 3
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 3
27159: PUSH
27160: LD_INT 4
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: LIST
27171: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27172: LD_ADDR_VAR 0 26
27176: PUSH
27177: LD_INT 0
27179: PUSH
27180: LD_INT 3
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: LD_INT 4
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 1
27199: NEG
27200: PUSH
27201: LD_INT 3
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: LIST
27212: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27213: LD_ADDR_VAR 0 27
27217: PUSH
27218: LD_INT 3
27220: NEG
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 3
27231: NEG
27232: PUSH
27233: LD_INT 1
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 4
27242: NEG
27243: PUSH
27244: LD_INT 1
27246: NEG
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: LIST
27256: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27257: LD_ADDR_VAR 0 28
27261: PUSH
27262: LD_INT 3
27264: NEG
27265: PUSH
27266: LD_INT 3
27268: NEG
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 3
27276: NEG
27277: PUSH
27278: LD_INT 4
27280: NEG
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 4
27288: NEG
27289: PUSH
27290: LD_INT 3
27292: NEG
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: LIST
27302: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27303: LD_ADDR_VAR 0 29
27307: PUSH
27308: LD_INT 1
27310: NEG
27311: PUSH
27312: LD_INT 3
27314: NEG
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 0
27322: PUSH
27323: LD_INT 3
27325: NEG
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 1
27333: PUSH
27334: LD_INT 2
27336: NEG
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 1
27344: NEG
27345: PUSH
27346: LD_INT 4
27348: NEG
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 0
27356: PUSH
27357: LD_INT 4
27359: NEG
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: LD_INT 3
27370: NEG
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 1
27378: NEG
27379: PUSH
27380: LD_INT 5
27382: NEG
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 0
27390: PUSH
27391: LD_INT 5
27393: NEG
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: LD_INT 4
27404: NEG
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 1
27412: NEG
27413: PUSH
27414: LD_INT 6
27416: NEG
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 0
27424: PUSH
27425: LD_INT 6
27427: NEG
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 1
27435: PUSH
27436: LD_INT 5
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27458: LD_ADDR_VAR 0 30
27462: PUSH
27463: LD_INT 2
27465: PUSH
27466: LD_INT 1
27468: NEG
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 3
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 3
27486: PUSH
27487: LD_INT 1
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 3
27496: PUSH
27497: LD_INT 1
27499: NEG
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 4
27507: PUSH
27508: LD_INT 0
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 4
27517: PUSH
27518: LD_INT 1
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 4
27527: PUSH
27528: LD_INT 1
27530: NEG
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 5
27538: PUSH
27539: LD_INT 0
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 5
27548: PUSH
27549: LD_INT 1
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 5
27558: PUSH
27559: LD_INT 1
27561: NEG
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 6
27569: PUSH
27570: LD_INT 0
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 6
27579: PUSH
27580: LD_INT 1
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27601: LD_ADDR_VAR 0 31
27605: PUSH
27606: LD_INT 3
27608: PUSH
27609: LD_INT 2
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 3
27618: PUSH
27619: LD_INT 3
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 2
27628: PUSH
27629: LD_INT 3
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 4
27638: PUSH
27639: LD_INT 3
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 4
27648: PUSH
27649: LD_INT 4
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 3
27658: PUSH
27659: LD_INT 4
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 5
27668: PUSH
27669: LD_INT 4
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 5
27678: PUSH
27679: LD_INT 5
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 4
27688: PUSH
27689: LD_INT 5
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 6
27698: PUSH
27699: LD_INT 5
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 6
27708: PUSH
27709: LD_INT 6
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 5
27718: PUSH
27719: LD_INT 6
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27740: LD_ADDR_VAR 0 32
27744: PUSH
27745: LD_INT 1
27747: PUSH
27748: LD_INT 3
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 0
27757: PUSH
27758: LD_INT 3
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 1
27767: NEG
27768: PUSH
27769: LD_INT 2
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: LD_INT 4
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: LD_INT 4
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: PUSH
27800: LD_INT 3
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: LD_INT 5
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: LD_INT 5
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: LD_INT 4
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: LD_INT 6
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 0
27850: PUSH
27851: LD_INT 6
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 1
27860: NEG
27861: PUSH
27862: LD_INT 5
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27883: LD_ADDR_VAR 0 33
27887: PUSH
27888: LD_INT 2
27890: NEG
27891: PUSH
27892: LD_INT 1
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 3
27901: NEG
27902: PUSH
27903: LD_INT 0
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 3
27912: NEG
27913: PUSH
27914: LD_INT 1
27916: NEG
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 3
27924: NEG
27925: PUSH
27926: LD_INT 1
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 4
27935: NEG
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 4
27946: NEG
27947: PUSH
27948: LD_INT 1
27950: NEG
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 4
27958: NEG
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 5
27969: NEG
27970: PUSH
27971: LD_INT 0
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 5
27980: NEG
27981: PUSH
27982: LD_INT 1
27984: NEG
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 5
27992: NEG
27993: PUSH
27994: LD_INT 1
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 6
28003: NEG
28004: PUSH
28005: LD_INT 0
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 6
28014: NEG
28015: PUSH
28016: LD_INT 1
28018: NEG
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28038: LD_ADDR_VAR 0 34
28042: PUSH
28043: LD_INT 2
28045: NEG
28046: PUSH
28047: LD_INT 3
28049: NEG
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 3
28057: NEG
28058: PUSH
28059: LD_INT 2
28061: NEG
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 3
28069: NEG
28070: PUSH
28071: LD_INT 3
28073: NEG
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 3
28081: NEG
28082: PUSH
28083: LD_INT 4
28085: NEG
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 4
28093: NEG
28094: PUSH
28095: LD_INT 3
28097: NEG
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 4
28105: NEG
28106: PUSH
28107: LD_INT 4
28109: NEG
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 4
28117: NEG
28118: PUSH
28119: LD_INT 5
28121: NEG
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 5
28129: NEG
28130: PUSH
28131: LD_INT 4
28133: NEG
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 5
28141: NEG
28142: PUSH
28143: LD_INT 5
28145: NEG
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 5
28153: NEG
28154: PUSH
28155: LD_INT 6
28157: NEG
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 6
28165: NEG
28166: PUSH
28167: LD_INT 5
28169: NEG
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 6
28177: NEG
28178: PUSH
28179: LD_INT 6
28181: NEG
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28201: LD_ADDR_VAR 0 41
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: LD_INT 2
28211: NEG
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: LD_INT 3
28223: NEG
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 1
28231: PUSH
28232: LD_INT 2
28234: NEG
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: LIST
28244: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28245: LD_ADDR_VAR 0 42
28249: PUSH
28250: LD_INT 2
28252: PUSH
28253: LD_INT 0
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 2
28262: PUSH
28263: LD_INT 1
28265: NEG
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 3
28273: PUSH
28274: LD_INT 1
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: LIST
28285: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28286: LD_ADDR_VAR 0 43
28290: PUSH
28291: LD_INT 2
28293: PUSH
28294: LD_INT 2
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 3
28303: PUSH
28304: LD_INT 2
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: LD_INT 3
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: LIST
28325: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28326: LD_ADDR_VAR 0 44
28330: PUSH
28331: LD_INT 0
28333: PUSH
28334: LD_INT 2
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: LD_INT 3
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: LD_INT 2
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: LIST
28366: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28367: LD_ADDR_VAR 0 45
28371: PUSH
28372: LD_INT 2
28374: NEG
28375: PUSH
28376: LD_INT 0
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 2
28385: NEG
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 3
28396: NEG
28397: PUSH
28398: LD_INT 1
28400: NEG
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: LIST
28410: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28411: LD_ADDR_VAR 0 46
28415: PUSH
28416: LD_INT 2
28418: NEG
28419: PUSH
28420: LD_INT 2
28422: NEG
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 2
28430: NEG
28431: PUSH
28432: LD_INT 3
28434: NEG
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 3
28442: NEG
28443: PUSH
28444: LD_INT 2
28446: NEG
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: LIST
28456: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28457: LD_ADDR_VAR 0 47
28461: PUSH
28462: LD_INT 2
28464: NEG
28465: PUSH
28466: LD_INT 3
28468: NEG
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 1
28476: NEG
28477: PUSH
28478: LD_INT 3
28480: NEG
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28490: LD_ADDR_VAR 0 48
28494: PUSH
28495: LD_INT 1
28497: PUSH
28498: LD_INT 2
28500: NEG
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 2
28508: PUSH
28509: LD_INT 1
28511: NEG
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28521: LD_ADDR_VAR 0 49
28525: PUSH
28526: LD_INT 3
28528: PUSH
28529: LD_INT 1
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 3
28538: PUSH
28539: LD_INT 2
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28550: LD_ADDR_VAR 0 50
28554: PUSH
28555: LD_INT 2
28557: PUSH
28558: LD_INT 3
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 1
28567: PUSH
28568: LD_INT 3
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28579: LD_ADDR_VAR 0 51
28583: PUSH
28584: LD_INT 1
28586: NEG
28587: PUSH
28588: LD_INT 2
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 2
28597: NEG
28598: PUSH
28599: LD_INT 1
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28610: LD_ADDR_VAR 0 52
28614: PUSH
28615: LD_INT 3
28617: NEG
28618: PUSH
28619: LD_INT 1
28621: NEG
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 3
28629: NEG
28630: PUSH
28631: LD_INT 2
28633: NEG
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28643: LD_ADDR_VAR 0 53
28647: PUSH
28648: LD_INT 1
28650: NEG
28651: PUSH
28652: LD_INT 3
28654: NEG
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 0
28662: PUSH
28663: LD_INT 3
28665: NEG
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: LD_INT 2
28676: NEG
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: LIST
28686: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28687: LD_ADDR_VAR 0 54
28691: PUSH
28692: LD_INT 2
28694: PUSH
28695: LD_INT 1
28697: NEG
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 3
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 3
28715: PUSH
28716: LD_INT 1
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: LIST
28727: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28728: LD_ADDR_VAR 0 55
28732: PUSH
28733: LD_INT 3
28735: PUSH
28736: LD_INT 2
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 3
28745: PUSH
28746: LD_INT 3
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 2
28755: PUSH
28756: LD_INT 3
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: LIST
28767: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28768: LD_ADDR_VAR 0 56
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: LD_INT 3
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 0
28785: PUSH
28786: LD_INT 3
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 1
28795: NEG
28796: PUSH
28797: LD_INT 2
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: LIST
28808: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28809: LD_ADDR_VAR 0 57
28813: PUSH
28814: LD_INT 2
28816: NEG
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 3
28827: NEG
28828: PUSH
28829: LD_INT 0
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 3
28838: NEG
28839: PUSH
28840: LD_INT 1
28842: NEG
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: LIST
28852: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28853: LD_ADDR_VAR 0 58
28857: PUSH
28858: LD_INT 2
28860: NEG
28861: PUSH
28862: LD_INT 3
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 3
28872: NEG
28873: PUSH
28874: LD_INT 2
28876: NEG
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 3
28884: NEG
28885: PUSH
28886: LD_INT 3
28888: NEG
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: LIST
28898: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28899: LD_ADDR_VAR 0 59
28903: PUSH
28904: LD_INT 1
28906: NEG
28907: PUSH
28908: LD_INT 2
28910: NEG
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 0
28918: PUSH
28919: LD_INT 2
28921: NEG
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 1
28929: PUSH
28930: LD_INT 1
28932: NEG
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: LIST
28942: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28943: LD_ADDR_VAR 0 60
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: LD_INT 1
28953: NEG
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 2
28961: PUSH
28962: LD_INT 0
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 2
28971: PUSH
28972: LD_INT 1
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: LIST
28983: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28984: LD_ADDR_VAR 0 61
28988: PUSH
28989: LD_INT 2
28991: PUSH
28992: LD_INT 1
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 2
29001: PUSH
29002: LD_INT 2
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 1
29011: PUSH
29012: LD_INT 2
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: LIST
29023: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29024: LD_ADDR_VAR 0 62
29028: PUSH
29029: LD_INT 1
29031: PUSH
29032: LD_INT 2
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 0
29041: PUSH
29042: LD_INT 2
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 1
29051: NEG
29052: PUSH
29053: LD_INT 1
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: LIST
29064: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29065: LD_ADDR_VAR 0 63
29069: PUSH
29070: LD_INT 1
29072: NEG
29073: PUSH
29074: LD_INT 1
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 2
29083: NEG
29084: PUSH
29085: LD_INT 0
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 2
29094: NEG
29095: PUSH
29096: LD_INT 1
29098: NEG
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: LIST
29108: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29109: LD_ADDR_VAR 0 64
29113: PUSH
29114: LD_INT 1
29116: NEG
29117: PUSH
29118: LD_INT 2
29120: NEG
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 2
29128: NEG
29129: PUSH
29130: LD_INT 1
29132: NEG
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 2
29140: NEG
29141: PUSH
29142: LD_INT 2
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: LIST
29154: ST_TO_ADDR
// end ; 2 :
29155: GO 32421
29157: LD_INT 2
29159: DOUBLE
29160: EQUAL
29161: IFTRUE 29165
29163: GO 32420
29165: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29166: LD_ADDR_VAR 0 29
29170: PUSH
29171: LD_INT 4
29173: PUSH
29174: LD_INT 0
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 4
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 5
29194: PUSH
29195: LD_INT 0
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 5
29204: PUSH
29205: LD_INT 1
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 4
29214: PUSH
29215: LD_INT 1
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 3
29224: PUSH
29225: LD_INT 0
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 3
29234: PUSH
29235: LD_INT 1
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 3
29245: PUSH
29246: LD_INT 2
29248: NEG
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 5
29256: PUSH
29257: LD_INT 2
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 3
29266: PUSH
29267: LD_INT 3
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 3
29276: PUSH
29277: LD_INT 2
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 4
29286: PUSH
29287: LD_INT 3
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 4
29296: PUSH
29297: LD_INT 4
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 3
29306: PUSH
29307: LD_INT 4
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 2
29316: PUSH
29317: LD_INT 3
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 2
29326: PUSH
29327: LD_INT 2
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 4
29336: PUSH
29337: LD_INT 2
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 2
29346: PUSH
29347: LD_INT 4
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 0
29356: PUSH
29357: LD_INT 4
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 0
29366: PUSH
29367: LD_INT 3
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 1
29376: PUSH
29377: LD_INT 4
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 1
29386: PUSH
29387: LD_INT 5
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 0
29396: PUSH
29397: LD_INT 5
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 1
29406: NEG
29407: PUSH
29408: LD_INT 4
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 1
29417: NEG
29418: PUSH
29419: LD_INT 3
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 2
29428: PUSH
29429: LD_INT 5
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 2
29438: NEG
29439: PUSH
29440: LD_INT 3
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 3
29449: NEG
29450: PUSH
29451: LD_INT 0
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 3
29460: NEG
29461: PUSH
29462: LD_INT 1
29464: NEG
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 2
29472: NEG
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 2
29483: NEG
29484: PUSH
29485: LD_INT 1
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 3
29494: NEG
29495: PUSH
29496: LD_INT 1
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 4
29505: NEG
29506: PUSH
29507: LD_INT 0
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 4
29516: NEG
29517: PUSH
29518: LD_INT 1
29520: NEG
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 4
29528: NEG
29529: PUSH
29530: LD_INT 2
29532: NEG
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 2
29540: NEG
29541: PUSH
29542: LD_INT 2
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 4
29551: NEG
29552: PUSH
29553: LD_INT 4
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 4
29563: NEG
29564: PUSH
29565: LD_INT 5
29567: NEG
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 3
29575: NEG
29576: PUSH
29577: LD_INT 4
29579: NEG
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 3
29587: NEG
29588: PUSH
29589: LD_INT 3
29591: NEG
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 4
29599: NEG
29600: PUSH
29601: LD_INT 3
29603: NEG
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 5
29611: NEG
29612: PUSH
29613: LD_INT 4
29615: NEG
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 5
29623: NEG
29624: PUSH
29625: LD_INT 5
29627: NEG
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 3
29635: NEG
29636: PUSH
29637: LD_INT 5
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 5
29647: NEG
29648: PUSH
29649: LD_INT 3
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29704: LD_ADDR_VAR 0 30
29708: PUSH
29709: LD_INT 4
29711: PUSH
29712: LD_INT 4
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 4
29721: PUSH
29722: LD_INT 3
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 5
29731: PUSH
29732: LD_INT 4
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 5
29741: PUSH
29742: LD_INT 5
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 4
29751: PUSH
29752: LD_INT 5
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 3
29761: PUSH
29762: LD_INT 4
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 3
29771: PUSH
29772: LD_INT 3
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 5
29781: PUSH
29782: LD_INT 3
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 3
29791: PUSH
29792: LD_INT 5
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 0
29801: PUSH
29802: LD_INT 3
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: LD_INT 2
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 1
29821: PUSH
29822: LD_INT 3
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: LD_INT 4
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 0
29841: PUSH
29842: LD_INT 4
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 1
29851: NEG
29852: PUSH
29853: LD_INT 3
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 1
29862: NEG
29863: PUSH
29864: LD_INT 2
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 2
29873: PUSH
29874: LD_INT 4
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 2
29883: NEG
29884: PUSH
29885: LD_INT 2
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 4
29894: NEG
29895: PUSH
29896: LD_INT 0
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 4
29905: NEG
29906: PUSH
29907: LD_INT 1
29909: NEG
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 3
29917: NEG
29918: PUSH
29919: LD_INT 0
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 3
29928: NEG
29929: PUSH
29930: LD_INT 1
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 4
29939: NEG
29940: PUSH
29941: LD_INT 1
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 5
29950: NEG
29951: PUSH
29952: LD_INT 0
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 5
29961: NEG
29962: PUSH
29963: LD_INT 1
29965: NEG
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 5
29973: NEG
29974: PUSH
29975: LD_INT 2
29977: NEG
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 3
29985: NEG
29986: PUSH
29987: LD_INT 2
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 3
29996: NEG
29997: PUSH
29998: LD_INT 3
30000: NEG
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 3
30008: NEG
30009: PUSH
30010: LD_INT 4
30012: NEG
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 2
30020: NEG
30021: PUSH
30022: LD_INT 3
30024: NEG
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 2
30032: NEG
30033: PUSH
30034: LD_INT 2
30036: NEG
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 3
30044: NEG
30045: PUSH
30046: LD_INT 2
30048: NEG
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 4
30056: NEG
30057: PUSH
30058: LD_INT 3
30060: NEG
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 4
30068: NEG
30069: PUSH
30070: LD_INT 4
30072: NEG
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 2
30080: NEG
30081: PUSH
30082: LD_INT 4
30084: NEG
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 4
30092: NEG
30093: PUSH
30094: LD_INT 2
30096: NEG
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 0
30104: PUSH
30105: LD_INT 4
30107: NEG
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 0
30115: PUSH
30116: LD_INT 5
30118: NEG
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 1
30126: PUSH
30127: LD_INT 4
30129: NEG
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 1
30137: PUSH
30138: LD_INT 3
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: LD_INT 3
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 1
30159: NEG
30160: PUSH
30161: LD_INT 4
30163: NEG
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 1
30171: NEG
30172: PUSH
30173: LD_INT 5
30175: NEG
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 2
30183: PUSH
30184: LD_INT 3
30186: NEG
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 2
30194: NEG
30195: PUSH
30196: LD_INT 5
30198: NEG
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30251: LD_ADDR_VAR 0 31
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: LD_INT 4
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 0
30268: PUSH
30269: LD_INT 3
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 1
30278: PUSH
30279: LD_INT 4
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: LD_INT 5
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 0
30298: PUSH
30299: LD_INT 5
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 1
30308: NEG
30309: PUSH
30310: LD_INT 4
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 1
30319: NEG
30320: PUSH
30321: LD_INT 3
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 2
30330: PUSH
30331: LD_INT 5
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 2
30340: NEG
30341: PUSH
30342: LD_INT 3
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 3
30351: NEG
30352: PUSH
30353: LD_INT 0
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 3
30362: NEG
30363: PUSH
30364: LD_INT 1
30366: NEG
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 2
30374: NEG
30375: PUSH
30376: LD_INT 0
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 2
30385: NEG
30386: PUSH
30387: LD_INT 1
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 3
30396: NEG
30397: PUSH
30398: LD_INT 1
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 4
30407: NEG
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 4
30418: NEG
30419: PUSH
30420: LD_INT 1
30422: NEG
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 4
30430: NEG
30431: PUSH
30432: LD_INT 2
30434: NEG
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 2
30442: NEG
30443: PUSH
30444: LD_INT 2
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 4
30453: NEG
30454: PUSH
30455: LD_INT 4
30457: NEG
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 4
30465: NEG
30466: PUSH
30467: LD_INT 5
30469: NEG
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 3
30477: NEG
30478: PUSH
30479: LD_INT 4
30481: NEG
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 3
30489: NEG
30490: PUSH
30491: LD_INT 3
30493: NEG
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 4
30501: NEG
30502: PUSH
30503: LD_INT 3
30505: NEG
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 5
30513: NEG
30514: PUSH
30515: LD_INT 4
30517: NEG
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 5
30525: NEG
30526: PUSH
30527: LD_INT 5
30529: NEG
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 3
30537: NEG
30538: PUSH
30539: LD_INT 5
30541: NEG
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 5
30549: NEG
30550: PUSH
30551: LD_INT 3
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 0
30561: PUSH
30562: LD_INT 3
30564: NEG
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 0
30572: PUSH
30573: LD_INT 4
30575: NEG
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 1
30583: PUSH
30584: LD_INT 3
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 1
30594: PUSH
30595: LD_INT 2
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 0
30605: PUSH
30606: LD_INT 2
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 1
30616: NEG
30617: PUSH
30618: LD_INT 3
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 1
30628: NEG
30629: PUSH
30630: LD_INT 4
30632: NEG
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 2
30640: PUSH
30641: LD_INT 2
30643: NEG
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 2
30651: NEG
30652: PUSH
30653: LD_INT 4
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 4
30663: PUSH
30664: LD_INT 0
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 4
30673: PUSH
30674: LD_INT 1
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 5
30684: PUSH
30685: LD_INT 0
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 5
30694: PUSH
30695: LD_INT 1
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 4
30704: PUSH
30705: LD_INT 1
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 3
30714: PUSH
30715: LD_INT 0
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 3
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 3
30735: PUSH
30736: LD_INT 2
30738: NEG
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 5
30746: PUSH
30747: LD_INT 2
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30801: LD_ADDR_VAR 0 32
30805: PUSH
30806: LD_INT 4
30808: NEG
30809: PUSH
30810: LD_INT 0
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 4
30819: NEG
30820: PUSH
30821: LD_INT 1
30823: NEG
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 3
30831: NEG
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 3
30842: NEG
30843: PUSH
30844: LD_INT 1
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 4
30853: NEG
30854: PUSH
30855: LD_INT 1
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 5
30864: NEG
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 5
30875: NEG
30876: PUSH
30877: LD_INT 1
30879: NEG
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 5
30887: NEG
30888: PUSH
30889: LD_INT 2
30891: NEG
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 3
30899: NEG
30900: PUSH
30901: LD_INT 2
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 3
30910: NEG
30911: PUSH
30912: LD_INT 3
30914: NEG
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 3
30922: NEG
30923: PUSH
30924: LD_INT 4
30926: NEG
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 2
30934: NEG
30935: PUSH
30936: LD_INT 3
30938: NEG
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 2
30946: NEG
30947: PUSH
30948: LD_INT 2
30950: NEG
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 3
30958: NEG
30959: PUSH
30960: LD_INT 2
30962: NEG
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 4
30970: NEG
30971: PUSH
30972: LD_INT 3
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 4
30982: NEG
30983: PUSH
30984: LD_INT 4
30986: NEG
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 2
30994: NEG
30995: PUSH
30996: LD_INT 4
30998: NEG
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 4
31006: NEG
31007: PUSH
31008: LD_INT 2
31010: NEG
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 0
31018: PUSH
31019: LD_INT 4
31021: NEG
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 0
31029: PUSH
31030: LD_INT 5
31032: NEG
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 1
31040: PUSH
31041: LD_INT 4
31043: NEG
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 1
31051: PUSH
31052: LD_INT 3
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 0
31062: PUSH
31063: LD_INT 3
31065: NEG
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: NEG
31074: PUSH
31075: LD_INT 4
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 1
31085: NEG
31086: PUSH
31087: LD_INT 5
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 2
31097: PUSH
31098: LD_INT 3
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 2
31108: NEG
31109: PUSH
31110: LD_INT 5
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 3
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 3
31130: PUSH
31131: LD_INT 1
31133: NEG
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 4
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 4
31151: PUSH
31152: LD_INT 1
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 3
31161: PUSH
31162: LD_INT 1
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 2
31171: PUSH
31172: LD_INT 0
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 2
31181: PUSH
31182: LD_INT 1
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 2
31192: PUSH
31193: LD_INT 2
31195: NEG
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 4
31203: PUSH
31204: LD_INT 2
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 4
31213: PUSH
31214: LD_INT 4
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 4
31223: PUSH
31224: LD_INT 3
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 5
31233: PUSH
31234: LD_INT 4
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 5
31243: PUSH
31244: LD_INT 5
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 4
31253: PUSH
31254: LD_INT 5
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 3
31263: PUSH
31264: LD_INT 4
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 3
31273: PUSH
31274: LD_INT 3
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 5
31283: PUSH
31284: LD_INT 3
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 3
31293: PUSH
31294: LD_INT 5
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31348: LD_ADDR_VAR 0 33
31352: PUSH
31353: LD_INT 4
31355: NEG
31356: PUSH
31357: LD_INT 4
31359: NEG
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 4
31367: NEG
31368: PUSH
31369: LD_INT 5
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 3
31379: NEG
31380: PUSH
31381: LD_INT 4
31383: NEG
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 3
31391: NEG
31392: PUSH
31393: LD_INT 3
31395: NEG
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 4
31403: NEG
31404: PUSH
31405: LD_INT 3
31407: NEG
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 5
31415: NEG
31416: PUSH
31417: LD_INT 4
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 5
31427: NEG
31428: PUSH
31429: LD_INT 5
31431: NEG
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 3
31439: NEG
31440: PUSH
31441: LD_INT 5
31443: NEG
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 5
31451: NEG
31452: PUSH
31453: LD_INT 3
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 0
31463: PUSH
31464: LD_INT 3
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 0
31474: PUSH
31475: LD_INT 4
31477: NEG
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 1
31485: PUSH
31486: LD_INT 3
31488: NEG
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 1
31496: PUSH
31497: LD_INT 2
31499: NEG
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 0
31507: PUSH
31508: LD_INT 2
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 1
31518: NEG
31519: PUSH
31520: LD_INT 3
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: NEG
31531: PUSH
31532: LD_INT 4
31534: NEG
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 2
31542: PUSH
31543: LD_INT 2
31545: NEG
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 2
31553: NEG
31554: PUSH
31555: LD_INT 4
31557: NEG
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 4
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 4
31575: PUSH
31576: LD_INT 1
31578: NEG
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 5
31586: PUSH
31587: LD_INT 0
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 5
31596: PUSH
31597: LD_INT 1
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 4
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 3
31616: PUSH
31617: LD_INT 0
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 3
31626: PUSH
31627: LD_INT 1
31629: NEG
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 3
31637: PUSH
31638: LD_INT 2
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 5
31648: PUSH
31649: LD_INT 2
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 3
31658: PUSH
31659: LD_INT 3
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 3
31668: PUSH
31669: LD_INT 2
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 4
31678: PUSH
31679: LD_INT 3
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 4
31688: PUSH
31689: LD_INT 4
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 3
31698: PUSH
31699: LD_INT 4
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 2
31708: PUSH
31709: LD_INT 3
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 2
31718: PUSH
31719: LD_INT 2
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 4
31728: PUSH
31729: LD_INT 2
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 2
31738: PUSH
31739: LD_INT 4
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 0
31748: PUSH
31749: LD_INT 4
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 0
31758: PUSH
31759: LD_INT 3
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 1
31768: PUSH
31769: LD_INT 4
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 1
31778: PUSH
31779: LD_INT 5
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 0
31788: PUSH
31789: LD_INT 5
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 1
31798: NEG
31799: PUSH
31800: LD_INT 4
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 1
31809: NEG
31810: PUSH
31811: LD_INT 3
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 2
31820: PUSH
31821: LD_INT 5
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 2
31830: NEG
31831: PUSH
31832: LD_INT 3
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31886: LD_ADDR_VAR 0 34
31890: PUSH
31891: LD_INT 0
31893: PUSH
31894: LD_INT 4
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 0
31904: PUSH
31905: LD_INT 5
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 1
31915: PUSH
31916: LD_INT 4
31918: NEG
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 1
31926: PUSH
31927: LD_INT 3
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 0
31937: PUSH
31938: LD_INT 3
31940: NEG
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 1
31948: NEG
31949: PUSH
31950: LD_INT 4
31952: NEG
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 1
31960: NEG
31961: PUSH
31962: LD_INT 5
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 2
31972: PUSH
31973: LD_INT 3
31975: NEG
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 2
31983: NEG
31984: PUSH
31985: LD_INT 5
31987: NEG
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 3
31995: PUSH
31996: LD_INT 0
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 3
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 4
32016: PUSH
32017: LD_INT 0
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 4
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 3
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 2
32046: PUSH
32047: LD_INT 0
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 2
32056: PUSH
32057: LD_INT 1
32059: NEG
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 2
32067: PUSH
32068: LD_INT 2
32070: NEG
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 4
32078: PUSH
32079: LD_INT 2
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 4
32088: PUSH
32089: LD_INT 4
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 4
32098: PUSH
32099: LD_INT 3
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 5
32108: PUSH
32109: LD_INT 4
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 5
32118: PUSH
32119: LD_INT 5
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 4
32128: PUSH
32129: LD_INT 5
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 3
32138: PUSH
32139: LD_INT 4
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 3
32148: PUSH
32149: LD_INT 3
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 5
32158: PUSH
32159: LD_INT 3
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 3
32168: PUSH
32169: LD_INT 5
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 0
32178: PUSH
32179: LD_INT 3
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 0
32188: PUSH
32189: LD_INT 2
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 1
32198: PUSH
32199: LD_INT 3
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: LD_INT 4
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 0
32218: PUSH
32219: LD_INT 4
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 1
32228: NEG
32229: PUSH
32230: LD_INT 3
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 1
32239: NEG
32240: PUSH
32241: LD_INT 2
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 2
32250: PUSH
32251: LD_INT 4
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 2
32260: NEG
32261: PUSH
32262: LD_INT 2
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 4
32271: NEG
32272: PUSH
32273: LD_INT 0
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 4
32282: NEG
32283: PUSH
32284: LD_INT 1
32286: NEG
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 3
32294: NEG
32295: PUSH
32296: LD_INT 0
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 3
32305: NEG
32306: PUSH
32307: LD_INT 1
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 4
32316: NEG
32317: PUSH
32318: LD_INT 1
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 5
32327: NEG
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 5
32338: NEG
32339: PUSH
32340: LD_INT 1
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 5
32350: NEG
32351: PUSH
32352: LD_INT 2
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 3
32362: NEG
32363: PUSH
32364: LD_INT 2
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: ST_TO_ADDR
// end ; end ;
32418: GO 32421
32420: POP
// case btype of b_depot , b_warehouse :
32421: LD_VAR 0 1
32425: PUSH
32426: LD_INT 0
32428: DOUBLE
32429: EQUAL
32430: IFTRUE 32440
32432: LD_INT 1
32434: DOUBLE
32435: EQUAL
32436: IFTRUE 32440
32438: GO 32641
32440: POP
// case nation of nation_american :
32441: LD_VAR 0 5
32445: PUSH
32446: LD_INT 1
32448: DOUBLE
32449: EQUAL
32450: IFTRUE 32454
32452: GO 32510
32454: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32455: LD_ADDR_VAR 0 9
32459: PUSH
32460: LD_VAR 0 11
32464: PUSH
32465: LD_VAR 0 12
32469: PUSH
32470: LD_VAR 0 13
32474: PUSH
32475: LD_VAR 0 14
32479: PUSH
32480: LD_VAR 0 15
32484: PUSH
32485: LD_VAR 0 16
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: PUSH
32498: LD_VAR 0 4
32502: PUSH
32503: LD_INT 1
32505: PLUS
32506: ARRAY
32507: ST_TO_ADDR
32508: GO 32639
32510: LD_INT 2
32512: DOUBLE
32513: EQUAL
32514: IFTRUE 32518
32516: GO 32574
32518: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32519: LD_ADDR_VAR 0 9
32523: PUSH
32524: LD_VAR 0 17
32528: PUSH
32529: LD_VAR 0 18
32533: PUSH
32534: LD_VAR 0 19
32538: PUSH
32539: LD_VAR 0 20
32543: PUSH
32544: LD_VAR 0 21
32548: PUSH
32549: LD_VAR 0 22
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: PUSH
32562: LD_VAR 0 4
32566: PUSH
32567: LD_INT 1
32569: PLUS
32570: ARRAY
32571: ST_TO_ADDR
32572: GO 32639
32574: LD_INT 3
32576: DOUBLE
32577: EQUAL
32578: IFTRUE 32582
32580: GO 32638
32582: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32583: LD_ADDR_VAR 0 9
32587: PUSH
32588: LD_VAR 0 23
32592: PUSH
32593: LD_VAR 0 24
32597: PUSH
32598: LD_VAR 0 25
32602: PUSH
32603: LD_VAR 0 26
32607: PUSH
32608: LD_VAR 0 27
32612: PUSH
32613: LD_VAR 0 28
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: PUSH
32626: LD_VAR 0 4
32630: PUSH
32631: LD_INT 1
32633: PLUS
32634: ARRAY
32635: ST_TO_ADDR
32636: GO 32639
32638: POP
32639: GO 33194
32641: LD_INT 2
32643: DOUBLE
32644: EQUAL
32645: IFTRUE 32655
32647: LD_INT 3
32649: DOUBLE
32650: EQUAL
32651: IFTRUE 32655
32653: GO 32711
32655: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32656: LD_ADDR_VAR 0 9
32660: PUSH
32661: LD_VAR 0 29
32665: PUSH
32666: LD_VAR 0 30
32670: PUSH
32671: LD_VAR 0 31
32675: PUSH
32676: LD_VAR 0 32
32680: PUSH
32681: LD_VAR 0 33
32685: PUSH
32686: LD_VAR 0 34
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: PUSH
32699: LD_VAR 0 4
32703: PUSH
32704: LD_INT 1
32706: PLUS
32707: ARRAY
32708: ST_TO_ADDR
32709: GO 33194
32711: LD_INT 16
32713: DOUBLE
32714: EQUAL
32715: IFTRUE 32773
32717: LD_INT 17
32719: DOUBLE
32720: EQUAL
32721: IFTRUE 32773
32723: LD_INT 18
32725: DOUBLE
32726: EQUAL
32727: IFTRUE 32773
32729: LD_INT 19
32731: DOUBLE
32732: EQUAL
32733: IFTRUE 32773
32735: LD_INT 22
32737: DOUBLE
32738: EQUAL
32739: IFTRUE 32773
32741: LD_INT 20
32743: DOUBLE
32744: EQUAL
32745: IFTRUE 32773
32747: LD_INT 21
32749: DOUBLE
32750: EQUAL
32751: IFTRUE 32773
32753: LD_INT 23
32755: DOUBLE
32756: EQUAL
32757: IFTRUE 32773
32759: LD_INT 24
32761: DOUBLE
32762: EQUAL
32763: IFTRUE 32773
32765: LD_INT 25
32767: DOUBLE
32768: EQUAL
32769: IFTRUE 32773
32771: GO 32829
32773: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32774: LD_ADDR_VAR 0 9
32778: PUSH
32779: LD_VAR 0 35
32783: PUSH
32784: LD_VAR 0 36
32788: PUSH
32789: LD_VAR 0 37
32793: PUSH
32794: LD_VAR 0 38
32798: PUSH
32799: LD_VAR 0 39
32803: PUSH
32804: LD_VAR 0 40
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: PUSH
32817: LD_VAR 0 4
32821: PUSH
32822: LD_INT 1
32824: PLUS
32825: ARRAY
32826: ST_TO_ADDR
32827: GO 33194
32829: LD_INT 6
32831: DOUBLE
32832: EQUAL
32833: IFTRUE 32885
32835: LD_INT 7
32837: DOUBLE
32838: EQUAL
32839: IFTRUE 32885
32841: LD_INT 8
32843: DOUBLE
32844: EQUAL
32845: IFTRUE 32885
32847: LD_INT 13
32849: DOUBLE
32850: EQUAL
32851: IFTRUE 32885
32853: LD_INT 12
32855: DOUBLE
32856: EQUAL
32857: IFTRUE 32885
32859: LD_INT 15
32861: DOUBLE
32862: EQUAL
32863: IFTRUE 32885
32865: LD_INT 11
32867: DOUBLE
32868: EQUAL
32869: IFTRUE 32885
32871: LD_INT 14
32873: DOUBLE
32874: EQUAL
32875: IFTRUE 32885
32877: LD_INT 10
32879: DOUBLE
32880: EQUAL
32881: IFTRUE 32885
32883: GO 32941
32885: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32886: LD_ADDR_VAR 0 9
32890: PUSH
32891: LD_VAR 0 41
32895: PUSH
32896: LD_VAR 0 42
32900: PUSH
32901: LD_VAR 0 43
32905: PUSH
32906: LD_VAR 0 44
32910: PUSH
32911: LD_VAR 0 45
32915: PUSH
32916: LD_VAR 0 46
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: PUSH
32929: LD_VAR 0 4
32933: PUSH
32934: LD_INT 1
32936: PLUS
32937: ARRAY
32938: ST_TO_ADDR
32939: GO 33194
32941: LD_INT 36
32943: DOUBLE
32944: EQUAL
32945: IFTRUE 32949
32947: GO 33005
32949: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32950: LD_ADDR_VAR 0 9
32954: PUSH
32955: LD_VAR 0 47
32959: PUSH
32960: LD_VAR 0 48
32964: PUSH
32965: LD_VAR 0 49
32969: PUSH
32970: LD_VAR 0 50
32974: PUSH
32975: LD_VAR 0 51
32979: PUSH
32980: LD_VAR 0 52
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: PUSH
32993: LD_VAR 0 4
32997: PUSH
32998: LD_INT 1
33000: PLUS
33001: ARRAY
33002: ST_TO_ADDR
33003: GO 33194
33005: LD_INT 4
33007: DOUBLE
33008: EQUAL
33009: IFTRUE 33031
33011: LD_INT 5
33013: DOUBLE
33014: EQUAL
33015: IFTRUE 33031
33017: LD_INT 34
33019: DOUBLE
33020: EQUAL
33021: IFTRUE 33031
33023: LD_INT 37
33025: DOUBLE
33026: EQUAL
33027: IFTRUE 33031
33029: GO 33087
33031: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33032: LD_ADDR_VAR 0 9
33036: PUSH
33037: LD_VAR 0 53
33041: PUSH
33042: LD_VAR 0 54
33046: PUSH
33047: LD_VAR 0 55
33051: PUSH
33052: LD_VAR 0 56
33056: PUSH
33057: LD_VAR 0 57
33061: PUSH
33062: LD_VAR 0 58
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: PUSH
33075: LD_VAR 0 4
33079: PUSH
33080: LD_INT 1
33082: PLUS
33083: ARRAY
33084: ST_TO_ADDR
33085: GO 33194
33087: LD_INT 31
33089: DOUBLE
33090: EQUAL
33091: IFTRUE 33137
33093: LD_INT 32
33095: DOUBLE
33096: EQUAL
33097: IFTRUE 33137
33099: LD_INT 33
33101: DOUBLE
33102: EQUAL
33103: IFTRUE 33137
33105: LD_INT 27
33107: DOUBLE
33108: EQUAL
33109: IFTRUE 33137
33111: LD_INT 26
33113: DOUBLE
33114: EQUAL
33115: IFTRUE 33137
33117: LD_INT 28
33119: DOUBLE
33120: EQUAL
33121: IFTRUE 33137
33123: LD_INT 29
33125: DOUBLE
33126: EQUAL
33127: IFTRUE 33137
33129: LD_INT 30
33131: DOUBLE
33132: EQUAL
33133: IFTRUE 33137
33135: GO 33193
33137: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33138: LD_ADDR_VAR 0 9
33142: PUSH
33143: LD_VAR 0 59
33147: PUSH
33148: LD_VAR 0 60
33152: PUSH
33153: LD_VAR 0 61
33157: PUSH
33158: LD_VAR 0 62
33162: PUSH
33163: LD_VAR 0 63
33167: PUSH
33168: LD_VAR 0 64
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: PUSH
33181: LD_VAR 0 4
33185: PUSH
33186: LD_INT 1
33188: PLUS
33189: ARRAY
33190: ST_TO_ADDR
33191: GO 33194
33193: POP
// temp_list2 = [ ] ;
33194: LD_ADDR_VAR 0 10
33198: PUSH
33199: EMPTY
33200: ST_TO_ADDR
// for i in temp_list do
33201: LD_ADDR_VAR 0 8
33205: PUSH
33206: LD_VAR 0 9
33210: PUSH
33211: FOR_IN
33212: IFFALSE 33264
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33214: LD_ADDR_VAR 0 10
33218: PUSH
33219: LD_VAR 0 10
33223: PUSH
33224: LD_VAR 0 8
33228: PUSH
33229: LD_INT 1
33231: ARRAY
33232: PUSH
33233: LD_VAR 0 2
33237: PLUS
33238: PUSH
33239: LD_VAR 0 8
33243: PUSH
33244: LD_INT 2
33246: ARRAY
33247: PUSH
33248: LD_VAR 0 3
33252: PLUS
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: EMPTY
33259: LIST
33260: ADD
33261: ST_TO_ADDR
33262: GO 33211
33264: POP
33265: POP
// result = temp_list2 ;
33266: LD_ADDR_VAR 0 7
33270: PUSH
33271: LD_VAR 0 10
33275: ST_TO_ADDR
// end ;
33276: LD_VAR 0 7
33280: RET
// export function EnemyInRange ( unit , dist ) ; begin
33281: LD_INT 0
33283: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33284: LD_ADDR_VAR 0 3
33288: PUSH
33289: LD_VAR 0 1
33293: PPUSH
33294: CALL_OW 255
33298: PPUSH
33299: LD_VAR 0 1
33303: PPUSH
33304: CALL_OW 250
33308: PPUSH
33309: LD_VAR 0 1
33313: PPUSH
33314: CALL_OW 251
33318: PPUSH
33319: LD_VAR 0 2
33323: PPUSH
33324: CALL 6677 0 4
33328: PUSH
33329: LD_INT 4
33331: ARRAY
33332: ST_TO_ADDR
// end ;
33333: LD_VAR 0 3
33337: RET
// export function PlayerSeeMe ( unit ) ; begin
33338: LD_INT 0
33340: PPUSH
// result := See ( your_side , unit ) ;
33341: LD_ADDR_VAR 0 2
33345: PUSH
33346: LD_OWVAR 2
33350: PPUSH
33351: LD_VAR 0 1
33355: PPUSH
33356: CALL_OW 292
33360: ST_TO_ADDR
// end ;
33361: LD_VAR 0 2
33365: RET
// export function ReverseDir ( unit ) ; begin
33366: LD_INT 0
33368: PPUSH
// if not unit then
33369: LD_VAR 0 1
33373: NOT
33374: IFFALSE 33378
// exit ;
33376: GO 33401
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33378: LD_ADDR_VAR 0 2
33382: PUSH
33383: LD_VAR 0 1
33387: PPUSH
33388: CALL_OW 254
33392: PUSH
33393: LD_INT 3
33395: PLUS
33396: PUSH
33397: LD_INT 6
33399: MOD
33400: ST_TO_ADDR
// end ;
33401: LD_VAR 0 2
33405: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
33406: LD_INT 0
33408: PPUSH
33409: PPUSH
33410: PPUSH
33411: PPUSH
33412: PPUSH
// if not hexes then
33413: LD_VAR 0 2
33417: NOT
33418: IFFALSE 33422
// exit ;
33420: GO 33570
// dist := 9999 ;
33422: LD_ADDR_VAR 0 5
33426: PUSH
33427: LD_INT 9999
33429: ST_TO_ADDR
// for i = 1 to hexes do
33430: LD_ADDR_VAR 0 4
33434: PUSH
33435: DOUBLE
33436: LD_INT 1
33438: DEC
33439: ST_TO_ADDR
33440: LD_VAR 0 2
33444: PUSH
33445: FOR_TO
33446: IFFALSE 33558
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
33448: LD_VAR 0 1
33452: PPUSH
33453: LD_VAR 0 2
33457: PUSH
33458: LD_VAR 0 4
33462: ARRAY
33463: PUSH
33464: LD_INT 1
33466: ARRAY
33467: PPUSH
33468: LD_VAR 0 2
33472: PUSH
33473: LD_VAR 0 4
33477: ARRAY
33478: PUSH
33479: LD_INT 2
33481: ARRAY
33482: PPUSH
33483: CALL_OW 297
33487: PUSH
33488: LD_VAR 0 5
33492: LESS
33493: IFFALSE 33556
// begin hex := hexes [ i ] ;
33495: LD_ADDR_VAR 0 7
33499: PUSH
33500: LD_VAR 0 2
33504: PUSH
33505: LD_VAR 0 4
33509: ARRAY
33510: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33511: LD_ADDR_VAR 0 5
33515: PUSH
33516: LD_VAR 0 1
33520: PPUSH
33521: LD_VAR 0 2
33525: PUSH
33526: LD_VAR 0 4
33530: ARRAY
33531: PUSH
33532: LD_INT 1
33534: ARRAY
33535: PPUSH
33536: LD_VAR 0 2
33540: PUSH
33541: LD_VAR 0 4
33545: ARRAY
33546: PUSH
33547: LD_INT 2
33549: ARRAY
33550: PPUSH
33551: CALL_OW 297
33555: ST_TO_ADDR
// end ; end ;
33556: GO 33445
33558: POP
33559: POP
// result := hex ;
33560: LD_ADDR_VAR 0 3
33564: PUSH
33565: LD_VAR 0 7
33569: ST_TO_ADDR
// end ;
33570: LD_VAR 0 3
33574: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33575: LD_INT 0
33577: PPUSH
33578: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33579: LD_VAR 0 1
33583: NOT
33584: PUSH
33585: LD_VAR 0 1
33589: PUSH
33590: LD_INT 21
33592: PUSH
33593: LD_INT 2
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 23
33602: PUSH
33603: LD_INT 2
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PPUSH
33614: CALL_OW 69
33618: IN
33619: NOT
33620: OR
33621: IFFALSE 33625
// exit ;
33623: GO 33672
// for i = 1 to 3 do
33625: LD_ADDR_VAR 0 3
33629: PUSH
33630: DOUBLE
33631: LD_INT 1
33633: DEC
33634: ST_TO_ADDR
33635: LD_INT 3
33637: PUSH
33638: FOR_TO
33639: IFFALSE 33670
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33641: LD_VAR 0 1
33645: PPUSH
33646: CALL_OW 250
33650: PPUSH
33651: LD_VAR 0 1
33655: PPUSH
33656: CALL_OW 251
33660: PPUSH
33661: LD_INT 1
33663: PPUSH
33664: CALL_OW 453
33668: GO 33638
33670: POP
33671: POP
// end ;
33672: LD_VAR 0 2
33676: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33677: LD_INT 0
33679: PPUSH
33680: PPUSH
33681: PPUSH
33682: PPUSH
33683: PPUSH
33684: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
33685: LD_VAR 0 1
33689: NOT
33690: PUSH
33691: LD_VAR 0 2
33695: NOT
33696: OR
33697: PUSH
33698: LD_VAR 0 1
33702: PPUSH
33703: CALL_OW 314
33707: OR
33708: IFFALSE 33712
// exit ;
33710: GO 34153
// x := GetX ( enemy_unit ) ;
33712: LD_ADDR_VAR 0 7
33716: PUSH
33717: LD_VAR 0 2
33721: PPUSH
33722: CALL_OW 250
33726: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33727: LD_ADDR_VAR 0 8
33731: PUSH
33732: LD_VAR 0 2
33736: PPUSH
33737: CALL_OW 251
33741: ST_TO_ADDR
// if not x or not y then
33742: LD_VAR 0 7
33746: NOT
33747: PUSH
33748: LD_VAR 0 8
33752: NOT
33753: OR
33754: IFFALSE 33758
// exit ;
33756: GO 34153
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33758: LD_ADDR_VAR 0 6
33762: PUSH
33763: LD_VAR 0 7
33767: PPUSH
33768: LD_INT 0
33770: PPUSH
33771: LD_INT 4
33773: PPUSH
33774: CALL_OW 272
33778: PUSH
33779: LD_VAR 0 8
33783: PPUSH
33784: LD_INT 0
33786: PPUSH
33787: LD_INT 4
33789: PPUSH
33790: CALL_OW 273
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_VAR 0 7
33803: PPUSH
33804: LD_INT 1
33806: PPUSH
33807: LD_INT 4
33809: PPUSH
33810: CALL_OW 272
33814: PUSH
33815: LD_VAR 0 8
33819: PPUSH
33820: LD_INT 1
33822: PPUSH
33823: LD_INT 4
33825: PPUSH
33826: CALL_OW 273
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_VAR 0 7
33839: PPUSH
33840: LD_INT 2
33842: PPUSH
33843: LD_INT 4
33845: PPUSH
33846: CALL_OW 272
33850: PUSH
33851: LD_VAR 0 8
33855: PPUSH
33856: LD_INT 2
33858: PPUSH
33859: LD_INT 4
33861: PPUSH
33862: CALL_OW 273
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_VAR 0 7
33875: PPUSH
33876: LD_INT 3
33878: PPUSH
33879: LD_INT 4
33881: PPUSH
33882: CALL_OW 272
33886: PUSH
33887: LD_VAR 0 8
33891: PPUSH
33892: LD_INT 3
33894: PPUSH
33895: LD_INT 4
33897: PPUSH
33898: CALL_OW 273
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_VAR 0 7
33911: PPUSH
33912: LD_INT 4
33914: PPUSH
33915: LD_INT 4
33917: PPUSH
33918: CALL_OW 272
33922: PUSH
33923: LD_VAR 0 8
33927: PPUSH
33928: LD_INT 4
33930: PPUSH
33931: LD_INT 4
33933: PPUSH
33934: CALL_OW 273
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_VAR 0 7
33947: PPUSH
33948: LD_INT 5
33950: PPUSH
33951: LD_INT 4
33953: PPUSH
33954: CALL_OW 272
33958: PUSH
33959: LD_VAR 0 8
33963: PPUSH
33964: LD_INT 5
33966: PPUSH
33967: LD_INT 4
33969: PPUSH
33970: CALL_OW 273
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: ST_TO_ADDR
// for i = tmp downto 1 do
33987: LD_ADDR_VAR 0 4
33991: PUSH
33992: DOUBLE
33993: LD_VAR 0 6
33997: INC
33998: ST_TO_ADDR
33999: LD_INT 1
34001: PUSH
34002: FOR_DOWNTO
34003: IFFALSE 34104
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34005: LD_VAR 0 6
34009: PUSH
34010: LD_VAR 0 4
34014: ARRAY
34015: PUSH
34016: LD_INT 1
34018: ARRAY
34019: PPUSH
34020: LD_VAR 0 6
34024: PUSH
34025: LD_VAR 0 4
34029: ARRAY
34030: PUSH
34031: LD_INT 2
34033: ARRAY
34034: PPUSH
34035: CALL_OW 488
34039: NOT
34040: PUSH
34041: LD_VAR 0 6
34045: PUSH
34046: LD_VAR 0 4
34050: ARRAY
34051: PUSH
34052: LD_INT 1
34054: ARRAY
34055: PPUSH
34056: LD_VAR 0 6
34060: PUSH
34061: LD_VAR 0 4
34065: ARRAY
34066: PUSH
34067: LD_INT 2
34069: ARRAY
34070: PPUSH
34071: CALL_OW 428
34075: PUSH
34076: LD_INT 0
34078: NONEQUAL
34079: OR
34080: IFFALSE 34102
// tmp := Delete ( tmp , i ) ;
34082: LD_ADDR_VAR 0 6
34086: PUSH
34087: LD_VAR 0 6
34091: PPUSH
34092: LD_VAR 0 4
34096: PPUSH
34097: CALL_OW 3
34101: ST_TO_ADDR
34102: GO 34002
34104: POP
34105: POP
// j := GetClosestHex ( unit , tmp ) ;
34106: LD_ADDR_VAR 0 5
34110: PUSH
34111: LD_VAR 0 1
34115: PPUSH
34116: LD_VAR 0 6
34120: PPUSH
34121: CALL 33406 0 2
34125: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34126: LD_VAR 0 1
34130: PPUSH
34131: LD_VAR 0 5
34135: PUSH
34136: LD_INT 1
34138: ARRAY
34139: PPUSH
34140: LD_VAR 0 5
34144: PUSH
34145: LD_INT 2
34147: ARRAY
34148: PPUSH
34149: CALL_OW 111
// end ;
34153: LD_VAR 0 3
34157: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34158: LD_INT 0
34160: PPUSH
34161: PPUSH
34162: PPUSH
// uc_side = 0 ;
34163: LD_ADDR_OWVAR 20
34167: PUSH
34168: LD_INT 0
34170: ST_TO_ADDR
// uc_nation = 0 ;
34171: LD_ADDR_OWVAR 21
34175: PUSH
34176: LD_INT 0
34178: ST_TO_ADDR
// InitHc_All ( ) ;
34179: CALL_OW 584
// InitVc ;
34183: CALL_OW 20
// if mastodonts then
34187: LD_VAR 0 6
34191: IFFALSE 34258
// for i = 1 to mastodonts do
34193: LD_ADDR_VAR 0 11
34197: PUSH
34198: DOUBLE
34199: LD_INT 1
34201: DEC
34202: ST_TO_ADDR
34203: LD_VAR 0 6
34207: PUSH
34208: FOR_TO
34209: IFFALSE 34256
// begin vc_chassis := 31 ;
34211: LD_ADDR_OWVAR 37
34215: PUSH
34216: LD_INT 31
34218: ST_TO_ADDR
// vc_control := control_rider ;
34219: LD_ADDR_OWVAR 38
34223: PUSH
34224: LD_INT 4
34226: ST_TO_ADDR
// animal := CreateVehicle ;
34227: LD_ADDR_VAR 0 12
34231: PUSH
34232: CALL_OW 45
34236: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34237: LD_VAR 0 12
34241: PPUSH
34242: LD_VAR 0 8
34246: PPUSH
34247: LD_INT 0
34249: PPUSH
34250: CALL 36393 0 3
// end ;
34254: GO 34208
34256: POP
34257: POP
// if horses then
34258: LD_VAR 0 5
34262: IFFALSE 34329
// for i = 1 to horses do
34264: LD_ADDR_VAR 0 11
34268: PUSH
34269: DOUBLE
34270: LD_INT 1
34272: DEC
34273: ST_TO_ADDR
34274: LD_VAR 0 5
34278: PUSH
34279: FOR_TO
34280: IFFALSE 34327
// begin hc_class := 21 ;
34282: LD_ADDR_OWVAR 28
34286: PUSH
34287: LD_INT 21
34289: ST_TO_ADDR
// hc_gallery :=  ;
34290: LD_ADDR_OWVAR 33
34294: PUSH
34295: LD_STRING 
34297: ST_TO_ADDR
// animal := CreateHuman ;
34298: LD_ADDR_VAR 0 12
34302: PUSH
34303: CALL_OW 44
34307: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34308: LD_VAR 0 12
34312: PPUSH
34313: LD_VAR 0 8
34317: PPUSH
34318: LD_INT 0
34320: PPUSH
34321: CALL 36393 0 3
// end ;
34325: GO 34279
34327: POP
34328: POP
// if birds then
34329: LD_VAR 0 1
34333: IFFALSE 34400
// for i = 1 to birds do
34335: LD_ADDR_VAR 0 11
34339: PUSH
34340: DOUBLE
34341: LD_INT 1
34343: DEC
34344: ST_TO_ADDR
34345: LD_VAR 0 1
34349: PUSH
34350: FOR_TO
34351: IFFALSE 34398
// begin hc_class = 18 ;
34353: LD_ADDR_OWVAR 28
34357: PUSH
34358: LD_INT 18
34360: ST_TO_ADDR
// hc_gallery =  ;
34361: LD_ADDR_OWVAR 33
34365: PUSH
34366: LD_STRING 
34368: ST_TO_ADDR
// animal := CreateHuman ;
34369: LD_ADDR_VAR 0 12
34373: PUSH
34374: CALL_OW 44
34378: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34379: LD_VAR 0 12
34383: PPUSH
34384: LD_VAR 0 8
34388: PPUSH
34389: LD_INT 0
34391: PPUSH
34392: CALL 36393 0 3
// end ;
34396: GO 34350
34398: POP
34399: POP
// if tigers then
34400: LD_VAR 0 2
34404: IFFALSE 34488
// for i = 1 to tigers do
34406: LD_ADDR_VAR 0 11
34410: PUSH
34411: DOUBLE
34412: LD_INT 1
34414: DEC
34415: ST_TO_ADDR
34416: LD_VAR 0 2
34420: PUSH
34421: FOR_TO
34422: IFFALSE 34486
// begin hc_class = class_tiger ;
34424: LD_ADDR_OWVAR 28
34428: PUSH
34429: LD_INT 14
34431: ST_TO_ADDR
// hc_gallery =  ;
34432: LD_ADDR_OWVAR 33
34436: PUSH
34437: LD_STRING 
34439: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34440: LD_ADDR_OWVAR 35
34444: PUSH
34445: LD_INT 7
34447: NEG
34448: PPUSH
34449: LD_INT 7
34451: PPUSH
34452: CALL_OW 12
34456: ST_TO_ADDR
// animal := CreateHuman ;
34457: LD_ADDR_VAR 0 12
34461: PUSH
34462: CALL_OW 44
34466: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34467: LD_VAR 0 12
34471: PPUSH
34472: LD_VAR 0 8
34476: PPUSH
34477: LD_INT 0
34479: PPUSH
34480: CALL 36393 0 3
// end ;
34484: GO 34421
34486: POP
34487: POP
// if apemans then
34488: LD_VAR 0 3
34492: IFFALSE 34615
// for i = 1 to apemans do
34494: LD_ADDR_VAR 0 11
34498: PUSH
34499: DOUBLE
34500: LD_INT 1
34502: DEC
34503: ST_TO_ADDR
34504: LD_VAR 0 3
34508: PUSH
34509: FOR_TO
34510: IFFALSE 34613
// begin hc_class = class_apeman ;
34512: LD_ADDR_OWVAR 28
34516: PUSH
34517: LD_INT 12
34519: ST_TO_ADDR
// hc_gallery =  ;
34520: LD_ADDR_OWVAR 33
34524: PUSH
34525: LD_STRING 
34527: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
34528: LD_ADDR_OWVAR 35
34532: PUSH
34533: LD_INT 2
34535: NEG
34536: PPUSH
34537: LD_INT 2
34539: PPUSH
34540: CALL_OW 12
34544: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
34545: LD_ADDR_OWVAR 31
34549: PUSH
34550: LD_INT 1
34552: PPUSH
34553: LD_INT 3
34555: PPUSH
34556: CALL_OW 12
34560: PUSH
34561: LD_INT 1
34563: PPUSH
34564: LD_INT 3
34566: PPUSH
34567: CALL_OW 12
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: LD_INT 0
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: ST_TO_ADDR
// animal := CreateHuman ;
34584: LD_ADDR_VAR 0 12
34588: PUSH
34589: CALL_OW 44
34593: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34594: LD_VAR 0 12
34598: PPUSH
34599: LD_VAR 0 8
34603: PPUSH
34604: LD_INT 0
34606: PPUSH
34607: CALL 36393 0 3
// end ;
34611: GO 34509
34613: POP
34614: POP
// if enchidnas then
34615: LD_VAR 0 4
34619: IFFALSE 34686
// for i = 1 to enchidnas do
34621: LD_ADDR_VAR 0 11
34625: PUSH
34626: DOUBLE
34627: LD_INT 1
34629: DEC
34630: ST_TO_ADDR
34631: LD_VAR 0 4
34635: PUSH
34636: FOR_TO
34637: IFFALSE 34684
// begin hc_class = 13 ;
34639: LD_ADDR_OWVAR 28
34643: PUSH
34644: LD_INT 13
34646: ST_TO_ADDR
// hc_gallery =  ;
34647: LD_ADDR_OWVAR 33
34651: PUSH
34652: LD_STRING 
34654: ST_TO_ADDR
// animal := CreateHuman ;
34655: LD_ADDR_VAR 0 12
34659: PUSH
34660: CALL_OW 44
34664: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34665: LD_VAR 0 12
34669: PPUSH
34670: LD_VAR 0 8
34674: PPUSH
34675: LD_INT 0
34677: PPUSH
34678: CALL 36393 0 3
// end ;
34682: GO 34636
34684: POP
34685: POP
// if fishes then
34686: LD_VAR 0 7
34690: IFFALSE 34757
// for i = 1 to fishes do
34692: LD_ADDR_VAR 0 11
34696: PUSH
34697: DOUBLE
34698: LD_INT 1
34700: DEC
34701: ST_TO_ADDR
34702: LD_VAR 0 7
34706: PUSH
34707: FOR_TO
34708: IFFALSE 34755
// begin hc_class = 20 ;
34710: LD_ADDR_OWVAR 28
34714: PUSH
34715: LD_INT 20
34717: ST_TO_ADDR
// hc_gallery =  ;
34718: LD_ADDR_OWVAR 33
34722: PUSH
34723: LD_STRING 
34725: ST_TO_ADDR
// animal := CreateHuman ;
34726: LD_ADDR_VAR 0 12
34730: PUSH
34731: CALL_OW 44
34735: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
34736: LD_VAR 0 12
34740: PPUSH
34741: LD_VAR 0 9
34745: PPUSH
34746: LD_INT 0
34748: PPUSH
34749: CALL 36393 0 3
// end ;
34753: GO 34707
34755: POP
34756: POP
// end ;
34757: LD_VAR 0 10
34761: RET
// export function WantHeal ( sci , unit ) ; begin
34762: LD_INT 0
34764: PPUSH
// if GetTaskList ( sci ) > 0 then
34765: LD_VAR 0 1
34769: PPUSH
34770: CALL_OW 437
34774: PUSH
34775: LD_INT 0
34777: GREATER
34778: IFFALSE 34848
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
34780: LD_VAR 0 1
34784: PPUSH
34785: CALL_OW 437
34789: PUSH
34790: LD_INT 1
34792: ARRAY
34793: PUSH
34794: LD_INT 1
34796: ARRAY
34797: PUSH
34798: LD_STRING l
34800: EQUAL
34801: PUSH
34802: LD_VAR 0 1
34806: PPUSH
34807: CALL_OW 437
34811: PUSH
34812: LD_INT 1
34814: ARRAY
34815: PUSH
34816: LD_INT 4
34818: ARRAY
34819: PUSH
34820: LD_VAR 0 2
34824: EQUAL
34825: AND
34826: IFFALSE 34838
// result := true else
34828: LD_ADDR_VAR 0 3
34832: PUSH
34833: LD_INT 1
34835: ST_TO_ADDR
34836: GO 34846
// result := false ;
34838: LD_ADDR_VAR 0 3
34842: PUSH
34843: LD_INT 0
34845: ST_TO_ADDR
// end else
34846: GO 34856
// result := false ;
34848: LD_ADDR_VAR 0 3
34852: PUSH
34853: LD_INT 0
34855: ST_TO_ADDR
// end ;
34856: LD_VAR 0 3
34860: RET
// export function HealTarget ( sci ) ; begin
34861: LD_INT 0
34863: PPUSH
// if not sci then
34864: LD_VAR 0 1
34868: NOT
34869: IFFALSE 34873
// exit ;
34871: GO 34938
// result := 0 ;
34873: LD_ADDR_VAR 0 2
34877: PUSH
34878: LD_INT 0
34880: ST_TO_ADDR
// if GetTaskList ( sci ) then
34881: LD_VAR 0 1
34885: PPUSH
34886: CALL_OW 437
34890: IFFALSE 34938
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
34892: LD_VAR 0 1
34896: PPUSH
34897: CALL_OW 437
34901: PUSH
34902: LD_INT 1
34904: ARRAY
34905: PUSH
34906: LD_INT 1
34908: ARRAY
34909: PUSH
34910: LD_STRING l
34912: EQUAL
34913: IFFALSE 34938
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
34915: LD_ADDR_VAR 0 2
34919: PUSH
34920: LD_VAR 0 1
34924: PPUSH
34925: CALL_OW 437
34929: PUSH
34930: LD_INT 1
34932: ARRAY
34933: PUSH
34934: LD_INT 4
34936: ARRAY
34937: ST_TO_ADDR
// end ;
34938: LD_VAR 0 2
34942: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
34943: LD_INT 0
34945: PPUSH
34946: PPUSH
34947: PPUSH
34948: PPUSH
// if not base_units then
34949: LD_VAR 0 1
34953: NOT
34954: IFFALSE 34958
// exit ;
34956: GO 35045
// result := false ;
34958: LD_ADDR_VAR 0 2
34962: PUSH
34963: LD_INT 0
34965: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
34966: LD_ADDR_VAR 0 5
34970: PUSH
34971: LD_VAR 0 1
34975: PPUSH
34976: LD_INT 21
34978: PUSH
34979: LD_INT 3
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PPUSH
34986: CALL_OW 72
34990: ST_TO_ADDR
// if not tmp then
34991: LD_VAR 0 5
34995: NOT
34996: IFFALSE 35000
// exit ;
34998: GO 35045
// for i in tmp do
35000: LD_ADDR_VAR 0 3
35004: PUSH
35005: LD_VAR 0 5
35009: PUSH
35010: FOR_IN
35011: IFFALSE 35043
// begin result := EnemyInRange ( i , 22 ) ;
35013: LD_ADDR_VAR 0 2
35017: PUSH
35018: LD_VAR 0 3
35022: PPUSH
35023: LD_INT 22
35025: PPUSH
35026: CALL 33281 0 2
35030: ST_TO_ADDR
// if result then
35031: LD_VAR 0 2
35035: IFFALSE 35041
// exit ;
35037: POP
35038: POP
35039: GO 35045
// end ;
35041: GO 35010
35043: POP
35044: POP
// end ;
35045: LD_VAR 0 2
35049: RET
// export function FilterByTag ( units , tag ) ; begin
35050: LD_INT 0
35052: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35053: LD_ADDR_VAR 0 3
35057: PUSH
35058: LD_VAR 0 1
35062: PPUSH
35063: LD_INT 120
35065: PUSH
35066: LD_VAR 0 2
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PPUSH
35075: CALL_OW 72
35079: ST_TO_ADDR
// end ;
35080: LD_VAR 0 3
35084: RET
// export function IsDriver ( un ) ; begin
35085: LD_INT 0
35087: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35088: LD_ADDR_VAR 0 2
35092: PUSH
35093: LD_VAR 0 1
35097: PUSH
35098: LD_INT 55
35100: PUSH
35101: EMPTY
35102: LIST
35103: PPUSH
35104: CALL_OW 69
35108: IN
35109: ST_TO_ADDR
// end ;
35110: LD_VAR 0 2
35114: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35115: LD_INT 0
35117: PPUSH
35118: PPUSH
// list := [ ] ;
35119: LD_ADDR_VAR 0 5
35123: PUSH
35124: EMPTY
35125: ST_TO_ADDR
// case d of 0 :
35126: LD_VAR 0 3
35130: PUSH
35131: LD_INT 0
35133: DOUBLE
35134: EQUAL
35135: IFTRUE 35139
35137: GO 35272
35139: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35140: LD_ADDR_VAR 0 5
35144: PUSH
35145: LD_VAR 0 1
35149: PUSH
35150: LD_INT 4
35152: MINUS
35153: PUSH
35154: LD_VAR 0 2
35158: PUSH
35159: LD_INT 4
35161: MINUS
35162: PUSH
35163: LD_INT 2
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: LIST
35170: PUSH
35171: LD_VAR 0 1
35175: PUSH
35176: LD_INT 3
35178: MINUS
35179: PUSH
35180: LD_VAR 0 2
35184: PUSH
35185: LD_INT 1
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: LIST
35192: PUSH
35193: LD_VAR 0 1
35197: PUSH
35198: LD_INT 4
35200: PLUS
35201: PUSH
35202: LD_VAR 0 2
35206: PUSH
35207: LD_INT 4
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: LIST
35214: PUSH
35215: LD_VAR 0 1
35219: PUSH
35220: LD_INT 3
35222: PLUS
35223: PUSH
35224: LD_VAR 0 2
35228: PUSH
35229: LD_INT 3
35231: PLUS
35232: PUSH
35233: LD_INT 5
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: LIST
35240: PUSH
35241: LD_VAR 0 1
35245: PUSH
35246: LD_VAR 0 2
35250: PUSH
35251: LD_INT 4
35253: PLUS
35254: PUSH
35255: LD_INT 0
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: LIST
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: ST_TO_ADDR
// end ; 1 :
35270: GO 35970
35272: LD_INT 1
35274: DOUBLE
35275: EQUAL
35276: IFTRUE 35280
35278: GO 35413
35280: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35281: LD_ADDR_VAR 0 5
35285: PUSH
35286: LD_VAR 0 1
35290: PUSH
35291: LD_VAR 0 2
35295: PUSH
35296: LD_INT 4
35298: MINUS
35299: PUSH
35300: LD_INT 3
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: LIST
35307: PUSH
35308: LD_VAR 0 1
35312: PUSH
35313: LD_INT 3
35315: MINUS
35316: PUSH
35317: LD_VAR 0 2
35321: PUSH
35322: LD_INT 3
35324: MINUS
35325: PUSH
35326: LD_INT 2
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: LIST
35333: PUSH
35334: LD_VAR 0 1
35338: PUSH
35339: LD_INT 4
35341: MINUS
35342: PUSH
35343: LD_VAR 0 2
35347: PUSH
35348: LD_INT 1
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: LIST
35355: PUSH
35356: LD_VAR 0 1
35360: PUSH
35361: LD_VAR 0 2
35365: PUSH
35366: LD_INT 3
35368: PLUS
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: LIST
35377: PUSH
35378: LD_VAR 0 1
35382: PUSH
35383: LD_INT 4
35385: PLUS
35386: PUSH
35387: LD_VAR 0 2
35391: PUSH
35392: LD_INT 4
35394: PLUS
35395: PUSH
35396: LD_INT 5
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: LIST
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: ST_TO_ADDR
// end ; 2 :
35411: GO 35970
35413: LD_INT 2
35415: DOUBLE
35416: EQUAL
35417: IFTRUE 35421
35419: GO 35550
35421: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35422: LD_ADDR_VAR 0 5
35426: PUSH
35427: LD_VAR 0 1
35431: PUSH
35432: LD_VAR 0 2
35436: PUSH
35437: LD_INT 3
35439: MINUS
35440: PUSH
35441: LD_INT 3
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: LIST
35448: PUSH
35449: LD_VAR 0 1
35453: PUSH
35454: LD_INT 4
35456: PLUS
35457: PUSH
35458: LD_VAR 0 2
35462: PUSH
35463: LD_INT 4
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: LIST
35470: PUSH
35471: LD_VAR 0 1
35475: PUSH
35476: LD_VAR 0 2
35480: PUSH
35481: LD_INT 4
35483: PLUS
35484: PUSH
35485: LD_INT 0
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: LIST
35492: PUSH
35493: LD_VAR 0 1
35497: PUSH
35498: LD_INT 3
35500: MINUS
35501: PUSH
35502: LD_VAR 0 2
35506: PUSH
35507: LD_INT 1
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: LIST
35514: PUSH
35515: LD_VAR 0 1
35519: PUSH
35520: LD_INT 4
35522: MINUS
35523: PUSH
35524: LD_VAR 0 2
35528: PUSH
35529: LD_INT 4
35531: MINUS
35532: PUSH
35533: LD_INT 2
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: LIST
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: ST_TO_ADDR
// end ; 3 :
35548: GO 35970
35550: LD_INT 3
35552: DOUBLE
35553: EQUAL
35554: IFTRUE 35558
35556: GO 35691
35558: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
35559: LD_ADDR_VAR 0 5
35563: PUSH
35564: LD_VAR 0 1
35568: PUSH
35569: LD_INT 3
35571: PLUS
35572: PUSH
35573: LD_VAR 0 2
35577: PUSH
35578: LD_INT 4
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: LIST
35585: PUSH
35586: LD_VAR 0 1
35590: PUSH
35591: LD_INT 4
35593: PLUS
35594: PUSH
35595: LD_VAR 0 2
35599: PUSH
35600: LD_INT 4
35602: PLUS
35603: PUSH
35604: LD_INT 5
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: PUSH
35612: LD_VAR 0 1
35616: PUSH
35617: LD_INT 4
35619: MINUS
35620: PUSH
35621: LD_VAR 0 2
35625: PUSH
35626: LD_INT 1
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: LIST
35633: PUSH
35634: LD_VAR 0 1
35638: PUSH
35639: LD_VAR 0 2
35643: PUSH
35644: LD_INT 4
35646: MINUS
35647: PUSH
35648: LD_INT 3
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: LIST
35655: PUSH
35656: LD_VAR 0 1
35660: PUSH
35661: LD_INT 3
35663: MINUS
35664: PUSH
35665: LD_VAR 0 2
35669: PUSH
35670: LD_INT 3
35672: MINUS
35673: PUSH
35674: LD_INT 2
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: LIST
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: ST_TO_ADDR
// end ; 4 :
35689: GO 35970
35691: LD_INT 4
35693: DOUBLE
35694: EQUAL
35695: IFTRUE 35699
35697: GO 35832
35699: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
35700: LD_ADDR_VAR 0 5
35704: PUSH
35705: LD_VAR 0 1
35709: PUSH
35710: LD_VAR 0 2
35714: PUSH
35715: LD_INT 4
35717: PLUS
35718: PUSH
35719: LD_INT 0
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: LIST
35726: PUSH
35727: LD_VAR 0 1
35731: PUSH
35732: LD_INT 3
35734: PLUS
35735: PUSH
35736: LD_VAR 0 2
35740: PUSH
35741: LD_INT 3
35743: PLUS
35744: PUSH
35745: LD_INT 5
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: LIST
35752: PUSH
35753: LD_VAR 0 1
35757: PUSH
35758: LD_INT 4
35760: PLUS
35761: PUSH
35762: LD_VAR 0 2
35766: PUSH
35767: LD_INT 4
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: LIST
35774: PUSH
35775: LD_VAR 0 1
35779: PUSH
35780: LD_VAR 0 2
35784: PUSH
35785: LD_INT 3
35787: MINUS
35788: PUSH
35789: LD_INT 3
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: LIST
35796: PUSH
35797: LD_VAR 0 1
35801: PUSH
35802: LD_INT 4
35804: MINUS
35805: PUSH
35806: LD_VAR 0 2
35810: PUSH
35811: LD_INT 4
35813: MINUS
35814: PUSH
35815: LD_INT 2
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: LIST
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: ST_TO_ADDR
// end ; 5 :
35830: GO 35970
35832: LD_INT 5
35834: DOUBLE
35835: EQUAL
35836: IFTRUE 35840
35838: GO 35969
35840: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
35841: LD_ADDR_VAR 0 5
35845: PUSH
35846: LD_VAR 0 1
35850: PUSH
35851: LD_INT 4
35853: MINUS
35854: PUSH
35855: LD_VAR 0 2
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: LIST
35867: PUSH
35868: LD_VAR 0 1
35872: PUSH
35873: LD_VAR 0 2
35877: PUSH
35878: LD_INT 4
35880: MINUS
35881: PUSH
35882: LD_INT 3
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: PUSH
35890: LD_VAR 0 1
35894: PUSH
35895: LD_INT 4
35897: PLUS
35898: PUSH
35899: LD_VAR 0 2
35903: PUSH
35904: LD_INT 4
35906: PLUS
35907: PUSH
35908: LD_INT 5
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: LIST
35915: PUSH
35916: LD_VAR 0 1
35920: PUSH
35921: LD_INT 3
35923: PLUS
35924: PUSH
35925: LD_VAR 0 2
35929: PUSH
35930: LD_INT 4
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: LIST
35937: PUSH
35938: LD_VAR 0 1
35942: PUSH
35943: LD_VAR 0 2
35947: PUSH
35948: LD_INT 3
35950: PLUS
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: LIST
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: ST_TO_ADDR
// end ; end ;
35967: GO 35970
35969: POP
// result := list ;
35970: LD_ADDR_VAR 0 4
35974: PUSH
35975: LD_VAR 0 5
35979: ST_TO_ADDR
// end ;
35980: LD_VAR 0 4
35984: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
35985: LD_INT 0
35987: PPUSH
35988: PPUSH
35989: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
35990: LD_VAR 0 1
35994: NOT
35995: PUSH
35996: LD_VAR 0 2
36000: PUSH
36001: LD_INT 1
36003: PUSH
36004: LD_INT 2
36006: PUSH
36007: LD_INT 3
36009: PUSH
36010: LD_INT 4
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: IN
36019: NOT
36020: OR
36021: IFFALSE 36025
// exit ;
36023: GO 36117
// tmp := [ ] ;
36025: LD_ADDR_VAR 0 5
36029: PUSH
36030: EMPTY
36031: ST_TO_ADDR
// for i in units do
36032: LD_ADDR_VAR 0 4
36036: PUSH
36037: LD_VAR 0 1
36041: PUSH
36042: FOR_IN
36043: IFFALSE 36086
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
36045: LD_ADDR_VAR 0 5
36049: PUSH
36050: LD_VAR 0 5
36054: PPUSH
36055: LD_VAR 0 5
36059: PUSH
36060: LD_INT 1
36062: PLUS
36063: PPUSH
36064: LD_VAR 0 4
36068: PPUSH
36069: LD_VAR 0 2
36073: PPUSH
36074: CALL_OW 259
36078: PPUSH
36079: CALL_OW 2
36083: ST_TO_ADDR
36084: GO 36042
36086: POP
36087: POP
// if not tmp then
36088: LD_VAR 0 5
36092: NOT
36093: IFFALSE 36097
// exit ;
36095: GO 36117
// result := SortListByListDesc ( units , tmp ) ;
36097: LD_ADDR_VAR 0 3
36101: PUSH
36102: LD_VAR 0 1
36106: PPUSH
36107: LD_VAR 0 5
36111: PPUSH
36112: CALL_OW 77
36116: ST_TO_ADDR
// end ;
36117: LD_VAR 0 3
36121: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36122: LD_INT 0
36124: PPUSH
36125: PPUSH
36126: PPUSH
// result := false ;
36127: LD_ADDR_VAR 0 3
36131: PUSH
36132: LD_INT 0
36134: ST_TO_ADDR
// x := GetX ( building ) ;
36135: LD_ADDR_VAR 0 4
36139: PUSH
36140: LD_VAR 0 2
36144: PPUSH
36145: CALL_OW 250
36149: ST_TO_ADDR
// y := GetY ( building ) ;
36150: LD_ADDR_VAR 0 5
36154: PUSH
36155: LD_VAR 0 2
36159: PPUSH
36160: CALL_OW 251
36164: ST_TO_ADDR
// if not building or not x or not y then
36165: LD_VAR 0 2
36169: NOT
36170: PUSH
36171: LD_VAR 0 4
36175: NOT
36176: OR
36177: PUSH
36178: LD_VAR 0 5
36182: NOT
36183: OR
36184: IFFALSE 36188
// exit ;
36186: GO 36280
// if GetTaskList ( unit ) then
36188: LD_VAR 0 1
36192: PPUSH
36193: CALL_OW 437
36197: IFFALSE 36280
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36199: LD_STRING e
36201: PUSH
36202: LD_VAR 0 1
36206: PPUSH
36207: CALL_OW 437
36211: PUSH
36212: LD_INT 1
36214: ARRAY
36215: PUSH
36216: LD_INT 1
36218: ARRAY
36219: EQUAL
36220: PUSH
36221: LD_VAR 0 4
36225: PUSH
36226: LD_VAR 0 1
36230: PPUSH
36231: CALL_OW 437
36235: PUSH
36236: LD_INT 1
36238: ARRAY
36239: PUSH
36240: LD_INT 2
36242: ARRAY
36243: EQUAL
36244: AND
36245: PUSH
36246: LD_VAR 0 5
36250: PUSH
36251: LD_VAR 0 1
36255: PPUSH
36256: CALL_OW 437
36260: PUSH
36261: LD_INT 1
36263: ARRAY
36264: PUSH
36265: LD_INT 3
36267: ARRAY
36268: EQUAL
36269: AND
36270: IFFALSE 36280
// result := true end ;
36272: LD_ADDR_VAR 0 3
36276: PUSH
36277: LD_INT 1
36279: ST_TO_ADDR
// end ;
36280: LD_VAR 0 3
36284: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36285: LD_INT 0
36287: PPUSH
// result := false ;
36288: LD_ADDR_VAR 0 4
36292: PUSH
36293: LD_INT 0
36295: ST_TO_ADDR
// if GetTaskList ( unit ) then
36296: LD_VAR 0 1
36300: PPUSH
36301: CALL_OW 437
36305: IFFALSE 36388
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36307: LD_STRING M
36309: PUSH
36310: LD_VAR 0 1
36314: PPUSH
36315: CALL_OW 437
36319: PUSH
36320: LD_INT 1
36322: ARRAY
36323: PUSH
36324: LD_INT 1
36326: ARRAY
36327: EQUAL
36328: PUSH
36329: LD_VAR 0 2
36333: PUSH
36334: LD_VAR 0 1
36338: PPUSH
36339: CALL_OW 437
36343: PUSH
36344: LD_INT 1
36346: ARRAY
36347: PUSH
36348: LD_INT 2
36350: ARRAY
36351: EQUAL
36352: AND
36353: PUSH
36354: LD_VAR 0 3
36358: PUSH
36359: LD_VAR 0 1
36363: PPUSH
36364: CALL_OW 437
36368: PUSH
36369: LD_INT 1
36371: ARRAY
36372: PUSH
36373: LD_INT 3
36375: ARRAY
36376: EQUAL
36377: AND
36378: IFFALSE 36388
// result := true ;
36380: LD_ADDR_VAR 0 4
36384: PUSH
36385: LD_INT 1
36387: ST_TO_ADDR
// end ; end ;
36388: LD_VAR 0 4
36392: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36393: LD_INT 0
36395: PPUSH
36396: PPUSH
36397: PPUSH
36398: PPUSH
// if not unit or not area then
36399: LD_VAR 0 1
36403: NOT
36404: PUSH
36405: LD_VAR 0 2
36409: NOT
36410: OR
36411: IFFALSE 36415
// exit ;
36413: GO 36579
// tmp := AreaToList ( area , i ) ;
36415: LD_ADDR_VAR 0 6
36419: PUSH
36420: LD_VAR 0 2
36424: PPUSH
36425: LD_VAR 0 5
36429: PPUSH
36430: CALL_OW 517
36434: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36435: LD_ADDR_VAR 0 5
36439: PUSH
36440: DOUBLE
36441: LD_INT 1
36443: DEC
36444: ST_TO_ADDR
36445: LD_VAR 0 6
36449: PUSH
36450: LD_INT 1
36452: ARRAY
36453: PUSH
36454: FOR_TO
36455: IFFALSE 36577
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36457: LD_ADDR_VAR 0 7
36461: PUSH
36462: LD_VAR 0 6
36466: PUSH
36467: LD_INT 1
36469: ARRAY
36470: PUSH
36471: LD_VAR 0 5
36475: ARRAY
36476: PUSH
36477: LD_VAR 0 6
36481: PUSH
36482: LD_INT 2
36484: ARRAY
36485: PUSH
36486: LD_VAR 0 5
36490: ARRAY
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
36496: LD_VAR 0 7
36500: PUSH
36501: LD_INT 1
36503: ARRAY
36504: PPUSH
36505: LD_VAR 0 7
36509: PUSH
36510: LD_INT 2
36512: ARRAY
36513: PPUSH
36514: CALL_OW 428
36518: PUSH
36519: LD_INT 0
36521: EQUAL
36522: IFFALSE 36575
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
36524: LD_VAR 0 1
36528: PPUSH
36529: LD_VAR 0 7
36533: PUSH
36534: LD_INT 1
36536: ARRAY
36537: PPUSH
36538: LD_VAR 0 7
36542: PUSH
36543: LD_INT 2
36545: ARRAY
36546: PPUSH
36547: LD_VAR 0 3
36551: PPUSH
36552: CALL_OW 48
// result := IsPlaced ( unit ) ;
36556: LD_ADDR_VAR 0 4
36560: PUSH
36561: LD_VAR 0 1
36565: PPUSH
36566: CALL_OW 305
36570: ST_TO_ADDR
// exit ;
36571: POP
36572: POP
36573: GO 36579
// end ; end ;
36575: GO 36454
36577: POP
36578: POP
// end ;
36579: LD_VAR 0 4
36583: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
36584: LD_INT 0
36586: PPUSH
36587: PPUSH
36588: PPUSH
// if not side or side > 8 then
36589: LD_VAR 0 1
36593: NOT
36594: PUSH
36595: LD_VAR 0 1
36599: PUSH
36600: LD_INT 8
36602: GREATER
36603: OR
36604: IFFALSE 36608
// exit ;
36606: GO 36795
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
36608: LD_ADDR_VAR 0 4
36612: PUSH
36613: LD_INT 22
36615: PUSH
36616: LD_VAR 0 1
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 21
36627: PUSH
36628: LD_INT 3
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PPUSH
36639: CALL_OW 69
36643: ST_TO_ADDR
// if not tmp then
36644: LD_VAR 0 4
36648: NOT
36649: IFFALSE 36653
// exit ;
36651: GO 36795
// enable_addtolog := true ;
36653: LD_ADDR_OWVAR 81
36657: PUSH
36658: LD_INT 1
36660: ST_TO_ADDR
// AddToLog ( [ ) ;
36661: LD_STRING [
36663: PPUSH
36664: CALL_OW 561
// for i in tmp do
36668: LD_ADDR_VAR 0 3
36672: PUSH
36673: LD_VAR 0 4
36677: PUSH
36678: FOR_IN
36679: IFFALSE 36786
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
36681: LD_STRING [
36683: PUSH
36684: LD_VAR 0 3
36688: PPUSH
36689: CALL_OW 266
36693: STR
36694: PUSH
36695: LD_STRING , 
36697: STR
36698: PUSH
36699: LD_VAR 0 3
36703: PPUSH
36704: CALL_OW 250
36708: STR
36709: PUSH
36710: LD_STRING , 
36712: STR
36713: PUSH
36714: LD_VAR 0 3
36718: PPUSH
36719: CALL_OW 251
36723: STR
36724: PUSH
36725: LD_STRING , 
36727: STR
36728: PUSH
36729: LD_VAR 0 3
36733: PPUSH
36734: CALL_OW 254
36738: STR
36739: PUSH
36740: LD_STRING , 
36742: STR
36743: PUSH
36744: LD_VAR 0 3
36748: PPUSH
36749: LD_INT 1
36751: PPUSH
36752: CALL_OW 268
36756: STR
36757: PUSH
36758: LD_STRING , 
36760: STR
36761: PUSH
36762: LD_VAR 0 3
36766: PPUSH
36767: LD_INT 2
36769: PPUSH
36770: CALL_OW 268
36774: STR
36775: PUSH
36776: LD_STRING ],
36778: STR
36779: PPUSH
36780: CALL_OW 561
// end ;
36784: GO 36678
36786: POP
36787: POP
// AddToLog ( ]; ) ;
36788: LD_STRING ];
36790: PPUSH
36791: CALL_OW 561
// end ;
36795: LD_VAR 0 2
36799: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
36800: LD_INT 0
36802: PPUSH
36803: PPUSH
36804: PPUSH
36805: PPUSH
36806: PPUSH
// if not area or not rate or not max then
36807: LD_VAR 0 1
36811: NOT
36812: PUSH
36813: LD_VAR 0 2
36817: NOT
36818: OR
36819: PUSH
36820: LD_VAR 0 4
36824: NOT
36825: OR
36826: IFFALSE 36830
// exit ;
36828: GO 37019
// while 1 do
36830: LD_INT 1
36832: IFFALSE 37019
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
36834: LD_ADDR_VAR 0 9
36838: PUSH
36839: LD_VAR 0 1
36843: PPUSH
36844: LD_INT 1
36846: PPUSH
36847: CALL_OW 287
36851: PUSH
36852: LD_INT 10
36854: MUL
36855: ST_TO_ADDR
// r := rate / 10 ;
36856: LD_ADDR_VAR 0 7
36860: PUSH
36861: LD_VAR 0 2
36865: PUSH
36866: LD_INT 10
36868: DIVREAL
36869: ST_TO_ADDR
// time := 1 1$00 ;
36870: LD_ADDR_VAR 0 8
36874: PUSH
36875: LD_INT 2100
36877: ST_TO_ADDR
// if amount < min then
36878: LD_VAR 0 9
36882: PUSH
36883: LD_VAR 0 3
36887: LESS
36888: IFFALSE 36906
// r := r * 2 else
36890: LD_ADDR_VAR 0 7
36894: PUSH
36895: LD_VAR 0 7
36899: PUSH
36900: LD_INT 2
36902: MUL
36903: ST_TO_ADDR
36904: GO 36932
// if amount > max then
36906: LD_VAR 0 9
36910: PUSH
36911: LD_VAR 0 4
36915: GREATER
36916: IFFALSE 36932
// r := r / 2 ;
36918: LD_ADDR_VAR 0 7
36922: PUSH
36923: LD_VAR 0 7
36927: PUSH
36928: LD_INT 2
36930: DIVREAL
36931: ST_TO_ADDR
// time := time / r ;
36932: LD_ADDR_VAR 0 8
36936: PUSH
36937: LD_VAR 0 8
36941: PUSH
36942: LD_VAR 0 7
36946: DIVREAL
36947: ST_TO_ADDR
// if time < 0 then
36948: LD_VAR 0 8
36952: PUSH
36953: LD_INT 0
36955: LESS
36956: IFFALSE 36973
// time := time * - 1 ;
36958: LD_ADDR_VAR 0 8
36962: PUSH
36963: LD_VAR 0 8
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: MUL
36972: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
36973: LD_VAR 0 8
36977: PUSH
36978: LD_INT 35
36980: PPUSH
36981: LD_INT 875
36983: PPUSH
36984: CALL_OW 12
36988: PLUS
36989: PPUSH
36990: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
36994: LD_INT 1
36996: PPUSH
36997: LD_INT 5
36999: PPUSH
37000: CALL_OW 12
37004: PPUSH
37005: LD_VAR 0 1
37009: PPUSH
37010: LD_INT 1
37012: PPUSH
37013: CALL_OW 55
// end ;
37017: GO 36830
// end ;
37019: LD_VAR 0 5
37023: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37024: LD_INT 0
37026: PPUSH
37027: PPUSH
37028: PPUSH
37029: PPUSH
37030: PPUSH
37031: PPUSH
37032: PPUSH
37033: PPUSH
// if not turrets or not factories then
37034: LD_VAR 0 1
37038: NOT
37039: PUSH
37040: LD_VAR 0 2
37044: NOT
37045: OR
37046: IFFALSE 37050
// exit ;
37048: GO 37357
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37050: LD_ADDR_VAR 0 10
37054: PUSH
37055: LD_INT 5
37057: PUSH
37058: LD_INT 6
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 2
37067: PUSH
37068: LD_INT 4
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 3
37077: PUSH
37078: LD_INT 5
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 24
37092: PUSH
37093: LD_INT 25
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 23
37102: PUSH
37103: LD_INT 27
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 42
37116: PUSH
37117: LD_INT 43
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 44
37126: PUSH
37127: LD_INT 46
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 45
37136: PUSH
37137: LD_INT 47
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: LIST
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: LIST
37153: ST_TO_ADDR
// result := [ ] ;
37154: LD_ADDR_VAR 0 3
37158: PUSH
37159: EMPTY
37160: ST_TO_ADDR
// for i in turrets do
37161: LD_ADDR_VAR 0 4
37165: PUSH
37166: LD_VAR 0 1
37170: PUSH
37171: FOR_IN
37172: IFFALSE 37355
// begin nat := GetNation ( i ) ;
37174: LD_ADDR_VAR 0 7
37178: PUSH
37179: LD_VAR 0 4
37183: PPUSH
37184: CALL_OW 248
37188: ST_TO_ADDR
// weapon := 0 ;
37189: LD_ADDR_VAR 0 8
37193: PUSH
37194: LD_INT 0
37196: ST_TO_ADDR
// if not nat then
37197: LD_VAR 0 7
37201: NOT
37202: IFFALSE 37206
// continue ;
37204: GO 37171
// for j in list [ nat ] do
37206: LD_ADDR_VAR 0 5
37210: PUSH
37211: LD_VAR 0 10
37215: PUSH
37216: LD_VAR 0 7
37220: ARRAY
37221: PUSH
37222: FOR_IN
37223: IFFALSE 37264
// if GetBWeapon ( i ) = j [ 1 ] then
37225: LD_VAR 0 4
37229: PPUSH
37230: CALL_OW 269
37234: PUSH
37235: LD_VAR 0 5
37239: PUSH
37240: LD_INT 1
37242: ARRAY
37243: EQUAL
37244: IFFALSE 37262
// begin weapon := j [ 2 ] ;
37246: LD_ADDR_VAR 0 8
37250: PUSH
37251: LD_VAR 0 5
37255: PUSH
37256: LD_INT 2
37258: ARRAY
37259: ST_TO_ADDR
// break ;
37260: GO 37264
// end ;
37262: GO 37222
37264: POP
37265: POP
// if not weapon then
37266: LD_VAR 0 8
37270: NOT
37271: IFFALSE 37275
// continue ;
37273: GO 37171
// for k in factories do
37275: LD_ADDR_VAR 0 6
37279: PUSH
37280: LD_VAR 0 2
37284: PUSH
37285: FOR_IN
37286: IFFALSE 37351
// begin weapons := AvailableWeaponList ( k ) ;
37288: LD_ADDR_VAR 0 9
37292: PUSH
37293: LD_VAR 0 6
37297: PPUSH
37298: CALL_OW 478
37302: ST_TO_ADDR
// if not weapons then
37303: LD_VAR 0 9
37307: NOT
37308: IFFALSE 37312
// continue ;
37310: GO 37285
// if weapon in weapons then
37312: LD_VAR 0 8
37316: PUSH
37317: LD_VAR 0 9
37321: IN
37322: IFFALSE 37349
// begin result := [ i , weapon ] ;
37324: LD_ADDR_VAR 0 3
37328: PUSH
37329: LD_VAR 0 4
37333: PUSH
37334: LD_VAR 0 8
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: ST_TO_ADDR
// exit ;
37343: POP
37344: POP
37345: POP
37346: POP
37347: GO 37357
// end ; end ;
37349: GO 37285
37351: POP
37352: POP
// end ;
37353: GO 37171
37355: POP
37356: POP
// end ;
37357: LD_VAR 0 3
37361: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37362: LD_INT 0
37364: PPUSH
// if not side or side > 8 then
37365: LD_VAR 0 3
37369: NOT
37370: PUSH
37371: LD_VAR 0 3
37375: PUSH
37376: LD_INT 8
37378: GREATER
37379: OR
37380: IFFALSE 37384
// exit ;
37382: GO 37443
// if not range then
37384: LD_VAR 0 4
37388: NOT
37389: IFFALSE 37400
// range := - 12 ;
37391: LD_ADDR_VAR 0 4
37395: PUSH
37396: LD_INT 12
37398: NEG
37399: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37400: LD_VAR 0 1
37404: PPUSH
37405: LD_VAR 0 2
37409: PPUSH
37410: LD_VAR 0 3
37414: PPUSH
37415: LD_VAR 0 4
37419: PPUSH
37420: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37424: LD_VAR 0 1
37428: PPUSH
37429: LD_VAR 0 2
37433: PPUSH
37434: LD_VAR 0 3
37438: PPUSH
37439: CALL_OW 331
// end ;
37443: LD_VAR 0 5
37447: RET
// export function Video ( mode ) ; begin
37448: LD_INT 0
37450: PPUSH
// ingame_video = mode ;
37451: LD_ADDR_OWVAR 52
37455: PUSH
37456: LD_VAR 0 1
37460: ST_TO_ADDR
// interface_hidden = mode ;
37461: LD_ADDR_OWVAR 54
37465: PUSH
37466: LD_VAR 0 1
37470: ST_TO_ADDR
// end ;
37471: LD_VAR 0 2
37475: RET
// export function Join ( array , element ) ; begin
37476: LD_INT 0
37478: PPUSH
// result := Replace ( array , array + 1 , element ) ;
37479: LD_ADDR_VAR 0 3
37483: PUSH
37484: LD_VAR 0 1
37488: PPUSH
37489: LD_VAR 0 1
37493: PUSH
37494: LD_INT 1
37496: PLUS
37497: PPUSH
37498: LD_VAR 0 2
37502: PPUSH
37503: CALL_OW 1
37507: ST_TO_ADDR
// end ;
37508: LD_VAR 0 3
37512: RET
// export function JoinUnion ( array , element ) ; begin
37513: LD_INT 0
37515: PPUSH
// result := array union element ;
37516: LD_ADDR_VAR 0 3
37520: PUSH
37521: LD_VAR 0 1
37525: PUSH
37526: LD_VAR 0 2
37530: UNION
37531: ST_TO_ADDR
// end ;
37532: LD_VAR 0 3
37536: RET
// export function GetBehemoths ( side ) ; begin
37537: LD_INT 0
37539: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
37540: LD_ADDR_VAR 0 2
37544: PUSH
37545: LD_INT 22
37547: PUSH
37548: LD_VAR 0 1
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 31
37559: PUSH
37560: LD_INT 25
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PPUSH
37571: CALL_OW 69
37575: ST_TO_ADDR
// end ;
37576: LD_VAR 0 2
37580: RET
// export function Shuffle ( array ) ; var i , index ; begin
37581: LD_INT 0
37583: PPUSH
37584: PPUSH
37585: PPUSH
// result := [ ] ;
37586: LD_ADDR_VAR 0 2
37590: PUSH
37591: EMPTY
37592: ST_TO_ADDR
// if not array then
37593: LD_VAR 0 1
37597: NOT
37598: IFFALSE 37602
// exit ;
37600: GO 37701
// Randomize ;
37602: CALL_OW 10
// for i = array downto 1 do
37606: LD_ADDR_VAR 0 3
37610: PUSH
37611: DOUBLE
37612: LD_VAR 0 1
37616: INC
37617: ST_TO_ADDR
37618: LD_INT 1
37620: PUSH
37621: FOR_DOWNTO
37622: IFFALSE 37699
// begin index := rand ( 1 , array ) ;
37624: LD_ADDR_VAR 0 4
37628: PUSH
37629: LD_INT 1
37631: PPUSH
37632: LD_VAR 0 1
37636: PPUSH
37637: CALL_OW 12
37641: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
37642: LD_ADDR_VAR 0 2
37646: PUSH
37647: LD_VAR 0 2
37651: PPUSH
37652: LD_VAR 0 2
37656: PUSH
37657: LD_INT 1
37659: PLUS
37660: PPUSH
37661: LD_VAR 0 1
37665: PUSH
37666: LD_VAR 0 4
37670: ARRAY
37671: PPUSH
37672: CALL_OW 2
37676: ST_TO_ADDR
// array := Delete ( array , index ) ;
37677: LD_ADDR_VAR 0 1
37681: PUSH
37682: LD_VAR 0 1
37686: PPUSH
37687: LD_VAR 0 4
37691: PPUSH
37692: CALL_OW 3
37696: ST_TO_ADDR
// end ;
37697: GO 37621
37699: POP
37700: POP
// end ;
37701: LD_VAR 0 2
37705: RET
// export function GetBaseMaterials ( base ) ; begin
37706: LD_INT 0
37708: PPUSH
// result := [ 0 , 0 , 0 ] ;
37709: LD_ADDR_VAR 0 2
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: LIST
37727: ST_TO_ADDR
// if not base then
37728: LD_VAR 0 1
37732: NOT
37733: IFFALSE 37737
// exit ;
37735: GO 37786
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
37737: LD_ADDR_VAR 0 2
37741: PUSH
37742: LD_VAR 0 1
37746: PPUSH
37747: LD_INT 1
37749: PPUSH
37750: CALL_OW 275
37754: PUSH
37755: LD_VAR 0 1
37759: PPUSH
37760: LD_INT 2
37762: PPUSH
37763: CALL_OW 275
37767: PUSH
37768: LD_VAR 0 1
37772: PPUSH
37773: LD_INT 3
37775: PPUSH
37776: CALL_OW 275
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: LIST
37785: ST_TO_ADDR
// end ;
37786: LD_VAR 0 2
37790: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
37791: LD_INT 0
37793: PPUSH
37794: PPUSH
// result := array ;
37795: LD_ADDR_VAR 0 3
37799: PUSH
37800: LD_VAR 0 1
37804: ST_TO_ADDR
// if size > 0 then
37805: LD_VAR 0 2
37809: PUSH
37810: LD_INT 0
37812: GREATER
37813: IFFALSE 37859
// for i := array downto size do
37815: LD_ADDR_VAR 0 4
37819: PUSH
37820: DOUBLE
37821: LD_VAR 0 1
37825: INC
37826: ST_TO_ADDR
37827: LD_VAR 0 2
37831: PUSH
37832: FOR_DOWNTO
37833: IFFALSE 37857
// result := Delete ( result , result ) ;
37835: LD_ADDR_VAR 0 3
37839: PUSH
37840: LD_VAR 0 3
37844: PPUSH
37845: LD_VAR 0 3
37849: PPUSH
37850: CALL_OW 3
37854: ST_TO_ADDR
37855: GO 37832
37857: POP
37858: POP
// end ;
37859: LD_VAR 0 3
37863: RET
// export function ComExit ( unit ) ; var tmp ; begin
37864: LD_INT 0
37866: PPUSH
37867: PPUSH
// if not IsInUnit ( unit ) then
37868: LD_VAR 0 1
37872: PPUSH
37873: CALL_OW 310
37877: NOT
37878: IFFALSE 37882
// exit ;
37880: GO 37942
// tmp := IsInUnit ( unit ) ;
37882: LD_ADDR_VAR 0 3
37886: PUSH
37887: LD_VAR 0 1
37891: PPUSH
37892: CALL_OW 310
37896: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
37897: LD_VAR 0 3
37901: PPUSH
37902: CALL_OW 247
37906: PUSH
37907: LD_INT 2
37909: EQUAL
37910: IFFALSE 37923
// ComExitVehicle ( unit ) else
37912: LD_VAR 0 1
37916: PPUSH
37917: CALL_OW 121
37921: GO 37932
// ComExitBuilding ( unit ) ;
37923: LD_VAR 0 1
37927: PPUSH
37928: CALL_OW 122
// result := tmp ;
37932: LD_ADDR_VAR 0 2
37936: PUSH
37937: LD_VAR 0 3
37941: ST_TO_ADDR
// end ;
37942: LD_VAR 0 2
37946: RET
// export function ComExitAll ( units ) ; var i ; begin
37947: LD_INT 0
37949: PPUSH
37950: PPUSH
// if not units then
37951: LD_VAR 0 1
37955: NOT
37956: IFFALSE 37960
// exit ;
37958: GO 37986
// for i in units do
37960: LD_ADDR_VAR 0 3
37964: PUSH
37965: LD_VAR 0 1
37969: PUSH
37970: FOR_IN
37971: IFFALSE 37984
// ComExit ( i ) ;
37973: LD_VAR 0 3
37977: PPUSH
37978: CALL 37864 0 1
37982: GO 37970
37984: POP
37985: POP
// end ;
37986: LD_VAR 0 2
37990: RET
// export function ResetHc ; begin
37991: LD_INT 0
37993: PPUSH
// InitHc ;
37994: CALL_OW 19
// hc_importance := 0 ;
37998: LD_ADDR_OWVAR 32
38002: PUSH
38003: LD_INT 0
38005: ST_TO_ADDR
// end ;
38006: LD_VAR 0 1
38010: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38011: LD_INT 0
38013: PPUSH
38014: PPUSH
38015: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38016: LD_ADDR_VAR 0 6
38020: PUSH
38021: LD_VAR 0 1
38025: PUSH
38026: LD_VAR 0 3
38030: PLUS
38031: PUSH
38032: LD_INT 2
38034: DIV
38035: ST_TO_ADDR
// if _x < 0 then
38036: LD_VAR 0 6
38040: PUSH
38041: LD_INT 0
38043: LESS
38044: IFFALSE 38061
// _x := _x * - 1 ;
38046: LD_ADDR_VAR 0 6
38050: PUSH
38051: LD_VAR 0 6
38055: PUSH
38056: LD_INT 1
38058: NEG
38059: MUL
38060: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38061: LD_ADDR_VAR 0 7
38065: PUSH
38066: LD_VAR 0 2
38070: PUSH
38071: LD_VAR 0 4
38075: PLUS
38076: PUSH
38077: LD_INT 2
38079: DIV
38080: ST_TO_ADDR
// if _y < 0 then
38081: LD_VAR 0 7
38085: PUSH
38086: LD_INT 0
38088: LESS
38089: IFFALSE 38106
// _y := _y * - 1 ;
38091: LD_ADDR_VAR 0 7
38095: PUSH
38096: LD_VAR 0 7
38100: PUSH
38101: LD_INT 1
38103: NEG
38104: MUL
38105: ST_TO_ADDR
// result := [ _x , _y ] ;
38106: LD_ADDR_VAR 0 5
38110: PUSH
38111: LD_VAR 0 6
38115: PUSH
38116: LD_VAR 0 7
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: ST_TO_ADDR
// end ;
38125: LD_VAR 0 5
38129: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38130: LD_INT 0
38132: PPUSH
38133: PPUSH
38134: PPUSH
38135: PPUSH
// task := GetTaskList ( unit ) ;
38136: LD_ADDR_VAR 0 7
38140: PUSH
38141: LD_VAR 0 1
38145: PPUSH
38146: CALL_OW 437
38150: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38151: LD_VAR 0 7
38155: NOT
38156: PUSH
38157: LD_VAR 0 1
38161: PPUSH
38162: LD_VAR 0 2
38166: PPUSH
38167: CALL_OW 308
38171: NOT
38172: AND
38173: IFFALSE 38177
// exit ;
38175: GO 38295
// if IsInArea ( unit , area ) then
38177: LD_VAR 0 1
38181: PPUSH
38182: LD_VAR 0 2
38186: PPUSH
38187: CALL_OW 308
38191: IFFALSE 38209
// begin ComMoveToArea ( unit , goAway ) ;
38193: LD_VAR 0 1
38197: PPUSH
38198: LD_VAR 0 3
38202: PPUSH
38203: CALL_OW 113
// exit ;
38207: GO 38295
// end ; if task [ 1 ] [ 1 ] <> M then
38209: LD_VAR 0 7
38213: PUSH
38214: LD_INT 1
38216: ARRAY
38217: PUSH
38218: LD_INT 1
38220: ARRAY
38221: PUSH
38222: LD_STRING M
38224: NONEQUAL
38225: IFFALSE 38229
// exit ;
38227: GO 38295
// x := task [ 1 ] [ 2 ] ;
38229: LD_ADDR_VAR 0 5
38233: PUSH
38234: LD_VAR 0 7
38238: PUSH
38239: LD_INT 1
38241: ARRAY
38242: PUSH
38243: LD_INT 2
38245: ARRAY
38246: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38247: LD_ADDR_VAR 0 6
38251: PUSH
38252: LD_VAR 0 7
38256: PUSH
38257: LD_INT 1
38259: ARRAY
38260: PUSH
38261: LD_INT 3
38263: ARRAY
38264: ST_TO_ADDR
// if InArea ( x , y , area ) then
38265: LD_VAR 0 5
38269: PPUSH
38270: LD_VAR 0 6
38274: PPUSH
38275: LD_VAR 0 2
38279: PPUSH
38280: CALL_OW 309
38284: IFFALSE 38295
// ComStop ( unit ) ;
38286: LD_VAR 0 1
38290: PPUSH
38291: CALL_OW 141
// end ;
38295: LD_VAR 0 4
38299: RET
// export function Abs ( value ) ; begin
38300: LD_INT 0
38302: PPUSH
// result := value ;
38303: LD_ADDR_VAR 0 2
38307: PUSH
38308: LD_VAR 0 1
38312: ST_TO_ADDR
// if value < 0 then
38313: LD_VAR 0 1
38317: PUSH
38318: LD_INT 0
38320: LESS
38321: IFFALSE 38338
// result := value * - 1 ;
38323: LD_ADDR_VAR 0 2
38327: PUSH
38328: LD_VAR 0 1
38332: PUSH
38333: LD_INT 1
38335: NEG
38336: MUL
38337: ST_TO_ADDR
// end ;
38338: LD_VAR 0 2
38342: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38343: LD_INT 0
38345: PPUSH
38346: PPUSH
38347: PPUSH
38348: PPUSH
38349: PPUSH
38350: PPUSH
38351: PPUSH
38352: PPUSH
// if not unit or not building then
38353: LD_VAR 0 1
38357: NOT
38358: PUSH
38359: LD_VAR 0 2
38363: NOT
38364: OR
38365: IFFALSE 38369
// exit ;
38367: GO 38595
// x := GetX ( building ) ;
38369: LD_ADDR_VAR 0 4
38373: PUSH
38374: LD_VAR 0 2
38378: PPUSH
38379: CALL_OW 250
38383: ST_TO_ADDR
// y := GetY ( building ) ;
38384: LD_ADDR_VAR 0 6
38388: PUSH
38389: LD_VAR 0 2
38393: PPUSH
38394: CALL_OW 251
38398: ST_TO_ADDR
// d := GetDir ( building ) ;
38399: LD_ADDR_VAR 0 8
38403: PUSH
38404: LD_VAR 0 2
38408: PPUSH
38409: CALL_OW 254
38413: ST_TO_ADDR
// r := 4 ;
38414: LD_ADDR_VAR 0 9
38418: PUSH
38419: LD_INT 4
38421: ST_TO_ADDR
// for i := 1 to 5 do
38422: LD_ADDR_VAR 0 10
38426: PUSH
38427: DOUBLE
38428: LD_INT 1
38430: DEC
38431: ST_TO_ADDR
38432: LD_INT 5
38434: PUSH
38435: FOR_TO
38436: IFFALSE 38593
// begin _x := ShiftX ( x , d , r + i ) ;
38438: LD_ADDR_VAR 0 5
38442: PUSH
38443: LD_VAR 0 4
38447: PPUSH
38448: LD_VAR 0 8
38452: PPUSH
38453: LD_VAR 0 9
38457: PUSH
38458: LD_VAR 0 10
38462: PLUS
38463: PPUSH
38464: CALL_OW 272
38468: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
38469: LD_ADDR_VAR 0 7
38473: PUSH
38474: LD_VAR 0 6
38478: PPUSH
38479: LD_VAR 0 8
38483: PPUSH
38484: LD_VAR 0 9
38488: PUSH
38489: LD_VAR 0 10
38493: PLUS
38494: PPUSH
38495: CALL_OW 273
38499: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
38500: LD_VAR 0 5
38504: PPUSH
38505: LD_VAR 0 7
38509: PPUSH
38510: CALL_OW 488
38514: PUSH
38515: LD_VAR 0 5
38519: PPUSH
38520: LD_VAR 0 7
38524: PPUSH
38525: CALL_OW 428
38529: PPUSH
38530: CALL_OW 247
38534: PUSH
38535: LD_INT 3
38537: PUSH
38538: LD_INT 2
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: IN
38545: NOT
38546: AND
38547: IFFALSE 38591
// begin ComMoveXY ( unit , _x , _y ) ;
38549: LD_VAR 0 1
38553: PPUSH
38554: LD_VAR 0 5
38558: PPUSH
38559: LD_VAR 0 7
38563: PPUSH
38564: CALL_OW 111
// result := [ _x , _y ] ;
38568: LD_ADDR_VAR 0 3
38572: PUSH
38573: LD_VAR 0 5
38577: PUSH
38578: LD_VAR 0 7
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: ST_TO_ADDR
// exit ;
38587: POP
38588: POP
38589: GO 38595
// end ; end ;
38591: GO 38435
38593: POP
38594: POP
// end ;
38595: LD_VAR 0 3
38599: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
38600: LD_INT 0
38602: PPUSH
38603: PPUSH
38604: PPUSH
// result := 0 ;
38605: LD_ADDR_VAR 0 3
38609: PUSH
38610: LD_INT 0
38612: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
38613: LD_VAR 0 1
38617: PUSH
38618: LD_INT 0
38620: LESS
38621: PUSH
38622: LD_VAR 0 1
38626: PUSH
38627: LD_INT 8
38629: GREATER
38630: OR
38631: PUSH
38632: LD_VAR 0 2
38636: PUSH
38637: LD_INT 0
38639: LESS
38640: OR
38641: PUSH
38642: LD_VAR 0 2
38646: PUSH
38647: LD_INT 8
38649: GREATER
38650: OR
38651: IFFALSE 38655
// exit ;
38653: GO 38730
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
38655: LD_ADDR_VAR 0 4
38659: PUSH
38660: LD_INT 22
38662: PUSH
38663: LD_VAR 0 2
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PPUSH
38672: CALL_OW 69
38676: PUSH
38677: FOR_IN
38678: IFFALSE 38728
// begin un := UnitShoot ( i ) ;
38680: LD_ADDR_VAR 0 5
38684: PUSH
38685: LD_VAR 0 4
38689: PPUSH
38690: CALL_OW 504
38694: ST_TO_ADDR
// if GetSide ( un ) = side1 then
38695: LD_VAR 0 5
38699: PPUSH
38700: CALL_OW 255
38704: PUSH
38705: LD_VAR 0 1
38709: EQUAL
38710: IFFALSE 38726
// begin result := un ;
38712: LD_ADDR_VAR 0 3
38716: PUSH
38717: LD_VAR 0 5
38721: ST_TO_ADDR
// exit ;
38722: POP
38723: POP
38724: GO 38730
// end ; end ;
38726: GO 38677
38728: POP
38729: POP
// end ;
38730: LD_VAR 0 3
38734: RET
// export function GetCargoBay ( units ) ; begin
38735: LD_INT 0
38737: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
38738: LD_ADDR_VAR 0 2
38742: PUSH
38743: LD_VAR 0 1
38747: PPUSH
38748: LD_INT 2
38750: PUSH
38751: LD_INT 34
38753: PUSH
38754: LD_INT 12
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 34
38763: PUSH
38764: LD_INT 51
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 34
38773: PUSH
38774: LD_INT 32
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 34
38783: PUSH
38784: LD_EXP 17
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: PPUSH
38800: CALL_OW 72
38804: ST_TO_ADDR
// end ;
38805: LD_VAR 0 2
38809: RET
// export function Negate ( value ) ; begin
38810: LD_INT 0
38812: PPUSH
// result := not value ;
38813: LD_ADDR_VAR 0 2
38817: PUSH
38818: LD_VAR 0 1
38822: NOT
38823: ST_TO_ADDR
// end ;
38824: LD_VAR 0 2
38828: RET
// export function Inc ( value ) ; begin
38829: LD_INT 0
38831: PPUSH
// result := value + 1 ;
38832: LD_ADDR_VAR 0 2
38836: PUSH
38837: LD_VAR 0 1
38841: PUSH
38842: LD_INT 1
38844: PLUS
38845: ST_TO_ADDR
// end ;
38846: LD_VAR 0 2
38850: RET
// export function Dec ( value ) ; begin
38851: LD_INT 0
38853: PPUSH
// result := value - 1 ;
38854: LD_ADDR_VAR 0 2
38858: PUSH
38859: LD_VAR 0 1
38863: PUSH
38864: LD_INT 1
38866: MINUS
38867: ST_TO_ADDR
// end ;
38868: LD_VAR 0 2
38872: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
38873: LD_INT 0
38875: PPUSH
38876: PPUSH
38877: PPUSH
38878: PPUSH
38879: PPUSH
38880: PPUSH
38881: PPUSH
38882: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
38883: LD_VAR 0 1
38887: PPUSH
38888: LD_VAR 0 2
38892: PPUSH
38893: CALL_OW 488
38897: NOT
38898: PUSH
38899: LD_VAR 0 3
38903: PPUSH
38904: LD_VAR 0 4
38908: PPUSH
38909: CALL_OW 488
38913: NOT
38914: OR
38915: IFFALSE 38928
// begin result := - 1 ;
38917: LD_ADDR_VAR 0 5
38921: PUSH
38922: LD_INT 1
38924: NEG
38925: ST_TO_ADDR
// exit ;
38926: GO 39163
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
38928: LD_ADDR_VAR 0 12
38932: PUSH
38933: LD_VAR 0 1
38937: PPUSH
38938: LD_VAR 0 2
38942: PPUSH
38943: LD_VAR 0 3
38947: PPUSH
38948: LD_VAR 0 4
38952: PPUSH
38953: CALL 38011 0 4
38957: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
38958: LD_ADDR_VAR 0 11
38962: PUSH
38963: LD_VAR 0 1
38967: PPUSH
38968: LD_VAR 0 2
38972: PPUSH
38973: LD_VAR 0 12
38977: PUSH
38978: LD_INT 1
38980: ARRAY
38981: PPUSH
38982: LD_VAR 0 12
38986: PUSH
38987: LD_INT 2
38989: ARRAY
38990: PPUSH
38991: CALL_OW 298
38995: ST_TO_ADDR
// distance := 9999 ;
38996: LD_ADDR_VAR 0 10
39000: PUSH
39001: LD_INT 9999
39003: ST_TO_ADDR
// for i := 0 to 5 do
39004: LD_ADDR_VAR 0 6
39008: PUSH
39009: DOUBLE
39010: LD_INT 0
39012: DEC
39013: ST_TO_ADDR
39014: LD_INT 5
39016: PUSH
39017: FOR_TO
39018: IFFALSE 39161
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39020: LD_ADDR_VAR 0 7
39024: PUSH
39025: LD_VAR 0 1
39029: PPUSH
39030: LD_VAR 0 6
39034: PPUSH
39035: LD_VAR 0 11
39039: PPUSH
39040: CALL_OW 272
39044: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39045: LD_ADDR_VAR 0 8
39049: PUSH
39050: LD_VAR 0 2
39054: PPUSH
39055: LD_VAR 0 6
39059: PPUSH
39060: LD_VAR 0 11
39064: PPUSH
39065: CALL_OW 273
39069: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39070: LD_VAR 0 7
39074: PPUSH
39075: LD_VAR 0 8
39079: PPUSH
39080: CALL_OW 488
39084: NOT
39085: IFFALSE 39089
// continue ;
39087: GO 39017
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39089: LD_ADDR_VAR 0 9
39093: PUSH
39094: LD_VAR 0 12
39098: PUSH
39099: LD_INT 1
39101: ARRAY
39102: PPUSH
39103: LD_VAR 0 12
39107: PUSH
39108: LD_INT 2
39110: ARRAY
39111: PPUSH
39112: LD_VAR 0 7
39116: PPUSH
39117: LD_VAR 0 8
39121: PPUSH
39122: CALL_OW 298
39126: ST_TO_ADDR
// if tmp < distance then
39127: LD_VAR 0 9
39131: PUSH
39132: LD_VAR 0 10
39136: LESS
39137: IFFALSE 39159
// begin result := i ;
39139: LD_ADDR_VAR 0 5
39143: PUSH
39144: LD_VAR 0 6
39148: ST_TO_ADDR
// distance := tmp ;
39149: LD_ADDR_VAR 0 10
39153: PUSH
39154: LD_VAR 0 9
39158: ST_TO_ADDR
// end ; end ;
39159: GO 39017
39161: POP
39162: POP
// end ;
39163: LD_VAR 0 5
39167: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39168: LD_INT 0
39170: PPUSH
39171: PPUSH
// if not driver or not IsInUnit ( driver ) then
39172: LD_VAR 0 1
39176: NOT
39177: PUSH
39178: LD_VAR 0 1
39182: PPUSH
39183: CALL_OW 310
39187: NOT
39188: OR
39189: IFFALSE 39193
// exit ;
39191: GO 39283
// vehicle := IsInUnit ( driver ) ;
39193: LD_ADDR_VAR 0 3
39197: PUSH
39198: LD_VAR 0 1
39202: PPUSH
39203: CALL_OW 310
39207: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39208: LD_VAR 0 1
39212: PPUSH
39213: LD_STRING \
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: PUSH
39243: LD_STRING E
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: LD_INT 0
39251: PUSH
39252: LD_VAR 0 3
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PPUSH
39279: CALL_OW 446
// end ;
39283: LD_VAR 0 2
39287: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39288: LD_INT 0
39290: PPUSH
39291: PPUSH
// if not driver or not IsInUnit ( driver ) then
39292: LD_VAR 0 1
39296: NOT
39297: PUSH
39298: LD_VAR 0 1
39302: PPUSH
39303: CALL_OW 310
39307: NOT
39308: OR
39309: IFFALSE 39313
// exit ;
39311: GO 39403
// vehicle := IsInUnit ( driver ) ;
39313: LD_ADDR_VAR 0 3
39317: PUSH
39318: LD_VAR 0 1
39322: PPUSH
39323: CALL_OW 310
39327: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39328: LD_VAR 0 1
39332: PPUSH
39333: LD_STRING \
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: LD_INT 0
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: PUSH
39363: LD_STRING E
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: LD_VAR 0 3
39376: PUSH
39377: LD_INT 0
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PPUSH
39399: CALL_OW 447
// end ;
39403: LD_VAR 0 2
39407: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39408: LD_INT 0
39410: PPUSH
39411: PPUSH
39412: PPUSH
// tmp := [ ] ;
39413: LD_ADDR_VAR 0 5
39417: PUSH
39418: EMPTY
39419: ST_TO_ADDR
// for i in units do
39420: LD_ADDR_VAR 0 4
39424: PUSH
39425: LD_VAR 0 1
39429: PUSH
39430: FOR_IN
39431: IFFALSE 39469
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39433: LD_ADDR_VAR 0 5
39437: PUSH
39438: LD_VAR 0 5
39442: PPUSH
39443: LD_VAR 0 5
39447: PUSH
39448: LD_INT 1
39450: PLUS
39451: PPUSH
39452: LD_VAR 0 4
39456: PPUSH
39457: CALL_OW 256
39461: PPUSH
39462: CALL_OW 2
39466: ST_TO_ADDR
39467: GO 39430
39469: POP
39470: POP
// if not tmp then
39471: LD_VAR 0 5
39475: NOT
39476: IFFALSE 39480
// exit ;
39478: GO 39528
// if asc then
39480: LD_VAR 0 2
39484: IFFALSE 39508
// result := SortListByListAsc ( units , tmp ) else
39486: LD_ADDR_VAR 0 3
39490: PUSH
39491: LD_VAR 0 1
39495: PPUSH
39496: LD_VAR 0 5
39500: PPUSH
39501: CALL_OW 76
39505: ST_TO_ADDR
39506: GO 39528
// result := SortListByListDesc ( units , tmp ) ;
39508: LD_ADDR_VAR 0 3
39512: PUSH
39513: LD_VAR 0 1
39517: PPUSH
39518: LD_VAR 0 5
39522: PPUSH
39523: CALL_OW 77
39527: ST_TO_ADDR
// end ;
39528: LD_VAR 0 3
39532: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
39533: LD_INT 0
39535: PPUSH
39536: PPUSH
// task := GetTaskList ( mech ) ;
39537: LD_ADDR_VAR 0 4
39541: PUSH
39542: LD_VAR 0 1
39546: PPUSH
39547: CALL_OW 437
39551: ST_TO_ADDR
// if not task then
39552: LD_VAR 0 4
39556: NOT
39557: IFFALSE 39561
// exit ;
39559: GO 39603
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
39561: LD_ADDR_VAR 0 3
39565: PUSH
39566: LD_VAR 0 4
39570: PUSH
39571: LD_INT 1
39573: ARRAY
39574: PUSH
39575: LD_INT 1
39577: ARRAY
39578: PUSH
39579: LD_STRING r
39581: EQUAL
39582: PUSH
39583: LD_VAR 0 4
39587: PUSH
39588: LD_INT 1
39590: ARRAY
39591: PUSH
39592: LD_INT 4
39594: ARRAY
39595: PUSH
39596: LD_VAR 0 2
39600: EQUAL
39601: AND
39602: ST_TO_ADDR
// end ;
39603: LD_VAR 0 3
39607: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
39608: LD_INT 0
39610: PPUSH
// SetDir ( unit , d ) ;
39611: LD_VAR 0 1
39615: PPUSH
39616: LD_VAR 0 4
39620: PPUSH
39621: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
39625: LD_VAR 0 1
39629: PPUSH
39630: LD_VAR 0 2
39634: PPUSH
39635: LD_VAR 0 3
39639: PPUSH
39640: LD_VAR 0 5
39644: PPUSH
39645: CALL_OW 48
// end ;
39649: LD_VAR 0 6
39653: RET
// export function ToNaturalNumber ( number ) ; begin
39654: LD_INT 0
39656: PPUSH
// result := number div 1 ;
39657: LD_ADDR_VAR 0 2
39661: PUSH
39662: LD_VAR 0 1
39666: PUSH
39667: LD_INT 1
39669: DIV
39670: ST_TO_ADDR
// if number < 0 then
39671: LD_VAR 0 1
39675: PUSH
39676: LD_INT 0
39678: LESS
39679: IFFALSE 39689
// result := 0 ;
39681: LD_ADDR_VAR 0 2
39685: PUSH
39686: LD_INT 0
39688: ST_TO_ADDR
// end ;
39689: LD_VAR 0 2
39693: RET
// export function SortByClass ( units , class ) ; var un ; begin
39694: LD_INT 0
39696: PPUSH
39697: PPUSH
// if not units or not class then
39698: LD_VAR 0 1
39702: NOT
39703: PUSH
39704: LD_VAR 0 2
39708: NOT
39709: OR
39710: IFFALSE 39714
// exit ;
39712: GO 39809
// result := [ ] ;
39714: LD_ADDR_VAR 0 3
39718: PUSH
39719: EMPTY
39720: ST_TO_ADDR
// for un in units do
39721: LD_ADDR_VAR 0 4
39725: PUSH
39726: LD_VAR 0 1
39730: PUSH
39731: FOR_IN
39732: IFFALSE 39807
// if GetClass ( un ) = class then
39734: LD_VAR 0 4
39738: PPUSH
39739: CALL_OW 257
39743: PUSH
39744: LD_VAR 0 2
39748: EQUAL
39749: IFFALSE 39776
// result := Insert ( result , 1 , un ) else
39751: LD_ADDR_VAR 0 3
39755: PUSH
39756: LD_VAR 0 3
39760: PPUSH
39761: LD_INT 1
39763: PPUSH
39764: LD_VAR 0 4
39768: PPUSH
39769: CALL_OW 2
39773: ST_TO_ADDR
39774: GO 39805
// result := Replace ( result , result + 1 , un ) ;
39776: LD_ADDR_VAR 0 3
39780: PUSH
39781: LD_VAR 0 3
39785: PPUSH
39786: LD_VAR 0 3
39790: PUSH
39791: LD_INT 1
39793: PLUS
39794: PPUSH
39795: LD_VAR 0 4
39799: PPUSH
39800: CALL_OW 1
39804: ST_TO_ADDR
39805: GO 39731
39807: POP
39808: POP
// end ;
39809: LD_VAR 0 3
39813: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
39814: LD_INT 0
39816: PPUSH
39817: PPUSH
39818: PPUSH
39819: PPUSH
39820: PPUSH
39821: PPUSH
39822: PPUSH
// result := [ ] ;
39823: LD_ADDR_VAR 0 4
39827: PUSH
39828: EMPTY
39829: ST_TO_ADDR
// if x - r < 0 then
39830: LD_VAR 0 1
39834: PUSH
39835: LD_VAR 0 3
39839: MINUS
39840: PUSH
39841: LD_INT 0
39843: LESS
39844: IFFALSE 39856
// min_x := 0 else
39846: LD_ADDR_VAR 0 8
39850: PUSH
39851: LD_INT 0
39853: ST_TO_ADDR
39854: GO 39872
// min_x := x - r ;
39856: LD_ADDR_VAR 0 8
39860: PUSH
39861: LD_VAR 0 1
39865: PUSH
39866: LD_VAR 0 3
39870: MINUS
39871: ST_TO_ADDR
// if y - r < 0 then
39872: LD_VAR 0 2
39876: PUSH
39877: LD_VAR 0 3
39881: MINUS
39882: PUSH
39883: LD_INT 0
39885: LESS
39886: IFFALSE 39898
// min_y := 0 else
39888: LD_ADDR_VAR 0 7
39892: PUSH
39893: LD_INT 0
39895: ST_TO_ADDR
39896: GO 39914
// min_y := y - r ;
39898: LD_ADDR_VAR 0 7
39902: PUSH
39903: LD_VAR 0 2
39907: PUSH
39908: LD_VAR 0 3
39912: MINUS
39913: ST_TO_ADDR
// max_x := x + r ;
39914: LD_ADDR_VAR 0 9
39918: PUSH
39919: LD_VAR 0 1
39923: PUSH
39924: LD_VAR 0 3
39928: PLUS
39929: ST_TO_ADDR
// max_y := y + r ;
39930: LD_ADDR_VAR 0 10
39934: PUSH
39935: LD_VAR 0 2
39939: PUSH
39940: LD_VAR 0 3
39944: PLUS
39945: ST_TO_ADDR
// for _x = min_x to max_x do
39946: LD_ADDR_VAR 0 5
39950: PUSH
39951: DOUBLE
39952: LD_VAR 0 8
39956: DEC
39957: ST_TO_ADDR
39958: LD_VAR 0 9
39962: PUSH
39963: FOR_TO
39964: IFFALSE 40065
// for _y = min_y to max_y do
39966: LD_ADDR_VAR 0 6
39970: PUSH
39971: DOUBLE
39972: LD_VAR 0 7
39976: DEC
39977: ST_TO_ADDR
39978: LD_VAR 0 10
39982: PUSH
39983: FOR_TO
39984: IFFALSE 40061
// begin if not ValidHex ( _x , _y ) then
39986: LD_VAR 0 5
39990: PPUSH
39991: LD_VAR 0 6
39995: PPUSH
39996: CALL_OW 488
40000: NOT
40001: IFFALSE 40005
// continue ;
40003: GO 39983
// if GetResourceTypeXY ( _x , _y ) then
40005: LD_VAR 0 5
40009: PPUSH
40010: LD_VAR 0 6
40014: PPUSH
40015: CALL_OW 283
40019: IFFALSE 40059
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40021: LD_ADDR_VAR 0 4
40025: PUSH
40026: LD_VAR 0 4
40030: PPUSH
40031: LD_VAR 0 4
40035: PUSH
40036: LD_INT 1
40038: PLUS
40039: PPUSH
40040: LD_VAR 0 5
40044: PUSH
40045: LD_VAR 0 6
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PPUSH
40054: CALL_OW 1
40058: ST_TO_ADDR
// end ;
40059: GO 39983
40061: POP
40062: POP
40063: GO 39963
40065: POP
40066: POP
// end ;
40067: LD_VAR 0 4
40071: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40072: LD_INT 0
40074: PPUSH
40075: PPUSH
40076: PPUSH
40077: PPUSH
40078: PPUSH
40079: PPUSH
40080: PPUSH
40081: PPUSH
// if not units then
40082: LD_VAR 0 1
40086: NOT
40087: IFFALSE 40091
// exit ;
40089: GO 40516
// result := UnitFilter ( units , [ f_ok ] ) ;
40091: LD_ADDR_VAR 0 3
40095: PUSH
40096: LD_VAR 0 1
40100: PPUSH
40101: LD_INT 50
40103: PUSH
40104: EMPTY
40105: LIST
40106: PPUSH
40107: CALL_OW 72
40111: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40112: LD_ADDR_VAR 0 8
40116: PUSH
40117: LD_VAR 0 1
40121: PUSH
40122: LD_INT 1
40124: ARRAY
40125: PPUSH
40126: CALL_OW 255
40130: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
40131: LD_ADDR_VAR 0 10
40135: PUSH
40136: LD_INT 29
40138: PUSH
40139: LD_EXP 20
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: ST_TO_ADDR
// if not result then
40148: LD_VAR 0 3
40152: NOT
40153: IFFALSE 40157
// exit ;
40155: GO 40516
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40157: LD_ADDR_VAR 0 5
40161: PUSH
40162: LD_INT 81
40164: PUSH
40165: LD_VAR 0 8
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PPUSH
40174: CALL_OW 69
40178: ST_TO_ADDR
// for i in result do
40179: LD_ADDR_VAR 0 4
40183: PUSH
40184: LD_VAR 0 3
40188: PUSH
40189: FOR_IN
40190: IFFALSE 40514
// begin tag := GetTag ( i ) + 1 ;
40192: LD_ADDR_VAR 0 9
40196: PUSH
40197: LD_VAR 0 4
40201: PPUSH
40202: CALL_OW 110
40206: PUSH
40207: LD_INT 1
40209: PLUS
40210: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40211: LD_ADDR_VAR 0 7
40215: PUSH
40216: LD_VAR 0 4
40220: PPUSH
40221: CALL_OW 250
40225: PPUSH
40226: LD_VAR 0 4
40230: PPUSH
40231: CALL_OW 251
40235: PPUSH
40236: LD_INT 6
40238: PPUSH
40239: CALL 39814 0 3
40243: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40244: LD_VAR 0 7
40248: PUSH
40249: LD_VAR 0 4
40253: PPUSH
40254: CALL_OW 264
40258: PUSH
40259: LD_VAR 0 10
40263: IN
40264: NOT
40265: AND
40266: IFFALSE 40305
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
40268: LD_VAR 0 4
40272: PPUSH
40273: LD_VAR 0 7
40277: PUSH
40278: LD_INT 1
40280: ARRAY
40281: PUSH
40282: LD_INT 1
40284: ARRAY
40285: PPUSH
40286: LD_VAR 0 7
40290: PUSH
40291: LD_INT 1
40293: ARRAY
40294: PUSH
40295: LD_INT 2
40297: ARRAY
40298: PPUSH
40299: CALL_OW 116
40303: GO 40512
// if path > tag then
40305: LD_VAR 0 2
40309: PUSH
40310: LD_VAR 0 9
40314: GREATER
40315: IFFALSE 40482
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
40317: LD_ADDR_VAR 0 6
40321: PUSH
40322: LD_VAR 0 5
40326: PPUSH
40327: LD_INT 91
40329: PUSH
40330: LD_VAR 0 4
40334: PUSH
40335: LD_INT 12
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: LIST
40342: PPUSH
40343: CALL_OW 72
40347: ST_TO_ADDR
// if nearEnemy then
40348: LD_VAR 0 6
40352: IFFALSE 40380
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
40354: LD_VAR 0 4
40358: PPUSH
40359: LD_VAR 0 6
40363: PPUSH
40364: LD_VAR 0 4
40368: PPUSH
40369: CALL_OW 74
40373: PPUSH
40374: CALL_OW 115
40378: GO 40480
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
40380: LD_VAR 0 4
40384: PPUSH
40385: LD_VAR 0 2
40389: PUSH
40390: LD_VAR 0 9
40394: ARRAY
40395: PUSH
40396: LD_INT 1
40398: ARRAY
40399: PPUSH
40400: LD_VAR 0 2
40404: PUSH
40405: LD_VAR 0 9
40409: ARRAY
40410: PUSH
40411: LD_INT 2
40413: ARRAY
40414: PPUSH
40415: CALL_OW 297
40419: PUSH
40420: LD_INT 6
40422: GREATER
40423: IFFALSE 40466
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
40425: LD_VAR 0 4
40429: PPUSH
40430: LD_VAR 0 2
40434: PUSH
40435: LD_VAR 0 9
40439: ARRAY
40440: PUSH
40441: LD_INT 1
40443: ARRAY
40444: PPUSH
40445: LD_VAR 0 2
40449: PUSH
40450: LD_VAR 0 9
40454: ARRAY
40455: PUSH
40456: LD_INT 2
40458: ARRAY
40459: PPUSH
40460: CALL_OW 114
40464: GO 40480
// SetTag ( i , tag ) ;
40466: LD_VAR 0 4
40470: PPUSH
40471: LD_VAR 0 9
40475: PPUSH
40476: CALL_OW 109
// end else
40480: GO 40512
// if enemy then
40482: LD_VAR 0 5
40486: IFFALSE 40512
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
40488: LD_VAR 0 4
40492: PPUSH
40493: LD_VAR 0 5
40497: PPUSH
40498: LD_VAR 0 4
40502: PPUSH
40503: CALL_OW 74
40507: PPUSH
40508: CALL_OW 115
// end ;
40512: GO 40189
40514: POP
40515: POP
// end ;
40516: LD_VAR 0 3
40520: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
40521: LD_INT 0
40523: PPUSH
40524: PPUSH
40525: PPUSH
// if not unit or IsInUnit ( unit ) then
40526: LD_VAR 0 1
40530: NOT
40531: PUSH
40532: LD_VAR 0 1
40536: PPUSH
40537: CALL_OW 310
40541: OR
40542: IFFALSE 40546
// exit ;
40544: GO 40637
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
40546: LD_ADDR_VAR 0 4
40550: PUSH
40551: LD_VAR 0 1
40555: PPUSH
40556: CALL_OW 250
40560: PPUSH
40561: LD_VAR 0 2
40565: PPUSH
40566: LD_INT 1
40568: PPUSH
40569: CALL_OW 272
40573: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
40574: LD_ADDR_VAR 0 5
40578: PUSH
40579: LD_VAR 0 1
40583: PPUSH
40584: CALL_OW 251
40588: PPUSH
40589: LD_VAR 0 2
40593: PPUSH
40594: LD_INT 1
40596: PPUSH
40597: CALL_OW 273
40601: ST_TO_ADDR
// if ValidHex ( x , y ) then
40602: LD_VAR 0 4
40606: PPUSH
40607: LD_VAR 0 5
40611: PPUSH
40612: CALL_OW 488
40616: IFFALSE 40637
// ComTurnXY ( unit , x , y ) ;
40618: LD_VAR 0 1
40622: PPUSH
40623: LD_VAR 0 4
40627: PPUSH
40628: LD_VAR 0 5
40632: PPUSH
40633: CALL_OW 118
// end ;
40637: LD_VAR 0 3
40641: RET
// export function SeeUnits ( side , units ) ; var i ; begin
40642: LD_INT 0
40644: PPUSH
40645: PPUSH
// result := false ;
40646: LD_ADDR_VAR 0 3
40650: PUSH
40651: LD_INT 0
40653: ST_TO_ADDR
// if not units then
40654: LD_VAR 0 2
40658: NOT
40659: IFFALSE 40663
// exit ;
40661: GO 40708
// for i in units do
40663: LD_ADDR_VAR 0 4
40667: PUSH
40668: LD_VAR 0 2
40672: PUSH
40673: FOR_IN
40674: IFFALSE 40706
// if See ( side , i ) then
40676: LD_VAR 0 1
40680: PPUSH
40681: LD_VAR 0 4
40685: PPUSH
40686: CALL_OW 292
40690: IFFALSE 40704
// begin result := true ;
40692: LD_ADDR_VAR 0 3
40696: PUSH
40697: LD_INT 1
40699: ST_TO_ADDR
// exit ;
40700: POP
40701: POP
40702: GO 40708
// end ;
40704: GO 40673
40706: POP
40707: POP
// end ;
40708: LD_VAR 0 3
40712: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
40713: LD_INT 0
40715: PPUSH
40716: PPUSH
40717: PPUSH
40718: PPUSH
// if not unit or not points then
40719: LD_VAR 0 1
40723: NOT
40724: PUSH
40725: LD_VAR 0 2
40729: NOT
40730: OR
40731: IFFALSE 40735
// exit ;
40733: GO 40825
// dist := 99999 ;
40735: LD_ADDR_VAR 0 5
40739: PUSH
40740: LD_INT 99999
40742: ST_TO_ADDR
// for i in points do
40743: LD_ADDR_VAR 0 4
40747: PUSH
40748: LD_VAR 0 2
40752: PUSH
40753: FOR_IN
40754: IFFALSE 40823
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
40756: LD_ADDR_VAR 0 6
40760: PUSH
40761: LD_VAR 0 1
40765: PPUSH
40766: LD_VAR 0 4
40770: PUSH
40771: LD_INT 1
40773: ARRAY
40774: PPUSH
40775: LD_VAR 0 4
40779: PUSH
40780: LD_INT 2
40782: ARRAY
40783: PPUSH
40784: CALL_OW 297
40788: ST_TO_ADDR
// if tmpDist < dist then
40789: LD_VAR 0 6
40793: PUSH
40794: LD_VAR 0 5
40798: LESS
40799: IFFALSE 40821
// begin result := i ;
40801: LD_ADDR_VAR 0 3
40805: PUSH
40806: LD_VAR 0 4
40810: ST_TO_ADDR
// dist := tmpDist ;
40811: LD_ADDR_VAR 0 5
40815: PUSH
40816: LD_VAR 0 6
40820: ST_TO_ADDR
// end ; end ;
40821: GO 40753
40823: POP
40824: POP
// end ;
40825: LD_VAR 0 3
40829: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
40830: LD_INT 0
40832: PPUSH
// uc_side := side ;
40833: LD_ADDR_OWVAR 20
40837: PUSH
40838: LD_VAR 0 1
40842: ST_TO_ADDR
// uc_nation := 3 ;
40843: LD_ADDR_OWVAR 21
40847: PUSH
40848: LD_INT 3
40850: ST_TO_ADDR
// vc_chassis := 25 ;
40851: LD_ADDR_OWVAR 37
40855: PUSH
40856: LD_INT 25
40858: ST_TO_ADDR
// vc_engine := engine_siberite ;
40859: LD_ADDR_OWVAR 39
40863: PUSH
40864: LD_INT 3
40866: ST_TO_ADDR
// vc_control := control_computer ;
40867: LD_ADDR_OWVAR 38
40871: PUSH
40872: LD_INT 3
40874: ST_TO_ADDR
// vc_weapon := 59 ;
40875: LD_ADDR_OWVAR 40
40879: PUSH
40880: LD_INT 59
40882: ST_TO_ADDR
// result := CreateVehicle ;
40883: LD_ADDR_VAR 0 5
40887: PUSH
40888: CALL_OW 45
40892: ST_TO_ADDR
// SetDir ( result , d ) ;
40893: LD_VAR 0 5
40897: PPUSH
40898: LD_VAR 0 4
40902: PPUSH
40903: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
40907: LD_VAR 0 5
40911: PPUSH
40912: LD_VAR 0 2
40916: PPUSH
40917: LD_VAR 0 3
40921: PPUSH
40922: LD_INT 0
40924: PPUSH
40925: CALL_OW 48
// end ; end_of_file
40929: LD_VAR 0 5
40933: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
40934: LD_INT 0
40936: PPUSH
// ar_miner := 81 ;
40937: LD_ADDR_EXP 23
40941: PUSH
40942: LD_INT 81
40944: ST_TO_ADDR
// ar_crane := 88 ;
40945: LD_ADDR_EXP 22
40949: PUSH
40950: LD_INT 88
40952: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
40953: LD_ADDR_EXP 17
40957: PUSH
40958: LD_INT 89
40960: ST_TO_ADDR
// us_hack := 99 ;
40961: LD_ADDR_EXP 18
40965: PUSH
40966: LD_INT 99
40968: ST_TO_ADDR
// us_artillery := 97 ;
40969: LD_ADDR_EXP 19
40973: PUSH
40974: LD_INT 97
40976: ST_TO_ADDR
// ar_bio_bomb := 91 ;
40977: LD_ADDR_EXP 20
40981: PUSH
40982: LD_INT 91
40984: ST_TO_ADDR
// ar_mortar := 92 ;
40985: LD_ADDR_EXP 21
40989: PUSH
40990: LD_INT 92
40992: ST_TO_ADDR
// ru_flamethrower := 93 ;
40993: LD_ADDR_EXP 24
40997: PUSH
40998: LD_INT 93
41000: ST_TO_ADDR
// ru_radar := 98 ;
41001: LD_ADDR_EXP 16
41005: PUSH
41006: LD_INT 98
41008: ST_TO_ADDR
// tech_Artillery := 80 ;
41009: LD_ADDR_EXP 25
41013: PUSH
41014: LD_INT 80
41016: ST_TO_ADDR
// tech_RadMat := 81 ;
41017: LD_ADDR_EXP 26
41021: PUSH
41022: LD_INT 81
41024: ST_TO_ADDR
// tech_BasicTools := 82 ;
41025: LD_ADDR_EXP 27
41029: PUSH
41030: LD_INT 82
41032: ST_TO_ADDR
// tech_Cargo := 83 ;
41033: LD_ADDR_EXP 28
41037: PUSH
41038: LD_INT 83
41040: ST_TO_ADDR
// tech_Track := 84 ;
41041: LD_ADDR_EXP 29
41045: PUSH
41046: LD_INT 84
41048: ST_TO_ADDR
// tech_Crane := 85 ;
41049: LD_ADDR_EXP 30
41053: PUSH
41054: LD_INT 85
41056: ST_TO_ADDR
// tech_Bulldozer := 86 ;
41057: LD_ADDR_EXP 31
41061: PUSH
41062: LD_INT 86
41064: ST_TO_ADDR
// tech_Hovercraft := 87 ;
41065: LD_ADDR_EXP 32
41069: PUSH
41070: LD_INT 87
41072: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
41073: LD_ADDR_EXP 33
41077: PUSH
41078: LD_INT 88
41080: ST_TO_ADDR
// class_mastodont := 31 ;
41081: LD_ADDR_EXP 34
41085: PUSH
41086: LD_INT 31
41088: ST_TO_ADDR
// class_horse := 21 ;
41089: LD_ADDR_EXP 35
41093: PUSH
41094: LD_INT 21
41096: ST_TO_ADDR
// end ;
41097: LD_VAR 0 1
41101: RET
// every 1 do
41102: GO 41104
41104: DISABLE
// InitGlobalVariables ; end_of_file
41105: CALL 40934 0 0
41109: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
41110: LD_VAR 0 1
41114: PPUSH
41115: LD_VAR 0 2
41119: PPUSH
41120: LD_VAR 0 3
41124: PPUSH
41125: LD_VAR 0 4
41129: PPUSH
41130: LD_VAR 0 5
41134: PPUSH
41135: LD_VAR 0 6
41139: PPUSH
41140: CALL 41201 0 6
// end ;
41144: PPOPN 6
41146: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
41147: CALL 41176 0 0
// end ; end_of_file
41151: PPOPN 1
41153: END
// every 0 0$1 do
41154: GO 41156
41156: DISABLE
// begin enable ;
41157: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
41158: LD_STRING updateTimer(
41160: PUSH
41161: LD_OWVAR 1
41165: STR
41166: PUSH
41167: LD_STRING );
41169: STR
41170: PPUSH
41171: CALL_OW 559
// end ;
41175: END
// export function SOS_MapStart ( ) ; begin
41176: LD_INT 0
41178: PPUSH
// if streamModeActive then
41179: LD_EXP 36
41183: IFFALSE 41192
// DefineStreamItems ( true ) ;
41185: LD_INT 1
41187: PPUSH
41188: CALL 42842 0 1
// UpdateFactoryWaypoints ( ) ;
41192: CALL 56589 0 0
// end ;
41196: LD_VAR 0 1
41200: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
41201: LD_INT 0
41203: PPUSH
// if p2 = 100 then
41204: LD_VAR 0 2
41208: PUSH
41209: LD_INT 100
41211: EQUAL
41212: IFFALSE 42215
// begin if not StreamModeActive then
41214: LD_EXP 36
41218: NOT
41219: IFFALSE 41229
// StreamModeActive := true ;
41221: LD_ADDR_EXP 36
41225: PUSH
41226: LD_INT 1
41228: ST_TO_ADDR
// if p3 = 0 then
41229: LD_VAR 0 3
41233: PUSH
41234: LD_INT 0
41236: EQUAL
41237: IFFALSE 41243
// InitStreamMode ;
41239: CALL 42378 0 0
// if p3 = 1 then
41243: LD_VAR 0 3
41247: PUSH
41248: LD_INT 1
41250: EQUAL
41251: IFFALSE 41261
// sRocket := true ;
41253: LD_ADDR_EXP 41
41257: PUSH
41258: LD_INT 1
41260: ST_TO_ADDR
// if p3 = 2 then
41261: LD_VAR 0 3
41265: PUSH
41266: LD_INT 2
41268: EQUAL
41269: IFFALSE 41279
// sSpeed := true ;
41271: LD_ADDR_EXP 40
41275: PUSH
41276: LD_INT 1
41278: ST_TO_ADDR
// if p3 = 3 then
41279: LD_VAR 0 3
41283: PUSH
41284: LD_INT 3
41286: EQUAL
41287: IFFALSE 41297
// sEngine := true ;
41289: LD_ADDR_EXP 42
41293: PUSH
41294: LD_INT 1
41296: ST_TO_ADDR
// if p3 = 4 then
41297: LD_VAR 0 3
41301: PUSH
41302: LD_INT 4
41304: EQUAL
41305: IFFALSE 41315
// sSpec := true ;
41307: LD_ADDR_EXP 39
41311: PUSH
41312: LD_INT 1
41314: ST_TO_ADDR
// if p3 = 5 then
41315: LD_VAR 0 3
41319: PUSH
41320: LD_INT 5
41322: EQUAL
41323: IFFALSE 41333
// sLevel := true ;
41325: LD_ADDR_EXP 43
41329: PUSH
41330: LD_INT 1
41332: ST_TO_ADDR
// if p3 = 6 then
41333: LD_VAR 0 3
41337: PUSH
41338: LD_INT 6
41340: EQUAL
41341: IFFALSE 41351
// sArmoury := true ;
41343: LD_ADDR_EXP 44
41347: PUSH
41348: LD_INT 1
41350: ST_TO_ADDR
// if p3 = 7 then
41351: LD_VAR 0 3
41355: PUSH
41356: LD_INT 7
41358: EQUAL
41359: IFFALSE 41369
// sRadar := true ;
41361: LD_ADDR_EXP 45
41365: PUSH
41366: LD_INT 1
41368: ST_TO_ADDR
// if p3 = 8 then
41369: LD_VAR 0 3
41373: PUSH
41374: LD_INT 8
41376: EQUAL
41377: IFFALSE 41387
// sBunker := true ;
41379: LD_ADDR_EXP 46
41383: PUSH
41384: LD_INT 1
41386: ST_TO_ADDR
// if p3 = 9 then
41387: LD_VAR 0 3
41391: PUSH
41392: LD_INT 9
41394: EQUAL
41395: IFFALSE 41405
// sHack := true ;
41397: LD_ADDR_EXP 47
41401: PUSH
41402: LD_INT 1
41404: ST_TO_ADDR
// if p3 = 10 then
41405: LD_VAR 0 3
41409: PUSH
41410: LD_INT 10
41412: EQUAL
41413: IFFALSE 41423
// sFire := true ;
41415: LD_ADDR_EXP 48
41419: PUSH
41420: LD_INT 1
41422: ST_TO_ADDR
// if p3 = 11 then
41423: LD_VAR 0 3
41427: PUSH
41428: LD_INT 11
41430: EQUAL
41431: IFFALSE 41441
// sRefresh := true ;
41433: LD_ADDR_EXP 49
41437: PUSH
41438: LD_INT 1
41440: ST_TO_ADDR
// if p3 = 12 then
41441: LD_VAR 0 3
41445: PUSH
41446: LD_INT 12
41448: EQUAL
41449: IFFALSE 41459
// sExp := true ;
41451: LD_ADDR_EXP 50
41455: PUSH
41456: LD_INT 1
41458: ST_TO_ADDR
// if p3 = 13 then
41459: LD_VAR 0 3
41463: PUSH
41464: LD_INT 13
41466: EQUAL
41467: IFFALSE 41477
// sDepot := true ;
41469: LD_ADDR_EXP 51
41473: PUSH
41474: LD_INT 1
41476: ST_TO_ADDR
// if p3 = 14 then
41477: LD_VAR 0 3
41481: PUSH
41482: LD_INT 14
41484: EQUAL
41485: IFFALSE 41495
// sFlag := true ;
41487: LD_ADDR_EXP 52
41491: PUSH
41492: LD_INT 1
41494: ST_TO_ADDR
// if p3 = 15 then
41495: LD_VAR 0 3
41499: PUSH
41500: LD_INT 15
41502: EQUAL
41503: IFFALSE 41513
// sKamikadze := true ;
41505: LD_ADDR_EXP 60
41509: PUSH
41510: LD_INT 1
41512: ST_TO_ADDR
// if p3 = 16 then
41513: LD_VAR 0 3
41517: PUSH
41518: LD_INT 16
41520: EQUAL
41521: IFFALSE 41531
// sTroll := true ;
41523: LD_ADDR_EXP 61
41527: PUSH
41528: LD_INT 1
41530: ST_TO_ADDR
// if p3 = 17 then
41531: LD_VAR 0 3
41535: PUSH
41536: LD_INT 17
41538: EQUAL
41539: IFFALSE 41549
// sSlow := true ;
41541: LD_ADDR_EXP 62
41545: PUSH
41546: LD_INT 1
41548: ST_TO_ADDR
// if p3 = 18 then
41549: LD_VAR 0 3
41553: PUSH
41554: LD_INT 18
41556: EQUAL
41557: IFFALSE 41567
// sLack := true ;
41559: LD_ADDR_EXP 63
41563: PUSH
41564: LD_INT 1
41566: ST_TO_ADDR
// if p3 = 19 then
41567: LD_VAR 0 3
41571: PUSH
41572: LD_INT 19
41574: EQUAL
41575: IFFALSE 41585
// sTank := true ;
41577: LD_ADDR_EXP 65
41581: PUSH
41582: LD_INT 1
41584: ST_TO_ADDR
// if p3 = 20 then
41585: LD_VAR 0 3
41589: PUSH
41590: LD_INT 20
41592: EQUAL
41593: IFFALSE 41603
// sRemote := true ;
41595: LD_ADDR_EXP 66
41599: PUSH
41600: LD_INT 1
41602: ST_TO_ADDR
// if p3 = 21 then
41603: LD_VAR 0 3
41607: PUSH
41608: LD_INT 21
41610: EQUAL
41611: IFFALSE 41621
// sPowell := true ;
41613: LD_ADDR_EXP 67
41617: PUSH
41618: LD_INT 1
41620: ST_TO_ADDR
// if p3 = 22 then
41621: LD_VAR 0 3
41625: PUSH
41626: LD_INT 22
41628: EQUAL
41629: IFFALSE 41639
// sTeleport := true ;
41631: LD_ADDR_EXP 70
41635: PUSH
41636: LD_INT 1
41638: ST_TO_ADDR
// if p3 = 23 then
41639: LD_VAR 0 3
41643: PUSH
41644: LD_INT 23
41646: EQUAL
41647: IFFALSE 41657
// sOilTower := true ;
41649: LD_ADDR_EXP 72
41653: PUSH
41654: LD_INT 1
41656: ST_TO_ADDR
// if p3 = 24 then
41657: LD_VAR 0 3
41661: PUSH
41662: LD_INT 24
41664: EQUAL
41665: IFFALSE 41675
// sShovel := true ;
41667: LD_ADDR_EXP 73
41671: PUSH
41672: LD_INT 1
41674: ST_TO_ADDR
// if p3 = 25 then
41675: LD_VAR 0 3
41679: PUSH
41680: LD_INT 25
41682: EQUAL
41683: IFFALSE 41693
// sSheik := true ;
41685: LD_ADDR_EXP 74
41689: PUSH
41690: LD_INT 1
41692: ST_TO_ADDR
// if p3 = 26 then
41693: LD_VAR 0 3
41697: PUSH
41698: LD_INT 26
41700: EQUAL
41701: IFFALSE 41711
// sEarthquake := true ;
41703: LD_ADDR_EXP 76
41707: PUSH
41708: LD_INT 1
41710: ST_TO_ADDR
// if p3 = 27 then
41711: LD_VAR 0 3
41715: PUSH
41716: LD_INT 27
41718: EQUAL
41719: IFFALSE 41729
// sAI := true ;
41721: LD_ADDR_EXP 77
41725: PUSH
41726: LD_INT 1
41728: ST_TO_ADDR
// if p3 = 28 then
41729: LD_VAR 0 3
41733: PUSH
41734: LD_INT 28
41736: EQUAL
41737: IFFALSE 41747
// sCargo := true ;
41739: LD_ADDR_EXP 80
41743: PUSH
41744: LD_INT 1
41746: ST_TO_ADDR
// if p3 = 29 then
41747: LD_VAR 0 3
41751: PUSH
41752: LD_INT 29
41754: EQUAL
41755: IFFALSE 41765
// sDLaser := true ;
41757: LD_ADDR_EXP 81
41761: PUSH
41762: LD_INT 1
41764: ST_TO_ADDR
// if p3 = 30 then
41765: LD_VAR 0 3
41769: PUSH
41770: LD_INT 30
41772: EQUAL
41773: IFFALSE 41783
// sExchange := true ;
41775: LD_ADDR_EXP 82
41779: PUSH
41780: LD_INT 1
41782: ST_TO_ADDR
// if p3 = 31 then
41783: LD_VAR 0 3
41787: PUSH
41788: LD_INT 31
41790: EQUAL
41791: IFFALSE 41801
// sFac := true ;
41793: LD_ADDR_EXP 83
41797: PUSH
41798: LD_INT 1
41800: ST_TO_ADDR
// if p3 = 32 then
41801: LD_VAR 0 3
41805: PUSH
41806: LD_INT 32
41808: EQUAL
41809: IFFALSE 41819
// sPower := true ;
41811: LD_ADDR_EXP 84
41815: PUSH
41816: LD_INT 1
41818: ST_TO_ADDR
// if p3 = 33 then
41819: LD_VAR 0 3
41823: PUSH
41824: LD_INT 33
41826: EQUAL
41827: IFFALSE 41837
// sRandom := true ;
41829: LD_ADDR_EXP 85
41833: PUSH
41834: LD_INT 1
41836: ST_TO_ADDR
// if p3 = 34 then
41837: LD_VAR 0 3
41841: PUSH
41842: LD_INT 34
41844: EQUAL
41845: IFFALSE 41855
// sShield := true ;
41847: LD_ADDR_EXP 86
41851: PUSH
41852: LD_INT 1
41854: ST_TO_ADDR
// if p3 = 35 then
41855: LD_VAR 0 3
41859: PUSH
41860: LD_INT 35
41862: EQUAL
41863: IFFALSE 41873
// sTime := true ;
41865: LD_ADDR_EXP 87
41869: PUSH
41870: LD_INT 1
41872: ST_TO_ADDR
// if p3 = 36 then
41873: LD_VAR 0 3
41877: PUSH
41878: LD_INT 36
41880: EQUAL
41881: IFFALSE 41891
// sTools := true ;
41883: LD_ADDR_EXP 88
41887: PUSH
41888: LD_INT 1
41890: ST_TO_ADDR
// if p3 = 101 then
41891: LD_VAR 0 3
41895: PUSH
41896: LD_INT 101
41898: EQUAL
41899: IFFALSE 41909
// sSold := true ;
41901: LD_ADDR_EXP 53
41905: PUSH
41906: LD_INT 1
41908: ST_TO_ADDR
// if p3 = 102 then
41909: LD_VAR 0 3
41913: PUSH
41914: LD_INT 102
41916: EQUAL
41917: IFFALSE 41927
// sDiff := true ;
41919: LD_ADDR_EXP 54
41923: PUSH
41924: LD_INT 1
41926: ST_TO_ADDR
// if p3 = 103 then
41927: LD_VAR 0 3
41931: PUSH
41932: LD_INT 103
41934: EQUAL
41935: IFFALSE 41945
// sFog := true ;
41937: LD_ADDR_EXP 57
41941: PUSH
41942: LD_INT 1
41944: ST_TO_ADDR
// if p3 = 104 then
41945: LD_VAR 0 3
41949: PUSH
41950: LD_INT 104
41952: EQUAL
41953: IFFALSE 41963
// sReset := true ;
41955: LD_ADDR_EXP 58
41959: PUSH
41960: LD_INT 1
41962: ST_TO_ADDR
// if p3 = 105 then
41963: LD_VAR 0 3
41967: PUSH
41968: LD_INT 105
41970: EQUAL
41971: IFFALSE 41981
// sSun := true ;
41973: LD_ADDR_EXP 59
41977: PUSH
41978: LD_INT 1
41980: ST_TO_ADDR
// if p3 = 106 then
41981: LD_VAR 0 3
41985: PUSH
41986: LD_INT 106
41988: EQUAL
41989: IFFALSE 41999
// sTiger := true ;
41991: LD_ADDR_EXP 55
41995: PUSH
41996: LD_INT 1
41998: ST_TO_ADDR
// if p3 = 107 then
41999: LD_VAR 0 3
42003: PUSH
42004: LD_INT 107
42006: EQUAL
42007: IFFALSE 42017
// sBomb := true ;
42009: LD_ADDR_EXP 56
42013: PUSH
42014: LD_INT 1
42016: ST_TO_ADDR
// if p3 = 108 then
42017: LD_VAR 0 3
42021: PUSH
42022: LD_INT 108
42024: EQUAL
42025: IFFALSE 42035
// sWound := true ;
42027: LD_ADDR_EXP 64
42031: PUSH
42032: LD_INT 1
42034: ST_TO_ADDR
// if p3 = 109 then
42035: LD_VAR 0 3
42039: PUSH
42040: LD_INT 109
42042: EQUAL
42043: IFFALSE 42053
// sBetray := true ;
42045: LD_ADDR_EXP 68
42049: PUSH
42050: LD_INT 1
42052: ST_TO_ADDR
// if p3 = 110 then
42053: LD_VAR 0 3
42057: PUSH
42058: LD_INT 110
42060: EQUAL
42061: IFFALSE 42071
// sContamin := true ;
42063: LD_ADDR_EXP 69
42067: PUSH
42068: LD_INT 1
42070: ST_TO_ADDR
// if p3 = 111 then
42071: LD_VAR 0 3
42075: PUSH
42076: LD_INT 111
42078: EQUAL
42079: IFFALSE 42089
// sOil := true ;
42081: LD_ADDR_EXP 71
42085: PUSH
42086: LD_INT 1
42088: ST_TO_ADDR
// if p3 = 112 then
42089: LD_VAR 0 3
42093: PUSH
42094: LD_INT 112
42096: EQUAL
42097: IFFALSE 42107
// sStu := true ;
42099: LD_ADDR_EXP 75
42103: PUSH
42104: LD_INT 1
42106: ST_TO_ADDR
// if p3 = 113 then
42107: LD_VAR 0 3
42111: PUSH
42112: LD_INT 113
42114: EQUAL
42115: IFFALSE 42125
// sBazooka := true ;
42117: LD_ADDR_EXP 78
42121: PUSH
42122: LD_INT 1
42124: ST_TO_ADDR
// if p3 = 114 then
42125: LD_VAR 0 3
42129: PUSH
42130: LD_INT 114
42132: EQUAL
42133: IFFALSE 42143
// sMortar := true ;
42135: LD_ADDR_EXP 79
42139: PUSH
42140: LD_INT 1
42142: ST_TO_ADDR
// if p3 = 115 then
42143: LD_VAR 0 3
42147: PUSH
42148: LD_INT 115
42150: EQUAL
42151: IFFALSE 42161
// sRanger := true ;
42153: LD_ADDR_EXP 89
42157: PUSH
42158: LD_INT 1
42160: ST_TO_ADDR
// if p3 = 116 then
42161: LD_VAR 0 3
42165: PUSH
42166: LD_INT 116
42168: EQUAL
42169: IFFALSE 42179
// sComputer := true ;
42171: LD_ADDR_EXP 90
42175: PUSH
42176: LD_INT 1
42178: ST_TO_ADDR
// if p3 = 117 then
42179: LD_VAR 0 3
42183: PUSH
42184: LD_INT 117
42186: EQUAL
42187: IFFALSE 42197
// s30 := true ;
42189: LD_ADDR_EXP 91
42193: PUSH
42194: LD_INT 1
42196: ST_TO_ADDR
// if p3 = 118 then
42197: LD_VAR 0 3
42201: PUSH
42202: LD_INT 118
42204: EQUAL
42205: IFFALSE 42215
// s60 := true ;
42207: LD_ADDR_EXP 92
42211: PUSH
42212: LD_INT 1
42214: ST_TO_ADDR
// end ; if p2 = 101 then
42215: LD_VAR 0 2
42219: PUSH
42220: LD_INT 101
42222: EQUAL
42223: IFFALSE 42351
// begin case p3 of 1 :
42225: LD_VAR 0 3
42229: PUSH
42230: LD_INT 1
42232: DOUBLE
42233: EQUAL
42234: IFTRUE 42238
42236: GO 42245
42238: POP
// hHackUnlimitedResources ; 2 :
42239: CALL 54449 0 0
42243: GO 42351
42245: LD_INT 2
42247: DOUBLE
42248: EQUAL
42249: IFTRUE 42253
42251: GO 42260
42253: POP
// hHackSetLevel10 ; 3 :
42254: CALL 54582 0 0
42258: GO 42351
42260: LD_INT 3
42262: DOUBLE
42263: EQUAL
42264: IFTRUE 42268
42266: GO 42275
42268: POP
// hHackSetLevel10YourUnits ; 4 :
42269: CALL 54667 0 0
42273: GO 42351
42275: LD_INT 4
42277: DOUBLE
42278: EQUAL
42279: IFTRUE 42283
42281: GO 42290
42283: POP
// hHackInvincible ; 5 :
42284: CALL 55115 0 0
42288: GO 42351
42290: LD_INT 5
42292: DOUBLE
42293: EQUAL
42294: IFTRUE 42298
42296: GO 42305
42298: POP
// hHackInvisible ; 6 :
42299: CALL 55226 0 0
42303: GO 42351
42305: LD_INT 6
42307: DOUBLE
42308: EQUAL
42309: IFTRUE 42313
42311: GO 42320
42313: POP
// hHackChangeYourSide ; 7 :
42314: CALL 55283 0 0
42318: GO 42351
42320: LD_INT 7
42322: DOUBLE
42323: EQUAL
42324: IFTRUE 42328
42326: GO 42335
42328: POP
// hHackChangeUnitSide ; 8 :
42329: CALL 55325 0 0
42333: GO 42351
42335: LD_INT 8
42337: DOUBLE
42338: EQUAL
42339: IFTRUE 42343
42341: GO 42350
42343: POP
// hHackFog ; end ;
42344: CALL 55426 0 0
42348: GO 42351
42350: POP
// end ; end ;
42351: LD_VAR 0 7
42355: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
42356: GO 42358
42358: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
42359: LD_STRING initStreamRollete();
42361: PPUSH
42362: CALL_OW 559
// InitStreamMode ;
42366: CALL 42378 0 0
// DefineStreamItems ( false ) ;
42370: LD_INT 0
42372: PPUSH
42373: CALL 42842 0 1
// end ;
42377: END
// function InitStreamMode ; begin
42378: LD_INT 0
42380: PPUSH
// streamModeActive := false ;
42381: LD_ADDR_EXP 36
42385: PUSH
42386: LD_INT 0
42388: ST_TO_ADDR
// normalCounter := 36 ;
42389: LD_ADDR_EXP 37
42393: PUSH
42394: LD_INT 36
42396: ST_TO_ADDR
// hardcoreCounter := 18 ;
42397: LD_ADDR_EXP 38
42401: PUSH
42402: LD_INT 18
42404: ST_TO_ADDR
// sRocket := false ;
42405: LD_ADDR_EXP 41
42409: PUSH
42410: LD_INT 0
42412: ST_TO_ADDR
// sSpeed := false ;
42413: LD_ADDR_EXP 40
42417: PUSH
42418: LD_INT 0
42420: ST_TO_ADDR
// sEngine := false ;
42421: LD_ADDR_EXP 42
42425: PUSH
42426: LD_INT 0
42428: ST_TO_ADDR
// sSpec := false ;
42429: LD_ADDR_EXP 39
42433: PUSH
42434: LD_INT 0
42436: ST_TO_ADDR
// sLevel := false ;
42437: LD_ADDR_EXP 43
42441: PUSH
42442: LD_INT 0
42444: ST_TO_ADDR
// sArmoury := false ;
42445: LD_ADDR_EXP 44
42449: PUSH
42450: LD_INT 0
42452: ST_TO_ADDR
// sRadar := false ;
42453: LD_ADDR_EXP 45
42457: PUSH
42458: LD_INT 0
42460: ST_TO_ADDR
// sBunker := false ;
42461: LD_ADDR_EXP 46
42465: PUSH
42466: LD_INT 0
42468: ST_TO_ADDR
// sHack := false ;
42469: LD_ADDR_EXP 47
42473: PUSH
42474: LD_INT 0
42476: ST_TO_ADDR
// sFire := false ;
42477: LD_ADDR_EXP 48
42481: PUSH
42482: LD_INT 0
42484: ST_TO_ADDR
// sRefresh := false ;
42485: LD_ADDR_EXP 49
42489: PUSH
42490: LD_INT 0
42492: ST_TO_ADDR
// sExp := false ;
42493: LD_ADDR_EXP 50
42497: PUSH
42498: LD_INT 0
42500: ST_TO_ADDR
// sDepot := false ;
42501: LD_ADDR_EXP 51
42505: PUSH
42506: LD_INT 0
42508: ST_TO_ADDR
// sFlag := false ;
42509: LD_ADDR_EXP 52
42513: PUSH
42514: LD_INT 0
42516: ST_TO_ADDR
// sKamikadze := false ;
42517: LD_ADDR_EXP 60
42521: PUSH
42522: LD_INT 0
42524: ST_TO_ADDR
// sTroll := false ;
42525: LD_ADDR_EXP 61
42529: PUSH
42530: LD_INT 0
42532: ST_TO_ADDR
// sSlow := false ;
42533: LD_ADDR_EXP 62
42537: PUSH
42538: LD_INT 0
42540: ST_TO_ADDR
// sLack := false ;
42541: LD_ADDR_EXP 63
42545: PUSH
42546: LD_INT 0
42548: ST_TO_ADDR
// sTank := false ;
42549: LD_ADDR_EXP 65
42553: PUSH
42554: LD_INT 0
42556: ST_TO_ADDR
// sRemote := false ;
42557: LD_ADDR_EXP 66
42561: PUSH
42562: LD_INT 0
42564: ST_TO_ADDR
// sPowell := false ;
42565: LD_ADDR_EXP 67
42569: PUSH
42570: LD_INT 0
42572: ST_TO_ADDR
// sTeleport := false ;
42573: LD_ADDR_EXP 70
42577: PUSH
42578: LD_INT 0
42580: ST_TO_ADDR
// sOilTower := false ;
42581: LD_ADDR_EXP 72
42585: PUSH
42586: LD_INT 0
42588: ST_TO_ADDR
// sShovel := false ;
42589: LD_ADDR_EXP 73
42593: PUSH
42594: LD_INT 0
42596: ST_TO_ADDR
// sSheik := false ;
42597: LD_ADDR_EXP 74
42601: PUSH
42602: LD_INT 0
42604: ST_TO_ADDR
// sEarthquake := false ;
42605: LD_ADDR_EXP 76
42609: PUSH
42610: LD_INT 0
42612: ST_TO_ADDR
// sAI := false ;
42613: LD_ADDR_EXP 77
42617: PUSH
42618: LD_INT 0
42620: ST_TO_ADDR
// sCargo := false ;
42621: LD_ADDR_EXP 80
42625: PUSH
42626: LD_INT 0
42628: ST_TO_ADDR
// sDLaser := false ;
42629: LD_ADDR_EXP 81
42633: PUSH
42634: LD_INT 0
42636: ST_TO_ADDR
// sExchange := false ;
42637: LD_ADDR_EXP 82
42641: PUSH
42642: LD_INT 0
42644: ST_TO_ADDR
// sFac := false ;
42645: LD_ADDR_EXP 83
42649: PUSH
42650: LD_INT 0
42652: ST_TO_ADDR
// sPower := false ;
42653: LD_ADDR_EXP 84
42657: PUSH
42658: LD_INT 0
42660: ST_TO_ADDR
// sRandom := false ;
42661: LD_ADDR_EXP 85
42665: PUSH
42666: LD_INT 0
42668: ST_TO_ADDR
// sShield := false ;
42669: LD_ADDR_EXP 86
42673: PUSH
42674: LD_INT 0
42676: ST_TO_ADDR
// sTime := false ;
42677: LD_ADDR_EXP 87
42681: PUSH
42682: LD_INT 0
42684: ST_TO_ADDR
// sTools := false ;
42685: LD_ADDR_EXP 88
42689: PUSH
42690: LD_INT 0
42692: ST_TO_ADDR
// sSold := false ;
42693: LD_ADDR_EXP 53
42697: PUSH
42698: LD_INT 0
42700: ST_TO_ADDR
// sDiff := false ;
42701: LD_ADDR_EXP 54
42705: PUSH
42706: LD_INT 0
42708: ST_TO_ADDR
// sFog := false ;
42709: LD_ADDR_EXP 57
42713: PUSH
42714: LD_INT 0
42716: ST_TO_ADDR
// sReset := false ;
42717: LD_ADDR_EXP 58
42721: PUSH
42722: LD_INT 0
42724: ST_TO_ADDR
// sSun := false ;
42725: LD_ADDR_EXP 59
42729: PUSH
42730: LD_INT 0
42732: ST_TO_ADDR
// sTiger := false ;
42733: LD_ADDR_EXP 55
42737: PUSH
42738: LD_INT 0
42740: ST_TO_ADDR
// sBomb := false ;
42741: LD_ADDR_EXP 56
42745: PUSH
42746: LD_INT 0
42748: ST_TO_ADDR
// sWound := false ;
42749: LD_ADDR_EXP 64
42753: PUSH
42754: LD_INT 0
42756: ST_TO_ADDR
// sBetray := false ;
42757: LD_ADDR_EXP 68
42761: PUSH
42762: LD_INT 0
42764: ST_TO_ADDR
// sContamin := false ;
42765: LD_ADDR_EXP 69
42769: PUSH
42770: LD_INT 0
42772: ST_TO_ADDR
// sOil := false ;
42773: LD_ADDR_EXP 71
42777: PUSH
42778: LD_INT 0
42780: ST_TO_ADDR
// sStu := false ;
42781: LD_ADDR_EXP 75
42785: PUSH
42786: LD_INT 0
42788: ST_TO_ADDR
// sBazooka := false ;
42789: LD_ADDR_EXP 78
42793: PUSH
42794: LD_INT 0
42796: ST_TO_ADDR
// sMortar := false ;
42797: LD_ADDR_EXP 79
42801: PUSH
42802: LD_INT 0
42804: ST_TO_ADDR
// sRanger := false ;
42805: LD_ADDR_EXP 89
42809: PUSH
42810: LD_INT 0
42812: ST_TO_ADDR
// sComputer := false ;
42813: LD_ADDR_EXP 90
42817: PUSH
42818: LD_INT 0
42820: ST_TO_ADDR
// s30 := false ;
42821: LD_ADDR_EXP 91
42825: PUSH
42826: LD_INT 0
42828: ST_TO_ADDR
// s60 := false ;
42829: LD_ADDR_EXP 92
42833: PUSH
42834: LD_INT 0
42836: ST_TO_ADDR
// end ;
42837: LD_VAR 0 1
42841: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
42842: LD_INT 0
42844: PPUSH
42845: PPUSH
42846: PPUSH
42847: PPUSH
42848: PPUSH
42849: PPUSH
42850: PPUSH
// result := [ ] ;
42851: LD_ADDR_VAR 0 2
42855: PUSH
42856: EMPTY
42857: ST_TO_ADDR
// if campaign_id = 1 then
42858: LD_OWVAR 69
42862: PUSH
42863: LD_INT 1
42865: EQUAL
42866: IFFALSE 46032
// begin case mission_number of 1 :
42868: LD_OWVAR 70
42872: PUSH
42873: LD_INT 1
42875: DOUBLE
42876: EQUAL
42877: IFTRUE 42881
42879: GO 42957
42881: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
42882: LD_ADDR_VAR 0 2
42886: PUSH
42887: LD_INT 2
42889: PUSH
42890: LD_INT 4
42892: PUSH
42893: LD_INT 11
42895: PUSH
42896: LD_INT 12
42898: PUSH
42899: LD_INT 15
42901: PUSH
42902: LD_INT 16
42904: PUSH
42905: LD_INT 22
42907: PUSH
42908: LD_INT 23
42910: PUSH
42911: LD_INT 26
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 101
42927: PUSH
42928: LD_INT 102
42930: PUSH
42931: LD_INT 106
42933: PUSH
42934: LD_INT 116
42936: PUSH
42937: LD_INT 117
42939: PUSH
42940: LD_INT 118
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: ST_TO_ADDR
42955: GO 46030
42957: LD_INT 2
42959: DOUBLE
42960: EQUAL
42961: IFTRUE 42965
42963: GO 43049
42965: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
42966: LD_ADDR_VAR 0 2
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: LD_INT 4
42976: PUSH
42977: LD_INT 11
42979: PUSH
42980: LD_INT 12
42982: PUSH
42983: LD_INT 15
42985: PUSH
42986: LD_INT 16
42988: PUSH
42989: LD_INT 22
42991: PUSH
42992: LD_INT 23
42994: PUSH
42995: LD_INT 26
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 101
43011: PUSH
43012: LD_INT 102
43014: PUSH
43015: LD_INT 105
43017: PUSH
43018: LD_INT 106
43020: PUSH
43021: LD_INT 108
43023: PUSH
43024: LD_INT 116
43026: PUSH
43027: LD_INT 117
43029: PUSH
43030: LD_INT 118
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: ST_TO_ADDR
43047: GO 46030
43049: LD_INT 3
43051: DOUBLE
43052: EQUAL
43053: IFTRUE 43057
43055: GO 43145
43057: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
43058: LD_ADDR_VAR 0 2
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: LD_INT 4
43068: PUSH
43069: LD_INT 5
43071: PUSH
43072: LD_INT 11
43074: PUSH
43075: LD_INT 12
43077: PUSH
43078: LD_INT 15
43080: PUSH
43081: LD_INT 16
43083: PUSH
43084: LD_INT 22
43086: PUSH
43087: LD_INT 26
43089: PUSH
43090: LD_INT 36
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 101
43107: PUSH
43108: LD_INT 102
43110: PUSH
43111: LD_INT 105
43113: PUSH
43114: LD_INT 106
43116: PUSH
43117: LD_INT 108
43119: PUSH
43120: LD_INT 116
43122: PUSH
43123: LD_INT 117
43125: PUSH
43126: LD_INT 118
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: ST_TO_ADDR
43143: GO 46030
43145: LD_INT 4
43147: DOUBLE
43148: EQUAL
43149: IFTRUE 43153
43151: GO 43249
43153: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
43154: LD_ADDR_VAR 0 2
43158: PUSH
43159: LD_INT 2
43161: PUSH
43162: LD_INT 4
43164: PUSH
43165: LD_INT 5
43167: PUSH
43168: LD_INT 8
43170: PUSH
43171: LD_INT 11
43173: PUSH
43174: LD_INT 12
43176: PUSH
43177: LD_INT 15
43179: PUSH
43180: LD_INT 16
43182: PUSH
43183: LD_INT 22
43185: PUSH
43186: LD_INT 23
43188: PUSH
43189: LD_INT 26
43191: PUSH
43192: LD_INT 36
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 101
43211: PUSH
43212: LD_INT 102
43214: PUSH
43215: LD_INT 105
43217: PUSH
43218: LD_INT 106
43220: PUSH
43221: LD_INT 108
43223: PUSH
43224: LD_INT 116
43226: PUSH
43227: LD_INT 117
43229: PUSH
43230: LD_INT 118
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: ST_TO_ADDR
43247: GO 46030
43249: LD_INT 5
43251: DOUBLE
43252: EQUAL
43253: IFTRUE 43257
43255: GO 43369
43257: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
43258: LD_ADDR_VAR 0 2
43262: PUSH
43263: LD_INT 2
43265: PUSH
43266: LD_INT 4
43268: PUSH
43269: LD_INT 5
43271: PUSH
43272: LD_INT 6
43274: PUSH
43275: LD_INT 8
43277: PUSH
43278: LD_INT 11
43280: PUSH
43281: LD_INT 12
43283: PUSH
43284: LD_INT 15
43286: PUSH
43287: LD_INT 16
43289: PUSH
43290: LD_INT 22
43292: PUSH
43293: LD_INT 23
43295: PUSH
43296: LD_INT 25
43298: PUSH
43299: LD_INT 26
43301: PUSH
43302: LD_INT 36
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 101
43323: PUSH
43324: LD_INT 102
43326: PUSH
43327: LD_INT 105
43329: PUSH
43330: LD_INT 106
43332: PUSH
43333: LD_INT 108
43335: PUSH
43336: LD_INT 109
43338: PUSH
43339: LD_INT 112
43341: PUSH
43342: LD_INT 116
43344: PUSH
43345: LD_INT 117
43347: PUSH
43348: LD_INT 118
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: ST_TO_ADDR
43367: GO 46030
43369: LD_INT 6
43371: DOUBLE
43372: EQUAL
43373: IFTRUE 43377
43375: GO 43509
43377: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
43378: LD_ADDR_VAR 0 2
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: LD_INT 4
43388: PUSH
43389: LD_INT 5
43391: PUSH
43392: LD_INT 6
43394: PUSH
43395: LD_INT 8
43397: PUSH
43398: LD_INT 11
43400: PUSH
43401: LD_INT 12
43403: PUSH
43404: LD_INT 15
43406: PUSH
43407: LD_INT 16
43409: PUSH
43410: LD_INT 20
43412: PUSH
43413: LD_INT 21
43415: PUSH
43416: LD_INT 22
43418: PUSH
43419: LD_INT 23
43421: PUSH
43422: LD_INT 25
43424: PUSH
43425: LD_INT 26
43427: PUSH
43428: LD_INT 30
43430: PUSH
43431: LD_INT 31
43433: PUSH
43434: LD_INT 32
43436: PUSH
43437: LD_INT 36
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 101
43463: PUSH
43464: LD_INT 102
43466: PUSH
43467: LD_INT 105
43469: PUSH
43470: LD_INT 106
43472: PUSH
43473: LD_INT 108
43475: PUSH
43476: LD_INT 109
43478: PUSH
43479: LD_INT 112
43481: PUSH
43482: LD_INT 116
43484: PUSH
43485: LD_INT 117
43487: PUSH
43488: LD_INT 118
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: ST_TO_ADDR
43507: GO 46030
43509: LD_INT 7
43511: DOUBLE
43512: EQUAL
43513: IFTRUE 43517
43515: GO 43629
43517: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
43518: LD_ADDR_VAR 0 2
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: LD_INT 4
43528: PUSH
43529: LD_INT 5
43531: PUSH
43532: LD_INT 7
43534: PUSH
43535: LD_INT 11
43537: PUSH
43538: LD_INT 12
43540: PUSH
43541: LD_INT 15
43543: PUSH
43544: LD_INT 16
43546: PUSH
43547: LD_INT 20
43549: PUSH
43550: LD_INT 21
43552: PUSH
43553: LD_INT 22
43555: PUSH
43556: LD_INT 23
43558: PUSH
43559: LD_INT 25
43561: PUSH
43562: LD_INT 26
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 101
43583: PUSH
43584: LD_INT 102
43586: PUSH
43587: LD_INT 103
43589: PUSH
43590: LD_INT 105
43592: PUSH
43593: LD_INT 106
43595: PUSH
43596: LD_INT 108
43598: PUSH
43599: LD_INT 112
43601: PUSH
43602: LD_INT 116
43604: PUSH
43605: LD_INT 117
43607: PUSH
43608: LD_INT 118
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: ST_TO_ADDR
43627: GO 46030
43629: LD_INT 8
43631: DOUBLE
43632: EQUAL
43633: IFTRUE 43637
43635: GO 43777
43637: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
43638: LD_ADDR_VAR 0 2
43642: PUSH
43643: LD_INT 2
43645: PUSH
43646: LD_INT 4
43648: PUSH
43649: LD_INT 5
43651: PUSH
43652: LD_INT 6
43654: PUSH
43655: LD_INT 7
43657: PUSH
43658: LD_INT 8
43660: PUSH
43661: LD_INT 11
43663: PUSH
43664: LD_INT 12
43666: PUSH
43667: LD_INT 15
43669: PUSH
43670: LD_INT 16
43672: PUSH
43673: LD_INT 20
43675: PUSH
43676: LD_INT 21
43678: PUSH
43679: LD_INT 22
43681: PUSH
43682: LD_INT 23
43684: PUSH
43685: LD_INT 25
43687: PUSH
43688: LD_INT 26
43690: PUSH
43691: LD_INT 30
43693: PUSH
43694: LD_INT 31
43696: PUSH
43697: LD_INT 32
43699: PUSH
43700: LD_INT 36
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 101
43727: PUSH
43728: LD_INT 102
43730: PUSH
43731: LD_INT 103
43733: PUSH
43734: LD_INT 105
43736: PUSH
43737: LD_INT 106
43739: PUSH
43740: LD_INT 108
43742: PUSH
43743: LD_INT 109
43745: PUSH
43746: LD_INT 112
43748: PUSH
43749: LD_INT 116
43751: PUSH
43752: LD_INT 117
43754: PUSH
43755: LD_INT 118
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: ST_TO_ADDR
43775: GO 46030
43777: LD_INT 9
43779: DOUBLE
43780: EQUAL
43781: IFTRUE 43785
43783: GO 43933
43785: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
43786: LD_ADDR_VAR 0 2
43790: PUSH
43791: LD_INT 2
43793: PUSH
43794: LD_INT 4
43796: PUSH
43797: LD_INT 5
43799: PUSH
43800: LD_INT 6
43802: PUSH
43803: LD_INT 7
43805: PUSH
43806: LD_INT 8
43808: PUSH
43809: LD_INT 11
43811: PUSH
43812: LD_INT 12
43814: PUSH
43815: LD_INT 15
43817: PUSH
43818: LD_INT 16
43820: PUSH
43821: LD_INT 20
43823: PUSH
43824: LD_INT 21
43826: PUSH
43827: LD_INT 22
43829: PUSH
43830: LD_INT 23
43832: PUSH
43833: LD_INT 25
43835: PUSH
43836: LD_INT 26
43838: PUSH
43839: LD_INT 28
43841: PUSH
43842: LD_INT 30
43844: PUSH
43845: LD_INT 31
43847: PUSH
43848: LD_INT 32
43850: PUSH
43851: LD_INT 36
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 101
43879: PUSH
43880: LD_INT 102
43882: PUSH
43883: LD_INT 103
43885: PUSH
43886: LD_INT 105
43888: PUSH
43889: LD_INT 106
43891: PUSH
43892: LD_INT 108
43894: PUSH
43895: LD_INT 109
43897: PUSH
43898: LD_INT 112
43900: PUSH
43901: LD_INT 114
43903: PUSH
43904: LD_INT 116
43906: PUSH
43907: LD_INT 117
43909: PUSH
43910: LD_INT 118
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: ST_TO_ADDR
43931: GO 46030
43933: LD_INT 10
43935: DOUBLE
43936: EQUAL
43937: IFTRUE 43941
43939: GO 44137
43941: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
43942: LD_ADDR_VAR 0 2
43946: PUSH
43947: LD_INT 2
43949: PUSH
43950: LD_INT 4
43952: PUSH
43953: LD_INT 5
43955: PUSH
43956: LD_INT 6
43958: PUSH
43959: LD_INT 7
43961: PUSH
43962: LD_INT 8
43964: PUSH
43965: LD_INT 9
43967: PUSH
43968: LD_INT 10
43970: PUSH
43971: LD_INT 11
43973: PUSH
43974: LD_INT 12
43976: PUSH
43977: LD_INT 13
43979: PUSH
43980: LD_INT 14
43982: PUSH
43983: LD_INT 15
43985: PUSH
43986: LD_INT 16
43988: PUSH
43989: LD_INT 17
43991: PUSH
43992: LD_INT 18
43994: PUSH
43995: LD_INT 19
43997: PUSH
43998: LD_INT 20
44000: PUSH
44001: LD_INT 21
44003: PUSH
44004: LD_INT 22
44006: PUSH
44007: LD_INT 23
44009: PUSH
44010: LD_INT 24
44012: PUSH
44013: LD_INT 25
44015: PUSH
44016: LD_INT 26
44018: PUSH
44019: LD_INT 28
44021: PUSH
44022: LD_INT 30
44024: PUSH
44025: LD_INT 31
44027: PUSH
44028: LD_INT 32
44030: PUSH
44031: LD_INT 36
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 101
44067: PUSH
44068: LD_INT 102
44070: PUSH
44071: LD_INT 103
44073: PUSH
44074: LD_INT 104
44076: PUSH
44077: LD_INT 105
44079: PUSH
44080: LD_INT 106
44082: PUSH
44083: LD_INT 107
44085: PUSH
44086: LD_INT 108
44088: PUSH
44089: LD_INT 109
44091: PUSH
44092: LD_INT 110
44094: PUSH
44095: LD_INT 111
44097: PUSH
44098: LD_INT 112
44100: PUSH
44101: LD_INT 114
44103: PUSH
44104: LD_INT 116
44106: PUSH
44107: LD_INT 117
44109: PUSH
44110: LD_INT 118
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: ST_TO_ADDR
44135: GO 46030
44137: LD_INT 11
44139: DOUBLE
44140: EQUAL
44141: IFTRUE 44145
44143: GO 44349
44145: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
44146: LD_ADDR_VAR 0 2
44150: PUSH
44151: LD_INT 2
44153: PUSH
44154: LD_INT 3
44156: PUSH
44157: LD_INT 4
44159: PUSH
44160: LD_INT 5
44162: PUSH
44163: LD_INT 6
44165: PUSH
44166: LD_INT 7
44168: PUSH
44169: LD_INT 8
44171: PUSH
44172: LD_INT 9
44174: PUSH
44175: LD_INT 10
44177: PUSH
44178: LD_INT 11
44180: PUSH
44181: LD_INT 12
44183: PUSH
44184: LD_INT 13
44186: PUSH
44187: LD_INT 14
44189: PUSH
44190: LD_INT 15
44192: PUSH
44193: LD_INT 16
44195: PUSH
44196: LD_INT 17
44198: PUSH
44199: LD_INT 18
44201: PUSH
44202: LD_INT 19
44204: PUSH
44205: LD_INT 20
44207: PUSH
44208: LD_INT 21
44210: PUSH
44211: LD_INT 22
44213: PUSH
44214: LD_INT 23
44216: PUSH
44217: LD_INT 24
44219: PUSH
44220: LD_INT 25
44222: PUSH
44223: LD_INT 26
44225: PUSH
44226: LD_INT 28
44228: PUSH
44229: LD_INT 30
44231: PUSH
44232: LD_INT 31
44234: PUSH
44235: LD_INT 32
44237: PUSH
44238: LD_INT 34
44240: PUSH
44241: LD_INT 36
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 101
44279: PUSH
44280: LD_INT 102
44282: PUSH
44283: LD_INT 103
44285: PUSH
44286: LD_INT 104
44288: PUSH
44289: LD_INT 105
44291: PUSH
44292: LD_INT 106
44294: PUSH
44295: LD_INT 107
44297: PUSH
44298: LD_INT 108
44300: PUSH
44301: LD_INT 109
44303: PUSH
44304: LD_INT 110
44306: PUSH
44307: LD_INT 111
44309: PUSH
44310: LD_INT 112
44312: PUSH
44313: LD_INT 114
44315: PUSH
44316: LD_INT 116
44318: PUSH
44319: LD_INT 117
44321: PUSH
44322: LD_INT 118
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: ST_TO_ADDR
44347: GO 46030
44349: LD_INT 12
44351: DOUBLE
44352: EQUAL
44353: IFTRUE 44357
44355: GO 44577
44357: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
44358: LD_ADDR_VAR 0 2
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: LD_INT 3
44371: PUSH
44372: LD_INT 4
44374: PUSH
44375: LD_INT 5
44377: PUSH
44378: LD_INT 6
44380: PUSH
44381: LD_INT 7
44383: PUSH
44384: LD_INT 8
44386: PUSH
44387: LD_INT 9
44389: PUSH
44390: LD_INT 10
44392: PUSH
44393: LD_INT 11
44395: PUSH
44396: LD_INT 12
44398: PUSH
44399: LD_INT 13
44401: PUSH
44402: LD_INT 14
44404: PUSH
44405: LD_INT 15
44407: PUSH
44408: LD_INT 16
44410: PUSH
44411: LD_INT 17
44413: PUSH
44414: LD_INT 18
44416: PUSH
44417: LD_INT 19
44419: PUSH
44420: LD_INT 20
44422: PUSH
44423: LD_INT 21
44425: PUSH
44426: LD_INT 22
44428: PUSH
44429: LD_INT 23
44431: PUSH
44432: LD_INT 24
44434: PUSH
44435: LD_INT 25
44437: PUSH
44438: LD_INT 26
44440: PUSH
44441: LD_INT 27
44443: PUSH
44444: LD_INT 28
44446: PUSH
44447: LD_INT 30
44449: PUSH
44450: LD_INT 31
44452: PUSH
44453: LD_INT 32
44455: PUSH
44456: LD_INT 33
44458: PUSH
44459: LD_INT 34
44461: PUSH
44462: LD_INT 36
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 101
44503: PUSH
44504: LD_INT 102
44506: PUSH
44507: LD_INT 103
44509: PUSH
44510: LD_INT 104
44512: PUSH
44513: LD_INT 105
44515: PUSH
44516: LD_INT 106
44518: PUSH
44519: LD_INT 107
44521: PUSH
44522: LD_INT 108
44524: PUSH
44525: LD_INT 109
44527: PUSH
44528: LD_INT 110
44530: PUSH
44531: LD_INT 111
44533: PUSH
44534: LD_INT 112
44536: PUSH
44537: LD_INT 113
44539: PUSH
44540: LD_INT 114
44542: PUSH
44543: LD_INT 116
44545: PUSH
44546: LD_INT 117
44548: PUSH
44549: LD_INT 118
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: ST_TO_ADDR
44575: GO 46030
44577: LD_INT 13
44579: DOUBLE
44580: EQUAL
44581: IFTRUE 44585
44583: GO 44793
44585: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
44586: LD_ADDR_VAR 0 2
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: LD_INT 3
44599: PUSH
44600: LD_INT 4
44602: PUSH
44603: LD_INT 5
44605: PUSH
44606: LD_INT 8
44608: PUSH
44609: LD_INT 9
44611: PUSH
44612: LD_INT 10
44614: PUSH
44615: LD_INT 11
44617: PUSH
44618: LD_INT 12
44620: PUSH
44621: LD_INT 14
44623: PUSH
44624: LD_INT 15
44626: PUSH
44627: LD_INT 16
44629: PUSH
44630: LD_INT 17
44632: PUSH
44633: LD_INT 18
44635: PUSH
44636: LD_INT 19
44638: PUSH
44639: LD_INT 20
44641: PUSH
44642: LD_INT 21
44644: PUSH
44645: LD_INT 22
44647: PUSH
44648: LD_INT 23
44650: PUSH
44651: LD_INT 24
44653: PUSH
44654: LD_INT 25
44656: PUSH
44657: LD_INT 26
44659: PUSH
44660: LD_INT 27
44662: PUSH
44663: LD_INT 28
44665: PUSH
44666: LD_INT 30
44668: PUSH
44669: LD_INT 31
44671: PUSH
44672: LD_INT 32
44674: PUSH
44675: LD_INT 33
44677: PUSH
44678: LD_INT 34
44680: PUSH
44681: LD_INT 36
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 101
44719: PUSH
44720: LD_INT 102
44722: PUSH
44723: LD_INT 103
44725: PUSH
44726: LD_INT 104
44728: PUSH
44729: LD_INT 105
44731: PUSH
44732: LD_INT 106
44734: PUSH
44735: LD_INT 107
44737: PUSH
44738: LD_INT 108
44740: PUSH
44741: LD_INT 109
44743: PUSH
44744: LD_INT 110
44746: PUSH
44747: LD_INT 111
44749: PUSH
44750: LD_INT 112
44752: PUSH
44753: LD_INT 113
44755: PUSH
44756: LD_INT 114
44758: PUSH
44759: LD_INT 116
44761: PUSH
44762: LD_INT 117
44764: PUSH
44765: LD_INT 118
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: ST_TO_ADDR
44791: GO 46030
44793: LD_INT 14
44795: DOUBLE
44796: EQUAL
44797: IFTRUE 44801
44799: GO 45025
44801: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
44802: LD_ADDR_VAR 0 2
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: LD_INT 2
44812: PUSH
44813: LD_INT 3
44815: PUSH
44816: LD_INT 4
44818: PUSH
44819: LD_INT 5
44821: PUSH
44822: LD_INT 6
44824: PUSH
44825: LD_INT 7
44827: PUSH
44828: LD_INT 8
44830: PUSH
44831: LD_INT 9
44833: PUSH
44834: LD_INT 10
44836: PUSH
44837: LD_INT 11
44839: PUSH
44840: LD_INT 12
44842: PUSH
44843: LD_INT 13
44845: PUSH
44846: LD_INT 14
44848: PUSH
44849: LD_INT 15
44851: PUSH
44852: LD_INT 16
44854: PUSH
44855: LD_INT 17
44857: PUSH
44858: LD_INT 18
44860: PUSH
44861: LD_INT 19
44863: PUSH
44864: LD_INT 20
44866: PUSH
44867: LD_INT 21
44869: PUSH
44870: LD_INT 22
44872: PUSH
44873: LD_INT 23
44875: PUSH
44876: LD_INT 24
44878: PUSH
44879: LD_INT 25
44881: PUSH
44882: LD_INT 26
44884: PUSH
44885: LD_INT 27
44887: PUSH
44888: LD_INT 28
44890: PUSH
44891: LD_INT 29
44893: PUSH
44894: LD_INT 30
44896: PUSH
44897: LD_INT 31
44899: PUSH
44900: LD_INT 32
44902: PUSH
44903: LD_INT 33
44905: PUSH
44906: LD_INT 34
44908: PUSH
44909: LD_INT 36
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 101
44951: PUSH
44952: LD_INT 102
44954: PUSH
44955: LD_INT 103
44957: PUSH
44958: LD_INT 104
44960: PUSH
44961: LD_INT 105
44963: PUSH
44964: LD_INT 106
44966: PUSH
44967: LD_INT 107
44969: PUSH
44970: LD_INT 108
44972: PUSH
44973: LD_INT 109
44975: PUSH
44976: LD_INT 110
44978: PUSH
44979: LD_INT 111
44981: PUSH
44982: LD_INT 112
44984: PUSH
44985: LD_INT 113
44987: PUSH
44988: LD_INT 114
44990: PUSH
44991: LD_INT 116
44993: PUSH
44994: LD_INT 117
44996: PUSH
44997: LD_INT 118
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: ST_TO_ADDR
45023: GO 46030
45025: LD_INT 15
45027: DOUBLE
45028: EQUAL
45029: IFTRUE 45033
45031: GO 45257
45033: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
45034: LD_ADDR_VAR 0 2
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: LD_INT 2
45044: PUSH
45045: LD_INT 3
45047: PUSH
45048: LD_INT 4
45050: PUSH
45051: LD_INT 5
45053: PUSH
45054: LD_INT 6
45056: PUSH
45057: LD_INT 7
45059: PUSH
45060: LD_INT 8
45062: PUSH
45063: LD_INT 9
45065: PUSH
45066: LD_INT 10
45068: PUSH
45069: LD_INT 11
45071: PUSH
45072: LD_INT 12
45074: PUSH
45075: LD_INT 13
45077: PUSH
45078: LD_INT 14
45080: PUSH
45081: LD_INT 15
45083: PUSH
45084: LD_INT 16
45086: PUSH
45087: LD_INT 17
45089: PUSH
45090: LD_INT 18
45092: PUSH
45093: LD_INT 19
45095: PUSH
45096: LD_INT 20
45098: PUSH
45099: LD_INT 21
45101: PUSH
45102: LD_INT 22
45104: PUSH
45105: LD_INT 23
45107: PUSH
45108: LD_INT 24
45110: PUSH
45111: LD_INT 25
45113: PUSH
45114: LD_INT 26
45116: PUSH
45117: LD_INT 27
45119: PUSH
45120: LD_INT 28
45122: PUSH
45123: LD_INT 29
45125: PUSH
45126: LD_INT 30
45128: PUSH
45129: LD_INT 31
45131: PUSH
45132: LD_INT 32
45134: PUSH
45135: LD_INT 33
45137: PUSH
45138: LD_INT 34
45140: PUSH
45141: LD_INT 36
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 101
45183: PUSH
45184: LD_INT 102
45186: PUSH
45187: LD_INT 103
45189: PUSH
45190: LD_INT 104
45192: PUSH
45193: LD_INT 105
45195: PUSH
45196: LD_INT 106
45198: PUSH
45199: LD_INT 107
45201: PUSH
45202: LD_INT 108
45204: PUSH
45205: LD_INT 109
45207: PUSH
45208: LD_INT 110
45210: PUSH
45211: LD_INT 111
45213: PUSH
45214: LD_INT 112
45216: PUSH
45217: LD_INT 113
45219: PUSH
45220: LD_INT 114
45222: PUSH
45223: LD_INT 116
45225: PUSH
45226: LD_INT 117
45228: PUSH
45229: LD_INT 118
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: ST_TO_ADDR
45255: GO 46030
45257: LD_INT 16
45259: DOUBLE
45260: EQUAL
45261: IFTRUE 45265
45263: GO 45401
45265: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
45266: LD_ADDR_VAR 0 2
45270: PUSH
45271: LD_INT 2
45273: PUSH
45274: LD_INT 4
45276: PUSH
45277: LD_INT 5
45279: PUSH
45280: LD_INT 7
45282: PUSH
45283: LD_INT 11
45285: PUSH
45286: LD_INT 12
45288: PUSH
45289: LD_INT 15
45291: PUSH
45292: LD_INT 16
45294: PUSH
45295: LD_INT 20
45297: PUSH
45298: LD_INT 21
45300: PUSH
45301: LD_INT 22
45303: PUSH
45304: LD_INT 23
45306: PUSH
45307: LD_INT 25
45309: PUSH
45310: LD_INT 26
45312: PUSH
45313: LD_INT 30
45315: PUSH
45316: LD_INT 31
45318: PUSH
45319: LD_INT 32
45321: PUSH
45322: LD_INT 33
45324: PUSH
45325: LD_INT 34
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 101
45351: PUSH
45352: LD_INT 102
45354: PUSH
45355: LD_INT 103
45357: PUSH
45358: LD_INT 106
45360: PUSH
45361: LD_INT 108
45363: PUSH
45364: LD_INT 112
45366: PUSH
45367: LD_INT 113
45369: PUSH
45370: LD_INT 114
45372: PUSH
45373: LD_INT 116
45375: PUSH
45376: LD_INT 117
45378: PUSH
45379: LD_INT 118
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: ST_TO_ADDR
45399: GO 46030
45401: LD_INT 17
45403: DOUBLE
45404: EQUAL
45405: IFTRUE 45409
45407: GO 45633
45409: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
45410: LD_ADDR_VAR 0 2
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: LD_INT 2
45420: PUSH
45421: LD_INT 3
45423: PUSH
45424: LD_INT 4
45426: PUSH
45427: LD_INT 5
45429: PUSH
45430: LD_INT 6
45432: PUSH
45433: LD_INT 7
45435: PUSH
45436: LD_INT 8
45438: PUSH
45439: LD_INT 9
45441: PUSH
45442: LD_INT 10
45444: PUSH
45445: LD_INT 11
45447: PUSH
45448: LD_INT 12
45450: PUSH
45451: LD_INT 13
45453: PUSH
45454: LD_INT 14
45456: PUSH
45457: LD_INT 15
45459: PUSH
45460: LD_INT 16
45462: PUSH
45463: LD_INT 17
45465: PUSH
45466: LD_INT 18
45468: PUSH
45469: LD_INT 19
45471: PUSH
45472: LD_INT 20
45474: PUSH
45475: LD_INT 21
45477: PUSH
45478: LD_INT 22
45480: PUSH
45481: LD_INT 23
45483: PUSH
45484: LD_INT 24
45486: PUSH
45487: LD_INT 25
45489: PUSH
45490: LD_INT 26
45492: PUSH
45493: LD_INT 27
45495: PUSH
45496: LD_INT 28
45498: PUSH
45499: LD_INT 29
45501: PUSH
45502: LD_INT 30
45504: PUSH
45505: LD_INT 31
45507: PUSH
45508: LD_INT 32
45510: PUSH
45511: LD_INT 33
45513: PUSH
45514: LD_INT 34
45516: PUSH
45517: LD_INT 36
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 101
45559: PUSH
45560: LD_INT 102
45562: PUSH
45563: LD_INT 103
45565: PUSH
45566: LD_INT 104
45568: PUSH
45569: LD_INT 105
45571: PUSH
45572: LD_INT 106
45574: PUSH
45575: LD_INT 107
45577: PUSH
45578: LD_INT 108
45580: PUSH
45581: LD_INT 109
45583: PUSH
45584: LD_INT 110
45586: PUSH
45587: LD_INT 111
45589: PUSH
45590: LD_INT 112
45592: PUSH
45593: LD_INT 113
45595: PUSH
45596: LD_INT 114
45598: PUSH
45599: LD_INT 116
45601: PUSH
45602: LD_INT 117
45604: PUSH
45605: LD_INT 118
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: ST_TO_ADDR
45631: GO 46030
45633: LD_INT 18
45635: DOUBLE
45636: EQUAL
45637: IFTRUE 45641
45639: GO 45789
45641: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
45642: LD_ADDR_VAR 0 2
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: LD_INT 4
45652: PUSH
45653: LD_INT 5
45655: PUSH
45656: LD_INT 7
45658: PUSH
45659: LD_INT 11
45661: PUSH
45662: LD_INT 12
45664: PUSH
45665: LD_INT 15
45667: PUSH
45668: LD_INT 16
45670: PUSH
45671: LD_INT 20
45673: PUSH
45674: LD_INT 21
45676: PUSH
45677: LD_INT 22
45679: PUSH
45680: LD_INT 23
45682: PUSH
45683: LD_INT 25
45685: PUSH
45686: LD_INT 26
45688: PUSH
45689: LD_INT 30
45691: PUSH
45692: LD_INT 31
45694: PUSH
45695: LD_INT 32
45697: PUSH
45698: LD_INT 33
45700: PUSH
45701: LD_INT 34
45703: PUSH
45704: LD_INT 35
45706: PUSH
45707: LD_INT 36
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 101
45735: PUSH
45736: LD_INT 102
45738: PUSH
45739: LD_INT 103
45741: PUSH
45742: LD_INT 106
45744: PUSH
45745: LD_INT 108
45747: PUSH
45748: LD_INT 112
45750: PUSH
45751: LD_INT 113
45753: PUSH
45754: LD_INT 114
45756: PUSH
45757: LD_INT 115
45759: PUSH
45760: LD_INT 116
45762: PUSH
45763: LD_INT 117
45765: PUSH
45766: LD_INT 118
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: ST_TO_ADDR
45787: GO 46030
45789: LD_INT 19
45791: DOUBLE
45792: EQUAL
45793: IFTRUE 45797
45795: GO 46029
45797: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
45798: LD_ADDR_VAR 0 2
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: LD_INT 3
45811: PUSH
45812: LD_INT 4
45814: PUSH
45815: LD_INT 5
45817: PUSH
45818: LD_INT 6
45820: PUSH
45821: LD_INT 7
45823: PUSH
45824: LD_INT 8
45826: PUSH
45827: LD_INT 9
45829: PUSH
45830: LD_INT 10
45832: PUSH
45833: LD_INT 11
45835: PUSH
45836: LD_INT 12
45838: PUSH
45839: LD_INT 13
45841: PUSH
45842: LD_INT 14
45844: PUSH
45845: LD_INT 15
45847: PUSH
45848: LD_INT 16
45850: PUSH
45851: LD_INT 17
45853: PUSH
45854: LD_INT 18
45856: PUSH
45857: LD_INT 19
45859: PUSH
45860: LD_INT 20
45862: PUSH
45863: LD_INT 21
45865: PUSH
45866: LD_INT 22
45868: PUSH
45869: LD_INT 23
45871: PUSH
45872: LD_INT 24
45874: PUSH
45875: LD_INT 25
45877: PUSH
45878: LD_INT 26
45880: PUSH
45881: LD_INT 27
45883: PUSH
45884: LD_INT 28
45886: PUSH
45887: LD_INT 29
45889: PUSH
45890: LD_INT 30
45892: PUSH
45893: LD_INT 31
45895: PUSH
45896: LD_INT 32
45898: PUSH
45899: LD_INT 33
45901: PUSH
45902: LD_INT 34
45904: PUSH
45905: LD_INT 35
45907: PUSH
45908: LD_INT 36
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 101
45951: PUSH
45952: LD_INT 102
45954: PUSH
45955: LD_INT 103
45957: PUSH
45958: LD_INT 104
45960: PUSH
45961: LD_INT 105
45963: PUSH
45964: LD_INT 106
45966: PUSH
45967: LD_INT 107
45969: PUSH
45970: LD_INT 108
45972: PUSH
45973: LD_INT 109
45975: PUSH
45976: LD_INT 110
45978: PUSH
45979: LD_INT 111
45981: PUSH
45982: LD_INT 112
45984: PUSH
45985: LD_INT 113
45987: PUSH
45988: LD_INT 114
45990: PUSH
45991: LD_INT 115
45993: PUSH
45994: LD_INT 116
45996: PUSH
45997: LD_INT 117
45999: PUSH
46000: LD_INT 118
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: ST_TO_ADDR
46027: GO 46030
46029: POP
// end else
46030: GO 46261
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
46032: LD_ADDR_VAR 0 2
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: LD_INT 2
46042: PUSH
46043: LD_INT 3
46045: PUSH
46046: LD_INT 4
46048: PUSH
46049: LD_INT 5
46051: PUSH
46052: LD_INT 6
46054: PUSH
46055: LD_INT 7
46057: PUSH
46058: LD_INT 8
46060: PUSH
46061: LD_INT 9
46063: PUSH
46064: LD_INT 10
46066: PUSH
46067: LD_INT 11
46069: PUSH
46070: LD_INT 12
46072: PUSH
46073: LD_INT 13
46075: PUSH
46076: LD_INT 14
46078: PUSH
46079: LD_INT 15
46081: PUSH
46082: LD_INT 16
46084: PUSH
46085: LD_INT 17
46087: PUSH
46088: LD_INT 18
46090: PUSH
46091: LD_INT 19
46093: PUSH
46094: LD_INT 20
46096: PUSH
46097: LD_INT 21
46099: PUSH
46100: LD_INT 22
46102: PUSH
46103: LD_INT 23
46105: PUSH
46106: LD_INT 24
46108: PUSH
46109: LD_INT 25
46111: PUSH
46112: LD_INT 26
46114: PUSH
46115: LD_INT 27
46117: PUSH
46118: LD_INT 28
46120: PUSH
46121: LD_INT 29
46123: PUSH
46124: LD_INT 30
46126: PUSH
46127: LD_INT 31
46129: PUSH
46130: LD_INT 32
46132: PUSH
46133: LD_INT 33
46135: PUSH
46136: LD_INT 34
46138: PUSH
46139: LD_INT 35
46141: PUSH
46142: LD_INT 36
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 101
46185: PUSH
46186: LD_INT 102
46188: PUSH
46189: LD_INT 103
46191: PUSH
46192: LD_INT 104
46194: PUSH
46195: LD_INT 105
46197: PUSH
46198: LD_INT 106
46200: PUSH
46201: LD_INT 107
46203: PUSH
46204: LD_INT 108
46206: PUSH
46207: LD_INT 109
46209: PUSH
46210: LD_INT 110
46212: PUSH
46213: LD_INT 111
46215: PUSH
46216: LD_INT 112
46218: PUSH
46219: LD_INT 113
46221: PUSH
46222: LD_INT 114
46224: PUSH
46225: LD_INT 115
46227: PUSH
46228: LD_INT 116
46230: PUSH
46231: LD_INT 117
46233: PUSH
46234: LD_INT 118
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: ST_TO_ADDR
// if result then
46261: LD_VAR 0 2
46265: IFFALSE 47051
// begin normal :=  ;
46267: LD_ADDR_VAR 0 5
46271: PUSH
46272: LD_STRING 
46274: ST_TO_ADDR
// hardcore :=  ;
46275: LD_ADDR_VAR 0 6
46279: PUSH
46280: LD_STRING 
46282: ST_TO_ADDR
// active :=  ;
46283: LD_ADDR_VAR 0 7
46287: PUSH
46288: LD_STRING 
46290: ST_TO_ADDR
// for i = 1 to normalCounter do
46291: LD_ADDR_VAR 0 8
46295: PUSH
46296: DOUBLE
46297: LD_INT 1
46299: DEC
46300: ST_TO_ADDR
46301: LD_EXP 37
46305: PUSH
46306: FOR_TO
46307: IFFALSE 46408
// begin tmp := 0 ;
46309: LD_ADDR_VAR 0 3
46313: PUSH
46314: LD_STRING 0
46316: ST_TO_ADDR
// if result [ 1 ] then
46317: LD_VAR 0 2
46321: PUSH
46322: LD_INT 1
46324: ARRAY
46325: IFFALSE 46390
// if result [ 1 ] [ 1 ] = i then
46327: LD_VAR 0 2
46331: PUSH
46332: LD_INT 1
46334: ARRAY
46335: PUSH
46336: LD_INT 1
46338: ARRAY
46339: PUSH
46340: LD_VAR 0 8
46344: EQUAL
46345: IFFALSE 46390
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
46347: LD_ADDR_VAR 0 2
46351: PUSH
46352: LD_VAR 0 2
46356: PPUSH
46357: LD_INT 1
46359: PPUSH
46360: LD_VAR 0 2
46364: PUSH
46365: LD_INT 1
46367: ARRAY
46368: PPUSH
46369: LD_INT 1
46371: PPUSH
46372: CALL_OW 3
46376: PPUSH
46377: CALL_OW 1
46381: ST_TO_ADDR
// tmp := 1 ;
46382: LD_ADDR_VAR 0 3
46386: PUSH
46387: LD_STRING 1
46389: ST_TO_ADDR
// end ; normal := normal & tmp ;
46390: LD_ADDR_VAR 0 5
46394: PUSH
46395: LD_VAR 0 5
46399: PUSH
46400: LD_VAR 0 3
46404: STR
46405: ST_TO_ADDR
// end ;
46406: GO 46306
46408: POP
46409: POP
// for i = 1 to hardcoreCounter do
46410: LD_ADDR_VAR 0 8
46414: PUSH
46415: DOUBLE
46416: LD_INT 1
46418: DEC
46419: ST_TO_ADDR
46420: LD_EXP 38
46424: PUSH
46425: FOR_TO
46426: IFFALSE 46531
// begin tmp := 0 ;
46428: LD_ADDR_VAR 0 3
46432: PUSH
46433: LD_STRING 0
46435: ST_TO_ADDR
// if result [ 2 ] then
46436: LD_VAR 0 2
46440: PUSH
46441: LD_INT 2
46443: ARRAY
46444: IFFALSE 46513
// if result [ 2 ] [ 1 ] = 100 + i then
46446: LD_VAR 0 2
46450: PUSH
46451: LD_INT 2
46453: ARRAY
46454: PUSH
46455: LD_INT 1
46457: ARRAY
46458: PUSH
46459: LD_INT 100
46461: PUSH
46462: LD_VAR 0 8
46466: PLUS
46467: EQUAL
46468: IFFALSE 46513
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
46470: LD_ADDR_VAR 0 2
46474: PUSH
46475: LD_VAR 0 2
46479: PPUSH
46480: LD_INT 2
46482: PPUSH
46483: LD_VAR 0 2
46487: PUSH
46488: LD_INT 2
46490: ARRAY
46491: PPUSH
46492: LD_INT 1
46494: PPUSH
46495: CALL_OW 3
46499: PPUSH
46500: CALL_OW 1
46504: ST_TO_ADDR
// tmp := 1 ;
46505: LD_ADDR_VAR 0 3
46509: PUSH
46510: LD_STRING 1
46512: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
46513: LD_ADDR_VAR 0 6
46517: PUSH
46518: LD_VAR 0 6
46522: PUSH
46523: LD_VAR 0 3
46527: STR
46528: ST_TO_ADDR
// end ;
46529: GO 46425
46531: POP
46532: POP
// if isGameLoad then
46533: LD_VAR 0 1
46537: IFFALSE 47012
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
46539: LD_ADDR_VAR 0 4
46543: PUSH
46544: LD_EXP 41
46548: PUSH
46549: LD_EXP 40
46553: PUSH
46554: LD_EXP 42
46558: PUSH
46559: LD_EXP 39
46563: PUSH
46564: LD_EXP 43
46568: PUSH
46569: LD_EXP 44
46573: PUSH
46574: LD_EXP 45
46578: PUSH
46579: LD_EXP 46
46583: PUSH
46584: LD_EXP 47
46588: PUSH
46589: LD_EXP 48
46593: PUSH
46594: LD_EXP 49
46598: PUSH
46599: LD_EXP 50
46603: PUSH
46604: LD_EXP 51
46608: PUSH
46609: LD_EXP 52
46613: PUSH
46614: LD_EXP 60
46618: PUSH
46619: LD_EXP 61
46623: PUSH
46624: LD_EXP 62
46628: PUSH
46629: LD_EXP 63
46633: PUSH
46634: LD_EXP 65
46638: PUSH
46639: LD_EXP 66
46643: PUSH
46644: LD_EXP 67
46648: PUSH
46649: LD_EXP 70
46653: PUSH
46654: LD_EXP 72
46658: PUSH
46659: LD_EXP 73
46663: PUSH
46664: LD_EXP 74
46668: PUSH
46669: LD_EXP 76
46673: PUSH
46674: LD_EXP 77
46678: PUSH
46679: LD_EXP 80
46683: PUSH
46684: LD_EXP 81
46688: PUSH
46689: LD_EXP 82
46693: PUSH
46694: LD_EXP 83
46698: PUSH
46699: LD_EXP 84
46703: PUSH
46704: LD_EXP 85
46708: PUSH
46709: LD_EXP 86
46713: PUSH
46714: LD_EXP 87
46718: PUSH
46719: LD_EXP 88
46723: PUSH
46724: LD_EXP 53
46728: PUSH
46729: LD_EXP 54
46733: PUSH
46734: LD_EXP 57
46738: PUSH
46739: LD_EXP 58
46743: PUSH
46744: LD_EXP 59
46748: PUSH
46749: LD_EXP 55
46753: PUSH
46754: LD_EXP 56
46758: PUSH
46759: LD_EXP 64
46763: PUSH
46764: LD_EXP 68
46768: PUSH
46769: LD_EXP 69
46773: PUSH
46774: LD_EXP 71
46778: PUSH
46779: LD_EXP 75
46783: PUSH
46784: LD_EXP 78
46788: PUSH
46789: LD_EXP 79
46793: PUSH
46794: LD_EXP 89
46798: PUSH
46799: LD_EXP 90
46803: PUSH
46804: LD_EXP 91
46808: PUSH
46809: LD_EXP 92
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: ST_TO_ADDR
// tmp :=  ;
46870: LD_ADDR_VAR 0 3
46874: PUSH
46875: LD_STRING 
46877: ST_TO_ADDR
// for i = 1 to normalCounter do
46878: LD_ADDR_VAR 0 8
46882: PUSH
46883: DOUBLE
46884: LD_INT 1
46886: DEC
46887: ST_TO_ADDR
46888: LD_EXP 37
46892: PUSH
46893: FOR_TO
46894: IFFALSE 46930
// begin if flags [ i ] then
46896: LD_VAR 0 4
46900: PUSH
46901: LD_VAR 0 8
46905: ARRAY
46906: IFFALSE 46928
// tmp := tmp & i & ; ;
46908: LD_ADDR_VAR 0 3
46912: PUSH
46913: LD_VAR 0 3
46917: PUSH
46918: LD_VAR 0 8
46922: STR
46923: PUSH
46924: LD_STRING ;
46926: STR
46927: ST_TO_ADDR
// end ;
46928: GO 46893
46930: POP
46931: POP
// for i = 1 to hardcoreCounter do
46932: LD_ADDR_VAR 0 8
46936: PUSH
46937: DOUBLE
46938: LD_INT 1
46940: DEC
46941: ST_TO_ADDR
46942: LD_EXP 38
46946: PUSH
46947: FOR_TO
46948: IFFALSE 46994
// begin if flags [ normalCounter + i ] then
46950: LD_VAR 0 4
46954: PUSH
46955: LD_EXP 37
46959: PUSH
46960: LD_VAR 0 8
46964: PLUS
46965: ARRAY
46966: IFFALSE 46992
// tmp := tmp & ( 100 + i ) & ; ;
46968: LD_ADDR_VAR 0 3
46972: PUSH
46973: LD_VAR 0 3
46977: PUSH
46978: LD_INT 100
46980: PUSH
46981: LD_VAR 0 8
46985: PLUS
46986: STR
46987: PUSH
46988: LD_STRING ;
46990: STR
46991: ST_TO_ADDR
// end ;
46992: GO 46947
46994: POP
46995: POP
// if tmp then
46996: LD_VAR 0 3
47000: IFFALSE 47012
// active := tmp ;
47002: LD_ADDR_VAR 0 7
47006: PUSH
47007: LD_VAR 0 3
47011: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
47012: LD_STRING getStreamItemsFromMission("
47014: PUSH
47015: LD_VAR 0 5
47019: STR
47020: PUSH
47021: LD_STRING ","
47023: STR
47024: PUSH
47025: LD_VAR 0 6
47029: STR
47030: PUSH
47031: LD_STRING ","
47033: STR
47034: PUSH
47035: LD_VAR 0 7
47039: STR
47040: PUSH
47041: LD_STRING ")
47043: STR
47044: PPUSH
47045: CALL_OW 559
// end else
47049: GO 47058
// ToLua ( getStreamItemsFromMission("","","") ) ;
47051: LD_STRING getStreamItemsFromMission("","","")
47053: PPUSH
47054: CALL_OW 559
// end ;
47058: LD_VAR 0 2
47062: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
47063: LD_EXP 36
47067: PUSH
47068: LD_EXP 41
47072: AND
47073: IFFALSE 47197
47075: GO 47077
47077: DISABLE
47078: LD_INT 0
47080: PPUSH
47081: PPUSH
// begin enable ;
47082: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
47083: LD_ADDR_VAR 0 2
47087: PUSH
47088: LD_INT 22
47090: PUSH
47091: LD_OWVAR 2
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 2
47102: PUSH
47103: LD_INT 34
47105: PUSH
47106: LD_INT 7
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 34
47115: PUSH
47116: LD_INT 45
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 34
47125: PUSH
47126: LD_INT 28
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 34
47135: PUSH
47136: LD_INT 47
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PPUSH
47154: CALL_OW 69
47158: ST_TO_ADDR
// if not tmp then
47159: LD_VAR 0 2
47163: NOT
47164: IFFALSE 47168
// exit ;
47166: GO 47197
// for i in tmp do
47168: LD_ADDR_VAR 0 1
47172: PUSH
47173: LD_VAR 0 2
47177: PUSH
47178: FOR_IN
47179: IFFALSE 47195
// begin SetLives ( i , 0 ) ;
47181: LD_VAR 0 1
47185: PPUSH
47186: LD_INT 0
47188: PPUSH
47189: CALL_OW 234
// end ;
47193: GO 47178
47195: POP
47196: POP
// end ;
47197: PPOPN 2
47199: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
47200: LD_EXP 36
47204: PUSH
47205: LD_EXP 42
47209: AND
47210: IFFALSE 47294
47212: GO 47214
47214: DISABLE
47215: LD_INT 0
47217: PPUSH
47218: PPUSH
// begin enable ;
47219: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
47220: LD_ADDR_VAR 0 2
47224: PUSH
47225: LD_INT 22
47227: PUSH
47228: LD_OWVAR 2
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 32
47239: PUSH
47240: LD_INT 3
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PPUSH
47251: CALL_OW 69
47255: ST_TO_ADDR
// if not tmp then
47256: LD_VAR 0 2
47260: NOT
47261: IFFALSE 47265
// exit ;
47263: GO 47294
// for i in tmp do
47265: LD_ADDR_VAR 0 1
47269: PUSH
47270: LD_VAR 0 2
47274: PUSH
47275: FOR_IN
47276: IFFALSE 47292
// begin SetLives ( i , 0 ) ;
47278: LD_VAR 0 1
47282: PPUSH
47283: LD_INT 0
47285: PPUSH
47286: CALL_OW 234
// end ;
47290: GO 47275
47292: POP
47293: POP
// end ;
47294: PPOPN 2
47296: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
47297: LD_EXP 36
47301: PUSH
47302: LD_EXP 39
47306: AND
47307: IFFALSE 47400
47309: GO 47311
47311: DISABLE
47312: LD_INT 0
47314: PPUSH
// begin enable ;
47315: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
47316: LD_ADDR_VAR 0 1
47320: PUSH
47321: LD_INT 22
47323: PUSH
47324: LD_OWVAR 2
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: LD_INT 25
47338: PUSH
47339: LD_INT 5
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 25
47348: PUSH
47349: LD_INT 9
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 25
47358: PUSH
47359: LD_INT 8
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PPUSH
47376: CALL_OW 69
47380: PUSH
47381: FOR_IN
47382: IFFALSE 47398
// begin SetClass ( i , 1 ) ;
47384: LD_VAR 0 1
47388: PPUSH
47389: LD_INT 1
47391: PPUSH
47392: CALL_OW 336
// end ;
47396: GO 47381
47398: POP
47399: POP
// end ;
47400: PPOPN 1
47402: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
47403: LD_EXP 36
47407: PUSH
47408: LD_EXP 40
47412: AND
47413: PUSH
47414: LD_OWVAR 65
47418: PUSH
47419: LD_INT 7
47421: LESS
47422: AND
47423: IFFALSE 47437
47425: GO 47427
47427: DISABLE
// begin enable ;
47428: ENABLE
// game_speed := 7 ;
47429: LD_ADDR_OWVAR 65
47433: PUSH
47434: LD_INT 7
47436: ST_TO_ADDR
// end ;
47437: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
47438: LD_EXP 36
47442: PUSH
47443: LD_EXP 43
47447: AND
47448: IFFALSE 47650
47450: GO 47452
47452: DISABLE
47453: LD_INT 0
47455: PPUSH
47456: PPUSH
47457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
47458: LD_ADDR_VAR 0 3
47462: PUSH
47463: LD_INT 81
47465: PUSH
47466: LD_OWVAR 2
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 21
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PPUSH
47489: CALL_OW 69
47493: ST_TO_ADDR
// if not tmp then
47494: LD_VAR 0 3
47498: NOT
47499: IFFALSE 47503
// exit ;
47501: GO 47650
// if tmp > 5 then
47503: LD_VAR 0 3
47507: PUSH
47508: LD_INT 5
47510: GREATER
47511: IFFALSE 47523
// k := 5 else
47513: LD_ADDR_VAR 0 2
47517: PUSH
47518: LD_INT 5
47520: ST_TO_ADDR
47521: GO 47533
// k := tmp ;
47523: LD_ADDR_VAR 0 2
47527: PUSH
47528: LD_VAR 0 3
47532: ST_TO_ADDR
// for i := 1 to k do
47533: LD_ADDR_VAR 0 1
47537: PUSH
47538: DOUBLE
47539: LD_INT 1
47541: DEC
47542: ST_TO_ADDR
47543: LD_VAR 0 2
47547: PUSH
47548: FOR_TO
47549: IFFALSE 47648
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
47551: LD_VAR 0 3
47555: PUSH
47556: LD_VAR 0 1
47560: ARRAY
47561: PPUSH
47562: LD_VAR 0 1
47566: PUSH
47567: LD_INT 4
47569: MOD
47570: PUSH
47571: LD_INT 1
47573: PLUS
47574: PPUSH
47575: CALL_OW 259
47579: PUSH
47580: LD_INT 10
47582: LESS
47583: IFFALSE 47646
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
47585: LD_VAR 0 3
47589: PUSH
47590: LD_VAR 0 1
47594: ARRAY
47595: PPUSH
47596: LD_VAR 0 1
47600: PUSH
47601: LD_INT 4
47603: MOD
47604: PUSH
47605: LD_INT 1
47607: PLUS
47608: PPUSH
47609: LD_VAR 0 3
47613: PUSH
47614: LD_VAR 0 1
47618: ARRAY
47619: PPUSH
47620: LD_VAR 0 1
47624: PUSH
47625: LD_INT 4
47627: MOD
47628: PUSH
47629: LD_INT 1
47631: PLUS
47632: PPUSH
47633: CALL_OW 259
47637: PUSH
47638: LD_INT 1
47640: PLUS
47641: PPUSH
47642: CALL_OW 237
47646: GO 47548
47648: POP
47649: POP
// end ;
47650: PPOPN 3
47652: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
47653: LD_EXP 36
47657: PUSH
47658: LD_EXP 44
47662: AND
47663: IFFALSE 47683
47665: GO 47667
47667: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
47668: LD_INT 4
47670: PPUSH
47671: LD_OWVAR 2
47675: PPUSH
47676: LD_INT 0
47678: PPUSH
47679: CALL_OW 324
47683: END
// every 0 0$1 trigger StreamModeActive and sShovel do
47684: LD_EXP 36
47688: PUSH
47689: LD_EXP 73
47693: AND
47694: IFFALSE 47714
47696: GO 47698
47698: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
47699: LD_INT 19
47701: PPUSH
47702: LD_OWVAR 2
47706: PPUSH
47707: LD_INT 0
47709: PPUSH
47710: CALL_OW 324
47714: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
47715: LD_EXP 36
47719: PUSH
47720: LD_EXP 45
47724: AND
47725: IFFALSE 47827
47727: GO 47729
47729: DISABLE
47730: LD_INT 0
47732: PPUSH
47733: PPUSH
// begin enable ;
47734: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
47735: LD_ADDR_VAR 0 2
47739: PUSH
47740: LD_INT 22
47742: PUSH
47743: LD_OWVAR 2
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: LD_INT 34
47757: PUSH
47758: LD_INT 11
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 34
47767: PUSH
47768: LD_INT 30
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: LIST
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PPUSH
47784: CALL_OW 69
47788: ST_TO_ADDR
// if not tmp then
47789: LD_VAR 0 2
47793: NOT
47794: IFFALSE 47798
// exit ;
47796: GO 47827
// for i in tmp do
47798: LD_ADDR_VAR 0 1
47802: PUSH
47803: LD_VAR 0 2
47807: PUSH
47808: FOR_IN
47809: IFFALSE 47825
// begin SetLives ( i , 0 ) ;
47811: LD_VAR 0 1
47815: PPUSH
47816: LD_INT 0
47818: PPUSH
47819: CALL_OW 234
// end ;
47823: GO 47808
47825: POP
47826: POP
// end ;
47827: PPOPN 2
47829: END
// every 0 0$1 trigger StreamModeActive and sBunker do
47830: LD_EXP 36
47834: PUSH
47835: LD_EXP 46
47839: AND
47840: IFFALSE 47860
47842: GO 47844
47844: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
47845: LD_INT 32
47847: PPUSH
47848: LD_OWVAR 2
47852: PPUSH
47853: LD_INT 0
47855: PPUSH
47856: CALL_OW 324
47860: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
47861: LD_EXP 36
47865: PUSH
47866: LD_EXP 47
47870: AND
47871: IFFALSE 48052
47873: GO 47875
47875: DISABLE
47876: LD_INT 0
47878: PPUSH
47879: PPUSH
47880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
47881: LD_ADDR_VAR 0 2
47885: PUSH
47886: LD_INT 22
47888: PUSH
47889: LD_OWVAR 2
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 33
47900: PUSH
47901: LD_INT 3
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PPUSH
47912: CALL_OW 69
47916: ST_TO_ADDR
// if not tmp then
47917: LD_VAR 0 2
47921: NOT
47922: IFFALSE 47926
// exit ;
47924: GO 48052
// side := 0 ;
47926: LD_ADDR_VAR 0 3
47930: PUSH
47931: LD_INT 0
47933: ST_TO_ADDR
// for i := 1 to 8 do
47934: LD_ADDR_VAR 0 1
47938: PUSH
47939: DOUBLE
47940: LD_INT 1
47942: DEC
47943: ST_TO_ADDR
47944: LD_INT 8
47946: PUSH
47947: FOR_TO
47948: IFFALSE 47996
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
47950: LD_OWVAR 2
47954: PUSH
47955: LD_VAR 0 1
47959: NONEQUAL
47960: PUSH
47961: LD_OWVAR 2
47965: PPUSH
47966: LD_VAR 0 1
47970: PPUSH
47971: CALL_OW 81
47975: PUSH
47976: LD_INT 2
47978: EQUAL
47979: AND
47980: IFFALSE 47994
// begin side := i ;
47982: LD_ADDR_VAR 0 3
47986: PUSH
47987: LD_VAR 0 1
47991: ST_TO_ADDR
// break ;
47992: GO 47996
// end ;
47994: GO 47947
47996: POP
47997: POP
// if not side then
47998: LD_VAR 0 3
48002: NOT
48003: IFFALSE 48007
// exit ;
48005: GO 48052
// for i := 1 to tmp do
48007: LD_ADDR_VAR 0 1
48011: PUSH
48012: DOUBLE
48013: LD_INT 1
48015: DEC
48016: ST_TO_ADDR
48017: LD_VAR 0 2
48021: PUSH
48022: FOR_TO
48023: IFFALSE 48050
// if Prob ( 60 ) then
48025: LD_INT 60
48027: PPUSH
48028: CALL_OW 13
48032: IFFALSE 48048
// SetSide ( i , side ) ;
48034: LD_VAR 0 1
48038: PPUSH
48039: LD_VAR 0 3
48043: PPUSH
48044: CALL_OW 235
48048: GO 48022
48050: POP
48051: POP
// end ;
48052: PPOPN 3
48054: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
48055: LD_EXP 36
48059: PUSH
48060: LD_EXP 49
48064: AND
48065: IFFALSE 48184
48067: GO 48069
48069: DISABLE
48070: LD_INT 0
48072: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
48073: LD_ADDR_VAR 0 1
48077: PUSH
48078: LD_INT 22
48080: PUSH
48081: LD_OWVAR 2
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 21
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 3
48102: PUSH
48103: LD_INT 23
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: LIST
48121: PPUSH
48122: CALL_OW 69
48126: PUSH
48127: FOR_IN
48128: IFFALSE 48182
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
48130: LD_VAR 0 1
48134: PPUSH
48135: CALL_OW 257
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: LD_INT 2
48145: PUSH
48146: LD_INT 3
48148: PUSH
48149: LD_INT 4
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: IN
48158: IFFALSE 48180
// SetClass ( un , rand ( 1 , 4 ) ) ;
48160: LD_VAR 0 1
48164: PPUSH
48165: LD_INT 1
48167: PPUSH
48168: LD_INT 4
48170: PPUSH
48171: CALL_OW 12
48175: PPUSH
48176: CALL_OW 336
48180: GO 48127
48182: POP
48183: POP
// end ;
48184: PPOPN 1
48186: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
48187: LD_EXP 36
48191: PUSH
48192: LD_EXP 48
48196: AND
48197: IFFALSE 48276
48199: GO 48201
48201: DISABLE
48202: LD_INT 0
48204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
48205: LD_ADDR_VAR 0 1
48209: PUSH
48210: LD_INT 22
48212: PUSH
48213: LD_OWVAR 2
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 21
48224: PUSH
48225: LD_INT 3
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PPUSH
48236: CALL_OW 69
48240: ST_TO_ADDR
// if not tmp then
48241: LD_VAR 0 1
48245: NOT
48246: IFFALSE 48250
// exit ;
48248: GO 48276
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
48250: LD_VAR 0 1
48254: PUSH
48255: LD_INT 1
48257: PPUSH
48258: LD_VAR 0 1
48262: PPUSH
48263: CALL_OW 12
48267: ARRAY
48268: PPUSH
48269: LD_INT 100
48271: PPUSH
48272: CALL_OW 234
// end ;
48276: PPOPN 1
48278: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
48279: LD_EXP 36
48283: PUSH
48284: LD_EXP 50
48288: AND
48289: IFFALSE 48387
48291: GO 48293
48293: DISABLE
48294: LD_INT 0
48296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
48297: LD_ADDR_VAR 0 1
48301: PUSH
48302: LD_INT 22
48304: PUSH
48305: LD_OWVAR 2
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 21
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PPUSH
48328: CALL_OW 69
48332: ST_TO_ADDR
// if not tmp then
48333: LD_VAR 0 1
48337: NOT
48338: IFFALSE 48342
// exit ;
48340: GO 48387
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
48342: LD_VAR 0 1
48346: PUSH
48347: LD_INT 1
48349: PPUSH
48350: LD_VAR 0 1
48354: PPUSH
48355: CALL_OW 12
48359: ARRAY
48360: PPUSH
48361: LD_INT 1
48363: PPUSH
48364: LD_INT 4
48366: PPUSH
48367: CALL_OW 12
48371: PPUSH
48372: LD_INT 3000
48374: PPUSH
48375: LD_INT 9000
48377: PPUSH
48378: CALL_OW 12
48382: PPUSH
48383: CALL_OW 492
// end ;
48387: PPOPN 1
48389: END
// every 0 0$1 trigger StreamModeActive and sDepot do
48390: LD_EXP 36
48394: PUSH
48395: LD_EXP 51
48399: AND
48400: IFFALSE 48420
48402: GO 48404
48404: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
48405: LD_INT 1
48407: PPUSH
48408: LD_OWVAR 2
48412: PPUSH
48413: LD_INT 0
48415: PPUSH
48416: CALL_OW 324
48420: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
48421: LD_EXP 36
48425: PUSH
48426: LD_EXP 52
48430: AND
48431: IFFALSE 48514
48433: GO 48435
48435: DISABLE
48436: LD_INT 0
48438: PPUSH
48439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
48440: LD_ADDR_VAR 0 2
48444: PUSH
48445: LD_INT 22
48447: PUSH
48448: LD_OWVAR 2
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 21
48459: PUSH
48460: LD_INT 3
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PPUSH
48471: CALL_OW 69
48475: ST_TO_ADDR
// if not tmp then
48476: LD_VAR 0 2
48480: NOT
48481: IFFALSE 48485
// exit ;
48483: GO 48514
// for i in tmp do
48485: LD_ADDR_VAR 0 1
48489: PUSH
48490: LD_VAR 0 2
48494: PUSH
48495: FOR_IN
48496: IFFALSE 48512
// SetBLevel ( i , 10 ) ;
48498: LD_VAR 0 1
48502: PPUSH
48503: LD_INT 10
48505: PPUSH
48506: CALL_OW 241
48510: GO 48495
48512: POP
48513: POP
// end ;
48514: PPOPN 2
48516: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
48517: LD_EXP 36
48521: PUSH
48522: LD_EXP 53
48526: AND
48527: IFFALSE 48638
48529: GO 48531
48531: DISABLE
48532: LD_INT 0
48534: PPUSH
48535: PPUSH
48536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
48537: LD_ADDR_VAR 0 3
48541: PUSH
48542: LD_INT 22
48544: PUSH
48545: LD_OWVAR 2
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 25
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PPUSH
48568: CALL_OW 69
48572: ST_TO_ADDR
// if not tmp then
48573: LD_VAR 0 3
48577: NOT
48578: IFFALSE 48582
// exit ;
48580: GO 48638
// un := tmp [ rand ( 1 , tmp ) ] ;
48582: LD_ADDR_VAR 0 2
48586: PUSH
48587: LD_VAR 0 3
48591: PUSH
48592: LD_INT 1
48594: PPUSH
48595: LD_VAR 0 3
48599: PPUSH
48600: CALL_OW 12
48604: ARRAY
48605: ST_TO_ADDR
// if Crawls ( un ) then
48606: LD_VAR 0 2
48610: PPUSH
48611: CALL_OW 318
48615: IFFALSE 48626
// ComWalk ( un ) ;
48617: LD_VAR 0 2
48621: PPUSH
48622: CALL_OW 138
// SetClass ( un , class_sniper ) ;
48626: LD_VAR 0 2
48630: PPUSH
48631: LD_INT 5
48633: PPUSH
48634: CALL_OW 336
// end ;
48638: PPOPN 3
48640: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
48641: LD_EXP 36
48645: PUSH
48646: LD_EXP 54
48650: AND
48651: PUSH
48652: LD_OWVAR 67
48656: PUSH
48657: LD_INT 4
48659: LESS
48660: AND
48661: IFFALSE 48680
48663: GO 48665
48665: DISABLE
// begin Difficulty := Difficulty + 1 ;
48666: LD_ADDR_OWVAR 67
48670: PUSH
48671: LD_OWVAR 67
48675: PUSH
48676: LD_INT 1
48678: PLUS
48679: ST_TO_ADDR
// end ;
48680: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
48681: LD_EXP 36
48685: PUSH
48686: LD_EXP 55
48690: AND
48691: IFFALSE 48794
48693: GO 48695
48695: DISABLE
48696: LD_INT 0
48698: PPUSH
// begin for i := 1 to 5 do
48699: LD_ADDR_VAR 0 1
48703: PUSH
48704: DOUBLE
48705: LD_INT 1
48707: DEC
48708: ST_TO_ADDR
48709: LD_INT 5
48711: PUSH
48712: FOR_TO
48713: IFFALSE 48792
// begin uc_nation := nation_nature ;
48715: LD_ADDR_OWVAR 21
48719: PUSH
48720: LD_INT 0
48722: ST_TO_ADDR
// uc_side := 0 ;
48723: LD_ADDR_OWVAR 20
48727: PUSH
48728: LD_INT 0
48730: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
48731: LD_ADDR_OWVAR 29
48735: PUSH
48736: LD_INT 12
48738: PUSH
48739: LD_INT 12
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: ST_TO_ADDR
// hc_agressivity := 20 ;
48746: LD_ADDR_OWVAR 35
48750: PUSH
48751: LD_INT 20
48753: ST_TO_ADDR
// hc_class := class_tiger ;
48754: LD_ADDR_OWVAR 28
48758: PUSH
48759: LD_INT 14
48761: ST_TO_ADDR
// hc_gallery :=  ;
48762: LD_ADDR_OWVAR 33
48766: PUSH
48767: LD_STRING 
48769: ST_TO_ADDR
// hc_name :=  ;
48770: LD_ADDR_OWVAR 26
48774: PUSH
48775: LD_STRING 
48777: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
48778: CALL_OW 44
48782: PPUSH
48783: LD_INT 0
48785: PPUSH
48786: CALL_OW 51
// end ;
48790: GO 48712
48792: POP
48793: POP
// end ;
48794: PPOPN 1
48796: END
// every 0 0$1 trigger StreamModeActive and sBomb do
48797: LD_EXP 36
48801: PUSH
48802: LD_EXP 56
48806: AND
48807: IFFALSE 48816
48809: GO 48811
48811: DISABLE
// StreamSibBomb ;
48812: CALL 48817 0 0
48816: END
// export function StreamSibBomb ; var i , x , y ; begin
48817: LD_INT 0
48819: PPUSH
48820: PPUSH
48821: PPUSH
48822: PPUSH
// result := false ;
48823: LD_ADDR_VAR 0 1
48827: PUSH
48828: LD_INT 0
48830: ST_TO_ADDR
// for i := 1 to 16 do
48831: LD_ADDR_VAR 0 2
48835: PUSH
48836: DOUBLE
48837: LD_INT 1
48839: DEC
48840: ST_TO_ADDR
48841: LD_INT 16
48843: PUSH
48844: FOR_TO
48845: IFFALSE 49044
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
48847: LD_ADDR_VAR 0 3
48851: PUSH
48852: LD_INT 10
48854: PUSH
48855: LD_INT 20
48857: PUSH
48858: LD_INT 30
48860: PUSH
48861: LD_INT 40
48863: PUSH
48864: LD_INT 50
48866: PUSH
48867: LD_INT 60
48869: PUSH
48870: LD_INT 70
48872: PUSH
48873: LD_INT 80
48875: PUSH
48876: LD_INT 90
48878: PUSH
48879: LD_INT 100
48881: PUSH
48882: LD_INT 110
48884: PUSH
48885: LD_INT 120
48887: PUSH
48888: LD_INT 130
48890: PUSH
48891: LD_INT 140
48893: PUSH
48894: LD_INT 150
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: PPUSH
48917: LD_INT 15
48919: PPUSH
48920: CALL_OW 12
48924: ARRAY
48925: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
48926: LD_ADDR_VAR 0 4
48930: PUSH
48931: LD_INT 10
48933: PUSH
48934: LD_INT 20
48936: PUSH
48937: LD_INT 30
48939: PUSH
48940: LD_INT 40
48942: PUSH
48943: LD_INT 50
48945: PUSH
48946: LD_INT 60
48948: PUSH
48949: LD_INT 70
48951: PUSH
48952: LD_INT 80
48954: PUSH
48955: LD_INT 90
48957: PUSH
48958: LD_INT 100
48960: PUSH
48961: LD_INT 110
48963: PUSH
48964: LD_INT 120
48966: PUSH
48967: LD_INT 130
48969: PUSH
48970: LD_INT 140
48972: PUSH
48973: LD_INT 150
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: PPUSH
48996: LD_INT 15
48998: PPUSH
48999: CALL_OW 12
49003: ARRAY
49004: ST_TO_ADDR
// if ValidHex ( x , y ) then
49005: LD_VAR 0 3
49009: PPUSH
49010: LD_VAR 0 4
49014: PPUSH
49015: CALL_OW 488
49019: IFFALSE 49042
// begin result := [ x , y ] ;
49021: LD_ADDR_VAR 0 1
49025: PUSH
49026: LD_VAR 0 3
49030: PUSH
49031: LD_VAR 0 4
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: ST_TO_ADDR
// break ;
49040: GO 49044
// end ; end ;
49042: GO 48844
49044: POP
49045: POP
// if result then
49046: LD_VAR 0 1
49050: IFFALSE 49110
// begin ToLua ( playSibBomb() ) ;
49052: LD_STRING playSibBomb()
49054: PPUSH
49055: CALL_OW 559
// wait ( 0 0$14 ) ;
49059: LD_INT 490
49061: PPUSH
49062: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
49066: LD_VAR 0 1
49070: PUSH
49071: LD_INT 1
49073: ARRAY
49074: PPUSH
49075: LD_VAR 0 1
49079: PUSH
49080: LD_INT 2
49082: ARRAY
49083: PPUSH
49084: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
49088: LD_VAR 0 1
49092: PUSH
49093: LD_INT 1
49095: ARRAY
49096: PPUSH
49097: LD_VAR 0 1
49101: PUSH
49102: LD_INT 2
49104: ARRAY
49105: PPUSH
49106: CALL_OW 429
// end ; end ;
49110: LD_VAR 0 1
49114: RET
// every 0 0$1 trigger StreamModeActive and sReset do
49115: LD_EXP 36
49119: PUSH
49120: LD_EXP 58
49124: AND
49125: IFFALSE 49137
49127: GO 49129
49129: DISABLE
// YouLost (  ) ;
49130: LD_STRING 
49132: PPUSH
49133: CALL_OW 104
49137: END
// every 0 0$1 trigger StreamModeActive and sFog do
49138: LD_EXP 36
49142: PUSH
49143: LD_EXP 57
49147: AND
49148: IFFALSE 49162
49150: GO 49152
49152: DISABLE
// FogOff ( your_side ) ;
49153: LD_OWVAR 2
49157: PPUSH
49158: CALL_OW 344
49162: END
// every 0 0$1 trigger StreamModeActive and sSun do
49163: LD_EXP 36
49167: PUSH
49168: LD_EXP 59
49172: AND
49173: IFFALSE 49201
49175: GO 49177
49177: DISABLE
// begin solar_recharge_percent := 0 ;
49178: LD_ADDR_OWVAR 79
49182: PUSH
49183: LD_INT 0
49185: ST_TO_ADDR
// wait ( 5 5$00 ) ;
49186: LD_INT 10500
49188: PPUSH
49189: CALL_OW 67
// solar_recharge_percent := 100 ;
49193: LD_ADDR_OWVAR 79
49197: PUSH
49198: LD_INT 100
49200: ST_TO_ADDR
// end ;
49201: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
49202: LD_EXP 36
49206: PUSH
49207: LD_EXP 60
49211: AND
49212: IFFALSE 49451
49214: GO 49216
49216: DISABLE
49217: LD_INT 0
49219: PPUSH
49220: PPUSH
49221: PPUSH
// begin tmp := [ ] ;
49222: LD_ADDR_VAR 0 3
49226: PUSH
49227: EMPTY
49228: ST_TO_ADDR
// for i := 1 to 6 do
49229: LD_ADDR_VAR 0 1
49233: PUSH
49234: DOUBLE
49235: LD_INT 1
49237: DEC
49238: ST_TO_ADDR
49239: LD_INT 6
49241: PUSH
49242: FOR_TO
49243: IFFALSE 49348
// begin uc_nation := nation_nature ;
49245: LD_ADDR_OWVAR 21
49249: PUSH
49250: LD_INT 0
49252: ST_TO_ADDR
// uc_side := 0 ;
49253: LD_ADDR_OWVAR 20
49257: PUSH
49258: LD_INT 0
49260: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49261: LD_ADDR_OWVAR 29
49265: PUSH
49266: LD_INT 12
49268: PUSH
49269: LD_INT 12
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: ST_TO_ADDR
// hc_agressivity := 20 ;
49276: LD_ADDR_OWVAR 35
49280: PUSH
49281: LD_INT 20
49283: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
49284: LD_ADDR_OWVAR 28
49288: PUSH
49289: LD_INT 17
49291: ST_TO_ADDR
// hc_gallery :=  ;
49292: LD_ADDR_OWVAR 33
49296: PUSH
49297: LD_STRING 
49299: ST_TO_ADDR
// hc_name :=  ;
49300: LD_ADDR_OWVAR 26
49304: PUSH
49305: LD_STRING 
49307: ST_TO_ADDR
// un := CreateHuman ;
49308: LD_ADDR_VAR 0 2
49312: PUSH
49313: CALL_OW 44
49317: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
49318: LD_VAR 0 2
49322: PPUSH
49323: LD_INT 1
49325: PPUSH
49326: CALL_OW 51
// tmp := tmp ^ un ;
49330: LD_ADDR_VAR 0 3
49334: PUSH
49335: LD_VAR 0 3
49339: PUSH
49340: LD_VAR 0 2
49344: ADD
49345: ST_TO_ADDR
// end ;
49346: GO 49242
49348: POP
49349: POP
// repeat wait ( 0 0$1 ) ;
49350: LD_INT 35
49352: PPUSH
49353: CALL_OW 67
// for un in tmp do
49357: LD_ADDR_VAR 0 2
49361: PUSH
49362: LD_VAR 0 3
49366: PUSH
49367: FOR_IN
49368: IFFALSE 49442
// begin if IsDead ( un ) then
49370: LD_VAR 0 2
49374: PPUSH
49375: CALL_OW 301
49379: IFFALSE 49399
// begin tmp := tmp diff un ;
49381: LD_ADDR_VAR 0 3
49385: PUSH
49386: LD_VAR 0 3
49390: PUSH
49391: LD_VAR 0 2
49395: DIFF
49396: ST_TO_ADDR
// continue ;
49397: GO 49367
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
49399: LD_VAR 0 2
49403: PPUSH
49404: LD_INT 3
49406: PUSH
49407: LD_INT 22
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PPUSH
49421: CALL_OW 69
49425: PPUSH
49426: LD_VAR 0 2
49430: PPUSH
49431: CALL_OW 74
49435: PPUSH
49436: CALL_OW 115
// end ;
49440: GO 49367
49442: POP
49443: POP
// until not tmp ;
49444: LD_VAR 0 3
49448: NOT
49449: IFFALSE 49350
// end ;
49451: PPOPN 3
49453: END
// every 0 0$1 trigger StreamModeActive and sTroll do
49454: LD_EXP 36
49458: PUSH
49459: LD_EXP 61
49463: AND
49464: IFFALSE 49518
49466: GO 49468
49468: DISABLE
// begin ToLua ( displayTroll(); ) ;
49469: LD_STRING displayTroll();
49471: PPUSH
49472: CALL_OW 559
// wait ( 3 3$00 ) ;
49476: LD_INT 6300
49478: PPUSH
49479: CALL_OW 67
// ToLua ( hideTroll(); ) ;
49483: LD_STRING hideTroll();
49485: PPUSH
49486: CALL_OW 559
// wait ( 1 1$00 ) ;
49490: LD_INT 2100
49492: PPUSH
49493: CALL_OW 67
// ToLua ( displayTroll(); ) ;
49497: LD_STRING displayTroll();
49499: PPUSH
49500: CALL_OW 559
// wait ( 1 1$00 ) ;
49504: LD_INT 2100
49506: PPUSH
49507: CALL_OW 67
// ToLua ( hideTroll(); ) ;
49511: LD_STRING hideTroll();
49513: PPUSH
49514: CALL_OW 559
// end ;
49518: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
49519: LD_EXP 36
49523: PUSH
49524: LD_EXP 62
49528: AND
49529: IFFALSE 49592
49531: GO 49533
49533: DISABLE
49534: LD_INT 0
49536: PPUSH
// begin p := 0 ;
49537: LD_ADDR_VAR 0 1
49541: PUSH
49542: LD_INT 0
49544: ST_TO_ADDR
// repeat game_speed := 1 ;
49545: LD_ADDR_OWVAR 65
49549: PUSH
49550: LD_INT 1
49552: ST_TO_ADDR
// wait ( 0 0$1 ) ;
49553: LD_INT 35
49555: PPUSH
49556: CALL_OW 67
// p := p + 1 ;
49560: LD_ADDR_VAR 0 1
49564: PUSH
49565: LD_VAR 0 1
49569: PUSH
49570: LD_INT 1
49572: PLUS
49573: ST_TO_ADDR
// until p >= 60 ;
49574: LD_VAR 0 1
49578: PUSH
49579: LD_INT 60
49581: GREATEREQUAL
49582: IFFALSE 49545
// game_speed := 4 ;
49584: LD_ADDR_OWVAR 65
49588: PUSH
49589: LD_INT 4
49591: ST_TO_ADDR
// end ;
49592: PPOPN 1
49594: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
49595: LD_EXP 36
49599: PUSH
49600: LD_EXP 63
49604: AND
49605: IFFALSE 49751
49607: GO 49609
49609: DISABLE
49610: LD_INT 0
49612: PPUSH
49613: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49614: LD_ADDR_VAR 0 1
49618: PUSH
49619: LD_INT 22
49621: PUSH
49622: LD_OWVAR 2
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: LD_INT 30
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 30
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: LIST
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PPUSH
49663: CALL_OW 69
49667: ST_TO_ADDR
// if not depot then
49668: LD_VAR 0 1
49672: NOT
49673: IFFALSE 49677
// exit ;
49675: GO 49751
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
49677: LD_ADDR_VAR 0 2
49681: PUSH
49682: LD_VAR 0 1
49686: PUSH
49687: LD_INT 1
49689: PPUSH
49690: LD_VAR 0 1
49694: PPUSH
49695: CALL_OW 12
49699: ARRAY
49700: PPUSH
49701: CALL_OW 274
49705: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
49706: LD_VAR 0 2
49710: PPUSH
49711: LD_INT 1
49713: PPUSH
49714: LD_INT 0
49716: PPUSH
49717: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
49721: LD_VAR 0 2
49725: PPUSH
49726: LD_INT 2
49728: PPUSH
49729: LD_INT 0
49731: PPUSH
49732: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
49736: LD_VAR 0 2
49740: PPUSH
49741: LD_INT 3
49743: PPUSH
49744: LD_INT 0
49746: PPUSH
49747: CALL_OW 277
// end ;
49751: PPOPN 2
49753: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
49754: LD_EXP 36
49758: PUSH
49759: LD_EXP 64
49763: AND
49764: IFFALSE 49861
49766: GO 49768
49768: DISABLE
49769: LD_INT 0
49771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
49772: LD_ADDR_VAR 0 1
49776: PUSH
49777: LD_INT 22
49779: PUSH
49780: LD_OWVAR 2
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 21
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 3
49801: PUSH
49802: LD_INT 23
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: LIST
49820: PPUSH
49821: CALL_OW 69
49825: ST_TO_ADDR
// if not tmp then
49826: LD_VAR 0 1
49830: NOT
49831: IFFALSE 49835
// exit ;
49833: GO 49861
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
49835: LD_VAR 0 1
49839: PUSH
49840: LD_INT 1
49842: PPUSH
49843: LD_VAR 0 1
49847: PPUSH
49848: CALL_OW 12
49852: ARRAY
49853: PPUSH
49854: LD_INT 200
49856: PPUSH
49857: CALL_OW 234
// end ;
49861: PPOPN 1
49863: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
49864: LD_EXP 36
49868: PUSH
49869: LD_EXP 65
49873: AND
49874: IFFALSE 49953
49876: GO 49878
49878: DISABLE
49879: LD_INT 0
49881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
49882: LD_ADDR_VAR 0 1
49886: PUSH
49887: LD_INT 22
49889: PUSH
49890: LD_OWVAR 2
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 21
49901: PUSH
49902: LD_INT 2
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PPUSH
49913: CALL_OW 69
49917: ST_TO_ADDR
// if not tmp then
49918: LD_VAR 0 1
49922: NOT
49923: IFFALSE 49927
// exit ;
49925: GO 49953
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
49927: LD_VAR 0 1
49931: PUSH
49932: LD_INT 1
49934: PPUSH
49935: LD_VAR 0 1
49939: PPUSH
49940: CALL_OW 12
49944: ARRAY
49945: PPUSH
49946: LD_INT 60
49948: PPUSH
49949: CALL_OW 234
// end ;
49953: PPOPN 1
49955: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
49956: LD_EXP 36
49960: PUSH
49961: LD_EXP 66
49965: AND
49966: IFFALSE 50065
49968: GO 49970
49970: DISABLE
49971: LD_INT 0
49973: PPUSH
49974: PPUSH
// begin enable ;
49975: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
49976: LD_ADDR_VAR 0 1
49980: PUSH
49981: LD_INT 22
49983: PUSH
49984: LD_OWVAR 2
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 61
49995: PUSH
49996: EMPTY
49997: LIST
49998: PUSH
49999: LD_INT 33
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: LIST
50013: PPUSH
50014: CALL_OW 69
50018: ST_TO_ADDR
// if not tmp then
50019: LD_VAR 0 1
50023: NOT
50024: IFFALSE 50028
// exit ;
50026: GO 50065
// for i in tmp do
50028: LD_ADDR_VAR 0 2
50032: PUSH
50033: LD_VAR 0 1
50037: PUSH
50038: FOR_IN
50039: IFFALSE 50063
// if IsControledBy ( i ) then
50041: LD_VAR 0 2
50045: PPUSH
50046: CALL_OW 312
50050: IFFALSE 50061
// ComUnlink ( i ) ;
50052: LD_VAR 0 2
50056: PPUSH
50057: CALL_OW 136
50061: GO 50038
50063: POP
50064: POP
// end ;
50065: PPOPN 2
50067: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
50068: LD_EXP 36
50072: PUSH
50073: LD_EXP 67
50077: AND
50078: IFFALSE 50218
50080: GO 50082
50082: DISABLE
50083: LD_INT 0
50085: PPUSH
50086: PPUSH
// begin ToLua ( displayPowell(); ) ;
50087: LD_STRING displayPowell();
50089: PPUSH
50090: CALL_OW 559
// uc_side := 0 ;
50094: LD_ADDR_OWVAR 20
50098: PUSH
50099: LD_INT 0
50101: ST_TO_ADDR
// uc_nation := 2 ;
50102: LD_ADDR_OWVAR 21
50106: PUSH
50107: LD_INT 2
50109: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
50110: LD_ADDR_OWVAR 37
50114: PUSH
50115: LD_INT 14
50117: ST_TO_ADDR
// vc_engine := engine_siberite ;
50118: LD_ADDR_OWVAR 39
50122: PUSH
50123: LD_INT 3
50125: ST_TO_ADDR
// vc_control := control_apeman ;
50126: LD_ADDR_OWVAR 38
50130: PUSH
50131: LD_INT 5
50133: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
50134: LD_ADDR_OWVAR 40
50138: PUSH
50139: LD_INT 29
50141: ST_TO_ADDR
// un := CreateVehicle ;
50142: LD_ADDR_VAR 0 2
50146: PUSH
50147: CALL_OW 45
50151: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
50152: LD_VAR 0 2
50156: PPUSH
50157: LD_INT 1
50159: PPUSH
50160: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
50164: LD_INT 35
50166: PPUSH
50167: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
50171: LD_VAR 0 2
50175: PPUSH
50176: LD_INT 22
50178: PUSH
50179: LD_OWVAR 2
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PPUSH
50188: CALL_OW 69
50192: PPUSH
50193: LD_VAR 0 2
50197: PPUSH
50198: CALL_OW 74
50202: PPUSH
50203: CALL_OW 115
// until IsDead ( un ) ;
50207: LD_VAR 0 2
50211: PPUSH
50212: CALL_OW 301
50216: IFFALSE 50164
// end ;
50218: PPOPN 2
50220: END
// every 0 0$1 trigger StreamModeActive and sStu do
50221: LD_EXP 36
50225: PUSH
50226: LD_EXP 75
50230: AND
50231: IFFALSE 50247
50233: GO 50235
50235: DISABLE
// begin ToLua ( displayStucuk(); ) ;
50236: LD_STRING displayStucuk();
50238: PPUSH
50239: CALL_OW 559
// ResetFog ;
50243: CALL_OW 335
// end ;
50247: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
50248: LD_EXP 36
50252: PUSH
50253: LD_EXP 68
50257: AND
50258: IFFALSE 50399
50260: GO 50262
50262: DISABLE
50263: LD_INT 0
50265: PPUSH
50266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
50267: LD_ADDR_VAR 0 2
50271: PUSH
50272: LD_INT 22
50274: PUSH
50275: LD_OWVAR 2
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 21
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PPUSH
50298: CALL_OW 69
50302: ST_TO_ADDR
// if not tmp then
50303: LD_VAR 0 2
50307: NOT
50308: IFFALSE 50312
// exit ;
50310: GO 50399
// un := tmp [ rand ( 1 , tmp ) ] ;
50312: LD_ADDR_VAR 0 1
50316: PUSH
50317: LD_VAR 0 2
50321: PUSH
50322: LD_INT 1
50324: PPUSH
50325: LD_VAR 0 2
50329: PPUSH
50330: CALL_OW 12
50334: ARRAY
50335: ST_TO_ADDR
// SetSide ( un , 0 ) ;
50336: LD_VAR 0 1
50340: PPUSH
50341: LD_INT 0
50343: PPUSH
50344: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
50348: LD_VAR 0 1
50352: PPUSH
50353: LD_OWVAR 3
50357: PUSH
50358: LD_VAR 0 1
50362: DIFF
50363: PPUSH
50364: LD_VAR 0 1
50368: PPUSH
50369: CALL_OW 74
50373: PPUSH
50374: CALL_OW 115
// wait ( 0 0$20 ) ;
50378: LD_INT 700
50380: PPUSH
50381: CALL_OW 67
// SetSide ( un , your_side ) ;
50385: LD_VAR 0 1
50389: PPUSH
50390: LD_OWVAR 2
50394: PPUSH
50395: CALL_OW 235
// end ;
50399: PPOPN 2
50401: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
50402: LD_EXP 36
50406: PUSH
50407: LD_EXP 69
50411: AND
50412: IFFALSE 50518
50414: GO 50416
50416: DISABLE
50417: LD_INT 0
50419: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50420: LD_ADDR_VAR 0 1
50424: PUSH
50425: LD_INT 22
50427: PUSH
50428: LD_OWVAR 2
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 2
50439: PUSH
50440: LD_INT 30
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 30
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: LIST
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PPUSH
50469: CALL_OW 69
50473: ST_TO_ADDR
// if not depot then
50474: LD_VAR 0 1
50478: NOT
50479: IFFALSE 50483
// exit ;
50481: GO 50518
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
50483: LD_VAR 0 1
50487: PUSH
50488: LD_INT 1
50490: ARRAY
50491: PPUSH
50492: CALL_OW 250
50496: PPUSH
50497: LD_VAR 0 1
50501: PUSH
50502: LD_INT 1
50504: ARRAY
50505: PPUSH
50506: CALL_OW 251
50510: PPUSH
50511: LD_INT 70
50513: PPUSH
50514: CALL_OW 495
// end ;
50518: PPOPN 1
50520: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
50521: LD_EXP 36
50525: PUSH
50526: LD_EXP 70
50530: AND
50531: IFFALSE 50742
50533: GO 50535
50535: DISABLE
50536: LD_INT 0
50538: PPUSH
50539: PPUSH
50540: PPUSH
50541: PPUSH
50542: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
50543: LD_ADDR_VAR 0 5
50547: PUSH
50548: LD_INT 22
50550: PUSH
50551: LD_OWVAR 2
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 21
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PPUSH
50574: CALL_OW 69
50578: ST_TO_ADDR
// if not tmp then
50579: LD_VAR 0 5
50583: NOT
50584: IFFALSE 50588
// exit ;
50586: GO 50742
// for i in tmp do
50588: LD_ADDR_VAR 0 1
50592: PUSH
50593: LD_VAR 0 5
50597: PUSH
50598: FOR_IN
50599: IFFALSE 50740
// begin d := rand ( 0 , 5 ) ;
50601: LD_ADDR_VAR 0 4
50605: PUSH
50606: LD_INT 0
50608: PPUSH
50609: LD_INT 5
50611: PPUSH
50612: CALL_OW 12
50616: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
50617: LD_ADDR_VAR 0 2
50621: PUSH
50622: LD_VAR 0 1
50626: PPUSH
50627: CALL_OW 250
50631: PPUSH
50632: LD_VAR 0 4
50636: PPUSH
50637: LD_INT 3
50639: PPUSH
50640: LD_INT 12
50642: PPUSH
50643: CALL_OW 12
50647: PPUSH
50648: CALL_OW 272
50652: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
50653: LD_ADDR_VAR 0 3
50657: PUSH
50658: LD_VAR 0 1
50662: PPUSH
50663: CALL_OW 251
50667: PPUSH
50668: LD_VAR 0 4
50672: PPUSH
50673: LD_INT 3
50675: PPUSH
50676: LD_INT 12
50678: PPUSH
50679: CALL_OW 12
50683: PPUSH
50684: CALL_OW 273
50688: ST_TO_ADDR
// if ValidHex ( x , y ) then
50689: LD_VAR 0 2
50693: PPUSH
50694: LD_VAR 0 3
50698: PPUSH
50699: CALL_OW 488
50703: IFFALSE 50738
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
50705: LD_VAR 0 1
50709: PPUSH
50710: LD_VAR 0 2
50714: PPUSH
50715: LD_VAR 0 3
50719: PPUSH
50720: LD_INT 3
50722: PPUSH
50723: LD_INT 6
50725: PPUSH
50726: CALL_OW 12
50730: PPUSH
50731: LD_INT 1
50733: PPUSH
50734: CALL_OW 483
// end ;
50738: GO 50598
50740: POP
50741: POP
// end ;
50742: PPOPN 5
50744: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
50745: LD_EXP 36
50749: PUSH
50750: LD_EXP 71
50754: AND
50755: IFFALSE 50849
50757: GO 50759
50759: DISABLE
50760: LD_INT 0
50762: PPUSH
50763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
50764: LD_ADDR_VAR 0 2
50768: PUSH
50769: LD_INT 22
50771: PUSH
50772: LD_OWVAR 2
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 32
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 21
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: LIST
50805: PPUSH
50806: CALL_OW 69
50810: ST_TO_ADDR
// if not tmp then
50811: LD_VAR 0 2
50815: NOT
50816: IFFALSE 50820
// exit ;
50818: GO 50849
// for i in tmp do
50820: LD_ADDR_VAR 0 1
50824: PUSH
50825: LD_VAR 0 2
50829: PUSH
50830: FOR_IN
50831: IFFALSE 50847
// SetFuel ( i , 0 ) ;
50833: LD_VAR 0 1
50837: PPUSH
50838: LD_INT 0
50840: PPUSH
50841: CALL_OW 240
50845: GO 50830
50847: POP
50848: POP
// end ;
50849: PPOPN 2
50851: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
50852: LD_EXP 36
50856: PUSH
50857: LD_EXP 72
50861: AND
50862: IFFALSE 50928
50864: GO 50866
50866: DISABLE
50867: LD_INT 0
50869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
50870: LD_ADDR_VAR 0 1
50874: PUSH
50875: LD_INT 22
50877: PUSH
50878: LD_OWVAR 2
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 30
50889: PUSH
50890: LD_INT 29
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PPUSH
50901: CALL_OW 69
50905: ST_TO_ADDR
// if not tmp then
50906: LD_VAR 0 1
50910: NOT
50911: IFFALSE 50915
// exit ;
50913: GO 50928
// DestroyUnit ( tmp [ 1 ] ) ;
50915: LD_VAR 0 1
50919: PUSH
50920: LD_INT 1
50922: ARRAY
50923: PPUSH
50924: CALL_OW 65
// end ;
50928: PPOPN 1
50930: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
50931: LD_EXP 36
50935: PUSH
50936: LD_EXP 74
50940: AND
50941: IFFALSE 51070
50943: GO 50945
50945: DISABLE
50946: LD_INT 0
50948: PPUSH
// begin uc_side := 0 ;
50949: LD_ADDR_OWVAR 20
50953: PUSH
50954: LD_INT 0
50956: ST_TO_ADDR
// uc_nation := nation_arabian ;
50957: LD_ADDR_OWVAR 21
50961: PUSH
50962: LD_INT 2
50964: ST_TO_ADDR
// hc_gallery :=  ;
50965: LD_ADDR_OWVAR 33
50969: PUSH
50970: LD_STRING 
50972: ST_TO_ADDR
// hc_name :=  ;
50973: LD_ADDR_OWVAR 26
50977: PUSH
50978: LD_STRING 
50980: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
50981: LD_INT 1
50983: PPUSH
50984: LD_INT 11
50986: PPUSH
50987: LD_INT 10
50989: PPUSH
50990: CALL_OW 380
// un := CreateHuman ;
50994: LD_ADDR_VAR 0 1
50998: PUSH
50999: CALL_OW 44
51003: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
51004: LD_VAR 0 1
51008: PPUSH
51009: LD_INT 1
51011: PPUSH
51012: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
51016: LD_INT 35
51018: PPUSH
51019: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
51023: LD_VAR 0 1
51027: PPUSH
51028: LD_INT 22
51030: PUSH
51031: LD_OWVAR 2
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PPUSH
51040: CALL_OW 69
51044: PPUSH
51045: LD_VAR 0 1
51049: PPUSH
51050: CALL_OW 74
51054: PPUSH
51055: CALL_OW 115
// until IsDead ( un ) ;
51059: LD_VAR 0 1
51063: PPUSH
51064: CALL_OW 301
51068: IFFALSE 51016
// end ;
51070: PPOPN 1
51072: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
51073: LD_EXP 36
51077: PUSH
51078: LD_EXP 76
51082: AND
51083: IFFALSE 51095
51085: GO 51087
51087: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
51088: LD_STRING earthquake(getX(game), 0, 32)
51090: PPUSH
51091: CALL_OW 559
51095: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
51096: LD_EXP 36
51100: PUSH
51101: LD_EXP 77
51105: AND
51106: IFFALSE 51197
51108: GO 51110
51110: DISABLE
51111: LD_INT 0
51113: PPUSH
// begin enable ;
51114: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
51115: LD_ADDR_VAR 0 1
51119: PUSH
51120: LD_INT 22
51122: PUSH
51123: LD_OWVAR 2
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 21
51134: PUSH
51135: LD_INT 2
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 33
51144: PUSH
51145: LD_INT 3
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: LIST
51156: PPUSH
51157: CALL_OW 69
51161: ST_TO_ADDR
// if not tmp then
51162: LD_VAR 0 1
51166: NOT
51167: IFFALSE 51171
// exit ;
51169: GO 51197
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
51171: LD_VAR 0 1
51175: PUSH
51176: LD_INT 1
51178: PPUSH
51179: LD_VAR 0 1
51183: PPUSH
51184: CALL_OW 12
51188: ARRAY
51189: PPUSH
51190: LD_INT 1
51192: PPUSH
51193: CALL_OW 234
// end ;
51197: PPOPN 1
51199: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
51200: LD_EXP 36
51204: PUSH
51205: LD_EXP 78
51209: AND
51210: IFFALSE 51351
51212: GO 51214
51214: DISABLE
51215: LD_INT 0
51217: PPUSH
51218: PPUSH
51219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51220: LD_ADDR_VAR 0 3
51224: PUSH
51225: LD_INT 22
51227: PUSH
51228: LD_OWVAR 2
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 25
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PPUSH
51251: CALL_OW 69
51255: ST_TO_ADDR
// if not tmp then
51256: LD_VAR 0 3
51260: NOT
51261: IFFALSE 51265
// exit ;
51263: GO 51351
// un := tmp [ rand ( 1 , tmp ) ] ;
51265: LD_ADDR_VAR 0 2
51269: PUSH
51270: LD_VAR 0 3
51274: PUSH
51275: LD_INT 1
51277: PPUSH
51278: LD_VAR 0 3
51282: PPUSH
51283: CALL_OW 12
51287: ARRAY
51288: ST_TO_ADDR
// if Crawls ( un ) then
51289: LD_VAR 0 2
51293: PPUSH
51294: CALL_OW 318
51298: IFFALSE 51309
// ComWalk ( un ) ;
51300: LD_VAR 0 2
51304: PPUSH
51305: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
51309: LD_VAR 0 2
51313: PPUSH
51314: LD_INT 9
51316: PPUSH
51317: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
51321: LD_INT 28
51323: PPUSH
51324: LD_OWVAR 2
51328: PPUSH
51329: LD_INT 2
51331: PPUSH
51332: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
51336: LD_INT 29
51338: PPUSH
51339: LD_OWVAR 2
51343: PPUSH
51344: LD_INT 2
51346: PPUSH
51347: CALL_OW 322
// end ;
51351: PPOPN 3
51353: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
51354: LD_EXP 36
51358: PUSH
51359: LD_EXP 79
51363: AND
51364: IFFALSE 51475
51366: GO 51368
51368: DISABLE
51369: LD_INT 0
51371: PPUSH
51372: PPUSH
51373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51374: LD_ADDR_VAR 0 3
51378: PUSH
51379: LD_INT 22
51381: PUSH
51382: LD_OWVAR 2
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 25
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PPUSH
51405: CALL_OW 69
51409: ST_TO_ADDR
// if not tmp then
51410: LD_VAR 0 3
51414: NOT
51415: IFFALSE 51419
// exit ;
51417: GO 51475
// un := tmp [ rand ( 1 , tmp ) ] ;
51419: LD_ADDR_VAR 0 2
51423: PUSH
51424: LD_VAR 0 3
51428: PUSH
51429: LD_INT 1
51431: PPUSH
51432: LD_VAR 0 3
51436: PPUSH
51437: CALL_OW 12
51441: ARRAY
51442: ST_TO_ADDR
// if Crawls ( un ) then
51443: LD_VAR 0 2
51447: PPUSH
51448: CALL_OW 318
51452: IFFALSE 51463
// ComWalk ( un ) ;
51454: LD_VAR 0 2
51458: PPUSH
51459: CALL_OW 138
// SetClass ( un , class_mortar ) ;
51463: LD_VAR 0 2
51467: PPUSH
51468: LD_INT 8
51470: PPUSH
51471: CALL_OW 336
// end ;
51475: PPOPN 3
51477: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
51478: LD_EXP 36
51482: PUSH
51483: LD_EXP 80
51487: AND
51488: IFFALSE 51632
51490: GO 51492
51492: DISABLE
51493: LD_INT 0
51495: PPUSH
51496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
51497: LD_ADDR_VAR 0 2
51501: PUSH
51502: LD_INT 22
51504: PUSH
51505: LD_OWVAR 2
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 21
51516: PUSH
51517: LD_INT 2
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: LD_INT 34
51529: PUSH
51530: LD_INT 12
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 34
51539: PUSH
51540: LD_INT 51
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 34
51549: PUSH
51550: LD_INT 32
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: LIST
51567: PPUSH
51568: CALL_OW 69
51572: ST_TO_ADDR
// if not tmp then
51573: LD_VAR 0 2
51577: NOT
51578: IFFALSE 51582
// exit ;
51580: GO 51632
// for i in tmp do
51582: LD_ADDR_VAR 0 1
51586: PUSH
51587: LD_VAR 0 2
51591: PUSH
51592: FOR_IN
51593: IFFALSE 51630
// if GetCargo ( i , mat_artifact ) = 0 then
51595: LD_VAR 0 1
51599: PPUSH
51600: LD_INT 4
51602: PPUSH
51603: CALL_OW 289
51607: PUSH
51608: LD_INT 0
51610: EQUAL
51611: IFFALSE 51628
// SetCargo ( i , mat_siberit , 100 ) ;
51613: LD_VAR 0 1
51617: PPUSH
51618: LD_INT 3
51620: PPUSH
51621: LD_INT 100
51623: PPUSH
51624: CALL_OW 290
51628: GO 51592
51630: POP
51631: POP
// end ;
51632: PPOPN 2
51634: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
51635: LD_EXP 36
51639: PUSH
51640: LD_EXP 81
51644: AND
51645: IFFALSE 51828
51647: GO 51649
51649: DISABLE
51650: LD_INT 0
51652: PPUSH
51653: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
51654: LD_ADDR_VAR 0 2
51658: PUSH
51659: LD_INT 22
51661: PUSH
51662: LD_OWVAR 2
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PPUSH
51671: CALL_OW 69
51675: ST_TO_ADDR
// if not tmp then
51676: LD_VAR 0 2
51680: NOT
51681: IFFALSE 51685
// exit ;
51683: GO 51828
// for i := 1 to 2 do
51685: LD_ADDR_VAR 0 1
51689: PUSH
51690: DOUBLE
51691: LD_INT 1
51693: DEC
51694: ST_TO_ADDR
51695: LD_INT 2
51697: PUSH
51698: FOR_TO
51699: IFFALSE 51826
// begin uc_side := your_side ;
51701: LD_ADDR_OWVAR 20
51705: PUSH
51706: LD_OWVAR 2
51710: ST_TO_ADDR
// uc_nation := nation_american ;
51711: LD_ADDR_OWVAR 21
51715: PUSH
51716: LD_INT 1
51718: ST_TO_ADDR
// vc_chassis := us_morphling ;
51719: LD_ADDR_OWVAR 37
51723: PUSH
51724: LD_INT 5
51726: ST_TO_ADDR
// vc_engine := engine_siberite ;
51727: LD_ADDR_OWVAR 39
51731: PUSH
51732: LD_INT 3
51734: ST_TO_ADDR
// vc_control := control_computer ;
51735: LD_ADDR_OWVAR 38
51739: PUSH
51740: LD_INT 3
51742: ST_TO_ADDR
// vc_weapon := us_double_laser ;
51743: LD_ADDR_OWVAR 40
51747: PUSH
51748: LD_INT 10
51750: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
51751: LD_VAR 0 2
51755: PUSH
51756: LD_INT 1
51758: ARRAY
51759: PPUSH
51760: CALL_OW 310
51764: NOT
51765: IFFALSE 51812
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
51767: CALL_OW 45
51771: PPUSH
51772: LD_VAR 0 2
51776: PUSH
51777: LD_INT 1
51779: ARRAY
51780: PPUSH
51781: CALL_OW 250
51785: PPUSH
51786: LD_VAR 0 2
51790: PUSH
51791: LD_INT 1
51793: ARRAY
51794: PPUSH
51795: CALL_OW 251
51799: PPUSH
51800: LD_INT 12
51802: PPUSH
51803: LD_INT 1
51805: PPUSH
51806: CALL_OW 50
51810: GO 51824
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
51812: CALL_OW 45
51816: PPUSH
51817: LD_INT 1
51819: PPUSH
51820: CALL_OW 51
// end ;
51824: GO 51698
51826: POP
51827: POP
// end ;
51828: PPOPN 2
51830: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
51831: LD_EXP 36
51835: PUSH
51836: LD_EXP 82
51840: AND
51841: IFFALSE 52063
51843: GO 51845
51845: DISABLE
51846: LD_INT 0
51848: PPUSH
51849: PPUSH
51850: PPUSH
51851: PPUSH
51852: PPUSH
51853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
51854: LD_ADDR_VAR 0 6
51858: PUSH
51859: LD_INT 22
51861: PUSH
51862: LD_OWVAR 2
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 21
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 3
51883: PUSH
51884: LD_INT 23
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: LIST
51902: PPUSH
51903: CALL_OW 69
51907: ST_TO_ADDR
// if not tmp then
51908: LD_VAR 0 6
51912: NOT
51913: IFFALSE 51917
// exit ;
51915: GO 52063
// s1 := rand ( 1 , 4 ) ;
51917: LD_ADDR_VAR 0 2
51921: PUSH
51922: LD_INT 1
51924: PPUSH
51925: LD_INT 4
51927: PPUSH
51928: CALL_OW 12
51932: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
51933: LD_ADDR_VAR 0 4
51937: PUSH
51938: LD_VAR 0 6
51942: PUSH
51943: LD_INT 1
51945: ARRAY
51946: PPUSH
51947: LD_VAR 0 2
51951: PPUSH
51952: CALL_OW 259
51956: ST_TO_ADDR
// if s1 = 1 then
51957: LD_VAR 0 2
51961: PUSH
51962: LD_INT 1
51964: EQUAL
51965: IFFALSE 51985
// s2 := rand ( 2 , 4 ) else
51967: LD_ADDR_VAR 0 3
51971: PUSH
51972: LD_INT 2
51974: PPUSH
51975: LD_INT 4
51977: PPUSH
51978: CALL_OW 12
51982: ST_TO_ADDR
51983: GO 51993
// s2 := 1 ;
51985: LD_ADDR_VAR 0 3
51989: PUSH
51990: LD_INT 1
51992: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
51993: LD_ADDR_VAR 0 5
51997: PUSH
51998: LD_VAR 0 6
52002: PUSH
52003: LD_INT 1
52005: ARRAY
52006: PPUSH
52007: LD_VAR 0 3
52011: PPUSH
52012: CALL_OW 259
52016: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
52017: LD_VAR 0 6
52021: PUSH
52022: LD_INT 1
52024: ARRAY
52025: PPUSH
52026: LD_VAR 0 2
52030: PPUSH
52031: LD_VAR 0 5
52035: PPUSH
52036: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
52040: LD_VAR 0 6
52044: PUSH
52045: LD_INT 1
52047: ARRAY
52048: PPUSH
52049: LD_VAR 0 3
52053: PPUSH
52054: LD_VAR 0 4
52058: PPUSH
52059: CALL_OW 237
// end ;
52063: PPOPN 6
52065: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
52066: LD_EXP 36
52070: PUSH
52071: LD_EXP 83
52075: AND
52076: IFFALSE 52155
52078: GO 52080
52080: DISABLE
52081: LD_INT 0
52083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
52084: LD_ADDR_VAR 0 1
52088: PUSH
52089: LD_INT 22
52091: PUSH
52092: LD_OWVAR 2
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 30
52103: PUSH
52104: LD_INT 3
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PPUSH
52115: CALL_OW 69
52119: ST_TO_ADDR
// if not tmp then
52120: LD_VAR 0 1
52124: NOT
52125: IFFALSE 52129
// exit ;
52127: GO 52155
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
52129: LD_VAR 0 1
52133: PUSH
52134: LD_INT 1
52136: PPUSH
52137: LD_VAR 0 1
52141: PPUSH
52142: CALL_OW 12
52146: ARRAY
52147: PPUSH
52148: LD_INT 1
52150: PPUSH
52151: CALL_OW 234
// end ;
52155: PPOPN 1
52157: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
52158: LD_EXP 36
52162: PUSH
52163: LD_EXP 84
52167: AND
52168: IFFALSE 52280
52170: GO 52172
52172: DISABLE
52173: LD_INT 0
52175: PPUSH
52176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
52177: LD_ADDR_VAR 0 2
52181: PUSH
52182: LD_INT 22
52184: PUSH
52185: LD_OWVAR 2
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: PUSH
52197: LD_INT 30
52199: PUSH
52200: LD_INT 27
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 30
52209: PUSH
52210: LD_INT 26
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 30
52219: PUSH
52220: LD_INT 28
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PPUSH
52237: CALL_OW 69
52241: ST_TO_ADDR
// if not tmp then
52242: LD_VAR 0 2
52246: NOT
52247: IFFALSE 52251
// exit ;
52249: GO 52280
// for i in tmp do
52251: LD_ADDR_VAR 0 1
52255: PUSH
52256: LD_VAR 0 2
52260: PUSH
52261: FOR_IN
52262: IFFALSE 52278
// SetLives ( i , 1 ) ;
52264: LD_VAR 0 1
52268: PPUSH
52269: LD_INT 1
52271: PPUSH
52272: CALL_OW 234
52276: GO 52261
52278: POP
52279: POP
// end ;
52280: PPOPN 2
52282: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
52283: LD_EXP 36
52287: PUSH
52288: LD_EXP 85
52292: AND
52293: IFFALSE 52580
52295: GO 52297
52297: DISABLE
52298: LD_INT 0
52300: PPUSH
52301: PPUSH
52302: PPUSH
// begin i := rand ( 1 , 7 ) ;
52303: LD_ADDR_VAR 0 1
52307: PUSH
52308: LD_INT 1
52310: PPUSH
52311: LD_INT 7
52313: PPUSH
52314: CALL_OW 12
52318: ST_TO_ADDR
// case i of 1 :
52319: LD_VAR 0 1
52323: PUSH
52324: LD_INT 1
52326: DOUBLE
52327: EQUAL
52328: IFTRUE 52332
52330: GO 52342
52332: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
52333: LD_STRING earthquake(getX(game), 0, 32)
52335: PPUSH
52336: CALL_OW 559
52340: GO 52580
52342: LD_INT 2
52344: DOUBLE
52345: EQUAL
52346: IFTRUE 52350
52348: GO 52364
52350: POP
// begin ToLua ( displayStucuk(); ) ;
52351: LD_STRING displayStucuk();
52353: PPUSH
52354: CALL_OW 559
// ResetFog ;
52358: CALL_OW 335
// end ; 3 :
52362: GO 52580
52364: LD_INT 3
52366: DOUBLE
52367: EQUAL
52368: IFTRUE 52372
52370: GO 52476
52372: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52373: LD_ADDR_VAR 0 2
52377: PUSH
52378: LD_INT 22
52380: PUSH
52381: LD_OWVAR 2
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 25
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PPUSH
52404: CALL_OW 69
52408: ST_TO_ADDR
// if not tmp then
52409: LD_VAR 0 2
52413: NOT
52414: IFFALSE 52418
// exit ;
52416: GO 52580
// un := tmp [ rand ( 1 , tmp ) ] ;
52418: LD_ADDR_VAR 0 3
52422: PUSH
52423: LD_VAR 0 2
52427: PUSH
52428: LD_INT 1
52430: PPUSH
52431: LD_VAR 0 2
52435: PPUSH
52436: CALL_OW 12
52440: ARRAY
52441: ST_TO_ADDR
// if Crawls ( un ) then
52442: LD_VAR 0 3
52446: PPUSH
52447: CALL_OW 318
52451: IFFALSE 52462
// ComWalk ( un ) ;
52453: LD_VAR 0 3
52457: PPUSH
52458: CALL_OW 138
// SetClass ( un , class_mortar ) ;
52462: LD_VAR 0 3
52466: PPUSH
52467: LD_INT 8
52469: PPUSH
52470: CALL_OW 336
// end ; 4 :
52474: GO 52580
52476: LD_INT 4
52478: DOUBLE
52479: EQUAL
52480: IFTRUE 52484
52482: GO 52558
52484: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
52485: LD_ADDR_VAR 0 2
52489: PUSH
52490: LD_INT 22
52492: PUSH
52493: LD_OWVAR 2
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 30
52504: PUSH
52505: LD_INT 29
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PPUSH
52516: CALL_OW 69
52520: ST_TO_ADDR
// if not tmp then
52521: LD_VAR 0 2
52525: NOT
52526: IFFALSE 52530
// exit ;
52528: GO 52580
// CenterNowOnUnits ( tmp [ 1 ] ) ;
52530: LD_VAR 0 2
52534: PUSH
52535: LD_INT 1
52537: ARRAY
52538: PPUSH
52539: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
52543: LD_VAR 0 2
52547: PUSH
52548: LD_INT 1
52550: ARRAY
52551: PPUSH
52552: CALL_OW 65
// end ; 5 .. 7 :
52556: GO 52580
52558: LD_INT 5
52560: DOUBLE
52561: GREATEREQUAL
52562: IFFALSE 52570
52564: LD_INT 7
52566: DOUBLE
52567: LESSEQUAL
52568: IFTRUE 52572
52570: GO 52579
52572: POP
// StreamSibBomb ; end ;
52573: CALL 48817 0 0
52577: GO 52580
52579: POP
// end ;
52580: PPOPN 3
52582: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
52583: LD_EXP 36
52587: PUSH
52588: LD_EXP 86
52592: AND
52593: IFFALSE 52749
52595: GO 52597
52597: DISABLE
52598: LD_INT 0
52600: PPUSH
52601: PPUSH
52602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
52603: LD_ADDR_VAR 0 2
52607: PUSH
52608: LD_INT 81
52610: PUSH
52611: LD_OWVAR 2
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 2
52622: PUSH
52623: LD_INT 21
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 21
52635: PUSH
52636: LD_INT 2
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: LIST
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PPUSH
52652: CALL_OW 69
52656: ST_TO_ADDR
// if not tmp then
52657: LD_VAR 0 2
52661: NOT
52662: IFFALSE 52666
// exit ;
52664: GO 52749
// p := 0 ;
52666: LD_ADDR_VAR 0 3
52670: PUSH
52671: LD_INT 0
52673: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
52674: LD_INT 35
52676: PPUSH
52677: CALL_OW 67
// p := p + 1 ;
52681: LD_ADDR_VAR 0 3
52685: PUSH
52686: LD_VAR 0 3
52690: PUSH
52691: LD_INT 1
52693: PLUS
52694: ST_TO_ADDR
// for i in tmp do
52695: LD_ADDR_VAR 0 1
52699: PUSH
52700: LD_VAR 0 2
52704: PUSH
52705: FOR_IN
52706: IFFALSE 52737
// if GetLives ( i ) < 1000 then
52708: LD_VAR 0 1
52712: PPUSH
52713: CALL_OW 256
52717: PUSH
52718: LD_INT 1000
52720: LESS
52721: IFFALSE 52735
// SetLives ( i , 1000 ) ;
52723: LD_VAR 0 1
52727: PPUSH
52728: LD_INT 1000
52730: PPUSH
52731: CALL_OW 234
52735: GO 52705
52737: POP
52738: POP
// until p > 20 ;
52739: LD_VAR 0 3
52743: PUSH
52744: LD_INT 20
52746: GREATER
52747: IFFALSE 52674
// end ;
52749: PPOPN 3
52751: END
// every 0 0$1 trigger StreamModeActive and sTime do
52752: LD_EXP 36
52756: PUSH
52757: LD_EXP 87
52761: AND
52762: IFFALSE 52797
52764: GO 52766
52766: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
52767: LD_INT 28
52769: PPUSH
52770: LD_OWVAR 2
52774: PPUSH
52775: LD_INT 2
52777: PPUSH
52778: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
52782: LD_INT 30
52784: PPUSH
52785: LD_OWVAR 2
52789: PPUSH
52790: LD_INT 2
52792: PPUSH
52793: CALL_OW 322
// end ;
52797: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
52798: LD_EXP 36
52802: PUSH
52803: LD_EXP 88
52807: AND
52808: IFFALSE 52929
52810: GO 52812
52812: DISABLE
52813: LD_INT 0
52815: PPUSH
52816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
52817: LD_ADDR_VAR 0 2
52821: PUSH
52822: LD_INT 22
52824: PUSH
52825: LD_OWVAR 2
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 21
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 3
52846: PUSH
52847: LD_INT 23
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: LIST
52865: PPUSH
52866: CALL_OW 69
52870: ST_TO_ADDR
// if not tmp then
52871: LD_VAR 0 2
52875: NOT
52876: IFFALSE 52880
// exit ;
52878: GO 52929
// for i in tmp do
52880: LD_ADDR_VAR 0 1
52884: PUSH
52885: LD_VAR 0 2
52889: PUSH
52890: FOR_IN
52891: IFFALSE 52927
// begin if Crawls ( i ) then
52893: LD_VAR 0 1
52897: PPUSH
52898: CALL_OW 318
52902: IFFALSE 52913
// ComWalk ( i ) ;
52904: LD_VAR 0 1
52908: PPUSH
52909: CALL_OW 138
// SetClass ( i , 2 ) ;
52913: LD_VAR 0 1
52917: PPUSH
52918: LD_INT 2
52920: PPUSH
52921: CALL_OW 336
// end ;
52925: GO 52890
52927: POP
52928: POP
// end ;
52929: PPOPN 2
52931: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
52932: LD_EXP 36
52936: PUSH
52937: LD_EXP 89
52941: AND
52942: IFFALSE 53230
52944: GO 52946
52946: DISABLE
52947: LD_INT 0
52949: PPUSH
52950: PPUSH
52951: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
52952: LD_OWVAR 2
52956: PPUSH
52957: LD_INT 9
52959: PPUSH
52960: LD_INT 1
52962: PPUSH
52963: LD_INT 1
52965: PPUSH
52966: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
52970: LD_INT 9
52972: PPUSH
52973: LD_OWVAR 2
52977: PPUSH
52978: CALL_OW 343
// uc_side := 9 ;
52982: LD_ADDR_OWVAR 20
52986: PUSH
52987: LD_INT 9
52989: ST_TO_ADDR
// uc_nation := 2 ;
52990: LD_ADDR_OWVAR 21
52994: PUSH
52995: LD_INT 2
52997: ST_TO_ADDR
// hc_name := Dark Warrior ;
52998: LD_ADDR_OWVAR 26
53002: PUSH
53003: LD_STRING Dark Warrior
53005: ST_TO_ADDR
// hc_gallery :=  ;
53006: LD_ADDR_OWVAR 33
53010: PUSH
53011: LD_STRING 
53013: ST_TO_ADDR
// hc_noskilllimit := true ;
53014: LD_ADDR_OWVAR 76
53018: PUSH
53019: LD_INT 1
53021: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
53022: LD_ADDR_OWVAR 31
53026: PUSH
53027: LD_INT 30
53029: PUSH
53030: LD_INT 30
53032: PUSH
53033: LD_INT 30
53035: PUSH
53036: LD_INT 30
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: ST_TO_ADDR
// un := CreateHuman ;
53045: LD_ADDR_VAR 0 3
53049: PUSH
53050: CALL_OW 44
53054: ST_TO_ADDR
// hc_noskilllimit := false ;
53055: LD_ADDR_OWVAR 76
53059: PUSH
53060: LD_INT 0
53062: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53063: LD_VAR 0 3
53067: PPUSH
53068: LD_INT 1
53070: PPUSH
53071: CALL_OW 51
// ToLua ( playRanger() ) ;
53075: LD_STRING playRanger()
53077: PPUSH
53078: CALL_OW 559
// p := 0 ;
53082: LD_ADDR_VAR 0 2
53086: PUSH
53087: LD_INT 0
53089: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
53090: LD_INT 35
53092: PPUSH
53093: CALL_OW 67
// p := p + 1 ;
53097: LD_ADDR_VAR 0 2
53101: PUSH
53102: LD_VAR 0 2
53106: PUSH
53107: LD_INT 1
53109: PLUS
53110: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
53111: LD_VAR 0 3
53115: PPUSH
53116: CALL_OW 256
53120: PUSH
53121: LD_INT 1000
53123: LESS
53124: IFFALSE 53138
// SetLives ( un , 1000 ) ;
53126: LD_VAR 0 3
53130: PPUSH
53131: LD_INT 1000
53133: PPUSH
53134: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
53138: LD_VAR 0 3
53142: PPUSH
53143: LD_INT 81
53145: PUSH
53146: LD_OWVAR 2
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 91
53157: PUSH
53158: LD_VAR 0 3
53162: PUSH
53163: LD_INT 30
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: LIST
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PPUSH
53175: CALL_OW 69
53179: PPUSH
53180: LD_VAR 0 3
53184: PPUSH
53185: CALL_OW 74
53189: PPUSH
53190: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
53194: LD_VAR 0 2
53198: PUSH
53199: LD_INT 80
53201: GREATER
53202: PUSH
53203: LD_VAR 0 3
53207: PPUSH
53208: CALL_OW 301
53212: OR
53213: IFFALSE 53090
// if un then
53215: LD_VAR 0 3
53219: IFFALSE 53230
// RemoveUnit ( un ) ;
53221: LD_VAR 0 3
53225: PPUSH
53226: CALL_OW 64
// end ;
53230: PPOPN 3
53232: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
53233: LD_EXP 90
53237: IFFALSE 53353
53239: GO 53241
53241: DISABLE
53242: LD_INT 0
53244: PPUSH
53245: PPUSH
53246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
53247: LD_ADDR_VAR 0 2
53251: PUSH
53252: LD_INT 81
53254: PUSH
53255: LD_OWVAR 2
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 21
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PPUSH
53278: CALL_OW 69
53282: ST_TO_ADDR
// ToLua ( playComputer() ) ;
53283: LD_STRING playComputer()
53285: PPUSH
53286: CALL_OW 559
// if not tmp then
53290: LD_VAR 0 2
53294: NOT
53295: IFFALSE 53299
// exit ;
53297: GO 53353
// for i in tmp do
53299: LD_ADDR_VAR 0 1
53303: PUSH
53304: LD_VAR 0 2
53308: PUSH
53309: FOR_IN
53310: IFFALSE 53351
// for j := 1 to 4 do
53312: LD_ADDR_VAR 0 3
53316: PUSH
53317: DOUBLE
53318: LD_INT 1
53320: DEC
53321: ST_TO_ADDR
53322: LD_INT 4
53324: PUSH
53325: FOR_TO
53326: IFFALSE 53347
// SetSkill ( i , j , 10 ) ;
53328: LD_VAR 0 1
53332: PPUSH
53333: LD_VAR 0 3
53337: PPUSH
53338: LD_INT 10
53340: PPUSH
53341: CALL_OW 237
53345: GO 53325
53347: POP
53348: POP
53349: GO 53309
53351: POP
53352: POP
// end ;
53353: PPOPN 3
53355: END
// every 0 0$1 trigger s30 do var i , tmp ;
53356: LD_EXP 91
53360: IFFALSE 53429
53362: GO 53364
53364: DISABLE
53365: LD_INT 0
53367: PPUSH
53368: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
53369: LD_ADDR_VAR 0 2
53373: PUSH
53374: LD_INT 22
53376: PUSH
53377: LD_OWVAR 2
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PPUSH
53386: CALL_OW 69
53390: ST_TO_ADDR
// if not tmp then
53391: LD_VAR 0 2
53395: NOT
53396: IFFALSE 53400
// exit ;
53398: GO 53429
// for i in tmp do
53400: LD_ADDR_VAR 0 1
53404: PUSH
53405: LD_VAR 0 2
53409: PUSH
53410: FOR_IN
53411: IFFALSE 53427
// SetLives ( i , 300 ) ;
53413: LD_VAR 0 1
53417: PPUSH
53418: LD_INT 300
53420: PPUSH
53421: CALL_OW 234
53425: GO 53410
53427: POP
53428: POP
// end ;
53429: PPOPN 2
53431: END
// every 0 0$1 trigger s60 do var i , tmp ;
53432: LD_EXP 92
53436: IFFALSE 53505
53438: GO 53440
53440: DISABLE
53441: LD_INT 0
53443: PPUSH
53444: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
53445: LD_ADDR_VAR 0 2
53449: PUSH
53450: LD_INT 22
53452: PUSH
53453: LD_OWVAR 2
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PPUSH
53462: CALL_OW 69
53466: ST_TO_ADDR
// if not tmp then
53467: LD_VAR 0 2
53471: NOT
53472: IFFALSE 53476
// exit ;
53474: GO 53505
// for i in tmp do
53476: LD_ADDR_VAR 0 1
53480: PUSH
53481: LD_VAR 0 2
53485: PUSH
53486: FOR_IN
53487: IFFALSE 53503
// SetLives ( i , 600 ) ;
53489: LD_VAR 0 1
53493: PPUSH
53494: LD_INT 600
53496: PPUSH
53497: CALL_OW 234
53501: GO 53486
53503: POP
53504: POP
// end ;
53505: PPOPN 2
53507: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
53508: LD_INT 0
53510: PPUSH
// case cmd of 301 :
53511: LD_VAR 0 1
53515: PUSH
53516: LD_INT 301
53518: DOUBLE
53519: EQUAL
53520: IFTRUE 53524
53522: GO 53556
53524: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
53525: LD_VAR 0 6
53529: PPUSH
53530: LD_VAR 0 7
53534: PPUSH
53535: LD_VAR 0 8
53539: PPUSH
53540: LD_VAR 0 4
53544: PPUSH
53545: LD_VAR 0 5
53549: PPUSH
53550: CALL 54757 0 5
53554: GO 53677
53556: LD_INT 302
53558: DOUBLE
53559: EQUAL
53560: IFTRUE 53564
53562: GO 53601
53564: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
53565: LD_VAR 0 6
53569: PPUSH
53570: LD_VAR 0 7
53574: PPUSH
53575: LD_VAR 0 8
53579: PPUSH
53580: LD_VAR 0 9
53584: PPUSH
53585: LD_VAR 0 4
53589: PPUSH
53590: LD_VAR 0 5
53594: PPUSH
53595: CALL 54848 0 6
53599: GO 53677
53601: LD_INT 303
53603: DOUBLE
53604: EQUAL
53605: IFTRUE 53609
53607: GO 53646
53609: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
53610: LD_VAR 0 6
53614: PPUSH
53615: LD_VAR 0 7
53619: PPUSH
53620: LD_VAR 0 8
53624: PPUSH
53625: LD_VAR 0 9
53629: PPUSH
53630: LD_VAR 0 4
53634: PPUSH
53635: LD_VAR 0 5
53639: PPUSH
53640: CALL 53682 0 6
53644: GO 53677
53646: LD_INT 304
53648: DOUBLE
53649: EQUAL
53650: IFTRUE 53654
53652: GO 53676
53654: POP
// hHackTeleport ( unit , x , y ) ; end ;
53655: LD_VAR 0 2
53659: PPUSH
53660: LD_VAR 0 4
53664: PPUSH
53665: LD_VAR 0 5
53669: PPUSH
53670: CALL 55441 0 3
53674: GO 53677
53676: POP
// end ;
53677: LD_VAR 0 12
53681: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
53682: LD_INT 0
53684: PPUSH
53685: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
53686: LD_VAR 0 1
53690: PUSH
53691: LD_INT 1
53693: LESS
53694: PUSH
53695: LD_VAR 0 1
53699: PUSH
53700: LD_INT 3
53702: GREATER
53703: OR
53704: PUSH
53705: LD_VAR 0 5
53709: PPUSH
53710: LD_VAR 0 6
53714: PPUSH
53715: CALL_OW 428
53719: OR
53720: IFFALSE 53724
// exit ;
53722: GO 54444
// uc_side := your_side ;
53724: LD_ADDR_OWVAR 20
53728: PUSH
53729: LD_OWVAR 2
53733: ST_TO_ADDR
// uc_nation := nation ;
53734: LD_ADDR_OWVAR 21
53738: PUSH
53739: LD_VAR 0 1
53743: ST_TO_ADDR
// bc_level = 1 ;
53744: LD_ADDR_OWVAR 43
53748: PUSH
53749: LD_INT 1
53751: ST_TO_ADDR
// case btype of 1 :
53752: LD_VAR 0 2
53756: PUSH
53757: LD_INT 1
53759: DOUBLE
53760: EQUAL
53761: IFTRUE 53765
53763: GO 53776
53765: POP
// bc_type := b_depot ; 2 :
53766: LD_ADDR_OWVAR 42
53770: PUSH
53771: LD_INT 0
53773: ST_TO_ADDR
53774: GO 54388
53776: LD_INT 2
53778: DOUBLE
53779: EQUAL
53780: IFTRUE 53784
53782: GO 53795
53784: POP
// bc_type := b_warehouse ; 3 :
53785: LD_ADDR_OWVAR 42
53789: PUSH
53790: LD_INT 1
53792: ST_TO_ADDR
53793: GO 54388
53795: LD_INT 3
53797: DOUBLE
53798: EQUAL
53799: IFTRUE 53803
53801: GO 53814
53803: POP
// bc_type := b_lab ; 4 .. 9 :
53804: LD_ADDR_OWVAR 42
53808: PUSH
53809: LD_INT 6
53811: ST_TO_ADDR
53812: GO 54388
53814: LD_INT 4
53816: DOUBLE
53817: GREATEREQUAL
53818: IFFALSE 53826
53820: LD_INT 9
53822: DOUBLE
53823: LESSEQUAL
53824: IFTRUE 53828
53826: GO 53880
53828: POP
// begin bc_type := b_lab_half ;
53829: LD_ADDR_OWVAR 42
53833: PUSH
53834: LD_INT 7
53836: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
53837: LD_ADDR_OWVAR 44
53841: PUSH
53842: LD_INT 10
53844: PUSH
53845: LD_INT 11
53847: PUSH
53848: LD_INT 12
53850: PUSH
53851: LD_INT 15
53853: PUSH
53854: LD_INT 14
53856: PUSH
53857: LD_INT 13
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: PUSH
53868: LD_VAR 0 2
53872: PUSH
53873: LD_INT 3
53875: MINUS
53876: ARRAY
53877: ST_TO_ADDR
// end ; 10 .. 13 :
53878: GO 54388
53880: LD_INT 10
53882: DOUBLE
53883: GREATEREQUAL
53884: IFFALSE 53892
53886: LD_INT 13
53888: DOUBLE
53889: LESSEQUAL
53890: IFTRUE 53894
53892: GO 53971
53894: POP
// begin bc_type := b_lab_full ;
53895: LD_ADDR_OWVAR 42
53899: PUSH
53900: LD_INT 8
53902: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
53903: LD_ADDR_OWVAR 44
53907: PUSH
53908: LD_INT 10
53910: PUSH
53911: LD_INT 12
53913: PUSH
53914: LD_INT 14
53916: PUSH
53917: LD_INT 13
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: PUSH
53926: LD_VAR 0 2
53930: PUSH
53931: LD_INT 9
53933: MINUS
53934: ARRAY
53935: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
53936: LD_ADDR_OWVAR 45
53940: PUSH
53941: LD_INT 11
53943: PUSH
53944: LD_INT 15
53946: PUSH
53947: LD_INT 12
53949: PUSH
53950: LD_INT 15
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: PUSH
53959: LD_VAR 0 2
53963: PUSH
53964: LD_INT 9
53966: MINUS
53967: ARRAY
53968: ST_TO_ADDR
// end ; 14 :
53969: GO 54388
53971: LD_INT 14
53973: DOUBLE
53974: EQUAL
53975: IFTRUE 53979
53977: GO 53990
53979: POP
// bc_type := b_workshop ; 15 :
53980: LD_ADDR_OWVAR 42
53984: PUSH
53985: LD_INT 2
53987: ST_TO_ADDR
53988: GO 54388
53990: LD_INT 15
53992: DOUBLE
53993: EQUAL
53994: IFTRUE 53998
53996: GO 54009
53998: POP
// bc_type := b_factory ; 16 :
53999: LD_ADDR_OWVAR 42
54003: PUSH
54004: LD_INT 3
54006: ST_TO_ADDR
54007: GO 54388
54009: LD_INT 16
54011: DOUBLE
54012: EQUAL
54013: IFTRUE 54017
54015: GO 54028
54017: POP
// bc_type := b_ext_gun ; 17 :
54018: LD_ADDR_OWVAR 42
54022: PUSH
54023: LD_INT 17
54025: ST_TO_ADDR
54026: GO 54388
54028: LD_INT 17
54030: DOUBLE
54031: EQUAL
54032: IFTRUE 54036
54034: GO 54064
54036: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
54037: LD_ADDR_OWVAR 42
54041: PUSH
54042: LD_INT 19
54044: PUSH
54045: LD_INT 23
54047: PUSH
54048: LD_INT 19
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: LIST
54055: PUSH
54056: LD_VAR 0 1
54060: ARRAY
54061: ST_TO_ADDR
54062: GO 54388
54064: LD_INT 18
54066: DOUBLE
54067: EQUAL
54068: IFTRUE 54072
54070: GO 54083
54072: POP
// bc_type := b_ext_radar ; 19 :
54073: LD_ADDR_OWVAR 42
54077: PUSH
54078: LD_INT 20
54080: ST_TO_ADDR
54081: GO 54388
54083: LD_INT 19
54085: DOUBLE
54086: EQUAL
54087: IFTRUE 54091
54089: GO 54102
54091: POP
// bc_type := b_ext_radio ; 20 :
54092: LD_ADDR_OWVAR 42
54096: PUSH
54097: LD_INT 22
54099: ST_TO_ADDR
54100: GO 54388
54102: LD_INT 20
54104: DOUBLE
54105: EQUAL
54106: IFTRUE 54110
54108: GO 54121
54110: POP
// bc_type := b_ext_siberium ; 21 :
54111: LD_ADDR_OWVAR 42
54115: PUSH
54116: LD_INT 21
54118: ST_TO_ADDR
54119: GO 54388
54121: LD_INT 21
54123: DOUBLE
54124: EQUAL
54125: IFTRUE 54129
54127: GO 54140
54129: POP
// bc_type := b_ext_computer ; 22 :
54130: LD_ADDR_OWVAR 42
54134: PUSH
54135: LD_INT 24
54137: ST_TO_ADDR
54138: GO 54388
54140: LD_INT 22
54142: DOUBLE
54143: EQUAL
54144: IFTRUE 54148
54146: GO 54159
54148: POP
// bc_type := b_ext_track ; 23 :
54149: LD_ADDR_OWVAR 42
54153: PUSH
54154: LD_INT 16
54156: ST_TO_ADDR
54157: GO 54388
54159: LD_INT 23
54161: DOUBLE
54162: EQUAL
54163: IFTRUE 54167
54165: GO 54178
54167: POP
// bc_type := b_ext_laser ; 24 :
54168: LD_ADDR_OWVAR 42
54172: PUSH
54173: LD_INT 25
54175: ST_TO_ADDR
54176: GO 54388
54178: LD_INT 24
54180: DOUBLE
54181: EQUAL
54182: IFTRUE 54186
54184: GO 54197
54186: POP
// bc_type := b_control_tower ; 25 :
54187: LD_ADDR_OWVAR 42
54191: PUSH
54192: LD_INT 36
54194: ST_TO_ADDR
54195: GO 54388
54197: LD_INT 25
54199: DOUBLE
54200: EQUAL
54201: IFTRUE 54205
54203: GO 54216
54205: POP
// bc_type := b_breastwork ; 26 :
54206: LD_ADDR_OWVAR 42
54210: PUSH
54211: LD_INT 31
54213: ST_TO_ADDR
54214: GO 54388
54216: LD_INT 26
54218: DOUBLE
54219: EQUAL
54220: IFTRUE 54224
54222: GO 54235
54224: POP
// bc_type := b_bunker ; 27 :
54225: LD_ADDR_OWVAR 42
54229: PUSH
54230: LD_INT 32
54232: ST_TO_ADDR
54233: GO 54388
54235: LD_INT 27
54237: DOUBLE
54238: EQUAL
54239: IFTRUE 54243
54241: GO 54254
54243: POP
// bc_type := b_turret ; 28 :
54244: LD_ADDR_OWVAR 42
54248: PUSH
54249: LD_INT 33
54251: ST_TO_ADDR
54252: GO 54388
54254: LD_INT 28
54256: DOUBLE
54257: EQUAL
54258: IFTRUE 54262
54260: GO 54273
54262: POP
// bc_type := b_armoury ; 29 :
54263: LD_ADDR_OWVAR 42
54267: PUSH
54268: LD_INT 4
54270: ST_TO_ADDR
54271: GO 54388
54273: LD_INT 29
54275: DOUBLE
54276: EQUAL
54277: IFTRUE 54281
54279: GO 54292
54281: POP
// bc_type := b_barracks ; 30 :
54282: LD_ADDR_OWVAR 42
54286: PUSH
54287: LD_INT 5
54289: ST_TO_ADDR
54290: GO 54388
54292: LD_INT 30
54294: DOUBLE
54295: EQUAL
54296: IFTRUE 54300
54298: GO 54311
54300: POP
// bc_type := b_solar_power ; 31 :
54301: LD_ADDR_OWVAR 42
54305: PUSH
54306: LD_INT 27
54308: ST_TO_ADDR
54309: GO 54388
54311: LD_INT 31
54313: DOUBLE
54314: EQUAL
54315: IFTRUE 54319
54317: GO 54330
54319: POP
// bc_type := b_oil_power ; 32 :
54320: LD_ADDR_OWVAR 42
54324: PUSH
54325: LD_INT 26
54327: ST_TO_ADDR
54328: GO 54388
54330: LD_INT 32
54332: DOUBLE
54333: EQUAL
54334: IFTRUE 54338
54336: GO 54349
54338: POP
// bc_type := b_siberite_power ; 33 :
54339: LD_ADDR_OWVAR 42
54343: PUSH
54344: LD_INT 28
54346: ST_TO_ADDR
54347: GO 54388
54349: LD_INT 33
54351: DOUBLE
54352: EQUAL
54353: IFTRUE 54357
54355: GO 54368
54357: POP
// bc_type := b_oil_mine ; 34 :
54358: LD_ADDR_OWVAR 42
54362: PUSH
54363: LD_INT 29
54365: ST_TO_ADDR
54366: GO 54388
54368: LD_INT 34
54370: DOUBLE
54371: EQUAL
54372: IFTRUE 54376
54374: GO 54387
54376: POP
// bc_type := b_siberite_mine ; end ;
54377: LD_ADDR_OWVAR 42
54381: PUSH
54382: LD_INT 30
54384: ST_TO_ADDR
54385: GO 54388
54387: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
54388: LD_ADDR_VAR 0 8
54392: PUSH
54393: LD_VAR 0 5
54397: PPUSH
54398: LD_VAR 0 6
54402: PPUSH
54403: LD_VAR 0 3
54407: PPUSH
54408: CALL_OW 47
54412: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
54413: LD_OWVAR 42
54417: PUSH
54418: LD_INT 32
54420: PUSH
54421: LD_INT 33
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: IN
54428: IFFALSE 54444
// PlaceWeaponTurret ( b , weapon ) ;
54430: LD_VAR 0 8
54434: PPUSH
54435: LD_VAR 0 4
54439: PPUSH
54440: CALL_OW 431
// end ;
54444: LD_VAR 0 7
54448: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
54449: LD_INT 0
54451: PPUSH
54452: PPUSH
54453: PPUSH
54454: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54455: LD_ADDR_VAR 0 4
54459: PUSH
54460: LD_INT 22
54462: PUSH
54463: LD_OWVAR 2
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: LD_INT 30
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 30
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: LIST
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PPUSH
54504: CALL_OW 69
54508: ST_TO_ADDR
// if not tmp then
54509: LD_VAR 0 4
54513: NOT
54514: IFFALSE 54518
// exit ;
54516: GO 54577
// for i in tmp do
54518: LD_ADDR_VAR 0 2
54522: PUSH
54523: LD_VAR 0 4
54527: PUSH
54528: FOR_IN
54529: IFFALSE 54575
// for j = 1 to 3 do
54531: LD_ADDR_VAR 0 3
54535: PUSH
54536: DOUBLE
54537: LD_INT 1
54539: DEC
54540: ST_TO_ADDR
54541: LD_INT 3
54543: PUSH
54544: FOR_TO
54545: IFFALSE 54571
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
54547: LD_VAR 0 2
54551: PPUSH
54552: CALL_OW 274
54556: PPUSH
54557: LD_VAR 0 3
54561: PPUSH
54562: LD_INT 99999
54564: PPUSH
54565: CALL_OW 277
54569: GO 54544
54571: POP
54572: POP
54573: GO 54528
54575: POP
54576: POP
// end ;
54577: LD_VAR 0 1
54581: RET
// export function hHackSetLevel10 ; var i , j ; begin
54582: LD_INT 0
54584: PPUSH
54585: PPUSH
54586: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
54587: LD_ADDR_VAR 0 2
54591: PUSH
54592: LD_INT 21
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PPUSH
54602: CALL_OW 69
54606: PUSH
54607: FOR_IN
54608: IFFALSE 54660
// if IsSelected ( i ) then
54610: LD_VAR 0 2
54614: PPUSH
54615: CALL_OW 306
54619: IFFALSE 54658
// begin for j := 1 to 4 do
54621: LD_ADDR_VAR 0 3
54625: PUSH
54626: DOUBLE
54627: LD_INT 1
54629: DEC
54630: ST_TO_ADDR
54631: LD_INT 4
54633: PUSH
54634: FOR_TO
54635: IFFALSE 54656
// SetSkill ( i , j , 10 ) ;
54637: LD_VAR 0 2
54641: PPUSH
54642: LD_VAR 0 3
54646: PPUSH
54647: LD_INT 10
54649: PPUSH
54650: CALL_OW 237
54654: GO 54634
54656: POP
54657: POP
// end ;
54658: GO 54607
54660: POP
54661: POP
// end ;
54662: LD_VAR 0 1
54666: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
54667: LD_INT 0
54669: PPUSH
54670: PPUSH
54671: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
54672: LD_ADDR_VAR 0 2
54676: PUSH
54677: LD_INT 22
54679: PUSH
54680: LD_OWVAR 2
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 21
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PPUSH
54703: CALL_OW 69
54707: PUSH
54708: FOR_IN
54709: IFFALSE 54750
// begin for j := 1 to 4 do
54711: LD_ADDR_VAR 0 3
54715: PUSH
54716: DOUBLE
54717: LD_INT 1
54719: DEC
54720: ST_TO_ADDR
54721: LD_INT 4
54723: PUSH
54724: FOR_TO
54725: IFFALSE 54746
// SetSkill ( i , j , 10 ) ;
54727: LD_VAR 0 2
54731: PPUSH
54732: LD_VAR 0 3
54736: PPUSH
54737: LD_INT 10
54739: PPUSH
54740: CALL_OW 237
54744: GO 54724
54746: POP
54747: POP
// end ;
54748: GO 54708
54750: POP
54751: POP
// end ;
54752: LD_VAR 0 1
54756: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
54757: LD_INT 0
54759: PPUSH
// uc_side := your_side ;
54760: LD_ADDR_OWVAR 20
54764: PUSH
54765: LD_OWVAR 2
54769: ST_TO_ADDR
// uc_nation := nation ;
54770: LD_ADDR_OWVAR 21
54774: PUSH
54775: LD_VAR 0 1
54779: ST_TO_ADDR
// InitHc ;
54780: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
54784: LD_INT 0
54786: PPUSH
54787: LD_VAR 0 2
54791: PPUSH
54792: LD_VAR 0 3
54796: PPUSH
54797: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
54801: LD_VAR 0 4
54805: PPUSH
54806: LD_VAR 0 5
54810: PPUSH
54811: CALL_OW 428
54815: PUSH
54816: LD_INT 0
54818: EQUAL
54819: IFFALSE 54843
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
54821: CALL_OW 44
54825: PPUSH
54826: LD_VAR 0 4
54830: PPUSH
54831: LD_VAR 0 5
54835: PPUSH
54836: LD_INT 1
54838: PPUSH
54839: CALL_OW 48
// end ;
54843: LD_VAR 0 6
54847: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
54848: LD_INT 0
54850: PPUSH
54851: PPUSH
// uc_side := your_side ;
54852: LD_ADDR_OWVAR 20
54856: PUSH
54857: LD_OWVAR 2
54861: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
54862: LD_VAR 0 1
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: LD_INT 2
54872: PUSH
54873: LD_INT 3
54875: PUSH
54876: LD_INT 4
54878: PUSH
54879: LD_INT 5
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: IN
54889: IFFALSE 54901
// uc_nation := nation_american else
54891: LD_ADDR_OWVAR 21
54895: PUSH
54896: LD_INT 1
54898: ST_TO_ADDR
54899: GO 54944
// if chassis in [ 11 , 12 , 13 , 14 ] then
54901: LD_VAR 0 1
54905: PUSH
54906: LD_INT 11
54908: PUSH
54909: LD_INT 12
54911: PUSH
54912: LD_INT 13
54914: PUSH
54915: LD_INT 14
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: IN
54924: IFFALSE 54936
// uc_nation := nation_arabian else
54926: LD_ADDR_OWVAR 21
54930: PUSH
54931: LD_INT 2
54933: ST_TO_ADDR
54934: GO 54944
// uc_nation := nation_russian ;
54936: LD_ADDR_OWVAR 21
54940: PUSH
54941: LD_INT 3
54943: ST_TO_ADDR
// vc_chassis := chassis ;
54944: LD_ADDR_OWVAR 37
54948: PUSH
54949: LD_VAR 0 1
54953: ST_TO_ADDR
// vc_engine := engine ;
54954: LD_ADDR_OWVAR 39
54958: PUSH
54959: LD_VAR 0 2
54963: ST_TO_ADDR
// vc_control := control ;
54964: LD_ADDR_OWVAR 38
54968: PUSH
54969: LD_VAR 0 3
54973: ST_TO_ADDR
// vc_weapon := weapon ;
54974: LD_ADDR_OWVAR 40
54978: PUSH
54979: LD_VAR 0 4
54983: ST_TO_ADDR
// un := CreateVehicle ;
54984: LD_ADDR_VAR 0 8
54988: PUSH
54989: CALL_OW 45
54993: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
54994: LD_VAR 0 8
54998: PPUSH
54999: LD_INT 0
55001: PPUSH
55002: LD_INT 5
55004: PPUSH
55005: CALL_OW 12
55009: PPUSH
55010: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
55014: LD_VAR 0 8
55018: PPUSH
55019: LD_VAR 0 5
55023: PPUSH
55024: LD_VAR 0 6
55028: PPUSH
55029: LD_INT 1
55031: PPUSH
55032: CALL_OW 48
// end ;
55036: LD_VAR 0 7
55040: RET
// export hInvincible ; every 1 do
55041: GO 55043
55043: DISABLE
// hInvincible := [ ] ;
55044: LD_ADDR_EXP 93
55048: PUSH
55049: EMPTY
55050: ST_TO_ADDR
55051: END
// every 10 do var i ;
55052: GO 55054
55054: DISABLE
55055: LD_INT 0
55057: PPUSH
// begin enable ;
55058: ENABLE
// if not hInvincible then
55059: LD_EXP 93
55063: NOT
55064: IFFALSE 55068
// exit ;
55066: GO 55112
// for i in hInvincible do
55068: LD_ADDR_VAR 0 1
55072: PUSH
55073: LD_EXP 93
55077: PUSH
55078: FOR_IN
55079: IFFALSE 55110
// if GetLives ( i ) < 1000 then
55081: LD_VAR 0 1
55085: PPUSH
55086: CALL_OW 256
55090: PUSH
55091: LD_INT 1000
55093: LESS
55094: IFFALSE 55108
// SetLives ( i , 1000 ) ;
55096: LD_VAR 0 1
55100: PPUSH
55101: LD_INT 1000
55103: PPUSH
55104: CALL_OW 234
55108: GO 55078
55110: POP
55111: POP
// end ;
55112: PPOPN 1
55114: END
// export function hHackInvincible ; var i ; begin
55115: LD_INT 0
55117: PPUSH
55118: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
55119: LD_ADDR_VAR 0 2
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: LD_INT 21
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 21
55139: PUSH
55140: LD_INT 2
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: LIST
55151: PPUSH
55152: CALL_OW 69
55156: PUSH
55157: FOR_IN
55158: IFFALSE 55219
// if IsSelected ( i ) then
55160: LD_VAR 0 2
55164: PPUSH
55165: CALL_OW 306
55169: IFFALSE 55217
// begin if i in hInvincible then
55171: LD_VAR 0 2
55175: PUSH
55176: LD_EXP 93
55180: IN
55181: IFFALSE 55201
// hInvincible := hInvincible diff i else
55183: LD_ADDR_EXP 93
55187: PUSH
55188: LD_EXP 93
55192: PUSH
55193: LD_VAR 0 2
55197: DIFF
55198: ST_TO_ADDR
55199: GO 55217
// hInvincible := hInvincible union i ;
55201: LD_ADDR_EXP 93
55205: PUSH
55206: LD_EXP 93
55210: PUSH
55211: LD_VAR 0 2
55215: UNION
55216: ST_TO_ADDR
// end ;
55217: GO 55157
55219: POP
55220: POP
// end ;
55221: LD_VAR 0 1
55225: RET
// export function hHackInvisible ; var i , j ; begin
55226: LD_INT 0
55228: PPUSH
55229: PPUSH
55230: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
55231: LD_ADDR_VAR 0 2
55235: PUSH
55236: LD_INT 21
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PPUSH
55246: CALL_OW 69
55250: PUSH
55251: FOR_IN
55252: IFFALSE 55276
// if IsSelected ( i ) then
55254: LD_VAR 0 2
55258: PPUSH
55259: CALL_OW 306
55263: IFFALSE 55274
// ComForceInvisible ( i ) ;
55265: LD_VAR 0 2
55269: PPUSH
55270: CALL_OW 496
55274: GO 55251
55276: POP
55277: POP
// end ;
55278: LD_VAR 0 1
55282: RET
// export function hHackChangeYourSide ; begin
55283: LD_INT 0
55285: PPUSH
// if your_side = 8 then
55286: LD_OWVAR 2
55290: PUSH
55291: LD_INT 8
55293: EQUAL
55294: IFFALSE 55306
// your_side := 0 else
55296: LD_ADDR_OWVAR 2
55300: PUSH
55301: LD_INT 0
55303: ST_TO_ADDR
55304: GO 55320
// your_side := your_side + 1 ;
55306: LD_ADDR_OWVAR 2
55310: PUSH
55311: LD_OWVAR 2
55315: PUSH
55316: LD_INT 1
55318: PLUS
55319: ST_TO_ADDR
// end ;
55320: LD_VAR 0 1
55324: RET
// export function hHackChangeUnitSide ; var i , j ; begin
55325: LD_INT 0
55327: PPUSH
55328: PPUSH
55329: PPUSH
// for i in all_units do
55330: LD_ADDR_VAR 0 2
55334: PUSH
55335: LD_OWVAR 3
55339: PUSH
55340: FOR_IN
55341: IFFALSE 55419
// if IsSelected ( i ) then
55343: LD_VAR 0 2
55347: PPUSH
55348: CALL_OW 306
55352: IFFALSE 55417
// begin j := GetSide ( i ) ;
55354: LD_ADDR_VAR 0 3
55358: PUSH
55359: LD_VAR 0 2
55363: PPUSH
55364: CALL_OW 255
55368: ST_TO_ADDR
// if j = 8 then
55369: LD_VAR 0 3
55373: PUSH
55374: LD_INT 8
55376: EQUAL
55377: IFFALSE 55389
// j := 0 else
55379: LD_ADDR_VAR 0 3
55383: PUSH
55384: LD_INT 0
55386: ST_TO_ADDR
55387: GO 55403
// j := j + 1 ;
55389: LD_ADDR_VAR 0 3
55393: PUSH
55394: LD_VAR 0 3
55398: PUSH
55399: LD_INT 1
55401: PLUS
55402: ST_TO_ADDR
// SetSide ( i , j ) ;
55403: LD_VAR 0 2
55407: PPUSH
55408: LD_VAR 0 3
55412: PPUSH
55413: CALL_OW 235
// end ;
55417: GO 55340
55419: POP
55420: POP
// end ;
55421: LD_VAR 0 1
55425: RET
// export function hHackFog ; begin
55426: LD_INT 0
55428: PPUSH
// FogOff ( true ) ;
55429: LD_INT 1
55431: PPUSH
55432: CALL_OW 344
// end ;
55436: LD_VAR 0 1
55440: RET
// export function hHackTeleport ( unit , x , y ) ; begin
55441: LD_INT 0
55443: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
55444: LD_VAR 0 1
55448: PPUSH
55449: LD_VAR 0 2
55453: PPUSH
55454: LD_VAR 0 3
55458: PPUSH
55459: LD_INT 1
55461: PPUSH
55462: LD_INT 1
55464: PPUSH
55465: CALL_OW 483
// CenterOnXY ( x , y ) ;
55469: LD_VAR 0 2
55473: PPUSH
55474: LD_VAR 0 3
55478: PPUSH
55479: CALL_OW 84
// end ; end_of_file
55483: LD_VAR 0 4
55487: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55488: LD_VAR 0 1
55492: PUSH
55493: LD_INT 200
55495: DOUBLE
55496: GREATEREQUAL
55497: IFFALSE 55505
55499: LD_INT 299
55501: DOUBLE
55502: LESSEQUAL
55503: IFTRUE 55507
55505: GO 55539
55507: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55508: LD_VAR 0 1
55512: PPUSH
55513: LD_VAR 0 2
55517: PPUSH
55518: LD_VAR 0 3
55522: PPUSH
55523: LD_VAR 0 4
55527: PPUSH
55528: LD_VAR 0 5
55532: PPUSH
55533: CALL 56029 0 5
55537: GO 55616
55539: LD_INT 300
55541: DOUBLE
55542: GREATEREQUAL
55543: IFFALSE 55551
55545: LD_INT 399
55547: DOUBLE
55548: LESSEQUAL
55549: IFTRUE 55553
55551: GO 55615
55553: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55554: LD_VAR 0 1
55558: PPUSH
55559: LD_VAR 0 2
55563: PPUSH
55564: LD_VAR 0 3
55568: PPUSH
55569: LD_VAR 0 4
55573: PPUSH
55574: LD_VAR 0 5
55578: PPUSH
55579: LD_VAR 0 6
55583: PPUSH
55584: LD_VAR 0 7
55588: PPUSH
55589: LD_VAR 0 8
55593: PPUSH
55594: LD_VAR 0 9
55598: PPUSH
55599: LD_VAR 0 10
55603: PPUSH
55604: LD_VAR 0 11
55608: PPUSH
55609: CALL 53508 0 11
55613: GO 55616
55615: POP
// end ;
55616: PPOPN 11
55618: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55619: LD_VAR 0 1
55623: PPUSH
55624: LD_VAR 0 2
55628: PPUSH
55629: LD_VAR 0 3
55633: PPUSH
55634: LD_VAR 0 4
55638: PPUSH
55639: LD_VAR 0 5
55643: PPUSH
55644: CALL 55765 0 5
// end ; end_of_file
55648: PPOPN 5
55650: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
55651: LD_INT 0
55653: PPUSH
55654: PPUSH
55655: PPUSH
55656: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
55657: LD_VAR 0 1
55661: PPUSH
55662: CALL_OW 264
55666: PUSH
55667: LD_EXP 20
55671: EQUAL
55672: IFFALSE 55744
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55674: LD_INT 68
55676: PPUSH
55677: LD_VAR 0 1
55681: PPUSH
55682: CALL_OW 255
55686: PPUSH
55687: CALL_OW 321
55691: PUSH
55692: LD_INT 2
55694: EQUAL
55695: IFFALSE 55707
// eff := 70 else
55697: LD_ADDR_VAR 0 4
55701: PUSH
55702: LD_INT 70
55704: ST_TO_ADDR
55705: GO 55715
// eff := 30 ;
55707: LD_ADDR_VAR 0 4
55711: PUSH
55712: LD_INT 30
55714: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55715: LD_VAR 0 1
55719: PPUSH
55720: CALL_OW 250
55724: PPUSH
55725: LD_VAR 0 1
55729: PPUSH
55730: CALL_OW 251
55734: PPUSH
55735: LD_VAR 0 4
55739: PPUSH
55740: CALL_OW 495
// end ; end ;
55744: LD_VAR 0 2
55748: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55749: LD_INT 0
55751: PPUSH
// end ;
55752: LD_VAR 0 4
55756: RET
// export function SOS_Command ( cmd ) ; begin
55757: LD_INT 0
55759: PPUSH
// end ;
55760: LD_VAR 0 2
55764: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55765: LD_INT 0
55767: PPUSH
// end ;
55768: LD_VAR 0 6
55772: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
55773: LD_INT 0
55775: PPUSH
55776: PPUSH
// if not vehicle or not factory then
55777: LD_VAR 0 1
55781: NOT
55782: PUSH
55783: LD_VAR 0 2
55787: NOT
55788: OR
55789: IFFALSE 55793
// exit ;
55791: GO 56024
// if factoryWaypoints >= factory then
55793: LD_EXP 94
55797: PUSH
55798: LD_VAR 0 2
55802: GREATEREQUAL
55803: IFFALSE 56024
// if factoryWaypoints [ factory ] then
55805: LD_EXP 94
55809: PUSH
55810: LD_VAR 0 2
55814: ARRAY
55815: IFFALSE 56024
// begin if GetControl ( vehicle ) = control_manual then
55817: LD_VAR 0 1
55821: PPUSH
55822: CALL_OW 263
55826: PUSH
55827: LD_INT 1
55829: EQUAL
55830: IFFALSE 55911
// begin driver := IsDrivenBy ( vehicle ) ;
55832: LD_ADDR_VAR 0 4
55836: PUSH
55837: LD_VAR 0 1
55841: PPUSH
55842: CALL_OW 311
55846: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
55847: LD_VAR 0 4
55851: PPUSH
55852: LD_EXP 94
55856: PUSH
55857: LD_VAR 0 2
55861: ARRAY
55862: PUSH
55863: LD_INT 3
55865: ARRAY
55866: PPUSH
55867: LD_EXP 94
55871: PUSH
55872: LD_VAR 0 2
55876: ARRAY
55877: PUSH
55878: LD_INT 4
55880: ARRAY
55881: PPUSH
55882: CALL_OW 171
// AddComExitVehicle ( driver ) ;
55886: LD_VAR 0 4
55890: PPUSH
55891: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
55895: LD_VAR 0 4
55899: PPUSH
55900: LD_VAR 0 2
55904: PPUSH
55905: CALL_OW 180
// end else
55909: GO 56024
// if GetControl ( vehicle ) = control_remote then
55911: LD_VAR 0 1
55915: PPUSH
55916: CALL_OW 263
55920: PUSH
55921: LD_INT 2
55923: EQUAL
55924: IFFALSE 55985
// begin wait ( 0 0$2 ) ;
55926: LD_INT 70
55928: PPUSH
55929: CALL_OW 67
// if Connect ( vehicle ) then
55933: LD_VAR 0 1
55937: PPUSH
55938: CALL 8752 0 1
55942: IFFALSE 55983
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
55944: LD_VAR 0 1
55948: PPUSH
55949: LD_EXP 94
55953: PUSH
55954: LD_VAR 0 2
55958: ARRAY
55959: PUSH
55960: LD_INT 3
55962: ARRAY
55963: PPUSH
55964: LD_EXP 94
55968: PUSH
55969: LD_VAR 0 2
55973: ARRAY
55974: PUSH
55975: LD_INT 4
55977: ARRAY
55978: PPUSH
55979: CALL_OW 171
// end else
55983: GO 56024
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
55985: LD_VAR 0 1
55989: PPUSH
55990: LD_EXP 94
55994: PUSH
55995: LD_VAR 0 2
55999: ARRAY
56000: PUSH
56001: LD_INT 3
56003: ARRAY
56004: PPUSH
56005: LD_EXP 94
56009: PUSH
56010: LD_VAR 0 2
56014: ARRAY
56015: PUSH
56016: LD_INT 4
56018: ARRAY
56019: PPUSH
56020: CALL_OW 171
// end ; end ;
56024: LD_VAR 0 3
56028: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56029: LD_INT 0
56031: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56032: LD_VAR 0 1
56036: PUSH
56037: LD_INT 250
56039: EQUAL
56040: PUSH
56041: LD_VAR 0 2
56045: PPUSH
56046: CALL_OW 264
56050: PUSH
56051: LD_EXP 23
56055: EQUAL
56056: AND
56057: IFFALSE 56078
// MinerPlaceMine ( unit , x , y ) ;
56059: LD_VAR 0 2
56063: PPUSH
56064: LD_VAR 0 4
56068: PPUSH
56069: LD_VAR 0 5
56073: PPUSH
56074: CALL 58806 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56078: LD_VAR 0 1
56082: PUSH
56083: LD_INT 251
56085: EQUAL
56086: PUSH
56087: LD_VAR 0 2
56091: PPUSH
56092: CALL_OW 264
56096: PUSH
56097: LD_EXP 23
56101: EQUAL
56102: AND
56103: IFFALSE 56124
// MinerDetonateMine ( unit , x , y ) ;
56105: LD_VAR 0 2
56109: PPUSH
56110: LD_VAR 0 4
56114: PPUSH
56115: LD_VAR 0 5
56119: PPUSH
56120: CALL 59083 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56124: LD_VAR 0 1
56128: PUSH
56129: LD_INT 252
56131: EQUAL
56132: PUSH
56133: LD_VAR 0 2
56137: PPUSH
56138: CALL_OW 264
56142: PUSH
56143: LD_EXP 23
56147: EQUAL
56148: AND
56149: IFFALSE 56170
// MinerCreateMinefield ( unit , x , y ) ;
56151: LD_VAR 0 2
56155: PPUSH
56156: LD_VAR 0 4
56160: PPUSH
56161: LD_VAR 0 5
56165: PPUSH
56166: CALL 59500 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
56170: LD_VAR 0 1
56174: PUSH
56175: LD_INT 253
56177: EQUAL
56178: PUSH
56179: LD_VAR 0 2
56183: PPUSH
56184: CALL_OW 257
56188: PUSH
56189: LD_INT 5
56191: EQUAL
56192: AND
56193: IFFALSE 56214
// ComBinocular ( unit , x , y ) ;
56195: LD_VAR 0 2
56199: PPUSH
56200: LD_VAR 0 4
56204: PPUSH
56205: LD_VAR 0 5
56209: PPUSH
56210: CALL 59871 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56214: LD_VAR 0 1
56218: PUSH
56219: LD_INT 254
56221: EQUAL
56222: PUSH
56223: LD_VAR 0 2
56227: PPUSH
56228: CALL_OW 264
56232: PUSH
56233: LD_EXP 18
56237: EQUAL
56238: AND
56239: PUSH
56240: LD_VAR 0 3
56244: PPUSH
56245: CALL_OW 263
56249: PUSH
56250: LD_INT 3
56252: EQUAL
56253: AND
56254: IFFALSE 56270
// HackDestroyVehicle ( unit , selectedUnit ) ;
56256: LD_VAR 0 2
56260: PPUSH
56261: LD_VAR 0 3
56265: PPUSH
56266: CALL 58166 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56270: LD_VAR 0 1
56274: PUSH
56275: LD_INT 255
56277: EQUAL
56278: PUSH
56279: LD_VAR 0 2
56283: PPUSH
56284: CALL_OW 264
56288: PUSH
56289: LD_INT 14
56291: PUSH
56292: LD_INT 53
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: IN
56299: AND
56300: PUSH
56301: LD_VAR 0 4
56305: PPUSH
56306: LD_VAR 0 5
56310: PPUSH
56311: CALL_OW 488
56315: AND
56316: IFFALSE 56340
// CutTreeXYR ( unit , x , y , 12 ) ;
56318: LD_VAR 0 2
56322: PPUSH
56323: LD_VAR 0 4
56327: PPUSH
56328: LD_VAR 0 5
56332: PPUSH
56333: LD_INT 12
56335: PPUSH
56336: CALL 56732 0 4
// if cmd = 256 then
56340: LD_VAR 0 1
56344: PUSH
56345: LD_INT 256
56347: EQUAL
56348: IFFALSE 56369
// SetFactoryWaypoint ( unit , x , y ) ;
56350: LD_VAR 0 2
56354: PPUSH
56355: LD_VAR 0 4
56359: PPUSH
56360: LD_VAR 0 5
56364: PPUSH
56365: CALL 56374 0 3
// end ;
56369: LD_VAR 0 6
56373: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
56374: LD_INT 0
56376: PPUSH
56377: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
56378: LD_VAR 0 1
56382: NOT
56383: PUSH
56384: LD_VAR 0 2
56388: PPUSH
56389: LD_VAR 0 3
56393: PPUSH
56394: CALL_OW 488
56398: NOT
56399: OR
56400: PUSH
56401: LD_VAR 0 1
56405: PPUSH
56406: CALL_OW 266
56410: PUSH
56411: LD_INT 3
56413: NONEQUAL
56414: PUSH
56415: LD_VAR 0 1
56419: PPUSH
56420: CALL_OW 247
56424: PUSH
56425: LD_INT 1
56427: EQUAL
56428: NOT
56429: AND
56430: OR
56431: IFFALSE 56435
// exit ;
56433: GO 56584
// if GetType ( factory ) = unit_human then
56435: LD_VAR 0 1
56439: PPUSH
56440: CALL_OW 247
56444: PUSH
56445: LD_INT 1
56447: EQUAL
56448: IFFALSE 56465
// factory := IsInUnit ( factory ) ;
56450: LD_ADDR_VAR 0 1
56454: PUSH
56455: LD_VAR 0 1
56459: PPUSH
56460: CALL_OW 310
56464: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
56465: LD_VAR 0 1
56469: PPUSH
56470: CALL_OW 266
56474: PUSH
56475: LD_INT 3
56477: NONEQUAL
56478: IFFALSE 56482
// exit ;
56480: GO 56584
// if HexInfo ( x , y ) = factory then
56482: LD_VAR 0 2
56486: PPUSH
56487: LD_VAR 0 3
56491: PPUSH
56492: CALL_OW 428
56496: PUSH
56497: LD_VAR 0 1
56501: EQUAL
56502: IFFALSE 56529
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
56504: LD_ADDR_EXP 94
56508: PUSH
56509: LD_EXP 94
56513: PPUSH
56514: LD_VAR 0 1
56518: PPUSH
56519: LD_INT 0
56521: PPUSH
56522: CALL_OW 1
56526: ST_TO_ADDR
56527: GO 56580
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
56529: LD_ADDR_EXP 94
56533: PUSH
56534: LD_EXP 94
56538: PPUSH
56539: LD_VAR 0 1
56543: PPUSH
56544: LD_VAR 0 1
56548: PPUSH
56549: CALL_OW 255
56553: PUSH
56554: LD_VAR 0 1
56558: PUSH
56559: LD_VAR 0 2
56563: PUSH
56564: LD_VAR 0 3
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: PPUSH
56575: CALL_OW 1
56579: ST_TO_ADDR
// UpdateFactoryWaypoints ;
56580: CALL 56589 0 0
// end ;
56584: LD_VAR 0 4
56588: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
56589: LD_INT 0
56591: PPUSH
56592: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
56593: LD_STRING resetFactoryWaypoint();
56595: PPUSH
56596: CALL_OW 559
// if factoryWaypoints then
56600: LD_EXP 94
56604: IFFALSE 56727
// begin for i := 1 to factoryWaypoints do
56606: LD_ADDR_VAR 0 2
56610: PUSH
56611: DOUBLE
56612: LD_INT 1
56614: DEC
56615: ST_TO_ADDR
56616: LD_EXP 94
56620: PUSH
56621: FOR_TO
56622: IFFALSE 56725
// if factoryWaypoints [ i ] then
56624: LD_EXP 94
56628: PUSH
56629: LD_VAR 0 2
56633: ARRAY
56634: IFFALSE 56723
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
56636: LD_STRING setFactoryWaypointXY(
56638: PUSH
56639: LD_EXP 94
56643: PUSH
56644: LD_VAR 0 2
56648: ARRAY
56649: PUSH
56650: LD_INT 1
56652: ARRAY
56653: STR
56654: PUSH
56655: LD_STRING ,
56657: STR
56658: PUSH
56659: LD_EXP 94
56663: PUSH
56664: LD_VAR 0 2
56668: ARRAY
56669: PUSH
56670: LD_INT 2
56672: ARRAY
56673: STR
56674: PUSH
56675: LD_STRING ,
56677: STR
56678: PUSH
56679: LD_EXP 94
56683: PUSH
56684: LD_VAR 0 2
56688: ARRAY
56689: PUSH
56690: LD_INT 3
56692: ARRAY
56693: STR
56694: PUSH
56695: LD_STRING ,
56697: STR
56698: PUSH
56699: LD_EXP 94
56703: PUSH
56704: LD_VAR 0 2
56708: ARRAY
56709: PUSH
56710: LD_INT 4
56712: ARRAY
56713: STR
56714: PUSH
56715: LD_STRING )
56717: STR
56718: PPUSH
56719: CALL_OW 559
56723: GO 56621
56725: POP
56726: POP
// end ; end ;
56727: LD_VAR 0 1
56731: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56732: LD_INT 0
56734: PPUSH
56735: PPUSH
56736: PPUSH
56737: PPUSH
56738: PPUSH
56739: PPUSH
56740: PPUSH
56741: PPUSH
56742: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
56743: LD_VAR 0 1
56747: NOT
56748: PUSH
56749: LD_VAR 0 2
56753: PPUSH
56754: LD_VAR 0 3
56758: PPUSH
56759: CALL_OW 488
56763: NOT
56764: OR
56765: PUSH
56766: LD_VAR 0 4
56770: NOT
56771: OR
56772: IFFALSE 56776
// exit ;
56774: GO 57116
// list := [ ] ;
56776: LD_ADDR_VAR 0 13
56780: PUSH
56781: EMPTY
56782: ST_TO_ADDR
// if x - r < 0 then
56783: LD_VAR 0 2
56787: PUSH
56788: LD_VAR 0 4
56792: MINUS
56793: PUSH
56794: LD_INT 0
56796: LESS
56797: IFFALSE 56809
// min_x := 0 else
56799: LD_ADDR_VAR 0 7
56803: PUSH
56804: LD_INT 0
56806: ST_TO_ADDR
56807: GO 56825
// min_x := x - r ;
56809: LD_ADDR_VAR 0 7
56813: PUSH
56814: LD_VAR 0 2
56818: PUSH
56819: LD_VAR 0 4
56823: MINUS
56824: ST_TO_ADDR
// if y - r < 0 then
56825: LD_VAR 0 3
56829: PUSH
56830: LD_VAR 0 4
56834: MINUS
56835: PUSH
56836: LD_INT 0
56838: LESS
56839: IFFALSE 56851
// min_y := 0 else
56841: LD_ADDR_VAR 0 8
56845: PUSH
56846: LD_INT 0
56848: ST_TO_ADDR
56849: GO 56867
// min_y := y - r ;
56851: LD_ADDR_VAR 0 8
56855: PUSH
56856: LD_VAR 0 3
56860: PUSH
56861: LD_VAR 0 4
56865: MINUS
56866: ST_TO_ADDR
// max_x := x + r ;
56867: LD_ADDR_VAR 0 9
56871: PUSH
56872: LD_VAR 0 2
56876: PUSH
56877: LD_VAR 0 4
56881: PLUS
56882: ST_TO_ADDR
// max_y := y + r ;
56883: LD_ADDR_VAR 0 10
56887: PUSH
56888: LD_VAR 0 3
56892: PUSH
56893: LD_VAR 0 4
56897: PLUS
56898: ST_TO_ADDR
// for _x = min_x to max_x do
56899: LD_ADDR_VAR 0 11
56903: PUSH
56904: DOUBLE
56905: LD_VAR 0 7
56909: DEC
56910: ST_TO_ADDR
56911: LD_VAR 0 9
56915: PUSH
56916: FOR_TO
56917: IFFALSE 57034
// for _y = min_y to max_y do
56919: LD_ADDR_VAR 0 12
56923: PUSH
56924: DOUBLE
56925: LD_VAR 0 8
56929: DEC
56930: ST_TO_ADDR
56931: LD_VAR 0 10
56935: PUSH
56936: FOR_TO
56937: IFFALSE 57030
// begin if not ValidHex ( _x , _y ) then
56939: LD_VAR 0 11
56943: PPUSH
56944: LD_VAR 0 12
56948: PPUSH
56949: CALL_OW 488
56953: NOT
56954: IFFALSE 56958
// continue ;
56956: GO 56936
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56958: LD_VAR 0 11
56962: PPUSH
56963: LD_VAR 0 12
56967: PPUSH
56968: CALL_OW 351
56972: PUSH
56973: LD_VAR 0 11
56977: PPUSH
56978: LD_VAR 0 12
56982: PPUSH
56983: CALL_OW 554
56987: AND
56988: IFFALSE 57028
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56990: LD_ADDR_VAR 0 13
56994: PUSH
56995: LD_VAR 0 13
56999: PPUSH
57000: LD_VAR 0 13
57004: PUSH
57005: LD_INT 1
57007: PLUS
57008: PPUSH
57009: LD_VAR 0 11
57013: PUSH
57014: LD_VAR 0 12
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PPUSH
57023: CALL_OW 2
57027: ST_TO_ADDR
// end ;
57028: GO 56936
57030: POP
57031: POP
57032: GO 56916
57034: POP
57035: POP
// if not list then
57036: LD_VAR 0 13
57040: NOT
57041: IFFALSE 57045
// exit ;
57043: GO 57116
// for i in list do
57045: LD_ADDR_VAR 0 6
57049: PUSH
57050: LD_VAR 0 13
57054: PUSH
57055: FOR_IN
57056: IFFALSE 57114
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57058: LD_VAR 0 1
57062: PPUSH
57063: LD_STRING M
57065: PUSH
57066: LD_VAR 0 6
57070: PUSH
57071: LD_INT 1
57073: ARRAY
57074: PUSH
57075: LD_VAR 0 6
57079: PUSH
57080: LD_INT 2
57082: ARRAY
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: PUSH
57105: EMPTY
57106: LIST
57107: PPUSH
57108: CALL_OW 447
57112: GO 57055
57114: POP
57115: POP
// end ;
57116: LD_VAR 0 5
57120: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57121: LD_EXP 95
57125: NOT
57126: IFFALSE 57176
57128: GO 57130
57130: DISABLE
// begin initHack := true ;
57131: LD_ADDR_EXP 95
57135: PUSH
57136: LD_INT 1
57138: ST_TO_ADDR
// hackTanks := [ ] ;
57139: LD_ADDR_EXP 96
57143: PUSH
57144: EMPTY
57145: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57146: LD_ADDR_EXP 97
57150: PUSH
57151: EMPTY
57152: ST_TO_ADDR
// hackLimit := 3 ;
57153: LD_ADDR_EXP 98
57157: PUSH
57158: LD_INT 3
57160: ST_TO_ADDR
// hackDist := 12 ;
57161: LD_ADDR_EXP 99
57165: PUSH
57166: LD_INT 12
57168: ST_TO_ADDR
// hackCounter := [ ] ;
57169: LD_ADDR_EXP 100
57173: PUSH
57174: EMPTY
57175: ST_TO_ADDR
// end ;
57176: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57177: LD_EXP 95
57181: PUSH
57182: LD_INT 34
57184: PUSH
57185: LD_EXP 18
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PPUSH
57194: CALL_OW 69
57198: AND
57199: IFFALSE 57454
57201: GO 57203
57203: DISABLE
57204: LD_INT 0
57206: PPUSH
57207: PPUSH
// begin enable ;
57208: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57209: LD_ADDR_VAR 0 1
57213: PUSH
57214: LD_INT 34
57216: PUSH
57217: LD_EXP 18
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PPUSH
57226: CALL_OW 69
57230: PUSH
57231: FOR_IN
57232: IFFALSE 57452
// begin if not i in hackTanks then
57234: LD_VAR 0 1
57238: PUSH
57239: LD_EXP 96
57243: IN
57244: NOT
57245: IFFALSE 57328
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57247: LD_ADDR_EXP 96
57251: PUSH
57252: LD_EXP 96
57256: PPUSH
57257: LD_EXP 96
57261: PUSH
57262: LD_INT 1
57264: PLUS
57265: PPUSH
57266: LD_VAR 0 1
57270: PPUSH
57271: CALL_OW 1
57275: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57276: LD_ADDR_EXP 97
57280: PUSH
57281: LD_EXP 97
57285: PPUSH
57286: LD_EXP 97
57290: PUSH
57291: LD_INT 1
57293: PLUS
57294: PPUSH
57295: EMPTY
57296: PPUSH
57297: CALL_OW 1
57301: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57302: LD_ADDR_EXP 100
57306: PUSH
57307: LD_EXP 100
57311: PPUSH
57312: LD_EXP 100
57316: PUSH
57317: LD_INT 1
57319: PLUS
57320: PPUSH
57321: EMPTY
57322: PPUSH
57323: CALL_OW 1
57327: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57328: LD_VAR 0 1
57332: PPUSH
57333: CALL_OW 302
57337: NOT
57338: IFFALSE 57351
// begin HackUnlinkAll ( i ) ;
57340: LD_VAR 0 1
57344: PPUSH
57345: CALL 57457 0 1
// continue ;
57349: GO 57231
// end ; HackCheckCapturedStatus ( i ) ;
57351: LD_VAR 0 1
57355: PPUSH
57356: CALL 57900 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57360: LD_ADDR_VAR 0 2
57364: PUSH
57365: LD_INT 81
57367: PUSH
57368: LD_VAR 0 1
57372: PPUSH
57373: CALL_OW 255
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 33
57384: PUSH
57385: LD_INT 3
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 91
57394: PUSH
57395: LD_VAR 0 1
57399: PUSH
57400: LD_EXP 99
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 50
57412: PUSH
57413: EMPTY
57414: LIST
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: PPUSH
57422: CALL_OW 69
57426: ST_TO_ADDR
// if not tmp then
57427: LD_VAR 0 2
57431: NOT
57432: IFFALSE 57436
// continue ;
57434: GO 57231
// HackLink ( i , tmp ) ;
57436: LD_VAR 0 1
57440: PPUSH
57441: LD_VAR 0 2
57445: PPUSH
57446: CALL 57593 0 2
// end ;
57450: GO 57231
57452: POP
57453: POP
// end ;
57454: PPOPN 2
57456: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57457: LD_INT 0
57459: PPUSH
57460: PPUSH
57461: PPUSH
// if not hack in hackTanks then
57462: LD_VAR 0 1
57466: PUSH
57467: LD_EXP 96
57471: IN
57472: NOT
57473: IFFALSE 57477
// exit ;
57475: GO 57588
// index := GetElementIndex ( hackTanks , hack ) ;
57477: LD_ADDR_VAR 0 4
57481: PUSH
57482: LD_EXP 96
57486: PPUSH
57487: LD_VAR 0 1
57491: PPUSH
57492: CALL 5566 0 2
57496: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57497: LD_EXP 97
57501: PUSH
57502: LD_VAR 0 4
57506: ARRAY
57507: IFFALSE 57588
// begin for i in hackTanksCaptured [ index ] do
57509: LD_ADDR_VAR 0 3
57513: PUSH
57514: LD_EXP 97
57518: PUSH
57519: LD_VAR 0 4
57523: ARRAY
57524: PUSH
57525: FOR_IN
57526: IFFALSE 57552
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57528: LD_VAR 0 3
57532: PUSH
57533: LD_INT 1
57535: ARRAY
57536: PPUSH
57537: LD_VAR 0 3
57541: PUSH
57542: LD_INT 2
57544: ARRAY
57545: PPUSH
57546: CALL_OW 235
57550: GO 57525
57552: POP
57553: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57554: LD_ADDR_EXP 97
57558: PUSH
57559: LD_EXP 97
57563: PPUSH
57564: LD_VAR 0 4
57568: PPUSH
57569: EMPTY
57570: PPUSH
57571: CALL_OW 1
57575: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57576: LD_VAR 0 1
57580: PPUSH
57581: LD_INT 0
57583: PPUSH
57584: CALL_OW 505
// end ; end ;
57588: LD_VAR 0 2
57592: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57593: LD_INT 0
57595: PPUSH
57596: PPUSH
57597: PPUSH
// if not hack in hackTanks or not vehicles then
57598: LD_VAR 0 1
57602: PUSH
57603: LD_EXP 96
57607: IN
57608: NOT
57609: PUSH
57610: LD_VAR 0 2
57614: NOT
57615: OR
57616: IFFALSE 57620
// exit ;
57618: GO 57895
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57620: LD_ADDR_VAR 0 2
57624: PUSH
57625: LD_VAR 0 1
57629: PPUSH
57630: LD_VAR 0 2
57634: PPUSH
57635: LD_INT 1
57637: PPUSH
57638: LD_INT 1
57640: PPUSH
57641: CALL 6216 0 4
57645: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57646: LD_ADDR_VAR 0 5
57650: PUSH
57651: LD_EXP 96
57655: PPUSH
57656: LD_VAR 0 1
57660: PPUSH
57661: CALL 5566 0 2
57665: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57666: LD_EXP 97
57670: PUSH
57671: LD_VAR 0 5
57675: ARRAY
57676: PUSH
57677: LD_EXP 98
57681: LESS
57682: IFFALSE 57871
// begin for i := 1 to vehicles do
57684: LD_ADDR_VAR 0 4
57688: PUSH
57689: DOUBLE
57690: LD_INT 1
57692: DEC
57693: ST_TO_ADDR
57694: LD_VAR 0 2
57698: PUSH
57699: FOR_TO
57700: IFFALSE 57869
// begin if hackTanksCaptured [ index ] = hackLimit then
57702: LD_EXP 97
57706: PUSH
57707: LD_VAR 0 5
57711: ARRAY
57712: PUSH
57713: LD_EXP 98
57717: EQUAL
57718: IFFALSE 57722
// break ;
57720: GO 57869
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57722: LD_ADDR_EXP 100
57726: PUSH
57727: LD_EXP 100
57731: PPUSH
57732: LD_VAR 0 5
57736: PPUSH
57737: LD_EXP 100
57741: PUSH
57742: LD_VAR 0 5
57746: ARRAY
57747: PUSH
57748: LD_INT 1
57750: PLUS
57751: PPUSH
57752: CALL_OW 1
57756: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57757: LD_ADDR_EXP 97
57761: PUSH
57762: LD_EXP 97
57766: PPUSH
57767: LD_VAR 0 5
57771: PUSH
57772: LD_EXP 97
57776: PUSH
57777: LD_VAR 0 5
57781: ARRAY
57782: PUSH
57783: LD_INT 1
57785: PLUS
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PPUSH
57791: LD_VAR 0 2
57795: PUSH
57796: LD_VAR 0 4
57800: ARRAY
57801: PUSH
57802: LD_VAR 0 2
57806: PUSH
57807: LD_VAR 0 4
57811: ARRAY
57812: PPUSH
57813: CALL_OW 255
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PPUSH
57822: CALL 5781 0 3
57826: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
57827: LD_VAR 0 2
57831: PUSH
57832: LD_VAR 0 4
57836: ARRAY
57837: PPUSH
57838: LD_VAR 0 1
57842: PPUSH
57843: CALL_OW 255
57847: PPUSH
57848: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
57852: LD_VAR 0 2
57856: PUSH
57857: LD_VAR 0 4
57861: ARRAY
57862: PPUSH
57863: CALL_OW 141
// end ;
57867: GO 57699
57869: POP
57870: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57871: LD_VAR 0 1
57875: PPUSH
57876: LD_EXP 97
57880: PUSH
57881: LD_VAR 0 5
57885: ARRAY
57886: PUSH
57887: LD_INT 0
57889: PLUS
57890: PPUSH
57891: CALL_OW 505
// end ;
57895: LD_VAR 0 3
57899: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
57900: LD_INT 0
57902: PPUSH
57903: PPUSH
57904: PPUSH
57905: PPUSH
// if not hack in hackTanks then
57906: LD_VAR 0 1
57910: PUSH
57911: LD_EXP 96
57915: IN
57916: NOT
57917: IFFALSE 57921
// exit ;
57919: GO 58161
// index := GetElementIndex ( hackTanks , hack ) ;
57921: LD_ADDR_VAR 0 4
57925: PUSH
57926: LD_EXP 96
57930: PPUSH
57931: LD_VAR 0 1
57935: PPUSH
57936: CALL 5566 0 2
57940: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
57941: LD_ADDR_VAR 0 3
57945: PUSH
57946: DOUBLE
57947: LD_EXP 97
57951: PUSH
57952: LD_VAR 0 4
57956: ARRAY
57957: INC
57958: ST_TO_ADDR
57959: LD_INT 1
57961: PUSH
57962: FOR_DOWNTO
57963: IFFALSE 58135
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
57965: LD_ADDR_VAR 0 5
57969: PUSH
57970: LD_EXP 97
57974: PUSH
57975: LD_VAR 0 4
57979: ARRAY
57980: PUSH
57981: LD_VAR 0 3
57985: ARRAY
57986: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
57987: LD_VAR 0 5
57991: PUSH
57992: LD_INT 1
57994: ARRAY
57995: PPUSH
57996: CALL_OW 302
58000: NOT
58001: PUSH
58002: LD_VAR 0 5
58006: PUSH
58007: LD_INT 1
58009: ARRAY
58010: PPUSH
58011: CALL_OW 255
58015: PUSH
58016: LD_VAR 0 1
58020: PPUSH
58021: CALL_OW 255
58025: NONEQUAL
58026: OR
58027: IFFALSE 58133
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58029: LD_VAR 0 5
58033: PUSH
58034: LD_INT 1
58036: ARRAY
58037: PPUSH
58038: CALL_OW 305
58042: PUSH
58043: LD_VAR 0 5
58047: PUSH
58048: LD_INT 1
58050: ARRAY
58051: PPUSH
58052: CALL_OW 255
58056: PUSH
58057: LD_VAR 0 1
58061: PPUSH
58062: CALL_OW 255
58066: EQUAL
58067: AND
58068: IFFALSE 58092
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58070: LD_VAR 0 5
58074: PUSH
58075: LD_INT 1
58077: ARRAY
58078: PPUSH
58079: LD_VAR 0 5
58083: PUSH
58084: LD_INT 2
58086: ARRAY
58087: PPUSH
58088: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58092: LD_ADDR_EXP 97
58096: PUSH
58097: LD_EXP 97
58101: PPUSH
58102: LD_VAR 0 4
58106: PPUSH
58107: LD_EXP 97
58111: PUSH
58112: LD_VAR 0 4
58116: ARRAY
58117: PPUSH
58118: LD_VAR 0 3
58122: PPUSH
58123: CALL_OW 3
58127: PPUSH
58128: CALL_OW 1
58132: ST_TO_ADDR
// end ; end ;
58133: GO 57962
58135: POP
58136: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58137: LD_VAR 0 1
58141: PPUSH
58142: LD_EXP 97
58146: PUSH
58147: LD_VAR 0 4
58151: ARRAY
58152: PUSH
58153: LD_INT 0
58155: PLUS
58156: PPUSH
58157: CALL_OW 505
// end ;
58161: LD_VAR 0 2
58165: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58166: LD_INT 0
58168: PPUSH
58169: PPUSH
58170: PPUSH
58171: PPUSH
// if not hack in hackTanks then
58172: LD_VAR 0 1
58176: PUSH
58177: LD_EXP 96
58181: IN
58182: NOT
58183: IFFALSE 58187
// exit ;
58185: GO 58272
// index := GetElementIndex ( hackTanks , hack ) ;
58187: LD_ADDR_VAR 0 5
58191: PUSH
58192: LD_EXP 96
58196: PPUSH
58197: LD_VAR 0 1
58201: PPUSH
58202: CALL 5566 0 2
58206: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58207: LD_ADDR_VAR 0 4
58211: PUSH
58212: DOUBLE
58213: LD_INT 1
58215: DEC
58216: ST_TO_ADDR
58217: LD_EXP 97
58221: PUSH
58222: LD_VAR 0 5
58226: ARRAY
58227: PUSH
58228: FOR_TO
58229: IFFALSE 58270
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58231: LD_EXP 97
58235: PUSH
58236: LD_VAR 0 5
58240: ARRAY
58241: PUSH
58242: LD_VAR 0 4
58246: ARRAY
58247: PUSH
58248: LD_INT 1
58250: ARRAY
58251: PUSH
58252: LD_VAR 0 2
58256: EQUAL
58257: IFFALSE 58268
// KillUnit ( vehicle ) ;
58259: LD_VAR 0 2
58263: PPUSH
58264: CALL_OW 66
58268: GO 58228
58270: POP
58271: POP
// end ;
58272: LD_VAR 0 3
58276: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
58277: LD_EXP 101
58281: NOT
58282: IFFALSE 58317
58284: GO 58286
58286: DISABLE
// begin initMiner := true ;
58287: LD_ADDR_EXP 101
58291: PUSH
58292: LD_INT 1
58294: ST_TO_ADDR
// minersList := [ ] ;
58295: LD_ADDR_EXP 102
58299: PUSH
58300: EMPTY
58301: ST_TO_ADDR
// minerMinesList := [ ] ;
58302: LD_ADDR_EXP 103
58306: PUSH
58307: EMPTY
58308: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
58309: LD_ADDR_EXP 104
58313: PUSH
58314: LD_INT 5
58316: ST_TO_ADDR
// end ;
58317: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
58318: LD_EXP 101
58322: PUSH
58323: LD_INT 34
58325: PUSH
58326: LD_EXP 23
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PPUSH
58335: CALL_OW 69
58339: AND
58340: IFFALSE 58803
58342: GO 58344
58344: DISABLE
58345: LD_INT 0
58347: PPUSH
58348: PPUSH
58349: PPUSH
58350: PPUSH
// begin enable ;
58351: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58352: LD_ADDR_VAR 0 1
58356: PUSH
58357: LD_INT 34
58359: PUSH
58360: LD_EXP 23
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PPUSH
58369: CALL_OW 69
58373: PUSH
58374: FOR_IN
58375: IFFALSE 58447
// begin if not i in minersList then
58377: LD_VAR 0 1
58381: PUSH
58382: LD_EXP 102
58386: IN
58387: NOT
58388: IFFALSE 58445
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58390: LD_ADDR_EXP 102
58394: PUSH
58395: LD_EXP 102
58399: PPUSH
58400: LD_EXP 102
58404: PUSH
58405: LD_INT 1
58407: PLUS
58408: PPUSH
58409: LD_VAR 0 1
58413: PPUSH
58414: CALL_OW 1
58418: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58419: LD_ADDR_EXP 103
58423: PUSH
58424: LD_EXP 103
58428: PPUSH
58429: LD_EXP 103
58433: PUSH
58434: LD_INT 1
58436: PLUS
58437: PPUSH
58438: EMPTY
58439: PPUSH
58440: CALL_OW 1
58444: ST_TO_ADDR
// end end ;
58445: GO 58374
58447: POP
58448: POP
// for i := minerMinesList downto 1 do
58449: LD_ADDR_VAR 0 1
58453: PUSH
58454: DOUBLE
58455: LD_EXP 103
58459: INC
58460: ST_TO_ADDR
58461: LD_INT 1
58463: PUSH
58464: FOR_DOWNTO
58465: IFFALSE 58801
// begin if IsLive ( minersList [ i ] ) then
58467: LD_EXP 102
58471: PUSH
58472: LD_VAR 0 1
58476: ARRAY
58477: PPUSH
58478: CALL_OW 300
58482: IFFALSE 58510
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
58484: LD_EXP 102
58488: PUSH
58489: LD_VAR 0 1
58493: ARRAY
58494: PPUSH
58495: LD_EXP 103
58499: PUSH
58500: LD_VAR 0 1
58504: ARRAY
58505: PPUSH
58506: CALL_OW 505
// if not minerMinesList [ i ] then
58510: LD_EXP 103
58514: PUSH
58515: LD_VAR 0 1
58519: ARRAY
58520: NOT
58521: IFFALSE 58525
// continue ;
58523: GO 58464
// for j := minerMinesList [ i ] downto 1 do
58525: LD_ADDR_VAR 0 2
58529: PUSH
58530: DOUBLE
58531: LD_EXP 103
58535: PUSH
58536: LD_VAR 0 1
58540: ARRAY
58541: INC
58542: ST_TO_ADDR
58543: LD_INT 1
58545: PUSH
58546: FOR_DOWNTO
58547: IFFALSE 58797
// begin side := GetSide ( minersList [ i ] ) ;
58549: LD_ADDR_VAR 0 3
58553: PUSH
58554: LD_EXP 102
58558: PUSH
58559: LD_VAR 0 1
58563: ARRAY
58564: PPUSH
58565: CALL_OW 255
58569: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58570: LD_ADDR_VAR 0 4
58574: PUSH
58575: LD_EXP 103
58579: PUSH
58580: LD_VAR 0 1
58584: ARRAY
58585: PUSH
58586: LD_VAR 0 2
58590: ARRAY
58591: PUSH
58592: LD_INT 1
58594: ARRAY
58595: PPUSH
58596: LD_EXP 103
58600: PUSH
58601: LD_VAR 0 1
58605: ARRAY
58606: PUSH
58607: LD_VAR 0 2
58611: ARRAY
58612: PUSH
58613: LD_INT 2
58615: ARRAY
58616: PPUSH
58617: CALL_OW 428
58621: ST_TO_ADDR
// if not tmp then
58622: LD_VAR 0 4
58626: NOT
58627: IFFALSE 58631
// continue ;
58629: GO 58546
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
58631: LD_VAR 0 4
58635: PUSH
58636: LD_INT 81
58638: PUSH
58639: LD_VAR 0 3
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PPUSH
58648: CALL_OW 69
58652: IN
58653: PUSH
58654: LD_EXP 103
58658: PUSH
58659: LD_VAR 0 1
58663: ARRAY
58664: PUSH
58665: LD_VAR 0 2
58669: ARRAY
58670: PUSH
58671: LD_INT 1
58673: ARRAY
58674: PPUSH
58675: LD_EXP 103
58679: PUSH
58680: LD_VAR 0 1
58684: ARRAY
58685: PUSH
58686: LD_VAR 0 2
58690: ARRAY
58691: PUSH
58692: LD_INT 2
58694: ARRAY
58695: PPUSH
58696: CALL_OW 458
58700: AND
58701: IFFALSE 58795
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
58703: LD_EXP 103
58707: PUSH
58708: LD_VAR 0 1
58712: ARRAY
58713: PUSH
58714: LD_VAR 0 2
58718: ARRAY
58719: PUSH
58720: LD_INT 1
58722: ARRAY
58723: PPUSH
58724: LD_EXP 103
58728: PUSH
58729: LD_VAR 0 1
58733: ARRAY
58734: PUSH
58735: LD_VAR 0 2
58739: ARRAY
58740: PUSH
58741: LD_INT 2
58743: ARRAY
58744: PPUSH
58745: LD_VAR 0 3
58749: PPUSH
58750: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58754: LD_ADDR_EXP 103
58758: PUSH
58759: LD_EXP 103
58763: PPUSH
58764: LD_VAR 0 1
58768: PPUSH
58769: LD_EXP 103
58773: PUSH
58774: LD_VAR 0 1
58778: ARRAY
58779: PPUSH
58780: LD_VAR 0 2
58784: PPUSH
58785: CALL_OW 3
58789: PPUSH
58790: CALL_OW 1
58794: ST_TO_ADDR
// end ; end ;
58795: GO 58546
58797: POP
58798: POP
// end ;
58799: GO 58464
58801: POP
58802: POP
// end ;
58803: PPOPN 4
58805: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
58806: LD_INT 0
58808: PPUSH
58809: PPUSH
// result := false ;
58810: LD_ADDR_VAR 0 4
58814: PUSH
58815: LD_INT 0
58817: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
58818: LD_VAR 0 1
58822: PPUSH
58823: CALL_OW 264
58827: PUSH
58828: LD_EXP 23
58832: EQUAL
58833: NOT
58834: IFFALSE 58838
// exit ;
58836: GO 59078
// index := GetElementIndex ( minersList , unit ) ;
58838: LD_ADDR_VAR 0 5
58842: PUSH
58843: LD_EXP 102
58847: PPUSH
58848: LD_VAR 0 1
58852: PPUSH
58853: CALL 5566 0 2
58857: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
58858: LD_EXP 103
58862: PUSH
58863: LD_VAR 0 5
58867: ARRAY
58868: PUSH
58869: LD_EXP 104
58873: GREATEREQUAL
58874: IFFALSE 58878
// exit ;
58876: GO 59078
// ComMoveXY ( unit , x , y ) ;
58878: LD_VAR 0 1
58882: PPUSH
58883: LD_VAR 0 2
58887: PPUSH
58888: LD_VAR 0 3
58892: PPUSH
58893: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58897: LD_INT 35
58899: PPUSH
58900: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
58904: LD_VAR 0 1
58908: PPUSH
58909: LD_VAR 0 2
58913: PPUSH
58914: LD_VAR 0 3
58918: PPUSH
58919: CALL 36285 0 3
58923: NOT
58924: PUSH
58925: LD_VAR 0 1
58929: PPUSH
58930: CALL_OW 314
58934: AND
58935: IFFALSE 58939
// exit ;
58937: GO 59078
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
58939: LD_VAR 0 2
58943: PPUSH
58944: LD_VAR 0 3
58948: PPUSH
58949: CALL_OW 428
58953: PUSH
58954: LD_VAR 0 1
58958: EQUAL
58959: PUSH
58960: LD_VAR 0 1
58964: PPUSH
58965: CALL_OW 314
58969: NOT
58970: AND
58971: IFFALSE 58897
// PlaySoundXY ( x , y , PlantMine ) ;
58973: LD_VAR 0 2
58977: PPUSH
58978: LD_VAR 0 3
58982: PPUSH
58983: LD_STRING PlantMine
58985: PPUSH
58986: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
58990: LD_VAR 0 2
58994: PPUSH
58995: LD_VAR 0 3
58999: PPUSH
59000: LD_VAR 0 1
59004: PPUSH
59005: CALL_OW 255
59009: PPUSH
59010: LD_INT 0
59012: PPUSH
59013: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59017: LD_ADDR_EXP 103
59021: PUSH
59022: LD_EXP 103
59026: PPUSH
59027: LD_VAR 0 5
59031: PUSH
59032: LD_EXP 103
59036: PUSH
59037: LD_VAR 0 5
59041: ARRAY
59042: PUSH
59043: LD_INT 1
59045: PLUS
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PPUSH
59051: LD_VAR 0 2
59055: PUSH
59056: LD_VAR 0 3
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PPUSH
59065: CALL 5781 0 3
59069: ST_TO_ADDR
// result := true ;
59070: LD_ADDR_VAR 0 4
59074: PUSH
59075: LD_INT 1
59077: ST_TO_ADDR
// end ;
59078: LD_VAR 0 4
59082: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59083: LD_INT 0
59085: PPUSH
59086: PPUSH
59087: PPUSH
// if not unit in minersList then
59088: LD_VAR 0 1
59092: PUSH
59093: LD_EXP 102
59097: IN
59098: NOT
59099: IFFALSE 59103
// exit ;
59101: GO 59495
// index := GetElementIndex ( minersList , unit ) ;
59103: LD_ADDR_VAR 0 6
59107: PUSH
59108: LD_EXP 102
59112: PPUSH
59113: LD_VAR 0 1
59117: PPUSH
59118: CALL 5566 0 2
59122: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59123: LD_ADDR_VAR 0 5
59127: PUSH
59128: DOUBLE
59129: LD_EXP 103
59133: PUSH
59134: LD_VAR 0 6
59138: ARRAY
59139: INC
59140: ST_TO_ADDR
59141: LD_INT 1
59143: PUSH
59144: FOR_DOWNTO
59145: IFFALSE 59306
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
59147: LD_EXP 103
59151: PUSH
59152: LD_VAR 0 6
59156: ARRAY
59157: PUSH
59158: LD_VAR 0 5
59162: ARRAY
59163: PUSH
59164: LD_INT 1
59166: ARRAY
59167: PUSH
59168: LD_VAR 0 2
59172: EQUAL
59173: PUSH
59174: LD_EXP 103
59178: PUSH
59179: LD_VAR 0 6
59183: ARRAY
59184: PUSH
59185: LD_VAR 0 5
59189: ARRAY
59190: PUSH
59191: LD_INT 2
59193: ARRAY
59194: PUSH
59195: LD_VAR 0 3
59199: EQUAL
59200: AND
59201: IFFALSE 59304
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59203: LD_EXP 103
59207: PUSH
59208: LD_VAR 0 6
59212: ARRAY
59213: PUSH
59214: LD_VAR 0 5
59218: ARRAY
59219: PUSH
59220: LD_INT 1
59222: ARRAY
59223: PPUSH
59224: LD_EXP 103
59228: PUSH
59229: LD_VAR 0 6
59233: ARRAY
59234: PUSH
59235: LD_VAR 0 5
59239: ARRAY
59240: PUSH
59241: LD_INT 2
59243: ARRAY
59244: PPUSH
59245: LD_VAR 0 1
59249: PPUSH
59250: CALL_OW 255
59254: PPUSH
59255: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59259: LD_ADDR_EXP 103
59263: PUSH
59264: LD_EXP 103
59268: PPUSH
59269: LD_VAR 0 6
59273: PPUSH
59274: LD_EXP 103
59278: PUSH
59279: LD_VAR 0 6
59283: ARRAY
59284: PPUSH
59285: LD_VAR 0 5
59289: PPUSH
59290: CALL_OW 3
59294: PPUSH
59295: CALL_OW 1
59299: ST_TO_ADDR
// exit ;
59300: POP
59301: POP
59302: GO 59495
// end ; end ;
59304: GO 59144
59306: POP
59307: POP
// for i := minerMinesList [ index ] downto 1 do
59308: LD_ADDR_VAR 0 5
59312: PUSH
59313: DOUBLE
59314: LD_EXP 103
59318: PUSH
59319: LD_VAR 0 6
59323: ARRAY
59324: INC
59325: ST_TO_ADDR
59326: LD_INT 1
59328: PUSH
59329: FOR_DOWNTO
59330: IFFALSE 59493
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59332: LD_EXP 103
59336: PUSH
59337: LD_VAR 0 6
59341: ARRAY
59342: PUSH
59343: LD_VAR 0 5
59347: ARRAY
59348: PUSH
59349: LD_INT 1
59351: ARRAY
59352: PPUSH
59353: LD_EXP 103
59357: PUSH
59358: LD_VAR 0 6
59362: ARRAY
59363: PUSH
59364: LD_VAR 0 5
59368: ARRAY
59369: PUSH
59370: LD_INT 2
59372: ARRAY
59373: PPUSH
59374: LD_VAR 0 2
59378: PPUSH
59379: LD_VAR 0 3
59383: PPUSH
59384: CALL_OW 298
59388: PUSH
59389: LD_INT 6
59391: LESS
59392: IFFALSE 59491
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59394: LD_EXP 103
59398: PUSH
59399: LD_VAR 0 6
59403: ARRAY
59404: PUSH
59405: LD_VAR 0 5
59409: ARRAY
59410: PUSH
59411: LD_INT 1
59413: ARRAY
59414: PPUSH
59415: LD_EXP 103
59419: PUSH
59420: LD_VAR 0 6
59424: ARRAY
59425: PUSH
59426: LD_VAR 0 5
59430: ARRAY
59431: PUSH
59432: LD_INT 2
59434: ARRAY
59435: PPUSH
59436: LD_VAR 0 1
59440: PPUSH
59441: CALL_OW 255
59445: PPUSH
59446: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59450: LD_ADDR_EXP 103
59454: PUSH
59455: LD_EXP 103
59459: PPUSH
59460: LD_VAR 0 6
59464: PPUSH
59465: LD_EXP 103
59469: PUSH
59470: LD_VAR 0 6
59474: ARRAY
59475: PPUSH
59476: LD_VAR 0 5
59480: PPUSH
59481: CALL_OW 3
59485: PPUSH
59486: CALL_OW 1
59490: ST_TO_ADDR
// end ; end ;
59491: GO 59329
59493: POP
59494: POP
// end ;
59495: LD_VAR 0 4
59499: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59500: LD_INT 0
59502: PPUSH
59503: PPUSH
59504: PPUSH
59505: PPUSH
59506: PPUSH
59507: PPUSH
59508: PPUSH
59509: PPUSH
59510: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59511: LD_VAR 0 1
59515: PPUSH
59516: CALL_OW 264
59520: PUSH
59521: LD_EXP 23
59525: EQUAL
59526: NOT
59527: PUSH
59528: LD_VAR 0 1
59532: PUSH
59533: LD_EXP 102
59537: IN
59538: NOT
59539: OR
59540: IFFALSE 59544
// exit ;
59542: GO 59866
// index := GetElementIndex ( minersList , unit ) ;
59544: LD_ADDR_VAR 0 6
59548: PUSH
59549: LD_EXP 102
59553: PPUSH
59554: LD_VAR 0 1
59558: PPUSH
59559: CALL 5566 0 2
59563: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59564: LD_ADDR_VAR 0 8
59568: PUSH
59569: LD_EXP 104
59573: PUSH
59574: LD_EXP 103
59578: PUSH
59579: LD_VAR 0 6
59583: ARRAY
59584: MINUS
59585: ST_TO_ADDR
// if not minesFreeAmount then
59586: LD_VAR 0 8
59590: NOT
59591: IFFALSE 59595
// exit ;
59593: GO 59866
// tmp := [ ] ;
59595: LD_ADDR_VAR 0 7
59599: PUSH
59600: EMPTY
59601: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59602: LD_ADDR_VAR 0 5
59606: PUSH
59607: DOUBLE
59608: LD_INT 1
59610: DEC
59611: ST_TO_ADDR
59612: LD_VAR 0 8
59616: PUSH
59617: FOR_TO
59618: IFFALSE 59813
// begin _d := rand ( 0 , 5 ) ;
59620: LD_ADDR_VAR 0 11
59624: PUSH
59625: LD_INT 0
59627: PPUSH
59628: LD_INT 5
59630: PPUSH
59631: CALL_OW 12
59635: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59636: LD_ADDR_VAR 0 12
59640: PUSH
59641: LD_INT 2
59643: PPUSH
59644: LD_INT 6
59646: PPUSH
59647: CALL_OW 12
59651: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59652: LD_ADDR_VAR 0 9
59656: PUSH
59657: LD_VAR 0 2
59661: PPUSH
59662: LD_VAR 0 11
59666: PPUSH
59667: LD_VAR 0 12
59671: PPUSH
59672: CALL_OW 272
59676: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
59677: LD_ADDR_VAR 0 10
59681: PUSH
59682: LD_VAR 0 3
59686: PPUSH
59687: LD_VAR 0 11
59691: PPUSH
59692: LD_VAR 0 12
59696: PPUSH
59697: CALL_OW 273
59701: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
59702: LD_VAR 0 9
59706: PPUSH
59707: LD_VAR 0 10
59711: PPUSH
59712: CALL_OW 488
59716: PUSH
59717: LD_VAR 0 9
59721: PUSH
59722: LD_VAR 0 10
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_VAR 0 7
59735: IN
59736: NOT
59737: AND
59738: PUSH
59739: LD_VAR 0 9
59743: PPUSH
59744: LD_VAR 0 10
59748: PPUSH
59749: CALL_OW 458
59753: NOT
59754: AND
59755: IFFALSE 59797
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
59757: LD_ADDR_VAR 0 7
59761: PUSH
59762: LD_VAR 0 7
59766: PPUSH
59767: LD_VAR 0 7
59771: PUSH
59772: LD_INT 1
59774: PLUS
59775: PPUSH
59776: LD_VAR 0 9
59780: PUSH
59781: LD_VAR 0 10
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PPUSH
59790: CALL_OW 1
59794: ST_TO_ADDR
59795: GO 59811
// i := i - 1 ;
59797: LD_ADDR_VAR 0 5
59801: PUSH
59802: LD_VAR 0 5
59806: PUSH
59807: LD_INT 1
59809: MINUS
59810: ST_TO_ADDR
// end ;
59811: GO 59617
59813: POP
59814: POP
// for i in tmp do
59815: LD_ADDR_VAR 0 5
59819: PUSH
59820: LD_VAR 0 7
59824: PUSH
59825: FOR_IN
59826: IFFALSE 59864
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
59828: LD_VAR 0 1
59832: PPUSH
59833: LD_VAR 0 5
59837: PUSH
59838: LD_INT 1
59840: ARRAY
59841: PPUSH
59842: LD_VAR 0 5
59846: PUSH
59847: LD_INT 2
59849: ARRAY
59850: PPUSH
59851: CALL 58806 0 3
59855: NOT
59856: IFFALSE 59862
// exit ;
59858: POP
59859: POP
59860: GO 59866
59862: GO 59825
59864: POP
59865: POP
// end ;
59866: LD_VAR 0 4
59870: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
59871: LD_INT 0
59873: PPUSH
59874: PPUSH
59875: PPUSH
59876: PPUSH
59877: PPUSH
59878: PPUSH
59879: PPUSH
// if not GetClass ( unit ) = class_sniper then
59880: LD_VAR 0 1
59884: PPUSH
59885: CALL_OW 257
59889: PUSH
59890: LD_INT 5
59892: EQUAL
59893: NOT
59894: IFFALSE 59898
// exit ;
59896: GO 60286
// dist := 8 ;
59898: LD_ADDR_VAR 0 5
59902: PUSH
59903: LD_INT 8
59905: ST_TO_ADDR
// viewRange := 12 ;
59906: LD_ADDR_VAR 0 7
59910: PUSH
59911: LD_INT 12
59913: ST_TO_ADDR
// side := GetSide ( unit ) ;
59914: LD_ADDR_VAR 0 6
59918: PUSH
59919: LD_VAR 0 1
59923: PPUSH
59924: CALL_OW 255
59928: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
59929: LD_INT 61
59931: PPUSH
59932: LD_VAR 0 6
59936: PPUSH
59937: CALL_OW 321
59941: PUSH
59942: LD_INT 2
59944: EQUAL
59945: IFFALSE 59955
// viewRange := 16 ;
59947: LD_ADDR_VAR 0 7
59951: PUSH
59952: LD_INT 16
59954: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
59955: LD_VAR 0 1
59959: PPUSH
59960: LD_VAR 0 2
59964: PPUSH
59965: LD_VAR 0 3
59969: PPUSH
59970: CALL_OW 297
59974: PUSH
59975: LD_VAR 0 5
59979: GREATER
59980: IFFALSE 60059
// begin ComMoveXY ( unit , x , y ) ;
59982: LD_VAR 0 1
59986: PPUSH
59987: LD_VAR 0 2
59991: PPUSH
59992: LD_VAR 0 3
59996: PPUSH
59997: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60001: LD_INT 35
60003: PPUSH
60004: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60008: LD_VAR 0 1
60012: PPUSH
60013: LD_VAR 0 2
60017: PPUSH
60018: LD_VAR 0 3
60022: PPUSH
60023: CALL 36285 0 3
60027: NOT
60028: IFFALSE 60032
// exit ;
60030: GO 60286
// until GetDistUnitXY ( unit , x , y ) < dist ;
60032: LD_VAR 0 1
60036: PPUSH
60037: LD_VAR 0 2
60041: PPUSH
60042: LD_VAR 0 3
60046: PPUSH
60047: CALL_OW 297
60051: PUSH
60052: LD_VAR 0 5
60056: LESS
60057: IFFALSE 60001
// end ; ComTurnXY ( unit , x , y ) ;
60059: LD_VAR 0 1
60063: PPUSH
60064: LD_VAR 0 2
60068: PPUSH
60069: LD_VAR 0 3
60073: PPUSH
60074: CALL_OW 118
// wait ( 5 ) ;
60078: LD_INT 5
60080: PPUSH
60081: CALL_OW 67
// _d := GetDir ( unit ) ;
60085: LD_ADDR_VAR 0 10
60089: PUSH
60090: LD_VAR 0 1
60094: PPUSH
60095: CALL_OW 254
60099: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
60100: LD_ADDR_VAR 0 8
60104: PUSH
60105: LD_VAR 0 1
60109: PPUSH
60110: CALL_OW 250
60114: PPUSH
60115: LD_VAR 0 10
60119: PPUSH
60120: LD_VAR 0 5
60124: PPUSH
60125: CALL_OW 272
60129: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
60130: LD_ADDR_VAR 0 9
60134: PUSH
60135: LD_VAR 0 1
60139: PPUSH
60140: CALL_OW 251
60144: PPUSH
60145: LD_VAR 0 10
60149: PPUSH
60150: LD_VAR 0 5
60154: PPUSH
60155: CALL_OW 273
60159: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60160: LD_VAR 0 8
60164: PPUSH
60165: LD_VAR 0 9
60169: PPUSH
60170: CALL_OW 488
60174: NOT
60175: IFFALSE 60179
// exit ;
60177: GO 60286
// ComAnimCustom ( unit , 1 ) ;
60179: LD_VAR 0 1
60183: PPUSH
60184: LD_INT 1
60186: PPUSH
60187: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60191: LD_VAR 0 8
60195: PPUSH
60196: LD_VAR 0 9
60200: PPUSH
60201: LD_VAR 0 6
60205: PPUSH
60206: LD_VAR 0 7
60210: PPUSH
60211: CALL_OW 330
// repeat wait ( 1 ) ;
60215: LD_INT 1
60217: PPUSH
60218: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
60222: LD_VAR 0 1
60226: PPUSH
60227: CALL_OW 316
60231: PUSH
60232: LD_VAR 0 1
60236: PPUSH
60237: CALL_OW 314
60241: OR
60242: PUSH
60243: LD_VAR 0 1
60247: PPUSH
60248: CALL_OW 302
60252: NOT
60253: OR
60254: PUSH
60255: LD_VAR 0 1
60259: PPUSH
60260: CALL_OW 301
60264: OR
60265: IFFALSE 60215
// RemoveSeeing ( _x , _y , side ) ;
60267: LD_VAR 0 8
60271: PPUSH
60272: LD_VAR 0 9
60276: PPUSH
60277: LD_VAR 0 6
60281: PPUSH
60282: CALL_OW 331
// end ;
60286: LD_VAR 0 4
60290: RET
