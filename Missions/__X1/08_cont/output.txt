// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 20814 0 0
// PrepareRussian ;
  12: CALL 2026 0 0
// PrepareArabian ;
  16: CALL 446 0 0
// Action ;
  20: CALL 3824 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy , blockPatrolThread , firstArmouryDialog , weaponsAmount , canEquipWeapons , giveSniperRifleToMike , ruKilledHex , meetWithMuchin , kaiaWeaponHidden ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// blockPatrolThread := false ;
 359: LD_ADDR_EXP 38
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// firstArmouryDialog := false ;
 367: LD_ADDR_EXP 39
 371: PUSH
 372: LD_INT 0
 374: ST_TO_ADDR
// giveSniperRifleToMike := false ;
 375: LD_ADDR_EXP 42
 379: PUSH
 380: LD_INT 0
 382: ST_TO_ADDR
// weaponsAmount := [ 6 , 5 , 4 , 3 ] [ Difficulty ] ;
 383: LD_ADDR_EXP 40
 387: PUSH
 388: LD_INT 6
 390: PUSH
 391: LD_INT 5
 393: PUSH
 394: LD_INT 4
 396: PUSH
 397: LD_INT 3
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// canEquipWeapons := false ;
 412: LD_ADDR_EXP 41
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// ruKilledHex := [ ] ;
 420: LD_ADDR_EXP 43
 424: PUSH
 425: EMPTY
 426: ST_TO_ADDR
// kaiaWeaponHidden := 0 ;
 427: LD_ADDR_EXP 45
 431: PUSH
 432: LD_INT 0
 434: ST_TO_ADDR
// enable ( entranceEvent ) ;
 435: LD_INT 1
 437: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 438: LD_INT 2
 440: DISABLE_MARKED
// end ; end_of_file
 441: LD_VAR 0 1
 445: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 446: LD_INT 0
 448: PPUSH
 449: PPUSH
// uc_side := 4 ;
 450: LD_ADDR_OWVAR 20
 454: PUSH
 455: LD_INT 4
 457: ST_TO_ADDR
// uc_nation := 1 ;
 458: LD_ADDR_OWVAR 21
 462: PUSH
 463: LD_INT 1
 465: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 466: LD_ADDR_EXP 58
 470: PUSH
 471: LD_STRING 07_Americans
 473: PPUSH
 474: CALL_OW 31
 478: ST_TO_ADDR
// if americanSquad < 5 then
 479: LD_EXP 58
 483: PUSH
 484: LD_INT 5
 486: LESS
 487: IFFALSE 581
// begin if not americanSquad then
 489: LD_EXP 58
 493: NOT
 494: IFFALSE 503
// americanSquad := [ ] ;
 496: LD_ADDR_EXP 58
 500: PUSH
 501: EMPTY
 502: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 503: LD_ADDR_VAR 0 2
 507: PUSH
 508: DOUBLE
 509: LD_EXP 58
 513: DEC
 514: ST_TO_ADDR
 515: LD_INT 2
 517: PUSH
 518: LD_INT 3
 520: PUSH
 521: LD_INT 4
 523: PUSH
 524: LD_INT 4
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: PUSH
 533: LD_OWVAR 67
 537: ARRAY
 538: PUSH
 539: FOR_TO
 540: IFFALSE 577
// begin PrepareHuman ( false , 2 , 6 ) ;
 542: LD_INT 0
 544: PPUSH
 545: LD_INT 2
 547: PPUSH
 548: LD_INT 6
 550: PPUSH
 551: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 555: LD_ADDR_EXP 58
 559: PUSH
 560: LD_EXP 58
 564: PPUSH
 565: CALL_OW 44
 569: PPUSH
 570: CALL 67203 0 2
 574: ST_TO_ADDR
// end ;
 575: GO 539
 577: POP
 578: POP
// end else
 579: GO 628
// for i := Count ( americanSquad ) downto 5 do
 581: LD_ADDR_VAR 0 2
 585: PUSH
 586: DOUBLE
 587: LD_EXP 58
 591: PPUSH
 592: CALL 31594 0 1
 596: INC
 597: ST_TO_ADDR
 598: LD_INT 5
 600: PUSH
 601: FOR_DOWNTO
 602: IFFALSE 626
// americanSquad := Delete ( americanSquad , i ) ;
 604: LD_ADDR_EXP 58
 608: PUSH
 609: LD_EXP 58
 613: PPUSH
 614: LD_VAR 0 2
 618: PPUSH
 619: CALL_OW 3
 623: ST_TO_ADDR
 624: GO 601
 626: POP
 627: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 628: LD_ADDR_EXP 60
 632: PUSH
 633: LD_STRING UsCommander
 635: PPUSH
 636: LD_EXP 1
 640: NOT
 641: PPUSH
 642: LD_STRING 07_
 644: PPUSH
 645: CALL 29471 0 3
 649: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 650: LD_INT 1
 652: PPUSH
 653: LD_INT 6
 655: PPUSH
 656: CALL_OW 381
// Jerry := CreateHuman ;
 660: LD_ADDR_EXP 61
 664: PUSH
 665: CALL_OW 44
 669: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 670: LD_EXP 61
 674: PPUSH
 675: LD_INT 33
 677: PPUSH
 678: CALL_OW 336
// if not Doug then
 682: LD_EXP 60
 686: NOT
 687: IFFALSE 709
// begin PrepareSoldier ( sex_male , 6 ) ;
 689: LD_INT 1
 691: PPUSH
 692: LD_INT 6
 694: PPUSH
 695: CALL_OW 381
// Doug := CreateHuman ;
 699: LD_ADDR_EXP 60
 703: PUSH
 704: CALL_OW 44
 708: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 709: LD_EXP 60
 713: PPUSH
 714: LD_INT 33
 716: PPUSH
 717: CALL_OW 336
// if johnnySaved or debug then
 721: LD_EXP 3
 725: PUSH
 726: LD_EXP 1
 730: OR
 731: IFFALSE 758
// begin Harris := NewCharacter ( Harris ) ;
 733: LD_ADDR_EXP 59
 737: PUSH
 738: LD_STRING Harris
 740: PPUSH
 741: CALL_OW 25
 745: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 746: LD_EXP 59
 750: PPUSH
 751: LD_INT 33
 753: PPUSH
 754: CALL_OW 336
// end ; uc_side := 2 ;
 758: LD_ADDR_OWVAR 20
 762: PUSH
 763: LD_INT 2
 765: ST_TO_ADDR
// uc_nation := 2 ;
 766: LD_ADDR_OWVAR 21
 770: PUSH
 771: LD_INT 2
 773: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 774: LD_ADDR_EXP 46
 778: PUSH
 779: LD_STRING Heike
 781: PPUSH
 782: LD_EXP 1
 786: NOT
 787: PPUSH
 788: LD_EXP 2
 792: PPUSH
 793: CALL 29471 0 3
 797: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 798: LD_ADDR_EXP 49
 802: PUSH
 803: LD_STRING Ibrahim
 805: PPUSH
 806: LD_EXP 1
 810: NOT
 811: PPUSH
 812: LD_EXP 2
 816: PPUSH
 817: CALL 29471 0 3
 821: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 822: LD_ADDR_EXP 47
 826: PUSH
 827: LD_STRING Givi
 829: PPUSH
 830: LD_EXP 1
 834: NOT
 835: PPUSH
 836: LD_EXP 2
 840: PPUSH
 841: CALL 29471 0 3
 845: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 846: LD_ADDR_EXP 50
 850: PUSH
 851: LD_STRING Kamil
 853: PPUSH
 854: LD_EXP 1
 858: NOT
 859: PPUSH
 860: LD_EXP 2
 864: PPUSH
 865: CALL 29471 0 3
 869: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 870: LD_ADDR_EXP 51
 874: PUSH
 875: LD_STRING Kaia
 877: PPUSH
 878: LD_EXP 1
 882: NOT
 883: PPUSH
 884: LD_EXP 2
 888: PPUSH
 889: CALL 29471 0 3
 893: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 894: LD_ADDR_EXP 52
 898: PUSH
 899: LD_STRING Sophia
 901: PPUSH
 902: LD_EXP 1
 906: NOT
 907: PPUSH
 908: LD_EXP 2
 912: PPUSH
 913: CALL 29471 0 3
 917: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 918: LD_ADDR_EXP 53
 922: PUSH
 923: LD_STRING Markov
 925: PPUSH
 926: LD_EXP 1
 930: NOT
 931: PPUSH
 932: LD_EXP 2
 936: PPUSH
 937: CALL 29471 0 3
 941: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 942: LD_ADDR_EXP 56
 946: PUSH
 947: LD_STRING Aviradze
 949: PPUSH
 950: LD_EXP 1
 954: NOT
 955: PPUSH
 956: LD_EXP 2
 960: PPUSH
 961: CALL 29471 0 3
 965: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 966: LD_ADDR_EXP 55
 970: PUSH
 971: LD_STRING Kurt
 973: PPUSH
 974: LD_EXP 1
 978: NOT
 979: PPUSH
 980: LD_EXP 2
 984: PPUSH
 985: CALL 29471 0 3
 989: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 990: LD_ADDR_EXP 48
 994: PUSH
 995: LD_STRING Mike
 997: PPUSH
 998: LD_EXP 1
1002: NOT
1003: PPUSH
1004: LD_EXP 2
1008: PPUSH
1009: CALL 29471 0 3
1013: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1014: LD_ADDR_EXP 54
1018: PUSH
1019: LD_STRING Olaf
1021: PPUSH
1022: LD_EXP 1
1026: NOT
1027: PPUSH
1028: LD_EXP 2
1032: PPUSH
1033: CALL 29471 0 3
1037: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1038: LD_ADDR_EXP 57
1042: PUSH
1043: LD_STRING 07_others
1045: PPUSH
1046: CALL_OW 31
1050: ST_TO_ADDR
// end ;
1051: LD_VAR 0 1
1055: RET
// export function PrepareGame ; var i ; begin
1056: LD_INT 0
1058: PPUSH
1059: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
1060: LD_EXP 46
1064: PPUSH
1065: LD_INT 23
1067: PPUSH
1068: CALL_OW 52
// if Givi then
1072: LD_EXP 47
1076: IFFALSE 1114
// begin SetSide ( Givi , 5 ) ;
1078: LD_EXP 47
1082: PPUSH
1083: LD_INT 5
1085: PPUSH
1086: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1090: LD_EXP 47
1094: PPUSH
1095: LD_INT 9
1097: PPUSH
1098: LD_INT 0
1100: PPUSH
1101: CALL_OW 49
// ComHold ( Givi ) ;
1105: LD_EXP 47
1109: PPUSH
1110: CALL_OW 140
// end ; if Markov then
1114: LD_EXP 53
1118: IFFALSE 1156
// begin SetSide ( Markov , 5 ) ;
1120: LD_EXP 53
1124: PPUSH
1125: LD_INT 5
1127: PPUSH
1128: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1132: LD_EXP 53
1136: PPUSH
1137: LD_INT 3
1139: PPUSH
1140: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1144: LD_EXP 53
1148: PPUSH
1149: LD_INT 61
1151: PPUSH
1152: CALL_OW 52
// end ; if Mike then
1156: LD_EXP 48
1160: IFFALSE 1198
// begin SetSide ( Mike , 5 ) ;
1162: LD_EXP 48
1166: PPUSH
1167: LD_INT 5
1169: PPUSH
1170: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1174: LD_EXP 48
1178: PPUSH
1179: LD_INT 17
1181: PPUSH
1182: LD_INT 0
1184: PPUSH
1185: CALL_OW 49
// ComHold ( Mike ) ;
1189: LD_EXP 48
1193: PPUSH
1194: CALL_OW 140
// end ; if Olaf then
1198: LD_EXP 54
1202: IFFALSE 1243
// begin SetSide ( Olaf , 5 ) ;
1204: LD_EXP 54
1208: PPUSH
1209: LD_INT 5
1211: PPUSH
1212: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1216: LD_EXP 54
1220: PPUSH
1221: LD_INT 16
1223: PPUSH
1224: LD_INT 0
1226: PPUSH
1227: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1231: LD_EXP 54
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL 70359 0 2
// end ; if Kamil then
1243: LD_EXP 50
1247: IFFALSE 1273
// begin SetSide ( Kamil , 5 ) ;
1249: LD_EXP 50
1253: PPUSH
1254: LD_INT 5
1256: PPUSH
1257: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1261: LD_EXP 50
1265: PPUSH
1266: LD_INT 109
1268: PPUSH
1269: CALL_OW 52
// end ; if Kurt then
1273: LD_EXP 55
1277: IFFALSE 1303
// begin SetSide ( Kurt , 5 ) ;
1279: LD_EXP 55
1283: PPUSH
1284: LD_INT 5
1286: PPUSH
1287: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1291: LD_EXP 55
1295: PPUSH
1296: LD_INT 169
1298: PPUSH
1299: CALL_OW 52
// end ; if Kaia then
1303: LD_EXP 51
1307: IFFALSE 1333
// begin SetSide ( Kaia , 5 ) ;
1309: LD_EXP 51
1313: PPUSH
1314: LD_INT 5
1316: PPUSH
1317: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1321: LD_EXP 51
1325: PPUSH
1326: LD_INT 147
1328: PPUSH
1329: CALL_OW 52
// end ; if Sophia then
1333: LD_EXP 52
1337: IFFALSE 1378
// begin SetSide ( Sophia , 5 ) ;
1339: LD_EXP 52
1343: PPUSH
1344: LD_INT 5
1346: PPUSH
1347: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1351: LD_EXP 52
1355: PPUSH
1356: LD_INT 142
1358: PPUSH
1359: LD_INT 96
1361: PPUSH
1362: LD_INT 0
1364: PPUSH
1365: CALL_OW 48
// ComHold ( Sophia ) ;
1369: LD_EXP 52
1373: PPUSH
1374: CALL_OW 140
// end ; if Harris then
1378: LD_EXP 59
1382: IFFALSE 1420
// begin SetSide ( Harris , 4 ) ;
1384: LD_EXP 59
1388: PPUSH
1389: LD_INT 4
1391: PPUSH
1392: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1396: LD_EXP 59
1400: PPUSH
1401: LD_INT 20
1403: PPUSH
1404: LD_INT 0
1406: PPUSH
1407: CALL_OW 49
// ComHold ( i ) ;
1411: LD_VAR 0 2
1415: PPUSH
1416: CALL_OW 140
// end ; if Doug then
1420: LD_EXP 60
1424: IFFALSE 1450
// begin SetSide ( Doug , 4 ) ;
1426: LD_EXP 60
1430: PPUSH
1431: LD_INT 4
1433: PPUSH
1434: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1438: LD_EXP 60
1442: PPUSH
1443: LD_INT 106
1445: PPUSH
1446: CALL_OW 52
// end ; if Aviradze then
1450: LD_EXP 56
1454: IFFALSE 1480
// begin SetSide ( Aviradze , 5 ) ;
1456: LD_EXP 56
1460: PPUSH
1461: LD_INT 5
1463: PPUSH
1464: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1468: LD_EXP 56
1472: PPUSH
1473: LD_INT 119
1475: PPUSH
1476: CALL_OW 52
// end ; if Ibrahim then
1480: LD_EXP 49
1484: IFFALSE 1510
// begin SetSide ( Ibrahim , 5 ) ;
1486: LD_EXP 49
1490: PPUSH
1491: LD_INT 5
1493: PPUSH
1494: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1498: LD_EXP 49
1502: PPUSH
1503: LD_INT 119
1505: PPUSH
1506: CALL_OW 52
// end ; if Jerry then
1510: LD_EXP 61
1514: IFFALSE 1555
// begin SetSide ( Jerry , 4 ) ;
1516: LD_EXP 61
1520: PPUSH
1521: LD_INT 4
1523: PPUSH
1524: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1528: LD_EXP 61
1532: PPUSH
1533: LD_INT 119
1535: PPUSH
1536: LD_INT 59
1538: PPUSH
1539: LD_INT 0
1541: PPUSH
1542: CALL_OW 48
// ComHold ( Jerry ) ;
1546: LD_EXP 61
1550: PPUSH
1551: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1555: LD_EXP 65
1559: PPUSH
1560: LD_INT 119
1562: PPUSH
1563: CALL_OW 52
// for i in americanSquad do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: LD_EXP 58
1576: PUSH
1577: FOR_IN
1578: IFFALSE 1606
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1580: LD_VAR 0 2
1584: PPUSH
1585: LD_INT 21
1587: PPUSH
1588: LD_INT 0
1590: PPUSH
1591: CALL_OW 49
// ComHold ( i ) ;
1595: LD_VAR 0 2
1599: PPUSH
1600: CALL_OW 140
// end ;
1604: GO 1577
1606: POP
1607: POP
// for i in heikeSecondSquad do
1608: LD_ADDR_VAR 0 2
1612: PUSH
1613: LD_EXP 57
1617: PUSH
1618: FOR_IN
1619: IFFALSE 1659
// begin SetSide ( i , 5 ) ;
1621: LD_VAR 0 2
1625: PPUSH
1626: LD_INT 5
1628: PPUSH
1629: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1633: LD_VAR 0 2
1637: PPUSH
1638: LD_INT 22
1640: PPUSH
1641: LD_INT 0
1643: PPUSH
1644: CALL_OW 49
// ComHold ( i ) ;
1648: LD_VAR 0 2
1652: PPUSH
1653: CALL_OW 140
// end ;
1657: GO 1618
1659: POP
1660: POP
// if not hasVodka then
1661: LD_EXP 4
1665: NOT
1666: IFFALSE 1725
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1668: LD_ADDR_VAR 0 2
1672: PUSH
1673: LD_INT 2
1675: PUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 2
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PUSH
1686: LD_INT 22
1688: PUSH
1689: LD_INT 5
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PPUSH
1701: CALL_OW 69
1705: PUSH
1706: FOR_IN
1707: IFFALSE 1723
// SetLives ( i , 500 ) ;
1709: LD_VAR 0 2
1713: PPUSH
1714: LD_INT 500
1716: PPUSH
1717: CALL_OW 234
1721: GO 1706
1723: POP
1724: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1725: LD_ADDR_VAR 0 2
1729: PUSH
1730: LD_INT 22
1732: PUSH
1733: LD_INT 4
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: PPUSH
1740: CALL_OW 69
1744: PUSH
1745: FOR_IN
1746: IFFALSE 1762
// SetLives ( i , 500 ) ;
1748: LD_VAR 0 2
1752: PPUSH
1753: LD_INT 500
1755: PPUSH
1756: CALL_OW 234
1760: GO 1745
1762: POP
1763: POP
// end ;
1764: LD_VAR 0 1
1768: RET
// export function SetClassKaiaRevolver ; begin
1769: LD_INT 0
1771: PPUSH
// if not IsOk ( Kaia ) then
1772: LD_EXP 51
1776: PPUSH
1777: CALL_OW 302
1781: NOT
1782: IFFALSE 1786
// exit ;
1784: GO 1805
// SetClass ( Kaia , class_revolver ) ;
1786: LD_EXP 51
1790: PPUSH
1791: LD_INT 34
1793: PPUSH
1794: CALL_OW 336
// SetAchievement ( ACH_REVOLVER ) ;
1798: LD_STRING ACH_REVOLVER
1800: PPUSH
1801: CALL_OW 543
// end ;
1805: LD_VAR 0 1
1809: RET
// export function SpawnHeikeAsRussian ; begin
1810: LD_INT 0
1812: PPUSH
// RemoveUnit ( Heike ) ;
1813: LD_EXP 46
1817: PPUSH
1818: CALL_OW 64
// heikeTmp := Heike ;
1822: LD_ADDR_EXP 62
1826: PUSH
1827: LD_EXP 46
1831: ST_TO_ADDR
// uc_side := 2 ;
1832: LD_ADDR_OWVAR 20
1836: PUSH
1837: LD_INT 2
1839: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1840: LD_ADDR_EXP 46
1844: PUSH
1845: LD_STRING HeikeRu
1847: PPUSH
1848: CALL_OW 25
1852: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1853: LD_EXP 62
1857: PPUSH
1858: LD_EXP 46
1862: PPUSH
1863: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1867: LD_EXP 46
1871: PPUSH
1872: LD_INT 165
1874: PPUSH
1875: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1879: LD_EXP 46
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: CALL_OW 336
// heikeAsRussian := true ;
1891: LD_ADDR_EXP 27
1895: PUSH
1896: LD_INT 1
1898: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1899: LD_STRING M1-laundry-out
1901: PPUSH
1902: CALL_OW 604
// SetAchievement ( ACH_HEIKERU ) ;
1906: LD_STRING ACH_HEIKERU
1908: PPUSH
1909: CALL_OW 543
// end ;
1913: LD_VAR 0 1
1917: RET
// export function SpawnGiviAsRussian ; begin
1918: LD_INT 0
1920: PPUSH
// RemoveUnit ( Givi ) ;
1921: LD_EXP 47
1925: PPUSH
1926: CALL_OW 64
// giviTmp := Givi ;
1930: LD_ADDR_EXP 63
1934: PUSH
1935: LD_EXP 47
1939: ST_TO_ADDR
// uc_side := 2 ;
1940: LD_ADDR_OWVAR 20
1944: PUSH
1945: LD_INT 2
1947: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1948: LD_ADDR_EXP 47
1952: PUSH
1953: LD_STRING GiviRu
1955: PPUSH
1956: CALL_OW 25
1960: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1961: LD_EXP 63
1965: PPUSH
1966: LD_EXP 47
1970: PPUSH
1971: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1975: LD_EXP 47
1979: PPUSH
1980: LD_INT 165
1982: PPUSH
1983: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
1987: LD_EXP 47
1991: PPUSH
1992: LD_INT 1
1994: PPUSH
1995: CALL_OW 336
// giviAsRussian := true ;
1999: LD_ADDR_EXP 28
2003: PUSH
2004: LD_INT 1
2006: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
2007: LD_STRING M1-laundry-out
2009: PPUSH
2010: CALL_OW 604
// SetAchievement ( ACH_GIVIRU ) ;
2014: LD_STRING ACH_GIVIRU
2016: PPUSH
2017: CALL_OW 543
// end ; end_of_file
2021: LD_VAR 0 1
2025: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , un , tmp ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
2031: PPUSH
2032: PPUSH
// uc_side := 3 ;
2033: LD_ADDR_OWVAR 20
2037: PUSH
2038: LD_INT 3
2040: ST_TO_ADDR
// uc_nation := 3 ;
2041: LD_ADDR_OWVAR 21
2045: PUSH
2046: LD_INT 3
2048: ST_TO_ADDR
// SetBName ( ruMainBase , yagoda ) ;
2049: LD_INT 2
2051: PPUSH
2052: LD_STRING yagoda
2054: PPUSH
2055: CALL_OW 500
// SetBName ( ruKitchen , kitchen ) ;
2059: LD_INT 192
2061: PPUSH
2062: LD_STRING kitchen
2064: PPUSH
2065: CALL_OW 500
// SetBName ( laundry , laundry ) ;
2069: LD_INT 165
2071: PPUSH
2072: LD_STRING laundry
2074: PPUSH
2075: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
2079: LD_INT 54
2081: PPUSH
2082: LD_STRING adminSection
2084: PPUSH
2085: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_INT 21
2096: PUSH
2097: LD_INT 3
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PPUSH
2104: CALL_OW 69
2108: PUSH
2109: FOR_IN
2110: IFFALSE 2126
// SetBLevel ( i , 7 ) ;
2112: LD_VAR 0 2
2116: PPUSH
2117: LD_INT 7
2119: PPUSH
2120: CALL_OW 241
2124: GO 2109
2126: POP
2127: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2128: LD_ADDR_VAR 0 2
2132: PUSH
2133: LD_INT 22
2135: PUSH
2136: LD_INT 3
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PUSH
2143: LD_INT 2
2145: PUSH
2146: LD_INT 30
2148: PUSH
2149: LD_INT 0
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: PUSH
2156: LD_INT 30
2158: PUSH
2159: LD_INT 1
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: LIST
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PPUSH
2175: CALL_OW 69
2179: PUSH
2180: FOR_IN
2181: IFFALSE 2245
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2183: LD_VAR 0 2
2187: PPUSH
2188: CALL_OW 274
2192: PPUSH
2193: LD_INT 1
2195: PPUSH
2196: LD_INT 1000
2198: PPUSH
2199: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2203: LD_VAR 0 2
2207: PPUSH
2208: CALL_OW 274
2212: PPUSH
2213: LD_INT 2
2215: PPUSH
2216: LD_INT 1000
2218: PPUSH
2219: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2223: LD_VAR 0 2
2227: PPUSH
2228: CALL_OW 274
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 100
2238: PPUSH
2239: CALL_OW 277
// end ;
2243: GO 2180
2245: POP
2246: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2247: LD_ADDR_VAR 0 2
2251: PUSH
2252: LD_INT 22
2254: PUSH
2255: LD_INT 3
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PUSH
2262: LD_INT 30
2264: PUSH
2265: LD_INT 32
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PPUSH
2276: CALL_OW 69
2280: PUSH
2281: FOR_IN
2282: IFFALSE 2316
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2284: LD_INT 0
2286: PPUSH
2287: LD_INT 5
2289: PUSH
2290: LD_OWVAR 67
2294: PLUS
2295: PPUSH
2296: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2300: CALL_OW 44
2304: PPUSH
2305: LD_VAR 0 2
2309: PPUSH
2310: CALL_OW 52
// end ;
2314: GO 2281
2316: POP
2317: POP
// for i := 1 to 2 do
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: DOUBLE
2324: LD_INT 1
2326: DEC
2327: ST_TO_ADDR
2328: LD_INT 2
2330: PUSH
2331: FOR_TO
2332: IFFALSE 2384
// begin PrepareMechanic ( false , 8 ) ;
2334: LD_INT 0
2336: PPUSH
2337: LD_INT 8
2339: PPUSH
2340: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2344: LD_ADDR_EXP 67
2348: PUSH
2349: LD_EXP 67
2353: PPUSH
2354: CALL_OW 44
2358: PPUSH
2359: CALL 67203 0 2
2363: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2364: LD_EXP 67
2368: PUSH
2369: LD_EXP 67
2373: ARRAY
2374: PPUSH
2375: LD_INT 61
2377: PPUSH
2378: CALL_OW 52
// end ;
2382: GO 2331
2384: POP
2385: POP
// PrepareMechanic ( sex_male , 8 ) ;
2386: LD_INT 1
2388: PPUSH
2389: LD_INT 8
2391: PPUSH
2392: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2396: LD_ADDR_EXP 68
2400: PUSH
2401: LD_EXP 68
2405: PPUSH
2406: CALL_OW 44
2410: PPUSH
2411: CALL 67203 0 2
2415: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2416: LD_EXP 68
2420: PUSH
2421: LD_EXP 68
2425: ARRAY
2426: PPUSH
2427: LD_INT 196
2429: PPUSH
2430: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2434: LD_INT 1
2436: PPUSH
2437: LD_INT 8
2439: PPUSH
2440: CALL_OW 383
// hc_name := Stiepan Simonov ;
2444: LD_ADDR_OWVAR 26
2448: PUSH
2449: LD_STRING Stiepan Simonov
2451: ST_TO_ADDR
// Stiopa := CreateHuman ;
2452: LD_ADDR_EXP 69
2456: PUSH
2457: CALL_OW 44
2461: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2462: LD_INT 2
2464: PPUSH
2465: LD_INT 8
2467: PPUSH
2468: CALL_OW 383
// hc_name := Laura Dragunov ;
2472: LD_ADDR_OWVAR 26
2476: PUSH
2477: LD_STRING Laura Dragunov
2479: ST_TO_ADDR
// Laura := CreateHuman ;
2480: LD_ADDR_EXP 70
2484: PUSH
2485: CALL_OW 44
2489: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2490: LD_EXP 70
2494: PPUSH
2495: LD_INT 196
2497: PPUSH
2498: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2502: LD_INT 1
2504: PPUSH
2505: LD_INT 8
2507: PPUSH
2508: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2512: LD_ADDR_EXP 67
2516: PUSH
2517: LD_EXP 67
2521: PPUSH
2522: LD_INT 1
2524: PPUSH
2525: CALL_OW 44
2529: PPUSH
2530: CALL_OW 2
2534: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2535: LD_EXP 67
2539: PUSH
2540: LD_INT 1
2542: ARRAY
2543: PPUSH
2544: LD_INT 61
2546: PPUSH
2547: CALL_OW 52
// hc_sex := sex_male ;
2551: LD_ADDR_OWVAR 27
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// hc_name := Muchin ;
2559: LD_ADDR_OWVAR 26
2563: PUSH
2564: LD_STRING Muchin
2566: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2567: LD_ADDR_OWVAR 33
2571: PUSH
2572: LD_STRING SecondCharsGal
2574: ST_TO_ADDR
// hc_face_number := 87 ;
2575: LD_ADDR_OWVAR 34
2579: PUSH
2580: LD_INT 87
2582: ST_TO_ADDR
// hc_skills := [ 8 , 2 , 2 , 6 ] ;
2583: LD_ADDR_OWVAR 31
2587: PUSH
2588: LD_INT 8
2590: PUSH
2591: LD_INT 2
2593: PUSH
2594: LD_INT 2
2596: PUSH
2597: LD_INT 6
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2606: LD_ADDR_OWVAR 29
2610: PUSH
2611: LD_INT 13
2613: PUSH
2614: LD_INT 13
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: ST_TO_ADDR
// hc_class := class_soldier ;
2621: LD_ADDR_OWVAR 28
2625: PUSH
2626: LD_INT 1
2628: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2629: LD_ADDR_EXP 66
2633: PUSH
2634: CALL_OW 44
2638: ST_TO_ADDR
// InitHC_All ( ) ;
2639: CALL_OW 584
// if Difficulty > 1 then
2643: LD_OWVAR 67
2647: PUSH
2648: LD_INT 1
2650: GREATER
2651: IFFALSE 2771
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
2653: LD_ADDR_VAR 0 2
2657: PUSH
2658: DOUBLE
2659: LD_INT 1
2661: DEC
2662: ST_TO_ADDR
2663: LD_INT 3
2665: PUSH
2666: LD_INT 4
2668: PUSH
2669: LD_INT 5
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: LIST
2676: PUSH
2677: LD_OWVAR 67
2681: PUSH
2682: LD_INT 1
2684: PLUS
2685: ARRAY
2686: PUSH
2687: FOR_TO
2688: IFFALSE 2769
// begin PrepareSoldier ( false , [ 5 , 6 , 7 ] [ Difficulty + 1 ] ) ;
2690: LD_INT 0
2692: PPUSH
2693: LD_INT 5
2695: PUSH
2696: LD_INT 6
2698: PUSH
2699: LD_INT 7
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: PUSH
2707: LD_OWVAR 67
2711: PUSH
2712: LD_INT 1
2714: PLUS
2715: ARRAY
2716: PPUSH
2717: CALL_OW 381
// un := CreateHuman ;
2721: LD_ADDR_VAR 0 4
2725: PUSH
2726: CALL_OW 44
2730: ST_TO_ADDR
// PlaceUnitArea ( un , [ westGroup1Area , westGroup2Area ] [ i mod 2 + 1 ] , false ) ;
2731: LD_VAR 0 4
2735: PPUSH
2736: LD_INT 62
2738: PUSH
2739: LD_INT 63
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: LD_VAR 0 2
2750: PUSH
2751: LD_INT 2
2753: MOD
2754: PUSH
2755: LD_INT 1
2757: PLUS
2758: ARRAY
2759: PPUSH
2760: LD_INT 0
2762: PPUSH
2763: CALL_OW 49
// end ;
2767: GO 2687
2769: POP
2770: POP
// end ; uc_side := 6 ;
2771: LD_ADDR_OWVAR 20
2775: PUSH
2776: LD_INT 6
2778: ST_TO_ADDR
// uc_nation := 3 ;
2779: LD_ADDR_OWVAR 21
2783: PUSH
2784: LD_INT 3
2786: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2787: LD_ADDR_VAR 0 5
2791: PUSH
2792: LD_INT 14
2794: PUSH
2795: LD_INT 15
2797: PUSH
2798: LD_INT 48
2800: PUSH
2801: LD_INT 24
2803: PUSH
2804: LD_INT 149
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: ST_TO_ADDR
// for i in tmp do
2814: LD_ADDR_VAR 0 2
2818: PUSH
2819: LD_VAR 0 5
2823: PUSH
2824: FOR_IN
2825: IFFALSE 2873
// begin for j := 1 to 2 do
2827: LD_ADDR_VAR 0 3
2831: PUSH
2832: DOUBLE
2833: LD_INT 1
2835: DEC
2836: ST_TO_ADDR
2837: LD_INT 2
2839: PUSH
2840: FOR_TO
2841: IFFALSE 2869
// begin PrepareSoldier ( false , 7 ) ;
2843: LD_INT 0
2845: PPUSH
2846: LD_INT 7
2848: PPUSH
2849: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2853: CALL_OW 44
2857: PPUSH
2858: LD_VAR 0 2
2862: PPUSH
2863: CALL_OW 52
// end ;
2867: GO 2840
2869: POP
2870: POP
// end ;
2871: GO 2824
2873: POP
2874: POP
// end ;
2875: LD_VAR 0 1
2879: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2880: LD_INT 0
2882: PPUSH
2883: PPUSH
2884: PPUSH
2885: PPUSH
// uc_side := 3 ;
2886: LD_ADDR_OWVAR 20
2890: PUSH
2891: LD_INT 3
2893: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2894: LD_ADDR_OWVAR 21
2898: PUSH
2899: LD_INT 1
2901: PPUSH
2902: LD_INT 3
2904: PPUSH
2905: CALL_OW 12
2909: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2910: LD_ADDR_VAR 0 4
2914: PUSH
2915: LD_INT 5
2917: PPUSH
2918: LD_INT 0
2920: PPUSH
2921: CALL_OW 517
2925: ST_TO_ADDR
// for i := 1 to 3 do
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: DOUBLE
2932: LD_INT 1
2934: DEC
2935: ST_TO_ADDR
2936: LD_INT 3
2938: PUSH
2939: FOR_TO
2940: IFFALSE 3009
// begin PrepareHuman ( false , 33 , 0 ) ;
2942: LD_INT 0
2944: PPUSH
2945: LD_INT 33
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 380
// un := CreateHuman ;
2955: LD_ADDR_VAR 0 3
2959: PUSH
2960: CALL_OW 44
2964: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2965: LD_VAR 0 3
2969: PPUSH
2970: LD_VAR 0 4
2974: PUSH
2975: LD_INT 1
2977: ARRAY
2978: PUSH
2979: LD_VAR 0 2
2983: ARRAY
2984: PPUSH
2985: LD_VAR 0 4
2989: PUSH
2990: LD_INT 2
2992: ARRAY
2993: PUSH
2994: LD_VAR 0 2
2998: ARRAY
2999: PPUSH
3000: LD_INT 1
3002: PPUSH
3003: CALL_OW 601
// end ;
3007: GO 2939
3009: POP
3010: POP
// end ;
3011: LD_VAR 0 1
3015: RET
// export function PrepareFirstScene ; var i , un ; begin
3016: LD_INT 0
3018: PPUSH
3019: PPUSH
3020: PPUSH
// uc_side := 4 ;
3021: LD_ADDR_OWVAR 20
3025: PUSH
3026: LD_INT 4
3028: ST_TO_ADDR
// uc_nation := 1 ;
3029: LD_ADDR_OWVAR 21
3033: PUSH
3034: LD_INT 1
3036: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
3037: LD_INT 0
3039: PPUSH
3040: LD_INT 33
3042: PPUSH
3043: LD_INT 0
3045: PPUSH
3046: CALL_OW 380
// for i := 1 to 2 do
3050: LD_ADDR_VAR 0 2
3054: PUSH
3055: DOUBLE
3056: LD_INT 1
3058: DEC
3059: ST_TO_ADDR
3060: LD_INT 2
3062: PUSH
3063: FOR_TO
3064: IFFALSE 3129
// begin un := CreateHuman ;
3066: LD_ADDR_VAR 0 3
3070: PUSH
3071: CALL_OW 44
3075: ST_TO_ADDR
// SetDir ( un , 1 ) ;
3076: LD_VAR 0 3
3080: PPUSH
3081: LD_INT 1
3083: PPUSH
3084: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
3088: LD_VAR 0 3
3092: PPUSH
3093: LD_INT 6
3095: PPUSH
3096: LD_INT 0
3098: PPUSH
3099: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
3103: LD_VAR 0 3
3107: PPUSH
3108: LD_INT 1
3110: PPUSH
3111: CALL 70359 0 2
// SetLives ( un , 300 ) ;
3115: LD_VAR 0 3
3119: PPUSH
3120: LD_INT 300
3122: PPUSH
3123: CALL_OW 234
// end ;
3127: GO 3063
3129: POP
3130: POP
// uc_side := 3 ;
3131: LD_ADDR_OWVAR 20
3135: PUSH
3136: LD_INT 3
3138: ST_TO_ADDR
// uc_nation := 3 ;
3139: LD_ADDR_OWVAR 21
3143: PUSH
3144: LD_INT 3
3146: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
3147: LD_INT 1
3149: PPUSH
3150: LD_INT 5
3152: PPUSH
3153: CALL_OW 381
// for i := 1 to 3 do
3157: LD_ADDR_VAR 0 2
3161: PUSH
3162: DOUBLE
3163: LD_INT 1
3165: DEC
3166: ST_TO_ADDR
3167: LD_INT 3
3169: PUSH
3170: FOR_TO
3171: IFFALSE 3244
// begin un := CreateHuman ;
3173: LD_ADDR_VAR 0 3
3177: PUSH
3178: CALL_OW 44
3182: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
3183: LD_ADDR_EXP 64
3187: PUSH
3188: LD_EXP 64
3192: PPUSH
3193: LD_VAR 0 3
3197: PPUSH
3198: CALL 67203 0 2
3202: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3203: LD_VAR 0 3
3207: PPUSH
3208: LD_INT 4
3210: PPUSH
3211: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
3215: LD_VAR 0 3
3219: PPUSH
3220: LD_INT 7
3222: PPUSH
3223: LD_INT 0
3225: PPUSH
3226: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
3230: LD_VAR 0 3
3234: PPUSH
3235: LD_INT 4
3237: PPUSH
3238: CALL 70359 0 2
// end ;
3242: GO 3170
3244: POP
3245: POP
// ruCommisar := CreateHuman ;
3246: LD_ADDR_EXP 65
3250: PUSH
3251: CALL_OW 44
3255: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
3256: LD_EXP 65
3260: PPUSH
3261: LD_INT 124
3263: PPUSH
3264: LD_INT 37
3266: PPUSH
3267: LD_INT 0
3269: PPUSH
3270: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
3274: LD_EXP 65
3278: PPUSH
3279: LD_INT 3
3281: PPUSH
3282: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
3286: LD_EXP 65
3290: PPUSH
3291: LD_INT 3
3293: PPUSH
3294: CALL 70359 0 2
// end ;
3298: LD_VAR 0 1
3302: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3303: LD_INT 0
3305: PPUSH
3306: PPUSH
3307: PPUSH
3308: PPUSH
// uc_side := 6 ;
3309: LD_ADDR_OWVAR 20
3313: PUSH
3314: LD_INT 6
3316: ST_TO_ADDR
// uc_nation := 3 ;
3317: LD_ADDR_OWVAR 21
3321: PUSH
3322: LD_INT 3
3324: ST_TO_ADDR
// ruPatrol := [ ] ;
3325: LD_ADDR_EXP 71
3329: PUSH
3330: EMPTY
3331: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3332: LD_ADDR_VAR 0 4
3336: PUSH
3337: LD_INT 26
3339: PUSH
3340: LD_INT 30
3342: PUSH
3343: LD_INT 39
3345: PUSH
3346: LD_INT 43
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: ST_TO_ADDR
// for i := 1 to spawn do
3355: LD_ADDR_VAR 0 2
3359: PUSH
3360: DOUBLE
3361: LD_INT 1
3363: DEC
3364: ST_TO_ADDR
3365: LD_VAR 0 4
3369: PUSH
3370: FOR_TO
3371: IFFALSE 3482
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3373: LD_INT 0
3375: PPUSH
3376: LD_INT 4
3378: PUSH
3379: LD_INT 5
3381: PUSH
3382: LD_INT 6
3384: PUSH
3385: LD_INT 7
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: PUSH
3394: LD_OWVAR 67
3398: ARRAY
3399: PPUSH
3400: CALL_OW 381
// un := CreateHuman ;
3404: LD_ADDR_VAR 0 3
3408: PUSH
3409: CALL_OW 44
3413: ST_TO_ADDR
// SetTag ( un , i ) ;
3414: LD_VAR 0 3
3418: PPUSH
3419: LD_VAR 0 2
3423: PPUSH
3424: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3428: LD_ADDR_EXP 71
3432: PUSH
3433: LD_EXP 71
3437: PPUSH
3438: LD_VAR 0 3
3442: PPUSH
3443: CALL 67203 0 2
3447: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3448: LD_VAR 0 3
3452: PPUSH
3453: LD_VAR 0 4
3457: PUSH
3458: LD_VAR 0 2
3462: ARRAY
3463: PPUSH
3464: LD_INT 0
3466: PPUSH
3467: CALL_OW 49
// ComHold ( un ) ;
3471: LD_VAR 0 3
3475: PPUSH
3476: CALL_OW 140
// end ;
3480: GO 3370
3482: POP
3483: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3484: LD_ADDR_VAR 0 4
3488: PUSH
3489: LD_INT 48
3491: PUSH
3492: LD_INT 49
3494: PUSH
3495: LD_INT 50
3497: PUSH
3498: LD_INT 51
3500: PUSH
3501: LD_INT 52
3503: PUSH
3504: LD_INT 53
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: ST_TO_ADDR
// for i := 1 to spawn do
3515: LD_ADDR_VAR 0 2
3519: PUSH
3520: DOUBLE
3521: LD_INT 1
3523: DEC
3524: ST_TO_ADDR
3525: LD_VAR 0 4
3529: PUSH
3530: FOR_TO
3531: IFFALSE 3640
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3533: LD_INT 0
3535: PPUSH
3536: LD_INT 4
3538: PUSH
3539: LD_INT 5
3541: PUSH
3542: LD_INT 6
3544: PUSH
3545: LD_INT 7
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: PUSH
3554: LD_OWVAR 67
3558: ARRAY
3559: PPUSH
3560: CALL_OW 381
// un := CreateHuman ;
3564: LD_ADDR_VAR 0 3
3568: PUSH
3569: CALL_OW 44
3573: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3574: LD_VAR 0 3
3578: PPUSH
3579: LD_INT 0
3581: PPUSH
3582: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3586: LD_ADDR_EXP 71
3590: PUSH
3591: LD_EXP 71
3595: PPUSH
3596: LD_VAR 0 3
3600: PPUSH
3601: CALL 67203 0 2
3605: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3606: LD_VAR 0 3
3610: PPUSH
3611: LD_VAR 0 4
3615: PUSH
3616: LD_VAR 0 2
3620: ARRAY
3621: PPUSH
3622: LD_INT 0
3624: PPUSH
3625: CALL_OW 49
// ComHold ( un ) ;
3629: LD_VAR 0 3
3633: PPUSH
3634: CALL_OW 140
// end ;
3638: GO 3530
3640: POP
3641: POP
// end ;
3642: LD_VAR 0 1
3646: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3647: LD_INT 0
3649: PPUSH
3650: PPUSH
3651: PPUSH
3652: PPUSH
// uc_side := 6 ;
3653: LD_ADDR_OWVAR 20
3657: PUSH
3658: LD_INT 6
3660: ST_TO_ADDR
// uc_nation := nation_russian ;
3661: LD_ADDR_OWVAR 21
3665: PUSH
3666: LD_INT 3
3668: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3669: LD_ADDR_VAR 0 4
3673: PUSH
3674: LD_INT 54
3676: PUSH
3677: LD_INT 55
3679: PUSH
3680: LD_INT 56
3682: PUSH
3683: LD_INT 57
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: ST_TO_ADDR
// for i := 1 to spawn do
3692: LD_ADDR_VAR 0 2
3696: PUSH
3697: DOUBLE
3698: LD_INT 1
3700: DEC
3701: ST_TO_ADDR
3702: LD_VAR 0 4
3706: PUSH
3707: FOR_TO
3708: IFFALSE 3817
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3710: LD_INT 0
3712: PPUSH
3713: LD_INT 4
3715: PUSH
3716: LD_INT 5
3718: PUSH
3719: LD_INT 6
3721: PUSH
3722: LD_INT 7
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: PUSH
3731: LD_OWVAR 67
3735: ARRAY
3736: PPUSH
3737: CALL_OW 381
// un := CreateHuman ;
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: CALL_OW 44
3750: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3751: LD_VAR 0 3
3755: PPUSH
3756: LD_INT 0
3758: PPUSH
3759: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3763: LD_ADDR_EXP 71
3767: PUSH
3768: LD_EXP 71
3772: PPUSH
3773: LD_VAR 0 3
3777: PPUSH
3778: CALL 67203 0 2
3782: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3783: LD_VAR 0 3
3787: PPUSH
3788: LD_VAR 0 4
3792: PUSH
3793: LD_VAR 0 2
3797: ARRAY
3798: PPUSH
3799: LD_INT 0
3801: PPUSH
3802: CALL_OW 49
// ComHold ( un ) ;
3806: LD_VAR 0 3
3810: PPUSH
3811: CALL_OW 140
// end ;
3815: GO 3707
3817: POP
3818: POP
// end ; end_of_file
3819: LD_VAR 0 1
3823: RET
// export function Action ; var speaker , i , tmp ; begin
3824: LD_INT 0
3826: PPUSH
3827: PPUSH
3828: PPUSH
3829: PPUSH
// Video ( true ) ;
3830: LD_INT 1
3832: PPUSH
3833: CALL 67175 0 1
// hasNormalScene := Kaia or Givi ;
3837: LD_ADDR_EXP 5
3841: PUSH
3842: LD_EXP 51
3846: PUSH
3847: LD_EXP 47
3851: OR
3852: ST_TO_ADDR
// if hasNormalScene then
3853: LD_EXP 5
3857: IFFALSE 4098
// begin for i in americanSquad do
3859: LD_ADDR_VAR 0 3
3863: PUSH
3864: LD_EXP 58
3868: PUSH
3869: FOR_IN
3870: IFFALSE 3916
// begin SetClass ( i , class_prison ) ;
3872: LD_VAR 0 3
3876: PPUSH
3877: LD_INT 33
3879: PPUSH
3880: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3884: LD_VAR 0 3
3888: PPUSH
3889: LD_INT 78
3891: PPUSH
3892: LD_INT 16
3894: PPUSH
3895: LD_INT 5
3897: PPUSH
3898: LD_INT 0
3900: PPUSH
3901: CALL_OW 50
// ComHold ( i ) ;
3905: LD_VAR 0 3
3909: PPUSH
3910: CALL_OW 140
// end ;
3914: GO 3869
3916: POP
3917: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3918: LD_ADDR_VAR 0 4
3922: PUSH
3923: LD_EXP 48
3927: PUSH
3928: LD_EXP 49
3932: PUSH
3933: LD_EXP 50
3937: PUSH
3938: LD_EXP 51
3942: PUSH
3943: LD_EXP 52
3947: PUSH
3948: LD_EXP 53
3952: PUSH
3953: LD_EXP 54
3957: PUSH
3958: LD_EXP 55
3962: PUSH
3963: LD_EXP 47
3967: PUSH
3968: LD_EXP 56
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: PUSH
3985: LD_EXP 57
3989: UNION
3990: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
3991: LD_EXP 46
3995: PPUSH
3996: LD_INT 33
3998: PPUSH
3999: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
4003: LD_EXP 46
4007: PPUSH
4008: LD_INT 117
4010: PPUSH
4011: LD_INT 24
4013: PPUSH
4014: LD_INT 3
4016: PPUSH
4017: LD_INT 0
4019: PPUSH
4020: CALL 69343 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
4024: LD_EXP 46
4028: PPUSH
4029: LD_INT 123
4031: PPUSH
4032: LD_INT 39
4034: PPUSH
4035: CALL_OW 118
// for i in tmp do
4039: LD_ADDR_VAR 0 3
4043: PUSH
4044: LD_VAR 0 4
4048: PUSH
4049: FOR_IN
4050: IFFALSE 4096
// begin SetClass ( i , class_prison ) ;
4052: LD_VAR 0 3
4056: PPUSH
4057: LD_INT 33
4059: PPUSH
4060: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
4064: LD_VAR 0 3
4068: PPUSH
4069: LD_INT 3
4071: PPUSH
4072: LD_INT 0
4074: PPUSH
4075: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
4079: LD_VAR 0 3
4083: PPUSH
4084: LD_INT 113
4086: PPUSH
4087: LD_INT 16
4089: PPUSH
4090: CALL_OW 118
// end ;
4094: GO 4049
4096: POP
4097: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
4098: LD_INT 124
4100: PPUSH
4101: LD_INT 39
4103: PPUSH
4104: CALL_OW 86
// PrepareDeadBodies ;
4108: CALL 2880 0 0
// PrepareFirstScene ;
4112: CALL 3016 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4116: LD_INT 152
4118: PPUSH
4119: LD_INT 65
4121: PPUSH
4122: LD_INT 2
4124: PPUSH
4125: LD_INT 70
4127: NEG
4128: PPUSH
4129: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4133: LD_INT 152
4135: PPUSH
4136: LD_INT 65
4138: PPUSH
4139: LD_INT 2
4141: PPUSH
4142: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
4146: LD_INT 122
4148: PPUSH
4149: LD_INT 40
4151: PPUSH
4152: LD_INT 2
4154: PPUSH
4155: LD_INT 8
4157: NEG
4158: PPUSH
4159: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
4163: LD_INT 124
4165: PPUSH
4166: LD_INT 37
4168: PPUSH
4169: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
4173: LD_EXP 65
4177: PPUSH
4178: LD_STRING DRum-Execution-1
4180: PPUSH
4181: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
4185: LD_EXP 65
4189: PPUSH
4190: LD_STRING DRum-Execution-2
4192: PPUSH
4193: CALL_OW 88
// wait ( 0 0$01 ) ;
4197: LD_INT 35
4199: PPUSH
4200: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
4204: LD_EXP 65
4208: PPUSH
4209: LD_STRING DRum-Execution-3
4211: PPUSH
4212: CALL_OW 88
// wait ( 0 0$1 ) ;
4216: LD_INT 35
4218: PPUSH
4219: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
4223: LD_EXP 65
4227: PPUSH
4228: LD_STRING DRum-Execution-4
4230: PPUSH
4231: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
4235: LD_EXP 64
4239: PUSH
4240: LD_INT 1
4242: ARRAY
4243: PPUSH
4244: LD_INT 122
4246: PPUSH
4247: LD_INT 39
4249: PPUSH
4250: CALL_OW 428
4254: PPUSH
4255: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
4259: LD_EXP 64
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 123
4270: PPUSH
4271: LD_INT 41
4273: PPUSH
4274: CALL_OW 428
4278: PPUSH
4279: CALL_OW 115
// AddComHold ( russianKillers ) ;
4283: LD_EXP 64
4287: PPUSH
4288: CALL_OW 200
// wait ( 0 0$1 ) ;
4292: LD_INT 35
4294: PPUSH
4295: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4299: LD_INT 122
4301: PPUSH
4302: LD_INT 40
4304: PPUSH
4305: LD_INT 2
4307: PPUSH
4308: CALL_OW 331
// for i in russianKillers union ruCommisar do
4312: LD_ADDR_VAR 0 3
4316: PUSH
4317: LD_EXP 64
4321: PUSH
4322: LD_EXP 65
4326: UNION
4327: PUSH
4328: FOR_IN
4329: IFFALSE 4342
// RemoveUnit ( i ) ;
4331: LD_VAR 0 3
4335: PPUSH
4336: CALL_OW 64
4340: GO 4328
4342: POP
4343: POP
// if hasNormalScene then
4344: LD_EXP 5
4348: IFFALSE 4356
// ActionNormal else
4350: CALL 4365 0 0
4354: GO 4360
// ActionAdditional ;
4356: CALL 6183 0 0
// end ;
4360: LD_VAR 0 1
4364: RET
// function ActionNormal ; var i , tmp ; begin
4365: LD_INT 0
4367: PPUSH
4368: PPUSH
4369: PPUSH
// CenterNowOnUnits ( Heike ) ;
4370: LD_EXP 46
4374: PPUSH
4375: CALL_OW 87
// wait ( 0 0$1 ) ;
4379: LD_INT 35
4381: PPUSH
4382: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4386: LD_EXP 46
4390: PPUSH
4391: LD_INT 115
4393: PPUSH
4394: LD_INT 19
4396: PPUSH
4397: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4401: LD_EXP 46
4405: PPUSH
4406: LD_INT 113
4408: PPUSH
4409: LD_INT 16
4411: PPUSH
4412: CALL_OW 178
// wait ( 0 0$2 ) ;
4416: LD_INT 70
4418: PPUSH
4419: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4423: LD_EXP 46
4427: PPUSH
4428: LD_STRING DH-Conspiracy-1
4430: PPUSH
4431: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4435: LD_EXP 51
4439: PPUSH
4440: LD_STRING DK-Conspiracy-2
4442: PPUSH
4443: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4447: LD_EXP 47
4451: PPUSH
4452: LD_STRING DG-Conspiracy-3
4454: PPUSH
4455: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4459: LD_EXP 47
4463: PPUSH
4464: LD_STRING DG-Conspiracy-4
4466: PPUSH
4467: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4471: LD_EXP 46
4475: PPUSH
4476: LD_STRING DH-Conspiracy-5
4478: PPUSH
4479: CALL_OW 88
// if IsOk ( Kamil ) then
4483: LD_EXP 50
4487: PPUSH
4488: CALL_OW 302
4492: IFFALSE 4550
// begin hasVodka := true ;
4494: LD_ADDR_EXP 4
4498: PUSH
4499: LD_INT 1
4501: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4502: LD_EXP 50
4506: PPUSH
4507: LD_STRING DKam-Conspiracy-6
4509: PPUSH
4510: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4514: LD_EXP 50
4518: PPUSH
4519: LD_STRING DKam-Conspiracy-7
4521: PPUSH
4522: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4526: LD_EXP 50
4530: PPUSH
4531: LD_STRING DKam-Conspiracy-8
4533: PPUSH
4534: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4538: LD_EXP 50
4542: PPUSH
4543: LD_STRING DKam-Conspiracy-9
4545: PPUSH
4546: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4550: LD_EXP 52
4554: PPUSH
4555: CALL_OW 302
4559: IFFALSE 4740
// begin americanContact := true ;
4561: LD_ADDR_EXP 10
4565: PUSH
4566: LD_INT 1
4568: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4569: LD_STRING M1-american
4571: PPUSH
4572: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4576: LD_EXP 52
4580: PPUSH
4581: LD_STRING DS-Conspiracy-10
4583: PPUSH
4584: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4588: LD_EXP 53
4592: PPUSH
4593: LD_STRING DM-Conspiracy-11
4595: PPUSH
4596: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4600: LD_EXP 52
4604: PPUSH
4605: LD_STRING DS-Conspiracy-12
4607: PPUSH
4608: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4612: LD_INT 84
4614: PPUSH
4615: LD_INT 19
4617: PPUSH
4618: LD_INT 105
4620: PPUSH
4621: CALL 20175 0 3
// if johnnySaved then
4625: LD_EXP 3
4629: IFFALSE 4669
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4631: LD_EXP 52
4635: PPUSH
4636: LD_STRING DS-Conspiracy-13
4638: PPUSH
4639: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4643: LD_EXP 46
4647: PPUSH
4648: LD_STRING DH-Conspiracy-14
4650: PPUSH
4651: CALL_OW 88
// Say ( Heike , DH-Conspiracy-15 ) ;
4655: LD_EXP 46
4659: PPUSH
4660: LD_STRING DH-Conspiracy-15
4662: PPUSH
4663: CALL_OW 88
// end else
4667: GO 4705
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4669: LD_EXP 52
4673: PPUSH
4674: LD_STRING DS-Conspiracy-a-13
4676: PPUSH
4677: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4681: LD_EXP 46
4685: PPUSH
4686: LD_STRING DH-Conspiracy-a-14
4688: PPUSH
4689: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-15 ) ;
4693: LD_EXP 46
4697: PPUSH
4698: LD_STRING DH-Conspiracy-a-15
4700: PPUSH
4701: CALL_OW 88
// end ; if IsOk ( Givi ) then
4705: LD_EXP 47
4709: PPUSH
4710: CALL_OW 302
4714: IFFALSE 4740
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4716: LD_EXP 47
4720: PPUSH
4721: LD_STRING DG-Conspiracy-a-16
4723: PPUSH
4724: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4728: LD_EXP 46
4732: PPUSH
4733: LD_STRING DH-Conspiracy-a-17
4735: PPUSH
4736: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4740: LD_EXP 46
4744: PPUSH
4745: LD_STRING DH-Conspiracy-16
4747: PPUSH
4748: CALL_OW 88
// if IsOk ( Givi ) then
4752: LD_EXP 47
4756: PPUSH
4757: CALL_OW 302
4761: IFFALSE 5033
// begin hasStimDrugs := true ;
4763: LD_ADDR_EXP 9
4767: PUSH
4768: LD_INT 1
4770: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4771: LD_STRING M1-drugs
4773: PPUSH
4774: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4778: LD_EXP 47
4782: PPUSH
4783: LD_STRING DG-Conspiracy-17
4785: PPUSH
4786: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4790: LD_INT 162
4792: PPUSH
4793: LD_INT 2
4795: PPUSH
4796: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4800: LD_INT 194
4802: PPUSH
4803: LD_INT 98
4805: PPUSH
4806: LD_INT 105
4808: PPUSH
4809: CALL 20175 0 3
// SetSide ( drugsLab , 3 ) ;
4813: LD_INT 162
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4823: LD_EXP 47
4827: PPUSH
4828: LD_STRING DG-Conspiracy-18
4830: PPUSH
4831: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4835: LD_EXP 47
4839: PPUSH
4840: LD_STRING DG-Conspiracy-19
4842: PPUSH
4843: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4847: LD_EXP 47
4851: PPUSH
4852: LD_STRING DG-Conspiracy-20
4854: PPUSH
4855: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4859: LD_EXP 46
4863: PPUSH
4864: LD_STRING DH-Conspiracy-21
4866: PPUSH
4867: CALL_OW 88
// if IsOk ( Kaia ) then
4871: LD_EXP 51
4875: PPUSH
4876: CALL_OW 302
4880: IFFALSE 4954
// begin hasExplosions := true ;
4882: LD_ADDR_EXP 6
4886: PUSH
4887: LD_INT 1
4889: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4890: LD_STRING M1-explosive
4892: PPUSH
4893: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4897: LD_EXP 51
4901: PPUSH
4902: LD_STRING DK-Conspiracy-22
4904: PPUSH
4905: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4909: LD_INT 73
4911: PPUSH
4912: LD_INT 2
4914: PPUSH
4915: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4919: LD_INT 170
4921: PPUSH
4922: LD_INT 104
4924: PPUSH
4925: LD_INT 105
4927: PPUSH
4928: CALL 20175 0 3
// SetSide ( barExplosion , 3 ) ;
4932: LD_INT 73
4934: PPUSH
4935: LD_INT 3
4937: PPUSH
4938: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4942: LD_EXP 51
4946: PPUSH
4947: LD_STRING DK-Conspiracy-23
4949: PPUSH
4950: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4954: LD_EXP 54
4958: PPUSH
4959: CALL_OW 302
4963: IFFALSE 5033
// begin hasExplosionsInFactory := true ;
4965: LD_ADDR_EXP 7
4969: PUSH
4970: LD_INT 1
4972: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4973: LD_EXP 54
4977: PPUSH
4978: LD_STRING DO-Conspiracy-24
4980: PPUSH
4981: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4985: LD_INT 175
4987: PPUSH
4988: LD_INT 54
4990: PPUSH
4991: LD_INT 70
4993: PPUSH
4994: CALL 20175 0 3
// if IsOk ( Markov ) then
4998: LD_EXP 53
5002: PPUSH
5003: CALL_OW 302
5007: IFFALSE 5033
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
5009: LD_EXP 53
5013: PPUSH
5014: LD_STRING DMar-Conspiracy-25
5016: PPUSH
5017: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
5021: LD_EXP 53
5025: PPUSH
5026: LD_STRING DMar-Conspiracy-26
5028: PPUSH
5029: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
5033: LD_EXP 55
5037: PPUSH
5038: CALL_OW 302
5042: PUSH
5043: LD_EXP 51
5047: PPUSH
5048: CALL_OW 302
5052: AND
5053: IFFALSE 5513
// begin hasWeapons := true ;
5055: LD_ADDR_EXP 19
5059: PUSH
5060: LD_INT 1
5062: ST_TO_ADDR
// hasRevolver := true ;
5063: LD_ADDR_EXP 8
5067: PUSH
5068: LD_INT 1
5070: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
5071: LD_STRING M1-weapons
5073: PPUSH
5074: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
5078: LD_EXP 55
5082: PPUSH
5083: LD_STRING DKs-Conspiracy-27
5085: PPUSH
5086: CALL_OW 88
// if IsOk ( Givi ) then
5090: LD_EXP 47
5094: PPUSH
5095: CALL_OW 302
5099: IFFALSE 5115
// Say ( Givi , DG-Conspiracy-28 ) else
5101: LD_EXP 47
5105: PPUSH
5106: LD_STRING DG-Conspiracy-28
5108: PPUSH
5109: CALL_OW 88
5113: GO 5180
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
5115: LD_EXP 57
5119: PPUSH
5120: LD_INT 26
5122: PUSH
5123: LD_INT 1
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PPUSH
5130: CALL_OW 72
5134: PUSH
5135: LD_INT 1
5137: ARRAY
5138: PPUSH
5139: LD_STRING DArm-Conspiracy-a-28
5141: PPUSH
5142: CALL_OW 88
5146: NOT
5147: IFFALSE 5180
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
5149: LD_EXP 57
5153: PPUSH
5154: LD_INT 26
5156: PUSH
5157: LD_INT 2
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: PPUSH
5164: CALL_OW 72
5168: PUSH
5169: LD_INT 1
5171: ARRAY
5172: PPUSH
5173: LD_STRING DArf-Conspiracy-a-28
5175: PPUSH
5176: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
5180: LD_EXP 55
5184: PPUSH
5185: LD_STRING DKs-Conspiracy-29
5187: PPUSH
5188: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
5192: LD_INT 192
5194: PPUSH
5195: LD_INT 122
5197: PPUSH
5198: LD_INT 105
5200: PPUSH
5201: CALL 20175 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
5205: LD_EXP 55
5209: PPUSH
5210: LD_STRING DKs-Conspiracy-30
5212: PPUSH
5213: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
5217: LD_EXP 51
5221: PPUSH
5222: LD_STRING DK-Conspiracy-31
5224: PPUSH
5225: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
5229: LD_EXP 53
5233: PPUSH
5234: LD_STRING DMar-Conspiracy-33
5236: PPUSH
5237: CALL_OW 88
5241: NOT
5242: PUSH
5243: LD_EXP 57
5247: AND
5248: IFFALSE 5315
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
5250: LD_EXP 57
5254: PPUSH
5255: LD_INT 26
5257: PUSH
5258: LD_INT 1
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 72
5269: PUSH
5270: LD_INT 1
5272: ARRAY
5273: PPUSH
5274: LD_STRING DArm-Conspiracy-a-34
5276: PPUSH
5277: CALL_OW 88
5281: NOT
5282: IFFALSE 5315
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
5284: LD_EXP 57
5288: PPUSH
5289: LD_INT 26
5291: PUSH
5292: LD_INT 2
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PPUSH
5299: CALL_OW 72
5303: PUSH
5304: LD_INT 1
5306: ARRAY
5307: PPUSH
5308: LD_STRING DArf-Conspiracy-a-34
5310: PPUSH
5311: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5315: LD_EXP 51
5319: PPUSH
5320: LD_STRING DK-Conspiracy-34
5322: PPUSH
5323: CALL_OW 88
// if IsOk ( Markov ) then
5327: LD_EXP 53
5331: PPUSH
5332: CALL_OW 302
5336: IFFALSE 5421
// begin hasSniperRifle := true ;
5338: LD_ADDR_EXP 11
5342: PUSH
5343: LD_INT 1
5345: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5346: LD_EXP 53
5350: PPUSH
5351: LD_STRING DMar-Conspiracy-35
5353: PPUSH
5354: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5358: LD_EXP 51
5362: PPUSH
5363: LD_STRING DK-Conspiracy-36
5365: PPUSH
5366: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5370: LD_EXP 53
5374: PPUSH
5375: LD_STRING DMar-Conspiracy-37
5377: PPUSH
5378: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5382: LD_EXP 53
5386: PPUSH
5387: LD_STRING DMar-Conspiracy-38
5389: PPUSH
5390: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5394: LD_INT 137
5396: PPUSH
5397: LD_INT 98
5399: PPUSH
5400: LD_INT 105
5402: PPUSH
5403: CALL 20175 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5407: LD_EXP 53
5411: PPUSH
5412: LD_STRING DMar-Conspiracy-39
5414: PPUSH
5415: CALL_OW 88
// end else
5419: GO 5513
// if heikeSecondSquad then
5421: LD_EXP 57
5425: IFFALSE 5513
// begin hasSniperRifle := true ;
5427: LD_ADDR_EXP 11
5431: PUSH
5432: LD_INT 1
5434: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5435: LD_INT 137
5437: PPUSH
5438: LD_INT 98
5440: PPUSH
5441: LD_INT 105
5443: PPUSH
5444: CALL 20175 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5448: LD_EXP 57
5452: PPUSH
5453: LD_INT 26
5455: PUSH
5456: LD_INT 1
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PPUSH
5463: CALL_OW 72
5467: PUSH
5468: LD_INT 1
5470: ARRAY
5471: PPUSH
5472: LD_STRING DArm-Conspiracy-a-35
5474: PPUSH
5475: CALL_OW 88
5479: NOT
5480: IFFALSE 5513
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5482: LD_EXP 57
5486: PPUSH
5487: LD_INT 26
5489: PUSH
5490: LD_INT 2
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PPUSH
5497: CALL_OW 72
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: PPUSH
5506: LD_STRING DArf-Conspiracy-a-35
5508: PPUSH
5509: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5513: LD_EXP 46
5517: PPUSH
5518: LD_STRING DH-Conspiracy-40
5520: PPUSH
5521: CALL_OW 88
// if IsOk ( Mike ) then
5525: LD_EXP 48
5529: PPUSH
5530: CALL_OW 302
5534: IFFALSE 5593
// begin hasScout := true ;
5536: LD_ADDR_EXP 12
5540: PUSH
5541: LD_INT 1
5543: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5544: LD_EXP 48
5548: PPUSH
5549: LD_STRING DM-Conspiracy-41
5551: PPUSH
5552: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5556: LD_EXP 48
5560: PPUSH
5561: LD_STRING DM-Conspiracy-42
5563: PPUSH
5564: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5568: LD_INT 73
5570: PPUSH
5571: LD_INT 102
5573: PPUSH
5574: LD_INT 105
5576: PPUSH
5577: CALL 20175 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5581: LD_EXP 48
5585: PPUSH
5586: LD_STRING DM-Conspiracy-43
5588: PPUSH
5589: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5593: LD_EXP 4
5597: PUSH
5598: LD_EXP 51
5602: PPUSH
5603: CALL_OW 302
5607: AND
5608: PUSH
5609: LD_EXP 55
5613: PPUSH
5614: CALL_OW 302
5618: AND
5619: IFFALSE 5665
// begin hasMethanol := true ;
5621: LD_ADDR_EXP 13
5625: PUSH
5626: LD_INT 1
5628: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5629: LD_EXP 51
5633: PPUSH
5634: LD_STRING DK-Conspiracy-44
5636: PPUSH
5637: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5641: LD_EXP 51
5645: PPUSH
5646: LD_STRING DK-Conspiracy-45
5648: PPUSH
5649: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5653: LD_EXP 50
5657: PPUSH
5658: LD_STRING DKam-Conspiracy-46
5660: PPUSH
5661: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5665: LD_EXP 46
5669: PPUSH
5670: LD_STRING DH-Conspiracy-47
5672: PPUSH
5673: CALL_OW 88
// wait ( 0 0$1 ) ;
5677: LD_INT 35
5679: PPUSH
5680: CALL_OW 67
// your_side := 8 ;
5684: LD_ADDR_OWVAR 2
5688: PUSH
5689: LD_INT 8
5691: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5692: LD_INT 1
5694: PPUSH
5695: LD_INT 1
5697: PPUSH
5698: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5702: LD_ADDR_VAR 0 2
5706: PUSH
5707: LD_INT 2
5709: PUSH
5710: LD_INT 22
5712: PUSH
5713: LD_INT 2
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: PUSH
5720: LD_INT 22
5722: PUSH
5723: LD_INT 4
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: LIST
5734: PUSH
5735: LD_INT 21
5737: PUSH
5738: LD_INT 1
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PPUSH
5749: CALL_OW 69
5753: PUSH
5754: FOR_IN
5755: IFFALSE 5768
// RemoveUnit ( i ) ;
5757: LD_VAR 0 2
5761: PPUSH
5762: CALL_OW 64
5766: GO 5754
5768: POP
5769: POP
// wait ( 0 0$0.3 ) ;
5770: LD_INT 10
5772: PPUSH
5773: CALL_OW 67
// Query ( StartInfo1 ) ;
5777: LD_STRING StartInfo1
5779: PPUSH
5780: CALL_OW 97
// wait ( 0 0$1 ) ;
5784: LD_INT 35
5786: PPUSH
5787: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5791: LD_STRING colors_night.txt
5793: PPUSH
5794: CALL_OW 544
// Query ( StartInfo2 ) ;
5798: LD_STRING StartInfo2
5800: PPUSH
5801: CALL_OW 97
// PrepareGame ;
5805: CALL 1056 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5809: LD_INT 152
5811: PPUSH
5812: LD_INT 65
5814: PPUSH
5815: LD_INT 2
5817: PPUSH
5818: LD_INT 70
5820: NEG
5821: PPUSH
5822: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5826: LD_INT 152
5828: PPUSH
5829: LD_INT 65
5831: PPUSH
5832: LD_INT 2
5834: PPUSH
5835: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5839: LD_INT 133
5841: PPUSH
5842: LD_INT 76
5844: PPUSH
5845: LD_INT 2
5847: PPUSH
5848: LD_INT 6
5850: NEG
5851: PPUSH
5852: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5856: LD_INT 152
5858: PPUSH
5859: LD_INT 65
5861: PPUSH
5862: LD_INT 8
5864: PPUSH
5865: LD_INT 70
5867: NEG
5868: PPUSH
5869: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5873: LD_INT 152
5875: PPUSH
5876: LD_INT 65
5878: PPUSH
5879: LD_INT 8
5881: PPUSH
5882: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5886: LD_INT 133
5888: PPUSH
5889: LD_INT 76
5891: PPUSH
5892: LD_INT 8
5894: PPUSH
5895: LD_INT 6
5897: NEG
5898: PPUSH
5899: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5903: LD_INT 23
5905: PPUSH
5906: CALL_OW 87
// dialogue_skipped := false ;
5910: LD_ADDR_OWVAR 59
5914: PUSH
5915: LD_INT 0
5917: ST_TO_ADDR
// InitRuPatrols ;
5918: CALL 3303 0 0
// Say ( Heike , DH-Escape-1 ) ;
5922: LD_EXP 46
5926: PPUSH
5927: LD_STRING DH-Escape-1
5929: PPUSH
5930: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5934: LD_EXP 46
5938: PPUSH
5939: LD_STRING DH-Escape-2
5941: PPUSH
5942: CALL_OW 88
// StartLockerMinigame ;
5946: CALL 20960 0 0
// wait ( 0 0$1 ) ;
5950: LD_INT 35
5952: PPUSH
5953: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5957: LD_EXP 46
5961: PPUSH
5962: LD_STRING DH-Escape-4
5964: PPUSH
5965: CALL_OW 88
// wait ( 0 0$3 ) ;
5969: LD_INT 105
5971: PPUSH
5972: CALL_OW 67
// your_side := 2 ;
5976: LD_ADDR_OWVAR 2
5980: PUSH
5981: LD_INT 2
5983: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5984: LD_EXP 46
5988: PPUSH
5989: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5993: LD_INT 152
5995: PPUSH
5996: LD_INT 65
5998: PPUSH
5999: LD_INT 2
6001: PPUSH
6002: LD_INT 70
6004: NEG
6005: PPUSH
6006: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
6010: LD_INT 152
6012: PPUSH
6013: LD_INT 65
6015: PPUSH
6016: LD_INT 2
6018: PPUSH
6019: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
6023: LD_INT 133
6025: PPUSH
6026: LD_INT 76
6028: PPUSH
6029: LD_INT 8
6031: PPUSH
6032: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
6036: LD_EXP 46
6040: PPUSH
6041: LD_INT 128
6043: PPUSH
6044: LD_INT 64
6046: PPUSH
6047: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6051: LD_INT 35
6053: PPUSH
6054: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
6058: LD_EXP 46
6062: PPUSH
6063: LD_INT 128
6065: PPUSH
6066: LD_INT 64
6068: PPUSH
6069: CALL_OW 307
6073: IFFALSE 6051
// ComHold ( Heike ) ;
6075: LD_EXP 46
6079: PPUSH
6080: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
6084: LD_EXP 46
6088: PPUSH
6089: LD_STRING DH-Start-1
6091: PPUSH
6092: CALL_OW 88
// if not americanContact then
6096: LD_EXP 10
6100: NOT
6101: IFFALSE 6117
// Say ( Heike , DH-Start-c-2 ) else
6103: LD_EXP 46
6107: PPUSH
6108: LD_STRING DH-Start-c-2
6110: PPUSH
6111: CALL_OW 88
6115: GO 6149
// if johnnySaved then
6117: LD_EXP 3
6121: IFFALSE 6137
// Say ( Heike , DH-Start-a-2 ) else
6123: LD_EXP 46
6127: PPUSH
6128: LD_STRING DH-Start-a-2
6130: PPUSH
6131: CALL_OW 88
6135: GO 6149
// Say ( Heike , DH-Start-b-2 ) ;
6137: LD_EXP 46
6141: PPUSH
6142: LD_STRING DH-Start-b-2
6144: PPUSH
6145: CALL_OW 88
// Video ( false ) ;
6149: LD_INT 0
6151: PPUSH
6152: CALL 67175 0 1
// tick := 0 ;
6156: LD_ADDR_OWVAR 1
6160: PUSH
6161: LD_INT 0
6163: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
6164: LD_STRING M1
6166: PPUSH
6167: CALL_OW 337
// enable ( gameStartEvent ) ;
6171: LD_INT 2
6173: ENABLE_MARKED
// SaveForQuickRestart ;
6174: CALL_OW 22
// end ;
6178: LD_VAR 0 1
6182: RET
// function ActionAdditional ; var i , un , tmp ; begin
6183: LD_INT 0
6185: PPUSH
6186: PPUSH
6187: PPUSH
6188: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
6189: LD_INT 115
6191: PPUSH
6192: LD_INT 27
6194: PPUSH
6195: LD_INT 2
6197: PPUSH
6198: LD_INT 6
6200: NEG
6201: PPUSH
6202: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
6206: LD_EXP 46
6210: PPUSH
6211: LD_INT 115
6213: PPUSH
6214: LD_INT 27
6216: PPUSH
6217: CALL_OW 428
6221: PPUSH
6222: CALL_OW 52
// SetClass ( Heike , 33 ) ;
6226: LD_EXP 46
6230: PPUSH
6231: LD_INT 33
6233: PPUSH
6234: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
6238: LD_INT 124
6240: PPUSH
6241: LD_INT 39
6243: PPUSH
6244: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
6248: LD_EXP 46
6252: PPUSH
6253: LD_STRING DH-Fail-1
6255: PPUSH
6256: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
6260: LD_INT 3
6262: PPUSH
6263: CALL_OW 427
// ComExit ( Heike ) ;
6267: LD_EXP 46
6271: PPUSH
6272: CALL 67601 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
6276: LD_EXP 46
6280: PPUSH
6281: LD_INT 109
6283: PPUSH
6284: LD_INT 33
6286: PPUSH
6287: CALL_OW 171
// AddComHold ( Heike ) ;
6291: LD_EXP 46
6295: PPUSH
6296: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6300: LD_INT 115
6302: PPUSH
6303: LD_INT 27
6305: PPUSH
6306: LD_INT 2
6308: PPUSH
6309: CALL_OW 331
// wait ( 0 0$2 ) ;
6313: LD_INT 70
6315: PPUSH
6316: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6320: LD_INT 35
6322: PPUSH
6323: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6327: LD_EXP 46
6331: PPUSH
6332: LD_INT 109
6334: PPUSH
6335: LD_INT 33
6337: PPUSH
6338: CALL_OW 307
6342: IFFALSE 6320
// Say ( Heike , DH-Fail-2 ) ;
6344: LD_EXP 46
6348: PPUSH
6349: LD_STRING DH-Fail-2
6351: PPUSH
6352: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6356: LD_EXP 46
6360: PPUSH
6361: LD_INT 111
6363: PPUSH
6364: LD_INT 48
6366: PPUSH
6367: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6371: LD_INT 35
6373: PPUSH
6374: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6378: LD_EXP 46
6382: PPUSH
6383: LD_INT 111
6385: PPUSH
6386: LD_INT 48
6388: PPUSH
6389: CALL_OW 297
6393: PUSH
6394: LD_INT 4
6396: LESS
6397: IFFALSE 6371
// AddComMoveXY ( Heike , 106 , 72 ) ;
6399: LD_EXP 46
6403: PPUSH
6404: LD_INT 106
6406: PPUSH
6407: LD_INT 72
6409: PPUSH
6410: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6414: LD_EXP 46
6418: PPUSH
6419: LD_INT 103
6421: PPUSH
6422: LD_INT 80
6424: PPUSH
6425: CALL_OW 171
// uc_side := 3 ;
6429: LD_ADDR_OWVAR 20
6433: PUSH
6434: LD_INT 3
6436: ST_TO_ADDR
// uc_nation := 3 ;
6437: LD_ADDR_OWVAR 21
6441: PUSH
6442: LD_INT 3
6444: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6445: LD_INT 1
6447: PPUSH
6448: LD_INT 1
6450: PPUSH
6451: LD_INT 6
6453: PPUSH
6454: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6458: LD_ADDR_OWVAR 29
6462: PUSH
6463: LD_INT 12
6465: PUSH
6466: LD_INT 12
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: ST_TO_ADDR
// un := CreateHuman ;
6473: LD_ADDR_VAR 0 3
6477: PUSH
6478: CALL_OW 44
6482: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6483: LD_VAR 0 3
6487: PPUSH
6488: LD_INT 134
6490: PPUSH
6491: LD_INT 52
6493: PPUSH
6494: LD_INT 4
6496: PPUSH
6497: LD_INT 0
6499: PPUSH
6500: CALL 69343 0 5
// ComTurnUnit ( un , Heike ) ;
6504: LD_VAR 0 3
6508: PPUSH
6509: LD_EXP 46
6513: PPUSH
6514: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6518: LD_VAR 0 3
6522: PPUSH
6523: LD_EXP 46
6527: PPUSH
6528: CALL_OW 112
// if GetSex ( un ) = sex_male then
6532: LD_VAR 0 3
6536: PPUSH
6537: CALL_OW 258
6541: PUSH
6542: LD_INT 1
6544: EQUAL
6545: IFFALSE 6561
// Say ( un , DRum-Fail-3 ) else
6547: LD_VAR 0 3
6551: PPUSH
6552: LD_STRING DRum-Fail-3
6554: PPUSH
6555: CALL_OW 88
6559: GO 6573
// Say ( un , DRuf-Fail-3 ) ;
6561: LD_VAR 0 3
6565: PPUSH
6566: LD_STRING DRuf-Fail-3
6568: PPUSH
6569: CALL_OW 88
// for i := 1 to 3 do
6573: LD_ADDR_VAR 0 2
6577: PUSH
6578: DOUBLE
6579: LD_INT 1
6581: DEC
6582: ST_TO_ADDR
6583: LD_INT 3
6585: PUSH
6586: FOR_TO
6587: IFFALSE 6660
// begin PrepareSoldier ( false , 10 ) ;
6589: LD_INT 0
6591: PPUSH
6592: LD_INT 10
6594: PPUSH
6595: CALL_OW 381
// un := CreateHuman ;
6599: LD_ADDR_VAR 0 3
6603: PUSH
6604: CALL_OW 44
6608: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6609: LD_ADDR_VAR 0 4
6613: PUSH
6614: LD_VAR 0 4
6618: PPUSH
6619: LD_VAR 0 3
6623: PPUSH
6624: CALL 67203 0 2
6628: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6629: LD_VAR 0 3
6633: PPUSH
6634: LD_INT 8
6636: PPUSH
6637: LD_INT 0
6639: PPUSH
6640: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6644: LD_VAR 0 3
6648: PPUSH
6649: LD_EXP 46
6653: PPUSH
6654: CALL_OW 119
// end ;
6658: GO 6586
6660: POP
6661: POP
// repeat wait ( 0 0$1 ) ;
6662: LD_INT 35
6664: PPUSH
6665: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6669: LD_VAR 0 4
6673: PPUSH
6674: LD_INT 101
6676: PUSH
6677: LD_INT 2
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PPUSH
6684: CALL_OW 72
6688: PUSH
6689: LD_INT 1
6691: GREATER
6692: IFFALSE 6662
// wait ( 0 0$1 ) ;
6694: LD_INT 35
6696: PPUSH
6697: CALL_OW 67
// DialogueOn ;
6701: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6705: LD_EXP 46
6709: PPUSH
6710: LD_STRING DH-Fail-4
6712: PPUSH
6713: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6717: LD_EXP 46
6721: PPUSH
6722: LD_STRING DH-Fail-5
6724: PPUSH
6725: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6729: LD_EXP 46
6733: PPUSH
6734: LD_STRING DH-Fail-6
6736: PPUSH
6737: CALL_OW 88
// DialogueOff ;
6741: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6745: LD_VAR 0 4
6749: PPUSH
6750: LD_EXP 46
6754: PPUSH
6755: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6759: LD_INT 35
6761: PPUSH
6762: CALL_OW 67
// until IsDying ( Heike ) ;
6766: LD_EXP 46
6770: PPUSH
6771: CALL_OW 303
6775: IFFALSE 6759
// KillUnit ( Heike ) ;
6777: LD_EXP 46
6781: PPUSH
6782: CALL_OW 66
// wait ( 0 0$4 ) ;
6786: LD_INT 140
6788: PPUSH
6789: CALL_OW 67
// ResetFog ;
6793: CALL_OW 335
// DialogueOn ;
6797: CALL_OW 6
// dwait ( 0 0$1 ) ;
6801: LD_INT 35
6803: PPUSH
6804: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6808: LD_ADDR_EXP 46
6812: PUSH
6813: LD_STRING Heike
6815: PPUSH
6816: LD_EXP 1
6820: NOT
6821: PPUSH
6822: LD_EXP 2
6826: PPUSH
6827: CALL 29471 0 3
6831: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6832: LD_EXP 46
6836: PPUSH
6837: LD_STRING DH-Fail-7
6839: PPUSH
6840: CALL_OW 89
// DialogueOff ;
6844: CALL_OW 7
// YouLost ( Fail ) ;
6848: LD_STRING Fail
6850: PPUSH
6851: CALL_OW 104
// end ;
6855: LD_VAR 0 1
6859: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6860: LD_INT 2
6862: PPUSH
6863: LD_INT 173
6865: PPUSH
6866: LD_INT 29
6868: PPUSH
6869: CALL_OW 293
6873: PUSH
6874: LD_EXP 46
6878: PPUSH
6879: LD_INT 173
6881: PPUSH
6882: LD_INT 29
6884: PPUSH
6885: CALL_OW 297
6889: PUSH
6890: LD_INT 6
6892: LESS
6893: AND
6894: IFFALSE 6911
6896: GO 6898
6898: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6899: LD_EXP 46
6903: PPUSH
6904: LD_STRING DH-EastRoad
6906: PPUSH
6907: CALL_OW 88
6911: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6912: LD_INT 2
6914: PPUSH
6915: LD_INT 149
6917: PPUSH
6918: LD_INT 3
6920: PPUSH
6921: CALL_OW 293
6925: PUSH
6926: LD_EXP 46
6930: PPUSH
6931: LD_INT 149
6933: PPUSH
6934: LD_INT 3
6936: PPUSH
6937: CALL_OW 297
6941: PUSH
6942: LD_INT 6
6944: LESS
6945: AND
6946: IFFALSE 6963
6948: GO 6950
6950: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6951: LD_EXP 46
6955: PPUSH
6956: LD_STRING DH-EastRoad
6958: PPUSH
6959: CALL_OW 88
6963: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6964: LD_INT 2
6966: PPUSH
6967: LD_INT 217
6969: PPUSH
6970: LD_INT 120
6972: PPUSH
6973: CALL_OW 293
6977: PUSH
6978: LD_EXP 46
6982: PPUSH
6983: LD_INT 217
6985: PPUSH
6986: LD_INT 120
6988: PPUSH
6989: CALL_OW 297
6993: PUSH
6994: LD_INT 6
6996: LESS
6997: AND
6998: IFFALSE 7015
7000: GO 7002
7002: DISABLE
// Say ( Heike , DH-EastEnd ) ;
7003: LD_EXP 46
7007: PPUSH
7008: LD_STRING DH-EastEnd
7010: PPUSH
7011: CALL_OW 88
7015: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
7016: LD_EXP 46
7020: PPUSH
7021: LD_INT 11
7023: PPUSH
7024: CALL_OW 308
7028: IFFALSE 7066
7030: GO 7032
7032: DISABLE
// begin if not heikeSquad then
7033: LD_EXP 14
7037: NOT
7038: IFFALSE 7054
// Say ( Heike , DH-Hill ) else
7040: LD_EXP 46
7044: PPUSH
7045: LD_STRING DH-Hill
7047: PPUSH
7048: CALL_OW 88
7052: GO 7066
// Say ( Heike , DH-Hill-a ) ;
7054: LD_EXP 46
7058: PPUSH
7059: LD_STRING DH-Hill-a
7061: PPUSH
7062: CALL_OW 88
// end ;
7066: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
7067: LD_EXP 46
7071: PPUSH
7072: LD_INT 12
7074: PPUSH
7075: CALL_OW 308
7079: IFFALSE 7266
7081: GO 7083
7083: DISABLE
7084: LD_INT 0
7086: PPUSH
7087: PPUSH
7088: PPUSH
// begin DialogueOn ;
7089: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7093: LD_EXP 46
7097: PPUSH
7098: CALL_OW 87
// x := GetX ( Heike ) ;
7102: LD_ADDR_VAR 0 1
7106: PUSH
7107: LD_EXP 46
7111: PPUSH
7112: CALL_OW 250
7116: ST_TO_ADDR
// y := GetY ( Heike ) ;
7117: LD_ADDR_VAR 0 2
7121: PUSH
7122: LD_EXP 46
7126: PPUSH
7127: CALL_OW 251
7131: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7132: LD_VAR 0 1
7136: PPUSH
7137: LD_VAR 0 2
7141: PPUSH
7142: LD_INT 2
7144: PPUSH
7145: LD_INT 12
7147: NEG
7148: PPUSH
7149: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7153: LD_VAR 0 1
7157: PPUSH
7158: LD_VAR 0 2
7162: PPUSH
7163: LD_INT 2
7165: PPUSH
7166: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7170: LD_INT 101
7172: PUSH
7173: LD_INT 2
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 2
7182: PUSH
7183: LD_INT 30
7185: PUSH
7186: LD_INT 32
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 30
7195: PUSH
7196: LD_INT 33
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PPUSH
7212: CALL_OW 69
7216: IFFALSE 7228
// v := 3 else
7218: LD_ADDR_VAR 0 3
7222: PUSH
7223: LD_INT 3
7225: ST_TO_ADDR
7226: GO 7236
// v := 2 ;
7228: LD_ADDR_VAR 0 3
7232: PUSH
7233: LD_INT 2
7235: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7236: LD_EXP 46
7240: PPUSH
7241: LD_STRING DH-Outpost-
7243: PUSH
7244: LD_INT 1
7246: PPUSH
7247: LD_VAR 0 3
7251: PPUSH
7252: CALL_OW 12
7256: STR
7257: PPUSH
7258: CALL_OW 88
// DialogueOff ;
7262: CALL_OW 7
// end ;
7266: PPOPN 3
7268: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorder2Area ) marked gameStartEvent do var x , y , v ;
7269: LD_EXP 46
7273: PPUSH
7274: LD_INT 64
7276: PPUSH
7277: CALL_OW 308
7281: IFFALSE 7468
7283: GO 7285
7285: DISABLE
7286: LD_INT 0
7288: PPUSH
7289: PPUSH
7290: PPUSH
// begin DialogueOn ;
7291: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7295: LD_EXP 46
7299: PPUSH
7300: CALL_OW 87
// x := GetX ( Heike ) ;
7304: LD_ADDR_VAR 0 1
7308: PUSH
7309: LD_EXP 46
7313: PPUSH
7314: CALL_OW 250
7318: ST_TO_ADDR
// y := GetY ( Heike ) ;
7319: LD_ADDR_VAR 0 2
7323: PUSH
7324: LD_EXP 46
7328: PPUSH
7329: CALL_OW 251
7333: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7334: LD_VAR 0 1
7338: PPUSH
7339: LD_VAR 0 2
7343: PPUSH
7344: LD_INT 2
7346: PPUSH
7347: LD_INT 12
7349: NEG
7350: PPUSH
7351: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7355: LD_VAR 0 1
7359: PPUSH
7360: LD_VAR 0 2
7364: PPUSH
7365: LD_INT 2
7367: PPUSH
7368: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7372: LD_INT 101
7374: PUSH
7375: LD_INT 2
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 2
7384: PUSH
7385: LD_INT 30
7387: PUSH
7388: LD_INT 32
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: LD_INT 30
7397: PUSH
7398: LD_INT 33
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: LIST
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PPUSH
7414: CALL_OW 69
7418: IFFALSE 7430
// v := 3 else
7420: LD_ADDR_VAR 0 3
7424: PUSH
7425: LD_INT 3
7427: ST_TO_ADDR
7428: GO 7438
// v := 2 ;
7430: LD_ADDR_VAR 0 3
7434: PUSH
7435: LD_INT 2
7437: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7438: LD_EXP 46
7442: PPUSH
7443: LD_STRING DH-Outpost-
7445: PUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_VAR 0 3
7453: PPUSH
7454: CALL_OW 12
7458: STR
7459: PPUSH
7460: CALL_OW 88
// DialogueOff ;
7464: CALL_OW 7
// end ;
7468: PPOPN 3
7470: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
7471: LD_EXP 46
7475: PPUSH
7476: LD_INT 19
7478: PPUSH
7479: CALL_OW 308
7483: PUSH
7484: LD_EXP 22
7488: NOT
7489: AND
7490: PUSH
7491: LD_EXP 30
7495: NOT
7496: AND
7497: IFFALSE 7570
7499: GO 7501
7501: DISABLE
// begin DialogueOn ;
7502: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
7506: LD_INT 152
7508: PPUSH
7509: LD_INT 115
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: LD_INT 16
7517: NEG
7518: PPUSH
7519: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7523: LD_INT 152
7525: PPUSH
7526: LD_INT 115
7528: PPUSH
7529: LD_INT 2
7531: PPUSH
7532: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7536: LD_INT 152
7538: PPUSH
7539: LD_INT 115
7541: PPUSH
7542: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7546: LD_EXP 46
7550: PPUSH
7551: LD_STRING DH-Stealth-1
7553: PPUSH
7554: CALL_OW 88
// DialogueOff ;
7558: CALL_OW 7
// adminAreaDiscovered := true ;
7562: LD_ADDR_EXP 22
7566: PUSH
7567: LD_INT 1
7569: ST_TO_ADDR
// end ;
7570: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7571: LD_INT 2
7573: PPUSH
7574: LD_EXP 47
7578: PPUSH
7579: CALL_OW 292
7583: PUSH
7584: LD_EXP 46
7588: PPUSH
7589: LD_EXP 47
7593: PPUSH
7594: CALL_OW 296
7598: PUSH
7599: LD_INT 6
7601: LESS
7602: AND
7603: PUSH
7604: LD_EXP 17
7608: NOT
7609: AND
7610: PUSH
7611: LD_EXP 30
7615: NOT
7616: AND
7617: IFFALSE 7723
7619: GO 7621
7621: DISABLE
// begin DialogueOn ;
7622: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7626: LD_EXP 47
7630: PPUSH
7631: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7635: LD_EXP 47
7639: PPUSH
7640: LD_EXP 46
7644: PPUSH
7645: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7649: LD_EXP 46
7653: PPUSH
7654: LD_EXP 47
7658: PPUSH
7659: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7663: LD_EXP 46
7667: PPUSH
7668: LD_STRING DH-Givi-1
7670: PPUSH
7671: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7675: LD_EXP 47
7679: PPUSH
7680: LD_STRING DG-Givi-2
7682: PPUSH
7683: CALL_OW 88
// DialogueOff ;
7687: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7691: LD_EXP 47
7695: PPUSH
7696: LD_INT 2
7698: PPUSH
7699: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7703: LD_ADDR_EXP 14
7707: PUSH
7708: LD_EXP 14
7712: PPUSH
7713: LD_EXP 47
7717: PPUSH
7718: CALL 67203 0 2
7722: ST_TO_ADDR
// end ;
7723: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7724: LD_INT 2
7726: PPUSH
7727: LD_EXP 52
7731: PPUSH
7732: CALL_OW 292
7736: PUSH
7737: LD_EXP 46
7741: PPUSH
7742: LD_EXP 52
7746: PPUSH
7747: CALL_OW 296
7751: PUSH
7752: LD_INT 6
7754: LESS
7755: AND
7756: PUSH
7757: LD_EXP 17
7761: NOT
7762: AND
7763: PUSH
7764: LD_EXP 30
7768: NOT
7769: AND
7770: IFFALSE 7876
7772: GO 7774
7774: DISABLE
// begin DialogueOn ;
7775: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7779: LD_EXP 52
7783: PPUSH
7784: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7788: LD_EXP 52
7792: PPUSH
7793: LD_EXP 46
7797: PPUSH
7798: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7802: LD_EXP 46
7806: PPUSH
7807: LD_EXP 52
7811: PPUSH
7812: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7816: LD_EXP 46
7820: PPUSH
7821: LD_STRING DH-Sophia-1
7823: PPUSH
7824: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7828: LD_EXP 52
7832: PPUSH
7833: LD_STRING DS-Sophia-2
7835: PPUSH
7836: CALL_OW 88
// DialogueOff ;
7840: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7844: LD_EXP 52
7848: PPUSH
7849: LD_INT 2
7851: PPUSH
7852: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7856: LD_ADDR_EXP 14
7860: PUSH
7861: LD_EXP 14
7865: PPUSH
7866: LD_EXP 52
7870: PPUSH
7871: CALL 67203 0 2
7875: ST_TO_ADDR
// end ;
7876: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7877: LD_INT 2
7879: PPUSH
7880: LD_EXP 54
7884: PPUSH
7885: CALL_OW 292
7889: PUSH
7890: LD_EXP 46
7894: PPUSH
7895: LD_EXP 54
7899: PPUSH
7900: CALL_OW 296
7904: PUSH
7905: LD_INT 6
7907: LESS
7908: AND
7909: PUSH
7910: LD_EXP 17
7914: NOT
7915: AND
7916: PUSH
7917: LD_EXP 30
7921: NOT
7922: AND
7923: IFFALSE 8019
7925: GO 7927
7927: DISABLE
// begin DialogueOn ;
7928: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7932: LD_EXP 54
7936: PPUSH
7937: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7941: LD_EXP 46
7945: PPUSH
7946: LD_STRING DH-Olaf-1
7948: PPUSH
7949: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7953: LD_EXP 54
7957: PPUSH
7958: LD_STRING DO-Olaf-2
7960: PPUSH
7961: CALL_OW 88
// if explosionsTakenByRussians then
7965: LD_EXP 21
7969: IFFALSE 7983
// Say ( Olaf , DO-Olaf-a-3 ) ;
7971: LD_EXP 54
7975: PPUSH
7976: LD_STRING DO-Olaf-a-3
7978: PPUSH
7979: CALL_OW 88
// DialogueOff ;
7983: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7987: LD_EXP 54
7991: PPUSH
7992: LD_INT 2
7994: PPUSH
7995: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7999: LD_ADDR_EXP 14
8003: PUSH
8004: LD_EXP 14
8008: PPUSH
8009: LD_EXP 54
8013: PPUSH
8014: CALL 67203 0 2
8018: ST_TO_ADDR
// end ;
8019: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
8020: LD_INT 2
8022: PPUSH
8023: LD_EXP 48
8027: PPUSH
8028: CALL_OW 292
8032: PUSH
8033: LD_EXP 46
8037: PPUSH
8038: LD_EXP 48
8042: PPUSH
8043: CALL_OW 296
8047: PUSH
8048: LD_INT 6
8050: LESS
8051: AND
8052: PUSH
8053: LD_EXP 17
8057: NOT
8058: AND
8059: PUSH
8060: LD_EXP 30
8064: NOT
8065: AND
8066: IFFALSE 8294
8068: GO 8070
8070: DISABLE
8071: LD_INT 0
8073: PPUSH
8074: PPUSH
// begin DialogueOn ;
8075: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
8079: LD_EXP 48
8083: PPUSH
8084: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
8088: LD_ADDR_VAR 0 2
8092: PUSH
8093: LD_INT 18
8095: PPUSH
8096: LD_INT 0
8098: PPUSH
8099: CALL_OW 517
8103: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
8104: LD_ADDR_VAR 0 1
8108: PUSH
8109: DOUBLE
8110: LD_INT 1
8112: DEC
8113: ST_TO_ADDR
8114: LD_VAR 0 2
8118: PUSH
8119: LD_INT 1
8121: ARRAY
8122: PUSH
8123: FOR_TO
8124: IFFALSE 8206
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
8126: LD_VAR 0 2
8130: PUSH
8131: LD_INT 1
8133: ARRAY
8134: PUSH
8135: LD_VAR 0 1
8139: ARRAY
8140: PPUSH
8141: LD_VAR 0 2
8145: PUSH
8146: LD_INT 2
8148: ARRAY
8149: PUSH
8150: LD_VAR 0 1
8154: ARRAY
8155: PPUSH
8156: LD_INT 2
8158: PPUSH
8159: LD_INT 3
8161: NEG
8162: PPUSH
8163: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
8167: LD_VAR 0 2
8171: PUSH
8172: LD_INT 1
8174: ARRAY
8175: PUSH
8176: LD_VAR 0 1
8180: ARRAY
8181: PPUSH
8182: LD_VAR 0 2
8186: PUSH
8187: LD_INT 2
8189: ARRAY
8190: PUSH
8191: LD_VAR 0 1
8195: ARRAY
8196: PPUSH
8197: LD_INT 2
8199: PPUSH
8200: CALL_OW 331
// end ;
8204: GO 8123
8206: POP
8207: POP
// Say ( Mike , DM-Mike-1 ) ;
8208: LD_EXP 48
8212: PPUSH
8213: LD_STRING DM-Mike-1
8215: PPUSH
8216: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
8220: LD_EXP 46
8224: PPUSH
8225: LD_STRING DH-Mike-2
8227: PPUSH
8228: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
8232: LD_INT 78
8234: PPUSH
8235: LD_INT 104
8237: PPUSH
8238: CALL_OW 84
// dwait ( 0 0$1 ) ;
8242: LD_INT 35
8244: PPUSH
8245: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8249: LD_EXP 46
8253: PPUSH
8254: CALL_OW 87
// DialogueOff ;
8258: CALL_OW 7
// SetSide ( Mike , 2 ) ;
8262: LD_EXP 48
8266: PPUSH
8267: LD_INT 2
8269: PPUSH
8270: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
8274: LD_ADDR_EXP 14
8278: PUSH
8279: LD_EXP 14
8283: PPUSH
8284: LD_EXP 48
8288: PPUSH
8289: CALL 67203 0 2
8293: ST_TO_ADDR
// end ;
8294: PPOPN 2
8296: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and not hasMuchin and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
8297: LD_EXP 46
8301: PPUSH
8302: LD_EXP 51
8306: PPUSH
8307: CALL_OW 296
8311: PUSH
8312: LD_INT 6
8314: LESS
8315: PUSH
8316: LD_EXP 51
8320: PPUSH
8321: CALL_OW 257
8325: PUSH
8326: LD_INT 33
8328: EQUAL
8329: AND
8330: PUSH
8331: LD_EXP 17
8335: NOT
8336: AND
8337: PUSH
8338: LD_EXP 30
8342: NOT
8343: AND
8344: PUSH
8345: LD_EXP 51
8349: PPUSH
8350: CALL_OW 302
8354: AND
8355: PUSH
8356: LD_EXP 20
8360: AND
8361: PUSH
8362: LD_EXP 51
8366: PUSH
8367: LD_EXP 14
8371: IN
8372: AND
8373: PUSH
8374: LD_EXP 51
8378: PPUSH
8379: CALL_OW 255
8383: PUSH
8384: LD_INT 2
8386: EQUAL
8387: AND
8388: IFFALSE 8417
8390: GO 8392
8392: DISABLE
// begin DialogueOn ;
8393: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
8397: LD_EXP 46
8401: PPUSH
8402: LD_STRING DH-Kaia-Revolver-2
8404: PPUSH
8405: CALL_OW 88
// SetClassKaiaRevolver ;
8409: CALL 1769 0 0
// DialogueOff ;
8413: CALL_OW 7
// end ;
8417: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
8418: LD_EXP 49
8422: PUSH
8423: LD_EXP 56
8427: AND
8428: PUSH
8429: LD_EXP 56
8433: PPUSH
8434: CALL_OW 255
8438: PUSH
8439: LD_INT 2
8441: NONEQUAL
8442: AND
8443: PUSH
8444: LD_EXP 49
8448: PPUSH
8449: CALL_OW 255
8453: PUSH
8454: LD_INT 2
8456: NONEQUAL
8457: AND
8458: PUSH
8459: LD_EXP 14
8463: PPUSH
8464: LD_INT 22
8466: PUSH
8467: LD_INT 2
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PPUSH
8474: CALL_OW 72
8478: PUSH
8479: LD_INT 5
8481: GREATER
8482: AND
8483: PUSH
8484: LD_EXP 17
8488: NOT
8489: AND
8490: PUSH
8491: LD_EXP 30
8495: NOT
8496: AND
8497: IFFALSE 9214
8499: GO 8501
8501: DISABLE
8502: LD_INT 0
8504: PPUSH
8505: PPUSH
// begin DialogueOn ;
8506: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8510: LD_ADDR_VAR 0 2
8514: PUSH
8515: LD_EXP 47
8519: PPUSH
8520: CALL_OW 302
8524: PUSH
8525: LD_EXP 47
8529: PUSH
8530: LD_EXP 14
8534: IN
8535: AND
8536: PUSH
8537: LD_EXP 47
8541: PPUSH
8542: CALL_OW 255
8546: PUSH
8547: LD_INT 2
8549: EQUAL
8550: AND
8551: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8552: LD_EXP 46
8556: PPUSH
8557: LD_STRING DH-Med-1
8559: PPUSH
8560: CALL_OW 88
// if hasGivi then
8564: LD_VAR 0 2
8568: IFFALSE 8584
// Say ( Givi , DG-Med-2 ) else
8570: LD_EXP 47
8574: PPUSH
8575: LD_STRING DG-Med-2
8577: PPUSH
8578: CALL_OW 88
8582: GO 8689
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8584: LD_EXP 14
8588: PUSH
8589: LD_EXP 57
8593: ISECT
8594: PPUSH
8595: LD_INT 22
8597: PUSH
8598: LD_INT 2
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: LD_INT 26
8607: PUSH
8608: LD_INT 1
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PPUSH
8619: CALL_OW 72
8623: PUSH
8624: LD_INT 1
8626: ARRAY
8627: PPUSH
8628: LD_STRING DArm-Med-e-2
8630: PPUSH
8631: CALL_OW 88
8635: NOT
8636: IFFALSE 8689
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8638: LD_EXP 14
8642: PUSH
8643: LD_EXP 57
8647: ISECT
8648: PPUSH
8649: LD_INT 22
8651: PUSH
8652: LD_INT 2
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PUSH
8659: LD_INT 26
8661: PUSH
8662: LD_INT 2
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PPUSH
8673: CALL_OW 72
8677: PUSH
8678: LD_INT 1
8680: ARRAY
8681: PPUSH
8682: LD_STRING DArf-Med-e-2
8684: PPUSH
8685: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8689: LD_INT 154
8691: PPUSH
8692: LD_INT 119
8694: PPUSH
8695: LD_INT 70
8697: PPUSH
8698: CALL 20175 0 3
// Say ( Heike , DH-Med-3 ) ;
8702: LD_EXP 46
8706: PPUSH
8707: LD_STRING DH-Med-3
8709: PPUSH
8710: CALL_OW 88
// if hasGivi then
8714: LD_VAR 0 2
8718: IFFALSE 8734
// Say ( Givi , DG-Med-4 ) else
8720: LD_EXP 47
8724: PPUSH
8725: LD_STRING DG-Med-4
8727: PPUSH
8728: CALL_OW 88
8732: GO 8839
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8734: LD_EXP 14
8738: PUSH
8739: LD_EXP 57
8743: ISECT
8744: PPUSH
8745: LD_INT 22
8747: PUSH
8748: LD_INT 2
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 26
8757: PUSH
8758: LD_INT 1
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PPUSH
8769: CALL_OW 72
8773: PUSH
8774: LD_INT 1
8776: ARRAY
8777: PPUSH
8778: LD_STRING DArm-Med-e-4
8780: PPUSH
8781: CALL_OW 88
8785: NOT
8786: IFFALSE 8839
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8788: LD_EXP 14
8792: PUSH
8793: LD_EXP 57
8797: ISECT
8798: PPUSH
8799: LD_INT 22
8801: PUSH
8802: LD_INT 2
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 26
8811: PUSH
8812: LD_INT 2
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PPUSH
8823: CALL_OW 72
8827: PUSH
8828: LD_INT 1
8830: ARRAY
8831: PPUSH
8832: LD_STRING DArf-Med-e-4
8834: PPUSH
8835: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8839: LD_ADDR_VAR 0 1
8843: PUSH
8844: LD_EXP 51
8848: PPUSH
8849: CALL_OW 302
8853: PUSH
8854: LD_EXP 51
8858: PUSH
8859: LD_EXP 14
8863: IN
8864: AND
8865: PUSH
8866: LD_EXP 51
8870: PPUSH
8871: CALL_OW 255
8875: PUSH
8876: LD_INT 2
8878: EQUAL
8879: AND
8880: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8881: LD_EXP 48
8885: PPUSH
8886: CALL_OW 302
8890: PUSH
8891: LD_EXP 48
8895: PUSH
8896: LD_EXP 14
8900: IN
8901: AND
8902: PUSH
8903: LD_EXP 51
8907: PPUSH
8908: CALL_OW 255
8912: PUSH
8913: LD_INT 2
8915: EQUAL
8916: AND
8917: IFFALSE 8949
// begin Say ( Mike , DM-Med-5 ) ;
8919: LD_EXP 48
8923: PPUSH
8924: LD_STRING DM-Med-5
8926: PPUSH
8927: CALL_OW 88
// if hasKaia then
8931: LD_VAR 0 1
8935: IFFALSE 8949
// Say ( Kaia , DK-Med-6 ) ;
8937: LD_EXP 51
8941: PPUSH
8942: LD_STRING DK-Med-6
8944: PPUSH
8945: CALL_OW 88
// end ; if hasKaia then
8949: LD_VAR 0 1
8953: IFFALSE 9194
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8955: LD_INT 175
8957: PPUSH
8958: LD_INT 123
8960: PPUSH
8961: LD_INT 2
8963: PPUSH
8964: LD_INT 8
8966: NEG
8967: PPUSH
8968: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8972: LD_INT 175
8974: PPUSH
8975: LD_INT 123
8977: PPUSH
8978: LD_INT 2
8980: PPUSH
8981: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8985: LD_INT 175
8987: PPUSH
8988: LD_INT 123
8990: PPUSH
8991: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
8995: LD_EXP 51
8999: PPUSH
9000: LD_STRING DK-Med-7
9002: PPUSH
9003: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9007: LD_EXP 51
9011: PPUSH
9012: LD_STRING DK-Med-8
9014: PPUSH
9015: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9019: LD_EXP 53
9023: PPUSH
9024: CALL_OW 302
9028: PUSH
9029: LD_EXP 53
9033: PUSH
9034: LD_EXP 14
9038: IN
9039: AND
9040: PUSH
9041: LD_EXP 53
9045: PPUSH
9046: CALL_OW 255
9050: PUSH
9051: LD_INT 2
9053: EQUAL
9054: AND
9055: IFFALSE 9113
// begin Say ( Markov , DMar-Med-9 ) ;
9057: LD_EXP 53
9061: PPUSH
9062: LD_STRING DMar-Med-9
9064: PPUSH
9065: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9069: LD_EXP 51
9073: PPUSH
9074: LD_STRING DK-Med-10
9076: PPUSH
9077: CALL_OW 88
// if hasGivi then
9081: LD_VAR 0 2
9085: IFFALSE 9101
// Say ( Kaia , DK-Med-11 ) else
9087: LD_EXP 51
9091: PPUSH
9092: LD_STRING DK-Med-11
9094: PPUSH
9095: CALL_OW 88
9099: GO 9113
// Say ( Kaia , DK-Med-a-11 ) ;
9101: LD_EXP 51
9105: PPUSH
9106: LD_STRING DK-Med-a-11
9108: PPUSH
9109: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9113: LD_EXP 50
9117: PPUSH
9118: CALL_OW 302
9122: PUSH
9123: LD_EXP 50
9127: PUSH
9128: LD_EXP 14
9132: IN
9133: AND
9134: PUSH
9135: LD_EXP 50
9139: PPUSH
9140: CALL_OW 255
9144: PUSH
9145: LD_INT 2
9147: EQUAL
9148: AND
9149: IFFALSE 9194
// begin Say ( Kamil , DKam-Med-12 ) ;
9151: LD_EXP 50
9155: PPUSH
9156: LD_STRING DKam-Med-12
9158: PPUSH
9159: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9163: LD_EXP 50
9167: PPUSH
9168: LD_STRING DKam-Med-13
9170: PPUSH
9171: CALL_OW 88
// if not hasExplosionCollected then
9175: LD_EXP 23
9179: NOT
9180: IFFALSE 9194
// Say ( Heike , DH-Med-d-14 ) ;
9182: LD_EXP 46
9186: PPUSH
9187: LD_STRING DH-Med-d-14
9189: PPUSH
9190: CALL_OW 88
// end ; end ; DialogueOff ;
9194: CALL_OW 7
// adminAreaDiscovered := true ;
9198: LD_ADDR_EXP 22
9202: PUSH
9203: LD_INT 1
9205: ST_TO_ADDR
// laundryAllowed := true ;
9206: LD_ADDR_EXP 26
9210: PUSH
9211: LD_INT 1
9213: ST_TO_ADDR
// end ;
9214: PPOPN 2
9216: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9217: LD_EXP 49
9221: NOT
9222: PUSH
9223: LD_EXP 56
9227: AND
9228: PUSH
9229: LD_EXP 56
9233: PUSH
9234: LD_EXP 14
9238: IN
9239: NOT
9240: AND
9241: PUSH
9242: LD_EXP 14
9246: PPUSH
9247: LD_INT 22
9249: PUSH
9250: LD_INT 2
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 72
9261: PUSH
9262: LD_INT 4
9264: GREATER
9265: AND
9266: PUSH
9267: LD_EXP 17
9271: NOT
9272: AND
9273: PUSH
9274: LD_EXP 30
9278: NOT
9279: AND
9280: IFFALSE 9997
9282: GO 9284
9284: DISABLE
9285: LD_INT 0
9287: PPUSH
9288: PPUSH
// begin DialogueOn ;
9289: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9293: LD_ADDR_VAR 0 1
9297: PUSH
9298: LD_EXP 47
9302: PPUSH
9303: CALL_OW 302
9307: PUSH
9308: LD_EXP 47
9312: PUSH
9313: LD_EXP 14
9317: IN
9318: AND
9319: PUSH
9320: LD_EXP 47
9324: PPUSH
9325: CALL_OW 255
9329: PUSH
9330: LD_INT 2
9332: EQUAL
9333: AND
9334: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
9335: LD_EXP 46
9339: PPUSH
9340: LD_STRING DH-Med-a-1
9342: PPUSH
9343: CALL_OW 88
// if hasGivi then
9347: LD_VAR 0 1
9351: IFFALSE 9367
// Say ( Givi , DG-Med-a-2 ) else
9353: LD_EXP 47
9357: PPUSH
9358: LD_STRING DG-Med-a-2
9360: PPUSH
9361: CALL_OW 88
9365: GO 9472
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9367: LD_EXP 14
9371: PUSH
9372: LD_EXP 57
9376: ISECT
9377: PPUSH
9378: LD_INT 22
9380: PUSH
9381: LD_INT 2
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 26
9390: PUSH
9391: LD_INT 1
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PPUSH
9402: CALL_OW 72
9406: PUSH
9407: LD_INT 1
9409: ARRAY
9410: PPUSH
9411: LD_STRING DArm-Med-f-2
9413: PPUSH
9414: CALL_OW 88
9418: NOT
9419: IFFALSE 9472
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9421: LD_EXP 14
9425: PUSH
9426: LD_EXP 57
9430: ISECT
9431: PPUSH
9432: LD_INT 22
9434: PUSH
9435: LD_INT 2
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: PUSH
9442: LD_INT 26
9444: PUSH
9445: LD_INT 2
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PPUSH
9456: CALL_OW 72
9460: PUSH
9461: LD_INT 1
9463: ARRAY
9464: PPUSH
9465: LD_STRING DArf-Med-f-2
9467: PPUSH
9468: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9472: LD_INT 154
9474: PPUSH
9475: LD_INT 119
9477: PPUSH
9478: LD_INT 70
9480: PPUSH
9481: CALL 20175 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9485: LD_EXP 46
9489: PPUSH
9490: LD_STRING DH-Med-a-3
9492: PPUSH
9493: CALL_OW 88
// if hasGivi then
9497: LD_VAR 0 1
9501: IFFALSE 9517
// Say ( Givi , DG-Med-a-4 ) else
9503: LD_EXP 47
9507: PPUSH
9508: LD_STRING DG-Med-a-4
9510: PPUSH
9511: CALL_OW 88
9515: GO 9622
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9517: LD_EXP 14
9521: PUSH
9522: LD_EXP 57
9526: ISECT
9527: PPUSH
9528: LD_INT 22
9530: PUSH
9531: LD_INT 2
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: LD_INT 26
9540: PUSH
9541: LD_INT 1
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PPUSH
9552: CALL_OW 72
9556: PUSH
9557: LD_INT 1
9559: ARRAY
9560: PPUSH
9561: LD_STRING DArm-Med-f-4
9563: PPUSH
9564: CALL_OW 88
9568: NOT
9569: IFFALSE 9622
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9571: LD_EXP 14
9575: PUSH
9576: LD_EXP 57
9580: ISECT
9581: PPUSH
9582: LD_INT 22
9584: PUSH
9585: LD_INT 2
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 26
9594: PUSH
9595: LD_INT 2
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PPUSH
9606: CALL_OW 72
9610: PUSH
9611: LD_INT 1
9613: ARRAY
9614: PPUSH
9615: LD_STRING DArf-Med-f-4
9617: PPUSH
9618: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9622: LD_ADDR_VAR 0 2
9626: PUSH
9627: LD_EXP 51
9631: PPUSH
9632: CALL_OW 302
9636: PUSH
9637: LD_EXP 51
9641: PUSH
9642: LD_EXP 14
9646: IN
9647: AND
9648: PUSH
9649: LD_EXP 51
9653: PPUSH
9654: CALL_OW 255
9658: PUSH
9659: LD_INT 2
9661: EQUAL
9662: AND
9663: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9664: LD_EXP 48
9668: PPUSH
9669: CALL_OW 302
9673: PUSH
9674: LD_EXP 48
9678: PUSH
9679: LD_EXP 14
9683: IN
9684: AND
9685: PUSH
9686: LD_EXP 48
9690: PPUSH
9691: CALL_OW 255
9695: PUSH
9696: LD_INT 2
9698: EQUAL
9699: AND
9700: IFFALSE 9732
// begin Say ( Mike , DM-Med-5 ) ;
9702: LD_EXP 48
9706: PPUSH
9707: LD_STRING DM-Med-5
9709: PPUSH
9710: CALL_OW 88
// if hasKaia then
9714: LD_VAR 0 2
9718: IFFALSE 9732
// Say ( Kaia , DK-Med-6 ) ;
9720: LD_EXP 51
9724: PPUSH
9725: LD_STRING DK-Med-6
9727: PPUSH
9728: CALL_OW 88
// end ; if hasKaia then
9732: LD_VAR 0 2
9736: IFFALSE 9977
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9738: LD_INT 175
9740: PPUSH
9741: LD_INT 123
9743: PPUSH
9744: LD_INT 2
9746: PPUSH
9747: LD_INT 8
9749: NEG
9750: PPUSH
9751: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9755: LD_INT 175
9757: PPUSH
9758: LD_INT 123
9760: PPUSH
9761: LD_INT 2
9763: PPUSH
9764: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9768: LD_INT 175
9770: PPUSH
9771: LD_INT 123
9773: PPUSH
9774: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9778: LD_EXP 51
9782: PPUSH
9783: LD_STRING DK-Med-7
9785: PPUSH
9786: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9790: LD_EXP 51
9794: PPUSH
9795: LD_STRING DK-Med-8
9797: PPUSH
9798: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9802: LD_EXP 53
9806: PPUSH
9807: CALL_OW 302
9811: PUSH
9812: LD_EXP 53
9816: PUSH
9817: LD_EXP 14
9821: IN
9822: AND
9823: PUSH
9824: LD_EXP 53
9828: PPUSH
9829: CALL_OW 255
9833: PUSH
9834: LD_INT 2
9836: EQUAL
9837: AND
9838: IFFALSE 9896
// begin Say ( Markov , DMar-Med-9 ) ;
9840: LD_EXP 53
9844: PPUSH
9845: LD_STRING DMar-Med-9
9847: PPUSH
9848: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9852: LD_EXP 51
9856: PPUSH
9857: LD_STRING DK-Med-10
9859: PPUSH
9860: CALL_OW 88
// if hasGivi then
9864: LD_VAR 0 1
9868: IFFALSE 9884
// Say ( Kaia , DK-Med-11 ) else
9870: LD_EXP 51
9874: PPUSH
9875: LD_STRING DK-Med-11
9877: PPUSH
9878: CALL_OW 88
9882: GO 9896
// Say ( Kaia , DK-Med-a-11 ) ;
9884: LD_EXP 51
9888: PPUSH
9889: LD_STRING DK-Med-a-11
9891: PPUSH
9892: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9896: LD_EXP 50
9900: PPUSH
9901: CALL_OW 302
9905: PUSH
9906: LD_EXP 50
9910: PUSH
9911: LD_EXP 14
9915: IN
9916: AND
9917: PUSH
9918: LD_EXP 50
9922: PPUSH
9923: CALL_OW 255
9927: PUSH
9928: LD_INT 2
9930: EQUAL
9931: AND
9932: IFFALSE 9977
// begin Say ( Kamil , DKam-Med-12 ) ;
9934: LD_EXP 50
9938: PPUSH
9939: LD_STRING DKam-Med-12
9941: PPUSH
9942: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9946: LD_EXP 50
9950: PPUSH
9951: LD_STRING DKam-Med-13
9953: PPUSH
9954: CALL_OW 88
// if not hasExplosionCollected then
9958: LD_EXP 23
9962: NOT
9963: IFFALSE 9977
// Say ( Heike , DH-Med-d-14 ) ;
9965: LD_EXP 46
9969: PPUSH
9970: LD_STRING DH-Med-d-14
9972: PPUSH
9973: CALL_OW 88
// end ; end ; DialogueOff ;
9977: CALL_OW 7
// adminAreaDiscovered := true ;
9981: LD_ADDR_EXP 22
9985: PUSH
9986: LD_INT 1
9988: ST_TO_ADDR
// laundryAllowed := true ;
9989: LD_ADDR_EXP 26
9993: PUSH
9994: LD_INT 1
9996: ST_TO_ADDR
// end ;
9997: PPOPN 2
9999: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
10000: LD_EXP 49
10004: PUSH
10005: LD_EXP 56
10009: NOT
10010: AND
10011: PUSH
10012: LD_EXP 49
10016: PUSH
10017: LD_EXP 14
10021: IN
10022: NOT
10023: AND
10024: PUSH
10025: LD_EXP 14
10029: PPUSH
10030: LD_INT 22
10032: PUSH
10033: LD_INT 2
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PPUSH
10040: CALL_OW 72
10044: PUSH
10045: LD_INT 4
10047: GREATER
10048: AND
10049: PUSH
10050: LD_EXP 17
10054: NOT
10055: AND
10056: PUSH
10057: LD_EXP 30
10061: NOT
10062: AND
10063: IFFALSE 10780
10065: GO 10067
10067: DISABLE
10068: LD_INT 0
10070: PPUSH
10071: PPUSH
// begin DialogueOn ;
10072: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
10076: LD_ADDR_VAR 0 1
10080: PUSH
10081: LD_EXP 47
10085: PPUSH
10086: CALL_OW 302
10090: PUSH
10091: LD_EXP 47
10095: PUSH
10096: LD_EXP 14
10100: IN
10101: AND
10102: PUSH
10103: LD_EXP 47
10107: PPUSH
10108: CALL_OW 255
10112: PUSH
10113: LD_INT 2
10115: EQUAL
10116: AND
10117: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
10118: LD_EXP 46
10122: PPUSH
10123: LD_STRING DH-Med-b-1
10125: PPUSH
10126: CALL_OW 88
// if hasGivi then
10130: LD_VAR 0 1
10134: IFFALSE 10150
// Say ( Givi , DG-Med-a-2 ) else
10136: LD_EXP 47
10140: PPUSH
10141: LD_STRING DG-Med-a-2
10143: PPUSH
10144: CALL_OW 88
10148: GO 10255
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
10150: LD_EXP 14
10154: PUSH
10155: LD_EXP 57
10159: ISECT
10160: PPUSH
10161: LD_INT 22
10163: PUSH
10164: LD_INT 2
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: LD_INT 26
10173: PUSH
10174: LD_INT 1
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: PPUSH
10185: CALL_OW 72
10189: PUSH
10190: LD_INT 1
10192: ARRAY
10193: PPUSH
10194: LD_STRING DArm-Med-f-2
10196: PPUSH
10197: CALL_OW 88
10201: NOT
10202: IFFALSE 10255
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
10204: LD_EXP 14
10208: PUSH
10209: LD_EXP 57
10213: ISECT
10214: PPUSH
10215: LD_INT 22
10217: PUSH
10218: LD_INT 2
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PUSH
10225: LD_INT 26
10227: PUSH
10228: LD_INT 2
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PPUSH
10239: CALL_OW 72
10243: PUSH
10244: LD_INT 1
10246: ARRAY
10247: PPUSH
10248: LD_STRING DArf-Med-f-2
10250: PPUSH
10251: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
10255: LD_INT 154
10257: PPUSH
10258: LD_INT 119
10260: PPUSH
10261: LD_INT 70
10263: PPUSH
10264: CALL 20175 0 3
// Say ( Heike , DH-Med-a-3 ) ;
10268: LD_EXP 46
10272: PPUSH
10273: LD_STRING DH-Med-a-3
10275: PPUSH
10276: CALL_OW 88
// if hasGivi then
10280: LD_VAR 0 1
10284: IFFALSE 10300
// Say ( Givi , DG-Med-a-4 ) else
10286: LD_EXP 47
10290: PPUSH
10291: LD_STRING DG-Med-a-4
10293: PPUSH
10294: CALL_OW 88
10298: GO 10405
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
10300: LD_EXP 14
10304: PUSH
10305: LD_EXP 57
10309: ISECT
10310: PPUSH
10311: LD_INT 22
10313: PUSH
10314: LD_INT 2
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 26
10323: PUSH
10324: LD_INT 1
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PPUSH
10335: CALL_OW 72
10339: PUSH
10340: LD_INT 1
10342: ARRAY
10343: PPUSH
10344: LD_STRING DArm-Med-f-4
10346: PPUSH
10347: CALL_OW 88
10351: NOT
10352: IFFALSE 10405
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
10354: LD_EXP 14
10358: PUSH
10359: LD_EXP 57
10363: ISECT
10364: PPUSH
10365: LD_INT 22
10367: PUSH
10368: LD_INT 2
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 26
10377: PUSH
10378: LD_INT 2
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PPUSH
10389: CALL_OW 72
10393: PUSH
10394: LD_INT 1
10396: ARRAY
10397: PPUSH
10398: LD_STRING DArf-Med-f-4
10400: PPUSH
10401: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
10405: LD_ADDR_VAR 0 2
10409: PUSH
10410: LD_EXP 51
10414: PPUSH
10415: CALL_OW 302
10419: PUSH
10420: LD_EXP 51
10424: PUSH
10425: LD_EXP 14
10429: IN
10430: AND
10431: PUSH
10432: LD_EXP 51
10436: PPUSH
10437: CALL_OW 255
10441: PUSH
10442: LD_INT 2
10444: EQUAL
10445: AND
10446: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
10447: LD_EXP 48
10451: PPUSH
10452: CALL_OW 302
10456: PUSH
10457: LD_EXP 48
10461: PUSH
10462: LD_EXP 14
10466: IN
10467: AND
10468: PUSH
10469: LD_EXP 48
10473: PPUSH
10474: CALL_OW 255
10478: PUSH
10479: LD_INT 2
10481: EQUAL
10482: AND
10483: IFFALSE 10515
// begin Say ( Mike , DM-Med-5 ) ;
10485: LD_EXP 48
10489: PPUSH
10490: LD_STRING DM-Med-5
10492: PPUSH
10493: CALL_OW 88
// if hasKaia then
10497: LD_VAR 0 2
10501: IFFALSE 10515
// Say ( Kaia , DK-Med-6 ) ;
10503: LD_EXP 51
10507: PPUSH
10508: LD_STRING DK-Med-6
10510: PPUSH
10511: CALL_OW 88
// end ; if hasKaia then
10515: LD_VAR 0 2
10519: IFFALSE 10760
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
10521: LD_INT 175
10523: PPUSH
10524: LD_INT 123
10526: PPUSH
10527: LD_INT 2
10529: PPUSH
10530: LD_INT 8
10532: NEG
10533: PPUSH
10534: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10538: LD_INT 175
10540: PPUSH
10541: LD_INT 123
10543: PPUSH
10544: LD_INT 2
10546: PPUSH
10547: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10551: LD_INT 175
10553: PPUSH
10554: LD_INT 123
10556: PPUSH
10557: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10561: LD_EXP 51
10565: PPUSH
10566: LD_STRING DK-Med-7
10568: PPUSH
10569: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10573: LD_EXP 51
10577: PPUSH
10578: LD_STRING DK-Med-8
10580: PPUSH
10581: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10585: LD_EXP 53
10589: PPUSH
10590: CALL_OW 302
10594: PUSH
10595: LD_EXP 53
10599: PUSH
10600: LD_EXP 14
10604: IN
10605: AND
10606: PUSH
10607: LD_EXP 53
10611: PPUSH
10612: CALL_OW 255
10616: PUSH
10617: LD_INT 2
10619: EQUAL
10620: AND
10621: IFFALSE 10679
// begin Say ( Markov , DMar-Med-9 ) ;
10623: LD_EXP 53
10627: PPUSH
10628: LD_STRING DMar-Med-9
10630: PPUSH
10631: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10635: LD_EXP 51
10639: PPUSH
10640: LD_STRING DK-Med-10
10642: PPUSH
10643: CALL_OW 88
// if hasGivi then
10647: LD_VAR 0 1
10651: IFFALSE 10667
// Say ( Kaia , DK-Med-11 ) else
10653: LD_EXP 51
10657: PPUSH
10658: LD_STRING DK-Med-11
10660: PPUSH
10661: CALL_OW 88
10665: GO 10679
// Say ( Kaia , DK-Med-a-11 ) ;
10667: LD_EXP 51
10671: PPUSH
10672: LD_STRING DK-Med-a-11
10674: PPUSH
10675: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10679: LD_EXP 50
10683: PPUSH
10684: CALL_OW 302
10688: PUSH
10689: LD_EXP 50
10693: PUSH
10694: LD_EXP 14
10698: IN
10699: AND
10700: PUSH
10701: LD_EXP 50
10705: PPUSH
10706: CALL_OW 255
10710: PUSH
10711: LD_INT 2
10713: EQUAL
10714: AND
10715: IFFALSE 10760
// begin Say ( Kamil , DKam-Med-12 ) ;
10717: LD_EXP 50
10721: PPUSH
10722: LD_STRING DKam-Med-12
10724: PPUSH
10725: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10729: LD_EXP 50
10733: PPUSH
10734: LD_STRING DKam-Med-13
10736: PPUSH
10737: CALL_OW 88
// if not hasExplosionCollected then
10741: LD_EXP 23
10745: NOT
10746: IFFALSE 10760
// Say ( Heike , DH-Med-d-14 ) ;
10748: LD_EXP 46
10752: PPUSH
10753: LD_STRING DH-Med-d-14
10755: PPUSH
10756: CALL_OW 88
// end ; end ; DialogueOff ;
10760: CALL_OW 7
// adminAreaDiscovered := true ;
10764: LD_ADDR_EXP 22
10768: PUSH
10769: LD_INT 1
10771: ST_TO_ADDR
// laundryAllowed := true ;
10772: LD_ADDR_EXP 26
10776: PUSH
10777: LD_INT 1
10779: ST_TO_ADDR
// end ;
10780: PPOPN 2
10782: END
// every 0 0$1 trigger laundryAllowed do
10783: LD_EXP 26
10787: IFFALSE 10799
10789: GO 10791
10791: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10792: LD_STRING M1-laundry
10794: PPUSH
10795: CALL_OW 337
10799: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10800: LD_EXP 49
10804: NOT
10805: PUSH
10806: LD_EXP 56
10810: NOT
10811: AND
10812: PUSH
10813: LD_EXP 54
10817: PPUSH
10818: CALL_OW 302
10822: AND
10823: PUSH
10824: LD_EXP 54
10828: PUSH
10829: LD_EXP 14
10833: IN
10834: AND
10835: PUSH
10836: LD_EXP 54
10840: PPUSH
10841: CALL_OW 255
10845: PUSH
10846: LD_INT 2
10848: EQUAL
10849: AND
10850: PUSH
10851: LD_EXP 17
10855: NOT
10856: AND
10857: PUSH
10858: LD_EXP 30
10862: NOT
10863: AND
10864: IFFALSE 11020
10866: GO 10868
10868: DISABLE
// begin DialogueOn ;
10869: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10873: LD_INT 152
10875: PPUSH
10876: LD_INT 115
10878: PPUSH
10879: LD_INT 2
10881: PPUSH
10882: LD_INT 16
10884: NEG
10885: PPUSH
10886: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10890: LD_INT 152
10892: PPUSH
10893: LD_INT 115
10895: PPUSH
10896: LD_INT 2
10898: PPUSH
10899: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10903: LD_INT 152
10905: PPUSH
10906: LD_INT 115
10908: PPUSH
10909: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10913: LD_EXP 54
10917: PPUSH
10918: LD_STRING DO-Med-c-1
10920: PPUSH
10921: CALL_OW 88
// if not hasExplosionCollected then
10925: LD_EXP 23
10929: NOT
10930: IFFALSE 10946
// Say ( Heike , DH-Med-d-14 ) else
10932: LD_EXP 46
10936: PPUSH
10937: LD_STRING DH-Med-d-14
10939: PPUSH
10940: CALL_OW 88
10944: GO 11008
// begin Say ( Heike , DH-Med-c-2 ) ;
10946: LD_EXP 46
10950: PPUSH
10951: LD_STRING DH-Med-c-2
10953: PPUSH
10954: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10958: LD_EXP 51
10962: PPUSH
10963: CALL_OW 302
10967: PUSH
10968: LD_EXP 51
10972: PUSH
10973: LD_EXP 14
10977: IN
10978: AND
10979: PUSH
10980: LD_EXP 51
10984: PPUSH
10985: CALL_OW 255
10989: PUSH
10990: LD_INT 2
10992: EQUAL
10993: AND
10994: IFFALSE 11008
// Say ( Kaia , DK-Med-c-3 ) ;
10996: LD_EXP 51
11000: PPUSH
11001: LD_STRING DK-Med-c-3
11003: PPUSH
11004: CALL_OW 88
// end ; DialogueOff ;
11008: CALL_OW 7
// adminAreaDiscovered := true ;
11012: LD_ADDR_EXP 22
11016: PUSH
11017: LD_INT 1
11019: ST_TO_ADDR
// end ;
11020: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
11021: LD_EXP 51
11025: PPUSH
11026: CALL_OW 256
11030: PUSH
11031: LD_INT 250
11033: LESS
11034: PUSH
11035: LD_EXP 51
11039: PUSH
11040: LD_EXP 14
11044: IN
11045: AND
11046: PUSH
11047: LD_EXP 17
11051: AND
11052: PUSH
11053: LD_EXP 24
11057: AND
11058: IFFALSE 11187
11060: GO 11062
11062: DISABLE
// begin DialogueOn ;
11063: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
11067: LD_EXP 51
11071: PPUSH
11072: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
11076: LD_EXP 51
11080: PPUSH
11081: LD_STRING DK-death-1
11083: PPUSH
11084: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
11088: LD_EXP 46
11092: PPUSH
11093: LD_STRING DH-death-2
11095: PPUSH
11096: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
11100: LD_EXP 51
11104: PPUSH
11105: LD_STRING DK-death-3
11107: PPUSH
11108: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
11112: LD_EXP 51
11116: PPUSH
11117: LD_STRING DK-death-4
11119: PPUSH
11120: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
11124: LD_EXP 51
11128: PPUSH
11129: LD_INT 8
11131: PPUSH
11132: CALL_OW 235
// ComStop ( Kaia ) ;
11136: LD_EXP 51
11140: PPUSH
11141: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
11145: LD_INT 8
11147: PPUSH
11148: LD_INT 2
11150: PPUSH
11151: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
11155: LD_ADDR_EXP 14
11159: PUSH
11160: LD_EXP 14
11164: PUSH
11165: LD_EXP 51
11169: DIFF
11170: ST_TO_ADDR
// DialogueOff ;
11171: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
11175: LD_EXP 48
11179: PPUSH
11180: LD_STRING DM-death-5
11182: PPUSH
11183: CALL_OW 88
// end ;
11187: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11188: LD_EXP 25
11192: NOT
11193: PUSH
11194: LD_EXP 30
11198: NOT
11199: AND
11200: PUSH
11201: LD_EXP 59
11205: PUSH
11206: LD_EXP 14
11210: IN
11211: NOT
11212: AND
11213: PUSH
11214: LD_INT 2
11216: PPUSH
11217: LD_EXP 59
11221: PPUSH
11222: CALL_OW 292
11226: AND
11227: PUSH
11228: LD_EXP 46
11232: PPUSH
11233: LD_EXP 59
11237: PPUSH
11238: CALL_OW 296
11242: PUSH
11243: LD_INT 6
11245: LESS
11246: AND
11247: PUSH
11248: LD_EXP 17
11252: NOT
11253: AND
11254: IFFALSE 11478
11256: GO 11258
11258: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11259: LD_EXP 59
11263: PPUSH
11264: LD_EXP 46
11268: PPUSH
11269: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11273: LD_EXP 46
11277: PPUSH
11278: LD_EXP 59
11282: PPUSH
11283: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11287: LD_INT 10
11289: PPUSH
11290: CALL_OW 67
// DialogueOn ;
11294: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11298: LD_EXP 59
11302: PPUSH
11303: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
11307: LD_EXP 46
11311: PPUSH
11312: LD_STRING DH-Deal-1
11314: PPUSH
11315: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
11319: LD_EXP 59
11323: PPUSH
11324: LD_STRING DJ-Deal-2
11326: PPUSH
11327: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
11331: LD_EXP 46
11335: PPUSH
11336: LD_STRING DH-Deal-3
11338: PPUSH
11339: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
11343: LD_EXP 59
11347: PPUSH
11348: LD_STRING DJ-Deal-4
11350: PPUSH
11351: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
11355: LD_EXP 59
11359: PPUSH
11360: LD_STRING DJ-Deal-5
11362: PPUSH
11363: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
11367: LD_EXP 59
11371: PPUSH
11372: LD_STRING DJ-Deal-6
11374: PPUSH
11375: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
11379: LD_EXP 59
11383: PPUSH
11384: LD_STRING DJ-Deal-7
11386: PPUSH
11387: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
11391: LD_EXP 46
11395: PPUSH
11396: LD_STRING DH-Deal-8
11398: PPUSH
11399: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
11403: LD_EXP 46
11407: PPUSH
11408: LD_STRING DH-Deal-9
11410: PPUSH
11411: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
11415: LD_EXP 59
11419: PPUSH
11420: LD_STRING DJ-Deal-10
11422: PPUSH
11423: CALL_OW 88
// DialogueOff ;
11427: CALL_OW 7
// contactWithAmerican := true ;
11431: LD_ADDR_EXP 25
11435: PUSH
11436: LD_INT 1
11438: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11439: LD_STRING M1-american-out
11441: PPUSH
11442: CALL_OW 604
// SetSide ( Harris , 2 ) ;
11446: LD_EXP 59
11450: PPUSH
11451: LD_INT 2
11453: PPUSH
11454: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11458: LD_ADDR_EXP 14
11462: PUSH
11463: LD_EXP 14
11467: PPUSH
11468: LD_EXP 59
11472: PPUSH
11473: CALL 67203 0 2
11477: ST_TO_ADDR
// end ;
11478: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11479: LD_EXP 25
11483: PUSH
11484: LD_EXP 30
11488: NOT
11489: AND
11490: PUSH
11491: LD_EXP 59
11495: PUSH
11496: LD_EXP 14
11500: IN
11501: NOT
11502: AND
11503: PUSH
11504: LD_INT 2
11506: PPUSH
11507: LD_EXP 59
11511: PPUSH
11512: CALL_OW 292
11516: AND
11517: PUSH
11518: LD_EXP 46
11522: PPUSH
11523: LD_EXP 59
11527: PPUSH
11528: CALL_OW 296
11532: PUSH
11533: LD_INT 6
11535: LESS
11536: AND
11537: PUSH
11538: LD_EXP 17
11542: NOT
11543: AND
11544: IFFALSE 11669
11546: GO 11548
11548: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11549: LD_EXP 59
11553: PPUSH
11554: LD_EXP 46
11558: PPUSH
11559: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11563: LD_EXP 46
11567: PPUSH
11568: LD_EXP 59
11572: PPUSH
11573: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11577: LD_INT 10
11579: PPUSH
11580: CALL_OW 67
// DialogueOn ;
11584: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11588: LD_EXP 59
11592: PPUSH
11593: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11597: LD_EXP 59
11601: PPUSH
11602: LD_STRING DJ-Escort-1
11604: PPUSH
11605: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11609: LD_EXP 46
11613: PPUSH
11614: LD_STRING DH-Escort-2
11616: PPUSH
11617: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11621: LD_EXP 59
11625: PPUSH
11626: LD_STRING DJ-Escort-3
11628: PPUSH
11629: CALL_OW 88
// DialogueOff ;
11633: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11637: LD_EXP 59
11641: PPUSH
11642: LD_INT 2
11644: PPUSH
11645: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11649: LD_ADDR_EXP 14
11653: PUSH
11654: LD_EXP 14
11658: PPUSH
11659: LD_EXP 59
11663: PPUSH
11664: CALL 67203 0 2
11668: ST_TO_ADDR
// end ;
11669: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11670: LD_EXP 25
11674: PUSH
11675: LD_EXP 30
11679: NOT
11680: AND
11681: PUSH
11682: LD_EXP 58
11686: PUSH
11687: LD_EXP 14
11691: DIFF
11692: PPUSH
11693: LD_INT 22
11695: PUSH
11696: LD_INT 4
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 3
11705: PUSH
11706: LD_INT 120
11708: PUSH
11709: LD_INT 1
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 101
11722: PUSH
11723: LD_INT 2
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: LIST
11734: PPUSH
11735: CALL_OW 72
11739: AND
11740: PUSH
11741: LD_EXP 17
11745: NOT
11746: AND
11747: IFFALSE 11974
11749: GO 11751
11751: DISABLE
11752: LD_INT 0
11754: PPUSH
// begin enable ;
11755: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11756: LD_ADDR_VAR 0 1
11760: PUSH
11761: LD_EXP 58
11765: PUSH
11766: LD_EXP 14
11770: DIFF
11771: PPUSH
11772: LD_INT 22
11774: PUSH
11775: LD_INT 4
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: LD_INT 91
11784: PUSH
11785: LD_EXP 46
11789: PUSH
11790: LD_INT 6
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: LIST
11797: PUSH
11798: LD_INT 101
11800: PUSH
11801: LD_INT 2
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: PPUSH
11813: CALL_OW 72
11817: PPUSH
11818: LD_EXP 46
11822: PPUSH
11823: CALL_OW 74
11827: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11828: LD_VAR 0 1
11832: PPUSH
11833: LD_EXP 46
11837: PPUSH
11838: CALL_OW 296
11842: PUSH
11843: LD_INT 6
11845: LESS
11846: IFFALSE 11974
// begin DialogueOn ;
11848: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11852: LD_VAR 0 1
11856: PPUSH
11857: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11861: LD_EXP 46
11865: PPUSH
11866: LD_STRING DH-USsol-1
11868: PPUSH
11869: CALL_OW 88
// if un <> Jerry then
11873: LD_VAR 0 1
11877: PUSH
11878: LD_EXP 61
11882: NONEQUAL
11883: IFFALSE 11926
// if GetSex ( un ) = sex_male then
11885: LD_VAR 0 1
11889: PPUSH
11890: CALL_OW 258
11894: PUSH
11895: LD_INT 1
11897: EQUAL
11898: IFFALSE 11914
// Say ( un , DUSM-USsol-2 ) else
11900: LD_VAR 0 1
11904: PPUSH
11905: LD_STRING DUSM-USsol-2
11907: PPUSH
11908: CALL_OW 88
11912: GO 11926
// Say ( un , DUSF-USsol-2 ) ;
11914: LD_VAR 0 1
11918: PPUSH
11919: LD_STRING DUSF-USsol-2
11921: PPUSH
11922: CALL_OW 88
// DialogueOff ;
11926: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11930: LD_ADDR_EXP 14
11934: PUSH
11935: LD_EXP 14
11939: PPUSH
11940: LD_VAR 0 1
11944: PPUSH
11945: CALL 67203 0 2
11949: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11950: LD_VAR 0 1
11954: PPUSH
11955: LD_INT 1
11957: PPUSH
11958: CALL_OW 109
// SetSide ( un , 2 ) ;
11962: LD_VAR 0 1
11966: PPUSH
11967: LD_INT 2
11969: PPUSH
11970: CALL_OW 235
// end ; end ;
11974: PPOPN 1
11976: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11977: LD_EXP 57
11981: PUSH
11982: LD_EXP 30
11986: NOT
11987: AND
11988: PUSH
11989: LD_EXP 57
11993: PUSH
11994: LD_EXP 14
11998: DIFF
11999: PPUSH
12000: LD_INT 3
12002: PUSH
12003: LD_INT 120
12005: PUSH
12006: LD_INT 1
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: LD_INT 91
12019: PUSH
12020: LD_EXP 46
12024: PUSH
12025: LD_INT 6
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 101
12035: PUSH
12036: LD_INT 2
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: PPUSH
12048: CALL_OW 72
12052: AND
12053: PUSH
12054: LD_EXP 17
12058: NOT
12059: AND
12060: IFFALSE 12275
12062: GO 12064
12064: DISABLE
12065: LD_INT 0
12067: PPUSH
// begin enable ;
12068: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
12069: LD_ADDR_VAR 0 1
12073: PUSH
12074: LD_EXP 57
12078: PUSH
12079: LD_EXP 14
12083: DIFF
12084: PPUSH
12085: LD_INT 22
12087: PUSH
12088: LD_INT 5
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: LD_INT 91
12097: PUSH
12098: LD_EXP 46
12102: PUSH
12103: LD_INT 6
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 101
12113: PUSH
12114: LD_INT 2
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: LIST
12125: PPUSH
12126: CALL_OW 72
12130: PPUSH
12131: LD_EXP 46
12135: PPUSH
12136: CALL_OW 74
12140: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12141: LD_VAR 0 1
12145: PPUSH
12146: LD_EXP 46
12150: PPUSH
12151: CALL_OW 296
12155: PUSH
12156: LD_INT 6
12158: LESS
12159: IFFALSE 12275
// begin DialogueOn ;
12161: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12165: LD_VAR 0 1
12169: PPUSH
12170: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12174: LD_EXP 46
12178: PPUSH
12179: LD_STRING DH-USsol-1
12181: PPUSH
12182: CALL_OW 88
// if GetSex ( un ) = sex_male then
12186: LD_VAR 0 1
12190: PPUSH
12191: CALL_OW 258
12195: PUSH
12196: LD_INT 1
12198: EQUAL
12199: IFFALSE 12215
// Say ( un , DArm-USsol-2 ) else
12201: LD_VAR 0 1
12205: PPUSH
12206: LD_STRING DArm-USsol-2
12208: PPUSH
12209: CALL_OW 88
12213: GO 12227
// Say ( un , DArf-USsol-3 ) ;
12215: LD_VAR 0 1
12219: PPUSH
12220: LD_STRING DArf-USsol-3
12222: PPUSH
12223: CALL_OW 88
// DialogueOff ;
12227: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12231: LD_ADDR_EXP 14
12235: PUSH
12236: LD_EXP 14
12240: PPUSH
12241: LD_VAR 0 1
12245: PPUSH
12246: CALL 67203 0 2
12250: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12251: LD_VAR 0 1
12255: PPUSH
12256: LD_INT 1
12258: PPUSH
12259: CALL_OW 109
// SetSide ( un , 2 ) ;
12263: LD_VAR 0 1
12267: PPUSH
12268: LD_INT 2
12270: PPUSH
12271: CALL_OW 235
// end ; end ;
12275: PPOPN 1
12277: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
12278: LD_EXP 58
12282: PPUSH
12283: LD_INT 101
12285: PUSH
12286: LD_INT 2
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PPUSH
12293: CALL_OW 72
12297: PUSH
12298: LD_EXP 14
12302: PPUSH
12303: LD_INT 22
12305: PUSH
12306: LD_INT 2
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PPUSH
12313: CALL_OW 72
12317: PUSH
12318: LD_INT 5
12320: GREATER
12321: AND
12322: PUSH
12323: LD_EXP 10
12327: NOT
12328: AND
12329: PUSH
12330: LD_EXP 30
12334: NOT
12335: AND
12336: PUSH
12337: LD_EXP 25
12341: NOT
12342: AND
12343: PUSH
12344: LD_EXP 17
12348: NOT
12349: AND
12350: IFFALSE 12465
12352: GO 12354
12354: DISABLE
12355: LD_INT 0
12357: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
12358: LD_ADDR_VAR 0 1
12362: PUSH
12363: LD_EXP 58
12367: PPUSH
12368: LD_INT 22
12370: PUSH
12371: LD_INT 4
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PUSH
12378: LD_INT 101
12380: PUSH
12381: LD_INT 2
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PPUSH
12392: CALL_OW 72
12396: PUSH
12397: LD_INT 1
12399: ARRAY
12400: ST_TO_ADDR
// DialogueOn ;
12401: CALL_OW 6
// if GetSex ( un ) = sex_male then
12405: LD_VAR 0 1
12409: PPUSH
12410: CALL_OW 258
12414: PUSH
12415: LD_INT 1
12417: EQUAL
12418: IFFALSE 12434
// Say ( un , DUSm-USsol-a-2 ) else
12420: LD_VAR 0 1
12424: PPUSH
12425: LD_STRING DUSm-USsol-a-2
12427: PPUSH
12428: CALL_OW 88
12432: GO 12446
// Say ( un , DUSf-USsol-a-2 ) ;
12434: LD_VAR 0 1
12438: PPUSH
12439: LD_STRING DUSf-USsol-a-2
12441: PPUSH
12442: CALL_OW 88
// DialogueOff ;
12446: CALL_OW 7
// wait ( 0 0$2 ) ;
12450: LD_INT 70
12452: PPUSH
12453: CALL_OW 67
// isAlarm := true ;
12457: LD_ADDR_EXP 17
12461: PUSH
12462: LD_INT 1
12464: ST_TO_ADDR
// end ;
12465: PPOPN 1
12467: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
12468: LD_EXP 17
12472: NOT
12473: PUSH
12474: LD_EXP 47
12478: PPUSH
12479: CALL_OW 302
12483: AND
12484: PUSH
12485: LD_EXP 47
12489: PPUSH
12490: CALL_OW 255
12494: PUSH
12495: LD_INT 2
12497: EQUAL
12498: AND
12499: PUSH
12500: LD_EXP 26
12504: AND
12505: PUSH
12506: LD_EXP 28
12510: NOT
12511: AND
12512: PUSH
12513: LD_EXP 27
12517: NOT
12518: AND
12519: PUSH
12520: LD_EXP 30
12524: NOT
12525: AND
12526: PUSH
12527: LD_EXP 47
12531: PPUSH
12532: LD_INT 165
12534: PPUSH
12535: CALL 20488 0 2
12539: AND
12540: IFFALSE 12672
12542: GO 12544
12544: DISABLE
// begin enable ;
12545: ENABLE
// InGameOn ;
12546: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12550: LD_EXP 47
12554: PPUSH
12555: LD_INT 5
12557: PPUSH
12558: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12562: LD_INT 165
12564: PPUSH
12565: LD_INT 5
12567: PPUSH
12568: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12572: LD_EXP 47
12576: PPUSH
12577: LD_INT 165
12579: PPUSH
12580: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12584: LD_INT 35
12586: PPUSH
12587: CALL_OW 67
// until IsInUnit ( Givi ) ;
12591: LD_EXP 47
12595: PPUSH
12596: CALL_OW 310
12600: IFFALSE 12584
// case Query ( GiviInLaundry ) of 1 :
12602: LD_STRING GiviInLaundry
12604: PPUSH
12605: CALL_OW 97
12609: PUSH
12610: LD_INT 1
12612: DOUBLE
12613: EQUAL
12614: IFTRUE 12618
12616: GO 12625
12618: POP
// SpawnGiviAsRussian ; 2 :
12619: CALL 1918 0 0
12623: GO 12637
12625: LD_INT 2
12627: DOUBLE
12628: EQUAL
12629: IFTRUE 12633
12631: GO 12636
12633: POP
// ; end ;
12634: GO 12637
12636: POP
// ComExitBuilding ( Givi ) ;
12637: LD_EXP 47
12641: PPUSH
12642: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12646: LD_EXP 47
12650: PPUSH
12651: LD_INT 2
12653: PPUSH
12654: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12658: LD_INT 165
12660: PPUSH
12661: LD_INT 3
12663: PPUSH
12664: CALL_OW 235
// InGameOff ;
12668: CALL_OW 9
// end ;
12672: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12673: LD_EXP 17
12677: NOT
12678: PUSH
12679: LD_EXP 28
12683: AND
12684: PUSH
12685: LD_EXP 47
12689: PPUSH
12690: CALL_OW 255
12694: PUSH
12695: LD_INT 2
12697: EQUAL
12698: AND
12699: PUSH
12700: LD_EXP 47
12704: PPUSH
12705: CALL_OW 248
12709: PUSH
12710: LD_INT 3
12712: EQUAL
12713: AND
12714: PUSH
12715: LD_EXP 47
12719: PPUSH
12720: LD_INT 119
12722: PPUSH
12723: CALL 20488 0 2
12727: AND
12728: PUSH
12729: LD_EXP 30
12733: NOT
12734: AND
12735: IFFALSE 12989
12737: GO 12739
12739: DISABLE
// begin InGameOn ;
12740: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12744: LD_EXP 47
12748: PPUSH
12749: LD_INT 3
12751: PPUSH
12752: CALL_OW 235
// wait ( 0 0$0.3 ) ;
12756: LD_INT 10
12758: PPUSH
12759: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
12763: LD_EXP 47
12767: PPUSH
12768: LD_INT 119
12770: PPUSH
12771: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12775: LD_INT 35
12777: PPUSH
12778: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
12782: LD_EXP 47
12786: PPUSH
12787: LD_INT 119
12789: PPUSH
12790: CALL_OW 120
// until IsInUnit ( Givi ) ;
12794: LD_EXP 47
12798: PPUSH
12799: CALL_OW 310
12803: IFFALSE 12775
// DialogueOn ;
12805: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12809: LD_EXP 47
12813: PPUSH
12814: LD_STRING DG-Captive-1
12816: PPUSH
12817: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12821: LD_EXP 65
12825: PPUSH
12826: LD_STRING DCom-Captive-2
12828: PPUSH
12829: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12833: LD_EXP 47
12837: PPUSH
12838: LD_STRING DG-Captive-3
12840: PPUSH
12841: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12845: LD_EXP 65
12849: PPUSH
12850: LD_STRING DCom-Captive-4
12852: PPUSH
12853: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12857: LD_EXP 65
12861: PPUSH
12862: CALL_OW 64
// DialogueOff ;
12866: CALL_OW 7
// InGameOff ;
12870: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12874: LD_EXP 47
12878: PPUSH
12879: LD_INT 2
12881: PPUSH
12882: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12886: LD_EXP 47
12890: PPUSH
12891: CALL_OW 122
// if Aviradze then
12895: LD_EXP 56
12899: IFFALSE 12942
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12901: LD_ADDR_EXP 14
12905: PUSH
12906: LD_EXP 14
12910: PPUSH
12911: LD_EXP 56
12915: PPUSH
12916: CALL 67203 0 2
12920: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12921: LD_EXP 56
12925: PPUSH
12926: LD_INT 2
12928: PPUSH
12929: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12933: LD_EXP 56
12937: PPUSH
12938: CALL_OW 122
// end ; if Ibrahim then
12942: LD_EXP 49
12946: IFFALSE 12989
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12948: LD_ADDR_EXP 14
12952: PUSH
12953: LD_EXP 14
12957: PPUSH
12958: LD_EXP 49
12962: PPUSH
12963: CALL 67203 0 2
12967: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12968: LD_EXP 49
12972: PPUSH
12973: LD_INT 2
12975: PPUSH
12976: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12980: LD_EXP 49
12984: PPUSH
12985: CALL_OW 122
// end ; end ;
12989: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12990: LD_EXP 17
12994: NOT
12995: PUSH
12996: LD_EXP 27
13000: AND
13001: PUSH
13002: LD_EXP 46
13006: PPUSH
13007: CALL_OW 248
13011: PUSH
13012: LD_INT 3
13014: EQUAL
13015: AND
13016: PUSH
13017: LD_EXP 46
13021: PPUSH
13022: LD_INT 119
13024: PPUSH
13025: CALL 20488 0 2
13029: AND
13030: PUSH
13031: LD_EXP 30
13035: NOT
13036: AND
13037: IFFALSE 13336
13039: GO 13041
13041: DISABLE
// begin InGameOn ;
13042: CALL_OW 8
// SetSide ( Heike , 3 ) ;
13046: LD_EXP 46
13050: PPUSH
13051: LD_INT 3
13053: PPUSH
13054: CALL_OW 235
// wait ( 0 0$0.3 ) ;
13058: LD_INT 10
13060: PPUSH
13061: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13065: LD_EXP 46
13069: PPUSH
13070: LD_INT 119
13072: PPUSH
13073: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13077: LD_INT 35
13079: PPUSH
13080: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13084: LD_EXP 46
13088: PPUSH
13089: LD_INT 119
13091: PPUSH
13092: CALL_OW 120
// until IsInUnit ( Heike ) ;
13096: LD_EXP 46
13100: PPUSH
13101: CALL_OW 310
13105: IFFALSE 13077
// wait ( 0 0$1 ) ;
13107: LD_INT 35
13109: PPUSH
13110: CALL_OW 67
// DialogueOn ;
13114: CALL_OW 6
// if Aviradze and Ibrahim then
13118: LD_EXP 56
13122: PUSH
13123: LD_EXP 49
13127: AND
13128: IFFALSE 13144
// Say ( Heike , DH-Captive-a-1 ) else
13130: LD_EXP 46
13134: PPUSH
13135: LD_STRING DH-Captive-a-1
13137: PPUSH
13138: CALL_OW 88
13142: GO 13156
// Say ( Heike , DH-Captive-a-b-1 ) ;
13144: LD_EXP 46
13148: PPUSH
13149: LD_STRING DH-Captive-a-b-1
13151: PPUSH
13152: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
13156: LD_EXP 65
13160: PPUSH
13161: LD_STRING DCom-Captive-a-2
13163: PPUSH
13164: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
13168: LD_EXP 46
13172: PPUSH
13173: LD_STRING DH-Captive-a-3
13175: PPUSH
13176: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
13180: LD_EXP 65
13184: PPUSH
13185: LD_STRING DCom-Captive-a-4
13187: PPUSH
13188: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
13192: LD_EXP 46
13196: PPUSH
13197: LD_STRING DH-Captive-a-5
13199: PPUSH
13200: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13204: LD_EXP 65
13208: PPUSH
13209: CALL_OW 64
// DialogueOff ;
13213: CALL_OW 7
// InGameOff ;
13217: CALL_OW 9
// SetSide ( Heike , 2 ) ;
13221: LD_EXP 46
13225: PPUSH
13226: LD_INT 2
13228: PPUSH
13229: CALL_OW 235
// ComExitBuilding ( Heike ) ;
13233: LD_EXP 46
13237: PPUSH
13238: CALL_OW 122
// if Aviradze then
13242: LD_EXP 56
13246: IFFALSE 13289
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13248: LD_ADDR_EXP 14
13252: PUSH
13253: LD_EXP 14
13257: PPUSH
13258: LD_EXP 56
13262: PPUSH
13263: CALL 67203 0 2
13267: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13268: LD_EXP 56
13272: PPUSH
13273: LD_INT 2
13275: PPUSH
13276: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13280: LD_EXP 56
13284: PPUSH
13285: CALL_OW 122
// end ; if Ibrahim then
13289: LD_EXP 49
13293: IFFALSE 13336
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13295: LD_ADDR_EXP 14
13299: PUSH
13300: LD_EXP 14
13304: PPUSH
13305: LD_EXP 49
13309: PPUSH
13310: CALL 67203 0 2
13314: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13315: LD_EXP 49
13319: PPUSH
13320: LD_INT 2
13322: PPUSH
13323: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13327: LD_EXP 49
13331: PPUSH
13332: CALL_OW 122
// end ; end ;
13336: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
13337: LD_INT 2
13339: PUSH
13340: LD_INT 25
13342: PUSH
13343: LD_INT 32
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PUSH
13350: LD_INT 25
13352: PUSH
13353: LD_INT 34
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: LIST
13364: PPUSH
13365: CALL_OW 69
13369: IFFALSE 13381
13371: GO 13373
13373: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
13374: LD_STRING M1-weapons-out
13376: PPUSH
13377: CALL_OW 604
13381: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
13382: LD_INT 2
13384: PPUSH
13385: LD_EXP 61
13389: PPUSH
13390: CALL_OW 292
13394: PUSH
13395: LD_EXP 46
13399: PPUSH
13400: LD_EXP 61
13404: PPUSH
13405: CALL_OW 296
13409: AND
13410: PUSH
13411: LD_EXP 17
13415: NOT
13416: AND
13417: PUSH
13418: LD_EXP 30
13422: NOT
13423: AND
13424: IFFALSE 14282
13426: GO 13428
13428: DISABLE
13429: LD_INT 0
13431: PPUSH
13432: PPUSH
// begin if contactWithAmerican then
13433: LD_EXP 25
13437: IFFALSE 13534
// begin DialogueOn ;
13439: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13443: LD_EXP 61
13447: PPUSH
13448: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
13452: LD_EXP 46
13456: PPUSH
13457: LD_STRING DH-USsol-1
13459: PPUSH
13460: CALL_OW 88
// SetSide ( Jerry , 2 ) ;
13464: LD_EXP 61
13468: PPUSH
13469: LD_INT 2
13471: PPUSH
13472: CALL_OW 235
// americanSquad := Join ( americanSquad , Jerry ) ;
13476: LD_ADDR_EXP 58
13480: PUSH
13481: LD_EXP 58
13485: PPUSH
13486: LD_EXP 61
13490: PPUSH
13491: CALL 67203 0 2
13495: ST_TO_ADDR
// heikeSquad := Join ( heikeSquad , Mike ) ;
13496: LD_ADDR_EXP 14
13500: PUSH
13501: LD_EXP 14
13505: PPUSH
13506: LD_EXP 48
13510: PPUSH
13511: CALL 67203 0 2
13515: ST_TO_ADDR
// SetTag ( Jerry , tagCaptured ) ;
13516: LD_EXP 61
13520: PPUSH
13521: LD_INT 1
13523: PPUSH
13524: CALL_OW 109
// DialogueOff ;
13528: CALL_OW 7
// exit ;
13532: GO 14282
// end ; DialogueOn ;
13534: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13538: LD_EXP 61
13542: PPUSH
13543: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
13547: LD_EXP 61
13551: PPUSH
13552: LD_STRING DJy-Food-1
13554: PPUSH
13555: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
13559: LD_EXP 46
13563: PPUSH
13564: LD_STRING DH-Food-2
13566: PPUSH
13567: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
13571: LD_EXP 61
13575: PPUSH
13576: LD_STRING DJy-Food-3
13578: PPUSH
13579: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
13583: LD_EXP 61
13587: PPUSH
13588: LD_STRING DJy-Food-4
13590: PPUSH
13591: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
13595: LD_EXP 46
13599: PPUSH
13600: LD_STRING DH-Food-5
13602: PPUSH
13603: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
13607: LD_EXP 61
13611: PPUSH
13612: LD_STRING DJy-Food-6
13614: PPUSH
13615: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
13619: LD_EXP 61
13623: PPUSH
13624: LD_STRING DJy-Food-7
13626: PPUSH
13627: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
13631: LD_EXP 61
13635: PPUSH
13636: LD_STRING DJy-Food-8
13638: PPUSH
13639: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
13643: LD_EXP 46
13647: PPUSH
13648: LD_STRING DH-Food-9
13650: PPUSH
13651: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
13655: LD_EXP 61
13659: PPUSH
13660: LD_STRING DJy-Food-10
13662: PPUSH
13663: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
13667: LD_EXP 46
13671: PPUSH
13672: LD_STRING DH-Food-11
13674: PPUSH
13675: CALL_OW 88
// DialogueOff ;
13679: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13683: LD_STRING M3
13685: PPUSH
13686: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13690: LD_INT 5
13692: PPUSH
13693: LD_INT 215
13695: PPUSH
13696: LD_INT 117
13698: PPUSH
13699: LD_INT 0
13701: PPUSH
13702: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13706: LD_INT 215
13708: PPUSH
13709: LD_INT 118
13711: PPUSH
13712: LD_INT 2
13714: PPUSH
13715: LD_INT 6
13717: NEG
13718: PPUSH
13719: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
13723: LD_INT 215
13725: PPUSH
13726: LD_INT 118
13728: PPUSH
13729: LD_INT 2
13731: PPUSH
13732: CALL_OW 331
// foodDelivered := false ;
13736: LD_ADDR_VAR 0 2
13740: PUSH
13741: LD_INT 0
13743: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13744: LD_INT 35
13746: PPUSH
13747: CALL_OW 67
// if hasMuchin then
13751: LD_EXP 30
13755: IFFALSE 13759
// continue ;
13757: GO 13744
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
13759: LD_ADDR_VAR 0 1
13763: PUSH
13764: LD_EXP 14
13768: PUSH
13769: LD_EXP 46
13773: UNION
13774: PPUSH
13775: LD_INT 91
13777: PUSH
13778: LD_EXP 61
13782: PUSH
13783: LD_INT 6
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 25
13793: PUSH
13794: LD_INT 33
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PPUSH
13805: CALL_OW 72
13809: PUSH
13810: FOR_IN
13811: IFFALSE 14011
// if Carry ( i ) then
13813: LD_VAR 0 1
13817: PPUSH
13818: CALL_OW 281
13822: IFFALSE 14009
// begin DialogueOn ;
13824: CALL_OW 6
// foodDelivered := true ;
13828: LD_ADDR_VAR 0 2
13832: PUSH
13833: LD_INT 1
13835: ST_TO_ADDR
// case i of Heike :
13836: LD_VAR 0 1
13840: PUSH
13841: LD_EXP 46
13845: DOUBLE
13846: EQUAL
13847: IFTRUE 13851
13849: GO 13866
13851: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
13852: LD_EXP 46
13856: PPUSH
13857: LD_STRING DH-Food-12
13859: PPUSH
13860: CALL_OW 88
13864: GO 13992
13866: LD_EXP 51
13870: DOUBLE
13871: EQUAL
13872: IFTRUE 13876
13874: GO 13891
13876: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13877: LD_EXP 51
13881: PPUSH
13882: LD_STRING DK-Food-a-12
13884: PPUSH
13885: CALL_OW 88
13889: GO 13992
13891: LD_EXP 53
13895: DOUBLE
13896: EQUAL
13897: IFTRUE 13901
13899: GO 13916
13901: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13902: LD_EXP 53
13906: PPUSH
13907: LD_STRING DMar-Food-a-12
13909: PPUSH
13910: CALL_OW 88
13914: GO 13992
13916: LD_EXP 47
13920: DOUBLE
13921: EQUAL
13922: IFTRUE 13926
13924: GO 13941
13926: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13927: LD_EXP 47
13931: PPUSH
13932: LD_STRING DG-Food-a-14
13934: PPUSH
13935: CALL_OW 88
13939: GO 13992
13941: LD_EXP 48
13945: DOUBLE
13946: EQUAL
13947: IFTRUE 13951
13949: GO 13966
13951: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13952: LD_EXP 48
13956: PPUSH
13957: LD_STRING DM-Food-a-15
13959: PPUSH
13960: CALL_OW 88
13964: GO 13992
13966: LD_EXP 50
13970: DOUBLE
13971: EQUAL
13972: IFTRUE 13976
13974: GO 13991
13976: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
13977: LD_EXP 50
13981: PPUSH
13982: LD_STRING DKam-Food-a-16
13984: PPUSH
13985: CALL_OW 88
13989: GO 13992
13991: POP
// SetCargo ( i , mat_cans , 0 ) ;
13992: LD_VAR 0 1
13996: PPUSH
13997: LD_INT 1
13999: PPUSH
14000: LD_INT 0
14002: PPUSH
14003: CALL_OW 290
// break ;
14007: GO 14011
// end ;
14009: GO 13810
14011: POP
14012: POP
// until foodDelivered ;
14013: LD_VAR 0 2
14017: IFFALSE 13744
// givenFood := true ;
14019: LD_ADDR_EXP 33
14023: PUSH
14024: LD_INT 1
14026: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
14027: LD_EXP 61
14031: PPUSH
14032: LD_STRING DJy-Food-13
14034: PPUSH
14035: CALL_OW 88
// hasVirus := true ;
14039: LD_ADDR_EXP 31
14043: PUSH
14044: LD_INT 1
14046: ST_TO_ADDR
// if not americanContact then
14047: LD_EXP 10
14051: NOT
14052: IFFALSE 14102
// begin Say ( Heike , DH-Food-14 ) ;
14054: LD_EXP 46
14058: PPUSH
14059: LD_STRING DH-Food-14
14061: PPUSH
14062: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
14066: LD_EXP 61
14070: PPUSH
14071: LD_STRING DJy-Food-15
14073: PPUSH
14074: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
14078: LD_EXP 61
14082: PPUSH
14083: LD_STRING DJy-Food-16
14085: PPUSH
14086: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
14090: LD_EXP 61
14094: PPUSH
14095: LD_STRING DJy-Food-17
14097: PPUSH
14098: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
14102: LD_STRING M3-out
14104: PPUSH
14105: CALL_OW 337
// DialogueOff ;
14109: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
14113: LD_EXP 61
14117: PPUSH
14118: LD_INT 1
14120: PPUSH
14121: LD_INT 10
14123: PPUSH
14124: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
14128: LD_EXP 61
14132: PPUSH
14133: LD_INT 95
14135: PPUSH
14136: LD_INT 17
14138: PPUSH
14139: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14143: LD_INT 35
14145: PPUSH
14146: CALL_OW 67
// if not HasTask ( Jerry ) then
14150: LD_EXP 61
14154: PPUSH
14155: CALL_OW 314
14159: NOT
14160: IFFALSE 14177
// ComMoveXY ( Jerry , 95 , 17 ) ;
14162: LD_EXP 61
14166: PPUSH
14167: LD_INT 95
14169: PPUSH
14170: LD_INT 17
14172: PPUSH
14173: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
14177: LD_EXP 61
14181: PPUSH
14182: LD_INT 95
14184: PPUSH
14185: LD_INT 17
14187: PPUSH
14188: CALL_OW 307
14192: IFFALSE 14143
// SetCargo ( Jerry , mat_cans , 0 ) ;
14194: LD_EXP 61
14198: PPUSH
14199: LD_INT 1
14201: PPUSH
14202: LD_INT 0
14204: PPUSH
14205: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
14209: LD_ADDR_EXP 58
14213: PUSH
14214: LD_EXP 58
14218: PPUSH
14219: LD_EXP 61
14223: PPUSH
14224: CALL 67203 0 2
14228: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
14229: LD_ADDR_VAR 0 1
14233: PUSH
14234: LD_INT 22
14236: PUSH
14237: LD_INT 4
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 23
14246: PUSH
14247: LD_INT 1
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PPUSH
14258: CALL_OW 69
14262: PUSH
14263: FOR_IN
14264: IFFALSE 14280
// SetLives ( i , 1000 ) ;
14266: LD_VAR 0 1
14270: PPUSH
14271: LD_INT 1000
14273: PPUSH
14274: CALL_OW 234
14278: GO 14263
14280: POP
14281: POP
// end ;
14282: PPOPN 2
14284: END
// every 0 0$2 trigger not hasMuchin and hasExplosions marked gameStartEvent do var un , tmp ;
14285: LD_EXP 30
14289: NOT
14290: PUSH
14291: LD_EXP 6
14295: AND
14296: IFFALSE 14722
14298: GO 14300
14300: DISABLE
14301: LD_INT 0
14303: PPUSH
14304: PPUSH
// begin tmp := [ ] ;
14305: LD_ADDR_VAR 0 2
14309: PUSH
14310: EMPTY
14311: ST_TO_ADDR
// uc_side := 3 ;
14312: LD_ADDR_OWVAR 20
14316: PUSH
14317: LD_INT 3
14319: ST_TO_ADDR
// uc_nation := 3 ;
14320: LD_ADDR_OWVAR 21
14324: PUSH
14325: LD_INT 3
14327: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
14328: LD_INT 1
14330: PPUSH
14331: LD_INT 8
14333: PPUSH
14334: CALL_OW 381
// un := CreateHuman ;
14338: LD_ADDR_VAR 0 1
14342: PUSH
14343: CALL_OW 44
14347: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
14348: LD_VAR 0 1
14352: PPUSH
14353: LD_INT 173
14355: PPUSH
14356: LD_INT 104
14358: PPUSH
14359: LD_INT 0
14361: PPUSH
14362: CALL_OW 48
// tmp := Join ( tmp , un ) ;
14366: LD_ADDR_VAR 0 2
14370: PUSH
14371: LD_VAR 0 2
14375: PPUSH
14376: LD_VAR 0 1
14380: PPUSH
14381: CALL 67203 0 2
14385: ST_TO_ADDR
// un := CreateHuman ;
14386: LD_ADDR_VAR 0 1
14390: PUSH
14391: CALL_OW 44
14395: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
14396: LD_VAR 0 1
14400: PPUSH
14401: LD_INT 73
14403: PPUSH
14404: CALL_OW 52
// tmp := Join ( tmp , un ) ;
14408: LD_ADDR_VAR 0 2
14412: PUSH
14413: LD_VAR 0 2
14417: PPUSH
14418: LD_VAR 0 1
14422: PPUSH
14423: CALL 67203 0 2
14427: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14428: LD_INT 35
14430: PPUSH
14431: CALL_OW 67
// if isAlarm then
14435: LD_EXP 17
14439: IFFALSE 14443
// exit ;
14441: GO 14722
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 12 ;
14443: LD_EXP 51
14447: PPUSH
14448: CALL_OW 255
14452: PUSH
14453: LD_INT 2
14455: EQUAL
14456: PUSH
14457: LD_EXP 51
14461: PPUSH
14462: LD_INT 73
14464: PPUSH
14465: CALL_OW 296
14469: PUSH
14470: LD_INT 12
14472: LESS
14473: AND
14474: IFFALSE 14428
// InGameOn ;
14476: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
14480: LD_INT 73
14482: PPUSH
14483: CALL_OW 250
14487: PPUSH
14488: LD_INT 73
14490: PPUSH
14491: CALL_OW 251
14495: PPUSH
14496: LD_INT 2
14498: PPUSH
14499: LD_INT 9
14501: NEG
14502: PPUSH
14503: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
14507: LD_INT 73
14509: PPUSH
14510: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
14514: LD_EXP 51
14518: PPUSH
14519: LD_INT 73
14521: PPUSH
14522: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
14526: LD_EXP 51
14530: PPUSH
14531: LD_STRING DK-Plastic-1
14533: PPUSH
14534: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
14538: LD_EXP 51
14542: PPUSH
14543: LD_STRING DK-Plastic-2
14545: PPUSH
14546: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
14550: LD_EXP 51
14554: PPUSH
14555: LD_INT 73
14557: PPUSH
14558: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14562: LD_INT 35
14564: PPUSH
14565: CALL_OW 67
// if isAlarm then
14569: LD_EXP 17
14573: IFFALSE 14577
// exit ;
14575: GO 14722
// until GetDistUnits ( Kaia , barExplosion ) < 8 ;
14577: LD_EXP 51
14581: PPUSH
14582: LD_INT 73
14584: PPUSH
14585: CALL_OW 296
14589: PUSH
14590: LD_INT 8
14592: LESS
14593: IFFALSE 14562
// ComHold ( Kaia ) ;
14595: LD_EXP 51
14599: PPUSH
14600: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
14604: LD_VAR 0 2
14608: PUSH
14609: LD_INT 1
14611: ARRAY
14612: PPUSH
14613: LD_STRING DRum-Plastic-3
14615: PPUSH
14616: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
14620: LD_VAR 0 2
14624: PUSH
14625: LD_INT 2
14627: ARRAY
14628: PPUSH
14629: LD_STRING DRum2-Plastic-4
14631: PPUSH
14632: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
14636: LD_VAR 0 2
14640: PUSH
14641: LD_INT 1
14643: ARRAY
14644: PPUSH
14645: LD_STRING DRum-Plastic-5
14647: PPUSH
14648: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14652: LD_VAR 0 2
14656: PUSH
14657: LD_INT 2
14659: ARRAY
14660: PPUSH
14661: LD_STRING DRum2-Plastic-6
14663: PPUSH
14664: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14668: LD_EXP 51
14672: PPUSH
14673: LD_STRING DK-Plastic-7
14675: PPUSH
14676: CALL_OW 88
// InGameOff ;
14680: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14684: LD_INT 73
14686: PPUSH
14687: CALL_OW 250
14691: PPUSH
14692: LD_INT 73
14694: PPUSH
14695: CALL_OW 251
14699: PPUSH
14700: LD_INT 2
14702: PPUSH
14703: CALL_OW 331
// explosionsTakenByRussians := true ;
14707: LD_ADDR_EXP 21
14711: PUSH
14712: LD_INT 1
14714: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
14715: LD_STRING ExplosivesInfo
14717: PPUSH
14718: CALL_OW 97
// end ;
14722: PPOPN 2
14724: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do var class ;
14725: LD_EXP 21
14729: PUSH
14730: LD_EXP 51
14734: PPUSH
14735: CALL_OW 255
14739: PUSH
14740: LD_INT 2
14742: EQUAL
14743: AND
14744: PUSH
14745: LD_EXP 51
14749: PPUSH
14750: LD_INT 61
14752: PPUSH
14753: CALL 20488 0 2
14757: AND
14758: PUSH
14759: LD_EXP 17
14763: NOT
14764: AND
14765: PUSH
14766: LD_EXP 30
14770: NOT
14771: AND
14772: IFFALSE 15055
14774: GO 14776
14776: DISABLE
14777: LD_INT 0
14779: PPUSH
// begin class := GetClass ( Kaia ) ;
14780: LD_ADDR_VAR 0 1
14784: PUSH
14785: LD_EXP 51
14789: PPUSH
14790: CALL_OW 257
14794: ST_TO_ADDR
// if class <> class_prison then
14795: LD_VAR 0 1
14799: PUSH
14800: LD_INT 33
14802: NONEQUAL
14803: IFFALSE 14896
// begin Query ( QKaiaWeapon ) ;
14805: LD_STRING QKaiaWeapon
14807: PPUSH
14808: CALL_OW 97
// SetAreaMapShow ( hideWeaponArea , 1 ) ;
14812: LD_INT 67
14814: PPUSH
14815: LD_INT 1
14817: PPUSH
14818: CALL_OW 424
// CenterNowOnXY ( 192 , 71 ) ;
14822: LD_INT 192
14824: PPUSH
14825: LD_INT 71
14827: PPUSH
14828: CALL_OW 86
// kaiaWeaponHidden := class ;
14832: LD_ADDR_EXP 45
14836: PUSH
14837: LD_VAR 0 1
14841: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14842: LD_INT 35
14844: PPUSH
14845: CALL_OW 67
// until IsInArea ( Kaia , hideWeaponArea ) ;
14849: LD_EXP 51
14853: PPUSH
14854: LD_INT 67
14856: PPUSH
14857: CALL_OW 308
14861: IFFALSE 14842
// SetClass ( Kaia , class_prison ) ;
14863: LD_EXP 51
14867: PPUSH
14868: LD_INT 33
14870: PPUSH
14871: CALL_OW 336
// repeat wait ( 0 0$1 ) ;
14875: LD_INT 35
14877: PPUSH
14878: CALL_OW 67
// until InEntrance ( Kaia , ruFac ) ;
14882: LD_EXP 51
14886: PPUSH
14887: LD_INT 61
14889: PPUSH
14890: CALL 20488 0 2
14894: IFFALSE 14875
// end ; if knowWhereExplosivesAre then
14896: LD_EXP 34
14900: IFFALSE 14904
// exit ;
14902: GO 15055
// InGameOn ;
14904: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
14908: LD_INT 61
14910: PPUSH
14911: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14915: LD_EXP 51
14919: PPUSH
14920: LD_INT 3
14922: PPUSH
14923: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
14927: LD_EXP 51
14931: PPUSH
14932: LD_INT 61
14934: PPUSH
14935: CALL_OW 120
// wait ( 0 0$2 ) ;
14939: LD_INT 70
14941: PPUSH
14942: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14946: LD_EXP 51
14950: PPUSH
14951: LD_STRING DK-Plastic-8
14953: PPUSH
14954: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14958: LD_EXP 67
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: PPUSH
14967: LD_STRING DRuMch-Plastic-9
14969: PPUSH
14970: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14974: LD_EXP 51
14978: PPUSH
14979: LD_STRING DK-Plastic-10
14981: PPUSH
14982: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14986: LD_EXP 67
14990: PUSH
14991: LD_INT 1
14993: ARRAY
14994: PPUSH
14995: LD_STRING DRuMch-Plastic-a-11
14997: PPUSH
14998: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
15002: LD_EXP 51
15006: PPUSH
15007: LD_STRING DK-Plastic-a-12
15009: PPUSH
15010: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
15014: LD_EXP 67
15018: PUSH
15019: LD_INT 1
15021: ARRAY
15022: PPUSH
15023: LD_STRING DRuMch-Plastic-a-13
15025: PPUSH
15026: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
15030: LD_EXP 51
15034: PPUSH
15035: LD_INT 2
15037: PPUSH
15038: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15042: LD_EXP 51
15046: PPUSH
15047: CALL_OW 122
// InGameOff ;
15051: CALL_OW 9
// end ;
15055: PPOPN 1
15057: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do var class ;
15058: LD_EXP 21
15062: PUSH
15063: LD_EXP 51
15067: PPUSH
15068: CALL_OW 255
15072: PUSH
15073: LD_INT 2
15075: EQUAL
15076: AND
15077: PUSH
15078: LD_EXP 51
15082: PPUSH
15083: LD_INT 196
15085: PPUSH
15086: CALL 20488 0 2
15090: AND
15091: PUSH
15092: LD_EXP 17
15096: NOT
15097: AND
15098: PUSH
15099: LD_EXP 30
15103: NOT
15104: AND
15105: IFFALSE 15563
15107: GO 15109
15109: DISABLE
15110: LD_INT 0
15112: PPUSH
// begin class := GetClass ( Kaia ) ;
15113: LD_ADDR_VAR 0 1
15117: PUSH
15118: LD_EXP 51
15122: PPUSH
15123: CALL_OW 257
15127: ST_TO_ADDR
// if class <> class_prison then
15128: LD_VAR 0 1
15132: PUSH
15133: LD_INT 33
15135: NONEQUAL
15136: IFFALSE 15229
// begin Query ( QKaiaWeapon ) ;
15138: LD_STRING QKaiaWeapon
15140: PPUSH
15141: CALL_OW 97
// SetAreaMapShow ( hideWeaponArea , 1 ) ;
15145: LD_INT 67
15147: PPUSH
15148: LD_INT 1
15150: PPUSH
15151: CALL_OW 424
// CenterNowOnXY ( 192 , 71 ) ;
15155: LD_INT 192
15157: PPUSH
15158: LD_INT 71
15160: PPUSH
15161: CALL_OW 86
// kaiaWeaponHidden := class ;
15165: LD_ADDR_EXP 45
15169: PUSH
15170: LD_VAR 0 1
15174: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15175: LD_INT 35
15177: PPUSH
15178: CALL_OW 67
// until IsInArea ( Kaia , hideWeaponArea ) ;
15182: LD_EXP 51
15186: PPUSH
15187: LD_INT 67
15189: PPUSH
15190: CALL_OW 308
15194: IFFALSE 15175
// SetClass ( Kaia , class_prison ) ;
15196: LD_EXP 51
15200: PPUSH
15201: LD_INT 33
15203: PPUSH
15204: CALL_OW 336
// repeat wait ( 0 0$1 ) ;
15208: LD_INT 35
15210: PPUSH
15211: CALL_OW 67
// until InEntrance ( Kaia , ruWorkshop ) ;
15215: LD_EXP 51
15219: PPUSH
15220: LD_INT 196
15222: PPUSH
15223: CALL 20488 0 2
15227: IFFALSE 15208
// end ; InGameOn ;
15229: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
15233: LD_INT 196
15235: PPUSH
15236: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
15240: LD_EXP 51
15244: PPUSH
15245: LD_INT 3
15247: PPUSH
15248: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
15252: LD_EXP 51
15256: PPUSH
15257: LD_INT 196
15259: PPUSH
15260: CALL_OW 120
// wait ( 0 0$2 ) ;
15264: LD_INT 70
15266: PPUSH
15267: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
15271: LD_EXP 51
15275: PPUSH
15276: LD_STRING DK-Plastic-8
15278: PPUSH
15279: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
15283: LD_EXP 68
15287: PUSH
15288: LD_INT 1
15290: ARRAY
15291: PPUSH
15292: LD_STRING DRuMch-Plastic-9
15294: PPUSH
15295: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
15299: LD_EXP 51
15303: PPUSH
15304: LD_STRING DK-Plastic-10
15306: PPUSH
15307: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
15311: LD_EXP 68
15315: PUSH
15316: LD_INT 1
15318: ARRAY
15319: PPUSH
15320: LD_STRING DRuMch-Plastic-11
15322: PPUSH
15323: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
15327: LD_EXP 51
15331: PPUSH
15332: LD_STRING DK-Plastic-12
15334: PPUSH
15335: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
15339: LD_EXP 51
15343: PPUSH
15344: LD_STRING DK-Plastic-13
15346: PPUSH
15347: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
15351: LD_EXP 68
15355: PUSH
15356: LD_INT 1
15358: ARRAY
15359: PPUSH
15360: LD_STRING DRuMch-Plastic-14
15362: PPUSH
15363: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
15367: LD_EXP 69
15371: PPUSH
15372: LD_INT 167
15374: PPUSH
15375: LD_INT 34
15377: PPUSH
15378: LD_INT 3
15380: PPUSH
15381: LD_INT 0
15383: PPUSH
15384: CALL 69343 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15388: LD_EXP 69
15392: PPUSH
15393: LD_INT 196
15395: PPUSH
15396: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15400: LD_INT 35
15402: PPUSH
15403: CALL_OW 67
// if not HasTask ( Stiopa ) then
15407: LD_EXP 69
15411: PPUSH
15412: CALL_OW 314
15416: NOT
15417: IFFALSE 15431
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15419: LD_EXP 69
15423: PPUSH
15424: LD_INT 196
15426: PPUSH
15427: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
15431: LD_EXP 69
15435: PPUSH
15436: CALL_OW 310
15440: IFFALSE 15400
// Say ( Stiopa , DSpn-Plastic-15 ) ;
15442: LD_EXP 69
15446: PPUSH
15447: LD_STRING DSpn-Plastic-15
15449: PPUSH
15450: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
15454: LD_EXP 70
15458: PPUSH
15459: LD_STRING DLr-Plastic-16
15461: PPUSH
15462: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
15466: LD_EXP 51
15470: PPUSH
15471: LD_STRING DK-Plastic-17
15473: PPUSH
15474: CALL_OW 88
// wait ( 0 0$0.3 ) ;
15478: LD_INT 10
15480: PPUSH
15481: CALL_OW 67
// UnitsBlockingEntrance ( ruWorkshop ) ;
15485: LD_INT 196
15487: PPUSH
15488: CALL 20214 0 1
// SetSide ( Kaia , 2 ) ;
15492: LD_EXP 51
15496: PPUSH
15497: LD_INT 2
15499: PPUSH
15500: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15504: LD_EXP 51
15508: PPUSH
15509: CALL_OW 122
// InGameOff ;
15513: CALL_OW 9
// explosionsTakenByRussians := false ;
15517: LD_ADDR_EXP 21
15521: PUSH
15522: LD_INT 0
15524: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
15525: LD_INT 170
15527: PPUSH
15528: LD_INT 28
15530: PPUSH
15531: LD_INT 2
15533: PPUSH
15534: LD_INT 6
15536: NEG
15537: PPUSH
15538: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
15542: LD_INT 170
15544: PPUSH
15545: LD_INT 28
15547: PPUSH
15548: LD_INT 2
15550: PPUSH
15551: CALL_OW 331
// knowWhereExplosivesAre := true ;
15555: LD_ADDR_EXP 34
15559: PUSH
15560: LD_INT 1
15562: ST_TO_ADDR
// end ;
15563: PPOPN 1
15565: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
15566: LD_EXP 34
15570: PUSH
15571: LD_EXP 51
15575: PPUSH
15576: CALL_OW 255
15580: PUSH
15581: LD_INT 2
15583: EQUAL
15584: AND
15585: PUSH
15586: LD_EXP 51
15590: PPUSH
15591: LD_INT 195
15593: PPUSH
15594: CALL 20488 0 2
15598: AND
15599: PUSH
15600: LD_EXP 17
15604: NOT
15605: AND
15606: PUSH
15607: LD_EXP 30
15611: NOT
15612: AND
15613: IFFALSE 15719
15615: GO 15617
15617: DISABLE
// begin InGameOn ;
15618: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
15622: LD_EXP 51
15626: PPUSH
15627: LD_INT 3
15629: PPUSH
15630: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
15634: LD_EXP 51
15638: PPUSH
15639: LD_INT 195
15641: PPUSH
15642: CALL_OW 120
// wait ( 0 0$1 ) ;
15646: LD_INT 35
15648: PPUSH
15649: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
15653: LD_EXP 51
15657: PPUSH
15658: LD_STRING DK-Plastic-18
15660: PPUSH
15661: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
15665: LD_STRING ExplosivesInfoUsage
15667: PPUSH
15668: CALL_OW 97
// UnitsBlockingEntrance ( ruExpDep ) ;
15672: LD_INT 195
15674: PPUSH
15675: CALL 20214 0 1
// SetSide ( Kaia , 2 ) ;
15679: LD_EXP 51
15683: PPUSH
15684: LD_INT 2
15686: PPUSH
15687: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15691: LD_EXP 51
15695: PPUSH
15696: CALL_OW 122
// InGameOff ;
15700: CALL_OW 9
// hasExplosionCollected := true ;
15704: LD_ADDR_EXP 23
15708: PUSH
15709: LD_INT 1
15711: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
15712: LD_STRING M1-explosive-out
15714: PPUSH
15715: CALL_OW 337
// end ;
15719: END
// every 0 0$2 trigger kaiaWeaponHidden marked gameStartEvent do
15720: LD_EXP 45
15724: IFFALSE 15761
15726: GO 15728
15728: DISABLE
// begin enable ;
15729: ENABLE
// if not kaiaWeaponHidden then
15730: LD_EXP 45
15734: NOT
15735: IFFALSE 15739
// exit ;
15737: GO 15761
// SetClass ( Kaia , kaiaWeaponHidden ) ;
15739: LD_EXP 51
15743: PPUSH
15744: LD_EXP 45
15748: PPUSH
15749: CALL_OW 336
// kaiaWeaponHidden := 0 ;
15753: LD_ADDR_EXP 45
15757: PUSH
15758: LD_INT 0
15760: ST_TO_ADDR
// end ;
15761: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
15762: LD_EXP 23
15766: PUSH
15767: LD_EXP 17
15771: NOT
15772: AND
15773: PUSH
15774: LD_EXP 30
15778: NOT
15779: AND
15780: IFFALSE 15955
15782: GO 15784
15784: DISABLE
15785: LD_INT 0
15787: PPUSH
15788: PPUSH
// begin for i in importantBuildingsList do
15789: LD_ADDR_VAR 0 1
15793: PUSH
15794: LD_EXP 35
15798: PUSH
15799: FOR_IN
15800: IFFALSE 15816
// MarkBuilding ( i , true ) ;
15802: LD_VAR 0 1
15806: PPUSH
15807: LD_INT 1
15809: PPUSH
15810: CALL 20862 0 2
15814: GO 15799
15816: POP
15817: POP
// repeat wait ( 0 0$1 ) ;
15818: LD_INT 35
15820: PPUSH
15821: CALL_OW 67
// for i in importantBuildingsList do
15825: LD_ADDR_VAR 0 1
15829: PUSH
15830: LD_EXP 35
15834: PUSH
15835: FOR_IN
15836: IFFALSE 15946
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
15838: LD_EXP 46
15842: PUSH
15843: LD_EXP 14
15847: UNION
15848: PPUSH
15849: LD_INT 22
15851: PUSH
15852: LD_INT 2
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 21
15861: PUSH
15862: LD_INT 1
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: PUSH
15869: LD_INT 91
15871: PUSH
15872: LD_VAR 0 1
15876: PUSH
15877: LD_INT 6
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: LIST
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: LIST
15889: PPUSH
15890: CALL_OW 72
15894: IFFALSE 15944
// begin CenterNowOnUnits ( i ) ;
15896: LD_VAR 0 1
15900: PPUSH
15901: CALL_OW 87
// PlaceExplosives ( i ) ;
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL 20759 0 1
// MarkBuilding ( i , false ) ;
15914: LD_VAR 0 1
15918: PPUSH
15919: LD_INT 0
15921: PPUSH
15922: CALL 20862 0 2
// importantBuildingsList := importantBuildingsList diff i ;
15926: LD_ADDR_EXP 35
15930: PUSH
15931: LD_EXP 35
15935: PUSH
15936: LD_VAR 0 1
15940: DIFF
15941: ST_TO_ADDR
// continue ;
15942: GO 15835
// end ; end ;
15944: GO 15835
15946: POP
15947: POP
// until not importantBuildingsList ;
15948: LD_EXP 35
15952: NOT
15953: IFFALSE 15818
// end ;
15955: PPOPN 2
15957: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
15958: LD_EXP 14
15962: PPUSH
15963: LD_INT 22
15965: PUSH
15966: LD_INT 2
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 95
15975: PUSH
15976: LD_INT 23
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PPUSH
15987: CALL_OW 72
15991: PUSH
15992: LD_EXP 46
15996: PPUSH
15997: CALL_OW 302
16001: AND
16002: PUSH
16003: LD_EXP 30
16007: NOT
16008: AND
16009: IFFALSE 16037
16011: GO 16013
16013: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
16014: LD_EXP 46
16018: PPUSH
16019: LD_STRING DH-End-1
16021: PPUSH
16022: CALL_OW 88
// if not activeExplosives then
16026: LD_EXP 36
16030: NOT
16031: IFFALSE 16037
// Explode ;
16033: CALL 23632 0 0
// end ;
16037: END
// function SayHEmpty ( ) ; begin
16038: LD_INT 0
16040: PPUSH
// case rand ( 1 , 3 ) of 1 :
16041: LD_INT 1
16043: PPUSH
16044: LD_INT 3
16046: PPUSH
16047: CALL_OW 12
16051: PUSH
16052: LD_INT 1
16054: DOUBLE
16055: EQUAL
16056: IFTRUE 16060
16058: GO 16075
16060: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
16061: LD_EXP 46
16065: PPUSH
16066: LD_STRING DH-Empty-1
16068: PPUSH
16069: CALL_OW 88
16073: GO 16122
16075: LD_INT 2
16077: DOUBLE
16078: EQUAL
16079: IFTRUE 16083
16081: GO 16098
16083: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
16084: LD_EXP 46
16088: PPUSH
16089: LD_STRING DH-Empty-2
16091: PPUSH
16092: CALL_OW 88
16096: GO 16122
16098: LD_INT 3
16100: DOUBLE
16101: EQUAL
16102: IFTRUE 16106
16104: GO 16121
16106: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
16107: LD_EXP 46
16111: PPUSH
16112: LD_STRING DH-Empty-3
16114: PPUSH
16115: CALL_OW 88
16119: GO 16122
16121: POP
// end ;
16122: LD_VAR 0 1
16126: RET
// function SayHVisited ( ) ; begin
16127: LD_INT 0
16129: PPUSH
// case rand ( 1 , 3 ) of 1 :
16130: LD_INT 1
16132: PPUSH
16133: LD_INT 3
16135: PPUSH
16136: CALL_OW 12
16140: PUSH
16141: LD_INT 1
16143: DOUBLE
16144: EQUAL
16145: IFTRUE 16149
16147: GO 16164
16149: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
16150: LD_EXP 46
16154: PPUSH
16155: LD_STRING DH-Visited-1
16157: PPUSH
16158: CALL_OW 88
16162: GO 16211
16164: LD_INT 2
16166: DOUBLE
16167: EQUAL
16168: IFTRUE 16172
16170: GO 16187
16172: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
16173: LD_EXP 46
16177: PPUSH
16178: LD_STRING DH-Visited-2
16180: PPUSH
16181: CALL_OW 88
16185: GO 16211
16187: LD_INT 3
16189: DOUBLE
16190: EQUAL
16191: IFTRUE 16195
16193: GO 16210
16195: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
16196: LD_EXP 46
16200: PPUSH
16201: LD_STRING DH-Visited-3
16203: PPUSH
16204: CALL_OW 88
16208: GO 16211
16210: POP
// end ;
16211: LD_VAR 0 1
16215: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
16216: LD_EXP 17
16220: NOT
16221: PUSH
16222: LD_EXP 15
16226: AND
16227: PUSH
16228: LD_EXP 46
16232: PPUSH
16233: CALL_OW 255
16237: PUSH
16238: LD_INT 2
16240: EQUAL
16241: AND
16242: PUSH
16243: LD_EXP 46
16247: PPUSH
16248: CALL_OW 302
16252: AND
16253: PUSH
16254: LD_EXP 46
16258: PPUSH
16259: CALL_OW 316
16263: AND
16264: PUSH
16265: LD_EXP 30
16269: NOT
16270: AND
16271: IFFALSE 16337
16273: GO 16275
16275: DISABLE
16276: LD_INT 0
16278: PPUSH
// begin enable ;
16279: ENABLE
// for i in entranceAllowedList do
16280: LD_ADDR_VAR 0 1
16284: PUSH
16285: LD_EXP 15
16289: PUSH
16290: FOR_IN
16291: IFFALSE 16335
// if InEntrance ( Heike , i ) then
16293: LD_EXP 46
16297: PPUSH
16298: LD_VAR 0 1
16302: PPUSH
16303: CALL 20488 0 2
16307: IFFALSE 16333
// begin disable ( entranceEvent ) ;
16309: LD_INT 1
16311: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
16312: LD_VAR 0 1
16316: PPUSH
16317: CALL 16340 0 1
// wait ( 0 0$3 ) ;
16321: LD_INT 105
16323: PPUSH
16324: CALL_OW 67
// enable ( entranceEvent ) ;
16328: LD_INT 1
16330: ENABLE_MARKED
// break ;
16331: GO 16335
// end ;
16333: GO 16290
16335: POP
16336: POP
// end ;
16337: PPOPN 1
16339: END
// function HeikeEnterBuilding ( building ) ; var i , tmp , tmp2 ; begin
16340: LD_INT 0
16342: PPUSH
16343: PPUSH
16344: PPUSH
16345: PPUSH
// if not building then
16346: LD_VAR 0 1
16350: NOT
16351: IFFALSE 16355
// exit ;
16353: GO 18980
// if building in entranceVisitedList then
16355: LD_VAR 0 1
16359: PUSH
16360: LD_EXP 16
16364: IN
16365: IFFALSE 16373
// begin SayHVisited ( ) ;
16367: CALL 16127 0 0
// exit ;
16371: GO 18980
// end ; case Query ( EnterBuilding ) of 1 :
16373: LD_STRING EnterBuilding
16375: PPUSH
16376: CALL_OW 97
16380: PUSH
16381: LD_INT 1
16383: DOUBLE
16384: EQUAL
16385: IFTRUE 16389
16387: GO 16392
16389: POP
// ; 2 :
16390: GO 16406
16392: LD_INT 2
16394: DOUBLE
16395: EQUAL
16396: IFTRUE 16400
16398: GO 16405
16400: POP
// exit ; end ;
16401: GO 18980
16403: GO 16406
16405: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
16406: LD_ADDR_EXP 16
16410: PUSH
16411: LD_EXP 16
16415: PPUSH
16416: LD_VAR 0 1
16420: PPUSH
16421: CALL 67203 0 2
16425: ST_TO_ADDR
// InGameOn ;
16426: CALL_OW 8
// SetSide ( Heike , 5 ) ;
16430: LD_EXP 46
16434: PPUSH
16435: LD_INT 5
16437: PPUSH
16438: CALL_OW 235
// SetSide ( building , 5 ) ;
16442: LD_VAR 0 1
16446: PPUSH
16447: LD_INT 5
16449: PPUSH
16450: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
16454: LD_EXP 46
16458: PPUSH
16459: LD_VAR 0 1
16463: PPUSH
16464: CALL_OW 120
// wait ( 0 0$3 ) ;
16468: LD_INT 105
16470: PPUSH
16471: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
16475: LD_ADDR_VAR 0 4
16479: PUSH
16480: LD_INT 165
16482: PUSH
16483: LD_INT 106
16485: PUSH
16486: LD_INT 135
16488: PUSH
16489: LD_INT 162
16491: PUSH
16492: LD_INT 61
16494: PUSH
16495: LD_INT 109
16497: PUSH
16498: LD_INT 169
16500: PUSH
16501: LD_INT 13
16503: PUSH
16504: LD_INT 147
16506: PUSH
16507: LD_INT 137
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: ST_TO_ADDR
// if not building in tmp then
16522: LD_VAR 0 1
16526: PUSH
16527: LD_VAR 0 4
16531: IN
16532: NOT
16533: IFFALSE 16541
// SayHEmpty ( ) else
16535: CALL 16038 0 0
16539: GO 18927
// case building of laundry :
16541: LD_VAR 0 1
16545: PUSH
16546: LD_INT 165
16548: DOUBLE
16549: EQUAL
16550: IFTRUE 16554
16552: GO 16658
16554: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
16555: LD_EXP 26
16559: PUSH
16560: LD_EXP 27
16564: NOT
16565: AND
16566: PUSH
16567: LD_EXP 28
16571: NOT
16572: AND
16573: IFFALSE 16628
// begin case Query ( HeikeInLaundry ) of 1 :
16575: LD_STRING HeikeInLaundry
16577: PPUSH
16578: CALL_OW 97
16582: PUSH
16583: LD_INT 1
16585: DOUBLE
16586: EQUAL
16587: IFTRUE 16591
16589: GO 16598
16591: POP
// SpawnHeikeAsRussian ; 2 :
16592: CALL 1810 0 0
16596: GO 16626
16598: LD_INT 2
16600: DOUBLE
16601: EQUAL
16602: IFTRUE 16606
16604: GO 16625
16606: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
16607: LD_ADDR_EXP 16
16611: PUSH
16612: LD_EXP 16
16616: PUSH
16617: LD_VAR 0 1
16621: DIFF
16622: ST_TO_ADDR
16623: GO 16626
16625: POP
// end else
16626: GO 16656
// begin entranceVisitedList := entranceVisitedList diff building ;
16628: LD_ADDR_EXP 16
16632: PUSH
16633: LD_EXP 16
16637: PUSH
16638: LD_VAR 0 1
16642: DIFF
16643: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16644: LD_EXP 46
16648: PPUSH
16649: LD_STRING DH-Locked
16651: PPUSH
16652: CALL_OW 88
// end ; end ; dougBar :
16656: GO 18927
16658: LD_INT 106
16660: DOUBLE
16661: EQUAL
16662: IFTRUE 16666
16664: GO 17028
16666: POP
// begin if contactWithAmerican and americanContact then
16667: LD_EXP 25
16671: PUSH
16672: LD_EXP 10
16676: AND
16677: IFFALSE 16741
// begin Say ( Heike , DH-Escort-a-1 ) ;
16679: LD_EXP 46
16683: PPUSH
16684: LD_STRING DH-Escort-a-1
16686: PPUSH
16687: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
16691: LD_EXP 60
16695: PPUSH
16696: LD_STRING DCa-Escort-a-2
16698: PPUSH
16699: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
16703: LD_EXP 60
16707: PPUSH
16708: LD_STRING DCa-Escort-a-3
16710: PPUSH
16711: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
16715: LD_EXP 46
16719: PPUSH
16720: LD_STRING DH-Escort-a-4
16722: PPUSH
16723: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
16727: LD_EXP 46
16731: PPUSH
16732: LD_STRING DH-Escort-a-5
16734: PPUSH
16735: CALL_OW 88
// end else
16739: GO 16985
// if contactWithAmerican then
16741: LD_EXP 25
16745: IFFALSE 16785
// begin Say ( Heike , DH-Escort-b-1 ) ;
16747: LD_EXP 46
16751: PPUSH
16752: LD_STRING DH-Escort-b-1
16754: PPUSH
16755: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
16759: LD_EXP 60
16763: PPUSH
16764: LD_STRING DCa-Escort-b-2
16766: PPUSH
16767: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
16771: LD_EXP 60
16775: PPUSH
16776: LD_STRING DCa-Escort-b-3
16778: PPUSH
16779: CALL_OW 88
// end else
16783: GO 16985
// begin Say ( Doug , DCa-Deal-a-1 ) ;
16785: LD_EXP 60
16789: PPUSH
16790: LD_STRING DCa-Deal-a-1
16792: PPUSH
16793: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
16797: LD_EXP 60
16801: PPUSH
16802: LD_STRING DCa-Deal-a-2
16804: PPUSH
16805: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
16809: LD_EXP 46
16813: PPUSH
16814: LD_STRING DH-Deal-a-3
16816: PPUSH
16817: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
16821: LD_EXP 60
16825: PPUSH
16826: LD_STRING DCa-Deal-a-4
16828: PPUSH
16829: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
16833: LD_EXP 46
16837: PPUSH
16838: LD_STRING DH-Deal-a-5
16840: PPUSH
16841: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
16845: LD_EXP 60
16849: PPUSH
16850: LD_STRING DCa-Deal-a-6
16852: PPUSH
16853: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
16857: LD_EXP 60
16861: PPUSH
16862: LD_STRING DCa-Deal-a-7
16864: PPUSH
16865: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
16869: LD_EXP 60
16873: PPUSH
16874: LD_STRING DCa-Deal-a-8
16876: PPUSH
16877: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
16881: LD_EXP 60
16885: PPUSH
16886: LD_STRING DCa-Deal-a-9
16888: PPUSH
16889: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
16893: LD_EXP 60
16897: PPUSH
16898: LD_STRING DCa-Deal-a-10
16900: PPUSH
16901: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
16905: LD_EXP 60
16909: PPUSH
16910: LD_STRING DCa-Deal-a-11
16912: PPUSH
16913: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16917: LD_INT 10
16919: PPUSH
16920: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
16924: LD_EXP 60
16928: PPUSH
16929: LD_STRING DCa-Deal-a-12
16931: PPUSH
16932: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
16936: LD_EXP 46
16940: PPUSH
16941: LD_STRING DH-Deal-a-13
16943: PPUSH
16944: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
16948: LD_EXP 46
16952: PPUSH
16953: LD_STRING DH-Deal-a-14
16955: PPUSH
16956: CALL_OW 88
// contactWithAmerican := true ;
16960: LD_ADDR_EXP 25
16964: PUSH
16965: LD_INT 1
16967: ST_TO_ADDR
// SaveVariable ( 1 , 08_DealWithDoug ) ;
16968: LD_INT 1
16970: PPUSH
16971: LD_STRING 08_DealWithDoug
16973: PPUSH
16974: CALL_OW 39
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
16978: LD_STRING M1-american-out
16980: PPUSH
16981: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
16985: LD_EXP 60
16989: PPUSH
16990: LD_INT 2
16992: PPUSH
16993: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
16997: LD_ADDR_EXP 14
17001: PUSH
17002: LD_EXP 14
17006: PPUSH
17007: LD_EXP 60
17011: PPUSH
17012: CALL 67203 0 2
17016: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
17017: LD_EXP 60
17021: PPUSH
17022: CALL_OW 122
// end ; usLab :
17026: GO 18927
17028: LD_INT 135
17030: DOUBLE
17031: EQUAL
17032: IFTRUE 17036
17034: GO 17355
17036: POP
// begin if hasSniperRifle then
17037: LD_EXP 11
17041: IFFALSE 17353
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
17043: LD_EXP 51
17047: PPUSH
17048: CALL_OW 302
17052: PUSH
17053: LD_EXP 51
17057: PUSH
17058: LD_EXP 14
17062: IN
17063: AND
17064: PUSH
17065: LD_EXP 51
17069: PPUSH
17070: CALL_OW 255
17074: PUSH
17075: LD_INT 2
17077: EQUAL
17078: AND
17079: IFFALSE 17327
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
17081: LD_EXP 46
17085: PPUSH
17086: LD_EXP 51
17090: PPUSH
17091: CALL_OW 296
17095: PUSH
17096: LD_INT 10
17098: GREATER
17099: IFFALSE 17124
// begin Query ( KaiaDistance ) ;
17101: LD_STRING KaiaDistance
17103: PPUSH
17104: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
17108: LD_ADDR_EXP 16
17112: PUSH
17113: LD_EXP 16
17117: PUSH
17118: LD_INT 135
17120: DIFF
17121: ST_TO_ADDR
// end else
17122: GO 17325
// begin SetSide ( Kaia , 5 ) ;
17124: LD_EXP 51
17128: PPUSH
17129: LD_INT 5
17131: PPUSH
17132: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
17136: LD_EXP 51
17140: PPUSH
17141: LD_INT 135
17143: PPUSH
17144: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17148: LD_INT 35
17150: PPUSH
17151: CALL_OW 67
// until IsInUnit ( Kaia ) ;
17155: LD_EXP 51
17159: PPUSH
17160: CALL_OW 310
17164: IFFALSE 17148
// Say ( Kaia , DK-Sniper-1 ) ;
17166: LD_EXP 51
17170: PPUSH
17171: LD_STRING DK-Sniper-1
17173: PPUSH
17174: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
17178: LD_EXP 51
17182: PPUSH
17183: CALL_OW 257
17187: PUSH
17188: LD_INT 34
17190: EQUAL
17191: PUSH
17192: LD_EXP 48
17196: PUSH
17197: LD_EXP 14
17201: IN
17202: AND
17203: PUSH
17204: LD_EXP 48
17208: PPUSH
17209: CALL_OW 302
17213: AND
17214: IFFALSE 17245
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
17216: LD_EXP 51
17220: PPUSH
17221: LD_STRING DK-Sniper-a-2
17223: PPUSH
17224: CALL_OW 88
// giveSniperRifleToMike := true ;
17228: LD_ADDR_EXP 42
17232: PUSH
17233: LD_INT 1
17235: ST_TO_ADDR
// Query ( QSniperMike ) ;
17236: LD_STRING QSniperMike
17238: PPUSH
17239: CALL_OW 97
// end else
17243: GO 17304
// begin Say ( Kaia , DK-Sniper-2 ) ;
17245: LD_EXP 51
17249: PPUSH
17250: LD_STRING DK-Sniper-2
17252: PPUSH
17253: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
17257: LD_EXP 51
17261: PPUSH
17262: LD_INT 32
17264: PPUSH
17265: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
17269: LD_EXP 53
17273: PPUSH
17274: CALL_OW 302
17278: PUSH
17279: LD_EXP 53
17283: PUSH
17284: LD_EXP 14
17288: IN
17289: AND
17290: IFFALSE 17304
// Say ( Markov , DMar-Sniper-3 ) ;
17292: LD_EXP 53
17296: PPUSH
17297: LD_STRING DMar-Sniper-3
17299: PPUSH
17300: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
17304: LD_EXP 51
17308: PPUSH
17309: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
17313: LD_EXP 51
17317: PPUSH
17318: LD_INT 2
17320: PPUSH
17321: CALL_OW 235
// end ; end else
17325: GO 17353
// begin entranceVisitedList := entranceVisitedList diff usLab ;
17327: LD_ADDR_EXP 16
17331: PUSH
17332: LD_EXP 16
17336: PUSH
17337: LD_INT 135
17339: DIFF
17340: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
17341: LD_EXP 46
17345: PPUSH
17346: LD_STRING DH-Locked
17348: PPUSH
17349: CALL_OW 88
// end ; end ; end ; drugsLab :
17353: GO 18927
17355: LD_INT 162
17357: DOUBLE
17358: EQUAL
17359: IFTRUE 17363
17361: GO 17496
17363: POP
// begin if hasStimDrugs then
17364: LD_EXP 9
17368: IFFALSE 17482
// begin wait ( 0 0$1 ) ;
17370: LD_INT 35
17372: PPUSH
17373: CALL_OW 67
// if not hasStimDrugsCollected then
17377: LD_EXP 24
17381: NOT
17382: IFFALSE 17424
// begin Say ( Heike , DH-Lab-1 ) ;
17384: LD_EXP 46
17388: PPUSH
17389: LD_STRING DH-Lab-1
17391: PPUSH
17392: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
17396: LD_INT 5
17398: PPUSH
17399: LD_INT 2
17401: PPUSH
17402: LD_INT 2
17404: PPUSH
17405: CALL_OW 322
// hasStimDrugsCollected := true ;
17409: LD_ADDR_EXP 24
17413: PUSH
17414: LD_INT 1
17416: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
17417: LD_STRING M1-drugs-out
17419: PPUSH
17420: CALL_OW 604
// end ; if not hasExplosionCollected then
17424: LD_EXP 23
17428: NOT
17429: IFFALSE 17447
// entranceVisitedList := entranceVisitedList diff drugsLab else
17431: LD_ADDR_EXP 16
17435: PUSH
17436: LD_EXP 16
17440: PUSH
17441: LD_INT 162
17443: DIFF
17444: ST_TO_ADDR
17445: GO 17480
// begin wait ( 0 0$3 ) ;
17447: LD_INT 105
17449: PPUSH
17450: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
17454: LD_EXP 46
17458: PPUSH
17459: LD_STRING DH-Lab-2
17461: PPUSH
17462: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
17466: LD_STRING M1-drugsLab-out
17468: PPUSH
17469: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
17473: LD_INT 162
17475: PPUSH
17476: CALL 20759 0 1
// end ; end else
17480: GO 17494
// Say ( Heike , DH-Locked ) ;
17482: LD_EXP 46
17486: PPUSH
17487: LD_STRING DH-Locked
17489: PPUSH
17490: CALL_OW 88
// end ; ruFac :
17494: GO 18927
17496: LD_INT 61
17498: DOUBLE
17499: EQUAL
17500: IFTRUE 17504
17502: GO 17614
17504: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
17505: LD_EXP 53
17509: PPUSH
17510: CALL_OW 302
17514: PUSH
17515: LD_EXP 53
17519: PUSH
17520: LD_EXP 14
17524: IN
17525: NOT
17526: AND
17527: IFFALSE 17608
// begin Say ( Heike , DH-Krastyo-1 ) ;
17529: LD_EXP 46
17533: PPUSH
17534: LD_STRING DH-Krastyo-1
17536: PPUSH
17537: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
17541: LD_EXP 53
17545: PPUSH
17546: LD_STRING DMar-Krastyo-2
17548: PPUSH
17549: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
17553: LD_EXP 53
17557: PPUSH
17558: LD_STRING DMar-Krastyo-3
17560: PPUSH
17561: CALL_OW 88
// SetSide ( Markov , 2 ) ;
17565: LD_EXP 53
17569: PPUSH
17570: LD_INT 2
17572: PPUSH
17573: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
17577: LD_ADDR_EXP 14
17581: PUSH
17582: LD_EXP 14
17586: PPUSH
17587: LD_EXP 53
17591: PPUSH
17592: CALL 67203 0 2
17596: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
17597: LD_EXP 53
17601: PPUSH
17602: CALL_OW 122
// end else
17606: GO 17612
// SayHEmpty ( ) ;
17608: CALL 16038 0 0
// end ; ruBarKam :
17612: GO 18927
17614: LD_INT 109
17616: DOUBLE
17617: EQUAL
17618: IFTRUE 17622
17620: GO 17769
17622: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
17623: LD_EXP 50
17627: PPUSH
17628: CALL_OW 302
17632: PUSH
17633: LD_EXP 50
17637: PUSH
17638: LD_EXP 14
17642: IN
17643: NOT
17644: AND
17645: IFFALSE 17763
// begin Say ( Heike , DH-Kamil-1 ) ;
17647: LD_EXP 46
17651: PPUSH
17652: LD_STRING DH-Kamil-1
17654: PPUSH
17655: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
17659: LD_EXP 50
17663: PPUSH
17664: LD_STRING DKam-Kamil-2
17666: PPUSH
17667: CALL_OW 88
// if IsOk ( Sophia ) then
17671: LD_EXP 52
17675: PPUSH
17676: CALL_OW 302
17680: IFFALSE 17720
// if Sophia in heikeSquad then
17682: LD_EXP 52
17686: PUSH
17687: LD_EXP 14
17691: IN
17692: IFFALSE 17708
// Say ( Kamil , DKam-Kamil-a-3 ) else
17694: LD_EXP 50
17698: PPUSH
17699: LD_STRING DKam-Kamil-a-3
17701: PPUSH
17702: CALL_OW 88
17706: GO 17720
// Say ( Kamil , DKam-Kamil-3 ) ;
17708: LD_EXP 50
17712: PPUSH
17713: LD_STRING DKam-Kamil-3
17715: PPUSH
17716: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
17720: LD_EXP 50
17724: PPUSH
17725: LD_INT 2
17727: PPUSH
17728: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
17732: LD_ADDR_EXP 14
17736: PUSH
17737: LD_EXP 14
17741: PPUSH
17742: LD_EXP 50
17746: PPUSH
17747: CALL 67203 0 2
17751: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
17752: LD_EXP 50
17756: PPUSH
17757: CALL_OW 122
// end else
17761: GO 17767
// SayHEmpty ( ) ;
17763: CALL 16038 0 0
// end ; ruOutpost1 :
17767: GO 18927
17769: LD_INT 169
17771: DOUBLE
17772: EQUAL
17773: IFTRUE 17777
17775: GO 18014
17777: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
17778: LD_EXP 55
17782: PPUSH
17783: CALL_OW 302
17787: PUSH
17788: LD_EXP 55
17792: PUSH
17793: LD_EXP 14
17797: IN
17798: NOT
17799: AND
17800: IFFALSE 18008
// begin if hasMethanol then
17802: LD_EXP 13
17806: IFFALSE 17937
// begin Say ( Heike , DH-Kurt-1 ) ;
17808: LD_EXP 46
17812: PPUSH
17813: LD_STRING DH-Kurt-1
17815: PPUSH
17816: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17820: LD_EXP 55
17824: PPUSH
17825: LD_STRING DKs-Kurt-2
17827: PPUSH
17828: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
17832: LD_EXP 47
17836: PPUSH
17837: LD_INT 169
17839: PPUSH
17840: CALL_OW 296
17844: PUSH
17845: LD_INT 10
17847: LESS
17848: PUSH
17849: LD_EXP 47
17853: PUSH
17854: LD_EXP 14
17858: IN
17859: AND
17860: IFFALSE 17935
// begin ComMoveXY ( Givi , 100 , 37 ) ;
17862: LD_EXP 47
17866: PPUSH
17867: LD_INT 100
17869: PPUSH
17870: LD_INT 37
17872: PPUSH
17873: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
17877: LD_EXP 47
17881: PPUSH
17882: LD_INT 169
17884: PPUSH
17885: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
17889: LD_INT 35
17891: PPUSH
17892: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
17896: LD_EXP 47
17900: PPUSH
17901: LD_INT 169
17903: PPUSH
17904: CALL_OW 296
17908: PUSH
17909: LD_INT 7
17911: LESS
17912: IFFALSE 17889
// Say ( Givi , DG-Kurt-3 ) ;
17914: LD_EXP 47
17918: PPUSH
17919: LD_STRING DG-Kurt-3
17921: PPUSH
17922: CALL_OW 88
// ComStop ( Givi ) ;
17926: LD_EXP 47
17930: PPUSH
17931: CALL_OW 141
// end ; end else
17935: GO 17965
// begin Say ( Heike , DH-Kurt-1 ) ;
17937: LD_EXP 46
17941: PPUSH
17942: LD_STRING DH-Kurt-1
17944: PPUSH
17945: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17949: LD_EXP 55
17953: PPUSH
17954: LD_STRING DKs-Kurt-2
17956: PPUSH
17957: CALL_OW 88
// SpawnAdditionalRuGuards ;
17961: CALL 3647 0 0
// end ; SetSide ( Kurt , 2 ) ;
17965: LD_EXP 55
17969: PPUSH
17970: LD_INT 2
17972: PPUSH
17973: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
17977: LD_ADDR_EXP 14
17981: PUSH
17982: LD_EXP 14
17986: PPUSH
17987: LD_EXP 55
17991: PPUSH
17992: CALL 67203 0 2
17996: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
17997: LD_EXP 55
18001: PPUSH
18002: CALL_OW 122
// end else
18006: GO 18012
// SayHEmpty ( ) ;
18008: CALL 16038 0 0
// end ; ruOutpostBar :
18012: GO 18927
18014: LD_INT 13
18016: DOUBLE
18017: EQUAL
18018: IFTRUE 18022
18020: GO 18068
18022: POP
// begin if not hasGuardPatrolPlan then
18023: LD_EXP 18
18027: NOT
18028: IFFALSE 18062
// begin Say ( Heike , DH-PatrolPlan ) ;
18030: LD_EXP 46
18034: PPUSH
18035: LD_STRING DH-PatrolPlan
18037: PPUSH
18038: CALL_OW 88
// hasGuardPatrolPlan := true ;
18042: LD_ADDR_EXP 18
18046: PUSH
18047: LD_INT 1
18049: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
18050: LD_INT 6
18052: PPUSH
18053: LD_INT 2
18055: PPUSH
18056: CALL_OW 343
// end else
18060: GO 18066
// SayHEmpty ( ) ;
18062: CALL 16038 0 0
// end ; ruKaiaBar :
18066: GO 18927
18068: LD_INT 147
18070: DOUBLE
18071: EQUAL
18072: IFTRUE 18076
18074: GO 18223
18076: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
18077: LD_EXP 51
18081: PPUSH
18082: CALL_OW 302
18086: PUSH
18087: LD_EXP 51
18091: PUSH
18092: LD_EXP 14
18096: IN
18097: NOT
18098: AND
18099: IFFALSE 18221
// begin Say ( Heike , DH-Kaia-1 ) ;
18101: LD_EXP 46
18105: PPUSH
18106: LD_STRING DH-Kaia-1
18108: PPUSH
18109: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
18113: LD_EXP 51
18117: PPUSH
18118: LD_STRING DK-Kaia-2
18120: PPUSH
18121: CALL_OW 88
// if hasSniperRifle then
18125: LD_EXP 11
18129: IFFALSE 18180
// begin if IsOk ( Markov ) then
18131: LD_EXP 53
18135: PPUSH
18136: CALL_OW 302
18140: IFFALSE 18156
// Say ( Kaia , DK-Kaia-3 ) else
18142: LD_EXP 51
18146: PPUSH
18147: LD_STRING DK-Kaia-3
18149: PPUSH
18150: CALL_OW 88
18154: GO 18168
// Say ( Kaia , DK-Kaia-a-3 ) ;
18156: LD_EXP 51
18160: PPUSH
18161: LD_STRING DK-Kaia-a-3
18163: PPUSH
18164: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
18168: LD_EXP 46
18172: PPUSH
18173: LD_STRING DH-Kaia-4
18175: PPUSH
18176: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
18180: LD_EXP 51
18184: PPUSH
18185: LD_INT 2
18187: PPUSH
18188: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
18192: LD_ADDR_EXP 14
18196: PUSH
18197: LD_EXP 14
18201: PPUSH
18202: LD_EXP 51
18206: PPUSH
18207: CALL 67203 0 2
18211: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
18212: LD_EXP 51
18216: PPUSH
18217: CALL_OW 122
// end ; end ; ruWeaponsBar :
18221: GO 18927
18223: LD_INT 137
18225: DOUBLE
18226: EQUAL
18227: IFTRUE 18231
18229: GO 18926
18231: POP
// begin if hasWeapons then
18232: LD_EXP 19
18236: IFFALSE 18912
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
18238: LD_ADDR_EXP 16
18242: PUSH
18243: LD_EXP 16
18247: PUSH
18248: LD_INT 137
18250: DIFF
18251: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
18252: LD_ADDR_VAR 0 4
18256: PUSH
18257: LD_EXP 14
18261: PPUSH
18262: LD_INT 91
18264: PUSH
18265: LD_EXP 46
18269: PUSH
18270: LD_INT 8
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: LIST
18277: PPUSH
18278: CALL_OW 72
18282: ST_TO_ADDR
// if not heikeSquad or not tmp then
18283: LD_EXP 14
18287: NOT
18288: PUSH
18289: LD_VAR 0 4
18293: NOT
18294: OR
18295: IFFALSE 18311
// Say ( Heike , DH-Weapons-Alone ) else
18297: LD_EXP 46
18301: PPUSH
18302: LD_STRING DH-Weapons-Alone
18304: PPUSH
18305: CALL_OW 88
18309: GO 18910
// begin if not firstArmouryDialog then
18311: LD_EXP 39
18315: NOT
18316: IFFALSE 18375
// begin Say ( Heike , DH-Weapons-1 ) ;
18318: LD_EXP 46
18322: PPUSH
18323: LD_STRING DH-Weapons-1
18325: PPUSH
18326: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
18330: LD_EXP 46
18334: PPUSH
18335: LD_STRING DH-Weapons-2
18337: PPUSH
18338: CALL_OW 88
// Query ( Weapons ) ;
18342: LD_STRING Weapons
18344: PPUSH
18345: CALL_OW 97
// SetAreaMapShow ( weaponariesArea , 1 ) ;
18349: LD_INT 65
18351: PPUSH
18352: LD_INT 1
18354: PPUSH
18355: CALL_OW 424
// canEquipWeapons := true ;
18359: LD_ADDR_EXP 41
18363: PUSH
18364: LD_INT 1
18366: ST_TO_ADDR
// firstArmouryDialog := true ;
18367: LD_ADDR_EXP 39
18371: PUSH
18372: LD_INT 1
18374: ST_TO_ADDR
// end ; if hasRevolver and Kaia in tmp and GetClass ( Kaia ) <> class_revolver then
18375: LD_EXP 8
18379: PUSH
18380: LD_EXP 51
18384: PUSH
18385: LD_VAR 0 4
18389: IN
18390: AND
18391: PUSH
18392: LD_EXP 51
18396: PPUSH
18397: CALL_OW 257
18401: PUSH
18402: LD_INT 34
18404: NONEQUAL
18405: AND
18406: IFFALSE 18552
// begin SetSide ( Kaia , 5 ) ;
18408: LD_EXP 51
18412: PPUSH
18413: LD_INT 5
18415: PPUSH
18416: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
18420: LD_EXP 51
18424: PPUSH
18425: LD_INT 137
18427: PPUSH
18428: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18432: LD_INT 35
18434: PPUSH
18435: CALL_OW 67
// until IsInUnit ( Kaia ) ;
18439: LD_EXP 51
18443: PPUSH
18444: CALL_OW 310
18448: IFFALSE 18432
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
18450: LD_EXP 46
18454: PPUSH
18455: LD_STRING DH-Kaia-Revolver-2
18457: PPUSH
18458: CALL_OW 88
// SetClassKaiaRevolver ;
18462: CALL 1769 0 0
// hasRevolver := false ;
18466: LD_ADDR_EXP 8
18470: PUSH
18471: LD_INT 0
18473: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
18474: LD_EXP 51
18478: PPUSH
18479: LD_INT 2
18481: PPUSH
18482: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
18486: LD_EXP 51
18490: PPUSH
18491: CALL_OW 122
// if GetClass ( Kaia ) = class_hunter and Mike in heikeSquad and GetSide ( Mike ) = 2 then
18495: LD_EXP 51
18499: PPUSH
18500: CALL_OW 257
18504: PUSH
18505: LD_INT 32
18507: EQUAL
18508: PUSH
18509: LD_EXP 48
18513: PUSH
18514: LD_EXP 14
18518: IN
18519: AND
18520: PUSH
18521: LD_EXP 48
18525: PPUSH
18526: CALL_OW 255
18530: PUSH
18531: LD_INT 2
18533: EQUAL
18534: AND
18535: IFFALSE 18552
// begin giveSniperRifleToMike := true ;
18537: LD_ADDR_EXP 42
18541: PUSH
18542: LD_INT 1
18544: ST_TO_ADDR
// Query ( QSniperMike ) ;
18545: LD_STRING QSniperMike
18547: PPUSH
18548: CALL_OW 97
// end ; end ; if Givi in tmp and GetClass ( Givi ) = class_prison then
18552: LD_EXP 47
18556: PUSH
18557: LD_VAR 0 4
18561: IN
18562: PUSH
18563: LD_EXP 47
18567: PPUSH
18568: CALL_OW 257
18572: PUSH
18573: LD_INT 33
18575: EQUAL
18576: AND
18577: IFFALSE 18718
// begin SetSide ( Givi , 5 ) ;
18579: LD_EXP 47
18583: PPUSH
18584: LD_INT 5
18586: PPUSH
18587: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
18591: LD_EXP 47
18595: PPUSH
18596: LD_INT 137
18598: PPUSH
18599: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18603: LD_INT 35
18605: PPUSH
18606: CALL_OW 67
// until IsInUnit ( Givi ) ;
18610: LD_EXP 47
18614: PPUSH
18615: CALL_OW 310
18619: IFFALSE 18603
// Say ( Givi , DG-Weapons-3 ) ;
18621: LD_EXP 47
18625: PPUSH
18626: LD_STRING DG-Weapons-3
18628: PPUSH
18629: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
18633: LD_EXP 46
18637: PPUSH
18638: LD_STRING DH-Weapons-4
18640: PPUSH
18641: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
18645: LD_EXP 47
18649: PPUSH
18650: LD_STRING DG-Weapons-5
18652: PPUSH
18653: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
18657: LD_EXP 47
18661: PPUSH
18662: LD_INT 11
18664: PPUSH
18665: CALL_OW 336
// ComExitBuilding ( Givi ) ;
18669: LD_EXP 47
18673: PPUSH
18674: CALL_OW 122
// SetSide ( Givi , 2 ) ;
18678: LD_EXP 47
18682: PPUSH
18683: LD_INT 2
18685: PPUSH
18686: CALL_OW 235
// if hasRevolver then
18690: LD_EXP 8
18694: IFFALSE 18716
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18696: LD_EXP 46
18700: PPUSH
18701: LD_STRING DH-Kaia-Revolver-1
18703: PPUSH
18704: CALL_OW 88
// heikeHasRevolver := true ;
18708: LD_ADDR_EXP 20
18712: PUSH
18713: LD_INT 1
18715: ST_TO_ADDR
// end ; end else
18716: GO 18910
// if Kamil in tmp and GetClass ( Kamil ) = class_prison then
18718: LD_EXP 50
18722: PUSH
18723: LD_VAR 0 4
18727: IN
18728: PUSH
18729: LD_EXP 50
18733: PPUSH
18734: CALL_OW 257
18738: PUSH
18739: LD_INT 33
18741: EQUAL
18742: AND
18743: IFFALSE 18872
// begin SetSide ( Kamil , 5 ) ;
18745: LD_EXP 50
18749: PPUSH
18750: LD_INT 5
18752: PPUSH
18753: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
18757: LD_EXP 50
18761: PPUSH
18762: LD_INT 137
18764: PPUSH
18765: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18769: LD_INT 35
18771: PPUSH
18772: CALL_OW 67
// until IsInUnit ( Kamil ) ;
18776: LD_EXP 50
18780: PPUSH
18781: CALL_OW 310
18785: IFFALSE 18769
// Say ( Kamil , DKam-Weapons-a-3 ) ;
18787: LD_EXP 50
18791: PPUSH
18792: LD_STRING DKam-Weapons-a-3
18794: PPUSH
18795: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
18799: LD_EXP 46
18803: PPUSH
18804: LD_STRING DH-Weapons-a-4
18806: PPUSH
18807: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
18811: LD_EXP 50
18815: PPUSH
18816: LD_INT 11
18818: PPUSH
18819: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
18823: LD_EXP 50
18827: PPUSH
18828: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
18832: LD_EXP 50
18836: PPUSH
18837: LD_INT 2
18839: PPUSH
18840: CALL_OW 235
// if hasRevolver then
18844: LD_EXP 8
18848: IFFALSE 18870
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18850: LD_EXP 46
18854: PPUSH
18855: LD_STRING DH-Kaia-Revolver-1
18857: PPUSH
18858: CALL_OW 88
// heikeHasRevolver := true ;
18862: LD_ADDR_EXP 20
18866: PUSH
18867: LD_INT 1
18869: ST_TO_ADDR
// end ; end else
18870: GO 18910
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
18872: LD_EXP 46
18876: PPUSH
18877: LD_STRING DH-Weapons-Alone-2
18879: PPUSH
18880: CALL_OW 88
// if hasRevolver then
18884: LD_EXP 8
18888: IFFALSE 18910
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
18890: LD_EXP 46
18894: PPUSH
18895: LD_STRING DH-Kaia-Revolver-1a
18897: PPUSH
18898: CALL_OW 88
// heikeHasRevolver := true ;
18902: LD_ADDR_EXP 20
18906: PUSH
18907: LD_INT 1
18909: ST_TO_ADDR
// end ; end ; end ; end else
18910: GO 18924
// Say ( Heike , DH-Locked ) ;
18912: LD_EXP 46
18916: PPUSH
18917: LD_STRING DH-Locked
18919: PPUSH
18920: CALL_OW 88
// end ; end ;
18924: GO 18927
18926: POP
// SetSide ( building , 3 ) ;
18927: LD_VAR 0 1
18931: PPUSH
18932: LD_INT 3
18934: PPUSH
18935: CALL_OW 235
// UnitsBlockingEntrance ( building ) ;
18939: LD_VAR 0 1
18943: PPUSH
18944: CALL 20214 0 1
// wait ( 0 0$0.3 ) ;
18948: LD_INT 10
18950: PPUSH
18951: CALL_OW 67
// ComExitBuilding ( Heike ) ;
18955: LD_EXP 46
18959: PPUSH
18960: CALL_OW 122
// SetSide ( Heike , 2 ) ;
18964: LD_EXP 46
18968: PPUSH
18969: LD_INT 2
18971: PPUSH
18972: CALL_OW 235
// InGameOff ;
18976: CALL_OW 9
// end ;
18980: LD_VAR 0 2
18984: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
18985: LD_EXP 30
18989: NOT
18990: PUSH
18991: LD_EXP 17
18995: NOT
18996: AND
18997: PUSH
18998: LD_INT 22
19000: PUSH
19001: LD_INT 5
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 21
19010: PUSH
19011: LD_INT 1
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PPUSH
19022: CALL_OW 69
19026: PUSH
19027: LD_INT 0
19029: EQUAL
19030: AND
19031: PUSH
19032: LD_INT 22
19034: PUSH
19035: LD_INT 4
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 21
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PPUSH
19056: CALL_OW 69
19060: PUSH
19061: LD_INT 0
19063: EQUAL
19064: PUSH
19065: LD_EXP 25
19069: AND
19070: PUSH
19071: LD_EXP 25
19075: NOT
19076: OR
19077: AND
19078: IFFALSE 19110
19080: GO 19082
19082: DISABLE
// begin DialogueOn ;
19083: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
19087: LD_EXP 46
19091: PPUSH
19092: LD_STRING DH-Alarm-2
19094: PPUSH
19095: CALL_OW 88
// DialogueOff ;
19099: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
19103: LD_STRING M1-people-out
19105: PPUSH
19106: CALL_OW 337
// end ;
19110: END
// every 0 0$2 trigger GetSide ( Mike ) = 2 and Mike in heikeSquad and GetDistUnits ( Heike , Mike ) < 6 and not hasMuchin and giveSniperRifleToMike marked gameStartEvent do
19111: LD_EXP 48
19115: PPUSH
19116: CALL_OW 255
19120: PUSH
19121: LD_INT 2
19123: EQUAL
19124: PUSH
19125: LD_EXP 48
19129: PUSH
19130: LD_EXP 14
19134: IN
19135: AND
19136: PUSH
19137: LD_EXP 46
19141: PPUSH
19142: LD_EXP 48
19146: PPUSH
19147: CALL_OW 296
19151: PUSH
19152: LD_INT 6
19154: LESS
19155: AND
19156: PUSH
19157: LD_EXP 30
19161: NOT
19162: AND
19163: PUSH
19164: LD_EXP 42
19168: AND
19169: IFFALSE 19186
19171: GO 19173
19173: DISABLE
// SetClass ( Mike , class_hunter ) ;
19174: LD_EXP 48
19178: PPUSH
19179: LD_INT 32
19181: PPUSH
19182: CALL_OW 336
19186: END
// every 0 0$5 trigger canEquipWeapons and weaponsAmount and GetSide ( ruWeaponsBar ) = 3 and UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) and not GetAttitude ( 2 , 3 ) = att_enemy and not GetDistUnits ( ruDisturb , ruWeaponsBar ) < 12 marked gameStartEvent do var i , tmp ;
19187: LD_EXP 41
19191: PUSH
19192: LD_EXP 40
19196: AND
19197: PUSH
19198: LD_INT 137
19200: PPUSH
19201: CALL_OW 255
19205: PUSH
19206: LD_INT 3
19208: EQUAL
19209: AND
19210: PUSH
19211: LD_EXP 14
19215: PPUSH
19216: LD_INT 95
19218: PUSH
19219: LD_INT 65
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 22
19228: PUSH
19229: LD_INT 2
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 25
19238: PUSH
19239: LD_INT 33
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: LIST
19250: PPUSH
19251: CALL_OW 72
19255: AND
19256: PUSH
19257: LD_INT 2
19259: PPUSH
19260: LD_INT 3
19262: PPUSH
19263: CALL_OW 81
19267: PUSH
19268: LD_INT 2
19270: EQUAL
19271: NOT
19272: AND
19273: PUSH
19274: LD_EXP 66
19278: PPUSH
19279: LD_INT 137
19281: PPUSH
19282: CALL_OW 296
19286: PUSH
19287: LD_INT 12
19289: LESS
19290: NOT
19291: AND
19292: IFFALSE 19546
19294: GO 19296
19296: DISABLE
19297: LD_INT 0
19299: PPUSH
19300: PPUSH
// begin enable ;
19301: ENABLE
// tmp := UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) ;
19302: LD_ADDR_VAR 0 2
19306: PUSH
19307: LD_EXP 14
19311: PPUSH
19312: LD_INT 95
19314: PUSH
19315: LD_INT 65
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 22
19324: PUSH
19325: LD_INT 2
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 25
19334: PUSH
19335: LD_INT 33
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: LIST
19346: PPUSH
19347: CALL_OW 72
19351: ST_TO_ADDR
// if Query ( QWeapons ) = 1 then
19352: LD_STRING QWeapons
19354: PPUSH
19355: CALL_OW 97
19359: PUSH
19360: LD_INT 1
19362: EQUAL
19363: IFFALSE 19546
// begin for i in tmp do
19365: LD_ADDR_VAR 0 1
19369: PUSH
19370: LD_VAR 0 2
19374: PUSH
19375: FOR_IN
19376: IFFALSE 19544
// begin if UnitsInside ( ruWeaponsBar ) = 6 then
19378: LD_INT 137
19380: PPUSH
19381: CALL_OW 313
19385: PUSH
19386: LD_INT 6
19388: EQUAL
19389: IFFALSE 19393
// continue ;
19391: GO 19375
// SetSide ( i , 3 ) ;
19393: LD_VAR 0 1
19397: PPUSH
19398: LD_INT 3
19400: PPUSH
19401: CALL_OW 235
// ComEnterUnit ( i , ruWeaponsBar ) ;
19405: LD_VAR 0 1
19409: PPUSH
19410: LD_INT 137
19412: PPUSH
19413: CALL_OW 120
// weaponsAmount := Dec ( weaponsAmount ) ;
19417: LD_ADDR_EXP 40
19421: PUSH
19422: LD_EXP 40
19426: PPUSH
19427: CALL 68586 0 1
19431: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
19432: LD_INT 10
19434: PPUSH
19435: CALL_OW 67
// until IsInUnit ( i ) ;
19439: LD_VAR 0 1
19443: PPUSH
19444: CALL_OW 310
19448: IFFALSE 19432
// SetClass ( i , class_soldier ) ;
19450: LD_VAR 0 1
19454: PPUSH
19455: LD_INT 1
19457: PPUSH
19458: CALL_OW 336
// repeat ComExitBuilding ( i ) ;
19462: LD_VAR 0 1
19466: PPUSH
19467: CALL_OW 122
// wait ( 0 0$1 ) ;
19471: LD_INT 35
19473: PPUSH
19474: CALL_OW 67
// until not IsInUnit ( i ) ;
19478: LD_VAR 0 1
19482: PPUSH
19483: CALL_OW 310
19487: NOT
19488: IFFALSE 19462
// SetSide ( i , 2 ) ;
19490: LD_VAR 0 1
19494: PPUSH
19495: LD_INT 2
19497: PPUSH
19498: CALL_OW 235
// AddComMoveXY ( i , 191 , 126 ) ;
19502: LD_VAR 0 1
19506: PPUSH
19507: LD_INT 191
19509: PPUSH
19510: LD_INT 126
19512: PPUSH
19513: CALL_OW 171
// if weaponsAmount = 0 then
19517: LD_EXP 40
19521: PUSH
19522: LD_INT 0
19524: EQUAL
19525: IFFALSE 19542
// begin SetAreaMapShow ( weaponariesArea , 0 ) ;
19527: LD_INT 65
19529: PPUSH
19530: LD_INT 0
19532: PPUSH
19533: CALL_OW 424
// disable ;
19537: DISABLE
// exit ;
19538: POP
19539: POP
19540: GO 19546
// end ; end ;
19542: GO 19375
19544: POP
19545: POP
// end ; end ; end_of_file
19546: PPOPN 2
19548: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
19549: LD_VAR 0 1
19553: PUSH
19554: LD_INT 3
19556: DOUBLE
19557: EQUAL
19558: IFTRUE 19562
19560: GO 19592
19562: POP
// begin repeat wait ( 0 0$1 ) ;
19563: LD_INT 35
19565: PPUSH
19566: CALL_OW 67
// CenterOnUnits ( Heike ) ;
19570: LD_EXP 46
19574: PPUSH
19575: CALL_OW 85
// until IsDying ( Heike ) ;
19579: LD_EXP 46
19583: PPUSH
19584: CALL_OW 303
19588: IFFALSE 19563
// end ; end ;
19590: GO 19593
19592: POP
// end ;
19593: PPOPN 1
19595: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
19596: LD_OWVAR 59
19600: IFFALSE 19604
// exit ;
19602: GO 19678
// if showPlaceEvent then
19604: LD_INT 4
19606: IFFALSE 19678
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
19608: LD_VAR 0 2
19612: PPUSH
19613: LD_VAR 0 3
19617: PPUSH
19618: LD_INT 2
19620: PPUSH
19621: LD_INT 6
19623: NEG
19624: PPUSH
19625: CALL_OW 330
// CenterOnXY ( x , y ) ;
19629: LD_VAR 0 2
19633: PPUSH
19634: LD_VAR 0 3
19638: PPUSH
19639: CALL_OW 84
// wait ( time ) ;
19643: LD_VAR 0 4
19647: PPUSH
19648: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
19652: LD_EXP 46
19656: PPUSH
19657: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
19661: LD_VAR 0 2
19665: PPUSH
19666: LD_VAR 0 3
19670: PPUSH
19671: LD_INT 2
19673: PPUSH
19674: CALL_OW 331
// end ; end ;
19678: PPOPN 7
19680: END
// on UnitDestroyed ( un ) do var x , y ;
19681: LD_INT 0
19683: PPUSH
19684: PPUSH
// begin if un = Heike and hasNormalScene then
19685: LD_VAR 0 1
19689: PUSH
19690: LD_EXP 46
19694: EQUAL
19695: PUSH
19696: LD_EXP 5
19700: AND
19701: IFFALSE 19725
// if loseCounter then
19703: LD_EXP 32
19707: IFFALSE 19718
// YouLost ( HeikeNoSurrender ) else
19709: LD_STRING HeikeNoSurrender
19711: PPUSH
19712: CALL_OW 104
19716: GO 19725
// YouLost ( Heike ) ;
19718: LD_STRING Heike
19720: PPUSH
19721: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
19725: LD_VAR 0 1
19729: PPUSH
19730: CALL_OW 255
19734: PUSH
19735: LD_INT 2
19737: EQUAL
19738: PUSH
19739: LD_VAR 0 1
19743: PPUSH
19744: CALL_OW 247
19748: PUSH
19749: LD_INT 1
19751: EQUAL
19752: AND
19753: IFFALSE 19770
// loseCounter := Inc ( loseCounter ) ;
19755: LD_ADDR_EXP 32
19759: PUSH
19760: LD_EXP 32
19764: PPUSH
19765: CALL 68564 0 1
19769: ST_TO_ADDR
// if GetSide ( un ) = 6 and not isAlarm and un in ruPatrol then
19770: LD_VAR 0 1
19774: PPUSH
19775: CALL_OW 255
19779: PUSH
19780: LD_INT 6
19782: EQUAL
19783: PUSH
19784: LD_EXP 17
19788: NOT
19789: AND
19790: PUSH
19791: LD_VAR 0 1
19795: PUSH
19796: LD_EXP 71
19800: IN
19801: AND
19802: IFFALSE 19906
// begin x := GetX ( un ) ;
19804: LD_ADDR_VAR 0 2
19808: PUSH
19809: LD_VAR 0 1
19813: PPUSH
19814: CALL_OW 250
19818: ST_TO_ADDR
// y := GetY ( un ) ;
19819: LD_ADDR_VAR 0 3
19823: PUSH
19824: LD_VAR 0 1
19828: PPUSH
19829: CALL_OW 251
19833: ST_TO_ADDR
// ruKilledHex := Join ( ruKilledHex , [ x , y ] ) ;
19834: LD_ADDR_EXP 43
19838: PUSH
19839: LD_EXP 43
19843: PPUSH
19844: LD_VAR 0 2
19848: PUSH
19849: LD_VAR 0 3
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PPUSH
19858: CALL 67203 0 2
19862: ST_TO_ADDR
// ruPatrol := ruPatrol diff un ;
19863: LD_ADDR_EXP 71
19867: PUSH
19868: LD_EXP 71
19872: PUSH
19873: LD_VAR 0 1
19877: DIFF
19878: ST_TO_ADDR
// if SeeXY ( 3 , x , y ) then
19879: LD_INT 3
19881: PPUSH
19882: LD_VAR 0 2
19886: PPUSH
19887: LD_VAR 0 3
19891: PPUSH
19892: CALL_OW 293
19896: IFFALSE 19906
// isAlarm := true ;
19898: LD_ADDR_EXP 17
19902: PUSH
19903: LD_INT 1
19905: ST_TO_ADDR
// end ; end ;
19906: PPOPN 3
19908: END
// on Contact ( s1 , s2 ) do begin if meetWithMuchin then
19909: LD_EXP 44
19913: IFFALSE 19917
// exit ;
19915: GO 19965
// if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
19917: LD_VAR 0 1
19921: PUSH
19922: LD_INT 2
19924: EQUAL
19925: PUSH
19926: LD_VAR 0 2
19930: PUSH
19931: LD_INT 3
19933: EQUAL
19934: AND
19935: PUSH
19936: LD_VAR 0 1
19940: PUSH
19941: LD_INT 3
19943: EQUAL
19944: PUSH
19945: LD_VAR 0 2
19949: PUSH
19950: LD_INT 2
19952: EQUAL
19953: AND
19954: OR
19955: IFFALSE 19965
// isAlarm := true ;
19957: LD_ADDR_EXP 17
19961: PUSH
19962: LD_INT 1
19964: ST_TO_ADDR
// end ;
19965: PPOPN 2
19967: END
// on DestinationUnreachable ( un ) do var i , units ;
19968: LD_INT 0
19970: PPUSH
19971: PPUSH
// begin if un = ruDisturb and not isAlarm then
19972: LD_VAR 0 1
19976: PUSH
19977: LD_EXP 66
19981: EQUAL
19982: PUSH
19983: LD_EXP 17
19987: NOT
19988: AND
19989: IFFALSE 20110
// begin units := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff Heike ;
19991: LD_ADDR_VAR 0 3
19995: PUSH
19996: LD_INT 22
19998: PUSH
19999: LD_INT 2
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 21
20008: PUSH
20009: LD_INT 1
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PPUSH
20020: CALL_OW 69
20024: PUSH
20025: LD_EXP 46
20029: DIFF
20030: ST_TO_ADDR
// if not units then
20031: LD_VAR 0 3
20035: NOT
20036: IFFALSE 20040
// exit ;
20038: GO 20110
// for i in units do
20040: LD_ADDR_VAR 0 2
20044: PUSH
20045: LD_VAR 0 3
20049: PUSH
20050: FOR_IN
20051: IFFALSE 20108
// begin if Carry ( i ) then
20053: LD_VAR 0 2
20057: PPUSH
20058: CALL_OW 281
20062: IFFALSE 20079
// SetCargo ( i , mat_cans , 0 ) ;
20064: LD_VAR 0 2
20068: PPUSH
20069: LD_INT 1
20071: PPUSH
20072: LD_INT 0
20074: PPUSH
20075: CALL_OW 290
// SetSide ( i , 5 ) ;
20079: LD_VAR 0 2
20083: PPUSH
20084: LD_INT 5
20086: PPUSH
20087: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
20091: LD_VAR 0 2
20095: PPUSH
20096: LD_INT 113
20098: PPUSH
20099: LD_INT 17
20101: PPUSH
20102: CALL_OW 111
// end ;
20106: GO 20050
20108: POP
20109: POP
// end ; end ; end_of_file
20110: PPOPN 3
20112: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
20113: LD_INT 0
20115: PPUSH
20116: PPUSH
20117: PPUSH
// u1 := IsInUnit ( unit1 ) ;
20118: LD_ADDR_VAR 0 4
20122: PUSH
20123: LD_VAR 0 1
20127: PPUSH
20128: CALL_OW 310
20132: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
20133: LD_ADDR_VAR 0 5
20137: PUSH
20138: LD_VAR 0 2
20142: PPUSH
20143: CALL_OW 310
20147: ST_TO_ADDR
// result := u1 and u1 = u2 ;
20148: LD_ADDR_VAR 0 3
20152: PUSH
20153: LD_VAR 0 4
20157: PUSH
20158: LD_VAR 0 4
20162: PUSH
20163: LD_VAR 0 5
20167: EQUAL
20168: AND
20169: ST_TO_ADDR
// end ;
20170: LD_VAR 0 3
20174: RET
// export function ShowPlace ( x , y , time ) ; begin
20175: LD_INT 0
20177: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
20178: LD_INT 4
20180: PPUSH
20181: LD_VAR 0 1
20185: PPUSH
20186: LD_VAR 0 2
20190: PPUSH
20191: LD_VAR 0 3
20195: PPUSH
20196: LD_INT 0
20198: PPUSH
20199: LD_INT 0
20201: PPUSH
20202: LD_INT 0
20204: PPUSH
20205: CALL_OW 595
// end ;
20209: LD_VAR 0 4
20213: RET
// export function UnitsBlockingEntrance ( building ) ; var i , x , y , d , entrance ; begin
20214: LD_INT 0
20216: PPUSH
20217: PPUSH
20218: PPUSH
20219: PPUSH
20220: PPUSH
20221: PPUSH
// if not IsOk ( building ) then
20222: LD_VAR 0 1
20226: PPUSH
20227: CALL_OW 302
20231: NOT
20232: IFFALSE 20236
// exit ;
20234: GO 20483
// x := GetX ( building ) ;
20236: LD_ADDR_VAR 0 4
20240: PUSH
20241: LD_VAR 0 1
20245: PPUSH
20246: CALL_OW 250
20250: ST_TO_ADDR
// y := GetY ( building ) ;
20251: LD_ADDR_VAR 0 5
20255: PUSH
20256: LD_VAR 0 1
20260: PPUSH
20261: CALL_OW 251
20265: ST_TO_ADDR
// d := GetDir ( building ) ;
20266: LD_ADDR_VAR 0 6
20270: PUSH
20271: LD_VAR 0 1
20275: PPUSH
20276: CALL_OW 254
20280: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
20281: LD_ADDR_VAR 0 7
20285: PUSH
20286: LD_VAR 0 4
20290: PPUSH
20291: LD_VAR 0 6
20295: PPUSH
20296: LD_INT 3
20298: PPUSH
20299: CALL_OW 272
20303: PUSH
20304: LD_VAR 0 5
20308: PPUSH
20309: LD_VAR 0 6
20313: PPUSH
20314: LD_INT 3
20316: PPUSH
20317: CALL_OW 273
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
20326: LD_VAR 0 7
20330: PUSH
20331: LD_INT 1
20333: ARRAY
20334: PPUSH
20335: LD_VAR 0 7
20339: PUSH
20340: LD_INT 2
20342: ARRAY
20343: PPUSH
20344: CALL_OW 488
20348: NOT
20349: IFFALSE 20353
// exit ;
20351: GO 20483
// result := FilterAllUnits ( [ [ f_distxy , x , y , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
20353: LD_ADDR_VAR 0 2
20357: PUSH
20358: LD_INT 92
20360: PUSH
20361: LD_VAR 0 4
20365: PUSH
20366: LD_VAR 0 5
20370: PUSH
20371: LD_INT 4
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 3
20382: PUSH
20383: LD_INT 54
20385: PUSH
20386: EMPTY
20387: LIST
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PPUSH
20397: CALL_OW 69
20401: ST_TO_ADDR
// if not result then
20402: LD_VAR 0 2
20406: NOT
20407: IFFALSE 20411
// exit ;
20409: GO 20483
// for i in result do
20411: LD_ADDR_VAR 0 3
20415: PUSH
20416: LD_VAR 0 2
20420: PUSH
20421: FOR_IN
20422: IFFALSE 20481
// ComMoveXY ( i , ShiftX ( GetX ( i ) , d , 3 ) , ShiftY ( GetY ( i ) , d , 3 ) ) ;
20424: LD_VAR 0 3
20428: PPUSH
20429: LD_VAR 0 3
20433: PPUSH
20434: CALL_OW 250
20438: PPUSH
20439: LD_VAR 0 6
20443: PPUSH
20444: LD_INT 3
20446: PPUSH
20447: CALL_OW 272
20451: PPUSH
20452: LD_VAR 0 3
20456: PPUSH
20457: CALL_OW 251
20461: PPUSH
20462: LD_VAR 0 6
20466: PPUSH
20467: LD_INT 3
20469: PPUSH
20470: CALL_OW 273
20474: PPUSH
20475: CALL_OW 111
20479: GO 20421
20481: POP
20482: POP
// end ;
20483: LD_VAR 0 2
20487: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
20488: LD_INT 0
20490: PPUSH
20491: PPUSH
20492: PPUSH
20493: PPUSH
20494: PPUSH
20495: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
20496: LD_VAR 0 1
20500: PPUSH
20501: CALL_OW 302
20505: NOT
20506: PUSH
20507: LD_VAR 0 2
20511: PPUSH
20512: CALL_OW 302
20516: NOT
20517: OR
20518: PUSH
20519: LD_VAR 0 2
20523: PPUSH
20524: CALL_OW 313
20528: PUSH
20529: LD_INT 6
20531: EQUAL
20532: OR
20533: IFFALSE 20537
// exit ;
20535: GO 20754
// btype := GetBType ( building ) ;
20537: LD_ADDR_VAR 0 8
20541: PUSH
20542: LD_VAR 0 2
20546: PPUSH
20547: CALL_OW 266
20551: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
20552: LD_VAR 0 8
20556: PUSH
20557: LD_INT 0
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: LD_INT 2
20565: PUSH
20566: LD_INT 4
20568: PUSH
20569: LD_INT 5
20571: PUSH
20572: LD_INT 3
20574: PUSH
20575: LD_INT 6
20577: PUSH
20578: LD_INT 7
20580: PUSH
20581: LD_INT 8
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: IN
20595: NOT
20596: IFFALSE 20600
// exit ;
20598: GO 20754
// x := GetX ( building ) ;
20600: LD_ADDR_VAR 0 4
20604: PUSH
20605: LD_VAR 0 2
20609: PPUSH
20610: CALL_OW 250
20614: ST_TO_ADDR
// y := GetY ( building ) ;
20615: LD_ADDR_VAR 0 5
20619: PUSH
20620: LD_VAR 0 2
20624: PPUSH
20625: CALL_OW 251
20629: ST_TO_ADDR
// d := GetDir ( building ) ;
20630: LD_ADDR_VAR 0 6
20634: PUSH
20635: LD_VAR 0 2
20639: PPUSH
20640: CALL_OW 254
20644: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
20645: LD_ADDR_VAR 0 7
20649: PUSH
20650: LD_VAR 0 4
20654: PPUSH
20655: LD_VAR 0 6
20659: PPUSH
20660: LD_INT 3
20662: PPUSH
20663: CALL_OW 272
20667: PUSH
20668: LD_VAR 0 5
20672: PPUSH
20673: LD_VAR 0 6
20677: PPUSH
20678: LD_INT 3
20680: PPUSH
20681: CALL_OW 273
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
20690: LD_VAR 0 7
20694: PUSH
20695: LD_INT 1
20697: ARRAY
20698: PPUSH
20699: LD_VAR 0 7
20703: PUSH
20704: LD_INT 2
20706: ARRAY
20707: PPUSH
20708: CALL_OW 488
20712: NOT
20713: IFFALSE 20717
// exit ;
20715: GO 20754
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
20717: LD_ADDR_VAR 0 3
20721: PUSH
20722: LD_VAR 0 1
20726: PPUSH
20727: LD_VAR 0 7
20731: PUSH
20732: LD_INT 1
20734: ARRAY
20735: PPUSH
20736: LD_VAR 0 7
20740: PUSH
20741: LD_INT 2
20743: ARRAY
20744: PPUSH
20745: CALL_OW 297
20749: PUSH
20750: LD_INT 4
20752: LESS
20753: ST_TO_ADDR
// end ;
20754: LD_VAR 0 3
20758: RET
// export function PlaceExplosives ( building ) ; begin
20759: LD_INT 0
20761: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
20762: LD_ADDR_EXP 29
20766: PUSH
20767: LD_EXP 29
20771: PPUSH
20772: LD_VAR 0 1
20776: PPUSH
20777: CALL 67203 0 2
20781: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
20782: LD_VAR 0 1
20786: PPUSH
20787: CALL_OW 250
20791: PPUSH
20792: LD_VAR 0 1
20796: PPUSH
20797: CALL_OW 251
20801: PPUSH
20802: LD_STRING PlantBomb
20804: PPUSH
20805: CALL_OW 366
// end ;
20809: LD_VAR 0 2
20813: RET
// export function CreateNature ; var i ; begin
20814: LD_INT 0
20816: PPUSH
20817: PPUSH
// PrepareFrog ;
20818: CALL 63680 0 0
// for i := 1 to 3 do
20822: LD_ADDR_VAR 0 2
20826: PUSH
20827: DOUBLE
20828: LD_INT 1
20830: DEC
20831: ST_TO_ADDR
20832: LD_INT 3
20834: PUSH
20835: FOR_TO
20836: IFFALSE 20855
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
20838: CALL_OW 44
20842: PPUSH
20843: LD_INT 24
20845: PPUSH
20846: LD_INT 0
20848: PPUSH
20849: CALL_OW 49
20853: GO 20835
20855: POP
20856: POP
// end ;
20857: LD_VAR 0 1
20861: RET
// export function MarkBuilding ( building , marker ) ; begin
20862: LD_INT 0
20864: PPUSH
// if marker then
20865: LD_VAR 0 2
20869: IFFALSE 20916
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
20871: LD_VAR 0 1
20875: PPUSH
20876: CALL_OW 250
20880: PPUSH
20881: LD_VAR 0 1
20885: PPUSH
20886: CALL_OW 251
20890: PPUSH
20891: LD_INT 2
20893: PPUSH
20894: LD_INT 3
20896: NEG
20897: PPUSH
20898: CALL_OW 330
// SetBName ( building , target ) ;
20902: LD_VAR 0 1
20906: PPUSH
20907: LD_STRING target
20909: PPUSH
20910: CALL_OW 500
// end else
20914: GO 20955
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
20916: LD_VAR 0 1
20920: PPUSH
20921: CALL_OW 250
20925: PPUSH
20926: LD_VAR 0 1
20930: PPUSH
20931: CALL_OW 251
20935: PPUSH
20936: LD_INT 2
20938: PPUSH
20939: CALL_OW 331
// SetBName ( building ,  ) ;
20943: LD_VAR 0 1
20947: PPUSH
20948: LD_STRING 
20950: PPUSH
20951: CALL_OW 500
// end ; end ; end_of_file
20955: LD_VAR 0 3
20959: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
20960: LD_INT 0
20962: PPUSH
// lockerCodeValid := false ;
20963: LD_ADDR_EXP 72
20967: PUSH
20968: LD_INT 0
20970: ST_TO_ADDR
// if not step then
20971: LD_LOC 1
20975: NOT
20976: IFFALSE 20986
// step := 1 ;
20978: LD_ADDR_LOC 1
20982: PUSH
20983: LD_INT 1
20985: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
20986: LD_STRING HEscape
20988: PUSH
20989: LD_LOC 1
20993: STR
20994: PPUSH
20995: CALL_OW 97
20999: PUSH
21000: LD_INT 1
21002: DOUBLE
21003: EQUAL
21004: IFTRUE 21008
21006: GO 21015
21008: POP
// LockerMinigameSearch ; 2 :
21009: CALL 21048 0 0
21013: GO 21031
21015: LD_INT 2
21017: DOUBLE
21018: EQUAL
21019: IFTRUE 21023
21021: GO 21030
21023: POP
// LockerMinigameSetCode ; end ;
21024: CALL 21122 0 0
21028: GO 21031
21030: POP
// if lockerCodeValid then
21031: LD_EXP 72
21035: IFFALSE 21039
// exit ;
21037: GO 21043
// StartLockerMinigame ;
21039: CALL 20960 0 0
// end ;
21043: LD_VAR 0 1
21047: RET
// function LockerMinigameSearch ; begin
21048: LD_INT 0
21050: PPUSH
// if code then
21051: LD_LOC 2
21055: IFFALSE 21071
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
21057: LD_EXP 46
21061: PPUSH
21062: LD_STRING DH-Escape-3-Hint-0
21064: PPUSH
21065: CALL_OW 88
// exit ;
21069: GO 21117
// end ; Randomize ;
21071: CALL_OW 10
// code := rand ( 1 , 5 ) ;
21075: LD_ADDR_LOC 2
21079: PUSH
21080: LD_INT 1
21082: PPUSH
21083: LD_INT 5
21085: PPUSH
21086: CALL_OW 12
21090: ST_TO_ADDR
// step := 2 ;
21091: LD_ADDR_LOC 1
21095: PUSH
21096: LD_INT 2
21098: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
21099: LD_EXP 46
21103: PPUSH
21104: LD_STRING DH-Escape-3-Hint-
21106: PUSH
21107: LD_LOC 2
21111: STR
21112: PPUSH
21113: CALL_OW 88
// end ;
21117: LD_VAR 0 1
21121: RET
// function LockerMinigameSetCode ; begin
21122: LD_INT 0
21124: PPUSH
// if not code then
21125: LD_LOC 2
21129: NOT
21130: IFFALSE 21140
// code := 0 ;
21132: LD_ADDR_LOC 2
21136: PUSH
21137: LD_INT 0
21139: ST_TO_ADDR
// lockerBusy := true ;
21140: LD_ADDR_EXP 73
21144: PUSH
21145: LD_INT 1
21147: ST_TO_ADDR
// InGameOff ;
21148: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
21152: LD_STRING initLockerMinigame("
21154: PUSH
21155: LD_LOC 2
21159: STR
21160: PUSH
21161: LD_STRING ")
21163: STR
21164: PPUSH
21165: CALL_OW 559
// step := 3 ;
21169: LD_ADDR_LOC 1
21173: PUSH
21174: LD_INT 3
21176: ST_TO_ADDR
// repeat wait ( 1 ) ;
21177: LD_INT 1
21179: PPUSH
21180: CALL_OW 67
// until not lockerBusy ;
21184: LD_EXP 73
21188: NOT
21189: IFFALSE 21177
// InGameOn ;
21191: CALL_OW 8
// if not lockerCodeValid then
21195: LD_EXP 72
21199: NOT
21200: IFFALSE 21226
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
21202: LD_EXP 46
21206: PPUSH
21207: LD_STRING DH-Escape-3-Fail-
21209: PUSH
21210: LD_INT 1
21212: PPUSH
21213: LD_INT 2
21215: PPUSH
21216: CALL_OW 12
21220: STR
21221: PPUSH
21222: CALL_OW 88
// end ; end_of_file
21226: LD_VAR 0 1
21230: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
21231: LD_VAR 0 2
21235: PUSH
21236: LD_INT 102
21238: EQUAL
21239: IFFALSE 21261
// begin lockerBusy := false ;
21241: LD_ADDR_EXP 73
21245: PUSH
21246: LD_INT 0
21248: ST_TO_ADDR
// lockerCodeValid := p3 ;
21249: LD_ADDR_EXP 72
21253: PUSH
21254: LD_VAR 0 3
21258: ST_TO_ADDR
// end else
21259: GO 21315
// if p2 = 103 then
21261: LD_VAR 0 2
21265: PUSH
21266: LD_INT 103
21268: EQUAL
21269: IFFALSE 21281
// begin weatherBusy := false ;
21271: LD_ADDR_EXP 37
21275: PUSH
21276: LD_INT 0
21278: ST_TO_ADDR
// end else
21279: GO 21315
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
21281: LD_VAR 0 1
21285: PPUSH
21286: LD_VAR 0 2
21290: PPUSH
21291: LD_VAR 0 3
21295: PPUSH
21296: LD_VAR 0 4
21300: PPUSH
21301: LD_VAR 0 5
21305: PPUSH
21306: LD_VAR 0 6
21310: PPUSH
21311: CALL 72459 0 6
// end ;
21315: PPOPN 6
21317: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
21318: LD_STRING killGameMusic();
21320: PPUSH
21321: CALL_OW 559
// PlayOriginalMusic ;
21325: CALL 93696 0 0
// SOS_MapStart ( ) ;
21329: CALL 72346 0 0
// end ; end_of_file
21333: PPOPN 1
21335: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
21336: LD_EXP 17
21340: NOT
21341: PUSH
21342: LD_EXP 71
21346: AND
21347: IFFALSE 21927
21349: GO 21351
21351: DISABLE
21352: LD_INT 0
21354: PPUSH
21355: PPUSH
21356: PPUSH
21357: PPUSH
21358: PPUSH
// begin enable ;
21359: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
21360: LD_ADDR_VAR 0 3
21364: PUSH
21365: LD_INT 26
21367: PUSH
21368: LD_INT 27
21370: PUSH
21371: LD_INT 28
21373: PUSH
21374: LD_INT 29
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 30
21385: PUSH
21386: LD_INT 31
21388: PUSH
21389: LD_INT 32
21391: PUSH
21392: LD_INT 33
21394: PUSH
21395: LD_INT 34
21397: PUSH
21398: LD_INT 35
21400: PUSH
21401: LD_INT 36
21403: PUSH
21404: LD_INT 37
21406: PUSH
21407: LD_INT 38
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 39
21423: PUSH
21424: LD_INT 40
21426: PUSH
21427: LD_INT 41
21429: PUSH
21430: LD_INT 42
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 43
21441: PUSH
21442: LD_INT 44
21444: PUSH
21445: LD_INT 45
21447: PUSH
21448: LD_INT 46
21450: PUSH
21451: LD_INT 47
21453: PUSH
21454: LD_INT 46
21456: PUSH
21457: LD_INT 45
21459: PUSH
21460: LD_INT 44
21462: PUSH
21463: LD_INT 43
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: ST_TO_ADDR
// for i in ruPatrol do
21483: LD_ADDR_VAR 0 1
21487: PUSH
21488: LD_EXP 71
21492: PUSH
21493: FOR_IN
21494: IFFALSE 21925
// begin if not IsOk ( i ) then
21496: LD_VAR 0 1
21500: PPUSH
21501: CALL_OW 302
21505: NOT
21506: IFFALSE 21510
// continue ;
21508: GO 21493
// if Count ( ruKilledHex ) then
21510: LD_EXP 43
21514: PPUSH
21515: CALL 31594 0 1
21519: IFFALSE 21592
// for j in ruKilledHex do
21521: LD_ADDR_VAR 0 2
21525: PUSH
21526: LD_EXP 43
21530: PUSH
21531: FOR_IN
21532: IFFALSE 21590
// if GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) < 6 then
21534: LD_VAR 0 1
21538: PPUSH
21539: LD_VAR 0 2
21543: PUSH
21544: LD_INT 1
21546: ARRAY
21547: PPUSH
21548: LD_VAR 0 2
21552: PUSH
21553: LD_INT 2
21555: ARRAY
21556: PPUSH
21557: CALL_OW 297
21561: PUSH
21562: LD_INT 6
21564: LESS
21565: IFFALSE 21588
// begin Query ( QBody ) ;
21567: LD_STRING QBody
21569: PPUSH
21570: CALL_OW 97
// isAlarm := true ;
21574: LD_ADDR_EXP 17
21578: PUSH
21579: LD_INT 1
21581: ST_TO_ADDR
// exit ;
21582: POP
21583: POP
21584: POP
21585: POP
21586: GO 21927
// end ;
21588: GO 21531
21590: POP
21591: POP
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
21592: LD_ADDR_VAR 0 5
21596: PUSH
21597: LD_INT 22
21599: PUSH
21600: LD_INT 2
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 21
21609: PUSH
21610: LD_INT 1
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 91
21619: PUSH
21620: LD_VAR 0 1
21624: PUSH
21625: LD_INT 7
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: LIST
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: LIST
21637: PPUSH
21638: CALL_OW 69
21642: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
21643: LD_INT 2
21645: PPUSH
21646: LD_VAR 0 1
21650: PPUSH
21651: CALL_OW 292
21655: PUSH
21656: LD_VAR 0 5
21660: AND
21661: IFFALSE 21811
// begin if ( hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 ) or blockPatrolThread then
21663: LD_EXP 30
21667: PUSH
21668: LD_VAR 0 1
21672: PPUSH
21673: LD_EXP 66
21677: PPUSH
21678: CALL_OW 296
21682: PUSH
21683: LD_INT 16
21685: LESS
21686: AND
21687: PUSH
21688: LD_EXP 38
21692: OR
21693: IFFALSE 21697
// continue ;
21695: GO 21493
// for j in tmp do
21697: LD_ADDR_VAR 0 2
21701: PUSH
21702: LD_VAR 0 5
21706: PUSH
21707: FOR_IN
21708: IFFALSE 21769
// tmp := tmp union FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , j , 4 ] ] ) ;
21710: LD_ADDR_VAR 0 5
21714: PUSH
21715: LD_VAR 0 5
21719: PUSH
21720: LD_INT 22
21722: PUSH
21723: LD_INT 2
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 21
21732: PUSH
21733: LD_INT 1
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 91
21742: PUSH
21743: LD_VAR 0 2
21747: PUSH
21748: LD_INT 4
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: LIST
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: LIST
21760: PPUSH
21761: CALL_OW 69
21765: UNION
21766: ST_TO_ADDR
21767: GO 21707
21769: POP
21770: POP
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
21771: LD_VAR 0 1
21775: PPUSH
21776: LD_VAR 0 5
21780: PPUSH
21781: LD_VAR 0 1
21785: PPUSH
21786: CALL_OW 74
21790: PPUSH
21791: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
21795: LD_VAR 0 1
21799: PPUSH
21800: LD_VAR 0 5
21804: PPUSH
21805: CALL 21930 0 2
// continue ;
21809: GO 21493
// end ; if HasTask ( i ) then
21811: LD_VAR 0 1
21815: PPUSH
21816: CALL_OW 314
21820: IFFALSE 21824
// continue ;
21822: GO 21493
// tag := GetTag ( i ) ;
21824: LD_ADDR_VAR 0 4
21828: PUSH
21829: LD_VAR 0 1
21833: PPUSH
21834: CALL_OW 110
21838: ST_TO_ADDR
// if not tag then
21839: LD_VAR 0 4
21843: NOT
21844: IFFALSE 21857
// begin ComHold ( i ) ;
21846: LD_VAR 0 1
21850: PPUSH
21851: CALL_OW 140
// continue ;
21855: GO 21493
// end ; for j := 1 to points [ tag ] do
21857: LD_ADDR_VAR 0 2
21861: PUSH
21862: DOUBLE
21863: LD_INT 1
21865: DEC
21866: ST_TO_ADDR
21867: LD_VAR 0 3
21871: PUSH
21872: LD_VAR 0 4
21876: ARRAY
21877: PUSH
21878: FOR_TO
21879: IFFALSE 21921
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
21881: LD_VAR 0 1
21885: PPUSH
21886: LD_VAR 0 3
21890: PUSH
21891: LD_VAR 0 4
21895: ARRAY
21896: PUSH
21897: LD_VAR 0 2
21901: ARRAY
21902: PPUSH
21903: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
21907: LD_VAR 0 1
21911: PPUSH
21912: LD_INT 70
21914: PPUSH
21915: CALL_OW 202
// end ;
21919: GO 21878
21921: POP
21922: POP
// end ;
21923: GO 21493
21925: POP
21926: POP
// end ;
21927: PPOPN 5
21929: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
21930: LD_INT 0
21932: PPUSH
21933: PPUSH
21934: PPUSH
// if UnitFilter ( units , [ [ f_nation , nation_arabian ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
21935: LD_VAR 0 2
21939: PPUSH
21940: LD_INT 23
21942: PUSH
21943: LD_INT 2
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 2
21952: PUSH
21953: LD_INT 25
21955: PUSH
21956: LD_INT 1
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 25
21965: PUSH
21966: LD_INT 11
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 25
21975: PUSH
21976: LD_INT 34
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 25
21985: PUSH
21986: LD_INT 32
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PPUSH
22004: CALL_OW 72
22008: IFFALSE 22121
// begin blockPatrolThread := true ;
22010: LD_ADDR_EXP 38
22014: PUSH
22015: LD_INT 1
22017: ST_TO_ADDR
// DialogueOn ;
22018: CALL_OW 6
// case GetSex ( guard ) of sex_male :
22022: LD_VAR 0 1
22026: PPUSH
22027: CALL_OW 258
22031: PUSH
22032: LD_INT 1
22034: DOUBLE
22035: EQUAL
22036: IFTRUE 22040
22038: GO 22055
22040: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22041: LD_VAR 0 1
22045: PPUSH
22046: LD_STRING DRum-Fail-3
22048: PPUSH
22049: CALL_OW 88
22053: GO 22079
22055: LD_INT 2
22057: DOUBLE
22058: EQUAL
22059: IFTRUE 22063
22061: GO 22078
22063: POP
// Say ( guard , DRuf-Fail-3 ) ; end ;
22064: LD_VAR 0 1
22068: PPUSH
22069: LD_STRING DRuf-Fail-3
22071: PPUSH
22072: CALL_OW 88
22076: GO 22079
22078: POP
// DialogueOff ;
22079: CALL_OW 7
// wait ( 0 0$5 ) ;
22083: LD_INT 175
22085: PPUSH
22086: CALL_OW 67
// if IsOk ( guard ) then
22090: LD_VAR 0 1
22094: PPUSH
22095: CALL_OW 302
22099: IFFALSE 22111
// isAlarm := true else
22101: LD_ADDR_EXP 17
22105: PUSH
22106: LD_INT 1
22108: ST_TO_ADDR
22109: GO 22119
// blockPatrolThread := false ;
22111: LD_ADDR_EXP 38
22115: PUSH
22116: LD_INT 0
22118: ST_TO_ADDR
// exit ;
22119: GO 23122
// end ; if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
22121: LD_VAR 0 2
22125: PPUSH
22126: LD_INT 23
22128: PUSH
22129: LD_INT 3
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PPUSH
22136: CALL_OW 72
22140: PUSH
22141: LD_VAR 0 2
22145: PPUSH
22146: LD_INT 95
22148: PUSH
22149: LD_INT 61
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PPUSH
22156: CALL_OW 72
22160: OR
22161: IFFALSE 22165
// exit ;
22163: GO 23122
// DialogueOn ;
22165: CALL_OW 6
// blockPatrolThread := true ;
22169: LD_ADDR_EXP 38
22173: PUSH
22174: LD_INT 1
22176: ST_TO_ADDR
// CenterNowOnUnits ( guard ) ;
22177: LD_VAR 0 1
22181: PPUSH
22182: CALL_OW 87
// if not Heike in units then
22186: LD_EXP 46
22190: PUSH
22191: LD_VAR 0 2
22195: IN
22196: NOT
22197: IFFALSE 22563
// begin case GetSex ( guard ) of sex_male :
22199: LD_VAR 0 1
22203: PPUSH
22204: CALL_OW 258
22208: PUSH
22209: LD_INT 1
22211: DOUBLE
22212: EQUAL
22213: IFTRUE 22217
22215: GO 22232
22217: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
22218: LD_VAR 0 1
22222: PPUSH
22223: LD_STRING DRum-Guard-1
22225: PPUSH
22226: CALL_OW 88
22230: GO 22256
22232: LD_INT 2
22234: DOUBLE
22235: EQUAL
22236: IFTRUE 22240
22238: GO 22255
22240: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
22241: LD_VAR 0 1
22245: PPUSH
22246: LD_STRING DRuf-Guard-1
22248: PPUSH
22249: CALL_OW 88
22253: GO 22256
22255: POP
// case Query ( SurrenderInfoPeople ) of 1 :
22256: LD_STRING SurrenderInfoPeople
22258: PPUSH
22259: CALL_OW 97
22263: PUSH
22264: LD_INT 1
22266: DOUBLE
22267: EQUAL
22268: IFTRUE 22272
22270: GO 22381
22272: POP
// begin Query ( CaughtSquadInfo ) ;
22273: LD_STRING CaughtSquadInfo
22275: PPUSH
22276: CALL_OW 97
// for i in units do
22280: LD_ADDR_VAR 0 4
22284: PUSH
22285: LD_VAR 0 2
22289: PUSH
22290: FOR_IN
22291: IFFALSE 22348
// begin if Carry ( i ) then
22293: LD_VAR 0 4
22297: PPUSH
22298: CALL_OW 281
22302: IFFALSE 22319
// SetCargo ( i , mat_cans , 0 ) ;
22304: LD_VAR 0 4
22308: PPUSH
22309: LD_INT 1
22311: PPUSH
22312: LD_INT 0
22314: PPUSH
22315: CALL_OW 290
// SetSide ( i , 5 ) ;
22319: LD_VAR 0 4
22323: PPUSH
22324: LD_INT 5
22326: PPUSH
22327: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
22331: LD_VAR 0 4
22335: PPUSH
22336: LD_INT 113
22338: PPUSH
22339: LD_INT 17
22341: PPUSH
22342: CALL_OW 111
// end ;
22346: GO 22290
22348: POP
22349: POP
// ComMoveXY ( guard , 117 , 25 ) ;
22350: LD_VAR 0 1
22354: PPUSH
22355: LD_INT 117
22357: PPUSH
22358: LD_INT 25
22360: PPUSH
22361: CALL_OW 111
// DialogueOff ;
22365: CALL_OW 7
// blockPatrolThread := false ;
22369: LD_ADDR_EXP 38
22373: PUSH
22374: LD_INT 0
22376: ST_TO_ADDR
// exit ;
22377: GO 23122
// end ; 2 :
22379: GO 22563
22381: LD_INT 2
22383: DOUBLE
22384: EQUAL
22385: IFTRUE 22389
22387: GO 22562
22389: POP
// begin DialogueOff ;
22390: CALL_OW 7
// wait ( 0 0$2 ) ;
22394: LD_INT 70
22396: PPUSH
22397: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22401: LD_INT 6
22403: PPUSH
22404: LD_INT 2
22406: PPUSH
22407: LD_INT 2
22409: PPUSH
22410: LD_INT 1
22412: PPUSH
22413: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
22417: LD_VAR 0 1
22421: PPUSH
22422: LD_VAR 0 2
22426: PUSH
22427: LD_INT 1
22429: ARRAY
22430: PPUSH
22431: CALL_OW 115
// case GetSex ( guard ) of sex_male :
22435: LD_VAR 0 1
22439: PPUSH
22440: CALL_OW 258
22444: PUSH
22445: LD_INT 1
22447: DOUBLE
22448: EQUAL
22449: IFTRUE 22453
22451: GO 22468
22453: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22454: LD_VAR 0 1
22458: PPUSH
22459: LD_STRING DRum-Fail-3
22461: PPUSH
22462: CALL_OW 88
22466: GO 22492
22468: LD_INT 2
22470: DOUBLE
22471: EQUAL
22472: IFTRUE 22476
22474: GO 22491
22476: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
22477: LD_VAR 0 1
22481: PPUSH
22482: LD_STRING DRum-Fail-3
22484: PPUSH
22485: CALL_OW 88
22489: GO 22492
22491: POP
// wait ( 0 0$5 ) ;
22492: LD_INT 175
22494: PPUSH
22495: CALL_OW 67
// if IsOk ( guard ) then
22499: LD_VAR 0 1
22503: PPUSH
22504: CALL_OW 302
22508: IFFALSE 22520
// isAlarm := true else
22510: LD_ADDR_EXP 17
22514: PUSH
22515: LD_INT 1
22517: ST_TO_ADDR
22518: GO 22552
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
22520: LD_INT 6
22522: PPUSH
22523: LD_INT 2
22525: PPUSH
22526: LD_INT 0
22528: PPUSH
22529: LD_INT 1
22531: PPUSH
22532: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
22536: LD_INT 3
22538: PPUSH
22539: LD_INT 2
22541: PPUSH
22542: LD_INT 0
22544: PPUSH
22545: LD_INT 1
22547: PPUSH
22548: CALL_OW 80
// end ; blockPatrolThread := false ;
22552: LD_ADDR_EXP 38
22556: PUSH
22557: LD_INT 0
22559: ST_TO_ADDR
// end ; end ;
22560: GO 22563
22562: POP
// end ; if Carry ( Heike ) then
22563: LD_EXP 46
22567: PPUSH
22568: CALL_OW 281
22572: IFFALSE 22648
// begin case GetSex ( guard ) of sex_male :
22574: LD_VAR 0 1
22578: PPUSH
22579: CALL_OW 258
22583: PUSH
22584: LD_INT 1
22586: DOUBLE
22587: EQUAL
22588: IFTRUE 22592
22590: GO 22607
22592: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
22593: LD_VAR 0 1
22597: PPUSH
22598: LD_STRING DRum-FoodFail-1
22600: PPUSH
22601: CALL_OW 88
22605: GO 22631
22607: LD_INT 2
22609: DOUBLE
22610: EQUAL
22611: IFTRUE 22615
22613: GO 22630
22615: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
22616: LD_VAR 0 1
22620: PPUSH
22621: LD_STRING DRuf-FoodFail-2
22623: PPUSH
22624: CALL_OW 88
22628: GO 22631
22630: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
22631: LD_EXP 46
22635: PPUSH
22636: LD_INT 1
22638: PPUSH
22639: LD_INT 0
22641: PPUSH
22642: CALL_OW 290
// end else
22646: GO 22705
// begin case GetSex ( guard ) of sex_male :
22648: LD_VAR 0 1
22652: PPUSH
22653: CALL_OW 258
22657: PUSH
22658: LD_INT 1
22660: DOUBLE
22661: EQUAL
22662: IFTRUE 22666
22664: GO 22681
22666: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
22667: LD_VAR 0 1
22671: PPUSH
22672: LD_STRING DRum-Seen-1
22674: PPUSH
22675: CALL_OW 88
22679: GO 22705
22681: LD_INT 2
22683: DOUBLE
22684: EQUAL
22685: IFTRUE 22689
22687: GO 22704
22689: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
22690: LD_VAR 0 1
22694: PPUSH
22695: LD_STRING DRuf-Seen-1
22697: PPUSH
22698: CALL_OW 88
22702: GO 22705
22704: POP
// end ; alone := ( units = 1 ) ;
22705: LD_ADDR_VAR 0 5
22709: PUSH
22710: LD_VAR 0 2
22714: PUSH
22715: LD_INT 1
22717: EQUAL
22718: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
22719: LD_STRING SurrenderInfo
22721: PPUSH
22722: CALL_OW 97
22726: PUSH
22727: LD_INT 1
22729: DOUBLE
22730: EQUAL
22731: IFTRUE 22735
22733: GO 22924
22735: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
22736: LD_INT 23
22738: PPUSH
22739: CALL_OW 87
// RemoveUnit ( Heike ) ;
22743: LD_EXP 46
22747: PPUSH
22748: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
22752: LD_EXP 46
22756: PPUSH
22757: LD_INT 23
22759: PPUSH
22760: CALL_OW 52
// if not alone then
22764: LD_VAR 0 5
22768: NOT
22769: IFFALSE 22836
// for i in units diff Heike do
22771: LD_ADDR_VAR 0 4
22775: PUSH
22776: LD_VAR 0 2
22780: PUSH
22781: LD_EXP 46
22785: DIFF
22786: PUSH
22787: FOR_IN
22788: IFFALSE 22834
// begin RemoveUnit ( i ) ;
22790: LD_VAR 0 4
22794: PPUSH
22795: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
22799: LD_VAR 0 4
22803: PPUSH
22804: LD_INT 114
22806: PPUSH
22807: LD_INT 17
22809: PPUSH
22810: LD_INT 10
22812: PPUSH
22813: LD_INT 0
22815: PPUSH
22816: CALL_OW 50
// SetSide ( i , 5 ) ;
22820: LD_VAR 0 4
22824: PPUSH
22825: LD_INT 5
22827: PPUSH
22828: CALL_OW 235
// end ;
22832: GO 22787
22834: POP
22835: POP
// wait ( 0 0$0.3 ) ;
22836: LD_INT 10
22838: PPUSH
22839: CALL_OW 67
// if alone then
22843: LD_VAR 0 5
22847: IFFALSE 22858
// Query ( CaughtInfoAlone ) else
22849: LD_STRING CaughtInfoAlone
22851: PPUSH
22852: CALL_OW 97
22856: GO 22865
// Query ( CaughtInfo ) ;
22858: LD_STRING CaughtInfo
22860: PPUSH
22861: CALL_OW 97
// wait ( 0 0$2 ) ;
22865: LD_INT 70
22867: PPUSH
22868: CALL_OW 67
// StartLockerMinigame ;
22872: CALL 20960 0 0
// Say ( Heike , DH-Reset ) ;
22876: LD_EXP 46
22880: PPUSH
22881: LD_STRING DH-Reset
22883: PPUSH
22884: CALL_OW 88
// DialogueOff ;
22888: CALL_OW 7
// InGameOff ;
22892: CALL_OW 9
// blockPatrolThread := false ;
22896: LD_ADDR_EXP 38
22900: PUSH
22901: LD_INT 0
22903: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
22904: LD_EXP 46
22908: PPUSH
22909: CALL_OW 122
// ComFree ( guard ) ;
22913: LD_VAR 0 1
22917: PPUSH
22918: CALL_OW 139
// end ; 2 :
22922: GO 23114
22924: LD_INT 2
22926: DOUBLE
22927: EQUAL
22928: IFTRUE 22932
22930: GO 23113
22932: POP
// begin Say ( Heike , DH-Guard-2 ) ;
22933: LD_EXP 46
22937: PPUSH
22938: LD_STRING DH-Guard-2
22940: PPUSH
22941: CALL_OW 88
// DialogueOff ;
22945: CALL_OW 7
// wait ( 0 0$2 ) ;
22949: LD_INT 70
22951: PPUSH
22952: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22956: LD_INT 6
22958: PPUSH
22959: LD_INT 2
22961: PPUSH
22962: LD_INT 2
22964: PPUSH
22965: LD_INT 1
22967: PPUSH
22968: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
22972: LD_VAR 0 1
22976: PPUSH
22977: LD_EXP 46
22981: PPUSH
22982: CALL_OW 115
// case GetSex ( guard ) of sex_male :
22986: LD_VAR 0 1
22990: PPUSH
22991: CALL_OW 258
22995: PUSH
22996: LD_INT 1
22998: DOUBLE
22999: EQUAL
23000: IFTRUE 23004
23002: GO 23019
23004: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
23005: LD_VAR 0 1
23009: PPUSH
23010: LD_STRING DRum-Fail-3
23012: PPUSH
23013: CALL_OW 88
23017: GO 23043
23019: LD_INT 2
23021: DOUBLE
23022: EQUAL
23023: IFTRUE 23027
23025: GO 23042
23027: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
23028: LD_VAR 0 1
23032: PPUSH
23033: LD_STRING DRum-Fail-3
23035: PPUSH
23036: CALL_OW 88
23040: GO 23043
23042: POP
// wait ( 0 0$5 ) ;
23043: LD_INT 175
23045: PPUSH
23046: CALL_OW 67
// if IsOk ( guard ) then
23050: LD_VAR 0 1
23054: PPUSH
23055: CALL_OW 302
23059: IFFALSE 23071
// isAlarm := true else
23061: LD_ADDR_EXP 17
23065: PUSH
23066: LD_INT 1
23068: ST_TO_ADDR
23069: GO 23103
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
23071: LD_INT 6
23073: PPUSH
23074: LD_INT 2
23076: PPUSH
23077: LD_INT 0
23079: PPUSH
23080: LD_INT 1
23082: PPUSH
23083: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
23087: LD_INT 3
23089: PPUSH
23090: LD_INT 2
23092: PPUSH
23093: LD_INT 0
23095: PPUSH
23096: LD_INT 1
23098: PPUSH
23099: CALL_OW 80
// end ; blockPatrolThread := false ;
23103: LD_ADDR_EXP 38
23107: PUSH
23108: LD_INT 0
23110: ST_TO_ADDR
// end ; end ;
23111: GO 23114
23113: POP
// blockPatrolThread := false ;
23114: LD_ADDR_EXP 38
23118: PUSH
23119: LD_INT 0
23121: ST_TO_ADDR
// end ;
23122: LD_VAR 0 3
23126: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
23127: LD_EXP 14
23131: PPUSH
23132: LD_INT 22
23134: PUSH
23135: LD_INT 5
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 3
23144: PUSH
23145: LD_INT 101
23147: PUSH
23148: LD_INT 6
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 92
23161: PUSH
23162: LD_INT 113
23164: PUSH
23165: LD_INT 16
23167: PUSH
23168: LD_INT 12
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 91
23179: PUSH
23180: LD_EXP 46
23184: PUSH
23185: LD_INT 6
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: LIST
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: PPUSH
23199: CALL_OW 72
23203: PUSH
23204: LD_EXP 30
23208: NOT
23209: AND
23210: IFFALSE 23315
23212: GO 23214
23214: DISABLE
23215: LD_INT 0
23217: PPUSH
// begin enable ;
23218: ENABLE
// DialogueOn ;
23219: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
23223: LD_EXP 46
23227: PPUSH
23228: LD_STRING DH-Join-
23230: PUSH
23231: LD_INT 1
23233: PPUSH
23234: LD_INT 3
23236: PPUSH
23237: CALL_OW 12
23241: STR
23242: PPUSH
23243: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
23247: LD_ADDR_VAR 0 1
23251: PUSH
23252: LD_EXP 14
23256: PPUSH
23257: LD_INT 22
23259: PUSH
23260: LD_INT 5
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: LD_INT 91
23269: PUSH
23270: LD_EXP 46
23274: PUSH
23275: LD_INT 10
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: LIST
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PPUSH
23287: CALL_OW 72
23291: PUSH
23292: FOR_IN
23293: IFFALSE 23309
// SetSide ( i , 2 ) ;
23295: LD_VAR 0 1
23299: PPUSH
23300: LD_INT 2
23302: PPUSH
23303: CALL_OW 235
23307: GO 23292
23309: POP
23310: POP
// DialogueOff ;
23311: CALL_OW 7
// end ; end_of_file
23315: PPOPN 1
23317: END
// every 0 0$2 trigger isAlarm and hasNormalScene do var i , points , tmp ;
23318: LD_EXP 17
23322: PUSH
23323: LD_EXP 5
23327: AND
23328: IFFALSE 23629
23330: GO 23332
23332: DISABLE
23333: LD_INT 0
23335: PPUSH
23336: PPUSH
23337: PPUSH
// begin PlaySoundXY ( - 1 , - 1 , alarm ) ;
23338: LD_INT 1
23340: NEG
23341: PPUSH
23342: LD_INT 1
23344: NEG
23345: PPUSH
23346: LD_STRING alarm
23348: PPUSH
23349: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
23353: LD_INT 3
23355: PPUSH
23356: LD_INT 2
23358: PPUSH
23359: LD_INT 2
23361: PPUSH
23362: LD_INT 1
23364: PPUSH
23365: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
23369: LD_INT 6
23371: PPUSH
23372: LD_INT 2
23374: PPUSH
23375: LD_INT 2
23377: PPUSH
23378: LD_INT 1
23380: PPUSH
23381: CALL_OW 80
// DialogueOn ;
23385: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
23389: LD_EXP 46
23393: PPUSH
23394: LD_STRING DH-Alarm-1
23396: PPUSH
23397: CALL_OW 88
// DialogueOff ;
23401: CALL_OW 7
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
23405: LD_ADDR_VAR 0 2
23409: PUSH
23410: LD_INT 107
23412: PUSH
23413: LD_INT 39
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 143
23422: PUSH
23423: LD_INT 33
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 180
23432: PUSH
23433: LD_INT 115
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 96
23442: PUSH
23443: LD_INT 90
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 59
23452: PUSH
23453: LD_INT 52
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 16
23462: PUSH
23463: LD_INT 15
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 90
23472: PUSH
23473: LD_INT 120
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
23489: LD_ADDR_VAR 0 3
23493: PUSH
23494: LD_INT 22
23496: PUSH
23497: LD_INT 6
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 25
23506: PUSH
23507: LD_INT 1
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PPUSH
23518: CALL_OW 69
23522: ST_TO_ADDR
// for i in tmp do
23523: LD_ADDR_VAR 0 1
23527: PUSH
23528: LD_VAR 0 3
23532: PUSH
23533: FOR_IN
23534: IFFALSE 23602
// begin ComExit ( i ) ;
23536: LD_VAR 0 1
23540: PPUSH
23541: CALL 67601 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
23545: LD_VAR 0 1
23549: PPUSH
23550: LD_VAR 0 2
23554: PUSH
23555: LD_VAR 0 1
23559: PUSH
23560: LD_INT 7
23562: MOD
23563: PUSH
23564: LD_INT 1
23566: PLUS
23567: ARRAY
23568: PUSH
23569: LD_INT 1
23571: ARRAY
23572: PPUSH
23573: LD_VAR 0 2
23577: PUSH
23578: LD_VAR 0 1
23582: PUSH
23583: LD_INT 7
23585: MOD
23586: PUSH
23587: LD_INT 1
23589: PLUS
23590: ARRAY
23591: PUSH
23592: LD_INT 2
23594: ARRAY
23595: PPUSH
23596: CALL_OW 174
// end ;
23600: GO 23533
23602: POP
23603: POP
// Explode ;
23604: CALL 23632 0 0
// wait ( 0 0$45 ) ;
23608: LD_INT 1575
23610: PPUSH
23611: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
23615: LD_VAR 0 3
23619: PPUSH
23620: LD_EXP 46
23624: PPUSH
23625: CALL_OW 175
// end ;
23629: PPOPN 3
23631: END
// export function Explode ; var i , x , y , j ; begin
23632: LD_INT 0
23634: PPUSH
23635: PPUSH
23636: PPUSH
23637: PPUSH
23638: PPUSH
// if hasExplosionsInFactory then
23639: LD_EXP 7
23643: IFFALSE 23663
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
23645: LD_ADDR_EXP 29
23649: PUSH
23650: LD_EXP 29
23654: PPUSH
23655: LD_INT 61
23657: PPUSH
23658: CALL 67203 0 2
23662: ST_TO_ADDR
// if explosivePlantedList then
23663: LD_EXP 29
23667: IFFALSE 23815
// begin for i in explosivePlantedList do
23669: LD_ADDR_VAR 0 2
23673: PUSH
23674: LD_EXP 29
23678: PUSH
23679: FOR_IN
23680: IFFALSE 23783
// begin x := GetX ( i ) ;
23682: LD_ADDR_VAR 0 3
23686: PUSH
23687: LD_VAR 0 2
23691: PPUSH
23692: CALL_OW 250
23696: ST_TO_ADDR
// y := GetY ( i ) ;
23697: LD_ADDR_VAR 0 4
23701: PUSH
23702: LD_VAR 0 2
23706: PPUSH
23707: CALL_OW 251
23711: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
23712: LD_ADDR_VAR 0 5
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: LD_INT 3
23722: PUSH
23723: LD_INT 5
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: LIST
23730: PUSH
23731: FOR_IN
23732: IFFALSE 23779
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
23734: LD_VAR 0 3
23738: PPUSH
23739: LD_VAR 0 5
23743: PPUSH
23744: LD_INT 2
23746: PPUSH
23747: CALL_OW 272
23751: PPUSH
23752: LD_VAR 0 4
23756: PPUSH
23757: LD_VAR 0 5
23761: PPUSH
23762: LD_INT 2
23764: PPUSH
23765: CALL_OW 273
23769: PPUSH
23770: LD_INT 1
23772: PPUSH
23773: CALL_OW 453
23777: GO 23731
23779: POP
23780: POP
// end ;
23781: GO 23679
23783: POP
23784: POP
// Say ( Heike , DH-End-2 ) ;
23785: LD_EXP 46
23789: PPUSH
23790: LD_STRING DH-End-2
23792: PPUSH
23793: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
23797: LD_INT 175
23799: PUSH
23800: LD_EXP 29
23804: PPUSH
23805: CALL 31594 0 1
23809: MUL
23810: PPUSH
23811: CALL_OW 67
// end ; if not isAlarm then
23815: LD_EXP 17
23819: NOT
23820: IFFALSE 23830
// isAlarm := true ;
23822: LD_ADDR_EXP 17
23826: PUSH
23827: LD_INT 1
23829: ST_TO_ADDR
// end ;
23830: LD_VAR 0 1
23834: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
23835: LD_INT 22
23837: PUSH
23838: LD_INT 2
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 21
23847: PUSH
23848: LD_INT 2
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 2
23857: PUSH
23858: LD_INT 101
23860: PUSH
23861: LD_INT 3
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 101
23870: PUSH
23871: LD_INT 6
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: LIST
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: LIST
23887: PPUSH
23888: CALL_OW 69
23892: IFFALSE 23905
23894: GO 23896
23896: DISABLE
// isAlarm := true ; end_of_file
23897: LD_ADDR_EXP 17
23901: PUSH
23902: LD_INT 1
23904: ST_TO_ADDR
23905: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
23906: LD_EXP 14
23910: PPUSH
23911: LD_INT 22
23913: PUSH
23914: LD_INT 2
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PPUSH
23921: CALL_OW 72
23925: PUSH
23926: LD_INT 3
23928: GREATER
23929: PUSH
23930: LD_EXP 17
23934: NOT
23935: AND
23936: IFFALSE 27981
23938: GO 23940
23940: DISABLE
23941: LD_INT 0
23943: PPUSH
23944: PPUSH
23945: PPUSH
23946: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
23947: LD_EXP 66
23951: PPUSH
23952: LD_INT 155
23954: PPUSH
23955: LD_INT 68
23957: PPUSH
23958: LD_INT 0
23960: PPUSH
23961: CALL_OW 48
// wait ( 0 0$1 ) ;
23965: LD_INT 35
23967: PPUSH
23968: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23972: LD_INT 35
23974: PPUSH
23975: CALL_OW 67
// if not HasTask ( ruDisturb ) then
23979: LD_EXP 66
23983: PPUSH
23984: CALL_OW 314
23988: NOT
23989: IFFALSE 24005
// ComMoveUnit ( ruDisturb , Heike ) ;
23991: LD_EXP 66
23995: PPUSH
23996: LD_EXP 46
24000: PPUSH
24001: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
24005: LD_EXP 46
24009: PPUSH
24010: LD_EXP 66
24014: PPUSH
24015: CALL_OW 296
24019: PUSH
24020: LD_INT 6
24022: LESS
24023: PUSH
24024: LD_EXP 66
24028: PPUSH
24029: CALL_OW 302
24033: AND
24034: IFFALSE 23972
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24036: LD_EXP 46
24040: PPUSH
24041: CALL_OW 257
24045: PUSH
24046: LD_INT 33
24048: NONEQUAL
24049: PUSH
24050: LD_EXP 14
24054: PPUSH
24055: LD_INT 22
24057: PUSH
24058: LD_INT 2
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 91
24067: PUSH
24068: LD_EXP 66
24072: PUSH
24073: LD_INT 8
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 2
24083: PUSH
24084: LD_INT 25
24086: PUSH
24087: LD_INT 1
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 25
24096: PUSH
24097: LD_INT 11
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 25
24106: PUSH
24107: LD_INT 32
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 25
24116: PUSH
24117: LD_INT 34
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: LIST
24135: PPUSH
24136: CALL_OW 72
24140: OR
24141: IFFALSE 24151
// isAlarm := true ;
24143: LD_ADDR_EXP 17
24147: PUSH
24148: LD_INT 1
24150: ST_TO_ADDR
// if isAlarm then
24151: LD_EXP 17
24155: IFFALSE 24159
// exit ;
24157: GO 27981
// DialogueOn ;
24159: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24163: LD_EXP 66
24167: PPUSH
24168: LD_STRING DMcn-Interrupt-1
24170: PPUSH
24171: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24175: LD_EXP 66
24179: PPUSH
24180: LD_STRING DMcn-Interrupt-2
24182: PPUSH
24183: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
24187: LD_EXP 66
24191: PPUSH
24192: LD_STRING DMcn-Interrupt-3
24194: PPUSH
24195: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
24199: LD_EXP 46
24203: PPUSH
24204: LD_STRING DH-Interrupt-a-4
24206: PPUSH
24207: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
24211: LD_EXP 66
24215: PPUSH
24216: LD_STRING DMcn-Interrupt-a-5
24218: PPUSH
24219: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
24223: LD_EXP 46
24227: PPUSH
24228: LD_STRING DH-Interrupt-a-6
24230: PPUSH
24231: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
24235: LD_EXP 66
24239: PPUSH
24240: LD_STRING DMcn-Interrupt-a-7
24242: PPUSH
24243: CALL_OW 88
// DialogueOff ;
24247: CALL_OW 7
// hasMuchin := true ;
24251: LD_ADDR_EXP 30
24255: PUSH
24256: LD_INT 1
24258: ST_TO_ADDR
// Query ( MuchinInfo ) ;
24259: LD_STRING MuchinInfo
24261: PPUSH
24262: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
24266: LD_STRING M2a
24268: PPUSH
24269: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
24273: LD_INT 105
24275: PPUSH
24276: LD_INT 55
24278: PPUSH
24279: CALL_OW 428
24283: PPUSH
24284: LD_INT 2
24286: PPUSH
24287: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
24291: LD_INT 115
24293: PPUSH
24294: LD_INT 65
24296: PPUSH
24297: CALL_OW 428
24301: PPUSH
24302: LD_INT 2
24304: PPUSH
24305: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
24309: LD_INT 109
24311: PPUSH
24312: LD_INT 59
24314: PPUSH
24315: LD_INT 2
24317: PPUSH
24318: LD_INT 10
24320: NEG
24321: PPUSH
24322: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
24326: LD_INT 109
24328: PPUSH
24329: LD_INT 59
24331: PPUSH
24332: CALL_OW 84
// wait ( 0 0$2 ) ;
24336: LD_INT 70
24338: PPUSH
24339: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
24343: LD_INT 109
24345: PPUSH
24346: LD_INT 59
24348: PPUSH
24349: LD_INT 2
24351: PPUSH
24352: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
24356: LD_INT 35
24358: PPUSH
24359: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24363: LD_EXP 66
24367: PPUSH
24368: LD_EXP 46
24372: PPUSH
24373: CALL_OW 296
24377: PUSH
24378: LD_INT 6
24380: GREATER
24381: IFFALSE 24397
// ComMoveUnit ( ruDisturb , Heike ) ;
24383: LD_EXP 66
24387: PPUSH
24388: LD_EXP 46
24392: PPUSH
24393: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24397: LD_EXP 46
24401: PPUSH
24402: CALL_OW 257
24406: PUSH
24407: LD_INT 33
24409: NONEQUAL
24410: PUSH
24411: LD_EXP 14
24415: PPUSH
24416: LD_INT 22
24418: PUSH
24419: LD_INT 2
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 91
24428: PUSH
24429: LD_EXP 66
24433: PUSH
24434: LD_INT 8
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 2
24444: PUSH
24445: LD_INT 25
24447: PUSH
24448: LD_INT 1
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 25
24457: PUSH
24458: LD_INT 11
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 25
24467: PUSH
24468: LD_INT 32
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 25
24477: PUSH
24478: LD_INT 34
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: LIST
24496: PPUSH
24497: CALL_OW 72
24501: OR
24502: IFFALSE 24514
// begin isAlarm := true ;
24504: LD_ADDR_EXP 17
24508: PUSH
24509: LD_INT 1
24511: ST_TO_ADDR
// exit ;
24512: GO 27981
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
24514: LD_INT 105
24516: PPUSH
24517: LD_INT 55
24519: PPUSH
24520: CALL_OW 428
24524: NOT
24525: PUSH
24526: LD_INT 115
24528: PPUSH
24529: LD_INT 65
24531: PPUSH
24532: CALL_OW 428
24536: NOT
24537: OR
24538: IFFALSE 24550
// begin isAlarm := true ;
24540: LD_ADDR_EXP 17
24544: PUSH
24545: LD_INT 1
24547: ST_TO_ADDR
// exit ;
24548: GO 27981
// end ; until not BuildingsInProgress ( 2 ) ;
24550: LD_INT 2
24552: PPUSH
24553: CALL_OW 345
24557: NOT
24558: IFFALSE 24356
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
24560: LD_INT 105
24562: PPUSH
24563: LD_INT 55
24565: PPUSH
24566: CALL_OW 428
24570: PPUSH
24571: LD_INT 3
24573: PPUSH
24574: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
24578: LD_INT 115
24580: PPUSH
24581: LD_INT 65
24583: PPUSH
24584: CALL_OW 428
24588: PPUSH
24589: LD_INT 3
24591: PPUSH
24592: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
24596: LD_STRING M2a-out
24598: PPUSH
24599: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
24603: LD_EXP 66
24607: PPUSH
24608: LD_INT 2
24610: PPUSH
24611: CALL_OW 120
// wait ( 0 0$3 ) ;
24615: LD_INT 105
24617: PPUSH
24618: CALL_OW 67
// hasMuchin := false ;
24622: LD_ADDR_EXP 30
24626: PUSH
24627: LD_INT 0
24629: ST_TO_ADDR
// wait ( 2 2$00 ) ;
24630: LD_INT 4200
24632: PPUSH
24633: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
24637: LD_INT 35
24639: PPUSH
24640: CALL_OW 67
// if not HasTask ( ruDisturb ) then
24644: LD_EXP 66
24648: PPUSH
24649: CALL_OW 314
24653: NOT
24654: IFFALSE 24670
// ComMoveUnit ( ruDisturb , Heike ) ;
24656: LD_EXP 66
24660: PPUSH
24661: LD_EXP 46
24665: PPUSH
24666: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
24670: LD_EXP 46
24674: PPUSH
24675: LD_EXP 66
24679: PPUSH
24680: CALL_OW 296
24684: PUSH
24685: LD_INT 6
24687: LESS
24688: PUSH
24689: LD_EXP 66
24693: PPUSH
24694: CALL_OW 302
24698: AND
24699: IFFALSE 24637
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24701: LD_EXP 46
24705: PPUSH
24706: CALL_OW 257
24710: PUSH
24711: LD_INT 33
24713: NONEQUAL
24714: PUSH
24715: LD_EXP 14
24719: PPUSH
24720: LD_INT 22
24722: PUSH
24723: LD_INT 2
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 91
24732: PUSH
24733: LD_EXP 66
24737: PUSH
24738: LD_INT 8
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 2
24748: PUSH
24749: LD_INT 25
24751: PUSH
24752: LD_INT 1
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 25
24761: PUSH
24762: LD_INT 11
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 25
24771: PUSH
24772: LD_INT 32
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 25
24781: PUSH
24782: LD_INT 34
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: LIST
24800: PPUSH
24801: CALL_OW 72
24805: OR
24806: IFFALSE 24816
// isAlarm := true ;
24808: LD_ADDR_EXP 17
24812: PUSH
24813: LD_INT 1
24815: ST_TO_ADDR
// if isAlarm then
24816: LD_EXP 17
24820: IFFALSE 24824
// exit ;
24822: GO 27981
// DialogueOn ;
24824: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24828: LD_EXP 66
24832: PPUSH
24833: LD_STRING DMcn-Interrupt-1
24835: PPUSH
24836: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24840: LD_EXP 66
24844: PPUSH
24845: LD_STRING DMcn-Interrupt-2
24847: PPUSH
24848: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
24852: LD_INT 176
24854: PPUSH
24855: LD_INT 54
24857: PPUSH
24858: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
24862: LD_INT 176
24864: PPUSH
24865: LD_INT 54
24867: PPUSH
24868: LD_INT 2
24870: PPUSH
24871: LD_INT 6
24873: NEG
24874: PPUSH
24875: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
24879: LD_INT 10
24881: PPUSH
24882: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
24886: LD_EXP 66
24890: PPUSH
24891: LD_STRING DMcn-Interrupt-b-3
24893: PPUSH
24894: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
24898: LD_EXP 46
24902: PPUSH
24903: LD_STRING DH-Interrupt-b-4
24905: PPUSH
24906: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
24910: LD_EXP 66
24914: PPUSH
24915: LD_STRING DMcn-Interrupt-b-5
24917: PPUSH
24918: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
24922: LD_EXP 46
24926: PPUSH
24927: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
24931: LD_INT 176
24933: PPUSH
24934: LD_INT 54
24936: PPUSH
24937: LD_INT 2
24939: PPUSH
24940: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
24944: LD_EXP 66
24948: PPUSH
24949: LD_STRING DMcn-Interrupt-b-6
24951: PPUSH
24952: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
24956: LD_EXP 46
24960: PPUSH
24961: LD_STRING DH-Interrupt-b-7
24963: PPUSH
24964: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
24968: LD_EXP 66
24972: PPUSH
24973: LD_STRING DMcn-Interrupt-b-8
24975: PPUSH
24976: CALL_OW 88
// DialogueOff ;
24980: CALL_OW 7
// Query ( MuchinInfo ) ;
24984: LD_STRING MuchinInfo
24986: PPUSH
24987: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
24991: LD_STRING M2b
24993: PPUSH
24994: CALL_OW 337
// hasMuchin := true ;
24998: LD_ADDR_EXP 30
25002: PUSH
25003: LD_INT 1
25005: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25006: LD_INT 35
25008: PPUSH
25009: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
25013: LD_EXP 66
25017: PPUSH
25018: LD_EXP 46
25022: PPUSH
25023: CALL_OW 296
25027: PUSH
25028: LD_INT 6
25030: GREATER
25031: IFFALSE 25047
// ComMoveUnit ( ruDisturb , Heike ) ;
25033: LD_EXP 66
25037: PPUSH
25038: LD_EXP 46
25042: PPUSH
25043: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25047: LD_EXP 46
25051: PPUSH
25052: CALL_OW 257
25056: PUSH
25057: LD_INT 33
25059: NONEQUAL
25060: PUSH
25061: LD_EXP 14
25065: PPUSH
25066: LD_INT 22
25068: PUSH
25069: LD_INT 2
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 91
25078: PUSH
25079: LD_EXP 66
25083: PUSH
25084: LD_INT 8
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 2
25094: PUSH
25095: LD_INT 25
25097: PUSH
25098: LD_INT 1
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 25
25107: PUSH
25108: LD_INT 11
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 25
25117: PUSH
25118: LD_INT 32
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 25
25127: PUSH
25128: LD_INT 34
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: LIST
25146: PPUSH
25147: CALL_OW 72
25151: OR
25152: IFFALSE 25164
// begin isAlarm := true ;
25154: LD_ADDR_EXP 17
25158: PUSH
25159: LD_INT 1
25161: ST_TO_ADDR
// exit ;
25162: GO 27981
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
25164: LD_EXP 46
25168: PPUSH
25169: LD_INT 61
25171: PPUSH
25172: CALL_OW 296
25176: PUSH
25177: LD_INT 4
25179: LESS
25180: IFFALSE 25006
// InGameOn ;
25182: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
25186: LD_INT 173
25188: PPUSH
25189: LD_INT 54
25191: PPUSH
25192: LD_INT 2
25194: PPUSH
25195: LD_INT 8
25197: NEG
25198: PPUSH
25199: CALL_OW 330
// SetSide ( Heike , 3 ) ;
25203: LD_EXP 46
25207: PPUSH
25208: LD_INT 3
25210: PPUSH
25211: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
25215: LD_EXP 46
25219: PPUSH
25220: LD_INT 61
25222: PPUSH
25223: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
25227: LD_EXP 66
25231: PPUSH
25232: LD_INT 61
25234: PPUSH
25235: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
25239: LD_EXP 53
25243: PUSH
25244: LD_EXP 14
25248: IN
25249: PUSH
25250: LD_EXP 53
25254: PPUSH
25255: LD_INT 61
25257: PPUSH
25258: CALL_OW 296
25262: PUSH
25263: LD_INT 12
25265: LESS
25266: AND
25267: IFFALSE 25311
// begin SetSide ( Markov , 3 ) ;
25269: LD_EXP 53
25273: PPUSH
25274: LD_INT 3
25276: PPUSH
25277: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
25281: LD_EXP 53
25285: PPUSH
25286: LD_INT 61
25288: PPUSH
25289: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
25293: LD_INT 35
25295: PPUSH
25296: CALL_OW 67
// until IsInUnit ( Markov ) ;
25300: LD_EXP 53
25304: PPUSH
25305: CALL_OW 310
25309: IFFALSE 25293
// end ; repeat wait ( 0 0$1 ) ;
25311: LD_INT 35
25313: PPUSH
25314: CALL_OW 67
// until IsInUnit ( Heike ) ;
25318: LD_EXP 46
25322: PPUSH
25323: CALL_OW 310
25327: IFFALSE 25311
// SetClass ( Heike , class_mechanic ) ;
25329: LD_EXP 46
25333: PPUSH
25334: LD_INT 3
25336: PPUSH
25337: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
25341: LD_INT 61
25343: PPUSH
25344: LD_INT 21
25346: PPUSH
25347: LD_INT 3
25349: PPUSH
25350: LD_INT 3
25352: PPUSH
25353: LD_INT 43
25355: PPUSH
25356: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
25360: LD_EXP 31
25364: PUSH
25365: LD_EXP 53
25369: PUSH
25370: LD_EXP 14
25374: IN
25375: PUSH
25376: LD_EXP 53
25380: PPUSH
25381: CALL_OW 310
25385: PUSH
25386: LD_INT 61
25388: EQUAL
25389: OR
25390: AND
25391: IFFALSE 25881
// begin wait ( 0 0$5 ) ;
25393: LD_INT 175
25395: PPUSH
25396: CALL_OW 67
// SetSide ( Heike , 2 ) ;
25400: LD_EXP 46
25404: PPUSH
25405: LD_INT 2
25407: PPUSH
25408: CALL_OW 235
// SetSide ( Markov , 2 ) ;
25412: LD_EXP 53
25416: PPUSH
25417: LD_INT 2
25419: PPUSH
25420: CALL_OW 235
// if not Markov in heikeSquad then
25424: LD_EXP 53
25428: PUSH
25429: LD_EXP 14
25433: IN
25434: NOT
25435: IFFALSE 25457
// heikeSquad := Join ( heikeSquad , Markov ) ;
25437: LD_ADDR_EXP 14
25441: PUSH
25442: LD_EXP 14
25446: PPUSH
25447: LD_EXP 53
25451: PPUSH
25452: CALL 67203 0 2
25456: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
25457: LD_EXP 53
25461: PPUSH
25462: LD_STRING DMar-Factory-1
25464: PPUSH
25465: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
25469: LD_INT 61
25471: PPUSH
25472: LD_INT 99
25474: PPUSH
25475: CALL_OW 329
// game_speed := 4 ;
25479: LD_ADDR_OWVAR 65
25483: PUSH
25484: LD_INT 4
25486: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
25487: LD_EXP 66
25491: PPUSH
25492: CALL_OW 122
// ComExitBuilding ( Markov ) ;
25496: LD_EXP 53
25500: PPUSH
25501: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
25505: LD_EXP 66
25509: PPUSH
25510: LD_INT 171
25512: PPUSH
25513: LD_INT 51
25515: PPUSH
25516: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
25520: LD_EXP 53
25524: PPUSH
25525: LD_INT 167
25527: PPUSH
25528: LD_INT 50
25530: PPUSH
25531: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
25535: LD_EXP 53
25539: PPUSH
25540: LD_EXP 66
25544: PPUSH
25545: CALL_OW 179
// wait ( 0 0$5 ) ;
25549: LD_INT 175
25551: PPUSH
25552: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
25556: LD_EXP 53
25560: PPUSH
25561: LD_STRING DMar-Factory-2
25563: PPUSH
25564: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
25568: LD_ADDR_VAR 0 2
25572: PUSH
25573: LD_INT 22
25575: PUSH
25576: LD_INT 3
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 33
25585: PUSH
25586: LD_INT 3
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PPUSH
25597: CALL_OW 69
25601: PUSH
25602: LD_INT 1
25604: ARRAY
25605: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
25606: LD_EXP 66
25610: PPUSH
25611: LD_VAR 0 2
25615: PPUSH
25616: CALL_OW 119
// game_speed := 4 ;
25620: LD_ADDR_OWVAR 65
25624: PUSH
25625: LD_INT 4
25627: ST_TO_ADDR
// async ;
25628: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
25629: LD_EXP 66
25633: PPUSH
25634: LD_STRING DMcn-Factory-3
25636: PPUSH
25637: CALL_OW 88
// wait ( 0 0$0.9 ) ;
25641: LD_INT 32
25643: PPUSH
25644: CALL_OW 67
// ComAttackUnit ( veh , ruDisturb ) ;
25648: LD_VAR 0 2
25652: PPUSH
25653: LD_EXP 66
25657: PPUSH
25658: CALL_OW 115
// sync ;
25662: SYNC
// wait ( 0 0$1 ) ;
25663: LD_INT 35
25665: PPUSH
25666: CALL_OW 67
// KillUnit ( ruDisturb ) ;
25670: LD_EXP 66
25674: PPUSH
25675: CALL_OW 66
// SetSide ( veh , 7 ) ;
25679: LD_VAR 0 2
25683: PPUSH
25684: LD_INT 7
25686: PPUSH
25687: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
25691: LD_VAR 0 2
25695: PPUSH
25696: LD_INT 84
25698: PPUSH
25699: LD_INT 38
25701: PPUSH
25702: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
25706: LD_EXP 67
25710: PUSH
25711: LD_INT 1
25713: ARRAY
25714: PPUSH
25715: CALL_OW 258
25719: PUSH
25720: LD_INT 1
25722: EQUAL
25723: IFFALSE 25743
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
25725: LD_EXP 67
25729: PUSH
25730: LD_INT 1
25732: ARRAY
25733: PPUSH
25734: LD_STRING DRum-Factory-4
25736: PPUSH
25737: CALL_OW 88
25741: GO 25759
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
25743: LD_EXP 67
25747: PUSH
25748: LD_INT 1
25750: ARRAY
25751: PPUSH
25752: LD_STRING DRuf-Factory-4
25754: PPUSH
25755: CALL_OW 88
// wait ( 0 0$1 ) ;
25759: LD_INT 35
25761: PPUSH
25762: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
25766: LD_EXP 67
25770: PPUSH
25771: LD_INT 26
25773: PUSH
25774: LD_INT 1
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PPUSH
25781: CALL_OW 72
25785: PUSH
25786: LD_INT 1
25788: ARRAY
25789: PPUSH
25790: LD_STRING DRum-Factory-6
25792: PPUSH
25793: CALL_OW 88
// wait ( 0 0$2 ) ;
25797: LD_INT 70
25799: PPUSH
25800: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
25804: LD_EXP 46
25808: PPUSH
25809: LD_INT 33
25811: PPUSH
25812: CALL_OW 336
// ComExitBuilding ( Heike ) ;
25816: LD_EXP 46
25820: PPUSH
25821: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25825: LD_EXP 46
25829: PPUSH
25830: LD_INT 168
25832: PPUSH
25833: LD_INT 54
25835: PPUSH
25836: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
25840: LD_INT 173
25842: PPUSH
25843: LD_INT 54
25845: PPUSH
25846: LD_INT 2
25848: PPUSH
25849: CALL_OW 331
// InGameOff ;
25853: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
25857: LD_STRING M2b-out
25859: PPUSH
25860: CALL_OW 337
// SetAchievement ( ACH_TOY ) ;
25864: LD_STRING ACH_TOY
25866: PPUSH
25867: CALL_OW 543
// hasMuchin := false ;
25871: LD_ADDR_EXP 30
25875: PUSH
25876: LD_INT 0
25878: ST_TO_ADDR
// exit ;
25879: GO 27981
// end ; wait ( 0 0$5 ) ;
25881: LD_INT 175
25883: PPUSH
25884: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
25888: LD_INT 61
25890: PPUSH
25891: LD_INT 99
25893: PPUSH
25894: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
25898: LD_EXP 53
25902: PUSH
25903: LD_EXP 14
25907: IN
25908: PUSH
25909: LD_EXP 53
25913: PPUSH
25914: CALL_OW 255
25918: PUSH
25919: LD_INT 3
25921: EQUAL
25922: AND
25923: IFFALSE 25946
// begin SetSide ( Markov , 2 ) ;
25925: LD_EXP 53
25929: PPUSH
25930: LD_INT 2
25932: PPUSH
25933: CALL_OW 235
// ComExitBuilding ( Markov ) ;
25937: LD_EXP 53
25941: PPUSH
25942: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
25946: LD_EXP 46
25950: PPUSH
25951: LD_INT 2
25953: PPUSH
25954: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
25958: LD_EXP 46
25962: PPUSH
25963: LD_INT 33
25965: PPUSH
25966: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
25970: LD_EXP 66
25974: PPUSH
25975: CALL_OW 122
// ComExitBuilding ( Heike ) ;
25979: LD_EXP 46
25983: PPUSH
25984: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25988: LD_EXP 46
25992: PPUSH
25993: LD_INT 168
25995: PPUSH
25996: LD_INT 54
25998: PPUSH
25999: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
26003: LD_INT 173
26005: PPUSH
26006: LD_INT 54
26008: PPUSH
26009: LD_INT 2
26011: PPUSH
26012: CALL_OW 331
// InGameOff ;
26016: CALL_OW 9
// wait ( 3 ) ;
26020: LD_INT 3
26022: PPUSH
26023: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
26027: LD_EXP 66
26031: PPUSH
26032: LD_INT 2
26034: PPUSH
26035: CALL_OW 120
// wait ( 0 0$3 ) ;
26039: LD_INT 105
26041: PPUSH
26042: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
26046: LD_STRING M2b-out
26048: PPUSH
26049: CALL_OW 337
// hasMuchin := false ;
26053: LD_ADDR_EXP 30
26057: PUSH
26058: LD_INT 0
26060: ST_TO_ADDR
// wait ( 2 2$00 ) ;
26061: LD_INT 4200
26063: PPUSH
26064: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
26068: LD_INT 35
26070: PPUSH
26071: CALL_OW 67
// if not HasTask ( ruDisturb ) then
26075: LD_EXP 66
26079: PPUSH
26080: CALL_OW 314
26084: NOT
26085: IFFALSE 26101
// ComMoveUnit ( ruDisturb , Heike ) ;
26087: LD_EXP 66
26091: PPUSH
26092: LD_EXP 46
26096: PPUSH
26097: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
26101: LD_EXP 46
26105: PPUSH
26106: LD_EXP 66
26110: PPUSH
26111: CALL_OW 296
26115: PUSH
26116: LD_INT 2
26118: LESS
26119: PUSH
26120: LD_EXP 66
26124: PPUSH
26125: CALL_OW 302
26129: AND
26130: IFFALSE 26068
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
26132: LD_EXP 46
26136: PPUSH
26137: CALL_OW 257
26141: PUSH
26142: LD_INT 33
26144: NONEQUAL
26145: PUSH
26146: LD_EXP 14
26150: PPUSH
26151: LD_INT 22
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 91
26163: PUSH
26164: LD_EXP 66
26168: PUSH
26169: LD_INT 8
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 2
26179: PUSH
26180: LD_INT 25
26182: PUSH
26183: LD_INT 1
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 25
26192: PUSH
26193: LD_INT 11
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 25
26202: PUSH
26203: LD_INT 32
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 25
26212: PUSH
26213: LD_INT 34
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: LIST
26231: PPUSH
26232: CALL_OW 72
26236: OR
26237: IFFALSE 26247
// isAlarm := true ;
26239: LD_ADDR_EXP 17
26243: PUSH
26244: LD_INT 1
26246: ST_TO_ADDR
// if isAlarm then
26247: LD_EXP 17
26251: IFFALSE 26255
// exit ;
26253: GO 27981
// ComTurnUnit ( Heike , ruDisturb ) ;
26255: LD_EXP 46
26259: PPUSH
26260: LD_EXP 66
26264: PPUSH
26265: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
26269: LD_EXP 66
26273: PPUSH
26274: LD_EXP 46
26278: PPUSH
26279: CALL_OW 119
// wait ( 3 ) ;
26283: LD_INT 3
26285: PPUSH
26286: CALL_OW 67
// for i := 1 to 3 do
26290: LD_ADDR_VAR 0 1
26294: PUSH
26295: DOUBLE
26296: LD_INT 1
26298: DEC
26299: ST_TO_ADDR
26300: LD_INT 3
26302: PUSH
26303: FOR_TO
26304: IFFALSE 26321
// CreateCratesArea ( 5 , cratesArea , false ) ;
26306: LD_INT 5
26308: PPUSH
26309: LD_INT 58
26311: PPUSH
26312: LD_INT 0
26314: PPUSH
26315: CALL_OW 55
26319: GO 26303
26321: POP
26322: POP
// uc_side := 3 ;
26323: LD_ADDR_OWVAR 20
26327: PUSH
26328: LD_INT 3
26330: ST_TO_ADDR
// uc_nation := nation_russian ;
26331: LD_ADDR_OWVAR 21
26335: PUSH
26336: LD_INT 3
26338: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
26339: LD_INT 21
26341: PPUSH
26342: LD_INT 3
26344: PPUSH
26345: LD_INT 1
26347: PPUSH
26348: LD_INT 51
26350: PPUSH
26351: LD_INT 100
26353: PPUSH
26354: CALL 34332 0 5
// veh := CreateVehicle ;
26358: LD_ADDR_VAR 0 2
26362: PUSH
26363: CALL_OW 45
26367: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
26368: LD_VAR 0 2
26372: PPUSH
26373: LD_INT 104
26375: PPUSH
26376: LD_INT 41
26378: PPUSH
26379: LD_INT 3
26381: PPUSH
26382: LD_INT 0
26384: PPUSH
26385: CALL 69343 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
26389: LD_VAR 0 2
26393: PPUSH
26394: LD_INT 1
26396: PPUSH
26397: LD_INT 100
26399: PPUSH
26400: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
26404: CALL_OW 44
26408: PPUSH
26409: LD_VAR 0 2
26413: PPUSH
26414: CALL_OW 52
// DialogueOn ;
26418: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
26422: LD_EXP 66
26426: PPUSH
26427: LD_STRING DMcn-Interrupt-1
26429: PPUSH
26430: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
26434: LD_EXP 66
26438: PPUSH
26439: LD_STRING DMcn-Interrupt-2
26441: PPUSH
26442: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
26446: LD_EXP 66
26450: PPUSH
26451: LD_STRING DMcn-Interrupt-c-3
26453: PPUSH
26454: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
26458: LD_INT 101
26460: PPUSH
26461: LD_INT 38
26463: PPUSH
26464: LD_INT 2
26466: PPUSH
26467: LD_INT 10
26469: NEG
26470: PPUSH
26471: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
26475: LD_INT 101
26477: PPUSH
26478: LD_INT 38
26480: PPUSH
26481: CALL_OW 84
// wait ( 0 0$2 ) ;
26485: LD_INT 70
26487: PPUSH
26488: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
26492: LD_INT 101
26494: PPUSH
26495: LD_INT 38
26497: PPUSH
26498: LD_INT 2
26500: PPUSH
26501: CALL_OW 331
// RemoveUnit ( veh ) ;
26505: LD_VAR 0 2
26509: PPUSH
26510: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
26514: LD_EXP 66
26518: PPUSH
26519: LD_STRING DMcn-Interrupt-c-4
26521: PPUSH
26522: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
26526: LD_EXP 46
26530: PPUSH
26531: LD_STRING DH-Interrupt-c-5
26533: PPUSH
26534: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
26538: LD_EXP 66
26542: PPUSH
26543: LD_STRING DMcn-Interrupt-c-6
26545: PPUSH
26546: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
26550: LD_EXP 46
26554: PPUSH
26555: LD_STRING DH-Interrupt-c-7
26557: PPUSH
26558: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
26562: LD_EXP 66
26566: PPUSH
26567: LD_STRING DMcn-Interrupt-c-8
26569: PPUSH
26570: CALL_OW 88
// DialogueOff ;
26574: CALL_OW 7
// hasMuchin := true ;
26578: LD_ADDR_EXP 30
26582: PUSH
26583: LD_INT 1
26585: ST_TO_ADDR
// Query ( MuchinInfo ) ;
26586: LD_STRING MuchinInfo
26588: PPUSH
26589: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
26593: LD_STRING M2c
26595: PPUSH
26596: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
26600: LD_INT 35
26602: PPUSH
26603: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
26607: LD_EXP 66
26611: PPUSH
26612: LD_EXP 46
26616: PPUSH
26617: CALL_OW 296
26621: PUSH
26622: LD_INT 6
26624: GREATER
26625: IFFALSE 26641
// ComMoveUnit ( ruDisturb , Heike ) ;
26627: LD_EXP 66
26631: PPUSH
26632: LD_EXP 46
26636: PPUSH
26637: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
26641: LD_EXP 46
26645: PPUSH
26646: CALL_OW 257
26650: PUSH
26651: LD_INT 33
26653: NONEQUAL
26654: PUSH
26655: LD_EXP 14
26659: PPUSH
26660: LD_INT 22
26662: PUSH
26663: LD_INT 2
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 91
26672: PUSH
26673: LD_EXP 66
26677: PUSH
26678: LD_INT 8
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 2
26688: PUSH
26689: LD_INT 25
26691: PUSH
26692: LD_INT 1
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 25
26701: PUSH
26702: LD_INT 11
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 25
26711: PUSH
26712: LD_INT 32
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 25
26721: PUSH
26722: LD_INT 34
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: LIST
26740: PPUSH
26741: CALL_OW 72
26745: OR
26746: IFFALSE 26758
// begin isAlarm := true ;
26748: LD_ADDR_EXP 17
26752: PUSH
26753: LD_INT 1
26755: ST_TO_ADDR
// exit ;
26756: GO 27981
// end ; until UnitFilter ( heikeSquad union Heike , [ f_distxy , 100 , 37 , 6 ] ) ;
26758: LD_EXP 14
26762: PUSH
26763: LD_EXP 46
26767: UNION
26768: PPUSH
26769: LD_INT 92
26771: PUSH
26772: LD_INT 100
26774: PUSH
26775: LD_INT 37
26777: PUSH
26778: LD_INT 6
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: PPUSH
26787: CALL_OW 72
26791: IFFALSE 26600
// PlaceSeeing ( 100 , 37 , 3 , - 10 ) ;
26793: LD_INT 100
26795: PPUSH
26796: LD_INT 37
26798: PPUSH
26799: LD_INT 3
26801: PPUSH
26802: LD_INT 10
26804: NEG
26805: PPUSH
26806: CALL_OW 330
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
26810: LD_ADDR_VAR 0 3
26814: PUSH
26815: LD_EXP 14
26819: PUSH
26820: LD_EXP 46
26824: UNION
26825: PPUSH
26826: LD_INT 25
26828: PUSH
26829: LD_INT 33
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 91
26838: PUSH
26839: LD_INT 6
26841: PUSH
26842: LD_INT 12
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: LIST
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PPUSH
26854: CALL_OW 72
26858: ST_TO_ADDR
// for i in tmp do
26859: LD_ADDR_VAR 0 1
26863: PUSH
26864: LD_VAR 0 3
26868: PUSH
26869: FOR_IN
26870: IFFALSE 26901
// begin SetSide ( i , 3 ) ;
26872: LD_VAR 0 1
26876: PPUSH
26877: LD_INT 3
26879: PPUSH
26880: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
26884: LD_VAR 0 1
26888: PPUSH
26889: LD_INT 101
26891: PPUSH
26892: LD_INT 38
26894: PPUSH
26895: CALL_OW 111
// end ;
26899: GO 26869
26901: POP
26902: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
26903: LD_EXP 66
26907: PPUSH
26908: LD_INT 104
26910: PPUSH
26911: LD_INT 37
26913: PPUSH
26914: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
26918: LD_EXP 66
26922: PPUSH
26923: LD_EXP 46
26927: PPUSH
26928: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
26932: LD_INT 35
26934: PPUSH
26935: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
26939: LD_ADDR_VAR 0 4
26943: PUSH
26944: LD_INT 58
26946: PPUSH
26947: CALL_OW 435
26951: ST_TO_ADDR
// for i in tmp do
26952: LD_ADDR_VAR 0 1
26956: PUSH
26957: LD_VAR 0 3
26961: PUSH
26962: FOR_IN
26963: IFFALSE 27006
// if not HasTask ( i ) then
26965: LD_VAR 0 1
26969: PPUSH
26970: CALL_OW 314
26974: NOT
26975: IFFALSE 27004
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
26977: LD_VAR 0 1
26981: PPUSH
26982: LD_VAR 0 4
26986: PUSH
26987: LD_INT 1
26989: ARRAY
26990: PPUSH
26991: LD_VAR 0 4
26995: PUSH
26996: LD_INT 2
26998: ARRAY
26999: PPUSH
27000: CALL_OW 117
27004: GO 26962
27006: POP
27007: POP
// until not cr ;
27008: LD_VAR 0 4
27012: NOT
27013: IFFALSE 26932
// wait ( 0 0$2 ) ;
27015: LD_INT 70
27017: PPUSH
27018: CALL_OW 67
// RemoveSeeing ( 100 , 37 , 3 ) ;
27022: LD_INT 100
27024: PPUSH
27025: LD_INT 37
27027: PPUSH
27028: LD_INT 3
27030: PPUSH
27031: CALL_OW 331
// for i in tmp do
27035: LD_ADDR_VAR 0 1
27039: PUSH
27040: LD_VAR 0 3
27044: PUSH
27045: FOR_IN
27046: IFFALSE 27062
// SetSide ( i , 2 ) ;
27048: LD_VAR 0 1
27052: PPUSH
27053: LD_INT 2
27055: PPUSH
27056: CALL_OW 235
27060: GO 27045
27062: POP
27063: POP
// if Kaia in tmp then
27064: LD_EXP 51
27068: PUSH
27069: LD_VAR 0 3
27073: IN
27074: IFFALSE 27375
// begin InGameOn ;
27076: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
27080: LD_EXP 51
27084: PPUSH
27085: LD_EXP 66
27089: PPUSH
27090: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
27094: LD_EXP 66
27098: PPUSH
27099: LD_EXP 51
27103: PPUSH
27104: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
27108: LD_EXP 51
27112: PPUSH
27113: LD_EXP 66
27117: PPUSH
27118: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
27122: LD_EXP 51
27126: PPUSH
27127: LD_STRING DK-Assassin-1
27129: PPUSH
27130: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
27134: LD_EXP 66
27138: PPUSH
27139: LD_STRING DMcn-Assassin-2
27141: PPUSH
27142: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
27146: LD_EXP 51
27150: PPUSH
27151: LD_STRING DK-Assassin-3
27153: PPUSH
27154: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
27158: LD_EXP 66
27162: PPUSH
27163: LD_STRING DMcn-Assassin-4
27165: PPUSH
27166: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
27170: LD_EXP 51
27174: PPUSH
27175: LD_STRING DK-Assassin-5
27177: PPUSH
27178: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
27182: LD_EXP 66
27186: PPUSH
27187: LD_STRING DMcn-Assassin-6
27189: PPUSH
27190: CALL_OW 88
// SetSide ( Kaia , 3 ) ;
27194: LD_EXP 51
27198: PPUSH
27199: LD_INT 3
27201: PPUSH
27202: CALL_OW 235
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
27206: LD_EXP 51
27210: PUSH
27211: LD_EXP 66
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PPUSH
27220: LD_INT 6
27222: PPUSH
27223: CALL_OW 120
// wait ( 0 0$5 ) ;
27227: LD_INT 175
27229: PPUSH
27230: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
27234: LD_EXP 51
27238: PPUSH
27239: LD_STRING DK-Assassin-7
27241: PPUSH
27242: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
27246: LD_EXP 66
27250: PPUSH
27251: LD_STRING DMcn-Assassin-8
27253: PPUSH
27254: CALL_OW 88
// wait ( 0 0$0.3 ) ;
27258: LD_INT 10
27260: PPUSH
27261: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
27265: LD_EXP 51
27269: PPUSH
27270: LD_STRING DK-Assassin-9
27272: PPUSH
27273: CALL_OW 88
// wait ( 0 0$2 ) ;
27277: LD_INT 70
27279: PPUSH
27280: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
27284: LD_EXP 51
27288: PPUSH
27289: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
27293: LD_EXP 66
27297: PPUSH
27298: CALL_OW 64
// SetSide ( Kaia , 2 ) ;
27302: LD_EXP 51
27306: PPUSH
27307: LD_INT 2
27309: PPUSH
27310: CALL_OW 235
// AddComMoveUnit ( Kaia , Heike ) ;
27314: LD_EXP 51
27318: PPUSH
27319: LD_EXP 46
27323: PPUSH
27324: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
27328: LD_EXP 51
27332: PPUSH
27333: LD_STRING DK-Assasin-10
27335: PPUSH
27336: CALL_OW 88
// InGameOff ;
27340: CALL_OW 9
// SetAchievement ( ACH_POKER ) ;
27344: LD_STRING ACH_POKER
27346: PPUSH
27347: CALL_OW 543
// ChangeMissionObjectives ( M2c-out ) ;
27351: LD_STRING M2c-out
27353: PPUSH
27354: CALL_OW 337
// wait ( 0 0$3 ) ;
27358: LD_INT 105
27360: PPUSH
27361: CALL_OW 67
// hasMuchin := false ;
27365: LD_ADDR_EXP 30
27369: PUSH
27370: LD_INT 0
27372: ST_TO_ADDR
// exit ;
27373: GO 27981
// end ; ChangeMissionObjectives ( M2c-out ) ;
27375: LD_STRING M2c-out
27377: PPUSH
27378: CALL_OW 337
// meetWithMuchin := true ;
27382: LD_ADDR_EXP 44
27386: PUSH
27387: LD_INT 1
27389: ST_TO_ADDR
// InGameOn ;
27390: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
27394: LD_EXP 66
27398: PPUSH
27399: LD_STRING DMcn-Fail-1
27401: PPUSH
27402: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
27406: LD_VAR 0 3
27410: PPUSH
27411: LD_INT 114
27413: PPUSH
27414: LD_INT 17
27416: PPUSH
27417: CALL_OW 111
// wait ( 0 0$1 ) ;
27421: LD_INT 35
27423: PPUSH
27424: CALL_OW 67
// async ;
27428: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
27429: LD_EXP 66
27433: PPUSH
27434: LD_EXP 46
27438: PPUSH
27439: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
27443: LD_EXP 66
27447: PPUSH
27448: LD_STRING DMcn-Fail-2
27450: PPUSH
27451: CALL_OW 88
// ComStop ( Heike ) ;
27455: LD_EXP 46
27459: PPUSH
27460: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
27464: LD_EXP 46
27468: PPUSH
27469: LD_EXP 66
27473: PPUSH
27474: CALL_OW 179
// sync ;
27478: SYNC
// Say ( Heike , DH-Fail-3 ) ;
27479: LD_EXP 46
27483: PPUSH
27484: LD_STRING DH-Fail-3
27486: PPUSH
27487: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
27491: LD_EXP 66
27495: PPUSH
27496: LD_STRING DMcn-Fail-4
27498: PPUSH
27499: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
27503: LD_EXP 46
27507: PUSH
27508: LD_EXP 66
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PPUSH
27517: LD_INT 41
27519: PPUSH
27520: LD_INT 19
27522: PPUSH
27523: CALL_OW 111
// wait ( 0 0$2 ) ;
27527: LD_INT 70
27529: PPUSH
27530: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
27534: LD_EXP 66
27538: PPUSH
27539: LD_INT 40
27541: PPUSH
27542: LD_INT 19
27544: PPUSH
27545: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
27549: LD_EXP 46
27553: PPUSH
27554: LD_INT 43
27556: PPUSH
27557: LD_INT 21
27559: PPUSH
27560: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
27564: LD_EXP 66
27568: PPUSH
27569: LD_EXP 46
27573: PPUSH
27574: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
27578: LD_EXP 46
27582: PPUSH
27583: LD_EXP 66
27587: PPUSH
27588: CALL_OW 179
// wait ( 0 0$2 ) ;
27592: LD_INT 70
27594: PPUSH
27595: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
27599: LD_EXP 66
27603: PPUSH
27604: LD_STRING DMcn-Fail-5
27606: PPUSH
27607: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
27611: LD_EXP 46
27615: PPUSH
27616: CALL_OW 87
// wait ( 0 0$2 ) ;
27620: LD_INT 70
27622: PPUSH
27623: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
27627: LD_EXP 66
27631: PPUSH
27632: LD_STRING DMcn-Fail-6
27634: PPUSH
27635: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
27639: LD_EXP 46
27643: PPUSH
27644: CALL_OW 87
// repeat wait ( 0 0$1 ) ;
27648: LD_INT 35
27650: PPUSH
27651: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
27655: LD_EXP 46
27659: PPUSH
27660: LD_INT 43
27662: PPUSH
27663: LD_INT 21
27665: PPUSH
27666: CALL_OW 307
27670: IFFALSE 27648
// CenterNowOnUnits ( Heike ) ;
27672: LD_EXP 46
27676: PPUSH
27677: CALL_OW 87
// case Query ( MuchinQuestion ) of 1 :
27681: LD_STRING MuchinQuestion
27683: PPUSH
27684: CALL_OW 97
27688: PUSH
27689: LD_INT 1
27691: DOUBLE
27692: EQUAL
27693: IFTRUE 27697
27695: GO 27797
27697: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
27698: LD_EXP 66
27702: PPUSH
27703: LD_STRING DMcn-Fail-7
27705: PPUSH
27706: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
27710: LD_EXP 46
27714: PPUSH
27715: LD_STRING DH-Fail-8
27717: PPUSH
27718: CALL_OW 88
// wait ( 0 0$0.3 ) ;
27722: LD_INT 10
27724: PPUSH
27725: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
27729: LD_EXP 46
27733: PPUSH
27734: LD_STRING DH-Fail-9
27736: PPUSH
27737: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
27741: LD_EXP 46
27745: PPUSH
27746: LD_STRING DH-Fail-10
27748: PPUSH
27749: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
27753: LD_EXP 66
27757: PPUSH
27758: LD_STRING DMcn-Fail-11
27760: PPUSH
27761: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
27765: LD_EXP 66
27769: PPUSH
27770: LD_EXP 46
27774: PPUSH
27775: CALL_OW 115
// wait ( 0 0$2 ) ;
27779: LD_INT 70
27781: PPUSH
27782: CALL_OW 67
// KillUnit ( Heike ) ;
27786: LD_EXP 46
27790: PPUSH
27791: CALL_OW 66
// end ; 2 :
27795: GO 27977
27797: LD_INT 2
27799: DOUBLE
27800: EQUAL
27801: IFTRUE 27805
27803: GO 27976
27805: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
27806: LD_EXP 46
27810: PPUSH
27811: LD_STRING DH-Fail-a-8
27813: PPUSH
27814: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
27818: LD_EXP 46
27822: PPUSH
27823: LD_STRING DH-Fail-a-9
27825: PPUSH
27826: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
27830: LD_EXP 46
27834: PPUSH
27835: LD_STRING DH-Fail-10
27837: PPUSH
27838: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
27842: LD_EXP 46
27846: PPUSH
27847: LD_STRING DH-Fail-a-11
27849: PPUSH
27850: CALL_OW 88
// async ;
27854: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
27855: LD_EXP 66
27859: PPUSH
27860: LD_EXP 46
27864: PPUSH
27865: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
27869: LD_EXP 66
27873: PPUSH
27874: LD_EXP 46
27878: PPUSH
27879: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
27883: LD_EXP 66
27887: PPUSH
27888: LD_STRING DH-Fail-12
27890: PPUSH
27891: CALL_OW 88
// sync ;
27895: SYNC
// wait ( 0 0$1 ) ;
27896: LD_INT 35
27898: PPUSH
27899: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
27903: LD_EXP 46
27907: PPUSH
27908: LD_STRING DH-Fail-a-13
27910: PPUSH
27911: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
27915: LD_EXP 66
27919: PPUSH
27920: LD_INT 100
27922: PPUSH
27923: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
27927: LD_EXP 66
27931: PPUSH
27932: LD_STRING DMcn-Fail-a-14
27934: PPUSH
27935: CALL_OW 91
// KillUnit ( ruDisturb ) ;
27939: LD_EXP 66
27943: PPUSH
27944: CALL_OW 66
// wait ( 0 0$1 ) ;
27948: LD_INT 35
27950: PPUSH
27951: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
27955: LD_EXP 46
27959: PPUSH
27960: LD_STRING DH-Fail-a-15
27962: PPUSH
27963: CALL_OW 88
// YouLost ( FailMuchin ) ;
27967: LD_STRING FailMuchin
27969: PPUSH
27970: CALL_OW 104
// end ; end ;
27974: GO 27977
27976: POP
// InGameOff ;
27977: CALL_OW 9
// end ;
27981: PPOPN 4
27983: END
// every 0 0$1 trigger FilterUnitsInArea ( baseOutsideBorderArea , [ f_side , 2 ] ) and not meetWithMuchin and hasMuchin marked gameStartEvent do
27984: LD_INT 23
27986: PPUSH
27987: LD_INT 22
27989: PUSH
27990: LD_INT 2
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PPUSH
27997: CALL_OW 70
28001: PUSH
28002: LD_EXP 44
28006: NOT
28007: AND
28008: PUSH
28009: LD_EXP 30
28013: AND
28014: IFFALSE 28027
28016: GO 28018
28018: DISABLE
// isAlarm := true ; end_of_file
28019: LD_ADDR_EXP 17
28023: PUSH
28024: LD_INT 1
28026: ST_TO_ADDR
28027: END
// every 0 0$1 marked gameStartEvent do
28028: GO 28030
28030: DISABLE
// begin enable ;
28031: ENABLE
// if not contactWithAmerican then
28032: LD_EXP 25
28036: NOT
28037: IFFALSE 28082
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
28039: LD_ADDR_OWVAR 47
28043: PUSH
28044: LD_STRING #X108-1
28046: PUSH
28047: LD_INT 22
28049: PUSH
28050: LD_INT 5
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 21
28059: PUSH
28060: LD_INT 1
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PPUSH
28071: CALL_OW 69
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: ST_TO_ADDR
28080: GO 28171
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , #X108-2 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ] ;
28082: LD_ADDR_OWVAR 47
28086: PUSH
28087: LD_STRING #X108-1
28089: PUSH
28090: LD_INT 22
28092: PUSH
28093: LD_INT 5
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 21
28102: PUSH
28103: LD_INT 1
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 50
28112: PUSH
28113: EMPTY
28114: LIST
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: LIST
28120: PPUSH
28121: CALL_OW 69
28125: PUSH
28126: LD_STRING #X108-2
28128: PUSH
28129: LD_INT 22
28131: PUSH
28132: LD_INT 4
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 21
28141: PUSH
28142: LD_INT 1
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 50
28151: PUSH
28152: EMPTY
28153: LIST
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: LIST
28159: PPUSH
28160: CALL_OW 69
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: ST_TO_ADDR
// end ; end_of_file
28171: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
28172: LD_EXP 46
28176: PPUSH
28177: LD_INT 59
28179: PPUSH
28180: CALL_OW 308
28184: IFFALSE 28306
28186: GO 28188
28188: DISABLE
// begin Query ( FinalInfo ) ;
28189: LD_STRING FinalInfo
28191: PPUSH
28192: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
28196: LD_INT 59
28198: PPUSH
28199: LD_INT 1
28201: PPUSH
28202: CALL_OW 424
// end_the_mission_allowed := true ;
28206: LD_ADDR_OWVAR 57
28210: PUSH
28211: LD_INT 1
28213: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28214: LD_INT 35
28216: PPUSH
28217: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
28221: LD_INT 22
28223: PUSH
28224: LD_INT 2
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 21
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 95
28243: PUSH
28244: LD_INT 59
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: LIST
28255: PPUSH
28256: CALL_OW 69
28260: PPUSH
28261: CALL 31594 0 1
28265: PUSH
28266: LD_INT 22
28268: PUSH
28269: LD_INT 2
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 21
28278: PUSH
28279: LD_INT 1
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PPUSH
28290: CALL_OW 69
28294: PPUSH
28295: CALL 31594 0 1
28299: EQUAL
28300: IFFALSE 28214
// EndMission ;
28302: CALL 28314 0 0
// end ;
28306: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
28307: CALL 28314 0 0
// end ;
28311: PPOPN 1
28313: END
// function EndMission ; var tmp ; begin
28314: LD_INT 0
28316: PPUSH
28317: PPUSH
// PlayOriginalMusic ;
28318: CALL 93696 0 0
// if not IsInArea ( Heike , finalArea ) then
28322: LD_EXP 46
28326: PPUSH
28327: LD_INT 59
28329: PPUSH
28330: CALL_OW 308
28334: NOT
28335: IFFALSE 28346
// begin Query ( HeikeOutOfArea ) ;
28337: LD_STRING HeikeOutOfArea
28339: PPUSH
28340: CALL_OW 97
// exit ;
28344: GO 29269
// end ; if not IsOk ( Heike ) then
28346: LD_EXP 46
28350: PPUSH
28351: CALL_OW 302
28355: NOT
28356: IFFALSE 28367
// begin Query ( HeikeIsHurt ) ;
28358: LD_STRING HeikeIsHurt
28360: PPUSH
28361: CALL_OW 97
// exit ;
28365: GO 29269
// end ; if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ) < 6 then
28367: LD_INT 22
28369: PUSH
28370: LD_INT 2
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 21
28379: PUSH
28380: LD_INT 1
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 50
28389: PUSH
28390: EMPTY
28391: LIST
28392: PUSH
28393: LD_INT 95
28395: PUSH
28396: LD_INT 59
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: PPUSH
28409: CALL_OW 69
28413: PPUSH
28414: CALL 31594 0 1
28418: PUSH
28419: LD_INT 6
28421: LESS
28422: IFFALSE 28431
// YouLost ( NeedMorePep ) ;
28424: LD_STRING NeedMorePep
28426: PPUSH
28427: CALL_OW 104
// if tick < 20 20$00 then
28431: LD_OWVAR 1
28435: PUSH
28436: LD_INT 42000
28438: LESS
28439: IFFALSE 28448
// SetAchievement ( ACH_HSPEED_8 ) ;
28441: LD_STRING ACH_HSPEED_8
28443: PPUSH
28444: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
28448: LD_INT 22
28450: PUSH
28451: LD_INT 5
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 21
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PPUSH
28472: CALL_OW 69
28476: PUSH
28477: LD_INT 0
28479: EQUAL
28480: PUSH
28481: LD_EXP 32
28485: PUSH
28486: LD_INT 0
28488: EQUAL
28489: AND
28490: IFFALSE 28504
// AddMedal ( med1 , 1 ) else
28492: LD_STRING med1
28494: PPUSH
28495: LD_INT 1
28497: PPUSH
28498: CALL_OW 101
28502: GO 28515
// AddMedal ( med1 , - 1 ) ;
28504: LD_STRING med1
28506: PPUSH
28507: LD_INT 1
28509: NEG
28510: PPUSH
28511: CALL_OW 101
// if explosivePlantedList >= 3 then
28515: LD_EXP 29
28519: PUSH
28520: LD_INT 3
28522: GREATEREQUAL
28523: IFFALSE 28537
// AddMedal ( med2 , 1 ) else
28525: LD_STRING med2
28527: PPUSH
28528: LD_INT 1
28530: PPUSH
28531: CALL_OW 101
28535: GO 28571
// if explosivePlantedList < 3 then
28537: LD_EXP 29
28541: PUSH
28542: LD_INT 3
28544: LESS
28545: IFFALSE 28560
// AddMedal ( med2 , - 2 ) else
28547: LD_STRING med2
28549: PPUSH
28550: LD_INT 2
28552: NEG
28553: PPUSH
28554: CALL_OW 101
28558: GO 28571
// AddMedal ( med2 , - 1 ) ;
28560: LD_STRING med2
28562: PPUSH
28563: LD_INT 1
28565: NEG
28566: PPUSH
28567: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
28571: LD_INT 5
28573: PPUSH
28574: LD_INT 2
28576: PPUSH
28577: CALL_OW 321
28581: PUSH
28582: LD_INT 2
28584: EQUAL
28585: IFFALSE 28599
// AddMedal ( med3 , 1 ) else
28587: LD_STRING med3
28589: PPUSH
28590: LD_INT 1
28592: PPUSH
28593: CALL_OW 101
28597: GO 28610
// AddMedal ( med3 , - 1 ) ;
28599: LD_STRING med3
28601: PPUSH
28602: LD_INT 1
28604: NEG
28605: PPUSH
28606: CALL_OW 101
// GiveMedals ( MAIN ) ;
28610: LD_STRING MAIN
28612: PPUSH
28613: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ;
28617: LD_ADDR_VAR 0 2
28621: PUSH
28622: LD_INT 22
28624: PUSH
28625: LD_INT 2
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 21
28634: PUSH
28635: LD_INT 1
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 50
28644: PUSH
28645: EMPTY
28646: LIST
28647: PUSH
28648: LD_INT 95
28650: PUSH
28651: LD_INT 59
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: PPUSH
28664: CALL_OW 69
28668: ST_TO_ADDR
// RewardPeople ( UnitFilter ( tmp , [ f_nation , 2 ] ) ) ;
28669: LD_VAR 0 2
28673: PPUSH
28674: LD_INT 23
28676: PUSH
28677: LD_INT 2
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PPUSH
28684: CALL_OW 72
28688: PPUSH
28689: CALL_OW 43
// if Doug and Doug in tmp then
28693: LD_EXP 60
28697: PUSH
28698: LD_EXP 60
28702: PUSH
28703: LD_VAR 0 2
28707: IN
28708: AND
28709: IFFALSE 28723
// SaveCharacters ( Doug , 08_UsCommander ) ;
28711: LD_EXP 60
28715: PPUSH
28716: LD_STRING 08_UsCommander
28718: PPUSH
28719: CALL_OW 38
// if Harris and Harris in tmp then
28723: LD_EXP 59
28727: PUSH
28728: LD_EXP 59
28732: PUSH
28733: LD_VAR 0 2
28737: IN
28738: AND
28739: IFFALSE 28753
// SaveCharacters ( Harris , 08_Harris ) ;
28741: LD_EXP 59
28745: PPUSH
28746: LD_STRING 08_Harris
28748: PPUSH
28749: CALL_OW 38
// SaveCharacters ( UnitFilter ( tmp , [ f_nation , 1 ] ) diff [ Doug , Harris ] , 08_Americans ) ;
28753: LD_VAR 0 2
28757: PPUSH
28758: LD_INT 23
28760: PUSH
28761: LD_INT 1
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PPUSH
28768: CALL_OW 72
28772: PUSH
28773: LD_EXP 60
28777: PUSH
28778: LD_EXP 59
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: DIFF
28787: PPUSH
28788: LD_STRING 08_Americans
28790: PPUSH
28791: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
28795: LD_EXP 46
28799: PPUSH
28800: CALL_OW 248
28804: PUSH
28805: LD_INT 3
28807: EQUAL
28808: IFFALSE 28838
// begin CopySkills ( Heike , HeikeTmp ) ;
28810: LD_EXP 46
28814: PPUSH
28815: LD_EXP 62
28819: PPUSH
28820: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
28824: LD_EXP 62
28828: PPUSH
28829: LD_STRING 08_Heike
28831: PPUSH
28832: CALL_OW 38
// end else
28836: GO 28850
// SaveCharacters ( Heike , 08_Heike ) ;
28838: LD_EXP 46
28842: PPUSH
28843: LD_STRING 08_Heike
28845: PPUSH
28846: CALL_OW 38
// if Aviradze and Aviradze in tmp then
28850: LD_EXP 56
28854: PUSH
28855: LD_EXP 56
28859: PUSH
28860: LD_VAR 0 2
28864: IN
28865: AND
28866: IFFALSE 28880
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
28868: LD_EXP 56
28872: PPUSH
28873: LD_STRING 08_Aviradze
28875: PPUSH
28876: CALL_OW 38
// if Ibrahim and Ibrahim in tmp then
28880: LD_EXP 49
28884: PUSH
28885: LD_EXP 49
28889: PUSH
28890: LD_VAR 0 2
28894: IN
28895: AND
28896: IFFALSE 28910
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
28898: LD_EXP 49
28902: PPUSH
28903: LD_STRING 08_Ibrahim
28905: PPUSH
28906: CALL_OW 38
// if Kamil and Kamil in tmp then
28910: LD_EXP 50
28914: PUSH
28915: LD_EXP 50
28919: PUSH
28920: LD_VAR 0 2
28924: IN
28925: AND
28926: IFFALSE 28940
// SaveCharacters ( Kamil , 08_Kamil ) ;
28928: LD_EXP 50
28932: PPUSH
28933: LD_STRING 08_Kamil
28935: PPUSH
28936: CALL_OW 38
// if Sophia and Sophia in tmp then
28940: LD_EXP 52
28944: PUSH
28945: LD_EXP 52
28949: PUSH
28950: LD_VAR 0 2
28954: IN
28955: AND
28956: IFFALSE 28970
// SaveCharacters ( Sophia , 08_Sophia ) ;
28958: LD_EXP 52
28962: PPUSH
28963: LD_STRING 08_Sophia
28965: PPUSH
28966: CALL_OW 38
// if Kaia and Kaia in tmp then
28970: LD_EXP 51
28974: PUSH
28975: LD_EXP 51
28979: PUSH
28980: LD_VAR 0 2
28984: IN
28985: AND
28986: IFFALSE 29000
// SaveCharacters ( Kaia , 08_Kaia ) ;
28988: LD_EXP 51
28992: PPUSH
28993: LD_STRING 08_Kaia
28995: PPUSH
28996: CALL_OW 38
// if Givi and Givi in tmp then
29000: LD_EXP 47
29004: PUSH
29005: LD_EXP 47
29009: PUSH
29010: LD_VAR 0 2
29014: IN
29015: AND
29016: IFFALSE 29073
// if GetNation ( Givi ) = nation_russian then
29018: LD_EXP 47
29022: PPUSH
29023: CALL_OW 248
29027: PUSH
29028: LD_INT 3
29030: EQUAL
29031: IFFALSE 29061
// begin CopySkills ( Givi , GiviTmp ) ;
29033: LD_EXP 47
29037: PPUSH
29038: LD_EXP 63
29042: PPUSH
29043: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
29047: LD_EXP 63
29051: PPUSH
29052: LD_STRING 08_Givi
29054: PPUSH
29055: CALL_OW 38
// end else
29059: GO 29073
// SaveCharacters ( Givi , 08_Givi ) ;
29061: LD_EXP 47
29065: PPUSH
29066: LD_STRING 08_Givi
29068: PPUSH
29069: CALL_OW 38
// if Mike and Mike in tmp then
29073: LD_EXP 48
29077: PUSH
29078: LD_EXP 48
29082: PUSH
29083: LD_VAR 0 2
29087: IN
29088: AND
29089: IFFALSE 29103
// SaveCharacters ( Mike , 08_Mike ) ;
29091: LD_EXP 48
29095: PPUSH
29096: LD_STRING 08_Mike
29098: PPUSH
29099: CALL_OW 38
// if Markov and Markov in tmp then
29103: LD_EXP 53
29107: PUSH
29108: LD_EXP 53
29112: PUSH
29113: LD_VAR 0 2
29117: IN
29118: AND
29119: IFFALSE 29133
// SaveCharacters ( Markov , 08_Markov ) ;
29121: LD_EXP 53
29125: PPUSH
29126: LD_STRING 08_Markov
29128: PPUSH
29129: CALL_OW 38
// if Kurt and Kurt in tmp then
29133: LD_EXP 55
29137: PUSH
29138: LD_EXP 55
29142: PUSH
29143: LD_VAR 0 2
29147: IN
29148: AND
29149: IFFALSE 29163
// SaveCharacters ( Kurt , 08_Kurt ) ;
29151: LD_EXP 55
29155: PPUSH
29156: LD_STRING 08_Kurt
29158: PPUSH
29159: CALL_OW 38
// if Olaf and Olaf in tmp then
29163: LD_EXP 54
29167: PUSH
29168: LD_EXP 54
29172: PUSH
29173: LD_VAR 0 2
29177: IN
29178: AND
29179: IFFALSE 29193
// SaveCharacters ( Olaf , 08_Olaf ) ;
29181: LD_EXP 54
29185: PPUSH
29186: LD_STRING 08_Olaf
29188: PPUSH
29189: CALL_OW 38
// if UnitFilter ( heikeSecondSquad , [ [ f_inarea , finalArea ] , [ f_ok ] ] ) then
29193: LD_EXP 57
29197: PPUSH
29198: LD_INT 95
29200: PUSH
29201: LD_INT 59
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 50
29210: PUSH
29211: EMPTY
29212: LIST
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PPUSH
29218: CALL_OW 72
29222: IFFALSE 29261
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , finalArea ] , [ f_ok ] ] ) , 08_others ) ;
29224: LD_EXP 57
29228: PPUSH
29229: LD_INT 95
29231: PUSH
29232: LD_INT 59
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 50
29241: PUSH
29242: EMPTY
29243: LIST
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PPUSH
29249: CALL_OW 72
29253: PPUSH
29254: LD_STRING 08_others
29256: PPUSH
29257: CALL_OW 38
// YouWin ;
29261: CALL_OW 103
// DialogueOff ;
29265: CALL_OW 7
// end ; end_of_file
29269: LD_VAR 0 1
29273: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
29274: LD_EXP 5
29278: IFFALSE 29468
29280: GO 29282
29282: DISABLE
29283: LD_INT 0
29285: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
29286: LD_INT 35
29288: PPUSH
29289: LD_INT 2100
29291: PPUSH
29292: CALL_OW 12
29296: PPUSH
29297: CALL_OW 67
// StopOriginalMusic ;
29301: CALL 93681 0 0
// weatherBusy := true ;
29305: LD_ADDR_EXP 37
29309: PUSH
29310: LD_INT 1
29312: ST_TO_ADDR
// for i := 1 to 3 do
29313: LD_ADDR_VAR 0 1
29317: PUSH
29318: DOUBLE
29319: LD_INT 1
29321: DEC
29322: ST_TO_ADDR
29323: LD_INT 3
29325: PUSH
29326: FOR_TO
29327: IFFALSE 29361
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
29329: LD_INT 1
29331: PPUSH
29332: LD_INT 100
29334: PUSH
29335: LD_INT 100
29337: PUSH
29338: LD_VAR 0 1
29342: MUL
29343: PLUS
29344: PPUSH
29345: LD_INT 60
29347: PPUSH
29348: CALL_OW 550
// wait ( 0 0$2 ) ;
29352: LD_INT 70
29354: PPUSH
29355: CALL_OW 67
// end ;
29359: GO 29326
29361: POP
29362: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
29363: LD_STRING ArStormRain.wav
29365: PPUSH
29366: LD_STRING OW_CUSTOM_COMMAND(103);
29368: PPUSH
29369: CALL 93711 0 2
// wait ( 0 0$3 ) ;
29373: LD_INT 105
29375: PPUSH
29376: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
29380: LD_INT 1
29382: PPUSH
29383: LD_INT 900
29385: PPUSH
29386: LD_INT 120
29388: PPUSH
29389: CALL_OW 550
// wait ( 0 0$10 ) ;
29393: LD_INT 350
29395: PPUSH
29396: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
29400: LD_INT 1
29402: PPUSH
29403: LD_INT 1500
29405: PPUSH
29406: LD_INT 300
29408: PPUSH
29409: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
29413: LD_INT 35
29415: PPUSH
29416: CALL_OW 67
// until not weatherBusy ;
29420: LD_EXP 37
29424: NOT
29425: IFFALSE 29413
// SetWeather ( 0 , 0 , 0 ) ;
29427: LD_INT 0
29429: PPUSH
29430: LD_INT 0
29432: PPUSH
29433: LD_INT 0
29435: PPUSH
29436: CALL_OW 550
// wait ( 5 5$00 ) ;
29440: LD_INT 10500
29442: PPUSH
29443: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
29447: LD_STRING ArStormNormal.wav
29449: PPUSH
29450: LD_STRING OW_CUSTOM_COMMAND(103);
29452: PPUSH
29453: CALL 93711 0 2
// wait ( 5 5$00 ) ;
29457: LD_INT 10500
29459: PPUSH
29460: CALL_OW 67
// PlayOriginalMusic ;
29464: CALL 93696 0 0
// end ; end_of_file
29468: PPOPN 1
29470: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29471: LD_INT 0
29473: PPUSH
29474: PPUSH
// if exist_mode then
29475: LD_VAR 0 2
29479: IFFALSE 29525
// begin unit := CreateCharacter ( prefix & ident ) ;
29481: LD_ADDR_VAR 0 5
29485: PUSH
29486: LD_VAR 0 3
29490: PUSH
29491: LD_VAR 0 1
29495: STR
29496: PPUSH
29497: CALL_OW 34
29501: ST_TO_ADDR
// if unit then
29502: LD_VAR 0 5
29506: IFFALSE 29523
// DeleteCharacters ( prefix & ident ) ;
29508: LD_VAR 0 3
29512: PUSH
29513: LD_VAR 0 1
29517: STR
29518: PPUSH
29519: CALL_OW 40
// end else
29523: GO 29540
// unit := NewCharacter ( ident ) ;
29525: LD_ADDR_VAR 0 5
29529: PUSH
29530: LD_VAR 0 1
29534: PPUSH
29535: CALL_OW 25
29539: ST_TO_ADDR
// result := unit ;
29540: LD_ADDR_VAR 0 4
29544: PUSH
29545: LD_VAR 0 5
29549: ST_TO_ADDR
// end ;
29550: LD_VAR 0 4
29554: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29555: LD_INT 0
29557: PPUSH
29558: PPUSH
// if not side or not nation then
29559: LD_VAR 0 1
29563: NOT
29564: PUSH
29565: LD_VAR 0 2
29569: NOT
29570: OR
29571: IFFALSE 29575
// exit ;
29573: GO 30343
// case nation of nation_american :
29575: LD_VAR 0 2
29579: PUSH
29580: LD_INT 1
29582: DOUBLE
29583: EQUAL
29584: IFTRUE 29588
29586: GO 29802
29588: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29589: LD_ADDR_VAR 0 4
29593: PUSH
29594: LD_INT 35
29596: PUSH
29597: LD_INT 45
29599: PUSH
29600: LD_INT 46
29602: PUSH
29603: LD_INT 47
29605: PUSH
29606: LD_INT 82
29608: PUSH
29609: LD_INT 83
29611: PUSH
29612: LD_INT 84
29614: PUSH
29615: LD_INT 85
29617: PUSH
29618: LD_INT 86
29620: PUSH
29621: LD_INT 1
29623: PUSH
29624: LD_INT 2
29626: PUSH
29627: LD_INT 6
29629: PUSH
29630: LD_INT 15
29632: PUSH
29633: LD_INT 16
29635: PUSH
29636: LD_INT 7
29638: PUSH
29639: LD_INT 12
29641: PUSH
29642: LD_INT 13
29644: PUSH
29645: LD_INT 10
29647: PUSH
29648: LD_INT 14
29650: PUSH
29651: LD_INT 20
29653: PUSH
29654: LD_INT 21
29656: PUSH
29657: LD_INT 22
29659: PUSH
29660: LD_INT 25
29662: PUSH
29663: LD_INT 32
29665: PUSH
29666: LD_INT 27
29668: PUSH
29669: LD_INT 36
29671: PUSH
29672: LD_INT 69
29674: PUSH
29675: LD_INT 39
29677: PUSH
29678: LD_INT 34
29680: PUSH
29681: LD_INT 40
29683: PUSH
29684: LD_INT 48
29686: PUSH
29687: LD_INT 49
29689: PUSH
29690: LD_INT 50
29692: PUSH
29693: LD_INT 51
29695: PUSH
29696: LD_INT 52
29698: PUSH
29699: LD_INT 53
29701: PUSH
29702: LD_INT 54
29704: PUSH
29705: LD_INT 55
29707: PUSH
29708: LD_INT 56
29710: PUSH
29711: LD_INT 57
29713: PUSH
29714: LD_INT 58
29716: PUSH
29717: LD_INT 59
29719: PUSH
29720: LD_INT 60
29722: PUSH
29723: LD_INT 61
29725: PUSH
29726: LD_INT 62
29728: PUSH
29729: LD_INT 80
29731: PUSH
29732: LD_INT 82
29734: PUSH
29735: LD_INT 83
29737: PUSH
29738: LD_INT 84
29740: PUSH
29741: LD_INT 85
29743: PUSH
29744: LD_INT 86
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: ST_TO_ADDR
29800: GO 30267
29802: LD_INT 2
29804: DOUBLE
29805: EQUAL
29806: IFTRUE 29810
29808: GO 30036
29810: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29811: LD_ADDR_VAR 0 4
29815: PUSH
29816: LD_INT 35
29818: PUSH
29819: LD_INT 45
29821: PUSH
29822: LD_INT 46
29824: PUSH
29825: LD_INT 47
29827: PUSH
29828: LD_INT 82
29830: PUSH
29831: LD_INT 83
29833: PUSH
29834: LD_INT 84
29836: PUSH
29837: LD_INT 85
29839: PUSH
29840: LD_INT 87
29842: PUSH
29843: LD_INT 70
29845: PUSH
29846: LD_INT 1
29848: PUSH
29849: LD_INT 11
29851: PUSH
29852: LD_INT 3
29854: PUSH
29855: LD_INT 4
29857: PUSH
29858: LD_INT 5
29860: PUSH
29861: LD_INT 6
29863: PUSH
29864: LD_INT 15
29866: PUSH
29867: LD_INT 18
29869: PUSH
29870: LD_INT 7
29872: PUSH
29873: LD_INT 17
29875: PUSH
29876: LD_INT 8
29878: PUSH
29879: LD_INT 20
29881: PUSH
29882: LD_INT 21
29884: PUSH
29885: LD_INT 22
29887: PUSH
29888: LD_INT 72
29890: PUSH
29891: LD_INT 26
29893: PUSH
29894: LD_INT 69
29896: PUSH
29897: LD_INT 39
29899: PUSH
29900: LD_INT 40
29902: PUSH
29903: LD_INT 41
29905: PUSH
29906: LD_INT 42
29908: PUSH
29909: LD_INT 43
29911: PUSH
29912: LD_INT 48
29914: PUSH
29915: LD_INT 49
29917: PUSH
29918: LD_INT 50
29920: PUSH
29921: LD_INT 51
29923: PUSH
29924: LD_INT 52
29926: PUSH
29927: LD_INT 53
29929: PUSH
29930: LD_INT 54
29932: PUSH
29933: LD_INT 55
29935: PUSH
29936: LD_INT 56
29938: PUSH
29939: LD_INT 60
29941: PUSH
29942: LD_INT 61
29944: PUSH
29945: LD_INT 62
29947: PUSH
29948: LD_INT 66
29950: PUSH
29951: LD_INT 67
29953: PUSH
29954: LD_INT 68
29956: PUSH
29957: LD_INT 81
29959: PUSH
29960: LD_INT 82
29962: PUSH
29963: LD_INT 83
29965: PUSH
29966: LD_INT 84
29968: PUSH
29969: LD_INT 85
29971: PUSH
29972: LD_INT 87
29974: PUSH
29975: LD_INT 88
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: ST_TO_ADDR
30034: GO 30267
30036: LD_INT 3
30038: DOUBLE
30039: EQUAL
30040: IFTRUE 30044
30042: GO 30266
30044: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30045: LD_ADDR_VAR 0 4
30049: PUSH
30050: LD_INT 46
30052: PUSH
30053: LD_INT 47
30055: PUSH
30056: LD_INT 1
30058: PUSH
30059: LD_INT 2
30061: PUSH
30062: LD_INT 82
30064: PUSH
30065: LD_INT 83
30067: PUSH
30068: LD_INT 84
30070: PUSH
30071: LD_INT 85
30073: PUSH
30074: LD_INT 86
30076: PUSH
30077: LD_INT 11
30079: PUSH
30080: LD_INT 9
30082: PUSH
30083: LD_INT 20
30085: PUSH
30086: LD_INT 19
30088: PUSH
30089: LD_INT 21
30091: PUSH
30092: LD_INT 24
30094: PUSH
30095: LD_INT 22
30097: PUSH
30098: LD_INT 25
30100: PUSH
30101: LD_INT 28
30103: PUSH
30104: LD_INT 29
30106: PUSH
30107: LD_INT 30
30109: PUSH
30110: LD_INT 31
30112: PUSH
30113: LD_INT 37
30115: PUSH
30116: LD_INT 38
30118: PUSH
30119: LD_INT 32
30121: PUSH
30122: LD_INT 27
30124: PUSH
30125: LD_INT 33
30127: PUSH
30128: LD_INT 69
30130: PUSH
30131: LD_INT 39
30133: PUSH
30134: LD_INT 34
30136: PUSH
30137: LD_INT 40
30139: PUSH
30140: LD_INT 71
30142: PUSH
30143: LD_INT 23
30145: PUSH
30146: LD_INT 44
30148: PUSH
30149: LD_INT 48
30151: PUSH
30152: LD_INT 49
30154: PUSH
30155: LD_INT 50
30157: PUSH
30158: LD_INT 51
30160: PUSH
30161: LD_INT 52
30163: PUSH
30164: LD_INT 53
30166: PUSH
30167: LD_INT 54
30169: PUSH
30170: LD_INT 55
30172: PUSH
30173: LD_INT 56
30175: PUSH
30176: LD_INT 57
30178: PUSH
30179: LD_INT 58
30181: PUSH
30182: LD_INT 59
30184: PUSH
30185: LD_INT 63
30187: PUSH
30188: LD_INT 64
30190: PUSH
30191: LD_INT 65
30193: PUSH
30194: LD_INT 82
30196: PUSH
30197: LD_INT 83
30199: PUSH
30200: LD_INT 84
30202: PUSH
30203: LD_INT 85
30205: PUSH
30206: LD_INT 86
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: ST_TO_ADDR
30264: GO 30267
30266: POP
// if state > - 1 and state < 3 then
30267: LD_VAR 0 3
30271: PUSH
30272: LD_INT 1
30274: NEG
30275: GREATER
30276: PUSH
30277: LD_VAR 0 3
30281: PUSH
30282: LD_INT 3
30284: LESS
30285: AND
30286: IFFALSE 30343
// for i in result do
30288: LD_ADDR_VAR 0 5
30292: PUSH
30293: LD_VAR 0 4
30297: PUSH
30298: FOR_IN
30299: IFFALSE 30341
// if GetTech ( i , side ) <> state then
30301: LD_VAR 0 5
30305: PPUSH
30306: LD_VAR 0 1
30310: PPUSH
30311: CALL_OW 321
30315: PUSH
30316: LD_VAR 0 3
30320: NONEQUAL
30321: IFFALSE 30339
// result := result diff i ;
30323: LD_ADDR_VAR 0 4
30327: PUSH
30328: LD_VAR 0 4
30332: PUSH
30333: LD_VAR 0 5
30337: DIFF
30338: ST_TO_ADDR
30339: GO 30298
30341: POP
30342: POP
// end ;
30343: LD_VAR 0 4
30347: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30348: LD_INT 0
30350: PPUSH
30351: PPUSH
30352: PPUSH
// result := true ;
30353: LD_ADDR_VAR 0 3
30357: PUSH
30358: LD_INT 1
30360: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30361: LD_ADDR_VAR 0 5
30365: PUSH
30366: LD_VAR 0 2
30370: PPUSH
30371: CALL_OW 480
30375: ST_TO_ADDR
// if not tmp then
30376: LD_VAR 0 5
30380: NOT
30381: IFFALSE 30385
// exit ;
30383: GO 30434
// for i in tmp do
30385: LD_ADDR_VAR 0 4
30389: PUSH
30390: LD_VAR 0 5
30394: PUSH
30395: FOR_IN
30396: IFFALSE 30432
// if GetTech ( i , side ) <> state_researched then
30398: LD_VAR 0 4
30402: PPUSH
30403: LD_VAR 0 1
30407: PPUSH
30408: CALL_OW 321
30412: PUSH
30413: LD_INT 2
30415: NONEQUAL
30416: IFFALSE 30430
// begin result := false ;
30418: LD_ADDR_VAR 0 3
30422: PUSH
30423: LD_INT 0
30425: ST_TO_ADDR
// exit ;
30426: POP
30427: POP
30428: GO 30434
// end ;
30430: GO 30395
30432: POP
30433: POP
// end ;
30434: LD_VAR 0 3
30438: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30439: LD_INT 0
30441: PPUSH
30442: PPUSH
30443: PPUSH
30444: PPUSH
30445: PPUSH
30446: PPUSH
30447: PPUSH
30448: PPUSH
30449: PPUSH
30450: PPUSH
30451: PPUSH
30452: PPUSH
30453: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30454: LD_VAR 0 1
30458: NOT
30459: PUSH
30460: LD_VAR 0 1
30464: PPUSH
30465: CALL_OW 257
30469: PUSH
30470: LD_INT 9
30472: NONEQUAL
30473: OR
30474: IFFALSE 30478
// exit ;
30476: GO 31051
// side := GetSide ( unit ) ;
30478: LD_ADDR_VAR 0 9
30482: PUSH
30483: LD_VAR 0 1
30487: PPUSH
30488: CALL_OW 255
30492: ST_TO_ADDR
// tech_space := tech_spacanom ;
30493: LD_ADDR_VAR 0 12
30497: PUSH
30498: LD_INT 29
30500: ST_TO_ADDR
// tech_time := tech_taurad ;
30501: LD_ADDR_VAR 0 13
30505: PUSH
30506: LD_INT 28
30508: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30509: LD_ADDR_VAR 0 11
30513: PUSH
30514: LD_VAR 0 1
30518: PPUSH
30519: CALL_OW 310
30523: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30524: LD_VAR 0 11
30528: PPUSH
30529: CALL_OW 247
30533: PUSH
30534: LD_INT 2
30536: EQUAL
30537: IFFALSE 30541
// exit ;
30539: GO 31051
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30541: LD_ADDR_VAR 0 8
30545: PUSH
30546: LD_INT 81
30548: PUSH
30549: LD_VAR 0 9
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 3
30560: PUSH
30561: LD_INT 21
30563: PUSH
30564: LD_INT 3
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PPUSH
30579: CALL_OW 69
30583: ST_TO_ADDR
// if not tmp then
30584: LD_VAR 0 8
30588: NOT
30589: IFFALSE 30593
// exit ;
30591: GO 31051
// if in_unit then
30593: LD_VAR 0 11
30597: IFFALSE 30621
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30599: LD_ADDR_VAR 0 10
30603: PUSH
30604: LD_VAR 0 8
30608: PPUSH
30609: LD_VAR 0 11
30613: PPUSH
30614: CALL_OW 74
30618: ST_TO_ADDR
30619: GO 30641
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30621: LD_ADDR_VAR 0 10
30625: PUSH
30626: LD_VAR 0 8
30630: PPUSH
30631: LD_VAR 0 1
30635: PPUSH
30636: CALL_OW 74
30640: ST_TO_ADDR
// if not enemy then
30641: LD_VAR 0 10
30645: NOT
30646: IFFALSE 30650
// exit ;
30648: GO 31051
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30650: LD_VAR 0 11
30654: PUSH
30655: LD_VAR 0 11
30659: PPUSH
30660: LD_VAR 0 10
30664: PPUSH
30665: CALL_OW 296
30669: PUSH
30670: LD_INT 13
30672: GREATER
30673: AND
30674: PUSH
30675: LD_VAR 0 1
30679: PPUSH
30680: LD_VAR 0 10
30684: PPUSH
30685: CALL_OW 296
30689: PUSH
30690: LD_INT 12
30692: GREATER
30693: OR
30694: IFFALSE 30698
// exit ;
30696: GO 31051
// missile := [ 1 ] ;
30698: LD_ADDR_VAR 0 14
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: EMPTY
30707: LIST
30708: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30709: LD_VAR 0 9
30713: PPUSH
30714: LD_VAR 0 12
30718: PPUSH
30719: CALL_OW 325
30723: IFFALSE 30752
// missile := Replace ( missile , missile + 1 , 2 ) ;
30725: LD_ADDR_VAR 0 14
30729: PUSH
30730: LD_VAR 0 14
30734: PPUSH
30735: LD_VAR 0 14
30739: PUSH
30740: LD_INT 1
30742: PLUS
30743: PPUSH
30744: LD_INT 2
30746: PPUSH
30747: CALL_OW 1
30751: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30752: LD_VAR 0 9
30756: PPUSH
30757: LD_VAR 0 13
30761: PPUSH
30762: CALL_OW 325
30766: PUSH
30767: LD_VAR 0 10
30771: PPUSH
30772: CALL_OW 255
30776: PPUSH
30777: LD_VAR 0 13
30781: PPUSH
30782: CALL_OW 325
30786: NOT
30787: AND
30788: IFFALSE 30817
// missile := Replace ( missile , missile + 1 , 3 ) ;
30790: LD_ADDR_VAR 0 14
30794: PUSH
30795: LD_VAR 0 14
30799: PPUSH
30800: LD_VAR 0 14
30804: PUSH
30805: LD_INT 1
30807: PLUS
30808: PPUSH
30809: LD_INT 3
30811: PPUSH
30812: CALL_OW 1
30816: ST_TO_ADDR
// if missile < 2 then
30817: LD_VAR 0 14
30821: PUSH
30822: LD_INT 2
30824: LESS
30825: IFFALSE 30829
// exit ;
30827: GO 31051
// x := GetX ( enemy ) ;
30829: LD_ADDR_VAR 0 4
30833: PUSH
30834: LD_VAR 0 10
30838: PPUSH
30839: CALL_OW 250
30843: ST_TO_ADDR
// y := GetY ( enemy ) ;
30844: LD_ADDR_VAR 0 5
30848: PUSH
30849: LD_VAR 0 10
30853: PPUSH
30854: CALL_OW 251
30858: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30859: LD_ADDR_VAR 0 6
30863: PUSH
30864: LD_VAR 0 4
30868: PUSH
30869: LD_INT 1
30871: NEG
30872: PPUSH
30873: LD_INT 1
30875: PPUSH
30876: CALL_OW 12
30880: PLUS
30881: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30882: LD_ADDR_VAR 0 7
30886: PUSH
30887: LD_VAR 0 5
30891: PUSH
30892: LD_INT 1
30894: NEG
30895: PPUSH
30896: LD_INT 1
30898: PPUSH
30899: CALL_OW 12
30903: PLUS
30904: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30905: LD_VAR 0 6
30909: PPUSH
30910: LD_VAR 0 7
30914: PPUSH
30915: CALL_OW 488
30919: NOT
30920: IFFALSE 30942
// begin _x := x ;
30922: LD_ADDR_VAR 0 6
30926: PUSH
30927: LD_VAR 0 4
30931: ST_TO_ADDR
// _y := y ;
30932: LD_ADDR_VAR 0 7
30936: PUSH
30937: LD_VAR 0 5
30941: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30942: LD_ADDR_VAR 0 3
30946: PUSH
30947: LD_INT 1
30949: PPUSH
30950: LD_VAR 0 14
30954: PPUSH
30955: CALL_OW 12
30959: ST_TO_ADDR
// case i of 1 :
30960: LD_VAR 0 3
30964: PUSH
30965: LD_INT 1
30967: DOUBLE
30968: EQUAL
30969: IFTRUE 30973
30971: GO 30990
30973: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30974: LD_VAR 0 1
30978: PPUSH
30979: LD_VAR 0 10
30983: PPUSH
30984: CALL_OW 115
30988: GO 31051
30990: LD_INT 2
30992: DOUBLE
30993: EQUAL
30994: IFTRUE 30998
30996: GO 31020
30998: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30999: LD_VAR 0 1
31003: PPUSH
31004: LD_VAR 0 6
31008: PPUSH
31009: LD_VAR 0 7
31013: PPUSH
31014: CALL_OW 153
31018: GO 31051
31020: LD_INT 3
31022: DOUBLE
31023: EQUAL
31024: IFTRUE 31028
31026: GO 31050
31028: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31029: LD_VAR 0 1
31033: PPUSH
31034: LD_VAR 0 6
31038: PPUSH
31039: LD_VAR 0 7
31043: PPUSH
31044: CALL_OW 154
31048: GO 31051
31050: POP
// end ;
31051: LD_VAR 0 2
31055: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31056: LD_INT 0
31058: PPUSH
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
31063: PPUSH
// if not unit or not building then
31064: LD_VAR 0 1
31068: NOT
31069: PUSH
31070: LD_VAR 0 2
31074: NOT
31075: OR
31076: IFFALSE 31080
// exit ;
31078: GO 31238
// x := GetX ( building ) ;
31080: LD_ADDR_VAR 0 5
31084: PUSH
31085: LD_VAR 0 2
31089: PPUSH
31090: CALL_OW 250
31094: ST_TO_ADDR
// y := GetY ( building ) ;
31095: LD_ADDR_VAR 0 6
31099: PUSH
31100: LD_VAR 0 2
31104: PPUSH
31105: CALL_OW 251
31109: ST_TO_ADDR
// for i = 0 to 5 do
31110: LD_ADDR_VAR 0 4
31114: PUSH
31115: DOUBLE
31116: LD_INT 0
31118: DEC
31119: ST_TO_ADDR
31120: LD_INT 5
31122: PUSH
31123: FOR_TO
31124: IFFALSE 31236
// begin _x := ShiftX ( x , i , 3 ) ;
31126: LD_ADDR_VAR 0 7
31130: PUSH
31131: LD_VAR 0 5
31135: PPUSH
31136: LD_VAR 0 4
31140: PPUSH
31141: LD_INT 3
31143: PPUSH
31144: CALL_OW 272
31148: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31149: LD_ADDR_VAR 0 8
31153: PUSH
31154: LD_VAR 0 6
31158: PPUSH
31159: LD_VAR 0 4
31163: PPUSH
31164: LD_INT 3
31166: PPUSH
31167: CALL_OW 273
31171: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31172: LD_VAR 0 7
31176: PPUSH
31177: LD_VAR 0 8
31181: PPUSH
31182: CALL_OW 488
31186: NOT
31187: IFFALSE 31191
// continue ;
31189: GO 31123
// if HexInfo ( _x , _y ) = 0 then
31191: LD_VAR 0 7
31195: PPUSH
31196: LD_VAR 0 8
31200: PPUSH
31201: CALL_OW 428
31205: PUSH
31206: LD_INT 0
31208: EQUAL
31209: IFFALSE 31234
// begin ComMoveXY ( unit , _x , _y ) ;
31211: LD_VAR 0 1
31215: PPUSH
31216: LD_VAR 0 7
31220: PPUSH
31221: LD_VAR 0 8
31225: PPUSH
31226: CALL_OW 111
// exit ;
31230: POP
31231: POP
31232: GO 31238
// end ; end ;
31234: GO 31123
31236: POP
31237: POP
// end ;
31238: LD_VAR 0 3
31242: RET
// export function ScanBase ( side , base_area ) ; begin
31243: LD_INT 0
31245: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31246: LD_ADDR_VAR 0 3
31250: PUSH
31251: LD_VAR 0 2
31255: PPUSH
31256: LD_INT 81
31258: PUSH
31259: LD_VAR 0 1
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PPUSH
31268: CALL_OW 70
31272: ST_TO_ADDR
// end ;
31273: LD_VAR 0 3
31277: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31278: LD_INT 0
31280: PPUSH
31281: PPUSH
31282: PPUSH
31283: PPUSH
// result := false ;
31284: LD_ADDR_VAR 0 2
31288: PUSH
31289: LD_INT 0
31291: ST_TO_ADDR
// side := GetSide ( unit ) ;
31292: LD_ADDR_VAR 0 3
31296: PUSH
31297: LD_VAR 0 1
31301: PPUSH
31302: CALL_OW 255
31306: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31307: LD_ADDR_VAR 0 4
31311: PUSH
31312: LD_VAR 0 1
31316: PPUSH
31317: CALL_OW 248
31321: ST_TO_ADDR
// case nat of 1 :
31322: LD_VAR 0 4
31326: PUSH
31327: LD_INT 1
31329: DOUBLE
31330: EQUAL
31331: IFTRUE 31335
31333: GO 31346
31335: POP
// tech := tech_lassight ; 2 :
31336: LD_ADDR_VAR 0 5
31340: PUSH
31341: LD_INT 12
31343: ST_TO_ADDR
31344: GO 31385
31346: LD_INT 2
31348: DOUBLE
31349: EQUAL
31350: IFTRUE 31354
31352: GO 31365
31354: POP
// tech := tech_mortar ; 3 :
31355: LD_ADDR_VAR 0 5
31359: PUSH
31360: LD_INT 41
31362: ST_TO_ADDR
31363: GO 31385
31365: LD_INT 3
31367: DOUBLE
31368: EQUAL
31369: IFTRUE 31373
31371: GO 31384
31373: POP
// tech := tech_bazooka ; end ;
31374: LD_ADDR_VAR 0 5
31378: PUSH
31379: LD_INT 44
31381: ST_TO_ADDR
31382: GO 31385
31384: POP
// if Researched ( side , tech ) then
31385: LD_VAR 0 3
31389: PPUSH
31390: LD_VAR 0 5
31394: PPUSH
31395: CALL_OW 325
31399: IFFALSE 31426
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31401: LD_ADDR_VAR 0 2
31405: PUSH
31406: LD_INT 5
31408: PUSH
31409: LD_INT 8
31411: PUSH
31412: LD_INT 9
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: LIST
31419: PUSH
31420: LD_VAR 0 4
31424: ARRAY
31425: ST_TO_ADDR
// end ;
31426: LD_VAR 0 2
31430: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31431: LD_INT 0
31433: PPUSH
31434: PPUSH
31435: PPUSH
// if not mines then
31436: LD_VAR 0 2
31440: NOT
31441: IFFALSE 31445
// exit ;
31443: GO 31589
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31445: LD_ADDR_VAR 0 5
31449: PUSH
31450: LD_INT 81
31452: PUSH
31453: LD_VAR 0 1
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 3
31464: PUSH
31465: LD_INT 21
31467: PUSH
31468: LD_INT 3
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PPUSH
31483: CALL_OW 69
31487: ST_TO_ADDR
// for i in mines do
31488: LD_ADDR_VAR 0 4
31492: PUSH
31493: LD_VAR 0 2
31497: PUSH
31498: FOR_IN
31499: IFFALSE 31587
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31501: LD_VAR 0 4
31505: PUSH
31506: LD_INT 1
31508: ARRAY
31509: PPUSH
31510: LD_VAR 0 4
31514: PUSH
31515: LD_INT 2
31517: ARRAY
31518: PPUSH
31519: CALL_OW 458
31523: NOT
31524: IFFALSE 31528
// continue ;
31526: GO 31498
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31528: LD_VAR 0 4
31532: PUSH
31533: LD_INT 1
31535: ARRAY
31536: PPUSH
31537: LD_VAR 0 4
31541: PUSH
31542: LD_INT 2
31544: ARRAY
31545: PPUSH
31546: CALL_OW 428
31550: PUSH
31551: LD_VAR 0 5
31555: IN
31556: IFFALSE 31585
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31558: LD_VAR 0 4
31562: PUSH
31563: LD_INT 1
31565: ARRAY
31566: PPUSH
31567: LD_VAR 0 4
31571: PUSH
31572: LD_INT 2
31574: ARRAY
31575: PPUSH
31576: LD_VAR 0 1
31580: PPUSH
31581: CALL_OW 456
// end ;
31585: GO 31498
31587: POP
31588: POP
// end ;
31589: LD_VAR 0 3
31593: RET
// export function Count ( array ) ; begin
31594: LD_INT 0
31596: PPUSH
// result := array + 0 ;
31597: LD_ADDR_VAR 0 2
31601: PUSH
31602: LD_VAR 0 1
31606: PUSH
31607: LD_INT 0
31609: PLUS
31610: ST_TO_ADDR
// end ;
31611: LD_VAR 0 2
31615: RET
// export function IsEmpty ( building ) ; begin
31616: LD_INT 0
31618: PPUSH
// if not building then
31619: LD_VAR 0 1
31623: NOT
31624: IFFALSE 31628
// exit ;
31626: GO 31671
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31628: LD_ADDR_VAR 0 2
31632: PUSH
31633: LD_VAR 0 1
31637: PUSH
31638: LD_INT 22
31640: PUSH
31641: LD_VAR 0 1
31645: PPUSH
31646: CALL_OW 255
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 58
31657: PUSH
31658: EMPTY
31659: LIST
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PPUSH
31665: CALL_OW 69
31669: IN
31670: ST_TO_ADDR
// end ;
31671: LD_VAR 0 2
31675: RET
// export function IsNotFull ( building ) ; var places ; begin
31676: LD_INT 0
31678: PPUSH
31679: PPUSH
// if not building then
31680: LD_VAR 0 1
31684: NOT
31685: IFFALSE 31689
// exit ;
31687: GO 31717
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31689: LD_ADDR_VAR 0 2
31693: PUSH
31694: LD_VAR 0 1
31698: PPUSH
31699: LD_INT 3
31701: PUSH
31702: LD_INT 62
31704: PUSH
31705: EMPTY
31706: LIST
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PPUSH
31712: CALL_OW 72
31716: ST_TO_ADDR
// end ;
31717: LD_VAR 0 2
31721: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31722: LD_INT 0
31724: PPUSH
31725: PPUSH
31726: PPUSH
31727: PPUSH
// tmp := [ ] ;
31728: LD_ADDR_VAR 0 3
31732: PUSH
31733: EMPTY
31734: ST_TO_ADDR
// list := [ ] ;
31735: LD_ADDR_VAR 0 5
31739: PUSH
31740: EMPTY
31741: ST_TO_ADDR
// for i = 16 to 25 do
31742: LD_ADDR_VAR 0 4
31746: PUSH
31747: DOUBLE
31748: LD_INT 16
31750: DEC
31751: ST_TO_ADDR
31752: LD_INT 25
31754: PUSH
31755: FOR_TO
31756: IFFALSE 31829
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31758: LD_ADDR_VAR 0 3
31762: PUSH
31763: LD_VAR 0 3
31767: PUSH
31768: LD_INT 22
31770: PUSH
31771: LD_VAR 0 1
31775: PPUSH
31776: CALL_OW 255
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 91
31787: PUSH
31788: LD_VAR 0 1
31792: PUSH
31793: LD_INT 6
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 30
31803: PUSH
31804: LD_VAR 0 4
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: LIST
31817: PUSH
31818: EMPTY
31819: LIST
31820: PPUSH
31821: CALL_OW 69
31825: ADD
31826: ST_TO_ADDR
31827: GO 31755
31829: POP
31830: POP
// for i = 1 to tmp do
31831: LD_ADDR_VAR 0 4
31835: PUSH
31836: DOUBLE
31837: LD_INT 1
31839: DEC
31840: ST_TO_ADDR
31841: LD_VAR 0 3
31845: PUSH
31846: FOR_TO
31847: IFFALSE 31935
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31849: LD_ADDR_VAR 0 5
31853: PUSH
31854: LD_VAR 0 5
31858: PUSH
31859: LD_VAR 0 3
31863: PUSH
31864: LD_VAR 0 4
31868: ARRAY
31869: PPUSH
31870: CALL_OW 266
31874: PUSH
31875: LD_VAR 0 3
31879: PUSH
31880: LD_VAR 0 4
31884: ARRAY
31885: PPUSH
31886: CALL_OW 250
31890: PUSH
31891: LD_VAR 0 3
31895: PUSH
31896: LD_VAR 0 4
31900: ARRAY
31901: PPUSH
31902: CALL_OW 251
31906: PUSH
31907: LD_VAR 0 3
31911: PUSH
31912: LD_VAR 0 4
31916: ARRAY
31917: PPUSH
31918: CALL_OW 254
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: PUSH
31929: EMPTY
31930: LIST
31931: ADD
31932: ST_TO_ADDR
31933: GO 31846
31935: POP
31936: POP
// result := list ;
31937: LD_ADDR_VAR 0 2
31941: PUSH
31942: LD_VAR 0 5
31946: ST_TO_ADDR
// end ;
31947: LD_VAR 0 2
31951: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31952: LD_INT 0
31954: PPUSH
31955: PPUSH
31956: PPUSH
31957: PPUSH
31958: PPUSH
31959: PPUSH
31960: PPUSH
// if not factory then
31961: LD_VAR 0 1
31965: NOT
31966: IFFALSE 31970
// exit ;
31968: GO 32563
// if control = control_apeman then
31970: LD_VAR 0 4
31974: PUSH
31975: LD_INT 5
31977: EQUAL
31978: IFFALSE 32087
// begin tmp := UnitsInside ( factory ) ;
31980: LD_ADDR_VAR 0 8
31984: PUSH
31985: LD_VAR 0 1
31989: PPUSH
31990: CALL_OW 313
31994: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31995: LD_VAR 0 8
31999: PPUSH
32000: LD_INT 25
32002: PUSH
32003: LD_INT 12
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PPUSH
32010: CALL_OW 72
32014: NOT
32015: IFFALSE 32025
// control := control_manual ;
32017: LD_ADDR_VAR 0 4
32021: PUSH
32022: LD_INT 1
32024: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32025: LD_ADDR_VAR 0 8
32029: PUSH
32030: LD_VAR 0 1
32034: PPUSH
32035: CALL 31722 0 1
32039: ST_TO_ADDR
// if tmp then
32040: LD_VAR 0 8
32044: IFFALSE 32087
// begin for i in tmp do
32046: LD_ADDR_VAR 0 7
32050: PUSH
32051: LD_VAR 0 8
32055: PUSH
32056: FOR_IN
32057: IFFALSE 32085
// if i [ 1 ] = b_ext_radio then
32059: LD_VAR 0 7
32063: PUSH
32064: LD_INT 1
32066: ARRAY
32067: PUSH
32068: LD_INT 22
32070: EQUAL
32071: IFFALSE 32083
// begin control := control_remote ;
32073: LD_ADDR_VAR 0 4
32077: PUSH
32078: LD_INT 2
32080: ST_TO_ADDR
// break ;
32081: GO 32085
// end ;
32083: GO 32056
32085: POP
32086: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32087: LD_VAR 0 1
32091: PPUSH
32092: LD_VAR 0 2
32096: PPUSH
32097: LD_VAR 0 3
32101: PPUSH
32102: LD_VAR 0 4
32106: PPUSH
32107: LD_VAR 0 5
32111: PPUSH
32112: CALL_OW 448
32116: IFFALSE 32151
// begin result := [ chassis , engine , control , weapon ] ;
32118: LD_ADDR_VAR 0 6
32122: PUSH
32123: LD_VAR 0 2
32127: PUSH
32128: LD_VAR 0 3
32132: PUSH
32133: LD_VAR 0 4
32137: PUSH
32138: LD_VAR 0 5
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: ST_TO_ADDR
// exit ;
32149: GO 32563
// end ; _chassis := AvailableChassisList ( factory ) ;
32151: LD_ADDR_VAR 0 9
32155: PUSH
32156: LD_VAR 0 1
32160: PPUSH
32161: CALL_OW 475
32165: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32166: LD_ADDR_VAR 0 11
32170: PUSH
32171: LD_VAR 0 1
32175: PPUSH
32176: CALL_OW 476
32180: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32181: LD_ADDR_VAR 0 12
32185: PUSH
32186: LD_VAR 0 1
32190: PPUSH
32191: CALL_OW 477
32195: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32196: LD_ADDR_VAR 0 10
32200: PUSH
32201: LD_VAR 0 1
32205: PPUSH
32206: CALL_OW 478
32210: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32211: LD_VAR 0 9
32215: NOT
32216: PUSH
32217: LD_VAR 0 11
32221: NOT
32222: OR
32223: PUSH
32224: LD_VAR 0 12
32228: NOT
32229: OR
32230: PUSH
32231: LD_VAR 0 10
32235: NOT
32236: OR
32237: IFFALSE 32272
// begin result := [ chassis , engine , control , weapon ] ;
32239: LD_ADDR_VAR 0 6
32243: PUSH
32244: LD_VAR 0 2
32248: PUSH
32249: LD_VAR 0 3
32253: PUSH
32254: LD_VAR 0 4
32258: PUSH
32259: LD_VAR 0 5
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: ST_TO_ADDR
// exit ;
32270: GO 32563
// end ; if not chassis in _chassis then
32272: LD_VAR 0 2
32276: PUSH
32277: LD_VAR 0 9
32281: IN
32282: NOT
32283: IFFALSE 32309
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32285: LD_ADDR_VAR 0 2
32289: PUSH
32290: LD_VAR 0 9
32294: PUSH
32295: LD_INT 1
32297: PPUSH
32298: LD_VAR 0 9
32302: PPUSH
32303: CALL_OW 12
32307: ARRAY
32308: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32309: LD_VAR 0 2
32313: PPUSH
32314: LD_VAR 0 3
32318: PPUSH
32319: CALL 32568 0 2
32323: NOT
32324: IFFALSE 32383
// repeat engine := _engine [ 1 ] ;
32326: LD_ADDR_VAR 0 3
32330: PUSH
32331: LD_VAR 0 11
32335: PUSH
32336: LD_INT 1
32338: ARRAY
32339: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32340: LD_ADDR_VAR 0 11
32344: PUSH
32345: LD_VAR 0 11
32349: PPUSH
32350: LD_INT 1
32352: PPUSH
32353: CALL_OW 3
32357: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32358: LD_VAR 0 2
32362: PPUSH
32363: LD_VAR 0 3
32367: PPUSH
32368: CALL 32568 0 2
32372: PUSH
32373: LD_VAR 0 11
32377: PUSH
32378: EMPTY
32379: EQUAL
32380: OR
32381: IFFALSE 32326
// if not control in _control then
32383: LD_VAR 0 4
32387: PUSH
32388: LD_VAR 0 12
32392: IN
32393: NOT
32394: IFFALSE 32420
// control := _control [ rand ( 1 , _control ) ] ;
32396: LD_ADDR_VAR 0 4
32400: PUSH
32401: LD_VAR 0 12
32405: PUSH
32406: LD_INT 1
32408: PPUSH
32409: LD_VAR 0 12
32413: PPUSH
32414: CALL_OW 12
32418: ARRAY
32419: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32420: LD_VAR 0 2
32424: PPUSH
32425: LD_VAR 0 5
32429: PPUSH
32430: CALL 32788 0 2
32434: NOT
32435: IFFALSE 32494
// repeat weapon := _weapon [ 1 ] ;
32437: LD_ADDR_VAR 0 5
32441: PUSH
32442: LD_VAR 0 10
32446: PUSH
32447: LD_INT 1
32449: ARRAY
32450: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32451: LD_ADDR_VAR 0 10
32455: PUSH
32456: LD_VAR 0 10
32460: PPUSH
32461: LD_INT 1
32463: PPUSH
32464: CALL_OW 3
32468: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32469: LD_VAR 0 2
32473: PPUSH
32474: LD_VAR 0 5
32478: PPUSH
32479: CALL 32788 0 2
32483: PUSH
32484: LD_VAR 0 10
32488: PUSH
32489: EMPTY
32490: EQUAL
32491: OR
32492: IFFALSE 32437
// result := [ ] ;
32494: LD_ADDR_VAR 0 6
32498: PUSH
32499: EMPTY
32500: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32501: LD_VAR 0 1
32505: PPUSH
32506: LD_VAR 0 2
32510: PPUSH
32511: LD_VAR 0 3
32515: PPUSH
32516: LD_VAR 0 4
32520: PPUSH
32521: LD_VAR 0 5
32525: PPUSH
32526: CALL_OW 448
32530: IFFALSE 32563
// result := [ chassis , engine , control , weapon ] ;
32532: LD_ADDR_VAR 0 6
32536: PUSH
32537: LD_VAR 0 2
32541: PUSH
32542: LD_VAR 0 3
32546: PUSH
32547: LD_VAR 0 4
32551: PUSH
32552: LD_VAR 0 5
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: ST_TO_ADDR
// end ;
32563: LD_VAR 0 6
32567: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32568: LD_INT 0
32570: PPUSH
// if not chassis or not engine then
32571: LD_VAR 0 1
32575: NOT
32576: PUSH
32577: LD_VAR 0 2
32581: NOT
32582: OR
32583: IFFALSE 32587
// exit ;
32585: GO 32783
// case engine of engine_solar :
32587: LD_VAR 0 2
32591: PUSH
32592: LD_INT 2
32594: DOUBLE
32595: EQUAL
32596: IFTRUE 32600
32598: GO 32638
32600: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32601: LD_ADDR_VAR 0 3
32605: PUSH
32606: LD_INT 11
32608: PUSH
32609: LD_INT 12
32611: PUSH
32612: LD_INT 13
32614: PUSH
32615: LD_INT 14
32617: PUSH
32618: LD_INT 1
32620: PUSH
32621: LD_INT 2
32623: PUSH
32624: LD_INT 3
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: ST_TO_ADDR
32636: GO 32767
32638: LD_INT 1
32640: DOUBLE
32641: EQUAL
32642: IFTRUE 32646
32644: GO 32708
32646: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32647: LD_ADDR_VAR 0 3
32651: PUSH
32652: LD_INT 11
32654: PUSH
32655: LD_INT 12
32657: PUSH
32658: LD_INT 13
32660: PUSH
32661: LD_INT 14
32663: PUSH
32664: LD_INT 1
32666: PUSH
32667: LD_INT 2
32669: PUSH
32670: LD_INT 3
32672: PUSH
32673: LD_INT 4
32675: PUSH
32676: LD_INT 5
32678: PUSH
32679: LD_INT 21
32681: PUSH
32682: LD_INT 23
32684: PUSH
32685: LD_INT 22
32687: PUSH
32688: LD_INT 24
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: ST_TO_ADDR
32706: GO 32767
32708: LD_INT 3
32710: DOUBLE
32711: EQUAL
32712: IFTRUE 32716
32714: GO 32766
32716: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32717: LD_ADDR_VAR 0 3
32721: PUSH
32722: LD_INT 13
32724: PUSH
32725: LD_INT 14
32727: PUSH
32728: LD_INT 2
32730: PUSH
32731: LD_INT 3
32733: PUSH
32734: LD_INT 4
32736: PUSH
32737: LD_INT 5
32739: PUSH
32740: LD_INT 21
32742: PUSH
32743: LD_INT 22
32745: PUSH
32746: LD_INT 23
32748: PUSH
32749: LD_INT 24
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: ST_TO_ADDR
32764: GO 32767
32766: POP
// result := ( chassis in result ) ;
32767: LD_ADDR_VAR 0 3
32771: PUSH
32772: LD_VAR 0 1
32776: PUSH
32777: LD_VAR 0 3
32781: IN
32782: ST_TO_ADDR
// end ;
32783: LD_VAR 0 3
32787: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32788: LD_INT 0
32790: PPUSH
// if not chassis or not weapon then
32791: LD_VAR 0 1
32795: NOT
32796: PUSH
32797: LD_VAR 0 2
32801: NOT
32802: OR
32803: IFFALSE 32807
// exit ;
32805: GO 33867
// case weapon of us_machine_gun :
32807: LD_VAR 0 2
32811: PUSH
32812: LD_INT 2
32814: DOUBLE
32815: EQUAL
32816: IFTRUE 32820
32818: GO 32850
32820: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32821: LD_ADDR_VAR 0 3
32825: PUSH
32826: LD_INT 1
32828: PUSH
32829: LD_INT 2
32831: PUSH
32832: LD_INT 3
32834: PUSH
32835: LD_INT 4
32837: PUSH
32838: LD_INT 5
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: ST_TO_ADDR
32848: GO 33851
32850: LD_INT 3
32852: DOUBLE
32853: EQUAL
32854: IFTRUE 32858
32856: GO 32888
32858: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32859: LD_ADDR_VAR 0 3
32863: PUSH
32864: LD_INT 1
32866: PUSH
32867: LD_INT 2
32869: PUSH
32870: LD_INT 3
32872: PUSH
32873: LD_INT 4
32875: PUSH
32876: LD_INT 5
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: ST_TO_ADDR
32886: GO 33851
32888: LD_INT 11
32890: DOUBLE
32891: EQUAL
32892: IFTRUE 32896
32894: GO 32926
32896: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32897: LD_ADDR_VAR 0 3
32901: PUSH
32902: LD_INT 1
32904: PUSH
32905: LD_INT 2
32907: PUSH
32908: LD_INT 3
32910: PUSH
32911: LD_INT 4
32913: PUSH
32914: LD_INT 5
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: ST_TO_ADDR
32924: GO 33851
32926: LD_INT 4
32928: DOUBLE
32929: EQUAL
32930: IFTRUE 32934
32932: GO 32960
32934: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32935: LD_ADDR_VAR 0 3
32939: PUSH
32940: LD_INT 2
32942: PUSH
32943: LD_INT 3
32945: PUSH
32946: LD_INT 4
32948: PUSH
32949: LD_INT 5
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: ST_TO_ADDR
32958: GO 33851
32960: LD_INT 5
32962: DOUBLE
32963: EQUAL
32964: IFTRUE 32968
32966: GO 32994
32968: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32969: LD_ADDR_VAR 0 3
32973: PUSH
32974: LD_INT 2
32976: PUSH
32977: LD_INT 3
32979: PUSH
32980: LD_INT 4
32982: PUSH
32983: LD_INT 5
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: ST_TO_ADDR
32992: GO 33851
32994: LD_INT 9
32996: DOUBLE
32997: EQUAL
32998: IFTRUE 33002
33000: GO 33028
33002: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33003: LD_ADDR_VAR 0 3
33007: PUSH
33008: LD_INT 2
33010: PUSH
33011: LD_INT 3
33013: PUSH
33014: LD_INT 4
33016: PUSH
33017: LD_INT 5
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: ST_TO_ADDR
33026: GO 33851
33028: LD_INT 7
33030: DOUBLE
33031: EQUAL
33032: IFTRUE 33036
33034: GO 33062
33036: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33037: LD_ADDR_VAR 0 3
33041: PUSH
33042: LD_INT 2
33044: PUSH
33045: LD_INT 3
33047: PUSH
33048: LD_INT 4
33050: PUSH
33051: LD_INT 5
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: ST_TO_ADDR
33060: GO 33851
33062: LD_INT 12
33064: DOUBLE
33065: EQUAL
33066: IFTRUE 33070
33068: GO 33096
33070: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33071: LD_ADDR_VAR 0 3
33075: PUSH
33076: LD_INT 2
33078: PUSH
33079: LD_INT 3
33081: PUSH
33082: LD_INT 4
33084: PUSH
33085: LD_INT 5
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: ST_TO_ADDR
33094: GO 33851
33096: LD_INT 13
33098: DOUBLE
33099: EQUAL
33100: IFTRUE 33104
33102: GO 33130
33104: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33105: LD_ADDR_VAR 0 3
33109: PUSH
33110: LD_INT 2
33112: PUSH
33113: LD_INT 3
33115: PUSH
33116: LD_INT 4
33118: PUSH
33119: LD_INT 5
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: ST_TO_ADDR
33128: GO 33851
33130: LD_INT 14
33132: DOUBLE
33133: EQUAL
33134: IFTRUE 33138
33136: GO 33156
33138: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33139: LD_ADDR_VAR 0 3
33143: PUSH
33144: LD_INT 4
33146: PUSH
33147: LD_INT 5
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: ST_TO_ADDR
33154: GO 33851
33156: LD_INT 6
33158: DOUBLE
33159: EQUAL
33160: IFTRUE 33164
33162: GO 33182
33164: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33165: LD_ADDR_VAR 0 3
33169: PUSH
33170: LD_INT 4
33172: PUSH
33173: LD_INT 5
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: ST_TO_ADDR
33180: GO 33851
33182: LD_INT 10
33184: DOUBLE
33185: EQUAL
33186: IFTRUE 33190
33188: GO 33208
33190: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33191: LD_ADDR_VAR 0 3
33195: PUSH
33196: LD_INT 4
33198: PUSH
33199: LD_INT 5
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: ST_TO_ADDR
33206: GO 33851
33208: LD_INT 22
33210: DOUBLE
33211: EQUAL
33212: IFTRUE 33216
33214: GO 33242
33216: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33217: LD_ADDR_VAR 0 3
33221: PUSH
33222: LD_INT 11
33224: PUSH
33225: LD_INT 12
33227: PUSH
33228: LD_INT 13
33230: PUSH
33231: LD_INT 14
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: ST_TO_ADDR
33240: GO 33851
33242: LD_INT 23
33244: DOUBLE
33245: EQUAL
33246: IFTRUE 33250
33248: GO 33276
33250: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33251: LD_ADDR_VAR 0 3
33255: PUSH
33256: LD_INT 11
33258: PUSH
33259: LD_INT 12
33261: PUSH
33262: LD_INT 13
33264: PUSH
33265: LD_INT 14
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: ST_TO_ADDR
33274: GO 33851
33276: LD_INT 24
33278: DOUBLE
33279: EQUAL
33280: IFTRUE 33284
33282: GO 33310
33284: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33285: LD_ADDR_VAR 0 3
33289: PUSH
33290: LD_INT 11
33292: PUSH
33293: LD_INT 12
33295: PUSH
33296: LD_INT 13
33298: PUSH
33299: LD_INT 14
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: ST_TO_ADDR
33308: GO 33851
33310: LD_INT 30
33312: DOUBLE
33313: EQUAL
33314: IFTRUE 33318
33316: GO 33344
33318: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33319: LD_ADDR_VAR 0 3
33323: PUSH
33324: LD_INT 11
33326: PUSH
33327: LD_INT 12
33329: PUSH
33330: LD_INT 13
33332: PUSH
33333: LD_INT 14
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: ST_TO_ADDR
33342: GO 33851
33344: LD_INT 25
33346: DOUBLE
33347: EQUAL
33348: IFTRUE 33352
33350: GO 33370
33352: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33353: LD_ADDR_VAR 0 3
33357: PUSH
33358: LD_INT 13
33360: PUSH
33361: LD_INT 14
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: ST_TO_ADDR
33368: GO 33851
33370: LD_INT 27
33372: DOUBLE
33373: EQUAL
33374: IFTRUE 33378
33376: GO 33396
33378: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33379: LD_ADDR_VAR 0 3
33383: PUSH
33384: LD_INT 13
33386: PUSH
33387: LD_INT 14
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: ST_TO_ADDR
33394: GO 33851
33396: LD_INT 92
33398: DOUBLE
33399: EQUAL
33400: IFTRUE 33404
33402: GO 33430
33404: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33405: LD_ADDR_VAR 0 3
33409: PUSH
33410: LD_INT 11
33412: PUSH
33413: LD_INT 12
33415: PUSH
33416: LD_INT 13
33418: PUSH
33419: LD_INT 14
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: ST_TO_ADDR
33428: GO 33851
33430: LD_INT 28
33432: DOUBLE
33433: EQUAL
33434: IFTRUE 33438
33436: GO 33456
33438: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33439: LD_ADDR_VAR 0 3
33443: PUSH
33444: LD_INT 13
33446: PUSH
33447: LD_INT 14
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: ST_TO_ADDR
33454: GO 33851
33456: LD_INT 29
33458: DOUBLE
33459: EQUAL
33460: IFTRUE 33464
33462: GO 33482
33464: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33465: LD_ADDR_VAR 0 3
33469: PUSH
33470: LD_INT 13
33472: PUSH
33473: LD_INT 14
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: ST_TO_ADDR
33480: GO 33851
33482: LD_INT 31
33484: DOUBLE
33485: EQUAL
33486: IFTRUE 33490
33488: GO 33508
33490: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33491: LD_ADDR_VAR 0 3
33495: PUSH
33496: LD_INT 13
33498: PUSH
33499: LD_INT 14
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: ST_TO_ADDR
33506: GO 33851
33508: LD_INT 26
33510: DOUBLE
33511: EQUAL
33512: IFTRUE 33516
33514: GO 33534
33516: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33517: LD_ADDR_VAR 0 3
33521: PUSH
33522: LD_INT 13
33524: PUSH
33525: LD_INT 14
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: ST_TO_ADDR
33532: GO 33851
33534: LD_INT 42
33536: DOUBLE
33537: EQUAL
33538: IFTRUE 33542
33540: GO 33568
33542: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33543: LD_ADDR_VAR 0 3
33547: PUSH
33548: LD_INT 21
33550: PUSH
33551: LD_INT 22
33553: PUSH
33554: LD_INT 23
33556: PUSH
33557: LD_INT 24
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: ST_TO_ADDR
33566: GO 33851
33568: LD_INT 43
33570: DOUBLE
33571: EQUAL
33572: IFTRUE 33576
33574: GO 33602
33576: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33577: LD_ADDR_VAR 0 3
33581: PUSH
33582: LD_INT 21
33584: PUSH
33585: LD_INT 22
33587: PUSH
33588: LD_INT 23
33590: PUSH
33591: LD_INT 24
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: ST_TO_ADDR
33600: GO 33851
33602: LD_INT 44
33604: DOUBLE
33605: EQUAL
33606: IFTRUE 33610
33608: GO 33636
33610: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33611: LD_ADDR_VAR 0 3
33615: PUSH
33616: LD_INT 21
33618: PUSH
33619: LD_INT 22
33621: PUSH
33622: LD_INT 23
33624: PUSH
33625: LD_INT 24
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: ST_TO_ADDR
33634: GO 33851
33636: LD_INT 45
33638: DOUBLE
33639: EQUAL
33640: IFTRUE 33644
33642: GO 33670
33644: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33645: LD_ADDR_VAR 0 3
33649: PUSH
33650: LD_INT 21
33652: PUSH
33653: LD_INT 22
33655: PUSH
33656: LD_INT 23
33658: PUSH
33659: LD_INT 24
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: ST_TO_ADDR
33668: GO 33851
33670: LD_INT 49
33672: DOUBLE
33673: EQUAL
33674: IFTRUE 33678
33676: GO 33704
33678: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33679: LD_ADDR_VAR 0 3
33683: PUSH
33684: LD_INT 21
33686: PUSH
33687: LD_INT 22
33689: PUSH
33690: LD_INT 23
33692: PUSH
33693: LD_INT 24
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: ST_TO_ADDR
33702: GO 33851
33704: LD_INT 51
33706: DOUBLE
33707: EQUAL
33708: IFTRUE 33712
33710: GO 33738
33712: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33713: LD_ADDR_VAR 0 3
33717: PUSH
33718: LD_INT 21
33720: PUSH
33721: LD_INT 22
33723: PUSH
33724: LD_INT 23
33726: PUSH
33727: LD_INT 24
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: ST_TO_ADDR
33736: GO 33851
33738: LD_INT 52
33740: DOUBLE
33741: EQUAL
33742: IFTRUE 33746
33744: GO 33772
33746: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33747: LD_ADDR_VAR 0 3
33751: PUSH
33752: LD_INT 21
33754: PUSH
33755: LD_INT 22
33757: PUSH
33758: LD_INT 23
33760: PUSH
33761: LD_INT 24
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: ST_TO_ADDR
33770: GO 33851
33772: LD_INT 53
33774: DOUBLE
33775: EQUAL
33776: IFTRUE 33780
33778: GO 33798
33780: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33781: LD_ADDR_VAR 0 3
33785: PUSH
33786: LD_INT 23
33788: PUSH
33789: LD_INT 24
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: ST_TO_ADDR
33796: GO 33851
33798: LD_INT 46
33800: DOUBLE
33801: EQUAL
33802: IFTRUE 33806
33804: GO 33824
33806: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33807: LD_ADDR_VAR 0 3
33811: PUSH
33812: LD_INT 23
33814: PUSH
33815: LD_INT 24
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: ST_TO_ADDR
33822: GO 33851
33824: LD_INT 47
33826: DOUBLE
33827: EQUAL
33828: IFTRUE 33832
33830: GO 33850
33832: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33833: LD_ADDR_VAR 0 3
33837: PUSH
33838: LD_INT 23
33840: PUSH
33841: LD_INT 24
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: ST_TO_ADDR
33848: GO 33851
33850: POP
// result := ( chassis in result ) ;
33851: LD_ADDR_VAR 0 3
33855: PUSH
33856: LD_VAR 0 1
33860: PUSH
33861: LD_VAR 0 3
33865: IN
33866: ST_TO_ADDR
// end ;
33867: LD_VAR 0 3
33871: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33872: LD_INT 0
33874: PPUSH
33875: PPUSH
33876: PPUSH
33877: PPUSH
33878: PPUSH
33879: PPUSH
33880: PPUSH
// result := array ;
33881: LD_ADDR_VAR 0 5
33885: PUSH
33886: LD_VAR 0 1
33890: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33891: LD_VAR 0 1
33895: NOT
33896: PUSH
33897: LD_VAR 0 2
33901: NOT
33902: OR
33903: PUSH
33904: LD_VAR 0 3
33908: NOT
33909: OR
33910: PUSH
33911: LD_VAR 0 2
33915: PUSH
33916: LD_VAR 0 1
33920: GREATER
33921: OR
33922: PUSH
33923: LD_VAR 0 3
33927: PUSH
33928: LD_VAR 0 1
33932: GREATER
33933: OR
33934: IFFALSE 33938
// exit ;
33936: GO 34234
// if direction then
33938: LD_VAR 0 4
33942: IFFALSE 34006
// begin d := 1 ;
33944: LD_ADDR_VAR 0 9
33948: PUSH
33949: LD_INT 1
33951: ST_TO_ADDR
// if i_from > i_to then
33952: LD_VAR 0 2
33956: PUSH
33957: LD_VAR 0 3
33961: GREATER
33962: IFFALSE 33988
// length := ( array - i_from ) + i_to else
33964: LD_ADDR_VAR 0 11
33968: PUSH
33969: LD_VAR 0 1
33973: PUSH
33974: LD_VAR 0 2
33978: MINUS
33979: PUSH
33980: LD_VAR 0 3
33984: PLUS
33985: ST_TO_ADDR
33986: GO 34004
// length := i_to - i_from ;
33988: LD_ADDR_VAR 0 11
33992: PUSH
33993: LD_VAR 0 3
33997: PUSH
33998: LD_VAR 0 2
34002: MINUS
34003: ST_TO_ADDR
// end else
34004: GO 34067
// begin d := - 1 ;
34006: LD_ADDR_VAR 0 9
34010: PUSH
34011: LD_INT 1
34013: NEG
34014: ST_TO_ADDR
// if i_from > i_to then
34015: LD_VAR 0 2
34019: PUSH
34020: LD_VAR 0 3
34024: GREATER
34025: IFFALSE 34045
// length := i_from - i_to else
34027: LD_ADDR_VAR 0 11
34031: PUSH
34032: LD_VAR 0 2
34036: PUSH
34037: LD_VAR 0 3
34041: MINUS
34042: ST_TO_ADDR
34043: GO 34067
// length := ( array - i_to ) + i_from ;
34045: LD_ADDR_VAR 0 11
34049: PUSH
34050: LD_VAR 0 1
34054: PUSH
34055: LD_VAR 0 3
34059: MINUS
34060: PUSH
34061: LD_VAR 0 2
34065: PLUS
34066: ST_TO_ADDR
// end ; if not length then
34067: LD_VAR 0 11
34071: NOT
34072: IFFALSE 34076
// exit ;
34074: GO 34234
// tmp := array ;
34076: LD_ADDR_VAR 0 10
34080: PUSH
34081: LD_VAR 0 1
34085: ST_TO_ADDR
// for i = 1 to length do
34086: LD_ADDR_VAR 0 6
34090: PUSH
34091: DOUBLE
34092: LD_INT 1
34094: DEC
34095: ST_TO_ADDR
34096: LD_VAR 0 11
34100: PUSH
34101: FOR_TO
34102: IFFALSE 34222
// begin for j = 1 to array do
34104: LD_ADDR_VAR 0 7
34108: PUSH
34109: DOUBLE
34110: LD_INT 1
34112: DEC
34113: ST_TO_ADDR
34114: LD_VAR 0 1
34118: PUSH
34119: FOR_TO
34120: IFFALSE 34208
// begin k := j + d ;
34122: LD_ADDR_VAR 0 8
34126: PUSH
34127: LD_VAR 0 7
34131: PUSH
34132: LD_VAR 0 9
34136: PLUS
34137: ST_TO_ADDR
// if k > array then
34138: LD_VAR 0 8
34142: PUSH
34143: LD_VAR 0 1
34147: GREATER
34148: IFFALSE 34158
// k := 1 ;
34150: LD_ADDR_VAR 0 8
34154: PUSH
34155: LD_INT 1
34157: ST_TO_ADDR
// if not k then
34158: LD_VAR 0 8
34162: NOT
34163: IFFALSE 34175
// k := array ;
34165: LD_ADDR_VAR 0 8
34169: PUSH
34170: LD_VAR 0 1
34174: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34175: LD_ADDR_VAR 0 10
34179: PUSH
34180: LD_VAR 0 10
34184: PPUSH
34185: LD_VAR 0 8
34189: PPUSH
34190: LD_VAR 0 1
34194: PUSH
34195: LD_VAR 0 7
34199: ARRAY
34200: PPUSH
34201: CALL_OW 1
34205: ST_TO_ADDR
// end ;
34206: GO 34119
34208: POP
34209: POP
// array := tmp ;
34210: LD_ADDR_VAR 0 1
34214: PUSH
34215: LD_VAR 0 10
34219: ST_TO_ADDR
// end ;
34220: GO 34101
34222: POP
34223: POP
// result := array ;
34224: LD_ADDR_VAR 0 5
34228: PUSH
34229: LD_VAR 0 1
34233: ST_TO_ADDR
// end ;
34234: LD_VAR 0 5
34238: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34239: LD_INT 0
34241: PPUSH
34242: PPUSH
// result := 0 ;
34243: LD_ADDR_VAR 0 3
34247: PUSH
34248: LD_INT 0
34250: ST_TO_ADDR
// if not array or not value in array then
34251: LD_VAR 0 1
34255: NOT
34256: PUSH
34257: LD_VAR 0 2
34261: PUSH
34262: LD_VAR 0 1
34266: IN
34267: NOT
34268: OR
34269: IFFALSE 34273
// exit ;
34271: GO 34327
// for i = 1 to array do
34273: LD_ADDR_VAR 0 4
34277: PUSH
34278: DOUBLE
34279: LD_INT 1
34281: DEC
34282: ST_TO_ADDR
34283: LD_VAR 0 1
34287: PUSH
34288: FOR_TO
34289: IFFALSE 34325
// if value = array [ i ] then
34291: LD_VAR 0 2
34295: PUSH
34296: LD_VAR 0 1
34300: PUSH
34301: LD_VAR 0 4
34305: ARRAY
34306: EQUAL
34307: IFFALSE 34323
// begin result := i ;
34309: LD_ADDR_VAR 0 3
34313: PUSH
34314: LD_VAR 0 4
34318: ST_TO_ADDR
// exit ;
34319: POP
34320: POP
34321: GO 34327
// end ;
34323: GO 34288
34325: POP
34326: POP
// end ;
34327: LD_VAR 0 3
34331: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34332: LD_INT 0
34334: PPUSH
// vc_chassis := chassis ;
34335: LD_ADDR_OWVAR 37
34339: PUSH
34340: LD_VAR 0 1
34344: ST_TO_ADDR
// vc_engine := engine ;
34345: LD_ADDR_OWVAR 39
34349: PUSH
34350: LD_VAR 0 2
34354: ST_TO_ADDR
// vc_control := control ;
34355: LD_ADDR_OWVAR 38
34359: PUSH
34360: LD_VAR 0 3
34364: ST_TO_ADDR
// vc_weapon := weapon ;
34365: LD_ADDR_OWVAR 40
34369: PUSH
34370: LD_VAR 0 4
34374: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34375: LD_ADDR_OWVAR 41
34379: PUSH
34380: LD_VAR 0 5
34384: ST_TO_ADDR
// end ;
34385: LD_VAR 0 6
34389: RET
// export function WantPlant ( unit ) ; var task ; begin
34390: LD_INT 0
34392: PPUSH
34393: PPUSH
// result := false ;
34394: LD_ADDR_VAR 0 2
34398: PUSH
34399: LD_INT 0
34401: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34402: LD_ADDR_VAR 0 3
34406: PUSH
34407: LD_VAR 0 1
34411: PPUSH
34412: CALL_OW 437
34416: ST_TO_ADDR
// if task then
34417: LD_VAR 0 3
34421: IFFALSE 34449
// if task [ 1 ] [ 1 ] = p then
34423: LD_VAR 0 3
34427: PUSH
34428: LD_INT 1
34430: ARRAY
34431: PUSH
34432: LD_INT 1
34434: ARRAY
34435: PUSH
34436: LD_STRING p
34438: EQUAL
34439: IFFALSE 34449
// result := true ;
34441: LD_ADDR_VAR 0 2
34445: PUSH
34446: LD_INT 1
34448: ST_TO_ADDR
// end ;
34449: LD_VAR 0 2
34453: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34454: LD_INT 0
34456: PPUSH
34457: PPUSH
34458: PPUSH
34459: PPUSH
// if pos < 1 then
34460: LD_VAR 0 2
34464: PUSH
34465: LD_INT 1
34467: LESS
34468: IFFALSE 34472
// exit ;
34470: GO 34775
// if pos = 1 then
34472: LD_VAR 0 2
34476: PUSH
34477: LD_INT 1
34479: EQUAL
34480: IFFALSE 34513
// result := Replace ( arr , pos [ 1 ] , value ) else
34482: LD_ADDR_VAR 0 4
34486: PUSH
34487: LD_VAR 0 1
34491: PPUSH
34492: LD_VAR 0 2
34496: PUSH
34497: LD_INT 1
34499: ARRAY
34500: PPUSH
34501: LD_VAR 0 3
34505: PPUSH
34506: CALL_OW 1
34510: ST_TO_ADDR
34511: GO 34775
// begin tmp := arr ;
34513: LD_ADDR_VAR 0 6
34517: PUSH
34518: LD_VAR 0 1
34522: ST_TO_ADDR
// s_arr := [ tmp ] ;
34523: LD_ADDR_VAR 0 7
34527: PUSH
34528: LD_VAR 0 6
34532: PUSH
34533: EMPTY
34534: LIST
34535: ST_TO_ADDR
// for i = 1 to pos - 1 do
34536: LD_ADDR_VAR 0 5
34540: PUSH
34541: DOUBLE
34542: LD_INT 1
34544: DEC
34545: ST_TO_ADDR
34546: LD_VAR 0 2
34550: PUSH
34551: LD_INT 1
34553: MINUS
34554: PUSH
34555: FOR_TO
34556: IFFALSE 34601
// begin tmp := tmp [ pos [ i ] ] ;
34558: LD_ADDR_VAR 0 6
34562: PUSH
34563: LD_VAR 0 6
34567: PUSH
34568: LD_VAR 0 2
34572: PUSH
34573: LD_VAR 0 5
34577: ARRAY
34578: ARRAY
34579: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34580: LD_ADDR_VAR 0 7
34584: PUSH
34585: LD_VAR 0 7
34589: PUSH
34590: LD_VAR 0 6
34594: PUSH
34595: EMPTY
34596: LIST
34597: ADD
34598: ST_TO_ADDR
// end ;
34599: GO 34555
34601: POP
34602: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34603: LD_ADDR_VAR 0 6
34607: PUSH
34608: LD_VAR 0 6
34612: PPUSH
34613: LD_VAR 0 2
34617: PUSH
34618: LD_VAR 0 2
34622: ARRAY
34623: PPUSH
34624: LD_VAR 0 3
34628: PPUSH
34629: CALL_OW 1
34633: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34634: LD_ADDR_VAR 0 7
34638: PUSH
34639: LD_VAR 0 7
34643: PPUSH
34644: LD_VAR 0 7
34648: PPUSH
34649: LD_VAR 0 6
34653: PPUSH
34654: CALL_OW 1
34658: ST_TO_ADDR
// for i = s_arr downto 2 do
34659: LD_ADDR_VAR 0 5
34663: PUSH
34664: DOUBLE
34665: LD_VAR 0 7
34669: INC
34670: ST_TO_ADDR
34671: LD_INT 2
34673: PUSH
34674: FOR_DOWNTO
34675: IFFALSE 34759
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34677: LD_ADDR_VAR 0 6
34681: PUSH
34682: LD_VAR 0 7
34686: PUSH
34687: LD_VAR 0 5
34691: PUSH
34692: LD_INT 1
34694: MINUS
34695: ARRAY
34696: PPUSH
34697: LD_VAR 0 2
34701: PUSH
34702: LD_VAR 0 5
34706: PUSH
34707: LD_INT 1
34709: MINUS
34710: ARRAY
34711: PPUSH
34712: LD_VAR 0 7
34716: PUSH
34717: LD_VAR 0 5
34721: ARRAY
34722: PPUSH
34723: CALL_OW 1
34727: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34728: LD_ADDR_VAR 0 7
34732: PUSH
34733: LD_VAR 0 7
34737: PPUSH
34738: LD_VAR 0 5
34742: PUSH
34743: LD_INT 1
34745: MINUS
34746: PPUSH
34747: LD_VAR 0 6
34751: PPUSH
34752: CALL_OW 1
34756: ST_TO_ADDR
// end ;
34757: GO 34674
34759: POP
34760: POP
// result := s_arr [ 1 ] ;
34761: LD_ADDR_VAR 0 4
34765: PUSH
34766: LD_VAR 0 7
34770: PUSH
34771: LD_INT 1
34773: ARRAY
34774: ST_TO_ADDR
// end ; end ;
34775: LD_VAR 0 4
34779: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34780: LD_INT 0
34782: PPUSH
34783: PPUSH
// if not list then
34784: LD_VAR 0 1
34788: NOT
34789: IFFALSE 34793
// exit ;
34791: GO 34884
// i := list [ pos1 ] ;
34793: LD_ADDR_VAR 0 5
34797: PUSH
34798: LD_VAR 0 1
34802: PUSH
34803: LD_VAR 0 2
34807: ARRAY
34808: ST_TO_ADDR
// if not i then
34809: LD_VAR 0 5
34813: NOT
34814: IFFALSE 34818
// exit ;
34816: GO 34884
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34818: LD_ADDR_VAR 0 1
34822: PUSH
34823: LD_VAR 0 1
34827: PPUSH
34828: LD_VAR 0 2
34832: PPUSH
34833: LD_VAR 0 1
34837: PUSH
34838: LD_VAR 0 3
34842: ARRAY
34843: PPUSH
34844: CALL_OW 1
34848: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34849: LD_ADDR_VAR 0 1
34853: PUSH
34854: LD_VAR 0 1
34858: PPUSH
34859: LD_VAR 0 3
34863: PPUSH
34864: LD_VAR 0 5
34868: PPUSH
34869: CALL_OW 1
34873: ST_TO_ADDR
// result := list ;
34874: LD_ADDR_VAR 0 4
34878: PUSH
34879: LD_VAR 0 1
34883: ST_TO_ADDR
// end ;
34884: LD_VAR 0 4
34888: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34889: LD_INT 0
34891: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34892: LD_ADDR_VAR 0 5
34896: PUSH
34897: LD_VAR 0 1
34901: PPUSH
34902: CALL_OW 250
34906: PPUSH
34907: LD_VAR 0 1
34911: PPUSH
34912: CALL_OW 251
34916: PPUSH
34917: LD_VAR 0 2
34921: PPUSH
34922: LD_VAR 0 3
34926: PPUSH
34927: LD_VAR 0 4
34931: PPUSH
34932: CALL 35310 0 5
34936: ST_TO_ADDR
// end ;
34937: LD_VAR 0 5
34941: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34942: LD_INT 0
34944: PPUSH
34945: PPUSH
34946: PPUSH
34947: PPUSH
// if not list or not unit then
34948: LD_VAR 0 2
34952: NOT
34953: PUSH
34954: LD_VAR 0 1
34958: NOT
34959: OR
34960: IFFALSE 34964
// exit ;
34962: GO 35305
// result := [ ] ;
34964: LD_ADDR_VAR 0 5
34968: PUSH
34969: EMPTY
34970: ST_TO_ADDR
// for i in list do
34971: LD_ADDR_VAR 0 6
34975: PUSH
34976: LD_VAR 0 2
34980: PUSH
34981: FOR_IN
34982: IFFALSE 35200
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34984: LD_ADDR_VAR 0 8
34988: PUSH
34989: LD_VAR 0 1
34993: PPUSH
34994: LD_VAR 0 6
34998: PUSH
34999: LD_INT 1
35001: ARRAY
35002: PPUSH
35003: LD_VAR 0 6
35007: PUSH
35008: LD_INT 2
35010: ARRAY
35011: PPUSH
35012: CALL_OW 297
35016: ST_TO_ADDR
// if not Count ( result ) then
35017: LD_VAR 0 5
35021: PPUSH
35022: CALL 31594 0 1
35026: NOT
35027: IFFALSE 35060
// begin result := Join ( result , [ i , tmp ] ) ;
35029: LD_ADDR_VAR 0 5
35033: PUSH
35034: LD_VAR 0 5
35038: PPUSH
35039: LD_VAR 0 6
35043: PUSH
35044: LD_VAR 0 8
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PPUSH
35053: CALL 67203 0 2
35057: ST_TO_ADDR
// continue ;
35058: GO 34981
// end ; if result [ result ] [ 2 ] <= tmp then
35060: LD_VAR 0 5
35064: PUSH
35065: LD_VAR 0 5
35069: ARRAY
35070: PUSH
35071: LD_INT 2
35073: ARRAY
35074: PUSH
35075: LD_VAR 0 8
35079: LESSEQUAL
35080: IFFALSE 35113
// result := Join ( result , [ i , tmp ] ) else
35082: LD_ADDR_VAR 0 5
35086: PUSH
35087: LD_VAR 0 5
35091: PPUSH
35092: LD_VAR 0 6
35096: PUSH
35097: LD_VAR 0 8
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PPUSH
35106: CALL 67203 0 2
35110: ST_TO_ADDR
35111: GO 35198
// begin for j := 1 to Count ( result ) do
35113: LD_ADDR_VAR 0 7
35117: PUSH
35118: DOUBLE
35119: LD_INT 1
35121: DEC
35122: ST_TO_ADDR
35123: LD_VAR 0 5
35127: PPUSH
35128: CALL 31594 0 1
35132: PUSH
35133: FOR_TO
35134: IFFALSE 35196
// begin if tmp < result [ j ] [ 2 ] then
35136: LD_VAR 0 8
35140: PUSH
35141: LD_VAR 0 5
35145: PUSH
35146: LD_VAR 0 7
35150: ARRAY
35151: PUSH
35152: LD_INT 2
35154: ARRAY
35155: LESS
35156: IFFALSE 35194
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35158: LD_ADDR_VAR 0 5
35162: PUSH
35163: LD_VAR 0 5
35167: PPUSH
35168: LD_VAR 0 7
35172: PPUSH
35173: LD_VAR 0 6
35177: PUSH
35178: LD_VAR 0 8
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PPUSH
35187: CALL_OW 2
35191: ST_TO_ADDR
// break ;
35192: GO 35196
// end ; end ;
35194: GO 35133
35196: POP
35197: POP
// end ; end ;
35198: GO 34981
35200: POP
35201: POP
// if result and not asc then
35202: LD_VAR 0 5
35206: PUSH
35207: LD_VAR 0 3
35211: NOT
35212: AND
35213: IFFALSE 35230
// result := ReverseArray ( result ) ;
35215: LD_ADDR_VAR 0 5
35219: PUSH
35220: LD_VAR 0 5
35224: PPUSH
35225: CALL 62470 0 1
35229: ST_TO_ADDR
// tmp := [ ] ;
35230: LD_ADDR_VAR 0 8
35234: PUSH
35235: EMPTY
35236: ST_TO_ADDR
// if mode then
35237: LD_VAR 0 4
35241: IFFALSE 35305
// begin for i := 1 to result do
35243: LD_ADDR_VAR 0 6
35247: PUSH
35248: DOUBLE
35249: LD_INT 1
35251: DEC
35252: ST_TO_ADDR
35253: LD_VAR 0 5
35257: PUSH
35258: FOR_TO
35259: IFFALSE 35293
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35261: LD_ADDR_VAR 0 8
35265: PUSH
35266: LD_VAR 0 8
35270: PPUSH
35271: LD_VAR 0 5
35275: PUSH
35276: LD_VAR 0 6
35280: ARRAY
35281: PUSH
35282: LD_INT 1
35284: ARRAY
35285: PPUSH
35286: CALL 67203 0 2
35290: ST_TO_ADDR
35291: GO 35258
35293: POP
35294: POP
// result := tmp ;
35295: LD_ADDR_VAR 0 5
35299: PUSH
35300: LD_VAR 0 8
35304: ST_TO_ADDR
// end ; end ;
35305: LD_VAR 0 5
35309: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35310: LD_INT 0
35312: PPUSH
35313: PPUSH
35314: PPUSH
35315: PPUSH
// if not list then
35316: LD_VAR 0 3
35320: NOT
35321: IFFALSE 35325
// exit ;
35323: GO 35713
// result := [ ] ;
35325: LD_ADDR_VAR 0 6
35329: PUSH
35330: EMPTY
35331: ST_TO_ADDR
// for i in list do
35332: LD_ADDR_VAR 0 7
35336: PUSH
35337: LD_VAR 0 3
35341: PUSH
35342: FOR_IN
35343: IFFALSE 35545
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35345: LD_ADDR_VAR 0 9
35349: PUSH
35350: LD_VAR 0 7
35354: PPUSH
35355: LD_VAR 0 1
35359: PPUSH
35360: LD_VAR 0 2
35364: PPUSH
35365: CALL_OW 297
35369: ST_TO_ADDR
// if not result then
35370: LD_VAR 0 6
35374: NOT
35375: IFFALSE 35401
// result := [ [ i , tmp ] ] else
35377: LD_ADDR_VAR 0 6
35381: PUSH
35382: LD_VAR 0 7
35386: PUSH
35387: LD_VAR 0 9
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: EMPTY
35397: LIST
35398: ST_TO_ADDR
35399: GO 35543
// begin if result [ result ] [ 2 ] <= tmp then
35401: LD_VAR 0 6
35405: PUSH
35406: LD_VAR 0 6
35410: ARRAY
35411: PUSH
35412: LD_INT 2
35414: ARRAY
35415: PUSH
35416: LD_VAR 0 9
35420: LESSEQUAL
35421: IFFALSE 35463
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35423: LD_ADDR_VAR 0 6
35427: PUSH
35428: LD_VAR 0 6
35432: PPUSH
35433: LD_VAR 0 6
35437: PUSH
35438: LD_INT 1
35440: PLUS
35441: PPUSH
35442: LD_VAR 0 7
35446: PUSH
35447: LD_VAR 0 9
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PPUSH
35456: CALL_OW 2
35460: ST_TO_ADDR
35461: GO 35543
// for j := 1 to result do
35463: LD_ADDR_VAR 0 8
35467: PUSH
35468: DOUBLE
35469: LD_INT 1
35471: DEC
35472: ST_TO_ADDR
35473: LD_VAR 0 6
35477: PUSH
35478: FOR_TO
35479: IFFALSE 35541
// begin if tmp < result [ j ] [ 2 ] then
35481: LD_VAR 0 9
35485: PUSH
35486: LD_VAR 0 6
35490: PUSH
35491: LD_VAR 0 8
35495: ARRAY
35496: PUSH
35497: LD_INT 2
35499: ARRAY
35500: LESS
35501: IFFALSE 35539
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35503: LD_ADDR_VAR 0 6
35507: PUSH
35508: LD_VAR 0 6
35512: PPUSH
35513: LD_VAR 0 8
35517: PPUSH
35518: LD_VAR 0 7
35522: PUSH
35523: LD_VAR 0 9
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PPUSH
35532: CALL_OW 2
35536: ST_TO_ADDR
// break ;
35537: GO 35541
// end ; end ;
35539: GO 35478
35541: POP
35542: POP
// end ; end ;
35543: GO 35342
35545: POP
35546: POP
// if result and not asc then
35547: LD_VAR 0 6
35551: PUSH
35552: LD_VAR 0 4
35556: NOT
35557: AND
35558: IFFALSE 35633
// begin tmp := result ;
35560: LD_ADDR_VAR 0 9
35564: PUSH
35565: LD_VAR 0 6
35569: ST_TO_ADDR
// for i = tmp downto 1 do
35570: LD_ADDR_VAR 0 7
35574: PUSH
35575: DOUBLE
35576: LD_VAR 0 9
35580: INC
35581: ST_TO_ADDR
35582: LD_INT 1
35584: PUSH
35585: FOR_DOWNTO
35586: IFFALSE 35631
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35588: LD_ADDR_VAR 0 6
35592: PUSH
35593: LD_VAR 0 6
35597: PPUSH
35598: LD_VAR 0 9
35602: PUSH
35603: LD_VAR 0 7
35607: MINUS
35608: PUSH
35609: LD_INT 1
35611: PLUS
35612: PPUSH
35613: LD_VAR 0 9
35617: PUSH
35618: LD_VAR 0 7
35622: ARRAY
35623: PPUSH
35624: CALL_OW 1
35628: ST_TO_ADDR
35629: GO 35585
35631: POP
35632: POP
// end ; tmp := [ ] ;
35633: LD_ADDR_VAR 0 9
35637: PUSH
35638: EMPTY
35639: ST_TO_ADDR
// if mode then
35640: LD_VAR 0 5
35644: IFFALSE 35713
// begin for i = 1 to result do
35646: LD_ADDR_VAR 0 7
35650: PUSH
35651: DOUBLE
35652: LD_INT 1
35654: DEC
35655: ST_TO_ADDR
35656: LD_VAR 0 6
35660: PUSH
35661: FOR_TO
35662: IFFALSE 35701
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35664: LD_ADDR_VAR 0 9
35668: PUSH
35669: LD_VAR 0 9
35673: PPUSH
35674: LD_VAR 0 7
35678: PPUSH
35679: LD_VAR 0 6
35683: PUSH
35684: LD_VAR 0 7
35688: ARRAY
35689: PUSH
35690: LD_INT 1
35692: ARRAY
35693: PPUSH
35694: CALL_OW 1
35698: ST_TO_ADDR
35699: GO 35661
35701: POP
35702: POP
// result := tmp ;
35703: LD_ADDR_VAR 0 6
35707: PUSH
35708: LD_VAR 0 9
35712: ST_TO_ADDR
// end ; end ;
35713: LD_VAR 0 6
35717: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35718: LD_INT 0
35720: PPUSH
35721: PPUSH
35722: PPUSH
35723: PPUSH
35724: PPUSH
35725: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35726: LD_ADDR_VAR 0 5
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: LD_INT 0
35736: PUSH
35737: LD_INT 0
35739: PUSH
35740: EMPTY
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: ST_TO_ADDR
// if not x or not y then
35748: LD_VAR 0 2
35752: NOT
35753: PUSH
35754: LD_VAR 0 3
35758: NOT
35759: OR
35760: IFFALSE 35764
// exit ;
35762: GO 37414
// if not range then
35764: LD_VAR 0 4
35768: NOT
35769: IFFALSE 35779
// range := 10 ;
35771: LD_ADDR_VAR 0 4
35775: PUSH
35776: LD_INT 10
35778: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35779: LD_ADDR_VAR 0 8
35783: PUSH
35784: LD_INT 81
35786: PUSH
35787: LD_VAR 0 1
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 92
35798: PUSH
35799: LD_VAR 0 2
35803: PUSH
35804: LD_VAR 0 3
35808: PUSH
35809: LD_VAR 0 4
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 3
35822: PUSH
35823: LD_INT 21
35825: PUSH
35826: LD_INT 3
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: LIST
35841: PPUSH
35842: CALL_OW 69
35846: ST_TO_ADDR
// if not tmp then
35847: LD_VAR 0 8
35851: NOT
35852: IFFALSE 35856
// exit ;
35854: GO 37414
// for i in tmp do
35856: LD_ADDR_VAR 0 6
35860: PUSH
35861: LD_VAR 0 8
35865: PUSH
35866: FOR_IN
35867: IFFALSE 37389
// begin points := [ 0 , 0 , 0 ] ;
35869: LD_ADDR_VAR 0 9
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: LD_INT 0
35879: PUSH
35880: LD_INT 0
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: LIST
35887: ST_TO_ADDR
// bpoints := 1 ;
35888: LD_ADDR_VAR 0 10
35892: PUSH
35893: LD_INT 1
35895: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35896: LD_VAR 0 6
35900: PPUSH
35901: CALL_OW 247
35905: PUSH
35906: LD_INT 1
35908: DOUBLE
35909: EQUAL
35910: IFTRUE 35914
35912: GO 36492
35914: POP
// begin if GetClass ( i ) = 1 then
35915: LD_VAR 0 6
35919: PPUSH
35920: CALL_OW 257
35924: PUSH
35925: LD_INT 1
35927: EQUAL
35928: IFFALSE 35949
// points := [ 10 , 5 , 3 ] ;
35930: LD_ADDR_VAR 0 9
35934: PUSH
35935: LD_INT 10
35937: PUSH
35938: LD_INT 5
35940: PUSH
35941: LD_INT 3
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: LIST
35948: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35949: LD_VAR 0 6
35953: PPUSH
35954: CALL_OW 257
35958: PUSH
35959: LD_INT 2
35961: PUSH
35962: LD_INT 3
35964: PUSH
35965: LD_INT 4
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: LIST
35972: IN
35973: IFFALSE 35994
// points := [ 3 , 2 , 1 ] ;
35975: LD_ADDR_VAR 0 9
35979: PUSH
35980: LD_INT 3
35982: PUSH
35983: LD_INT 2
35985: PUSH
35986: LD_INT 1
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35994: LD_VAR 0 6
35998: PPUSH
35999: CALL_OW 257
36003: PUSH
36004: LD_INT 5
36006: EQUAL
36007: IFFALSE 36028
// points := [ 130 , 5 , 2 ] ;
36009: LD_ADDR_VAR 0 9
36013: PUSH
36014: LD_INT 130
36016: PUSH
36017: LD_INT 5
36019: PUSH
36020: LD_INT 2
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: LIST
36027: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36028: LD_VAR 0 6
36032: PPUSH
36033: CALL_OW 257
36037: PUSH
36038: LD_INT 8
36040: EQUAL
36041: IFFALSE 36062
// points := [ 35 , 35 , 30 ] ;
36043: LD_ADDR_VAR 0 9
36047: PUSH
36048: LD_INT 35
36050: PUSH
36051: LD_INT 35
36053: PUSH
36054: LD_INT 30
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: LIST
36061: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36062: LD_VAR 0 6
36066: PPUSH
36067: CALL_OW 257
36071: PUSH
36072: LD_INT 9
36074: EQUAL
36075: IFFALSE 36096
// points := [ 20 , 55 , 40 ] ;
36077: LD_ADDR_VAR 0 9
36081: PUSH
36082: LD_INT 20
36084: PUSH
36085: LD_INT 55
36087: PUSH
36088: LD_INT 40
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: LIST
36095: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36096: LD_VAR 0 6
36100: PPUSH
36101: CALL_OW 257
36105: PUSH
36106: LD_INT 12
36108: PUSH
36109: LD_INT 16
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: IN
36116: IFFALSE 36137
// points := [ 5 , 3 , 2 ] ;
36118: LD_ADDR_VAR 0 9
36122: PUSH
36123: LD_INT 5
36125: PUSH
36126: LD_INT 3
36128: PUSH
36129: LD_INT 2
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: LIST
36136: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36137: LD_VAR 0 6
36141: PPUSH
36142: CALL_OW 257
36146: PUSH
36147: LD_INT 17
36149: EQUAL
36150: IFFALSE 36171
// points := [ 100 , 50 , 75 ] ;
36152: LD_ADDR_VAR 0 9
36156: PUSH
36157: LD_INT 100
36159: PUSH
36160: LD_INT 50
36162: PUSH
36163: LD_INT 75
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: LIST
36170: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36171: LD_VAR 0 6
36175: PPUSH
36176: CALL_OW 257
36180: PUSH
36181: LD_INT 15
36183: EQUAL
36184: IFFALSE 36205
// points := [ 10 , 5 , 3 ] ;
36186: LD_ADDR_VAR 0 9
36190: PUSH
36191: LD_INT 10
36193: PUSH
36194: LD_INT 5
36196: PUSH
36197: LD_INT 3
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: LIST
36204: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36205: LD_VAR 0 6
36209: PPUSH
36210: CALL_OW 257
36214: PUSH
36215: LD_INT 14
36217: EQUAL
36218: IFFALSE 36239
// points := [ 10 , 0 , 0 ] ;
36220: LD_ADDR_VAR 0 9
36224: PUSH
36225: LD_INT 10
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: LD_INT 0
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36239: LD_VAR 0 6
36243: PPUSH
36244: CALL_OW 257
36248: PUSH
36249: LD_INT 11
36251: EQUAL
36252: IFFALSE 36273
// points := [ 30 , 10 , 5 ] ;
36254: LD_ADDR_VAR 0 9
36258: PUSH
36259: LD_INT 30
36261: PUSH
36262: LD_INT 10
36264: PUSH
36265: LD_INT 5
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: LIST
36272: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36273: LD_VAR 0 1
36277: PPUSH
36278: LD_INT 5
36280: PPUSH
36281: CALL_OW 321
36285: PUSH
36286: LD_INT 2
36288: EQUAL
36289: IFFALSE 36306
// bpoints := bpoints * 1.8 ;
36291: LD_ADDR_VAR 0 10
36295: PUSH
36296: LD_VAR 0 10
36300: PUSH
36301: LD_REAL  1.80000000000000E+0000
36304: MUL
36305: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36306: LD_VAR 0 6
36310: PPUSH
36311: CALL_OW 257
36315: PUSH
36316: LD_INT 1
36318: PUSH
36319: LD_INT 2
36321: PUSH
36322: LD_INT 3
36324: PUSH
36325: LD_INT 4
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: IN
36334: PUSH
36335: LD_VAR 0 1
36339: PPUSH
36340: LD_INT 51
36342: PPUSH
36343: CALL_OW 321
36347: PUSH
36348: LD_INT 2
36350: EQUAL
36351: AND
36352: IFFALSE 36369
// bpoints := bpoints * 1.2 ;
36354: LD_ADDR_VAR 0 10
36358: PUSH
36359: LD_VAR 0 10
36363: PUSH
36364: LD_REAL  1.20000000000000E+0000
36367: MUL
36368: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36369: LD_VAR 0 6
36373: PPUSH
36374: CALL_OW 257
36378: PUSH
36379: LD_INT 5
36381: PUSH
36382: LD_INT 7
36384: PUSH
36385: LD_INT 9
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: LIST
36392: IN
36393: PUSH
36394: LD_VAR 0 1
36398: PPUSH
36399: LD_INT 52
36401: PPUSH
36402: CALL_OW 321
36406: PUSH
36407: LD_INT 2
36409: EQUAL
36410: AND
36411: IFFALSE 36428
// bpoints := bpoints * 1.5 ;
36413: LD_ADDR_VAR 0 10
36417: PUSH
36418: LD_VAR 0 10
36422: PUSH
36423: LD_REAL  1.50000000000000E+0000
36426: MUL
36427: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36428: LD_VAR 0 1
36432: PPUSH
36433: LD_INT 66
36435: PPUSH
36436: CALL_OW 321
36440: PUSH
36441: LD_INT 2
36443: EQUAL
36444: IFFALSE 36461
// bpoints := bpoints * 1.1 ;
36446: LD_ADDR_VAR 0 10
36450: PUSH
36451: LD_VAR 0 10
36455: PUSH
36456: LD_REAL  1.10000000000000E+0000
36459: MUL
36460: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36461: LD_ADDR_VAR 0 10
36465: PUSH
36466: LD_VAR 0 10
36470: PUSH
36471: LD_VAR 0 6
36475: PPUSH
36476: LD_INT 1
36478: PPUSH
36479: CALL_OW 259
36483: PUSH
36484: LD_REAL  1.15000000000000E+0000
36487: MUL
36488: MUL
36489: ST_TO_ADDR
// end ; unit_vehicle :
36490: GO 37318
36492: LD_INT 2
36494: DOUBLE
36495: EQUAL
36496: IFTRUE 36500
36498: GO 37306
36500: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36501: LD_VAR 0 6
36505: PPUSH
36506: CALL_OW 264
36510: PUSH
36511: LD_INT 2
36513: PUSH
36514: LD_INT 42
36516: PUSH
36517: LD_INT 24
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: LIST
36524: IN
36525: IFFALSE 36546
// points := [ 25 , 5 , 3 ] ;
36527: LD_ADDR_VAR 0 9
36531: PUSH
36532: LD_INT 25
36534: PUSH
36535: LD_INT 5
36537: PUSH
36538: LD_INT 3
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: LIST
36545: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36546: LD_VAR 0 6
36550: PPUSH
36551: CALL_OW 264
36555: PUSH
36556: LD_INT 4
36558: PUSH
36559: LD_INT 43
36561: PUSH
36562: LD_INT 25
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: LIST
36569: IN
36570: IFFALSE 36591
// points := [ 40 , 15 , 5 ] ;
36572: LD_ADDR_VAR 0 9
36576: PUSH
36577: LD_INT 40
36579: PUSH
36580: LD_INT 15
36582: PUSH
36583: LD_INT 5
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: LIST
36590: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36591: LD_VAR 0 6
36595: PPUSH
36596: CALL_OW 264
36600: PUSH
36601: LD_INT 3
36603: PUSH
36604: LD_INT 23
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: IN
36611: IFFALSE 36632
// points := [ 7 , 25 , 8 ] ;
36613: LD_ADDR_VAR 0 9
36617: PUSH
36618: LD_INT 7
36620: PUSH
36621: LD_INT 25
36623: PUSH
36624: LD_INT 8
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: LIST
36631: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36632: LD_VAR 0 6
36636: PPUSH
36637: CALL_OW 264
36641: PUSH
36642: LD_INT 5
36644: PUSH
36645: LD_INT 27
36647: PUSH
36648: LD_INT 44
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: IN
36656: IFFALSE 36677
// points := [ 14 , 50 , 16 ] ;
36658: LD_ADDR_VAR 0 9
36662: PUSH
36663: LD_INT 14
36665: PUSH
36666: LD_INT 50
36668: PUSH
36669: LD_INT 16
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: LIST
36676: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36677: LD_VAR 0 6
36681: PPUSH
36682: CALL_OW 264
36686: PUSH
36687: LD_INT 6
36689: PUSH
36690: LD_INT 46
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: IN
36697: IFFALSE 36718
// points := [ 32 , 120 , 70 ] ;
36699: LD_ADDR_VAR 0 9
36703: PUSH
36704: LD_INT 32
36706: PUSH
36707: LD_INT 120
36709: PUSH
36710: LD_INT 70
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: LIST
36717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36718: LD_VAR 0 6
36722: PPUSH
36723: CALL_OW 264
36727: PUSH
36728: LD_INT 7
36730: PUSH
36731: LD_INT 28
36733: PUSH
36734: LD_INT 45
36736: PUSH
36737: LD_INT 92
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: IN
36746: IFFALSE 36767
// points := [ 35 , 20 , 45 ] ;
36748: LD_ADDR_VAR 0 9
36752: PUSH
36753: LD_INT 35
36755: PUSH
36756: LD_INT 20
36758: PUSH
36759: LD_INT 45
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: LIST
36766: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36767: LD_VAR 0 6
36771: PPUSH
36772: CALL_OW 264
36776: PUSH
36777: LD_INT 47
36779: PUSH
36780: EMPTY
36781: LIST
36782: IN
36783: IFFALSE 36804
// points := [ 67 , 45 , 75 ] ;
36785: LD_ADDR_VAR 0 9
36789: PUSH
36790: LD_INT 67
36792: PUSH
36793: LD_INT 45
36795: PUSH
36796: LD_INT 75
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: LIST
36803: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36804: LD_VAR 0 6
36808: PPUSH
36809: CALL_OW 264
36813: PUSH
36814: LD_INT 26
36816: PUSH
36817: EMPTY
36818: LIST
36819: IN
36820: IFFALSE 36841
// points := [ 120 , 30 , 80 ] ;
36822: LD_ADDR_VAR 0 9
36826: PUSH
36827: LD_INT 120
36829: PUSH
36830: LD_INT 30
36832: PUSH
36833: LD_INT 80
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: LIST
36840: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36841: LD_VAR 0 6
36845: PPUSH
36846: CALL_OW 264
36850: PUSH
36851: LD_INT 22
36853: PUSH
36854: EMPTY
36855: LIST
36856: IN
36857: IFFALSE 36878
// points := [ 40 , 1 , 1 ] ;
36859: LD_ADDR_VAR 0 9
36863: PUSH
36864: LD_INT 40
36866: PUSH
36867: LD_INT 1
36869: PUSH
36870: LD_INT 1
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: LIST
36877: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36878: LD_VAR 0 6
36882: PPUSH
36883: CALL_OW 264
36887: PUSH
36888: LD_INT 29
36890: PUSH
36891: EMPTY
36892: LIST
36893: IN
36894: IFFALSE 36915
// points := [ 70 , 200 , 400 ] ;
36896: LD_ADDR_VAR 0 9
36900: PUSH
36901: LD_INT 70
36903: PUSH
36904: LD_INT 200
36906: PUSH
36907: LD_INT 400
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: LIST
36914: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36915: LD_VAR 0 6
36919: PPUSH
36920: CALL_OW 264
36924: PUSH
36925: LD_INT 14
36927: PUSH
36928: LD_INT 53
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: IN
36935: IFFALSE 36956
// points := [ 40 , 10 , 20 ] ;
36937: LD_ADDR_VAR 0 9
36941: PUSH
36942: LD_INT 40
36944: PUSH
36945: LD_INT 10
36947: PUSH
36948: LD_INT 20
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: LIST
36955: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36956: LD_VAR 0 6
36960: PPUSH
36961: CALL_OW 264
36965: PUSH
36966: LD_INT 9
36968: PUSH
36969: EMPTY
36970: LIST
36971: IN
36972: IFFALSE 36993
// points := [ 5 , 70 , 20 ] ;
36974: LD_ADDR_VAR 0 9
36978: PUSH
36979: LD_INT 5
36981: PUSH
36982: LD_INT 70
36984: PUSH
36985: LD_INT 20
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: LIST
36992: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36993: LD_VAR 0 6
36997: PPUSH
36998: CALL_OW 264
37002: PUSH
37003: LD_INT 10
37005: PUSH
37006: EMPTY
37007: LIST
37008: IN
37009: IFFALSE 37030
// points := [ 35 , 110 , 70 ] ;
37011: LD_ADDR_VAR 0 9
37015: PUSH
37016: LD_INT 35
37018: PUSH
37019: LD_INT 110
37021: PUSH
37022: LD_INT 70
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: LIST
37029: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37030: LD_VAR 0 6
37034: PPUSH
37035: CALL_OW 265
37039: PUSH
37040: LD_INT 25
37042: EQUAL
37043: IFFALSE 37064
// points := [ 80 , 65 , 100 ] ;
37045: LD_ADDR_VAR 0 9
37049: PUSH
37050: LD_INT 80
37052: PUSH
37053: LD_INT 65
37055: PUSH
37056: LD_INT 100
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: LIST
37063: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37064: LD_VAR 0 6
37068: PPUSH
37069: CALL_OW 263
37073: PUSH
37074: LD_INT 1
37076: EQUAL
37077: IFFALSE 37112
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37079: LD_ADDR_VAR 0 10
37083: PUSH
37084: LD_VAR 0 10
37088: PUSH
37089: LD_VAR 0 6
37093: PPUSH
37094: CALL_OW 311
37098: PPUSH
37099: LD_INT 3
37101: PPUSH
37102: CALL_OW 259
37106: PUSH
37107: LD_INT 4
37109: MUL
37110: MUL
37111: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37112: LD_VAR 0 6
37116: PPUSH
37117: CALL_OW 263
37121: PUSH
37122: LD_INT 2
37124: EQUAL
37125: IFFALSE 37176
// begin j := IsControledBy ( i ) ;
37127: LD_ADDR_VAR 0 7
37131: PUSH
37132: LD_VAR 0 6
37136: PPUSH
37137: CALL_OW 312
37141: ST_TO_ADDR
// if j then
37142: LD_VAR 0 7
37146: IFFALSE 37176
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37148: LD_ADDR_VAR 0 10
37152: PUSH
37153: LD_VAR 0 10
37157: PUSH
37158: LD_VAR 0 7
37162: PPUSH
37163: LD_INT 3
37165: PPUSH
37166: CALL_OW 259
37170: PUSH
37171: LD_INT 3
37173: MUL
37174: MUL
37175: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37176: LD_VAR 0 6
37180: PPUSH
37181: CALL_OW 264
37185: PUSH
37186: LD_INT 5
37188: PUSH
37189: LD_INT 6
37191: PUSH
37192: LD_INT 46
37194: PUSH
37195: LD_INT 44
37197: PUSH
37198: LD_INT 47
37200: PUSH
37201: LD_INT 45
37203: PUSH
37204: LD_INT 28
37206: PUSH
37207: LD_INT 7
37209: PUSH
37210: LD_INT 27
37212: PUSH
37213: LD_INT 29
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: IN
37228: PUSH
37229: LD_VAR 0 1
37233: PPUSH
37234: LD_INT 52
37236: PPUSH
37237: CALL_OW 321
37241: PUSH
37242: LD_INT 2
37244: EQUAL
37245: AND
37246: IFFALSE 37263
// bpoints := bpoints * 1.2 ;
37248: LD_ADDR_VAR 0 10
37252: PUSH
37253: LD_VAR 0 10
37257: PUSH
37258: LD_REAL  1.20000000000000E+0000
37261: MUL
37262: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37263: LD_VAR 0 6
37267: PPUSH
37268: CALL_OW 264
37272: PUSH
37273: LD_INT 6
37275: PUSH
37276: LD_INT 46
37278: PUSH
37279: LD_INT 47
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: LIST
37286: IN
37287: IFFALSE 37304
// bpoints := bpoints * 1.2 ;
37289: LD_ADDR_VAR 0 10
37293: PUSH
37294: LD_VAR 0 10
37298: PUSH
37299: LD_REAL  1.20000000000000E+0000
37302: MUL
37303: ST_TO_ADDR
// end ; unit_building :
37304: GO 37318
37306: LD_INT 3
37308: DOUBLE
37309: EQUAL
37310: IFTRUE 37314
37312: GO 37317
37314: POP
// ; end ;
37315: GO 37318
37317: POP
// for j = 1 to 3 do
37318: LD_ADDR_VAR 0 7
37322: PUSH
37323: DOUBLE
37324: LD_INT 1
37326: DEC
37327: ST_TO_ADDR
37328: LD_INT 3
37330: PUSH
37331: FOR_TO
37332: IFFALSE 37385
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37334: LD_ADDR_VAR 0 5
37338: PUSH
37339: LD_VAR 0 5
37343: PPUSH
37344: LD_VAR 0 7
37348: PPUSH
37349: LD_VAR 0 5
37353: PUSH
37354: LD_VAR 0 7
37358: ARRAY
37359: PUSH
37360: LD_VAR 0 9
37364: PUSH
37365: LD_VAR 0 7
37369: ARRAY
37370: PUSH
37371: LD_VAR 0 10
37375: MUL
37376: PLUS
37377: PPUSH
37378: CALL_OW 1
37382: ST_TO_ADDR
37383: GO 37331
37385: POP
37386: POP
// end ;
37387: GO 35866
37389: POP
37390: POP
// result := Replace ( result , 4 , tmp ) ;
37391: LD_ADDR_VAR 0 5
37395: PUSH
37396: LD_VAR 0 5
37400: PPUSH
37401: LD_INT 4
37403: PPUSH
37404: LD_VAR 0 8
37408: PPUSH
37409: CALL_OW 1
37413: ST_TO_ADDR
// end ;
37414: LD_VAR 0 5
37418: RET
// export function DangerAtRange ( unit , range ) ; begin
37419: LD_INT 0
37421: PPUSH
// if not unit then
37422: LD_VAR 0 1
37426: NOT
37427: IFFALSE 37431
// exit ;
37429: GO 37476
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37431: LD_ADDR_VAR 0 3
37435: PUSH
37436: LD_VAR 0 1
37440: PPUSH
37441: CALL_OW 255
37445: PPUSH
37446: LD_VAR 0 1
37450: PPUSH
37451: CALL_OW 250
37455: PPUSH
37456: LD_VAR 0 1
37460: PPUSH
37461: CALL_OW 251
37465: PPUSH
37466: LD_VAR 0 2
37470: PPUSH
37471: CALL 35718 0 4
37475: ST_TO_ADDR
// end ;
37476: LD_VAR 0 3
37480: RET
// export function DangerInArea ( side , area ) ; begin
37481: LD_INT 0
37483: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37484: LD_ADDR_VAR 0 3
37488: PUSH
37489: LD_VAR 0 2
37493: PPUSH
37494: LD_INT 81
37496: PUSH
37497: LD_VAR 0 1
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PPUSH
37506: CALL_OW 70
37510: ST_TO_ADDR
// end ;
37511: LD_VAR 0 3
37515: RET
// export function IsExtension ( b ) ; begin
37516: LD_INT 0
37518: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37519: LD_ADDR_VAR 0 2
37523: PUSH
37524: LD_VAR 0 1
37528: PUSH
37529: LD_INT 23
37531: PUSH
37532: LD_INT 20
37534: PUSH
37535: LD_INT 22
37537: PUSH
37538: LD_INT 17
37540: PUSH
37541: LD_INT 24
37543: PUSH
37544: LD_INT 21
37546: PUSH
37547: LD_INT 19
37549: PUSH
37550: LD_INT 16
37552: PUSH
37553: LD_INT 25
37555: PUSH
37556: LD_INT 18
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: IN
37571: ST_TO_ADDR
// end ;
37572: LD_VAR 0 2
37576: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37577: LD_INT 0
37579: PPUSH
37580: PPUSH
37581: PPUSH
// result := [ ] ;
37582: LD_ADDR_VAR 0 4
37586: PUSH
37587: EMPTY
37588: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37589: LD_ADDR_VAR 0 5
37593: PUSH
37594: LD_VAR 0 2
37598: PPUSH
37599: LD_INT 21
37601: PUSH
37602: LD_INT 3
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PPUSH
37609: CALL_OW 70
37613: ST_TO_ADDR
// if not tmp then
37614: LD_VAR 0 5
37618: NOT
37619: IFFALSE 37623
// exit ;
37621: GO 37687
// if checkLink then
37623: LD_VAR 0 3
37627: IFFALSE 37677
// begin for i in tmp do
37629: LD_ADDR_VAR 0 6
37633: PUSH
37634: LD_VAR 0 5
37638: PUSH
37639: FOR_IN
37640: IFFALSE 37675
// if GetBase ( i ) <> base then
37642: LD_VAR 0 6
37646: PPUSH
37647: CALL_OW 274
37651: PUSH
37652: LD_VAR 0 1
37656: NONEQUAL
37657: IFFALSE 37673
// ComLinkToBase ( base , i ) ;
37659: LD_VAR 0 1
37663: PPUSH
37664: LD_VAR 0 6
37668: PPUSH
37669: CALL_OW 169
37673: GO 37639
37675: POP
37676: POP
// end ; result := tmp ;
37677: LD_ADDR_VAR 0 4
37681: PUSH
37682: LD_VAR 0 5
37686: ST_TO_ADDR
// end ;
37687: LD_VAR 0 4
37691: RET
// export function ComComplete ( units , b ) ; var i ; begin
37692: LD_INT 0
37694: PPUSH
37695: PPUSH
// if not units then
37696: LD_VAR 0 1
37700: NOT
37701: IFFALSE 37705
// exit ;
37703: GO 37795
// for i in units do
37705: LD_ADDR_VAR 0 4
37709: PUSH
37710: LD_VAR 0 1
37714: PUSH
37715: FOR_IN
37716: IFFALSE 37793
// if BuildingStatus ( b ) = bs_build then
37718: LD_VAR 0 2
37722: PPUSH
37723: CALL_OW 461
37727: PUSH
37728: LD_INT 1
37730: EQUAL
37731: IFFALSE 37791
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37733: LD_VAR 0 4
37737: PPUSH
37738: LD_STRING h
37740: PUSH
37741: LD_VAR 0 2
37745: PPUSH
37746: CALL_OW 250
37750: PUSH
37751: LD_VAR 0 2
37755: PPUSH
37756: CALL_OW 251
37760: PUSH
37761: LD_VAR 0 2
37765: PUSH
37766: LD_INT 0
37768: PUSH
37769: LD_INT 0
37771: PUSH
37772: LD_INT 0
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: PUSH
37784: EMPTY
37785: LIST
37786: PPUSH
37787: CALL_OW 446
37791: GO 37715
37793: POP
37794: POP
// end ;
37795: LD_VAR 0 3
37799: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37800: LD_INT 0
37802: PPUSH
37803: PPUSH
37804: PPUSH
37805: PPUSH
37806: PPUSH
37807: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37808: LD_VAR 0 1
37812: NOT
37813: PUSH
37814: LD_VAR 0 1
37818: PPUSH
37819: CALL_OW 263
37823: PUSH
37824: LD_INT 2
37826: NONEQUAL
37827: OR
37828: IFFALSE 37832
// exit ;
37830: GO 38148
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37832: LD_ADDR_VAR 0 6
37836: PUSH
37837: LD_INT 22
37839: PUSH
37840: LD_VAR 0 1
37844: PPUSH
37845: CALL_OW 255
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 2
37856: PUSH
37857: LD_INT 30
37859: PUSH
37860: LD_INT 36
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 34
37869: PUSH
37870: LD_INT 31
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: LIST
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PPUSH
37886: CALL_OW 69
37890: ST_TO_ADDR
// if not tmp then
37891: LD_VAR 0 6
37895: NOT
37896: IFFALSE 37900
// exit ;
37898: GO 38148
// result := [ ] ;
37900: LD_ADDR_VAR 0 2
37904: PUSH
37905: EMPTY
37906: ST_TO_ADDR
// for i in tmp do
37907: LD_ADDR_VAR 0 3
37911: PUSH
37912: LD_VAR 0 6
37916: PUSH
37917: FOR_IN
37918: IFFALSE 37989
// begin t := UnitsInside ( i ) ;
37920: LD_ADDR_VAR 0 4
37924: PUSH
37925: LD_VAR 0 3
37929: PPUSH
37930: CALL_OW 313
37934: ST_TO_ADDR
// if t then
37935: LD_VAR 0 4
37939: IFFALSE 37987
// for j in t do
37941: LD_ADDR_VAR 0 7
37945: PUSH
37946: LD_VAR 0 4
37950: PUSH
37951: FOR_IN
37952: IFFALSE 37985
// result := Replace ( result , result + 1 , j ) ;
37954: LD_ADDR_VAR 0 2
37958: PUSH
37959: LD_VAR 0 2
37963: PPUSH
37964: LD_VAR 0 2
37968: PUSH
37969: LD_INT 1
37971: PLUS
37972: PPUSH
37973: LD_VAR 0 7
37977: PPUSH
37978: CALL_OW 1
37982: ST_TO_ADDR
37983: GO 37951
37985: POP
37986: POP
// end ;
37987: GO 37917
37989: POP
37990: POP
// if not result then
37991: LD_VAR 0 2
37995: NOT
37996: IFFALSE 38000
// exit ;
37998: GO 38148
// mech := result [ 1 ] ;
38000: LD_ADDR_VAR 0 5
38004: PUSH
38005: LD_VAR 0 2
38009: PUSH
38010: LD_INT 1
38012: ARRAY
38013: ST_TO_ADDR
// if result > 1 then
38014: LD_VAR 0 2
38018: PUSH
38019: LD_INT 1
38021: GREATER
38022: IFFALSE 38134
// begin for i = 2 to result do
38024: LD_ADDR_VAR 0 3
38028: PUSH
38029: DOUBLE
38030: LD_INT 2
38032: DEC
38033: ST_TO_ADDR
38034: LD_VAR 0 2
38038: PUSH
38039: FOR_TO
38040: IFFALSE 38132
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38042: LD_ADDR_VAR 0 4
38046: PUSH
38047: LD_VAR 0 2
38051: PUSH
38052: LD_VAR 0 3
38056: ARRAY
38057: PPUSH
38058: LD_INT 3
38060: PPUSH
38061: CALL_OW 259
38065: PUSH
38066: LD_VAR 0 2
38070: PUSH
38071: LD_VAR 0 3
38075: ARRAY
38076: PPUSH
38077: CALL_OW 432
38081: MINUS
38082: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38083: LD_VAR 0 4
38087: PUSH
38088: LD_VAR 0 5
38092: PPUSH
38093: LD_INT 3
38095: PPUSH
38096: CALL_OW 259
38100: PUSH
38101: LD_VAR 0 5
38105: PPUSH
38106: CALL_OW 432
38110: MINUS
38111: GREATEREQUAL
38112: IFFALSE 38130
// mech := result [ i ] ;
38114: LD_ADDR_VAR 0 5
38118: PUSH
38119: LD_VAR 0 2
38123: PUSH
38124: LD_VAR 0 3
38128: ARRAY
38129: ST_TO_ADDR
// end ;
38130: GO 38039
38132: POP
38133: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38134: LD_VAR 0 1
38138: PPUSH
38139: LD_VAR 0 5
38143: PPUSH
38144: CALL_OW 135
// end ;
38148: LD_VAR 0 2
38152: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38153: LD_INT 0
38155: PPUSH
38156: PPUSH
38157: PPUSH
38158: PPUSH
38159: PPUSH
38160: PPUSH
38161: PPUSH
38162: PPUSH
38163: PPUSH
38164: PPUSH
38165: PPUSH
38166: PPUSH
38167: PPUSH
// result := [ ] ;
38168: LD_ADDR_VAR 0 7
38172: PUSH
38173: EMPTY
38174: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38175: LD_VAR 0 1
38179: PPUSH
38180: CALL_OW 266
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: LD_INT 1
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: IN
38195: NOT
38196: IFFALSE 38200
// exit ;
38198: GO 39834
// if name then
38200: LD_VAR 0 3
38204: IFFALSE 38220
// SetBName ( base_dep , name ) ;
38206: LD_VAR 0 1
38210: PPUSH
38211: LD_VAR 0 3
38215: PPUSH
38216: CALL_OW 500
// base := GetBase ( base_dep ) ;
38220: LD_ADDR_VAR 0 15
38224: PUSH
38225: LD_VAR 0 1
38229: PPUSH
38230: CALL_OW 274
38234: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38235: LD_ADDR_VAR 0 16
38239: PUSH
38240: LD_VAR 0 1
38244: PPUSH
38245: CALL_OW 255
38249: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38250: LD_ADDR_VAR 0 17
38254: PUSH
38255: LD_VAR 0 1
38259: PPUSH
38260: CALL_OW 248
38264: ST_TO_ADDR
// if sources then
38265: LD_VAR 0 5
38269: IFFALSE 38316
// for i = 1 to 3 do
38271: LD_ADDR_VAR 0 8
38275: PUSH
38276: DOUBLE
38277: LD_INT 1
38279: DEC
38280: ST_TO_ADDR
38281: LD_INT 3
38283: PUSH
38284: FOR_TO
38285: IFFALSE 38314
// AddResourceType ( base , i , sources [ i ] ) ;
38287: LD_VAR 0 15
38291: PPUSH
38292: LD_VAR 0 8
38296: PPUSH
38297: LD_VAR 0 5
38301: PUSH
38302: LD_VAR 0 8
38306: ARRAY
38307: PPUSH
38308: CALL_OW 276
38312: GO 38284
38314: POP
38315: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38316: LD_ADDR_VAR 0 18
38320: PUSH
38321: LD_VAR 0 15
38325: PPUSH
38326: LD_VAR 0 2
38330: PPUSH
38331: LD_INT 1
38333: PPUSH
38334: CALL 37577 0 3
38338: ST_TO_ADDR
// InitHc ;
38339: CALL_OW 19
// InitUc ;
38343: CALL_OW 18
// uc_side := side ;
38347: LD_ADDR_OWVAR 20
38351: PUSH
38352: LD_VAR 0 16
38356: ST_TO_ADDR
// uc_nation := nation ;
38357: LD_ADDR_OWVAR 21
38361: PUSH
38362: LD_VAR 0 17
38366: ST_TO_ADDR
// if buildings then
38367: LD_VAR 0 18
38371: IFFALSE 39693
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38373: LD_ADDR_VAR 0 19
38377: PUSH
38378: LD_VAR 0 18
38382: PPUSH
38383: LD_INT 2
38385: PUSH
38386: LD_INT 30
38388: PUSH
38389: LD_INT 29
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 30
38398: PUSH
38399: LD_INT 30
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: LIST
38410: PPUSH
38411: CALL_OW 72
38415: ST_TO_ADDR
// if tmp then
38416: LD_VAR 0 19
38420: IFFALSE 38468
// for i in tmp do
38422: LD_ADDR_VAR 0 8
38426: PUSH
38427: LD_VAR 0 19
38431: PUSH
38432: FOR_IN
38433: IFFALSE 38466
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38435: LD_VAR 0 8
38439: PPUSH
38440: CALL_OW 250
38444: PPUSH
38445: LD_VAR 0 8
38449: PPUSH
38450: CALL_OW 251
38454: PPUSH
38455: LD_VAR 0 16
38459: PPUSH
38460: CALL_OW 441
38464: GO 38432
38466: POP
38467: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38468: LD_VAR 0 18
38472: PPUSH
38473: LD_INT 2
38475: PUSH
38476: LD_INT 30
38478: PUSH
38479: LD_INT 32
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 30
38488: PUSH
38489: LD_INT 33
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: LIST
38500: PPUSH
38501: CALL_OW 72
38505: IFFALSE 38593
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38507: LD_ADDR_VAR 0 8
38511: PUSH
38512: LD_VAR 0 18
38516: PPUSH
38517: LD_INT 2
38519: PUSH
38520: LD_INT 30
38522: PUSH
38523: LD_INT 32
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 30
38532: PUSH
38533: LD_INT 33
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: LIST
38544: PPUSH
38545: CALL_OW 72
38549: PUSH
38550: FOR_IN
38551: IFFALSE 38591
// begin if not GetBWeapon ( i ) then
38553: LD_VAR 0 8
38557: PPUSH
38558: CALL_OW 269
38562: NOT
38563: IFFALSE 38589
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38565: LD_VAR 0 8
38569: PPUSH
38570: LD_VAR 0 8
38574: PPUSH
38575: LD_VAR 0 2
38579: PPUSH
38580: CALL 39839 0 2
38584: PPUSH
38585: CALL_OW 431
// end ;
38589: GO 38550
38591: POP
38592: POP
// end ; for i = 1 to personel do
38593: LD_ADDR_VAR 0 8
38597: PUSH
38598: DOUBLE
38599: LD_INT 1
38601: DEC
38602: ST_TO_ADDR
38603: LD_VAR 0 6
38607: PUSH
38608: FOR_TO
38609: IFFALSE 39673
// begin if i > 4 then
38611: LD_VAR 0 8
38615: PUSH
38616: LD_INT 4
38618: GREATER
38619: IFFALSE 38623
// break ;
38621: GO 39673
// case i of 1 :
38623: LD_VAR 0 8
38627: PUSH
38628: LD_INT 1
38630: DOUBLE
38631: EQUAL
38632: IFTRUE 38636
38634: GO 38716
38636: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38637: LD_ADDR_VAR 0 12
38641: PUSH
38642: LD_VAR 0 18
38646: PPUSH
38647: LD_INT 22
38649: PUSH
38650: LD_VAR 0 16
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 58
38661: PUSH
38662: EMPTY
38663: LIST
38664: PUSH
38665: LD_INT 2
38667: PUSH
38668: LD_INT 30
38670: PUSH
38671: LD_INT 32
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 30
38680: PUSH
38681: LD_INT 4
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 30
38690: PUSH
38691: LD_INT 5
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: LIST
38708: PPUSH
38709: CALL_OW 72
38713: ST_TO_ADDR
38714: GO 38938
38716: LD_INT 2
38718: DOUBLE
38719: EQUAL
38720: IFTRUE 38724
38722: GO 38786
38724: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38725: LD_ADDR_VAR 0 12
38729: PUSH
38730: LD_VAR 0 18
38734: PPUSH
38735: LD_INT 22
38737: PUSH
38738: LD_VAR 0 16
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 2
38749: PUSH
38750: LD_INT 30
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 30
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: LIST
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PPUSH
38779: CALL_OW 72
38783: ST_TO_ADDR
38784: GO 38938
38786: LD_INT 3
38788: DOUBLE
38789: EQUAL
38790: IFTRUE 38794
38792: GO 38856
38794: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38795: LD_ADDR_VAR 0 12
38799: PUSH
38800: LD_VAR 0 18
38804: PPUSH
38805: LD_INT 22
38807: PUSH
38808: LD_VAR 0 16
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: LD_INT 30
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 30
38832: PUSH
38833: LD_INT 3
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: LIST
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PPUSH
38849: CALL_OW 72
38853: ST_TO_ADDR
38854: GO 38938
38856: LD_INT 4
38858: DOUBLE
38859: EQUAL
38860: IFTRUE 38864
38862: GO 38937
38864: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38865: LD_ADDR_VAR 0 12
38869: PUSH
38870: LD_VAR 0 18
38874: PPUSH
38875: LD_INT 22
38877: PUSH
38878: LD_VAR 0 16
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 2
38889: PUSH
38890: LD_INT 30
38892: PUSH
38893: LD_INT 6
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 30
38902: PUSH
38903: LD_INT 7
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 30
38912: PUSH
38913: LD_INT 8
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PPUSH
38930: CALL_OW 72
38934: ST_TO_ADDR
38935: GO 38938
38937: POP
// if i = 1 then
38938: LD_VAR 0 8
38942: PUSH
38943: LD_INT 1
38945: EQUAL
38946: IFFALSE 39057
// begin tmp := [ ] ;
38948: LD_ADDR_VAR 0 19
38952: PUSH
38953: EMPTY
38954: ST_TO_ADDR
// for j in f do
38955: LD_ADDR_VAR 0 9
38959: PUSH
38960: LD_VAR 0 12
38964: PUSH
38965: FOR_IN
38966: IFFALSE 39039
// if GetBType ( j ) = b_bunker then
38968: LD_VAR 0 9
38972: PPUSH
38973: CALL_OW 266
38977: PUSH
38978: LD_INT 32
38980: EQUAL
38981: IFFALSE 39008
// tmp := Insert ( tmp , 1 , j ) else
38983: LD_ADDR_VAR 0 19
38987: PUSH
38988: LD_VAR 0 19
38992: PPUSH
38993: LD_INT 1
38995: PPUSH
38996: LD_VAR 0 9
39000: PPUSH
39001: CALL_OW 2
39005: ST_TO_ADDR
39006: GO 39037
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39008: LD_ADDR_VAR 0 19
39012: PUSH
39013: LD_VAR 0 19
39017: PPUSH
39018: LD_VAR 0 19
39022: PUSH
39023: LD_INT 1
39025: PLUS
39026: PPUSH
39027: LD_VAR 0 9
39031: PPUSH
39032: CALL_OW 2
39036: ST_TO_ADDR
39037: GO 38965
39039: POP
39040: POP
// if tmp then
39041: LD_VAR 0 19
39045: IFFALSE 39057
// f := tmp ;
39047: LD_ADDR_VAR 0 12
39051: PUSH
39052: LD_VAR 0 19
39056: ST_TO_ADDR
// end ; x := personel [ i ] ;
39057: LD_ADDR_VAR 0 13
39061: PUSH
39062: LD_VAR 0 6
39066: PUSH
39067: LD_VAR 0 8
39071: ARRAY
39072: ST_TO_ADDR
// if x = - 1 then
39073: LD_VAR 0 13
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: EQUAL
39082: IFFALSE 39291
// begin for j in f do
39084: LD_ADDR_VAR 0 9
39088: PUSH
39089: LD_VAR 0 12
39093: PUSH
39094: FOR_IN
39095: IFFALSE 39287
// repeat InitHc ;
39097: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39101: LD_VAR 0 9
39105: PPUSH
39106: CALL_OW 266
39110: PUSH
39111: LD_INT 5
39113: EQUAL
39114: IFFALSE 39184
// begin if UnitsInside ( j ) < 3 then
39116: LD_VAR 0 9
39120: PPUSH
39121: CALL_OW 313
39125: PUSH
39126: LD_INT 3
39128: LESS
39129: IFFALSE 39165
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39131: LD_INT 0
39133: PPUSH
39134: LD_INT 5
39136: PUSH
39137: LD_INT 8
39139: PUSH
39140: LD_INT 9
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: LIST
39147: PUSH
39148: LD_VAR 0 17
39152: ARRAY
39153: PPUSH
39154: LD_VAR 0 4
39158: PPUSH
39159: CALL_OW 380
39163: GO 39182
// PrepareHuman ( false , i , skill ) ;
39165: LD_INT 0
39167: PPUSH
39168: LD_VAR 0 8
39172: PPUSH
39173: LD_VAR 0 4
39177: PPUSH
39178: CALL_OW 380
// end else
39182: GO 39201
// PrepareHuman ( false , i , skill ) ;
39184: LD_INT 0
39186: PPUSH
39187: LD_VAR 0 8
39191: PPUSH
39192: LD_VAR 0 4
39196: PPUSH
39197: CALL_OW 380
// un := CreateHuman ;
39201: LD_ADDR_VAR 0 14
39205: PUSH
39206: CALL_OW 44
39210: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39211: LD_ADDR_VAR 0 7
39215: PUSH
39216: LD_VAR 0 7
39220: PPUSH
39221: LD_INT 1
39223: PPUSH
39224: LD_VAR 0 14
39228: PPUSH
39229: CALL_OW 2
39233: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39234: LD_VAR 0 14
39238: PPUSH
39239: LD_VAR 0 9
39243: PPUSH
39244: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39248: LD_VAR 0 9
39252: PPUSH
39253: CALL_OW 313
39257: PUSH
39258: LD_INT 6
39260: EQUAL
39261: PUSH
39262: LD_VAR 0 9
39266: PPUSH
39267: CALL_OW 266
39271: PUSH
39272: LD_INT 32
39274: PUSH
39275: LD_INT 31
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: IN
39282: OR
39283: IFFALSE 39097
39285: GO 39094
39287: POP
39288: POP
// end else
39289: GO 39671
// for j = 1 to x do
39291: LD_ADDR_VAR 0 9
39295: PUSH
39296: DOUBLE
39297: LD_INT 1
39299: DEC
39300: ST_TO_ADDR
39301: LD_VAR 0 13
39305: PUSH
39306: FOR_TO
39307: IFFALSE 39669
// begin InitHc ;
39309: CALL_OW 19
// if not f then
39313: LD_VAR 0 12
39317: NOT
39318: IFFALSE 39407
// begin PrepareHuman ( false , i , skill ) ;
39320: LD_INT 0
39322: PPUSH
39323: LD_VAR 0 8
39327: PPUSH
39328: LD_VAR 0 4
39332: PPUSH
39333: CALL_OW 380
// un := CreateHuman ;
39337: LD_ADDR_VAR 0 14
39341: PUSH
39342: CALL_OW 44
39346: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39347: LD_ADDR_VAR 0 7
39351: PUSH
39352: LD_VAR 0 7
39356: PPUSH
39357: LD_INT 1
39359: PPUSH
39360: LD_VAR 0 14
39364: PPUSH
39365: CALL_OW 2
39369: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39370: LD_VAR 0 14
39374: PPUSH
39375: LD_VAR 0 1
39379: PPUSH
39380: CALL_OW 250
39384: PPUSH
39385: LD_VAR 0 1
39389: PPUSH
39390: CALL_OW 251
39394: PPUSH
39395: LD_INT 10
39397: PPUSH
39398: LD_INT 0
39400: PPUSH
39401: CALL_OW 50
// continue ;
39405: GO 39306
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39407: LD_VAR 0 12
39411: PUSH
39412: LD_INT 1
39414: ARRAY
39415: PPUSH
39416: CALL_OW 313
39420: PUSH
39421: LD_VAR 0 12
39425: PUSH
39426: LD_INT 1
39428: ARRAY
39429: PPUSH
39430: CALL_OW 266
39434: PUSH
39435: LD_INT 32
39437: PUSH
39438: LD_INT 31
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: IN
39445: AND
39446: PUSH
39447: LD_VAR 0 12
39451: PUSH
39452: LD_INT 1
39454: ARRAY
39455: PPUSH
39456: CALL_OW 313
39460: PUSH
39461: LD_INT 6
39463: EQUAL
39464: OR
39465: IFFALSE 39485
// f := Delete ( f , 1 ) ;
39467: LD_ADDR_VAR 0 12
39471: PUSH
39472: LD_VAR 0 12
39476: PPUSH
39477: LD_INT 1
39479: PPUSH
39480: CALL_OW 3
39484: ST_TO_ADDR
// if not f then
39485: LD_VAR 0 12
39489: NOT
39490: IFFALSE 39508
// begin x := x + 2 ;
39492: LD_ADDR_VAR 0 13
39496: PUSH
39497: LD_VAR 0 13
39501: PUSH
39502: LD_INT 2
39504: PLUS
39505: ST_TO_ADDR
// continue ;
39506: GO 39306
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39508: LD_VAR 0 12
39512: PUSH
39513: LD_INT 1
39515: ARRAY
39516: PPUSH
39517: CALL_OW 266
39521: PUSH
39522: LD_INT 5
39524: EQUAL
39525: IFFALSE 39599
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39527: LD_VAR 0 12
39531: PUSH
39532: LD_INT 1
39534: ARRAY
39535: PPUSH
39536: CALL_OW 313
39540: PUSH
39541: LD_INT 3
39543: LESS
39544: IFFALSE 39580
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39546: LD_INT 0
39548: PPUSH
39549: LD_INT 5
39551: PUSH
39552: LD_INT 8
39554: PUSH
39555: LD_INT 9
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: LIST
39562: PUSH
39563: LD_VAR 0 17
39567: ARRAY
39568: PPUSH
39569: LD_VAR 0 4
39573: PPUSH
39574: CALL_OW 380
39578: GO 39597
// PrepareHuman ( false , i , skill ) ;
39580: LD_INT 0
39582: PPUSH
39583: LD_VAR 0 8
39587: PPUSH
39588: LD_VAR 0 4
39592: PPUSH
39593: CALL_OW 380
// end else
39597: GO 39616
// PrepareHuman ( false , i , skill ) ;
39599: LD_INT 0
39601: PPUSH
39602: LD_VAR 0 8
39606: PPUSH
39607: LD_VAR 0 4
39611: PPUSH
39612: CALL_OW 380
// un := CreateHuman ;
39616: LD_ADDR_VAR 0 14
39620: PUSH
39621: CALL_OW 44
39625: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39626: LD_ADDR_VAR 0 7
39630: PUSH
39631: LD_VAR 0 7
39635: PPUSH
39636: LD_INT 1
39638: PPUSH
39639: LD_VAR 0 14
39643: PPUSH
39644: CALL_OW 2
39648: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39649: LD_VAR 0 14
39653: PPUSH
39654: LD_VAR 0 12
39658: PUSH
39659: LD_INT 1
39661: ARRAY
39662: PPUSH
39663: CALL_OW 52
// end ;
39667: GO 39306
39669: POP
39670: POP
// end ;
39671: GO 38608
39673: POP
39674: POP
// result := result ^ buildings ;
39675: LD_ADDR_VAR 0 7
39679: PUSH
39680: LD_VAR 0 7
39684: PUSH
39685: LD_VAR 0 18
39689: ADD
39690: ST_TO_ADDR
// end else
39691: GO 39834
// begin for i = 1 to personel do
39693: LD_ADDR_VAR 0 8
39697: PUSH
39698: DOUBLE
39699: LD_INT 1
39701: DEC
39702: ST_TO_ADDR
39703: LD_VAR 0 6
39707: PUSH
39708: FOR_TO
39709: IFFALSE 39832
// begin if i > 4 then
39711: LD_VAR 0 8
39715: PUSH
39716: LD_INT 4
39718: GREATER
39719: IFFALSE 39723
// break ;
39721: GO 39832
// x := personel [ i ] ;
39723: LD_ADDR_VAR 0 13
39727: PUSH
39728: LD_VAR 0 6
39732: PUSH
39733: LD_VAR 0 8
39737: ARRAY
39738: ST_TO_ADDR
// if x = - 1 then
39739: LD_VAR 0 13
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: EQUAL
39748: IFFALSE 39752
// continue ;
39750: GO 39708
// PrepareHuman ( false , i , skill ) ;
39752: LD_INT 0
39754: PPUSH
39755: LD_VAR 0 8
39759: PPUSH
39760: LD_VAR 0 4
39764: PPUSH
39765: CALL_OW 380
// un := CreateHuman ;
39769: LD_ADDR_VAR 0 14
39773: PUSH
39774: CALL_OW 44
39778: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39779: LD_VAR 0 14
39783: PPUSH
39784: LD_VAR 0 1
39788: PPUSH
39789: CALL_OW 250
39793: PPUSH
39794: LD_VAR 0 1
39798: PPUSH
39799: CALL_OW 251
39803: PPUSH
39804: LD_INT 10
39806: PPUSH
39807: LD_INT 0
39809: PPUSH
39810: CALL_OW 50
// result := result ^ un ;
39814: LD_ADDR_VAR 0 7
39818: PUSH
39819: LD_VAR 0 7
39823: PUSH
39824: LD_VAR 0 14
39828: ADD
39829: ST_TO_ADDR
// end ;
39830: GO 39708
39832: POP
39833: POP
// end ; end ;
39834: LD_VAR 0 7
39838: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39839: LD_INT 0
39841: PPUSH
39842: PPUSH
39843: PPUSH
39844: PPUSH
39845: PPUSH
39846: PPUSH
39847: PPUSH
39848: PPUSH
39849: PPUSH
39850: PPUSH
39851: PPUSH
39852: PPUSH
39853: PPUSH
39854: PPUSH
39855: PPUSH
39856: PPUSH
// result := false ;
39857: LD_ADDR_VAR 0 3
39861: PUSH
39862: LD_INT 0
39864: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39865: LD_VAR 0 1
39869: NOT
39870: PUSH
39871: LD_VAR 0 1
39875: PPUSH
39876: CALL_OW 266
39880: PUSH
39881: LD_INT 32
39883: PUSH
39884: LD_INT 33
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: IN
39891: NOT
39892: OR
39893: IFFALSE 39897
// exit ;
39895: GO 41006
// nat := GetNation ( tower ) ;
39897: LD_ADDR_VAR 0 12
39901: PUSH
39902: LD_VAR 0 1
39906: PPUSH
39907: CALL_OW 248
39911: ST_TO_ADDR
// side := GetSide ( tower ) ;
39912: LD_ADDR_VAR 0 16
39916: PUSH
39917: LD_VAR 0 1
39921: PPUSH
39922: CALL_OW 255
39926: ST_TO_ADDR
// x := GetX ( tower ) ;
39927: LD_ADDR_VAR 0 10
39931: PUSH
39932: LD_VAR 0 1
39936: PPUSH
39937: CALL_OW 250
39941: ST_TO_ADDR
// y := GetY ( tower ) ;
39942: LD_ADDR_VAR 0 11
39946: PUSH
39947: LD_VAR 0 1
39951: PPUSH
39952: CALL_OW 251
39956: ST_TO_ADDR
// if not x or not y then
39957: LD_VAR 0 10
39961: NOT
39962: PUSH
39963: LD_VAR 0 11
39967: NOT
39968: OR
39969: IFFALSE 39973
// exit ;
39971: GO 41006
// weapon := 0 ;
39973: LD_ADDR_VAR 0 18
39977: PUSH
39978: LD_INT 0
39980: ST_TO_ADDR
// fac_list := [ ] ;
39981: LD_ADDR_VAR 0 17
39985: PUSH
39986: EMPTY
39987: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39988: LD_ADDR_VAR 0 6
39992: PUSH
39993: LD_VAR 0 1
39997: PPUSH
39998: CALL_OW 274
40002: PPUSH
40003: LD_VAR 0 2
40007: PPUSH
40008: LD_INT 0
40010: PPUSH
40011: CALL 37577 0 3
40015: PPUSH
40016: LD_INT 30
40018: PUSH
40019: LD_INT 3
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PPUSH
40026: CALL_OW 72
40030: ST_TO_ADDR
// if not factories then
40031: LD_VAR 0 6
40035: NOT
40036: IFFALSE 40040
// exit ;
40038: GO 41006
// for i in factories do
40040: LD_ADDR_VAR 0 8
40044: PUSH
40045: LD_VAR 0 6
40049: PUSH
40050: FOR_IN
40051: IFFALSE 40076
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40053: LD_ADDR_VAR 0 17
40057: PUSH
40058: LD_VAR 0 17
40062: PUSH
40063: LD_VAR 0 8
40067: PPUSH
40068: CALL_OW 478
40072: UNION
40073: ST_TO_ADDR
40074: GO 40050
40076: POP
40077: POP
// if not fac_list then
40078: LD_VAR 0 17
40082: NOT
40083: IFFALSE 40087
// exit ;
40085: GO 41006
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40087: LD_ADDR_VAR 0 5
40091: PUSH
40092: LD_INT 4
40094: PUSH
40095: LD_INT 5
40097: PUSH
40098: LD_INT 9
40100: PUSH
40101: LD_INT 10
40103: PUSH
40104: LD_INT 6
40106: PUSH
40107: LD_INT 7
40109: PUSH
40110: LD_INT 11
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 27
40124: PUSH
40125: LD_INT 28
40127: PUSH
40128: LD_INT 26
40130: PUSH
40131: LD_INT 30
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 43
40142: PUSH
40143: LD_INT 44
40145: PUSH
40146: LD_INT 46
40148: PUSH
40149: LD_INT 45
40151: PUSH
40152: LD_INT 47
40154: PUSH
40155: LD_INT 49
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: LIST
40170: PUSH
40171: LD_VAR 0 12
40175: ARRAY
40176: ST_TO_ADDR
// list := list isect fac_list ;
40177: LD_ADDR_VAR 0 5
40181: PUSH
40182: LD_VAR 0 5
40186: PUSH
40187: LD_VAR 0 17
40191: ISECT
40192: ST_TO_ADDR
// if not list then
40193: LD_VAR 0 5
40197: NOT
40198: IFFALSE 40202
// exit ;
40200: GO 41006
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40202: LD_VAR 0 12
40206: PUSH
40207: LD_INT 3
40209: EQUAL
40210: PUSH
40211: LD_INT 49
40213: PUSH
40214: LD_VAR 0 5
40218: IN
40219: AND
40220: PUSH
40221: LD_INT 31
40223: PPUSH
40224: LD_VAR 0 16
40228: PPUSH
40229: CALL_OW 321
40233: PUSH
40234: LD_INT 2
40236: EQUAL
40237: AND
40238: IFFALSE 40298
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40240: LD_INT 22
40242: PUSH
40243: LD_VAR 0 16
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 35
40254: PUSH
40255: LD_INT 49
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 91
40264: PUSH
40265: LD_VAR 0 1
40269: PUSH
40270: LD_INT 10
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: LIST
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: LIST
40282: PPUSH
40283: CALL_OW 69
40287: NOT
40288: IFFALSE 40298
// weapon := ru_time_lapser ;
40290: LD_ADDR_VAR 0 18
40294: PUSH
40295: LD_INT 49
40297: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40298: LD_VAR 0 12
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: LD_INT 2
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: IN
40313: PUSH
40314: LD_INT 11
40316: PUSH
40317: LD_VAR 0 5
40321: IN
40322: PUSH
40323: LD_INT 30
40325: PUSH
40326: LD_VAR 0 5
40330: IN
40331: OR
40332: AND
40333: PUSH
40334: LD_INT 6
40336: PPUSH
40337: LD_VAR 0 16
40341: PPUSH
40342: CALL_OW 321
40346: PUSH
40347: LD_INT 2
40349: EQUAL
40350: AND
40351: IFFALSE 40516
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40353: LD_INT 22
40355: PUSH
40356: LD_VAR 0 16
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 2
40367: PUSH
40368: LD_INT 35
40370: PUSH
40371: LD_INT 11
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 35
40380: PUSH
40381: LD_INT 30
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 91
40395: PUSH
40396: LD_VAR 0 1
40400: PUSH
40401: LD_INT 18
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: LIST
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: LIST
40413: PPUSH
40414: CALL_OW 69
40418: NOT
40419: PUSH
40420: LD_INT 22
40422: PUSH
40423: LD_VAR 0 16
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 2
40434: PUSH
40435: LD_INT 30
40437: PUSH
40438: LD_INT 32
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 30
40447: PUSH
40448: LD_INT 33
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 91
40462: PUSH
40463: LD_VAR 0 1
40467: PUSH
40468: LD_INT 12
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: LIST
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: LIST
40480: PUSH
40481: EMPTY
40482: LIST
40483: PPUSH
40484: CALL_OW 69
40488: PUSH
40489: LD_INT 2
40491: GREATER
40492: AND
40493: IFFALSE 40516
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40495: LD_ADDR_VAR 0 18
40499: PUSH
40500: LD_INT 11
40502: PUSH
40503: LD_INT 30
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_VAR 0 12
40514: ARRAY
40515: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40516: LD_VAR 0 18
40520: NOT
40521: PUSH
40522: LD_INT 40
40524: PPUSH
40525: LD_VAR 0 16
40529: PPUSH
40530: CALL_OW 321
40534: PUSH
40535: LD_INT 2
40537: EQUAL
40538: AND
40539: PUSH
40540: LD_INT 7
40542: PUSH
40543: LD_VAR 0 5
40547: IN
40548: PUSH
40549: LD_INT 28
40551: PUSH
40552: LD_VAR 0 5
40556: IN
40557: OR
40558: PUSH
40559: LD_INT 45
40561: PUSH
40562: LD_VAR 0 5
40566: IN
40567: OR
40568: AND
40569: IFFALSE 40823
// begin hex := GetHexInfo ( x , y ) ;
40571: LD_ADDR_VAR 0 4
40575: PUSH
40576: LD_VAR 0 10
40580: PPUSH
40581: LD_VAR 0 11
40585: PPUSH
40586: CALL_OW 546
40590: ST_TO_ADDR
// if hex [ 1 ] then
40591: LD_VAR 0 4
40595: PUSH
40596: LD_INT 1
40598: ARRAY
40599: IFFALSE 40603
// exit ;
40601: GO 41006
// height := hex [ 2 ] ;
40603: LD_ADDR_VAR 0 15
40607: PUSH
40608: LD_VAR 0 4
40612: PUSH
40613: LD_INT 2
40615: ARRAY
40616: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40617: LD_ADDR_VAR 0 14
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: LD_INT 2
40627: PUSH
40628: LD_INT 3
40630: PUSH
40631: LD_INT 5
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: ST_TO_ADDR
// for i in tmp do
40640: LD_ADDR_VAR 0 8
40644: PUSH
40645: LD_VAR 0 14
40649: PUSH
40650: FOR_IN
40651: IFFALSE 40821
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40653: LD_ADDR_VAR 0 9
40657: PUSH
40658: LD_VAR 0 10
40662: PPUSH
40663: LD_VAR 0 8
40667: PPUSH
40668: LD_INT 5
40670: PPUSH
40671: CALL_OW 272
40675: PUSH
40676: LD_VAR 0 11
40680: PPUSH
40681: LD_VAR 0 8
40685: PPUSH
40686: LD_INT 5
40688: PPUSH
40689: CALL_OW 273
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40698: LD_VAR 0 9
40702: PUSH
40703: LD_INT 1
40705: ARRAY
40706: PPUSH
40707: LD_VAR 0 9
40711: PUSH
40712: LD_INT 2
40714: ARRAY
40715: PPUSH
40716: CALL_OW 488
40720: IFFALSE 40819
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40722: LD_ADDR_VAR 0 4
40726: PUSH
40727: LD_VAR 0 9
40731: PUSH
40732: LD_INT 1
40734: ARRAY
40735: PPUSH
40736: LD_VAR 0 9
40740: PUSH
40741: LD_INT 2
40743: ARRAY
40744: PPUSH
40745: CALL_OW 546
40749: ST_TO_ADDR
// if hex [ 1 ] then
40750: LD_VAR 0 4
40754: PUSH
40755: LD_INT 1
40757: ARRAY
40758: IFFALSE 40762
// continue ;
40760: GO 40650
// h := hex [ 2 ] ;
40762: LD_ADDR_VAR 0 13
40766: PUSH
40767: LD_VAR 0 4
40771: PUSH
40772: LD_INT 2
40774: ARRAY
40775: ST_TO_ADDR
// if h + 7 < height then
40776: LD_VAR 0 13
40780: PUSH
40781: LD_INT 7
40783: PLUS
40784: PUSH
40785: LD_VAR 0 15
40789: LESS
40790: IFFALSE 40819
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40792: LD_ADDR_VAR 0 18
40796: PUSH
40797: LD_INT 7
40799: PUSH
40800: LD_INT 28
40802: PUSH
40803: LD_INT 45
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: LIST
40810: PUSH
40811: LD_VAR 0 12
40815: ARRAY
40816: ST_TO_ADDR
// break ;
40817: GO 40821
// end ; end ; end ;
40819: GO 40650
40821: POP
40822: POP
// end ; if not weapon then
40823: LD_VAR 0 18
40827: NOT
40828: IFFALSE 40888
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40830: LD_ADDR_VAR 0 5
40834: PUSH
40835: LD_VAR 0 5
40839: PUSH
40840: LD_INT 11
40842: PUSH
40843: LD_INT 30
40845: PUSH
40846: LD_INT 49
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: LIST
40853: DIFF
40854: ST_TO_ADDR
// if not list then
40855: LD_VAR 0 5
40859: NOT
40860: IFFALSE 40864
// exit ;
40862: GO 41006
// weapon := list [ rand ( 1 , list ) ] ;
40864: LD_ADDR_VAR 0 18
40868: PUSH
40869: LD_VAR 0 5
40873: PUSH
40874: LD_INT 1
40876: PPUSH
40877: LD_VAR 0 5
40881: PPUSH
40882: CALL_OW 12
40886: ARRAY
40887: ST_TO_ADDR
// end ; if weapon then
40888: LD_VAR 0 18
40892: IFFALSE 41006
// begin tmp := CostOfWeapon ( weapon ) ;
40894: LD_ADDR_VAR 0 14
40898: PUSH
40899: LD_VAR 0 18
40903: PPUSH
40904: CALL_OW 451
40908: ST_TO_ADDR
// j := GetBase ( tower ) ;
40909: LD_ADDR_VAR 0 9
40913: PUSH
40914: LD_VAR 0 1
40918: PPUSH
40919: CALL_OW 274
40923: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40924: LD_VAR 0 9
40928: PPUSH
40929: LD_INT 1
40931: PPUSH
40932: CALL_OW 275
40936: PUSH
40937: LD_VAR 0 14
40941: PUSH
40942: LD_INT 1
40944: ARRAY
40945: GREATEREQUAL
40946: PUSH
40947: LD_VAR 0 9
40951: PPUSH
40952: LD_INT 2
40954: PPUSH
40955: CALL_OW 275
40959: PUSH
40960: LD_VAR 0 14
40964: PUSH
40965: LD_INT 2
40967: ARRAY
40968: GREATEREQUAL
40969: AND
40970: PUSH
40971: LD_VAR 0 9
40975: PPUSH
40976: LD_INT 3
40978: PPUSH
40979: CALL_OW 275
40983: PUSH
40984: LD_VAR 0 14
40988: PUSH
40989: LD_INT 3
40991: ARRAY
40992: GREATEREQUAL
40993: AND
40994: IFFALSE 41006
// result := weapon ;
40996: LD_ADDR_VAR 0 3
41000: PUSH
41001: LD_VAR 0 18
41005: ST_TO_ADDR
// end ; end ;
41006: LD_VAR 0 3
41010: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41011: LD_INT 0
41013: PPUSH
41014: PPUSH
// result := true ;
41015: LD_ADDR_VAR 0 3
41019: PUSH
41020: LD_INT 1
41022: ST_TO_ADDR
// if array1 = array2 then
41023: LD_VAR 0 1
41027: PUSH
41028: LD_VAR 0 2
41032: EQUAL
41033: IFFALSE 41093
// begin for i = 1 to array1 do
41035: LD_ADDR_VAR 0 4
41039: PUSH
41040: DOUBLE
41041: LD_INT 1
41043: DEC
41044: ST_TO_ADDR
41045: LD_VAR 0 1
41049: PUSH
41050: FOR_TO
41051: IFFALSE 41089
// if array1 [ i ] <> array2 [ i ] then
41053: LD_VAR 0 1
41057: PUSH
41058: LD_VAR 0 4
41062: ARRAY
41063: PUSH
41064: LD_VAR 0 2
41068: PUSH
41069: LD_VAR 0 4
41073: ARRAY
41074: NONEQUAL
41075: IFFALSE 41087
// begin result := false ;
41077: LD_ADDR_VAR 0 3
41081: PUSH
41082: LD_INT 0
41084: ST_TO_ADDR
// break ;
41085: GO 41089
// end ;
41087: GO 41050
41089: POP
41090: POP
// end else
41091: GO 41101
// result := false ;
41093: LD_ADDR_VAR 0 3
41097: PUSH
41098: LD_INT 0
41100: ST_TO_ADDR
// end ;
41101: LD_VAR 0 3
41105: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41106: LD_INT 0
41108: PPUSH
41109: PPUSH
// if not array1 or not array2 then
41110: LD_VAR 0 1
41114: NOT
41115: PUSH
41116: LD_VAR 0 2
41120: NOT
41121: OR
41122: IFFALSE 41126
// exit ;
41124: GO 41190
// result := true ;
41126: LD_ADDR_VAR 0 3
41130: PUSH
41131: LD_INT 1
41133: ST_TO_ADDR
// for i = 1 to array1 do
41134: LD_ADDR_VAR 0 4
41138: PUSH
41139: DOUBLE
41140: LD_INT 1
41142: DEC
41143: ST_TO_ADDR
41144: LD_VAR 0 1
41148: PUSH
41149: FOR_TO
41150: IFFALSE 41188
// if array1 [ i ] <> array2 [ i ] then
41152: LD_VAR 0 1
41156: PUSH
41157: LD_VAR 0 4
41161: ARRAY
41162: PUSH
41163: LD_VAR 0 2
41167: PUSH
41168: LD_VAR 0 4
41172: ARRAY
41173: NONEQUAL
41174: IFFALSE 41186
// begin result := false ;
41176: LD_ADDR_VAR 0 3
41180: PUSH
41181: LD_INT 0
41183: ST_TO_ADDR
// break ;
41184: GO 41188
// end ;
41186: GO 41149
41188: POP
41189: POP
// end ;
41190: LD_VAR 0 3
41194: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41195: LD_INT 0
41197: PPUSH
41198: PPUSH
41199: PPUSH
// pom := GetBase ( fac ) ;
41200: LD_ADDR_VAR 0 5
41204: PUSH
41205: LD_VAR 0 1
41209: PPUSH
41210: CALL_OW 274
41214: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41215: LD_ADDR_VAR 0 4
41219: PUSH
41220: LD_VAR 0 2
41224: PUSH
41225: LD_INT 1
41227: ARRAY
41228: PPUSH
41229: LD_VAR 0 2
41233: PUSH
41234: LD_INT 2
41236: ARRAY
41237: PPUSH
41238: LD_VAR 0 2
41242: PUSH
41243: LD_INT 3
41245: ARRAY
41246: PPUSH
41247: LD_VAR 0 2
41251: PUSH
41252: LD_INT 4
41254: ARRAY
41255: PPUSH
41256: CALL_OW 449
41260: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41261: LD_ADDR_VAR 0 3
41265: PUSH
41266: LD_VAR 0 5
41270: PPUSH
41271: LD_INT 1
41273: PPUSH
41274: CALL_OW 275
41278: PUSH
41279: LD_VAR 0 4
41283: PUSH
41284: LD_INT 1
41286: ARRAY
41287: GREATEREQUAL
41288: PUSH
41289: LD_VAR 0 5
41293: PPUSH
41294: LD_INT 2
41296: PPUSH
41297: CALL_OW 275
41301: PUSH
41302: LD_VAR 0 4
41306: PUSH
41307: LD_INT 2
41309: ARRAY
41310: GREATEREQUAL
41311: AND
41312: PUSH
41313: LD_VAR 0 5
41317: PPUSH
41318: LD_INT 3
41320: PPUSH
41321: CALL_OW 275
41325: PUSH
41326: LD_VAR 0 4
41330: PUSH
41331: LD_INT 3
41333: ARRAY
41334: GREATEREQUAL
41335: AND
41336: ST_TO_ADDR
// end ;
41337: LD_VAR 0 3
41341: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41342: LD_INT 0
41344: PPUSH
41345: PPUSH
41346: PPUSH
41347: PPUSH
// pom := GetBase ( building ) ;
41348: LD_ADDR_VAR 0 3
41352: PUSH
41353: LD_VAR 0 1
41357: PPUSH
41358: CALL_OW 274
41362: ST_TO_ADDR
// if not pom then
41363: LD_VAR 0 3
41367: NOT
41368: IFFALSE 41372
// exit ;
41370: GO 41542
// btype := GetBType ( building ) ;
41372: LD_ADDR_VAR 0 5
41376: PUSH
41377: LD_VAR 0 1
41381: PPUSH
41382: CALL_OW 266
41386: ST_TO_ADDR
// if btype = b_armoury then
41387: LD_VAR 0 5
41391: PUSH
41392: LD_INT 4
41394: EQUAL
41395: IFFALSE 41405
// btype := b_barracks ;
41397: LD_ADDR_VAR 0 5
41401: PUSH
41402: LD_INT 5
41404: ST_TO_ADDR
// if btype = b_depot then
41405: LD_VAR 0 5
41409: PUSH
41410: LD_INT 0
41412: EQUAL
41413: IFFALSE 41423
// btype := b_warehouse ;
41415: LD_ADDR_VAR 0 5
41419: PUSH
41420: LD_INT 1
41422: ST_TO_ADDR
// if btype = b_workshop then
41423: LD_VAR 0 5
41427: PUSH
41428: LD_INT 2
41430: EQUAL
41431: IFFALSE 41441
// btype := b_factory ;
41433: LD_ADDR_VAR 0 5
41437: PUSH
41438: LD_INT 3
41440: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41441: LD_ADDR_VAR 0 4
41445: PUSH
41446: LD_VAR 0 5
41450: PPUSH
41451: LD_VAR 0 1
41455: PPUSH
41456: CALL_OW 248
41460: PPUSH
41461: CALL_OW 450
41465: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41466: LD_ADDR_VAR 0 2
41470: PUSH
41471: LD_VAR 0 3
41475: PPUSH
41476: LD_INT 1
41478: PPUSH
41479: CALL_OW 275
41483: PUSH
41484: LD_VAR 0 4
41488: PUSH
41489: LD_INT 1
41491: ARRAY
41492: GREATEREQUAL
41493: PUSH
41494: LD_VAR 0 3
41498: PPUSH
41499: LD_INT 2
41501: PPUSH
41502: CALL_OW 275
41506: PUSH
41507: LD_VAR 0 4
41511: PUSH
41512: LD_INT 2
41514: ARRAY
41515: GREATEREQUAL
41516: AND
41517: PUSH
41518: LD_VAR 0 3
41522: PPUSH
41523: LD_INT 3
41525: PPUSH
41526: CALL_OW 275
41530: PUSH
41531: LD_VAR 0 4
41535: PUSH
41536: LD_INT 3
41538: ARRAY
41539: GREATEREQUAL
41540: AND
41541: ST_TO_ADDR
// end ;
41542: LD_VAR 0 2
41546: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41547: LD_INT 0
41549: PPUSH
41550: PPUSH
41551: PPUSH
// pom := GetBase ( building ) ;
41552: LD_ADDR_VAR 0 4
41556: PUSH
41557: LD_VAR 0 1
41561: PPUSH
41562: CALL_OW 274
41566: ST_TO_ADDR
// if not pom then
41567: LD_VAR 0 4
41571: NOT
41572: IFFALSE 41576
// exit ;
41574: GO 41677
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41576: LD_ADDR_VAR 0 5
41580: PUSH
41581: LD_VAR 0 2
41585: PPUSH
41586: LD_VAR 0 1
41590: PPUSH
41591: CALL_OW 248
41595: PPUSH
41596: CALL_OW 450
41600: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41601: LD_ADDR_VAR 0 3
41605: PUSH
41606: LD_VAR 0 4
41610: PPUSH
41611: LD_INT 1
41613: PPUSH
41614: CALL_OW 275
41618: PUSH
41619: LD_VAR 0 5
41623: PUSH
41624: LD_INT 1
41626: ARRAY
41627: GREATEREQUAL
41628: PUSH
41629: LD_VAR 0 4
41633: PPUSH
41634: LD_INT 2
41636: PPUSH
41637: CALL_OW 275
41641: PUSH
41642: LD_VAR 0 5
41646: PUSH
41647: LD_INT 2
41649: ARRAY
41650: GREATEREQUAL
41651: AND
41652: PUSH
41653: LD_VAR 0 4
41657: PPUSH
41658: LD_INT 3
41660: PPUSH
41661: CALL_OW 275
41665: PUSH
41666: LD_VAR 0 5
41670: PUSH
41671: LD_INT 3
41673: ARRAY
41674: GREATEREQUAL
41675: AND
41676: ST_TO_ADDR
// end ;
41677: LD_VAR 0 3
41681: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41682: LD_INT 0
41684: PPUSH
41685: PPUSH
41686: PPUSH
41687: PPUSH
41688: PPUSH
41689: PPUSH
41690: PPUSH
41691: PPUSH
41692: PPUSH
41693: PPUSH
41694: PPUSH
// result := false ;
41695: LD_ADDR_VAR 0 8
41699: PUSH
41700: LD_INT 0
41702: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41703: LD_VAR 0 5
41707: NOT
41708: PUSH
41709: LD_VAR 0 1
41713: NOT
41714: OR
41715: PUSH
41716: LD_VAR 0 2
41720: NOT
41721: OR
41722: PUSH
41723: LD_VAR 0 3
41727: NOT
41728: OR
41729: IFFALSE 41733
// exit ;
41731: GO 42547
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41733: LD_ADDR_VAR 0 14
41737: PUSH
41738: LD_VAR 0 1
41742: PPUSH
41743: LD_VAR 0 2
41747: PPUSH
41748: LD_VAR 0 3
41752: PPUSH
41753: LD_VAR 0 4
41757: PPUSH
41758: LD_VAR 0 5
41762: PUSH
41763: LD_INT 1
41765: ARRAY
41766: PPUSH
41767: CALL_OW 248
41771: PPUSH
41772: LD_INT 0
41774: PPUSH
41775: CALL 43800 0 6
41779: ST_TO_ADDR
// if not hexes then
41780: LD_VAR 0 14
41784: NOT
41785: IFFALSE 41789
// exit ;
41787: GO 42547
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41789: LD_ADDR_VAR 0 17
41793: PUSH
41794: LD_VAR 0 5
41798: PPUSH
41799: LD_INT 22
41801: PUSH
41802: LD_VAR 0 13
41806: PPUSH
41807: CALL_OW 255
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 2
41818: PUSH
41819: LD_INT 30
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 30
41831: PUSH
41832: LD_INT 1
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: LIST
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PPUSH
41848: CALL_OW 72
41852: ST_TO_ADDR
// for i = 1 to hexes do
41853: LD_ADDR_VAR 0 9
41857: PUSH
41858: DOUBLE
41859: LD_INT 1
41861: DEC
41862: ST_TO_ADDR
41863: LD_VAR 0 14
41867: PUSH
41868: FOR_TO
41869: IFFALSE 42545
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41871: LD_ADDR_VAR 0 13
41875: PUSH
41876: LD_VAR 0 14
41880: PUSH
41881: LD_VAR 0 9
41885: ARRAY
41886: PUSH
41887: LD_INT 1
41889: ARRAY
41890: PPUSH
41891: LD_VAR 0 14
41895: PUSH
41896: LD_VAR 0 9
41900: ARRAY
41901: PUSH
41902: LD_INT 2
41904: ARRAY
41905: PPUSH
41906: CALL_OW 428
41910: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41911: LD_VAR 0 14
41915: PUSH
41916: LD_VAR 0 9
41920: ARRAY
41921: PUSH
41922: LD_INT 1
41924: ARRAY
41925: PPUSH
41926: LD_VAR 0 14
41930: PUSH
41931: LD_VAR 0 9
41935: ARRAY
41936: PUSH
41937: LD_INT 2
41939: ARRAY
41940: PPUSH
41941: CALL_OW 351
41945: PUSH
41946: LD_VAR 0 14
41950: PUSH
41951: LD_VAR 0 9
41955: ARRAY
41956: PUSH
41957: LD_INT 1
41959: ARRAY
41960: PPUSH
41961: LD_VAR 0 14
41965: PUSH
41966: LD_VAR 0 9
41970: ARRAY
41971: PUSH
41972: LD_INT 2
41974: ARRAY
41975: PPUSH
41976: CALL_OW 488
41980: NOT
41981: OR
41982: PUSH
41983: LD_VAR 0 13
41987: PPUSH
41988: CALL_OW 247
41992: PUSH
41993: LD_INT 3
41995: EQUAL
41996: OR
41997: IFFALSE 42003
// exit ;
41999: POP
42000: POP
42001: GO 42547
// if not tmp then
42003: LD_VAR 0 13
42007: NOT
42008: IFFALSE 42012
// continue ;
42010: GO 41868
// result := true ;
42012: LD_ADDR_VAR 0 8
42016: PUSH
42017: LD_INT 1
42019: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42020: LD_VAR 0 6
42024: PUSH
42025: LD_VAR 0 13
42029: PPUSH
42030: CALL_OW 247
42034: PUSH
42035: LD_INT 2
42037: EQUAL
42038: AND
42039: PUSH
42040: LD_VAR 0 13
42044: PPUSH
42045: CALL_OW 263
42049: PUSH
42050: LD_INT 1
42052: EQUAL
42053: AND
42054: IFFALSE 42218
// begin if IsDrivenBy ( tmp ) then
42056: LD_VAR 0 13
42060: PPUSH
42061: CALL_OW 311
42065: IFFALSE 42069
// continue ;
42067: GO 41868
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42069: LD_VAR 0 6
42073: PPUSH
42074: LD_INT 3
42076: PUSH
42077: LD_INT 60
42079: PUSH
42080: EMPTY
42081: LIST
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 3
42089: PUSH
42090: LD_INT 55
42092: PUSH
42093: EMPTY
42094: LIST
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PPUSH
42104: CALL_OW 72
42108: IFFALSE 42216
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42110: LD_ADDR_VAR 0 18
42114: PUSH
42115: LD_VAR 0 6
42119: PPUSH
42120: LD_INT 3
42122: PUSH
42123: LD_INT 60
42125: PUSH
42126: EMPTY
42127: LIST
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 3
42135: PUSH
42136: LD_INT 55
42138: PUSH
42139: EMPTY
42140: LIST
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PPUSH
42150: CALL_OW 72
42154: PUSH
42155: LD_INT 1
42157: ARRAY
42158: ST_TO_ADDR
// if IsInUnit ( driver ) then
42159: LD_VAR 0 18
42163: PPUSH
42164: CALL_OW 310
42168: IFFALSE 42179
// ComExit ( driver ) ;
42170: LD_VAR 0 18
42174: PPUSH
42175: CALL 67601 0 1
// AddComEnterUnit ( driver , tmp ) ;
42179: LD_VAR 0 18
42183: PPUSH
42184: LD_VAR 0 13
42188: PPUSH
42189: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42193: LD_VAR 0 18
42197: PPUSH
42198: LD_VAR 0 7
42202: PPUSH
42203: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42207: LD_VAR 0 18
42211: PPUSH
42212: CALL_OW 181
// end ; continue ;
42216: GO 41868
// end ; if not cleaners or not tmp in cleaners then
42218: LD_VAR 0 6
42222: NOT
42223: PUSH
42224: LD_VAR 0 13
42228: PUSH
42229: LD_VAR 0 6
42233: IN
42234: NOT
42235: OR
42236: IFFALSE 42543
// begin if dep then
42238: LD_VAR 0 17
42242: IFFALSE 42378
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42244: LD_ADDR_VAR 0 16
42248: PUSH
42249: LD_VAR 0 17
42253: PUSH
42254: LD_INT 1
42256: ARRAY
42257: PPUSH
42258: CALL_OW 250
42262: PPUSH
42263: LD_VAR 0 17
42267: PUSH
42268: LD_INT 1
42270: ARRAY
42271: PPUSH
42272: CALL_OW 254
42276: PPUSH
42277: LD_INT 5
42279: PPUSH
42280: CALL_OW 272
42284: PUSH
42285: LD_VAR 0 17
42289: PUSH
42290: LD_INT 1
42292: ARRAY
42293: PPUSH
42294: CALL_OW 251
42298: PPUSH
42299: LD_VAR 0 17
42303: PUSH
42304: LD_INT 1
42306: ARRAY
42307: PPUSH
42308: CALL_OW 254
42312: PPUSH
42313: LD_INT 5
42315: PPUSH
42316: CALL_OW 273
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42325: LD_VAR 0 16
42329: PUSH
42330: LD_INT 1
42332: ARRAY
42333: PPUSH
42334: LD_VAR 0 16
42338: PUSH
42339: LD_INT 2
42341: ARRAY
42342: PPUSH
42343: CALL_OW 488
42347: IFFALSE 42378
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42349: LD_VAR 0 13
42353: PPUSH
42354: LD_VAR 0 16
42358: PUSH
42359: LD_INT 1
42361: ARRAY
42362: PPUSH
42363: LD_VAR 0 16
42367: PUSH
42368: LD_INT 2
42370: ARRAY
42371: PPUSH
42372: CALL_OW 111
// continue ;
42376: GO 41868
// end ; end ; r := GetDir ( tmp ) ;
42378: LD_ADDR_VAR 0 15
42382: PUSH
42383: LD_VAR 0 13
42387: PPUSH
42388: CALL_OW 254
42392: ST_TO_ADDR
// if r = 5 then
42393: LD_VAR 0 15
42397: PUSH
42398: LD_INT 5
42400: EQUAL
42401: IFFALSE 42411
// r := 0 ;
42403: LD_ADDR_VAR 0 15
42407: PUSH
42408: LD_INT 0
42410: ST_TO_ADDR
// for j = r to 5 do
42411: LD_ADDR_VAR 0 10
42415: PUSH
42416: DOUBLE
42417: LD_VAR 0 15
42421: DEC
42422: ST_TO_ADDR
42423: LD_INT 5
42425: PUSH
42426: FOR_TO
42427: IFFALSE 42541
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42429: LD_ADDR_VAR 0 11
42433: PUSH
42434: LD_VAR 0 13
42438: PPUSH
42439: CALL_OW 250
42443: PPUSH
42444: LD_VAR 0 10
42448: PPUSH
42449: LD_INT 2
42451: PPUSH
42452: CALL_OW 272
42456: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42457: LD_ADDR_VAR 0 12
42461: PUSH
42462: LD_VAR 0 13
42466: PPUSH
42467: CALL_OW 251
42471: PPUSH
42472: LD_VAR 0 10
42476: PPUSH
42477: LD_INT 2
42479: PPUSH
42480: CALL_OW 273
42484: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42485: LD_VAR 0 11
42489: PPUSH
42490: LD_VAR 0 12
42494: PPUSH
42495: CALL_OW 488
42499: PUSH
42500: LD_VAR 0 11
42504: PPUSH
42505: LD_VAR 0 12
42509: PPUSH
42510: CALL_OW 428
42514: NOT
42515: AND
42516: IFFALSE 42539
// begin ComMoveXY ( tmp , _x , _y ) ;
42518: LD_VAR 0 13
42522: PPUSH
42523: LD_VAR 0 11
42527: PPUSH
42528: LD_VAR 0 12
42532: PPUSH
42533: CALL_OW 111
// break ;
42537: GO 42541
// end ; end ;
42539: GO 42426
42541: POP
42542: POP
// end ; end ;
42543: GO 41868
42545: POP
42546: POP
// end ;
42547: LD_VAR 0 8
42551: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42552: LD_INT 0
42554: PPUSH
// result := true ;
42555: LD_ADDR_VAR 0 3
42559: PUSH
42560: LD_INT 1
42562: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42563: LD_VAR 0 2
42567: PUSH
42568: LD_INT 24
42570: DOUBLE
42571: EQUAL
42572: IFTRUE 42582
42574: LD_INT 33
42576: DOUBLE
42577: EQUAL
42578: IFTRUE 42582
42580: GO 42607
42582: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42583: LD_ADDR_VAR 0 3
42587: PUSH
42588: LD_INT 32
42590: PPUSH
42591: LD_VAR 0 1
42595: PPUSH
42596: CALL_OW 321
42600: PUSH
42601: LD_INT 2
42603: EQUAL
42604: ST_TO_ADDR
42605: GO 42923
42607: LD_INT 20
42609: DOUBLE
42610: EQUAL
42611: IFTRUE 42615
42613: GO 42640
42615: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42616: LD_ADDR_VAR 0 3
42620: PUSH
42621: LD_INT 6
42623: PPUSH
42624: LD_VAR 0 1
42628: PPUSH
42629: CALL_OW 321
42633: PUSH
42634: LD_INT 2
42636: EQUAL
42637: ST_TO_ADDR
42638: GO 42923
42640: LD_INT 22
42642: DOUBLE
42643: EQUAL
42644: IFTRUE 42654
42646: LD_INT 36
42648: DOUBLE
42649: EQUAL
42650: IFTRUE 42654
42652: GO 42679
42654: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42655: LD_ADDR_VAR 0 3
42659: PUSH
42660: LD_INT 15
42662: PPUSH
42663: LD_VAR 0 1
42667: PPUSH
42668: CALL_OW 321
42672: PUSH
42673: LD_INT 2
42675: EQUAL
42676: ST_TO_ADDR
42677: GO 42923
42679: LD_INT 30
42681: DOUBLE
42682: EQUAL
42683: IFTRUE 42687
42685: GO 42712
42687: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42688: LD_ADDR_VAR 0 3
42692: PUSH
42693: LD_INT 20
42695: PPUSH
42696: LD_VAR 0 1
42700: PPUSH
42701: CALL_OW 321
42705: PUSH
42706: LD_INT 2
42708: EQUAL
42709: ST_TO_ADDR
42710: GO 42923
42712: LD_INT 28
42714: DOUBLE
42715: EQUAL
42716: IFTRUE 42726
42718: LD_INT 21
42720: DOUBLE
42721: EQUAL
42722: IFTRUE 42726
42724: GO 42751
42726: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42727: LD_ADDR_VAR 0 3
42731: PUSH
42732: LD_INT 21
42734: PPUSH
42735: LD_VAR 0 1
42739: PPUSH
42740: CALL_OW 321
42744: PUSH
42745: LD_INT 2
42747: EQUAL
42748: ST_TO_ADDR
42749: GO 42923
42751: LD_INT 16
42753: DOUBLE
42754: EQUAL
42755: IFTRUE 42759
42757: GO 42784
42759: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42760: LD_ADDR_VAR 0 3
42764: PUSH
42765: LD_INT 84
42767: PPUSH
42768: LD_VAR 0 1
42772: PPUSH
42773: CALL_OW 321
42777: PUSH
42778: LD_INT 2
42780: EQUAL
42781: ST_TO_ADDR
42782: GO 42923
42784: LD_INT 19
42786: DOUBLE
42787: EQUAL
42788: IFTRUE 42798
42790: LD_INT 23
42792: DOUBLE
42793: EQUAL
42794: IFTRUE 42798
42796: GO 42823
42798: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42799: LD_ADDR_VAR 0 3
42803: PUSH
42804: LD_INT 83
42806: PPUSH
42807: LD_VAR 0 1
42811: PPUSH
42812: CALL_OW 321
42816: PUSH
42817: LD_INT 2
42819: EQUAL
42820: ST_TO_ADDR
42821: GO 42923
42823: LD_INT 17
42825: DOUBLE
42826: EQUAL
42827: IFTRUE 42831
42829: GO 42856
42831: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42832: LD_ADDR_VAR 0 3
42836: PUSH
42837: LD_INT 39
42839: PPUSH
42840: LD_VAR 0 1
42844: PPUSH
42845: CALL_OW 321
42849: PUSH
42850: LD_INT 2
42852: EQUAL
42853: ST_TO_ADDR
42854: GO 42923
42856: LD_INT 18
42858: DOUBLE
42859: EQUAL
42860: IFTRUE 42864
42862: GO 42889
42864: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42865: LD_ADDR_VAR 0 3
42869: PUSH
42870: LD_INT 40
42872: PPUSH
42873: LD_VAR 0 1
42877: PPUSH
42878: CALL_OW 321
42882: PUSH
42883: LD_INT 2
42885: EQUAL
42886: ST_TO_ADDR
42887: GO 42923
42889: LD_INT 27
42891: DOUBLE
42892: EQUAL
42893: IFTRUE 42897
42895: GO 42922
42897: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42898: LD_ADDR_VAR 0 3
42902: PUSH
42903: LD_INT 35
42905: PPUSH
42906: LD_VAR 0 1
42910: PPUSH
42911: CALL_OW 321
42915: PUSH
42916: LD_INT 2
42918: EQUAL
42919: ST_TO_ADDR
42920: GO 42923
42922: POP
// end ;
42923: LD_VAR 0 3
42927: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42928: LD_INT 0
42930: PPUSH
42931: PPUSH
42932: PPUSH
42933: PPUSH
42934: PPUSH
42935: PPUSH
42936: PPUSH
42937: PPUSH
42938: PPUSH
42939: PPUSH
42940: PPUSH
// result := false ;
42941: LD_ADDR_VAR 0 6
42945: PUSH
42946: LD_INT 0
42948: ST_TO_ADDR
// if btype = b_depot then
42949: LD_VAR 0 2
42953: PUSH
42954: LD_INT 0
42956: EQUAL
42957: IFFALSE 42969
// begin result := true ;
42959: LD_ADDR_VAR 0 6
42963: PUSH
42964: LD_INT 1
42966: ST_TO_ADDR
// exit ;
42967: GO 43795
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42969: LD_VAR 0 1
42973: NOT
42974: PUSH
42975: LD_VAR 0 1
42979: PPUSH
42980: CALL_OW 266
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: IN
42995: NOT
42996: OR
42997: PUSH
42998: LD_VAR 0 2
43002: NOT
43003: OR
43004: PUSH
43005: LD_VAR 0 5
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: LD_INT 3
43021: PUSH
43022: LD_INT 4
43024: PUSH
43025: LD_INT 5
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: IN
43036: NOT
43037: OR
43038: PUSH
43039: LD_VAR 0 3
43043: PPUSH
43044: LD_VAR 0 4
43048: PPUSH
43049: CALL_OW 488
43053: NOT
43054: OR
43055: IFFALSE 43059
// exit ;
43057: GO 43795
// side := GetSide ( depot ) ;
43059: LD_ADDR_VAR 0 9
43063: PUSH
43064: LD_VAR 0 1
43068: PPUSH
43069: CALL_OW 255
43073: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43074: LD_VAR 0 9
43078: PPUSH
43079: LD_VAR 0 2
43083: PPUSH
43084: CALL 42552 0 2
43088: NOT
43089: IFFALSE 43093
// exit ;
43091: GO 43795
// pom := GetBase ( depot ) ;
43093: LD_ADDR_VAR 0 10
43097: PUSH
43098: LD_VAR 0 1
43102: PPUSH
43103: CALL_OW 274
43107: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43108: LD_ADDR_VAR 0 11
43112: PUSH
43113: LD_VAR 0 2
43117: PPUSH
43118: LD_VAR 0 1
43122: PPUSH
43123: CALL_OW 248
43127: PPUSH
43128: CALL_OW 450
43132: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43133: LD_VAR 0 10
43137: PPUSH
43138: LD_INT 1
43140: PPUSH
43141: CALL_OW 275
43145: PUSH
43146: LD_VAR 0 11
43150: PUSH
43151: LD_INT 1
43153: ARRAY
43154: GREATEREQUAL
43155: PUSH
43156: LD_VAR 0 10
43160: PPUSH
43161: LD_INT 2
43163: PPUSH
43164: CALL_OW 275
43168: PUSH
43169: LD_VAR 0 11
43173: PUSH
43174: LD_INT 2
43176: ARRAY
43177: GREATEREQUAL
43178: AND
43179: PUSH
43180: LD_VAR 0 10
43184: PPUSH
43185: LD_INT 3
43187: PPUSH
43188: CALL_OW 275
43192: PUSH
43193: LD_VAR 0 11
43197: PUSH
43198: LD_INT 3
43200: ARRAY
43201: GREATEREQUAL
43202: AND
43203: NOT
43204: IFFALSE 43208
// exit ;
43206: GO 43795
// if GetBType ( depot ) = b_depot then
43208: LD_VAR 0 1
43212: PPUSH
43213: CALL_OW 266
43217: PUSH
43218: LD_INT 0
43220: EQUAL
43221: IFFALSE 43233
// dist := 28 else
43223: LD_ADDR_VAR 0 14
43227: PUSH
43228: LD_INT 28
43230: ST_TO_ADDR
43231: GO 43241
// dist := 36 ;
43233: LD_ADDR_VAR 0 14
43237: PUSH
43238: LD_INT 36
43240: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43241: LD_VAR 0 1
43245: PPUSH
43246: LD_VAR 0 3
43250: PPUSH
43251: LD_VAR 0 4
43255: PPUSH
43256: CALL_OW 297
43260: PUSH
43261: LD_VAR 0 14
43265: GREATER
43266: IFFALSE 43270
// exit ;
43268: GO 43795
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43270: LD_ADDR_VAR 0 12
43274: PUSH
43275: LD_VAR 0 2
43279: PPUSH
43280: LD_VAR 0 3
43284: PPUSH
43285: LD_VAR 0 4
43289: PPUSH
43290: LD_VAR 0 5
43294: PPUSH
43295: LD_VAR 0 1
43299: PPUSH
43300: CALL_OW 248
43304: PPUSH
43305: LD_INT 0
43307: PPUSH
43308: CALL 43800 0 6
43312: ST_TO_ADDR
// if not hexes then
43313: LD_VAR 0 12
43317: NOT
43318: IFFALSE 43322
// exit ;
43320: GO 43795
// hex := GetHexInfo ( x , y ) ;
43322: LD_ADDR_VAR 0 15
43326: PUSH
43327: LD_VAR 0 3
43331: PPUSH
43332: LD_VAR 0 4
43336: PPUSH
43337: CALL_OW 546
43341: ST_TO_ADDR
// if hex [ 1 ] then
43342: LD_VAR 0 15
43346: PUSH
43347: LD_INT 1
43349: ARRAY
43350: IFFALSE 43354
// exit ;
43352: GO 43795
// height := hex [ 2 ] ;
43354: LD_ADDR_VAR 0 13
43358: PUSH
43359: LD_VAR 0 15
43363: PUSH
43364: LD_INT 2
43366: ARRAY
43367: ST_TO_ADDR
// for i = 1 to hexes do
43368: LD_ADDR_VAR 0 7
43372: PUSH
43373: DOUBLE
43374: LD_INT 1
43376: DEC
43377: ST_TO_ADDR
43378: LD_VAR 0 12
43382: PUSH
43383: FOR_TO
43384: IFFALSE 43714
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43386: LD_VAR 0 12
43390: PUSH
43391: LD_VAR 0 7
43395: ARRAY
43396: PUSH
43397: LD_INT 1
43399: ARRAY
43400: PPUSH
43401: LD_VAR 0 12
43405: PUSH
43406: LD_VAR 0 7
43410: ARRAY
43411: PUSH
43412: LD_INT 2
43414: ARRAY
43415: PPUSH
43416: CALL_OW 488
43420: NOT
43421: PUSH
43422: LD_VAR 0 12
43426: PUSH
43427: LD_VAR 0 7
43431: ARRAY
43432: PUSH
43433: LD_INT 1
43435: ARRAY
43436: PPUSH
43437: LD_VAR 0 12
43441: PUSH
43442: LD_VAR 0 7
43446: ARRAY
43447: PUSH
43448: LD_INT 2
43450: ARRAY
43451: PPUSH
43452: CALL_OW 428
43456: PUSH
43457: LD_INT 0
43459: GREATER
43460: OR
43461: PUSH
43462: LD_VAR 0 12
43466: PUSH
43467: LD_VAR 0 7
43471: ARRAY
43472: PUSH
43473: LD_INT 1
43475: ARRAY
43476: PPUSH
43477: LD_VAR 0 12
43481: PUSH
43482: LD_VAR 0 7
43486: ARRAY
43487: PUSH
43488: LD_INT 2
43490: ARRAY
43491: PPUSH
43492: CALL_OW 351
43496: OR
43497: IFFALSE 43503
// exit ;
43499: POP
43500: POP
43501: GO 43795
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43503: LD_ADDR_VAR 0 8
43507: PUSH
43508: LD_VAR 0 12
43512: PUSH
43513: LD_VAR 0 7
43517: ARRAY
43518: PUSH
43519: LD_INT 1
43521: ARRAY
43522: PPUSH
43523: LD_VAR 0 12
43527: PUSH
43528: LD_VAR 0 7
43532: ARRAY
43533: PUSH
43534: LD_INT 2
43536: ARRAY
43537: PPUSH
43538: CALL_OW 546
43542: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43543: LD_VAR 0 8
43547: PUSH
43548: LD_INT 1
43550: ARRAY
43551: PUSH
43552: LD_VAR 0 8
43556: PUSH
43557: LD_INT 2
43559: ARRAY
43560: PUSH
43561: LD_VAR 0 13
43565: PUSH
43566: LD_INT 2
43568: PLUS
43569: GREATER
43570: OR
43571: PUSH
43572: LD_VAR 0 8
43576: PUSH
43577: LD_INT 2
43579: ARRAY
43580: PUSH
43581: LD_VAR 0 13
43585: PUSH
43586: LD_INT 2
43588: MINUS
43589: LESS
43590: OR
43591: PUSH
43592: LD_VAR 0 8
43596: PUSH
43597: LD_INT 3
43599: ARRAY
43600: PUSH
43601: LD_INT 0
43603: PUSH
43604: LD_INT 8
43606: PUSH
43607: LD_INT 9
43609: PUSH
43610: LD_INT 10
43612: PUSH
43613: LD_INT 11
43615: PUSH
43616: LD_INT 12
43618: PUSH
43619: LD_INT 13
43621: PUSH
43622: LD_INT 16
43624: PUSH
43625: LD_INT 17
43627: PUSH
43628: LD_INT 18
43630: PUSH
43631: LD_INT 19
43633: PUSH
43634: LD_INT 20
43636: PUSH
43637: LD_INT 21
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: IN
43655: NOT
43656: OR
43657: PUSH
43658: LD_VAR 0 8
43662: PUSH
43663: LD_INT 5
43665: ARRAY
43666: NOT
43667: OR
43668: PUSH
43669: LD_VAR 0 8
43673: PUSH
43674: LD_INT 6
43676: ARRAY
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: LD_INT 7
43686: PUSH
43687: LD_INT 9
43689: PUSH
43690: LD_INT 10
43692: PUSH
43693: LD_INT 11
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: IN
43704: NOT
43705: OR
43706: IFFALSE 43712
// exit ;
43708: POP
43709: POP
43710: GO 43795
// end ;
43712: GO 43383
43714: POP
43715: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43716: LD_VAR 0 9
43720: PPUSH
43721: LD_VAR 0 3
43725: PPUSH
43726: LD_VAR 0 4
43730: PPUSH
43731: LD_INT 20
43733: PPUSH
43734: CALL 35718 0 4
43738: PUSH
43739: LD_INT 4
43741: ARRAY
43742: IFFALSE 43746
// exit ;
43744: GO 43795
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43746: LD_VAR 0 2
43750: PUSH
43751: LD_INT 29
43753: PUSH
43754: LD_INT 30
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: IN
43761: PUSH
43762: LD_VAR 0 3
43766: PPUSH
43767: LD_VAR 0 4
43771: PPUSH
43772: LD_VAR 0 9
43776: PPUSH
43777: CALL_OW 440
43781: NOT
43782: AND
43783: IFFALSE 43787
// exit ;
43785: GO 43795
// result := true ;
43787: LD_ADDR_VAR 0 6
43791: PUSH
43792: LD_INT 1
43794: ST_TO_ADDR
// end ;
43795: LD_VAR 0 6
43799: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43800: LD_INT 0
43802: PPUSH
43803: PPUSH
43804: PPUSH
43805: PPUSH
43806: PPUSH
43807: PPUSH
43808: PPUSH
43809: PPUSH
43810: PPUSH
43811: PPUSH
43812: PPUSH
43813: PPUSH
43814: PPUSH
43815: PPUSH
43816: PPUSH
43817: PPUSH
43818: PPUSH
43819: PPUSH
43820: PPUSH
43821: PPUSH
43822: PPUSH
43823: PPUSH
43824: PPUSH
43825: PPUSH
43826: PPUSH
43827: PPUSH
43828: PPUSH
43829: PPUSH
43830: PPUSH
43831: PPUSH
43832: PPUSH
43833: PPUSH
43834: PPUSH
43835: PPUSH
43836: PPUSH
43837: PPUSH
43838: PPUSH
43839: PPUSH
43840: PPUSH
43841: PPUSH
43842: PPUSH
43843: PPUSH
43844: PPUSH
43845: PPUSH
43846: PPUSH
43847: PPUSH
43848: PPUSH
43849: PPUSH
43850: PPUSH
43851: PPUSH
43852: PPUSH
43853: PPUSH
43854: PPUSH
43855: PPUSH
43856: PPUSH
43857: PPUSH
43858: PPUSH
43859: PPUSH
// result = [ ] ;
43860: LD_ADDR_VAR 0 7
43864: PUSH
43865: EMPTY
43866: ST_TO_ADDR
// temp_list = [ ] ;
43867: LD_ADDR_VAR 0 9
43871: PUSH
43872: EMPTY
43873: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43874: LD_VAR 0 4
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: LD_INT 2
43887: PUSH
43888: LD_INT 3
43890: PUSH
43891: LD_INT 4
43893: PUSH
43894: LD_INT 5
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: IN
43905: NOT
43906: PUSH
43907: LD_VAR 0 1
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: IN
43922: PUSH
43923: LD_VAR 0 5
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: LD_INT 2
43933: PUSH
43934: LD_INT 3
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: LIST
43941: IN
43942: NOT
43943: AND
43944: OR
43945: IFFALSE 43949
// exit ;
43947: GO 62340
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43949: LD_VAR 0 1
43953: PUSH
43954: LD_INT 6
43956: PUSH
43957: LD_INT 7
43959: PUSH
43960: LD_INT 8
43962: PUSH
43963: LD_INT 13
43965: PUSH
43966: LD_INT 12
43968: PUSH
43969: LD_INT 15
43971: PUSH
43972: LD_INT 11
43974: PUSH
43975: LD_INT 14
43977: PUSH
43978: LD_INT 10
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: IN
43992: IFFALSE 44002
// btype = b_lab ;
43994: LD_ADDR_VAR 0 1
43998: PUSH
43999: LD_INT 6
44001: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44002: LD_VAR 0 6
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: LIST
44020: IN
44021: NOT
44022: PUSH
44023: LD_VAR 0 1
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: LD_INT 3
44039: PUSH
44040: LD_INT 6
44042: PUSH
44043: LD_INT 36
44045: PUSH
44046: LD_INT 4
44048: PUSH
44049: LD_INT 5
44051: PUSH
44052: LD_INT 31
44054: PUSH
44055: LD_INT 32
44057: PUSH
44058: LD_INT 33
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: IN
44074: NOT
44075: PUSH
44076: LD_VAR 0 6
44080: PUSH
44081: LD_INT 1
44083: EQUAL
44084: AND
44085: OR
44086: PUSH
44087: LD_VAR 0 1
44091: PUSH
44092: LD_INT 2
44094: PUSH
44095: LD_INT 3
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: IN
44102: NOT
44103: PUSH
44104: LD_VAR 0 6
44108: PUSH
44109: LD_INT 2
44111: EQUAL
44112: AND
44113: OR
44114: IFFALSE 44124
// mode = 0 ;
44116: LD_ADDR_VAR 0 6
44120: PUSH
44121: LD_INT 0
44123: ST_TO_ADDR
// case mode of 0 :
44124: LD_VAR 0 6
44128: PUSH
44129: LD_INT 0
44131: DOUBLE
44132: EQUAL
44133: IFTRUE 44137
44135: GO 55590
44137: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44138: LD_ADDR_VAR 0 11
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: LD_INT 1
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 1
44219: NEG
44220: PUSH
44221: LD_INT 2
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: LD_INT 2
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: LD_INT 1
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: LD_INT 3
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: LD_INT 3
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: LD_INT 2
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44331: LD_ADDR_VAR 0 12
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 2
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 2
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 2
44454: NEG
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 2
44465: NEG
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 2
44477: NEG
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 3
44488: NEG
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 3
44499: NEG
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44527: LD_ADDR_VAR 0 13
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: LD_INT 2
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 2
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 2
44650: NEG
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 2
44662: NEG
44663: PUSH
44664: LD_INT 2
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: LD_INT 3
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 3
44686: NEG
44687: PUSH
44688: LD_INT 2
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 3
44698: NEG
44699: PUSH
44700: LD_INT 3
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44726: LD_ADDR_VAR 0 14
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: LD_INT 1
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: LD_INT 2
44811: NEG
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: LD_INT 2
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: LD_INT 3
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: LD_INT 3
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44922: LD_ADDR_VAR 0 15
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 2
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 2
45045: NEG
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 2
45056: NEG
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 2
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 3
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 3
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45115: LD_ADDR_VAR 0 16
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: LD_INT 1
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: LD_INT 2
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: LD_INT 2
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 3
45262: PUSH
45263: LD_INT 2
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 3
45272: PUSH
45273: LD_INT 3
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: LD_INT 3
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45308: LD_ADDR_VAR 0 17
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: LD_INT 2
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 2
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 2
45443: PUSH
45444: LD_INT 2
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: LD_INT 2
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 1
45473: NEG
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 2
45484: NEG
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: NEG
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 2
45507: NEG
45508: PUSH
45509: LD_INT 2
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45538: LD_ADDR_VAR 0 18
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 2
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: LD_INT 2
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: LD_INT 2
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 2
45714: NEG
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45768: LD_ADDR_VAR 0 19
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 2
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 2
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: LD_INT 2
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 2
45944: NEG
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: LD_INT 2
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45998: LD_ADDR_VAR 0 20
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 2
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: LD_INT 2
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 2
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: LD_INT 2
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: LD_INT 2
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: NEG
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 2
46185: NEG
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 2
46197: NEG
46198: PUSH
46199: LD_INT 2
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46228: LD_ADDR_VAR 0 21
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: LD_INT 2
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 2
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 2
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 2
46404: NEG
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: LD_INT 2
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46458: LD_ADDR_VAR 0 22
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: LD_INT 2
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 2
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: LD_INT 2
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 2
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: NEG
46658: PUSH
46659: LD_INT 2
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46688: LD_ADDR_VAR 0 23
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: LD_INT 2
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: LD_INT 2
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: LD_INT 2
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 2
46864: NEG
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 2
46887: NEG
46888: PUSH
46889: LD_INT 2
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: LD_INT 3
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 3
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: LD_INT 2
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46968: LD_ADDR_VAR 0 24
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 2
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 2
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 2
47144: NEG
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 2
47167: NEG
47168: PUSH
47169: LD_INT 2
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: LD_INT 2
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 2
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 3
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 3
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47244: LD_ADDR_VAR 0 25
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: LD_INT 2
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 2
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 2
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 2
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: LD_INT 2
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: LD_INT 2
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 2
47420: NEG
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: LD_INT 2
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 3
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 3
47465: PUSH
47466: LD_INT 2
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: LD_INT 3
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 3
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47518: LD_ADDR_VAR 0 26
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: LD_INT 1
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: LD_INT 2
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 2
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 2
47717: NEG
47718: PUSH
47719: LD_INT 2
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: LD_INT 3
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: LD_INT 3
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: LD_INT 2
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47794: LD_ADDR_VAR 0 27
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: LD_INT 2
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 2
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: LD_INT 1
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 2
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: LD_INT 2
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 2
47970: NEG
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 2
47993: NEG
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: LD_INT 2
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 2
48016: NEG
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 3
48027: NEG
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 3
48039: NEG
48040: PUSH
48041: LD_INT 2
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48074: LD_ADDR_VAR 0 28
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: LD_INT 2
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: LD_INT 2
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 2
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 2
48250: NEG
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 2
48261: NEG
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 2
48273: NEG
48274: PUSH
48275: LD_INT 2
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: LD_INT 3
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: LD_INT 3
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 3
48309: NEG
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 3
48321: NEG
48322: PUSH
48323: LD_INT 2
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48356: LD_ADDR_VAR 0 29
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 1
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: LD_INT 1
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: NEG
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: LD_INT 2
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 2
48471: PUSH
48472: LD_INT 0
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 2
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: LD_INT 2
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: LD_INT 2
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: NEG
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 2
48522: NEG
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 2
48534: NEG
48535: PUSH
48536: LD_INT 2
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: LD_INT 3
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 2
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 3
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: LD_INT 3
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: LD_INT 2
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 3
48600: NEG
48601: PUSH
48602: LD_INT 2
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48635: LD_ADDR_VAR 0 30
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 2
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 2
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: NEG
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: NEG
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: LD_INT 3
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: LD_INT 2
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 3
48847: PUSH
48848: LD_INT 2
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: PUSH
48858: LD_INT 3
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 2
48867: NEG
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 3
48878: NEG
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48913: LD_ADDR_VAR 0 31
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 2
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 2
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: LD_INT 2
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: LD_INT 2
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: NEG
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 2
49090: NEG
49091: PUSH
49092: LD_INT 2
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: LD_INT 3
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 3
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: LD_INT 3
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: LD_INT 2
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 3
49156: NEG
49157: PUSH
49158: LD_INT 2
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49191: LD_ADDR_VAR 0 32
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: LD_INT 2
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 2
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: LD_INT 2
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: LD_INT 2
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: LD_INT 2
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 2
49357: NEG
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: NEG
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: LD_INT 3
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: LD_INT 2
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 3
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: LD_INT 3
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 2
49423: NEG
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 3
49434: NEG
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49469: LD_ADDR_VAR 0 33
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: LD_INT 1
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: LD_INT 2
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 2
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 2
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 1
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 2
49624: NEG
49625: PUSH
49626: LD_INT 0
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 2
49635: NEG
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: LD_INT 2
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 2
49659: NEG
49660: PUSH
49661: LD_INT 3
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 2
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 3
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: LD_INT 3
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: LD_INT 2
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 3
49713: NEG
49714: PUSH
49715: LD_INT 2
49717: NEG
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49748: LD_ADDR_VAR 0 34
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: LD_INT 2
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: LD_INT 2
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 2
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 2
49915: NEG
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 2
49927: NEG
49928: PUSH
49929: LD_INT 2
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: LD_INT 3
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 3
49962: PUSH
49963: LD_INT 2
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: PUSH
49973: LD_INT 3
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 2
49982: NEG
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 3
49993: NEG
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50028: LD_ADDR_VAR 0 35
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 2
50119: NEG
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50140: LD_ADDR_VAR 0 36
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: LD_INT 2
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: LD_INT 2
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50252: LD_ADDR_VAR 0 37
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 1
50310: NEG
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50364: LD_ADDR_VAR 0 38
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 2
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 2
50455: NEG
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50476: LD_ADDR_VAR 0 39
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: LD_INT 2
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50588: LD_ADDR_VAR 0 40
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: NEG
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50700: LD_ADDR_VAR 0 41
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: LD_INT 2
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 2
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 2
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 2
50824: PUSH
50825: LD_INT 2
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: LD_INT 2
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 2
50855: NEG
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 2
50866: NEG
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 2
50890: NEG
50891: PUSH
50892: LD_INT 3
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 3
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 3
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 3
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 3
50943: PUSH
50944: LD_INT 3
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: LD_INT 3
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 2
50963: NEG
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 3
50974: NEG
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 3
50985: NEG
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 3
50997: NEG
50998: PUSH
50999: LD_INT 2
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 3
51009: NEG
51010: PUSH
51011: LD_INT 3
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51050: LD_ADDR_VAR 0 42
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: LD_INT 2
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 2
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: NEG
51229: PUSH
51230: LD_INT 2
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 2
51240: NEG
51241: PUSH
51242: LD_INT 3
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: LD_INT 3
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: LD_INT 3
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: LD_INT 2
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 3
51286: PUSH
51287: LD_INT 2
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 3
51296: PUSH
51297: LD_INT 3
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 2
51306: PUSH
51307: LD_INT 3
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: LD_INT 3
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: LD_INT 3
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: LD_INT 2
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 3
51347: NEG
51348: PUSH
51349: LD_INT 2
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 3
51359: NEG
51360: PUSH
51361: LD_INT 3
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51400: LD_ADDR_VAR 0 43
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 2
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: LD_INT 2
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 2
51566: NEG
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 2
51577: NEG
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: LD_INT 3
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: LD_INT 3
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: LD_INT 2
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 2
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 3
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 3
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: LD_INT 3
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: LD_INT 3
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: LD_INT 2
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 2
51685: NEG
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 3
51696: NEG
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 3
51707: NEG
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51748: LD_ADDR_VAR 0 44
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 1
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 2
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 2
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: LD_INT 2
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 2
51903: NEG
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: NEG
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 2
51926: NEG
51927: PUSH
51928: LD_INT 2
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 2
51938: NEG
51939: PUSH
51940: LD_INT 3
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 3
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 3
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 3
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 3
51991: PUSH
51992: LD_INT 3
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: PUSH
52002: LD_INT 3
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 2
52011: NEG
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 3
52022: NEG
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 3
52033: NEG
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 3
52045: NEG
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 3
52057: NEG
52058: PUSH
52059: LD_INT 3
52061: NEG
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52098: LD_ADDR_VAR 0 45
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: LD_INT 0
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: LD_INT 2
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: LD_INT 2
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 2
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 2
52223: PUSH
52224: LD_INT 2
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: LD_INT 2
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: LD_INT 2
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 2
52276: NEG
52277: PUSH
52278: LD_INT 2
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 2
52288: NEG
52289: PUSH
52290: LD_INT 3
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: LD_INT 3
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: LD_INT 3
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: LD_INT 2
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 3
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 3
52344: PUSH
52345: LD_INT 3
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 2
52354: PUSH
52355: LD_INT 3
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: PUSH
52365: LD_INT 3
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 3
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: LD_INT 2
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 3
52395: NEG
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 3
52407: NEG
52408: PUSH
52409: LD_INT 3
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52448: LD_ADDR_VAR 0 46
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: NEG
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 2
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 2
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: LD_INT 2
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: LD_INT 3
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: LD_INT 3
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 3
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 3
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: LD_INT 3
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: LD_INT 3
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: LD_INT 2
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 2
52733: NEG
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 3
52744: NEG
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 3
52755: NEG
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52796: LD_ADDR_VAR 0 47
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: LD_INT 1
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 2
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 2
52911: NEG
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 2
52923: NEG
52924: PUSH
52925: LD_INT 2
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52947: LD_ADDR_VAR 0 48
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: LD_INT 2
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 2
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: LD_INT 1
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 2
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53094: LD_ADDR_VAR 0 49
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: LD_INT 1
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: LD_INT 1
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 2
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: LD_INT 2
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: LD_INT 2
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53238: LD_ADDR_VAR 0 50
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 2
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 2
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: LD_INT 2
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: NEG
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53382: LD_ADDR_VAR 0 51
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: LD_INT 1
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: LD_INT 2
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: LD_INT 2
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 2
53494: NEG
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 2
53505: NEG
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53529: LD_ADDR_VAR 0 52
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: LD_INT 2
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 2
53633: NEG
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 2
53644: NEG
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53680: LD_ADDR_VAR 0 53
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: LD_INT 2
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: LD_INT 1
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: LD_INT 2
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: LD_INT 2
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 2
53867: NEG
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: LD_INT 2
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53910: LD_ADDR_VAR 0 54
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: LD_INT 2
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 2
54045: PUSH
54046: LD_INT 2
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: LD_INT 2
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: LD_INT 2
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: NEG
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 2
54109: NEG
54110: PUSH
54111: LD_INT 2
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54140: LD_ADDR_VAR 0 55
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 2
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: NEG
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 2
54316: NEG
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: NEG
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: LD_INT 2
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54370: LD_ADDR_VAR 0 56
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 2
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54600: LD_ADDR_VAR 0 57
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: LD_INT 2
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 2
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 2
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 2
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: LD_INT 2
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 2
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 2
54776: NEG
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: LD_INT 2
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54830: LD_ADDR_VAR 0 58
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: LD_INT 2
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 2
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 2
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 2
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: LD_INT 2
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 2
55006: NEG
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: NEG
55030: PUSH
55031: LD_INT 2
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55060: LD_ADDR_VAR 0 59
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55148: LD_ADDR_VAR 0 60
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55236: LD_ADDR_VAR 0 61
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: NEG
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55324: LD_ADDR_VAR 0 62
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55412: LD_ADDR_VAR 0 63
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55500: LD_ADDR_VAR 0 64
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: LD_INT 1
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: ST_TO_ADDR
// end ; 1 :
55588: GO 61485
55590: LD_INT 1
55592: DOUBLE
55593: EQUAL
55594: IFTRUE 55598
55596: GO 58221
55598: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55599: LD_ADDR_VAR 0 11
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: LD_INT 3
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 3
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 2
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: LIST
55642: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55643: LD_ADDR_VAR 0 12
55647: PUSH
55648: LD_INT 2
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 3
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 3
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: LIST
55683: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55684: LD_ADDR_VAR 0 13
55688: PUSH
55689: LD_INT 3
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 3
55701: PUSH
55702: LD_INT 3
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: LD_INT 3
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: LIST
55723: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55724: LD_ADDR_VAR 0 14
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: LD_INT 3
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: LD_INT 3
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: LD_INT 2
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: LIST
55764: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55765: LD_ADDR_VAR 0 15
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 3
55783: NEG
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 3
55794: NEG
55795: PUSH
55796: LD_INT 1
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: LIST
55808: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55809: LD_ADDR_VAR 0 16
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: LD_INT 3
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 3
55828: NEG
55829: PUSH
55830: LD_INT 2
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 3
55840: NEG
55841: PUSH
55842: LD_INT 3
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: LIST
55854: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55855: LD_ADDR_VAR 0 17
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: LD_INT 3
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: LD_INT 3
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: LIST
55898: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55899: LD_ADDR_VAR 0 18
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 3
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 3
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: LIST
55939: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55940: LD_ADDR_VAR 0 19
55944: PUSH
55945: LD_INT 3
55947: PUSH
55948: LD_INT 2
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 3
55957: PUSH
55958: LD_INT 3
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 2
55967: PUSH
55968: LD_INT 3
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: LIST
55979: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55980: LD_ADDR_VAR 0 20
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 3
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 3
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: LD_INT 2
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: LIST
56020: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56021: LD_ADDR_VAR 0 21
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 3
56039: NEG
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 3
56050: NEG
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: LIST
56064: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56065: LD_ADDR_VAR 0 22
56069: PUSH
56070: LD_INT 2
56072: NEG
56073: PUSH
56074: LD_INT 3
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 3
56084: NEG
56085: PUSH
56086: LD_INT 2
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 3
56096: NEG
56097: PUSH
56098: LD_INT 3
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: LIST
56110: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56111: LD_ADDR_VAR 0 23
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 3
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: LD_INT 4
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: LD_INT 3
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: LIST
56154: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56155: LD_ADDR_VAR 0 24
56159: PUSH
56160: LD_INT 3
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 3
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 4
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: LIST
56195: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56196: LD_ADDR_VAR 0 25
56200: PUSH
56201: LD_INT 3
56203: PUSH
56204: LD_INT 3
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 4
56213: PUSH
56214: LD_INT 3
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 3
56223: PUSH
56224: LD_INT 4
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: LIST
56235: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56236: LD_ADDR_VAR 0 26
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: LD_INT 3
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: PUSH
56254: LD_INT 4
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: LIST
56276: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56277: LD_ADDR_VAR 0 27
56281: PUSH
56282: LD_INT 3
56284: NEG
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 3
56295: NEG
56296: PUSH
56297: LD_INT 1
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 4
56306: NEG
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: LIST
56320: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56321: LD_ADDR_VAR 0 28
56325: PUSH
56326: LD_INT 3
56328: NEG
56329: PUSH
56330: LD_INT 3
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 3
56340: NEG
56341: PUSH
56342: LD_INT 4
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 4
56352: NEG
56353: PUSH
56354: LD_INT 3
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: LIST
56366: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56367: LD_ADDR_VAR 0 29
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: LD_INT 3
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: LD_INT 3
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: LD_INT 4
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: LD_INT 4
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: LD_INT 3
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: LD_INT 5
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 5
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: LD_INT 4
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: LD_INT 6
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: LD_INT 6
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: LD_INT 5
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56522: LD_ADDR_VAR 0 30
56526: PUSH
56527: LD_INT 2
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 3
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 3
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 3
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 4
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 4
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 4
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 5
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 5
56612: PUSH
56613: LD_INT 1
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 5
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 6
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 6
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56665: LD_ADDR_VAR 0 31
56669: PUSH
56670: LD_INT 3
56672: PUSH
56673: LD_INT 2
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 3
56682: PUSH
56683: LD_INT 3
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 2
56692: PUSH
56693: LD_INT 3
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 4
56702: PUSH
56703: LD_INT 3
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 4
56712: PUSH
56713: LD_INT 4
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 3
56722: PUSH
56723: LD_INT 4
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 5
56732: PUSH
56733: LD_INT 4
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 5
56742: PUSH
56743: LD_INT 5
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 4
56752: PUSH
56753: LD_INT 5
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 6
56762: PUSH
56763: LD_INT 5
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 6
56772: PUSH
56773: LD_INT 6
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 5
56782: PUSH
56783: LD_INT 6
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56804: LD_ADDR_VAR 0 32
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: LD_INT 3
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: LD_INT 3
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: LD_INT 4
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 4
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: LD_INT 3
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: LD_INT 5
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 5
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: LD_INT 4
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: LD_INT 6
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_INT 6
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: LD_INT 5
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56947: LD_ADDR_VAR 0 33
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 3
56965: NEG
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 3
56976: NEG
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 3
56988: NEG
56989: PUSH
56990: LD_INT 1
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 4
56999: NEG
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 4
57010: NEG
57011: PUSH
57012: LD_INT 1
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 4
57022: NEG
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 5
57033: NEG
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 5
57044: NEG
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 5
57056: NEG
57057: PUSH
57058: LD_INT 1
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 6
57067: NEG
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 6
57078: NEG
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57102: LD_ADDR_VAR 0 34
57106: PUSH
57107: LD_INT 2
57109: NEG
57110: PUSH
57111: LD_INT 3
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 3
57121: NEG
57122: PUSH
57123: LD_INT 2
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 3
57133: NEG
57134: PUSH
57135: LD_INT 3
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 3
57145: NEG
57146: PUSH
57147: LD_INT 4
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 4
57157: NEG
57158: PUSH
57159: LD_INT 3
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 4
57169: NEG
57170: PUSH
57171: LD_INT 4
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 4
57181: NEG
57182: PUSH
57183: LD_INT 5
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 5
57193: NEG
57194: PUSH
57195: LD_INT 4
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 5
57205: NEG
57206: PUSH
57207: LD_INT 5
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 5
57217: NEG
57218: PUSH
57219: LD_INT 6
57221: NEG
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 6
57229: NEG
57230: PUSH
57231: LD_INT 5
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 6
57241: NEG
57242: PUSH
57243: LD_INT 6
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57265: LD_ADDR_VAR 0 41
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: LD_INT 2
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: LD_INT 3
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 1
57295: PUSH
57296: LD_INT 2
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: LIST
57308: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57309: LD_ADDR_VAR 0 42
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 2
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 3
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: LIST
57349: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57350: LD_ADDR_VAR 0 43
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 3
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 2
57377: PUSH
57378: LD_INT 3
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: LIST
57389: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57390: LD_ADDR_VAR 0 44
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: LD_INT 2
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: LD_INT 3
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: LD_INT 2
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: LIST
57430: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57431: LD_ADDR_VAR 0 45
57435: PUSH
57436: LD_INT 2
57438: NEG
57439: PUSH
57440: LD_INT 0
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 2
57449: NEG
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 3
57460: NEG
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: LIST
57474: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57475: LD_ADDR_VAR 0 46
57479: PUSH
57480: LD_INT 2
57482: NEG
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 2
57494: NEG
57495: PUSH
57496: LD_INT 3
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 3
57506: NEG
57507: PUSH
57508: LD_INT 2
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: LIST
57520: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57521: LD_ADDR_VAR 0 47
57525: PUSH
57526: LD_INT 2
57528: NEG
57529: PUSH
57530: LD_INT 3
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: LD_INT 3
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57554: LD_ADDR_VAR 0 48
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: LD_INT 2
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57585: LD_ADDR_VAR 0 49
57589: PUSH
57590: LD_INT 3
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 3
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57614: LD_ADDR_VAR 0 50
57618: PUSH
57619: LD_INT 2
57621: PUSH
57622: LD_INT 3
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: LD_INT 3
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57643: LD_ADDR_VAR 0 51
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: LD_INT 2
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: NEG
57662: PUSH
57663: LD_INT 1
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57674: LD_ADDR_VAR 0 52
57678: PUSH
57679: LD_INT 3
57681: NEG
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 3
57693: NEG
57694: PUSH
57695: LD_INT 2
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57707: LD_ADDR_VAR 0 53
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: LD_INT 3
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: LD_INT 3
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: LIST
57750: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57751: LD_ADDR_VAR 0 54
57755: PUSH
57756: LD_INT 2
57758: PUSH
57759: LD_INT 1
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 3
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 3
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: LIST
57791: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57792: LD_ADDR_VAR 0 55
57796: PUSH
57797: LD_INT 3
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 3
57809: PUSH
57810: LD_INT 3
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 2
57819: PUSH
57820: LD_INT 3
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: LIST
57831: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57832: LD_ADDR_VAR 0 56
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: LD_INT 3
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: LD_INT 3
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: LIST
57872: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57873: LD_ADDR_VAR 0 57
57877: PUSH
57878: LD_INT 2
57880: NEG
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 3
57891: NEG
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 3
57902: NEG
57903: PUSH
57904: LD_INT 1
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: LIST
57916: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57917: LD_ADDR_VAR 0 58
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: LD_INT 3
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 3
57936: NEG
57937: PUSH
57938: LD_INT 2
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 3
57948: NEG
57949: PUSH
57950: LD_INT 3
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: LIST
57962: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57963: LD_ADDR_VAR 0 59
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: LD_INT 2
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: LIST
58006: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58007: LD_ADDR_VAR 0 60
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 2
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 2
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: LIST
58047: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58048: LD_ADDR_VAR 0 61
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: LD_INT 1
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: LD_INT 2
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: LIST
58087: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58088: LD_ADDR_VAR 0 62
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: LD_INT 2
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: LD_INT 2
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: LD_INT 1
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: LIST
58128: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58129: LD_ADDR_VAR 0 63
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 2
58147: NEG
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 2
58158: NEG
58159: PUSH
58160: LD_INT 1
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: LIST
58172: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58173: LD_ADDR_VAR 0 64
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: LD_INT 2
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 2
58192: NEG
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 2
58204: NEG
58205: PUSH
58206: LD_INT 2
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: LIST
58218: ST_TO_ADDR
// end ; 2 :
58219: GO 61485
58221: LD_INT 2
58223: DOUBLE
58224: EQUAL
58225: IFTRUE 58229
58227: GO 61484
58229: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58230: LD_ADDR_VAR 0 29
58234: PUSH
58235: LD_INT 4
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 4
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 5
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 5
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 4
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 3
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 3
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 3
58309: PUSH
58310: LD_INT 2
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 5
58320: PUSH
58321: LD_INT 2
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 3
58330: PUSH
58331: LD_INT 3
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 3
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 4
58350: PUSH
58351: LD_INT 3
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 4
58360: PUSH
58361: LD_INT 4
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 3
58370: PUSH
58371: LD_INT 4
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 2
58380: PUSH
58381: LD_INT 3
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 2
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 4
58400: PUSH
58401: LD_INT 2
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: LD_INT 4
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: LD_INT 4
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: LD_INT 3
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 1
58440: PUSH
58441: LD_INT 4
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: LD_INT 5
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: LD_INT 5
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: LD_INT 4
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: LD_INT 3
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 2
58492: PUSH
58493: LD_INT 5
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 2
58502: NEG
58503: PUSH
58504: LD_INT 3
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 3
58513: NEG
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 3
58524: NEG
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 2
58536: NEG
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 3
58558: NEG
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 4
58569: NEG
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 4
58580: NEG
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 4
58592: NEG
58593: PUSH
58594: LD_INT 2
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 2
58604: NEG
58605: PUSH
58606: LD_INT 2
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 4
58615: NEG
58616: PUSH
58617: LD_INT 4
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 4
58627: NEG
58628: PUSH
58629: LD_INT 5
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 3
58639: NEG
58640: PUSH
58641: LD_INT 4
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 3
58651: NEG
58652: PUSH
58653: LD_INT 3
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 4
58663: NEG
58664: PUSH
58665: LD_INT 3
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 5
58675: NEG
58676: PUSH
58677: LD_INT 4
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 5
58687: NEG
58688: PUSH
58689: LD_INT 5
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 3
58699: NEG
58700: PUSH
58701: LD_INT 5
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 5
58711: NEG
58712: PUSH
58713: LD_INT 3
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58768: LD_ADDR_VAR 0 30
58772: PUSH
58773: LD_INT 4
58775: PUSH
58776: LD_INT 4
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 4
58785: PUSH
58786: LD_INT 3
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 5
58795: PUSH
58796: LD_INT 4
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 5
58805: PUSH
58806: LD_INT 5
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 4
58815: PUSH
58816: LD_INT 5
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 3
58825: PUSH
58826: LD_INT 4
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 3
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 5
58845: PUSH
58846: LD_INT 3
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 3
58855: PUSH
58856: LD_INT 5
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: LD_INT 3
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: LD_INT 2
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: LD_INT 3
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: LD_INT 4
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: LD_INT 4
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: LD_INT 3
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 2
58937: PUSH
58938: LD_INT 4
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 2
58947: NEG
58948: PUSH
58949: LD_INT 2
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 4
58958: NEG
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 4
58969: NEG
58970: PUSH
58971: LD_INT 1
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 3
58981: NEG
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 3
58992: NEG
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 4
59003: NEG
59004: PUSH
59005: LD_INT 1
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 5
59014: NEG
59015: PUSH
59016: LD_INT 0
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 5
59025: NEG
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 5
59037: NEG
59038: PUSH
59039: LD_INT 2
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 3
59049: NEG
59050: PUSH
59051: LD_INT 2
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 3
59060: NEG
59061: PUSH
59062: LD_INT 3
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 3
59072: NEG
59073: PUSH
59074: LD_INT 4
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 2
59084: NEG
59085: PUSH
59086: LD_INT 3
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: NEG
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 3
59108: NEG
59109: PUSH
59110: LD_INT 2
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 4
59120: NEG
59121: PUSH
59122: LD_INT 3
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 4
59132: NEG
59133: PUSH
59134: LD_INT 4
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 2
59144: NEG
59145: PUSH
59146: LD_INT 4
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 4
59156: NEG
59157: PUSH
59158: LD_INT 2
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: LD_INT 4
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: LD_INT 5
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: LD_INT 4
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: LD_INT 3
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: LD_INT 3
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: LD_INT 4
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: LD_INT 5
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 2
59247: PUSH
59248: LD_INT 3
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: NEG
59259: PUSH
59260: LD_INT 5
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59315: LD_ADDR_VAR 0 31
59319: PUSH
59320: LD_INT 0
59322: PUSH
59323: LD_INT 4
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: LD_INT 3
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: LD_INT 4
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: PUSH
59353: LD_INT 5
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: LD_INT 5
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: LD_INT 4
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: NEG
59384: PUSH
59385: LD_INT 3
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 2
59394: PUSH
59395: LD_INT 5
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 2
59404: NEG
59405: PUSH
59406: LD_INT 3
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 3
59415: NEG
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 3
59426: NEG
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 2
59438: NEG
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 3
59460: NEG
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 4
59471: NEG
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 4
59482: NEG
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 4
59494: NEG
59495: PUSH
59496: LD_INT 2
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 2
59506: NEG
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 4
59517: NEG
59518: PUSH
59519: LD_INT 4
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 4
59529: NEG
59530: PUSH
59531: LD_INT 5
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 3
59541: NEG
59542: PUSH
59543: LD_INT 4
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 3
59553: NEG
59554: PUSH
59555: LD_INT 3
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 4
59565: NEG
59566: PUSH
59567: LD_INT 3
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 5
59577: NEG
59578: PUSH
59579: LD_INT 4
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 5
59589: NEG
59590: PUSH
59591: LD_INT 5
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 3
59601: NEG
59602: PUSH
59603: LD_INT 5
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 5
59613: NEG
59614: PUSH
59615: LD_INT 3
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: LD_INT 3
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: LD_INT 4
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: LD_INT 3
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: LD_INT 2
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: LD_INT 2
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 1
59680: NEG
59681: PUSH
59682: LD_INT 3
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: LD_INT 4
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 2
59704: PUSH
59705: LD_INT 2
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 2
59715: NEG
59716: PUSH
59717: LD_INT 4
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 4
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 4
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 5
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 5
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 4
59768: PUSH
59769: LD_INT 1
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 3
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 3
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 3
59799: PUSH
59800: LD_INT 2
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 5
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59865: LD_ADDR_VAR 0 32
59869: PUSH
59870: LD_INT 4
59872: NEG
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 4
59883: NEG
59884: PUSH
59885: LD_INT 1
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 3
59895: NEG
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 3
59906: NEG
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 4
59917: NEG
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 5
59928: NEG
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 5
59939: NEG
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 5
59951: NEG
59952: PUSH
59953: LD_INT 2
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 3
59963: NEG
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 3
59974: NEG
59975: PUSH
59976: LD_INT 3
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 3
59986: NEG
59987: PUSH
59988: LD_INT 4
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: LD_INT 3
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 2
60010: NEG
60011: PUSH
60012: LD_INT 2
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 3
60022: NEG
60023: PUSH
60024: LD_INT 2
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 4
60034: NEG
60035: PUSH
60036: LD_INT 3
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 4
60046: NEG
60047: PUSH
60048: LD_INT 4
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 2
60058: NEG
60059: PUSH
60060: LD_INT 4
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 4
60070: NEG
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: LD_INT 4
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: LD_INT 5
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: LD_INT 4
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: LD_INT 3
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: LD_INT 3
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 1
60137: NEG
60138: PUSH
60139: LD_INT 4
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 1
60149: NEG
60150: PUSH
60151: LD_INT 5
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 2
60161: PUSH
60162: LD_INT 3
60164: NEG
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 2
60172: NEG
60173: PUSH
60174: LD_INT 5
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 3
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 3
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 4
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 4
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 3
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 2
60245: PUSH
60246: LD_INT 1
60248: NEG
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 2
60256: PUSH
60257: LD_INT 2
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 4
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 4
60277: PUSH
60278: LD_INT 4
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 4
60287: PUSH
60288: LD_INT 3
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 5
60297: PUSH
60298: LD_INT 4
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 5
60307: PUSH
60308: LD_INT 5
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 4
60317: PUSH
60318: LD_INT 5
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 3
60327: PUSH
60328: LD_INT 4
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 3
60337: PUSH
60338: LD_INT 3
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 5
60347: PUSH
60348: LD_INT 3
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 3
60357: PUSH
60358: LD_INT 5
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60412: LD_ADDR_VAR 0 33
60416: PUSH
60417: LD_INT 4
60419: NEG
60420: PUSH
60421: LD_INT 4
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 4
60431: NEG
60432: PUSH
60433: LD_INT 5
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 3
60443: NEG
60444: PUSH
60445: LD_INT 4
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 3
60455: NEG
60456: PUSH
60457: LD_INT 3
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 4
60467: NEG
60468: PUSH
60469: LD_INT 3
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 5
60479: NEG
60480: PUSH
60481: LD_INT 4
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 5
60491: NEG
60492: PUSH
60493: LD_INT 5
60495: NEG
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 3
60503: NEG
60504: PUSH
60505: LD_INT 5
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 5
60515: NEG
60516: PUSH
60517: LD_INT 3
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: LD_INT 3
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: LD_INT 4
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: PUSH
60550: LD_INT 3
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: LD_INT 2
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: LD_INT 2
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: LD_INT 3
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: NEG
60595: PUSH
60596: LD_INT 4
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 2
60606: PUSH
60607: LD_INT 2
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 2
60617: NEG
60618: PUSH
60619: LD_INT 4
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 4
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 4
60639: PUSH
60640: LD_INT 1
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 5
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 5
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 4
60670: PUSH
60671: LD_INT 1
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 3
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 3
60690: PUSH
60691: LD_INT 1
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 3
60701: PUSH
60702: LD_INT 2
60704: NEG
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 5
60712: PUSH
60713: LD_INT 2
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 3
60722: PUSH
60723: LD_INT 3
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 3
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 4
60742: PUSH
60743: LD_INT 3
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 4
60752: PUSH
60753: LD_INT 4
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 3
60762: PUSH
60763: LD_INT 4
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 2
60772: PUSH
60773: LD_INT 3
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 2
60782: PUSH
60783: LD_INT 2
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 4
60792: PUSH
60793: LD_INT 2
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 2
60802: PUSH
60803: LD_INT 4
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: LD_INT 4
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 0
60822: PUSH
60823: LD_INT 3
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: LD_INT 4
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 1
60842: PUSH
60843: LD_INT 5
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: LD_INT 5
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 1
60862: NEG
60863: PUSH
60864: LD_INT 4
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: LD_INT 3
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 2
60884: PUSH
60885: LD_INT 5
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 2
60894: NEG
60895: PUSH
60896: LD_INT 3
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60950: LD_ADDR_VAR 0 34
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: LD_INT 4
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: LD_INT 5
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 1
60979: PUSH
60980: LD_INT 4
60982: NEG
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 1
60990: PUSH
60991: LD_INT 3
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: LD_INT 3
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: LD_INT 4
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: LD_INT 5
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 2
61036: PUSH
61037: LD_INT 3
61039: NEG
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 2
61047: NEG
61048: PUSH
61049: LD_INT 5
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 3
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 3
61069: PUSH
61070: LD_INT 1
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 4
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 4
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 3
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 2
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 2
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 2
61131: PUSH
61132: LD_INT 2
61134: NEG
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 4
61142: PUSH
61143: LD_INT 2
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 4
61152: PUSH
61153: LD_INT 4
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 4
61162: PUSH
61163: LD_INT 3
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 5
61172: PUSH
61173: LD_INT 4
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 5
61182: PUSH
61183: LD_INT 5
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 4
61192: PUSH
61193: LD_INT 5
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 3
61202: PUSH
61203: LD_INT 4
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 3
61212: PUSH
61213: LD_INT 3
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 5
61222: PUSH
61223: LD_INT 3
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 3
61232: PUSH
61233: LD_INT 5
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 0
61242: PUSH
61243: LD_INT 3
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: LD_INT 2
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 1
61262: PUSH
61263: LD_INT 3
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 1
61272: PUSH
61273: LD_INT 4
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 0
61282: PUSH
61283: LD_INT 4
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 1
61292: NEG
61293: PUSH
61294: LD_INT 3
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 1
61303: NEG
61304: PUSH
61305: LD_INT 2
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 2
61314: PUSH
61315: LD_INT 4
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 2
61324: NEG
61325: PUSH
61326: LD_INT 2
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 4
61335: NEG
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 4
61346: NEG
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 3
61358: NEG
61359: PUSH
61360: LD_INT 0
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 3
61369: NEG
61370: PUSH
61371: LD_INT 1
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 4
61380: NEG
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 5
61391: NEG
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 5
61402: NEG
61403: PUSH
61404: LD_INT 1
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 5
61414: NEG
61415: PUSH
61416: LD_INT 2
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 3
61426: NEG
61427: PUSH
61428: LD_INT 2
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: ST_TO_ADDR
// end ; end ;
61482: GO 61485
61484: POP
// case btype of b_depot , b_warehouse :
61485: LD_VAR 0 1
61489: PUSH
61490: LD_INT 0
61492: DOUBLE
61493: EQUAL
61494: IFTRUE 61504
61496: LD_INT 1
61498: DOUBLE
61499: EQUAL
61500: IFTRUE 61504
61502: GO 61705
61504: POP
// case nation of nation_american :
61505: LD_VAR 0 5
61509: PUSH
61510: LD_INT 1
61512: DOUBLE
61513: EQUAL
61514: IFTRUE 61518
61516: GO 61574
61518: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61519: LD_ADDR_VAR 0 9
61523: PUSH
61524: LD_VAR 0 11
61528: PUSH
61529: LD_VAR 0 12
61533: PUSH
61534: LD_VAR 0 13
61538: PUSH
61539: LD_VAR 0 14
61543: PUSH
61544: LD_VAR 0 15
61548: PUSH
61549: LD_VAR 0 16
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: PUSH
61562: LD_VAR 0 4
61566: PUSH
61567: LD_INT 1
61569: PLUS
61570: ARRAY
61571: ST_TO_ADDR
61572: GO 61703
61574: LD_INT 2
61576: DOUBLE
61577: EQUAL
61578: IFTRUE 61582
61580: GO 61638
61582: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61583: LD_ADDR_VAR 0 9
61587: PUSH
61588: LD_VAR 0 17
61592: PUSH
61593: LD_VAR 0 18
61597: PUSH
61598: LD_VAR 0 19
61602: PUSH
61603: LD_VAR 0 20
61607: PUSH
61608: LD_VAR 0 21
61612: PUSH
61613: LD_VAR 0 22
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: PUSH
61626: LD_VAR 0 4
61630: PUSH
61631: LD_INT 1
61633: PLUS
61634: ARRAY
61635: ST_TO_ADDR
61636: GO 61703
61638: LD_INT 3
61640: DOUBLE
61641: EQUAL
61642: IFTRUE 61646
61644: GO 61702
61646: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61647: LD_ADDR_VAR 0 9
61651: PUSH
61652: LD_VAR 0 23
61656: PUSH
61657: LD_VAR 0 24
61661: PUSH
61662: LD_VAR 0 25
61666: PUSH
61667: LD_VAR 0 26
61671: PUSH
61672: LD_VAR 0 27
61676: PUSH
61677: LD_VAR 0 28
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: PUSH
61690: LD_VAR 0 4
61694: PUSH
61695: LD_INT 1
61697: PLUS
61698: ARRAY
61699: ST_TO_ADDR
61700: GO 61703
61702: POP
61703: GO 62258
61705: LD_INT 2
61707: DOUBLE
61708: EQUAL
61709: IFTRUE 61719
61711: LD_INT 3
61713: DOUBLE
61714: EQUAL
61715: IFTRUE 61719
61717: GO 61775
61719: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61720: LD_ADDR_VAR 0 9
61724: PUSH
61725: LD_VAR 0 29
61729: PUSH
61730: LD_VAR 0 30
61734: PUSH
61735: LD_VAR 0 31
61739: PUSH
61740: LD_VAR 0 32
61744: PUSH
61745: LD_VAR 0 33
61749: PUSH
61750: LD_VAR 0 34
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: PUSH
61763: LD_VAR 0 4
61767: PUSH
61768: LD_INT 1
61770: PLUS
61771: ARRAY
61772: ST_TO_ADDR
61773: GO 62258
61775: LD_INT 16
61777: DOUBLE
61778: EQUAL
61779: IFTRUE 61837
61781: LD_INT 17
61783: DOUBLE
61784: EQUAL
61785: IFTRUE 61837
61787: LD_INT 18
61789: DOUBLE
61790: EQUAL
61791: IFTRUE 61837
61793: LD_INT 19
61795: DOUBLE
61796: EQUAL
61797: IFTRUE 61837
61799: LD_INT 22
61801: DOUBLE
61802: EQUAL
61803: IFTRUE 61837
61805: LD_INT 20
61807: DOUBLE
61808: EQUAL
61809: IFTRUE 61837
61811: LD_INT 21
61813: DOUBLE
61814: EQUAL
61815: IFTRUE 61837
61817: LD_INT 23
61819: DOUBLE
61820: EQUAL
61821: IFTRUE 61837
61823: LD_INT 24
61825: DOUBLE
61826: EQUAL
61827: IFTRUE 61837
61829: LD_INT 25
61831: DOUBLE
61832: EQUAL
61833: IFTRUE 61837
61835: GO 61893
61837: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61838: LD_ADDR_VAR 0 9
61842: PUSH
61843: LD_VAR 0 35
61847: PUSH
61848: LD_VAR 0 36
61852: PUSH
61853: LD_VAR 0 37
61857: PUSH
61858: LD_VAR 0 38
61862: PUSH
61863: LD_VAR 0 39
61867: PUSH
61868: LD_VAR 0 40
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: PUSH
61881: LD_VAR 0 4
61885: PUSH
61886: LD_INT 1
61888: PLUS
61889: ARRAY
61890: ST_TO_ADDR
61891: GO 62258
61893: LD_INT 6
61895: DOUBLE
61896: EQUAL
61897: IFTRUE 61949
61899: LD_INT 7
61901: DOUBLE
61902: EQUAL
61903: IFTRUE 61949
61905: LD_INT 8
61907: DOUBLE
61908: EQUAL
61909: IFTRUE 61949
61911: LD_INT 13
61913: DOUBLE
61914: EQUAL
61915: IFTRUE 61949
61917: LD_INT 12
61919: DOUBLE
61920: EQUAL
61921: IFTRUE 61949
61923: LD_INT 15
61925: DOUBLE
61926: EQUAL
61927: IFTRUE 61949
61929: LD_INT 11
61931: DOUBLE
61932: EQUAL
61933: IFTRUE 61949
61935: LD_INT 14
61937: DOUBLE
61938: EQUAL
61939: IFTRUE 61949
61941: LD_INT 10
61943: DOUBLE
61944: EQUAL
61945: IFTRUE 61949
61947: GO 62005
61949: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61950: LD_ADDR_VAR 0 9
61954: PUSH
61955: LD_VAR 0 41
61959: PUSH
61960: LD_VAR 0 42
61964: PUSH
61965: LD_VAR 0 43
61969: PUSH
61970: LD_VAR 0 44
61974: PUSH
61975: LD_VAR 0 45
61979: PUSH
61980: LD_VAR 0 46
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: PUSH
61993: LD_VAR 0 4
61997: PUSH
61998: LD_INT 1
62000: PLUS
62001: ARRAY
62002: ST_TO_ADDR
62003: GO 62258
62005: LD_INT 36
62007: DOUBLE
62008: EQUAL
62009: IFTRUE 62013
62011: GO 62069
62013: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62014: LD_ADDR_VAR 0 9
62018: PUSH
62019: LD_VAR 0 47
62023: PUSH
62024: LD_VAR 0 48
62028: PUSH
62029: LD_VAR 0 49
62033: PUSH
62034: LD_VAR 0 50
62038: PUSH
62039: LD_VAR 0 51
62043: PUSH
62044: LD_VAR 0 52
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: PUSH
62057: LD_VAR 0 4
62061: PUSH
62062: LD_INT 1
62064: PLUS
62065: ARRAY
62066: ST_TO_ADDR
62067: GO 62258
62069: LD_INT 4
62071: DOUBLE
62072: EQUAL
62073: IFTRUE 62095
62075: LD_INT 5
62077: DOUBLE
62078: EQUAL
62079: IFTRUE 62095
62081: LD_INT 34
62083: DOUBLE
62084: EQUAL
62085: IFTRUE 62095
62087: LD_INT 37
62089: DOUBLE
62090: EQUAL
62091: IFTRUE 62095
62093: GO 62151
62095: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62096: LD_ADDR_VAR 0 9
62100: PUSH
62101: LD_VAR 0 53
62105: PUSH
62106: LD_VAR 0 54
62110: PUSH
62111: LD_VAR 0 55
62115: PUSH
62116: LD_VAR 0 56
62120: PUSH
62121: LD_VAR 0 57
62125: PUSH
62126: LD_VAR 0 58
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: PUSH
62139: LD_VAR 0 4
62143: PUSH
62144: LD_INT 1
62146: PLUS
62147: ARRAY
62148: ST_TO_ADDR
62149: GO 62258
62151: LD_INT 31
62153: DOUBLE
62154: EQUAL
62155: IFTRUE 62201
62157: LD_INT 32
62159: DOUBLE
62160: EQUAL
62161: IFTRUE 62201
62163: LD_INT 33
62165: DOUBLE
62166: EQUAL
62167: IFTRUE 62201
62169: LD_INT 27
62171: DOUBLE
62172: EQUAL
62173: IFTRUE 62201
62175: LD_INT 26
62177: DOUBLE
62178: EQUAL
62179: IFTRUE 62201
62181: LD_INT 28
62183: DOUBLE
62184: EQUAL
62185: IFTRUE 62201
62187: LD_INT 29
62189: DOUBLE
62190: EQUAL
62191: IFTRUE 62201
62193: LD_INT 30
62195: DOUBLE
62196: EQUAL
62197: IFTRUE 62201
62199: GO 62257
62201: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62202: LD_ADDR_VAR 0 9
62206: PUSH
62207: LD_VAR 0 59
62211: PUSH
62212: LD_VAR 0 60
62216: PUSH
62217: LD_VAR 0 61
62221: PUSH
62222: LD_VAR 0 62
62226: PUSH
62227: LD_VAR 0 63
62231: PUSH
62232: LD_VAR 0 64
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: PUSH
62245: LD_VAR 0 4
62249: PUSH
62250: LD_INT 1
62252: PLUS
62253: ARRAY
62254: ST_TO_ADDR
62255: GO 62258
62257: POP
// temp_list2 = [ ] ;
62258: LD_ADDR_VAR 0 10
62262: PUSH
62263: EMPTY
62264: ST_TO_ADDR
// for i in temp_list do
62265: LD_ADDR_VAR 0 8
62269: PUSH
62270: LD_VAR 0 9
62274: PUSH
62275: FOR_IN
62276: IFFALSE 62328
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62278: LD_ADDR_VAR 0 10
62282: PUSH
62283: LD_VAR 0 10
62287: PUSH
62288: LD_VAR 0 8
62292: PUSH
62293: LD_INT 1
62295: ARRAY
62296: PUSH
62297: LD_VAR 0 2
62301: PLUS
62302: PUSH
62303: LD_VAR 0 8
62307: PUSH
62308: LD_INT 2
62310: ARRAY
62311: PUSH
62312: LD_VAR 0 3
62316: PLUS
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: EMPTY
62323: LIST
62324: ADD
62325: ST_TO_ADDR
62326: GO 62275
62328: POP
62329: POP
// result = temp_list2 ;
62330: LD_ADDR_VAR 0 7
62334: PUSH
62335: LD_VAR 0 10
62339: ST_TO_ADDR
// end ;
62340: LD_VAR 0 7
62344: RET
// export function EnemyInRange ( unit , dist ) ; begin
62345: LD_INT 0
62347: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62348: LD_ADDR_VAR 0 3
62352: PUSH
62353: LD_VAR 0 1
62357: PPUSH
62358: CALL_OW 255
62362: PPUSH
62363: LD_VAR 0 1
62367: PPUSH
62368: CALL_OW 250
62372: PPUSH
62373: LD_VAR 0 1
62377: PPUSH
62378: CALL_OW 251
62382: PPUSH
62383: LD_VAR 0 2
62387: PPUSH
62388: CALL 35718 0 4
62392: PUSH
62393: LD_INT 4
62395: ARRAY
62396: ST_TO_ADDR
// end ;
62397: LD_VAR 0 3
62401: RET
// export function PlayerSeeMe ( unit ) ; begin
62402: LD_INT 0
62404: PPUSH
// result := See ( your_side , unit ) ;
62405: LD_ADDR_VAR 0 2
62409: PUSH
62410: LD_OWVAR 2
62414: PPUSH
62415: LD_VAR 0 1
62419: PPUSH
62420: CALL_OW 292
62424: ST_TO_ADDR
// end ;
62425: LD_VAR 0 2
62429: RET
// export function ReverseDir ( unit ) ; begin
62430: LD_INT 0
62432: PPUSH
// if not unit then
62433: LD_VAR 0 1
62437: NOT
62438: IFFALSE 62442
// exit ;
62440: GO 62465
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62442: LD_ADDR_VAR 0 2
62446: PUSH
62447: LD_VAR 0 1
62451: PPUSH
62452: CALL_OW 254
62456: PUSH
62457: LD_INT 3
62459: PLUS
62460: PUSH
62461: LD_INT 6
62463: MOD
62464: ST_TO_ADDR
// end ;
62465: LD_VAR 0 2
62469: RET
// export function ReverseArray ( array ) ; var i ; begin
62470: LD_INT 0
62472: PPUSH
62473: PPUSH
// if not array then
62474: LD_VAR 0 1
62478: NOT
62479: IFFALSE 62483
// exit ;
62481: GO 62538
// result := [ ] ;
62483: LD_ADDR_VAR 0 2
62487: PUSH
62488: EMPTY
62489: ST_TO_ADDR
// for i := array downto 1 do
62490: LD_ADDR_VAR 0 3
62494: PUSH
62495: DOUBLE
62496: LD_VAR 0 1
62500: INC
62501: ST_TO_ADDR
62502: LD_INT 1
62504: PUSH
62505: FOR_DOWNTO
62506: IFFALSE 62536
// result := Join ( result , array [ i ] ) ;
62508: LD_ADDR_VAR 0 2
62512: PUSH
62513: LD_VAR 0 2
62517: PPUSH
62518: LD_VAR 0 1
62522: PUSH
62523: LD_VAR 0 3
62527: ARRAY
62528: PPUSH
62529: CALL 67203 0 2
62533: ST_TO_ADDR
62534: GO 62505
62536: POP
62537: POP
// end ;
62538: LD_VAR 0 2
62542: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62543: LD_INT 0
62545: PPUSH
62546: PPUSH
62547: PPUSH
62548: PPUSH
62549: PPUSH
62550: PPUSH
// if not unit or not hexes then
62551: LD_VAR 0 1
62555: NOT
62556: PUSH
62557: LD_VAR 0 2
62561: NOT
62562: OR
62563: IFFALSE 62567
// exit ;
62565: GO 62690
// dist := 9999 ;
62567: LD_ADDR_VAR 0 5
62571: PUSH
62572: LD_INT 9999
62574: ST_TO_ADDR
// for i = 1 to hexes do
62575: LD_ADDR_VAR 0 4
62579: PUSH
62580: DOUBLE
62581: LD_INT 1
62583: DEC
62584: ST_TO_ADDR
62585: LD_VAR 0 2
62589: PUSH
62590: FOR_TO
62591: IFFALSE 62678
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62593: LD_ADDR_VAR 0 6
62597: PUSH
62598: LD_VAR 0 1
62602: PPUSH
62603: LD_VAR 0 2
62607: PUSH
62608: LD_VAR 0 4
62612: ARRAY
62613: PUSH
62614: LD_INT 1
62616: ARRAY
62617: PPUSH
62618: LD_VAR 0 2
62622: PUSH
62623: LD_VAR 0 4
62627: ARRAY
62628: PUSH
62629: LD_INT 2
62631: ARRAY
62632: PPUSH
62633: CALL_OW 297
62637: ST_TO_ADDR
// if tdist < dist then
62638: LD_VAR 0 6
62642: PUSH
62643: LD_VAR 0 5
62647: LESS
62648: IFFALSE 62676
// begin hex := hexes [ i ] ;
62650: LD_ADDR_VAR 0 8
62654: PUSH
62655: LD_VAR 0 2
62659: PUSH
62660: LD_VAR 0 4
62664: ARRAY
62665: ST_TO_ADDR
// dist := tdist ;
62666: LD_ADDR_VAR 0 5
62670: PUSH
62671: LD_VAR 0 6
62675: ST_TO_ADDR
// end ; end ;
62676: GO 62590
62678: POP
62679: POP
// result := hex ;
62680: LD_ADDR_VAR 0 3
62684: PUSH
62685: LD_VAR 0 8
62689: ST_TO_ADDR
// end ;
62690: LD_VAR 0 3
62694: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62695: LD_INT 0
62697: PPUSH
62698: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62699: LD_VAR 0 1
62703: NOT
62704: PUSH
62705: LD_VAR 0 1
62709: PUSH
62710: LD_INT 21
62712: PUSH
62713: LD_INT 2
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 23
62722: PUSH
62723: LD_INT 2
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PPUSH
62734: CALL_OW 69
62738: IN
62739: NOT
62740: OR
62741: IFFALSE 62745
// exit ;
62743: GO 62792
// for i = 1 to 3 do
62745: LD_ADDR_VAR 0 3
62749: PUSH
62750: DOUBLE
62751: LD_INT 1
62753: DEC
62754: ST_TO_ADDR
62755: LD_INT 3
62757: PUSH
62758: FOR_TO
62759: IFFALSE 62790
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62761: LD_VAR 0 1
62765: PPUSH
62766: CALL_OW 250
62770: PPUSH
62771: LD_VAR 0 1
62775: PPUSH
62776: CALL_OW 251
62780: PPUSH
62781: LD_INT 1
62783: PPUSH
62784: CALL_OW 453
62788: GO 62758
62790: POP
62791: POP
// end ;
62792: LD_VAR 0 2
62796: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62797: LD_INT 0
62799: PPUSH
62800: PPUSH
62801: PPUSH
62802: PPUSH
62803: PPUSH
62804: PPUSH
// if not unit or not enemy_unit then
62805: LD_VAR 0 1
62809: NOT
62810: PUSH
62811: LD_VAR 0 2
62815: NOT
62816: OR
62817: IFFALSE 62821
// exit ;
62819: GO 63288
// if GetLives ( i ) < 250 then
62821: LD_VAR 0 4
62825: PPUSH
62826: CALL_OW 256
62830: PUSH
62831: LD_INT 250
62833: LESS
62834: IFFALSE 62847
// begin ComAutodestruct ( i ) ;
62836: LD_VAR 0 4
62840: PPUSH
62841: CALL 62695 0 1
// exit ;
62845: GO 63288
// end ; x := GetX ( enemy_unit ) ;
62847: LD_ADDR_VAR 0 7
62851: PUSH
62852: LD_VAR 0 2
62856: PPUSH
62857: CALL_OW 250
62861: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62862: LD_ADDR_VAR 0 8
62866: PUSH
62867: LD_VAR 0 2
62871: PPUSH
62872: CALL_OW 251
62876: ST_TO_ADDR
// if not x or not y then
62877: LD_VAR 0 7
62881: NOT
62882: PUSH
62883: LD_VAR 0 8
62887: NOT
62888: OR
62889: IFFALSE 62893
// exit ;
62891: GO 63288
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62893: LD_ADDR_VAR 0 6
62897: PUSH
62898: LD_VAR 0 7
62902: PPUSH
62903: LD_INT 0
62905: PPUSH
62906: LD_INT 4
62908: PPUSH
62909: CALL_OW 272
62913: PUSH
62914: LD_VAR 0 8
62918: PPUSH
62919: LD_INT 0
62921: PPUSH
62922: LD_INT 4
62924: PPUSH
62925: CALL_OW 273
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_VAR 0 7
62938: PPUSH
62939: LD_INT 1
62941: PPUSH
62942: LD_INT 4
62944: PPUSH
62945: CALL_OW 272
62949: PUSH
62950: LD_VAR 0 8
62954: PPUSH
62955: LD_INT 1
62957: PPUSH
62958: LD_INT 4
62960: PPUSH
62961: CALL_OW 273
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_VAR 0 7
62974: PPUSH
62975: LD_INT 2
62977: PPUSH
62978: LD_INT 4
62980: PPUSH
62981: CALL_OW 272
62985: PUSH
62986: LD_VAR 0 8
62990: PPUSH
62991: LD_INT 2
62993: PPUSH
62994: LD_INT 4
62996: PPUSH
62997: CALL_OW 273
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_VAR 0 7
63010: PPUSH
63011: LD_INT 3
63013: PPUSH
63014: LD_INT 4
63016: PPUSH
63017: CALL_OW 272
63021: PUSH
63022: LD_VAR 0 8
63026: PPUSH
63027: LD_INT 3
63029: PPUSH
63030: LD_INT 4
63032: PPUSH
63033: CALL_OW 273
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_VAR 0 7
63046: PPUSH
63047: LD_INT 4
63049: PPUSH
63050: LD_INT 4
63052: PPUSH
63053: CALL_OW 272
63057: PUSH
63058: LD_VAR 0 8
63062: PPUSH
63063: LD_INT 4
63065: PPUSH
63066: LD_INT 4
63068: PPUSH
63069: CALL_OW 273
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_VAR 0 7
63082: PPUSH
63083: LD_INT 5
63085: PPUSH
63086: LD_INT 4
63088: PPUSH
63089: CALL_OW 272
63093: PUSH
63094: LD_VAR 0 8
63098: PPUSH
63099: LD_INT 5
63101: PPUSH
63102: LD_INT 4
63104: PPUSH
63105: CALL_OW 273
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: ST_TO_ADDR
// for i = tmp downto 1 do
63122: LD_ADDR_VAR 0 4
63126: PUSH
63127: DOUBLE
63128: LD_VAR 0 6
63132: INC
63133: ST_TO_ADDR
63134: LD_INT 1
63136: PUSH
63137: FOR_DOWNTO
63138: IFFALSE 63239
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63140: LD_VAR 0 6
63144: PUSH
63145: LD_VAR 0 4
63149: ARRAY
63150: PUSH
63151: LD_INT 1
63153: ARRAY
63154: PPUSH
63155: LD_VAR 0 6
63159: PUSH
63160: LD_VAR 0 4
63164: ARRAY
63165: PUSH
63166: LD_INT 2
63168: ARRAY
63169: PPUSH
63170: CALL_OW 488
63174: NOT
63175: PUSH
63176: LD_VAR 0 6
63180: PUSH
63181: LD_VAR 0 4
63185: ARRAY
63186: PUSH
63187: LD_INT 1
63189: ARRAY
63190: PPUSH
63191: LD_VAR 0 6
63195: PUSH
63196: LD_VAR 0 4
63200: ARRAY
63201: PUSH
63202: LD_INT 2
63204: ARRAY
63205: PPUSH
63206: CALL_OW 428
63210: PUSH
63211: LD_INT 0
63213: NONEQUAL
63214: OR
63215: IFFALSE 63237
// tmp := Delete ( tmp , i ) ;
63217: LD_ADDR_VAR 0 6
63221: PUSH
63222: LD_VAR 0 6
63226: PPUSH
63227: LD_VAR 0 4
63231: PPUSH
63232: CALL_OW 3
63236: ST_TO_ADDR
63237: GO 63137
63239: POP
63240: POP
// j := GetClosestHex ( unit , tmp ) ;
63241: LD_ADDR_VAR 0 5
63245: PUSH
63246: LD_VAR 0 1
63250: PPUSH
63251: LD_VAR 0 6
63255: PPUSH
63256: CALL 62543 0 2
63260: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63261: LD_VAR 0 1
63265: PPUSH
63266: LD_VAR 0 5
63270: PUSH
63271: LD_INT 1
63273: ARRAY
63274: PPUSH
63275: LD_VAR 0 5
63279: PUSH
63280: LD_INT 2
63282: ARRAY
63283: PPUSH
63284: CALL_OW 111
// end ;
63288: LD_VAR 0 3
63292: RET
// export function PrepareApemanSoldier ( ) ; begin
63293: LD_INT 0
63295: PPUSH
// uc_nation := 0 ;
63296: LD_ADDR_OWVAR 21
63300: PUSH
63301: LD_INT 0
63303: ST_TO_ADDR
// hc_sex := sex_male ;
63304: LD_ADDR_OWVAR 27
63308: PUSH
63309: LD_INT 1
63311: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63312: LD_ADDR_OWVAR 28
63316: PUSH
63317: LD_INT 15
63319: ST_TO_ADDR
// hc_gallery :=  ;
63320: LD_ADDR_OWVAR 33
63324: PUSH
63325: LD_STRING 
63327: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63328: LD_ADDR_OWVAR 31
63332: PUSH
63333: LD_INT 0
63335: PPUSH
63336: LD_INT 3
63338: PPUSH
63339: CALL_OW 12
63343: PUSH
63344: LD_INT 0
63346: PPUSH
63347: LD_INT 3
63349: PPUSH
63350: CALL_OW 12
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: LD_INT 0
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: ST_TO_ADDR
// end ;
63367: LD_VAR 0 1
63371: RET
// export function PrepareApemanEngineer ( ) ; begin
63372: LD_INT 0
63374: PPUSH
// uc_nation := 0 ;
63375: LD_ADDR_OWVAR 21
63379: PUSH
63380: LD_INT 0
63382: ST_TO_ADDR
// hc_sex := sex_male ;
63383: LD_ADDR_OWVAR 27
63387: PUSH
63388: LD_INT 1
63390: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63391: LD_ADDR_OWVAR 28
63395: PUSH
63396: LD_INT 16
63398: ST_TO_ADDR
// hc_gallery :=  ;
63399: LD_ADDR_OWVAR 33
63403: PUSH
63404: LD_STRING 
63406: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63407: LD_ADDR_OWVAR 31
63411: PUSH
63412: LD_INT 0
63414: PPUSH
63415: LD_INT 3
63417: PPUSH
63418: CALL_OW 12
63422: PUSH
63423: LD_INT 0
63425: PPUSH
63426: LD_INT 3
63428: PPUSH
63429: CALL_OW 12
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: ST_TO_ADDR
// end ;
63446: LD_VAR 0 1
63450: RET
// export function PrepareApeman ( agressivity ) ; begin
63451: LD_INT 0
63453: PPUSH
// uc_side := 0 ;
63454: LD_ADDR_OWVAR 20
63458: PUSH
63459: LD_INT 0
63461: ST_TO_ADDR
// uc_nation := 0 ;
63462: LD_ADDR_OWVAR 21
63466: PUSH
63467: LD_INT 0
63469: ST_TO_ADDR
// hc_sex := sex_male ;
63470: LD_ADDR_OWVAR 27
63474: PUSH
63475: LD_INT 1
63477: ST_TO_ADDR
// hc_class := class_apeman ;
63478: LD_ADDR_OWVAR 28
63482: PUSH
63483: LD_INT 12
63485: ST_TO_ADDR
// hc_gallery :=  ;
63486: LD_ADDR_OWVAR 33
63490: PUSH
63491: LD_STRING 
63493: ST_TO_ADDR
// if agressivity = 0 then
63494: LD_VAR 0 1
63498: PUSH
63499: LD_INT 0
63501: EQUAL
63502: IFFALSE 63514
// hc_agressivity := 0 else
63504: LD_ADDR_OWVAR 35
63508: PUSH
63509: LD_INT 0
63511: ST_TO_ADDR
63512: GO 63535
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63514: LD_ADDR_OWVAR 35
63518: PUSH
63519: LD_VAR 0 1
63523: NEG
63524: PPUSH
63525: LD_VAR 0 1
63529: PPUSH
63530: CALL_OW 12
63534: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63535: LD_ADDR_OWVAR 31
63539: PUSH
63540: LD_INT 0
63542: PPUSH
63543: LD_INT 3
63545: PPUSH
63546: CALL_OW 12
63550: PUSH
63551: LD_INT 0
63553: PPUSH
63554: LD_INT 3
63556: PPUSH
63557: CALL_OW 12
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: LD_INT 0
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: ST_TO_ADDR
// end ;
63574: LD_VAR 0 2
63578: RET
// export function PrepareTiger ( agressivity ) ; begin
63579: LD_INT 0
63581: PPUSH
// uc_side := 0 ;
63582: LD_ADDR_OWVAR 20
63586: PUSH
63587: LD_INT 0
63589: ST_TO_ADDR
// uc_nation := 0 ;
63590: LD_ADDR_OWVAR 21
63594: PUSH
63595: LD_INT 0
63597: ST_TO_ADDR
// hc_class := class_tiger ;
63598: LD_ADDR_OWVAR 28
63602: PUSH
63603: LD_INT 14
63605: ST_TO_ADDR
// hc_gallery :=  ;
63606: LD_ADDR_OWVAR 33
63610: PUSH
63611: LD_STRING 
63613: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63614: LD_ADDR_OWVAR 35
63618: PUSH
63619: LD_VAR 0 1
63623: NEG
63624: PPUSH
63625: LD_VAR 0 1
63629: PPUSH
63630: CALL_OW 12
63634: ST_TO_ADDR
// end ;
63635: LD_VAR 0 2
63639: RET
// export function PrepareEnchidna ( ) ; begin
63640: LD_INT 0
63642: PPUSH
// uc_side := 0 ;
63643: LD_ADDR_OWVAR 20
63647: PUSH
63648: LD_INT 0
63650: ST_TO_ADDR
// uc_nation := 0 ;
63651: LD_ADDR_OWVAR 21
63655: PUSH
63656: LD_INT 0
63658: ST_TO_ADDR
// hc_class := class_baggie ;
63659: LD_ADDR_OWVAR 28
63663: PUSH
63664: LD_INT 13
63666: ST_TO_ADDR
// hc_gallery :=  ;
63667: LD_ADDR_OWVAR 33
63671: PUSH
63672: LD_STRING 
63674: ST_TO_ADDR
// end ;
63675: LD_VAR 0 1
63679: RET
// export function PrepareFrog ( ) ; begin
63680: LD_INT 0
63682: PPUSH
// uc_side := 0 ;
63683: LD_ADDR_OWVAR 20
63687: PUSH
63688: LD_INT 0
63690: ST_TO_ADDR
// uc_nation := 0 ;
63691: LD_ADDR_OWVAR 21
63695: PUSH
63696: LD_INT 0
63698: ST_TO_ADDR
// hc_class := class_frog ;
63699: LD_ADDR_OWVAR 28
63703: PUSH
63704: LD_INT 19
63706: ST_TO_ADDR
// hc_gallery :=  ;
63707: LD_ADDR_OWVAR 33
63711: PUSH
63712: LD_STRING 
63714: ST_TO_ADDR
// end ;
63715: LD_VAR 0 1
63719: RET
// export function PrepareFish ( ) ; begin
63720: LD_INT 0
63722: PPUSH
// uc_side := 0 ;
63723: LD_ADDR_OWVAR 20
63727: PUSH
63728: LD_INT 0
63730: ST_TO_ADDR
// uc_nation := 0 ;
63731: LD_ADDR_OWVAR 21
63735: PUSH
63736: LD_INT 0
63738: ST_TO_ADDR
// hc_class := class_fish ;
63739: LD_ADDR_OWVAR 28
63743: PUSH
63744: LD_INT 20
63746: ST_TO_ADDR
// hc_gallery :=  ;
63747: LD_ADDR_OWVAR 33
63751: PUSH
63752: LD_STRING 
63754: ST_TO_ADDR
// end ;
63755: LD_VAR 0 1
63759: RET
// export function PrepareBird ( ) ; begin
63760: LD_INT 0
63762: PPUSH
// uc_side := 0 ;
63763: LD_ADDR_OWVAR 20
63767: PUSH
63768: LD_INT 0
63770: ST_TO_ADDR
// uc_nation := 0 ;
63771: LD_ADDR_OWVAR 21
63775: PUSH
63776: LD_INT 0
63778: ST_TO_ADDR
// hc_class := class_phororhacos ;
63779: LD_ADDR_OWVAR 28
63783: PUSH
63784: LD_INT 18
63786: ST_TO_ADDR
// hc_gallery :=  ;
63787: LD_ADDR_OWVAR 33
63791: PUSH
63792: LD_STRING 
63794: ST_TO_ADDR
// end ;
63795: LD_VAR 0 1
63799: RET
// export function PrepareHorse ( ) ; begin
63800: LD_INT 0
63802: PPUSH
// uc_side := 0 ;
63803: LD_ADDR_OWVAR 20
63807: PUSH
63808: LD_INT 0
63810: ST_TO_ADDR
// uc_nation := 0 ;
63811: LD_ADDR_OWVAR 21
63815: PUSH
63816: LD_INT 0
63818: ST_TO_ADDR
// hc_class := class_horse ;
63819: LD_ADDR_OWVAR 28
63823: PUSH
63824: LD_INT 21
63826: ST_TO_ADDR
// hc_gallery :=  ;
63827: LD_ADDR_OWVAR 33
63831: PUSH
63832: LD_STRING 
63834: ST_TO_ADDR
// end ;
63835: LD_VAR 0 1
63839: RET
// export function PrepareMastodont ( ) ; begin
63840: LD_INT 0
63842: PPUSH
// uc_side := 0 ;
63843: LD_ADDR_OWVAR 20
63847: PUSH
63848: LD_INT 0
63850: ST_TO_ADDR
// uc_nation := 0 ;
63851: LD_ADDR_OWVAR 21
63855: PUSH
63856: LD_INT 0
63858: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63859: LD_ADDR_OWVAR 37
63863: PUSH
63864: LD_INT 31
63866: ST_TO_ADDR
// vc_control := control_rider ;
63867: LD_ADDR_OWVAR 38
63871: PUSH
63872: LD_INT 4
63874: ST_TO_ADDR
// end ;
63875: LD_VAR 0 1
63879: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63880: LD_INT 0
63882: PPUSH
63883: PPUSH
63884: PPUSH
// uc_side = 0 ;
63885: LD_ADDR_OWVAR 20
63889: PUSH
63890: LD_INT 0
63892: ST_TO_ADDR
// uc_nation = 0 ;
63893: LD_ADDR_OWVAR 21
63897: PUSH
63898: LD_INT 0
63900: ST_TO_ADDR
// InitHc_All ( ) ;
63901: CALL_OW 584
// InitVc ;
63905: CALL_OW 20
// if mastodonts then
63909: LD_VAR 0 6
63913: IFFALSE 63980
// for i = 1 to mastodonts do
63915: LD_ADDR_VAR 0 11
63919: PUSH
63920: DOUBLE
63921: LD_INT 1
63923: DEC
63924: ST_TO_ADDR
63925: LD_VAR 0 6
63929: PUSH
63930: FOR_TO
63931: IFFALSE 63978
// begin vc_chassis := 31 ;
63933: LD_ADDR_OWVAR 37
63937: PUSH
63938: LD_INT 31
63940: ST_TO_ADDR
// vc_control := control_rider ;
63941: LD_ADDR_OWVAR 38
63945: PUSH
63946: LD_INT 4
63948: ST_TO_ADDR
// animal := CreateVehicle ;
63949: LD_ADDR_VAR 0 12
63953: PUSH
63954: CALL_OW 45
63958: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63959: LD_VAR 0 12
63963: PPUSH
63964: LD_VAR 0 8
63968: PPUSH
63969: LD_INT 0
63971: PPUSH
63972: CALL 66108 0 3
// end ;
63976: GO 63930
63978: POP
63979: POP
// if horses then
63980: LD_VAR 0 5
63984: IFFALSE 64051
// for i = 1 to horses do
63986: LD_ADDR_VAR 0 11
63990: PUSH
63991: DOUBLE
63992: LD_INT 1
63994: DEC
63995: ST_TO_ADDR
63996: LD_VAR 0 5
64000: PUSH
64001: FOR_TO
64002: IFFALSE 64049
// begin hc_class := 21 ;
64004: LD_ADDR_OWVAR 28
64008: PUSH
64009: LD_INT 21
64011: ST_TO_ADDR
// hc_gallery :=  ;
64012: LD_ADDR_OWVAR 33
64016: PUSH
64017: LD_STRING 
64019: ST_TO_ADDR
// animal := CreateHuman ;
64020: LD_ADDR_VAR 0 12
64024: PUSH
64025: CALL_OW 44
64029: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64030: LD_VAR 0 12
64034: PPUSH
64035: LD_VAR 0 8
64039: PPUSH
64040: LD_INT 0
64042: PPUSH
64043: CALL 66108 0 3
// end ;
64047: GO 64001
64049: POP
64050: POP
// if birds then
64051: LD_VAR 0 1
64055: IFFALSE 64122
// for i = 1 to birds do
64057: LD_ADDR_VAR 0 11
64061: PUSH
64062: DOUBLE
64063: LD_INT 1
64065: DEC
64066: ST_TO_ADDR
64067: LD_VAR 0 1
64071: PUSH
64072: FOR_TO
64073: IFFALSE 64120
// begin hc_class := 18 ;
64075: LD_ADDR_OWVAR 28
64079: PUSH
64080: LD_INT 18
64082: ST_TO_ADDR
// hc_gallery =  ;
64083: LD_ADDR_OWVAR 33
64087: PUSH
64088: LD_STRING 
64090: ST_TO_ADDR
// animal := CreateHuman ;
64091: LD_ADDR_VAR 0 12
64095: PUSH
64096: CALL_OW 44
64100: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64101: LD_VAR 0 12
64105: PPUSH
64106: LD_VAR 0 8
64110: PPUSH
64111: LD_INT 0
64113: PPUSH
64114: CALL 66108 0 3
// end ;
64118: GO 64072
64120: POP
64121: POP
// if tigers then
64122: LD_VAR 0 2
64126: IFFALSE 64210
// for i = 1 to tigers do
64128: LD_ADDR_VAR 0 11
64132: PUSH
64133: DOUBLE
64134: LD_INT 1
64136: DEC
64137: ST_TO_ADDR
64138: LD_VAR 0 2
64142: PUSH
64143: FOR_TO
64144: IFFALSE 64208
// begin hc_class = class_tiger ;
64146: LD_ADDR_OWVAR 28
64150: PUSH
64151: LD_INT 14
64153: ST_TO_ADDR
// hc_gallery =  ;
64154: LD_ADDR_OWVAR 33
64158: PUSH
64159: LD_STRING 
64161: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64162: LD_ADDR_OWVAR 35
64166: PUSH
64167: LD_INT 7
64169: NEG
64170: PPUSH
64171: LD_INT 7
64173: PPUSH
64174: CALL_OW 12
64178: ST_TO_ADDR
// animal := CreateHuman ;
64179: LD_ADDR_VAR 0 12
64183: PUSH
64184: CALL_OW 44
64188: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64189: LD_VAR 0 12
64193: PPUSH
64194: LD_VAR 0 8
64198: PPUSH
64199: LD_INT 0
64201: PPUSH
64202: CALL 66108 0 3
// end ;
64206: GO 64143
64208: POP
64209: POP
// if apemans then
64210: LD_VAR 0 3
64214: IFFALSE 64337
// for i = 1 to apemans do
64216: LD_ADDR_VAR 0 11
64220: PUSH
64221: DOUBLE
64222: LD_INT 1
64224: DEC
64225: ST_TO_ADDR
64226: LD_VAR 0 3
64230: PUSH
64231: FOR_TO
64232: IFFALSE 64335
// begin hc_class = class_apeman ;
64234: LD_ADDR_OWVAR 28
64238: PUSH
64239: LD_INT 12
64241: ST_TO_ADDR
// hc_gallery =  ;
64242: LD_ADDR_OWVAR 33
64246: PUSH
64247: LD_STRING 
64249: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64250: LD_ADDR_OWVAR 35
64254: PUSH
64255: LD_INT 2
64257: NEG
64258: PPUSH
64259: LD_INT 2
64261: PPUSH
64262: CALL_OW 12
64266: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64267: LD_ADDR_OWVAR 31
64271: PUSH
64272: LD_INT 1
64274: PPUSH
64275: LD_INT 3
64277: PPUSH
64278: CALL_OW 12
64282: PUSH
64283: LD_INT 1
64285: PPUSH
64286: LD_INT 3
64288: PPUSH
64289: CALL_OW 12
64293: PUSH
64294: LD_INT 0
64296: PUSH
64297: LD_INT 0
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: ST_TO_ADDR
// animal := CreateHuman ;
64306: LD_ADDR_VAR 0 12
64310: PUSH
64311: CALL_OW 44
64315: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64316: LD_VAR 0 12
64320: PPUSH
64321: LD_VAR 0 8
64325: PPUSH
64326: LD_INT 0
64328: PPUSH
64329: CALL 66108 0 3
// end ;
64333: GO 64231
64335: POP
64336: POP
// if enchidnas then
64337: LD_VAR 0 4
64341: IFFALSE 64408
// for i = 1 to enchidnas do
64343: LD_ADDR_VAR 0 11
64347: PUSH
64348: DOUBLE
64349: LD_INT 1
64351: DEC
64352: ST_TO_ADDR
64353: LD_VAR 0 4
64357: PUSH
64358: FOR_TO
64359: IFFALSE 64406
// begin hc_class = 13 ;
64361: LD_ADDR_OWVAR 28
64365: PUSH
64366: LD_INT 13
64368: ST_TO_ADDR
// hc_gallery =  ;
64369: LD_ADDR_OWVAR 33
64373: PUSH
64374: LD_STRING 
64376: ST_TO_ADDR
// animal := CreateHuman ;
64377: LD_ADDR_VAR 0 12
64381: PUSH
64382: CALL_OW 44
64386: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64387: LD_VAR 0 12
64391: PPUSH
64392: LD_VAR 0 8
64396: PPUSH
64397: LD_INT 0
64399: PPUSH
64400: CALL 66108 0 3
// end ;
64404: GO 64358
64406: POP
64407: POP
// if fishes then
64408: LD_VAR 0 7
64412: IFFALSE 64479
// for i = 1 to fishes do
64414: LD_ADDR_VAR 0 11
64418: PUSH
64419: DOUBLE
64420: LD_INT 1
64422: DEC
64423: ST_TO_ADDR
64424: LD_VAR 0 7
64428: PUSH
64429: FOR_TO
64430: IFFALSE 64477
// begin hc_class = 20 ;
64432: LD_ADDR_OWVAR 28
64436: PUSH
64437: LD_INT 20
64439: ST_TO_ADDR
// hc_gallery =  ;
64440: LD_ADDR_OWVAR 33
64444: PUSH
64445: LD_STRING 
64447: ST_TO_ADDR
// animal := CreateHuman ;
64448: LD_ADDR_VAR 0 12
64452: PUSH
64453: CALL_OW 44
64457: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64458: LD_VAR 0 12
64462: PPUSH
64463: LD_VAR 0 9
64467: PPUSH
64468: LD_INT 0
64470: PPUSH
64471: CALL 66108 0 3
// end ;
64475: GO 64429
64477: POP
64478: POP
// end ;
64479: LD_VAR 0 10
64483: RET
// export function WantHeal ( sci , unit ) ; begin
64484: LD_INT 0
64486: PPUSH
// if GetTaskList ( sci ) > 0 then
64487: LD_VAR 0 1
64491: PPUSH
64492: CALL_OW 437
64496: PUSH
64497: LD_INT 0
64499: GREATER
64500: IFFALSE 64570
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64502: LD_VAR 0 1
64506: PPUSH
64507: CALL_OW 437
64511: PUSH
64512: LD_INT 1
64514: ARRAY
64515: PUSH
64516: LD_INT 1
64518: ARRAY
64519: PUSH
64520: LD_STRING l
64522: EQUAL
64523: PUSH
64524: LD_VAR 0 1
64528: PPUSH
64529: CALL_OW 437
64533: PUSH
64534: LD_INT 1
64536: ARRAY
64537: PUSH
64538: LD_INT 4
64540: ARRAY
64541: PUSH
64542: LD_VAR 0 2
64546: EQUAL
64547: AND
64548: IFFALSE 64560
// result := true else
64550: LD_ADDR_VAR 0 3
64554: PUSH
64555: LD_INT 1
64557: ST_TO_ADDR
64558: GO 64568
// result := false ;
64560: LD_ADDR_VAR 0 3
64564: PUSH
64565: LD_INT 0
64567: ST_TO_ADDR
// end else
64568: GO 64578
// result := false ;
64570: LD_ADDR_VAR 0 3
64574: PUSH
64575: LD_INT 0
64577: ST_TO_ADDR
// end ;
64578: LD_VAR 0 3
64582: RET
// export function HealTarget ( sci ) ; begin
64583: LD_INT 0
64585: PPUSH
// if not sci then
64586: LD_VAR 0 1
64590: NOT
64591: IFFALSE 64595
// exit ;
64593: GO 64660
// result := 0 ;
64595: LD_ADDR_VAR 0 2
64599: PUSH
64600: LD_INT 0
64602: ST_TO_ADDR
// if GetTaskList ( sci ) then
64603: LD_VAR 0 1
64607: PPUSH
64608: CALL_OW 437
64612: IFFALSE 64660
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64614: LD_VAR 0 1
64618: PPUSH
64619: CALL_OW 437
64623: PUSH
64624: LD_INT 1
64626: ARRAY
64627: PUSH
64628: LD_INT 1
64630: ARRAY
64631: PUSH
64632: LD_STRING l
64634: EQUAL
64635: IFFALSE 64660
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64637: LD_ADDR_VAR 0 2
64641: PUSH
64642: LD_VAR 0 1
64646: PPUSH
64647: CALL_OW 437
64651: PUSH
64652: LD_INT 1
64654: ARRAY
64655: PUSH
64656: LD_INT 4
64658: ARRAY
64659: ST_TO_ADDR
// end ;
64660: LD_VAR 0 2
64664: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64665: LD_INT 0
64667: PPUSH
64668: PPUSH
64669: PPUSH
64670: PPUSH
// if not base_units then
64671: LD_VAR 0 1
64675: NOT
64676: IFFALSE 64680
// exit ;
64678: GO 64767
// result := false ;
64680: LD_ADDR_VAR 0 2
64684: PUSH
64685: LD_INT 0
64687: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64688: LD_ADDR_VAR 0 5
64692: PUSH
64693: LD_VAR 0 1
64697: PPUSH
64698: LD_INT 21
64700: PUSH
64701: LD_INT 3
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PPUSH
64708: CALL_OW 72
64712: ST_TO_ADDR
// if not tmp then
64713: LD_VAR 0 5
64717: NOT
64718: IFFALSE 64722
// exit ;
64720: GO 64767
// for i in tmp do
64722: LD_ADDR_VAR 0 3
64726: PUSH
64727: LD_VAR 0 5
64731: PUSH
64732: FOR_IN
64733: IFFALSE 64765
// begin result := EnemyInRange ( i , 22 ) ;
64735: LD_ADDR_VAR 0 2
64739: PUSH
64740: LD_VAR 0 3
64744: PPUSH
64745: LD_INT 22
64747: PPUSH
64748: CALL 62345 0 2
64752: ST_TO_ADDR
// if result then
64753: LD_VAR 0 2
64757: IFFALSE 64763
// exit ;
64759: POP
64760: POP
64761: GO 64767
// end ;
64763: GO 64732
64765: POP
64766: POP
// end ;
64767: LD_VAR 0 2
64771: RET
// export function FilterByTag ( units , tag ) ; begin
64772: LD_INT 0
64774: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64775: LD_ADDR_VAR 0 3
64779: PUSH
64780: LD_VAR 0 1
64784: PPUSH
64785: LD_INT 120
64787: PUSH
64788: LD_VAR 0 2
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PPUSH
64797: CALL_OW 72
64801: ST_TO_ADDR
// end ;
64802: LD_VAR 0 3
64806: RET
// export function IsDriver ( un ) ; begin
64807: LD_INT 0
64809: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64810: LD_ADDR_VAR 0 2
64814: PUSH
64815: LD_VAR 0 1
64819: PUSH
64820: LD_INT 55
64822: PUSH
64823: EMPTY
64824: LIST
64825: PPUSH
64826: CALL_OW 69
64830: IN
64831: ST_TO_ADDR
// end ;
64832: LD_VAR 0 2
64836: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64837: LD_INT 0
64839: PPUSH
64840: PPUSH
// list := [ ] ;
64841: LD_ADDR_VAR 0 5
64845: PUSH
64846: EMPTY
64847: ST_TO_ADDR
// case d of 0 :
64848: LD_VAR 0 3
64852: PUSH
64853: LD_INT 0
64855: DOUBLE
64856: EQUAL
64857: IFTRUE 64861
64859: GO 64994
64861: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64862: LD_ADDR_VAR 0 5
64866: PUSH
64867: LD_VAR 0 1
64871: PUSH
64872: LD_INT 4
64874: MINUS
64875: PUSH
64876: LD_VAR 0 2
64880: PUSH
64881: LD_INT 4
64883: MINUS
64884: PUSH
64885: LD_INT 2
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: LIST
64892: PUSH
64893: LD_VAR 0 1
64897: PUSH
64898: LD_INT 3
64900: MINUS
64901: PUSH
64902: LD_VAR 0 2
64906: PUSH
64907: LD_INT 1
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: LIST
64914: PUSH
64915: LD_VAR 0 1
64919: PUSH
64920: LD_INT 4
64922: PLUS
64923: PUSH
64924: LD_VAR 0 2
64928: PUSH
64929: LD_INT 4
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: LIST
64936: PUSH
64937: LD_VAR 0 1
64941: PUSH
64942: LD_INT 3
64944: PLUS
64945: PUSH
64946: LD_VAR 0 2
64950: PUSH
64951: LD_INT 3
64953: PLUS
64954: PUSH
64955: LD_INT 5
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: LIST
64962: PUSH
64963: LD_VAR 0 1
64967: PUSH
64968: LD_VAR 0 2
64972: PUSH
64973: LD_INT 4
64975: PLUS
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: LIST
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: ST_TO_ADDR
// end ; 1 :
64992: GO 65692
64994: LD_INT 1
64996: DOUBLE
64997: EQUAL
64998: IFTRUE 65002
65000: GO 65135
65002: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65003: LD_ADDR_VAR 0 5
65007: PUSH
65008: LD_VAR 0 1
65012: PUSH
65013: LD_VAR 0 2
65017: PUSH
65018: LD_INT 4
65020: MINUS
65021: PUSH
65022: LD_INT 3
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: LIST
65029: PUSH
65030: LD_VAR 0 1
65034: PUSH
65035: LD_INT 3
65037: MINUS
65038: PUSH
65039: LD_VAR 0 2
65043: PUSH
65044: LD_INT 3
65046: MINUS
65047: PUSH
65048: LD_INT 2
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: LIST
65055: PUSH
65056: LD_VAR 0 1
65060: PUSH
65061: LD_INT 4
65063: MINUS
65064: PUSH
65065: LD_VAR 0 2
65069: PUSH
65070: LD_INT 1
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: LIST
65077: PUSH
65078: LD_VAR 0 1
65082: PUSH
65083: LD_VAR 0 2
65087: PUSH
65088: LD_INT 3
65090: PLUS
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: LIST
65099: PUSH
65100: LD_VAR 0 1
65104: PUSH
65105: LD_INT 4
65107: PLUS
65108: PUSH
65109: LD_VAR 0 2
65113: PUSH
65114: LD_INT 4
65116: PLUS
65117: PUSH
65118: LD_INT 5
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: LIST
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: ST_TO_ADDR
// end ; 2 :
65133: GO 65692
65135: LD_INT 2
65137: DOUBLE
65138: EQUAL
65139: IFTRUE 65143
65141: GO 65272
65143: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65144: LD_ADDR_VAR 0 5
65148: PUSH
65149: LD_VAR 0 1
65153: PUSH
65154: LD_VAR 0 2
65158: PUSH
65159: LD_INT 3
65161: MINUS
65162: PUSH
65163: LD_INT 3
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: LIST
65170: PUSH
65171: LD_VAR 0 1
65175: PUSH
65176: LD_INT 4
65178: PLUS
65179: PUSH
65180: LD_VAR 0 2
65184: PUSH
65185: LD_INT 4
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: LIST
65192: PUSH
65193: LD_VAR 0 1
65197: PUSH
65198: LD_VAR 0 2
65202: PUSH
65203: LD_INT 4
65205: PLUS
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: LIST
65214: PUSH
65215: LD_VAR 0 1
65219: PUSH
65220: LD_INT 3
65222: MINUS
65223: PUSH
65224: LD_VAR 0 2
65228: PUSH
65229: LD_INT 1
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: LIST
65236: PUSH
65237: LD_VAR 0 1
65241: PUSH
65242: LD_INT 4
65244: MINUS
65245: PUSH
65246: LD_VAR 0 2
65250: PUSH
65251: LD_INT 4
65253: MINUS
65254: PUSH
65255: LD_INT 2
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: LIST
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: ST_TO_ADDR
// end ; 3 :
65270: GO 65692
65272: LD_INT 3
65274: DOUBLE
65275: EQUAL
65276: IFTRUE 65280
65278: GO 65413
65280: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65281: LD_ADDR_VAR 0 5
65285: PUSH
65286: LD_VAR 0 1
65290: PUSH
65291: LD_INT 3
65293: PLUS
65294: PUSH
65295: LD_VAR 0 2
65299: PUSH
65300: LD_INT 4
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: LIST
65307: PUSH
65308: LD_VAR 0 1
65312: PUSH
65313: LD_INT 4
65315: PLUS
65316: PUSH
65317: LD_VAR 0 2
65321: PUSH
65322: LD_INT 4
65324: PLUS
65325: PUSH
65326: LD_INT 5
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: LIST
65333: PUSH
65334: LD_VAR 0 1
65338: PUSH
65339: LD_INT 4
65341: MINUS
65342: PUSH
65343: LD_VAR 0 2
65347: PUSH
65348: LD_INT 1
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: LIST
65355: PUSH
65356: LD_VAR 0 1
65360: PUSH
65361: LD_VAR 0 2
65365: PUSH
65366: LD_INT 4
65368: MINUS
65369: PUSH
65370: LD_INT 3
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: LIST
65377: PUSH
65378: LD_VAR 0 1
65382: PUSH
65383: LD_INT 3
65385: MINUS
65386: PUSH
65387: LD_VAR 0 2
65391: PUSH
65392: LD_INT 3
65394: MINUS
65395: PUSH
65396: LD_INT 2
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: LIST
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: ST_TO_ADDR
// end ; 4 :
65411: GO 65692
65413: LD_INT 4
65415: DOUBLE
65416: EQUAL
65417: IFTRUE 65421
65419: GO 65554
65421: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65422: LD_ADDR_VAR 0 5
65426: PUSH
65427: LD_VAR 0 1
65431: PUSH
65432: LD_VAR 0 2
65436: PUSH
65437: LD_INT 4
65439: PLUS
65440: PUSH
65441: LD_INT 0
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: LIST
65448: PUSH
65449: LD_VAR 0 1
65453: PUSH
65454: LD_INT 3
65456: PLUS
65457: PUSH
65458: LD_VAR 0 2
65462: PUSH
65463: LD_INT 3
65465: PLUS
65466: PUSH
65467: LD_INT 5
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: LIST
65474: PUSH
65475: LD_VAR 0 1
65479: PUSH
65480: LD_INT 4
65482: PLUS
65483: PUSH
65484: LD_VAR 0 2
65488: PUSH
65489: LD_INT 4
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: LIST
65496: PUSH
65497: LD_VAR 0 1
65501: PUSH
65502: LD_VAR 0 2
65506: PUSH
65507: LD_INT 3
65509: MINUS
65510: PUSH
65511: LD_INT 3
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: LIST
65518: PUSH
65519: LD_VAR 0 1
65523: PUSH
65524: LD_INT 4
65526: MINUS
65527: PUSH
65528: LD_VAR 0 2
65532: PUSH
65533: LD_INT 4
65535: MINUS
65536: PUSH
65537: LD_INT 2
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: LIST
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: ST_TO_ADDR
// end ; 5 :
65552: GO 65692
65554: LD_INT 5
65556: DOUBLE
65557: EQUAL
65558: IFTRUE 65562
65560: GO 65691
65562: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65563: LD_ADDR_VAR 0 5
65567: PUSH
65568: LD_VAR 0 1
65572: PUSH
65573: LD_INT 4
65575: MINUS
65576: PUSH
65577: LD_VAR 0 2
65581: PUSH
65582: LD_INT 1
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: LIST
65589: PUSH
65590: LD_VAR 0 1
65594: PUSH
65595: LD_VAR 0 2
65599: PUSH
65600: LD_INT 4
65602: MINUS
65603: PUSH
65604: LD_INT 3
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: LIST
65611: PUSH
65612: LD_VAR 0 1
65616: PUSH
65617: LD_INT 4
65619: PLUS
65620: PUSH
65621: LD_VAR 0 2
65625: PUSH
65626: LD_INT 4
65628: PLUS
65629: PUSH
65630: LD_INT 5
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: LIST
65637: PUSH
65638: LD_VAR 0 1
65642: PUSH
65643: LD_INT 3
65645: PLUS
65646: PUSH
65647: LD_VAR 0 2
65651: PUSH
65652: LD_INT 4
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: LIST
65659: PUSH
65660: LD_VAR 0 1
65664: PUSH
65665: LD_VAR 0 2
65669: PUSH
65670: LD_INT 3
65672: PLUS
65673: PUSH
65674: LD_INT 0
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: LIST
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: ST_TO_ADDR
// end ; end ;
65689: GO 65692
65691: POP
// result := list ;
65692: LD_ADDR_VAR 0 4
65696: PUSH
65697: LD_VAR 0 5
65701: ST_TO_ADDR
// end ;
65702: LD_VAR 0 4
65706: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65707: LD_INT 0
65709: PPUSH
65710: PPUSH
65711: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65712: LD_VAR 0 1
65716: NOT
65717: PUSH
65718: LD_VAR 0 2
65722: PUSH
65723: LD_INT 1
65725: PUSH
65726: LD_INT 2
65728: PUSH
65729: LD_INT 3
65731: PUSH
65732: LD_INT 4
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: IN
65741: NOT
65742: OR
65743: IFFALSE 65747
// exit ;
65745: GO 65830
// tmp := [ ] ;
65747: LD_ADDR_VAR 0 5
65751: PUSH
65752: EMPTY
65753: ST_TO_ADDR
// for i in units do
65754: LD_ADDR_VAR 0 4
65758: PUSH
65759: LD_VAR 0 1
65763: PUSH
65764: FOR_IN
65765: IFFALSE 65799
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65767: LD_ADDR_VAR 0 5
65771: PUSH
65772: LD_VAR 0 5
65776: PPUSH
65777: LD_VAR 0 4
65781: PPUSH
65782: LD_VAR 0 2
65786: PPUSH
65787: CALL_OW 259
65791: PPUSH
65792: CALL 67203 0 2
65796: ST_TO_ADDR
65797: GO 65764
65799: POP
65800: POP
// if not tmp then
65801: LD_VAR 0 5
65805: NOT
65806: IFFALSE 65810
// exit ;
65808: GO 65830
// result := SortListByListDesc ( units , tmp ) ;
65810: LD_ADDR_VAR 0 3
65814: PUSH
65815: LD_VAR 0 1
65819: PPUSH
65820: LD_VAR 0 5
65824: PPUSH
65825: CALL_OW 77
65829: ST_TO_ADDR
// end ;
65830: LD_VAR 0 3
65834: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65835: LD_INT 0
65837: PPUSH
65838: PPUSH
65839: PPUSH
// result := false ;
65840: LD_ADDR_VAR 0 3
65844: PUSH
65845: LD_INT 0
65847: ST_TO_ADDR
// if not building then
65848: LD_VAR 0 2
65852: NOT
65853: IFFALSE 65857
// exit ;
65855: GO 65995
// x := GetX ( building ) ;
65857: LD_ADDR_VAR 0 4
65861: PUSH
65862: LD_VAR 0 2
65866: PPUSH
65867: CALL_OW 250
65871: ST_TO_ADDR
// y := GetY ( building ) ;
65872: LD_ADDR_VAR 0 5
65876: PUSH
65877: LD_VAR 0 2
65881: PPUSH
65882: CALL_OW 251
65886: ST_TO_ADDR
// if not x or not y then
65887: LD_VAR 0 4
65891: NOT
65892: PUSH
65893: LD_VAR 0 5
65897: NOT
65898: OR
65899: IFFALSE 65903
// exit ;
65901: GO 65995
// if GetTaskList ( unit ) then
65903: LD_VAR 0 1
65907: PPUSH
65908: CALL_OW 437
65912: IFFALSE 65995
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65914: LD_STRING e
65916: PUSH
65917: LD_VAR 0 1
65921: PPUSH
65922: CALL_OW 437
65926: PUSH
65927: LD_INT 1
65929: ARRAY
65930: PUSH
65931: LD_INT 1
65933: ARRAY
65934: EQUAL
65935: PUSH
65936: LD_VAR 0 4
65940: PUSH
65941: LD_VAR 0 1
65945: PPUSH
65946: CALL_OW 437
65950: PUSH
65951: LD_INT 1
65953: ARRAY
65954: PUSH
65955: LD_INT 2
65957: ARRAY
65958: EQUAL
65959: AND
65960: PUSH
65961: LD_VAR 0 5
65965: PUSH
65966: LD_VAR 0 1
65970: PPUSH
65971: CALL_OW 437
65975: PUSH
65976: LD_INT 1
65978: ARRAY
65979: PUSH
65980: LD_INT 3
65982: ARRAY
65983: EQUAL
65984: AND
65985: IFFALSE 65995
// result := true end ;
65987: LD_ADDR_VAR 0 3
65991: PUSH
65992: LD_INT 1
65994: ST_TO_ADDR
// end ;
65995: LD_VAR 0 3
65999: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66000: LD_INT 0
66002: PPUSH
// result := false ;
66003: LD_ADDR_VAR 0 4
66007: PUSH
66008: LD_INT 0
66010: ST_TO_ADDR
// if GetTaskList ( unit ) then
66011: LD_VAR 0 1
66015: PPUSH
66016: CALL_OW 437
66020: IFFALSE 66103
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66022: LD_STRING M
66024: PUSH
66025: LD_VAR 0 1
66029: PPUSH
66030: CALL_OW 437
66034: PUSH
66035: LD_INT 1
66037: ARRAY
66038: PUSH
66039: LD_INT 1
66041: ARRAY
66042: EQUAL
66043: PUSH
66044: LD_VAR 0 2
66048: PUSH
66049: LD_VAR 0 1
66053: PPUSH
66054: CALL_OW 437
66058: PUSH
66059: LD_INT 1
66061: ARRAY
66062: PUSH
66063: LD_INT 2
66065: ARRAY
66066: EQUAL
66067: AND
66068: PUSH
66069: LD_VAR 0 3
66073: PUSH
66074: LD_VAR 0 1
66078: PPUSH
66079: CALL_OW 437
66083: PUSH
66084: LD_INT 1
66086: ARRAY
66087: PUSH
66088: LD_INT 3
66090: ARRAY
66091: EQUAL
66092: AND
66093: IFFALSE 66103
// result := true ;
66095: LD_ADDR_VAR 0 4
66099: PUSH
66100: LD_INT 1
66102: ST_TO_ADDR
// end ; end ;
66103: LD_VAR 0 4
66107: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66108: LD_INT 0
66110: PPUSH
66111: PPUSH
66112: PPUSH
66113: PPUSH
// if not unit or not area then
66114: LD_VAR 0 1
66118: NOT
66119: PUSH
66120: LD_VAR 0 2
66124: NOT
66125: OR
66126: IFFALSE 66130
// exit ;
66128: GO 66306
// tmp := AreaToList ( area , i ) ;
66130: LD_ADDR_VAR 0 6
66134: PUSH
66135: LD_VAR 0 2
66139: PPUSH
66140: LD_VAR 0 5
66144: PPUSH
66145: CALL_OW 517
66149: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66150: LD_ADDR_VAR 0 5
66154: PUSH
66155: DOUBLE
66156: LD_INT 1
66158: DEC
66159: ST_TO_ADDR
66160: LD_VAR 0 6
66164: PUSH
66165: LD_INT 1
66167: ARRAY
66168: PUSH
66169: FOR_TO
66170: IFFALSE 66304
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66172: LD_ADDR_VAR 0 7
66176: PUSH
66177: LD_VAR 0 6
66181: PUSH
66182: LD_INT 1
66184: ARRAY
66185: PUSH
66186: LD_VAR 0 5
66190: ARRAY
66191: PUSH
66192: LD_VAR 0 6
66196: PUSH
66197: LD_INT 2
66199: ARRAY
66200: PUSH
66201: LD_VAR 0 5
66205: ARRAY
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66211: LD_INT 92
66213: PUSH
66214: LD_VAR 0 7
66218: PUSH
66219: LD_INT 1
66221: ARRAY
66222: PUSH
66223: LD_VAR 0 7
66227: PUSH
66228: LD_INT 2
66230: ARRAY
66231: PUSH
66232: LD_INT 2
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: PPUSH
66241: CALL_OW 69
66245: PUSH
66246: LD_INT 0
66248: EQUAL
66249: IFFALSE 66302
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66251: LD_VAR 0 1
66255: PPUSH
66256: LD_VAR 0 7
66260: PUSH
66261: LD_INT 1
66263: ARRAY
66264: PPUSH
66265: LD_VAR 0 7
66269: PUSH
66270: LD_INT 2
66272: ARRAY
66273: PPUSH
66274: LD_VAR 0 3
66278: PPUSH
66279: CALL_OW 48
// result := IsPlaced ( unit ) ;
66283: LD_ADDR_VAR 0 4
66287: PUSH
66288: LD_VAR 0 1
66292: PPUSH
66293: CALL_OW 305
66297: ST_TO_ADDR
// exit ;
66298: POP
66299: POP
66300: GO 66306
// end ; end ;
66302: GO 66169
66304: POP
66305: POP
// end ;
66306: LD_VAR 0 4
66310: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66311: LD_INT 0
66313: PPUSH
66314: PPUSH
66315: PPUSH
// if not side or side > 8 then
66316: LD_VAR 0 1
66320: NOT
66321: PUSH
66322: LD_VAR 0 1
66326: PUSH
66327: LD_INT 8
66329: GREATER
66330: OR
66331: IFFALSE 66335
// exit ;
66333: GO 66522
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66335: LD_ADDR_VAR 0 4
66339: PUSH
66340: LD_INT 22
66342: PUSH
66343: LD_VAR 0 1
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 21
66354: PUSH
66355: LD_INT 3
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PPUSH
66366: CALL_OW 69
66370: ST_TO_ADDR
// if not tmp then
66371: LD_VAR 0 4
66375: NOT
66376: IFFALSE 66380
// exit ;
66378: GO 66522
// enable_addtolog := true ;
66380: LD_ADDR_OWVAR 81
66384: PUSH
66385: LD_INT 1
66387: ST_TO_ADDR
// AddToLog ( [ ) ;
66388: LD_STRING [
66390: PPUSH
66391: CALL_OW 561
// for i in tmp do
66395: LD_ADDR_VAR 0 3
66399: PUSH
66400: LD_VAR 0 4
66404: PUSH
66405: FOR_IN
66406: IFFALSE 66513
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66408: LD_STRING [
66410: PUSH
66411: LD_VAR 0 3
66415: PPUSH
66416: CALL_OW 266
66420: STR
66421: PUSH
66422: LD_STRING , 
66424: STR
66425: PUSH
66426: LD_VAR 0 3
66430: PPUSH
66431: CALL_OW 250
66435: STR
66436: PUSH
66437: LD_STRING , 
66439: STR
66440: PUSH
66441: LD_VAR 0 3
66445: PPUSH
66446: CALL_OW 251
66450: STR
66451: PUSH
66452: LD_STRING , 
66454: STR
66455: PUSH
66456: LD_VAR 0 3
66460: PPUSH
66461: CALL_OW 254
66465: STR
66466: PUSH
66467: LD_STRING , 
66469: STR
66470: PUSH
66471: LD_VAR 0 3
66475: PPUSH
66476: LD_INT 1
66478: PPUSH
66479: CALL_OW 268
66483: STR
66484: PUSH
66485: LD_STRING , 
66487: STR
66488: PUSH
66489: LD_VAR 0 3
66493: PPUSH
66494: LD_INT 2
66496: PPUSH
66497: CALL_OW 268
66501: STR
66502: PUSH
66503: LD_STRING ],
66505: STR
66506: PPUSH
66507: CALL_OW 561
// end ;
66511: GO 66405
66513: POP
66514: POP
// AddToLog ( ]; ) ;
66515: LD_STRING ];
66517: PPUSH
66518: CALL_OW 561
// end ;
66522: LD_VAR 0 2
66526: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66527: LD_INT 0
66529: PPUSH
66530: PPUSH
66531: PPUSH
66532: PPUSH
66533: PPUSH
// if not area or not rate or not max then
66534: LD_VAR 0 1
66538: NOT
66539: PUSH
66540: LD_VAR 0 2
66544: NOT
66545: OR
66546: PUSH
66547: LD_VAR 0 4
66551: NOT
66552: OR
66553: IFFALSE 66557
// exit ;
66555: GO 66746
// while 1 do
66557: LD_INT 1
66559: IFFALSE 66746
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66561: LD_ADDR_VAR 0 9
66565: PUSH
66566: LD_VAR 0 1
66570: PPUSH
66571: LD_INT 1
66573: PPUSH
66574: CALL_OW 287
66578: PUSH
66579: LD_INT 10
66581: MUL
66582: ST_TO_ADDR
// r := rate / 10 ;
66583: LD_ADDR_VAR 0 7
66587: PUSH
66588: LD_VAR 0 2
66592: PUSH
66593: LD_INT 10
66595: DIVREAL
66596: ST_TO_ADDR
// time := 1 1$00 ;
66597: LD_ADDR_VAR 0 8
66601: PUSH
66602: LD_INT 2100
66604: ST_TO_ADDR
// if amount < min then
66605: LD_VAR 0 9
66609: PUSH
66610: LD_VAR 0 3
66614: LESS
66615: IFFALSE 66633
// r := r * 2 else
66617: LD_ADDR_VAR 0 7
66621: PUSH
66622: LD_VAR 0 7
66626: PUSH
66627: LD_INT 2
66629: MUL
66630: ST_TO_ADDR
66631: GO 66659
// if amount > max then
66633: LD_VAR 0 9
66637: PUSH
66638: LD_VAR 0 4
66642: GREATER
66643: IFFALSE 66659
// r := r / 2 ;
66645: LD_ADDR_VAR 0 7
66649: PUSH
66650: LD_VAR 0 7
66654: PUSH
66655: LD_INT 2
66657: DIVREAL
66658: ST_TO_ADDR
// time := time / r ;
66659: LD_ADDR_VAR 0 8
66663: PUSH
66664: LD_VAR 0 8
66668: PUSH
66669: LD_VAR 0 7
66673: DIVREAL
66674: ST_TO_ADDR
// if time < 0 then
66675: LD_VAR 0 8
66679: PUSH
66680: LD_INT 0
66682: LESS
66683: IFFALSE 66700
// time := time * - 1 ;
66685: LD_ADDR_VAR 0 8
66689: PUSH
66690: LD_VAR 0 8
66694: PUSH
66695: LD_INT 1
66697: NEG
66698: MUL
66699: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66700: LD_VAR 0 8
66704: PUSH
66705: LD_INT 35
66707: PPUSH
66708: LD_INT 875
66710: PPUSH
66711: CALL_OW 12
66715: PLUS
66716: PPUSH
66717: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66721: LD_INT 1
66723: PPUSH
66724: LD_INT 5
66726: PPUSH
66727: CALL_OW 12
66731: PPUSH
66732: LD_VAR 0 1
66736: PPUSH
66737: LD_INT 1
66739: PPUSH
66740: CALL_OW 55
// end ;
66744: GO 66557
// end ;
66746: LD_VAR 0 5
66750: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66751: LD_INT 0
66753: PPUSH
66754: PPUSH
66755: PPUSH
66756: PPUSH
66757: PPUSH
66758: PPUSH
66759: PPUSH
66760: PPUSH
// if not turrets or not factories then
66761: LD_VAR 0 1
66765: NOT
66766: PUSH
66767: LD_VAR 0 2
66771: NOT
66772: OR
66773: IFFALSE 66777
// exit ;
66775: GO 67084
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66777: LD_ADDR_VAR 0 10
66781: PUSH
66782: LD_INT 5
66784: PUSH
66785: LD_INT 6
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 2
66794: PUSH
66795: LD_INT 4
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 3
66804: PUSH
66805: LD_INT 5
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 24
66819: PUSH
66820: LD_INT 25
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 23
66829: PUSH
66830: LD_INT 27
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 42
66843: PUSH
66844: LD_INT 43
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 44
66853: PUSH
66854: LD_INT 46
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 45
66863: PUSH
66864: LD_INT 47
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: LIST
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: LIST
66880: ST_TO_ADDR
// result := [ ] ;
66881: LD_ADDR_VAR 0 3
66885: PUSH
66886: EMPTY
66887: ST_TO_ADDR
// for i in turrets do
66888: LD_ADDR_VAR 0 4
66892: PUSH
66893: LD_VAR 0 1
66897: PUSH
66898: FOR_IN
66899: IFFALSE 67082
// begin nat := GetNation ( i ) ;
66901: LD_ADDR_VAR 0 7
66905: PUSH
66906: LD_VAR 0 4
66910: PPUSH
66911: CALL_OW 248
66915: ST_TO_ADDR
// weapon := 0 ;
66916: LD_ADDR_VAR 0 8
66920: PUSH
66921: LD_INT 0
66923: ST_TO_ADDR
// if not nat then
66924: LD_VAR 0 7
66928: NOT
66929: IFFALSE 66933
// continue ;
66931: GO 66898
// for j in list [ nat ] do
66933: LD_ADDR_VAR 0 5
66937: PUSH
66938: LD_VAR 0 10
66942: PUSH
66943: LD_VAR 0 7
66947: ARRAY
66948: PUSH
66949: FOR_IN
66950: IFFALSE 66991
// if GetBWeapon ( i ) = j [ 1 ] then
66952: LD_VAR 0 4
66956: PPUSH
66957: CALL_OW 269
66961: PUSH
66962: LD_VAR 0 5
66966: PUSH
66967: LD_INT 1
66969: ARRAY
66970: EQUAL
66971: IFFALSE 66989
// begin weapon := j [ 2 ] ;
66973: LD_ADDR_VAR 0 8
66977: PUSH
66978: LD_VAR 0 5
66982: PUSH
66983: LD_INT 2
66985: ARRAY
66986: ST_TO_ADDR
// break ;
66987: GO 66991
// end ;
66989: GO 66949
66991: POP
66992: POP
// if not weapon then
66993: LD_VAR 0 8
66997: NOT
66998: IFFALSE 67002
// continue ;
67000: GO 66898
// for k in factories do
67002: LD_ADDR_VAR 0 6
67006: PUSH
67007: LD_VAR 0 2
67011: PUSH
67012: FOR_IN
67013: IFFALSE 67078
// begin weapons := AvailableWeaponList ( k ) ;
67015: LD_ADDR_VAR 0 9
67019: PUSH
67020: LD_VAR 0 6
67024: PPUSH
67025: CALL_OW 478
67029: ST_TO_ADDR
// if not weapons then
67030: LD_VAR 0 9
67034: NOT
67035: IFFALSE 67039
// continue ;
67037: GO 67012
// if weapon in weapons then
67039: LD_VAR 0 8
67043: PUSH
67044: LD_VAR 0 9
67048: IN
67049: IFFALSE 67076
// begin result := [ i , weapon ] ;
67051: LD_ADDR_VAR 0 3
67055: PUSH
67056: LD_VAR 0 4
67060: PUSH
67061: LD_VAR 0 8
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: ST_TO_ADDR
// exit ;
67070: POP
67071: POP
67072: POP
67073: POP
67074: GO 67084
// end ; end ;
67076: GO 67012
67078: POP
67079: POP
// end ;
67080: GO 66898
67082: POP
67083: POP
// end ;
67084: LD_VAR 0 3
67088: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67089: LD_INT 0
67091: PPUSH
// if not side or side > 8 then
67092: LD_VAR 0 3
67096: NOT
67097: PUSH
67098: LD_VAR 0 3
67102: PUSH
67103: LD_INT 8
67105: GREATER
67106: OR
67107: IFFALSE 67111
// exit ;
67109: GO 67170
// if not range then
67111: LD_VAR 0 4
67115: NOT
67116: IFFALSE 67127
// range := - 12 ;
67118: LD_ADDR_VAR 0 4
67122: PUSH
67123: LD_INT 12
67125: NEG
67126: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67127: LD_VAR 0 1
67131: PPUSH
67132: LD_VAR 0 2
67136: PPUSH
67137: LD_VAR 0 3
67141: PPUSH
67142: LD_VAR 0 4
67146: PPUSH
67147: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67151: LD_VAR 0 1
67155: PPUSH
67156: LD_VAR 0 2
67160: PPUSH
67161: LD_VAR 0 3
67165: PPUSH
67166: CALL_OW 331
// end ;
67170: LD_VAR 0 5
67174: RET
// export function Video ( mode ) ; begin
67175: LD_INT 0
67177: PPUSH
// ingame_video = mode ;
67178: LD_ADDR_OWVAR 52
67182: PUSH
67183: LD_VAR 0 1
67187: ST_TO_ADDR
// interface_hidden = mode ;
67188: LD_ADDR_OWVAR 54
67192: PUSH
67193: LD_VAR 0 1
67197: ST_TO_ADDR
// end ;
67198: LD_VAR 0 2
67202: RET
// export function Join ( array , element ) ; begin
67203: LD_INT 0
67205: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67206: LD_ADDR_VAR 0 3
67210: PUSH
67211: LD_VAR 0 1
67215: PPUSH
67216: LD_VAR 0 1
67220: PUSH
67221: LD_INT 1
67223: PLUS
67224: PPUSH
67225: LD_VAR 0 2
67229: PPUSH
67230: CALL_OW 1
67234: ST_TO_ADDR
// end ;
67235: LD_VAR 0 3
67239: RET
// export function JoinUnion ( array , element ) ; begin
67240: LD_INT 0
67242: PPUSH
// result := array union element ;
67243: LD_ADDR_VAR 0 3
67247: PUSH
67248: LD_VAR 0 1
67252: PUSH
67253: LD_VAR 0 2
67257: UNION
67258: ST_TO_ADDR
// end ;
67259: LD_VAR 0 3
67263: RET
// export function GetBehemoths ( side ) ; begin
67264: LD_INT 0
67266: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67267: LD_ADDR_VAR 0 2
67271: PUSH
67272: LD_INT 22
67274: PUSH
67275: LD_VAR 0 1
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 31
67286: PUSH
67287: LD_INT 25
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PPUSH
67298: CALL_OW 69
67302: ST_TO_ADDR
// end ;
67303: LD_VAR 0 2
67307: RET
// export function Shuffle ( array ) ; var i , index ; begin
67308: LD_INT 0
67310: PPUSH
67311: PPUSH
67312: PPUSH
// result := [ ] ;
67313: LD_ADDR_VAR 0 2
67317: PUSH
67318: EMPTY
67319: ST_TO_ADDR
// if not array then
67320: LD_VAR 0 1
67324: NOT
67325: IFFALSE 67329
// exit ;
67327: GO 67428
// Randomize ;
67329: CALL_OW 10
// for i = array downto 1 do
67333: LD_ADDR_VAR 0 3
67337: PUSH
67338: DOUBLE
67339: LD_VAR 0 1
67343: INC
67344: ST_TO_ADDR
67345: LD_INT 1
67347: PUSH
67348: FOR_DOWNTO
67349: IFFALSE 67426
// begin index := rand ( 1 , array ) ;
67351: LD_ADDR_VAR 0 4
67355: PUSH
67356: LD_INT 1
67358: PPUSH
67359: LD_VAR 0 1
67363: PPUSH
67364: CALL_OW 12
67368: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67369: LD_ADDR_VAR 0 2
67373: PUSH
67374: LD_VAR 0 2
67378: PPUSH
67379: LD_VAR 0 2
67383: PUSH
67384: LD_INT 1
67386: PLUS
67387: PPUSH
67388: LD_VAR 0 1
67392: PUSH
67393: LD_VAR 0 4
67397: ARRAY
67398: PPUSH
67399: CALL_OW 2
67403: ST_TO_ADDR
// array := Delete ( array , index ) ;
67404: LD_ADDR_VAR 0 1
67408: PUSH
67409: LD_VAR 0 1
67413: PPUSH
67414: LD_VAR 0 4
67418: PPUSH
67419: CALL_OW 3
67423: ST_TO_ADDR
// end ;
67424: GO 67348
67426: POP
67427: POP
// end ;
67428: LD_VAR 0 2
67432: RET
// export function GetBaseMaterials ( base ) ; begin
67433: LD_INT 0
67435: PPUSH
// result := [ 0 , 0 , 0 ] ;
67436: LD_ADDR_VAR 0 2
67440: PUSH
67441: LD_INT 0
67443: PUSH
67444: LD_INT 0
67446: PUSH
67447: LD_INT 0
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: LIST
67454: ST_TO_ADDR
// if not base then
67455: LD_VAR 0 1
67459: NOT
67460: IFFALSE 67464
// exit ;
67462: GO 67513
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67464: LD_ADDR_VAR 0 2
67468: PUSH
67469: LD_VAR 0 1
67473: PPUSH
67474: LD_INT 1
67476: PPUSH
67477: CALL_OW 275
67481: PUSH
67482: LD_VAR 0 1
67486: PPUSH
67487: LD_INT 2
67489: PPUSH
67490: CALL_OW 275
67494: PUSH
67495: LD_VAR 0 1
67499: PPUSH
67500: LD_INT 3
67502: PPUSH
67503: CALL_OW 275
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: LIST
67512: ST_TO_ADDR
// end ;
67513: LD_VAR 0 2
67517: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67518: LD_INT 0
67520: PPUSH
67521: PPUSH
// result := array ;
67522: LD_ADDR_VAR 0 3
67526: PUSH
67527: LD_VAR 0 1
67531: ST_TO_ADDR
// if size >= result then
67532: LD_VAR 0 2
67536: PUSH
67537: LD_VAR 0 3
67541: GREATEREQUAL
67542: IFFALSE 67546
// exit ;
67544: GO 67596
// if size then
67546: LD_VAR 0 2
67550: IFFALSE 67596
// for i := array downto size do
67552: LD_ADDR_VAR 0 4
67556: PUSH
67557: DOUBLE
67558: LD_VAR 0 1
67562: INC
67563: ST_TO_ADDR
67564: LD_VAR 0 2
67568: PUSH
67569: FOR_DOWNTO
67570: IFFALSE 67594
// result := Delete ( result , result ) ;
67572: LD_ADDR_VAR 0 3
67576: PUSH
67577: LD_VAR 0 3
67581: PPUSH
67582: LD_VAR 0 3
67586: PPUSH
67587: CALL_OW 3
67591: ST_TO_ADDR
67592: GO 67569
67594: POP
67595: POP
// end ;
67596: LD_VAR 0 3
67600: RET
// export function ComExit ( unit ) ; var tmp ; begin
67601: LD_INT 0
67603: PPUSH
67604: PPUSH
// if not IsInUnit ( unit ) then
67605: LD_VAR 0 1
67609: PPUSH
67610: CALL_OW 310
67614: NOT
67615: IFFALSE 67619
// exit ;
67617: GO 67679
// tmp := IsInUnit ( unit ) ;
67619: LD_ADDR_VAR 0 3
67623: PUSH
67624: LD_VAR 0 1
67628: PPUSH
67629: CALL_OW 310
67633: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67634: LD_VAR 0 3
67638: PPUSH
67639: CALL_OW 247
67643: PUSH
67644: LD_INT 2
67646: EQUAL
67647: IFFALSE 67660
// ComExitVehicle ( unit ) else
67649: LD_VAR 0 1
67653: PPUSH
67654: CALL_OW 121
67658: GO 67669
// ComExitBuilding ( unit ) ;
67660: LD_VAR 0 1
67664: PPUSH
67665: CALL_OW 122
// result := tmp ;
67669: LD_ADDR_VAR 0 2
67673: PUSH
67674: LD_VAR 0 3
67678: ST_TO_ADDR
// end ;
67679: LD_VAR 0 2
67683: RET
// export function ComExitAll ( units ) ; var i ; begin
67684: LD_INT 0
67686: PPUSH
67687: PPUSH
// if not units then
67688: LD_VAR 0 1
67692: NOT
67693: IFFALSE 67697
// exit ;
67695: GO 67723
// for i in units do
67697: LD_ADDR_VAR 0 3
67701: PUSH
67702: LD_VAR 0 1
67706: PUSH
67707: FOR_IN
67708: IFFALSE 67721
// ComExit ( i ) ;
67710: LD_VAR 0 3
67714: PPUSH
67715: CALL 67601 0 1
67719: GO 67707
67721: POP
67722: POP
// end ;
67723: LD_VAR 0 2
67727: RET
// export function ResetHc ; begin
67728: LD_INT 0
67730: PPUSH
// InitHc ;
67731: CALL_OW 19
// hc_importance := 0 ;
67735: LD_ADDR_OWVAR 32
67739: PUSH
67740: LD_INT 0
67742: ST_TO_ADDR
// end ;
67743: LD_VAR 0 1
67747: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67748: LD_INT 0
67750: PPUSH
67751: PPUSH
67752: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67753: LD_ADDR_VAR 0 6
67757: PUSH
67758: LD_VAR 0 1
67762: PUSH
67763: LD_VAR 0 3
67767: PLUS
67768: PUSH
67769: LD_INT 2
67771: DIV
67772: ST_TO_ADDR
// if _x < 0 then
67773: LD_VAR 0 6
67777: PUSH
67778: LD_INT 0
67780: LESS
67781: IFFALSE 67798
// _x := _x * - 1 ;
67783: LD_ADDR_VAR 0 6
67787: PUSH
67788: LD_VAR 0 6
67792: PUSH
67793: LD_INT 1
67795: NEG
67796: MUL
67797: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67798: LD_ADDR_VAR 0 7
67802: PUSH
67803: LD_VAR 0 2
67807: PUSH
67808: LD_VAR 0 4
67812: PLUS
67813: PUSH
67814: LD_INT 2
67816: DIV
67817: ST_TO_ADDR
// if _y < 0 then
67818: LD_VAR 0 7
67822: PUSH
67823: LD_INT 0
67825: LESS
67826: IFFALSE 67843
// _y := _y * - 1 ;
67828: LD_ADDR_VAR 0 7
67832: PUSH
67833: LD_VAR 0 7
67837: PUSH
67838: LD_INT 1
67840: NEG
67841: MUL
67842: ST_TO_ADDR
// result := [ _x , _y ] ;
67843: LD_ADDR_VAR 0 5
67847: PUSH
67848: LD_VAR 0 6
67852: PUSH
67853: LD_VAR 0 7
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: ST_TO_ADDR
// end ;
67862: LD_VAR 0 5
67866: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67867: LD_INT 0
67869: PPUSH
67870: PPUSH
67871: PPUSH
67872: PPUSH
// task := GetTaskList ( unit ) ;
67873: LD_ADDR_VAR 0 7
67877: PUSH
67878: LD_VAR 0 1
67882: PPUSH
67883: CALL_OW 437
67887: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67888: LD_VAR 0 7
67892: NOT
67893: PUSH
67894: LD_VAR 0 1
67898: PPUSH
67899: LD_VAR 0 2
67903: PPUSH
67904: CALL_OW 308
67908: NOT
67909: AND
67910: IFFALSE 67914
// exit ;
67912: GO 68032
// if IsInArea ( unit , area ) then
67914: LD_VAR 0 1
67918: PPUSH
67919: LD_VAR 0 2
67923: PPUSH
67924: CALL_OW 308
67928: IFFALSE 67946
// begin ComMoveToArea ( unit , goAway ) ;
67930: LD_VAR 0 1
67934: PPUSH
67935: LD_VAR 0 3
67939: PPUSH
67940: CALL_OW 113
// exit ;
67944: GO 68032
// end ; if task [ 1 ] [ 1 ] <> M then
67946: LD_VAR 0 7
67950: PUSH
67951: LD_INT 1
67953: ARRAY
67954: PUSH
67955: LD_INT 1
67957: ARRAY
67958: PUSH
67959: LD_STRING M
67961: NONEQUAL
67962: IFFALSE 67966
// exit ;
67964: GO 68032
// x := task [ 1 ] [ 2 ] ;
67966: LD_ADDR_VAR 0 5
67970: PUSH
67971: LD_VAR 0 7
67975: PUSH
67976: LD_INT 1
67978: ARRAY
67979: PUSH
67980: LD_INT 2
67982: ARRAY
67983: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67984: LD_ADDR_VAR 0 6
67988: PUSH
67989: LD_VAR 0 7
67993: PUSH
67994: LD_INT 1
67996: ARRAY
67997: PUSH
67998: LD_INT 3
68000: ARRAY
68001: ST_TO_ADDR
// if InArea ( x , y , area ) then
68002: LD_VAR 0 5
68006: PPUSH
68007: LD_VAR 0 6
68011: PPUSH
68012: LD_VAR 0 2
68016: PPUSH
68017: CALL_OW 309
68021: IFFALSE 68032
// ComStop ( unit ) ;
68023: LD_VAR 0 1
68027: PPUSH
68028: CALL_OW 141
// end ;
68032: LD_VAR 0 4
68036: RET
// export function Abs ( value ) ; begin
68037: LD_INT 0
68039: PPUSH
// result := value ;
68040: LD_ADDR_VAR 0 2
68044: PUSH
68045: LD_VAR 0 1
68049: ST_TO_ADDR
// if value < 0 then
68050: LD_VAR 0 1
68054: PUSH
68055: LD_INT 0
68057: LESS
68058: IFFALSE 68075
// result := value * - 1 ;
68060: LD_ADDR_VAR 0 2
68064: PUSH
68065: LD_VAR 0 1
68069: PUSH
68070: LD_INT 1
68072: NEG
68073: MUL
68074: ST_TO_ADDR
// end ;
68075: LD_VAR 0 2
68079: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68080: LD_INT 0
68082: PPUSH
68083: PPUSH
68084: PPUSH
68085: PPUSH
68086: PPUSH
68087: PPUSH
68088: PPUSH
68089: PPUSH
// if not unit or not building then
68090: LD_VAR 0 1
68094: NOT
68095: PUSH
68096: LD_VAR 0 2
68100: NOT
68101: OR
68102: IFFALSE 68106
// exit ;
68104: GO 68332
// x := GetX ( building ) ;
68106: LD_ADDR_VAR 0 4
68110: PUSH
68111: LD_VAR 0 2
68115: PPUSH
68116: CALL_OW 250
68120: ST_TO_ADDR
// y := GetY ( building ) ;
68121: LD_ADDR_VAR 0 6
68125: PUSH
68126: LD_VAR 0 2
68130: PPUSH
68131: CALL_OW 251
68135: ST_TO_ADDR
// d := GetDir ( building ) ;
68136: LD_ADDR_VAR 0 8
68140: PUSH
68141: LD_VAR 0 2
68145: PPUSH
68146: CALL_OW 254
68150: ST_TO_ADDR
// r := 4 ;
68151: LD_ADDR_VAR 0 9
68155: PUSH
68156: LD_INT 4
68158: ST_TO_ADDR
// for i := 1 to 5 do
68159: LD_ADDR_VAR 0 10
68163: PUSH
68164: DOUBLE
68165: LD_INT 1
68167: DEC
68168: ST_TO_ADDR
68169: LD_INT 5
68171: PUSH
68172: FOR_TO
68173: IFFALSE 68330
// begin _x := ShiftX ( x , d , r + i ) ;
68175: LD_ADDR_VAR 0 5
68179: PUSH
68180: LD_VAR 0 4
68184: PPUSH
68185: LD_VAR 0 8
68189: PPUSH
68190: LD_VAR 0 9
68194: PUSH
68195: LD_VAR 0 10
68199: PLUS
68200: PPUSH
68201: CALL_OW 272
68205: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68206: LD_ADDR_VAR 0 7
68210: PUSH
68211: LD_VAR 0 6
68215: PPUSH
68216: LD_VAR 0 8
68220: PPUSH
68221: LD_VAR 0 9
68225: PUSH
68226: LD_VAR 0 10
68230: PLUS
68231: PPUSH
68232: CALL_OW 273
68236: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68237: LD_VAR 0 5
68241: PPUSH
68242: LD_VAR 0 7
68246: PPUSH
68247: CALL_OW 488
68251: PUSH
68252: LD_VAR 0 5
68256: PPUSH
68257: LD_VAR 0 7
68261: PPUSH
68262: CALL_OW 428
68266: PPUSH
68267: CALL_OW 247
68271: PUSH
68272: LD_INT 3
68274: PUSH
68275: LD_INT 2
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: IN
68282: NOT
68283: AND
68284: IFFALSE 68328
// begin ComMoveXY ( unit , _x , _y ) ;
68286: LD_VAR 0 1
68290: PPUSH
68291: LD_VAR 0 5
68295: PPUSH
68296: LD_VAR 0 7
68300: PPUSH
68301: CALL_OW 111
// result := [ _x , _y ] ;
68305: LD_ADDR_VAR 0 3
68309: PUSH
68310: LD_VAR 0 5
68314: PUSH
68315: LD_VAR 0 7
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: ST_TO_ADDR
// exit ;
68324: POP
68325: POP
68326: GO 68332
// end ; end ;
68328: GO 68172
68330: POP
68331: POP
// end ;
68332: LD_VAR 0 3
68336: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68337: LD_INT 0
68339: PPUSH
68340: PPUSH
68341: PPUSH
// result := 0 ;
68342: LD_ADDR_VAR 0 3
68346: PUSH
68347: LD_INT 0
68349: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68350: LD_VAR 0 1
68354: PUSH
68355: LD_INT 0
68357: LESS
68358: PUSH
68359: LD_VAR 0 1
68363: PUSH
68364: LD_INT 8
68366: GREATER
68367: OR
68368: PUSH
68369: LD_VAR 0 2
68373: PUSH
68374: LD_INT 0
68376: LESS
68377: OR
68378: PUSH
68379: LD_VAR 0 2
68383: PUSH
68384: LD_INT 8
68386: GREATER
68387: OR
68388: IFFALSE 68392
// exit ;
68390: GO 68467
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68392: LD_ADDR_VAR 0 4
68396: PUSH
68397: LD_INT 22
68399: PUSH
68400: LD_VAR 0 2
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PPUSH
68409: CALL_OW 69
68413: PUSH
68414: FOR_IN
68415: IFFALSE 68465
// begin un := UnitShoot ( i ) ;
68417: LD_ADDR_VAR 0 5
68421: PUSH
68422: LD_VAR 0 4
68426: PPUSH
68427: CALL_OW 504
68431: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68432: LD_VAR 0 5
68436: PPUSH
68437: CALL_OW 255
68441: PUSH
68442: LD_VAR 0 1
68446: EQUAL
68447: IFFALSE 68463
// begin result := un ;
68449: LD_ADDR_VAR 0 3
68453: PUSH
68454: LD_VAR 0 5
68458: ST_TO_ADDR
// exit ;
68459: POP
68460: POP
68461: GO 68467
// end ; end ;
68463: GO 68414
68465: POP
68466: POP
// end ;
68467: LD_VAR 0 3
68471: RET
// export function GetCargoBay ( units ) ; begin
68472: LD_INT 0
68474: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68475: LD_ADDR_VAR 0 2
68479: PUSH
68480: LD_VAR 0 1
68484: PPUSH
68485: LD_INT 2
68487: PUSH
68488: LD_INT 34
68490: PUSH
68491: LD_INT 12
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 34
68500: PUSH
68501: LD_INT 51
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 34
68510: PUSH
68511: LD_INT 32
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 34
68520: PUSH
68521: LD_INT 89
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: PPUSH
68535: CALL_OW 72
68539: ST_TO_ADDR
// end ;
68540: LD_VAR 0 2
68544: RET
// export function Negate ( value ) ; begin
68545: LD_INT 0
68547: PPUSH
// result := not value ;
68548: LD_ADDR_VAR 0 2
68552: PUSH
68553: LD_VAR 0 1
68557: NOT
68558: ST_TO_ADDR
// end ;
68559: LD_VAR 0 2
68563: RET
// export function Inc ( value ) ; begin
68564: LD_INT 0
68566: PPUSH
// result := value + 1 ;
68567: LD_ADDR_VAR 0 2
68571: PUSH
68572: LD_VAR 0 1
68576: PUSH
68577: LD_INT 1
68579: PLUS
68580: ST_TO_ADDR
// end ;
68581: LD_VAR 0 2
68585: RET
// export function Dec ( value ) ; begin
68586: LD_INT 0
68588: PPUSH
// result := value - 1 ;
68589: LD_ADDR_VAR 0 2
68593: PUSH
68594: LD_VAR 0 1
68598: PUSH
68599: LD_INT 1
68601: MINUS
68602: ST_TO_ADDR
// end ;
68603: LD_VAR 0 2
68607: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68608: LD_INT 0
68610: PPUSH
68611: PPUSH
68612: PPUSH
68613: PPUSH
68614: PPUSH
68615: PPUSH
68616: PPUSH
68617: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68618: LD_VAR 0 1
68622: PPUSH
68623: LD_VAR 0 2
68627: PPUSH
68628: CALL_OW 488
68632: NOT
68633: PUSH
68634: LD_VAR 0 3
68638: PPUSH
68639: LD_VAR 0 4
68643: PPUSH
68644: CALL_OW 488
68648: NOT
68649: OR
68650: IFFALSE 68663
// begin result := - 1 ;
68652: LD_ADDR_VAR 0 5
68656: PUSH
68657: LD_INT 1
68659: NEG
68660: ST_TO_ADDR
// exit ;
68661: GO 68898
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68663: LD_ADDR_VAR 0 12
68667: PUSH
68668: LD_VAR 0 1
68672: PPUSH
68673: LD_VAR 0 2
68677: PPUSH
68678: LD_VAR 0 3
68682: PPUSH
68683: LD_VAR 0 4
68687: PPUSH
68688: CALL 67748 0 4
68692: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68693: LD_ADDR_VAR 0 11
68697: PUSH
68698: LD_VAR 0 1
68702: PPUSH
68703: LD_VAR 0 2
68707: PPUSH
68708: LD_VAR 0 12
68712: PUSH
68713: LD_INT 1
68715: ARRAY
68716: PPUSH
68717: LD_VAR 0 12
68721: PUSH
68722: LD_INT 2
68724: ARRAY
68725: PPUSH
68726: CALL_OW 298
68730: ST_TO_ADDR
// distance := 9999 ;
68731: LD_ADDR_VAR 0 10
68735: PUSH
68736: LD_INT 9999
68738: ST_TO_ADDR
// for i := 0 to 5 do
68739: LD_ADDR_VAR 0 6
68743: PUSH
68744: DOUBLE
68745: LD_INT 0
68747: DEC
68748: ST_TO_ADDR
68749: LD_INT 5
68751: PUSH
68752: FOR_TO
68753: IFFALSE 68896
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68755: LD_ADDR_VAR 0 7
68759: PUSH
68760: LD_VAR 0 1
68764: PPUSH
68765: LD_VAR 0 6
68769: PPUSH
68770: LD_VAR 0 11
68774: PPUSH
68775: CALL_OW 272
68779: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68780: LD_ADDR_VAR 0 8
68784: PUSH
68785: LD_VAR 0 2
68789: PPUSH
68790: LD_VAR 0 6
68794: PPUSH
68795: LD_VAR 0 11
68799: PPUSH
68800: CALL_OW 273
68804: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68805: LD_VAR 0 7
68809: PPUSH
68810: LD_VAR 0 8
68814: PPUSH
68815: CALL_OW 488
68819: NOT
68820: IFFALSE 68824
// continue ;
68822: GO 68752
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68824: LD_ADDR_VAR 0 9
68828: PUSH
68829: LD_VAR 0 12
68833: PUSH
68834: LD_INT 1
68836: ARRAY
68837: PPUSH
68838: LD_VAR 0 12
68842: PUSH
68843: LD_INT 2
68845: ARRAY
68846: PPUSH
68847: LD_VAR 0 7
68851: PPUSH
68852: LD_VAR 0 8
68856: PPUSH
68857: CALL_OW 298
68861: ST_TO_ADDR
// if tmp < distance then
68862: LD_VAR 0 9
68866: PUSH
68867: LD_VAR 0 10
68871: LESS
68872: IFFALSE 68894
// begin result := i ;
68874: LD_ADDR_VAR 0 5
68878: PUSH
68879: LD_VAR 0 6
68883: ST_TO_ADDR
// distance := tmp ;
68884: LD_ADDR_VAR 0 10
68888: PUSH
68889: LD_VAR 0 9
68893: ST_TO_ADDR
// end ; end ;
68894: GO 68752
68896: POP
68897: POP
// end ;
68898: LD_VAR 0 5
68902: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68903: LD_INT 0
68905: PPUSH
68906: PPUSH
// if not driver or not IsInUnit ( driver ) then
68907: LD_VAR 0 1
68911: NOT
68912: PUSH
68913: LD_VAR 0 1
68917: PPUSH
68918: CALL_OW 310
68922: NOT
68923: OR
68924: IFFALSE 68928
// exit ;
68926: GO 69018
// vehicle := IsInUnit ( driver ) ;
68928: LD_ADDR_VAR 0 3
68932: PUSH
68933: LD_VAR 0 1
68937: PPUSH
68938: CALL_OW 310
68942: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68943: LD_VAR 0 1
68947: PPUSH
68948: LD_STRING \
68950: PUSH
68951: LD_INT 0
68953: PUSH
68954: LD_INT 0
68956: PUSH
68957: LD_INT 0
68959: PUSH
68960: LD_INT 0
68962: PUSH
68963: LD_INT 0
68965: PUSH
68966: LD_INT 0
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: PUSH
68978: LD_STRING E
68980: PUSH
68981: LD_INT 0
68983: PUSH
68984: LD_INT 0
68986: PUSH
68987: LD_VAR 0 3
68991: PUSH
68992: LD_INT 0
68994: PUSH
68995: LD_INT 0
68997: PUSH
68998: LD_INT 0
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PPUSH
69014: CALL_OW 446
// end ;
69018: LD_VAR 0 2
69022: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69023: LD_INT 0
69025: PPUSH
69026: PPUSH
// if not driver or not IsInUnit ( driver ) then
69027: LD_VAR 0 1
69031: NOT
69032: PUSH
69033: LD_VAR 0 1
69037: PPUSH
69038: CALL_OW 310
69042: NOT
69043: OR
69044: IFFALSE 69048
// exit ;
69046: GO 69138
// vehicle := IsInUnit ( driver ) ;
69048: LD_ADDR_VAR 0 3
69052: PUSH
69053: LD_VAR 0 1
69057: PPUSH
69058: CALL_OW 310
69062: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69063: LD_VAR 0 1
69067: PPUSH
69068: LD_STRING \
69070: PUSH
69071: LD_INT 0
69073: PUSH
69074: LD_INT 0
69076: PUSH
69077: LD_INT 0
69079: PUSH
69080: LD_INT 0
69082: PUSH
69083: LD_INT 0
69085: PUSH
69086: LD_INT 0
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: PUSH
69098: LD_STRING E
69100: PUSH
69101: LD_INT 0
69103: PUSH
69104: LD_INT 0
69106: PUSH
69107: LD_VAR 0 3
69111: PUSH
69112: LD_INT 0
69114: PUSH
69115: LD_INT 0
69117: PUSH
69118: LD_INT 0
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PPUSH
69134: CALL_OW 447
// end ;
69138: LD_VAR 0 2
69142: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69143: LD_INT 0
69145: PPUSH
69146: PPUSH
69147: PPUSH
// tmp := [ ] ;
69148: LD_ADDR_VAR 0 5
69152: PUSH
69153: EMPTY
69154: ST_TO_ADDR
// for i in units do
69155: LD_ADDR_VAR 0 4
69159: PUSH
69160: LD_VAR 0 1
69164: PUSH
69165: FOR_IN
69166: IFFALSE 69204
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69168: LD_ADDR_VAR 0 5
69172: PUSH
69173: LD_VAR 0 5
69177: PPUSH
69178: LD_VAR 0 5
69182: PUSH
69183: LD_INT 1
69185: PLUS
69186: PPUSH
69187: LD_VAR 0 4
69191: PPUSH
69192: CALL_OW 256
69196: PPUSH
69197: CALL_OW 2
69201: ST_TO_ADDR
69202: GO 69165
69204: POP
69205: POP
// if not tmp then
69206: LD_VAR 0 5
69210: NOT
69211: IFFALSE 69215
// exit ;
69213: GO 69263
// if asc then
69215: LD_VAR 0 2
69219: IFFALSE 69243
// result := SortListByListAsc ( units , tmp ) else
69221: LD_ADDR_VAR 0 3
69225: PUSH
69226: LD_VAR 0 1
69230: PPUSH
69231: LD_VAR 0 5
69235: PPUSH
69236: CALL_OW 76
69240: ST_TO_ADDR
69241: GO 69263
// result := SortListByListDesc ( units , tmp ) ;
69243: LD_ADDR_VAR 0 3
69247: PUSH
69248: LD_VAR 0 1
69252: PPUSH
69253: LD_VAR 0 5
69257: PPUSH
69258: CALL_OW 77
69262: ST_TO_ADDR
// end ;
69263: LD_VAR 0 3
69267: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69268: LD_INT 0
69270: PPUSH
69271: PPUSH
// task := GetTaskList ( mech ) ;
69272: LD_ADDR_VAR 0 4
69276: PUSH
69277: LD_VAR 0 1
69281: PPUSH
69282: CALL_OW 437
69286: ST_TO_ADDR
// if not task then
69287: LD_VAR 0 4
69291: NOT
69292: IFFALSE 69296
// exit ;
69294: GO 69338
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69296: LD_ADDR_VAR 0 3
69300: PUSH
69301: LD_VAR 0 4
69305: PUSH
69306: LD_INT 1
69308: ARRAY
69309: PUSH
69310: LD_INT 1
69312: ARRAY
69313: PUSH
69314: LD_STRING r
69316: EQUAL
69317: PUSH
69318: LD_VAR 0 4
69322: PUSH
69323: LD_INT 1
69325: ARRAY
69326: PUSH
69327: LD_INT 4
69329: ARRAY
69330: PUSH
69331: LD_VAR 0 2
69335: EQUAL
69336: AND
69337: ST_TO_ADDR
// end ;
69338: LD_VAR 0 3
69342: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69343: LD_INT 0
69345: PPUSH
// SetDir ( unit , d ) ;
69346: LD_VAR 0 1
69350: PPUSH
69351: LD_VAR 0 4
69355: PPUSH
69356: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69360: LD_VAR 0 1
69364: PPUSH
69365: LD_VAR 0 2
69369: PPUSH
69370: LD_VAR 0 3
69374: PPUSH
69375: LD_VAR 0 5
69379: PPUSH
69380: CALL_OW 48
// end ;
69384: LD_VAR 0 6
69388: RET
// export function ToNaturalNumber ( number ) ; begin
69389: LD_INT 0
69391: PPUSH
// result := number div 1 ;
69392: LD_ADDR_VAR 0 2
69396: PUSH
69397: LD_VAR 0 1
69401: PUSH
69402: LD_INT 1
69404: DIV
69405: ST_TO_ADDR
// if number < 0 then
69406: LD_VAR 0 1
69410: PUSH
69411: LD_INT 0
69413: LESS
69414: IFFALSE 69424
// result := 0 ;
69416: LD_ADDR_VAR 0 2
69420: PUSH
69421: LD_INT 0
69423: ST_TO_ADDR
// end ;
69424: LD_VAR 0 2
69428: RET
// export function SortByClass ( units , class ) ; var un ; begin
69429: LD_INT 0
69431: PPUSH
69432: PPUSH
// if not units or not class then
69433: LD_VAR 0 1
69437: NOT
69438: PUSH
69439: LD_VAR 0 2
69443: NOT
69444: OR
69445: IFFALSE 69449
// exit ;
69447: GO 69544
// result := [ ] ;
69449: LD_ADDR_VAR 0 3
69453: PUSH
69454: EMPTY
69455: ST_TO_ADDR
// for un in units do
69456: LD_ADDR_VAR 0 4
69460: PUSH
69461: LD_VAR 0 1
69465: PUSH
69466: FOR_IN
69467: IFFALSE 69542
// if GetClass ( un ) = class then
69469: LD_VAR 0 4
69473: PPUSH
69474: CALL_OW 257
69478: PUSH
69479: LD_VAR 0 2
69483: EQUAL
69484: IFFALSE 69511
// result := Insert ( result , 1 , un ) else
69486: LD_ADDR_VAR 0 3
69490: PUSH
69491: LD_VAR 0 3
69495: PPUSH
69496: LD_INT 1
69498: PPUSH
69499: LD_VAR 0 4
69503: PPUSH
69504: CALL_OW 2
69508: ST_TO_ADDR
69509: GO 69540
// result := Replace ( result , result + 1 , un ) ;
69511: LD_ADDR_VAR 0 3
69515: PUSH
69516: LD_VAR 0 3
69520: PPUSH
69521: LD_VAR 0 3
69525: PUSH
69526: LD_INT 1
69528: PLUS
69529: PPUSH
69530: LD_VAR 0 4
69534: PPUSH
69535: CALL_OW 1
69539: ST_TO_ADDR
69540: GO 69466
69542: POP
69543: POP
// end ;
69544: LD_VAR 0 3
69548: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69549: LD_INT 0
69551: PPUSH
69552: PPUSH
69553: PPUSH
69554: PPUSH
69555: PPUSH
69556: PPUSH
69557: PPUSH
// result := [ ] ;
69558: LD_ADDR_VAR 0 4
69562: PUSH
69563: EMPTY
69564: ST_TO_ADDR
// if x - r < 0 then
69565: LD_VAR 0 1
69569: PUSH
69570: LD_VAR 0 3
69574: MINUS
69575: PUSH
69576: LD_INT 0
69578: LESS
69579: IFFALSE 69591
// min_x := 0 else
69581: LD_ADDR_VAR 0 8
69585: PUSH
69586: LD_INT 0
69588: ST_TO_ADDR
69589: GO 69607
// min_x := x - r ;
69591: LD_ADDR_VAR 0 8
69595: PUSH
69596: LD_VAR 0 1
69600: PUSH
69601: LD_VAR 0 3
69605: MINUS
69606: ST_TO_ADDR
// if y - r < 0 then
69607: LD_VAR 0 2
69611: PUSH
69612: LD_VAR 0 3
69616: MINUS
69617: PUSH
69618: LD_INT 0
69620: LESS
69621: IFFALSE 69633
// min_y := 0 else
69623: LD_ADDR_VAR 0 7
69627: PUSH
69628: LD_INT 0
69630: ST_TO_ADDR
69631: GO 69649
// min_y := y - r ;
69633: LD_ADDR_VAR 0 7
69637: PUSH
69638: LD_VAR 0 2
69642: PUSH
69643: LD_VAR 0 3
69647: MINUS
69648: ST_TO_ADDR
// max_x := x + r ;
69649: LD_ADDR_VAR 0 9
69653: PUSH
69654: LD_VAR 0 1
69658: PUSH
69659: LD_VAR 0 3
69663: PLUS
69664: ST_TO_ADDR
// max_y := y + r ;
69665: LD_ADDR_VAR 0 10
69669: PUSH
69670: LD_VAR 0 2
69674: PUSH
69675: LD_VAR 0 3
69679: PLUS
69680: ST_TO_ADDR
// for _x = min_x to max_x do
69681: LD_ADDR_VAR 0 5
69685: PUSH
69686: DOUBLE
69687: LD_VAR 0 8
69691: DEC
69692: ST_TO_ADDR
69693: LD_VAR 0 9
69697: PUSH
69698: FOR_TO
69699: IFFALSE 69800
// for _y = min_y to max_y do
69701: LD_ADDR_VAR 0 6
69705: PUSH
69706: DOUBLE
69707: LD_VAR 0 7
69711: DEC
69712: ST_TO_ADDR
69713: LD_VAR 0 10
69717: PUSH
69718: FOR_TO
69719: IFFALSE 69796
// begin if not ValidHex ( _x , _y ) then
69721: LD_VAR 0 5
69725: PPUSH
69726: LD_VAR 0 6
69730: PPUSH
69731: CALL_OW 488
69735: NOT
69736: IFFALSE 69740
// continue ;
69738: GO 69718
// if GetResourceTypeXY ( _x , _y ) then
69740: LD_VAR 0 5
69744: PPUSH
69745: LD_VAR 0 6
69749: PPUSH
69750: CALL_OW 283
69754: IFFALSE 69794
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69756: LD_ADDR_VAR 0 4
69760: PUSH
69761: LD_VAR 0 4
69765: PPUSH
69766: LD_VAR 0 4
69770: PUSH
69771: LD_INT 1
69773: PLUS
69774: PPUSH
69775: LD_VAR 0 5
69779: PUSH
69780: LD_VAR 0 6
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PPUSH
69789: CALL_OW 1
69793: ST_TO_ADDR
// end ;
69794: GO 69718
69796: POP
69797: POP
69798: GO 69698
69800: POP
69801: POP
// end ;
69802: LD_VAR 0 4
69806: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69807: LD_INT 0
69809: PPUSH
69810: PPUSH
69811: PPUSH
69812: PPUSH
69813: PPUSH
69814: PPUSH
69815: PPUSH
69816: PPUSH
// if not units then
69817: LD_VAR 0 1
69821: NOT
69822: IFFALSE 69826
// exit ;
69824: GO 70354
// result := UnitFilter ( units , [ f_ok ] ) ;
69826: LD_ADDR_VAR 0 3
69830: PUSH
69831: LD_VAR 0 1
69835: PPUSH
69836: LD_INT 50
69838: PUSH
69839: EMPTY
69840: LIST
69841: PPUSH
69842: CALL_OW 72
69846: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69847: LD_ADDR_VAR 0 8
69851: PUSH
69852: LD_VAR 0 1
69856: PUSH
69857: LD_INT 1
69859: ARRAY
69860: PPUSH
69861: CALL_OW 255
69865: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69866: LD_ADDR_VAR 0 10
69870: PUSH
69871: LD_INT 29
69873: PUSH
69874: LD_INT 91
69876: PUSH
69877: LD_INT 49
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: LIST
69884: ST_TO_ADDR
// if not result then
69885: LD_VAR 0 3
69889: NOT
69890: IFFALSE 69894
// exit ;
69892: GO 70354
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69894: LD_ADDR_VAR 0 5
69898: PUSH
69899: LD_INT 81
69901: PUSH
69902: LD_VAR 0 8
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PPUSH
69911: CALL_OW 69
69915: ST_TO_ADDR
// for i in result do
69916: LD_ADDR_VAR 0 4
69920: PUSH
69921: LD_VAR 0 3
69925: PUSH
69926: FOR_IN
69927: IFFALSE 70352
// begin tag := GetTag ( i ) + 1 ;
69929: LD_ADDR_VAR 0 9
69933: PUSH
69934: LD_VAR 0 4
69938: PPUSH
69939: CALL_OW 110
69943: PUSH
69944: LD_INT 1
69946: PLUS
69947: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
69948: LD_ADDR_VAR 0 7
69952: PUSH
69953: LD_VAR 0 4
69957: PPUSH
69958: CALL_OW 250
69962: PPUSH
69963: LD_VAR 0 4
69967: PPUSH
69968: CALL_OW 251
69972: PPUSH
69973: LD_INT 4
69975: PPUSH
69976: CALL 69549 0 3
69980: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
69981: LD_VAR 0 4
69985: PPUSH
69986: CALL_OW 247
69990: PUSH
69991: LD_INT 2
69993: EQUAL
69994: PUSH
69995: LD_VAR 0 7
69999: PUSH
70000: LD_INT 2
70002: GREATER
70003: AND
70004: PUSH
70005: LD_VAR 0 4
70009: PPUSH
70010: CALL_OW 264
70014: PUSH
70015: LD_VAR 0 10
70019: IN
70020: NOT
70021: AND
70022: IFFALSE 70061
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70024: LD_VAR 0 4
70028: PPUSH
70029: LD_VAR 0 7
70033: PUSH
70034: LD_INT 1
70036: ARRAY
70037: PUSH
70038: LD_INT 1
70040: ARRAY
70041: PPUSH
70042: LD_VAR 0 7
70046: PUSH
70047: LD_INT 1
70049: ARRAY
70050: PUSH
70051: LD_INT 2
70053: ARRAY
70054: PPUSH
70055: CALL_OW 116
70059: GO 70350
// if path > tag then
70061: LD_VAR 0 2
70065: PUSH
70066: LD_VAR 0 9
70070: GREATER
70071: IFFALSE 70279
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70073: LD_ADDR_VAR 0 6
70077: PUSH
70078: LD_VAR 0 5
70082: PPUSH
70083: LD_INT 91
70085: PUSH
70086: LD_VAR 0 4
70090: PUSH
70091: LD_INT 8
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: LIST
70098: PPUSH
70099: CALL_OW 72
70103: ST_TO_ADDR
// if nearEnemy then
70104: LD_VAR 0 6
70108: IFFALSE 70177
// begin if GetWeapon ( i ) = ru_time_lapser then
70110: LD_VAR 0 4
70114: PPUSH
70115: CALL_OW 264
70119: PUSH
70120: LD_INT 49
70122: EQUAL
70123: IFFALSE 70151
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70125: LD_VAR 0 4
70129: PPUSH
70130: LD_VAR 0 6
70134: PPUSH
70135: LD_VAR 0 4
70139: PPUSH
70140: CALL_OW 74
70144: PPUSH
70145: CALL_OW 112
70149: GO 70175
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70151: LD_VAR 0 4
70155: PPUSH
70156: LD_VAR 0 6
70160: PPUSH
70161: LD_VAR 0 4
70165: PPUSH
70166: CALL_OW 74
70170: PPUSH
70171: CALL 71425 0 2
// end else
70175: GO 70277
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70177: LD_VAR 0 4
70181: PPUSH
70182: LD_VAR 0 2
70186: PUSH
70187: LD_VAR 0 9
70191: ARRAY
70192: PUSH
70193: LD_INT 1
70195: ARRAY
70196: PPUSH
70197: LD_VAR 0 2
70201: PUSH
70202: LD_VAR 0 9
70206: ARRAY
70207: PUSH
70208: LD_INT 2
70210: ARRAY
70211: PPUSH
70212: CALL_OW 297
70216: PUSH
70217: LD_INT 6
70219: GREATER
70220: IFFALSE 70263
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70222: LD_VAR 0 4
70226: PPUSH
70227: LD_VAR 0 2
70231: PUSH
70232: LD_VAR 0 9
70236: ARRAY
70237: PUSH
70238: LD_INT 1
70240: ARRAY
70241: PPUSH
70242: LD_VAR 0 2
70246: PUSH
70247: LD_VAR 0 9
70251: ARRAY
70252: PUSH
70253: LD_INT 2
70255: ARRAY
70256: PPUSH
70257: CALL_OW 114
70261: GO 70277
// SetTag ( i , tag ) ;
70263: LD_VAR 0 4
70267: PPUSH
70268: LD_VAR 0 9
70272: PPUSH
70273: CALL_OW 109
// end else
70277: GO 70350
// if enemy then
70279: LD_VAR 0 5
70283: IFFALSE 70350
// begin if GetWeapon ( i ) = ru_time_lapser then
70285: LD_VAR 0 4
70289: PPUSH
70290: CALL_OW 264
70294: PUSH
70295: LD_INT 49
70297: EQUAL
70298: IFFALSE 70326
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70300: LD_VAR 0 4
70304: PPUSH
70305: LD_VAR 0 5
70309: PPUSH
70310: LD_VAR 0 4
70314: PPUSH
70315: CALL_OW 74
70319: PPUSH
70320: CALL_OW 112
70324: GO 70350
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70326: LD_VAR 0 4
70330: PPUSH
70331: LD_VAR 0 5
70335: PPUSH
70336: LD_VAR 0 4
70340: PPUSH
70341: CALL_OW 74
70345: PPUSH
70346: CALL 71425 0 2
// end ; end ;
70350: GO 69926
70352: POP
70353: POP
// end ;
70354: LD_VAR 0 3
70358: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70359: LD_INT 0
70361: PPUSH
70362: PPUSH
70363: PPUSH
// if not unit or IsInUnit ( unit ) then
70364: LD_VAR 0 1
70368: NOT
70369: PUSH
70370: LD_VAR 0 1
70374: PPUSH
70375: CALL_OW 310
70379: OR
70380: IFFALSE 70384
// exit ;
70382: GO 70475
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70384: LD_ADDR_VAR 0 4
70388: PUSH
70389: LD_VAR 0 1
70393: PPUSH
70394: CALL_OW 250
70398: PPUSH
70399: LD_VAR 0 2
70403: PPUSH
70404: LD_INT 1
70406: PPUSH
70407: CALL_OW 272
70411: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70412: LD_ADDR_VAR 0 5
70416: PUSH
70417: LD_VAR 0 1
70421: PPUSH
70422: CALL_OW 251
70426: PPUSH
70427: LD_VAR 0 2
70431: PPUSH
70432: LD_INT 1
70434: PPUSH
70435: CALL_OW 273
70439: ST_TO_ADDR
// if ValidHex ( x , y ) then
70440: LD_VAR 0 4
70444: PPUSH
70445: LD_VAR 0 5
70449: PPUSH
70450: CALL_OW 488
70454: IFFALSE 70475
// ComTurnXY ( unit , x , y ) ;
70456: LD_VAR 0 1
70460: PPUSH
70461: LD_VAR 0 4
70465: PPUSH
70466: LD_VAR 0 5
70470: PPUSH
70471: CALL_OW 118
// end ;
70475: LD_VAR 0 3
70479: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70480: LD_INT 0
70482: PPUSH
70483: PPUSH
// result := false ;
70484: LD_ADDR_VAR 0 3
70488: PUSH
70489: LD_INT 0
70491: ST_TO_ADDR
// if not units then
70492: LD_VAR 0 2
70496: NOT
70497: IFFALSE 70501
// exit ;
70499: GO 70546
// for i in units do
70501: LD_ADDR_VAR 0 4
70505: PUSH
70506: LD_VAR 0 2
70510: PUSH
70511: FOR_IN
70512: IFFALSE 70544
// if See ( side , i ) then
70514: LD_VAR 0 1
70518: PPUSH
70519: LD_VAR 0 4
70523: PPUSH
70524: CALL_OW 292
70528: IFFALSE 70542
// begin result := true ;
70530: LD_ADDR_VAR 0 3
70534: PUSH
70535: LD_INT 1
70537: ST_TO_ADDR
// exit ;
70538: POP
70539: POP
70540: GO 70546
// end ;
70542: GO 70511
70544: POP
70545: POP
// end ;
70546: LD_VAR 0 3
70550: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70551: LD_INT 0
70553: PPUSH
70554: PPUSH
70555: PPUSH
70556: PPUSH
// if not unit or not points then
70557: LD_VAR 0 1
70561: NOT
70562: PUSH
70563: LD_VAR 0 2
70567: NOT
70568: OR
70569: IFFALSE 70573
// exit ;
70571: GO 70663
// dist := 99999 ;
70573: LD_ADDR_VAR 0 5
70577: PUSH
70578: LD_INT 99999
70580: ST_TO_ADDR
// for i in points do
70581: LD_ADDR_VAR 0 4
70585: PUSH
70586: LD_VAR 0 2
70590: PUSH
70591: FOR_IN
70592: IFFALSE 70661
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70594: LD_ADDR_VAR 0 6
70598: PUSH
70599: LD_VAR 0 1
70603: PPUSH
70604: LD_VAR 0 4
70608: PUSH
70609: LD_INT 1
70611: ARRAY
70612: PPUSH
70613: LD_VAR 0 4
70617: PUSH
70618: LD_INT 2
70620: ARRAY
70621: PPUSH
70622: CALL_OW 297
70626: ST_TO_ADDR
// if tmpDist < dist then
70627: LD_VAR 0 6
70631: PUSH
70632: LD_VAR 0 5
70636: LESS
70637: IFFALSE 70659
// begin result := i ;
70639: LD_ADDR_VAR 0 3
70643: PUSH
70644: LD_VAR 0 4
70648: ST_TO_ADDR
// dist := tmpDist ;
70649: LD_ADDR_VAR 0 5
70653: PUSH
70654: LD_VAR 0 6
70658: ST_TO_ADDR
// end ; end ;
70659: GO 70591
70661: POP
70662: POP
// end ;
70663: LD_VAR 0 3
70667: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70668: LD_INT 0
70670: PPUSH
// uc_side := side ;
70671: LD_ADDR_OWVAR 20
70675: PUSH
70676: LD_VAR 0 1
70680: ST_TO_ADDR
// uc_nation := 3 ;
70681: LD_ADDR_OWVAR 21
70685: PUSH
70686: LD_INT 3
70688: ST_TO_ADDR
// vc_chassis := 25 ;
70689: LD_ADDR_OWVAR 37
70693: PUSH
70694: LD_INT 25
70696: ST_TO_ADDR
// vc_engine := engine_siberite ;
70697: LD_ADDR_OWVAR 39
70701: PUSH
70702: LD_INT 3
70704: ST_TO_ADDR
// vc_control := control_computer ;
70705: LD_ADDR_OWVAR 38
70709: PUSH
70710: LD_INT 3
70712: ST_TO_ADDR
// vc_weapon := 59 ;
70713: LD_ADDR_OWVAR 40
70717: PUSH
70718: LD_INT 59
70720: ST_TO_ADDR
// result := CreateVehicle ;
70721: LD_ADDR_VAR 0 5
70725: PUSH
70726: CALL_OW 45
70730: ST_TO_ADDR
// SetDir ( result , d ) ;
70731: LD_VAR 0 5
70735: PPUSH
70736: LD_VAR 0 4
70740: PPUSH
70741: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70745: LD_VAR 0 5
70749: PPUSH
70750: LD_VAR 0 2
70754: PPUSH
70755: LD_VAR 0 3
70759: PPUSH
70760: LD_INT 0
70762: PPUSH
70763: CALL_OW 48
// end ;
70767: LD_VAR 0 5
70771: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70772: LD_INT 0
70774: PPUSH
70775: PPUSH
70776: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70777: LD_ADDR_VAR 0 2
70781: PUSH
70782: LD_INT 0
70784: PUSH
70785: LD_INT 0
70787: PUSH
70788: LD_INT 0
70790: PUSH
70791: LD_INT 0
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70800: LD_VAR 0 1
70804: NOT
70805: PUSH
70806: LD_VAR 0 1
70810: PPUSH
70811: CALL_OW 264
70815: PUSH
70816: LD_INT 12
70818: PUSH
70819: LD_INT 51
70821: PUSH
70822: LD_INT 32
70824: PUSH
70825: LD_INT 89
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: IN
70834: NOT
70835: OR
70836: IFFALSE 70840
// exit ;
70838: GO 70938
// for i := 1 to 3 do
70840: LD_ADDR_VAR 0 3
70844: PUSH
70845: DOUBLE
70846: LD_INT 1
70848: DEC
70849: ST_TO_ADDR
70850: LD_INT 3
70852: PUSH
70853: FOR_TO
70854: IFFALSE 70936
// begin tmp := GetCargo ( cargo , i ) ;
70856: LD_ADDR_VAR 0 4
70860: PUSH
70861: LD_VAR 0 1
70865: PPUSH
70866: LD_VAR 0 3
70870: PPUSH
70871: CALL_OW 289
70875: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70876: LD_ADDR_VAR 0 2
70880: PUSH
70881: LD_VAR 0 2
70885: PPUSH
70886: LD_VAR 0 3
70890: PPUSH
70891: LD_VAR 0 4
70895: PPUSH
70896: CALL_OW 1
70900: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70901: LD_ADDR_VAR 0 2
70905: PUSH
70906: LD_VAR 0 2
70910: PPUSH
70911: LD_INT 4
70913: PPUSH
70914: LD_VAR 0 2
70918: PUSH
70919: LD_INT 4
70921: ARRAY
70922: PUSH
70923: LD_VAR 0 4
70927: PLUS
70928: PPUSH
70929: CALL_OW 1
70933: ST_TO_ADDR
// end ;
70934: GO 70853
70936: POP
70937: POP
// end ;
70938: LD_VAR 0 2
70942: RET
// export function Length ( array ) ; begin
70943: LD_INT 0
70945: PPUSH
// result := array + 0 ;
70946: LD_ADDR_VAR 0 2
70950: PUSH
70951: LD_VAR 0 1
70955: PUSH
70956: LD_INT 0
70958: PLUS
70959: ST_TO_ADDR
// end ;
70960: LD_VAR 0 2
70964: RET
// export function PrepareArray ( array ) ; begin
70965: LD_INT 0
70967: PPUSH
// result := array diff 0 ;
70968: LD_ADDR_VAR 0 2
70972: PUSH
70973: LD_VAR 0 1
70977: PUSH
70978: LD_INT 0
70980: DIFF
70981: ST_TO_ADDR
// if not result [ 1 ] then
70982: LD_VAR 0 2
70986: PUSH
70987: LD_INT 1
70989: ARRAY
70990: NOT
70991: IFFALSE 71011
// result := Delete ( result , 1 ) ;
70993: LD_ADDR_VAR 0 2
70997: PUSH
70998: LD_VAR 0 2
71002: PPUSH
71003: LD_INT 1
71005: PPUSH
71006: CALL_OW 3
71010: ST_TO_ADDR
// end ;
71011: LD_VAR 0 2
71015: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71016: LD_INT 0
71018: PPUSH
71019: PPUSH
71020: PPUSH
71021: PPUSH
// sibRocketRange := 25 ;
71022: LD_ADDR_VAR 0 6
71026: PUSH
71027: LD_INT 25
71029: ST_TO_ADDR
// result := false ;
71030: LD_ADDR_VAR 0 4
71034: PUSH
71035: LD_INT 0
71037: ST_TO_ADDR
// for i := 0 to 5 do
71038: LD_ADDR_VAR 0 5
71042: PUSH
71043: DOUBLE
71044: LD_INT 0
71046: DEC
71047: ST_TO_ADDR
71048: LD_INT 5
71050: PUSH
71051: FOR_TO
71052: IFFALSE 71119
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71054: LD_VAR 0 1
71058: PPUSH
71059: LD_VAR 0 5
71063: PPUSH
71064: LD_VAR 0 6
71068: PPUSH
71069: CALL_OW 272
71073: PPUSH
71074: LD_VAR 0 2
71078: PPUSH
71079: LD_VAR 0 5
71083: PPUSH
71084: LD_VAR 0 6
71088: PPUSH
71089: CALL_OW 273
71093: PPUSH
71094: LD_VAR 0 3
71098: PPUSH
71099: CALL_OW 309
71103: IFFALSE 71117
// begin result := true ;
71105: LD_ADDR_VAR 0 4
71109: PUSH
71110: LD_INT 1
71112: ST_TO_ADDR
// exit ;
71113: POP
71114: POP
71115: GO 71121
// end ;
71117: GO 71051
71119: POP
71120: POP
// end ;
71121: LD_VAR 0 4
71125: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
71126: LD_INT 0
71128: PPUSH
71129: PPUSH
71130: PPUSH
// if btype = b_depot then
71131: LD_VAR 0 2
71135: PUSH
71136: LD_INT 0
71138: EQUAL
71139: IFFALSE 71151
// begin result := true ;
71141: LD_ADDR_VAR 0 3
71145: PUSH
71146: LD_INT 1
71148: ST_TO_ADDR
// exit ;
71149: GO 71267
// end ; pom := GetBase ( depot ) ;
71151: LD_ADDR_VAR 0 4
71155: PUSH
71156: LD_VAR 0 1
71160: PPUSH
71161: CALL_OW 274
71165: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
71166: LD_ADDR_VAR 0 5
71170: PUSH
71171: LD_VAR 0 2
71175: PPUSH
71176: LD_VAR 0 1
71180: PPUSH
71181: CALL_OW 248
71185: PPUSH
71186: CALL_OW 450
71190: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
71191: LD_ADDR_VAR 0 3
71195: PUSH
71196: LD_VAR 0 4
71200: PPUSH
71201: LD_INT 1
71203: PPUSH
71204: CALL_OW 275
71208: PUSH
71209: LD_VAR 0 5
71213: PUSH
71214: LD_INT 1
71216: ARRAY
71217: GREATEREQUAL
71218: PUSH
71219: LD_VAR 0 4
71223: PPUSH
71224: LD_INT 2
71226: PPUSH
71227: CALL_OW 275
71231: PUSH
71232: LD_VAR 0 5
71236: PUSH
71237: LD_INT 2
71239: ARRAY
71240: GREATEREQUAL
71241: AND
71242: PUSH
71243: LD_VAR 0 4
71247: PPUSH
71248: LD_INT 3
71250: PPUSH
71251: CALL_OW 275
71255: PUSH
71256: LD_VAR 0 5
71260: PUSH
71261: LD_INT 3
71263: ARRAY
71264: GREATEREQUAL
71265: AND
71266: ST_TO_ADDR
// end ;
71267: LD_VAR 0 3
71271: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71272: LD_INT 0
71274: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71275: LD_VAR 0 1
71279: PPUSH
71280: LD_VAR 0 2
71284: PPUSH
71285: LD_INT 0
71287: PPUSH
71288: LD_INT 0
71290: PPUSH
71291: LD_INT 1
71293: PPUSH
71294: LD_INT 0
71296: PPUSH
71297: CALL_OW 587
// end ;
71301: LD_VAR 0 3
71305: RET
// export function CenterOnNow ( unit ) ; begin
71306: LD_INT 0
71308: PPUSH
// result := IsInUnit ( unit ) ;
71309: LD_ADDR_VAR 0 2
71313: PUSH
71314: LD_VAR 0 1
71318: PPUSH
71319: CALL_OW 310
71323: ST_TO_ADDR
// if not result then
71324: LD_VAR 0 2
71328: NOT
71329: IFFALSE 71341
// result := unit ;
71331: LD_ADDR_VAR 0 2
71335: PUSH
71336: LD_VAR 0 1
71340: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71341: LD_VAR 0 1
71345: PPUSH
71346: CALL_OW 87
// end ;
71350: LD_VAR 0 2
71354: RET
// export function ComMoveHex ( unit , hex ) ; begin
71355: LD_INT 0
71357: PPUSH
// if not hex then
71358: LD_VAR 0 2
71362: NOT
71363: IFFALSE 71367
// exit ;
71365: GO 71420
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71367: LD_VAR 0 2
71371: PUSH
71372: LD_INT 1
71374: ARRAY
71375: PPUSH
71376: LD_VAR 0 2
71380: PUSH
71381: LD_INT 2
71383: ARRAY
71384: PPUSH
71385: CALL_OW 428
71389: IFFALSE 71393
// exit ;
71391: GO 71420
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71393: LD_VAR 0 1
71397: PPUSH
71398: LD_VAR 0 2
71402: PUSH
71403: LD_INT 1
71405: ARRAY
71406: PPUSH
71407: LD_VAR 0 2
71411: PUSH
71412: LD_INT 2
71414: ARRAY
71415: PPUSH
71416: CALL_OW 111
// end ;
71420: LD_VAR 0 3
71424: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71425: LD_INT 0
71427: PPUSH
71428: PPUSH
71429: PPUSH
// if not unit or not enemy then
71430: LD_VAR 0 1
71434: NOT
71435: PUSH
71436: LD_VAR 0 2
71440: NOT
71441: OR
71442: IFFALSE 71446
// exit ;
71444: GO 71570
// x := GetX ( enemy ) ;
71446: LD_ADDR_VAR 0 4
71450: PUSH
71451: LD_VAR 0 2
71455: PPUSH
71456: CALL_OW 250
71460: ST_TO_ADDR
// y := GetY ( enemy ) ;
71461: LD_ADDR_VAR 0 5
71465: PUSH
71466: LD_VAR 0 2
71470: PPUSH
71471: CALL_OW 251
71475: ST_TO_ADDR
// if ValidHex ( x , y ) then
71476: LD_VAR 0 4
71480: PPUSH
71481: LD_VAR 0 5
71485: PPUSH
71486: CALL_OW 488
71490: IFFALSE 71570
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
71492: LD_VAR 0 2
71496: PPUSH
71497: CALL_OW 247
71501: PUSH
71502: LD_INT 3
71504: PUSH
71505: LD_INT 2
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: IN
71512: PUSH
71513: LD_VAR 0 1
71517: PPUSH
71518: CALL_OW 255
71522: PPUSH
71523: LD_VAR 0 2
71527: PPUSH
71528: CALL_OW 292
71532: OR
71533: IFFALSE 71551
// ComAttackUnit ( unit , enemy ) else
71535: LD_VAR 0 1
71539: PPUSH
71540: LD_VAR 0 2
71544: PPUSH
71545: CALL_OW 115
71549: GO 71570
// ComAgressiveMove ( unit , x , y ) ;
71551: LD_VAR 0 1
71555: PPUSH
71556: LD_VAR 0 4
71560: PPUSH
71561: LD_VAR 0 5
71565: PPUSH
71566: CALL_OW 114
// end ;
71570: LD_VAR 0 3
71574: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
71575: LD_INT 0
71577: PPUSH
71578: PPUSH
71579: PPUSH
// list := AreaToList ( area , 0 ) ;
71580: LD_ADDR_VAR 0 5
71584: PUSH
71585: LD_VAR 0 1
71589: PPUSH
71590: LD_INT 0
71592: PPUSH
71593: CALL_OW 517
71597: ST_TO_ADDR
// if not list then
71598: LD_VAR 0 5
71602: NOT
71603: IFFALSE 71607
// exit ;
71605: GO 71737
// if all then
71607: LD_VAR 0 2
71611: IFFALSE 71699
// begin for i := 1 to list [ 1 ] do
71613: LD_ADDR_VAR 0 4
71617: PUSH
71618: DOUBLE
71619: LD_INT 1
71621: DEC
71622: ST_TO_ADDR
71623: LD_VAR 0 5
71627: PUSH
71628: LD_INT 1
71630: ARRAY
71631: PUSH
71632: FOR_TO
71633: IFFALSE 71695
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
71635: LD_ADDR_VAR 0 3
71639: PUSH
71640: LD_VAR 0 3
71644: PPUSH
71645: LD_VAR 0 3
71649: PUSH
71650: LD_INT 1
71652: PLUS
71653: PPUSH
71654: LD_VAR 0 5
71658: PUSH
71659: LD_INT 1
71661: ARRAY
71662: PUSH
71663: LD_VAR 0 4
71667: ARRAY
71668: PUSH
71669: LD_VAR 0 5
71673: PUSH
71674: LD_INT 2
71676: ARRAY
71677: PUSH
71678: LD_VAR 0 4
71682: ARRAY
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PPUSH
71688: CALL_OW 1
71692: ST_TO_ADDR
71693: GO 71632
71695: POP
71696: POP
// exit ;
71697: GO 71737
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
71699: LD_ADDR_VAR 0 3
71703: PUSH
71704: LD_VAR 0 5
71708: PUSH
71709: LD_INT 1
71711: ARRAY
71712: PUSH
71713: LD_INT 1
71715: ARRAY
71716: PUSH
71717: LD_VAR 0 5
71721: PUSH
71722: LD_INT 2
71724: ARRAY
71725: PUSH
71726: LD_INT 1
71728: ARRAY
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PUSH
71734: EMPTY
71735: LIST
71736: ST_TO_ADDR
// end ;
71737: LD_VAR 0 3
71741: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
71742: LD_INT 0
71744: PPUSH
71745: PPUSH
// list := AreaToList ( area , 0 ) ;
71746: LD_ADDR_VAR 0 4
71750: PUSH
71751: LD_VAR 0 1
71755: PPUSH
71756: LD_INT 0
71758: PPUSH
71759: CALL_OW 517
71763: ST_TO_ADDR
// if not list then
71764: LD_VAR 0 4
71768: NOT
71769: IFFALSE 71773
// exit ;
71771: GO 71814
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
71773: LD_ADDR_VAR 0 3
71777: PUSH
71778: LD_VAR 0 4
71782: PUSH
71783: LD_INT 1
71785: ARRAY
71786: PUSH
71787: LD_INT 1
71789: ARRAY
71790: PUSH
71791: LD_VAR 0 4
71795: PUSH
71796: LD_INT 2
71798: ARRAY
71799: PUSH
71800: LD_INT 1
71802: ARRAY
71803: PUSH
71804: LD_VAR 0 2
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: LIST
71813: ST_TO_ADDR
// end ;
71814: LD_VAR 0 3
71818: RET
// export function First ( array ) ; begin
71819: LD_INT 0
71821: PPUSH
// if not array then
71822: LD_VAR 0 1
71826: NOT
71827: IFFALSE 71831
// exit ;
71829: GO 71845
// result := array [ 1 ] ;
71831: LD_ADDR_VAR 0 2
71835: PUSH
71836: LD_VAR 0 1
71840: PUSH
71841: LD_INT 1
71843: ARRAY
71844: ST_TO_ADDR
// end ;
71845: LD_VAR 0 2
71849: RET
// export function Last ( array ) ; begin
71850: LD_INT 0
71852: PPUSH
// if not array then
71853: LD_VAR 0 1
71857: NOT
71858: IFFALSE 71862
// exit ;
71860: GO 71878
// result := array [ array ] ;
71862: LD_ADDR_VAR 0 2
71866: PUSH
71867: LD_VAR 0 1
71871: PUSH
71872: LD_VAR 0 1
71876: ARRAY
71877: ST_TO_ADDR
// end ;
71878: LD_VAR 0 2
71882: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
71883: LD_INT 0
71885: PPUSH
71886: PPUSH
// result := [ ] ;
71887: LD_ADDR_VAR 0 5
71891: PUSH
71892: EMPTY
71893: ST_TO_ADDR
// if not array then
71894: LD_VAR 0 1
71898: NOT
71899: IFFALSE 71903
// exit ;
71901: GO 72015
// for i := 1 to array do
71903: LD_ADDR_VAR 0 6
71907: PUSH
71908: DOUBLE
71909: LD_INT 1
71911: DEC
71912: ST_TO_ADDR
71913: LD_VAR 0 1
71917: PUSH
71918: FOR_TO
71919: IFFALSE 72013
// if array [ i ] [ index ] = value then
71921: LD_VAR 0 1
71925: PUSH
71926: LD_VAR 0 6
71930: ARRAY
71931: PUSH
71932: LD_VAR 0 2
71936: ARRAY
71937: PUSH
71938: LD_VAR 0 3
71942: EQUAL
71943: IFFALSE 72011
// begin if indexColumn then
71945: LD_VAR 0 4
71949: IFFALSE 71985
// result := Join ( result , array [ i ] [ indexColumn ] ) else
71951: LD_ADDR_VAR 0 5
71955: PUSH
71956: LD_VAR 0 5
71960: PPUSH
71961: LD_VAR 0 1
71965: PUSH
71966: LD_VAR 0 6
71970: ARRAY
71971: PUSH
71972: LD_VAR 0 4
71976: ARRAY
71977: PPUSH
71978: CALL 67203 0 2
71982: ST_TO_ADDR
71983: GO 72011
// result := Join ( result , array [ i ] ) ;
71985: LD_ADDR_VAR 0 5
71989: PUSH
71990: LD_VAR 0 5
71994: PPUSH
71995: LD_VAR 0 1
71999: PUSH
72000: LD_VAR 0 6
72004: ARRAY
72005: PPUSH
72006: CALL 67203 0 2
72010: ST_TO_ADDR
// end ;
72011: GO 71918
72013: POP
72014: POP
// end ;
72015: LD_VAR 0 5
72019: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
72020: LD_INT 0
72022: PPUSH
// if not vehicles or not parkingPoint then
72023: LD_VAR 0 1
72027: NOT
72028: PUSH
72029: LD_VAR 0 2
72033: NOT
72034: OR
72035: IFFALSE 72039
// exit ;
72037: GO 72137
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
72039: LD_ADDR_VAR 0 1
72043: PUSH
72044: LD_VAR 0 1
72048: PPUSH
72049: LD_INT 50
72051: PUSH
72052: EMPTY
72053: LIST
72054: PUSH
72055: LD_INT 3
72057: PUSH
72058: LD_INT 92
72060: PUSH
72061: LD_VAR 0 2
72065: PUSH
72066: LD_INT 1
72068: ARRAY
72069: PUSH
72070: LD_VAR 0 2
72074: PUSH
72075: LD_INT 2
72077: ARRAY
72078: PUSH
72079: LD_INT 8
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: PPUSH
72096: CALL_OW 72
72100: ST_TO_ADDR
// if not vehicles then
72101: LD_VAR 0 1
72105: NOT
72106: IFFALSE 72110
// exit ;
72108: GO 72137
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
72110: LD_VAR 0 1
72114: PPUSH
72115: LD_VAR 0 2
72119: PUSH
72120: LD_INT 1
72122: ARRAY
72123: PPUSH
72124: LD_VAR 0 2
72128: PUSH
72129: LD_INT 2
72131: ARRAY
72132: PPUSH
72133: CALL_OW 111
// end ;
72137: LD_VAR 0 3
72141: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
72142: LD_INT 0
72144: PPUSH
72145: PPUSH
72146: PPUSH
// if not side or not area then
72147: LD_VAR 0 1
72151: NOT
72152: PUSH
72153: LD_VAR 0 2
72157: NOT
72158: OR
72159: IFFALSE 72163
// exit ;
72161: GO 72282
// tmp := AreaToList ( area , 0 ) ;
72163: LD_ADDR_VAR 0 5
72167: PUSH
72168: LD_VAR 0 2
72172: PPUSH
72173: LD_INT 0
72175: PPUSH
72176: CALL_OW 517
72180: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
72181: LD_ADDR_VAR 0 4
72185: PUSH
72186: DOUBLE
72187: LD_INT 1
72189: DEC
72190: ST_TO_ADDR
72191: LD_VAR 0 5
72195: PUSH
72196: LD_INT 1
72198: ARRAY
72199: PUSH
72200: FOR_TO
72201: IFFALSE 72280
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
72203: LD_VAR 0 5
72207: PUSH
72208: LD_INT 1
72210: ARRAY
72211: PUSH
72212: LD_VAR 0 4
72216: ARRAY
72217: PPUSH
72218: LD_VAR 0 5
72222: PUSH
72223: LD_INT 2
72225: ARRAY
72226: PUSH
72227: LD_VAR 0 4
72231: ARRAY
72232: PPUSH
72233: CALL_OW 351
72237: IFFALSE 72278
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
72239: LD_VAR 0 5
72243: PUSH
72244: LD_INT 1
72246: ARRAY
72247: PUSH
72248: LD_VAR 0 4
72252: ARRAY
72253: PPUSH
72254: LD_VAR 0 5
72258: PUSH
72259: LD_INT 2
72261: ARRAY
72262: PUSH
72263: LD_VAR 0 4
72267: ARRAY
72268: PPUSH
72269: LD_VAR 0 1
72273: PPUSH
72274: CALL_OW 244
// end ;
72278: GO 72200
72280: POP
72281: POP
// end ; end_of_file
72282: LD_VAR 0 3
72286: RET
// export globalGameSaveCounter ; every 0 0$1 do
72287: GO 72289
72289: DISABLE
// begin enable ;
72290: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
72291: LD_STRING updateTimer(
72293: PUSH
72294: LD_OWVAR 1
72298: STR
72299: PUSH
72300: LD_STRING );
72302: STR
72303: PPUSH
72304: CALL_OW 559
// end ;
72308: END
// every 0 0$1 do
72309: GO 72311
72311: DISABLE
// begin globalGameSaveCounter := 0 ;
72312: LD_ADDR_EXP 74
72316: PUSH
72317: LD_INT 0
72319: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
72320: LD_STRING setGameSaveCounter(0)
72322: PPUSH
72323: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
72327: LD_STRING initStreamRollete();
72329: PPUSH
72330: CALL_OW 559
// InitStreamMode ;
72334: CALL 73677 0 0
// DefineStreamItems ( false ) ;
72338: LD_INT 0
72340: PPUSH
72341: CALL 74141 0 1
// end ;
72345: END
// export function SOS_MapStart ( ) ; begin
72346: LD_INT 0
72348: PPUSH
// if streamModeActive then
72349: LD_EXP 75
72353: IFFALSE 72362
// DefineStreamItems ( true ) ;
72355: LD_INT 1
72357: PPUSH
72358: CALL 74141 0 1
// UpdateLuaVariables ( ) ;
72362: CALL 72379 0 0
// UpdateFactoryWaypoints ( ) ;
72366: CALL 87143 0 0
// UpdateWarehouseGatheringPoints ( ) ;
72370: CALL 87395 0 0
// end ;
72374: LD_VAR 0 1
72378: RET
// function UpdateLuaVariables ( ) ; begin
72379: LD_INT 0
72381: PPUSH
// if globalGameSaveCounter then
72382: LD_EXP 74
72386: IFFALSE 72420
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
72388: LD_ADDR_EXP 74
72392: PUSH
72393: LD_EXP 74
72397: PPUSH
72398: CALL 68564 0 1
72402: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
72403: LD_STRING setGameSaveCounter(
72405: PUSH
72406: LD_EXP 74
72410: STR
72411: PUSH
72412: LD_STRING )
72414: STR
72415: PPUSH
72416: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
72420: LD_STRING setGameDifficulty(
72422: PUSH
72423: LD_OWVAR 67
72427: STR
72428: PUSH
72429: LD_STRING )
72431: STR
72432: PPUSH
72433: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
72437: LD_STRING displayDifficulty(
72439: PUSH
72440: LD_OWVAR 67
72444: STR
72445: PUSH
72446: LD_STRING )
72448: STR
72449: PPUSH
72450: CALL_OW 559
// end ;
72454: LD_VAR 0 1
72458: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
72459: LD_INT 0
72461: PPUSH
// if p2 = stream_mode then
72462: LD_VAR 0 2
72466: PUSH
72467: LD_INT 100
72469: EQUAL
72470: IFFALSE 73473
// begin if not StreamModeActive then
72472: LD_EXP 75
72476: NOT
72477: IFFALSE 72487
// StreamModeActive := true ;
72479: LD_ADDR_EXP 75
72483: PUSH
72484: LD_INT 1
72486: ST_TO_ADDR
// if p3 = 0 then
72487: LD_VAR 0 3
72491: PUSH
72492: LD_INT 0
72494: EQUAL
72495: IFFALSE 72501
// InitStreamMode ;
72497: CALL 73677 0 0
// if p3 = 1 then
72501: LD_VAR 0 3
72505: PUSH
72506: LD_INT 1
72508: EQUAL
72509: IFFALSE 72519
// sRocket := true ;
72511: LD_ADDR_EXP 80
72515: PUSH
72516: LD_INT 1
72518: ST_TO_ADDR
// if p3 = 2 then
72519: LD_VAR 0 3
72523: PUSH
72524: LD_INT 2
72526: EQUAL
72527: IFFALSE 72537
// sSpeed := true ;
72529: LD_ADDR_EXP 79
72533: PUSH
72534: LD_INT 1
72536: ST_TO_ADDR
// if p3 = 3 then
72537: LD_VAR 0 3
72541: PUSH
72542: LD_INT 3
72544: EQUAL
72545: IFFALSE 72555
// sEngine := true ;
72547: LD_ADDR_EXP 81
72551: PUSH
72552: LD_INT 1
72554: ST_TO_ADDR
// if p3 = 4 then
72555: LD_VAR 0 3
72559: PUSH
72560: LD_INT 4
72562: EQUAL
72563: IFFALSE 72573
// sSpec := true ;
72565: LD_ADDR_EXP 78
72569: PUSH
72570: LD_INT 1
72572: ST_TO_ADDR
// if p3 = 5 then
72573: LD_VAR 0 3
72577: PUSH
72578: LD_INT 5
72580: EQUAL
72581: IFFALSE 72591
// sLevel := true ;
72583: LD_ADDR_EXP 82
72587: PUSH
72588: LD_INT 1
72590: ST_TO_ADDR
// if p3 = 6 then
72591: LD_VAR 0 3
72595: PUSH
72596: LD_INT 6
72598: EQUAL
72599: IFFALSE 72609
// sArmoury := true ;
72601: LD_ADDR_EXP 83
72605: PUSH
72606: LD_INT 1
72608: ST_TO_ADDR
// if p3 = 7 then
72609: LD_VAR 0 3
72613: PUSH
72614: LD_INT 7
72616: EQUAL
72617: IFFALSE 72627
// sRadar := true ;
72619: LD_ADDR_EXP 84
72623: PUSH
72624: LD_INT 1
72626: ST_TO_ADDR
// if p3 = 8 then
72627: LD_VAR 0 3
72631: PUSH
72632: LD_INT 8
72634: EQUAL
72635: IFFALSE 72645
// sBunker := true ;
72637: LD_ADDR_EXP 85
72641: PUSH
72642: LD_INT 1
72644: ST_TO_ADDR
// if p3 = 9 then
72645: LD_VAR 0 3
72649: PUSH
72650: LD_INT 9
72652: EQUAL
72653: IFFALSE 72663
// sHack := true ;
72655: LD_ADDR_EXP 86
72659: PUSH
72660: LD_INT 1
72662: ST_TO_ADDR
// if p3 = 10 then
72663: LD_VAR 0 3
72667: PUSH
72668: LD_INT 10
72670: EQUAL
72671: IFFALSE 72681
// sFire := true ;
72673: LD_ADDR_EXP 87
72677: PUSH
72678: LD_INT 1
72680: ST_TO_ADDR
// if p3 = 11 then
72681: LD_VAR 0 3
72685: PUSH
72686: LD_INT 11
72688: EQUAL
72689: IFFALSE 72699
// sRefresh := true ;
72691: LD_ADDR_EXP 88
72695: PUSH
72696: LD_INT 1
72698: ST_TO_ADDR
// if p3 = 12 then
72699: LD_VAR 0 3
72703: PUSH
72704: LD_INT 12
72706: EQUAL
72707: IFFALSE 72717
// sExp := true ;
72709: LD_ADDR_EXP 89
72713: PUSH
72714: LD_INT 1
72716: ST_TO_ADDR
// if p3 = 13 then
72717: LD_VAR 0 3
72721: PUSH
72722: LD_INT 13
72724: EQUAL
72725: IFFALSE 72735
// sDepot := true ;
72727: LD_ADDR_EXP 90
72731: PUSH
72732: LD_INT 1
72734: ST_TO_ADDR
// if p3 = 14 then
72735: LD_VAR 0 3
72739: PUSH
72740: LD_INT 14
72742: EQUAL
72743: IFFALSE 72753
// sFlag := true ;
72745: LD_ADDR_EXP 91
72749: PUSH
72750: LD_INT 1
72752: ST_TO_ADDR
// if p3 = 15 then
72753: LD_VAR 0 3
72757: PUSH
72758: LD_INT 15
72760: EQUAL
72761: IFFALSE 72771
// sKamikadze := true ;
72763: LD_ADDR_EXP 99
72767: PUSH
72768: LD_INT 1
72770: ST_TO_ADDR
// if p3 = 16 then
72771: LD_VAR 0 3
72775: PUSH
72776: LD_INT 16
72778: EQUAL
72779: IFFALSE 72789
// sTroll := true ;
72781: LD_ADDR_EXP 100
72785: PUSH
72786: LD_INT 1
72788: ST_TO_ADDR
// if p3 = 17 then
72789: LD_VAR 0 3
72793: PUSH
72794: LD_INT 17
72796: EQUAL
72797: IFFALSE 72807
// sSlow := true ;
72799: LD_ADDR_EXP 101
72803: PUSH
72804: LD_INT 1
72806: ST_TO_ADDR
// if p3 = 18 then
72807: LD_VAR 0 3
72811: PUSH
72812: LD_INT 18
72814: EQUAL
72815: IFFALSE 72825
// sLack := true ;
72817: LD_ADDR_EXP 102
72821: PUSH
72822: LD_INT 1
72824: ST_TO_ADDR
// if p3 = 19 then
72825: LD_VAR 0 3
72829: PUSH
72830: LD_INT 19
72832: EQUAL
72833: IFFALSE 72843
// sTank := true ;
72835: LD_ADDR_EXP 104
72839: PUSH
72840: LD_INT 1
72842: ST_TO_ADDR
// if p3 = 20 then
72843: LD_VAR 0 3
72847: PUSH
72848: LD_INT 20
72850: EQUAL
72851: IFFALSE 72861
// sRemote := true ;
72853: LD_ADDR_EXP 105
72857: PUSH
72858: LD_INT 1
72860: ST_TO_ADDR
// if p3 = 21 then
72861: LD_VAR 0 3
72865: PUSH
72866: LD_INT 21
72868: EQUAL
72869: IFFALSE 72879
// sPowell := true ;
72871: LD_ADDR_EXP 106
72875: PUSH
72876: LD_INT 1
72878: ST_TO_ADDR
// if p3 = 22 then
72879: LD_VAR 0 3
72883: PUSH
72884: LD_INT 22
72886: EQUAL
72887: IFFALSE 72897
// sTeleport := true ;
72889: LD_ADDR_EXP 109
72893: PUSH
72894: LD_INT 1
72896: ST_TO_ADDR
// if p3 = 23 then
72897: LD_VAR 0 3
72901: PUSH
72902: LD_INT 23
72904: EQUAL
72905: IFFALSE 72915
// sOilTower := true ;
72907: LD_ADDR_EXP 111
72911: PUSH
72912: LD_INT 1
72914: ST_TO_ADDR
// if p3 = 24 then
72915: LD_VAR 0 3
72919: PUSH
72920: LD_INT 24
72922: EQUAL
72923: IFFALSE 72933
// sShovel := true ;
72925: LD_ADDR_EXP 112
72929: PUSH
72930: LD_INT 1
72932: ST_TO_ADDR
// if p3 = 25 then
72933: LD_VAR 0 3
72937: PUSH
72938: LD_INT 25
72940: EQUAL
72941: IFFALSE 72951
// sSheik := true ;
72943: LD_ADDR_EXP 113
72947: PUSH
72948: LD_INT 1
72950: ST_TO_ADDR
// if p3 = 26 then
72951: LD_VAR 0 3
72955: PUSH
72956: LD_INT 26
72958: EQUAL
72959: IFFALSE 72969
// sEarthquake := true ;
72961: LD_ADDR_EXP 115
72965: PUSH
72966: LD_INT 1
72968: ST_TO_ADDR
// if p3 = 27 then
72969: LD_VAR 0 3
72973: PUSH
72974: LD_INT 27
72976: EQUAL
72977: IFFALSE 72987
// sAI := true ;
72979: LD_ADDR_EXP 116
72983: PUSH
72984: LD_INT 1
72986: ST_TO_ADDR
// if p3 = 28 then
72987: LD_VAR 0 3
72991: PUSH
72992: LD_INT 28
72994: EQUAL
72995: IFFALSE 73005
// sCargo := true ;
72997: LD_ADDR_EXP 119
73001: PUSH
73002: LD_INT 1
73004: ST_TO_ADDR
// if p3 = 29 then
73005: LD_VAR 0 3
73009: PUSH
73010: LD_INT 29
73012: EQUAL
73013: IFFALSE 73023
// sDLaser := true ;
73015: LD_ADDR_EXP 120
73019: PUSH
73020: LD_INT 1
73022: ST_TO_ADDR
// if p3 = 30 then
73023: LD_VAR 0 3
73027: PUSH
73028: LD_INT 30
73030: EQUAL
73031: IFFALSE 73041
// sExchange := true ;
73033: LD_ADDR_EXP 121
73037: PUSH
73038: LD_INT 1
73040: ST_TO_ADDR
// if p3 = 31 then
73041: LD_VAR 0 3
73045: PUSH
73046: LD_INT 31
73048: EQUAL
73049: IFFALSE 73059
// sFac := true ;
73051: LD_ADDR_EXP 122
73055: PUSH
73056: LD_INT 1
73058: ST_TO_ADDR
// if p3 = 32 then
73059: LD_VAR 0 3
73063: PUSH
73064: LD_INT 32
73066: EQUAL
73067: IFFALSE 73077
// sPower := true ;
73069: LD_ADDR_EXP 123
73073: PUSH
73074: LD_INT 1
73076: ST_TO_ADDR
// if p3 = 33 then
73077: LD_VAR 0 3
73081: PUSH
73082: LD_INT 33
73084: EQUAL
73085: IFFALSE 73095
// sRandom := true ;
73087: LD_ADDR_EXP 124
73091: PUSH
73092: LD_INT 1
73094: ST_TO_ADDR
// if p3 = 34 then
73095: LD_VAR 0 3
73099: PUSH
73100: LD_INT 34
73102: EQUAL
73103: IFFALSE 73113
// sShield := true ;
73105: LD_ADDR_EXP 125
73109: PUSH
73110: LD_INT 1
73112: ST_TO_ADDR
// if p3 = 35 then
73113: LD_VAR 0 3
73117: PUSH
73118: LD_INT 35
73120: EQUAL
73121: IFFALSE 73131
// sTime := true ;
73123: LD_ADDR_EXP 126
73127: PUSH
73128: LD_INT 1
73130: ST_TO_ADDR
// if p3 = 36 then
73131: LD_VAR 0 3
73135: PUSH
73136: LD_INT 36
73138: EQUAL
73139: IFFALSE 73149
// sTools := true ;
73141: LD_ADDR_EXP 127
73145: PUSH
73146: LD_INT 1
73148: ST_TO_ADDR
// if p3 = 101 then
73149: LD_VAR 0 3
73153: PUSH
73154: LD_INT 101
73156: EQUAL
73157: IFFALSE 73167
// sSold := true ;
73159: LD_ADDR_EXP 92
73163: PUSH
73164: LD_INT 1
73166: ST_TO_ADDR
// if p3 = 102 then
73167: LD_VAR 0 3
73171: PUSH
73172: LD_INT 102
73174: EQUAL
73175: IFFALSE 73185
// sDiff := true ;
73177: LD_ADDR_EXP 93
73181: PUSH
73182: LD_INT 1
73184: ST_TO_ADDR
// if p3 = 103 then
73185: LD_VAR 0 3
73189: PUSH
73190: LD_INT 103
73192: EQUAL
73193: IFFALSE 73203
// sFog := true ;
73195: LD_ADDR_EXP 96
73199: PUSH
73200: LD_INT 1
73202: ST_TO_ADDR
// if p3 = 104 then
73203: LD_VAR 0 3
73207: PUSH
73208: LD_INT 104
73210: EQUAL
73211: IFFALSE 73221
// sReset := true ;
73213: LD_ADDR_EXP 97
73217: PUSH
73218: LD_INT 1
73220: ST_TO_ADDR
// if p3 = 105 then
73221: LD_VAR 0 3
73225: PUSH
73226: LD_INT 105
73228: EQUAL
73229: IFFALSE 73239
// sSun := true ;
73231: LD_ADDR_EXP 98
73235: PUSH
73236: LD_INT 1
73238: ST_TO_ADDR
// if p3 = 106 then
73239: LD_VAR 0 3
73243: PUSH
73244: LD_INT 106
73246: EQUAL
73247: IFFALSE 73257
// sTiger := true ;
73249: LD_ADDR_EXP 94
73253: PUSH
73254: LD_INT 1
73256: ST_TO_ADDR
// if p3 = 107 then
73257: LD_VAR 0 3
73261: PUSH
73262: LD_INT 107
73264: EQUAL
73265: IFFALSE 73275
// sBomb := true ;
73267: LD_ADDR_EXP 95
73271: PUSH
73272: LD_INT 1
73274: ST_TO_ADDR
// if p3 = 108 then
73275: LD_VAR 0 3
73279: PUSH
73280: LD_INT 108
73282: EQUAL
73283: IFFALSE 73293
// sWound := true ;
73285: LD_ADDR_EXP 103
73289: PUSH
73290: LD_INT 1
73292: ST_TO_ADDR
// if p3 = 109 then
73293: LD_VAR 0 3
73297: PUSH
73298: LD_INT 109
73300: EQUAL
73301: IFFALSE 73311
// sBetray := true ;
73303: LD_ADDR_EXP 107
73307: PUSH
73308: LD_INT 1
73310: ST_TO_ADDR
// if p3 = 110 then
73311: LD_VAR 0 3
73315: PUSH
73316: LD_INT 110
73318: EQUAL
73319: IFFALSE 73329
// sContamin := true ;
73321: LD_ADDR_EXP 108
73325: PUSH
73326: LD_INT 1
73328: ST_TO_ADDR
// if p3 = 111 then
73329: LD_VAR 0 3
73333: PUSH
73334: LD_INT 111
73336: EQUAL
73337: IFFALSE 73347
// sOil := true ;
73339: LD_ADDR_EXP 110
73343: PUSH
73344: LD_INT 1
73346: ST_TO_ADDR
// if p3 = 112 then
73347: LD_VAR 0 3
73351: PUSH
73352: LD_INT 112
73354: EQUAL
73355: IFFALSE 73365
// sStu := true ;
73357: LD_ADDR_EXP 114
73361: PUSH
73362: LD_INT 1
73364: ST_TO_ADDR
// if p3 = 113 then
73365: LD_VAR 0 3
73369: PUSH
73370: LD_INT 113
73372: EQUAL
73373: IFFALSE 73383
// sBazooka := true ;
73375: LD_ADDR_EXP 117
73379: PUSH
73380: LD_INT 1
73382: ST_TO_ADDR
// if p3 = 114 then
73383: LD_VAR 0 3
73387: PUSH
73388: LD_INT 114
73390: EQUAL
73391: IFFALSE 73401
// sMortar := true ;
73393: LD_ADDR_EXP 118
73397: PUSH
73398: LD_INT 1
73400: ST_TO_ADDR
// if p3 = 115 then
73401: LD_VAR 0 3
73405: PUSH
73406: LD_INT 115
73408: EQUAL
73409: IFFALSE 73419
// sRanger := true ;
73411: LD_ADDR_EXP 128
73415: PUSH
73416: LD_INT 1
73418: ST_TO_ADDR
// if p3 = 116 then
73419: LD_VAR 0 3
73423: PUSH
73424: LD_INT 116
73426: EQUAL
73427: IFFALSE 73437
// sComputer := true ;
73429: LD_ADDR_EXP 129
73433: PUSH
73434: LD_INT 1
73436: ST_TO_ADDR
// if p3 = 117 then
73437: LD_VAR 0 3
73441: PUSH
73442: LD_INT 117
73444: EQUAL
73445: IFFALSE 73455
// s30 := true ;
73447: LD_ADDR_EXP 130
73451: PUSH
73452: LD_INT 1
73454: ST_TO_ADDR
// if p3 = 118 then
73455: LD_VAR 0 3
73459: PUSH
73460: LD_INT 118
73462: EQUAL
73463: IFFALSE 73473
// s60 := true ;
73465: LD_ADDR_EXP 131
73469: PUSH
73470: LD_INT 1
73472: ST_TO_ADDR
// end ; if p2 = hack_mode then
73473: LD_VAR 0 2
73477: PUSH
73478: LD_INT 101
73480: EQUAL
73481: IFFALSE 73609
// begin case p3 of 1 :
73483: LD_VAR 0 3
73487: PUSH
73488: LD_INT 1
73490: DOUBLE
73491: EQUAL
73492: IFTRUE 73496
73494: GO 73503
73496: POP
// hHackUnlimitedResources ; 2 :
73497: CALL 85756 0 0
73501: GO 73609
73503: LD_INT 2
73505: DOUBLE
73506: EQUAL
73507: IFTRUE 73511
73509: GO 73518
73511: POP
// hHackSetLevel10 ; 3 :
73512: CALL 85889 0 0
73516: GO 73609
73518: LD_INT 3
73520: DOUBLE
73521: EQUAL
73522: IFTRUE 73526
73524: GO 73533
73526: POP
// hHackSetLevel10YourUnits ; 4 :
73527: CALL 85974 0 0
73531: GO 73609
73533: LD_INT 4
73535: DOUBLE
73536: EQUAL
73537: IFTRUE 73541
73539: GO 73548
73541: POP
// hHackInvincible ; 5 :
73542: CALL 86422 0 0
73546: GO 73609
73548: LD_INT 5
73550: DOUBLE
73551: EQUAL
73552: IFTRUE 73556
73554: GO 73563
73556: POP
// hHackInvisible ; 6 :
73557: CALL 86533 0 0
73561: GO 73609
73563: LD_INT 6
73565: DOUBLE
73566: EQUAL
73567: IFTRUE 73571
73569: GO 73578
73571: POP
// hHackChangeYourSide ; 7 :
73572: CALL 86590 0 0
73576: GO 73609
73578: LD_INT 7
73580: DOUBLE
73581: EQUAL
73582: IFTRUE 73586
73584: GO 73593
73586: POP
// hHackChangeUnitSide ; 8 :
73587: CALL 86632 0 0
73591: GO 73609
73593: LD_INT 8
73595: DOUBLE
73596: EQUAL
73597: IFTRUE 73601
73599: GO 73608
73601: POP
// hHackFog ; end ;
73602: CALL 86733 0 0
73606: GO 73609
73608: POP
// end ; if p2 = game_save_mode then
73609: LD_VAR 0 2
73613: PUSH
73614: LD_INT 102
73616: EQUAL
73617: IFFALSE 73672
// begin if p3 = 1 then
73619: LD_VAR 0 3
73623: PUSH
73624: LD_INT 1
73626: EQUAL
73627: IFFALSE 73639
// globalGameSaveCounter := p4 ;
73629: LD_ADDR_EXP 74
73633: PUSH
73634: LD_VAR 0 4
73638: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
73639: LD_VAR 0 3
73643: PUSH
73644: LD_INT 2
73646: EQUAL
73647: PUSH
73648: LD_EXP 74
73652: AND
73653: IFFALSE 73672
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
73655: LD_STRING setGameSaveCounter(
73657: PUSH
73658: LD_EXP 74
73662: STR
73663: PUSH
73664: LD_STRING )
73666: STR
73667: PPUSH
73668: CALL_OW 559
// end ; end ;
73672: LD_VAR 0 7
73676: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
73677: LD_INT 0
73679: PPUSH
// streamModeActive := false ;
73680: LD_ADDR_EXP 75
73684: PUSH
73685: LD_INT 0
73687: ST_TO_ADDR
// normalCounter := 36 ;
73688: LD_ADDR_EXP 76
73692: PUSH
73693: LD_INT 36
73695: ST_TO_ADDR
// hardcoreCounter := 18 ;
73696: LD_ADDR_EXP 77
73700: PUSH
73701: LD_INT 18
73703: ST_TO_ADDR
// sRocket := false ;
73704: LD_ADDR_EXP 80
73708: PUSH
73709: LD_INT 0
73711: ST_TO_ADDR
// sSpeed := false ;
73712: LD_ADDR_EXP 79
73716: PUSH
73717: LD_INT 0
73719: ST_TO_ADDR
// sEngine := false ;
73720: LD_ADDR_EXP 81
73724: PUSH
73725: LD_INT 0
73727: ST_TO_ADDR
// sSpec := false ;
73728: LD_ADDR_EXP 78
73732: PUSH
73733: LD_INT 0
73735: ST_TO_ADDR
// sLevel := false ;
73736: LD_ADDR_EXP 82
73740: PUSH
73741: LD_INT 0
73743: ST_TO_ADDR
// sArmoury := false ;
73744: LD_ADDR_EXP 83
73748: PUSH
73749: LD_INT 0
73751: ST_TO_ADDR
// sRadar := false ;
73752: LD_ADDR_EXP 84
73756: PUSH
73757: LD_INT 0
73759: ST_TO_ADDR
// sBunker := false ;
73760: LD_ADDR_EXP 85
73764: PUSH
73765: LD_INT 0
73767: ST_TO_ADDR
// sHack := false ;
73768: LD_ADDR_EXP 86
73772: PUSH
73773: LD_INT 0
73775: ST_TO_ADDR
// sFire := false ;
73776: LD_ADDR_EXP 87
73780: PUSH
73781: LD_INT 0
73783: ST_TO_ADDR
// sRefresh := false ;
73784: LD_ADDR_EXP 88
73788: PUSH
73789: LD_INT 0
73791: ST_TO_ADDR
// sExp := false ;
73792: LD_ADDR_EXP 89
73796: PUSH
73797: LD_INT 0
73799: ST_TO_ADDR
// sDepot := false ;
73800: LD_ADDR_EXP 90
73804: PUSH
73805: LD_INT 0
73807: ST_TO_ADDR
// sFlag := false ;
73808: LD_ADDR_EXP 91
73812: PUSH
73813: LD_INT 0
73815: ST_TO_ADDR
// sKamikadze := false ;
73816: LD_ADDR_EXP 99
73820: PUSH
73821: LD_INT 0
73823: ST_TO_ADDR
// sTroll := false ;
73824: LD_ADDR_EXP 100
73828: PUSH
73829: LD_INT 0
73831: ST_TO_ADDR
// sSlow := false ;
73832: LD_ADDR_EXP 101
73836: PUSH
73837: LD_INT 0
73839: ST_TO_ADDR
// sLack := false ;
73840: LD_ADDR_EXP 102
73844: PUSH
73845: LD_INT 0
73847: ST_TO_ADDR
// sTank := false ;
73848: LD_ADDR_EXP 104
73852: PUSH
73853: LD_INT 0
73855: ST_TO_ADDR
// sRemote := false ;
73856: LD_ADDR_EXP 105
73860: PUSH
73861: LD_INT 0
73863: ST_TO_ADDR
// sPowell := false ;
73864: LD_ADDR_EXP 106
73868: PUSH
73869: LD_INT 0
73871: ST_TO_ADDR
// sTeleport := false ;
73872: LD_ADDR_EXP 109
73876: PUSH
73877: LD_INT 0
73879: ST_TO_ADDR
// sOilTower := false ;
73880: LD_ADDR_EXP 111
73884: PUSH
73885: LD_INT 0
73887: ST_TO_ADDR
// sShovel := false ;
73888: LD_ADDR_EXP 112
73892: PUSH
73893: LD_INT 0
73895: ST_TO_ADDR
// sSheik := false ;
73896: LD_ADDR_EXP 113
73900: PUSH
73901: LD_INT 0
73903: ST_TO_ADDR
// sEarthquake := false ;
73904: LD_ADDR_EXP 115
73908: PUSH
73909: LD_INT 0
73911: ST_TO_ADDR
// sAI := false ;
73912: LD_ADDR_EXP 116
73916: PUSH
73917: LD_INT 0
73919: ST_TO_ADDR
// sCargo := false ;
73920: LD_ADDR_EXP 119
73924: PUSH
73925: LD_INT 0
73927: ST_TO_ADDR
// sDLaser := false ;
73928: LD_ADDR_EXP 120
73932: PUSH
73933: LD_INT 0
73935: ST_TO_ADDR
// sExchange := false ;
73936: LD_ADDR_EXP 121
73940: PUSH
73941: LD_INT 0
73943: ST_TO_ADDR
// sFac := false ;
73944: LD_ADDR_EXP 122
73948: PUSH
73949: LD_INT 0
73951: ST_TO_ADDR
// sPower := false ;
73952: LD_ADDR_EXP 123
73956: PUSH
73957: LD_INT 0
73959: ST_TO_ADDR
// sRandom := false ;
73960: LD_ADDR_EXP 124
73964: PUSH
73965: LD_INT 0
73967: ST_TO_ADDR
// sShield := false ;
73968: LD_ADDR_EXP 125
73972: PUSH
73973: LD_INT 0
73975: ST_TO_ADDR
// sTime := false ;
73976: LD_ADDR_EXP 126
73980: PUSH
73981: LD_INT 0
73983: ST_TO_ADDR
// sTools := false ;
73984: LD_ADDR_EXP 127
73988: PUSH
73989: LD_INT 0
73991: ST_TO_ADDR
// sSold := false ;
73992: LD_ADDR_EXP 92
73996: PUSH
73997: LD_INT 0
73999: ST_TO_ADDR
// sDiff := false ;
74000: LD_ADDR_EXP 93
74004: PUSH
74005: LD_INT 0
74007: ST_TO_ADDR
// sFog := false ;
74008: LD_ADDR_EXP 96
74012: PUSH
74013: LD_INT 0
74015: ST_TO_ADDR
// sReset := false ;
74016: LD_ADDR_EXP 97
74020: PUSH
74021: LD_INT 0
74023: ST_TO_ADDR
// sSun := false ;
74024: LD_ADDR_EXP 98
74028: PUSH
74029: LD_INT 0
74031: ST_TO_ADDR
// sTiger := false ;
74032: LD_ADDR_EXP 94
74036: PUSH
74037: LD_INT 0
74039: ST_TO_ADDR
// sBomb := false ;
74040: LD_ADDR_EXP 95
74044: PUSH
74045: LD_INT 0
74047: ST_TO_ADDR
// sWound := false ;
74048: LD_ADDR_EXP 103
74052: PUSH
74053: LD_INT 0
74055: ST_TO_ADDR
// sBetray := false ;
74056: LD_ADDR_EXP 107
74060: PUSH
74061: LD_INT 0
74063: ST_TO_ADDR
// sContamin := false ;
74064: LD_ADDR_EXP 108
74068: PUSH
74069: LD_INT 0
74071: ST_TO_ADDR
// sOil := false ;
74072: LD_ADDR_EXP 110
74076: PUSH
74077: LD_INT 0
74079: ST_TO_ADDR
// sStu := false ;
74080: LD_ADDR_EXP 114
74084: PUSH
74085: LD_INT 0
74087: ST_TO_ADDR
// sBazooka := false ;
74088: LD_ADDR_EXP 117
74092: PUSH
74093: LD_INT 0
74095: ST_TO_ADDR
// sMortar := false ;
74096: LD_ADDR_EXP 118
74100: PUSH
74101: LD_INT 0
74103: ST_TO_ADDR
// sRanger := false ;
74104: LD_ADDR_EXP 128
74108: PUSH
74109: LD_INT 0
74111: ST_TO_ADDR
// sComputer := false ;
74112: LD_ADDR_EXP 129
74116: PUSH
74117: LD_INT 0
74119: ST_TO_ADDR
// s30 := false ;
74120: LD_ADDR_EXP 130
74124: PUSH
74125: LD_INT 0
74127: ST_TO_ADDR
// s60 := false ;
74128: LD_ADDR_EXP 131
74132: PUSH
74133: LD_INT 0
74135: ST_TO_ADDR
// end ;
74136: LD_VAR 0 1
74140: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
74141: LD_INT 0
74143: PPUSH
74144: PPUSH
74145: PPUSH
74146: PPUSH
74147: PPUSH
74148: PPUSH
74149: PPUSH
// result := [ ] ;
74150: LD_ADDR_VAR 0 2
74154: PUSH
74155: EMPTY
74156: ST_TO_ADDR
// if campaign_id = 1 then
74157: LD_OWVAR 69
74161: PUSH
74162: LD_INT 1
74164: EQUAL
74165: IFFALSE 77331
// begin case mission_number of 1 :
74167: LD_OWVAR 70
74171: PUSH
74172: LD_INT 1
74174: DOUBLE
74175: EQUAL
74176: IFTRUE 74180
74178: GO 74256
74180: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
74181: LD_ADDR_VAR 0 2
74185: PUSH
74186: LD_INT 2
74188: PUSH
74189: LD_INT 4
74191: PUSH
74192: LD_INT 11
74194: PUSH
74195: LD_INT 12
74197: PUSH
74198: LD_INT 15
74200: PUSH
74201: LD_INT 16
74203: PUSH
74204: LD_INT 22
74206: PUSH
74207: LD_INT 23
74209: PUSH
74210: LD_INT 26
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: LIST
74217: LIST
74218: LIST
74219: LIST
74220: LIST
74221: LIST
74222: LIST
74223: PUSH
74224: LD_INT 101
74226: PUSH
74227: LD_INT 102
74229: PUSH
74230: LD_INT 106
74232: PUSH
74233: LD_INT 116
74235: PUSH
74236: LD_INT 117
74238: PUSH
74239: LD_INT 118
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: PUSH
74250: EMPTY
74251: LIST
74252: LIST
74253: ST_TO_ADDR
74254: GO 77329
74256: LD_INT 2
74258: DOUBLE
74259: EQUAL
74260: IFTRUE 74264
74262: GO 74348
74264: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
74265: LD_ADDR_VAR 0 2
74269: PUSH
74270: LD_INT 2
74272: PUSH
74273: LD_INT 4
74275: PUSH
74276: LD_INT 11
74278: PUSH
74279: LD_INT 12
74281: PUSH
74282: LD_INT 15
74284: PUSH
74285: LD_INT 16
74287: PUSH
74288: LD_INT 22
74290: PUSH
74291: LD_INT 23
74293: PUSH
74294: LD_INT 26
74296: PUSH
74297: EMPTY
74298: LIST
74299: LIST
74300: LIST
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: PUSH
74308: LD_INT 101
74310: PUSH
74311: LD_INT 102
74313: PUSH
74314: LD_INT 105
74316: PUSH
74317: LD_INT 106
74319: PUSH
74320: LD_INT 108
74322: PUSH
74323: LD_INT 116
74325: PUSH
74326: LD_INT 117
74328: PUSH
74329: LD_INT 118
74331: PUSH
74332: EMPTY
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: PUSH
74342: EMPTY
74343: LIST
74344: LIST
74345: ST_TO_ADDR
74346: GO 77329
74348: LD_INT 3
74350: DOUBLE
74351: EQUAL
74352: IFTRUE 74356
74354: GO 74444
74356: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
74357: LD_ADDR_VAR 0 2
74361: PUSH
74362: LD_INT 2
74364: PUSH
74365: LD_INT 4
74367: PUSH
74368: LD_INT 5
74370: PUSH
74371: LD_INT 11
74373: PUSH
74374: LD_INT 12
74376: PUSH
74377: LD_INT 15
74379: PUSH
74380: LD_INT 16
74382: PUSH
74383: LD_INT 22
74385: PUSH
74386: LD_INT 26
74388: PUSH
74389: LD_INT 36
74391: PUSH
74392: EMPTY
74393: LIST
74394: LIST
74395: LIST
74396: LIST
74397: LIST
74398: LIST
74399: LIST
74400: LIST
74401: LIST
74402: LIST
74403: PUSH
74404: LD_INT 101
74406: PUSH
74407: LD_INT 102
74409: PUSH
74410: LD_INT 105
74412: PUSH
74413: LD_INT 106
74415: PUSH
74416: LD_INT 108
74418: PUSH
74419: LD_INT 116
74421: PUSH
74422: LD_INT 117
74424: PUSH
74425: LD_INT 118
74427: PUSH
74428: EMPTY
74429: LIST
74430: LIST
74431: LIST
74432: LIST
74433: LIST
74434: LIST
74435: LIST
74436: LIST
74437: PUSH
74438: EMPTY
74439: LIST
74440: LIST
74441: ST_TO_ADDR
74442: GO 77329
74444: LD_INT 4
74446: DOUBLE
74447: EQUAL
74448: IFTRUE 74452
74450: GO 74548
74452: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
74453: LD_ADDR_VAR 0 2
74457: PUSH
74458: LD_INT 2
74460: PUSH
74461: LD_INT 4
74463: PUSH
74464: LD_INT 5
74466: PUSH
74467: LD_INT 8
74469: PUSH
74470: LD_INT 11
74472: PUSH
74473: LD_INT 12
74475: PUSH
74476: LD_INT 15
74478: PUSH
74479: LD_INT 16
74481: PUSH
74482: LD_INT 22
74484: PUSH
74485: LD_INT 23
74487: PUSH
74488: LD_INT 26
74490: PUSH
74491: LD_INT 36
74493: PUSH
74494: EMPTY
74495: LIST
74496: LIST
74497: LIST
74498: LIST
74499: LIST
74500: LIST
74501: LIST
74502: LIST
74503: LIST
74504: LIST
74505: LIST
74506: LIST
74507: PUSH
74508: LD_INT 101
74510: PUSH
74511: LD_INT 102
74513: PUSH
74514: LD_INT 105
74516: PUSH
74517: LD_INT 106
74519: PUSH
74520: LD_INT 108
74522: PUSH
74523: LD_INT 116
74525: PUSH
74526: LD_INT 117
74528: PUSH
74529: LD_INT 118
74531: PUSH
74532: EMPTY
74533: LIST
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: LIST
74539: LIST
74540: LIST
74541: PUSH
74542: EMPTY
74543: LIST
74544: LIST
74545: ST_TO_ADDR
74546: GO 77329
74548: LD_INT 5
74550: DOUBLE
74551: EQUAL
74552: IFTRUE 74556
74554: GO 74668
74556: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
74557: LD_ADDR_VAR 0 2
74561: PUSH
74562: LD_INT 2
74564: PUSH
74565: LD_INT 4
74567: PUSH
74568: LD_INT 5
74570: PUSH
74571: LD_INT 6
74573: PUSH
74574: LD_INT 8
74576: PUSH
74577: LD_INT 11
74579: PUSH
74580: LD_INT 12
74582: PUSH
74583: LD_INT 15
74585: PUSH
74586: LD_INT 16
74588: PUSH
74589: LD_INT 22
74591: PUSH
74592: LD_INT 23
74594: PUSH
74595: LD_INT 25
74597: PUSH
74598: LD_INT 26
74600: PUSH
74601: LD_INT 36
74603: PUSH
74604: EMPTY
74605: LIST
74606: LIST
74607: LIST
74608: LIST
74609: LIST
74610: LIST
74611: LIST
74612: LIST
74613: LIST
74614: LIST
74615: LIST
74616: LIST
74617: LIST
74618: LIST
74619: PUSH
74620: LD_INT 101
74622: PUSH
74623: LD_INT 102
74625: PUSH
74626: LD_INT 105
74628: PUSH
74629: LD_INT 106
74631: PUSH
74632: LD_INT 108
74634: PUSH
74635: LD_INT 109
74637: PUSH
74638: LD_INT 112
74640: PUSH
74641: LD_INT 116
74643: PUSH
74644: LD_INT 117
74646: PUSH
74647: LD_INT 118
74649: PUSH
74650: EMPTY
74651: LIST
74652: LIST
74653: LIST
74654: LIST
74655: LIST
74656: LIST
74657: LIST
74658: LIST
74659: LIST
74660: LIST
74661: PUSH
74662: EMPTY
74663: LIST
74664: LIST
74665: ST_TO_ADDR
74666: GO 77329
74668: LD_INT 6
74670: DOUBLE
74671: EQUAL
74672: IFTRUE 74676
74674: GO 74808
74676: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
74677: LD_ADDR_VAR 0 2
74681: PUSH
74682: LD_INT 2
74684: PUSH
74685: LD_INT 4
74687: PUSH
74688: LD_INT 5
74690: PUSH
74691: LD_INT 6
74693: PUSH
74694: LD_INT 8
74696: PUSH
74697: LD_INT 11
74699: PUSH
74700: LD_INT 12
74702: PUSH
74703: LD_INT 15
74705: PUSH
74706: LD_INT 16
74708: PUSH
74709: LD_INT 20
74711: PUSH
74712: LD_INT 21
74714: PUSH
74715: LD_INT 22
74717: PUSH
74718: LD_INT 23
74720: PUSH
74721: LD_INT 25
74723: PUSH
74724: LD_INT 26
74726: PUSH
74727: LD_INT 30
74729: PUSH
74730: LD_INT 31
74732: PUSH
74733: LD_INT 32
74735: PUSH
74736: LD_INT 36
74738: PUSH
74739: EMPTY
74740: LIST
74741: LIST
74742: LIST
74743: LIST
74744: LIST
74745: LIST
74746: LIST
74747: LIST
74748: LIST
74749: LIST
74750: LIST
74751: LIST
74752: LIST
74753: LIST
74754: LIST
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: PUSH
74760: LD_INT 101
74762: PUSH
74763: LD_INT 102
74765: PUSH
74766: LD_INT 105
74768: PUSH
74769: LD_INT 106
74771: PUSH
74772: LD_INT 108
74774: PUSH
74775: LD_INT 109
74777: PUSH
74778: LD_INT 112
74780: PUSH
74781: LD_INT 116
74783: PUSH
74784: LD_INT 117
74786: PUSH
74787: LD_INT 118
74789: PUSH
74790: EMPTY
74791: LIST
74792: LIST
74793: LIST
74794: LIST
74795: LIST
74796: LIST
74797: LIST
74798: LIST
74799: LIST
74800: LIST
74801: PUSH
74802: EMPTY
74803: LIST
74804: LIST
74805: ST_TO_ADDR
74806: GO 77329
74808: LD_INT 7
74810: DOUBLE
74811: EQUAL
74812: IFTRUE 74816
74814: GO 74928
74816: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
74817: LD_ADDR_VAR 0 2
74821: PUSH
74822: LD_INT 2
74824: PUSH
74825: LD_INT 4
74827: PUSH
74828: LD_INT 5
74830: PUSH
74831: LD_INT 7
74833: PUSH
74834: LD_INT 11
74836: PUSH
74837: LD_INT 12
74839: PUSH
74840: LD_INT 15
74842: PUSH
74843: LD_INT 16
74845: PUSH
74846: LD_INT 20
74848: PUSH
74849: LD_INT 21
74851: PUSH
74852: LD_INT 22
74854: PUSH
74855: LD_INT 23
74857: PUSH
74858: LD_INT 25
74860: PUSH
74861: LD_INT 26
74863: PUSH
74864: EMPTY
74865: LIST
74866: LIST
74867: LIST
74868: LIST
74869: LIST
74870: LIST
74871: LIST
74872: LIST
74873: LIST
74874: LIST
74875: LIST
74876: LIST
74877: LIST
74878: LIST
74879: PUSH
74880: LD_INT 101
74882: PUSH
74883: LD_INT 102
74885: PUSH
74886: LD_INT 103
74888: PUSH
74889: LD_INT 105
74891: PUSH
74892: LD_INT 106
74894: PUSH
74895: LD_INT 108
74897: PUSH
74898: LD_INT 112
74900: PUSH
74901: LD_INT 116
74903: PUSH
74904: LD_INT 117
74906: PUSH
74907: LD_INT 118
74909: PUSH
74910: EMPTY
74911: LIST
74912: LIST
74913: LIST
74914: LIST
74915: LIST
74916: LIST
74917: LIST
74918: LIST
74919: LIST
74920: LIST
74921: PUSH
74922: EMPTY
74923: LIST
74924: LIST
74925: ST_TO_ADDR
74926: GO 77329
74928: LD_INT 8
74930: DOUBLE
74931: EQUAL
74932: IFTRUE 74936
74934: GO 75076
74936: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
74937: LD_ADDR_VAR 0 2
74941: PUSH
74942: LD_INT 2
74944: PUSH
74945: LD_INT 4
74947: PUSH
74948: LD_INT 5
74950: PUSH
74951: LD_INT 6
74953: PUSH
74954: LD_INT 7
74956: PUSH
74957: LD_INT 8
74959: PUSH
74960: LD_INT 11
74962: PUSH
74963: LD_INT 12
74965: PUSH
74966: LD_INT 15
74968: PUSH
74969: LD_INT 16
74971: PUSH
74972: LD_INT 20
74974: PUSH
74975: LD_INT 21
74977: PUSH
74978: LD_INT 22
74980: PUSH
74981: LD_INT 23
74983: PUSH
74984: LD_INT 25
74986: PUSH
74987: LD_INT 26
74989: PUSH
74990: LD_INT 30
74992: PUSH
74993: LD_INT 31
74995: PUSH
74996: LD_INT 32
74998: PUSH
74999: LD_INT 36
75001: PUSH
75002: EMPTY
75003: LIST
75004: LIST
75005: LIST
75006: LIST
75007: LIST
75008: LIST
75009: LIST
75010: LIST
75011: LIST
75012: LIST
75013: LIST
75014: LIST
75015: LIST
75016: LIST
75017: LIST
75018: LIST
75019: LIST
75020: LIST
75021: LIST
75022: LIST
75023: PUSH
75024: LD_INT 101
75026: PUSH
75027: LD_INT 102
75029: PUSH
75030: LD_INT 103
75032: PUSH
75033: LD_INT 105
75035: PUSH
75036: LD_INT 106
75038: PUSH
75039: LD_INT 108
75041: PUSH
75042: LD_INT 109
75044: PUSH
75045: LD_INT 112
75047: PUSH
75048: LD_INT 116
75050: PUSH
75051: LD_INT 117
75053: PUSH
75054: LD_INT 118
75056: PUSH
75057: EMPTY
75058: LIST
75059: LIST
75060: LIST
75061: LIST
75062: LIST
75063: LIST
75064: LIST
75065: LIST
75066: LIST
75067: LIST
75068: LIST
75069: PUSH
75070: EMPTY
75071: LIST
75072: LIST
75073: ST_TO_ADDR
75074: GO 77329
75076: LD_INT 9
75078: DOUBLE
75079: EQUAL
75080: IFTRUE 75084
75082: GO 75232
75084: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
75085: LD_ADDR_VAR 0 2
75089: PUSH
75090: LD_INT 2
75092: PUSH
75093: LD_INT 4
75095: PUSH
75096: LD_INT 5
75098: PUSH
75099: LD_INT 6
75101: PUSH
75102: LD_INT 7
75104: PUSH
75105: LD_INT 8
75107: PUSH
75108: LD_INT 11
75110: PUSH
75111: LD_INT 12
75113: PUSH
75114: LD_INT 15
75116: PUSH
75117: LD_INT 16
75119: PUSH
75120: LD_INT 20
75122: PUSH
75123: LD_INT 21
75125: PUSH
75126: LD_INT 22
75128: PUSH
75129: LD_INT 23
75131: PUSH
75132: LD_INT 25
75134: PUSH
75135: LD_INT 26
75137: PUSH
75138: LD_INT 28
75140: PUSH
75141: LD_INT 30
75143: PUSH
75144: LD_INT 31
75146: PUSH
75147: LD_INT 32
75149: PUSH
75150: LD_INT 36
75152: PUSH
75153: EMPTY
75154: LIST
75155: LIST
75156: LIST
75157: LIST
75158: LIST
75159: LIST
75160: LIST
75161: LIST
75162: LIST
75163: LIST
75164: LIST
75165: LIST
75166: LIST
75167: LIST
75168: LIST
75169: LIST
75170: LIST
75171: LIST
75172: LIST
75173: LIST
75174: LIST
75175: PUSH
75176: LD_INT 101
75178: PUSH
75179: LD_INT 102
75181: PUSH
75182: LD_INT 103
75184: PUSH
75185: LD_INT 105
75187: PUSH
75188: LD_INT 106
75190: PUSH
75191: LD_INT 108
75193: PUSH
75194: LD_INT 109
75196: PUSH
75197: LD_INT 112
75199: PUSH
75200: LD_INT 114
75202: PUSH
75203: LD_INT 116
75205: PUSH
75206: LD_INT 117
75208: PUSH
75209: LD_INT 118
75211: PUSH
75212: EMPTY
75213: LIST
75214: LIST
75215: LIST
75216: LIST
75217: LIST
75218: LIST
75219: LIST
75220: LIST
75221: LIST
75222: LIST
75223: LIST
75224: LIST
75225: PUSH
75226: EMPTY
75227: LIST
75228: LIST
75229: ST_TO_ADDR
75230: GO 77329
75232: LD_INT 10
75234: DOUBLE
75235: EQUAL
75236: IFTRUE 75240
75238: GO 75436
75240: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
75241: LD_ADDR_VAR 0 2
75245: PUSH
75246: LD_INT 2
75248: PUSH
75249: LD_INT 4
75251: PUSH
75252: LD_INT 5
75254: PUSH
75255: LD_INT 6
75257: PUSH
75258: LD_INT 7
75260: PUSH
75261: LD_INT 8
75263: PUSH
75264: LD_INT 9
75266: PUSH
75267: LD_INT 10
75269: PUSH
75270: LD_INT 11
75272: PUSH
75273: LD_INT 12
75275: PUSH
75276: LD_INT 13
75278: PUSH
75279: LD_INT 14
75281: PUSH
75282: LD_INT 15
75284: PUSH
75285: LD_INT 16
75287: PUSH
75288: LD_INT 17
75290: PUSH
75291: LD_INT 18
75293: PUSH
75294: LD_INT 19
75296: PUSH
75297: LD_INT 20
75299: PUSH
75300: LD_INT 21
75302: PUSH
75303: LD_INT 22
75305: PUSH
75306: LD_INT 23
75308: PUSH
75309: LD_INT 24
75311: PUSH
75312: LD_INT 25
75314: PUSH
75315: LD_INT 26
75317: PUSH
75318: LD_INT 28
75320: PUSH
75321: LD_INT 30
75323: PUSH
75324: LD_INT 31
75326: PUSH
75327: LD_INT 32
75329: PUSH
75330: LD_INT 36
75332: PUSH
75333: EMPTY
75334: LIST
75335: LIST
75336: LIST
75337: LIST
75338: LIST
75339: LIST
75340: LIST
75341: LIST
75342: LIST
75343: LIST
75344: LIST
75345: LIST
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: PUSH
75364: LD_INT 101
75366: PUSH
75367: LD_INT 102
75369: PUSH
75370: LD_INT 103
75372: PUSH
75373: LD_INT 104
75375: PUSH
75376: LD_INT 105
75378: PUSH
75379: LD_INT 106
75381: PUSH
75382: LD_INT 107
75384: PUSH
75385: LD_INT 108
75387: PUSH
75388: LD_INT 109
75390: PUSH
75391: LD_INT 110
75393: PUSH
75394: LD_INT 111
75396: PUSH
75397: LD_INT 112
75399: PUSH
75400: LD_INT 114
75402: PUSH
75403: LD_INT 116
75405: PUSH
75406: LD_INT 117
75408: PUSH
75409: LD_INT 118
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: LIST
75416: LIST
75417: LIST
75418: LIST
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: LIST
75424: LIST
75425: LIST
75426: LIST
75427: LIST
75428: LIST
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: ST_TO_ADDR
75434: GO 77329
75436: LD_INT 11
75438: DOUBLE
75439: EQUAL
75440: IFTRUE 75444
75442: GO 75648
75444: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
75445: LD_ADDR_VAR 0 2
75449: PUSH
75450: LD_INT 2
75452: PUSH
75453: LD_INT 3
75455: PUSH
75456: LD_INT 4
75458: PUSH
75459: LD_INT 5
75461: PUSH
75462: LD_INT 6
75464: PUSH
75465: LD_INT 7
75467: PUSH
75468: LD_INT 8
75470: PUSH
75471: LD_INT 9
75473: PUSH
75474: LD_INT 10
75476: PUSH
75477: LD_INT 11
75479: PUSH
75480: LD_INT 12
75482: PUSH
75483: LD_INT 13
75485: PUSH
75486: LD_INT 14
75488: PUSH
75489: LD_INT 15
75491: PUSH
75492: LD_INT 16
75494: PUSH
75495: LD_INT 17
75497: PUSH
75498: LD_INT 18
75500: PUSH
75501: LD_INT 19
75503: PUSH
75504: LD_INT 20
75506: PUSH
75507: LD_INT 21
75509: PUSH
75510: LD_INT 22
75512: PUSH
75513: LD_INT 23
75515: PUSH
75516: LD_INT 24
75518: PUSH
75519: LD_INT 25
75521: PUSH
75522: LD_INT 26
75524: PUSH
75525: LD_INT 28
75527: PUSH
75528: LD_INT 30
75530: PUSH
75531: LD_INT 31
75533: PUSH
75534: LD_INT 32
75536: PUSH
75537: LD_INT 34
75539: PUSH
75540: LD_INT 36
75542: PUSH
75543: EMPTY
75544: LIST
75545: LIST
75546: LIST
75547: LIST
75548: LIST
75549: LIST
75550: LIST
75551: LIST
75552: LIST
75553: LIST
75554: LIST
75555: LIST
75556: LIST
75557: LIST
75558: LIST
75559: LIST
75560: LIST
75561: LIST
75562: LIST
75563: LIST
75564: LIST
75565: LIST
75566: LIST
75567: LIST
75568: LIST
75569: LIST
75570: LIST
75571: LIST
75572: LIST
75573: LIST
75574: LIST
75575: PUSH
75576: LD_INT 101
75578: PUSH
75579: LD_INT 102
75581: PUSH
75582: LD_INT 103
75584: PUSH
75585: LD_INT 104
75587: PUSH
75588: LD_INT 105
75590: PUSH
75591: LD_INT 106
75593: PUSH
75594: LD_INT 107
75596: PUSH
75597: LD_INT 108
75599: PUSH
75600: LD_INT 109
75602: PUSH
75603: LD_INT 110
75605: PUSH
75606: LD_INT 111
75608: PUSH
75609: LD_INT 112
75611: PUSH
75612: LD_INT 114
75614: PUSH
75615: LD_INT 116
75617: PUSH
75618: LD_INT 117
75620: PUSH
75621: LD_INT 118
75623: PUSH
75624: EMPTY
75625: LIST
75626: LIST
75627: LIST
75628: LIST
75629: LIST
75630: LIST
75631: LIST
75632: LIST
75633: LIST
75634: LIST
75635: LIST
75636: LIST
75637: LIST
75638: LIST
75639: LIST
75640: LIST
75641: PUSH
75642: EMPTY
75643: LIST
75644: LIST
75645: ST_TO_ADDR
75646: GO 77329
75648: LD_INT 12
75650: DOUBLE
75651: EQUAL
75652: IFTRUE 75656
75654: GO 75876
75656: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
75657: LD_ADDR_VAR 0 2
75661: PUSH
75662: LD_INT 1
75664: PUSH
75665: LD_INT 2
75667: PUSH
75668: LD_INT 3
75670: PUSH
75671: LD_INT 4
75673: PUSH
75674: LD_INT 5
75676: PUSH
75677: LD_INT 6
75679: PUSH
75680: LD_INT 7
75682: PUSH
75683: LD_INT 8
75685: PUSH
75686: LD_INT 9
75688: PUSH
75689: LD_INT 10
75691: PUSH
75692: LD_INT 11
75694: PUSH
75695: LD_INT 12
75697: PUSH
75698: LD_INT 13
75700: PUSH
75701: LD_INT 14
75703: PUSH
75704: LD_INT 15
75706: PUSH
75707: LD_INT 16
75709: PUSH
75710: LD_INT 17
75712: PUSH
75713: LD_INT 18
75715: PUSH
75716: LD_INT 19
75718: PUSH
75719: LD_INT 20
75721: PUSH
75722: LD_INT 21
75724: PUSH
75725: LD_INT 22
75727: PUSH
75728: LD_INT 23
75730: PUSH
75731: LD_INT 24
75733: PUSH
75734: LD_INT 25
75736: PUSH
75737: LD_INT 26
75739: PUSH
75740: LD_INT 27
75742: PUSH
75743: LD_INT 28
75745: PUSH
75746: LD_INT 30
75748: PUSH
75749: LD_INT 31
75751: PUSH
75752: LD_INT 32
75754: PUSH
75755: LD_INT 33
75757: PUSH
75758: LD_INT 34
75760: PUSH
75761: LD_INT 36
75763: PUSH
75764: EMPTY
75765: LIST
75766: LIST
75767: LIST
75768: LIST
75769: LIST
75770: LIST
75771: LIST
75772: LIST
75773: LIST
75774: LIST
75775: LIST
75776: LIST
75777: LIST
75778: LIST
75779: LIST
75780: LIST
75781: LIST
75782: LIST
75783: LIST
75784: LIST
75785: LIST
75786: LIST
75787: LIST
75788: LIST
75789: LIST
75790: LIST
75791: LIST
75792: LIST
75793: LIST
75794: LIST
75795: LIST
75796: LIST
75797: LIST
75798: LIST
75799: PUSH
75800: LD_INT 101
75802: PUSH
75803: LD_INT 102
75805: PUSH
75806: LD_INT 103
75808: PUSH
75809: LD_INT 104
75811: PUSH
75812: LD_INT 105
75814: PUSH
75815: LD_INT 106
75817: PUSH
75818: LD_INT 107
75820: PUSH
75821: LD_INT 108
75823: PUSH
75824: LD_INT 109
75826: PUSH
75827: LD_INT 110
75829: PUSH
75830: LD_INT 111
75832: PUSH
75833: LD_INT 112
75835: PUSH
75836: LD_INT 113
75838: PUSH
75839: LD_INT 114
75841: PUSH
75842: LD_INT 116
75844: PUSH
75845: LD_INT 117
75847: PUSH
75848: LD_INT 118
75850: PUSH
75851: EMPTY
75852: LIST
75853: LIST
75854: LIST
75855: LIST
75856: LIST
75857: LIST
75858: LIST
75859: LIST
75860: LIST
75861: LIST
75862: LIST
75863: LIST
75864: LIST
75865: LIST
75866: LIST
75867: LIST
75868: LIST
75869: PUSH
75870: EMPTY
75871: LIST
75872: LIST
75873: ST_TO_ADDR
75874: GO 77329
75876: LD_INT 13
75878: DOUBLE
75879: EQUAL
75880: IFTRUE 75884
75882: GO 76092
75884: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
75885: LD_ADDR_VAR 0 2
75889: PUSH
75890: LD_INT 1
75892: PUSH
75893: LD_INT 2
75895: PUSH
75896: LD_INT 3
75898: PUSH
75899: LD_INT 4
75901: PUSH
75902: LD_INT 5
75904: PUSH
75905: LD_INT 8
75907: PUSH
75908: LD_INT 9
75910: PUSH
75911: LD_INT 10
75913: PUSH
75914: LD_INT 11
75916: PUSH
75917: LD_INT 12
75919: PUSH
75920: LD_INT 14
75922: PUSH
75923: LD_INT 15
75925: PUSH
75926: LD_INT 16
75928: PUSH
75929: LD_INT 17
75931: PUSH
75932: LD_INT 18
75934: PUSH
75935: LD_INT 19
75937: PUSH
75938: LD_INT 20
75940: PUSH
75941: LD_INT 21
75943: PUSH
75944: LD_INT 22
75946: PUSH
75947: LD_INT 23
75949: PUSH
75950: LD_INT 24
75952: PUSH
75953: LD_INT 25
75955: PUSH
75956: LD_INT 26
75958: PUSH
75959: LD_INT 27
75961: PUSH
75962: LD_INT 28
75964: PUSH
75965: LD_INT 30
75967: PUSH
75968: LD_INT 31
75970: PUSH
75971: LD_INT 32
75973: PUSH
75974: LD_INT 33
75976: PUSH
75977: LD_INT 34
75979: PUSH
75980: LD_INT 36
75982: PUSH
75983: EMPTY
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: LIST
75991: LIST
75992: LIST
75993: LIST
75994: LIST
75995: LIST
75996: LIST
75997: LIST
75998: LIST
75999: LIST
76000: LIST
76001: LIST
76002: LIST
76003: LIST
76004: LIST
76005: LIST
76006: LIST
76007: LIST
76008: LIST
76009: LIST
76010: LIST
76011: LIST
76012: LIST
76013: LIST
76014: LIST
76015: PUSH
76016: LD_INT 101
76018: PUSH
76019: LD_INT 102
76021: PUSH
76022: LD_INT 103
76024: PUSH
76025: LD_INT 104
76027: PUSH
76028: LD_INT 105
76030: PUSH
76031: LD_INT 106
76033: PUSH
76034: LD_INT 107
76036: PUSH
76037: LD_INT 108
76039: PUSH
76040: LD_INT 109
76042: PUSH
76043: LD_INT 110
76045: PUSH
76046: LD_INT 111
76048: PUSH
76049: LD_INT 112
76051: PUSH
76052: LD_INT 113
76054: PUSH
76055: LD_INT 114
76057: PUSH
76058: LD_INT 116
76060: PUSH
76061: LD_INT 117
76063: PUSH
76064: LD_INT 118
76066: PUSH
76067: EMPTY
76068: LIST
76069: LIST
76070: LIST
76071: LIST
76072: LIST
76073: LIST
76074: LIST
76075: LIST
76076: LIST
76077: LIST
76078: LIST
76079: LIST
76080: LIST
76081: LIST
76082: LIST
76083: LIST
76084: LIST
76085: PUSH
76086: EMPTY
76087: LIST
76088: LIST
76089: ST_TO_ADDR
76090: GO 77329
76092: LD_INT 14
76094: DOUBLE
76095: EQUAL
76096: IFTRUE 76100
76098: GO 76324
76100: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
76101: LD_ADDR_VAR 0 2
76105: PUSH
76106: LD_INT 1
76108: PUSH
76109: LD_INT 2
76111: PUSH
76112: LD_INT 3
76114: PUSH
76115: LD_INT 4
76117: PUSH
76118: LD_INT 5
76120: PUSH
76121: LD_INT 6
76123: PUSH
76124: LD_INT 7
76126: PUSH
76127: LD_INT 8
76129: PUSH
76130: LD_INT 9
76132: PUSH
76133: LD_INT 10
76135: PUSH
76136: LD_INT 11
76138: PUSH
76139: LD_INT 12
76141: PUSH
76142: LD_INT 13
76144: PUSH
76145: LD_INT 14
76147: PUSH
76148: LD_INT 15
76150: PUSH
76151: LD_INT 16
76153: PUSH
76154: LD_INT 17
76156: PUSH
76157: LD_INT 18
76159: PUSH
76160: LD_INT 19
76162: PUSH
76163: LD_INT 20
76165: PUSH
76166: LD_INT 21
76168: PUSH
76169: LD_INT 22
76171: PUSH
76172: LD_INT 23
76174: PUSH
76175: LD_INT 24
76177: PUSH
76178: LD_INT 25
76180: PUSH
76181: LD_INT 26
76183: PUSH
76184: LD_INT 27
76186: PUSH
76187: LD_INT 28
76189: PUSH
76190: LD_INT 29
76192: PUSH
76193: LD_INT 30
76195: PUSH
76196: LD_INT 31
76198: PUSH
76199: LD_INT 32
76201: PUSH
76202: LD_INT 33
76204: PUSH
76205: LD_INT 34
76207: PUSH
76208: LD_INT 36
76210: PUSH
76211: EMPTY
76212: LIST
76213: LIST
76214: LIST
76215: LIST
76216: LIST
76217: LIST
76218: LIST
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: LIST
76224: LIST
76225: LIST
76226: LIST
76227: LIST
76228: LIST
76229: LIST
76230: LIST
76231: LIST
76232: LIST
76233: LIST
76234: LIST
76235: LIST
76236: LIST
76237: LIST
76238: LIST
76239: LIST
76240: LIST
76241: LIST
76242: LIST
76243: LIST
76244: LIST
76245: LIST
76246: LIST
76247: PUSH
76248: LD_INT 101
76250: PUSH
76251: LD_INT 102
76253: PUSH
76254: LD_INT 103
76256: PUSH
76257: LD_INT 104
76259: PUSH
76260: LD_INT 105
76262: PUSH
76263: LD_INT 106
76265: PUSH
76266: LD_INT 107
76268: PUSH
76269: LD_INT 108
76271: PUSH
76272: LD_INT 109
76274: PUSH
76275: LD_INT 110
76277: PUSH
76278: LD_INT 111
76280: PUSH
76281: LD_INT 112
76283: PUSH
76284: LD_INT 113
76286: PUSH
76287: LD_INT 114
76289: PUSH
76290: LD_INT 116
76292: PUSH
76293: LD_INT 117
76295: PUSH
76296: LD_INT 118
76298: PUSH
76299: EMPTY
76300: LIST
76301: LIST
76302: LIST
76303: LIST
76304: LIST
76305: LIST
76306: LIST
76307: LIST
76308: LIST
76309: LIST
76310: LIST
76311: LIST
76312: LIST
76313: LIST
76314: LIST
76315: LIST
76316: LIST
76317: PUSH
76318: EMPTY
76319: LIST
76320: LIST
76321: ST_TO_ADDR
76322: GO 77329
76324: LD_INT 15
76326: DOUBLE
76327: EQUAL
76328: IFTRUE 76332
76330: GO 76556
76332: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
76333: LD_ADDR_VAR 0 2
76337: PUSH
76338: LD_INT 1
76340: PUSH
76341: LD_INT 2
76343: PUSH
76344: LD_INT 3
76346: PUSH
76347: LD_INT 4
76349: PUSH
76350: LD_INT 5
76352: PUSH
76353: LD_INT 6
76355: PUSH
76356: LD_INT 7
76358: PUSH
76359: LD_INT 8
76361: PUSH
76362: LD_INT 9
76364: PUSH
76365: LD_INT 10
76367: PUSH
76368: LD_INT 11
76370: PUSH
76371: LD_INT 12
76373: PUSH
76374: LD_INT 13
76376: PUSH
76377: LD_INT 14
76379: PUSH
76380: LD_INT 15
76382: PUSH
76383: LD_INT 16
76385: PUSH
76386: LD_INT 17
76388: PUSH
76389: LD_INT 18
76391: PUSH
76392: LD_INT 19
76394: PUSH
76395: LD_INT 20
76397: PUSH
76398: LD_INT 21
76400: PUSH
76401: LD_INT 22
76403: PUSH
76404: LD_INT 23
76406: PUSH
76407: LD_INT 24
76409: PUSH
76410: LD_INT 25
76412: PUSH
76413: LD_INT 26
76415: PUSH
76416: LD_INT 27
76418: PUSH
76419: LD_INT 28
76421: PUSH
76422: LD_INT 29
76424: PUSH
76425: LD_INT 30
76427: PUSH
76428: LD_INT 31
76430: PUSH
76431: LD_INT 32
76433: PUSH
76434: LD_INT 33
76436: PUSH
76437: LD_INT 34
76439: PUSH
76440: LD_INT 36
76442: PUSH
76443: EMPTY
76444: LIST
76445: LIST
76446: LIST
76447: LIST
76448: LIST
76449: LIST
76450: LIST
76451: LIST
76452: LIST
76453: LIST
76454: LIST
76455: LIST
76456: LIST
76457: LIST
76458: LIST
76459: LIST
76460: LIST
76461: LIST
76462: LIST
76463: LIST
76464: LIST
76465: LIST
76466: LIST
76467: LIST
76468: LIST
76469: LIST
76470: LIST
76471: LIST
76472: LIST
76473: LIST
76474: LIST
76475: LIST
76476: LIST
76477: LIST
76478: LIST
76479: PUSH
76480: LD_INT 101
76482: PUSH
76483: LD_INT 102
76485: PUSH
76486: LD_INT 103
76488: PUSH
76489: LD_INT 104
76491: PUSH
76492: LD_INT 105
76494: PUSH
76495: LD_INT 106
76497: PUSH
76498: LD_INT 107
76500: PUSH
76501: LD_INT 108
76503: PUSH
76504: LD_INT 109
76506: PUSH
76507: LD_INT 110
76509: PUSH
76510: LD_INT 111
76512: PUSH
76513: LD_INT 112
76515: PUSH
76516: LD_INT 113
76518: PUSH
76519: LD_INT 114
76521: PUSH
76522: LD_INT 116
76524: PUSH
76525: LD_INT 117
76527: PUSH
76528: LD_INT 118
76530: PUSH
76531: EMPTY
76532: LIST
76533: LIST
76534: LIST
76535: LIST
76536: LIST
76537: LIST
76538: LIST
76539: LIST
76540: LIST
76541: LIST
76542: LIST
76543: LIST
76544: LIST
76545: LIST
76546: LIST
76547: LIST
76548: LIST
76549: PUSH
76550: EMPTY
76551: LIST
76552: LIST
76553: ST_TO_ADDR
76554: GO 77329
76556: LD_INT 16
76558: DOUBLE
76559: EQUAL
76560: IFTRUE 76564
76562: GO 76700
76564: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
76565: LD_ADDR_VAR 0 2
76569: PUSH
76570: LD_INT 2
76572: PUSH
76573: LD_INT 4
76575: PUSH
76576: LD_INT 5
76578: PUSH
76579: LD_INT 7
76581: PUSH
76582: LD_INT 11
76584: PUSH
76585: LD_INT 12
76587: PUSH
76588: LD_INT 15
76590: PUSH
76591: LD_INT 16
76593: PUSH
76594: LD_INT 20
76596: PUSH
76597: LD_INT 21
76599: PUSH
76600: LD_INT 22
76602: PUSH
76603: LD_INT 23
76605: PUSH
76606: LD_INT 25
76608: PUSH
76609: LD_INT 26
76611: PUSH
76612: LD_INT 30
76614: PUSH
76615: LD_INT 31
76617: PUSH
76618: LD_INT 32
76620: PUSH
76621: LD_INT 33
76623: PUSH
76624: LD_INT 34
76626: PUSH
76627: EMPTY
76628: LIST
76629: LIST
76630: LIST
76631: LIST
76632: LIST
76633: LIST
76634: LIST
76635: LIST
76636: LIST
76637: LIST
76638: LIST
76639: LIST
76640: LIST
76641: LIST
76642: LIST
76643: LIST
76644: LIST
76645: LIST
76646: LIST
76647: PUSH
76648: LD_INT 101
76650: PUSH
76651: LD_INT 102
76653: PUSH
76654: LD_INT 103
76656: PUSH
76657: LD_INT 106
76659: PUSH
76660: LD_INT 108
76662: PUSH
76663: LD_INT 112
76665: PUSH
76666: LD_INT 113
76668: PUSH
76669: LD_INT 114
76671: PUSH
76672: LD_INT 116
76674: PUSH
76675: LD_INT 117
76677: PUSH
76678: LD_INT 118
76680: PUSH
76681: EMPTY
76682: LIST
76683: LIST
76684: LIST
76685: LIST
76686: LIST
76687: LIST
76688: LIST
76689: LIST
76690: LIST
76691: LIST
76692: LIST
76693: PUSH
76694: EMPTY
76695: LIST
76696: LIST
76697: ST_TO_ADDR
76698: GO 77329
76700: LD_INT 17
76702: DOUBLE
76703: EQUAL
76704: IFTRUE 76708
76706: GO 76932
76708: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
76709: LD_ADDR_VAR 0 2
76713: PUSH
76714: LD_INT 1
76716: PUSH
76717: LD_INT 2
76719: PUSH
76720: LD_INT 3
76722: PUSH
76723: LD_INT 4
76725: PUSH
76726: LD_INT 5
76728: PUSH
76729: LD_INT 6
76731: PUSH
76732: LD_INT 7
76734: PUSH
76735: LD_INT 8
76737: PUSH
76738: LD_INT 9
76740: PUSH
76741: LD_INT 10
76743: PUSH
76744: LD_INT 11
76746: PUSH
76747: LD_INT 12
76749: PUSH
76750: LD_INT 13
76752: PUSH
76753: LD_INT 14
76755: PUSH
76756: LD_INT 15
76758: PUSH
76759: LD_INT 16
76761: PUSH
76762: LD_INT 17
76764: PUSH
76765: LD_INT 18
76767: PUSH
76768: LD_INT 19
76770: PUSH
76771: LD_INT 20
76773: PUSH
76774: LD_INT 21
76776: PUSH
76777: LD_INT 22
76779: PUSH
76780: LD_INT 23
76782: PUSH
76783: LD_INT 24
76785: PUSH
76786: LD_INT 25
76788: PUSH
76789: LD_INT 26
76791: PUSH
76792: LD_INT 27
76794: PUSH
76795: LD_INT 28
76797: PUSH
76798: LD_INT 29
76800: PUSH
76801: LD_INT 30
76803: PUSH
76804: LD_INT 31
76806: PUSH
76807: LD_INT 32
76809: PUSH
76810: LD_INT 33
76812: PUSH
76813: LD_INT 34
76815: PUSH
76816: LD_INT 36
76818: PUSH
76819: EMPTY
76820: LIST
76821: LIST
76822: LIST
76823: LIST
76824: LIST
76825: LIST
76826: LIST
76827: LIST
76828: LIST
76829: LIST
76830: LIST
76831: LIST
76832: LIST
76833: LIST
76834: LIST
76835: LIST
76836: LIST
76837: LIST
76838: LIST
76839: LIST
76840: LIST
76841: LIST
76842: LIST
76843: LIST
76844: LIST
76845: LIST
76846: LIST
76847: LIST
76848: LIST
76849: LIST
76850: LIST
76851: LIST
76852: LIST
76853: LIST
76854: LIST
76855: PUSH
76856: LD_INT 101
76858: PUSH
76859: LD_INT 102
76861: PUSH
76862: LD_INT 103
76864: PUSH
76865: LD_INT 104
76867: PUSH
76868: LD_INT 105
76870: PUSH
76871: LD_INT 106
76873: PUSH
76874: LD_INT 107
76876: PUSH
76877: LD_INT 108
76879: PUSH
76880: LD_INT 109
76882: PUSH
76883: LD_INT 110
76885: PUSH
76886: LD_INT 111
76888: PUSH
76889: LD_INT 112
76891: PUSH
76892: LD_INT 113
76894: PUSH
76895: LD_INT 114
76897: PUSH
76898: LD_INT 116
76900: PUSH
76901: LD_INT 117
76903: PUSH
76904: LD_INT 118
76906: PUSH
76907: EMPTY
76908: LIST
76909: LIST
76910: LIST
76911: LIST
76912: LIST
76913: LIST
76914: LIST
76915: LIST
76916: LIST
76917: LIST
76918: LIST
76919: LIST
76920: LIST
76921: LIST
76922: LIST
76923: LIST
76924: LIST
76925: PUSH
76926: EMPTY
76927: LIST
76928: LIST
76929: ST_TO_ADDR
76930: GO 77329
76932: LD_INT 18
76934: DOUBLE
76935: EQUAL
76936: IFTRUE 76940
76938: GO 77088
76940: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
76941: LD_ADDR_VAR 0 2
76945: PUSH
76946: LD_INT 2
76948: PUSH
76949: LD_INT 4
76951: PUSH
76952: LD_INT 5
76954: PUSH
76955: LD_INT 7
76957: PUSH
76958: LD_INT 11
76960: PUSH
76961: LD_INT 12
76963: PUSH
76964: LD_INT 15
76966: PUSH
76967: LD_INT 16
76969: PUSH
76970: LD_INT 20
76972: PUSH
76973: LD_INT 21
76975: PUSH
76976: LD_INT 22
76978: PUSH
76979: LD_INT 23
76981: PUSH
76982: LD_INT 25
76984: PUSH
76985: LD_INT 26
76987: PUSH
76988: LD_INT 30
76990: PUSH
76991: LD_INT 31
76993: PUSH
76994: LD_INT 32
76996: PUSH
76997: LD_INT 33
76999: PUSH
77000: LD_INT 34
77002: PUSH
77003: LD_INT 35
77005: PUSH
77006: LD_INT 36
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: LIST
77013: LIST
77014: LIST
77015: LIST
77016: LIST
77017: LIST
77018: LIST
77019: LIST
77020: LIST
77021: LIST
77022: LIST
77023: LIST
77024: LIST
77025: LIST
77026: LIST
77027: LIST
77028: LIST
77029: LIST
77030: LIST
77031: PUSH
77032: LD_INT 101
77034: PUSH
77035: LD_INT 102
77037: PUSH
77038: LD_INT 103
77040: PUSH
77041: LD_INT 106
77043: PUSH
77044: LD_INT 108
77046: PUSH
77047: LD_INT 112
77049: PUSH
77050: LD_INT 113
77052: PUSH
77053: LD_INT 114
77055: PUSH
77056: LD_INT 115
77058: PUSH
77059: LD_INT 116
77061: PUSH
77062: LD_INT 117
77064: PUSH
77065: LD_INT 118
77067: PUSH
77068: EMPTY
77069: LIST
77070: LIST
77071: LIST
77072: LIST
77073: LIST
77074: LIST
77075: LIST
77076: LIST
77077: LIST
77078: LIST
77079: LIST
77080: LIST
77081: PUSH
77082: EMPTY
77083: LIST
77084: LIST
77085: ST_TO_ADDR
77086: GO 77329
77088: LD_INT 19
77090: DOUBLE
77091: EQUAL
77092: IFTRUE 77096
77094: GO 77328
77096: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
77097: LD_ADDR_VAR 0 2
77101: PUSH
77102: LD_INT 1
77104: PUSH
77105: LD_INT 2
77107: PUSH
77108: LD_INT 3
77110: PUSH
77111: LD_INT 4
77113: PUSH
77114: LD_INT 5
77116: PUSH
77117: LD_INT 6
77119: PUSH
77120: LD_INT 7
77122: PUSH
77123: LD_INT 8
77125: PUSH
77126: LD_INT 9
77128: PUSH
77129: LD_INT 10
77131: PUSH
77132: LD_INT 11
77134: PUSH
77135: LD_INT 12
77137: PUSH
77138: LD_INT 13
77140: PUSH
77141: LD_INT 14
77143: PUSH
77144: LD_INT 15
77146: PUSH
77147: LD_INT 16
77149: PUSH
77150: LD_INT 17
77152: PUSH
77153: LD_INT 18
77155: PUSH
77156: LD_INT 19
77158: PUSH
77159: LD_INT 20
77161: PUSH
77162: LD_INT 21
77164: PUSH
77165: LD_INT 22
77167: PUSH
77168: LD_INT 23
77170: PUSH
77171: LD_INT 24
77173: PUSH
77174: LD_INT 25
77176: PUSH
77177: LD_INT 26
77179: PUSH
77180: LD_INT 27
77182: PUSH
77183: LD_INT 28
77185: PUSH
77186: LD_INT 29
77188: PUSH
77189: LD_INT 30
77191: PUSH
77192: LD_INT 31
77194: PUSH
77195: LD_INT 32
77197: PUSH
77198: LD_INT 33
77200: PUSH
77201: LD_INT 34
77203: PUSH
77204: LD_INT 35
77206: PUSH
77207: LD_INT 36
77209: PUSH
77210: EMPTY
77211: LIST
77212: LIST
77213: LIST
77214: LIST
77215: LIST
77216: LIST
77217: LIST
77218: LIST
77219: LIST
77220: LIST
77221: LIST
77222: LIST
77223: LIST
77224: LIST
77225: LIST
77226: LIST
77227: LIST
77228: LIST
77229: LIST
77230: LIST
77231: LIST
77232: LIST
77233: LIST
77234: LIST
77235: LIST
77236: LIST
77237: LIST
77238: LIST
77239: LIST
77240: LIST
77241: LIST
77242: LIST
77243: LIST
77244: LIST
77245: LIST
77246: LIST
77247: PUSH
77248: LD_INT 101
77250: PUSH
77251: LD_INT 102
77253: PUSH
77254: LD_INT 103
77256: PUSH
77257: LD_INT 104
77259: PUSH
77260: LD_INT 105
77262: PUSH
77263: LD_INT 106
77265: PUSH
77266: LD_INT 107
77268: PUSH
77269: LD_INT 108
77271: PUSH
77272: LD_INT 109
77274: PUSH
77275: LD_INT 110
77277: PUSH
77278: LD_INT 111
77280: PUSH
77281: LD_INT 112
77283: PUSH
77284: LD_INT 113
77286: PUSH
77287: LD_INT 114
77289: PUSH
77290: LD_INT 115
77292: PUSH
77293: LD_INT 116
77295: PUSH
77296: LD_INT 117
77298: PUSH
77299: LD_INT 118
77301: PUSH
77302: EMPTY
77303: LIST
77304: LIST
77305: LIST
77306: LIST
77307: LIST
77308: LIST
77309: LIST
77310: LIST
77311: LIST
77312: LIST
77313: LIST
77314: LIST
77315: LIST
77316: LIST
77317: LIST
77318: LIST
77319: LIST
77320: LIST
77321: PUSH
77322: EMPTY
77323: LIST
77324: LIST
77325: ST_TO_ADDR
77326: GO 77329
77328: POP
// end else
77329: GO 77560
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
77331: LD_ADDR_VAR 0 2
77335: PUSH
77336: LD_INT 1
77338: PUSH
77339: LD_INT 2
77341: PUSH
77342: LD_INT 3
77344: PUSH
77345: LD_INT 4
77347: PUSH
77348: LD_INT 5
77350: PUSH
77351: LD_INT 6
77353: PUSH
77354: LD_INT 7
77356: PUSH
77357: LD_INT 8
77359: PUSH
77360: LD_INT 9
77362: PUSH
77363: LD_INT 10
77365: PUSH
77366: LD_INT 11
77368: PUSH
77369: LD_INT 12
77371: PUSH
77372: LD_INT 13
77374: PUSH
77375: LD_INT 14
77377: PUSH
77378: LD_INT 15
77380: PUSH
77381: LD_INT 16
77383: PUSH
77384: LD_INT 17
77386: PUSH
77387: LD_INT 18
77389: PUSH
77390: LD_INT 19
77392: PUSH
77393: LD_INT 20
77395: PUSH
77396: LD_INT 21
77398: PUSH
77399: LD_INT 22
77401: PUSH
77402: LD_INT 23
77404: PUSH
77405: LD_INT 24
77407: PUSH
77408: LD_INT 25
77410: PUSH
77411: LD_INT 26
77413: PUSH
77414: LD_INT 27
77416: PUSH
77417: LD_INT 28
77419: PUSH
77420: LD_INT 29
77422: PUSH
77423: LD_INT 30
77425: PUSH
77426: LD_INT 31
77428: PUSH
77429: LD_INT 32
77431: PUSH
77432: LD_INT 33
77434: PUSH
77435: LD_INT 34
77437: PUSH
77438: LD_INT 35
77440: PUSH
77441: LD_INT 36
77443: PUSH
77444: EMPTY
77445: LIST
77446: LIST
77447: LIST
77448: LIST
77449: LIST
77450: LIST
77451: LIST
77452: LIST
77453: LIST
77454: LIST
77455: LIST
77456: LIST
77457: LIST
77458: LIST
77459: LIST
77460: LIST
77461: LIST
77462: LIST
77463: LIST
77464: LIST
77465: LIST
77466: LIST
77467: LIST
77468: LIST
77469: LIST
77470: LIST
77471: LIST
77472: LIST
77473: LIST
77474: LIST
77475: LIST
77476: LIST
77477: LIST
77478: LIST
77479: LIST
77480: LIST
77481: PUSH
77482: LD_INT 101
77484: PUSH
77485: LD_INT 102
77487: PUSH
77488: LD_INT 103
77490: PUSH
77491: LD_INT 104
77493: PUSH
77494: LD_INT 105
77496: PUSH
77497: LD_INT 106
77499: PUSH
77500: LD_INT 107
77502: PUSH
77503: LD_INT 108
77505: PUSH
77506: LD_INT 109
77508: PUSH
77509: LD_INT 110
77511: PUSH
77512: LD_INT 111
77514: PUSH
77515: LD_INT 112
77517: PUSH
77518: LD_INT 113
77520: PUSH
77521: LD_INT 114
77523: PUSH
77524: LD_INT 115
77526: PUSH
77527: LD_INT 116
77529: PUSH
77530: LD_INT 117
77532: PUSH
77533: LD_INT 118
77535: PUSH
77536: EMPTY
77537: LIST
77538: LIST
77539: LIST
77540: LIST
77541: LIST
77542: LIST
77543: LIST
77544: LIST
77545: LIST
77546: LIST
77547: LIST
77548: LIST
77549: LIST
77550: LIST
77551: LIST
77552: LIST
77553: LIST
77554: LIST
77555: PUSH
77556: EMPTY
77557: LIST
77558: LIST
77559: ST_TO_ADDR
// if result then
77560: LD_VAR 0 2
77564: IFFALSE 78350
// begin normal :=  ;
77566: LD_ADDR_VAR 0 5
77570: PUSH
77571: LD_STRING 
77573: ST_TO_ADDR
// hardcore :=  ;
77574: LD_ADDR_VAR 0 6
77578: PUSH
77579: LD_STRING 
77581: ST_TO_ADDR
// active :=  ;
77582: LD_ADDR_VAR 0 7
77586: PUSH
77587: LD_STRING 
77589: ST_TO_ADDR
// for i = 1 to normalCounter do
77590: LD_ADDR_VAR 0 8
77594: PUSH
77595: DOUBLE
77596: LD_INT 1
77598: DEC
77599: ST_TO_ADDR
77600: LD_EXP 76
77604: PUSH
77605: FOR_TO
77606: IFFALSE 77707
// begin tmp := 0 ;
77608: LD_ADDR_VAR 0 3
77612: PUSH
77613: LD_STRING 0
77615: ST_TO_ADDR
// if result [ 1 ] then
77616: LD_VAR 0 2
77620: PUSH
77621: LD_INT 1
77623: ARRAY
77624: IFFALSE 77689
// if result [ 1 ] [ 1 ] = i then
77626: LD_VAR 0 2
77630: PUSH
77631: LD_INT 1
77633: ARRAY
77634: PUSH
77635: LD_INT 1
77637: ARRAY
77638: PUSH
77639: LD_VAR 0 8
77643: EQUAL
77644: IFFALSE 77689
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
77646: LD_ADDR_VAR 0 2
77650: PUSH
77651: LD_VAR 0 2
77655: PPUSH
77656: LD_INT 1
77658: PPUSH
77659: LD_VAR 0 2
77663: PUSH
77664: LD_INT 1
77666: ARRAY
77667: PPUSH
77668: LD_INT 1
77670: PPUSH
77671: CALL_OW 3
77675: PPUSH
77676: CALL_OW 1
77680: ST_TO_ADDR
// tmp := 1 ;
77681: LD_ADDR_VAR 0 3
77685: PUSH
77686: LD_STRING 1
77688: ST_TO_ADDR
// end ; normal := normal & tmp ;
77689: LD_ADDR_VAR 0 5
77693: PUSH
77694: LD_VAR 0 5
77698: PUSH
77699: LD_VAR 0 3
77703: STR
77704: ST_TO_ADDR
// end ;
77705: GO 77605
77707: POP
77708: POP
// for i = 1 to hardcoreCounter do
77709: LD_ADDR_VAR 0 8
77713: PUSH
77714: DOUBLE
77715: LD_INT 1
77717: DEC
77718: ST_TO_ADDR
77719: LD_EXP 77
77723: PUSH
77724: FOR_TO
77725: IFFALSE 77830
// begin tmp := 0 ;
77727: LD_ADDR_VAR 0 3
77731: PUSH
77732: LD_STRING 0
77734: ST_TO_ADDR
// if result [ 2 ] then
77735: LD_VAR 0 2
77739: PUSH
77740: LD_INT 2
77742: ARRAY
77743: IFFALSE 77812
// if result [ 2 ] [ 1 ] = 100 + i then
77745: LD_VAR 0 2
77749: PUSH
77750: LD_INT 2
77752: ARRAY
77753: PUSH
77754: LD_INT 1
77756: ARRAY
77757: PUSH
77758: LD_INT 100
77760: PUSH
77761: LD_VAR 0 8
77765: PLUS
77766: EQUAL
77767: IFFALSE 77812
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
77769: LD_ADDR_VAR 0 2
77773: PUSH
77774: LD_VAR 0 2
77778: PPUSH
77779: LD_INT 2
77781: PPUSH
77782: LD_VAR 0 2
77786: PUSH
77787: LD_INT 2
77789: ARRAY
77790: PPUSH
77791: LD_INT 1
77793: PPUSH
77794: CALL_OW 3
77798: PPUSH
77799: CALL_OW 1
77803: ST_TO_ADDR
// tmp := 1 ;
77804: LD_ADDR_VAR 0 3
77808: PUSH
77809: LD_STRING 1
77811: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
77812: LD_ADDR_VAR 0 6
77816: PUSH
77817: LD_VAR 0 6
77821: PUSH
77822: LD_VAR 0 3
77826: STR
77827: ST_TO_ADDR
// end ;
77828: GO 77724
77830: POP
77831: POP
// if isGameLoad then
77832: LD_VAR 0 1
77836: IFFALSE 78311
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
77838: LD_ADDR_VAR 0 4
77842: PUSH
77843: LD_EXP 80
77847: PUSH
77848: LD_EXP 79
77852: PUSH
77853: LD_EXP 81
77857: PUSH
77858: LD_EXP 78
77862: PUSH
77863: LD_EXP 82
77867: PUSH
77868: LD_EXP 83
77872: PUSH
77873: LD_EXP 84
77877: PUSH
77878: LD_EXP 85
77882: PUSH
77883: LD_EXP 86
77887: PUSH
77888: LD_EXP 87
77892: PUSH
77893: LD_EXP 88
77897: PUSH
77898: LD_EXP 89
77902: PUSH
77903: LD_EXP 90
77907: PUSH
77908: LD_EXP 91
77912: PUSH
77913: LD_EXP 99
77917: PUSH
77918: LD_EXP 100
77922: PUSH
77923: LD_EXP 101
77927: PUSH
77928: LD_EXP 102
77932: PUSH
77933: LD_EXP 104
77937: PUSH
77938: LD_EXP 105
77942: PUSH
77943: LD_EXP 106
77947: PUSH
77948: LD_EXP 109
77952: PUSH
77953: LD_EXP 111
77957: PUSH
77958: LD_EXP 112
77962: PUSH
77963: LD_EXP 113
77967: PUSH
77968: LD_EXP 115
77972: PUSH
77973: LD_EXP 116
77977: PUSH
77978: LD_EXP 119
77982: PUSH
77983: LD_EXP 120
77987: PUSH
77988: LD_EXP 121
77992: PUSH
77993: LD_EXP 122
77997: PUSH
77998: LD_EXP 123
78002: PUSH
78003: LD_EXP 124
78007: PUSH
78008: LD_EXP 125
78012: PUSH
78013: LD_EXP 126
78017: PUSH
78018: LD_EXP 127
78022: PUSH
78023: LD_EXP 92
78027: PUSH
78028: LD_EXP 93
78032: PUSH
78033: LD_EXP 96
78037: PUSH
78038: LD_EXP 97
78042: PUSH
78043: LD_EXP 98
78047: PUSH
78048: LD_EXP 94
78052: PUSH
78053: LD_EXP 95
78057: PUSH
78058: LD_EXP 103
78062: PUSH
78063: LD_EXP 107
78067: PUSH
78068: LD_EXP 108
78072: PUSH
78073: LD_EXP 110
78077: PUSH
78078: LD_EXP 114
78082: PUSH
78083: LD_EXP 117
78087: PUSH
78088: LD_EXP 118
78092: PUSH
78093: LD_EXP 128
78097: PUSH
78098: LD_EXP 129
78102: PUSH
78103: LD_EXP 130
78107: PUSH
78108: LD_EXP 131
78112: PUSH
78113: EMPTY
78114: LIST
78115: LIST
78116: LIST
78117: LIST
78118: LIST
78119: LIST
78120: LIST
78121: LIST
78122: LIST
78123: LIST
78124: LIST
78125: LIST
78126: LIST
78127: LIST
78128: LIST
78129: LIST
78130: LIST
78131: LIST
78132: LIST
78133: LIST
78134: LIST
78135: LIST
78136: LIST
78137: LIST
78138: LIST
78139: LIST
78140: LIST
78141: LIST
78142: LIST
78143: LIST
78144: LIST
78145: LIST
78146: LIST
78147: LIST
78148: LIST
78149: LIST
78150: LIST
78151: LIST
78152: LIST
78153: LIST
78154: LIST
78155: LIST
78156: LIST
78157: LIST
78158: LIST
78159: LIST
78160: LIST
78161: LIST
78162: LIST
78163: LIST
78164: LIST
78165: LIST
78166: LIST
78167: LIST
78168: ST_TO_ADDR
// tmp :=  ;
78169: LD_ADDR_VAR 0 3
78173: PUSH
78174: LD_STRING 
78176: ST_TO_ADDR
// for i = 1 to normalCounter do
78177: LD_ADDR_VAR 0 8
78181: PUSH
78182: DOUBLE
78183: LD_INT 1
78185: DEC
78186: ST_TO_ADDR
78187: LD_EXP 76
78191: PUSH
78192: FOR_TO
78193: IFFALSE 78229
// begin if flags [ i ] then
78195: LD_VAR 0 4
78199: PUSH
78200: LD_VAR 0 8
78204: ARRAY
78205: IFFALSE 78227
// tmp := tmp & i & ; ;
78207: LD_ADDR_VAR 0 3
78211: PUSH
78212: LD_VAR 0 3
78216: PUSH
78217: LD_VAR 0 8
78221: STR
78222: PUSH
78223: LD_STRING ;
78225: STR
78226: ST_TO_ADDR
// end ;
78227: GO 78192
78229: POP
78230: POP
// for i = 1 to hardcoreCounter do
78231: LD_ADDR_VAR 0 8
78235: PUSH
78236: DOUBLE
78237: LD_INT 1
78239: DEC
78240: ST_TO_ADDR
78241: LD_EXP 77
78245: PUSH
78246: FOR_TO
78247: IFFALSE 78293
// begin if flags [ normalCounter + i ] then
78249: LD_VAR 0 4
78253: PUSH
78254: LD_EXP 76
78258: PUSH
78259: LD_VAR 0 8
78263: PLUS
78264: ARRAY
78265: IFFALSE 78291
// tmp := tmp & ( 100 + i ) & ; ;
78267: LD_ADDR_VAR 0 3
78271: PUSH
78272: LD_VAR 0 3
78276: PUSH
78277: LD_INT 100
78279: PUSH
78280: LD_VAR 0 8
78284: PLUS
78285: STR
78286: PUSH
78287: LD_STRING ;
78289: STR
78290: ST_TO_ADDR
// end ;
78291: GO 78246
78293: POP
78294: POP
// if tmp then
78295: LD_VAR 0 3
78299: IFFALSE 78311
// active := tmp ;
78301: LD_ADDR_VAR 0 7
78305: PUSH
78306: LD_VAR 0 3
78310: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
78311: LD_STRING getStreamItemsFromMission("
78313: PUSH
78314: LD_VAR 0 5
78318: STR
78319: PUSH
78320: LD_STRING ","
78322: STR
78323: PUSH
78324: LD_VAR 0 6
78328: STR
78329: PUSH
78330: LD_STRING ","
78332: STR
78333: PUSH
78334: LD_VAR 0 7
78338: STR
78339: PUSH
78340: LD_STRING ")
78342: STR
78343: PPUSH
78344: CALL_OW 559
// end else
78348: GO 78357
// ToLua ( getStreamItemsFromMission("","","") ) ;
78350: LD_STRING getStreamItemsFromMission("","","")
78352: PPUSH
78353: CALL_OW 559
// end ;
78357: LD_VAR 0 2
78361: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
78362: LD_EXP 75
78366: PUSH
78367: LD_EXP 80
78371: AND
78372: IFFALSE 78496
78374: GO 78376
78376: DISABLE
78377: LD_INT 0
78379: PPUSH
78380: PPUSH
// begin enable ;
78381: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
78382: LD_ADDR_VAR 0 2
78386: PUSH
78387: LD_INT 22
78389: PUSH
78390: LD_OWVAR 2
78394: PUSH
78395: EMPTY
78396: LIST
78397: LIST
78398: PUSH
78399: LD_INT 2
78401: PUSH
78402: LD_INT 34
78404: PUSH
78405: LD_INT 7
78407: PUSH
78408: EMPTY
78409: LIST
78410: LIST
78411: PUSH
78412: LD_INT 34
78414: PUSH
78415: LD_INT 45
78417: PUSH
78418: EMPTY
78419: LIST
78420: LIST
78421: PUSH
78422: LD_INT 34
78424: PUSH
78425: LD_INT 28
78427: PUSH
78428: EMPTY
78429: LIST
78430: LIST
78431: PUSH
78432: LD_INT 34
78434: PUSH
78435: LD_INT 47
78437: PUSH
78438: EMPTY
78439: LIST
78440: LIST
78441: PUSH
78442: EMPTY
78443: LIST
78444: LIST
78445: LIST
78446: LIST
78447: LIST
78448: PUSH
78449: EMPTY
78450: LIST
78451: LIST
78452: PPUSH
78453: CALL_OW 69
78457: ST_TO_ADDR
// if not tmp then
78458: LD_VAR 0 2
78462: NOT
78463: IFFALSE 78467
// exit ;
78465: GO 78496
// for i in tmp do
78467: LD_ADDR_VAR 0 1
78471: PUSH
78472: LD_VAR 0 2
78476: PUSH
78477: FOR_IN
78478: IFFALSE 78494
// begin SetLives ( i , 0 ) ;
78480: LD_VAR 0 1
78484: PPUSH
78485: LD_INT 0
78487: PPUSH
78488: CALL_OW 234
// end ;
78492: GO 78477
78494: POP
78495: POP
// end ;
78496: PPOPN 2
78498: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
78499: LD_EXP 75
78503: PUSH
78504: LD_EXP 81
78508: AND
78509: IFFALSE 78593
78511: GO 78513
78513: DISABLE
78514: LD_INT 0
78516: PPUSH
78517: PPUSH
// begin enable ;
78518: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
78519: LD_ADDR_VAR 0 2
78523: PUSH
78524: LD_INT 22
78526: PUSH
78527: LD_OWVAR 2
78531: PUSH
78532: EMPTY
78533: LIST
78534: LIST
78535: PUSH
78536: LD_INT 32
78538: PUSH
78539: LD_INT 3
78541: PUSH
78542: EMPTY
78543: LIST
78544: LIST
78545: PUSH
78546: EMPTY
78547: LIST
78548: LIST
78549: PPUSH
78550: CALL_OW 69
78554: ST_TO_ADDR
// if not tmp then
78555: LD_VAR 0 2
78559: NOT
78560: IFFALSE 78564
// exit ;
78562: GO 78593
// for i in tmp do
78564: LD_ADDR_VAR 0 1
78568: PUSH
78569: LD_VAR 0 2
78573: PUSH
78574: FOR_IN
78575: IFFALSE 78591
// begin SetLives ( i , 0 ) ;
78577: LD_VAR 0 1
78581: PPUSH
78582: LD_INT 0
78584: PPUSH
78585: CALL_OW 234
// end ;
78589: GO 78574
78591: POP
78592: POP
// end ;
78593: PPOPN 2
78595: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
78596: LD_EXP 75
78600: PUSH
78601: LD_EXP 78
78605: AND
78606: IFFALSE 78699
78608: GO 78610
78610: DISABLE
78611: LD_INT 0
78613: PPUSH
// begin enable ;
78614: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
78615: LD_ADDR_VAR 0 1
78619: PUSH
78620: LD_INT 22
78622: PUSH
78623: LD_OWVAR 2
78627: PUSH
78628: EMPTY
78629: LIST
78630: LIST
78631: PUSH
78632: LD_INT 2
78634: PUSH
78635: LD_INT 25
78637: PUSH
78638: LD_INT 5
78640: PUSH
78641: EMPTY
78642: LIST
78643: LIST
78644: PUSH
78645: LD_INT 25
78647: PUSH
78648: LD_INT 9
78650: PUSH
78651: EMPTY
78652: LIST
78653: LIST
78654: PUSH
78655: LD_INT 25
78657: PUSH
78658: LD_INT 8
78660: PUSH
78661: EMPTY
78662: LIST
78663: LIST
78664: PUSH
78665: EMPTY
78666: LIST
78667: LIST
78668: LIST
78669: LIST
78670: PUSH
78671: EMPTY
78672: LIST
78673: LIST
78674: PPUSH
78675: CALL_OW 69
78679: PUSH
78680: FOR_IN
78681: IFFALSE 78697
// begin SetClass ( i , 1 ) ;
78683: LD_VAR 0 1
78687: PPUSH
78688: LD_INT 1
78690: PPUSH
78691: CALL_OW 336
// end ;
78695: GO 78680
78697: POP
78698: POP
// end ;
78699: PPOPN 1
78701: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
78702: LD_EXP 75
78706: PUSH
78707: LD_EXP 79
78711: AND
78712: PUSH
78713: LD_OWVAR 65
78717: PUSH
78718: LD_INT 7
78720: LESS
78721: AND
78722: IFFALSE 78736
78724: GO 78726
78726: DISABLE
// begin enable ;
78727: ENABLE
// game_speed := 7 ;
78728: LD_ADDR_OWVAR 65
78732: PUSH
78733: LD_INT 7
78735: ST_TO_ADDR
// end ;
78736: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
78737: LD_EXP 75
78741: PUSH
78742: LD_EXP 82
78746: AND
78747: IFFALSE 78949
78749: GO 78751
78751: DISABLE
78752: LD_INT 0
78754: PPUSH
78755: PPUSH
78756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
78757: LD_ADDR_VAR 0 3
78761: PUSH
78762: LD_INT 81
78764: PUSH
78765: LD_OWVAR 2
78769: PUSH
78770: EMPTY
78771: LIST
78772: LIST
78773: PUSH
78774: LD_INT 21
78776: PUSH
78777: LD_INT 1
78779: PUSH
78780: EMPTY
78781: LIST
78782: LIST
78783: PUSH
78784: EMPTY
78785: LIST
78786: LIST
78787: PPUSH
78788: CALL_OW 69
78792: ST_TO_ADDR
// if not tmp then
78793: LD_VAR 0 3
78797: NOT
78798: IFFALSE 78802
// exit ;
78800: GO 78949
// if tmp > 5 then
78802: LD_VAR 0 3
78806: PUSH
78807: LD_INT 5
78809: GREATER
78810: IFFALSE 78822
// k := 5 else
78812: LD_ADDR_VAR 0 2
78816: PUSH
78817: LD_INT 5
78819: ST_TO_ADDR
78820: GO 78832
// k := tmp ;
78822: LD_ADDR_VAR 0 2
78826: PUSH
78827: LD_VAR 0 3
78831: ST_TO_ADDR
// for i := 1 to k do
78832: LD_ADDR_VAR 0 1
78836: PUSH
78837: DOUBLE
78838: LD_INT 1
78840: DEC
78841: ST_TO_ADDR
78842: LD_VAR 0 2
78846: PUSH
78847: FOR_TO
78848: IFFALSE 78947
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
78850: LD_VAR 0 3
78854: PUSH
78855: LD_VAR 0 1
78859: ARRAY
78860: PPUSH
78861: LD_VAR 0 1
78865: PUSH
78866: LD_INT 4
78868: MOD
78869: PUSH
78870: LD_INT 1
78872: PLUS
78873: PPUSH
78874: CALL_OW 259
78878: PUSH
78879: LD_INT 10
78881: LESS
78882: IFFALSE 78945
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
78884: LD_VAR 0 3
78888: PUSH
78889: LD_VAR 0 1
78893: ARRAY
78894: PPUSH
78895: LD_VAR 0 1
78899: PUSH
78900: LD_INT 4
78902: MOD
78903: PUSH
78904: LD_INT 1
78906: PLUS
78907: PPUSH
78908: LD_VAR 0 3
78912: PUSH
78913: LD_VAR 0 1
78917: ARRAY
78918: PPUSH
78919: LD_VAR 0 1
78923: PUSH
78924: LD_INT 4
78926: MOD
78927: PUSH
78928: LD_INT 1
78930: PLUS
78931: PPUSH
78932: CALL_OW 259
78936: PUSH
78937: LD_INT 1
78939: PLUS
78940: PPUSH
78941: CALL_OW 237
78945: GO 78847
78947: POP
78948: POP
// end ;
78949: PPOPN 3
78951: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
78952: LD_EXP 75
78956: PUSH
78957: LD_EXP 83
78961: AND
78962: IFFALSE 78982
78964: GO 78966
78966: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
78967: LD_INT 4
78969: PPUSH
78970: LD_OWVAR 2
78974: PPUSH
78975: LD_INT 0
78977: PPUSH
78978: CALL_OW 324
78982: END
// every 0 0$1 trigger StreamModeActive and sShovel do
78983: LD_EXP 75
78987: PUSH
78988: LD_EXP 112
78992: AND
78993: IFFALSE 79013
78995: GO 78997
78997: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
78998: LD_INT 19
79000: PPUSH
79001: LD_OWVAR 2
79005: PPUSH
79006: LD_INT 0
79008: PPUSH
79009: CALL_OW 324
79013: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
79014: LD_EXP 75
79018: PUSH
79019: LD_EXP 84
79023: AND
79024: IFFALSE 79126
79026: GO 79028
79028: DISABLE
79029: LD_INT 0
79031: PPUSH
79032: PPUSH
// begin enable ;
79033: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
79034: LD_ADDR_VAR 0 2
79038: PUSH
79039: LD_INT 22
79041: PUSH
79042: LD_OWVAR 2
79046: PUSH
79047: EMPTY
79048: LIST
79049: LIST
79050: PUSH
79051: LD_INT 2
79053: PUSH
79054: LD_INT 34
79056: PUSH
79057: LD_INT 11
79059: PUSH
79060: EMPTY
79061: LIST
79062: LIST
79063: PUSH
79064: LD_INT 34
79066: PUSH
79067: LD_INT 30
79069: PUSH
79070: EMPTY
79071: LIST
79072: LIST
79073: PUSH
79074: EMPTY
79075: LIST
79076: LIST
79077: LIST
79078: PUSH
79079: EMPTY
79080: LIST
79081: LIST
79082: PPUSH
79083: CALL_OW 69
79087: ST_TO_ADDR
// if not tmp then
79088: LD_VAR 0 2
79092: NOT
79093: IFFALSE 79097
// exit ;
79095: GO 79126
// for i in tmp do
79097: LD_ADDR_VAR 0 1
79101: PUSH
79102: LD_VAR 0 2
79106: PUSH
79107: FOR_IN
79108: IFFALSE 79124
// begin SetLives ( i , 0 ) ;
79110: LD_VAR 0 1
79114: PPUSH
79115: LD_INT 0
79117: PPUSH
79118: CALL_OW 234
// end ;
79122: GO 79107
79124: POP
79125: POP
// end ;
79126: PPOPN 2
79128: END
// every 0 0$1 trigger StreamModeActive and sBunker do
79129: LD_EXP 75
79133: PUSH
79134: LD_EXP 85
79138: AND
79139: IFFALSE 79159
79141: GO 79143
79143: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
79144: LD_INT 32
79146: PPUSH
79147: LD_OWVAR 2
79151: PPUSH
79152: LD_INT 0
79154: PPUSH
79155: CALL_OW 324
79159: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
79160: LD_EXP 75
79164: PUSH
79165: LD_EXP 86
79169: AND
79170: IFFALSE 79351
79172: GO 79174
79174: DISABLE
79175: LD_INT 0
79177: PPUSH
79178: PPUSH
79179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
79180: LD_ADDR_VAR 0 2
79184: PUSH
79185: LD_INT 22
79187: PUSH
79188: LD_OWVAR 2
79192: PUSH
79193: EMPTY
79194: LIST
79195: LIST
79196: PUSH
79197: LD_INT 33
79199: PUSH
79200: LD_INT 3
79202: PUSH
79203: EMPTY
79204: LIST
79205: LIST
79206: PUSH
79207: EMPTY
79208: LIST
79209: LIST
79210: PPUSH
79211: CALL_OW 69
79215: ST_TO_ADDR
// if not tmp then
79216: LD_VAR 0 2
79220: NOT
79221: IFFALSE 79225
// exit ;
79223: GO 79351
// side := 0 ;
79225: LD_ADDR_VAR 0 3
79229: PUSH
79230: LD_INT 0
79232: ST_TO_ADDR
// for i := 1 to 8 do
79233: LD_ADDR_VAR 0 1
79237: PUSH
79238: DOUBLE
79239: LD_INT 1
79241: DEC
79242: ST_TO_ADDR
79243: LD_INT 8
79245: PUSH
79246: FOR_TO
79247: IFFALSE 79295
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
79249: LD_OWVAR 2
79253: PUSH
79254: LD_VAR 0 1
79258: NONEQUAL
79259: PUSH
79260: LD_OWVAR 2
79264: PPUSH
79265: LD_VAR 0 1
79269: PPUSH
79270: CALL_OW 81
79274: PUSH
79275: LD_INT 2
79277: EQUAL
79278: AND
79279: IFFALSE 79293
// begin side := i ;
79281: LD_ADDR_VAR 0 3
79285: PUSH
79286: LD_VAR 0 1
79290: ST_TO_ADDR
// break ;
79291: GO 79295
// end ;
79293: GO 79246
79295: POP
79296: POP
// if not side then
79297: LD_VAR 0 3
79301: NOT
79302: IFFALSE 79306
// exit ;
79304: GO 79351
// for i := 1 to tmp do
79306: LD_ADDR_VAR 0 1
79310: PUSH
79311: DOUBLE
79312: LD_INT 1
79314: DEC
79315: ST_TO_ADDR
79316: LD_VAR 0 2
79320: PUSH
79321: FOR_TO
79322: IFFALSE 79349
// if Prob ( 60 ) then
79324: LD_INT 60
79326: PPUSH
79327: CALL_OW 13
79331: IFFALSE 79347
// SetSide ( i , side ) ;
79333: LD_VAR 0 1
79337: PPUSH
79338: LD_VAR 0 3
79342: PPUSH
79343: CALL_OW 235
79347: GO 79321
79349: POP
79350: POP
// end ;
79351: PPOPN 3
79353: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
79354: LD_EXP 75
79358: PUSH
79359: LD_EXP 88
79363: AND
79364: IFFALSE 79483
79366: GO 79368
79368: DISABLE
79369: LD_INT 0
79371: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
79372: LD_ADDR_VAR 0 1
79376: PUSH
79377: LD_INT 22
79379: PUSH
79380: LD_OWVAR 2
79384: PUSH
79385: EMPTY
79386: LIST
79387: LIST
79388: PUSH
79389: LD_INT 21
79391: PUSH
79392: LD_INT 1
79394: PUSH
79395: EMPTY
79396: LIST
79397: LIST
79398: PUSH
79399: LD_INT 3
79401: PUSH
79402: LD_INT 23
79404: PUSH
79405: LD_INT 0
79407: PUSH
79408: EMPTY
79409: LIST
79410: LIST
79411: PUSH
79412: EMPTY
79413: LIST
79414: LIST
79415: PUSH
79416: EMPTY
79417: LIST
79418: LIST
79419: LIST
79420: PPUSH
79421: CALL_OW 69
79425: PUSH
79426: FOR_IN
79427: IFFALSE 79481
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
79429: LD_VAR 0 1
79433: PPUSH
79434: CALL_OW 257
79438: PUSH
79439: LD_INT 1
79441: PUSH
79442: LD_INT 2
79444: PUSH
79445: LD_INT 3
79447: PUSH
79448: LD_INT 4
79450: PUSH
79451: EMPTY
79452: LIST
79453: LIST
79454: LIST
79455: LIST
79456: IN
79457: IFFALSE 79479
// SetClass ( un , rand ( 1 , 4 ) ) ;
79459: LD_VAR 0 1
79463: PPUSH
79464: LD_INT 1
79466: PPUSH
79467: LD_INT 4
79469: PPUSH
79470: CALL_OW 12
79474: PPUSH
79475: CALL_OW 336
79479: GO 79426
79481: POP
79482: POP
// end ;
79483: PPOPN 1
79485: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
79486: LD_EXP 75
79490: PUSH
79491: LD_EXP 87
79495: AND
79496: IFFALSE 79575
79498: GO 79500
79500: DISABLE
79501: LD_INT 0
79503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
79504: LD_ADDR_VAR 0 1
79508: PUSH
79509: LD_INT 22
79511: PUSH
79512: LD_OWVAR 2
79516: PUSH
79517: EMPTY
79518: LIST
79519: LIST
79520: PUSH
79521: LD_INT 21
79523: PUSH
79524: LD_INT 3
79526: PUSH
79527: EMPTY
79528: LIST
79529: LIST
79530: PUSH
79531: EMPTY
79532: LIST
79533: LIST
79534: PPUSH
79535: CALL_OW 69
79539: ST_TO_ADDR
// if not tmp then
79540: LD_VAR 0 1
79544: NOT
79545: IFFALSE 79549
// exit ;
79547: GO 79575
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
79549: LD_VAR 0 1
79553: PUSH
79554: LD_INT 1
79556: PPUSH
79557: LD_VAR 0 1
79561: PPUSH
79562: CALL_OW 12
79566: ARRAY
79567: PPUSH
79568: LD_INT 100
79570: PPUSH
79571: CALL_OW 234
// end ;
79575: PPOPN 1
79577: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
79578: LD_EXP 75
79582: PUSH
79583: LD_EXP 89
79587: AND
79588: IFFALSE 79686
79590: GO 79592
79592: DISABLE
79593: LD_INT 0
79595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79596: LD_ADDR_VAR 0 1
79600: PUSH
79601: LD_INT 22
79603: PUSH
79604: LD_OWVAR 2
79608: PUSH
79609: EMPTY
79610: LIST
79611: LIST
79612: PUSH
79613: LD_INT 21
79615: PUSH
79616: LD_INT 1
79618: PUSH
79619: EMPTY
79620: LIST
79621: LIST
79622: PUSH
79623: EMPTY
79624: LIST
79625: LIST
79626: PPUSH
79627: CALL_OW 69
79631: ST_TO_ADDR
// if not tmp then
79632: LD_VAR 0 1
79636: NOT
79637: IFFALSE 79641
// exit ;
79639: GO 79686
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
79641: LD_VAR 0 1
79645: PUSH
79646: LD_INT 1
79648: PPUSH
79649: LD_VAR 0 1
79653: PPUSH
79654: CALL_OW 12
79658: ARRAY
79659: PPUSH
79660: LD_INT 1
79662: PPUSH
79663: LD_INT 4
79665: PPUSH
79666: CALL_OW 12
79670: PPUSH
79671: LD_INT 3000
79673: PPUSH
79674: LD_INT 9000
79676: PPUSH
79677: CALL_OW 12
79681: PPUSH
79682: CALL_OW 492
// end ;
79686: PPOPN 1
79688: END
// every 0 0$1 trigger StreamModeActive and sDepot do
79689: LD_EXP 75
79693: PUSH
79694: LD_EXP 90
79698: AND
79699: IFFALSE 79719
79701: GO 79703
79703: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
79704: LD_INT 1
79706: PPUSH
79707: LD_OWVAR 2
79711: PPUSH
79712: LD_INT 0
79714: PPUSH
79715: CALL_OW 324
79719: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
79720: LD_EXP 75
79724: PUSH
79725: LD_EXP 91
79729: AND
79730: IFFALSE 79813
79732: GO 79734
79734: DISABLE
79735: LD_INT 0
79737: PPUSH
79738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
79739: LD_ADDR_VAR 0 2
79743: PUSH
79744: LD_INT 22
79746: PUSH
79747: LD_OWVAR 2
79751: PUSH
79752: EMPTY
79753: LIST
79754: LIST
79755: PUSH
79756: LD_INT 21
79758: PUSH
79759: LD_INT 3
79761: PUSH
79762: EMPTY
79763: LIST
79764: LIST
79765: PUSH
79766: EMPTY
79767: LIST
79768: LIST
79769: PPUSH
79770: CALL_OW 69
79774: ST_TO_ADDR
// if not tmp then
79775: LD_VAR 0 2
79779: NOT
79780: IFFALSE 79784
// exit ;
79782: GO 79813
// for i in tmp do
79784: LD_ADDR_VAR 0 1
79788: PUSH
79789: LD_VAR 0 2
79793: PUSH
79794: FOR_IN
79795: IFFALSE 79811
// SetBLevel ( i , 10 ) ;
79797: LD_VAR 0 1
79801: PPUSH
79802: LD_INT 10
79804: PPUSH
79805: CALL_OW 241
79809: GO 79794
79811: POP
79812: POP
// end ;
79813: PPOPN 2
79815: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
79816: LD_EXP 75
79820: PUSH
79821: LD_EXP 92
79825: AND
79826: IFFALSE 79937
79828: GO 79830
79830: DISABLE
79831: LD_INT 0
79833: PPUSH
79834: PPUSH
79835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79836: LD_ADDR_VAR 0 3
79840: PUSH
79841: LD_INT 22
79843: PUSH
79844: LD_OWVAR 2
79848: PUSH
79849: EMPTY
79850: LIST
79851: LIST
79852: PUSH
79853: LD_INT 25
79855: PUSH
79856: LD_INT 1
79858: PUSH
79859: EMPTY
79860: LIST
79861: LIST
79862: PUSH
79863: EMPTY
79864: LIST
79865: LIST
79866: PPUSH
79867: CALL_OW 69
79871: ST_TO_ADDR
// if not tmp then
79872: LD_VAR 0 3
79876: NOT
79877: IFFALSE 79881
// exit ;
79879: GO 79937
// un := tmp [ rand ( 1 , tmp ) ] ;
79881: LD_ADDR_VAR 0 2
79885: PUSH
79886: LD_VAR 0 3
79890: PUSH
79891: LD_INT 1
79893: PPUSH
79894: LD_VAR 0 3
79898: PPUSH
79899: CALL_OW 12
79903: ARRAY
79904: ST_TO_ADDR
// if Crawls ( un ) then
79905: LD_VAR 0 2
79909: PPUSH
79910: CALL_OW 318
79914: IFFALSE 79925
// ComWalk ( un ) ;
79916: LD_VAR 0 2
79920: PPUSH
79921: CALL_OW 138
// SetClass ( un , class_sniper ) ;
79925: LD_VAR 0 2
79929: PPUSH
79930: LD_INT 5
79932: PPUSH
79933: CALL_OW 336
// end ;
79937: PPOPN 3
79939: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
79940: LD_EXP 75
79944: PUSH
79945: LD_EXP 93
79949: AND
79950: PUSH
79951: LD_OWVAR 67
79955: PUSH
79956: LD_INT 4
79958: LESS
79959: AND
79960: IFFALSE 79979
79962: GO 79964
79964: DISABLE
// begin Difficulty := Difficulty + 1 ;
79965: LD_ADDR_OWVAR 67
79969: PUSH
79970: LD_OWVAR 67
79974: PUSH
79975: LD_INT 1
79977: PLUS
79978: ST_TO_ADDR
// end ;
79979: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
79980: LD_EXP 75
79984: PUSH
79985: LD_EXP 94
79989: AND
79990: IFFALSE 80093
79992: GO 79994
79994: DISABLE
79995: LD_INT 0
79997: PPUSH
// begin for i := 1 to 5 do
79998: LD_ADDR_VAR 0 1
80002: PUSH
80003: DOUBLE
80004: LD_INT 1
80006: DEC
80007: ST_TO_ADDR
80008: LD_INT 5
80010: PUSH
80011: FOR_TO
80012: IFFALSE 80091
// begin uc_nation := nation_nature ;
80014: LD_ADDR_OWVAR 21
80018: PUSH
80019: LD_INT 0
80021: ST_TO_ADDR
// uc_side := 0 ;
80022: LD_ADDR_OWVAR 20
80026: PUSH
80027: LD_INT 0
80029: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
80030: LD_ADDR_OWVAR 29
80034: PUSH
80035: LD_INT 12
80037: PUSH
80038: LD_INT 12
80040: PUSH
80041: EMPTY
80042: LIST
80043: LIST
80044: ST_TO_ADDR
// hc_agressivity := 20 ;
80045: LD_ADDR_OWVAR 35
80049: PUSH
80050: LD_INT 20
80052: ST_TO_ADDR
// hc_class := class_tiger ;
80053: LD_ADDR_OWVAR 28
80057: PUSH
80058: LD_INT 14
80060: ST_TO_ADDR
// hc_gallery :=  ;
80061: LD_ADDR_OWVAR 33
80065: PUSH
80066: LD_STRING 
80068: ST_TO_ADDR
// hc_name :=  ;
80069: LD_ADDR_OWVAR 26
80073: PUSH
80074: LD_STRING 
80076: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
80077: CALL_OW 44
80081: PPUSH
80082: LD_INT 0
80084: PPUSH
80085: CALL_OW 51
// end ;
80089: GO 80011
80091: POP
80092: POP
// end ;
80093: PPOPN 1
80095: END
// every 0 0$1 trigger StreamModeActive and sBomb do
80096: LD_EXP 75
80100: PUSH
80101: LD_EXP 95
80105: AND
80106: IFFALSE 80115
80108: GO 80110
80110: DISABLE
// StreamSibBomb ;
80111: CALL 80116 0 0
80115: END
// export function StreamSibBomb ; var i , x , y ; begin
80116: LD_INT 0
80118: PPUSH
80119: PPUSH
80120: PPUSH
80121: PPUSH
// result := false ;
80122: LD_ADDR_VAR 0 1
80126: PUSH
80127: LD_INT 0
80129: ST_TO_ADDR
// for i := 1 to 16 do
80130: LD_ADDR_VAR 0 2
80134: PUSH
80135: DOUBLE
80136: LD_INT 1
80138: DEC
80139: ST_TO_ADDR
80140: LD_INT 16
80142: PUSH
80143: FOR_TO
80144: IFFALSE 80343
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
80146: LD_ADDR_VAR 0 3
80150: PUSH
80151: LD_INT 10
80153: PUSH
80154: LD_INT 20
80156: PUSH
80157: LD_INT 30
80159: PUSH
80160: LD_INT 40
80162: PUSH
80163: LD_INT 50
80165: PUSH
80166: LD_INT 60
80168: PUSH
80169: LD_INT 70
80171: PUSH
80172: LD_INT 80
80174: PUSH
80175: LD_INT 90
80177: PUSH
80178: LD_INT 100
80180: PUSH
80181: LD_INT 110
80183: PUSH
80184: LD_INT 120
80186: PUSH
80187: LD_INT 130
80189: PUSH
80190: LD_INT 140
80192: PUSH
80193: LD_INT 150
80195: PUSH
80196: EMPTY
80197: LIST
80198: LIST
80199: LIST
80200: LIST
80201: LIST
80202: LIST
80203: LIST
80204: LIST
80205: LIST
80206: LIST
80207: LIST
80208: LIST
80209: LIST
80210: LIST
80211: LIST
80212: PUSH
80213: LD_INT 1
80215: PPUSH
80216: LD_INT 15
80218: PPUSH
80219: CALL_OW 12
80223: ARRAY
80224: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
80225: LD_ADDR_VAR 0 4
80229: PUSH
80230: LD_INT 10
80232: PUSH
80233: LD_INT 20
80235: PUSH
80236: LD_INT 30
80238: PUSH
80239: LD_INT 40
80241: PUSH
80242: LD_INT 50
80244: PUSH
80245: LD_INT 60
80247: PUSH
80248: LD_INT 70
80250: PUSH
80251: LD_INT 80
80253: PUSH
80254: LD_INT 90
80256: PUSH
80257: LD_INT 100
80259: PUSH
80260: LD_INT 110
80262: PUSH
80263: LD_INT 120
80265: PUSH
80266: LD_INT 130
80268: PUSH
80269: LD_INT 140
80271: PUSH
80272: LD_INT 150
80274: PUSH
80275: EMPTY
80276: LIST
80277: LIST
80278: LIST
80279: LIST
80280: LIST
80281: LIST
80282: LIST
80283: LIST
80284: LIST
80285: LIST
80286: LIST
80287: LIST
80288: LIST
80289: LIST
80290: LIST
80291: PUSH
80292: LD_INT 1
80294: PPUSH
80295: LD_INT 15
80297: PPUSH
80298: CALL_OW 12
80302: ARRAY
80303: ST_TO_ADDR
// if ValidHex ( x , y ) then
80304: LD_VAR 0 3
80308: PPUSH
80309: LD_VAR 0 4
80313: PPUSH
80314: CALL_OW 488
80318: IFFALSE 80341
// begin result := [ x , y ] ;
80320: LD_ADDR_VAR 0 1
80324: PUSH
80325: LD_VAR 0 3
80329: PUSH
80330: LD_VAR 0 4
80334: PUSH
80335: EMPTY
80336: LIST
80337: LIST
80338: ST_TO_ADDR
// break ;
80339: GO 80343
// end ; end ;
80341: GO 80143
80343: POP
80344: POP
// if result then
80345: LD_VAR 0 1
80349: IFFALSE 80409
// begin ToLua ( playSibBomb() ) ;
80351: LD_STRING playSibBomb()
80353: PPUSH
80354: CALL_OW 559
// wait ( 0 0$14 ) ;
80358: LD_INT 490
80360: PPUSH
80361: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
80365: LD_VAR 0 1
80369: PUSH
80370: LD_INT 1
80372: ARRAY
80373: PPUSH
80374: LD_VAR 0 1
80378: PUSH
80379: LD_INT 2
80381: ARRAY
80382: PPUSH
80383: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
80387: LD_VAR 0 1
80391: PUSH
80392: LD_INT 1
80394: ARRAY
80395: PPUSH
80396: LD_VAR 0 1
80400: PUSH
80401: LD_INT 2
80403: ARRAY
80404: PPUSH
80405: CALL_OW 429
// end ; end ;
80409: LD_VAR 0 1
80413: RET
// every 0 0$1 trigger StreamModeActive and sReset do
80414: LD_EXP 75
80418: PUSH
80419: LD_EXP 97
80423: AND
80424: IFFALSE 80436
80426: GO 80428
80428: DISABLE
// YouLost (  ) ;
80429: LD_STRING 
80431: PPUSH
80432: CALL_OW 104
80436: END
// every 0 0$1 trigger StreamModeActive and sFog do
80437: LD_EXP 75
80441: PUSH
80442: LD_EXP 96
80446: AND
80447: IFFALSE 80461
80449: GO 80451
80451: DISABLE
// FogOff ( your_side ) ;
80452: LD_OWVAR 2
80456: PPUSH
80457: CALL_OW 344
80461: END
// every 0 0$1 trigger StreamModeActive and sSun do
80462: LD_EXP 75
80466: PUSH
80467: LD_EXP 98
80471: AND
80472: IFFALSE 80500
80474: GO 80476
80476: DISABLE
// begin solar_recharge_percent := 0 ;
80477: LD_ADDR_OWVAR 79
80481: PUSH
80482: LD_INT 0
80484: ST_TO_ADDR
// wait ( 5 5$00 ) ;
80485: LD_INT 10500
80487: PPUSH
80488: CALL_OW 67
// solar_recharge_percent := 100 ;
80492: LD_ADDR_OWVAR 79
80496: PUSH
80497: LD_INT 100
80499: ST_TO_ADDR
// end ;
80500: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
80501: LD_EXP 75
80505: PUSH
80506: LD_EXP 99
80510: AND
80511: IFFALSE 80750
80513: GO 80515
80515: DISABLE
80516: LD_INT 0
80518: PPUSH
80519: PPUSH
80520: PPUSH
// begin tmp := [ ] ;
80521: LD_ADDR_VAR 0 3
80525: PUSH
80526: EMPTY
80527: ST_TO_ADDR
// for i := 1 to 6 do
80528: LD_ADDR_VAR 0 1
80532: PUSH
80533: DOUBLE
80534: LD_INT 1
80536: DEC
80537: ST_TO_ADDR
80538: LD_INT 6
80540: PUSH
80541: FOR_TO
80542: IFFALSE 80647
// begin uc_nation := nation_nature ;
80544: LD_ADDR_OWVAR 21
80548: PUSH
80549: LD_INT 0
80551: ST_TO_ADDR
// uc_side := 0 ;
80552: LD_ADDR_OWVAR 20
80556: PUSH
80557: LD_INT 0
80559: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
80560: LD_ADDR_OWVAR 29
80564: PUSH
80565: LD_INT 12
80567: PUSH
80568: LD_INT 12
80570: PUSH
80571: EMPTY
80572: LIST
80573: LIST
80574: ST_TO_ADDR
// hc_agressivity := 20 ;
80575: LD_ADDR_OWVAR 35
80579: PUSH
80580: LD_INT 20
80582: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
80583: LD_ADDR_OWVAR 28
80587: PUSH
80588: LD_INT 17
80590: ST_TO_ADDR
// hc_gallery :=  ;
80591: LD_ADDR_OWVAR 33
80595: PUSH
80596: LD_STRING 
80598: ST_TO_ADDR
// hc_name :=  ;
80599: LD_ADDR_OWVAR 26
80603: PUSH
80604: LD_STRING 
80606: ST_TO_ADDR
// un := CreateHuman ;
80607: LD_ADDR_VAR 0 2
80611: PUSH
80612: CALL_OW 44
80616: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
80617: LD_VAR 0 2
80621: PPUSH
80622: LD_INT 1
80624: PPUSH
80625: CALL_OW 51
// tmp := tmp ^ un ;
80629: LD_ADDR_VAR 0 3
80633: PUSH
80634: LD_VAR 0 3
80638: PUSH
80639: LD_VAR 0 2
80643: ADD
80644: ST_TO_ADDR
// end ;
80645: GO 80541
80647: POP
80648: POP
// repeat wait ( 0 0$1 ) ;
80649: LD_INT 35
80651: PPUSH
80652: CALL_OW 67
// for un in tmp do
80656: LD_ADDR_VAR 0 2
80660: PUSH
80661: LD_VAR 0 3
80665: PUSH
80666: FOR_IN
80667: IFFALSE 80741
// begin if IsDead ( un ) then
80669: LD_VAR 0 2
80673: PPUSH
80674: CALL_OW 301
80678: IFFALSE 80698
// begin tmp := tmp diff un ;
80680: LD_ADDR_VAR 0 3
80684: PUSH
80685: LD_VAR 0 3
80689: PUSH
80690: LD_VAR 0 2
80694: DIFF
80695: ST_TO_ADDR
// continue ;
80696: GO 80666
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
80698: LD_VAR 0 2
80702: PPUSH
80703: LD_INT 3
80705: PUSH
80706: LD_INT 22
80708: PUSH
80709: LD_INT 0
80711: PUSH
80712: EMPTY
80713: LIST
80714: LIST
80715: PUSH
80716: EMPTY
80717: LIST
80718: LIST
80719: PPUSH
80720: CALL_OW 69
80724: PPUSH
80725: LD_VAR 0 2
80729: PPUSH
80730: CALL_OW 74
80734: PPUSH
80735: CALL_OW 115
// end ;
80739: GO 80666
80741: POP
80742: POP
// until not tmp ;
80743: LD_VAR 0 3
80747: NOT
80748: IFFALSE 80649
// end ;
80750: PPOPN 3
80752: END
// every 0 0$1 trigger StreamModeActive and sTroll do
80753: LD_EXP 75
80757: PUSH
80758: LD_EXP 100
80762: AND
80763: IFFALSE 80817
80765: GO 80767
80767: DISABLE
// begin ToLua ( displayTroll(); ) ;
80768: LD_STRING displayTroll();
80770: PPUSH
80771: CALL_OW 559
// wait ( 3 3$00 ) ;
80775: LD_INT 6300
80777: PPUSH
80778: CALL_OW 67
// ToLua ( hideTroll(); ) ;
80782: LD_STRING hideTroll();
80784: PPUSH
80785: CALL_OW 559
// wait ( 1 1$00 ) ;
80789: LD_INT 2100
80791: PPUSH
80792: CALL_OW 67
// ToLua ( displayTroll(); ) ;
80796: LD_STRING displayTroll();
80798: PPUSH
80799: CALL_OW 559
// wait ( 1 1$00 ) ;
80803: LD_INT 2100
80805: PPUSH
80806: CALL_OW 67
// ToLua ( hideTroll(); ) ;
80810: LD_STRING hideTroll();
80812: PPUSH
80813: CALL_OW 559
// end ;
80817: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
80818: LD_EXP 75
80822: PUSH
80823: LD_EXP 101
80827: AND
80828: IFFALSE 80891
80830: GO 80832
80832: DISABLE
80833: LD_INT 0
80835: PPUSH
// begin p := 0 ;
80836: LD_ADDR_VAR 0 1
80840: PUSH
80841: LD_INT 0
80843: ST_TO_ADDR
// repeat game_speed := 1 ;
80844: LD_ADDR_OWVAR 65
80848: PUSH
80849: LD_INT 1
80851: ST_TO_ADDR
// wait ( 0 0$1 ) ;
80852: LD_INT 35
80854: PPUSH
80855: CALL_OW 67
// p := p + 1 ;
80859: LD_ADDR_VAR 0 1
80863: PUSH
80864: LD_VAR 0 1
80868: PUSH
80869: LD_INT 1
80871: PLUS
80872: ST_TO_ADDR
// until p >= 60 ;
80873: LD_VAR 0 1
80877: PUSH
80878: LD_INT 60
80880: GREATEREQUAL
80881: IFFALSE 80844
// game_speed := 4 ;
80883: LD_ADDR_OWVAR 65
80887: PUSH
80888: LD_INT 4
80890: ST_TO_ADDR
// end ;
80891: PPOPN 1
80893: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
80894: LD_EXP 75
80898: PUSH
80899: LD_EXP 102
80903: AND
80904: IFFALSE 81050
80906: GO 80908
80908: DISABLE
80909: LD_INT 0
80911: PPUSH
80912: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80913: LD_ADDR_VAR 0 1
80917: PUSH
80918: LD_INT 22
80920: PUSH
80921: LD_OWVAR 2
80925: PUSH
80926: EMPTY
80927: LIST
80928: LIST
80929: PUSH
80930: LD_INT 2
80932: PUSH
80933: LD_INT 30
80935: PUSH
80936: LD_INT 0
80938: PUSH
80939: EMPTY
80940: LIST
80941: LIST
80942: PUSH
80943: LD_INT 30
80945: PUSH
80946: LD_INT 1
80948: PUSH
80949: EMPTY
80950: LIST
80951: LIST
80952: PUSH
80953: EMPTY
80954: LIST
80955: LIST
80956: LIST
80957: PUSH
80958: EMPTY
80959: LIST
80960: LIST
80961: PPUSH
80962: CALL_OW 69
80966: ST_TO_ADDR
// if not depot then
80967: LD_VAR 0 1
80971: NOT
80972: IFFALSE 80976
// exit ;
80974: GO 81050
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
80976: LD_ADDR_VAR 0 2
80980: PUSH
80981: LD_VAR 0 1
80985: PUSH
80986: LD_INT 1
80988: PPUSH
80989: LD_VAR 0 1
80993: PPUSH
80994: CALL_OW 12
80998: ARRAY
80999: PPUSH
81000: CALL_OW 274
81004: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
81005: LD_VAR 0 2
81009: PPUSH
81010: LD_INT 1
81012: PPUSH
81013: LD_INT 0
81015: PPUSH
81016: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
81020: LD_VAR 0 2
81024: PPUSH
81025: LD_INT 2
81027: PPUSH
81028: LD_INT 0
81030: PPUSH
81031: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
81035: LD_VAR 0 2
81039: PPUSH
81040: LD_INT 3
81042: PPUSH
81043: LD_INT 0
81045: PPUSH
81046: CALL_OW 277
// end ;
81050: PPOPN 2
81052: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
81053: LD_EXP 75
81057: PUSH
81058: LD_EXP 103
81062: AND
81063: IFFALSE 81160
81065: GO 81067
81067: DISABLE
81068: LD_INT 0
81070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81071: LD_ADDR_VAR 0 1
81075: PUSH
81076: LD_INT 22
81078: PUSH
81079: LD_OWVAR 2
81083: PUSH
81084: EMPTY
81085: LIST
81086: LIST
81087: PUSH
81088: LD_INT 21
81090: PUSH
81091: LD_INT 1
81093: PUSH
81094: EMPTY
81095: LIST
81096: LIST
81097: PUSH
81098: LD_INT 3
81100: PUSH
81101: LD_INT 23
81103: PUSH
81104: LD_INT 0
81106: PUSH
81107: EMPTY
81108: LIST
81109: LIST
81110: PUSH
81111: EMPTY
81112: LIST
81113: LIST
81114: PUSH
81115: EMPTY
81116: LIST
81117: LIST
81118: LIST
81119: PPUSH
81120: CALL_OW 69
81124: ST_TO_ADDR
// if not tmp then
81125: LD_VAR 0 1
81129: NOT
81130: IFFALSE 81134
// exit ;
81132: GO 81160
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
81134: LD_VAR 0 1
81138: PUSH
81139: LD_INT 1
81141: PPUSH
81142: LD_VAR 0 1
81146: PPUSH
81147: CALL_OW 12
81151: ARRAY
81152: PPUSH
81153: LD_INT 200
81155: PPUSH
81156: CALL_OW 234
// end ;
81160: PPOPN 1
81162: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
81163: LD_EXP 75
81167: PUSH
81168: LD_EXP 104
81172: AND
81173: IFFALSE 81252
81175: GO 81177
81177: DISABLE
81178: LD_INT 0
81180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
81181: LD_ADDR_VAR 0 1
81185: PUSH
81186: LD_INT 22
81188: PUSH
81189: LD_OWVAR 2
81193: PUSH
81194: EMPTY
81195: LIST
81196: LIST
81197: PUSH
81198: LD_INT 21
81200: PUSH
81201: LD_INT 2
81203: PUSH
81204: EMPTY
81205: LIST
81206: LIST
81207: PUSH
81208: EMPTY
81209: LIST
81210: LIST
81211: PPUSH
81212: CALL_OW 69
81216: ST_TO_ADDR
// if not tmp then
81217: LD_VAR 0 1
81221: NOT
81222: IFFALSE 81226
// exit ;
81224: GO 81252
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
81226: LD_VAR 0 1
81230: PUSH
81231: LD_INT 1
81233: PPUSH
81234: LD_VAR 0 1
81238: PPUSH
81239: CALL_OW 12
81243: ARRAY
81244: PPUSH
81245: LD_INT 60
81247: PPUSH
81248: CALL_OW 234
// end ;
81252: PPOPN 1
81254: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
81255: LD_EXP 75
81259: PUSH
81260: LD_EXP 105
81264: AND
81265: IFFALSE 81364
81267: GO 81269
81269: DISABLE
81270: LD_INT 0
81272: PPUSH
81273: PPUSH
// begin enable ;
81274: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
81275: LD_ADDR_VAR 0 1
81279: PUSH
81280: LD_INT 22
81282: PUSH
81283: LD_OWVAR 2
81287: PUSH
81288: EMPTY
81289: LIST
81290: LIST
81291: PUSH
81292: LD_INT 61
81294: PUSH
81295: EMPTY
81296: LIST
81297: PUSH
81298: LD_INT 33
81300: PUSH
81301: LD_INT 2
81303: PUSH
81304: EMPTY
81305: LIST
81306: LIST
81307: PUSH
81308: EMPTY
81309: LIST
81310: LIST
81311: LIST
81312: PPUSH
81313: CALL_OW 69
81317: ST_TO_ADDR
// if not tmp then
81318: LD_VAR 0 1
81322: NOT
81323: IFFALSE 81327
// exit ;
81325: GO 81364
// for i in tmp do
81327: LD_ADDR_VAR 0 2
81331: PUSH
81332: LD_VAR 0 1
81336: PUSH
81337: FOR_IN
81338: IFFALSE 81362
// if IsControledBy ( i ) then
81340: LD_VAR 0 2
81344: PPUSH
81345: CALL_OW 312
81349: IFFALSE 81360
// ComUnlink ( i ) ;
81351: LD_VAR 0 2
81355: PPUSH
81356: CALL_OW 136
81360: GO 81337
81362: POP
81363: POP
// end ;
81364: PPOPN 2
81366: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
81367: LD_EXP 75
81371: PUSH
81372: LD_EXP 106
81376: AND
81377: IFFALSE 81517
81379: GO 81381
81381: DISABLE
81382: LD_INT 0
81384: PPUSH
81385: PPUSH
// begin ToLua ( displayPowell(); ) ;
81386: LD_STRING displayPowell();
81388: PPUSH
81389: CALL_OW 559
// uc_side := 0 ;
81393: LD_ADDR_OWVAR 20
81397: PUSH
81398: LD_INT 0
81400: ST_TO_ADDR
// uc_nation := 2 ;
81401: LD_ADDR_OWVAR 21
81405: PUSH
81406: LD_INT 2
81408: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
81409: LD_ADDR_OWVAR 37
81413: PUSH
81414: LD_INT 14
81416: ST_TO_ADDR
// vc_engine := engine_siberite ;
81417: LD_ADDR_OWVAR 39
81421: PUSH
81422: LD_INT 3
81424: ST_TO_ADDR
// vc_control := control_apeman ;
81425: LD_ADDR_OWVAR 38
81429: PUSH
81430: LD_INT 5
81432: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
81433: LD_ADDR_OWVAR 40
81437: PUSH
81438: LD_INT 29
81440: ST_TO_ADDR
// un := CreateVehicle ;
81441: LD_ADDR_VAR 0 2
81445: PUSH
81446: CALL_OW 45
81450: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
81451: LD_VAR 0 2
81455: PPUSH
81456: LD_INT 1
81458: PPUSH
81459: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
81463: LD_INT 35
81465: PPUSH
81466: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
81470: LD_VAR 0 2
81474: PPUSH
81475: LD_INT 22
81477: PUSH
81478: LD_OWVAR 2
81482: PUSH
81483: EMPTY
81484: LIST
81485: LIST
81486: PPUSH
81487: CALL_OW 69
81491: PPUSH
81492: LD_VAR 0 2
81496: PPUSH
81497: CALL_OW 74
81501: PPUSH
81502: CALL_OW 115
// until IsDead ( un ) ;
81506: LD_VAR 0 2
81510: PPUSH
81511: CALL_OW 301
81515: IFFALSE 81463
// end ;
81517: PPOPN 2
81519: END
// every 0 0$1 trigger StreamModeActive and sStu do
81520: LD_EXP 75
81524: PUSH
81525: LD_EXP 114
81529: AND
81530: IFFALSE 81546
81532: GO 81534
81534: DISABLE
// begin ToLua ( displayStucuk(); ) ;
81535: LD_STRING displayStucuk();
81537: PPUSH
81538: CALL_OW 559
// ResetFog ;
81542: CALL_OW 335
// end ;
81546: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
81547: LD_EXP 75
81551: PUSH
81552: LD_EXP 107
81556: AND
81557: IFFALSE 81698
81559: GO 81561
81561: DISABLE
81562: LD_INT 0
81564: PPUSH
81565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81566: LD_ADDR_VAR 0 2
81570: PUSH
81571: LD_INT 22
81573: PUSH
81574: LD_OWVAR 2
81578: PUSH
81579: EMPTY
81580: LIST
81581: LIST
81582: PUSH
81583: LD_INT 21
81585: PUSH
81586: LD_INT 1
81588: PUSH
81589: EMPTY
81590: LIST
81591: LIST
81592: PUSH
81593: EMPTY
81594: LIST
81595: LIST
81596: PPUSH
81597: CALL_OW 69
81601: ST_TO_ADDR
// if not tmp then
81602: LD_VAR 0 2
81606: NOT
81607: IFFALSE 81611
// exit ;
81609: GO 81698
// un := tmp [ rand ( 1 , tmp ) ] ;
81611: LD_ADDR_VAR 0 1
81615: PUSH
81616: LD_VAR 0 2
81620: PUSH
81621: LD_INT 1
81623: PPUSH
81624: LD_VAR 0 2
81628: PPUSH
81629: CALL_OW 12
81633: ARRAY
81634: ST_TO_ADDR
// SetSide ( un , 0 ) ;
81635: LD_VAR 0 1
81639: PPUSH
81640: LD_INT 0
81642: PPUSH
81643: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
81647: LD_VAR 0 1
81651: PPUSH
81652: LD_OWVAR 3
81656: PUSH
81657: LD_VAR 0 1
81661: DIFF
81662: PPUSH
81663: LD_VAR 0 1
81667: PPUSH
81668: CALL_OW 74
81672: PPUSH
81673: CALL_OW 115
// wait ( 0 0$20 ) ;
81677: LD_INT 700
81679: PPUSH
81680: CALL_OW 67
// SetSide ( un , your_side ) ;
81684: LD_VAR 0 1
81688: PPUSH
81689: LD_OWVAR 2
81693: PPUSH
81694: CALL_OW 235
// end ;
81698: PPOPN 2
81700: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
81701: LD_EXP 75
81705: PUSH
81706: LD_EXP 108
81710: AND
81711: IFFALSE 81817
81713: GO 81715
81715: DISABLE
81716: LD_INT 0
81718: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81719: LD_ADDR_VAR 0 1
81723: PUSH
81724: LD_INT 22
81726: PUSH
81727: LD_OWVAR 2
81731: PUSH
81732: EMPTY
81733: LIST
81734: LIST
81735: PUSH
81736: LD_INT 2
81738: PUSH
81739: LD_INT 30
81741: PUSH
81742: LD_INT 0
81744: PUSH
81745: EMPTY
81746: LIST
81747: LIST
81748: PUSH
81749: LD_INT 30
81751: PUSH
81752: LD_INT 1
81754: PUSH
81755: EMPTY
81756: LIST
81757: LIST
81758: PUSH
81759: EMPTY
81760: LIST
81761: LIST
81762: LIST
81763: PUSH
81764: EMPTY
81765: LIST
81766: LIST
81767: PPUSH
81768: CALL_OW 69
81772: ST_TO_ADDR
// if not depot then
81773: LD_VAR 0 1
81777: NOT
81778: IFFALSE 81782
// exit ;
81780: GO 81817
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
81782: LD_VAR 0 1
81786: PUSH
81787: LD_INT 1
81789: ARRAY
81790: PPUSH
81791: CALL_OW 250
81795: PPUSH
81796: LD_VAR 0 1
81800: PUSH
81801: LD_INT 1
81803: ARRAY
81804: PPUSH
81805: CALL_OW 251
81809: PPUSH
81810: LD_INT 70
81812: PPUSH
81813: CALL_OW 495
// end ;
81817: PPOPN 1
81819: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
81820: LD_EXP 75
81824: PUSH
81825: LD_EXP 109
81829: AND
81830: IFFALSE 82041
81832: GO 81834
81834: DISABLE
81835: LD_INT 0
81837: PPUSH
81838: PPUSH
81839: PPUSH
81840: PPUSH
81841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81842: LD_ADDR_VAR 0 5
81846: PUSH
81847: LD_INT 22
81849: PUSH
81850: LD_OWVAR 2
81854: PUSH
81855: EMPTY
81856: LIST
81857: LIST
81858: PUSH
81859: LD_INT 21
81861: PUSH
81862: LD_INT 1
81864: PUSH
81865: EMPTY
81866: LIST
81867: LIST
81868: PUSH
81869: EMPTY
81870: LIST
81871: LIST
81872: PPUSH
81873: CALL_OW 69
81877: ST_TO_ADDR
// if not tmp then
81878: LD_VAR 0 5
81882: NOT
81883: IFFALSE 81887
// exit ;
81885: GO 82041
// for i in tmp do
81887: LD_ADDR_VAR 0 1
81891: PUSH
81892: LD_VAR 0 5
81896: PUSH
81897: FOR_IN
81898: IFFALSE 82039
// begin d := rand ( 0 , 5 ) ;
81900: LD_ADDR_VAR 0 4
81904: PUSH
81905: LD_INT 0
81907: PPUSH
81908: LD_INT 5
81910: PPUSH
81911: CALL_OW 12
81915: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
81916: LD_ADDR_VAR 0 2
81920: PUSH
81921: LD_VAR 0 1
81925: PPUSH
81926: CALL_OW 250
81930: PPUSH
81931: LD_VAR 0 4
81935: PPUSH
81936: LD_INT 3
81938: PPUSH
81939: LD_INT 12
81941: PPUSH
81942: CALL_OW 12
81946: PPUSH
81947: CALL_OW 272
81951: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
81952: LD_ADDR_VAR 0 3
81956: PUSH
81957: LD_VAR 0 1
81961: PPUSH
81962: CALL_OW 251
81966: PPUSH
81967: LD_VAR 0 4
81971: PPUSH
81972: LD_INT 3
81974: PPUSH
81975: LD_INT 12
81977: PPUSH
81978: CALL_OW 12
81982: PPUSH
81983: CALL_OW 273
81987: ST_TO_ADDR
// if ValidHex ( x , y ) then
81988: LD_VAR 0 2
81992: PPUSH
81993: LD_VAR 0 3
81997: PPUSH
81998: CALL_OW 488
82002: IFFALSE 82037
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
82004: LD_VAR 0 1
82008: PPUSH
82009: LD_VAR 0 2
82013: PPUSH
82014: LD_VAR 0 3
82018: PPUSH
82019: LD_INT 3
82021: PPUSH
82022: LD_INT 6
82024: PPUSH
82025: CALL_OW 12
82029: PPUSH
82030: LD_INT 1
82032: PPUSH
82033: CALL_OW 483
// end ;
82037: GO 81897
82039: POP
82040: POP
// end ;
82041: PPOPN 5
82043: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
82044: LD_EXP 75
82048: PUSH
82049: LD_EXP 110
82053: AND
82054: IFFALSE 82148
82056: GO 82058
82058: DISABLE
82059: LD_INT 0
82061: PPUSH
82062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
82063: LD_ADDR_VAR 0 2
82067: PUSH
82068: LD_INT 22
82070: PUSH
82071: LD_OWVAR 2
82075: PUSH
82076: EMPTY
82077: LIST
82078: LIST
82079: PUSH
82080: LD_INT 32
82082: PUSH
82083: LD_INT 1
82085: PUSH
82086: EMPTY
82087: LIST
82088: LIST
82089: PUSH
82090: LD_INT 21
82092: PUSH
82093: LD_INT 2
82095: PUSH
82096: EMPTY
82097: LIST
82098: LIST
82099: PUSH
82100: EMPTY
82101: LIST
82102: LIST
82103: LIST
82104: PPUSH
82105: CALL_OW 69
82109: ST_TO_ADDR
// if not tmp then
82110: LD_VAR 0 2
82114: NOT
82115: IFFALSE 82119
// exit ;
82117: GO 82148
// for i in tmp do
82119: LD_ADDR_VAR 0 1
82123: PUSH
82124: LD_VAR 0 2
82128: PUSH
82129: FOR_IN
82130: IFFALSE 82146
// SetFuel ( i , 0 ) ;
82132: LD_VAR 0 1
82136: PPUSH
82137: LD_INT 0
82139: PPUSH
82140: CALL_OW 240
82144: GO 82129
82146: POP
82147: POP
// end ;
82148: PPOPN 2
82150: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
82151: LD_EXP 75
82155: PUSH
82156: LD_EXP 111
82160: AND
82161: IFFALSE 82227
82163: GO 82165
82165: DISABLE
82166: LD_INT 0
82168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
82169: LD_ADDR_VAR 0 1
82173: PUSH
82174: LD_INT 22
82176: PUSH
82177: LD_OWVAR 2
82181: PUSH
82182: EMPTY
82183: LIST
82184: LIST
82185: PUSH
82186: LD_INT 30
82188: PUSH
82189: LD_INT 29
82191: PUSH
82192: EMPTY
82193: LIST
82194: LIST
82195: PUSH
82196: EMPTY
82197: LIST
82198: LIST
82199: PPUSH
82200: CALL_OW 69
82204: ST_TO_ADDR
// if not tmp then
82205: LD_VAR 0 1
82209: NOT
82210: IFFALSE 82214
// exit ;
82212: GO 82227
// DestroyUnit ( tmp [ 1 ] ) ;
82214: LD_VAR 0 1
82218: PUSH
82219: LD_INT 1
82221: ARRAY
82222: PPUSH
82223: CALL_OW 65
// end ;
82227: PPOPN 1
82229: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
82230: LD_EXP 75
82234: PUSH
82235: LD_EXP 113
82239: AND
82240: IFFALSE 82369
82242: GO 82244
82244: DISABLE
82245: LD_INT 0
82247: PPUSH
// begin uc_side := 0 ;
82248: LD_ADDR_OWVAR 20
82252: PUSH
82253: LD_INT 0
82255: ST_TO_ADDR
// uc_nation := nation_arabian ;
82256: LD_ADDR_OWVAR 21
82260: PUSH
82261: LD_INT 2
82263: ST_TO_ADDR
// hc_gallery :=  ;
82264: LD_ADDR_OWVAR 33
82268: PUSH
82269: LD_STRING 
82271: ST_TO_ADDR
// hc_name :=  ;
82272: LD_ADDR_OWVAR 26
82276: PUSH
82277: LD_STRING 
82279: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
82280: LD_INT 1
82282: PPUSH
82283: LD_INT 11
82285: PPUSH
82286: LD_INT 10
82288: PPUSH
82289: CALL_OW 380
// un := CreateHuman ;
82293: LD_ADDR_VAR 0 1
82297: PUSH
82298: CALL_OW 44
82302: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82303: LD_VAR 0 1
82307: PPUSH
82308: LD_INT 1
82310: PPUSH
82311: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
82315: LD_INT 35
82317: PPUSH
82318: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
82322: LD_VAR 0 1
82326: PPUSH
82327: LD_INT 22
82329: PUSH
82330: LD_OWVAR 2
82334: PUSH
82335: EMPTY
82336: LIST
82337: LIST
82338: PPUSH
82339: CALL_OW 69
82343: PPUSH
82344: LD_VAR 0 1
82348: PPUSH
82349: CALL_OW 74
82353: PPUSH
82354: CALL_OW 115
// until IsDead ( un ) ;
82358: LD_VAR 0 1
82362: PPUSH
82363: CALL_OW 301
82367: IFFALSE 82315
// end ;
82369: PPOPN 1
82371: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
82372: LD_EXP 75
82376: PUSH
82377: LD_EXP 115
82381: AND
82382: IFFALSE 82394
82384: GO 82386
82386: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
82387: LD_STRING earthquake(getX(game), 0, 32)
82389: PPUSH
82390: CALL_OW 559
82394: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
82395: LD_EXP 75
82399: PUSH
82400: LD_EXP 116
82404: AND
82405: IFFALSE 82496
82407: GO 82409
82409: DISABLE
82410: LD_INT 0
82412: PPUSH
// begin enable ;
82413: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
82414: LD_ADDR_VAR 0 1
82418: PUSH
82419: LD_INT 22
82421: PUSH
82422: LD_OWVAR 2
82426: PUSH
82427: EMPTY
82428: LIST
82429: LIST
82430: PUSH
82431: LD_INT 21
82433: PUSH
82434: LD_INT 2
82436: PUSH
82437: EMPTY
82438: LIST
82439: LIST
82440: PUSH
82441: LD_INT 33
82443: PUSH
82444: LD_INT 3
82446: PUSH
82447: EMPTY
82448: LIST
82449: LIST
82450: PUSH
82451: EMPTY
82452: LIST
82453: LIST
82454: LIST
82455: PPUSH
82456: CALL_OW 69
82460: ST_TO_ADDR
// if not tmp then
82461: LD_VAR 0 1
82465: NOT
82466: IFFALSE 82470
// exit ;
82468: GO 82496
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
82470: LD_VAR 0 1
82474: PUSH
82475: LD_INT 1
82477: PPUSH
82478: LD_VAR 0 1
82482: PPUSH
82483: CALL_OW 12
82487: ARRAY
82488: PPUSH
82489: LD_INT 1
82491: PPUSH
82492: CALL_OW 234
// end ;
82496: PPOPN 1
82498: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
82499: LD_EXP 75
82503: PUSH
82504: LD_EXP 117
82508: AND
82509: IFFALSE 82650
82511: GO 82513
82513: DISABLE
82514: LD_INT 0
82516: PPUSH
82517: PPUSH
82518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82519: LD_ADDR_VAR 0 3
82523: PUSH
82524: LD_INT 22
82526: PUSH
82527: LD_OWVAR 2
82531: PUSH
82532: EMPTY
82533: LIST
82534: LIST
82535: PUSH
82536: LD_INT 25
82538: PUSH
82539: LD_INT 1
82541: PUSH
82542: EMPTY
82543: LIST
82544: LIST
82545: PUSH
82546: EMPTY
82547: LIST
82548: LIST
82549: PPUSH
82550: CALL_OW 69
82554: ST_TO_ADDR
// if not tmp then
82555: LD_VAR 0 3
82559: NOT
82560: IFFALSE 82564
// exit ;
82562: GO 82650
// un := tmp [ rand ( 1 , tmp ) ] ;
82564: LD_ADDR_VAR 0 2
82568: PUSH
82569: LD_VAR 0 3
82573: PUSH
82574: LD_INT 1
82576: PPUSH
82577: LD_VAR 0 3
82581: PPUSH
82582: CALL_OW 12
82586: ARRAY
82587: ST_TO_ADDR
// if Crawls ( un ) then
82588: LD_VAR 0 2
82592: PPUSH
82593: CALL_OW 318
82597: IFFALSE 82608
// ComWalk ( un ) ;
82599: LD_VAR 0 2
82603: PPUSH
82604: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
82608: LD_VAR 0 2
82612: PPUSH
82613: LD_INT 9
82615: PPUSH
82616: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
82620: LD_INT 28
82622: PPUSH
82623: LD_OWVAR 2
82627: PPUSH
82628: LD_INT 2
82630: PPUSH
82631: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
82635: LD_INT 29
82637: PPUSH
82638: LD_OWVAR 2
82642: PPUSH
82643: LD_INT 2
82645: PPUSH
82646: CALL_OW 322
// end ;
82650: PPOPN 3
82652: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
82653: LD_EXP 75
82657: PUSH
82658: LD_EXP 118
82662: AND
82663: IFFALSE 82774
82665: GO 82667
82667: DISABLE
82668: LD_INT 0
82670: PPUSH
82671: PPUSH
82672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82673: LD_ADDR_VAR 0 3
82677: PUSH
82678: LD_INT 22
82680: PUSH
82681: LD_OWVAR 2
82685: PUSH
82686: EMPTY
82687: LIST
82688: LIST
82689: PUSH
82690: LD_INT 25
82692: PUSH
82693: LD_INT 1
82695: PUSH
82696: EMPTY
82697: LIST
82698: LIST
82699: PUSH
82700: EMPTY
82701: LIST
82702: LIST
82703: PPUSH
82704: CALL_OW 69
82708: ST_TO_ADDR
// if not tmp then
82709: LD_VAR 0 3
82713: NOT
82714: IFFALSE 82718
// exit ;
82716: GO 82774
// un := tmp [ rand ( 1 , tmp ) ] ;
82718: LD_ADDR_VAR 0 2
82722: PUSH
82723: LD_VAR 0 3
82727: PUSH
82728: LD_INT 1
82730: PPUSH
82731: LD_VAR 0 3
82735: PPUSH
82736: CALL_OW 12
82740: ARRAY
82741: ST_TO_ADDR
// if Crawls ( un ) then
82742: LD_VAR 0 2
82746: PPUSH
82747: CALL_OW 318
82751: IFFALSE 82762
// ComWalk ( un ) ;
82753: LD_VAR 0 2
82757: PPUSH
82758: CALL_OW 138
// SetClass ( un , class_mortar ) ;
82762: LD_VAR 0 2
82766: PPUSH
82767: LD_INT 8
82769: PPUSH
82770: CALL_OW 336
// end ;
82774: PPOPN 3
82776: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
82777: LD_EXP 75
82781: PUSH
82782: LD_EXP 119
82786: AND
82787: IFFALSE 82931
82789: GO 82791
82791: DISABLE
82792: LD_INT 0
82794: PPUSH
82795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
82796: LD_ADDR_VAR 0 2
82800: PUSH
82801: LD_INT 22
82803: PUSH
82804: LD_OWVAR 2
82808: PUSH
82809: EMPTY
82810: LIST
82811: LIST
82812: PUSH
82813: LD_INT 21
82815: PUSH
82816: LD_INT 2
82818: PUSH
82819: EMPTY
82820: LIST
82821: LIST
82822: PUSH
82823: LD_INT 2
82825: PUSH
82826: LD_INT 34
82828: PUSH
82829: LD_INT 12
82831: PUSH
82832: EMPTY
82833: LIST
82834: LIST
82835: PUSH
82836: LD_INT 34
82838: PUSH
82839: LD_INT 51
82841: PUSH
82842: EMPTY
82843: LIST
82844: LIST
82845: PUSH
82846: LD_INT 34
82848: PUSH
82849: LD_INT 32
82851: PUSH
82852: EMPTY
82853: LIST
82854: LIST
82855: PUSH
82856: EMPTY
82857: LIST
82858: LIST
82859: LIST
82860: LIST
82861: PUSH
82862: EMPTY
82863: LIST
82864: LIST
82865: LIST
82866: PPUSH
82867: CALL_OW 69
82871: ST_TO_ADDR
// if not tmp then
82872: LD_VAR 0 2
82876: NOT
82877: IFFALSE 82881
// exit ;
82879: GO 82931
// for i in tmp do
82881: LD_ADDR_VAR 0 1
82885: PUSH
82886: LD_VAR 0 2
82890: PUSH
82891: FOR_IN
82892: IFFALSE 82929
// if GetCargo ( i , mat_artifact ) = 0 then
82894: LD_VAR 0 1
82898: PPUSH
82899: LD_INT 4
82901: PPUSH
82902: CALL_OW 289
82906: PUSH
82907: LD_INT 0
82909: EQUAL
82910: IFFALSE 82927
// SetCargo ( i , mat_siberit , 100 ) ;
82912: LD_VAR 0 1
82916: PPUSH
82917: LD_INT 3
82919: PPUSH
82920: LD_INT 100
82922: PPUSH
82923: CALL_OW 290
82927: GO 82891
82929: POP
82930: POP
// end ;
82931: PPOPN 2
82933: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
82934: LD_EXP 75
82938: PUSH
82939: LD_EXP 120
82943: AND
82944: IFFALSE 83127
82946: GO 82948
82948: DISABLE
82949: LD_INT 0
82951: PPUSH
82952: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82953: LD_ADDR_VAR 0 2
82957: PUSH
82958: LD_INT 22
82960: PUSH
82961: LD_OWVAR 2
82965: PUSH
82966: EMPTY
82967: LIST
82968: LIST
82969: PPUSH
82970: CALL_OW 69
82974: ST_TO_ADDR
// if not tmp then
82975: LD_VAR 0 2
82979: NOT
82980: IFFALSE 82984
// exit ;
82982: GO 83127
// for i := 1 to 2 do
82984: LD_ADDR_VAR 0 1
82988: PUSH
82989: DOUBLE
82990: LD_INT 1
82992: DEC
82993: ST_TO_ADDR
82994: LD_INT 2
82996: PUSH
82997: FOR_TO
82998: IFFALSE 83125
// begin uc_side := your_side ;
83000: LD_ADDR_OWVAR 20
83004: PUSH
83005: LD_OWVAR 2
83009: ST_TO_ADDR
// uc_nation := nation_american ;
83010: LD_ADDR_OWVAR 21
83014: PUSH
83015: LD_INT 1
83017: ST_TO_ADDR
// vc_chassis := us_morphling ;
83018: LD_ADDR_OWVAR 37
83022: PUSH
83023: LD_INT 5
83025: ST_TO_ADDR
// vc_engine := engine_siberite ;
83026: LD_ADDR_OWVAR 39
83030: PUSH
83031: LD_INT 3
83033: ST_TO_ADDR
// vc_control := control_computer ;
83034: LD_ADDR_OWVAR 38
83038: PUSH
83039: LD_INT 3
83041: ST_TO_ADDR
// vc_weapon := us_double_laser ;
83042: LD_ADDR_OWVAR 40
83046: PUSH
83047: LD_INT 10
83049: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
83050: LD_VAR 0 2
83054: PUSH
83055: LD_INT 1
83057: ARRAY
83058: PPUSH
83059: CALL_OW 310
83063: NOT
83064: IFFALSE 83111
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
83066: CALL_OW 45
83070: PPUSH
83071: LD_VAR 0 2
83075: PUSH
83076: LD_INT 1
83078: ARRAY
83079: PPUSH
83080: CALL_OW 250
83084: PPUSH
83085: LD_VAR 0 2
83089: PUSH
83090: LD_INT 1
83092: ARRAY
83093: PPUSH
83094: CALL_OW 251
83098: PPUSH
83099: LD_INT 12
83101: PPUSH
83102: LD_INT 1
83104: PPUSH
83105: CALL_OW 50
83109: GO 83123
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
83111: CALL_OW 45
83115: PPUSH
83116: LD_INT 1
83118: PPUSH
83119: CALL_OW 51
// end ;
83123: GO 82997
83125: POP
83126: POP
// end ;
83127: PPOPN 2
83129: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
83130: LD_EXP 75
83134: PUSH
83135: LD_EXP 121
83139: AND
83140: IFFALSE 83362
83142: GO 83144
83144: DISABLE
83145: LD_INT 0
83147: PPUSH
83148: PPUSH
83149: PPUSH
83150: PPUSH
83151: PPUSH
83152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
83153: LD_ADDR_VAR 0 6
83157: PUSH
83158: LD_INT 22
83160: PUSH
83161: LD_OWVAR 2
83165: PUSH
83166: EMPTY
83167: LIST
83168: LIST
83169: PUSH
83170: LD_INT 21
83172: PUSH
83173: LD_INT 1
83175: PUSH
83176: EMPTY
83177: LIST
83178: LIST
83179: PUSH
83180: LD_INT 3
83182: PUSH
83183: LD_INT 23
83185: PUSH
83186: LD_INT 0
83188: PUSH
83189: EMPTY
83190: LIST
83191: LIST
83192: PUSH
83193: EMPTY
83194: LIST
83195: LIST
83196: PUSH
83197: EMPTY
83198: LIST
83199: LIST
83200: LIST
83201: PPUSH
83202: CALL_OW 69
83206: ST_TO_ADDR
// if not tmp then
83207: LD_VAR 0 6
83211: NOT
83212: IFFALSE 83216
// exit ;
83214: GO 83362
// s1 := rand ( 1 , 4 ) ;
83216: LD_ADDR_VAR 0 2
83220: PUSH
83221: LD_INT 1
83223: PPUSH
83224: LD_INT 4
83226: PPUSH
83227: CALL_OW 12
83231: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
83232: LD_ADDR_VAR 0 4
83236: PUSH
83237: LD_VAR 0 6
83241: PUSH
83242: LD_INT 1
83244: ARRAY
83245: PPUSH
83246: LD_VAR 0 2
83250: PPUSH
83251: CALL_OW 259
83255: ST_TO_ADDR
// if s1 = 1 then
83256: LD_VAR 0 2
83260: PUSH
83261: LD_INT 1
83263: EQUAL
83264: IFFALSE 83284
// s2 := rand ( 2 , 4 ) else
83266: LD_ADDR_VAR 0 3
83270: PUSH
83271: LD_INT 2
83273: PPUSH
83274: LD_INT 4
83276: PPUSH
83277: CALL_OW 12
83281: ST_TO_ADDR
83282: GO 83292
// s2 := 1 ;
83284: LD_ADDR_VAR 0 3
83288: PUSH
83289: LD_INT 1
83291: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
83292: LD_ADDR_VAR 0 5
83296: PUSH
83297: LD_VAR 0 6
83301: PUSH
83302: LD_INT 1
83304: ARRAY
83305: PPUSH
83306: LD_VAR 0 3
83310: PPUSH
83311: CALL_OW 259
83315: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
83316: LD_VAR 0 6
83320: PUSH
83321: LD_INT 1
83323: ARRAY
83324: PPUSH
83325: LD_VAR 0 2
83329: PPUSH
83330: LD_VAR 0 5
83334: PPUSH
83335: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
83339: LD_VAR 0 6
83343: PUSH
83344: LD_INT 1
83346: ARRAY
83347: PPUSH
83348: LD_VAR 0 3
83352: PPUSH
83353: LD_VAR 0 4
83357: PPUSH
83358: CALL_OW 237
// end ;
83362: PPOPN 6
83364: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
83365: LD_EXP 75
83369: PUSH
83370: LD_EXP 122
83374: AND
83375: IFFALSE 83454
83377: GO 83379
83379: DISABLE
83380: LD_INT 0
83382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
83383: LD_ADDR_VAR 0 1
83387: PUSH
83388: LD_INT 22
83390: PUSH
83391: LD_OWVAR 2
83395: PUSH
83396: EMPTY
83397: LIST
83398: LIST
83399: PUSH
83400: LD_INT 30
83402: PUSH
83403: LD_INT 3
83405: PUSH
83406: EMPTY
83407: LIST
83408: LIST
83409: PUSH
83410: EMPTY
83411: LIST
83412: LIST
83413: PPUSH
83414: CALL_OW 69
83418: ST_TO_ADDR
// if not tmp then
83419: LD_VAR 0 1
83423: NOT
83424: IFFALSE 83428
// exit ;
83426: GO 83454
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
83428: LD_VAR 0 1
83432: PUSH
83433: LD_INT 1
83435: PPUSH
83436: LD_VAR 0 1
83440: PPUSH
83441: CALL_OW 12
83445: ARRAY
83446: PPUSH
83447: LD_INT 1
83449: PPUSH
83450: CALL_OW 234
// end ;
83454: PPOPN 1
83456: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
83457: LD_EXP 75
83461: PUSH
83462: LD_EXP 123
83466: AND
83467: IFFALSE 83579
83469: GO 83471
83471: DISABLE
83472: LD_INT 0
83474: PPUSH
83475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
83476: LD_ADDR_VAR 0 2
83480: PUSH
83481: LD_INT 22
83483: PUSH
83484: LD_OWVAR 2
83488: PUSH
83489: EMPTY
83490: LIST
83491: LIST
83492: PUSH
83493: LD_INT 2
83495: PUSH
83496: LD_INT 30
83498: PUSH
83499: LD_INT 27
83501: PUSH
83502: EMPTY
83503: LIST
83504: LIST
83505: PUSH
83506: LD_INT 30
83508: PUSH
83509: LD_INT 26
83511: PUSH
83512: EMPTY
83513: LIST
83514: LIST
83515: PUSH
83516: LD_INT 30
83518: PUSH
83519: LD_INT 28
83521: PUSH
83522: EMPTY
83523: LIST
83524: LIST
83525: PUSH
83526: EMPTY
83527: LIST
83528: LIST
83529: LIST
83530: LIST
83531: PUSH
83532: EMPTY
83533: LIST
83534: LIST
83535: PPUSH
83536: CALL_OW 69
83540: ST_TO_ADDR
// if not tmp then
83541: LD_VAR 0 2
83545: NOT
83546: IFFALSE 83550
// exit ;
83548: GO 83579
// for i in tmp do
83550: LD_ADDR_VAR 0 1
83554: PUSH
83555: LD_VAR 0 2
83559: PUSH
83560: FOR_IN
83561: IFFALSE 83577
// SetLives ( i , 1 ) ;
83563: LD_VAR 0 1
83567: PPUSH
83568: LD_INT 1
83570: PPUSH
83571: CALL_OW 234
83575: GO 83560
83577: POP
83578: POP
// end ;
83579: PPOPN 2
83581: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
83582: LD_EXP 75
83586: PUSH
83587: LD_EXP 124
83591: AND
83592: IFFALSE 83879
83594: GO 83596
83596: DISABLE
83597: LD_INT 0
83599: PPUSH
83600: PPUSH
83601: PPUSH
// begin i := rand ( 1 , 7 ) ;
83602: LD_ADDR_VAR 0 1
83606: PUSH
83607: LD_INT 1
83609: PPUSH
83610: LD_INT 7
83612: PPUSH
83613: CALL_OW 12
83617: ST_TO_ADDR
// case i of 1 :
83618: LD_VAR 0 1
83622: PUSH
83623: LD_INT 1
83625: DOUBLE
83626: EQUAL
83627: IFTRUE 83631
83629: GO 83641
83631: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
83632: LD_STRING earthquake(getX(game), 0, 32)
83634: PPUSH
83635: CALL_OW 559
83639: GO 83879
83641: LD_INT 2
83643: DOUBLE
83644: EQUAL
83645: IFTRUE 83649
83647: GO 83663
83649: POP
// begin ToLua ( displayStucuk(); ) ;
83650: LD_STRING displayStucuk();
83652: PPUSH
83653: CALL_OW 559
// ResetFog ;
83657: CALL_OW 335
// end ; 3 :
83661: GO 83879
83663: LD_INT 3
83665: DOUBLE
83666: EQUAL
83667: IFTRUE 83671
83669: GO 83775
83671: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
83672: LD_ADDR_VAR 0 2
83676: PUSH
83677: LD_INT 22
83679: PUSH
83680: LD_OWVAR 2
83684: PUSH
83685: EMPTY
83686: LIST
83687: LIST
83688: PUSH
83689: LD_INT 25
83691: PUSH
83692: LD_INT 1
83694: PUSH
83695: EMPTY
83696: LIST
83697: LIST
83698: PUSH
83699: EMPTY
83700: LIST
83701: LIST
83702: PPUSH
83703: CALL_OW 69
83707: ST_TO_ADDR
// if not tmp then
83708: LD_VAR 0 2
83712: NOT
83713: IFFALSE 83717
// exit ;
83715: GO 83879
// un := tmp [ rand ( 1 , tmp ) ] ;
83717: LD_ADDR_VAR 0 3
83721: PUSH
83722: LD_VAR 0 2
83726: PUSH
83727: LD_INT 1
83729: PPUSH
83730: LD_VAR 0 2
83734: PPUSH
83735: CALL_OW 12
83739: ARRAY
83740: ST_TO_ADDR
// if Crawls ( un ) then
83741: LD_VAR 0 3
83745: PPUSH
83746: CALL_OW 318
83750: IFFALSE 83761
// ComWalk ( un ) ;
83752: LD_VAR 0 3
83756: PPUSH
83757: CALL_OW 138
// SetClass ( un , class_mortar ) ;
83761: LD_VAR 0 3
83765: PPUSH
83766: LD_INT 8
83768: PPUSH
83769: CALL_OW 336
// end ; 4 :
83773: GO 83879
83775: LD_INT 4
83777: DOUBLE
83778: EQUAL
83779: IFTRUE 83783
83781: GO 83857
83783: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
83784: LD_ADDR_VAR 0 2
83788: PUSH
83789: LD_INT 22
83791: PUSH
83792: LD_OWVAR 2
83796: PUSH
83797: EMPTY
83798: LIST
83799: LIST
83800: PUSH
83801: LD_INT 30
83803: PUSH
83804: LD_INT 29
83806: PUSH
83807: EMPTY
83808: LIST
83809: LIST
83810: PUSH
83811: EMPTY
83812: LIST
83813: LIST
83814: PPUSH
83815: CALL_OW 69
83819: ST_TO_ADDR
// if not tmp then
83820: LD_VAR 0 2
83824: NOT
83825: IFFALSE 83829
// exit ;
83827: GO 83879
// CenterNowOnUnits ( tmp [ 1 ] ) ;
83829: LD_VAR 0 2
83833: PUSH
83834: LD_INT 1
83836: ARRAY
83837: PPUSH
83838: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
83842: LD_VAR 0 2
83846: PUSH
83847: LD_INT 1
83849: ARRAY
83850: PPUSH
83851: CALL_OW 65
// end ; 5 .. 7 :
83855: GO 83879
83857: LD_INT 5
83859: DOUBLE
83860: GREATEREQUAL
83861: IFFALSE 83869
83863: LD_INT 7
83865: DOUBLE
83866: LESSEQUAL
83867: IFTRUE 83871
83869: GO 83878
83871: POP
// StreamSibBomb ; end ;
83872: CALL 80116 0 0
83876: GO 83879
83878: POP
// end ;
83879: PPOPN 3
83881: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
83882: LD_EXP 75
83886: PUSH
83887: LD_EXP 125
83891: AND
83892: IFFALSE 84048
83894: GO 83896
83896: DISABLE
83897: LD_INT 0
83899: PPUSH
83900: PPUSH
83901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
83902: LD_ADDR_VAR 0 2
83906: PUSH
83907: LD_INT 81
83909: PUSH
83910: LD_OWVAR 2
83914: PUSH
83915: EMPTY
83916: LIST
83917: LIST
83918: PUSH
83919: LD_INT 2
83921: PUSH
83922: LD_INT 21
83924: PUSH
83925: LD_INT 1
83927: PUSH
83928: EMPTY
83929: LIST
83930: LIST
83931: PUSH
83932: LD_INT 21
83934: PUSH
83935: LD_INT 2
83937: PUSH
83938: EMPTY
83939: LIST
83940: LIST
83941: PUSH
83942: EMPTY
83943: LIST
83944: LIST
83945: LIST
83946: PUSH
83947: EMPTY
83948: LIST
83949: LIST
83950: PPUSH
83951: CALL_OW 69
83955: ST_TO_ADDR
// if not tmp then
83956: LD_VAR 0 2
83960: NOT
83961: IFFALSE 83965
// exit ;
83963: GO 84048
// p := 0 ;
83965: LD_ADDR_VAR 0 3
83969: PUSH
83970: LD_INT 0
83972: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
83973: LD_INT 35
83975: PPUSH
83976: CALL_OW 67
// p := p + 1 ;
83980: LD_ADDR_VAR 0 3
83984: PUSH
83985: LD_VAR 0 3
83989: PUSH
83990: LD_INT 1
83992: PLUS
83993: ST_TO_ADDR
// for i in tmp do
83994: LD_ADDR_VAR 0 1
83998: PUSH
83999: LD_VAR 0 2
84003: PUSH
84004: FOR_IN
84005: IFFALSE 84036
// if GetLives ( i ) < 1000 then
84007: LD_VAR 0 1
84011: PPUSH
84012: CALL_OW 256
84016: PUSH
84017: LD_INT 1000
84019: LESS
84020: IFFALSE 84034
// SetLives ( i , 1000 ) ;
84022: LD_VAR 0 1
84026: PPUSH
84027: LD_INT 1000
84029: PPUSH
84030: CALL_OW 234
84034: GO 84004
84036: POP
84037: POP
// until p > 20 ;
84038: LD_VAR 0 3
84042: PUSH
84043: LD_INT 20
84045: GREATER
84046: IFFALSE 83973
// end ;
84048: PPOPN 3
84050: END
// every 0 0$1 trigger StreamModeActive and sTime do
84051: LD_EXP 75
84055: PUSH
84056: LD_EXP 126
84060: AND
84061: IFFALSE 84096
84063: GO 84065
84065: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
84066: LD_INT 28
84068: PPUSH
84069: LD_OWVAR 2
84073: PPUSH
84074: LD_INT 2
84076: PPUSH
84077: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
84081: LD_INT 30
84083: PPUSH
84084: LD_OWVAR 2
84088: PPUSH
84089: LD_INT 2
84091: PPUSH
84092: CALL_OW 322
// end ;
84096: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
84097: LD_EXP 75
84101: PUSH
84102: LD_EXP 127
84106: AND
84107: IFFALSE 84228
84109: GO 84111
84111: DISABLE
84112: LD_INT 0
84114: PPUSH
84115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
84116: LD_ADDR_VAR 0 2
84120: PUSH
84121: LD_INT 22
84123: PUSH
84124: LD_OWVAR 2
84128: PUSH
84129: EMPTY
84130: LIST
84131: LIST
84132: PUSH
84133: LD_INT 21
84135: PUSH
84136: LD_INT 1
84138: PUSH
84139: EMPTY
84140: LIST
84141: LIST
84142: PUSH
84143: LD_INT 3
84145: PUSH
84146: LD_INT 23
84148: PUSH
84149: LD_INT 0
84151: PUSH
84152: EMPTY
84153: LIST
84154: LIST
84155: PUSH
84156: EMPTY
84157: LIST
84158: LIST
84159: PUSH
84160: EMPTY
84161: LIST
84162: LIST
84163: LIST
84164: PPUSH
84165: CALL_OW 69
84169: ST_TO_ADDR
// if not tmp then
84170: LD_VAR 0 2
84174: NOT
84175: IFFALSE 84179
// exit ;
84177: GO 84228
// for i in tmp do
84179: LD_ADDR_VAR 0 1
84183: PUSH
84184: LD_VAR 0 2
84188: PUSH
84189: FOR_IN
84190: IFFALSE 84226
// begin if Crawls ( i ) then
84192: LD_VAR 0 1
84196: PPUSH
84197: CALL_OW 318
84201: IFFALSE 84212
// ComWalk ( i ) ;
84203: LD_VAR 0 1
84207: PPUSH
84208: CALL_OW 138
// SetClass ( i , 2 ) ;
84212: LD_VAR 0 1
84216: PPUSH
84217: LD_INT 2
84219: PPUSH
84220: CALL_OW 336
// end ;
84224: GO 84189
84226: POP
84227: POP
// end ;
84228: PPOPN 2
84230: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
84231: LD_EXP 75
84235: PUSH
84236: LD_EXP 128
84240: AND
84241: IFFALSE 84529
84243: GO 84245
84245: DISABLE
84246: LD_INT 0
84248: PPUSH
84249: PPUSH
84250: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
84251: LD_OWVAR 2
84255: PPUSH
84256: LD_INT 9
84258: PPUSH
84259: LD_INT 1
84261: PPUSH
84262: LD_INT 1
84264: PPUSH
84265: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
84269: LD_INT 9
84271: PPUSH
84272: LD_OWVAR 2
84276: PPUSH
84277: CALL_OW 343
// uc_side := 9 ;
84281: LD_ADDR_OWVAR 20
84285: PUSH
84286: LD_INT 9
84288: ST_TO_ADDR
// uc_nation := 2 ;
84289: LD_ADDR_OWVAR 21
84293: PUSH
84294: LD_INT 2
84296: ST_TO_ADDR
// hc_name := Dark Warrior ;
84297: LD_ADDR_OWVAR 26
84301: PUSH
84302: LD_STRING Dark Warrior
84304: ST_TO_ADDR
// hc_gallery :=  ;
84305: LD_ADDR_OWVAR 33
84309: PUSH
84310: LD_STRING 
84312: ST_TO_ADDR
// hc_noskilllimit := true ;
84313: LD_ADDR_OWVAR 76
84317: PUSH
84318: LD_INT 1
84320: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
84321: LD_ADDR_OWVAR 31
84325: PUSH
84326: LD_INT 30
84328: PUSH
84329: LD_INT 30
84331: PUSH
84332: LD_INT 30
84334: PUSH
84335: LD_INT 30
84337: PUSH
84338: EMPTY
84339: LIST
84340: LIST
84341: LIST
84342: LIST
84343: ST_TO_ADDR
// un := CreateHuman ;
84344: LD_ADDR_VAR 0 3
84348: PUSH
84349: CALL_OW 44
84353: ST_TO_ADDR
// hc_noskilllimit := false ;
84354: LD_ADDR_OWVAR 76
84358: PUSH
84359: LD_INT 0
84361: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
84362: LD_VAR 0 3
84366: PPUSH
84367: LD_INT 1
84369: PPUSH
84370: CALL_OW 51
// ToLua ( playRanger() ) ;
84374: LD_STRING playRanger()
84376: PPUSH
84377: CALL_OW 559
// p := 0 ;
84381: LD_ADDR_VAR 0 2
84385: PUSH
84386: LD_INT 0
84388: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
84389: LD_INT 35
84391: PPUSH
84392: CALL_OW 67
// p := p + 1 ;
84396: LD_ADDR_VAR 0 2
84400: PUSH
84401: LD_VAR 0 2
84405: PUSH
84406: LD_INT 1
84408: PLUS
84409: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
84410: LD_VAR 0 3
84414: PPUSH
84415: CALL_OW 256
84419: PUSH
84420: LD_INT 1000
84422: LESS
84423: IFFALSE 84437
// SetLives ( un , 1000 ) ;
84425: LD_VAR 0 3
84429: PPUSH
84430: LD_INT 1000
84432: PPUSH
84433: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
84437: LD_VAR 0 3
84441: PPUSH
84442: LD_INT 81
84444: PUSH
84445: LD_OWVAR 2
84449: PUSH
84450: EMPTY
84451: LIST
84452: LIST
84453: PUSH
84454: LD_INT 91
84456: PUSH
84457: LD_VAR 0 3
84461: PUSH
84462: LD_INT 30
84464: PUSH
84465: EMPTY
84466: LIST
84467: LIST
84468: LIST
84469: PUSH
84470: EMPTY
84471: LIST
84472: LIST
84473: PPUSH
84474: CALL_OW 69
84478: PPUSH
84479: LD_VAR 0 3
84483: PPUSH
84484: CALL_OW 74
84488: PPUSH
84489: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
84493: LD_VAR 0 2
84497: PUSH
84498: LD_INT 80
84500: GREATER
84501: PUSH
84502: LD_VAR 0 3
84506: PPUSH
84507: CALL_OW 301
84511: OR
84512: IFFALSE 84389
// if un then
84514: LD_VAR 0 3
84518: IFFALSE 84529
// RemoveUnit ( un ) ;
84520: LD_VAR 0 3
84524: PPUSH
84525: CALL_OW 64
// end ;
84529: PPOPN 3
84531: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
84532: LD_EXP 129
84536: IFFALSE 84652
84538: GO 84540
84540: DISABLE
84541: LD_INT 0
84543: PPUSH
84544: PPUSH
84545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
84546: LD_ADDR_VAR 0 2
84550: PUSH
84551: LD_INT 81
84553: PUSH
84554: LD_OWVAR 2
84558: PUSH
84559: EMPTY
84560: LIST
84561: LIST
84562: PUSH
84563: LD_INT 21
84565: PUSH
84566: LD_INT 1
84568: PUSH
84569: EMPTY
84570: LIST
84571: LIST
84572: PUSH
84573: EMPTY
84574: LIST
84575: LIST
84576: PPUSH
84577: CALL_OW 69
84581: ST_TO_ADDR
// ToLua ( playComputer() ) ;
84582: LD_STRING playComputer()
84584: PPUSH
84585: CALL_OW 559
// if not tmp then
84589: LD_VAR 0 2
84593: NOT
84594: IFFALSE 84598
// exit ;
84596: GO 84652
// for i in tmp do
84598: LD_ADDR_VAR 0 1
84602: PUSH
84603: LD_VAR 0 2
84607: PUSH
84608: FOR_IN
84609: IFFALSE 84650
// for j := 1 to 4 do
84611: LD_ADDR_VAR 0 3
84615: PUSH
84616: DOUBLE
84617: LD_INT 1
84619: DEC
84620: ST_TO_ADDR
84621: LD_INT 4
84623: PUSH
84624: FOR_TO
84625: IFFALSE 84646
// SetSkill ( i , j , 10 ) ;
84627: LD_VAR 0 1
84631: PPUSH
84632: LD_VAR 0 3
84636: PPUSH
84637: LD_INT 10
84639: PPUSH
84640: CALL_OW 237
84644: GO 84624
84646: POP
84647: POP
84648: GO 84608
84650: POP
84651: POP
// end ;
84652: PPOPN 3
84654: END
// every 0 0$1 trigger s30 do var i , tmp ;
84655: LD_EXP 130
84659: IFFALSE 84728
84661: GO 84663
84663: DISABLE
84664: LD_INT 0
84666: PPUSH
84667: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84668: LD_ADDR_VAR 0 2
84672: PUSH
84673: LD_INT 22
84675: PUSH
84676: LD_OWVAR 2
84680: PUSH
84681: EMPTY
84682: LIST
84683: LIST
84684: PPUSH
84685: CALL_OW 69
84689: ST_TO_ADDR
// if not tmp then
84690: LD_VAR 0 2
84694: NOT
84695: IFFALSE 84699
// exit ;
84697: GO 84728
// for i in tmp do
84699: LD_ADDR_VAR 0 1
84703: PUSH
84704: LD_VAR 0 2
84708: PUSH
84709: FOR_IN
84710: IFFALSE 84726
// SetLives ( i , 300 ) ;
84712: LD_VAR 0 1
84716: PPUSH
84717: LD_INT 300
84719: PPUSH
84720: CALL_OW 234
84724: GO 84709
84726: POP
84727: POP
// end ;
84728: PPOPN 2
84730: END
// every 0 0$1 trigger s60 do var i , tmp ;
84731: LD_EXP 131
84735: IFFALSE 84804
84737: GO 84739
84739: DISABLE
84740: LD_INT 0
84742: PPUSH
84743: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84744: LD_ADDR_VAR 0 2
84748: PUSH
84749: LD_INT 22
84751: PUSH
84752: LD_OWVAR 2
84756: PUSH
84757: EMPTY
84758: LIST
84759: LIST
84760: PPUSH
84761: CALL_OW 69
84765: ST_TO_ADDR
// if not tmp then
84766: LD_VAR 0 2
84770: NOT
84771: IFFALSE 84775
// exit ;
84773: GO 84804
// for i in tmp do
84775: LD_ADDR_VAR 0 1
84779: PUSH
84780: LD_VAR 0 2
84784: PUSH
84785: FOR_IN
84786: IFFALSE 84802
// SetLives ( i , 600 ) ;
84788: LD_VAR 0 1
84792: PPUSH
84793: LD_INT 600
84795: PPUSH
84796: CALL_OW 234
84800: GO 84785
84802: POP
84803: POP
// end ;
84804: PPOPN 2
84806: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
84807: LD_INT 0
84809: PPUSH
// case cmd of 301 :
84810: LD_VAR 0 1
84814: PUSH
84815: LD_INT 301
84817: DOUBLE
84818: EQUAL
84819: IFTRUE 84823
84821: GO 84855
84823: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
84824: LD_VAR 0 6
84828: PPUSH
84829: LD_VAR 0 7
84833: PPUSH
84834: LD_VAR 0 8
84838: PPUSH
84839: LD_VAR 0 4
84843: PPUSH
84844: LD_VAR 0 5
84848: PPUSH
84849: CALL 86064 0 5
84853: GO 84976
84855: LD_INT 302
84857: DOUBLE
84858: EQUAL
84859: IFTRUE 84863
84861: GO 84900
84863: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
84864: LD_VAR 0 6
84868: PPUSH
84869: LD_VAR 0 7
84873: PPUSH
84874: LD_VAR 0 8
84878: PPUSH
84879: LD_VAR 0 9
84883: PPUSH
84884: LD_VAR 0 4
84888: PPUSH
84889: LD_VAR 0 5
84893: PPUSH
84894: CALL 86155 0 6
84898: GO 84976
84900: LD_INT 303
84902: DOUBLE
84903: EQUAL
84904: IFTRUE 84908
84906: GO 84945
84908: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
84909: LD_VAR 0 6
84913: PPUSH
84914: LD_VAR 0 7
84918: PPUSH
84919: LD_VAR 0 8
84923: PPUSH
84924: LD_VAR 0 9
84928: PPUSH
84929: LD_VAR 0 4
84933: PPUSH
84934: LD_VAR 0 5
84938: PPUSH
84939: CALL 84981 0 6
84943: GO 84976
84945: LD_INT 304
84947: DOUBLE
84948: EQUAL
84949: IFTRUE 84953
84951: GO 84975
84953: POP
// hHackTeleport ( unit , x , y ) ; end ;
84954: LD_VAR 0 2
84958: PPUSH
84959: LD_VAR 0 4
84963: PPUSH
84964: LD_VAR 0 5
84968: PPUSH
84969: CALL 86748 0 3
84973: GO 84976
84975: POP
// end ;
84976: LD_VAR 0 12
84980: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
84981: LD_INT 0
84983: PPUSH
84984: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
84985: LD_VAR 0 1
84989: PUSH
84990: LD_INT 1
84992: LESS
84993: PUSH
84994: LD_VAR 0 1
84998: PUSH
84999: LD_INT 3
85001: GREATER
85002: OR
85003: PUSH
85004: LD_VAR 0 5
85008: PPUSH
85009: LD_VAR 0 6
85013: PPUSH
85014: CALL_OW 428
85018: OR
85019: IFFALSE 85023
// exit ;
85021: GO 85751
// uc_side := your_side ;
85023: LD_ADDR_OWVAR 20
85027: PUSH
85028: LD_OWVAR 2
85032: ST_TO_ADDR
// uc_nation := nation ;
85033: LD_ADDR_OWVAR 21
85037: PUSH
85038: LD_VAR 0 1
85042: ST_TO_ADDR
// bc_level = 1 ;
85043: LD_ADDR_OWVAR 43
85047: PUSH
85048: LD_INT 1
85050: ST_TO_ADDR
// case btype of 1 :
85051: LD_VAR 0 2
85055: PUSH
85056: LD_INT 1
85058: DOUBLE
85059: EQUAL
85060: IFTRUE 85064
85062: GO 85075
85064: POP
// bc_type := b_depot ; 2 :
85065: LD_ADDR_OWVAR 42
85069: PUSH
85070: LD_INT 0
85072: ST_TO_ADDR
85073: GO 85695
85075: LD_INT 2
85077: DOUBLE
85078: EQUAL
85079: IFTRUE 85083
85081: GO 85094
85083: POP
// bc_type := b_warehouse ; 3 :
85084: LD_ADDR_OWVAR 42
85088: PUSH
85089: LD_INT 1
85091: ST_TO_ADDR
85092: GO 85695
85094: LD_INT 3
85096: DOUBLE
85097: EQUAL
85098: IFTRUE 85102
85100: GO 85113
85102: POP
// bc_type := b_lab ; 4 .. 9 :
85103: LD_ADDR_OWVAR 42
85107: PUSH
85108: LD_INT 6
85110: ST_TO_ADDR
85111: GO 85695
85113: LD_INT 4
85115: DOUBLE
85116: GREATEREQUAL
85117: IFFALSE 85125
85119: LD_INT 9
85121: DOUBLE
85122: LESSEQUAL
85123: IFTRUE 85127
85125: GO 85187
85127: POP
// begin bc_type := b_lab_half ;
85128: LD_ADDR_OWVAR 42
85132: PUSH
85133: LD_INT 7
85135: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
85136: LD_ADDR_OWVAR 44
85140: PUSH
85141: LD_INT 10
85143: PUSH
85144: LD_INT 11
85146: PUSH
85147: LD_INT 12
85149: PUSH
85150: LD_INT 15
85152: PUSH
85153: LD_INT 14
85155: PUSH
85156: LD_INT 13
85158: PUSH
85159: EMPTY
85160: LIST
85161: LIST
85162: LIST
85163: LIST
85164: LIST
85165: LIST
85166: PUSH
85167: LD_VAR 0 2
85171: PUSH
85172: LD_INT 3
85174: MINUS
85175: ARRAY
85176: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
85177: LD_ADDR_OWVAR 45
85181: PUSH
85182: LD_INT 9
85184: ST_TO_ADDR
// end ; 10 .. 13 :
85185: GO 85695
85187: LD_INT 10
85189: DOUBLE
85190: GREATEREQUAL
85191: IFFALSE 85199
85193: LD_INT 13
85195: DOUBLE
85196: LESSEQUAL
85197: IFTRUE 85201
85199: GO 85278
85201: POP
// begin bc_type := b_lab_full ;
85202: LD_ADDR_OWVAR 42
85206: PUSH
85207: LD_INT 8
85209: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
85210: LD_ADDR_OWVAR 44
85214: PUSH
85215: LD_INT 10
85217: PUSH
85218: LD_INT 12
85220: PUSH
85221: LD_INT 14
85223: PUSH
85224: LD_INT 13
85226: PUSH
85227: EMPTY
85228: LIST
85229: LIST
85230: LIST
85231: LIST
85232: PUSH
85233: LD_VAR 0 2
85237: PUSH
85238: LD_INT 9
85240: MINUS
85241: ARRAY
85242: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
85243: LD_ADDR_OWVAR 45
85247: PUSH
85248: LD_INT 11
85250: PUSH
85251: LD_INT 15
85253: PUSH
85254: LD_INT 12
85256: PUSH
85257: LD_INT 15
85259: PUSH
85260: EMPTY
85261: LIST
85262: LIST
85263: LIST
85264: LIST
85265: PUSH
85266: LD_VAR 0 2
85270: PUSH
85271: LD_INT 9
85273: MINUS
85274: ARRAY
85275: ST_TO_ADDR
// end ; 14 :
85276: GO 85695
85278: LD_INT 14
85280: DOUBLE
85281: EQUAL
85282: IFTRUE 85286
85284: GO 85297
85286: POP
// bc_type := b_workshop ; 15 :
85287: LD_ADDR_OWVAR 42
85291: PUSH
85292: LD_INT 2
85294: ST_TO_ADDR
85295: GO 85695
85297: LD_INT 15
85299: DOUBLE
85300: EQUAL
85301: IFTRUE 85305
85303: GO 85316
85305: POP
// bc_type := b_factory ; 16 :
85306: LD_ADDR_OWVAR 42
85310: PUSH
85311: LD_INT 3
85313: ST_TO_ADDR
85314: GO 85695
85316: LD_INT 16
85318: DOUBLE
85319: EQUAL
85320: IFTRUE 85324
85322: GO 85335
85324: POP
// bc_type := b_ext_gun ; 17 :
85325: LD_ADDR_OWVAR 42
85329: PUSH
85330: LD_INT 17
85332: ST_TO_ADDR
85333: GO 85695
85335: LD_INT 17
85337: DOUBLE
85338: EQUAL
85339: IFTRUE 85343
85341: GO 85371
85343: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
85344: LD_ADDR_OWVAR 42
85348: PUSH
85349: LD_INT 19
85351: PUSH
85352: LD_INT 23
85354: PUSH
85355: LD_INT 19
85357: PUSH
85358: EMPTY
85359: LIST
85360: LIST
85361: LIST
85362: PUSH
85363: LD_VAR 0 1
85367: ARRAY
85368: ST_TO_ADDR
85369: GO 85695
85371: LD_INT 18
85373: DOUBLE
85374: EQUAL
85375: IFTRUE 85379
85377: GO 85390
85379: POP
// bc_type := b_ext_radar ; 19 :
85380: LD_ADDR_OWVAR 42
85384: PUSH
85385: LD_INT 20
85387: ST_TO_ADDR
85388: GO 85695
85390: LD_INT 19
85392: DOUBLE
85393: EQUAL
85394: IFTRUE 85398
85396: GO 85409
85398: POP
// bc_type := b_ext_radio ; 20 :
85399: LD_ADDR_OWVAR 42
85403: PUSH
85404: LD_INT 22
85406: ST_TO_ADDR
85407: GO 85695
85409: LD_INT 20
85411: DOUBLE
85412: EQUAL
85413: IFTRUE 85417
85415: GO 85428
85417: POP
// bc_type := b_ext_siberium ; 21 :
85418: LD_ADDR_OWVAR 42
85422: PUSH
85423: LD_INT 21
85425: ST_TO_ADDR
85426: GO 85695
85428: LD_INT 21
85430: DOUBLE
85431: EQUAL
85432: IFTRUE 85436
85434: GO 85447
85436: POP
// bc_type := b_ext_computer ; 22 :
85437: LD_ADDR_OWVAR 42
85441: PUSH
85442: LD_INT 24
85444: ST_TO_ADDR
85445: GO 85695
85447: LD_INT 22
85449: DOUBLE
85450: EQUAL
85451: IFTRUE 85455
85453: GO 85466
85455: POP
// bc_type := b_ext_track ; 23 :
85456: LD_ADDR_OWVAR 42
85460: PUSH
85461: LD_INT 16
85463: ST_TO_ADDR
85464: GO 85695
85466: LD_INT 23
85468: DOUBLE
85469: EQUAL
85470: IFTRUE 85474
85472: GO 85485
85474: POP
// bc_type := b_ext_laser ; 24 :
85475: LD_ADDR_OWVAR 42
85479: PUSH
85480: LD_INT 25
85482: ST_TO_ADDR
85483: GO 85695
85485: LD_INT 24
85487: DOUBLE
85488: EQUAL
85489: IFTRUE 85493
85491: GO 85504
85493: POP
// bc_type := b_control_tower ; 25 :
85494: LD_ADDR_OWVAR 42
85498: PUSH
85499: LD_INT 36
85501: ST_TO_ADDR
85502: GO 85695
85504: LD_INT 25
85506: DOUBLE
85507: EQUAL
85508: IFTRUE 85512
85510: GO 85523
85512: POP
// bc_type := b_breastwork ; 26 :
85513: LD_ADDR_OWVAR 42
85517: PUSH
85518: LD_INT 31
85520: ST_TO_ADDR
85521: GO 85695
85523: LD_INT 26
85525: DOUBLE
85526: EQUAL
85527: IFTRUE 85531
85529: GO 85542
85531: POP
// bc_type := b_bunker ; 27 :
85532: LD_ADDR_OWVAR 42
85536: PUSH
85537: LD_INT 32
85539: ST_TO_ADDR
85540: GO 85695
85542: LD_INT 27
85544: DOUBLE
85545: EQUAL
85546: IFTRUE 85550
85548: GO 85561
85550: POP
// bc_type := b_turret ; 28 :
85551: LD_ADDR_OWVAR 42
85555: PUSH
85556: LD_INT 33
85558: ST_TO_ADDR
85559: GO 85695
85561: LD_INT 28
85563: DOUBLE
85564: EQUAL
85565: IFTRUE 85569
85567: GO 85580
85569: POP
// bc_type := b_armoury ; 29 :
85570: LD_ADDR_OWVAR 42
85574: PUSH
85575: LD_INT 4
85577: ST_TO_ADDR
85578: GO 85695
85580: LD_INT 29
85582: DOUBLE
85583: EQUAL
85584: IFTRUE 85588
85586: GO 85599
85588: POP
// bc_type := b_barracks ; 30 :
85589: LD_ADDR_OWVAR 42
85593: PUSH
85594: LD_INT 5
85596: ST_TO_ADDR
85597: GO 85695
85599: LD_INT 30
85601: DOUBLE
85602: EQUAL
85603: IFTRUE 85607
85605: GO 85618
85607: POP
// bc_type := b_solar_power ; 31 :
85608: LD_ADDR_OWVAR 42
85612: PUSH
85613: LD_INT 27
85615: ST_TO_ADDR
85616: GO 85695
85618: LD_INT 31
85620: DOUBLE
85621: EQUAL
85622: IFTRUE 85626
85624: GO 85637
85626: POP
// bc_type := b_oil_power ; 32 :
85627: LD_ADDR_OWVAR 42
85631: PUSH
85632: LD_INT 26
85634: ST_TO_ADDR
85635: GO 85695
85637: LD_INT 32
85639: DOUBLE
85640: EQUAL
85641: IFTRUE 85645
85643: GO 85656
85645: POP
// bc_type := b_siberite_power ; 33 :
85646: LD_ADDR_OWVAR 42
85650: PUSH
85651: LD_INT 28
85653: ST_TO_ADDR
85654: GO 85695
85656: LD_INT 33
85658: DOUBLE
85659: EQUAL
85660: IFTRUE 85664
85662: GO 85675
85664: POP
// bc_type := b_oil_mine ; 34 :
85665: LD_ADDR_OWVAR 42
85669: PUSH
85670: LD_INT 29
85672: ST_TO_ADDR
85673: GO 85695
85675: LD_INT 34
85677: DOUBLE
85678: EQUAL
85679: IFTRUE 85683
85681: GO 85694
85683: POP
// bc_type := b_siberite_mine ; end ;
85684: LD_ADDR_OWVAR 42
85688: PUSH
85689: LD_INT 30
85691: ST_TO_ADDR
85692: GO 85695
85694: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
85695: LD_ADDR_VAR 0 8
85699: PUSH
85700: LD_VAR 0 5
85704: PPUSH
85705: LD_VAR 0 6
85709: PPUSH
85710: LD_VAR 0 3
85714: PPUSH
85715: CALL_OW 47
85719: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
85720: LD_OWVAR 42
85724: PUSH
85725: LD_INT 32
85727: PUSH
85728: LD_INT 33
85730: PUSH
85731: EMPTY
85732: LIST
85733: LIST
85734: IN
85735: IFFALSE 85751
// PlaceWeaponTurret ( b , weapon ) ;
85737: LD_VAR 0 8
85741: PPUSH
85742: LD_VAR 0 4
85746: PPUSH
85747: CALL_OW 431
// end ;
85751: LD_VAR 0 7
85755: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
85756: LD_INT 0
85758: PPUSH
85759: PPUSH
85760: PPUSH
85761: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
85762: LD_ADDR_VAR 0 4
85766: PUSH
85767: LD_INT 22
85769: PUSH
85770: LD_OWVAR 2
85774: PUSH
85775: EMPTY
85776: LIST
85777: LIST
85778: PUSH
85779: LD_INT 2
85781: PUSH
85782: LD_INT 30
85784: PUSH
85785: LD_INT 0
85787: PUSH
85788: EMPTY
85789: LIST
85790: LIST
85791: PUSH
85792: LD_INT 30
85794: PUSH
85795: LD_INT 1
85797: PUSH
85798: EMPTY
85799: LIST
85800: LIST
85801: PUSH
85802: EMPTY
85803: LIST
85804: LIST
85805: LIST
85806: PUSH
85807: EMPTY
85808: LIST
85809: LIST
85810: PPUSH
85811: CALL_OW 69
85815: ST_TO_ADDR
// if not tmp then
85816: LD_VAR 0 4
85820: NOT
85821: IFFALSE 85825
// exit ;
85823: GO 85884
// for i in tmp do
85825: LD_ADDR_VAR 0 2
85829: PUSH
85830: LD_VAR 0 4
85834: PUSH
85835: FOR_IN
85836: IFFALSE 85882
// for j = 1 to 3 do
85838: LD_ADDR_VAR 0 3
85842: PUSH
85843: DOUBLE
85844: LD_INT 1
85846: DEC
85847: ST_TO_ADDR
85848: LD_INT 3
85850: PUSH
85851: FOR_TO
85852: IFFALSE 85878
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
85854: LD_VAR 0 2
85858: PPUSH
85859: CALL_OW 274
85863: PPUSH
85864: LD_VAR 0 3
85868: PPUSH
85869: LD_INT 99999
85871: PPUSH
85872: CALL_OW 277
85876: GO 85851
85878: POP
85879: POP
85880: GO 85835
85882: POP
85883: POP
// end ;
85884: LD_VAR 0 1
85888: RET
// export function hHackSetLevel10 ; var i , j ; begin
85889: LD_INT 0
85891: PPUSH
85892: PPUSH
85893: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
85894: LD_ADDR_VAR 0 2
85898: PUSH
85899: LD_INT 21
85901: PUSH
85902: LD_INT 1
85904: PUSH
85905: EMPTY
85906: LIST
85907: LIST
85908: PPUSH
85909: CALL_OW 69
85913: PUSH
85914: FOR_IN
85915: IFFALSE 85967
// if IsSelected ( i ) then
85917: LD_VAR 0 2
85921: PPUSH
85922: CALL_OW 306
85926: IFFALSE 85965
// begin for j := 1 to 4 do
85928: LD_ADDR_VAR 0 3
85932: PUSH
85933: DOUBLE
85934: LD_INT 1
85936: DEC
85937: ST_TO_ADDR
85938: LD_INT 4
85940: PUSH
85941: FOR_TO
85942: IFFALSE 85963
// SetSkill ( i , j , 10 ) ;
85944: LD_VAR 0 2
85948: PPUSH
85949: LD_VAR 0 3
85953: PPUSH
85954: LD_INT 10
85956: PPUSH
85957: CALL_OW 237
85961: GO 85941
85963: POP
85964: POP
// end ;
85965: GO 85914
85967: POP
85968: POP
// end ;
85969: LD_VAR 0 1
85973: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
85974: LD_INT 0
85976: PPUSH
85977: PPUSH
85978: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
85979: LD_ADDR_VAR 0 2
85983: PUSH
85984: LD_INT 22
85986: PUSH
85987: LD_OWVAR 2
85991: PUSH
85992: EMPTY
85993: LIST
85994: LIST
85995: PUSH
85996: LD_INT 21
85998: PUSH
85999: LD_INT 1
86001: PUSH
86002: EMPTY
86003: LIST
86004: LIST
86005: PUSH
86006: EMPTY
86007: LIST
86008: LIST
86009: PPUSH
86010: CALL_OW 69
86014: PUSH
86015: FOR_IN
86016: IFFALSE 86057
// begin for j := 1 to 4 do
86018: LD_ADDR_VAR 0 3
86022: PUSH
86023: DOUBLE
86024: LD_INT 1
86026: DEC
86027: ST_TO_ADDR
86028: LD_INT 4
86030: PUSH
86031: FOR_TO
86032: IFFALSE 86053
// SetSkill ( i , j , 10 ) ;
86034: LD_VAR 0 2
86038: PPUSH
86039: LD_VAR 0 3
86043: PPUSH
86044: LD_INT 10
86046: PPUSH
86047: CALL_OW 237
86051: GO 86031
86053: POP
86054: POP
// end ;
86055: GO 86015
86057: POP
86058: POP
// end ;
86059: LD_VAR 0 1
86063: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
86064: LD_INT 0
86066: PPUSH
// uc_side := your_side ;
86067: LD_ADDR_OWVAR 20
86071: PUSH
86072: LD_OWVAR 2
86076: ST_TO_ADDR
// uc_nation := nation ;
86077: LD_ADDR_OWVAR 21
86081: PUSH
86082: LD_VAR 0 1
86086: ST_TO_ADDR
// InitHc ;
86087: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
86091: LD_INT 0
86093: PPUSH
86094: LD_VAR 0 2
86098: PPUSH
86099: LD_VAR 0 3
86103: PPUSH
86104: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
86108: LD_VAR 0 4
86112: PPUSH
86113: LD_VAR 0 5
86117: PPUSH
86118: CALL_OW 428
86122: PUSH
86123: LD_INT 0
86125: EQUAL
86126: IFFALSE 86150
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
86128: CALL_OW 44
86132: PPUSH
86133: LD_VAR 0 4
86137: PPUSH
86138: LD_VAR 0 5
86142: PPUSH
86143: LD_INT 1
86145: PPUSH
86146: CALL_OW 48
// end ;
86150: LD_VAR 0 6
86154: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
86155: LD_INT 0
86157: PPUSH
86158: PPUSH
// uc_side := your_side ;
86159: LD_ADDR_OWVAR 20
86163: PUSH
86164: LD_OWVAR 2
86168: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
86169: LD_VAR 0 1
86173: PUSH
86174: LD_INT 1
86176: PUSH
86177: LD_INT 2
86179: PUSH
86180: LD_INT 3
86182: PUSH
86183: LD_INT 4
86185: PUSH
86186: LD_INT 5
86188: PUSH
86189: EMPTY
86190: LIST
86191: LIST
86192: LIST
86193: LIST
86194: LIST
86195: IN
86196: IFFALSE 86208
// uc_nation := nation_american else
86198: LD_ADDR_OWVAR 21
86202: PUSH
86203: LD_INT 1
86205: ST_TO_ADDR
86206: GO 86251
// if chassis in [ 11 , 12 , 13 , 14 ] then
86208: LD_VAR 0 1
86212: PUSH
86213: LD_INT 11
86215: PUSH
86216: LD_INT 12
86218: PUSH
86219: LD_INT 13
86221: PUSH
86222: LD_INT 14
86224: PUSH
86225: EMPTY
86226: LIST
86227: LIST
86228: LIST
86229: LIST
86230: IN
86231: IFFALSE 86243
// uc_nation := nation_arabian else
86233: LD_ADDR_OWVAR 21
86237: PUSH
86238: LD_INT 2
86240: ST_TO_ADDR
86241: GO 86251
// uc_nation := nation_russian ;
86243: LD_ADDR_OWVAR 21
86247: PUSH
86248: LD_INT 3
86250: ST_TO_ADDR
// vc_chassis := chassis ;
86251: LD_ADDR_OWVAR 37
86255: PUSH
86256: LD_VAR 0 1
86260: ST_TO_ADDR
// vc_engine := engine ;
86261: LD_ADDR_OWVAR 39
86265: PUSH
86266: LD_VAR 0 2
86270: ST_TO_ADDR
// vc_control := control ;
86271: LD_ADDR_OWVAR 38
86275: PUSH
86276: LD_VAR 0 3
86280: ST_TO_ADDR
// vc_weapon := weapon ;
86281: LD_ADDR_OWVAR 40
86285: PUSH
86286: LD_VAR 0 4
86290: ST_TO_ADDR
// un := CreateVehicle ;
86291: LD_ADDR_VAR 0 8
86295: PUSH
86296: CALL_OW 45
86300: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
86301: LD_VAR 0 8
86305: PPUSH
86306: LD_INT 0
86308: PPUSH
86309: LD_INT 5
86311: PPUSH
86312: CALL_OW 12
86316: PPUSH
86317: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
86321: LD_VAR 0 8
86325: PPUSH
86326: LD_VAR 0 5
86330: PPUSH
86331: LD_VAR 0 6
86335: PPUSH
86336: LD_INT 1
86338: PPUSH
86339: CALL_OW 48
// end ;
86343: LD_VAR 0 7
86347: RET
// export hInvincible ; every 1 do
86348: GO 86350
86350: DISABLE
// hInvincible := [ ] ;
86351: LD_ADDR_EXP 132
86355: PUSH
86356: EMPTY
86357: ST_TO_ADDR
86358: END
// every 10 do var i ;
86359: GO 86361
86361: DISABLE
86362: LD_INT 0
86364: PPUSH
// begin enable ;
86365: ENABLE
// if not hInvincible then
86366: LD_EXP 132
86370: NOT
86371: IFFALSE 86375
// exit ;
86373: GO 86419
// for i in hInvincible do
86375: LD_ADDR_VAR 0 1
86379: PUSH
86380: LD_EXP 132
86384: PUSH
86385: FOR_IN
86386: IFFALSE 86417
// if GetLives ( i ) < 1000 then
86388: LD_VAR 0 1
86392: PPUSH
86393: CALL_OW 256
86397: PUSH
86398: LD_INT 1000
86400: LESS
86401: IFFALSE 86415
// SetLives ( i , 1000 ) ;
86403: LD_VAR 0 1
86407: PPUSH
86408: LD_INT 1000
86410: PPUSH
86411: CALL_OW 234
86415: GO 86385
86417: POP
86418: POP
// end ;
86419: PPOPN 1
86421: END
// export function hHackInvincible ; var i ; begin
86422: LD_INT 0
86424: PPUSH
86425: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
86426: LD_ADDR_VAR 0 2
86430: PUSH
86431: LD_INT 2
86433: PUSH
86434: LD_INT 21
86436: PUSH
86437: LD_INT 1
86439: PUSH
86440: EMPTY
86441: LIST
86442: LIST
86443: PUSH
86444: LD_INT 21
86446: PUSH
86447: LD_INT 2
86449: PUSH
86450: EMPTY
86451: LIST
86452: LIST
86453: PUSH
86454: EMPTY
86455: LIST
86456: LIST
86457: LIST
86458: PPUSH
86459: CALL_OW 69
86463: PUSH
86464: FOR_IN
86465: IFFALSE 86526
// if IsSelected ( i ) then
86467: LD_VAR 0 2
86471: PPUSH
86472: CALL_OW 306
86476: IFFALSE 86524
// begin if i in hInvincible then
86478: LD_VAR 0 2
86482: PUSH
86483: LD_EXP 132
86487: IN
86488: IFFALSE 86508
// hInvincible := hInvincible diff i else
86490: LD_ADDR_EXP 132
86494: PUSH
86495: LD_EXP 132
86499: PUSH
86500: LD_VAR 0 2
86504: DIFF
86505: ST_TO_ADDR
86506: GO 86524
// hInvincible := hInvincible union i ;
86508: LD_ADDR_EXP 132
86512: PUSH
86513: LD_EXP 132
86517: PUSH
86518: LD_VAR 0 2
86522: UNION
86523: ST_TO_ADDR
// end ;
86524: GO 86464
86526: POP
86527: POP
// end ;
86528: LD_VAR 0 1
86532: RET
// export function hHackInvisible ; var i , j ; begin
86533: LD_INT 0
86535: PPUSH
86536: PPUSH
86537: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
86538: LD_ADDR_VAR 0 2
86542: PUSH
86543: LD_INT 21
86545: PUSH
86546: LD_INT 1
86548: PUSH
86549: EMPTY
86550: LIST
86551: LIST
86552: PPUSH
86553: CALL_OW 69
86557: PUSH
86558: FOR_IN
86559: IFFALSE 86583
// if IsSelected ( i ) then
86561: LD_VAR 0 2
86565: PPUSH
86566: CALL_OW 306
86570: IFFALSE 86581
// ComForceInvisible ( i ) ;
86572: LD_VAR 0 2
86576: PPUSH
86577: CALL_OW 496
86581: GO 86558
86583: POP
86584: POP
// end ;
86585: LD_VAR 0 1
86589: RET
// export function hHackChangeYourSide ; begin
86590: LD_INT 0
86592: PPUSH
// if your_side = 8 then
86593: LD_OWVAR 2
86597: PUSH
86598: LD_INT 8
86600: EQUAL
86601: IFFALSE 86613
// your_side := 0 else
86603: LD_ADDR_OWVAR 2
86607: PUSH
86608: LD_INT 0
86610: ST_TO_ADDR
86611: GO 86627
// your_side := your_side + 1 ;
86613: LD_ADDR_OWVAR 2
86617: PUSH
86618: LD_OWVAR 2
86622: PUSH
86623: LD_INT 1
86625: PLUS
86626: ST_TO_ADDR
// end ;
86627: LD_VAR 0 1
86631: RET
// export function hHackChangeUnitSide ; var i , j ; begin
86632: LD_INT 0
86634: PPUSH
86635: PPUSH
86636: PPUSH
// for i in all_units do
86637: LD_ADDR_VAR 0 2
86641: PUSH
86642: LD_OWVAR 3
86646: PUSH
86647: FOR_IN
86648: IFFALSE 86726
// if IsSelected ( i ) then
86650: LD_VAR 0 2
86654: PPUSH
86655: CALL_OW 306
86659: IFFALSE 86724
// begin j := GetSide ( i ) ;
86661: LD_ADDR_VAR 0 3
86665: PUSH
86666: LD_VAR 0 2
86670: PPUSH
86671: CALL_OW 255
86675: ST_TO_ADDR
// if j = 8 then
86676: LD_VAR 0 3
86680: PUSH
86681: LD_INT 8
86683: EQUAL
86684: IFFALSE 86696
// j := 0 else
86686: LD_ADDR_VAR 0 3
86690: PUSH
86691: LD_INT 0
86693: ST_TO_ADDR
86694: GO 86710
// j := j + 1 ;
86696: LD_ADDR_VAR 0 3
86700: PUSH
86701: LD_VAR 0 3
86705: PUSH
86706: LD_INT 1
86708: PLUS
86709: ST_TO_ADDR
// SetSide ( i , j ) ;
86710: LD_VAR 0 2
86714: PPUSH
86715: LD_VAR 0 3
86719: PPUSH
86720: CALL_OW 235
// end ;
86724: GO 86647
86726: POP
86727: POP
// end ;
86728: LD_VAR 0 1
86732: RET
// export function hHackFog ; begin
86733: LD_INT 0
86735: PPUSH
// FogOff ( true ) ;
86736: LD_INT 1
86738: PPUSH
86739: CALL_OW 344
// end ;
86743: LD_VAR 0 1
86747: RET
// export function hHackTeleport ( unit , x , y ) ; begin
86748: LD_INT 0
86750: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
86751: LD_VAR 0 1
86755: PPUSH
86756: LD_VAR 0 2
86760: PPUSH
86761: LD_VAR 0 3
86765: PPUSH
86766: LD_INT 1
86768: PPUSH
86769: LD_INT 1
86771: PPUSH
86772: CALL_OW 483
// CenterOnXY ( x , y ) ;
86776: LD_VAR 0 2
86780: PPUSH
86781: LD_VAR 0 3
86785: PPUSH
86786: CALL_OW 84
// end ;
86790: LD_VAR 0 4
86794: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
86795: LD_INT 0
86797: PPUSH
86798: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
86799: LD_VAR 0 1
86803: NOT
86804: PUSH
86805: LD_VAR 0 2
86809: PPUSH
86810: LD_VAR 0 3
86814: PPUSH
86815: CALL_OW 488
86819: NOT
86820: OR
86821: PUSH
86822: LD_VAR 0 1
86826: PPUSH
86827: CALL_OW 266
86831: PUSH
86832: LD_INT 3
86834: NONEQUAL
86835: PUSH
86836: LD_VAR 0 1
86840: PPUSH
86841: CALL_OW 247
86845: PUSH
86846: LD_INT 1
86848: EQUAL
86849: NOT
86850: AND
86851: OR
86852: IFFALSE 86856
// exit ;
86854: GO 87138
// if GetType ( factory ) = unit_human then
86856: LD_VAR 0 1
86860: PPUSH
86861: CALL_OW 247
86865: PUSH
86866: LD_INT 1
86868: EQUAL
86869: IFFALSE 86886
// factory := IsInUnit ( factory ) ;
86871: LD_ADDR_VAR 0 1
86875: PUSH
86876: LD_VAR 0 1
86880: PPUSH
86881: CALL_OW 310
86885: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
86886: LD_VAR 0 1
86890: PPUSH
86891: CALL_OW 266
86895: PUSH
86896: LD_INT 3
86898: NONEQUAL
86899: IFFALSE 86903
// exit ;
86901: GO 87138
// for i := 1 to Count ( factoryWaypoints ) do
86903: LD_ADDR_VAR 0 5
86907: PUSH
86908: DOUBLE
86909: LD_INT 1
86911: DEC
86912: ST_TO_ADDR
86913: LD_EXP 133
86917: PPUSH
86918: CALL 31594 0 1
86922: PUSH
86923: FOR_TO
86924: IFFALSE 87086
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
86926: LD_VAR 0 2
86930: PPUSH
86931: LD_VAR 0 3
86935: PPUSH
86936: CALL_OW 428
86940: PUSH
86941: LD_EXP 133
86945: PUSH
86946: LD_VAR 0 5
86950: ARRAY
86951: PUSH
86952: LD_INT 2
86954: ARRAY
86955: EQUAL
86956: IFFALSE 86988
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
86958: LD_ADDR_EXP 133
86962: PUSH
86963: LD_EXP 133
86967: PPUSH
86968: LD_VAR 0 5
86972: PPUSH
86973: CALL_OW 3
86977: ST_TO_ADDR
// UpdateFactoryWaypoints ;
86978: CALL 87143 0 0
// exit ;
86982: POP
86983: POP
86984: GO 87138
// end else
86986: GO 87084
// if factory = factoryWaypoints [ i ] [ 2 ] then
86988: LD_VAR 0 1
86992: PUSH
86993: LD_EXP 133
86997: PUSH
86998: LD_VAR 0 5
87002: ARRAY
87003: PUSH
87004: LD_INT 2
87006: ARRAY
87007: EQUAL
87008: IFFALSE 87084
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
87010: LD_ADDR_EXP 133
87014: PUSH
87015: LD_EXP 133
87019: PPUSH
87020: LD_VAR 0 5
87024: PPUSH
87025: CALL_OW 3
87029: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
87030: LD_ADDR_EXP 133
87034: PUSH
87035: LD_EXP 133
87039: PPUSH
87040: LD_VAR 0 1
87044: PPUSH
87045: CALL_OW 255
87049: PUSH
87050: LD_VAR 0 1
87054: PUSH
87055: LD_VAR 0 2
87059: PUSH
87060: LD_VAR 0 3
87064: PUSH
87065: EMPTY
87066: LIST
87067: LIST
87068: LIST
87069: LIST
87070: PPUSH
87071: CALL 67203 0 2
87075: ST_TO_ADDR
// UpdateFactoryWaypoints ;
87076: CALL 87143 0 0
// exit ;
87080: POP
87081: POP
87082: GO 87138
// end ; end ;
87084: GO 86923
87086: POP
87087: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
87088: LD_ADDR_EXP 133
87092: PUSH
87093: LD_EXP 133
87097: PPUSH
87098: LD_VAR 0 1
87102: PPUSH
87103: CALL_OW 255
87107: PUSH
87108: LD_VAR 0 1
87112: PUSH
87113: LD_VAR 0 2
87117: PUSH
87118: LD_VAR 0 3
87122: PUSH
87123: EMPTY
87124: LIST
87125: LIST
87126: LIST
87127: LIST
87128: PPUSH
87129: CALL 67203 0 2
87133: ST_TO_ADDR
// UpdateFactoryWaypoints ;
87134: CALL 87143 0 0
// end ;
87138: LD_VAR 0 4
87142: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
87143: LD_INT 0
87145: PPUSH
87146: PPUSH
87147: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
87148: LD_STRING resetFactoryWaypoint();
87150: PPUSH
87151: CALL_OW 559
// if factoryWaypoints then
87155: LD_EXP 133
87159: IFFALSE 87280
// begin list := factoryWaypoints ;
87161: LD_ADDR_VAR 0 3
87165: PUSH
87166: LD_EXP 133
87170: ST_TO_ADDR
// for i := 1 to list do
87171: LD_ADDR_VAR 0 2
87175: PUSH
87176: DOUBLE
87177: LD_INT 1
87179: DEC
87180: ST_TO_ADDR
87181: LD_VAR 0 3
87185: PUSH
87186: FOR_TO
87187: IFFALSE 87278
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
87189: LD_STRING setFactoryWaypointXY(
87191: PUSH
87192: LD_VAR 0 3
87196: PUSH
87197: LD_VAR 0 2
87201: ARRAY
87202: PUSH
87203: LD_INT 1
87205: ARRAY
87206: STR
87207: PUSH
87208: LD_STRING ,
87210: STR
87211: PUSH
87212: LD_VAR 0 3
87216: PUSH
87217: LD_VAR 0 2
87221: ARRAY
87222: PUSH
87223: LD_INT 2
87225: ARRAY
87226: STR
87227: PUSH
87228: LD_STRING ,
87230: STR
87231: PUSH
87232: LD_VAR 0 3
87236: PUSH
87237: LD_VAR 0 2
87241: ARRAY
87242: PUSH
87243: LD_INT 3
87245: ARRAY
87246: STR
87247: PUSH
87248: LD_STRING ,
87250: STR
87251: PUSH
87252: LD_VAR 0 3
87256: PUSH
87257: LD_VAR 0 2
87261: ARRAY
87262: PUSH
87263: LD_INT 4
87265: ARRAY
87266: STR
87267: PUSH
87268: LD_STRING )
87270: STR
87271: PPUSH
87272: CALL_OW 559
87276: GO 87186
87278: POP
87279: POP
// end ; end ;
87280: LD_VAR 0 1
87284: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
87285: LD_INT 0
87287: PPUSH
// if HexInfo ( x , y ) = warehouse then
87288: LD_VAR 0 2
87292: PPUSH
87293: LD_VAR 0 3
87297: PPUSH
87298: CALL_OW 428
87302: PUSH
87303: LD_VAR 0 1
87307: EQUAL
87308: IFFALSE 87335
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
87310: LD_ADDR_EXP 134
87314: PUSH
87315: LD_EXP 134
87319: PPUSH
87320: LD_VAR 0 1
87324: PPUSH
87325: LD_INT 0
87327: PPUSH
87328: CALL_OW 1
87332: ST_TO_ADDR
87333: GO 87386
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
87335: LD_ADDR_EXP 134
87339: PUSH
87340: LD_EXP 134
87344: PPUSH
87345: LD_VAR 0 1
87349: PPUSH
87350: LD_VAR 0 1
87354: PPUSH
87355: CALL_OW 255
87359: PUSH
87360: LD_VAR 0 1
87364: PUSH
87365: LD_VAR 0 2
87369: PUSH
87370: LD_VAR 0 3
87374: PUSH
87375: EMPTY
87376: LIST
87377: LIST
87378: LIST
87379: LIST
87380: PPUSH
87381: CALL_OW 1
87385: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
87386: CALL 87395 0 0
// end ;
87390: LD_VAR 0 4
87394: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
87395: LD_INT 0
87397: PPUSH
87398: PPUSH
87399: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
87400: LD_STRING resetWarehouseGatheringPoints();
87402: PPUSH
87403: CALL_OW 559
// if warehouseGatheringPoints then
87407: LD_EXP 134
87411: IFFALSE 87537
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
87413: LD_ADDR_VAR 0 3
87417: PUSH
87418: LD_EXP 134
87422: PPUSH
87423: CALL 70965 0 1
87427: ST_TO_ADDR
// for i := 1 to list do
87428: LD_ADDR_VAR 0 2
87432: PUSH
87433: DOUBLE
87434: LD_INT 1
87436: DEC
87437: ST_TO_ADDR
87438: LD_VAR 0 3
87442: PUSH
87443: FOR_TO
87444: IFFALSE 87535
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
87446: LD_STRING setWarehouseGatheringPointXY(
87448: PUSH
87449: LD_VAR 0 3
87453: PUSH
87454: LD_VAR 0 2
87458: ARRAY
87459: PUSH
87460: LD_INT 1
87462: ARRAY
87463: STR
87464: PUSH
87465: LD_STRING ,
87467: STR
87468: PUSH
87469: LD_VAR 0 3
87473: PUSH
87474: LD_VAR 0 2
87478: ARRAY
87479: PUSH
87480: LD_INT 2
87482: ARRAY
87483: STR
87484: PUSH
87485: LD_STRING ,
87487: STR
87488: PUSH
87489: LD_VAR 0 3
87493: PUSH
87494: LD_VAR 0 2
87498: ARRAY
87499: PUSH
87500: LD_INT 3
87502: ARRAY
87503: STR
87504: PUSH
87505: LD_STRING ,
87507: STR
87508: PUSH
87509: LD_VAR 0 3
87513: PUSH
87514: LD_VAR 0 2
87518: ARRAY
87519: PUSH
87520: LD_INT 4
87522: ARRAY
87523: STR
87524: PUSH
87525: LD_STRING )
87527: STR
87528: PPUSH
87529: CALL_OW 559
87533: GO 87443
87535: POP
87536: POP
// end ; end ;
87537: LD_VAR 0 1
87541: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
87542: LD_EXP 134
87546: IFFALSE 88231
87548: GO 87550
87550: DISABLE
87551: LD_INT 0
87553: PPUSH
87554: PPUSH
87555: PPUSH
87556: PPUSH
87557: PPUSH
87558: PPUSH
87559: PPUSH
87560: PPUSH
87561: PPUSH
// begin enable ;
87562: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
87563: LD_ADDR_VAR 0 3
87567: PUSH
87568: LD_EXP 134
87572: PPUSH
87573: CALL 70965 0 1
87577: ST_TO_ADDR
// if not list then
87578: LD_VAR 0 3
87582: NOT
87583: IFFALSE 87587
// exit ;
87585: GO 88231
// for i := 1 to list do
87587: LD_ADDR_VAR 0 1
87591: PUSH
87592: DOUBLE
87593: LD_INT 1
87595: DEC
87596: ST_TO_ADDR
87597: LD_VAR 0 3
87601: PUSH
87602: FOR_TO
87603: IFFALSE 88229
// begin depot := list [ i ] [ 2 ] ;
87605: LD_ADDR_VAR 0 8
87609: PUSH
87610: LD_VAR 0 3
87614: PUSH
87615: LD_VAR 0 1
87619: ARRAY
87620: PUSH
87621: LD_INT 2
87623: ARRAY
87624: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
87625: LD_ADDR_VAR 0 5
87629: PUSH
87630: LD_VAR 0 3
87634: PUSH
87635: LD_VAR 0 1
87639: ARRAY
87640: PUSH
87641: LD_INT 1
87643: ARRAY
87644: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
87645: LD_VAR 0 8
87649: PPUSH
87650: CALL_OW 301
87654: PUSH
87655: LD_VAR 0 5
87659: PUSH
87660: LD_VAR 0 8
87664: PPUSH
87665: CALL_OW 255
87669: NONEQUAL
87670: OR
87671: IFFALSE 87700
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
87673: LD_ADDR_EXP 134
87677: PUSH
87678: LD_EXP 134
87682: PPUSH
87683: LD_VAR 0 8
87687: PPUSH
87688: LD_INT 0
87690: PPUSH
87691: CALL_OW 1
87695: ST_TO_ADDR
// exit ;
87696: POP
87697: POP
87698: GO 88231
// end ; x := list [ i ] [ 3 ] ;
87700: LD_ADDR_VAR 0 6
87704: PUSH
87705: LD_VAR 0 3
87709: PUSH
87710: LD_VAR 0 1
87714: ARRAY
87715: PUSH
87716: LD_INT 3
87718: ARRAY
87719: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
87720: LD_ADDR_VAR 0 7
87724: PUSH
87725: LD_VAR 0 3
87729: PUSH
87730: LD_VAR 0 1
87734: ARRAY
87735: PUSH
87736: LD_INT 4
87738: ARRAY
87739: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
87740: LD_ADDR_VAR 0 9
87744: PUSH
87745: LD_VAR 0 6
87749: PPUSH
87750: LD_VAR 0 7
87754: PPUSH
87755: LD_INT 16
87757: PPUSH
87758: CALL 69549 0 3
87762: ST_TO_ADDR
// if not cratesNearbyPoint then
87763: LD_VAR 0 9
87767: NOT
87768: IFFALSE 87774
// exit ;
87770: POP
87771: POP
87772: GO 88231
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
87774: LD_ADDR_VAR 0 4
87778: PUSH
87779: LD_INT 22
87781: PUSH
87782: LD_VAR 0 5
87786: PUSH
87787: EMPTY
87788: LIST
87789: LIST
87790: PUSH
87791: LD_INT 3
87793: PUSH
87794: LD_INT 60
87796: PUSH
87797: EMPTY
87798: LIST
87799: PUSH
87800: EMPTY
87801: LIST
87802: LIST
87803: PUSH
87804: LD_INT 91
87806: PUSH
87807: LD_VAR 0 8
87811: PUSH
87812: LD_INT 6
87814: PUSH
87815: EMPTY
87816: LIST
87817: LIST
87818: LIST
87819: PUSH
87820: LD_INT 2
87822: PUSH
87823: LD_INT 25
87825: PUSH
87826: LD_INT 2
87828: PUSH
87829: EMPTY
87830: LIST
87831: LIST
87832: PUSH
87833: LD_INT 25
87835: PUSH
87836: LD_INT 16
87838: PUSH
87839: EMPTY
87840: LIST
87841: LIST
87842: PUSH
87843: EMPTY
87844: LIST
87845: LIST
87846: LIST
87847: PUSH
87848: EMPTY
87849: LIST
87850: LIST
87851: LIST
87852: LIST
87853: PPUSH
87854: CALL_OW 69
87858: PUSH
87859: LD_VAR 0 8
87863: PPUSH
87864: CALL_OW 313
87868: PPUSH
87869: LD_INT 3
87871: PUSH
87872: LD_INT 60
87874: PUSH
87875: EMPTY
87876: LIST
87877: PUSH
87878: EMPTY
87879: LIST
87880: LIST
87881: PUSH
87882: LD_INT 2
87884: PUSH
87885: LD_INT 25
87887: PUSH
87888: LD_INT 2
87890: PUSH
87891: EMPTY
87892: LIST
87893: LIST
87894: PUSH
87895: LD_INT 25
87897: PUSH
87898: LD_INT 16
87900: PUSH
87901: EMPTY
87902: LIST
87903: LIST
87904: PUSH
87905: EMPTY
87906: LIST
87907: LIST
87908: LIST
87909: PUSH
87910: EMPTY
87911: LIST
87912: LIST
87913: PPUSH
87914: CALL_OW 72
87918: UNION
87919: ST_TO_ADDR
// if tmp then
87920: LD_VAR 0 4
87924: IFFALSE 88004
// begin tmp := ShrinkArray ( tmp , 3 ) ;
87926: LD_ADDR_VAR 0 4
87930: PUSH
87931: LD_VAR 0 4
87935: PPUSH
87936: LD_INT 3
87938: PPUSH
87939: CALL 67518 0 2
87943: ST_TO_ADDR
// for j in tmp do
87944: LD_ADDR_VAR 0 2
87948: PUSH
87949: LD_VAR 0 4
87953: PUSH
87954: FOR_IN
87955: IFFALSE 87998
// begin if IsInUnit ( j ) then
87957: LD_VAR 0 2
87961: PPUSH
87962: CALL_OW 310
87966: IFFALSE 87977
// ComExit ( j ) ;
87968: LD_VAR 0 2
87972: PPUSH
87973: CALL 67601 0 1
// AddComCollect ( j , x , y ) ;
87977: LD_VAR 0 2
87981: PPUSH
87982: LD_VAR 0 6
87986: PPUSH
87987: LD_VAR 0 7
87991: PPUSH
87992: CALL_OW 177
// end ;
87996: GO 87954
87998: POP
87999: POP
// exit ;
88000: POP
88001: POP
88002: GO 88231
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
88004: LD_ADDR_VAR 0 4
88008: PUSH
88009: LD_INT 22
88011: PUSH
88012: LD_VAR 0 5
88016: PUSH
88017: EMPTY
88018: LIST
88019: LIST
88020: PUSH
88021: LD_INT 91
88023: PUSH
88024: LD_VAR 0 8
88028: PUSH
88029: LD_INT 8
88031: PUSH
88032: EMPTY
88033: LIST
88034: LIST
88035: LIST
88036: PUSH
88037: LD_INT 2
88039: PUSH
88040: LD_INT 34
88042: PUSH
88043: LD_INT 12
88045: PUSH
88046: EMPTY
88047: LIST
88048: LIST
88049: PUSH
88050: LD_INT 34
88052: PUSH
88053: LD_INT 51
88055: PUSH
88056: EMPTY
88057: LIST
88058: LIST
88059: PUSH
88060: LD_INT 34
88062: PUSH
88063: LD_INT 32
88065: PUSH
88066: EMPTY
88067: LIST
88068: LIST
88069: PUSH
88070: LD_INT 34
88072: PUSH
88073: LD_INT 89
88075: PUSH
88076: EMPTY
88077: LIST
88078: LIST
88079: PUSH
88080: EMPTY
88081: LIST
88082: LIST
88083: LIST
88084: LIST
88085: LIST
88086: PUSH
88087: EMPTY
88088: LIST
88089: LIST
88090: LIST
88091: PPUSH
88092: CALL_OW 69
88096: ST_TO_ADDR
// if tmp then
88097: LD_VAR 0 4
88101: IFFALSE 88227
// begin for j in tmp do
88103: LD_ADDR_VAR 0 2
88107: PUSH
88108: LD_VAR 0 4
88112: PUSH
88113: FOR_IN
88114: IFFALSE 88225
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
88116: LD_VAR 0 2
88120: PPUSH
88121: CALL_OW 262
88125: PUSH
88126: LD_INT 3
88128: EQUAL
88129: PUSH
88130: LD_VAR 0 2
88134: PPUSH
88135: CALL_OW 261
88139: PUSH
88140: LD_INT 20
88142: GREATER
88143: OR
88144: PUSH
88145: LD_VAR 0 2
88149: PPUSH
88150: CALL_OW 314
88154: NOT
88155: AND
88156: PUSH
88157: LD_VAR 0 2
88161: PPUSH
88162: CALL_OW 263
88166: PUSH
88167: LD_INT 1
88169: NONEQUAL
88170: PUSH
88171: LD_VAR 0 2
88175: PPUSH
88176: CALL_OW 311
88180: OR
88181: AND
88182: IFFALSE 88223
// begin ComCollect ( j , x , y ) ;
88184: LD_VAR 0 2
88188: PPUSH
88189: LD_VAR 0 6
88193: PPUSH
88194: LD_VAR 0 7
88198: PPUSH
88199: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
88203: LD_VAR 0 2
88207: PPUSH
88208: LD_VAR 0 8
88212: PPUSH
88213: CALL_OW 172
// exit ;
88217: POP
88218: POP
88219: POP
88220: POP
88221: GO 88231
// end ;
88223: GO 88113
88225: POP
88226: POP
// end ; end ;
88227: GO 87602
88229: POP
88230: POP
// end ; end_of_file
88231: PPOPN 9
88233: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
88234: LD_VAR 0 1
88238: PUSH
88239: LD_INT 200
88241: DOUBLE
88242: GREATEREQUAL
88243: IFFALSE 88251
88245: LD_INT 299
88247: DOUBLE
88248: LESSEQUAL
88249: IFTRUE 88253
88251: GO 88285
88253: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
88254: LD_VAR 0 1
88258: PPUSH
88259: LD_VAR 0 2
88263: PPUSH
88264: LD_VAR 0 3
88268: PPUSH
88269: LD_VAR 0 4
88273: PPUSH
88274: LD_VAR 0 5
88278: PPUSH
88279: CALL 88982 0 5
88283: GO 88362
88285: LD_INT 300
88287: DOUBLE
88288: GREATEREQUAL
88289: IFFALSE 88297
88291: LD_INT 399
88293: DOUBLE
88294: LESSEQUAL
88295: IFTRUE 88299
88297: GO 88361
88299: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
88300: LD_VAR 0 1
88304: PPUSH
88305: LD_VAR 0 2
88309: PPUSH
88310: LD_VAR 0 3
88314: PPUSH
88315: LD_VAR 0 4
88319: PPUSH
88320: LD_VAR 0 5
88324: PPUSH
88325: LD_VAR 0 6
88329: PPUSH
88330: LD_VAR 0 7
88334: PPUSH
88335: LD_VAR 0 8
88339: PPUSH
88340: LD_VAR 0 9
88344: PPUSH
88345: LD_VAR 0 10
88349: PPUSH
88350: LD_VAR 0 11
88354: PPUSH
88355: CALL 84807 0 11
88359: GO 88362
88361: POP
// end ;
88362: PPOPN 11
88364: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
88365: LD_VAR 0 1
88369: PPUSH
88370: LD_VAR 0 2
88374: PPUSH
88375: LD_VAR 0 3
88379: PPUSH
88380: LD_VAR 0 4
88384: PPUSH
88385: LD_VAR 0 5
88389: PPUSH
88390: CALL 88447 0 5
// end ; end_of_file
88394: PPOPN 5
88396: END
// export function SOS_UnitDestroyed ( un ) ; begin
88397: LD_INT 0
88399: PPUSH
// ComRadiation ( un ) ;
88400: LD_VAR 0 1
88404: PPUSH
88405: CALL 89386 0 1
// end ;
88409: LD_VAR 0 2
88413: RET
// export function SOS_UnitKamikazed ( un ) ; begin
88414: LD_INT 0
88416: PPUSH
// ComRadiation ( un ) ;
88417: LD_VAR 0 1
88421: PPUSH
88422: CALL 89386 0 1
// end ;
88426: LD_VAR 0 2
88430: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
88431: LD_INT 0
88433: PPUSH
// end ;
88434: LD_VAR 0 4
88438: RET
// export function SOS_Command ( cmd ) ; begin
88439: LD_INT 0
88441: PPUSH
// end ;
88442: LD_VAR 0 2
88446: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
88447: LD_INT 0
88449: PPUSH
// end ;
88450: LD_VAR 0 6
88454: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
88455: LD_INT 0
88457: PPUSH
88458: PPUSH
88459: PPUSH
88460: PPUSH
88461: PPUSH
// if not vehicle or not factory then
88462: LD_VAR 0 1
88466: NOT
88467: PUSH
88468: LD_VAR 0 2
88472: NOT
88473: OR
88474: IFFALSE 88478
// exit ;
88476: GO 88977
// if not factoryWaypoints then
88478: LD_EXP 133
88482: NOT
88483: IFFALSE 88487
// exit ;
88485: GO 88977
// for i := 1 to Count ( factoryWaypoints ) do
88487: LD_ADDR_VAR 0 4
88491: PUSH
88492: DOUBLE
88493: LD_INT 1
88495: DEC
88496: ST_TO_ADDR
88497: LD_EXP 133
88501: PPUSH
88502: CALL 31594 0 1
88506: PUSH
88507: FOR_TO
88508: IFFALSE 88975
// if factoryWaypoints [ i ] [ 2 ] = factory then
88510: LD_EXP 133
88514: PUSH
88515: LD_VAR 0 4
88519: ARRAY
88520: PUSH
88521: LD_INT 2
88523: ARRAY
88524: PUSH
88525: LD_VAR 0 2
88529: EQUAL
88530: IFFALSE 88973
// begin if GetControl ( vehicle ) = control_manual then
88532: LD_VAR 0 1
88536: PPUSH
88537: CALL_OW 263
88541: PUSH
88542: LD_INT 1
88544: EQUAL
88545: IFFALSE 88856
// begin driver := IsDrivenBy ( vehicle ) ;
88547: LD_ADDR_VAR 0 6
88551: PUSH
88552: LD_VAR 0 1
88556: PPUSH
88557: CALL_OW 311
88561: ST_TO_ADDR
// tag := GetTag ( driver ) ;
88562: LD_ADDR_VAR 0 5
88566: PUSH
88567: LD_VAR 0 6
88571: PPUSH
88572: CALL_OW 110
88576: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
88577: LD_VAR 0 5
88581: PUSH
88582: LD_INT 501
88584: EQUAL
88585: PUSH
88586: LD_VAR 0 1
88590: PPUSH
88591: CALL_OW 110
88595: PUSH
88596: LD_INT 501
88598: EQUAL
88599: OR
88600: IFFALSE 88606
// exit ;
88602: POP
88603: POP
88604: GO 88977
// if not HasTask ( driver ) then
88606: LD_VAR 0 6
88610: PPUSH
88611: CALL_OW 314
88615: NOT
88616: IFFALSE 88854
// begin SetTag ( driver , tDriver ) ;
88618: LD_VAR 0 6
88622: PPUSH
88623: LD_INT 501
88625: PPUSH
88626: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
88630: LD_VAR 0 1
88634: PPUSH
88635: LD_INT 501
88637: PPUSH
88638: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
88642: LD_ADDR_VAR 0 7
88646: PUSH
88647: LD_EXP 133
88651: PUSH
88652: LD_VAR 0 4
88656: ARRAY
88657: PUSH
88658: LD_INT 3
88660: ARRAY
88661: PPUSH
88662: LD_EXP 133
88666: PUSH
88667: LD_VAR 0 4
88671: ARRAY
88672: PUSH
88673: LD_INT 4
88675: ARRAY
88676: PPUSH
88677: CALL_OW 428
88681: ST_TO_ADDR
// if hex then
88682: LD_VAR 0 7
88686: IFFALSE 88704
// ComMoveUnit ( driver , hex ) else
88688: LD_VAR 0 6
88692: PPUSH
88693: LD_VAR 0 7
88697: PPUSH
88698: CALL_OW 112
88702: GO 88743
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
88704: LD_VAR 0 6
88708: PPUSH
88709: LD_EXP 133
88713: PUSH
88714: LD_VAR 0 4
88718: ARRAY
88719: PUSH
88720: LD_INT 3
88722: ARRAY
88723: PPUSH
88724: LD_EXP 133
88728: PUSH
88729: LD_VAR 0 4
88733: ARRAY
88734: PUSH
88735: LD_INT 4
88737: ARRAY
88738: PPUSH
88739: CALL_OW 111
// AddComExitVehicle ( driver ) ;
88743: LD_VAR 0 6
88747: PPUSH
88748: CALL_OW 181
// if Multiplayer then
88752: LD_OWVAR 4
88756: IFFALSE 88805
// begin repeat wait ( 10 ) ;
88758: LD_INT 10
88760: PPUSH
88761: CALL_OW 67
// until not IsInUnit ( driver ) ;
88765: LD_VAR 0 6
88769: PPUSH
88770: CALL_OW 310
88774: NOT
88775: IFFALSE 88758
// if not HasTask ( driver ) then
88777: LD_VAR 0 6
88781: PPUSH
88782: CALL_OW 314
88786: NOT
88787: IFFALSE 88803
// ComEnterUnit ( driver , factory ) ;
88789: LD_VAR 0 6
88793: PPUSH
88794: LD_VAR 0 2
88798: PPUSH
88799: CALL_OW 120
// end else
88803: GO 88819
// AddComEnterUnit ( driver , factory ) ;
88805: LD_VAR 0 6
88809: PPUSH
88810: LD_VAR 0 2
88814: PPUSH
88815: CALL_OW 180
// wait ( 0 0$1 ) ;
88819: LD_INT 35
88821: PPUSH
88822: CALL_OW 67
// SetTag ( driver , tag ) ;
88826: LD_VAR 0 6
88830: PPUSH
88831: LD_VAR 0 5
88835: PPUSH
88836: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
88840: LD_VAR 0 1
88844: PPUSH
88845: LD_INT 0
88847: PPUSH
88848: CALL_OW 109
// break ;
88852: GO 88975
// end ; end else
88854: GO 88973
// if GetControl ( vehicle ) = control_remote then
88856: LD_VAR 0 1
88860: PPUSH
88861: CALL_OW 263
88865: PUSH
88866: LD_INT 2
88868: EQUAL
88869: IFFALSE 88932
// begin wait ( 0 0$2 ) ;
88871: LD_INT 70
88873: PPUSH
88874: CALL_OW 67
// if Connect ( vehicle ) then
88878: LD_VAR 0 1
88882: PPUSH
88883: CALL 37800 0 1
88887: IFFALSE 88928
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
88889: LD_VAR 0 1
88893: PPUSH
88894: LD_EXP 133
88898: PUSH
88899: LD_VAR 0 4
88903: ARRAY
88904: PUSH
88905: LD_INT 3
88907: ARRAY
88908: PPUSH
88909: LD_EXP 133
88913: PUSH
88914: LD_VAR 0 4
88918: ARRAY
88919: PUSH
88920: LD_INT 4
88922: ARRAY
88923: PPUSH
88924: CALL_OW 171
// break ;
88928: GO 88975
// end else
88930: GO 88973
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
88932: LD_VAR 0 1
88936: PPUSH
88937: LD_EXP 133
88941: PUSH
88942: LD_VAR 0 4
88946: ARRAY
88947: PUSH
88948: LD_INT 3
88950: ARRAY
88951: PPUSH
88952: LD_EXP 133
88956: PUSH
88957: LD_VAR 0 4
88961: ARRAY
88962: PUSH
88963: LD_INT 4
88965: ARRAY
88966: PPUSH
88967: CALL_OW 171
// break ;
88971: GO 88975
// end ; end ;
88973: GO 88507
88975: POP
88976: POP
// end ;
88977: LD_VAR 0 3
88981: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
88982: LD_INT 0
88984: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
88985: LD_VAR 0 1
88989: PUSH
88990: LD_INT 250
88992: EQUAL
88993: PUSH
88994: LD_VAR 0 2
88998: PPUSH
88999: CALL_OW 264
89003: PUSH
89004: LD_INT 81
89006: EQUAL
89007: AND
89008: IFFALSE 89029
// MinerPlaceMine ( unit , x , y ) ;
89010: LD_VAR 0 2
89014: PPUSH
89015: LD_VAR 0 4
89019: PPUSH
89020: LD_VAR 0 5
89024: PPUSH
89025: CALL 92121 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
89029: LD_VAR 0 1
89033: PUSH
89034: LD_INT 251
89036: EQUAL
89037: PUSH
89038: LD_VAR 0 2
89042: PPUSH
89043: CALL_OW 264
89047: PUSH
89048: LD_INT 81
89050: EQUAL
89051: AND
89052: IFFALSE 89073
// MinerDetonateMine ( unit , x , y ) ;
89054: LD_VAR 0 2
89058: PPUSH
89059: LD_VAR 0 4
89063: PPUSH
89064: LD_VAR 0 5
89068: PPUSH
89069: CALL 92396 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
89073: LD_VAR 0 1
89077: PUSH
89078: LD_INT 252
89080: EQUAL
89081: PUSH
89082: LD_VAR 0 2
89086: PPUSH
89087: CALL_OW 264
89091: PUSH
89092: LD_INT 81
89094: EQUAL
89095: AND
89096: IFFALSE 89117
// MinerCreateMinefield ( unit , x , y ) ;
89098: LD_VAR 0 2
89102: PPUSH
89103: LD_VAR 0 4
89107: PPUSH
89108: LD_VAR 0 5
89112: PPUSH
89113: CALL 92813 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
89117: LD_VAR 0 1
89121: PUSH
89122: LD_INT 253
89124: EQUAL
89125: PUSH
89126: LD_VAR 0 2
89130: PPUSH
89131: CALL_OW 257
89135: PUSH
89136: LD_INT 5
89138: EQUAL
89139: AND
89140: IFFALSE 89161
// ComBinocular ( unit , x , y ) ;
89142: LD_VAR 0 2
89146: PPUSH
89147: LD_VAR 0 4
89151: PPUSH
89152: LD_VAR 0 5
89156: PPUSH
89157: CALL 93182 0 3
// if selectedUnit then
89161: LD_VAR 0 3
89165: IFFALSE 89221
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
89167: LD_VAR 0 1
89171: PUSH
89172: LD_INT 254
89174: EQUAL
89175: PUSH
89176: LD_VAR 0 2
89180: PPUSH
89181: CALL_OW 264
89185: PUSH
89186: LD_INT 99
89188: EQUAL
89189: AND
89190: PUSH
89191: LD_VAR 0 3
89195: PPUSH
89196: CALL_OW 263
89200: PUSH
89201: LD_INT 3
89203: EQUAL
89204: AND
89205: IFFALSE 89221
// HackDestroyVehicle ( unit , selectedUnit ) ;
89207: LD_VAR 0 2
89211: PPUSH
89212: LD_VAR 0 3
89216: PPUSH
89217: CALL 91485 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
89221: LD_VAR 0 1
89225: PUSH
89226: LD_INT 255
89228: EQUAL
89229: PUSH
89230: LD_VAR 0 2
89234: PPUSH
89235: CALL_OW 264
89239: PUSH
89240: LD_INT 14
89242: PUSH
89243: LD_INT 53
89245: PUSH
89246: EMPTY
89247: LIST
89248: LIST
89249: IN
89250: AND
89251: PUSH
89252: LD_VAR 0 4
89256: PPUSH
89257: LD_VAR 0 5
89261: PPUSH
89262: CALL_OW 488
89266: AND
89267: IFFALSE 89291
// CutTreeXYR ( unit , x , y , 12 ) ;
89269: LD_VAR 0 2
89273: PPUSH
89274: LD_VAR 0 4
89278: PPUSH
89279: LD_VAR 0 5
89283: PPUSH
89284: LD_INT 12
89286: PPUSH
89287: CALL 89482 0 4
// if cmd = 256 then
89291: LD_VAR 0 1
89295: PUSH
89296: LD_INT 256
89298: EQUAL
89299: IFFALSE 89320
// SetFactoryWaypoint ( unit , x , y ) ;
89301: LD_VAR 0 2
89305: PPUSH
89306: LD_VAR 0 4
89310: PPUSH
89311: LD_VAR 0 5
89315: PPUSH
89316: CALL 86795 0 3
// if cmd = 257 then
89320: LD_VAR 0 1
89324: PUSH
89325: LD_INT 257
89327: EQUAL
89328: IFFALSE 89349
// SetWarehouseGatheringPoint ( unit , x , y ) ;
89330: LD_VAR 0 2
89334: PPUSH
89335: LD_VAR 0 4
89339: PPUSH
89340: LD_VAR 0 5
89344: PPUSH
89345: CALL 87285 0 3
// if cmd = 258 then
89349: LD_VAR 0 1
89353: PUSH
89354: LD_INT 258
89356: EQUAL
89357: IFFALSE 89381
// BurnTreeXYR ( unit , x , y , 8 ) ;
89359: LD_VAR 0 2
89363: PPUSH
89364: LD_VAR 0 4
89368: PPUSH
89369: LD_VAR 0 5
89373: PPUSH
89374: LD_INT 8
89376: PPUSH
89377: CALL 89876 0 4
// end ;
89381: LD_VAR 0 6
89385: RET
// export function ComRadiation ( un ) ; var eff ; begin
89386: LD_INT 0
89388: PPUSH
89389: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
89390: LD_VAR 0 1
89394: PPUSH
89395: CALL_OW 264
89399: PUSH
89400: LD_INT 91
89402: NONEQUAL
89403: IFFALSE 89407
// exit ;
89405: GO 89477
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
89407: LD_INT 68
89409: PPUSH
89410: LD_VAR 0 1
89414: PPUSH
89415: CALL_OW 255
89419: PPUSH
89420: CALL_OW 321
89424: PUSH
89425: LD_INT 2
89427: EQUAL
89428: IFFALSE 89440
// eff := 70 else
89430: LD_ADDR_VAR 0 3
89434: PUSH
89435: LD_INT 70
89437: ST_TO_ADDR
89438: GO 89448
// eff := 30 ;
89440: LD_ADDR_VAR 0 3
89444: PUSH
89445: LD_INT 30
89447: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
89448: LD_VAR 0 1
89452: PPUSH
89453: CALL_OW 250
89457: PPUSH
89458: LD_VAR 0 1
89462: PPUSH
89463: CALL_OW 251
89467: PPUSH
89468: LD_VAR 0 3
89472: PPUSH
89473: CALL_OW 495
// end ;
89477: LD_VAR 0 2
89481: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
89482: LD_INT 0
89484: PPUSH
89485: PPUSH
89486: PPUSH
89487: PPUSH
89488: PPUSH
89489: PPUSH
89490: PPUSH
89491: PPUSH
89492: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
89493: LD_VAR 0 1
89497: PPUSH
89498: CALL_OW 302
89502: NOT
89503: PUSH
89504: LD_VAR 0 2
89508: PPUSH
89509: LD_VAR 0 3
89513: PPUSH
89514: CALL_OW 488
89518: NOT
89519: OR
89520: PUSH
89521: LD_VAR 0 4
89525: NOT
89526: OR
89527: IFFALSE 89531
// exit ;
89529: GO 89871
// list := [ ] ;
89531: LD_ADDR_VAR 0 13
89535: PUSH
89536: EMPTY
89537: ST_TO_ADDR
// if x - r < 0 then
89538: LD_VAR 0 2
89542: PUSH
89543: LD_VAR 0 4
89547: MINUS
89548: PUSH
89549: LD_INT 0
89551: LESS
89552: IFFALSE 89564
// min_x := 0 else
89554: LD_ADDR_VAR 0 7
89558: PUSH
89559: LD_INT 0
89561: ST_TO_ADDR
89562: GO 89580
// min_x := x - r ;
89564: LD_ADDR_VAR 0 7
89568: PUSH
89569: LD_VAR 0 2
89573: PUSH
89574: LD_VAR 0 4
89578: MINUS
89579: ST_TO_ADDR
// if y - r < 0 then
89580: LD_VAR 0 3
89584: PUSH
89585: LD_VAR 0 4
89589: MINUS
89590: PUSH
89591: LD_INT 0
89593: LESS
89594: IFFALSE 89606
// min_y := 0 else
89596: LD_ADDR_VAR 0 8
89600: PUSH
89601: LD_INT 0
89603: ST_TO_ADDR
89604: GO 89622
// min_y := y - r ;
89606: LD_ADDR_VAR 0 8
89610: PUSH
89611: LD_VAR 0 3
89615: PUSH
89616: LD_VAR 0 4
89620: MINUS
89621: ST_TO_ADDR
// max_x := x + r ;
89622: LD_ADDR_VAR 0 9
89626: PUSH
89627: LD_VAR 0 2
89631: PUSH
89632: LD_VAR 0 4
89636: PLUS
89637: ST_TO_ADDR
// max_y := y + r ;
89638: LD_ADDR_VAR 0 10
89642: PUSH
89643: LD_VAR 0 3
89647: PUSH
89648: LD_VAR 0 4
89652: PLUS
89653: ST_TO_ADDR
// for _x = min_x to max_x do
89654: LD_ADDR_VAR 0 11
89658: PUSH
89659: DOUBLE
89660: LD_VAR 0 7
89664: DEC
89665: ST_TO_ADDR
89666: LD_VAR 0 9
89670: PUSH
89671: FOR_TO
89672: IFFALSE 89789
// for _y = min_y to max_y do
89674: LD_ADDR_VAR 0 12
89678: PUSH
89679: DOUBLE
89680: LD_VAR 0 8
89684: DEC
89685: ST_TO_ADDR
89686: LD_VAR 0 10
89690: PUSH
89691: FOR_TO
89692: IFFALSE 89785
// begin if not ValidHex ( _x , _y ) then
89694: LD_VAR 0 11
89698: PPUSH
89699: LD_VAR 0 12
89703: PPUSH
89704: CALL_OW 488
89708: NOT
89709: IFFALSE 89713
// continue ;
89711: GO 89691
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
89713: LD_VAR 0 11
89717: PPUSH
89718: LD_VAR 0 12
89722: PPUSH
89723: CALL_OW 351
89727: PUSH
89728: LD_VAR 0 11
89732: PPUSH
89733: LD_VAR 0 12
89737: PPUSH
89738: CALL_OW 554
89742: AND
89743: IFFALSE 89783
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
89745: LD_ADDR_VAR 0 13
89749: PUSH
89750: LD_VAR 0 13
89754: PPUSH
89755: LD_VAR 0 13
89759: PUSH
89760: LD_INT 1
89762: PLUS
89763: PPUSH
89764: LD_VAR 0 11
89768: PUSH
89769: LD_VAR 0 12
89773: PUSH
89774: EMPTY
89775: LIST
89776: LIST
89777: PPUSH
89778: CALL_OW 2
89782: ST_TO_ADDR
// end ;
89783: GO 89691
89785: POP
89786: POP
89787: GO 89671
89789: POP
89790: POP
// if not list then
89791: LD_VAR 0 13
89795: NOT
89796: IFFALSE 89800
// exit ;
89798: GO 89871
// for i in list do
89800: LD_ADDR_VAR 0 6
89804: PUSH
89805: LD_VAR 0 13
89809: PUSH
89810: FOR_IN
89811: IFFALSE 89869
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
89813: LD_VAR 0 1
89817: PPUSH
89818: LD_STRING M
89820: PUSH
89821: LD_VAR 0 6
89825: PUSH
89826: LD_INT 1
89828: ARRAY
89829: PUSH
89830: LD_VAR 0 6
89834: PUSH
89835: LD_INT 2
89837: ARRAY
89838: PUSH
89839: LD_INT 0
89841: PUSH
89842: LD_INT 0
89844: PUSH
89845: LD_INT 0
89847: PUSH
89848: LD_INT 0
89850: PUSH
89851: EMPTY
89852: LIST
89853: LIST
89854: LIST
89855: LIST
89856: LIST
89857: LIST
89858: LIST
89859: PUSH
89860: EMPTY
89861: LIST
89862: PPUSH
89863: CALL_OW 447
89867: GO 89810
89869: POP
89870: POP
// end ;
89871: LD_VAR 0 5
89875: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
89876: LD_INT 0
89878: PPUSH
89879: PPUSH
89880: PPUSH
89881: PPUSH
89882: PPUSH
89883: PPUSH
89884: PPUSH
89885: PPUSH
89886: PPUSH
89887: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
89888: LD_VAR 0 1
89892: PPUSH
89893: CALL_OW 302
89897: NOT
89898: PUSH
89899: LD_VAR 0 2
89903: PPUSH
89904: LD_VAR 0 3
89908: PPUSH
89909: CALL_OW 488
89913: NOT
89914: OR
89915: PUSH
89916: LD_VAR 0 4
89920: NOT
89921: OR
89922: IFFALSE 89926
// exit ;
89924: GO 90439
// list := [ ] ;
89926: LD_ADDR_VAR 0 13
89930: PUSH
89931: EMPTY
89932: ST_TO_ADDR
// if x - r < 0 then
89933: LD_VAR 0 2
89937: PUSH
89938: LD_VAR 0 4
89942: MINUS
89943: PUSH
89944: LD_INT 0
89946: LESS
89947: IFFALSE 89959
// min_x := 0 else
89949: LD_ADDR_VAR 0 7
89953: PUSH
89954: LD_INT 0
89956: ST_TO_ADDR
89957: GO 89975
// min_x := x - r ;
89959: LD_ADDR_VAR 0 7
89963: PUSH
89964: LD_VAR 0 2
89968: PUSH
89969: LD_VAR 0 4
89973: MINUS
89974: ST_TO_ADDR
// if y - r < 0 then
89975: LD_VAR 0 3
89979: PUSH
89980: LD_VAR 0 4
89984: MINUS
89985: PUSH
89986: LD_INT 0
89988: LESS
89989: IFFALSE 90001
// min_y := 0 else
89991: LD_ADDR_VAR 0 8
89995: PUSH
89996: LD_INT 0
89998: ST_TO_ADDR
89999: GO 90017
// min_y := y - r ;
90001: LD_ADDR_VAR 0 8
90005: PUSH
90006: LD_VAR 0 3
90010: PUSH
90011: LD_VAR 0 4
90015: MINUS
90016: ST_TO_ADDR
// max_x := x + r ;
90017: LD_ADDR_VAR 0 9
90021: PUSH
90022: LD_VAR 0 2
90026: PUSH
90027: LD_VAR 0 4
90031: PLUS
90032: ST_TO_ADDR
// max_y := y + r ;
90033: LD_ADDR_VAR 0 10
90037: PUSH
90038: LD_VAR 0 3
90042: PUSH
90043: LD_VAR 0 4
90047: PLUS
90048: ST_TO_ADDR
// for _x = min_x to max_x do
90049: LD_ADDR_VAR 0 11
90053: PUSH
90054: DOUBLE
90055: LD_VAR 0 7
90059: DEC
90060: ST_TO_ADDR
90061: LD_VAR 0 9
90065: PUSH
90066: FOR_TO
90067: IFFALSE 90184
// for _y = min_y to max_y do
90069: LD_ADDR_VAR 0 12
90073: PUSH
90074: DOUBLE
90075: LD_VAR 0 8
90079: DEC
90080: ST_TO_ADDR
90081: LD_VAR 0 10
90085: PUSH
90086: FOR_TO
90087: IFFALSE 90180
// begin if not ValidHex ( _x , _y ) then
90089: LD_VAR 0 11
90093: PPUSH
90094: LD_VAR 0 12
90098: PPUSH
90099: CALL_OW 488
90103: NOT
90104: IFFALSE 90108
// continue ;
90106: GO 90086
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
90108: LD_VAR 0 11
90112: PPUSH
90113: LD_VAR 0 12
90117: PPUSH
90118: CALL_OW 351
90122: PUSH
90123: LD_VAR 0 11
90127: PPUSH
90128: LD_VAR 0 12
90132: PPUSH
90133: CALL_OW 554
90137: AND
90138: IFFALSE 90178
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
90140: LD_ADDR_VAR 0 13
90144: PUSH
90145: LD_VAR 0 13
90149: PPUSH
90150: LD_VAR 0 13
90154: PUSH
90155: LD_INT 1
90157: PLUS
90158: PPUSH
90159: LD_VAR 0 11
90163: PUSH
90164: LD_VAR 0 12
90168: PUSH
90169: EMPTY
90170: LIST
90171: LIST
90172: PPUSH
90173: CALL_OW 2
90177: ST_TO_ADDR
// end ;
90178: GO 90086
90180: POP
90181: POP
90182: GO 90066
90184: POP
90185: POP
// if not list then
90186: LD_VAR 0 13
90190: NOT
90191: IFFALSE 90195
// exit ;
90193: GO 90439
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
90195: LD_ADDR_VAR 0 13
90199: PUSH
90200: LD_VAR 0 1
90204: PPUSH
90205: LD_VAR 0 13
90209: PPUSH
90210: LD_INT 1
90212: PPUSH
90213: LD_INT 1
90215: PPUSH
90216: CALL 34942 0 4
90220: ST_TO_ADDR
// ComStop ( flame ) ;
90221: LD_VAR 0 1
90225: PPUSH
90226: CALL_OW 141
// for i in list do
90230: LD_ADDR_VAR 0 6
90234: PUSH
90235: LD_VAR 0 13
90239: PUSH
90240: FOR_IN
90241: IFFALSE 90272
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
90243: LD_VAR 0 1
90247: PPUSH
90248: LD_VAR 0 6
90252: PUSH
90253: LD_INT 1
90255: ARRAY
90256: PPUSH
90257: LD_VAR 0 6
90261: PUSH
90262: LD_INT 2
90264: ARRAY
90265: PPUSH
90266: CALL_OW 176
90270: GO 90240
90272: POP
90273: POP
// repeat wait ( 0 0$1 ) ;
90274: LD_INT 35
90276: PPUSH
90277: CALL_OW 67
// task := GetTaskList ( flame ) ;
90281: LD_ADDR_VAR 0 14
90285: PUSH
90286: LD_VAR 0 1
90290: PPUSH
90291: CALL_OW 437
90295: ST_TO_ADDR
// if not task then
90296: LD_VAR 0 14
90300: NOT
90301: IFFALSE 90305
// exit ;
90303: GO 90439
// if task [ 1 ] [ 1 ] <> | then
90305: LD_VAR 0 14
90309: PUSH
90310: LD_INT 1
90312: ARRAY
90313: PUSH
90314: LD_INT 1
90316: ARRAY
90317: PUSH
90318: LD_STRING |
90320: NONEQUAL
90321: IFFALSE 90325
// exit ;
90323: GO 90439
// _x := task [ 1 ] [ 2 ] ;
90325: LD_ADDR_VAR 0 11
90329: PUSH
90330: LD_VAR 0 14
90334: PUSH
90335: LD_INT 1
90337: ARRAY
90338: PUSH
90339: LD_INT 2
90341: ARRAY
90342: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
90343: LD_ADDR_VAR 0 12
90347: PUSH
90348: LD_VAR 0 14
90352: PUSH
90353: LD_INT 1
90355: ARRAY
90356: PUSH
90357: LD_INT 3
90359: ARRAY
90360: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
90361: LD_VAR 0 11
90365: PPUSH
90366: LD_VAR 0 12
90370: PPUSH
90371: CALL_OW 351
90375: NOT
90376: PUSH
90377: LD_VAR 0 11
90381: PPUSH
90382: LD_VAR 0 12
90386: PPUSH
90387: CALL_OW 554
90391: NOT
90392: OR
90393: IFFALSE 90427
// begin task := Delete ( task , 1 ) ;
90395: LD_ADDR_VAR 0 14
90399: PUSH
90400: LD_VAR 0 14
90404: PPUSH
90405: LD_INT 1
90407: PPUSH
90408: CALL_OW 3
90412: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
90413: LD_VAR 0 1
90417: PPUSH
90418: LD_VAR 0 14
90422: PPUSH
90423: CALL_OW 446
// end ; until not HasTask ( flame ) ;
90427: LD_VAR 0 1
90431: PPUSH
90432: CALL_OW 314
90436: NOT
90437: IFFALSE 90274
// end ;
90439: LD_VAR 0 5
90443: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
90444: LD_EXP 136
90448: NOT
90449: IFFALSE 90499
90451: GO 90453
90453: DISABLE
// begin initHack := true ;
90454: LD_ADDR_EXP 136
90458: PUSH
90459: LD_INT 1
90461: ST_TO_ADDR
// hackTanks := [ ] ;
90462: LD_ADDR_EXP 137
90466: PUSH
90467: EMPTY
90468: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
90469: LD_ADDR_EXP 138
90473: PUSH
90474: EMPTY
90475: ST_TO_ADDR
// hackLimit := 3 ;
90476: LD_ADDR_EXP 139
90480: PUSH
90481: LD_INT 3
90483: ST_TO_ADDR
// hackDist := 12 ;
90484: LD_ADDR_EXP 140
90488: PUSH
90489: LD_INT 12
90491: ST_TO_ADDR
// hackCounter := [ ] ;
90492: LD_ADDR_EXP 141
90496: PUSH
90497: EMPTY
90498: ST_TO_ADDR
// end ;
90499: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
90500: LD_EXP 136
90504: PUSH
90505: LD_INT 34
90507: PUSH
90508: LD_INT 99
90510: PUSH
90511: EMPTY
90512: LIST
90513: LIST
90514: PPUSH
90515: CALL_OW 69
90519: AND
90520: IFFALSE 90773
90522: GO 90524
90524: DISABLE
90525: LD_INT 0
90527: PPUSH
90528: PPUSH
// begin enable ;
90529: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
90530: LD_ADDR_VAR 0 1
90534: PUSH
90535: LD_INT 34
90537: PUSH
90538: LD_INT 99
90540: PUSH
90541: EMPTY
90542: LIST
90543: LIST
90544: PPUSH
90545: CALL_OW 69
90549: PUSH
90550: FOR_IN
90551: IFFALSE 90771
// begin if not i in hackTanks then
90553: LD_VAR 0 1
90557: PUSH
90558: LD_EXP 137
90562: IN
90563: NOT
90564: IFFALSE 90647
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
90566: LD_ADDR_EXP 137
90570: PUSH
90571: LD_EXP 137
90575: PPUSH
90576: LD_EXP 137
90580: PUSH
90581: LD_INT 1
90583: PLUS
90584: PPUSH
90585: LD_VAR 0 1
90589: PPUSH
90590: CALL_OW 1
90594: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
90595: LD_ADDR_EXP 138
90599: PUSH
90600: LD_EXP 138
90604: PPUSH
90605: LD_EXP 138
90609: PUSH
90610: LD_INT 1
90612: PLUS
90613: PPUSH
90614: EMPTY
90615: PPUSH
90616: CALL_OW 1
90620: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
90621: LD_ADDR_EXP 141
90625: PUSH
90626: LD_EXP 141
90630: PPUSH
90631: LD_EXP 141
90635: PUSH
90636: LD_INT 1
90638: PLUS
90639: PPUSH
90640: EMPTY
90641: PPUSH
90642: CALL_OW 1
90646: ST_TO_ADDR
// end ; if not IsOk ( i ) then
90647: LD_VAR 0 1
90651: PPUSH
90652: CALL_OW 302
90656: NOT
90657: IFFALSE 90670
// begin HackUnlinkAll ( i ) ;
90659: LD_VAR 0 1
90663: PPUSH
90664: CALL 90776 0 1
// continue ;
90668: GO 90550
// end ; HackCheckCapturedStatus ( i ) ;
90670: LD_VAR 0 1
90674: PPUSH
90675: CALL 91219 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
90679: LD_ADDR_VAR 0 2
90683: PUSH
90684: LD_INT 81
90686: PUSH
90687: LD_VAR 0 1
90691: PPUSH
90692: CALL_OW 255
90696: PUSH
90697: EMPTY
90698: LIST
90699: LIST
90700: PUSH
90701: LD_INT 33
90703: PUSH
90704: LD_INT 3
90706: PUSH
90707: EMPTY
90708: LIST
90709: LIST
90710: PUSH
90711: LD_INT 91
90713: PUSH
90714: LD_VAR 0 1
90718: PUSH
90719: LD_EXP 140
90723: PUSH
90724: EMPTY
90725: LIST
90726: LIST
90727: LIST
90728: PUSH
90729: LD_INT 50
90731: PUSH
90732: EMPTY
90733: LIST
90734: PUSH
90735: EMPTY
90736: LIST
90737: LIST
90738: LIST
90739: LIST
90740: PPUSH
90741: CALL_OW 69
90745: ST_TO_ADDR
// if not tmp then
90746: LD_VAR 0 2
90750: NOT
90751: IFFALSE 90755
// continue ;
90753: GO 90550
// HackLink ( i , tmp ) ;
90755: LD_VAR 0 1
90759: PPUSH
90760: LD_VAR 0 2
90764: PPUSH
90765: CALL 90912 0 2
// end ;
90769: GO 90550
90771: POP
90772: POP
// end ;
90773: PPOPN 2
90775: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
90776: LD_INT 0
90778: PPUSH
90779: PPUSH
90780: PPUSH
// if not hack in hackTanks then
90781: LD_VAR 0 1
90785: PUSH
90786: LD_EXP 137
90790: IN
90791: NOT
90792: IFFALSE 90796
// exit ;
90794: GO 90907
// index := GetElementIndex ( hackTanks , hack ) ;
90796: LD_ADDR_VAR 0 4
90800: PUSH
90801: LD_EXP 137
90805: PPUSH
90806: LD_VAR 0 1
90810: PPUSH
90811: CALL 34239 0 2
90815: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
90816: LD_EXP 138
90820: PUSH
90821: LD_VAR 0 4
90825: ARRAY
90826: IFFALSE 90907
// begin for i in hackTanksCaptured [ index ] do
90828: LD_ADDR_VAR 0 3
90832: PUSH
90833: LD_EXP 138
90837: PUSH
90838: LD_VAR 0 4
90842: ARRAY
90843: PUSH
90844: FOR_IN
90845: IFFALSE 90871
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
90847: LD_VAR 0 3
90851: PUSH
90852: LD_INT 1
90854: ARRAY
90855: PPUSH
90856: LD_VAR 0 3
90860: PUSH
90861: LD_INT 2
90863: ARRAY
90864: PPUSH
90865: CALL_OW 235
90869: GO 90844
90871: POP
90872: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
90873: LD_ADDR_EXP 138
90877: PUSH
90878: LD_EXP 138
90882: PPUSH
90883: LD_VAR 0 4
90887: PPUSH
90888: EMPTY
90889: PPUSH
90890: CALL_OW 1
90894: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
90895: LD_VAR 0 1
90899: PPUSH
90900: LD_INT 0
90902: PPUSH
90903: CALL_OW 505
// end ; end ;
90907: LD_VAR 0 2
90911: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
90912: LD_INT 0
90914: PPUSH
90915: PPUSH
90916: PPUSH
// if not hack in hackTanks or not vehicles then
90917: LD_VAR 0 1
90921: PUSH
90922: LD_EXP 137
90926: IN
90927: NOT
90928: PUSH
90929: LD_VAR 0 2
90933: NOT
90934: OR
90935: IFFALSE 90939
// exit ;
90937: GO 91214
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
90939: LD_ADDR_VAR 0 2
90943: PUSH
90944: LD_VAR 0 1
90948: PPUSH
90949: LD_VAR 0 2
90953: PPUSH
90954: LD_INT 1
90956: PPUSH
90957: LD_INT 1
90959: PPUSH
90960: CALL 34889 0 4
90964: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
90965: LD_ADDR_VAR 0 5
90969: PUSH
90970: LD_EXP 137
90974: PPUSH
90975: LD_VAR 0 1
90979: PPUSH
90980: CALL 34239 0 2
90984: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
90985: LD_EXP 138
90989: PUSH
90990: LD_VAR 0 5
90994: ARRAY
90995: PUSH
90996: LD_EXP 139
91000: LESS
91001: IFFALSE 91190
// begin for i := 1 to vehicles do
91003: LD_ADDR_VAR 0 4
91007: PUSH
91008: DOUBLE
91009: LD_INT 1
91011: DEC
91012: ST_TO_ADDR
91013: LD_VAR 0 2
91017: PUSH
91018: FOR_TO
91019: IFFALSE 91188
// begin if hackTanksCaptured [ index ] = hackLimit then
91021: LD_EXP 138
91025: PUSH
91026: LD_VAR 0 5
91030: ARRAY
91031: PUSH
91032: LD_EXP 139
91036: EQUAL
91037: IFFALSE 91041
// break ;
91039: GO 91188
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
91041: LD_ADDR_EXP 141
91045: PUSH
91046: LD_EXP 141
91050: PPUSH
91051: LD_VAR 0 5
91055: PPUSH
91056: LD_EXP 141
91060: PUSH
91061: LD_VAR 0 5
91065: ARRAY
91066: PUSH
91067: LD_INT 1
91069: PLUS
91070: PPUSH
91071: CALL_OW 1
91075: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
91076: LD_ADDR_EXP 138
91080: PUSH
91081: LD_EXP 138
91085: PPUSH
91086: LD_VAR 0 5
91090: PUSH
91091: LD_EXP 138
91095: PUSH
91096: LD_VAR 0 5
91100: ARRAY
91101: PUSH
91102: LD_INT 1
91104: PLUS
91105: PUSH
91106: EMPTY
91107: LIST
91108: LIST
91109: PPUSH
91110: LD_VAR 0 2
91114: PUSH
91115: LD_VAR 0 4
91119: ARRAY
91120: PUSH
91121: LD_VAR 0 2
91125: PUSH
91126: LD_VAR 0 4
91130: ARRAY
91131: PPUSH
91132: CALL_OW 255
91136: PUSH
91137: EMPTY
91138: LIST
91139: LIST
91140: PPUSH
91141: CALL 34454 0 3
91145: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
91146: LD_VAR 0 2
91150: PUSH
91151: LD_VAR 0 4
91155: ARRAY
91156: PPUSH
91157: LD_VAR 0 1
91161: PPUSH
91162: CALL_OW 255
91166: PPUSH
91167: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
91171: LD_VAR 0 2
91175: PUSH
91176: LD_VAR 0 4
91180: ARRAY
91181: PPUSH
91182: CALL_OW 141
// end ;
91186: GO 91018
91188: POP
91189: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
91190: LD_VAR 0 1
91194: PPUSH
91195: LD_EXP 138
91199: PUSH
91200: LD_VAR 0 5
91204: ARRAY
91205: PUSH
91206: LD_INT 0
91208: PLUS
91209: PPUSH
91210: CALL_OW 505
// end ;
91214: LD_VAR 0 3
91218: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
91219: LD_INT 0
91221: PPUSH
91222: PPUSH
91223: PPUSH
91224: PPUSH
// if not hack in hackTanks then
91225: LD_VAR 0 1
91229: PUSH
91230: LD_EXP 137
91234: IN
91235: NOT
91236: IFFALSE 91240
// exit ;
91238: GO 91480
// index := GetElementIndex ( hackTanks , hack ) ;
91240: LD_ADDR_VAR 0 4
91244: PUSH
91245: LD_EXP 137
91249: PPUSH
91250: LD_VAR 0 1
91254: PPUSH
91255: CALL 34239 0 2
91259: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
91260: LD_ADDR_VAR 0 3
91264: PUSH
91265: DOUBLE
91266: LD_EXP 138
91270: PUSH
91271: LD_VAR 0 4
91275: ARRAY
91276: INC
91277: ST_TO_ADDR
91278: LD_INT 1
91280: PUSH
91281: FOR_DOWNTO
91282: IFFALSE 91454
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
91284: LD_ADDR_VAR 0 5
91288: PUSH
91289: LD_EXP 138
91293: PUSH
91294: LD_VAR 0 4
91298: ARRAY
91299: PUSH
91300: LD_VAR 0 3
91304: ARRAY
91305: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
91306: LD_VAR 0 5
91310: PUSH
91311: LD_INT 1
91313: ARRAY
91314: PPUSH
91315: CALL_OW 302
91319: NOT
91320: PUSH
91321: LD_VAR 0 5
91325: PUSH
91326: LD_INT 1
91328: ARRAY
91329: PPUSH
91330: CALL_OW 255
91334: PUSH
91335: LD_VAR 0 1
91339: PPUSH
91340: CALL_OW 255
91344: NONEQUAL
91345: OR
91346: IFFALSE 91452
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
91348: LD_VAR 0 5
91352: PUSH
91353: LD_INT 1
91355: ARRAY
91356: PPUSH
91357: CALL_OW 305
91361: PUSH
91362: LD_VAR 0 5
91366: PUSH
91367: LD_INT 1
91369: ARRAY
91370: PPUSH
91371: CALL_OW 255
91375: PUSH
91376: LD_VAR 0 1
91380: PPUSH
91381: CALL_OW 255
91385: EQUAL
91386: AND
91387: IFFALSE 91411
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
91389: LD_VAR 0 5
91393: PUSH
91394: LD_INT 1
91396: ARRAY
91397: PPUSH
91398: LD_VAR 0 5
91402: PUSH
91403: LD_INT 2
91405: ARRAY
91406: PPUSH
91407: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
91411: LD_ADDR_EXP 138
91415: PUSH
91416: LD_EXP 138
91420: PPUSH
91421: LD_VAR 0 4
91425: PPUSH
91426: LD_EXP 138
91430: PUSH
91431: LD_VAR 0 4
91435: ARRAY
91436: PPUSH
91437: LD_VAR 0 3
91441: PPUSH
91442: CALL_OW 3
91446: PPUSH
91447: CALL_OW 1
91451: ST_TO_ADDR
// end ; end ;
91452: GO 91281
91454: POP
91455: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
91456: LD_VAR 0 1
91460: PPUSH
91461: LD_EXP 138
91465: PUSH
91466: LD_VAR 0 4
91470: ARRAY
91471: PUSH
91472: LD_INT 0
91474: PLUS
91475: PPUSH
91476: CALL_OW 505
// end ;
91480: LD_VAR 0 2
91484: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
91485: LD_INT 0
91487: PPUSH
91488: PPUSH
91489: PPUSH
91490: PPUSH
// if not hack in hackTanks then
91491: LD_VAR 0 1
91495: PUSH
91496: LD_EXP 137
91500: IN
91501: NOT
91502: IFFALSE 91506
// exit ;
91504: GO 91591
// index := GetElementIndex ( hackTanks , hack ) ;
91506: LD_ADDR_VAR 0 5
91510: PUSH
91511: LD_EXP 137
91515: PPUSH
91516: LD_VAR 0 1
91520: PPUSH
91521: CALL 34239 0 2
91525: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
91526: LD_ADDR_VAR 0 4
91530: PUSH
91531: DOUBLE
91532: LD_INT 1
91534: DEC
91535: ST_TO_ADDR
91536: LD_EXP 138
91540: PUSH
91541: LD_VAR 0 5
91545: ARRAY
91546: PUSH
91547: FOR_TO
91548: IFFALSE 91589
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
91550: LD_EXP 138
91554: PUSH
91555: LD_VAR 0 5
91559: ARRAY
91560: PUSH
91561: LD_VAR 0 4
91565: ARRAY
91566: PUSH
91567: LD_INT 1
91569: ARRAY
91570: PUSH
91571: LD_VAR 0 2
91575: EQUAL
91576: IFFALSE 91587
// KillUnit ( vehicle ) ;
91578: LD_VAR 0 2
91582: PPUSH
91583: CALL_OW 66
91587: GO 91547
91589: POP
91590: POP
// end ;
91591: LD_VAR 0 3
91595: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
91596: LD_EXP 142
91600: NOT
91601: IFFALSE 91636
91603: GO 91605
91605: DISABLE
// begin initMiner := true ;
91606: LD_ADDR_EXP 142
91610: PUSH
91611: LD_INT 1
91613: ST_TO_ADDR
// minersList := [ ] ;
91614: LD_ADDR_EXP 143
91618: PUSH
91619: EMPTY
91620: ST_TO_ADDR
// minerMinesList := [ ] ;
91621: LD_ADDR_EXP 144
91625: PUSH
91626: EMPTY
91627: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
91628: LD_ADDR_EXP 145
91632: PUSH
91633: LD_INT 5
91635: ST_TO_ADDR
// end ;
91636: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
91637: LD_EXP 142
91641: PUSH
91642: LD_INT 34
91644: PUSH
91645: LD_INT 81
91647: PUSH
91648: EMPTY
91649: LIST
91650: LIST
91651: PPUSH
91652: CALL_OW 69
91656: AND
91657: IFFALSE 92118
91659: GO 91661
91661: DISABLE
91662: LD_INT 0
91664: PPUSH
91665: PPUSH
91666: PPUSH
91667: PPUSH
// begin enable ;
91668: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
91669: LD_ADDR_VAR 0 1
91673: PUSH
91674: LD_INT 34
91676: PUSH
91677: LD_INT 81
91679: PUSH
91680: EMPTY
91681: LIST
91682: LIST
91683: PPUSH
91684: CALL_OW 69
91688: PUSH
91689: FOR_IN
91690: IFFALSE 91762
// begin if not i in minersList then
91692: LD_VAR 0 1
91696: PUSH
91697: LD_EXP 143
91701: IN
91702: NOT
91703: IFFALSE 91760
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
91705: LD_ADDR_EXP 143
91709: PUSH
91710: LD_EXP 143
91714: PPUSH
91715: LD_EXP 143
91719: PUSH
91720: LD_INT 1
91722: PLUS
91723: PPUSH
91724: LD_VAR 0 1
91728: PPUSH
91729: CALL_OW 1
91733: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
91734: LD_ADDR_EXP 144
91738: PUSH
91739: LD_EXP 144
91743: PPUSH
91744: LD_EXP 144
91748: PUSH
91749: LD_INT 1
91751: PLUS
91752: PPUSH
91753: EMPTY
91754: PPUSH
91755: CALL_OW 1
91759: ST_TO_ADDR
// end end ;
91760: GO 91689
91762: POP
91763: POP
// for i := minerMinesList downto 1 do
91764: LD_ADDR_VAR 0 1
91768: PUSH
91769: DOUBLE
91770: LD_EXP 144
91774: INC
91775: ST_TO_ADDR
91776: LD_INT 1
91778: PUSH
91779: FOR_DOWNTO
91780: IFFALSE 92116
// begin if IsLive ( minersList [ i ] ) then
91782: LD_EXP 143
91786: PUSH
91787: LD_VAR 0 1
91791: ARRAY
91792: PPUSH
91793: CALL_OW 300
91797: IFFALSE 91825
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
91799: LD_EXP 143
91803: PUSH
91804: LD_VAR 0 1
91808: ARRAY
91809: PPUSH
91810: LD_EXP 144
91814: PUSH
91815: LD_VAR 0 1
91819: ARRAY
91820: PPUSH
91821: CALL_OW 505
// if not minerMinesList [ i ] then
91825: LD_EXP 144
91829: PUSH
91830: LD_VAR 0 1
91834: ARRAY
91835: NOT
91836: IFFALSE 91840
// continue ;
91838: GO 91779
// for j := minerMinesList [ i ] downto 1 do
91840: LD_ADDR_VAR 0 2
91844: PUSH
91845: DOUBLE
91846: LD_EXP 144
91850: PUSH
91851: LD_VAR 0 1
91855: ARRAY
91856: INC
91857: ST_TO_ADDR
91858: LD_INT 1
91860: PUSH
91861: FOR_DOWNTO
91862: IFFALSE 92112
// begin side := GetSide ( minersList [ i ] ) ;
91864: LD_ADDR_VAR 0 3
91868: PUSH
91869: LD_EXP 143
91873: PUSH
91874: LD_VAR 0 1
91878: ARRAY
91879: PPUSH
91880: CALL_OW 255
91884: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
91885: LD_ADDR_VAR 0 4
91889: PUSH
91890: LD_EXP 144
91894: PUSH
91895: LD_VAR 0 1
91899: ARRAY
91900: PUSH
91901: LD_VAR 0 2
91905: ARRAY
91906: PUSH
91907: LD_INT 1
91909: ARRAY
91910: PPUSH
91911: LD_EXP 144
91915: PUSH
91916: LD_VAR 0 1
91920: ARRAY
91921: PUSH
91922: LD_VAR 0 2
91926: ARRAY
91927: PUSH
91928: LD_INT 2
91930: ARRAY
91931: PPUSH
91932: CALL_OW 428
91936: ST_TO_ADDR
// if not tmp then
91937: LD_VAR 0 4
91941: NOT
91942: IFFALSE 91946
// continue ;
91944: GO 91861
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
91946: LD_VAR 0 4
91950: PUSH
91951: LD_INT 81
91953: PUSH
91954: LD_VAR 0 3
91958: PUSH
91959: EMPTY
91960: LIST
91961: LIST
91962: PPUSH
91963: CALL_OW 69
91967: IN
91968: PUSH
91969: LD_EXP 144
91973: PUSH
91974: LD_VAR 0 1
91978: ARRAY
91979: PUSH
91980: LD_VAR 0 2
91984: ARRAY
91985: PUSH
91986: LD_INT 1
91988: ARRAY
91989: PPUSH
91990: LD_EXP 144
91994: PUSH
91995: LD_VAR 0 1
91999: ARRAY
92000: PUSH
92001: LD_VAR 0 2
92005: ARRAY
92006: PUSH
92007: LD_INT 2
92009: ARRAY
92010: PPUSH
92011: CALL_OW 458
92015: AND
92016: IFFALSE 92110
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
92018: LD_EXP 144
92022: PUSH
92023: LD_VAR 0 1
92027: ARRAY
92028: PUSH
92029: LD_VAR 0 2
92033: ARRAY
92034: PUSH
92035: LD_INT 1
92037: ARRAY
92038: PPUSH
92039: LD_EXP 144
92043: PUSH
92044: LD_VAR 0 1
92048: ARRAY
92049: PUSH
92050: LD_VAR 0 2
92054: ARRAY
92055: PUSH
92056: LD_INT 2
92058: ARRAY
92059: PPUSH
92060: LD_VAR 0 3
92064: PPUSH
92065: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
92069: LD_ADDR_EXP 144
92073: PUSH
92074: LD_EXP 144
92078: PPUSH
92079: LD_VAR 0 1
92083: PPUSH
92084: LD_EXP 144
92088: PUSH
92089: LD_VAR 0 1
92093: ARRAY
92094: PPUSH
92095: LD_VAR 0 2
92099: PPUSH
92100: CALL_OW 3
92104: PPUSH
92105: CALL_OW 1
92109: ST_TO_ADDR
// end ; end ;
92110: GO 91861
92112: POP
92113: POP
// end ;
92114: GO 91779
92116: POP
92117: POP
// end ;
92118: PPOPN 4
92120: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
92121: LD_INT 0
92123: PPUSH
92124: PPUSH
// result := false ;
92125: LD_ADDR_VAR 0 4
92129: PUSH
92130: LD_INT 0
92132: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
92133: LD_VAR 0 1
92137: PPUSH
92138: CALL_OW 264
92142: PUSH
92143: LD_INT 81
92145: EQUAL
92146: NOT
92147: IFFALSE 92151
// exit ;
92149: GO 92391
// index := GetElementIndex ( minersList , unit ) ;
92151: LD_ADDR_VAR 0 5
92155: PUSH
92156: LD_EXP 143
92160: PPUSH
92161: LD_VAR 0 1
92165: PPUSH
92166: CALL 34239 0 2
92170: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
92171: LD_EXP 144
92175: PUSH
92176: LD_VAR 0 5
92180: ARRAY
92181: PUSH
92182: LD_EXP 145
92186: GREATEREQUAL
92187: IFFALSE 92191
// exit ;
92189: GO 92391
// ComMoveXY ( unit , x , y ) ;
92191: LD_VAR 0 1
92195: PPUSH
92196: LD_VAR 0 2
92200: PPUSH
92201: LD_VAR 0 3
92205: PPUSH
92206: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
92210: LD_INT 35
92212: PPUSH
92213: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
92217: LD_VAR 0 1
92221: PPUSH
92222: LD_VAR 0 2
92226: PPUSH
92227: LD_VAR 0 3
92231: PPUSH
92232: CALL 66000 0 3
92236: NOT
92237: PUSH
92238: LD_VAR 0 1
92242: PPUSH
92243: CALL_OW 314
92247: AND
92248: IFFALSE 92252
// exit ;
92250: GO 92391
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
92252: LD_VAR 0 2
92256: PPUSH
92257: LD_VAR 0 3
92261: PPUSH
92262: CALL_OW 428
92266: PUSH
92267: LD_VAR 0 1
92271: EQUAL
92272: PUSH
92273: LD_VAR 0 1
92277: PPUSH
92278: CALL_OW 314
92282: NOT
92283: AND
92284: IFFALSE 92210
// PlaySoundXY ( x , y , PlantMine ) ;
92286: LD_VAR 0 2
92290: PPUSH
92291: LD_VAR 0 3
92295: PPUSH
92296: LD_STRING PlantMine
92298: PPUSH
92299: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
92303: LD_VAR 0 2
92307: PPUSH
92308: LD_VAR 0 3
92312: PPUSH
92313: LD_VAR 0 1
92317: PPUSH
92318: CALL_OW 255
92322: PPUSH
92323: LD_INT 0
92325: PPUSH
92326: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
92330: LD_ADDR_EXP 144
92334: PUSH
92335: LD_EXP 144
92339: PPUSH
92340: LD_VAR 0 5
92344: PUSH
92345: LD_EXP 144
92349: PUSH
92350: LD_VAR 0 5
92354: ARRAY
92355: PUSH
92356: LD_INT 1
92358: PLUS
92359: PUSH
92360: EMPTY
92361: LIST
92362: LIST
92363: PPUSH
92364: LD_VAR 0 2
92368: PUSH
92369: LD_VAR 0 3
92373: PUSH
92374: EMPTY
92375: LIST
92376: LIST
92377: PPUSH
92378: CALL 34454 0 3
92382: ST_TO_ADDR
// result := true ;
92383: LD_ADDR_VAR 0 4
92387: PUSH
92388: LD_INT 1
92390: ST_TO_ADDR
// end ;
92391: LD_VAR 0 4
92395: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
92396: LD_INT 0
92398: PPUSH
92399: PPUSH
92400: PPUSH
// if not unit in minersList then
92401: LD_VAR 0 1
92405: PUSH
92406: LD_EXP 143
92410: IN
92411: NOT
92412: IFFALSE 92416
// exit ;
92414: GO 92808
// index := GetElementIndex ( minersList , unit ) ;
92416: LD_ADDR_VAR 0 6
92420: PUSH
92421: LD_EXP 143
92425: PPUSH
92426: LD_VAR 0 1
92430: PPUSH
92431: CALL 34239 0 2
92435: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
92436: LD_ADDR_VAR 0 5
92440: PUSH
92441: DOUBLE
92442: LD_EXP 144
92446: PUSH
92447: LD_VAR 0 6
92451: ARRAY
92452: INC
92453: ST_TO_ADDR
92454: LD_INT 1
92456: PUSH
92457: FOR_DOWNTO
92458: IFFALSE 92619
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
92460: LD_EXP 144
92464: PUSH
92465: LD_VAR 0 6
92469: ARRAY
92470: PUSH
92471: LD_VAR 0 5
92475: ARRAY
92476: PUSH
92477: LD_INT 1
92479: ARRAY
92480: PUSH
92481: LD_VAR 0 2
92485: EQUAL
92486: PUSH
92487: LD_EXP 144
92491: PUSH
92492: LD_VAR 0 6
92496: ARRAY
92497: PUSH
92498: LD_VAR 0 5
92502: ARRAY
92503: PUSH
92504: LD_INT 2
92506: ARRAY
92507: PUSH
92508: LD_VAR 0 3
92512: EQUAL
92513: AND
92514: IFFALSE 92617
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
92516: LD_EXP 144
92520: PUSH
92521: LD_VAR 0 6
92525: ARRAY
92526: PUSH
92527: LD_VAR 0 5
92531: ARRAY
92532: PUSH
92533: LD_INT 1
92535: ARRAY
92536: PPUSH
92537: LD_EXP 144
92541: PUSH
92542: LD_VAR 0 6
92546: ARRAY
92547: PUSH
92548: LD_VAR 0 5
92552: ARRAY
92553: PUSH
92554: LD_INT 2
92556: ARRAY
92557: PPUSH
92558: LD_VAR 0 1
92562: PPUSH
92563: CALL_OW 255
92567: PPUSH
92568: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
92572: LD_ADDR_EXP 144
92576: PUSH
92577: LD_EXP 144
92581: PPUSH
92582: LD_VAR 0 6
92586: PPUSH
92587: LD_EXP 144
92591: PUSH
92592: LD_VAR 0 6
92596: ARRAY
92597: PPUSH
92598: LD_VAR 0 5
92602: PPUSH
92603: CALL_OW 3
92607: PPUSH
92608: CALL_OW 1
92612: ST_TO_ADDR
// exit ;
92613: POP
92614: POP
92615: GO 92808
// end ; end ;
92617: GO 92457
92619: POP
92620: POP
// for i := minerMinesList [ index ] downto 1 do
92621: LD_ADDR_VAR 0 5
92625: PUSH
92626: DOUBLE
92627: LD_EXP 144
92631: PUSH
92632: LD_VAR 0 6
92636: ARRAY
92637: INC
92638: ST_TO_ADDR
92639: LD_INT 1
92641: PUSH
92642: FOR_DOWNTO
92643: IFFALSE 92806
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
92645: LD_EXP 144
92649: PUSH
92650: LD_VAR 0 6
92654: ARRAY
92655: PUSH
92656: LD_VAR 0 5
92660: ARRAY
92661: PUSH
92662: LD_INT 1
92664: ARRAY
92665: PPUSH
92666: LD_EXP 144
92670: PUSH
92671: LD_VAR 0 6
92675: ARRAY
92676: PUSH
92677: LD_VAR 0 5
92681: ARRAY
92682: PUSH
92683: LD_INT 2
92685: ARRAY
92686: PPUSH
92687: LD_VAR 0 2
92691: PPUSH
92692: LD_VAR 0 3
92696: PPUSH
92697: CALL_OW 298
92701: PUSH
92702: LD_INT 6
92704: LESS
92705: IFFALSE 92804
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
92707: LD_EXP 144
92711: PUSH
92712: LD_VAR 0 6
92716: ARRAY
92717: PUSH
92718: LD_VAR 0 5
92722: ARRAY
92723: PUSH
92724: LD_INT 1
92726: ARRAY
92727: PPUSH
92728: LD_EXP 144
92732: PUSH
92733: LD_VAR 0 6
92737: ARRAY
92738: PUSH
92739: LD_VAR 0 5
92743: ARRAY
92744: PUSH
92745: LD_INT 2
92747: ARRAY
92748: PPUSH
92749: LD_VAR 0 1
92753: PPUSH
92754: CALL_OW 255
92758: PPUSH
92759: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
92763: LD_ADDR_EXP 144
92767: PUSH
92768: LD_EXP 144
92772: PPUSH
92773: LD_VAR 0 6
92777: PPUSH
92778: LD_EXP 144
92782: PUSH
92783: LD_VAR 0 6
92787: ARRAY
92788: PPUSH
92789: LD_VAR 0 5
92793: PPUSH
92794: CALL_OW 3
92798: PPUSH
92799: CALL_OW 1
92803: ST_TO_ADDR
// end ; end ;
92804: GO 92642
92806: POP
92807: POP
// end ;
92808: LD_VAR 0 4
92812: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
92813: LD_INT 0
92815: PPUSH
92816: PPUSH
92817: PPUSH
92818: PPUSH
92819: PPUSH
92820: PPUSH
92821: PPUSH
92822: PPUSH
92823: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
92824: LD_VAR 0 1
92828: PPUSH
92829: CALL_OW 264
92833: PUSH
92834: LD_INT 81
92836: EQUAL
92837: NOT
92838: PUSH
92839: LD_VAR 0 1
92843: PUSH
92844: LD_EXP 143
92848: IN
92849: NOT
92850: OR
92851: IFFALSE 92855
// exit ;
92853: GO 93177
// index := GetElementIndex ( minersList , unit ) ;
92855: LD_ADDR_VAR 0 6
92859: PUSH
92860: LD_EXP 143
92864: PPUSH
92865: LD_VAR 0 1
92869: PPUSH
92870: CALL 34239 0 2
92874: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
92875: LD_ADDR_VAR 0 8
92879: PUSH
92880: LD_EXP 145
92884: PUSH
92885: LD_EXP 144
92889: PUSH
92890: LD_VAR 0 6
92894: ARRAY
92895: MINUS
92896: ST_TO_ADDR
// if not minesFreeAmount then
92897: LD_VAR 0 8
92901: NOT
92902: IFFALSE 92906
// exit ;
92904: GO 93177
// tmp := [ ] ;
92906: LD_ADDR_VAR 0 7
92910: PUSH
92911: EMPTY
92912: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
92913: LD_ADDR_VAR 0 5
92917: PUSH
92918: DOUBLE
92919: LD_INT 1
92921: DEC
92922: ST_TO_ADDR
92923: LD_VAR 0 8
92927: PUSH
92928: FOR_TO
92929: IFFALSE 93124
// begin _d := rand ( 0 , 5 ) ;
92931: LD_ADDR_VAR 0 11
92935: PUSH
92936: LD_INT 0
92938: PPUSH
92939: LD_INT 5
92941: PPUSH
92942: CALL_OW 12
92946: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
92947: LD_ADDR_VAR 0 12
92951: PUSH
92952: LD_INT 2
92954: PPUSH
92955: LD_INT 6
92957: PPUSH
92958: CALL_OW 12
92962: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
92963: LD_ADDR_VAR 0 9
92967: PUSH
92968: LD_VAR 0 2
92972: PPUSH
92973: LD_VAR 0 11
92977: PPUSH
92978: LD_VAR 0 12
92982: PPUSH
92983: CALL_OW 272
92987: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
92988: LD_ADDR_VAR 0 10
92992: PUSH
92993: LD_VAR 0 3
92997: PPUSH
92998: LD_VAR 0 11
93002: PPUSH
93003: LD_VAR 0 12
93007: PPUSH
93008: CALL_OW 273
93012: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
93013: LD_VAR 0 9
93017: PPUSH
93018: LD_VAR 0 10
93022: PPUSH
93023: CALL_OW 488
93027: PUSH
93028: LD_VAR 0 9
93032: PUSH
93033: LD_VAR 0 10
93037: PUSH
93038: EMPTY
93039: LIST
93040: LIST
93041: PUSH
93042: LD_VAR 0 7
93046: IN
93047: NOT
93048: AND
93049: PUSH
93050: LD_VAR 0 9
93054: PPUSH
93055: LD_VAR 0 10
93059: PPUSH
93060: CALL_OW 458
93064: NOT
93065: AND
93066: IFFALSE 93108
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
93068: LD_ADDR_VAR 0 7
93072: PUSH
93073: LD_VAR 0 7
93077: PPUSH
93078: LD_VAR 0 7
93082: PUSH
93083: LD_INT 1
93085: PLUS
93086: PPUSH
93087: LD_VAR 0 9
93091: PUSH
93092: LD_VAR 0 10
93096: PUSH
93097: EMPTY
93098: LIST
93099: LIST
93100: PPUSH
93101: CALL_OW 1
93105: ST_TO_ADDR
93106: GO 93122
// i := i - 1 ;
93108: LD_ADDR_VAR 0 5
93112: PUSH
93113: LD_VAR 0 5
93117: PUSH
93118: LD_INT 1
93120: MINUS
93121: ST_TO_ADDR
// end ;
93122: GO 92928
93124: POP
93125: POP
// for i in tmp do
93126: LD_ADDR_VAR 0 5
93130: PUSH
93131: LD_VAR 0 7
93135: PUSH
93136: FOR_IN
93137: IFFALSE 93175
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
93139: LD_VAR 0 1
93143: PPUSH
93144: LD_VAR 0 5
93148: PUSH
93149: LD_INT 1
93151: ARRAY
93152: PPUSH
93153: LD_VAR 0 5
93157: PUSH
93158: LD_INT 2
93160: ARRAY
93161: PPUSH
93162: CALL 92121 0 3
93166: NOT
93167: IFFALSE 93173
// exit ;
93169: POP
93170: POP
93171: GO 93177
93173: GO 93136
93175: POP
93176: POP
// end ;
93177: LD_VAR 0 4
93181: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
93182: LD_INT 0
93184: PPUSH
93185: PPUSH
93186: PPUSH
93187: PPUSH
93188: PPUSH
93189: PPUSH
93190: PPUSH
93191: PPUSH
93192: PPUSH
// if GetClass ( unit ) <> class_sniper then
93193: LD_VAR 0 1
93197: PPUSH
93198: CALL_OW 257
93202: PUSH
93203: LD_INT 5
93205: NONEQUAL
93206: IFFALSE 93210
// exit ;
93208: GO 93676
// dist := 8 ;
93210: LD_ADDR_VAR 0 5
93214: PUSH
93215: LD_INT 8
93217: ST_TO_ADDR
// viewRange := 12 ;
93218: LD_ADDR_VAR 0 8
93222: PUSH
93223: LD_INT 12
93225: ST_TO_ADDR
// side := GetSide ( unit ) ;
93226: LD_ADDR_VAR 0 6
93230: PUSH
93231: LD_VAR 0 1
93235: PPUSH
93236: CALL_OW 255
93240: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
93241: LD_INT 61
93243: PPUSH
93244: LD_VAR 0 6
93248: PPUSH
93249: CALL_OW 321
93253: PUSH
93254: LD_INT 2
93256: EQUAL
93257: IFFALSE 93267
// viewRange := 16 ;
93259: LD_ADDR_VAR 0 8
93263: PUSH
93264: LD_INT 16
93266: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
93267: LD_VAR 0 1
93271: PPUSH
93272: LD_VAR 0 2
93276: PPUSH
93277: LD_VAR 0 3
93281: PPUSH
93282: CALL_OW 297
93286: PUSH
93287: LD_VAR 0 5
93291: GREATER
93292: IFFALSE 93371
// begin ComMoveXY ( unit , x , y ) ;
93294: LD_VAR 0 1
93298: PPUSH
93299: LD_VAR 0 2
93303: PPUSH
93304: LD_VAR 0 3
93308: PPUSH
93309: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
93313: LD_INT 35
93315: PPUSH
93316: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
93320: LD_VAR 0 1
93324: PPUSH
93325: LD_VAR 0 2
93329: PPUSH
93330: LD_VAR 0 3
93334: PPUSH
93335: CALL 66000 0 3
93339: NOT
93340: IFFALSE 93344
// exit ;
93342: GO 93676
// until GetDistUnitXY ( unit , x , y ) < dist ;
93344: LD_VAR 0 1
93348: PPUSH
93349: LD_VAR 0 2
93353: PPUSH
93354: LD_VAR 0 3
93358: PPUSH
93359: CALL_OW 297
93363: PUSH
93364: LD_VAR 0 5
93368: LESS
93369: IFFALSE 93313
// end ; ComTurnXY ( unit , x , y ) ;
93371: LD_VAR 0 1
93375: PPUSH
93376: LD_VAR 0 2
93380: PPUSH
93381: LD_VAR 0 3
93385: PPUSH
93386: CALL_OW 118
// repeat if Multiplayer then
93390: LD_OWVAR 4
93394: IFFALSE 93405
// wait ( 35 ) else
93396: LD_INT 35
93398: PPUSH
93399: CALL_OW 67
93403: GO 93412
// wait ( 5 ) ;
93405: LD_INT 5
93407: PPUSH
93408: CALL_OW 67
// _d := GetDir ( unit ) ;
93412: LD_ADDR_VAR 0 11
93416: PUSH
93417: LD_VAR 0 1
93421: PPUSH
93422: CALL_OW 254
93426: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
93427: LD_ADDR_VAR 0 7
93431: PUSH
93432: LD_VAR 0 1
93436: PPUSH
93437: CALL_OW 250
93441: PPUSH
93442: LD_VAR 0 1
93446: PPUSH
93447: CALL_OW 251
93451: PPUSH
93452: LD_VAR 0 2
93456: PPUSH
93457: LD_VAR 0 3
93461: PPUSH
93462: CALL 68608 0 4
93466: ST_TO_ADDR
// until dir = _d ;
93467: LD_VAR 0 7
93471: PUSH
93472: LD_VAR 0 11
93476: EQUAL
93477: IFFALSE 93390
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
93479: LD_ADDR_VAR 0 9
93483: PUSH
93484: LD_VAR 0 1
93488: PPUSH
93489: CALL_OW 250
93493: PPUSH
93494: LD_VAR 0 7
93498: PPUSH
93499: LD_VAR 0 5
93503: PPUSH
93504: CALL_OW 272
93508: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
93509: LD_ADDR_VAR 0 10
93513: PUSH
93514: LD_VAR 0 1
93518: PPUSH
93519: CALL_OW 251
93523: PPUSH
93524: LD_VAR 0 7
93528: PPUSH
93529: LD_VAR 0 5
93533: PPUSH
93534: CALL_OW 273
93538: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
93539: LD_VAR 0 9
93543: PPUSH
93544: LD_VAR 0 10
93548: PPUSH
93549: CALL_OW 488
93553: NOT
93554: IFFALSE 93558
// exit ;
93556: GO 93676
// ComAnimCustom ( unit , 1 ) ;
93558: LD_VAR 0 1
93562: PPUSH
93563: LD_INT 1
93565: PPUSH
93566: CALL_OW 592
// p := 0 ;
93570: LD_ADDR_VAR 0 12
93574: PUSH
93575: LD_INT 0
93577: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
93578: LD_VAR 0 9
93582: PPUSH
93583: LD_VAR 0 10
93587: PPUSH
93588: LD_VAR 0 6
93592: PPUSH
93593: LD_VAR 0 8
93597: PPUSH
93598: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
93602: LD_INT 35
93604: PPUSH
93605: CALL_OW 67
// p := Inc ( p ) ;
93609: LD_ADDR_VAR 0 12
93613: PUSH
93614: LD_VAR 0 12
93618: PPUSH
93619: CALL 68564 0 1
93623: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
93624: LD_VAR 0 12
93628: PUSH
93629: LD_INT 3
93631: EQUAL
93632: PUSH
93633: LD_VAR 0 1
93637: PPUSH
93638: CALL_OW 302
93642: NOT
93643: OR
93644: PUSH
93645: LD_VAR 0 1
93649: PPUSH
93650: CALL_OW 301
93654: OR
93655: IFFALSE 93602
// RemoveSeeing ( _x , _y , side ) ;
93657: LD_VAR 0 9
93661: PPUSH
93662: LD_VAR 0 10
93666: PPUSH
93667: LD_VAR 0 6
93671: PPUSH
93672: CALL_OW 331
// end ; end_of_file
93676: LD_VAR 0 4
93680: RET
// export function StopOriginalMusic ; begin
93681: LD_INT 0
93683: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
93684: LD_STRING OW_FORCEMUSICDISABLE(true);
93686: PPUSH
93687: CALL_OW 559
// end ;
93691: LD_VAR 0 1
93695: RET
// export function PlayOriginalMusic ; begin
93696: LD_INT 0
93698: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
93699: LD_STRING OW_FORCEMUSICDISABLE(false);
93701: PPUSH
93702: CALL_OW 559
// end ;
93706: LD_VAR 0 1
93710: RET
// export function PlayCustomMusic ( track , callback ) ; begin
93711: LD_INT 0
93713: PPUSH
// StopOriginalMusic ;
93714: CALL 93681 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
93718: LD_STRING playMusic("
93720: PUSH
93721: LD_VAR 0 1
93725: STR
93726: PUSH
93727: LD_STRING ", "
93729: STR
93730: PUSH
93731: LD_VAR 0 2
93735: STR
93736: PUSH
93737: LD_STRING ")
93739: STR
93740: PPUSH
93741: CALL_OW 559
// end ;
93745: LD_VAR 0 3
93749: RET
