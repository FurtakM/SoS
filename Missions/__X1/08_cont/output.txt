// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 18797 0 0
// PrepareRussian ;
  12: CALL 1911 0 0
// PrepareArabian ;
  16: CALL 362 0 0
// Action ;
  20: CALL 3525 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// enable ( entranceEvent ) ;
 351: LD_INT 1
 353: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 354: LD_INT 2
 356: DISABLE_MARKED
// end ; end_of_file
 357: LD_VAR 0 1
 361: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 362: LD_INT 0
 364: PPUSH
 365: PPUSH
// uc_side := 4 ;
 366: LD_ADDR_OWVAR 20
 370: PUSH
 371: LD_INT 4
 373: ST_TO_ADDR
// uc_nation := 1 ;
 374: LD_ADDR_OWVAR 21
 378: PUSH
 379: LD_INT 1
 381: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 382: LD_ADDR_EXP 49
 386: PUSH
 387: LD_STRING 07_Americans
 389: PPUSH
 390: CALL_OW 31
 394: ST_TO_ADDR
// if americanSquad < 5 then
 395: LD_EXP 49
 399: PUSH
 400: LD_INT 5
 402: LESS
 403: IFFALSE 497
// begin if not americanSquad then
 405: LD_EXP 49
 409: NOT
 410: IFFALSE 419
// americanSquad := [ ] ;
 412: LD_ADDR_EXP 49
 416: PUSH
 417: EMPTY
 418: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 419: LD_ADDR_VAR 0 2
 423: PUSH
 424: DOUBLE
 425: LD_EXP 49
 429: DEC
 430: ST_TO_ADDR
 431: LD_INT 2
 433: PUSH
 434: LD_INT 3
 436: PUSH
 437: LD_INT 4
 439: PUSH
 440: LD_INT 4
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: LD_OWVAR 67
 453: ARRAY
 454: PUSH
 455: FOR_TO
 456: IFFALSE 493
// begin PrepareHuman ( false , 2 , 6 ) ;
 458: LD_INT 0
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 6
 466: PPUSH
 467: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 471: LD_ADDR_EXP 49
 475: PUSH
 476: LD_EXP 49
 480: PPUSH
 481: CALL_OW 44
 485: PPUSH
 486: CALL 63960 0 2
 490: ST_TO_ADDR
// end ;
 491: GO 455
 493: POP
 494: POP
// end else
 495: GO 544
// for i := Count ( americanSquad ) downto 5 do
 497: LD_ADDR_VAR 0 2
 501: PUSH
 502: DOUBLE
 503: LD_EXP 49
 507: PPUSH
 508: CALL 28613 0 1
 512: INC
 513: ST_TO_ADDR
 514: LD_INT 5
 516: PUSH
 517: FOR_DOWNTO
 518: IFFALSE 542
// americanSquad := Delete ( americanSquad , i ) ;
 520: LD_ADDR_EXP 49
 524: PUSH
 525: LD_EXP 49
 529: PPUSH
 530: LD_VAR 0 2
 534: PPUSH
 535: CALL_OW 3
 539: ST_TO_ADDR
 540: GO 517
 542: POP
 543: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 544: LD_ADDR_EXP 51
 548: PUSH
 549: LD_STRING UsCommander
 551: PPUSH
 552: LD_EXP 1
 556: NOT
 557: PPUSH
 558: LD_STRING 07_
 560: PPUSH
 561: CALL 26511 0 3
 565: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 566: LD_INT 1
 568: PPUSH
 569: LD_INT 6
 571: PPUSH
 572: CALL_OW 381
// Jerry := CreateHuman ;
 576: LD_ADDR_EXP 52
 580: PUSH
 581: CALL_OW 44
 585: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 586: LD_EXP 52
 590: PPUSH
 591: LD_INT 33
 593: PPUSH
 594: CALL_OW 336
// if not Doug then
 598: LD_EXP 51
 602: NOT
 603: IFFALSE 625
// begin PrepareSoldier ( sex_male , 6 ) ;
 605: LD_INT 1
 607: PPUSH
 608: LD_INT 6
 610: PPUSH
 611: CALL_OW 381
// Doug := CreateHuman ;
 615: LD_ADDR_EXP 51
 619: PUSH
 620: CALL_OW 44
 624: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 625: LD_EXP 51
 629: PPUSH
 630: LD_INT 33
 632: PPUSH
 633: CALL_OW 336
// if true or johnnySaved or debug then
 637: LD_INT 1
 639: PUSH
 640: LD_EXP 3
 644: OR
 645: PUSH
 646: LD_EXP 1
 650: OR
 651: IFFALSE 678
// begin Harris := NewCharacter ( Harris ) ;
 653: LD_ADDR_EXP 50
 657: PUSH
 658: LD_STRING Harris
 660: PPUSH
 661: CALL_OW 25
 665: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 666: LD_EXP 50
 670: PPUSH
 671: LD_INT 33
 673: PPUSH
 674: CALL_OW 336
// end ; uc_side := 2 ;
 678: LD_ADDR_OWVAR 20
 682: PUSH
 683: LD_INT 2
 685: ST_TO_ADDR
// uc_nation := 2 ;
 686: LD_ADDR_OWVAR 21
 690: PUSH
 691: LD_INT 2
 693: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 694: LD_ADDR_EXP 37
 698: PUSH
 699: LD_STRING Heike
 701: PPUSH
 702: LD_EXP 1
 706: NOT
 707: PPUSH
 708: LD_EXP 2
 712: PPUSH
 713: CALL 26511 0 3
 717: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 718: LD_ADDR_EXP 40
 722: PUSH
 723: LD_STRING Ibrahim
 725: PPUSH
 726: LD_EXP 1
 730: NOT
 731: PPUSH
 732: LD_EXP 2
 736: PPUSH
 737: CALL 26511 0 3
 741: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 742: LD_ADDR_EXP 38
 746: PUSH
 747: LD_STRING Givi
 749: PPUSH
 750: LD_EXP 1
 754: NOT
 755: PPUSH
 756: LD_EXP 2
 760: PPUSH
 761: CALL 26511 0 3
 765: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 766: LD_ADDR_EXP 41
 770: PUSH
 771: LD_STRING Kamil
 773: PPUSH
 774: LD_EXP 1
 778: NOT
 779: PPUSH
 780: LD_EXP 2
 784: PPUSH
 785: CALL 26511 0 3
 789: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 790: LD_ADDR_EXP 42
 794: PUSH
 795: LD_STRING Kaia
 797: PPUSH
 798: LD_EXP 1
 802: NOT
 803: PPUSH
 804: LD_EXP 2
 808: PPUSH
 809: CALL 26511 0 3
 813: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 814: LD_ADDR_EXP 43
 818: PUSH
 819: LD_STRING Sophia
 821: PPUSH
 822: LD_EXP 1
 826: NOT
 827: PPUSH
 828: LD_EXP 2
 832: PPUSH
 833: CALL 26511 0 3
 837: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 838: LD_ADDR_EXP 44
 842: PUSH
 843: LD_STRING Markov
 845: PPUSH
 846: LD_EXP 1
 850: NOT
 851: PPUSH
 852: LD_EXP 2
 856: PPUSH
 857: CALL 26511 0 3
 861: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 862: LD_ADDR_EXP 47
 866: PUSH
 867: LD_STRING Aviradze
 869: PPUSH
 870: LD_EXP 1
 874: NOT
 875: PPUSH
 876: LD_EXP 2
 880: PPUSH
 881: CALL 26511 0 3
 885: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 886: LD_ADDR_EXP 46
 890: PUSH
 891: LD_STRING Kurt
 893: PPUSH
 894: LD_EXP 1
 898: NOT
 899: PPUSH
 900: LD_EXP 2
 904: PPUSH
 905: CALL 26511 0 3
 909: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 910: LD_ADDR_EXP 39
 914: PUSH
 915: LD_STRING Mike
 917: PPUSH
 918: LD_EXP 1
 922: NOT
 923: PPUSH
 924: LD_EXP 2
 928: PPUSH
 929: CALL 26511 0 3
 933: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
 934: LD_ADDR_EXP 45
 938: PUSH
 939: LD_STRING Olaf
 941: PPUSH
 942: CALL_OW 25
 946: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 947: LD_ADDR_EXP 48
 951: PUSH
 952: LD_STRING 07_others
 954: PPUSH
 955: CALL_OW 31
 959: ST_TO_ADDR
// end ;
 960: LD_VAR 0 1
 964: RET
// export function PrepareGame ; var i ; begin
 965: LD_INT 0
 967: PPUSH
 968: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
 969: LD_EXP 37
 973: PPUSH
 974: LD_INT 23
 976: PPUSH
 977: CALL_OW 52
// if Givi then
 981: LD_EXP 38
 985: IFFALSE 1023
// begin SetSide ( Givi , 5 ) ;
 987: LD_EXP 38
 991: PPUSH
 992: LD_INT 5
 994: PPUSH
 995: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
 999: LD_EXP 38
1003: PPUSH
1004: LD_INT 9
1006: PPUSH
1007: LD_INT 0
1009: PPUSH
1010: CALL_OW 49
// ComHold ( Givi ) ;
1014: LD_EXP 38
1018: PPUSH
1019: CALL_OW 140
// end ; if Markov then
1023: LD_EXP 44
1027: IFFALSE 1065
// begin SetSide ( Markov , 5 ) ;
1029: LD_EXP 44
1033: PPUSH
1034: LD_INT 5
1036: PPUSH
1037: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1041: LD_EXP 44
1045: PPUSH
1046: LD_INT 3
1048: PPUSH
1049: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1053: LD_EXP 44
1057: PPUSH
1058: LD_INT 61
1060: PPUSH
1061: CALL_OW 52
// end ; if Mike then
1065: LD_EXP 39
1069: IFFALSE 1107
// begin SetSide ( Mike , 5 ) ;
1071: LD_EXP 39
1075: PPUSH
1076: LD_INT 5
1078: PPUSH
1079: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1083: LD_EXP 39
1087: PPUSH
1088: LD_INT 17
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 49
// ComHold ( Mike ) ;
1098: LD_EXP 39
1102: PPUSH
1103: CALL_OW 140
// end ; if Olaf then
1107: LD_EXP 45
1111: IFFALSE 1152
// begin SetSide ( Olaf , 5 ) ;
1113: LD_EXP 45
1117: PPUSH
1118: LD_INT 5
1120: PPUSH
1121: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1125: LD_EXP 45
1129: PPUSH
1130: LD_INT 16
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1140: LD_EXP 45
1144: PPUSH
1145: LD_INT 3
1147: PPUSH
1148: CALL 67112 0 2
// end ; if Kamil then
1152: LD_EXP 41
1156: IFFALSE 1182
// begin SetSide ( Kamil , 5 ) ;
1158: LD_EXP 41
1162: PPUSH
1163: LD_INT 5
1165: PPUSH
1166: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1170: LD_EXP 41
1174: PPUSH
1175: LD_INT 109
1177: PPUSH
1178: CALL_OW 52
// end ; if Kurt then
1182: LD_EXP 46
1186: IFFALSE 1212
// begin SetSide ( Kurt , 5 ) ;
1188: LD_EXP 46
1192: PPUSH
1193: LD_INT 5
1195: PPUSH
1196: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1200: LD_EXP 46
1204: PPUSH
1205: LD_INT 169
1207: PPUSH
1208: CALL_OW 52
// end ; if Kaia then
1212: LD_EXP 42
1216: IFFALSE 1242
// begin SetSide ( Kaia , 5 ) ;
1218: LD_EXP 42
1222: PPUSH
1223: LD_INT 5
1225: PPUSH
1226: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1230: LD_EXP 42
1234: PPUSH
1235: LD_INT 147
1237: PPUSH
1238: CALL_OW 52
// end ; if Sophia then
1242: LD_EXP 43
1246: IFFALSE 1287
// begin SetSide ( Sophia , 5 ) ;
1248: LD_EXP 43
1252: PPUSH
1253: LD_INT 5
1255: PPUSH
1256: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1260: LD_EXP 43
1264: PPUSH
1265: LD_INT 142
1267: PPUSH
1268: LD_INT 96
1270: PPUSH
1271: LD_INT 0
1273: PPUSH
1274: CALL_OW 48
// ComHold ( Sophia ) ;
1278: LD_EXP 43
1282: PPUSH
1283: CALL_OW 140
// end ; if Harris then
1287: LD_EXP 50
1291: IFFALSE 1329
// begin SetSide ( Harris , 4 ) ;
1293: LD_EXP 50
1297: PPUSH
1298: LD_INT 4
1300: PPUSH
1301: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1305: LD_EXP 50
1309: PPUSH
1310: LD_INT 20
1312: PPUSH
1313: LD_INT 0
1315: PPUSH
1316: CALL_OW 49
// ComHold ( i ) ;
1320: LD_VAR 0 2
1324: PPUSH
1325: CALL_OW 140
// end ; if Doug then
1329: LD_EXP 51
1333: IFFALSE 1359
// begin SetSide ( Doug , 4 ) ;
1335: LD_EXP 51
1339: PPUSH
1340: LD_INT 4
1342: PPUSH
1343: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1347: LD_EXP 51
1351: PPUSH
1352: LD_INT 106
1354: PPUSH
1355: CALL_OW 52
// end ; if Aviradze then
1359: LD_EXP 47
1363: IFFALSE 1389
// begin SetSide ( Aviradze , 5 ) ;
1365: LD_EXP 47
1369: PPUSH
1370: LD_INT 5
1372: PPUSH
1373: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1377: LD_EXP 47
1381: PPUSH
1382: LD_INT 119
1384: PPUSH
1385: CALL_OW 52
// end ; if Ibrahim then
1389: LD_EXP 40
1393: IFFALSE 1419
// begin SetSide ( Ibrahim , 5 ) ;
1395: LD_EXP 40
1399: PPUSH
1400: LD_INT 5
1402: PPUSH
1403: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1407: LD_EXP 40
1411: PPUSH
1412: LD_INT 119
1414: PPUSH
1415: CALL_OW 52
// end ; if Jerry then
1419: LD_EXP 52
1423: IFFALSE 1464
// begin SetSide ( Jerry , 4 ) ;
1425: LD_EXP 52
1429: PPUSH
1430: LD_INT 4
1432: PPUSH
1433: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1437: LD_EXP 52
1441: PPUSH
1442: LD_INT 119
1444: PPUSH
1445: LD_INT 59
1447: PPUSH
1448: LD_INT 0
1450: PPUSH
1451: CALL_OW 48
// ComHold ( Jerry ) ;
1455: LD_EXP 52
1459: PPUSH
1460: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1464: LD_EXP 56
1468: PPUSH
1469: LD_INT 119
1471: PPUSH
1472: CALL_OW 52
// for i in americanSquad do
1476: LD_ADDR_VAR 0 2
1480: PUSH
1481: LD_EXP 49
1485: PUSH
1486: FOR_IN
1487: IFFALSE 1515
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1489: LD_VAR 0 2
1493: PPUSH
1494: LD_INT 21
1496: PPUSH
1497: LD_INT 0
1499: PPUSH
1500: CALL_OW 49
// ComHold ( i ) ;
1504: LD_VAR 0 2
1508: PPUSH
1509: CALL_OW 140
// end ;
1513: GO 1486
1515: POP
1516: POP
// for i in heikeSecondSquad do
1517: LD_ADDR_VAR 0 2
1521: PUSH
1522: LD_EXP 48
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1568
// begin SetSide ( i , 5 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: LD_INT 5
1537: PPUSH
1538: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1542: LD_VAR 0 2
1546: PPUSH
1547: LD_INT 22
1549: PPUSH
1550: LD_INT 0
1552: PPUSH
1553: CALL_OW 49
// ComHold ( i ) ;
1557: LD_VAR 0 2
1561: PPUSH
1562: CALL_OW 140
// end ;
1566: GO 1527
1568: POP
1569: POP
// if not hasVodka then
1570: LD_EXP 4
1574: NOT
1575: IFFALSE 1634
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1577: LD_ADDR_VAR 0 2
1581: PUSH
1582: LD_INT 2
1584: PUSH
1585: LD_INT 22
1587: PUSH
1588: LD_INT 2
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PUSH
1595: LD_INT 22
1597: PUSH
1598: LD_INT 5
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: LIST
1609: PPUSH
1610: CALL_OW 69
1614: PUSH
1615: FOR_IN
1616: IFFALSE 1632
// SetLives ( i , 500 ) ;
1618: LD_VAR 0 2
1622: PPUSH
1623: LD_INT 500
1625: PPUSH
1626: CALL_OW 234
1630: GO 1615
1632: POP
1633: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1634: LD_ADDR_VAR 0 2
1638: PUSH
1639: LD_INT 22
1641: PUSH
1642: LD_INT 4
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PPUSH
1649: CALL_OW 69
1653: PUSH
1654: FOR_IN
1655: IFFALSE 1671
// SetLives ( i , 500 ) ;
1657: LD_VAR 0 2
1661: PPUSH
1662: LD_INT 500
1664: PPUSH
1665: CALL_OW 234
1669: GO 1654
1671: POP
1672: POP
// end ;
1673: LD_VAR 0 1
1677: RET
// export function SetClassKaiaRevolver ; begin
1678: LD_INT 0
1680: PPUSH
// if IsOk ( Kaia ) then
1681: LD_EXP 42
1685: PPUSH
1686: CALL_OW 302
1690: IFFALSE 1704
// SetClass ( Kaia , class_revolver ) ;
1692: LD_EXP 42
1696: PPUSH
1697: LD_INT 34
1699: PPUSH
1700: CALL_OW 336
// end ;
1704: LD_VAR 0 1
1708: RET
// export function SpawnHeikeAsRussian ; begin
1709: LD_INT 0
1711: PPUSH
// RemoveUnit ( Heike ) ;
1712: LD_EXP 37
1716: PPUSH
1717: CALL_OW 64
// heikeTmp := Heike ;
1721: LD_ADDR_EXP 53
1725: PUSH
1726: LD_EXP 37
1730: ST_TO_ADDR
// uc_side := 2 ;
1731: LD_ADDR_OWVAR 20
1735: PUSH
1736: LD_INT 2
1738: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1739: LD_ADDR_EXP 37
1743: PUSH
1744: LD_STRING HeikeRu
1746: PPUSH
1747: CALL_OW 25
1751: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1752: LD_EXP 53
1756: PPUSH
1757: LD_EXP 37
1761: PPUSH
1762: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1766: LD_EXP 37
1770: PPUSH
1771: LD_INT 165
1773: PPUSH
1774: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1778: LD_EXP 37
1782: PPUSH
1783: LD_INT 1
1785: PPUSH
1786: CALL_OW 336
// heikeAsRussian := true ;
1790: LD_ADDR_EXP 27
1794: PUSH
1795: LD_INT 1
1797: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1798: LD_STRING M1-laundry-out
1800: PPUSH
1801: CALL_OW 604
// end ;
1805: LD_VAR 0 1
1809: RET
// export function SpawnGiviAsRussian ; begin
1810: LD_INT 0
1812: PPUSH
// RemoveUnit ( Givi ) ;
1813: LD_EXP 38
1817: PPUSH
1818: CALL_OW 64
// giviTmp := Givi ;
1822: LD_ADDR_EXP 54
1826: PUSH
1827: LD_EXP 38
1831: ST_TO_ADDR
// uc_side := 2 ;
1832: LD_ADDR_OWVAR 20
1836: PUSH
1837: LD_INT 2
1839: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1840: LD_ADDR_EXP 38
1844: PUSH
1845: LD_STRING GiviRu
1847: PPUSH
1848: CALL_OW 25
1852: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1853: LD_EXP 54
1857: PPUSH
1858: LD_EXP 38
1862: PPUSH
1863: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1867: LD_EXP 38
1871: PPUSH
1872: LD_INT 165
1874: PPUSH
1875: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
1879: LD_EXP 38
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: CALL_OW 336
// giviAsRussian := true ;
1891: LD_ADDR_EXP 28
1895: PUSH
1896: LD_INT 1
1898: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1899: LD_STRING M1-laundry-out
1901: PPUSH
1902: CALL_OW 604
// end ; end_of_file
1906: LD_VAR 0 1
1910: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , tmp ; begin
1911: LD_INT 0
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
// uc_side := 3 ;
1917: LD_ADDR_OWVAR 20
1921: PUSH
1922: LD_INT 3
1924: ST_TO_ADDR
// uc_nation := 3 ;
1925: LD_ADDR_OWVAR 21
1929: PUSH
1930: LD_INT 3
1932: ST_TO_ADDR
// SetBName ( ruKitchen , kitchen ) ;
1933: LD_INT 192
1935: PPUSH
1936: LD_STRING kitchen
1938: PPUSH
1939: CALL_OW 500
// SetBName ( laundry , laundry ) ;
1943: LD_INT 165
1945: PPUSH
1946: LD_STRING laundry
1948: PPUSH
1949: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
1953: LD_INT 54
1955: PPUSH
1956: LD_STRING adminSection
1958: PPUSH
1959: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
1963: LD_ADDR_VAR 0 2
1967: PUSH
1968: LD_INT 21
1970: PUSH
1971: LD_INT 3
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PPUSH
1978: CALL_OW 69
1982: PUSH
1983: FOR_IN
1984: IFFALSE 2000
// SetBLevel ( i , 7 ) ;
1986: LD_VAR 0 2
1990: PPUSH
1991: LD_INT 7
1993: PPUSH
1994: CALL_OW 241
1998: GO 1983
2000: POP
2001: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2002: LD_ADDR_VAR 0 2
2006: PUSH
2007: LD_INT 22
2009: PUSH
2010: LD_INT 3
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: LD_INT 30
2022: PUSH
2023: LD_INT 0
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 30
2032: PUSH
2033: LD_INT 1
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: LIST
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PPUSH
2049: CALL_OW 69
2053: PUSH
2054: FOR_IN
2055: IFFALSE 2119
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2057: LD_VAR 0 2
2061: PPUSH
2062: CALL_OW 274
2066: PPUSH
2067: LD_INT 1
2069: PPUSH
2070: LD_INT 1000
2072: PPUSH
2073: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2077: LD_VAR 0 2
2081: PPUSH
2082: CALL_OW 274
2086: PPUSH
2087: LD_INT 2
2089: PPUSH
2090: LD_INT 1000
2092: PPUSH
2093: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2097: LD_VAR 0 2
2101: PPUSH
2102: CALL_OW 274
2106: PPUSH
2107: LD_INT 3
2109: PPUSH
2110: LD_INT 100
2112: PPUSH
2113: CALL_OW 277
// end ;
2117: GO 2054
2119: POP
2120: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2121: LD_ADDR_VAR 0 2
2125: PUSH
2126: LD_INT 22
2128: PUSH
2129: LD_INT 3
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: PUSH
2136: LD_INT 30
2138: PUSH
2139: LD_INT 32
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: PPUSH
2150: CALL_OW 69
2154: PUSH
2155: FOR_IN
2156: IFFALSE 2190
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2158: LD_INT 0
2160: PPUSH
2161: LD_INT 5
2163: PUSH
2164: LD_OWVAR 67
2168: PLUS
2169: PPUSH
2170: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2174: CALL_OW 44
2178: PPUSH
2179: LD_VAR 0 2
2183: PPUSH
2184: CALL_OW 52
// end ;
2188: GO 2155
2190: POP
2191: POP
// for i := 1 to 2 do
2192: LD_ADDR_VAR 0 2
2196: PUSH
2197: DOUBLE
2198: LD_INT 1
2200: DEC
2201: ST_TO_ADDR
2202: LD_INT 2
2204: PUSH
2205: FOR_TO
2206: IFFALSE 2258
// begin PrepareMechanic ( false , 8 ) ;
2208: LD_INT 0
2210: PPUSH
2211: LD_INT 8
2213: PPUSH
2214: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2218: LD_ADDR_EXP 58
2222: PUSH
2223: LD_EXP 58
2227: PPUSH
2228: CALL_OW 44
2232: PPUSH
2233: CALL 63960 0 2
2237: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2238: LD_EXP 58
2242: PUSH
2243: LD_EXP 58
2247: ARRAY
2248: PPUSH
2249: LD_INT 61
2251: PPUSH
2252: CALL_OW 52
// end ;
2256: GO 2205
2258: POP
2259: POP
// PrepareMechanic ( sex_male , 8 ) ;
2260: LD_INT 1
2262: PPUSH
2263: LD_INT 8
2265: PPUSH
2266: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2270: LD_ADDR_EXP 59
2274: PUSH
2275: LD_EXP 59
2279: PPUSH
2280: CALL_OW 44
2284: PPUSH
2285: CALL 63960 0 2
2289: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2290: LD_EXP 59
2294: PUSH
2295: LD_EXP 59
2299: ARRAY
2300: PPUSH
2301: LD_INT 196
2303: PPUSH
2304: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2308: LD_INT 1
2310: PPUSH
2311: LD_INT 8
2313: PPUSH
2314: CALL_OW 383
// hc_name := Stiepan Simonov ;
2318: LD_ADDR_OWVAR 26
2322: PUSH
2323: LD_STRING Stiepan Simonov
2325: ST_TO_ADDR
// Stiopa := CreateHuman ;
2326: LD_ADDR_EXP 60
2330: PUSH
2331: CALL_OW 44
2335: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2336: LD_INT 2
2338: PPUSH
2339: LD_INT 8
2341: PPUSH
2342: CALL_OW 383
// hc_name := Laura Dragunov ;
2346: LD_ADDR_OWVAR 26
2350: PUSH
2351: LD_STRING Laura Dragunov
2353: ST_TO_ADDR
// Laura := CreateHuman ;
2354: LD_ADDR_EXP 61
2358: PUSH
2359: CALL_OW 44
2363: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2364: LD_EXP 61
2368: PPUSH
2369: LD_INT 196
2371: PPUSH
2372: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2376: LD_INT 1
2378: PPUSH
2379: LD_INT 8
2381: PPUSH
2382: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2386: LD_ADDR_EXP 58
2390: PUSH
2391: LD_EXP 58
2395: PPUSH
2396: LD_INT 1
2398: PPUSH
2399: CALL_OW 44
2403: PPUSH
2404: CALL_OW 2
2408: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2409: LD_EXP 58
2413: PUSH
2414: LD_INT 1
2416: ARRAY
2417: PPUSH
2418: LD_INT 61
2420: PPUSH
2421: CALL_OW 52
// PrepareSoldier ( sex_male , 8 ) ;
2425: LD_INT 1
2427: PPUSH
2428: LD_INT 8
2430: PPUSH
2431: CALL_OW 381
// hc_name := Pavel Muchin ;
2435: LD_ADDR_OWVAR 26
2439: PUSH
2440: LD_STRING Pavel Muchin
2442: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2443: LD_ADDR_OWVAR 29
2447: PUSH
2448: LD_INT 13
2450: PUSH
2451: LD_INT 13
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2458: LD_ADDR_EXP 57
2462: PUSH
2463: CALL_OW 44
2467: ST_TO_ADDR
// InitHC_All ( ) ;
2468: CALL_OW 584
// uc_side := 6 ;
2472: LD_ADDR_OWVAR 20
2476: PUSH
2477: LD_INT 6
2479: ST_TO_ADDR
// uc_nation := 3 ;
2480: LD_ADDR_OWVAR 21
2484: PUSH
2485: LD_INT 3
2487: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2488: LD_ADDR_VAR 0 4
2492: PUSH
2493: LD_INT 14
2495: PUSH
2496: LD_INT 15
2498: PUSH
2499: LD_INT 48
2501: PUSH
2502: LD_INT 24
2504: PUSH
2505: LD_INT 149
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: LIST
2512: LIST
2513: LIST
2514: ST_TO_ADDR
// for i in tmp do
2515: LD_ADDR_VAR 0 2
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: FOR_IN
2526: IFFALSE 2574
// begin for j := 1 to 2 do
2528: LD_ADDR_VAR 0 3
2532: PUSH
2533: DOUBLE
2534: LD_INT 1
2536: DEC
2537: ST_TO_ADDR
2538: LD_INT 2
2540: PUSH
2541: FOR_TO
2542: IFFALSE 2570
// begin PrepareSoldier ( false , 7 ) ;
2544: LD_INT 0
2546: PPUSH
2547: LD_INT 7
2549: PPUSH
2550: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2554: CALL_OW 44
2558: PPUSH
2559: LD_VAR 0 2
2563: PPUSH
2564: CALL_OW 52
// end ;
2568: GO 2541
2570: POP
2571: POP
// end ;
2572: GO 2525
2574: POP
2575: POP
// end ;
2576: LD_VAR 0 1
2580: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2581: LD_INT 0
2583: PPUSH
2584: PPUSH
2585: PPUSH
2586: PPUSH
// uc_side := 3 ;
2587: LD_ADDR_OWVAR 20
2591: PUSH
2592: LD_INT 3
2594: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2595: LD_ADDR_OWVAR 21
2599: PUSH
2600: LD_INT 1
2602: PPUSH
2603: LD_INT 3
2605: PPUSH
2606: CALL_OW 12
2610: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2611: LD_ADDR_VAR 0 4
2615: PUSH
2616: LD_INT 5
2618: PPUSH
2619: LD_INT 0
2621: PPUSH
2622: CALL_OW 517
2626: ST_TO_ADDR
// for i := 1 to 3 do
2627: LD_ADDR_VAR 0 2
2631: PUSH
2632: DOUBLE
2633: LD_INT 1
2635: DEC
2636: ST_TO_ADDR
2637: LD_INT 3
2639: PUSH
2640: FOR_TO
2641: IFFALSE 2710
// begin PrepareHuman ( false , 33 , 0 ) ;
2643: LD_INT 0
2645: PPUSH
2646: LD_INT 33
2648: PPUSH
2649: LD_INT 0
2651: PPUSH
2652: CALL_OW 380
// un := CreateHuman ;
2656: LD_ADDR_VAR 0 3
2660: PUSH
2661: CALL_OW 44
2665: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2666: LD_VAR 0 3
2670: PPUSH
2671: LD_VAR 0 4
2675: PUSH
2676: LD_INT 1
2678: ARRAY
2679: PUSH
2680: LD_VAR 0 2
2684: ARRAY
2685: PPUSH
2686: LD_VAR 0 4
2690: PUSH
2691: LD_INT 2
2693: ARRAY
2694: PUSH
2695: LD_VAR 0 2
2699: ARRAY
2700: PPUSH
2701: LD_INT 1
2703: PPUSH
2704: CALL_OW 601
// end ;
2708: GO 2640
2710: POP
2711: POP
// end ;
2712: LD_VAR 0 1
2716: RET
// export function PrepareFirstScene ; var i , un ; begin
2717: LD_INT 0
2719: PPUSH
2720: PPUSH
2721: PPUSH
// uc_side := 4 ;
2722: LD_ADDR_OWVAR 20
2726: PUSH
2727: LD_INT 4
2729: ST_TO_ADDR
// uc_nation := 1 ;
2730: LD_ADDR_OWVAR 21
2734: PUSH
2735: LD_INT 1
2737: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
2738: LD_INT 0
2740: PPUSH
2741: LD_INT 33
2743: PPUSH
2744: LD_INT 0
2746: PPUSH
2747: CALL_OW 380
// for i := 1 to 2 do
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: DOUBLE
2757: LD_INT 1
2759: DEC
2760: ST_TO_ADDR
2761: LD_INT 2
2763: PUSH
2764: FOR_TO
2765: IFFALSE 2830
// begin un := CreateHuman ;
2767: LD_ADDR_VAR 0 3
2771: PUSH
2772: CALL_OW 44
2776: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2777: LD_VAR 0 3
2781: PPUSH
2782: LD_INT 1
2784: PPUSH
2785: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
2789: LD_VAR 0 3
2793: PPUSH
2794: LD_INT 6
2796: PPUSH
2797: LD_INT 0
2799: PPUSH
2800: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
2804: LD_VAR 0 3
2808: PPUSH
2809: LD_INT 1
2811: PPUSH
2812: CALL 67112 0 2
// SetLives ( un , 300 ) ;
2816: LD_VAR 0 3
2820: PPUSH
2821: LD_INT 300
2823: PPUSH
2824: CALL_OW 234
// end ;
2828: GO 2764
2830: POP
2831: POP
// uc_side := 3 ;
2832: LD_ADDR_OWVAR 20
2836: PUSH
2837: LD_INT 3
2839: ST_TO_ADDR
// uc_nation := 3 ;
2840: LD_ADDR_OWVAR 21
2844: PUSH
2845: LD_INT 3
2847: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
2848: LD_INT 1
2850: PPUSH
2851: LD_INT 5
2853: PPUSH
2854: CALL_OW 381
// for i := 1 to 3 do
2858: LD_ADDR_VAR 0 2
2862: PUSH
2863: DOUBLE
2864: LD_INT 1
2866: DEC
2867: ST_TO_ADDR
2868: LD_INT 3
2870: PUSH
2871: FOR_TO
2872: IFFALSE 2945
// begin un := CreateHuman ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: CALL_OW 44
2883: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
2884: LD_ADDR_EXP 55
2888: PUSH
2889: LD_EXP 55
2893: PPUSH
2894: LD_VAR 0 3
2898: PPUSH
2899: CALL 63960 0 2
2903: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2904: LD_VAR 0 3
2908: PPUSH
2909: LD_INT 4
2911: PPUSH
2912: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
2916: LD_VAR 0 3
2920: PPUSH
2921: LD_INT 7
2923: PPUSH
2924: LD_INT 0
2926: PPUSH
2927: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
2931: LD_VAR 0 3
2935: PPUSH
2936: LD_INT 4
2938: PPUSH
2939: CALL 67112 0 2
// end ;
2943: GO 2871
2945: POP
2946: POP
// ruCommisar := CreateHuman ;
2947: LD_ADDR_EXP 56
2951: PUSH
2952: CALL_OW 44
2956: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
2957: LD_EXP 56
2961: PPUSH
2962: LD_INT 124
2964: PPUSH
2965: LD_INT 37
2967: PPUSH
2968: LD_INT 0
2970: PPUSH
2971: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
2975: LD_EXP 56
2979: PPUSH
2980: LD_INT 3
2982: PPUSH
2983: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
2987: LD_EXP 56
2991: PPUSH
2992: LD_INT 3
2994: PPUSH
2995: CALL 67112 0 2
// end ;
2999: LD_VAR 0 1
3003: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3004: LD_INT 0
3006: PPUSH
3007: PPUSH
3008: PPUSH
3009: PPUSH
// uc_side := 6 ;
3010: LD_ADDR_OWVAR 20
3014: PUSH
3015: LD_INT 6
3017: ST_TO_ADDR
// uc_nation := 3 ;
3018: LD_ADDR_OWVAR 21
3022: PUSH
3023: LD_INT 3
3025: ST_TO_ADDR
// ruPatrol := [ ] ;
3026: LD_ADDR_EXP 62
3030: PUSH
3031: EMPTY
3032: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3033: LD_ADDR_VAR 0 4
3037: PUSH
3038: LD_INT 26
3040: PUSH
3041: LD_INT 30
3043: PUSH
3044: LD_INT 39
3046: PUSH
3047: LD_INT 43
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: ST_TO_ADDR
// for i := 1 to spawn do
3056: LD_ADDR_VAR 0 2
3060: PUSH
3061: DOUBLE
3062: LD_INT 1
3064: DEC
3065: ST_TO_ADDR
3066: LD_VAR 0 4
3070: PUSH
3071: FOR_TO
3072: IFFALSE 3183
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3074: LD_INT 0
3076: PPUSH
3077: LD_INT 4
3079: PUSH
3080: LD_INT 5
3082: PUSH
3083: LD_INT 6
3085: PUSH
3086: LD_INT 7
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: LIST
3093: LIST
3094: PUSH
3095: LD_OWVAR 67
3099: ARRAY
3100: PPUSH
3101: CALL_OW 381
// un := CreateHuman ;
3105: LD_ADDR_VAR 0 3
3109: PUSH
3110: CALL_OW 44
3114: ST_TO_ADDR
// SetTag ( un , i ) ;
3115: LD_VAR 0 3
3119: PPUSH
3120: LD_VAR 0 2
3124: PPUSH
3125: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3129: LD_ADDR_EXP 62
3133: PUSH
3134: LD_EXP 62
3138: PPUSH
3139: LD_VAR 0 3
3143: PPUSH
3144: CALL 63960 0 2
3148: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3149: LD_VAR 0 3
3153: PPUSH
3154: LD_VAR 0 4
3158: PUSH
3159: LD_VAR 0 2
3163: ARRAY
3164: PPUSH
3165: LD_INT 0
3167: PPUSH
3168: CALL_OW 49
// ComHold ( un ) ;
3172: LD_VAR 0 3
3176: PPUSH
3177: CALL_OW 140
// end ;
3181: GO 3071
3183: POP
3184: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3185: LD_ADDR_VAR 0 4
3189: PUSH
3190: LD_INT 48
3192: PUSH
3193: LD_INT 49
3195: PUSH
3196: LD_INT 50
3198: PUSH
3199: LD_INT 51
3201: PUSH
3202: LD_INT 52
3204: PUSH
3205: LD_INT 53
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: ST_TO_ADDR
// for i := 1 to spawn do
3216: LD_ADDR_VAR 0 2
3220: PUSH
3221: DOUBLE
3222: LD_INT 1
3224: DEC
3225: ST_TO_ADDR
3226: LD_VAR 0 4
3230: PUSH
3231: FOR_TO
3232: IFFALSE 3341
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3234: LD_INT 0
3236: PPUSH
3237: LD_INT 4
3239: PUSH
3240: LD_INT 5
3242: PUSH
3243: LD_INT 6
3245: PUSH
3246: LD_INT 7
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: PUSH
3255: LD_OWVAR 67
3259: ARRAY
3260: PPUSH
3261: CALL_OW 381
// un := CreateHuman ;
3265: LD_ADDR_VAR 0 3
3269: PUSH
3270: CALL_OW 44
3274: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3275: LD_VAR 0 3
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3287: LD_ADDR_EXP 62
3291: PUSH
3292: LD_EXP 62
3296: PPUSH
3297: LD_VAR 0 3
3301: PPUSH
3302: CALL 63960 0 2
3306: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3307: LD_VAR 0 3
3311: PPUSH
3312: LD_VAR 0 4
3316: PUSH
3317: LD_VAR 0 2
3321: ARRAY
3322: PPUSH
3323: LD_INT 0
3325: PPUSH
3326: CALL_OW 49
// ComHold ( un ) ;
3330: LD_VAR 0 3
3334: PPUSH
3335: CALL_OW 140
// end ;
3339: GO 3231
3341: POP
3342: POP
// end ;
3343: LD_VAR 0 1
3347: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3348: LD_INT 0
3350: PPUSH
3351: PPUSH
3352: PPUSH
3353: PPUSH
// uc_side := 6 ;
3354: LD_ADDR_OWVAR 20
3358: PUSH
3359: LD_INT 6
3361: ST_TO_ADDR
// uc_nation := nation_russian ;
3362: LD_ADDR_OWVAR 21
3366: PUSH
3367: LD_INT 3
3369: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3370: LD_ADDR_VAR 0 4
3374: PUSH
3375: LD_INT 54
3377: PUSH
3378: LD_INT 55
3380: PUSH
3381: LD_INT 56
3383: PUSH
3384: LD_INT 57
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: ST_TO_ADDR
// for i := 1 to spawn do
3393: LD_ADDR_VAR 0 2
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_VAR 0 4
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3518
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3411: LD_INT 0
3413: PPUSH
3414: LD_INT 4
3416: PUSH
3417: LD_INT 5
3419: PUSH
3420: LD_INT 6
3422: PUSH
3423: LD_INT 7
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: PUSH
3432: LD_OWVAR 67
3436: ARRAY
3437: PPUSH
3438: CALL_OW 381
// un := CreateHuman ;
3442: LD_ADDR_VAR 0 3
3446: PUSH
3447: CALL_OW 44
3451: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3452: LD_VAR 0 3
3456: PPUSH
3457: LD_INT 0
3459: PPUSH
3460: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3464: LD_ADDR_EXP 62
3468: PUSH
3469: LD_EXP 62
3473: PPUSH
3474: LD_VAR 0 3
3478: PPUSH
3479: CALL 63960 0 2
3483: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3484: LD_VAR 0 3
3488: PPUSH
3489: LD_VAR 0 4
3493: PUSH
3494: LD_VAR 0 2
3498: ARRAY
3499: PPUSH
3500: LD_INT 0
3502: PPUSH
3503: CALL_OW 49
// ComHold ( un ) ;
3507: LD_VAR 0 3
3511: PPUSH
3512: CALL_OW 140
// end ;
3516: GO 3408
3518: POP
3519: POP
// end ; end_of_file
3520: LD_VAR 0 1
3524: RET
// export function Action ; var speaker , i , tmp ; begin
3525: LD_INT 0
3527: PPUSH
3528: PPUSH
3529: PPUSH
3530: PPUSH
// Video ( true ) ;
3531: LD_INT 1
3533: PPUSH
3534: CALL 63932 0 1
// hasNormalScene := Kaia or Givi ;
3538: LD_ADDR_EXP 5
3542: PUSH
3543: LD_EXP 42
3547: PUSH
3548: LD_EXP 38
3552: OR
3553: ST_TO_ADDR
// if hasNormalScene then
3554: LD_EXP 5
3558: IFFALSE 3799
// begin for i in americanSquad do
3560: LD_ADDR_VAR 0 3
3564: PUSH
3565: LD_EXP 49
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3617
// begin SetClass ( i , class_prison ) ;
3573: LD_VAR 0 3
3577: PPUSH
3578: LD_INT 33
3580: PPUSH
3581: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3585: LD_VAR 0 3
3589: PPUSH
3590: LD_INT 78
3592: PPUSH
3593: LD_INT 16
3595: PPUSH
3596: LD_INT 5
3598: PPUSH
3599: LD_INT 0
3601: PPUSH
3602: CALL_OW 50
// ComHold ( i ) ;
3606: LD_VAR 0 3
3610: PPUSH
3611: CALL_OW 140
// end ;
3615: GO 3570
3617: POP
3618: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3619: LD_ADDR_VAR 0 4
3623: PUSH
3624: LD_EXP 39
3628: PUSH
3629: LD_EXP 40
3633: PUSH
3634: LD_EXP 41
3638: PUSH
3639: LD_EXP 42
3643: PUSH
3644: LD_EXP 43
3648: PUSH
3649: LD_EXP 44
3653: PUSH
3654: LD_EXP 45
3658: PUSH
3659: LD_EXP 46
3663: PUSH
3664: LD_EXP 38
3668: PUSH
3669: LD_EXP 47
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: PUSH
3686: LD_EXP 48
3690: UNION
3691: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
3692: LD_EXP 37
3696: PPUSH
3697: LD_INT 33
3699: PPUSH
3700: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
3704: LD_EXP 37
3708: PPUSH
3709: LD_INT 117
3711: PPUSH
3712: LD_INT 24
3714: PPUSH
3715: LD_INT 3
3717: PPUSH
3718: LD_INT 0
3720: PPUSH
3721: CALL 66100 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
3725: LD_EXP 37
3729: PPUSH
3730: LD_INT 123
3732: PPUSH
3733: LD_INT 39
3735: PPUSH
3736: CALL_OW 118
// for i in tmp do
3740: LD_ADDR_VAR 0 3
3744: PUSH
3745: LD_VAR 0 4
3749: PUSH
3750: FOR_IN
3751: IFFALSE 3797
// begin SetClass ( i , class_prison ) ;
3753: LD_VAR 0 3
3757: PPUSH
3758: LD_INT 33
3760: PPUSH
3761: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
3765: LD_VAR 0 3
3769: PPUSH
3770: LD_INT 3
3772: PPUSH
3773: LD_INT 0
3775: PPUSH
3776: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
3780: LD_VAR 0 3
3784: PPUSH
3785: LD_INT 113
3787: PPUSH
3788: LD_INT 16
3790: PPUSH
3791: CALL_OW 118
// end ;
3795: GO 3750
3797: POP
3798: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
3799: LD_INT 124
3801: PPUSH
3802: LD_INT 39
3804: PPUSH
3805: CALL_OW 86
// PrepareDeadBodies ;
3809: CALL 2581 0 0
// PrepareFirstScene ;
3813: CALL 2717 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
3817: LD_INT 152
3819: PPUSH
3820: LD_INT 65
3822: PPUSH
3823: LD_INT 2
3825: PPUSH
3826: LD_INT 70
3828: NEG
3829: PPUSH
3830: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
3834: LD_INT 152
3836: PPUSH
3837: LD_INT 65
3839: PPUSH
3840: LD_INT 2
3842: PPUSH
3843: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
3847: LD_INT 122
3849: PPUSH
3850: LD_INT 40
3852: PPUSH
3853: LD_INT 2
3855: PPUSH
3856: LD_INT 8
3858: NEG
3859: PPUSH
3860: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
3864: LD_INT 124
3866: PPUSH
3867: LD_INT 37
3869: PPUSH
3870: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
3874: LD_EXP 56
3878: PPUSH
3879: LD_STRING DRum-Execution-1
3881: PPUSH
3882: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
3886: LD_EXP 56
3890: PPUSH
3891: LD_STRING DRum-Execution-2
3893: PPUSH
3894: CALL_OW 88
// wait ( 0 0$01 ) ;
3898: LD_INT 35
3900: PPUSH
3901: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
3905: LD_EXP 56
3909: PPUSH
3910: LD_STRING DRum-Execution-3
3912: PPUSH
3913: CALL_OW 88
// wait ( 0 0$1 ) ;
3917: LD_INT 35
3919: PPUSH
3920: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
3924: LD_EXP 56
3928: PPUSH
3929: LD_STRING DRum-Execution-4
3931: PPUSH
3932: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
3936: LD_EXP 55
3940: PUSH
3941: LD_INT 1
3943: ARRAY
3944: PPUSH
3945: LD_INT 122
3947: PPUSH
3948: LD_INT 39
3950: PPUSH
3951: CALL_OW 428
3955: PPUSH
3956: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
3960: LD_EXP 55
3964: PUSH
3965: LD_INT 2
3967: ARRAY
3968: PPUSH
3969: LD_INT 123
3971: PPUSH
3972: LD_INT 41
3974: PPUSH
3975: CALL_OW 428
3979: PPUSH
3980: CALL_OW 115
// AddComHold ( russianKillers ) ;
3984: LD_EXP 55
3988: PPUSH
3989: CALL_OW 200
// wait ( 0 0$1 ) ;
3993: LD_INT 35
3995: PPUSH
3996: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4000: LD_INT 122
4002: PPUSH
4003: LD_INT 40
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 331
// for i in russianKillers union ruCommisar do
4013: LD_ADDR_VAR 0 3
4017: PUSH
4018: LD_EXP 55
4022: PUSH
4023: LD_EXP 56
4027: UNION
4028: PUSH
4029: FOR_IN
4030: IFFALSE 4043
// RemoveUnit ( i ) ;
4032: LD_VAR 0 3
4036: PPUSH
4037: CALL_OW 64
4041: GO 4029
4043: POP
4044: POP
// if hasNormalScene then
4045: LD_EXP 5
4049: IFFALSE 4057
// ActionNormal else
4051: CALL 4066 0 0
4055: GO 4061
// ActionAdditional ;
4057: CALL 5891 0 0
// end ;
4061: LD_VAR 0 1
4065: RET
// function ActionNormal ; var i , tmp ; begin
4066: LD_INT 0
4068: PPUSH
4069: PPUSH
4070: PPUSH
// CenterNowOnUnits ( Heike ) ;
4071: LD_EXP 37
4075: PPUSH
4076: CALL_OW 87
// wait ( 0 0$1 ) ;
4080: LD_INT 35
4082: PPUSH
4083: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4087: LD_EXP 37
4091: PPUSH
4092: LD_INT 115
4094: PPUSH
4095: LD_INT 19
4097: PPUSH
4098: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4102: LD_EXP 37
4106: PPUSH
4107: LD_INT 113
4109: PPUSH
4110: LD_INT 16
4112: PPUSH
4113: CALL_OW 178
// wait ( 0 0$2 ) ;
4117: LD_INT 70
4119: PPUSH
4120: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4124: LD_EXP 37
4128: PPUSH
4129: LD_STRING DH-Conspiracy-1
4131: PPUSH
4132: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4136: LD_EXP 42
4140: PPUSH
4141: LD_STRING DK-Conspiracy-2
4143: PPUSH
4144: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4148: LD_EXP 38
4152: PPUSH
4153: LD_STRING DG-Conspiracy-3
4155: PPUSH
4156: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4160: LD_EXP 38
4164: PPUSH
4165: LD_STRING DG-Conspiracy-4
4167: PPUSH
4168: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4172: LD_EXP 37
4176: PPUSH
4177: LD_STRING DH-Conspiracy-5
4179: PPUSH
4180: CALL_OW 88
// if IsOk ( Kamil ) then
4184: LD_EXP 41
4188: PPUSH
4189: CALL_OW 302
4193: IFFALSE 4251
// begin hasVodka := true ;
4195: LD_ADDR_EXP 4
4199: PUSH
4200: LD_INT 1
4202: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4203: LD_EXP 41
4207: PPUSH
4208: LD_STRING DKam-Conspiracy-6
4210: PPUSH
4211: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4215: LD_EXP 41
4219: PPUSH
4220: LD_STRING DKam-Conspiracy-7
4222: PPUSH
4223: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4227: LD_EXP 41
4231: PPUSH
4232: LD_STRING DKam-Conspiracy-8
4234: PPUSH
4235: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4239: LD_EXP 41
4243: PPUSH
4244: LD_STRING DKam-Conspiracy-9
4246: PPUSH
4247: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4251: LD_EXP 43
4255: PPUSH
4256: CALL_OW 302
4260: IFFALSE 4441
// begin americanContact := true ;
4262: LD_ADDR_EXP 10
4266: PUSH
4267: LD_INT 1
4269: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4270: LD_STRING M1-american
4272: PPUSH
4273: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4277: LD_EXP 43
4281: PPUSH
4282: LD_STRING DS-Conspiracy-10
4284: PPUSH
4285: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4289: LD_EXP 44
4293: PPUSH
4294: LD_STRING DM-Conspiracy-11
4296: PPUSH
4297: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4301: LD_EXP 43
4305: PPUSH
4306: LD_STRING DS-Conspiracy-12
4308: PPUSH
4309: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4313: LD_INT 84
4315: PPUSH
4316: LD_INT 19
4318: PPUSH
4319: LD_INT 105
4321: PPUSH
4322: CALL 18432 0 3
// if johnnySaved then
4326: LD_EXP 3
4330: IFFALSE 4370
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4332: LD_EXP 43
4336: PPUSH
4337: LD_STRING DS-Conspiracy-13
4339: PPUSH
4340: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4344: LD_EXP 37
4348: PPUSH
4349: LD_STRING DH-Conspiracy-14
4351: PPUSH
4352: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
4356: LD_EXP 43
4360: PPUSH
4361: LD_STRING DH-Conspiracy-15
4363: PPUSH
4364: CALL_OW 88
// end else
4368: GO 4406
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4370: LD_EXP 43
4374: PPUSH
4375: LD_STRING DS-Conspiracy-a-13
4377: PPUSH
4378: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4382: LD_EXP 37
4386: PPUSH
4387: LD_STRING DH-Conspiracy-a-14
4389: PPUSH
4390: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-a-15 ) ;
4394: LD_EXP 43
4398: PPUSH
4399: LD_STRING DH-Conspiracy-a-15
4401: PPUSH
4402: CALL_OW 88
// end ; if IsOk ( Givi ) then
4406: LD_EXP 38
4410: PPUSH
4411: CALL_OW 302
4415: IFFALSE 4441
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4417: LD_EXP 38
4421: PPUSH
4422: LD_STRING DG-Conspiracy-a-16
4424: PPUSH
4425: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4429: LD_EXP 37
4433: PPUSH
4434: LD_STRING DH-Conspiracy-a-17
4436: PPUSH
4437: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4441: LD_EXP 37
4445: PPUSH
4446: LD_STRING DH-Conspiracy-16
4448: PPUSH
4449: CALL_OW 88
// if IsOk ( Givi ) then
4453: LD_EXP 38
4457: PPUSH
4458: CALL_OW 302
4462: IFFALSE 4734
// begin hasStimDrugs := true ;
4464: LD_ADDR_EXP 9
4468: PUSH
4469: LD_INT 1
4471: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4472: LD_STRING M1-drugs
4474: PPUSH
4475: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4479: LD_EXP 38
4483: PPUSH
4484: LD_STRING DG-Conspiracy-17
4486: PPUSH
4487: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4491: LD_INT 162
4493: PPUSH
4494: LD_INT 2
4496: PPUSH
4497: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4501: LD_INT 194
4503: PPUSH
4504: LD_INT 98
4506: PPUSH
4507: LD_INT 105
4509: PPUSH
4510: CALL 18432 0 3
// SetSide ( drugsLab , 3 ) ;
4514: LD_INT 162
4516: PPUSH
4517: LD_INT 3
4519: PPUSH
4520: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4524: LD_EXP 38
4528: PPUSH
4529: LD_STRING DG-Conspiracy-18
4531: PPUSH
4532: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4536: LD_EXP 38
4540: PPUSH
4541: LD_STRING DG-Conspiracy-19
4543: PPUSH
4544: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4548: LD_EXP 38
4552: PPUSH
4553: LD_STRING DG-Conspiracy-20
4555: PPUSH
4556: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4560: LD_EXP 37
4564: PPUSH
4565: LD_STRING DH-Conspiracy-21
4567: PPUSH
4568: CALL_OW 88
// if IsOk ( Kaia ) then
4572: LD_EXP 42
4576: PPUSH
4577: CALL_OW 302
4581: IFFALSE 4655
// begin hasExplosions := true ;
4583: LD_ADDR_EXP 6
4587: PUSH
4588: LD_INT 1
4590: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4591: LD_STRING M1-explosive
4593: PPUSH
4594: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4598: LD_EXP 42
4602: PPUSH
4603: LD_STRING DK-Conspiracy-22
4605: PPUSH
4606: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4610: LD_INT 73
4612: PPUSH
4613: LD_INT 2
4615: PPUSH
4616: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4620: LD_INT 170
4622: PPUSH
4623: LD_INT 104
4625: PPUSH
4626: LD_INT 105
4628: PPUSH
4629: CALL 18432 0 3
// SetSide ( barExplosion , 3 ) ;
4633: LD_INT 73
4635: PPUSH
4636: LD_INT 3
4638: PPUSH
4639: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4643: LD_EXP 42
4647: PPUSH
4648: LD_STRING DK-Conspiracy-23
4650: PPUSH
4651: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4655: LD_EXP 45
4659: PPUSH
4660: CALL_OW 302
4664: IFFALSE 4734
// begin hasExplosionsInFactory := true ;
4666: LD_ADDR_EXP 7
4670: PUSH
4671: LD_INT 1
4673: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4674: LD_EXP 45
4678: PPUSH
4679: LD_STRING DO-Conspiracy-24
4681: PPUSH
4682: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4686: LD_INT 175
4688: PPUSH
4689: LD_INT 54
4691: PPUSH
4692: LD_INT 70
4694: PPUSH
4695: CALL 18432 0 3
// if IsOk ( Markov ) then
4699: LD_EXP 44
4703: PPUSH
4704: CALL_OW 302
4708: IFFALSE 4734
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
4710: LD_EXP 44
4714: PPUSH
4715: LD_STRING DMar-Conspiracy-25
4717: PPUSH
4718: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
4722: LD_EXP 44
4726: PPUSH
4727: LD_STRING DMar-Conspiracy-26
4729: PPUSH
4730: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
4734: LD_EXP 46
4738: PPUSH
4739: CALL_OW 302
4743: PUSH
4744: LD_EXP 42
4748: PPUSH
4749: CALL_OW 302
4753: AND
4754: IFFALSE 5214
// begin hasWeapons := true ;
4756: LD_ADDR_EXP 19
4760: PUSH
4761: LD_INT 1
4763: ST_TO_ADDR
// hasRevolver := true ;
4764: LD_ADDR_EXP 8
4768: PUSH
4769: LD_INT 1
4771: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
4772: LD_STRING M1-weapons
4774: PPUSH
4775: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
4779: LD_EXP 46
4783: PPUSH
4784: LD_STRING DKs-Conspiracy-27
4786: PPUSH
4787: CALL_OW 88
// if IsOk ( Givi ) then
4791: LD_EXP 38
4795: PPUSH
4796: CALL_OW 302
4800: IFFALSE 4816
// Say ( Givi , DG-Conspiracy-28 ) else
4802: LD_EXP 38
4806: PPUSH
4807: LD_STRING DG-Conspiracy-28
4809: PPUSH
4810: CALL_OW 88
4814: GO 4881
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
4816: LD_EXP 48
4820: PPUSH
4821: LD_INT 26
4823: PUSH
4824: LD_INT 1
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PPUSH
4831: CALL_OW 72
4835: PUSH
4836: LD_INT 1
4838: ARRAY
4839: PPUSH
4840: LD_STRING DArm-Conspiracy-a-28
4842: PPUSH
4843: CALL_OW 88
4847: NOT
4848: IFFALSE 4881
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
4850: LD_EXP 48
4854: PPUSH
4855: LD_INT 26
4857: PUSH
4858: LD_INT 2
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PPUSH
4865: CALL_OW 72
4869: PUSH
4870: LD_INT 1
4872: ARRAY
4873: PPUSH
4874: LD_STRING DArf-Conspiracy-a-28
4876: PPUSH
4877: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
4881: LD_EXP 46
4885: PPUSH
4886: LD_STRING DKs-Conspiracy-29
4888: PPUSH
4889: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
4893: LD_INT 192
4895: PPUSH
4896: LD_INT 122
4898: PPUSH
4899: LD_INT 105
4901: PPUSH
4902: CALL 18432 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
4906: LD_EXP 46
4910: PPUSH
4911: LD_STRING DKs-Conspiracy-30
4913: PPUSH
4914: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
4918: LD_EXP 42
4922: PPUSH
4923: LD_STRING DK-Conspiracy-31
4925: PPUSH
4926: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
4930: LD_EXP 44
4934: PPUSH
4935: LD_STRING DMar-Conspiracy-33
4937: PPUSH
4938: CALL_OW 88
4942: NOT
4943: PUSH
4944: LD_EXP 48
4948: AND
4949: IFFALSE 5016
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
4951: LD_EXP 48
4955: PPUSH
4956: LD_INT 26
4958: PUSH
4959: LD_INT 1
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PPUSH
4966: CALL_OW 72
4970: PUSH
4971: LD_INT 1
4973: ARRAY
4974: PPUSH
4975: LD_STRING DArm-Conspiracy-a-34
4977: PPUSH
4978: CALL_OW 88
4982: NOT
4983: IFFALSE 5016
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
4985: LD_EXP 48
4989: PPUSH
4990: LD_INT 26
4992: PUSH
4993: LD_INT 2
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: PPUSH
5000: CALL_OW 72
5004: PUSH
5005: LD_INT 1
5007: ARRAY
5008: PPUSH
5009: LD_STRING DArf-Conspiracy-a-34
5011: PPUSH
5012: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5016: LD_EXP 42
5020: PPUSH
5021: LD_STRING DK-Conspiracy-34
5023: PPUSH
5024: CALL_OW 88
// if IsOk ( Markov ) then
5028: LD_EXP 44
5032: PPUSH
5033: CALL_OW 302
5037: IFFALSE 5122
// begin hasSniperRifle := true ;
5039: LD_ADDR_EXP 11
5043: PUSH
5044: LD_INT 1
5046: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5047: LD_EXP 44
5051: PPUSH
5052: LD_STRING DMar-Conspiracy-35
5054: PPUSH
5055: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5059: LD_EXP 42
5063: PPUSH
5064: LD_STRING DK-Conspiracy-36
5066: PPUSH
5067: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5071: LD_EXP 44
5075: PPUSH
5076: LD_STRING DMar-Conspiracy-37
5078: PPUSH
5079: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5083: LD_EXP 44
5087: PPUSH
5088: LD_STRING DMar-Conspiracy-38
5090: PPUSH
5091: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5095: LD_INT 137
5097: PPUSH
5098: LD_INT 98
5100: PPUSH
5101: LD_INT 105
5103: PPUSH
5104: CALL 18432 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5108: LD_EXP 44
5112: PPUSH
5113: LD_STRING DMar-Conspiracy-39
5115: PPUSH
5116: CALL_OW 88
// end else
5120: GO 5214
// if heikeSecondSquad then
5122: LD_EXP 48
5126: IFFALSE 5214
// begin hasSniperRifle := true ;
5128: LD_ADDR_EXP 11
5132: PUSH
5133: LD_INT 1
5135: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5136: LD_INT 137
5138: PPUSH
5139: LD_INT 98
5141: PPUSH
5142: LD_INT 105
5144: PPUSH
5145: CALL 18432 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5149: LD_EXP 48
5153: PPUSH
5154: LD_INT 26
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: PPUSH
5164: CALL_OW 72
5168: PUSH
5169: LD_INT 1
5171: ARRAY
5172: PPUSH
5173: LD_STRING DArm-Conspiracy-a-35
5175: PPUSH
5176: CALL_OW 88
5180: NOT
5181: IFFALSE 5214
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5183: LD_EXP 48
5187: PPUSH
5188: LD_INT 26
5190: PUSH
5191: LD_INT 2
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PPUSH
5198: CALL_OW 72
5202: PUSH
5203: LD_INT 1
5205: ARRAY
5206: PPUSH
5207: LD_STRING DArf-Conspiracy-a-35
5209: PPUSH
5210: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5214: LD_EXP 37
5218: PPUSH
5219: LD_STRING DH-Conspiracy-40
5221: PPUSH
5222: CALL_OW 88
// if IsOk ( Mike ) then
5226: LD_EXP 39
5230: PPUSH
5231: CALL_OW 302
5235: IFFALSE 5294
// begin hasScout := true ;
5237: LD_ADDR_EXP 12
5241: PUSH
5242: LD_INT 1
5244: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5245: LD_EXP 39
5249: PPUSH
5250: LD_STRING DM-Conspiracy-41
5252: PPUSH
5253: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5257: LD_EXP 39
5261: PPUSH
5262: LD_STRING DM-Conspiracy-42
5264: PPUSH
5265: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5269: LD_INT 73
5271: PPUSH
5272: LD_INT 102
5274: PPUSH
5275: LD_INT 105
5277: PPUSH
5278: CALL 18432 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5282: LD_EXP 39
5286: PPUSH
5287: LD_STRING DM-Conspiracy-43
5289: PPUSH
5290: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5294: LD_EXP 4
5298: PUSH
5299: LD_EXP 42
5303: PPUSH
5304: CALL_OW 302
5308: AND
5309: PUSH
5310: LD_EXP 46
5314: PPUSH
5315: CALL_OW 302
5319: AND
5320: IFFALSE 5366
// begin hasMethanol := true ;
5322: LD_ADDR_EXP 13
5326: PUSH
5327: LD_INT 1
5329: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5330: LD_EXP 42
5334: PPUSH
5335: LD_STRING DK-Conspiracy-44
5337: PPUSH
5338: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5342: LD_EXP 42
5346: PPUSH
5347: LD_STRING DK-Conspiracy-45
5349: PPUSH
5350: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5354: LD_EXP 41
5358: PPUSH
5359: LD_STRING DKam-Conspiracy-46
5361: PPUSH
5362: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5366: LD_EXP 37
5370: PPUSH
5371: LD_STRING DH-Conspiracy-47
5373: PPUSH
5374: CALL_OW 88
// wait ( 0 0$1 ) ;
5378: LD_INT 35
5380: PPUSH
5381: CALL_OW 67
// your_side := 8 ;
5385: LD_ADDR_OWVAR 2
5389: PUSH
5390: LD_INT 8
5392: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5393: LD_INT 1
5395: PPUSH
5396: LD_INT 1
5398: PPUSH
5399: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5403: LD_ADDR_VAR 0 2
5407: PUSH
5408: LD_INT 2
5410: PUSH
5411: LD_INT 22
5413: PUSH
5414: LD_INT 2
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PUSH
5421: LD_INT 22
5423: PUSH
5424: LD_INT 4
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: LIST
5435: PUSH
5436: LD_INT 21
5438: PUSH
5439: LD_INT 1
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: PPUSH
5450: CALL_OW 69
5454: PUSH
5455: FOR_IN
5456: IFFALSE 5469
// RemoveUnit ( i ) ;
5458: LD_VAR 0 2
5462: PPUSH
5463: CALL_OW 64
5467: GO 5455
5469: POP
5470: POP
// wait ( 0 0$0.3 ) ;
5471: LD_INT 10
5473: PPUSH
5474: CALL_OW 67
// Query ( StartInfo1 ) ;
5478: LD_STRING StartInfo1
5480: PPUSH
5481: CALL_OW 97
// wait ( 0 0$1 ) ;
5485: LD_INT 35
5487: PPUSH
5488: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5492: LD_STRING colors_night.txt
5494: PPUSH
5495: CALL_OW 544
// Query ( StartInfo2 ) ;
5499: LD_STRING StartInfo2
5501: PPUSH
5502: CALL_OW 97
// PrepareGame ;
5506: CALL 965 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5510: LD_INT 152
5512: PPUSH
5513: LD_INT 65
5515: PPUSH
5516: LD_INT 2
5518: PPUSH
5519: LD_INT 70
5521: NEG
5522: PPUSH
5523: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5527: LD_INT 152
5529: PPUSH
5530: LD_INT 65
5532: PPUSH
5533: LD_INT 2
5535: PPUSH
5536: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5540: LD_INT 133
5542: PPUSH
5543: LD_INT 76
5545: PPUSH
5546: LD_INT 2
5548: PPUSH
5549: LD_INT 6
5551: NEG
5552: PPUSH
5553: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5557: LD_INT 152
5559: PPUSH
5560: LD_INT 65
5562: PPUSH
5563: LD_INT 8
5565: PPUSH
5566: LD_INT 70
5568: NEG
5569: PPUSH
5570: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5574: LD_INT 152
5576: PPUSH
5577: LD_INT 65
5579: PPUSH
5580: LD_INT 8
5582: PPUSH
5583: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5587: LD_INT 133
5589: PPUSH
5590: LD_INT 76
5592: PPUSH
5593: LD_INT 8
5595: PPUSH
5596: LD_INT 6
5598: NEG
5599: PPUSH
5600: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5604: LD_INT 23
5606: PPUSH
5607: CALL_OW 87
// dialogue_skipped := false ;
5611: LD_ADDR_OWVAR 59
5615: PUSH
5616: LD_INT 0
5618: ST_TO_ADDR
// InitRuPatrols ;
5619: CALL 3004 0 0
// Say ( Heike , DH-Escape-1 ) ;
5623: LD_EXP 37
5627: PPUSH
5628: LD_STRING DH-Escape-1
5630: PPUSH
5631: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5635: LD_EXP 37
5639: PPUSH
5640: LD_STRING DH-Escape-2
5642: PPUSH
5643: CALL_OW 88
// if not debug then
5647: LD_EXP 1
5651: NOT
5652: IFFALSE 5658
// StartLockerMinigame ;
5654: CALL 18943 0 0
// wait ( 0 0$1 ) ;
5658: LD_INT 35
5660: PPUSH
5661: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5665: LD_EXP 37
5669: PPUSH
5670: LD_STRING DH-Escape-4
5672: PPUSH
5673: CALL_OW 88
// wait ( 0 0$3 ) ;
5677: LD_INT 105
5679: PPUSH
5680: CALL_OW 67
// your_side := 2 ;
5684: LD_ADDR_OWVAR 2
5688: PUSH
5689: LD_INT 2
5691: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5692: LD_EXP 37
5696: PPUSH
5697: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5701: LD_INT 152
5703: PPUSH
5704: LD_INT 65
5706: PPUSH
5707: LD_INT 2
5709: PPUSH
5710: LD_INT 70
5712: NEG
5713: PPUSH
5714: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5718: LD_INT 152
5720: PPUSH
5721: LD_INT 65
5723: PPUSH
5724: LD_INT 2
5726: PPUSH
5727: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
5731: LD_INT 133
5733: PPUSH
5734: LD_INT 76
5736: PPUSH
5737: LD_INT 8
5739: PPUSH
5740: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
5744: LD_EXP 37
5748: PPUSH
5749: LD_INT 128
5751: PPUSH
5752: LD_INT 64
5754: PPUSH
5755: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5759: LD_INT 35
5761: PPUSH
5762: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
5766: LD_EXP 37
5770: PPUSH
5771: LD_INT 128
5773: PPUSH
5774: LD_INT 64
5776: PPUSH
5777: CALL_OW 307
5781: IFFALSE 5759
// ComHold ( Heike ) ;
5783: LD_EXP 37
5787: PPUSH
5788: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
5792: LD_EXP 37
5796: PPUSH
5797: LD_STRING DH-Start-1
5799: PPUSH
5800: CALL_OW 88
// if not americanContact then
5804: LD_EXP 10
5808: NOT
5809: IFFALSE 5825
// Say ( Heike , DH-Start-c-2 ) else
5811: LD_EXP 37
5815: PPUSH
5816: LD_STRING DH-Start-c-2
5818: PPUSH
5819: CALL_OW 88
5823: GO 5857
// if johnnySaved then
5825: LD_EXP 3
5829: IFFALSE 5845
// Say ( Heike , DH-Start-a-2 ) else
5831: LD_EXP 37
5835: PPUSH
5836: LD_STRING DH-Start-a-2
5838: PPUSH
5839: CALL_OW 88
5843: GO 5857
// Say ( Heike , DH-Start-b-2 ) ;
5845: LD_EXP 37
5849: PPUSH
5850: LD_STRING DH-Start-b-2
5852: PPUSH
5853: CALL_OW 88
// Video ( false ) ;
5857: LD_INT 0
5859: PPUSH
5860: CALL 63932 0 1
// tick := 0 ;
5864: LD_ADDR_OWVAR 1
5868: PUSH
5869: LD_INT 0
5871: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
5872: LD_STRING M1
5874: PPUSH
5875: CALL_OW 337
// enable ( gameStartEvent ) ;
5879: LD_INT 2
5881: ENABLE_MARKED
// SaveForQuickRestart ;
5882: CALL_OW 22
// end ;
5886: LD_VAR 0 1
5890: RET
// function ActionAdditional ; var i , un , tmp ; begin
5891: LD_INT 0
5893: PPUSH
5894: PPUSH
5895: PPUSH
5896: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
5897: LD_INT 115
5899: PPUSH
5900: LD_INT 27
5902: PPUSH
5903: LD_INT 2
5905: PPUSH
5906: LD_INT 6
5908: NEG
5909: PPUSH
5910: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
5914: LD_EXP 37
5918: PPUSH
5919: LD_INT 115
5921: PPUSH
5922: LD_INT 27
5924: PPUSH
5925: CALL_OW 428
5929: PPUSH
5930: CALL_OW 52
// SetClass ( Heike , 33 ) ;
5934: LD_EXP 37
5938: PPUSH
5939: LD_INT 33
5941: PPUSH
5942: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
5946: LD_INT 124
5948: PPUSH
5949: LD_INT 39
5951: PPUSH
5952: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
5956: LD_EXP 37
5960: PPUSH
5961: LD_STRING DH-Fail-1
5963: PPUSH
5964: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
5968: LD_INT 3
5970: PPUSH
5971: CALL_OW 427
// ComExit ( Heike ) ;
5975: LD_EXP 37
5979: PPUSH
5980: CALL 64358 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
5984: LD_EXP 37
5988: PPUSH
5989: LD_INT 109
5991: PPUSH
5992: LD_INT 33
5994: PPUSH
5995: CALL_OW 171
// AddComHold ( Heike ) ;
5999: LD_EXP 37
6003: PPUSH
6004: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6008: LD_INT 115
6010: PPUSH
6011: LD_INT 27
6013: PPUSH
6014: LD_INT 2
6016: PPUSH
6017: CALL_OW 331
// wait ( 0 0$2 ) ;
6021: LD_INT 70
6023: PPUSH
6024: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6028: LD_INT 35
6030: PPUSH
6031: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6035: LD_EXP 37
6039: PPUSH
6040: LD_INT 109
6042: PPUSH
6043: LD_INT 33
6045: PPUSH
6046: CALL_OW 307
6050: IFFALSE 6028
// Say ( Heike , DH-Fail-2 ) ;
6052: LD_EXP 37
6056: PPUSH
6057: LD_STRING DH-Fail-2
6059: PPUSH
6060: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6064: LD_EXP 37
6068: PPUSH
6069: LD_INT 111
6071: PPUSH
6072: LD_INT 48
6074: PPUSH
6075: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6079: LD_INT 35
6081: PPUSH
6082: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6086: LD_EXP 37
6090: PPUSH
6091: LD_INT 111
6093: PPUSH
6094: LD_INT 48
6096: PPUSH
6097: CALL_OW 297
6101: PUSH
6102: LD_INT 4
6104: LESS
6105: IFFALSE 6079
// AddComMoveXY ( Heike , 106 , 72 ) ;
6107: LD_EXP 37
6111: PPUSH
6112: LD_INT 106
6114: PPUSH
6115: LD_INT 72
6117: PPUSH
6118: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6122: LD_EXP 37
6126: PPUSH
6127: LD_INT 103
6129: PPUSH
6130: LD_INT 80
6132: PPUSH
6133: CALL_OW 171
// uc_side := 3 ;
6137: LD_ADDR_OWVAR 20
6141: PUSH
6142: LD_INT 3
6144: ST_TO_ADDR
// uc_nation := 3 ;
6145: LD_ADDR_OWVAR 21
6149: PUSH
6150: LD_INT 3
6152: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6153: LD_INT 1
6155: PPUSH
6156: LD_INT 1
6158: PPUSH
6159: LD_INT 6
6161: PPUSH
6162: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6166: LD_ADDR_OWVAR 29
6170: PUSH
6171: LD_INT 12
6173: PUSH
6174: LD_INT 12
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: ST_TO_ADDR
// un := CreateHuman ;
6181: LD_ADDR_VAR 0 3
6185: PUSH
6186: CALL_OW 44
6190: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6191: LD_VAR 0 3
6195: PPUSH
6196: LD_INT 134
6198: PPUSH
6199: LD_INT 52
6201: PPUSH
6202: LD_INT 4
6204: PPUSH
6205: LD_INT 0
6207: PPUSH
6208: CALL 66100 0 5
// ComTurnUnit ( un , Heike ) ;
6212: LD_VAR 0 3
6216: PPUSH
6217: LD_EXP 37
6221: PPUSH
6222: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6226: LD_VAR 0 3
6230: PPUSH
6231: LD_EXP 37
6235: PPUSH
6236: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
6240: LD_VAR 0 3
6244: PPUSH
6245: LD_STRING DRum-Fail-3
6247: PPUSH
6248: CALL_OW 88
// for i := 1 to 3 do
6252: LD_ADDR_VAR 0 2
6256: PUSH
6257: DOUBLE
6258: LD_INT 1
6260: DEC
6261: ST_TO_ADDR
6262: LD_INT 3
6264: PUSH
6265: FOR_TO
6266: IFFALSE 6339
// begin PrepareSoldier ( false , 10 ) ;
6268: LD_INT 0
6270: PPUSH
6271: LD_INT 10
6273: PPUSH
6274: CALL_OW 381
// un := CreateHuman ;
6278: LD_ADDR_VAR 0 3
6282: PUSH
6283: CALL_OW 44
6287: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6288: LD_ADDR_VAR 0 4
6292: PUSH
6293: LD_VAR 0 4
6297: PPUSH
6298: LD_VAR 0 3
6302: PPUSH
6303: CALL 63960 0 2
6307: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6308: LD_VAR 0 3
6312: PPUSH
6313: LD_INT 8
6315: PPUSH
6316: LD_INT 0
6318: PPUSH
6319: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6323: LD_VAR 0 3
6327: PPUSH
6328: LD_EXP 37
6332: PPUSH
6333: CALL_OW 119
// end ;
6337: GO 6265
6339: POP
6340: POP
// repeat wait ( 0 0$1 ) ;
6341: LD_INT 35
6343: PPUSH
6344: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6348: LD_VAR 0 4
6352: PPUSH
6353: LD_INT 101
6355: PUSH
6356: LD_INT 2
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: PPUSH
6363: CALL_OW 72
6367: PUSH
6368: LD_INT 1
6370: GREATER
6371: IFFALSE 6341
// wait ( 0 0$1 ) ;
6373: LD_INT 35
6375: PPUSH
6376: CALL_OW 67
// DialogueOn ;
6380: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6384: LD_EXP 37
6388: PPUSH
6389: LD_STRING DH-Fail-4
6391: PPUSH
6392: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6396: LD_EXP 37
6400: PPUSH
6401: LD_STRING DH-Fail-5
6403: PPUSH
6404: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6408: LD_EXP 37
6412: PPUSH
6413: LD_STRING DH-Fail-6
6415: PPUSH
6416: CALL_OW 88
// DialogueOff ;
6420: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6424: LD_VAR 0 4
6428: PPUSH
6429: LD_EXP 37
6433: PPUSH
6434: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6438: LD_INT 35
6440: PPUSH
6441: CALL_OW 67
// until IsDying ( Heike ) ;
6445: LD_EXP 37
6449: PPUSH
6450: CALL_OW 303
6454: IFFALSE 6438
// KillUnit ( Heike ) ;
6456: LD_EXP 37
6460: PPUSH
6461: CALL_OW 66
// wait ( 0 0$4 ) ;
6465: LD_INT 140
6467: PPUSH
6468: CALL_OW 67
// ResetFog ;
6472: CALL_OW 335
// DialogueOn ;
6476: CALL_OW 6
// dwait ( 0 0$1 ) ;
6480: LD_INT 35
6482: PPUSH
6483: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6487: LD_ADDR_EXP 37
6491: PUSH
6492: LD_STRING Heike
6494: PPUSH
6495: LD_EXP 1
6499: NOT
6500: PPUSH
6501: LD_EXP 2
6505: PPUSH
6506: CALL 26511 0 3
6510: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6511: LD_EXP 37
6515: PPUSH
6516: LD_STRING DH-Fail-7
6518: PPUSH
6519: CALL_OW 89
// DialogueOff ;
6523: CALL_OW 7
// YouLost ( Fail ) ;
6527: LD_STRING Fail
6529: PPUSH
6530: CALL_OW 104
// end ;
6534: LD_VAR 0 1
6538: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6539: LD_INT 2
6541: PPUSH
6542: LD_INT 173
6544: PPUSH
6545: LD_INT 29
6547: PPUSH
6548: CALL_OW 293
6552: PUSH
6553: LD_EXP 37
6557: PPUSH
6558: LD_INT 173
6560: PPUSH
6561: LD_INT 29
6563: PPUSH
6564: CALL_OW 297
6568: PUSH
6569: LD_INT 6
6571: LESS
6572: AND
6573: IFFALSE 6590
6575: GO 6577
6577: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6578: LD_EXP 37
6582: PPUSH
6583: LD_STRING DH-EastRoad
6585: PPUSH
6586: CALL_OW 88
6590: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6591: LD_INT 2
6593: PPUSH
6594: LD_INT 149
6596: PPUSH
6597: LD_INT 3
6599: PPUSH
6600: CALL_OW 293
6604: PUSH
6605: LD_EXP 37
6609: PPUSH
6610: LD_INT 149
6612: PPUSH
6613: LD_INT 3
6615: PPUSH
6616: CALL_OW 297
6620: PUSH
6621: LD_INT 6
6623: LESS
6624: AND
6625: IFFALSE 6642
6627: GO 6629
6629: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6630: LD_EXP 37
6634: PPUSH
6635: LD_STRING DH-EastRoad
6637: PPUSH
6638: CALL_OW 88
6642: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6643: LD_INT 2
6645: PPUSH
6646: LD_INT 217
6648: PPUSH
6649: LD_INT 120
6651: PPUSH
6652: CALL_OW 293
6656: PUSH
6657: LD_EXP 37
6661: PPUSH
6662: LD_INT 217
6664: PPUSH
6665: LD_INT 120
6667: PPUSH
6668: CALL_OW 297
6672: PUSH
6673: LD_INT 6
6675: LESS
6676: AND
6677: IFFALSE 6694
6679: GO 6681
6681: DISABLE
// Say ( Heike , DH-EastEnd ) ;
6682: LD_EXP 37
6686: PPUSH
6687: LD_STRING DH-EastEnd
6689: PPUSH
6690: CALL_OW 88
6694: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
6695: LD_EXP 37
6699: PPUSH
6700: LD_INT 11
6702: PPUSH
6703: CALL_OW 308
6707: IFFALSE 6745
6709: GO 6711
6711: DISABLE
// begin if not heikeSquad then
6712: LD_EXP 14
6716: NOT
6717: IFFALSE 6733
// Say ( Heike , DH-Hill ) else
6719: LD_EXP 37
6723: PPUSH
6724: LD_STRING DH-Hill
6726: PPUSH
6727: CALL_OW 88
6731: GO 6745
// Say ( Heike , DH-Hill-a ) ;
6733: LD_EXP 37
6737: PPUSH
6738: LD_STRING DH-Hill-a
6740: PPUSH
6741: CALL_OW 88
// end ;
6745: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
6746: LD_EXP 37
6750: PPUSH
6751: LD_INT 12
6753: PPUSH
6754: CALL_OW 308
6758: IFFALSE 6940
6760: GO 6762
6762: DISABLE
6763: LD_INT 0
6765: PPUSH
6766: PPUSH
6767: PPUSH
// begin DialogueOn ;
6768: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
6772: LD_EXP 37
6776: PPUSH
6777: CALL_OW 87
// x := GetX ( Heike ) ;
6781: LD_ADDR_VAR 0 1
6785: PUSH
6786: LD_EXP 37
6790: PPUSH
6791: CALL_OW 250
6795: ST_TO_ADDR
// y := GetY ( Heike ) ;
6796: LD_ADDR_VAR 0 2
6800: PUSH
6801: LD_EXP 37
6805: PPUSH
6806: CALL_OW 251
6810: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
6811: LD_VAR 0 1
6815: PPUSH
6816: LD_VAR 0 2
6820: PPUSH
6821: LD_INT 2
6823: PPUSH
6824: LD_INT 12
6826: NEG
6827: PPUSH
6828: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
6832: LD_VAR 0 1
6836: PPUSH
6837: LD_VAR 0 2
6841: PPUSH
6842: LD_INT 2
6844: PPUSH
6845: CALL_OW 331
// if FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6849: LD_INT 2
6851: PUSH
6852: LD_INT 30
6854: PUSH
6855: LD_INT 32
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PUSH
6862: LD_INT 30
6864: PUSH
6865: LD_INT 33
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: PPUSH
6877: CALL_OW 69
6881: IFFALSE 6893
// v := 3 else
6883: LD_ADDR_VAR 0 3
6887: PUSH
6888: LD_INT 3
6890: ST_TO_ADDR
6891: GO 6901
// v := 2 ;
6893: LD_ADDR_VAR 0 3
6897: PUSH
6898: LD_INT 2
6900: ST_TO_ADDR
// disable ;
6901: DISABLE
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
6902: LD_EXP 37
6906: PPUSH
6907: LD_STRING DH-Outpost-
6909: PUSH
6910: LD_INT 1
6912: PPUSH
6913: LD_VAR 0 3
6917: PPUSH
6918: CALL_OW 12
6922: STR
6923: PPUSH
6924: CALL_OW 88
// DialogueOff ;
6928: CALL_OW 7
// wait ( 0 0$10 ) ;
6932: LD_INT 350
6934: PPUSH
6935: CALL_OW 67
// enable ;
6939: ENABLE
// end ;
6940: PPOPN 3
6942: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
6943: LD_EXP 37
6947: PPUSH
6948: LD_INT 19
6950: PPUSH
6951: CALL_OW 308
6955: PUSH
6956: LD_EXP 22
6960: NOT
6961: AND
6962: PUSH
6963: LD_EXP 30
6967: NOT
6968: AND
6969: IFFALSE 7042
6971: GO 6973
6973: DISABLE
// begin DialogueOn ;
6974: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
6978: LD_INT 152
6980: PPUSH
6981: LD_INT 115
6983: PPUSH
6984: LD_INT 2
6986: PPUSH
6987: LD_INT 16
6989: NEG
6990: PPUSH
6991: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
6995: LD_INT 152
6997: PPUSH
6998: LD_INT 115
7000: PPUSH
7001: LD_INT 2
7003: PPUSH
7004: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7008: LD_INT 152
7010: PPUSH
7011: LD_INT 115
7013: PPUSH
7014: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7018: LD_EXP 37
7022: PPUSH
7023: LD_STRING DH-Stealth-1
7025: PPUSH
7026: CALL_OW 88
// DialogueOff ;
7030: CALL_OW 7
// adminAreaDiscovered := true ;
7034: LD_ADDR_EXP 22
7038: PUSH
7039: LD_INT 1
7041: ST_TO_ADDR
// end ;
7042: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7043: LD_INT 2
7045: PPUSH
7046: LD_EXP 38
7050: PPUSH
7051: CALL_OW 292
7055: PUSH
7056: LD_EXP 37
7060: PPUSH
7061: LD_EXP 38
7065: PPUSH
7066: CALL_OW 296
7070: PUSH
7071: LD_INT 6
7073: LESS
7074: AND
7075: PUSH
7076: LD_EXP 17
7080: NOT
7081: AND
7082: PUSH
7083: LD_EXP 30
7087: NOT
7088: AND
7089: IFFALSE 7195
7091: GO 7093
7093: DISABLE
// begin DialogueOn ;
7094: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7098: LD_EXP 38
7102: PPUSH
7103: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7107: LD_EXP 38
7111: PPUSH
7112: LD_EXP 37
7116: PPUSH
7117: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7121: LD_EXP 37
7125: PPUSH
7126: LD_EXP 38
7130: PPUSH
7131: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7135: LD_EXP 37
7139: PPUSH
7140: LD_STRING DH-Givi-1
7142: PPUSH
7143: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7147: LD_EXP 38
7151: PPUSH
7152: LD_STRING DG-Givi-2
7154: PPUSH
7155: CALL_OW 88
// DialogueOff ;
7159: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7163: LD_EXP 38
7167: PPUSH
7168: LD_INT 2
7170: PPUSH
7171: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7175: LD_ADDR_EXP 14
7179: PUSH
7180: LD_EXP 14
7184: PPUSH
7185: LD_EXP 38
7189: PPUSH
7190: CALL 63960 0 2
7194: ST_TO_ADDR
// end ;
7195: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7196: LD_INT 2
7198: PPUSH
7199: LD_EXP 43
7203: PPUSH
7204: CALL_OW 292
7208: PUSH
7209: LD_EXP 37
7213: PPUSH
7214: LD_EXP 43
7218: PPUSH
7219: CALL_OW 296
7223: PUSH
7224: LD_INT 6
7226: LESS
7227: AND
7228: PUSH
7229: LD_EXP 17
7233: NOT
7234: AND
7235: PUSH
7236: LD_EXP 30
7240: NOT
7241: AND
7242: IFFALSE 7348
7244: GO 7246
7246: DISABLE
// begin DialogueOn ;
7247: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7251: LD_EXP 43
7255: PPUSH
7256: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7260: LD_EXP 43
7264: PPUSH
7265: LD_EXP 37
7269: PPUSH
7270: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7274: LD_EXP 37
7278: PPUSH
7279: LD_EXP 43
7283: PPUSH
7284: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7288: LD_EXP 37
7292: PPUSH
7293: LD_STRING DH-Sophia-1
7295: PPUSH
7296: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7300: LD_EXP 43
7304: PPUSH
7305: LD_STRING DS-Sophia-2
7307: PPUSH
7308: CALL_OW 88
// DialogueOff ;
7312: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7316: LD_EXP 43
7320: PPUSH
7321: LD_INT 2
7323: PPUSH
7324: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7328: LD_ADDR_EXP 14
7332: PUSH
7333: LD_EXP 14
7337: PPUSH
7338: LD_EXP 43
7342: PPUSH
7343: CALL 63960 0 2
7347: ST_TO_ADDR
// end ;
7348: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7349: LD_INT 2
7351: PPUSH
7352: LD_EXP 45
7356: PPUSH
7357: CALL_OW 292
7361: PUSH
7362: LD_EXP 37
7366: PPUSH
7367: LD_EXP 45
7371: PPUSH
7372: CALL_OW 296
7376: PUSH
7377: LD_INT 6
7379: LESS
7380: AND
7381: PUSH
7382: LD_EXP 17
7386: NOT
7387: AND
7388: PUSH
7389: LD_EXP 30
7393: NOT
7394: AND
7395: IFFALSE 7491
7397: GO 7399
7399: DISABLE
// begin DialogueOn ;
7400: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7404: LD_EXP 45
7408: PPUSH
7409: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7413: LD_EXP 37
7417: PPUSH
7418: LD_STRING DH-Olaf-1
7420: PPUSH
7421: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7425: LD_EXP 45
7429: PPUSH
7430: LD_STRING DO-Olaf-2
7432: PPUSH
7433: CALL_OW 88
// if explosionsTakenByRussians then
7437: LD_EXP 21
7441: IFFALSE 7455
// Say ( Olaf , DO-Olaf-a-3 ) ;
7443: LD_EXP 45
7447: PPUSH
7448: LD_STRING DO-Olaf-a-3
7450: PPUSH
7451: CALL_OW 88
// DialogueOff ;
7455: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7459: LD_EXP 45
7463: PPUSH
7464: LD_INT 2
7466: PPUSH
7467: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7471: LD_ADDR_EXP 14
7475: PUSH
7476: LD_EXP 14
7480: PPUSH
7481: LD_EXP 45
7485: PPUSH
7486: CALL 63960 0 2
7490: ST_TO_ADDR
// end ;
7491: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
7492: LD_INT 2
7494: PPUSH
7495: LD_EXP 39
7499: PPUSH
7500: CALL_OW 292
7504: PUSH
7505: LD_EXP 37
7509: PPUSH
7510: LD_EXP 39
7514: PPUSH
7515: CALL_OW 296
7519: PUSH
7520: LD_INT 6
7522: LESS
7523: AND
7524: PUSH
7525: LD_EXP 17
7529: NOT
7530: AND
7531: PUSH
7532: LD_EXP 30
7536: NOT
7537: AND
7538: IFFALSE 7766
7540: GO 7542
7542: DISABLE
7543: LD_INT 0
7545: PPUSH
7546: PPUSH
// begin DialogueOn ;
7547: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
7551: LD_EXP 39
7555: PPUSH
7556: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
7560: LD_ADDR_VAR 0 2
7564: PUSH
7565: LD_INT 18
7567: PPUSH
7568: LD_INT 0
7570: PPUSH
7571: CALL_OW 517
7575: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: DOUBLE
7582: LD_INT 1
7584: DEC
7585: ST_TO_ADDR
7586: LD_VAR 0 2
7590: PUSH
7591: LD_INT 1
7593: ARRAY
7594: PUSH
7595: FOR_TO
7596: IFFALSE 7678
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
7598: LD_VAR 0 2
7602: PUSH
7603: LD_INT 1
7605: ARRAY
7606: PUSH
7607: LD_VAR 0 1
7611: ARRAY
7612: PPUSH
7613: LD_VAR 0 2
7617: PUSH
7618: LD_INT 2
7620: ARRAY
7621: PUSH
7622: LD_VAR 0 1
7626: ARRAY
7627: PPUSH
7628: LD_INT 2
7630: PPUSH
7631: LD_INT 3
7633: NEG
7634: PPUSH
7635: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
7639: LD_VAR 0 2
7643: PUSH
7644: LD_INT 1
7646: ARRAY
7647: PUSH
7648: LD_VAR 0 1
7652: ARRAY
7653: PPUSH
7654: LD_VAR 0 2
7658: PUSH
7659: LD_INT 2
7661: ARRAY
7662: PUSH
7663: LD_VAR 0 1
7667: ARRAY
7668: PPUSH
7669: LD_INT 2
7671: PPUSH
7672: CALL_OW 331
// end ;
7676: GO 7595
7678: POP
7679: POP
// Say ( Mike , DM-Mike-1 ) ;
7680: LD_EXP 39
7684: PPUSH
7685: LD_STRING DM-Mike-1
7687: PPUSH
7688: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
7692: LD_EXP 37
7696: PPUSH
7697: LD_STRING DH-Mike-2
7699: PPUSH
7700: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
7704: LD_INT 78
7706: PPUSH
7707: LD_INT 104
7709: PPUSH
7710: CALL_OW 84
// dwait ( 0 0$1 ) ;
7714: LD_INT 35
7716: PPUSH
7717: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7721: LD_EXP 37
7725: PPUSH
7726: CALL_OW 87
// DialogueOff ;
7730: CALL_OW 7
// SetSide ( Mike , 2 ) ;
7734: LD_EXP 39
7738: PPUSH
7739: LD_INT 2
7741: PPUSH
7742: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
7746: LD_ADDR_EXP 14
7750: PUSH
7751: LD_EXP 14
7755: PPUSH
7756: LD_EXP 39
7760: PPUSH
7761: CALL 63960 0 2
7765: ST_TO_ADDR
// end ;
7766: PPOPN 2
7768: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
7769: LD_EXP 37
7773: PPUSH
7774: LD_EXP 42
7778: PPUSH
7779: CALL_OW 296
7783: PUSH
7784: LD_INT 6
7786: LESS
7787: PUSH
7788: LD_EXP 42
7792: PPUSH
7793: CALL_OW 257
7797: PUSH
7798: LD_INT 33
7800: EQUAL
7801: AND
7802: PUSH
7803: LD_EXP 17
7807: NOT
7808: AND
7809: PUSH
7810: LD_EXP 42
7814: PPUSH
7815: CALL_OW 302
7819: AND
7820: PUSH
7821: LD_EXP 20
7825: AND
7826: PUSH
7827: LD_EXP 42
7831: PUSH
7832: LD_EXP 14
7836: IN
7837: AND
7838: PUSH
7839: LD_EXP 42
7843: PPUSH
7844: CALL_OW 255
7848: PUSH
7849: LD_INT 2
7851: EQUAL
7852: AND
7853: IFFALSE 7882
7855: GO 7857
7857: DISABLE
// begin DialogueOn ;
7858: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
7862: LD_EXP 37
7866: PPUSH
7867: LD_STRING DH-Kaia-Revolver-2
7869: PPUSH
7870: CALL_OW 88
// SetClassKaiaRevolver ;
7874: CALL 1678 0 0
// DialogueOff ;
7878: CALL_OW 7
// end ;
7882: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
7883: LD_EXP 40
7887: PUSH
7888: LD_EXP 47
7892: AND
7893: PUSH
7894: LD_EXP 47
7898: PPUSH
7899: CALL_OW 255
7903: PUSH
7904: LD_INT 2
7906: NONEQUAL
7907: AND
7908: PUSH
7909: LD_EXP 40
7913: PPUSH
7914: CALL_OW 255
7918: PUSH
7919: LD_INT 2
7921: NONEQUAL
7922: AND
7923: PUSH
7924: LD_EXP 14
7928: PPUSH
7929: LD_INT 22
7931: PUSH
7932: LD_INT 2
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: PPUSH
7939: CALL_OW 72
7943: PUSH
7944: LD_INT 5
7946: GREATER
7947: AND
7948: PUSH
7949: LD_EXP 17
7953: NOT
7954: AND
7955: PUSH
7956: LD_EXP 30
7960: NOT
7961: AND
7962: IFFALSE 8679
7964: GO 7966
7966: DISABLE
7967: LD_INT 0
7969: PPUSH
7970: PPUSH
// begin DialogueOn ;
7971: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
7975: LD_ADDR_VAR 0 2
7979: PUSH
7980: LD_EXP 38
7984: PPUSH
7985: CALL_OW 302
7989: PUSH
7990: LD_EXP 38
7994: PUSH
7995: LD_EXP 14
7999: IN
8000: AND
8001: PUSH
8002: LD_EXP 38
8006: PPUSH
8007: CALL_OW 255
8011: PUSH
8012: LD_INT 2
8014: EQUAL
8015: AND
8016: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8017: LD_EXP 37
8021: PPUSH
8022: LD_STRING DH-Med-1
8024: PPUSH
8025: CALL_OW 88
// if hasGivi then
8029: LD_VAR 0 2
8033: IFFALSE 8049
// Say ( Givi , DG-Med-2 ) else
8035: LD_EXP 38
8039: PPUSH
8040: LD_STRING DG-Med-2
8042: PPUSH
8043: CALL_OW 88
8047: GO 8154
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8049: LD_EXP 14
8053: PUSH
8054: LD_EXP 48
8058: ISECT
8059: PPUSH
8060: LD_INT 22
8062: PUSH
8063: LD_INT 2
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: LD_INT 26
8072: PUSH
8073: LD_INT 1
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: PPUSH
8084: CALL_OW 72
8088: PUSH
8089: LD_INT 1
8091: ARRAY
8092: PPUSH
8093: LD_STRING DArm-Med-e-2
8095: PPUSH
8096: CALL_OW 88
8100: NOT
8101: IFFALSE 8154
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8103: LD_EXP 14
8107: PUSH
8108: LD_EXP 48
8112: ISECT
8113: PPUSH
8114: LD_INT 22
8116: PUSH
8117: LD_INT 2
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: PUSH
8124: LD_INT 26
8126: PUSH
8127: LD_INT 2
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PPUSH
8138: CALL_OW 72
8142: PUSH
8143: LD_INT 1
8145: ARRAY
8146: PPUSH
8147: LD_STRING DArf-Med-e-2
8149: PPUSH
8150: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8154: LD_INT 154
8156: PPUSH
8157: LD_INT 119
8159: PPUSH
8160: LD_INT 70
8162: PPUSH
8163: CALL 18432 0 3
// Say ( Heike , DH-Med-3 ) ;
8167: LD_EXP 37
8171: PPUSH
8172: LD_STRING DH-Med-3
8174: PPUSH
8175: CALL_OW 88
// if hasGivi then
8179: LD_VAR 0 2
8183: IFFALSE 8199
// Say ( Givi , DG-Med-4 ) else
8185: LD_EXP 38
8189: PPUSH
8190: LD_STRING DG-Med-4
8192: PPUSH
8193: CALL_OW 88
8197: GO 8304
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8199: LD_EXP 14
8203: PUSH
8204: LD_EXP 48
8208: ISECT
8209: PPUSH
8210: LD_INT 22
8212: PUSH
8213: LD_INT 2
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PUSH
8220: LD_INT 26
8222: PUSH
8223: LD_INT 1
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PPUSH
8234: CALL_OW 72
8238: PUSH
8239: LD_INT 1
8241: ARRAY
8242: PPUSH
8243: LD_STRING DArm-Med-e-4
8245: PPUSH
8246: CALL_OW 88
8250: NOT
8251: IFFALSE 8304
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8253: LD_EXP 14
8257: PUSH
8258: LD_EXP 48
8262: ISECT
8263: PPUSH
8264: LD_INT 22
8266: PUSH
8267: LD_INT 2
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PUSH
8274: LD_INT 26
8276: PUSH
8277: LD_INT 2
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: PPUSH
8288: CALL_OW 72
8292: PUSH
8293: LD_INT 1
8295: ARRAY
8296: PPUSH
8297: LD_STRING DArf-Med-e-4
8299: PPUSH
8300: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8304: LD_ADDR_VAR 0 1
8308: PUSH
8309: LD_EXP 42
8313: PPUSH
8314: CALL_OW 302
8318: PUSH
8319: LD_EXP 42
8323: PUSH
8324: LD_EXP 14
8328: IN
8329: AND
8330: PUSH
8331: LD_EXP 42
8335: PPUSH
8336: CALL_OW 255
8340: PUSH
8341: LD_INT 2
8343: EQUAL
8344: AND
8345: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8346: LD_EXP 39
8350: PPUSH
8351: CALL_OW 302
8355: PUSH
8356: LD_EXP 39
8360: PUSH
8361: LD_EXP 14
8365: IN
8366: AND
8367: PUSH
8368: LD_EXP 42
8372: PPUSH
8373: CALL_OW 255
8377: PUSH
8378: LD_INT 2
8380: EQUAL
8381: AND
8382: IFFALSE 8414
// begin Say ( Mike , DM-Med-5 ) ;
8384: LD_EXP 39
8388: PPUSH
8389: LD_STRING DM-Med-5
8391: PPUSH
8392: CALL_OW 88
// if hasKaia then
8396: LD_VAR 0 1
8400: IFFALSE 8414
// Say ( Kaia , DK-Med-6 ) ;
8402: LD_EXP 42
8406: PPUSH
8407: LD_STRING DK-Med-6
8409: PPUSH
8410: CALL_OW 88
// end ; if hasKaia then
8414: LD_VAR 0 1
8418: IFFALSE 8659
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8420: LD_INT 175
8422: PPUSH
8423: LD_INT 123
8425: PPUSH
8426: LD_INT 2
8428: PPUSH
8429: LD_INT 8
8431: NEG
8432: PPUSH
8433: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8437: LD_INT 175
8439: PPUSH
8440: LD_INT 123
8442: PPUSH
8443: LD_INT 2
8445: PPUSH
8446: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8450: LD_INT 175
8452: PPUSH
8453: LD_INT 123
8455: PPUSH
8456: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
8460: LD_EXP 42
8464: PPUSH
8465: LD_STRING DK-Med-7
8467: PPUSH
8468: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8472: LD_EXP 42
8476: PPUSH
8477: LD_STRING DK-Med-8
8479: PPUSH
8480: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
8484: LD_EXP 44
8488: PPUSH
8489: CALL_OW 302
8493: PUSH
8494: LD_EXP 44
8498: PUSH
8499: LD_EXP 14
8503: IN
8504: AND
8505: PUSH
8506: LD_EXP 44
8510: PPUSH
8511: CALL_OW 255
8515: PUSH
8516: LD_INT 2
8518: EQUAL
8519: AND
8520: IFFALSE 8578
// begin Say ( Markov , DMar-Med-9 ) ;
8522: LD_EXP 44
8526: PPUSH
8527: LD_STRING DMar-Med-9
8529: PPUSH
8530: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
8534: LD_EXP 42
8538: PPUSH
8539: LD_STRING DK-Med-10
8541: PPUSH
8542: CALL_OW 88
// if hasGivi then
8546: LD_VAR 0 2
8550: IFFALSE 8566
// Say ( Kaia , DK-Med-11 ) else
8552: LD_EXP 42
8556: PPUSH
8557: LD_STRING DK-Med-11
8559: PPUSH
8560: CALL_OW 88
8564: GO 8578
// Say ( Kaia , DK-Med-a-11 ) ;
8566: LD_EXP 42
8570: PPUSH
8571: LD_STRING DK-Med-a-11
8573: PPUSH
8574: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
8578: LD_EXP 41
8582: PPUSH
8583: CALL_OW 302
8587: PUSH
8588: LD_EXP 41
8592: PUSH
8593: LD_EXP 14
8597: IN
8598: AND
8599: PUSH
8600: LD_EXP 41
8604: PPUSH
8605: CALL_OW 255
8609: PUSH
8610: LD_INT 2
8612: EQUAL
8613: AND
8614: IFFALSE 8659
// begin Say ( Kamil , DKam-Med-12 ) ;
8616: LD_EXP 41
8620: PPUSH
8621: LD_STRING DKam-Med-12
8623: PPUSH
8624: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
8628: LD_EXP 41
8632: PPUSH
8633: LD_STRING DKam-Med-13
8635: PPUSH
8636: CALL_OW 88
// if not hasExplosionCollected then
8640: LD_EXP 23
8644: NOT
8645: IFFALSE 8659
// Say ( Heike , DH-Med-d-14 ) ;
8647: LD_EXP 37
8651: PPUSH
8652: LD_STRING DH-Med-d-14
8654: PPUSH
8655: CALL_OW 88
// end ; end ; DialogueOff ;
8659: CALL_OW 7
// adminAreaDiscovered := true ;
8663: LD_ADDR_EXP 22
8667: PUSH
8668: LD_INT 1
8670: ST_TO_ADDR
// laundryAllowed := true ;
8671: LD_ADDR_EXP 26
8675: PUSH
8676: LD_INT 1
8678: ST_TO_ADDR
// end ;
8679: PPOPN 2
8681: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
8682: LD_EXP 40
8686: NOT
8687: PUSH
8688: LD_EXP 47
8692: AND
8693: PUSH
8694: LD_EXP 47
8698: PUSH
8699: LD_EXP 14
8703: IN
8704: NOT
8705: AND
8706: PUSH
8707: LD_EXP 14
8711: PPUSH
8712: LD_INT 22
8714: PUSH
8715: LD_INT 2
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PPUSH
8722: CALL_OW 72
8726: PUSH
8727: LD_INT 4
8729: GREATER
8730: AND
8731: PUSH
8732: LD_EXP 17
8736: NOT
8737: AND
8738: PUSH
8739: LD_EXP 30
8743: NOT
8744: AND
8745: IFFALSE 9462
8747: GO 8749
8749: DISABLE
8750: LD_INT 0
8752: PPUSH
8753: PPUSH
// begin DialogueOn ;
8754: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8758: LD_ADDR_VAR 0 1
8762: PUSH
8763: LD_EXP 38
8767: PPUSH
8768: CALL_OW 302
8772: PUSH
8773: LD_EXP 38
8777: PUSH
8778: LD_EXP 14
8782: IN
8783: AND
8784: PUSH
8785: LD_EXP 38
8789: PPUSH
8790: CALL_OW 255
8794: PUSH
8795: LD_INT 2
8797: EQUAL
8798: AND
8799: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
8800: LD_EXP 37
8804: PPUSH
8805: LD_STRING DH-Med-a-1
8807: PPUSH
8808: CALL_OW 88
// if hasGivi then
8812: LD_VAR 0 1
8816: IFFALSE 8832
// Say ( Givi , DG-Med-a-2 ) else
8818: LD_EXP 38
8822: PPUSH
8823: LD_STRING DG-Med-a-2
8825: PPUSH
8826: CALL_OW 88
8830: GO 8937
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
8832: LD_EXP 14
8836: PUSH
8837: LD_EXP 48
8841: ISECT
8842: PPUSH
8843: LD_INT 22
8845: PUSH
8846: LD_INT 2
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 26
8855: PUSH
8856: LD_INT 1
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PPUSH
8867: CALL_OW 72
8871: PUSH
8872: LD_INT 1
8874: ARRAY
8875: PPUSH
8876: LD_STRING DArm-Med-f-2
8878: PPUSH
8879: CALL_OW 88
8883: NOT
8884: IFFALSE 8937
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
8886: LD_EXP 14
8890: PUSH
8891: LD_EXP 48
8895: ISECT
8896: PPUSH
8897: LD_INT 22
8899: PUSH
8900: LD_INT 2
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 26
8909: PUSH
8910: LD_INT 2
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PPUSH
8921: CALL_OW 72
8925: PUSH
8926: LD_INT 1
8928: ARRAY
8929: PPUSH
8930: LD_STRING DArf-Med-f-2
8932: PPUSH
8933: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8937: LD_INT 154
8939: PPUSH
8940: LD_INT 119
8942: PPUSH
8943: LD_INT 70
8945: PPUSH
8946: CALL 18432 0 3
// Say ( Heike , DH-Med-a-3 ) ;
8950: LD_EXP 37
8954: PPUSH
8955: LD_STRING DH-Med-a-3
8957: PPUSH
8958: CALL_OW 88
// if hasGivi then
8962: LD_VAR 0 1
8966: IFFALSE 8982
// Say ( Givi , DG-Med-a-4 ) else
8968: LD_EXP 38
8972: PPUSH
8973: LD_STRING DG-Med-a-4
8975: PPUSH
8976: CALL_OW 88
8980: GO 9087
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
8982: LD_EXP 14
8986: PUSH
8987: LD_EXP 48
8991: ISECT
8992: PPUSH
8993: LD_INT 22
8995: PUSH
8996: LD_INT 2
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: PUSH
9003: LD_INT 26
9005: PUSH
9006: LD_INT 1
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PPUSH
9017: CALL_OW 72
9021: PUSH
9022: LD_INT 1
9024: ARRAY
9025: PPUSH
9026: LD_STRING DArm-Med-f-4
9028: PPUSH
9029: CALL_OW 88
9033: NOT
9034: IFFALSE 9087
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9036: LD_EXP 14
9040: PUSH
9041: LD_EXP 48
9045: ISECT
9046: PPUSH
9047: LD_INT 22
9049: PUSH
9050: LD_INT 2
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PUSH
9057: LD_INT 26
9059: PUSH
9060: LD_INT 2
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PPUSH
9071: CALL_OW 72
9075: PUSH
9076: LD_INT 1
9078: ARRAY
9079: PPUSH
9080: LD_STRING DArf-Med-f-4
9082: PPUSH
9083: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9087: LD_ADDR_VAR 0 2
9091: PUSH
9092: LD_EXP 42
9096: PPUSH
9097: CALL_OW 302
9101: PUSH
9102: LD_EXP 42
9106: PUSH
9107: LD_EXP 14
9111: IN
9112: AND
9113: PUSH
9114: LD_EXP 42
9118: PPUSH
9119: CALL_OW 255
9123: PUSH
9124: LD_INT 2
9126: EQUAL
9127: AND
9128: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9129: LD_EXP 39
9133: PPUSH
9134: CALL_OW 302
9138: PUSH
9139: LD_EXP 39
9143: PUSH
9144: LD_EXP 14
9148: IN
9149: AND
9150: PUSH
9151: LD_EXP 39
9155: PPUSH
9156: CALL_OW 255
9160: PUSH
9161: LD_INT 2
9163: EQUAL
9164: AND
9165: IFFALSE 9197
// begin Say ( Mike , DM-Med-5 ) ;
9167: LD_EXP 39
9171: PPUSH
9172: LD_STRING DM-Med-5
9174: PPUSH
9175: CALL_OW 88
// if hasKaia then
9179: LD_VAR 0 2
9183: IFFALSE 9197
// Say ( Kaia , DK-Med-6 ) ;
9185: LD_EXP 42
9189: PPUSH
9190: LD_STRING DK-Med-6
9192: PPUSH
9193: CALL_OW 88
// end ; if hasKaia then
9197: LD_VAR 0 2
9201: IFFALSE 9442
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9203: LD_INT 175
9205: PPUSH
9206: LD_INT 123
9208: PPUSH
9209: LD_INT 2
9211: PPUSH
9212: LD_INT 8
9214: NEG
9215: PPUSH
9216: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9220: LD_INT 175
9222: PPUSH
9223: LD_INT 123
9225: PPUSH
9226: LD_INT 2
9228: PPUSH
9229: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9233: LD_INT 175
9235: PPUSH
9236: LD_INT 123
9238: PPUSH
9239: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9243: LD_EXP 42
9247: PPUSH
9248: LD_STRING DK-Med-7
9250: PPUSH
9251: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9255: LD_EXP 42
9259: PPUSH
9260: LD_STRING DK-Med-8
9262: PPUSH
9263: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9267: LD_EXP 44
9271: PPUSH
9272: CALL_OW 302
9276: PUSH
9277: LD_EXP 44
9281: PUSH
9282: LD_EXP 14
9286: IN
9287: AND
9288: PUSH
9289: LD_EXP 44
9293: PPUSH
9294: CALL_OW 255
9298: PUSH
9299: LD_INT 2
9301: EQUAL
9302: AND
9303: IFFALSE 9361
// begin Say ( Markov , DMar-Med-9 ) ;
9305: LD_EXP 44
9309: PPUSH
9310: LD_STRING DMar-Med-9
9312: PPUSH
9313: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9317: LD_EXP 42
9321: PPUSH
9322: LD_STRING DK-Med-10
9324: PPUSH
9325: CALL_OW 88
// if hasGivi then
9329: LD_VAR 0 1
9333: IFFALSE 9349
// Say ( Kaia , DK-Med-11 ) else
9335: LD_EXP 42
9339: PPUSH
9340: LD_STRING DK-Med-11
9342: PPUSH
9343: CALL_OW 88
9347: GO 9361
// Say ( Kaia , DK-Med-a-11 ) ;
9349: LD_EXP 42
9353: PPUSH
9354: LD_STRING DK-Med-a-11
9356: PPUSH
9357: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9361: LD_EXP 41
9365: PPUSH
9366: CALL_OW 302
9370: PUSH
9371: LD_EXP 41
9375: PUSH
9376: LD_EXP 14
9380: IN
9381: AND
9382: PUSH
9383: LD_EXP 41
9387: PPUSH
9388: CALL_OW 255
9392: PUSH
9393: LD_INT 2
9395: EQUAL
9396: AND
9397: IFFALSE 9442
// begin Say ( Kamil , DKam-Med-12 ) ;
9399: LD_EXP 41
9403: PPUSH
9404: LD_STRING DKam-Med-12
9406: PPUSH
9407: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9411: LD_EXP 41
9415: PPUSH
9416: LD_STRING DKam-Med-13
9418: PPUSH
9419: CALL_OW 88
// if not hasExplosionCollected then
9423: LD_EXP 23
9427: NOT
9428: IFFALSE 9442
// Say ( Heike , DH-Med-d-14 ) ;
9430: LD_EXP 37
9434: PPUSH
9435: LD_STRING DH-Med-d-14
9437: PPUSH
9438: CALL_OW 88
// end ; end ; DialogueOff ;
9442: CALL_OW 7
// adminAreaDiscovered := true ;
9446: LD_ADDR_EXP 22
9450: PUSH
9451: LD_INT 1
9453: ST_TO_ADDR
// laundryAllowed := true ;
9454: LD_ADDR_EXP 26
9458: PUSH
9459: LD_INT 1
9461: ST_TO_ADDR
// end ;
9462: PPOPN 2
9464: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9465: LD_EXP 40
9469: PUSH
9470: LD_EXP 47
9474: NOT
9475: AND
9476: PUSH
9477: LD_EXP 40
9481: PUSH
9482: LD_EXP 14
9486: IN
9487: NOT
9488: AND
9489: PUSH
9490: LD_EXP 14
9494: PPUSH
9495: LD_INT 22
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PPUSH
9505: CALL_OW 72
9509: PUSH
9510: LD_INT 4
9512: GREATER
9513: AND
9514: PUSH
9515: LD_EXP 17
9519: NOT
9520: AND
9521: PUSH
9522: LD_EXP 30
9526: NOT
9527: AND
9528: IFFALSE 10245
9530: GO 9532
9532: DISABLE
9533: LD_INT 0
9535: PPUSH
9536: PPUSH
// begin DialogueOn ;
9537: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9541: LD_ADDR_VAR 0 1
9545: PUSH
9546: LD_EXP 38
9550: PPUSH
9551: CALL_OW 302
9555: PUSH
9556: LD_EXP 38
9560: PUSH
9561: LD_EXP 14
9565: IN
9566: AND
9567: PUSH
9568: LD_EXP 38
9572: PPUSH
9573: CALL_OW 255
9577: PUSH
9578: LD_INT 2
9580: EQUAL
9581: AND
9582: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
9583: LD_EXP 37
9587: PPUSH
9588: LD_STRING DH-Med-b-1
9590: PPUSH
9591: CALL_OW 88
// if hasGivi then
9595: LD_VAR 0 1
9599: IFFALSE 9615
// Say ( Givi , DG-Med-a-2 ) else
9601: LD_EXP 38
9605: PPUSH
9606: LD_STRING DG-Med-a-2
9608: PPUSH
9609: CALL_OW 88
9613: GO 9720
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9615: LD_EXP 14
9619: PUSH
9620: LD_EXP 48
9624: ISECT
9625: PPUSH
9626: LD_INT 22
9628: PUSH
9629: LD_INT 2
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: LD_INT 26
9638: PUSH
9639: LD_INT 1
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PPUSH
9650: CALL_OW 72
9654: PUSH
9655: LD_INT 1
9657: ARRAY
9658: PPUSH
9659: LD_STRING DArm-Med-f-2
9661: PPUSH
9662: CALL_OW 88
9666: NOT
9667: IFFALSE 9720
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9669: LD_EXP 14
9673: PUSH
9674: LD_EXP 48
9678: ISECT
9679: PPUSH
9680: LD_INT 22
9682: PUSH
9683: LD_INT 2
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PUSH
9690: LD_INT 26
9692: PUSH
9693: LD_INT 2
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PPUSH
9704: CALL_OW 72
9708: PUSH
9709: LD_INT 1
9711: ARRAY
9712: PPUSH
9713: LD_STRING DArf-Med-f-2
9715: PPUSH
9716: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9720: LD_INT 154
9722: PPUSH
9723: LD_INT 119
9725: PPUSH
9726: LD_INT 70
9728: PPUSH
9729: CALL 18432 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9733: LD_EXP 37
9737: PPUSH
9738: LD_STRING DH-Med-a-3
9740: PPUSH
9741: CALL_OW 88
// if hasGivi then
9745: LD_VAR 0 1
9749: IFFALSE 9765
// Say ( Givi , DG-Med-a-4 ) else
9751: LD_EXP 38
9755: PPUSH
9756: LD_STRING DG-Med-a-4
9758: PPUSH
9759: CALL_OW 88
9763: GO 9870
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9765: LD_EXP 14
9769: PUSH
9770: LD_EXP 48
9774: ISECT
9775: PPUSH
9776: LD_INT 22
9778: PUSH
9779: LD_INT 2
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PUSH
9786: LD_INT 26
9788: PUSH
9789: LD_INT 1
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: PPUSH
9800: CALL_OW 72
9804: PUSH
9805: LD_INT 1
9807: ARRAY
9808: PPUSH
9809: LD_STRING DArm-Med-f-4
9811: PPUSH
9812: CALL_OW 88
9816: NOT
9817: IFFALSE 9870
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9819: LD_EXP 14
9823: PUSH
9824: LD_EXP 48
9828: ISECT
9829: PPUSH
9830: LD_INT 22
9832: PUSH
9833: LD_INT 2
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 26
9842: PUSH
9843: LD_INT 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: PPUSH
9854: CALL_OW 72
9858: PUSH
9859: LD_INT 1
9861: ARRAY
9862: PPUSH
9863: LD_STRING DArf-Med-f-4
9865: PPUSH
9866: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9870: LD_ADDR_VAR 0 2
9874: PUSH
9875: LD_EXP 42
9879: PPUSH
9880: CALL_OW 302
9884: PUSH
9885: LD_EXP 42
9889: PUSH
9890: LD_EXP 14
9894: IN
9895: AND
9896: PUSH
9897: LD_EXP 42
9901: PPUSH
9902: CALL_OW 255
9906: PUSH
9907: LD_INT 2
9909: EQUAL
9910: AND
9911: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9912: LD_EXP 39
9916: PPUSH
9917: CALL_OW 302
9921: PUSH
9922: LD_EXP 39
9926: PUSH
9927: LD_EXP 14
9931: IN
9932: AND
9933: PUSH
9934: LD_EXP 39
9938: PPUSH
9939: CALL_OW 255
9943: PUSH
9944: LD_INT 2
9946: EQUAL
9947: AND
9948: IFFALSE 9980
// begin Say ( Mike , DM-Med-5 ) ;
9950: LD_EXP 39
9954: PPUSH
9955: LD_STRING DM-Med-5
9957: PPUSH
9958: CALL_OW 88
// if hasKaia then
9962: LD_VAR 0 2
9966: IFFALSE 9980
// Say ( Kaia , DK-Med-6 ) ;
9968: LD_EXP 42
9972: PPUSH
9973: LD_STRING DK-Med-6
9975: PPUSH
9976: CALL_OW 88
// end ; if hasKaia then
9980: LD_VAR 0 2
9984: IFFALSE 10225
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9986: LD_INT 175
9988: PPUSH
9989: LD_INT 123
9991: PPUSH
9992: LD_INT 2
9994: PPUSH
9995: LD_INT 8
9997: NEG
9998: PPUSH
9999: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10003: LD_INT 175
10005: PPUSH
10006: LD_INT 123
10008: PPUSH
10009: LD_INT 2
10011: PPUSH
10012: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10016: LD_INT 175
10018: PPUSH
10019: LD_INT 123
10021: PPUSH
10022: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10026: LD_EXP 42
10030: PPUSH
10031: LD_STRING DK-Med-7
10033: PPUSH
10034: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10038: LD_EXP 42
10042: PPUSH
10043: LD_STRING DK-Med-8
10045: PPUSH
10046: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10050: LD_EXP 44
10054: PPUSH
10055: CALL_OW 302
10059: PUSH
10060: LD_EXP 44
10064: PUSH
10065: LD_EXP 14
10069: IN
10070: AND
10071: PUSH
10072: LD_EXP 44
10076: PPUSH
10077: CALL_OW 255
10081: PUSH
10082: LD_INT 2
10084: EQUAL
10085: AND
10086: IFFALSE 10144
// begin Say ( Markov , DMar-Med-9 ) ;
10088: LD_EXP 44
10092: PPUSH
10093: LD_STRING DMar-Med-9
10095: PPUSH
10096: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10100: LD_EXP 42
10104: PPUSH
10105: LD_STRING DK-Med-10
10107: PPUSH
10108: CALL_OW 88
// if hasGivi then
10112: LD_VAR 0 1
10116: IFFALSE 10132
// Say ( Kaia , DK-Med-11 ) else
10118: LD_EXP 42
10122: PPUSH
10123: LD_STRING DK-Med-11
10125: PPUSH
10126: CALL_OW 88
10130: GO 10144
// Say ( Kaia , DK-Med-a-11 ) ;
10132: LD_EXP 42
10136: PPUSH
10137: LD_STRING DK-Med-a-11
10139: PPUSH
10140: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10144: LD_EXP 41
10148: PPUSH
10149: CALL_OW 302
10153: PUSH
10154: LD_EXP 41
10158: PUSH
10159: LD_EXP 14
10163: IN
10164: AND
10165: PUSH
10166: LD_EXP 41
10170: PPUSH
10171: CALL_OW 255
10175: PUSH
10176: LD_INT 2
10178: EQUAL
10179: AND
10180: IFFALSE 10225
// begin Say ( Kamil , DKam-Med-12 ) ;
10182: LD_EXP 41
10186: PPUSH
10187: LD_STRING DKam-Med-12
10189: PPUSH
10190: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10194: LD_EXP 41
10198: PPUSH
10199: LD_STRING DKam-Med-13
10201: PPUSH
10202: CALL_OW 88
// if not hasExplosionCollected then
10206: LD_EXP 23
10210: NOT
10211: IFFALSE 10225
// Say ( Heike , DH-Med-d-14 ) ;
10213: LD_EXP 37
10217: PPUSH
10218: LD_STRING DH-Med-d-14
10220: PPUSH
10221: CALL_OW 88
// end ; end ; DialogueOff ;
10225: CALL_OW 7
// adminAreaDiscovered := true ;
10229: LD_ADDR_EXP 22
10233: PUSH
10234: LD_INT 1
10236: ST_TO_ADDR
// laundryAllowed := true ;
10237: LD_ADDR_EXP 26
10241: PUSH
10242: LD_INT 1
10244: ST_TO_ADDR
// end ;
10245: PPOPN 2
10247: END
// every 0 0$1 trigger laundryAllowed do
10248: LD_EXP 26
10252: IFFALSE 10264
10254: GO 10256
10256: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10257: LD_STRING M1-laundry
10259: PPUSH
10260: CALL_OW 337
10264: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10265: LD_EXP 40
10269: NOT
10270: PUSH
10271: LD_EXP 47
10275: NOT
10276: AND
10277: PUSH
10278: LD_EXP 45
10282: PPUSH
10283: CALL_OW 302
10287: AND
10288: PUSH
10289: LD_EXP 45
10293: PUSH
10294: LD_EXP 14
10298: IN
10299: AND
10300: PUSH
10301: LD_EXP 45
10305: PPUSH
10306: CALL_OW 255
10310: PUSH
10311: LD_INT 2
10313: EQUAL
10314: AND
10315: PUSH
10316: LD_EXP 17
10320: NOT
10321: AND
10322: PUSH
10323: LD_EXP 30
10327: NOT
10328: AND
10329: IFFALSE 10485
10331: GO 10333
10333: DISABLE
// begin DialogueOn ;
10334: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10338: LD_INT 152
10340: PPUSH
10341: LD_INT 115
10343: PPUSH
10344: LD_INT 2
10346: PPUSH
10347: LD_INT 16
10349: NEG
10350: PPUSH
10351: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10355: LD_INT 152
10357: PPUSH
10358: LD_INT 115
10360: PPUSH
10361: LD_INT 2
10363: PPUSH
10364: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10368: LD_INT 152
10370: PPUSH
10371: LD_INT 115
10373: PPUSH
10374: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10378: LD_EXP 45
10382: PPUSH
10383: LD_STRING DO-Med-c-1
10385: PPUSH
10386: CALL_OW 88
// if not hasExplosionCollected then
10390: LD_EXP 23
10394: NOT
10395: IFFALSE 10411
// Say ( Heike , DH-Med-d-14 ) else
10397: LD_EXP 37
10401: PPUSH
10402: LD_STRING DH-Med-d-14
10404: PPUSH
10405: CALL_OW 88
10409: GO 10473
// begin Say ( Heike , DH-Med-c-2 ) ;
10411: LD_EXP 37
10415: PPUSH
10416: LD_STRING DH-Med-c-2
10418: PPUSH
10419: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10423: LD_EXP 42
10427: PPUSH
10428: CALL_OW 302
10432: PUSH
10433: LD_EXP 42
10437: PUSH
10438: LD_EXP 14
10442: IN
10443: AND
10444: PUSH
10445: LD_EXP 42
10449: PPUSH
10450: CALL_OW 255
10454: PUSH
10455: LD_INT 2
10457: EQUAL
10458: AND
10459: IFFALSE 10473
// Say ( Kaia , DK-Med-c-3 ) ;
10461: LD_EXP 42
10465: PPUSH
10466: LD_STRING DK-Med-c-3
10468: PPUSH
10469: CALL_OW 88
// end ; DialogueOff ;
10473: CALL_OW 7
// adminAreaDiscovered := true ;
10477: LD_ADDR_EXP 22
10481: PUSH
10482: LD_INT 1
10484: ST_TO_ADDR
// end ;
10485: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
10486: LD_EXP 42
10490: PPUSH
10491: CALL_OW 256
10495: PUSH
10496: LD_INT 250
10498: LESS
10499: PUSH
10500: LD_EXP 42
10504: PUSH
10505: LD_EXP 14
10509: IN
10510: AND
10511: PUSH
10512: LD_EXP 17
10516: AND
10517: PUSH
10518: LD_EXP 24
10522: AND
10523: IFFALSE 10652
10525: GO 10527
10527: DISABLE
// begin DialogueOn ;
10528: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10532: LD_EXP 42
10536: PPUSH
10537: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
10541: LD_EXP 42
10545: PPUSH
10546: LD_STRING DK-death-1
10548: PPUSH
10549: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
10553: LD_EXP 37
10557: PPUSH
10558: LD_STRING DH-death-2
10560: PPUSH
10561: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
10565: LD_EXP 42
10569: PPUSH
10570: LD_STRING DK-death-3
10572: PPUSH
10573: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
10577: LD_EXP 42
10581: PPUSH
10582: LD_STRING DK-death-4
10584: PPUSH
10585: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
10589: LD_EXP 42
10593: PPUSH
10594: LD_INT 8
10596: PPUSH
10597: CALL_OW 235
// ComStop ( Kaia ) ;
10601: LD_EXP 42
10605: PPUSH
10606: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
10610: LD_INT 8
10612: PPUSH
10613: LD_INT 2
10615: PPUSH
10616: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
10620: LD_ADDR_EXP 14
10624: PUSH
10625: LD_EXP 14
10629: PUSH
10630: LD_EXP 42
10634: DIFF
10635: ST_TO_ADDR
// DialogueOff ;
10636: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
10640: LD_EXP 39
10644: PPUSH
10645: LD_STRING DM-death-5
10647: PPUSH
10648: CALL_OW 88
// end ;
10652: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
10653: LD_EXP 25
10657: NOT
10658: PUSH
10659: LD_EXP 30
10663: NOT
10664: AND
10665: PUSH
10666: LD_EXP 50
10670: PUSH
10671: LD_EXP 14
10675: IN
10676: NOT
10677: AND
10678: PUSH
10679: LD_INT 2
10681: PPUSH
10682: LD_EXP 50
10686: PPUSH
10687: CALL_OW 292
10691: AND
10692: PUSH
10693: LD_EXP 37
10697: PPUSH
10698: LD_EXP 50
10702: PPUSH
10703: CALL_OW 296
10707: PUSH
10708: LD_INT 6
10710: LESS
10711: AND
10712: PUSH
10713: LD_EXP 17
10717: NOT
10718: AND
10719: IFFALSE 10943
10721: GO 10723
10723: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
10724: LD_EXP 50
10728: PPUSH
10729: LD_EXP 37
10733: PPUSH
10734: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
10738: LD_EXP 37
10742: PPUSH
10743: LD_EXP 50
10747: PPUSH
10748: CALL_OW 119
// wait ( 0 0$0.3 ) ;
10752: LD_INT 10
10754: PPUSH
10755: CALL_OW 67
// DialogueOn ;
10759: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
10763: LD_EXP 50
10767: PPUSH
10768: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
10772: LD_EXP 37
10776: PPUSH
10777: LD_STRING DH-Deal-1
10779: PPUSH
10780: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
10784: LD_EXP 50
10788: PPUSH
10789: LD_STRING DJ-Deal-2
10791: PPUSH
10792: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
10796: LD_EXP 37
10800: PPUSH
10801: LD_STRING DH-Deal-3
10803: PPUSH
10804: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
10808: LD_EXP 50
10812: PPUSH
10813: LD_STRING DJ-Deal-4
10815: PPUSH
10816: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
10820: LD_EXP 50
10824: PPUSH
10825: LD_STRING DJ-Deal-5
10827: PPUSH
10828: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
10832: LD_EXP 50
10836: PPUSH
10837: LD_STRING DJ-Deal-6
10839: PPUSH
10840: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
10844: LD_EXP 50
10848: PPUSH
10849: LD_STRING DJ-Deal-7
10851: PPUSH
10852: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
10856: LD_EXP 37
10860: PPUSH
10861: LD_STRING DH-Deal-8
10863: PPUSH
10864: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
10868: LD_EXP 37
10872: PPUSH
10873: LD_STRING DH-Deal-9
10875: PPUSH
10876: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
10880: LD_EXP 50
10884: PPUSH
10885: LD_STRING DJ-Deal-10
10887: PPUSH
10888: CALL_OW 88
// DialogueOff ;
10892: CALL_OW 7
// contactWithAmerican := true ;
10896: LD_ADDR_EXP 25
10900: PUSH
10901: LD_INT 1
10903: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
10904: LD_STRING M1-american-out
10906: PPUSH
10907: CALL_OW 604
// SetSide ( Harris , 2 ) ;
10911: LD_EXP 50
10915: PPUSH
10916: LD_INT 2
10918: PPUSH
10919: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
10923: LD_ADDR_EXP 14
10927: PUSH
10928: LD_EXP 14
10932: PPUSH
10933: LD_EXP 50
10937: PPUSH
10938: CALL 63960 0 2
10942: ST_TO_ADDR
// end ;
10943: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
10944: LD_EXP 25
10948: PUSH
10949: LD_EXP 30
10953: NOT
10954: AND
10955: PUSH
10956: LD_EXP 50
10960: PUSH
10961: LD_EXP 14
10965: IN
10966: NOT
10967: AND
10968: PUSH
10969: LD_INT 2
10971: PPUSH
10972: LD_EXP 50
10976: PPUSH
10977: CALL_OW 292
10981: AND
10982: PUSH
10983: LD_EXP 37
10987: PPUSH
10988: LD_EXP 50
10992: PPUSH
10993: CALL_OW 296
10997: PUSH
10998: LD_INT 6
11000: LESS
11001: AND
11002: PUSH
11003: LD_EXP 17
11007: NOT
11008: AND
11009: IFFALSE 11134
11011: GO 11013
11013: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11014: LD_EXP 50
11018: PPUSH
11019: LD_EXP 37
11023: PPUSH
11024: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11028: LD_EXP 37
11032: PPUSH
11033: LD_EXP 50
11037: PPUSH
11038: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11042: LD_INT 10
11044: PPUSH
11045: CALL_OW 67
// DialogueOn ;
11049: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11053: LD_EXP 50
11057: PPUSH
11058: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11062: LD_EXP 50
11066: PPUSH
11067: LD_STRING DJ-Escort-1
11069: PPUSH
11070: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11074: LD_EXP 37
11078: PPUSH
11079: LD_STRING DH-Escort-2
11081: PPUSH
11082: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11086: LD_EXP 50
11090: PPUSH
11091: LD_STRING DJ-Escort-3
11093: PPUSH
11094: CALL_OW 88
// DialogueOff ;
11098: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11102: LD_EXP 50
11106: PPUSH
11107: LD_INT 2
11109: PPUSH
11110: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11114: LD_ADDR_EXP 14
11118: PUSH
11119: LD_EXP 14
11123: PPUSH
11124: LD_EXP 50
11128: PPUSH
11129: CALL 63960 0 2
11133: ST_TO_ADDR
// end ;
11134: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11135: LD_EXP 25
11139: PUSH
11140: LD_EXP 30
11144: NOT
11145: AND
11146: PUSH
11147: LD_EXP 49
11151: PUSH
11152: LD_EXP 14
11156: DIFF
11157: PPUSH
11158: LD_INT 22
11160: PUSH
11161: LD_INT 4
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: PUSH
11168: LD_INT 3
11170: PUSH
11171: LD_INT 120
11173: PUSH
11174: LD_INT 1
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PUSH
11185: LD_INT 101
11187: PUSH
11188: LD_INT 2
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: LIST
11199: PPUSH
11200: CALL_OW 72
11204: AND
11205: PUSH
11206: LD_EXP 17
11210: NOT
11211: AND
11212: IFFALSE 11427
11214: GO 11216
11216: DISABLE
11217: LD_INT 0
11219: PPUSH
// begin enable ;
11220: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11221: LD_ADDR_VAR 0 1
11225: PUSH
11226: LD_EXP 49
11230: PUSH
11231: LD_EXP 14
11235: DIFF
11236: PPUSH
11237: LD_INT 22
11239: PUSH
11240: LD_INT 4
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 91
11249: PUSH
11250: LD_EXP 37
11254: PUSH
11255: LD_INT 6
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: LIST
11262: PUSH
11263: LD_INT 101
11265: PUSH
11266: LD_INT 2
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: LIST
11277: PPUSH
11278: CALL_OW 72
11282: PPUSH
11283: LD_EXP 37
11287: PPUSH
11288: CALL_OW 74
11292: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11293: LD_VAR 0 1
11297: PPUSH
11298: LD_EXP 37
11302: PPUSH
11303: CALL_OW 296
11307: PUSH
11308: LD_INT 6
11310: LESS
11311: IFFALSE 11427
// begin DialogueOn ;
11313: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11317: LD_VAR 0 1
11321: PPUSH
11322: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11326: LD_EXP 37
11330: PPUSH
11331: LD_STRING DH-USsol-1
11333: PPUSH
11334: CALL_OW 88
// if GetSex ( un ) = sex_male then
11338: LD_VAR 0 1
11342: PPUSH
11343: CALL_OW 258
11347: PUSH
11348: LD_INT 1
11350: EQUAL
11351: IFFALSE 11367
// Say ( un , DUSM-USsol-2 ) else
11353: LD_VAR 0 1
11357: PPUSH
11358: LD_STRING DUSM-USsol-2
11360: PPUSH
11361: CALL_OW 88
11365: GO 11379
// Say ( un , DUSF-USsol-2 ) ;
11367: LD_VAR 0 1
11371: PPUSH
11372: LD_STRING DUSF-USsol-2
11374: PPUSH
11375: CALL_OW 88
// DialogueOff ;
11379: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11383: LD_ADDR_EXP 14
11387: PUSH
11388: LD_EXP 14
11392: PPUSH
11393: LD_VAR 0 1
11397: PPUSH
11398: CALL 63960 0 2
11402: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11403: LD_VAR 0 1
11407: PPUSH
11408: LD_INT 1
11410: PPUSH
11411: CALL_OW 109
// SetSide ( un , 2 ) ;
11415: LD_VAR 0 1
11419: PPUSH
11420: LD_INT 2
11422: PPUSH
11423: CALL_OW 235
// end ; end ;
11427: PPOPN 1
11429: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11430: LD_EXP 48
11434: PUSH
11435: LD_EXP 30
11439: NOT
11440: AND
11441: PUSH
11442: LD_EXP 48
11446: PUSH
11447: LD_EXP 14
11451: DIFF
11452: PPUSH
11453: LD_INT 3
11455: PUSH
11456: LD_INT 120
11458: PUSH
11459: LD_INT 1
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PUSH
11470: LD_INT 91
11472: PUSH
11473: LD_EXP 37
11477: PUSH
11478: LD_INT 6
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: LIST
11485: PUSH
11486: LD_INT 101
11488: PUSH
11489: LD_INT 2
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: LIST
11500: PPUSH
11501: CALL_OW 72
11505: AND
11506: PUSH
11507: LD_EXP 17
11511: NOT
11512: AND
11513: IFFALSE 11728
11515: GO 11517
11517: DISABLE
11518: LD_INT 0
11520: PPUSH
// begin enable ;
11521: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11522: LD_ADDR_VAR 0 1
11526: PUSH
11527: LD_EXP 48
11531: PUSH
11532: LD_EXP 14
11536: DIFF
11537: PPUSH
11538: LD_INT 22
11540: PUSH
11541: LD_INT 5
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: PUSH
11548: LD_INT 91
11550: PUSH
11551: LD_EXP 37
11555: PUSH
11556: LD_INT 6
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 101
11566: PUSH
11567: LD_INT 2
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: LIST
11578: PPUSH
11579: CALL_OW 72
11583: PPUSH
11584: LD_EXP 37
11588: PPUSH
11589: CALL_OW 74
11593: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11594: LD_VAR 0 1
11598: PPUSH
11599: LD_EXP 37
11603: PPUSH
11604: CALL_OW 296
11608: PUSH
11609: LD_INT 6
11611: LESS
11612: IFFALSE 11728
// begin DialogueOn ;
11614: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11618: LD_VAR 0 1
11622: PPUSH
11623: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11627: LD_EXP 37
11631: PPUSH
11632: LD_STRING DH-USsol-1
11634: PPUSH
11635: CALL_OW 88
// if GetSex ( un ) = sex_male then
11639: LD_VAR 0 1
11643: PPUSH
11644: CALL_OW 258
11648: PUSH
11649: LD_INT 1
11651: EQUAL
11652: IFFALSE 11668
// Say ( un , DArm-USsol-2 ) else
11654: LD_VAR 0 1
11658: PPUSH
11659: LD_STRING DArm-USsol-2
11661: PPUSH
11662: CALL_OW 88
11666: GO 11680
// Say ( un , DArf-USsol-3 ) ;
11668: LD_VAR 0 1
11672: PPUSH
11673: LD_STRING DArf-USsol-3
11675: PPUSH
11676: CALL_OW 88
// DialogueOff ;
11680: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11684: LD_ADDR_EXP 14
11688: PUSH
11689: LD_EXP 14
11693: PPUSH
11694: LD_VAR 0 1
11698: PPUSH
11699: CALL 63960 0 2
11703: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11704: LD_VAR 0 1
11708: PPUSH
11709: LD_INT 1
11711: PPUSH
11712: CALL_OW 109
// SetSide ( un , 2 ) ;
11716: LD_VAR 0 1
11720: PPUSH
11721: LD_INT 2
11723: PPUSH
11724: CALL_OW 235
// end ; end ;
11728: PPOPN 1
11730: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
11731: LD_EXP 49
11735: PPUSH
11736: LD_INT 101
11738: PUSH
11739: LD_INT 2
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PPUSH
11746: CALL_OW 72
11750: PUSH
11751: LD_EXP 14
11755: PPUSH
11756: LD_INT 22
11758: PUSH
11759: LD_INT 2
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: PPUSH
11766: CALL_OW 72
11770: PUSH
11771: LD_INT 5
11773: GREATER
11774: AND
11775: PUSH
11776: LD_EXP 10
11780: NOT
11781: AND
11782: PUSH
11783: LD_EXP 30
11787: NOT
11788: AND
11789: PUSH
11790: LD_EXP 25
11794: NOT
11795: AND
11796: PUSH
11797: LD_EXP 17
11801: NOT
11802: AND
11803: IFFALSE 11918
11805: GO 11807
11807: DISABLE
11808: LD_INT 0
11810: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
11811: LD_ADDR_VAR 0 1
11815: PUSH
11816: LD_EXP 49
11820: PPUSH
11821: LD_INT 22
11823: PUSH
11824: LD_INT 4
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 101
11833: PUSH
11834: LD_INT 2
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: PPUSH
11845: CALL_OW 72
11849: PUSH
11850: LD_INT 1
11852: ARRAY
11853: ST_TO_ADDR
// DialogueOn ;
11854: CALL_OW 6
// if GetSex ( un ) = sex_male then
11858: LD_VAR 0 1
11862: PPUSH
11863: CALL_OW 258
11867: PUSH
11868: LD_INT 1
11870: EQUAL
11871: IFFALSE 11887
// Say ( un , DUSm-USsol-a-2 ) else
11873: LD_VAR 0 1
11877: PPUSH
11878: LD_STRING DUSm-USsol-a-2
11880: PPUSH
11881: CALL_OW 88
11885: GO 11899
// Say ( un , DUSf-USsol-a-2 ) ;
11887: LD_VAR 0 1
11891: PPUSH
11892: LD_STRING DUSf-USsol-a-2
11894: PPUSH
11895: CALL_OW 88
// DialogueOff ;
11899: CALL_OW 7
// wait ( 0 0$2 ) ;
11903: LD_INT 70
11905: PPUSH
11906: CALL_OW 67
// isAlarm := true ;
11910: LD_ADDR_EXP 17
11914: PUSH
11915: LD_INT 1
11917: ST_TO_ADDR
// end ;
11918: PPOPN 1
11920: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
11921: LD_EXP 17
11925: NOT
11926: PUSH
11927: LD_EXP 38
11931: PPUSH
11932: CALL_OW 302
11936: AND
11937: PUSH
11938: LD_EXP 38
11942: PPUSH
11943: CALL_OW 255
11947: PUSH
11948: LD_INT 2
11950: EQUAL
11951: AND
11952: PUSH
11953: LD_EXP 26
11957: AND
11958: PUSH
11959: LD_EXP 28
11963: NOT
11964: AND
11965: PUSH
11966: LD_EXP 27
11970: NOT
11971: AND
11972: PUSH
11973: LD_EXP 30
11977: NOT
11978: AND
11979: PUSH
11980: LD_EXP 38
11984: PPUSH
11985: LD_INT 165
11987: PPUSH
11988: CALL 18471 0 2
11992: AND
11993: IFFALSE 12125
11995: GO 11997
11997: DISABLE
// begin enable ;
11998: ENABLE
// InGameOn ;
11999: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12003: LD_EXP 38
12007: PPUSH
12008: LD_INT 5
12010: PPUSH
12011: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12015: LD_INT 165
12017: PPUSH
12018: LD_INT 5
12020: PPUSH
12021: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12025: LD_EXP 38
12029: PPUSH
12030: LD_INT 165
12032: PPUSH
12033: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12037: LD_INT 35
12039: PPUSH
12040: CALL_OW 67
// until IsInUnit ( Givi ) ;
12044: LD_EXP 38
12048: PPUSH
12049: CALL_OW 310
12053: IFFALSE 12037
// case Query ( GiviInLaundry ) of 1 :
12055: LD_STRING GiviInLaundry
12057: PPUSH
12058: CALL_OW 97
12062: PUSH
12063: LD_INT 1
12065: DOUBLE
12066: EQUAL
12067: IFTRUE 12071
12069: GO 12078
12071: POP
// SpawnGiviAsRussian ; 2 :
12072: CALL 1810 0 0
12076: GO 12090
12078: LD_INT 2
12080: DOUBLE
12081: EQUAL
12082: IFTRUE 12086
12084: GO 12089
12086: POP
// ; end ;
12087: GO 12090
12089: POP
// ComExitBuilding ( Givi ) ;
12090: LD_EXP 38
12094: PPUSH
12095: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12099: LD_EXP 38
12103: PPUSH
12104: LD_INT 2
12106: PPUSH
12107: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12111: LD_INT 165
12113: PPUSH
12114: LD_INT 3
12116: PPUSH
12117: CALL_OW 235
// InGameOff ;
12121: CALL_OW 9
// end ;
12125: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12126: LD_EXP 17
12130: NOT
12131: PUSH
12132: LD_EXP 28
12136: AND
12137: PUSH
12138: LD_EXP 38
12142: PPUSH
12143: CALL_OW 255
12147: PUSH
12148: LD_INT 2
12150: EQUAL
12151: AND
12152: PUSH
12153: LD_EXP 38
12157: PPUSH
12158: CALL_OW 248
12162: PUSH
12163: LD_INT 3
12165: EQUAL
12166: AND
12167: PUSH
12168: LD_EXP 38
12172: PPUSH
12173: LD_INT 119
12175: PPUSH
12176: CALL 18471 0 2
12180: AND
12181: PUSH
12182: LD_EXP 30
12186: NOT
12187: AND
12188: IFFALSE 12412
12190: GO 12192
12192: DISABLE
// begin InGameOn ;
12193: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12197: LD_EXP 38
12201: PPUSH
12202: LD_INT 3
12204: PPUSH
12205: CALL_OW 235
// ComEnterUnit ( Givi , ruLab ) ;
12209: LD_EXP 38
12213: PPUSH
12214: LD_INT 119
12216: PPUSH
12217: CALL_OW 120
// wait ( 0 0$1 ) ;
12221: LD_INT 35
12223: PPUSH
12224: CALL_OW 67
// DialogueOn ;
12228: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12232: LD_EXP 38
12236: PPUSH
12237: LD_STRING DG-Captive-1
12239: PPUSH
12240: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12244: LD_EXP 56
12248: PPUSH
12249: LD_STRING DCom-Captive-2
12251: PPUSH
12252: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12256: LD_EXP 38
12260: PPUSH
12261: LD_STRING DG-Captive-3
12263: PPUSH
12264: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12268: LD_EXP 56
12272: PPUSH
12273: LD_STRING DCom-Captive-4
12275: PPUSH
12276: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12280: LD_EXP 56
12284: PPUSH
12285: CALL_OW 64
// DialogueOff ;
12289: CALL_OW 7
// InGameOff ;
12293: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12297: LD_EXP 38
12301: PPUSH
12302: LD_INT 2
12304: PPUSH
12305: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12309: LD_EXP 38
12313: PPUSH
12314: CALL_OW 122
// if Aviradze then
12318: LD_EXP 47
12322: IFFALSE 12365
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12324: LD_ADDR_EXP 14
12328: PUSH
12329: LD_EXP 14
12333: PPUSH
12334: LD_EXP 47
12338: PPUSH
12339: CALL 63960 0 2
12343: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12344: LD_EXP 47
12348: PPUSH
12349: LD_INT 2
12351: PPUSH
12352: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12356: LD_EXP 47
12360: PPUSH
12361: CALL_OW 122
// end ; if Ibrahim then
12365: LD_EXP 40
12369: IFFALSE 12412
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12371: LD_ADDR_EXP 14
12375: PUSH
12376: LD_EXP 14
12380: PPUSH
12381: LD_EXP 40
12385: PPUSH
12386: CALL 63960 0 2
12390: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12391: LD_EXP 40
12395: PPUSH
12396: LD_INT 2
12398: PPUSH
12399: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12403: LD_EXP 40
12407: PPUSH
12408: CALL_OW 122
// end ; end ;
12412: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12413: LD_EXP 17
12417: NOT
12418: PUSH
12419: LD_EXP 27
12423: AND
12424: PUSH
12425: LD_EXP 37
12429: PPUSH
12430: CALL_OW 248
12434: PUSH
12435: LD_INT 3
12437: EQUAL
12438: AND
12439: PUSH
12440: LD_EXP 37
12444: PPUSH
12445: LD_INT 119
12447: PPUSH
12448: CALL 18471 0 2
12452: AND
12453: PUSH
12454: LD_EXP 30
12458: NOT
12459: AND
12460: IFFALSE 12734
12462: GO 12464
12464: DISABLE
// begin InGameOn ;
12465: CALL_OW 8
// SetSide ( Heike , 3 ) ;
12469: LD_EXP 37
12473: PPUSH
12474: LD_INT 3
12476: PPUSH
12477: CALL_OW 235
// ComEnterUnit ( Heike , ruLab ) ;
12481: LD_EXP 37
12485: PPUSH
12486: LD_INT 119
12488: PPUSH
12489: CALL_OW 120
// wait ( 0 0$1 ) ;
12493: LD_INT 35
12495: PPUSH
12496: CALL_OW 67
// DialogueOn ;
12500: CALL_OW 6
// if Aviradze and Ibrahim then
12504: LD_EXP 47
12508: PUSH
12509: LD_EXP 40
12513: AND
12514: IFFALSE 12530
// Say ( Heike , DH-Captive-a-1 ) else
12516: LD_EXP 37
12520: PPUSH
12521: LD_STRING DH-Captive-a-1
12523: PPUSH
12524: CALL_OW 88
12528: GO 12542
// Say ( Heike , DH-Captive-a-b-1 ) ;
12530: LD_EXP 37
12534: PPUSH
12535: LD_STRING DH-Captive-a-b-1
12537: PPUSH
12538: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
12542: LD_EXP 56
12546: PPUSH
12547: LD_STRING DCom-Captive-a-2
12549: PPUSH
12550: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
12554: LD_EXP 37
12558: PPUSH
12559: LD_STRING DH-Captive-a-3
12561: PPUSH
12562: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
12566: LD_EXP 56
12570: PPUSH
12571: LD_STRING DCom-Captive-a-4
12573: PPUSH
12574: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
12578: LD_EXP 37
12582: PPUSH
12583: LD_STRING DH-Captive-a-5
12585: PPUSH
12586: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-6 ) ;
12590: LD_EXP 56
12594: PPUSH
12595: LD_STRING DCom-Captive-a-6
12597: PPUSH
12598: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12602: LD_EXP 56
12606: PPUSH
12607: CALL_OW 64
// DialogueOff ;
12611: CALL_OW 7
// InGameOff ;
12615: CALL_OW 9
// SetSide ( Heike , 2 ) ;
12619: LD_EXP 37
12623: PPUSH
12624: LD_INT 2
12626: PPUSH
12627: CALL_OW 235
// ComExitBuilding ( Heike ) ;
12631: LD_EXP 37
12635: PPUSH
12636: CALL_OW 122
// if Aviradze then
12640: LD_EXP 47
12644: IFFALSE 12687
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12646: LD_ADDR_EXP 14
12650: PUSH
12651: LD_EXP 14
12655: PPUSH
12656: LD_EXP 47
12660: PPUSH
12661: CALL 63960 0 2
12665: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12666: LD_EXP 47
12670: PPUSH
12671: LD_INT 2
12673: PPUSH
12674: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12678: LD_EXP 47
12682: PPUSH
12683: CALL_OW 122
// end ; if Ibrahim then
12687: LD_EXP 40
12691: IFFALSE 12734
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12693: LD_ADDR_EXP 14
12697: PUSH
12698: LD_EXP 14
12702: PPUSH
12703: LD_EXP 40
12707: PPUSH
12708: CALL 63960 0 2
12712: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12713: LD_EXP 40
12717: PPUSH
12718: LD_INT 2
12720: PPUSH
12721: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12725: LD_EXP 40
12729: PPUSH
12730: CALL_OW 122
// end ; end ;
12734: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
12735: LD_INT 2
12737: PUSH
12738: LD_INT 25
12740: PUSH
12741: LD_INT 32
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: PUSH
12748: LD_INT 25
12750: PUSH
12751: LD_INT 34
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: LIST
12762: PPUSH
12763: CALL_OW 69
12767: IFFALSE 12779
12769: GO 12771
12771: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
12772: LD_STRING M1-weapons-out
12774: PPUSH
12775: CALL_OW 604
12779: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not contactWithAmerican and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
12780: LD_INT 2
12782: PPUSH
12783: LD_EXP 52
12787: PPUSH
12788: CALL_OW 292
12792: PUSH
12793: LD_EXP 37
12797: PPUSH
12798: LD_EXP 52
12802: PPUSH
12803: CALL_OW 296
12807: AND
12808: PUSH
12809: LD_EXP 25
12813: NOT
12814: AND
12815: PUSH
12816: LD_EXP 17
12820: NOT
12821: AND
12822: PUSH
12823: LD_EXP 30
12827: NOT
12828: AND
12829: IFFALSE 13628
12831: GO 12833
12833: DISABLE
12834: LD_INT 0
12836: PPUSH
12837: PPUSH
// begin DialogueOn ;
12838: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
12842: LD_EXP 52
12846: PPUSH
12847: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
12851: LD_EXP 52
12855: PPUSH
12856: LD_STRING DJy-Food-1
12858: PPUSH
12859: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
12863: LD_EXP 37
12867: PPUSH
12868: LD_STRING DH-Food-2
12870: PPUSH
12871: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
12875: LD_EXP 52
12879: PPUSH
12880: LD_STRING DJy-Food-3
12882: PPUSH
12883: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
12887: LD_EXP 52
12891: PPUSH
12892: LD_STRING DJy-Food-4
12894: PPUSH
12895: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
12899: LD_EXP 37
12903: PPUSH
12904: LD_STRING DH-Food-5
12906: PPUSH
12907: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
12911: LD_EXP 52
12915: PPUSH
12916: LD_STRING DJy-Food-6
12918: PPUSH
12919: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
12923: LD_EXP 52
12927: PPUSH
12928: LD_STRING DJy-Food-7
12930: PPUSH
12931: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
12935: LD_EXP 52
12939: PPUSH
12940: LD_STRING DJy-Food-8
12942: PPUSH
12943: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
12947: LD_EXP 37
12951: PPUSH
12952: LD_STRING DH-Food-9
12954: PPUSH
12955: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
12959: LD_EXP 52
12963: PPUSH
12964: LD_STRING DJy-Food-10
12966: PPUSH
12967: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
12971: LD_EXP 37
12975: PPUSH
12976: LD_STRING DH-Food-11
12978: PPUSH
12979: CALL_OW 88
// DialogueOff ;
12983: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
12987: LD_STRING M3
12989: PPUSH
12990: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
12994: LD_INT 5
12996: PPUSH
12997: LD_INT 215
12999: PPUSH
13000: LD_INT 117
13002: PPUSH
13003: LD_INT 0
13005: PPUSH
13006: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13010: LD_INT 215
13012: PPUSH
13013: LD_INT 118
13015: PPUSH
13016: LD_INT 2
13018: PPUSH
13019: LD_INT 6
13021: NEG
13022: PPUSH
13023: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
13027: LD_INT 215
13029: PPUSH
13030: LD_INT 118
13032: PPUSH
13033: LD_INT 2
13035: PPUSH
13036: CALL_OW 331
// foodDelivered := false ;
13040: LD_ADDR_VAR 0 2
13044: PUSH
13045: LD_INT 0
13047: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13048: LD_INT 35
13050: PPUSH
13051: CALL_OW 67
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
13055: LD_ADDR_VAR 0 1
13059: PUSH
13060: LD_EXP 14
13064: PUSH
13065: LD_EXP 37
13069: UNION
13070: PPUSH
13071: LD_INT 91
13073: PUSH
13074: LD_EXP 52
13078: PUSH
13079: LD_INT 6
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: PUSH
13087: LD_INT 25
13089: PUSH
13090: LD_INT 33
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: PPUSH
13101: CALL_OW 72
13105: PUSH
13106: FOR_IN
13107: IFFALSE 13357
// if Carry ( i ) then
13109: LD_VAR 0 1
13113: PPUSH
13114: CALL_OW 281
13118: IFFALSE 13355
// begin DialogueOn ;
13120: CALL_OW 6
// foodDelivered := true ;
13124: LD_ADDR_VAR 0 2
13128: PUSH
13129: LD_INT 1
13131: ST_TO_ADDR
// case i of Heike :
13132: LD_VAR 0 1
13136: PUSH
13137: LD_EXP 37
13141: DOUBLE
13142: EQUAL
13143: IFTRUE 13147
13145: GO 13162
13147: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
13148: LD_EXP 37
13152: PPUSH
13153: LD_STRING DH-Food-12
13155: PPUSH
13156: CALL_OW 88
13160: GO 13338
13162: LD_EXP 42
13166: DOUBLE
13167: EQUAL
13168: IFTRUE 13172
13170: GO 13187
13172: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13173: LD_EXP 42
13177: PPUSH
13178: LD_STRING DK-Food-a-12
13180: PPUSH
13181: CALL_OW 88
13185: GO 13338
13187: LD_EXP 44
13191: DOUBLE
13192: EQUAL
13193: IFTRUE 13197
13195: GO 13212
13197: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13198: LD_EXP 44
13202: PPUSH
13203: LD_STRING DMar-Food-a-12
13205: PPUSH
13206: CALL_OW 88
13210: GO 13338
13212: LD_EXP 38
13216: DOUBLE
13217: EQUAL
13218: IFTRUE 13222
13220: GO 13237
13222: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13223: LD_EXP 38
13227: PPUSH
13228: LD_STRING DG-Food-a-14
13230: PPUSH
13231: CALL_OW 88
13235: GO 13338
13237: LD_EXP 39
13241: DOUBLE
13242: EQUAL
13243: IFTRUE 13247
13245: GO 13262
13247: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13248: LD_EXP 39
13252: PPUSH
13253: LD_STRING DM-Food-a-15
13255: PPUSH
13256: CALL_OW 88
13260: GO 13338
13262: LD_EXP 41
13266: DOUBLE
13267: EQUAL
13268: IFTRUE 13272
13270: GO 13287
13272: POP
// Say ( Kamil , DKam-Food-a-16 ) ; Sophia :
13273: LD_EXP 41
13277: PPUSH
13278: LD_STRING DKam-Food-a-16
13280: PPUSH
13281: CALL_OW 88
13285: GO 13338
13287: LD_EXP 43
13291: DOUBLE
13292: EQUAL
13293: IFTRUE 13297
13295: GO 13312
13297: POP
// Say ( Sophia , DS-Food-a-17 ) ; Kurt :
13298: LD_EXP 43
13302: PPUSH
13303: LD_STRING DS-Food-a-17
13305: PPUSH
13306: CALL_OW 88
13310: GO 13338
13312: LD_EXP 46
13316: DOUBLE
13317: EQUAL
13318: IFTRUE 13322
13320: GO 13337
13322: POP
// Say ( Kurt , DKs-Food-a-18 ) ; end ;
13323: LD_EXP 46
13327: PPUSH
13328: LD_STRING DKs-Food-a-18
13330: PPUSH
13331: CALL_OW 88
13335: GO 13338
13337: POP
// SetCargo ( i , mat_cans , 0 ) ;
13338: LD_VAR 0 1
13342: PPUSH
13343: LD_INT 1
13345: PPUSH
13346: LD_INT 0
13348: PPUSH
13349: CALL_OW 290
// break ;
13353: GO 13357
// end ;
13355: GO 13106
13357: POP
13358: POP
// until foodDelivered ;
13359: LD_VAR 0 2
13363: IFFALSE 13048
// givenFood := true ;
13365: LD_ADDR_EXP 33
13369: PUSH
13370: LD_INT 1
13372: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
13373: LD_EXP 52
13377: PPUSH
13378: LD_STRING DJy-Food-13
13380: PPUSH
13381: CALL_OW 88
// hasVirus := true ;
13385: LD_ADDR_EXP 31
13389: PUSH
13390: LD_INT 1
13392: ST_TO_ADDR
// if not americanContact then
13393: LD_EXP 10
13397: NOT
13398: IFFALSE 13448
// begin Say ( Heike , DH-Food-14 ) ;
13400: LD_EXP 37
13404: PPUSH
13405: LD_STRING DH-Food-14
13407: PPUSH
13408: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
13412: LD_EXP 52
13416: PPUSH
13417: LD_STRING DJy-Food-15
13419: PPUSH
13420: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
13424: LD_EXP 52
13428: PPUSH
13429: LD_STRING DJy-Food-16
13431: PPUSH
13432: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
13436: LD_EXP 52
13440: PPUSH
13441: LD_STRING DJy-Food-17
13443: PPUSH
13444: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
13448: LD_STRING M3-out
13450: PPUSH
13451: CALL_OW 337
// DialogueOff ;
13455: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
13459: LD_EXP 52
13463: PPUSH
13464: LD_INT 1
13466: PPUSH
13467: LD_INT 10
13469: PPUSH
13470: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
13474: LD_EXP 52
13478: PPUSH
13479: LD_INT 95
13481: PPUSH
13482: LD_INT 17
13484: PPUSH
13485: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13489: LD_INT 35
13491: PPUSH
13492: CALL_OW 67
// if not HasTask ( Jerry ) then
13496: LD_EXP 52
13500: PPUSH
13501: CALL_OW 314
13505: NOT
13506: IFFALSE 13523
// ComMoveXY ( Jerry , 95 , 17 ) ;
13508: LD_EXP 52
13512: PPUSH
13513: LD_INT 95
13515: PPUSH
13516: LD_INT 17
13518: PPUSH
13519: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
13523: LD_EXP 52
13527: PPUSH
13528: LD_INT 95
13530: PPUSH
13531: LD_INT 17
13533: PPUSH
13534: CALL_OW 307
13538: IFFALSE 13489
// SetCargo ( Jerry , mat_cans , 0 ) ;
13540: LD_EXP 52
13544: PPUSH
13545: LD_INT 1
13547: PPUSH
13548: LD_INT 0
13550: PPUSH
13551: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
13555: LD_ADDR_EXP 49
13559: PUSH
13560: LD_EXP 49
13564: PPUSH
13565: LD_EXP 52
13569: PPUSH
13570: CALL 63960 0 2
13574: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
13575: LD_ADDR_VAR 0 1
13579: PUSH
13580: LD_INT 22
13582: PUSH
13583: LD_INT 4
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 23
13592: PUSH
13593: LD_INT 1
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PPUSH
13604: CALL_OW 69
13608: PUSH
13609: FOR_IN
13610: IFFALSE 13626
// SetLives ( i , 1000 ) ;
13612: LD_VAR 0 1
13616: PPUSH
13617: LD_INT 1000
13619: PPUSH
13620: CALL_OW 234
13624: GO 13609
13626: POP
13627: POP
// end ;
13628: PPOPN 2
13630: END
// every 0 0$2 trigger hasExplosions marked gameStartEvent do var un , tmp ;
13631: LD_EXP 6
13635: IFFALSE 14066
13637: GO 13639
13639: DISABLE
13640: LD_INT 0
13642: PPUSH
13643: PPUSH
// begin tmp := [ ] ;
13644: LD_ADDR_VAR 0 2
13648: PUSH
13649: EMPTY
13650: ST_TO_ADDR
// uc_side := 3 ;
13651: LD_ADDR_OWVAR 20
13655: PUSH
13656: LD_INT 3
13658: ST_TO_ADDR
// uc_nation := 3 ;
13659: LD_ADDR_OWVAR 21
13663: PUSH
13664: LD_INT 3
13666: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
13667: LD_INT 1
13669: PPUSH
13670: LD_INT 8
13672: PPUSH
13673: CALL_OW 381
// un := CreateHuman ;
13677: LD_ADDR_VAR 0 1
13681: PUSH
13682: CALL_OW 44
13686: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
13687: LD_VAR 0 1
13691: PPUSH
13692: LD_INT 173
13694: PPUSH
13695: LD_INT 104
13697: PPUSH
13698: LD_INT 0
13700: PPUSH
13701: CALL_OW 48
// tmp := Join ( tmp , un ) ;
13705: LD_ADDR_VAR 0 2
13709: PUSH
13710: LD_VAR 0 2
13714: PPUSH
13715: LD_VAR 0 1
13719: PPUSH
13720: CALL 63960 0 2
13724: ST_TO_ADDR
// un := CreateHuman ;
13725: LD_ADDR_VAR 0 1
13729: PUSH
13730: CALL_OW 44
13734: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
13735: LD_VAR 0 1
13739: PPUSH
13740: LD_INT 73
13742: PPUSH
13743: CALL_OW 52
// tmp := Join ( tmp , un ) ;
13747: LD_ADDR_VAR 0 2
13751: PUSH
13752: LD_VAR 0 2
13756: PPUSH
13757: LD_VAR 0 1
13761: PPUSH
13762: CALL 63960 0 2
13766: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13767: LD_INT 35
13769: PPUSH
13770: CALL_OW 67
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 8 and UnitFilter ( tmp , [ f_see , 2 ] ) ;
13774: LD_EXP 42
13778: PPUSH
13779: CALL_OW 255
13783: PUSH
13784: LD_INT 2
13786: EQUAL
13787: PUSH
13788: LD_EXP 42
13792: PPUSH
13793: LD_INT 73
13795: PPUSH
13796: CALL_OW 296
13800: PUSH
13801: LD_INT 8
13803: LESS
13804: AND
13805: PUSH
13806: LD_VAR 0 2
13810: PPUSH
13811: LD_INT 101
13813: PUSH
13814: LD_INT 2
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PPUSH
13821: CALL_OW 72
13825: AND
13826: IFFALSE 13767
// InGameOn ;
13828: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
13832: LD_INT 73
13834: PPUSH
13835: CALL_OW 250
13839: PPUSH
13840: LD_INT 73
13842: PPUSH
13843: CALL_OW 251
13847: PPUSH
13848: LD_INT 2
13850: PPUSH
13851: LD_INT 9
13853: NEG
13854: PPUSH
13855: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
13859: LD_INT 73
13861: PPUSH
13862: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
13866: LD_EXP 42
13870: PPUSH
13871: LD_INT 73
13873: PPUSH
13874: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
13878: LD_EXP 42
13882: PPUSH
13883: LD_STRING DK-Plastic-1
13885: PPUSH
13886: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
13890: LD_EXP 42
13894: PPUSH
13895: LD_STRING DK-Plastic-2
13897: PPUSH
13898: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
13902: LD_EXP 42
13906: PPUSH
13907: LD_INT 73
13909: PPUSH
13910: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13914: LD_INT 35
13916: PPUSH
13917: CALL_OW 67
// until GetDistUnits ( Kaia , barExplosion ) < 6 ;
13921: LD_EXP 42
13925: PPUSH
13926: LD_INT 73
13928: PPUSH
13929: CALL_OW 296
13933: PUSH
13934: LD_INT 6
13936: LESS
13937: IFFALSE 13914
// ComHold ( Kaia ) ;
13939: LD_EXP 42
13943: PPUSH
13944: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
13948: LD_VAR 0 2
13952: PUSH
13953: LD_INT 1
13955: ARRAY
13956: PPUSH
13957: LD_STRING DRum-Plastic-3
13959: PPUSH
13960: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
13964: LD_VAR 0 2
13968: PUSH
13969: LD_INT 2
13971: ARRAY
13972: PPUSH
13973: LD_STRING DRum2-Plastic-4
13975: PPUSH
13976: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
13980: LD_VAR 0 2
13984: PUSH
13985: LD_INT 1
13987: ARRAY
13988: PPUSH
13989: LD_STRING DRum-Plastic-5
13991: PPUSH
13992: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
13996: LD_VAR 0 2
14000: PUSH
14001: LD_INT 2
14003: ARRAY
14004: PPUSH
14005: LD_STRING DRum2-Plastic-6
14007: PPUSH
14008: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14012: LD_EXP 42
14016: PPUSH
14017: LD_STRING DK-Plastic-7
14019: PPUSH
14020: CALL_OW 88
// InGameOff ;
14024: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14028: LD_INT 73
14030: PPUSH
14031: CALL_OW 250
14035: PPUSH
14036: LD_INT 73
14038: PPUSH
14039: CALL_OW 251
14043: PPUSH
14044: LD_INT 2
14046: PPUSH
14047: CALL_OW 331
// explosionsTakenByRussians := true ;
14051: LD_ADDR_EXP 21
14055: PUSH
14056: LD_INT 1
14058: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
14059: LD_STRING ExplosivesInfo
14061: PPUSH
14062: CALL_OW 97
// end ;
14066: PPOPN 2
14068: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do
14069: LD_EXP 21
14073: PUSH
14074: LD_EXP 42
14078: PPUSH
14079: CALL_OW 255
14083: PUSH
14084: LD_INT 2
14086: EQUAL
14087: AND
14088: PUSH
14089: LD_EXP 42
14093: PPUSH
14094: LD_INT 61
14096: PPUSH
14097: CALL 18471 0 2
14101: AND
14102: PUSH
14103: LD_EXP 17
14107: NOT
14108: AND
14109: PUSH
14110: LD_EXP 30
14114: NOT
14115: AND
14116: IFFALSE 14272
14118: GO 14120
14120: DISABLE
// begin InGameOn ;
14121: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
14125: LD_INT 61
14127: PPUSH
14128: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14132: LD_EXP 42
14136: PPUSH
14137: LD_INT 3
14139: PPUSH
14140: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
14144: LD_EXP 42
14148: PPUSH
14149: LD_INT 61
14151: PPUSH
14152: CALL_OW 120
// wait ( 0 0$2 ) ;
14156: LD_INT 70
14158: PPUSH
14159: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14163: LD_EXP 42
14167: PPUSH
14168: LD_STRING DK-Plastic-8
14170: PPUSH
14171: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14175: LD_EXP 58
14179: PUSH
14180: LD_INT 1
14182: ARRAY
14183: PPUSH
14184: LD_STRING DRuMch-Plastic-9
14186: PPUSH
14187: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14191: LD_EXP 42
14195: PPUSH
14196: LD_STRING DK-Plastic-10
14198: PPUSH
14199: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14203: LD_EXP 58
14207: PUSH
14208: LD_INT 1
14210: ARRAY
14211: PPUSH
14212: LD_STRING DRuMch-Plastic-a-11
14214: PPUSH
14215: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
14219: LD_EXP 42
14223: PPUSH
14224: LD_STRING DK-Plastic-a-12
14226: PPUSH
14227: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
14231: LD_EXP 58
14235: PUSH
14236: LD_INT 1
14238: ARRAY
14239: PPUSH
14240: LD_STRING DRuMch-Plastic-a-13
14242: PPUSH
14243: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
14247: LD_EXP 42
14251: PPUSH
14252: LD_INT 2
14254: PPUSH
14255: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14259: LD_EXP 42
14263: PPUSH
14264: CALL_OW 122
// InGameOff ;
14268: CALL_OW 9
// end ;
14272: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do
14273: LD_EXP 21
14277: PUSH
14278: LD_EXP 42
14282: PPUSH
14283: CALL_OW 255
14287: PUSH
14288: LD_INT 2
14290: EQUAL
14291: AND
14292: PUSH
14293: LD_EXP 42
14297: PPUSH
14298: LD_INT 196
14300: PPUSH
14301: CALL 18471 0 2
14305: AND
14306: PUSH
14307: LD_EXP 17
14311: NOT
14312: AND
14313: PUSH
14314: LD_EXP 30
14318: NOT
14319: AND
14320: IFFALSE 14652
14322: GO 14324
14324: DISABLE
// begin InGameOn ;
14325: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
14329: LD_INT 196
14331: PPUSH
14332: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14336: LD_EXP 42
14340: PPUSH
14341: LD_INT 3
14343: PPUSH
14344: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
14348: LD_EXP 42
14352: PPUSH
14353: LD_INT 196
14355: PPUSH
14356: CALL_OW 120
// wait ( 0 0$2 ) ;
14360: LD_INT 70
14362: PPUSH
14363: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14367: LD_EXP 42
14371: PPUSH
14372: LD_STRING DK-Plastic-8
14374: PPUSH
14375: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
14379: LD_EXP 59
14383: PUSH
14384: LD_INT 1
14386: ARRAY
14387: PPUSH
14388: LD_STRING DRuMch-Plastic-9
14390: PPUSH
14391: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14395: LD_EXP 42
14399: PPUSH
14400: LD_STRING DK-Plastic-10
14402: PPUSH
14403: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
14407: LD_EXP 59
14411: PUSH
14412: LD_INT 1
14414: ARRAY
14415: PPUSH
14416: LD_STRING DRuMch-Plastic-11
14418: PPUSH
14419: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
14423: LD_EXP 42
14427: PPUSH
14428: LD_STRING DK-Plastic-12
14430: PPUSH
14431: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
14435: LD_EXP 42
14439: PPUSH
14440: LD_STRING DK-Plastic-13
14442: PPUSH
14443: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
14447: LD_EXP 59
14451: PUSH
14452: LD_INT 1
14454: ARRAY
14455: PPUSH
14456: LD_STRING DRuMch-Plastic-14
14458: PPUSH
14459: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
14463: LD_EXP 60
14467: PPUSH
14468: LD_INT 167
14470: PPUSH
14471: LD_INT 34
14473: PPUSH
14474: LD_INT 3
14476: PPUSH
14477: LD_INT 0
14479: PPUSH
14480: CALL 66100 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14484: LD_EXP 60
14488: PPUSH
14489: LD_INT 196
14491: PPUSH
14492: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14496: LD_INT 35
14498: PPUSH
14499: CALL_OW 67
// if not HasTask ( Stiopa ) then
14503: LD_EXP 60
14507: PPUSH
14508: CALL_OW 314
14512: NOT
14513: IFFALSE 14527
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14515: LD_EXP 60
14519: PPUSH
14520: LD_INT 196
14522: PPUSH
14523: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
14527: LD_EXP 60
14531: PPUSH
14532: CALL_OW 310
14536: IFFALSE 14496
// Say ( Stiopa , DSpn-Plastic-15 ) ;
14538: LD_EXP 60
14542: PPUSH
14543: LD_STRING DSpn-Plastic-15
14545: PPUSH
14546: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
14550: LD_EXP 61
14554: PPUSH
14555: LD_STRING DLr-Plastic-16
14557: PPUSH
14558: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
14562: LD_EXP 42
14566: PPUSH
14567: LD_STRING DK-Plastic-17
14569: PPUSH
14570: CALL_OW 88
// wait ( 0 0$0.3 ) ;
14574: LD_INT 10
14576: PPUSH
14577: CALL_OW 67
// SetSide ( Kaia , 2 ) ;
14581: LD_EXP 42
14585: PPUSH
14586: LD_INT 2
14588: PPUSH
14589: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14593: LD_EXP 42
14597: PPUSH
14598: CALL_OW 122
// InGameOff ;
14602: CALL_OW 9
// explosionsTakenByRussians := false ;
14606: LD_ADDR_EXP 21
14610: PUSH
14611: LD_INT 0
14613: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
14614: LD_INT 170
14616: PPUSH
14617: LD_INT 28
14619: PPUSH
14620: LD_INT 2
14622: PPUSH
14623: LD_INT 6
14625: NEG
14626: PPUSH
14627: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
14631: LD_INT 170
14633: PPUSH
14634: LD_INT 28
14636: PPUSH
14637: LD_INT 2
14639: PPUSH
14640: CALL_OW 331
// knowWhereExplosivesAre := true ;
14644: LD_ADDR_EXP 34
14648: PUSH
14649: LD_INT 1
14651: ST_TO_ADDR
// end ;
14652: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
14653: LD_EXP 34
14657: PUSH
14658: LD_EXP 42
14662: PPUSH
14663: CALL_OW 255
14667: PUSH
14668: LD_INT 2
14670: EQUAL
14671: AND
14672: PUSH
14673: LD_EXP 42
14677: PPUSH
14678: LD_INT 195
14680: PPUSH
14681: CALL 18471 0 2
14685: AND
14686: PUSH
14687: LD_EXP 17
14691: NOT
14692: AND
14693: PUSH
14694: LD_EXP 30
14698: NOT
14699: AND
14700: IFFALSE 14799
14702: GO 14704
14704: DISABLE
// begin InGameOn ;
14705: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
14709: LD_EXP 42
14713: PPUSH
14714: LD_INT 3
14716: PPUSH
14717: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
14721: LD_EXP 42
14725: PPUSH
14726: LD_INT 195
14728: PPUSH
14729: CALL_OW 120
// wait ( 0 0$1 ) ;
14733: LD_INT 35
14735: PPUSH
14736: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
14740: LD_EXP 42
14744: PPUSH
14745: LD_STRING DK-Plastic-18
14747: PPUSH
14748: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
14752: LD_STRING ExplosivesInfoUsage
14754: PPUSH
14755: CALL_OW 97
// SetSide ( Kaia , 2 ) ;
14759: LD_EXP 42
14763: PPUSH
14764: LD_INT 2
14766: PPUSH
14767: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14771: LD_EXP 42
14775: PPUSH
14776: CALL_OW 122
// InGameOff ;
14780: CALL_OW 9
// hasExplosionCollected := true ;
14784: LD_ADDR_EXP 23
14788: PUSH
14789: LD_INT 1
14791: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
14792: LD_STRING M1-explosive-out
14794: PPUSH
14795: CALL_OW 337
// end ;
14799: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
14800: LD_EXP 23
14804: PUSH
14805: LD_EXP 17
14809: NOT
14810: AND
14811: PUSH
14812: LD_EXP 30
14816: NOT
14817: AND
14818: IFFALSE 14993
14820: GO 14822
14822: DISABLE
14823: LD_INT 0
14825: PPUSH
14826: PPUSH
// begin for i in importantBuildingsList do
14827: LD_ADDR_VAR 0 1
14831: PUSH
14832: LD_EXP 35
14836: PUSH
14837: FOR_IN
14838: IFFALSE 14854
// MarkBuilding ( i , true ) ;
14840: LD_VAR 0 1
14844: PPUSH
14845: LD_INT 1
14847: PPUSH
14848: CALL 18845 0 2
14852: GO 14837
14854: POP
14855: POP
// repeat wait ( 0 0$1 ) ;
14856: LD_INT 35
14858: PPUSH
14859: CALL_OW 67
// for i in importantBuildingsList do
14863: LD_ADDR_VAR 0 1
14867: PUSH
14868: LD_EXP 35
14872: PUSH
14873: FOR_IN
14874: IFFALSE 14984
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
14876: LD_EXP 37
14880: PUSH
14881: LD_EXP 14
14885: UNION
14886: PPUSH
14887: LD_INT 22
14889: PUSH
14890: LD_INT 2
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 21
14899: PUSH
14900: LD_INT 1
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: LD_INT 91
14909: PUSH
14910: LD_VAR 0 1
14914: PUSH
14915: LD_INT 6
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: LIST
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: LIST
14927: PPUSH
14928: CALL_OW 72
14932: IFFALSE 14982
// begin CenterNowOnUnits ( i ) ;
14934: LD_VAR 0 1
14938: PPUSH
14939: CALL_OW 87
// PlaceExplosives ( i ) ;
14943: LD_VAR 0 1
14947: PPUSH
14948: CALL 18742 0 1
// MarkBuilding ( i , false ) ;
14952: LD_VAR 0 1
14956: PPUSH
14957: LD_INT 0
14959: PPUSH
14960: CALL 18845 0 2
// importantBuildingsList := importantBuildingsList diff i ;
14964: LD_ADDR_EXP 35
14968: PUSH
14969: LD_EXP 35
14973: PUSH
14974: LD_VAR 0 1
14978: DIFF
14979: ST_TO_ADDR
// continue ;
14980: GO 14873
// end ; end ;
14982: GO 14873
14984: POP
14985: POP
// until not importantBuildingsList ;
14986: LD_EXP 35
14990: NOT
14991: IFFALSE 14856
// end ;
14993: PPOPN 2
14995: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
14996: LD_EXP 14
15000: PPUSH
15001: LD_INT 22
15003: PUSH
15004: LD_INT 2
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PUSH
15011: LD_INT 95
15013: PUSH
15014: LD_INT 23
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PPUSH
15025: CALL_OW 72
15029: PUSH
15030: LD_EXP 37
15034: PPUSH
15035: CALL_OW 302
15039: AND
15040: PUSH
15041: LD_EXP 30
15045: NOT
15046: AND
15047: IFFALSE 15075
15049: GO 15051
15051: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
15052: LD_EXP 37
15056: PPUSH
15057: LD_STRING DH-End-1
15059: PPUSH
15060: CALL_OW 88
// if not activeExplosives then
15064: LD_EXP 36
15068: NOT
15069: IFFALSE 15075
// Explode ;
15071: CALL 21302 0 0
// end ;
15075: END
// function SayHEmpty ( ) ; begin
15076: LD_INT 0
15078: PPUSH
// case rand ( 1 , 3 ) of 1 :
15079: LD_INT 1
15081: PPUSH
15082: LD_INT 3
15084: PPUSH
15085: CALL_OW 12
15089: PUSH
15090: LD_INT 1
15092: DOUBLE
15093: EQUAL
15094: IFTRUE 15098
15096: GO 15113
15098: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
15099: LD_EXP 37
15103: PPUSH
15104: LD_STRING DH-Empty-1
15106: PPUSH
15107: CALL_OW 88
15111: GO 15160
15113: LD_INT 2
15115: DOUBLE
15116: EQUAL
15117: IFTRUE 15121
15119: GO 15136
15121: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
15122: LD_EXP 37
15126: PPUSH
15127: LD_STRING DH-Empty-2
15129: PPUSH
15130: CALL_OW 88
15134: GO 15160
15136: LD_INT 3
15138: DOUBLE
15139: EQUAL
15140: IFTRUE 15144
15142: GO 15159
15144: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
15145: LD_EXP 37
15149: PPUSH
15150: LD_STRING DH-Empty-3
15152: PPUSH
15153: CALL_OW 88
15157: GO 15160
15159: POP
// end ;
15160: LD_VAR 0 1
15164: RET
// function SayHVisited ( ) ; begin
15165: LD_INT 0
15167: PPUSH
// case rand ( 1 , 3 ) of 1 :
15168: LD_INT 1
15170: PPUSH
15171: LD_INT 3
15173: PPUSH
15174: CALL_OW 12
15178: PUSH
15179: LD_INT 1
15181: DOUBLE
15182: EQUAL
15183: IFTRUE 15187
15185: GO 15202
15187: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
15188: LD_EXP 37
15192: PPUSH
15193: LD_STRING DH-Visited-1
15195: PPUSH
15196: CALL_OW 88
15200: GO 15249
15202: LD_INT 2
15204: DOUBLE
15205: EQUAL
15206: IFTRUE 15210
15208: GO 15225
15210: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
15211: LD_EXP 37
15215: PPUSH
15216: LD_STRING DH-Visited-2
15218: PPUSH
15219: CALL_OW 88
15223: GO 15249
15225: LD_INT 3
15227: DOUBLE
15228: EQUAL
15229: IFTRUE 15233
15231: GO 15248
15233: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
15234: LD_EXP 37
15238: PPUSH
15239: LD_STRING DH-Visited-3
15241: PPUSH
15242: CALL_OW 88
15246: GO 15249
15248: POP
// end ;
15249: LD_VAR 0 1
15253: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
15254: LD_EXP 17
15258: NOT
15259: PUSH
15260: LD_EXP 15
15264: AND
15265: PUSH
15266: LD_EXP 37
15270: PPUSH
15271: CALL_OW 255
15275: PUSH
15276: LD_INT 2
15278: EQUAL
15279: AND
15280: PUSH
15281: LD_EXP 37
15285: PPUSH
15286: CALL_OW 302
15290: AND
15291: PUSH
15292: LD_EXP 37
15296: PPUSH
15297: CALL_OW 316
15301: AND
15302: PUSH
15303: LD_EXP 30
15307: NOT
15308: AND
15309: IFFALSE 15375
15311: GO 15313
15313: DISABLE
15314: LD_INT 0
15316: PPUSH
// begin enable ;
15317: ENABLE
// for i in entranceAllowedList do
15318: LD_ADDR_VAR 0 1
15322: PUSH
15323: LD_EXP 15
15327: PUSH
15328: FOR_IN
15329: IFFALSE 15373
// if InEntrance ( Heike , i ) then
15331: LD_EXP 37
15335: PPUSH
15336: LD_VAR 0 1
15340: PPUSH
15341: CALL 18471 0 2
15345: IFFALSE 15371
// begin disable ( entranceEvent ) ;
15347: LD_INT 1
15349: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
15350: LD_VAR 0 1
15354: PPUSH
15355: CALL 15378 0 1
// wait ( 0 0$3 ) ;
15359: LD_INT 105
15361: PPUSH
15362: CALL_OW 67
// enable ( entranceEvent ) ;
15366: LD_INT 1
15368: ENABLE_MARKED
// break ;
15369: GO 15373
// end ;
15371: GO 15328
15373: POP
15374: POP
// end ;
15375: PPOPN 1
15377: END
// function HeikeEnterBuilding ( building ) ; var tmp ; begin
15378: LD_INT 0
15380: PPUSH
15381: PPUSH
// if not building then
15382: LD_VAR 0 1
15386: NOT
15387: IFFALSE 15391
// exit ;
15389: GO 17968
// if building in entranceVisitedList then
15391: LD_VAR 0 1
15395: PUSH
15396: LD_EXP 16
15400: IN
15401: IFFALSE 15409
// begin SayHVisited ( ) ;
15403: CALL 15165 0 0
// exit ;
15407: GO 17968
// end ; case Query ( EnterBuilding ) of 1 :
15409: LD_STRING EnterBuilding
15411: PPUSH
15412: CALL_OW 97
15416: PUSH
15417: LD_INT 1
15419: DOUBLE
15420: EQUAL
15421: IFTRUE 15425
15423: GO 15428
15425: POP
// ; 2 :
15426: GO 15442
15428: LD_INT 2
15430: DOUBLE
15431: EQUAL
15432: IFTRUE 15436
15434: GO 15441
15436: POP
// exit ; end ;
15437: GO 17968
15439: GO 15442
15441: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
15442: LD_ADDR_EXP 16
15446: PUSH
15447: LD_EXP 16
15451: PPUSH
15452: LD_VAR 0 1
15456: PPUSH
15457: CALL 63960 0 2
15461: ST_TO_ADDR
// InGameOn ;
15462: CALL_OW 8
// SetSide ( Heike , 5 ) ;
15466: LD_EXP 37
15470: PPUSH
15471: LD_INT 5
15473: PPUSH
15474: CALL_OW 235
// SetSide ( building , 5 ) ;
15478: LD_VAR 0 1
15482: PPUSH
15483: LD_INT 5
15485: PPUSH
15486: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
15490: LD_EXP 37
15494: PPUSH
15495: LD_VAR 0 1
15499: PPUSH
15500: CALL_OW 120
// wait ( 0 0$3 ) ;
15504: LD_INT 105
15506: PPUSH
15507: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
15511: LD_ADDR_VAR 0 3
15515: PUSH
15516: LD_INT 165
15518: PUSH
15519: LD_INT 106
15521: PUSH
15522: LD_INT 135
15524: PUSH
15525: LD_INT 162
15527: PUSH
15528: LD_INT 61
15530: PUSH
15531: LD_INT 109
15533: PUSH
15534: LD_INT 169
15536: PUSH
15537: LD_INT 13
15539: PUSH
15540: LD_INT 147
15542: PUSH
15543: LD_INT 137
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: ST_TO_ADDR
// if not building in tmp then
15558: LD_VAR 0 1
15562: PUSH
15563: LD_VAR 0 3
15567: IN
15568: NOT
15569: IFFALSE 15577
// SayHEmpty ( ) else
15571: CALL 15076 0 0
15575: GO 17931
// case building of laundry :
15577: LD_VAR 0 1
15581: PUSH
15582: LD_INT 165
15584: DOUBLE
15585: EQUAL
15586: IFTRUE 15590
15588: GO 15694
15590: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
15591: LD_EXP 26
15595: PUSH
15596: LD_EXP 27
15600: NOT
15601: AND
15602: PUSH
15603: LD_EXP 28
15607: NOT
15608: AND
15609: IFFALSE 15664
// begin case Query ( HeikeInLaundry ) of 1 :
15611: LD_STRING HeikeInLaundry
15613: PPUSH
15614: CALL_OW 97
15618: PUSH
15619: LD_INT 1
15621: DOUBLE
15622: EQUAL
15623: IFTRUE 15627
15625: GO 15634
15627: POP
// SpawnHeikeAsRussian ; 2 :
15628: CALL 1709 0 0
15632: GO 15662
15634: LD_INT 2
15636: DOUBLE
15637: EQUAL
15638: IFTRUE 15642
15640: GO 15661
15642: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
15643: LD_ADDR_EXP 16
15647: PUSH
15648: LD_EXP 16
15652: PUSH
15653: LD_VAR 0 1
15657: DIFF
15658: ST_TO_ADDR
15659: GO 15662
15661: POP
// end else
15662: GO 15692
// begin entranceVisitedList := entranceVisitedList diff building ;
15664: LD_ADDR_EXP 16
15668: PUSH
15669: LD_EXP 16
15673: PUSH
15674: LD_VAR 0 1
15678: DIFF
15679: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
15680: LD_EXP 37
15684: PPUSH
15685: LD_STRING DH-Locked
15687: PPUSH
15688: CALL_OW 88
// end ; end ; dougBar :
15692: GO 17931
15694: LD_INT 106
15696: DOUBLE
15697: EQUAL
15698: IFTRUE 15702
15700: GO 16054
15702: POP
// begin if contactWithAmerican and americanContact then
15703: LD_EXP 25
15707: PUSH
15708: LD_EXP 10
15712: AND
15713: IFFALSE 15777
// begin Say ( Heike , DH-Escort-a-1 ) ;
15715: LD_EXP 37
15719: PPUSH
15720: LD_STRING DH-Escort-a-1
15722: PPUSH
15723: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
15727: LD_EXP 51
15731: PPUSH
15732: LD_STRING DCa-Escort-a-2
15734: PPUSH
15735: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
15739: LD_EXP 51
15743: PPUSH
15744: LD_STRING DCa-Escort-a-3
15746: PPUSH
15747: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
15751: LD_EXP 37
15755: PPUSH
15756: LD_STRING DH-Escort-a-4
15758: PPUSH
15759: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
15763: LD_EXP 37
15767: PPUSH
15768: LD_STRING DH-Escort-a-5
15770: PPUSH
15771: CALL_OW 88
// end else
15775: GO 16011
// if contactWithAmerican then
15777: LD_EXP 25
15781: IFFALSE 15821
// begin Say ( Heike , DH-Escort-b-1 ) ;
15783: LD_EXP 37
15787: PPUSH
15788: LD_STRING DH-Escort-b-1
15790: PPUSH
15791: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
15795: LD_EXP 51
15799: PPUSH
15800: LD_STRING DCa-Escort-b-2
15802: PPUSH
15803: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
15807: LD_EXP 51
15811: PPUSH
15812: LD_STRING DCa-Escort-b-3
15814: PPUSH
15815: CALL_OW 88
// end else
15819: GO 16011
// begin Say ( Doug , DCa-Deal-a-1 ) ;
15821: LD_EXP 51
15825: PPUSH
15826: LD_STRING DCa-Deal-a-1
15828: PPUSH
15829: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
15833: LD_EXP 51
15837: PPUSH
15838: LD_STRING DCa-Deal-a-2
15840: PPUSH
15841: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
15845: LD_EXP 37
15849: PPUSH
15850: LD_STRING DH-Deal-a-3
15852: PPUSH
15853: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
15857: LD_EXP 51
15861: PPUSH
15862: LD_STRING DCa-Deal-a-4
15864: PPUSH
15865: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
15869: LD_EXP 37
15873: PPUSH
15874: LD_STRING DH-Deal-a-5
15876: PPUSH
15877: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
15881: LD_EXP 51
15885: PPUSH
15886: LD_STRING DCa-Deal-a-6
15888: PPUSH
15889: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
15893: LD_EXP 51
15897: PPUSH
15898: LD_STRING DCa-Deal-a-7
15900: PPUSH
15901: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
15905: LD_EXP 51
15909: PPUSH
15910: LD_STRING DCa-Deal-a-8
15912: PPUSH
15913: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
15917: LD_EXP 51
15921: PPUSH
15922: LD_STRING DCa-Deal-a-9
15924: PPUSH
15925: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
15929: LD_EXP 51
15933: PPUSH
15934: LD_STRING DCa-Deal-a-10
15936: PPUSH
15937: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
15941: LD_EXP 51
15945: PPUSH
15946: LD_STRING DCa-Deal-a-11
15948: PPUSH
15949: CALL_OW 88
// wait ( 0 0$0.3 ) ;
15953: LD_INT 10
15955: PPUSH
15956: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
15960: LD_EXP 51
15964: PPUSH
15965: LD_STRING DCa-Deal-a-12
15967: PPUSH
15968: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
15972: LD_EXP 37
15976: PPUSH
15977: LD_STRING DH-Deal-a-13
15979: PPUSH
15980: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
15984: LD_EXP 37
15988: PPUSH
15989: LD_STRING DH-Deal-a-14
15991: PPUSH
15992: CALL_OW 88
// contactWithAmerican := true ;
15996: LD_ADDR_EXP 25
16000: PUSH
16001: LD_INT 1
16003: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
16004: LD_STRING M1-american-out
16006: PPUSH
16007: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
16011: LD_EXP 51
16015: PPUSH
16016: LD_INT 2
16018: PPUSH
16019: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
16023: LD_ADDR_EXP 14
16027: PUSH
16028: LD_EXP 14
16032: PPUSH
16033: LD_EXP 51
16037: PPUSH
16038: CALL 63960 0 2
16042: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
16043: LD_EXP 51
16047: PPUSH
16048: CALL_OW 122
// end ; usLab :
16052: GO 17931
16054: LD_INT 135
16056: DOUBLE
16057: EQUAL
16058: IFTRUE 16062
16060: GO 16378
16062: POP
// begin if hasSniperRifle then
16063: LD_EXP 11
16067: IFFALSE 16376
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
16069: LD_EXP 42
16073: PPUSH
16074: CALL_OW 302
16078: PUSH
16079: LD_EXP 42
16083: PUSH
16084: LD_EXP 14
16088: IN
16089: AND
16090: PUSH
16091: LD_EXP 42
16095: PPUSH
16096: CALL_OW 255
16100: PUSH
16101: LD_INT 2
16103: EQUAL
16104: AND
16105: IFFALSE 16350
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
16107: LD_EXP 37
16111: PPUSH
16112: LD_EXP 42
16116: PPUSH
16117: CALL_OW 296
16121: PUSH
16122: LD_INT 10
16124: GREATER
16125: IFFALSE 16150
// begin Query ( KaiaDistance ) ;
16127: LD_STRING KaiaDistance
16129: PPUSH
16130: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
16134: LD_ADDR_EXP 16
16138: PUSH
16139: LD_EXP 16
16143: PUSH
16144: LD_INT 135
16146: DIFF
16147: ST_TO_ADDR
// end else
16148: GO 16348
// begin SetSide ( Kaia , 5 ) ;
16150: LD_EXP 42
16154: PPUSH
16155: LD_INT 5
16157: PPUSH
16158: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
16162: LD_EXP 42
16166: PPUSH
16167: LD_INT 135
16169: PPUSH
16170: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16174: LD_INT 35
16176: PPUSH
16177: CALL_OW 67
// until IsInUnit ( Kaia ) ;
16181: LD_EXP 42
16185: PPUSH
16186: CALL_OW 310
16190: IFFALSE 16174
// Say ( Kaia , DK-Sniper-1 ) ;
16192: LD_EXP 42
16196: PPUSH
16197: LD_STRING DK-Sniper-1
16199: PPUSH
16200: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
16204: LD_EXP 42
16208: PPUSH
16209: CALL_OW 257
16213: PUSH
16214: LD_INT 34
16216: EQUAL
16217: PUSH
16218: LD_EXP 39
16222: PUSH
16223: LD_EXP 14
16227: IN
16228: AND
16229: PUSH
16230: LD_EXP 39
16234: PPUSH
16235: CALL_OW 302
16239: AND
16240: IFFALSE 16268
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
16242: LD_EXP 42
16246: PPUSH
16247: LD_STRING DK-Sniper-a-2
16249: PPUSH
16250: CALL_OW 88
// SetClass ( Mike , class_hunter ) ;
16254: LD_EXP 39
16258: PPUSH
16259: LD_INT 32
16261: PPUSH
16262: CALL_OW 336
// end else
16266: GO 16327
// begin Say ( Kaia , DK-Sniper-2 ) ;
16268: LD_EXP 42
16272: PPUSH
16273: LD_STRING DK-Sniper-2
16275: PPUSH
16276: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
16280: LD_EXP 42
16284: PPUSH
16285: LD_INT 32
16287: PPUSH
16288: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
16292: LD_EXP 44
16296: PPUSH
16297: CALL_OW 302
16301: PUSH
16302: LD_EXP 44
16306: PUSH
16307: LD_EXP 14
16311: IN
16312: AND
16313: IFFALSE 16327
// Say ( Markov , DMar-Sniper-3 ) ;
16315: LD_EXP 44
16319: PPUSH
16320: LD_STRING DMar-Sniper-3
16322: PPUSH
16323: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
16327: LD_EXP 42
16331: PPUSH
16332: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
16336: LD_EXP 42
16340: PPUSH
16341: LD_INT 2
16343: PPUSH
16344: CALL_OW 235
// end ; end else
16348: GO 16376
// begin entranceVisitedList := entranceVisitedList diff usLab ;
16350: LD_ADDR_EXP 16
16354: PUSH
16355: LD_EXP 16
16359: PUSH
16360: LD_INT 135
16362: DIFF
16363: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16364: LD_EXP 37
16368: PPUSH
16369: LD_STRING DH-Locked
16371: PPUSH
16372: CALL_OW 88
// end ; end ; end ; drugsLab :
16376: GO 17931
16378: LD_INT 162
16380: DOUBLE
16381: EQUAL
16382: IFTRUE 16386
16384: GO 16519
16386: POP
// begin if hasStimDrugs then
16387: LD_EXP 9
16391: IFFALSE 16505
// begin wait ( 0 0$1 ) ;
16393: LD_INT 35
16395: PPUSH
16396: CALL_OW 67
// if not hasStimDrugsCollected then
16400: LD_EXP 24
16404: NOT
16405: IFFALSE 16447
// begin Say ( Heike , DH-Lab-1 ) ;
16407: LD_EXP 37
16411: PPUSH
16412: LD_STRING DH-Lab-1
16414: PPUSH
16415: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
16419: LD_INT 5
16421: PPUSH
16422: LD_INT 2
16424: PPUSH
16425: LD_INT 2
16427: PPUSH
16428: CALL_OW 322
// hasStimDrugsCollected := true ;
16432: LD_ADDR_EXP 24
16436: PUSH
16437: LD_INT 1
16439: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
16440: LD_STRING M1-drugs-out
16442: PPUSH
16443: CALL_OW 604
// end ; if not hasExplosionCollected then
16447: LD_EXP 23
16451: NOT
16452: IFFALSE 16470
// entranceVisitedList := entranceVisitedList diff drugsLab else
16454: LD_ADDR_EXP 16
16458: PUSH
16459: LD_EXP 16
16463: PUSH
16464: LD_INT 162
16466: DIFF
16467: ST_TO_ADDR
16468: GO 16503
// begin wait ( 0 0$3 ) ;
16470: LD_INT 105
16472: PPUSH
16473: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
16477: LD_EXP 37
16481: PPUSH
16482: LD_STRING DH-Lab-2
16484: PPUSH
16485: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
16489: LD_STRING M1-drugsLab-out
16491: PPUSH
16492: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
16496: LD_INT 162
16498: PPUSH
16499: CALL 18742 0 1
// end ; end else
16503: GO 16517
// Say ( Heike , DH-Locked ) ;
16505: LD_EXP 37
16509: PPUSH
16510: LD_STRING DH-Locked
16512: PPUSH
16513: CALL_OW 88
// end ; ruFac :
16517: GO 17931
16519: LD_INT 61
16521: DOUBLE
16522: EQUAL
16523: IFTRUE 16527
16525: GO 16637
16527: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
16528: LD_EXP 44
16532: PPUSH
16533: CALL_OW 302
16537: PUSH
16538: LD_EXP 44
16542: PUSH
16543: LD_EXP 14
16547: IN
16548: NOT
16549: AND
16550: IFFALSE 16631
// begin Say ( Heike , DH-Krastyo-1 ) ;
16552: LD_EXP 37
16556: PPUSH
16557: LD_STRING DH-Krastyo-1
16559: PPUSH
16560: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
16564: LD_EXP 44
16568: PPUSH
16569: LD_STRING DMar-Krastyo-2
16571: PPUSH
16572: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
16576: LD_EXP 44
16580: PPUSH
16581: LD_STRING DMar-Krastyo-3
16583: PPUSH
16584: CALL_OW 88
// SetSide ( Markov , 2 ) ;
16588: LD_EXP 44
16592: PPUSH
16593: LD_INT 2
16595: PPUSH
16596: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
16600: LD_ADDR_EXP 14
16604: PUSH
16605: LD_EXP 14
16609: PPUSH
16610: LD_EXP 44
16614: PPUSH
16615: CALL 63960 0 2
16619: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
16620: LD_EXP 44
16624: PPUSH
16625: CALL_OW 122
// end else
16629: GO 16635
// SayHEmpty ( ) ;
16631: CALL 15076 0 0
// end ; ruBarKam :
16635: GO 17931
16637: LD_INT 109
16639: DOUBLE
16640: EQUAL
16641: IFTRUE 16645
16643: GO 16792
16645: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
16646: LD_EXP 41
16650: PPUSH
16651: CALL_OW 302
16655: PUSH
16656: LD_EXP 41
16660: PUSH
16661: LD_EXP 14
16665: IN
16666: NOT
16667: AND
16668: IFFALSE 16786
// begin Say ( Heike , DH-Kamil-1 ) ;
16670: LD_EXP 37
16674: PPUSH
16675: LD_STRING DH-Kamil-1
16677: PPUSH
16678: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
16682: LD_EXP 41
16686: PPUSH
16687: LD_STRING DKam-Kamil-2
16689: PPUSH
16690: CALL_OW 88
// if IsOk ( Sophia ) then
16694: LD_EXP 43
16698: PPUSH
16699: CALL_OW 302
16703: IFFALSE 16743
// if Sophia in heikeSquad then
16705: LD_EXP 43
16709: PUSH
16710: LD_EXP 14
16714: IN
16715: IFFALSE 16731
// Say ( Kamil , DKam-Kamil-a-3 ) else
16717: LD_EXP 41
16721: PPUSH
16722: LD_STRING DKam-Kamil-a-3
16724: PPUSH
16725: CALL_OW 88
16729: GO 16743
// Say ( Kamil , DKam-Kamil-3 ) ;
16731: LD_EXP 41
16735: PPUSH
16736: LD_STRING DKam-Kamil-3
16738: PPUSH
16739: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
16743: LD_EXP 41
16747: PPUSH
16748: LD_INT 2
16750: PPUSH
16751: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
16755: LD_ADDR_EXP 14
16759: PUSH
16760: LD_EXP 14
16764: PPUSH
16765: LD_EXP 41
16769: PPUSH
16770: CALL 63960 0 2
16774: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
16775: LD_EXP 41
16779: PPUSH
16780: CALL_OW 122
// end else
16784: GO 16790
// SayHEmpty ( ) ;
16786: CALL 15076 0 0
// end ; ruOutpost1 :
16790: GO 17931
16792: LD_INT 169
16794: DOUBLE
16795: EQUAL
16796: IFTRUE 16800
16798: GO 17142
16800: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
16801: LD_EXP 46
16805: PPUSH
16806: CALL_OW 302
16810: PUSH
16811: LD_EXP 46
16815: PUSH
16816: LD_EXP 14
16820: IN
16821: NOT
16822: AND
16823: IFFALSE 17136
// begin if hasMethanol then
16825: LD_EXP 13
16829: IFFALSE 17065
// begin Say ( Heike , DH-Kurt-1 ) ;
16831: LD_EXP 37
16835: PPUSH
16836: LD_STRING DH-Kurt-1
16838: PPUSH
16839: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
16843: LD_EXP 46
16847: PPUSH
16848: LD_STRING DKs-Kurt-2
16850: PPUSH
16851: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
16855: LD_EXP 38
16859: PPUSH
16860: LD_INT 169
16862: PPUSH
16863: CALL_OW 296
16867: PUSH
16868: LD_INT 10
16870: LESS
16871: PUSH
16872: LD_EXP 38
16876: PUSH
16877: LD_EXP 14
16881: IN
16882: AND
16883: IFFALSE 16960
// begin ComMoveXY ( Givi , 100 , 37 ) ;
16885: LD_EXP 38
16889: PPUSH
16890: LD_INT 100
16892: PPUSH
16893: LD_INT 37
16895: PPUSH
16896: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
16900: LD_EXP 38
16904: PPUSH
16905: LD_INT 169
16907: PPUSH
16908: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
16912: LD_INT 35
16914: PPUSH
16915: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
16919: LD_EXP 38
16923: PPUSH
16924: LD_INT 169
16926: PPUSH
16927: CALL_OW 296
16931: PUSH
16932: LD_INT 7
16934: LESS
16935: IFFALSE 16912
// Say ( Givi , DG-Kurt-3 ) ;
16937: LD_EXP 38
16941: PPUSH
16942: LD_STRING DG-Kurt-3
16944: PPUSH
16945: CALL_OW 88
// ComStop ( Givi ) ;
16949: LD_EXP 38
16953: PPUSH
16954: CALL_OW 141
// end else
16958: GO 17063
// if GetDistUnits ( Olaf , ruOutpost1 ) < 10 and Olaf in heikeSquad then
16960: LD_EXP 45
16964: PPUSH
16965: LD_INT 169
16967: PPUSH
16968: CALL_OW 296
16972: PUSH
16973: LD_INT 10
16975: LESS
16976: PUSH
16977: LD_EXP 45
16981: PUSH
16982: LD_EXP 14
16986: IN
16987: AND
16988: IFFALSE 17063
// begin ComMoveXY ( Olaf , 100 , 37 ) ;
16990: LD_EXP 45
16994: PPUSH
16995: LD_INT 100
16997: PPUSH
16998: LD_INT 37
17000: PPUSH
17001: CALL_OW 111
// AddComTurnUnit ( Olaf , ruOutpost1 ) ;
17005: LD_EXP 45
17009: PPUSH
17010: LD_INT 169
17012: PPUSH
17013: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
17017: LD_INT 35
17019: PPUSH
17020: CALL_OW 67
// until GetDistUnits ( Olaf , ruOutpost1 ) < 7 ;
17024: LD_EXP 45
17028: PPUSH
17029: LD_INT 169
17031: PPUSH
17032: CALL_OW 296
17036: PUSH
17037: LD_INT 7
17039: LESS
17040: IFFALSE 17017
// Say ( Olaf , DO-Kurt-a-3 ) ;
17042: LD_EXP 45
17046: PPUSH
17047: LD_STRING DO-Kurt-a-3
17049: PPUSH
17050: CALL_OW 88
// ComStop ( Olaf ) ;
17054: LD_EXP 45
17058: PPUSH
17059: CALL_OW 141
// end ; end else
17063: GO 17093
// begin Say ( Heike , DH-Kurt-1 ) ;
17065: LD_EXP 37
17069: PPUSH
17070: LD_STRING DH-Kurt-1
17072: PPUSH
17073: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17077: LD_EXP 46
17081: PPUSH
17082: LD_STRING DKs-Kurt-2
17084: PPUSH
17085: CALL_OW 88
// SpawnAdditionalRuGuards ;
17089: CALL 3348 0 0
// end ; SetSide ( Kurt , 2 ) ;
17093: LD_EXP 46
17097: PPUSH
17098: LD_INT 2
17100: PPUSH
17101: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
17105: LD_ADDR_EXP 14
17109: PUSH
17110: LD_EXP 14
17114: PPUSH
17115: LD_EXP 46
17119: PPUSH
17120: CALL 63960 0 2
17124: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
17125: LD_EXP 46
17129: PPUSH
17130: CALL_OW 122
// end else
17134: GO 17140
// SayHEmpty ( ) ;
17136: CALL 15076 0 0
// end ; ruOutpostBar :
17140: GO 17931
17142: LD_INT 13
17144: DOUBLE
17145: EQUAL
17146: IFTRUE 17150
17148: GO 17196
17150: POP
// begin if not hasGuardPatrolPlan then
17151: LD_EXP 18
17155: NOT
17156: IFFALSE 17190
// begin Say ( Heike , DH-PatrolPlan ) ;
17158: LD_EXP 37
17162: PPUSH
17163: LD_STRING DH-PatrolPlan
17165: PPUSH
17166: CALL_OW 88
// hasGuardPatrolPlan := true ;
17170: LD_ADDR_EXP 18
17174: PUSH
17175: LD_INT 1
17177: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
17178: LD_INT 6
17180: PPUSH
17181: LD_INT 2
17183: PPUSH
17184: CALL_OW 343
// end else
17188: GO 17194
// SayHEmpty ( ) ;
17190: CALL 15076 0 0
// end ; ruKaiaBar :
17194: GO 17931
17196: LD_INT 147
17198: DOUBLE
17199: EQUAL
17200: IFTRUE 17204
17202: GO 17351
17204: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
17205: LD_EXP 42
17209: PPUSH
17210: CALL_OW 302
17214: PUSH
17215: LD_EXP 42
17219: PUSH
17220: LD_EXP 14
17224: IN
17225: NOT
17226: AND
17227: IFFALSE 17349
// begin Say ( Heike , DH-Kaia-1 ) ;
17229: LD_EXP 37
17233: PPUSH
17234: LD_STRING DH-Kaia-1
17236: PPUSH
17237: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
17241: LD_EXP 42
17245: PPUSH
17246: LD_STRING DK-Kaia-2
17248: PPUSH
17249: CALL_OW 88
// if hasSniperRifle then
17253: LD_EXP 11
17257: IFFALSE 17308
// begin if IsOk ( Markov ) then
17259: LD_EXP 44
17263: PPUSH
17264: CALL_OW 302
17268: IFFALSE 17284
// Say ( Kaia , DK-Kaia-3 ) else
17270: LD_EXP 42
17274: PPUSH
17275: LD_STRING DK-Kaia-3
17277: PPUSH
17278: CALL_OW 88
17282: GO 17296
// Say ( Kaia , DK-Kaia-a-3 ) ;
17284: LD_EXP 42
17288: PPUSH
17289: LD_STRING DK-Kaia-a-3
17291: PPUSH
17292: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
17296: LD_EXP 37
17300: PPUSH
17301: LD_STRING DH-Kaia-4
17303: PPUSH
17304: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
17308: LD_EXP 42
17312: PPUSH
17313: LD_INT 2
17315: PPUSH
17316: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
17320: LD_ADDR_EXP 14
17324: PUSH
17325: LD_EXP 14
17329: PPUSH
17330: LD_EXP 42
17334: PPUSH
17335: CALL 63960 0 2
17339: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
17340: LD_EXP 42
17344: PPUSH
17345: CALL_OW 122
// end ; end ; ruWeaponsBar :
17349: GO 17931
17351: LD_INT 137
17353: DOUBLE
17354: EQUAL
17355: IFTRUE 17359
17357: GO 17930
17359: POP
// begin if hasWeapons then
17360: LD_EXP 19
17364: IFFALSE 17916
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
17366: LD_ADDR_EXP 16
17370: PUSH
17371: LD_EXP 16
17375: PUSH
17376: LD_INT 137
17378: DIFF
17379: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
17380: LD_ADDR_VAR 0 3
17384: PUSH
17385: LD_EXP 14
17389: PPUSH
17390: LD_INT 91
17392: PUSH
17393: LD_EXP 37
17397: PUSH
17398: LD_INT 8
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: LIST
17405: PPUSH
17406: CALL_OW 72
17410: ST_TO_ADDR
// if not heikeSquad or not tmp then
17411: LD_EXP 14
17415: NOT
17416: PUSH
17417: LD_VAR 0 3
17421: NOT
17422: OR
17423: IFFALSE 17439
// Say ( Heike , DH-Weapons-Alone ) else
17425: LD_EXP 37
17429: PPUSH
17430: LD_STRING DH-Weapons-Alone
17432: PPUSH
17433: CALL_OW 88
17437: GO 17914
// begin entranceVisitedList := Join ( entranceVisitedList , ruWeaponsBar ) ;
17439: LD_ADDR_EXP 16
17443: PUSH
17444: LD_EXP 16
17448: PPUSH
17449: LD_INT 137
17451: PPUSH
17452: CALL 63960 0 2
17456: ST_TO_ADDR
// Say ( Heike , DH-Weapons-1 ) ;
17457: LD_EXP 37
17461: PPUSH
17462: LD_STRING DH-Weapons-1
17464: PPUSH
17465: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
17469: LD_EXP 37
17473: PPUSH
17474: LD_STRING DH-Weapons-2
17476: PPUSH
17477: CALL_OW 88
// if hasRevolver and Kaia in tmp then
17481: LD_EXP 8
17485: PUSH
17486: LD_EXP 42
17490: PUSH
17491: LD_VAR 0 3
17495: IN
17496: AND
17497: IFFALSE 17586
// begin SetSide ( Kaia , 5 ) ;
17499: LD_EXP 42
17503: PPUSH
17504: LD_INT 5
17506: PPUSH
17507: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
17511: LD_EXP 42
17515: PPUSH
17516: LD_INT 137
17518: PPUSH
17519: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17523: LD_INT 35
17525: PPUSH
17526: CALL_OW 67
// until IsInUnit ( Kaia ) ;
17530: LD_EXP 42
17534: PPUSH
17535: CALL_OW 310
17539: IFFALSE 17523
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
17541: LD_EXP 37
17545: PPUSH
17546: LD_STRING DH-Kaia-Revolver-2
17548: PPUSH
17549: CALL_OW 88
// SetClassKaiaRevolver ;
17553: CALL 1678 0 0
// hasRevolver := false ;
17557: LD_ADDR_EXP 8
17561: PUSH
17562: LD_INT 0
17564: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
17565: LD_EXP 42
17569: PPUSH
17570: LD_INT 2
17572: PPUSH
17573: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
17577: LD_EXP 42
17581: PPUSH
17582: CALL_OW 122
// end ; if Givi in tmp then
17586: LD_EXP 38
17590: PUSH
17591: LD_VAR 0 3
17595: IN
17596: IFFALSE 17737
// begin SetSide ( Givi , 5 ) ;
17598: LD_EXP 38
17602: PPUSH
17603: LD_INT 5
17605: PPUSH
17606: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
17610: LD_EXP 38
17614: PPUSH
17615: LD_INT 137
17617: PPUSH
17618: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17622: LD_INT 35
17624: PPUSH
17625: CALL_OW 67
// until IsInUnit ( Givi ) ;
17629: LD_EXP 38
17633: PPUSH
17634: CALL_OW 310
17638: IFFALSE 17622
// Say ( Givi , DG-Weapons-3 ) ;
17640: LD_EXP 38
17644: PPUSH
17645: LD_STRING DG-Weapons-3
17647: PPUSH
17648: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
17652: LD_EXP 37
17656: PPUSH
17657: LD_STRING DH-Weapons-4
17659: PPUSH
17660: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
17664: LD_EXP 38
17668: PPUSH
17669: LD_STRING DG-Weapons-5
17671: PPUSH
17672: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
17676: LD_EXP 38
17680: PPUSH
17681: LD_INT 11
17683: PPUSH
17684: CALL_OW 336
// ComExitBuilding ( Givi ) ;
17688: LD_EXP 38
17692: PPUSH
17693: CALL_OW 122
// SetSide ( Givi , 2 ) ;
17697: LD_EXP 38
17701: PPUSH
17702: LD_INT 2
17704: PPUSH
17705: CALL_OW 235
// if hasRevolver then
17709: LD_EXP 8
17713: IFFALSE 17735
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
17715: LD_EXP 37
17719: PPUSH
17720: LD_STRING DH-Kaia-Revolver-1
17722: PPUSH
17723: CALL_OW 88
// heikeHasRevolver := true ;
17727: LD_ADDR_EXP 20
17731: PUSH
17732: LD_INT 1
17734: ST_TO_ADDR
// end ; end else
17735: GO 17914
// if Kamil in tmp then
17737: LD_EXP 41
17741: PUSH
17742: LD_VAR 0 3
17746: IN
17747: IFFALSE 17876
// begin SetSide ( Kamil , 5 ) ;
17749: LD_EXP 41
17753: PPUSH
17754: LD_INT 5
17756: PPUSH
17757: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
17761: LD_EXP 41
17765: PPUSH
17766: LD_INT 137
17768: PPUSH
17769: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17773: LD_INT 35
17775: PPUSH
17776: CALL_OW 67
// until IsInUnit ( Kamil ) ;
17780: LD_EXP 41
17784: PPUSH
17785: CALL_OW 310
17789: IFFALSE 17773
// Say ( Kamil , DKam-Weapons-a-3 ) ;
17791: LD_EXP 41
17795: PPUSH
17796: LD_STRING DKam-Weapons-a-3
17798: PPUSH
17799: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
17803: LD_EXP 37
17807: PPUSH
17808: LD_STRING DH-Weapons-a-4
17810: PPUSH
17811: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
17815: LD_EXP 41
17819: PPUSH
17820: LD_INT 11
17822: PPUSH
17823: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
17827: LD_EXP 41
17831: PPUSH
17832: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
17836: LD_EXP 41
17840: PPUSH
17841: LD_INT 2
17843: PPUSH
17844: CALL_OW 235
// if hasRevolver then
17848: LD_EXP 8
17852: IFFALSE 17874
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
17854: LD_EXP 37
17858: PPUSH
17859: LD_STRING DH-Kaia-Revolver-1
17861: PPUSH
17862: CALL_OW 88
// heikeHasRevolver := true ;
17866: LD_ADDR_EXP 20
17870: PUSH
17871: LD_INT 1
17873: ST_TO_ADDR
// end ; end else
17874: GO 17914
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
17876: LD_EXP 37
17880: PPUSH
17881: LD_STRING DH-Weapons-Alone-2
17883: PPUSH
17884: CALL_OW 88
// if hasRevolver then
17888: LD_EXP 8
17892: IFFALSE 17914
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
17894: LD_EXP 37
17898: PPUSH
17899: LD_STRING DH-Kaia-Revolver-1a
17901: PPUSH
17902: CALL_OW 88
// heikeHasRevolver := true ;
17906: LD_ADDR_EXP 20
17910: PUSH
17911: LD_INT 1
17913: ST_TO_ADDR
// end ; end ; end ; end else
17914: GO 17928
// Say ( Heike , DH-Locked ) ;
17916: LD_EXP 37
17920: PPUSH
17921: LD_STRING DH-Locked
17923: PPUSH
17924: CALL_OW 88
// end ; end ;
17928: GO 17931
17930: POP
// ComExitBuilding ( Heike ) ;
17931: LD_EXP 37
17935: PPUSH
17936: CALL_OW 122
// SetSide ( Heike , 2 ) ;
17940: LD_EXP 37
17944: PPUSH
17945: LD_INT 2
17947: PPUSH
17948: CALL_OW 235
// SetSide ( building , 3 ) ;
17952: LD_VAR 0 1
17956: PPUSH
17957: LD_INT 3
17959: PPUSH
17960: CALL_OW 235
// InGameOff ;
17964: CALL_OW 9
// end ;
17968: LD_VAR 0 2
17972: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
17973: LD_EXP 30
17977: NOT
17978: PUSH
17979: LD_EXP 17
17983: NOT
17984: AND
17985: PUSH
17986: LD_INT 22
17988: PUSH
17989: LD_INT 5
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 21
17998: PUSH
17999: LD_INT 1
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PPUSH
18010: CALL_OW 69
18014: PUSH
18015: LD_INT 0
18017: EQUAL
18018: AND
18019: PUSH
18020: LD_INT 22
18022: PUSH
18023: LD_INT 4
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 21
18032: PUSH
18033: LD_INT 1
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PPUSH
18044: CALL_OW 69
18048: PUSH
18049: LD_INT 0
18051: EQUAL
18052: PUSH
18053: LD_EXP 25
18057: AND
18058: PUSH
18059: LD_EXP 25
18063: NOT
18064: OR
18065: AND
18066: IFFALSE 18098
18068: GO 18070
18070: DISABLE
// begin DialogueOn ;
18071: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
18075: LD_EXP 37
18079: PPUSH
18080: LD_STRING DH-Alarm-2
18082: PPUSH
18083: CALL_OW 88
// DialogueOff ;
18087: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
18091: LD_STRING M1-people-out
18093: PPUSH
18094: CALL_OW 337
// end ; end_of_file
18098: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
18099: LD_VAR 0 1
18103: PUSH
18104: LD_INT 3
18106: DOUBLE
18107: EQUAL
18108: IFTRUE 18112
18110: GO 18142
18112: POP
// begin repeat wait ( 0 0$1 ) ;
18113: LD_INT 35
18115: PPUSH
18116: CALL_OW 67
// CenterOnUnits ( Heike ) ;
18120: LD_EXP 37
18124: PPUSH
18125: CALL_OW 85
// until IsDying ( Heike ) ;
18129: LD_EXP 37
18133: PPUSH
18134: CALL_OW 303
18138: IFFALSE 18113
// end ; end ;
18140: GO 18143
18142: POP
// end ;
18143: PPOPN 1
18145: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
18146: LD_OWVAR 59
18150: IFFALSE 18154
// exit ;
18152: GO 18228
// if showPlaceEvent then
18154: LD_INT 4
18156: IFFALSE 18228
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
18158: LD_VAR 0 2
18162: PPUSH
18163: LD_VAR 0 3
18167: PPUSH
18168: LD_INT 2
18170: PPUSH
18171: LD_INT 6
18173: NEG
18174: PPUSH
18175: CALL_OW 330
// CenterOnXY ( x , y ) ;
18179: LD_VAR 0 2
18183: PPUSH
18184: LD_VAR 0 3
18188: PPUSH
18189: CALL_OW 84
// wait ( time ) ;
18193: LD_VAR 0 4
18197: PPUSH
18198: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
18202: LD_EXP 37
18206: PPUSH
18207: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
18211: LD_VAR 0 2
18215: PPUSH
18216: LD_VAR 0 3
18220: PPUSH
18221: LD_INT 2
18223: PPUSH
18224: CALL_OW 331
// end ; end ;
18228: PPOPN 7
18230: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
18231: LD_VAR 0 1
18235: PUSH
18236: LD_EXP 37
18240: EQUAL
18241: PUSH
18242: LD_EXP 5
18246: AND
18247: IFFALSE 18271
// if loseCounter then
18249: LD_EXP 32
18253: IFFALSE 18264
// YouLost ( HeikeNoSurrender ) else
18255: LD_STRING HeikeNoSurrender
18257: PPUSH
18258: CALL_OW 104
18262: GO 18271
// YouLost ( Heike ) ;
18264: LD_STRING Heike
18266: PPUSH
18267: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
18271: LD_VAR 0 1
18275: PPUSH
18276: CALL_OW 255
18280: PUSH
18281: LD_INT 2
18283: EQUAL
18284: PUSH
18285: LD_VAR 0 1
18289: PPUSH
18290: CALL_OW 247
18294: PUSH
18295: LD_INT 1
18297: EQUAL
18298: AND
18299: IFFALSE 18316
// loseCounter := Inc ( loseCounter ) ;
18301: LD_ADDR_EXP 32
18305: PUSH
18306: LD_EXP 32
18310: PPUSH
18311: CALL 65321 0 1
18315: ST_TO_ADDR
// end ;
18316: PPOPN 1
18318: END
// on Contact ( s1 , s2 ) do begin if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
18319: LD_VAR 0 1
18323: PUSH
18324: LD_INT 2
18326: EQUAL
18327: PUSH
18328: LD_VAR 0 2
18332: PUSH
18333: LD_INT 3
18335: EQUAL
18336: AND
18337: PUSH
18338: LD_VAR 0 1
18342: PUSH
18343: LD_INT 3
18345: EQUAL
18346: PUSH
18347: LD_VAR 0 2
18351: PUSH
18352: LD_INT 2
18354: EQUAL
18355: AND
18356: OR
18357: IFFALSE 18367
// isAlarm := true ;
18359: LD_ADDR_EXP 17
18363: PUSH
18364: LD_INT 1
18366: ST_TO_ADDR
// end ; end_of_file
18367: PPOPN 2
18369: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
18370: LD_INT 0
18372: PPUSH
18373: PPUSH
18374: PPUSH
// u1 := IsInUnit ( unit1 ) ;
18375: LD_ADDR_VAR 0 4
18379: PUSH
18380: LD_VAR 0 1
18384: PPUSH
18385: CALL_OW 310
18389: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
18390: LD_ADDR_VAR 0 5
18394: PUSH
18395: LD_VAR 0 2
18399: PPUSH
18400: CALL_OW 310
18404: ST_TO_ADDR
// result := u1 and u1 = u2 ;
18405: LD_ADDR_VAR 0 3
18409: PUSH
18410: LD_VAR 0 4
18414: PUSH
18415: LD_VAR 0 4
18419: PUSH
18420: LD_VAR 0 5
18424: EQUAL
18425: AND
18426: ST_TO_ADDR
// end ;
18427: LD_VAR 0 3
18431: RET
// export function ShowPlace ( x , y , time ) ; begin
18432: LD_INT 0
18434: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
18435: LD_INT 4
18437: PPUSH
18438: LD_VAR 0 1
18442: PPUSH
18443: LD_VAR 0 2
18447: PPUSH
18448: LD_VAR 0 3
18452: PPUSH
18453: LD_INT 0
18455: PPUSH
18456: LD_INT 0
18458: PPUSH
18459: LD_INT 0
18461: PPUSH
18462: CALL_OW 595
// end ;
18466: LD_VAR 0 4
18470: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
18471: LD_INT 0
18473: PPUSH
18474: PPUSH
18475: PPUSH
18476: PPUSH
18477: PPUSH
18478: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
18479: LD_VAR 0 1
18483: PPUSH
18484: CALL_OW 302
18488: NOT
18489: PUSH
18490: LD_VAR 0 2
18494: PPUSH
18495: CALL_OW 302
18499: NOT
18500: OR
18501: PUSH
18502: LD_VAR 0 2
18506: PPUSH
18507: CALL_OW 313
18511: PUSH
18512: LD_INT 6
18514: EQUAL
18515: OR
18516: IFFALSE 18520
// exit ;
18518: GO 18737
// btype := GetBType ( building ) ;
18520: LD_ADDR_VAR 0 8
18524: PUSH
18525: LD_VAR 0 2
18529: PPUSH
18530: CALL_OW 266
18534: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
18535: LD_VAR 0 8
18539: PUSH
18540: LD_INT 0
18542: PUSH
18543: LD_INT 1
18545: PUSH
18546: LD_INT 2
18548: PUSH
18549: LD_INT 4
18551: PUSH
18552: LD_INT 5
18554: PUSH
18555: LD_INT 3
18557: PUSH
18558: LD_INT 6
18560: PUSH
18561: LD_INT 7
18563: PUSH
18564: LD_INT 8
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: IN
18578: NOT
18579: IFFALSE 18583
// exit ;
18581: GO 18737
// x := GetX ( building ) ;
18583: LD_ADDR_VAR 0 4
18587: PUSH
18588: LD_VAR 0 2
18592: PPUSH
18593: CALL_OW 250
18597: ST_TO_ADDR
// y := GetY ( building ) ;
18598: LD_ADDR_VAR 0 5
18602: PUSH
18603: LD_VAR 0 2
18607: PPUSH
18608: CALL_OW 251
18612: ST_TO_ADDR
// d := GetDir ( building ) ;
18613: LD_ADDR_VAR 0 6
18617: PUSH
18618: LD_VAR 0 2
18622: PPUSH
18623: CALL_OW 254
18627: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
18628: LD_ADDR_VAR 0 7
18632: PUSH
18633: LD_VAR 0 4
18637: PPUSH
18638: LD_VAR 0 6
18642: PPUSH
18643: LD_INT 3
18645: PPUSH
18646: CALL_OW 272
18650: PUSH
18651: LD_VAR 0 5
18655: PPUSH
18656: LD_VAR 0 6
18660: PPUSH
18661: LD_INT 3
18663: PPUSH
18664: CALL_OW 273
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
18673: LD_VAR 0 7
18677: PUSH
18678: LD_INT 1
18680: ARRAY
18681: PPUSH
18682: LD_VAR 0 7
18686: PUSH
18687: LD_INT 2
18689: ARRAY
18690: PPUSH
18691: CALL_OW 488
18695: NOT
18696: IFFALSE 18700
// exit ;
18698: GO 18737
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
18700: LD_ADDR_VAR 0 3
18704: PUSH
18705: LD_VAR 0 1
18709: PPUSH
18710: LD_VAR 0 7
18714: PUSH
18715: LD_INT 1
18717: ARRAY
18718: PPUSH
18719: LD_VAR 0 7
18723: PUSH
18724: LD_INT 2
18726: ARRAY
18727: PPUSH
18728: CALL_OW 297
18732: PUSH
18733: LD_INT 4
18735: LESS
18736: ST_TO_ADDR
// end ;
18737: LD_VAR 0 3
18741: RET
// export function PlaceExplosives ( building ) ; begin
18742: LD_INT 0
18744: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
18745: LD_ADDR_EXP 29
18749: PUSH
18750: LD_EXP 29
18754: PPUSH
18755: LD_VAR 0 1
18759: PPUSH
18760: CALL 63960 0 2
18764: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
18765: LD_VAR 0 1
18769: PPUSH
18770: CALL_OW 250
18774: PPUSH
18775: LD_VAR 0 1
18779: PPUSH
18780: CALL_OW 251
18784: PPUSH
18785: LD_STRING PlantBomb
18787: PPUSH
18788: CALL_OW 366
// end ;
18792: LD_VAR 0 2
18796: RET
// export function CreateNature ; var i ; begin
18797: LD_INT 0
18799: PPUSH
18800: PPUSH
// PrepareFrog ;
18801: CALL 60442 0 0
// for i := 1 to 3 do
18805: LD_ADDR_VAR 0 2
18809: PUSH
18810: DOUBLE
18811: LD_INT 1
18813: DEC
18814: ST_TO_ADDR
18815: LD_INT 3
18817: PUSH
18818: FOR_TO
18819: IFFALSE 18838
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
18821: CALL_OW 44
18825: PPUSH
18826: LD_INT 24
18828: PPUSH
18829: LD_INT 0
18831: PPUSH
18832: CALL_OW 49
18836: GO 18818
18838: POP
18839: POP
// end ;
18840: LD_VAR 0 1
18844: RET
// export function MarkBuilding ( building , marker ) ; begin
18845: LD_INT 0
18847: PPUSH
// if marker then
18848: LD_VAR 0 2
18852: IFFALSE 18899
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
18854: LD_VAR 0 1
18858: PPUSH
18859: CALL_OW 250
18863: PPUSH
18864: LD_VAR 0 1
18868: PPUSH
18869: CALL_OW 251
18873: PPUSH
18874: LD_INT 2
18876: PPUSH
18877: LD_INT 3
18879: NEG
18880: PPUSH
18881: CALL_OW 330
// SetBName ( building , target ) ;
18885: LD_VAR 0 1
18889: PPUSH
18890: LD_STRING target
18892: PPUSH
18893: CALL_OW 500
// end else
18897: GO 18938
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
18899: LD_VAR 0 1
18903: PPUSH
18904: CALL_OW 250
18908: PPUSH
18909: LD_VAR 0 1
18913: PPUSH
18914: CALL_OW 251
18918: PPUSH
18919: LD_INT 2
18921: PPUSH
18922: CALL_OW 331
// SetBName ( building ,  ) ;
18926: LD_VAR 0 1
18930: PPUSH
18931: LD_STRING 
18933: PPUSH
18934: CALL_OW 500
// end ; end ; end_of_file
18938: LD_VAR 0 3
18942: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
18943: LD_INT 0
18945: PPUSH
// lockerCodeValid := false ;
18946: LD_ADDR_EXP 63
18950: PUSH
18951: LD_INT 0
18953: ST_TO_ADDR
// if not step then
18954: LD_LOC 1
18958: NOT
18959: IFFALSE 18969
// step := 1 ;
18961: LD_ADDR_LOC 1
18965: PUSH
18966: LD_INT 1
18968: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
18969: LD_STRING HEscape
18971: PUSH
18972: LD_LOC 1
18976: STR
18977: PPUSH
18978: CALL_OW 97
18982: PUSH
18983: LD_INT 1
18985: DOUBLE
18986: EQUAL
18987: IFTRUE 18991
18989: GO 18998
18991: POP
// LockerMinigameSearch ; 2 :
18992: CALL 19031 0 0
18996: GO 19014
18998: LD_INT 2
19000: DOUBLE
19001: EQUAL
19002: IFTRUE 19006
19004: GO 19013
19006: POP
// LockerMinigameSetCode ; end ;
19007: CALL 19105 0 0
19011: GO 19014
19013: POP
// if lockerCodeValid then
19014: LD_EXP 63
19018: IFFALSE 19022
// exit ;
19020: GO 19026
// StartLockerMinigame ;
19022: CALL 18943 0 0
// end ;
19026: LD_VAR 0 1
19030: RET
// function LockerMinigameSearch ; begin
19031: LD_INT 0
19033: PPUSH
// if code then
19034: LD_LOC 2
19038: IFFALSE 19054
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
19040: LD_EXP 37
19044: PPUSH
19045: LD_STRING DH-Escape-3-Hint-0
19047: PPUSH
19048: CALL_OW 88
// exit ;
19052: GO 19100
// end ; Randomize ;
19054: CALL_OW 10
// code := rand ( 1 , 5 ) ;
19058: LD_ADDR_LOC 2
19062: PUSH
19063: LD_INT 1
19065: PPUSH
19066: LD_INT 5
19068: PPUSH
19069: CALL_OW 12
19073: ST_TO_ADDR
// step := 2 ;
19074: LD_ADDR_LOC 1
19078: PUSH
19079: LD_INT 2
19081: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
19082: LD_EXP 37
19086: PPUSH
19087: LD_STRING DH-Escape-3-Hint-
19089: PUSH
19090: LD_LOC 2
19094: STR
19095: PPUSH
19096: CALL_OW 88
// end ;
19100: LD_VAR 0 1
19104: RET
// function LockerMinigameSetCode ; begin
19105: LD_INT 0
19107: PPUSH
// if not code then
19108: LD_LOC 2
19112: NOT
19113: IFFALSE 19123
// code := 0 ;
19115: LD_ADDR_LOC 2
19119: PUSH
19120: LD_INT 0
19122: ST_TO_ADDR
// lockerBusy := true ;
19123: LD_ADDR_EXP 64
19127: PUSH
19128: LD_INT 1
19130: ST_TO_ADDR
// InGameOff ;
19131: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
19135: LD_STRING initLockerMinigame("
19137: PUSH
19138: LD_LOC 2
19142: STR
19143: PUSH
19144: LD_STRING ")
19146: STR
19147: PPUSH
19148: CALL_OW 559
// step := 3 ;
19152: LD_ADDR_LOC 1
19156: PUSH
19157: LD_INT 3
19159: ST_TO_ADDR
// repeat wait ( 1 ) ;
19160: LD_INT 1
19162: PPUSH
19163: CALL_OW 67
// until not lockerBusy ;
19167: LD_EXP 64
19171: NOT
19172: IFFALSE 19160
// InGameOn ;
19174: CALL_OW 8
// if not lockerCodeValid then
19178: LD_EXP 63
19182: NOT
19183: IFFALSE 19209
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
19185: LD_EXP 37
19189: PPUSH
19190: LD_STRING DH-Escape-3-Fail-
19192: PUSH
19193: LD_INT 1
19195: PPUSH
19196: LD_INT 2
19198: PPUSH
19199: CALL_OW 12
19203: STR
19204: PPUSH
19205: CALL_OW 88
// end ; end_of_file
19209: LD_VAR 0 1
19213: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
19214: LD_VAR 0 2
19218: PUSH
19219: LD_INT 102
19221: EQUAL
19222: IFFALSE 19244
// begin lockerBusy := false ;
19224: LD_ADDR_EXP 64
19228: PUSH
19229: LD_INT 0
19231: ST_TO_ADDR
// lockerCodeValid := p3 ;
19232: LD_ADDR_EXP 63
19236: PUSH
19237: LD_VAR 0 3
19241: ST_TO_ADDR
// end else
19242: GO 19278
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
19244: LD_VAR 0 1
19248: PPUSH
19249: LD_VAR 0 2
19253: PPUSH
19254: LD_VAR 0 3
19258: PPUSH
19259: LD_VAR 0 4
19263: PPUSH
19264: LD_VAR 0 5
19268: PPUSH
19269: LD_VAR 0 6
19273: PPUSH
19274: CALL 67930 0 6
// end ;
19278: PPOPN 6
19280: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
19281: CALL 67901 0 0
// end ; end_of_file
19285: PPOPN 1
19287: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
19288: LD_EXP 17
19292: NOT
19293: PUSH
19294: LD_EXP 62
19298: AND
19299: IFFALSE 19703
19301: GO 19303
19303: DISABLE
19304: LD_INT 0
19306: PPUSH
19307: PPUSH
19308: PPUSH
19309: PPUSH
19310: PPUSH
// begin enable ;
19311: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
19312: LD_ADDR_VAR 0 3
19316: PUSH
19317: LD_INT 26
19319: PUSH
19320: LD_INT 27
19322: PUSH
19323: LD_INT 28
19325: PUSH
19326: LD_INT 29
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 30
19337: PUSH
19338: LD_INT 31
19340: PUSH
19341: LD_INT 32
19343: PUSH
19344: LD_INT 33
19346: PUSH
19347: LD_INT 34
19349: PUSH
19350: LD_INT 35
19352: PUSH
19353: LD_INT 36
19355: PUSH
19356: LD_INT 37
19358: PUSH
19359: LD_INT 38
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 39
19375: PUSH
19376: LD_INT 40
19378: PUSH
19379: LD_INT 41
19381: PUSH
19382: LD_INT 42
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 43
19393: PUSH
19394: LD_INT 44
19396: PUSH
19397: LD_INT 45
19399: PUSH
19400: LD_INT 46
19402: PUSH
19403: LD_INT 47
19405: PUSH
19406: LD_INT 46
19408: PUSH
19409: LD_INT 45
19411: PUSH
19412: LD_INT 44
19414: PUSH
19415: LD_INT 43
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: ST_TO_ADDR
// for i in ruPatrol do
19435: LD_ADDR_VAR 0 1
19439: PUSH
19440: LD_EXP 62
19444: PUSH
19445: FOR_IN
19446: IFFALSE 19701
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
19448: LD_ADDR_VAR 0 5
19452: PUSH
19453: LD_INT 22
19455: PUSH
19456: LD_INT 2
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 21
19465: PUSH
19466: LD_INT 1
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: LD_INT 91
19475: PUSH
19476: LD_VAR 0 1
19480: PUSH
19481: LD_INT 7
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: LIST
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: LIST
19493: PPUSH
19494: CALL_OW 69
19498: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
19499: LD_INT 2
19501: PPUSH
19502: LD_VAR 0 1
19506: PPUSH
19507: CALL_OW 292
19511: PUSH
19512: LD_VAR 0 5
19516: AND
19517: IFFALSE 19587
// begin if hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 then
19519: LD_EXP 30
19523: PUSH
19524: LD_VAR 0 1
19528: PPUSH
19529: LD_EXP 57
19533: PPUSH
19534: CALL_OW 296
19538: PUSH
19539: LD_INT 16
19541: LESS
19542: AND
19543: IFFALSE 19547
// continue ;
19545: GO 19445
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
19547: LD_VAR 0 1
19551: PPUSH
19552: LD_VAR 0 5
19556: PPUSH
19557: LD_VAR 0 1
19561: PPUSH
19562: CALL_OW 74
19566: PPUSH
19567: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
19571: LD_VAR 0 1
19575: PPUSH
19576: LD_VAR 0 5
19580: PPUSH
19581: CALL 19706 0 2
// continue ;
19585: GO 19445
// end ; if HasTask ( i ) then
19587: LD_VAR 0 1
19591: PPUSH
19592: CALL_OW 314
19596: IFFALSE 19600
// continue ;
19598: GO 19445
// tag := GetTag ( i ) ;
19600: LD_ADDR_VAR 0 4
19604: PUSH
19605: LD_VAR 0 1
19609: PPUSH
19610: CALL_OW 110
19614: ST_TO_ADDR
// if not tag then
19615: LD_VAR 0 4
19619: NOT
19620: IFFALSE 19633
// begin ComHold ( i ) ;
19622: LD_VAR 0 1
19626: PPUSH
19627: CALL_OW 140
// continue ;
19631: GO 19445
// end ; for j := 1 to points [ tag ] do
19633: LD_ADDR_VAR 0 2
19637: PUSH
19638: DOUBLE
19639: LD_INT 1
19641: DEC
19642: ST_TO_ADDR
19643: LD_VAR 0 3
19647: PUSH
19648: LD_VAR 0 4
19652: ARRAY
19653: PUSH
19654: FOR_TO
19655: IFFALSE 19697
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
19657: LD_VAR 0 1
19661: PPUSH
19662: LD_VAR 0 3
19666: PUSH
19667: LD_VAR 0 4
19671: ARRAY
19672: PUSH
19673: LD_VAR 0 2
19677: ARRAY
19678: PPUSH
19679: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
19683: LD_VAR 0 1
19687: PPUSH
19688: LD_INT 70
19690: PPUSH
19691: CALL_OW 202
// end ;
19695: GO 19654
19697: POP
19698: POP
// end ;
19699: GO 19445
19701: POP
19702: POP
// end ;
19703: PPOPN 5
19705: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
19706: LD_INT 0
19708: PPUSH
19709: PPUSH
19710: PPUSH
// if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
19711: LD_VAR 0 2
19715: PPUSH
19716: LD_INT 23
19718: PUSH
19719: LD_INT 3
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PPUSH
19726: CALL_OW 72
19730: PUSH
19731: LD_VAR 0 2
19735: PPUSH
19736: LD_INT 95
19738: PUSH
19739: LD_INT 61
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PPUSH
19746: CALL_OW 72
19750: OR
19751: IFFALSE 19755
// exit ;
19753: GO 20798
// if UnitFilter ( units , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
19755: LD_VAR 0 2
19759: PPUSH
19760: LD_INT 2
19762: PUSH
19763: LD_INT 25
19765: PUSH
19766: LD_INT 1
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 25
19775: PUSH
19776: LD_INT 11
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 25
19785: PUSH
19786: LD_INT 34
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 25
19795: PUSH
19796: LD_INT 32
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: PPUSH
19813: CALL_OW 72
19817: IFFALSE 19901
// begin DialogueOn ;
19819: CALL_OW 6
// case GetSex ( guard ) of sex_male :
19823: LD_VAR 0 1
19827: PPUSH
19828: CALL_OW 258
19832: PUSH
19833: LD_INT 1
19835: DOUBLE
19836: EQUAL
19837: IFTRUE 19841
19839: GO 19856
19841: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
19842: LD_VAR 0 1
19846: PPUSH
19847: LD_STRING DRum-Fail-3
19849: PPUSH
19850: CALL_OW 88
19854: GO 19880
19856: LD_INT 2
19858: DOUBLE
19859: EQUAL
19860: IFTRUE 19864
19862: GO 19879
19864: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
19865: LD_VAR 0 1
19869: PPUSH
19870: LD_STRING DRum-Fail-3
19872: PPUSH
19873: CALL_OW 88
19877: GO 19880
19879: POP
// DialogueOff ;
19880: CALL_OW 7
// wait ( 0 0$5 ) ;
19884: LD_INT 175
19886: PPUSH
19887: CALL_OW 67
// isAlarm := true ;
19891: LD_ADDR_EXP 17
19895: PUSH
19896: LD_INT 1
19898: ST_TO_ADDR
// exit ;
19899: GO 20798
// end ; DialogueOn ;
19901: CALL_OW 6
// CenterNowOnUnits ( guard ) ;
19905: LD_VAR 0 1
19909: PPUSH
19910: CALL_OW 87
// if not Heike in units then
19914: LD_EXP 37
19918: PUSH
19919: LD_VAR 0 2
19923: IN
19924: NOT
19925: IFFALSE 20275
// begin case GetSex ( guard ) of sex_male :
19927: LD_VAR 0 1
19931: PPUSH
19932: CALL_OW 258
19936: PUSH
19937: LD_INT 1
19939: DOUBLE
19940: EQUAL
19941: IFTRUE 19945
19943: GO 19960
19945: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
19946: LD_VAR 0 1
19950: PPUSH
19951: LD_STRING DRum-Guard-1
19953: PPUSH
19954: CALL_OW 88
19958: GO 19984
19960: LD_INT 2
19962: DOUBLE
19963: EQUAL
19964: IFTRUE 19968
19966: GO 19983
19968: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
19969: LD_VAR 0 1
19973: PPUSH
19974: LD_STRING DRuf-Guard-1
19976: PPUSH
19977: CALL_OW 88
19981: GO 19984
19983: POP
// case Query ( SurrenderInfoPeople ) of 1 :
19984: LD_STRING SurrenderInfoPeople
19986: PPUSH
19987: CALL_OW 97
19991: PUSH
19992: LD_INT 1
19994: DOUBLE
19995: EQUAL
19996: IFTRUE 20000
19998: GO 20101
20000: POP
// begin Query ( CaughtSquadInfo ) ;
20001: LD_STRING CaughtSquadInfo
20003: PPUSH
20004: CALL_OW 97
// for i in units do
20008: LD_ADDR_VAR 0 4
20012: PUSH
20013: LD_VAR 0 2
20017: PUSH
20018: FOR_IN
20019: IFFALSE 20076
// begin if Carry ( i ) then
20021: LD_VAR 0 4
20025: PPUSH
20026: CALL_OW 281
20030: IFFALSE 20047
// SetCargo ( i , mat_cans , 0 ) ;
20032: LD_VAR 0 4
20036: PPUSH
20037: LD_INT 1
20039: PPUSH
20040: LD_INT 0
20042: PPUSH
20043: CALL_OW 290
// SetSide ( i , 5 ) ;
20047: LD_VAR 0 4
20051: PPUSH
20052: LD_INT 5
20054: PPUSH
20055: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
20059: LD_VAR 0 4
20063: PPUSH
20064: LD_INT 113
20066: PPUSH
20067: LD_INT 17
20069: PPUSH
20070: CALL_OW 111
// end ;
20074: GO 20018
20076: POP
20077: POP
// ComMoveXY ( guard , 113 , 17 ) ;
20078: LD_VAR 0 1
20082: PPUSH
20083: LD_INT 113
20085: PPUSH
20086: LD_INT 17
20088: PPUSH
20089: CALL_OW 111
// DialogueOff ;
20093: CALL_OW 7
// exit ;
20097: GO 20798
// end ; 2 :
20099: GO 20275
20101: LD_INT 2
20103: DOUBLE
20104: EQUAL
20105: IFTRUE 20109
20107: GO 20274
20109: POP
// begin DialogueOff ;
20110: CALL_OW 7
// wait ( 0 0$2 ) ;
20114: LD_INT 70
20116: PPUSH
20117: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
20121: LD_INT 6
20123: PPUSH
20124: LD_INT 2
20126: PPUSH
20127: LD_INT 2
20129: PPUSH
20130: LD_INT 1
20132: PPUSH
20133: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
20137: LD_VAR 0 1
20141: PPUSH
20142: LD_VAR 0 2
20146: PUSH
20147: LD_INT 1
20149: ARRAY
20150: PPUSH
20151: CALL_OW 115
// case GetSex ( guard ) of sex_male :
20155: LD_VAR 0 1
20159: PPUSH
20160: CALL_OW 258
20164: PUSH
20165: LD_INT 1
20167: DOUBLE
20168: EQUAL
20169: IFTRUE 20173
20171: GO 20188
20173: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
20174: LD_VAR 0 1
20178: PPUSH
20179: LD_STRING DRum-Fail-3
20181: PPUSH
20182: CALL_OW 88
20186: GO 20212
20188: LD_INT 2
20190: DOUBLE
20191: EQUAL
20192: IFTRUE 20196
20194: GO 20211
20196: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
20197: LD_VAR 0 1
20201: PPUSH
20202: LD_STRING DRum-Fail-3
20204: PPUSH
20205: CALL_OW 88
20209: GO 20212
20211: POP
// wait ( 0 0$5 ) ;
20212: LD_INT 175
20214: PPUSH
20215: CALL_OW 67
// if IsOk ( guard ) then
20219: LD_VAR 0 1
20223: PPUSH
20224: CALL_OW 302
20228: IFFALSE 20240
// isAlarm := true else
20230: LD_ADDR_EXP 17
20234: PUSH
20235: LD_INT 1
20237: ST_TO_ADDR
20238: GO 20272
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
20240: LD_INT 6
20242: PPUSH
20243: LD_INT 2
20245: PPUSH
20246: LD_INT 0
20248: PPUSH
20249: LD_INT 1
20251: PPUSH
20252: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
20256: LD_INT 3
20258: PPUSH
20259: LD_INT 2
20261: PPUSH
20262: LD_INT 0
20264: PPUSH
20265: LD_INT 1
20267: PPUSH
20268: CALL_OW 80
// end ; end ; end ;
20272: GO 20275
20274: POP
// end ; if Carry ( Heike ) then
20275: LD_EXP 37
20279: PPUSH
20280: CALL_OW 281
20284: IFFALSE 20360
// begin case GetSex ( guard ) of sex_male :
20286: LD_VAR 0 1
20290: PPUSH
20291: CALL_OW 258
20295: PUSH
20296: LD_INT 1
20298: DOUBLE
20299: EQUAL
20300: IFTRUE 20304
20302: GO 20319
20304: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
20305: LD_VAR 0 1
20309: PPUSH
20310: LD_STRING DRum-FoodFail-1
20312: PPUSH
20313: CALL_OW 88
20317: GO 20343
20319: LD_INT 2
20321: DOUBLE
20322: EQUAL
20323: IFTRUE 20327
20325: GO 20342
20327: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
20328: LD_VAR 0 1
20332: PPUSH
20333: LD_STRING DRuf-FoodFail-2
20335: PPUSH
20336: CALL_OW 88
20340: GO 20343
20342: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
20343: LD_EXP 37
20347: PPUSH
20348: LD_INT 1
20350: PPUSH
20351: LD_INT 0
20353: PPUSH
20354: CALL_OW 290
// end else
20358: GO 20417
// begin case GetSex ( guard ) of sex_male :
20360: LD_VAR 0 1
20364: PPUSH
20365: CALL_OW 258
20369: PUSH
20370: LD_INT 1
20372: DOUBLE
20373: EQUAL
20374: IFTRUE 20378
20376: GO 20393
20378: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
20379: LD_VAR 0 1
20383: PPUSH
20384: LD_STRING DRum-Seen-1
20386: PPUSH
20387: CALL_OW 88
20391: GO 20417
20393: LD_INT 2
20395: DOUBLE
20396: EQUAL
20397: IFTRUE 20401
20399: GO 20416
20401: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
20402: LD_VAR 0 1
20406: PPUSH
20407: LD_STRING DRuf-Seen-1
20409: PPUSH
20410: CALL_OW 88
20414: GO 20417
20416: POP
// end ; alone := ( units = 1 ) ;
20417: LD_ADDR_VAR 0 5
20421: PUSH
20422: LD_VAR 0 2
20426: PUSH
20427: LD_INT 1
20429: EQUAL
20430: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
20431: LD_STRING SurrenderInfo
20433: PPUSH
20434: CALL_OW 97
20438: PUSH
20439: LD_INT 1
20441: DOUBLE
20442: EQUAL
20443: IFTRUE 20447
20445: GO 20616
20447: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
20448: LD_INT 23
20450: PPUSH
20451: CALL_OW 87
// RemoveUnit ( Heike ) ;
20455: LD_EXP 37
20459: PPUSH
20460: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
20464: LD_EXP 37
20468: PPUSH
20469: LD_INT 23
20471: PPUSH
20472: CALL_OW 52
// if not alone then
20476: LD_VAR 0 5
20480: NOT
20481: IFFALSE 20536
// for i in units diff Heike do
20483: LD_ADDR_VAR 0 4
20487: PUSH
20488: LD_VAR 0 2
20492: PUSH
20493: LD_EXP 37
20497: DIFF
20498: PUSH
20499: FOR_IN
20500: IFFALSE 20534
// begin RemoveUnit ( i ) ;
20502: LD_VAR 0 4
20506: PPUSH
20507: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
20511: LD_VAR 0 4
20515: PPUSH
20516: LD_INT 114
20518: PPUSH
20519: LD_INT 17
20521: PPUSH
20522: LD_INT 10
20524: PPUSH
20525: LD_INT 0
20527: PPUSH
20528: CALL_OW 50
// end ;
20532: GO 20499
20534: POP
20535: POP
// wait ( 0 0$0.3 ) ;
20536: LD_INT 10
20538: PPUSH
20539: CALL_OW 67
// if alone then
20543: LD_VAR 0 5
20547: IFFALSE 20558
// Query ( CaughtInfoAlone ) else
20549: LD_STRING CaughtInfoAlone
20551: PPUSH
20552: CALL_OW 97
20556: GO 20565
// Query ( CaughtInfo ) ;
20558: LD_STRING CaughtInfo
20560: PPUSH
20561: CALL_OW 97
// wait ( 0 0$1 ) ;
20565: LD_INT 35
20567: PPUSH
20568: CALL_OW 67
// StartLockerMinigame ;
20572: CALL 18943 0 0
// Say ( Heike , DH-Reset ) ;
20576: LD_EXP 37
20580: PPUSH
20581: LD_STRING DH-Reset
20583: PPUSH
20584: CALL_OW 88
// DialogueOff ;
20588: CALL_OW 7
// InGameOff ;
20592: CALL_OW 9
// ComExitBuilding ( Heike ) ;
20596: LD_EXP 37
20600: PPUSH
20601: CALL_OW 122
// ComFree ( guard ) ;
20605: LD_VAR 0 1
20609: PPUSH
20610: CALL_OW 139
// end ; 2 :
20614: GO 20798
20616: LD_INT 2
20618: DOUBLE
20619: EQUAL
20620: IFTRUE 20624
20622: GO 20797
20624: POP
// begin Say ( Heike , DH-Guard-2 ) ;
20625: LD_EXP 37
20629: PPUSH
20630: LD_STRING DH-Guard-2
20632: PPUSH
20633: CALL_OW 88
// DialogueOff ;
20637: CALL_OW 7
// wait ( 0 0$2 ) ;
20641: LD_INT 70
20643: PPUSH
20644: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
20648: LD_INT 6
20650: PPUSH
20651: LD_INT 2
20653: PPUSH
20654: LD_INT 2
20656: PPUSH
20657: LD_INT 1
20659: PPUSH
20660: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
20664: LD_VAR 0 1
20668: PPUSH
20669: LD_EXP 37
20673: PPUSH
20674: CALL_OW 115
// case GetSex ( guard ) of sex_male :
20678: LD_VAR 0 1
20682: PPUSH
20683: CALL_OW 258
20687: PUSH
20688: LD_INT 1
20690: DOUBLE
20691: EQUAL
20692: IFTRUE 20696
20694: GO 20711
20696: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
20697: LD_VAR 0 1
20701: PPUSH
20702: LD_STRING DRum-Fail-3
20704: PPUSH
20705: CALL_OW 88
20709: GO 20735
20711: LD_INT 2
20713: DOUBLE
20714: EQUAL
20715: IFTRUE 20719
20717: GO 20734
20719: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
20720: LD_VAR 0 1
20724: PPUSH
20725: LD_STRING DRum-Fail-3
20727: PPUSH
20728: CALL_OW 88
20732: GO 20735
20734: POP
// wait ( 0 0$5 ) ;
20735: LD_INT 175
20737: PPUSH
20738: CALL_OW 67
// if IsOk ( guard ) then
20742: LD_VAR 0 1
20746: PPUSH
20747: CALL_OW 302
20751: IFFALSE 20763
// isAlarm := true else
20753: LD_ADDR_EXP 17
20757: PUSH
20758: LD_INT 1
20760: ST_TO_ADDR
20761: GO 20795
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
20763: LD_INT 6
20765: PPUSH
20766: LD_INT 2
20768: PPUSH
20769: LD_INT 0
20771: PPUSH
20772: LD_INT 1
20774: PPUSH
20775: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
20779: LD_INT 3
20781: PPUSH
20782: LD_INT 2
20784: PPUSH
20785: LD_INT 0
20787: PPUSH
20788: LD_INT 1
20790: PPUSH
20791: CALL_OW 80
// end ; end ; end ;
20795: GO 20798
20797: POP
// end ;
20798: LD_VAR 0 3
20802: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
20803: LD_EXP 14
20807: PPUSH
20808: LD_INT 22
20810: PUSH
20811: LD_INT 5
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 3
20820: PUSH
20821: LD_INT 101
20823: PUSH
20824: LD_INT 6
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 92
20837: PUSH
20838: LD_INT 113
20840: PUSH
20841: LD_INT 16
20843: PUSH
20844: LD_INT 12
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 91
20855: PUSH
20856: LD_EXP 37
20860: PUSH
20861: LD_INT 6
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: LIST
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: PPUSH
20875: CALL_OW 72
20879: PUSH
20880: LD_EXP 30
20884: NOT
20885: AND
20886: IFFALSE 20991
20888: GO 20890
20890: DISABLE
20891: LD_INT 0
20893: PPUSH
// begin enable ;
20894: ENABLE
// DialogueOn ;
20895: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
20899: LD_EXP 37
20903: PPUSH
20904: LD_STRING DH-Join-
20906: PUSH
20907: LD_INT 1
20909: PPUSH
20910: LD_INT 3
20912: PPUSH
20913: CALL_OW 12
20917: STR
20918: PPUSH
20919: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
20923: LD_ADDR_VAR 0 1
20927: PUSH
20928: LD_EXP 14
20932: PPUSH
20933: LD_INT 22
20935: PUSH
20936: LD_INT 5
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 91
20945: PUSH
20946: LD_EXP 37
20950: PUSH
20951: LD_INT 10
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: LIST
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PPUSH
20963: CALL_OW 72
20967: PUSH
20968: FOR_IN
20969: IFFALSE 20985
// SetSide ( i , 2 ) ;
20971: LD_VAR 0 1
20975: PPUSH
20976: LD_INT 2
20978: PPUSH
20979: CALL_OW 235
20983: GO 20968
20985: POP
20986: POP
// DialogueOff ;
20987: CALL_OW 7
// end ; end_of_file
20991: PPOPN 1
20993: END
// every 0 0$2 trigger isAlarm do var i , points , tmp ;
20994: LD_EXP 17
20998: IFFALSE 21299
21000: GO 21002
21002: DISABLE
21003: LD_INT 0
21005: PPUSH
21006: PPUSH
21007: PPUSH
// begin DialogueOn ;
21008: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
21012: LD_EXP 37
21016: PPUSH
21017: LD_STRING DH-Alarm-1
21019: PPUSH
21020: CALL_OW 88
// DialogueOff ;
21024: CALL_OW 7
// PlaySoundXY ( - 1 , - 1 , alarm ) ;
21028: LD_INT 1
21030: NEG
21031: PPUSH
21032: LD_INT 1
21034: NEG
21035: PPUSH
21036: LD_STRING alarm
21038: PPUSH
21039: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
21043: LD_INT 3
21045: PPUSH
21046: LD_INT 2
21048: PPUSH
21049: LD_INT 2
21051: PPUSH
21052: LD_INT 1
21054: PPUSH
21055: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
21059: LD_INT 6
21061: PPUSH
21062: LD_INT 2
21064: PPUSH
21065: LD_INT 2
21067: PPUSH
21068: LD_INT 1
21070: PPUSH
21071: CALL_OW 80
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
21075: LD_ADDR_VAR 0 2
21079: PUSH
21080: LD_INT 107
21082: PUSH
21083: LD_INT 39
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 143
21092: PUSH
21093: LD_INT 33
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 180
21102: PUSH
21103: LD_INT 115
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 96
21112: PUSH
21113: LD_INT 90
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 59
21122: PUSH
21123: LD_INT 52
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 16
21132: PUSH
21133: LD_INT 15
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 90
21142: PUSH
21143: LD_INT 120
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
21159: LD_ADDR_VAR 0 3
21163: PUSH
21164: LD_INT 22
21166: PUSH
21167: LD_INT 6
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 25
21176: PUSH
21177: LD_INT 1
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PPUSH
21188: CALL_OW 69
21192: ST_TO_ADDR
// for i in tmp do
21193: LD_ADDR_VAR 0 1
21197: PUSH
21198: LD_VAR 0 3
21202: PUSH
21203: FOR_IN
21204: IFFALSE 21272
// begin ComExit ( i ) ;
21206: LD_VAR 0 1
21210: PPUSH
21211: CALL 64358 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
21215: LD_VAR 0 1
21219: PPUSH
21220: LD_VAR 0 2
21224: PUSH
21225: LD_VAR 0 1
21229: PUSH
21230: LD_INT 7
21232: MOD
21233: PUSH
21234: LD_INT 1
21236: PLUS
21237: ARRAY
21238: PUSH
21239: LD_INT 1
21241: ARRAY
21242: PPUSH
21243: LD_VAR 0 2
21247: PUSH
21248: LD_VAR 0 1
21252: PUSH
21253: LD_INT 7
21255: MOD
21256: PUSH
21257: LD_INT 1
21259: PLUS
21260: ARRAY
21261: PUSH
21262: LD_INT 2
21264: ARRAY
21265: PPUSH
21266: CALL_OW 174
// end ;
21270: GO 21203
21272: POP
21273: POP
// Explode ;
21274: CALL 21302 0 0
// wait ( 0 0$45 ) ;
21278: LD_INT 1575
21280: PPUSH
21281: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
21285: LD_VAR 0 3
21289: PPUSH
21290: LD_EXP 37
21294: PPUSH
21295: CALL_OW 175
// end ;
21299: PPOPN 3
21301: END
// export function Explode ; var i , x , y , j ; begin
21302: LD_INT 0
21304: PPUSH
21305: PPUSH
21306: PPUSH
21307: PPUSH
21308: PPUSH
// if hasExplosionsInFactory then
21309: LD_EXP 7
21313: IFFALSE 21333
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
21315: LD_ADDR_EXP 29
21319: PUSH
21320: LD_EXP 29
21324: PPUSH
21325: LD_INT 61
21327: PPUSH
21328: CALL 63960 0 2
21332: ST_TO_ADDR
// if explosivePlantedList then
21333: LD_EXP 29
21337: IFFALSE 21485
// begin for i in explosivePlantedList do
21339: LD_ADDR_VAR 0 2
21343: PUSH
21344: LD_EXP 29
21348: PUSH
21349: FOR_IN
21350: IFFALSE 21453
// begin x := GetX ( i ) ;
21352: LD_ADDR_VAR 0 3
21356: PUSH
21357: LD_VAR 0 2
21361: PPUSH
21362: CALL_OW 250
21366: ST_TO_ADDR
// y := GetY ( i ) ;
21367: LD_ADDR_VAR 0 4
21371: PUSH
21372: LD_VAR 0 2
21376: PPUSH
21377: CALL_OW 251
21381: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
21382: LD_ADDR_VAR 0 5
21386: PUSH
21387: LD_INT 1
21389: PUSH
21390: LD_INT 3
21392: PUSH
21393: LD_INT 5
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: LIST
21400: PUSH
21401: FOR_IN
21402: IFFALSE 21449
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
21404: LD_VAR 0 3
21408: PPUSH
21409: LD_VAR 0 5
21413: PPUSH
21414: LD_INT 2
21416: PPUSH
21417: CALL_OW 272
21421: PPUSH
21422: LD_VAR 0 4
21426: PPUSH
21427: LD_VAR 0 5
21431: PPUSH
21432: LD_INT 2
21434: PPUSH
21435: CALL_OW 273
21439: PPUSH
21440: LD_INT 1
21442: PPUSH
21443: CALL_OW 453
21447: GO 21401
21449: POP
21450: POP
// end ;
21451: GO 21349
21453: POP
21454: POP
// Say ( Heike , DH-End-2 ) ;
21455: LD_EXP 37
21459: PPUSH
21460: LD_STRING DH-End-2
21462: PPUSH
21463: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
21467: LD_INT 175
21469: PUSH
21470: LD_EXP 29
21474: PPUSH
21475: CALL 28613 0 1
21479: MUL
21480: PPUSH
21481: CALL_OW 67
// end ; if not isAlarm then
21485: LD_EXP 17
21489: NOT
21490: IFFALSE 21500
// isAlarm := true ;
21492: LD_ADDR_EXP 17
21496: PUSH
21497: LD_INT 1
21499: ST_TO_ADDR
// end ;
21500: LD_VAR 0 1
21504: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
21505: LD_INT 22
21507: PUSH
21508: LD_INT 2
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 21
21517: PUSH
21518: LD_INT 2
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 2
21527: PUSH
21528: LD_INT 101
21530: PUSH
21531: LD_INT 3
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 101
21540: PUSH
21541: LD_INT 6
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: LIST
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: LIST
21557: PPUSH
21558: CALL_OW 69
21562: IFFALSE 21575
21564: GO 21566
21566: DISABLE
// isAlarm := true ; end_of_file
21567: LD_ADDR_EXP 17
21571: PUSH
21572: LD_INT 1
21574: ST_TO_ADDR
21575: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
21576: LD_EXP 14
21580: PPUSH
21581: LD_INT 22
21583: PUSH
21584: LD_INT 2
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PPUSH
21591: CALL_OW 72
21595: PUSH
21596: LD_INT 3
21598: GREATER
21599: PUSH
21600: LD_EXP 17
21604: NOT
21605: AND
21606: IFFALSE 25458
21608: GO 21610
21610: DISABLE
21611: LD_INT 0
21613: PPUSH
21614: PPUSH
21615: PPUSH
21616: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
21617: LD_EXP 57
21621: PPUSH
21622: LD_INT 155
21624: PPUSH
21625: LD_INT 68
21627: PPUSH
21628: LD_INT 0
21630: PPUSH
21631: CALL_OW 48
// wait ( 0 0$1 ) ;
21635: LD_INT 35
21637: PPUSH
21638: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21642: LD_INT 35
21644: PPUSH
21645: CALL_OW 67
// if not HasTask ( ruDisturb ) then
21649: LD_EXP 57
21653: PPUSH
21654: CALL_OW 314
21658: NOT
21659: IFFALSE 21675
// ComMoveUnit ( ruDisturb , Heike ) ;
21661: LD_EXP 57
21665: PPUSH
21666: LD_EXP 37
21670: PPUSH
21671: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
21675: LD_EXP 37
21679: PPUSH
21680: LD_EXP 57
21684: PPUSH
21685: CALL_OW 296
21689: PUSH
21690: LD_INT 6
21692: LESS
21693: PUSH
21694: LD_EXP 57
21698: PPUSH
21699: CALL_OW 302
21703: AND
21704: IFFALSE 21642
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
21706: LD_EXP 14
21710: PPUSH
21711: LD_INT 22
21713: PUSH
21714: LD_INT 2
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 91
21723: PUSH
21724: LD_EXP 57
21728: PUSH
21729: LD_INT 8
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 2
21739: PUSH
21740: LD_INT 25
21742: PUSH
21743: LD_INT 1
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 25
21752: PUSH
21753: LD_INT 11
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 25
21762: PUSH
21763: LD_INT 32
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 25
21772: PUSH
21773: LD_INT 34
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: LIST
21791: PPUSH
21792: CALL_OW 72
21796: IFFALSE 21806
// isAlarm := true ;
21798: LD_ADDR_EXP 17
21802: PUSH
21803: LD_INT 1
21805: ST_TO_ADDR
// if isAlarm then
21806: LD_EXP 17
21810: IFFALSE 21814
// exit ;
21812: GO 25458
// DialogueOn ;
21814: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
21818: LD_EXP 57
21822: PPUSH
21823: LD_STRING DMcn-Interrupt-1
21825: PPUSH
21826: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
21830: LD_EXP 57
21834: PPUSH
21835: LD_STRING DMcn-Interrupt-2
21837: PPUSH
21838: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
21842: LD_EXP 57
21846: PPUSH
21847: LD_STRING DMcn-Interrupt-3
21849: PPUSH
21850: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
21854: LD_EXP 37
21858: PPUSH
21859: LD_STRING DH-Interrupt-a-4
21861: PPUSH
21862: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
21866: LD_EXP 57
21870: PPUSH
21871: LD_STRING DMcn-Interrupt-a-5
21873: PPUSH
21874: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
21878: LD_EXP 37
21882: PPUSH
21883: LD_STRING DH-Interrupt-a-6
21885: PPUSH
21886: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
21890: LD_EXP 57
21894: PPUSH
21895: LD_STRING DMcn-Interrupt-a-7
21897: PPUSH
21898: CALL_OW 88
// DialogueOff ;
21902: CALL_OW 7
// hasMuchin := true ;
21906: LD_ADDR_EXP 30
21910: PUSH
21911: LD_INT 1
21913: ST_TO_ADDR
// Query ( MuchinInfo ) ;
21914: LD_STRING MuchinInfo
21916: PPUSH
21917: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
21921: LD_STRING M2a
21923: PPUSH
21924: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
21928: LD_INT 105
21930: PPUSH
21931: LD_INT 55
21933: PPUSH
21934: CALL_OW 428
21938: PPUSH
21939: LD_INT 2
21941: PPUSH
21942: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
21946: LD_INT 115
21948: PPUSH
21949: LD_INT 65
21951: PPUSH
21952: CALL_OW 428
21956: PPUSH
21957: LD_INT 2
21959: PPUSH
21960: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
21964: LD_INT 109
21966: PPUSH
21967: LD_INT 59
21969: PPUSH
21970: LD_INT 2
21972: PPUSH
21973: LD_INT 10
21975: NEG
21976: PPUSH
21977: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
21981: LD_INT 109
21983: PPUSH
21984: LD_INT 59
21986: PPUSH
21987: CALL_OW 84
// wait ( 0 0$2 ) ;
21991: LD_INT 70
21993: PPUSH
21994: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
21998: LD_INT 109
22000: PPUSH
22001: LD_INT 59
22003: PPUSH
22004: LD_INT 2
22006: PPUSH
22007: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
22011: LD_INT 35
22013: PPUSH
22014: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
22018: LD_EXP 57
22022: PPUSH
22023: LD_EXP 37
22027: PPUSH
22028: CALL_OW 296
22032: PUSH
22033: LD_INT 6
22035: GREATER
22036: IFFALSE 22052
// ComMoveUnit ( ruDisturb , Heike ) ;
22038: LD_EXP 57
22042: PPUSH
22043: LD_EXP 37
22047: PPUSH
22048: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22052: LD_EXP 14
22056: PPUSH
22057: LD_INT 22
22059: PUSH
22060: LD_INT 2
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 91
22069: PUSH
22070: LD_EXP 57
22074: PUSH
22075: LD_INT 8
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 2
22085: PUSH
22086: LD_INT 25
22088: PUSH
22089: LD_INT 1
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 25
22098: PUSH
22099: LD_INT 11
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 25
22108: PUSH
22109: LD_INT 32
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 25
22118: PUSH
22119: LD_INT 34
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: LIST
22137: PPUSH
22138: CALL_OW 72
22142: IFFALSE 22154
// begin isAlarm := true ;
22144: LD_ADDR_EXP 17
22148: PUSH
22149: LD_INT 1
22151: ST_TO_ADDR
// exit ;
22152: GO 25458
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
22154: LD_INT 105
22156: PPUSH
22157: LD_INT 55
22159: PPUSH
22160: CALL_OW 428
22164: NOT
22165: PUSH
22166: LD_INT 115
22168: PPUSH
22169: LD_INT 65
22171: PPUSH
22172: CALL_OW 428
22176: NOT
22177: OR
22178: IFFALSE 22190
// begin isAlarm := true ;
22180: LD_ADDR_EXP 17
22184: PUSH
22185: LD_INT 1
22187: ST_TO_ADDR
// exit ;
22188: GO 25458
// end ; until not BuildingsInProgress ( 2 ) ;
22190: LD_INT 2
22192: PPUSH
22193: CALL_OW 345
22197: NOT
22198: IFFALSE 22011
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
22200: LD_INT 105
22202: PPUSH
22203: LD_INT 55
22205: PPUSH
22206: CALL_OW 428
22210: PPUSH
22211: LD_INT 3
22213: PPUSH
22214: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
22218: LD_INT 115
22220: PPUSH
22221: LD_INT 65
22223: PPUSH
22224: CALL_OW 428
22228: PPUSH
22229: LD_INT 3
22231: PPUSH
22232: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
22236: LD_STRING M2a-out
22238: PPUSH
22239: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
22243: LD_EXP 57
22247: PPUSH
22248: LD_INT 2
22250: PPUSH
22251: CALL_OW 120
// wait ( 0 0$3 ) ;
22255: LD_INT 105
22257: PPUSH
22258: CALL_OW 67
// hasMuchin := false ;
22262: LD_ADDR_EXP 30
22266: PUSH
22267: LD_INT 0
22269: ST_TO_ADDR
// wait ( 2 2$00 ) ;
22270: LD_INT 4200
22272: PPUSH
22273: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22277: LD_INT 35
22279: PPUSH
22280: CALL_OW 67
// if not HasTask ( ruDisturb ) then
22284: LD_EXP 57
22288: PPUSH
22289: CALL_OW 314
22293: NOT
22294: IFFALSE 22310
// ComMoveUnit ( ruDisturb , Heike ) ;
22296: LD_EXP 57
22300: PPUSH
22301: LD_EXP 37
22305: PPUSH
22306: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
22310: LD_EXP 37
22314: PPUSH
22315: LD_EXP 57
22319: PPUSH
22320: CALL_OW 296
22324: PUSH
22325: LD_INT 6
22327: LESS
22328: PUSH
22329: LD_EXP 57
22333: PPUSH
22334: CALL_OW 302
22338: AND
22339: IFFALSE 22277
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22341: LD_EXP 14
22345: PPUSH
22346: LD_INT 22
22348: PUSH
22349: LD_INT 2
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 91
22358: PUSH
22359: LD_EXP 57
22363: PUSH
22364: LD_INT 8
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 2
22374: PUSH
22375: LD_INT 25
22377: PUSH
22378: LD_INT 1
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 25
22387: PUSH
22388: LD_INT 11
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 25
22397: PUSH
22398: LD_INT 32
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 25
22407: PUSH
22408: LD_INT 34
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: PPUSH
22427: CALL_OW 72
22431: IFFALSE 22441
// isAlarm := true ;
22433: LD_ADDR_EXP 17
22437: PUSH
22438: LD_INT 1
22440: ST_TO_ADDR
// if isAlarm then
22441: LD_EXP 17
22445: IFFALSE 22449
// exit ;
22447: GO 25458
// DialogueOn ;
22449: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
22453: LD_EXP 57
22457: PPUSH
22458: LD_STRING DMcn-Interrupt-1
22460: PPUSH
22461: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
22465: LD_EXP 57
22469: PPUSH
22470: LD_STRING DMcn-Interrupt-2
22472: PPUSH
22473: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
22477: LD_INT 176
22479: PPUSH
22480: LD_INT 54
22482: PPUSH
22483: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
22487: LD_INT 176
22489: PPUSH
22490: LD_INT 54
22492: PPUSH
22493: LD_INT 2
22495: PPUSH
22496: LD_INT 6
22498: NEG
22499: PPUSH
22500: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
22504: LD_INT 10
22506: PPUSH
22507: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
22511: LD_EXP 57
22515: PPUSH
22516: LD_STRING DMcn-Interrupt-b-3
22518: PPUSH
22519: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
22523: LD_EXP 37
22527: PPUSH
22528: LD_STRING DH-Interrupt-b-4
22530: PPUSH
22531: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
22535: LD_EXP 57
22539: PPUSH
22540: LD_STRING DMcn-Interrupt-b-5
22542: PPUSH
22543: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
22547: LD_EXP 37
22551: PPUSH
22552: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
22556: LD_INT 176
22558: PPUSH
22559: LD_INT 54
22561: PPUSH
22562: LD_INT 2
22564: PPUSH
22565: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
22569: LD_EXP 57
22573: PPUSH
22574: LD_STRING DMcn-Interrupt-b-6
22576: PPUSH
22577: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
22581: LD_EXP 37
22585: PPUSH
22586: LD_STRING DH-Interrupt-b-7
22588: PPUSH
22589: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
22593: LD_EXP 57
22597: PPUSH
22598: LD_STRING DMcn-Interrupt-b-8
22600: PPUSH
22601: CALL_OW 88
// DialogueOff ;
22605: CALL_OW 7
// Query ( MuchinInfo ) ;
22609: LD_STRING MuchinInfo
22611: PPUSH
22612: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
22616: LD_STRING M2b
22618: PPUSH
22619: CALL_OW 337
// hasMuchin := true ;
22623: LD_ADDR_EXP 30
22627: PUSH
22628: LD_INT 1
22630: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22631: LD_INT 35
22633: PPUSH
22634: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
22638: LD_EXP 57
22642: PPUSH
22643: LD_EXP 37
22647: PPUSH
22648: CALL_OW 296
22652: PUSH
22653: LD_INT 6
22655: GREATER
22656: IFFALSE 22672
// ComMoveUnit ( ruDisturb , Heike ) ;
22658: LD_EXP 57
22662: PPUSH
22663: LD_EXP 37
22667: PPUSH
22668: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22672: LD_EXP 14
22676: PPUSH
22677: LD_INT 22
22679: PUSH
22680: LD_INT 2
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 91
22689: PUSH
22690: LD_EXP 57
22694: PUSH
22695: LD_INT 8
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 2
22705: PUSH
22706: LD_INT 25
22708: PUSH
22709: LD_INT 1
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 25
22718: PUSH
22719: LD_INT 11
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 25
22728: PUSH
22729: LD_INT 32
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 25
22738: PUSH
22739: LD_INT 34
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: LIST
22757: PPUSH
22758: CALL_OW 72
22762: IFFALSE 22774
// begin isAlarm := true ;
22764: LD_ADDR_EXP 17
22768: PUSH
22769: LD_INT 1
22771: ST_TO_ADDR
// exit ;
22772: GO 25458
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
22774: LD_EXP 37
22778: PPUSH
22779: LD_INT 61
22781: PPUSH
22782: CALL_OW 296
22786: PUSH
22787: LD_INT 4
22789: LESS
22790: IFFALSE 22631
// InGameOn ;
22792: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
22796: LD_INT 173
22798: PPUSH
22799: LD_INT 54
22801: PPUSH
22802: LD_INT 2
22804: PPUSH
22805: LD_INT 8
22807: NEG
22808: PPUSH
22809: CALL_OW 330
// SetSide ( Heike , 3 ) ;
22813: LD_EXP 37
22817: PPUSH
22818: LD_INT 3
22820: PPUSH
22821: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
22825: LD_EXP 37
22829: PPUSH
22830: LD_INT 61
22832: PPUSH
22833: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
22837: LD_EXP 57
22841: PPUSH
22842: LD_INT 61
22844: PPUSH
22845: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
22849: LD_EXP 44
22853: PUSH
22854: LD_EXP 14
22858: IN
22859: PUSH
22860: LD_EXP 44
22864: PPUSH
22865: LD_INT 61
22867: PPUSH
22868: CALL_OW 296
22872: PUSH
22873: LD_INT 12
22875: LESS
22876: AND
22877: IFFALSE 22921
// begin SetSide ( Markov , 3 ) ;
22879: LD_EXP 44
22883: PPUSH
22884: LD_INT 3
22886: PPUSH
22887: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
22891: LD_EXP 44
22895: PPUSH
22896: LD_INT 61
22898: PPUSH
22899: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
22903: LD_INT 35
22905: PPUSH
22906: CALL_OW 67
// until IsInUnit ( Markov ) ;
22910: LD_EXP 44
22914: PPUSH
22915: CALL_OW 310
22919: IFFALSE 22903
// end ; repeat wait ( 0 0$1 ) ;
22921: LD_INT 35
22923: PPUSH
22924: CALL_OW 67
// until IsInUnit ( Heike ) ;
22928: LD_EXP 37
22932: PPUSH
22933: CALL_OW 310
22937: IFFALSE 22921
// SetClass ( Heike , class_mechanic ) ;
22939: LD_EXP 37
22943: PPUSH
22944: LD_INT 3
22946: PPUSH
22947: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
22951: LD_INT 61
22953: PPUSH
22954: LD_INT 21
22956: PPUSH
22957: LD_INT 3
22959: PPUSH
22960: LD_INT 3
22962: PPUSH
22963: LD_INT 43
22965: PPUSH
22966: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
22970: LD_EXP 31
22974: PUSH
22975: LD_EXP 44
22979: PUSH
22980: LD_EXP 14
22984: IN
22985: PUSH
22986: LD_EXP 44
22990: PPUSH
22991: CALL_OW 310
22995: PUSH
22996: LD_INT 61
22998: EQUAL
22999: OR
23000: AND
23001: IFFALSE 23469
// begin wait ( 0 0$5 ) ;
23003: LD_INT 175
23005: PPUSH
23006: CALL_OW 67
// SetSide ( Heike , 2 ) ;
23010: LD_EXP 37
23014: PPUSH
23015: LD_INT 2
23017: PPUSH
23018: CALL_OW 235
// SetSide ( Markov , 2 ) ;
23022: LD_EXP 44
23026: PPUSH
23027: LD_INT 2
23029: PPUSH
23030: CALL_OW 235
// if not Markov in heikeSquad then
23034: LD_EXP 44
23038: PUSH
23039: LD_EXP 14
23043: IN
23044: NOT
23045: IFFALSE 23067
// heikeSquad := Join ( heikeSquad , Markov ) ;
23047: LD_ADDR_EXP 14
23051: PUSH
23052: LD_EXP 14
23056: PPUSH
23057: LD_EXP 44
23061: PPUSH
23062: CALL 63960 0 2
23066: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
23067: LD_EXP 44
23071: PPUSH
23072: LD_STRING DMar-Factory-1
23074: PPUSH
23075: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
23079: LD_INT 61
23081: PPUSH
23082: LD_INT 99
23084: PPUSH
23085: CALL_OW 329
// game_speed := 4 ;
23089: LD_ADDR_OWVAR 65
23093: PUSH
23094: LD_INT 4
23096: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
23097: LD_EXP 57
23101: PPUSH
23102: CALL_OW 122
// ComExitBuilding ( Markov ) ;
23106: LD_EXP 44
23110: PPUSH
23111: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
23115: LD_EXP 57
23119: PPUSH
23120: LD_INT 171
23122: PPUSH
23123: LD_INT 51
23125: PPUSH
23126: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
23130: LD_EXP 44
23134: PPUSH
23135: LD_INT 167
23137: PPUSH
23138: LD_INT 50
23140: PPUSH
23141: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
23145: LD_EXP 44
23149: PPUSH
23150: LD_EXP 57
23154: PPUSH
23155: CALL_OW 179
// wait ( 0 0$5 ) ;
23159: LD_INT 175
23161: PPUSH
23162: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
23166: LD_EXP 44
23170: PPUSH
23171: LD_STRING DMar-Factory-2
23173: PPUSH
23174: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
23178: LD_ADDR_VAR 0 2
23182: PUSH
23183: LD_INT 22
23185: PUSH
23186: LD_INT 3
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 33
23195: PUSH
23196: LD_INT 3
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PPUSH
23207: CALL_OW 69
23211: PUSH
23212: LD_INT 1
23214: ARRAY
23215: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
23216: LD_EXP 57
23220: PPUSH
23221: LD_VAR 0 2
23225: PPUSH
23226: CALL_OW 119
// async ;
23230: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
23231: LD_EXP 57
23235: PPUSH
23236: LD_STRING DMcn-Factory-3
23238: PPUSH
23239: CALL_OW 88
// ComAttackUnit ( veh , ruDisturb ) ;
23243: LD_VAR 0 2
23247: PPUSH
23248: LD_EXP 57
23252: PPUSH
23253: CALL_OW 115
// sync ;
23257: SYNC
// wait ( 0 0$1 ) ;
23258: LD_INT 35
23260: PPUSH
23261: CALL_OW 67
// KillUnit ( ruDisturb ) ;
23265: LD_EXP 57
23269: PPUSH
23270: CALL_OW 66
// SetSide ( veh , 7 ) ;
23274: LD_VAR 0 2
23278: PPUSH
23279: LD_INT 7
23281: PPUSH
23282: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
23286: LD_VAR 0 2
23290: PPUSH
23291: LD_INT 84
23293: PPUSH
23294: LD_INT 38
23296: PPUSH
23297: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
23301: LD_EXP 58
23305: PUSH
23306: LD_INT 1
23308: ARRAY
23309: PPUSH
23310: CALL_OW 258
23314: PUSH
23315: LD_INT 1
23317: EQUAL
23318: IFFALSE 23338
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
23320: LD_EXP 58
23324: PUSH
23325: LD_INT 1
23327: ARRAY
23328: PPUSH
23329: LD_STRING DRum-Factory-4
23331: PPUSH
23332: CALL_OW 88
23336: GO 23354
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
23338: LD_EXP 58
23342: PUSH
23343: LD_INT 1
23345: ARRAY
23346: PPUSH
23347: LD_STRING DRuf-Factory-4
23349: PPUSH
23350: CALL_OW 88
// wait ( 0 0$1 ) ;
23354: LD_INT 35
23356: PPUSH
23357: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
23361: LD_EXP 58
23365: PPUSH
23366: LD_INT 26
23368: PUSH
23369: LD_INT 1
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PPUSH
23376: CALL_OW 72
23380: PUSH
23381: LD_INT 1
23383: ARRAY
23384: PPUSH
23385: LD_STRING DRum-Factory-6
23387: PPUSH
23388: CALL_OW 88
// wait ( 0 0$2 ) ;
23392: LD_INT 70
23394: PPUSH
23395: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
23399: LD_EXP 37
23403: PPUSH
23404: LD_INT 33
23406: PPUSH
23407: CALL_OW 336
// ComExitBuilding ( Heike ) ;
23411: LD_EXP 37
23415: PPUSH
23416: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
23420: LD_EXP 37
23424: PPUSH
23425: LD_INT 168
23427: PPUSH
23428: LD_INT 54
23430: PPUSH
23431: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
23435: LD_INT 173
23437: PPUSH
23438: LD_INT 54
23440: PPUSH
23441: LD_INT 2
23443: PPUSH
23444: CALL_OW 331
// InGameOff ;
23448: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
23452: LD_STRING M2b-out
23454: PPUSH
23455: CALL_OW 337
// hasMuchin := false ;
23459: LD_ADDR_EXP 30
23463: PUSH
23464: LD_INT 0
23466: ST_TO_ADDR
// exit ;
23467: GO 25458
// end ; wait ( 0 0$5 ) ;
23469: LD_INT 175
23471: PPUSH
23472: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
23476: LD_INT 61
23478: PPUSH
23479: LD_INT 99
23481: PPUSH
23482: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
23486: LD_EXP 44
23490: PUSH
23491: LD_EXP 14
23495: IN
23496: PUSH
23497: LD_EXP 44
23501: PPUSH
23502: CALL_OW 255
23506: PUSH
23507: LD_INT 3
23509: EQUAL
23510: AND
23511: IFFALSE 23534
// begin SetSide ( Markov , 2 ) ;
23513: LD_EXP 44
23517: PPUSH
23518: LD_INT 2
23520: PPUSH
23521: CALL_OW 235
// ComExitBuilding ( Markov ) ;
23525: LD_EXP 44
23529: PPUSH
23530: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
23534: LD_EXP 37
23538: PPUSH
23539: LD_INT 2
23541: PPUSH
23542: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
23546: LD_EXP 37
23550: PPUSH
23551: LD_INT 33
23553: PPUSH
23554: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
23558: LD_EXP 57
23562: PPUSH
23563: CALL_OW 122
// ComExitBuilding ( Heike ) ;
23567: LD_EXP 37
23571: PPUSH
23572: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
23576: LD_EXP 37
23580: PPUSH
23581: LD_INT 168
23583: PPUSH
23584: LD_INT 54
23586: PPUSH
23587: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
23591: LD_INT 173
23593: PPUSH
23594: LD_INT 54
23596: PPUSH
23597: LD_INT 2
23599: PPUSH
23600: CALL_OW 331
// InGameOff ;
23604: CALL_OW 9
// wait ( 3 ) ;
23608: LD_INT 3
23610: PPUSH
23611: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
23615: LD_EXP 57
23619: PPUSH
23620: LD_INT 2
23622: PPUSH
23623: CALL_OW 120
// wait ( 0 0$3 ) ;
23627: LD_INT 105
23629: PPUSH
23630: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
23634: LD_STRING M2b-out
23636: PPUSH
23637: CALL_OW 337
// hasMuchin := false ;
23641: LD_ADDR_EXP 30
23645: PUSH
23646: LD_INT 0
23648: ST_TO_ADDR
// wait ( 2 2$00 ) ;
23649: LD_INT 4200
23651: PPUSH
23652: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23656: LD_INT 35
23658: PPUSH
23659: CALL_OW 67
// if not HasTask ( ruDisturb ) then
23663: LD_EXP 57
23667: PPUSH
23668: CALL_OW 314
23672: NOT
23673: IFFALSE 23689
// ComMoveUnit ( ruDisturb , Heike ) ;
23675: LD_EXP 57
23679: PPUSH
23680: LD_EXP 37
23684: PPUSH
23685: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
23689: LD_EXP 37
23693: PPUSH
23694: LD_EXP 57
23698: PPUSH
23699: CALL_OW 296
23703: PUSH
23704: LD_INT 2
23706: LESS
23707: PUSH
23708: LD_EXP 57
23712: PPUSH
23713: CALL_OW 302
23717: AND
23718: IFFALSE 23656
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23720: LD_EXP 14
23724: PPUSH
23725: LD_INT 22
23727: PUSH
23728: LD_INT 2
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 91
23737: PUSH
23738: LD_EXP 57
23742: PUSH
23743: LD_INT 8
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 2
23753: PUSH
23754: LD_INT 25
23756: PUSH
23757: LD_INT 1
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 25
23766: PUSH
23767: LD_INT 11
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PUSH
23774: LD_INT 25
23776: PUSH
23777: LD_INT 32
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 25
23786: PUSH
23787: LD_INT 34
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: LIST
23805: PPUSH
23806: CALL_OW 72
23810: IFFALSE 23820
// isAlarm := true ;
23812: LD_ADDR_EXP 17
23816: PUSH
23817: LD_INT 1
23819: ST_TO_ADDR
// if isAlarm then
23820: LD_EXP 17
23824: IFFALSE 23828
// exit ;
23826: GO 25458
// ComTurnUnit ( Heike , ruDisturb ) ;
23828: LD_EXP 37
23832: PPUSH
23833: LD_EXP 57
23837: PPUSH
23838: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
23842: LD_EXP 57
23846: PPUSH
23847: LD_EXP 37
23851: PPUSH
23852: CALL_OW 119
// wait ( 3 ) ;
23856: LD_INT 3
23858: PPUSH
23859: CALL_OW 67
// for i := 1 to 3 do
23863: LD_ADDR_VAR 0 1
23867: PUSH
23868: DOUBLE
23869: LD_INT 1
23871: DEC
23872: ST_TO_ADDR
23873: LD_INT 3
23875: PUSH
23876: FOR_TO
23877: IFFALSE 23894
// CreateCratesArea ( 5 , cratesArea , false ) ;
23879: LD_INT 5
23881: PPUSH
23882: LD_INT 58
23884: PPUSH
23885: LD_INT 0
23887: PPUSH
23888: CALL_OW 55
23892: GO 23876
23894: POP
23895: POP
// uc_side := 3 ;
23896: LD_ADDR_OWVAR 20
23900: PUSH
23901: LD_INT 3
23903: ST_TO_ADDR
// uc_nation := nation_russian ;
23904: LD_ADDR_OWVAR 21
23908: PUSH
23909: LD_INT 3
23911: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
23912: LD_INT 21
23914: PPUSH
23915: LD_INT 3
23917: PPUSH
23918: LD_INT 1
23920: PPUSH
23921: LD_INT 51
23923: PPUSH
23924: LD_INT 100
23926: PPUSH
23927: CALL 31526 0 5
// veh := CreateVehicle ;
23931: LD_ADDR_VAR 0 2
23935: PUSH
23936: CALL_OW 45
23940: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
23941: LD_VAR 0 2
23945: PPUSH
23946: LD_INT 104
23948: PPUSH
23949: LD_INT 41
23951: PPUSH
23952: LD_INT 3
23954: PPUSH
23955: LD_INT 0
23957: PPUSH
23958: CALL 66100 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
23962: LD_VAR 0 2
23966: PPUSH
23967: LD_INT 1
23969: PPUSH
23970: LD_INT 100
23972: PPUSH
23973: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
23977: CALL_OW 44
23981: PPUSH
23982: LD_VAR 0 2
23986: PPUSH
23987: CALL_OW 52
// DialogueOn ;
23991: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
23995: LD_EXP 57
23999: PPUSH
24000: LD_STRING DMcn-Interrupt-1
24002: PPUSH
24003: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24007: LD_EXP 57
24011: PPUSH
24012: LD_STRING DMcn-Interrupt-2
24014: PPUSH
24015: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
24019: LD_EXP 57
24023: PPUSH
24024: LD_STRING DMcn-Interrupt-c-3
24026: PPUSH
24027: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
24031: LD_INT 101
24033: PPUSH
24034: LD_INT 38
24036: PPUSH
24037: LD_INT 2
24039: PPUSH
24040: LD_INT 10
24042: NEG
24043: PPUSH
24044: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
24048: LD_INT 101
24050: PPUSH
24051: LD_INT 38
24053: PPUSH
24054: CALL_OW 84
// wait ( 0 0$2 ) ;
24058: LD_INT 70
24060: PPUSH
24061: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
24065: LD_INT 101
24067: PPUSH
24068: LD_INT 38
24070: PPUSH
24071: LD_INT 2
24073: PPUSH
24074: CALL_OW 331
// RemoveUnit ( veh ) ;
24078: LD_VAR 0 2
24082: PPUSH
24083: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
24087: LD_EXP 57
24091: PPUSH
24092: LD_STRING DMcn-Interrupt-c-4
24094: PPUSH
24095: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
24099: LD_EXP 37
24103: PPUSH
24104: LD_STRING DH-Interrupt-c-5
24106: PPUSH
24107: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
24111: LD_EXP 57
24115: PPUSH
24116: LD_STRING DMcn-Interrupt-c-6
24118: PPUSH
24119: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
24123: LD_EXP 37
24127: PPUSH
24128: LD_STRING DH-Interrupt-c-7
24130: PPUSH
24131: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
24135: LD_EXP 57
24139: PPUSH
24140: LD_STRING DMcn-Interrupt-c-8
24142: PPUSH
24143: CALL_OW 88
// DialogueOff ;
24147: CALL_OW 7
// hasMuchin := true ;
24151: LD_ADDR_EXP 30
24155: PUSH
24156: LD_INT 1
24158: ST_TO_ADDR
// Query ( MuchinInfo ) ;
24159: LD_STRING MuchinInfo
24161: PPUSH
24162: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
24166: LD_STRING M2c
24168: PPUSH
24169: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
24173: LD_INT 35
24175: PPUSH
24176: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24180: LD_EXP 57
24184: PPUSH
24185: LD_EXP 37
24189: PPUSH
24190: CALL_OW 296
24194: PUSH
24195: LD_INT 6
24197: GREATER
24198: IFFALSE 24214
// ComMoveUnit ( ruDisturb , Heike ) ;
24200: LD_EXP 57
24204: PPUSH
24205: LD_EXP 37
24209: PPUSH
24210: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24214: LD_EXP 14
24218: PPUSH
24219: LD_INT 22
24221: PUSH
24222: LD_INT 2
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 91
24231: PUSH
24232: LD_EXP 57
24236: PUSH
24237: LD_INT 8
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 2
24247: PUSH
24248: LD_INT 25
24250: PUSH
24251: LD_INT 1
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 25
24260: PUSH
24261: LD_INT 11
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 25
24270: PUSH
24271: LD_INT 32
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 25
24280: PUSH
24281: LD_INT 34
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: LIST
24299: PPUSH
24300: CALL_OW 72
24304: IFFALSE 24316
// begin isAlarm := true ;
24306: LD_ADDR_EXP 17
24310: PUSH
24311: LD_INT 1
24313: ST_TO_ADDR
// exit ;
24314: GO 25458
// end ; until UnitFilter ( heikeSquad , [ f_dist , ruOutpost0 , 6 ] ) and GetDistUnits ( Heike , ruOutpost0 ) < 6 ;
24316: LD_EXP 14
24320: PPUSH
24321: LD_INT 91
24323: PUSH
24324: LD_INT 6
24326: PUSH
24327: LD_INT 6
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: LIST
24334: PPUSH
24335: CALL_OW 72
24339: PUSH
24340: LD_EXP 37
24344: PPUSH
24345: LD_INT 6
24347: PPUSH
24348: CALL_OW 296
24352: PUSH
24353: LD_INT 6
24355: LESS
24356: AND
24357: IFFALSE 24173
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
24359: LD_ADDR_VAR 0 3
24363: PUSH
24364: LD_EXP 14
24368: PUSH
24369: LD_EXP 37
24373: UNION
24374: PPUSH
24375: LD_INT 25
24377: PUSH
24378: LD_INT 33
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 91
24387: PUSH
24388: LD_INT 6
24390: PUSH
24391: LD_INT 12
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: LIST
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PPUSH
24403: CALL_OW 72
24407: ST_TO_ADDR
// for i in tmp do
24408: LD_ADDR_VAR 0 1
24412: PUSH
24413: LD_VAR 0 3
24417: PUSH
24418: FOR_IN
24419: IFFALSE 24450
// begin SetSide ( i , 3 ) ;
24421: LD_VAR 0 1
24425: PPUSH
24426: LD_INT 3
24428: PPUSH
24429: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
24433: LD_VAR 0 1
24437: PPUSH
24438: LD_INT 101
24440: PPUSH
24441: LD_INT 38
24443: PPUSH
24444: CALL_OW 111
// end ;
24448: GO 24418
24450: POP
24451: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
24452: LD_EXP 57
24456: PPUSH
24457: LD_INT 104
24459: PPUSH
24460: LD_INT 37
24462: PPUSH
24463: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
24467: LD_EXP 57
24471: PPUSH
24472: LD_EXP 37
24476: PPUSH
24477: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
24481: LD_INT 35
24483: PPUSH
24484: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
24488: LD_ADDR_VAR 0 4
24492: PUSH
24493: LD_INT 58
24495: PPUSH
24496: CALL_OW 435
24500: ST_TO_ADDR
// for i in tmp do
24501: LD_ADDR_VAR 0 1
24505: PUSH
24506: LD_VAR 0 3
24510: PUSH
24511: FOR_IN
24512: IFFALSE 24555
// if not HasTask ( i ) then
24514: LD_VAR 0 1
24518: PPUSH
24519: CALL_OW 314
24523: NOT
24524: IFFALSE 24553
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
24526: LD_VAR 0 1
24530: PPUSH
24531: LD_VAR 0 4
24535: PUSH
24536: LD_INT 1
24538: ARRAY
24539: PPUSH
24540: LD_VAR 0 4
24544: PUSH
24545: LD_INT 2
24547: ARRAY
24548: PPUSH
24549: CALL_OW 117
24553: GO 24511
24555: POP
24556: POP
// until not cr ;
24557: LD_VAR 0 4
24561: NOT
24562: IFFALSE 24481
// wait ( 0 0$2 ) ;
24564: LD_INT 70
24566: PPUSH
24567: CALL_OW 67
// for i in tmp do
24571: LD_ADDR_VAR 0 1
24575: PUSH
24576: LD_VAR 0 3
24580: PUSH
24581: FOR_IN
24582: IFFALSE 24598
// SetSide ( i , 2 ) ;
24584: LD_VAR 0 1
24588: PPUSH
24589: LD_INT 2
24591: PPUSH
24592: CALL_OW 235
24596: GO 24581
24598: POP
24599: POP
// if Kaia in tmp then
24600: LD_EXP 42
24604: PUSH
24605: LD_VAR 0 3
24609: IN
24610: IFFALSE 24880
// begin InGameOn ;
24612: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
24616: LD_EXP 42
24620: PPUSH
24621: LD_EXP 57
24625: PPUSH
24626: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
24630: LD_EXP 57
24634: PPUSH
24635: LD_EXP 42
24639: PPUSH
24640: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
24644: LD_EXP 42
24648: PPUSH
24649: LD_EXP 57
24653: PPUSH
24654: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
24658: LD_EXP 42
24662: PPUSH
24663: LD_STRING DK-Assassin-1
24665: PPUSH
24666: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
24670: LD_EXP 57
24674: PPUSH
24675: LD_STRING DMcn-Assassin-2
24677: PPUSH
24678: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
24682: LD_EXP 42
24686: PPUSH
24687: LD_STRING DK-Assassin-3
24689: PPUSH
24690: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
24694: LD_EXP 57
24698: PPUSH
24699: LD_STRING DMcn-Assassin-4
24701: PPUSH
24702: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
24706: LD_EXP 42
24710: PPUSH
24711: LD_STRING DK-Assassin-5
24713: PPUSH
24714: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
24718: LD_EXP 57
24722: PPUSH
24723: LD_STRING DMcn-Assassin-6
24725: PPUSH
24726: CALL_OW 88
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
24730: LD_EXP 42
24734: PUSH
24735: LD_EXP 57
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PPUSH
24744: LD_INT 6
24746: PPUSH
24747: CALL_OW 120
// wait ( 0 0$5 ) ;
24751: LD_INT 175
24753: PPUSH
24754: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
24758: LD_EXP 42
24762: PPUSH
24763: LD_STRING DK-Assassin-7
24765: PPUSH
24766: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
24770: LD_EXP 57
24774: PPUSH
24775: LD_STRING DMcn-Assassin-8
24777: PPUSH
24778: CALL_OW 88
// wait ( 0 0$0.3 ) ;
24782: LD_INT 10
24784: PPUSH
24785: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
24789: LD_EXP 42
24793: PPUSH
24794: LD_STRING DK-Assassin-9
24796: PPUSH
24797: CALL_OW 88
// wait ( 0 0$2 ) ;
24801: LD_INT 70
24803: PPUSH
24804: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
24808: LD_EXP 42
24812: PPUSH
24813: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
24817: LD_EXP 57
24821: PPUSH
24822: CALL_OW 64
// AddComMoveUnit ( Kaia , Heike ) ;
24826: LD_EXP 42
24830: PPUSH
24831: LD_EXP 37
24835: PPUSH
24836: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
24840: LD_EXP 42
24844: PPUSH
24845: LD_STRING DK-Assasin-10
24847: PPUSH
24848: CALL_OW 88
// InGameOff ;
24852: CALL_OW 9
// ChangeMissionObjectives ( M2c-out ) ;
24856: LD_STRING M2c-out
24858: PPUSH
24859: CALL_OW 337
// wait ( 0 0$3 ) ;
24863: LD_INT 105
24865: PPUSH
24866: CALL_OW 67
// hasMuchin := false ;
24870: LD_ADDR_EXP 30
24874: PUSH
24875: LD_INT 0
24877: ST_TO_ADDR
// exit ;
24878: GO 25458
// end ; ChangeMissionObjectives ( M2c-out ) ;
24880: LD_STRING M2c-out
24882: PPUSH
24883: CALL_OW 337
// InGameOn ;
24887: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
24891: LD_EXP 57
24895: PPUSH
24896: LD_STRING DMcn-Fail-1
24898: PPUSH
24899: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
24903: LD_VAR 0 3
24907: PPUSH
24908: LD_INT 114
24910: PPUSH
24911: LD_INT 17
24913: PPUSH
24914: CALL_OW 111
// wait ( 0 0$1 ) ;
24918: LD_INT 35
24920: PPUSH
24921: CALL_OW 67
// async ;
24925: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
24926: LD_EXP 57
24930: PPUSH
24931: LD_EXP 37
24935: PPUSH
24936: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
24940: LD_EXP 57
24944: PPUSH
24945: LD_STRING DMcn-Fail-2
24947: PPUSH
24948: CALL_OW 88
// ComStop ( Heike ) ;
24952: LD_EXP 37
24956: PPUSH
24957: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
24961: LD_EXP 37
24965: PPUSH
24966: LD_EXP 57
24970: PPUSH
24971: CALL_OW 179
// sync ;
24975: SYNC
// Say ( Heike , DH-Fail-3 ) ;
24976: LD_EXP 37
24980: PPUSH
24981: LD_STRING DH-Fail-3
24983: PPUSH
24984: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
24988: LD_EXP 57
24992: PPUSH
24993: LD_STRING DMcn-Fail-4
24995: PPUSH
24996: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
25000: LD_EXP 37
25004: PUSH
25005: LD_EXP 57
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PPUSH
25014: LD_INT 41
25016: PPUSH
25017: LD_INT 19
25019: PPUSH
25020: CALL_OW 111
// wait ( 0 0$2 ) ;
25024: LD_INT 70
25026: PPUSH
25027: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
25031: LD_EXP 57
25035: PPUSH
25036: LD_INT 40
25038: PPUSH
25039: LD_INT 19
25041: PPUSH
25042: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
25046: LD_EXP 37
25050: PPUSH
25051: LD_INT 43
25053: PPUSH
25054: LD_INT 21
25056: PPUSH
25057: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
25061: LD_EXP 57
25065: PPUSH
25066: LD_EXP 37
25070: PPUSH
25071: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
25075: LD_EXP 37
25079: PPUSH
25080: LD_EXP 57
25084: PPUSH
25085: CALL_OW 179
// RaiseSailEvent ( centerCamEvent ) ;
25089: LD_INT 3
25091: PPUSH
25092: CALL_OW 427
// wait ( 0 0$2 ) ;
25096: LD_INT 70
25098: PPUSH
25099: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
25103: LD_EXP 57
25107: PPUSH
25108: LD_STRING DMcn-Fail-5
25110: PPUSH
25111: CALL_OW 88
// wait ( 0 0$2 ) ;
25115: LD_INT 70
25117: PPUSH
25118: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
25122: LD_EXP 57
25126: PPUSH
25127: LD_STRING DMcn-Fail-6
25129: PPUSH
25130: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
25134: LD_INT 35
25136: PPUSH
25137: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
25141: LD_EXP 37
25145: PPUSH
25146: LD_INT 43
25148: PPUSH
25149: LD_INT 21
25151: PPUSH
25152: CALL_OW 307
25156: IFFALSE 25134
// case Query ( MuchinQuestion ) of 1 :
25158: LD_STRING MuchinQuestion
25160: PPUSH
25161: CALL_OW 97
25165: PUSH
25166: LD_INT 1
25168: DOUBLE
25169: EQUAL
25170: IFTRUE 25174
25172: GO 25274
25174: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
25175: LD_EXP 57
25179: PPUSH
25180: LD_STRING DMcn-Fail-7
25182: PPUSH
25183: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
25187: LD_EXP 37
25191: PPUSH
25192: LD_STRING DH-Fail-8
25194: PPUSH
25195: CALL_OW 88
// wait ( 0 0$0.3 ) ;
25199: LD_INT 10
25201: PPUSH
25202: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
25206: LD_EXP 37
25210: PPUSH
25211: LD_STRING DH-Fail-9
25213: PPUSH
25214: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
25218: LD_EXP 37
25222: PPUSH
25223: LD_STRING DH-Fail-10
25225: PPUSH
25226: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
25230: LD_EXP 57
25234: PPUSH
25235: LD_STRING DMcn-Fail-11
25237: PPUSH
25238: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
25242: LD_EXP 57
25246: PPUSH
25247: LD_EXP 37
25251: PPUSH
25252: CALL_OW 115
// wait ( 0 0$2 ) ;
25256: LD_INT 70
25258: PPUSH
25259: CALL_OW 67
// KillUnit ( Heike ) ;
25263: LD_EXP 37
25267: PPUSH
25268: CALL_OW 66
// end ; 2 :
25272: GO 25454
25274: LD_INT 2
25276: DOUBLE
25277: EQUAL
25278: IFTRUE 25282
25280: GO 25453
25282: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
25283: LD_EXP 37
25287: PPUSH
25288: LD_STRING DH-Fail-a-8
25290: PPUSH
25291: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
25295: LD_EXP 37
25299: PPUSH
25300: LD_STRING DH-Fail-a-9
25302: PPUSH
25303: CALL_OW 88
// Say ( ruDisturb , DH-Fail-10 ) ;
25307: LD_EXP 57
25311: PPUSH
25312: LD_STRING DH-Fail-10
25314: PPUSH
25315: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
25319: LD_EXP 37
25323: PPUSH
25324: LD_STRING DH-Fail-a-11
25326: PPUSH
25327: CALL_OW 88
// async ;
25331: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
25332: LD_EXP 57
25336: PPUSH
25337: LD_EXP 37
25341: PPUSH
25342: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
25346: LD_EXP 57
25350: PPUSH
25351: LD_EXP 37
25355: PPUSH
25356: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
25360: LD_EXP 57
25364: PPUSH
25365: LD_STRING DH-Fail-12
25367: PPUSH
25368: CALL_OW 88
// sync ;
25372: SYNC
// wait ( 0 0$1 ) ;
25373: LD_INT 35
25375: PPUSH
25376: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
25380: LD_EXP 37
25384: PPUSH
25385: LD_STRING DH-Fail-a-13
25387: PPUSH
25388: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
25392: LD_EXP 57
25396: PPUSH
25397: LD_INT 100
25399: PPUSH
25400: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
25404: LD_EXP 57
25408: PPUSH
25409: LD_STRING DMcn-Fail-a-14
25411: PPUSH
25412: CALL_OW 91
// KillUnit ( ruDisturb ) ;
25416: LD_EXP 57
25420: PPUSH
25421: CALL_OW 66
// wait ( 0 0$1 ) ;
25425: LD_INT 35
25427: PPUSH
25428: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
25432: LD_EXP 37
25436: PPUSH
25437: LD_STRING DH-Fail-a-15
25439: PPUSH
25440: CALL_OW 88
// YouLost ( FailMuchin ) ;
25444: LD_STRING FailMuchin
25446: PPUSH
25447: CALL_OW 104
// end ; end ;
25451: GO 25454
25453: POP
// InGameOff ;
25454: CALL_OW 9
// end ; end_of_file
25458: PPOPN 4
25460: END
// every 0 0$1 marked gameStartEvent do
25461: GO 25463
25463: DISABLE
// begin enable ;
25464: ENABLE
// if not contactWithAmerican then
25465: LD_EXP 25
25469: NOT
25470: IFFALSE 25515
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
25472: LD_ADDR_OWVAR 47
25476: PUSH
25477: LD_STRING #X108-1
25479: PUSH
25480: LD_INT 22
25482: PUSH
25483: LD_INT 5
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 21
25492: PUSH
25493: LD_INT 1
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PPUSH
25504: CALL_OW 69
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: ST_TO_ADDR
25513: GO 25595
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , #X108-2 , UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ] ;
25515: LD_ADDR_OWVAR 47
25519: PUSH
25520: LD_STRING #X108-1
25522: PUSH
25523: LD_INT 22
25525: PUSH
25526: LD_INT 5
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 21
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PPUSH
25547: CALL_OW 69
25551: PUSH
25552: LD_STRING #X108-2
25554: PUSH
25555: LD_EXP 49
25559: PPUSH
25560: LD_INT 22
25562: PUSH
25563: LD_INT 4
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 21
25572: PUSH
25573: LD_INT 1
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PPUSH
25584: CALL_OW 72
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: ST_TO_ADDR
// end ; end_of_file
25595: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
25596: LD_EXP 37
25600: PPUSH
25601: LD_INT 59
25603: PPUSH
25604: CALL_OW 308
25608: IFFALSE 25730
25610: GO 25612
25612: DISABLE
// begin Query ( FinalInfo ) ;
25613: LD_STRING FinalInfo
25615: PPUSH
25616: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
25620: LD_INT 59
25622: PPUSH
25623: LD_INT 1
25625: PPUSH
25626: CALL_OW 424
// end_the_mission_allowed := true ;
25630: LD_ADDR_OWVAR 57
25634: PUSH
25635: LD_INT 1
25637: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25638: LD_INT 35
25640: PPUSH
25641: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
25645: LD_INT 22
25647: PUSH
25648: LD_INT 2
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 21
25657: PUSH
25658: LD_INT 1
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 95
25667: PUSH
25668: LD_INT 59
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: LIST
25679: PPUSH
25680: CALL_OW 69
25684: PPUSH
25685: CALL 28613 0 1
25689: PUSH
25690: LD_INT 22
25692: PUSH
25693: LD_INT 2
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 21
25702: PUSH
25703: LD_INT 1
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PPUSH
25714: CALL_OW 69
25718: PPUSH
25719: CALL 28613 0 1
25723: EQUAL
25724: IFFALSE 25638
// EndMission ;
25726: CALL 25738 0 0
// end ;
25730: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
25731: CALL 25738 0 0
// end ;
25735: PPOPN 1
25737: END
// function EndMission ; begin
25738: LD_INT 0
25740: PPUSH
// if not IsInArea ( Heike , finalArea ) then
25741: LD_EXP 37
25745: PPUSH
25746: LD_INT 59
25748: PPUSH
25749: CALL_OW 308
25753: NOT
25754: IFFALSE 25765
// begin Query ( HeikeOutOfArea ) ;
25756: LD_STRING HeikeOutOfArea
25758: PPUSH
25759: CALL_OW 97
// exit ;
25763: GO 26506
// end ; if not IsOk ( Heike ) then
25765: LD_EXP 37
25769: PPUSH
25770: CALL_OW 302
25774: NOT
25775: IFFALSE 25786
// begin Query ( HeikeIsHurt ) ;
25777: LD_STRING HeikeIsHurt
25779: PPUSH
25780: CALL_OW 97
// exit ;
25784: GO 26506
// end ; if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
25786: LD_INT 22
25788: PUSH
25789: LD_INT 5
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 21
25798: PUSH
25799: LD_INT 1
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PPUSH
25810: CALL_OW 69
25814: PUSH
25815: LD_INT 0
25817: EQUAL
25818: PUSH
25819: LD_EXP 32
25823: PUSH
25824: LD_INT 0
25826: EQUAL
25827: AND
25828: IFFALSE 25842
// AddMedal ( med1 , 1 ) else
25830: LD_STRING med1
25832: PPUSH
25833: LD_INT 1
25835: PPUSH
25836: CALL_OW 101
25840: GO 25853
// AddMedal ( med1 , - 1 ) ;
25842: LD_STRING med1
25844: PPUSH
25845: LD_INT 1
25847: NEG
25848: PPUSH
25849: CALL_OW 101
// if explosivePlantedList >= 3 then
25853: LD_EXP 29
25857: PUSH
25858: LD_INT 3
25860: GREATEREQUAL
25861: IFFALSE 25875
// AddMedal ( med2 , 1 ) else
25863: LD_STRING med2
25865: PPUSH
25866: LD_INT 1
25868: PPUSH
25869: CALL_OW 101
25873: GO 25909
// if explosivePlantedList < 3 then
25875: LD_EXP 29
25879: PUSH
25880: LD_INT 3
25882: LESS
25883: IFFALSE 25898
// AddMedal ( med2 , - 2 ) else
25885: LD_STRING med2
25887: PPUSH
25888: LD_INT 2
25890: NEG
25891: PPUSH
25892: CALL_OW 101
25896: GO 25909
// AddMedal ( med2 , - 1 ) ;
25898: LD_STRING med2
25900: PPUSH
25901: LD_INT 1
25903: NEG
25904: PPUSH
25905: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
25909: LD_INT 5
25911: PPUSH
25912: LD_INT 2
25914: PPUSH
25915: CALL_OW 321
25919: PUSH
25920: LD_INT 2
25922: EQUAL
25923: IFFALSE 25937
// AddMedal ( med3 , 1 ) else
25925: LD_STRING med3
25927: PPUSH
25928: LD_INT 1
25930: PPUSH
25931: CALL_OW 101
25935: GO 25948
// AddMedal ( med3 , - 1 ) ;
25937: LD_STRING med3
25939: PPUSH
25940: LD_INT 1
25942: NEG
25943: PPUSH
25944: CALL_OW 101
// GiveMedals ( MAIN ) ;
25948: LD_STRING MAIN
25950: PPUSH
25951: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
25955: LD_INT 22
25957: PUSH
25958: LD_INT 2
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 23
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 21
25977: PUSH
25978: LD_INT 1
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: LIST
25989: PPUSH
25990: CALL_OW 69
25994: PPUSH
25995: CALL_OW 43
// if Doug and GetSide ( Doug ) = 2 then
25999: LD_EXP 51
26003: PUSH
26004: LD_EXP 51
26008: PPUSH
26009: CALL_OW 255
26013: PUSH
26014: LD_INT 2
26016: EQUAL
26017: AND
26018: IFFALSE 26032
// SaveCharacters ( Doug , 08_UsCommander ) ;
26020: LD_EXP 51
26024: PPUSH
26025: LD_STRING 08_UsCommander
26027: PPUSH
26028: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff Doug , 08_Americans ) ;
26032: LD_INT 22
26034: PUSH
26035: LD_INT 2
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 23
26044: PUSH
26045: LD_INT 1
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 21
26054: PUSH
26055: LD_INT 1
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: LIST
26066: PPUSH
26067: CALL_OW 69
26071: PUSH
26072: LD_EXP 51
26076: DIFF
26077: PPUSH
26078: LD_STRING 08_Americans
26080: PPUSH
26081: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
26085: LD_EXP 37
26089: PPUSH
26090: CALL_OW 248
26094: PUSH
26095: LD_INT 3
26097: EQUAL
26098: IFFALSE 26128
// begin CopySkills ( Heike , HeikeTmp ) ;
26100: LD_EXP 37
26104: PPUSH
26105: LD_EXP 53
26109: PPUSH
26110: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
26114: LD_EXP 53
26118: PPUSH
26119: LD_STRING 08_Heike
26121: PPUSH
26122: CALL_OW 38
// end else
26126: GO 26140
// SaveCharacters ( Heike , 08_Heike ) ;
26128: LD_EXP 37
26132: PPUSH
26133: LD_STRING 08_Heike
26135: PPUSH
26136: CALL_OW 38
// if Aviradze and GetSide ( Aviradze ) = 2 then
26140: LD_EXP 47
26144: PUSH
26145: LD_EXP 47
26149: PPUSH
26150: CALL_OW 255
26154: PUSH
26155: LD_INT 2
26157: EQUAL
26158: AND
26159: IFFALSE 26173
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
26161: LD_EXP 47
26165: PPUSH
26166: LD_STRING 08_Aviradze
26168: PPUSH
26169: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
26173: LD_EXP 40
26177: PUSH
26178: LD_EXP 40
26182: PPUSH
26183: CALL_OW 255
26187: PUSH
26188: LD_INT 2
26190: EQUAL
26191: AND
26192: IFFALSE 26206
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
26194: LD_EXP 40
26198: PPUSH
26199: LD_STRING 08_Ibrahim
26201: PPUSH
26202: CALL_OW 38
// if Kamil and GetSide ( Kamil ) = 2 then
26206: LD_EXP 41
26210: PUSH
26211: LD_EXP 41
26215: PPUSH
26216: CALL_OW 255
26220: PUSH
26221: LD_INT 2
26223: EQUAL
26224: AND
26225: IFFALSE 26239
// SaveCharacters ( Kamil , 08_Kamil ) ;
26227: LD_EXP 41
26231: PPUSH
26232: LD_STRING 08_Kamil
26234: PPUSH
26235: CALL_OW 38
// if Sophia and GetSide ( Sophia ) = 2 then
26239: LD_EXP 43
26243: PUSH
26244: LD_EXP 43
26248: PPUSH
26249: CALL_OW 255
26253: PUSH
26254: LD_INT 2
26256: EQUAL
26257: AND
26258: IFFALSE 26272
// SaveCharacters ( Sophia , 08_Sophia ) ;
26260: LD_EXP 43
26264: PPUSH
26265: LD_STRING 08_Sophia
26267: PPUSH
26268: CALL_OW 38
// if Kaia and GetSide ( Aviradze ) = 2 then
26272: LD_EXP 42
26276: PUSH
26277: LD_EXP 47
26281: PPUSH
26282: CALL_OW 255
26286: PUSH
26287: LD_INT 2
26289: EQUAL
26290: AND
26291: IFFALSE 26305
// SaveCharacters ( Kaia , 08_Kaia ) ;
26293: LD_EXP 42
26297: PPUSH
26298: LD_STRING 08_Kaia
26300: PPUSH
26301: CALL_OW 38
// if Givi and GetSide ( Givi ) = 2 then
26305: LD_EXP 38
26309: PUSH
26310: LD_EXP 38
26314: PPUSH
26315: CALL_OW 255
26319: PUSH
26320: LD_INT 2
26322: EQUAL
26323: AND
26324: IFFALSE 26381
// if GetNation ( Givi ) = nation_russian then
26326: LD_EXP 38
26330: PPUSH
26331: CALL_OW 248
26335: PUSH
26336: LD_INT 3
26338: EQUAL
26339: IFFALSE 26369
// begin CopySkills ( Givi , GiviTmp ) ;
26341: LD_EXP 38
26345: PPUSH
26346: LD_EXP 54
26350: PPUSH
26351: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
26355: LD_EXP 54
26359: PPUSH
26360: LD_STRING 08_Givi
26362: PPUSH
26363: CALL_OW 38
// end else
26367: GO 26381
// SaveCharacters ( Givi , 08_Givi ) ;
26369: LD_EXP 38
26373: PPUSH
26374: LD_STRING 08_Givi
26376: PPUSH
26377: CALL_OW 38
// if Mike and GetSide ( Mike ) = 2 then
26381: LD_EXP 39
26385: PUSH
26386: LD_EXP 39
26390: PPUSH
26391: CALL_OW 255
26395: PUSH
26396: LD_INT 2
26398: EQUAL
26399: AND
26400: IFFALSE 26414
// SaveCharacters ( Mike , 08_Mike ) ;
26402: LD_EXP 39
26406: PPUSH
26407: LD_STRING 08_Mike
26409: PPUSH
26410: CALL_OW 38
// if Markov and GetSide ( Markov ) = 2 then
26414: LD_EXP 44
26418: PUSH
26419: LD_EXP 44
26423: PPUSH
26424: CALL_OW 255
26428: PUSH
26429: LD_INT 2
26431: EQUAL
26432: AND
26433: IFFALSE 26447
// SaveCharacters ( Markov , 08_Markov ) ;
26435: LD_EXP 44
26439: PPUSH
26440: LD_STRING 08_Markov
26442: PPUSH
26443: CALL_OW 38
// if Kurt and GetSide ( Kurt ) = 2 then
26447: LD_EXP 46
26451: PUSH
26452: LD_EXP 46
26456: PPUSH
26457: CALL_OW 255
26461: PUSH
26462: LD_INT 2
26464: EQUAL
26465: AND
26466: IFFALSE 26480
// SaveCharacters ( Kurt , 08_Kurt ) ;
26468: LD_EXP 46
26472: PPUSH
26473: LD_STRING 08_Kurt
26475: PPUSH
26476: CALL_OW 38
// if heikeSecondSquad then
26480: LD_EXP 48
26484: IFFALSE 26498
// SaveCharacters ( heikeSecondSquad , 08_others ) ;
26486: LD_EXP 48
26490: PPUSH
26491: LD_STRING 08_others
26493: PPUSH
26494: CALL_OW 38
// YouWin ;
26498: CALL_OW 103
// DialogueOff ;
26502: CALL_OW 7
// end ; end_of_file
26506: LD_VAR 0 1
26510: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26511: LD_INT 0
26513: PPUSH
26514: PPUSH
// if exist_mode then
26515: LD_VAR 0 2
26519: IFFALSE 26544
// unit := CreateCharacter ( prefix & ident ) else
26521: LD_ADDR_VAR 0 5
26525: PUSH
26526: LD_VAR 0 3
26530: PUSH
26531: LD_VAR 0 1
26535: STR
26536: PPUSH
26537: CALL_OW 34
26541: ST_TO_ADDR
26542: GO 26559
// unit := NewCharacter ( ident ) ;
26544: LD_ADDR_VAR 0 5
26548: PUSH
26549: LD_VAR 0 1
26553: PPUSH
26554: CALL_OW 25
26558: ST_TO_ADDR
// result := unit ;
26559: LD_ADDR_VAR 0 4
26563: PUSH
26564: LD_VAR 0 5
26568: ST_TO_ADDR
// end ;
26569: LD_VAR 0 4
26573: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26574: LD_INT 0
26576: PPUSH
26577: PPUSH
// if not side or not nation then
26578: LD_VAR 0 1
26582: NOT
26583: PUSH
26584: LD_VAR 0 2
26588: NOT
26589: OR
26590: IFFALSE 26594
// exit ;
26592: GO 27362
// case nation of nation_american :
26594: LD_VAR 0 2
26598: PUSH
26599: LD_INT 1
26601: DOUBLE
26602: EQUAL
26603: IFTRUE 26607
26605: GO 26821
26607: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26608: LD_ADDR_VAR 0 4
26612: PUSH
26613: LD_INT 35
26615: PUSH
26616: LD_INT 45
26618: PUSH
26619: LD_INT 46
26621: PUSH
26622: LD_INT 47
26624: PUSH
26625: LD_INT 82
26627: PUSH
26628: LD_INT 83
26630: PUSH
26631: LD_INT 84
26633: PUSH
26634: LD_INT 85
26636: PUSH
26637: LD_INT 86
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: LD_INT 2
26645: PUSH
26646: LD_INT 6
26648: PUSH
26649: LD_INT 15
26651: PUSH
26652: LD_INT 16
26654: PUSH
26655: LD_INT 7
26657: PUSH
26658: LD_INT 12
26660: PUSH
26661: LD_INT 13
26663: PUSH
26664: LD_INT 10
26666: PUSH
26667: LD_INT 14
26669: PUSH
26670: LD_INT 20
26672: PUSH
26673: LD_INT 21
26675: PUSH
26676: LD_INT 22
26678: PUSH
26679: LD_INT 25
26681: PUSH
26682: LD_INT 32
26684: PUSH
26685: LD_INT 27
26687: PUSH
26688: LD_INT 36
26690: PUSH
26691: LD_INT 69
26693: PUSH
26694: LD_INT 39
26696: PUSH
26697: LD_INT 34
26699: PUSH
26700: LD_INT 40
26702: PUSH
26703: LD_INT 48
26705: PUSH
26706: LD_INT 49
26708: PUSH
26709: LD_INT 50
26711: PUSH
26712: LD_INT 51
26714: PUSH
26715: LD_INT 52
26717: PUSH
26718: LD_INT 53
26720: PUSH
26721: LD_INT 54
26723: PUSH
26724: LD_INT 55
26726: PUSH
26727: LD_INT 56
26729: PUSH
26730: LD_INT 57
26732: PUSH
26733: LD_INT 58
26735: PUSH
26736: LD_INT 59
26738: PUSH
26739: LD_INT 60
26741: PUSH
26742: LD_INT 61
26744: PUSH
26745: LD_INT 62
26747: PUSH
26748: LD_INT 80
26750: PUSH
26751: LD_INT 82
26753: PUSH
26754: LD_INT 83
26756: PUSH
26757: LD_INT 84
26759: PUSH
26760: LD_INT 85
26762: PUSH
26763: LD_INT 86
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: ST_TO_ADDR
26819: GO 27286
26821: LD_INT 2
26823: DOUBLE
26824: EQUAL
26825: IFTRUE 26829
26827: GO 27055
26829: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26830: LD_ADDR_VAR 0 4
26834: PUSH
26835: LD_INT 35
26837: PUSH
26838: LD_INT 45
26840: PUSH
26841: LD_INT 46
26843: PUSH
26844: LD_INT 47
26846: PUSH
26847: LD_INT 82
26849: PUSH
26850: LD_INT 83
26852: PUSH
26853: LD_INT 84
26855: PUSH
26856: LD_INT 85
26858: PUSH
26859: LD_INT 87
26861: PUSH
26862: LD_INT 70
26864: PUSH
26865: LD_INT 1
26867: PUSH
26868: LD_INT 11
26870: PUSH
26871: LD_INT 3
26873: PUSH
26874: LD_INT 4
26876: PUSH
26877: LD_INT 5
26879: PUSH
26880: LD_INT 6
26882: PUSH
26883: LD_INT 15
26885: PUSH
26886: LD_INT 18
26888: PUSH
26889: LD_INT 7
26891: PUSH
26892: LD_INT 17
26894: PUSH
26895: LD_INT 8
26897: PUSH
26898: LD_INT 20
26900: PUSH
26901: LD_INT 21
26903: PUSH
26904: LD_INT 22
26906: PUSH
26907: LD_INT 72
26909: PUSH
26910: LD_INT 26
26912: PUSH
26913: LD_INT 69
26915: PUSH
26916: LD_INT 39
26918: PUSH
26919: LD_INT 40
26921: PUSH
26922: LD_INT 41
26924: PUSH
26925: LD_INT 42
26927: PUSH
26928: LD_INT 43
26930: PUSH
26931: LD_INT 48
26933: PUSH
26934: LD_INT 49
26936: PUSH
26937: LD_INT 50
26939: PUSH
26940: LD_INT 51
26942: PUSH
26943: LD_INT 52
26945: PUSH
26946: LD_INT 53
26948: PUSH
26949: LD_INT 54
26951: PUSH
26952: LD_INT 55
26954: PUSH
26955: LD_INT 56
26957: PUSH
26958: LD_INT 60
26960: PUSH
26961: LD_INT 61
26963: PUSH
26964: LD_INT 62
26966: PUSH
26967: LD_INT 66
26969: PUSH
26970: LD_INT 67
26972: PUSH
26973: LD_INT 68
26975: PUSH
26976: LD_INT 81
26978: PUSH
26979: LD_INT 82
26981: PUSH
26982: LD_INT 83
26984: PUSH
26985: LD_INT 84
26987: PUSH
26988: LD_INT 85
26990: PUSH
26991: LD_INT 87
26993: PUSH
26994: LD_INT 88
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: ST_TO_ADDR
27053: GO 27286
27055: LD_INT 3
27057: DOUBLE
27058: EQUAL
27059: IFTRUE 27063
27061: GO 27285
27063: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27064: LD_ADDR_VAR 0 4
27068: PUSH
27069: LD_INT 46
27071: PUSH
27072: LD_INT 47
27074: PUSH
27075: LD_INT 1
27077: PUSH
27078: LD_INT 2
27080: PUSH
27081: LD_INT 82
27083: PUSH
27084: LD_INT 83
27086: PUSH
27087: LD_INT 84
27089: PUSH
27090: LD_INT 85
27092: PUSH
27093: LD_INT 86
27095: PUSH
27096: LD_INT 11
27098: PUSH
27099: LD_INT 9
27101: PUSH
27102: LD_INT 20
27104: PUSH
27105: LD_INT 19
27107: PUSH
27108: LD_INT 21
27110: PUSH
27111: LD_INT 24
27113: PUSH
27114: LD_INT 22
27116: PUSH
27117: LD_INT 25
27119: PUSH
27120: LD_INT 28
27122: PUSH
27123: LD_INT 29
27125: PUSH
27126: LD_INT 30
27128: PUSH
27129: LD_INT 31
27131: PUSH
27132: LD_INT 37
27134: PUSH
27135: LD_INT 38
27137: PUSH
27138: LD_INT 32
27140: PUSH
27141: LD_INT 27
27143: PUSH
27144: LD_INT 33
27146: PUSH
27147: LD_INT 69
27149: PUSH
27150: LD_INT 39
27152: PUSH
27153: LD_INT 34
27155: PUSH
27156: LD_INT 40
27158: PUSH
27159: LD_INT 71
27161: PUSH
27162: LD_INT 23
27164: PUSH
27165: LD_INT 44
27167: PUSH
27168: LD_INT 48
27170: PUSH
27171: LD_INT 49
27173: PUSH
27174: LD_INT 50
27176: PUSH
27177: LD_INT 51
27179: PUSH
27180: LD_INT 52
27182: PUSH
27183: LD_INT 53
27185: PUSH
27186: LD_INT 54
27188: PUSH
27189: LD_INT 55
27191: PUSH
27192: LD_INT 56
27194: PUSH
27195: LD_INT 57
27197: PUSH
27198: LD_INT 58
27200: PUSH
27201: LD_INT 59
27203: PUSH
27204: LD_INT 63
27206: PUSH
27207: LD_INT 64
27209: PUSH
27210: LD_INT 65
27212: PUSH
27213: LD_INT 82
27215: PUSH
27216: LD_INT 83
27218: PUSH
27219: LD_INT 84
27221: PUSH
27222: LD_INT 85
27224: PUSH
27225: LD_INT 86
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: ST_TO_ADDR
27283: GO 27286
27285: POP
// if state > - 1 and state < 3 then
27286: LD_VAR 0 3
27290: PUSH
27291: LD_INT 1
27293: NEG
27294: GREATER
27295: PUSH
27296: LD_VAR 0 3
27300: PUSH
27301: LD_INT 3
27303: LESS
27304: AND
27305: IFFALSE 27362
// for i in result do
27307: LD_ADDR_VAR 0 5
27311: PUSH
27312: LD_VAR 0 4
27316: PUSH
27317: FOR_IN
27318: IFFALSE 27360
// if GetTech ( i , side ) <> state then
27320: LD_VAR 0 5
27324: PPUSH
27325: LD_VAR 0 1
27329: PPUSH
27330: CALL_OW 321
27334: PUSH
27335: LD_VAR 0 3
27339: NONEQUAL
27340: IFFALSE 27358
// result := result diff i ;
27342: LD_ADDR_VAR 0 4
27346: PUSH
27347: LD_VAR 0 4
27351: PUSH
27352: LD_VAR 0 5
27356: DIFF
27357: ST_TO_ADDR
27358: GO 27317
27360: POP
27361: POP
// end ;
27362: LD_VAR 0 4
27366: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27367: LD_INT 0
27369: PPUSH
27370: PPUSH
27371: PPUSH
// result := true ;
27372: LD_ADDR_VAR 0 3
27376: PUSH
27377: LD_INT 1
27379: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27380: LD_ADDR_VAR 0 5
27384: PUSH
27385: LD_VAR 0 2
27389: PPUSH
27390: CALL_OW 480
27394: ST_TO_ADDR
// if not tmp then
27395: LD_VAR 0 5
27399: NOT
27400: IFFALSE 27404
// exit ;
27402: GO 27453
// for i in tmp do
27404: LD_ADDR_VAR 0 4
27408: PUSH
27409: LD_VAR 0 5
27413: PUSH
27414: FOR_IN
27415: IFFALSE 27451
// if GetTech ( i , side ) <> state_researched then
27417: LD_VAR 0 4
27421: PPUSH
27422: LD_VAR 0 1
27426: PPUSH
27427: CALL_OW 321
27431: PUSH
27432: LD_INT 2
27434: NONEQUAL
27435: IFFALSE 27449
// begin result := false ;
27437: LD_ADDR_VAR 0 3
27441: PUSH
27442: LD_INT 0
27444: ST_TO_ADDR
// exit ;
27445: POP
27446: POP
27447: GO 27453
// end ;
27449: GO 27414
27451: POP
27452: POP
// end ;
27453: LD_VAR 0 3
27457: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27458: LD_INT 0
27460: PPUSH
27461: PPUSH
27462: PPUSH
27463: PPUSH
27464: PPUSH
27465: PPUSH
27466: PPUSH
27467: PPUSH
27468: PPUSH
27469: PPUSH
27470: PPUSH
27471: PPUSH
27472: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27473: LD_VAR 0 1
27477: NOT
27478: PUSH
27479: LD_VAR 0 1
27483: PPUSH
27484: CALL_OW 257
27488: PUSH
27489: LD_INT 9
27491: NONEQUAL
27492: OR
27493: IFFALSE 27497
// exit ;
27495: GO 28070
// side := GetSide ( unit ) ;
27497: LD_ADDR_VAR 0 9
27501: PUSH
27502: LD_VAR 0 1
27506: PPUSH
27507: CALL_OW 255
27511: ST_TO_ADDR
// tech_space := tech_spacanom ;
27512: LD_ADDR_VAR 0 12
27516: PUSH
27517: LD_INT 29
27519: ST_TO_ADDR
// tech_time := tech_taurad ;
27520: LD_ADDR_VAR 0 13
27524: PUSH
27525: LD_INT 28
27527: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27528: LD_ADDR_VAR 0 11
27532: PUSH
27533: LD_VAR 0 1
27537: PPUSH
27538: CALL_OW 310
27542: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27543: LD_VAR 0 11
27547: PPUSH
27548: CALL_OW 247
27552: PUSH
27553: LD_INT 2
27555: EQUAL
27556: IFFALSE 27560
// exit ;
27558: GO 28070
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27560: LD_ADDR_VAR 0 8
27564: PUSH
27565: LD_INT 81
27567: PUSH
27568: LD_VAR 0 9
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 3
27579: PUSH
27580: LD_INT 21
27582: PUSH
27583: LD_INT 3
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PPUSH
27598: CALL_OW 69
27602: ST_TO_ADDR
// if not tmp then
27603: LD_VAR 0 8
27607: NOT
27608: IFFALSE 27612
// exit ;
27610: GO 28070
// if in_unit then
27612: LD_VAR 0 11
27616: IFFALSE 27640
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27618: LD_ADDR_VAR 0 10
27622: PUSH
27623: LD_VAR 0 8
27627: PPUSH
27628: LD_VAR 0 11
27632: PPUSH
27633: CALL_OW 74
27637: ST_TO_ADDR
27638: GO 27660
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27640: LD_ADDR_VAR 0 10
27644: PUSH
27645: LD_VAR 0 8
27649: PPUSH
27650: LD_VAR 0 1
27654: PPUSH
27655: CALL_OW 74
27659: ST_TO_ADDR
// if not enemy then
27660: LD_VAR 0 10
27664: NOT
27665: IFFALSE 27669
// exit ;
27667: GO 28070
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27669: LD_VAR 0 11
27673: PUSH
27674: LD_VAR 0 11
27678: PPUSH
27679: LD_VAR 0 10
27683: PPUSH
27684: CALL_OW 296
27688: PUSH
27689: LD_INT 13
27691: GREATER
27692: AND
27693: PUSH
27694: LD_VAR 0 1
27698: PPUSH
27699: LD_VAR 0 10
27703: PPUSH
27704: CALL_OW 296
27708: PUSH
27709: LD_INT 12
27711: GREATER
27712: OR
27713: IFFALSE 27717
// exit ;
27715: GO 28070
// missile := [ 1 ] ;
27717: LD_ADDR_VAR 0 14
27721: PUSH
27722: LD_INT 1
27724: PUSH
27725: EMPTY
27726: LIST
27727: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27728: LD_VAR 0 9
27732: PPUSH
27733: LD_VAR 0 12
27737: PPUSH
27738: CALL_OW 325
27742: IFFALSE 27771
// missile := Replace ( missile , missile + 1 , 2 ) ;
27744: LD_ADDR_VAR 0 14
27748: PUSH
27749: LD_VAR 0 14
27753: PPUSH
27754: LD_VAR 0 14
27758: PUSH
27759: LD_INT 1
27761: PLUS
27762: PPUSH
27763: LD_INT 2
27765: PPUSH
27766: CALL_OW 1
27770: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27771: LD_VAR 0 9
27775: PPUSH
27776: LD_VAR 0 13
27780: PPUSH
27781: CALL_OW 325
27785: PUSH
27786: LD_VAR 0 10
27790: PPUSH
27791: CALL_OW 255
27795: PPUSH
27796: LD_VAR 0 13
27800: PPUSH
27801: CALL_OW 325
27805: NOT
27806: AND
27807: IFFALSE 27836
// missile := Replace ( missile , missile + 1 , 3 ) ;
27809: LD_ADDR_VAR 0 14
27813: PUSH
27814: LD_VAR 0 14
27818: PPUSH
27819: LD_VAR 0 14
27823: PUSH
27824: LD_INT 1
27826: PLUS
27827: PPUSH
27828: LD_INT 3
27830: PPUSH
27831: CALL_OW 1
27835: ST_TO_ADDR
// if missile < 2 then
27836: LD_VAR 0 14
27840: PUSH
27841: LD_INT 2
27843: LESS
27844: IFFALSE 27848
// exit ;
27846: GO 28070
// x := GetX ( enemy ) ;
27848: LD_ADDR_VAR 0 4
27852: PUSH
27853: LD_VAR 0 10
27857: PPUSH
27858: CALL_OW 250
27862: ST_TO_ADDR
// y := GetY ( enemy ) ;
27863: LD_ADDR_VAR 0 5
27867: PUSH
27868: LD_VAR 0 10
27872: PPUSH
27873: CALL_OW 251
27877: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27878: LD_ADDR_VAR 0 6
27882: PUSH
27883: LD_VAR 0 4
27887: PUSH
27888: LD_INT 1
27890: NEG
27891: PPUSH
27892: LD_INT 1
27894: PPUSH
27895: CALL_OW 12
27899: PLUS
27900: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27901: LD_ADDR_VAR 0 7
27905: PUSH
27906: LD_VAR 0 5
27910: PUSH
27911: LD_INT 1
27913: NEG
27914: PPUSH
27915: LD_INT 1
27917: PPUSH
27918: CALL_OW 12
27922: PLUS
27923: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27924: LD_VAR 0 6
27928: PPUSH
27929: LD_VAR 0 7
27933: PPUSH
27934: CALL_OW 488
27938: NOT
27939: IFFALSE 27961
// begin _x := x ;
27941: LD_ADDR_VAR 0 6
27945: PUSH
27946: LD_VAR 0 4
27950: ST_TO_ADDR
// _y := y ;
27951: LD_ADDR_VAR 0 7
27955: PUSH
27956: LD_VAR 0 5
27960: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27961: LD_ADDR_VAR 0 3
27965: PUSH
27966: LD_INT 1
27968: PPUSH
27969: LD_VAR 0 14
27973: PPUSH
27974: CALL_OW 12
27978: ST_TO_ADDR
// case i of 1 :
27979: LD_VAR 0 3
27983: PUSH
27984: LD_INT 1
27986: DOUBLE
27987: EQUAL
27988: IFTRUE 27992
27990: GO 28009
27992: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27993: LD_VAR 0 1
27997: PPUSH
27998: LD_VAR 0 10
28002: PPUSH
28003: CALL_OW 115
28007: GO 28070
28009: LD_INT 2
28011: DOUBLE
28012: EQUAL
28013: IFTRUE 28017
28015: GO 28039
28017: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28018: LD_VAR 0 1
28022: PPUSH
28023: LD_VAR 0 6
28027: PPUSH
28028: LD_VAR 0 7
28032: PPUSH
28033: CALL_OW 153
28037: GO 28070
28039: LD_INT 3
28041: DOUBLE
28042: EQUAL
28043: IFTRUE 28047
28045: GO 28069
28047: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28048: LD_VAR 0 1
28052: PPUSH
28053: LD_VAR 0 6
28057: PPUSH
28058: LD_VAR 0 7
28062: PPUSH
28063: CALL_OW 154
28067: GO 28070
28069: POP
// end ;
28070: LD_VAR 0 2
28074: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28075: LD_INT 0
28077: PPUSH
28078: PPUSH
28079: PPUSH
28080: PPUSH
28081: PPUSH
28082: PPUSH
// if not unit or not building then
28083: LD_VAR 0 1
28087: NOT
28088: PUSH
28089: LD_VAR 0 2
28093: NOT
28094: OR
28095: IFFALSE 28099
// exit ;
28097: GO 28257
// x := GetX ( building ) ;
28099: LD_ADDR_VAR 0 5
28103: PUSH
28104: LD_VAR 0 2
28108: PPUSH
28109: CALL_OW 250
28113: ST_TO_ADDR
// y := GetY ( building ) ;
28114: LD_ADDR_VAR 0 6
28118: PUSH
28119: LD_VAR 0 2
28123: PPUSH
28124: CALL_OW 251
28128: ST_TO_ADDR
// for i = 0 to 5 do
28129: LD_ADDR_VAR 0 4
28133: PUSH
28134: DOUBLE
28135: LD_INT 0
28137: DEC
28138: ST_TO_ADDR
28139: LD_INT 5
28141: PUSH
28142: FOR_TO
28143: IFFALSE 28255
// begin _x := ShiftX ( x , i , 3 ) ;
28145: LD_ADDR_VAR 0 7
28149: PUSH
28150: LD_VAR 0 5
28154: PPUSH
28155: LD_VAR 0 4
28159: PPUSH
28160: LD_INT 3
28162: PPUSH
28163: CALL_OW 272
28167: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28168: LD_ADDR_VAR 0 8
28172: PUSH
28173: LD_VAR 0 6
28177: PPUSH
28178: LD_VAR 0 4
28182: PPUSH
28183: LD_INT 3
28185: PPUSH
28186: CALL_OW 273
28190: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28191: LD_VAR 0 7
28195: PPUSH
28196: LD_VAR 0 8
28200: PPUSH
28201: CALL_OW 488
28205: NOT
28206: IFFALSE 28210
// continue ;
28208: GO 28142
// if HexInfo ( _x , _y ) = 0 then
28210: LD_VAR 0 7
28214: PPUSH
28215: LD_VAR 0 8
28219: PPUSH
28220: CALL_OW 428
28224: PUSH
28225: LD_INT 0
28227: EQUAL
28228: IFFALSE 28253
// begin ComMoveXY ( unit , _x , _y ) ;
28230: LD_VAR 0 1
28234: PPUSH
28235: LD_VAR 0 7
28239: PPUSH
28240: LD_VAR 0 8
28244: PPUSH
28245: CALL_OW 111
// exit ;
28249: POP
28250: POP
28251: GO 28257
// end ; end ;
28253: GO 28142
28255: POP
28256: POP
// end ;
28257: LD_VAR 0 3
28261: RET
// export function ScanBase ( side , base_area ) ; begin
28262: LD_INT 0
28264: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28265: LD_ADDR_VAR 0 3
28269: PUSH
28270: LD_VAR 0 2
28274: PPUSH
28275: LD_INT 81
28277: PUSH
28278: LD_VAR 0 1
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PPUSH
28287: CALL_OW 70
28291: ST_TO_ADDR
// end ;
28292: LD_VAR 0 3
28296: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28297: LD_INT 0
28299: PPUSH
28300: PPUSH
28301: PPUSH
28302: PPUSH
// result := false ;
28303: LD_ADDR_VAR 0 2
28307: PUSH
28308: LD_INT 0
28310: ST_TO_ADDR
// side := GetSide ( unit ) ;
28311: LD_ADDR_VAR 0 3
28315: PUSH
28316: LD_VAR 0 1
28320: PPUSH
28321: CALL_OW 255
28325: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28326: LD_ADDR_VAR 0 4
28330: PUSH
28331: LD_VAR 0 1
28335: PPUSH
28336: CALL_OW 248
28340: ST_TO_ADDR
// case nat of 1 :
28341: LD_VAR 0 4
28345: PUSH
28346: LD_INT 1
28348: DOUBLE
28349: EQUAL
28350: IFTRUE 28354
28352: GO 28365
28354: POP
// tech := tech_lassight ; 2 :
28355: LD_ADDR_VAR 0 5
28359: PUSH
28360: LD_INT 12
28362: ST_TO_ADDR
28363: GO 28404
28365: LD_INT 2
28367: DOUBLE
28368: EQUAL
28369: IFTRUE 28373
28371: GO 28384
28373: POP
// tech := tech_mortar ; 3 :
28374: LD_ADDR_VAR 0 5
28378: PUSH
28379: LD_INT 41
28381: ST_TO_ADDR
28382: GO 28404
28384: LD_INT 3
28386: DOUBLE
28387: EQUAL
28388: IFTRUE 28392
28390: GO 28403
28392: POP
// tech := tech_bazooka ; end ;
28393: LD_ADDR_VAR 0 5
28397: PUSH
28398: LD_INT 44
28400: ST_TO_ADDR
28401: GO 28404
28403: POP
// if Researched ( side , tech ) then
28404: LD_VAR 0 3
28408: PPUSH
28409: LD_VAR 0 5
28413: PPUSH
28414: CALL_OW 325
28418: IFFALSE 28445
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28420: LD_ADDR_VAR 0 2
28424: PUSH
28425: LD_INT 5
28427: PUSH
28428: LD_INT 8
28430: PUSH
28431: LD_INT 9
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: LIST
28438: PUSH
28439: LD_VAR 0 4
28443: ARRAY
28444: ST_TO_ADDR
// end ;
28445: LD_VAR 0 2
28449: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28450: LD_INT 0
28452: PPUSH
28453: PPUSH
28454: PPUSH
// if not mines then
28455: LD_VAR 0 2
28459: NOT
28460: IFFALSE 28464
// exit ;
28462: GO 28608
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28464: LD_ADDR_VAR 0 5
28468: PUSH
28469: LD_INT 81
28471: PUSH
28472: LD_VAR 0 1
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 3
28483: PUSH
28484: LD_INT 21
28486: PUSH
28487: LD_INT 3
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PPUSH
28502: CALL_OW 69
28506: ST_TO_ADDR
// for i in mines do
28507: LD_ADDR_VAR 0 4
28511: PUSH
28512: LD_VAR 0 2
28516: PUSH
28517: FOR_IN
28518: IFFALSE 28606
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28520: LD_VAR 0 4
28524: PUSH
28525: LD_INT 1
28527: ARRAY
28528: PPUSH
28529: LD_VAR 0 4
28533: PUSH
28534: LD_INT 2
28536: ARRAY
28537: PPUSH
28538: CALL_OW 458
28542: NOT
28543: IFFALSE 28547
// continue ;
28545: GO 28517
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28547: LD_VAR 0 4
28551: PUSH
28552: LD_INT 1
28554: ARRAY
28555: PPUSH
28556: LD_VAR 0 4
28560: PUSH
28561: LD_INT 2
28563: ARRAY
28564: PPUSH
28565: CALL_OW 428
28569: PUSH
28570: LD_VAR 0 5
28574: IN
28575: IFFALSE 28604
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28577: LD_VAR 0 4
28581: PUSH
28582: LD_INT 1
28584: ARRAY
28585: PPUSH
28586: LD_VAR 0 4
28590: PUSH
28591: LD_INT 2
28593: ARRAY
28594: PPUSH
28595: LD_VAR 0 1
28599: PPUSH
28600: CALL_OW 456
// end ;
28604: GO 28517
28606: POP
28607: POP
// end ;
28608: LD_VAR 0 3
28612: RET
// export function Count ( array ) ; var i ; begin
28613: LD_INT 0
28615: PPUSH
28616: PPUSH
// result := 0 ;
28617: LD_ADDR_VAR 0 2
28621: PUSH
28622: LD_INT 0
28624: ST_TO_ADDR
// for i in array do
28625: LD_ADDR_VAR 0 3
28629: PUSH
28630: LD_VAR 0 1
28634: PUSH
28635: FOR_IN
28636: IFFALSE 28660
// if i then
28638: LD_VAR 0 3
28642: IFFALSE 28658
// result := result + 1 ;
28644: LD_ADDR_VAR 0 2
28648: PUSH
28649: LD_VAR 0 2
28653: PUSH
28654: LD_INT 1
28656: PLUS
28657: ST_TO_ADDR
28658: GO 28635
28660: POP
28661: POP
// end ;
28662: LD_VAR 0 2
28666: RET
// export function IsEmpty ( building ) ; begin
28667: LD_INT 0
28669: PPUSH
// if not building then
28670: LD_VAR 0 1
28674: NOT
28675: IFFALSE 28679
// exit ;
28677: GO 28722
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28679: LD_ADDR_VAR 0 2
28683: PUSH
28684: LD_VAR 0 1
28688: PUSH
28689: LD_INT 22
28691: PUSH
28692: LD_VAR 0 1
28696: PPUSH
28697: CALL_OW 255
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 58
28708: PUSH
28709: EMPTY
28710: LIST
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PPUSH
28716: CALL_OW 69
28720: IN
28721: ST_TO_ADDR
// end ;
28722: LD_VAR 0 2
28726: RET
// export function IsNotFull ( building ) ; var places ; begin
28727: LD_INT 0
28729: PPUSH
28730: PPUSH
// if not building then
28731: LD_VAR 0 1
28735: NOT
28736: IFFALSE 28740
// exit ;
28738: GO 28911
// result := false ;
28740: LD_ADDR_VAR 0 2
28744: PUSH
28745: LD_INT 0
28747: ST_TO_ADDR
// places := 0 ;
28748: LD_ADDR_VAR 0 3
28752: PUSH
28753: LD_INT 0
28755: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
28756: LD_VAR 0 1
28760: PPUSH
28761: CALL_OW 266
28765: PUSH
28766: LD_INT 0
28768: DOUBLE
28769: EQUAL
28770: IFTRUE 28828
28772: LD_INT 1
28774: DOUBLE
28775: EQUAL
28776: IFTRUE 28828
28778: LD_INT 6
28780: DOUBLE
28781: EQUAL
28782: IFTRUE 28828
28784: LD_INT 7
28786: DOUBLE
28787: EQUAL
28788: IFTRUE 28828
28790: LD_INT 8
28792: DOUBLE
28793: EQUAL
28794: IFTRUE 28828
28796: LD_INT 4
28798: DOUBLE
28799: EQUAL
28800: IFTRUE 28828
28802: LD_INT 5
28804: DOUBLE
28805: EQUAL
28806: IFTRUE 28828
28808: LD_INT 2
28810: DOUBLE
28811: EQUAL
28812: IFTRUE 28828
28814: LD_INT 3
28816: DOUBLE
28817: EQUAL
28818: IFTRUE 28828
28820: LD_INT 35
28822: DOUBLE
28823: EQUAL
28824: IFTRUE 28828
28826: GO 28839
28828: POP
// places := 6 ; b_bunker , b_breastwork :
28829: LD_ADDR_VAR 0 3
28833: PUSH
28834: LD_INT 6
28836: ST_TO_ADDR
28837: GO 28884
28839: LD_INT 32
28841: DOUBLE
28842: EQUAL
28843: IFTRUE 28853
28845: LD_INT 31
28847: DOUBLE
28848: EQUAL
28849: IFTRUE 28853
28851: GO 28864
28853: POP
// places := 1 ; b_control_tower :
28854: LD_ADDR_VAR 0 3
28858: PUSH
28859: LD_INT 1
28861: ST_TO_ADDR
28862: GO 28884
28864: LD_INT 36
28866: DOUBLE
28867: EQUAL
28868: IFTRUE 28872
28870: GO 28883
28872: POP
// places := 3 ; end ;
28873: LD_ADDR_VAR 0 3
28877: PUSH
28878: LD_INT 3
28880: ST_TO_ADDR
28881: GO 28884
28883: POP
// if places then
28884: LD_VAR 0 3
28888: IFFALSE 28911
// result := UnitsInside ( building ) < places ;
28890: LD_ADDR_VAR 0 2
28894: PUSH
28895: LD_VAR 0 1
28899: PPUSH
28900: CALL_OW 313
28904: PUSH
28905: LD_VAR 0 3
28909: LESS
28910: ST_TO_ADDR
// end ;
28911: LD_VAR 0 2
28915: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28916: LD_INT 0
28918: PPUSH
28919: PPUSH
28920: PPUSH
28921: PPUSH
// tmp := [ ] ;
28922: LD_ADDR_VAR 0 3
28926: PUSH
28927: EMPTY
28928: ST_TO_ADDR
// list := [ ] ;
28929: LD_ADDR_VAR 0 5
28933: PUSH
28934: EMPTY
28935: ST_TO_ADDR
// for i = 16 to 25 do
28936: LD_ADDR_VAR 0 4
28940: PUSH
28941: DOUBLE
28942: LD_INT 16
28944: DEC
28945: ST_TO_ADDR
28946: LD_INT 25
28948: PUSH
28949: FOR_TO
28950: IFFALSE 29023
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28952: LD_ADDR_VAR 0 3
28956: PUSH
28957: LD_VAR 0 3
28961: PUSH
28962: LD_INT 22
28964: PUSH
28965: LD_VAR 0 1
28969: PPUSH
28970: CALL_OW 255
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 91
28981: PUSH
28982: LD_VAR 0 1
28986: PUSH
28987: LD_INT 6
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 30
28997: PUSH
28998: LD_VAR 0 4
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: LIST
29011: PUSH
29012: EMPTY
29013: LIST
29014: PPUSH
29015: CALL_OW 69
29019: ADD
29020: ST_TO_ADDR
29021: GO 28949
29023: POP
29024: POP
// for i = 1 to tmp do
29025: LD_ADDR_VAR 0 4
29029: PUSH
29030: DOUBLE
29031: LD_INT 1
29033: DEC
29034: ST_TO_ADDR
29035: LD_VAR 0 3
29039: PUSH
29040: FOR_TO
29041: IFFALSE 29129
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29043: LD_ADDR_VAR 0 5
29047: PUSH
29048: LD_VAR 0 5
29052: PUSH
29053: LD_VAR 0 3
29057: PUSH
29058: LD_VAR 0 4
29062: ARRAY
29063: PPUSH
29064: CALL_OW 266
29068: PUSH
29069: LD_VAR 0 3
29073: PUSH
29074: LD_VAR 0 4
29078: ARRAY
29079: PPUSH
29080: CALL_OW 250
29084: PUSH
29085: LD_VAR 0 3
29089: PUSH
29090: LD_VAR 0 4
29094: ARRAY
29095: PPUSH
29096: CALL_OW 251
29100: PUSH
29101: LD_VAR 0 3
29105: PUSH
29106: LD_VAR 0 4
29110: ARRAY
29111: PPUSH
29112: CALL_OW 254
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: PUSH
29123: EMPTY
29124: LIST
29125: ADD
29126: ST_TO_ADDR
29127: GO 29040
29129: POP
29130: POP
// result := list ;
29131: LD_ADDR_VAR 0 2
29135: PUSH
29136: LD_VAR 0 5
29140: ST_TO_ADDR
// end ;
29141: LD_VAR 0 2
29145: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29146: LD_INT 0
29148: PPUSH
29149: PPUSH
29150: PPUSH
29151: PPUSH
29152: PPUSH
29153: PPUSH
29154: PPUSH
// if not factory then
29155: LD_VAR 0 1
29159: NOT
29160: IFFALSE 29164
// exit ;
29162: GO 29757
// if control = control_apeman then
29164: LD_VAR 0 4
29168: PUSH
29169: LD_INT 5
29171: EQUAL
29172: IFFALSE 29281
// begin tmp := UnitsInside ( factory ) ;
29174: LD_ADDR_VAR 0 8
29178: PUSH
29179: LD_VAR 0 1
29183: PPUSH
29184: CALL_OW 313
29188: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29189: LD_VAR 0 8
29193: PPUSH
29194: LD_INT 25
29196: PUSH
29197: LD_INT 12
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PPUSH
29204: CALL_OW 72
29208: NOT
29209: IFFALSE 29219
// control := control_manual ;
29211: LD_ADDR_VAR 0 4
29215: PUSH
29216: LD_INT 1
29218: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29219: LD_ADDR_VAR 0 8
29223: PUSH
29224: LD_VAR 0 1
29228: PPUSH
29229: CALL 28916 0 1
29233: ST_TO_ADDR
// if tmp then
29234: LD_VAR 0 8
29238: IFFALSE 29281
// begin for i in tmp do
29240: LD_ADDR_VAR 0 7
29244: PUSH
29245: LD_VAR 0 8
29249: PUSH
29250: FOR_IN
29251: IFFALSE 29279
// if i [ 1 ] = b_ext_radio then
29253: LD_VAR 0 7
29257: PUSH
29258: LD_INT 1
29260: ARRAY
29261: PUSH
29262: LD_INT 22
29264: EQUAL
29265: IFFALSE 29277
// begin control := control_remote ;
29267: LD_ADDR_VAR 0 4
29271: PUSH
29272: LD_INT 2
29274: ST_TO_ADDR
// break ;
29275: GO 29279
// end ;
29277: GO 29250
29279: POP
29280: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29281: LD_VAR 0 1
29285: PPUSH
29286: LD_VAR 0 2
29290: PPUSH
29291: LD_VAR 0 3
29295: PPUSH
29296: LD_VAR 0 4
29300: PPUSH
29301: LD_VAR 0 5
29305: PPUSH
29306: CALL_OW 448
29310: IFFALSE 29345
// begin result := [ chassis , engine , control , weapon ] ;
29312: LD_ADDR_VAR 0 6
29316: PUSH
29317: LD_VAR 0 2
29321: PUSH
29322: LD_VAR 0 3
29326: PUSH
29327: LD_VAR 0 4
29331: PUSH
29332: LD_VAR 0 5
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: ST_TO_ADDR
// exit ;
29343: GO 29757
// end ; _chassis := AvailableChassisList ( factory ) ;
29345: LD_ADDR_VAR 0 9
29349: PUSH
29350: LD_VAR 0 1
29354: PPUSH
29355: CALL_OW 475
29359: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29360: LD_ADDR_VAR 0 11
29364: PUSH
29365: LD_VAR 0 1
29369: PPUSH
29370: CALL_OW 476
29374: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29375: LD_ADDR_VAR 0 12
29379: PUSH
29380: LD_VAR 0 1
29384: PPUSH
29385: CALL_OW 477
29389: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29390: LD_ADDR_VAR 0 10
29394: PUSH
29395: LD_VAR 0 1
29399: PPUSH
29400: CALL_OW 478
29404: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29405: LD_VAR 0 9
29409: NOT
29410: PUSH
29411: LD_VAR 0 11
29415: NOT
29416: OR
29417: PUSH
29418: LD_VAR 0 12
29422: NOT
29423: OR
29424: PUSH
29425: LD_VAR 0 10
29429: NOT
29430: OR
29431: IFFALSE 29466
// begin result := [ chassis , engine , control , weapon ] ;
29433: LD_ADDR_VAR 0 6
29437: PUSH
29438: LD_VAR 0 2
29442: PUSH
29443: LD_VAR 0 3
29447: PUSH
29448: LD_VAR 0 4
29452: PUSH
29453: LD_VAR 0 5
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: ST_TO_ADDR
// exit ;
29464: GO 29757
// end ; if not chassis in _chassis then
29466: LD_VAR 0 2
29470: PUSH
29471: LD_VAR 0 9
29475: IN
29476: NOT
29477: IFFALSE 29503
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29479: LD_ADDR_VAR 0 2
29483: PUSH
29484: LD_VAR 0 9
29488: PUSH
29489: LD_INT 1
29491: PPUSH
29492: LD_VAR 0 9
29496: PPUSH
29497: CALL_OW 12
29501: ARRAY
29502: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29503: LD_VAR 0 2
29507: PPUSH
29508: LD_VAR 0 3
29512: PPUSH
29513: CALL 29762 0 2
29517: NOT
29518: IFFALSE 29577
// repeat engine := _engine [ 1 ] ;
29520: LD_ADDR_VAR 0 3
29524: PUSH
29525: LD_VAR 0 11
29529: PUSH
29530: LD_INT 1
29532: ARRAY
29533: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29534: LD_ADDR_VAR 0 11
29538: PUSH
29539: LD_VAR 0 11
29543: PPUSH
29544: LD_INT 1
29546: PPUSH
29547: CALL_OW 3
29551: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29552: LD_VAR 0 2
29556: PPUSH
29557: LD_VAR 0 3
29561: PPUSH
29562: CALL 29762 0 2
29566: PUSH
29567: LD_VAR 0 11
29571: PUSH
29572: EMPTY
29573: EQUAL
29574: OR
29575: IFFALSE 29520
// if not control in _control then
29577: LD_VAR 0 4
29581: PUSH
29582: LD_VAR 0 12
29586: IN
29587: NOT
29588: IFFALSE 29614
// control := _control [ rand ( 1 , _control ) ] ;
29590: LD_ADDR_VAR 0 4
29594: PUSH
29595: LD_VAR 0 12
29599: PUSH
29600: LD_INT 1
29602: PPUSH
29603: LD_VAR 0 12
29607: PPUSH
29608: CALL_OW 12
29612: ARRAY
29613: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29614: LD_VAR 0 2
29618: PPUSH
29619: LD_VAR 0 5
29623: PPUSH
29624: CALL 29982 0 2
29628: NOT
29629: IFFALSE 29688
// repeat weapon := _weapon [ 1 ] ;
29631: LD_ADDR_VAR 0 5
29635: PUSH
29636: LD_VAR 0 10
29640: PUSH
29641: LD_INT 1
29643: ARRAY
29644: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29645: LD_ADDR_VAR 0 10
29649: PUSH
29650: LD_VAR 0 10
29654: PPUSH
29655: LD_INT 1
29657: PPUSH
29658: CALL_OW 3
29662: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29663: LD_VAR 0 2
29667: PPUSH
29668: LD_VAR 0 5
29672: PPUSH
29673: CALL 29982 0 2
29677: PUSH
29678: LD_VAR 0 10
29682: PUSH
29683: EMPTY
29684: EQUAL
29685: OR
29686: IFFALSE 29631
// result := [ ] ;
29688: LD_ADDR_VAR 0 6
29692: PUSH
29693: EMPTY
29694: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29695: LD_VAR 0 1
29699: PPUSH
29700: LD_VAR 0 2
29704: PPUSH
29705: LD_VAR 0 3
29709: PPUSH
29710: LD_VAR 0 4
29714: PPUSH
29715: LD_VAR 0 5
29719: PPUSH
29720: CALL_OW 448
29724: IFFALSE 29757
// result := [ chassis , engine , control , weapon ] ;
29726: LD_ADDR_VAR 0 6
29730: PUSH
29731: LD_VAR 0 2
29735: PUSH
29736: LD_VAR 0 3
29740: PUSH
29741: LD_VAR 0 4
29745: PUSH
29746: LD_VAR 0 5
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: ST_TO_ADDR
// end ;
29757: LD_VAR 0 6
29761: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29762: LD_INT 0
29764: PPUSH
// if not chassis or not engine then
29765: LD_VAR 0 1
29769: NOT
29770: PUSH
29771: LD_VAR 0 2
29775: NOT
29776: OR
29777: IFFALSE 29781
// exit ;
29779: GO 29977
// case engine of engine_solar :
29781: LD_VAR 0 2
29785: PUSH
29786: LD_INT 2
29788: DOUBLE
29789: EQUAL
29790: IFTRUE 29794
29792: GO 29832
29794: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29795: LD_ADDR_VAR 0 3
29799: PUSH
29800: LD_INT 11
29802: PUSH
29803: LD_INT 12
29805: PUSH
29806: LD_INT 13
29808: PUSH
29809: LD_INT 14
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: LD_INT 2
29817: PUSH
29818: LD_INT 3
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: ST_TO_ADDR
29830: GO 29961
29832: LD_INT 1
29834: DOUBLE
29835: EQUAL
29836: IFTRUE 29840
29838: GO 29902
29840: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29841: LD_ADDR_VAR 0 3
29845: PUSH
29846: LD_INT 11
29848: PUSH
29849: LD_INT 12
29851: PUSH
29852: LD_INT 13
29854: PUSH
29855: LD_INT 14
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: LD_INT 2
29863: PUSH
29864: LD_INT 3
29866: PUSH
29867: LD_INT 4
29869: PUSH
29870: LD_INT 5
29872: PUSH
29873: LD_INT 21
29875: PUSH
29876: LD_INT 23
29878: PUSH
29879: LD_INT 22
29881: PUSH
29882: LD_INT 24
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: ST_TO_ADDR
29900: GO 29961
29902: LD_INT 3
29904: DOUBLE
29905: EQUAL
29906: IFTRUE 29910
29908: GO 29960
29910: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29911: LD_ADDR_VAR 0 3
29915: PUSH
29916: LD_INT 13
29918: PUSH
29919: LD_INT 14
29921: PUSH
29922: LD_INT 2
29924: PUSH
29925: LD_INT 3
29927: PUSH
29928: LD_INT 4
29930: PUSH
29931: LD_INT 5
29933: PUSH
29934: LD_INT 21
29936: PUSH
29937: LD_INT 22
29939: PUSH
29940: LD_INT 23
29942: PUSH
29943: LD_INT 24
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: ST_TO_ADDR
29958: GO 29961
29960: POP
// result := ( chassis in result ) ;
29961: LD_ADDR_VAR 0 3
29965: PUSH
29966: LD_VAR 0 1
29970: PUSH
29971: LD_VAR 0 3
29975: IN
29976: ST_TO_ADDR
// end ;
29977: LD_VAR 0 3
29981: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29982: LD_INT 0
29984: PPUSH
// if not chassis or not weapon then
29985: LD_VAR 0 1
29989: NOT
29990: PUSH
29991: LD_VAR 0 2
29995: NOT
29996: OR
29997: IFFALSE 30001
// exit ;
29999: GO 31061
// case weapon of us_machine_gun :
30001: LD_VAR 0 2
30005: PUSH
30006: LD_INT 2
30008: DOUBLE
30009: EQUAL
30010: IFTRUE 30014
30012: GO 30044
30014: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30015: LD_ADDR_VAR 0 3
30019: PUSH
30020: LD_INT 1
30022: PUSH
30023: LD_INT 2
30025: PUSH
30026: LD_INT 3
30028: PUSH
30029: LD_INT 4
30031: PUSH
30032: LD_INT 5
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: ST_TO_ADDR
30042: GO 31045
30044: LD_INT 3
30046: DOUBLE
30047: EQUAL
30048: IFTRUE 30052
30050: GO 30082
30052: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30053: LD_ADDR_VAR 0 3
30057: PUSH
30058: LD_INT 1
30060: PUSH
30061: LD_INT 2
30063: PUSH
30064: LD_INT 3
30066: PUSH
30067: LD_INT 4
30069: PUSH
30070: LD_INT 5
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: ST_TO_ADDR
30080: GO 31045
30082: LD_INT 11
30084: DOUBLE
30085: EQUAL
30086: IFTRUE 30090
30088: GO 30120
30090: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30091: LD_ADDR_VAR 0 3
30095: PUSH
30096: LD_INT 1
30098: PUSH
30099: LD_INT 2
30101: PUSH
30102: LD_INT 3
30104: PUSH
30105: LD_INT 4
30107: PUSH
30108: LD_INT 5
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: ST_TO_ADDR
30118: GO 31045
30120: LD_INT 4
30122: DOUBLE
30123: EQUAL
30124: IFTRUE 30128
30126: GO 30154
30128: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30129: LD_ADDR_VAR 0 3
30133: PUSH
30134: LD_INT 2
30136: PUSH
30137: LD_INT 3
30139: PUSH
30140: LD_INT 4
30142: PUSH
30143: LD_INT 5
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: ST_TO_ADDR
30152: GO 31045
30154: LD_INT 5
30156: DOUBLE
30157: EQUAL
30158: IFTRUE 30162
30160: GO 30188
30162: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30163: LD_ADDR_VAR 0 3
30167: PUSH
30168: LD_INT 2
30170: PUSH
30171: LD_INT 3
30173: PUSH
30174: LD_INT 4
30176: PUSH
30177: LD_INT 5
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: ST_TO_ADDR
30186: GO 31045
30188: LD_INT 9
30190: DOUBLE
30191: EQUAL
30192: IFTRUE 30196
30194: GO 30222
30196: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30197: LD_ADDR_VAR 0 3
30201: PUSH
30202: LD_INT 2
30204: PUSH
30205: LD_INT 3
30207: PUSH
30208: LD_INT 4
30210: PUSH
30211: LD_INT 5
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: ST_TO_ADDR
30220: GO 31045
30222: LD_INT 7
30224: DOUBLE
30225: EQUAL
30226: IFTRUE 30230
30228: GO 30256
30230: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30231: LD_ADDR_VAR 0 3
30235: PUSH
30236: LD_INT 2
30238: PUSH
30239: LD_INT 3
30241: PUSH
30242: LD_INT 4
30244: PUSH
30245: LD_INT 5
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: ST_TO_ADDR
30254: GO 31045
30256: LD_INT 12
30258: DOUBLE
30259: EQUAL
30260: IFTRUE 30264
30262: GO 30290
30264: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30265: LD_ADDR_VAR 0 3
30269: PUSH
30270: LD_INT 2
30272: PUSH
30273: LD_INT 3
30275: PUSH
30276: LD_INT 4
30278: PUSH
30279: LD_INT 5
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: ST_TO_ADDR
30288: GO 31045
30290: LD_INT 13
30292: DOUBLE
30293: EQUAL
30294: IFTRUE 30298
30296: GO 30324
30298: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30299: LD_ADDR_VAR 0 3
30303: PUSH
30304: LD_INT 2
30306: PUSH
30307: LD_INT 3
30309: PUSH
30310: LD_INT 4
30312: PUSH
30313: LD_INT 5
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: ST_TO_ADDR
30322: GO 31045
30324: LD_INT 14
30326: DOUBLE
30327: EQUAL
30328: IFTRUE 30332
30330: GO 30350
30332: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30333: LD_ADDR_VAR 0 3
30337: PUSH
30338: LD_INT 4
30340: PUSH
30341: LD_INT 5
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: ST_TO_ADDR
30348: GO 31045
30350: LD_INT 6
30352: DOUBLE
30353: EQUAL
30354: IFTRUE 30358
30356: GO 30376
30358: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30359: LD_ADDR_VAR 0 3
30363: PUSH
30364: LD_INT 4
30366: PUSH
30367: LD_INT 5
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: ST_TO_ADDR
30374: GO 31045
30376: LD_INT 10
30378: DOUBLE
30379: EQUAL
30380: IFTRUE 30384
30382: GO 30402
30384: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30385: LD_ADDR_VAR 0 3
30389: PUSH
30390: LD_INT 4
30392: PUSH
30393: LD_INT 5
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: ST_TO_ADDR
30400: GO 31045
30402: LD_INT 22
30404: DOUBLE
30405: EQUAL
30406: IFTRUE 30410
30408: GO 30436
30410: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30411: LD_ADDR_VAR 0 3
30415: PUSH
30416: LD_INT 11
30418: PUSH
30419: LD_INT 12
30421: PUSH
30422: LD_INT 13
30424: PUSH
30425: LD_INT 14
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: ST_TO_ADDR
30434: GO 31045
30436: LD_INT 23
30438: DOUBLE
30439: EQUAL
30440: IFTRUE 30444
30442: GO 30470
30444: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30445: LD_ADDR_VAR 0 3
30449: PUSH
30450: LD_INT 11
30452: PUSH
30453: LD_INT 12
30455: PUSH
30456: LD_INT 13
30458: PUSH
30459: LD_INT 14
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: ST_TO_ADDR
30468: GO 31045
30470: LD_INT 24
30472: DOUBLE
30473: EQUAL
30474: IFTRUE 30478
30476: GO 30504
30478: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30479: LD_ADDR_VAR 0 3
30483: PUSH
30484: LD_INT 11
30486: PUSH
30487: LD_INT 12
30489: PUSH
30490: LD_INT 13
30492: PUSH
30493: LD_INT 14
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: ST_TO_ADDR
30502: GO 31045
30504: LD_INT 30
30506: DOUBLE
30507: EQUAL
30508: IFTRUE 30512
30510: GO 30538
30512: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30513: LD_ADDR_VAR 0 3
30517: PUSH
30518: LD_INT 11
30520: PUSH
30521: LD_INT 12
30523: PUSH
30524: LD_INT 13
30526: PUSH
30527: LD_INT 14
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: ST_TO_ADDR
30536: GO 31045
30538: LD_INT 25
30540: DOUBLE
30541: EQUAL
30542: IFTRUE 30546
30544: GO 30564
30546: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30547: LD_ADDR_VAR 0 3
30551: PUSH
30552: LD_INT 13
30554: PUSH
30555: LD_INT 14
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: ST_TO_ADDR
30562: GO 31045
30564: LD_INT 27
30566: DOUBLE
30567: EQUAL
30568: IFTRUE 30572
30570: GO 30590
30572: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30573: LD_ADDR_VAR 0 3
30577: PUSH
30578: LD_INT 13
30580: PUSH
30581: LD_INT 14
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: ST_TO_ADDR
30588: GO 31045
30590: LD_INT 92
30592: DOUBLE
30593: EQUAL
30594: IFTRUE 30598
30596: GO 30624
30598: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30599: LD_ADDR_VAR 0 3
30603: PUSH
30604: LD_INT 11
30606: PUSH
30607: LD_INT 12
30609: PUSH
30610: LD_INT 13
30612: PUSH
30613: LD_INT 14
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: ST_TO_ADDR
30622: GO 31045
30624: LD_INT 28
30626: DOUBLE
30627: EQUAL
30628: IFTRUE 30632
30630: GO 30650
30632: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30633: LD_ADDR_VAR 0 3
30637: PUSH
30638: LD_INT 13
30640: PUSH
30641: LD_INT 14
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: ST_TO_ADDR
30648: GO 31045
30650: LD_INT 29
30652: DOUBLE
30653: EQUAL
30654: IFTRUE 30658
30656: GO 30676
30658: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30659: LD_ADDR_VAR 0 3
30663: PUSH
30664: LD_INT 13
30666: PUSH
30667: LD_INT 14
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: ST_TO_ADDR
30674: GO 31045
30676: LD_INT 31
30678: DOUBLE
30679: EQUAL
30680: IFTRUE 30684
30682: GO 30702
30684: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30685: LD_ADDR_VAR 0 3
30689: PUSH
30690: LD_INT 13
30692: PUSH
30693: LD_INT 14
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: ST_TO_ADDR
30700: GO 31045
30702: LD_INT 26
30704: DOUBLE
30705: EQUAL
30706: IFTRUE 30710
30708: GO 30728
30710: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30711: LD_ADDR_VAR 0 3
30715: PUSH
30716: LD_INT 13
30718: PUSH
30719: LD_INT 14
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: ST_TO_ADDR
30726: GO 31045
30728: LD_INT 42
30730: DOUBLE
30731: EQUAL
30732: IFTRUE 30736
30734: GO 30762
30736: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30737: LD_ADDR_VAR 0 3
30741: PUSH
30742: LD_INT 21
30744: PUSH
30745: LD_INT 22
30747: PUSH
30748: LD_INT 23
30750: PUSH
30751: LD_INT 24
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: ST_TO_ADDR
30760: GO 31045
30762: LD_INT 43
30764: DOUBLE
30765: EQUAL
30766: IFTRUE 30770
30768: GO 30796
30770: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30771: LD_ADDR_VAR 0 3
30775: PUSH
30776: LD_INT 21
30778: PUSH
30779: LD_INT 22
30781: PUSH
30782: LD_INT 23
30784: PUSH
30785: LD_INT 24
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: ST_TO_ADDR
30794: GO 31045
30796: LD_INT 44
30798: DOUBLE
30799: EQUAL
30800: IFTRUE 30804
30802: GO 30830
30804: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30805: LD_ADDR_VAR 0 3
30809: PUSH
30810: LD_INT 21
30812: PUSH
30813: LD_INT 22
30815: PUSH
30816: LD_INT 23
30818: PUSH
30819: LD_INT 24
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: ST_TO_ADDR
30828: GO 31045
30830: LD_INT 45
30832: DOUBLE
30833: EQUAL
30834: IFTRUE 30838
30836: GO 30864
30838: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30839: LD_ADDR_VAR 0 3
30843: PUSH
30844: LD_INT 21
30846: PUSH
30847: LD_INT 22
30849: PUSH
30850: LD_INT 23
30852: PUSH
30853: LD_INT 24
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: ST_TO_ADDR
30862: GO 31045
30864: LD_INT 49
30866: DOUBLE
30867: EQUAL
30868: IFTRUE 30872
30870: GO 30898
30872: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30873: LD_ADDR_VAR 0 3
30877: PUSH
30878: LD_INT 21
30880: PUSH
30881: LD_INT 22
30883: PUSH
30884: LD_INT 23
30886: PUSH
30887: LD_INT 24
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: ST_TO_ADDR
30896: GO 31045
30898: LD_INT 51
30900: DOUBLE
30901: EQUAL
30902: IFTRUE 30906
30904: GO 30932
30906: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30907: LD_ADDR_VAR 0 3
30911: PUSH
30912: LD_INT 21
30914: PUSH
30915: LD_INT 22
30917: PUSH
30918: LD_INT 23
30920: PUSH
30921: LD_INT 24
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: ST_TO_ADDR
30930: GO 31045
30932: LD_INT 52
30934: DOUBLE
30935: EQUAL
30936: IFTRUE 30940
30938: GO 30966
30940: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30941: LD_ADDR_VAR 0 3
30945: PUSH
30946: LD_INT 21
30948: PUSH
30949: LD_INT 22
30951: PUSH
30952: LD_INT 23
30954: PUSH
30955: LD_INT 24
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: ST_TO_ADDR
30964: GO 31045
30966: LD_INT 53
30968: DOUBLE
30969: EQUAL
30970: IFTRUE 30974
30972: GO 30992
30974: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30975: LD_ADDR_VAR 0 3
30979: PUSH
30980: LD_INT 23
30982: PUSH
30983: LD_INT 24
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: ST_TO_ADDR
30990: GO 31045
30992: LD_INT 46
30994: DOUBLE
30995: EQUAL
30996: IFTRUE 31000
30998: GO 31018
31000: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31001: LD_ADDR_VAR 0 3
31005: PUSH
31006: LD_INT 23
31008: PUSH
31009: LD_INT 24
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: ST_TO_ADDR
31016: GO 31045
31018: LD_INT 47
31020: DOUBLE
31021: EQUAL
31022: IFTRUE 31026
31024: GO 31044
31026: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31027: LD_ADDR_VAR 0 3
31031: PUSH
31032: LD_INT 23
31034: PUSH
31035: LD_INT 24
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: ST_TO_ADDR
31042: GO 31045
31044: POP
// result := ( chassis in result ) ;
31045: LD_ADDR_VAR 0 3
31049: PUSH
31050: LD_VAR 0 1
31054: PUSH
31055: LD_VAR 0 3
31059: IN
31060: ST_TO_ADDR
// end ;
31061: LD_VAR 0 3
31065: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31066: LD_INT 0
31068: PPUSH
31069: PPUSH
31070: PPUSH
31071: PPUSH
31072: PPUSH
31073: PPUSH
31074: PPUSH
// result := array ;
31075: LD_ADDR_VAR 0 5
31079: PUSH
31080: LD_VAR 0 1
31084: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31085: LD_VAR 0 1
31089: NOT
31090: PUSH
31091: LD_VAR 0 2
31095: NOT
31096: OR
31097: PUSH
31098: LD_VAR 0 3
31102: NOT
31103: OR
31104: PUSH
31105: LD_VAR 0 2
31109: PUSH
31110: LD_VAR 0 1
31114: GREATER
31115: OR
31116: PUSH
31117: LD_VAR 0 3
31121: PUSH
31122: LD_VAR 0 1
31126: GREATER
31127: OR
31128: IFFALSE 31132
// exit ;
31130: GO 31428
// if direction then
31132: LD_VAR 0 4
31136: IFFALSE 31200
// begin d := 1 ;
31138: LD_ADDR_VAR 0 9
31142: PUSH
31143: LD_INT 1
31145: ST_TO_ADDR
// if i_from > i_to then
31146: LD_VAR 0 2
31150: PUSH
31151: LD_VAR 0 3
31155: GREATER
31156: IFFALSE 31182
// length := ( array - i_from ) + i_to else
31158: LD_ADDR_VAR 0 11
31162: PUSH
31163: LD_VAR 0 1
31167: PUSH
31168: LD_VAR 0 2
31172: MINUS
31173: PUSH
31174: LD_VAR 0 3
31178: PLUS
31179: ST_TO_ADDR
31180: GO 31198
// length := i_to - i_from ;
31182: LD_ADDR_VAR 0 11
31186: PUSH
31187: LD_VAR 0 3
31191: PUSH
31192: LD_VAR 0 2
31196: MINUS
31197: ST_TO_ADDR
// end else
31198: GO 31261
// begin d := - 1 ;
31200: LD_ADDR_VAR 0 9
31204: PUSH
31205: LD_INT 1
31207: NEG
31208: ST_TO_ADDR
// if i_from > i_to then
31209: LD_VAR 0 2
31213: PUSH
31214: LD_VAR 0 3
31218: GREATER
31219: IFFALSE 31239
// length := i_from - i_to else
31221: LD_ADDR_VAR 0 11
31225: PUSH
31226: LD_VAR 0 2
31230: PUSH
31231: LD_VAR 0 3
31235: MINUS
31236: ST_TO_ADDR
31237: GO 31261
// length := ( array - i_to ) + i_from ;
31239: LD_ADDR_VAR 0 11
31243: PUSH
31244: LD_VAR 0 1
31248: PUSH
31249: LD_VAR 0 3
31253: MINUS
31254: PUSH
31255: LD_VAR 0 2
31259: PLUS
31260: ST_TO_ADDR
// end ; if not length then
31261: LD_VAR 0 11
31265: NOT
31266: IFFALSE 31270
// exit ;
31268: GO 31428
// tmp := array ;
31270: LD_ADDR_VAR 0 10
31274: PUSH
31275: LD_VAR 0 1
31279: ST_TO_ADDR
// for i = 1 to length do
31280: LD_ADDR_VAR 0 6
31284: PUSH
31285: DOUBLE
31286: LD_INT 1
31288: DEC
31289: ST_TO_ADDR
31290: LD_VAR 0 11
31294: PUSH
31295: FOR_TO
31296: IFFALSE 31416
// begin for j = 1 to array do
31298: LD_ADDR_VAR 0 7
31302: PUSH
31303: DOUBLE
31304: LD_INT 1
31306: DEC
31307: ST_TO_ADDR
31308: LD_VAR 0 1
31312: PUSH
31313: FOR_TO
31314: IFFALSE 31402
// begin k := j + d ;
31316: LD_ADDR_VAR 0 8
31320: PUSH
31321: LD_VAR 0 7
31325: PUSH
31326: LD_VAR 0 9
31330: PLUS
31331: ST_TO_ADDR
// if k > array then
31332: LD_VAR 0 8
31336: PUSH
31337: LD_VAR 0 1
31341: GREATER
31342: IFFALSE 31352
// k := 1 ;
31344: LD_ADDR_VAR 0 8
31348: PUSH
31349: LD_INT 1
31351: ST_TO_ADDR
// if not k then
31352: LD_VAR 0 8
31356: NOT
31357: IFFALSE 31369
// k := array ;
31359: LD_ADDR_VAR 0 8
31363: PUSH
31364: LD_VAR 0 1
31368: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31369: LD_ADDR_VAR 0 10
31373: PUSH
31374: LD_VAR 0 10
31378: PPUSH
31379: LD_VAR 0 8
31383: PPUSH
31384: LD_VAR 0 1
31388: PUSH
31389: LD_VAR 0 7
31393: ARRAY
31394: PPUSH
31395: CALL_OW 1
31399: ST_TO_ADDR
// end ;
31400: GO 31313
31402: POP
31403: POP
// array := tmp ;
31404: LD_ADDR_VAR 0 1
31408: PUSH
31409: LD_VAR 0 10
31413: ST_TO_ADDR
// end ;
31414: GO 31295
31416: POP
31417: POP
// result := array ;
31418: LD_ADDR_VAR 0 5
31422: PUSH
31423: LD_VAR 0 1
31427: ST_TO_ADDR
// end ;
31428: LD_VAR 0 5
31432: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31433: LD_INT 0
31435: PPUSH
31436: PPUSH
// result := 0 ;
31437: LD_ADDR_VAR 0 3
31441: PUSH
31442: LD_INT 0
31444: ST_TO_ADDR
// if not array or not value in array then
31445: LD_VAR 0 1
31449: NOT
31450: PUSH
31451: LD_VAR 0 2
31455: PUSH
31456: LD_VAR 0 1
31460: IN
31461: NOT
31462: OR
31463: IFFALSE 31467
// exit ;
31465: GO 31521
// for i = 1 to array do
31467: LD_ADDR_VAR 0 4
31471: PUSH
31472: DOUBLE
31473: LD_INT 1
31475: DEC
31476: ST_TO_ADDR
31477: LD_VAR 0 1
31481: PUSH
31482: FOR_TO
31483: IFFALSE 31519
// if value = array [ i ] then
31485: LD_VAR 0 2
31489: PUSH
31490: LD_VAR 0 1
31494: PUSH
31495: LD_VAR 0 4
31499: ARRAY
31500: EQUAL
31501: IFFALSE 31517
// begin result := i ;
31503: LD_ADDR_VAR 0 3
31507: PUSH
31508: LD_VAR 0 4
31512: ST_TO_ADDR
// exit ;
31513: POP
31514: POP
31515: GO 31521
// end ;
31517: GO 31482
31519: POP
31520: POP
// end ;
31521: LD_VAR 0 3
31525: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31526: LD_INT 0
31528: PPUSH
// vc_chassis := chassis ;
31529: LD_ADDR_OWVAR 37
31533: PUSH
31534: LD_VAR 0 1
31538: ST_TO_ADDR
// vc_engine := engine ;
31539: LD_ADDR_OWVAR 39
31543: PUSH
31544: LD_VAR 0 2
31548: ST_TO_ADDR
// vc_control := control ;
31549: LD_ADDR_OWVAR 38
31553: PUSH
31554: LD_VAR 0 3
31558: ST_TO_ADDR
// vc_weapon := weapon ;
31559: LD_ADDR_OWVAR 40
31563: PUSH
31564: LD_VAR 0 4
31568: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31569: LD_ADDR_OWVAR 41
31573: PUSH
31574: LD_VAR 0 5
31578: ST_TO_ADDR
// end ;
31579: LD_VAR 0 6
31583: RET
// export function WantPlant ( unit ) ; var task ; begin
31584: LD_INT 0
31586: PPUSH
31587: PPUSH
// result := false ;
31588: LD_ADDR_VAR 0 2
31592: PUSH
31593: LD_INT 0
31595: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31596: LD_ADDR_VAR 0 3
31600: PUSH
31601: LD_VAR 0 1
31605: PPUSH
31606: CALL_OW 437
31610: ST_TO_ADDR
// if task then
31611: LD_VAR 0 3
31615: IFFALSE 31643
// if task [ 1 ] [ 1 ] = p then
31617: LD_VAR 0 3
31621: PUSH
31622: LD_INT 1
31624: ARRAY
31625: PUSH
31626: LD_INT 1
31628: ARRAY
31629: PUSH
31630: LD_STRING p
31632: EQUAL
31633: IFFALSE 31643
// result := true ;
31635: LD_ADDR_VAR 0 2
31639: PUSH
31640: LD_INT 1
31642: ST_TO_ADDR
// end ;
31643: LD_VAR 0 2
31647: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31648: LD_INT 0
31650: PPUSH
31651: PPUSH
31652: PPUSH
31653: PPUSH
// if pos < 1 then
31654: LD_VAR 0 2
31658: PUSH
31659: LD_INT 1
31661: LESS
31662: IFFALSE 31666
// exit ;
31664: GO 31969
// if pos = 1 then
31666: LD_VAR 0 2
31670: PUSH
31671: LD_INT 1
31673: EQUAL
31674: IFFALSE 31707
// result := Replace ( arr , pos [ 1 ] , value ) else
31676: LD_ADDR_VAR 0 4
31680: PUSH
31681: LD_VAR 0 1
31685: PPUSH
31686: LD_VAR 0 2
31690: PUSH
31691: LD_INT 1
31693: ARRAY
31694: PPUSH
31695: LD_VAR 0 3
31699: PPUSH
31700: CALL_OW 1
31704: ST_TO_ADDR
31705: GO 31969
// begin tmp := arr ;
31707: LD_ADDR_VAR 0 6
31711: PUSH
31712: LD_VAR 0 1
31716: ST_TO_ADDR
// s_arr := [ tmp ] ;
31717: LD_ADDR_VAR 0 7
31721: PUSH
31722: LD_VAR 0 6
31726: PUSH
31727: EMPTY
31728: LIST
31729: ST_TO_ADDR
// for i = 1 to pos - 1 do
31730: LD_ADDR_VAR 0 5
31734: PUSH
31735: DOUBLE
31736: LD_INT 1
31738: DEC
31739: ST_TO_ADDR
31740: LD_VAR 0 2
31744: PUSH
31745: LD_INT 1
31747: MINUS
31748: PUSH
31749: FOR_TO
31750: IFFALSE 31795
// begin tmp := tmp [ pos [ i ] ] ;
31752: LD_ADDR_VAR 0 6
31756: PUSH
31757: LD_VAR 0 6
31761: PUSH
31762: LD_VAR 0 2
31766: PUSH
31767: LD_VAR 0 5
31771: ARRAY
31772: ARRAY
31773: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31774: LD_ADDR_VAR 0 7
31778: PUSH
31779: LD_VAR 0 7
31783: PUSH
31784: LD_VAR 0 6
31788: PUSH
31789: EMPTY
31790: LIST
31791: ADD
31792: ST_TO_ADDR
// end ;
31793: GO 31749
31795: POP
31796: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31797: LD_ADDR_VAR 0 6
31801: PUSH
31802: LD_VAR 0 6
31806: PPUSH
31807: LD_VAR 0 2
31811: PUSH
31812: LD_VAR 0 2
31816: ARRAY
31817: PPUSH
31818: LD_VAR 0 3
31822: PPUSH
31823: CALL_OW 1
31827: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31828: LD_ADDR_VAR 0 7
31832: PUSH
31833: LD_VAR 0 7
31837: PPUSH
31838: LD_VAR 0 7
31842: PPUSH
31843: LD_VAR 0 6
31847: PPUSH
31848: CALL_OW 1
31852: ST_TO_ADDR
// for i = s_arr downto 2 do
31853: LD_ADDR_VAR 0 5
31857: PUSH
31858: DOUBLE
31859: LD_VAR 0 7
31863: INC
31864: ST_TO_ADDR
31865: LD_INT 2
31867: PUSH
31868: FOR_DOWNTO
31869: IFFALSE 31953
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31871: LD_ADDR_VAR 0 6
31875: PUSH
31876: LD_VAR 0 7
31880: PUSH
31881: LD_VAR 0 5
31885: PUSH
31886: LD_INT 1
31888: MINUS
31889: ARRAY
31890: PPUSH
31891: LD_VAR 0 2
31895: PUSH
31896: LD_VAR 0 5
31900: PUSH
31901: LD_INT 1
31903: MINUS
31904: ARRAY
31905: PPUSH
31906: LD_VAR 0 7
31910: PUSH
31911: LD_VAR 0 5
31915: ARRAY
31916: PPUSH
31917: CALL_OW 1
31921: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31922: LD_ADDR_VAR 0 7
31926: PUSH
31927: LD_VAR 0 7
31931: PPUSH
31932: LD_VAR 0 5
31936: PUSH
31937: LD_INT 1
31939: MINUS
31940: PPUSH
31941: LD_VAR 0 6
31945: PPUSH
31946: CALL_OW 1
31950: ST_TO_ADDR
// end ;
31951: GO 31868
31953: POP
31954: POP
// result := s_arr [ 1 ] ;
31955: LD_ADDR_VAR 0 4
31959: PUSH
31960: LD_VAR 0 7
31964: PUSH
31965: LD_INT 1
31967: ARRAY
31968: ST_TO_ADDR
// end ; end ;
31969: LD_VAR 0 4
31973: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31974: LD_INT 0
31976: PPUSH
31977: PPUSH
// if not list then
31978: LD_VAR 0 1
31982: NOT
31983: IFFALSE 31987
// exit ;
31985: GO 32078
// i := list [ pos1 ] ;
31987: LD_ADDR_VAR 0 5
31991: PUSH
31992: LD_VAR 0 1
31996: PUSH
31997: LD_VAR 0 2
32001: ARRAY
32002: ST_TO_ADDR
// if not i then
32003: LD_VAR 0 5
32007: NOT
32008: IFFALSE 32012
// exit ;
32010: GO 32078
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32012: LD_ADDR_VAR 0 1
32016: PUSH
32017: LD_VAR 0 1
32021: PPUSH
32022: LD_VAR 0 2
32026: PPUSH
32027: LD_VAR 0 1
32031: PUSH
32032: LD_VAR 0 3
32036: ARRAY
32037: PPUSH
32038: CALL_OW 1
32042: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32043: LD_ADDR_VAR 0 1
32047: PUSH
32048: LD_VAR 0 1
32052: PPUSH
32053: LD_VAR 0 3
32057: PPUSH
32058: LD_VAR 0 5
32062: PPUSH
32063: CALL_OW 1
32067: ST_TO_ADDR
// result := list ;
32068: LD_ADDR_VAR 0 4
32072: PUSH
32073: LD_VAR 0 1
32077: ST_TO_ADDR
// end ;
32078: LD_VAR 0 4
32082: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32083: LD_INT 0
32085: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32086: LD_ADDR_VAR 0 5
32090: PUSH
32091: LD_VAR 0 1
32095: PPUSH
32096: CALL_OW 250
32100: PPUSH
32101: LD_VAR 0 1
32105: PPUSH
32106: CALL_OW 251
32110: PPUSH
32111: LD_VAR 0 2
32115: PPUSH
32116: LD_VAR 0 3
32120: PPUSH
32121: LD_VAR 0 4
32125: PPUSH
32126: CALL 32136 0 5
32130: ST_TO_ADDR
// end ;
32131: LD_VAR 0 5
32135: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32136: LD_INT 0
32138: PPUSH
32139: PPUSH
32140: PPUSH
32141: PPUSH
// if not list then
32142: LD_VAR 0 3
32146: NOT
32147: IFFALSE 32151
// exit ;
32149: GO 32539
// result := [ ] ;
32151: LD_ADDR_VAR 0 6
32155: PUSH
32156: EMPTY
32157: ST_TO_ADDR
// for i in list do
32158: LD_ADDR_VAR 0 7
32162: PUSH
32163: LD_VAR 0 3
32167: PUSH
32168: FOR_IN
32169: IFFALSE 32371
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32171: LD_ADDR_VAR 0 9
32175: PUSH
32176: LD_VAR 0 7
32180: PPUSH
32181: LD_VAR 0 1
32185: PPUSH
32186: LD_VAR 0 2
32190: PPUSH
32191: CALL_OW 297
32195: ST_TO_ADDR
// if not result then
32196: LD_VAR 0 6
32200: NOT
32201: IFFALSE 32227
// result := [ [ i , tmp ] ] else
32203: LD_ADDR_VAR 0 6
32207: PUSH
32208: LD_VAR 0 7
32212: PUSH
32213: LD_VAR 0 9
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: EMPTY
32223: LIST
32224: ST_TO_ADDR
32225: GO 32369
// begin if result [ result ] [ 2 ] < tmp then
32227: LD_VAR 0 6
32231: PUSH
32232: LD_VAR 0 6
32236: ARRAY
32237: PUSH
32238: LD_INT 2
32240: ARRAY
32241: PUSH
32242: LD_VAR 0 9
32246: LESS
32247: IFFALSE 32289
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32249: LD_ADDR_VAR 0 6
32253: PUSH
32254: LD_VAR 0 6
32258: PPUSH
32259: LD_VAR 0 6
32263: PUSH
32264: LD_INT 1
32266: PLUS
32267: PPUSH
32268: LD_VAR 0 7
32272: PUSH
32273: LD_VAR 0 9
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PPUSH
32282: CALL_OW 2
32286: ST_TO_ADDR
32287: GO 32369
// for j = 1 to result do
32289: LD_ADDR_VAR 0 8
32293: PUSH
32294: DOUBLE
32295: LD_INT 1
32297: DEC
32298: ST_TO_ADDR
32299: LD_VAR 0 6
32303: PUSH
32304: FOR_TO
32305: IFFALSE 32367
// begin if tmp < result [ j ] [ 2 ] then
32307: LD_VAR 0 9
32311: PUSH
32312: LD_VAR 0 6
32316: PUSH
32317: LD_VAR 0 8
32321: ARRAY
32322: PUSH
32323: LD_INT 2
32325: ARRAY
32326: LESS
32327: IFFALSE 32365
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32329: LD_ADDR_VAR 0 6
32333: PUSH
32334: LD_VAR 0 6
32338: PPUSH
32339: LD_VAR 0 8
32343: PPUSH
32344: LD_VAR 0 7
32348: PUSH
32349: LD_VAR 0 9
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PPUSH
32358: CALL_OW 2
32362: ST_TO_ADDR
// break ;
32363: GO 32367
// end ; end ;
32365: GO 32304
32367: POP
32368: POP
// end ; end ;
32369: GO 32168
32371: POP
32372: POP
// if result and not asc then
32373: LD_VAR 0 6
32377: PUSH
32378: LD_VAR 0 4
32382: NOT
32383: AND
32384: IFFALSE 32459
// begin tmp := result ;
32386: LD_ADDR_VAR 0 9
32390: PUSH
32391: LD_VAR 0 6
32395: ST_TO_ADDR
// for i = tmp downto 1 do
32396: LD_ADDR_VAR 0 7
32400: PUSH
32401: DOUBLE
32402: LD_VAR 0 9
32406: INC
32407: ST_TO_ADDR
32408: LD_INT 1
32410: PUSH
32411: FOR_DOWNTO
32412: IFFALSE 32457
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32414: LD_ADDR_VAR 0 6
32418: PUSH
32419: LD_VAR 0 6
32423: PPUSH
32424: LD_VAR 0 9
32428: PUSH
32429: LD_VAR 0 7
32433: MINUS
32434: PUSH
32435: LD_INT 1
32437: PLUS
32438: PPUSH
32439: LD_VAR 0 9
32443: PUSH
32444: LD_VAR 0 7
32448: ARRAY
32449: PPUSH
32450: CALL_OW 1
32454: ST_TO_ADDR
32455: GO 32411
32457: POP
32458: POP
// end ; tmp := [ ] ;
32459: LD_ADDR_VAR 0 9
32463: PUSH
32464: EMPTY
32465: ST_TO_ADDR
// if mode then
32466: LD_VAR 0 5
32470: IFFALSE 32539
// begin for i = 1 to result do
32472: LD_ADDR_VAR 0 7
32476: PUSH
32477: DOUBLE
32478: LD_INT 1
32480: DEC
32481: ST_TO_ADDR
32482: LD_VAR 0 6
32486: PUSH
32487: FOR_TO
32488: IFFALSE 32527
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32490: LD_ADDR_VAR 0 9
32494: PUSH
32495: LD_VAR 0 9
32499: PPUSH
32500: LD_VAR 0 7
32504: PPUSH
32505: LD_VAR 0 6
32509: PUSH
32510: LD_VAR 0 7
32514: ARRAY
32515: PUSH
32516: LD_INT 1
32518: ARRAY
32519: PPUSH
32520: CALL_OW 1
32524: ST_TO_ADDR
32525: GO 32487
32527: POP
32528: POP
// result := tmp ;
32529: LD_ADDR_VAR 0 6
32533: PUSH
32534: LD_VAR 0 9
32538: ST_TO_ADDR
// end ; end ;
32539: LD_VAR 0 6
32543: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32544: LD_INT 0
32546: PPUSH
32547: PPUSH
32548: PPUSH
32549: PPUSH
32550: PPUSH
32551: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32552: LD_ADDR_VAR 0 5
32556: PUSH
32557: LD_INT 0
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: LD_INT 0
32565: PUSH
32566: EMPTY
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: ST_TO_ADDR
// if not x or not y then
32574: LD_VAR 0 2
32578: NOT
32579: PUSH
32580: LD_VAR 0 3
32584: NOT
32585: OR
32586: IFFALSE 32590
// exit ;
32588: GO 34240
// if not range then
32590: LD_VAR 0 4
32594: NOT
32595: IFFALSE 32605
// range := 10 ;
32597: LD_ADDR_VAR 0 4
32601: PUSH
32602: LD_INT 10
32604: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32605: LD_ADDR_VAR 0 8
32609: PUSH
32610: LD_INT 81
32612: PUSH
32613: LD_VAR 0 1
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 92
32624: PUSH
32625: LD_VAR 0 2
32629: PUSH
32630: LD_VAR 0 3
32634: PUSH
32635: LD_VAR 0 4
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 3
32648: PUSH
32649: LD_INT 21
32651: PUSH
32652: LD_INT 3
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: PPUSH
32668: CALL_OW 69
32672: ST_TO_ADDR
// if not tmp then
32673: LD_VAR 0 8
32677: NOT
32678: IFFALSE 32682
// exit ;
32680: GO 34240
// for i in tmp do
32682: LD_ADDR_VAR 0 6
32686: PUSH
32687: LD_VAR 0 8
32691: PUSH
32692: FOR_IN
32693: IFFALSE 34215
// begin points := [ 0 , 0 , 0 ] ;
32695: LD_ADDR_VAR 0 9
32699: PUSH
32700: LD_INT 0
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: LIST
32713: ST_TO_ADDR
// bpoints := 1 ;
32714: LD_ADDR_VAR 0 10
32718: PUSH
32719: LD_INT 1
32721: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32722: LD_VAR 0 6
32726: PPUSH
32727: CALL_OW 247
32731: PUSH
32732: LD_INT 1
32734: DOUBLE
32735: EQUAL
32736: IFTRUE 32740
32738: GO 33318
32740: POP
// begin if GetClass ( i ) = 1 then
32741: LD_VAR 0 6
32745: PPUSH
32746: CALL_OW 257
32750: PUSH
32751: LD_INT 1
32753: EQUAL
32754: IFFALSE 32775
// points := [ 10 , 5 , 3 ] ;
32756: LD_ADDR_VAR 0 9
32760: PUSH
32761: LD_INT 10
32763: PUSH
32764: LD_INT 5
32766: PUSH
32767: LD_INT 3
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: LIST
32774: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32775: LD_VAR 0 6
32779: PPUSH
32780: CALL_OW 257
32784: PUSH
32785: LD_INT 2
32787: PUSH
32788: LD_INT 3
32790: PUSH
32791: LD_INT 4
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: LIST
32798: IN
32799: IFFALSE 32820
// points := [ 3 , 2 , 1 ] ;
32801: LD_ADDR_VAR 0 9
32805: PUSH
32806: LD_INT 3
32808: PUSH
32809: LD_INT 2
32811: PUSH
32812: LD_INT 1
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: LIST
32819: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32820: LD_VAR 0 6
32824: PPUSH
32825: CALL_OW 257
32829: PUSH
32830: LD_INT 5
32832: EQUAL
32833: IFFALSE 32854
// points := [ 130 , 5 , 2 ] ;
32835: LD_ADDR_VAR 0 9
32839: PUSH
32840: LD_INT 130
32842: PUSH
32843: LD_INT 5
32845: PUSH
32846: LD_INT 2
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: LIST
32853: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32854: LD_VAR 0 6
32858: PPUSH
32859: CALL_OW 257
32863: PUSH
32864: LD_INT 8
32866: EQUAL
32867: IFFALSE 32888
// points := [ 35 , 35 , 30 ] ;
32869: LD_ADDR_VAR 0 9
32873: PUSH
32874: LD_INT 35
32876: PUSH
32877: LD_INT 35
32879: PUSH
32880: LD_INT 30
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: LIST
32887: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32888: LD_VAR 0 6
32892: PPUSH
32893: CALL_OW 257
32897: PUSH
32898: LD_INT 9
32900: EQUAL
32901: IFFALSE 32922
// points := [ 20 , 55 , 40 ] ;
32903: LD_ADDR_VAR 0 9
32907: PUSH
32908: LD_INT 20
32910: PUSH
32911: LD_INT 55
32913: PUSH
32914: LD_INT 40
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: LIST
32921: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32922: LD_VAR 0 6
32926: PPUSH
32927: CALL_OW 257
32931: PUSH
32932: LD_INT 12
32934: PUSH
32935: LD_INT 16
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: IN
32942: IFFALSE 32963
// points := [ 5 , 3 , 2 ] ;
32944: LD_ADDR_VAR 0 9
32948: PUSH
32949: LD_INT 5
32951: PUSH
32952: LD_INT 3
32954: PUSH
32955: LD_INT 2
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: LIST
32962: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32963: LD_VAR 0 6
32967: PPUSH
32968: CALL_OW 257
32972: PUSH
32973: LD_INT 17
32975: EQUAL
32976: IFFALSE 32997
// points := [ 100 , 50 , 75 ] ;
32978: LD_ADDR_VAR 0 9
32982: PUSH
32983: LD_INT 100
32985: PUSH
32986: LD_INT 50
32988: PUSH
32989: LD_INT 75
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: LIST
32996: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32997: LD_VAR 0 6
33001: PPUSH
33002: CALL_OW 257
33006: PUSH
33007: LD_INT 15
33009: EQUAL
33010: IFFALSE 33031
// points := [ 10 , 5 , 3 ] ;
33012: LD_ADDR_VAR 0 9
33016: PUSH
33017: LD_INT 10
33019: PUSH
33020: LD_INT 5
33022: PUSH
33023: LD_INT 3
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: LIST
33030: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33031: LD_VAR 0 6
33035: PPUSH
33036: CALL_OW 257
33040: PUSH
33041: LD_INT 14
33043: EQUAL
33044: IFFALSE 33065
// points := [ 10 , 0 , 0 ] ;
33046: LD_ADDR_VAR 0 9
33050: PUSH
33051: LD_INT 10
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: LIST
33064: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33065: LD_VAR 0 6
33069: PPUSH
33070: CALL_OW 257
33074: PUSH
33075: LD_INT 11
33077: EQUAL
33078: IFFALSE 33099
// points := [ 30 , 10 , 5 ] ;
33080: LD_ADDR_VAR 0 9
33084: PUSH
33085: LD_INT 30
33087: PUSH
33088: LD_INT 10
33090: PUSH
33091: LD_INT 5
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: LIST
33098: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33099: LD_VAR 0 1
33103: PPUSH
33104: LD_INT 5
33106: PPUSH
33107: CALL_OW 321
33111: PUSH
33112: LD_INT 2
33114: EQUAL
33115: IFFALSE 33132
// bpoints := bpoints * 1.8 ;
33117: LD_ADDR_VAR 0 10
33121: PUSH
33122: LD_VAR 0 10
33126: PUSH
33127: LD_REAL  1.80000000000000E+0000
33130: MUL
33131: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33132: LD_VAR 0 6
33136: PPUSH
33137: CALL_OW 257
33141: PUSH
33142: LD_INT 1
33144: PUSH
33145: LD_INT 2
33147: PUSH
33148: LD_INT 3
33150: PUSH
33151: LD_INT 4
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: IN
33160: PUSH
33161: LD_VAR 0 1
33165: PPUSH
33166: LD_INT 51
33168: PPUSH
33169: CALL_OW 321
33173: PUSH
33174: LD_INT 2
33176: EQUAL
33177: AND
33178: IFFALSE 33195
// bpoints := bpoints * 1.2 ;
33180: LD_ADDR_VAR 0 10
33184: PUSH
33185: LD_VAR 0 10
33189: PUSH
33190: LD_REAL  1.20000000000000E+0000
33193: MUL
33194: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33195: LD_VAR 0 6
33199: PPUSH
33200: CALL_OW 257
33204: PUSH
33205: LD_INT 5
33207: PUSH
33208: LD_INT 7
33210: PUSH
33211: LD_INT 9
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: LIST
33218: IN
33219: PUSH
33220: LD_VAR 0 1
33224: PPUSH
33225: LD_INT 52
33227: PPUSH
33228: CALL_OW 321
33232: PUSH
33233: LD_INT 2
33235: EQUAL
33236: AND
33237: IFFALSE 33254
// bpoints := bpoints * 1.5 ;
33239: LD_ADDR_VAR 0 10
33243: PUSH
33244: LD_VAR 0 10
33248: PUSH
33249: LD_REAL  1.50000000000000E+0000
33252: MUL
33253: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33254: LD_VAR 0 1
33258: PPUSH
33259: LD_INT 66
33261: PPUSH
33262: CALL_OW 321
33266: PUSH
33267: LD_INT 2
33269: EQUAL
33270: IFFALSE 33287
// bpoints := bpoints * 1.1 ;
33272: LD_ADDR_VAR 0 10
33276: PUSH
33277: LD_VAR 0 10
33281: PUSH
33282: LD_REAL  1.10000000000000E+0000
33285: MUL
33286: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33287: LD_ADDR_VAR 0 10
33291: PUSH
33292: LD_VAR 0 10
33296: PUSH
33297: LD_VAR 0 6
33301: PPUSH
33302: LD_INT 1
33304: PPUSH
33305: CALL_OW 259
33309: PUSH
33310: LD_REAL  1.15000000000000E+0000
33313: MUL
33314: MUL
33315: ST_TO_ADDR
// end ; unit_vehicle :
33316: GO 34144
33318: LD_INT 2
33320: DOUBLE
33321: EQUAL
33322: IFTRUE 33326
33324: GO 34132
33326: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33327: LD_VAR 0 6
33331: PPUSH
33332: CALL_OW 264
33336: PUSH
33337: LD_INT 2
33339: PUSH
33340: LD_INT 42
33342: PUSH
33343: LD_INT 24
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: LIST
33350: IN
33351: IFFALSE 33372
// points := [ 25 , 5 , 3 ] ;
33353: LD_ADDR_VAR 0 9
33357: PUSH
33358: LD_INT 25
33360: PUSH
33361: LD_INT 5
33363: PUSH
33364: LD_INT 3
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: LIST
33371: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33372: LD_VAR 0 6
33376: PPUSH
33377: CALL_OW 264
33381: PUSH
33382: LD_INT 4
33384: PUSH
33385: LD_INT 43
33387: PUSH
33388: LD_INT 25
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: LIST
33395: IN
33396: IFFALSE 33417
// points := [ 40 , 15 , 5 ] ;
33398: LD_ADDR_VAR 0 9
33402: PUSH
33403: LD_INT 40
33405: PUSH
33406: LD_INT 15
33408: PUSH
33409: LD_INT 5
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: LIST
33416: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33417: LD_VAR 0 6
33421: PPUSH
33422: CALL_OW 264
33426: PUSH
33427: LD_INT 3
33429: PUSH
33430: LD_INT 23
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: IN
33437: IFFALSE 33458
// points := [ 7 , 25 , 8 ] ;
33439: LD_ADDR_VAR 0 9
33443: PUSH
33444: LD_INT 7
33446: PUSH
33447: LD_INT 25
33449: PUSH
33450: LD_INT 8
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: LIST
33457: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33458: LD_VAR 0 6
33462: PPUSH
33463: CALL_OW 264
33467: PUSH
33468: LD_INT 5
33470: PUSH
33471: LD_INT 27
33473: PUSH
33474: LD_INT 44
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: LIST
33481: IN
33482: IFFALSE 33503
// points := [ 14 , 50 , 16 ] ;
33484: LD_ADDR_VAR 0 9
33488: PUSH
33489: LD_INT 14
33491: PUSH
33492: LD_INT 50
33494: PUSH
33495: LD_INT 16
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: LIST
33502: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33503: LD_VAR 0 6
33507: PPUSH
33508: CALL_OW 264
33512: PUSH
33513: LD_INT 6
33515: PUSH
33516: LD_INT 46
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: IN
33523: IFFALSE 33544
// points := [ 32 , 120 , 70 ] ;
33525: LD_ADDR_VAR 0 9
33529: PUSH
33530: LD_INT 32
33532: PUSH
33533: LD_INT 120
33535: PUSH
33536: LD_INT 70
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: LIST
33543: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33544: LD_VAR 0 6
33548: PPUSH
33549: CALL_OW 264
33553: PUSH
33554: LD_INT 7
33556: PUSH
33557: LD_INT 28
33559: PUSH
33560: LD_INT 45
33562: PUSH
33563: LD_INT 92
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: IN
33572: IFFALSE 33593
// points := [ 35 , 20 , 45 ] ;
33574: LD_ADDR_VAR 0 9
33578: PUSH
33579: LD_INT 35
33581: PUSH
33582: LD_INT 20
33584: PUSH
33585: LD_INT 45
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: LIST
33592: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33593: LD_VAR 0 6
33597: PPUSH
33598: CALL_OW 264
33602: PUSH
33603: LD_INT 47
33605: PUSH
33606: EMPTY
33607: LIST
33608: IN
33609: IFFALSE 33630
// points := [ 67 , 45 , 75 ] ;
33611: LD_ADDR_VAR 0 9
33615: PUSH
33616: LD_INT 67
33618: PUSH
33619: LD_INT 45
33621: PUSH
33622: LD_INT 75
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: LIST
33629: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33630: LD_VAR 0 6
33634: PPUSH
33635: CALL_OW 264
33639: PUSH
33640: LD_INT 26
33642: PUSH
33643: EMPTY
33644: LIST
33645: IN
33646: IFFALSE 33667
// points := [ 120 , 30 , 80 ] ;
33648: LD_ADDR_VAR 0 9
33652: PUSH
33653: LD_INT 120
33655: PUSH
33656: LD_INT 30
33658: PUSH
33659: LD_INT 80
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: LIST
33666: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33667: LD_VAR 0 6
33671: PPUSH
33672: CALL_OW 264
33676: PUSH
33677: LD_INT 22
33679: PUSH
33680: EMPTY
33681: LIST
33682: IN
33683: IFFALSE 33704
// points := [ 40 , 1 , 1 ] ;
33685: LD_ADDR_VAR 0 9
33689: PUSH
33690: LD_INT 40
33692: PUSH
33693: LD_INT 1
33695: PUSH
33696: LD_INT 1
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: LIST
33703: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33704: LD_VAR 0 6
33708: PPUSH
33709: CALL_OW 264
33713: PUSH
33714: LD_INT 29
33716: PUSH
33717: EMPTY
33718: LIST
33719: IN
33720: IFFALSE 33741
// points := [ 70 , 200 , 400 ] ;
33722: LD_ADDR_VAR 0 9
33726: PUSH
33727: LD_INT 70
33729: PUSH
33730: LD_INT 200
33732: PUSH
33733: LD_INT 400
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: LIST
33740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33741: LD_VAR 0 6
33745: PPUSH
33746: CALL_OW 264
33750: PUSH
33751: LD_INT 14
33753: PUSH
33754: LD_INT 53
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: IN
33761: IFFALSE 33782
// points := [ 40 , 10 , 20 ] ;
33763: LD_ADDR_VAR 0 9
33767: PUSH
33768: LD_INT 40
33770: PUSH
33771: LD_INT 10
33773: PUSH
33774: LD_INT 20
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: LIST
33781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33782: LD_VAR 0 6
33786: PPUSH
33787: CALL_OW 264
33791: PUSH
33792: LD_INT 9
33794: PUSH
33795: EMPTY
33796: LIST
33797: IN
33798: IFFALSE 33819
// points := [ 5 , 70 , 20 ] ;
33800: LD_ADDR_VAR 0 9
33804: PUSH
33805: LD_INT 5
33807: PUSH
33808: LD_INT 70
33810: PUSH
33811: LD_INT 20
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: LIST
33818: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33819: LD_VAR 0 6
33823: PPUSH
33824: CALL_OW 264
33828: PUSH
33829: LD_INT 10
33831: PUSH
33832: EMPTY
33833: LIST
33834: IN
33835: IFFALSE 33856
// points := [ 35 , 110 , 70 ] ;
33837: LD_ADDR_VAR 0 9
33841: PUSH
33842: LD_INT 35
33844: PUSH
33845: LD_INT 110
33847: PUSH
33848: LD_INT 70
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: LIST
33855: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33856: LD_VAR 0 6
33860: PPUSH
33861: CALL_OW 265
33865: PUSH
33866: LD_INT 25
33868: EQUAL
33869: IFFALSE 33890
// points := [ 80 , 65 , 100 ] ;
33871: LD_ADDR_VAR 0 9
33875: PUSH
33876: LD_INT 80
33878: PUSH
33879: LD_INT 65
33881: PUSH
33882: LD_INT 100
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: LIST
33889: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33890: LD_VAR 0 6
33894: PPUSH
33895: CALL_OW 263
33899: PUSH
33900: LD_INT 1
33902: EQUAL
33903: IFFALSE 33938
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33905: LD_ADDR_VAR 0 10
33909: PUSH
33910: LD_VAR 0 10
33914: PUSH
33915: LD_VAR 0 6
33919: PPUSH
33920: CALL_OW 311
33924: PPUSH
33925: LD_INT 3
33927: PPUSH
33928: CALL_OW 259
33932: PUSH
33933: LD_INT 4
33935: MUL
33936: MUL
33937: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33938: LD_VAR 0 6
33942: PPUSH
33943: CALL_OW 263
33947: PUSH
33948: LD_INT 2
33950: EQUAL
33951: IFFALSE 34002
// begin j := IsControledBy ( i ) ;
33953: LD_ADDR_VAR 0 7
33957: PUSH
33958: LD_VAR 0 6
33962: PPUSH
33963: CALL_OW 312
33967: ST_TO_ADDR
// if j then
33968: LD_VAR 0 7
33972: IFFALSE 34002
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33974: LD_ADDR_VAR 0 10
33978: PUSH
33979: LD_VAR 0 10
33983: PUSH
33984: LD_VAR 0 7
33988: PPUSH
33989: LD_INT 3
33991: PPUSH
33992: CALL_OW 259
33996: PUSH
33997: LD_INT 3
33999: MUL
34000: MUL
34001: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34002: LD_VAR 0 6
34006: PPUSH
34007: CALL_OW 264
34011: PUSH
34012: LD_INT 5
34014: PUSH
34015: LD_INT 6
34017: PUSH
34018: LD_INT 46
34020: PUSH
34021: LD_INT 44
34023: PUSH
34024: LD_INT 47
34026: PUSH
34027: LD_INT 45
34029: PUSH
34030: LD_INT 28
34032: PUSH
34033: LD_INT 7
34035: PUSH
34036: LD_INT 27
34038: PUSH
34039: LD_INT 29
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: IN
34054: PUSH
34055: LD_VAR 0 1
34059: PPUSH
34060: LD_INT 52
34062: PPUSH
34063: CALL_OW 321
34067: PUSH
34068: LD_INT 2
34070: EQUAL
34071: AND
34072: IFFALSE 34089
// bpoints := bpoints * 1.2 ;
34074: LD_ADDR_VAR 0 10
34078: PUSH
34079: LD_VAR 0 10
34083: PUSH
34084: LD_REAL  1.20000000000000E+0000
34087: MUL
34088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34089: LD_VAR 0 6
34093: PPUSH
34094: CALL_OW 264
34098: PUSH
34099: LD_INT 6
34101: PUSH
34102: LD_INT 46
34104: PUSH
34105: LD_INT 47
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: LIST
34112: IN
34113: IFFALSE 34130
// bpoints := bpoints * 1.2 ;
34115: LD_ADDR_VAR 0 10
34119: PUSH
34120: LD_VAR 0 10
34124: PUSH
34125: LD_REAL  1.20000000000000E+0000
34128: MUL
34129: ST_TO_ADDR
// end ; unit_building :
34130: GO 34144
34132: LD_INT 3
34134: DOUBLE
34135: EQUAL
34136: IFTRUE 34140
34138: GO 34143
34140: POP
// ; end ;
34141: GO 34144
34143: POP
// for j = 1 to 3 do
34144: LD_ADDR_VAR 0 7
34148: PUSH
34149: DOUBLE
34150: LD_INT 1
34152: DEC
34153: ST_TO_ADDR
34154: LD_INT 3
34156: PUSH
34157: FOR_TO
34158: IFFALSE 34211
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34160: LD_ADDR_VAR 0 5
34164: PUSH
34165: LD_VAR 0 5
34169: PPUSH
34170: LD_VAR 0 7
34174: PPUSH
34175: LD_VAR 0 5
34179: PUSH
34180: LD_VAR 0 7
34184: ARRAY
34185: PUSH
34186: LD_VAR 0 9
34190: PUSH
34191: LD_VAR 0 7
34195: ARRAY
34196: PUSH
34197: LD_VAR 0 10
34201: MUL
34202: PLUS
34203: PPUSH
34204: CALL_OW 1
34208: ST_TO_ADDR
34209: GO 34157
34211: POP
34212: POP
// end ;
34213: GO 32692
34215: POP
34216: POP
// result := Replace ( result , 4 , tmp ) ;
34217: LD_ADDR_VAR 0 5
34221: PUSH
34222: LD_VAR 0 5
34226: PPUSH
34227: LD_INT 4
34229: PPUSH
34230: LD_VAR 0 8
34234: PPUSH
34235: CALL_OW 1
34239: ST_TO_ADDR
// end ;
34240: LD_VAR 0 5
34244: RET
// export function DangerAtRange ( unit , range ) ; begin
34245: LD_INT 0
34247: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34248: LD_ADDR_VAR 0 3
34252: PUSH
34253: LD_VAR 0 1
34257: PPUSH
34258: CALL_OW 255
34262: PPUSH
34263: LD_VAR 0 1
34267: PPUSH
34268: CALL_OW 250
34272: PPUSH
34273: LD_VAR 0 1
34277: PPUSH
34278: CALL_OW 251
34282: PPUSH
34283: LD_VAR 0 2
34287: PPUSH
34288: CALL 32544 0 4
34292: ST_TO_ADDR
// end ;
34293: LD_VAR 0 3
34297: RET
// export function DangerInArea ( side , area ) ; begin
34298: LD_INT 0
34300: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34301: LD_ADDR_VAR 0 3
34305: PUSH
34306: LD_VAR 0 2
34310: PPUSH
34311: LD_INT 81
34313: PUSH
34314: LD_VAR 0 1
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PPUSH
34323: CALL_OW 70
34327: ST_TO_ADDR
// end ;
34328: LD_VAR 0 3
34332: RET
// export function IsExtension ( b ) ; begin
34333: LD_INT 0
34335: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34336: LD_ADDR_VAR 0 2
34340: PUSH
34341: LD_VAR 0 1
34345: PUSH
34346: LD_INT 23
34348: PUSH
34349: LD_INT 20
34351: PUSH
34352: LD_INT 22
34354: PUSH
34355: LD_INT 17
34357: PUSH
34358: LD_INT 24
34360: PUSH
34361: LD_INT 21
34363: PUSH
34364: LD_INT 19
34366: PUSH
34367: LD_INT 16
34369: PUSH
34370: LD_INT 25
34372: PUSH
34373: LD_INT 18
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: IN
34388: ST_TO_ADDR
// end ;
34389: LD_VAR 0 2
34393: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34394: LD_INT 0
34396: PPUSH
34397: PPUSH
34398: PPUSH
// result := [ ] ;
34399: LD_ADDR_VAR 0 4
34403: PUSH
34404: EMPTY
34405: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34406: LD_ADDR_VAR 0 5
34410: PUSH
34411: LD_VAR 0 2
34415: PPUSH
34416: LD_INT 21
34418: PUSH
34419: LD_INT 3
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PPUSH
34426: CALL_OW 70
34430: ST_TO_ADDR
// if not tmp then
34431: LD_VAR 0 5
34435: NOT
34436: IFFALSE 34440
// exit ;
34438: GO 34504
// if checkLink then
34440: LD_VAR 0 3
34444: IFFALSE 34494
// begin for i in tmp do
34446: LD_ADDR_VAR 0 6
34450: PUSH
34451: LD_VAR 0 5
34455: PUSH
34456: FOR_IN
34457: IFFALSE 34492
// if GetBase ( i ) <> base then
34459: LD_VAR 0 6
34463: PPUSH
34464: CALL_OW 274
34468: PUSH
34469: LD_VAR 0 1
34473: NONEQUAL
34474: IFFALSE 34490
// ComLinkToBase ( base , i ) ;
34476: LD_VAR 0 1
34480: PPUSH
34481: LD_VAR 0 6
34485: PPUSH
34486: CALL_OW 169
34490: GO 34456
34492: POP
34493: POP
// end ; result := tmp ;
34494: LD_ADDR_VAR 0 4
34498: PUSH
34499: LD_VAR 0 5
34503: ST_TO_ADDR
// end ;
34504: LD_VAR 0 4
34508: RET
// export function ComComplete ( units , b ) ; var i ; begin
34509: LD_INT 0
34511: PPUSH
34512: PPUSH
// if not units then
34513: LD_VAR 0 1
34517: NOT
34518: IFFALSE 34522
// exit ;
34520: GO 34612
// for i in units do
34522: LD_ADDR_VAR 0 4
34526: PUSH
34527: LD_VAR 0 1
34531: PUSH
34532: FOR_IN
34533: IFFALSE 34610
// if BuildingStatus ( b ) = bs_build then
34535: LD_VAR 0 2
34539: PPUSH
34540: CALL_OW 461
34544: PUSH
34545: LD_INT 1
34547: EQUAL
34548: IFFALSE 34608
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34550: LD_VAR 0 4
34554: PPUSH
34555: LD_STRING h
34557: PUSH
34558: LD_VAR 0 2
34562: PPUSH
34563: CALL_OW 250
34567: PUSH
34568: LD_VAR 0 2
34572: PPUSH
34573: CALL_OW 251
34577: PUSH
34578: LD_VAR 0 2
34582: PUSH
34583: LD_INT 0
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: LD_INT 0
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: PUSH
34601: EMPTY
34602: LIST
34603: PPUSH
34604: CALL_OW 446
34608: GO 34532
34610: POP
34611: POP
// end ;
34612: LD_VAR 0 3
34616: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34617: LD_INT 0
34619: PPUSH
34620: PPUSH
34621: PPUSH
34622: PPUSH
34623: PPUSH
34624: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34625: LD_VAR 0 1
34629: NOT
34630: PUSH
34631: LD_VAR 0 1
34635: PPUSH
34636: CALL_OW 263
34640: PUSH
34641: LD_INT 2
34643: NONEQUAL
34644: OR
34645: IFFALSE 34649
// exit ;
34647: GO 34965
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34649: LD_ADDR_VAR 0 6
34653: PUSH
34654: LD_INT 22
34656: PUSH
34657: LD_VAR 0 1
34661: PPUSH
34662: CALL_OW 255
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 2
34673: PUSH
34674: LD_INT 30
34676: PUSH
34677: LD_INT 36
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 34
34686: PUSH
34687: LD_INT 31
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: LIST
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PPUSH
34703: CALL_OW 69
34707: ST_TO_ADDR
// if not tmp then
34708: LD_VAR 0 6
34712: NOT
34713: IFFALSE 34717
// exit ;
34715: GO 34965
// result := [ ] ;
34717: LD_ADDR_VAR 0 2
34721: PUSH
34722: EMPTY
34723: ST_TO_ADDR
// for i in tmp do
34724: LD_ADDR_VAR 0 3
34728: PUSH
34729: LD_VAR 0 6
34733: PUSH
34734: FOR_IN
34735: IFFALSE 34806
// begin t := UnitsInside ( i ) ;
34737: LD_ADDR_VAR 0 4
34741: PUSH
34742: LD_VAR 0 3
34746: PPUSH
34747: CALL_OW 313
34751: ST_TO_ADDR
// if t then
34752: LD_VAR 0 4
34756: IFFALSE 34804
// for j in t do
34758: LD_ADDR_VAR 0 7
34762: PUSH
34763: LD_VAR 0 4
34767: PUSH
34768: FOR_IN
34769: IFFALSE 34802
// result := Replace ( result , result + 1 , j ) ;
34771: LD_ADDR_VAR 0 2
34775: PUSH
34776: LD_VAR 0 2
34780: PPUSH
34781: LD_VAR 0 2
34785: PUSH
34786: LD_INT 1
34788: PLUS
34789: PPUSH
34790: LD_VAR 0 7
34794: PPUSH
34795: CALL_OW 1
34799: ST_TO_ADDR
34800: GO 34768
34802: POP
34803: POP
// end ;
34804: GO 34734
34806: POP
34807: POP
// if not result then
34808: LD_VAR 0 2
34812: NOT
34813: IFFALSE 34817
// exit ;
34815: GO 34965
// mech := result [ 1 ] ;
34817: LD_ADDR_VAR 0 5
34821: PUSH
34822: LD_VAR 0 2
34826: PUSH
34827: LD_INT 1
34829: ARRAY
34830: ST_TO_ADDR
// if result > 1 then
34831: LD_VAR 0 2
34835: PUSH
34836: LD_INT 1
34838: GREATER
34839: IFFALSE 34951
// begin for i = 2 to result do
34841: LD_ADDR_VAR 0 3
34845: PUSH
34846: DOUBLE
34847: LD_INT 2
34849: DEC
34850: ST_TO_ADDR
34851: LD_VAR 0 2
34855: PUSH
34856: FOR_TO
34857: IFFALSE 34949
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34859: LD_ADDR_VAR 0 4
34863: PUSH
34864: LD_VAR 0 2
34868: PUSH
34869: LD_VAR 0 3
34873: ARRAY
34874: PPUSH
34875: LD_INT 3
34877: PPUSH
34878: CALL_OW 259
34882: PUSH
34883: LD_VAR 0 2
34887: PUSH
34888: LD_VAR 0 3
34892: ARRAY
34893: PPUSH
34894: CALL_OW 432
34898: MINUS
34899: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34900: LD_VAR 0 4
34904: PUSH
34905: LD_VAR 0 5
34909: PPUSH
34910: LD_INT 3
34912: PPUSH
34913: CALL_OW 259
34917: PUSH
34918: LD_VAR 0 5
34922: PPUSH
34923: CALL_OW 432
34927: MINUS
34928: GREATEREQUAL
34929: IFFALSE 34947
// mech := result [ i ] ;
34931: LD_ADDR_VAR 0 5
34935: PUSH
34936: LD_VAR 0 2
34940: PUSH
34941: LD_VAR 0 3
34945: ARRAY
34946: ST_TO_ADDR
// end ;
34947: GO 34856
34949: POP
34950: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34951: LD_VAR 0 1
34955: PPUSH
34956: LD_VAR 0 5
34960: PPUSH
34961: CALL_OW 135
// end ;
34965: LD_VAR 0 2
34969: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34970: LD_INT 0
34972: PPUSH
34973: PPUSH
34974: PPUSH
34975: PPUSH
34976: PPUSH
34977: PPUSH
34978: PPUSH
34979: PPUSH
34980: PPUSH
34981: PPUSH
34982: PPUSH
34983: PPUSH
34984: PPUSH
// result := [ ] ;
34985: LD_ADDR_VAR 0 7
34989: PUSH
34990: EMPTY
34991: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34992: LD_VAR 0 1
34996: PPUSH
34997: CALL_OW 266
35001: PUSH
35002: LD_INT 0
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: IN
35012: NOT
35013: IFFALSE 35017
// exit ;
35015: GO 36651
// if name then
35017: LD_VAR 0 3
35021: IFFALSE 35037
// SetBName ( base_dep , name ) ;
35023: LD_VAR 0 1
35027: PPUSH
35028: LD_VAR 0 3
35032: PPUSH
35033: CALL_OW 500
// base := GetBase ( base_dep ) ;
35037: LD_ADDR_VAR 0 15
35041: PUSH
35042: LD_VAR 0 1
35046: PPUSH
35047: CALL_OW 274
35051: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35052: LD_ADDR_VAR 0 16
35056: PUSH
35057: LD_VAR 0 1
35061: PPUSH
35062: CALL_OW 255
35066: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35067: LD_ADDR_VAR 0 17
35071: PUSH
35072: LD_VAR 0 1
35076: PPUSH
35077: CALL_OW 248
35081: ST_TO_ADDR
// if sources then
35082: LD_VAR 0 5
35086: IFFALSE 35133
// for i = 1 to 3 do
35088: LD_ADDR_VAR 0 8
35092: PUSH
35093: DOUBLE
35094: LD_INT 1
35096: DEC
35097: ST_TO_ADDR
35098: LD_INT 3
35100: PUSH
35101: FOR_TO
35102: IFFALSE 35131
// AddResourceType ( base , i , sources [ i ] ) ;
35104: LD_VAR 0 15
35108: PPUSH
35109: LD_VAR 0 8
35113: PPUSH
35114: LD_VAR 0 5
35118: PUSH
35119: LD_VAR 0 8
35123: ARRAY
35124: PPUSH
35125: CALL_OW 276
35129: GO 35101
35131: POP
35132: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35133: LD_ADDR_VAR 0 18
35137: PUSH
35138: LD_VAR 0 15
35142: PPUSH
35143: LD_VAR 0 2
35147: PPUSH
35148: LD_INT 1
35150: PPUSH
35151: CALL 34394 0 3
35155: ST_TO_ADDR
// InitHc ;
35156: CALL_OW 19
// InitUc ;
35160: CALL_OW 18
// uc_side := side ;
35164: LD_ADDR_OWVAR 20
35168: PUSH
35169: LD_VAR 0 16
35173: ST_TO_ADDR
// uc_nation := nation ;
35174: LD_ADDR_OWVAR 21
35178: PUSH
35179: LD_VAR 0 17
35183: ST_TO_ADDR
// if buildings then
35184: LD_VAR 0 18
35188: IFFALSE 36510
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35190: LD_ADDR_VAR 0 19
35194: PUSH
35195: LD_VAR 0 18
35199: PPUSH
35200: LD_INT 2
35202: PUSH
35203: LD_INT 30
35205: PUSH
35206: LD_INT 29
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 30
35215: PUSH
35216: LD_INT 30
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: LIST
35227: PPUSH
35228: CALL_OW 72
35232: ST_TO_ADDR
// if tmp then
35233: LD_VAR 0 19
35237: IFFALSE 35285
// for i in tmp do
35239: LD_ADDR_VAR 0 8
35243: PUSH
35244: LD_VAR 0 19
35248: PUSH
35249: FOR_IN
35250: IFFALSE 35283
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35252: LD_VAR 0 8
35256: PPUSH
35257: CALL_OW 250
35261: PPUSH
35262: LD_VAR 0 8
35266: PPUSH
35267: CALL_OW 251
35271: PPUSH
35272: LD_VAR 0 16
35276: PPUSH
35277: CALL_OW 441
35281: GO 35249
35283: POP
35284: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35285: LD_VAR 0 18
35289: PPUSH
35290: LD_INT 2
35292: PUSH
35293: LD_INT 30
35295: PUSH
35296: LD_INT 32
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 30
35305: PUSH
35306: LD_INT 33
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: LIST
35317: PPUSH
35318: CALL_OW 72
35322: IFFALSE 35410
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35324: LD_ADDR_VAR 0 8
35328: PUSH
35329: LD_VAR 0 18
35333: PPUSH
35334: LD_INT 2
35336: PUSH
35337: LD_INT 30
35339: PUSH
35340: LD_INT 32
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 30
35349: PUSH
35350: LD_INT 33
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: LIST
35361: PPUSH
35362: CALL_OW 72
35366: PUSH
35367: FOR_IN
35368: IFFALSE 35408
// begin if not GetBWeapon ( i ) then
35370: LD_VAR 0 8
35374: PPUSH
35375: CALL_OW 269
35379: NOT
35380: IFFALSE 35406
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35382: LD_VAR 0 8
35386: PPUSH
35387: LD_VAR 0 8
35391: PPUSH
35392: LD_VAR 0 2
35396: PPUSH
35397: CALL 36656 0 2
35401: PPUSH
35402: CALL_OW 431
// end ;
35406: GO 35367
35408: POP
35409: POP
// end ; for i = 1 to personel do
35410: LD_ADDR_VAR 0 8
35414: PUSH
35415: DOUBLE
35416: LD_INT 1
35418: DEC
35419: ST_TO_ADDR
35420: LD_VAR 0 6
35424: PUSH
35425: FOR_TO
35426: IFFALSE 36490
// begin if i > 4 then
35428: LD_VAR 0 8
35432: PUSH
35433: LD_INT 4
35435: GREATER
35436: IFFALSE 35440
// break ;
35438: GO 36490
// case i of 1 :
35440: LD_VAR 0 8
35444: PUSH
35445: LD_INT 1
35447: DOUBLE
35448: EQUAL
35449: IFTRUE 35453
35451: GO 35533
35453: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35454: LD_ADDR_VAR 0 12
35458: PUSH
35459: LD_VAR 0 18
35463: PPUSH
35464: LD_INT 22
35466: PUSH
35467: LD_VAR 0 16
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 58
35478: PUSH
35479: EMPTY
35480: LIST
35481: PUSH
35482: LD_INT 2
35484: PUSH
35485: LD_INT 30
35487: PUSH
35488: LD_INT 32
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 30
35497: PUSH
35498: LD_INT 4
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 30
35507: PUSH
35508: LD_INT 5
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: LIST
35525: PPUSH
35526: CALL_OW 72
35530: ST_TO_ADDR
35531: GO 35755
35533: LD_INT 2
35535: DOUBLE
35536: EQUAL
35537: IFTRUE 35541
35539: GO 35603
35541: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35542: LD_ADDR_VAR 0 12
35546: PUSH
35547: LD_VAR 0 18
35551: PPUSH
35552: LD_INT 22
35554: PUSH
35555: LD_VAR 0 16
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 2
35566: PUSH
35567: LD_INT 30
35569: PUSH
35570: LD_INT 0
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 30
35579: PUSH
35580: LD_INT 1
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: LIST
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PPUSH
35596: CALL_OW 72
35600: ST_TO_ADDR
35601: GO 35755
35603: LD_INT 3
35605: DOUBLE
35606: EQUAL
35607: IFTRUE 35611
35609: GO 35673
35611: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35612: LD_ADDR_VAR 0 12
35616: PUSH
35617: LD_VAR 0 18
35621: PPUSH
35622: LD_INT 22
35624: PUSH
35625: LD_VAR 0 16
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 2
35636: PUSH
35637: LD_INT 30
35639: PUSH
35640: LD_INT 2
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 30
35649: PUSH
35650: LD_INT 3
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: LIST
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PPUSH
35666: CALL_OW 72
35670: ST_TO_ADDR
35671: GO 35755
35673: LD_INT 4
35675: DOUBLE
35676: EQUAL
35677: IFTRUE 35681
35679: GO 35754
35681: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35682: LD_ADDR_VAR 0 12
35686: PUSH
35687: LD_VAR 0 18
35691: PPUSH
35692: LD_INT 22
35694: PUSH
35695: LD_VAR 0 16
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 2
35706: PUSH
35707: LD_INT 30
35709: PUSH
35710: LD_INT 6
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 30
35719: PUSH
35720: LD_INT 7
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 30
35729: PUSH
35730: LD_INT 8
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PPUSH
35747: CALL_OW 72
35751: ST_TO_ADDR
35752: GO 35755
35754: POP
// if i = 1 then
35755: LD_VAR 0 8
35759: PUSH
35760: LD_INT 1
35762: EQUAL
35763: IFFALSE 35874
// begin tmp := [ ] ;
35765: LD_ADDR_VAR 0 19
35769: PUSH
35770: EMPTY
35771: ST_TO_ADDR
// for j in f do
35772: LD_ADDR_VAR 0 9
35776: PUSH
35777: LD_VAR 0 12
35781: PUSH
35782: FOR_IN
35783: IFFALSE 35856
// if GetBType ( j ) = b_bunker then
35785: LD_VAR 0 9
35789: PPUSH
35790: CALL_OW 266
35794: PUSH
35795: LD_INT 32
35797: EQUAL
35798: IFFALSE 35825
// tmp := Insert ( tmp , 1 , j ) else
35800: LD_ADDR_VAR 0 19
35804: PUSH
35805: LD_VAR 0 19
35809: PPUSH
35810: LD_INT 1
35812: PPUSH
35813: LD_VAR 0 9
35817: PPUSH
35818: CALL_OW 2
35822: ST_TO_ADDR
35823: GO 35854
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35825: LD_ADDR_VAR 0 19
35829: PUSH
35830: LD_VAR 0 19
35834: PPUSH
35835: LD_VAR 0 19
35839: PUSH
35840: LD_INT 1
35842: PLUS
35843: PPUSH
35844: LD_VAR 0 9
35848: PPUSH
35849: CALL_OW 2
35853: ST_TO_ADDR
35854: GO 35782
35856: POP
35857: POP
// if tmp then
35858: LD_VAR 0 19
35862: IFFALSE 35874
// f := tmp ;
35864: LD_ADDR_VAR 0 12
35868: PUSH
35869: LD_VAR 0 19
35873: ST_TO_ADDR
// end ; x := personel [ i ] ;
35874: LD_ADDR_VAR 0 13
35878: PUSH
35879: LD_VAR 0 6
35883: PUSH
35884: LD_VAR 0 8
35888: ARRAY
35889: ST_TO_ADDR
// if x = - 1 then
35890: LD_VAR 0 13
35894: PUSH
35895: LD_INT 1
35897: NEG
35898: EQUAL
35899: IFFALSE 36108
// begin for j in f do
35901: LD_ADDR_VAR 0 9
35905: PUSH
35906: LD_VAR 0 12
35910: PUSH
35911: FOR_IN
35912: IFFALSE 36104
// repeat InitHc ;
35914: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35918: LD_VAR 0 9
35922: PPUSH
35923: CALL_OW 266
35927: PUSH
35928: LD_INT 5
35930: EQUAL
35931: IFFALSE 36001
// begin if UnitsInside ( j ) < 3 then
35933: LD_VAR 0 9
35937: PPUSH
35938: CALL_OW 313
35942: PUSH
35943: LD_INT 3
35945: LESS
35946: IFFALSE 35982
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35948: LD_INT 0
35950: PPUSH
35951: LD_INT 5
35953: PUSH
35954: LD_INT 8
35956: PUSH
35957: LD_INT 9
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: LIST
35964: PUSH
35965: LD_VAR 0 17
35969: ARRAY
35970: PPUSH
35971: LD_VAR 0 4
35975: PPUSH
35976: CALL_OW 380
35980: GO 35999
// PrepareHuman ( false , i , skill ) ;
35982: LD_INT 0
35984: PPUSH
35985: LD_VAR 0 8
35989: PPUSH
35990: LD_VAR 0 4
35994: PPUSH
35995: CALL_OW 380
// end else
35999: GO 36018
// PrepareHuman ( false , i , skill ) ;
36001: LD_INT 0
36003: PPUSH
36004: LD_VAR 0 8
36008: PPUSH
36009: LD_VAR 0 4
36013: PPUSH
36014: CALL_OW 380
// un := CreateHuman ;
36018: LD_ADDR_VAR 0 14
36022: PUSH
36023: CALL_OW 44
36027: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36028: LD_ADDR_VAR 0 7
36032: PUSH
36033: LD_VAR 0 7
36037: PPUSH
36038: LD_INT 1
36040: PPUSH
36041: LD_VAR 0 14
36045: PPUSH
36046: CALL_OW 2
36050: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36051: LD_VAR 0 14
36055: PPUSH
36056: LD_VAR 0 9
36060: PPUSH
36061: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36065: LD_VAR 0 9
36069: PPUSH
36070: CALL_OW 313
36074: PUSH
36075: LD_INT 6
36077: EQUAL
36078: PUSH
36079: LD_VAR 0 9
36083: PPUSH
36084: CALL_OW 266
36088: PUSH
36089: LD_INT 32
36091: PUSH
36092: LD_INT 31
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: IN
36099: OR
36100: IFFALSE 35914
36102: GO 35911
36104: POP
36105: POP
// end else
36106: GO 36488
// for j = 1 to x do
36108: LD_ADDR_VAR 0 9
36112: PUSH
36113: DOUBLE
36114: LD_INT 1
36116: DEC
36117: ST_TO_ADDR
36118: LD_VAR 0 13
36122: PUSH
36123: FOR_TO
36124: IFFALSE 36486
// begin InitHc ;
36126: CALL_OW 19
// if not f then
36130: LD_VAR 0 12
36134: NOT
36135: IFFALSE 36224
// begin PrepareHuman ( false , i , skill ) ;
36137: LD_INT 0
36139: PPUSH
36140: LD_VAR 0 8
36144: PPUSH
36145: LD_VAR 0 4
36149: PPUSH
36150: CALL_OW 380
// un := CreateHuman ;
36154: LD_ADDR_VAR 0 14
36158: PUSH
36159: CALL_OW 44
36163: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36164: LD_ADDR_VAR 0 7
36168: PUSH
36169: LD_VAR 0 7
36173: PPUSH
36174: LD_INT 1
36176: PPUSH
36177: LD_VAR 0 14
36181: PPUSH
36182: CALL_OW 2
36186: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36187: LD_VAR 0 14
36191: PPUSH
36192: LD_VAR 0 1
36196: PPUSH
36197: CALL_OW 250
36201: PPUSH
36202: LD_VAR 0 1
36206: PPUSH
36207: CALL_OW 251
36211: PPUSH
36212: LD_INT 10
36214: PPUSH
36215: LD_INT 0
36217: PPUSH
36218: CALL_OW 50
// continue ;
36222: GO 36123
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36224: LD_VAR 0 12
36228: PUSH
36229: LD_INT 1
36231: ARRAY
36232: PPUSH
36233: CALL_OW 313
36237: PUSH
36238: LD_VAR 0 12
36242: PUSH
36243: LD_INT 1
36245: ARRAY
36246: PPUSH
36247: CALL_OW 266
36251: PUSH
36252: LD_INT 32
36254: PUSH
36255: LD_INT 31
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: IN
36262: AND
36263: PUSH
36264: LD_VAR 0 12
36268: PUSH
36269: LD_INT 1
36271: ARRAY
36272: PPUSH
36273: CALL_OW 313
36277: PUSH
36278: LD_INT 6
36280: EQUAL
36281: OR
36282: IFFALSE 36302
// f := Delete ( f , 1 ) ;
36284: LD_ADDR_VAR 0 12
36288: PUSH
36289: LD_VAR 0 12
36293: PPUSH
36294: LD_INT 1
36296: PPUSH
36297: CALL_OW 3
36301: ST_TO_ADDR
// if not f then
36302: LD_VAR 0 12
36306: NOT
36307: IFFALSE 36325
// begin x := x + 2 ;
36309: LD_ADDR_VAR 0 13
36313: PUSH
36314: LD_VAR 0 13
36318: PUSH
36319: LD_INT 2
36321: PLUS
36322: ST_TO_ADDR
// continue ;
36323: GO 36123
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36325: LD_VAR 0 12
36329: PUSH
36330: LD_INT 1
36332: ARRAY
36333: PPUSH
36334: CALL_OW 266
36338: PUSH
36339: LD_INT 5
36341: EQUAL
36342: IFFALSE 36416
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36344: LD_VAR 0 12
36348: PUSH
36349: LD_INT 1
36351: ARRAY
36352: PPUSH
36353: CALL_OW 313
36357: PUSH
36358: LD_INT 3
36360: LESS
36361: IFFALSE 36397
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36363: LD_INT 0
36365: PPUSH
36366: LD_INT 5
36368: PUSH
36369: LD_INT 8
36371: PUSH
36372: LD_INT 9
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: LIST
36379: PUSH
36380: LD_VAR 0 17
36384: ARRAY
36385: PPUSH
36386: LD_VAR 0 4
36390: PPUSH
36391: CALL_OW 380
36395: GO 36414
// PrepareHuman ( false , i , skill ) ;
36397: LD_INT 0
36399: PPUSH
36400: LD_VAR 0 8
36404: PPUSH
36405: LD_VAR 0 4
36409: PPUSH
36410: CALL_OW 380
// end else
36414: GO 36433
// PrepareHuman ( false , i , skill ) ;
36416: LD_INT 0
36418: PPUSH
36419: LD_VAR 0 8
36423: PPUSH
36424: LD_VAR 0 4
36428: PPUSH
36429: CALL_OW 380
// un := CreateHuman ;
36433: LD_ADDR_VAR 0 14
36437: PUSH
36438: CALL_OW 44
36442: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36443: LD_ADDR_VAR 0 7
36447: PUSH
36448: LD_VAR 0 7
36452: PPUSH
36453: LD_INT 1
36455: PPUSH
36456: LD_VAR 0 14
36460: PPUSH
36461: CALL_OW 2
36465: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36466: LD_VAR 0 14
36470: PPUSH
36471: LD_VAR 0 12
36475: PUSH
36476: LD_INT 1
36478: ARRAY
36479: PPUSH
36480: CALL_OW 52
// end ;
36484: GO 36123
36486: POP
36487: POP
// end ;
36488: GO 35425
36490: POP
36491: POP
// result := result ^ buildings ;
36492: LD_ADDR_VAR 0 7
36496: PUSH
36497: LD_VAR 0 7
36501: PUSH
36502: LD_VAR 0 18
36506: ADD
36507: ST_TO_ADDR
// end else
36508: GO 36651
// begin for i = 1 to personel do
36510: LD_ADDR_VAR 0 8
36514: PUSH
36515: DOUBLE
36516: LD_INT 1
36518: DEC
36519: ST_TO_ADDR
36520: LD_VAR 0 6
36524: PUSH
36525: FOR_TO
36526: IFFALSE 36649
// begin if i > 4 then
36528: LD_VAR 0 8
36532: PUSH
36533: LD_INT 4
36535: GREATER
36536: IFFALSE 36540
// break ;
36538: GO 36649
// x := personel [ i ] ;
36540: LD_ADDR_VAR 0 13
36544: PUSH
36545: LD_VAR 0 6
36549: PUSH
36550: LD_VAR 0 8
36554: ARRAY
36555: ST_TO_ADDR
// if x = - 1 then
36556: LD_VAR 0 13
36560: PUSH
36561: LD_INT 1
36563: NEG
36564: EQUAL
36565: IFFALSE 36569
// continue ;
36567: GO 36525
// PrepareHuman ( false , i , skill ) ;
36569: LD_INT 0
36571: PPUSH
36572: LD_VAR 0 8
36576: PPUSH
36577: LD_VAR 0 4
36581: PPUSH
36582: CALL_OW 380
// un := CreateHuman ;
36586: LD_ADDR_VAR 0 14
36590: PUSH
36591: CALL_OW 44
36595: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36596: LD_VAR 0 14
36600: PPUSH
36601: LD_VAR 0 1
36605: PPUSH
36606: CALL_OW 250
36610: PPUSH
36611: LD_VAR 0 1
36615: PPUSH
36616: CALL_OW 251
36620: PPUSH
36621: LD_INT 10
36623: PPUSH
36624: LD_INT 0
36626: PPUSH
36627: CALL_OW 50
// result := result ^ un ;
36631: LD_ADDR_VAR 0 7
36635: PUSH
36636: LD_VAR 0 7
36640: PUSH
36641: LD_VAR 0 14
36645: ADD
36646: ST_TO_ADDR
// end ;
36647: GO 36525
36649: POP
36650: POP
// end ; end ;
36651: LD_VAR 0 7
36655: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36656: LD_INT 0
36658: PPUSH
36659: PPUSH
36660: PPUSH
36661: PPUSH
36662: PPUSH
36663: PPUSH
36664: PPUSH
36665: PPUSH
36666: PPUSH
36667: PPUSH
36668: PPUSH
36669: PPUSH
36670: PPUSH
36671: PPUSH
36672: PPUSH
36673: PPUSH
// result := false ;
36674: LD_ADDR_VAR 0 3
36678: PUSH
36679: LD_INT 0
36681: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36682: LD_VAR 0 1
36686: NOT
36687: PUSH
36688: LD_VAR 0 1
36692: PPUSH
36693: CALL_OW 266
36697: PUSH
36698: LD_INT 32
36700: PUSH
36701: LD_INT 33
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: IN
36708: NOT
36709: OR
36710: IFFALSE 36714
// exit ;
36712: GO 37823
// nat := GetNation ( tower ) ;
36714: LD_ADDR_VAR 0 12
36718: PUSH
36719: LD_VAR 0 1
36723: PPUSH
36724: CALL_OW 248
36728: ST_TO_ADDR
// side := GetSide ( tower ) ;
36729: LD_ADDR_VAR 0 16
36733: PUSH
36734: LD_VAR 0 1
36738: PPUSH
36739: CALL_OW 255
36743: ST_TO_ADDR
// x := GetX ( tower ) ;
36744: LD_ADDR_VAR 0 10
36748: PUSH
36749: LD_VAR 0 1
36753: PPUSH
36754: CALL_OW 250
36758: ST_TO_ADDR
// y := GetY ( tower ) ;
36759: LD_ADDR_VAR 0 11
36763: PUSH
36764: LD_VAR 0 1
36768: PPUSH
36769: CALL_OW 251
36773: ST_TO_ADDR
// if not x or not y then
36774: LD_VAR 0 10
36778: NOT
36779: PUSH
36780: LD_VAR 0 11
36784: NOT
36785: OR
36786: IFFALSE 36790
// exit ;
36788: GO 37823
// weapon := 0 ;
36790: LD_ADDR_VAR 0 18
36794: PUSH
36795: LD_INT 0
36797: ST_TO_ADDR
// fac_list := [ ] ;
36798: LD_ADDR_VAR 0 17
36802: PUSH
36803: EMPTY
36804: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36805: LD_ADDR_VAR 0 6
36809: PUSH
36810: LD_VAR 0 1
36814: PPUSH
36815: CALL_OW 274
36819: PPUSH
36820: LD_VAR 0 2
36824: PPUSH
36825: LD_INT 0
36827: PPUSH
36828: CALL 34394 0 3
36832: PPUSH
36833: LD_INT 30
36835: PUSH
36836: LD_INT 3
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PPUSH
36843: CALL_OW 72
36847: ST_TO_ADDR
// if not factories then
36848: LD_VAR 0 6
36852: NOT
36853: IFFALSE 36857
// exit ;
36855: GO 37823
// for i in factories do
36857: LD_ADDR_VAR 0 8
36861: PUSH
36862: LD_VAR 0 6
36866: PUSH
36867: FOR_IN
36868: IFFALSE 36893
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36870: LD_ADDR_VAR 0 17
36874: PUSH
36875: LD_VAR 0 17
36879: PUSH
36880: LD_VAR 0 8
36884: PPUSH
36885: CALL_OW 478
36889: UNION
36890: ST_TO_ADDR
36891: GO 36867
36893: POP
36894: POP
// if not fac_list then
36895: LD_VAR 0 17
36899: NOT
36900: IFFALSE 36904
// exit ;
36902: GO 37823
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36904: LD_ADDR_VAR 0 5
36908: PUSH
36909: LD_INT 4
36911: PUSH
36912: LD_INT 5
36914: PUSH
36915: LD_INT 9
36917: PUSH
36918: LD_INT 10
36920: PUSH
36921: LD_INT 6
36923: PUSH
36924: LD_INT 7
36926: PUSH
36927: LD_INT 11
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 27
36941: PUSH
36942: LD_INT 28
36944: PUSH
36945: LD_INT 26
36947: PUSH
36948: LD_INT 30
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 43
36959: PUSH
36960: LD_INT 44
36962: PUSH
36963: LD_INT 46
36965: PUSH
36966: LD_INT 45
36968: PUSH
36969: LD_INT 47
36971: PUSH
36972: LD_INT 49
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: LIST
36987: PUSH
36988: LD_VAR 0 12
36992: ARRAY
36993: ST_TO_ADDR
// list := list isect fac_list ;
36994: LD_ADDR_VAR 0 5
36998: PUSH
36999: LD_VAR 0 5
37003: PUSH
37004: LD_VAR 0 17
37008: ISECT
37009: ST_TO_ADDR
// if not list then
37010: LD_VAR 0 5
37014: NOT
37015: IFFALSE 37019
// exit ;
37017: GO 37823
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37019: LD_VAR 0 12
37023: PUSH
37024: LD_INT 3
37026: EQUAL
37027: PUSH
37028: LD_INT 49
37030: PUSH
37031: LD_VAR 0 5
37035: IN
37036: AND
37037: PUSH
37038: LD_INT 31
37040: PPUSH
37041: LD_VAR 0 16
37045: PPUSH
37046: CALL_OW 321
37050: PUSH
37051: LD_INT 2
37053: EQUAL
37054: AND
37055: IFFALSE 37115
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37057: LD_INT 22
37059: PUSH
37060: LD_VAR 0 16
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 35
37071: PUSH
37072: LD_INT 49
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 91
37081: PUSH
37082: LD_VAR 0 1
37086: PUSH
37087: LD_INT 10
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: LIST
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: LIST
37099: PPUSH
37100: CALL_OW 69
37104: NOT
37105: IFFALSE 37115
// weapon := ru_time_lapser ;
37107: LD_ADDR_VAR 0 18
37111: PUSH
37112: LD_INT 49
37114: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37115: LD_VAR 0 12
37119: PUSH
37120: LD_INT 1
37122: PUSH
37123: LD_INT 2
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: IN
37130: PUSH
37131: LD_INT 11
37133: PUSH
37134: LD_VAR 0 5
37138: IN
37139: PUSH
37140: LD_INT 30
37142: PUSH
37143: LD_VAR 0 5
37147: IN
37148: OR
37149: AND
37150: PUSH
37151: LD_INT 6
37153: PPUSH
37154: LD_VAR 0 16
37158: PPUSH
37159: CALL_OW 321
37163: PUSH
37164: LD_INT 2
37166: EQUAL
37167: AND
37168: IFFALSE 37333
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37170: LD_INT 22
37172: PUSH
37173: LD_VAR 0 16
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 2
37184: PUSH
37185: LD_INT 35
37187: PUSH
37188: LD_INT 11
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 35
37197: PUSH
37198: LD_INT 30
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 91
37212: PUSH
37213: LD_VAR 0 1
37217: PUSH
37218: LD_INT 18
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: LIST
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: LIST
37230: PPUSH
37231: CALL_OW 69
37235: NOT
37236: PUSH
37237: LD_INT 22
37239: PUSH
37240: LD_VAR 0 16
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 2
37251: PUSH
37252: LD_INT 30
37254: PUSH
37255: LD_INT 32
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 30
37264: PUSH
37265: LD_INT 33
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 91
37279: PUSH
37280: LD_VAR 0 1
37284: PUSH
37285: LD_INT 12
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: LIST
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: LIST
37297: PUSH
37298: EMPTY
37299: LIST
37300: PPUSH
37301: CALL_OW 69
37305: PUSH
37306: LD_INT 2
37308: GREATER
37309: AND
37310: IFFALSE 37333
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37312: LD_ADDR_VAR 0 18
37316: PUSH
37317: LD_INT 11
37319: PUSH
37320: LD_INT 30
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_VAR 0 12
37331: ARRAY
37332: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37333: LD_VAR 0 18
37337: NOT
37338: PUSH
37339: LD_INT 40
37341: PPUSH
37342: LD_VAR 0 16
37346: PPUSH
37347: CALL_OW 321
37351: PUSH
37352: LD_INT 2
37354: EQUAL
37355: AND
37356: PUSH
37357: LD_INT 7
37359: PUSH
37360: LD_VAR 0 5
37364: IN
37365: PUSH
37366: LD_INT 28
37368: PUSH
37369: LD_VAR 0 5
37373: IN
37374: OR
37375: PUSH
37376: LD_INT 45
37378: PUSH
37379: LD_VAR 0 5
37383: IN
37384: OR
37385: AND
37386: IFFALSE 37640
// begin hex := GetHexInfo ( x , y ) ;
37388: LD_ADDR_VAR 0 4
37392: PUSH
37393: LD_VAR 0 10
37397: PPUSH
37398: LD_VAR 0 11
37402: PPUSH
37403: CALL_OW 546
37407: ST_TO_ADDR
// if hex [ 1 ] then
37408: LD_VAR 0 4
37412: PUSH
37413: LD_INT 1
37415: ARRAY
37416: IFFALSE 37420
// exit ;
37418: GO 37823
// height := hex [ 2 ] ;
37420: LD_ADDR_VAR 0 15
37424: PUSH
37425: LD_VAR 0 4
37429: PUSH
37430: LD_INT 2
37432: ARRAY
37433: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37434: LD_ADDR_VAR 0 14
37438: PUSH
37439: LD_INT 0
37441: PUSH
37442: LD_INT 2
37444: PUSH
37445: LD_INT 3
37447: PUSH
37448: LD_INT 5
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: ST_TO_ADDR
// for i in tmp do
37457: LD_ADDR_VAR 0 8
37461: PUSH
37462: LD_VAR 0 14
37466: PUSH
37467: FOR_IN
37468: IFFALSE 37638
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37470: LD_ADDR_VAR 0 9
37474: PUSH
37475: LD_VAR 0 10
37479: PPUSH
37480: LD_VAR 0 8
37484: PPUSH
37485: LD_INT 5
37487: PPUSH
37488: CALL_OW 272
37492: PUSH
37493: LD_VAR 0 11
37497: PPUSH
37498: LD_VAR 0 8
37502: PPUSH
37503: LD_INT 5
37505: PPUSH
37506: CALL_OW 273
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37515: LD_VAR 0 9
37519: PUSH
37520: LD_INT 1
37522: ARRAY
37523: PPUSH
37524: LD_VAR 0 9
37528: PUSH
37529: LD_INT 2
37531: ARRAY
37532: PPUSH
37533: CALL_OW 488
37537: IFFALSE 37636
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37539: LD_ADDR_VAR 0 4
37543: PUSH
37544: LD_VAR 0 9
37548: PUSH
37549: LD_INT 1
37551: ARRAY
37552: PPUSH
37553: LD_VAR 0 9
37557: PUSH
37558: LD_INT 2
37560: ARRAY
37561: PPUSH
37562: CALL_OW 546
37566: ST_TO_ADDR
// if hex [ 1 ] then
37567: LD_VAR 0 4
37571: PUSH
37572: LD_INT 1
37574: ARRAY
37575: IFFALSE 37579
// continue ;
37577: GO 37467
// h := hex [ 2 ] ;
37579: LD_ADDR_VAR 0 13
37583: PUSH
37584: LD_VAR 0 4
37588: PUSH
37589: LD_INT 2
37591: ARRAY
37592: ST_TO_ADDR
// if h + 7 < height then
37593: LD_VAR 0 13
37597: PUSH
37598: LD_INT 7
37600: PLUS
37601: PUSH
37602: LD_VAR 0 15
37606: LESS
37607: IFFALSE 37636
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37609: LD_ADDR_VAR 0 18
37613: PUSH
37614: LD_INT 7
37616: PUSH
37617: LD_INT 28
37619: PUSH
37620: LD_INT 45
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: LIST
37627: PUSH
37628: LD_VAR 0 12
37632: ARRAY
37633: ST_TO_ADDR
// break ;
37634: GO 37638
// end ; end ; end ;
37636: GO 37467
37638: POP
37639: POP
// end ; if not weapon then
37640: LD_VAR 0 18
37644: NOT
37645: IFFALSE 37705
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37647: LD_ADDR_VAR 0 5
37651: PUSH
37652: LD_VAR 0 5
37656: PUSH
37657: LD_INT 11
37659: PUSH
37660: LD_INT 30
37662: PUSH
37663: LD_INT 49
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: LIST
37670: DIFF
37671: ST_TO_ADDR
// if not list then
37672: LD_VAR 0 5
37676: NOT
37677: IFFALSE 37681
// exit ;
37679: GO 37823
// weapon := list [ rand ( 1 , list ) ] ;
37681: LD_ADDR_VAR 0 18
37685: PUSH
37686: LD_VAR 0 5
37690: PUSH
37691: LD_INT 1
37693: PPUSH
37694: LD_VAR 0 5
37698: PPUSH
37699: CALL_OW 12
37703: ARRAY
37704: ST_TO_ADDR
// end ; if weapon then
37705: LD_VAR 0 18
37709: IFFALSE 37823
// begin tmp := CostOfWeapon ( weapon ) ;
37711: LD_ADDR_VAR 0 14
37715: PUSH
37716: LD_VAR 0 18
37720: PPUSH
37721: CALL_OW 451
37725: ST_TO_ADDR
// j := GetBase ( tower ) ;
37726: LD_ADDR_VAR 0 9
37730: PUSH
37731: LD_VAR 0 1
37735: PPUSH
37736: CALL_OW 274
37740: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37741: LD_VAR 0 9
37745: PPUSH
37746: LD_INT 1
37748: PPUSH
37749: CALL_OW 275
37753: PUSH
37754: LD_VAR 0 14
37758: PUSH
37759: LD_INT 1
37761: ARRAY
37762: GREATEREQUAL
37763: PUSH
37764: LD_VAR 0 9
37768: PPUSH
37769: LD_INT 2
37771: PPUSH
37772: CALL_OW 275
37776: PUSH
37777: LD_VAR 0 14
37781: PUSH
37782: LD_INT 2
37784: ARRAY
37785: GREATEREQUAL
37786: AND
37787: PUSH
37788: LD_VAR 0 9
37792: PPUSH
37793: LD_INT 3
37795: PPUSH
37796: CALL_OW 275
37800: PUSH
37801: LD_VAR 0 14
37805: PUSH
37806: LD_INT 3
37808: ARRAY
37809: GREATEREQUAL
37810: AND
37811: IFFALSE 37823
// result := weapon ;
37813: LD_ADDR_VAR 0 3
37817: PUSH
37818: LD_VAR 0 18
37822: ST_TO_ADDR
// end ; end ;
37823: LD_VAR 0 3
37827: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37828: LD_INT 0
37830: PPUSH
37831: PPUSH
// result := true ;
37832: LD_ADDR_VAR 0 3
37836: PUSH
37837: LD_INT 1
37839: ST_TO_ADDR
// if array1 = array2 then
37840: LD_VAR 0 1
37844: PUSH
37845: LD_VAR 0 2
37849: EQUAL
37850: IFFALSE 37910
// begin for i = 1 to array1 do
37852: LD_ADDR_VAR 0 4
37856: PUSH
37857: DOUBLE
37858: LD_INT 1
37860: DEC
37861: ST_TO_ADDR
37862: LD_VAR 0 1
37866: PUSH
37867: FOR_TO
37868: IFFALSE 37906
// if array1 [ i ] <> array2 [ i ] then
37870: LD_VAR 0 1
37874: PUSH
37875: LD_VAR 0 4
37879: ARRAY
37880: PUSH
37881: LD_VAR 0 2
37885: PUSH
37886: LD_VAR 0 4
37890: ARRAY
37891: NONEQUAL
37892: IFFALSE 37904
// begin result := false ;
37894: LD_ADDR_VAR 0 3
37898: PUSH
37899: LD_INT 0
37901: ST_TO_ADDR
// break ;
37902: GO 37906
// end ;
37904: GO 37867
37906: POP
37907: POP
// end else
37908: GO 37918
// result := false ;
37910: LD_ADDR_VAR 0 3
37914: PUSH
37915: LD_INT 0
37917: ST_TO_ADDR
// end ;
37918: LD_VAR 0 3
37922: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37923: LD_INT 0
37925: PPUSH
37926: PPUSH
// if not array1 or not array2 then
37927: LD_VAR 0 1
37931: NOT
37932: PUSH
37933: LD_VAR 0 2
37937: NOT
37938: OR
37939: IFFALSE 37943
// exit ;
37941: GO 38007
// result := true ;
37943: LD_ADDR_VAR 0 3
37947: PUSH
37948: LD_INT 1
37950: ST_TO_ADDR
// for i = 1 to array1 do
37951: LD_ADDR_VAR 0 4
37955: PUSH
37956: DOUBLE
37957: LD_INT 1
37959: DEC
37960: ST_TO_ADDR
37961: LD_VAR 0 1
37965: PUSH
37966: FOR_TO
37967: IFFALSE 38005
// if array1 [ i ] <> array2 [ i ] then
37969: LD_VAR 0 1
37973: PUSH
37974: LD_VAR 0 4
37978: ARRAY
37979: PUSH
37980: LD_VAR 0 2
37984: PUSH
37985: LD_VAR 0 4
37989: ARRAY
37990: NONEQUAL
37991: IFFALSE 38003
// begin result := false ;
37993: LD_ADDR_VAR 0 3
37997: PUSH
37998: LD_INT 0
38000: ST_TO_ADDR
// break ;
38001: GO 38005
// end ;
38003: GO 37966
38005: POP
38006: POP
// end ;
38007: LD_VAR 0 3
38011: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38012: LD_INT 0
38014: PPUSH
38015: PPUSH
38016: PPUSH
// pom := GetBase ( fac ) ;
38017: LD_ADDR_VAR 0 5
38021: PUSH
38022: LD_VAR 0 1
38026: PPUSH
38027: CALL_OW 274
38031: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38032: LD_ADDR_VAR 0 4
38036: PUSH
38037: LD_VAR 0 2
38041: PUSH
38042: LD_INT 1
38044: ARRAY
38045: PPUSH
38046: LD_VAR 0 2
38050: PUSH
38051: LD_INT 2
38053: ARRAY
38054: PPUSH
38055: LD_VAR 0 2
38059: PUSH
38060: LD_INT 3
38062: ARRAY
38063: PPUSH
38064: LD_VAR 0 2
38068: PUSH
38069: LD_INT 4
38071: ARRAY
38072: PPUSH
38073: CALL_OW 449
38077: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38078: LD_ADDR_VAR 0 3
38082: PUSH
38083: LD_VAR 0 5
38087: PPUSH
38088: LD_INT 1
38090: PPUSH
38091: CALL_OW 275
38095: PUSH
38096: LD_VAR 0 4
38100: PUSH
38101: LD_INT 1
38103: ARRAY
38104: GREATEREQUAL
38105: PUSH
38106: LD_VAR 0 5
38110: PPUSH
38111: LD_INT 2
38113: PPUSH
38114: CALL_OW 275
38118: PUSH
38119: LD_VAR 0 4
38123: PUSH
38124: LD_INT 2
38126: ARRAY
38127: GREATEREQUAL
38128: AND
38129: PUSH
38130: LD_VAR 0 5
38134: PPUSH
38135: LD_INT 3
38137: PPUSH
38138: CALL_OW 275
38142: PUSH
38143: LD_VAR 0 4
38147: PUSH
38148: LD_INT 3
38150: ARRAY
38151: GREATEREQUAL
38152: AND
38153: ST_TO_ADDR
// end ;
38154: LD_VAR 0 3
38158: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38159: LD_INT 0
38161: PPUSH
38162: PPUSH
38163: PPUSH
38164: PPUSH
// pom := GetBase ( building ) ;
38165: LD_ADDR_VAR 0 3
38169: PUSH
38170: LD_VAR 0 1
38174: PPUSH
38175: CALL_OW 274
38179: ST_TO_ADDR
// if not pom then
38180: LD_VAR 0 3
38184: NOT
38185: IFFALSE 38189
// exit ;
38187: GO 38359
// btype := GetBType ( building ) ;
38189: LD_ADDR_VAR 0 5
38193: PUSH
38194: LD_VAR 0 1
38198: PPUSH
38199: CALL_OW 266
38203: ST_TO_ADDR
// if btype = b_armoury then
38204: LD_VAR 0 5
38208: PUSH
38209: LD_INT 4
38211: EQUAL
38212: IFFALSE 38222
// btype := b_barracks ;
38214: LD_ADDR_VAR 0 5
38218: PUSH
38219: LD_INT 5
38221: ST_TO_ADDR
// if btype = b_depot then
38222: LD_VAR 0 5
38226: PUSH
38227: LD_INT 0
38229: EQUAL
38230: IFFALSE 38240
// btype := b_warehouse ;
38232: LD_ADDR_VAR 0 5
38236: PUSH
38237: LD_INT 1
38239: ST_TO_ADDR
// if btype = b_workshop then
38240: LD_VAR 0 5
38244: PUSH
38245: LD_INT 2
38247: EQUAL
38248: IFFALSE 38258
// btype := b_factory ;
38250: LD_ADDR_VAR 0 5
38254: PUSH
38255: LD_INT 3
38257: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38258: LD_ADDR_VAR 0 4
38262: PUSH
38263: LD_VAR 0 5
38267: PPUSH
38268: LD_VAR 0 1
38272: PPUSH
38273: CALL_OW 248
38277: PPUSH
38278: CALL_OW 450
38282: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38283: LD_ADDR_VAR 0 2
38287: PUSH
38288: LD_VAR 0 3
38292: PPUSH
38293: LD_INT 1
38295: PPUSH
38296: CALL_OW 275
38300: PUSH
38301: LD_VAR 0 4
38305: PUSH
38306: LD_INT 1
38308: ARRAY
38309: GREATEREQUAL
38310: PUSH
38311: LD_VAR 0 3
38315: PPUSH
38316: LD_INT 2
38318: PPUSH
38319: CALL_OW 275
38323: PUSH
38324: LD_VAR 0 4
38328: PUSH
38329: LD_INT 2
38331: ARRAY
38332: GREATEREQUAL
38333: AND
38334: PUSH
38335: LD_VAR 0 3
38339: PPUSH
38340: LD_INT 3
38342: PPUSH
38343: CALL_OW 275
38347: PUSH
38348: LD_VAR 0 4
38352: PUSH
38353: LD_INT 3
38355: ARRAY
38356: GREATEREQUAL
38357: AND
38358: ST_TO_ADDR
// end ;
38359: LD_VAR 0 2
38363: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38364: LD_INT 0
38366: PPUSH
38367: PPUSH
38368: PPUSH
// pom := GetBase ( building ) ;
38369: LD_ADDR_VAR 0 4
38373: PUSH
38374: LD_VAR 0 1
38378: PPUSH
38379: CALL_OW 274
38383: ST_TO_ADDR
// if not pom then
38384: LD_VAR 0 4
38388: NOT
38389: IFFALSE 38393
// exit ;
38391: GO 38494
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38393: LD_ADDR_VAR 0 5
38397: PUSH
38398: LD_VAR 0 2
38402: PPUSH
38403: LD_VAR 0 1
38407: PPUSH
38408: CALL_OW 248
38412: PPUSH
38413: CALL_OW 450
38417: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38418: LD_ADDR_VAR 0 3
38422: PUSH
38423: LD_VAR 0 4
38427: PPUSH
38428: LD_INT 1
38430: PPUSH
38431: CALL_OW 275
38435: PUSH
38436: LD_VAR 0 5
38440: PUSH
38441: LD_INT 1
38443: ARRAY
38444: GREATEREQUAL
38445: PUSH
38446: LD_VAR 0 4
38450: PPUSH
38451: LD_INT 2
38453: PPUSH
38454: CALL_OW 275
38458: PUSH
38459: LD_VAR 0 5
38463: PUSH
38464: LD_INT 2
38466: ARRAY
38467: GREATEREQUAL
38468: AND
38469: PUSH
38470: LD_VAR 0 4
38474: PPUSH
38475: LD_INT 3
38477: PPUSH
38478: CALL_OW 275
38482: PUSH
38483: LD_VAR 0 5
38487: PUSH
38488: LD_INT 3
38490: ARRAY
38491: GREATEREQUAL
38492: AND
38493: ST_TO_ADDR
// end ;
38494: LD_VAR 0 3
38498: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38499: LD_INT 0
38501: PPUSH
38502: PPUSH
38503: PPUSH
38504: PPUSH
38505: PPUSH
38506: PPUSH
38507: PPUSH
38508: PPUSH
38509: PPUSH
38510: PPUSH
38511: PPUSH
// result := false ;
38512: LD_ADDR_VAR 0 8
38516: PUSH
38517: LD_INT 0
38519: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38520: LD_VAR 0 5
38524: NOT
38525: PUSH
38526: LD_VAR 0 1
38530: NOT
38531: OR
38532: PUSH
38533: LD_VAR 0 2
38537: NOT
38538: OR
38539: PUSH
38540: LD_VAR 0 3
38544: NOT
38545: OR
38546: IFFALSE 38550
// exit ;
38548: GO 39364
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38550: LD_ADDR_VAR 0 14
38554: PUSH
38555: LD_VAR 0 1
38559: PPUSH
38560: LD_VAR 0 2
38564: PPUSH
38565: LD_VAR 0 3
38569: PPUSH
38570: LD_VAR 0 4
38574: PPUSH
38575: LD_VAR 0 5
38579: PUSH
38580: LD_INT 1
38582: ARRAY
38583: PPUSH
38584: CALL_OW 248
38588: PPUSH
38589: LD_INT 0
38591: PPUSH
38592: CALL 40597 0 6
38596: ST_TO_ADDR
// if not hexes then
38597: LD_VAR 0 14
38601: NOT
38602: IFFALSE 38606
// exit ;
38604: GO 39364
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38606: LD_ADDR_VAR 0 17
38610: PUSH
38611: LD_VAR 0 5
38615: PPUSH
38616: LD_INT 22
38618: PUSH
38619: LD_VAR 0 13
38623: PPUSH
38624: CALL_OW 255
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 2
38635: PUSH
38636: LD_INT 30
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 30
38648: PUSH
38649: LD_INT 1
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: LIST
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PPUSH
38665: CALL_OW 72
38669: ST_TO_ADDR
// for i = 1 to hexes do
38670: LD_ADDR_VAR 0 9
38674: PUSH
38675: DOUBLE
38676: LD_INT 1
38678: DEC
38679: ST_TO_ADDR
38680: LD_VAR 0 14
38684: PUSH
38685: FOR_TO
38686: IFFALSE 39362
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38688: LD_ADDR_VAR 0 13
38692: PUSH
38693: LD_VAR 0 14
38697: PUSH
38698: LD_VAR 0 9
38702: ARRAY
38703: PUSH
38704: LD_INT 1
38706: ARRAY
38707: PPUSH
38708: LD_VAR 0 14
38712: PUSH
38713: LD_VAR 0 9
38717: ARRAY
38718: PUSH
38719: LD_INT 2
38721: ARRAY
38722: PPUSH
38723: CALL_OW 428
38727: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38728: LD_VAR 0 14
38732: PUSH
38733: LD_VAR 0 9
38737: ARRAY
38738: PUSH
38739: LD_INT 1
38741: ARRAY
38742: PPUSH
38743: LD_VAR 0 14
38747: PUSH
38748: LD_VAR 0 9
38752: ARRAY
38753: PUSH
38754: LD_INT 2
38756: ARRAY
38757: PPUSH
38758: CALL_OW 351
38762: PUSH
38763: LD_VAR 0 14
38767: PUSH
38768: LD_VAR 0 9
38772: ARRAY
38773: PUSH
38774: LD_INT 1
38776: ARRAY
38777: PPUSH
38778: LD_VAR 0 14
38782: PUSH
38783: LD_VAR 0 9
38787: ARRAY
38788: PUSH
38789: LD_INT 2
38791: ARRAY
38792: PPUSH
38793: CALL_OW 488
38797: NOT
38798: OR
38799: PUSH
38800: LD_VAR 0 13
38804: PPUSH
38805: CALL_OW 247
38809: PUSH
38810: LD_INT 3
38812: EQUAL
38813: OR
38814: IFFALSE 38820
// exit ;
38816: POP
38817: POP
38818: GO 39364
// if not tmp then
38820: LD_VAR 0 13
38824: NOT
38825: IFFALSE 38829
// continue ;
38827: GO 38685
// result := true ;
38829: LD_ADDR_VAR 0 8
38833: PUSH
38834: LD_INT 1
38836: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38837: LD_VAR 0 6
38841: PUSH
38842: LD_VAR 0 13
38846: PPUSH
38847: CALL_OW 247
38851: PUSH
38852: LD_INT 2
38854: EQUAL
38855: AND
38856: PUSH
38857: LD_VAR 0 13
38861: PPUSH
38862: CALL_OW 263
38866: PUSH
38867: LD_INT 1
38869: EQUAL
38870: AND
38871: IFFALSE 39035
// begin if IsDrivenBy ( tmp ) then
38873: LD_VAR 0 13
38877: PPUSH
38878: CALL_OW 311
38882: IFFALSE 38886
// continue ;
38884: GO 38685
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38886: LD_VAR 0 6
38890: PPUSH
38891: LD_INT 3
38893: PUSH
38894: LD_INT 60
38896: PUSH
38897: EMPTY
38898: LIST
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 3
38906: PUSH
38907: LD_INT 55
38909: PUSH
38910: EMPTY
38911: LIST
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PPUSH
38921: CALL_OW 72
38925: IFFALSE 39033
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38927: LD_ADDR_VAR 0 18
38931: PUSH
38932: LD_VAR 0 6
38936: PPUSH
38937: LD_INT 3
38939: PUSH
38940: LD_INT 60
38942: PUSH
38943: EMPTY
38944: LIST
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 3
38952: PUSH
38953: LD_INT 55
38955: PUSH
38956: EMPTY
38957: LIST
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PPUSH
38967: CALL_OW 72
38971: PUSH
38972: LD_INT 1
38974: ARRAY
38975: ST_TO_ADDR
// if IsInUnit ( driver ) then
38976: LD_VAR 0 18
38980: PPUSH
38981: CALL_OW 310
38985: IFFALSE 38996
// ComExit ( driver ) ;
38987: LD_VAR 0 18
38991: PPUSH
38992: CALL 64358 0 1
// AddComEnterUnit ( driver , tmp ) ;
38996: LD_VAR 0 18
39000: PPUSH
39001: LD_VAR 0 13
39005: PPUSH
39006: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39010: LD_VAR 0 18
39014: PPUSH
39015: LD_VAR 0 7
39019: PPUSH
39020: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39024: LD_VAR 0 18
39028: PPUSH
39029: CALL_OW 181
// end ; continue ;
39033: GO 38685
// end ; if not cleaners or not tmp in cleaners then
39035: LD_VAR 0 6
39039: NOT
39040: PUSH
39041: LD_VAR 0 13
39045: PUSH
39046: LD_VAR 0 6
39050: IN
39051: NOT
39052: OR
39053: IFFALSE 39360
// begin if dep then
39055: LD_VAR 0 17
39059: IFFALSE 39195
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39061: LD_ADDR_VAR 0 16
39065: PUSH
39066: LD_VAR 0 17
39070: PUSH
39071: LD_INT 1
39073: ARRAY
39074: PPUSH
39075: CALL_OW 250
39079: PPUSH
39080: LD_VAR 0 17
39084: PUSH
39085: LD_INT 1
39087: ARRAY
39088: PPUSH
39089: CALL_OW 254
39093: PPUSH
39094: LD_INT 5
39096: PPUSH
39097: CALL_OW 272
39101: PUSH
39102: LD_VAR 0 17
39106: PUSH
39107: LD_INT 1
39109: ARRAY
39110: PPUSH
39111: CALL_OW 251
39115: PPUSH
39116: LD_VAR 0 17
39120: PUSH
39121: LD_INT 1
39123: ARRAY
39124: PPUSH
39125: CALL_OW 254
39129: PPUSH
39130: LD_INT 5
39132: PPUSH
39133: CALL_OW 273
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39142: LD_VAR 0 16
39146: PUSH
39147: LD_INT 1
39149: ARRAY
39150: PPUSH
39151: LD_VAR 0 16
39155: PUSH
39156: LD_INT 2
39158: ARRAY
39159: PPUSH
39160: CALL_OW 488
39164: IFFALSE 39195
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39166: LD_VAR 0 13
39170: PPUSH
39171: LD_VAR 0 16
39175: PUSH
39176: LD_INT 1
39178: ARRAY
39179: PPUSH
39180: LD_VAR 0 16
39184: PUSH
39185: LD_INT 2
39187: ARRAY
39188: PPUSH
39189: CALL_OW 111
// continue ;
39193: GO 38685
// end ; end ; r := GetDir ( tmp ) ;
39195: LD_ADDR_VAR 0 15
39199: PUSH
39200: LD_VAR 0 13
39204: PPUSH
39205: CALL_OW 254
39209: ST_TO_ADDR
// if r = 5 then
39210: LD_VAR 0 15
39214: PUSH
39215: LD_INT 5
39217: EQUAL
39218: IFFALSE 39228
// r := 0 ;
39220: LD_ADDR_VAR 0 15
39224: PUSH
39225: LD_INT 0
39227: ST_TO_ADDR
// for j = r to 5 do
39228: LD_ADDR_VAR 0 10
39232: PUSH
39233: DOUBLE
39234: LD_VAR 0 15
39238: DEC
39239: ST_TO_ADDR
39240: LD_INT 5
39242: PUSH
39243: FOR_TO
39244: IFFALSE 39358
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39246: LD_ADDR_VAR 0 11
39250: PUSH
39251: LD_VAR 0 13
39255: PPUSH
39256: CALL_OW 250
39260: PPUSH
39261: LD_VAR 0 10
39265: PPUSH
39266: LD_INT 2
39268: PPUSH
39269: CALL_OW 272
39273: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39274: LD_ADDR_VAR 0 12
39278: PUSH
39279: LD_VAR 0 13
39283: PPUSH
39284: CALL_OW 251
39288: PPUSH
39289: LD_VAR 0 10
39293: PPUSH
39294: LD_INT 2
39296: PPUSH
39297: CALL_OW 273
39301: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39302: LD_VAR 0 11
39306: PPUSH
39307: LD_VAR 0 12
39311: PPUSH
39312: CALL_OW 488
39316: PUSH
39317: LD_VAR 0 11
39321: PPUSH
39322: LD_VAR 0 12
39326: PPUSH
39327: CALL_OW 428
39331: NOT
39332: AND
39333: IFFALSE 39356
// begin ComMoveXY ( tmp , _x , _y ) ;
39335: LD_VAR 0 13
39339: PPUSH
39340: LD_VAR 0 11
39344: PPUSH
39345: LD_VAR 0 12
39349: PPUSH
39350: CALL_OW 111
// break ;
39354: GO 39358
// end ; end ;
39356: GO 39243
39358: POP
39359: POP
// end ; end ;
39360: GO 38685
39362: POP
39363: POP
// end ;
39364: LD_VAR 0 8
39368: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39369: LD_INT 0
39371: PPUSH
// result := true ;
39372: LD_ADDR_VAR 0 3
39376: PUSH
39377: LD_INT 1
39379: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39380: LD_VAR 0 2
39384: PUSH
39385: LD_INT 24
39387: DOUBLE
39388: EQUAL
39389: IFTRUE 39399
39391: LD_INT 33
39393: DOUBLE
39394: EQUAL
39395: IFTRUE 39399
39397: GO 39424
39399: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39400: LD_ADDR_VAR 0 3
39404: PUSH
39405: LD_INT 32
39407: PPUSH
39408: LD_VAR 0 1
39412: PPUSH
39413: CALL_OW 321
39417: PUSH
39418: LD_INT 2
39420: EQUAL
39421: ST_TO_ADDR
39422: GO 39740
39424: LD_INT 20
39426: DOUBLE
39427: EQUAL
39428: IFTRUE 39432
39430: GO 39457
39432: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39433: LD_ADDR_VAR 0 3
39437: PUSH
39438: LD_INT 6
39440: PPUSH
39441: LD_VAR 0 1
39445: PPUSH
39446: CALL_OW 321
39450: PUSH
39451: LD_INT 2
39453: EQUAL
39454: ST_TO_ADDR
39455: GO 39740
39457: LD_INT 22
39459: DOUBLE
39460: EQUAL
39461: IFTRUE 39471
39463: LD_INT 36
39465: DOUBLE
39466: EQUAL
39467: IFTRUE 39471
39469: GO 39496
39471: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39472: LD_ADDR_VAR 0 3
39476: PUSH
39477: LD_INT 15
39479: PPUSH
39480: LD_VAR 0 1
39484: PPUSH
39485: CALL_OW 321
39489: PUSH
39490: LD_INT 2
39492: EQUAL
39493: ST_TO_ADDR
39494: GO 39740
39496: LD_INT 30
39498: DOUBLE
39499: EQUAL
39500: IFTRUE 39504
39502: GO 39529
39504: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39505: LD_ADDR_VAR 0 3
39509: PUSH
39510: LD_INT 20
39512: PPUSH
39513: LD_VAR 0 1
39517: PPUSH
39518: CALL_OW 321
39522: PUSH
39523: LD_INT 2
39525: EQUAL
39526: ST_TO_ADDR
39527: GO 39740
39529: LD_INT 28
39531: DOUBLE
39532: EQUAL
39533: IFTRUE 39543
39535: LD_INT 21
39537: DOUBLE
39538: EQUAL
39539: IFTRUE 39543
39541: GO 39568
39543: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39544: LD_ADDR_VAR 0 3
39548: PUSH
39549: LD_INT 21
39551: PPUSH
39552: LD_VAR 0 1
39556: PPUSH
39557: CALL_OW 321
39561: PUSH
39562: LD_INT 2
39564: EQUAL
39565: ST_TO_ADDR
39566: GO 39740
39568: LD_INT 16
39570: DOUBLE
39571: EQUAL
39572: IFTRUE 39576
39574: GO 39601
39576: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39577: LD_ADDR_VAR 0 3
39581: PUSH
39582: LD_INT 84
39584: PPUSH
39585: LD_VAR 0 1
39589: PPUSH
39590: CALL_OW 321
39594: PUSH
39595: LD_INT 2
39597: EQUAL
39598: ST_TO_ADDR
39599: GO 39740
39601: LD_INT 19
39603: DOUBLE
39604: EQUAL
39605: IFTRUE 39615
39607: LD_INT 23
39609: DOUBLE
39610: EQUAL
39611: IFTRUE 39615
39613: GO 39640
39615: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39616: LD_ADDR_VAR 0 3
39620: PUSH
39621: LD_INT 83
39623: PPUSH
39624: LD_VAR 0 1
39628: PPUSH
39629: CALL_OW 321
39633: PUSH
39634: LD_INT 2
39636: EQUAL
39637: ST_TO_ADDR
39638: GO 39740
39640: LD_INT 17
39642: DOUBLE
39643: EQUAL
39644: IFTRUE 39648
39646: GO 39673
39648: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39649: LD_ADDR_VAR 0 3
39653: PUSH
39654: LD_INT 39
39656: PPUSH
39657: LD_VAR 0 1
39661: PPUSH
39662: CALL_OW 321
39666: PUSH
39667: LD_INT 2
39669: EQUAL
39670: ST_TO_ADDR
39671: GO 39740
39673: LD_INT 18
39675: DOUBLE
39676: EQUAL
39677: IFTRUE 39681
39679: GO 39706
39681: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39682: LD_ADDR_VAR 0 3
39686: PUSH
39687: LD_INT 40
39689: PPUSH
39690: LD_VAR 0 1
39694: PPUSH
39695: CALL_OW 321
39699: PUSH
39700: LD_INT 2
39702: EQUAL
39703: ST_TO_ADDR
39704: GO 39740
39706: LD_INT 27
39708: DOUBLE
39709: EQUAL
39710: IFTRUE 39714
39712: GO 39739
39714: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39715: LD_ADDR_VAR 0 3
39719: PUSH
39720: LD_INT 35
39722: PPUSH
39723: LD_VAR 0 1
39727: PPUSH
39728: CALL_OW 321
39732: PUSH
39733: LD_INT 2
39735: EQUAL
39736: ST_TO_ADDR
39737: GO 39740
39739: POP
// end ;
39740: LD_VAR 0 3
39744: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39745: LD_INT 0
39747: PPUSH
39748: PPUSH
39749: PPUSH
39750: PPUSH
39751: PPUSH
39752: PPUSH
39753: PPUSH
39754: PPUSH
39755: PPUSH
39756: PPUSH
39757: PPUSH
// result := false ;
39758: LD_ADDR_VAR 0 6
39762: PUSH
39763: LD_INT 0
39765: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39766: LD_VAR 0 1
39770: NOT
39771: PUSH
39772: LD_VAR 0 1
39776: PPUSH
39777: CALL_OW 266
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: IN
39792: NOT
39793: OR
39794: PUSH
39795: LD_VAR 0 2
39799: NOT
39800: OR
39801: PUSH
39802: LD_VAR 0 5
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: LD_INT 1
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: LD_INT 3
39818: PUSH
39819: LD_INT 4
39821: PUSH
39822: LD_INT 5
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: IN
39833: NOT
39834: OR
39835: PUSH
39836: LD_VAR 0 3
39840: PPUSH
39841: LD_VAR 0 4
39845: PPUSH
39846: CALL_OW 488
39850: NOT
39851: OR
39852: IFFALSE 39856
// exit ;
39854: GO 40592
// side := GetSide ( depot ) ;
39856: LD_ADDR_VAR 0 9
39860: PUSH
39861: LD_VAR 0 1
39865: PPUSH
39866: CALL_OW 255
39870: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39871: LD_VAR 0 9
39875: PPUSH
39876: LD_VAR 0 2
39880: PPUSH
39881: CALL 39369 0 2
39885: NOT
39886: IFFALSE 39890
// exit ;
39888: GO 40592
// pom := GetBase ( depot ) ;
39890: LD_ADDR_VAR 0 10
39894: PUSH
39895: LD_VAR 0 1
39899: PPUSH
39900: CALL_OW 274
39904: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39905: LD_ADDR_VAR 0 11
39909: PUSH
39910: LD_VAR 0 2
39914: PPUSH
39915: LD_VAR 0 1
39919: PPUSH
39920: CALL_OW 248
39924: PPUSH
39925: CALL_OW 450
39929: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39930: LD_VAR 0 10
39934: PPUSH
39935: LD_INT 1
39937: PPUSH
39938: CALL_OW 275
39942: PUSH
39943: LD_VAR 0 11
39947: PUSH
39948: LD_INT 1
39950: ARRAY
39951: GREATEREQUAL
39952: PUSH
39953: LD_VAR 0 10
39957: PPUSH
39958: LD_INT 2
39960: PPUSH
39961: CALL_OW 275
39965: PUSH
39966: LD_VAR 0 11
39970: PUSH
39971: LD_INT 2
39973: ARRAY
39974: GREATEREQUAL
39975: AND
39976: PUSH
39977: LD_VAR 0 10
39981: PPUSH
39982: LD_INT 3
39984: PPUSH
39985: CALL_OW 275
39989: PUSH
39990: LD_VAR 0 11
39994: PUSH
39995: LD_INT 3
39997: ARRAY
39998: GREATEREQUAL
39999: AND
40000: NOT
40001: IFFALSE 40005
// exit ;
40003: GO 40592
// if GetBType ( depot ) = b_depot then
40005: LD_VAR 0 1
40009: PPUSH
40010: CALL_OW 266
40014: PUSH
40015: LD_INT 0
40017: EQUAL
40018: IFFALSE 40030
// dist := 28 else
40020: LD_ADDR_VAR 0 14
40024: PUSH
40025: LD_INT 28
40027: ST_TO_ADDR
40028: GO 40038
// dist := 36 ;
40030: LD_ADDR_VAR 0 14
40034: PUSH
40035: LD_INT 36
40037: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40038: LD_VAR 0 1
40042: PPUSH
40043: LD_VAR 0 3
40047: PPUSH
40048: LD_VAR 0 4
40052: PPUSH
40053: CALL_OW 297
40057: PUSH
40058: LD_VAR 0 14
40062: GREATER
40063: IFFALSE 40067
// exit ;
40065: GO 40592
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40067: LD_ADDR_VAR 0 12
40071: PUSH
40072: LD_VAR 0 2
40076: PPUSH
40077: LD_VAR 0 3
40081: PPUSH
40082: LD_VAR 0 4
40086: PPUSH
40087: LD_VAR 0 5
40091: PPUSH
40092: LD_VAR 0 1
40096: PPUSH
40097: CALL_OW 248
40101: PPUSH
40102: LD_INT 0
40104: PPUSH
40105: CALL 40597 0 6
40109: ST_TO_ADDR
// if not hexes then
40110: LD_VAR 0 12
40114: NOT
40115: IFFALSE 40119
// exit ;
40117: GO 40592
// hex := GetHexInfo ( x , y ) ;
40119: LD_ADDR_VAR 0 15
40123: PUSH
40124: LD_VAR 0 3
40128: PPUSH
40129: LD_VAR 0 4
40133: PPUSH
40134: CALL_OW 546
40138: ST_TO_ADDR
// if hex [ 1 ] then
40139: LD_VAR 0 15
40143: PUSH
40144: LD_INT 1
40146: ARRAY
40147: IFFALSE 40151
// exit ;
40149: GO 40592
// height := hex [ 2 ] ;
40151: LD_ADDR_VAR 0 13
40155: PUSH
40156: LD_VAR 0 15
40160: PUSH
40161: LD_INT 2
40163: ARRAY
40164: ST_TO_ADDR
// for i = 1 to hexes do
40165: LD_ADDR_VAR 0 7
40169: PUSH
40170: DOUBLE
40171: LD_INT 1
40173: DEC
40174: ST_TO_ADDR
40175: LD_VAR 0 12
40179: PUSH
40180: FOR_TO
40181: IFFALSE 40511
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40183: LD_VAR 0 12
40187: PUSH
40188: LD_VAR 0 7
40192: ARRAY
40193: PUSH
40194: LD_INT 1
40196: ARRAY
40197: PPUSH
40198: LD_VAR 0 12
40202: PUSH
40203: LD_VAR 0 7
40207: ARRAY
40208: PUSH
40209: LD_INT 2
40211: ARRAY
40212: PPUSH
40213: CALL_OW 488
40217: NOT
40218: PUSH
40219: LD_VAR 0 12
40223: PUSH
40224: LD_VAR 0 7
40228: ARRAY
40229: PUSH
40230: LD_INT 1
40232: ARRAY
40233: PPUSH
40234: LD_VAR 0 12
40238: PUSH
40239: LD_VAR 0 7
40243: ARRAY
40244: PUSH
40245: LD_INT 2
40247: ARRAY
40248: PPUSH
40249: CALL_OW 428
40253: PUSH
40254: LD_INT 0
40256: GREATER
40257: OR
40258: PUSH
40259: LD_VAR 0 12
40263: PUSH
40264: LD_VAR 0 7
40268: ARRAY
40269: PUSH
40270: LD_INT 1
40272: ARRAY
40273: PPUSH
40274: LD_VAR 0 12
40278: PUSH
40279: LD_VAR 0 7
40283: ARRAY
40284: PUSH
40285: LD_INT 2
40287: ARRAY
40288: PPUSH
40289: CALL_OW 351
40293: OR
40294: IFFALSE 40300
// exit ;
40296: POP
40297: POP
40298: GO 40592
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40300: LD_ADDR_VAR 0 8
40304: PUSH
40305: LD_VAR 0 12
40309: PUSH
40310: LD_VAR 0 7
40314: ARRAY
40315: PUSH
40316: LD_INT 1
40318: ARRAY
40319: PPUSH
40320: LD_VAR 0 12
40324: PUSH
40325: LD_VAR 0 7
40329: ARRAY
40330: PUSH
40331: LD_INT 2
40333: ARRAY
40334: PPUSH
40335: CALL_OW 546
40339: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40340: LD_VAR 0 8
40344: PUSH
40345: LD_INT 1
40347: ARRAY
40348: PUSH
40349: LD_VAR 0 8
40353: PUSH
40354: LD_INT 2
40356: ARRAY
40357: PUSH
40358: LD_VAR 0 13
40362: PUSH
40363: LD_INT 2
40365: PLUS
40366: GREATER
40367: OR
40368: PUSH
40369: LD_VAR 0 8
40373: PUSH
40374: LD_INT 2
40376: ARRAY
40377: PUSH
40378: LD_VAR 0 13
40382: PUSH
40383: LD_INT 2
40385: MINUS
40386: LESS
40387: OR
40388: PUSH
40389: LD_VAR 0 8
40393: PUSH
40394: LD_INT 3
40396: ARRAY
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: LD_INT 8
40403: PUSH
40404: LD_INT 9
40406: PUSH
40407: LD_INT 10
40409: PUSH
40410: LD_INT 11
40412: PUSH
40413: LD_INT 12
40415: PUSH
40416: LD_INT 13
40418: PUSH
40419: LD_INT 16
40421: PUSH
40422: LD_INT 17
40424: PUSH
40425: LD_INT 18
40427: PUSH
40428: LD_INT 19
40430: PUSH
40431: LD_INT 20
40433: PUSH
40434: LD_INT 21
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: IN
40452: NOT
40453: OR
40454: PUSH
40455: LD_VAR 0 8
40459: PUSH
40460: LD_INT 5
40462: ARRAY
40463: NOT
40464: OR
40465: PUSH
40466: LD_VAR 0 8
40470: PUSH
40471: LD_INT 6
40473: ARRAY
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: LD_INT 2
40480: PUSH
40481: LD_INT 7
40483: PUSH
40484: LD_INT 9
40486: PUSH
40487: LD_INT 10
40489: PUSH
40490: LD_INT 11
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: IN
40501: NOT
40502: OR
40503: IFFALSE 40509
// exit ;
40505: POP
40506: POP
40507: GO 40592
// end ;
40509: GO 40180
40511: POP
40512: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40513: LD_VAR 0 9
40517: PPUSH
40518: LD_VAR 0 3
40522: PPUSH
40523: LD_VAR 0 4
40527: PPUSH
40528: LD_INT 20
40530: PPUSH
40531: CALL 32544 0 4
40535: PUSH
40536: LD_INT 4
40538: ARRAY
40539: IFFALSE 40543
// exit ;
40541: GO 40592
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40543: LD_VAR 0 2
40547: PUSH
40548: LD_INT 29
40550: PUSH
40551: LD_INT 30
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: IN
40558: PUSH
40559: LD_VAR 0 3
40563: PPUSH
40564: LD_VAR 0 4
40568: PPUSH
40569: LD_VAR 0 9
40573: PPUSH
40574: CALL_OW 440
40578: NOT
40579: AND
40580: IFFALSE 40584
// exit ;
40582: GO 40592
// result := true ;
40584: LD_ADDR_VAR 0 6
40588: PUSH
40589: LD_INT 1
40591: ST_TO_ADDR
// end ;
40592: LD_VAR 0 6
40596: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40597: LD_INT 0
40599: PPUSH
40600: PPUSH
40601: PPUSH
40602: PPUSH
40603: PPUSH
40604: PPUSH
40605: PPUSH
40606: PPUSH
40607: PPUSH
40608: PPUSH
40609: PPUSH
40610: PPUSH
40611: PPUSH
40612: PPUSH
40613: PPUSH
40614: PPUSH
40615: PPUSH
40616: PPUSH
40617: PPUSH
40618: PPUSH
40619: PPUSH
40620: PPUSH
40621: PPUSH
40622: PPUSH
40623: PPUSH
40624: PPUSH
40625: PPUSH
40626: PPUSH
40627: PPUSH
40628: PPUSH
40629: PPUSH
40630: PPUSH
40631: PPUSH
40632: PPUSH
40633: PPUSH
40634: PPUSH
40635: PPUSH
40636: PPUSH
40637: PPUSH
40638: PPUSH
40639: PPUSH
40640: PPUSH
40641: PPUSH
40642: PPUSH
40643: PPUSH
40644: PPUSH
40645: PPUSH
40646: PPUSH
40647: PPUSH
40648: PPUSH
40649: PPUSH
40650: PPUSH
40651: PPUSH
40652: PPUSH
40653: PPUSH
40654: PPUSH
40655: PPUSH
40656: PPUSH
// result = [ ] ;
40657: LD_ADDR_VAR 0 7
40661: PUSH
40662: EMPTY
40663: ST_TO_ADDR
// temp_list = [ ] ;
40664: LD_ADDR_VAR 0 9
40668: PUSH
40669: EMPTY
40670: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40671: LD_VAR 0 4
40675: PUSH
40676: LD_INT 0
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: LD_INT 2
40684: PUSH
40685: LD_INT 3
40687: PUSH
40688: LD_INT 4
40690: PUSH
40691: LD_INT 5
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: IN
40702: NOT
40703: PUSH
40704: LD_VAR 0 1
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: IN
40719: PUSH
40720: LD_VAR 0 5
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: LD_INT 2
40730: PUSH
40731: LD_INT 3
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: LIST
40738: IN
40739: NOT
40740: AND
40741: OR
40742: IFFALSE 40746
// exit ;
40744: GO 59137
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40746: LD_VAR 0 1
40750: PUSH
40751: LD_INT 6
40753: PUSH
40754: LD_INT 7
40756: PUSH
40757: LD_INT 8
40759: PUSH
40760: LD_INT 13
40762: PUSH
40763: LD_INT 12
40765: PUSH
40766: LD_INT 15
40768: PUSH
40769: LD_INT 11
40771: PUSH
40772: LD_INT 14
40774: PUSH
40775: LD_INT 10
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: IN
40789: IFFALSE 40799
// btype = b_lab ;
40791: LD_ADDR_VAR 0 1
40795: PUSH
40796: LD_INT 6
40798: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40799: LD_VAR 0 6
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: LIST
40817: IN
40818: NOT
40819: PUSH
40820: LD_VAR 0 1
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: LD_INT 2
40833: PUSH
40834: LD_INT 3
40836: PUSH
40837: LD_INT 6
40839: PUSH
40840: LD_INT 36
40842: PUSH
40843: LD_INT 4
40845: PUSH
40846: LD_INT 5
40848: PUSH
40849: LD_INT 31
40851: PUSH
40852: LD_INT 32
40854: PUSH
40855: LD_INT 33
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: IN
40871: NOT
40872: PUSH
40873: LD_VAR 0 6
40877: PUSH
40878: LD_INT 1
40880: EQUAL
40881: AND
40882: OR
40883: PUSH
40884: LD_VAR 0 1
40888: PUSH
40889: LD_INT 2
40891: PUSH
40892: LD_INT 3
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: IN
40899: NOT
40900: PUSH
40901: LD_VAR 0 6
40905: PUSH
40906: LD_INT 2
40908: EQUAL
40909: AND
40910: OR
40911: IFFALSE 40921
// mode = 0 ;
40913: LD_ADDR_VAR 0 6
40917: PUSH
40918: LD_INT 0
40920: ST_TO_ADDR
// case mode of 0 :
40921: LD_VAR 0 6
40925: PUSH
40926: LD_INT 0
40928: DOUBLE
40929: EQUAL
40930: IFTRUE 40934
40932: GO 52387
40934: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40935: LD_ADDR_VAR 0 11
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: LD_INT 0
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: LD_INT 1
40955: NEG
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 1
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: LD_INT 1
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: LD_INT 1
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: LD_INT 2
41020: NEG
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: LD_INT 2
41031: NEG
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 1
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: LD_INT 2
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: LD_INT 3
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: LD_INT 3
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: LD_INT 2
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41128: LD_ADDR_VAR 0 12
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: LD_INT 1
41148: NEG
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: LD_INT 1
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 1
41186: NEG
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 1
41197: NEG
41198: PUSH
41199: LD_INT 1
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 1
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 2
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 2
41251: NEG
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 2
41262: NEG
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 2
41274: NEG
41275: PUSH
41276: LD_INT 1
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 3
41285: NEG
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 3
41296: NEG
41297: PUSH
41298: LD_INT 1
41300: NEG
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41324: LD_ADDR_VAR 0 13
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: LD_INT 1
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 1
41405: NEG
41406: PUSH
41407: LD_INT 2
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 2
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 2
41427: PUSH
41428: LD_INT 2
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 1
41437: PUSH
41438: LD_INT 2
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 2
41447: NEG
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 2
41459: NEG
41460: PUSH
41461: LD_INT 2
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 2
41471: NEG
41472: PUSH
41473: LD_INT 3
41475: NEG
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 3
41483: NEG
41484: PUSH
41485: LD_INT 2
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 3
41495: NEG
41496: PUSH
41497: LD_INT 3
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41523: LD_ADDR_VAR 0 14
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: NEG
41605: PUSH
41606: LD_INT 2
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: LD_INT 2
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 1
41627: PUSH
41628: LD_INT 1
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: LD_INT 2
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: LD_INT 2
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: LD_INT 3
41673: NEG
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: LD_INT 3
41684: NEG
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: LD_INT 2
41695: NEG
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41719: LD_ADDR_VAR 0 15
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: LD_INT 1
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: NEG
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: LD_INT 1
41803: NEG
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 2
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 2
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 2
41842: NEG
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 2
41853: NEG
41854: PUSH
41855: LD_INT 1
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 2
41865: PUSH
41866: LD_INT 1
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 3
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 3
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41912: LD_ADDR_VAR 0 16
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: LD_INT 0
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 1
41970: NEG
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: NEG
41994: PUSH
41995: LD_INT 2
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 2
42005: PUSH
42006: LD_INT 1
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 2
42015: PUSH
42016: LD_INT 2
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: LD_INT 2
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 2
42035: NEG
42036: PUSH
42037: LD_INT 1
42039: NEG
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 2
42047: NEG
42048: PUSH
42049: LD_INT 2
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 3
42059: PUSH
42060: LD_INT 2
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 3
42069: PUSH
42070: LD_INT 3
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 2
42079: PUSH
42080: LD_INT 3
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42105: LD_ADDR_VAR 0 17
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: LD_INT 1
42125: NEG
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 1
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: NEG
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: NEG
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: LD_INT 2
42190: NEG
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: LD_INT 1
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 2
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 2
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: LD_INT 2
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: LD_INT 2
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 2
42281: NEG
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 2
42292: NEG
42293: PUSH
42294: LD_INT 1
42296: NEG
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 2
42304: NEG
42305: PUSH
42306: LD_INT 2
42308: NEG
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42335: LD_ADDR_VAR 0 18
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: LD_INT 2
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 2
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: LD_INT 1
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 2
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 2
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 2
42470: PUSH
42471: LD_INT 2
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: LD_INT 2
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: LD_INT 2
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 2
42511: NEG
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 2
42522: NEG
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 2
42534: NEG
42535: PUSH
42536: LD_INT 2
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42565: LD_ADDR_VAR 0 19
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: LD_INT 1
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: LD_INT 2
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: LD_INT 2
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: LD_INT 1
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 2
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 2
42700: PUSH
42701: LD_INT 2
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: LD_INT 2
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 2
42741: NEG
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 2
42752: NEG
42753: PUSH
42754: LD_INT 1
42756: NEG
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 2
42764: NEG
42765: PUSH
42766: LD_INT 2
42768: NEG
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42795: LD_ADDR_VAR 0 20
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: NEG
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 1
42864: NEG
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: LD_INT 2
42880: NEG
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: LD_INT 2
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: PUSH
42900: LD_INT 1
42902: NEG
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 2
42910: PUSH
42911: LD_INT 0
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 2
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 2
42930: PUSH
42931: LD_INT 2
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: LD_INT 2
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: LD_INT 2
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 2
42971: NEG
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 2
42982: NEG
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 2
42994: NEG
42995: PUSH
42996: LD_INT 2
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43025: LD_ADDR_VAR 0 21
43029: PUSH
43030: LD_INT 0
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: LD_INT 1
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 1
43083: NEG
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: LD_INT 1
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PUSH
43108: LD_INT 2
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 2
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 2
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 2
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 2
43160: PUSH
43161: LD_INT 2
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: LD_INT 2
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: LD_INT 2
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: LD_INT 1
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 2
43201: NEG
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 2
43212: NEG
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 2
43224: NEG
43225: PUSH
43226: LD_INT 2
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43255: LD_ADDR_VAR 0 22
43259: PUSH
43260: LD_INT 0
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 1
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: LD_INT 0
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: LD_INT 1
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: LD_INT 2
43340: NEG
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: LD_INT 2
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 2
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 2
43380: PUSH
43381: LD_INT 1
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: LD_INT 2
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: LD_INT 2
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 2
43442: NEG
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 2
43454: NEG
43455: PUSH
43456: LD_INT 2
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43485: LD_ADDR_VAR 0 23
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: LD_INT 1
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: LD_INT 1
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: NEG
43567: PUSH
43568: LD_INT 2
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 2
43600: PUSH
43601: LD_INT 0
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 2
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 2
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: LD_INT 2
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: LD_INT 2
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 2
43661: NEG
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 2
43684: NEG
43685: PUSH
43686: LD_INT 2
43688: NEG
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 2
43696: NEG
43697: PUSH
43698: LD_INT 3
43700: NEG
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: PUSH
43710: LD_INT 3
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: LD_INT 2
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43765: LD_ADDR_VAR 0 24
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 2
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 2
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 2
43900: PUSH
43901: LD_INT 2
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 2
43952: NEG
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 2
43964: NEG
43965: PUSH
43966: LD_INT 2
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: LD_INT 2
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 3
43998: PUSH
43999: LD_INT 1
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 3
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44041: LD_ADDR_VAR 0 25
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: LD_INT 2
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 2
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: LD_INT 2
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: LD_INT 2
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: LD_INT 2
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 2
44217: NEG
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 2
44228: NEG
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: LD_INT 2
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 3
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 3
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 2
44272: PUSH
44273: LD_INT 3
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: LD_INT 3
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44315: LD_ADDR_VAR 0 26
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: LD_INT 1
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 1
44396: NEG
44397: PUSH
44398: LD_INT 2
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: LD_INT 2
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 2
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 2
44450: PUSH
44451: LD_INT 2
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: LD_INT 2
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 2
44491: NEG
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 2
44502: NEG
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 2
44514: NEG
44515: PUSH
44516: LD_INT 2
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: LD_INT 3
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: LD_INT 3
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 2
44557: NEG
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44591: LD_ADDR_VAR 0 27
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: LD_INT 2
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: LD_INT 2
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 2
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 2
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: LD_INT 2
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: LD_INT 2
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: LD_INT 2
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: LD_INT 2
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 2
44813: NEG
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 3
44824: NEG
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 3
44836: NEG
44837: PUSH
44838: LD_INT 2
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44871: LD_ADDR_VAR 0 28
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: NEG
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 1
44940: NEG
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: LD_INT 2
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 2
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: LD_INT 2
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: LD_INT 2
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 2
45047: NEG
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: LD_INT 1
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 2
45070: NEG
45071: PUSH
45072: LD_INT 2
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 2
45082: NEG
45083: PUSH
45084: LD_INT 3
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: LD_INT 3
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 3
45106: NEG
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 3
45118: NEG
45119: PUSH
45120: LD_INT 2
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45153: LD_ADDR_VAR 0 29
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: LD_INT 2
45249: NEG
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: LD_INT 2
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: LD_INT 2
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 2
45331: NEG
45332: PUSH
45333: LD_INT 2
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 2
45343: NEG
45344: PUSH
45345: LD_INT 3
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 2
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 3
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: LD_INT 3
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 3
45397: NEG
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45432: LD_ADDR_VAR 0 30
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: LD_INT 2
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: LD_INT 2
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 2
45567: PUSH
45568: LD_INT 2
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: LD_INT 2
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: LD_INT 3
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: LD_INT 2
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 3
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: LD_INT 3
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: NEG
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 3
45675: NEG
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45710: LD_ADDR_VAR 0 31
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: LD_INT 2
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 2
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: LD_INT 2
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: NEG
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 2
45887: NEG
45888: PUSH
45889: LD_INT 2
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 2
45899: NEG
45900: PUSH
45901: LD_INT 3
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 3
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 3
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: LD_INT 2
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 3
45953: NEG
45954: PUSH
45955: LD_INT 2
45957: NEG
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45988: LD_ADDR_VAR 0 32
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: LD_INT 2
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 2
46154: NEG
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 2
46165: NEG
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: LD_INT 3
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 3
46200: PUSH
46201: LD_INT 2
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: LD_INT 3
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 3
46231: NEG
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46266: LD_ADDR_VAR 0 33
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: NEG
46348: PUSH
46349: LD_INT 2
46351: NEG
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 2
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: LD_INT 2
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 2
46421: NEG
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 2
46432: NEG
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 2
46444: NEG
46445: PUSH
46446: LD_INT 2
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 2
46456: NEG
46457: PUSH
46458: LD_INT 3
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: LD_INT 1
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 3
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: LD_INT 3
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 3
46510: NEG
46511: PUSH
46512: LD_INT 2
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46545: LD_ADDR_VAR 0 34
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: LD_INT 2
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: NEG
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 2
46712: NEG
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 2
46724: NEG
46725: PUSH
46726: LD_INT 2
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: LD_INT 3
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: LD_INT 2
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 3
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: LD_INT 3
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 2
46779: NEG
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 3
46790: NEG
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46825: LD_ADDR_VAR 0 35
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 2
46916: NEG
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46937: LD_ADDR_VAR 0 36
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: LD_INT 2
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47049: LD_ADDR_VAR 0 37
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47161: LD_ADDR_VAR 0 38
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 2
47252: NEG
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47273: LD_ADDR_VAR 0 39
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: LD_INT 2
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47385: LD_ADDR_VAR 0 40
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47497: LD_ADDR_VAR 0 41
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: LD_INT 2
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 2
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 2
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: LD_INT 2
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: NEG
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 2
47652: NEG
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: LD_INT 2
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 2
47687: NEG
47688: PUSH
47689: LD_INT 3
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 3
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 3
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 3
47730: PUSH
47731: LD_INT 2
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 3
47740: PUSH
47741: LD_INT 3
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: LD_INT 3
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 3
47771: NEG
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 3
47782: NEG
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 3
47794: NEG
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 3
47806: NEG
47807: PUSH
47808: LD_INT 3
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47847: LD_ADDR_VAR 0 42
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: NEG
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: LD_INT 2
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 2
48013: NEG
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: NEG
48026: PUSH
48027: LD_INT 2
48029: NEG
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: LD_INT 3
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: LD_INT 3
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: LD_INT 3
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 2
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 3
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 3
48093: PUSH
48094: LD_INT 3
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: LD_INT 3
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: LD_INT 3
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: LD_INT 3
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 3
48144: NEG
48145: PUSH
48146: LD_INT 2
48148: NEG
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 3
48156: NEG
48157: PUSH
48158: LD_INT 3
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48197: LD_ADDR_VAR 0 43
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: LD_INT 1
48217: NEG
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: LD_INT 2
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: LD_INT 2
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 2
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 2
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 2
48363: NEG
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 2
48374: NEG
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 1
48386: NEG
48387: PUSH
48388: LD_INT 3
48390: NEG
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: LD_INT 3
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 3
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 3
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: LD_INT 3
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: LD_INT 3
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 2
48482: NEG
48483: PUSH
48484: LD_INT 1
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 3
48493: NEG
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 3
48504: NEG
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48545: LD_ADDR_VAR 0 44
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: NEG
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 2
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 2
48711: NEG
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: LD_INT 2
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: NEG
48736: PUSH
48737: LD_INT 3
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 2
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 3
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 3
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 3
48778: PUSH
48779: LD_INT 2
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 3
48788: PUSH
48789: LD_INT 3
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 2
48798: PUSH
48799: LD_INT 3
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 3
48819: NEG
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 3
48830: NEG
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 3
48842: NEG
48843: PUSH
48844: LD_INT 2
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 3
48854: NEG
48855: PUSH
48856: LD_INT 3
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48895: LD_ADDR_VAR 0 45
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 1
48976: NEG
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: LD_INT 2
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: LD_INT 2
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: LD_INT 2
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: LD_INT 2
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 2
49073: NEG
49074: PUSH
49075: LD_INT 2
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: NEG
49086: PUSH
49087: LD_INT 3
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: LD_INT 3
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: LD_INT 3
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 2
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 3
49131: PUSH
49132: LD_INT 2
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 3
49141: PUSH
49142: LD_INT 3
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 2
49151: PUSH
49152: LD_INT 3
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: LD_INT 3
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: LD_INT 3
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 3
49192: NEG
49193: PUSH
49194: LD_INT 2
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 3
49204: NEG
49205: PUSH
49206: LD_INT 3
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49245: LD_ADDR_VAR 0 46
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: LD_INT 2
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 2
49411: NEG
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: LD_INT 3
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: LD_INT 3
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: LD_INT 2
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 2
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 3
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 3
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: LD_INT 3
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: LD_INT 3
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: NEG
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 3
49541: NEG
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 3
49552: NEG
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49593: LD_ADDR_VAR 0 47
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: LD_INT 2
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 2
49708: NEG
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49744: LD_ADDR_VAR 0 48
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: LD_INT 2
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: LD_INT 2
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: LD_INT 1
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 2
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49891: LD_ADDR_VAR 0 49
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 2
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 2
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50035: LD_ADDR_VAR 0 50
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50179: LD_ADDR_VAR 0 51
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: LD_INT 1
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: LD_INT 2
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: LD_INT 2
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 2
50291: NEG
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50326: LD_ADDR_VAR 0 52
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: LD_INT 2
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 2
50430: NEG
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: NEG
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 2
50453: NEG
50454: PUSH
50455: LD_INT 2
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50477: LD_ADDR_VAR 0 53
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 2
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 2
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 2
50653: NEG
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 2
50664: NEG
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 2
50676: NEG
50677: PUSH
50678: LD_INT 2
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50707: LD_ADDR_VAR 0 54
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: LD_INT 2
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 2
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: LD_INT 2
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50937: LD_ADDR_VAR 0 55
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: NEG
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: LD_INT 2
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: LD_INT 2
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 2
51113: NEG
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 2
51136: NEG
51137: PUSH
51138: LD_INT 2
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51167: LD_ADDR_VAR 0 56
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 2
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: LD_INT 2
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 2
51343: NEG
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 2
51354: NEG
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 2
51366: NEG
51367: PUSH
51368: LD_INT 2
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51397: LD_ADDR_VAR 0 57
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: NEG
51479: PUSH
51480: LD_INT 2
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 2
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 2
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: LD_INT 2
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: NEG
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 2
51573: NEG
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 2
51584: NEG
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 2
51596: NEG
51597: PUSH
51598: LD_INT 2
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51627: LD_ADDR_VAR 0 58
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PUSH
51710: LD_INT 2
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 2
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: LD_INT 2
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: LD_INT 2
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 2
51803: NEG
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 2
51814: NEG
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 2
51826: NEG
51827: PUSH
51828: LD_INT 2
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51857: LD_ADDR_VAR 0 59
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51945: LD_ADDR_VAR 0 60
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52033: LD_ADDR_VAR 0 61
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52121: LD_ADDR_VAR 0 62
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52209: LD_ADDR_VAR 0 63
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52297: LD_ADDR_VAR 0 64
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: ST_TO_ADDR
// end ; 1 :
52385: GO 58282
52387: LD_INT 1
52389: DOUBLE
52390: EQUAL
52391: IFTRUE 52395
52393: GO 55018
52395: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52396: LD_ADDR_VAR 0 11
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: LD_INT 3
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 3
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: LIST
52439: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52440: LD_ADDR_VAR 0 12
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 3
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 3
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: LIST
52480: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52481: LD_ADDR_VAR 0 13
52485: PUSH
52486: LD_INT 3
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 3
52498: PUSH
52499: LD_INT 3
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 2
52508: PUSH
52509: LD_INT 3
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: LIST
52520: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52521: LD_ADDR_VAR 0 14
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: LD_INT 3
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: LD_INT 3
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 2
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: LIST
52561: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52562: LD_ADDR_VAR 0 15
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 3
52580: NEG
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: NEG
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: LIST
52605: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52606: LD_ADDR_VAR 0 16
52610: PUSH
52611: LD_INT 2
52613: NEG
52614: PUSH
52615: LD_INT 3
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 3
52625: NEG
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 3
52637: NEG
52638: PUSH
52639: LD_INT 3
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: LIST
52651: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52652: LD_ADDR_VAR 0 17
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 3
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 3
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 2
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: LIST
52695: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52696: LD_ADDR_VAR 0 18
52700: PUSH
52701: LD_INT 2
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 3
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 3
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: LIST
52736: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52737: LD_ADDR_VAR 0 19
52741: PUSH
52742: LD_INT 3
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 3
52754: PUSH
52755: LD_INT 3
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: LD_INT 3
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: LIST
52776: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52777: LD_ADDR_VAR 0 20
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: LD_INT 3
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 3
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: LIST
52817: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52818: LD_ADDR_VAR 0 21
52822: PUSH
52823: LD_INT 2
52825: NEG
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 3
52836: NEG
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 3
52847: NEG
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: LIST
52861: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52862: LD_ADDR_VAR 0 22
52866: PUSH
52867: LD_INT 2
52869: NEG
52870: PUSH
52871: LD_INT 3
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 3
52881: NEG
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 3
52893: NEG
52894: PUSH
52895: LD_INT 3
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: LIST
52907: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52908: LD_ADDR_VAR 0 23
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 3
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: LD_INT 4
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 3
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: LIST
52951: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52952: LD_ADDR_VAR 0 24
52956: PUSH
52957: LD_INT 3
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 3
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 4
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: LIST
52992: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52993: LD_ADDR_VAR 0 25
52997: PUSH
52998: LD_INT 3
53000: PUSH
53001: LD_INT 3
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 4
53010: PUSH
53011: LD_INT 3
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 3
53020: PUSH
53021: LD_INT 4
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: LIST
53032: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53033: LD_ADDR_VAR 0 26
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 3
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: LD_INT 4
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: LD_INT 3
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: LIST
53073: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53074: LD_ADDR_VAR 0 27
53078: PUSH
53079: LD_INT 3
53081: NEG
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 3
53092: NEG
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 4
53103: NEG
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: LIST
53117: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53118: LD_ADDR_VAR 0 28
53122: PUSH
53123: LD_INT 3
53125: NEG
53126: PUSH
53127: LD_INT 3
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 3
53137: NEG
53138: PUSH
53139: LD_INT 4
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 4
53149: NEG
53150: PUSH
53151: LD_INT 3
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: LIST
53163: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53164: LD_ADDR_VAR 0 29
53168: PUSH
53169: LD_INT 1
53171: NEG
53172: PUSH
53173: LD_INT 3
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: LD_INT 3
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: LD_INT 2
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: LD_INT 4
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: LD_INT 4
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: LD_INT 3
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: LD_INT 5
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: LD_INT 5
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: LD_INT 4
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: LD_INT 6
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: LD_INT 6
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: LD_INT 5
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53319: LD_ADDR_VAR 0 30
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 3
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 3
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 3
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 4
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 4
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 4
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 5
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 5
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 5
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 6
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 6
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53462: LD_ADDR_VAR 0 31
53466: PUSH
53467: LD_INT 3
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 3
53479: PUSH
53480: LD_INT 3
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 2
53489: PUSH
53490: LD_INT 3
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 4
53499: PUSH
53500: LD_INT 3
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 4
53509: PUSH
53510: LD_INT 4
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 3
53519: PUSH
53520: LD_INT 4
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 5
53529: PUSH
53530: LD_INT 4
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 5
53539: PUSH
53540: LD_INT 5
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 4
53549: PUSH
53550: LD_INT 5
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 6
53559: PUSH
53560: LD_INT 5
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 6
53569: PUSH
53570: LD_INT 6
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 5
53579: PUSH
53580: LD_INT 6
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53601: LD_ADDR_VAR 0 32
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: LD_INT 3
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: LD_INT 3
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: LD_INT 4
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: LD_INT 4
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: LD_INT 3
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: LD_INT 5
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: LD_INT 5
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: LD_INT 4
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 1
53701: PUSH
53702: LD_INT 6
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: LD_INT 6
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: LD_INT 5
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53744: LD_ADDR_VAR 0 33
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 3
53762: NEG
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 3
53773: NEG
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 3
53785: NEG
53786: PUSH
53787: LD_INT 1
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 4
53796: NEG
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 4
53807: NEG
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 4
53819: NEG
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 5
53830: NEG
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 5
53841: NEG
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 5
53853: NEG
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 6
53864: NEG
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 6
53875: NEG
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53899: LD_ADDR_VAR 0 34
53903: PUSH
53904: LD_INT 2
53906: NEG
53907: PUSH
53908: LD_INT 3
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 3
53918: NEG
53919: PUSH
53920: LD_INT 2
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 3
53930: NEG
53931: PUSH
53932: LD_INT 3
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 3
53942: NEG
53943: PUSH
53944: LD_INT 4
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 4
53954: NEG
53955: PUSH
53956: LD_INT 3
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 4
53966: NEG
53967: PUSH
53968: LD_INT 4
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 4
53978: NEG
53979: PUSH
53980: LD_INT 5
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 5
53990: NEG
53991: PUSH
53992: LD_INT 4
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 5
54002: NEG
54003: PUSH
54004: LD_INT 5
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 5
54014: NEG
54015: PUSH
54016: LD_INT 6
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 6
54026: NEG
54027: PUSH
54028: LD_INT 5
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 6
54038: NEG
54039: PUSH
54040: LD_INT 6
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54062: LD_ADDR_VAR 0 41
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: LD_INT 2
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: LD_INT 3
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 2
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: LIST
54105: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54106: LD_ADDR_VAR 0 42
54110: PUSH
54111: LD_INT 2
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 3
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: LIST
54146: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54147: LD_ADDR_VAR 0 43
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: LD_INT 2
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 3
54164: PUSH
54165: LD_INT 2
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 2
54174: PUSH
54175: LD_INT 3
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: LIST
54186: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54187: LD_ADDR_VAR 0 44
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 3
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: LD_INT 2
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: LIST
54227: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54228: LD_ADDR_VAR 0 45
54232: PUSH
54233: LD_INT 2
54235: NEG
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: NEG
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 3
54257: NEG
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: LIST
54271: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54272: LD_ADDR_VAR 0 46
54276: PUSH
54277: LD_INT 2
54279: NEG
54280: PUSH
54281: LD_INT 2
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 2
54291: NEG
54292: PUSH
54293: LD_INT 3
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 3
54303: NEG
54304: PUSH
54305: LD_INT 2
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: LIST
54317: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54318: LD_ADDR_VAR 0 47
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: LD_INT 3
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: LD_INT 3
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54351: LD_ADDR_VAR 0 48
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: LD_INT 2
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54382: LD_ADDR_VAR 0 49
54386: PUSH
54387: LD_INT 3
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 3
54399: PUSH
54400: LD_INT 2
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54411: LD_ADDR_VAR 0 50
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: LD_INT 3
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: LD_INT 3
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54440: LD_ADDR_VAR 0 51
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 2
54458: NEG
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54471: LD_ADDR_VAR 0 52
54475: PUSH
54476: LD_INT 3
54478: NEG
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 3
54490: NEG
54491: PUSH
54492: LD_INT 2
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54504: LD_ADDR_VAR 0 53
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: LD_INT 3
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: LD_INT 3
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: LD_INT 2
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: LIST
54547: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54548: LD_ADDR_VAR 0 54
54552: PUSH
54553: LD_INT 2
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 3
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 3
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: LIST
54588: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54589: LD_ADDR_VAR 0 55
54593: PUSH
54594: LD_INT 3
54596: PUSH
54597: LD_INT 2
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 3
54606: PUSH
54607: LD_INT 3
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 2
54616: PUSH
54617: LD_INT 3
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: LIST
54628: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54629: LD_ADDR_VAR 0 56
54633: PUSH
54634: LD_INT 1
54636: PUSH
54637: LD_INT 3
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: LD_INT 3
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: LD_INT 2
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: LIST
54669: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54670: LD_ADDR_VAR 0 57
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 3
54688: NEG
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 3
54699: NEG
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: LIST
54713: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54714: LD_ADDR_VAR 0 58
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: LD_INT 3
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 3
54733: NEG
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 3
54745: NEG
54746: PUSH
54747: LD_INT 3
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: LIST
54759: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54760: LD_ADDR_VAR 0 59
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 2
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: LD_INT 2
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: LIST
54803: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54804: LD_ADDR_VAR 0 60
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: LIST
54844: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54845: LD_ADDR_VAR 0 61
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 2
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: LD_INT 2
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: LIST
54884: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54885: LD_ADDR_VAR 0 62
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: LD_INT 2
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: LD_INT 2
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: LIST
54925: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54926: LD_ADDR_VAR 0 63
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 2
54944: NEG
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 2
54955: NEG
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: LIST
54969: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54970: LD_ADDR_VAR 0 64
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: LD_INT 2
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 2
55001: NEG
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: LIST
55015: ST_TO_ADDR
// end ; 2 :
55016: GO 58282
55018: LD_INT 2
55020: DOUBLE
55021: EQUAL
55022: IFTRUE 55026
55024: GO 58281
55026: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55027: LD_ADDR_VAR 0 29
55031: PUSH
55032: LD_INT 4
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 4
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 5
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 5
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 4
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 3
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 3
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 3
55106: PUSH
55107: LD_INT 2
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 5
55117: PUSH
55118: LD_INT 2
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 3
55127: PUSH
55128: LD_INT 3
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 3
55137: PUSH
55138: LD_INT 2
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 4
55147: PUSH
55148: LD_INT 3
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 4
55157: PUSH
55158: LD_INT 4
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: LD_INT 4
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: LD_INT 3
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: LD_INT 2
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 4
55197: PUSH
55198: LD_INT 2
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 2
55207: PUSH
55208: LD_INT 4
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: LD_INT 4
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: LD_INT 3
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: LD_INT 4
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: LD_INT 5
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: LD_INT 5
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: LD_INT 4
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: LD_INT 3
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: LD_INT 5
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 2
55299: NEG
55300: PUSH
55301: LD_INT 3
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 3
55310: NEG
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 3
55321: NEG
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 2
55333: NEG
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 3
55355: NEG
55356: PUSH
55357: LD_INT 1
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 4
55366: NEG
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 4
55377: NEG
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 4
55389: NEG
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 2
55401: NEG
55402: PUSH
55403: LD_INT 2
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 4
55412: NEG
55413: PUSH
55414: LD_INT 4
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 4
55424: NEG
55425: PUSH
55426: LD_INT 5
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 3
55436: NEG
55437: PUSH
55438: LD_INT 4
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 3
55448: NEG
55449: PUSH
55450: LD_INT 3
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 4
55460: NEG
55461: PUSH
55462: LD_INT 3
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 5
55472: NEG
55473: PUSH
55474: LD_INT 4
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 5
55484: NEG
55485: PUSH
55486: LD_INT 5
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 3
55496: NEG
55497: PUSH
55498: LD_INT 5
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 5
55508: NEG
55509: PUSH
55510: LD_INT 3
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55565: LD_ADDR_VAR 0 30
55569: PUSH
55570: LD_INT 4
55572: PUSH
55573: LD_INT 4
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 4
55582: PUSH
55583: LD_INT 3
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 5
55592: PUSH
55593: LD_INT 4
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 5
55602: PUSH
55603: LD_INT 5
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 4
55612: PUSH
55613: LD_INT 5
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 3
55622: PUSH
55623: LD_INT 4
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 3
55632: PUSH
55633: LD_INT 3
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 5
55642: PUSH
55643: LD_INT 3
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 3
55652: PUSH
55653: LD_INT 5
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: LD_INT 3
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 2
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: LD_INT 3
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: LD_INT 4
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 4
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: LD_INT 3
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: LD_INT 4
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: NEG
55745: PUSH
55746: LD_INT 2
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 4
55755: NEG
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 4
55766: NEG
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 3
55778: NEG
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 3
55789: NEG
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 4
55800: NEG
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 5
55811: NEG
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 5
55822: NEG
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 5
55834: NEG
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 3
55846: NEG
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 3
55857: NEG
55858: PUSH
55859: LD_INT 3
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 3
55869: NEG
55870: PUSH
55871: LD_INT 4
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 2
55881: NEG
55882: PUSH
55883: LD_INT 3
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: LD_INT 2
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 3
55905: NEG
55906: PUSH
55907: LD_INT 2
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 4
55917: NEG
55918: PUSH
55919: LD_INT 3
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 4
55929: NEG
55930: PUSH
55931: LD_INT 4
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 2
55941: NEG
55942: PUSH
55943: LD_INT 4
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 4
55953: NEG
55954: PUSH
55955: LD_INT 2
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 4
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: LD_INT 5
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 4
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: LD_INT 3
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_INT 3
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: LD_INT 4
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: LD_INT 5
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: LD_INT 3
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 2
56055: NEG
56056: PUSH
56057: LD_INT 5
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56112: LD_ADDR_VAR 0 31
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 4
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 3
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: LD_INT 4
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: LD_INT 5
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: LD_INT 5
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 4
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: LD_INT 3
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 2
56191: PUSH
56192: LD_INT 5
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: LD_INT 3
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 3
56212: NEG
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 3
56223: NEG
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 2
56235: NEG
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 3
56257: NEG
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 4
56268: NEG
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 4
56279: NEG
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 4
56291: NEG
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 4
56314: NEG
56315: PUSH
56316: LD_INT 4
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 4
56326: NEG
56327: PUSH
56328: LD_INT 5
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 3
56338: NEG
56339: PUSH
56340: LD_INT 4
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 3
56350: NEG
56351: PUSH
56352: LD_INT 3
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 4
56362: NEG
56363: PUSH
56364: LD_INT 3
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 5
56374: NEG
56375: PUSH
56376: LD_INT 4
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 5
56386: NEG
56387: PUSH
56388: LD_INT 5
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 3
56398: NEG
56399: PUSH
56400: LD_INT 5
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 5
56410: NEG
56411: PUSH
56412: LD_INT 3
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 3
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: LD_INT 4
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: LD_INT 3
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: LD_INT 2
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: LD_INT 2
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: LD_INT 3
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: LD_INT 4
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: LD_INT 2
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 2
56512: NEG
56513: PUSH
56514: LD_INT 4
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 4
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 4
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 5
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 5
56555: PUSH
56556: LD_INT 1
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 4
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 3
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 3
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 3
56596: PUSH
56597: LD_INT 2
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 5
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56662: LD_ADDR_VAR 0 32
56666: PUSH
56667: LD_INT 4
56669: NEG
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 4
56680: NEG
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 3
56692: NEG
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 3
56703: NEG
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 4
56714: NEG
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 5
56725: NEG
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 5
56736: NEG
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 5
56748: NEG
56749: PUSH
56750: LD_INT 2
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 3
56760: NEG
56761: PUSH
56762: LD_INT 2
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 3
56771: NEG
56772: PUSH
56773: LD_INT 3
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 3
56783: NEG
56784: PUSH
56785: LD_INT 4
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 2
56795: NEG
56796: PUSH
56797: LD_INT 3
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: LD_INT 2
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 3
56819: NEG
56820: PUSH
56821: LD_INT 2
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 4
56831: NEG
56832: PUSH
56833: LD_INT 3
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 4
56843: NEG
56844: PUSH
56845: LD_INT 4
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 2
56855: NEG
56856: PUSH
56857: LD_INT 4
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 4
56867: NEG
56868: PUSH
56869: LD_INT 2
56871: NEG
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 4
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: LD_INT 5
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: LD_INT 4
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: LD_INT 3
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 3
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: LD_INT 4
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: LD_INT 5
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 2
56958: PUSH
56959: LD_INT 3
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 2
56969: NEG
56970: PUSH
56971: LD_INT 5
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 3
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 3
56991: PUSH
56992: LD_INT 1
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 4
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 4
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 3
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: LD_INT 2
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 4
57064: PUSH
57065: LD_INT 2
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 4
57074: PUSH
57075: LD_INT 4
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 4
57084: PUSH
57085: LD_INT 3
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 5
57094: PUSH
57095: LD_INT 4
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 5
57104: PUSH
57105: LD_INT 5
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 4
57114: PUSH
57115: LD_INT 5
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 3
57124: PUSH
57125: LD_INT 4
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 3
57134: PUSH
57135: LD_INT 3
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 5
57144: PUSH
57145: LD_INT 3
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 3
57154: PUSH
57155: LD_INT 5
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57209: LD_ADDR_VAR 0 33
57213: PUSH
57214: LD_INT 4
57216: NEG
57217: PUSH
57218: LD_INT 4
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 4
57228: NEG
57229: PUSH
57230: LD_INT 5
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 3
57240: NEG
57241: PUSH
57242: LD_INT 4
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 3
57252: NEG
57253: PUSH
57254: LD_INT 3
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 4
57264: NEG
57265: PUSH
57266: LD_INT 3
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 5
57276: NEG
57277: PUSH
57278: LD_INT 4
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 5
57288: NEG
57289: PUSH
57290: LD_INT 5
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 3
57300: NEG
57301: PUSH
57302: LD_INT 5
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 5
57312: NEG
57313: PUSH
57314: LD_INT 3
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: LD_INT 3
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: LD_INT 4
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: LD_INT 3
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: LD_INT 2
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: LD_INT 2
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: LD_INT 3
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: NEG
57392: PUSH
57393: LD_INT 4
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: LD_INT 2
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 2
57414: NEG
57415: PUSH
57416: LD_INT 4
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 4
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 4
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 5
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 5
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 4
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 3
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 3
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 3
57498: PUSH
57499: LD_INT 2
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 5
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 3
57519: PUSH
57520: LD_INT 3
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 3
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 4
57539: PUSH
57540: LD_INT 3
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 4
57549: PUSH
57550: LD_INT 4
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 3
57559: PUSH
57560: LD_INT 4
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 2
57569: PUSH
57570: LD_INT 3
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 2
57579: PUSH
57580: LD_INT 2
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 4
57589: PUSH
57590: LD_INT 2
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 2
57599: PUSH
57600: LD_INT 4
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: LD_INT 4
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: LD_INT 3
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: LD_INT 4
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: LD_INT 5
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: LD_INT 5
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: LD_INT 4
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: LD_INT 3
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: LD_INT 5
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 2
57691: NEG
57692: PUSH
57693: LD_INT 3
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57747: LD_ADDR_VAR 0 34
57751: PUSH
57752: LD_INT 0
57754: PUSH
57755: LD_INT 4
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: LD_INT 5
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: LD_INT 4
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 3
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: LD_INT 3
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: LD_INT 4
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: LD_INT 5
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: PUSH
57834: LD_INT 3
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: LD_INT 5
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 3
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 3
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 4
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 4
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 3
57897: PUSH
57898: LD_INT 1
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: LD_INT 1
57920: NEG
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 2
57928: PUSH
57929: LD_INT 2
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 4
57939: PUSH
57940: LD_INT 2
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 4
57949: PUSH
57950: LD_INT 4
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 4
57959: PUSH
57960: LD_INT 3
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 5
57969: PUSH
57970: LD_INT 4
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 5
57979: PUSH
57980: LD_INT 5
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 4
57989: PUSH
57990: LD_INT 5
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 3
57999: PUSH
58000: LD_INT 4
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 3
58009: PUSH
58010: LD_INT 3
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 5
58019: PUSH
58020: LD_INT 3
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 3
58029: PUSH
58030: LD_INT 5
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: LD_INT 3
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: LD_INT 2
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: LD_INT 3
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: LD_INT 4
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: LD_INT 4
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 1
58089: NEG
58090: PUSH
58091: LD_INT 3
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: LD_INT 2
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: LD_INT 4
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 2
58121: NEG
58122: PUSH
58123: LD_INT 2
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 4
58132: NEG
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 4
58143: NEG
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 3
58155: NEG
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 3
58166: NEG
58167: PUSH
58168: LD_INT 1
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 4
58177: NEG
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 5
58188: NEG
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 5
58199: NEG
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 5
58211: NEG
58212: PUSH
58213: LD_INT 2
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 3
58223: NEG
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: ST_TO_ADDR
// end ; end ;
58279: GO 58282
58281: POP
// case btype of b_depot , b_warehouse :
58282: LD_VAR 0 1
58286: PUSH
58287: LD_INT 0
58289: DOUBLE
58290: EQUAL
58291: IFTRUE 58301
58293: LD_INT 1
58295: DOUBLE
58296: EQUAL
58297: IFTRUE 58301
58299: GO 58502
58301: POP
// case nation of nation_american :
58302: LD_VAR 0 5
58306: PUSH
58307: LD_INT 1
58309: DOUBLE
58310: EQUAL
58311: IFTRUE 58315
58313: GO 58371
58315: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58316: LD_ADDR_VAR 0 9
58320: PUSH
58321: LD_VAR 0 11
58325: PUSH
58326: LD_VAR 0 12
58330: PUSH
58331: LD_VAR 0 13
58335: PUSH
58336: LD_VAR 0 14
58340: PUSH
58341: LD_VAR 0 15
58345: PUSH
58346: LD_VAR 0 16
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: PUSH
58359: LD_VAR 0 4
58363: PUSH
58364: LD_INT 1
58366: PLUS
58367: ARRAY
58368: ST_TO_ADDR
58369: GO 58500
58371: LD_INT 2
58373: DOUBLE
58374: EQUAL
58375: IFTRUE 58379
58377: GO 58435
58379: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58380: LD_ADDR_VAR 0 9
58384: PUSH
58385: LD_VAR 0 17
58389: PUSH
58390: LD_VAR 0 18
58394: PUSH
58395: LD_VAR 0 19
58399: PUSH
58400: LD_VAR 0 20
58404: PUSH
58405: LD_VAR 0 21
58409: PUSH
58410: LD_VAR 0 22
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: PUSH
58423: LD_VAR 0 4
58427: PUSH
58428: LD_INT 1
58430: PLUS
58431: ARRAY
58432: ST_TO_ADDR
58433: GO 58500
58435: LD_INT 3
58437: DOUBLE
58438: EQUAL
58439: IFTRUE 58443
58441: GO 58499
58443: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58444: LD_ADDR_VAR 0 9
58448: PUSH
58449: LD_VAR 0 23
58453: PUSH
58454: LD_VAR 0 24
58458: PUSH
58459: LD_VAR 0 25
58463: PUSH
58464: LD_VAR 0 26
58468: PUSH
58469: LD_VAR 0 27
58473: PUSH
58474: LD_VAR 0 28
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: PUSH
58487: LD_VAR 0 4
58491: PUSH
58492: LD_INT 1
58494: PLUS
58495: ARRAY
58496: ST_TO_ADDR
58497: GO 58500
58499: POP
58500: GO 59055
58502: LD_INT 2
58504: DOUBLE
58505: EQUAL
58506: IFTRUE 58516
58508: LD_INT 3
58510: DOUBLE
58511: EQUAL
58512: IFTRUE 58516
58514: GO 58572
58516: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58517: LD_ADDR_VAR 0 9
58521: PUSH
58522: LD_VAR 0 29
58526: PUSH
58527: LD_VAR 0 30
58531: PUSH
58532: LD_VAR 0 31
58536: PUSH
58537: LD_VAR 0 32
58541: PUSH
58542: LD_VAR 0 33
58546: PUSH
58547: LD_VAR 0 34
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: PUSH
58560: LD_VAR 0 4
58564: PUSH
58565: LD_INT 1
58567: PLUS
58568: ARRAY
58569: ST_TO_ADDR
58570: GO 59055
58572: LD_INT 16
58574: DOUBLE
58575: EQUAL
58576: IFTRUE 58634
58578: LD_INT 17
58580: DOUBLE
58581: EQUAL
58582: IFTRUE 58634
58584: LD_INT 18
58586: DOUBLE
58587: EQUAL
58588: IFTRUE 58634
58590: LD_INT 19
58592: DOUBLE
58593: EQUAL
58594: IFTRUE 58634
58596: LD_INT 22
58598: DOUBLE
58599: EQUAL
58600: IFTRUE 58634
58602: LD_INT 20
58604: DOUBLE
58605: EQUAL
58606: IFTRUE 58634
58608: LD_INT 21
58610: DOUBLE
58611: EQUAL
58612: IFTRUE 58634
58614: LD_INT 23
58616: DOUBLE
58617: EQUAL
58618: IFTRUE 58634
58620: LD_INT 24
58622: DOUBLE
58623: EQUAL
58624: IFTRUE 58634
58626: LD_INT 25
58628: DOUBLE
58629: EQUAL
58630: IFTRUE 58634
58632: GO 58690
58634: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58635: LD_ADDR_VAR 0 9
58639: PUSH
58640: LD_VAR 0 35
58644: PUSH
58645: LD_VAR 0 36
58649: PUSH
58650: LD_VAR 0 37
58654: PUSH
58655: LD_VAR 0 38
58659: PUSH
58660: LD_VAR 0 39
58664: PUSH
58665: LD_VAR 0 40
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: PUSH
58678: LD_VAR 0 4
58682: PUSH
58683: LD_INT 1
58685: PLUS
58686: ARRAY
58687: ST_TO_ADDR
58688: GO 59055
58690: LD_INT 6
58692: DOUBLE
58693: EQUAL
58694: IFTRUE 58746
58696: LD_INT 7
58698: DOUBLE
58699: EQUAL
58700: IFTRUE 58746
58702: LD_INT 8
58704: DOUBLE
58705: EQUAL
58706: IFTRUE 58746
58708: LD_INT 13
58710: DOUBLE
58711: EQUAL
58712: IFTRUE 58746
58714: LD_INT 12
58716: DOUBLE
58717: EQUAL
58718: IFTRUE 58746
58720: LD_INT 15
58722: DOUBLE
58723: EQUAL
58724: IFTRUE 58746
58726: LD_INT 11
58728: DOUBLE
58729: EQUAL
58730: IFTRUE 58746
58732: LD_INT 14
58734: DOUBLE
58735: EQUAL
58736: IFTRUE 58746
58738: LD_INT 10
58740: DOUBLE
58741: EQUAL
58742: IFTRUE 58746
58744: GO 58802
58746: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58747: LD_ADDR_VAR 0 9
58751: PUSH
58752: LD_VAR 0 41
58756: PUSH
58757: LD_VAR 0 42
58761: PUSH
58762: LD_VAR 0 43
58766: PUSH
58767: LD_VAR 0 44
58771: PUSH
58772: LD_VAR 0 45
58776: PUSH
58777: LD_VAR 0 46
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: PUSH
58790: LD_VAR 0 4
58794: PUSH
58795: LD_INT 1
58797: PLUS
58798: ARRAY
58799: ST_TO_ADDR
58800: GO 59055
58802: LD_INT 36
58804: DOUBLE
58805: EQUAL
58806: IFTRUE 58810
58808: GO 58866
58810: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58811: LD_ADDR_VAR 0 9
58815: PUSH
58816: LD_VAR 0 47
58820: PUSH
58821: LD_VAR 0 48
58825: PUSH
58826: LD_VAR 0 49
58830: PUSH
58831: LD_VAR 0 50
58835: PUSH
58836: LD_VAR 0 51
58840: PUSH
58841: LD_VAR 0 52
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: PUSH
58854: LD_VAR 0 4
58858: PUSH
58859: LD_INT 1
58861: PLUS
58862: ARRAY
58863: ST_TO_ADDR
58864: GO 59055
58866: LD_INT 4
58868: DOUBLE
58869: EQUAL
58870: IFTRUE 58892
58872: LD_INT 5
58874: DOUBLE
58875: EQUAL
58876: IFTRUE 58892
58878: LD_INT 34
58880: DOUBLE
58881: EQUAL
58882: IFTRUE 58892
58884: LD_INT 37
58886: DOUBLE
58887: EQUAL
58888: IFTRUE 58892
58890: GO 58948
58892: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58893: LD_ADDR_VAR 0 9
58897: PUSH
58898: LD_VAR 0 53
58902: PUSH
58903: LD_VAR 0 54
58907: PUSH
58908: LD_VAR 0 55
58912: PUSH
58913: LD_VAR 0 56
58917: PUSH
58918: LD_VAR 0 57
58922: PUSH
58923: LD_VAR 0 58
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: PUSH
58936: LD_VAR 0 4
58940: PUSH
58941: LD_INT 1
58943: PLUS
58944: ARRAY
58945: ST_TO_ADDR
58946: GO 59055
58948: LD_INT 31
58950: DOUBLE
58951: EQUAL
58952: IFTRUE 58998
58954: LD_INT 32
58956: DOUBLE
58957: EQUAL
58958: IFTRUE 58998
58960: LD_INT 33
58962: DOUBLE
58963: EQUAL
58964: IFTRUE 58998
58966: LD_INT 27
58968: DOUBLE
58969: EQUAL
58970: IFTRUE 58998
58972: LD_INT 26
58974: DOUBLE
58975: EQUAL
58976: IFTRUE 58998
58978: LD_INT 28
58980: DOUBLE
58981: EQUAL
58982: IFTRUE 58998
58984: LD_INT 29
58986: DOUBLE
58987: EQUAL
58988: IFTRUE 58998
58990: LD_INT 30
58992: DOUBLE
58993: EQUAL
58994: IFTRUE 58998
58996: GO 59054
58998: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58999: LD_ADDR_VAR 0 9
59003: PUSH
59004: LD_VAR 0 59
59008: PUSH
59009: LD_VAR 0 60
59013: PUSH
59014: LD_VAR 0 61
59018: PUSH
59019: LD_VAR 0 62
59023: PUSH
59024: LD_VAR 0 63
59028: PUSH
59029: LD_VAR 0 64
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: PUSH
59042: LD_VAR 0 4
59046: PUSH
59047: LD_INT 1
59049: PLUS
59050: ARRAY
59051: ST_TO_ADDR
59052: GO 59055
59054: POP
// temp_list2 = [ ] ;
59055: LD_ADDR_VAR 0 10
59059: PUSH
59060: EMPTY
59061: ST_TO_ADDR
// for i in temp_list do
59062: LD_ADDR_VAR 0 8
59066: PUSH
59067: LD_VAR 0 9
59071: PUSH
59072: FOR_IN
59073: IFFALSE 59125
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59075: LD_ADDR_VAR 0 10
59079: PUSH
59080: LD_VAR 0 10
59084: PUSH
59085: LD_VAR 0 8
59089: PUSH
59090: LD_INT 1
59092: ARRAY
59093: PUSH
59094: LD_VAR 0 2
59098: PLUS
59099: PUSH
59100: LD_VAR 0 8
59104: PUSH
59105: LD_INT 2
59107: ARRAY
59108: PUSH
59109: LD_VAR 0 3
59113: PLUS
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: EMPTY
59120: LIST
59121: ADD
59122: ST_TO_ADDR
59123: GO 59072
59125: POP
59126: POP
// result = temp_list2 ;
59127: LD_ADDR_VAR 0 7
59131: PUSH
59132: LD_VAR 0 10
59136: ST_TO_ADDR
// end ;
59137: LD_VAR 0 7
59141: RET
// export function EnemyInRange ( unit , dist ) ; begin
59142: LD_INT 0
59144: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59145: LD_ADDR_VAR 0 3
59149: PUSH
59150: LD_VAR 0 1
59154: PPUSH
59155: CALL_OW 255
59159: PPUSH
59160: LD_VAR 0 1
59164: PPUSH
59165: CALL_OW 250
59169: PPUSH
59170: LD_VAR 0 1
59174: PPUSH
59175: CALL_OW 251
59179: PPUSH
59180: LD_VAR 0 2
59184: PPUSH
59185: CALL 32544 0 4
59189: PUSH
59190: LD_INT 4
59192: ARRAY
59193: ST_TO_ADDR
// end ;
59194: LD_VAR 0 3
59198: RET
// export function PlayerSeeMe ( unit ) ; begin
59199: LD_INT 0
59201: PPUSH
// result := See ( your_side , unit ) ;
59202: LD_ADDR_VAR 0 2
59206: PUSH
59207: LD_OWVAR 2
59211: PPUSH
59212: LD_VAR 0 1
59216: PPUSH
59217: CALL_OW 292
59221: ST_TO_ADDR
// end ;
59222: LD_VAR 0 2
59226: RET
// export function ReverseDir ( unit ) ; begin
59227: LD_INT 0
59229: PPUSH
// if not unit then
59230: LD_VAR 0 1
59234: NOT
59235: IFFALSE 59239
// exit ;
59237: GO 59262
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59239: LD_ADDR_VAR 0 2
59243: PUSH
59244: LD_VAR 0 1
59248: PPUSH
59249: CALL_OW 254
59253: PUSH
59254: LD_INT 3
59256: PLUS
59257: PUSH
59258: LD_INT 6
59260: MOD
59261: ST_TO_ADDR
// end ;
59262: LD_VAR 0 2
59266: RET
// export function ReverseArray ( array ) ; var i ; begin
59267: LD_INT 0
59269: PPUSH
59270: PPUSH
// if not array then
59271: LD_VAR 0 1
59275: NOT
59276: IFFALSE 59280
// exit ;
59278: GO 59335
// result := [ ] ;
59280: LD_ADDR_VAR 0 2
59284: PUSH
59285: EMPTY
59286: ST_TO_ADDR
// for i := array downto 1 do
59287: LD_ADDR_VAR 0 3
59291: PUSH
59292: DOUBLE
59293: LD_VAR 0 1
59297: INC
59298: ST_TO_ADDR
59299: LD_INT 1
59301: PUSH
59302: FOR_DOWNTO
59303: IFFALSE 59333
// result := Join ( result , array [ i ] ) ;
59305: LD_ADDR_VAR 0 2
59309: PUSH
59310: LD_VAR 0 2
59314: PPUSH
59315: LD_VAR 0 1
59319: PUSH
59320: LD_VAR 0 3
59324: ARRAY
59325: PPUSH
59326: CALL 63960 0 2
59330: ST_TO_ADDR
59331: GO 59302
59333: POP
59334: POP
// end ;
59335: LD_VAR 0 2
59339: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59340: LD_INT 0
59342: PPUSH
59343: PPUSH
59344: PPUSH
59345: PPUSH
59346: PPUSH
59347: PPUSH
// if not unit or not hexes then
59348: LD_VAR 0 1
59352: NOT
59353: PUSH
59354: LD_VAR 0 2
59358: NOT
59359: OR
59360: IFFALSE 59364
// exit ;
59362: GO 59487
// dist := 9999 ;
59364: LD_ADDR_VAR 0 5
59368: PUSH
59369: LD_INT 9999
59371: ST_TO_ADDR
// for i = 1 to hexes do
59372: LD_ADDR_VAR 0 4
59376: PUSH
59377: DOUBLE
59378: LD_INT 1
59380: DEC
59381: ST_TO_ADDR
59382: LD_VAR 0 2
59386: PUSH
59387: FOR_TO
59388: IFFALSE 59475
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59390: LD_ADDR_VAR 0 6
59394: PUSH
59395: LD_VAR 0 1
59399: PPUSH
59400: LD_VAR 0 2
59404: PUSH
59405: LD_VAR 0 4
59409: ARRAY
59410: PUSH
59411: LD_INT 1
59413: ARRAY
59414: PPUSH
59415: LD_VAR 0 2
59419: PUSH
59420: LD_VAR 0 4
59424: ARRAY
59425: PUSH
59426: LD_INT 2
59428: ARRAY
59429: PPUSH
59430: CALL_OW 297
59434: ST_TO_ADDR
// if tdist < dist then
59435: LD_VAR 0 6
59439: PUSH
59440: LD_VAR 0 5
59444: LESS
59445: IFFALSE 59473
// begin hex := hexes [ i ] ;
59447: LD_ADDR_VAR 0 8
59451: PUSH
59452: LD_VAR 0 2
59456: PUSH
59457: LD_VAR 0 4
59461: ARRAY
59462: ST_TO_ADDR
// dist := tdist ;
59463: LD_ADDR_VAR 0 5
59467: PUSH
59468: LD_VAR 0 6
59472: ST_TO_ADDR
// end ; end ;
59473: GO 59387
59475: POP
59476: POP
// result := hex ;
59477: LD_ADDR_VAR 0 3
59481: PUSH
59482: LD_VAR 0 8
59486: ST_TO_ADDR
// end ;
59487: LD_VAR 0 3
59491: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59492: LD_INT 0
59494: PPUSH
59495: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59496: LD_VAR 0 1
59500: NOT
59501: PUSH
59502: LD_VAR 0 1
59506: PUSH
59507: LD_INT 21
59509: PUSH
59510: LD_INT 2
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 23
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PPUSH
59531: CALL_OW 69
59535: IN
59536: NOT
59537: OR
59538: IFFALSE 59542
// exit ;
59540: GO 59589
// for i = 1 to 3 do
59542: LD_ADDR_VAR 0 3
59546: PUSH
59547: DOUBLE
59548: LD_INT 1
59550: DEC
59551: ST_TO_ADDR
59552: LD_INT 3
59554: PUSH
59555: FOR_TO
59556: IFFALSE 59587
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59558: LD_VAR 0 1
59562: PPUSH
59563: CALL_OW 250
59567: PPUSH
59568: LD_VAR 0 1
59572: PPUSH
59573: CALL_OW 251
59577: PPUSH
59578: LD_INT 1
59580: PPUSH
59581: CALL_OW 453
59585: GO 59555
59587: POP
59588: POP
// end ;
59589: LD_VAR 0 2
59593: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59594: LD_INT 0
59596: PPUSH
59597: PPUSH
59598: PPUSH
59599: PPUSH
59600: PPUSH
59601: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59602: LD_VAR 0 1
59606: NOT
59607: PUSH
59608: LD_VAR 0 2
59612: NOT
59613: OR
59614: PUSH
59615: LD_VAR 0 1
59619: PPUSH
59620: CALL_OW 314
59624: OR
59625: IFFALSE 59629
// exit ;
59627: GO 60070
// x := GetX ( enemy_unit ) ;
59629: LD_ADDR_VAR 0 7
59633: PUSH
59634: LD_VAR 0 2
59638: PPUSH
59639: CALL_OW 250
59643: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59644: LD_ADDR_VAR 0 8
59648: PUSH
59649: LD_VAR 0 2
59653: PPUSH
59654: CALL_OW 251
59658: ST_TO_ADDR
// if not x or not y then
59659: LD_VAR 0 7
59663: NOT
59664: PUSH
59665: LD_VAR 0 8
59669: NOT
59670: OR
59671: IFFALSE 59675
// exit ;
59673: GO 60070
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59675: LD_ADDR_VAR 0 6
59679: PUSH
59680: LD_VAR 0 7
59684: PPUSH
59685: LD_INT 0
59687: PPUSH
59688: LD_INT 4
59690: PPUSH
59691: CALL_OW 272
59695: PUSH
59696: LD_VAR 0 8
59700: PPUSH
59701: LD_INT 0
59703: PPUSH
59704: LD_INT 4
59706: PPUSH
59707: CALL_OW 273
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_VAR 0 7
59720: PPUSH
59721: LD_INT 1
59723: PPUSH
59724: LD_INT 4
59726: PPUSH
59727: CALL_OW 272
59731: PUSH
59732: LD_VAR 0 8
59736: PPUSH
59737: LD_INT 1
59739: PPUSH
59740: LD_INT 4
59742: PPUSH
59743: CALL_OW 273
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_VAR 0 7
59756: PPUSH
59757: LD_INT 2
59759: PPUSH
59760: LD_INT 4
59762: PPUSH
59763: CALL_OW 272
59767: PUSH
59768: LD_VAR 0 8
59772: PPUSH
59773: LD_INT 2
59775: PPUSH
59776: LD_INT 4
59778: PPUSH
59779: CALL_OW 273
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_VAR 0 7
59792: PPUSH
59793: LD_INT 3
59795: PPUSH
59796: LD_INT 4
59798: PPUSH
59799: CALL_OW 272
59803: PUSH
59804: LD_VAR 0 8
59808: PPUSH
59809: LD_INT 3
59811: PPUSH
59812: LD_INT 4
59814: PPUSH
59815: CALL_OW 273
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_VAR 0 7
59828: PPUSH
59829: LD_INT 4
59831: PPUSH
59832: LD_INT 4
59834: PPUSH
59835: CALL_OW 272
59839: PUSH
59840: LD_VAR 0 8
59844: PPUSH
59845: LD_INT 4
59847: PPUSH
59848: LD_INT 4
59850: PPUSH
59851: CALL_OW 273
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_VAR 0 7
59864: PPUSH
59865: LD_INT 5
59867: PPUSH
59868: LD_INT 4
59870: PPUSH
59871: CALL_OW 272
59875: PUSH
59876: LD_VAR 0 8
59880: PPUSH
59881: LD_INT 5
59883: PPUSH
59884: LD_INT 4
59886: PPUSH
59887: CALL_OW 273
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: ST_TO_ADDR
// for i = tmp downto 1 do
59904: LD_ADDR_VAR 0 4
59908: PUSH
59909: DOUBLE
59910: LD_VAR 0 6
59914: INC
59915: ST_TO_ADDR
59916: LD_INT 1
59918: PUSH
59919: FOR_DOWNTO
59920: IFFALSE 60021
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59922: LD_VAR 0 6
59926: PUSH
59927: LD_VAR 0 4
59931: ARRAY
59932: PUSH
59933: LD_INT 1
59935: ARRAY
59936: PPUSH
59937: LD_VAR 0 6
59941: PUSH
59942: LD_VAR 0 4
59946: ARRAY
59947: PUSH
59948: LD_INT 2
59950: ARRAY
59951: PPUSH
59952: CALL_OW 488
59956: NOT
59957: PUSH
59958: LD_VAR 0 6
59962: PUSH
59963: LD_VAR 0 4
59967: ARRAY
59968: PUSH
59969: LD_INT 1
59971: ARRAY
59972: PPUSH
59973: LD_VAR 0 6
59977: PUSH
59978: LD_VAR 0 4
59982: ARRAY
59983: PUSH
59984: LD_INT 2
59986: ARRAY
59987: PPUSH
59988: CALL_OW 428
59992: PUSH
59993: LD_INT 0
59995: NONEQUAL
59996: OR
59997: IFFALSE 60019
// tmp := Delete ( tmp , i ) ;
59999: LD_ADDR_VAR 0 6
60003: PUSH
60004: LD_VAR 0 6
60008: PPUSH
60009: LD_VAR 0 4
60013: PPUSH
60014: CALL_OW 3
60018: ST_TO_ADDR
60019: GO 59919
60021: POP
60022: POP
// j := GetClosestHex ( unit , tmp ) ;
60023: LD_ADDR_VAR 0 5
60027: PUSH
60028: LD_VAR 0 1
60032: PPUSH
60033: LD_VAR 0 6
60037: PPUSH
60038: CALL 59340 0 2
60042: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60043: LD_VAR 0 1
60047: PPUSH
60048: LD_VAR 0 5
60052: PUSH
60053: LD_INT 1
60055: ARRAY
60056: PPUSH
60057: LD_VAR 0 5
60061: PUSH
60062: LD_INT 2
60064: ARRAY
60065: PPUSH
60066: CALL_OW 111
// end ;
60070: LD_VAR 0 3
60074: RET
// export function PrepareApemanSoldier ( ) ; begin
60075: LD_INT 0
60077: PPUSH
// uc_nation := 0 ;
60078: LD_ADDR_OWVAR 21
60082: PUSH
60083: LD_INT 0
60085: ST_TO_ADDR
// hc_sex := sex_male ;
60086: LD_ADDR_OWVAR 27
60090: PUSH
60091: LD_INT 1
60093: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60094: LD_ADDR_OWVAR 28
60098: PUSH
60099: LD_INT 15
60101: ST_TO_ADDR
// hc_gallery :=  ;
60102: LD_ADDR_OWVAR 33
60106: PUSH
60107: LD_STRING 
60109: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60110: LD_ADDR_OWVAR 31
60114: PUSH
60115: LD_INT 0
60117: PPUSH
60118: LD_INT 3
60120: PPUSH
60121: CALL_OW 12
60125: PUSH
60126: LD_INT 0
60128: PPUSH
60129: LD_INT 3
60131: PPUSH
60132: CALL_OW 12
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: ST_TO_ADDR
// end ;
60149: LD_VAR 0 1
60153: RET
// export function PrepareApemanEngineer ( ) ; begin
60154: LD_INT 0
60156: PPUSH
// uc_nation := 0 ;
60157: LD_ADDR_OWVAR 21
60161: PUSH
60162: LD_INT 0
60164: ST_TO_ADDR
// hc_sex := sex_male ;
60165: LD_ADDR_OWVAR 27
60169: PUSH
60170: LD_INT 1
60172: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60173: LD_ADDR_OWVAR 28
60177: PUSH
60178: LD_INT 16
60180: ST_TO_ADDR
// hc_gallery :=  ;
60181: LD_ADDR_OWVAR 33
60185: PUSH
60186: LD_STRING 
60188: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60189: LD_ADDR_OWVAR 31
60193: PUSH
60194: LD_INT 0
60196: PPUSH
60197: LD_INT 3
60199: PPUSH
60200: CALL_OW 12
60204: PUSH
60205: LD_INT 0
60207: PPUSH
60208: LD_INT 3
60210: PPUSH
60211: CALL_OW 12
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: ST_TO_ADDR
// end ;
60228: LD_VAR 0 1
60232: RET
// export function PrepareApeman ( agressivity ) ; begin
60233: LD_INT 0
60235: PPUSH
// uc_side := 0 ;
60236: LD_ADDR_OWVAR 20
60240: PUSH
60241: LD_INT 0
60243: ST_TO_ADDR
// uc_nation := 0 ;
60244: LD_ADDR_OWVAR 21
60248: PUSH
60249: LD_INT 0
60251: ST_TO_ADDR
// hc_sex := sex_male ;
60252: LD_ADDR_OWVAR 27
60256: PUSH
60257: LD_INT 1
60259: ST_TO_ADDR
// hc_class := class_apeman ;
60260: LD_ADDR_OWVAR 28
60264: PUSH
60265: LD_INT 12
60267: ST_TO_ADDR
// hc_gallery :=  ;
60268: LD_ADDR_OWVAR 33
60272: PUSH
60273: LD_STRING 
60275: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60276: LD_ADDR_OWVAR 35
60280: PUSH
60281: LD_VAR 0 1
60285: NEG
60286: PPUSH
60287: LD_VAR 0 1
60291: PPUSH
60292: CALL_OW 12
60296: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60297: LD_ADDR_OWVAR 31
60301: PUSH
60302: LD_INT 0
60304: PPUSH
60305: LD_INT 3
60307: PPUSH
60308: CALL_OW 12
60312: PUSH
60313: LD_INT 0
60315: PPUSH
60316: LD_INT 3
60318: PPUSH
60319: CALL_OW 12
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: ST_TO_ADDR
// end ;
60336: LD_VAR 0 2
60340: RET
// export function PrepareTiger ( agressivity ) ; begin
60341: LD_INT 0
60343: PPUSH
// uc_side := 0 ;
60344: LD_ADDR_OWVAR 20
60348: PUSH
60349: LD_INT 0
60351: ST_TO_ADDR
// uc_nation := 0 ;
60352: LD_ADDR_OWVAR 21
60356: PUSH
60357: LD_INT 0
60359: ST_TO_ADDR
// hc_class := class_tiger ;
60360: LD_ADDR_OWVAR 28
60364: PUSH
60365: LD_INT 14
60367: ST_TO_ADDR
// hc_gallery :=  ;
60368: LD_ADDR_OWVAR 33
60372: PUSH
60373: LD_STRING 
60375: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60376: LD_ADDR_OWVAR 35
60380: PUSH
60381: LD_VAR 0 1
60385: NEG
60386: PPUSH
60387: LD_VAR 0 1
60391: PPUSH
60392: CALL_OW 12
60396: ST_TO_ADDR
// end ;
60397: LD_VAR 0 2
60401: RET
// export function PrepareEnchidna ( ) ; begin
60402: LD_INT 0
60404: PPUSH
// uc_side := 0 ;
60405: LD_ADDR_OWVAR 20
60409: PUSH
60410: LD_INT 0
60412: ST_TO_ADDR
// uc_nation := 0 ;
60413: LD_ADDR_OWVAR 21
60417: PUSH
60418: LD_INT 0
60420: ST_TO_ADDR
// hc_class := class_baggie ;
60421: LD_ADDR_OWVAR 28
60425: PUSH
60426: LD_INT 13
60428: ST_TO_ADDR
// hc_gallery :=  ;
60429: LD_ADDR_OWVAR 33
60433: PUSH
60434: LD_STRING 
60436: ST_TO_ADDR
// end ;
60437: LD_VAR 0 1
60441: RET
// export function PrepareFrog ( ) ; begin
60442: LD_INT 0
60444: PPUSH
// uc_side := 0 ;
60445: LD_ADDR_OWVAR 20
60449: PUSH
60450: LD_INT 0
60452: ST_TO_ADDR
// uc_nation := 0 ;
60453: LD_ADDR_OWVAR 21
60457: PUSH
60458: LD_INT 0
60460: ST_TO_ADDR
// hc_class := class_frog ;
60461: LD_ADDR_OWVAR 28
60465: PUSH
60466: LD_INT 19
60468: ST_TO_ADDR
// hc_gallery :=  ;
60469: LD_ADDR_OWVAR 33
60473: PUSH
60474: LD_STRING 
60476: ST_TO_ADDR
// end ;
60477: LD_VAR 0 1
60481: RET
// export function PrepareFish ( ) ; begin
60482: LD_INT 0
60484: PPUSH
// uc_side := 0 ;
60485: LD_ADDR_OWVAR 20
60489: PUSH
60490: LD_INT 0
60492: ST_TO_ADDR
// uc_nation := 0 ;
60493: LD_ADDR_OWVAR 21
60497: PUSH
60498: LD_INT 0
60500: ST_TO_ADDR
// hc_class := class_fish ;
60501: LD_ADDR_OWVAR 28
60505: PUSH
60506: LD_INT 20
60508: ST_TO_ADDR
// hc_gallery :=  ;
60509: LD_ADDR_OWVAR 33
60513: PUSH
60514: LD_STRING 
60516: ST_TO_ADDR
// end ;
60517: LD_VAR 0 1
60521: RET
// export function PrepareBird ( ) ; begin
60522: LD_INT 0
60524: PPUSH
// uc_side := 0 ;
60525: LD_ADDR_OWVAR 20
60529: PUSH
60530: LD_INT 0
60532: ST_TO_ADDR
// uc_nation := 0 ;
60533: LD_ADDR_OWVAR 21
60537: PUSH
60538: LD_INT 0
60540: ST_TO_ADDR
// hc_class := class_phororhacos ;
60541: LD_ADDR_OWVAR 28
60545: PUSH
60546: LD_INT 18
60548: ST_TO_ADDR
// hc_gallery :=  ;
60549: LD_ADDR_OWVAR 33
60553: PUSH
60554: LD_STRING 
60556: ST_TO_ADDR
// end ;
60557: LD_VAR 0 1
60561: RET
// export function PrepareHorse ( ) ; begin
60562: LD_INT 0
60564: PPUSH
// uc_side := 0 ;
60565: LD_ADDR_OWVAR 20
60569: PUSH
60570: LD_INT 0
60572: ST_TO_ADDR
// uc_nation := 0 ;
60573: LD_ADDR_OWVAR 21
60577: PUSH
60578: LD_INT 0
60580: ST_TO_ADDR
// hc_class := class_horse ;
60581: LD_ADDR_OWVAR 28
60585: PUSH
60586: LD_INT 21
60588: ST_TO_ADDR
// hc_gallery :=  ;
60589: LD_ADDR_OWVAR 33
60593: PUSH
60594: LD_STRING 
60596: ST_TO_ADDR
// end ;
60597: LD_VAR 0 1
60601: RET
// export function PrepareMastodont ( ) ; begin
60602: LD_INT 0
60604: PPUSH
// uc_side := 0 ;
60605: LD_ADDR_OWVAR 20
60609: PUSH
60610: LD_INT 0
60612: ST_TO_ADDR
// uc_nation := 0 ;
60613: LD_ADDR_OWVAR 21
60617: PUSH
60618: LD_INT 0
60620: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60621: LD_ADDR_OWVAR 37
60625: PUSH
60626: LD_INT 31
60628: ST_TO_ADDR
// vc_control := control_rider ;
60629: LD_ADDR_OWVAR 38
60633: PUSH
60634: LD_INT 4
60636: ST_TO_ADDR
// end ;
60637: LD_VAR 0 1
60641: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60642: LD_INT 0
60644: PPUSH
60645: PPUSH
60646: PPUSH
// uc_side = 0 ;
60647: LD_ADDR_OWVAR 20
60651: PUSH
60652: LD_INT 0
60654: ST_TO_ADDR
// uc_nation = 0 ;
60655: LD_ADDR_OWVAR 21
60659: PUSH
60660: LD_INT 0
60662: ST_TO_ADDR
// InitHc_All ( ) ;
60663: CALL_OW 584
// InitVc ;
60667: CALL_OW 20
// if mastodonts then
60671: LD_VAR 0 6
60675: IFFALSE 60742
// for i = 1 to mastodonts do
60677: LD_ADDR_VAR 0 11
60681: PUSH
60682: DOUBLE
60683: LD_INT 1
60685: DEC
60686: ST_TO_ADDR
60687: LD_VAR 0 6
60691: PUSH
60692: FOR_TO
60693: IFFALSE 60740
// begin vc_chassis := 31 ;
60695: LD_ADDR_OWVAR 37
60699: PUSH
60700: LD_INT 31
60702: ST_TO_ADDR
// vc_control := control_rider ;
60703: LD_ADDR_OWVAR 38
60707: PUSH
60708: LD_INT 4
60710: ST_TO_ADDR
// animal := CreateVehicle ;
60711: LD_ADDR_VAR 0 12
60715: PUSH
60716: CALL_OW 45
60720: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60721: LD_VAR 0 12
60725: PPUSH
60726: LD_VAR 0 8
60730: PPUSH
60731: LD_INT 0
60733: PPUSH
60734: CALL 62877 0 3
// end ;
60738: GO 60692
60740: POP
60741: POP
// if horses then
60742: LD_VAR 0 5
60746: IFFALSE 60813
// for i = 1 to horses do
60748: LD_ADDR_VAR 0 11
60752: PUSH
60753: DOUBLE
60754: LD_INT 1
60756: DEC
60757: ST_TO_ADDR
60758: LD_VAR 0 5
60762: PUSH
60763: FOR_TO
60764: IFFALSE 60811
// begin hc_class := 21 ;
60766: LD_ADDR_OWVAR 28
60770: PUSH
60771: LD_INT 21
60773: ST_TO_ADDR
// hc_gallery :=  ;
60774: LD_ADDR_OWVAR 33
60778: PUSH
60779: LD_STRING 
60781: ST_TO_ADDR
// animal := CreateHuman ;
60782: LD_ADDR_VAR 0 12
60786: PUSH
60787: CALL_OW 44
60791: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60792: LD_VAR 0 12
60796: PPUSH
60797: LD_VAR 0 8
60801: PPUSH
60802: LD_INT 0
60804: PPUSH
60805: CALL 62877 0 3
// end ;
60809: GO 60763
60811: POP
60812: POP
// if birds then
60813: LD_VAR 0 1
60817: IFFALSE 60884
// for i = 1 to birds do
60819: LD_ADDR_VAR 0 11
60823: PUSH
60824: DOUBLE
60825: LD_INT 1
60827: DEC
60828: ST_TO_ADDR
60829: LD_VAR 0 1
60833: PUSH
60834: FOR_TO
60835: IFFALSE 60882
// begin hc_class = 18 ;
60837: LD_ADDR_OWVAR 28
60841: PUSH
60842: LD_INT 18
60844: ST_TO_ADDR
// hc_gallery =  ;
60845: LD_ADDR_OWVAR 33
60849: PUSH
60850: LD_STRING 
60852: ST_TO_ADDR
// animal := CreateHuman ;
60853: LD_ADDR_VAR 0 12
60857: PUSH
60858: CALL_OW 44
60862: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60863: LD_VAR 0 12
60867: PPUSH
60868: LD_VAR 0 8
60872: PPUSH
60873: LD_INT 0
60875: PPUSH
60876: CALL 62877 0 3
// end ;
60880: GO 60834
60882: POP
60883: POP
// if tigers then
60884: LD_VAR 0 2
60888: IFFALSE 60972
// for i = 1 to tigers do
60890: LD_ADDR_VAR 0 11
60894: PUSH
60895: DOUBLE
60896: LD_INT 1
60898: DEC
60899: ST_TO_ADDR
60900: LD_VAR 0 2
60904: PUSH
60905: FOR_TO
60906: IFFALSE 60970
// begin hc_class = class_tiger ;
60908: LD_ADDR_OWVAR 28
60912: PUSH
60913: LD_INT 14
60915: ST_TO_ADDR
// hc_gallery =  ;
60916: LD_ADDR_OWVAR 33
60920: PUSH
60921: LD_STRING 
60923: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60924: LD_ADDR_OWVAR 35
60928: PUSH
60929: LD_INT 7
60931: NEG
60932: PPUSH
60933: LD_INT 7
60935: PPUSH
60936: CALL_OW 12
60940: ST_TO_ADDR
// animal := CreateHuman ;
60941: LD_ADDR_VAR 0 12
60945: PUSH
60946: CALL_OW 44
60950: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60951: LD_VAR 0 12
60955: PPUSH
60956: LD_VAR 0 8
60960: PPUSH
60961: LD_INT 0
60963: PPUSH
60964: CALL 62877 0 3
// end ;
60968: GO 60905
60970: POP
60971: POP
// if apemans then
60972: LD_VAR 0 3
60976: IFFALSE 61099
// for i = 1 to apemans do
60978: LD_ADDR_VAR 0 11
60982: PUSH
60983: DOUBLE
60984: LD_INT 1
60986: DEC
60987: ST_TO_ADDR
60988: LD_VAR 0 3
60992: PUSH
60993: FOR_TO
60994: IFFALSE 61097
// begin hc_class = class_apeman ;
60996: LD_ADDR_OWVAR 28
61000: PUSH
61001: LD_INT 12
61003: ST_TO_ADDR
// hc_gallery =  ;
61004: LD_ADDR_OWVAR 33
61008: PUSH
61009: LD_STRING 
61011: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61012: LD_ADDR_OWVAR 35
61016: PUSH
61017: LD_INT 2
61019: NEG
61020: PPUSH
61021: LD_INT 2
61023: PPUSH
61024: CALL_OW 12
61028: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61029: LD_ADDR_OWVAR 31
61033: PUSH
61034: LD_INT 1
61036: PPUSH
61037: LD_INT 3
61039: PPUSH
61040: CALL_OW 12
61044: PUSH
61045: LD_INT 1
61047: PPUSH
61048: LD_INT 3
61050: PPUSH
61051: CALL_OW 12
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: ST_TO_ADDR
// animal := CreateHuman ;
61068: LD_ADDR_VAR 0 12
61072: PUSH
61073: CALL_OW 44
61077: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61078: LD_VAR 0 12
61082: PPUSH
61083: LD_VAR 0 8
61087: PPUSH
61088: LD_INT 0
61090: PPUSH
61091: CALL 62877 0 3
// end ;
61095: GO 60993
61097: POP
61098: POP
// if enchidnas then
61099: LD_VAR 0 4
61103: IFFALSE 61170
// for i = 1 to enchidnas do
61105: LD_ADDR_VAR 0 11
61109: PUSH
61110: DOUBLE
61111: LD_INT 1
61113: DEC
61114: ST_TO_ADDR
61115: LD_VAR 0 4
61119: PUSH
61120: FOR_TO
61121: IFFALSE 61168
// begin hc_class = 13 ;
61123: LD_ADDR_OWVAR 28
61127: PUSH
61128: LD_INT 13
61130: ST_TO_ADDR
// hc_gallery =  ;
61131: LD_ADDR_OWVAR 33
61135: PUSH
61136: LD_STRING 
61138: ST_TO_ADDR
// animal := CreateHuman ;
61139: LD_ADDR_VAR 0 12
61143: PUSH
61144: CALL_OW 44
61148: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61149: LD_VAR 0 12
61153: PPUSH
61154: LD_VAR 0 8
61158: PPUSH
61159: LD_INT 0
61161: PPUSH
61162: CALL 62877 0 3
// end ;
61166: GO 61120
61168: POP
61169: POP
// if fishes then
61170: LD_VAR 0 7
61174: IFFALSE 61241
// for i = 1 to fishes do
61176: LD_ADDR_VAR 0 11
61180: PUSH
61181: DOUBLE
61182: LD_INT 1
61184: DEC
61185: ST_TO_ADDR
61186: LD_VAR 0 7
61190: PUSH
61191: FOR_TO
61192: IFFALSE 61239
// begin hc_class = 20 ;
61194: LD_ADDR_OWVAR 28
61198: PUSH
61199: LD_INT 20
61201: ST_TO_ADDR
// hc_gallery =  ;
61202: LD_ADDR_OWVAR 33
61206: PUSH
61207: LD_STRING 
61209: ST_TO_ADDR
// animal := CreateHuman ;
61210: LD_ADDR_VAR 0 12
61214: PUSH
61215: CALL_OW 44
61219: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61220: LD_VAR 0 12
61224: PPUSH
61225: LD_VAR 0 9
61229: PPUSH
61230: LD_INT 0
61232: PPUSH
61233: CALL 62877 0 3
// end ;
61237: GO 61191
61239: POP
61240: POP
// end ;
61241: LD_VAR 0 10
61245: RET
// export function WantHeal ( sci , unit ) ; begin
61246: LD_INT 0
61248: PPUSH
// if GetTaskList ( sci ) > 0 then
61249: LD_VAR 0 1
61253: PPUSH
61254: CALL_OW 437
61258: PUSH
61259: LD_INT 0
61261: GREATER
61262: IFFALSE 61332
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61264: LD_VAR 0 1
61268: PPUSH
61269: CALL_OW 437
61273: PUSH
61274: LD_INT 1
61276: ARRAY
61277: PUSH
61278: LD_INT 1
61280: ARRAY
61281: PUSH
61282: LD_STRING l
61284: EQUAL
61285: PUSH
61286: LD_VAR 0 1
61290: PPUSH
61291: CALL_OW 437
61295: PUSH
61296: LD_INT 1
61298: ARRAY
61299: PUSH
61300: LD_INT 4
61302: ARRAY
61303: PUSH
61304: LD_VAR 0 2
61308: EQUAL
61309: AND
61310: IFFALSE 61322
// result := true else
61312: LD_ADDR_VAR 0 3
61316: PUSH
61317: LD_INT 1
61319: ST_TO_ADDR
61320: GO 61330
// result := false ;
61322: LD_ADDR_VAR 0 3
61326: PUSH
61327: LD_INT 0
61329: ST_TO_ADDR
// end else
61330: GO 61340
// result := false ;
61332: LD_ADDR_VAR 0 3
61336: PUSH
61337: LD_INT 0
61339: ST_TO_ADDR
// end ;
61340: LD_VAR 0 3
61344: RET
// export function HealTarget ( sci ) ; begin
61345: LD_INT 0
61347: PPUSH
// if not sci then
61348: LD_VAR 0 1
61352: NOT
61353: IFFALSE 61357
// exit ;
61355: GO 61422
// result := 0 ;
61357: LD_ADDR_VAR 0 2
61361: PUSH
61362: LD_INT 0
61364: ST_TO_ADDR
// if GetTaskList ( sci ) then
61365: LD_VAR 0 1
61369: PPUSH
61370: CALL_OW 437
61374: IFFALSE 61422
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61376: LD_VAR 0 1
61380: PPUSH
61381: CALL_OW 437
61385: PUSH
61386: LD_INT 1
61388: ARRAY
61389: PUSH
61390: LD_INT 1
61392: ARRAY
61393: PUSH
61394: LD_STRING l
61396: EQUAL
61397: IFFALSE 61422
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61399: LD_ADDR_VAR 0 2
61403: PUSH
61404: LD_VAR 0 1
61408: PPUSH
61409: CALL_OW 437
61413: PUSH
61414: LD_INT 1
61416: ARRAY
61417: PUSH
61418: LD_INT 4
61420: ARRAY
61421: ST_TO_ADDR
// end ;
61422: LD_VAR 0 2
61426: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61427: LD_INT 0
61429: PPUSH
61430: PPUSH
61431: PPUSH
61432: PPUSH
// if not base_units then
61433: LD_VAR 0 1
61437: NOT
61438: IFFALSE 61442
// exit ;
61440: GO 61529
// result := false ;
61442: LD_ADDR_VAR 0 2
61446: PUSH
61447: LD_INT 0
61449: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61450: LD_ADDR_VAR 0 5
61454: PUSH
61455: LD_VAR 0 1
61459: PPUSH
61460: LD_INT 21
61462: PUSH
61463: LD_INT 3
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PPUSH
61470: CALL_OW 72
61474: ST_TO_ADDR
// if not tmp then
61475: LD_VAR 0 5
61479: NOT
61480: IFFALSE 61484
// exit ;
61482: GO 61529
// for i in tmp do
61484: LD_ADDR_VAR 0 3
61488: PUSH
61489: LD_VAR 0 5
61493: PUSH
61494: FOR_IN
61495: IFFALSE 61527
// begin result := EnemyInRange ( i , 22 ) ;
61497: LD_ADDR_VAR 0 2
61501: PUSH
61502: LD_VAR 0 3
61506: PPUSH
61507: LD_INT 22
61509: PPUSH
61510: CALL 59142 0 2
61514: ST_TO_ADDR
// if result then
61515: LD_VAR 0 2
61519: IFFALSE 61525
// exit ;
61521: POP
61522: POP
61523: GO 61529
// end ;
61525: GO 61494
61527: POP
61528: POP
// end ;
61529: LD_VAR 0 2
61533: RET
// export function FilterByTag ( units , tag ) ; begin
61534: LD_INT 0
61536: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61537: LD_ADDR_VAR 0 3
61541: PUSH
61542: LD_VAR 0 1
61546: PPUSH
61547: LD_INT 120
61549: PUSH
61550: LD_VAR 0 2
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PPUSH
61559: CALL_OW 72
61563: ST_TO_ADDR
// end ;
61564: LD_VAR 0 3
61568: RET
// export function IsDriver ( un ) ; begin
61569: LD_INT 0
61571: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61572: LD_ADDR_VAR 0 2
61576: PUSH
61577: LD_VAR 0 1
61581: PUSH
61582: LD_INT 55
61584: PUSH
61585: EMPTY
61586: LIST
61587: PPUSH
61588: CALL_OW 69
61592: IN
61593: ST_TO_ADDR
// end ;
61594: LD_VAR 0 2
61598: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61599: LD_INT 0
61601: PPUSH
61602: PPUSH
// list := [ ] ;
61603: LD_ADDR_VAR 0 5
61607: PUSH
61608: EMPTY
61609: ST_TO_ADDR
// case d of 0 :
61610: LD_VAR 0 3
61614: PUSH
61615: LD_INT 0
61617: DOUBLE
61618: EQUAL
61619: IFTRUE 61623
61621: GO 61756
61623: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61624: LD_ADDR_VAR 0 5
61628: PUSH
61629: LD_VAR 0 1
61633: PUSH
61634: LD_INT 4
61636: MINUS
61637: PUSH
61638: LD_VAR 0 2
61642: PUSH
61643: LD_INT 4
61645: MINUS
61646: PUSH
61647: LD_INT 2
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: LIST
61654: PUSH
61655: LD_VAR 0 1
61659: PUSH
61660: LD_INT 3
61662: MINUS
61663: PUSH
61664: LD_VAR 0 2
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: LIST
61676: PUSH
61677: LD_VAR 0 1
61681: PUSH
61682: LD_INT 4
61684: PLUS
61685: PUSH
61686: LD_VAR 0 2
61690: PUSH
61691: LD_INT 4
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: LIST
61698: PUSH
61699: LD_VAR 0 1
61703: PUSH
61704: LD_INT 3
61706: PLUS
61707: PUSH
61708: LD_VAR 0 2
61712: PUSH
61713: LD_INT 3
61715: PLUS
61716: PUSH
61717: LD_INT 5
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: LIST
61724: PUSH
61725: LD_VAR 0 1
61729: PUSH
61730: LD_VAR 0 2
61734: PUSH
61735: LD_INT 4
61737: PLUS
61738: PUSH
61739: LD_INT 0
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: LIST
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: ST_TO_ADDR
// end ; 1 :
61754: GO 62454
61756: LD_INT 1
61758: DOUBLE
61759: EQUAL
61760: IFTRUE 61764
61762: GO 61897
61764: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61765: LD_ADDR_VAR 0 5
61769: PUSH
61770: LD_VAR 0 1
61774: PUSH
61775: LD_VAR 0 2
61779: PUSH
61780: LD_INT 4
61782: MINUS
61783: PUSH
61784: LD_INT 3
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: LIST
61791: PUSH
61792: LD_VAR 0 1
61796: PUSH
61797: LD_INT 3
61799: MINUS
61800: PUSH
61801: LD_VAR 0 2
61805: PUSH
61806: LD_INT 3
61808: MINUS
61809: PUSH
61810: LD_INT 2
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: LIST
61817: PUSH
61818: LD_VAR 0 1
61822: PUSH
61823: LD_INT 4
61825: MINUS
61826: PUSH
61827: LD_VAR 0 2
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: LIST
61839: PUSH
61840: LD_VAR 0 1
61844: PUSH
61845: LD_VAR 0 2
61849: PUSH
61850: LD_INT 3
61852: PLUS
61853: PUSH
61854: LD_INT 0
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: LIST
61861: PUSH
61862: LD_VAR 0 1
61866: PUSH
61867: LD_INT 4
61869: PLUS
61870: PUSH
61871: LD_VAR 0 2
61875: PUSH
61876: LD_INT 4
61878: PLUS
61879: PUSH
61880: LD_INT 5
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: LIST
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: ST_TO_ADDR
// end ; 2 :
61895: GO 62454
61897: LD_INT 2
61899: DOUBLE
61900: EQUAL
61901: IFTRUE 61905
61903: GO 62034
61905: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61906: LD_ADDR_VAR 0 5
61910: PUSH
61911: LD_VAR 0 1
61915: PUSH
61916: LD_VAR 0 2
61920: PUSH
61921: LD_INT 3
61923: MINUS
61924: PUSH
61925: LD_INT 3
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: LIST
61932: PUSH
61933: LD_VAR 0 1
61937: PUSH
61938: LD_INT 4
61940: PLUS
61941: PUSH
61942: LD_VAR 0 2
61946: PUSH
61947: LD_INT 4
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: LIST
61954: PUSH
61955: LD_VAR 0 1
61959: PUSH
61960: LD_VAR 0 2
61964: PUSH
61965: LD_INT 4
61967: PLUS
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: LIST
61976: PUSH
61977: LD_VAR 0 1
61981: PUSH
61982: LD_INT 3
61984: MINUS
61985: PUSH
61986: LD_VAR 0 2
61990: PUSH
61991: LD_INT 1
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: LIST
61998: PUSH
61999: LD_VAR 0 1
62003: PUSH
62004: LD_INT 4
62006: MINUS
62007: PUSH
62008: LD_VAR 0 2
62012: PUSH
62013: LD_INT 4
62015: MINUS
62016: PUSH
62017: LD_INT 2
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: LIST
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: ST_TO_ADDR
// end ; 3 :
62032: GO 62454
62034: LD_INT 3
62036: DOUBLE
62037: EQUAL
62038: IFTRUE 62042
62040: GO 62175
62042: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62043: LD_ADDR_VAR 0 5
62047: PUSH
62048: LD_VAR 0 1
62052: PUSH
62053: LD_INT 3
62055: PLUS
62056: PUSH
62057: LD_VAR 0 2
62061: PUSH
62062: LD_INT 4
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: LIST
62069: PUSH
62070: LD_VAR 0 1
62074: PUSH
62075: LD_INT 4
62077: PLUS
62078: PUSH
62079: LD_VAR 0 2
62083: PUSH
62084: LD_INT 4
62086: PLUS
62087: PUSH
62088: LD_INT 5
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: LIST
62095: PUSH
62096: LD_VAR 0 1
62100: PUSH
62101: LD_INT 4
62103: MINUS
62104: PUSH
62105: LD_VAR 0 2
62109: PUSH
62110: LD_INT 1
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: LIST
62117: PUSH
62118: LD_VAR 0 1
62122: PUSH
62123: LD_VAR 0 2
62127: PUSH
62128: LD_INT 4
62130: MINUS
62131: PUSH
62132: LD_INT 3
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: LIST
62139: PUSH
62140: LD_VAR 0 1
62144: PUSH
62145: LD_INT 3
62147: MINUS
62148: PUSH
62149: LD_VAR 0 2
62153: PUSH
62154: LD_INT 3
62156: MINUS
62157: PUSH
62158: LD_INT 2
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: LIST
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: ST_TO_ADDR
// end ; 4 :
62173: GO 62454
62175: LD_INT 4
62177: DOUBLE
62178: EQUAL
62179: IFTRUE 62183
62181: GO 62316
62183: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62184: LD_ADDR_VAR 0 5
62188: PUSH
62189: LD_VAR 0 1
62193: PUSH
62194: LD_VAR 0 2
62198: PUSH
62199: LD_INT 4
62201: PLUS
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: LIST
62210: PUSH
62211: LD_VAR 0 1
62215: PUSH
62216: LD_INT 3
62218: PLUS
62219: PUSH
62220: LD_VAR 0 2
62224: PUSH
62225: LD_INT 3
62227: PLUS
62228: PUSH
62229: LD_INT 5
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: LIST
62236: PUSH
62237: LD_VAR 0 1
62241: PUSH
62242: LD_INT 4
62244: PLUS
62245: PUSH
62246: LD_VAR 0 2
62250: PUSH
62251: LD_INT 4
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: LIST
62258: PUSH
62259: LD_VAR 0 1
62263: PUSH
62264: LD_VAR 0 2
62268: PUSH
62269: LD_INT 3
62271: MINUS
62272: PUSH
62273: LD_INT 3
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: LIST
62280: PUSH
62281: LD_VAR 0 1
62285: PUSH
62286: LD_INT 4
62288: MINUS
62289: PUSH
62290: LD_VAR 0 2
62294: PUSH
62295: LD_INT 4
62297: MINUS
62298: PUSH
62299: LD_INT 2
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: LIST
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: ST_TO_ADDR
// end ; 5 :
62314: GO 62454
62316: LD_INT 5
62318: DOUBLE
62319: EQUAL
62320: IFTRUE 62324
62322: GO 62453
62324: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62325: LD_ADDR_VAR 0 5
62329: PUSH
62330: LD_VAR 0 1
62334: PUSH
62335: LD_INT 4
62337: MINUS
62338: PUSH
62339: LD_VAR 0 2
62343: PUSH
62344: LD_INT 1
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: LIST
62351: PUSH
62352: LD_VAR 0 1
62356: PUSH
62357: LD_VAR 0 2
62361: PUSH
62362: LD_INT 4
62364: MINUS
62365: PUSH
62366: LD_INT 3
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: LIST
62373: PUSH
62374: LD_VAR 0 1
62378: PUSH
62379: LD_INT 4
62381: PLUS
62382: PUSH
62383: LD_VAR 0 2
62387: PUSH
62388: LD_INT 4
62390: PLUS
62391: PUSH
62392: LD_INT 5
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: LIST
62399: PUSH
62400: LD_VAR 0 1
62404: PUSH
62405: LD_INT 3
62407: PLUS
62408: PUSH
62409: LD_VAR 0 2
62413: PUSH
62414: LD_INT 4
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: LIST
62421: PUSH
62422: LD_VAR 0 1
62426: PUSH
62427: LD_VAR 0 2
62431: PUSH
62432: LD_INT 3
62434: PLUS
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: LIST
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: ST_TO_ADDR
// end ; end ;
62451: GO 62454
62453: POP
// result := list ;
62454: LD_ADDR_VAR 0 4
62458: PUSH
62459: LD_VAR 0 5
62463: ST_TO_ADDR
// end ;
62464: LD_VAR 0 4
62468: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62469: LD_INT 0
62471: PPUSH
62472: PPUSH
62473: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62474: LD_VAR 0 1
62478: NOT
62479: PUSH
62480: LD_VAR 0 2
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: LD_INT 2
62490: PUSH
62491: LD_INT 3
62493: PUSH
62494: LD_INT 4
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: IN
62503: NOT
62504: OR
62505: IFFALSE 62509
// exit ;
62507: GO 62601
// tmp := [ ] ;
62509: LD_ADDR_VAR 0 5
62513: PUSH
62514: EMPTY
62515: ST_TO_ADDR
// for i in units do
62516: LD_ADDR_VAR 0 4
62520: PUSH
62521: LD_VAR 0 1
62525: PUSH
62526: FOR_IN
62527: IFFALSE 62570
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62529: LD_ADDR_VAR 0 5
62533: PUSH
62534: LD_VAR 0 5
62538: PPUSH
62539: LD_VAR 0 5
62543: PUSH
62544: LD_INT 1
62546: PLUS
62547: PPUSH
62548: LD_VAR 0 4
62552: PPUSH
62553: LD_VAR 0 2
62557: PPUSH
62558: CALL_OW 259
62562: PPUSH
62563: CALL_OW 2
62567: ST_TO_ADDR
62568: GO 62526
62570: POP
62571: POP
// if not tmp then
62572: LD_VAR 0 5
62576: NOT
62577: IFFALSE 62581
// exit ;
62579: GO 62601
// result := SortListByListDesc ( units , tmp ) ;
62581: LD_ADDR_VAR 0 3
62585: PUSH
62586: LD_VAR 0 1
62590: PPUSH
62591: LD_VAR 0 5
62595: PPUSH
62596: CALL_OW 77
62600: ST_TO_ADDR
// end ;
62601: LD_VAR 0 3
62605: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62606: LD_INT 0
62608: PPUSH
62609: PPUSH
62610: PPUSH
// result := false ;
62611: LD_ADDR_VAR 0 3
62615: PUSH
62616: LD_INT 0
62618: ST_TO_ADDR
// x := GetX ( building ) ;
62619: LD_ADDR_VAR 0 4
62623: PUSH
62624: LD_VAR 0 2
62628: PPUSH
62629: CALL_OW 250
62633: ST_TO_ADDR
// y := GetY ( building ) ;
62634: LD_ADDR_VAR 0 5
62638: PUSH
62639: LD_VAR 0 2
62643: PPUSH
62644: CALL_OW 251
62648: ST_TO_ADDR
// if not building or not x or not y then
62649: LD_VAR 0 2
62653: NOT
62654: PUSH
62655: LD_VAR 0 4
62659: NOT
62660: OR
62661: PUSH
62662: LD_VAR 0 5
62666: NOT
62667: OR
62668: IFFALSE 62672
// exit ;
62670: GO 62764
// if GetTaskList ( unit ) then
62672: LD_VAR 0 1
62676: PPUSH
62677: CALL_OW 437
62681: IFFALSE 62764
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62683: LD_STRING e
62685: PUSH
62686: LD_VAR 0 1
62690: PPUSH
62691: CALL_OW 437
62695: PUSH
62696: LD_INT 1
62698: ARRAY
62699: PUSH
62700: LD_INT 1
62702: ARRAY
62703: EQUAL
62704: PUSH
62705: LD_VAR 0 4
62709: PUSH
62710: LD_VAR 0 1
62714: PPUSH
62715: CALL_OW 437
62719: PUSH
62720: LD_INT 1
62722: ARRAY
62723: PUSH
62724: LD_INT 2
62726: ARRAY
62727: EQUAL
62728: AND
62729: PUSH
62730: LD_VAR 0 5
62734: PUSH
62735: LD_VAR 0 1
62739: PPUSH
62740: CALL_OW 437
62744: PUSH
62745: LD_INT 1
62747: ARRAY
62748: PUSH
62749: LD_INT 3
62751: ARRAY
62752: EQUAL
62753: AND
62754: IFFALSE 62764
// result := true end ;
62756: LD_ADDR_VAR 0 3
62760: PUSH
62761: LD_INT 1
62763: ST_TO_ADDR
// end ;
62764: LD_VAR 0 3
62768: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62769: LD_INT 0
62771: PPUSH
// result := false ;
62772: LD_ADDR_VAR 0 4
62776: PUSH
62777: LD_INT 0
62779: ST_TO_ADDR
// if GetTaskList ( unit ) then
62780: LD_VAR 0 1
62784: PPUSH
62785: CALL_OW 437
62789: IFFALSE 62872
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62791: LD_STRING M
62793: PUSH
62794: LD_VAR 0 1
62798: PPUSH
62799: CALL_OW 437
62803: PUSH
62804: LD_INT 1
62806: ARRAY
62807: PUSH
62808: LD_INT 1
62810: ARRAY
62811: EQUAL
62812: PUSH
62813: LD_VAR 0 2
62817: PUSH
62818: LD_VAR 0 1
62822: PPUSH
62823: CALL_OW 437
62827: PUSH
62828: LD_INT 1
62830: ARRAY
62831: PUSH
62832: LD_INT 2
62834: ARRAY
62835: EQUAL
62836: AND
62837: PUSH
62838: LD_VAR 0 3
62842: PUSH
62843: LD_VAR 0 1
62847: PPUSH
62848: CALL_OW 437
62852: PUSH
62853: LD_INT 1
62855: ARRAY
62856: PUSH
62857: LD_INT 3
62859: ARRAY
62860: EQUAL
62861: AND
62862: IFFALSE 62872
// result := true ;
62864: LD_ADDR_VAR 0 4
62868: PUSH
62869: LD_INT 1
62871: ST_TO_ADDR
// end ; end ;
62872: LD_VAR 0 4
62876: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62877: LD_INT 0
62879: PPUSH
62880: PPUSH
62881: PPUSH
62882: PPUSH
// if not unit or not area then
62883: LD_VAR 0 1
62887: NOT
62888: PUSH
62889: LD_VAR 0 2
62893: NOT
62894: OR
62895: IFFALSE 62899
// exit ;
62897: GO 63063
// tmp := AreaToList ( area , i ) ;
62899: LD_ADDR_VAR 0 6
62903: PUSH
62904: LD_VAR 0 2
62908: PPUSH
62909: LD_VAR 0 5
62913: PPUSH
62914: CALL_OW 517
62918: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62919: LD_ADDR_VAR 0 5
62923: PUSH
62924: DOUBLE
62925: LD_INT 1
62927: DEC
62928: ST_TO_ADDR
62929: LD_VAR 0 6
62933: PUSH
62934: LD_INT 1
62936: ARRAY
62937: PUSH
62938: FOR_TO
62939: IFFALSE 63061
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62941: LD_ADDR_VAR 0 7
62945: PUSH
62946: LD_VAR 0 6
62950: PUSH
62951: LD_INT 1
62953: ARRAY
62954: PUSH
62955: LD_VAR 0 5
62959: ARRAY
62960: PUSH
62961: LD_VAR 0 6
62965: PUSH
62966: LD_INT 2
62968: ARRAY
62969: PUSH
62970: LD_VAR 0 5
62974: ARRAY
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62980: LD_VAR 0 7
62984: PUSH
62985: LD_INT 1
62987: ARRAY
62988: PPUSH
62989: LD_VAR 0 7
62993: PUSH
62994: LD_INT 2
62996: ARRAY
62997: PPUSH
62998: CALL_OW 428
63002: PUSH
63003: LD_INT 0
63005: EQUAL
63006: IFFALSE 63059
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63008: LD_VAR 0 1
63012: PPUSH
63013: LD_VAR 0 7
63017: PUSH
63018: LD_INT 1
63020: ARRAY
63021: PPUSH
63022: LD_VAR 0 7
63026: PUSH
63027: LD_INT 2
63029: ARRAY
63030: PPUSH
63031: LD_VAR 0 3
63035: PPUSH
63036: CALL_OW 48
// result := IsPlaced ( unit ) ;
63040: LD_ADDR_VAR 0 4
63044: PUSH
63045: LD_VAR 0 1
63049: PPUSH
63050: CALL_OW 305
63054: ST_TO_ADDR
// exit ;
63055: POP
63056: POP
63057: GO 63063
// end ; end ;
63059: GO 62938
63061: POP
63062: POP
// end ;
63063: LD_VAR 0 4
63067: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63068: LD_INT 0
63070: PPUSH
63071: PPUSH
63072: PPUSH
// if not side or side > 8 then
63073: LD_VAR 0 1
63077: NOT
63078: PUSH
63079: LD_VAR 0 1
63083: PUSH
63084: LD_INT 8
63086: GREATER
63087: OR
63088: IFFALSE 63092
// exit ;
63090: GO 63279
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63092: LD_ADDR_VAR 0 4
63096: PUSH
63097: LD_INT 22
63099: PUSH
63100: LD_VAR 0 1
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 21
63111: PUSH
63112: LD_INT 3
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PPUSH
63123: CALL_OW 69
63127: ST_TO_ADDR
// if not tmp then
63128: LD_VAR 0 4
63132: NOT
63133: IFFALSE 63137
// exit ;
63135: GO 63279
// enable_addtolog := true ;
63137: LD_ADDR_OWVAR 81
63141: PUSH
63142: LD_INT 1
63144: ST_TO_ADDR
// AddToLog ( [ ) ;
63145: LD_STRING [
63147: PPUSH
63148: CALL_OW 561
// for i in tmp do
63152: LD_ADDR_VAR 0 3
63156: PUSH
63157: LD_VAR 0 4
63161: PUSH
63162: FOR_IN
63163: IFFALSE 63270
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63165: LD_STRING [
63167: PUSH
63168: LD_VAR 0 3
63172: PPUSH
63173: CALL_OW 266
63177: STR
63178: PUSH
63179: LD_STRING , 
63181: STR
63182: PUSH
63183: LD_VAR 0 3
63187: PPUSH
63188: CALL_OW 250
63192: STR
63193: PUSH
63194: LD_STRING , 
63196: STR
63197: PUSH
63198: LD_VAR 0 3
63202: PPUSH
63203: CALL_OW 251
63207: STR
63208: PUSH
63209: LD_STRING , 
63211: STR
63212: PUSH
63213: LD_VAR 0 3
63217: PPUSH
63218: CALL_OW 254
63222: STR
63223: PUSH
63224: LD_STRING , 
63226: STR
63227: PUSH
63228: LD_VAR 0 3
63232: PPUSH
63233: LD_INT 1
63235: PPUSH
63236: CALL_OW 268
63240: STR
63241: PUSH
63242: LD_STRING , 
63244: STR
63245: PUSH
63246: LD_VAR 0 3
63250: PPUSH
63251: LD_INT 2
63253: PPUSH
63254: CALL_OW 268
63258: STR
63259: PUSH
63260: LD_STRING ],
63262: STR
63263: PPUSH
63264: CALL_OW 561
// end ;
63268: GO 63162
63270: POP
63271: POP
// AddToLog ( ]; ) ;
63272: LD_STRING ];
63274: PPUSH
63275: CALL_OW 561
// end ;
63279: LD_VAR 0 2
63283: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63284: LD_INT 0
63286: PPUSH
63287: PPUSH
63288: PPUSH
63289: PPUSH
63290: PPUSH
// if not area or not rate or not max then
63291: LD_VAR 0 1
63295: NOT
63296: PUSH
63297: LD_VAR 0 2
63301: NOT
63302: OR
63303: PUSH
63304: LD_VAR 0 4
63308: NOT
63309: OR
63310: IFFALSE 63314
// exit ;
63312: GO 63503
// while 1 do
63314: LD_INT 1
63316: IFFALSE 63503
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63318: LD_ADDR_VAR 0 9
63322: PUSH
63323: LD_VAR 0 1
63327: PPUSH
63328: LD_INT 1
63330: PPUSH
63331: CALL_OW 287
63335: PUSH
63336: LD_INT 10
63338: MUL
63339: ST_TO_ADDR
// r := rate / 10 ;
63340: LD_ADDR_VAR 0 7
63344: PUSH
63345: LD_VAR 0 2
63349: PUSH
63350: LD_INT 10
63352: DIVREAL
63353: ST_TO_ADDR
// time := 1 1$00 ;
63354: LD_ADDR_VAR 0 8
63358: PUSH
63359: LD_INT 2100
63361: ST_TO_ADDR
// if amount < min then
63362: LD_VAR 0 9
63366: PUSH
63367: LD_VAR 0 3
63371: LESS
63372: IFFALSE 63390
// r := r * 2 else
63374: LD_ADDR_VAR 0 7
63378: PUSH
63379: LD_VAR 0 7
63383: PUSH
63384: LD_INT 2
63386: MUL
63387: ST_TO_ADDR
63388: GO 63416
// if amount > max then
63390: LD_VAR 0 9
63394: PUSH
63395: LD_VAR 0 4
63399: GREATER
63400: IFFALSE 63416
// r := r / 2 ;
63402: LD_ADDR_VAR 0 7
63406: PUSH
63407: LD_VAR 0 7
63411: PUSH
63412: LD_INT 2
63414: DIVREAL
63415: ST_TO_ADDR
// time := time / r ;
63416: LD_ADDR_VAR 0 8
63420: PUSH
63421: LD_VAR 0 8
63425: PUSH
63426: LD_VAR 0 7
63430: DIVREAL
63431: ST_TO_ADDR
// if time < 0 then
63432: LD_VAR 0 8
63436: PUSH
63437: LD_INT 0
63439: LESS
63440: IFFALSE 63457
// time := time * - 1 ;
63442: LD_ADDR_VAR 0 8
63446: PUSH
63447: LD_VAR 0 8
63451: PUSH
63452: LD_INT 1
63454: NEG
63455: MUL
63456: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63457: LD_VAR 0 8
63461: PUSH
63462: LD_INT 35
63464: PPUSH
63465: LD_INT 875
63467: PPUSH
63468: CALL_OW 12
63472: PLUS
63473: PPUSH
63474: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63478: LD_INT 1
63480: PPUSH
63481: LD_INT 5
63483: PPUSH
63484: CALL_OW 12
63488: PPUSH
63489: LD_VAR 0 1
63493: PPUSH
63494: LD_INT 1
63496: PPUSH
63497: CALL_OW 55
// end ;
63501: GO 63314
// end ;
63503: LD_VAR 0 5
63507: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63508: LD_INT 0
63510: PPUSH
63511: PPUSH
63512: PPUSH
63513: PPUSH
63514: PPUSH
63515: PPUSH
63516: PPUSH
63517: PPUSH
// if not turrets or not factories then
63518: LD_VAR 0 1
63522: NOT
63523: PUSH
63524: LD_VAR 0 2
63528: NOT
63529: OR
63530: IFFALSE 63534
// exit ;
63532: GO 63841
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63534: LD_ADDR_VAR 0 10
63538: PUSH
63539: LD_INT 5
63541: PUSH
63542: LD_INT 6
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 2
63551: PUSH
63552: LD_INT 4
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 3
63561: PUSH
63562: LD_INT 5
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 24
63576: PUSH
63577: LD_INT 25
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 23
63586: PUSH
63587: LD_INT 27
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 42
63600: PUSH
63601: LD_INT 43
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 44
63610: PUSH
63611: LD_INT 46
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 45
63620: PUSH
63621: LD_INT 47
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: LIST
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: LIST
63637: ST_TO_ADDR
// result := [ ] ;
63638: LD_ADDR_VAR 0 3
63642: PUSH
63643: EMPTY
63644: ST_TO_ADDR
// for i in turrets do
63645: LD_ADDR_VAR 0 4
63649: PUSH
63650: LD_VAR 0 1
63654: PUSH
63655: FOR_IN
63656: IFFALSE 63839
// begin nat := GetNation ( i ) ;
63658: LD_ADDR_VAR 0 7
63662: PUSH
63663: LD_VAR 0 4
63667: PPUSH
63668: CALL_OW 248
63672: ST_TO_ADDR
// weapon := 0 ;
63673: LD_ADDR_VAR 0 8
63677: PUSH
63678: LD_INT 0
63680: ST_TO_ADDR
// if not nat then
63681: LD_VAR 0 7
63685: NOT
63686: IFFALSE 63690
// continue ;
63688: GO 63655
// for j in list [ nat ] do
63690: LD_ADDR_VAR 0 5
63694: PUSH
63695: LD_VAR 0 10
63699: PUSH
63700: LD_VAR 0 7
63704: ARRAY
63705: PUSH
63706: FOR_IN
63707: IFFALSE 63748
// if GetBWeapon ( i ) = j [ 1 ] then
63709: LD_VAR 0 4
63713: PPUSH
63714: CALL_OW 269
63718: PUSH
63719: LD_VAR 0 5
63723: PUSH
63724: LD_INT 1
63726: ARRAY
63727: EQUAL
63728: IFFALSE 63746
// begin weapon := j [ 2 ] ;
63730: LD_ADDR_VAR 0 8
63734: PUSH
63735: LD_VAR 0 5
63739: PUSH
63740: LD_INT 2
63742: ARRAY
63743: ST_TO_ADDR
// break ;
63744: GO 63748
// end ;
63746: GO 63706
63748: POP
63749: POP
// if not weapon then
63750: LD_VAR 0 8
63754: NOT
63755: IFFALSE 63759
// continue ;
63757: GO 63655
// for k in factories do
63759: LD_ADDR_VAR 0 6
63763: PUSH
63764: LD_VAR 0 2
63768: PUSH
63769: FOR_IN
63770: IFFALSE 63835
// begin weapons := AvailableWeaponList ( k ) ;
63772: LD_ADDR_VAR 0 9
63776: PUSH
63777: LD_VAR 0 6
63781: PPUSH
63782: CALL_OW 478
63786: ST_TO_ADDR
// if not weapons then
63787: LD_VAR 0 9
63791: NOT
63792: IFFALSE 63796
// continue ;
63794: GO 63769
// if weapon in weapons then
63796: LD_VAR 0 8
63800: PUSH
63801: LD_VAR 0 9
63805: IN
63806: IFFALSE 63833
// begin result := [ i , weapon ] ;
63808: LD_ADDR_VAR 0 3
63812: PUSH
63813: LD_VAR 0 4
63817: PUSH
63818: LD_VAR 0 8
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: ST_TO_ADDR
// exit ;
63827: POP
63828: POP
63829: POP
63830: POP
63831: GO 63841
// end ; end ;
63833: GO 63769
63835: POP
63836: POP
// end ;
63837: GO 63655
63839: POP
63840: POP
// end ;
63841: LD_VAR 0 3
63845: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63846: LD_INT 0
63848: PPUSH
// if not side or side > 8 then
63849: LD_VAR 0 3
63853: NOT
63854: PUSH
63855: LD_VAR 0 3
63859: PUSH
63860: LD_INT 8
63862: GREATER
63863: OR
63864: IFFALSE 63868
// exit ;
63866: GO 63927
// if not range then
63868: LD_VAR 0 4
63872: NOT
63873: IFFALSE 63884
// range := - 12 ;
63875: LD_ADDR_VAR 0 4
63879: PUSH
63880: LD_INT 12
63882: NEG
63883: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63884: LD_VAR 0 1
63888: PPUSH
63889: LD_VAR 0 2
63893: PPUSH
63894: LD_VAR 0 3
63898: PPUSH
63899: LD_VAR 0 4
63903: PPUSH
63904: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63908: LD_VAR 0 1
63912: PPUSH
63913: LD_VAR 0 2
63917: PPUSH
63918: LD_VAR 0 3
63922: PPUSH
63923: CALL_OW 331
// end ;
63927: LD_VAR 0 5
63931: RET
// export function Video ( mode ) ; begin
63932: LD_INT 0
63934: PPUSH
// ingame_video = mode ;
63935: LD_ADDR_OWVAR 52
63939: PUSH
63940: LD_VAR 0 1
63944: ST_TO_ADDR
// interface_hidden = mode ;
63945: LD_ADDR_OWVAR 54
63949: PUSH
63950: LD_VAR 0 1
63954: ST_TO_ADDR
// end ;
63955: LD_VAR 0 2
63959: RET
// export function Join ( array , element ) ; begin
63960: LD_INT 0
63962: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63963: LD_ADDR_VAR 0 3
63967: PUSH
63968: LD_VAR 0 1
63972: PPUSH
63973: LD_VAR 0 1
63977: PUSH
63978: LD_INT 1
63980: PLUS
63981: PPUSH
63982: LD_VAR 0 2
63986: PPUSH
63987: CALL_OW 1
63991: ST_TO_ADDR
// end ;
63992: LD_VAR 0 3
63996: RET
// export function JoinUnion ( array , element ) ; begin
63997: LD_INT 0
63999: PPUSH
// result := array union element ;
64000: LD_ADDR_VAR 0 3
64004: PUSH
64005: LD_VAR 0 1
64009: PUSH
64010: LD_VAR 0 2
64014: UNION
64015: ST_TO_ADDR
// end ;
64016: LD_VAR 0 3
64020: RET
// export function GetBehemoths ( side ) ; begin
64021: LD_INT 0
64023: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64024: LD_ADDR_VAR 0 2
64028: PUSH
64029: LD_INT 22
64031: PUSH
64032: LD_VAR 0 1
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 31
64043: PUSH
64044: LD_INT 25
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PPUSH
64055: CALL_OW 69
64059: ST_TO_ADDR
// end ;
64060: LD_VAR 0 2
64064: RET
// export function Shuffle ( array ) ; var i , index ; begin
64065: LD_INT 0
64067: PPUSH
64068: PPUSH
64069: PPUSH
// result := [ ] ;
64070: LD_ADDR_VAR 0 2
64074: PUSH
64075: EMPTY
64076: ST_TO_ADDR
// if not array then
64077: LD_VAR 0 1
64081: NOT
64082: IFFALSE 64086
// exit ;
64084: GO 64185
// Randomize ;
64086: CALL_OW 10
// for i = array downto 1 do
64090: LD_ADDR_VAR 0 3
64094: PUSH
64095: DOUBLE
64096: LD_VAR 0 1
64100: INC
64101: ST_TO_ADDR
64102: LD_INT 1
64104: PUSH
64105: FOR_DOWNTO
64106: IFFALSE 64183
// begin index := rand ( 1 , array ) ;
64108: LD_ADDR_VAR 0 4
64112: PUSH
64113: LD_INT 1
64115: PPUSH
64116: LD_VAR 0 1
64120: PPUSH
64121: CALL_OW 12
64125: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64126: LD_ADDR_VAR 0 2
64130: PUSH
64131: LD_VAR 0 2
64135: PPUSH
64136: LD_VAR 0 2
64140: PUSH
64141: LD_INT 1
64143: PLUS
64144: PPUSH
64145: LD_VAR 0 1
64149: PUSH
64150: LD_VAR 0 4
64154: ARRAY
64155: PPUSH
64156: CALL_OW 2
64160: ST_TO_ADDR
// array := Delete ( array , index ) ;
64161: LD_ADDR_VAR 0 1
64165: PUSH
64166: LD_VAR 0 1
64170: PPUSH
64171: LD_VAR 0 4
64175: PPUSH
64176: CALL_OW 3
64180: ST_TO_ADDR
// end ;
64181: GO 64105
64183: POP
64184: POP
// end ;
64185: LD_VAR 0 2
64189: RET
// export function GetBaseMaterials ( base ) ; begin
64190: LD_INT 0
64192: PPUSH
// result := [ 0 , 0 , 0 ] ;
64193: LD_ADDR_VAR 0 2
64197: PUSH
64198: LD_INT 0
64200: PUSH
64201: LD_INT 0
64203: PUSH
64204: LD_INT 0
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: LIST
64211: ST_TO_ADDR
// if not base then
64212: LD_VAR 0 1
64216: NOT
64217: IFFALSE 64221
// exit ;
64219: GO 64270
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64221: LD_ADDR_VAR 0 2
64225: PUSH
64226: LD_VAR 0 1
64230: PPUSH
64231: LD_INT 1
64233: PPUSH
64234: CALL_OW 275
64238: PUSH
64239: LD_VAR 0 1
64243: PPUSH
64244: LD_INT 2
64246: PPUSH
64247: CALL_OW 275
64251: PUSH
64252: LD_VAR 0 1
64256: PPUSH
64257: LD_INT 3
64259: PPUSH
64260: CALL_OW 275
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: LIST
64269: ST_TO_ADDR
// end ;
64270: LD_VAR 0 2
64274: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64275: LD_INT 0
64277: PPUSH
64278: PPUSH
// result := array ;
64279: LD_ADDR_VAR 0 3
64283: PUSH
64284: LD_VAR 0 1
64288: ST_TO_ADDR
// if size >= result then
64289: LD_VAR 0 2
64293: PUSH
64294: LD_VAR 0 3
64298: GREATEREQUAL
64299: IFFALSE 64303
// exit ;
64301: GO 64353
// if size then
64303: LD_VAR 0 2
64307: IFFALSE 64353
// for i := array downto size do
64309: LD_ADDR_VAR 0 4
64313: PUSH
64314: DOUBLE
64315: LD_VAR 0 1
64319: INC
64320: ST_TO_ADDR
64321: LD_VAR 0 2
64325: PUSH
64326: FOR_DOWNTO
64327: IFFALSE 64351
// result := Delete ( result , result ) ;
64329: LD_ADDR_VAR 0 3
64333: PUSH
64334: LD_VAR 0 3
64338: PPUSH
64339: LD_VAR 0 3
64343: PPUSH
64344: CALL_OW 3
64348: ST_TO_ADDR
64349: GO 64326
64351: POP
64352: POP
// end ;
64353: LD_VAR 0 3
64357: RET
// export function ComExit ( unit ) ; var tmp ; begin
64358: LD_INT 0
64360: PPUSH
64361: PPUSH
// if not IsInUnit ( unit ) then
64362: LD_VAR 0 1
64366: PPUSH
64367: CALL_OW 310
64371: NOT
64372: IFFALSE 64376
// exit ;
64374: GO 64436
// tmp := IsInUnit ( unit ) ;
64376: LD_ADDR_VAR 0 3
64380: PUSH
64381: LD_VAR 0 1
64385: PPUSH
64386: CALL_OW 310
64390: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64391: LD_VAR 0 3
64395: PPUSH
64396: CALL_OW 247
64400: PUSH
64401: LD_INT 2
64403: EQUAL
64404: IFFALSE 64417
// ComExitVehicle ( unit ) else
64406: LD_VAR 0 1
64410: PPUSH
64411: CALL_OW 121
64415: GO 64426
// ComExitBuilding ( unit ) ;
64417: LD_VAR 0 1
64421: PPUSH
64422: CALL_OW 122
// result := tmp ;
64426: LD_ADDR_VAR 0 2
64430: PUSH
64431: LD_VAR 0 3
64435: ST_TO_ADDR
// end ;
64436: LD_VAR 0 2
64440: RET
// export function ComExitAll ( units ) ; var i ; begin
64441: LD_INT 0
64443: PPUSH
64444: PPUSH
// if not units then
64445: LD_VAR 0 1
64449: NOT
64450: IFFALSE 64454
// exit ;
64452: GO 64480
// for i in units do
64454: LD_ADDR_VAR 0 3
64458: PUSH
64459: LD_VAR 0 1
64463: PUSH
64464: FOR_IN
64465: IFFALSE 64478
// ComExit ( i ) ;
64467: LD_VAR 0 3
64471: PPUSH
64472: CALL 64358 0 1
64476: GO 64464
64478: POP
64479: POP
// end ;
64480: LD_VAR 0 2
64484: RET
// export function ResetHc ; begin
64485: LD_INT 0
64487: PPUSH
// InitHc ;
64488: CALL_OW 19
// hc_importance := 0 ;
64492: LD_ADDR_OWVAR 32
64496: PUSH
64497: LD_INT 0
64499: ST_TO_ADDR
// end ;
64500: LD_VAR 0 1
64504: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64505: LD_INT 0
64507: PPUSH
64508: PPUSH
64509: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64510: LD_ADDR_VAR 0 6
64514: PUSH
64515: LD_VAR 0 1
64519: PUSH
64520: LD_VAR 0 3
64524: PLUS
64525: PUSH
64526: LD_INT 2
64528: DIV
64529: ST_TO_ADDR
// if _x < 0 then
64530: LD_VAR 0 6
64534: PUSH
64535: LD_INT 0
64537: LESS
64538: IFFALSE 64555
// _x := _x * - 1 ;
64540: LD_ADDR_VAR 0 6
64544: PUSH
64545: LD_VAR 0 6
64549: PUSH
64550: LD_INT 1
64552: NEG
64553: MUL
64554: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64555: LD_ADDR_VAR 0 7
64559: PUSH
64560: LD_VAR 0 2
64564: PUSH
64565: LD_VAR 0 4
64569: PLUS
64570: PUSH
64571: LD_INT 2
64573: DIV
64574: ST_TO_ADDR
// if _y < 0 then
64575: LD_VAR 0 7
64579: PUSH
64580: LD_INT 0
64582: LESS
64583: IFFALSE 64600
// _y := _y * - 1 ;
64585: LD_ADDR_VAR 0 7
64589: PUSH
64590: LD_VAR 0 7
64594: PUSH
64595: LD_INT 1
64597: NEG
64598: MUL
64599: ST_TO_ADDR
// result := [ _x , _y ] ;
64600: LD_ADDR_VAR 0 5
64604: PUSH
64605: LD_VAR 0 6
64609: PUSH
64610: LD_VAR 0 7
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: ST_TO_ADDR
// end ;
64619: LD_VAR 0 5
64623: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64624: LD_INT 0
64626: PPUSH
64627: PPUSH
64628: PPUSH
64629: PPUSH
// task := GetTaskList ( unit ) ;
64630: LD_ADDR_VAR 0 7
64634: PUSH
64635: LD_VAR 0 1
64639: PPUSH
64640: CALL_OW 437
64644: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64645: LD_VAR 0 7
64649: NOT
64650: PUSH
64651: LD_VAR 0 1
64655: PPUSH
64656: LD_VAR 0 2
64660: PPUSH
64661: CALL_OW 308
64665: NOT
64666: AND
64667: IFFALSE 64671
// exit ;
64669: GO 64789
// if IsInArea ( unit , area ) then
64671: LD_VAR 0 1
64675: PPUSH
64676: LD_VAR 0 2
64680: PPUSH
64681: CALL_OW 308
64685: IFFALSE 64703
// begin ComMoveToArea ( unit , goAway ) ;
64687: LD_VAR 0 1
64691: PPUSH
64692: LD_VAR 0 3
64696: PPUSH
64697: CALL_OW 113
// exit ;
64701: GO 64789
// end ; if task [ 1 ] [ 1 ] <> M then
64703: LD_VAR 0 7
64707: PUSH
64708: LD_INT 1
64710: ARRAY
64711: PUSH
64712: LD_INT 1
64714: ARRAY
64715: PUSH
64716: LD_STRING M
64718: NONEQUAL
64719: IFFALSE 64723
// exit ;
64721: GO 64789
// x := task [ 1 ] [ 2 ] ;
64723: LD_ADDR_VAR 0 5
64727: PUSH
64728: LD_VAR 0 7
64732: PUSH
64733: LD_INT 1
64735: ARRAY
64736: PUSH
64737: LD_INT 2
64739: ARRAY
64740: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64741: LD_ADDR_VAR 0 6
64745: PUSH
64746: LD_VAR 0 7
64750: PUSH
64751: LD_INT 1
64753: ARRAY
64754: PUSH
64755: LD_INT 3
64757: ARRAY
64758: ST_TO_ADDR
// if InArea ( x , y , area ) then
64759: LD_VAR 0 5
64763: PPUSH
64764: LD_VAR 0 6
64768: PPUSH
64769: LD_VAR 0 2
64773: PPUSH
64774: CALL_OW 309
64778: IFFALSE 64789
// ComStop ( unit ) ;
64780: LD_VAR 0 1
64784: PPUSH
64785: CALL_OW 141
// end ;
64789: LD_VAR 0 4
64793: RET
// export function Abs ( value ) ; begin
64794: LD_INT 0
64796: PPUSH
// result := value ;
64797: LD_ADDR_VAR 0 2
64801: PUSH
64802: LD_VAR 0 1
64806: ST_TO_ADDR
// if value < 0 then
64807: LD_VAR 0 1
64811: PUSH
64812: LD_INT 0
64814: LESS
64815: IFFALSE 64832
// result := value * - 1 ;
64817: LD_ADDR_VAR 0 2
64821: PUSH
64822: LD_VAR 0 1
64826: PUSH
64827: LD_INT 1
64829: NEG
64830: MUL
64831: ST_TO_ADDR
// end ;
64832: LD_VAR 0 2
64836: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64837: LD_INT 0
64839: PPUSH
64840: PPUSH
64841: PPUSH
64842: PPUSH
64843: PPUSH
64844: PPUSH
64845: PPUSH
64846: PPUSH
// if not unit or not building then
64847: LD_VAR 0 1
64851: NOT
64852: PUSH
64853: LD_VAR 0 2
64857: NOT
64858: OR
64859: IFFALSE 64863
// exit ;
64861: GO 65089
// x := GetX ( building ) ;
64863: LD_ADDR_VAR 0 4
64867: PUSH
64868: LD_VAR 0 2
64872: PPUSH
64873: CALL_OW 250
64877: ST_TO_ADDR
// y := GetY ( building ) ;
64878: LD_ADDR_VAR 0 6
64882: PUSH
64883: LD_VAR 0 2
64887: PPUSH
64888: CALL_OW 251
64892: ST_TO_ADDR
// d := GetDir ( building ) ;
64893: LD_ADDR_VAR 0 8
64897: PUSH
64898: LD_VAR 0 2
64902: PPUSH
64903: CALL_OW 254
64907: ST_TO_ADDR
// r := 4 ;
64908: LD_ADDR_VAR 0 9
64912: PUSH
64913: LD_INT 4
64915: ST_TO_ADDR
// for i := 1 to 5 do
64916: LD_ADDR_VAR 0 10
64920: PUSH
64921: DOUBLE
64922: LD_INT 1
64924: DEC
64925: ST_TO_ADDR
64926: LD_INT 5
64928: PUSH
64929: FOR_TO
64930: IFFALSE 65087
// begin _x := ShiftX ( x , d , r + i ) ;
64932: LD_ADDR_VAR 0 5
64936: PUSH
64937: LD_VAR 0 4
64941: PPUSH
64942: LD_VAR 0 8
64946: PPUSH
64947: LD_VAR 0 9
64951: PUSH
64952: LD_VAR 0 10
64956: PLUS
64957: PPUSH
64958: CALL_OW 272
64962: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64963: LD_ADDR_VAR 0 7
64967: PUSH
64968: LD_VAR 0 6
64972: PPUSH
64973: LD_VAR 0 8
64977: PPUSH
64978: LD_VAR 0 9
64982: PUSH
64983: LD_VAR 0 10
64987: PLUS
64988: PPUSH
64989: CALL_OW 273
64993: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64994: LD_VAR 0 5
64998: PPUSH
64999: LD_VAR 0 7
65003: PPUSH
65004: CALL_OW 488
65008: PUSH
65009: LD_VAR 0 5
65013: PPUSH
65014: LD_VAR 0 7
65018: PPUSH
65019: CALL_OW 428
65023: PPUSH
65024: CALL_OW 247
65028: PUSH
65029: LD_INT 3
65031: PUSH
65032: LD_INT 2
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: IN
65039: NOT
65040: AND
65041: IFFALSE 65085
// begin ComMoveXY ( unit , _x , _y ) ;
65043: LD_VAR 0 1
65047: PPUSH
65048: LD_VAR 0 5
65052: PPUSH
65053: LD_VAR 0 7
65057: PPUSH
65058: CALL_OW 111
// result := [ _x , _y ] ;
65062: LD_ADDR_VAR 0 3
65066: PUSH
65067: LD_VAR 0 5
65071: PUSH
65072: LD_VAR 0 7
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: ST_TO_ADDR
// exit ;
65081: POP
65082: POP
65083: GO 65089
// end ; end ;
65085: GO 64929
65087: POP
65088: POP
// end ;
65089: LD_VAR 0 3
65093: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65094: LD_INT 0
65096: PPUSH
65097: PPUSH
65098: PPUSH
// result := 0 ;
65099: LD_ADDR_VAR 0 3
65103: PUSH
65104: LD_INT 0
65106: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65107: LD_VAR 0 1
65111: PUSH
65112: LD_INT 0
65114: LESS
65115: PUSH
65116: LD_VAR 0 1
65120: PUSH
65121: LD_INT 8
65123: GREATER
65124: OR
65125: PUSH
65126: LD_VAR 0 2
65130: PUSH
65131: LD_INT 0
65133: LESS
65134: OR
65135: PUSH
65136: LD_VAR 0 2
65140: PUSH
65141: LD_INT 8
65143: GREATER
65144: OR
65145: IFFALSE 65149
// exit ;
65147: GO 65224
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65149: LD_ADDR_VAR 0 4
65153: PUSH
65154: LD_INT 22
65156: PUSH
65157: LD_VAR 0 2
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PPUSH
65166: CALL_OW 69
65170: PUSH
65171: FOR_IN
65172: IFFALSE 65222
// begin un := UnitShoot ( i ) ;
65174: LD_ADDR_VAR 0 5
65178: PUSH
65179: LD_VAR 0 4
65183: PPUSH
65184: CALL_OW 504
65188: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65189: LD_VAR 0 5
65193: PPUSH
65194: CALL_OW 255
65198: PUSH
65199: LD_VAR 0 1
65203: EQUAL
65204: IFFALSE 65220
// begin result := un ;
65206: LD_ADDR_VAR 0 3
65210: PUSH
65211: LD_VAR 0 5
65215: ST_TO_ADDR
// exit ;
65216: POP
65217: POP
65218: GO 65224
// end ; end ;
65220: GO 65171
65222: POP
65223: POP
// end ;
65224: LD_VAR 0 3
65228: RET
// export function GetCargoBay ( units ) ; begin
65229: LD_INT 0
65231: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65232: LD_ADDR_VAR 0 2
65236: PUSH
65237: LD_VAR 0 1
65241: PPUSH
65242: LD_INT 2
65244: PUSH
65245: LD_INT 34
65247: PUSH
65248: LD_INT 12
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 34
65257: PUSH
65258: LD_INT 51
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 34
65267: PUSH
65268: LD_INT 32
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 34
65277: PUSH
65278: LD_INT 89
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: PPUSH
65292: CALL_OW 72
65296: ST_TO_ADDR
// end ;
65297: LD_VAR 0 2
65301: RET
// export function Negate ( value ) ; begin
65302: LD_INT 0
65304: PPUSH
// result := not value ;
65305: LD_ADDR_VAR 0 2
65309: PUSH
65310: LD_VAR 0 1
65314: NOT
65315: ST_TO_ADDR
// end ;
65316: LD_VAR 0 2
65320: RET
// export function Inc ( value ) ; begin
65321: LD_INT 0
65323: PPUSH
// result := value + 1 ;
65324: LD_ADDR_VAR 0 2
65328: PUSH
65329: LD_VAR 0 1
65333: PUSH
65334: LD_INT 1
65336: PLUS
65337: ST_TO_ADDR
// end ;
65338: LD_VAR 0 2
65342: RET
// export function Dec ( value ) ; begin
65343: LD_INT 0
65345: PPUSH
// result := value - 1 ;
65346: LD_ADDR_VAR 0 2
65350: PUSH
65351: LD_VAR 0 1
65355: PUSH
65356: LD_INT 1
65358: MINUS
65359: ST_TO_ADDR
// end ;
65360: LD_VAR 0 2
65364: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65365: LD_INT 0
65367: PPUSH
65368: PPUSH
65369: PPUSH
65370: PPUSH
65371: PPUSH
65372: PPUSH
65373: PPUSH
65374: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65375: LD_VAR 0 1
65379: PPUSH
65380: LD_VAR 0 2
65384: PPUSH
65385: CALL_OW 488
65389: NOT
65390: PUSH
65391: LD_VAR 0 3
65395: PPUSH
65396: LD_VAR 0 4
65400: PPUSH
65401: CALL_OW 488
65405: NOT
65406: OR
65407: IFFALSE 65420
// begin result := - 1 ;
65409: LD_ADDR_VAR 0 5
65413: PUSH
65414: LD_INT 1
65416: NEG
65417: ST_TO_ADDR
// exit ;
65418: GO 65655
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65420: LD_ADDR_VAR 0 12
65424: PUSH
65425: LD_VAR 0 1
65429: PPUSH
65430: LD_VAR 0 2
65434: PPUSH
65435: LD_VAR 0 3
65439: PPUSH
65440: LD_VAR 0 4
65444: PPUSH
65445: CALL 64505 0 4
65449: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65450: LD_ADDR_VAR 0 11
65454: PUSH
65455: LD_VAR 0 1
65459: PPUSH
65460: LD_VAR 0 2
65464: PPUSH
65465: LD_VAR 0 12
65469: PUSH
65470: LD_INT 1
65472: ARRAY
65473: PPUSH
65474: LD_VAR 0 12
65478: PUSH
65479: LD_INT 2
65481: ARRAY
65482: PPUSH
65483: CALL_OW 298
65487: ST_TO_ADDR
// distance := 9999 ;
65488: LD_ADDR_VAR 0 10
65492: PUSH
65493: LD_INT 9999
65495: ST_TO_ADDR
// for i := 0 to 5 do
65496: LD_ADDR_VAR 0 6
65500: PUSH
65501: DOUBLE
65502: LD_INT 0
65504: DEC
65505: ST_TO_ADDR
65506: LD_INT 5
65508: PUSH
65509: FOR_TO
65510: IFFALSE 65653
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65512: LD_ADDR_VAR 0 7
65516: PUSH
65517: LD_VAR 0 1
65521: PPUSH
65522: LD_VAR 0 6
65526: PPUSH
65527: LD_VAR 0 11
65531: PPUSH
65532: CALL_OW 272
65536: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65537: LD_ADDR_VAR 0 8
65541: PUSH
65542: LD_VAR 0 2
65546: PPUSH
65547: LD_VAR 0 6
65551: PPUSH
65552: LD_VAR 0 11
65556: PPUSH
65557: CALL_OW 273
65561: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65562: LD_VAR 0 7
65566: PPUSH
65567: LD_VAR 0 8
65571: PPUSH
65572: CALL_OW 488
65576: NOT
65577: IFFALSE 65581
// continue ;
65579: GO 65509
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65581: LD_ADDR_VAR 0 9
65585: PUSH
65586: LD_VAR 0 12
65590: PUSH
65591: LD_INT 1
65593: ARRAY
65594: PPUSH
65595: LD_VAR 0 12
65599: PUSH
65600: LD_INT 2
65602: ARRAY
65603: PPUSH
65604: LD_VAR 0 7
65608: PPUSH
65609: LD_VAR 0 8
65613: PPUSH
65614: CALL_OW 298
65618: ST_TO_ADDR
// if tmp < distance then
65619: LD_VAR 0 9
65623: PUSH
65624: LD_VAR 0 10
65628: LESS
65629: IFFALSE 65651
// begin result := i ;
65631: LD_ADDR_VAR 0 5
65635: PUSH
65636: LD_VAR 0 6
65640: ST_TO_ADDR
// distance := tmp ;
65641: LD_ADDR_VAR 0 10
65645: PUSH
65646: LD_VAR 0 9
65650: ST_TO_ADDR
// end ; end ;
65651: GO 65509
65653: POP
65654: POP
// end ;
65655: LD_VAR 0 5
65659: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65660: LD_INT 0
65662: PPUSH
65663: PPUSH
// if not driver or not IsInUnit ( driver ) then
65664: LD_VAR 0 1
65668: NOT
65669: PUSH
65670: LD_VAR 0 1
65674: PPUSH
65675: CALL_OW 310
65679: NOT
65680: OR
65681: IFFALSE 65685
// exit ;
65683: GO 65775
// vehicle := IsInUnit ( driver ) ;
65685: LD_ADDR_VAR 0 3
65689: PUSH
65690: LD_VAR 0 1
65694: PPUSH
65695: CALL_OW 310
65699: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65700: LD_VAR 0 1
65704: PPUSH
65705: LD_STRING \
65707: PUSH
65708: LD_INT 0
65710: PUSH
65711: LD_INT 0
65713: PUSH
65714: LD_INT 0
65716: PUSH
65717: LD_INT 0
65719: PUSH
65720: LD_INT 0
65722: PUSH
65723: LD_INT 0
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: PUSH
65735: LD_STRING E
65737: PUSH
65738: LD_INT 0
65740: PUSH
65741: LD_INT 0
65743: PUSH
65744: LD_VAR 0 3
65748: PUSH
65749: LD_INT 0
65751: PUSH
65752: LD_INT 0
65754: PUSH
65755: LD_INT 0
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PPUSH
65771: CALL_OW 446
// end ;
65775: LD_VAR 0 2
65779: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65780: LD_INT 0
65782: PPUSH
65783: PPUSH
// if not driver or not IsInUnit ( driver ) then
65784: LD_VAR 0 1
65788: NOT
65789: PUSH
65790: LD_VAR 0 1
65794: PPUSH
65795: CALL_OW 310
65799: NOT
65800: OR
65801: IFFALSE 65805
// exit ;
65803: GO 65895
// vehicle := IsInUnit ( driver ) ;
65805: LD_ADDR_VAR 0 3
65809: PUSH
65810: LD_VAR 0 1
65814: PPUSH
65815: CALL_OW 310
65819: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65820: LD_VAR 0 1
65824: PPUSH
65825: LD_STRING \
65827: PUSH
65828: LD_INT 0
65830: PUSH
65831: LD_INT 0
65833: PUSH
65834: LD_INT 0
65836: PUSH
65837: LD_INT 0
65839: PUSH
65840: LD_INT 0
65842: PUSH
65843: LD_INT 0
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: PUSH
65855: LD_STRING E
65857: PUSH
65858: LD_INT 0
65860: PUSH
65861: LD_INT 0
65863: PUSH
65864: LD_VAR 0 3
65868: PUSH
65869: LD_INT 0
65871: PUSH
65872: LD_INT 0
65874: PUSH
65875: LD_INT 0
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PPUSH
65891: CALL_OW 447
// end ;
65895: LD_VAR 0 2
65899: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65900: LD_INT 0
65902: PPUSH
65903: PPUSH
65904: PPUSH
// tmp := [ ] ;
65905: LD_ADDR_VAR 0 5
65909: PUSH
65910: EMPTY
65911: ST_TO_ADDR
// for i in units do
65912: LD_ADDR_VAR 0 4
65916: PUSH
65917: LD_VAR 0 1
65921: PUSH
65922: FOR_IN
65923: IFFALSE 65961
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65925: LD_ADDR_VAR 0 5
65929: PUSH
65930: LD_VAR 0 5
65934: PPUSH
65935: LD_VAR 0 5
65939: PUSH
65940: LD_INT 1
65942: PLUS
65943: PPUSH
65944: LD_VAR 0 4
65948: PPUSH
65949: CALL_OW 256
65953: PPUSH
65954: CALL_OW 2
65958: ST_TO_ADDR
65959: GO 65922
65961: POP
65962: POP
// if not tmp then
65963: LD_VAR 0 5
65967: NOT
65968: IFFALSE 65972
// exit ;
65970: GO 66020
// if asc then
65972: LD_VAR 0 2
65976: IFFALSE 66000
// result := SortListByListAsc ( units , tmp ) else
65978: LD_ADDR_VAR 0 3
65982: PUSH
65983: LD_VAR 0 1
65987: PPUSH
65988: LD_VAR 0 5
65992: PPUSH
65993: CALL_OW 76
65997: ST_TO_ADDR
65998: GO 66020
// result := SortListByListDesc ( units , tmp ) ;
66000: LD_ADDR_VAR 0 3
66004: PUSH
66005: LD_VAR 0 1
66009: PPUSH
66010: LD_VAR 0 5
66014: PPUSH
66015: CALL_OW 77
66019: ST_TO_ADDR
// end ;
66020: LD_VAR 0 3
66024: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66025: LD_INT 0
66027: PPUSH
66028: PPUSH
// task := GetTaskList ( mech ) ;
66029: LD_ADDR_VAR 0 4
66033: PUSH
66034: LD_VAR 0 1
66038: PPUSH
66039: CALL_OW 437
66043: ST_TO_ADDR
// if not task then
66044: LD_VAR 0 4
66048: NOT
66049: IFFALSE 66053
// exit ;
66051: GO 66095
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66053: LD_ADDR_VAR 0 3
66057: PUSH
66058: LD_VAR 0 4
66062: PUSH
66063: LD_INT 1
66065: ARRAY
66066: PUSH
66067: LD_INT 1
66069: ARRAY
66070: PUSH
66071: LD_STRING r
66073: EQUAL
66074: PUSH
66075: LD_VAR 0 4
66079: PUSH
66080: LD_INT 1
66082: ARRAY
66083: PUSH
66084: LD_INT 4
66086: ARRAY
66087: PUSH
66088: LD_VAR 0 2
66092: EQUAL
66093: AND
66094: ST_TO_ADDR
// end ;
66095: LD_VAR 0 3
66099: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66100: LD_INT 0
66102: PPUSH
// SetDir ( unit , d ) ;
66103: LD_VAR 0 1
66107: PPUSH
66108: LD_VAR 0 4
66112: PPUSH
66113: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66117: LD_VAR 0 1
66121: PPUSH
66122: LD_VAR 0 2
66126: PPUSH
66127: LD_VAR 0 3
66131: PPUSH
66132: LD_VAR 0 5
66136: PPUSH
66137: CALL_OW 48
// end ;
66141: LD_VAR 0 6
66145: RET
// export function ToNaturalNumber ( number ) ; begin
66146: LD_INT 0
66148: PPUSH
// result := number div 1 ;
66149: LD_ADDR_VAR 0 2
66153: PUSH
66154: LD_VAR 0 1
66158: PUSH
66159: LD_INT 1
66161: DIV
66162: ST_TO_ADDR
// if number < 0 then
66163: LD_VAR 0 1
66167: PUSH
66168: LD_INT 0
66170: LESS
66171: IFFALSE 66181
// result := 0 ;
66173: LD_ADDR_VAR 0 2
66177: PUSH
66178: LD_INT 0
66180: ST_TO_ADDR
// end ;
66181: LD_VAR 0 2
66185: RET
// export function SortByClass ( units , class ) ; var un ; begin
66186: LD_INT 0
66188: PPUSH
66189: PPUSH
// if not units or not class then
66190: LD_VAR 0 1
66194: NOT
66195: PUSH
66196: LD_VAR 0 2
66200: NOT
66201: OR
66202: IFFALSE 66206
// exit ;
66204: GO 66301
// result := [ ] ;
66206: LD_ADDR_VAR 0 3
66210: PUSH
66211: EMPTY
66212: ST_TO_ADDR
// for un in units do
66213: LD_ADDR_VAR 0 4
66217: PUSH
66218: LD_VAR 0 1
66222: PUSH
66223: FOR_IN
66224: IFFALSE 66299
// if GetClass ( un ) = class then
66226: LD_VAR 0 4
66230: PPUSH
66231: CALL_OW 257
66235: PUSH
66236: LD_VAR 0 2
66240: EQUAL
66241: IFFALSE 66268
// result := Insert ( result , 1 , un ) else
66243: LD_ADDR_VAR 0 3
66247: PUSH
66248: LD_VAR 0 3
66252: PPUSH
66253: LD_INT 1
66255: PPUSH
66256: LD_VAR 0 4
66260: PPUSH
66261: CALL_OW 2
66265: ST_TO_ADDR
66266: GO 66297
// result := Replace ( result , result + 1 , un ) ;
66268: LD_ADDR_VAR 0 3
66272: PUSH
66273: LD_VAR 0 3
66277: PPUSH
66278: LD_VAR 0 3
66282: PUSH
66283: LD_INT 1
66285: PLUS
66286: PPUSH
66287: LD_VAR 0 4
66291: PPUSH
66292: CALL_OW 1
66296: ST_TO_ADDR
66297: GO 66223
66299: POP
66300: POP
// end ;
66301: LD_VAR 0 3
66305: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66306: LD_INT 0
66308: PPUSH
66309: PPUSH
66310: PPUSH
66311: PPUSH
66312: PPUSH
66313: PPUSH
66314: PPUSH
// result := [ ] ;
66315: LD_ADDR_VAR 0 4
66319: PUSH
66320: EMPTY
66321: ST_TO_ADDR
// if x - r < 0 then
66322: LD_VAR 0 1
66326: PUSH
66327: LD_VAR 0 3
66331: MINUS
66332: PUSH
66333: LD_INT 0
66335: LESS
66336: IFFALSE 66348
// min_x := 0 else
66338: LD_ADDR_VAR 0 8
66342: PUSH
66343: LD_INT 0
66345: ST_TO_ADDR
66346: GO 66364
// min_x := x - r ;
66348: LD_ADDR_VAR 0 8
66352: PUSH
66353: LD_VAR 0 1
66357: PUSH
66358: LD_VAR 0 3
66362: MINUS
66363: ST_TO_ADDR
// if y - r < 0 then
66364: LD_VAR 0 2
66368: PUSH
66369: LD_VAR 0 3
66373: MINUS
66374: PUSH
66375: LD_INT 0
66377: LESS
66378: IFFALSE 66390
// min_y := 0 else
66380: LD_ADDR_VAR 0 7
66384: PUSH
66385: LD_INT 0
66387: ST_TO_ADDR
66388: GO 66406
// min_y := y - r ;
66390: LD_ADDR_VAR 0 7
66394: PUSH
66395: LD_VAR 0 2
66399: PUSH
66400: LD_VAR 0 3
66404: MINUS
66405: ST_TO_ADDR
// max_x := x + r ;
66406: LD_ADDR_VAR 0 9
66410: PUSH
66411: LD_VAR 0 1
66415: PUSH
66416: LD_VAR 0 3
66420: PLUS
66421: ST_TO_ADDR
// max_y := y + r ;
66422: LD_ADDR_VAR 0 10
66426: PUSH
66427: LD_VAR 0 2
66431: PUSH
66432: LD_VAR 0 3
66436: PLUS
66437: ST_TO_ADDR
// for _x = min_x to max_x do
66438: LD_ADDR_VAR 0 5
66442: PUSH
66443: DOUBLE
66444: LD_VAR 0 8
66448: DEC
66449: ST_TO_ADDR
66450: LD_VAR 0 9
66454: PUSH
66455: FOR_TO
66456: IFFALSE 66557
// for _y = min_y to max_y do
66458: LD_ADDR_VAR 0 6
66462: PUSH
66463: DOUBLE
66464: LD_VAR 0 7
66468: DEC
66469: ST_TO_ADDR
66470: LD_VAR 0 10
66474: PUSH
66475: FOR_TO
66476: IFFALSE 66553
// begin if not ValidHex ( _x , _y ) then
66478: LD_VAR 0 5
66482: PPUSH
66483: LD_VAR 0 6
66487: PPUSH
66488: CALL_OW 488
66492: NOT
66493: IFFALSE 66497
// continue ;
66495: GO 66475
// if GetResourceTypeXY ( _x , _y ) then
66497: LD_VAR 0 5
66501: PPUSH
66502: LD_VAR 0 6
66506: PPUSH
66507: CALL_OW 283
66511: IFFALSE 66551
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66513: LD_ADDR_VAR 0 4
66517: PUSH
66518: LD_VAR 0 4
66522: PPUSH
66523: LD_VAR 0 4
66527: PUSH
66528: LD_INT 1
66530: PLUS
66531: PPUSH
66532: LD_VAR 0 5
66536: PUSH
66537: LD_VAR 0 6
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PPUSH
66546: CALL_OW 1
66550: ST_TO_ADDR
// end ;
66551: GO 66475
66553: POP
66554: POP
66555: GO 66455
66557: POP
66558: POP
// end ;
66559: LD_VAR 0 4
66563: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66564: LD_INT 0
66566: PPUSH
66567: PPUSH
66568: PPUSH
66569: PPUSH
66570: PPUSH
66571: PPUSH
66572: PPUSH
66573: PPUSH
// if not units then
66574: LD_VAR 0 1
66578: NOT
66579: IFFALSE 66583
// exit ;
66581: GO 67107
// result := UnitFilter ( units , [ f_ok ] ) ;
66583: LD_ADDR_VAR 0 3
66587: PUSH
66588: LD_VAR 0 1
66592: PPUSH
66593: LD_INT 50
66595: PUSH
66596: EMPTY
66597: LIST
66598: PPUSH
66599: CALL_OW 72
66603: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66604: LD_ADDR_VAR 0 8
66608: PUSH
66609: LD_VAR 0 1
66613: PUSH
66614: LD_INT 1
66616: ARRAY
66617: PPUSH
66618: CALL_OW 255
66622: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66623: LD_ADDR_VAR 0 10
66627: PUSH
66628: LD_INT 29
66630: PUSH
66631: LD_INT 91
66633: PUSH
66634: LD_INT 49
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: LIST
66641: ST_TO_ADDR
// if not result then
66642: LD_VAR 0 3
66646: NOT
66647: IFFALSE 66651
// exit ;
66649: GO 67107
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66651: LD_ADDR_VAR 0 5
66655: PUSH
66656: LD_INT 81
66658: PUSH
66659: LD_VAR 0 8
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PPUSH
66668: CALL_OW 69
66672: ST_TO_ADDR
// for i in result do
66673: LD_ADDR_VAR 0 4
66677: PUSH
66678: LD_VAR 0 3
66682: PUSH
66683: FOR_IN
66684: IFFALSE 67105
// begin tag := GetTag ( i ) + 1 ;
66686: LD_ADDR_VAR 0 9
66690: PUSH
66691: LD_VAR 0 4
66695: PPUSH
66696: CALL_OW 110
66700: PUSH
66701: LD_INT 1
66703: PLUS
66704: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66705: LD_ADDR_VAR 0 7
66709: PUSH
66710: LD_VAR 0 4
66714: PPUSH
66715: CALL_OW 250
66719: PPUSH
66720: LD_VAR 0 4
66724: PPUSH
66725: CALL_OW 251
66729: PPUSH
66730: LD_INT 6
66732: PPUSH
66733: CALL 66306 0 3
66737: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66738: LD_VAR 0 4
66742: PPUSH
66743: CALL_OW 247
66747: PUSH
66748: LD_INT 2
66750: EQUAL
66751: PUSH
66752: LD_VAR 0 7
66756: AND
66757: PUSH
66758: LD_VAR 0 4
66762: PPUSH
66763: CALL_OW 264
66767: PUSH
66768: LD_VAR 0 10
66772: IN
66773: NOT
66774: AND
66775: IFFALSE 66814
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66777: LD_VAR 0 4
66781: PPUSH
66782: LD_VAR 0 7
66786: PUSH
66787: LD_INT 1
66789: ARRAY
66790: PUSH
66791: LD_INT 1
66793: ARRAY
66794: PPUSH
66795: LD_VAR 0 7
66799: PUSH
66800: LD_INT 1
66802: ARRAY
66803: PUSH
66804: LD_INT 2
66806: ARRAY
66807: PPUSH
66808: CALL_OW 116
66812: GO 67103
// if path > tag then
66814: LD_VAR 0 2
66818: PUSH
66819: LD_VAR 0 9
66823: GREATER
66824: IFFALSE 67032
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66826: LD_ADDR_VAR 0 6
66830: PUSH
66831: LD_VAR 0 5
66835: PPUSH
66836: LD_INT 91
66838: PUSH
66839: LD_VAR 0 4
66843: PUSH
66844: LD_INT 8
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: LIST
66851: PPUSH
66852: CALL_OW 72
66856: ST_TO_ADDR
// if nearEnemy then
66857: LD_VAR 0 6
66861: IFFALSE 66930
// begin if GetWeapon ( i ) = ru_time_lapser then
66863: LD_VAR 0 4
66867: PPUSH
66868: CALL_OW 264
66872: PUSH
66873: LD_INT 49
66875: EQUAL
66876: IFFALSE 66904
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66878: LD_VAR 0 4
66882: PPUSH
66883: LD_VAR 0 6
66887: PPUSH
66888: LD_VAR 0 4
66892: PPUSH
66893: CALL_OW 74
66897: PPUSH
66898: CALL_OW 112
66902: GO 66928
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66904: LD_VAR 0 4
66908: PPUSH
66909: LD_VAR 0 6
66913: PPUSH
66914: LD_VAR 0 4
66918: PPUSH
66919: CALL_OW 74
66923: PPUSH
66924: CALL_OW 115
// end else
66928: GO 67030
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66930: LD_VAR 0 4
66934: PPUSH
66935: LD_VAR 0 2
66939: PUSH
66940: LD_VAR 0 9
66944: ARRAY
66945: PUSH
66946: LD_INT 1
66948: ARRAY
66949: PPUSH
66950: LD_VAR 0 2
66954: PUSH
66955: LD_VAR 0 9
66959: ARRAY
66960: PUSH
66961: LD_INT 2
66963: ARRAY
66964: PPUSH
66965: CALL_OW 297
66969: PUSH
66970: LD_INT 6
66972: GREATER
66973: IFFALSE 67016
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66975: LD_VAR 0 4
66979: PPUSH
66980: LD_VAR 0 2
66984: PUSH
66985: LD_VAR 0 9
66989: ARRAY
66990: PUSH
66991: LD_INT 1
66993: ARRAY
66994: PPUSH
66995: LD_VAR 0 2
66999: PUSH
67000: LD_VAR 0 9
67004: ARRAY
67005: PUSH
67006: LD_INT 2
67008: ARRAY
67009: PPUSH
67010: CALL_OW 114
67014: GO 67030
// SetTag ( i , tag ) ;
67016: LD_VAR 0 4
67020: PPUSH
67021: LD_VAR 0 9
67025: PPUSH
67026: CALL_OW 109
// end else
67030: GO 67103
// if enemy then
67032: LD_VAR 0 5
67036: IFFALSE 67103
// begin if GetWeapon ( i ) = ru_time_lapser then
67038: LD_VAR 0 4
67042: PPUSH
67043: CALL_OW 264
67047: PUSH
67048: LD_INT 49
67050: EQUAL
67051: IFFALSE 67079
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67053: LD_VAR 0 4
67057: PPUSH
67058: LD_VAR 0 5
67062: PPUSH
67063: LD_VAR 0 4
67067: PPUSH
67068: CALL_OW 74
67072: PPUSH
67073: CALL_OW 112
67077: GO 67103
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67079: LD_VAR 0 4
67083: PPUSH
67084: LD_VAR 0 5
67088: PPUSH
67089: LD_VAR 0 4
67093: PPUSH
67094: CALL_OW 74
67098: PPUSH
67099: CALL_OW 115
// end ; end ;
67103: GO 66683
67105: POP
67106: POP
// end ;
67107: LD_VAR 0 3
67111: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67112: LD_INT 0
67114: PPUSH
67115: PPUSH
67116: PPUSH
// if not unit or IsInUnit ( unit ) then
67117: LD_VAR 0 1
67121: NOT
67122: PUSH
67123: LD_VAR 0 1
67127: PPUSH
67128: CALL_OW 310
67132: OR
67133: IFFALSE 67137
// exit ;
67135: GO 67228
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67137: LD_ADDR_VAR 0 4
67141: PUSH
67142: LD_VAR 0 1
67146: PPUSH
67147: CALL_OW 250
67151: PPUSH
67152: LD_VAR 0 2
67156: PPUSH
67157: LD_INT 1
67159: PPUSH
67160: CALL_OW 272
67164: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67165: LD_ADDR_VAR 0 5
67169: PUSH
67170: LD_VAR 0 1
67174: PPUSH
67175: CALL_OW 251
67179: PPUSH
67180: LD_VAR 0 2
67184: PPUSH
67185: LD_INT 1
67187: PPUSH
67188: CALL_OW 273
67192: ST_TO_ADDR
// if ValidHex ( x , y ) then
67193: LD_VAR 0 4
67197: PPUSH
67198: LD_VAR 0 5
67202: PPUSH
67203: CALL_OW 488
67207: IFFALSE 67228
// ComTurnXY ( unit , x , y ) ;
67209: LD_VAR 0 1
67213: PPUSH
67214: LD_VAR 0 4
67218: PPUSH
67219: LD_VAR 0 5
67223: PPUSH
67224: CALL_OW 118
// end ;
67228: LD_VAR 0 3
67232: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67233: LD_INT 0
67235: PPUSH
67236: PPUSH
// result := false ;
67237: LD_ADDR_VAR 0 3
67241: PUSH
67242: LD_INT 0
67244: ST_TO_ADDR
// if not units then
67245: LD_VAR 0 2
67249: NOT
67250: IFFALSE 67254
// exit ;
67252: GO 67299
// for i in units do
67254: LD_ADDR_VAR 0 4
67258: PUSH
67259: LD_VAR 0 2
67263: PUSH
67264: FOR_IN
67265: IFFALSE 67297
// if See ( side , i ) then
67267: LD_VAR 0 1
67271: PPUSH
67272: LD_VAR 0 4
67276: PPUSH
67277: CALL_OW 292
67281: IFFALSE 67295
// begin result := true ;
67283: LD_ADDR_VAR 0 3
67287: PUSH
67288: LD_INT 1
67290: ST_TO_ADDR
// exit ;
67291: POP
67292: POP
67293: GO 67299
// end ;
67295: GO 67264
67297: POP
67298: POP
// end ;
67299: LD_VAR 0 3
67303: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67304: LD_INT 0
67306: PPUSH
67307: PPUSH
67308: PPUSH
67309: PPUSH
// if not unit or not points then
67310: LD_VAR 0 1
67314: NOT
67315: PUSH
67316: LD_VAR 0 2
67320: NOT
67321: OR
67322: IFFALSE 67326
// exit ;
67324: GO 67416
// dist := 99999 ;
67326: LD_ADDR_VAR 0 5
67330: PUSH
67331: LD_INT 99999
67333: ST_TO_ADDR
// for i in points do
67334: LD_ADDR_VAR 0 4
67338: PUSH
67339: LD_VAR 0 2
67343: PUSH
67344: FOR_IN
67345: IFFALSE 67414
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67347: LD_ADDR_VAR 0 6
67351: PUSH
67352: LD_VAR 0 1
67356: PPUSH
67357: LD_VAR 0 4
67361: PUSH
67362: LD_INT 1
67364: ARRAY
67365: PPUSH
67366: LD_VAR 0 4
67370: PUSH
67371: LD_INT 2
67373: ARRAY
67374: PPUSH
67375: CALL_OW 297
67379: ST_TO_ADDR
// if tmpDist < dist then
67380: LD_VAR 0 6
67384: PUSH
67385: LD_VAR 0 5
67389: LESS
67390: IFFALSE 67412
// begin result := i ;
67392: LD_ADDR_VAR 0 3
67396: PUSH
67397: LD_VAR 0 4
67401: ST_TO_ADDR
// dist := tmpDist ;
67402: LD_ADDR_VAR 0 5
67406: PUSH
67407: LD_VAR 0 6
67411: ST_TO_ADDR
// end ; end ;
67412: GO 67344
67414: POP
67415: POP
// end ;
67416: LD_VAR 0 3
67420: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67421: LD_INT 0
67423: PPUSH
// uc_side := side ;
67424: LD_ADDR_OWVAR 20
67428: PUSH
67429: LD_VAR 0 1
67433: ST_TO_ADDR
// uc_nation := 3 ;
67434: LD_ADDR_OWVAR 21
67438: PUSH
67439: LD_INT 3
67441: ST_TO_ADDR
// vc_chassis := 25 ;
67442: LD_ADDR_OWVAR 37
67446: PUSH
67447: LD_INT 25
67449: ST_TO_ADDR
// vc_engine := engine_siberite ;
67450: LD_ADDR_OWVAR 39
67454: PUSH
67455: LD_INT 3
67457: ST_TO_ADDR
// vc_control := control_computer ;
67458: LD_ADDR_OWVAR 38
67462: PUSH
67463: LD_INT 3
67465: ST_TO_ADDR
// vc_weapon := 59 ;
67466: LD_ADDR_OWVAR 40
67470: PUSH
67471: LD_INT 59
67473: ST_TO_ADDR
// result := CreateVehicle ;
67474: LD_ADDR_VAR 0 5
67478: PUSH
67479: CALL_OW 45
67483: ST_TO_ADDR
// SetDir ( result , d ) ;
67484: LD_VAR 0 5
67488: PPUSH
67489: LD_VAR 0 4
67493: PPUSH
67494: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67498: LD_VAR 0 5
67502: PPUSH
67503: LD_VAR 0 2
67507: PPUSH
67508: LD_VAR 0 3
67512: PPUSH
67513: LD_INT 0
67515: PPUSH
67516: CALL_OW 48
// end ;
67520: LD_VAR 0 5
67524: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67525: LD_INT 0
67527: PPUSH
67528: PPUSH
67529: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67530: LD_ADDR_VAR 0 2
67534: PUSH
67535: LD_INT 0
67537: PUSH
67538: LD_INT 0
67540: PUSH
67541: LD_INT 0
67543: PUSH
67544: LD_INT 0
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67553: LD_VAR 0 1
67557: NOT
67558: PUSH
67559: LD_VAR 0 1
67563: PPUSH
67564: CALL_OW 264
67568: PUSH
67569: LD_INT 12
67571: PUSH
67572: LD_INT 51
67574: PUSH
67575: LD_INT 32
67577: PUSH
67578: LD_INT 89
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: IN
67587: NOT
67588: OR
67589: IFFALSE 67593
// exit ;
67591: GO 67691
// for i := 1 to 3 do
67593: LD_ADDR_VAR 0 3
67597: PUSH
67598: DOUBLE
67599: LD_INT 1
67601: DEC
67602: ST_TO_ADDR
67603: LD_INT 3
67605: PUSH
67606: FOR_TO
67607: IFFALSE 67689
// begin tmp := GetCargo ( cargo , i ) ;
67609: LD_ADDR_VAR 0 4
67613: PUSH
67614: LD_VAR 0 1
67618: PPUSH
67619: LD_VAR 0 3
67623: PPUSH
67624: CALL_OW 289
67628: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67629: LD_ADDR_VAR 0 2
67633: PUSH
67634: LD_VAR 0 2
67638: PPUSH
67639: LD_VAR 0 3
67643: PPUSH
67644: LD_VAR 0 4
67648: PPUSH
67649: CALL_OW 1
67653: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67654: LD_ADDR_VAR 0 2
67658: PUSH
67659: LD_VAR 0 2
67663: PPUSH
67664: LD_INT 4
67666: PPUSH
67667: LD_VAR 0 2
67671: PUSH
67672: LD_INT 4
67674: ARRAY
67675: PUSH
67676: LD_VAR 0 4
67680: PLUS
67681: PPUSH
67682: CALL_OW 1
67686: ST_TO_ADDR
// end ;
67687: GO 67606
67689: POP
67690: POP
// end ;
67691: LD_VAR 0 2
67695: RET
// export function Length ( array ) ; begin
67696: LD_INT 0
67698: PPUSH
// result := array + 0 ;
67699: LD_ADDR_VAR 0 2
67703: PUSH
67704: LD_VAR 0 1
67708: PUSH
67709: LD_INT 0
67711: PLUS
67712: ST_TO_ADDR
// end ;
67713: LD_VAR 0 2
67717: RET
// export function PrepareArray ( array ) ; begin
67718: LD_INT 0
67720: PPUSH
// result := array diff 0 ;
67721: LD_ADDR_VAR 0 2
67725: PUSH
67726: LD_VAR 0 1
67730: PUSH
67731: LD_INT 0
67733: DIFF
67734: ST_TO_ADDR
// if not result [ 1 ] then
67735: LD_VAR 0 2
67739: PUSH
67740: LD_INT 1
67742: ARRAY
67743: NOT
67744: IFFALSE 67764
// result := Delete ( result , 1 ) ;
67746: LD_ADDR_VAR 0 2
67750: PUSH
67751: LD_VAR 0 2
67755: PPUSH
67756: LD_INT 1
67758: PPUSH
67759: CALL_OW 3
67763: ST_TO_ADDR
// end ;
67764: LD_VAR 0 2
67768: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67769: LD_INT 0
67771: PPUSH
67772: PPUSH
67773: PPUSH
67774: PPUSH
// sibRocketRange := 25 ;
67775: LD_ADDR_VAR 0 6
67779: PUSH
67780: LD_INT 25
67782: ST_TO_ADDR
// result := false ;
67783: LD_ADDR_VAR 0 4
67787: PUSH
67788: LD_INT 0
67790: ST_TO_ADDR
// for i := 0 to 5 do
67791: LD_ADDR_VAR 0 5
67795: PUSH
67796: DOUBLE
67797: LD_INT 0
67799: DEC
67800: ST_TO_ADDR
67801: LD_INT 5
67803: PUSH
67804: FOR_TO
67805: IFFALSE 67872
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67807: LD_VAR 0 1
67811: PPUSH
67812: LD_VAR 0 5
67816: PPUSH
67817: LD_VAR 0 6
67821: PPUSH
67822: CALL_OW 272
67826: PPUSH
67827: LD_VAR 0 2
67831: PPUSH
67832: LD_VAR 0 5
67836: PPUSH
67837: LD_VAR 0 6
67841: PPUSH
67842: CALL_OW 273
67846: PPUSH
67847: LD_VAR 0 3
67851: PPUSH
67852: CALL_OW 309
67856: IFFALSE 67870
// begin result := true ;
67858: LD_ADDR_VAR 0 4
67862: PUSH
67863: LD_INT 1
67865: ST_TO_ADDR
// exit ;
67866: POP
67867: POP
67868: GO 67874
// end ;
67870: GO 67804
67872: POP
67873: POP
// end ; end_of_file
67874: LD_VAR 0 4
67878: RET
// every 0 0$1 do
67879: GO 67881
67881: DISABLE
// begin enable ;
67882: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
67883: LD_STRING updateTimer(
67885: PUSH
67886: LD_OWVAR 1
67890: STR
67891: PUSH
67892: LD_STRING );
67894: STR
67895: PPUSH
67896: CALL_OW 559
// end ;
67900: END
// export function SOS_MapStart ( ) ; begin
67901: LD_INT 0
67903: PPUSH
// if streamModeActive then
67904: LD_EXP 65
67908: IFFALSE 67917
// DefineStreamItems ( true ) ;
67910: LD_INT 1
67912: PPUSH
67913: CALL 69571 0 1
// UpdateFactoryWaypoints ( ) ;
67917: CALL 82432 0 0
// UpdateWarehouseGatheringPoints ( ) ;
67921: CALL 82689 0 0
// end ;
67925: LD_VAR 0 1
67929: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
67930: LD_INT 0
67932: PPUSH
// if p2 = 100 then
67933: LD_VAR 0 2
67937: PUSH
67938: LD_INT 100
67940: EQUAL
67941: IFFALSE 68944
// begin if not StreamModeActive then
67943: LD_EXP 65
67947: NOT
67948: IFFALSE 67958
// StreamModeActive := true ;
67950: LD_ADDR_EXP 65
67954: PUSH
67955: LD_INT 1
67957: ST_TO_ADDR
// if p3 = 0 then
67958: LD_VAR 0 3
67962: PUSH
67963: LD_INT 0
67965: EQUAL
67966: IFFALSE 67972
// InitStreamMode ;
67968: CALL 69107 0 0
// if p3 = 1 then
67972: LD_VAR 0 3
67976: PUSH
67977: LD_INT 1
67979: EQUAL
67980: IFFALSE 67990
// sRocket := true ;
67982: LD_ADDR_EXP 70
67986: PUSH
67987: LD_INT 1
67989: ST_TO_ADDR
// if p3 = 2 then
67990: LD_VAR 0 3
67994: PUSH
67995: LD_INT 2
67997: EQUAL
67998: IFFALSE 68008
// sSpeed := true ;
68000: LD_ADDR_EXP 69
68004: PUSH
68005: LD_INT 1
68007: ST_TO_ADDR
// if p3 = 3 then
68008: LD_VAR 0 3
68012: PUSH
68013: LD_INT 3
68015: EQUAL
68016: IFFALSE 68026
// sEngine := true ;
68018: LD_ADDR_EXP 71
68022: PUSH
68023: LD_INT 1
68025: ST_TO_ADDR
// if p3 = 4 then
68026: LD_VAR 0 3
68030: PUSH
68031: LD_INT 4
68033: EQUAL
68034: IFFALSE 68044
// sSpec := true ;
68036: LD_ADDR_EXP 68
68040: PUSH
68041: LD_INT 1
68043: ST_TO_ADDR
// if p3 = 5 then
68044: LD_VAR 0 3
68048: PUSH
68049: LD_INT 5
68051: EQUAL
68052: IFFALSE 68062
// sLevel := true ;
68054: LD_ADDR_EXP 72
68058: PUSH
68059: LD_INT 1
68061: ST_TO_ADDR
// if p3 = 6 then
68062: LD_VAR 0 3
68066: PUSH
68067: LD_INT 6
68069: EQUAL
68070: IFFALSE 68080
// sArmoury := true ;
68072: LD_ADDR_EXP 73
68076: PUSH
68077: LD_INT 1
68079: ST_TO_ADDR
// if p3 = 7 then
68080: LD_VAR 0 3
68084: PUSH
68085: LD_INT 7
68087: EQUAL
68088: IFFALSE 68098
// sRadar := true ;
68090: LD_ADDR_EXP 74
68094: PUSH
68095: LD_INT 1
68097: ST_TO_ADDR
// if p3 = 8 then
68098: LD_VAR 0 3
68102: PUSH
68103: LD_INT 8
68105: EQUAL
68106: IFFALSE 68116
// sBunker := true ;
68108: LD_ADDR_EXP 75
68112: PUSH
68113: LD_INT 1
68115: ST_TO_ADDR
// if p3 = 9 then
68116: LD_VAR 0 3
68120: PUSH
68121: LD_INT 9
68123: EQUAL
68124: IFFALSE 68134
// sHack := true ;
68126: LD_ADDR_EXP 76
68130: PUSH
68131: LD_INT 1
68133: ST_TO_ADDR
// if p3 = 10 then
68134: LD_VAR 0 3
68138: PUSH
68139: LD_INT 10
68141: EQUAL
68142: IFFALSE 68152
// sFire := true ;
68144: LD_ADDR_EXP 77
68148: PUSH
68149: LD_INT 1
68151: ST_TO_ADDR
// if p3 = 11 then
68152: LD_VAR 0 3
68156: PUSH
68157: LD_INT 11
68159: EQUAL
68160: IFFALSE 68170
// sRefresh := true ;
68162: LD_ADDR_EXP 78
68166: PUSH
68167: LD_INT 1
68169: ST_TO_ADDR
// if p3 = 12 then
68170: LD_VAR 0 3
68174: PUSH
68175: LD_INT 12
68177: EQUAL
68178: IFFALSE 68188
// sExp := true ;
68180: LD_ADDR_EXP 79
68184: PUSH
68185: LD_INT 1
68187: ST_TO_ADDR
// if p3 = 13 then
68188: LD_VAR 0 3
68192: PUSH
68193: LD_INT 13
68195: EQUAL
68196: IFFALSE 68206
// sDepot := true ;
68198: LD_ADDR_EXP 80
68202: PUSH
68203: LD_INT 1
68205: ST_TO_ADDR
// if p3 = 14 then
68206: LD_VAR 0 3
68210: PUSH
68211: LD_INT 14
68213: EQUAL
68214: IFFALSE 68224
// sFlag := true ;
68216: LD_ADDR_EXP 81
68220: PUSH
68221: LD_INT 1
68223: ST_TO_ADDR
// if p3 = 15 then
68224: LD_VAR 0 3
68228: PUSH
68229: LD_INT 15
68231: EQUAL
68232: IFFALSE 68242
// sKamikadze := true ;
68234: LD_ADDR_EXP 89
68238: PUSH
68239: LD_INT 1
68241: ST_TO_ADDR
// if p3 = 16 then
68242: LD_VAR 0 3
68246: PUSH
68247: LD_INT 16
68249: EQUAL
68250: IFFALSE 68260
// sTroll := true ;
68252: LD_ADDR_EXP 90
68256: PUSH
68257: LD_INT 1
68259: ST_TO_ADDR
// if p3 = 17 then
68260: LD_VAR 0 3
68264: PUSH
68265: LD_INT 17
68267: EQUAL
68268: IFFALSE 68278
// sSlow := true ;
68270: LD_ADDR_EXP 91
68274: PUSH
68275: LD_INT 1
68277: ST_TO_ADDR
// if p3 = 18 then
68278: LD_VAR 0 3
68282: PUSH
68283: LD_INT 18
68285: EQUAL
68286: IFFALSE 68296
// sLack := true ;
68288: LD_ADDR_EXP 92
68292: PUSH
68293: LD_INT 1
68295: ST_TO_ADDR
// if p3 = 19 then
68296: LD_VAR 0 3
68300: PUSH
68301: LD_INT 19
68303: EQUAL
68304: IFFALSE 68314
// sTank := true ;
68306: LD_ADDR_EXP 94
68310: PUSH
68311: LD_INT 1
68313: ST_TO_ADDR
// if p3 = 20 then
68314: LD_VAR 0 3
68318: PUSH
68319: LD_INT 20
68321: EQUAL
68322: IFFALSE 68332
// sRemote := true ;
68324: LD_ADDR_EXP 95
68328: PUSH
68329: LD_INT 1
68331: ST_TO_ADDR
// if p3 = 21 then
68332: LD_VAR 0 3
68336: PUSH
68337: LD_INT 21
68339: EQUAL
68340: IFFALSE 68350
// sPowell := true ;
68342: LD_ADDR_EXP 96
68346: PUSH
68347: LD_INT 1
68349: ST_TO_ADDR
// if p3 = 22 then
68350: LD_VAR 0 3
68354: PUSH
68355: LD_INT 22
68357: EQUAL
68358: IFFALSE 68368
// sTeleport := true ;
68360: LD_ADDR_EXP 99
68364: PUSH
68365: LD_INT 1
68367: ST_TO_ADDR
// if p3 = 23 then
68368: LD_VAR 0 3
68372: PUSH
68373: LD_INT 23
68375: EQUAL
68376: IFFALSE 68386
// sOilTower := true ;
68378: LD_ADDR_EXP 101
68382: PUSH
68383: LD_INT 1
68385: ST_TO_ADDR
// if p3 = 24 then
68386: LD_VAR 0 3
68390: PUSH
68391: LD_INT 24
68393: EQUAL
68394: IFFALSE 68404
// sShovel := true ;
68396: LD_ADDR_EXP 102
68400: PUSH
68401: LD_INT 1
68403: ST_TO_ADDR
// if p3 = 25 then
68404: LD_VAR 0 3
68408: PUSH
68409: LD_INT 25
68411: EQUAL
68412: IFFALSE 68422
// sSheik := true ;
68414: LD_ADDR_EXP 103
68418: PUSH
68419: LD_INT 1
68421: ST_TO_ADDR
// if p3 = 26 then
68422: LD_VAR 0 3
68426: PUSH
68427: LD_INT 26
68429: EQUAL
68430: IFFALSE 68440
// sEarthquake := true ;
68432: LD_ADDR_EXP 105
68436: PUSH
68437: LD_INT 1
68439: ST_TO_ADDR
// if p3 = 27 then
68440: LD_VAR 0 3
68444: PUSH
68445: LD_INT 27
68447: EQUAL
68448: IFFALSE 68458
// sAI := true ;
68450: LD_ADDR_EXP 106
68454: PUSH
68455: LD_INT 1
68457: ST_TO_ADDR
// if p3 = 28 then
68458: LD_VAR 0 3
68462: PUSH
68463: LD_INT 28
68465: EQUAL
68466: IFFALSE 68476
// sCargo := true ;
68468: LD_ADDR_EXP 109
68472: PUSH
68473: LD_INT 1
68475: ST_TO_ADDR
// if p3 = 29 then
68476: LD_VAR 0 3
68480: PUSH
68481: LD_INT 29
68483: EQUAL
68484: IFFALSE 68494
// sDLaser := true ;
68486: LD_ADDR_EXP 110
68490: PUSH
68491: LD_INT 1
68493: ST_TO_ADDR
// if p3 = 30 then
68494: LD_VAR 0 3
68498: PUSH
68499: LD_INT 30
68501: EQUAL
68502: IFFALSE 68512
// sExchange := true ;
68504: LD_ADDR_EXP 111
68508: PUSH
68509: LD_INT 1
68511: ST_TO_ADDR
// if p3 = 31 then
68512: LD_VAR 0 3
68516: PUSH
68517: LD_INT 31
68519: EQUAL
68520: IFFALSE 68530
// sFac := true ;
68522: LD_ADDR_EXP 112
68526: PUSH
68527: LD_INT 1
68529: ST_TO_ADDR
// if p3 = 32 then
68530: LD_VAR 0 3
68534: PUSH
68535: LD_INT 32
68537: EQUAL
68538: IFFALSE 68548
// sPower := true ;
68540: LD_ADDR_EXP 113
68544: PUSH
68545: LD_INT 1
68547: ST_TO_ADDR
// if p3 = 33 then
68548: LD_VAR 0 3
68552: PUSH
68553: LD_INT 33
68555: EQUAL
68556: IFFALSE 68566
// sRandom := true ;
68558: LD_ADDR_EXP 114
68562: PUSH
68563: LD_INT 1
68565: ST_TO_ADDR
// if p3 = 34 then
68566: LD_VAR 0 3
68570: PUSH
68571: LD_INT 34
68573: EQUAL
68574: IFFALSE 68584
// sShield := true ;
68576: LD_ADDR_EXP 115
68580: PUSH
68581: LD_INT 1
68583: ST_TO_ADDR
// if p3 = 35 then
68584: LD_VAR 0 3
68588: PUSH
68589: LD_INT 35
68591: EQUAL
68592: IFFALSE 68602
// sTime := true ;
68594: LD_ADDR_EXP 116
68598: PUSH
68599: LD_INT 1
68601: ST_TO_ADDR
// if p3 = 36 then
68602: LD_VAR 0 3
68606: PUSH
68607: LD_INT 36
68609: EQUAL
68610: IFFALSE 68620
// sTools := true ;
68612: LD_ADDR_EXP 117
68616: PUSH
68617: LD_INT 1
68619: ST_TO_ADDR
// if p3 = 101 then
68620: LD_VAR 0 3
68624: PUSH
68625: LD_INT 101
68627: EQUAL
68628: IFFALSE 68638
// sSold := true ;
68630: LD_ADDR_EXP 82
68634: PUSH
68635: LD_INT 1
68637: ST_TO_ADDR
// if p3 = 102 then
68638: LD_VAR 0 3
68642: PUSH
68643: LD_INT 102
68645: EQUAL
68646: IFFALSE 68656
// sDiff := true ;
68648: LD_ADDR_EXP 83
68652: PUSH
68653: LD_INT 1
68655: ST_TO_ADDR
// if p3 = 103 then
68656: LD_VAR 0 3
68660: PUSH
68661: LD_INT 103
68663: EQUAL
68664: IFFALSE 68674
// sFog := true ;
68666: LD_ADDR_EXP 86
68670: PUSH
68671: LD_INT 1
68673: ST_TO_ADDR
// if p3 = 104 then
68674: LD_VAR 0 3
68678: PUSH
68679: LD_INT 104
68681: EQUAL
68682: IFFALSE 68692
// sReset := true ;
68684: LD_ADDR_EXP 87
68688: PUSH
68689: LD_INT 1
68691: ST_TO_ADDR
// if p3 = 105 then
68692: LD_VAR 0 3
68696: PUSH
68697: LD_INT 105
68699: EQUAL
68700: IFFALSE 68710
// sSun := true ;
68702: LD_ADDR_EXP 88
68706: PUSH
68707: LD_INT 1
68709: ST_TO_ADDR
// if p3 = 106 then
68710: LD_VAR 0 3
68714: PUSH
68715: LD_INT 106
68717: EQUAL
68718: IFFALSE 68728
// sTiger := true ;
68720: LD_ADDR_EXP 84
68724: PUSH
68725: LD_INT 1
68727: ST_TO_ADDR
// if p3 = 107 then
68728: LD_VAR 0 3
68732: PUSH
68733: LD_INT 107
68735: EQUAL
68736: IFFALSE 68746
// sBomb := true ;
68738: LD_ADDR_EXP 85
68742: PUSH
68743: LD_INT 1
68745: ST_TO_ADDR
// if p3 = 108 then
68746: LD_VAR 0 3
68750: PUSH
68751: LD_INT 108
68753: EQUAL
68754: IFFALSE 68764
// sWound := true ;
68756: LD_ADDR_EXP 93
68760: PUSH
68761: LD_INT 1
68763: ST_TO_ADDR
// if p3 = 109 then
68764: LD_VAR 0 3
68768: PUSH
68769: LD_INT 109
68771: EQUAL
68772: IFFALSE 68782
// sBetray := true ;
68774: LD_ADDR_EXP 97
68778: PUSH
68779: LD_INT 1
68781: ST_TO_ADDR
// if p3 = 110 then
68782: LD_VAR 0 3
68786: PUSH
68787: LD_INT 110
68789: EQUAL
68790: IFFALSE 68800
// sContamin := true ;
68792: LD_ADDR_EXP 98
68796: PUSH
68797: LD_INT 1
68799: ST_TO_ADDR
// if p3 = 111 then
68800: LD_VAR 0 3
68804: PUSH
68805: LD_INT 111
68807: EQUAL
68808: IFFALSE 68818
// sOil := true ;
68810: LD_ADDR_EXP 100
68814: PUSH
68815: LD_INT 1
68817: ST_TO_ADDR
// if p3 = 112 then
68818: LD_VAR 0 3
68822: PUSH
68823: LD_INT 112
68825: EQUAL
68826: IFFALSE 68836
// sStu := true ;
68828: LD_ADDR_EXP 104
68832: PUSH
68833: LD_INT 1
68835: ST_TO_ADDR
// if p3 = 113 then
68836: LD_VAR 0 3
68840: PUSH
68841: LD_INT 113
68843: EQUAL
68844: IFFALSE 68854
// sBazooka := true ;
68846: LD_ADDR_EXP 107
68850: PUSH
68851: LD_INT 1
68853: ST_TO_ADDR
// if p3 = 114 then
68854: LD_VAR 0 3
68858: PUSH
68859: LD_INT 114
68861: EQUAL
68862: IFFALSE 68872
// sMortar := true ;
68864: LD_ADDR_EXP 108
68868: PUSH
68869: LD_INT 1
68871: ST_TO_ADDR
// if p3 = 115 then
68872: LD_VAR 0 3
68876: PUSH
68877: LD_INT 115
68879: EQUAL
68880: IFFALSE 68890
// sRanger := true ;
68882: LD_ADDR_EXP 118
68886: PUSH
68887: LD_INT 1
68889: ST_TO_ADDR
// if p3 = 116 then
68890: LD_VAR 0 3
68894: PUSH
68895: LD_INT 116
68897: EQUAL
68898: IFFALSE 68908
// sComputer := true ;
68900: LD_ADDR_EXP 119
68904: PUSH
68905: LD_INT 1
68907: ST_TO_ADDR
// if p3 = 117 then
68908: LD_VAR 0 3
68912: PUSH
68913: LD_INT 117
68915: EQUAL
68916: IFFALSE 68926
// s30 := true ;
68918: LD_ADDR_EXP 120
68922: PUSH
68923: LD_INT 1
68925: ST_TO_ADDR
// if p3 = 118 then
68926: LD_VAR 0 3
68930: PUSH
68931: LD_INT 118
68933: EQUAL
68934: IFFALSE 68944
// s60 := true ;
68936: LD_ADDR_EXP 121
68940: PUSH
68941: LD_INT 1
68943: ST_TO_ADDR
// end ; if p2 = 101 then
68944: LD_VAR 0 2
68948: PUSH
68949: LD_INT 101
68951: EQUAL
68952: IFFALSE 69080
// begin case p3 of 1 :
68954: LD_VAR 0 3
68958: PUSH
68959: LD_INT 1
68961: DOUBLE
68962: EQUAL
68963: IFTRUE 68967
68965: GO 68974
68967: POP
// hHackUnlimitedResources ; 2 :
68968: CALL 81178 0 0
68972: GO 69080
68974: LD_INT 2
68976: DOUBLE
68977: EQUAL
68978: IFTRUE 68982
68980: GO 68989
68982: POP
// hHackSetLevel10 ; 3 :
68983: CALL 81311 0 0
68987: GO 69080
68989: LD_INT 3
68991: DOUBLE
68992: EQUAL
68993: IFTRUE 68997
68995: GO 69004
68997: POP
// hHackSetLevel10YourUnits ; 4 :
68998: CALL 81396 0 0
69002: GO 69080
69004: LD_INT 4
69006: DOUBLE
69007: EQUAL
69008: IFTRUE 69012
69010: GO 69019
69012: POP
// hHackInvincible ; 5 :
69013: CALL 81844 0 0
69017: GO 69080
69019: LD_INT 5
69021: DOUBLE
69022: EQUAL
69023: IFTRUE 69027
69025: GO 69034
69027: POP
// hHackInvisible ; 6 :
69028: CALL 81955 0 0
69032: GO 69080
69034: LD_INT 6
69036: DOUBLE
69037: EQUAL
69038: IFTRUE 69042
69040: GO 69049
69042: POP
// hHackChangeYourSide ; 7 :
69043: CALL 82012 0 0
69047: GO 69080
69049: LD_INT 7
69051: DOUBLE
69052: EQUAL
69053: IFTRUE 69057
69055: GO 69064
69057: POP
// hHackChangeUnitSide ; 8 :
69058: CALL 82054 0 0
69062: GO 69080
69064: LD_INT 8
69066: DOUBLE
69067: EQUAL
69068: IFTRUE 69072
69070: GO 69079
69072: POP
// hHackFog ; end ;
69073: CALL 82155 0 0
69077: GO 69080
69079: POP
// end ; end ;
69080: LD_VAR 0 7
69084: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
69085: GO 69087
69087: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
69088: LD_STRING initStreamRollete();
69090: PPUSH
69091: CALL_OW 559
// InitStreamMode ;
69095: CALL 69107 0 0
// DefineStreamItems ( false ) ;
69099: LD_INT 0
69101: PPUSH
69102: CALL 69571 0 1
// end ;
69106: END
// function InitStreamMode ; begin
69107: LD_INT 0
69109: PPUSH
// streamModeActive := false ;
69110: LD_ADDR_EXP 65
69114: PUSH
69115: LD_INT 0
69117: ST_TO_ADDR
// normalCounter := 36 ;
69118: LD_ADDR_EXP 66
69122: PUSH
69123: LD_INT 36
69125: ST_TO_ADDR
// hardcoreCounter := 18 ;
69126: LD_ADDR_EXP 67
69130: PUSH
69131: LD_INT 18
69133: ST_TO_ADDR
// sRocket := false ;
69134: LD_ADDR_EXP 70
69138: PUSH
69139: LD_INT 0
69141: ST_TO_ADDR
// sSpeed := false ;
69142: LD_ADDR_EXP 69
69146: PUSH
69147: LD_INT 0
69149: ST_TO_ADDR
// sEngine := false ;
69150: LD_ADDR_EXP 71
69154: PUSH
69155: LD_INT 0
69157: ST_TO_ADDR
// sSpec := false ;
69158: LD_ADDR_EXP 68
69162: PUSH
69163: LD_INT 0
69165: ST_TO_ADDR
// sLevel := false ;
69166: LD_ADDR_EXP 72
69170: PUSH
69171: LD_INT 0
69173: ST_TO_ADDR
// sArmoury := false ;
69174: LD_ADDR_EXP 73
69178: PUSH
69179: LD_INT 0
69181: ST_TO_ADDR
// sRadar := false ;
69182: LD_ADDR_EXP 74
69186: PUSH
69187: LD_INT 0
69189: ST_TO_ADDR
// sBunker := false ;
69190: LD_ADDR_EXP 75
69194: PUSH
69195: LD_INT 0
69197: ST_TO_ADDR
// sHack := false ;
69198: LD_ADDR_EXP 76
69202: PUSH
69203: LD_INT 0
69205: ST_TO_ADDR
// sFire := false ;
69206: LD_ADDR_EXP 77
69210: PUSH
69211: LD_INT 0
69213: ST_TO_ADDR
// sRefresh := false ;
69214: LD_ADDR_EXP 78
69218: PUSH
69219: LD_INT 0
69221: ST_TO_ADDR
// sExp := false ;
69222: LD_ADDR_EXP 79
69226: PUSH
69227: LD_INT 0
69229: ST_TO_ADDR
// sDepot := false ;
69230: LD_ADDR_EXP 80
69234: PUSH
69235: LD_INT 0
69237: ST_TO_ADDR
// sFlag := false ;
69238: LD_ADDR_EXP 81
69242: PUSH
69243: LD_INT 0
69245: ST_TO_ADDR
// sKamikadze := false ;
69246: LD_ADDR_EXP 89
69250: PUSH
69251: LD_INT 0
69253: ST_TO_ADDR
// sTroll := false ;
69254: LD_ADDR_EXP 90
69258: PUSH
69259: LD_INT 0
69261: ST_TO_ADDR
// sSlow := false ;
69262: LD_ADDR_EXP 91
69266: PUSH
69267: LD_INT 0
69269: ST_TO_ADDR
// sLack := false ;
69270: LD_ADDR_EXP 92
69274: PUSH
69275: LD_INT 0
69277: ST_TO_ADDR
// sTank := false ;
69278: LD_ADDR_EXP 94
69282: PUSH
69283: LD_INT 0
69285: ST_TO_ADDR
// sRemote := false ;
69286: LD_ADDR_EXP 95
69290: PUSH
69291: LD_INT 0
69293: ST_TO_ADDR
// sPowell := false ;
69294: LD_ADDR_EXP 96
69298: PUSH
69299: LD_INT 0
69301: ST_TO_ADDR
// sTeleport := false ;
69302: LD_ADDR_EXP 99
69306: PUSH
69307: LD_INT 0
69309: ST_TO_ADDR
// sOilTower := false ;
69310: LD_ADDR_EXP 101
69314: PUSH
69315: LD_INT 0
69317: ST_TO_ADDR
// sShovel := false ;
69318: LD_ADDR_EXP 102
69322: PUSH
69323: LD_INT 0
69325: ST_TO_ADDR
// sSheik := false ;
69326: LD_ADDR_EXP 103
69330: PUSH
69331: LD_INT 0
69333: ST_TO_ADDR
// sEarthquake := false ;
69334: LD_ADDR_EXP 105
69338: PUSH
69339: LD_INT 0
69341: ST_TO_ADDR
// sAI := false ;
69342: LD_ADDR_EXP 106
69346: PUSH
69347: LD_INT 0
69349: ST_TO_ADDR
// sCargo := false ;
69350: LD_ADDR_EXP 109
69354: PUSH
69355: LD_INT 0
69357: ST_TO_ADDR
// sDLaser := false ;
69358: LD_ADDR_EXP 110
69362: PUSH
69363: LD_INT 0
69365: ST_TO_ADDR
// sExchange := false ;
69366: LD_ADDR_EXP 111
69370: PUSH
69371: LD_INT 0
69373: ST_TO_ADDR
// sFac := false ;
69374: LD_ADDR_EXP 112
69378: PUSH
69379: LD_INT 0
69381: ST_TO_ADDR
// sPower := false ;
69382: LD_ADDR_EXP 113
69386: PUSH
69387: LD_INT 0
69389: ST_TO_ADDR
// sRandom := false ;
69390: LD_ADDR_EXP 114
69394: PUSH
69395: LD_INT 0
69397: ST_TO_ADDR
// sShield := false ;
69398: LD_ADDR_EXP 115
69402: PUSH
69403: LD_INT 0
69405: ST_TO_ADDR
// sTime := false ;
69406: LD_ADDR_EXP 116
69410: PUSH
69411: LD_INT 0
69413: ST_TO_ADDR
// sTools := false ;
69414: LD_ADDR_EXP 117
69418: PUSH
69419: LD_INT 0
69421: ST_TO_ADDR
// sSold := false ;
69422: LD_ADDR_EXP 82
69426: PUSH
69427: LD_INT 0
69429: ST_TO_ADDR
// sDiff := false ;
69430: LD_ADDR_EXP 83
69434: PUSH
69435: LD_INT 0
69437: ST_TO_ADDR
// sFog := false ;
69438: LD_ADDR_EXP 86
69442: PUSH
69443: LD_INT 0
69445: ST_TO_ADDR
// sReset := false ;
69446: LD_ADDR_EXP 87
69450: PUSH
69451: LD_INT 0
69453: ST_TO_ADDR
// sSun := false ;
69454: LD_ADDR_EXP 88
69458: PUSH
69459: LD_INT 0
69461: ST_TO_ADDR
// sTiger := false ;
69462: LD_ADDR_EXP 84
69466: PUSH
69467: LD_INT 0
69469: ST_TO_ADDR
// sBomb := false ;
69470: LD_ADDR_EXP 85
69474: PUSH
69475: LD_INT 0
69477: ST_TO_ADDR
// sWound := false ;
69478: LD_ADDR_EXP 93
69482: PUSH
69483: LD_INT 0
69485: ST_TO_ADDR
// sBetray := false ;
69486: LD_ADDR_EXP 97
69490: PUSH
69491: LD_INT 0
69493: ST_TO_ADDR
// sContamin := false ;
69494: LD_ADDR_EXP 98
69498: PUSH
69499: LD_INT 0
69501: ST_TO_ADDR
// sOil := false ;
69502: LD_ADDR_EXP 100
69506: PUSH
69507: LD_INT 0
69509: ST_TO_ADDR
// sStu := false ;
69510: LD_ADDR_EXP 104
69514: PUSH
69515: LD_INT 0
69517: ST_TO_ADDR
// sBazooka := false ;
69518: LD_ADDR_EXP 107
69522: PUSH
69523: LD_INT 0
69525: ST_TO_ADDR
// sMortar := false ;
69526: LD_ADDR_EXP 108
69530: PUSH
69531: LD_INT 0
69533: ST_TO_ADDR
// sRanger := false ;
69534: LD_ADDR_EXP 118
69538: PUSH
69539: LD_INT 0
69541: ST_TO_ADDR
// sComputer := false ;
69542: LD_ADDR_EXP 119
69546: PUSH
69547: LD_INT 0
69549: ST_TO_ADDR
// s30 := false ;
69550: LD_ADDR_EXP 120
69554: PUSH
69555: LD_INT 0
69557: ST_TO_ADDR
// s60 := false ;
69558: LD_ADDR_EXP 121
69562: PUSH
69563: LD_INT 0
69565: ST_TO_ADDR
// end ;
69566: LD_VAR 0 1
69570: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
69571: LD_INT 0
69573: PPUSH
69574: PPUSH
69575: PPUSH
69576: PPUSH
69577: PPUSH
69578: PPUSH
69579: PPUSH
// result := [ ] ;
69580: LD_ADDR_VAR 0 2
69584: PUSH
69585: EMPTY
69586: ST_TO_ADDR
// if campaign_id = 1 then
69587: LD_OWVAR 69
69591: PUSH
69592: LD_INT 1
69594: EQUAL
69595: IFFALSE 72761
// begin case mission_number of 1 :
69597: LD_OWVAR 70
69601: PUSH
69602: LD_INT 1
69604: DOUBLE
69605: EQUAL
69606: IFTRUE 69610
69608: GO 69686
69610: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
69611: LD_ADDR_VAR 0 2
69615: PUSH
69616: LD_INT 2
69618: PUSH
69619: LD_INT 4
69621: PUSH
69622: LD_INT 11
69624: PUSH
69625: LD_INT 12
69627: PUSH
69628: LD_INT 15
69630: PUSH
69631: LD_INT 16
69633: PUSH
69634: LD_INT 22
69636: PUSH
69637: LD_INT 23
69639: PUSH
69640: LD_INT 26
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 101
69656: PUSH
69657: LD_INT 102
69659: PUSH
69660: LD_INT 106
69662: PUSH
69663: LD_INT 116
69665: PUSH
69666: LD_INT 117
69668: PUSH
69669: LD_INT 118
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: ST_TO_ADDR
69684: GO 72759
69686: LD_INT 2
69688: DOUBLE
69689: EQUAL
69690: IFTRUE 69694
69692: GO 69778
69694: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
69695: LD_ADDR_VAR 0 2
69699: PUSH
69700: LD_INT 2
69702: PUSH
69703: LD_INT 4
69705: PUSH
69706: LD_INT 11
69708: PUSH
69709: LD_INT 12
69711: PUSH
69712: LD_INT 15
69714: PUSH
69715: LD_INT 16
69717: PUSH
69718: LD_INT 22
69720: PUSH
69721: LD_INT 23
69723: PUSH
69724: LD_INT 26
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 101
69740: PUSH
69741: LD_INT 102
69743: PUSH
69744: LD_INT 105
69746: PUSH
69747: LD_INT 106
69749: PUSH
69750: LD_INT 108
69752: PUSH
69753: LD_INT 116
69755: PUSH
69756: LD_INT 117
69758: PUSH
69759: LD_INT 118
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: ST_TO_ADDR
69776: GO 72759
69778: LD_INT 3
69780: DOUBLE
69781: EQUAL
69782: IFTRUE 69786
69784: GO 69874
69786: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
69787: LD_ADDR_VAR 0 2
69791: PUSH
69792: LD_INT 2
69794: PUSH
69795: LD_INT 4
69797: PUSH
69798: LD_INT 5
69800: PUSH
69801: LD_INT 11
69803: PUSH
69804: LD_INT 12
69806: PUSH
69807: LD_INT 15
69809: PUSH
69810: LD_INT 16
69812: PUSH
69813: LD_INT 22
69815: PUSH
69816: LD_INT 26
69818: PUSH
69819: LD_INT 36
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 101
69836: PUSH
69837: LD_INT 102
69839: PUSH
69840: LD_INT 105
69842: PUSH
69843: LD_INT 106
69845: PUSH
69846: LD_INT 108
69848: PUSH
69849: LD_INT 116
69851: PUSH
69852: LD_INT 117
69854: PUSH
69855: LD_INT 118
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: ST_TO_ADDR
69872: GO 72759
69874: LD_INT 4
69876: DOUBLE
69877: EQUAL
69878: IFTRUE 69882
69880: GO 69978
69882: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
69883: LD_ADDR_VAR 0 2
69887: PUSH
69888: LD_INT 2
69890: PUSH
69891: LD_INT 4
69893: PUSH
69894: LD_INT 5
69896: PUSH
69897: LD_INT 8
69899: PUSH
69900: LD_INT 11
69902: PUSH
69903: LD_INT 12
69905: PUSH
69906: LD_INT 15
69908: PUSH
69909: LD_INT 16
69911: PUSH
69912: LD_INT 22
69914: PUSH
69915: LD_INT 23
69917: PUSH
69918: LD_INT 26
69920: PUSH
69921: LD_INT 36
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 101
69940: PUSH
69941: LD_INT 102
69943: PUSH
69944: LD_INT 105
69946: PUSH
69947: LD_INT 106
69949: PUSH
69950: LD_INT 108
69952: PUSH
69953: LD_INT 116
69955: PUSH
69956: LD_INT 117
69958: PUSH
69959: LD_INT 118
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: ST_TO_ADDR
69976: GO 72759
69978: LD_INT 5
69980: DOUBLE
69981: EQUAL
69982: IFTRUE 69986
69984: GO 70098
69986: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
69987: LD_ADDR_VAR 0 2
69991: PUSH
69992: LD_INT 2
69994: PUSH
69995: LD_INT 4
69997: PUSH
69998: LD_INT 5
70000: PUSH
70001: LD_INT 6
70003: PUSH
70004: LD_INT 8
70006: PUSH
70007: LD_INT 11
70009: PUSH
70010: LD_INT 12
70012: PUSH
70013: LD_INT 15
70015: PUSH
70016: LD_INT 16
70018: PUSH
70019: LD_INT 22
70021: PUSH
70022: LD_INT 23
70024: PUSH
70025: LD_INT 25
70027: PUSH
70028: LD_INT 26
70030: PUSH
70031: LD_INT 36
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: PUSH
70050: LD_INT 101
70052: PUSH
70053: LD_INT 102
70055: PUSH
70056: LD_INT 105
70058: PUSH
70059: LD_INT 106
70061: PUSH
70062: LD_INT 108
70064: PUSH
70065: LD_INT 109
70067: PUSH
70068: LD_INT 112
70070: PUSH
70071: LD_INT 116
70073: PUSH
70074: LD_INT 117
70076: PUSH
70077: LD_INT 118
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: ST_TO_ADDR
70096: GO 72759
70098: LD_INT 6
70100: DOUBLE
70101: EQUAL
70102: IFTRUE 70106
70104: GO 70238
70106: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
70107: LD_ADDR_VAR 0 2
70111: PUSH
70112: LD_INT 2
70114: PUSH
70115: LD_INT 4
70117: PUSH
70118: LD_INT 5
70120: PUSH
70121: LD_INT 6
70123: PUSH
70124: LD_INT 8
70126: PUSH
70127: LD_INT 11
70129: PUSH
70130: LD_INT 12
70132: PUSH
70133: LD_INT 15
70135: PUSH
70136: LD_INT 16
70138: PUSH
70139: LD_INT 20
70141: PUSH
70142: LD_INT 21
70144: PUSH
70145: LD_INT 22
70147: PUSH
70148: LD_INT 23
70150: PUSH
70151: LD_INT 25
70153: PUSH
70154: LD_INT 26
70156: PUSH
70157: LD_INT 30
70159: PUSH
70160: LD_INT 31
70162: PUSH
70163: LD_INT 32
70165: PUSH
70166: LD_INT 36
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: PUSH
70190: LD_INT 101
70192: PUSH
70193: LD_INT 102
70195: PUSH
70196: LD_INT 105
70198: PUSH
70199: LD_INT 106
70201: PUSH
70202: LD_INT 108
70204: PUSH
70205: LD_INT 109
70207: PUSH
70208: LD_INT 112
70210: PUSH
70211: LD_INT 116
70213: PUSH
70214: LD_INT 117
70216: PUSH
70217: LD_INT 118
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: ST_TO_ADDR
70236: GO 72759
70238: LD_INT 7
70240: DOUBLE
70241: EQUAL
70242: IFTRUE 70246
70244: GO 70358
70246: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
70247: LD_ADDR_VAR 0 2
70251: PUSH
70252: LD_INT 2
70254: PUSH
70255: LD_INT 4
70257: PUSH
70258: LD_INT 5
70260: PUSH
70261: LD_INT 7
70263: PUSH
70264: LD_INT 11
70266: PUSH
70267: LD_INT 12
70269: PUSH
70270: LD_INT 15
70272: PUSH
70273: LD_INT 16
70275: PUSH
70276: LD_INT 20
70278: PUSH
70279: LD_INT 21
70281: PUSH
70282: LD_INT 22
70284: PUSH
70285: LD_INT 23
70287: PUSH
70288: LD_INT 25
70290: PUSH
70291: LD_INT 26
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: PUSH
70310: LD_INT 101
70312: PUSH
70313: LD_INT 102
70315: PUSH
70316: LD_INT 103
70318: PUSH
70319: LD_INT 105
70321: PUSH
70322: LD_INT 106
70324: PUSH
70325: LD_INT 108
70327: PUSH
70328: LD_INT 112
70330: PUSH
70331: LD_INT 116
70333: PUSH
70334: LD_INT 117
70336: PUSH
70337: LD_INT 118
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: ST_TO_ADDR
70356: GO 72759
70358: LD_INT 8
70360: DOUBLE
70361: EQUAL
70362: IFTRUE 70366
70364: GO 70506
70366: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
70367: LD_ADDR_VAR 0 2
70371: PUSH
70372: LD_INT 2
70374: PUSH
70375: LD_INT 4
70377: PUSH
70378: LD_INT 5
70380: PUSH
70381: LD_INT 6
70383: PUSH
70384: LD_INT 7
70386: PUSH
70387: LD_INT 8
70389: PUSH
70390: LD_INT 11
70392: PUSH
70393: LD_INT 12
70395: PUSH
70396: LD_INT 15
70398: PUSH
70399: LD_INT 16
70401: PUSH
70402: LD_INT 20
70404: PUSH
70405: LD_INT 21
70407: PUSH
70408: LD_INT 22
70410: PUSH
70411: LD_INT 23
70413: PUSH
70414: LD_INT 25
70416: PUSH
70417: LD_INT 26
70419: PUSH
70420: LD_INT 30
70422: PUSH
70423: LD_INT 31
70425: PUSH
70426: LD_INT 32
70428: PUSH
70429: LD_INT 36
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 101
70456: PUSH
70457: LD_INT 102
70459: PUSH
70460: LD_INT 103
70462: PUSH
70463: LD_INT 105
70465: PUSH
70466: LD_INT 106
70468: PUSH
70469: LD_INT 108
70471: PUSH
70472: LD_INT 109
70474: PUSH
70475: LD_INT 112
70477: PUSH
70478: LD_INT 116
70480: PUSH
70481: LD_INT 117
70483: PUSH
70484: LD_INT 118
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: ST_TO_ADDR
70504: GO 72759
70506: LD_INT 9
70508: DOUBLE
70509: EQUAL
70510: IFTRUE 70514
70512: GO 70662
70514: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
70515: LD_ADDR_VAR 0 2
70519: PUSH
70520: LD_INT 2
70522: PUSH
70523: LD_INT 4
70525: PUSH
70526: LD_INT 5
70528: PUSH
70529: LD_INT 6
70531: PUSH
70532: LD_INT 7
70534: PUSH
70535: LD_INT 8
70537: PUSH
70538: LD_INT 11
70540: PUSH
70541: LD_INT 12
70543: PUSH
70544: LD_INT 15
70546: PUSH
70547: LD_INT 16
70549: PUSH
70550: LD_INT 20
70552: PUSH
70553: LD_INT 21
70555: PUSH
70556: LD_INT 22
70558: PUSH
70559: LD_INT 23
70561: PUSH
70562: LD_INT 25
70564: PUSH
70565: LD_INT 26
70567: PUSH
70568: LD_INT 28
70570: PUSH
70571: LD_INT 30
70573: PUSH
70574: LD_INT 31
70576: PUSH
70577: LD_INT 32
70579: PUSH
70580: LD_INT 36
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 101
70608: PUSH
70609: LD_INT 102
70611: PUSH
70612: LD_INT 103
70614: PUSH
70615: LD_INT 105
70617: PUSH
70618: LD_INT 106
70620: PUSH
70621: LD_INT 108
70623: PUSH
70624: LD_INT 109
70626: PUSH
70627: LD_INT 112
70629: PUSH
70630: LD_INT 114
70632: PUSH
70633: LD_INT 116
70635: PUSH
70636: LD_INT 117
70638: PUSH
70639: LD_INT 118
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: ST_TO_ADDR
70660: GO 72759
70662: LD_INT 10
70664: DOUBLE
70665: EQUAL
70666: IFTRUE 70670
70668: GO 70866
70670: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
70671: LD_ADDR_VAR 0 2
70675: PUSH
70676: LD_INT 2
70678: PUSH
70679: LD_INT 4
70681: PUSH
70682: LD_INT 5
70684: PUSH
70685: LD_INT 6
70687: PUSH
70688: LD_INT 7
70690: PUSH
70691: LD_INT 8
70693: PUSH
70694: LD_INT 9
70696: PUSH
70697: LD_INT 10
70699: PUSH
70700: LD_INT 11
70702: PUSH
70703: LD_INT 12
70705: PUSH
70706: LD_INT 13
70708: PUSH
70709: LD_INT 14
70711: PUSH
70712: LD_INT 15
70714: PUSH
70715: LD_INT 16
70717: PUSH
70718: LD_INT 17
70720: PUSH
70721: LD_INT 18
70723: PUSH
70724: LD_INT 19
70726: PUSH
70727: LD_INT 20
70729: PUSH
70730: LD_INT 21
70732: PUSH
70733: LD_INT 22
70735: PUSH
70736: LD_INT 23
70738: PUSH
70739: LD_INT 24
70741: PUSH
70742: LD_INT 25
70744: PUSH
70745: LD_INT 26
70747: PUSH
70748: LD_INT 28
70750: PUSH
70751: LD_INT 30
70753: PUSH
70754: LD_INT 31
70756: PUSH
70757: LD_INT 32
70759: PUSH
70760: LD_INT 36
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 101
70796: PUSH
70797: LD_INT 102
70799: PUSH
70800: LD_INT 103
70802: PUSH
70803: LD_INT 104
70805: PUSH
70806: LD_INT 105
70808: PUSH
70809: LD_INT 106
70811: PUSH
70812: LD_INT 107
70814: PUSH
70815: LD_INT 108
70817: PUSH
70818: LD_INT 109
70820: PUSH
70821: LD_INT 110
70823: PUSH
70824: LD_INT 111
70826: PUSH
70827: LD_INT 112
70829: PUSH
70830: LD_INT 114
70832: PUSH
70833: LD_INT 116
70835: PUSH
70836: LD_INT 117
70838: PUSH
70839: LD_INT 118
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: ST_TO_ADDR
70864: GO 72759
70866: LD_INT 11
70868: DOUBLE
70869: EQUAL
70870: IFTRUE 70874
70872: GO 71078
70874: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
70875: LD_ADDR_VAR 0 2
70879: PUSH
70880: LD_INT 2
70882: PUSH
70883: LD_INT 3
70885: PUSH
70886: LD_INT 4
70888: PUSH
70889: LD_INT 5
70891: PUSH
70892: LD_INT 6
70894: PUSH
70895: LD_INT 7
70897: PUSH
70898: LD_INT 8
70900: PUSH
70901: LD_INT 9
70903: PUSH
70904: LD_INT 10
70906: PUSH
70907: LD_INT 11
70909: PUSH
70910: LD_INT 12
70912: PUSH
70913: LD_INT 13
70915: PUSH
70916: LD_INT 14
70918: PUSH
70919: LD_INT 15
70921: PUSH
70922: LD_INT 16
70924: PUSH
70925: LD_INT 17
70927: PUSH
70928: LD_INT 18
70930: PUSH
70931: LD_INT 19
70933: PUSH
70934: LD_INT 20
70936: PUSH
70937: LD_INT 21
70939: PUSH
70940: LD_INT 22
70942: PUSH
70943: LD_INT 23
70945: PUSH
70946: LD_INT 24
70948: PUSH
70949: LD_INT 25
70951: PUSH
70952: LD_INT 26
70954: PUSH
70955: LD_INT 28
70957: PUSH
70958: LD_INT 30
70960: PUSH
70961: LD_INT 31
70963: PUSH
70964: LD_INT 32
70966: PUSH
70967: LD_INT 34
70969: PUSH
70970: LD_INT 36
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 101
71008: PUSH
71009: LD_INT 102
71011: PUSH
71012: LD_INT 103
71014: PUSH
71015: LD_INT 104
71017: PUSH
71018: LD_INT 105
71020: PUSH
71021: LD_INT 106
71023: PUSH
71024: LD_INT 107
71026: PUSH
71027: LD_INT 108
71029: PUSH
71030: LD_INT 109
71032: PUSH
71033: LD_INT 110
71035: PUSH
71036: LD_INT 111
71038: PUSH
71039: LD_INT 112
71041: PUSH
71042: LD_INT 114
71044: PUSH
71045: LD_INT 116
71047: PUSH
71048: LD_INT 117
71050: PUSH
71051: LD_INT 118
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: ST_TO_ADDR
71076: GO 72759
71078: LD_INT 12
71080: DOUBLE
71081: EQUAL
71082: IFTRUE 71086
71084: GO 71306
71086: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
71087: LD_ADDR_VAR 0 2
71091: PUSH
71092: LD_INT 1
71094: PUSH
71095: LD_INT 2
71097: PUSH
71098: LD_INT 3
71100: PUSH
71101: LD_INT 4
71103: PUSH
71104: LD_INT 5
71106: PUSH
71107: LD_INT 6
71109: PUSH
71110: LD_INT 7
71112: PUSH
71113: LD_INT 8
71115: PUSH
71116: LD_INT 9
71118: PUSH
71119: LD_INT 10
71121: PUSH
71122: LD_INT 11
71124: PUSH
71125: LD_INT 12
71127: PUSH
71128: LD_INT 13
71130: PUSH
71131: LD_INT 14
71133: PUSH
71134: LD_INT 15
71136: PUSH
71137: LD_INT 16
71139: PUSH
71140: LD_INT 17
71142: PUSH
71143: LD_INT 18
71145: PUSH
71146: LD_INT 19
71148: PUSH
71149: LD_INT 20
71151: PUSH
71152: LD_INT 21
71154: PUSH
71155: LD_INT 22
71157: PUSH
71158: LD_INT 23
71160: PUSH
71161: LD_INT 24
71163: PUSH
71164: LD_INT 25
71166: PUSH
71167: LD_INT 26
71169: PUSH
71170: LD_INT 27
71172: PUSH
71173: LD_INT 28
71175: PUSH
71176: LD_INT 30
71178: PUSH
71179: LD_INT 31
71181: PUSH
71182: LD_INT 32
71184: PUSH
71185: LD_INT 33
71187: PUSH
71188: LD_INT 34
71190: PUSH
71191: LD_INT 36
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: LIST
71224: LIST
71225: LIST
71226: LIST
71227: LIST
71228: LIST
71229: PUSH
71230: LD_INT 101
71232: PUSH
71233: LD_INT 102
71235: PUSH
71236: LD_INT 103
71238: PUSH
71239: LD_INT 104
71241: PUSH
71242: LD_INT 105
71244: PUSH
71245: LD_INT 106
71247: PUSH
71248: LD_INT 107
71250: PUSH
71251: LD_INT 108
71253: PUSH
71254: LD_INT 109
71256: PUSH
71257: LD_INT 110
71259: PUSH
71260: LD_INT 111
71262: PUSH
71263: LD_INT 112
71265: PUSH
71266: LD_INT 113
71268: PUSH
71269: LD_INT 114
71271: PUSH
71272: LD_INT 116
71274: PUSH
71275: LD_INT 117
71277: PUSH
71278: LD_INT 118
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: ST_TO_ADDR
71304: GO 72759
71306: LD_INT 13
71308: DOUBLE
71309: EQUAL
71310: IFTRUE 71314
71312: GO 71522
71314: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
71315: LD_ADDR_VAR 0 2
71319: PUSH
71320: LD_INT 1
71322: PUSH
71323: LD_INT 2
71325: PUSH
71326: LD_INT 3
71328: PUSH
71329: LD_INT 4
71331: PUSH
71332: LD_INT 5
71334: PUSH
71335: LD_INT 8
71337: PUSH
71338: LD_INT 9
71340: PUSH
71341: LD_INT 10
71343: PUSH
71344: LD_INT 11
71346: PUSH
71347: LD_INT 12
71349: PUSH
71350: LD_INT 14
71352: PUSH
71353: LD_INT 15
71355: PUSH
71356: LD_INT 16
71358: PUSH
71359: LD_INT 17
71361: PUSH
71362: LD_INT 18
71364: PUSH
71365: LD_INT 19
71367: PUSH
71368: LD_INT 20
71370: PUSH
71371: LD_INT 21
71373: PUSH
71374: LD_INT 22
71376: PUSH
71377: LD_INT 23
71379: PUSH
71380: LD_INT 24
71382: PUSH
71383: LD_INT 25
71385: PUSH
71386: LD_INT 26
71388: PUSH
71389: LD_INT 27
71391: PUSH
71392: LD_INT 28
71394: PUSH
71395: LD_INT 30
71397: PUSH
71398: LD_INT 31
71400: PUSH
71401: LD_INT 32
71403: PUSH
71404: LD_INT 33
71406: PUSH
71407: LD_INT 34
71409: PUSH
71410: LD_INT 36
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 101
71448: PUSH
71449: LD_INT 102
71451: PUSH
71452: LD_INT 103
71454: PUSH
71455: LD_INT 104
71457: PUSH
71458: LD_INT 105
71460: PUSH
71461: LD_INT 106
71463: PUSH
71464: LD_INT 107
71466: PUSH
71467: LD_INT 108
71469: PUSH
71470: LD_INT 109
71472: PUSH
71473: LD_INT 110
71475: PUSH
71476: LD_INT 111
71478: PUSH
71479: LD_INT 112
71481: PUSH
71482: LD_INT 113
71484: PUSH
71485: LD_INT 114
71487: PUSH
71488: LD_INT 116
71490: PUSH
71491: LD_INT 117
71493: PUSH
71494: LD_INT 118
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: ST_TO_ADDR
71520: GO 72759
71522: LD_INT 14
71524: DOUBLE
71525: EQUAL
71526: IFTRUE 71530
71528: GO 71754
71530: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
71531: LD_ADDR_VAR 0 2
71535: PUSH
71536: LD_INT 1
71538: PUSH
71539: LD_INT 2
71541: PUSH
71542: LD_INT 3
71544: PUSH
71545: LD_INT 4
71547: PUSH
71548: LD_INT 5
71550: PUSH
71551: LD_INT 6
71553: PUSH
71554: LD_INT 7
71556: PUSH
71557: LD_INT 8
71559: PUSH
71560: LD_INT 9
71562: PUSH
71563: LD_INT 10
71565: PUSH
71566: LD_INT 11
71568: PUSH
71569: LD_INT 12
71571: PUSH
71572: LD_INT 13
71574: PUSH
71575: LD_INT 14
71577: PUSH
71578: LD_INT 15
71580: PUSH
71581: LD_INT 16
71583: PUSH
71584: LD_INT 17
71586: PUSH
71587: LD_INT 18
71589: PUSH
71590: LD_INT 19
71592: PUSH
71593: LD_INT 20
71595: PUSH
71596: LD_INT 21
71598: PUSH
71599: LD_INT 22
71601: PUSH
71602: LD_INT 23
71604: PUSH
71605: LD_INT 24
71607: PUSH
71608: LD_INT 25
71610: PUSH
71611: LD_INT 26
71613: PUSH
71614: LD_INT 27
71616: PUSH
71617: LD_INT 28
71619: PUSH
71620: LD_INT 29
71622: PUSH
71623: LD_INT 30
71625: PUSH
71626: LD_INT 31
71628: PUSH
71629: LD_INT 32
71631: PUSH
71632: LD_INT 33
71634: PUSH
71635: LD_INT 34
71637: PUSH
71638: LD_INT 36
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 101
71680: PUSH
71681: LD_INT 102
71683: PUSH
71684: LD_INT 103
71686: PUSH
71687: LD_INT 104
71689: PUSH
71690: LD_INT 105
71692: PUSH
71693: LD_INT 106
71695: PUSH
71696: LD_INT 107
71698: PUSH
71699: LD_INT 108
71701: PUSH
71702: LD_INT 109
71704: PUSH
71705: LD_INT 110
71707: PUSH
71708: LD_INT 111
71710: PUSH
71711: LD_INT 112
71713: PUSH
71714: LD_INT 113
71716: PUSH
71717: LD_INT 114
71719: PUSH
71720: LD_INT 116
71722: PUSH
71723: LD_INT 117
71725: PUSH
71726: LD_INT 118
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: ST_TO_ADDR
71752: GO 72759
71754: LD_INT 15
71756: DOUBLE
71757: EQUAL
71758: IFTRUE 71762
71760: GO 71986
71762: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
71763: LD_ADDR_VAR 0 2
71767: PUSH
71768: LD_INT 1
71770: PUSH
71771: LD_INT 2
71773: PUSH
71774: LD_INT 3
71776: PUSH
71777: LD_INT 4
71779: PUSH
71780: LD_INT 5
71782: PUSH
71783: LD_INT 6
71785: PUSH
71786: LD_INT 7
71788: PUSH
71789: LD_INT 8
71791: PUSH
71792: LD_INT 9
71794: PUSH
71795: LD_INT 10
71797: PUSH
71798: LD_INT 11
71800: PUSH
71801: LD_INT 12
71803: PUSH
71804: LD_INT 13
71806: PUSH
71807: LD_INT 14
71809: PUSH
71810: LD_INT 15
71812: PUSH
71813: LD_INT 16
71815: PUSH
71816: LD_INT 17
71818: PUSH
71819: LD_INT 18
71821: PUSH
71822: LD_INT 19
71824: PUSH
71825: LD_INT 20
71827: PUSH
71828: LD_INT 21
71830: PUSH
71831: LD_INT 22
71833: PUSH
71834: LD_INT 23
71836: PUSH
71837: LD_INT 24
71839: PUSH
71840: LD_INT 25
71842: PUSH
71843: LD_INT 26
71845: PUSH
71846: LD_INT 27
71848: PUSH
71849: LD_INT 28
71851: PUSH
71852: LD_INT 29
71854: PUSH
71855: LD_INT 30
71857: PUSH
71858: LD_INT 31
71860: PUSH
71861: LD_INT 32
71863: PUSH
71864: LD_INT 33
71866: PUSH
71867: LD_INT 34
71869: PUSH
71870: LD_INT 36
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: LIST
71901: LIST
71902: LIST
71903: LIST
71904: LIST
71905: LIST
71906: LIST
71907: LIST
71908: LIST
71909: PUSH
71910: LD_INT 101
71912: PUSH
71913: LD_INT 102
71915: PUSH
71916: LD_INT 103
71918: PUSH
71919: LD_INT 104
71921: PUSH
71922: LD_INT 105
71924: PUSH
71925: LD_INT 106
71927: PUSH
71928: LD_INT 107
71930: PUSH
71931: LD_INT 108
71933: PUSH
71934: LD_INT 109
71936: PUSH
71937: LD_INT 110
71939: PUSH
71940: LD_INT 111
71942: PUSH
71943: LD_INT 112
71945: PUSH
71946: LD_INT 113
71948: PUSH
71949: LD_INT 114
71951: PUSH
71952: LD_INT 116
71954: PUSH
71955: LD_INT 117
71957: PUSH
71958: LD_INT 118
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: ST_TO_ADDR
71984: GO 72759
71986: LD_INT 16
71988: DOUBLE
71989: EQUAL
71990: IFTRUE 71994
71992: GO 72130
71994: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
71995: LD_ADDR_VAR 0 2
71999: PUSH
72000: LD_INT 2
72002: PUSH
72003: LD_INT 4
72005: PUSH
72006: LD_INT 5
72008: PUSH
72009: LD_INT 7
72011: PUSH
72012: LD_INT 11
72014: PUSH
72015: LD_INT 12
72017: PUSH
72018: LD_INT 15
72020: PUSH
72021: LD_INT 16
72023: PUSH
72024: LD_INT 20
72026: PUSH
72027: LD_INT 21
72029: PUSH
72030: LD_INT 22
72032: PUSH
72033: LD_INT 23
72035: PUSH
72036: LD_INT 25
72038: PUSH
72039: LD_INT 26
72041: PUSH
72042: LD_INT 30
72044: PUSH
72045: LD_INT 31
72047: PUSH
72048: LD_INT 32
72050: PUSH
72051: LD_INT 33
72053: PUSH
72054: LD_INT 34
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: LIST
72077: PUSH
72078: LD_INT 101
72080: PUSH
72081: LD_INT 102
72083: PUSH
72084: LD_INT 103
72086: PUSH
72087: LD_INT 106
72089: PUSH
72090: LD_INT 108
72092: PUSH
72093: LD_INT 112
72095: PUSH
72096: LD_INT 113
72098: PUSH
72099: LD_INT 114
72101: PUSH
72102: LD_INT 116
72104: PUSH
72105: LD_INT 117
72107: PUSH
72108: LD_INT 118
72110: PUSH
72111: EMPTY
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: ST_TO_ADDR
72128: GO 72759
72130: LD_INT 17
72132: DOUBLE
72133: EQUAL
72134: IFTRUE 72138
72136: GO 72362
72138: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
72139: LD_ADDR_VAR 0 2
72143: PUSH
72144: LD_INT 1
72146: PUSH
72147: LD_INT 2
72149: PUSH
72150: LD_INT 3
72152: PUSH
72153: LD_INT 4
72155: PUSH
72156: LD_INT 5
72158: PUSH
72159: LD_INT 6
72161: PUSH
72162: LD_INT 7
72164: PUSH
72165: LD_INT 8
72167: PUSH
72168: LD_INT 9
72170: PUSH
72171: LD_INT 10
72173: PUSH
72174: LD_INT 11
72176: PUSH
72177: LD_INT 12
72179: PUSH
72180: LD_INT 13
72182: PUSH
72183: LD_INT 14
72185: PUSH
72186: LD_INT 15
72188: PUSH
72189: LD_INT 16
72191: PUSH
72192: LD_INT 17
72194: PUSH
72195: LD_INT 18
72197: PUSH
72198: LD_INT 19
72200: PUSH
72201: LD_INT 20
72203: PUSH
72204: LD_INT 21
72206: PUSH
72207: LD_INT 22
72209: PUSH
72210: LD_INT 23
72212: PUSH
72213: LD_INT 24
72215: PUSH
72216: LD_INT 25
72218: PUSH
72219: LD_INT 26
72221: PUSH
72222: LD_INT 27
72224: PUSH
72225: LD_INT 28
72227: PUSH
72228: LD_INT 29
72230: PUSH
72231: LD_INT 30
72233: PUSH
72234: LD_INT 31
72236: PUSH
72237: LD_INT 32
72239: PUSH
72240: LD_INT 33
72242: PUSH
72243: LD_INT 34
72245: PUSH
72246: LD_INT 36
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: PUSH
72286: LD_INT 101
72288: PUSH
72289: LD_INT 102
72291: PUSH
72292: LD_INT 103
72294: PUSH
72295: LD_INT 104
72297: PUSH
72298: LD_INT 105
72300: PUSH
72301: LD_INT 106
72303: PUSH
72304: LD_INT 107
72306: PUSH
72307: LD_INT 108
72309: PUSH
72310: LD_INT 109
72312: PUSH
72313: LD_INT 110
72315: PUSH
72316: LD_INT 111
72318: PUSH
72319: LD_INT 112
72321: PUSH
72322: LD_INT 113
72324: PUSH
72325: LD_INT 114
72327: PUSH
72328: LD_INT 116
72330: PUSH
72331: LD_INT 117
72333: PUSH
72334: LD_INT 118
72336: PUSH
72337: EMPTY
72338: LIST
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: LIST
72349: LIST
72350: LIST
72351: LIST
72352: LIST
72353: LIST
72354: LIST
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: ST_TO_ADDR
72360: GO 72759
72362: LD_INT 18
72364: DOUBLE
72365: EQUAL
72366: IFTRUE 72370
72368: GO 72518
72370: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
72371: LD_ADDR_VAR 0 2
72375: PUSH
72376: LD_INT 2
72378: PUSH
72379: LD_INT 4
72381: PUSH
72382: LD_INT 5
72384: PUSH
72385: LD_INT 7
72387: PUSH
72388: LD_INT 11
72390: PUSH
72391: LD_INT 12
72393: PUSH
72394: LD_INT 15
72396: PUSH
72397: LD_INT 16
72399: PUSH
72400: LD_INT 20
72402: PUSH
72403: LD_INT 21
72405: PUSH
72406: LD_INT 22
72408: PUSH
72409: LD_INT 23
72411: PUSH
72412: LD_INT 25
72414: PUSH
72415: LD_INT 26
72417: PUSH
72418: LD_INT 30
72420: PUSH
72421: LD_INT 31
72423: PUSH
72424: LD_INT 32
72426: PUSH
72427: LD_INT 33
72429: PUSH
72430: LD_INT 34
72432: PUSH
72433: LD_INT 35
72435: PUSH
72436: LD_INT 36
72438: PUSH
72439: EMPTY
72440: LIST
72441: LIST
72442: LIST
72443: LIST
72444: LIST
72445: LIST
72446: LIST
72447: LIST
72448: LIST
72449: LIST
72450: LIST
72451: LIST
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: PUSH
72462: LD_INT 101
72464: PUSH
72465: LD_INT 102
72467: PUSH
72468: LD_INT 103
72470: PUSH
72471: LD_INT 106
72473: PUSH
72474: LD_INT 108
72476: PUSH
72477: LD_INT 112
72479: PUSH
72480: LD_INT 113
72482: PUSH
72483: LD_INT 114
72485: PUSH
72486: LD_INT 115
72488: PUSH
72489: LD_INT 116
72491: PUSH
72492: LD_INT 117
72494: PUSH
72495: LD_INT 118
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: PUSH
72512: EMPTY
72513: LIST
72514: LIST
72515: ST_TO_ADDR
72516: GO 72759
72518: LD_INT 19
72520: DOUBLE
72521: EQUAL
72522: IFTRUE 72526
72524: GO 72758
72526: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
72527: LD_ADDR_VAR 0 2
72531: PUSH
72532: LD_INT 1
72534: PUSH
72535: LD_INT 2
72537: PUSH
72538: LD_INT 3
72540: PUSH
72541: LD_INT 4
72543: PUSH
72544: LD_INT 5
72546: PUSH
72547: LD_INT 6
72549: PUSH
72550: LD_INT 7
72552: PUSH
72553: LD_INT 8
72555: PUSH
72556: LD_INT 9
72558: PUSH
72559: LD_INT 10
72561: PUSH
72562: LD_INT 11
72564: PUSH
72565: LD_INT 12
72567: PUSH
72568: LD_INT 13
72570: PUSH
72571: LD_INT 14
72573: PUSH
72574: LD_INT 15
72576: PUSH
72577: LD_INT 16
72579: PUSH
72580: LD_INT 17
72582: PUSH
72583: LD_INT 18
72585: PUSH
72586: LD_INT 19
72588: PUSH
72589: LD_INT 20
72591: PUSH
72592: LD_INT 21
72594: PUSH
72595: LD_INT 22
72597: PUSH
72598: LD_INT 23
72600: PUSH
72601: LD_INT 24
72603: PUSH
72604: LD_INT 25
72606: PUSH
72607: LD_INT 26
72609: PUSH
72610: LD_INT 27
72612: PUSH
72613: LD_INT 28
72615: PUSH
72616: LD_INT 29
72618: PUSH
72619: LD_INT 30
72621: PUSH
72622: LD_INT 31
72624: PUSH
72625: LD_INT 32
72627: PUSH
72628: LD_INT 33
72630: PUSH
72631: LD_INT 34
72633: PUSH
72634: LD_INT 35
72636: PUSH
72637: LD_INT 36
72639: PUSH
72640: EMPTY
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: PUSH
72678: LD_INT 101
72680: PUSH
72681: LD_INT 102
72683: PUSH
72684: LD_INT 103
72686: PUSH
72687: LD_INT 104
72689: PUSH
72690: LD_INT 105
72692: PUSH
72693: LD_INT 106
72695: PUSH
72696: LD_INT 107
72698: PUSH
72699: LD_INT 108
72701: PUSH
72702: LD_INT 109
72704: PUSH
72705: LD_INT 110
72707: PUSH
72708: LD_INT 111
72710: PUSH
72711: LD_INT 112
72713: PUSH
72714: LD_INT 113
72716: PUSH
72717: LD_INT 114
72719: PUSH
72720: LD_INT 115
72722: PUSH
72723: LD_INT 116
72725: PUSH
72726: LD_INT 117
72728: PUSH
72729: LD_INT 118
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: LIST
72736: LIST
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: ST_TO_ADDR
72756: GO 72759
72758: POP
// end else
72759: GO 72990
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
72761: LD_ADDR_VAR 0 2
72765: PUSH
72766: LD_INT 1
72768: PUSH
72769: LD_INT 2
72771: PUSH
72772: LD_INT 3
72774: PUSH
72775: LD_INT 4
72777: PUSH
72778: LD_INT 5
72780: PUSH
72781: LD_INT 6
72783: PUSH
72784: LD_INT 7
72786: PUSH
72787: LD_INT 8
72789: PUSH
72790: LD_INT 9
72792: PUSH
72793: LD_INT 10
72795: PUSH
72796: LD_INT 11
72798: PUSH
72799: LD_INT 12
72801: PUSH
72802: LD_INT 13
72804: PUSH
72805: LD_INT 14
72807: PUSH
72808: LD_INT 15
72810: PUSH
72811: LD_INT 16
72813: PUSH
72814: LD_INT 17
72816: PUSH
72817: LD_INT 18
72819: PUSH
72820: LD_INT 19
72822: PUSH
72823: LD_INT 20
72825: PUSH
72826: LD_INT 21
72828: PUSH
72829: LD_INT 22
72831: PUSH
72832: LD_INT 23
72834: PUSH
72835: LD_INT 24
72837: PUSH
72838: LD_INT 25
72840: PUSH
72841: LD_INT 26
72843: PUSH
72844: LD_INT 27
72846: PUSH
72847: LD_INT 28
72849: PUSH
72850: LD_INT 29
72852: PUSH
72853: LD_INT 30
72855: PUSH
72856: LD_INT 31
72858: PUSH
72859: LD_INT 32
72861: PUSH
72862: LD_INT 33
72864: PUSH
72865: LD_INT 34
72867: PUSH
72868: LD_INT 35
72870: PUSH
72871: LD_INT 36
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: LIST
72882: LIST
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: LIST
72904: LIST
72905: LIST
72906: LIST
72907: LIST
72908: LIST
72909: LIST
72910: LIST
72911: PUSH
72912: LD_INT 101
72914: PUSH
72915: LD_INT 102
72917: PUSH
72918: LD_INT 103
72920: PUSH
72921: LD_INT 104
72923: PUSH
72924: LD_INT 105
72926: PUSH
72927: LD_INT 106
72929: PUSH
72930: LD_INT 107
72932: PUSH
72933: LD_INT 108
72935: PUSH
72936: LD_INT 109
72938: PUSH
72939: LD_INT 110
72941: PUSH
72942: LD_INT 111
72944: PUSH
72945: LD_INT 112
72947: PUSH
72948: LD_INT 113
72950: PUSH
72951: LD_INT 114
72953: PUSH
72954: LD_INT 115
72956: PUSH
72957: LD_INT 116
72959: PUSH
72960: LD_INT 117
72962: PUSH
72963: LD_INT 118
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: LIST
72970: LIST
72971: LIST
72972: LIST
72973: LIST
72974: LIST
72975: LIST
72976: LIST
72977: LIST
72978: LIST
72979: LIST
72980: LIST
72981: LIST
72982: LIST
72983: LIST
72984: LIST
72985: PUSH
72986: EMPTY
72987: LIST
72988: LIST
72989: ST_TO_ADDR
// if result then
72990: LD_VAR 0 2
72994: IFFALSE 73780
// begin normal :=  ;
72996: LD_ADDR_VAR 0 5
73000: PUSH
73001: LD_STRING 
73003: ST_TO_ADDR
// hardcore :=  ;
73004: LD_ADDR_VAR 0 6
73008: PUSH
73009: LD_STRING 
73011: ST_TO_ADDR
// active :=  ;
73012: LD_ADDR_VAR 0 7
73016: PUSH
73017: LD_STRING 
73019: ST_TO_ADDR
// for i = 1 to normalCounter do
73020: LD_ADDR_VAR 0 8
73024: PUSH
73025: DOUBLE
73026: LD_INT 1
73028: DEC
73029: ST_TO_ADDR
73030: LD_EXP 66
73034: PUSH
73035: FOR_TO
73036: IFFALSE 73137
// begin tmp := 0 ;
73038: LD_ADDR_VAR 0 3
73042: PUSH
73043: LD_STRING 0
73045: ST_TO_ADDR
// if result [ 1 ] then
73046: LD_VAR 0 2
73050: PUSH
73051: LD_INT 1
73053: ARRAY
73054: IFFALSE 73119
// if result [ 1 ] [ 1 ] = i then
73056: LD_VAR 0 2
73060: PUSH
73061: LD_INT 1
73063: ARRAY
73064: PUSH
73065: LD_INT 1
73067: ARRAY
73068: PUSH
73069: LD_VAR 0 8
73073: EQUAL
73074: IFFALSE 73119
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
73076: LD_ADDR_VAR 0 2
73080: PUSH
73081: LD_VAR 0 2
73085: PPUSH
73086: LD_INT 1
73088: PPUSH
73089: LD_VAR 0 2
73093: PUSH
73094: LD_INT 1
73096: ARRAY
73097: PPUSH
73098: LD_INT 1
73100: PPUSH
73101: CALL_OW 3
73105: PPUSH
73106: CALL_OW 1
73110: ST_TO_ADDR
// tmp := 1 ;
73111: LD_ADDR_VAR 0 3
73115: PUSH
73116: LD_STRING 1
73118: ST_TO_ADDR
// end ; normal := normal & tmp ;
73119: LD_ADDR_VAR 0 5
73123: PUSH
73124: LD_VAR 0 5
73128: PUSH
73129: LD_VAR 0 3
73133: STR
73134: ST_TO_ADDR
// end ;
73135: GO 73035
73137: POP
73138: POP
// for i = 1 to hardcoreCounter do
73139: LD_ADDR_VAR 0 8
73143: PUSH
73144: DOUBLE
73145: LD_INT 1
73147: DEC
73148: ST_TO_ADDR
73149: LD_EXP 67
73153: PUSH
73154: FOR_TO
73155: IFFALSE 73260
// begin tmp := 0 ;
73157: LD_ADDR_VAR 0 3
73161: PUSH
73162: LD_STRING 0
73164: ST_TO_ADDR
// if result [ 2 ] then
73165: LD_VAR 0 2
73169: PUSH
73170: LD_INT 2
73172: ARRAY
73173: IFFALSE 73242
// if result [ 2 ] [ 1 ] = 100 + i then
73175: LD_VAR 0 2
73179: PUSH
73180: LD_INT 2
73182: ARRAY
73183: PUSH
73184: LD_INT 1
73186: ARRAY
73187: PUSH
73188: LD_INT 100
73190: PUSH
73191: LD_VAR 0 8
73195: PLUS
73196: EQUAL
73197: IFFALSE 73242
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
73199: LD_ADDR_VAR 0 2
73203: PUSH
73204: LD_VAR 0 2
73208: PPUSH
73209: LD_INT 2
73211: PPUSH
73212: LD_VAR 0 2
73216: PUSH
73217: LD_INT 2
73219: ARRAY
73220: PPUSH
73221: LD_INT 1
73223: PPUSH
73224: CALL_OW 3
73228: PPUSH
73229: CALL_OW 1
73233: ST_TO_ADDR
// tmp := 1 ;
73234: LD_ADDR_VAR 0 3
73238: PUSH
73239: LD_STRING 1
73241: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
73242: LD_ADDR_VAR 0 6
73246: PUSH
73247: LD_VAR 0 6
73251: PUSH
73252: LD_VAR 0 3
73256: STR
73257: ST_TO_ADDR
// end ;
73258: GO 73154
73260: POP
73261: POP
// if isGameLoad then
73262: LD_VAR 0 1
73266: IFFALSE 73741
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
73268: LD_ADDR_VAR 0 4
73272: PUSH
73273: LD_EXP 70
73277: PUSH
73278: LD_EXP 69
73282: PUSH
73283: LD_EXP 71
73287: PUSH
73288: LD_EXP 68
73292: PUSH
73293: LD_EXP 72
73297: PUSH
73298: LD_EXP 73
73302: PUSH
73303: LD_EXP 74
73307: PUSH
73308: LD_EXP 75
73312: PUSH
73313: LD_EXP 76
73317: PUSH
73318: LD_EXP 77
73322: PUSH
73323: LD_EXP 78
73327: PUSH
73328: LD_EXP 79
73332: PUSH
73333: LD_EXP 80
73337: PUSH
73338: LD_EXP 81
73342: PUSH
73343: LD_EXP 89
73347: PUSH
73348: LD_EXP 90
73352: PUSH
73353: LD_EXP 91
73357: PUSH
73358: LD_EXP 92
73362: PUSH
73363: LD_EXP 94
73367: PUSH
73368: LD_EXP 95
73372: PUSH
73373: LD_EXP 96
73377: PUSH
73378: LD_EXP 99
73382: PUSH
73383: LD_EXP 101
73387: PUSH
73388: LD_EXP 102
73392: PUSH
73393: LD_EXP 103
73397: PUSH
73398: LD_EXP 105
73402: PUSH
73403: LD_EXP 106
73407: PUSH
73408: LD_EXP 109
73412: PUSH
73413: LD_EXP 110
73417: PUSH
73418: LD_EXP 111
73422: PUSH
73423: LD_EXP 112
73427: PUSH
73428: LD_EXP 113
73432: PUSH
73433: LD_EXP 114
73437: PUSH
73438: LD_EXP 115
73442: PUSH
73443: LD_EXP 116
73447: PUSH
73448: LD_EXP 117
73452: PUSH
73453: LD_EXP 82
73457: PUSH
73458: LD_EXP 83
73462: PUSH
73463: LD_EXP 86
73467: PUSH
73468: LD_EXP 87
73472: PUSH
73473: LD_EXP 88
73477: PUSH
73478: LD_EXP 84
73482: PUSH
73483: LD_EXP 85
73487: PUSH
73488: LD_EXP 93
73492: PUSH
73493: LD_EXP 97
73497: PUSH
73498: LD_EXP 98
73502: PUSH
73503: LD_EXP 100
73507: PUSH
73508: LD_EXP 104
73512: PUSH
73513: LD_EXP 107
73517: PUSH
73518: LD_EXP 108
73522: PUSH
73523: LD_EXP 118
73527: PUSH
73528: LD_EXP 119
73532: PUSH
73533: LD_EXP 120
73537: PUSH
73538: LD_EXP 121
73542: PUSH
73543: EMPTY
73544: LIST
73545: LIST
73546: LIST
73547: LIST
73548: LIST
73549: LIST
73550: LIST
73551: LIST
73552: LIST
73553: LIST
73554: LIST
73555: LIST
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: LIST
73574: LIST
73575: LIST
73576: LIST
73577: LIST
73578: LIST
73579: LIST
73580: LIST
73581: LIST
73582: LIST
73583: LIST
73584: LIST
73585: LIST
73586: LIST
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: LIST
73598: ST_TO_ADDR
// tmp :=  ;
73599: LD_ADDR_VAR 0 3
73603: PUSH
73604: LD_STRING 
73606: ST_TO_ADDR
// for i = 1 to normalCounter do
73607: LD_ADDR_VAR 0 8
73611: PUSH
73612: DOUBLE
73613: LD_INT 1
73615: DEC
73616: ST_TO_ADDR
73617: LD_EXP 66
73621: PUSH
73622: FOR_TO
73623: IFFALSE 73659
// begin if flags [ i ] then
73625: LD_VAR 0 4
73629: PUSH
73630: LD_VAR 0 8
73634: ARRAY
73635: IFFALSE 73657
// tmp := tmp & i & ; ;
73637: LD_ADDR_VAR 0 3
73641: PUSH
73642: LD_VAR 0 3
73646: PUSH
73647: LD_VAR 0 8
73651: STR
73652: PUSH
73653: LD_STRING ;
73655: STR
73656: ST_TO_ADDR
// end ;
73657: GO 73622
73659: POP
73660: POP
// for i = 1 to hardcoreCounter do
73661: LD_ADDR_VAR 0 8
73665: PUSH
73666: DOUBLE
73667: LD_INT 1
73669: DEC
73670: ST_TO_ADDR
73671: LD_EXP 67
73675: PUSH
73676: FOR_TO
73677: IFFALSE 73723
// begin if flags [ normalCounter + i ] then
73679: LD_VAR 0 4
73683: PUSH
73684: LD_EXP 66
73688: PUSH
73689: LD_VAR 0 8
73693: PLUS
73694: ARRAY
73695: IFFALSE 73721
// tmp := tmp & ( 100 + i ) & ; ;
73697: LD_ADDR_VAR 0 3
73701: PUSH
73702: LD_VAR 0 3
73706: PUSH
73707: LD_INT 100
73709: PUSH
73710: LD_VAR 0 8
73714: PLUS
73715: STR
73716: PUSH
73717: LD_STRING ;
73719: STR
73720: ST_TO_ADDR
// end ;
73721: GO 73676
73723: POP
73724: POP
// if tmp then
73725: LD_VAR 0 3
73729: IFFALSE 73741
// active := tmp ;
73731: LD_ADDR_VAR 0 7
73735: PUSH
73736: LD_VAR 0 3
73740: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
73741: LD_STRING getStreamItemsFromMission("
73743: PUSH
73744: LD_VAR 0 5
73748: STR
73749: PUSH
73750: LD_STRING ","
73752: STR
73753: PUSH
73754: LD_VAR 0 6
73758: STR
73759: PUSH
73760: LD_STRING ","
73762: STR
73763: PUSH
73764: LD_VAR 0 7
73768: STR
73769: PUSH
73770: LD_STRING ")
73772: STR
73773: PPUSH
73774: CALL_OW 559
// end else
73778: GO 73787
// ToLua ( getStreamItemsFromMission("","","") ) ;
73780: LD_STRING getStreamItemsFromMission("","","")
73782: PPUSH
73783: CALL_OW 559
// end ;
73787: LD_VAR 0 2
73791: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
73792: LD_EXP 65
73796: PUSH
73797: LD_EXP 70
73801: AND
73802: IFFALSE 73926
73804: GO 73806
73806: DISABLE
73807: LD_INT 0
73809: PPUSH
73810: PPUSH
// begin enable ;
73811: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
73812: LD_ADDR_VAR 0 2
73816: PUSH
73817: LD_INT 22
73819: PUSH
73820: LD_OWVAR 2
73824: PUSH
73825: EMPTY
73826: LIST
73827: LIST
73828: PUSH
73829: LD_INT 2
73831: PUSH
73832: LD_INT 34
73834: PUSH
73835: LD_INT 7
73837: PUSH
73838: EMPTY
73839: LIST
73840: LIST
73841: PUSH
73842: LD_INT 34
73844: PUSH
73845: LD_INT 45
73847: PUSH
73848: EMPTY
73849: LIST
73850: LIST
73851: PUSH
73852: LD_INT 34
73854: PUSH
73855: LD_INT 28
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: PUSH
73862: LD_INT 34
73864: PUSH
73865: LD_INT 47
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: PUSH
73872: EMPTY
73873: LIST
73874: LIST
73875: LIST
73876: LIST
73877: LIST
73878: PUSH
73879: EMPTY
73880: LIST
73881: LIST
73882: PPUSH
73883: CALL_OW 69
73887: ST_TO_ADDR
// if not tmp then
73888: LD_VAR 0 2
73892: NOT
73893: IFFALSE 73897
// exit ;
73895: GO 73926
// for i in tmp do
73897: LD_ADDR_VAR 0 1
73901: PUSH
73902: LD_VAR 0 2
73906: PUSH
73907: FOR_IN
73908: IFFALSE 73924
// begin SetLives ( i , 0 ) ;
73910: LD_VAR 0 1
73914: PPUSH
73915: LD_INT 0
73917: PPUSH
73918: CALL_OW 234
// end ;
73922: GO 73907
73924: POP
73925: POP
// end ;
73926: PPOPN 2
73928: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
73929: LD_EXP 65
73933: PUSH
73934: LD_EXP 71
73938: AND
73939: IFFALSE 74023
73941: GO 73943
73943: DISABLE
73944: LD_INT 0
73946: PPUSH
73947: PPUSH
// begin enable ;
73948: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
73949: LD_ADDR_VAR 0 2
73953: PUSH
73954: LD_INT 22
73956: PUSH
73957: LD_OWVAR 2
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PUSH
73966: LD_INT 32
73968: PUSH
73969: LD_INT 3
73971: PUSH
73972: EMPTY
73973: LIST
73974: LIST
73975: PUSH
73976: EMPTY
73977: LIST
73978: LIST
73979: PPUSH
73980: CALL_OW 69
73984: ST_TO_ADDR
// if not tmp then
73985: LD_VAR 0 2
73989: NOT
73990: IFFALSE 73994
// exit ;
73992: GO 74023
// for i in tmp do
73994: LD_ADDR_VAR 0 1
73998: PUSH
73999: LD_VAR 0 2
74003: PUSH
74004: FOR_IN
74005: IFFALSE 74021
// begin SetLives ( i , 0 ) ;
74007: LD_VAR 0 1
74011: PPUSH
74012: LD_INT 0
74014: PPUSH
74015: CALL_OW 234
// end ;
74019: GO 74004
74021: POP
74022: POP
// end ;
74023: PPOPN 2
74025: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
74026: LD_EXP 65
74030: PUSH
74031: LD_EXP 68
74035: AND
74036: IFFALSE 74129
74038: GO 74040
74040: DISABLE
74041: LD_INT 0
74043: PPUSH
// begin enable ;
74044: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
74045: LD_ADDR_VAR 0 1
74049: PUSH
74050: LD_INT 22
74052: PUSH
74053: LD_OWVAR 2
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: PUSH
74062: LD_INT 2
74064: PUSH
74065: LD_INT 25
74067: PUSH
74068: LD_INT 5
74070: PUSH
74071: EMPTY
74072: LIST
74073: LIST
74074: PUSH
74075: LD_INT 25
74077: PUSH
74078: LD_INT 9
74080: PUSH
74081: EMPTY
74082: LIST
74083: LIST
74084: PUSH
74085: LD_INT 25
74087: PUSH
74088: LD_INT 8
74090: PUSH
74091: EMPTY
74092: LIST
74093: LIST
74094: PUSH
74095: EMPTY
74096: LIST
74097: LIST
74098: LIST
74099: LIST
74100: PUSH
74101: EMPTY
74102: LIST
74103: LIST
74104: PPUSH
74105: CALL_OW 69
74109: PUSH
74110: FOR_IN
74111: IFFALSE 74127
// begin SetClass ( i , 1 ) ;
74113: LD_VAR 0 1
74117: PPUSH
74118: LD_INT 1
74120: PPUSH
74121: CALL_OW 336
// end ;
74125: GO 74110
74127: POP
74128: POP
// end ;
74129: PPOPN 1
74131: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
74132: LD_EXP 65
74136: PUSH
74137: LD_EXP 69
74141: AND
74142: PUSH
74143: LD_OWVAR 65
74147: PUSH
74148: LD_INT 7
74150: LESS
74151: AND
74152: IFFALSE 74166
74154: GO 74156
74156: DISABLE
// begin enable ;
74157: ENABLE
// game_speed := 7 ;
74158: LD_ADDR_OWVAR 65
74162: PUSH
74163: LD_INT 7
74165: ST_TO_ADDR
// end ;
74166: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
74167: LD_EXP 65
74171: PUSH
74172: LD_EXP 72
74176: AND
74177: IFFALSE 74379
74179: GO 74181
74181: DISABLE
74182: LD_INT 0
74184: PPUSH
74185: PPUSH
74186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
74187: LD_ADDR_VAR 0 3
74191: PUSH
74192: LD_INT 81
74194: PUSH
74195: LD_OWVAR 2
74199: PUSH
74200: EMPTY
74201: LIST
74202: LIST
74203: PUSH
74204: LD_INT 21
74206: PUSH
74207: LD_INT 1
74209: PUSH
74210: EMPTY
74211: LIST
74212: LIST
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: PPUSH
74218: CALL_OW 69
74222: ST_TO_ADDR
// if not tmp then
74223: LD_VAR 0 3
74227: NOT
74228: IFFALSE 74232
// exit ;
74230: GO 74379
// if tmp > 5 then
74232: LD_VAR 0 3
74236: PUSH
74237: LD_INT 5
74239: GREATER
74240: IFFALSE 74252
// k := 5 else
74242: LD_ADDR_VAR 0 2
74246: PUSH
74247: LD_INT 5
74249: ST_TO_ADDR
74250: GO 74262
// k := tmp ;
74252: LD_ADDR_VAR 0 2
74256: PUSH
74257: LD_VAR 0 3
74261: ST_TO_ADDR
// for i := 1 to k do
74262: LD_ADDR_VAR 0 1
74266: PUSH
74267: DOUBLE
74268: LD_INT 1
74270: DEC
74271: ST_TO_ADDR
74272: LD_VAR 0 2
74276: PUSH
74277: FOR_TO
74278: IFFALSE 74377
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
74280: LD_VAR 0 3
74284: PUSH
74285: LD_VAR 0 1
74289: ARRAY
74290: PPUSH
74291: LD_VAR 0 1
74295: PUSH
74296: LD_INT 4
74298: MOD
74299: PUSH
74300: LD_INT 1
74302: PLUS
74303: PPUSH
74304: CALL_OW 259
74308: PUSH
74309: LD_INT 10
74311: LESS
74312: IFFALSE 74375
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
74314: LD_VAR 0 3
74318: PUSH
74319: LD_VAR 0 1
74323: ARRAY
74324: PPUSH
74325: LD_VAR 0 1
74329: PUSH
74330: LD_INT 4
74332: MOD
74333: PUSH
74334: LD_INT 1
74336: PLUS
74337: PPUSH
74338: LD_VAR 0 3
74342: PUSH
74343: LD_VAR 0 1
74347: ARRAY
74348: PPUSH
74349: LD_VAR 0 1
74353: PUSH
74354: LD_INT 4
74356: MOD
74357: PUSH
74358: LD_INT 1
74360: PLUS
74361: PPUSH
74362: CALL_OW 259
74366: PUSH
74367: LD_INT 1
74369: PLUS
74370: PPUSH
74371: CALL_OW 237
74375: GO 74277
74377: POP
74378: POP
// end ;
74379: PPOPN 3
74381: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
74382: LD_EXP 65
74386: PUSH
74387: LD_EXP 73
74391: AND
74392: IFFALSE 74412
74394: GO 74396
74396: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
74397: LD_INT 4
74399: PPUSH
74400: LD_OWVAR 2
74404: PPUSH
74405: LD_INT 0
74407: PPUSH
74408: CALL_OW 324
74412: END
// every 0 0$1 trigger StreamModeActive and sShovel do
74413: LD_EXP 65
74417: PUSH
74418: LD_EXP 102
74422: AND
74423: IFFALSE 74443
74425: GO 74427
74427: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
74428: LD_INT 19
74430: PPUSH
74431: LD_OWVAR 2
74435: PPUSH
74436: LD_INT 0
74438: PPUSH
74439: CALL_OW 324
74443: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
74444: LD_EXP 65
74448: PUSH
74449: LD_EXP 74
74453: AND
74454: IFFALSE 74556
74456: GO 74458
74458: DISABLE
74459: LD_INT 0
74461: PPUSH
74462: PPUSH
// begin enable ;
74463: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
74464: LD_ADDR_VAR 0 2
74468: PUSH
74469: LD_INT 22
74471: PUSH
74472: LD_OWVAR 2
74476: PUSH
74477: EMPTY
74478: LIST
74479: LIST
74480: PUSH
74481: LD_INT 2
74483: PUSH
74484: LD_INT 34
74486: PUSH
74487: LD_INT 11
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: PUSH
74494: LD_INT 34
74496: PUSH
74497: LD_INT 30
74499: PUSH
74500: EMPTY
74501: LIST
74502: LIST
74503: PUSH
74504: EMPTY
74505: LIST
74506: LIST
74507: LIST
74508: PUSH
74509: EMPTY
74510: LIST
74511: LIST
74512: PPUSH
74513: CALL_OW 69
74517: ST_TO_ADDR
// if not tmp then
74518: LD_VAR 0 2
74522: NOT
74523: IFFALSE 74527
// exit ;
74525: GO 74556
// for i in tmp do
74527: LD_ADDR_VAR 0 1
74531: PUSH
74532: LD_VAR 0 2
74536: PUSH
74537: FOR_IN
74538: IFFALSE 74554
// begin SetLives ( i , 0 ) ;
74540: LD_VAR 0 1
74544: PPUSH
74545: LD_INT 0
74547: PPUSH
74548: CALL_OW 234
// end ;
74552: GO 74537
74554: POP
74555: POP
// end ;
74556: PPOPN 2
74558: END
// every 0 0$1 trigger StreamModeActive and sBunker do
74559: LD_EXP 65
74563: PUSH
74564: LD_EXP 75
74568: AND
74569: IFFALSE 74589
74571: GO 74573
74573: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
74574: LD_INT 32
74576: PPUSH
74577: LD_OWVAR 2
74581: PPUSH
74582: LD_INT 0
74584: PPUSH
74585: CALL_OW 324
74589: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
74590: LD_EXP 65
74594: PUSH
74595: LD_EXP 76
74599: AND
74600: IFFALSE 74781
74602: GO 74604
74604: DISABLE
74605: LD_INT 0
74607: PPUSH
74608: PPUSH
74609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
74610: LD_ADDR_VAR 0 2
74614: PUSH
74615: LD_INT 22
74617: PUSH
74618: LD_OWVAR 2
74622: PUSH
74623: EMPTY
74624: LIST
74625: LIST
74626: PUSH
74627: LD_INT 33
74629: PUSH
74630: LD_INT 3
74632: PUSH
74633: EMPTY
74634: LIST
74635: LIST
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: PPUSH
74641: CALL_OW 69
74645: ST_TO_ADDR
// if not tmp then
74646: LD_VAR 0 2
74650: NOT
74651: IFFALSE 74655
// exit ;
74653: GO 74781
// side := 0 ;
74655: LD_ADDR_VAR 0 3
74659: PUSH
74660: LD_INT 0
74662: ST_TO_ADDR
// for i := 1 to 8 do
74663: LD_ADDR_VAR 0 1
74667: PUSH
74668: DOUBLE
74669: LD_INT 1
74671: DEC
74672: ST_TO_ADDR
74673: LD_INT 8
74675: PUSH
74676: FOR_TO
74677: IFFALSE 74725
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
74679: LD_OWVAR 2
74683: PUSH
74684: LD_VAR 0 1
74688: NONEQUAL
74689: PUSH
74690: LD_OWVAR 2
74694: PPUSH
74695: LD_VAR 0 1
74699: PPUSH
74700: CALL_OW 81
74704: PUSH
74705: LD_INT 2
74707: EQUAL
74708: AND
74709: IFFALSE 74723
// begin side := i ;
74711: LD_ADDR_VAR 0 3
74715: PUSH
74716: LD_VAR 0 1
74720: ST_TO_ADDR
// break ;
74721: GO 74725
// end ;
74723: GO 74676
74725: POP
74726: POP
// if not side then
74727: LD_VAR 0 3
74731: NOT
74732: IFFALSE 74736
// exit ;
74734: GO 74781
// for i := 1 to tmp do
74736: LD_ADDR_VAR 0 1
74740: PUSH
74741: DOUBLE
74742: LD_INT 1
74744: DEC
74745: ST_TO_ADDR
74746: LD_VAR 0 2
74750: PUSH
74751: FOR_TO
74752: IFFALSE 74779
// if Prob ( 60 ) then
74754: LD_INT 60
74756: PPUSH
74757: CALL_OW 13
74761: IFFALSE 74777
// SetSide ( i , side ) ;
74763: LD_VAR 0 1
74767: PPUSH
74768: LD_VAR 0 3
74772: PPUSH
74773: CALL_OW 235
74777: GO 74751
74779: POP
74780: POP
// end ;
74781: PPOPN 3
74783: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
74784: LD_EXP 65
74788: PUSH
74789: LD_EXP 78
74793: AND
74794: IFFALSE 74913
74796: GO 74798
74798: DISABLE
74799: LD_INT 0
74801: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
74802: LD_ADDR_VAR 0 1
74806: PUSH
74807: LD_INT 22
74809: PUSH
74810: LD_OWVAR 2
74814: PUSH
74815: EMPTY
74816: LIST
74817: LIST
74818: PUSH
74819: LD_INT 21
74821: PUSH
74822: LD_INT 1
74824: PUSH
74825: EMPTY
74826: LIST
74827: LIST
74828: PUSH
74829: LD_INT 3
74831: PUSH
74832: LD_INT 23
74834: PUSH
74835: LD_INT 0
74837: PUSH
74838: EMPTY
74839: LIST
74840: LIST
74841: PUSH
74842: EMPTY
74843: LIST
74844: LIST
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: LIST
74850: PPUSH
74851: CALL_OW 69
74855: PUSH
74856: FOR_IN
74857: IFFALSE 74911
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
74859: LD_VAR 0 1
74863: PPUSH
74864: CALL_OW 257
74868: PUSH
74869: LD_INT 1
74871: PUSH
74872: LD_INT 2
74874: PUSH
74875: LD_INT 3
74877: PUSH
74878: LD_INT 4
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: IN
74887: IFFALSE 74909
// SetClass ( un , rand ( 1 , 4 ) ) ;
74889: LD_VAR 0 1
74893: PPUSH
74894: LD_INT 1
74896: PPUSH
74897: LD_INT 4
74899: PPUSH
74900: CALL_OW 12
74904: PPUSH
74905: CALL_OW 336
74909: GO 74856
74911: POP
74912: POP
// end ;
74913: PPOPN 1
74915: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
74916: LD_EXP 65
74920: PUSH
74921: LD_EXP 77
74925: AND
74926: IFFALSE 75005
74928: GO 74930
74930: DISABLE
74931: LD_INT 0
74933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
74934: LD_ADDR_VAR 0 1
74938: PUSH
74939: LD_INT 22
74941: PUSH
74942: LD_OWVAR 2
74946: PUSH
74947: EMPTY
74948: LIST
74949: LIST
74950: PUSH
74951: LD_INT 21
74953: PUSH
74954: LD_INT 3
74956: PUSH
74957: EMPTY
74958: LIST
74959: LIST
74960: PUSH
74961: EMPTY
74962: LIST
74963: LIST
74964: PPUSH
74965: CALL_OW 69
74969: ST_TO_ADDR
// if not tmp then
74970: LD_VAR 0 1
74974: NOT
74975: IFFALSE 74979
// exit ;
74977: GO 75005
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
74979: LD_VAR 0 1
74983: PUSH
74984: LD_INT 1
74986: PPUSH
74987: LD_VAR 0 1
74991: PPUSH
74992: CALL_OW 12
74996: ARRAY
74997: PPUSH
74998: LD_INT 100
75000: PPUSH
75001: CALL_OW 234
// end ;
75005: PPOPN 1
75007: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
75008: LD_EXP 65
75012: PUSH
75013: LD_EXP 79
75017: AND
75018: IFFALSE 75116
75020: GO 75022
75022: DISABLE
75023: LD_INT 0
75025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75026: LD_ADDR_VAR 0 1
75030: PUSH
75031: LD_INT 22
75033: PUSH
75034: LD_OWVAR 2
75038: PUSH
75039: EMPTY
75040: LIST
75041: LIST
75042: PUSH
75043: LD_INT 21
75045: PUSH
75046: LD_INT 1
75048: PUSH
75049: EMPTY
75050: LIST
75051: LIST
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: PPUSH
75057: CALL_OW 69
75061: ST_TO_ADDR
// if not tmp then
75062: LD_VAR 0 1
75066: NOT
75067: IFFALSE 75071
// exit ;
75069: GO 75116
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
75071: LD_VAR 0 1
75075: PUSH
75076: LD_INT 1
75078: PPUSH
75079: LD_VAR 0 1
75083: PPUSH
75084: CALL_OW 12
75088: ARRAY
75089: PPUSH
75090: LD_INT 1
75092: PPUSH
75093: LD_INT 4
75095: PPUSH
75096: CALL_OW 12
75100: PPUSH
75101: LD_INT 3000
75103: PPUSH
75104: LD_INT 9000
75106: PPUSH
75107: CALL_OW 12
75111: PPUSH
75112: CALL_OW 492
// end ;
75116: PPOPN 1
75118: END
// every 0 0$1 trigger StreamModeActive and sDepot do
75119: LD_EXP 65
75123: PUSH
75124: LD_EXP 80
75128: AND
75129: IFFALSE 75149
75131: GO 75133
75133: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
75134: LD_INT 1
75136: PPUSH
75137: LD_OWVAR 2
75141: PPUSH
75142: LD_INT 0
75144: PPUSH
75145: CALL_OW 324
75149: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
75150: LD_EXP 65
75154: PUSH
75155: LD_EXP 81
75159: AND
75160: IFFALSE 75243
75162: GO 75164
75164: DISABLE
75165: LD_INT 0
75167: PPUSH
75168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
75169: LD_ADDR_VAR 0 2
75173: PUSH
75174: LD_INT 22
75176: PUSH
75177: LD_OWVAR 2
75181: PUSH
75182: EMPTY
75183: LIST
75184: LIST
75185: PUSH
75186: LD_INT 21
75188: PUSH
75189: LD_INT 3
75191: PUSH
75192: EMPTY
75193: LIST
75194: LIST
75195: PUSH
75196: EMPTY
75197: LIST
75198: LIST
75199: PPUSH
75200: CALL_OW 69
75204: ST_TO_ADDR
// if not tmp then
75205: LD_VAR 0 2
75209: NOT
75210: IFFALSE 75214
// exit ;
75212: GO 75243
// for i in tmp do
75214: LD_ADDR_VAR 0 1
75218: PUSH
75219: LD_VAR 0 2
75223: PUSH
75224: FOR_IN
75225: IFFALSE 75241
// SetBLevel ( i , 10 ) ;
75227: LD_VAR 0 1
75231: PPUSH
75232: LD_INT 10
75234: PPUSH
75235: CALL_OW 241
75239: GO 75224
75241: POP
75242: POP
// end ;
75243: PPOPN 2
75245: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
75246: LD_EXP 65
75250: PUSH
75251: LD_EXP 82
75255: AND
75256: IFFALSE 75367
75258: GO 75260
75260: DISABLE
75261: LD_INT 0
75263: PPUSH
75264: PPUSH
75265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75266: LD_ADDR_VAR 0 3
75270: PUSH
75271: LD_INT 22
75273: PUSH
75274: LD_OWVAR 2
75278: PUSH
75279: EMPTY
75280: LIST
75281: LIST
75282: PUSH
75283: LD_INT 25
75285: PUSH
75286: LD_INT 1
75288: PUSH
75289: EMPTY
75290: LIST
75291: LIST
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: PPUSH
75297: CALL_OW 69
75301: ST_TO_ADDR
// if not tmp then
75302: LD_VAR 0 3
75306: NOT
75307: IFFALSE 75311
// exit ;
75309: GO 75367
// un := tmp [ rand ( 1 , tmp ) ] ;
75311: LD_ADDR_VAR 0 2
75315: PUSH
75316: LD_VAR 0 3
75320: PUSH
75321: LD_INT 1
75323: PPUSH
75324: LD_VAR 0 3
75328: PPUSH
75329: CALL_OW 12
75333: ARRAY
75334: ST_TO_ADDR
// if Crawls ( un ) then
75335: LD_VAR 0 2
75339: PPUSH
75340: CALL_OW 318
75344: IFFALSE 75355
// ComWalk ( un ) ;
75346: LD_VAR 0 2
75350: PPUSH
75351: CALL_OW 138
// SetClass ( un , class_sniper ) ;
75355: LD_VAR 0 2
75359: PPUSH
75360: LD_INT 5
75362: PPUSH
75363: CALL_OW 336
// end ;
75367: PPOPN 3
75369: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
75370: LD_EXP 65
75374: PUSH
75375: LD_EXP 83
75379: AND
75380: PUSH
75381: LD_OWVAR 67
75385: PUSH
75386: LD_INT 4
75388: LESS
75389: AND
75390: IFFALSE 75409
75392: GO 75394
75394: DISABLE
// begin Difficulty := Difficulty + 1 ;
75395: LD_ADDR_OWVAR 67
75399: PUSH
75400: LD_OWVAR 67
75404: PUSH
75405: LD_INT 1
75407: PLUS
75408: ST_TO_ADDR
// end ;
75409: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
75410: LD_EXP 65
75414: PUSH
75415: LD_EXP 84
75419: AND
75420: IFFALSE 75523
75422: GO 75424
75424: DISABLE
75425: LD_INT 0
75427: PPUSH
// begin for i := 1 to 5 do
75428: LD_ADDR_VAR 0 1
75432: PUSH
75433: DOUBLE
75434: LD_INT 1
75436: DEC
75437: ST_TO_ADDR
75438: LD_INT 5
75440: PUSH
75441: FOR_TO
75442: IFFALSE 75521
// begin uc_nation := nation_nature ;
75444: LD_ADDR_OWVAR 21
75448: PUSH
75449: LD_INT 0
75451: ST_TO_ADDR
// uc_side := 0 ;
75452: LD_ADDR_OWVAR 20
75456: PUSH
75457: LD_INT 0
75459: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75460: LD_ADDR_OWVAR 29
75464: PUSH
75465: LD_INT 12
75467: PUSH
75468: LD_INT 12
75470: PUSH
75471: EMPTY
75472: LIST
75473: LIST
75474: ST_TO_ADDR
// hc_agressivity := 20 ;
75475: LD_ADDR_OWVAR 35
75479: PUSH
75480: LD_INT 20
75482: ST_TO_ADDR
// hc_class := class_tiger ;
75483: LD_ADDR_OWVAR 28
75487: PUSH
75488: LD_INT 14
75490: ST_TO_ADDR
// hc_gallery :=  ;
75491: LD_ADDR_OWVAR 33
75495: PUSH
75496: LD_STRING 
75498: ST_TO_ADDR
// hc_name :=  ;
75499: LD_ADDR_OWVAR 26
75503: PUSH
75504: LD_STRING 
75506: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
75507: CALL_OW 44
75511: PPUSH
75512: LD_INT 0
75514: PPUSH
75515: CALL_OW 51
// end ;
75519: GO 75441
75521: POP
75522: POP
// end ;
75523: PPOPN 1
75525: END
// every 0 0$1 trigger StreamModeActive and sBomb do
75526: LD_EXP 65
75530: PUSH
75531: LD_EXP 85
75535: AND
75536: IFFALSE 75545
75538: GO 75540
75540: DISABLE
// StreamSibBomb ;
75541: CALL 75546 0 0
75545: END
// export function StreamSibBomb ; var i , x , y ; begin
75546: LD_INT 0
75548: PPUSH
75549: PPUSH
75550: PPUSH
75551: PPUSH
// result := false ;
75552: LD_ADDR_VAR 0 1
75556: PUSH
75557: LD_INT 0
75559: ST_TO_ADDR
// for i := 1 to 16 do
75560: LD_ADDR_VAR 0 2
75564: PUSH
75565: DOUBLE
75566: LD_INT 1
75568: DEC
75569: ST_TO_ADDR
75570: LD_INT 16
75572: PUSH
75573: FOR_TO
75574: IFFALSE 75773
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
75576: LD_ADDR_VAR 0 3
75580: PUSH
75581: LD_INT 10
75583: PUSH
75584: LD_INT 20
75586: PUSH
75587: LD_INT 30
75589: PUSH
75590: LD_INT 40
75592: PUSH
75593: LD_INT 50
75595: PUSH
75596: LD_INT 60
75598: PUSH
75599: LD_INT 70
75601: PUSH
75602: LD_INT 80
75604: PUSH
75605: LD_INT 90
75607: PUSH
75608: LD_INT 100
75610: PUSH
75611: LD_INT 110
75613: PUSH
75614: LD_INT 120
75616: PUSH
75617: LD_INT 130
75619: PUSH
75620: LD_INT 140
75622: PUSH
75623: LD_INT 150
75625: PUSH
75626: EMPTY
75627: LIST
75628: LIST
75629: LIST
75630: LIST
75631: LIST
75632: LIST
75633: LIST
75634: LIST
75635: LIST
75636: LIST
75637: LIST
75638: LIST
75639: LIST
75640: LIST
75641: LIST
75642: PUSH
75643: LD_INT 1
75645: PPUSH
75646: LD_INT 15
75648: PPUSH
75649: CALL_OW 12
75653: ARRAY
75654: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
75655: LD_ADDR_VAR 0 4
75659: PUSH
75660: LD_INT 10
75662: PUSH
75663: LD_INT 20
75665: PUSH
75666: LD_INT 30
75668: PUSH
75669: LD_INT 40
75671: PUSH
75672: LD_INT 50
75674: PUSH
75675: LD_INT 60
75677: PUSH
75678: LD_INT 70
75680: PUSH
75681: LD_INT 80
75683: PUSH
75684: LD_INT 90
75686: PUSH
75687: LD_INT 100
75689: PUSH
75690: LD_INT 110
75692: PUSH
75693: LD_INT 120
75695: PUSH
75696: LD_INT 130
75698: PUSH
75699: LD_INT 140
75701: PUSH
75702: LD_INT 150
75704: PUSH
75705: EMPTY
75706: LIST
75707: LIST
75708: LIST
75709: LIST
75710: LIST
75711: LIST
75712: LIST
75713: LIST
75714: LIST
75715: LIST
75716: LIST
75717: LIST
75718: LIST
75719: LIST
75720: LIST
75721: PUSH
75722: LD_INT 1
75724: PPUSH
75725: LD_INT 15
75727: PPUSH
75728: CALL_OW 12
75732: ARRAY
75733: ST_TO_ADDR
// if ValidHex ( x , y ) then
75734: LD_VAR 0 3
75738: PPUSH
75739: LD_VAR 0 4
75743: PPUSH
75744: CALL_OW 488
75748: IFFALSE 75771
// begin result := [ x , y ] ;
75750: LD_ADDR_VAR 0 1
75754: PUSH
75755: LD_VAR 0 3
75759: PUSH
75760: LD_VAR 0 4
75764: PUSH
75765: EMPTY
75766: LIST
75767: LIST
75768: ST_TO_ADDR
// break ;
75769: GO 75773
// end ; end ;
75771: GO 75573
75773: POP
75774: POP
// if result then
75775: LD_VAR 0 1
75779: IFFALSE 75839
// begin ToLua ( playSibBomb() ) ;
75781: LD_STRING playSibBomb()
75783: PPUSH
75784: CALL_OW 559
// wait ( 0 0$14 ) ;
75788: LD_INT 490
75790: PPUSH
75791: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
75795: LD_VAR 0 1
75799: PUSH
75800: LD_INT 1
75802: ARRAY
75803: PPUSH
75804: LD_VAR 0 1
75808: PUSH
75809: LD_INT 2
75811: ARRAY
75812: PPUSH
75813: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
75817: LD_VAR 0 1
75821: PUSH
75822: LD_INT 1
75824: ARRAY
75825: PPUSH
75826: LD_VAR 0 1
75830: PUSH
75831: LD_INT 2
75833: ARRAY
75834: PPUSH
75835: CALL_OW 429
// end ; end ;
75839: LD_VAR 0 1
75843: RET
// every 0 0$1 trigger StreamModeActive and sReset do
75844: LD_EXP 65
75848: PUSH
75849: LD_EXP 87
75853: AND
75854: IFFALSE 75866
75856: GO 75858
75858: DISABLE
// YouLost (  ) ;
75859: LD_STRING 
75861: PPUSH
75862: CALL_OW 104
75866: END
// every 0 0$1 trigger StreamModeActive and sFog do
75867: LD_EXP 65
75871: PUSH
75872: LD_EXP 86
75876: AND
75877: IFFALSE 75891
75879: GO 75881
75881: DISABLE
// FogOff ( your_side ) ;
75882: LD_OWVAR 2
75886: PPUSH
75887: CALL_OW 344
75891: END
// every 0 0$1 trigger StreamModeActive and sSun do
75892: LD_EXP 65
75896: PUSH
75897: LD_EXP 88
75901: AND
75902: IFFALSE 75930
75904: GO 75906
75906: DISABLE
// begin solar_recharge_percent := 0 ;
75907: LD_ADDR_OWVAR 79
75911: PUSH
75912: LD_INT 0
75914: ST_TO_ADDR
// wait ( 5 5$00 ) ;
75915: LD_INT 10500
75917: PPUSH
75918: CALL_OW 67
// solar_recharge_percent := 100 ;
75922: LD_ADDR_OWVAR 79
75926: PUSH
75927: LD_INT 100
75929: ST_TO_ADDR
// end ;
75930: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
75931: LD_EXP 65
75935: PUSH
75936: LD_EXP 89
75940: AND
75941: IFFALSE 76180
75943: GO 75945
75945: DISABLE
75946: LD_INT 0
75948: PPUSH
75949: PPUSH
75950: PPUSH
// begin tmp := [ ] ;
75951: LD_ADDR_VAR 0 3
75955: PUSH
75956: EMPTY
75957: ST_TO_ADDR
// for i := 1 to 6 do
75958: LD_ADDR_VAR 0 1
75962: PUSH
75963: DOUBLE
75964: LD_INT 1
75966: DEC
75967: ST_TO_ADDR
75968: LD_INT 6
75970: PUSH
75971: FOR_TO
75972: IFFALSE 76077
// begin uc_nation := nation_nature ;
75974: LD_ADDR_OWVAR 21
75978: PUSH
75979: LD_INT 0
75981: ST_TO_ADDR
// uc_side := 0 ;
75982: LD_ADDR_OWVAR 20
75986: PUSH
75987: LD_INT 0
75989: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75990: LD_ADDR_OWVAR 29
75994: PUSH
75995: LD_INT 12
75997: PUSH
75998: LD_INT 12
76000: PUSH
76001: EMPTY
76002: LIST
76003: LIST
76004: ST_TO_ADDR
// hc_agressivity := 20 ;
76005: LD_ADDR_OWVAR 35
76009: PUSH
76010: LD_INT 20
76012: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
76013: LD_ADDR_OWVAR 28
76017: PUSH
76018: LD_INT 17
76020: ST_TO_ADDR
// hc_gallery :=  ;
76021: LD_ADDR_OWVAR 33
76025: PUSH
76026: LD_STRING 
76028: ST_TO_ADDR
// hc_name :=  ;
76029: LD_ADDR_OWVAR 26
76033: PUSH
76034: LD_STRING 
76036: ST_TO_ADDR
// un := CreateHuman ;
76037: LD_ADDR_VAR 0 2
76041: PUSH
76042: CALL_OW 44
76046: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
76047: LD_VAR 0 2
76051: PPUSH
76052: LD_INT 1
76054: PPUSH
76055: CALL_OW 51
// tmp := tmp ^ un ;
76059: LD_ADDR_VAR 0 3
76063: PUSH
76064: LD_VAR 0 3
76068: PUSH
76069: LD_VAR 0 2
76073: ADD
76074: ST_TO_ADDR
// end ;
76075: GO 75971
76077: POP
76078: POP
// repeat wait ( 0 0$1 ) ;
76079: LD_INT 35
76081: PPUSH
76082: CALL_OW 67
// for un in tmp do
76086: LD_ADDR_VAR 0 2
76090: PUSH
76091: LD_VAR 0 3
76095: PUSH
76096: FOR_IN
76097: IFFALSE 76171
// begin if IsDead ( un ) then
76099: LD_VAR 0 2
76103: PPUSH
76104: CALL_OW 301
76108: IFFALSE 76128
// begin tmp := tmp diff un ;
76110: LD_ADDR_VAR 0 3
76114: PUSH
76115: LD_VAR 0 3
76119: PUSH
76120: LD_VAR 0 2
76124: DIFF
76125: ST_TO_ADDR
// continue ;
76126: GO 76096
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
76128: LD_VAR 0 2
76132: PPUSH
76133: LD_INT 3
76135: PUSH
76136: LD_INT 22
76138: PUSH
76139: LD_INT 0
76141: PUSH
76142: EMPTY
76143: LIST
76144: LIST
76145: PUSH
76146: EMPTY
76147: LIST
76148: LIST
76149: PPUSH
76150: CALL_OW 69
76154: PPUSH
76155: LD_VAR 0 2
76159: PPUSH
76160: CALL_OW 74
76164: PPUSH
76165: CALL_OW 115
// end ;
76169: GO 76096
76171: POP
76172: POP
// until not tmp ;
76173: LD_VAR 0 3
76177: NOT
76178: IFFALSE 76079
// end ;
76180: PPOPN 3
76182: END
// every 0 0$1 trigger StreamModeActive and sTroll do
76183: LD_EXP 65
76187: PUSH
76188: LD_EXP 90
76192: AND
76193: IFFALSE 76247
76195: GO 76197
76197: DISABLE
// begin ToLua ( displayTroll(); ) ;
76198: LD_STRING displayTroll();
76200: PPUSH
76201: CALL_OW 559
// wait ( 3 3$00 ) ;
76205: LD_INT 6300
76207: PPUSH
76208: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76212: LD_STRING hideTroll();
76214: PPUSH
76215: CALL_OW 559
// wait ( 1 1$00 ) ;
76219: LD_INT 2100
76221: PPUSH
76222: CALL_OW 67
// ToLua ( displayTroll(); ) ;
76226: LD_STRING displayTroll();
76228: PPUSH
76229: CALL_OW 559
// wait ( 1 1$00 ) ;
76233: LD_INT 2100
76235: PPUSH
76236: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76240: LD_STRING hideTroll();
76242: PPUSH
76243: CALL_OW 559
// end ;
76247: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
76248: LD_EXP 65
76252: PUSH
76253: LD_EXP 91
76257: AND
76258: IFFALSE 76321
76260: GO 76262
76262: DISABLE
76263: LD_INT 0
76265: PPUSH
// begin p := 0 ;
76266: LD_ADDR_VAR 0 1
76270: PUSH
76271: LD_INT 0
76273: ST_TO_ADDR
// repeat game_speed := 1 ;
76274: LD_ADDR_OWVAR 65
76278: PUSH
76279: LD_INT 1
76281: ST_TO_ADDR
// wait ( 0 0$1 ) ;
76282: LD_INT 35
76284: PPUSH
76285: CALL_OW 67
// p := p + 1 ;
76289: LD_ADDR_VAR 0 1
76293: PUSH
76294: LD_VAR 0 1
76298: PUSH
76299: LD_INT 1
76301: PLUS
76302: ST_TO_ADDR
// until p >= 60 ;
76303: LD_VAR 0 1
76307: PUSH
76308: LD_INT 60
76310: GREATEREQUAL
76311: IFFALSE 76274
// game_speed := 4 ;
76313: LD_ADDR_OWVAR 65
76317: PUSH
76318: LD_INT 4
76320: ST_TO_ADDR
// end ;
76321: PPOPN 1
76323: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
76324: LD_EXP 65
76328: PUSH
76329: LD_EXP 92
76333: AND
76334: IFFALSE 76480
76336: GO 76338
76338: DISABLE
76339: LD_INT 0
76341: PPUSH
76342: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76343: LD_ADDR_VAR 0 1
76347: PUSH
76348: LD_INT 22
76350: PUSH
76351: LD_OWVAR 2
76355: PUSH
76356: EMPTY
76357: LIST
76358: LIST
76359: PUSH
76360: LD_INT 2
76362: PUSH
76363: LD_INT 30
76365: PUSH
76366: LD_INT 0
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: PUSH
76373: LD_INT 30
76375: PUSH
76376: LD_INT 1
76378: PUSH
76379: EMPTY
76380: LIST
76381: LIST
76382: PUSH
76383: EMPTY
76384: LIST
76385: LIST
76386: LIST
76387: PUSH
76388: EMPTY
76389: LIST
76390: LIST
76391: PPUSH
76392: CALL_OW 69
76396: ST_TO_ADDR
// if not depot then
76397: LD_VAR 0 1
76401: NOT
76402: IFFALSE 76406
// exit ;
76404: GO 76480
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
76406: LD_ADDR_VAR 0 2
76410: PUSH
76411: LD_VAR 0 1
76415: PUSH
76416: LD_INT 1
76418: PPUSH
76419: LD_VAR 0 1
76423: PPUSH
76424: CALL_OW 12
76428: ARRAY
76429: PPUSH
76430: CALL_OW 274
76434: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
76435: LD_VAR 0 2
76439: PPUSH
76440: LD_INT 1
76442: PPUSH
76443: LD_INT 0
76445: PPUSH
76446: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
76450: LD_VAR 0 2
76454: PPUSH
76455: LD_INT 2
76457: PPUSH
76458: LD_INT 0
76460: PPUSH
76461: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
76465: LD_VAR 0 2
76469: PPUSH
76470: LD_INT 3
76472: PPUSH
76473: LD_INT 0
76475: PPUSH
76476: CALL_OW 277
// end ;
76480: PPOPN 2
76482: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
76483: LD_EXP 65
76487: PUSH
76488: LD_EXP 93
76492: AND
76493: IFFALSE 76590
76495: GO 76497
76497: DISABLE
76498: LD_INT 0
76500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76501: LD_ADDR_VAR 0 1
76505: PUSH
76506: LD_INT 22
76508: PUSH
76509: LD_OWVAR 2
76513: PUSH
76514: EMPTY
76515: LIST
76516: LIST
76517: PUSH
76518: LD_INT 21
76520: PUSH
76521: LD_INT 1
76523: PUSH
76524: EMPTY
76525: LIST
76526: LIST
76527: PUSH
76528: LD_INT 3
76530: PUSH
76531: LD_INT 23
76533: PUSH
76534: LD_INT 0
76536: PUSH
76537: EMPTY
76538: LIST
76539: LIST
76540: PUSH
76541: EMPTY
76542: LIST
76543: LIST
76544: PUSH
76545: EMPTY
76546: LIST
76547: LIST
76548: LIST
76549: PPUSH
76550: CALL_OW 69
76554: ST_TO_ADDR
// if not tmp then
76555: LD_VAR 0 1
76559: NOT
76560: IFFALSE 76564
// exit ;
76562: GO 76590
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
76564: LD_VAR 0 1
76568: PUSH
76569: LD_INT 1
76571: PPUSH
76572: LD_VAR 0 1
76576: PPUSH
76577: CALL_OW 12
76581: ARRAY
76582: PPUSH
76583: LD_INT 200
76585: PPUSH
76586: CALL_OW 234
// end ;
76590: PPOPN 1
76592: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
76593: LD_EXP 65
76597: PUSH
76598: LD_EXP 94
76602: AND
76603: IFFALSE 76682
76605: GO 76607
76607: DISABLE
76608: LD_INT 0
76610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
76611: LD_ADDR_VAR 0 1
76615: PUSH
76616: LD_INT 22
76618: PUSH
76619: LD_OWVAR 2
76623: PUSH
76624: EMPTY
76625: LIST
76626: LIST
76627: PUSH
76628: LD_INT 21
76630: PUSH
76631: LD_INT 2
76633: PUSH
76634: EMPTY
76635: LIST
76636: LIST
76637: PUSH
76638: EMPTY
76639: LIST
76640: LIST
76641: PPUSH
76642: CALL_OW 69
76646: ST_TO_ADDR
// if not tmp then
76647: LD_VAR 0 1
76651: NOT
76652: IFFALSE 76656
// exit ;
76654: GO 76682
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
76656: LD_VAR 0 1
76660: PUSH
76661: LD_INT 1
76663: PPUSH
76664: LD_VAR 0 1
76668: PPUSH
76669: CALL_OW 12
76673: ARRAY
76674: PPUSH
76675: LD_INT 60
76677: PPUSH
76678: CALL_OW 234
// end ;
76682: PPOPN 1
76684: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
76685: LD_EXP 65
76689: PUSH
76690: LD_EXP 95
76694: AND
76695: IFFALSE 76794
76697: GO 76699
76699: DISABLE
76700: LD_INT 0
76702: PPUSH
76703: PPUSH
// begin enable ;
76704: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
76705: LD_ADDR_VAR 0 1
76709: PUSH
76710: LD_INT 22
76712: PUSH
76713: LD_OWVAR 2
76717: PUSH
76718: EMPTY
76719: LIST
76720: LIST
76721: PUSH
76722: LD_INT 61
76724: PUSH
76725: EMPTY
76726: LIST
76727: PUSH
76728: LD_INT 33
76730: PUSH
76731: LD_INT 2
76733: PUSH
76734: EMPTY
76735: LIST
76736: LIST
76737: PUSH
76738: EMPTY
76739: LIST
76740: LIST
76741: LIST
76742: PPUSH
76743: CALL_OW 69
76747: ST_TO_ADDR
// if not tmp then
76748: LD_VAR 0 1
76752: NOT
76753: IFFALSE 76757
// exit ;
76755: GO 76794
// for i in tmp do
76757: LD_ADDR_VAR 0 2
76761: PUSH
76762: LD_VAR 0 1
76766: PUSH
76767: FOR_IN
76768: IFFALSE 76792
// if IsControledBy ( i ) then
76770: LD_VAR 0 2
76774: PPUSH
76775: CALL_OW 312
76779: IFFALSE 76790
// ComUnlink ( i ) ;
76781: LD_VAR 0 2
76785: PPUSH
76786: CALL_OW 136
76790: GO 76767
76792: POP
76793: POP
// end ;
76794: PPOPN 2
76796: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
76797: LD_EXP 65
76801: PUSH
76802: LD_EXP 96
76806: AND
76807: IFFALSE 76947
76809: GO 76811
76811: DISABLE
76812: LD_INT 0
76814: PPUSH
76815: PPUSH
// begin ToLua ( displayPowell(); ) ;
76816: LD_STRING displayPowell();
76818: PPUSH
76819: CALL_OW 559
// uc_side := 0 ;
76823: LD_ADDR_OWVAR 20
76827: PUSH
76828: LD_INT 0
76830: ST_TO_ADDR
// uc_nation := 2 ;
76831: LD_ADDR_OWVAR 21
76835: PUSH
76836: LD_INT 2
76838: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
76839: LD_ADDR_OWVAR 37
76843: PUSH
76844: LD_INT 14
76846: ST_TO_ADDR
// vc_engine := engine_siberite ;
76847: LD_ADDR_OWVAR 39
76851: PUSH
76852: LD_INT 3
76854: ST_TO_ADDR
// vc_control := control_apeman ;
76855: LD_ADDR_OWVAR 38
76859: PUSH
76860: LD_INT 5
76862: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
76863: LD_ADDR_OWVAR 40
76867: PUSH
76868: LD_INT 29
76870: ST_TO_ADDR
// un := CreateVehicle ;
76871: LD_ADDR_VAR 0 2
76875: PUSH
76876: CALL_OW 45
76880: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76881: LD_VAR 0 2
76885: PPUSH
76886: LD_INT 1
76888: PPUSH
76889: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
76893: LD_INT 35
76895: PPUSH
76896: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
76900: LD_VAR 0 2
76904: PPUSH
76905: LD_INT 22
76907: PUSH
76908: LD_OWVAR 2
76912: PUSH
76913: EMPTY
76914: LIST
76915: LIST
76916: PPUSH
76917: CALL_OW 69
76921: PPUSH
76922: LD_VAR 0 2
76926: PPUSH
76927: CALL_OW 74
76931: PPUSH
76932: CALL_OW 115
// until IsDead ( un ) ;
76936: LD_VAR 0 2
76940: PPUSH
76941: CALL_OW 301
76945: IFFALSE 76893
// end ;
76947: PPOPN 2
76949: END
// every 0 0$1 trigger StreamModeActive and sStu do
76950: LD_EXP 65
76954: PUSH
76955: LD_EXP 104
76959: AND
76960: IFFALSE 76976
76962: GO 76964
76964: DISABLE
// begin ToLua ( displayStucuk(); ) ;
76965: LD_STRING displayStucuk();
76967: PPUSH
76968: CALL_OW 559
// ResetFog ;
76972: CALL_OW 335
// end ;
76976: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
76977: LD_EXP 65
76981: PUSH
76982: LD_EXP 97
76986: AND
76987: IFFALSE 77128
76989: GO 76991
76991: DISABLE
76992: LD_INT 0
76994: PPUSH
76995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76996: LD_ADDR_VAR 0 2
77000: PUSH
77001: LD_INT 22
77003: PUSH
77004: LD_OWVAR 2
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: PUSH
77013: LD_INT 21
77015: PUSH
77016: LD_INT 1
77018: PUSH
77019: EMPTY
77020: LIST
77021: LIST
77022: PUSH
77023: EMPTY
77024: LIST
77025: LIST
77026: PPUSH
77027: CALL_OW 69
77031: ST_TO_ADDR
// if not tmp then
77032: LD_VAR 0 2
77036: NOT
77037: IFFALSE 77041
// exit ;
77039: GO 77128
// un := tmp [ rand ( 1 , tmp ) ] ;
77041: LD_ADDR_VAR 0 1
77045: PUSH
77046: LD_VAR 0 2
77050: PUSH
77051: LD_INT 1
77053: PPUSH
77054: LD_VAR 0 2
77058: PPUSH
77059: CALL_OW 12
77063: ARRAY
77064: ST_TO_ADDR
// SetSide ( un , 0 ) ;
77065: LD_VAR 0 1
77069: PPUSH
77070: LD_INT 0
77072: PPUSH
77073: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
77077: LD_VAR 0 1
77081: PPUSH
77082: LD_OWVAR 3
77086: PUSH
77087: LD_VAR 0 1
77091: DIFF
77092: PPUSH
77093: LD_VAR 0 1
77097: PPUSH
77098: CALL_OW 74
77102: PPUSH
77103: CALL_OW 115
// wait ( 0 0$20 ) ;
77107: LD_INT 700
77109: PPUSH
77110: CALL_OW 67
// SetSide ( un , your_side ) ;
77114: LD_VAR 0 1
77118: PPUSH
77119: LD_OWVAR 2
77123: PPUSH
77124: CALL_OW 235
// end ;
77128: PPOPN 2
77130: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
77131: LD_EXP 65
77135: PUSH
77136: LD_EXP 98
77140: AND
77141: IFFALSE 77247
77143: GO 77145
77145: DISABLE
77146: LD_INT 0
77148: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77149: LD_ADDR_VAR 0 1
77153: PUSH
77154: LD_INT 22
77156: PUSH
77157: LD_OWVAR 2
77161: PUSH
77162: EMPTY
77163: LIST
77164: LIST
77165: PUSH
77166: LD_INT 2
77168: PUSH
77169: LD_INT 30
77171: PUSH
77172: LD_INT 0
77174: PUSH
77175: EMPTY
77176: LIST
77177: LIST
77178: PUSH
77179: LD_INT 30
77181: PUSH
77182: LD_INT 1
77184: PUSH
77185: EMPTY
77186: LIST
77187: LIST
77188: PUSH
77189: EMPTY
77190: LIST
77191: LIST
77192: LIST
77193: PUSH
77194: EMPTY
77195: LIST
77196: LIST
77197: PPUSH
77198: CALL_OW 69
77202: ST_TO_ADDR
// if not depot then
77203: LD_VAR 0 1
77207: NOT
77208: IFFALSE 77212
// exit ;
77210: GO 77247
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
77212: LD_VAR 0 1
77216: PUSH
77217: LD_INT 1
77219: ARRAY
77220: PPUSH
77221: CALL_OW 250
77225: PPUSH
77226: LD_VAR 0 1
77230: PUSH
77231: LD_INT 1
77233: ARRAY
77234: PPUSH
77235: CALL_OW 251
77239: PPUSH
77240: LD_INT 70
77242: PPUSH
77243: CALL_OW 495
// end ;
77247: PPOPN 1
77249: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
77250: LD_EXP 65
77254: PUSH
77255: LD_EXP 99
77259: AND
77260: IFFALSE 77471
77262: GO 77264
77264: DISABLE
77265: LD_INT 0
77267: PPUSH
77268: PPUSH
77269: PPUSH
77270: PPUSH
77271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77272: LD_ADDR_VAR 0 5
77276: PUSH
77277: LD_INT 22
77279: PUSH
77280: LD_OWVAR 2
77284: PUSH
77285: EMPTY
77286: LIST
77287: LIST
77288: PUSH
77289: LD_INT 21
77291: PUSH
77292: LD_INT 1
77294: PUSH
77295: EMPTY
77296: LIST
77297: LIST
77298: PUSH
77299: EMPTY
77300: LIST
77301: LIST
77302: PPUSH
77303: CALL_OW 69
77307: ST_TO_ADDR
// if not tmp then
77308: LD_VAR 0 5
77312: NOT
77313: IFFALSE 77317
// exit ;
77315: GO 77471
// for i in tmp do
77317: LD_ADDR_VAR 0 1
77321: PUSH
77322: LD_VAR 0 5
77326: PUSH
77327: FOR_IN
77328: IFFALSE 77469
// begin d := rand ( 0 , 5 ) ;
77330: LD_ADDR_VAR 0 4
77334: PUSH
77335: LD_INT 0
77337: PPUSH
77338: LD_INT 5
77340: PPUSH
77341: CALL_OW 12
77345: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
77346: LD_ADDR_VAR 0 2
77350: PUSH
77351: LD_VAR 0 1
77355: PPUSH
77356: CALL_OW 250
77360: PPUSH
77361: LD_VAR 0 4
77365: PPUSH
77366: LD_INT 3
77368: PPUSH
77369: LD_INT 12
77371: PPUSH
77372: CALL_OW 12
77376: PPUSH
77377: CALL_OW 272
77381: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
77382: LD_ADDR_VAR 0 3
77386: PUSH
77387: LD_VAR 0 1
77391: PPUSH
77392: CALL_OW 251
77396: PPUSH
77397: LD_VAR 0 4
77401: PPUSH
77402: LD_INT 3
77404: PPUSH
77405: LD_INT 12
77407: PPUSH
77408: CALL_OW 12
77412: PPUSH
77413: CALL_OW 273
77417: ST_TO_ADDR
// if ValidHex ( x , y ) then
77418: LD_VAR 0 2
77422: PPUSH
77423: LD_VAR 0 3
77427: PPUSH
77428: CALL_OW 488
77432: IFFALSE 77467
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
77434: LD_VAR 0 1
77438: PPUSH
77439: LD_VAR 0 2
77443: PPUSH
77444: LD_VAR 0 3
77448: PPUSH
77449: LD_INT 3
77451: PPUSH
77452: LD_INT 6
77454: PPUSH
77455: CALL_OW 12
77459: PPUSH
77460: LD_INT 1
77462: PPUSH
77463: CALL_OW 483
// end ;
77467: GO 77327
77469: POP
77470: POP
// end ;
77471: PPOPN 5
77473: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
77474: LD_EXP 65
77478: PUSH
77479: LD_EXP 100
77483: AND
77484: IFFALSE 77578
77486: GO 77488
77488: DISABLE
77489: LD_INT 0
77491: PPUSH
77492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
77493: LD_ADDR_VAR 0 2
77497: PUSH
77498: LD_INT 22
77500: PUSH
77501: LD_OWVAR 2
77505: PUSH
77506: EMPTY
77507: LIST
77508: LIST
77509: PUSH
77510: LD_INT 32
77512: PUSH
77513: LD_INT 1
77515: PUSH
77516: EMPTY
77517: LIST
77518: LIST
77519: PUSH
77520: LD_INT 21
77522: PUSH
77523: LD_INT 2
77525: PUSH
77526: EMPTY
77527: LIST
77528: LIST
77529: PUSH
77530: EMPTY
77531: LIST
77532: LIST
77533: LIST
77534: PPUSH
77535: CALL_OW 69
77539: ST_TO_ADDR
// if not tmp then
77540: LD_VAR 0 2
77544: NOT
77545: IFFALSE 77549
// exit ;
77547: GO 77578
// for i in tmp do
77549: LD_ADDR_VAR 0 1
77553: PUSH
77554: LD_VAR 0 2
77558: PUSH
77559: FOR_IN
77560: IFFALSE 77576
// SetFuel ( i , 0 ) ;
77562: LD_VAR 0 1
77566: PPUSH
77567: LD_INT 0
77569: PPUSH
77570: CALL_OW 240
77574: GO 77559
77576: POP
77577: POP
// end ;
77578: PPOPN 2
77580: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
77581: LD_EXP 65
77585: PUSH
77586: LD_EXP 101
77590: AND
77591: IFFALSE 77657
77593: GO 77595
77595: DISABLE
77596: LD_INT 0
77598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
77599: LD_ADDR_VAR 0 1
77603: PUSH
77604: LD_INT 22
77606: PUSH
77607: LD_OWVAR 2
77611: PUSH
77612: EMPTY
77613: LIST
77614: LIST
77615: PUSH
77616: LD_INT 30
77618: PUSH
77619: LD_INT 29
77621: PUSH
77622: EMPTY
77623: LIST
77624: LIST
77625: PUSH
77626: EMPTY
77627: LIST
77628: LIST
77629: PPUSH
77630: CALL_OW 69
77634: ST_TO_ADDR
// if not tmp then
77635: LD_VAR 0 1
77639: NOT
77640: IFFALSE 77644
// exit ;
77642: GO 77657
// DestroyUnit ( tmp [ 1 ] ) ;
77644: LD_VAR 0 1
77648: PUSH
77649: LD_INT 1
77651: ARRAY
77652: PPUSH
77653: CALL_OW 65
// end ;
77657: PPOPN 1
77659: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
77660: LD_EXP 65
77664: PUSH
77665: LD_EXP 103
77669: AND
77670: IFFALSE 77799
77672: GO 77674
77674: DISABLE
77675: LD_INT 0
77677: PPUSH
// begin uc_side := 0 ;
77678: LD_ADDR_OWVAR 20
77682: PUSH
77683: LD_INT 0
77685: ST_TO_ADDR
// uc_nation := nation_arabian ;
77686: LD_ADDR_OWVAR 21
77690: PUSH
77691: LD_INT 2
77693: ST_TO_ADDR
// hc_gallery :=  ;
77694: LD_ADDR_OWVAR 33
77698: PUSH
77699: LD_STRING 
77701: ST_TO_ADDR
// hc_name :=  ;
77702: LD_ADDR_OWVAR 26
77706: PUSH
77707: LD_STRING 
77709: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
77710: LD_INT 1
77712: PPUSH
77713: LD_INT 11
77715: PPUSH
77716: LD_INT 10
77718: PPUSH
77719: CALL_OW 380
// un := CreateHuman ;
77723: LD_ADDR_VAR 0 1
77727: PUSH
77728: CALL_OW 44
77732: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77733: LD_VAR 0 1
77737: PPUSH
77738: LD_INT 1
77740: PPUSH
77741: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
77745: LD_INT 35
77747: PPUSH
77748: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
77752: LD_VAR 0 1
77756: PPUSH
77757: LD_INT 22
77759: PUSH
77760: LD_OWVAR 2
77764: PUSH
77765: EMPTY
77766: LIST
77767: LIST
77768: PPUSH
77769: CALL_OW 69
77773: PPUSH
77774: LD_VAR 0 1
77778: PPUSH
77779: CALL_OW 74
77783: PPUSH
77784: CALL_OW 115
// until IsDead ( un ) ;
77788: LD_VAR 0 1
77792: PPUSH
77793: CALL_OW 301
77797: IFFALSE 77745
// end ;
77799: PPOPN 1
77801: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
77802: LD_EXP 65
77806: PUSH
77807: LD_EXP 105
77811: AND
77812: IFFALSE 77824
77814: GO 77816
77816: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
77817: LD_STRING earthquake(getX(game), 0, 32)
77819: PPUSH
77820: CALL_OW 559
77824: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
77825: LD_EXP 65
77829: PUSH
77830: LD_EXP 106
77834: AND
77835: IFFALSE 77926
77837: GO 77839
77839: DISABLE
77840: LD_INT 0
77842: PPUSH
// begin enable ;
77843: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
77844: LD_ADDR_VAR 0 1
77848: PUSH
77849: LD_INT 22
77851: PUSH
77852: LD_OWVAR 2
77856: PUSH
77857: EMPTY
77858: LIST
77859: LIST
77860: PUSH
77861: LD_INT 21
77863: PUSH
77864: LD_INT 2
77866: PUSH
77867: EMPTY
77868: LIST
77869: LIST
77870: PUSH
77871: LD_INT 33
77873: PUSH
77874: LD_INT 3
77876: PUSH
77877: EMPTY
77878: LIST
77879: LIST
77880: PUSH
77881: EMPTY
77882: LIST
77883: LIST
77884: LIST
77885: PPUSH
77886: CALL_OW 69
77890: ST_TO_ADDR
// if not tmp then
77891: LD_VAR 0 1
77895: NOT
77896: IFFALSE 77900
// exit ;
77898: GO 77926
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
77900: LD_VAR 0 1
77904: PUSH
77905: LD_INT 1
77907: PPUSH
77908: LD_VAR 0 1
77912: PPUSH
77913: CALL_OW 12
77917: ARRAY
77918: PPUSH
77919: LD_INT 1
77921: PPUSH
77922: CALL_OW 234
// end ;
77926: PPOPN 1
77928: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
77929: LD_EXP 65
77933: PUSH
77934: LD_EXP 107
77938: AND
77939: IFFALSE 78080
77941: GO 77943
77943: DISABLE
77944: LD_INT 0
77946: PPUSH
77947: PPUSH
77948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77949: LD_ADDR_VAR 0 3
77953: PUSH
77954: LD_INT 22
77956: PUSH
77957: LD_OWVAR 2
77961: PUSH
77962: EMPTY
77963: LIST
77964: LIST
77965: PUSH
77966: LD_INT 25
77968: PUSH
77969: LD_INT 1
77971: PUSH
77972: EMPTY
77973: LIST
77974: LIST
77975: PUSH
77976: EMPTY
77977: LIST
77978: LIST
77979: PPUSH
77980: CALL_OW 69
77984: ST_TO_ADDR
// if not tmp then
77985: LD_VAR 0 3
77989: NOT
77990: IFFALSE 77994
// exit ;
77992: GO 78080
// un := tmp [ rand ( 1 , tmp ) ] ;
77994: LD_ADDR_VAR 0 2
77998: PUSH
77999: LD_VAR 0 3
78003: PUSH
78004: LD_INT 1
78006: PPUSH
78007: LD_VAR 0 3
78011: PPUSH
78012: CALL_OW 12
78016: ARRAY
78017: ST_TO_ADDR
// if Crawls ( un ) then
78018: LD_VAR 0 2
78022: PPUSH
78023: CALL_OW 318
78027: IFFALSE 78038
// ComWalk ( un ) ;
78029: LD_VAR 0 2
78033: PPUSH
78034: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
78038: LD_VAR 0 2
78042: PPUSH
78043: LD_INT 9
78045: PPUSH
78046: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
78050: LD_INT 28
78052: PPUSH
78053: LD_OWVAR 2
78057: PPUSH
78058: LD_INT 2
78060: PPUSH
78061: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
78065: LD_INT 29
78067: PPUSH
78068: LD_OWVAR 2
78072: PPUSH
78073: LD_INT 2
78075: PPUSH
78076: CALL_OW 322
// end ;
78080: PPOPN 3
78082: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
78083: LD_EXP 65
78087: PUSH
78088: LD_EXP 108
78092: AND
78093: IFFALSE 78204
78095: GO 78097
78097: DISABLE
78098: LD_INT 0
78100: PPUSH
78101: PPUSH
78102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78103: LD_ADDR_VAR 0 3
78107: PUSH
78108: LD_INT 22
78110: PUSH
78111: LD_OWVAR 2
78115: PUSH
78116: EMPTY
78117: LIST
78118: LIST
78119: PUSH
78120: LD_INT 25
78122: PUSH
78123: LD_INT 1
78125: PUSH
78126: EMPTY
78127: LIST
78128: LIST
78129: PUSH
78130: EMPTY
78131: LIST
78132: LIST
78133: PPUSH
78134: CALL_OW 69
78138: ST_TO_ADDR
// if not tmp then
78139: LD_VAR 0 3
78143: NOT
78144: IFFALSE 78148
// exit ;
78146: GO 78204
// un := tmp [ rand ( 1 , tmp ) ] ;
78148: LD_ADDR_VAR 0 2
78152: PUSH
78153: LD_VAR 0 3
78157: PUSH
78158: LD_INT 1
78160: PPUSH
78161: LD_VAR 0 3
78165: PPUSH
78166: CALL_OW 12
78170: ARRAY
78171: ST_TO_ADDR
// if Crawls ( un ) then
78172: LD_VAR 0 2
78176: PPUSH
78177: CALL_OW 318
78181: IFFALSE 78192
// ComWalk ( un ) ;
78183: LD_VAR 0 2
78187: PPUSH
78188: CALL_OW 138
// SetClass ( un , class_mortar ) ;
78192: LD_VAR 0 2
78196: PPUSH
78197: LD_INT 8
78199: PPUSH
78200: CALL_OW 336
// end ;
78204: PPOPN 3
78206: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
78207: LD_EXP 65
78211: PUSH
78212: LD_EXP 109
78216: AND
78217: IFFALSE 78361
78219: GO 78221
78221: DISABLE
78222: LD_INT 0
78224: PPUSH
78225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
78226: LD_ADDR_VAR 0 2
78230: PUSH
78231: LD_INT 22
78233: PUSH
78234: LD_OWVAR 2
78238: PUSH
78239: EMPTY
78240: LIST
78241: LIST
78242: PUSH
78243: LD_INT 21
78245: PUSH
78246: LD_INT 2
78248: PUSH
78249: EMPTY
78250: LIST
78251: LIST
78252: PUSH
78253: LD_INT 2
78255: PUSH
78256: LD_INT 34
78258: PUSH
78259: LD_INT 12
78261: PUSH
78262: EMPTY
78263: LIST
78264: LIST
78265: PUSH
78266: LD_INT 34
78268: PUSH
78269: LD_INT 51
78271: PUSH
78272: EMPTY
78273: LIST
78274: LIST
78275: PUSH
78276: LD_INT 34
78278: PUSH
78279: LD_INT 32
78281: PUSH
78282: EMPTY
78283: LIST
78284: LIST
78285: PUSH
78286: EMPTY
78287: LIST
78288: LIST
78289: LIST
78290: LIST
78291: PUSH
78292: EMPTY
78293: LIST
78294: LIST
78295: LIST
78296: PPUSH
78297: CALL_OW 69
78301: ST_TO_ADDR
// if not tmp then
78302: LD_VAR 0 2
78306: NOT
78307: IFFALSE 78311
// exit ;
78309: GO 78361
// for i in tmp do
78311: LD_ADDR_VAR 0 1
78315: PUSH
78316: LD_VAR 0 2
78320: PUSH
78321: FOR_IN
78322: IFFALSE 78359
// if GetCargo ( i , mat_artifact ) = 0 then
78324: LD_VAR 0 1
78328: PPUSH
78329: LD_INT 4
78331: PPUSH
78332: CALL_OW 289
78336: PUSH
78337: LD_INT 0
78339: EQUAL
78340: IFFALSE 78357
// SetCargo ( i , mat_siberit , 100 ) ;
78342: LD_VAR 0 1
78346: PPUSH
78347: LD_INT 3
78349: PPUSH
78350: LD_INT 100
78352: PPUSH
78353: CALL_OW 290
78357: GO 78321
78359: POP
78360: POP
// end ;
78361: PPOPN 2
78363: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
78364: LD_EXP 65
78368: PUSH
78369: LD_EXP 110
78373: AND
78374: IFFALSE 78557
78376: GO 78378
78378: DISABLE
78379: LD_INT 0
78381: PPUSH
78382: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78383: LD_ADDR_VAR 0 2
78387: PUSH
78388: LD_INT 22
78390: PUSH
78391: LD_OWVAR 2
78395: PUSH
78396: EMPTY
78397: LIST
78398: LIST
78399: PPUSH
78400: CALL_OW 69
78404: ST_TO_ADDR
// if not tmp then
78405: LD_VAR 0 2
78409: NOT
78410: IFFALSE 78414
// exit ;
78412: GO 78557
// for i := 1 to 2 do
78414: LD_ADDR_VAR 0 1
78418: PUSH
78419: DOUBLE
78420: LD_INT 1
78422: DEC
78423: ST_TO_ADDR
78424: LD_INT 2
78426: PUSH
78427: FOR_TO
78428: IFFALSE 78555
// begin uc_side := your_side ;
78430: LD_ADDR_OWVAR 20
78434: PUSH
78435: LD_OWVAR 2
78439: ST_TO_ADDR
// uc_nation := nation_american ;
78440: LD_ADDR_OWVAR 21
78444: PUSH
78445: LD_INT 1
78447: ST_TO_ADDR
// vc_chassis := us_morphling ;
78448: LD_ADDR_OWVAR 37
78452: PUSH
78453: LD_INT 5
78455: ST_TO_ADDR
// vc_engine := engine_siberite ;
78456: LD_ADDR_OWVAR 39
78460: PUSH
78461: LD_INT 3
78463: ST_TO_ADDR
// vc_control := control_computer ;
78464: LD_ADDR_OWVAR 38
78468: PUSH
78469: LD_INT 3
78471: ST_TO_ADDR
// vc_weapon := us_double_laser ;
78472: LD_ADDR_OWVAR 40
78476: PUSH
78477: LD_INT 10
78479: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
78480: LD_VAR 0 2
78484: PUSH
78485: LD_INT 1
78487: ARRAY
78488: PPUSH
78489: CALL_OW 310
78493: NOT
78494: IFFALSE 78541
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
78496: CALL_OW 45
78500: PPUSH
78501: LD_VAR 0 2
78505: PUSH
78506: LD_INT 1
78508: ARRAY
78509: PPUSH
78510: CALL_OW 250
78514: PPUSH
78515: LD_VAR 0 2
78519: PUSH
78520: LD_INT 1
78522: ARRAY
78523: PPUSH
78524: CALL_OW 251
78528: PPUSH
78529: LD_INT 12
78531: PPUSH
78532: LD_INT 1
78534: PPUSH
78535: CALL_OW 50
78539: GO 78553
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
78541: CALL_OW 45
78545: PPUSH
78546: LD_INT 1
78548: PPUSH
78549: CALL_OW 51
// end ;
78553: GO 78427
78555: POP
78556: POP
// end ;
78557: PPOPN 2
78559: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
78560: LD_EXP 65
78564: PUSH
78565: LD_EXP 111
78569: AND
78570: IFFALSE 78792
78572: GO 78574
78574: DISABLE
78575: LD_INT 0
78577: PPUSH
78578: PPUSH
78579: PPUSH
78580: PPUSH
78581: PPUSH
78582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78583: LD_ADDR_VAR 0 6
78587: PUSH
78588: LD_INT 22
78590: PUSH
78591: LD_OWVAR 2
78595: PUSH
78596: EMPTY
78597: LIST
78598: LIST
78599: PUSH
78600: LD_INT 21
78602: PUSH
78603: LD_INT 1
78605: PUSH
78606: EMPTY
78607: LIST
78608: LIST
78609: PUSH
78610: LD_INT 3
78612: PUSH
78613: LD_INT 23
78615: PUSH
78616: LD_INT 0
78618: PUSH
78619: EMPTY
78620: LIST
78621: LIST
78622: PUSH
78623: EMPTY
78624: LIST
78625: LIST
78626: PUSH
78627: EMPTY
78628: LIST
78629: LIST
78630: LIST
78631: PPUSH
78632: CALL_OW 69
78636: ST_TO_ADDR
// if not tmp then
78637: LD_VAR 0 6
78641: NOT
78642: IFFALSE 78646
// exit ;
78644: GO 78792
// s1 := rand ( 1 , 4 ) ;
78646: LD_ADDR_VAR 0 2
78650: PUSH
78651: LD_INT 1
78653: PPUSH
78654: LD_INT 4
78656: PPUSH
78657: CALL_OW 12
78661: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
78662: LD_ADDR_VAR 0 4
78666: PUSH
78667: LD_VAR 0 6
78671: PUSH
78672: LD_INT 1
78674: ARRAY
78675: PPUSH
78676: LD_VAR 0 2
78680: PPUSH
78681: CALL_OW 259
78685: ST_TO_ADDR
// if s1 = 1 then
78686: LD_VAR 0 2
78690: PUSH
78691: LD_INT 1
78693: EQUAL
78694: IFFALSE 78714
// s2 := rand ( 2 , 4 ) else
78696: LD_ADDR_VAR 0 3
78700: PUSH
78701: LD_INT 2
78703: PPUSH
78704: LD_INT 4
78706: PPUSH
78707: CALL_OW 12
78711: ST_TO_ADDR
78712: GO 78722
// s2 := 1 ;
78714: LD_ADDR_VAR 0 3
78718: PUSH
78719: LD_INT 1
78721: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
78722: LD_ADDR_VAR 0 5
78726: PUSH
78727: LD_VAR 0 6
78731: PUSH
78732: LD_INT 1
78734: ARRAY
78735: PPUSH
78736: LD_VAR 0 3
78740: PPUSH
78741: CALL_OW 259
78745: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
78746: LD_VAR 0 6
78750: PUSH
78751: LD_INT 1
78753: ARRAY
78754: PPUSH
78755: LD_VAR 0 2
78759: PPUSH
78760: LD_VAR 0 5
78764: PPUSH
78765: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
78769: LD_VAR 0 6
78773: PUSH
78774: LD_INT 1
78776: ARRAY
78777: PPUSH
78778: LD_VAR 0 3
78782: PPUSH
78783: LD_VAR 0 4
78787: PPUSH
78788: CALL_OW 237
// end ;
78792: PPOPN 6
78794: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
78795: LD_EXP 65
78799: PUSH
78800: LD_EXP 112
78804: AND
78805: IFFALSE 78884
78807: GO 78809
78809: DISABLE
78810: LD_INT 0
78812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
78813: LD_ADDR_VAR 0 1
78817: PUSH
78818: LD_INT 22
78820: PUSH
78821: LD_OWVAR 2
78825: PUSH
78826: EMPTY
78827: LIST
78828: LIST
78829: PUSH
78830: LD_INT 30
78832: PUSH
78833: LD_INT 3
78835: PUSH
78836: EMPTY
78837: LIST
78838: LIST
78839: PUSH
78840: EMPTY
78841: LIST
78842: LIST
78843: PPUSH
78844: CALL_OW 69
78848: ST_TO_ADDR
// if not tmp then
78849: LD_VAR 0 1
78853: NOT
78854: IFFALSE 78858
// exit ;
78856: GO 78884
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
78858: LD_VAR 0 1
78862: PUSH
78863: LD_INT 1
78865: PPUSH
78866: LD_VAR 0 1
78870: PPUSH
78871: CALL_OW 12
78875: ARRAY
78876: PPUSH
78877: LD_INT 1
78879: PPUSH
78880: CALL_OW 234
// end ;
78884: PPOPN 1
78886: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
78887: LD_EXP 65
78891: PUSH
78892: LD_EXP 113
78896: AND
78897: IFFALSE 79009
78899: GO 78901
78901: DISABLE
78902: LD_INT 0
78904: PPUSH
78905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
78906: LD_ADDR_VAR 0 2
78910: PUSH
78911: LD_INT 22
78913: PUSH
78914: LD_OWVAR 2
78918: PUSH
78919: EMPTY
78920: LIST
78921: LIST
78922: PUSH
78923: LD_INT 2
78925: PUSH
78926: LD_INT 30
78928: PUSH
78929: LD_INT 27
78931: PUSH
78932: EMPTY
78933: LIST
78934: LIST
78935: PUSH
78936: LD_INT 30
78938: PUSH
78939: LD_INT 26
78941: PUSH
78942: EMPTY
78943: LIST
78944: LIST
78945: PUSH
78946: LD_INT 30
78948: PUSH
78949: LD_INT 28
78951: PUSH
78952: EMPTY
78953: LIST
78954: LIST
78955: PUSH
78956: EMPTY
78957: LIST
78958: LIST
78959: LIST
78960: LIST
78961: PUSH
78962: EMPTY
78963: LIST
78964: LIST
78965: PPUSH
78966: CALL_OW 69
78970: ST_TO_ADDR
// if not tmp then
78971: LD_VAR 0 2
78975: NOT
78976: IFFALSE 78980
// exit ;
78978: GO 79009
// for i in tmp do
78980: LD_ADDR_VAR 0 1
78984: PUSH
78985: LD_VAR 0 2
78989: PUSH
78990: FOR_IN
78991: IFFALSE 79007
// SetLives ( i , 1 ) ;
78993: LD_VAR 0 1
78997: PPUSH
78998: LD_INT 1
79000: PPUSH
79001: CALL_OW 234
79005: GO 78990
79007: POP
79008: POP
// end ;
79009: PPOPN 2
79011: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
79012: LD_EXP 65
79016: PUSH
79017: LD_EXP 114
79021: AND
79022: IFFALSE 79309
79024: GO 79026
79026: DISABLE
79027: LD_INT 0
79029: PPUSH
79030: PPUSH
79031: PPUSH
// begin i := rand ( 1 , 7 ) ;
79032: LD_ADDR_VAR 0 1
79036: PUSH
79037: LD_INT 1
79039: PPUSH
79040: LD_INT 7
79042: PPUSH
79043: CALL_OW 12
79047: ST_TO_ADDR
// case i of 1 :
79048: LD_VAR 0 1
79052: PUSH
79053: LD_INT 1
79055: DOUBLE
79056: EQUAL
79057: IFTRUE 79061
79059: GO 79071
79061: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
79062: LD_STRING earthquake(getX(game), 0, 32)
79064: PPUSH
79065: CALL_OW 559
79069: GO 79309
79071: LD_INT 2
79073: DOUBLE
79074: EQUAL
79075: IFTRUE 79079
79077: GO 79093
79079: POP
// begin ToLua ( displayStucuk(); ) ;
79080: LD_STRING displayStucuk();
79082: PPUSH
79083: CALL_OW 559
// ResetFog ;
79087: CALL_OW 335
// end ; 3 :
79091: GO 79309
79093: LD_INT 3
79095: DOUBLE
79096: EQUAL
79097: IFTRUE 79101
79099: GO 79205
79101: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79102: LD_ADDR_VAR 0 2
79106: PUSH
79107: LD_INT 22
79109: PUSH
79110: LD_OWVAR 2
79114: PUSH
79115: EMPTY
79116: LIST
79117: LIST
79118: PUSH
79119: LD_INT 25
79121: PUSH
79122: LD_INT 1
79124: PUSH
79125: EMPTY
79126: LIST
79127: LIST
79128: PUSH
79129: EMPTY
79130: LIST
79131: LIST
79132: PPUSH
79133: CALL_OW 69
79137: ST_TO_ADDR
// if not tmp then
79138: LD_VAR 0 2
79142: NOT
79143: IFFALSE 79147
// exit ;
79145: GO 79309
// un := tmp [ rand ( 1 , tmp ) ] ;
79147: LD_ADDR_VAR 0 3
79151: PUSH
79152: LD_VAR 0 2
79156: PUSH
79157: LD_INT 1
79159: PPUSH
79160: LD_VAR 0 2
79164: PPUSH
79165: CALL_OW 12
79169: ARRAY
79170: ST_TO_ADDR
// if Crawls ( un ) then
79171: LD_VAR 0 3
79175: PPUSH
79176: CALL_OW 318
79180: IFFALSE 79191
// ComWalk ( un ) ;
79182: LD_VAR 0 3
79186: PPUSH
79187: CALL_OW 138
// SetClass ( un , class_mortar ) ;
79191: LD_VAR 0 3
79195: PPUSH
79196: LD_INT 8
79198: PPUSH
79199: CALL_OW 336
// end ; 4 :
79203: GO 79309
79205: LD_INT 4
79207: DOUBLE
79208: EQUAL
79209: IFTRUE 79213
79211: GO 79287
79213: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
79214: LD_ADDR_VAR 0 2
79218: PUSH
79219: LD_INT 22
79221: PUSH
79222: LD_OWVAR 2
79226: PUSH
79227: EMPTY
79228: LIST
79229: LIST
79230: PUSH
79231: LD_INT 30
79233: PUSH
79234: LD_INT 29
79236: PUSH
79237: EMPTY
79238: LIST
79239: LIST
79240: PUSH
79241: EMPTY
79242: LIST
79243: LIST
79244: PPUSH
79245: CALL_OW 69
79249: ST_TO_ADDR
// if not tmp then
79250: LD_VAR 0 2
79254: NOT
79255: IFFALSE 79259
// exit ;
79257: GO 79309
// CenterNowOnUnits ( tmp [ 1 ] ) ;
79259: LD_VAR 0 2
79263: PUSH
79264: LD_INT 1
79266: ARRAY
79267: PPUSH
79268: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
79272: LD_VAR 0 2
79276: PUSH
79277: LD_INT 1
79279: ARRAY
79280: PPUSH
79281: CALL_OW 65
// end ; 5 .. 7 :
79285: GO 79309
79287: LD_INT 5
79289: DOUBLE
79290: GREATEREQUAL
79291: IFFALSE 79299
79293: LD_INT 7
79295: DOUBLE
79296: LESSEQUAL
79297: IFTRUE 79301
79299: GO 79308
79301: POP
// StreamSibBomb ; end ;
79302: CALL 75546 0 0
79306: GO 79309
79308: POP
// end ;
79309: PPOPN 3
79311: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
79312: LD_EXP 65
79316: PUSH
79317: LD_EXP 115
79321: AND
79322: IFFALSE 79478
79324: GO 79326
79326: DISABLE
79327: LD_INT 0
79329: PPUSH
79330: PPUSH
79331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
79332: LD_ADDR_VAR 0 2
79336: PUSH
79337: LD_INT 81
79339: PUSH
79340: LD_OWVAR 2
79344: PUSH
79345: EMPTY
79346: LIST
79347: LIST
79348: PUSH
79349: LD_INT 2
79351: PUSH
79352: LD_INT 21
79354: PUSH
79355: LD_INT 1
79357: PUSH
79358: EMPTY
79359: LIST
79360: LIST
79361: PUSH
79362: LD_INT 21
79364: PUSH
79365: LD_INT 2
79367: PUSH
79368: EMPTY
79369: LIST
79370: LIST
79371: PUSH
79372: EMPTY
79373: LIST
79374: LIST
79375: LIST
79376: PUSH
79377: EMPTY
79378: LIST
79379: LIST
79380: PPUSH
79381: CALL_OW 69
79385: ST_TO_ADDR
// if not tmp then
79386: LD_VAR 0 2
79390: NOT
79391: IFFALSE 79395
// exit ;
79393: GO 79478
// p := 0 ;
79395: LD_ADDR_VAR 0 3
79399: PUSH
79400: LD_INT 0
79402: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79403: LD_INT 35
79405: PPUSH
79406: CALL_OW 67
// p := p + 1 ;
79410: LD_ADDR_VAR 0 3
79414: PUSH
79415: LD_VAR 0 3
79419: PUSH
79420: LD_INT 1
79422: PLUS
79423: ST_TO_ADDR
// for i in tmp do
79424: LD_ADDR_VAR 0 1
79428: PUSH
79429: LD_VAR 0 2
79433: PUSH
79434: FOR_IN
79435: IFFALSE 79466
// if GetLives ( i ) < 1000 then
79437: LD_VAR 0 1
79441: PPUSH
79442: CALL_OW 256
79446: PUSH
79447: LD_INT 1000
79449: LESS
79450: IFFALSE 79464
// SetLives ( i , 1000 ) ;
79452: LD_VAR 0 1
79456: PPUSH
79457: LD_INT 1000
79459: PPUSH
79460: CALL_OW 234
79464: GO 79434
79466: POP
79467: POP
// until p > 20 ;
79468: LD_VAR 0 3
79472: PUSH
79473: LD_INT 20
79475: GREATER
79476: IFFALSE 79403
// end ;
79478: PPOPN 3
79480: END
// every 0 0$1 trigger StreamModeActive and sTime do
79481: LD_EXP 65
79485: PUSH
79486: LD_EXP 116
79490: AND
79491: IFFALSE 79526
79493: GO 79495
79495: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
79496: LD_INT 28
79498: PPUSH
79499: LD_OWVAR 2
79503: PPUSH
79504: LD_INT 2
79506: PPUSH
79507: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
79511: LD_INT 30
79513: PPUSH
79514: LD_OWVAR 2
79518: PPUSH
79519: LD_INT 2
79521: PPUSH
79522: CALL_OW 322
// end ;
79526: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
79527: LD_EXP 65
79531: PUSH
79532: LD_EXP 117
79536: AND
79537: IFFALSE 79658
79539: GO 79541
79541: DISABLE
79542: LD_INT 0
79544: PPUSH
79545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79546: LD_ADDR_VAR 0 2
79550: PUSH
79551: LD_INT 22
79553: PUSH
79554: LD_OWVAR 2
79558: PUSH
79559: EMPTY
79560: LIST
79561: LIST
79562: PUSH
79563: LD_INT 21
79565: PUSH
79566: LD_INT 1
79568: PUSH
79569: EMPTY
79570: LIST
79571: LIST
79572: PUSH
79573: LD_INT 3
79575: PUSH
79576: LD_INT 23
79578: PUSH
79579: LD_INT 0
79581: PUSH
79582: EMPTY
79583: LIST
79584: LIST
79585: PUSH
79586: EMPTY
79587: LIST
79588: LIST
79589: PUSH
79590: EMPTY
79591: LIST
79592: LIST
79593: LIST
79594: PPUSH
79595: CALL_OW 69
79599: ST_TO_ADDR
// if not tmp then
79600: LD_VAR 0 2
79604: NOT
79605: IFFALSE 79609
// exit ;
79607: GO 79658
// for i in tmp do
79609: LD_ADDR_VAR 0 1
79613: PUSH
79614: LD_VAR 0 2
79618: PUSH
79619: FOR_IN
79620: IFFALSE 79656
// begin if Crawls ( i ) then
79622: LD_VAR 0 1
79626: PPUSH
79627: CALL_OW 318
79631: IFFALSE 79642
// ComWalk ( i ) ;
79633: LD_VAR 0 1
79637: PPUSH
79638: CALL_OW 138
// SetClass ( i , 2 ) ;
79642: LD_VAR 0 1
79646: PPUSH
79647: LD_INT 2
79649: PPUSH
79650: CALL_OW 336
// end ;
79654: GO 79619
79656: POP
79657: POP
// end ;
79658: PPOPN 2
79660: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
79661: LD_EXP 65
79665: PUSH
79666: LD_EXP 118
79670: AND
79671: IFFALSE 79959
79673: GO 79675
79675: DISABLE
79676: LD_INT 0
79678: PPUSH
79679: PPUSH
79680: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
79681: LD_OWVAR 2
79685: PPUSH
79686: LD_INT 9
79688: PPUSH
79689: LD_INT 1
79691: PPUSH
79692: LD_INT 1
79694: PPUSH
79695: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
79699: LD_INT 9
79701: PPUSH
79702: LD_OWVAR 2
79706: PPUSH
79707: CALL_OW 343
// uc_side := 9 ;
79711: LD_ADDR_OWVAR 20
79715: PUSH
79716: LD_INT 9
79718: ST_TO_ADDR
// uc_nation := 2 ;
79719: LD_ADDR_OWVAR 21
79723: PUSH
79724: LD_INT 2
79726: ST_TO_ADDR
// hc_name := Dark Warrior ;
79727: LD_ADDR_OWVAR 26
79731: PUSH
79732: LD_STRING Dark Warrior
79734: ST_TO_ADDR
// hc_gallery :=  ;
79735: LD_ADDR_OWVAR 33
79739: PUSH
79740: LD_STRING 
79742: ST_TO_ADDR
// hc_noskilllimit := true ;
79743: LD_ADDR_OWVAR 76
79747: PUSH
79748: LD_INT 1
79750: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
79751: LD_ADDR_OWVAR 31
79755: PUSH
79756: LD_INT 30
79758: PUSH
79759: LD_INT 30
79761: PUSH
79762: LD_INT 30
79764: PUSH
79765: LD_INT 30
79767: PUSH
79768: EMPTY
79769: LIST
79770: LIST
79771: LIST
79772: LIST
79773: ST_TO_ADDR
// un := CreateHuman ;
79774: LD_ADDR_VAR 0 3
79778: PUSH
79779: CALL_OW 44
79783: ST_TO_ADDR
// hc_noskilllimit := false ;
79784: LD_ADDR_OWVAR 76
79788: PUSH
79789: LD_INT 0
79791: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79792: LD_VAR 0 3
79796: PPUSH
79797: LD_INT 1
79799: PPUSH
79800: CALL_OW 51
// ToLua ( playRanger() ) ;
79804: LD_STRING playRanger()
79806: PPUSH
79807: CALL_OW 559
// p := 0 ;
79811: LD_ADDR_VAR 0 2
79815: PUSH
79816: LD_INT 0
79818: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79819: LD_INT 35
79821: PPUSH
79822: CALL_OW 67
// p := p + 1 ;
79826: LD_ADDR_VAR 0 2
79830: PUSH
79831: LD_VAR 0 2
79835: PUSH
79836: LD_INT 1
79838: PLUS
79839: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
79840: LD_VAR 0 3
79844: PPUSH
79845: CALL_OW 256
79849: PUSH
79850: LD_INT 1000
79852: LESS
79853: IFFALSE 79867
// SetLives ( un , 1000 ) ;
79855: LD_VAR 0 3
79859: PPUSH
79860: LD_INT 1000
79862: PPUSH
79863: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
79867: LD_VAR 0 3
79871: PPUSH
79872: LD_INT 81
79874: PUSH
79875: LD_OWVAR 2
79879: PUSH
79880: EMPTY
79881: LIST
79882: LIST
79883: PUSH
79884: LD_INT 91
79886: PUSH
79887: LD_VAR 0 3
79891: PUSH
79892: LD_INT 30
79894: PUSH
79895: EMPTY
79896: LIST
79897: LIST
79898: LIST
79899: PUSH
79900: EMPTY
79901: LIST
79902: LIST
79903: PPUSH
79904: CALL_OW 69
79908: PPUSH
79909: LD_VAR 0 3
79913: PPUSH
79914: CALL_OW 74
79918: PPUSH
79919: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
79923: LD_VAR 0 2
79927: PUSH
79928: LD_INT 80
79930: GREATER
79931: PUSH
79932: LD_VAR 0 3
79936: PPUSH
79937: CALL_OW 301
79941: OR
79942: IFFALSE 79819
// if un then
79944: LD_VAR 0 3
79948: IFFALSE 79959
// RemoveUnit ( un ) ;
79950: LD_VAR 0 3
79954: PPUSH
79955: CALL_OW 64
// end ;
79959: PPOPN 3
79961: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
79962: LD_EXP 119
79966: IFFALSE 80082
79968: GO 79970
79970: DISABLE
79971: LD_INT 0
79973: PPUSH
79974: PPUSH
79975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
79976: LD_ADDR_VAR 0 2
79980: PUSH
79981: LD_INT 81
79983: PUSH
79984: LD_OWVAR 2
79988: PUSH
79989: EMPTY
79990: LIST
79991: LIST
79992: PUSH
79993: LD_INT 21
79995: PUSH
79996: LD_INT 1
79998: PUSH
79999: EMPTY
80000: LIST
80001: LIST
80002: PUSH
80003: EMPTY
80004: LIST
80005: LIST
80006: PPUSH
80007: CALL_OW 69
80011: ST_TO_ADDR
// ToLua ( playComputer() ) ;
80012: LD_STRING playComputer()
80014: PPUSH
80015: CALL_OW 559
// if not tmp then
80019: LD_VAR 0 2
80023: NOT
80024: IFFALSE 80028
// exit ;
80026: GO 80082
// for i in tmp do
80028: LD_ADDR_VAR 0 1
80032: PUSH
80033: LD_VAR 0 2
80037: PUSH
80038: FOR_IN
80039: IFFALSE 80080
// for j := 1 to 4 do
80041: LD_ADDR_VAR 0 3
80045: PUSH
80046: DOUBLE
80047: LD_INT 1
80049: DEC
80050: ST_TO_ADDR
80051: LD_INT 4
80053: PUSH
80054: FOR_TO
80055: IFFALSE 80076
// SetSkill ( i , j , 10 ) ;
80057: LD_VAR 0 1
80061: PPUSH
80062: LD_VAR 0 3
80066: PPUSH
80067: LD_INT 10
80069: PPUSH
80070: CALL_OW 237
80074: GO 80054
80076: POP
80077: POP
80078: GO 80038
80080: POP
80081: POP
// end ;
80082: PPOPN 3
80084: END
// every 0 0$1 trigger s30 do var i , tmp ;
80085: LD_EXP 120
80089: IFFALSE 80158
80091: GO 80093
80093: DISABLE
80094: LD_INT 0
80096: PPUSH
80097: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80098: LD_ADDR_VAR 0 2
80102: PUSH
80103: LD_INT 22
80105: PUSH
80106: LD_OWVAR 2
80110: PUSH
80111: EMPTY
80112: LIST
80113: LIST
80114: PPUSH
80115: CALL_OW 69
80119: ST_TO_ADDR
// if not tmp then
80120: LD_VAR 0 2
80124: NOT
80125: IFFALSE 80129
// exit ;
80127: GO 80158
// for i in tmp do
80129: LD_ADDR_VAR 0 1
80133: PUSH
80134: LD_VAR 0 2
80138: PUSH
80139: FOR_IN
80140: IFFALSE 80156
// SetLives ( i , 300 ) ;
80142: LD_VAR 0 1
80146: PPUSH
80147: LD_INT 300
80149: PPUSH
80150: CALL_OW 234
80154: GO 80139
80156: POP
80157: POP
// end ;
80158: PPOPN 2
80160: END
// every 0 0$1 trigger s60 do var i , tmp ;
80161: LD_EXP 121
80165: IFFALSE 80234
80167: GO 80169
80169: DISABLE
80170: LD_INT 0
80172: PPUSH
80173: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80174: LD_ADDR_VAR 0 2
80178: PUSH
80179: LD_INT 22
80181: PUSH
80182: LD_OWVAR 2
80186: PUSH
80187: EMPTY
80188: LIST
80189: LIST
80190: PPUSH
80191: CALL_OW 69
80195: ST_TO_ADDR
// if not tmp then
80196: LD_VAR 0 2
80200: NOT
80201: IFFALSE 80205
// exit ;
80203: GO 80234
// for i in tmp do
80205: LD_ADDR_VAR 0 1
80209: PUSH
80210: LD_VAR 0 2
80214: PUSH
80215: FOR_IN
80216: IFFALSE 80232
// SetLives ( i , 600 ) ;
80218: LD_VAR 0 1
80222: PPUSH
80223: LD_INT 600
80225: PPUSH
80226: CALL_OW 234
80230: GO 80215
80232: POP
80233: POP
// end ;
80234: PPOPN 2
80236: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
80237: LD_INT 0
80239: PPUSH
// case cmd of 301 :
80240: LD_VAR 0 1
80244: PUSH
80245: LD_INT 301
80247: DOUBLE
80248: EQUAL
80249: IFTRUE 80253
80251: GO 80285
80253: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
80254: LD_VAR 0 6
80258: PPUSH
80259: LD_VAR 0 7
80263: PPUSH
80264: LD_VAR 0 8
80268: PPUSH
80269: LD_VAR 0 4
80273: PPUSH
80274: LD_VAR 0 5
80278: PPUSH
80279: CALL 81486 0 5
80283: GO 80406
80285: LD_INT 302
80287: DOUBLE
80288: EQUAL
80289: IFTRUE 80293
80291: GO 80330
80293: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
80294: LD_VAR 0 6
80298: PPUSH
80299: LD_VAR 0 7
80303: PPUSH
80304: LD_VAR 0 8
80308: PPUSH
80309: LD_VAR 0 9
80313: PPUSH
80314: LD_VAR 0 4
80318: PPUSH
80319: LD_VAR 0 5
80323: PPUSH
80324: CALL 81577 0 6
80328: GO 80406
80330: LD_INT 303
80332: DOUBLE
80333: EQUAL
80334: IFTRUE 80338
80336: GO 80375
80338: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
80339: LD_VAR 0 6
80343: PPUSH
80344: LD_VAR 0 7
80348: PPUSH
80349: LD_VAR 0 8
80353: PPUSH
80354: LD_VAR 0 9
80358: PPUSH
80359: LD_VAR 0 4
80363: PPUSH
80364: LD_VAR 0 5
80368: PPUSH
80369: CALL 80411 0 6
80373: GO 80406
80375: LD_INT 304
80377: DOUBLE
80378: EQUAL
80379: IFTRUE 80383
80381: GO 80405
80383: POP
// hHackTeleport ( unit , x , y ) ; end ;
80384: LD_VAR 0 2
80388: PPUSH
80389: LD_VAR 0 4
80393: PPUSH
80394: LD_VAR 0 5
80398: PPUSH
80399: CALL 82170 0 3
80403: GO 80406
80405: POP
// end ;
80406: LD_VAR 0 12
80410: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
80411: LD_INT 0
80413: PPUSH
80414: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
80415: LD_VAR 0 1
80419: PUSH
80420: LD_INT 1
80422: LESS
80423: PUSH
80424: LD_VAR 0 1
80428: PUSH
80429: LD_INT 3
80431: GREATER
80432: OR
80433: PUSH
80434: LD_VAR 0 5
80438: PPUSH
80439: LD_VAR 0 6
80443: PPUSH
80444: CALL_OW 428
80448: OR
80449: IFFALSE 80453
// exit ;
80451: GO 81173
// uc_side := your_side ;
80453: LD_ADDR_OWVAR 20
80457: PUSH
80458: LD_OWVAR 2
80462: ST_TO_ADDR
// uc_nation := nation ;
80463: LD_ADDR_OWVAR 21
80467: PUSH
80468: LD_VAR 0 1
80472: ST_TO_ADDR
// bc_level = 1 ;
80473: LD_ADDR_OWVAR 43
80477: PUSH
80478: LD_INT 1
80480: ST_TO_ADDR
// case btype of 1 :
80481: LD_VAR 0 2
80485: PUSH
80486: LD_INT 1
80488: DOUBLE
80489: EQUAL
80490: IFTRUE 80494
80492: GO 80505
80494: POP
// bc_type := b_depot ; 2 :
80495: LD_ADDR_OWVAR 42
80499: PUSH
80500: LD_INT 0
80502: ST_TO_ADDR
80503: GO 81117
80505: LD_INT 2
80507: DOUBLE
80508: EQUAL
80509: IFTRUE 80513
80511: GO 80524
80513: POP
// bc_type := b_warehouse ; 3 :
80514: LD_ADDR_OWVAR 42
80518: PUSH
80519: LD_INT 1
80521: ST_TO_ADDR
80522: GO 81117
80524: LD_INT 3
80526: DOUBLE
80527: EQUAL
80528: IFTRUE 80532
80530: GO 80543
80532: POP
// bc_type := b_lab ; 4 .. 9 :
80533: LD_ADDR_OWVAR 42
80537: PUSH
80538: LD_INT 6
80540: ST_TO_ADDR
80541: GO 81117
80543: LD_INT 4
80545: DOUBLE
80546: GREATEREQUAL
80547: IFFALSE 80555
80549: LD_INT 9
80551: DOUBLE
80552: LESSEQUAL
80553: IFTRUE 80557
80555: GO 80609
80557: POP
// begin bc_type := b_lab_half ;
80558: LD_ADDR_OWVAR 42
80562: PUSH
80563: LD_INT 7
80565: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
80566: LD_ADDR_OWVAR 44
80570: PUSH
80571: LD_INT 10
80573: PUSH
80574: LD_INT 11
80576: PUSH
80577: LD_INT 12
80579: PUSH
80580: LD_INT 15
80582: PUSH
80583: LD_INT 14
80585: PUSH
80586: LD_INT 13
80588: PUSH
80589: EMPTY
80590: LIST
80591: LIST
80592: LIST
80593: LIST
80594: LIST
80595: LIST
80596: PUSH
80597: LD_VAR 0 2
80601: PUSH
80602: LD_INT 3
80604: MINUS
80605: ARRAY
80606: ST_TO_ADDR
// end ; 10 .. 13 :
80607: GO 81117
80609: LD_INT 10
80611: DOUBLE
80612: GREATEREQUAL
80613: IFFALSE 80621
80615: LD_INT 13
80617: DOUBLE
80618: LESSEQUAL
80619: IFTRUE 80623
80621: GO 80700
80623: POP
// begin bc_type := b_lab_full ;
80624: LD_ADDR_OWVAR 42
80628: PUSH
80629: LD_INT 8
80631: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
80632: LD_ADDR_OWVAR 44
80636: PUSH
80637: LD_INT 10
80639: PUSH
80640: LD_INT 12
80642: PUSH
80643: LD_INT 14
80645: PUSH
80646: LD_INT 13
80648: PUSH
80649: EMPTY
80650: LIST
80651: LIST
80652: LIST
80653: LIST
80654: PUSH
80655: LD_VAR 0 2
80659: PUSH
80660: LD_INT 9
80662: MINUS
80663: ARRAY
80664: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
80665: LD_ADDR_OWVAR 45
80669: PUSH
80670: LD_INT 11
80672: PUSH
80673: LD_INT 15
80675: PUSH
80676: LD_INT 12
80678: PUSH
80679: LD_INT 15
80681: PUSH
80682: EMPTY
80683: LIST
80684: LIST
80685: LIST
80686: LIST
80687: PUSH
80688: LD_VAR 0 2
80692: PUSH
80693: LD_INT 9
80695: MINUS
80696: ARRAY
80697: ST_TO_ADDR
// end ; 14 :
80698: GO 81117
80700: LD_INT 14
80702: DOUBLE
80703: EQUAL
80704: IFTRUE 80708
80706: GO 80719
80708: POP
// bc_type := b_workshop ; 15 :
80709: LD_ADDR_OWVAR 42
80713: PUSH
80714: LD_INT 2
80716: ST_TO_ADDR
80717: GO 81117
80719: LD_INT 15
80721: DOUBLE
80722: EQUAL
80723: IFTRUE 80727
80725: GO 80738
80727: POP
// bc_type := b_factory ; 16 :
80728: LD_ADDR_OWVAR 42
80732: PUSH
80733: LD_INT 3
80735: ST_TO_ADDR
80736: GO 81117
80738: LD_INT 16
80740: DOUBLE
80741: EQUAL
80742: IFTRUE 80746
80744: GO 80757
80746: POP
// bc_type := b_ext_gun ; 17 :
80747: LD_ADDR_OWVAR 42
80751: PUSH
80752: LD_INT 17
80754: ST_TO_ADDR
80755: GO 81117
80757: LD_INT 17
80759: DOUBLE
80760: EQUAL
80761: IFTRUE 80765
80763: GO 80793
80765: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
80766: LD_ADDR_OWVAR 42
80770: PUSH
80771: LD_INT 19
80773: PUSH
80774: LD_INT 23
80776: PUSH
80777: LD_INT 19
80779: PUSH
80780: EMPTY
80781: LIST
80782: LIST
80783: LIST
80784: PUSH
80785: LD_VAR 0 1
80789: ARRAY
80790: ST_TO_ADDR
80791: GO 81117
80793: LD_INT 18
80795: DOUBLE
80796: EQUAL
80797: IFTRUE 80801
80799: GO 80812
80801: POP
// bc_type := b_ext_radar ; 19 :
80802: LD_ADDR_OWVAR 42
80806: PUSH
80807: LD_INT 20
80809: ST_TO_ADDR
80810: GO 81117
80812: LD_INT 19
80814: DOUBLE
80815: EQUAL
80816: IFTRUE 80820
80818: GO 80831
80820: POP
// bc_type := b_ext_radio ; 20 :
80821: LD_ADDR_OWVAR 42
80825: PUSH
80826: LD_INT 22
80828: ST_TO_ADDR
80829: GO 81117
80831: LD_INT 20
80833: DOUBLE
80834: EQUAL
80835: IFTRUE 80839
80837: GO 80850
80839: POP
// bc_type := b_ext_siberium ; 21 :
80840: LD_ADDR_OWVAR 42
80844: PUSH
80845: LD_INT 21
80847: ST_TO_ADDR
80848: GO 81117
80850: LD_INT 21
80852: DOUBLE
80853: EQUAL
80854: IFTRUE 80858
80856: GO 80869
80858: POP
// bc_type := b_ext_computer ; 22 :
80859: LD_ADDR_OWVAR 42
80863: PUSH
80864: LD_INT 24
80866: ST_TO_ADDR
80867: GO 81117
80869: LD_INT 22
80871: DOUBLE
80872: EQUAL
80873: IFTRUE 80877
80875: GO 80888
80877: POP
// bc_type := b_ext_track ; 23 :
80878: LD_ADDR_OWVAR 42
80882: PUSH
80883: LD_INT 16
80885: ST_TO_ADDR
80886: GO 81117
80888: LD_INT 23
80890: DOUBLE
80891: EQUAL
80892: IFTRUE 80896
80894: GO 80907
80896: POP
// bc_type := b_ext_laser ; 24 :
80897: LD_ADDR_OWVAR 42
80901: PUSH
80902: LD_INT 25
80904: ST_TO_ADDR
80905: GO 81117
80907: LD_INT 24
80909: DOUBLE
80910: EQUAL
80911: IFTRUE 80915
80913: GO 80926
80915: POP
// bc_type := b_control_tower ; 25 :
80916: LD_ADDR_OWVAR 42
80920: PUSH
80921: LD_INT 36
80923: ST_TO_ADDR
80924: GO 81117
80926: LD_INT 25
80928: DOUBLE
80929: EQUAL
80930: IFTRUE 80934
80932: GO 80945
80934: POP
// bc_type := b_breastwork ; 26 :
80935: LD_ADDR_OWVAR 42
80939: PUSH
80940: LD_INT 31
80942: ST_TO_ADDR
80943: GO 81117
80945: LD_INT 26
80947: DOUBLE
80948: EQUAL
80949: IFTRUE 80953
80951: GO 80964
80953: POP
// bc_type := b_bunker ; 27 :
80954: LD_ADDR_OWVAR 42
80958: PUSH
80959: LD_INT 32
80961: ST_TO_ADDR
80962: GO 81117
80964: LD_INT 27
80966: DOUBLE
80967: EQUAL
80968: IFTRUE 80972
80970: GO 80983
80972: POP
// bc_type := b_turret ; 28 :
80973: LD_ADDR_OWVAR 42
80977: PUSH
80978: LD_INT 33
80980: ST_TO_ADDR
80981: GO 81117
80983: LD_INT 28
80985: DOUBLE
80986: EQUAL
80987: IFTRUE 80991
80989: GO 81002
80991: POP
// bc_type := b_armoury ; 29 :
80992: LD_ADDR_OWVAR 42
80996: PUSH
80997: LD_INT 4
80999: ST_TO_ADDR
81000: GO 81117
81002: LD_INT 29
81004: DOUBLE
81005: EQUAL
81006: IFTRUE 81010
81008: GO 81021
81010: POP
// bc_type := b_barracks ; 30 :
81011: LD_ADDR_OWVAR 42
81015: PUSH
81016: LD_INT 5
81018: ST_TO_ADDR
81019: GO 81117
81021: LD_INT 30
81023: DOUBLE
81024: EQUAL
81025: IFTRUE 81029
81027: GO 81040
81029: POP
// bc_type := b_solar_power ; 31 :
81030: LD_ADDR_OWVAR 42
81034: PUSH
81035: LD_INT 27
81037: ST_TO_ADDR
81038: GO 81117
81040: LD_INT 31
81042: DOUBLE
81043: EQUAL
81044: IFTRUE 81048
81046: GO 81059
81048: POP
// bc_type := b_oil_power ; 32 :
81049: LD_ADDR_OWVAR 42
81053: PUSH
81054: LD_INT 26
81056: ST_TO_ADDR
81057: GO 81117
81059: LD_INT 32
81061: DOUBLE
81062: EQUAL
81063: IFTRUE 81067
81065: GO 81078
81067: POP
// bc_type := b_siberite_power ; 33 :
81068: LD_ADDR_OWVAR 42
81072: PUSH
81073: LD_INT 28
81075: ST_TO_ADDR
81076: GO 81117
81078: LD_INT 33
81080: DOUBLE
81081: EQUAL
81082: IFTRUE 81086
81084: GO 81097
81086: POP
// bc_type := b_oil_mine ; 34 :
81087: LD_ADDR_OWVAR 42
81091: PUSH
81092: LD_INT 29
81094: ST_TO_ADDR
81095: GO 81117
81097: LD_INT 34
81099: DOUBLE
81100: EQUAL
81101: IFTRUE 81105
81103: GO 81116
81105: POP
// bc_type := b_siberite_mine ; end ;
81106: LD_ADDR_OWVAR 42
81110: PUSH
81111: LD_INT 30
81113: ST_TO_ADDR
81114: GO 81117
81116: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
81117: LD_ADDR_VAR 0 8
81121: PUSH
81122: LD_VAR 0 5
81126: PPUSH
81127: LD_VAR 0 6
81131: PPUSH
81132: LD_VAR 0 3
81136: PPUSH
81137: CALL_OW 47
81141: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
81142: LD_OWVAR 42
81146: PUSH
81147: LD_INT 32
81149: PUSH
81150: LD_INT 33
81152: PUSH
81153: EMPTY
81154: LIST
81155: LIST
81156: IN
81157: IFFALSE 81173
// PlaceWeaponTurret ( b , weapon ) ;
81159: LD_VAR 0 8
81163: PPUSH
81164: LD_VAR 0 4
81168: PPUSH
81169: CALL_OW 431
// end ;
81173: LD_VAR 0 7
81177: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
81178: LD_INT 0
81180: PPUSH
81181: PPUSH
81182: PPUSH
81183: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81184: LD_ADDR_VAR 0 4
81188: PUSH
81189: LD_INT 22
81191: PUSH
81192: LD_OWVAR 2
81196: PUSH
81197: EMPTY
81198: LIST
81199: LIST
81200: PUSH
81201: LD_INT 2
81203: PUSH
81204: LD_INT 30
81206: PUSH
81207: LD_INT 0
81209: PUSH
81210: EMPTY
81211: LIST
81212: LIST
81213: PUSH
81214: LD_INT 30
81216: PUSH
81217: LD_INT 1
81219: PUSH
81220: EMPTY
81221: LIST
81222: LIST
81223: PUSH
81224: EMPTY
81225: LIST
81226: LIST
81227: LIST
81228: PUSH
81229: EMPTY
81230: LIST
81231: LIST
81232: PPUSH
81233: CALL_OW 69
81237: ST_TO_ADDR
// if not tmp then
81238: LD_VAR 0 4
81242: NOT
81243: IFFALSE 81247
// exit ;
81245: GO 81306
// for i in tmp do
81247: LD_ADDR_VAR 0 2
81251: PUSH
81252: LD_VAR 0 4
81256: PUSH
81257: FOR_IN
81258: IFFALSE 81304
// for j = 1 to 3 do
81260: LD_ADDR_VAR 0 3
81264: PUSH
81265: DOUBLE
81266: LD_INT 1
81268: DEC
81269: ST_TO_ADDR
81270: LD_INT 3
81272: PUSH
81273: FOR_TO
81274: IFFALSE 81300
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
81276: LD_VAR 0 2
81280: PPUSH
81281: CALL_OW 274
81285: PPUSH
81286: LD_VAR 0 3
81290: PPUSH
81291: LD_INT 99999
81293: PPUSH
81294: CALL_OW 277
81298: GO 81273
81300: POP
81301: POP
81302: GO 81257
81304: POP
81305: POP
// end ;
81306: LD_VAR 0 1
81310: RET
// export function hHackSetLevel10 ; var i , j ; begin
81311: LD_INT 0
81313: PPUSH
81314: PPUSH
81315: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
81316: LD_ADDR_VAR 0 2
81320: PUSH
81321: LD_INT 21
81323: PUSH
81324: LD_INT 1
81326: PUSH
81327: EMPTY
81328: LIST
81329: LIST
81330: PPUSH
81331: CALL_OW 69
81335: PUSH
81336: FOR_IN
81337: IFFALSE 81389
// if IsSelected ( i ) then
81339: LD_VAR 0 2
81343: PPUSH
81344: CALL_OW 306
81348: IFFALSE 81387
// begin for j := 1 to 4 do
81350: LD_ADDR_VAR 0 3
81354: PUSH
81355: DOUBLE
81356: LD_INT 1
81358: DEC
81359: ST_TO_ADDR
81360: LD_INT 4
81362: PUSH
81363: FOR_TO
81364: IFFALSE 81385
// SetSkill ( i , j , 10 ) ;
81366: LD_VAR 0 2
81370: PPUSH
81371: LD_VAR 0 3
81375: PPUSH
81376: LD_INT 10
81378: PPUSH
81379: CALL_OW 237
81383: GO 81363
81385: POP
81386: POP
// end ;
81387: GO 81336
81389: POP
81390: POP
// end ;
81391: LD_VAR 0 1
81395: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
81396: LD_INT 0
81398: PPUSH
81399: PPUSH
81400: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
81401: LD_ADDR_VAR 0 2
81405: PUSH
81406: LD_INT 22
81408: PUSH
81409: LD_OWVAR 2
81413: PUSH
81414: EMPTY
81415: LIST
81416: LIST
81417: PUSH
81418: LD_INT 21
81420: PUSH
81421: LD_INT 1
81423: PUSH
81424: EMPTY
81425: LIST
81426: LIST
81427: PUSH
81428: EMPTY
81429: LIST
81430: LIST
81431: PPUSH
81432: CALL_OW 69
81436: PUSH
81437: FOR_IN
81438: IFFALSE 81479
// begin for j := 1 to 4 do
81440: LD_ADDR_VAR 0 3
81444: PUSH
81445: DOUBLE
81446: LD_INT 1
81448: DEC
81449: ST_TO_ADDR
81450: LD_INT 4
81452: PUSH
81453: FOR_TO
81454: IFFALSE 81475
// SetSkill ( i , j , 10 ) ;
81456: LD_VAR 0 2
81460: PPUSH
81461: LD_VAR 0 3
81465: PPUSH
81466: LD_INT 10
81468: PPUSH
81469: CALL_OW 237
81473: GO 81453
81475: POP
81476: POP
// end ;
81477: GO 81437
81479: POP
81480: POP
// end ;
81481: LD_VAR 0 1
81485: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
81486: LD_INT 0
81488: PPUSH
// uc_side := your_side ;
81489: LD_ADDR_OWVAR 20
81493: PUSH
81494: LD_OWVAR 2
81498: ST_TO_ADDR
// uc_nation := nation ;
81499: LD_ADDR_OWVAR 21
81503: PUSH
81504: LD_VAR 0 1
81508: ST_TO_ADDR
// InitHc ;
81509: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
81513: LD_INT 0
81515: PPUSH
81516: LD_VAR 0 2
81520: PPUSH
81521: LD_VAR 0 3
81525: PPUSH
81526: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
81530: LD_VAR 0 4
81534: PPUSH
81535: LD_VAR 0 5
81539: PPUSH
81540: CALL_OW 428
81544: PUSH
81545: LD_INT 0
81547: EQUAL
81548: IFFALSE 81572
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
81550: CALL_OW 44
81554: PPUSH
81555: LD_VAR 0 4
81559: PPUSH
81560: LD_VAR 0 5
81564: PPUSH
81565: LD_INT 1
81567: PPUSH
81568: CALL_OW 48
// end ;
81572: LD_VAR 0 6
81576: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
81577: LD_INT 0
81579: PPUSH
81580: PPUSH
// uc_side := your_side ;
81581: LD_ADDR_OWVAR 20
81585: PUSH
81586: LD_OWVAR 2
81590: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
81591: LD_VAR 0 1
81595: PUSH
81596: LD_INT 1
81598: PUSH
81599: LD_INT 2
81601: PUSH
81602: LD_INT 3
81604: PUSH
81605: LD_INT 4
81607: PUSH
81608: LD_INT 5
81610: PUSH
81611: EMPTY
81612: LIST
81613: LIST
81614: LIST
81615: LIST
81616: LIST
81617: IN
81618: IFFALSE 81630
// uc_nation := nation_american else
81620: LD_ADDR_OWVAR 21
81624: PUSH
81625: LD_INT 1
81627: ST_TO_ADDR
81628: GO 81673
// if chassis in [ 11 , 12 , 13 , 14 ] then
81630: LD_VAR 0 1
81634: PUSH
81635: LD_INT 11
81637: PUSH
81638: LD_INT 12
81640: PUSH
81641: LD_INT 13
81643: PUSH
81644: LD_INT 14
81646: PUSH
81647: EMPTY
81648: LIST
81649: LIST
81650: LIST
81651: LIST
81652: IN
81653: IFFALSE 81665
// uc_nation := nation_arabian else
81655: LD_ADDR_OWVAR 21
81659: PUSH
81660: LD_INT 2
81662: ST_TO_ADDR
81663: GO 81673
// uc_nation := nation_russian ;
81665: LD_ADDR_OWVAR 21
81669: PUSH
81670: LD_INT 3
81672: ST_TO_ADDR
// vc_chassis := chassis ;
81673: LD_ADDR_OWVAR 37
81677: PUSH
81678: LD_VAR 0 1
81682: ST_TO_ADDR
// vc_engine := engine ;
81683: LD_ADDR_OWVAR 39
81687: PUSH
81688: LD_VAR 0 2
81692: ST_TO_ADDR
// vc_control := control ;
81693: LD_ADDR_OWVAR 38
81697: PUSH
81698: LD_VAR 0 3
81702: ST_TO_ADDR
// vc_weapon := weapon ;
81703: LD_ADDR_OWVAR 40
81707: PUSH
81708: LD_VAR 0 4
81712: ST_TO_ADDR
// un := CreateVehicle ;
81713: LD_ADDR_VAR 0 8
81717: PUSH
81718: CALL_OW 45
81722: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
81723: LD_VAR 0 8
81727: PPUSH
81728: LD_INT 0
81730: PPUSH
81731: LD_INT 5
81733: PPUSH
81734: CALL_OW 12
81738: PPUSH
81739: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
81743: LD_VAR 0 8
81747: PPUSH
81748: LD_VAR 0 5
81752: PPUSH
81753: LD_VAR 0 6
81757: PPUSH
81758: LD_INT 1
81760: PPUSH
81761: CALL_OW 48
// end ;
81765: LD_VAR 0 7
81769: RET
// export hInvincible ; every 1 do
81770: GO 81772
81772: DISABLE
// hInvincible := [ ] ;
81773: LD_ADDR_EXP 122
81777: PUSH
81778: EMPTY
81779: ST_TO_ADDR
81780: END
// every 10 do var i ;
81781: GO 81783
81783: DISABLE
81784: LD_INT 0
81786: PPUSH
// begin enable ;
81787: ENABLE
// if not hInvincible then
81788: LD_EXP 122
81792: NOT
81793: IFFALSE 81797
// exit ;
81795: GO 81841
// for i in hInvincible do
81797: LD_ADDR_VAR 0 1
81801: PUSH
81802: LD_EXP 122
81806: PUSH
81807: FOR_IN
81808: IFFALSE 81839
// if GetLives ( i ) < 1000 then
81810: LD_VAR 0 1
81814: PPUSH
81815: CALL_OW 256
81819: PUSH
81820: LD_INT 1000
81822: LESS
81823: IFFALSE 81837
// SetLives ( i , 1000 ) ;
81825: LD_VAR 0 1
81829: PPUSH
81830: LD_INT 1000
81832: PPUSH
81833: CALL_OW 234
81837: GO 81807
81839: POP
81840: POP
// end ;
81841: PPOPN 1
81843: END
// export function hHackInvincible ; var i ; begin
81844: LD_INT 0
81846: PPUSH
81847: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
81848: LD_ADDR_VAR 0 2
81852: PUSH
81853: LD_INT 2
81855: PUSH
81856: LD_INT 21
81858: PUSH
81859: LD_INT 1
81861: PUSH
81862: EMPTY
81863: LIST
81864: LIST
81865: PUSH
81866: LD_INT 21
81868: PUSH
81869: LD_INT 2
81871: PUSH
81872: EMPTY
81873: LIST
81874: LIST
81875: PUSH
81876: EMPTY
81877: LIST
81878: LIST
81879: LIST
81880: PPUSH
81881: CALL_OW 69
81885: PUSH
81886: FOR_IN
81887: IFFALSE 81948
// if IsSelected ( i ) then
81889: LD_VAR 0 2
81893: PPUSH
81894: CALL_OW 306
81898: IFFALSE 81946
// begin if i in hInvincible then
81900: LD_VAR 0 2
81904: PUSH
81905: LD_EXP 122
81909: IN
81910: IFFALSE 81930
// hInvincible := hInvincible diff i else
81912: LD_ADDR_EXP 122
81916: PUSH
81917: LD_EXP 122
81921: PUSH
81922: LD_VAR 0 2
81926: DIFF
81927: ST_TO_ADDR
81928: GO 81946
// hInvincible := hInvincible union i ;
81930: LD_ADDR_EXP 122
81934: PUSH
81935: LD_EXP 122
81939: PUSH
81940: LD_VAR 0 2
81944: UNION
81945: ST_TO_ADDR
// end ;
81946: GO 81886
81948: POP
81949: POP
// end ;
81950: LD_VAR 0 1
81954: RET
// export function hHackInvisible ; var i , j ; begin
81955: LD_INT 0
81957: PPUSH
81958: PPUSH
81959: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
81960: LD_ADDR_VAR 0 2
81964: PUSH
81965: LD_INT 21
81967: PUSH
81968: LD_INT 1
81970: PUSH
81971: EMPTY
81972: LIST
81973: LIST
81974: PPUSH
81975: CALL_OW 69
81979: PUSH
81980: FOR_IN
81981: IFFALSE 82005
// if IsSelected ( i ) then
81983: LD_VAR 0 2
81987: PPUSH
81988: CALL_OW 306
81992: IFFALSE 82003
// ComForceInvisible ( i ) ;
81994: LD_VAR 0 2
81998: PPUSH
81999: CALL_OW 496
82003: GO 81980
82005: POP
82006: POP
// end ;
82007: LD_VAR 0 1
82011: RET
// export function hHackChangeYourSide ; begin
82012: LD_INT 0
82014: PPUSH
// if your_side = 8 then
82015: LD_OWVAR 2
82019: PUSH
82020: LD_INT 8
82022: EQUAL
82023: IFFALSE 82035
// your_side := 0 else
82025: LD_ADDR_OWVAR 2
82029: PUSH
82030: LD_INT 0
82032: ST_TO_ADDR
82033: GO 82049
// your_side := your_side + 1 ;
82035: LD_ADDR_OWVAR 2
82039: PUSH
82040: LD_OWVAR 2
82044: PUSH
82045: LD_INT 1
82047: PLUS
82048: ST_TO_ADDR
// end ;
82049: LD_VAR 0 1
82053: RET
// export function hHackChangeUnitSide ; var i , j ; begin
82054: LD_INT 0
82056: PPUSH
82057: PPUSH
82058: PPUSH
// for i in all_units do
82059: LD_ADDR_VAR 0 2
82063: PUSH
82064: LD_OWVAR 3
82068: PUSH
82069: FOR_IN
82070: IFFALSE 82148
// if IsSelected ( i ) then
82072: LD_VAR 0 2
82076: PPUSH
82077: CALL_OW 306
82081: IFFALSE 82146
// begin j := GetSide ( i ) ;
82083: LD_ADDR_VAR 0 3
82087: PUSH
82088: LD_VAR 0 2
82092: PPUSH
82093: CALL_OW 255
82097: ST_TO_ADDR
// if j = 8 then
82098: LD_VAR 0 3
82102: PUSH
82103: LD_INT 8
82105: EQUAL
82106: IFFALSE 82118
// j := 0 else
82108: LD_ADDR_VAR 0 3
82112: PUSH
82113: LD_INT 0
82115: ST_TO_ADDR
82116: GO 82132
// j := j + 1 ;
82118: LD_ADDR_VAR 0 3
82122: PUSH
82123: LD_VAR 0 3
82127: PUSH
82128: LD_INT 1
82130: PLUS
82131: ST_TO_ADDR
// SetSide ( i , j ) ;
82132: LD_VAR 0 2
82136: PPUSH
82137: LD_VAR 0 3
82141: PPUSH
82142: CALL_OW 235
// end ;
82146: GO 82069
82148: POP
82149: POP
// end ;
82150: LD_VAR 0 1
82154: RET
// export function hHackFog ; begin
82155: LD_INT 0
82157: PPUSH
// FogOff ( true ) ;
82158: LD_INT 1
82160: PPUSH
82161: CALL_OW 344
// end ;
82165: LD_VAR 0 1
82169: RET
// export function hHackTeleport ( unit , x , y ) ; begin
82170: LD_INT 0
82172: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
82173: LD_VAR 0 1
82177: PPUSH
82178: LD_VAR 0 2
82182: PPUSH
82183: LD_VAR 0 3
82187: PPUSH
82188: LD_INT 1
82190: PPUSH
82191: LD_INT 1
82193: PPUSH
82194: CALL_OW 483
// CenterOnXY ( x , y ) ;
82198: LD_VAR 0 2
82202: PPUSH
82203: LD_VAR 0 3
82207: PPUSH
82208: CALL_OW 84
// end ;
82212: LD_VAR 0 4
82216: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
82217: LD_INT 0
82219: PPUSH
82220: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
82221: LD_VAR 0 1
82225: NOT
82226: PUSH
82227: LD_VAR 0 2
82231: PPUSH
82232: LD_VAR 0 3
82236: PPUSH
82237: CALL_OW 488
82241: NOT
82242: OR
82243: PUSH
82244: LD_VAR 0 1
82248: PPUSH
82249: CALL_OW 266
82253: PUSH
82254: LD_INT 3
82256: NONEQUAL
82257: PUSH
82258: LD_VAR 0 1
82262: PPUSH
82263: CALL_OW 247
82267: PUSH
82268: LD_INT 1
82270: EQUAL
82271: NOT
82272: AND
82273: OR
82274: IFFALSE 82278
// exit ;
82276: GO 82427
// if GetType ( factory ) = unit_human then
82278: LD_VAR 0 1
82282: PPUSH
82283: CALL_OW 247
82287: PUSH
82288: LD_INT 1
82290: EQUAL
82291: IFFALSE 82308
// factory := IsInUnit ( factory ) ;
82293: LD_ADDR_VAR 0 1
82297: PUSH
82298: LD_VAR 0 1
82302: PPUSH
82303: CALL_OW 310
82307: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
82308: LD_VAR 0 1
82312: PPUSH
82313: CALL_OW 266
82317: PUSH
82318: LD_INT 3
82320: NONEQUAL
82321: IFFALSE 82325
// exit ;
82323: GO 82427
// if HexInfo ( x , y ) = factory then
82325: LD_VAR 0 2
82329: PPUSH
82330: LD_VAR 0 3
82334: PPUSH
82335: CALL_OW 428
82339: PUSH
82340: LD_VAR 0 1
82344: EQUAL
82345: IFFALSE 82372
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
82347: LD_ADDR_EXP 123
82351: PUSH
82352: LD_EXP 123
82356: PPUSH
82357: LD_VAR 0 1
82361: PPUSH
82362: LD_INT 0
82364: PPUSH
82365: CALL_OW 1
82369: ST_TO_ADDR
82370: GO 82423
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
82372: LD_ADDR_EXP 123
82376: PUSH
82377: LD_EXP 123
82381: PPUSH
82382: LD_VAR 0 1
82386: PPUSH
82387: LD_VAR 0 1
82391: PPUSH
82392: CALL_OW 255
82396: PUSH
82397: LD_VAR 0 1
82401: PUSH
82402: LD_VAR 0 2
82406: PUSH
82407: LD_VAR 0 3
82411: PUSH
82412: EMPTY
82413: LIST
82414: LIST
82415: LIST
82416: LIST
82417: PPUSH
82418: CALL_OW 1
82422: ST_TO_ADDR
// UpdateFactoryWaypoints ;
82423: CALL 82432 0 0
// end ;
82427: LD_VAR 0 4
82431: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
82432: LD_INT 0
82434: PPUSH
82435: PPUSH
82436: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
82437: LD_STRING resetFactoryWaypoint();
82439: PPUSH
82440: CALL_OW 559
// if factoryWaypoints then
82444: LD_EXP 123
82448: IFFALSE 82574
// begin list := PrepareArray ( factoryWaypoints ) ;
82450: LD_ADDR_VAR 0 3
82454: PUSH
82455: LD_EXP 123
82459: PPUSH
82460: CALL 67718 0 1
82464: ST_TO_ADDR
// for i := 1 to list do
82465: LD_ADDR_VAR 0 2
82469: PUSH
82470: DOUBLE
82471: LD_INT 1
82473: DEC
82474: ST_TO_ADDR
82475: LD_VAR 0 3
82479: PUSH
82480: FOR_TO
82481: IFFALSE 82572
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
82483: LD_STRING setFactoryWaypointXY(
82485: PUSH
82486: LD_VAR 0 3
82490: PUSH
82491: LD_VAR 0 2
82495: ARRAY
82496: PUSH
82497: LD_INT 1
82499: ARRAY
82500: STR
82501: PUSH
82502: LD_STRING ,
82504: STR
82505: PUSH
82506: LD_VAR 0 3
82510: PUSH
82511: LD_VAR 0 2
82515: ARRAY
82516: PUSH
82517: LD_INT 2
82519: ARRAY
82520: STR
82521: PUSH
82522: LD_STRING ,
82524: STR
82525: PUSH
82526: LD_VAR 0 3
82530: PUSH
82531: LD_VAR 0 2
82535: ARRAY
82536: PUSH
82537: LD_INT 3
82539: ARRAY
82540: STR
82541: PUSH
82542: LD_STRING ,
82544: STR
82545: PUSH
82546: LD_VAR 0 3
82550: PUSH
82551: LD_VAR 0 2
82555: ARRAY
82556: PUSH
82557: LD_INT 4
82559: ARRAY
82560: STR
82561: PUSH
82562: LD_STRING )
82564: STR
82565: PPUSH
82566: CALL_OW 559
82570: GO 82480
82572: POP
82573: POP
// end ; end ;
82574: LD_VAR 0 1
82578: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
82579: LD_INT 0
82581: PPUSH
// if HexInfo ( x , y ) = warehouse then
82582: LD_VAR 0 2
82586: PPUSH
82587: LD_VAR 0 3
82591: PPUSH
82592: CALL_OW 428
82596: PUSH
82597: LD_VAR 0 1
82601: EQUAL
82602: IFFALSE 82629
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
82604: LD_ADDR_EXP 124
82608: PUSH
82609: LD_EXP 124
82613: PPUSH
82614: LD_VAR 0 1
82618: PPUSH
82619: LD_INT 0
82621: PPUSH
82622: CALL_OW 1
82626: ST_TO_ADDR
82627: GO 82680
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
82629: LD_ADDR_EXP 124
82633: PUSH
82634: LD_EXP 124
82638: PPUSH
82639: LD_VAR 0 1
82643: PPUSH
82644: LD_VAR 0 1
82648: PPUSH
82649: CALL_OW 255
82653: PUSH
82654: LD_VAR 0 1
82658: PUSH
82659: LD_VAR 0 2
82663: PUSH
82664: LD_VAR 0 3
82668: PUSH
82669: EMPTY
82670: LIST
82671: LIST
82672: LIST
82673: LIST
82674: PPUSH
82675: CALL_OW 1
82679: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
82680: CALL 82689 0 0
// end ;
82684: LD_VAR 0 4
82688: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
82689: LD_INT 0
82691: PPUSH
82692: PPUSH
82693: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
82694: LD_STRING resetWarehouseGatheringPoints();
82696: PPUSH
82697: CALL_OW 559
// if warehouseGatheringPoints then
82701: LD_EXP 124
82705: IFFALSE 82831
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
82707: LD_ADDR_VAR 0 3
82711: PUSH
82712: LD_EXP 124
82716: PPUSH
82717: CALL 67718 0 1
82721: ST_TO_ADDR
// for i := 1 to list do
82722: LD_ADDR_VAR 0 2
82726: PUSH
82727: DOUBLE
82728: LD_INT 1
82730: DEC
82731: ST_TO_ADDR
82732: LD_VAR 0 3
82736: PUSH
82737: FOR_TO
82738: IFFALSE 82829
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
82740: LD_STRING setWarehouseGatheringPointXY(
82742: PUSH
82743: LD_VAR 0 3
82747: PUSH
82748: LD_VAR 0 2
82752: ARRAY
82753: PUSH
82754: LD_INT 1
82756: ARRAY
82757: STR
82758: PUSH
82759: LD_STRING ,
82761: STR
82762: PUSH
82763: LD_VAR 0 3
82767: PUSH
82768: LD_VAR 0 2
82772: ARRAY
82773: PUSH
82774: LD_INT 2
82776: ARRAY
82777: STR
82778: PUSH
82779: LD_STRING ,
82781: STR
82782: PUSH
82783: LD_VAR 0 3
82787: PUSH
82788: LD_VAR 0 2
82792: ARRAY
82793: PUSH
82794: LD_INT 3
82796: ARRAY
82797: STR
82798: PUSH
82799: LD_STRING ,
82801: STR
82802: PUSH
82803: LD_VAR 0 3
82807: PUSH
82808: LD_VAR 0 2
82812: ARRAY
82813: PUSH
82814: LD_INT 4
82816: ARRAY
82817: STR
82818: PUSH
82819: LD_STRING )
82821: STR
82822: PPUSH
82823: CALL_OW 559
82827: GO 82737
82829: POP
82830: POP
// end ; end ;
82831: LD_VAR 0 1
82835: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
82836: LD_EXP 124
82840: IFFALSE 83525
82842: GO 82844
82844: DISABLE
82845: LD_INT 0
82847: PPUSH
82848: PPUSH
82849: PPUSH
82850: PPUSH
82851: PPUSH
82852: PPUSH
82853: PPUSH
82854: PPUSH
82855: PPUSH
// begin enable ;
82856: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
82857: LD_ADDR_VAR 0 3
82861: PUSH
82862: LD_EXP 124
82866: PPUSH
82867: CALL 67718 0 1
82871: ST_TO_ADDR
// if not list then
82872: LD_VAR 0 3
82876: NOT
82877: IFFALSE 82881
// exit ;
82879: GO 83525
// for i := 1 to list do
82881: LD_ADDR_VAR 0 1
82885: PUSH
82886: DOUBLE
82887: LD_INT 1
82889: DEC
82890: ST_TO_ADDR
82891: LD_VAR 0 3
82895: PUSH
82896: FOR_TO
82897: IFFALSE 83523
// begin depot := list [ i ] [ 2 ] ;
82899: LD_ADDR_VAR 0 8
82903: PUSH
82904: LD_VAR 0 3
82908: PUSH
82909: LD_VAR 0 1
82913: ARRAY
82914: PUSH
82915: LD_INT 2
82917: ARRAY
82918: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
82919: LD_ADDR_VAR 0 5
82923: PUSH
82924: LD_VAR 0 3
82928: PUSH
82929: LD_VAR 0 1
82933: ARRAY
82934: PUSH
82935: LD_INT 1
82937: ARRAY
82938: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
82939: LD_VAR 0 8
82943: PPUSH
82944: CALL_OW 301
82948: PUSH
82949: LD_VAR 0 5
82953: PUSH
82954: LD_VAR 0 8
82958: PPUSH
82959: CALL_OW 255
82963: NONEQUAL
82964: OR
82965: IFFALSE 82994
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
82967: LD_ADDR_EXP 124
82971: PUSH
82972: LD_EXP 124
82976: PPUSH
82977: LD_VAR 0 8
82981: PPUSH
82982: LD_INT 0
82984: PPUSH
82985: CALL_OW 1
82989: ST_TO_ADDR
// exit ;
82990: POP
82991: POP
82992: GO 83525
// end ; x := list [ i ] [ 3 ] ;
82994: LD_ADDR_VAR 0 6
82998: PUSH
82999: LD_VAR 0 3
83003: PUSH
83004: LD_VAR 0 1
83008: ARRAY
83009: PUSH
83010: LD_INT 3
83012: ARRAY
83013: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
83014: LD_ADDR_VAR 0 7
83018: PUSH
83019: LD_VAR 0 3
83023: PUSH
83024: LD_VAR 0 1
83028: ARRAY
83029: PUSH
83030: LD_INT 4
83032: ARRAY
83033: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
83034: LD_ADDR_VAR 0 9
83038: PUSH
83039: LD_VAR 0 6
83043: PPUSH
83044: LD_VAR 0 7
83048: PPUSH
83049: LD_INT 16
83051: PPUSH
83052: CALL 66306 0 3
83056: ST_TO_ADDR
// if not cratesNearbyPoint then
83057: LD_VAR 0 9
83061: NOT
83062: IFFALSE 83068
// exit ;
83064: POP
83065: POP
83066: GO 83525
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
83068: LD_ADDR_VAR 0 4
83072: PUSH
83073: LD_INT 22
83075: PUSH
83076: LD_VAR 0 5
83080: PUSH
83081: EMPTY
83082: LIST
83083: LIST
83084: PUSH
83085: LD_INT 3
83087: PUSH
83088: LD_INT 60
83090: PUSH
83091: EMPTY
83092: LIST
83093: PUSH
83094: EMPTY
83095: LIST
83096: LIST
83097: PUSH
83098: LD_INT 91
83100: PUSH
83101: LD_VAR 0 8
83105: PUSH
83106: LD_INT 6
83108: PUSH
83109: EMPTY
83110: LIST
83111: LIST
83112: LIST
83113: PUSH
83114: LD_INT 2
83116: PUSH
83117: LD_INT 25
83119: PUSH
83120: LD_INT 2
83122: PUSH
83123: EMPTY
83124: LIST
83125: LIST
83126: PUSH
83127: LD_INT 25
83129: PUSH
83130: LD_INT 16
83132: PUSH
83133: EMPTY
83134: LIST
83135: LIST
83136: PUSH
83137: EMPTY
83138: LIST
83139: LIST
83140: LIST
83141: PUSH
83142: EMPTY
83143: LIST
83144: LIST
83145: LIST
83146: LIST
83147: PPUSH
83148: CALL_OW 69
83152: PUSH
83153: LD_VAR 0 8
83157: PPUSH
83158: CALL_OW 313
83162: PPUSH
83163: LD_INT 3
83165: PUSH
83166: LD_INT 60
83168: PUSH
83169: EMPTY
83170: LIST
83171: PUSH
83172: EMPTY
83173: LIST
83174: LIST
83175: PUSH
83176: LD_INT 2
83178: PUSH
83179: LD_INT 25
83181: PUSH
83182: LD_INT 2
83184: PUSH
83185: EMPTY
83186: LIST
83187: LIST
83188: PUSH
83189: LD_INT 25
83191: PUSH
83192: LD_INT 16
83194: PUSH
83195: EMPTY
83196: LIST
83197: LIST
83198: PUSH
83199: EMPTY
83200: LIST
83201: LIST
83202: LIST
83203: PUSH
83204: EMPTY
83205: LIST
83206: LIST
83207: PPUSH
83208: CALL_OW 72
83212: UNION
83213: ST_TO_ADDR
// if tmp then
83214: LD_VAR 0 4
83218: IFFALSE 83298
// begin tmp := ShrinkArray ( tmp , 3 ) ;
83220: LD_ADDR_VAR 0 4
83224: PUSH
83225: LD_VAR 0 4
83229: PPUSH
83230: LD_INT 3
83232: PPUSH
83233: CALL 64275 0 2
83237: ST_TO_ADDR
// for j in tmp do
83238: LD_ADDR_VAR 0 2
83242: PUSH
83243: LD_VAR 0 4
83247: PUSH
83248: FOR_IN
83249: IFFALSE 83292
// begin if IsInUnit ( j ) then
83251: LD_VAR 0 2
83255: PPUSH
83256: CALL_OW 310
83260: IFFALSE 83271
// ComExit ( j ) ;
83262: LD_VAR 0 2
83266: PPUSH
83267: CALL 64358 0 1
// AddComCollect ( j , x , y ) ;
83271: LD_VAR 0 2
83275: PPUSH
83276: LD_VAR 0 6
83280: PPUSH
83281: LD_VAR 0 7
83285: PPUSH
83286: CALL_OW 177
// end ;
83290: GO 83248
83292: POP
83293: POP
// exit ;
83294: POP
83295: POP
83296: GO 83525
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
83298: LD_ADDR_VAR 0 4
83302: PUSH
83303: LD_INT 22
83305: PUSH
83306: LD_VAR 0 5
83310: PUSH
83311: EMPTY
83312: LIST
83313: LIST
83314: PUSH
83315: LD_INT 91
83317: PUSH
83318: LD_VAR 0 8
83322: PUSH
83323: LD_INT 8
83325: PUSH
83326: EMPTY
83327: LIST
83328: LIST
83329: LIST
83330: PUSH
83331: LD_INT 2
83333: PUSH
83334: LD_INT 34
83336: PUSH
83337: LD_INT 12
83339: PUSH
83340: EMPTY
83341: LIST
83342: LIST
83343: PUSH
83344: LD_INT 34
83346: PUSH
83347: LD_INT 51
83349: PUSH
83350: EMPTY
83351: LIST
83352: LIST
83353: PUSH
83354: LD_INT 34
83356: PUSH
83357: LD_INT 32
83359: PUSH
83360: EMPTY
83361: LIST
83362: LIST
83363: PUSH
83364: LD_INT 34
83366: PUSH
83367: LD_INT 89
83369: PUSH
83370: EMPTY
83371: LIST
83372: LIST
83373: PUSH
83374: EMPTY
83375: LIST
83376: LIST
83377: LIST
83378: LIST
83379: LIST
83380: PUSH
83381: EMPTY
83382: LIST
83383: LIST
83384: LIST
83385: PPUSH
83386: CALL_OW 69
83390: ST_TO_ADDR
// if tmp then
83391: LD_VAR 0 4
83395: IFFALSE 83521
// begin for j in tmp do
83397: LD_ADDR_VAR 0 2
83401: PUSH
83402: LD_VAR 0 4
83406: PUSH
83407: FOR_IN
83408: IFFALSE 83519
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
83410: LD_VAR 0 2
83414: PPUSH
83415: CALL_OW 262
83419: PUSH
83420: LD_INT 3
83422: EQUAL
83423: PUSH
83424: LD_VAR 0 2
83428: PPUSH
83429: CALL_OW 261
83433: PUSH
83434: LD_INT 20
83436: GREATER
83437: OR
83438: PUSH
83439: LD_VAR 0 2
83443: PPUSH
83444: CALL_OW 314
83448: NOT
83449: AND
83450: PUSH
83451: LD_VAR 0 2
83455: PPUSH
83456: CALL_OW 263
83460: PUSH
83461: LD_INT 1
83463: NONEQUAL
83464: PUSH
83465: LD_VAR 0 2
83469: PPUSH
83470: CALL_OW 311
83474: OR
83475: AND
83476: IFFALSE 83517
// begin ComCollect ( j , x , y ) ;
83478: LD_VAR 0 2
83482: PPUSH
83483: LD_VAR 0 6
83487: PPUSH
83488: LD_VAR 0 7
83492: PPUSH
83493: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
83497: LD_VAR 0 2
83501: PPUSH
83502: LD_VAR 0 8
83506: PPUSH
83507: CALL_OW 172
// exit ;
83511: POP
83512: POP
83513: POP
83514: POP
83515: GO 83525
// end ;
83517: GO 83407
83519: POP
83520: POP
// end ; end ;
83521: GO 82896
83523: POP
83524: POP
// end ; end_of_file
83525: PPOPN 9
83527: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83528: LD_VAR 0 1
83532: PUSH
83533: LD_INT 200
83535: DOUBLE
83536: GREATEREQUAL
83537: IFFALSE 83545
83539: LD_INT 299
83541: DOUBLE
83542: LESSEQUAL
83543: IFTRUE 83547
83545: GO 83579
83547: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83548: LD_VAR 0 1
83552: PPUSH
83553: LD_VAR 0 2
83557: PPUSH
83558: LD_VAR 0 3
83562: PPUSH
83563: LD_VAR 0 4
83567: PPUSH
83568: LD_VAR 0 5
83572: PPUSH
83573: CALL 84067 0 5
83577: GO 83656
83579: LD_INT 300
83581: DOUBLE
83582: GREATEREQUAL
83583: IFFALSE 83591
83585: LD_INT 399
83587: DOUBLE
83588: LESSEQUAL
83589: IFTRUE 83593
83591: GO 83655
83593: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83594: LD_VAR 0 1
83598: PPUSH
83599: LD_VAR 0 2
83603: PPUSH
83604: LD_VAR 0 3
83608: PPUSH
83609: LD_VAR 0 4
83613: PPUSH
83614: LD_VAR 0 5
83618: PPUSH
83619: LD_VAR 0 6
83623: PPUSH
83624: LD_VAR 0 7
83628: PPUSH
83629: LD_VAR 0 8
83633: PPUSH
83634: LD_VAR 0 9
83638: PPUSH
83639: LD_VAR 0 10
83643: PPUSH
83644: LD_VAR 0 11
83648: PPUSH
83649: CALL 80237 0 11
83653: GO 83656
83655: POP
// end ;
83656: PPOPN 11
83658: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83659: LD_VAR 0 1
83663: PPUSH
83664: LD_VAR 0 2
83668: PPUSH
83669: LD_VAR 0 3
83673: PPUSH
83674: LD_VAR 0 4
83678: PPUSH
83679: LD_VAR 0 5
83683: PPUSH
83684: CALL 83803 0 5
// end ; end_of_file
83688: PPOPN 5
83690: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
83691: LD_INT 0
83693: PPUSH
83694: PPUSH
83695: PPUSH
83696: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
83697: LD_VAR 0 1
83701: PPUSH
83702: CALL_OW 264
83706: PUSH
83707: LD_INT 91
83709: EQUAL
83710: IFFALSE 83782
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
83712: LD_INT 68
83714: PPUSH
83715: LD_VAR 0 1
83719: PPUSH
83720: CALL_OW 255
83724: PPUSH
83725: CALL_OW 321
83729: PUSH
83730: LD_INT 2
83732: EQUAL
83733: IFFALSE 83745
// eff := 70 else
83735: LD_ADDR_VAR 0 4
83739: PUSH
83740: LD_INT 70
83742: ST_TO_ADDR
83743: GO 83753
// eff := 30 ;
83745: LD_ADDR_VAR 0 4
83749: PUSH
83750: LD_INT 30
83752: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
83753: LD_VAR 0 1
83757: PPUSH
83758: CALL_OW 250
83762: PPUSH
83763: LD_VAR 0 1
83767: PPUSH
83768: CALL_OW 251
83772: PPUSH
83773: LD_VAR 0 4
83777: PPUSH
83778: CALL_OW 495
// end ; end ;
83782: LD_VAR 0 2
83786: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
83787: LD_INT 0
83789: PPUSH
// end ;
83790: LD_VAR 0 4
83794: RET
// export function SOS_Command ( cmd ) ; begin
83795: LD_INT 0
83797: PPUSH
// end ;
83798: LD_VAR 0 2
83802: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
83803: LD_INT 0
83805: PPUSH
// end ;
83806: LD_VAR 0 6
83810: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
83811: LD_INT 0
83813: PPUSH
83814: PPUSH
// if not vehicle or not factory then
83815: LD_VAR 0 1
83819: NOT
83820: PUSH
83821: LD_VAR 0 2
83825: NOT
83826: OR
83827: IFFALSE 83831
// exit ;
83829: GO 84062
// if factoryWaypoints >= factory then
83831: LD_EXP 123
83835: PUSH
83836: LD_VAR 0 2
83840: GREATEREQUAL
83841: IFFALSE 84062
// if factoryWaypoints [ factory ] then
83843: LD_EXP 123
83847: PUSH
83848: LD_VAR 0 2
83852: ARRAY
83853: IFFALSE 84062
// begin if GetControl ( vehicle ) = control_manual then
83855: LD_VAR 0 1
83859: PPUSH
83860: CALL_OW 263
83864: PUSH
83865: LD_INT 1
83867: EQUAL
83868: IFFALSE 83949
// begin driver := IsDrivenBy ( vehicle ) ;
83870: LD_ADDR_VAR 0 4
83874: PUSH
83875: LD_VAR 0 1
83879: PPUSH
83880: CALL_OW 311
83884: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
83885: LD_VAR 0 4
83889: PPUSH
83890: LD_EXP 123
83894: PUSH
83895: LD_VAR 0 2
83899: ARRAY
83900: PUSH
83901: LD_INT 3
83903: ARRAY
83904: PPUSH
83905: LD_EXP 123
83909: PUSH
83910: LD_VAR 0 2
83914: ARRAY
83915: PUSH
83916: LD_INT 4
83918: ARRAY
83919: PPUSH
83920: CALL_OW 171
// AddComExitVehicle ( driver ) ;
83924: LD_VAR 0 4
83928: PPUSH
83929: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
83933: LD_VAR 0 4
83937: PPUSH
83938: LD_VAR 0 2
83942: PPUSH
83943: CALL_OW 180
// end else
83947: GO 84062
// if GetControl ( vehicle ) = control_remote then
83949: LD_VAR 0 1
83953: PPUSH
83954: CALL_OW 263
83958: PUSH
83959: LD_INT 2
83961: EQUAL
83962: IFFALSE 84023
// begin wait ( 0 0$2 ) ;
83964: LD_INT 70
83966: PPUSH
83967: CALL_OW 67
// if Connect ( vehicle ) then
83971: LD_VAR 0 1
83975: PPUSH
83976: CALL 34617 0 1
83980: IFFALSE 84021
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
83982: LD_VAR 0 1
83986: PPUSH
83987: LD_EXP 123
83991: PUSH
83992: LD_VAR 0 2
83996: ARRAY
83997: PUSH
83998: LD_INT 3
84000: ARRAY
84001: PPUSH
84002: LD_EXP 123
84006: PUSH
84007: LD_VAR 0 2
84011: ARRAY
84012: PUSH
84013: LD_INT 4
84015: ARRAY
84016: PPUSH
84017: CALL_OW 171
// end else
84021: GO 84062
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84023: LD_VAR 0 1
84027: PPUSH
84028: LD_EXP 123
84032: PUSH
84033: LD_VAR 0 2
84037: ARRAY
84038: PUSH
84039: LD_INT 3
84041: ARRAY
84042: PPUSH
84043: LD_EXP 123
84047: PUSH
84048: LD_VAR 0 2
84052: ARRAY
84053: PUSH
84054: LD_INT 4
84056: ARRAY
84057: PPUSH
84058: CALL_OW 171
// end ; end ;
84062: LD_VAR 0 3
84066: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
84067: LD_INT 0
84069: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
84070: LD_VAR 0 1
84074: PUSH
84075: LD_INT 250
84077: EQUAL
84078: PUSH
84079: LD_VAR 0 2
84083: PPUSH
84084: CALL_OW 264
84088: PUSH
84089: LD_INT 81
84091: EQUAL
84092: AND
84093: IFFALSE 84114
// MinerPlaceMine ( unit , x , y ) ;
84095: LD_VAR 0 2
84099: PPUSH
84100: LD_VAR 0 4
84104: PPUSH
84105: LD_VAR 0 5
84109: PPUSH
84110: CALL 86499 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
84114: LD_VAR 0 1
84118: PUSH
84119: LD_INT 251
84121: EQUAL
84122: PUSH
84123: LD_VAR 0 2
84127: PPUSH
84128: CALL_OW 264
84132: PUSH
84133: LD_INT 81
84135: EQUAL
84136: AND
84137: IFFALSE 84158
// MinerDetonateMine ( unit , x , y ) ;
84139: LD_VAR 0 2
84143: PPUSH
84144: LD_VAR 0 4
84148: PPUSH
84149: LD_VAR 0 5
84153: PPUSH
84154: CALL 86774 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
84158: LD_VAR 0 1
84162: PUSH
84163: LD_INT 252
84165: EQUAL
84166: PUSH
84167: LD_VAR 0 2
84171: PPUSH
84172: CALL_OW 264
84176: PUSH
84177: LD_INT 81
84179: EQUAL
84180: AND
84181: IFFALSE 84202
// MinerCreateMinefield ( unit , x , y ) ;
84183: LD_VAR 0 2
84187: PPUSH
84188: LD_VAR 0 4
84192: PPUSH
84193: LD_VAR 0 5
84197: PPUSH
84198: CALL 87191 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
84202: LD_VAR 0 1
84206: PUSH
84207: LD_INT 253
84209: EQUAL
84210: PUSH
84211: LD_VAR 0 2
84215: PPUSH
84216: CALL_OW 257
84220: PUSH
84221: LD_INT 5
84223: EQUAL
84224: AND
84225: IFFALSE 84246
// ComBinocular ( unit , x , y ) ;
84227: LD_VAR 0 2
84231: PPUSH
84232: LD_VAR 0 4
84236: PPUSH
84237: LD_VAR 0 5
84241: PPUSH
84242: CALL 87560 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
84246: LD_VAR 0 1
84250: PUSH
84251: LD_INT 254
84253: EQUAL
84254: PUSH
84255: LD_VAR 0 2
84259: PPUSH
84260: CALL_OW 264
84264: PUSH
84265: LD_INT 99
84267: EQUAL
84268: AND
84269: PUSH
84270: LD_VAR 0 3
84274: PPUSH
84275: CALL_OW 263
84279: PUSH
84280: LD_INT 3
84282: EQUAL
84283: AND
84284: IFFALSE 84300
// HackDestroyVehicle ( unit , selectedUnit ) ;
84286: LD_VAR 0 2
84290: PPUSH
84291: LD_VAR 0 3
84295: PPUSH
84296: CALL 85863 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
84300: LD_VAR 0 1
84304: PUSH
84305: LD_INT 255
84307: EQUAL
84308: PUSH
84309: LD_VAR 0 2
84313: PPUSH
84314: CALL_OW 264
84318: PUSH
84319: LD_INT 14
84321: PUSH
84322: LD_INT 53
84324: PUSH
84325: EMPTY
84326: LIST
84327: LIST
84328: IN
84329: AND
84330: PUSH
84331: LD_VAR 0 4
84335: PPUSH
84336: LD_VAR 0 5
84340: PPUSH
84341: CALL_OW 488
84345: AND
84346: IFFALSE 84370
// CutTreeXYR ( unit , x , y , 12 ) ;
84348: LD_VAR 0 2
84352: PPUSH
84353: LD_VAR 0 4
84357: PPUSH
84358: LD_VAR 0 5
84362: PPUSH
84363: LD_INT 12
84365: PPUSH
84366: CALL 84433 0 4
// if cmd = 256 then
84370: LD_VAR 0 1
84374: PUSH
84375: LD_INT 256
84377: EQUAL
84378: IFFALSE 84399
// SetFactoryWaypoint ( unit , x , y ) ;
84380: LD_VAR 0 2
84384: PPUSH
84385: LD_VAR 0 4
84389: PPUSH
84390: LD_VAR 0 5
84394: PPUSH
84395: CALL 82217 0 3
// if cmd = 257 then
84399: LD_VAR 0 1
84403: PUSH
84404: LD_INT 257
84406: EQUAL
84407: IFFALSE 84428
// SetWarehouseGatheringPoint ( unit , x , y ) ;
84409: LD_VAR 0 2
84413: PPUSH
84414: LD_VAR 0 4
84418: PPUSH
84419: LD_VAR 0 5
84423: PPUSH
84424: CALL 82579 0 3
// end ;
84428: LD_VAR 0 6
84432: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
84433: LD_INT 0
84435: PPUSH
84436: PPUSH
84437: PPUSH
84438: PPUSH
84439: PPUSH
84440: PPUSH
84441: PPUSH
84442: PPUSH
84443: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
84444: LD_VAR 0 1
84448: NOT
84449: PUSH
84450: LD_VAR 0 2
84454: PPUSH
84455: LD_VAR 0 3
84459: PPUSH
84460: CALL_OW 488
84464: NOT
84465: OR
84466: PUSH
84467: LD_VAR 0 4
84471: NOT
84472: OR
84473: IFFALSE 84477
// exit ;
84475: GO 84817
// list := [ ] ;
84477: LD_ADDR_VAR 0 13
84481: PUSH
84482: EMPTY
84483: ST_TO_ADDR
// if x - r < 0 then
84484: LD_VAR 0 2
84488: PUSH
84489: LD_VAR 0 4
84493: MINUS
84494: PUSH
84495: LD_INT 0
84497: LESS
84498: IFFALSE 84510
// min_x := 0 else
84500: LD_ADDR_VAR 0 7
84504: PUSH
84505: LD_INT 0
84507: ST_TO_ADDR
84508: GO 84526
// min_x := x - r ;
84510: LD_ADDR_VAR 0 7
84514: PUSH
84515: LD_VAR 0 2
84519: PUSH
84520: LD_VAR 0 4
84524: MINUS
84525: ST_TO_ADDR
// if y - r < 0 then
84526: LD_VAR 0 3
84530: PUSH
84531: LD_VAR 0 4
84535: MINUS
84536: PUSH
84537: LD_INT 0
84539: LESS
84540: IFFALSE 84552
// min_y := 0 else
84542: LD_ADDR_VAR 0 8
84546: PUSH
84547: LD_INT 0
84549: ST_TO_ADDR
84550: GO 84568
// min_y := y - r ;
84552: LD_ADDR_VAR 0 8
84556: PUSH
84557: LD_VAR 0 3
84561: PUSH
84562: LD_VAR 0 4
84566: MINUS
84567: ST_TO_ADDR
// max_x := x + r ;
84568: LD_ADDR_VAR 0 9
84572: PUSH
84573: LD_VAR 0 2
84577: PUSH
84578: LD_VAR 0 4
84582: PLUS
84583: ST_TO_ADDR
// max_y := y + r ;
84584: LD_ADDR_VAR 0 10
84588: PUSH
84589: LD_VAR 0 3
84593: PUSH
84594: LD_VAR 0 4
84598: PLUS
84599: ST_TO_ADDR
// for _x = min_x to max_x do
84600: LD_ADDR_VAR 0 11
84604: PUSH
84605: DOUBLE
84606: LD_VAR 0 7
84610: DEC
84611: ST_TO_ADDR
84612: LD_VAR 0 9
84616: PUSH
84617: FOR_TO
84618: IFFALSE 84735
// for _y = min_y to max_y do
84620: LD_ADDR_VAR 0 12
84624: PUSH
84625: DOUBLE
84626: LD_VAR 0 8
84630: DEC
84631: ST_TO_ADDR
84632: LD_VAR 0 10
84636: PUSH
84637: FOR_TO
84638: IFFALSE 84731
// begin if not ValidHex ( _x , _y ) then
84640: LD_VAR 0 11
84644: PPUSH
84645: LD_VAR 0 12
84649: PPUSH
84650: CALL_OW 488
84654: NOT
84655: IFFALSE 84659
// continue ;
84657: GO 84637
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
84659: LD_VAR 0 11
84663: PPUSH
84664: LD_VAR 0 12
84668: PPUSH
84669: CALL_OW 351
84673: PUSH
84674: LD_VAR 0 11
84678: PPUSH
84679: LD_VAR 0 12
84683: PPUSH
84684: CALL_OW 554
84688: AND
84689: IFFALSE 84729
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
84691: LD_ADDR_VAR 0 13
84695: PUSH
84696: LD_VAR 0 13
84700: PPUSH
84701: LD_VAR 0 13
84705: PUSH
84706: LD_INT 1
84708: PLUS
84709: PPUSH
84710: LD_VAR 0 11
84714: PUSH
84715: LD_VAR 0 12
84719: PUSH
84720: EMPTY
84721: LIST
84722: LIST
84723: PPUSH
84724: CALL_OW 2
84728: ST_TO_ADDR
// end ;
84729: GO 84637
84731: POP
84732: POP
84733: GO 84617
84735: POP
84736: POP
// if not list then
84737: LD_VAR 0 13
84741: NOT
84742: IFFALSE 84746
// exit ;
84744: GO 84817
// for i in list do
84746: LD_ADDR_VAR 0 6
84750: PUSH
84751: LD_VAR 0 13
84755: PUSH
84756: FOR_IN
84757: IFFALSE 84815
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
84759: LD_VAR 0 1
84763: PPUSH
84764: LD_STRING M
84766: PUSH
84767: LD_VAR 0 6
84771: PUSH
84772: LD_INT 1
84774: ARRAY
84775: PUSH
84776: LD_VAR 0 6
84780: PUSH
84781: LD_INT 2
84783: ARRAY
84784: PUSH
84785: LD_INT 0
84787: PUSH
84788: LD_INT 0
84790: PUSH
84791: LD_INT 0
84793: PUSH
84794: LD_INT 0
84796: PUSH
84797: EMPTY
84798: LIST
84799: LIST
84800: LIST
84801: LIST
84802: LIST
84803: LIST
84804: LIST
84805: PUSH
84806: EMPTY
84807: LIST
84808: PPUSH
84809: CALL_OW 447
84813: GO 84756
84815: POP
84816: POP
// end ;
84817: LD_VAR 0 5
84821: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
84822: LD_EXP 126
84826: NOT
84827: IFFALSE 84877
84829: GO 84831
84831: DISABLE
// begin initHack := true ;
84832: LD_ADDR_EXP 126
84836: PUSH
84837: LD_INT 1
84839: ST_TO_ADDR
// hackTanks := [ ] ;
84840: LD_ADDR_EXP 127
84844: PUSH
84845: EMPTY
84846: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
84847: LD_ADDR_EXP 128
84851: PUSH
84852: EMPTY
84853: ST_TO_ADDR
// hackLimit := 3 ;
84854: LD_ADDR_EXP 129
84858: PUSH
84859: LD_INT 3
84861: ST_TO_ADDR
// hackDist := 12 ;
84862: LD_ADDR_EXP 130
84866: PUSH
84867: LD_INT 12
84869: ST_TO_ADDR
// hackCounter := [ ] ;
84870: LD_ADDR_EXP 131
84874: PUSH
84875: EMPTY
84876: ST_TO_ADDR
// end ;
84877: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
84878: LD_EXP 126
84882: PUSH
84883: LD_INT 34
84885: PUSH
84886: LD_INT 99
84888: PUSH
84889: EMPTY
84890: LIST
84891: LIST
84892: PPUSH
84893: CALL_OW 69
84897: AND
84898: IFFALSE 85151
84900: GO 84902
84902: DISABLE
84903: LD_INT 0
84905: PPUSH
84906: PPUSH
// begin enable ;
84907: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
84908: LD_ADDR_VAR 0 1
84912: PUSH
84913: LD_INT 34
84915: PUSH
84916: LD_INT 99
84918: PUSH
84919: EMPTY
84920: LIST
84921: LIST
84922: PPUSH
84923: CALL_OW 69
84927: PUSH
84928: FOR_IN
84929: IFFALSE 85149
// begin if not i in hackTanks then
84931: LD_VAR 0 1
84935: PUSH
84936: LD_EXP 127
84940: IN
84941: NOT
84942: IFFALSE 85025
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
84944: LD_ADDR_EXP 127
84948: PUSH
84949: LD_EXP 127
84953: PPUSH
84954: LD_EXP 127
84958: PUSH
84959: LD_INT 1
84961: PLUS
84962: PPUSH
84963: LD_VAR 0 1
84967: PPUSH
84968: CALL_OW 1
84972: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
84973: LD_ADDR_EXP 128
84977: PUSH
84978: LD_EXP 128
84982: PPUSH
84983: LD_EXP 128
84987: PUSH
84988: LD_INT 1
84990: PLUS
84991: PPUSH
84992: EMPTY
84993: PPUSH
84994: CALL_OW 1
84998: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
84999: LD_ADDR_EXP 131
85003: PUSH
85004: LD_EXP 131
85008: PPUSH
85009: LD_EXP 131
85013: PUSH
85014: LD_INT 1
85016: PLUS
85017: PPUSH
85018: EMPTY
85019: PPUSH
85020: CALL_OW 1
85024: ST_TO_ADDR
// end ; if not IsOk ( i ) then
85025: LD_VAR 0 1
85029: PPUSH
85030: CALL_OW 302
85034: NOT
85035: IFFALSE 85048
// begin HackUnlinkAll ( i ) ;
85037: LD_VAR 0 1
85041: PPUSH
85042: CALL 85154 0 1
// continue ;
85046: GO 84928
// end ; HackCheckCapturedStatus ( i ) ;
85048: LD_VAR 0 1
85052: PPUSH
85053: CALL 85597 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
85057: LD_ADDR_VAR 0 2
85061: PUSH
85062: LD_INT 81
85064: PUSH
85065: LD_VAR 0 1
85069: PPUSH
85070: CALL_OW 255
85074: PUSH
85075: EMPTY
85076: LIST
85077: LIST
85078: PUSH
85079: LD_INT 33
85081: PUSH
85082: LD_INT 3
85084: PUSH
85085: EMPTY
85086: LIST
85087: LIST
85088: PUSH
85089: LD_INT 91
85091: PUSH
85092: LD_VAR 0 1
85096: PUSH
85097: LD_EXP 130
85101: PUSH
85102: EMPTY
85103: LIST
85104: LIST
85105: LIST
85106: PUSH
85107: LD_INT 50
85109: PUSH
85110: EMPTY
85111: LIST
85112: PUSH
85113: EMPTY
85114: LIST
85115: LIST
85116: LIST
85117: LIST
85118: PPUSH
85119: CALL_OW 69
85123: ST_TO_ADDR
// if not tmp then
85124: LD_VAR 0 2
85128: NOT
85129: IFFALSE 85133
// continue ;
85131: GO 84928
// HackLink ( i , tmp ) ;
85133: LD_VAR 0 1
85137: PPUSH
85138: LD_VAR 0 2
85142: PPUSH
85143: CALL 85290 0 2
// end ;
85147: GO 84928
85149: POP
85150: POP
// end ;
85151: PPOPN 2
85153: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
85154: LD_INT 0
85156: PPUSH
85157: PPUSH
85158: PPUSH
// if not hack in hackTanks then
85159: LD_VAR 0 1
85163: PUSH
85164: LD_EXP 127
85168: IN
85169: NOT
85170: IFFALSE 85174
// exit ;
85172: GO 85285
// index := GetElementIndex ( hackTanks , hack ) ;
85174: LD_ADDR_VAR 0 4
85178: PUSH
85179: LD_EXP 127
85183: PPUSH
85184: LD_VAR 0 1
85188: PPUSH
85189: CALL 31433 0 2
85193: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
85194: LD_EXP 128
85198: PUSH
85199: LD_VAR 0 4
85203: ARRAY
85204: IFFALSE 85285
// begin for i in hackTanksCaptured [ index ] do
85206: LD_ADDR_VAR 0 3
85210: PUSH
85211: LD_EXP 128
85215: PUSH
85216: LD_VAR 0 4
85220: ARRAY
85221: PUSH
85222: FOR_IN
85223: IFFALSE 85249
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
85225: LD_VAR 0 3
85229: PUSH
85230: LD_INT 1
85232: ARRAY
85233: PPUSH
85234: LD_VAR 0 3
85238: PUSH
85239: LD_INT 2
85241: ARRAY
85242: PPUSH
85243: CALL_OW 235
85247: GO 85222
85249: POP
85250: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
85251: LD_ADDR_EXP 128
85255: PUSH
85256: LD_EXP 128
85260: PPUSH
85261: LD_VAR 0 4
85265: PPUSH
85266: EMPTY
85267: PPUSH
85268: CALL_OW 1
85272: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
85273: LD_VAR 0 1
85277: PPUSH
85278: LD_INT 0
85280: PPUSH
85281: CALL_OW 505
// end ; end ;
85285: LD_VAR 0 2
85289: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
85290: LD_INT 0
85292: PPUSH
85293: PPUSH
85294: PPUSH
// if not hack in hackTanks or not vehicles then
85295: LD_VAR 0 1
85299: PUSH
85300: LD_EXP 127
85304: IN
85305: NOT
85306: PUSH
85307: LD_VAR 0 2
85311: NOT
85312: OR
85313: IFFALSE 85317
// exit ;
85315: GO 85592
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
85317: LD_ADDR_VAR 0 2
85321: PUSH
85322: LD_VAR 0 1
85326: PPUSH
85327: LD_VAR 0 2
85331: PPUSH
85332: LD_INT 1
85334: PPUSH
85335: LD_INT 1
85337: PPUSH
85338: CALL 32083 0 4
85342: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
85343: LD_ADDR_VAR 0 5
85347: PUSH
85348: LD_EXP 127
85352: PPUSH
85353: LD_VAR 0 1
85357: PPUSH
85358: CALL 31433 0 2
85362: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
85363: LD_EXP 128
85367: PUSH
85368: LD_VAR 0 5
85372: ARRAY
85373: PUSH
85374: LD_EXP 129
85378: LESS
85379: IFFALSE 85568
// begin for i := 1 to vehicles do
85381: LD_ADDR_VAR 0 4
85385: PUSH
85386: DOUBLE
85387: LD_INT 1
85389: DEC
85390: ST_TO_ADDR
85391: LD_VAR 0 2
85395: PUSH
85396: FOR_TO
85397: IFFALSE 85566
// begin if hackTanksCaptured [ index ] = hackLimit then
85399: LD_EXP 128
85403: PUSH
85404: LD_VAR 0 5
85408: ARRAY
85409: PUSH
85410: LD_EXP 129
85414: EQUAL
85415: IFFALSE 85419
// break ;
85417: GO 85566
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
85419: LD_ADDR_EXP 131
85423: PUSH
85424: LD_EXP 131
85428: PPUSH
85429: LD_VAR 0 5
85433: PPUSH
85434: LD_EXP 131
85438: PUSH
85439: LD_VAR 0 5
85443: ARRAY
85444: PUSH
85445: LD_INT 1
85447: PLUS
85448: PPUSH
85449: CALL_OW 1
85453: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
85454: LD_ADDR_EXP 128
85458: PUSH
85459: LD_EXP 128
85463: PPUSH
85464: LD_VAR 0 5
85468: PUSH
85469: LD_EXP 128
85473: PUSH
85474: LD_VAR 0 5
85478: ARRAY
85479: PUSH
85480: LD_INT 1
85482: PLUS
85483: PUSH
85484: EMPTY
85485: LIST
85486: LIST
85487: PPUSH
85488: LD_VAR 0 2
85492: PUSH
85493: LD_VAR 0 4
85497: ARRAY
85498: PUSH
85499: LD_VAR 0 2
85503: PUSH
85504: LD_VAR 0 4
85508: ARRAY
85509: PPUSH
85510: CALL_OW 255
85514: PUSH
85515: EMPTY
85516: LIST
85517: LIST
85518: PPUSH
85519: CALL 31648 0 3
85523: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
85524: LD_VAR 0 2
85528: PUSH
85529: LD_VAR 0 4
85533: ARRAY
85534: PPUSH
85535: LD_VAR 0 1
85539: PPUSH
85540: CALL_OW 255
85544: PPUSH
85545: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
85549: LD_VAR 0 2
85553: PUSH
85554: LD_VAR 0 4
85558: ARRAY
85559: PPUSH
85560: CALL_OW 141
// end ;
85564: GO 85396
85566: POP
85567: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
85568: LD_VAR 0 1
85572: PPUSH
85573: LD_EXP 128
85577: PUSH
85578: LD_VAR 0 5
85582: ARRAY
85583: PUSH
85584: LD_INT 0
85586: PLUS
85587: PPUSH
85588: CALL_OW 505
// end ;
85592: LD_VAR 0 3
85596: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
85597: LD_INT 0
85599: PPUSH
85600: PPUSH
85601: PPUSH
85602: PPUSH
// if not hack in hackTanks then
85603: LD_VAR 0 1
85607: PUSH
85608: LD_EXP 127
85612: IN
85613: NOT
85614: IFFALSE 85618
// exit ;
85616: GO 85858
// index := GetElementIndex ( hackTanks , hack ) ;
85618: LD_ADDR_VAR 0 4
85622: PUSH
85623: LD_EXP 127
85627: PPUSH
85628: LD_VAR 0 1
85632: PPUSH
85633: CALL 31433 0 2
85637: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
85638: LD_ADDR_VAR 0 3
85642: PUSH
85643: DOUBLE
85644: LD_EXP 128
85648: PUSH
85649: LD_VAR 0 4
85653: ARRAY
85654: INC
85655: ST_TO_ADDR
85656: LD_INT 1
85658: PUSH
85659: FOR_DOWNTO
85660: IFFALSE 85832
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
85662: LD_ADDR_VAR 0 5
85666: PUSH
85667: LD_EXP 128
85671: PUSH
85672: LD_VAR 0 4
85676: ARRAY
85677: PUSH
85678: LD_VAR 0 3
85682: ARRAY
85683: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
85684: LD_VAR 0 5
85688: PUSH
85689: LD_INT 1
85691: ARRAY
85692: PPUSH
85693: CALL_OW 302
85697: NOT
85698: PUSH
85699: LD_VAR 0 5
85703: PUSH
85704: LD_INT 1
85706: ARRAY
85707: PPUSH
85708: CALL_OW 255
85712: PUSH
85713: LD_VAR 0 1
85717: PPUSH
85718: CALL_OW 255
85722: NONEQUAL
85723: OR
85724: IFFALSE 85830
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
85726: LD_VAR 0 5
85730: PUSH
85731: LD_INT 1
85733: ARRAY
85734: PPUSH
85735: CALL_OW 305
85739: PUSH
85740: LD_VAR 0 5
85744: PUSH
85745: LD_INT 1
85747: ARRAY
85748: PPUSH
85749: CALL_OW 255
85753: PUSH
85754: LD_VAR 0 1
85758: PPUSH
85759: CALL_OW 255
85763: EQUAL
85764: AND
85765: IFFALSE 85789
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
85767: LD_VAR 0 5
85771: PUSH
85772: LD_INT 1
85774: ARRAY
85775: PPUSH
85776: LD_VAR 0 5
85780: PUSH
85781: LD_INT 2
85783: ARRAY
85784: PPUSH
85785: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
85789: LD_ADDR_EXP 128
85793: PUSH
85794: LD_EXP 128
85798: PPUSH
85799: LD_VAR 0 4
85803: PPUSH
85804: LD_EXP 128
85808: PUSH
85809: LD_VAR 0 4
85813: ARRAY
85814: PPUSH
85815: LD_VAR 0 3
85819: PPUSH
85820: CALL_OW 3
85824: PPUSH
85825: CALL_OW 1
85829: ST_TO_ADDR
// end ; end ;
85830: GO 85659
85832: POP
85833: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
85834: LD_VAR 0 1
85838: PPUSH
85839: LD_EXP 128
85843: PUSH
85844: LD_VAR 0 4
85848: ARRAY
85849: PUSH
85850: LD_INT 0
85852: PLUS
85853: PPUSH
85854: CALL_OW 505
// end ;
85858: LD_VAR 0 2
85862: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
85863: LD_INT 0
85865: PPUSH
85866: PPUSH
85867: PPUSH
85868: PPUSH
// if not hack in hackTanks then
85869: LD_VAR 0 1
85873: PUSH
85874: LD_EXP 127
85878: IN
85879: NOT
85880: IFFALSE 85884
// exit ;
85882: GO 85969
// index := GetElementIndex ( hackTanks , hack ) ;
85884: LD_ADDR_VAR 0 5
85888: PUSH
85889: LD_EXP 127
85893: PPUSH
85894: LD_VAR 0 1
85898: PPUSH
85899: CALL 31433 0 2
85903: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
85904: LD_ADDR_VAR 0 4
85908: PUSH
85909: DOUBLE
85910: LD_INT 1
85912: DEC
85913: ST_TO_ADDR
85914: LD_EXP 128
85918: PUSH
85919: LD_VAR 0 5
85923: ARRAY
85924: PUSH
85925: FOR_TO
85926: IFFALSE 85967
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
85928: LD_EXP 128
85932: PUSH
85933: LD_VAR 0 5
85937: ARRAY
85938: PUSH
85939: LD_VAR 0 4
85943: ARRAY
85944: PUSH
85945: LD_INT 1
85947: ARRAY
85948: PUSH
85949: LD_VAR 0 2
85953: EQUAL
85954: IFFALSE 85965
// KillUnit ( vehicle ) ;
85956: LD_VAR 0 2
85960: PPUSH
85961: CALL_OW 66
85965: GO 85925
85967: POP
85968: POP
// end ;
85969: LD_VAR 0 3
85973: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
85974: LD_EXP 132
85978: NOT
85979: IFFALSE 86014
85981: GO 85983
85983: DISABLE
// begin initMiner := true ;
85984: LD_ADDR_EXP 132
85988: PUSH
85989: LD_INT 1
85991: ST_TO_ADDR
// minersList := [ ] ;
85992: LD_ADDR_EXP 133
85996: PUSH
85997: EMPTY
85998: ST_TO_ADDR
// minerMinesList := [ ] ;
85999: LD_ADDR_EXP 134
86003: PUSH
86004: EMPTY
86005: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
86006: LD_ADDR_EXP 135
86010: PUSH
86011: LD_INT 5
86013: ST_TO_ADDR
// end ;
86014: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
86015: LD_EXP 132
86019: PUSH
86020: LD_INT 34
86022: PUSH
86023: LD_INT 81
86025: PUSH
86026: EMPTY
86027: LIST
86028: LIST
86029: PPUSH
86030: CALL_OW 69
86034: AND
86035: IFFALSE 86496
86037: GO 86039
86039: DISABLE
86040: LD_INT 0
86042: PPUSH
86043: PPUSH
86044: PPUSH
86045: PPUSH
// begin enable ;
86046: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
86047: LD_ADDR_VAR 0 1
86051: PUSH
86052: LD_INT 34
86054: PUSH
86055: LD_INT 81
86057: PUSH
86058: EMPTY
86059: LIST
86060: LIST
86061: PPUSH
86062: CALL_OW 69
86066: PUSH
86067: FOR_IN
86068: IFFALSE 86140
// begin if not i in minersList then
86070: LD_VAR 0 1
86074: PUSH
86075: LD_EXP 133
86079: IN
86080: NOT
86081: IFFALSE 86138
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
86083: LD_ADDR_EXP 133
86087: PUSH
86088: LD_EXP 133
86092: PPUSH
86093: LD_EXP 133
86097: PUSH
86098: LD_INT 1
86100: PLUS
86101: PPUSH
86102: LD_VAR 0 1
86106: PPUSH
86107: CALL_OW 1
86111: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
86112: LD_ADDR_EXP 134
86116: PUSH
86117: LD_EXP 134
86121: PPUSH
86122: LD_EXP 134
86126: PUSH
86127: LD_INT 1
86129: PLUS
86130: PPUSH
86131: EMPTY
86132: PPUSH
86133: CALL_OW 1
86137: ST_TO_ADDR
// end end ;
86138: GO 86067
86140: POP
86141: POP
// for i := minerMinesList downto 1 do
86142: LD_ADDR_VAR 0 1
86146: PUSH
86147: DOUBLE
86148: LD_EXP 134
86152: INC
86153: ST_TO_ADDR
86154: LD_INT 1
86156: PUSH
86157: FOR_DOWNTO
86158: IFFALSE 86494
// begin if IsLive ( minersList [ i ] ) then
86160: LD_EXP 133
86164: PUSH
86165: LD_VAR 0 1
86169: ARRAY
86170: PPUSH
86171: CALL_OW 300
86175: IFFALSE 86203
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
86177: LD_EXP 133
86181: PUSH
86182: LD_VAR 0 1
86186: ARRAY
86187: PPUSH
86188: LD_EXP 134
86192: PUSH
86193: LD_VAR 0 1
86197: ARRAY
86198: PPUSH
86199: CALL_OW 505
// if not minerMinesList [ i ] then
86203: LD_EXP 134
86207: PUSH
86208: LD_VAR 0 1
86212: ARRAY
86213: NOT
86214: IFFALSE 86218
// continue ;
86216: GO 86157
// for j := minerMinesList [ i ] downto 1 do
86218: LD_ADDR_VAR 0 2
86222: PUSH
86223: DOUBLE
86224: LD_EXP 134
86228: PUSH
86229: LD_VAR 0 1
86233: ARRAY
86234: INC
86235: ST_TO_ADDR
86236: LD_INT 1
86238: PUSH
86239: FOR_DOWNTO
86240: IFFALSE 86490
// begin side := GetSide ( minersList [ i ] ) ;
86242: LD_ADDR_VAR 0 3
86246: PUSH
86247: LD_EXP 133
86251: PUSH
86252: LD_VAR 0 1
86256: ARRAY
86257: PPUSH
86258: CALL_OW 255
86262: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
86263: LD_ADDR_VAR 0 4
86267: PUSH
86268: LD_EXP 134
86272: PUSH
86273: LD_VAR 0 1
86277: ARRAY
86278: PUSH
86279: LD_VAR 0 2
86283: ARRAY
86284: PUSH
86285: LD_INT 1
86287: ARRAY
86288: PPUSH
86289: LD_EXP 134
86293: PUSH
86294: LD_VAR 0 1
86298: ARRAY
86299: PUSH
86300: LD_VAR 0 2
86304: ARRAY
86305: PUSH
86306: LD_INT 2
86308: ARRAY
86309: PPUSH
86310: CALL_OW 428
86314: ST_TO_ADDR
// if not tmp then
86315: LD_VAR 0 4
86319: NOT
86320: IFFALSE 86324
// continue ;
86322: GO 86239
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
86324: LD_VAR 0 4
86328: PUSH
86329: LD_INT 81
86331: PUSH
86332: LD_VAR 0 3
86336: PUSH
86337: EMPTY
86338: LIST
86339: LIST
86340: PPUSH
86341: CALL_OW 69
86345: IN
86346: PUSH
86347: LD_EXP 134
86351: PUSH
86352: LD_VAR 0 1
86356: ARRAY
86357: PUSH
86358: LD_VAR 0 2
86362: ARRAY
86363: PUSH
86364: LD_INT 1
86366: ARRAY
86367: PPUSH
86368: LD_EXP 134
86372: PUSH
86373: LD_VAR 0 1
86377: ARRAY
86378: PUSH
86379: LD_VAR 0 2
86383: ARRAY
86384: PUSH
86385: LD_INT 2
86387: ARRAY
86388: PPUSH
86389: CALL_OW 458
86393: AND
86394: IFFALSE 86488
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
86396: LD_EXP 134
86400: PUSH
86401: LD_VAR 0 1
86405: ARRAY
86406: PUSH
86407: LD_VAR 0 2
86411: ARRAY
86412: PUSH
86413: LD_INT 1
86415: ARRAY
86416: PPUSH
86417: LD_EXP 134
86421: PUSH
86422: LD_VAR 0 1
86426: ARRAY
86427: PUSH
86428: LD_VAR 0 2
86432: ARRAY
86433: PUSH
86434: LD_INT 2
86436: ARRAY
86437: PPUSH
86438: LD_VAR 0 3
86442: PPUSH
86443: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
86447: LD_ADDR_EXP 134
86451: PUSH
86452: LD_EXP 134
86456: PPUSH
86457: LD_VAR 0 1
86461: PPUSH
86462: LD_EXP 134
86466: PUSH
86467: LD_VAR 0 1
86471: ARRAY
86472: PPUSH
86473: LD_VAR 0 2
86477: PPUSH
86478: CALL_OW 3
86482: PPUSH
86483: CALL_OW 1
86487: ST_TO_ADDR
// end ; end ;
86488: GO 86239
86490: POP
86491: POP
// end ;
86492: GO 86157
86494: POP
86495: POP
// end ;
86496: PPOPN 4
86498: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
86499: LD_INT 0
86501: PPUSH
86502: PPUSH
// result := false ;
86503: LD_ADDR_VAR 0 4
86507: PUSH
86508: LD_INT 0
86510: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
86511: LD_VAR 0 1
86515: PPUSH
86516: CALL_OW 264
86520: PUSH
86521: LD_INT 81
86523: EQUAL
86524: NOT
86525: IFFALSE 86529
// exit ;
86527: GO 86769
// index := GetElementIndex ( minersList , unit ) ;
86529: LD_ADDR_VAR 0 5
86533: PUSH
86534: LD_EXP 133
86538: PPUSH
86539: LD_VAR 0 1
86543: PPUSH
86544: CALL 31433 0 2
86548: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
86549: LD_EXP 134
86553: PUSH
86554: LD_VAR 0 5
86558: ARRAY
86559: PUSH
86560: LD_EXP 135
86564: GREATEREQUAL
86565: IFFALSE 86569
// exit ;
86567: GO 86769
// ComMoveXY ( unit , x , y ) ;
86569: LD_VAR 0 1
86573: PPUSH
86574: LD_VAR 0 2
86578: PPUSH
86579: LD_VAR 0 3
86583: PPUSH
86584: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
86588: LD_INT 35
86590: PPUSH
86591: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
86595: LD_VAR 0 1
86599: PPUSH
86600: LD_VAR 0 2
86604: PPUSH
86605: LD_VAR 0 3
86609: PPUSH
86610: CALL 62769 0 3
86614: NOT
86615: PUSH
86616: LD_VAR 0 1
86620: PPUSH
86621: CALL_OW 314
86625: AND
86626: IFFALSE 86630
// exit ;
86628: GO 86769
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
86630: LD_VAR 0 2
86634: PPUSH
86635: LD_VAR 0 3
86639: PPUSH
86640: CALL_OW 428
86644: PUSH
86645: LD_VAR 0 1
86649: EQUAL
86650: PUSH
86651: LD_VAR 0 1
86655: PPUSH
86656: CALL_OW 314
86660: NOT
86661: AND
86662: IFFALSE 86588
// PlaySoundXY ( x , y , PlantMine ) ;
86664: LD_VAR 0 2
86668: PPUSH
86669: LD_VAR 0 3
86673: PPUSH
86674: LD_STRING PlantMine
86676: PPUSH
86677: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
86681: LD_VAR 0 2
86685: PPUSH
86686: LD_VAR 0 3
86690: PPUSH
86691: LD_VAR 0 1
86695: PPUSH
86696: CALL_OW 255
86700: PPUSH
86701: LD_INT 0
86703: PPUSH
86704: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
86708: LD_ADDR_EXP 134
86712: PUSH
86713: LD_EXP 134
86717: PPUSH
86718: LD_VAR 0 5
86722: PUSH
86723: LD_EXP 134
86727: PUSH
86728: LD_VAR 0 5
86732: ARRAY
86733: PUSH
86734: LD_INT 1
86736: PLUS
86737: PUSH
86738: EMPTY
86739: LIST
86740: LIST
86741: PPUSH
86742: LD_VAR 0 2
86746: PUSH
86747: LD_VAR 0 3
86751: PUSH
86752: EMPTY
86753: LIST
86754: LIST
86755: PPUSH
86756: CALL 31648 0 3
86760: ST_TO_ADDR
// result := true ;
86761: LD_ADDR_VAR 0 4
86765: PUSH
86766: LD_INT 1
86768: ST_TO_ADDR
// end ;
86769: LD_VAR 0 4
86773: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
86774: LD_INT 0
86776: PPUSH
86777: PPUSH
86778: PPUSH
// if not unit in minersList then
86779: LD_VAR 0 1
86783: PUSH
86784: LD_EXP 133
86788: IN
86789: NOT
86790: IFFALSE 86794
// exit ;
86792: GO 87186
// index := GetElementIndex ( minersList , unit ) ;
86794: LD_ADDR_VAR 0 6
86798: PUSH
86799: LD_EXP 133
86803: PPUSH
86804: LD_VAR 0 1
86808: PPUSH
86809: CALL 31433 0 2
86813: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
86814: LD_ADDR_VAR 0 5
86818: PUSH
86819: DOUBLE
86820: LD_EXP 134
86824: PUSH
86825: LD_VAR 0 6
86829: ARRAY
86830: INC
86831: ST_TO_ADDR
86832: LD_INT 1
86834: PUSH
86835: FOR_DOWNTO
86836: IFFALSE 86997
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
86838: LD_EXP 134
86842: PUSH
86843: LD_VAR 0 6
86847: ARRAY
86848: PUSH
86849: LD_VAR 0 5
86853: ARRAY
86854: PUSH
86855: LD_INT 1
86857: ARRAY
86858: PUSH
86859: LD_VAR 0 2
86863: EQUAL
86864: PUSH
86865: LD_EXP 134
86869: PUSH
86870: LD_VAR 0 6
86874: ARRAY
86875: PUSH
86876: LD_VAR 0 5
86880: ARRAY
86881: PUSH
86882: LD_INT 2
86884: ARRAY
86885: PUSH
86886: LD_VAR 0 3
86890: EQUAL
86891: AND
86892: IFFALSE 86995
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
86894: LD_EXP 134
86898: PUSH
86899: LD_VAR 0 6
86903: ARRAY
86904: PUSH
86905: LD_VAR 0 5
86909: ARRAY
86910: PUSH
86911: LD_INT 1
86913: ARRAY
86914: PPUSH
86915: LD_EXP 134
86919: PUSH
86920: LD_VAR 0 6
86924: ARRAY
86925: PUSH
86926: LD_VAR 0 5
86930: ARRAY
86931: PUSH
86932: LD_INT 2
86934: ARRAY
86935: PPUSH
86936: LD_VAR 0 1
86940: PPUSH
86941: CALL_OW 255
86945: PPUSH
86946: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
86950: LD_ADDR_EXP 134
86954: PUSH
86955: LD_EXP 134
86959: PPUSH
86960: LD_VAR 0 6
86964: PPUSH
86965: LD_EXP 134
86969: PUSH
86970: LD_VAR 0 6
86974: ARRAY
86975: PPUSH
86976: LD_VAR 0 5
86980: PPUSH
86981: CALL_OW 3
86985: PPUSH
86986: CALL_OW 1
86990: ST_TO_ADDR
// exit ;
86991: POP
86992: POP
86993: GO 87186
// end ; end ;
86995: GO 86835
86997: POP
86998: POP
// for i := minerMinesList [ index ] downto 1 do
86999: LD_ADDR_VAR 0 5
87003: PUSH
87004: DOUBLE
87005: LD_EXP 134
87009: PUSH
87010: LD_VAR 0 6
87014: ARRAY
87015: INC
87016: ST_TO_ADDR
87017: LD_INT 1
87019: PUSH
87020: FOR_DOWNTO
87021: IFFALSE 87184
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
87023: LD_EXP 134
87027: PUSH
87028: LD_VAR 0 6
87032: ARRAY
87033: PUSH
87034: LD_VAR 0 5
87038: ARRAY
87039: PUSH
87040: LD_INT 1
87042: ARRAY
87043: PPUSH
87044: LD_EXP 134
87048: PUSH
87049: LD_VAR 0 6
87053: ARRAY
87054: PUSH
87055: LD_VAR 0 5
87059: ARRAY
87060: PUSH
87061: LD_INT 2
87063: ARRAY
87064: PPUSH
87065: LD_VAR 0 2
87069: PPUSH
87070: LD_VAR 0 3
87074: PPUSH
87075: CALL_OW 298
87079: PUSH
87080: LD_INT 6
87082: LESS
87083: IFFALSE 87182
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
87085: LD_EXP 134
87089: PUSH
87090: LD_VAR 0 6
87094: ARRAY
87095: PUSH
87096: LD_VAR 0 5
87100: ARRAY
87101: PUSH
87102: LD_INT 1
87104: ARRAY
87105: PPUSH
87106: LD_EXP 134
87110: PUSH
87111: LD_VAR 0 6
87115: ARRAY
87116: PUSH
87117: LD_VAR 0 5
87121: ARRAY
87122: PUSH
87123: LD_INT 2
87125: ARRAY
87126: PPUSH
87127: LD_VAR 0 1
87131: PPUSH
87132: CALL_OW 255
87136: PPUSH
87137: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
87141: LD_ADDR_EXP 134
87145: PUSH
87146: LD_EXP 134
87150: PPUSH
87151: LD_VAR 0 6
87155: PPUSH
87156: LD_EXP 134
87160: PUSH
87161: LD_VAR 0 6
87165: ARRAY
87166: PPUSH
87167: LD_VAR 0 5
87171: PPUSH
87172: CALL_OW 3
87176: PPUSH
87177: CALL_OW 1
87181: ST_TO_ADDR
// end ; end ;
87182: GO 87020
87184: POP
87185: POP
// end ;
87186: LD_VAR 0 4
87190: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
87191: LD_INT 0
87193: PPUSH
87194: PPUSH
87195: PPUSH
87196: PPUSH
87197: PPUSH
87198: PPUSH
87199: PPUSH
87200: PPUSH
87201: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
87202: LD_VAR 0 1
87206: PPUSH
87207: CALL_OW 264
87211: PUSH
87212: LD_INT 81
87214: EQUAL
87215: NOT
87216: PUSH
87217: LD_VAR 0 1
87221: PUSH
87222: LD_EXP 133
87226: IN
87227: NOT
87228: OR
87229: IFFALSE 87233
// exit ;
87231: GO 87555
// index := GetElementIndex ( minersList , unit ) ;
87233: LD_ADDR_VAR 0 6
87237: PUSH
87238: LD_EXP 133
87242: PPUSH
87243: LD_VAR 0 1
87247: PPUSH
87248: CALL 31433 0 2
87252: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
87253: LD_ADDR_VAR 0 8
87257: PUSH
87258: LD_EXP 135
87262: PUSH
87263: LD_EXP 134
87267: PUSH
87268: LD_VAR 0 6
87272: ARRAY
87273: MINUS
87274: ST_TO_ADDR
// if not minesFreeAmount then
87275: LD_VAR 0 8
87279: NOT
87280: IFFALSE 87284
// exit ;
87282: GO 87555
// tmp := [ ] ;
87284: LD_ADDR_VAR 0 7
87288: PUSH
87289: EMPTY
87290: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
87291: LD_ADDR_VAR 0 5
87295: PUSH
87296: DOUBLE
87297: LD_INT 1
87299: DEC
87300: ST_TO_ADDR
87301: LD_VAR 0 8
87305: PUSH
87306: FOR_TO
87307: IFFALSE 87502
// begin _d := rand ( 0 , 5 ) ;
87309: LD_ADDR_VAR 0 11
87313: PUSH
87314: LD_INT 0
87316: PPUSH
87317: LD_INT 5
87319: PPUSH
87320: CALL_OW 12
87324: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
87325: LD_ADDR_VAR 0 12
87329: PUSH
87330: LD_INT 2
87332: PPUSH
87333: LD_INT 6
87335: PPUSH
87336: CALL_OW 12
87340: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
87341: LD_ADDR_VAR 0 9
87345: PUSH
87346: LD_VAR 0 2
87350: PPUSH
87351: LD_VAR 0 11
87355: PPUSH
87356: LD_VAR 0 12
87360: PPUSH
87361: CALL_OW 272
87365: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
87366: LD_ADDR_VAR 0 10
87370: PUSH
87371: LD_VAR 0 3
87375: PPUSH
87376: LD_VAR 0 11
87380: PPUSH
87381: LD_VAR 0 12
87385: PPUSH
87386: CALL_OW 273
87390: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
87391: LD_VAR 0 9
87395: PPUSH
87396: LD_VAR 0 10
87400: PPUSH
87401: CALL_OW 488
87405: PUSH
87406: LD_VAR 0 9
87410: PUSH
87411: LD_VAR 0 10
87415: PUSH
87416: EMPTY
87417: LIST
87418: LIST
87419: PUSH
87420: LD_VAR 0 7
87424: IN
87425: NOT
87426: AND
87427: PUSH
87428: LD_VAR 0 9
87432: PPUSH
87433: LD_VAR 0 10
87437: PPUSH
87438: CALL_OW 458
87442: NOT
87443: AND
87444: IFFALSE 87486
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
87446: LD_ADDR_VAR 0 7
87450: PUSH
87451: LD_VAR 0 7
87455: PPUSH
87456: LD_VAR 0 7
87460: PUSH
87461: LD_INT 1
87463: PLUS
87464: PPUSH
87465: LD_VAR 0 9
87469: PUSH
87470: LD_VAR 0 10
87474: PUSH
87475: EMPTY
87476: LIST
87477: LIST
87478: PPUSH
87479: CALL_OW 1
87483: ST_TO_ADDR
87484: GO 87500
// i := i - 1 ;
87486: LD_ADDR_VAR 0 5
87490: PUSH
87491: LD_VAR 0 5
87495: PUSH
87496: LD_INT 1
87498: MINUS
87499: ST_TO_ADDR
// end ;
87500: GO 87306
87502: POP
87503: POP
// for i in tmp do
87504: LD_ADDR_VAR 0 5
87508: PUSH
87509: LD_VAR 0 7
87513: PUSH
87514: FOR_IN
87515: IFFALSE 87553
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
87517: LD_VAR 0 1
87521: PPUSH
87522: LD_VAR 0 5
87526: PUSH
87527: LD_INT 1
87529: ARRAY
87530: PPUSH
87531: LD_VAR 0 5
87535: PUSH
87536: LD_INT 2
87538: ARRAY
87539: PPUSH
87540: CALL 86499 0 3
87544: NOT
87545: IFFALSE 87551
// exit ;
87547: POP
87548: POP
87549: GO 87555
87551: GO 87514
87553: POP
87554: POP
// end ;
87555: LD_VAR 0 4
87559: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
87560: LD_INT 0
87562: PPUSH
87563: PPUSH
87564: PPUSH
87565: PPUSH
87566: PPUSH
87567: PPUSH
87568: PPUSH
// if not GetClass ( unit ) = class_sniper then
87569: LD_VAR 0 1
87573: PPUSH
87574: CALL_OW 257
87578: PUSH
87579: LD_INT 5
87581: EQUAL
87582: NOT
87583: IFFALSE 87587
// exit ;
87585: GO 87975
// dist := 8 ;
87587: LD_ADDR_VAR 0 5
87591: PUSH
87592: LD_INT 8
87594: ST_TO_ADDR
// viewRange := 12 ;
87595: LD_ADDR_VAR 0 7
87599: PUSH
87600: LD_INT 12
87602: ST_TO_ADDR
// side := GetSide ( unit ) ;
87603: LD_ADDR_VAR 0 6
87607: PUSH
87608: LD_VAR 0 1
87612: PPUSH
87613: CALL_OW 255
87617: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
87618: LD_INT 61
87620: PPUSH
87621: LD_VAR 0 6
87625: PPUSH
87626: CALL_OW 321
87630: PUSH
87631: LD_INT 2
87633: EQUAL
87634: IFFALSE 87644
// viewRange := 16 ;
87636: LD_ADDR_VAR 0 7
87640: PUSH
87641: LD_INT 16
87643: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
87644: LD_VAR 0 1
87648: PPUSH
87649: LD_VAR 0 2
87653: PPUSH
87654: LD_VAR 0 3
87658: PPUSH
87659: CALL_OW 297
87663: PUSH
87664: LD_VAR 0 5
87668: GREATER
87669: IFFALSE 87748
// begin ComMoveXY ( unit , x , y ) ;
87671: LD_VAR 0 1
87675: PPUSH
87676: LD_VAR 0 2
87680: PPUSH
87681: LD_VAR 0 3
87685: PPUSH
87686: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
87690: LD_INT 35
87692: PPUSH
87693: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
87697: LD_VAR 0 1
87701: PPUSH
87702: LD_VAR 0 2
87706: PPUSH
87707: LD_VAR 0 3
87711: PPUSH
87712: CALL 62769 0 3
87716: NOT
87717: IFFALSE 87721
// exit ;
87719: GO 87975
// until GetDistUnitXY ( unit , x , y ) < dist ;
87721: LD_VAR 0 1
87725: PPUSH
87726: LD_VAR 0 2
87730: PPUSH
87731: LD_VAR 0 3
87735: PPUSH
87736: CALL_OW 297
87740: PUSH
87741: LD_VAR 0 5
87745: LESS
87746: IFFALSE 87690
// end ; ComTurnXY ( unit , x , y ) ;
87748: LD_VAR 0 1
87752: PPUSH
87753: LD_VAR 0 2
87757: PPUSH
87758: LD_VAR 0 3
87762: PPUSH
87763: CALL_OW 118
// wait ( 5 ) ;
87767: LD_INT 5
87769: PPUSH
87770: CALL_OW 67
// _d := GetDir ( unit ) ;
87774: LD_ADDR_VAR 0 10
87778: PUSH
87779: LD_VAR 0 1
87783: PPUSH
87784: CALL_OW 254
87788: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
87789: LD_ADDR_VAR 0 8
87793: PUSH
87794: LD_VAR 0 1
87798: PPUSH
87799: CALL_OW 250
87803: PPUSH
87804: LD_VAR 0 10
87808: PPUSH
87809: LD_VAR 0 5
87813: PPUSH
87814: CALL_OW 272
87818: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
87819: LD_ADDR_VAR 0 9
87823: PUSH
87824: LD_VAR 0 1
87828: PPUSH
87829: CALL_OW 251
87833: PPUSH
87834: LD_VAR 0 10
87838: PPUSH
87839: LD_VAR 0 5
87843: PPUSH
87844: CALL_OW 273
87848: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
87849: LD_VAR 0 8
87853: PPUSH
87854: LD_VAR 0 9
87858: PPUSH
87859: CALL_OW 488
87863: NOT
87864: IFFALSE 87868
// exit ;
87866: GO 87975
// ComAnimCustom ( unit , 1 ) ;
87868: LD_VAR 0 1
87872: PPUSH
87873: LD_INT 1
87875: PPUSH
87876: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
87880: LD_VAR 0 8
87884: PPUSH
87885: LD_VAR 0 9
87889: PPUSH
87890: LD_VAR 0 6
87894: PPUSH
87895: LD_VAR 0 7
87899: PPUSH
87900: CALL_OW 330
// repeat wait ( 1 ) ;
87904: LD_INT 1
87906: PPUSH
87907: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
87911: LD_VAR 0 1
87915: PPUSH
87916: CALL_OW 316
87920: PUSH
87921: LD_VAR 0 1
87925: PPUSH
87926: CALL_OW 314
87930: OR
87931: PUSH
87932: LD_VAR 0 1
87936: PPUSH
87937: CALL_OW 302
87941: NOT
87942: OR
87943: PUSH
87944: LD_VAR 0 1
87948: PPUSH
87949: CALL_OW 301
87953: OR
87954: IFFALSE 87904
// RemoveSeeing ( _x , _y , side ) ;
87956: LD_VAR 0 8
87960: PPUSH
87961: LD_VAR 0 9
87965: PPUSH
87966: LD_VAR 0 6
87970: PPUSH
87971: CALL_OW 331
// end ;
87975: LD_VAR 0 4
87979: RET
