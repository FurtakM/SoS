// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// InitEvents ;
   8: CALL 195 0 0
// PrepareRussian ;
  12: CALL 789 0 0
// PrepareArabian ;
  16: CALL 219 0 0
// Action ;
  20: CALL 1447 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// end ;
  37: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := true ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 1
  48: ST_TO_ADDR
// hasNormalScene := false ;
  49: LD_ADDR_EXP 5
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// prefix := 07_ ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_STRING 07_
  64: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  65: LD_ADDR_EXP 3
  69: PUSH
  70: LD_STRING 01_JohnnySaved
  72: PPUSH
  73: LD_INT 0
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// hasVodka := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  89: LD_ADDR_EXP 7
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// hasStimDrugs := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// hasExplosions := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanContact := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// hasSniperRifle := false ;
 121: LD_ADDR_EXP 10
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasScout := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// hasMethanol := false ;
 137: LD_ADDR_EXP 12
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// heikeSquad := [ ] ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: EMPTY
 151: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 152: LD_ADDR_EXP 14
 156: PUSH
 157: LD_INT 10
 159: PPUSH
 160: LD_INT 21
 162: PUSH
 163: LD_INT 3
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: PPUSH
 170: CALL_OW 70
 174: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 175: LD_ADDR_EXP 15
 179: PUSH
 180: EMPTY
 181: ST_TO_ADDR
// isAlarm := false ;
 182: LD_ADDR_EXP 16
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// end ;
 190: LD_VAR 0 1
 194: RET
// export eventCenterCamOnHeike , eventShowPlace ; function InitEvents ; begin
 195: LD_INT 0
 197: PPUSH
// eventCenterCamOnHeike := 1 ;
 198: LD_ADDR_EXP 17
 202: PUSH
 203: LD_INT 1
 205: ST_TO_ADDR
// eventShowPlace := 1 ;
 206: LD_ADDR_EXP 18
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// end ; end_of_file
 214: LD_VAR 0 1
 218: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export function PrepareArabian ; var i ; begin
 219: LD_INT 0
 221: PPUSH
 222: PPUSH
// uc_side := 4 ;
 223: LD_ADDR_OWVAR 20
 227: PUSH
 228: LD_INT 4
 230: ST_TO_ADDR
// uc_nation := 1 ;
 231: LD_ADDR_OWVAR 21
 235: PUSH
 236: LD_INT 1
 238: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 239: LD_ADDR_EXP 31
 243: PUSH
 244: LD_STRING 07_Americans
 246: PPUSH
 247: CALL_OW 31
 251: ST_TO_ADDR
// if americanSquad < 5 then
 252: LD_EXP 31
 256: PUSH
 257: LD_INT 5
 259: LESS
 260: IFFALSE 317
// begin for i := americanSquad to 5 do
 262: LD_ADDR_VAR 0 2
 266: PUSH
 267: DOUBLE
 268: LD_EXP 31
 272: DEC
 273: ST_TO_ADDR
 274: LD_INT 5
 276: PUSH
 277: FOR_TO
 278: IFFALSE 315
// begin PrepareHuman ( false , 2 , 6 ) ;
 280: LD_INT 0
 282: PPUSH
 283: LD_INT 2
 285: PPUSH
 286: LD_INT 6
 288: PPUSH
 289: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 293: LD_ADDR_EXP 31
 297: PUSH
 298: LD_EXP 31
 302: PPUSH
 303: CALL_OW 44
 307: PPUSH
 308: CALL 42471 0 2
 312: ST_TO_ADDR
// end ;
 313: GO 277
 315: POP
 316: POP
// end ; Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 317: LD_ADDR_EXP 33
 321: PUSH
 322: LD_STRING UsCommander
 324: PPUSH
 325: LD_EXP 1
 329: NOT
 330: PPUSH
 331: LD_STRING 07_
 333: PPUSH
 334: CALL 5087 0 3
 338: ST_TO_ADDR
// americanSquad := Join ( americanSquad , Doug ) ;
 339: LD_ADDR_EXP 31
 343: PUSH
 344: LD_EXP 31
 348: PPUSH
 349: LD_EXP 33
 353: PPUSH
 354: CALL 42471 0 2
 358: ST_TO_ADDR
// if johnnySaved or debug then
 359: LD_EXP 3
 363: PUSH
 364: LD_EXP 1
 368: OR
 369: IFFALSE 404
// begin Harris := NewCharacter ( Harris ) ;
 371: LD_ADDR_EXP 32
 375: PUSH
 376: LD_STRING Harris
 378: PPUSH
 379: CALL_OW 25
 383: ST_TO_ADDR
// americanSquad := Join ( americanSquad , Harris ) ;
 384: LD_ADDR_EXP 31
 388: PUSH
 389: LD_EXP 31
 393: PPUSH
 394: LD_EXP 32
 398: PPUSH
 399: CALL 42471 0 2
 403: ST_TO_ADDR
// end ; uc_side := 2 ;
 404: LD_ADDR_OWVAR 20
 408: PUSH
 409: LD_INT 2
 411: ST_TO_ADDR
// uc_nation := 2 ;
 412: LD_ADDR_OWVAR 21
 416: PUSH
 417: LD_INT 2
 419: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 420: LD_ADDR_EXP 19
 424: PUSH
 425: LD_STRING Heike
 427: PPUSH
 428: LD_EXP 1
 432: NOT
 433: PPUSH
 434: LD_EXP 2
 438: PPUSH
 439: CALL 5087 0 3
 443: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 444: LD_ADDR_EXP 22
 448: PUSH
 449: LD_STRING Ibrahim
 451: PPUSH
 452: LD_EXP 1
 456: NOT
 457: PPUSH
 458: LD_EXP 2
 462: PPUSH
 463: CALL 5087 0 3
 467: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 468: LD_ADDR_EXP 20
 472: PUSH
 473: LD_STRING Givi
 475: PPUSH
 476: LD_EXP 1
 480: NOT
 481: PPUSH
 482: LD_EXP 2
 486: PPUSH
 487: CALL 5087 0 3
 491: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 492: LD_ADDR_EXP 23
 496: PUSH
 497: LD_STRING Kamil
 499: PPUSH
 500: LD_EXP 1
 504: NOT
 505: PPUSH
 506: LD_EXP 2
 510: PPUSH
 511: CALL 5087 0 3
 515: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 516: LD_ADDR_EXP 24
 520: PUSH
 521: LD_STRING Kaia
 523: PPUSH
 524: LD_EXP 1
 528: NOT
 529: PPUSH
 530: LD_EXP 2
 534: PPUSH
 535: CALL 5087 0 3
 539: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 540: LD_ADDR_EXP 25
 544: PUSH
 545: LD_STRING Sophia
 547: PPUSH
 548: LD_EXP 1
 552: NOT
 553: PPUSH
 554: LD_EXP 2
 558: PPUSH
 559: CALL 5087 0 3
 563: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 564: LD_ADDR_EXP 26
 568: PUSH
 569: LD_STRING Markov
 571: PPUSH
 572: LD_EXP 1
 576: NOT
 577: PPUSH
 578: LD_EXP 2
 582: PPUSH
 583: CALL 5087 0 3
 587: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 588: LD_ADDR_EXP 29
 592: PUSH
 593: LD_STRING Aviradze
 595: PPUSH
 596: LD_EXP 1
 600: NOT
 601: PPUSH
 602: LD_EXP 2
 606: PPUSH
 607: CALL 5087 0 3
 611: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 612: LD_ADDR_EXP 28
 616: PUSH
 617: LD_STRING Kurt
 619: PPUSH
 620: LD_EXP 1
 624: NOT
 625: PPUSH
 626: LD_EXP 2
 630: PPUSH
 631: CALL 5087 0 3
 635: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 636: LD_ADDR_EXP 21
 640: PUSH
 641: LD_STRING Mike
 643: PPUSH
 644: LD_EXP 1
 648: NOT
 649: PPUSH
 650: LD_EXP 2
 654: PPUSH
 655: CALL 5087 0 3
 659: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 660: LD_ADDR_EXP 27
 664: PUSH
 665: LD_STRING Olaf
 667: PPUSH
 668: LD_INT 0
 670: PPUSH
 671: LD_STRING 
 673: PPUSH
 674: CALL 5087 0 3
 678: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 679: LD_ADDR_EXP 30
 683: PUSH
 684: LD_STRING 07_others
 686: PPUSH
 687: CALL_OW 31
 691: ST_TO_ADDR
// end ;
 692: LD_VAR 0 1
 696: RET
// export function PrepareGame ; begin
 697: LD_INT 0
 699: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
 700: LD_EXP 19
 704: PPUSH
 705: LD_INT 23
 707: PPUSH
 708: CALL_OW 52
// if Givi then
 712: LD_EXP 20
 716: IFFALSE 754
// begin SetSide ( Givi , 5 ) ;
 718: LD_EXP 20
 722: PPUSH
 723: LD_INT 5
 725: PPUSH
 726: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
 730: LD_EXP 20
 734: PPUSH
 735: LD_INT 9
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 49
// ComHold ( Givi ) ;
 745: LD_EXP 20
 749: PPUSH
 750: CALL_OW 140
// end ; if Markov then
 754: LD_EXP 26
 758: IFFALSE 784
// begin SetSide ( Markov , 5 ) ;
 760: LD_EXP 26
 764: PPUSH
 765: LD_INT 5
 767: PPUSH
 768: CALL_OW 235
// PlaceHumanInUnit ( Markov , ruFac ) ;
 772: LD_EXP 26
 776: PPUSH
 777: LD_INT 61
 779: PPUSH
 780: CALL_OW 52
// end ; end ; end_of_file
 784: LD_VAR 0 1
 788: RET
// export russianKillers ; export function PrepareRussian ; var i , tmp ; begin
 789: LD_INT 0
 791: PPUSH
 792: PPUSH
 793: PPUSH
// uc_side := 3 ;
 794: LD_ADDR_OWVAR 20
 798: PUSH
 799: LD_INT 3
 801: ST_TO_ADDR
// uc_nation := 3 ;
 802: LD_ADDR_OWVAR 21
 806: PUSH
 807: LD_INT 3
 809: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 810: LD_ADDR_VAR 0 2
 814: PUSH
 815: LD_INT 21
 817: PUSH
 818: LD_INT 3
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: PPUSH
 825: CALL_OW 69
 829: PUSH
 830: FOR_IN
 831: IFFALSE 847
// SetBLevel ( i , 7 ) ;
 833: LD_VAR 0 2
 837: PPUSH
 838: LD_INT 7
 840: PPUSH
 841: CALL_OW 241
 845: GO 830
 847: POP
 848: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 849: LD_ADDR_VAR 0 2
 853: PUSH
 854: LD_INT 22
 856: PUSH
 857: LD_INT 3
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 2
 866: PUSH
 867: LD_INT 30
 869: PUSH
 870: LD_INT 0
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_INT 30
 879: PUSH
 880: LD_INT 1
 882: PUSH
 883: EMPTY
 884: LIST
 885: LIST
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: LIST
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PPUSH
 896: CALL_OW 69
 900: PUSH
 901: FOR_IN
 902: IFFALSE 946
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
 904: LD_VAR 0 2
 908: PPUSH
 909: CALL_OW 274
 913: PPUSH
 914: LD_INT 1
 916: PPUSH
 917: LD_INT 1000
 919: PPUSH
 920: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
 924: LD_VAR 0 2
 928: PPUSH
 929: CALL_OW 274
 933: PPUSH
 934: LD_INT 2
 936: PPUSH
 937: LD_INT 1000
 939: PPUSH
 940: CALL_OW 277
// end ;
 944: GO 901
 946: POP
 947: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
 948: LD_ADDR_VAR 0 2
 952: PUSH
 953: LD_INT 22
 955: PUSH
 956: LD_INT 3
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 30
 965: PUSH
 966: LD_INT 32
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 69
 981: PUSH
 982: FOR_IN
 983: IFFALSE 1017
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
 985: LD_INT 0
 987: PPUSH
 988: LD_INT 5
 990: PUSH
 991: LD_OWVAR 67
 995: PLUS
 996: PPUSH
 997: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
1001: CALL_OW 44
1005: PPUSH
1006: LD_VAR 0 2
1010: PPUSH
1011: CALL_OW 52
// end ;
1015: GO 982
1017: POP
1018: POP
// end ;
1019: LD_VAR 0 1
1023: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
1024: LD_INT 0
1026: PPUSH
1027: PPUSH
1028: PPUSH
1029: PPUSH
// uc_side := 3 ;
1030: LD_ADDR_OWVAR 20
1034: PUSH
1035: LD_INT 3
1037: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
1038: LD_ADDR_OWVAR 21
1042: PUSH
1043: LD_INT 1
1045: PPUSH
1046: LD_INT 3
1048: PPUSH
1049: CALL_OW 12
1053: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
1054: LD_ADDR_VAR 0 4
1058: PUSH
1059: LD_INT 5
1061: PPUSH
1062: LD_INT 0
1064: PPUSH
1065: CALL_OW 517
1069: ST_TO_ADDR
// for i := 1 to 3 do
1070: LD_ADDR_VAR 0 2
1074: PUSH
1075: DOUBLE
1076: LD_INT 1
1078: DEC
1079: ST_TO_ADDR
1080: LD_INT 3
1082: PUSH
1083: FOR_TO
1084: IFFALSE 1153
// begin PrepareHuman ( false , 33 , 0 ) ;
1086: LD_INT 0
1088: PPUSH
1089: LD_INT 33
1091: PPUSH
1092: LD_INT 0
1094: PPUSH
1095: CALL_OW 380
// un := CreateHuman ;
1099: LD_ADDR_VAR 0 3
1103: PUSH
1104: CALL_OW 44
1108: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
1109: LD_VAR 0 3
1113: PPUSH
1114: LD_VAR 0 4
1118: PUSH
1119: LD_INT 1
1121: ARRAY
1122: PUSH
1123: LD_VAR 0 2
1127: ARRAY
1128: PPUSH
1129: LD_VAR 0 4
1133: PUSH
1134: LD_INT 2
1136: ARRAY
1137: PUSH
1138: LD_VAR 0 2
1142: ARRAY
1143: PPUSH
1144: LD_INT 1
1146: PPUSH
1147: CALL_OW 601
// end ;
1151: GO 1083
1153: POP
1154: POP
// end ;
1155: LD_VAR 0 1
1159: RET
// export function PrepareFirstScene ; var i , un ; begin
1160: LD_INT 0
1162: PPUSH
1163: PPUSH
1164: PPUSH
// uc_side := 4 ;
1165: LD_ADDR_OWVAR 20
1169: PUSH
1170: LD_INT 4
1172: ST_TO_ADDR
// uc_nation := 1 ;
1173: LD_ADDR_OWVAR 21
1177: PUSH
1178: LD_INT 1
1180: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
1181: LD_INT 0
1183: PPUSH
1184: LD_INT 33
1186: PPUSH
1187: LD_INT 0
1189: PPUSH
1190: CALL_OW 380
// for i := 1 to 2 do
1194: LD_ADDR_VAR 0 2
1198: PUSH
1199: DOUBLE
1200: LD_INT 1
1202: DEC
1203: ST_TO_ADDR
1204: LD_INT 2
1206: PUSH
1207: FOR_TO
1208: IFFALSE 1273
// begin un := CreateHuman ;
1210: LD_ADDR_VAR 0 3
1214: PUSH
1215: CALL_OW 44
1219: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1220: LD_VAR 0 3
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
1232: LD_VAR 0 3
1236: PPUSH
1237: LD_INT 6
1239: PPUSH
1240: LD_INT 0
1242: PPUSH
1243: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
1247: LD_VAR 0 3
1251: PPUSH
1252: LD_INT 1
1254: PPUSH
1255: CALL 45627 0 2
// SetLives ( un , 300 ) ;
1259: LD_VAR 0 3
1263: PPUSH
1264: LD_INT 300
1266: PPUSH
1267: CALL_OW 234
// end ;
1271: GO 1207
1273: POP
1274: POP
// uc_side := 3 ;
1275: LD_ADDR_OWVAR 20
1279: PUSH
1280: LD_INT 3
1282: ST_TO_ADDR
// uc_nation := 3 ;
1283: LD_ADDR_OWVAR 21
1287: PUSH
1288: LD_INT 3
1290: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
1291: LD_INT 1
1293: PPUSH
1294: LD_INT 5
1296: PPUSH
1297: CALL_OW 381
// for i := 1 to 3 do
1301: LD_ADDR_VAR 0 2
1305: PUSH
1306: DOUBLE
1307: LD_INT 1
1309: DEC
1310: ST_TO_ADDR
1311: LD_INT 3
1313: PUSH
1314: FOR_TO
1315: IFFALSE 1388
// begin un := CreateHuman ;
1317: LD_ADDR_VAR 0 3
1321: PUSH
1322: CALL_OW 44
1326: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
1327: LD_ADDR_EXP 34
1331: PUSH
1332: LD_EXP 34
1336: PPUSH
1337: LD_VAR 0 3
1341: PPUSH
1342: CALL 42471 0 2
1346: ST_TO_ADDR
// SetDir ( un , 4 ) ;
1347: LD_VAR 0 3
1351: PPUSH
1352: LD_INT 4
1354: PPUSH
1355: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
1359: LD_VAR 0 3
1363: PPUSH
1364: LD_INT 7
1366: PPUSH
1367: LD_INT 0
1369: PPUSH
1370: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
1374: LD_VAR 0 3
1378: PPUSH
1379: LD_INT 4
1381: PPUSH
1382: CALL 45627 0 2
// end ;
1386: GO 1314
1388: POP
1389: POP
// un := CreateHuman ;
1390: LD_ADDR_VAR 0 3
1394: PUSH
1395: CALL_OW 44
1399: ST_TO_ADDR
// PlaceUnitXY ( un , 124 , 37 , false ) ;
1400: LD_VAR 0 3
1404: PPUSH
1405: LD_INT 124
1407: PPUSH
1408: LD_INT 37
1410: PPUSH
1411: LD_INT 0
1413: PPUSH
1414: CALL_OW 48
// SetDir ( un , 3 ) ;
1418: LD_VAR 0 3
1422: PPUSH
1423: LD_INT 3
1425: PPUSH
1426: CALL_OW 233
// ComLookAtDir ( un , 3 ) ;
1430: LD_VAR 0 3
1434: PPUSH
1435: LD_INT 3
1437: PPUSH
1438: CALL 45627 0 2
// end ; end_of_file
1442: LD_VAR 0 1
1446: RET
// export function Action ; var speaker , i , tmp ; begin
1447: LD_INT 0
1449: PPUSH
1450: PPUSH
1451: PPUSH
1452: PPUSH
// Video ( true ) ;
1453: LD_INT 1
1455: PPUSH
1456: CALL 42443 0 1
// hasNormalScene := Kaia or Givi ;
1460: LD_ADDR_EXP 5
1464: PUSH
1465: LD_EXP 24
1469: PUSH
1470: LD_EXP 20
1474: OR
1475: ST_TO_ADDR
// if hasNormalScene then
1476: LD_EXP 5
1480: IFFALSE 1715
// begin for i in americanSquad do
1482: LD_ADDR_VAR 0 3
1486: PUSH
1487: LD_EXP 31
1491: PUSH
1492: FOR_IN
1493: IFFALSE 1539
// begin SetClass ( i , 33 ) ;
1495: LD_VAR 0 3
1499: PPUSH
1500: LD_INT 33
1502: PPUSH
1503: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
1507: LD_VAR 0 3
1511: PPUSH
1512: LD_INT 78
1514: PPUSH
1515: LD_INT 16
1517: PPUSH
1518: LD_INT 5
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 50
// ComHold ( i ) ;
1528: LD_VAR 0 3
1532: PPUSH
1533: CALL_OW 140
// end ;
1537: GO 1492
1539: POP
1540: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi ] union heikeSecondSquad ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_EXP 21
1550: PUSH
1551: LD_EXP 22
1555: PUSH
1556: LD_EXP 23
1560: PUSH
1561: LD_EXP 24
1565: PUSH
1566: LD_EXP 25
1570: PUSH
1571: LD_EXP 26
1575: PUSH
1576: LD_EXP 27
1580: PUSH
1581: LD_EXP 28
1585: PUSH
1586: LD_EXP 20
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: PUSH
1602: LD_EXP 30
1606: UNION
1607: ST_TO_ADDR
// SetClass ( Heike , 33 ) ;
1608: LD_EXP 19
1612: PPUSH
1613: LD_INT 33
1615: PPUSH
1616: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
1620: LD_EXP 19
1624: PPUSH
1625: LD_INT 117
1627: PPUSH
1628: LD_INT 24
1630: PPUSH
1631: LD_INT 3
1633: PPUSH
1634: LD_INT 0
1636: PPUSH
1637: CALL 44613 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
1641: LD_EXP 19
1645: PPUSH
1646: LD_INT 123
1648: PPUSH
1649: LD_INT 39
1651: PPUSH
1652: CALL_OW 118
// for i in tmp do
1656: LD_ADDR_VAR 0 3
1660: PUSH
1661: LD_VAR 0 4
1665: PUSH
1666: FOR_IN
1667: IFFALSE 1713
// begin SetClass ( i , 33 ) ;
1669: LD_VAR 0 3
1673: PPUSH
1674: LD_INT 33
1676: PPUSH
1677: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
1681: LD_VAR 0 3
1685: PPUSH
1686: LD_INT 3
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
1696: LD_VAR 0 3
1700: PPUSH
1701: LD_INT 113
1703: PPUSH
1704: LD_INT 16
1706: PPUSH
1707: CALL_OW 118
// end ;
1711: GO 1666
1713: POP
1714: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
1715: LD_INT 124
1717: PPUSH
1718: LD_INT 39
1720: PPUSH
1721: CALL_OW 86
// PrepareDeadBodies ;
1725: CALL 1024 0 0
// PrepareFirstScene ;
1729: CALL 1160 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
1733: LD_INT 152
1735: PPUSH
1736: LD_INT 65
1738: PPUSH
1739: LD_INT 2
1741: PPUSH
1742: LD_INT 70
1744: NEG
1745: PPUSH
1746: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
1750: LD_INT 152
1752: PPUSH
1753: LD_INT 65
1755: PPUSH
1756: LD_INT 2
1758: PPUSH
1759: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
1763: LD_INT 122
1765: PPUSH
1766: LD_INT 40
1768: PPUSH
1769: LD_INT 2
1771: PPUSH
1772: LD_INT 8
1774: NEG
1775: PPUSH
1776: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
1780: LD_INT 124
1782: PPUSH
1783: LD_INT 37
1785: PPUSH
1786: CALL_OW 86
// speaker := HexInfo ( 124 , 37 ) ;
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_INT 124
1797: PPUSH
1798: LD_INT 37
1800: PPUSH
1801: CALL_OW 428
1805: ST_TO_ADDR
// Say ( speaker , DRum-Execution-1 ) ;
1806: LD_VAR 0 2
1810: PPUSH
1811: LD_STRING DRum-Execution-1
1813: PPUSH
1814: CALL_OW 88
// Say ( speaker , DRum-Execution-2 ) ;
1818: LD_VAR 0 2
1822: PPUSH
1823: LD_STRING DRum-Execution-2
1825: PPUSH
1826: CALL_OW 88
// wait ( 0 0$01 ) ;
1830: LD_INT 35
1832: PPUSH
1833: CALL_OW 67
// Say ( speaker , DRum-Execution-3 ) ;
1837: LD_VAR 0 2
1841: PPUSH
1842: LD_STRING DRum-Execution-3
1844: PPUSH
1845: CALL_OW 88
// wait ( 0 0$1 ) ;
1849: LD_INT 35
1851: PPUSH
1852: CALL_OW 67
// Say ( speaker , DRum-Execution-4 ) ;
1856: LD_VAR 0 2
1860: PPUSH
1861: LD_STRING DRum-Execution-4
1863: PPUSH
1864: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
1868: LD_EXP 34
1872: PUSH
1873: LD_INT 1
1875: ARRAY
1876: PPUSH
1877: LD_INT 122
1879: PPUSH
1880: LD_INT 39
1882: PPUSH
1883: CALL_OW 428
1887: PPUSH
1888: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
1892: LD_EXP 34
1896: PUSH
1897: LD_INT 2
1899: ARRAY
1900: PPUSH
1901: LD_INT 123
1903: PPUSH
1904: LD_INT 41
1906: PPUSH
1907: CALL_OW 428
1911: PPUSH
1912: CALL_OW 115
// AddComHold ( russianKillers ) ;
1916: LD_EXP 34
1920: PPUSH
1921: CALL_OW 200
// wait ( 0 0$1 ) ;
1925: LD_INT 35
1927: PPUSH
1928: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
1932: LD_INT 122
1934: PPUSH
1935: LD_INT 40
1937: PPUSH
1938: LD_INT 2
1940: PPUSH
1941: CALL_OW 331
// if hasNormalScene then
1945: LD_EXP 5
1949: IFFALSE 1957
// ActionNormal else
1951: CALL 1966 0 0
1955: GO 1961
// ActionAdditional ;
1957: CALL 3572 0 0
// end ;
1961: LD_VAR 0 1
1965: RET
// function ActionNormal ; var i , tmp ; begin
1966: LD_INT 0
1968: PPUSH
1969: PPUSH
1970: PPUSH
// CenterNowOnUnits ( Heike ) ;
1971: LD_EXP 19
1975: PPUSH
1976: CALL_OW 87
// wait ( 0 0$1 ) ;
1980: LD_INT 35
1982: PPUSH
1983: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
1987: LD_EXP 19
1991: PPUSH
1992: LD_INT 115
1994: PPUSH
1995: LD_INT 19
1997: PPUSH
1998: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
2002: LD_EXP 19
2006: PPUSH
2007: LD_INT 113
2009: PPUSH
2010: LD_INT 16
2012: PPUSH
2013: CALL_OW 178
// wait ( 0 0$2 ) ;
2017: LD_INT 70
2019: PPUSH
2020: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
2024: LD_EXP 19
2028: PPUSH
2029: LD_STRING DH-Conspiracy-1
2031: PPUSH
2032: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
2036: LD_EXP 24
2040: PPUSH
2041: LD_STRING DK-Conspiracy-2
2043: PPUSH
2044: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
2048: LD_EXP 20
2052: PPUSH
2053: LD_STRING DG-Conspiracy-3
2055: PPUSH
2056: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
2060: LD_EXP 20
2064: PPUSH
2065: LD_STRING DG-Conspiracy-4
2067: PPUSH
2068: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
2072: LD_EXP 19
2076: PPUSH
2077: LD_STRING DH-Conspiracy-5
2079: PPUSH
2080: CALL_OW 88
// if IsOk ( Kamil ) then
2084: LD_EXP 23
2088: PPUSH
2089: CALL_OW 302
2093: IFFALSE 2151
// begin hasVodka := true ;
2095: LD_ADDR_EXP 4
2099: PUSH
2100: LD_INT 1
2102: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
2103: LD_EXP 23
2107: PPUSH
2108: LD_STRING DKam-Conspiracy-6
2110: PPUSH
2111: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
2115: LD_EXP 23
2119: PPUSH
2120: LD_STRING DKam-Conspiracy-7
2122: PPUSH
2123: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
2127: LD_EXP 23
2131: PPUSH
2132: LD_STRING DKam-Conspiracy-8
2134: PPUSH
2135: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
2139: LD_EXP 23
2143: PPUSH
2144: LD_STRING DKam-Conspiracy-9
2146: PPUSH
2147: CALL_OW 88
// end ; if IsOk ( Sophia ) then
2151: LD_EXP 25
2155: PPUSH
2156: CALL_OW 302
2160: IFFALSE 2334
// begin americanContact := true ;
2162: LD_ADDR_EXP 9
2166: PUSH
2167: LD_INT 1
2169: ST_TO_ADDR
// Say ( Sophia , DS-Conspiracy-10 ) ;
2170: LD_EXP 25
2174: PPUSH
2175: LD_STRING DS-Conspiracy-10
2177: PPUSH
2178: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
2182: LD_EXP 26
2186: PPUSH
2187: LD_STRING DM-Conspiracy-11
2189: PPUSH
2190: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
2194: LD_EXP 25
2198: PPUSH
2199: LD_STRING DS-Conspiracy-12
2201: PPUSH
2202: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
2206: LD_INT 84
2208: PPUSH
2209: LD_INT 19
2211: PPUSH
2212: LD_INT 105
2214: PPUSH
2215: CALL 4783 0 3
// if johnnySaved then
2219: LD_EXP 3
2223: IFFALSE 2263
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
2225: LD_EXP 25
2229: PPUSH
2230: LD_STRING DS-Conspiracy-13
2232: PPUSH
2233: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
2237: LD_EXP 19
2241: PPUSH
2242: LD_STRING DH-Conspiracy-14
2244: PPUSH
2245: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
2249: LD_EXP 25
2253: PPUSH
2254: LD_STRING DH-Conspiracy-15
2256: PPUSH
2257: CALL_OW 88
// end else
2261: GO 2299
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
2263: LD_EXP 25
2267: PPUSH
2268: LD_STRING DS-Conspiracy-a-13
2270: PPUSH
2271: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
2275: LD_EXP 19
2279: PPUSH
2280: LD_STRING DH-Conspiracy-a-14
2282: PPUSH
2283: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-a-15 ) ;
2287: LD_EXP 25
2291: PPUSH
2292: LD_STRING DH-Conspiracy-a-15
2294: PPUSH
2295: CALL_OW 88
// end ; if IsOk ( Givi ) then
2299: LD_EXP 20
2303: PPUSH
2304: CALL_OW 302
2308: IFFALSE 2334
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
2310: LD_EXP 20
2314: PPUSH
2315: LD_STRING DG-Conspiracy-a-16
2317: PPUSH
2318: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
2322: LD_EXP 19
2326: PPUSH
2327: LD_STRING DH-Conspiracy-a-17
2329: PPUSH
2330: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
2334: LD_EXP 19
2338: PPUSH
2339: LD_STRING DH-Conspiracy-16
2341: PPUSH
2342: CALL_OW 88
// if IsOk ( Givi ) then
2346: LD_EXP 20
2350: PPUSH
2351: CALL_OW 302
2355: IFFALSE 2613
// begin hasStimDrugs := true ;
2357: LD_ADDR_EXP 8
2361: PUSH
2362: LD_INT 1
2364: ST_TO_ADDR
// Say ( Givi , DG-Conspiracy-17 ) ;
2365: LD_EXP 20
2369: PPUSH
2370: LD_STRING DG-Conspiracy-17
2372: PPUSH
2373: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
2377: LD_INT 87
2379: PPUSH
2380: LD_INT 2
2382: PPUSH
2383: CALL_OW 235
// ShowPlace ( 184 , 95 , 0 0$3 ) ;
2387: LD_INT 184
2389: PPUSH
2390: LD_INT 95
2392: PPUSH
2393: LD_INT 105
2395: PPUSH
2396: CALL 4783 0 3
// SetSide ( drugsLab , 3 ) ;
2400: LD_INT 87
2402: PPUSH
2403: LD_INT 3
2405: PPUSH
2406: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
2410: LD_EXP 20
2414: PPUSH
2415: LD_STRING DG-Conspiracy-18
2417: PPUSH
2418: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
2422: LD_EXP 20
2426: PPUSH
2427: LD_STRING DG-Conspiracy-19
2429: PPUSH
2430: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
2434: LD_EXP 20
2438: PPUSH
2439: LD_STRING DG-Conspiracy-20
2441: PPUSH
2442: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
2446: LD_EXP 19
2450: PPUSH
2451: LD_STRING DH-Conspiracy-21
2453: PPUSH
2454: CALL_OW 88
// if IsOk ( Kaia ) then
2458: LD_EXP 24
2462: PPUSH
2463: CALL_OW 302
2467: IFFALSE 2534
// begin hasExplosions := true ;
2469: LD_ADDR_EXP 6
2473: PUSH
2474: LD_INT 1
2476: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-22 ) ;
2477: LD_EXP 24
2481: PPUSH
2482: LD_STRING DK-Conspiracy-22
2484: PPUSH
2485: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
2489: LD_INT 73
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: CALL_OW 235
// ShowPlace ( 166 , 104 , 0 0$3 ) ;
2499: LD_INT 166
2501: PPUSH
2502: LD_INT 104
2504: PPUSH
2505: LD_INT 105
2507: PPUSH
2508: CALL 4783 0 3
// SetSide ( barExplosion , 3 ) ;
2512: LD_INT 73
2514: PPUSH
2515: LD_INT 3
2517: PPUSH
2518: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
2522: LD_EXP 24
2526: PPUSH
2527: LD_STRING DK-Conspiracy-23
2529: PPUSH
2530: CALL_OW 88
// end ; if IsOk ( Olaf ) then
2534: LD_EXP 27
2538: PPUSH
2539: CALL_OW 302
2543: IFFALSE 2613
// begin hasExplosionsInFactory := true ;
2545: LD_ADDR_EXP 7
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
2553: LD_EXP 27
2557: PPUSH
2558: LD_STRING DO-Conspiracy-24
2560: PPUSH
2561: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
2565: LD_INT 175
2567: PPUSH
2568: LD_INT 54
2570: PPUSH
2571: LD_INT 70
2573: PPUSH
2574: CALL 4783 0 3
// if IsOk ( Markov ) then
2578: LD_EXP 26
2582: PPUSH
2583: CALL_OW 302
2587: IFFALSE 2613
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
2589: LD_EXP 26
2593: PPUSH
2594: LD_STRING DMar-Conspiracy-25
2596: PPUSH
2597: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
2601: LD_EXP 26
2605: PPUSH
2606: LD_STRING DMar-Conspiracy-26
2608: PPUSH
2609: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
2613: LD_EXP 28
2617: PPUSH
2618: CALL_OW 302
2622: PUSH
2623: LD_EXP 24
2627: PPUSH
2628: CALL_OW 302
2632: AND
2633: IFFALSE 3049
// begin hasSniperRifle := true ;
2635: LD_ADDR_EXP 10
2639: PUSH
2640: LD_INT 1
2642: ST_TO_ADDR
// Say ( Kurt , DKs-Conspiracy-27 ) ;
2643: LD_EXP 28
2647: PPUSH
2648: LD_STRING DKs-Conspiracy-27
2650: PPUSH
2651: CALL_OW 88
// if IsOk ( Givi ) then
2655: LD_EXP 20
2659: PPUSH
2660: CALL_OW 302
2664: IFFALSE 2680
// Say ( Givi , DG-Conspiracy-28 ) else
2666: LD_EXP 20
2670: PPUSH
2671: LD_STRING DG-Conspiracy-28
2673: PPUSH
2674: CALL_OW 88
2678: GO 2745
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
2680: LD_EXP 30
2684: PPUSH
2685: LD_INT 26
2687: PUSH
2688: LD_INT 1
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PPUSH
2695: CALL_OW 72
2699: PUSH
2700: LD_INT 1
2702: ARRAY
2703: PPUSH
2704: LD_STRING DArm-Conspiracy-a-28
2706: PPUSH
2707: CALL_OW 88
2711: NOT
2712: IFFALSE 2745
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
2714: LD_EXP 30
2718: PPUSH
2719: LD_INT 26
2721: PUSH
2722: LD_INT 2
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PPUSH
2729: CALL_OW 72
2733: PUSH
2734: LD_INT 1
2736: ARRAY
2737: PPUSH
2738: LD_STRING DArf-Conspiracy-a-28
2740: PPUSH
2741: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
2745: LD_EXP 28
2749: PPUSH
2750: LD_STRING DKs-Conspiracy-29
2752: PPUSH
2753: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-30 ) ;
2757: LD_EXP 28
2761: PPUSH
2762: LD_STRING DKs-Conspiracy-30
2764: PPUSH
2765: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
2769: LD_EXP 24
2773: PPUSH
2774: LD_STRING DK-Conspiracy-31
2776: PPUSH
2777: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
2781: LD_EXP 26
2785: PPUSH
2786: LD_STRING DMar-Conspiracy-33
2788: PPUSH
2789: CALL_OW 88
2793: NOT
2794: PUSH
2795: LD_EXP 30
2799: AND
2800: IFFALSE 2867
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
2802: LD_EXP 30
2806: PPUSH
2807: LD_INT 26
2809: PUSH
2810: LD_INT 1
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PPUSH
2817: CALL_OW 72
2821: PUSH
2822: LD_INT 1
2824: ARRAY
2825: PPUSH
2826: LD_STRING DArm-Conspiracy-a-34
2828: PPUSH
2829: CALL_OW 88
2833: NOT
2834: IFFALSE 2867
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
2836: LD_EXP 30
2840: PPUSH
2841: LD_INT 26
2843: PUSH
2844: LD_INT 2
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: PPUSH
2851: CALL_OW 72
2855: PUSH
2856: LD_INT 1
2858: ARRAY
2859: PPUSH
2860: LD_STRING DArf-Conspiracy-a-34
2862: PPUSH
2863: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
2867: LD_EXP 24
2871: PPUSH
2872: LD_STRING DK-Conspiracy-34
2874: PPUSH
2875: CALL_OW 88
// if IsOk ( Markov ) then
2879: LD_EXP 26
2883: PPUSH
2884: CALL_OW 302
2888: IFFALSE 2965
// begin Say ( Markov , DMar-Conspiracy-35 ) ;
2890: LD_EXP 26
2894: PPUSH
2895: LD_STRING DMar-Conspiracy-35
2897: PPUSH
2898: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
2902: LD_EXP 24
2906: PPUSH
2907: LD_STRING DK-Conspiracy-36
2909: PPUSH
2910: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
2914: LD_EXP 26
2918: PPUSH
2919: LD_STRING DMar-Conspiracy-37
2921: PPUSH
2922: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
2926: LD_EXP 26
2930: PPUSH
2931: LD_STRING DMar-Conspiracy-38
2933: PPUSH
2934: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
2938: LD_INT 137
2940: PPUSH
2941: LD_INT 98
2943: PPUSH
2944: LD_INT 105
2946: PPUSH
2947: CALL 4783 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
2951: LD_EXP 26
2955: PPUSH
2956: LD_STRING DMar-Conspiracy-39
2958: PPUSH
2959: CALL_OW 88
// end else
2963: GO 3049
// if heikeSecondSquad then
2965: LD_EXP 30
2969: IFFALSE 3049
// begin ShowPlace ( 137 , 98 , 0 0$3 ) ;
2971: LD_INT 137
2973: PPUSH
2974: LD_INT 98
2976: PPUSH
2977: LD_INT 105
2979: PPUSH
2980: CALL 4783 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
2984: LD_EXP 30
2988: PPUSH
2989: LD_INT 26
2991: PUSH
2992: LD_INT 1
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PPUSH
2999: CALL_OW 72
3003: PUSH
3004: LD_INT 1
3006: ARRAY
3007: PPUSH
3008: LD_STRING DArm-Conspiracy-a-35
3010: PPUSH
3011: CALL_OW 88
3015: NOT
3016: IFFALSE 3049
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
3018: LD_EXP 30
3022: PPUSH
3023: LD_INT 26
3025: PUSH
3026: LD_INT 2
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PPUSH
3033: CALL_OW 72
3037: PUSH
3038: LD_INT 1
3040: ARRAY
3041: PPUSH
3042: LD_STRING DArf-Conspiracy-a-35
3044: PPUSH
3045: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
3049: LD_EXP 19
3053: PPUSH
3054: LD_STRING DH-Conspiracy-40
3056: PPUSH
3057: CALL_OW 88
// if IsOk ( Mike ) then
3061: LD_EXP 21
3065: PPUSH
3066: CALL_OW 302
3070: IFFALSE 3129
// begin hasScout := true ;
3072: LD_ADDR_EXP 11
3076: PUSH
3077: LD_INT 1
3079: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
3080: LD_EXP 21
3084: PPUSH
3085: LD_STRING DM-Conspiracy-41
3087: PPUSH
3088: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
3092: LD_EXP 21
3096: PPUSH
3097: LD_STRING DM-Conspiracy-42
3099: PPUSH
3100: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
3104: LD_INT 73
3106: PPUSH
3107: LD_INT 102
3109: PPUSH
3110: LD_INT 105
3112: PPUSH
3113: CALL 4783 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
3117: LD_EXP 21
3121: PPUSH
3122: LD_STRING DM-Conspiracy-43
3124: PPUSH
3125: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
3129: LD_EXP 4
3133: PUSH
3134: LD_EXP 24
3138: PPUSH
3139: CALL_OW 302
3143: AND
3144: PUSH
3145: LD_EXP 28
3149: PPUSH
3150: CALL_OW 302
3154: AND
3155: IFFALSE 3201
// begin hasMethanol := true ;
3157: LD_ADDR_EXP 12
3161: PUSH
3162: LD_INT 1
3164: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
3165: LD_EXP 24
3169: PPUSH
3170: LD_STRING DK-Conspiracy-44
3172: PPUSH
3173: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
3177: LD_EXP 24
3181: PPUSH
3182: LD_STRING DK-Conspiracy-45
3184: PPUSH
3185: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
3189: LD_EXP 23
3193: PPUSH
3194: LD_STRING DKam-Conspiracy-46
3196: PPUSH
3197: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
3201: LD_EXP 19
3205: PPUSH
3206: LD_STRING DH-Conspiracy-47
3208: PPUSH
3209: CALL_OW 88
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// your_side := 8 ;
3220: LD_ADDR_OWVAR 2
3224: PUSH
3225: LD_INT 8
3227: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
3228: LD_INT 1
3230: PPUSH
3231: LD_INT 1
3233: PPUSH
3234: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
3238: LD_ADDR_VAR 0 2
3242: PUSH
3243: LD_INT 22
3245: PUSH
3246: LD_INT 2
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PUSH
3253: LD_INT 21
3255: PUSH
3256: LD_INT 1
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PPUSH
3267: CALL_OW 69
3271: PUSH
3272: FOR_IN
3273: IFFALSE 3286
// RemoveUnit ( i ) ;
3275: LD_VAR 0 2
3279: PPUSH
3280: CALL_OW 64
3284: GO 3272
3286: POP
3287: POP
// wait ( 0 0$0.3 ) ;
3288: LD_INT 10
3290: PPUSH
3291: CALL_OW 67
// Query ( StartInfo1 ) ;
3295: LD_STRING StartInfo1
3297: PPUSH
3298: CALL_OW 97
// wait ( 0 0$1 ) ;
3302: LD_INT 35
3304: PPUSH
3305: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
3309: LD_STRING colors_night.txt
3311: PPUSH
3312: CALL_OW 544
// Query ( StartInfo2 ) ;
3316: LD_STRING StartInfo2
3318: PPUSH
3319: CALL_OW 97
// PrepareGame ;
3323: CALL 697 0 0
// your_side := 2 ;
3327: LD_ADDR_OWVAR 2
3331: PUSH
3332: LD_INT 2
3334: ST_TO_ADDR
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
3335: LD_INT 152
3337: PPUSH
3338: LD_INT 65
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: LD_INT 70
3346: NEG
3347: PPUSH
3348: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
3352: LD_INT 152
3354: PPUSH
3355: LD_INT 65
3357: PPUSH
3358: LD_INT 2
3360: PPUSH
3361: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
3365: LD_INT 133
3367: PPUSH
3368: LD_INT 76
3370: PPUSH
3371: LD_INT 2
3373: PPUSH
3374: LD_INT 6
3376: NEG
3377: PPUSH
3378: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
3382: LD_INT 23
3384: PPUSH
3385: CALL_OW 87
// wait ( 0 0$3 ) ;
3389: LD_INT 105
3391: PPUSH
3392: CALL_OW 67
// ComExitBuilding ( Heike ) ;
3396: LD_EXP 19
3400: PPUSH
3401: CALL_OW 122
// AddComMoveXY ( Heike , 128 , 64 ) ;
3405: LD_EXP 19
3409: PPUSH
3410: LD_INT 128
3412: PPUSH
3413: LD_INT 64
3415: PPUSH
3416: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
3420: LD_INT 35
3422: PPUSH
3423: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
3427: LD_EXP 19
3431: PPUSH
3432: LD_INT 128
3434: PPUSH
3435: LD_INT 64
3437: PPUSH
3438: CALL_OW 307
3442: IFFALSE 3420
// dialogue_skipped := false ;
3444: LD_ADDR_OWVAR 59
3448: PUSH
3449: LD_INT 0
3451: ST_TO_ADDR
// ComHold ( Heike ) ;
3452: LD_EXP 19
3456: PPUSH
3457: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
3461: LD_EXP 19
3465: PPUSH
3466: LD_STRING DH-Start-1
3468: PPUSH
3469: CALL_OW 88
// if not americanContact then
3473: LD_EXP 9
3477: NOT
3478: IFFALSE 3494
// Say ( Heike , DH-Start-c-2 ) else
3480: LD_EXP 19
3484: PPUSH
3485: LD_STRING DH-Start-c-2
3487: PPUSH
3488: CALL_OW 88
3492: GO 3526
// if johnnySaved then
3494: LD_EXP 3
3498: IFFALSE 3514
// Say ( Heike , DH-Start-a-2 ) else
3500: LD_EXP 19
3504: PPUSH
3505: LD_STRING DH-Start-a-2
3507: PPUSH
3508: CALL_OW 88
3512: GO 3526
// Say ( Heike , DH-Start-b-2 ) ;
3514: LD_EXP 19
3518: PPUSH
3519: LD_STRING DH-Start-b-2
3521: PPUSH
3522: CALL_OW 88
// Video ( false ) ;
3526: LD_INT 0
3528: PPUSH
3529: CALL 42443 0 1
// tick := 0 ;
3533: LD_ADDR_OWVAR 1
3537: PUSH
3538: LD_INT 0
3540: ST_TO_ADDR
// if americanContact then
3541: LD_EXP 9
3545: IFFALSE 3556
// ChangeMissionObjectives ( M1a ) else
3547: LD_STRING M1a
3549: PPUSH
3550: CALL_OW 337
3554: GO 3563
// ChangeMissionObjectives ( M1 ) ;
3556: LD_STRING M1
3558: PPUSH
3559: CALL_OW 337
// SaveForQuickRestart ;
3563: CALL_OW 22
// end ;
3567: LD_VAR 0 1
3571: RET
// function ActionAdditional ; var i , un , tmp ; begin
3572: LD_INT 0
3574: PPUSH
3575: PPUSH
3576: PPUSH
3577: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
3578: LD_INT 115
3580: PPUSH
3581: LD_INT 27
3583: PPUSH
3584: LD_INT 2
3586: PPUSH
3587: LD_INT 6
3589: NEG
3590: PPUSH
3591: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
3595: LD_EXP 19
3599: PPUSH
3600: LD_INT 115
3602: PPUSH
3603: LD_INT 27
3605: PPUSH
3606: CALL_OW 428
3610: PPUSH
3611: CALL_OW 52
// SetClass ( Heike , 33 ) ;
3615: LD_EXP 19
3619: PPUSH
3620: LD_INT 33
3622: PPUSH
3623: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
3627: LD_INT 124
3629: PPUSH
3630: LD_INT 39
3632: PPUSH
3633: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
3637: LD_EXP 19
3641: PPUSH
3642: LD_STRING DH-Fail-1
3644: PPUSH
3645: CALL_OW 88
// RaiseSailEvent ( eventCenterCamOnHeike ) ;
3649: LD_EXP 17
3653: PPUSH
3654: CALL_OW 427
// ComExit ( Heike ) ;
3658: LD_EXP 19
3662: PPUSH
3663: CALL 42869 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
3667: LD_EXP 19
3671: PPUSH
3672: LD_INT 109
3674: PPUSH
3675: LD_INT 33
3677: PPUSH
3678: CALL_OW 171
// AddComHold ( Heike ) ;
3682: LD_EXP 19
3686: PPUSH
3687: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
3691: LD_INT 115
3693: PPUSH
3694: LD_INT 27
3696: PPUSH
3697: LD_INT 2
3699: PPUSH
3700: CALL_OW 331
// wait ( 0 0$2 ) ;
3704: LD_INT 70
3706: PPUSH
3707: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3711: LD_INT 35
3713: PPUSH
3714: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
3718: LD_EXP 19
3722: PPUSH
3723: LD_INT 109
3725: PPUSH
3726: LD_INT 33
3728: PPUSH
3729: CALL_OW 307
3733: IFFALSE 3711
// Say ( Heike , DH-Fail-2 ) ;
3735: LD_EXP 19
3739: PPUSH
3740: LD_STRING DH-Fail-2
3742: PPUSH
3743: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
3747: LD_EXP 19
3751: PPUSH
3752: LD_INT 111
3754: PPUSH
3755: LD_INT 48
3757: PPUSH
3758: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3762: LD_INT 35
3764: PPUSH
3765: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
3769: LD_EXP 19
3773: PPUSH
3774: LD_INT 111
3776: PPUSH
3777: LD_INT 48
3779: PPUSH
3780: CALL_OW 297
3784: PUSH
3785: LD_INT 4
3787: LESS
3788: IFFALSE 3762
// AddComMoveXY ( Heike , 106 , 72 ) ;
3790: LD_EXP 19
3794: PPUSH
3795: LD_INT 106
3797: PPUSH
3798: LD_INT 72
3800: PPUSH
3801: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
3805: LD_EXP 19
3809: PPUSH
3810: LD_INT 103
3812: PPUSH
3813: LD_INT 80
3815: PPUSH
3816: CALL_OW 171
// uc_side := 3 ;
3820: LD_ADDR_OWVAR 20
3824: PUSH
3825: LD_INT 3
3827: ST_TO_ADDR
// uc_nation := 3 ;
3828: LD_ADDR_OWVAR 21
3832: PUSH
3833: LD_INT 3
3835: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
3836: LD_INT 1
3838: PPUSH
3839: LD_INT 1
3841: PPUSH
3842: LD_INT 6
3844: PPUSH
3845: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
3849: LD_ADDR_OWVAR 29
3853: PUSH
3854: LD_INT 12
3856: PUSH
3857: LD_INT 12
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: ST_TO_ADDR
// un := CreateHuman ;
3864: LD_ADDR_VAR 0 3
3868: PUSH
3869: CALL_OW 44
3873: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
3874: LD_VAR 0 3
3878: PPUSH
3879: LD_INT 134
3881: PPUSH
3882: LD_INT 52
3884: PPUSH
3885: LD_INT 4
3887: PPUSH
3888: LD_INT 0
3890: PPUSH
3891: CALL 44613 0 5
// ComTurnUnit ( un , Heike ) ;
3895: LD_VAR 0 3
3899: PPUSH
3900: LD_EXP 19
3904: PPUSH
3905: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
3909: LD_VAR 0 3
3913: PPUSH
3914: LD_EXP 19
3918: PPUSH
3919: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
3923: LD_VAR 0 3
3927: PPUSH
3928: LD_STRING DRum-Fail-3
3930: PPUSH
3931: CALL_OW 88
// for i := 1 to 3 do
3935: LD_ADDR_VAR 0 2
3939: PUSH
3940: DOUBLE
3941: LD_INT 1
3943: DEC
3944: ST_TO_ADDR
3945: LD_INT 3
3947: PUSH
3948: FOR_TO
3949: IFFALSE 4022
// begin PrepareSoldier ( false , 10 ) ;
3951: LD_INT 0
3953: PPUSH
3954: LD_INT 10
3956: PPUSH
3957: CALL_OW 381
// un := CreateHuman ;
3961: LD_ADDR_VAR 0 3
3965: PUSH
3966: CALL_OW 44
3970: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
3971: LD_ADDR_VAR 0 4
3975: PUSH
3976: LD_VAR 0 4
3980: PPUSH
3981: LD_VAR 0 3
3985: PPUSH
3986: CALL 42471 0 2
3990: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
3991: LD_VAR 0 3
3995: PPUSH
3996: LD_INT 8
3998: PPUSH
3999: LD_INT 0
4001: PPUSH
4002: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
4006: LD_VAR 0 3
4010: PPUSH
4011: LD_EXP 19
4015: PPUSH
4016: CALL_OW 119
// end ;
4020: GO 3948
4022: POP
4023: POP
// repeat wait ( 0 0$1 ) ;
4024: LD_INT 35
4026: PPUSH
4027: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
4031: LD_VAR 0 4
4035: PPUSH
4036: LD_INT 101
4038: PUSH
4039: LD_INT 2
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PPUSH
4046: CALL_OW 72
4050: PUSH
4051: LD_INT 1
4053: GREATER
4054: IFFALSE 4024
// wait ( 0 0$1 ) ;
4056: LD_INT 35
4058: PPUSH
4059: CALL_OW 67
// DialogueOn ;
4063: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
4067: LD_EXP 19
4071: PPUSH
4072: LD_STRING DH-Fail-4
4074: PPUSH
4075: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
4079: LD_EXP 19
4083: PPUSH
4084: LD_STRING DH-Fail-5
4086: PPUSH
4087: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
4091: LD_EXP 19
4095: PPUSH
4096: LD_STRING DH-Fail-6
4098: PPUSH
4099: CALL_OW 88
// DialogueOff ;
4103: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
4107: LD_VAR 0 4
4111: PPUSH
4112: LD_EXP 19
4116: PPUSH
4117: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
4121: LD_INT 35
4123: PPUSH
4124: CALL_OW 67
// until IsDying ( Heike ) ;
4128: LD_EXP 19
4132: PPUSH
4133: CALL_OW 303
4137: IFFALSE 4121
// KillUnit ( Heike ) ;
4139: LD_EXP 19
4143: PPUSH
4144: CALL_OW 66
// wait ( 0 0$4 ) ;
4148: LD_INT 140
4150: PPUSH
4151: CALL_OW 67
// ResetFog ;
4155: CALL_OW 335
// DialogueOn ;
4159: CALL_OW 6
// dwait ( 0 0$1 ) ;
4163: LD_INT 35
4165: PPUSH
4166: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
4170: LD_ADDR_EXP 19
4174: PUSH
4175: LD_STRING Heike
4177: PPUSH
4178: LD_EXP 1
4182: NOT
4183: PPUSH
4184: LD_EXP 2
4188: PPUSH
4189: CALL 5087 0 3
4193: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
4194: LD_EXP 19
4198: PPUSH
4199: LD_STRING DH-Fail-7
4201: PPUSH
4202: CALL_OW 89
// DialogueOff ;
4206: CALL_OW 7
// YouLost ( Fail ) ;
4210: LD_STRING Fail
4212: PPUSH
4213: CALL_OW 104
// end ;
4217: LD_VAR 0 1
4221: RET
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 or AreInTheSameBuilding ( Givi , Heike ) do
4222: LD_INT 2
4224: PPUSH
4225: LD_EXP 20
4229: PPUSH
4230: CALL_OW 292
4234: PUSH
4235: LD_EXP 19
4239: PPUSH
4240: LD_EXP 20
4244: PPUSH
4245: CALL_OW 296
4249: PUSH
4250: LD_INT 6
4252: LESS
4253: AND
4254: PUSH
4255: LD_EXP 20
4259: PPUSH
4260: LD_EXP 19
4264: PPUSH
4265: CALL 4721 0 2
4269: OR
4270: IFFALSE 4348
4272: GO 4274
4274: DISABLE
// begin DialogueOn ;
4275: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
4279: LD_EXP 20
4283: PPUSH
4284: CALL_OW 87
// Say ( Heike , DH-Givi-1 ) ;
4288: LD_EXP 19
4292: PPUSH
4293: LD_STRING DH-Givi-1
4295: PPUSH
4296: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
4300: LD_EXP 20
4304: PPUSH
4305: LD_STRING DG-Givi-2
4307: PPUSH
4308: CALL_OW 88
// DialogueOff ;
4312: CALL_OW 7
// SetSide ( Givi , 2 ) ;
4316: LD_EXP 20
4320: PPUSH
4321: LD_INT 2
4323: PPUSH
4324: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
4328: LD_ADDR_EXP 13
4332: PUSH
4333: LD_EXP 13
4337: PPUSH
4338: LD_EXP 20
4342: PPUSH
4343: CALL 42471 0 2
4347: ST_TO_ADDR
// end ;
4348: END
// every 0 0$2 trigger not isAlarm and entranceAllowedList and IsOk ( Heike ) do var i ;
4349: LD_EXP 16
4353: NOT
4354: PUSH
4355: LD_EXP 14
4359: AND
4360: PUSH
4361: LD_EXP 19
4365: PPUSH
4366: CALL_OW 302
4370: AND
4371: IFFALSE 4424
4373: GO 4375
4375: DISABLE
4376: LD_INT 0
4378: PPUSH
// begin enable ;
4379: ENABLE
// for i in entranceAllowedList do
4380: LD_ADDR_VAR 0 1
4384: PUSH
4385: LD_EXP 14
4389: PUSH
4390: FOR_IN
4391: IFFALSE 4422
// if InEntrance ( Heike , i ) then
4393: LD_EXP 19
4397: PPUSH
4398: LD_VAR 0 1
4402: PPUSH
4403: CALL 4824 0 2
4407: IFFALSE 4420
// begin HeikeEnterBuilding ( i ) ;
4409: LD_VAR 0 1
4413: PPUSH
4414: CALL 4427 0 1
// break ;
4418: GO 4422
// end ;
4420: GO 4390
4422: POP
4423: POP
// end ;
4424: PPOPN 1
4426: END
// export function HeikeEnterBuilding ( building ) ; begin
4427: LD_INT 0
4429: PPUSH
// if not building then
4430: LD_VAR 0 1
4434: NOT
4435: IFFALSE 4439
// exit ;
4437: GO 4558
// case Query ( EnterBuilding ) of 1 :
4439: LD_STRING EnterBuilding
4441: PPUSH
4442: CALL_OW 97
4446: PUSH
4447: LD_INT 1
4449: DOUBLE
4450: EQUAL
4451: IFTRUE 4455
4453: GO 4458
4455: POP
// ; 2 :
4456: GO 4472
4458: LD_INT 2
4460: DOUBLE
4461: EQUAL
4462: IFTRUE 4466
4464: GO 4471
4466: POP
// exit ; end ;
4467: GO 4558
4469: GO 4472
4471: POP
// InGameOn ;
4472: CALL_OW 8
// SetSide ( Heike , 5 ) ;
4476: LD_EXP 19
4480: PPUSH
4481: LD_INT 5
4483: PPUSH
4484: CALL_OW 235
// SetSide ( building , 5 ) ;
4488: LD_VAR 0 1
4492: PPUSH
4493: LD_INT 5
4495: PPUSH
4496: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
4500: LD_EXP 19
4504: PPUSH
4505: LD_VAR 0 1
4509: PPUSH
4510: CALL_OW 120
// wait ( 0 0$3 ) ;
4514: LD_INT 105
4516: PPUSH
4517: CALL_OW 67
// ComExitBuilding ( Heike ) ;
4521: LD_EXP 19
4525: PPUSH
4526: CALL_OW 122
// SetSide ( Heike , 2 ) ;
4530: LD_EXP 19
4534: PPUSH
4535: LD_INT 2
4537: PPUSH
4538: CALL_OW 235
// SetSide ( building , 3 ) ;
4542: LD_VAR 0 1
4546: PPUSH
4547: LD_INT 3
4549: PPUSH
4550: CALL_OW 235
// InGameOff ;
4554: CALL_OW 9
// end ; end_of_file
4558: LD_VAR 0 2
4562: RET
// on SailEvent ( event ) do begin case event of eventCenterCamOnHeike :
4563: LD_VAR 0 1
4567: PUSH
4568: LD_EXP 17
4572: DOUBLE
4573: EQUAL
4574: IFTRUE 4578
4576: GO 4608
4578: POP
// begin repeat wait ( 0 0$1 ) ;
4579: LD_INT 35
4581: PPUSH
4582: CALL_OW 67
// CenterOnUnits ( Heike ) ;
4586: LD_EXP 19
4590: PPUSH
4591: CALL_OW 85
// until IsDying ( Heike ) ;
4595: LD_EXP 19
4599: PPUSH
4600: CALL_OW 303
4604: IFFALSE 4579
// end ; end ;
4606: GO 4609
4608: POP
// end ;
4609: PPOPN 1
4611: END
// on SaiLEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
4612: LD_OWVAR 59
4616: IFFALSE 4620
// exit ;
4618: GO 4690
// PlaceSeeing ( x , y , 2 , - 12 ) ;
4620: LD_VAR 0 2
4624: PPUSH
4625: LD_VAR 0 3
4629: PPUSH
4630: LD_INT 2
4632: PPUSH
4633: LD_INT 12
4635: NEG
4636: PPUSH
4637: CALL_OW 330
// CenterOnXY ( x , y ) ;
4641: LD_VAR 0 2
4645: PPUSH
4646: LD_VAR 0 3
4650: PPUSH
4651: CALL_OW 84
// wait ( time ) ;
4655: LD_VAR 0 4
4659: PPUSH
4660: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
4664: LD_EXP 19
4668: PPUSH
4669: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
4673: LD_VAR 0 2
4677: PPUSH
4678: LD_VAR 0 3
4682: PPUSH
4683: LD_INT 2
4685: PPUSH
4686: CALL_OW 331
// end ;
4690: PPOPN 7
4692: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
4693: LD_VAR 0 1
4697: PUSH
4698: LD_EXP 19
4702: EQUAL
4703: PUSH
4704: LD_EXP 5
4708: AND
4709: IFFALSE 4718
// YouLost ( Heike ) ;
4711: LD_STRING Heike
4713: PPUSH
4714: CALL_OW 104
// end ; end_of_file
4718: PPOPN 1
4720: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
4721: LD_INT 0
4723: PPUSH
4724: PPUSH
4725: PPUSH
// u1 := IsInUnit ( unit1 ) ;
4726: LD_ADDR_VAR 0 4
4730: PUSH
4731: LD_VAR 0 1
4735: PPUSH
4736: CALL_OW 310
4740: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
4741: LD_ADDR_VAR 0 5
4745: PUSH
4746: LD_VAR 0 2
4750: PPUSH
4751: CALL_OW 310
4755: ST_TO_ADDR
// result := u1 and u1 = u2 ;
4756: LD_ADDR_VAR 0 3
4760: PUSH
4761: LD_VAR 0 4
4765: PUSH
4766: LD_VAR 0 4
4770: PUSH
4771: LD_VAR 0 5
4775: EQUAL
4776: AND
4777: ST_TO_ADDR
// end ;
4778: LD_VAR 0 3
4782: RET
// export function ShowPlace ( x , y , time ) ; begin
4783: LD_INT 0
4785: PPUSH
// RaiseSailEventCustom ( eventShowPlace , x , y , time , 0 , 0 , 0 ) ;
4786: LD_EXP 18
4790: PPUSH
4791: LD_VAR 0 1
4795: PPUSH
4796: LD_VAR 0 2
4800: PPUSH
4801: LD_VAR 0 3
4805: PPUSH
4806: LD_INT 0
4808: PPUSH
4809: LD_INT 0
4811: PPUSH
4812: LD_INT 0
4814: PPUSH
4815: CALL_OW 595
// end ;
4819: LD_VAR 0 4
4823: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
4824: LD_INT 0
4826: PPUSH
4827: PPUSH
4828: PPUSH
4829: PPUSH
4830: PPUSH
4831: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
4832: LD_VAR 0 1
4836: PPUSH
4837: CALL_OW 302
4841: NOT
4842: PUSH
4843: LD_VAR 0 2
4847: PPUSH
4848: CALL_OW 302
4852: NOT
4853: OR
4854: PUSH
4855: LD_VAR 0 2
4859: PPUSH
4860: CALL_OW 313
4864: PUSH
4865: LD_INT 6
4867: EQUAL
4868: OR
4869: IFFALSE 4873
// exit ;
4871: GO 5082
// btype := GetBType ( building ) ;
4873: LD_ADDR_VAR 0 8
4877: PUSH
4878: LD_VAR 0 2
4882: PPUSH
4883: CALL_OW 266
4887: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_lab , b_lab_half , b_lab_full ] then
4888: LD_VAR 0 8
4892: PUSH
4893: LD_INT 0
4895: PUSH
4896: LD_INT 1
4898: PUSH
4899: LD_INT 4
4901: PUSH
4902: LD_INT 5
4904: PUSH
4905: LD_INT 6
4907: PUSH
4908: LD_INT 7
4910: PUSH
4911: LD_INT 8
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: IN
4923: NOT
4924: IFFALSE 4928
// exit ;
4926: GO 5082
// x := GetX ( building ) ;
4928: LD_ADDR_VAR 0 4
4932: PUSH
4933: LD_VAR 0 2
4937: PPUSH
4938: CALL_OW 250
4942: ST_TO_ADDR
// y := GetY ( building ) ;
4943: LD_ADDR_VAR 0 5
4947: PUSH
4948: LD_VAR 0 2
4952: PPUSH
4953: CALL_OW 251
4957: ST_TO_ADDR
// d := GetDir ( building ) ;
4958: LD_ADDR_VAR 0 6
4962: PUSH
4963: LD_VAR 0 2
4967: PPUSH
4968: CALL_OW 254
4972: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
4973: LD_ADDR_VAR 0 7
4977: PUSH
4978: LD_VAR 0 4
4982: PPUSH
4983: LD_VAR 0 6
4987: PPUSH
4988: LD_INT 3
4990: PPUSH
4991: CALL_OW 272
4995: PUSH
4996: LD_VAR 0 5
5000: PPUSH
5001: LD_VAR 0 6
5005: PPUSH
5006: LD_INT 3
5008: PPUSH
5009: CALL_OW 273
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
5018: LD_VAR 0 7
5022: PUSH
5023: LD_INT 1
5025: ARRAY
5026: PPUSH
5027: LD_VAR 0 7
5031: PUSH
5032: LD_INT 2
5034: ARRAY
5035: PPUSH
5036: CALL_OW 488
5040: NOT
5041: IFFALSE 5045
// exit ;
5043: GO 5082
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 3 ;
5045: LD_ADDR_VAR 0 3
5049: PUSH
5050: LD_VAR 0 1
5054: PPUSH
5055: LD_VAR 0 7
5059: PUSH
5060: LD_INT 1
5062: ARRAY
5063: PPUSH
5064: LD_VAR 0 7
5068: PUSH
5069: LD_INT 2
5071: ARRAY
5072: PPUSH
5073: CALL_OW 297
5077: PUSH
5078: LD_INT 3
5080: LESS
5081: ST_TO_ADDR
// end ; end_of_file
5082: LD_VAR 0 3
5086: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
5087: LD_INT 0
5089: PPUSH
5090: PPUSH
// if exist_mode then
5091: LD_VAR 0 2
5095: IFFALSE 5120
// unit := CreateCharacter ( prefix & ident ) else
5097: LD_ADDR_VAR 0 5
5101: PUSH
5102: LD_VAR 0 3
5106: PUSH
5107: LD_VAR 0 1
5111: STR
5112: PPUSH
5113: CALL_OW 34
5117: ST_TO_ADDR
5118: GO 5135
// unit := NewCharacter ( ident ) ;
5120: LD_ADDR_VAR 0 5
5124: PUSH
5125: LD_VAR 0 1
5129: PPUSH
5130: CALL_OW 25
5134: ST_TO_ADDR
// result := unit ;
5135: LD_ADDR_VAR 0 4
5139: PUSH
5140: LD_VAR 0 5
5144: ST_TO_ADDR
// end ;
5145: LD_VAR 0 4
5149: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
5150: LD_INT 0
5152: PPUSH
5153: PPUSH
// if not side or not nation then
5154: LD_VAR 0 1
5158: NOT
5159: PUSH
5160: LD_VAR 0 2
5164: NOT
5165: OR
5166: IFFALSE 5170
// exit ;
5168: GO 5938
// case nation of nation_american :
5170: LD_VAR 0 2
5174: PUSH
5175: LD_INT 1
5177: DOUBLE
5178: EQUAL
5179: IFTRUE 5183
5181: GO 5397
5183: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
5184: LD_ADDR_VAR 0 4
5188: PUSH
5189: LD_INT 35
5191: PUSH
5192: LD_INT 45
5194: PUSH
5195: LD_INT 46
5197: PUSH
5198: LD_INT 47
5200: PUSH
5201: LD_INT 82
5203: PUSH
5204: LD_INT 83
5206: PUSH
5207: LD_INT 84
5209: PUSH
5210: LD_INT 85
5212: PUSH
5213: LD_INT 86
5215: PUSH
5216: LD_INT 1
5218: PUSH
5219: LD_INT 2
5221: PUSH
5222: LD_INT 6
5224: PUSH
5225: LD_INT 15
5227: PUSH
5228: LD_INT 16
5230: PUSH
5231: LD_INT 7
5233: PUSH
5234: LD_INT 12
5236: PUSH
5237: LD_INT 13
5239: PUSH
5240: LD_INT 10
5242: PUSH
5243: LD_INT 14
5245: PUSH
5246: LD_INT 20
5248: PUSH
5249: LD_INT 21
5251: PUSH
5252: LD_INT 22
5254: PUSH
5255: LD_INT 25
5257: PUSH
5258: LD_INT 32
5260: PUSH
5261: LD_INT 27
5263: PUSH
5264: LD_INT 36
5266: PUSH
5267: LD_INT 69
5269: PUSH
5270: LD_INT 39
5272: PUSH
5273: LD_INT 34
5275: PUSH
5276: LD_INT 40
5278: PUSH
5279: LD_INT 48
5281: PUSH
5282: LD_INT 49
5284: PUSH
5285: LD_INT 50
5287: PUSH
5288: LD_INT 51
5290: PUSH
5291: LD_INT 52
5293: PUSH
5294: LD_INT 53
5296: PUSH
5297: LD_INT 54
5299: PUSH
5300: LD_INT 55
5302: PUSH
5303: LD_INT 56
5305: PUSH
5306: LD_INT 57
5308: PUSH
5309: LD_INT 58
5311: PUSH
5312: LD_INT 59
5314: PUSH
5315: LD_INT 60
5317: PUSH
5318: LD_INT 61
5320: PUSH
5321: LD_INT 62
5323: PUSH
5324: LD_INT 80
5326: PUSH
5327: LD_INT 82
5329: PUSH
5330: LD_INT 83
5332: PUSH
5333: LD_INT 84
5335: PUSH
5336: LD_INT 85
5338: PUSH
5339: LD_INT 86
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: LIST
5357: LIST
5358: LIST
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: ST_TO_ADDR
5395: GO 5862
5397: LD_INT 2
5399: DOUBLE
5400: EQUAL
5401: IFTRUE 5405
5403: GO 5631
5405: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
5406: LD_ADDR_VAR 0 4
5410: PUSH
5411: LD_INT 35
5413: PUSH
5414: LD_INT 45
5416: PUSH
5417: LD_INT 46
5419: PUSH
5420: LD_INT 47
5422: PUSH
5423: LD_INT 82
5425: PUSH
5426: LD_INT 83
5428: PUSH
5429: LD_INT 84
5431: PUSH
5432: LD_INT 85
5434: PUSH
5435: LD_INT 87
5437: PUSH
5438: LD_INT 70
5440: PUSH
5441: LD_INT 1
5443: PUSH
5444: LD_INT 11
5446: PUSH
5447: LD_INT 3
5449: PUSH
5450: LD_INT 4
5452: PUSH
5453: LD_INT 5
5455: PUSH
5456: LD_INT 6
5458: PUSH
5459: LD_INT 15
5461: PUSH
5462: LD_INT 18
5464: PUSH
5465: LD_INT 7
5467: PUSH
5468: LD_INT 17
5470: PUSH
5471: LD_INT 8
5473: PUSH
5474: LD_INT 20
5476: PUSH
5477: LD_INT 21
5479: PUSH
5480: LD_INT 22
5482: PUSH
5483: LD_INT 72
5485: PUSH
5486: LD_INT 26
5488: PUSH
5489: LD_INT 69
5491: PUSH
5492: LD_INT 39
5494: PUSH
5495: LD_INT 40
5497: PUSH
5498: LD_INT 41
5500: PUSH
5501: LD_INT 42
5503: PUSH
5504: LD_INT 43
5506: PUSH
5507: LD_INT 48
5509: PUSH
5510: LD_INT 49
5512: PUSH
5513: LD_INT 50
5515: PUSH
5516: LD_INT 51
5518: PUSH
5519: LD_INT 52
5521: PUSH
5522: LD_INT 53
5524: PUSH
5525: LD_INT 54
5527: PUSH
5528: LD_INT 55
5530: PUSH
5531: LD_INT 56
5533: PUSH
5534: LD_INT 60
5536: PUSH
5537: LD_INT 61
5539: PUSH
5540: LD_INT 62
5542: PUSH
5543: LD_INT 66
5545: PUSH
5546: LD_INT 67
5548: PUSH
5549: LD_INT 68
5551: PUSH
5552: LD_INT 81
5554: PUSH
5555: LD_INT 82
5557: PUSH
5558: LD_INT 83
5560: PUSH
5561: LD_INT 84
5563: PUSH
5564: LD_INT 85
5566: PUSH
5567: LD_INT 87
5569: PUSH
5570: LD_INT 88
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: ST_TO_ADDR
5629: GO 5862
5631: LD_INT 3
5633: DOUBLE
5634: EQUAL
5635: IFTRUE 5639
5637: GO 5861
5639: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
5640: LD_ADDR_VAR 0 4
5644: PUSH
5645: LD_INT 46
5647: PUSH
5648: LD_INT 47
5650: PUSH
5651: LD_INT 1
5653: PUSH
5654: LD_INT 2
5656: PUSH
5657: LD_INT 82
5659: PUSH
5660: LD_INT 83
5662: PUSH
5663: LD_INT 84
5665: PUSH
5666: LD_INT 85
5668: PUSH
5669: LD_INT 86
5671: PUSH
5672: LD_INT 11
5674: PUSH
5675: LD_INT 9
5677: PUSH
5678: LD_INT 20
5680: PUSH
5681: LD_INT 19
5683: PUSH
5684: LD_INT 21
5686: PUSH
5687: LD_INT 24
5689: PUSH
5690: LD_INT 22
5692: PUSH
5693: LD_INT 25
5695: PUSH
5696: LD_INT 28
5698: PUSH
5699: LD_INT 29
5701: PUSH
5702: LD_INT 30
5704: PUSH
5705: LD_INT 31
5707: PUSH
5708: LD_INT 37
5710: PUSH
5711: LD_INT 38
5713: PUSH
5714: LD_INT 32
5716: PUSH
5717: LD_INT 27
5719: PUSH
5720: LD_INT 33
5722: PUSH
5723: LD_INT 69
5725: PUSH
5726: LD_INT 39
5728: PUSH
5729: LD_INT 34
5731: PUSH
5732: LD_INT 40
5734: PUSH
5735: LD_INT 71
5737: PUSH
5738: LD_INT 23
5740: PUSH
5741: LD_INT 44
5743: PUSH
5744: LD_INT 48
5746: PUSH
5747: LD_INT 49
5749: PUSH
5750: LD_INT 50
5752: PUSH
5753: LD_INT 51
5755: PUSH
5756: LD_INT 52
5758: PUSH
5759: LD_INT 53
5761: PUSH
5762: LD_INT 54
5764: PUSH
5765: LD_INT 55
5767: PUSH
5768: LD_INT 56
5770: PUSH
5771: LD_INT 57
5773: PUSH
5774: LD_INT 58
5776: PUSH
5777: LD_INT 59
5779: PUSH
5780: LD_INT 63
5782: PUSH
5783: LD_INT 64
5785: PUSH
5786: LD_INT 65
5788: PUSH
5789: LD_INT 82
5791: PUSH
5792: LD_INT 83
5794: PUSH
5795: LD_INT 84
5797: PUSH
5798: LD_INT 85
5800: PUSH
5801: LD_INT 86
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: LIST
5818: LIST
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: LIST
5833: LIST
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: ST_TO_ADDR
5859: GO 5862
5861: POP
// if state > - 1 and state < 3 then
5862: LD_VAR 0 3
5866: PUSH
5867: LD_INT 1
5869: NEG
5870: GREATER
5871: PUSH
5872: LD_VAR 0 3
5876: PUSH
5877: LD_INT 3
5879: LESS
5880: AND
5881: IFFALSE 5938
// for i in result do
5883: LD_ADDR_VAR 0 5
5887: PUSH
5888: LD_VAR 0 4
5892: PUSH
5893: FOR_IN
5894: IFFALSE 5936
// if GetTech ( i , side ) <> state then
5896: LD_VAR 0 5
5900: PPUSH
5901: LD_VAR 0 1
5905: PPUSH
5906: CALL_OW 321
5910: PUSH
5911: LD_VAR 0 3
5915: NONEQUAL
5916: IFFALSE 5934
// result := result diff i ;
5918: LD_ADDR_VAR 0 4
5922: PUSH
5923: LD_VAR 0 4
5927: PUSH
5928: LD_VAR 0 5
5932: DIFF
5933: ST_TO_ADDR
5934: GO 5893
5936: POP
5937: POP
// end ;
5938: LD_VAR 0 4
5942: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5943: LD_INT 0
5945: PPUSH
5946: PPUSH
5947: PPUSH
// result := true ;
5948: LD_ADDR_VAR 0 3
5952: PUSH
5953: LD_INT 1
5955: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5956: LD_ADDR_VAR 0 5
5960: PUSH
5961: LD_VAR 0 2
5965: PPUSH
5966: CALL_OW 480
5970: ST_TO_ADDR
// if not tmp then
5971: LD_VAR 0 5
5975: NOT
5976: IFFALSE 5980
// exit ;
5978: GO 6029
// for i in tmp do
5980: LD_ADDR_VAR 0 4
5984: PUSH
5985: LD_VAR 0 5
5989: PUSH
5990: FOR_IN
5991: IFFALSE 6027
// if GetTech ( i , side ) <> state_researched then
5993: LD_VAR 0 4
5997: PPUSH
5998: LD_VAR 0 1
6002: PPUSH
6003: CALL_OW 321
6007: PUSH
6008: LD_INT 2
6010: NONEQUAL
6011: IFFALSE 6025
// begin result := false ;
6013: LD_ADDR_VAR 0 3
6017: PUSH
6018: LD_INT 0
6020: ST_TO_ADDR
// exit ;
6021: POP
6022: POP
6023: GO 6029
// end ;
6025: GO 5990
6027: POP
6028: POP
// end ;
6029: LD_VAR 0 3
6033: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
6034: LD_INT 0
6036: PPUSH
6037: PPUSH
6038: PPUSH
6039: PPUSH
6040: PPUSH
6041: PPUSH
6042: PPUSH
6043: PPUSH
6044: PPUSH
6045: PPUSH
6046: PPUSH
6047: PPUSH
6048: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
6049: LD_VAR 0 1
6053: NOT
6054: PUSH
6055: LD_VAR 0 1
6059: PPUSH
6060: CALL_OW 257
6064: PUSH
6065: LD_INT 9
6067: NONEQUAL
6068: OR
6069: IFFALSE 6073
// exit ;
6071: GO 6646
// side := GetSide ( unit ) ;
6073: LD_ADDR_VAR 0 9
6077: PUSH
6078: LD_VAR 0 1
6082: PPUSH
6083: CALL_OW 255
6087: ST_TO_ADDR
// tech_space := tech_spacanom ;
6088: LD_ADDR_VAR 0 12
6092: PUSH
6093: LD_INT 29
6095: ST_TO_ADDR
// tech_time := tech_taurad ;
6096: LD_ADDR_VAR 0 13
6100: PUSH
6101: LD_INT 28
6103: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
6104: LD_ADDR_VAR 0 11
6108: PUSH
6109: LD_VAR 0 1
6113: PPUSH
6114: CALL_OW 310
6118: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
6119: LD_VAR 0 11
6123: PPUSH
6124: CALL_OW 247
6128: PUSH
6129: LD_INT 2
6131: EQUAL
6132: IFFALSE 6136
// exit ;
6134: GO 6646
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6136: LD_ADDR_VAR 0 8
6140: PUSH
6141: LD_INT 81
6143: PUSH
6144: LD_VAR 0 9
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PUSH
6153: LD_INT 3
6155: PUSH
6156: LD_INT 21
6158: PUSH
6159: LD_INT 3
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: PPUSH
6174: CALL_OW 69
6178: ST_TO_ADDR
// if not tmp then
6179: LD_VAR 0 8
6183: NOT
6184: IFFALSE 6188
// exit ;
6186: GO 6646
// if in_unit then
6188: LD_VAR 0 11
6192: IFFALSE 6216
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
6194: LD_ADDR_VAR 0 10
6198: PUSH
6199: LD_VAR 0 8
6203: PPUSH
6204: LD_VAR 0 11
6208: PPUSH
6209: CALL_OW 74
6213: ST_TO_ADDR
6214: GO 6236
// enemy := NearestUnitToUnit ( tmp , unit ) ;
6216: LD_ADDR_VAR 0 10
6220: PUSH
6221: LD_VAR 0 8
6225: PPUSH
6226: LD_VAR 0 1
6230: PPUSH
6231: CALL_OW 74
6235: ST_TO_ADDR
// if not enemy then
6236: LD_VAR 0 10
6240: NOT
6241: IFFALSE 6245
// exit ;
6243: GO 6646
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
6245: LD_VAR 0 11
6249: PUSH
6250: LD_VAR 0 11
6254: PPUSH
6255: LD_VAR 0 10
6259: PPUSH
6260: CALL_OW 296
6264: PUSH
6265: LD_INT 13
6267: GREATER
6268: AND
6269: PUSH
6270: LD_VAR 0 1
6274: PPUSH
6275: LD_VAR 0 10
6279: PPUSH
6280: CALL_OW 296
6284: PUSH
6285: LD_INT 12
6287: GREATER
6288: OR
6289: IFFALSE 6293
// exit ;
6291: GO 6646
// missile := [ 1 ] ;
6293: LD_ADDR_VAR 0 14
6297: PUSH
6298: LD_INT 1
6300: PUSH
6301: EMPTY
6302: LIST
6303: ST_TO_ADDR
// if Researched ( side , tech_space ) then
6304: LD_VAR 0 9
6308: PPUSH
6309: LD_VAR 0 12
6313: PPUSH
6314: CALL_OW 325
6318: IFFALSE 6347
// missile := Replace ( missile , missile + 1 , 2 ) ;
6320: LD_ADDR_VAR 0 14
6324: PUSH
6325: LD_VAR 0 14
6329: PPUSH
6330: LD_VAR 0 14
6334: PUSH
6335: LD_INT 1
6337: PLUS
6338: PPUSH
6339: LD_INT 2
6341: PPUSH
6342: CALL_OW 1
6346: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
6347: LD_VAR 0 9
6351: PPUSH
6352: LD_VAR 0 13
6356: PPUSH
6357: CALL_OW 325
6361: PUSH
6362: LD_VAR 0 10
6366: PPUSH
6367: CALL_OW 255
6371: PPUSH
6372: LD_VAR 0 13
6376: PPUSH
6377: CALL_OW 325
6381: NOT
6382: AND
6383: IFFALSE 6412
// missile := Replace ( missile , missile + 1 , 3 ) ;
6385: LD_ADDR_VAR 0 14
6389: PUSH
6390: LD_VAR 0 14
6394: PPUSH
6395: LD_VAR 0 14
6399: PUSH
6400: LD_INT 1
6402: PLUS
6403: PPUSH
6404: LD_INT 3
6406: PPUSH
6407: CALL_OW 1
6411: ST_TO_ADDR
// if missile < 2 then
6412: LD_VAR 0 14
6416: PUSH
6417: LD_INT 2
6419: LESS
6420: IFFALSE 6424
// exit ;
6422: GO 6646
// x := GetX ( enemy ) ;
6424: LD_ADDR_VAR 0 4
6428: PUSH
6429: LD_VAR 0 10
6433: PPUSH
6434: CALL_OW 250
6438: ST_TO_ADDR
// y := GetY ( enemy ) ;
6439: LD_ADDR_VAR 0 5
6443: PUSH
6444: LD_VAR 0 10
6448: PPUSH
6449: CALL_OW 251
6453: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
6454: LD_ADDR_VAR 0 6
6458: PUSH
6459: LD_VAR 0 4
6463: PUSH
6464: LD_INT 1
6466: NEG
6467: PPUSH
6468: LD_INT 1
6470: PPUSH
6471: CALL_OW 12
6475: PLUS
6476: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
6477: LD_ADDR_VAR 0 7
6481: PUSH
6482: LD_VAR 0 5
6486: PUSH
6487: LD_INT 1
6489: NEG
6490: PPUSH
6491: LD_INT 1
6493: PPUSH
6494: CALL_OW 12
6498: PLUS
6499: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6500: LD_VAR 0 6
6504: PPUSH
6505: LD_VAR 0 7
6509: PPUSH
6510: CALL_OW 488
6514: NOT
6515: IFFALSE 6537
// begin _x := x ;
6517: LD_ADDR_VAR 0 6
6521: PUSH
6522: LD_VAR 0 4
6526: ST_TO_ADDR
// _y := y ;
6527: LD_ADDR_VAR 0 7
6531: PUSH
6532: LD_VAR 0 5
6536: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
6537: LD_ADDR_VAR 0 3
6541: PUSH
6542: LD_INT 1
6544: PPUSH
6545: LD_VAR 0 14
6549: PPUSH
6550: CALL_OW 12
6554: ST_TO_ADDR
// case i of 1 :
6555: LD_VAR 0 3
6559: PUSH
6560: LD_INT 1
6562: DOUBLE
6563: EQUAL
6564: IFTRUE 6568
6566: GO 6585
6568: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
6569: LD_VAR 0 1
6573: PPUSH
6574: LD_VAR 0 10
6578: PPUSH
6579: CALL_OW 115
6583: GO 6646
6585: LD_INT 2
6587: DOUBLE
6588: EQUAL
6589: IFTRUE 6593
6591: GO 6615
6593: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
6594: LD_VAR 0 1
6598: PPUSH
6599: LD_VAR 0 6
6603: PPUSH
6604: LD_VAR 0 7
6608: PPUSH
6609: CALL_OW 153
6613: GO 6646
6615: LD_INT 3
6617: DOUBLE
6618: EQUAL
6619: IFTRUE 6623
6621: GO 6645
6623: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
6624: LD_VAR 0 1
6628: PPUSH
6629: LD_VAR 0 6
6633: PPUSH
6634: LD_VAR 0 7
6638: PPUSH
6639: CALL_OW 154
6643: GO 6646
6645: POP
// end ;
6646: LD_VAR 0 2
6650: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
6651: LD_INT 0
6653: PPUSH
6654: PPUSH
6655: PPUSH
6656: PPUSH
6657: PPUSH
6658: PPUSH
// if not unit or not building then
6659: LD_VAR 0 1
6663: NOT
6664: PUSH
6665: LD_VAR 0 2
6669: NOT
6670: OR
6671: IFFALSE 6675
// exit ;
6673: GO 6833
// x := GetX ( building ) ;
6675: LD_ADDR_VAR 0 5
6679: PUSH
6680: LD_VAR 0 2
6684: PPUSH
6685: CALL_OW 250
6689: ST_TO_ADDR
// y := GetY ( building ) ;
6690: LD_ADDR_VAR 0 6
6694: PUSH
6695: LD_VAR 0 2
6699: PPUSH
6700: CALL_OW 251
6704: ST_TO_ADDR
// for i = 0 to 5 do
6705: LD_ADDR_VAR 0 4
6709: PUSH
6710: DOUBLE
6711: LD_INT 0
6713: DEC
6714: ST_TO_ADDR
6715: LD_INT 5
6717: PUSH
6718: FOR_TO
6719: IFFALSE 6831
// begin _x := ShiftX ( x , i , 3 ) ;
6721: LD_ADDR_VAR 0 7
6725: PUSH
6726: LD_VAR 0 5
6730: PPUSH
6731: LD_VAR 0 4
6735: PPUSH
6736: LD_INT 3
6738: PPUSH
6739: CALL_OW 272
6743: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
6744: LD_ADDR_VAR 0 8
6748: PUSH
6749: LD_VAR 0 6
6753: PPUSH
6754: LD_VAR 0 4
6758: PPUSH
6759: LD_INT 3
6761: PPUSH
6762: CALL_OW 273
6766: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6767: LD_VAR 0 7
6771: PPUSH
6772: LD_VAR 0 8
6776: PPUSH
6777: CALL_OW 488
6781: NOT
6782: IFFALSE 6786
// continue ;
6784: GO 6718
// if HexInfo ( _x , _y ) = 0 then
6786: LD_VAR 0 7
6790: PPUSH
6791: LD_VAR 0 8
6795: PPUSH
6796: CALL_OW 428
6800: PUSH
6801: LD_INT 0
6803: EQUAL
6804: IFFALSE 6829
// begin ComMoveXY ( unit , _x , _y ) ;
6806: LD_VAR 0 1
6810: PPUSH
6811: LD_VAR 0 7
6815: PPUSH
6816: LD_VAR 0 8
6820: PPUSH
6821: CALL_OW 111
// exit ;
6825: POP
6826: POP
6827: GO 6833
// end ; end ;
6829: GO 6718
6831: POP
6832: POP
// end ;
6833: LD_VAR 0 3
6837: RET
// export function ScanBase ( side , base_area ) ; begin
6838: LD_INT 0
6840: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6841: LD_ADDR_VAR 0 3
6845: PUSH
6846: LD_VAR 0 2
6850: PPUSH
6851: LD_INT 81
6853: PUSH
6854: LD_VAR 0 1
6858: PUSH
6859: EMPTY
6860: LIST
6861: LIST
6862: PPUSH
6863: CALL_OW 70
6867: ST_TO_ADDR
// end ;
6868: LD_VAR 0 3
6872: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6873: LD_INT 0
6875: PPUSH
6876: PPUSH
6877: PPUSH
6878: PPUSH
// result := false ;
6879: LD_ADDR_VAR 0 2
6883: PUSH
6884: LD_INT 0
6886: ST_TO_ADDR
// side := GetSide ( unit ) ;
6887: LD_ADDR_VAR 0 3
6891: PUSH
6892: LD_VAR 0 1
6896: PPUSH
6897: CALL_OW 255
6901: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6902: LD_ADDR_VAR 0 4
6906: PUSH
6907: LD_VAR 0 1
6911: PPUSH
6912: CALL_OW 248
6916: ST_TO_ADDR
// case nat of 1 :
6917: LD_VAR 0 4
6921: PUSH
6922: LD_INT 1
6924: DOUBLE
6925: EQUAL
6926: IFTRUE 6930
6928: GO 6941
6930: POP
// tech := tech_lassight ; 2 :
6931: LD_ADDR_VAR 0 5
6935: PUSH
6936: LD_INT 12
6938: ST_TO_ADDR
6939: GO 6980
6941: LD_INT 2
6943: DOUBLE
6944: EQUAL
6945: IFTRUE 6949
6947: GO 6960
6949: POP
// tech := tech_mortar ; 3 :
6950: LD_ADDR_VAR 0 5
6954: PUSH
6955: LD_INT 41
6957: ST_TO_ADDR
6958: GO 6980
6960: LD_INT 3
6962: DOUBLE
6963: EQUAL
6964: IFTRUE 6968
6966: GO 6979
6968: POP
// tech := tech_bazooka ; end ;
6969: LD_ADDR_VAR 0 5
6973: PUSH
6974: LD_INT 44
6976: ST_TO_ADDR
6977: GO 6980
6979: POP
// if Researched ( side , tech ) then
6980: LD_VAR 0 3
6984: PPUSH
6985: LD_VAR 0 5
6989: PPUSH
6990: CALL_OW 325
6994: IFFALSE 7021
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6996: LD_ADDR_VAR 0 2
7000: PUSH
7001: LD_INT 5
7003: PUSH
7004: LD_INT 8
7006: PUSH
7007: LD_INT 9
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: PUSH
7015: LD_VAR 0 4
7019: ARRAY
7020: ST_TO_ADDR
// end ;
7021: LD_VAR 0 2
7025: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
7026: LD_INT 0
7028: PPUSH
7029: PPUSH
7030: PPUSH
// if not mines then
7031: LD_VAR 0 2
7035: NOT
7036: IFFALSE 7040
// exit ;
7038: GO 7184
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7040: LD_ADDR_VAR 0 5
7044: PUSH
7045: LD_INT 81
7047: PUSH
7048: LD_VAR 0 1
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: LD_INT 3
7059: PUSH
7060: LD_INT 21
7062: PUSH
7063: LD_INT 3
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PPUSH
7078: CALL_OW 69
7082: ST_TO_ADDR
// for i in mines do
7083: LD_ADDR_VAR 0 4
7087: PUSH
7088: LD_VAR 0 2
7092: PUSH
7093: FOR_IN
7094: IFFALSE 7182
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
7096: LD_VAR 0 4
7100: PUSH
7101: LD_INT 1
7103: ARRAY
7104: PPUSH
7105: LD_VAR 0 4
7109: PUSH
7110: LD_INT 2
7112: ARRAY
7113: PPUSH
7114: CALL_OW 458
7118: NOT
7119: IFFALSE 7123
// continue ;
7121: GO 7093
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
7123: LD_VAR 0 4
7127: PUSH
7128: LD_INT 1
7130: ARRAY
7131: PPUSH
7132: LD_VAR 0 4
7136: PUSH
7137: LD_INT 2
7139: ARRAY
7140: PPUSH
7141: CALL_OW 428
7145: PUSH
7146: LD_VAR 0 5
7150: IN
7151: IFFALSE 7180
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
7153: LD_VAR 0 4
7157: PUSH
7158: LD_INT 1
7160: ARRAY
7161: PPUSH
7162: LD_VAR 0 4
7166: PUSH
7167: LD_INT 2
7169: ARRAY
7170: PPUSH
7171: LD_VAR 0 1
7175: PPUSH
7176: CALL_OW 456
// end ;
7180: GO 7093
7182: POP
7183: POP
// end ;
7184: LD_VAR 0 3
7188: RET
// export function Count ( array ) ; var i ; begin
7189: LD_INT 0
7191: PPUSH
7192: PPUSH
// result := 0 ;
7193: LD_ADDR_VAR 0 2
7197: PUSH
7198: LD_INT 0
7200: ST_TO_ADDR
// for i in array do
7201: LD_ADDR_VAR 0 3
7205: PUSH
7206: LD_VAR 0 1
7210: PUSH
7211: FOR_IN
7212: IFFALSE 7236
// if i then
7214: LD_VAR 0 3
7218: IFFALSE 7234
// result := result + 1 ;
7220: LD_ADDR_VAR 0 2
7224: PUSH
7225: LD_VAR 0 2
7229: PUSH
7230: LD_INT 1
7232: PLUS
7233: ST_TO_ADDR
7234: GO 7211
7236: POP
7237: POP
// end ;
7238: LD_VAR 0 2
7242: RET
// export function IsEmpty ( building ) ; begin
7243: LD_INT 0
7245: PPUSH
// if not building then
7246: LD_VAR 0 1
7250: NOT
7251: IFFALSE 7255
// exit ;
7253: GO 7298
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
7255: LD_ADDR_VAR 0 2
7259: PUSH
7260: LD_VAR 0 1
7264: PUSH
7265: LD_INT 22
7267: PUSH
7268: LD_VAR 0 1
7272: PPUSH
7273: CALL_OW 255
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: LD_INT 58
7284: PUSH
7285: EMPTY
7286: LIST
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: PPUSH
7292: CALL_OW 69
7296: IN
7297: ST_TO_ADDR
// end ;
7298: LD_VAR 0 2
7302: RET
// export function IsNotFull ( building ) ; var places ; begin
7303: LD_INT 0
7305: PPUSH
7306: PPUSH
// if not building then
7307: LD_VAR 0 1
7311: NOT
7312: IFFALSE 7316
// exit ;
7314: GO 7487
// result := false ;
7316: LD_ADDR_VAR 0 2
7320: PUSH
7321: LD_INT 0
7323: ST_TO_ADDR
// places := 0 ;
7324: LD_ADDR_VAR 0 3
7328: PUSH
7329: LD_INT 0
7331: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
7332: LD_VAR 0 1
7336: PPUSH
7337: CALL_OW 266
7341: PUSH
7342: LD_INT 0
7344: DOUBLE
7345: EQUAL
7346: IFTRUE 7404
7348: LD_INT 1
7350: DOUBLE
7351: EQUAL
7352: IFTRUE 7404
7354: LD_INT 6
7356: DOUBLE
7357: EQUAL
7358: IFTRUE 7404
7360: LD_INT 7
7362: DOUBLE
7363: EQUAL
7364: IFTRUE 7404
7366: LD_INT 8
7368: DOUBLE
7369: EQUAL
7370: IFTRUE 7404
7372: LD_INT 4
7374: DOUBLE
7375: EQUAL
7376: IFTRUE 7404
7378: LD_INT 5
7380: DOUBLE
7381: EQUAL
7382: IFTRUE 7404
7384: LD_INT 2
7386: DOUBLE
7387: EQUAL
7388: IFTRUE 7404
7390: LD_INT 3
7392: DOUBLE
7393: EQUAL
7394: IFTRUE 7404
7396: LD_INT 35
7398: DOUBLE
7399: EQUAL
7400: IFTRUE 7404
7402: GO 7415
7404: POP
// places := 6 ; b_bunker , b_breastwork :
7405: LD_ADDR_VAR 0 3
7409: PUSH
7410: LD_INT 6
7412: ST_TO_ADDR
7413: GO 7460
7415: LD_INT 32
7417: DOUBLE
7418: EQUAL
7419: IFTRUE 7429
7421: LD_INT 31
7423: DOUBLE
7424: EQUAL
7425: IFTRUE 7429
7427: GO 7440
7429: POP
// places := 1 ; b_control_tower :
7430: LD_ADDR_VAR 0 3
7434: PUSH
7435: LD_INT 1
7437: ST_TO_ADDR
7438: GO 7460
7440: LD_INT 36
7442: DOUBLE
7443: EQUAL
7444: IFTRUE 7448
7446: GO 7459
7448: POP
// places := 3 ; end ;
7449: LD_ADDR_VAR 0 3
7453: PUSH
7454: LD_INT 3
7456: ST_TO_ADDR
7457: GO 7460
7459: POP
// if places then
7460: LD_VAR 0 3
7464: IFFALSE 7487
// result := UnitsInside ( building ) < places ;
7466: LD_ADDR_VAR 0 2
7470: PUSH
7471: LD_VAR 0 1
7475: PPUSH
7476: CALL_OW 313
7480: PUSH
7481: LD_VAR 0 3
7485: LESS
7486: ST_TO_ADDR
// end ;
7487: LD_VAR 0 2
7491: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
7492: LD_INT 0
7494: PPUSH
7495: PPUSH
7496: PPUSH
7497: PPUSH
// tmp := [ ] ;
7498: LD_ADDR_VAR 0 3
7502: PUSH
7503: EMPTY
7504: ST_TO_ADDR
// list := [ ] ;
7505: LD_ADDR_VAR 0 5
7509: PUSH
7510: EMPTY
7511: ST_TO_ADDR
// for i = 16 to 25 do
7512: LD_ADDR_VAR 0 4
7516: PUSH
7517: DOUBLE
7518: LD_INT 16
7520: DEC
7521: ST_TO_ADDR
7522: LD_INT 25
7524: PUSH
7525: FOR_TO
7526: IFFALSE 7599
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
7528: LD_ADDR_VAR 0 3
7532: PUSH
7533: LD_VAR 0 3
7537: PUSH
7538: LD_INT 22
7540: PUSH
7541: LD_VAR 0 1
7545: PPUSH
7546: CALL_OW 255
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PUSH
7555: LD_INT 91
7557: PUSH
7558: LD_VAR 0 1
7562: PUSH
7563: LD_INT 6
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: LIST
7570: PUSH
7571: LD_INT 30
7573: PUSH
7574: LD_VAR 0 4
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: LIST
7587: PUSH
7588: EMPTY
7589: LIST
7590: PPUSH
7591: CALL_OW 69
7595: ADD
7596: ST_TO_ADDR
7597: GO 7525
7599: POP
7600: POP
// for i = 1 to tmp do
7601: LD_ADDR_VAR 0 4
7605: PUSH
7606: DOUBLE
7607: LD_INT 1
7609: DEC
7610: ST_TO_ADDR
7611: LD_VAR 0 3
7615: PUSH
7616: FOR_TO
7617: IFFALSE 7705
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
7619: LD_ADDR_VAR 0 5
7623: PUSH
7624: LD_VAR 0 5
7628: PUSH
7629: LD_VAR 0 3
7633: PUSH
7634: LD_VAR 0 4
7638: ARRAY
7639: PPUSH
7640: CALL_OW 266
7644: PUSH
7645: LD_VAR 0 3
7649: PUSH
7650: LD_VAR 0 4
7654: ARRAY
7655: PPUSH
7656: CALL_OW 250
7660: PUSH
7661: LD_VAR 0 3
7665: PUSH
7666: LD_VAR 0 4
7670: ARRAY
7671: PPUSH
7672: CALL_OW 251
7676: PUSH
7677: LD_VAR 0 3
7681: PUSH
7682: LD_VAR 0 4
7686: ARRAY
7687: PPUSH
7688: CALL_OW 254
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: PUSH
7699: EMPTY
7700: LIST
7701: ADD
7702: ST_TO_ADDR
7703: GO 7616
7705: POP
7706: POP
// result := list ;
7707: LD_ADDR_VAR 0 2
7711: PUSH
7712: LD_VAR 0 5
7716: ST_TO_ADDR
// end ;
7717: LD_VAR 0 2
7721: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
7722: LD_INT 0
7724: PPUSH
7725: PPUSH
7726: PPUSH
7727: PPUSH
7728: PPUSH
7729: PPUSH
7730: PPUSH
// if not factory then
7731: LD_VAR 0 1
7735: NOT
7736: IFFALSE 7740
// exit ;
7738: GO 8333
// if control = control_apeman then
7740: LD_VAR 0 4
7744: PUSH
7745: LD_INT 5
7747: EQUAL
7748: IFFALSE 7857
// begin tmp := UnitsInside ( factory ) ;
7750: LD_ADDR_VAR 0 8
7754: PUSH
7755: LD_VAR 0 1
7759: PPUSH
7760: CALL_OW 313
7764: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
7765: LD_VAR 0 8
7769: PPUSH
7770: LD_INT 25
7772: PUSH
7773: LD_INT 12
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: PPUSH
7780: CALL_OW 72
7784: NOT
7785: IFFALSE 7795
// control := control_manual ;
7787: LD_ADDR_VAR 0 4
7791: PUSH
7792: LD_INT 1
7794: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
7795: LD_ADDR_VAR 0 8
7799: PUSH
7800: LD_VAR 0 1
7804: PPUSH
7805: CALL 7492 0 1
7809: ST_TO_ADDR
// if tmp then
7810: LD_VAR 0 8
7814: IFFALSE 7857
// begin for i in tmp do
7816: LD_ADDR_VAR 0 7
7820: PUSH
7821: LD_VAR 0 8
7825: PUSH
7826: FOR_IN
7827: IFFALSE 7855
// if i [ 1 ] = b_ext_radio then
7829: LD_VAR 0 7
7833: PUSH
7834: LD_INT 1
7836: ARRAY
7837: PUSH
7838: LD_INT 22
7840: EQUAL
7841: IFFALSE 7853
// begin control := control_remote ;
7843: LD_ADDR_VAR 0 4
7847: PUSH
7848: LD_INT 2
7850: ST_TO_ADDR
// break ;
7851: GO 7855
// end ;
7853: GO 7826
7855: POP
7856: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7857: LD_VAR 0 1
7861: PPUSH
7862: LD_VAR 0 2
7866: PPUSH
7867: LD_VAR 0 3
7871: PPUSH
7872: LD_VAR 0 4
7876: PPUSH
7877: LD_VAR 0 5
7881: PPUSH
7882: CALL_OW 448
7886: IFFALSE 7921
// begin result := [ chassis , engine , control , weapon ] ;
7888: LD_ADDR_VAR 0 6
7892: PUSH
7893: LD_VAR 0 2
7897: PUSH
7898: LD_VAR 0 3
7902: PUSH
7903: LD_VAR 0 4
7907: PUSH
7908: LD_VAR 0 5
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: ST_TO_ADDR
// exit ;
7919: GO 8333
// end ; _chassis := AvailableChassisList ( factory ) ;
7921: LD_ADDR_VAR 0 9
7925: PUSH
7926: LD_VAR 0 1
7930: PPUSH
7931: CALL_OW 475
7935: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7936: LD_ADDR_VAR 0 11
7940: PUSH
7941: LD_VAR 0 1
7945: PPUSH
7946: CALL_OW 476
7950: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7951: LD_ADDR_VAR 0 12
7955: PUSH
7956: LD_VAR 0 1
7960: PPUSH
7961: CALL_OW 477
7965: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7966: LD_ADDR_VAR 0 10
7970: PUSH
7971: LD_VAR 0 1
7975: PPUSH
7976: CALL_OW 478
7980: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7981: LD_VAR 0 9
7985: NOT
7986: PUSH
7987: LD_VAR 0 11
7991: NOT
7992: OR
7993: PUSH
7994: LD_VAR 0 12
7998: NOT
7999: OR
8000: PUSH
8001: LD_VAR 0 10
8005: NOT
8006: OR
8007: IFFALSE 8042
// begin result := [ chassis , engine , control , weapon ] ;
8009: LD_ADDR_VAR 0 6
8013: PUSH
8014: LD_VAR 0 2
8018: PUSH
8019: LD_VAR 0 3
8023: PUSH
8024: LD_VAR 0 4
8028: PUSH
8029: LD_VAR 0 5
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: ST_TO_ADDR
// exit ;
8040: GO 8333
// end ; if not chassis in _chassis then
8042: LD_VAR 0 2
8046: PUSH
8047: LD_VAR 0 9
8051: IN
8052: NOT
8053: IFFALSE 8079
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
8055: LD_ADDR_VAR 0 2
8059: PUSH
8060: LD_VAR 0 9
8064: PUSH
8065: LD_INT 1
8067: PPUSH
8068: LD_VAR 0 9
8072: PPUSH
8073: CALL_OW 12
8077: ARRAY
8078: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
8079: LD_VAR 0 2
8083: PPUSH
8084: LD_VAR 0 3
8088: PPUSH
8089: CALL 8338 0 2
8093: NOT
8094: IFFALSE 8153
// repeat engine := _engine [ 1 ] ;
8096: LD_ADDR_VAR 0 3
8100: PUSH
8101: LD_VAR 0 11
8105: PUSH
8106: LD_INT 1
8108: ARRAY
8109: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
8110: LD_ADDR_VAR 0 11
8114: PUSH
8115: LD_VAR 0 11
8119: PPUSH
8120: LD_INT 1
8122: PPUSH
8123: CALL_OW 3
8127: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
8128: LD_VAR 0 2
8132: PPUSH
8133: LD_VAR 0 3
8137: PPUSH
8138: CALL 8338 0 2
8142: PUSH
8143: LD_VAR 0 11
8147: PUSH
8148: EMPTY
8149: EQUAL
8150: OR
8151: IFFALSE 8096
// if not control in _control then
8153: LD_VAR 0 4
8157: PUSH
8158: LD_VAR 0 12
8162: IN
8163: NOT
8164: IFFALSE 8190
// control := _control [ rand ( 1 , _control ) ] ;
8166: LD_ADDR_VAR 0 4
8170: PUSH
8171: LD_VAR 0 12
8175: PUSH
8176: LD_INT 1
8178: PPUSH
8179: LD_VAR 0 12
8183: PPUSH
8184: CALL_OW 12
8188: ARRAY
8189: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
8190: LD_VAR 0 2
8194: PPUSH
8195: LD_VAR 0 5
8199: PPUSH
8200: CALL 8558 0 2
8204: NOT
8205: IFFALSE 8264
// repeat weapon := _weapon [ 1 ] ;
8207: LD_ADDR_VAR 0 5
8211: PUSH
8212: LD_VAR 0 10
8216: PUSH
8217: LD_INT 1
8219: ARRAY
8220: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
8221: LD_ADDR_VAR 0 10
8225: PUSH
8226: LD_VAR 0 10
8230: PPUSH
8231: LD_INT 1
8233: PPUSH
8234: CALL_OW 3
8238: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
8239: LD_VAR 0 2
8243: PPUSH
8244: LD_VAR 0 5
8248: PPUSH
8249: CALL 8558 0 2
8253: PUSH
8254: LD_VAR 0 10
8258: PUSH
8259: EMPTY
8260: EQUAL
8261: OR
8262: IFFALSE 8207
// result := [ ] ;
8264: LD_ADDR_VAR 0 6
8268: PUSH
8269: EMPTY
8270: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
8271: LD_VAR 0 1
8275: PPUSH
8276: LD_VAR 0 2
8280: PPUSH
8281: LD_VAR 0 3
8285: PPUSH
8286: LD_VAR 0 4
8290: PPUSH
8291: LD_VAR 0 5
8295: PPUSH
8296: CALL_OW 448
8300: IFFALSE 8333
// result := [ chassis , engine , control , weapon ] ;
8302: LD_ADDR_VAR 0 6
8306: PUSH
8307: LD_VAR 0 2
8311: PUSH
8312: LD_VAR 0 3
8316: PUSH
8317: LD_VAR 0 4
8321: PUSH
8322: LD_VAR 0 5
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: ST_TO_ADDR
// end ;
8333: LD_VAR 0 6
8337: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
8338: LD_INT 0
8340: PPUSH
// if not chassis or not engine then
8341: LD_VAR 0 1
8345: NOT
8346: PUSH
8347: LD_VAR 0 2
8351: NOT
8352: OR
8353: IFFALSE 8357
// exit ;
8355: GO 8553
// case engine of engine_solar :
8357: LD_VAR 0 2
8361: PUSH
8362: LD_INT 2
8364: DOUBLE
8365: EQUAL
8366: IFTRUE 8370
8368: GO 8408
8370: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
8371: LD_ADDR_VAR 0 3
8375: PUSH
8376: LD_INT 11
8378: PUSH
8379: LD_INT 12
8381: PUSH
8382: LD_INT 13
8384: PUSH
8385: LD_INT 14
8387: PUSH
8388: LD_INT 1
8390: PUSH
8391: LD_INT 2
8393: PUSH
8394: LD_INT 3
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: ST_TO_ADDR
8406: GO 8537
8408: LD_INT 1
8410: DOUBLE
8411: EQUAL
8412: IFTRUE 8416
8414: GO 8478
8416: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
8417: LD_ADDR_VAR 0 3
8421: PUSH
8422: LD_INT 11
8424: PUSH
8425: LD_INT 12
8427: PUSH
8428: LD_INT 13
8430: PUSH
8431: LD_INT 14
8433: PUSH
8434: LD_INT 1
8436: PUSH
8437: LD_INT 2
8439: PUSH
8440: LD_INT 3
8442: PUSH
8443: LD_INT 4
8445: PUSH
8446: LD_INT 5
8448: PUSH
8449: LD_INT 21
8451: PUSH
8452: LD_INT 23
8454: PUSH
8455: LD_INT 22
8457: PUSH
8458: LD_INT 24
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: ST_TO_ADDR
8476: GO 8537
8478: LD_INT 3
8480: DOUBLE
8481: EQUAL
8482: IFTRUE 8486
8484: GO 8536
8486: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8487: LD_ADDR_VAR 0 3
8491: PUSH
8492: LD_INT 13
8494: PUSH
8495: LD_INT 14
8497: PUSH
8498: LD_INT 2
8500: PUSH
8501: LD_INT 3
8503: PUSH
8504: LD_INT 4
8506: PUSH
8507: LD_INT 5
8509: PUSH
8510: LD_INT 21
8512: PUSH
8513: LD_INT 22
8515: PUSH
8516: LD_INT 23
8518: PUSH
8519: LD_INT 24
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: ST_TO_ADDR
8534: GO 8537
8536: POP
// result := ( chassis in result ) ;
8537: LD_ADDR_VAR 0 3
8541: PUSH
8542: LD_VAR 0 1
8546: PUSH
8547: LD_VAR 0 3
8551: IN
8552: ST_TO_ADDR
// end ;
8553: LD_VAR 0 3
8557: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
8558: LD_INT 0
8560: PPUSH
// if not chassis or not weapon then
8561: LD_VAR 0 1
8565: NOT
8566: PUSH
8567: LD_VAR 0 2
8571: NOT
8572: OR
8573: IFFALSE 8577
// exit ;
8575: GO 9639
// case weapon of us_machine_gun :
8577: LD_VAR 0 2
8581: PUSH
8582: LD_INT 2
8584: DOUBLE
8585: EQUAL
8586: IFTRUE 8590
8588: GO 8620
8590: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
8591: LD_ADDR_VAR 0 3
8595: PUSH
8596: LD_INT 1
8598: PUSH
8599: LD_INT 2
8601: PUSH
8602: LD_INT 3
8604: PUSH
8605: LD_INT 4
8607: PUSH
8608: LD_INT 5
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: ST_TO_ADDR
8618: GO 9623
8620: LD_INT 3
8622: DOUBLE
8623: EQUAL
8624: IFTRUE 8628
8626: GO 8658
8628: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
8629: LD_ADDR_VAR 0 3
8633: PUSH
8634: LD_INT 1
8636: PUSH
8637: LD_INT 2
8639: PUSH
8640: LD_INT 3
8642: PUSH
8643: LD_INT 4
8645: PUSH
8646: LD_INT 5
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: ST_TO_ADDR
8656: GO 9623
8658: LD_INT 11
8660: DOUBLE
8661: EQUAL
8662: IFTRUE 8666
8664: GO 8696
8666: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
8667: LD_ADDR_VAR 0 3
8671: PUSH
8672: LD_INT 1
8674: PUSH
8675: LD_INT 2
8677: PUSH
8678: LD_INT 3
8680: PUSH
8681: LD_INT 4
8683: PUSH
8684: LD_INT 5
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: ST_TO_ADDR
8694: GO 9623
8696: LD_INT 4
8698: DOUBLE
8699: EQUAL
8700: IFTRUE 8704
8702: GO 8730
8704: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
8705: LD_ADDR_VAR 0 3
8709: PUSH
8710: LD_INT 2
8712: PUSH
8713: LD_INT 3
8715: PUSH
8716: LD_INT 4
8718: PUSH
8719: LD_INT 5
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: ST_TO_ADDR
8728: GO 9623
8730: LD_INT 5
8732: DOUBLE
8733: EQUAL
8734: IFTRUE 8738
8736: GO 8764
8738: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
8739: LD_ADDR_VAR 0 3
8743: PUSH
8744: LD_INT 2
8746: PUSH
8747: LD_INT 3
8749: PUSH
8750: LD_INT 4
8752: PUSH
8753: LD_INT 5
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: ST_TO_ADDR
8762: GO 9623
8764: LD_INT 9
8766: DOUBLE
8767: EQUAL
8768: IFTRUE 8772
8770: GO 8798
8772: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
8773: LD_ADDR_VAR 0 3
8777: PUSH
8778: LD_INT 2
8780: PUSH
8781: LD_INT 3
8783: PUSH
8784: LD_INT 4
8786: PUSH
8787: LD_INT 5
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: ST_TO_ADDR
8796: GO 9623
8798: LD_INT 7
8800: DOUBLE
8801: EQUAL
8802: IFTRUE 8806
8804: GO 8832
8806: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
8807: LD_ADDR_VAR 0 3
8811: PUSH
8812: LD_INT 2
8814: PUSH
8815: LD_INT 3
8817: PUSH
8818: LD_INT 4
8820: PUSH
8821: LD_INT 5
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: ST_TO_ADDR
8830: GO 9623
8832: LD_INT 12
8834: DOUBLE
8835: EQUAL
8836: IFTRUE 8840
8838: GO 8866
8840: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
8841: LD_ADDR_VAR 0 3
8845: PUSH
8846: LD_INT 2
8848: PUSH
8849: LD_INT 3
8851: PUSH
8852: LD_INT 4
8854: PUSH
8855: LD_INT 5
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: ST_TO_ADDR
8864: GO 9623
8866: LD_INT 13
8868: DOUBLE
8869: EQUAL
8870: IFTRUE 8874
8872: GO 8900
8874: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8875: LD_ADDR_VAR 0 3
8879: PUSH
8880: LD_INT 2
8882: PUSH
8883: LD_INT 3
8885: PUSH
8886: LD_INT 4
8888: PUSH
8889: LD_INT 5
8891: PUSH
8892: EMPTY
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: ST_TO_ADDR
8898: GO 9623
8900: LD_INT 14
8902: DOUBLE
8903: EQUAL
8904: IFTRUE 8908
8906: GO 8926
8908: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8909: LD_ADDR_VAR 0 3
8913: PUSH
8914: LD_INT 4
8916: PUSH
8917: LD_INT 5
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: ST_TO_ADDR
8924: GO 9623
8926: LD_INT 6
8928: DOUBLE
8929: EQUAL
8930: IFTRUE 8934
8932: GO 8952
8934: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8935: LD_ADDR_VAR 0 3
8939: PUSH
8940: LD_INT 4
8942: PUSH
8943: LD_INT 5
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: ST_TO_ADDR
8950: GO 9623
8952: LD_INT 10
8954: DOUBLE
8955: EQUAL
8956: IFTRUE 8960
8958: GO 8978
8960: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8961: LD_ADDR_VAR 0 3
8965: PUSH
8966: LD_INT 4
8968: PUSH
8969: LD_INT 5
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: ST_TO_ADDR
8976: GO 9623
8978: LD_INT 22
8980: DOUBLE
8981: EQUAL
8982: IFTRUE 8986
8984: GO 9012
8986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8987: LD_ADDR_VAR 0 3
8991: PUSH
8992: LD_INT 11
8994: PUSH
8995: LD_INT 12
8997: PUSH
8998: LD_INT 13
9000: PUSH
9001: LD_INT 14
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: ST_TO_ADDR
9010: GO 9623
9012: LD_INT 23
9014: DOUBLE
9015: EQUAL
9016: IFTRUE 9020
9018: GO 9046
9020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
9021: LD_ADDR_VAR 0 3
9025: PUSH
9026: LD_INT 11
9028: PUSH
9029: LD_INT 12
9031: PUSH
9032: LD_INT 13
9034: PUSH
9035: LD_INT 14
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: ST_TO_ADDR
9044: GO 9623
9046: LD_INT 24
9048: DOUBLE
9049: EQUAL
9050: IFTRUE 9054
9052: GO 9080
9054: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
9055: LD_ADDR_VAR 0 3
9059: PUSH
9060: LD_INT 11
9062: PUSH
9063: LD_INT 12
9065: PUSH
9066: LD_INT 13
9068: PUSH
9069: LD_INT 14
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: ST_TO_ADDR
9078: GO 9623
9080: LD_INT 30
9082: DOUBLE
9083: EQUAL
9084: IFTRUE 9088
9086: GO 9114
9088: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
9089: LD_ADDR_VAR 0 3
9093: PUSH
9094: LD_INT 11
9096: PUSH
9097: LD_INT 12
9099: PUSH
9100: LD_INT 13
9102: PUSH
9103: LD_INT 14
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: ST_TO_ADDR
9112: GO 9623
9114: LD_INT 25
9116: DOUBLE
9117: EQUAL
9118: IFTRUE 9122
9120: GO 9140
9122: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
9123: LD_ADDR_VAR 0 3
9127: PUSH
9128: LD_INT 13
9130: PUSH
9131: LD_INT 14
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: ST_TO_ADDR
9138: GO 9623
9140: LD_INT 27
9142: DOUBLE
9143: EQUAL
9144: IFTRUE 9148
9146: GO 9166
9148: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
9149: LD_ADDR_VAR 0 3
9153: PUSH
9154: LD_INT 13
9156: PUSH
9157: LD_INT 14
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: ST_TO_ADDR
9164: GO 9623
9166: LD_EXP 40
9170: DOUBLE
9171: EQUAL
9172: IFTRUE 9176
9174: GO 9202
9176: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
9177: LD_ADDR_VAR 0 3
9181: PUSH
9182: LD_INT 11
9184: PUSH
9185: LD_INT 12
9187: PUSH
9188: LD_INT 13
9190: PUSH
9191: LD_INT 14
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: ST_TO_ADDR
9200: GO 9623
9202: LD_INT 28
9204: DOUBLE
9205: EQUAL
9206: IFTRUE 9210
9208: GO 9228
9210: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
9211: LD_ADDR_VAR 0 3
9215: PUSH
9216: LD_INT 13
9218: PUSH
9219: LD_INT 14
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: ST_TO_ADDR
9226: GO 9623
9228: LD_INT 29
9230: DOUBLE
9231: EQUAL
9232: IFTRUE 9236
9234: GO 9254
9236: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
9237: LD_ADDR_VAR 0 3
9241: PUSH
9242: LD_INT 13
9244: PUSH
9245: LD_INT 14
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: ST_TO_ADDR
9252: GO 9623
9254: LD_INT 31
9256: DOUBLE
9257: EQUAL
9258: IFTRUE 9262
9260: GO 9280
9262: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
9263: LD_ADDR_VAR 0 3
9267: PUSH
9268: LD_INT 13
9270: PUSH
9271: LD_INT 14
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: ST_TO_ADDR
9278: GO 9623
9280: LD_INT 26
9282: DOUBLE
9283: EQUAL
9284: IFTRUE 9288
9286: GO 9306
9288: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
9289: LD_ADDR_VAR 0 3
9293: PUSH
9294: LD_INT 13
9296: PUSH
9297: LD_INT 14
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: ST_TO_ADDR
9304: GO 9623
9306: LD_INT 42
9308: DOUBLE
9309: EQUAL
9310: IFTRUE 9314
9312: GO 9340
9314: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
9315: LD_ADDR_VAR 0 3
9319: PUSH
9320: LD_INT 21
9322: PUSH
9323: LD_INT 22
9325: PUSH
9326: LD_INT 23
9328: PUSH
9329: LD_INT 24
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: ST_TO_ADDR
9338: GO 9623
9340: LD_INT 43
9342: DOUBLE
9343: EQUAL
9344: IFTRUE 9348
9346: GO 9374
9348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
9349: LD_ADDR_VAR 0 3
9353: PUSH
9354: LD_INT 21
9356: PUSH
9357: LD_INT 22
9359: PUSH
9360: LD_INT 23
9362: PUSH
9363: LD_INT 24
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: ST_TO_ADDR
9372: GO 9623
9374: LD_INT 44
9376: DOUBLE
9377: EQUAL
9378: IFTRUE 9382
9380: GO 9408
9382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
9383: LD_ADDR_VAR 0 3
9387: PUSH
9388: LD_INT 21
9390: PUSH
9391: LD_INT 22
9393: PUSH
9394: LD_INT 23
9396: PUSH
9397: LD_INT 24
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: ST_TO_ADDR
9406: GO 9623
9408: LD_INT 45
9410: DOUBLE
9411: EQUAL
9412: IFTRUE 9416
9414: GO 9442
9416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
9417: LD_ADDR_VAR 0 3
9421: PUSH
9422: LD_INT 21
9424: PUSH
9425: LD_INT 22
9427: PUSH
9428: LD_INT 23
9430: PUSH
9431: LD_INT 24
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: ST_TO_ADDR
9440: GO 9623
9442: LD_INT 49
9444: DOUBLE
9445: EQUAL
9446: IFTRUE 9450
9448: GO 9476
9450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
9451: LD_ADDR_VAR 0 3
9455: PUSH
9456: LD_INT 21
9458: PUSH
9459: LD_INT 22
9461: PUSH
9462: LD_INT 23
9464: PUSH
9465: LD_INT 24
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: ST_TO_ADDR
9474: GO 9623
9476: LD_INT 51
9478: DOUBLE
9479: EQUAL
9480: IFTRUE 9484
9482: GO 9510
9484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
9485: LD_ADDR_VAR 0 3
9489: PUSH
9490: LD_INT 21
9492: PUSH
9493: LD_INT 22
9495: PUSH
9496: LD_INT 23
9498: PUSH
9499: LD_INT 24
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: ST_TO_ADDR
9508: GO 9623
9510: LD_INT 52
9512: DOUBLE
9513: EQUAL
9514: IFTRUE 9518
9516: GO 9544
9518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
9519: LD_ADDR_VAR 0 3
9523: PUSH
9524: LD_INT 21
9526: PUSH
9527: LD_INT 22
9529: PUSH
9530: LD_INT 23
9532: PUSH
9533: LD_INT 24
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: ST_TO_ADDR
9542: GO 9623
9544: LD_INT 53
9546: DOUBLE
9547: EQUAL
9548: IFTRUE 9552
9550: GO 9570
9552: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
9553: LD_ADDR_VAR 0 3
9557: PUSH
9558: LD_INT 23
9560: PUSH
9561: LD_INT 24
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: ST_TO_ADDR
9568: GO 9623
9570: LD_INT 46
9572: DOUBLE
9573: EQUAL
9574: IFTRUE 9578
9576: GO 9596
9578: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
9579: LD_ADDR_VAR 0 3
9583: PUSH
9584: LD_INT 23
9586: PUSH
9587: LD_INT 24
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: ST_TO_ADDR
9594: GO 9623
9596: LD_INT 47
9598: DOUBLE
9599: EQUAL
9600: IFTRUE 9604
9602: GO 9622
9604: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9605: LD_ADDR_VAR 0 3
9609: PUSH
9610: LD_INT 23
9612: PUSH
9613: LD_INT 24
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: ST_TO_ADDR
9620: GO 9623
9622: POP
// result := ( chassis in result ) ;
9623: LD_ADDR_VAR 0 3
9627: PUSH
9628: LD_VAR 0 1
9632: PUSH
9633: LD_VAR 0 3
9637: IN
9638: ST_TO_ADDR
// end ;
9639: LD_VAR 0 3
9643: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
9644: LD_INT 0
9646: PPUSH
9647: PPUSH
9648: PPUSH
9649: PPUSH
9650: PPUSH
9651: PPUSH
9652: PPUSH
// result := array ;
9653: LD_ADDR_VAR 0 5
9657: PUSH
9658: LD_VAR 0 1
9662: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
9663: LD_VAR 0 1
9667: NOT
9668: PUSH
9669: LD_VAR 0 2
9673: NOT
9674: OR
9675: PUSH
9676: LD_VAR 0 3
9680: NOT
9681: OR
9682: PUSH
9683: LD_VAR 0 2
9687: PUSH
9688: LD_VAR 0 1
9692: GREATER
9693: OR
9694: PUSH
9695: LD_VAR 0 3
9699: PUSH
9700: LD_VAR 0 1
9704: GREATER
9705: OR
9706: IFFALSE 9710
// exit ;
9708: GO 10006
// if direction then
9710: LD_VAR 0 4
9714: IFFALSE 9778
// begin d := 1 ;
9716: LD_ADDR_VAR 0 9
9720: PUSH
9721: LD_INT 1
9723: ST_TO_ADDR
// if i_from > i_to then
9724: LD_VAR 0 2
9728: PUSH
9729: LD_VAR 0 3
9733: GREATER
9734: IFFALSE 9760
// length := ( array - i_from ) + i_to else
9736: LD_ADDR_VAR 0 11
9740: PUSH
9741: LD_VAR 0 1
9745: PUSH
9746: LD_VAR 0 2
9750: MINUS
9751: PUSH
9752: LD_VAR 0 3
9756: PLUS
9757: ST_TO_ADDR
9758: GO 9776
// length := i_to - i_from ;
9760: LD_ADDR_VAR 0 11
9764: PUSH
9765: LD_VAR 0 3
9769: PUSH
9770: LD_VAR 0 2
9774: MINUS
9775: ST_TO_ADDR
// end else
9776: GO 9839
// begin d := - 1 ;
9778: LD_ADDR_VAR 0 9
9782: PUSH
9783: LD_INT 1
9785: NEG
9786: ST_TO_ADDR
// if i_from > i_to then
9787: LD_VAR 0 2
9791: PUSH
9792: LD_VAR 0 3
9796: GREATER
9797: IFFALSE 9817
// length := i_from - i_to else
9799: LD_ADDR_VAR 0 11
9803: PUSH
9804: LD_VAR 0 2
9808: PUSH
9809: LD_VAR 0 3
9813: MINUS
9814: ST_TO_ADDR
9815: GO 9839
// length := ( array - i_to ) + i_from ;
9817: LD_ADDR_VAR 0 11
9821: PUSH
9822: LD_VAR 0 1
9826: PUSH
9827: LD_VAR 0 3
9831: MINUS
9832: PUSH
9833: LD_VAR 0 2
9837: PLUS
9838: ST_TO_ADDR
// end ; if not length then
9839: LD_VAR 0 11
9843: NOT
9844: IFFALSE 9848
// exit ;
9846: GO 10006
// tmp := array ;
9848: LD_ADDR_VAR 0 10
9852: PUSH
9853: LD_VAR 0 1
9857: ST_TO_ADDR
// for i = 1 to length do
9858: LD_ADDR_VAR 0 6
9862: PUSH
9863: DOUBLE
9864: LD_INT 1
9866: DEC
9867: ST_TO_ADDR
9868: LD_VAR 0 11
9872: PUSH
9873: FOR_TO
9874: IFFALSE 9994
// begin for j = 1 to array do
9876: LD_ADDR_VAR 0 7
9880: PUSH
9881: DOUBLE
9882: LD_INT 1
9884: DEC
9885: ST_TO_ADDR
9886: LD_VAR 0 1
9890: PUSH
9891: FOR_TO
9892: IFFALSE 9980
// begin k := j + d ;
9894: LD_ADDR_VAR 0 8
9898: PUSH
9899: LD_VAR 0 7
9903: PUSH
9904: LD_VAR 0 9
9908: PLUS
9909: ST_TO_ADDR
// if k > array then
9910: LD_VAR 0 8
9914: PUSH
9915: LD_VAR 0 1
9919: GREATER
9920: IFFALSE 9930
// k := 1 ;
9922: LD_ADDR_VAR 0 8
9926: PUSH
9927: LD_INT 1
9929: ST_TO_ADDR
// if not k then
9930: LD_VAR 0 8
9934: NOT
9935: IFFALSE 9947
// k := array ;
9937: LD_ADDR_VAR 0 8
9941: PUSH
9942: LD_VAR 0 1
9946: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9947: LD_ADDR_VAR 0 10
9951: PUSH
9952: LD_VAR 0 10
9956: PPUSH
9957: LD_VAR 0 8
9961: PPUSH
9962: LD_VAR 0 1
9966: PUSH
9967: LD_VAR 0 7
9971: ARRAY
9972: PPUSH
9973: CALL_OW 1
9977: ST_TO_ADDR
// end ;
9978: GO 9891
9980: POP
9981: POP
// array := tmp ;
9982: LD_ADDR_VAR 0 1
9986: PUSH
9987: LD_VAR 0 10
9991: ST_TO_ADDR
// end ;
9992: GO 9873
9994: POP
9995: POP
// result := array ;
9996: LD_ADDR_VAR 0 5
10000: PUSH
10001: LD_VAR 0 1
10005: ST_TO_ADDR
// end ;
10006: LD_VAR 0 5
10010: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
10011: LD_INT 0
10013: PPUSH
10014: PPUSH
// result := 0 ;
10015: LD_ADDR_VAR 0 3
10019: PUSH
10020: LD_INT 0
10022: ST_TO_ADDR
// if not array or not value in array then
10023: LD_VAR 0 1
10027: NOT
10028: PUSH
10029: LD_VAR 0 2
10033: PUSH
10034: LD_VAR 0 1
10038: IN
10039: NOT
10040: OR
10041: IFFALSE 10045
// exit ;
10043: GO 10099
// for i = 1 to array do
10045: LD_ADDR_VAR 0 4
10049: PUSH
10050: DOUBLE
10051: LD_INT 1
10053: DEC
10054: ST_TO_ADDR
10055: LD_VAR 0 1
10059: PUSH
10060: FOR_TO
10061: IFFALSE 10097
// if value = array [ i ] then
10063: LD_VAR 0 2
10067: PUSH
10068: LD_VAR 0 1
10072: PUSH
10073: LD_VAR 0 4
10077: ARRAY
10078: EQUAL
10079: IFFALSE 10095
// begin result := i ;
10081: LD_ADDR_VAR 0 3
10085: PUSH
10086: LD_VAR 0 4
10090: ST_TO_ADDR
// exit ;
10091: POP
10092: POP
10093: GO 10099
// end ;
10095: GO 10060
10097: POP
10098: POP
// end ;
10099: LD_VAR 0 3
10103: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
10104: LD_INT 0
10106: PPUSH
// vc_chassis := chassis ;
10107: LD_ADDR_OWVAR 37
10111: PUSH
10112: LD_VAR 0 1
10116: ST_TO_ADDR
// vc_engine := engine ;
10117: LD_ADDR_OWVAR 39
10121: PUSH
10122: LD_VAR 0 2
10126: ST_TO_ADDR
// vc_control := control ;
10127: LD_ADDR_OWVAR 38
10131: PUSH
10132: LD_VAR 0 3
10136: ST_TO_ADDR
// vc_weapon := weapon ;
10137: LD_ADDR_OWVAR 40
10141: PUSH
10142: LD_VAR 0 4
10146: ST_TO_ADDR
// vc_fuel_battery := fuel ;
10147: LD_ADDR_OWVAR 41
10151: PUSH
10152: LD_VAR 0 5
10156: ST_TO_ADDR
// end ;
10157: LD_VAR 0 6
10161: RET
// export function WantPlant ( unit ) ; var task ; begin
10162: LD_INT 0
10164: PPUSH
10165: PPUSH
// result := false ;
10166: LD_ADDR_VAR 0 2
10170: PUSH
10171: LD_INT 0
10173: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
10174: LD_ADDR_VAR 0 3
10178: PUSH
10179: LD_VAR 0 1
10183: PPUSH
10184: CALL_OW 437
10188: ST_TO_ADDR
// if task then
10189: LD_VAR 0 3
10193: IFFALSE 10221
// if task [ 1 ] [ 1 ] = p then
10195: LD_VAR 0 3
10199: PUSH
10200: LD_INT 1
10202: ARRAY
10203: PUSH
10204: LD_INT 1
10206: ARRAY
10207: PUSH
10208: LD_STRING p
10210: EQUAL
10211: IFFALSE 10221
// result := true ;
10213: LD_ADDR_VAR 0 2
10217: PUSH
10218: LD_INT 1
10220: ST_TO_ADDR
// end ;
10221: LD_VAR 0 2
10225: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
10226: LD_INT 0
10228: PPUSH
10229: PPUSH
10230: PPUSH
10231: PPUSH
// if pos < 1 then
10232: LD_VAR 0 2
10236: PUSH
10237: LD_INT 1
10239: LESS
10240: IFFALSE 10244
// exit ;
10242: GO 10547
// if pos = 1 then
10244: LD_VAR 0 2
10248: PUSH
10249: LD_INT 1
10251: EQUAL
10252: IFFALSE 10285
// result := Replace ( arr , pos [ 1 ] , value ) else
10254: LD_ADDR_VAR 0 4
10258: PUSH
10259: LD_VAR 0 1
10263: PPUSH
10264: LD_VAR 0 2
10268: PUSH
10269: LD_INT 1
10271: ARRAY
10272: PPUSH
10273: LD_VAR 0 3
10277: PPUSH
10278: CALL_OW 1
10282: ST_TO_ADDR
10283: GO 10547
// begin tmp := arr ;
10285: LD_ADDR_VAR 0 6
10289: PUSH
10290: LD_VAR 0 1
10294: ST_TO_ADDR
// s_arr := [ tmp ] ;
10295: LD_ADDR_VAR 0 7
10299: PUSH
10300: LD_VAR 0 6
10304: PUSH
10305: EMPTY
10306: LIST
10307: ST_TO_ADDR
// for i = 1 to pos - 1 do
10308: LD_ADDR_VAR 0 5
10312: PUSH
10313: DOUBLE
10314: LD_INT 1
10316: DEC
10317: ST_TO_ADDR
10318: LD_VAR 0 2
10322: PUSH
10323: LD_INT 1
10325: MINUS
10326: PUSH
10327: FOR_TO
10328: IFFALSE 10373
// begin tmp := tmp [ pos [ i ] ] ;
10330: LD_ADDR_VAR 0 6
10334: PUSH
10335: LD_VAR 0 6
10339: PUSH
10340: LD_VAR 0 2
10344: PUSH
10345: LD_VAR 0 5
10349: ARRAY
10350: ARRAY
10351: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
10352: LD_ADDR_VAR 0 7
10356: PUSH
10357: LD_VAR 0 7
10361: PUSH
10362: LD_VAR 0 6
10366: PUSH
10367: EMPTY
10368: LIST
10369: ADD
10370: ST_TO_ADDR
// end ;
10371: GO 10327
10373: POP
10374: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
10375: LD_ADDR_VAR 0 6
10379: PUSH
10380: LD_VAR 0 6
10384: PPUSH
10385: LD_VAR 0 2
10389: PUSH
10390: LD_VAR 0 2
10394: ARRAY
10395: PPUSH
10396: LD_VAR 0 3
10400: PPUSH
10401: CALL_OW 1
10405: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
10406: LD_ADDR_VAR 0 7
10410: PUSH
10411: LD_VAR 0 7
10415: PPUSH
10416: LD_VAR 0 7
10420: PPUSH
10421: LD_VAR 0 6
10425: PPUSH
10426: CALL_OW 1
10430: ST_TO_ADDR
// for i = s_arr downto 2 do
10431: LD_ADDR_VAR 0 5
10435: PUSH
10436: DOUBLE
10437: LD_VAR 0 7
10441: INC
10442: ST_TO_ADDR
10443: LD_INT 2
10445: PUSH
10446: FOR_DOWNTO
10447: IFFALSE 10531
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
10449: LD_ADDR_VAR 0 6
10453: PUSH
10454: LD_VAR 0 7
10458: PUSH
10459: LD_VAR 0 5
10463: PUSH
10464: LD_INT 1
10466: MINUS
10467: ARRAY
10468: PPUSH
10469: LD_VAR 0 2
10473: PUSH
10474: LD_VAR 0 5
10478: PUSH
10479: LD_INT 1
10481: MINUS
10482: ARRAY
10483: PPUSH
10484: LD_VAR 0 7
10488: PUSH
10489: LD_VAR 0 5
10493: ARRAY
10494: PPUSH
10495: CALL_OW 1
10499: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
10500: LD_ADDR_VAR 0 7
10504: PUSH
10505: LD_VAR 0 7
10509: PPUSH
10510: LD_VAR 0 5
10514: PUSH
10515: LD_INT 1
10517: MINUS
10518: PPUSH
10519: LD_VAR 0 6
10523: PPUSH
10524: CALL_OW 1
10528: ST_TO_ADDR
// end ;
10529: GO 10446
10531: POP
10532: POP
// result := s_arr [ 1 ] ;
10533: LD_ADDR_VAR 0 4
10537: PUSH
10538: LD_VAR 0 7
10542: PUSH
10543: LD_INT 1
10545: ARRAY
10546: ST_TO_ADDR
// end ; end ;
10547: LD_VAR 0 4
10551: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
10552: LD_INT 0
10554: PPUSH
10555: PPUSH
// if not list then
10556: LD_VAR 0 1
10560: NOT
10561: IFFALSE 10565
// exit ;
10563: GO 10656
// i := list [ pos1 ] ;
10565: LD_ADDR_VAR 0 5
10569: PUSH
10570: LD_VAR 0 1
10574: PUSH
10575: LD_VAR 0 2
10579: ARRAY
10580: ST_TO_ADDR
// if not i then
10581: LD_VAR 0 5
10585: NOT
10586: IFFALSE 10590
// exit ;
10588: GO 10656
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
10590: LD_ADDR_VAR 0 1
10594: PUSH
10595: LD_VAR 0 1
10599: PPUSH
10600: LD_VAR 0 2
10604: PPUSH
10605: LD_VAR 0 1
10609: PUSH
10610: LD_VAR 0 3
10614: ARRAY
10615: PPUSH
10616: CALL_OW 1
10620: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
10621: LD_ADDR_VAR 0 1
10625: PUSH
10626: LD_VAR 0 1
10630: PPUSH
10631: LD_VAR 0 3
10635: PPUSH
10636: LD_VAR 0 5
10640: PPUSH
10641: CALL_OW 1
10645: ST_TO_ADDR
// result := list ;
10646: LD_ADDR_VAR 0 4
10650: PUSH
10651: LD_VAR 0 1
10655: ST_TO_ADDR
// end ;
10656: LD_VAR 0 4
10660: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
10661: LD_INT 0
10663: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
10664: LD_ADDR_VAR 0 5
10668: PUSH
10669: LD_VAR 0 1
10673: PPUSH
10674: CALL_OW 250
10678: PPUSH
10679: LD_VAR 0 1
10683: PPUSH
10684: CALL_OW 251
10688: PPUSH
10689: LD_VAR 0 2
10693: PPUSH
10694: LD_VAR 0 3
10698: PPUSH
10699: LD_VAR 0 4
10703: PPUSH
10704: CALL 10714 0 5
10708: ST_TO_ADDR
// end ;
10709: LD_VAR 0 5
10713: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
10714: LD_INT 0
10716: PPUSH
10717: PPUSH
10718: PPUSH
10719: PPUSH
// if not list then
10720: LD_VAR 0 3
10724: NOT
10725: IFFALSE 10729
// exit ;
10727: GO 11117
// result := [ ] ;
10729: LD_ADDR_VAR 0 6
10733: PUSH
10734: EMPTY
10735: ST_TO_ADDR
// for i in list do
10736: LD_ADDR_VAR 0 7
10740: PUSH
10741: LD_VAR 0 3
10745: PUSH
10746: FOR_IN
10747: IFFALSE 10949
// begin tmp := GetDistUnitXY ( i , x , y ) ;
10749: LD_ADDR_VAR 0 9
10753: PUSH
10754: LD_VAR 0 7
10758: PPUSH
10759: LD_VAR 0 1
10763: PPUSH
10764: LD_VAR 0 2
10768: PPUSH
10769: CALL_OW 297
10773: ST_TO_ADDR
// if not result then
10774: LD_VAR 0 6
10778: NOT
10779: IFFALSE 10805
// result := [ [ i , tmp ] ] else
10781: LD_ADDR_VAR 0 6
10785: PUSH
10786: LD_VAR 0 7
10790: PUSH
10791: LD_VAR 0 9
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: EMPTY
10801: LIST
10802: ST_TO_ADDR
10803: GO 10947
// begin if result [ result ] [ 2 ] < tmp then
10805: LD_VAR 0 6
10809: PUSH
10810: LD_VAR 0 6
10814: ARRAY
10815: PUSH
10816: LD_INT 2
10818: ARRAY
10819: PUSH
10820: LD_VAR 0 9
10824: LESS
10825: IFFALSE 10867
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
10827: LD_ADDR_VAR 0 6
10831: PUSH
10832: LD_VAR 0 6
10836: PPUSH
10837: LD_VAR 0 6
10841: PUSH
10842: LD_INT 1
10844: PLUS
10845: PPUSH
10846: LD_VAR 0 7
10850: PUSH
10851: LD_VAR 0 9
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PPUSH
10860: CALL_OW 2
10864: ST_TO_ADDR
10865: GO 10947
// for j = 1 to result do
10867: LD_ADDR_VAR 0 8
10871: PUSH
10872: DOUBLE
10873: LD_INT 1
10875: DEC
10876: ST_TO_ADDR
10877: LD_VAR 0 6
10881: PUSH
10882: FOR_TO
10883: IFFALSE 10945
// begin if tmp < result [ j ] [ 2 ] then
10885: LD_VAR 0 9
10889: PUSH
10890: LD_VAR 0 6
10894: PUSH
10895: LD_VAR 0 8
10899: ARRAY
10900: PUSH
10901: LD_INT 2
10903: ARRAY
10904: LESS
10905: IFFALSE 10943
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10907: LD_ADDR_VAR 0 6
10911: PUSH
10912: LD_VAR 0 6
10916: PPUSH
10917: LD_VAR 0 8
10921: PPUSH
10922: LD_VAR 0 7
10926: PUSH
10927: LD_VAR 0 9
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PPUSH
10936: CALL_OW 2
10940: ST_TO_ADDR
// break ;
10941: GO 10945
// end ; end ;
10943: GO 10882
10945: POP
10946: POP
// end ; end ;
10947: GO 10746
10949: POP
10950: POP
// if result and not asc then
10951: LD_VAR 0 6
10955: PUSH
10956: LD_VAR 0 4
10960: NOT
10961: AND
10962: IFFALSE 11037
// begin tmp := result ;
10964: LD_ADDR_VAR 0 9
10968: PUSH
10969: LD_VAR 0 6
10973: ST_TO_ADDR
// for i = tmp downto 1 do
10974: LD_ADDR_VAR 0 7
10978: PUSH
10979: DOUBLE
10980: LD_VAR 0 9
10984: INC
10985: ST_TO_ADDR
10986: LD_INT 1
10988: PUSH
10989: FOR_DOWNTO
10990: IFFALSE 11035
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10992: LD_ADDR_VAR 0 6
10996: PUSH
10997: LD_VAR 0 6
11001: PPUSH
11002: LD_VAR 0 9
11006: PUSH
11007: LD_VAR 0 7
11011: MINUS
11012: PUSH
11013: LD_INT 1
11015: PLUS
11016: PPUSH
11017: LD_VAR 0 9
11021: PUSH
11022: LD_VAR 0 7
11026: ARRAY
11027: PPUSH
11028: CALL_OW 1
11032: ST_TO_ADDR
11033: GO 10989
11035: POP
11036: POP
// end ; tmp := [ ] ;
11037: LD_ADDR_VAR 0 9
11041: PUSH
11042: EMPTY
11043: ST_TO_ADDR
// if mode then
11044: LD_VAR 0 5
11048: IFFALSE 11117
// begin for i = 1 to result do
11050: LD_ADDR_VAR 0 7
11054: PUSH
11055: DOUBLE
11056: LD_INT 1
11058: DEC
11059: ST_TO_ADDR
11060: LD_VAR 0 6
11064: PUSH
11065: FOR_TO
11066: IFFALSE 11105
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
11068: LD_ADDR_VAR 0 9
11072: PUSH
11073: LD_VAR 0 9
11077: PPUSH
11078: LD_VAR 0 7
11082: PPUSH
11083: LD_VAR 0 6
11087: PUSH
11088: LD_VAR 0 7
11092: ARRAY
11093: PUSH
11094: LD_INT 1
11096: ARRAY
11097: PPUSH
11098: CALL_OW 1
11102: ST_TO_ADDR
11103: GO 11065
11105: POP
11106: POP
// result := tmp ;
11107: LD_ADDR_VAR 0 6
11111: PUSH
11112: LD_VAR 0 9
11116: ST_TO_ADDR
// end ; end ;
11117: LD_VAR 0 6
11121: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
11122: LD_INT 0
11124: PPUSH
11125: PPUSH
11126: PPUSH
11127: PPUSH
11128: PPUSH
11129: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
11130: LD_ADDR_VAR 0 5
11134: PUSH
11135: LD_INT 0
11137: PUSH
11138: LD_INT 0
11140: PUSH
11141: LD_INT 0
11143: PUSH
11144: EMPTY
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: ST_TO_ADDR
// if not x or not y then
11152: LD_VAR 0 2
11156: NOT
11157: PUSH
11158: LD_VAR 0 3
11162: NOT
11163: OR
11164: IFFALSE 11168
// exit ;
11166: GO 12820
// if not range then
11168: LD_VAR 0 4
11172: NOT
11173: IFFALSE 11183
// range := 10 ;
11175: LD_ADDR_VAR 0 4
11179: PUSH
11180: LD_INT 10
11182: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11183: LD_ADDR_VAR 0 8
11187: PUSH
11188: LD_INT 81
11190: PUSH
11191: LD_VAR 0 1
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PUSH
11200: LD_INT 92
11202: PUSH
11203: LD_VAR 0 2
11207: PUSH
11208: LD_VAR 0 3
11212: PUSH
11213: LD_VAR 0 4
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: PUSH
11224: LD_INT 3
11226: PUSH
11227: LD_INT 21
11229: PUSH
11230: LD_INT 3
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: LIST
11245: PPUSH
11246: CALL_OW 69
11250: ST_TO_ADDR
// if not tmp then
11251: LD_VAR 0 8
11255: NOT
11256: IFFALSE 11260
// exit ;
11258: GO 12820
// for i in tmp do
11260: LD_ADDR_VAR 0 6
11264: PUSH
11265: LD_VAR 0 8
11269: PUSH
11270: FOR_IN
11271: IFFALSE 12795
// begin points := [ 0 , 0 , 0 ] ;
11273: LD_ADDR_VAR 0 9
11277: PUSH
11278: LD_INT 0
11280: PUSH
11281: LD_INT 0
11283: PUSH
11284: LD_INT 0
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: ST_TO_ADDR
// bpoints := 1 ;
11292: LD_ADDR_VAR 0 10
11296: PUSH
11297: LD_INT 1
11299: ST_TO_ADDR
// case GetType ( i ) of unit_human :
11300: LD_VAR 0 6
11304: PPUSH
11305: CALL_OW 247
11309: PUSH
11310: LD_INT 1
11312: DOUBLE
11313: EQUAL
11314: IFTRUE 11318
11316: GO 11896
11318: POP
// begin if GetClass ( i ) = 1 then
11319: LD_VAR 0 6
11323: PPUSH
11324: CALL_OW 257
11328: PUSH
11329: LD_INT 1
11331: EQUAL
11332: IFFALSE 11353
// points := [ 10 , 5 , 3 ] ;
11334: LD_ADDR_VAR 0 9
11338: PUSH
11339: LD_INT 10
11341: PUSH
11342: LD_INT 5
11344: PUSH
11345: LD_INT 3
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: LIST
11352: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
11353: LD_VAR 0 6
11357: PPUSH
11358: CALL_OW 257
11362: PUSH
11363: LD_INT 2
11365: PUSH
11366: LD_INT 3
11368: PUSH
11369: LD_INT 4
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: LIST
11376: IN
11377: IFFALSE 11398
// points := [ 3 , 2 , 1 ] ;
11379: LD_ADDR_VAR 0 9
11383: PUSH
11384: LD_INT 3
11386: PUSH
11387: LD_INT 2
11389: PUSH
11390: LD_INT 1
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: ST_TO_ADDR
// if GetClass ( i ) = 5 then
11398: LD_VAR 0 6
11402: PPUSH
11403: CALL_OW 257
11407: PUSH
11408: LD_INT 5
11410: EQUAL
11411: IFFALSE 11432
// points := [ 130 , 5 , 2 ] ;
11413: LD_ADDR_VAR 0 9
11417: PUSH
11418: LD_INT 130
11420: PUSH
11421: LD_INT 5
11423: PUSH
11424: LD_INT 2
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: LIST
11431: ST_TO_ADDR
// if GetClass ( i ) = 8 then
11432: LD_VAR 0 6
11436: PPUSH
11437: CALL_OW 257
11441: PUSH
11442: LD_INT 8
11444: EQUAL
11445: IFFALSE 11466
// points := [ 35 , 35 , 30 ] ;
11447: LD_ADDR_VAR 0 9
11451: PUSH
11452: LD_INT 35
11454: PUSH
11455: LD_INT 35
11457: PUSH
11458: LD_INT 30
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: LIST
11465: ST_TO_ADDR
// if GetClass ( i ) = 9 then
11466: LD_VAR 0 6
11470: PPUSH
11471: CALL_OW 257
11475: PUSH
11476: LD_INT 9
11478: EQUAL
11479: IFFALSE 11500
// points := [ 20 , 55 , 40 ] ;
11481: LD_ADDR_VAR 0 9
11485: PUSH
11486: LD_INT 20
11488: PUSH
11489: LD_INT 55
11491: PUSH
11492: LD_INT 40
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: LIST
11499: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
11500: LD_VAR 0 6
11504: PPUSH
11505: CALL_OW 257
11509: PUSH
11510: LD_INT 12
11512: PUSH
11513: LD_INT 16
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: IN
11520: IFFALSE 11541
// points := [ 5 , 3 , 2 ] ;
11522: LD_ADDR_VAR 0 9
11526: PUSH
11527: LD_INT 5
11529: PUSH
11530: LD_INT 3
11532: PUSH
11533: LD_INT 2
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: LIST
11540: ST_TO_ADDR
// if GetClass ( i ) = 17 then
11541: LD_VAR 0 6
11545: PPUSH
11546: CALL_OW 257
11550: PUSH
11551: LD_INT 17
11553: EQUAL
11554: IFFALSE 11575
// points := [ 100 , 50 , 75 ] ;
11556: LD_ADDR_VAR 0 9
11560: PUSH
11561: LD_INT 100
11563: PUSH
11564: LD_INT 50
11566: PUSH
11567: LD_INT 75
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: ST_TO_ADDR
// if GetClass ( i ) = 15 then
11575: LD_VAR 0 6
11579: PPUSH
11580: CALL_OW 257
11584: PUSH
11585: LD_INT 15
11587: EQUAL
11588: IFFALSE 11609
// points := [ 10 , 5 , 3 ] ;
11590: LD_ADDR_VAR 0 9
11594: PUSH
11595: LD_INT 10
11597: PUSH
11598: LD_INT 5
11600: PUSH
11601: LD_INT 3
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: LIST
11608: ST_TO_ADDR
// if GetClass ( i ) = 14 then
11609: LD_VAR 0 6
11613: PPUSH
11614: CALL_OW 257
11618: PUSH
11619: LD_INT 14
11621: EQUAL
11622: IFFALSE 11643
// points := [ 10 , 0 , 0 ] ;
11624: LD_ADDR_VAR 0 9
11628: PUSH
11629: LD_INT 10
11631: PUSH
11632: LD_INT 0
11634: PUSH
11635: LD_INT 0
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: LIST
11642: ST_TO_ADDR
// if GetClass ( i ) = 11 then
11643: LD_VAR 0 6
11647: PPUSH
11648: CALL_OW 257
11652: PUSH
11653: LD_INT 11
11655: EQUAL
11656: IFFALSE 11677
// points := [ 30 , 10 , 5 ] ;
11658: LD_ADDR_VAR 0 9
11662: PUSH
11663: LD_INT 30
11665: PUSH
11666: LD_INT 10
11668: PUSH
11669: LD_INT 5
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: LIST
11676: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
11677: LD_VAR 0 1
11681: PPUSH
11682: LD_INT 5
11684: PPUSH
11685: CALL_OW 321
11689: PUSH
11690: LD_INT 2
11692: EQUAL
11693: IFFALSE 11710
// bpoints := bpoints * 1.8 ;
11695: LD_ADDR_VAR 0 10
11699: PUSH
11700: LD_VAR 0 10
11704: PUSH
11705: LD_REAL  1.80000000000000E+0000
11708: MUL
11709: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
11710: LD_VAR 0 6
11714: PPUSH
11715: CALL_OW 257
11719: PUSH
11720: LD_INT 1
11722: PUSH
11723: LD_INT 2
11725: PUSH
11726: LD_INT 3
11728: PUSH
11729: LD_INT 4
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: IN
11738: PUSH
11739: LD_VAR 0 1
11743: PPUSH
11744: LD_INT 51
11746: PPUSH
11747: CALL_OW 321
11751: PUSH
11752: LD_INT 2
11754: EQUAL
11755: AND
11756: IFFALSE 11773
// bpoints := bpoints * 1.2 ;
11758: LD_ADDR_VAR 0 10
11762: PUSH
11763: LD_VAR 0 10
11767: PUSH
11768: LD_REAL  1.20000000000000E+0000
11771: MUL
11772: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
11773: LD_VAR 0 6
11777: PPUSH
11778: CALL_OW 257
11782: PUSH
11783: LD_INT 5
11785: PUSH
11786: LD_INT 7
11788: PUSH
11789: LD_INT 9
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: LIST
11796: IN
11797: PUSH
11798: LD_VAR 0 1
11802: PPUSH
11803: LD_INT 52
11805: PPUSH
11806: CALL_OW 321
11810: PUSH
11811: LD_INT 2
11813: EQUAL
11814: AND
11815: IFFALSE 11832
// bpoints := bpoints * 1.5 ;
11817: LD_ADDR_VAR 0 10
11821: PUSH
11822: LD_VAR 0 10
11826: PUSH
11827: LD_REAL  1.50000000000000E+0000
11830: MUL
11831: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
11832: LD_VAR 0 1
11836: PPUSH
11837: LD_INT 66
11839: PPUSH
11840: CALL_OW 321
11844: PUSH
11845: LD_INT 2
11847: EQUAL
11848: IFFALSE 11865
// bpoints := bpoints * 1.1 ;
11850: LD_ADDR_VAR 0 10
11854: PUSH
11855: LD_VAR 0 10
11859: PUSH
11860: LD_REAL  1.10000000000000E+0000
11863: MUL
11864: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11865: LD_ADDR_VAR 0 10
11869: PUSH
11870: LD_VAR 0 10
11874: PUSH
11875: LD_VAR 0 6
11879: PPUSH
11880: LD_INT 1
11882: PPUSH
11883: CALL_OW 259
11887: PUSH
11888: LD_REAL  1.15000000000000E+0000
11891: MUL
11892: MUL
11893: ST_TO_ADDR
// end ; unit_vehicle :
11894: GO 12724
11896: LD_INT 2
11898: DOUBLE
11899: EQUAL
11900: IFTRUE 11904
11902: GO 12712
11904: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11905: LD_VAR 0 6
11909: PPUSH
11910: CALL_OW 264
11914: PUSH
11915: LD_INT 2
11917: PUSH
11918: LD_INT 42
11920: PUSH
11921: LD_INT 24
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: LIST
11928: IN
11929: IFFALSE 11950
// points := [ 25 , 5 , 3 ] ;
11931: LD_ADDR_VAR 0 9
11935: PUSH
11936: LD_INT 25
11938: PUSH
11939: LD_INT 5
11941: PUSH
11942: LD_INT 3
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: LIST
11949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11950: LD_VAR 0 6
11954: PPUSH
11955: CALL_OW 264
11959: PUSH
11960: LD_INT 4
11962: PUSH
11963: LD_INT 43
11965: PUSH
11966: LD_INT 25
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: LIST
11973: IN
11974: IFFALSE 11995
// points := [ 40 , 15 , 5 ] ;
11976: LD_ADDR_VAR 0 9
11980: PUSH
11981: LD_INT 40
11983: PUSH
11984: LD_INT 15
11986: PUSH
11987: LD_INT 5
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: LIST
11994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11995: LD_VAR 0 6
11999: PPUSH
12000: CALL_OW 264
12004: PUSH
12005: LD_INT 3
12007: PUSH
12008: LD_INT 23
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: IN
12015: IFFALSE 12036
// points := [ 7 , 25 , 8 ] ;
12017: LD_ADDR_VAR 0 9
12021: PUSH
12022: LD_INT 7
12024: PUSH
12025: LD_INT 25
12027: PUSH
12028: LD_INT 8
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: LIST
12035: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
12036: LD_VAR 0 6
12040: PPUSH
12041: CALL_OW 264
12045: PUSH
12046: LD_INT 5
12048: PUSH
12049: LD_INT 27
12051: PUSH
12052: LD_INT 44
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: LIST
12059: IN
12060: IFFALSE 12081
// points := [ 14 , 50 , 16 ] ;
12062: LD_ADDR_VAR 0 9
12066: PUSH
12067: LD_INT 14
12069: PUSH
12070: LD_INT 50
12072: PUSH
12073: LD_INT 16
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: LIST
12080: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
12081: LD_VAR 0 6
12085: PPUSH
12086: CALL_OW 264
12090: PUSH
12091: LD_INT 6
12093: PUSH
12094: LD_INT 46
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: IN
12101: IFFALSE 12122
// points := [ 32 , 120 , 70 ] ;
12103: LD_ADDR_VAR 0 9
12107: PUSH
12108: LD_INT 32
12110: PUSH
12111: LD_INT 120
12113: PUSH
12114: LD_INT 70
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: LIST
12121: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
12122: LD_VAR 0 6
12126: PPUSH
12127: CALL_OW 264
12131: PUSH
12132: LD_INT 7
12134: PUSH
12135: LD_INT 28
12137: PUSH
12138: LD_INT 45
12140: PUSH
12141: LD_EXP 40
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: IN
12152: IFFALSE 12173
// points := [ 35 , 20 , 45 ] ;
12154: LD_ADDR_VAR 0 9
12158: PUSH
12159: LD_INT 35
12161: PUSH
12162: LD_INT 20
12164: PUSH
12165: LD_INT 45
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: LIST
12172: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
12173: LD_VAR 0 6
12177: PPUSH
12178: CALL_OW 264
12182: PUSH
12183: LD_INT 47
12185: PUSH
12186: EMPTY
12187: LIST
12188: IN
12189: IFFALSE 12210
// points := [ 67 , 45 , 75 ] ;
12191: LD_ADDR_VAR 0 9
12195: PUSH
12196: LD_INT 67
12198: PUSH
12199: LD_INT 45
12201: PUSH
12202: LD_INT 75
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: LIST
12209: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
12210: LD_VAR 0 6
12214: PPUSH
12215: CALL_OW 264
12219: PUSH
12220: LD_INT 26
12222: PUSH
12223: EMPTY
12224: LIST
12225: IN
12226: IFFALSE 12247
// points := [ 120 , 30 , 80 ] ;
12228: LD_ADDR_VAR 0 9
12232: PUSH
12233: LD_INT 120
12235: PUSH
12236: LD_INT 30
12238: PUSH
12239: LD_INT 80
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: LIST
12246: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
12247: LD_VAR 0 6
12251: PPUSH
12252: CALL_OW 264
12256: PUSH
12257: LD_INT 22
12259: PUSH
12260: EMPTY
12261: LIST
12262: IN
12263: IFFALSE 12284
// points := [ 40 , 1 , 1 ] ;
12265: LD_ADDR_VAR 0 9
12269: PUSH
12270: LD_INT 40
12272: PUSH
12273: LD_INT 1
12275: PUSH
12276: LD_INT 1
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: LIST
12283: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
12284: LD_VAR 0 6
12288: PPUSH
12289: CALL_OW 264
12293: PUSH
12294: LD_INT 29
12296: PUSH
12297: EMPTY
12298: LIST
12299: IN
12300: IFFALSE 12321
// points := [ 70 , 200 , 400 ] ;
12302: LD_ADDR_VAR 0 9
12306: PUSH
12307: LD_INT 70
12309: PUSH
12310: LD_INT 200
12312: PUSH
12313: LD_INT 400
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: LIST
12320: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
12321: LD_VAR 0 6
12325: PPUSH
12326: CALL_OW 264
12330: PUSH
12331: LD_INT 14
12333: PUSH
12334: LD_INT 53
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: IN
12341: IFFALSE 12362
// points := [ 40 , 10 , 20 ] ;
12343: LD_ADDR_VAR 0 9
12347: PUSH
12348: LD_INT 40
12350: PUSH
12351: LD_INT 10
12353: PUSH
12354: LD_INT 20
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: LIST
12361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
12362: LD_VAR 0 6
12366: PPUSH
12367: CALL_OW 264
12371: PUSH
12372: LD_INT 9
12374: PUSH
12375: EMPTY
12376: LIST
12377: IN
12378: IFFALSE 12399
// points := [ 5 , 70 , 20 ] ;
12380: LD_ADDR_VAR 0 9
12384: PUSH
12385: LD_INT 5
12387: PUSH
12388: LD_INT 70
12390: PUSH
12391: LD_INT 20
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: LIST
12398: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
12399: LD_VAR 0 6
12403: PPUSH
12404: CALL_OW 264
12408: PUSH
12409: LD_INT 10
12411: PUSH
12412: EMPTY
12413: LIST
12414: IN
12415: IFFALSE 12436
// points := [ 35 , 110 , 70 ] ;
12417: LD_ADDR_VAR 0 9
12421: PUSH
12422: LD_INT 35
12424: PUSH
12425: LD_INT 110
12427: PUSH
12428: LD_INT 70
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: LIST
12435: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
12436: LD_VAR 0 6
12440: PPUSH
12441: CALL_OW 265
12445: PUSH
12446: LD_INT 25
12448: EQUAL
12449: IFFALSE 12470
// points := [ 80 , 65 , 100 ] ;
12451: LD_ADDR_VAR 0 9
12455: PUSH
12456: LD_INT 80
12458: PUSH
12459: LD_INT 65
12461: PUSH
12462: LD_INT 100
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: LIST
12469: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
12470: LD_VAR 0 6
12474: PPUSH
12475: CALL_OW 263
12479: PUSH
12480: LD_INT 1
12482: EQUAL
12483: IFFALSE 12518
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
12485: LD_ADDR_VAR 0 10
12489: PUSH
12490: LD_VAR 0 10
12494: PUSH
12495: LD_VAR 0 6
12499: PPUSH
12500: CALL_OW 311
12504: PPUSH
12505: LD_INT 3
12507: PPUSH
12508: CALL_OW 259
12512: PUSH
12513: LD_INT 4
12515: MUL
12516: MUL
12517: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
12518: LD_VAR 0 6
12522: PPUSH
12523: CALL_OW 263
12527: PUSH
12528: LD_INT 2
12530: EQUAL
12531: IFFALSE 12582
// begin j := IsControledBy ( i ) ;
12533: LD_ADDR_VAR 0 7
12537: PUSH
12538: LD_VAR 0 6
12542: PPUSH
12543: CALL_OW 312
12547: ST_TO_ADDR
// if j then
12548: LD_VAR 0 7
12552: IFFALSE 12582
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
12554: LD_ADDR_VAR 0 10
12558: PUSH
12559: LD_VAR 0 10
12563: PUSH
12564: LD_VAR 0 7
12568: PPUSH
12569: LD_INT 3
12571: PPUSH
12572: CALL_OW 259
12576: PUSH
12577: LD_INT 3
12579: MUL
12580: MUL
12581: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
12582: LD_VAR 0 6
12586: PPUSH
12587: CALL_OW 264
12591: PUSH
12592: LD_INT 5
12594: PUSH
12595: LD_INT 6
12597: PUSH
12598: LD_INT 46
12600: PUSH
12601: LD_INT 44
12603: PUSH
12604: LD_INT 47
12606: PUSH
12607: LD_INT 45
12609: PUSH
12610: LD_INT 28
12612: PUSH
12613: LD_INT 7
12615: PUSH
12616: LD_INT 27
12618: PUSH
12619: LD_INT 29
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: IN
12634: PUSH
12635: LD_VAR 0 1
12639: PPUSH
12640: LD_INT 52
12642: PPUSH
12643: CALL_OW 321
12647: PUSH
12648: LD_INT 2
12650: EQUAL
12651: AND
12652: IFFALSE 12669
// bpoints := bpoints * 1.2 ;
12654: LD_ADDR_VAR 0 10
12658: PUSH
12659: LD_VAR 0 10
12663: PUSH
12664: LD_REAL  1.20000000000000E+0000
12667: MUL
12668: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
12669: LD_VAR 0 6
12673: PPUSH
12674: CALL_OW 264
12678: PUSH
12679: LD_INT 6
12681: PUSH
12682: LD_INT 46
12684: PUSH
12685: LD_INT 47
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: LIST
12692: IN
12693: IFFALSE 12710
// bpoints := bpoints * 1.2 ;
12695: LD_ADDR_VAR 0 10
12699: PUSH
12700: LD_VAR 0 10
12704: PUSH
12705: LD_REAL  1.20000000000000E+0000
12708: MUL
12709: ST_TO_ADDR
// end ; unit_building :
12710: GO 12724
12712: LD_INT 3
12714: DOUBLE
12715: EQUAL
12716: IFTRUE 12720
12718: GO 12723
12720: POP
// ; end ;
12721: GO 12724
12723: POP
// for j = 1 to 3 do
12724: LD_ADDR_VAR 0 7
12728: PUSH
12729: DOUBLE
12730: LD_INT 1
12732: DEC
12733: ST_TO_ADDR
12734: LD_INT 3
12736: PUSH
12737: FOR_TO
12738: IFFALSE 12791
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
12740: LD_ADDR_VAR 0 5
12744: PUSH
12745: LD_VAR 0 5
12749: PPUSH
12750: LD_VAR 0 7
12754: PPUSH
12755: LD_VAR 0 5
12759: PUSH
12760: LD_VAR 0 7
12764: ARRAY
12765: PUSH
12766: LD_VAR 0 9
12770: PUSH
12771: LD_VAR 0 7
12775: ARRAY
12776: PUSH
12777: LD_VAR 0 10
12781: MUL
12782: PLUS
12783: PPUSH
12784: CALL_OW 1
12788: ST_TO_ADDR
12789: GO 12737
12791: POP
12792: POP
// end ;
12793: GO 11270
12795: POP
12796: POP
// result := Replace ( result , 4 , tmp ) ;
12797: LD_ADDR_VAR 0 5
12801: PUSH
12802: LD_VAR 0 5
12806: PPUSH
12807: LD_INT 4
12809: PPUSH
12810: LD_VAR 0 8
12814: PPUSH
12815: CALL_OW 1
12819: ST_TO_ADDR
// end ;
12820: LD_VAR 0 5
12824: RET
// export function DangerAtRange ( unit , range ) ; begin
12825: LD_INT 0
12827: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
12828: LD_ADDR_VAR 0 3
12832: PUSH
12833: LD_VAR 0 1
12837: PPUSH
12838: CALL_OW 255
12842: PPUSH
12843: LD_VAR 0 1
12847: PPUSH
12848: CALL_OW 250
12852: PPUSH
12853: LD_VAR 0 1
12857: PPUSH
12858: CALL_OW 251
12862: PPUSH
12863: LD_VAR 0 2
12867: PPUSH
12868: CALL 11122 0 4
12872: ST_TO_ADDR
// end ;
12873: LD_VAR 0 3
12877: RET
// export function DangerInArea ( side , area ) ; begin
12878: LD_INT 0
12880: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12881: LD_ADDR_VAR 0 3
12885: PUSH
12886: LD_VAR 0 2
12890: PPUSH
12891: LD_INT 81
12893: PUSH
12894: LD_VAR 0 1
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PPUSH
12903: CALL_OW 70
12907: ST_TO_ADDR
// end ;
12908: LD_VAR 0 3
12912: RET
// export function IsExtension ( b ) ; begin
12913: LD_INT 0
12915: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12916: LD_ADDR_VAR 0 2
12920: PUSH
12921: LD_VAR 0 1
12925: PUSH
12926: LD_INT 23
12928: PUSH
12929: LD_INT 20
12931: PUSH
12932: LD_INT 22
12934: PUSH
12935: LD_INT 17
12937: PUSH
12938: LD_INT 24
12940: PUSH
12941: LD_INT 21
12943: PUSH
12944: LD_INT 19
12946: PUSH
12947: LD_INT 16
12949: PUSH
12950: LD_INT 25
12952: PUSH
12953: LD_INT 18
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: IN
12968: ST_TO_ADDR
// end ;
12969: LD_VAR 0 2
12973: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
12974: LD_INT 0
12976: PPUSH
12977: PPUSH
12978: PPUSH
// result := [ ] ;
12979: LD_ADDR_VAR 0 4
12983: PUSH
12984: EMPTY
12985: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12986: LD_ADDR_VAR 0 5
12990: PUSH
12991: LD_VAR 0 2
12995: PPUSH
12996: LD_INT 21
12998: PUSH
12999: LD_INT 3
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: PPUSH
13006: CALL_OW 70
13010: ST_TO_ADDR
// if not tmp then
13011: LD_VAR 0 5
13015: NOT
13016: IFFALSE 13020
// exit ;
13018: GO 13084
// if checkLink then
13020: LD_VAR 0 3
13024: IFFALSE 13074
// begin for i in tmp do
13026: LD_ADDR_VAR 0 6
13030: PUSH
13031: LD_VAR 0 5
13035: PUSH
13036: FOR_IN
13037: IFFALSE 13072
// if GetBase ( i ) <> base then
13039: LD_VAR 0 6
13043: PPUSH
13044: CALL_OW 274
13048: PUSH
13049: LD_VAR 0 1
13053: NONEQUAL
13054: IFFALSE 13070
// ComLinkToBase ( base , i ) ;
13056: LD_VAR 0 1
13060: PPUSH
13061: LD_VAR 0 6
13065: PPUSH
13066: CALL_OW 169
13070: GO 13036
13072: POP
13073: POP
// end ; result := tmp ;
13074: LD_ADDR_VAR 0 4
13078: PUSH
13079: LD_VAR 0 5
13083: ST_TO_ADDR
// end ;
13084: LD_VAR 0 4
13088: RET
// export function ComComplete ( units , b ) ; var i ; begin
13089: LD_INT 0
13091: PPUSH
13092: PPUSH
// if not units then
13093: LD_VAR 0 1
13097: NOT
13098: IFFALSE 13102
// exit ;
13100: GO 13192
// for i in units do
13102: LD_ADDR_VAR 0 4
13106: PUSH
13107: LD_VAR 0 1
13111: PUSH
13112: FOR_IN
13113: IFFALSE 13190
// if BuildingStatus ( b ) = bs_build then
13115: LD_VAR 0 2
13119: PPUSH
13120: CALL_OW 461
13124: PUSH
13125: LD_INT 1
13127: EQUAL
13128: IFFALSE 13188
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
13130: LD_VAR 0 4
13134: PPUSH
13135: LD_STRING h
13137: PUSH
13138: LD_VAR 0 2
13142: PPUSH
13143: CALL_OW 250
13147: PUSH
13148: LD_VAR 0 2
13152: PPUSH
13153: CALL_OW 251
13157: PUSH
13158: LD_VAR 0 2
13162: PUSH
13163: LD_INT 0
13165: PUSH
13166: LD_INT 0
13168: PUSH
13169: LD_INT 0
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: PUSH
13181: EMPTY
13182: LIST
13183: PPUSH
13184: CALL_OW 446
13188: GO 13112
13190: POP
13191: POP
// end ;
13192: LD_VAR 0 3
13196: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
13197: LD_INT 0
13199: PPUSH
13200: PPUSH
13201: PPUSH
13202: PPUSH
13203: PPUSH
13204: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
13205: LD_VAR 0 1
13209: NOT
13210: PUSH
13211: LD_VAR 0 1
13215: PPUSH
13216: CALL_OW 263
13220: PUSH
13221: LD_INT 2
13223: NONEQUAL
13224: OR
13225: IFFALSE 13229
// exit ;
13227: GO 13545
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
13229: LD_ADDR_VAR 0 6
13233: PUSH
13234: LD_INT 22
13236: PUSH
13237: LD_VAR 0 1
13241: PPUSH
13242: CALL_OW 255
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 2
13253: PUSH
13254: LD_INT 30
13256: PUSH
13257: LD_INT 36
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: LD_INT 34
13266: PUSH
13267: LD_INT 31
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: LIST
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: PPUSH
13283: CALL_OW 69
13287: ST_TO_ADDR
// if not tmp then
13288: LD_VAR 0 6
13292: NOT
13293: IFFALSE 13297
// exit ;
13295: GO 13545
// result := [ ] ;
13297: LD_ADDR_VAR 0 2
13301: PUSH
13302: EMPTY
13303: ST_TO_ADDR
// for i in tmp do
13304: LD_ADDR_VAR 0 3
13308: PUSH
13309: LD_VAR 0 6
13313: PUSH
13314: FOR_IN
13315: IFFALSE 13386
// begin t := UnitsInside ( i ) ;
13317: LD_ADDR_VAR 0 4
13321: PUSH
13322: LD_VAR 0 3
13326: PPUSH
13327: CALL_OW 313
13331: ST_TO_ADDR
// if t then
13332: LD_VAR 0 4
13336: IFFALSE 13384
// for j in t do
13338: LD_ADDR_VAR 0 7
13342: PUSH
13343: LD_VAR 0 4
13347: PUSH
13348: FOR_IN
13349: IFFALSE 13382
// result := Replace ( result , result + 1 , j ) ;
13351: LD_ADDR_VAR 0 2
13355: PUSH
13356: LD_VAR 0 2
13360: PPUSH
13361: LD_VAR 0 2
13365: PUSH
13366: LD_INT 1
13368: PLUS
13369: PPUSH
13370: LD_VAR 0 7
13374: PPUSH
13375: CALL_OW 1
13379: ST_TO_ADDR
13380: GO 13348
13382: POP
13383: POP
// end ;
13384: GO 13314
13386: POP
13387: POP
// if not result then
13388: LD_VAR 0 2
13392: NOT
13393: IFFALSE 13397
// exit ;
13395: GO 13545
// mech := result [ 1 ] ;
13397: LD_ADDR_VAR 0 5
13401: PUSH
13402: LD_VAR 0 2
13406: PUSH
13407: LD_INT 1
13409: ARRAY
13410: ST_TO_ADDR
// if result > 1 then
13411: LD_VAR 0 2
13415: PUSH
13416: LD_INT 1
13418: GREATER
13419: IFFALSE 13531
// begin for i = 2 to result do
13421: LD_ADDR_VAR 0 3
13425: PUSH
13426: DOUBLE
13427: LD_INT 2
13429: DEC
13430: ST_TO_ADDR
13431: LD_VAR 0 2
13435: PUSH
13436: FOR_TO
13437: IFFALSE 13529
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
13439: LD_ADDR_VAR 0 4
13443: PUSH
13444: LD_VAR 0 2
13448: PUSH
13449: LD_VAR 0 3
13453: ARRAY
13454: PPUSH
13455: LD_INT 3
13457: PPUSH
13458: CALL_OW 259
13462: PUSH
13463: LD_VAR 0 2
13467: PUSH
13468: LD_VAR 0 3
13472: ARRAY
13473: PPUSH
13474: CALL_OW 432
13478: MINUS
13479: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
13480: LD_VAR 0 4
13484: PUSH
13485: LD_VAR 0 5
13489: PPUSH
13490: LD_INT 3
13492: PPUSH
13493: CALL_OW 259
13497: PUSH
13498: LD_VAR 0 5
13502: PPUSH
13503: CALL_OW 432
13507: MINUS
13508: GREATEREQUAL
13509: IFFALSE 13527
// mech := result [ i ] ;
13511: LD_ADDR_VAR 0 5
13515: PUSH
13516: LD_VAR 0 2
13520: PUSH
13521: LD_VAR 0 3
13525: ARRAY
13526: ST_TO_ADDR
// end ;
13527: GO 13436
13529: POP
13530: POP
// end ; ComLinkTo ( vehicle , mech ) ;
13531: LD_VAR 0 1
13535: PPUSH
13536: LD_VAR 0 5
13540: PPUSH
13541: CALL_OW 135
// end ;
13545: LD_VAR 0 2
13549: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
13550: LD_INT 0
13552: PPUSH
13553: PPUSH
13554: PPUSH
13555: PPUSH
13556: PPUSH
13557: PPUSH
13558: PPUSH
13559: PPUSH
13560: PPUSH
13561: PPUSH
13562: PPUSH
13563: PPUSH
13564: PPUSH
// result := [ ] ;
13565: LD_ADDR_VAR 0 7
13569: PUSH
13570: EMPTY
13571: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13572: LD_VAR 0 1
13576: PPUSH
13577: CALL_OW 266
13581: PUSH
13582: LD_INT 0
13584: PUSH
13585: LD_INT 1
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: IN
13592: NOT
13593: IFFALSE 13597
// exit ;
13595: GO 15231
// if name then
13597: LD_VAR 0 3
13601: IFFALSE 13617
// SetBName ( base_dep , name ) ;
13603: LD_VAR 0 1
13607: PPUSH
13608: LD_VAR 0 3
13612: PPUSH
13613: CALL_OW 500
// base := GetBase ( base_dep ) ;
13617: LD_ADDR_VAR 0 15
13621: PUSH
13622: LD_VAR 0 1
13626: PPUSH
13627: CALL_OW 274
13631: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13632: LD_ADDR_VAR 0 16
13636: PUSH
13637: LD_VAR 0 1
13641: PPUSH
13642: CALL_OW 255
13646: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
13647: LD_ADDR_VAR 0 17
13651: PUSH
13652: LD_VAR 0 1
13656: PPUSH
13657: CALL_OW 248
13661: ST_TO_ADDR
// if sources then
13662: LD_VAR 0 5
13666: IFFALSE 13713
// for i = 1 to 3 do
13668: LD_ADDR_VAR 0 8
13672: PUSH
13673: DOUBLE
13674: LD_INT 1
13676: DEC
13677: ST_TO_ADDR
13678: LD_INT 3
13680: PUSH
13681: FOR_TO
13682: IFFALSE 13711
// AddResourceType ( base , i , sources [ i ] ) ;
13684: LD_VAR 0 15
13688: PPUSH
13689: LD_VAR 0 8
13693: PPUSH
13694: LD_VAR 0 5
13698: PUSH
13699: LD_VAR 0 8
13703: ARRAY
13704: PPUSH
13705: CALL_OW 276
13709: GO 13681
13711: POP
13712: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13713: LD_ADDR_VAR 0 18
13717: PUSH
13718: LD_VAR 0 15
13722: PPUSH
13723: LD_VAR 0 2
13727: PPUSH
13728: LD_INT 1
13730: PPUSH
13731: CALL 12974 0 3
13735: ST_TO_ADDR
// InitHc ;
13736: CALL_OW 19
// InitUc ;
13740: CALL_OW 18
// uc_side := side ;
13744: LD_ADDR_OWVAR 20
13748: PUSH
13749: LD_VAR 0 16
13753: ST_TO_ADDR
// uc_nation := nation ;
13754: LD_ADDR_OWVAR 21
13758: PUSH
13759: LD_VAR 0 17
13763: ST_TO_ADDR
// if buildings then
13764: LD_VAR 0 18
13768: IFFALSE 15090
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13770: LD_ADDR_VAR 0 19
13774: PUSH
13775: LD_VAR 0 18
13779: PPUSH
13780: LD_INT 2
13782: PUSH
13783: LD_INT 30
13785: PUSH
13786: LD_INT 29
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 30
13795: PUSH
13796: LD_INT 30
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: LIST
13807: PPUSH
13808: CALL_OW 72
13812: ST_TO_ADDR
// if tmp then
13813: LD_VAR 0 19
13817: IFFALSE 13865
// for i in tmp do
13819: LD_ADDR_VAR 0 8
13823: PUSH
13824: LD_VAR 0 19
13828: PUSH
13829: FOR_IN
13830: IFFALSE 13863
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13832: LD_VAR 0 8
13836: PPUSH
13837: CALL_OW 250
13841: PPUSH
13842: LD_VAR 0 8
13846: PPUSH
13847: CALL_OW 251
13851: PPUSH
13852: LD_VAR 0 16
13856: PPUSH
13857: CALL_OW 441
13861: GO 13829
13863: POP
13864: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13865: LD_VAR 0 18
13869: PPUSH
13870: LD_INT 2
13872: PUSH
13873: LD_INT 30
13875: PUSH
13876: LD_INT 32
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PUSH
13883: LD_INT 30
13885: PUSH
13886: LD_INT 33
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: LIST
13897: PPUSH
13898: CALL_OW 72
13902: IFFALSE 13990
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13904: LD_ADDR_VAR 0 8
13908: PUSH
13909: LD_VAR 0 18
13913: PPUSH
13914: LD_INT 2
13916: PUSH
13917: LD_INT 30
13919: PUSH
13920: LD_INT 32
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 30
13929: PUSH
13930: LD_INT 33
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: LIST
13941: PPUSH
13942: CALL_OW 72
13946: PUSH
13947: FOR_IN
13948: IFFALSE 13988
// begin if not GetBWeapon ( i ) then
13950: LD_VAR 0 8
13954: PPUSH
13955: CALL_OW 269
13959: NOT
13960: IFFALSE 13986
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13962: LD_VAR 0 8
13966: PPUSH
13967: LD_VAR 0 8
13971: PPUSH
13972: LD_VAR 0 2
13976: PPUSH
13977: CALL 15236 0 2
13981: PPUSH
13982: CALL_OW 431
// end ;
13986: GO 13947
13988: POP
13989: POP
// end ; for i = 1 to personel do
13990: LD_ADDR_VAR 0 8
13994: PUSH
13995: DOUBLE
13996: LD_INT 1
13998: DEC
13999: ST_TO_ADDR
14000: LD_VAR 0 6
14004: PUSH
14005: FOR_TO
14006: IFFALSE 15070
// begin if i > 4 then
14008: LD_VAR 0 8
14012: PUSH
14013: LD_INT 4
14015: GREATER
14016: IFFALSE 14020
// break ;
14018: GO 15070
// case i of 1 :
14020: LD_VAR 0 8
14024: PUSH
14025: LD_INT 1
14027: DOUBLE
14028: EQUAL
14029: IFTRUE 14033
14031: GO 14113
14033: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
14034: LD_ADDR_VAR 0 12
14038: PUSH
14039: LD_VAR 0 18
14043: PPUSH
14044: LD_INT 22
14046: PUSH
14047: LD_VAR 0 16
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: PUSH
14056: LD_INT 58
14058: PUSH
14059: EMPTY
14060: LIST
14061: PUSH
14062: LD_INT 2
14064: PUSH
14065: LD_INT 30
14067: PUSH
14068: LD_INT 32
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PUSH
14075: LD_INT 30
14077: PUSH
14078: LD_INT 4
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 30
14087: PUSH
14088: LD_INT 5
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: LIST
14105: PPUSH
14106: CALL_OW 72
14110: ST_TO_ADDR
14111: GO 14335
14113: LD_INT 2
14115: DOUBLE
14116: EQUAL
14117: IFTRUE 14121
14119: GO 14183
14121: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
14122: LD_ADDR_VAR 0 12
14126: PUSH
14127: LD_VAR 0 18
14131: PPUSH
14132: LD_INT 22
14134: PUSH
14135: LD_VAR 0 16
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PUSH
14144: LD_INT 2
14146: PUSH
14147: LD_INT 30
14149: PUSH
14150: LD_INT 0
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: LD_INT 30
14159: PUSH
14160: LD_INT 1
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PPUSH
14176: CALL_OW 72
14180: ST_TO_ADDR
14181: GO 14335
14183: LD_INT 3
14185: DOUBLE
14186: EQUAL
14187: IFTRUE 14191
14189: GO 14253
14191: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
14192: LD_ADDR_VAR 0 12
14196: PUSH
14197: LD_VAR 0 18
14201: PPUSH
14202: LD_INT 22
14204: PUSH
14205: LD_VAR 0 16
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PUSH
14214: LD_INT 2
14216: PUSH
14217: LD_INT 30
14219: PUSH
14220: LD_INT 2
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: LD_INT 30
14229: PUSH
14230: LD_INT 3
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: LIST
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PPUSH
14246: CALL_OW 72
14250: ST_TO_ADDR
14251: GO 14335
14253: LD_INT 4
14255: DOUBLE
14256: EQUAL
14257: IFTRUE 14261
14259: GO 14334
14261: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
14262: LD_ADDR_VAR 0 12
14266: PUSH
14267: LD_VAR 0 18
14271: PPUSH
14272: LD_INT 22
14274: PUSH
14275: LD_VAR 0 16
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PUSH
14284: LD_INT 2
14286: PUSH
14287: LD_INT 30
14289: PUSH
14290: LD_INT 6
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: PUSH
14297: LD_INT 30
14299: PUSH
14300: LD_INT 7
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 30
14309: PUSH
14310: LD_INT 8
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PPUSH
14327: CALL_OW 72
14331: ST_TO_ADDR
14332: GO 14335
14334: POP
// if i = 1 then
14335: LD_VAR 0 8
14339: PUSH
14340: LD_INT 1
14342: EQUAL
14343: IFFALSE 14454
// begin tmp := [ ] ;
14345: LD_ADDR_VAR 0 19
14349: PUSH
14350: EMPTY
14351: ST_TO_ADDR
// for j in f do
14352: LD_ADDR_VAR 0 9
14356: PUSH
14357: LD_VAR 0 12
14361: PUSH
14362: FOR_IN
14363: IFFALSE 14436
// if GetBType ( j ) = b_bunker then
14365: LD_VAR 0 9
14369: PPUSH
14370: CALL_OW 266
14374: PUSH
14375: LD_INT 32
14377: EQUAL
14378: IFFALSE 14405
// tmp := Insert ( tmp , 1 , j ) else
14380: LD_ADDR_VAR 0 19
14384: PUSH
14385: LD_VAR 0 19
14389: PPUSH
14390: LD_INT 1
14392: PPUSH
14393: LD_VAR 0 9
14397: PPUSH
14398: CALL_OW 2
14402: ST_TO_ADDR
14403: GO 14434
// tmp := Insert ( tmp , tmp + 1 , j ) ;
14405: LD_ADDR_VAR 0 19
14409: PUSH
14410: LD_VAR 0 19
14414: PPUSH
14415: LD_VAR 0 19
14419: PUSH
14420: LD_INT 1
14422: PLUS
14423: PPUSH
14424: LD_VAR 0 9
14428: PPUSH
14429: CALL_OW 2
14433: ST_TO_ADDR
14434: GO 14362
14436: POP
14437: POP
// if tmp then
14438: LD_VAR 0 19
14442: IFFALSE 14454
// f := tmp ;
14444: LD_ADDR_VAR 0 12
14448: PUSH
14449: LD_VAR 0 19
14453: ST_TO_ADDR
// end ; x := personel [ i ] ;
14454: LD_ADDR_VAR 0 13
14458: PUSH
14459: LD_VAR 0 6
14463: PUSH
14464: LD_VAR 0 8
14468: ARRAY
14469: ST_TO_ADDR
// if x = - 1 then
14470: LD_VAR 0 13
14474: PUSH
14475: LD_INT 1
14477: NEG
14478: EQUAL
14479: IFFALSE 14688
// begin for j in f do
14481: LD_ADDR_VAR 0 9
14485: PUSH
14486: LD_VAR 0 12
14490: PUSH
14491: FOR_IN
14492: IFFALSE 14684
// repeat InitHc ;
14494: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14498: LD_VAR 0 9
14502: PPUSH
14503: CALL_OW 266
14507: PUSH
14508: LD_INT 5
14510: EQUAL
14511: IFFALSE 14581
// begin if UnitsInside ( j ) < 3 then
14513: LD_VAR 0 9
14517: PPUSH
14518: CALL_OW 313
14522: PUSH
14523: LD_INT 3
14525: LESS
14526: IFFALSE 14562
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14528: LD_INT 0
14530: PPUSH
14531: LD_INT 5
14533: PUSH
14534: LD_INT 8
14536: PUSH
14537: LD_INT 9
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: LIST
14544: PUSH
14545: LD_VAR 0 17
14549: ARRAY
14550: PPUSH
14551: LD_VAR 0 4
14555: PPUSH
14556: CALL_OW 380
14560: GO 14579
// PrepareHuman ( false , i , skill ) ;
14562: LD_INT 0
14564: PPUSH
14565: LD_VAR 0 8
14569: PPUSH
14570: LD_VAR 0 4
14574: PPUSH
14575: CALL_OW 380
// end else
14579: GO 14598
// PrepareHuman ( false , i , skill ) ;
14581: LD_INT 0
14583: PPUSH
14584: LD_VAR 0 8
14588: PPUSH
14589: LD_VAR 0 4
14593: PPUSH
14594: CALL_OW 380
// un := CreateHuman ;
14598: LD_ADDR_VAR 0 14
14602: PUSH
14603: CALL_OW 44
14607: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14608: LD_ADDR_VAR 0 7
14612: PUSH
14613: LD_VAR 0 7
14617: PPUSH
14618: LD_INT 1
14620: PPUSH
14621: LD_VAR 0 14
14625: PPUSH
14626: CALL_OW 2
14630: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14631: LD_VAR 0 14
14635: PPUSH
14636: LD_VAR 0 9
14640: PPUSH
14641: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14645: LD_VAR 0 9
14649: PPUSH
14650: CALL_OW 313
14654: PUSH
14655: LD_INT 6
14657: EQUAL
14658: PUSH
14659: LD_VAR 0 9
14663: PPUSH
14664: CALL_OW 266
14668: PUSH
14669: LD_INT 32
14671: PUSH
14672: LD_INT 31
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: IN
14679: OR
14680: IFFALSE 14494
14682: GO 14491
14684: POP
14685: POP
// end else
14686: GO 15068
// for j = 1 to x do
14688: LD_ADDR_VAR 0 9
14692: PUSH
14693: DOUBLE
14694: LD_INT 1
14696: DEC
14697: ST_TO_ADDR
14698: LD_VAR 0 13
14702: PUSH
14703: FOR_TO
14704: IFFALSE 15066
// begin InitHc ;
14706: CALL_OW 19
// if not f then
14710: LD_VAR 0 12
14714: NOT
14715: IFFALSE 14804
// begin PrepareHuman ( false , i , skill ) ;
14717: LD_INT 0
14719: PPUSH
14720: LD_VAR 0 8
14724: PPUSH
14725: LD_VAR 0 4
14729: PPUSH
14730: CALL_OW 380
// un := CreateHuman ;
14734: LD_ADDR_VAR 0 14
14738: PUSH
14739: CALL_OW 44
14743: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14744: LD_ADDR_VAR 0 7
14748: PUSH
14749: LD_VAR 0 7
14753: PPUSH
14754: LD_INT 1
14756: PPUSH
14757: LD_VAR 0 14
14761: PPUSH
14762: CALL_OW 2
14766: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14767: LD_VAR 0 14
14771: PPUSH
14772: LD_VAR 0 1
14776: PPUSH
14777: CALL_OW 250
14781: PPUSH
14782: LD_VAR 0 1
14786: PPUSH
14787: CALL_OW 251
14791: PPUSH
14792: LD_INT 10
14794: PPUSH
14795: LD_INT 0
14797: PPUSH
14798: CALL_OW 50
// continue ;
14802: GO 14703
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14804: LD_VAR 0 12
14808: PUSH
14809: LD_INT 1
14811: ARRAY
14812: PPUSH
14813: CALL_OW 313
14817: PUSH
14818: LD_VAR 0 12
14822: PUSH
14823: LD_INT 1
14825: ARRAY
14826: PPUSH
14827: CALL_OW 266
14831: PUSH
14832: LD_INT 32
14834: PUSH
14835: LD_INT 31
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: IN
14842: AND
14843: PUSH
14844: LD_VAR 0 12
14848: PUSH
14849: LD_INT 1
14851: ARRAY
14852: PPUSH
14853: CALL_OW 313
14857: PUSH
14858: LD_INT 6
14860: EQUAL
14861: OR
14862: IFFALSE 14882
// f := Delete ( f , 1 ) ;
14864: LD_ADDR_VAR 0 12
14868: PUSH
14869: LD_VAR 0 12
14873: PPUSH
14874: LD_INT 1
14876: PPUSH
14877: CALL_OW 3
14881: ST_TO_ADDR
// if not f then
14882: LD_VAR 0 12
14886: NOT
14887: IFFALSE 14905
// begin x := x + 2 ;
14889: LD_ADDR_VAR 0 13
14893: PUSH
14894: LD_VAR 0 13
14898: PUSH
14899: LD_INT 2
14901: PLUS
14902: ST_TO_ADDR
// continue ;
14903: GO 14703
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14905: LD_VAR 0 12
14909: PUSH
14910: LD_INT 1
14912: ARRAY
14913: PPUSH
14914: CALL_OW 266
14918: PUSH
14919: LD_INT 5
14921: EQUAL
14922: IFFALSE 14996
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14924: LD_VAR 0 12
14928: PUSH
14929: LD_INT 1
14931: ARRAY
14932: PPUSH
14933: CALL_OW 313
14937: PUSH
14938: LD_INT 3
14940: LESS
14941: IFFALSE 14977
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14943: LD_INT 0
14945: PPUSH
14946: LD_INT 5
14948: PUSH
14949: LD_INT 8
14951: PUSH
14952: LD_INT 9
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: LIST
14959: PUSH
14960: LD_VAR 0 17
14964: ARRAY
14965: PPUSH
14966: LD_VAR 0 4
14970: PPUSH
14971: CALL_OW 380
14975: GO 14994
// PrepareHuman ( false , i , skill ) ;
14977: LD_INT 0
14979: PPUSH
14980: LD_VAR 0 8
14984: PPUSH
14985: LD_VAR 0 4
14989: PPUSH
14990: CALL_OW 380
// end else
14994: GO 15013
// PrepareHuman ( false , i , skill ) ;
14996: LD_INT 0
14998: PPUSH
14999: LD_VAR 0 8
15003: PPUSH
15004: LD_VAR 0 4
15008: PPUSH
15009: CALL_OW 380
// un := CreateHuman ;
15013: LD_ADDR_VAR 0 14
15017: PUSH
15018: CALL_OW 44
15022: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15023: LD_ADDR_VAR 0 7
15027: PUSH
15028: LD_VAR 0 7
15032: PPUSH
15033: LD_INT 1
15035: PPUSH
15036: LD_VAR 0 14
15040: PPUSH
15041: CALL_OW 2
15045: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
15046: LD_VAR 0 14
15050: PPUSH
15051: LD_VAR 0 12
15055: PUSH
15056: LD_INT 1
15058: ARRAY
15059: PPUSH
15060: CALL_OW 52
// end ;
15064: GO 14703
15066: POP
15067: POP
// end ;
15068: GO 14005
15070: POP
15071: POP
// result := result ^ buildings ;
15072: LD_ADDR_VAR 0 7
15076: PUSH
15077: LD_VAR 0 7
15081: PUSH
15082: LD_VAR 0 18
15086: ADD
15087: ST_TO_ADDR
// end else
15088: GO 15231
// begin for i = 1 to personel do
15090: LD_ADDR_VAR 0 8
15094: PUSH
15095: DOUBLE
15096: LD_INT 1
15098: DEC
15099: ST_TO_ADDR
15100: LD_VAR 0 6
15104: PUSH
15105: FOR_TO
15106: IFFALSE 15229
// begin if i > 4 then
15108: LD_VAR 0 8
15112: PUSH
15113: LD_INT 4
15115: GREATER
15116: IFFALSE 15120
// break ;
15118: GO 15229
// x := personel [ i ] ;
15120: LD_ADDR_VAR 0 13
15124: PUSH
15125: LD_VAR 0 6
15129: PUSH
15130: LD_VAR 0 8
15134: ARRAY
15135: ST_TO_ADDR
// if x = - 1 then
15136: LD_VAR 0 13
15140: PUSH
15141: LD_INT 1
15143: NEG
15144: EQUAL
15145: IFFALSE 15149
// continue ;
15147: GO 15105
// PrepareHuman ( false , i , skill ) ;
15149: LD_INT 0
15151: PPUSH
15152: LD_VAR 0 8
15156: PPUSH
15157: LD_VAR 0 4
15161: PPUSH
15162: CALL_OW 380
// un := CreateHuman ;
15166: LD_ADDR_VAR 0 14
15170: PUSH
15171: CALL_OW 44
15175: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
15176: LD_VAR 0 14
15180: PPUSH
15181: LD_VAR 0 1
15185: PPUSH
15186: CALL_OW 250
15190: PPUSH
15191: LD_VAR 0 1
15195: PPUSH
15196: CALL_OW 251
15200: PPUSH
15201: LD_INT 10
15203: PPUSH
15204: LD_INT 0
15206: PPUSH
15207: CALL_OW 50
// result := result ^ un ;
15211: LD_ADDR_VAR 0 7
15215: PUSH
15216: LD_VAR 0 7
15220: PUSH
15221: LD_VAR 0 14
15225: ADD
15226: ST_TO_ADDR
// end ;
15227: GO 15105
15229: POP
15230: POP
// end ; end ;
15231: LD_VAR 0 7
15235: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
15236: LD_INT 0
15238: PPUSH
15239: PPUSH
15240: PPUSH
15241: PPUSH
15242: PPUSH
15243: PPUSH
15244: PPUSH
15245: PPUSH
15246: PPUSH
15247: PPUSH
15248: PPUSH
15249: PPUSH
15250: PPUSH
15251: PPUSH
15252: PPUSH
15253: PPUSH
// result := false ;
15254: LD_ADDR_VAR 0 3
15258: PUSH
15259: LD_INT 0
15261: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
15262: LD_VAR 0 1
15266: NOT
15267: PUSH
15268: LD_VAR 0 1
15272: PPUSH
15273: CALL_OW 266
15277: PUSH
15278: LD_INT 32
15280: PUSH
15281: LD_INT 33
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: IN
15288: NOT
15289: OR
15290: IFFALSE 15294
// exit ;
15292: GO 16403
// nat := GetNation ( tower ) ;
15294: LD_ADDR_VAR 0 12
15298: PUSH
15299: LD_VAR 0 1
15303: PPUSH
15304: CALL_OW 248
15308: ST_TO_ADDR
// side := GetSide ( tower ) ;
15309: LD_ADDR_VAR 0 16
15313: PUSH
15314: LD_VAR 0 1
15318: PPUSH
15319: CALL_OW 255
15323: ST_TO_ADDR
// x := GetX ( tower ) ;
15324: LD_ADDR_VAR 0 10
15328: PUSH
15329: LD_VAR 0 1
15333: PPUSH
15334: CALL_OW 250
15338: ST_TO_ADDR
// y := GetY ( tower ) ;
15339: LD_ADDR_VAR 0 11
15343: PUSH
15344: LD_VAR 0 1
15348: PPUSH
15349: CALL_OW 251
15353: ST_TO_ADDR
// if not x or not y then
15354: LD_VAR 0 10
15358: NOT
15359: PUSH
15360: LD_VAR 0 11
15364: NOT
15365: OR
15366: IFFALSE 15370
// exit ;
15368: GO 16403
// weapon := 0 ;
15370: LD_ADDR_VAR 0 18
15374: PUSH
15375: LD_INT 0
15377: ST_TO_ADDR
// fac_list := [ ] ;
15378: LD_ADDR_VAR 0 17
15382: PUSH
15383: EMPTY
15384: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
15385: LD_ADDR_VAR 0 6
15389: PUSH
15390: LD_VAR 0 1
15394: PPUSH
15395: CALL_OW 274
15399: PPUSH
15400: LD_VAR 0 2
15404: PPUSH
15405: LD_INT 0
15407: PPUSH
15408: CALL 12974 0 3
15412: PPUSH
15413: LD_INT 30
15415: PUSH
15416: LD_INT 3
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PPUSH
15423: CALL_OW 72
15427: ST_TO_ADDR
// if not factories then
15428: LD_VAR 0 6
15432: NOT
15433: IFFALSE 15437
// exit ;
15435: GO 16403
// for i in factories do
15437: LD_ADDR_VAR 0 8
15441: PUSH
15442: LD_VAR 0 6
15446: PUSH
15447: FOR_IN
15448: IFFALSE 15473
// fac_list := fac_list union AvailableWeaponList ( i ) ;
15450: LD_ADDR_VAR 0 17
15454: PUSH
15455: LD_VAR 0 17
15459: PUSH
15460: LD_VAR 0 8
15464: PPUSH
15465: CALL_OW 478
15469: UNION
15470: ST_TO_ADDR
15471: GO 15447
15473: POP
15474: POP
// if not fac_list then
15475: LD_VAR 0 17
15479: NOT
15480: IFFALSE 15484
// exit ;
15482: GO 16403
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
15484: LD_ADDR_VAR 0 5
15488: PUSH
15489: LD_INT 4
15491: PUSH
15492: LD_INT 5
15494: PUSH
15495: LD_INT 9
15497: PUSH
15498: LD_INT 10
15500: PUSH
15501: LD_INT 6
15503: PUSH
15504: LD_INT 7
15506: PUSH
15507: LD_INT 11
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: PUSH
15519: LD_INT 27
15521: PUSH
15522: LD_INT 28
15524: PUSH
15525: LD_INT 26
15527: PUSH
15528: LD_INT 30
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: PUSH
15537: LD_INT 43
15539: PUSH
15540: LD_INT 44
15542: PUSH
15543: LD_INT 46
15545: PUSH
15546: LD_INT 45
15548: PUSH
15549: LD_INT 47
15551: PUSH
15552: LD_INT 49
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: LIST
15567: PUSH
15568: LD_VAR 0 12
15572: ARRAY
15573: ST_TO_ADDR
// list := list isect fac_list ;
15574: LD_ADDR_VAR 0 5
15578: PUSH
15579: LD_VAR 0 5
15583: PUSH
15584: LD_VAR 0 17
15588: ISECT
15589: ST_TO_ADDR
// if not list then
15590: LD_VAR 0 5
15594: NOT
15595: IFFALSE 15599
// exit ;
15597: GO 16403
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
15599: LD_VAR 0 12
15603: PUSH
15604: LD_INT 3
15606: EQUAL
15607: PUSH
15608: LD_INT 49
15610: PUSH
15611: LD_VAR 0 5
15615: IN
15616: AND
15617: PUSH
15618: LD_INT 31
15620: PPUSH
15621: LD_VAR 0 16
15625: PPUSH
15626: CALL_OW 321
15630: PUSH
15631: LD_INT 2
15633: EQUAL
15634: AND
15635: IFFALSE 15695
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
15637: LD_INT 22
15639: PUSH
15640: LD_VAR 0 16
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 35
15651: PUSH
15652: LD_INT 49
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: LD_INT 91
15661: PUSH
15662: LD_VAR 0 1
15666: PUSH
15667: LD_INT 10
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: LIST
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: LIST
15679: PPUSH
15680: CALL_OW 69
15684: NOT
15685: IFFALSE 15695
// weapon := ru_time_lapser ;
15687: LD_ADDR_VAR 0 18
15691: PUSH
15692: LD_INT 49
15694: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
15695: LD_VAR 0 12
15699: PUSH
15700: LD_INT 1
15702: PUSH
15703: LD_INT 2
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: IN
15710: PUSH
15711: LD_INT 11
15713: PUSH
15714: LD_VAR 0 5
15718: IN
15719: PUSH
15720: LD_INT 30
15722: PUSH
15723: LD_VAR 0 5
15727: IN
15728: OR
15729: AND
15730: PUSH
15731: LD_INT 6
15733: PPUSH
15734: LD_VAR 0 16
15738: PPUSH
15739: CALL_OW 321
15743: PUSH
15744: LD_INT 2
15746: EQUAL
15747: AND
15748: IFFALSE 15913
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
15750: LD_INT 22
15752: PUSH
15753: LD_VAR 0 16
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 2
15764: PUSH
15765: LD_INT 35
15767: PUSH
15768: LD_INT 11
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 35
15777: PUSH
15778: LD_INT 30
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 91
15792: PUSH
15793: LD_VAR 0 1
15797: PUSH
15798: LD_INT 18
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: LIST
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: LIST
15810: PPUSH
15811: CALL_OW 69
15815: NOT
15816: PUSH
15817: LD_INT 22
15819: PUSH
15820: LD_VAR 0 16
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: LD_INT 2
15831: PUSH
15832: LD_INT 30
15834: PUSH
15835: LD_INT 32
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: LD_INT 30
15844: PUSH
15845: LD_INT 33
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: LIST
15856: PUSH
15857: LD_INT 91
15859: PUSH
15860: LD_VAR 0 1
15864: PUSH
15865: LD_INT 12
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: LIST
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: LIST
15877: PUSH
15878: EMPTY
15879: LIST
15880: PPUSH
15881: CALL_OW 69
15885: PUSH
15886: LD_INT 2
15888: GREATER
15889: AND
15890: IFFALSE 15913
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15892: LD_ADDR_VAR 0 18
15896: PUSH
15897: LD_INT 11
15899: PUSH
15900: LD_INT 30
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: LD_VAR 0 12
15911: ARRAY
15912: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15913: LD_VAR 0 18
15917: NOT
15918: PUSH
15919: LD_INT 40
15921: PPUSH
15922: LD_VAR 0 16
15926: PPUSH
15927: CALL_OW 321
15931: PUSH
15932: LD_INT 2
15934: EQUAL
15935: AND
15936: PUSH
15937: LD_INT 7
15939: PUSH
15940: LD_VAR 0 5
15944: IN
15945: PUSH
15946: LD_INT 28
15948: PUSH
15949: LD_VAR 0 5
15953: IN
15954: OR
15955: PUSH
15956: LD_INT 45
15958: PUSH
15959: LD_VAR 0 5
15963: IN
15964: OR
15965: AND
15966: IFFALSE 16220
// begin hex := GetHexInfo ( x , y ) ;
15968: LD_ADDR_VAR 0 4
15972: PUSH
15973: LD_VAR 0 10
15977: PPUSH
15978: LD_VAR 0 11
15982: PPUSH
15983: CALL_OW 546
15987: ST_TO_ADDR
// if hex [ 1 ] then
15988: LD_VAR 0 4
15992: PUSH
15993: LD_INT 1
15995: ARRAY
15996: IFFALSE 16000
// exit ;
15998: GO 16403
// height := hex [ 2 ] ;
16000: LD_ADDR_VAR 0 15
16004: PUSH
16005: LD_VAR 0 4
16009: PUSH
16010: LD_INT 2
16012: ARRAY
16013: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
16014: LD_ADDR_VAR 0 14
16018: PUSH
16019: LD_INT 0
16021: PUSH
16022: LD_INT 2
16024: PUSH
16025: LD_INT 3
16027: PUSH
16028: LD_INT 5
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: ST_TO_ADDR
// for i in tmp do
16037: LD_ADDR_VAR 0 8
16041: PUSH
16042: LD_VAR 0 14
16046: PUSH
16047: FOR_IN
16048: IFFALSE 16218
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
16050: LD_ADDR_VAR 0 9
16054: PUSH
16055: LD_VAR 0 10
16059: PPUSH
16060: LD_VAR 0 8
16064: PPUSH
16065: LD_INT 5
16067: PPUSH
16068: CALL_OW 272
16072: PUSH
16073: LD_VAR 0 11
16077: PPUSH
16078: LD_VAR 0 8
16082: PPUSH
16083: LD_INT 5
16085: PPUSH
16086: CALL_OW 273
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
16095: LD_VAR 0 9
16099: PUSH
16100: LD_INT 1
16102: ARRAY
16103: PPUSH
16104: LD_VAR 0 9
16108: PUSH
16109: LD_INT 2
16111: ARRAY
16112: PPUSH
16113: CALL_OW 488
16117: IFFALSE 16216
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
16119: LD_ADDR_VAR 0 4
16123: PUSH
16124: LD_VAR 0 9
16128: PUSH
16129: LD_INT 1
16131: ARRAY
16132: PPUSH
16133: LD_VAR 0 9
16137: PUSH
16138: LD_INT 2
16140: ARRAY
16141: PPUSH
16142: CALL_OW 546
16146: ST_TO_ADDR
// if hex [ 1 ] then
16147: LD_VAR 0 4
16151: PUSH
16152: LD_INT 1
16154: ARRAY
16155: IFFALSE 16159
// continue ;
16157: GO 16047
// h := hex [ 2 ] ;
16159: LD_ADDR_VAR 0 13
16163: PUSH
16164: LD_VAR 0 4
16168: PUSH
16169: LD_INT 2
16171: ARRAY
16172: ST_TO_ADDR
// if h + 7 < height then
16173: LD_VAR 0 13
16177: PUSH
16178: LD_INT 7
16180: PLUS
16181: PUSH
16182: LD_VAR 0 15
16186: LESS
16187: IFFALSE 16216
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
16189: LD_ADDR_VAR 0 18
16193: PUSH
16194: LD_INT 7
16196: PUSH
16197: LD_INT 28
16199: PUSH
16200: LD_INT 45
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: LIST
16207: PUSH
16208: LD_VAR 0 12
16212: ARRAY
16213: ST_TO_ADDR
// break ;
16214: GO 16218
// end ; end ; end ;
16216: GO 16047
16218: POP
16219: POP
// end ; if not weapon then
16220: LD_VAR 0 18
16224: NOT
16225: IFFALSE 16285
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
16227: LD_ADDR_VAR 0 5
16231: PUSH
16232: LD_VAR 0 5
16236: PUSH
16237: LD_INT 11
16239: PUSH
16240: LD_INT 30
16242: PUSH
16243: LD_INT 49
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: LIST
16250: DIFF
16251: ST_TO_ADDR
// if not list then
16252: LD_VAR 0 5
16256: NOT
16257: IFFALSE 16261
// exit ;
16259: GO 16403
// weapon := list [ rand ( 1 , list ) ] ;
16261: LD_ADDR_VAR 0 18
16265: PUSH
16266: LD_VAR 0 5
16270: PUSH
16271: LD_INT 1
16273: PPUSH
16274: LD_VAR 0 5
16278: PPUSH
16279: CALL_OW 12
16283: ARRAY
16284: ST_TO_ADDR
// end ; if weapon then
16285: LD_VAR 0 18
16289: IFFALSE 16403
// begin tmp := CostOfWeapon ( weapon ) ;
16291: LD_ADDR_VAR 0 14
16295: PUSH
16296: LD_VAR 0 18
16300: PPUSH
16301: CALL_OW 451
16305: ST_TO_ADDR
// j := GetBase ( tower ) ;
16306: LD_ADDR_VAR 0 9
16310: PUSH
16311: LD_VAR 0 1
16315: PPUSH
16316: CALL_OW 274
16320: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
16321: LD_VAR 0 9
16325: PPUSH
16326: LD_INT 1
16328: PPUSH
16329: CALL_OW 275
16333: PUSH
16334: LD_VAR 0 14
16338: PUSH
16339: LD_INT 1
16341: ARRAY
16342: GREATEREQUAL
16343: PUSH
16344: LD_VAR 0 9
16348: PPUSH
16349: LD_INT 2
16351: PPUSH
16352: CALL_OW 275
16356: PUSH
16357: LD_VAR 0 14
16361: PUSH
16362: LD_INT 2
16364: ARRAY
16365: GREATEREQUAL
16366: AND
16367: PUSH
16368: LD_VAR 0 9
16372: PPUSH
16373: LD_INT 3
16375: PPUSH
16376: CALL_OW 275
16380: PUSH
16381: LD_VAR 0 14
16385: PUSH
16386: LD_INT 3
16388: ARRAY
16389: GREATEREQUAL
16390: AND
16391: IFFALSE 16403
// result := weapon ;
16393: LD_ADDR_VAR 0 3
16397: PUSH
16398: LD_VAR 0 18
16402: ST_TO_ADDR
// end ; end ;
16403: LD_VAR 0 3
16407: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
16408: LD_INT 0
16410: PPUSH
16411: PPUSH
// result := true ;
16412: LD_ADDR_VAR 0 3
16416: PUSH
16417: LD_INT 1
16419: ST_TO_ADDR
// if array1 = array2 then
16420: LD_VAR 0 1
16424: PUSH
16425: LD_VAR 0 2
16429: EQUAL
16430: IFFALSE 16490
// begin for i = 1 to array1 do
16432: LD_ADDR_VAR 0 4
16436: PUSH
16437: DOUBLE
16438: LD_INT 1
16440: DEC
16441: ST_TO_ADDR
16442: LD_VAR 0 1
16446: PUSH
16447: FOR_TO
16448: IFFALSE 16486
// if array1 [ i ] <> array2 [ i ] then
16450: LD_VAR 0 1
16454: PUSH
16455: LD_VAR 0 4
16459: ARRAY
16460: PUSH
16461: LD_VAR 0 2
16465: PUSH
16466: LD_VAR 0 4
16470: ARRAY
16471: NONEQUAL
16472: IFFALSE 16484
// begin result := false ;
16474: LD_ADDR_VAR 0 3
16478: PUSH
16479: LD_INT 0
16481: ST_TO_ADDR
// break ;
16482: GO 16486
// end ;
16484: GO 16447
16486: POP
16487: POP
// end else
16488: GO 16498
// result := false ;
16490: LD_ADDR_VAR 0 3
16494: PUSH
16495: LD_INT 0
16497: ST_TO_ADDR
// end ;
16498: LD_VAR 0 3
16502: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
16503: LD_INT 0
16505: PPUSH
16506: PPUSH
// if not array1 or not array2 then
16507: LD_VAR 0 1
16511: NOT
16512: PUSH
16513: LD_VAR 0 2
16517: NOT
16518: OR
16519: IFFALSE 16523
// exit ;
16521: GO 16587
// result := true ;
16523: LD_ADDR_VAR 0 3
16527: PUSH
16528: LD_INT 1
16530: ST_TO_ADDR
// for i = 1 to array1 do
16531: LD_ADDR_VAR 0 4
16535: PUSH
16536: DOUBLE
16537: LD_INT 1
16539: DEC
16540: ST_TO_ADDR
16541: LD_VAR 0 1
16545: PUSH
16546: FOR_TO
16547: IFFALSE 16585
// if array1 [ i ] <> array2 [ i ] then
16549: LD_VAR 0 1
16553: PUSH
16554: LD_VAR 0 4
16558: ARRAY
16559: PUSH
16560: LD_VAR 0 2
16564: PUSH
16565: LD_VAR 0 4
16569: ARRAY
16570: NONEQUAL
16571: IFFALSE 16583
// begin result := false ;
16573: LD_ADDR_VAR 0 3
16577: PUSH
16578: LD_INT 0
16580: ST_TO_ADDR
// break ;
16581: GO 16585
// end ;
16583: GO 16546
16585: POP
16586: POP
// end ;
16587: LD_VAR 0 3
16591: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
16592: LD_INT 0
16594: PPUSH
16595: PPUSH
16596: PPUSH
// pom := GetBase ( fac ) ;
16597: LD_ADDR_VAR 0 5
16601: PUSH
16602: LD_VAR 0 1
16606: PPUSH
16607: CALL_OW 274
16611: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
16612: LD_ADDR_VAR 0 4
16616: PUSH
16617: LD_VAR 0 2
16621: PUSH
16622: LD_INT 1
16624: ARRAY
16625: PPUSH
16626: LD_VAR 0 2
16630: PUSH
16631: LD_INT 2
16633: ARRAY
16634: PPUSH
16635: LD_VAR 0 2
16639: PUSH
16640: LD_INT 3
16642: ARRAY
16643: PPUSH
16644: LD_VAR 0 2
16648: PUSH
16649: LD_INT 4
16651: ARRAY
16652: PPUSH
16653: CALL_OW 449
16657: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16658: LD_ADDR_VAR 0 3
16662: PUSH
16663: LD_VAR 0 5
16667: PPUSH
16668: LD_INT 1
16670: PPUSH
16671: CALL_OW 275
16675: PUSH
16676: LD_VAR 0 4
16680: PUSH
16681: LD_INT 1
16683: ARRAY
16684: GREATEREQUAL
16685: PUSH
16686: LD_VAR 0 5
16690: PPUSH
16691: LD_INT 2
16693: PPUSH
16694: CALL_OW 275
16698: PUSH
16699: LD_VAR 0 4
16703: PUSH
16704: LD_INT 2
16706: ARRAY
16707: GREATEREQUAL
16708: AND
16709: PUSH
16710: LD_VAR 0 5
16714: PPUSH
16715: LD_INT 3
16717: PPUSH
16718: CALL_OW 275
16722: PUSH
16723: LD_VAR 0 4
16727: PUSH
16728: LD_INT 3
16730: ARRAY
16731: GREATEREQUAL
16732: AND
16733: ST_TO_ADDR
// end ;
16734: LD_VAR 0 3
16738: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
16739: LD_INT 0
16741: PPUSH
16742: PPUSH
16743: PPUSH
16744: PPUSH
// pom := GetBase ( building ) ;
16745: LD_ADDR_VAR 0 3
16749: PUSH
16750: LD_VAR 0 1
16754: PPUSH
16755: CALL_OW 274
16759: ST_TO_ADDR
// if not pom then
16760: LD_VAR 0 3
16764: NOT
16765: IFFALSE 16769
// exit ;
16767: GO 16939
// btype := GetBType ( building ) ;
16769: LD_ADDR_VAR 0 5
16773: PUSH
16774: LD_VAR 0 1
16778: PPUSH
16779: CALL_OW 266
16783: ST_TO_ADDR
// if btype = b_armoury then
16784: LD_VAR 0 5
16788: PUSH
16789: LD_INT 4
16791: EQUAL
16792: IFFALSE 16802
// btype := b_barracks ;
16794: LD_ADDR_VAR 0 5
16798: PUSH
16799: LD_INT 5
16801: ST_TO_ADDR
// if btype = b_depot then
16802: LD_VAR 0 5
16806: PUSH
16807: LD_INT 0
16809: EQUAL
16810: IFFALSE 16820
// btype := b_warehouse ;
16812: LD_ADDR_VAR 0 5
16816: PUSH
16817: LD_INT 1
16819: ST_TO_ADDR
// if btype = b_workshop then
16820: LD_VAR 0 5
16824: PUSH
16825: LD_INT 2
16827: EQUAL
16828: IFFALSE 16838
// btype := b_factory ;
16830: LD_ADDR_VAR 0 5
16834: PUSH
16835: LD_INT 3
16837: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16838: LD_ADDR_VAR 0 4
16842: PUSH
16843: LD_VAR 0 5
16847: PPUSH
16848: LD_VAR 0 1
16852: PPUSH
16853: CALL_OW 248
16857: PPUSH
16858: CALL_OW 450
16862: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16863: LD_ADDR_VAR 0 2
16867: PUSH
16868: LD_VAR 0 3
16872: PPUSH
16873: LD_INT 1
16875: PPUSH
16876: CALL_OW 275
16880: PUSH
16881: LD_VAR 0 4
16885: PUSH
16886: LD_INT 1
16888: ARRAY
16889: GREATEREQUAL
16890: PUSH
16891: LD_VAR 0 3
16895: PPUSH
16896: LD_INT 2
16898: PPUSH
16899: CALL_OW 275
16903: PUSH
16904: LD_VAR 0 4
16908: PUSH
16909: LD_INT 2
16911: ARRAY
16912: GREATEREQUAL
16913: AND
16914: PUSH
16915: LD_VAR 0 3
16919: PPUSH
16920: LD_INT 3
16922: PPUSH
16923: CALL_OW 275
16927: PUSH
16928: LD_VAR 0 4
16932: PUSH
16933: LD_INT 3
16935: ARRAY
16936: GREATEREQUAL
16937: AND
16938: ST_TO_ADDR
// end ;
16939: LD_VAR 0 2
16943: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16944: LD_INT 0
16946: PPUSH
16947: PPUSH
16948: PPUSH
// pom := GetBase ( building ) ;
16949: LD_ADDR_VAR 0 4
16953: PUSH
16954: LD_VAR 0 1
16958: PPUSH
16959: CALL_OW 274
16963: ST_TO_ADDR
// if not pom then
16964: LD_VAR 0 4
16968: NOT
16969: IFFALSE 16973
// exit ;
16971: GO 17074
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16973: LD_ADDR_VAR 0 5
16977: PUSH
16978: LD_VAR 0 2
16982: PPUSH
16983: LD_VAR 0 1
16987: PPUSH
16988: CALL_OW 248
16992: PPUSH
16993: CALL_OW 450
16997: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16998: LD_ADDR_VAR 0 3
17002: PUSH
17003: LD_VAR 0 4
17007: PPUSH
17008: LD_INT 1
17010: PPUSH
17011: CALL_OW 275
17015: PUSH
17016: LD_VAR 0 5
17020: PUSH
17021: LD_INT 1
17023: ARRAY
17024: GREATEREQUAL
17025: PUSH
17026: LD_VAR 0 4
17030: PPUSH
17031: LD_INT 2
17033: PPUSH
17034: CALL_OW 275
17038: PUSH
17039: LD_VAR 0 5
17043: PUSH
17044: LD_INT 2
17046: ARRAY
17047: GREATEREQUAL
17048: AND
17049: PUSH
17050: LD_VAR 0 4
17054: PPUSH
17055: LD_INT 3
17057: PPUSH
17058: CALL_OW 275
17062: PUSH
17063: LD_VAR 0 5
17067: PUSH
17068: LD_INT 3
17070: ARRAY
17071: GREATEREQUAL
17072: AND
17073: ST_TO_ADDR
// end ;
17074: LD_VAR 0 3
17078: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
17079: LD_INT 0
17081: PPUSH
17082: PPUSH
17083: PPUSH
17084: PPUSH
17085: PPUSH
17086: PPUSH
17087: PPUSH
17088: PPUSH
17089: PPUSH
17090: PPUSH
17091: PPUSH
// result := false ;
17092: LD_ADDR_VAR 0 8
17096: PUSH
17097: LD_INT 0
17099: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
17100: LD_VAR 0 5
17104: NOT
17105: PUSH
17106: LD_VAR 0 1
17110: NOT
17111: OR
17112: PUSH
17113: LD_VAR 0 2
17117: NOT
17118: OR
17119: PUSH
17120: LD_VAR 0 3
17124: NOT
17125: OR
17126: IFFALSE 17130
// exit ;
17128: GO 17944
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
17130: LD_ADDR_VAR 0 14
17134: PUSH
17135: LD_VAR 0 1
17139: PPUSH
17140: LD_VAR 0 2
17144: PPUSH
17145: LD_VAR 0 3
17149: PPUSH
17150: LD_VAR 0 4
17154: PPUSH
17155: LD_VAR 0 5
17159: PUSH
17160: LD_INT 1
17162: ARRAY
17163: PPUSH
17164: CALL_OW 248
17168: PPUSH
17169: LD_INT 0
17171: PPUSH
17172: CALL 19181 0 6
17176: ST_TO_ADDR
// if not hexes then
17177: LD_VAR 0 14
17181: NOT
17182: IFFALSE 17186
// exit ;
17184: GO 17944
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17186: LD_ADDR_VAR 0 17
17190: PUSH
17191: LD_VAR 0 5
17195: PPUSH
17196: LD_INT 22
17198: PUSH
17199: LD_VAR 0 13
17203: PPUSH
17204: CALL_OW 255
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 2
17215: PUSH
17216: LD_INT 30
17218: PUSH
17219: LD_INT 0
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 30
17228: PUSH
17229: LD_INT 1
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: LIST
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PPUSH
17245: CALL_OW 72
17249: ST_TO_ADDR
// for i = 1 to hexes do
17250: LD_ADDR_VAR 0 9
17254: PUSH
17255: DOUBLE
17256: LD_INT 1
17258: DEC
17259: ST_TO_ADDR
17260: LD_VAR 0 14
17264: PUSH
17265: FOR_TO
17266: IFFALSE 17942
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17268: LD_ADDR_VAR 0 13
17272: PUSH
17273: LD_VAR 0 14
17277: PUSH
17278: LD_VAR 0 9
17282: ARRAY
17283: PUSH
17284: LD_INT 1
17286: ARRAY
17287: PPUSH
17288: LD_VAR 0 14
17292: PUSH
17293: LD_VAR 0 9
17297: ARRAY
17298: PUSH
17299: LD_INT 2
17301: ARRAY
17302: PPUSH
17303: CALL_OW 428
17307: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
17308: LD_VAR 0 14
17312: PUSH
17313: LD_VAR 0 9
17317: ARRAY
17318: PUSH
17319: LD_INT 1
17321: ARRAY
17322: PPUSH
17323: LD_VAR 0 14
17327: PUSH
17328: LD_VAR 0 9
17332: ARRAY
17333: PUSH
17334: LD_INT 2
17336: ARRAY
17337: PPUSH
17338: CALL_OW 351
17342: PUSH
17343: LD_VAR 0 14
17347: PUSH
17348: LD_VAR 0 9
17352: ARRAY
17353: PUSH
17354: LD_INT 1
17356: ARRAY
17357: PPUSH
17358: LD_VAR 0 14
17362: PUSH
17363: LD_VAR 0 9
17367: ARRAY
17368: PUSH
17369: LD_INT 2
17371: ARRAY
17372: PPUSH
17373: CALL_OW 488
17377: NOT
17378: OR
17379: PUSH
17380: LD_VAR 0 13
17384: PPUSH
17385: CALL_OW 247
17389: PUSH
17390: LD_INT 3
17392: EQUAL
17393: OR
17394: IFFALSE 17400
// exit ;
17396: POP
17397: POP
17398: GO 17944
// if not tmp then
17400: LD_VAR 0 13
17404: NOT
17405: IFFALSE 17409
// continue ;
17407: GO 17265
// result := true ;
17409: LD_ADDR_VAR 0 8
17413: PUSH
17414: LD_INT 1
17416: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
17417: LD_VAR 0 6
17421: PUSH
17422: LD_VAR 0 13
17426: PPUSH
17427: CALL_OW 247
17431: PUSH
17432: LD_INT 2
17434: EQUAL
17435: AND
17436: PUSH
17437: LD_VAR 0 13
17441: PPUSH
17442: CALL_OW 263
17446: PUSH
17447: LD_INT 1
17449: EQUAL
17450: AND
17451: IFFALSE 17615
// begin if IsDrivenBy ( tmp ) then
17453: LD_VAR 0 13
17457: PPUSH
17458: CALL_OW 311
17462: IFFALSE 17466
// continue ;
17464: GO 17265
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
17466: LD_VAR 0 6
17470: PPUSH
17471: LD_INT 3
17473: PUSH
17474: LD_INT 60
17476: PUSH
17477: EMPTY
17478: LIST
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 3
17486: PUSH
17487: LD_INT 55
17489: PUSH
17490: EMPTY
17491: LIST
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PPUSH
17501: CALL_OW 72
17505: IFFALSE 17613
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
17507: LD_ADDR_VAR 0 18
17511: PUSH
17512: LD_VAR 0 6
17516: PPUSH
17517: LD_INT 3
17519: PUSH
17520: LD_INT 60
17522: PUSH
17523: EMPTY
17524: LIST
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 3
17532: PUSH
17533: LD_INT 55
17535: PUSH
17536: EMPTY
17537: LIST
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PPUSH
17547: CALL_OW 72
17551: PUSH
17552: LD_INT 1
17554: ARRAY
17555: ST_TO_ADDR
// if IsInUnit ( driver ) then
17556: LD_VAR 0 18
17560: PPUSH
17561: CALL_OW 310
17565: IFFALSE 17576
// ComExit ( driver ) ;
17567: LD_VAR 0 18
17571: PPUSH
17572: CALL 42869 0 1
// AddComEnterUnit ( driver , tmp ) ;
17576: LD_VAR 0 18
17580: PPUSH
17581: LD_VAR 0 13
17585: PPUSH
17586: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
17590: LD_VAR 0 18
17594: PPUSH
17595: LD_VAR 0 7
17599: PPUSH
17600: CALL_OW 173
// AddComExitVehicle ( driver ) ;
17604: LD_VAR 0 18
17608: PPUSH
17609: CALL_OW 181
// end ; continue ;
17613: GO 17265
// end ; if not cleaners or not tmp in cleaners then
17615: LD_VAR 0 6
17619: NOT
17620: PUSH
17621: LD_VAR 0 13
17625: PUSH
17626: LD_VAR 0 6
17630: IN
17631: NOT
17632: OR
17633: IFFALSE 17940
// begin if dep then
17635: LD_VAR 0 17
17639: IFFALSE 17775
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
17641: LD_ADDR_VAR 0 16
17645: PUSH
17646: LD_VAR 0 17
17650: PUSH
17651: LD_INT 1
17653: ARRAY
17654: PPUSH
17655: CALL_OW 250
17659: PPUSH
17660: LD_VAR 0 17
17664: PUSH
17665: LD_INT 1
17667: ARRAY
17668: PPUSH
17669: CALL_OW 254
17673: PPUSH
17674: LD_INT 5
17676: PPUSH
17677: CALL_OW 272
17681: PUSH
17682: LD_VAR 0 17
17686: PUSH
17687: LD_INT 1
17689: ARRAY
17690: PPUSH
17691: CALL_OW 251
17695: PPUSH
17696: LD_VAR 0 17
17700: PUSH
17701: LD_INT 1
17703: ARRAY
17704: PPUSH
17705: CALL_OW 254
17709: PPUSH
17710: LD_INT 5
17712: PPUSH
17713: CALL_OW 273
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
17722: LD_VAR 0 16
17726: PUSH
17727: LD_INT 1
17729: ARRAY
17730: PPUSH
17731: LD_VAR 0 16
17735: PUSH
17736: LD_INT 2
17738: ARRAY
17739: PPUSH
17740: CALL_OW 488
17744: IFFALSE 17775
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
17746: LD_VAR 0 13
17750: PPUSH
17751: LD_VAR 0 16
17755: PUSH
17756: LD_INT 1
17758: ARRAY
17759: PPUSH
17760: LD_VAR 0 16
17764: PUSH
17765: LD_INT 2
17767: ARRAY
17768: PPUSH
17769: CALL_OW 111
// continue ;
17773: GO 17265
// end ; end ; r := GetDir ( tmp ) ;
17775: LD_ADDR_VAR 0 15
17779: PUSH
17780: LD_VAR 0 13
17784: PPUSH
17785: CALL_OW 254
17789: ST_TO_ADDR
// if r = 5 then
17790: LD_VAR 0 15
17794: PUSH
17795: LD_INT 5
17797: EQUAL
17798: IFFALSE 17808
// r := 0 ;
17800: LD_ADDR_VAR 0 15
17804: PUSH
17805: LD_INT 0
17807: ST_TO_ADDR
// for j = r to 5 do
17808: LD_ADDR_VAR 0 10
17812: PUSH
17813: DOUBLE
17814: LD_VAR 0 15
17818: DEC
17819: ST_TO_ADDR
17820: LD_INT 5
17822: PUSH
17823: FOR_TO
17824: IFFALSE 17938
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
17826: LD_ADDR_VAR 0 11
17830: PUSH
17831: LD_VAR 0 13
17835: PPUSH
17836: CALL_OW 250
17840: PPUSH
17841: LD_VAR 0 10
17845: PPUSH
17846: LD_INT 2
17848: PPUSH
17849: CALL_OW 272
17853: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
17854: LD_ADDR_VAR 0 12
17858: PUSH
17859: LD_VAR 0 13
17863: PPUSH
17864: CALL_OW 251
17868: PPUSH
17869: LD_VAR 0 10
17873: PPUSH
17874: LD_INT 2
17876: PPUSH
17877: CALL_OW 273
17881: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
17882: LD_VAR 0 11
17886: PPUSH
17887: LD_VAR 0 12
17891: PPUSH
17892: CALL_OW 488
17896: PUSH
17897: LD_VAR 0 11
17901: PPUSH
17902: LD_VAR 0 12
17906: PPUSH
17907: CALL_OW 428
17911: NOT
17912: AND
17913: IFFALSE 17936
// begin ComMoveXY ( tmp , _x , _y ) ;
17915: LD_VAR 0 13
17919: PPUSH
17920: LD_VAR 0 11
17924: PPUSH
17925: LD_VAR 0 12
17929: PPUSH
17930: CALL_OW 111
// break ;
17934: GO 17938
// end ; end ;
17936: GO 17823
17938: POP
17939: POP
// end ; end ;
17940: GO 17265
17942: POP
17943: POP
// end ;
17944: LD_VAR 0 8
17948: RET
// export function BuildingTechInvented ( side , btype ) ; begin
17949: LD_INT 0
17951: PPUSH
// result := true ;
17952: LD_ADDR_VAR 0 3
17956: PUSH
17957: LD_INT 1
17959: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
17960: LD_VAR 0 2
17964: PUSH
17965: LD_INT 24
17967: DOUBLE
17968: EQUAL
17969: IFTRUE 17979
17971: LD_INT 33
17973: DOUBLE
17974: EQUAL
17975: IFTRUE 17979
17977: GO 18004
17979: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
17980: LD_ADDR_VAR 0 3
17984: PUSH
17985: LD_INT 32
17987: PPUSH
17988: LD_VAR 0 1
17992: PPUSH
17993: CALL_OW 321
17997: PUSH
17998: LD_INT 2
18000: EQUAL
18001: ST_TO_ADDR
18002: GO 18324
18004: LD_INT 20
18006: DOUBLE
18007: EQUAL
18008: IFTRUE 18012
18010: GO 18037
18012: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
18013: LD_ADDR_VAR 0 3
18017: PUSH
18018: LD_INT 6
18020: PPUSH
18021: LD_VAR 0 1
18025: PPUSH
18026: CALL_OW 321
18030: PUSH
18031: LD_INT 2
18033: EQUAL
18034: ST_TO_ADDR
18035: GO 18324
18037: LD_INT 22
18039: DOUBLE
18040: EQUAL
18041: IFTRUE 18051
18043: LD_INT 36
18045: DOUBLE
18046: EQUAL
18047: IFTRUE 18051
18049: GO 18076
18051: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
18052: LD_ADDR_VAR 0 3
18056: PUSH
18057: LD_INT 15
18059: PPUSH
18060: LD_VAR 0 1
18064: PPUSH
18065: CALL_OW 321
18069: PUSH
18070: LD_INT 2
18072: EQUAL
18073: ST_TO_ADDR
18074: GO 18324
18076: LD_INT 30
18078: DOUBLE
18079: EQUAL
18080: IFTRUE 18084
18082: GO 18109
18084: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
18085: LD_ADDR_VAR 0 3
18089: PUSH
18090: LD_INT 20
18092: PPUSH
18093: LD_VAR 0 1
18097: PPUSH
18098: CALL_OW 321
18102: PUSH
18103: LD_INT 2
18105: EQUAL
18106: ST_TO_ADDR
18107: GO 18324
18109: LD_INT 28
18111: DOUBLE
18112: EQUAL
18113: IFTRUE 18123
18115: LD_INT 21
18117: DOUBLE
18118: EQUAL
18119: IFTRUE 18123
18121: GO 18148
18123: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
18124: LD_ADDR_VAR 0 3
18128: PUSH
18129: LD_INT 21
18131: PPUSH
18132: LD_VAR 0 1
18136: PPUSH
18137: CALL_OW 321
18141: PUSH
18142: LD_INT 2
18144: EQUAL
18145: ST_TO_ADDR
18146: GO 18324
18148: LD_INT 16
18150: DOUBLE
18151: EQUAL
18152: IFTRUE 18156
18154: GO 18183
18156: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
18157: LD_ADDR_VAR 0 3
18161: PUSH
18162: LD_EXP 48
18166: PPUSH
18167: LD_VAR 0 1
18171: PPUSH
18172: CALL_OW 321
18176: PUSH
18177: LD_INT 2
18179: EQUAL
18180: ST_TO_ADDR
18181: GO 18324
18183: LD_INT 19
18185: DOUBLE
18186: EQUAL
18187: IFTRUE 18197
18189: LD_INT 23
18191: DOUBLE
18192: EQUAL
18193: IFTRUE 18197
18195: GO 18224
18197: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
18198: LD_ADDR_VAR 0 3
18202: PUSH
18203: LD_EXP 47
18207: PPUSH
18208: LD_VAR 0 1
18212: PPUSH
18213: CALL_OW 321
18217: PUSH
18218: LD_INT 2
18220: EQUAL
18221: ST_TO_ADDR
18222: GO 18324
18224: LD_INT 17
18226: DOUBLE
18227: EQUAL
18228: IFTRUE 18232
18230: GO 18257
18232: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
18233: LD_ADDR_VAR 0 3
18237: PUSH
18238: LD_INT 39
18240: PPUSH
18241: LD_VAR 0 1
18245: PPUSH
18246: CALL_OW 321
18250: PUSH
18251: LD_INT 2
18253: EQUAL
18254: ST_TO_ADDR
18255: GO 18324
18257: LD_INT 18
18259: DOUBLE
18260: EQUAL
18261: IFTRUE 18265
18263: GO 18290
18265: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
18266: LD_ADDR_VAR 0 3
18270: PUSH
18271: LD_INT 40
18273: PPUSH
18274: LD_VAR 0 1
18278: PPUSH
18279: CALL_OW 321
18283: PUSH
18284: LD_INT 2
18286: EQUAL
18287: ST_TO_ADDR
18288: GO 18324
18290: LD_INT 27
18292: DOUBLE
18293: EQUAL
18294: IFTRUE 18298
18296: GO 18323
18298: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
18299: LD_ADDR_VAR 0 3
18303: PUSH
18304: LD_INT 35
18306: PPUSH
18307: LD_VAR 0 1
18311: PPUSH
18312: CALL_OW 321
18316: PUSH
18317: LD_INT 2
18319: EQUAL
18320: ST_TO_ADDR
18321: GO 18324
18323: POP
// end ;
18324: LD_VAR 0 3
18328: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
18329: LD_INT 0
18331: PPUSH
18332: PPUSH
18333: PPUSH
18334: PPUSH
18335: PPUSH
18336: PPUSH
18337: PPUSH
18338: PPUSH
18339: PPUSH
18340: PPUSH
18341: PPUSH
// result := false ;
18342: LD_ADDR_VAR 0 6
18346: PUSH
18347: LD_INT 0
18349: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
18350: LD_VAR 0 1
18354: NOT
18355: PUSH
18356: LD_VAR 0 1
18360: PPUSH
18361: CALL_OW 266
18365: PUSH
18366: LD_INT 0
18368: PUSH
18369: LD_INT 1
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: IN
18376: NOT
18377: OR
18378: PUSH
18379: LD_VAR 0 2
18383: NOT
18384: OR
18385: PUSH
18386: LD_VAR 0 5
18390: PUSH
18391: LD_INT 0
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: LD_INT 2
18399: PUSH
18400: LD_INT 3
18402: PUSH
18403: LD_INT 4
18405: PUSH
18406: LD_INT 5
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: IN
18417: NOT
18418: OR
18419: PUSH
18420: LD_VAR 0 3
18424: PPUSH
18425: LD_VAR 0 4
18429: PPUSH
18430: CALL_OW 488
18434: NOT
18435: OR
18436: IFFALSE 18440
// exit ;
18438: GO 19176
// side := GetSide ( depot ) ;
18440: LD_ADDR_VAR 0 9
18444: PUSH
18445: LD_VAR 0 1
18449: PPUSH
18450: CALL_OW 255
18454: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
18455: LD_VAR 0 9
18459: PPUSH
18460: LD_VAR 0 2
18464: PPUSH
18465: CALL 17949 0 2
18469: NOT
18470: IFFALSE 18474
// exit ;
18472: GO 19176
// pom := GetBase ( depot ) ;
18474: LD_ADDR_VAR 0 10
18478: PUSH
18479: LD_VAR 0 1
18483: PPUSH
18484: CALL_OW 274
18488: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
18489: LD_ADDR_VAR 0 11
18493: PUSH
18494: LD_VAR 0 2
18498: PPUSH
18499: LD_VAR 0 1
18503: PPUSH
18504: CALL_OW 248
18508: PPUSH
18509: CALL_OW 450
18513: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
18514: LD_VAR 0 10
18518: PPUSH
18519: LD_INT 1
18521: PPUSH
18522: CALL_OW 275
18526: PUSH
18527: LD_VAR 0 11
18531: PUSH
18532: LD_INT 1
18534: ARRAY
18535: GREATEREQUAL
18536: PUSH
18537: LD_VAR 0 10
18541: PPUSH
18542: LD_INT 2
18544: PPUSH
18545: CALL_OW 275
18549: PUSH
18550: LD_VAR 0 11
18554: PUSH
18555: LD_INT 2
18557: ARRAY
18558: GREATEREQUAL
18559: AND
18560: PUSH
18561: LD_VAR 0 10
18565: PPUSH
18566: LD_INT 3
18568: PPUSH
18569: CALL_OW 275
18573: PUSH
18574: LD_VAR 0 11
18578: PUSH
18579: LD_INT 3
18581: ARRAY
18582: GREATEREQUAL
18583: AND
18584: NOT
18585: IFFALSE 18589
// exit ;
18587: GO 19176
// if GetBType ( depot ) = b_depot then
18589: LD_VAR 0 1
18593: PPUSH
18594: CALL_OW 266
18598: PUSH
18599: LD_INT 0
18601: EQUAL
18602: IFFALSE 18614
// dist := 28 else
18604: LD_ADDR_VAR 0 14
18608: PUSH
18609: LD_INT 28
18611: ST_TO_ADDR
18612: GO 18622
// dist := 36 ;
18614: LD_ADDR_VAR 0 14
18618: PUSH
18619: LD_INT 36
18621: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
18622: LD_VAR 0 1
18626: PPUSH
18627: LD_VAR 0 3
18631: PPUSH
18632: LD_VAR 0 4
18636: PPUSH
18637: CALL_OW 297
18641: PUSH
18642: LD_VAR 0 14
18646: GREATER
18647: IFFALSE 18651
// exit ;
18649: GO 19176
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
18651: LD_ADDR_VAR 0 12
18655: PUSH
18656: LD_VAR 0 2
18660: PPUSH
18661: LD_VAR 0 3
18665: PPUSH
18666: LD_VAR 0 4
18670: PPUSH
18671: LD_VAR 0 5
18675: PPUSH
18676: LD_VAR 0 1
18680: PPUSH
18681: CALL_OW 248
18685: PPUSH
18686: LD_INT 0
18688: PPUSH
18689: CALL 19181 0 6
18693: ST_TO_ADDR
// if not hexes then
18694: LD_VAR 0 12
18698: NOT
18699: IFFALSE 18703
// exit ;
18701: GO 19176
// hex := GetHexInfo ( x , y ) ;
18703: LD_ADDR_VAR 0 15
18707: PUSH
18708: LD_VAR 0 3
18712: PPUSH
18713: LD_VAR 0 4
18717: PPUSH
18718: CALL_OW 546
18722: ST_TO_ADDR
// if hex [ 1 ] then
18723: LD_VAR 0 15
18727: PUSH
18728: LD_INT 1
18730: ARRAY
18731: IFFALSE 18735
// exit ;
18733: GO 19176
// height := hex [ 2 ] ;
18735: LD_ADDR_VAR 0 13
18739: PUSH
18740: LD_VAR 0 15
18744: PUSH
18745: LD_INT 2
18747: ARRAY
18748: ST_TO_ADDR
// for i = 1 to hexes do
18749: LD_ADDR_VAR 0 7
18753: PUSH
18754: DOUBLE
18755: LD_INT 1
18757: DEC
18758: ST_TO_ADDR
18759: LD_VAR 0 12
18763: PUSH
18764: FOR_TO
18765: IFFALSE 19095
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18767: LD_VAR 0 12
18771: PUSH
18772: LD_VAR 0 7
18776: ARRAY
18777: PUSH
18778: LD_INT 1
18780: ARRAY
18781: PPUSH
18782: LD_VAR 0 12
18786: PUSH
18787: LD_VAR 0 7
18791: ARRAY
18792: PUSH
18793: LD_INT 2
18795: ARRAY
18796: PPUSH
18797: CALL_OW 488
18801: NOT
18802: PUSH
18803: LD_VAR 0 12
18807: PUSH
18808: LD_VAR 0 7
18812: ARRAY
18813: PUSH
18814: LD_INT 1
18816: ARRAY
18817: PPUSH
18818: LD_VAR 0 12
18822: PUSH
18823: LD_VAR 0 7
18827: ARRAY
18828: PUSH
18829: LD_INT 2
18831: ARRAY
18832: PPUSH
18833: CALL_OW 428
18837: PUSH
18838: LD_INT 0
18840: GREATER
18841: OR
18842: PUSH
18843: LD_VAR 0 12
18847: PUSH
18848: LD_VAR 0 7
18852: ARRAY
18853: PUSH
18854: LD_INT 1
18856: ARRAY
18857: PPUSH
18858: LD_VAR 0 12
18862: PUSH
18863: LD_VAR 0 7
18867: ARRAY
18868: PUSH
18869: LD_INT 2
18871: ARRAY
18872: PPUSH
18873: CALL_OW 351
18877: OR
18878: IFFALSE 18884
// exit ;
18880: POP
18881: POP
18882: GO 19176
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18884: LD_ADDR_VAR 0 8
18888: PUSH
18889: LD_VAR 0 12
18893: PUSH
18894: LD_VAR 0 7
18898: ARRAY
18899: PUSH
18900: LD_INT 1
18902: ARRAY
18903: PPUSH
18904: LD_VAR 0 12
18908: PUSH
18909: LD_VAR 0 7
18913: ARRAY
18914: PUSH
18915: LD_INT 2
18917: ARRAY
18918: PPUSH
18919: CALL_OW 546
18923: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
18924: LD_VAR 0 8
18928: PUSH
18929: LD_INT 1
18931: ARRAY
18932: PUSH
18933: LD_VAR 0 8
18937: PUSH
18938: LD_INT 2
18940: ARRAY
18941: PUSH
18942: LD_VAR 0 13
18946: PUSH
18947: LD_INT 2
18949: PLUS
18950: GREATER
18951: OR
18952: PUSH
18953: LD_VAR 0 8
18957: PUSH
18958: LD_INT 2
18960: ARRAY
18961: PUSH
18962: LD_VAR 0 13
18966: PUSH
18967: LD_INT 2
18969: MINUS
18970: LESS
18971: OR
18972: PUSH
18973: LD_VAR 0 8
18977: PUSH
18978: LD_INT 3
18980: ARRAY
18981: PUSH
18982: LD_INT 0
18984: PUSH
18985: LD_INT 8
18987: PUSH
18988: LD_INT 9
18990: PUSH
18991: LD_INT 10
18993: PUSH
18994: LD_INT 11
18996: PUSH
18997: LD_INT 12
18999: PUSH
19000: LD_INT 13
19002: PUSH
19003: LD_INT 16
19005: PUSH
19006: LD_INT 17
19008: PUSH
19009: LD_INT 18
19011: PUSH
19012: LD_INT 19
19014: PUSH
19015: LD_INT 20
19017: PUSH
19018: LD_INT 21
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: IN
19036: NOT
19037: OR
19038: PUSH
19039: LD_VAR 0 8
19043: PUSH
19044: LD_INT 5
19046: ARRAY
19047: NOT
19048: OR
19049: PUSH
19050: LD_VAR 0 8
19054: PUSH
19055: LD_INT 6
19057: ARRAY
19058: PUSH
19059: LD_INT 1
19061: PUSH
19062: LD_INT 2
19064: PUSH
19065: LD_INT 7
19067: PUSH
19068: LD_INT 9
19070: PUSH
19071: LD_INT 10
19073: PUSH
19074: LD_INT 11
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: IN
19085: NOT
19086: OR
19087: IFFALSE 19093
// exit ;
19089: POP
19090: POP
19091: GO 19176
// end ;
19093: GO 18764
19095: POP
19096: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
19097: LD_VAR 0 9
19101: PPUSH
19102: LD_VAR 0 3
19106: PPUSH
19107: LD_VAR 0 4
19111: PPUSH
19112: LD_INT 20
19114: PPUSH
19115: CALL 11122 0 4
19119: PUSH
19120: LD_INT 4
19122: ARRAY
19123: IFFALSE 19127
// exit ;
19125: GO 19176
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
19127: LD_VAR 0 2
19131: PUSH
19132: LD_INT 29
19134: PUSH
19135: LD_INT 30
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: IN
19142: PUSH
19143: LD_VAR 0 3
19147: PPUSH
19148: LD_VAR 0 4
19152: PPUSH
19153: LD_VAR 0 9
19157: PPUSH
19158: CALL_OW 440
19162: NOT
19163: AND
19164: IFFALSE 19168
// exit ;
19166: GO 19176
// result := true ;
19168: LD_ADDR_VAR 0 6
19172: PUSH
19173: LD_INT 1
19175: ST_TO_ADDR
// end ;
19176: LD_VAR 0 6
19180: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
19181: LD_INT 0
19183: PPUSH
19184: PPUSH
19185: PPUSH
19186: PPUSH
19187: PPUSH
19188: PPUSH
19189: PPUSH
19190: PPUSH
19191: PPUSH
19192: PPUSH
19193: PPUSH
19194: PPUSH
19195: PPUSH
19196: PPUSH
19197: PPUSH
19198: PPUSH
19199: PPUSH
19200: PPUSH
19201: PPUSH
19202: PPUSH
19203: PPUSH
19204: PPUSH
19205: PPUSH
19206: PPUSH
19207: PPUSH
19208: PPUSH
19209: PPUSH
19210: PPUSH
19211: PPUSH
19212: PPUSH
19213: PPUSH
19214: PPUSH
19215: PPUSH
19216: PPUSH
19217: PPUSH
19218: PPUSH
19219: PPUSH
19220: PPUSH
19221: PPUSH
19222: PPUSH
19223: PPUSH
19224: PPUSH
19225: PPUSH
19226: PPUSH
19227: PPUSH
19228: PPUSH
19229: PPUSH
19230: PPUSH
19231: PPUSH
19232: PPUSH
19233: PPUSH
19234: PPUSH
19235: PPUSH
19236: PPUSH
19237: PPUSH
19238: PPUSH
19239: PPUSH
19240: PPUSH
// result = [ ] ;
19241: LD_ADDR_VAR 0 7
19245: PUSH
19246: EMPTY
19247: ST_TO_ADDR
// temp_list = [ ] ;
19248: LD_ADDR_VAR 0 9
19252: PUSH
19253: EMPTY
19254: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
19255: LD_VAR 0 4
19259: PUSH
19260: LD_INT 0
19262: PUSH
19263: LD_INT 1
19265: PUSH
19266: LD_INT 2
19268: PUSH
19269: LD_INT 3
19271: PUSH
19272: LD_INT 4
19274: PUSH
19275: LD_INT 5
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: IN
19286: NOT
19287: PUSH
19288: LD_VAR 0 1
19292: PUSH
19293: LD_INT 0
19295: PUSH
19296: LD_INT 1
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: IN
19303: PUSH
19304: LD_VAR 0 5
19308: PUSH
19309: LD_INT 1
19311: PUSH
19312: LD_INT 2
19314: PUSH
19315: LD_INT 3
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: LIST
19322: IN
19323: NOT
19324: AND
19325: OR
19326: IFFALSE 19330
// exit ;
19328: GO 37721
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
19330: LD_VAR 0 1
19334: PUSH
19335: LD_INT 6
19337: PUSH
19338: LD_INT 7
19340: PUSH
19341: LD_INT 8
19343: PUSH
19344: LD_INT 13
19346: PUSH
19347: LD_INT 12
19349: PUSH
19350: LD_INT 15
19352: PUSH
19353: LD_INT 11
19355: PUSH
19356: LD_INT 14
19358: PUSH
19359: LD_INT 10
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: IN
19373: IFFALSE 19383
// btype = b_lab ;
19375: LD_ADDR_VAR 0 1
19379: PUSH
19380: LD_INT 6
19382: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
19383: LD_VAR 0 6
19387: PUSH
19388: LD_INT 0
19390: PUSH
19391: LD_INT 1
19393: PUSH
19394: LD_INT 2
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: LIST
19401: IN
19402: NOT
19403: PUSH
19404: LD_VAR 0 1
19408: PUSH
19409: LD_INT 0
19411: PUSH
19412: LD_INT 1
19414: PUSH
19415: LD_INT 2
19417: PUSH
19418: LD_INT 3
19420: PUSH
19421: LD_INT 6
19423: PUSH
19424: LD_INT 36
19426: PUSH
19427: LD_INT 4
19429: PUSH
19430: LD_INT 5
19432: PUSH
19433: LD_INT 31
19435: PUSH
19436: LD_INT 32
19438: PUSH
19439: LD_INT 33
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: IN
19455: NOT
19456: PUSH
19457: LD_VAR 0 6
19461: PUSH
19462: LD_INT 1
19464: EQUAL
19465: AND
19466: OR
19467: PUSH
19468: LD_VAR 0 1
19472: PUSH
19473: LD_INT 2
19475: PUSH
19476: LD_INT 3
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: IN
19483: NOT
19484: PUSH
19485: LD_VAR 0 6
19489: PUSH
19490: LD_INT 2
19492: EQUAL
19493: AND
19494: OR
19495: IFFALSE 19505
// mode = 0 ;
19497: LD_ADDR_VAR 0 6
19501: PUSH
19502: LD_INT 0
19504: ST_TO_ADDR
// case mode of 0 :
19505: LD_VAR 0 6
19509: PUSH
19510: LD_INT 0
19512: DOUBLE
19513: EQUAL
19514: IFTRUE 19518
19516: GO 30971
19518: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
19519: LD_ADDR_VAR 0 11
19523: PUSH
19524: LD_INT 0
19526: PUSH
19527: LD_INT 0
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 0
19536: PUSH
19537: LD_INT 1
19539: NEG
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: LD_INT 1
19547: PUSH
19548: LD_INT 0
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: LD_INT 1
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 0
19567: PUSH
19568: LD_INT 1
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 1
19577: NEG
19578: PUSH
19579: LD_INT 0
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 1
19588: NEG
19589: PUSH
19590: LD_INT 1
19592: NEG
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 1
19600: NEG
19601: PUSH
19602: LD_INT 2
19604: NEG
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 0
19612: PUSH
19613: LD_INT 2
19615: NEG
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 1
19623: PUSH
19624: LD_INT 1
19626: NEG
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 1
19634: PUSH
19635: LD_INT 2
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 0
19644: PUSH
19645: LD_INT 2
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 1
19654: NEG
19655: PUSH
19656: LD_INT 1
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: LD_INT 3
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 0
19675: PUSH
19676: LD_INT 3
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 1
19685: NEG
19686: PUSH
19687: LD_INT 2
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19712: LD_ADDR_VAR 0 12
19716: PUSH
19717: LD_INT 0
19719: PUSH
19720: LD_INT 0
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 0
19729: PUSH
19730: LD_INT 1
19732: NEG
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 1
19740: PUSH
19741: LD_INT 0
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 1
19750: PUSH
19751: LD_INT 1
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 0
19760: PUSH
19761: LD_INT 1
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 1
19770: NEG
19771: PUSH
19772: LD_INT 0
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 1
19781: NEG
19782: PUSH
19783: LD_INT 1
19785: NEG
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 1
19793: PUSH
19794: LD_INT 1
19796: NEG
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 2
19804: PUSH
19805: LD_INT 0
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 2
19814: PUSH
19815: LD_INT 1
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 1
19824: NEG
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 2
19835: NEG
19836: PUSH
19837: LD_INT 0
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 2
19846: NEG
19847: PUSH
19848: LD_INT 1
19850: NEG
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 2
19858: NEG
19859: PUSH
19860: LD_INT 1
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 3
19869: NEG
19870: PUSH
19871: LD_INT 0
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 3
19880: NEG
19881: PUSH
19882: LD_INT 1
19884: NEG
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19908: LD_ADDR_VAR 0 13
19912: PUSH
19913: LD_INT 0
19915: PUSH
19916: LD_INT 0
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 0
19925: PUSH
19926: LD_INT 1
19928: NEG
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 1
19936: PUSH
19937: LD_INT 0
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 1
19946: PUSH
19947: LD_INT 1
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 0
19956: PUSH
19957: LD_INT 1
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 1
19966: NEG
19967: PUSH
19968: LD_INT 0
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 1
19977: NEG
19978: PUSH
19979: LD_INT 1
19981: NEG
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: LD_INT 1
19989: NEG
19990: PUSH
19991: LD_INT 2
19993: NEG
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 2
20001: PUSH
20002: LD_INT 1
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 2
20011: PUSH
20012: LD_INT 2
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 1
20021: PUSH
20022: LD_INT 2
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 2
20031: NEG
20032: PUSH
20033: LD_INT 1
20035: NEG
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 2
20043: NEG
20044: PUSH
20045: LD_INT 2
20047: NEG
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: LD_INT 2
20055: NEG
20056: PUSH
20057: LD_INT 3
20059: NEG
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 3
20067: NEG
20068: PUSH
20069: LD_INT 2
20071: NEG
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 3
20079: NEG
20080: PUSH
20081: LD_INT 3
20083: NEG
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
20107: LD_ADDR_VAR 0 14
20111: PUSH
20112: LD_INT 0
20114: PUSH
20115: LD_INT 0
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 0
20124: PUSH
20125: LD_INT 1
20127: NEG
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 1
20135: PUSH
20136: LD_INT 0
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 1
20145: PUSH
20146: LD_INT 1
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 0
20155: PUSH
20156: LD_INT 1
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 1
20165: NEG
20166: PUSH
20167: LD_INT 0
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 1
20176: NEG
20177: PUSH
20178: LD_INT 1
20180: NEG
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: NEG
20189: PUSH
20190: LD_INT 2
20192: NEG
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 0
20200: PUSH
20201: LD_INT 2
20203: NEG
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 1
20211: PUSH
20212: LD_INT 1
20214: NEG
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 1
20222: PUSH
20223: LD_INT 2
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 0
20232: PUSH
20233: LD_INT 2
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 1
20242: NEG
20243: PUSH
20244: LD_INT 1
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 1
20253: NEG
20254: PUSH
20255: LD_INT 3
20257: NEG
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 0
20265: PUSH
20266: LD_INT 3
20268: NEG
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 1
20276: PUSH
20277: LD_INT 2
20279: NEG
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
20303: LD_ADDR_VAR 0 15
20307: PUSH
20308: LD_INT 0
20310: PUSH
20311: LD_INT 0
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 0
20320: PUSH
20321: LD_INT 1
20323: NEG
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 1
20331: PUSH
20332: LD_INT 0
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 1
20341: PUSH
20342: LD_INT 1
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 0
20351: PUSH
20352: LD_INT 1
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 1
20361: NEG
20362: PUSH
20363: LD_INT 0
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 1
20372: NEG
20373: PUSH
20374: LD_INT 1
20376: NEG
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 1
20384: PUSH
20385: LD_INT 1
20387: NEG
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 2
20395: PUSH
20396: LD_INT 0
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 2
20405: PUSH
20406: LD_INT 1
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 1
20415: NEG
20416: PUSH
20417: LD_INT 1
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 2
20426: NEG
20427: PUSH
20428: LD_INT 0
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 2
20437: NEG
20438: PUSH
20439: LD_INT 1
20441: NEG
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 2
20449: PUSH
20450: LD_INT 1
20452: NEG
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 3
20460: PUSH
20461: LD_INT 0
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: LD_INT 3
20470: PUSH
20471: LD_INT 1
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
20496: LD_ADDR_VAR 0 16
20500: PUSH
20501: LD_INT 0
20503: PUSH
20504: LD_INT 0
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: LD_INT 0
20513: PUSH
20514: LD_INT 1
20516: NEG
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 1
20524: PUSH
20525: LD_INT 0
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 1
20534: PUSH
20535: LD_INT 1
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 0
20544: PUSH
20545: LD_INT 1
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 1
20554: NEG
20555: PUSH
20556: LD_INT 0
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 1
20565: NEG
20566: PUSH
20567: LD_INT 1
20569: NEG
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 1
20577: NEG
20578: PUSH
20579: LD_INT 2
20581: NEG
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 2
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 2
20599: PUSH
20600: LD_INT 2
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 1
20609: PUSH
20610: LD_INT 2
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 2
20619: NEG
20620: PUSH
20621: LD_INT 1
20623: NEG
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 2
20631: NEG
20632: PUSH
20633: LD_INT 2
20635: NEG
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 3
20643: PUSH
20644: LD_INT 2
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 3
20653: PUSH
20654: LD_INT 3
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 2
20663: PUSH
20664: LD_INT 3
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20689: LD_ADDR_VAR 0 17
20693: PUSH
20694: LD_INT 0
20696: PUSH
20697: LD_INT 0
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 0
20706: PUSH
20707: LD_INT 1
20709: NEG
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 1
20717: PUSH
20718: LD_INT 0
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 1
20727: PUSH
20728: LD_INT 1
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 0
20737: PUSH
20738: LD_INT 1
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 1
20747: NEG
20748: PUSH
20749: LD_INT 0
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 1
20758: NEG
20759: PUSH
20760: LD_INT 1
20762: NEG
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 1
20770: NEG
20771: PUSH
20772: LD_INT 2
20774: NEG
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 0
20782: PUSH
20783: LD_INT 2
20785: NEG
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 1
20793: PUSH
20794: LD_INT 1
20796: NEG
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 2
20804: PUSH
20805: LD_INT 0
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 2
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 2
20824: PUSH
20825: LD_INT 2
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: LD_INT 2
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 0
20844: PUSH
20845: LD_INT 2
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 1
20854: NEG
20855: PUSH
20856: LD_INT 1
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 2
20865: NEG
20866: PUSH
20867: LD_INT 0
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 2
20876: NEG
20877: PUSH
20878: LD_INT 1
20880: NEG
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 2
20888: NEG
20889: PUSH
20890: LD_INT 2
20892: NEG
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20919: LD_ADDR_VAR 0 18
20923: PUSH
20924: LD_INT 0
20926: PUSH
20927: LD_INT 0
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 0
20936: PUSH
20937: LD_INT 1
20939: NEG
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 1
20947: PUSH
20948: LD_INT 0
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 1
20957: PUSH
20958: LD_INT 1
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 0
20967: PUSH
20968: LD_INT 1
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 1
20977: NEG
20978: PUSH
20979: LD_INT 0
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 1
20988: NEG
20989: PUSH
20990: LD_INT 1
20992: NEG
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 1
21000: NEG
21001: PUSH
21002: LD_INT 2
21004: NEG
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 0
21012: PUSH
21013: LD_INT 2
21015: NEG
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 1
21023: PUSH
21024: LD_INT 1
21026: NEG
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 2
21034: PUSH
21035: LD_INT 0
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 2
21044: PUSH
21045: LD_INT 1
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 2
21054: PUSH
21055: LD_INT 2
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 1
21064: PUSH
21065: LD_INT 2
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 0
21074: PUSH
21075: LD_INT 2
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 1
21084: NEG
21085: PUSH
21086: LD_INT 1
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 2
21095: NEG
21096: PUSH
21097: LD_INT 0
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 2
21106: NEG
21107: PUSH
21108: LD_INT 1
21110: NEG
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 2
21118: NEG
21119: PUSH
21120: LD_INT 2
21122: NEG
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21149: LD_ADDR_VAR 0 19
21153: PUSH
21154: LD_INT 0
21156: PUSH
21157: LD_INT 0
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PUSH
21164: LD_INT 0
21166: PUSH
21167: LD_INT 1
21169: NEG
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 1
21177: PUSH
21178: LD_INT 0
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 1
21187: PUSH
21188: LD_INT 1
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 0
21197: PUSH
21198: LD_INT 1
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 1
21207: NEG
21208: PUSH
21209: LD_INT 0
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 1
21218: NEG
21219: PUSH
21220: LD_INT 1
21222: NEG
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 1
21230: NEG
21231: PUSH
21232: LD_INT 2
21234: NEG
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 0
21242: PUSH
21243: LD_INT 2
21245: NEG
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 1
21253: PUSH
21254: LD_INT 1
21256: NEG
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 2
21264: PUSH
21265: LD_INT 0
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 2
21274: PUSH
21275: LD_INT 1
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 2
21284: PUSH
21285: LD_INT 2
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 1
21294: PUSH
21295: LD_INT 2
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 0
21304: PUSH
21305: LD_INT 2
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 1
21314: NEG
21315: PUSH
21316: LD_INT 1
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 2
21325: NEG
21326: PUSH
21327: LD_INT 0
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 2
21336: NEG
21337: PUSH
21338: LD_INT 1
21340: NEG
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 2
21348: NEG
21349: PUSH
21350: LD_INT 2
21352: NEG
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21379: LD_ADDR_VAR 0 20
21383: PUSH
21384: LD_INT 0
21386: PUSH
21387: LD_INT 0
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: LD_INT 0
21396: PUSH
21397: LD_INT 1
21399: NEG
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 1
21407: PUSH
21408: LD_INT 0
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 1
21417: PUSH
21418: LD_INT 1
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 0
21427: PUSH
21428: LD_INT 1
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 1
21437: NEG
21438: PUSH
21439: LD_INT 0
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 1
21448: NEG
21449: PUSH
21450: LD_INT 1
21452: NEG
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 1
21460: NEG
21461: PUSH
21462: LD_INT 2
21464: NEG
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 0
21472: PUSH
21473: LD_INT 2
21475: NEG
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 1
21483: PUSH
21484: LD_INT 1
21486: NEG
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 2
21494: PUSH
21495: LD_INT 0
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 2
21504: PUSH
21505: LD_INT 1
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 2
21514: PUSH
21515: LD_INT 2
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 1
21524: PUSH
21525: LD_INT 2
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 0
21534: PUSH
21535: LD_INT 2
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 1
21544: NEG
21545: PUSH
21546: LD_INT 1
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 2
21555: NEG
21556: PUSH
21557: LD_INT 0
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 2
21566: NEG
21567: PUSH
21568: LD_INT 1
21570: NEG
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 2
21578: NEG
21579: PUSH
21580: LD_INT 2
21582: NEG
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21609: LD_ADDR_VAR 0 21
21613: PUSH
21614: LD_INT 0
21616: PUSH
21617: LD_INT 0
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 0
21626: PUSH
21627: LD_INT 1
21629: NEG
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 1
21637: PUSH
21638: LD_INT 0
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 1
21647: PUSH
21648: LD_INT 1
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 0
21657: PUSH
21658: LD_INT 1
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 1
21667: NEG
21668: PUSH
21669: LD_INT 0
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 1
21678: NEG
21679: PUSH
21680: LD_INT 1
21682: NEG
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 1
21690: NEG
21691: PUSH
21692: LD_INT 2
21694: NEG
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 0
21702: PUSH
21703: LD_INT 2
21705: NEG
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 1
21713: PUSH
21714: LD_INT 1
21716: NEG
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 2
21724: PUSH
21725: LD_INT 0
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 2
21734: PUSH
21735: LD_INT 1
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 2
21744: PUSH
21745: LD_INT 2
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 1
21754: PUSH
21755: LD_INT 2
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 0
21764: PUSH
21765: LD_INT 2
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 1
21774: NEG
21775: PUSH
21776: LD_INT 1
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 2
21785: NEG
21786: PUSH
21787: LD_INT 0
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 2
21796: NEG
21797: PUSH
21798: LD_INT 1
21800: NEG
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 2
21808: NEG
21809: PUSH
21810: LD_INT 2
21812: NEG
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21839: LD_ADDR_VAR 0 22
21843: PUSH
21844: LD_INT 0
21846: PUSH
21847: LD_INT 0
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 0
21856: PUSH
21857: LD_INT 1
21859: NEG
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 1
21867: PUSH
21868: LD_INT 0
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 1
21877: PUSH
21878: LD_INT 1
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 0
21887: PUSH
21888: LD_INT 1
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: LD_INT 1
21897: NEG
21898: PUSH
21899: LD_INT 0
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: LD_INT 1
21908: NEG
21909: PUSH
21910: LD_INT 1
21912: NEG
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 1
21920: NEG
21921: PUSH
21922: LD_INT 2
21924: NEG
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: LD_INT 0
21932: PUSH
21933: LD_INT 2
21935: NEG
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 1
21943: PUSH
21944: LD_INT 1
21946: NEG
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: LD_INT 2
21954: PUSH
21955: LD_INT 0
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 2
21964: PUSH
21965: LD_INT 1
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 2
21974: PUSH
21975: LD_INT 2
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 1
21984: PUSH
21985: LD_INT 2
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 0
21994: PUSH
21995: LD_INT 2
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 1
22004: NEG
22005: PUSH
22006: LD_INT 1
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 2
22015: NEG
22016: PUSH
22017: LD_INT 0
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 2
22026: NEG
22027: PUSH
22028: LD_INT 1
22030: NEG
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 2
22038: NEG
22039: PUSH
22040: LD_INT 2
22042: NEG
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
22069: LD_ADDR_VAR 0 23
22073: PUSH
22074: LD_INT 0
22076: PUSH
22077: LD_INT 0
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 0
22086: PUSH
22087: LD_INT 1
22089: NEG
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: LD_INT 0
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 0
22117: PUSH
22118: LD_INT 1
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 1
22127: NEG
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 1
22138: NEG
22139: PUSH
22140: LD_INT 1
22142: NEG
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 1
22150: NEG
22151: PUSH
22152: LD_INT 2
22154: NEG
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 0
22162: PUSH
22163: LD_INT 2
22165: NEG
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 1
22173: PUSH
22174: LD_INT 1
22176: NEG
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 2
22184: PUSH
22185: LD_INT 0
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 2
22194: PUSH
22195: LD_INT 1
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 2
22204: PUSH
22205: LD_INT 2
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 1
22214: PUSH
22215: LD_INT 2
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 0
22224: PUSH
22225: LD_INT 2
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 1
22234: NEG
22235: PUSH
22236: LD_INT 1
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: LD_INT 2
22245: NEG
22246: PUSH
22247: LD_INT 0
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 2
22256: NEG
22257: PUSH
22258: LD_INT 1
22260: NEG
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 2
22268: NEG
22269: PUSH
22270: LD_INT 2
22272: NEG
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 2
22280: NEG
22281: PUSH
22282: LD_INT 3
22284: NEG
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 1
22292: NEG
22293: PUSH
22294: LD_INT 3
22296: NEG
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 1
22304: PUSH
22305: LD_INT 2
22307: NEG
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 2
22315: PUSH
22316: LD_INT 1
22318: NEG
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
22349: LD_ADDR_VAR 0 24
22353: PUSH
22354: LD_INT 0
22356: PUSH
22357: LD_INT 0
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 0
22366: PUSH
22367: LD_INT 1
22369: NEG
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 1
22377: PUSH
22378: LD_INT 0
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 1
22387: PUSH
22388: LD_INT 1
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 0
22397: PUSH
22398: LD_INT 1
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 1
22407: NEG
22408: PUSH
22409: LD_INT 0
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 1
22418: NEG
22419: PUSH
22420: LD_INT 1
22422: NEG
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 1
22430: NEG
22431: PUSH
22432: LD_INT 2
22434: NEG
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 0
22442: PUSH
22443: LD_INT 2
22445: NEG
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 1
22453: PUSH
22454: LD_INT 1
22456: NEG
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 2
22464: PUSH
22465: LD_INT 0
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 2
22474: PUSH
22475: LD_INT 1
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 2
22484: PUSH
22485: LD_INT 2
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 1
22494: PUSH
22495: LD_INT 2
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 0
22504: PUSH
22505: LD_INT 2
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 1
22514: NEG
22515: PUSH
22516: LD_INT 1
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 2
22525: NEG
22526: PUSH
22527: LD_INT 0
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 2
22536: NEG
22537: PUSH
22538: LD_INT 1
22540: NEG
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 2
22548: NEG
22549: PUSH
22550: LD_INT 2
22552: NEG
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 1
22560: PUSH
22561: LD_INT 2
22563: NEG
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 2
22571: PUSH
22572: LD_INT 1
22574: NEG
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 3
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 3
22592: PUSH
22593: LD_INT 2
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
22625: LD_ADDR_VAR 0 25
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: LD_INT 0
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 0
22642: PUSH
22643: LD_INT 1
22645: NEG
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: LD_INT 0
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 1
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 0
22673: PUSH
22674: LD_INT 1
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 1
22683: NEG
22684: PUSH
22685: LD_INT 0
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 1
22694: NEG
22695: PUSH
22696: LD_INT 1
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 1
22706: NEG
22707: PUSH
22708: LD_INT 2
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 0
22718: PUSH
22719: LD_INT 2
22721: NEG
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: LD_INT 1
22732: NEG
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 2
22740: PUSH
22741: LD_INT 0
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 2
22750: PUSH
22751: LD_INT 1
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 2
22760: PUSH
22761: LD_INT 2
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 1
22770: PUSH
22771: LD_INT 2
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 0
22780: PUSH
22781: LD_INT 2
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: LD_INT 1
22790: NEG
22791: PUSH
22792: LD_INT 1
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 2
22801: NEG
22802: PUSH
22803: LD_INT 0
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 2
22812: NEG
22813: PUSH
22814: LD_INT 1
22816: NEG
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 2
22824: NEG
22825: PUSH
22826: LD_INT 2
22828: NEG
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 3
22836: PUSH
22837: LD_INT 1
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 3
22846: PUSH
22847: LD_INT 2
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 2
22856: PUSH
22857: LD_INT 3
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 1
22866: PUSH
22867: LD_INT 3
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22899: LD_ADDR_VAR 0 26
22903: PUSH
22904: LD_INT 0
22906: PUSH
22907: LD_INT 0
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 0
22916: PUSH
22917: LD_INT 1
22919: NEG
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 1
22927: PUSH
22928: LD_INT 0
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 1
22937: PUSH
22938: LD_INT 1
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 0
22947: PUSH
22948: LD_INT 1
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 1
22957: NEG
22958: PUSH
22959: LD_INT 0
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 1
22968: NEG
22969: PUSH
22970: LD_INT 1
22972: NEG
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 1
22980: NEG
22981: PUSH
22982: LD_INT 2
22984: NEG
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 0
22992: PUSH
22993: LD_INT 2
22995: NEG
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 1
23003: PUSH
23004: LD_INT 1
23006: NEG
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 2
23014: PUSH
23015: LD_INT 0
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 2
23024: PUSH
23025: LD_INT 1
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 2
23034: PUSH
23035: LD_INT 2
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: LD_INT 2
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 0
23054: PUSH
23055: LD_INT 2
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 1
23064: NEG
23065: PUSH
23066: LD_INT 1
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 2
23075: NEG
23076: PUSH
23077: LD_INT 0
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 2
23086: NEG
23087: PUSH
23088: LD_INT 1
23090: NEG
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 2
23098: NEG
23099: PUSH
23100: LD_INT 2
23102: NEG
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 2
23110: PUSH
23111: LD_INT 3
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 1
23120: PUSH
23121: LD_INT 3
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 1
23130: NEG
23131: PUSH
23132: LD_INT 2
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 2
23141: NEG
23142: PUSH
23143: LD_INT 1
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23175: LD_ADDR_VAR 0 27
23179: PUSH
23180: LD_INT 0
23182: PUSH
23183: LD_INT 0
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 0
23192: PUSH
23193: LD_INT 1
23195: NEG
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 1
23203: PUSH
23204: LD_INT 0
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 1
23213: PUSH
23214: LD_INT 1
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 0
23223: PUSH
23224: LD_INT 1
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 1
23233: NEG
23234: PUSH
23235: LD_INT 0
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 1
23244: NEG
23245: PUSH
23246: LD_INT 1
23248: NEG
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 1
23256: NEG
23257: PUSH
23258: LD_INT 2
23260: NEG
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 0
23268: PUSH
23269: LD_INT 2
23271: NEG
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 1
23279: PUSH
23280: LD_INT 1
23282: NEG
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 2
23290: PUSH
23291: LD_INT 0
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 2
23300: PUSH
23301: LD_INT 1
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: LD_INT 2
23310: PUSH
23311: LD_INT 2
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 1
23320: PUSH
23321: LD_INT 2
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 0
23330: PUSH
23331: LD_INT 2
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 1
23340: NEG
23341: PUSH
23342: LD_INT 1
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 2
23351: NEG
23352: PUSH
23353: LD_INT 0
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 2
23362: NEG
23363: PUSH
23364: LD_INT 1
23366: NEG
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 2
23374: NEG
23375: PUSH
23376: LD_INT 2
23378: NEG
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 1
23386: NEG
23387: PUSH
23388: LD_INT 2
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 2
23397: NEG
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 3
23408: NEG
23409: PUSH
23410: LD_INT 1
23412: NEG
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 3
23420: NEG
23421: PUSH
23422: LD_INT 2
23424: NEG
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23455: LD_ADDR_VAR 0 28
23459: PUSH
23460: LD_INT 0
23462: PUSH
23463: LD_INT 0
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 0
23472: PUSH
23473: LD_INT 1
23475: NEG
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 1
23483: PUSH
23484: LD_INT 0
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 1
23493: PUSH
23494: LD_INT 1
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 0
23503: PUSH
23504: LD_INT 1
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 1
23513: NEG
23514: PUSH
23515: LD_INT 0
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 1
23524: NEG
23525: PUSH
23526: LD_INT 1
23528: NEG
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 1
23536: NEG
23537: PUSH
23538: LD_INT 2
23540: NEG
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 0
23548: PUSH
23549: LD_INT 2
23551: NEG
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 1
23559: PUSH
23560: LD_INT 1
23562: NEG
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 2
23570: PUSH
23571: LD_INT 0
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 2
23580: PUSH
23581: LD_INT 1
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 2
23590: PUSH
23591: LD_INT 2
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 1
23600: PUSH
23601: LD_INT 2
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 0
23610: PUSH
23611: LD_INT 2
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 1
23620: NEG
23621: PUSH
23622: LD_INT 1
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 2
23631: NEG
23632: PUSH
23633: LD_INT 0
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 2
23642: NEG
23643: PUSH
23644: LD_INT 1
23646: NEG
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 2
23654: NEG
23655: PUSH
23656: LD_INT 2
23658: NEG
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 2
23666: NEG
23667: PUSH
23668: LD_INT 3
23670: NEG
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 1
23678: NEG
23679: PUSH
23680: LD_INT 3
23682: NEG
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 3
23690: NEG
23691: PUSH
23692: LD_INT 1
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 3
23702: NEG
23703: PUSH
23704: LD_INT 2
23706: NEG
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23737: LD_ADDR_VAR 0 29
23741: PUSH
23742: LD_INT 0
23744: PUSH
23745: LD_INT 0
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 0
23754: PUSH
23755: LD_INT 1
23757: NEG
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 1
23765: PUSH
23766: LD_INT 0
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 1
23775: PUSH
23776: LD_INT 1
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 0
23785: PUSH
23786: LD_INT 1
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 1
23795: NEG
23796: PUSH
23797: LD_INT 0
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 1
23806: NEG
23807: PUSH
23808: LD_INT 1
23810: NEG
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 1
23818: NEG
23819: PUSH
23820: LD_INT 2
23822: NEG
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 0
23830: PUSH
23831: LD_INT 2
23833: NEG
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 1
23841: PUSH
23842: LD_INT 1
23844: NEG
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 2
23852: PUSH
23853: LD_INT 0
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 2
23862: PUSH
23863: LD_INT 1
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 1
23872: PUSH
23873: LD_INT 2
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 0
23882: PUSH
23883: LD_INT 2
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 1
23892: NEG
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 2
23903: NEG
23904: PUSH
23905: LD_INT 1
23907: NEG
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 2
23915: NEG
23916: PUSH
23917: LD_INT 2
23919: NEG
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 2
23927: NEG
23928: PUSH
23929: LD_INT 3
23931: NEG
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 2
23939: PUSH
23940: LD_INT 1
23942: NEG
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 3
23950: PUSH
23951: LD_INT 1
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 1
23960: PUSH
23961: LD_INT 3
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: LD_INT 2
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PUSH
23979: LD_INT 3
23981: NEG
23982: PUSH
23983: LD_INT 2
23985: NEG
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24016: LD_ADDR_VAR 0 30
24020: PUSH
24021: LD_INT 0
24023: PUSH
24024: LD_INT 0
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: LD_INT 1
24036: NEG
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 1
24044: PUSH
24045: LD_INT 0
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: LD_INT 1
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 0
24064: PUSH
24065: LD_INT 1
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 1
24074: NEG
24075: PUSH
24076: LD_INT 0
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 1
24085: NEG
24086: PUSH
24087: LD_INT 1
24089: NEG
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 1
24097: NEG
24098: PUSH
24099: LD_INT 2
24101: NEG
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 0
24109: PUSH
24110: LD_INT 2
24112: NEG
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 1
24120: PUSH
24121: LD_INT 1
24123: NEG
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 2
24131: PUSH
24132: LD_INT 0
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 2
24141: PUSH
24142: LD_INT 1
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 2
24151: PUSH
24152: LD_INT 2
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 1
24161: PUSH
24162: LD_INT 2
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 1
24171: NEG
24172: PUSH
24173: LD_INT 1
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 2
24182: NEG
24183: PUSH
24184: LD_INT 0
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 2
24193: NEG
24194: PUSH
24195: LD_INT 1
24197: NEG
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 1
24205: NEG
24206: PUSH
24207: LD_INT 3
24209: NEG
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: LD_INT 1
24217: PUSH
24218: LD_INT 2
24220: NEG
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 3
24228: PUSH
24229: LD_INT 2
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 2
24238: PUSH
24239: LD_INT 3
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 2
24248: NEG
24249: PUSH
24250: LD_INT 1
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 3
24259: NEG
24260: PUSH
24261: LD_INT 1
24263: NEG
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24294: LD_ADDR_VAR 0 31
24298: PUSH
24299: LD_INT 0
24301: PUSH
24302: LD_INT 0
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 0
24311: PUSH
24312: LD_INT 1
24314: NEG
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 1
24322: PUSH
24323: LD_INT 0
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 1
24332: PUSH
24333: LD_INT 1
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 0
24342: PUSH
24343: LD_INT 1
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 1
24352: NEG
24353: PUSH
24354: LD_INT 0
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 1
24363: NEG
24364: PUSH
24365: LD_INT 1
24367: NEG
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 1
24375: NEG
24376: PUSH
24377: LD_INT 2
24379: NEG
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 1
24387: PUSH
24388: LD_INT 1
24390: NEG
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 2
24398: PUSH
24399: LD_INT 0
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 2
24408: PUSH
24409: LD_INT 1
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 2
24418: PUSH
24419: LD_INT 2
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 1
24428: PUSH
24429: LD_INT 2
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: LD_INT 2
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 1
24448: NEG
24449: PUSH
24450: LD_INT 1
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 2
24459: NEG
24460: PUSH
24461: LD_INT 1
24463: NEG
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 2
24471: NEG
24472: PUSH
24473: LD_INT 2
24475: NEG
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 2
24483: NEG
24484: PUSH
24485: LD_INT 3
24487: NEG
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 2
24495: PUSH
24496: LD_INT 1
24498: NEG
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 3
24506: PUSH
24507: LD_INT 1
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 1
24516: PUSH
24517: LD_INT 3
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 1
24526: NEG
24527: PUSH
24528: LD_INT 2
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 3
24537: NEG
24538: PUSH
24539: LD_INT 2
24541: NEG
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24572: LD_ADDR_VAR 0 32
24576: PUSH
24577: LD_INT 0
24579: PUSH
24580: LD_INT 0
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 0
24589: PUSH
24590: LD_INT 1
24592: NEG
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 1
24600: PUSH
24601: LD_INT 0
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 1
24610: PUSH
24611: LD_INT 1
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 0
24620: PUSH
24621: LD_INT 1
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 1
24630: NEG
24631: PUSH
24632: LD_INT 0
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 1
24641: NEG
24642: PUSH
24643: LD_INT 1
24645: NEG
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 1
24653: NEG
24654: PUSH
24655: LD_INT 2
24657: NEG
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 0
24665: PUSH
24666: LD_INT 2
24668: NEG
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 1
24676: PUSH
24677: LD_INT 1
24679: NEG
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 2
24687: PUSH
24688: LD_INT 1
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 2
24697: PUSH
24698: LD_INT 2
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 1
24707: PUSH
24708: LD_INT 2
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 0
24717: PUSH
24718: LD_INT 2
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 1
24727: NEG
24728: PUSH
24729: LD_INT 1
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 2
24738: NEG
24739: PUSH
24740: LD_INT 0
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 2
24749: NEG
24750: PUSH
24751: LD_INT 1
24753: NEG
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 1
24761: NEG
24762: PUSH
24763: LD_INT 3
24765: NEG
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 1
24773: PUSH
24774: LD_INT 2
24776: NEG
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 3
24784: PUSH
24785: LD_INT 2
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 2
24794: PUSH
24795: LD_INT 3
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 2
24804: NEG
24805: PUSH
24806: LD_INT 1
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 3
24815: NEG
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24850: LD_ADDR_VAR 0 33
24854: PUSH
24855: LD_INT 0
24857: PUSH
24858: LD_INT 0
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 0
24867: PUSH
24868: LD_INT 1
24870: NEG
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: PUSH
24879: LD_INT 0
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 1
24888: PUSH
24889: LD_INT 1
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: LD_INT 1
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 1
24908: NEG
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 1
24919: NEG
24920: PUSH
24921: LD_INT 1
24923: NEG
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 1
24931: NEG
24932: PUSH
24933: LD_INT 2
24935: NEG
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 1
24943: PUSH
24944: LD_INT 1
24946: NEG
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 2
24954: PUSH
24955: LD_INT 0
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 2
24964: PUSH
24965: LD_INT 1
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 1
24974: PUSH
24975: LD_INT 2
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 0
24984: PUSH
24985: LD_INT 2
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 1
24994: NEG
24995: PUSH
24996: LD_INT 1
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 2
25005: NEG
25006: PUSH
25007: LD_INT 0
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 2
25016: NEG
25017: PUSH
25018: LD_INT 1
25020: NEG
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 2
25028: NEG
25029: PUSH
25030: LD_INT 2
25032: NEG
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 2
25040: NEG
25041: PUSH
25042: LD_INT 3
25044: NEG
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 2
25052: PUSH
25053: LD_INT 1
25055: NEG
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 3
25063: PUSH
25064: LD_INT 1
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 1
25073: PUSH
25074: LD_INT 3
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 1
25083: NEG
25084: PUSH
25085: LD_INT 2
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 3
25094: NEG
25095: PUSH
25096: LD_INT 2
25098: NEG
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25129: LD_ADDR_VAR 0 34
25133: PUSH
25134: LD_INT 0
25136: PUSH
25137: LD_INT 0
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 0
25146: PUSH
25147: LD_INT 1
25149: NEG
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: LD_INT 0
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 1
25167: PUSH
25168: LD_INT 1
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 0
25177: PUSH
25178: LD_INT 1
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 1
25187: NEG
25188: PUSH
25189: LD_INT 0
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: NEG
25199: PUSH
25200: LD_INT 1
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: NEG
25211: PUSH
25212: LD_INT 2
25214: NEG
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: LD_INT 2
25225: NEG
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: LD_INT 1
25236: NEG
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 2
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 2
25254: PUSH
25255: LD_INT 2
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: LD_INT 2
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 1
25274: NEG
25275: PUSH
25276: LD_INT 1
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 2
25285: NEG
25286: PUSH
25287: LD_INT 0
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 2
25296: NEG
25297: PUSH
25298: LD_INT 1
25300: NEG
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 2
25308: NEG
25309: PUSH
25310: LD_INT 2
25312: NEG
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 1
25320: NEG
25321: PUSH
25322: LD_INT 3
25324: NEG
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: LD_INT 2
25335: NEG
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 3
25343: PUSH
25344: LD_INT 2
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 2
25353: PUSH
25354: LD_INT 3
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 2
25363: NEG
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 3
25374: NEG
25375: PUSH
25376: LD_INT 1
25378: NEG
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25409: LD_ADDR_VAR 0 35
25413: PUSH
25414: LD_INT 0
25416: PUSH
25417: LD_INT 0
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 0
25426: PUSH
25427: LD_INT 1
25429: NEG
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 1
25437: PUSH
25438: LD_INT 0
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 1
25447: PUSH
25448: LD_INT 1
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 0
25457: PUSH
25458: LD_INT 1
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 1
25467: NEG
25468: PUSH
25469: LD_INT 0
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 1
25478: NEG
25479: PUSH
25480: LD_INT 1
25482: NEG
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 2
25490: PUSH
25491: LD_INT 1
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 2
25500: NEG
25501: PUSH
25502: LD_INT 1
25504: NEG
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25521: LD_ADDR_VAR 0 36
25525: PUSH
25526: LD_INT 0
25528: PUSH
25529: LD_INT 0
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 0
25538: PUSH
25539: LD_INT 1
25541: NEG
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 1
25549: PUSH
25550: LD_INT 0
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 1
25559: PUSH
25560: LD_INT 1
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 0
25569: PUSH
25570: LD_INT 1
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 1
25579: NEG
25580: PUSH
25581: LD_INT 0
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 1
25590: NEG
25591: PUSH
25592: LD_INT 1
25594: NEG
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 1
25602: NEG
25603: PUSH
25604: LD_INT 2
25606: NEG
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 1
25614: PUSH
25615: LD_INT 2
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25633: LD_ADDR_VAR 0 37
25637: PUSH
25638: LD_INT 0
25640: PUSH
25641: LD_INT 0
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 0
25650: PUSH
25651: LD_INT 1
25653: NEG
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 1
25661: PUSH
25662: LD_INT 0
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: LD_INT 1
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 0
25681: PUSH
25682: LD_INT 1
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 1
25691: NEG
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 1
25702: NEG
25703: PUSH
25704: LD_INT 1
25706: NEG
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 1
25714: PUSH
25715: LD_INT 1
25717: NEG
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 1
25725: NEG
25726: PUSH
25727: LD_INT 1
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25745: LD_ADDR_VAR 0 38
25749: PUSH
25750: LD_INT 0
25752: PUSH
25753: LD_INT 0
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 0
25762: PUSH
25763: LD_INT 1
25765: NEG
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 1
25773: PUSH
25774: LD_INT 0
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 1
25783: PUSH
25784: LD_INT 1
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 0
25793: PUSH
25794: LD_INT 1
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 1
25803: NEG
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 1
25814: NEG
25815: PUSH
25816: LD_INT 1
25818: NEG
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 2
25826: PUSH
25827: LD_INT 1
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 2
25836: NEG
25837: PUSH
25838: LD_INT 1
25840: NEG
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25857: LD_ADDR_VAR 0 39
25861: PUSH
25862: LD_INT 0
25864: PUSH
25865: LD_INT 0
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 0
25874: PUSH
25875: LD_INT 1
25877: NEG
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 1
25885: PUSH
25886: LD_INT 0
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: LD_INT 1
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 0
25905: PUSH
25906: LD_INT 1
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 1
25915: NEG
25916: PUSH
25917: LD_INT 0
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: PUSH
25928: LD_INT 1
25930: NEG
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: NEG
25939: PUSH
25940: LD_INT 2
25942: NEG
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 1
25950: PUSH
25951: LD_INT 2
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25969: LD_ADDR_VAR 0 40
25973: PUSH
25974: LD_INT 0
25976: PUSH
25977: LD_INT 0
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 0
25986: PUSH
25987: LD_INT 1
25989: NEG
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: LD_INT 0
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 1
26007: PUSH
26008: LD_INT 1
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: LD_INT 1
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 1
26027: NEG
26028: PUSH
26029: LD_INT 0
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 1
26038: NEG
26039: PUSH
26040: LD_INT 1
26042: NEG
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: LD_INT 1
26053: NEG
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 1
26061: NEG
26062: PUSH
26063: LD_INT 1
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26081: LD_ADDR_VAR 0 41
26085: PUSH
26086: LD_INT 0
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 0
26098: PUSH
26099: LD_INT 1
26101: NEG
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 1
26109: PUSH
26110: LD_INT 0
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 1
26119: PUSH
26120: LD_INT 1
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 0
26129: PUSH
26130: LD_INT 1
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 1
26139: NEG
26140: PUSH
26141: LD_INT 0
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 1
26150: NEG
26151: PUSH
26152: LD_INT 1
26154: NEG
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 1
26162: NEG
26163: PUSH
26164: LD_INT 2
26166: NEG
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 1
26174: PUSH
26175: LD_INT 1
26177: NEG
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 2
26185: PUSH
26186: LD_INT 0
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 2
26195: PUSH
26196: LD_INT 1
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 2
26205: PUSH
26206: LD_INT 2
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 1
26215: PUSH
26216: LD_INT 2
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 1
26225: NEG
26226: PUSH
26227: LD_INT 1
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 2
26236: NEG
26237: PUSH
26238: LD_INT 0
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 2
26247: NEG
26248: PUSH
26249: LD_INT 1
26251: NEG
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 2
26259: NEG
26260: PUSH
26261: LD_INT 2
26263: NEG
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 2
26271: NEG
26272: PUSH
26273: LD_INT 3
26275: NEG
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 2
26283: PUSH
26284: LD_INT 1
26286: NEG
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 3
26294: PUSH
26295: LD_INT 0
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 3
26304: PUSH
26305: LD_INT 1
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 3
26314: PUSH
26315: LD_INT 2
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 3
26324: PUSH
26325: LD_INT 3
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 2
26334: PUSH
26335: LD_INT 3
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 2
26344: NEG
26345: PUSH
26346: LD_INT 1
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 3
26355: NEG
26356: PUSH
26357: LD_INT 0
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 3
26366: NEG
26367: PUSH
26368: LD_INT 1
26370: NEG
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 3
26378: NEG
26379: PUSH
26380: LD_INT 2
26382: NEG
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 3
26390: NEG
26391: PUSH
26392: LD_INT 3
26394: NEG
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26431: LD_ADDR_VAR 0 42
26435: PUSH
26436: LD_INT 0
26438: PUSH
26439: LD_INT 0
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 0
26448: PUSH
26449: LD_INT 1
26451: NEG
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 1
26459: PUSH
26460: LD_INT 0
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 1
26469: PUSH
26470: LD_INT 1
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 0
26479: PUSH
26480: LD_INT 1
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 1
26489: NEG
26490: PUSH
26491: LD_INT 0
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 1
26500: NEG
26501: PUSH
26502: LD_INT 1
26504: NEG
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 1
26512: NEG
26513: PUSH
26514: LD_INT 2
26516: NEG
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: LD_INT 2
26527: NEG
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 1
26535: PUSH
26536: LD_INT 1
26538: NEG
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 2
26546: PUSH
26547: LD_INT 1
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 2
26556: PUSH
26557: LD_INT 2
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 1
26566: PUSH
26567: LD_INT 2
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 0
26576: PUSH
26577: LD_INT 2
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 1
26586: NEG
26587: PUSH
26588: LD_INT 1
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 2
26597: NEG
26598: PUSH
26599: LD_INT 1
26601: NEG
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 2
26609: NEG
26610: PUSH
26611: LD_INT 2
26613: NEG
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 2
26621: NEG
26622: PUSH
26623: LD_INT 3
26625: NEG
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 1
26633: NEG
26634: PUSH
26635: LD_INT 3
26637: NEG
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: LD_INT 3
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: LD_INT 2
26659: NEG
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 3
26667: PUSH
26668: LD_INT 2
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 3
26677: PUSH
26678: LD_INT 3
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 2
26687: PUSH
26688: LD_INT 3
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 1
26697: PUSH
26698: LD_INT 3
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 0
26707: PUSH
26708: LD_INT 3
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 1
26717: NEG
26718: PUSH
26719: LD_INT 2
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 3
26728: NEG
26729: PUSH
26730: LD_INT 2
26732: NEG
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 3
26740: NEG
26741: PUSH
26742: LD_INT 3
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26781: LD_ADDR_VAR 0 43
26785: PUSH
26786: LD_INT 0
26788: PUSH
26789: LD_INT 0
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: LD_INT 1
26801: NEG
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 1
26809: PUSH
26810: LD_INT 0
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 1
26819: PUSH
26820: LD_INT 1
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 0
26829: PUSH
26830: LD_INT 1
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 1
26839: NEG
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 1
26850: NEG
26851: PUSH
26852: LD_INT 1
26854: NEG
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 1
26862: NEG
26863: PUSH
26864: LD_INT 2
26866: NEG
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: LD_INT 2
26877: NEG
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 1
26885: PUSH
26886: LD_INT 1
26888: NEG
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 2
26896: PUSH
26897: LD_INT 0
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 2
26906: PUSH
26907: LD_INT 1
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 1
26916: PUSH
26917: LD_INT 2
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 0
26926: PUSH
26927: LD_INT 2
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 1
26936: NEG
26937: PUSH
26938: LD_INT 1
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 2
26947: NEG
26948: PUSH
26949: LD_INT 0
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 2
26958: NEG
26959: PUSH
26960: LD_INT 1
26962: NEG
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 1
26970: NEG
26971: PUSH
26972: LD_INT 3
26974: NEG
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: LD_INT 3
26985: NEG
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: LD_INT 2
26996: NEG
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 2
27004: PUSH
27005: LD_INT 1
27007: NEG
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 3
27015: PUSH
27016: LD_INT 0
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 3
27025: PUSH
27026: LD_INT 1
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: LD_INT 3
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 0
27045: PUSH
27046: LD_INT 3
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: NEG
27056: PUSH
27057: LD_INT 2
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 2
27066: NEG
27067: PUSH
27068: LD_INT 1
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 3
27077: NEG
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 3
27088: NEG
27089: PUSH
27090: LD_INT 1
27092: NEG
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27129: LD_ADDR_VAR 0 44
27133: PUSH
27134: LD_INT 0
27136: PUSH
27137: LD_INT 0
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: LD_INT 1
27149: NEG
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 1
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 1
27167: PUSH
27168: LD_INT 1
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 0
27177: PUSH
27178: LD_INT 1
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: LD_INT 0
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 1
27198: NEG
27199: PUSH
27200: LD_INT 1
27202: NEG
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 1
27210: NEG
27211: PUSH
27212: LD_INT 2
27214: NEG
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 1
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 2
27233: PUSH
27234: LD_INT 0
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 2
27243: PUSH
27244: LD_INT 1
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 2
27253: PUSH
27254: LD_INT 2
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: LD_INT 2
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 1
27273: NEG
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 2
27284: NEG
27285: PUSH
27286: LD_INT 0
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 2
27295: NEG
27296: PUSH
27297: LD_INT 1
27299: NEG
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 2
27307: NEG
27308: PUSH
27309: LD_INT 2
27311: NEG
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 2
27319: NEG
27320: PUSH
27321: LD_INT 3
27323: NEG
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 2
27331: PUSH
27332: LD_INT 1
27334: NEG
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 3
27342: PUSH
27343: LD_INT 0
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 3
27352: PUSH
27353: LD_INT 1
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 3
27362: PUSH
27363: LD_INT 2
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 3
27372: PUSH
27373: LD_INT 3
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 2
27382: PUSH
27383: LD_INT 3
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 2
27392: NEG
27393: PUSH
27394: LD_INT 1
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 3
27403: NEG
27404: PUSH
27405: LD_INT 0
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 3
27414: NEG
27415: PUSH
27416: LD_INT 1
27418: NEG
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 3
27426: NEG
27427: PUSH
27428: LD_INT 2
27430: NEG
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 3
27438: NEG
27439: PUSH
27440: LD_INT 3
27442: NEG
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27479: LD_ADDR_VAR 0 45
27483: PUSH
27484: LD_INT 0
27486: PUSH
27487: LD_INT 0
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 0
27496: PUSH
27497: LD_INT 1
27499: NEG
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 1
27507: PUSH
27508: LD_INT 0
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 1
27517: PUSH
27518: LD_INT 1
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 0
27527: PUSH
27528: LD_INT 1
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 1
27537: NEG
27538: PUSH
27539: LD_INT 0
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 1
27548: NEG
27549: PUSH
27550: LD_INT 1
27552: NEG
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 1
27560: NEG
27561: PUSH
27562: LD_INT 2
27564: NEG
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 0
27572: PUSH
27573: LD_INT 2
27575: NEG
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 1
27583: PUSH
27584: LD_INT 1
27586: NEG
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 2
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 2
27604: PUSH
27605: LD_INT 2
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 1
27614: PUSH
27615: LD_INT 2
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 0
27624: PUSH
27625: LD_INT 2
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 1
27634: NEG
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 2
27645: NEG
27646: PUSH
27647: LD_INT 1
27649: NEG
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 2
27657: NEG
27658: PUSH
27659: LD_INT 2
27661: NEG
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 2
27669: NEG
27670: PUSH
27671: LD_INT 3
27673: NEG
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 1
27681: NEG
27682: PUSH
27683: LD_INT 3
27685: NEG
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 0
27693: PUSH
27694: LD_INT 3
27696: NEG
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 1
27704: PUSH
27705: LD_INT 2
27707: NEG
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 3
27715: PUSH
27716: LD_INT 2
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 3
27725: PUSH
27726: LD_INT 3
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 2
27735: PUSH
27736: LD_INT 3
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: LD_INT 3
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: LD_INT 3
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 1
27765: NEG
27766: PUSH
27767: LD_INT 2
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 3
27776: NEG
27777: PUSH
27778: LD_INT 2
27780: NEG
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 3
27788: NEG
27789: PUSH
27790: LD_INT 3
27792: NEG
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27829: LD_ADDR_VAR 0 46
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: LD_INT 0
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 0
27846: PUSH
27847: LD_INT 1
27849: NEG
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: LD_INT 0
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 1
27867: PUSH
27868: LD_INT 1
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 0
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: LD_INT 0
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 1
27898: NEG
27899: PUSH
27900: LD_INT 1
27902: NEG
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 1
27910: NEG
27911: PUSH
27912: LD_INT 2
27914: NEG
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: LD_INT 2
27925: NEG
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: PUSH
27934: LD_INT 1
27936: NEG
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 2
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 2
27954: PUSH
27955: LD_INT 1
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: LD_INT 2
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: LD_INT 2
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 1
27984: NEG
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 2
27995: NEG
27996: PUSH
27997: LD_INT 0
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 2
28006: NEG
28007: PUSH
28008: LD_INT 1
28010: NEG
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 1
28018: NEG
28019: PUSH
28020: LD_INT 3
28022: NEG
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 0
28030: PUSH
28031: LD_INT 3
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: LD_INT 2
28044: NEG
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 2
28052: PUSH
28053: LD_INT 1
28055: NEG
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 3
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 3
28073: PUSH
28074: LD_INT 1
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 1
28083: PUSH
28084: LD_INT 3
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: LD_INT 3
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 1
28103: NEG
28104: PUSH
28105: LD_INT 2
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 2
28114: NEG
28115: PUSH
28116: LD_INT 1
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 3
28125: NEG
28126: PUSH
28127: LD_INT 0
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 3
28136: NEG
28137: PUSH
28138: LD_INT 1
28140: NEG
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28177: LD_ADDR_VAR 0 47
28181: PUSH
28182: LD_INT 0
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: LD_INT 1
28197: NEG
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 1
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 0
28225: PUSH
28226: LD_INT 1
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 1
28235: NEG
28236: PUSH
28237: LD_INT 0
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 1
28246: NEG
28247: PUSH
28248: LD_INT 1
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 1
28258: NEG
28259: PUSH
28260: LD_INT 2
28262: NEG
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 0
28270: PUSH
28271: LD_INT 2
28273: NEG
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 1
28281: PUSH
28282: LD_INT 1
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 2
28292: NEG
28293: PUSH
28294: LD_INT 1
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 2
28304: NEG
28305: PUSH
28306: LD_INT 2
28308: NEG
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28328: LD_ADDR_VAR 0 48
28332: PUSH
28333: LD_INT 0
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: LD_INT 1
28348: NEG
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 1
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 0
28376: PUSH
28377: LD_INT 1
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 1
28386: NEG
28387: PUSH
28388: LD_INT 0
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 1
28397: NEG
28398: PUSH
28399: LD_INT 1
28401: NEG
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 1
28409: NEG
28410: PUSH
28411: LD_INT 2
28413: NEG
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 0
28421: PUSH
28422: LD_INT 2
28424: NEG
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 1
28432: PUSH
28433: LD_INT 1
28435: NEG
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 2
28443: PUSH
28444: LD_INT 0
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 2
28453: PUSH
28454: LD_INT 1
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28475: LD_ADDR_VAR 0 49
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: LD_INT 0
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 0
28492: PUSH
28493: LD_INT 1
28495: NEG
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: LD_INT 0
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 1
28513: PUSH
28514: LD_INT 1
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 0
28523: PUSH
28524: LD_INT 1
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: LD_INT 0
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 1
28544: NEG
28545: PUSH
28546: LD_INT 1
28548: NEG
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 1
28556: PUSH
28557: LD_INT 1
28559: NEG
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 2
28567: PUSH
28568: LD_INT 0
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 2
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 2
28587: PUSH
28588: LD_INT 2
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 1
28597: PUSH
28598: LD_INT 2
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28619: LD_ADDR_VAR 0 50
28623: PUSH
28624: LD_INT 0
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: LD_INT 1
28639: NEG
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 1
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 1
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 0
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 1
28677: NEG
28678: PUSH
28679: LD_INT 0
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 1
28688: NEG
28689: PUSH
28690: LD_INT 1
28692: NEG
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 2
28700: PUSH
28701: LD_INT 1
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 2
28710: PUSH
28711: LD_INT 2
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: LD_INT 2
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 0
28730: PUSH
28731: LD_INT 2
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 1
28740: NEG
28741: PUSH
28742: LD_INT 1
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28763: LD_ADDR_VAR 0 51
28767: PUSH
28768: LD_INT 0
28770: PUSH
28771: LD_INT 0
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 0
28780: PUSH
28781: LD_INT 1
28783: NEG
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 1
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 1
28801: PUSH
28802: LD_INT 1
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 0
28811: PUSH
28812: LD_INT 1
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 1
28821: NEG
28822: PUSH
28823: LD_INT 0
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 1
28832: NEG
28833: PUSH
28834: LD_INT 1
28836: NEG
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 1
28844: PUSH
28845: LD_INT 2
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 0
28854: PUSH
28855: LD_INT 2
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 1
28864: NEG
28865: PUSH
28866: LD_INT 1
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 2
28875: NEG
28876: PUSH
28877: LD_INT 0
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 2
28886: NEG
28887: PUSH
28888: LD_INT 1
28890: NEG
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28910: LD_ADDR_VAR 0 52
28914: PUSH
28915: LD_INT 0
28917: PUSH
28918: LD_INT 0
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 1
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: LD_INT 1
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 0
28958: PUSH
28959: LD_INT 1
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 1
28968: NEG
28969: PUSH
28970: LD_INT 0
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 1
28979: NEG
28980: PUSH
28981: LD_INT 1
28983: NEG
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 1
28991: NEG
28992: PUSH
28993: LD_INT 2
28995: NEG
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: LD_INT 1
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 2
29014: NEG
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 2
29025: NEG
29026: PUSH
29027: LD_INT 1
29029: NEG
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 2
29037: NEG
29038: PUSH
29039: LD_INT 2
29041: NEG
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29061: LD_ADDR_VAR 0 53
29065: PUSH
29066: LD_INT 0
29068: PUSH
29069: LD_INT 0
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 0
29078: PUSH
29079: LD_INT 1
29081: NEG
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 1
29089: PUSH
29090: LD_INT 0
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 1
29099: PUSH
29100: LD_INT 1
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 0
29109: PUSH
29110: LD_INT 1
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 1
29119: NEG
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 1
29130: NEG
29131: PUSH
29132: LD_INT 1
29134: NEG
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 1
29142: NEG
29143: PUSH
29144: LD_INT 2
29146: NEG
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: LD_INT 2
29157: NEG
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 1
29165: PUSH
29166: LD_INT 1
29168: NEG
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 2
29176: PUSH
29177: LD_INT 0
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 2
29186: PUSH
29187: LD_INT 1
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 2
29196: PUSH
29197: LD_INT 2
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 1
29206: PUSH
29207: LD_INT 2
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 0
29216: PUSH
29217: LD_INT 2
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 1
29226: NEG
29227: PUSH
29228: LD_INT 1
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 2
29237: NEG
29238: PUSH
29239: LD_INT 0
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 2
29248: NEG
29249: PUSH
29250: LD_INT 1
29252: NEG
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 2
29260: NEG
29261: PUSH
29262: LD_INT 2
29264: NEG
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29291: LD_ADDR_VAR 0 54
29295: PUSH
29296: LD_INT 0
29298: PUSH
29299: LD_INT 0
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 0
29308: PUSH
29309: LD_INT 1
29311: NEG
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 1
29319: PUSH
29320: LD_INT 0
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 1
29329: PUSH
29330: LD_INT 1
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 0
29339: PUSH
29340: LD_INT 1
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 1
29349: NEG
29350: PUSH
29351: LD_INT 0
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 1
29360: NEG
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 1
29372: NEG
29373: PUSH
29374: LD_INT 2
29376: NEG
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 0
29384: PUSH
29385: LD_INT 2
29387: NEG
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 1
29395: PUSH
29396: LD_INT 1
29398: NEG
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 2
29406: PUSH
29407: LD_INT 0
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 2
29416: PUSH
29417: LD_INT 1
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 2
29426: PUSH
29427: LD_INT 2
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 1
29436: PUSH
29437: LD_INT 2
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 0
29446: PUSH
29447: LD_INT 2
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 1
29456: NEG
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 2
29467: NEG
29468: PUSH
29469: LD_INT 0
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 2
29478: NEG
29479: PUSH
29480: LD_INT 1
29482: NEG
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 2
29490: NEG
29491: PUSH
29492: LD_INT 2
29494: NEG
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29521: LD_ADDR_VAR 0 55
29525: PUSH
29526: LD_INT 0
29528: PUSH
29529: LD_INT 0
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 0
29538: PUSH
29539: LD_INT 1
29541: NEG
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 1
29549: PUSH
29550: LD_INT 0
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: LD_INT 1
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 0
29569: PUSH
29570: LD_INT 1
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 1
29579: NEG
29580: PUSH
29581: LD_INT 0
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 1
29590: NEG
29591: PUSH
29592: LD_INT 1
29594: NEG
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 1
29602: NEG
29603: PUSH
29604: LD_INT 2
29606: NEG
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 0
29614: PUSH
29615: LD_INT 2
29617: NEG
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 1
29625: PUSH
29626: LD_INT 1
29628: NEG
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 2
29636: PUSH
29637: LD_INT 0
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 2
29646: PUSH
29647: LD_INT 1
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 2
29656: PUSH
29657: LD_INT 2
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: LD_INT 2
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: LD_INT 2
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 1
29686: NEG
29687: PUSH
29688: LD_INT 1
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 2
29697: NEG
29698: PUSH
29699: LD_INT 0
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 2
29708: NEG
29709: PUSH
29710: LD_INT 1
29712: NEG
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 2
29720: NEG
29721: PUSH
29722: LD_INT 2
29724: NEG
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29751: LD_ADDR_VAR 0 56
29755: PUSH
29756: LD_INT 0
29758: PUSH
29759: LD_INT 0
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 0
29768: PUSH
29769: LD_INT 1
29771: NEG
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 1
29779: PUSH
29780: LD_INT 0
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 1
29789: PUSH
29790: LD_INT 1
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 0
29799: PUSH
29800: LD_INT 1
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 1
29809: NEG
29810: PUSH
29811: LD_INT 0
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 1
29820: NEG
29821: PUSH
29822: LD_INT 1
29824: NEG
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 1
29832: NEG
29833: PUSH
29834: LD_INT 2
29836: NEG
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 0
29844: PUSH
29845: LD_INT 2
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: LD_INT 1
29858: NEG
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 2
29866: PUSH
29867: LD_INT 0
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 2
29876: PUSH
29877: LD_INT 1
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 2
29886: PUSH
29887: LD_INT 2
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: PUSH
29897: LD_INT 2
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 0
29906: PUSH
29907: LD_INT 2
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 1
29916: NEG
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 2
29927: NEG
29928: PUSH
29929: LD_INT 0
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 2
29938: NEG
29939: PUSH
29940: LD_INT 1
29942: NEG
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 2
29950: NEG
29951: PUSH
29952: LD_INT 2
29954: NEG
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29981: LD_ADDR_VAR 0 57
29985: PUSH
29986: LD_INT 0
29988: PUSH
29989: LD_INT 0
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 0
29998: PUSH
29999: LD_INT 1
30001: NEG
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 1
30009: PUSH
30010: LD_INT 0
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 1
30019: PUSH
30020: LD_INT 1
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 0
30029: PUSH
30030: LD_INT 1
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 1
30039: NEG
30040: PUSH
30041: LD_INT 0
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 1
30050: NEG
30051: PUSH
30052: LD_INT 1
30054: NEG
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 1
30062: NEG
30063: PUSH
30064: LD_INT 2
30066: NEG
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 0
30074: PUSH
30075: LD_INT 2
30077: NEG
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: LD_INT 1
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 2
30096: PUSH
30097: LD_INT 0
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 2
30106: PUSH
30107: LD_INT 1
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 2
30116: PUSH
30117: LD_INT 2
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 1
30126: PUSH
30127: LD_INT 2
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 0
30136: PUSH
30137: LD_INT 2
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PUSH
30148: LD_INT 1
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 2
30157: NEG
30158: PUSH
30159: LD_INT 0
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 2
30168: NEG
30169: PUSH
30170: LD_INT 1
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 2
30180: NEG
30181: PUSH
30182: LD_INT 2
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30211: LD_ADDR_VAR 0 58
30215: PUSH
30216: LD_INT 0
30218: PUSH
30219: LD_INT 0
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 0
30228: PUSH
30229: LD_INT 1
30231: NEG
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 1
30239: PUSH
30240: LD_INT 0
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 1
30249: PUSH
30250: LD_INT 1
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 0
30259: PUSH
30260: LD_INT 1
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 1
30269: NEG
30270: PUSH
30271: LD_INT 0
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 1
30280: NEG
30281: PUSH
30282: LD_INT 1
30284: NEG
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 1
30292: NEG
30293: PUSH
30294: LD_INT 2
30296: NEG
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 0
30304: PUSH
30305: LD_INT 2
30307: NEG
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 1
30315: PUSH
30316: LD_INT 1
30318: NEG
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 2
30326: PUSH
30327: LD_INT 0
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 2
30336: PUSH
30337: LD_INT 1
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 2
30346: PUSH
30347: LD_INT 2
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: LD_INT 2
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 0
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 2
30387: NEG
30388: PUSH
30389: LD_INT 0
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 2
30398: NEG
30399: PUSH
30400: LD_INT 1
30402: NEG
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 2
30410: NEG
30411: PUSH
30412: LD_INT 2
30414: NEG
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30441: LD_ADDR_VAR 0 59
30445: PUSH
30446: LD_INT 0
30448: PUSH
30449: LD_INT 0
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 0
30458: PUSH
30459: LD_INT 1
30461: NEG
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 1
30469: PUSH
30470: LD_INT 0
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 1
30479: PUSH
30480: LD_INT 1
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 0
30489: PUSH
30490: LD_INT 1
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 1
30499: NEG
30500: PUSH
30501: LD_INT 0
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 1
30510: NEG
30511: PUSH
30512: LD_INT 1
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30529: LD_ADDR_VAR 0 60
30533: PUSH
30534: LD_INT 0
30536: PUSH
30537: LD_INT 0
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 0
30546: PUSH
30547: LD_INT 1
30549: NEG
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 1
30557: PUSH
30558: LD_INT 0
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 1
30567: PUSH
30568: LD_INT 1
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: LD_INT 1
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 1
30587: NEG
30588: PUSH
30589: LD_INT 0
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 1
30598: NEG
30599: PUSH
30600: LD_INT 1
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30617: LD_ADDR_VAR 0 61
30621: PUSH
30622: LD_INT 0
30624: PUSH
30625: LD_INT 0
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 0
30634: PUSH
30635: LD_INT 1
30637: NEG
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 1
30645: PUSH
30646: LD_INT 0
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 1
30655: PUSH
30656: LD_INT 1
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 0
30665: PUSH
30666: LD_INT 1
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 1
30675: NEG
30676: PUSH
30677: LD_INT 0
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 1
30686: NEG
30687: PUSH
30688: LD_INT 1
30690: NEG
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30705: LD_ADDR_VAR 0 62
30709: PUSH
30710: LD_INT 0
30712: PUSH
30713: LD_INT 0
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 0
30722: PUSH
30723: LD_INT 1
30725: NEG
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 1
30733: PUSH
30734: LD_INT 0
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 1
30743: PUSH
30744: LD_INT 1
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: LD_INT 1
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 1
30763: NEG
30764: PUSH
30765: LD_INT 0
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 1
30774: NEG
30775: PUSH
30776: LD_INT 1
30778: NEG
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30793: LD_ADDR_VAR 0 63
30797: PUSH
30798: LD_INT 0
30800: PUSH
30801: LD_INT 0
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 0
30810: PUSH
30811: LD_INT 1
30813: NEG
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 1
30821: PUSH
30822: LD_INT 0
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 1
30831: PUSH
30832: LD_INT 1
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 0
30841: PUSH
30842: LD_INT 1
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 1
30851: NEG
30852: PUSH
30853: LD_INT 0
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 1
30862: NEG
30863: PUSH
30864: LD_INT 1
30866: NEG
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30881: LD_ADDR_VAR 0 64
30885: PUSH
30886: LD_INT 0
30888: PUSH
30889: LD_INT 0
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 0
30898: PUSH
30899: LD_INT 1
30901: NEG
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 1
30909: PUSH
30910: LD_INT 0
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 1
30919: PUSH
30920: LD_INT 1
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 0
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 1
30939: NEG
30940: PUSH
30941: LD_INT 0
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 1
30950: NEG
30951: PUSH
30952: LD_INT 1
30954: NEG
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: ST_TO_ADDR
// end ; 1 :
30969: GO 36866
30971: LD_INT 1
30973: DOUBLE
30974: EQUAL
30975: IFTRUE 30979
30977: GO 33602
30979: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30980: LD_ADDR_VAR 0 11
30984: PUSH
30985: LD_INT 1
30987: NEG
30988: PUSH
30989: LD_INT 3
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 0
30999: PUSH
31000: LD_INT 3
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: PUSH
31011: LD_INT 2
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: LIST
31023: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31024: LD_ADDR_VAR 0 12
31028: PUSH
31029: LD_INT 2
31031: PUSH
31032: LD_INT 1
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 3
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 3
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: LIST
31064: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31065: LD_ADDR_VAR 0 13
31069: PUSH
31070: LD_INT 3
31072: PUSH
31073: LD_INT 2
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 3
31082: PUSH
31083: LD_INT 3
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 2
31092: PUSH
31093: LD_INT 3
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: LIST
31104: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31105: LD_ADDR_VAR 0 14
31109: PUSH
31110: LD_INT 1
31112: PUSH
31113: LD_INT 3
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 0
31122: PUSH
31123: LD_INT 3
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 1
31132: NEG
31133: PUSH
31134: LD_INT 2
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: LIST
31145: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31146: LD_ADDR_VAR 0 15
31150: PUSH
31151: LD_INT 2
31153: NEG
31154: PUSH
31155: LD_INT 1
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 3
31164: NEG
31165: PUSH
31166: LD_INT 0
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 3
31175: NEG
31176: PUSH
31177: LD_INT 1
31179: NEG
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: LIST
31189: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31190: LD_ADDR_VAR 0 16
31194: PUSH
31195: LD_INT 2
31197: NEG
31198: PUSH
31199: LD_INT 3
31201: NEG
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 3
31209: NEG
31210: PUSH
31211: LD_INT 2
31213: NEG
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 3
31221: NEG
31222: PUSH
31223: LD_INT 3
31225: NEG
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: LIST
31235: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31236: LD_ADDR_VAR 0 17
31240: PUSH
31241: LD_INT 1
31243: NEG
31244: PUSH
31245: LD_INT 3
31247: NEG
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 0
31255: PUSH
31256: LD_INT 3
31258: NEG
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 1
31266: PUSH
31267: LD_INT 2
31269: NEG
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: LIST
31279: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31280: LD_ADDR_VAR 0 18
31284: PUSH
31285: LD_INT 2
31287: PUSH
31288: LD_INT 1
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 3
31298: PUSH
31299: LD_INT 0
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 3
31308: PUSH
31309: LD_INT 1
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: LIST
31320: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31321: LD_ADDR_VAR 0 19
31325: PUSH
31326: LD_INT 3
31328: PUSH
31329: LD_INT 2
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 3
31338: PUSH
31339: LD_INT 3
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 2
31348: PUSH
31349: LD_INT 3
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: LIST
31360: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31361: LD_ADDR_VAR 0 20
31365: PUSH
31366: LD_INT 1
31368: PUSH
31369: LD_INT 3
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 0
31378: PUSH
31379: LD_INT 3
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 1
31388: NEG
31389: PUSH
31390: LD_INT 2
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: LIST
31401: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31402: LD_ADDR_VAR 0 21
31406: PUSH
31407: LD_INT 2
31409: NEG
31410: PUSH
31411: LD_INT 1
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 3
31420: NEG
31421: PUSH
31422: LD_INT 0
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 3
31431: NEG
31432: PUSH
31433: LD_INT 1
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: LIST
31445: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31446: LD_ADDR_VAR 0 22
31450: PUSH
31451: LD_INT 2
31453: NEG
31454: PUSH
31455: LD_INT 3
31457: NEG
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 3
31465: NEG
31466: PUSH
31467: LD_INT 2
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 3
31477: NEG
31478: PUSH
31479: LD_INT 3
31481: NEG
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: LIST
31491: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
31492: LD_ADDR_VAR 0 23
31496: PUSH
31497: LD_INT 0
31499: PUSH
31500: LD_INT 3
31502: NEG
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 1
31510: NEG
31511: PUSH
31512: LD_INT 4
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 1
31522: PUSH
31523: LD_INT 3
31525: NEG
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: LIST
31535: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
31536: LD_ADDR_VAR 0 24
31540: PUSH
31541: LD_INT 3
31543: PUSH
31544: LD_INT 0
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 3
31553: PUSH
31554: LD_INT 1
31556: NEG
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 4
31564: PUSH
31565: LD_INT 1
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: LIST
31576: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
31577: LD_ADDR_VAR 0 25
31581: PUSH
31582: LD_INT 3
31584: PUSH
31585: LD_INT 3
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 4
31594: PUSH
31595: LD_INT 3
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 3
31604: PUSH
31605: LD_INT 4
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: LIST
31616: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
31617: LD_ADDR_VAR 0 26
31621: PUSH
31622: LD_INT 0
31624: PUSH
31625: LD_INT 3
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 1
31634: PUSH
31635: LD_INT 4
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 1
31644: NEG
31645: PUSH
31646: LD_INT 3
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: LIST
31657: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
31658: LD_ADDR_VAR 0 27
31662: PUSH
31663: LD_INT 3
31665: NEG
31666: PUSH
31667: LD_INT 0
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 3
31676: NEG
31677: PUSH
31678: LD_INT 1
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 4
31687: NEG
31688: PUSH
31689: LD_INT 1
31691: NEG
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: LIST
31701: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31702: LD_ADDR_VAR 0 28
31706: PUSH
31707: LD_INT 3
31709: NEG
31710: PUSH
31711: LD_INT 3
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 3
31721: NEG
31722: PUSH
31723: LD_INT 4
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 4
31733: NEG
31734: PUSH
31735: LD_INT 3
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: LIST
31747: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31748: LD_ADDR_VAR 0 29
31752: PUSH
31753: LD_INT 1
31755: NEG
31756: PUSH
31757: LD_INT 3
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 0
31767: PUSH
31768: LD_INT 3
31770: NEG
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 1
31778: PUSH
31779: LD_INT 2
31781: NEG
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 1
31789: NEG
31790: PUSH
31791: LD_INT 4
31793: NEG
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: LD_INT 4
31804: NEG
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: LD_INT 3
31815: NEG
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 1
31823: NEG
31824: PUSH
31825: LD_INT 5
31827: NEG
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 0
31835: PUSH
31836: LD_INT 5
31838: NEG
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 1
31846: PUSH
31847: LD_INT 4
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 1
31857: NEG
31858: PUSH
31859: LD_INT 6
31861: NEG
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 0
31869: PUSH
31870: LD_INT 6
31872: NEG
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 1
31880: PUSH
31881: LD_INT 5
31883: NEG
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31903: LD_ADDR_VAR 0 30
31907: PUSH
31908: LD_INT 2
31910: PUSH
31911: LD_INT 1
31913: NEG
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 3
31921: PUSH
31922: LD_INT 0
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 3
31931: PUSH
31932: LD_INT 1
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 3
31941: PUSH
31942: LD_INT 1
31944: NEG
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 4
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 4
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 4
31972: PUSH
31973: LD_INT 1
31975: NEG
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 5
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 5
31993: PUSH
31994: LD_INT 1
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 5
32003: PUSH
32004: LD_INT 1
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 6
32014: PUSH
32015: LD_INT 0
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 6
32024: PUSH
32025: LD_INT 1
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
32046: LD_ADDR_VAR 0 31
32050: PUSH
32051: LD_INT 3
32053: PUSH
32054: LD_INT 2
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 3
32063: PUSH
32064: LD_INT 3
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 2
32073: PUSH
32074: LD_INT 3
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 4
32083: PUSH
32084: LD_INT 3
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 4
32093: PUSH
32094: LD_INT 4
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 3
32103: PUSH
32104: LD_INT 4
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 5
32113: PUSH
32114: LD_INT 4
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 5
32123: PUSH
32124: LD_INT 5
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 4
32133: PUSH
32134: LD_INT 5
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 6
32143: PUSH
32144: LD_INT 5
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 6
32153: PUSH
32154: LD_INT 6
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 5
32163: PUSH
32164: LD_INT 6
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
32185: LD_ADDR_VAR 0 32
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: LD_INT 3
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 0
32202: PUSH
32203: LD_INT 3
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 1
32212: NEG
32213: PUSH
32214: LD_INT 2
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 1
32223: PUSH
32224: LD_INT 4
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 0
32233: PUSH
32234: LD_INT 4
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 1
32243: NEG
32244: PUSH
32245: LD_INT 3
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 1
32254: PUSH
32255: LD_INT 5
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 0
32264: PUSH
32265: LD_INT 5
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 1
32274: NEG
32275: PUSH
32276: LD_INT 4
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: LD_INT 6
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: LD_INT 6
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 1
32305: NEG
32306: PUSH
32307: LD_INT 5
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
32328: LD_ADDR_VAR 0 33
32332: PUSH
32333: LD_INT 2
32335: NEG
32336: PUSH
32337: LD_INT 1
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 3
32346: NEG
32347: PUSH
32348: LD_INT 0
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 3
32357: NEG
32358: PUSH
32359: LD_INT 1
32361: NEG
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 3
32369: NEG
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 4
32380: NEG
32381: PUSH
32382: LD_INT 0
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 4
32391: NEG
32392: PUSH
32393: LD_INT 1
32395: NEG
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 4
32403: NEG
32404: PUSH
32405: LD_INT 1
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 5
32414: NEG
32415: PUSH
32416: LD_INT 0
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 5
32425: NEG
32426: PUSH
32427: LD_INT 1
32429: NEG
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 5
32437: NEG
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 6
32448: NEG
32449: PUSH
32450: LD_INT 0
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 6
32459: NEG
32460: PUSH
32461: LD_INT 1
32463: NEG
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
32483: LD_ADDR_VAR 0 34
32487: PUSH
32488: LD_INT 2
32490: NEG
32491: PUSH
32492: LD_INT 3
32494: NEG
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 3
32502: NEG
32503: PUSH
32504: LD_INT 2
32506: NEG
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 3
32514: NEG
32515: PUSH
32516: LD_INT 3
32518: NEG
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 3
32526: NEG
32527: PUSH
32528: LD_INT 4
32530: NEG
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 4
32538: NEG
32539: PUSH
32540: LD_INT 3
32542: NEG
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 4
32550: NEG
32551: PUSH
32552: LD_INT 4
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 4
32562: NEG
32563: PUSH
32564: LD_INT 5
32566: NEG
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 5
32574: NEG
32575: PUSH
32576: LD_INT 4
32578: NEG
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 5
32586: NEG
32587: PUSH
32588: LD_INT 5
32590: NEG
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 5
32598: NEG
32599: PUSH
32600: LD_INT 6
32602: NEG
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 6
32610: NEG
32611: PUSH
32612: LD_INT 5
32614: NEG
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 6
32622: NEG
32623: PUSH
32624: LD_INT 6
32626: NEG
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
32646: LD_ADDR_VAR 0 41
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: LD_INT 2
32656: NEG
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 1
32664: NEG
32665: PUSH
32666: LD_INT 3
32668: NEG
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 1
32676: PUSH
32677: LD_INT 2
32679: NEG
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: LIST
32689: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32690: LD_ADDR_VAR 0 42
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 2
32707: PUSH
32708: LD_INT 1
32710: NEG
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 3
32718: PUSH
32719: LD_INT 1
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: LIST
32730: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32731: LD_ADDR_VAR 0 43
32735: PUSH
32736: LD_INT 2
32738: PUSH
32739: LD_INT 2
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 3
32748: PUSH
32749: LD_INT 2
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 2
32758: PUSH
32759: LD_INT 3
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: LIST
32770: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32771: LD_ADDR_VAR 0 44
32775: PUSH
32776: LD_INT 0
32778: PUSH
32779: LD_INT 2
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 1
32788: PUSH
32789: LD_INT 3
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 1
32798: NEG
32799: PUSH
32800: LD_INT 2
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: LIST
32811: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32812: LD_ADDR_VAR 0 45
32816: PUSH
32817: LD_INT 2
32819: NEG
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 2
32830: NEG
32831: PUSH
32832: LD_INT 1
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 3
32841: NEG
32842: PUSH
32843: LD_INT 1
32845: NEG
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: LIST
32855: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32856: LD_ADDR_VAR 0 46
32860: PUSH
32861: LD_INT 2
32863: NEG
32864: PUSH
32865: LD_INT 2
32867: NEG
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 2
32875: NEG
32876: PUSH
32877: LD_INT 3
32879: NEG
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 3
32887: NEG
32888: PUSH
32889: LD_INT 2
32891: NEG
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: LIST
32901: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32902: LD_ADDR_VAR 0 47
32906: PUSH
32907: LD_INT 2
32909: NEG
32910: PUSH
32911: LD_INT 3
32913: NEG
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 1
32921: NEG
32922: PUSH
32923: LD_INT 3
32925: NEG
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32935: LD_ADDR_VAR 0 48
32939: PUSH
32940: LD_INT 1
32942: PUSH
32943: LD_INT 2
32945: NEG
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 2
32953: PUSH
32954: LD_INT 1
32956: NEG
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32966: LD_ADDR_VAR 0 49
32970: PUSH
32971: LD_INT 3
32973: PUSH
32974: LD_INT 1
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 3
32983: PUSH
32984: LD_INT 2
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32995: LD_ADDR_VAR 0 50
32999: PUSH
33000: LD_INT 2
33002: PUSH
33003: LD_INT 3
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 1
33012: PUSH
33013: LD_INT 3
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33024: LD_ADDR_VAR 0 51
33028: PUSH
33029: LD_INT 1
33031: NEG
33032: PUSH
33033: LD_INT 2
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 2
33042: NEG
33043: PUSH
33044: LD_INT 1
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33055: LD_ADDR_VAR 0 52
33059: PUSH
33060: LD_INT 3
33062: NEG
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 3
33074: NEG
33075: PUSH
33076: LD_INT 2
33078: NEG
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33088: LD_ADDR_VAR 0 53
33092: PUSH
33093: LD_INT 1
33095: NEG
33096: PUSH
33097: LD_INT 3
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: LD_INT 3
33110: NEG
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 1
33118: PUSH
33119: LD_INT 2
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: LIST
33131: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33132: LD_ADDR_VAR 0 54
33136: PUSH
33137: LD_INT 2
33139: PUSH
33140: LD_INT 1
33142: NEG
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 3
33150: PUSH
33151: LD_INT 0
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 3
33160: PUSH
33161: LD_INT 1
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: LIST
33172: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33173: LD_ADDR_VAR 0 55
33177: PUSH
33178: LD_INT 3
33180: PUSH
33181: LD_INT 2
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 3
33190: PUSH
33191: LD_INT 3
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 2
33200: PUSH
33201: LD_INT 3
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: LIST
33212: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33213: LD_ADDR_VAR 0 56
33217: PUSH
33218: LD_INT 1
33220: PUSH
33221: LD_INT 3
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 0
33230: PUSH
33231: LD_INT 3
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 1
33240: NEG
33241: PUSH
33242: LD_INT 2
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: LIST
33253: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33254: LD_ADDR_VAR 0 57
33258: PUSH
33259: LD_INT 2
33261: NEG
33262: PUSH
33263: LD_INT 1
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 3
33272: NEG
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 3
33283: NEG
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: LIST
33297: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33298: LD_ADDR_VAR 0 58
33302: PUSH
33303: LD_INT 2
33305: NEG
33306: PUSH
33307: LD_INT 3
33309: NEG
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 3
33317: NEG
33318: PUSH
33319: LD_INT 2
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 3
33329: NEG
33330: PUSH
33331: LD_INT 3
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: LIST
33343: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
33344: LD_ADDR_VAR 0 59
33348: PUSH
33349: LD_INT 1
33351: NEG
33352: PUSH
33353: LD_INT 2
33355: NEG
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 0
33363: PUSH
33364: LD_INT 2
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 1
33374: PUSH
33375: LD_INT 1
33377: NEG
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: LIST
33387: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33388: LD_ADDR_VAR 0 60
33392: PUSH
33393: LD_INT 1
33395: PUSH
33396: LD_INT 1
33398: NEG
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 2
33406: PUSH
33407: LD_INT 0
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 2
33416: PUSH
33417: LD_INT 1
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: LIST
33428: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33429: LD_ADDR_VAR 0 61
33433: PUSH
33434: LD_INT 2
33436: PUSH
33437: LD_INT 1
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 2
33446: PUSH
33447: LD_INT 2
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 1
33456: PUSH
33457: LD_INT 2
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: LIST
33468: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33469: LD_ADDR_VAR 0 62
33473: PUSH
33474: LD_INT 1
33476: PUSH
33477: LD_INT 2
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: LD_INT 2
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 1
33496: NEG
33497: PUSH
33498: LD_INT 1
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: LIST
33509: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33510: LD_ADDR_VAR 0 63
33514: PUSH
33515: LD_INT 1
33517: NEG
33518: PUSH
33519: LD_INT 1
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 2
33528: NEG
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 2
33539: NEG
33540: PUSH
33541: LD_INT 1
33543: NEG
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33554: LD_ADDR_VAR 0 64
33558: PUSH
33559: LD_INT 1
33561: NEG
33562: PUSH
33563: LD_INT 2
33565: NEG
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 2
33573: NEG
33574: PUSH
33575: LD_INT 1
33577: NEG
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 2
33585: NEG
33586: PUSH
33587: LD_INT 2
33589: NEG
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: LIST
33599: ST_TO_ADDR
// end ; 2 :
33600: GO 36866
33602: LD_INT 2
33604: DOUBLE
33605: EQUAL
33606: IFTRUE 33610
33608: GO 36865
33610: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
33611: LD_ADDR_VAR 0 29
33615: PUSH
33616: LD_INT 4
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 4
33628: PUSH
33629: LD_INT 1
33631: NEG
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 5
33639: PUSH
33640: LD_INT 0
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 5
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 4
33659: PUSH
33660: LD_INT 1
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 3
33669: PUSH
33670: LD_INT 0
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 3
33679: PUSH
33680: LD_INT 1
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 3
33690: PUSH
33691: LD_INT 2
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 5
33701: PUSH
33702: LD_INT 2
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 3
33711: PUSH
33712: LD_INT 3
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 3
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 4
33731: PUSH
33732: LD_INT 3
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 4
33741: PUSH
33742: LD_INT 4
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 3
33751: PUSH
33752: LD_INT 4
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 2
33761: PUSH
33762: LD_INT 3
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 2
33771: PUSH
33772: LD_INT 2
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 4
33781: PUSH
33782: LD_INT 2
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 2
33791: PUSH
33792: LD_INT 4
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 0
33801: PUSH
33802: LD_INT 4
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 0
33811: PUSH
33812: LD_INT 3
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 1
33821: PUSH
33822: LD_INT 4
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 1
33831: PUSH
33832: LD_INT 5
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 0
33841: PUSH
33842: LD_INT 5
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 1
33851: NEG
33852: PUSH
33853: LD_INT 4
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 1
33862: NEG
33863: PUSH
33864: LD_INT 3
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 2
33873: PUSH
33874: LD_INT 5
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 2
33883: NEG
33884: PUSH
33885: LD_INT 3
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 3
33894: NEG
33895: PUSH
33896: LD_INT 0
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 3
33905: NEG
33906: PUSH
33907: LD_INT 1
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 2
33917: NEG
33918: PUSH
33919: LD_INT 0
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 2
33928: NEG
33929: PUSH
33930: LD_INT 1
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 3
33939: NEG
33940: PUSH
33941: LD_INT 1
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 4
33950: NEG
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 4
33961: NEG
33962: PUSH
33963: LD_INT 1
33965: NEG
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 4
33973: NEG
33974: PUSH
33975: LD_INT 2
33977: NEG
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 2
33985: NEG
33986: PUSH
33987: LD_INT 2
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 4
33996: NEG
33997: PUSH
33998: LD_INT 4
34000: NEG
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 4
34008: NEG
34009: PUSH
34010: LD_INT 5
34012: NEG
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 3
34020: NEG
34021: PUSH
34022: LD_INT 4
34024: NEG
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 3
34032: NEG
34033: PUSH
34034: LD_INT 3
34036: NEG
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 4
34044: NEG
34045: PUSH
34046: LD_INT 3
34048: NEG
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 5
34056: NEG
34057: PUSH
34058: LD_INT 4
34060: NEG
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 5
34068: NEG
34069: PUSH
34070: LD_INT 5
34072: NEG
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 3
34080: NEG
34081: PUSH
34082: LD_INT 5
34084: NEG
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 5
34092: NEG
34093: PUSH
34094: LD_INT 3
34096: NEG
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
34149: LD_ADDR_VAR 0 30
34153: PUSH
34154: LD_INT 4
34156: PUSH
34157: LD_INT 4
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 4
34166: PUSH
34167: LD_INT 3
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 5
34176: PUSH
34177: LD_INT 4
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 5
34186: PUSH
34187: LD_INT 5
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 4
34196: PUSH
34197: LD_INT 5
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 3
34206: PUSH
34207: LD_INT 4
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 3
34216: PUSH
34217: LD_INT 3
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 5
34226: PUSH
34227: LD_INT 3
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 3
34236: PUSH
34237: LD_INT 5
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: LD_INT 3
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 0
34256: PUSH
34257: LD_INT 2
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 1
34266: PUSH
34267: LD_INT 3
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 1
34276: PUSH
34277: LD_INT 4
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 0
34286: PUSH
34287: LD_INT 4
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 1
34296: NEG
34297: PUSH
34298: LD_INT 3
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 1
34307: NEG
34308: PUSH
34309: LD_INT 2
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 2
34318: PUSH
34319: LD_INT 4
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 2
34328: NEG
34329: PUSH
34330: LD_INT 2
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 4
34339: NEG
34340: PUSH
34341: LD_INT 0
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 4
34350: NEG
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 3
34362: NEG
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 3
34373: NEG
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 4
34384: NEG
34385: PUSH
34386: LD_INT 1
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 5
34395: NEG
34396: PUSH
34397: LD_INT 0
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 5
34406: NEG
34407: PUSH
34408: LD_INT 1
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 5
34418: NEG
34419: PUSH
34420: LD_INT 2
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 3
34430: NEG
34431: PUSH
34432: LD_INT 2
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 3
34441: NEG
34442: PUSH
34443: LD_INT 3
34445: NEG
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 3
34453: NEG
34454: PUSH
34455: LD_INT 4
34457: NEG
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 2
34465: NEG
34466: PUSH
34467: LD_INT 3
34469: NEG
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 2
34477: NEG
34478: PUSH
34479: LD_INT 2
34481: NEG
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 3
34489: NEG
34490: PUSH
34491: LD_INT 2
34493: NEG
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 4
34501: NEG
34502: PUSH
34503: LD_INT 3
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 4
34513: NEG
34514: PUSH
34515: LD_INT 4
34517: NEG
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 2
34525: NEG
34526: PUSH
34527: LD_INT 4
34529: NEG
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 4
34537: NEG
34538: PUSH
34539: LD_INT 2
34541: NEG
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 0
34549: PUSH
34550: LD_INT 4
34552: NEG
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 0
34560: PUSH
34561: LD_INT 5
34563: NEG
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 1
34571: PUSH
34572: LD_INT 4
34574: NEG
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 1
34582: PUSH
34583: LD_INT 3
34585: NEG
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: LD_INT 3
34596: NEG
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 1
34604: NEG
34605: PUSH
34606: LD_INT 4
34608: NEG
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 1
34616: NEG
34617: PUSH
34618: LD_INT 5
34620: NEG
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 2
34628: PUSH
34629: LD_INT 3
34631: NEG
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 2
34639: NEG
34640: PUSH
34641: LD_INT 5
34643: NEG
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34696: LD_ADDR_VAR 0 31
34700: PUSH
34701: LD_INT 0
34703: PUSH
34704: LD_INT 4
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 0
34713: PUSH
34714: LD_INT 3
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 1
34723: PUSH
34724: LD_INT 4
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 1
34733: PUSH
34734: LD_INT 5
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 0
34743: PUSH
34744: LD_INT 5
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 1
34753: NEG
34754: PUSH
34755: LD_INT 4
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 1
34764: NEG
34765: PUSH
34766: LD_INT 3
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: LD_INT 5
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 2
34785: NEG
34786: PUSH
34787: LD_INT 3
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 3
34796: NEG
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 3
34807: NEG
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 2
34819: NEG
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 2
34830: NEG
34831: PUSH
34832: LD_INT 1
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 3
34841: NEG
34842: PUSH
34843: LD_INT 1
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 4
34852: NEG
34853: PUSH
34854: LD_INT 0
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 4
34863: NEG
34864: PUSH
34865: LD_INT 1
34867: NEG
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 4
34875: NEG
34876: PUSH
34877: LD_INT 2
34879: NEG
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 2
34887: NEG
34888: PUSH
34889: LD_INT 2
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 4
34898: NEG
34899: PUSH
34900: LD_INT 4
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 4
34910: NEG
34911: PUSH
34912: LD_INT 5
34914: NEG
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 3
34922: NEG
34923: PUSH
34924: LD_INT 4
34926: NEG
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 3
34934: NEG
34935: PUSH
34936: LD_INT 3
34938: NEG
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 4
34946: NEG
34947: PUSH
34948: LD_INT 3
34950: NEG
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 5
34958: NEG
34959: PUSH
34960: LD_INT 4
34962: NEG
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 5
34970: NEG
34971: PUSH
34972: LD_INT 5
34974: NEG
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 3
34982: NEG
34983: PUSH
34984: LD_INT 5
34986: NEG
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 5
34994: NEG
34995: PUSH
34996: LD_INT 3
34998: NEG
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: LD_INT 3
35009: NEG
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 4
35020: NEG
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 1
35028: PUSH
35029: LD_INT 3
35031: NEG
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 1
35039: PUSH
35040: LD_INT 2
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 0
35050: PUSH
35051: LD_INT 2
35053: NEG
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 1
35061: NEG
35062: PUSH
35063: LD_INT 3
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: LD_INT 4
35077: NEG
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 2
35085: PUSH
35086: LD_INT 2
35088: NEG
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 2
35096: NEG
35097: PUSH
35098: LD_INT 4
35100: NEG
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 4
35108: PUSH
35109: LD_INT 0
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 4
35118: PUSH
35119: LD_INT 1
35121: NEG
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 5
35129: PUSH
35130: LD_INT 0
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 5
35139: PUSH
35140: LD_INT 1
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 4
35149: PUSH
35150: LD_INT 1
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 3
35159: PUSH
35160: LD_INT 0
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 3
35169: PUSH
35170: LD_INT 1
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 3
35180: PUSH
35181: LD_INT 2
35183: NEG
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 5
35191: PUSH
35192: LD_INT 2
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
35246: LD_ADDR_VAR 0 32
35250: PUSH
35251: LD_INT 4
35253: NEG
35254: PUSH
35255: LD_INT 0
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 4
35264: NEG
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 3
35276: NEG
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 3
35287: NEG
35288: PUSH
35289: LD_INT 1
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 4
35298: NEG
35299: PUSH
35300: LD_INT 1
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 5
35309: NEG
35310: PUSH
35311: LD_INT 0
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 5
35320: NEG
35321: PUSH
35322: LD_INT 1
35324: NEG
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 5
35332: NEG
35333: PUSH
35334: LD_INT 2
35336: NEG
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 3
35344: NEG
35345: PUSH
35346: LD_INT 2
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 3
35355: NEG
35356: PUSH
35357: LD_INT 3
35359: NEG
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 3
35367: NEG
35368: PUSH
35369: LD_INT 4
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 2
35379: NEG
35380: PUSH
35381: LD_INT 3
35383: NEG
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 2
35391: NEG
35392: PUSH
35393: LD_INT 2
35395: NEG
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 3
35403: NEG
35404: PUSH
35405: LD_INT 2
35407: NEG
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 4
35415: NEG
35416: PUSH
35417: LD_INT 3
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 4
35427: NEG
35428: PUSH
35429: LD_INT 4
35431: NEG
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 2
35439: NEG
35440: PUSH
35441: LD_INT 4
35443: NEG
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 4
35451: NEG
35452: PUSH
35453: LD_INT 2
35455: NEG
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 0
35463: PUSH
35464: LD_INT 4
35466: NEG
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 0
35474: PUSH
35475: LD_INT 5
35477: NEG
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 1
35485: PUSH
35486: LD_INT 4
35488: NEG
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 1
35496: PUSH
35497: LD_INT 3
35499: NEG
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: LD_INT 3
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: NEG
35519: PUSH
35520: LD_INT 4
35522: NEG
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 1
35530: NEG
35531: PUSH
35532: LD_INT 5
35534: NEG
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 2
35542: PUSH
35543: LD_INT 3
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 2
35553: NEG
35554: PUSH
35555: LD_INT 5
35557: NEG
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 3
35565: PUSH
35566: LD_INT 0
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 3
35575: PUSH
35576: LD_INT 1
35578: NEG
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 4
35586: PUSH
35587: LD_INT 0
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 4
35596: PUSH
35597: LD_INT 1
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 3
35606: PUSH
35607: LD_INT 1
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 2
35616: PUSH
35617: LD_INT 0
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 2
35626: PUSH
35627: LD_INT 1
35629: NEG
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 2
35637: PUSH
35638: LD_INT 2
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 4
35648: PUSH
35649: LD_INT 2
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 4
35658: PUSH
35659: LD_INT 4
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 4
35668: PUSH
35669: LD_INT 3
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 5
35678: PUSH
35679: LD_INT 4
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 5
35688: PUSH
35689: LD_INT 5
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 4
35698: PUSH
35699: LD_INT 5
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 3
35708: PUSH
35709: LD_INT 4
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 3
35718: PUSH
35719: LD_INT 3
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 5
35728: PUSH
35729: LD_INT 3
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 3
35738: PUSH
35739: LD_INT 5
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35793: LD_ADDR_VAR 0 33
35797: PUSH
35798: LD_INT 4
35800: NEG
35801: PUSH
35802: LD_INT 4
35804: NEG
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 4
35812: NEG
35813: PUSH
35814: LD_INT 5
35816: NEG
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 3
35824: NEG
35825: PUSH
35826: LD_INT 4
35828: NEG
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 3
35836: NEG
35837: PUSH
35838: LD_INT 3
35840: NEG
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 4
35848: NEG
35849: PUSH
35850: LD_INT 3
35852: NEG
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 5
35860: NEG
35861: PUSH
35862: LD_INT 4
35864: NEG
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 5
35872: NEG
35873: PUSH
35874: LD_INT 5
35876: NEG
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 3
35884: NEG
35885: PUSH
35886: LD_INT 5
35888: NEG
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 5
35896: NEG
35897: PUSH
35898: LD_INT 3
35900: NEG
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: LD_INT 3
35911: NEG
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 0
35919: PUSH
35920: LD_INT 4
35922: NEG
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 1
35930: PUSH
35931: LD_INT 3
35933: NEG
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 1
35941: PUSH
35942: LD_INT 2
35944: NEG
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: LD_INT 2
35955: NEG
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 1
35963: NEG
35964: PUSH
35965: LD_INT 3
35967: NEG
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 1
35975: NEG
35976: PUSH
35977: LD_INT 4
35979: NEG
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 2
35987: PUSH
35988: LD_INT 2
35990: NEG
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 2
35998: NEG
35999: PUSH
36000: LD_INT 4
36002: NEG
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 4
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 4
36020: PUSH
36021: LD_INT 1
36023: NEG
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 5
36031: PUSH
36032: LD_INT 0
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 5
36041: PUSH
36042: LD_INT 1
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 4
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 3
36061: PUSH
36062: LD_INT 0
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 3
36071: PUSH
36072: LD_INT 1
36074: NEG
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 3
36082: PUSH
36083: LD_INT 2
36085: NEG
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 5
36093: PUSH
36094: LD_INT 2
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 3
36103: PUSH
36104: LD_INT 3
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 3
36113: PUSH
36114: LD_INT 2
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 4
36123: PUSH
36124: LD_INT 3
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 4
36133: PUSH
36134: LD_INT 4
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 3
36143: PUSH
36144: LD_INT 4
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 2
36153: PUSH
36154: LD_INT 3
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 2
36163: PUSH
36164: LD_INT 2
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 4
36173: PUSH
36174: LD_INT 2
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 2
36183: PUSH
36184: LD_INT 4
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 4
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 0
36203: PUSH
36204: LD_INT 3
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 1
36213: PUSH
36214: LD_INT 4
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 1
36223: PUSH
36224: LD_INT 5
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 0
36233: PUSH
36234: LD_INT 5
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 1
36243: NEG
36244: PUSH
36245: LD_INT 4
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: LD_INT 3
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 2
36265: PUSH
36266: LD_INT 5
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 2
36275: NEG
36276: PUSH
36277: LD_INT 3
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
36331: LD_ADDR_VAR 0 34
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: LD_INT 4
36341: NEG
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: LD_INT 5
36352: NEG
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: LD_INT 4
36363: NEG
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: LD_INT 3
36374: NEG
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: LD_INT 3
36385: NEG
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 1
36393: NEG
36394: PUSH
36395: LD_INT 4
36397: NEG
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 1
36405: NEG
36406: PUSH
36407: LD_INT 5
36409: NEG
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 2
36417: PUSH
36418: LD_INT 3
36420: NEG
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 2
36428: NEG
36429: PUSH
36430: LD_INT 5
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 3
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 3
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 4
36461: PUSH
36462: LD_INT 0
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 4
36471: PUSH
36472: LD_INT 1
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 3
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 2
36491: PUSH
36492: LD_INT 0
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 2
36501: PUSH
36502: LD_INT 1
36504: NEG
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 2
36512: PUSH
36513: LD_INT 2
36515: NEG
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 4
36523: PUSH
36524: LD_INT 2
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 4
36533: PUSH
36534: LD_INT 4
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 4
36543: PUSH
36544: LD_INT 3
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 5
36553: PUSH
36554: LD_INT 4
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 5
36563: PUSH
36564: LD_INT 5
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 4
36573: PUSH
36574: LD_INT 5
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 3
36583: PUSH
36584: LD_INT 4
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 3
36593: PUSH
36594: LD_INT 3
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 5
36603: PUSH
36604: LD_INT 3
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 3
36613: PUSH
36614: LD_INT 5
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: LD_INT 3
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 0
36633: PUSH
36634: LD_INT 2
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: LD_INT 3
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: LD_INT 4
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: LD_INT 4
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 1
36673: NEG
36674: PUSH
36675: LD_INT 3
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 1
36684: NEG
36685: PUSH
36686: LD_INT 2
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 2
36695: PUSH
36696: LD_INT 4
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 2
36705: NEG
36706: PUSH
36707: LD_INT 2
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 4
36716: NEG
36717: PUSH
36718: LD_INT 0
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 4
36727: NEG
36728: PUSH
36729: LD_INT 1
36731: NEG
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 3
36739: NEG
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 3
36750: NEG
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 4
36761: NEG
36762: PUSH
36763: LD_INT 1
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 5
36772: NEG
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 5
36783: NEG
36784: PUSH
36785: LD_INT 1
36787: NEG
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 5
36795: NEG
36796: PUSH
36797: LD_INT 2
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 3
36807: NEG
36808: PUSH
36809: LD_INT 2
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: ST_TO_ADDR
// end ; end ;
36863: GO 36866
36865: POP
// case btype of b_depot , b_warehouse :
36866: LD_VAR 0 1
36870: PUSH
36871: LD_INT 0
36873: DOUBLE
36874: EQUAL
36875: IFTRUE 36885
36877: LD_INT 1
36879: DOUBLE
36880: EQUAL
36881: IFTRUE 36885
36883: GO 37086
36885: POP
// case nation of nation_american :
36886: LD_VAR 0 5
36890: PUSH
36891: LD_INT 1
36893: DOUBLE
36894: EQUAL
36895: IFTRUE 36899
36897: GO 36955
36899: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
36900: LD_ADDR_VAR 0 9
36904: PUSH
36905: LD_VAR 0 11
36909: PUSH
36910: LD_VAR 0 12
36914: PUSH
36915: LD_VAR 0 13
36919: PUSH
36920: LD_VAR 0 14
36924: PUSH
36925: LD_VAR 0 15
36929: PUSH
36930: LD_VAR 0 16
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: PUSH
36943: LD_VAR 0 4
36947: PUSH
36948: LD_INT 1
36950: PLUS
36951: ARRAY
36952: ST_TO_ADDR
36953: GO 37084
36955: LD_INT 2
36957: DOUBLE
36958: EQUAL
36959: IFTRUE 36963
36961: GO 37019
36963: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36964: LD_ADDR_VAR 0 9
36968: PUSH
36969: LD_VAR 0 17
36973: PUSH
36974: LD_VAR 0 18
36978: PUSH
36979: LD_VAR 0 19
36983: PUSH
36984: LD_VAR 0 20
36988: PUSH
36989: LD_VAR 0 21
36993: PUSH
36994: LD_VAR 0 22
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: PUSH
37007: LD_VAR 0 4
37011: PUSH
37012: LD_INT 1
37014: PLUS
37015: ARRAY
37016: ST_TO_ADDR
37017: GO 37084
37019: LD_INT 3
37021: DOUBLE
37022: EQUAL
37023: IFTRUE 37027
37025: GO 37083
37027: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
37028: LD_ADDR_VAR 0 9
37032: PUSH
37033: LD_VAR 0 23
37037: PUSH
37038: LD_VAR 0 24
37042: PUSH
37043: LD_VAR 0 25
37047: PUSH
37048: LD_VAR 0 26
37052: PUSH
37053: LD_VAR 0 27
37057: PUSH
37058: LD_VAR 0 28
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: PUSH
37071: LD_VAR 0 4
37075: PUSH
37076: LD_INT 1
37078: PLUS
37079: ARRAY
37080: ST_TO_ADDR
37081: GO 37084
37083: POP
37084: GO 37639
37086: LD_INT 2
37088: DOUBLE
37089: EQUAL
37090: IFTRUE 37100
37092: LD_INT 3
37094: DOUBLE
37095: EQUAL
37096: IFTRUE 37100
37098: GO 37156
37100: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
37101: LD_ADDR_VAR 0 9
37105: PUSH
37106: LD_VAR 0 29
37110: PUSH
37111: LD_VAR 0 30
37115: PUSH
37116: LD_VAR 0 31
37120: PUSH
37121: LD_VAR 0 32
37125: PUSH
37126: LD_VAR 0 33
37130: PUSH
37131: LD_VAR 0 34
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: PUSH
37144: LD_VAR 0 4
37148: PUSH
37149: LD_INT 1
37151: PLUS
37152: ARRAY
37153: ST_TO_ADDR
37154: GO 37639
37156: LD_INT 16
37158: DOUBLE
37159: EQUAL
37160: IFTRUE 37218
37162: LD_INT 17
37164: DOUBLE
37165: EQUAL
37166: IFTRUE 37218
37168: LD_INT 18
37170: DOUBLE
37171: EQUAL
37172: IFTRUE 37218
37174: LD_INT 19
37176: DOUBLE
37177: EQUAL
37178: IFTRUE 37218
37180: LD_INT 22
37182: DOUBLE
37183: EQUAL
37184: IFTRUE 37218
37186: LD_INT 20
37188: DOUBLE
37189: EQUAL
37190: IFTRUE 37218
37192: LD_INT 21
37194: DOUBLE
37195: EQUAL
37196: IFTRUE 37218
37198: LD_INT 23
37200: DOUBLE
37201: EQUAL
37202: IFTRUE 37218
37204: LD_INT 24
37206: DOUBLE
37207: EQUAL
37208: IFTRUE 37218
37210: LD_INT 25
37212: DOUBLE
37213: EQUAL
37214: IFTRUE 37218
37216: GO 37274
37218: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
37219: LD_ADDR_VAR 0 9
37223: PUSH
37224: LD_VAR 0 35
37228: PUSH
37229: LD_VAR 0 36
37233: PUSH
37234: LD_VAR 0 37
37238: PUSH
37239: LD_VAR 0 38
37243: PUSH
37244: LD_VAR 0 39
37248: PUSH
37249: LD_VAR 0 40
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: PUSH
37262: LD_VAR 0 4
37266: PUSH
37267: LD_INT 1
37269: PLUS
37270: ARRAY
37271: ST_TO_ADDR
37272: GO 37639
37274: LD_INT 6
37276: DOUBLE
37277: EQUAL
37278: IFTRUE 37330
37280: LD_INT 7
37282: DOUBLE
37283: EQUAL
37284: IFTRUE 37330
37286: LD_INT 8
37288: DOUBLE
37289: EQUAL
37290: IFTRUE 37330
37292: LD_INT 13
37294: DOUBLE
37295: EQUAL
37296: IFTRUE 37330
37298: LD_INT 12
37300: DOUBLE
37301: EQUAL
37302: IFTRUE 37330
37304: LD_INT 15
37306: DOUBLE
37307: EQUAL
37308: IFTRUE 37330
37310: LD_INT 11
37312: DOUBLE
37313: EQUAL
37314: IFTRUE 37330
37316: LD_INT 14
37318: DOUBLE
37319: EQUAL
37320: IFTRUE 37330
37322: LD_INT 10
37324: DOUBLE
37325: EQUAL
37326: IFTRUE 37330
37328: GO 37386
37330: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
37331: LD_ADDR_VAR 0 9
37335: PUSH
37336: LD_VAR 0 41
37340: PUSH
37341: LD_VAR 0 42
37345: PUSH
37346: LD_VAR 0 43
37350: PUSH
37351: LD_VAR 0 44
37355: PUSH
37356: LD_VAR 0 45
37360: PUSH
37361: LD_VAR 0 46
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: PUSH
37374: LD_VAR 0 4
37378: PUSH
37379: LD_INT 1
37381: PLUS
37382: ARRAY
37383: ST_TO_ADDR
37384: GO 37639
37386: LD_INT 36
37388: DOUBLE
37389: EQUAL
37390: IFTRUE 37394
37392: GO 37450
37394: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
37395: LD_ADDR_VAR 0 9
37399: PUSH
37400: LD_VAR 0 47
37404: PUSH
37405: LD_VAR 0 48
37409: PUSH
37410: LD_VAR 0 49
37414: PUSH
37415: LD_VAR 0 50
37419: PUSH
37420: LD_VAR 0 51
37424: PUSH
37425: LD_VAR 0 52
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: PUSH
37438: LD_VAR 0 4
37442: PUSH
37443: LD_INT 1
37445: PLUS
37446: ARRAY
37447: ST_TO_ADDR
37448: GO 37639
37450: LD_INT 4
37452: DOUBLE
37453: EQUAL
37454: IFTRUE 37476
37456: LD_INT 5
37458: DOUBLE
37459: EQUAL
37460: IFTRUE 37476
37462: LD_INT 34
37464: DOUBLE
37465: EQUAL
37466: IFTRUE 37476
37468: LD_INT 37
37470: DOUBLE
37471: EQUAL
37472: IFTRUE 37476
37474: GO 37532
37476: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
37477: LD_ADDR_VAR 0 9
37481: PUSH
37482: LD_VAR 0 53
37486: PUSH
37487: LD_VAR 0 54
37491: PUSH
37492: LD_VAR 0 55
37496: PUSH
37497: LD_VAR 0 56
37501: PUSH
37502: LD_VAR 0 57
37506: PUSH
37507: LD_VAR 0 58
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: PUSH
37520: LD_VAR 0 4
37524: PUSH
37525: LD_INT 1
37527: PLUS
37528: ARRAY
37529: ST_TO_ADDR
37530: GO 37639
37532: LD_INT 31
37534: DOUBLE
37535: EQUAL
37536: IFTRUE 37582
37538: LD_INT 32
37540: DOUBLE
37541: EQUAL
37542: IFTRUE 37582
37544: LD_INT 33
37546: DOUBLE
37547: EQUAL
37548: IFTRUE 37582
37550: LD_INT 27
37552: DOUBLE
37553: EQUAL
37554: IFTRUE 37582
37556: LD_INT 26
37558: DOUBLE
37559: EQUAL
37560: IFTRUE 37582
37562: LD_INT 28
37564: DOUBLE
37565: EQUAL
37566: IFTRUE 37582
37568: LD_INT 29
37570: DOUBLE
37571: EQUAL
37572: IFTRUE 37582
37574: LD_INT 30
37576: DOUBLE
37577: EQUAL
37578: IFTRUE 37582
37580: GO 37638
37582: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
37583: LD_ADDR_VAR 0 9
37587: PUSH
37588: LD_VAR 0 59
37592: PUSH
37593: LD_VAR 0 60
37597: PUSH
37598: LD_VAR 0 61
37602: PUSH
37603: LD_VAR 0 62
37607: PUSH
37608: LD_VAR 0 63
37612: PUSH
37613: LD_VAR 0 64
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: PUSH
37626: LD_VAR 0 4
37630: PUSH
37631: LD_INT 1
37633: PLUS
37634: ARRAY
37635: ST_TO_ADDR
37636: GO 37639
37638: POP
// temp_list2 = [ ] ;
37639: LD_ADDR_VAR 0 10
37643: PUSH
37644: EMPTY
37645: ST_TO_ADDR
// for i in temp_list do
37646: LD_ADDR_VAR 0 8
37650: PUSH
37651: LD_VAR 0 9
37655: PUSH
37656: FOR_IN
37657: IFFALSE 37709
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
37659: LD_ADDR_VAR 0 10
37663: PUSH
37664: LD_VAR 0 10
37668: PUSH
37669: LD_VAR 0 8
37673: PUSH
37674: LD_INT 1
37676: ARRAY
37677: PUSH
37678: LD_VAR 0 2
37682: PLUS
37683: PUSH
37684: LD_VAR 0 8
37688: PUSH
37689: LD_INT 2
37691: ARRAY
37692: PUSH
37693: LD_VAR 0 3
37697: PLUS
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: EMPTY
37704: LIST
37705: ADD
37706: ST_TO_ADDR
37707: GO 37656
37709: POP
37710: POP
// result = temp_list2 ;
37711: LD_ADDR_VAR 0 7
37715: PUSH
37716: LD_VAR 0 10
37720: ST_TO_ADDR
// end ;
37721: LD_VAR 0 7
37725: RET
// export function EnemyInRange ( unit , dist ) ; begin
37726: LD_INT 0
37728: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
37729: LD_ADDR_VAR 0 3
37733: PUSH
37734: LD_VAR 0 1
37738: PPUSH
37739: CALL_OW 255
37743: PPUSH
37744: LD_VAR 0 1
37748: PPUSH
37749: CALL_OW 250
37753: PPUSH
37754: LD_VAR 0 1
37758: PPUSH
37759: CALL_OW 251
37763: PPUSH
37764: LD_VAR 0 2
37768: PPUSH
37769: CALL 11122 0 4
37773: PUSH
37774: LD_INT 4
37776: ARRAY
37777: ST_TO_ADDR
// end ;
37778: LD_VAR 0 3
37782: RET
// export function PlayerSeeMe ( unit ) ; begin
37783: LD_INT 0
37785: PPUSH
// result := See ( your_side , unit ) ;
37786: LD_ADDR_VAR 0 2
37790: PUSH
37791: LD_OWVAR 2
37795: PPUSH
37796: LD_VAR 0 1
37800: PPUSH
37801: CALL_OW 292
37805: ST_TO_ADDR
// end ;
37806: LD_VAR 0 2
37810: RET
// export function ReverseDir ( unit ) ; begin
37811: LD_INT 0
37813: PPUSH
// if not unit then
37814: LD_VAR 0 1
37818: NOT
37819: IFFALSE 37823
// exit ;
37821: GO 37846
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
37823: LD_ADDR_VAR 0 2
37827: PUSH
37828: LD_VAR 0 1
37832: PPUSH
37833: CALL_OW 254
37837: PUSH
37838: LD_INT 3
37840: PLUS
37841: PUSH
37842: LD_INT 6
37844: MOD
37845: ST_TO_ADDR
// end ;
37846: LD_VAR 0 2
37850: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
37851: LD_INT 0
37853: PPUSH
37854: PPUSH
37855: PPUSH
37856: PPUSH
37857: PPUSH
37858: PPUSH
// if not unit or not hexes then
37859: LD_VAR 0 1
37863: NOT
37864: PUSH
37865: LD_VAR 0 2
37869: NOT
37870: OR
37871: IFFALSE 37875
// exit ;
37873: GO 37998
// dist := 9999 ;
37875: LD_ADDR_VAR 0 5
37879: PUSH
37880: LD_INT 9999
37882: ST_TO_ADDR
// for i = 1 to hexes do
37883: LD_ADDR_VAR 0 4
37887: PUSH
37888: DOUBLE
37889: LD_INT 1
37891: DEC
37892: ST_TO_ADDR
37893: LD_VAR 0 2
37897: PUSH
37898: FOR_TO
37899: IFFALSE 37986
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37901: LD_ADDR_VAR 0 6
37905: PUSH
37906: LD_VAR 0 1
37910: PPUSH
37911: LD_VAR 0 2
37915: PUSH
37916: LD_VAR 0 4
37920: ARRAY
37921: PUSH
37922: LD_INT 1
37924: ARRAY
37925: PPUSH
37926: LD_VAR 0 2
37930: PUSH
37931: LD_VAR 0 4
37935: ARRAY
37936: PUSH
37937: LD_INT 2
37939: ARRAY
37940: PPUSH
37941: CALL_OW 297
37945: ST_TO_ADDR
// if tdist < dist then
37946: LD_VAR 0 6
37950: PUSH
37951: LD_VAR 0 5
37955: LESS
37956: IFFALSE 37984
// begin hex := hexes [ i ] ;
37958: LD_ADDR_VAR 0 8
37962: PUSH
37963: LD_VAR 0 2
37967: PUSH
37968: LD_VAR 0 4
37972: ARRAY
37973: ST_TO_ADDR
// dist := tdist ;
37974: LD_ADDR_VAR 0 5
37978: PUSH
37979: LD_VAR 0 6
37983: ST_TO_ADDR
// end ; end ;
37984: GO 37898
37986: POP
37987: POP
// result := hex ;
37988: LD_ADDR_VAR 0 3
37992: PUSH
37993: LD_VAR 0 8
37997: ST_TO_ADDR
// end ;
37998: LD_VAR 0 3
38002: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
38003: LD_INT 0
38005: PPUSH
38006: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
38007: LD_VAR 0 1
38011: NOT
38012: PUSH
38013: LD_VAR 0 1
38017: PUSH
38018: LD_INT 21
38020: PUSH
38021: LD_INT 2
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 23
38030: PUSH
38031: LD_INT 2
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PPUSH
38042: CALL_OW 69
38046: IN
38047: NOT
38048: OR
38049: IFFALSE 38053
// exit ;
38051: GO 38100
// for i = 1 to 3 do
38053: LD_ADDR_VAR 0 3
38057: PUSH
38058: DOUBLE
38059: LD_INT 1
38061: DEC
38062: ST_TO_ADDR
38063: LD_INT 3
38065: PUSH
38066: FOR_TO
38067: IFFALSE 38098
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
38069: LD_VAR 0 1
38073: PPUSH
38074: CALL_OW 250
38078: PPUSH
38079: LD_VAR 0 1
38083: PPUSH
38084: CALL_OW 251
38088: PPUSH
38089: LD_INT 1
38091: PPUSH
38092: CALL_OW 453
38096: GO 38066
38098: POP
38099: POP
// end ;
38100: LD_VAR 0 2
38104: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
38105: LD_INT 0
38107: PPUSH
38108: PPUSH
38109: PPUSH
38110: PPUSH
38111: PPUSH
38112: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
38113: LD_VAR 0 1
38117: NOT
38118: PUSH
38119: LD_VAR 0 2
38123: NOT
38124: OR
38125: PUSH
38126: LD_VAR 0 1
38130: PPUSH
38131: CALL_OW 314
38135: OR
38136: IFFALSE 38140
// exit ;
38138: GO 38581
// x := GetX ( enemy_unit ) ;
38140: LD_ADDR_VAR 0 7
38144: PUSH
38145: LD_VAR 0 2
38149: PPUSH
38150: CALL_OW 250
38154: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
38155: LD_ADDR_VAR 0 8
38159: PUSH
38160: LD_VAR 0 2
38164: PPUSH
38165: CALL_OW 251
38169: ST_TO_ADDR
// if not x or not y then
38170: LD_VAR 0 7
38174: NOT
38175: PUSH
38176: LD_VAR 0 8
38180: NOT
38181: OR
38182: IFFALSE 38186
// exit ;
38184: GO 38581
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
38186: LD_ADDR_VAR 0 6
38190: PUSH
38191: LD_VAR 0 7
38195: PPUSH
38196: LD_INT 0
38198: PPUSH
38199: LD_INT 4
38201: PPUSH
38202: CALL_OW 272
38206: PUSH
38207: LD_VAR 0 8
38211: PPUSH
38212: LD_INT 0
38214: PPUSH
38215: LD_INT 4
38217: PPUSH
38218: CALL_OW 273
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_VAR 0 7
38231: PPUSH
38232: LD_INT 1
38234: PPUSH
38235: LD_INT 4
38237: PPUSH
38238: CALL_OW 272
38242: PUSH
38243: LD_VAR 0 8
38247: PPUSH
38248: LD_INT 1
38250: PPUSH
38251: LD_INT 4
38253: PPUSH
38254: CALL_OW 273
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_VAR 0 7
38267: PPUSH
38268: LD_INT 2
38270: PPUSH
38271: LD_INT 4
38273: PPUSH
38274: CALL_OW 272
38278: PUSH
38279: LD_VAR 0 8
38283: PPUSH
38284: LD_INT 2
38286: PPUSH
38287: LD_INT 4
38289: PPUSH
38290: CALL_OW 273
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_VAR 0 7
38303: PPUSH
38304: LD_INT 3
38306: PPUSH
38307: LD_INT 4
38309: PPUSH
38310: CALL_OW 272
38314: PUSH
38315: LD_VAR 0 8
38319: PPUSH
38320: LD_INT 3
38322: PPUSH
38323: LD_INT 4
38325: PPUSH
38326: CALL_OW 273
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_VAR 0 7
38339: PPUSH
38340: LD_INT 4
38342: PPUSH
38343: LD_INT 4
38345: PPUSH
38346: CALL_OW 272
38350: PUSH
38351: LD_VAR 0 8
38355: PPUSH
38356: LD_INT 4
38358: PPUSH
38359: LD_INT 4
38361: PPUSH
38362: CALL_OW 273
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_VAR 0 7
38375: PPUSH
38376: LD_INT 5
38378: PPUSH
38379: LD_INT 4
38381: PPUSH
38382: CALL_OW 272
38386: PUSH
38387: LD_VAR 0 8
38391: PPUSH
38392: LD_INT 5
38394: PPUSH
38395: LD_INT 4
38397: PPUSH
38398: CALL_OW 273
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: ST_TO_ADDR
// for i = tmp downto 1 do
38415: LD_ADDR_VAR 0 4
38419: PUSH
38420: DOUBLE
38421: LD_VAR 0 6
38425: INC
38426: ST_TO_ADDR
38427: LD_INT 1
38429: PUSH
38430: FOR_DOWNTO
38431: IFFALSE 38532
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
38433: LD_VAR 0 6
38437: PUSH
38438: LD_VAR 0 4
38442: ARRAY
38443: PUSH
38444: LD_INT 1
38446: ARRAY
38447: PPUSH
38448: LD_VAR 0 6
38452: PUSH
38453: LD_VAR 0 4
38457: ARRAY
38458: PUSH
38459: LD_INT 2
38461: ARRAY
38462: PPUSH
38463: CALL_OW 488
38467: NOT
38468: PUSH
38469: LD_VAR 0 6
38473: PUSH
38474: LD_VAR 0 4
38478: ARRAY
38479: PUSH
38480: LD_INT 1
38482: ARRAY
38483: PPUSH
38484: LD_VAR 0 6
38488: PUSH
38489: LD_VAR 0 4
38493: ARRAY
38494: PUSH
38495: LD_INT 2
38497: ARRAY
38498: PPUSH
38499: CALL_OW 428
38503: PUSH
38504: LD_INT 0
38506: NONEQUAL
38507: OR
38508: IFFALSE 38530
// tmp := Delete ( tmp , i ) ;
38510: LD_ADDR_VAR 0 6
38514: PUSH
38515: LD_VAR 0 6
38519: PPUSH
38520: LD_VAR 0 4
38524: PPUSH
38525: CALL_OW 3
38529: ST_TO_ADDR
38530: GO 38430
38532: POP
38533: POP
// j := GetClosestHex ( unit , tmp ) ;
38534: LD_ADDR_VAR 0 5
38538: PUSH
38539: LD_VAR 0 1
38543: PPUSH
38544: LD_VAR 0 6
38548: PPUSH
38549: CALL 37851 0 2
38553: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
38554: LD_VAR 0 1
38558: PPUSH
38559: LD_VAR 0 5
38563: PUSH
38564: LD_INT 1
38566: ARRAY
38567: PPUSH
38568: LD_VAR 0 5
38572: PUSH
38573: LD_INT 2
38575: ARRAY
38576: PPUSH
38577: CALL_OW 111
// end ;
38581: LD_VAR 0 3
38585: RET
// export function PrepareApemanSoldier ( ) ; begin
38586: LD_INT 0
38588: PPUSH
// uc_nation := 0 ;
38589: LD_ADDR_OWVAR 21
38593: PUSH
38594: LD_INT 0
38596: ST_TO_ADDR
// hc_sex := sex_male ;
38597: LD_ADDR_OWVAR 27
38601: PUSH
38602: LD_INT 1
38604: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
38605: LD_ADDR_OWVAR 28
38609: PUSH
38610: LD_INT 15
38612: ST_TO_ADDR
// hc_gallery :=  ;
38613: LD_ADDR_OWVAR 33
38617: PUSH
38618: LD_STRING 
38620: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38621: LD_ADDR_OWVAR 31
38625: PUSH
38626: LD_INT 0
38628: PPUSH
38629: LD_INT 3
38631: PPUSH
38632: CALL_OW 12
38636: PUSH
38637: LD_INT 0
38639: PPUSH
38640: LD_INT 3
38642: PPUSH
38643: CALL_OW 12
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: LD_INT 0
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: ST_TO_ADDR
// end ;
38660: LD_VAR 0 1
38664: RET
// export function PrepareApemanEngineer ( ) ; begin
38665: LD_INT 0
38667: PPUSH
// uc_nation := 0 ;
38668: LD_ADDR_OWVAR 21
38672: PUSH
38673: LD_INT 0
38675: ST_TO_ADDR
// hc_sex := sex_male ;
38676: LD_ADDR_OWVAR 27
38680: PUSH
38681: LD_INT 1
38683: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
38684: LD_ADDR_OWVAR 28
38688: PUSH
38689: LD_INT 16
38691: ST_TO_ADDR
// hc_gallery :=  ;
38692: LD_ADDR_OWVAR 33
38696: PUSH
38697: LD_STRING 
38699: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38700: LD_ADDR_OWVAR 31
38704: PUSH
38705: LD_INT 0
38707: PPUSH
38708: LD_INT 3
38710: PPUSH
38711: CALL_OW 12
38715: PUSH
38716: LD_INT 0
38718: PPUSH
38719: LD_INT 3
38721: PPUSH
38722: CALL_OW 12
38726: PUSH
38727: LD_INT 0
38729: PUSH
38730: LD_INT 0
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: ST_TO_ADDR
// end ;
38739: LD_VAR 0 1
38743: RET
// export function PrepareApeman ( agressivity ) ; begin
38744: LD_INT 0
38746: PPUSH
// uc_side := 0 ;
38747: LD_ADDR_OWVAR 20
38751: PUSH
38752: LD_INT 0
38754: ST_TO_ADDR
// uc_nation := 0 ;
38755: LD_ADDR_OWVAR 21
38759: PUSH
38760: LD_INT 0
38762: ST_TO_ADDR
// hc_sex := sex_male ;
38763: LD_ADDR_OWVAR 27
38767: PUSH
38768: LD_INT 1
38770: ST_TO_ADDR
// hc_class := class_apeman ;
38771: LD_ADDR_OWVAR 28
38775: PUSH
38776: LD_INT 12
38778: ST_TO_ADDR
// hc_gallery :=  ;
38779: LD_ADDR_OWVAR 33
38783: PUSH
38784: LD_STRING 
38786: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38787: LD_ADDR_OWVAR 35
38791: PUSH
38792: LD_VAR 0 1
38796: NEG
38797: PPUSH
38798: LD_VAR 0 1
38802: PPUSH
38803: CALL_OW 12
38807: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38808: LD_ADDR_OWVAR 31
38812: PUSH
38813: LD_INT 0
38815: PPUSH
38816: LD_INT 3
38818: PPUSH
38819: CALL_OW 12
38823: PUSH
38824: LD_INT 0
38826: PPUSH
38827: LD_INT 3
38829: PPUSH
38830: CALL_OW 12
38834: PUSH
38835: LD_INT 0
38837: PUSH
38838: LD_INT 0
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: ST_TO_ADDR
// end ;
38847: LD_VAR 0 2
38851: RET
// export function PrepareTiger ( agressivity ) ; begin
38852: LD_INT 0
38854: PPUSH
// uc_side := 0 ;
38855: LD_ADDR_OWVAR 20
38859: PUSH
38860: LD_INT 0
38862: ST_TO_ADDR
// uc_nation := 0 ;
38863: LD_ADDR_OWVAR 21
38867: PUSH
38868: LD_INT 0
38870: ST_TO_ADDR
// hc_class := class_tiger ;
38871: LD_ADDR_OWVAR 28
38875: PUSH
38876: LD_INT 14
38878: ST_TO_ADDR
// hc_gallery :=  ;
38879: LD_ADDR_OWVAR 33
38883: PUSH
38884: LD_STRING 
38886: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38887: LD_ADDR_OWVAR 35
38891: PUSH
38892: LD_VAR 0 1
38896: NEG
38897: PPUSH
38898: LD_VAR 0 1
38902: PPUSH
38903: CALL_OW 12
38907: ST_TO_ADDR
// end ;
38908: LD_VAR 0 2
38912: RET
// export function PrepareEnchidna ( ) ; begin
38913: LD_INT 0
38915: PPUSH
// uc_side := 0 ;
38916: LD_ADDR_OWVAR 20
38920: PUSH
38921: LD_INT 0
38923: ST_TO_ADDR
// uc_nation := 0 ;
38924: LD_ADDR_OWVAR 21
38928: PUSH
38929: LD_INT 0
38931: ST_TO_ADDR
// hc_class := class_baggie ;
38932: LD_ADDR_OWVAR 28
38936: PUSH
38937: LD_INT 13
38939: ST_TO_ADDR
// hc_gallery :=  ;
38940: LD_ADDR_OWVAR 33
38944: PUSH
38945: LD_STRING 
38947: ST_TO_ADDR
// end ;
38948: LD_VAR 0 1
38952: RET
// export function PrepareFrog ( ) ; begin
38953: LD_INT 0
38955: PPUSH
// uc_side := 0 ;
38956: LD_ADDR_OWVAR 20
38960: PUSH
38961: LD_INT 0
38963: ST_TO_ADDR
// uc_nation := 0 ;
38964: LD_ADDR_OWVAR 21
38968: PUSH
38969: LD_INT 0
38971: ST_TO_ADDR
// hc_class := class_frog ;
38972: LD_ADDR_OWVAR 28
38976: PUSH
38977: LD_INT 19
38979: ST_TO_ADDR
// hc_gallery :=  ;
38980: LD_ADDR_OWVAR 33
38984: PUSH
38985: LD_STRING 
38987: ST_TO_ADDR
// end ;
38988: LD_VAR 0 1
38992: RET
// export function PrepareFish ( ) ; begin
38993: LD_INT 0
38995: PPUSH
// uc_side := 0 ;
38996: LD_ADDR_OWVAR 20
39000: PUSH
39001: LD_INT 0
39003: ST_TO_ADDR
// uc_nation := 0 ;
39004: LD_ADDR_OWVAR 21
39008: PUSH
39009: LD_INT 0
39011: ST_TO_ADDR
// hc_class := class_fish ;
39012: LD_ADDR_OWVAR 28
39016: PUSH
39017: LD_INT 20
39019: ST_TO_ADDR
// hc_gallery :=  ;
39020: LD_ADDR_OWVAR 33
39024: PUSH
39025: LD_STRING 
39027: ST_TO_ADDR
// end ;
39028: LD_VAR 0 1
39032: RET
// export function PrepareBird ( ) ; begin
39033: LD_INT 0
39035: PPUSH
// uc_side := 0 ;
39036: LD_ADDR_OWVAR 20
39040: PUSH
39041: LD_INT 0
39043: ST_TO_ADDR
// uc_nation := 0 ;
39044: LD_ADDR_OWVAR 21
39048: PUSH
39049: LD_INT 0
39051: ST_TO_ADDR
// hc_class := class_phororhacos ;
39052: LD_ADDR_OWVAR 28
39056: PUSH
39057: LD_INT 18
39059: ST_TO_ADDR
// hc_gallery :=  ;
39060: LD_ADDR_OWVAR 33
39064: PUSH
39065: LD_STRING 
39067: ST_TO_ADDR
// end ;
39068: LD_VAR 0 1
39072: RET
// export function PrepareHorse ( ) ; begin
39073: LD_INT 0
39075: PPUSH
// uc_side := 0 ;
39076: LD_ADDR_OWVAR 20
39080: PUSH
39081: LD_INT 0
39083: ST_TO_ADDR
// uc_nation := 0 ;
39084: LD_ADDR_OWVAR 21
39088: PUSH
39089: LD_INT 0
39091: ST_TO_ADDR
// hc_class := class_horse ;
39092: LD_ADDR_OWVAR 28
39096: PUSH
39097: LD_INT 21
39099: ST_TO_ADDR
// hc_gallery :=  ;
39100: LD_ADDR_OWVAR 33
39104: PUSH
39105: LD_STRING 
39107: ST_TO_ADDR
// end ;
39108: LD_VAR 0 1
39112: RET
// export function PrepareMastodont ( ) ; begin
39113: LD_INT 0
39115: PPUSH
// uc_side := 0 ;
39116: LD_ADDR_OWVAR 20
39120: PUSH
39121: LD_INT 0
39123: ST_TO_ADDR
// uc_nation := 0 ;
39124: LD_ADDR_OWVAR 21
39128: PUSH
39129: LD_INT 0
39131: ST_TO_ADDR
// vc_chassis := class_mastodont ;
39132: LD_ADDR_OWVAR 37
39136: PUSH
39137: LD_INT 31
39139: ST_TO_ADDR
// vc_control := control_rider ;
39140: LD_ADDR_OWVAR 38
39144: PUSH
39145: LD_INT 4
39147: ST_TO_ADDR
// end ;
39148: LD_VAR 0 1
39152: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
39153: LD_INT 0
39155: PPUSH
39156: PPUSH
39157: PPUSH
// uc_side = 0 ;
39158: LD_ADDR_OWVAR 20
39162: PUSH
39163: LD_INT 0
39165: ST_TO_ADDR
// uc_nation = 0 ;
39166: LD_ADDR_OWVAR 21
39170: PUSH
39171: LD_INT 0
39173: ST_TO_ADDR
// InitHc_All ( ) ;
39174: CALL_OW 584
// InitVc ;
39178: CALL_OW 20
// if mastodonts then
39182: LD_VAR 0 6
39186: IFFALSE 39253
// for i = 1 to mastodonts do
39188: LD_ADDR_VAR 0 11
39192: PUSH
39193: DOUBLE
39194: LD_INT 1
39196: DEC
39197: ST_TO_ADDR
39198: LD_VAR 0 6
39202: PUSH
39203: FOR_TO
39204: IFFALSE 39251
// begin vc_chassis := 31 ;
39206: LD_ADDR_OWVAR 37
39210: PUSH
39211: LD_INT 31
39213: ST_TO_ADDR
// vc_control := control_rider ;
39214: LD_ADDR_OWVAR 38
39218: PUSH
39219: LD_INT 4
39221: ST_TO_ADDR
// animal := CreateVehicle ;
39222: LD_ADDR_VAR 0 12
39226: PUSH
39227: CALL_OW 45
39231: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39232: LD_VAR 0 12
39236: PPUSH
39237: LD_VAR 0 8
39241: PPUSH
39242: LD_INT 0
39244: PPUSH
39245: CALL 41388 0 3
// end ;
39249: GO 39203
39251: POP
39252: POP
// if horses then
39253: LD_VAR 0 5
39257: IFFALSE 39324
// for i = 1 to horses do
39259: LD_ADDR_VAR 0 11
39263: PUSH
39264: DOUBLE
39265: LD_INT 1
39267: DEC
39268: ST_TO_ADDR
39269: LD_VAR 0 5
39273: PUSH
39274: FOR_TO
39275: IFFALSE 39322
// begin hc_class := 21 ;
39277: LD_ADDR_OWVAR 28
39281: PUSH
39282: LD_INT 21
39284: ST_TO_ADDR
// hc_gallery :=  ;
39285: LD_ADDR_OWVAR 33
39289: PUSH
39290: LD_STRING 
39292: ST_TO_ADDR
// animal := CreateHuman ;
39293: LD_ADDR_VAR 0 12
39297: PUSH
39298: CALL_OW 44
39302: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39303: LD_VAR 0 12
39307: PPUSH
39308: LD_VAR 0 8
39312: PPUSH
39313: LD_INT 0
39315: PPUSH
39316: CALL 41388 0 3
// end ;
39320: GO 39274
39322: POP
39323: POP
// if birds then
39324: LD_VAR 0 1
39328: IFFALSE 39395
// for i = 1 to birds do
39330: LD_ADDR_VAR 0 11
39334: PUSH
39335: DOUBLE
39336: LD_INT 1
39338: DEC
39339: ST_TO_ADDR
39340: LD_VAR 0 1
39344: PUSH
39345: FOR_TO
39346: IFFALSE 39393
// begin hc_class = 18 ;
39348: LD_ADDR_OWVAR 28
39352: PUSH
39353: LD_INT 18
39355: ST_TO_ADDR
// hc_gallery =  ;
39356: LD_ADDR_OWVAR 33
39360: PUSH
39361: LD_STRING 
39363: ST_TO_ADDR
// animal := CreateHuman ;
39364: LD_ADDR_VAR 0 12
39368: PUSH
39369: CALL_OW 44
39373: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39374: LD_VAR 0 12
39378: PPUSH
39379: LD_VAR 0 8
39383: PPUSH
39384: LD_INT 0
39386: PPUSH
39387: CALL 41388 0 3
// end ;
39391: GO 39345
39393: POP
39394: POP
// if tigers then
39395: LD_VAR 0 2
39399: IFFALSE 39483
// for i = 1 to tigers do
39401: LD_ADDR_VAR 0 11
39405: PUSH
39406: DOUBLE
39407: LD_INT 1
39409: DEC
39410: ST_TO_ADDR
39411: LD_VAR 0 2
39415: PUSH
39416: FOR_TO
39417: IFFALSE 39481
// begin hc_class = class_tiger ;
39419: LD_ADDR_OWVAR 28
39423: PUSH
39424: LD_INT 14
39426: ST_TO_ADDR
// hc_gallery =  ;
39427: LD_ADDR_OWVAR 33
39431: PUSH
39432: LD_STRING 
39434: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
39435: LD_ADDR_OWVAR 35
39439: PUSH
39440: LD_INT 7
39442: NEG
39443: PPUSH
39444: LD_INT 7
39446: PPUSH
39447: CALL_OW 12
39451: ST_TO_ADDR
// animal := CreateHuman ;
39452: LD_ADDR_VAR 0 12
39456: PUSH
39457: CALL_OW 44
39461: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39462: LD_VAR 0 12
39466: PPUSH
39467: LD_VAR 0 8
39471: PPUSH
39472: LD_INT 0
39474: PPUSH
39475: CALL 41388 0 3
// end ;
39479: GO 39416
39481: POP
39482: POP
// if apemans then
39483: LD_VAR 0 3
39487: IFFALSE 39610
// for i = 1 to apemans do
39489: LD_ADDR_VAR 0 11
39493: PUSH
39494: DOUBLE
39495: LD_INT 1
39497: DEC
39498: ST_TO_ADDR
39499: LD_VAR 0 3
39503: PUSH
39504: FOR_TO
39505: IFFALSE 39608
// begin hc_class = class_apeman ;
39507: LD_ADDR_OWVAR 28
39511: PUSH
39512: LD_INT 12
39514: ST_TO_ADDR
// hc_gallery =  ;
39515: LD_ADDR_OWVAR 33
39519: PUSH
39520: LD_STRING 
39522: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
39523: LD_ADDR_OWVAR 35
39527: PUSH
39528: LD_INT 2
39530: NEG
39531: PPUSH
39532: LD_INT 2
39534: PPUSH
39535: CALL_OW 12
39539: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
39540: LD_ADDR_OWVAR 31
39544: PUSH
39545: LD_INT 1
39547: PPUSH
39548: LD_INT 3
39550: PPUSH
39551: CALL_OW 12
39555: PUSH
39556: LD_INT 1
39558: PPUSH
39559: LD_INT 3
39561: PPUSH
39562: CALL_OW 12
39566: PUSH
39567: LD_INT 0
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: ST_TO_ADDR
// animal := CreateHuman ;
39579: LD_ADDR_VAR 0 12
39583: PUSH
39584: CALL_OW 44
39588: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39589: LD_VAR 0 12
39593: PPUSH
39594: LD_VAR 0 8
39598: PPUSH
39599: LD_INT 0
39601: PPUSH
39602: CALL 41388 0 3
// end ;
39606: GO 39504
39608: POP
39609: POP
// if enchidnas then
39610: LD_VAR 0 4
39614: IFFALSE 39681
// for i = 1 to enchidnas do
39616: LD_ADDR_VAR 0 11
39620: PUSH
39621: DOUBLE
39622: LD_INT 1
39624: DEC
39625: ST_TO_ADDR
39626: LD_VAR 0 4
39630: PUSH
39631: FOR_TO
39632: IFFALSE 39679
// begin hc_class = 13 ;
39634: LD_ADDR_OWVAR 28
39638: PUSH
39639: LD_INT 13
39641: ST_TO_ADDR
// hc_gallery =  ;
39642: LD_ADDR_OWVAR 33
39646: PUSH
39647: LD_STRING 
39649: ST_TO_ADDR
// animal := CreateHuman ;
39650: LD_ADDR_VAR 0 12
39654: PUSH
39655: CALL_OW 44
39659: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39660: LD_VAR 0 12
39664: PPUSH
39665: LD_VAR 0 8
39669: PPUSH
39670: LD_INT 0
39672: PPUSH
39673: CALL 41388 0 3
// end ;
39677: GO 39631
39679: POP
39680: POP
// if fishes then
39681: LD_VAR 0 7
39685: IFFALSE 39752
// for i = 1 to fishes do
39687: LD_ADDR_VAR 0 11
39691: PUSH
39692: DOUBLE
39693: LD_INT 1
39695: DEC
39696: ST_TO_ADDR
39697: LD_VAR 0 7
39701: PUSH
39702: FOR_TO
39703: IFFALSE 39750
// begin hc_class = 20 ;
39705: LD_ADDR_OWVAR 28
39709: PUSH
39710: LD_INT 20
39712: ST_TO_ADDR
// hc_gallery =  ;
39713: LD_ADDR_OWVAR 33
39717: PUSH
39718: LD_STRING 
39720: ST_TO_ADDR
// animal := CreateHuman ;
39721: LD_ADDR_VAR 0 12
39725: PUSH
39726: CALL_OW 44
39730: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
39731: LD_VAR 0 12
39735: PPUSH
39736: LD_VAR 0 9
39740: PPUSH
39741: LD_INT 0
39743: PPUSH
39744: CALL 41388 0 3
// end ;
39748: GO 39702
39750: POP
39751: POP
// end ;
39752: LD_VAR 0 10
39756: RET
// export function WantHeal ( sci , unit ) ; begin
39757: LD_INT 0
39759: PPUSH
// if GetTaskList ( sci ) > 0 then
39760: LD_VAR 0 1
39764: PPUSH
39765: CALL_OW 437
39769: PUSH
39770: LD_INT 0
39772: GREATER
39773: IFFALSE 39843
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
39775: LD_VAR 0 1
39779: PPUSH
39780: CALL_OW 437
39784: PUSH
39785: LD_INT 1
39787: ARRAY
39788: PUSH
39789: LD_INT 1
39791: ARRAY
39792: PUSH
39793: LD_STRING l
39795: EQUAL
39796: PUSH
39797: LD_VAR 0 1
39801: PPUSH
39802: CALL_OW 437
39806: PUSH
39807: LD_INT 1
39809: ARRAY
39810: PUSH
39811: LD_INT 4
39813: ARRAY
39814: PUSH
39815: LD_VAR 0 2
39819: EQUAL
39820: AND
39821: IFFALSE 39833
// result := true else
39823: LD_ADDR_VAR 0 3
39827: PUSH
39828: LD_INT 1
39830: ST_TO_ADDR
39831: GO 39841
// result := false ;
39833: LD_ADDR_VAR 0 3
39837: PUSH
39838: LD_INT 0
39840: ST_TO_ADDR
// end else
39841: GO 39851
// result := false ;
39843: LD_ADDR_VAR 0 3
39847: PUSH
39848: LD_INT 0
39850: ST_TO_ADDR
// end ;
39851: LD_VAR 0 3
39855: RET
// export function HealTarget ( sci ) ; begin
39856: LD_INT 0
39858: PPUSH
// if not sci then
39859: LD_VAR 0 1
39863: NOT
39864: IFFALSE 39868
// exit ;
39866: GO 39933
// result := 0 ;
39868: LD_ADDR_VAR 0 2
39872: PUSH
39873: LD_INT 0
39875: ST_TO_ADDR
// if GetTaskList ( sci ) then
39876: LD_VAR 0 1
39880: PPUSH
39881: CALL_OW 437
39885: IFFALSE 39933
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39887: LD_VAR 0 1
39891: PPUSH
39892: CALL_OW 437
39896: PUSH
39897: LD_INT 1
39899: ARRAY
39900: PUSH
39901: LD_INT 1
39903: ARRAY
39904: PUSH
39905: LD_STRING l
39907: EQUAL
39908: IFFALSE 39933
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39910: LD_ADDR_VAR 0 2
39914: PUSH
39915: LD_VAR 0 1
39919: PPUSH
39920: CALL_OW 437
39924: PUSH
39925: LD_INT 1
39927: ARRAY
39928: PUSH
39929: LD_INT 4
39931: ARRAY
39932: ST_TO_ADDR
// end ;
39933: LD_VAR 0 2
39937: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39938: LD_INT 0
39940: PPUSH
39941: PPUSH
39942: PPUSH
39943: PPUSH
// if not base_units then
39944: LD_VAR 0 1
39948: NOT
39949: IFFALSE 39953
// exit ;
39951: GO 40040
// result := false ;
39953: LD_ADDR_VAR 0 2
39957: PUSH
39958: LD_INT 0
39960: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39961: LD_ADDR_VAR 0 5
39965: PUSH
39966: LD_VAR 0 1
39970: PPUSH
39971: LD_INT 21
39973: PUSH
39974: LD_INT 3
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PPUSH
39981: CALL_OW 72
39985: ST_TO_ADDR
// if not tmp then
39986: LD_VAR 0 5
39990: NOT
39991: IFFALSE 39995
// exit ;
39993: GO 40040
// for i in tmp do
39995: LD_ADDR_VAR 0 3
39999: PUSH
40000: LD_VAR 0 5
40004: PUSH
40005: FOR_IN
40006: IFFALSE 40038
// begin result := EnemyInRange ( i , 22 ) ;
40008: LD_ADDR_VAR 0 2
40012: PUSH
40013: LD_VAR 0 3
40017: PPUSH
40018: LD_INT 22
40020: PPUSH
40021: CALL 37726 0 2
40025: ST_TO_ADDR
// if result then
40026: LD_VAR 0 2
40030: IFFALSE 40036
// exit ;
40032: POP
40033: POP
40034: GO 40040
// end ;
40036: GO 40005
40038: POP
40039: POP
// end ;
40040: LD_VAR 0 2
40044: RET
// export function FilterByTag ( units , tag ) ; begin
40045: LD_INT 0
40047: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
40048: LD_ADDR_VAR 0 3
40052: PUSH
40053: LD_VAR 0 1
40057: PPUSH
40058: LD_INT 120
40060: PUSH
40061: LD_VAR 0 2
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PPUSH
40070: CALL_OW 72
40074: ST_TO_ADDR
// end ;
40075: LD_VAR 0 3
40079: RET
// export function IsDriver ( un ) ; begin
40080: LD_INT 0
40082: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
40083: LD_ADDR_VAR 0 2
40087: PUSH
40088: LD_VAR 0 1
40092: PUSH
40093: LD_INT 55
40095: PUSH
40096: EMPTY
40097: LIST
40098: PPUSH
40099: CALL_OW 69
40103: IN
40104: ST_TO_ADDR
// end ;
40105: LD_VAR 0 2
40109: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
40110: LD_INT 0
40112: PPUSH
40113: PPUSH
// list := [ ] ;
40114: LD_ADDR_VAR 0 5
40118: PUSH
40119: EMPTY
40120: ST_TO_ADDR
// case d of 0 :
40121: LD_VAR 0 3
40125: PUSH
40126: LD_INT 0
40128: DOUBLE
40129: EQUAL
40130: IFTRUE 40134
40132: GO 40267
40134: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
40135: LD_ADDR_VAR 0 5
40139: PUSH
40140: LD_VAR 0 1
40144: PUSH
40145: LD_INT 4
40147: MINUS
40148: PUSH
40149: LD_VAR 0 2
40153: PUSH
40154: LD_INT 4
40156: MINUS
40157: PUSH
40158: LD_INT 2
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: LIST
40165: PUSH
40166: LD_VAR 0 1
40170: PUSH
40171: LD_INT 3
40173: MINUS
40174: PUSH
40175: LD_VAR 0 2
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: LIST
40187: PUSH
40188: LD_VAR 0 1
40192: PUSH
40193: LD_INT 4
40195: PLUS
40196: PUSH
40197: LD_VAR 0 2
40201: PUSH
40202: LD_INT 4
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: LIST
40209: PUSH
40210: LD_VAR 0 1
40214: PUSH
40215: LD_INT 3
40217: PLUS
40218: PUSH
40219: LD_VAR 0 2
40223: PUSH
40224: LD_INT 3
40226: PLUS
40227: PUSH
40228: LD_INT 5
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: LIST
40235: PUSH
40236: LD_VAR 0 1
40240: PUSH
40241: LD_VAR 0 2
40245: PUSH
40246: LD_INT 4
40248: PLUS
40249: PUSH
40250: LD_INT 0
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: LIST
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: ST_TO_ADDR
// end ; 1 :
40265: GO 40965
40267: LD_INT 1
40269: DOUBLE
40270: EQUAL
40271: IFTRUE 40275
40273: GO 40408
40275: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
40276: LD_ADDR_VAR 0 5
40280: PUSH
40281: LD_VAR 0 1
40285: PUSH
40286: LD_VAR 0 2
40290: PUSH
40291: LD_INT 4
40293: MINUS
40294: PUSH
40295: LD_INT 3
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: LIST
40302: PUSH
40303: LD_VAR 0 1
40307: PUSH
40308: LD_INT 3
40310: MINUS
40311: PUSH
40312: LD_VAR 0 2
40316: PUSH
40317: LD_INT 3
40319: MINUS
40320: PUSH
40321: LD_INT 2
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: LIST
40328: PUSH
40329: LD_VAR 0 1
40333: PUSH
40334: LD_INT 4
40336: MINUS
40337: PUSH
40338: LD_VAR 0 2
40342: PUSH
40343: LD_INT 1
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: LIST
40350: PUSH
40351: LD_VAR 0 1
40355: PUSH
40356: LD_VAR 0 2
40360: PUSH
40361: LD_INT 3
40363: PLUS
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: LIST
40372: PUSH
40373: LD_VAR 0 1
40377: PUSH
40378: LD_INT 4
40380: PLUS
40381: PUSH
40382: LD_VAR 0 2
40386: PUSH
40387: LD_INT 4
40389: PLUS
40390: PUSH
40391: LD_INT 5
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: LIST
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: ST_TO_ADDR
// end ; 2 :
40406: GO 40965
40408: LD_INT 2
40410: DOUBLE
40411: EQUAL
40412: IFTRUE 40416
40414: GO 40545
40416: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
40417: LD_ADDR_VAR 0 5
40421: PUSH
40422: LD_VAR 0 1
40426: PUSH
40427: LD_VAR 0 2
40431: PUSH
40432: LD_INT 3
40434: MINUS
40435: PUSH
40436: LD_INT 3
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: LIST
40443: PUSH
40444: LD_VAR 0 1
40448: PUSH
40449: LD_INT 4
40451: PLUS
40452: PUSH
40453: LD_VAR 0 2
40457: PUSH
40458: LD_INT 4
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: LIST
40465: PUSH
40466: LD_VAR 0 1
40470: PUSH
40471: LD_VAR 0 2
40475: PUSH
40476: LD_INT 4
40478: PLUS
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: LIST
40487: PUSH
40488: LD_VAR 0 1
40492: PUSH
40493: LD_INT 3
40495: MINUS
40496: PUSH
40497: LD_VAR 0 2
40501: PUSH
40502: LD_INT 1
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: LIST
40509: PUSH
40510: LD_VAR 0 1
40514: PUSH
40515: LD_INT 4
40517: MINUS
40518: PUSH
40519: LD_VAR 0 2
40523: PUSH
40524: LD_INT 4
40526: MINUS
40527: PUSH
40528: LD_INT 2
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: ST_TO_ADDR
// end ; 3 :
40543: GO 40965
40545: LD_INT 3
40547: DOUBLE
40548: EQUAL
40549: IFTRUE 40553
40551: GO 40686
40553: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
40554: LD_ADDR_VAR 0 5
40558: PUSH
40559: LD_VAR 0 1
40563: PUSH
40564: LD_INT 3
40566: PLUS
40567: PUSH
40568: LD_VAR 0 2
40572: PUSH
40573: LD_INT 4
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: LIST
40580: PUSH
40581: LD_VAR 0 1
40585: PUSH
40586: LD_INT 4
40588: PLUS
40589: PUSH
40590: LD_VAR 0 2
40594: PUSH
40595: LD_INT 4
40597: PLUS
40598: PUSH
40599: LD_INT 5
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: LIST
40606: PUSH
40607: LD_VAR 0 1
40611: PUSH
40612: LD_INT 4
40614: MINUS
40615: PUSH
40616: LD_VAR 0 2
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: LIST
40628: PUSH
40629: LD_VAR 0 1
40633: PUSH
40634: LD_VAR 0 2
40638: PUSH
40639: LD_INT 4
40641: MINUS
40642: PUSH
40643: LD_INT 3
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: LIST
40650: PUSH
40651: LD_VAR 0 1
40655: PUSH
40656: LD_INT 3
40658: MINUS
40659: PUSH
40660: LD_VAR 0 2
40664: PUSH
40665: LD_INT 3
40667: MINUS
40668: PUSH
40669: LD_INT 2
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: LIST
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: ST_TO_ADDR
// end ; 4 :
40684: GO 40965
40686: LD_INT 4
40688: DOUBLE
40689: EQUAL
40690: IFTRUE 40694
40692: GO 40827
40694: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
40695: LD_ADDR_VAR 0 5
40699: PUSH
40700: LD_VAR 0 1
40704: PUSH
40705: LD_VAR 0 2
40709: PUSH
40710: LD_INT 4
40712: PLUS
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: LIST
40721: PUSH
40722: LD_VAR 0 1
40726: PUSH
40727: LD_INT 3
40729: PLUS
40730: PUSH
40731: LD_VAR 0 2
40735: PUSH
40736: LD_INT 3
40738: PLUS
40739: PUSH
40740: LD_INT 5
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: LIST
40747: PUSH
40748: LD_VAR 0 1
40752: PUSH
40753: LD_INT 4
40755: PLUS
40756: PUSH
40757: LD_VAR 0 2
40761: PUSH
40762: LD_INT 4
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: LIST
40769: PUSH
40770: LD_VAR 0 1
40774: PUSH
40775: LD_VAR 0 2
40779: PUSH
40780: LD_INT 3
40782: MINUS
40783: PUSH
40784: LD_INT 3
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: LIST
40791: PUSH
40792: LD_VAR 0 1
40796: PUSH
40797: LD_INT 4
40799: MINUS
40800: PUSH
40801: LD_VAR 0 2
40805: PUSH
40806: LD_INT 4
40808: MINUS
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: LIST
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: ST_TO_ADDR
// end ; 5 :
40825: GO 40965
40827: LD_INT 5
40829: DOUBLE
40830: EQUAL
40831: IFTRUE 40835
40833: GO 40964
40835: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40836: LD_ADDR_VAR 0 5
40840: PUSH
40841: LD_VAR 0 1
40845: PUSH
40846: LD_INT 4
40848: MINUS
40849: PUSH
40850: LD_VAR 0 2
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: LIST
40862: PUSH
40863: LD_VAR 0 1
40867: PUSH
40868: LD_VAR 0 2
40872: PUSH
40873: LD_INT 4
40875: MINUS
40876: PUSH
40877: LD_INT 3
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: LIST
40884: PUSH
40885: LD_VAR 0 1
40889: PUSH
40890: LD_INT 4
40892: PLUS
40893: PUSH
40894: LD_VAR 0 2
40898: PUSH
40899: LD_INT 4
40901: PLUS
40902: PUSH
40903: LD_INT 5
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: LIST
40910: PUSH
40911: LD_VAR 0 1
40915: PUSH
40916: LD_INT 3
40918: PLUS
40919: PUSH
40920: LD_VAR 0 2
40924: PUSH
40925: LD_INT 4
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: LIST
40932: PUSH
40933: LD_VAR 0 1
40937: PUSH
40938: LD_VAR 0 2
40942: PUSH
40943: LD_INT 3
40945: PLUS
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: LIST
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: ST_TO_ADDR
// end ; end ;
40962: GO 40965
40964: POP
// result := list ;
40965: LD_ADDR_VAR 0 4
40969: PUSH
40970: LD_VAR 0 5
40974: ST_TO_ADDR
// end ;
40975: LD_VAR 0 4
40979: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40980: LD_INT 0
40982: PPUSH
40983: PPUSH
40984: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40985: LD_VAR 0 1
40989: NOT
40990: PUSH
40991: LD_VAR 0 2
40995: PUSH
40996: LD_INT 1
40998: PUSH
40999: LD_INT 2
41001: PUSH
41002: LD_INT 3
41004: PUSH
41005: LD_INT 4
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: IN
41014: NOT
41015: OR
41016: IFFALSE 41020
// exit ;
41018: GO 41112
// tmp := [ ] ;
41020: LD_ADDR_VAR 0 5
41024: PUSH
41025: EMPTY
41026: ST_TO_ADDR
// for i in units do
41027: LD_ADDR_VAR 0 4
41031: PUSH
41032: LD_VAR 0 1
41036: PUSH
41037: FOR_IN
41038: IFFALSE 41081
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
41040: LD_ADDR_VAR 0 5
41044: PUSH
41045: LD_VAR 0 5
41049: PPUSH
41050: LD_VAR 0 5
41054: PUSH
41055: LD_INT 1
41057: PLUS
41058: PPUSH
41059: LD_VAR 0 4
41063: PPUSH
41064: LD_VAR 0 2
41068: PPUSH
41069: CALL_OW 259
41073: PPUSH
41074: CALL_OW 2
41078: ST_TO_ADDR
41079: GO 41037
41081: POP
41082: POP
// if not tmp then
41083: LD_VAR 0 5
41087: NOT
41088: IFFALSE 41092
// exit ;
41090: GO 41112
// result := SortListByListDesc ( units , tmp ) ;
41092: LD_ADDR_VAR 0 3
41096: PUSH
41097: LD_VAR 0 1
41101: PPUSH
41102: LD_VAR 0 5
41106: PPUSH
41107: CALL_OW 77
41111: ST_TO_ADDR
// end ;
41112: LD_VAR 0 3
41116: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
41117: LD_INT 0
41119: PPUSH
41120: PPUSH
41121: PPUSH
// result := false ;
41122: LD_ADDR_VAR 0 3
41126: PUSH
41127: LD_INT 0
41129: ST_TO_ADDR
// x := GetX ( building ) ;
41130: LD_ADDR_VAR 0 4
41134: PUSH
41135: LD_VAR 0 2
41139: PPUSH
41140: CALL_OW 250
41144: ST_TO_ADDR
// y := GetY ( building ) ;
41145: LD_ADDR_VAR 0 5
41149: PUSH
41150: LD_VAR 0 2
41154: PPUSH
41155: CALL_OW 251
41159: ST_TO_ADDR
// if not building or not x or not y then
41160: LD_VAR 0 2
41164: NOT
41165: PUSH
41166: LD_VAR 0 4
41170: NOT
41171: OR
41172: PUSH
41173: LD_VAR 0 5
41177: NOT
41178: OR
41179: IFFALSE 41183
// exit ;
41181: GO 41275
// if GetTaskList ( unit ) then
41183: LD_VAR 0 1
41187: PPUSH
41188: CALL_OW 437
41192: IFFALSE 41275
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41194: LD_STRING e
41196: PUSH
41197: LD_VAR 0 1
41201: PPUSH
41202: CALL_OW 437
41206: PUSH
41207: LD_INT 1
41209: ARRAY
41210: PUSH
41211: LD_INT 1
41213: ARRAY
41214: EQUAL
41215: PUSH
41216: LD_VAR 0 4
41220: PUSH
41221: LD_VAR 0 1
41225: PPUSH
41226: CALL_OW 437
41230: PUSH
41231: LD_INT 1
41233: ARRAY
41234: PUSH
41235: LD_INT 2
41237: ARRAY
41238: EQUAL
41239: AND
41240: PUSH
41241: LD_VAR 0 5
41245: PUSH
41246: LD_VAR 0 1
41250: PPUSH
41251: CALL_OW 437
41255: PUSH
41256: LD_INT 1
41258: ARRAY
41259: PUSH
41260: LD_INT 3
41262: ARRAY
41263: EQUAL
41264: AND
41265: IFFALSE 41275
// result := true end ;
41267: LD_ADDR_VAR 0 3
41271: PUSH
41272: LD_INT 1
41274: ST_TO_ADDR
// end ;
41275: LD_VAR 0 3
41279: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
41280: LD_INT 0
41282: PPUSH
// result := false ;
41283: LD_ADDR_VAR 0 4
41287: PUSH
41288: LD_INT 0
41290: ST_TO_ADDR
// if GetTaskList ( unit ) then
41291: LD_VAR 0 1
41295: PPUSH
41296: CALL_OW 437
41300: IFFALSE 41383
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41302: LD_STRING M
41304: PUSH
41305: LD_VAR 0 1
41309: PPUSH
41310: CALL_OW 437
41314: PUSH
41315: LD_INT 1
41317: ARRAY
41318: PUSH
41319: LD_INT 1
41321: ARRAY
41322: EQUAL
41323: PUSH
41324: LD_VAR 0 2
41328: PUSH
41329: LD_VAR 0 1
41333: PPUSH
41334: CALL_OW 437
41338: PUSH
41339: LD_INT 1
41341: ARRAY
41342: PUSH
41343: LD_INT 2
41345: ARRAY
41346: EQUAL
41347: AND
41348: PUSH
41349: LD_VAR 0 3
41353: PUSH
41354: LD_VAR 0 1
41358: PPUSH
41359: CALL_OW 437
41363: PUSH
41364: LD_INT 1
41366: ARRAY
41367: PUSH
41368: LD_INT 3
41370: ARRAY
41371: EQUAL
41372: AND
41373: IFFALSE 41383
// result := true ;
41375: LD_ADDR_VAR 0 4
41379: PUSH
41380: LD_INT 1
41382: ST_TO_ADDR
// end ; end ;
41383: LD_VAR 0 4
41387: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
41388: LD_INT 0
41390: PPUSH
41391: PPUSH
41392: PPUSH
41393: PPUSH
// if not unit or not area then
41394: LD_VAR 0 1
41398: NOT
41399: PUSH
41400: LD_VAR 0 2
41404: NOT
41405: OR
41406: IFFALSE 41410
// exit ;
41408: GO 41574
// tmp := AreaToList ( area , i ) ;
41410: LD_ADDR_VAR 0 6
41414: PUSH
41415: LD_VAR 0 2
41419: PPUSH
41420: LD_VAR 0 5
41424: PPUSH
41425: CALL_OW 517
41429: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
41430: LD_ADDR_VAR 0 5
41434: PUSH
41435: DOUBLE
41436: LD_INT 1
41438: DEC
41439: ST_TO_ADDR
41440: LD_VAR 0 6
41444: PUSH
41445: LD_INT 1
41447: ARRAY
41448: PUSH
41449: FOR_TO
41450: IFFALSE 41572
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
41452: LD_ADDR_VAR 0 7
41456: PUSH
41457: LD_VAR 0 6
41461: PUSH
41462: LD_INT 1
41464: ARRAY
41465: PUSH
41466: LD_VAR 0 5
41470: ARRAY
41471: PUSH
41472: LD_VAR 0 6
41476: PUSH
41477: LD_INT 2
41479: ARRAY
41480: PUSH
41481: LD_VAR 0 5
41485: ARRAY
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
41491: LD_VAR 0 7
41495: PUSH
41496: LD_INT 1
41498: ARRAY
41499: PPUSH
41500: LD_VAR 0 7
41504: PUSH
41505: LD_INT 2
41507: ARRAY
41508: PPUSH
41509: CALL_OW 428
41513: PUSH
41514: LD_INT 0
41516: EQUAL
41517: IFFALSE 41570
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
41519: LD_VAR 0 1
41523: PPUSH
41524: LD_VAR 0 7
41528: PUSH
41529: LD_INT 1
41531: ARRAY
41532: PPUSH
41533: LD_VAR 0 7
41537: PUSH
41538: LD_INT 2
41540: ARRAY
41541: PPUSH
41542: LD_VAR 0 3
41546: PPUSH
41547: CALL_OW 48
// result := IsPlaced ( unit ) ;
41551: LD_ADDR_VAR 0 4
41555: PUSH
41556: LD_VAR 0 1
41560: PPUSH
41561: CALL_OW 305
41565: ST_TO_ADDR
// exit ;
41566: POP
41567: POP
41568: GO 41574
// end ; end ;
41570: GO 41449
41572: POP
41573: POP
// end ;
41574: LD_VAR 0 4
41578: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
41579: LD_INT 0
41581: PPUSH
41582: PPUSH
41583: PPUSH
// if not side or side > 8 then
41584: LD_VAR 0 1
41588: NOT
41589: PUSH
41590: LD_VAR 0 1
41594: PUSH
41595: LD_INT 8
41597: GREATER
41598: OR
41599: IFFALSE 41603
// exit ;
41601: GO 41790
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
41603: LD_ADDR_VAR 0 4
41607: PUSH
41608: LD_INT 22
41610: PUSH
41611: LD_VAR 0 1
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 21
41622: PUSH
41623: LD_INT 3
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PPUSH
41634: CALL_OW 69
41638: ST_TO_ADDR
// if not tmp then
41639: LD_VAR 0 4
41643: NOT
41644: IFFALSE 41648
// exit ;
41646: GO 41790
// enable_addtolog := true ;
41648: LD_ADDR_OWVAR 81
41652: PUSH
41653: LD_INT 1
41655: ST_TO_ADDR
// AddToLog ( [ ) ;
41656: LD_STRING [
41658: PPUSH
41659: CALL_OW 561
// for i in tmp do
41663: LD_ADDR_VAR 0 3
41667: PUSH
41668: LD_VAR 0 4
41672: PUSH
41673: FOR_IN
41674: IFFALSE 41781
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
41676: LD_STRING [
41678: PUSH
41679: LD_VAR 0 3
41683: PPUSH
41684: CALL_OW 266
41688: STR
41689: PUSH
41690: LD_STRING , 
41692: STR
41693: PUSH
41694: LD_VAR 0 3
41698: PPUSH
41699: CALL_OW 250
41703: STR
41704: PUSH
41705: LD_STRING , 
41707: STR
41708: PUSH
41709: LD_VAR 0 3
41713: PPUSH
41714: CALL_OW 251
41718: STR
41719: PUSH
41720: LD_STRING , 
41722: STR
41723: PUSH
41724: LD_VAR 0 3
41728: PPUSH
41729: CALL_OW 254
41733: STR
41734: PUSH
41735: LD_STRING , 
41737: STR
41738: PUSH
41739: LD_VAR 0 3
41743: PPUSH
41744: LD_INT 1
41746: PPUSH
41747: CALL_OW 268
41751: STR
41752: PUSH
41753: LD_STRING , 
41755: STR
41756: PUSH
41757: LD_VAR 0 3
41761: PPUSH
41762: LD_INT 2
41764: PPUSH
41765: CALL_OW 268
41769: STR
41770: PUSH
41771: LD_STRING ],
41773: STR
41774: PPUSH
41775: CALL_OW 561
// end ;
41779: GO 41673
41781: POP
41782: POP
// AddToLog ( ]; ) ;
41783: LD_STRING ];
41785: PPUSH
41786: CALL_OW 561
// end ;
41790: LD_VAR 0 2
41794: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
41795: LD_INT 0
41797: PPUSH
41798: PPUSH
41799: PPUSH
41800: PPUSH
41801: PPUSH
// if not area or not rate or not max then
41802: LD_VAR 0 1
41806: NOT
41807: PUSH
41808: LD_VAR 0 2
41812: NOT
41813: OR
41814: PUSH
41815: LD_VAR 0 4
41819: NOT
41820: OR
41821: IFFALSE 41825
// exit ;
41823: GO 42014
// while 1 do
41825: LD_INT 1
41827: IFFALSE 42014
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41829: LD_ADDR_VAR 0 9
41833: PUSH
41834: LD_VAR 0 1
41838: PPUSH
41839: LD_INT 1
41841: PPUSH
41842: CALL_OW 287
41846: PUSH
41847: LD_INT 10
41849: MUL
41850: ST_TO_ADDR
// r := rate / 10 ;
41851: LD_ADDR_VAR 0 7
41855: PUSH
41856: LD_VAR 0 2
41860: PUSH
41861: LD_INT 10
41863: DIVREAL
41864: ST_TO_ADDR
// time := 1 1$00 ;
41865: LD_ADDR_VAR 0 8
41869: PUSH
41870: LD_INT 2100
41872: ST_TO_ADDR
// if amount < min then
41873: LD_VAR 0 9
41877: PUSH
41878: LD_VAR 0 3
41882: LESS
41883: IFFALSE 41901
// r := r * 2 else
41885: LD_ADDR_VAR 0 7
41889: PUSH
41890: LD_VAR 0 7
41894: PUSH
41895: LD_INT 2
41897: MUL
41898: ST_TO_ADDR
41899: GO 41927
// if amount > max then
41901: LD_VAR 0 9
41905: PUSH
41906: LD_VAR 0 4
41910: GREATER
41911: IFFALSE 41927
// r := r / 2 ;
41913: LD_ADDR_VAR 0 7
41917: PUSH
41918: LD_VAR 0 7
41922: PUSH
41923: LD_INT 2
41925: DIVREAL
41926: ST_TO_ADDR
// time := time / r ;
41927: LD_ADDR_VAR 0 8
41931: PUSH
41932: LD_VAR 0 8
41936: PUSH
41937: LD_VAR 0 7
41941: DIVREAL
41942: ST_TO_ADDR
// if time < 0 then
41943: LD_VAR 0 8
41947: PUSH
41948: LD_INT 0
41950: LESS
41951: IFFALSE 41968
// time := time * - 1 ;
41953: LD_ADDR_VAR 0 8
41957: PUSH
41958: LD_VAR 0 8
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: MUL
41967: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
41968: LD_VAR 0 8
41972: PUSH
41973: LD_INT 35
41975: PPUSH
41976: LD_INT 875
41978: PPUSH
41979: CALL_OW 12
41983: PLUS
41984: PPUSH
41985: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41989: LD_INT 1
41991: PPUSH
41992: LD_INT 5
41994: PPUSH
41995: CALL_OW 12
41999: PPUSH
42000: LD_VAR 0 1
42004: PPUSH
42005: LD_INT 1
42007: PPUSH
42008: CALL_OW 55
// end ;
42012: GO 41825
// end ;
42014: LD_VAR 0 5
42018: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
42019: LD_INT 0
42021: PPUSH
42022: PPUSH
42023: PPUSH
42024: PPUSH
42025: PPUSH
42026: PPUSH
42027: PPUSH
42028: PPUSH
// if not turrets or not factories then
42029: LD_VAR 0 1
42033: NOT
42034: PUSH
42035: LD_VAR 0 2
42039: NOT
42040: OR
42041: IFFALSE 42045
// exit ;
42043: GO 42352
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
42045: LD_ADDR_VAR 0 10
42049: PUSH
42050: LD_INT 5
42052: PUSH
42053: LD_INT 6
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 2
42062: PUSH
42063: LD_INT 4
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 3
42072: PUSH
42073: LD_INT 5
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 24
42087: PUSH
42088: LD_INT 25
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 23
42097: PUSH
42098: LD_INT 27
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 42
42111: PUSH
42112: LD_INT 43
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 44
42121: PUSH
42122: LD_INT 46
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 45
42131: PUSH
42132: LD_INT 47
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: LIST
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: LIST
42148: ST_TO_ADDR
// result := [ ] ;
42149: LD_ADDR_VAR 0 3
42153: PUSH
42154: EMPTY
42155: ST_TO_ADDR
// for i in turrets do
42156: LD_ADDR_VAR 0 4
42160: PUSH
42161: LD_VAR 0 1
42165: PUSH
42166: FOR_IN
42167: IFFALSE 42350
// begin nat := GetNation ( i ) ;
42169: LD_ADDR_VAR 0 7
42173: PUSH
42174: LD_VAR 0 4
42178: PPUSH
42179: CALL_OW 248
42183: ST_TO_ADDR
// weapon := 0 ;
42184: LD_ADDR_VAR 0 8
42188: PUSH
42189: LD_INT 0
42191: ST_TO_ADDR
// if not nat then
42192: LD_VAR 0 7
42196: NOT
42197: IFFALSE 42201
// continue ;
42199: GO 42166
// for j in list [ nat ] do
42201: LD_ADDR_VAR 0 5
42205: PUSH
42206: LD_VAR 0 10
42210: PUSH
42211: LD_VAR 0 7
42215: ARRAY
42216: PUSH
42217: FOR_IN
42218: IFFALSE 42259
// if GetBWeapon ( i ) = j [ 1 ] then
42220: LD_VAR 0 4
42224: PPUSH
42225: CALL_OW 269
42229: PUSH
42230: LD_VAR 0 5
42234: PUSH
42235: LD_INT 1
42237: ARRAY
42238: EQUAL
42239: IFFALSE 42257
// begin weapon := j [ 2 ] ;
42241: LD_ADDR_VAR 0 8
42245: PUSH
42246: LD_VAR 0 5
42250: PUSH
42251: LD_INT 2
42253: ARRAY
42254: ST_TO_ADDR
// break ;
42255: GO 42259
// end ;
42257: GO 42217
42259: POP
42260: POP
// if not weapon then
42261: LD_VAR 0 8
42265: NOT
42266: IFFALSE 42270
// continue ;
42268: GO 42166
// for k in factories do
42270: LD_ADDR_VAR 0 6
42274: PUSH
42275: LD_VAR 0 2
42279: PUSH
42280: FOR_IN
42281: IFFALSE 42346
// begin weapons := AvailableWeaponList ( k ) ;
42283: LD_ADDR_VAR 0 9
42287: PUSH
42288: LD_VAR 0 6
42292: PPUSH
42293: CALL_OW 478
42297: ST_TO_ADDR
// if not weapons then
42298: LD_VAR 0 9
42302: NOT
42303: IFFALSE 42307
// continue ;
42305: GO 42280
// if weapon in weapons then
42307: LD_VAR 0 8
42311: PUSH
42312: LD_VAR 0 9
42316: IN
42317: IFFALSE 42344
// begin result := [ i , weapon ] ;
42319: LD_ADDR_VAR 0 3
42323: PUSH
42324: LD_VAR 0 4
42328: PUSH
42329: LD_VAR 0 8
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: ST_TO_ADDR
// exit ;
42338: POP
42339: POP
42340: POP
42341: POP
42342: GO 42352
// end ; end ;
42344: GO 42280
42346: POP
42347: POP
// end ;
42348: GO 42166
42350: POP
42351: POP
// end ;
42352: LD_VAR 0 3
42356: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
42357: LD_INT 0
42359: PPUSH
// if not side or side > 8 then
42360: LD_VAR 0 3
42364: NOT
42365: PUSH
42366: LD_VAR 0 3
42370: PUSH
42371: LD_INT 8
42373: GREATER
42374: OR
42375: IFFALSE 42379
// exit ;
42377: GO 42438
// if not range then
42379: LD_VAR 0 4
42383: NOT
42384: IFFALSE 42395
// range := - 12 ;
42386: LD_ADDR_VAR 0 4
42390: PUSH
42391: LD_INT 12
42393: NEG
42394: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
42395: LD_VAR 0 1
42399: PPUSH
42400: LD_VAR 0 2
42404: PPUSH
42405: LD_VAR 0 3
42409: PPUSH
42410: LD_VAR 0 4
42414: PPUSH
42415: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
42419: LD_VAR 0 1
42423: PPUSH
42424: LD_VAR 0 2
42428: PPUSH
42429: LD_VAR 0 3
42433: PPUSH
42434: CALL_OW 331
// end ;
42438: LD_VAR 0 5
42442: RET
// export function Video ( mode ) ; begin
42443: LD_INT 0
42445: PPUSH
// ingame_video = mode ;
42446: LD_ADDR_OWVAR 52
42450: PUSH
42451: LD_VAR 0 1
42455: ST_TO_ADDR
// interface_hidden = mode ;
42456: LD_ADDR_OWVAR 54
42460: PUSH
42461: LD_VAR 0 1
42465: ST_TO_ADDR
// end ;
42466: LD_VAR 0 2
42470: RET
// export function Join ( array , element ) ; begin
42471: LD_INT 0
42473: PPUSH
// result := Replace ( array , array + 1 , element ) ;
42474: LD_ADDR_VAR 0 3
42478: PUSH
42479: LD_VAR 0 1
42483: PPUSH
42484: LD_VAR 0 1
42488: PUSH
42489: LD_INT 1
42491: PLUS
42492: PPUSH
42493: LD_VAR 0 2
42497: PPUSH
42498: CALL_OW 1
42502: ST_TO_ADDR
// end ;
42503: LD_VAR 0 3
42507: RET
// export function JoinUnion ( array , element ) ; begin
42508: LD_INT 0
42510: PPUSH
// result := array union element ;
42511: LD_ADDR_VAR 0 3
42515: PUSH
42516: LD_VAR 0 1
42520: PUSH
42521: LD_VAR 0 2
42525: UNION
42526: ST_TO_ADDR
// end ;
42527: LD_VAR 0 3
42531: RET
// export function GetBehemoths ( side ) ; begin
42532: LD_INT 0
42534: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
42535: LD_ADDR_VAR 0 2
42539: PUSH
42540: LD_INT 22
42542: PUSH
42543: LD_VAR 0 1
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 31
42554: PUSH
42555: LD_INT 25
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PPUSH
42566: CALL_OW 69
42570: ST_TO_ADDR
// end ;
42571: LD_VAR 0 2
42575: RET
// export function Shuffle ( array ) ; var i , index ; begin
42576: LD_INT 0
42578: PPUSH
42579: PPUSH
42580: PPUSH
// result := [ ] ;
42581: LD_ADDR_VAR 0 2
42585: PUSH
42586: EMPTY
42587: ST_TO_ADDR
// if not array then
42588: LD_VAR 0 1
42592: NOT
42593: IFFALSE 42597
// exit ;
42595: GO 42696
// Randomize ;
42597: CALL_OW 10
// for i = array downto 1 do
42601: LD_ADDR_VAR 0 3
42605: PUSH
42606: DOUBLE
42607: LD_VAR 0 1
42611: INC
42612: ST_TO_ADDR
42613: LD_INT 1
42615: PUSH
42616: FOR_DOWNTO
42617: IFFALSE 42694
// begin index := rand ( 1 , array ) ;
42619: LD_ADDR_VAR 0 4
42623: PUSH
42624: LD_INT 1
42626: PPUSH
42627: LD_VAR 0 1
42631: PPUSH
42632: CALL_OW 12
42636: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
42637: LD_ADDR_VAR 0 2
42641: PUSH
42642: LD_VAR 0 2
42646: PPUSH
42647: LD_VAR 0 2
42651: PUSH
42652: LD_INT 1
42654: PLUS
42655: PPUSH
42656: LD_VAR 0 1
42660: PUSH
42661: LD_VAR 0 4
42665: ARRAY
42666: PPUSH
42667: CALL_OW 2
42671: ST_TO_ADDR
// array := Delete ( array , index ) ;
42672: LD_ADDR_VAR 0 1
42676: PUSH
42677: LD_VAR 0 1
42681: PPUSH
42682: LD_VAR 0 4
42686: PPUSH
42687: CALL_OW 3
42691: ST_TO_ADDR
// end ;
42692: GO 42616
42694: POP
42695: POP
// end ;
42696: LD_VAR 0 2
42700: RET
// export function GetBaseMaterials ( base ) ; begin
42701: LD_INT 0
42703: PPUSH
// result := [ 0 , 0 , 0 ] ;
42704: LD_ADDR_VAR 0 2
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: LIST
42722: ST_TO_ADDR
// if not base then
42723: LD_VAR 0 1
42727: NOT
42728: IFFALSE 42732
// exit ;
42730: GO 42781
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
42732: LD_ADDR_VAR 0 2
42736: PUSH
42737: LD_VAR 0 1
42741: PPUSH
42742: LD_INT 1
42744: PPUSH
42745: CALL_OW 275
42749: PUSH
42750: LD_VAR 0 1
42754: PPUSH
42755: LD_INT 2
42757: PPUSH
42758: CALL_OW 275
42762: PUSH
42763: LD_VAR 0 1
42767: PPUSH
42768: LD_INT 3
42770: PPUSH
42771: CALL_OW 275
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: LIST
42780: ST_TO_ADDR
// end ;
42781: LD_VAR 0 2
42785: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
42786: LD_INT 0
42788: PPUSH
42789: PPUSH
// result := array ;
42790: LD_ADDR_VAR 0 3
42794: PUSH
42795: LD_VAR 0 1
42799: ST_TO_ADDR
// if size >= result then
42800: LD_VAR 0 2
42804: PUSH
42805: LD_VAR 0 3
42809: GREATEREQUAL
42810: IFFALSE 42814
// exit ;
42812: GO 42864
// if size then
42814: LD_VAR 0 2
42818: IFFALSE 42864
// for i := array downto size do
42820: LD_ADDR_VAR 0 4
42824: PUSH
42825: DOUBLE
42826: LD_VAR 0 1
42830: INC
42831: ST_TO_ADDR
42832: LD_VAR 0 2
42836: PUSH
42837: FOR_DOWNTO
42838: IFFALSE 42862
// result := Delete ( result , result ) ;
42840: LD_ADDR_VAR 0 3
42844: PUSH
42845: LD_VAR 0 3
42849: PPUSH
42850: LD_VAR 0 3
42854: PPUSH
42855: CALL_OW 3
42859: ST_TO_ADDR
42860: GO 42837
42862: POP
42863: POP
// end ;
42864: LD_VAR 0 3
42868: RET
// export function ComExit ( unit ) ; var tmp ; begin
42869: LD_INT 0
42871: PPUSH
42872: PPUSH
// if not IsInUnit ( unit ) then
42873: LD_VAR 0 1
42877: PPUSH
42878: CALL_OW 310
42882: NOT
42883: IFFALSE 42887
// exit ;
42885: GO 42947
// tmp := IsInUnit ( unit ) ;
42887: LD_ADDR_VAR 0 3
42891: PUSH
42892: LD_VAR 0 1
42896: PPUSH
42897: CALL_OW 310
42901: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42902: LD_VAR 0 3
42906: PPUSH
42907: CALL_OW 247
42911: PUSH
42912: LD_INT 2
42914: EQUAL
42915: IFFALSE 42928
// ComExitVehicle ( unit ) else
42917: LD_VAR 0 1
42921: PPUSH
42922: CALL_OW 121
42926: GO 42937
// ComExitBuilding ( unit ) ;
42928: LD_VAR 0 1
42932: PPUSH
42933: CALL_OW 122
// result := tmp ;
42937: LD_ADDR_VAR 0 2
42941: PUSH
42942: LD_VAR 0 3
42946: ST_TO_ADDR
// end ;
42947: LD_VAR 0 2
42951: RET
// export function ComExitAll ( units ) ; var i ; begin
42952: LD_INT 0
42954: PPUSH
42955: PPUSH
// if not units then
42956: LD_VAR 0 1
42960: NOT
42961: IFFALSE 42965
// exit ;
42963: GO 42991
// for i in units do
42965: LD_ADDR_VAR 0 3
42969: PUSH
42970: LD_VAR 0 1
42974: PUSH
42975: FOR_IN
42976: IFFALSE 42989
// ComExit ( i ) ;
42978: LD_VAR 0 3
42982: PPUSH
42983: CALL 42869 0 1
42987: GO 42975
42989: POP
42990: POP
// end ;
42991: LD_VAR 0 2
42995: RET
// export function ResetHc ; begin
42996: LD_INT 0
42998: PPUSH
// InitHc ;
42999: CALL_OW 19
// hc_importance := 0 ;
43003: LD_ADDR_OWVAR 32
43007: PUSH
43008: LD_INT 0
43010: ST_TO_ADDR
// end ;
43011: LD_VAR 0 1
43015: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
43016: LD_INT 0
43018: PPUSH
43019: PPUSH
43020: PPUSH
// _x := ( x1 + x2 ) div 2 ;
43021: LD_ADDR_VAR 0 6
43025: PUSH
43026: LD_VAR 0 1
43030: PUSH
43031: LD_VAR 0 3
43035: PLUS
43036: PUSH
43037: LD_INT 2
43039: DIV
43040: ST_TO_ADDR
// if _x < 0 then
43041: LD_VAR 0 6
43045: PUSH
43046: LD_INT 0
43048: LESS
43049: IFFALSE 43066
// _x := _x * - 1 ;
43051: LD_ADDR_VAR 0 6
43055: PUSH
43056: LD_VAR 0 6
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: MUL
43065: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
43066: LD_ADDR_VAR 0 7
43070: PUSH
43071: LD_VAR 0 2
43075: PUSH
43076: LD_VAR 0 4
43080: PLUS
43081: PUSH
43082: LD_INT 2
43084: DIV
43085: ST_TO_ADDR
// if _y < 0 then
43086: LD_VAR 0 7
43090: PUSH
43091: LD_INT 0
43093: LESS
43094: IFFALSE 43111
// _y := _y * - 1 ;
43096: LD_ADDR_VAR 0 7
43100: PUSH
43101: LD_VAR 0 7
43105: PUSH
43106: LD_INT 1
43108: NEG
43109: MUL
43110: ST_TO_ADDR
// result := [ _x , _y ] ;
43111: LD_ADDR_VAR 0 5
43115: PUSH
43116: LD_VAR 0 6
43120: PUSH
43121: LD_VAR 0 7
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: ST_TO_ADDR
// end ;
43130: LD_VAR 0 5
43134: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
43135: LD_INT 0
43137: PPUSH
43138: PPUSH
43139: PPUSH
43140: PPUSH
// task := GetTaskList ( unit ) ;
43141: LD_ADDR_VAR 0 7
43145: PUSH
43146: LD_VAR 0 1
43150: PPUSH
43151: CALL_OW 437
43155: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
43156: LD_VAR 0 7
43160: NOT
43161: PUSH
43162: LD_VAR 0 1
43166: PPUSH
43167: LD_VAR 0 2
43171: PPUSH
43172: CALL_OW 308
43176: NOT
43177: AND
43178: IFFALSE 43182
// exit ;
43180: GO 43300
// if IsInArea ( unit , area ) then
43182: LD_VAR 0 1
43186: PPUSH
43187: LD_VAR 0 2
43191: PPUSH
43192: CALL_OW 308
43196: IFFALSE 43214
// begin ComMoveToArea ( unit , goAway ) ;
43198: LD_VAR 0 1
43202: PPUSH
43203: LD_VAR 0 3
43207: PPUSH
43208: CALL_OW 113
// exit ;
43212: GO 43300
// end ; if task [ 1 ] [ 1 ] <> M then
43214: LD_VAR 0 7
43218: PUSH
43219: LD_INT 1
43221: ARRAY
43222: PUSH
43223: LD_INT 1
43225: ARRAY
43226: PUSH
43227: LD_STRING M
43229: NONEQUAL
43230: IFFALSE 43234
// exit ;
43232: GO 43300
// x := task [ 1 ] [ 2 ] ;
43234: LD_ADDR_VAR 0 5
43238: PUSH
43239: LD_VAR 0 7
43243: PUSH
43244: LD_INT 1
43246: ARRAY
43247: PUSH
43248: LD_INT 2
43250: ARRAY
43251: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
43252: LD_ADDR_VAR 0 6
43256: PUSH
43257: LD_VAR 0 7
43261: PUSH
43262: LD_INT 1
43264: ARRAY
43265: PUSH
43266: LD_INT 3
43268: ARRAY
43269: ST_TO_ADDR
// if InArea ( x , y , area ) then
43270: LD_VAR 0 5
43274: PPUSH
43275: LD_VAR 0 6
43279: PPUSH
43280: LD_VAR 0 2
43284: PPUSH
43285: CALL_OW 309
43289: IFFALSE 43300
// ComStop ( unit ) ;
43291: LD_VAR 0 1
43295: PPUSH
43296: CALL_OW 141
// end ;
43300: LD_VAR 0 4
43304: RET
// export function Abs ( value ) ; begin
43305: LD_INT 0
43307: PPUSH
// result := value ;
43308: LD_ADDR_VAR 0 2
43312: PUSH
43313: LD_VAR 0 1
43317: ST_TO_ADDR
// if value < 0 then
43318: LD_VAR 0 1
43322: PUSH
43323: LD_INT 0
43325: LESS
43326: IFFALSE 43343
// result := value * - 1 ;
43328: LD_ADDR_VAR 0 2
43332: PUSH
43333: LD_VAR 0 1
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: MUL
43342: ST_TO_ADDR
// end ;
43343: LD_VAR 0 2
43347: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
43348: LD_INT 0
43350: PPUSH
43351: PPUSH
43352: PPUSH
43353: PPUSH
43354: PPUSH
43355: PPUSH
43356: PPUSH
43357: PPUSH
// if not unit or not building then
43358: LD_VAR 0 1
43362: NOT
43363: PUSH
43364: LD_VAR 0 2
43368: NOT
43369: OR
43370: IFFALSE 43374
// exit ;
43372: GO 43600
// x := GetX ( building ) ;
43374: LD_ADDR_VAR 0 4
43378: PUSH
43379: LD_VAR 0 2
43383: PPUSH
43384: CALL_OW 250
43388: ST_TO_ADDR
// y := GetY ( building ) ;
43389: LD_ADDR_VAR 0 6
43393: PUSH
43394: LD_VAR 0 2
43398: PPUSH
43399: CALL_OW 251
43403: ST_TO_ADDR
// d := GetDir ( building ) ;
43404: LD_ADDR_VAR 0 8
43408: PUSH
43409: LD_VAR 0 2
43413: PPUSH
43414: CALL_OW 254
43418: ST_TO_ADDR
// r := 4 ;
43419: LD_ADDR_VAR 0 9
43423: PUSH
43424: LD_INT 4
43426: ST_TO_ADDR
// for i := 1 to 5 do
43427: LD_ADDR_VAR 0 10
43431: PUSH
43432: DOUBLE
43433: LD_INT 1
43435: DEC
43436: ST_TO_ADDR
43437: LD_INT 5
43439: PUSH
43440: FOR_TO
43441: IFFALSE 43598
// begin _x := ShiftX ( x , d , r + i ) ;
43443: LD_ADDR_VAR 0 5
43447: PUSH
43448: LD_VAR 0 4
43452: PPUSH
43453: LD_VAR 0 8
43457: PPUSH
43458: LD_VAR 0 9
43462: PUSH
43463: LD_VAR 0 10
43467: PLUS
43468: PPUSH
43469: CALL_OW 272
43473: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
43474: LD_ADDR_VAR 0 7
43478: PUSH
43479: LD_VAR 0 6
43483: PPUSH
43484: LD_VAR 0 8
43488: PPUSH
43489: LD_VAR 0 9
43493: PUSH
43494: LD_VAR 0 10
43498: PLUS
43499: PPUSH
43500: CALL_OW 273
43504: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
43505: LD_VAR 0 5
43509: PPUSH
43510: LD_VAR 0 7
43514: PPUSH
43515: CALL_OW 488
43519: PUSH
43520: LD_VAR 0 5
43524: PPUSH
43525: LD_VAR 0 7
43529: PPUSH
43530: CALL_OW 428
43534: PPUSH
43535: CALL_OW 247
43539: PUSH
43540: LD_INT 3
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: IN
43550: NOT
43551: AND
43552: IFFALSE 43596
// begin ComMoveXY ( unit , _x , _y ) ;
43554: LD_VAR 0 1
43558: PPUSH
43559: LD_VAR 0 5
43563: PPUSH
43564: LD_VAR 0 7
43568: PPUSH
43569: CALL_OW 111
// result := [ _x , _y ] ;
43573: LD_ADDR_VAR 0 3
43577: PUSH
43578: LD_VAR 0 5
43582: PUSH
43583: LD_VAR 0 7
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: ST_TO_ADDR
// exit ;
43592: POP
43593: POP
43594: GO 43600
// end ; end ;
43596: GO 43440
43598: POP
43599: POP
// end ;
43600: LD_VAR 0 3
43604: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
43605: LD_INT 0
43607: PPUSH
43608: PPUSH
43609: PPUSH
// result := 0 ;
43610: LD_ADDR_VAR 0 3
43614: PUSH
43615: LD_INT 0
43617: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
43618: LD_VAR 0 1
43622: PUSH
43623: LD_INT 0
43625: LESS
43626: PUSH
43627: LD_VAR 0 1
43631: PUSH
43632: LD_INT 8
43634: GREATER
43635: OR
43636: PUSH
43637: LD_VAR 0 2
43641: PUSH
43642: LD_INT 0
43644: LESS
43645: OR
43646: PUSH
43647: LD_VAR 0 2
43651: PUSH
43652: LD_INT 8
43654: GREATER
43655: OR
43656: IFFALSE 43660
// exit ;
43658: GO 43735
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
43660: LD_ADDR_VAR 0 4
43664: PUSH
43665: LD_INT 22
43667: PUSH
43668: LD_VAR 0 2
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PPUSH
43677: CALL_OW 69
43681: PUSH
43682: FOR_IN
43683: IFFALSE 43733
// begin un := UnitShoot ( i ) ;
43685: LD_ADDR_VAR 0 5
43689: PUSH
43690: LD_VAR 0 4
43694: PPUSH
43695: CALL_OW 504
43699: ST_TO_ADDR
// if GetSide ( un ) = side1 then
43700: LD_VAR 0 5
43704: PPUSH
43705: CALL_OW 255
43709: PUSH
43710: LD_VAR 0 1
43714: EQUAL
43715: IFFALSE 43731
// begin result := un ;
43717: LD_ADDR_VAR 0 3
43721: PUSH
43722: LD_VAR 0 5
43726: ST_TO_ADDR
// exit ;
43727: POP
43728: POP
43729: GO 43735
// end ; end ;
43731: GO 43682
43733: POP
43734: POP
// end ;
43735: LD_VAR 0 3
43739: RET
// export function GetCargoBay ( units ) ; begin
43740: LD_INT 0
43742: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
43743: LD_ADDR_VAR 0 2
43747: PUSH
43748: LD_VAR 0 1
43752: PPUSH
43753: LD_INT 2
43755: PUSH
43756: LD_INT 34
43758: PUSH
43759: LD_INT 12
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 34
43768: PUSH
43769: LD_INT 51
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 34
43778: PUSH
43779: LD_INT 32
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 34
43788: PUSH
43789: LD_EXP 36
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: PPUSH
43805: CALL_OW 72
43809: ST_TO_ADDR
// end ;
43810: LD_VAR 0 2
43814: RET
// export function Negate ( value ) ; begin
43815: LD_INT 0
43817: PPUSH
// result := not value ;
43818: LD_ADDR_VAR 0 2
43822: PUSH
43823: LD_VAR 0 1
43827: NOT
43828: ST_TO_ADDR
// end ;
43829: LD_VAR 0 2
43833: RET
// export function Inc ( value ) ; begin
43834: LD_INT 0
43836: PPUSH
// result := value + 1 ;
43837: LD_ADDR_VAR 0 2
43841: PUSH
43842: LD_VAR 0 1
43846: PUSH
43847: LD_INT 1
43849: PLUS
43850: ST_TO_ADDR
// end ;
43851: LD_VAR 0 2
43855: RET
// export function Dec ( value ) ; begin
43856: LD_INT 0
43858: PPUSH
// result := value - 1 ;
43859: LD_ADDR_VAR 0 2
43863: PUSH
43864: LD_VAR 0 1
43868: PUSH
43869: LD_INT 1
43871: MINUS
43872: ST_TO_ADDR
// end ;
43873: LD_VAR 0 2
43877: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43878: LD_INT 0
43880: PPUSH
43881: PPUSH
43882: PPUSH
43883: PPUSH
43884: PPUSH
43885: PPUSH
43886: PPUSH
43887: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43888: LD_VAR 0 1
43892: PPUSH
43893: LD_VAR 0 2
43897: PPUSH
43898: CALL_OW 488
43902: NOT
43903: PUSH
43904: LD_VAR 0 3
43908: PPUSH
43909: LD_VAR 0 4
43913: PPUSH
43914: CALL_OW 488
43918: NOT
43919: OR
43920: IFFALSE 43933
// begin result := - 1 ;
43922: LD_ADDR_VAR 0 5
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: ST_TO_ADDR
// exit ;
43931: GO 44168
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43933: LD_ADDR_VAR 0 12
43937: PUSH
43938: LD_VAR 0 1
43942: PPUSH
43943: LD_VAR 0 2
43947: PPUSH
43948: LD_VAR 0 3
43952: PPUSH
43953: LD_VAR 0 4
43957: PPUSH
43958: CALL 43016 0 4
43962: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
43963: LD_ADDR_VAR 0 11
43967: PUSH
43968: LD_VAR 0 1
43972: PPUSH
43973: LD_VAR 0 2
43977: PPUSH
43978: LD_VAR 0 12
43982: PUSH
43983: LD_INT 1
43985: ARRAY
43986: PPUSH
43987: LD_VAR 0 12
43991: PUSH
43992: LD_INT 2
43994: ARRAY
43995: PPUSH
43996: CALL_OW 298
44000: ST_TO_ADDR
// distance := 9999 ;
44001: LD_ADDR_VAR 0 10
44005: PUSH
44006: LD_INT 9999
44008: ST_TO_ADDR
// for i := 0 to 5 do
44009: LD_ADDR_VAR 0 6
44013: PUSH
44014: DOUBLE
44015: LD_INT 0
44017: DEC
44018: ST_TO_ADDR
44019: LD_INT 5
44021: PUSH
44022: FOR_TO
44023: IFFALSE 44166
// begin _x := ShiftX ( x1 , i , centerDist ) ;
44025: LD_ADDR_VAR 0 7
44029: PUSH
44030: LD_VAR 0 1
44034: PPUSH
44035: LD_VAR 0 6
44039: PPUSH
44040: LD_VAR 0 11
44044: PPUSH
44045: CALL_OW 272
44049: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
44050: LD_ADDR_VAR 0 8
44054: PUSH
44055: LD_VAR 0 2
44059: PPUSH
44060: LD_VAR 0 6
44064: PPUSH
44065: LD_VAR 0 11
44069: PPUSH
44070: CALL_OW 273
44074: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44075: LD_VAR 0 7
44079: PPUSH
44080: LD_VAR 0 8
44084: PPUSH
44085: CALL_OW 488
44089: NOT
44090: IFFALSE 44094
// continue ;
44092: GO 44022
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
44094: LD_ADDR_VAR 0 9
44098: PUSH
44099: LD_VAR 0 12
44103: PUSH
44104: LD_INT 1
44106: ARRAY
44107: PPUSH
44108: LD_VAR 0 12
44112: PUSH
44113: LD_INT 2
44115: ARRAY
44116: PPUSH
44117: LD_VAR 0 7
44121: PPUSH
44122: LD_VAR 0 8
44126: PPUSH
44127: CALL_OW 298
44131: ST_TO_ADDR
// if tmp < distance then
44132: LD_VAR 0 9
44136: PUSH
44137: LD_VAR 0 10
44141: LESS
44142: IFFALSE 44164
// begin result := i ;
44144: LD_ADDR_VAR 0 5
44148: PUSH
44149: LD_VAR 0 6
44153: ST_TO_ADDR
// distance := tmp ;
44154: LD_ADDR_VAR 0 10
44158: PUSH
44159: LD_VAR 0 9
44163: ST_TO_ADDR
// end ; end ;
44164: GO 44022
44166: POP
44167: POP
// end ;
44168: LD_VAR 0 5
44172: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44173: LD_INT 0
44175: PPUSH
44176: PPUSH
// if not driver or not IsInUnit ( driver ) then
44177: LD_VAR 0 1
44181: NOT
44182: PUSH
44183: LD_VAR 0 1
44187: PPUSH
44188: CALL_OW 310
44192: NOT
44193: OR
44194: IFFALSE 44198
// exit ;
44196: GO 44288
// vehicle := IsInUnit ( driver ) ;
44198: LD_ADDR_VAR 0 3
44202: PUSH
44203: LD_VAR 0 1
44207: PPUSH
44208: CALL_OW 310
44212: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44213: LD_VAR 0 1
44217: PPUSH
44218: LD_STRING \
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: PUSH
44248: LD_STRING E
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: LD_VAR 0 3
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PPUSH
44284: CALL_OW 446
// end ;
44288: LD_VAR 0 2
44292: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44293: LD_INT 0
44295: PPUSH
44296: PPUSH
// if not driver or not IsInUnit ( driver ) then
44297: LD_VAR 0 1
44301: NOT
44302: PUSH
44303: LD_VAR 0 1
44307: PPUSH
44308: CALL_OW 310
44312: NOT
44313: OR
44314: IFFALSE 44318
// exit ;
44316: GO 44408
// vehicle := IsInUnit ( driver ) ;
44318: LD_ADDR_VAR 0 3
44322: PUSH
44323: LD_VAR 0 1
44327: PPUSH
44328: CALL_OW 310
44332: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44333: LD_VAR 0 1
44337: PPUSH
44338: LD_STRING \
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: PUSH
44368: LD_STRING E
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: LD_VAR 0 3
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PPUSH
44404: CALL_OW 447
// end ;
44408: LD_VAR 0 2
44412: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
44413: LD_INT 0
44415: PPUSH
44416: PPUSH
44417: PPUSH
// tmp := [ ] ;
44418: LD_ADDR_VAR 0 5
44422: PUSH
44423: EMPTY
44424: ST_TO_ADDR
// for i in units do
44425: LD_ADDR_VAR 0 4
44429: PUSH
44430: LD_VAR 0 1
44434: PUSH
44435: FOR_IN
44436: IFFALSE 44474
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
44438: LD_ADDR_VAR 0 5
44442: PUSH
44443: LD_VAR 0 5
44447: PPUSH
44448: LD_VAR 0 5
44452: PUSH
44453: LD_INT 1
44455: PLUS
44456: PPUSH
44457: LD_VAR 0 4
44461: PPUSH
44462: CALL_OW 256
44466: PPUSH
44467: CALL_OW 2
44471: ST_TO_ADDR
44472: GO 44435
44474: POP
44475: POP
// if not tmp then
44476: LD_VAR 0 5
44480: NOT
44481: IFFALSE 44485
// exit ;
44483: GO 44533
// if asc then
44485: LD_VAR 0 2
44489: IFFALSE 44513
// result := SortListByListAsc ( units , tmp ) else
44491: LD_ADDR_VAR 0 3
44495: PUSH
44496: LD_VAR 0 1
44500: PPUSH
44501: LD_VAR 0 5
44505: PPUSH
44506: CALL_OW 76
44510: ST_TO_ADDR
44511: GO 44533
// result := SortListByListDesc ( units , tmp ) ;
44513: LD_ADDR_VAR 0 3
44517: PUSH
44518: LD_VAR 0 1
44522: PPUSH
44523: LD_VAR 0 5
44527: PPUSH
44528: CALL_OW 77
44532: ST_TO_ADDR
// end ;
44533: LD_VAR 0 3
44537: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
44538: LD_INT 0
44540: PPUSH
44541: PPUSH
// task := GetTaskList ( mech ) ;
44542: LD_ADDR_VAR 0 4
44546: PUSH
44547: LD_VAR 0 1
44551: PPUSH
44552: CALL_OW 437
44556: ST_TO_ADDR
// if not task then
44557: LD_VAR 0 4
44561: NOT
44562: IFFALSE 44566
// exit ;
44564: GO 44608
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
44566: LD_ADDR_VAR 0 3
44570: PUSH
44571: LD_VAR 0 4
44575: PUSH
44576: LD_INT 1
44578: ARRAY
44579: PUSH
44580: LD_INT 1
44582: ARRAY
44583: PUSH
44584: LD_STRING r
44586: EQUAL
44587: PUSH
44588: LD_VAR 0 4
44592: PUSH
44593: LD_INT 1
44595: ARRAY
44596: PUSH
44597: LD_INT 4
44599: ARRAY
44600: PUSH
44601: LD_VAR 0 2
44605: EQUAL
44606: AND
44607: ST_TO_ADDR
// end ;
44608: LD_VAR 0 3
44612: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
44613: LD_INT 0
44615: PPUSH
// SetDir ( unit , d ) ;
44616: LD_VAR 0 1
44620: PPUSH
44621: LD_VAR 0 4
44625: PPUSH
44626: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
44630: LD_VAR 0 1
44634: PPUSH
44635: LD_VAR 0 2
44639: PPUSH
44640: LD_VAR 0 3
44644: PPUSH
44645: LD_VAR 0 5
44649: PPUSH
44650: CALL_OW 48
// end ;
44654: LD_VAR 0 6
44658: RET
// export function ToNaturalNumber ( number ) ; begin
44659: LD_INT 0
44661: PPUSH
// result := number div 1 ;
44662: LD_ADDR_VAR 0 2
44666: PUSH
44667: LD_VAR 0 1
44671: PUSH
44672: LD_INT 1
44674: DIV
44675: ST_TO_ADDR
// if number < 0 then
44676: LD_VAR 0 1
44680: PUSH
44681: LD_INT 0
44683: LESS
44684: IFFALSE 44694
// result := 0 ;
44686: LD_ADDR_VAR 0 2
44690: PUSH
44691: LD_INT 0
44693: ST_TO_ADDR
// end ;
44694: LD_VAR 0 2
44698: RET
// export function SortByClass ( units , class ) ; var un ; begin
44699: LD_INT 0
44701: PPUSH
44702: PPUSH
// if not units or not class then
44703: LD_VAR 0 1
44707: NOT
44708: PUSH
44709: LD_VAR 0 2
44713: NOT
44714: OR
44715: IFFALSE 44719
// exit ;
44717: GO 44814
// result := [ ] ;
44719: LD_ADDR_VAR 0 3
44723: PUSH
44724: EMPTY
44725: ST_TO_ADDR
// for un in units do
44726: LD_ADDR_VAR 0 4
44730: PUSH
44731: LD_VAR 0 1
44735: PUSH
44736: FOR_IN
44737: IFFALSE 44812
// if GetClass ( un ) = class then
44739: LD_VAR 0 4
44743: PPUSH
44744: CALL_OW 257
44748: PUSH
44749: LD_VAR 0 2
44753: EQUAL
44754: IFFALSE 44781
// result := Insert ( result , 1 , un ) else
44756: LD_ADDR_VAR 0 3
44760: PUSH
44761: LD_VAR 0 3
44765: PPUSH
44766: LD_INT 1
44768: PPUSH
44769: LD_VAR 0 4
44773: PPUSH
44774: CALL_OW 2
44778: ST_TO_ADDR
44779: GO 44810
// result := Replace ( result , result + 1 , un ) ;
44781: LD_ADDR_VAR 0 3
44785: PUSH
44786: LD_VAR 0 3
44790: PPUSH
44791: LD_VAR 0 3
44795: PUSH
44796: LD_INT 1
44798: PLUS
44799: PPUSH
44800: LD_VAR 0 4
44804: PPUSH
44805: CALL_OW 1
44809: ST_TO_ADDR
44810: GO 44736
44812: POP
44813: POP
// end ;
44814: LD_VAR 0 3
44818: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
44819: LD_INT 0
44821: PPUSH
44822: PPUSH
44823: PPUSH
44824: PPUSH
44825: PPUSH
44826: PPUSH
44827: PPUSH
// result := [ ] ;
44828: LD_ADDR_VAR 0 4
44832: PUSH
44833: EMPTY
44834: ST_TO_ADDR
// if x - r < 0 then
44835: LD_VAR 0 1
44839: PUSH
44840: LD_VAR 0 3
44844: MINUS
44845: PUSH
44846: LD_INT 0
44848: LESS
44849: IFFALSE 44861
// min_x := 0 else
44851: LD_ADDR_VAR 0 8
44855: PUSH
44856: LD_INT 0
44858: ST_TO_ADDR
44859: GO 44877
// min_x := x - r ;
44861: LD_ADDR_VAR 0 8
44865: PUSH
44866: LD_VAR 0 1
44870: PUSH
44871: LD_VAR 0 3
44875: MINUS
44876: ST_TO_ADDR
// if y - r < 0 then
44877: LD_VAR 0 2
44881: PUSH
44882: LD_VAR 0 3
44886: MINUS
44887: PUSH
44888: LD_INT 0
44890: LESS
44891: IFFALSE 44903
// min_y := 0 else
44893: LD_ADDR_VAR 0 7
44897: PUSH
44898: LD_INT 0
44900: ST_TO_ADDR
44901: GO 44919
// min_y := y - r ;
44903: LD_ADDR_VAR 0 7
44907: PUSH
44908: LD_VAR 0 2
44912: PUSH
44913: LD_VAR 0 3
44917: MINUS
44918: ST_TO_ADDR
// max_x := x + r ;
44919: LD_ADDR_VAR 0 9
44923: PUSH
44924: LD_VAR 0 1
44928: PUSH
44929: LD_VAR 0 3
44933: PLUS
44934: ST_TO_ADDR
// max_y := y + r ;
44935: LD_ADDR_VAR 0 10
44939: PUSH
44940: LD_VAR 0 2
44944: PUSH
44945: LD_VAR 0 3
44949: PLUS
44950: ST_TO_ADDR
// for _x = min_x to max_x do
44951: LD_ADDR_VAR 0 5
44955: PUSH
44956: DOUBLE
44957: LD_VAR 0 8
44961: DEC
44962: ST_TO_ADDR
44963: LD_VAR 0 9
44967: PUSH
44968: FOR_TO
44969: IFFALSE 45070
// for _y = min_y to max_y do
44971: LD_ADDR_VAR 0 6
44975: PUSH
44976: DOUBLE
44977: LD_VAR 0 7
44981: DEC
44982: ST_TO_ADDR
44983: LD_VAR 0 10
44987: PUSH
44988: FOR_TO
44989: IFFALSE 45066
// begin if not ValidHex ( _x , _y ) then
44991: LD_VAR 0 5
44995: PPUSH
44996: LD_VAR 0 6
45000: PPUSH
45001: CALL_OW 488
45005: NOT
45006: IFFALSE 45010
// continue ;
45008: GO 44988
// if GetResourceTypeXY ( _x , _y ) then
45010: LD_VAR 0 5
45014: PPUSH
45015: LD_VAR 0 6
45019: PPUSH
45020: CALL_OW 283
45024: IFFALSE 45064
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
45026: LD_ADDR_VAR 0 4
45030: PUSH
45031: LD_VAR 0 4
45035: PPUSH
45036: LD_VAR 0 4
45040: PUSH
45041: LD_INT 1
45043: PLUS
45044: PPUSH
45045: LD_VAR 0 5
45049: PUSH
45050: LD_VAR 0 6
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PPUSH
45059: CALL_OW 1
45063: ST_TO_ADDR
// end ;
45064: GO 44988
45066: POP
45067: POP
45068: GO 44968
45070: POP
45071: POP
// end ;
45072: LD_VAR 0 4
45076: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
45077: LD_INT 0
45079: PPUSH
45080: PPUSH
45081: PPUSH
45082: PPUSH
45083: PPUSH
45084: PPUSH
45085: PPUSH
45086: PPUSH
// if not units then
45087: LD_VAR 0 1
45091: NOT
45092: IFFALSE 45096
// exit ;
45094: GO 45622
// result := UnitFilter ( units , [ f_ok ] ) ;
45096: LD_ADDR_VAR 0 3
45100: PUSH
45101: LD_VAR 0 1
45105: PPUSH
45106: LD_INT 50
45108: PUSH
45109: EMPTY
45110: LIST
45111: PPUSH
45112: CALL_OW 72
45116: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
45117: LD_ADDR_VAR 0 8
45121: PUSH
45122: LD_VAR 0 1
45126: PUSH
45127: LD_INT 1
45129: ARRAY
45130: PPUSH
45131: CALL_OW 255
45135: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
45136: LD_ADDR_VAR 0 10
45140: PUSH
45141: LD_INT 29
45143: PUSH
45144: LD_EXP 39
45148: PUSH
45149: LD_INT 49
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: ST_TO_ADDR
// if not result then
45157: LD_VAR 0 3
45161: NOT
45162: IFFALSE 45166
// exit ;
45164: GO 45622
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
45166: LD_ADDR_VAR 0 5
45170: PUSH
45171: LD_INT 81
45173: PUSH
45174: LD_VAR 0 8
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PPUSH
45183: CALL_OW 69
45187: ST_TO_ADDR
// for i in result do
45188: LD_ADDR_VAR 0 4
45192: PUSH
45193: LD_VAR 0 3
45197: PUSH
45198: FOR_IN
45199: IFFALSE 45620
// begin tag := GetTag ( i ) + 1 ;
45201: LD_ADDR_VAR 0 9
45205: PUSH
45206: LD_VAR 0 4
45210: PPUSH
45211: CALL_OW 110
45215: PUSH
45216: LD_INT 1
45218: PLUS
45219: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
45220: LD_ADDR_VAR 0 7
45224: PUSH
45225: LD_VAR 0 4
45229: PPUSH
45230: CALL_OW 250
45234: PPUSH
45235: LD_VAR 0 4
45239: PPUSH
45240: CALL_OW 251
45244: PPUSH
45245: LD_INT 6
45247: PPUSH
45248: CALL 44819 0 3
45252: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
45253: LD_VAR 0 4
45257: PPUSH
45258: CALL_OW 247
45262: PUSH
45263: LD_INT 2
45265: EQUAL
45266: PUSH
45267: LD_VAR 0 7
45271: AND
45272: PUSH
45273: LD_VAR 0 4
45277: PPUSH
45278: CALL_OW 264
45282: PUSH
45283: LD_VAR 0 10
45287: IN
45288: NOT
45289: AND
45290: IFFALSE 45329
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
45292: LD_VAR 0 4
45296: PPUSH
45297: LD_VAR 0 7
45301: PUSH
45302: LD_INT 1
45304: ARRAY
45305: PUSH
45306: LD_INT 1
45308: ARRAY
45309: PPUSH
45310: LD_VAR 0 7
45314: PUSH
45315: LD_INT 1
45317: ARRAY
45318: PUSH
45319: LD_INT 2
45321: ARRAY
45322: PPUSH
45323: CALL_OW 116
45327: GO 45618
// if path > tag then
45329: LD_VAR 0 2
45333: PUSH
45334: LD_VAR 0 9
45338: GREATER
45339: IFFALSE 45547
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
45341: LD_ADDR_VAR 0 6
45345: PUSH
45346: LD_VAR 0 5
45350: PPUSH
45351: LD_INT 91
45353: PUSH
45354: LD_VAR 0 4
45358: PUSH
45359: LD_INT 8
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: LIST
45366: PPUSH
45367: CALL_OW 72
45371: ST_TO_ADDR
// if nearEnemy then
45372: LD_VAR 0 6
45376: IFFALSE 45445
// begin if GetWeapon ( i ) = ru_time_lapser then
45378: LD_VAR 0 4
45382: PPUSH
45383: CALL_OW 264
45387: PUSH
45388: LD_INT 49
45390: EQUAL
45391: IFFALSE 45419
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
45393: LD_VAR 0 4
45397: PPUSH
45398: LD_VAR 0 6
45402: PPUSH
45403: LD_VAR 0 4
45407: PPUSH
45408: CALL_OW 74
45412: PPUSH
45413: CALL_OW 112
45417: GO 45443
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
45419: LD_VAR 0 4
45423: PPUSH
45424: LD_VAR 0 6
45428: PPUSH
45429: LD_VAR 0 4
45433: PPUSH
45434: CALL_OW 74
45438: PPUSH
45439: CALL_OW 115
// end else
45443: GO 45545
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
45445: LD_VAR 0 4
45449: PPUSH
45450: LD_VAR 0 2
45454: PUSH
45455: LD_VAR 0 9
45459: ARRAY
45460: PUSH
45461: LD_INT 1
45463: ARRAY
45464: PPUSH
45465: LD_VAR 0 2
45469: PUSH
45470: LD_VAR 0 9
45474: ARRAY
45475: PUSH
45476: LD_INT 2
45478: ARRAY
45479: PPUSH
45480: CALL_OW 297
45484: PUSH
45485: LD_INT 6
45487: GREATER
45488: IFFALSE 45531
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
45490: LD_VAR 0 4
45494: PPUSH
45495: LD_VAR 0 2
45499: PUSH
45500: LD_VAR 0 9
45504: ARRAY
45505: PUSH
45506: LD_INT 1
45508: ARRAY
45509: PPUSH
45510: LD_VAR 0 2
45514: PUSH
45515: LD_VAR 0 9
45519: ARRAY
45520: PUSH
45521: LD_INT 2
45523: ARRAY
45524: PPUSH
45525: CALL_OW 114
45529: GO 45545
// SetTag ( i , tag ) ;
45531: LD_VAR 0 4
45535: PPUSH
45536: LD_VAR 0 9
45540: PPUSH
45541: CALL_OW 109
// end else
45545: GO 45618
// if enemy then
45547: LD_VAR 0 5
45551: IFFALSE 45618
// begin if GetWeapon ( i ) = ru_time_lapser then
45553: LD_VAR 0 4
45557: PPUSH
45558: CALL_OW 264
45562: PUSH
45563: LD_INT 49
45565: EQUAL
45566: IFFALSE 45594
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
45568: LD_VAR 0 4
45572: PPUSH
45573: LD_VAR 0 5
45577: PPUSH
45578: LD_VAR 0 4
45582: PPUSH
45583: CALL_OW 74
45587: PPUSH
45588: CALL_OW 112
45592: GO 45618
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
45594: LD_VAR 0 4
45598: PPUSH
45599: LD_VAR 0 5
45603: PPUSH
45604: LD_VAR 0 4
45608: PPUSH
45609: CALL_OW 74
45613: PPUSH
45614: CALL_OW 115
// end ; end ;
45618: GO 45198
45620: POP
45621: POP
// end ;
45622: LD_VAR 0 3
45626: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
45627: LD_INT 0
45629: PPUSH
45630: PPUSH
45631: PPUSH
// if not unit or IsInUnit ( unit ) then
45632: LD_VAR 0 1
45636: NOT
45637: PUSH
45638: LD_VAR 0 1
45642: PPUSH
45643: CALL_OW 310
45647: OR
45648: IFFALSE 45652
// exit ;
45650: GO 45743
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
45652: LD_ADDR_VAR 0 4
45656: PUSH
45657: LD_VAR 0 1
45661: PPUSH
45662: CALL_OW 250
45666: PPUSH
45667: LD_VAR 0 2
45671: PPUSH
45672: LD_INT 1
45674: PPUSH
45675: CALL_OW 272
45679: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
45680: LD_ADDR_VAR 0 5
45684: PUSH
45685: LD_VAR 0 1
45689: PPUSH
45690: CALL_OW 251
45694: PPUSH
45695: LD_VAR 0 2
45699: PPUSH
45700: LD_INT 1
45702: PPUSH
45703: CALL_OW 273
45707: ST_TO_ADDR
// if ValidHex ( x , y ) then
45708: LD_VAR 0 4
45712: PPUSH
45713: LD_VAR 0 5
45717: PPUSH
45718: CALL_OW 488
45722: IFFALSE 45743
// ComTurnXY ( unit , x , y ) ;
45724: LD_VAR 0 1
45728: PPUSH
45729: LD_VAR 0 4
45733: PPUSH
45734: LD_VAR 0 5
45738: PPUSH
45739: CALL_OW 118
// end ;
45743: LD_VAR 0 3
45747: RET
// export function SeeUnits ( side , units ) ; var i ; begin
45748: LD_INT 0
45750: PPUSH
45751: PPUSH
// result := false ;
45752: LD_ADDR_VAR 0 3
45756: PUSH
45757: LD_INT 0
45759: ST_TO_ADDR
// if not units then
45760: LD_VAR 0 2
45764: NOT
45765: IFFALSE 45769
// exit ;
45767: GO 45814
// for i in units do
45769: LD_ADDR_VAR 0 4
45773: PUSH
45774: LD_VAR 0 2
45778: PUSH
45779: FOR_IN
45780: IFFALSE 45812
// if See ( side , i ) then
45782: LD_VAR 0 1
45786: PPUSH
45787: LD_VAR 0 4
45791: PPUSH
45792: CALL_OW 292
45796: IFFALSE 45810
// begin result := true ;
45798: LD_ADDR_VAR 0 3
45802: PUSH
45803: LD_INT 1
45805: ST_TO_ADDR
// exit ;
45806: POP
45807: POP
45808: GO 45814
// end ;
45810: GO 45779
45812: POP
45813: POP
// end ;
45814: LD_VAR 0 3
45818: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
45819: LD_INT 0
45821: PPUSH
45822: PPUSH
45823: PPUSH
45824: PPUSH
// if not unit or not points then
45825: LD_VAR 0 1
45829: NOT
45830: PUSH
45831: LD_VAR 0 2
45835: NOT
45836: OR
45837: IFFALSE 45841
// exit ;
45839: GO 45931
// dist := 99999 ;
45841: LD_ADDR_VAR 0 5
45845: PUSH
45846: LD_INT 99999
45848: ST_TO_ADDR
// for i in points do
45849: LD_ADDR_VAR 0 4
45853: PUSH
45854: LD_VAR 0 2
45858: PUSH
45859: FOR_IN
45860: IFFALSE 45929
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45862: LD_ADDR_VAR 0 6
45866: PUSH
45867: LD_VAR 0 1
45871: PPUSH
45872: LD_VAR 0 4
45876: PUSH
45877: LD_INT 1
45879: ARRAY
45880: PPUSH
45881: LD_VAR 0 4
45885: PUSH
45886: LD_INT 2
45888: ARRAY
45889: PPUSH
45890: CALL_OW 297
45894: ST_TO_ADDR
// if tmpDist < dist then
45895: LD_VAR 0 6
45899: PUSH
45900: LD_VAR 0 5
45904: LESS
45905: IFFALSE 45927
// begin result := i ;
45907: LD_ADDR_VAR 0 3
45911: PUSH
45912: LD_VAR 0 4
45916: ST_TO_ADDR
// dist := tmpDist ;
45917: LD_ADDR_VAR 0 5
45921: PUSH
45922: LD_VAR 0 6
45926: ST_TO_ADDR
// end ; end ;
45927: GO 45859
45929: POP
45930: POP
// end ;
45931: LD_VAR 0 3
45935: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45936: LD_INT 0
45938: PPUSH
// uc_side := side ;
45939: LD_ADDR_OWVAR 20
45943: PUSH
45944: LD_VAR 0 1
45948: ST_TO_ADDR
// uc_nation := 3 ;
45949: LD_ADDR_OWVAR 21
45953: PUSH
45954: LD_INT 3
45956: ST_TO_ADDR
// vc_chassis := 25 ;
45957: LD_ADDR_OWVAR 37
45961: PUSH
45962: LD_INT 25
45964: ST_TO_ADDR
// vc_engine := engine_siberite ;
45965: LD_ADDR_OWVAR 39
45969: PUSH
45970: LD_INT 3
45972: ST_TO_ADDR
// vc_control := control_computer ;
45973: LD_ADDR_OWVAR 38
45977: PUSH
45978: LD_INT 3
45980: ST_TO_ADDR
// vc_weapon := 59 ;
45981: LD_ADDR_OWVAR 40
45985: PUSH
45986: LD_INT 59
45988: ST_TO_ADDR
// result := CreateVehicle ;
45989: LD_ADDR_VAR 0 5
45993: PUSH
45994: CALL_OW 45
45998: ST_TO_ADDR
// SetDir ( result , d ) ;
45999: LD_VAR 0 5
46003: PPUSH
46004: LD_VAR 0 4
46008: PPUSH
46009: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
46013: LD_VAR 0 5
46017: PPUSH
46018: LD_VAR 0 2
46022: PPUSH
46023: LD_VAR 0 3
46027: PPUSH
46028: LD_INT 0
46030: PPUSH
46031: CALL_OW 48
// end ;
46035: LD_VAR 0 5
46039: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
46040: LD_INT 0
46042: PPUSH
46043: PPUSH
46044: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
46045: LD_ADDR_VAR 0 2
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
46068: LD_VAR 0 1
46072: NOT
46073: PUSH
46074: LD_VAR 0 1
46078: PPUSH
46079: CALL_OW 264
46083: PUSH
46084: LD_INT 12
46086: PUSH
46087: LD_INT 51
46089: PUSH
46090: LD_INT 32
46092: PUSH
46093: LD_EXP 36
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: IN
46104: NOT
46105: OR
46106: IFFALSE 46110
// exit ;
46108: GO 46208
// for i := 1 to 3 do
46110: LD_ADDR_VAR 0 3
46114: PUSH
46115: DOUBLE
46116: LD_INT 1
46118: DEC
46119: ST_TO_ADDR
46120: LD_INT 3
46122: PUSH
46123: FOR_TO
46124: IFFALSE 46206
// begin tmp := GetCargo ( cargo , i ) ;
46126: LD_ADDR_VAR 0 4
46130: PUSH
46131: LD_VAR 0 1
46135: PPUSH
46136: LD_VAR 0 3
46140: PPUSH
46141: CALL_OW 289
46145: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
46146: LD_ADDR_VAR 0 2
46150: PUSH
46151: LD_VAR 0 2
46155: PPUSH
46156: LD_VAR 0 3
46160: PPUSH
46161: LD_VAR 0 4
46165: PPUSH
46166: CALL_OW 1
46170: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
46171: LD_ADDR_VAR 0 2
46175: PUSH
46176: LD_VAR 0 2
46180: PPUSH
46181: LD_INT 4
46183: PPUSH
46184: LD_VAR 0 2
46188: PUSH
46189: LD_INT 4
46191: ARRAY
46192: PUSH
46193: LD_VAR 0 4
46197: PLUS
46198: PPUSH
46199: CALL_OW 1
46203: ST_TO_ADDR
// end ;
46204: GO 46123
46206: POP
46207: POP
// end ;
46208: LD_VAR 0 2
46212: RET
// export function Length ( array ) ; begin
46213: LD_INT 0
46215: PPUSH
// result := array + 0 ;
46216: LD_ADDR_VAR 0 2
46220: PUSH
46221: LD_VAR 0 1
46225: PUSH
46226: LD_INT 0
46228: PLUS
46229: ST_TO_ADDR
// end ;
46230: LD_VAR 0 2
46234: RET
// export function PrepareArray ( array ) ; begin
46235: LD_INT 0
46237: PPUSH
// result := array diff 0 ;
46238: LD_ADDR_VAR 0 2
46242: PUSH
46243: LD_VAR 0 1
46247: PUSH
46248: LD_INT 0
46250: DIFF
46251: ST_TO_ADDR
// if not result [ 1 ] then
46252: LD_VAR 0 2
46256: PUSH
46257: LD_INT 1
46259: ARRAY
46260: NOT
46261: IFFALSE 46281
// result := Delete ( result , 1 ) ;
46263: LD_ADDR_VAR 0 2
46267: PUSH
46268: LD_VAR 0 2
46272: PPUSH
46273: LD_INT 1
46275: PPUSH
46276: CALL_OW 3
46280: ST_TO_ADDR
// end ; end_of_file
46281: LD_VAR 0 2
46285: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
46286: LD_INT 0
46288: PPUSH
// ar_miner := 81 ;
46289: LD_ADDR_EXP 42
46293: PUSH
46294: LD_INT 81
46296: ST_TO_ADDR
// ar_crane := 88 ;
46297: LD_ADDR_EXP 41
46301: PUSH
46302: LD_INT 88
46304: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
46305: LD_ADDR_EXP 36
46309: PUSH
46310: LD_INT 89
46312: ST_TO_ADDR
// us_hack := 99 ;
46313: LD_ADDR_EXP 37
46317: PUSH
46318: LD_INT 99
46320: ST_TO_ADDR
// us_artillery := 97 ;
46321: LD_ADDR_EXP 38
46325: PUSH
46326: LD_INT 97
46328: ST_TO_ADDR
// ar_bio_bomb := 91 ;
46329: LD_ADDR_EXP 39
46333: PUSH
46334: LD_INT 91
46336: ST_TO_ADDR
// ar_mortar := 92 ;
46337: LD_ADDR_EXP 40
46341: PUSH
46342: LD_INT 92
46344: ST_TO_ADDR
// ru_flamethrower := 93 ;
46345: LD_ADDR_EXP 43
46349: PUSH
46350: LD_INT 93
46352: ST_TO_ADDR
// ru_radar := 98 ;
46353: LD_ADDR_EXP 35
46357: PUSH
46358: LD_INT 98
46360: ST_TO_ADDR
// tech_Artillery := 80 ;
46361: LD_ADDR_EXP 44
46365: PUSH
46366: LD_INT 80
46368: ST_TO_ADDR
// tech_RadMat := 81 ;
46369: LD_ADDR_EXP 45
46373: PUSH
46374: LD_INT 81
46376: ST_TO_ADDR
// tech_BasicTools := 82 ;
46377: LD_ADDR_EXP 46
46381: PUSH
46382: LD_INT 82
46384: ST_TO_ADDR
// tech_Cargo := 83 ;
46385: LD_ADDR_EXP 47
46389: PUSH
46390: LD_INT 83
46392: ST_TO_ADDR
// tech_Track := 84 ;
46393: LD_ADDR_EXP 48
46397: PUSH
46398: LD_INT 84
46400: ST_TO_ADDR
// tech_Crane := 85 ;
46401: LD_ADDR_EXP 49
46405: PUSH
46406: LD_INT 85
46408: ST_TO_ADDR
// tech_Bulldozer := 86 ;
46409: LD_ADDR_EXP 50
46413: PUSH
46414: LD_INT 86
46416: ST_TO_ADDR
// tech_Hovercraft := 87 ;
46417: LD_ADDR_EXP 51
46421: PUSH
46422: LD_INT 87
46424: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
46425: LD_ADDR_EXP 52
46429: PUSH
46430: LD_INT 88
46432: ST_TO_ADDR
// end ;
46433: LD_VAR 0 1
46437: RET
// every 1 do
46438: GO 46440
46440: DISABLE
// InitGlobalVariables ; end_of_file
46441: CALL 46286 0 0
46445: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
46446: LD_VAR 0 1
46450: PPUSH
46451: LD_VAR 0 2
46455: PPUSH
46456: LD_VAR 0 3
46460: PPUSH
46461: LD_VAR 0 4
46465: PPUSH
46466: LD_VAR 0 5
46470: PPUSH
46471: LD_VAR 0 6
46475: PPUSH
46476: CALL 46556 0 6
// end ;
46480: PPOPN 6
46482: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
46483: LD_INT 0
46485: PPUSH
// begin if not units then
46486: LD_VAR 0 1
46490: NOT
46491: IFFALSE 46495
// exit ;
46493: GO 46495
// end ;
46495: PPOPN 7
46497: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
46498: CALL 46527 0 0
// end ; end_of_file
46502: PPOPN 1
46504: END
// every 0 0$1 do
46505: GO 46507
46507: DISABLE
// begin enable ;
46508: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
46509: LD_STRING updateTimer(
46511: PUSH
46512: LD_OWVAR 1
46516: STR
46517: PUSH
46518: LD_STRING );
46520: STR
46521: PPUSH
46522: CALL_OW 559
// end ;
46526: END
// export function SOS_MapStart ( ) ; begin
46527: LD_INT 0
46529: PPUSH
// if streamModeActive then
46530: LD_EXP 53
46534: IFFALSE 46543
// DefineStreamItems ( true ) ;
46536: LD_INT 1
46538: PPUSH
46539: CALL 48197 0 1
// UpdateFactoryWaypoints ( ) ;
46543: CALL 61058 0 0
// UpdateWarehouseGatheringPoints ( ) ;
46547: CALL 61315 0 0
// end ;
46551: LD_VAR 0 1
46555: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46556: LD_INT 0
46558: PPUSH
// if p2 = 100 then
46559: LD_VAR 0 2
46563: PUSH
46564: LD_INT 100
46566: EQUAL
46567: IFFALSE 47570
// begin if not StreamModeActive then
46569: LD_EXP 53
46573: NOT
46574: IFFALSE 46584
// StreamModeActive := true ;
46576: LD_ADDR_EXP 53
46580: PUSH
46581: LD_INT 1
46583: ST_TO_ADDR
// if p3 = 0 then
46584: LD_VAR 0 3
46588: PUSH
46589: LD_INT 0
46591: EQUAL
46592: IFFALSE 46598
// InitStreamMode ;
46594: CALL 47733 0 0
// if p3 = 1 then
46598: LD_VAR 0 3
46602: PUSH
46603: LD_INT 1
46605: EQUAL
46606: IFFALSE 46616
// sRocket := true ;
46608: LD_ADDR_EXP 58
46612: PUSH
46613: LD_INT 1
46615: ST_TO_ADDR
// if p3 = 2 then
46616: LD_VAR 0 3
46620: PUSH
46621: LD_INT 2
46623: EQUAL
46624: IFFALSE 46634
// sSpeed := true ;
46626: LD_ADDR_EXP 57
46630: PUSH
46631: LD_INT 1
46633: ST_TO_ADDR
// if p3 = 3 then
46634: LD_VAR 0 3
46638: PUSH
46639: LD_INT 3
46641: EQUAL
46642: IFFALSE 46652
// sEngine := true ;
46644: LD_ADDR_EXP 59
46648: PUSH
46649: LD_INT 1
46651: ST_TO_ADDR
// if p3 = 4 then
46652: LD_VAR 0 3
46656: PUSH
46657: LD_INT 4
46659: EQUAL
46660: IFFALSE 46670
// sSpec := true ;
46662: LD_ADDR_EXP 56
46666: PUSH
46667: LD_INT 1
46669: ST_TO_ADDR
// if p3 = 5 then
46670: LD_VAR 0 3
46674: PUSH
46675: LD_INT 5
46677: EQUAL
46678: IFFALSE 46688
// sLevel := true ;
46680: LD_ADDR_EXP 60
46684: PUSH
46685: LD_INT 1
46687: ST_TO_ADDR
// if p3 = 6 then
46688: LD_VAR 0 3
46692: PUSH
46693: LD_INT 6
46695: EQUAL
46696: IFFALSE 46706
// sArmoury := true ;
46698: LD_ADDR_EXP 61
46702: PUSH
46703: LD_INT 1
46705: ST_TO_ADDR
// if p3 = 7 then
46706: LD_VAR 0 3
46710: PUSH
46711: LD_INT 7
46713: EQUAL
46714: IFFALSE 46724
// sRadar := true ;
46716: LD_ADDR_EXP 62
46720: PUSH
46721: LD_INT 1
46723: ST_TO_ADDR
// if p3 = 8 then
46724: LD_VAR 0 3
46728: PUSH
46729: LD_INT 8
46731: EQUAL
46732: IFFALSE 46742
// sBunker := true ;
46734: LD_ADDR_EXP 63
46738: PUSH
46739: LD_INT 1
46741: ST_TO_ADDR
// if p3 = 9 then
46742: LD_VAR 0 3
46746: PUSH
46747: LD_INT 9
46749: EQUAL
46750: IFFALSE 46760
// sHack := true ;
46752: LD_ADDR_EXP 64
46756: PUSH
46757: LD_INT 1
46759: ST_TO_ADDR
// if p3 = 10 then
46760: LD_VAR 0 3
46764: PUSH
46765: LD_INT 10
46767: EQUAL
46768: IFFALSE 46778
// sFire := true ;
46770: LD_ADDR_EXP 65
46774: PUSH
46775: LD_INT 1
46777: ST_TO_ADDR
// if p3 = 11 then
46778: LD_VAR 0 3
46782: PUSH
46783: LD_INT 11
46785: EQUAL
46786: IFFALSE 46796
// sRefresh := true ;
46788: LD_ADDR_EXP 66
46792: PUSH
46793: LD_INT 1
46795: ST_TO_ADDR
// if p3 = 12 then
46796: LD_VAR 0 3
46800: PUSH
46801: LD_INT 12
46803: EQUAL
46804: IFFALSE 46814
// sExp := true ;
46806: LD_ADDR_EXP 67
46810: PUSH
46811: LD_INT 1
46813: ST_TO_ADDR
// if p3 = 13 then
46814: LD_VAR 0 3
46818: PUSH
46819: LD_INT 13
46821: EQUAL
46822: IFFALSE 46832
// sDepot := true ;
46824: LD_ADDR_EXP 68
46828: PUSH
46829: LD_INT 1
46831: ST_TO_ADDR
// if p3 = 14 then
46832: LD_VAR 0 3
46836: PUSH
46837: LD_INT 14
46839: EQUAL
46840: IFFALSE 46850
// sFlag := true ;
46842: LD_ADDR_EXP 69
46846: PUSH
46847: LD_INT 1
46849: ST_TO_ADDR
// if p3 = 15 then
46850: LD_VAR 0 3
46854: PUSH
46855: LD_INT 15
46857: EQUAL
46858: IFFALSE 46868
// sKamikadze := true ;
46860: LD_ADDR_EXP 77
46864: PUSH
46865: LD_INT 1
46867: ST_TO_ADDR
// if p3 = 16 then
46868: LD_VAR 0 3
46872: PUSH
46873: LD_INT 16
46875: EQUAL
46876: IFFALSE 46886
// sTroll := true ;
46878: LD_ADDR_EXP 78
46882: PUSH
46883: LD_INT 1
46885: ST_TO_ADDR
// if p3 = 17 then
46886: LD_VAR 0 3
46890: PUSH
46891: LD_INT 17
46893: EQUAL
46894: IFFALSE 46904
// sSlow := true ;
46896: LD_ADDR_EXP 79
46900: PUSH
46901: LD_INT 1
46903: ST_TO_ADDR
// if p3 = 18 then
46904: LD_VAR 0 3
46908: PUSH
46909: LD_INT 18
46911: EQUAL
46912: IFFALSE 46922
// sLack := true ;
46914: LD_ADDR_EXP 80
46918: PUSH
46919: LD_INT 1
46921: ST_TO_ADDR
// if p3 = 19 then
46922: LD_VAR 0 3
46926: PUSH
46927: LD_INT 19
46929: EQUAL
46930: IFFALSE 46940
// sTank := true ;
46932: LD_ADDR_EXP 82
46936: PUSH
46937: LD_INT 1
46939: ST_TO_ADDR
// if p3 = 20 then
46940: LD_VAR 0 3
46944: PUSH
46945: LD_INT 20
46947: EQUAL
46948: IFFALSE 46958
// sRemote := true ;
46950: LD_ADDR_EXP 83
46954: PUSH
46955: LD_INT 1
46957: ST_TO_ADDR
// if p3 = 21 then
46958: LD_VAR 0 3
46962: PUSH
46963: LD_INT 21
46965: EQUAL
46966: IFFALSE 46976
// sPowell := true ;
46968: LD_ADDR_EXP 84
46972: PUSH
46973: LD_INT 1
46975: ST_TO_ADDR
// if p3 = 22 then
46976: LD_VAR 0 3
46980: PUSH
46981: LD_INT 22
46983: EQUAL
46984: IFFALSE 46994
// sTeleport := true ;
46986: LD_ADDR_EXP 87
46990: PUSH
46991: LD_INT 1
46993: ST_TO_ADDR
// if p3 = 23 then
46994: LD_VAR 0 3
46998: PUSH
46999: LD_INT 23
47001: EQUAL
47002: IFFALSE 47012
// sOilTower := true ;
47004: LD_ADDR_EXP 89
47008: PUSH
47009: LD_INT 1
47011: ST_TO_ADDR
// if p3 = 24 then
47012: LD_VAR 0 3
47016: PUSH
47017: LD_INT 24
47019: EQUAL
47020: IFFALSE 47030
// sShovel := true ;
47022: LD_ADDR_EXP 90
47026: PUSH
47027: LD_INT 1
47029: ST_TO_ADDR
// if p3 = 25 then
47030: LD_VAR 0 3
47034: PUSH
47035: LD_INT 25
47037: EQUAL
47038: IFFALSE 47048
// sSheik := true ;
47040: LD_ADDR_EXP 91
47044: PUSH
47045: LD_INT 1
47047: ST_TO_ADDR
// if p3 = 26 then
47048: LD_VAR 0 3
47052: PUSH
47053: LD_INT 26
47055: EQUAL
47056: IFFALSE 47066
// sEarthquake := true ;
47058: LD_ADDR_EXP 93
47062: PUSH
47063: LD_INT 1
47065: ST_TO_ADDR
// if p3 = 27 then
47066: LD_VAR 0 3
47070: PUSH
47071: LD_INT 27
47073: EQUAL
47074: IFFALSE 47084
// sAI := true ;
47076: LD_ADDR_EXP 94
47080: PUSH
47081: LD_INT 1
47083: ST_TO_ADDR
// if p3 = 28 then
47084: LD_VAR 0 3
47088: PUSH
47089: LD_INT 28
47091: EQUAL
47092: IFFALSE 47102
// sCargo := true ;
47094: LD_ADDR_EXP 97
47098: PUSH
47099: LD_INT 1
47101: ST_TO_ADDR
// if p3 = 29 then
47102: LD_VAR 0 3
47106: PUSH
47107: LD_INT 29
47109: EQUAL
47110: IFFALSE 47120
// sDLaser := true ;
47112: LD_ADDR_EXP 98
47116: PUSH
47117: LD_INT 1
47119: ST_TO_ADDR
// if p3 = 30 then
47120: LD_VAR 0 3
47124: PUSH
47125: LD_INT 30
47127: EQUAL
47128: IFFALSE 47138
// sExchange := true ;
47130: LD_ADDR_EXP 99
47134: PUSH
47135: LD_INT 1
47137: ST_TO_ADDR
// if p3 = 31 then
47138: LD_VAR 0 3
47142: PUSH
47143: LD_INT 31
47145: EQUAL
47146: IFFALSE 47156
// sFac := true ;
47148: LD_ADDR_EXP 100
47152: PUSH
47153: LD_INT 1
47155: ST_TO_ADDR
// if p3 = 32 then
47156: LD_VAR 0 3
47160: PUSH
47161: LD_INT 32
47163: EQUAL
47164: IFFALSE 47174
// sPower := true ;
47166: LD_ADDR_EXP 101
47170: PUSH
47171: LD_INT 1
47173: ST_TO_ADDR
// if p3 = 33 then
47174: LD_VAR 0 3
47178: PUSH
47179: LD_INT 33
47181: EQUAL
47182: IFFALSE 47192
// sRandom := true ;
47184: LD_ADDR_EXP 102
47188: PUSH
47189: LD_INT 1
47191: ST_TO_ADDR
// if p3 = 34 then
47192: LD_VAR 0 3
47196: PUSH
47197: LD_INT 34
47199: EQUAL
47200: IFFALSE 47210
// sShield := true ;
47202: LD_ADDR_EXP 103
47206: PUSH
47207: LD_INT 1
47209: ST_TO_ADDR
// if p3 = 35 then
47210: LD_VAR 0 3
47214: PUSH
47215: LD_INT 35
47217: EQUAL
47218: IFFALSE 47228
// sTime := true ;
47220: LD_ADDR_EXP 104
47224: PUSH
47225: LD_INT 1
47227: ST_TO_ADDR
// if p3 = 36 then
47228: LD_VAR 0 3
47232: PUSH
47233: LD_INT 36
47235: EQUAL
47236: IFFALSE 47246
// sTools := true ;
47238: LD_ADDR_EXP 105
47242: PUSH
47243: LD_INT 1
47245: ST_TO_ADDR
// if p3 = 101 then
47246: LD_VAR 0 3
47250: PUSH
47251: LD_INT 101
47253: EQUAL
47254: IFFALSE 47264
// sSold := true ;
47256: LD_ADDR_EXP 70
47260: PUSH
47261: LD_INT 1
47263: ST_TO_ADDR
// if p3 = 102 then
47264: LD_VAR 0 3
47268: PUSH
47269: LD_INT 102
47271: EQUAL
47272: IFFALSE 47282
// sDiff := true ;
47274: LD_ADDR_EXP 71
47278: PUSH
47279: LD_INT 1
47281: ST_TO_ADDR
// if p3 = 103 then
47282: LD_VAR 0 3
47286: PUSH
47287: LD_INT 103
47289: EQUAL
47290: IFFALSE 47300
// sFog := true ;
47292: LD_ADDR_EXP 74
47296: PUSH
47297: LD_INT 1
47299: ST_TO_ADDR
// if p3 = 104 then
47300: LD_VAR 0 3
47304: PUSH
47305: LD_INT 104
47307: EQUAL
47308: IFFALSE 47318
// sReset := true ;
47310: LD_ADDR_EXP 75
47314: PUSH
47315: LD_INT 1
47317: ST_TO_ADDR
// if p3 = 105 then
47318: LD_VAR 0 3
47322: PUSH
47323: LD_INT 105
47325: EQUAL
47326: IFFALSE 47336
// sSun := true ;
47328: LD_ADDR_EXP 76
47332: PUSH
47333: LD_INT 1
47335: ST_TO_ADDR
// if p3 = 106 then
47336: LD_VAR 0 3
47340: PUSH
47341: LD_INT 106
47343: EQUAL
47344: IFFALSE 47354
// sTiger := true ;
47346: LD_ADDR_EXP 72
47350: PUSH
47351: LD_INT 1
47353: ST_TO_ADDR
// if p3 = 107 then
47354: LD_VAR 0 3
47358: PUSH
47359: LD_INT 107
47361: EQUAL
47362: IFFALSE 47372
// sBomb := true ;
47364: LD_ADDR_EXP 73
47368: PUSH
47369: LD_INT 1
47371: ST_TO_ADDR
// if p3 = 108 then
47372: LD_VAR 0 3
47376: PUSH
47377: LD_INT 108
47379: EQUAL
47380: IFFALSE 47390
// sWound := true ;
47382: LD_ADDR_EXP 81
47386: PUSH
47387: LD_INT 1
47389: ST_TO_ADDR
// if p3 = 109 then
47390: LD_VAR 0 3
47394: PUSH
47395: LD_INT 109
47397: EQUAL
47398: IFFALSE 47408
// sBetray := true ;
47400: LD_ADDR_EXP 85
47404: PUSH
47405: LD_INT 1
47407: ST_TO_ADDR
// if p3 = 110 then
47408: LD_VAR 0 3
47412: PUSH
47413: LD_INT 110
47415: EQUAL
47416: IFFALSE 47426
// sContamin := true ;
47418: LD_ADDR_EXP 86
47422: PUSH
47423: LD_INT 1
47425: ST_TO_ADDR
// if p3 = 111 then
47426: LD_VAR 0 3
47430: PUSH
47431: LD_INT 111
47433: EQUAL
47434: IFFALSE 47444
// sOil := true ;
47436: LD_ADDR_EXP 88
47440: PUSH
47441: LD_INT 1
47443: ST_TO_ADDR
// if p3 = 112 then
47444: LD_VAR 0 3
47448: PUSH
47449: LD_INT 112
47451: EQUAL
47452: IFFALSE 47462
// sStu := true ;
47454: LD_ADDR_EXP 92
47458: PUSH
47459: LD_INT 1
47461: ST_TO_ADDR
// if p3 = 113 then
47462: LD_VAR 0 3
47466: PUSH
47467: LD_INT 113
47469: EQUAL
47470: IFFALSE 47480
// sBazooka := true ;
47472: LD_ADDR_EXP 95
47476: PUSH
47477: LD_INT 1
47479: ST_TO_ADDR
// if p3 = 114 then
47480: LD_VAR 0 3
47484: PUSH
47485: LD_INT 114
47487: EQUAL
47488: IFFALSE 47498
// sMortar := true ;
47490: LD_ADDR_EXP 96
47494: PUSH
47495: LD_INT 1
47497: ST_TO_ADDR
// if p3 = 115 then
47498: LD_VAR 0 3
47502: PUSH
47503: LD_INT 115
47505: EQUAL
47506: IFFALSE 47516
// sRanger := true ;
47508: LD_ADDR_EXP 106
47512: PUSH
47513: LD_INT 1
47515: ST_TO_ADDR
// if p3 = 116 then
47516: LD_VAR 0 3
47520: PUSH
47521: LD_INT 116
47523: EQUAL
47524: IFFALSE 47534
// sComputer := true ;
47526: LD_ADDR_EXP 107
47530: PUSH
47531: LD_INT 1
47533: ST_TO_ADDR
// if p3 = 117 then
47534: LD_VAR 0 3
47538: PUSH
47539: LD_INT 117
47541: EQUAL
47542: IFFALSE 47552
// s30 := true ;
47544: LD_ADDR_EXP 108
47548: PUSH
47549: LD_INT 1
47551: ST_TO_ADDR
// if p3 = 118 then
47552: LD_VAR 0 3
47556: PUSH
47557: LD_INT 118
47559: EQUAL
47560: IFFALSE 47570
// s60 := true ;
47562: LD_ADDR_EXP 109
47566: PUSH
47567: LD_INT 1
47569: ST_TO_ADDR
// end ; if p2 = 101 then
47570: LD_VAR 0 2
47574: PUSH
47575: LD_INT 101
47577: EQUAL
47578: IFFALSE 47706
// begin case p3 of 1 :
47580: LD_VAR 0 3
47584: PUSH
47585: LD_INT 1
47587: DOUBLE
47588: EQUAL
47589: IFTRUE 47593
47591: GO 47600
47593: POP
// hHackUnlimitedResources ; 2 :
47594: CALL 59804 0 0
47598: GO 47706
47600: LD_INT 2
47602: DOUBLE
47603: EQUAL
47604: IFTRUE 47608
47606: GO 47615
47608: POP
// hHackSetLevel10 ; 3 :
47609: CALL 59937 0 0
47613: GO 47706
47615: LD_INT 3
47617: DOUBLE
47618: EQUAL
47619: IFTRUE 47623
47621: GO 47630
47623: POP
// hHackSetLevel10YourUnits ; 4 :
47624: CALL 60022 0 0
47628: GO 47706
47630: LD_INT 4
47632: DOUBLE
47633: EQUAL
47634: IFTRUE 47638
47636: GO 47645
47638: POP
// hHackInvincible ; 5 :
47639: CALL 60470 0 0
47643: GO 47706
47645: LD_INT 5
47647: DOUBLE
47648: EQUAL
47649: IFTRUE 47653
47651: GO 47660
47653: POP
// hHackInvisible ; 6 :
47654: CALL 60581 0 0
47658: GO 47706
47660: LD_INT 6
47662: DOUBLE
47663: EQUAL
47664: IFTRUE 47668
47666: GO 47675
47668: POP
// hHackChangeYourSide ; 7 :
47669: CALL 60638 0 0
47673: GO 47706
47675: LD_INT 7
47677: DOUBLE
47678: EQUAL
47679: IFTRUE 47683
47681: GO 47690
47683: POP
// hHackChangeUnitSide ; 8 :
47684: CALL 60680 0 0
47688: GO 47706
47690: LD_INT 8
47692: DOUBLE
47693: EQUAL
47694: IFTRUE 47698
47696: GO 47705
47698: POP
// hHackFog ; end ;
47699: CALL 60781 0 0
47703: GO 47706
47705: POP
// end ; end ;
47706: LD_VAR 0 7
47710: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
47711: GO 47713
47713: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
47714: LD_STRING initStreamRollete();
47716: PPUSH
47717: CALL_OW 559
// InitStreamMode ;
47721: CALL 47733 0 0
// DefineStreamItems ( false ) ;
47725: LD_INT 0
47727: PPUSH
47728: CALL 48197 0 1
// end ;
47732: END
// function InitStreamMode ; begin
47733: LD_INT 0
47735: PPUSH
// streamModeActive := false ;
47736: LD_ADDR_EXP 53
47740: PUSH
47741: LD_INT 0
47743: ST_TO_ADDR
// normalCounter := 36 ;
47744: LD_ADDR_EXP 54
47748: PUSH
47749: LD_INT 36
47751: ST_TO_ADDR
// hardcoreCounter := 18 ;
47752: LD_ADDR_EXP 55
47756: PUSH
47757: LD_INT 18
47759: ST_TO_ADDR
// sRocket := false ;
47760: LD_ADDR_EXP 58
47764: PUSH
47765: LD_INT 0
47767: ST_TO_ADDR
// sSpeed := false ;
47768: LD_ADDR_EXP 57
47772: PUSH
47773: LD_INT 0
47775: ST_TO_ADDR
// sEngine := false ;
47776: LD_ADDR_EXP 59
47780: PUSH
47781: LD_INT 0
47783: ST_TO_ADDR
// sSpec := false ;
47784: LD_ADDR_EXP 56
47788: PUSH
47789: LD_INT 0
47791: ST_TO_ADDR
// sLevel := false ;
47792: LD_ADDR_EXP 60
47796: PUSH
47797: LD_INT 0
47799: ST_TO_ADDR
// sArmoury := false ;
47800: LD_ADDR_EXP 61
47804: PUSH
47805: LD_INT 0
47807: ST_TO_ADDR
// sRadar := false ;
47808: LD_ADDR_EXP 62
47812: PUSH
47813: LD_INT 0
47815: ST_TO_ADDR
// sBunker := false ;
47816: LD_ADDR_EXP 63
47820: PUSH
47821: LD_INT 0
47823: ST_TO_ADDR
// sHack := false ;
47824: LD_ADDR_EXP 64
47828: PUSH
47829: LD_INT 0
47831: ST_TO_ADDR
// sFire := false ;
47832: LD_ADDR_EXP 65
47836: PUSH
47837: LD_INT 0
47839: ST_TO_ADDR
// sRefresh := false ;
47840: LD_ADDR_EXP 66
47844: PUSH
47845: LD_INT 0
47847: ST_TO_ADDR
// sExp := false ;
47848: LD_ADDR_EXP 67
47852: PUSH
47853: LD_INT 0
47855: ST_TO_ADDR
// sDepot := false ;
47856: LD_ADDR_EXP 68
47860: PUSH
47861: LD_INT 0
47863: ST_TO_ADDR
// sFlag := false ;
47864: LD_ADDR_EXP 69
47868: PUSH
47869: LD_INT 0
47871: ST_TO_ADDR
// sKamikadze := false ;
47872: LD_ADDR_EXP 77
47876: PUSH
47877: LD_INT 0
47879: ST_TO_ADDR
// sTroll := false ;
47880: LD_ADDR_EXP 78
47884: PUSH
47885: LD_INT 0
47887: ST_TO_ADDR
// sSlow := false ;
47888: LD_ADDR_EXP 79
47892: PUSH
47893: LD_INT 0
47895: ST_TO_ADDR
// sLack := false ;
47896: LD_ADDR_EXP 80
47900: PUSH
47901: LD_INT 0
47903: ST_TO_ADDR
// sTank := false ;
47904: LD_ADDR_EXP 82
47908: PUSH
47909: LD_INT 0
47911: ST_TO_ADDR
// sRemote := false ;
47912: LD_ADDR_EXP 83
47916: PUSH
47917: LD_INT 0
47919: ST_TO_ADDR
// sPowell := false ;
47920: LD_ADDR_EXP 84
47924: PUSH
47925: LD_INT 0
47927: ST_TO_ADDR
// sTeleport := false ;
47928: LD_ADDR_EXP 87
47932: PUSH
47933: LD_INT 0
47935: ST_TO_ADDR
// sOilTower := false ;
47936: LD_ADDR_EXP 89
47940: PUSH
47941: LD_INT 0
47943: ST_TO_ADDR
// sShovel := false ;
47944: LD_ADDR_EXP 90
47948: PUSH
47949: LD_INT 0
47951: ST_TO_ADDR
// sSheik := false ;
47952: LD_ADDR_EXP 91
47956: PUSH
47957: LD_INT 0
47959: ST_TO_ADDR
// sEarthquake := false ;
47960: LD_ADDR_EXP 93
47964: PUSH
47965: LD_INT 0
47967: ST_TO_ADDR
// sAI := false ;
47968: LD_ADDR_EXP 94
47972: PUSH
47973: LD_INT 0
47975: ST_TO_ADDR
// sCargo := false ;
47976: LD_ADDR_EXP 97
47980: PUSH
47981: LD_INT 0
47983: ST_TO_ADDR
// sDLaser := false ;
47984: LD_ADDR_EXP 98
47988: PUSH
47989: LD_INT 0
47991: ST_TO_ADDR
// sExchange := false ;
47992: LD_ADDR_EXP 99
47996: PUSH
47997: LD_INT 0
47999: ST_TO_ADDR
// sFac := false ;
48000: LD_ADDR_EXP 100
48004: PUSH
48005: LD_INT 0
48007: ST_TO_ADDR
// sPower := false ;
48008: LD_ADDR_EXP 101
48012: PUSH
48013: LD_INT 0
48015: ST_TO_ADDR
// sRandom := false ;
48016: LD_ADDR_EXP 102
48020: PUSH
48021: LD_INT 0
48023: ST_TO_ADDR
// sShield := false ;
48024: LD_ADDR_EXP 103
48028: PUSH
48029: LD_INT 0
48031: ST_TO_ADDR
// sTime := false ;
48032: LD_ADDR_EXP 104
48036: PUSH
48037: LD_INT 0
48039: ST_TO_ADDR
// sTools := false ;
48040: LD_ADDR_EXP 105
48044: PUSH
48045: LD_INT 0
48047: ST_TO_ADDR
// sSold := false ;
48048: LD_ADDR_EXP 70
48052: PUSH
48053: LD_INT 0
48055: ST_TO_ADDR
// sDiff := false ;
48056: LD_ADDR_EXP 71
48060: PUSH
48061: LD_INT 0
48063: ST_TO_ADDR
// sFog := false ;
48064: LD_ADDR_EXP 74
48068: PUSH
48069: LD_INT 0
48071: ST_TO_ADDR
// sReset := false ;
48072: LD_ADDR_EXP 75
48076: PUSH
48077: LD_INT 0
48079: ST_TO_ADDR
// sSun := false ;
48080: LD_ADDR_EXP 76
48084: PUSH
48085: LD_INT 0
48087: ST_TO_ADDR
// sTiger := false ;
48088: LD_ADDR_EXP 72
48092: PUSH
48093: LD_INT 0
48095: ST_TO_ADDR
// sBomb := false ;
48096: LD_ADDR_EXP 73
48100: PUSH
48101: LD_INT 0
48103: ST_TO_ADDR
// sWound := false ;
48104: LD_ADDR_EXP 81
48108: PUSH
48109: LD_INT 0
48111: ST_TO_ADDR
// sBetray := false ;
48112: LD_ADDR_EXP 85
48116: PUSH
48117: LD_INT 0
48119: ST_TO_ADDR
// sContamin := false ;
48120: LD_ADDR_EXP 86
48124: PUSH
48125: LD_INT 0
48127: ST_TO_ADDR
// sOil := false ;
48128: LD_ADDR_EXP 88
48132: PUSH
48133: LD_INT 0
48135: ST_TO_ADDR
// sStu := false ;
48136: LD_ADDR_EXP 92
48140: PUSH
48141: LD_INT 0
48143: ST_TO_ADDR
// sBazooka := false ;
48144: LD_ADDR_EXP 95
48148: PUSH
48149: LD_INT 0
48151: ST_TO_ADDR
// sMortar := false ;
48152: LD_ADDR_EXP 96
48156: PUSH
48157: LD_INT 0
48159: ST_TO_ADDR
// sRanger := false ;
48160: LD_ADDR_EXP 106
48164: PUSH
48165: LD_INT 0
48167: ST_TO_ADDR
// sComputer := false ;
48168: LD_ADDR_EXP 107
48172: PUSH
48173: LD_INT 0
48175: ST_TO_ADDR
// s30 := false ;
48176: LD_ADDR_EXP 108
48180: PUSH
48181: LD_INT 0
48183: ST_TO_ADDR
// s60 := false ;
48184: LD_ADDR_EXP 109
48188: PUSH
48189: LD_INT 0
48191: ST_TO_ADDR
// end ;
48192: LD_VAR 0 1
48196: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
48197: LD_INT 0
48199: PPUSH
48200: PPUSH
48201: PPUSH
48202: PPUSH
48203: PPUSH
48204: PPUSH
48205: PPUSH
// result := [ ] ;
48206: LD_ADDR_VAR 0 2
48210: PUSH
48211: EMPTY
48212: ST_TO_ADDR
// if campaign_id = 1 then
48213: LD_OWVAR 69
48217: PUSH
48218: LD_INT 1
48220: EQUAL
48221: IFFALSE 51387
// begin case mission_number of 1 :
48223: LD_OWVAR 70
48227: PUSH
48228: LD_INT 1
48230: DOUBLE
48231: EQUAL
48232: IFTRUE 48236
48234: GO 48312
48236: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
48237: LD_ADDR_VAR 0 2
48241: PUSH
48242: LD_INT 2
48244: PUSH
48245: LD_INT 4
48247: PUSH
48248: LD_INT 11
48250: PUSH
48251: LD_INT 12
48253: PUSH
48254: LD_INT 15
48256: PUSH
48257: LD_INT 16
48259: PUSH
48260: LD_INT 22
48262: PUSH
48263: LD_INT 23
48265: PUSH
48266: LD_INT 26
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 101
48282: PUSH
48283: LD_INT 102
48285: PUSH
48286: LD_INT 106
48288: PUSH
48289: LD_INT 116
48291: PUSH
48292: LD_INT 117
48294: PUSH
48295: LD_INT 118
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: ST_TO_ADDR
48310: GO 51385
48312: LD_INT 2
48314: DOUBLE
48315: EQUAL
48316: IFTRUE 48320
48318: GO 48404
48320: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
48321: LD_ADDR_VAR 0 2
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: LD_INT 4
48331: PUSH
48332: LD_INT 11
48334: PUSH
48335: LD_INT 12
48337: PUSH
48338: LD_INT 15
48340: PUSH
48341: LD_INT 16
48343: PUSH
48344: LD_INT 22
48346: PUSH
48347: LD_INT 23
48349: PUSH
48350: LD_INT 26
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 101
48366: PUSH
48367: LD_INT 102
48369: PUSH
48370: LD_INT 105
48372: PUSH
48373: LD_INT 106
48375: PUSH
48376: LD_INT 108
48378: PUSH
48379: LD_INT 116
48381: PUSH
48382: LD_INT 117
48384: PUSH
48385: LD_INT 118
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: ST_TO_ADDR
48402: GO 51385
48404: LD_INT 3
48406: DOUBLE
48407: EQUAL
48408: IFTRUE 48412
48410: GO 48500
48412: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
48413: LD_ADDR_VAR 0 2
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: LD_INT 4
48423: PUSH
48424: LD_INT 5
48426: PUSH
48427: LD_INT 11
48429: PUSH
48430: LD_INT 12
48432: PUSH
48433: LD_INT 15
48435: PUSH
48436: LD_INT 16
48438: PUSH
48439: LD_INT 22
48441: PUSH
48442: LD_INT 26
48444: PUSH
48445: LD_INT 36
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 101
48462: PUSH
48463: LD_INT 102
48465: PUSH
48466: LD_INT 105
48468: PUSH
48469: LD_INT 106
48471: PUSH
48472: LD_INT 108
48474: PUSH
48475: LD_INT 116
48477: PUSH
48478: LD_INT 117
48480: PUSH
48481: LD_INT 118
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: ST_TO_ADDR
48498: GO 51385
48500: LD_INT 4
48502: DOUBLE
48503: EQUAL
48504: IFTRUE 48508
48506: GO 48604
48508: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
48509: LD_ADDR_VAR 0 2
48513: PUSH
48514: LD_INT 2
48516: PUSH
48517: LD_INT 4
48519: PUSH
48520: LD_INT 5
48522: PUSH
48523: LD_INT 8
48525: PUSH
48526: LD_INT 11
48528: PUSH
48529: LD_INT 12
48531: PUSH
48532: LD_INT 15
48534: PUSH
48535: LD_INT 16
48537: PUSH
48538: LD_INT 22
48540: PUSH
48541: LD_INT 23
48543: PUSH
48544: LD_INT 26
48546: PUSH
48547: LD_INT 36
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 101
48566: PUSH
48567: LD_INT 102
48569: PUSH
48570: LD_INT 105
48572: PUSH
48573: LD_INT 106
48575: PUSH
48576: LD_INT 108
48578: PUSH
48579: LD_INT 116
48581: PUSH
48582: LD_INT 117
48584: PUSH
48585: LD_INT 118
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: ST_TO_ADDR
48602: GO 51385
48604: LD_INT 5
48606: DOUBLE
48607: EQUAL
48608: IFTRUE 48612
48610: GO 48724
48612: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
48613: LD_ADDR_VAR 0 2
48617: PUSH
48618: LD_INT 2
48620: PUSH
48621: LD_INT 4
48623: PUSH
48624: LD_INT 5
48626: PUSH
48627: LD_INT 6
48629: PUSH
48630: LD_INT 8
48632: PUSH
48633: LD_INT 11
48635: PUSH
48636: LD_INT 12
48638: PUSH
48639: LD_INT 15
48641: PUSH
48642: LD_INT 16
48644: PUSH
48645: LD_INT 22
48647: PUSH
48648: LD_INT 23
48650: PUSH
48651: LD_INT 25
48653: PUSH
48654: LD_INT 26
48656: PUSH
48657: LD_INT 36
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 101
48678: PUSH
48679: LD_INT 102
48681: PUSH
48682: LD_INT 105
48684: PUSH
48685: LD_INT 106
48687: PUSH
48688: LD_INT 108
48690: PUSH
48691: LD_INT 109
48693: PUSH
48694: LD_INT 112
48696: PUSH
48697: LD_INT 116
48699: PUSH
48700: LD_INT 117
48702: PUSH
48703: LD_INT 118
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: ST_TO_ADDR
48722: GO 51385
48724: LD_INT 6
48726: DOUBLE
48727: EQUAL
48728: IFTRUE 48732
48730: GO 48864
48732: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
48733: LD_ADDR_VAR 0 2
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: LD_INT 4
48743: PUSH
48744: LD_INT 5
48746: PUSH
48747: LD_INT 6
48749: PUSH
48750: LD_INT 8
48752: PUSH
48753: LD_INT 11
48755: PUSH
48756: LD_INT 12
48758: PUSH
48759: LD_INT 15
48761: PUSH
48762: LD_INT 16
48764: PUSH
48765: LD_INT 20
48767: PUSH
48768: LD_INT 21
48770: PUSH
48771: LD_INT 22
48773: PUSH
48774: LD_INT 23
48776: PUSH
48777: LD_INT 25
48779: PUSH
48780: LD_INT 26
48782: PUSH
48783: LD_INT 30
48785: PUSH
48786: LD_INT 31
48788: PUSH
48789: LD_INT 32
48791: PUSH
48792: LD_INT 36
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 101
48818: PUSH
48819: LD_INT 102
48821: PUSH
48822: LD_INT 105
48824: PUSH
48825: LD_INT 106
48827: PUSH
48828: LD_INT 108
48830: PUSH
48831: LD_INT 109
48833: PUSH
48834: LD_INT 112
48836: PUSH
48837: LD_INT 116
48839: PUSH
48840: LD_INT 117
48842: PUSH
48843: LD_INT 118
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: ST_TO_ADDR
48862: GO 51385
48864: LD_INT 7
48866: DOUBLE
48867: EQUAL
48868: IFTRUE 48872
48870: GO 48984
48872: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
48873: LD_ADDR_VAR 0 2
48877: PUSH
48878: LD_INT 2
48880: PUSH
48881: LD_INT 4
48883: PUSH
48884: LD_INT 5
48886: PUSH
48887: LD_INT 7
48889: PUSH
48890: LD_INT 11
48892: PUSH
48893: LD_INT 12
48895: PUSH
48896: LD_INT 15
48898: PUSH
48899: LD_INT 16
48901: PUSH
48902: LD_INT 20
48904: PUSH
48905: LD_INT 21
48907: PUSH
48908: LD_INT 22
48910: PUSH
48911: LD_INT 23
48913: PUSH
48914: LD_INT 25
48916: PUSH
48917: LD_INT 26
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 101
48938: PUSH
48939: LD_INT 102
48941: PUSH
48942: LD_INT 103
48944: PUSH
48945: LD_INT 105
48947: PUSH
48948: LD_INT 106
48950: PUSH
48951: LD_INT 108
48953: PUSH
48954: LD_INT 112
48956: PUSH
48957: LD_INT 116
48959: PUSH
48960: LD_INT 117
48962: PUSH
48963: LD_INT 118
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: ST_TO_ADDR
48982: GO 51385
48984: LD_INT 8
48986: DOUBLE
48987: EQUAL
48988: IFTRUE 48992
48990: GO 49132
48992: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
48993: LD_ADDR_VAR 0 2
48997: PUSH
48998: LD_INT 2
49000: PUSH
49001: LD_INT 4
49003: PUSH
49004: LD_INT 5
49006: PUSH
49007: LD_INT 6
49009: PUSH
49010: LD_INT 7
49012: PUSH
49013: LD_INT 8
49015: PUSH
49016: LD_INT 11
49018: PUSH
49019: LD_INT 12
49021: PUSH
49022: LD_INT 15
49024: PUSH
49025: LD_INT 16
49027: PUSH
49028: LD_INT 20
49030: PUSH
49031: LD_INT 21
49033: PUSH
49034: LD_INT 22
49036: PUSH
49037: LD_INT 23
49039: PUSH
49040: LD_INT 25
49042: PUSH
49043: LD_INT 26
49045: PUSH
49046: LD_INT 30
49048: PUSH
49049: LD_INT 31
49051: PUSH
49052: LD_INT 32
49054: PUSH
49055: LD_INT 36
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 101
49082: PUSH
49083: LD_INT 102
49085: PUSH
49086: LD_INT 103
49088: PUSH
49089: LD_INT 105
49091: PUSH
49092: LD_INT 106
49094: PUSH
49095: LD_INT 108
49097: PUSH
49098: LD_INT 109
49100: PUSH
49101: LD_INT 112
49103: PUSH
49104: LD_INT 116
49106: PUSH
49107: LD_INT 117
49109: PUSH
49110: LD_INT 118
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: ST_TO_ADDR
49130: GO 51385
49132: LD_INT 9
49134: DOUBLE
49135: EQUAL
49136: IFTRUE 49140
49138: GO 49288
49140: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
49141: LD_ADDR_VAR 0 2
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: LD_INT 4
49151: PUSH
49152: LD_INT 5
49154: PUSH
49155: LD_INT 6
49157: PUSH
49158: LD_INT 7
49160: PUSH
49161: LD_INT 8
49163: PUSH
49164: LD_INT 11
49166: PUSH
49167: LD_INT 12
49169: PUSH
49170: LD_INT 15
49172: PUSH
49173: LD_INT 16
49175: PUSH
49176: LD_INT 20
49178: PUSH
49179: LD_INT 21
49181: PUSH
49182: LD_INT 22
49184: PUSH
49185: LD_INT 23
49187: PUSH
49188: LD_INT 25
49190: PUSH
49191: LD_INT 26
49193: PUSH
49194: LD_INT 28
49196: PUSH
49197: LD_INT 30
49199: PUSH
49200: LD_INT 31
49202: PUSH
49203: LD_INT 32
49205: PUSH
49206: LD_INT 36
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 101
49234: PUSH
49235: LD_INT 102
49237: PUSH
49238: LD_INT 103
49240: PUSH
49241: LD_INT 105
49243: PUSH
49244: LD_INT 106
49246: PUSH
49247: LD_INT 108
49249: PUSH
49250: LD_INT 109
49252: PUSH
49253: LD_INT 112
49255: PUSH
49256: LD_INT 114
49258: PUSH
49259: LD_INT 116
49261: PUSH
49262: LD_INT 117
49264: PUSH
49265: LD_INT 118
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: ST_TO_ADDR
49286: GO 51385
49288: LD_INT 10
49290: DOUBLE
49291: EQUAL
49292: IFTRUE 49296
49294: GO 49492
49296: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
49297: LD_ADDR_VAR 0 2
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: LD_INT 4
49307: PUSH
49308: LD_INT 5
49310: PUSH
49311: LD_INT 6
49313: PUSH
49314: LD_INT 7
49316: PUSH
49317: LD_INT 8
49319: PUSH
49320: LD_INT 9
49322: PUSH
49323: LD_INT 10
49325: PUSH
49326: LD_INT 11
49328: PUSH
49329: LD_INT 12
49331: PUSH
49332: LD_INT 13
49334: PUSH
49335: LD_INT 14
49337: PUSH
49338: LD_INT 15
49340: PUSH
49341: LD_INT 16
49343: PUSH
49344: LD_INT 17
49346: PUSH
49347: LD_INT 18
49349: PUSH
49350: LD_INT 19
49352: PUSH
49353: LD_INT 20
49355: PUSH
49356: LD_INT 21
49358: PUSH
49359: LD_INT 22
49361: PUSH
49362: LD_INT 23
49364: PUSH
49365: LD_INT 24
49367: PUSH
49368: LD_INT 25
49370: PUSH
49371: LD_INT 26
49373: PUSH
49374: LD_INT 28
49376: PUSH
49377: LD_INT 30
49379: PUSH
49380: LD_INT 31
49382: PUSH
49383: LD_INT 32
49385: PUSH
49386: LD_INT 36
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 101
49422: PUSH
49423: LD_INT 102
49425: PUSH
49426: LD_INT 103
49428: PUSH
49429: LD_INT 104
49431: PUSH
49432: LD_INT 105
49434: PUSH
49435: LD_INT 106
49437: PUSH
49438: LD_INT 107
49440: PUSH
49441: LD_INT 108
49443: PUSH
49444: LD_INT 109
49446: PUSH
49447: LD_INT 110
49449: PUSH
49450: LD_INT 111
49452: PUSH
49453: LD_INT 112
49455: PUSH
49456: LD_INT 114
49458: PUSH
49459: LD_INT 116
49461: PUSH
49462: LD_INT 117
49464: PUSH
49465: LD_INT 118
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: ST_TO_ADDR
49490: GO 51385
49492: LD_INT 11
49494: DOUBLE
49495: EQUAL
49496: IFTRUE 49500
49498: GO 49704
49500: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
49501: LD_ADDR_VAR 0 2
49505: PUSH
49506: LD_INT 2
49508: PUSH
49509: LD_INT 3
49511: PUSH
49512: LD_INT 4
49514: PUSH
49515: LD_INT 5
49517: PUSH
49518: LD_INT 6
49520: PUSH
49521: LD_INT 7
49523: PUSH
49524: LD_INT 8
49526: PUSH
49527: LD_INT 9
49529: PUSH
49530: LD_INT 10
49532: PUSH
49533: LD_INT 11
49535: PUSH
49536: LD_INT 12
49538: PUSH
49539: LD_INT 13
49541: PUSH
49542: LD_INT 14
49544: PUSH
49545: LD_INT 15
49547: PUSH
49548: LD_INT 16
49550: PUSH
49551: LD_INT 17
49553: PUSH
49554: LD_INT 18
49556: PUSH
49557: LD_INT 19
49559: PUSH
49560: LD_INT 20
49562: PUSH
49563: LD_INT 21
49565: PUSH
49566: LD_INT 22
49568: PUSH
49569: LD_INT 23
49571: PUSH
49572: LD_INT 24
49574: PUSH
49575: LD_INT 25
49577: PUSH
49578: LD_INT 26
49580: PUSH
49581: LD_INT 28
49583: PUSH
49584: LD_INT 30
49586: PUSH
49587: LD_INT 31
49589: PUSH
49590: LD_INT 32
49592: PUSH
49593: LD_INT 34
49595: PUSH
49596: LD_INT 36
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 101
49634: PUSH
49635: LD_INT 102
49637: PUSH
49638: LD_INT 103
49640: PUSH
49641: LD_INT 104
49643: PUSH
49644: LD_INT 105
49646: PUSH
49647: LD_INT 106
49649: PUSH
49650: LD_INT 107
49652: PUSH
49653: LD_INT 108
49655: PUSH
49656: LD_INT 109
49658: PUSH
49659: LD_INT 110
49661: PUSH
49662: LD_INT 111
49664: PUSH
49665: LD_INT 112
49667: PUSH
49668: LD_INT 114
49670: PUSH
49671: LD_INT 116
49673: PUSH
49674: LD_INT 117
49676: PUSH
49677: LD_INT 118
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: ST_TO_ADDR
49702: GO 51385
49704: LD_INT 12
49706: DOUBLE
49707: EQUAL
49708: IFTRUE 49712
49710: GO 49932
49712: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
49713: LD_ADDR_VAR 0 2
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 2
49723: PUSH
49724: LD_INT 3
49726: PUSH
49727: LD_INT 4
49729: PUSH
49730: LD_INT 5
49732: PUSH
49733: LD_INT 6
49735: PUSH
49736: LD_INT 7
49738: PUSH
49739: LD_INT 8
49741: PUSH
49742: LD_INT 9
49744: PUSH
49745: LD_INT 10
49747: PUSH
49748: LD_INT 11
49750: PUSH
49751: LD_INT 12
49753: PUSH
49754: LD_INT 13
49756: PUSH
49757: LD_INT 14
49759: PUSH
49760: LD_INT 15
49762: PUSH
49763: LD_INT 16
49765: PUSH
49766: LD_INT 17
49768: PUSH
49769: LD_INT 18
49771: PUSH
49772: LD_INT 19
49774: PUSH
49775: LD_INT 20
49777: PUSH
49778: LD_INT 21
49780: PUSH
49781: LD_INT 22
49783: PUSH
49784: LD_INT 23
49786: PUSH
49787: LD_INT 24
49789: PUSH
49790: LD_INT 25
49792: PUSH
49793: LD_INT 26
49795: PUSH
49796: LD_INT 27
49798: PUSH
49799: LD_INT 28
49801: PUSH
49802: LD_INT 30
49804: PUSH
49805: LD_INT 31
49807: PUSH
49808: LD_INT 32
49810: PUSH
49811: LD_INT 33
49813: PUSH
49814: LD_INT 34
49816: PUSH
49817: LD_INT 36
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 101
49858: PUSH
49859: LD_INT 102
49861: PUSH
49862: LD_INT 103
49864: PUSH
49865: LD_INT 104
49867: PUSH
49868: LD_INT 105
49870: PUSH
49871: LD_INT 106
49873: PUSH
49874: LD_INT 107
49876: PUSH
49877: LD_INT 108
49879: PUSH
49880: LD_INT 109
49882: PUSH
49883: LD_INT 110
49885: PUSH
49886: LD_INT 111
49888: PUSH
49889: LD_INT 112
49891: PUSH
49892: LD_INT 113
49894: PUSH
49895: LD_INT 114
49897: PUSH
49898: LD_INT 116
49900: PUSH
49901: LD_INT 117
49903: PUSH
49904: LD_INT 118
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: ST_TO_ADDR
49930: GO 51385
49932: LD_INT 13
49934: DOUBLE
49935: EQUAL
49936: IFTRUE 49940
49938: GO 50148
49940: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
49941: LD_ADDR_VAR 0 2
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: LD_INT 2
49951: PUSH
49952: LD_INT 3
49954: PUSH
49955: LD_INT 4
49957: PUSH
49958: LD_INT 5
49960: PUSH
49961: LD_INT 8
49963: PUSH
49964: LD_INT 9
49966: PUSH
49967: LD_INT 10
49969: PUSH
49970: LD_INT 11
49972: PUSH
49973: LD_INT 12
49975: PUSH
49976: LD_INT 14
49978: PUSH
49979: LD_INT 15
49981: PUSH
49982: LD_INT 16
49984: PUSH
49985: LD_INT 17
49987: PUSH
49988: LD_INT 18
49990: PUSH
49991: LD_INT 19
49993: PUSH
49994: LD_INT 20
49996: PUSH
49997: LD_INT 21
49999: PUSH
50000: LD_INT 22
50002: PUSH
50003: LD_INT 23
50005: PUSH
50006: LD_INT 24
50008: PUSH
50009: LD_INT 25
50011: PUSH
50012: LD_INT 26
50014: PUSH
50015: LD_INT 27
50017: PUSH
50018: LD_INT 28
50020: PUSH
50021: LD_INT 30
50023: PUSH
50024: LD_INT 31
50026: PUSH
50027: LD_INT 32
50029: PUSH
50030: LD_INT 33
50032: PUSH
50033: LD_INT 34
50035: PUSH
50036: LD_INT 36
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 101
50074: PUSH
50075: LD_INT 102
50077: PUSH
50078: LD_INT 103
50080: PUSH
50081: LD_INT 104
50083: PUSH
50084: LD_INT 105
50086: PUSH
50087: LD_INT 106
50089: PUSH
50090: LD_INT 107
50092: PUSH
50093: LD_INT 108
50095: PUSH
50096: LD_INT 109
50098: PUSH
50099: LD_INT 110
50101: PUSH
50102: LD_INT 111
50104: PUSH
50105: LD_INT 112
50107: PUSH
50108: LD_INT 113
50110: PUSH
50111: LD_INT 114
50113: PUSH
50114: LD_INT 116
50116: PUSH
50117: LD_INT 117
50119: PUSH
50120: LD_INT 118
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: ST_TO_ADDR
50146: GO 51385
50148: LD_INT 14
50150: DOUBLE
50151: EQUAL
50152: IFTRUE 50156
50154: GO 50380
50156: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
50157: LD_ADDR_VAR 0 2
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: LD_INT 3
50170: PUSH
50171: LD_INT 4
50173: PUSH
50174: LD_INT 5
50176: PUSH
50177: LD_INT 6
50179: PUSH
50180: LD_INT 7
50182: PUSH
50183: LD_INT 8
50185: PUSH
50186: LD_INT 9
50188: PUSH
50189: LD_INT 10
50191: PUSH
50192: LD_INT 11
50194: PUSH
50195: LD_INT 12
50197: PUSH
50198: LD_INT 13
50200: PUSH
50201: LD_INT 14
50203: PUSH
50204: LD_INT 15
50206: PUSH
50207: LD_INT 16
50209: PUSH
50210: LD_INT 17
50212: PUSH
50213: LD_INT 18
50215: PUSH
50216: LD_INT 19
50218: PUSH
50219: LD_INT 20
50221: PUSH
50222: LD_INT 21
50224: PUSH
50225: LD_INT 22
50227: PUSH
50228: LD_INT 23
50230: PUSH
50231: LD_INT 24
50233: PUSH
50234: LD_INT 25
50236: PUSH
50237: LD_INT 26
50239: PUSH
50240: LD_INT 27
50242: PUSH
50243: LD_INT 28
50245: PUSH
50246: LD_INT 29
50248: PUSH
50249: LD_INT 30
50251: PUSH
50252: LD_INT 31
50254: PUSH
50255: LD_INT 32
50257: PUSH
50258: LD_INT 33
50260: PUSH
50261: LD_INT 34
50263: PUSH
50264: LD_INT 36
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 101
50306: PUSH
50307: LD_INT 102
50309: PUSH
50310: LD_INT 103
50312: PUSH
50313: LD_INT 104
50315: PUSH
50316: LD_INT 105
50318: PUSH
50319: LD_INT 106
50321: PUSH
50322: LD_INT 107
50324: PUSH
50325: LD_INT 108
50327: PUSH
50328: LD_INT 109
50330: PUSH
50331: LD_INT 110
50333: PUSH
50334: LD_INT 111
50336: PUSH
50337: LD_INT 112
50339: PUSH
50340: LD_INT 113
50342: PUSH
50343: LD_INT 114
50345: PUSH
50346: LD_INT 116
50348: PUSH
50349: LD_INT 117
50351: PUSH
50352: LD_INT 118
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: ST_TO_ADDR
50378: GO 51385
50380: LD_INT 15
50382: DOUBLE
50383: EQUAL
50384: IFTRUE 50388
50386: GO 50612
50388: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
50389: LD_ADDR_VAR 0 2
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: LD_INT 3
50402: PUSH
50403: LD_INT 4
50405: PUSH
50406: LD_INT 5
50408: PUSH
50409: LD_INT 6
50411: PUSH
50412: LD_INT 7
50414: PUSH
50415: LD_INT 8
50417: PUSH
50418: LD_INT 9
50420: PUSH
50421: LD_INT 10
50423: PUSH
50424: LD_INT 11
50426: PUSH
50427: LD_INT 12
50429: PUSH
50430: LD_INT 13
50432: PUSH
50433: LD_INT 14
50435: PUSH
50436: LD_INT 15
50438: PUSH
50439: LD_INT 16
50441: PUSH
50442: LD_INT 17
50444: PUSH
50445: LD_INT 18
50447: PUSH
50448: LD_INT 19
50450: PUSH
50451: LD_INT 20
50453: PUSH
50454: LD_INT 21
50456: PUSH
50457: LD_INT 22
50459: PUSH
50460: LD_INT 23
50462: PUSH
50463: LD_INT 24
50465: PUSH
50466: LD_INT 25
50468: PUSH
50469: LD_INT 26
50471: PUSH
50472: LD_INT 27
50474: PUSH
50475: LD_INT 28
50477: PUSH
50478: LD_INT 29
50480: PUSH
50481: LD_INT 30
50483: PUSH
50484: LD_INT 31
50486: PUSH
50487: LD_INT 32
50489: PUSH
50490: LD_INT 33
50492: PUSH
50493: LD_INT 34
50495: PUSH
50496: LD_INT 36
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 101
50538: PUSH
50539: LD_INT 102
50541: PUSH
50542: LD_INT 103
50544: PUSH
50545: LD_INT 104
50547: PUSH
50548: LD_INT 105
50550: PUSH
50551: LD_INT 106
50553: PUSH
50554: LD_INT 107
50556: PUSH
50557: LD_INT 108
50559: PUSH
50560: LD_INT 109
50562: PUSH
50563: LD_INT 110
50565: PUSH
50566: LD_INT 111
50568: PUSH
50569: LD_INT 112
50571: PUSH
50572: LD_INT 113
50574: PUSH
50575: LD_INT 114
50577: PUSH
50578: LD_INT 116
50580: PUSH
50581: LD_INT 117
50583: PUSH
50584: LD_INT 118
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: ST_TO_ADDR
50610: GO 51385
50612: LD_INT 16
50614: DOUBLE
50615: EQUAL
50616: IFTRUE 50620
50618: GO 50756
50620: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
50621: LD_ADDR_VAR 0 2
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: LD_INT 4
50631: PUSH
50632: LD_INT 5
50634: PUSH
50635: LD_INT 7
50637: PUSH
50638: LD_INT 11
50640: PUSH
50641: LD_INT 12
50643: PUSH
50644: LD_INT 15
50646: PUSH
50647: LD_INT 16
50649: PUSH
50650: LD_INT 20
50652: PUSH
50653: LD_INT 21
50655: PUSH
50656: LD_INT 22
50658: PUSH
50659: LD_INT 23
50661: PUSH
50662: LD_INT 25
50664: PUSH
50665: LD_INT 26
50667: PUSH
50668: LD_INT 30
50670: PUSH
50671: LD_INT 31
50673: PUSH
50674: LD_INT 32
50676: PUSH
50677: LD_INT 33
50679: PUSH
50680: LD_INT 34
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 101
50706: PUSH
50707: LD_INT 102
50709: PUSH
50710: LD_INT 103
50712: PUSH
50713: LD_INT 106
50715: PUSH
50716: LD_INT 108
50718: PUSH
50719: LD_INT 112
50721: PUSH
50722: LD_INT 113
50724: PUSH
50725: LD_INT 114
50727: PUSH
50728: LD_INT 116
50730: PUSH
50731: LD_INT 117
50733: PUSH
50734: LD_INT 118
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: ST_TO_ADDR
50754: GO 51385
50756: LD_INT 17
50758: DOUBLE
50759: EQUAL
50760: IFTRUE 50764
50762: GO 50988
50764: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
50765: LD_ADDR_VAR 0 2
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: LD_INT 2
50775: PUSH
50776: LD_INT 3
50778: PUSH
50779: LD_INT 4
50781: PUSH
50782: LD_INT 5
50784: PUSH
50785: LD_INT 6
50787: PUSH
50788: LD_INT 7
50790: PUSH
50791: LD_INT 8
50793: PUSH
50794: LD_INT 9
50796: PUSH
50797: LD_INT 10
50799: PUSH
50800: LD_INT 11
50802: PUSH
50803: LD_INT 12
50805: PUSH
50806: LD_INT 13
50808: PUSH
50809: LD_INT 14
50811: PUSH
50812: LD_INT 15
50814: PUSH
50815: LD_INT 16
50817: PUSH
50818: LD_INT 17
50820: PUSH
50821: LD_INT 18
50823: PUSH
50824: LD_INT 19
50826: PUSH
50827: LD_INT 20
50829: PUSH
50830: LD_INT 21
50832: PUSH
50833: LD_INT 22
50835: PUSH
50836: LD_INT 23
50838: PUSH
50839: LD_INT 24
50841: PUSH
50842: LD_INT 25
50844: PUSH
50845: LD_INT 26
50847: PUSH
50848: LD_INT 27
50850: PUSH
50851: LD_INT 28
50853: PUSH
50854: LD_INT 29
50856: PUSH
50857: LD_INT 30
50859: PUSH
50860: LD_INT 31
50862: PUSH
50863: LD_INT 32
50865: PUSH
50866: LD_INT 33
50868: PUSH
50869: LD_INT 34
50871: PUSH
50872: LD_INT 36
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 101
50914: PUSH
50915: LD_INT 102
50917: PUSH
50918: LD_INT 103
50920: PUSH
50921: LD_INT 104
50923: PUSH
50924: LD_INT 105
50926: PUSH
50927: LD_INT 106
50929: PUSH
50930: LD_INT 107
50932: PUSH
50933: LD_INT 108
50935: PUSH
50936: LD_INT 109
50938: PUSH
50939: LD_INT 110
50941: PUSH
50942: LD_INT 111
50944: PUSH
50945: LD_INT 112
50947: PUSH
50948: LD_INT 113
50950: PUSH
50951: LD_INT 114
50953: PUSH
50954: LD_INT 116
50956: PUSH
50957: LD_INT 117
50959: PUSH
50960: LD_INT 118
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: ST_TO_ADDR
50986: GO 51385
50988: LD_INT 18
50990: DOUBLE
50991: EQUAL
50992: IFTRUE 50996
50994: GO 51144
50996: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
50997: LD_ADDR_VAR 0 2
51001: PUSH
51002: LD_INT 2
51004: PUSH
51005: LD_INT 4
51007: PUSH
51008: LD_INT 5
51010: PUSH
51011: LD_INT 7
51013: PUSH
51014: LD_INT 11
51016: PUSH
51017: LD_INT 12
51019: PUSH
51020: LD_INT 15
51022: PUSH
51023: LD_INT 16
51025: PUSH
51026: LD_INT 20
51028: PUSH
51029: LD_INT 21
51031: PUSH
51032: LD_INT 22
51034: PUSH
51035: LD_INT 23
51037: PUSH
51038: LD_INT 25
51040: PUSH
51041: LD_INT 26
51043: PUSH
51044: LD_INT 30
51046: PUSH
51047: LD_INT 31
51049: PUSH
51050: LD_INT 32
51052: PUSH
51053: LD_INT 33
51055: PUSH
51056: LD_INT 34
51058: PUSH
51059: LD_INT 35
51061: PUSH
51062: LD_INT 36
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 101
51090: PUSH
51091: LD_INT 102
51093: PUSH
51094: LD_INT 103
51096: PUSH
51097: LD_INT 106
51099: PUSH
51100: LD_INT 108
51102: PUSH
51103: LD_INT 112
51105: PUSH
51106: LD_INT 113
51108: PUSH
51109: LD_INT 114
51111: PUSH
51112: LD_INT 115
51114: PUSH
51115: LD_INT 116
51117: PUSH
51118: LD_INT 117
51120: PUSH
51121: LD_INT 118
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: ST_TO_ADDR
51142: GO 51385
51144: LD_INT 19
51146: DOUBLE
51147: EQUAL
51148: IFTRUE 51152
51150: GO 51384
51152: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
51153: LD_ADDR_VAR 0 2
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: LD_INT 2
51163: PUSH
51164: LD_INT 3
51166: PUSH
51167: LD_INT 4
51169: PUSH
51170: LD_INT 5
51172: PUSH
51173: LD_INT 6
51175: PUSH
51176: LD_INT 7
51178: PUSH
51179: LD_INT 8
51181: PUSH
51182: LD_INT 9
51184: PUSH
51185: LD_INT 10
51187: PUSH
51188: LD_INT 11
51190: PUSH
51191: LD_INT 12
51193: PUSH
51194: LD_INT 13
51196: PUSH
51197: LD_INT 14
51199: PUSH
51200: LD_INT 15
51202: PUSH
51203: LD_INT 16
51205: PUSH
51206: LD_INT 17
51208: PUSH
51209: LD_INT 18
51211: PUSH
51212: LD_INT 19
51214: PUSH
51215: LD_INT 20
51217: PUSH
51218: LD_INT 21
51220: PUSH
51221: LD_INT 22
51223: PUSH
51224: LD_INT 23
51226: PUSH
51227: LD_INT 24
51229: PUSH
51230: LD_INT 25
51232: PUSH
51233: LD_INT 26
51235: PUSH
51236: LD_INT 27
51238: PUSH
51239: LD_INT 28
51241: PUSH
51242: LD_INT 29
51244: PUSH
51245: LD_INT 30
51247: PUSH
51248: LD_INT 31
51250: PUSH
51251: LD_INT 32
51253: PUSH
51254: LD_INT 33
51256: PUSH
51257: LD_INT 34
51259: PUSH
51260: LD_INT 35
51262: PUSH
51263: LD_INT 36
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 101
51306: PUSH
51307: LD_INT 102
51309: PUSH
51310: LD_INT 103
51312: PUSH
51313: LD_INT 104
51315: PUSH
51316: LD_INT 105
51318: PUSH
51319: LD_INT 106
51321: PUSH
51322: LD_INT 107
51324: PUSH
51325: LD_INT 108
51327: PUSH
51328: LD_INT 109
51330: PUSH
51331: LD_INT 110
51333: PUSH
51334: LD_INT 111
51336: PUSH
51337: LD_INT 112
51339: PUSH
51340: LD_INT 113
51342: PUSH
51343: LD_INT 114
51345: PUSH
51346: LD_INT 115
51348: PUSH
51349: LD_INT 116
51351: PUSH
51352: LD_INT 117
51354: PUSH
51355: LD_INT 118
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: ST_TO_ADDR
51382: GO 51385
51384: POP
// end else
51385: GO 51616
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
51387: LD_ADDR_VAR 0 2
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: LD_INT 2
51397: PUSH
51398: LD_INT 3
51400: PUSH
51401: LD_INT 4
51403: PUSH
51404: LD_INT 5
51406: PUSH
51407: LD_INT 6
51409: PUSH
51410: LD_INT 7
51412: PUSH
51413: LD_INT 8
51415: PUSH
51416: LD_INT 9
51418: PUSH
51419: LD_INT 10
51421: PUSH
51422: LD_INT 11
51424: PUSH
51425: LD_INT 12
51427: PUSH
51428: LD_INT 13
51430: PUSH
51431: LD_INT 14
51433: PUSH
51434: LD_INT 15
51436: PUSH
51437: LD_INT 16
51439: PUSH
51440: LD_INT 17
51442: PUSH
51443: LD_INT 18
51445: PUSH
51446: LD_INT 19
51448: PUSH
51449: LD_INT 20
51451: PUSH
51452: LD_INT 21
51454: PUSH
51455: LD_INT 22
51457: PUSH
51458: LD_INT 23
51460: PUSH
51461: LD_INT 24
51463: PUSH
51464: LD_INT 25
51466: PUSH
51467: LD_INT 26
51469: PUSH
51470: LD_INT 27
51472: PUSH
51473: LD_INT 28
51475: PUSH
51476: LD_INT 29
51478: PUSH
51479: LD_INT 30
51481: PUSH
51482: LD_INT 31
51484: PUSH
51485: LD_INT 32
51487: PUSH
51488: LD_INT 33
51490: PUSH
51491: LD_INT 34
51493: PUSH
51494: LD_INT 35
51496: PUSH
51497: LD_INT 36
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 101
51540: PUSH
51541: LD_INT 102
51543: PUSH
51544: LD_INT 103
51546: PUSH
51547: LD_INT 104
51549: PUSH
51550: LD_INT 105
51552: PUSH
51553: LD_INT 106
51555: PUSH
51556: LD_INT 107
51558: PUSH
51559: LD_INT 108
51561: PUSH
51562: LD_INT 109
51564: PUSH
51565: LD_INT 110
51567: PUSH
51568: LD_INT 111
51570: PUSH
51571: LD_INT 112
51573: PUSH
51574: LD_INT 113
51576: PUSH
51577: LD_INT 114
51579: PUSH
51580: LD_INT 115
51582: PUSH
51583: LD_INT 116
51585: PUSH
51586: LD_INT 117
51588: PUSH
51589: LD_INT 118
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: ST_TO_ADDR
// if result then
51616: LD_VAR 0 2
51620: IFFALSE 52406
// begin normal :=  ;
51622: LD_ADDR_VAR 0 5
51626: PUSH
51627: LD_STRING 
51629: ST_TO_ADDR
// hardcore :=  ;
51630: LD_ADDR_VAR 0 6
51634: PUSH
51635: LD_STRING 
51637: ST_TO_ADDR
// active :=  ;
51638: LD_ADDR_VAR 0 7
51642: PUSH
51643: LD_STRING 
51645: ST_TO_ADDR
// for i = 1 to normalCounter do
51646: LD_ADDR_VAR 0 8
51650: PUSH
51651: DOUBLE
51652: LD_INT 1
51654: DEC
51655: ST_TO_ADDR
51656: LD_EXP 54
51660: PUSH
51661: FOR_TO
51662: IFFALSE 51763
// begin tmp := 0 ;
51664: LD_ADDR_VAR 0 3
51668: PUSH
51669: LD_STRING 0
51671: ST_TO_ADDR
// if result [ 1 ] then
51672: LD_VAR 0 2
51676: PUSH
51677: LD_INT 1
51679: ARRAY
51680: IFFALSE 51745
// if result [ 1 ] [ 1 ] = i then
51682: LD_VAR 0 2
51686: PUSH
51687: LD_INT 1
51689: ARRAY
51690: PUSH
51691: LD_INT 1
51693: ARRAY
51694: PUSH
51695: LD_VAR 0 8
51699: EQUAL
51700: IFFALSE 51745
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
51702: LD_ADDR_VAR 0 2
51706: PUSH
51707: LD_VAR 0 2
51711: PPUSH
51712: LD_INT 1
51714: PPUSH
51715: LD_VAR 0 2
51719: PUSH
51720: LD_INT 1
51722: ARRAY
51723: PPUSH
51724: LD_INT 1
51726: PPUSH
51727: CALL_OW 3
51731: PPUSH
51732: CALL_OW 1
51736: ST_TO_ADDR
// tmp := 1 ;
51737: LD_ADDR_VAR 0 3
51741: PUSH
51742: LD_STRING 1
51744: ST_TO_ADDR
// end ; normal := normal & tmp ;
51745: LD_ADDR_VAR 0 5
51749: PUSH
51750: LD_VAR 0 5
51754: PUSH
51755: LD_VAR 0 3
51759: STR
51760: ST_TO_ADDR
// end ;
51761: GO 51661
51763: POP
51764: POP
// for i = 1 to hardcoreCounter do
51765: LD_ADDR_VAR 0 8
51769: PUSH
51770: DOUBLE
51771: LD_INT 1
51773: DEC
51774: ST_TO_ADDR
51775: LD_EXP 55
51779: PUSH
51780: FOR_TO
51781: IFFALSE 51886
// begin tmp := 0 ;
51783: LD_ADDR_VAR 0 3
51787: PUSH
51788: LD_STRING 0
51790: ST_TO_ADDR
// if result [ 2 ] then
51791: LD_VAR 0 2
51795: PUSH
51796: LD_INT 2
51798: ARRAY
51799: IFFALSE 51868
// if result [ 2 ] [ 1 ] = 100 + i then
51801: LD_VAR 0 2
51805: PUSH
51806: LD_INT 2
51808: ARRAY
51809: PUSH
51810: LD_INT 1
51812: ARRAY
51813: PUSH
51814: LD_INT 100
51816: PUSH
51817: LD_VAR 0 8
51821: PLUS
51822: EQUAL
51823: IFFALSE 51868
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
51825: LD_ADDR_VAR 0 2
51829: PUSH
51830: LD_VAR 0 2
51834: PPUSH
51835: LD_INT 2
51837: PPUSH
51838: LD_VAR 0 2
51842: PUSH
51843: LD_INT 2
51845: ARRAY
51846: PPUSH
51847: LD_INT 1
51849: PPUSH
51850: CALL_OW 3
51854: PPUSH
51855: CALL_OW 1
51859: ST_TO_ADDR
// tmp := 1 ;
51860: LD_ADDR_VAR 0 3
51864: PUSH
51865: LD_STRING 1
51867: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
51868: LD_ADDR_VAR 0 6
51872: PUSH
51873: LD_VAR 0 6
51877: PUSH
51878: LD_VAR 0 3
51882: STR
51883: ST_TO_ADDR
// end ;
51884: GO 51780
51886: POP
51887: POP
// if isGameLoad then
51888: LD_VAR 0 1
51892: IFFALSE 52367
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
51894: LD_ADDR_VAR 0 4
51898: PUSH
51899: LD_EXP 58
51903: PUSH
51904: LD_EXP 57
51908: PUSH
51909: LD_EXP 59
51913: PUSH
51914: LD_EXP 56
51918: PUSH
51919: LD_EXP 60
51923: PUSH
51924: LD_EXP 61
51928: PUSH
51929: LD_EXP 62
51933: PUSH
51934: LD_EXP 63
51938: PUSH
51939: LD_EXP 64
51943: PUSH
51944: LD_EXP 65
51948: PUSH
51949: LD_EXP 66
51953: PUSH
51954: LD_EXP 67
51958: PUSH
51959: LD_EXP 68
51963: PUSH
51964: LD_EXP 69
51968: PUSH
51969: LD_EXP 77
51973: PUSH
51974: LD_EXP 78
51978: PUSH
51979: LD_EXP 79
51983: PUSH
51984: LD_EXP 80
51988: PUSH
51989: LD_EXP 82
51993: PUSH
51994: LD_EXP 83
51998: PUSH
51999: LD_EXP 84
52003: PUSH
52004: LD_EXP 87
52008: PUSH
52009: LD_EXP 89
52013: PUSH
52014: LD_EXP 90
52018: PUSH
52019: LD_EXP 91
52023: PUSH
52024: LD_EXP 93
52028: PUSH
52029: LD_EXP 94
52033: PUSH
52034: LD_EXP 97
52038: PUSH
52039: LD_EXP 98
52043: PUSH
52044: LD_EXP 99
52048: PUSH
52049: LD_EXP 100
52053: PUSH
52054: LD_EXP 101
52058: PUSH
52059: LD_EXP 102
52063: PUSH
52064: LD_EXP 103
52068: PUSH
52069: LD_EXP 104
52073: PUSH
52074: LD_EXP 105
52078: PUSH
52079: LD_EXP 70
52083: PUSH
52084: LD_EXP 71
52088: PUSH
52089: LD_EXP 74
52093: PUSH
52094: LD_EXP 75
52098: PUSH
52099: LD_EXP 76
52103: PUSH
52104: LD_EXP 72
52108: PUSH
52109: LD_EXP 73
52113: PUSH
52114: LD_EXP 81
52118: PUSH
52119: LD_EXP 85
52123: PUSH
52124: LD_EXP 86
52128: PUSH
52129: LD_EXP 88
52133: PUSH
52134: LD_EXP 92
52138: PUSH
52139: LD_EXP 95
52143: PUSH
52144: LD_EXP 96
52148: PUSH
52149: LD_EXP 106
52153: PUSH
52154: LD_EXP 107
52158: PUSH
52159: LD_EXP 108
52163: PUSH
52164: LD_EXP 109
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: ST_TO_ADDR
// tmp :=  ;
52225: LD_ADDR_VAR 0 3
52229: PUSH
52230: LD_STRING 
52232: ST_TO_ADDR
// for i = 1 to normalCounter do
52233: LD_ADDR_VAR 0 8
52237: PUSH
52238: DOUBLE
52239: LD_INT 1
52241: DEC
52242: ST_TO_ADDR
52243: LD_EXP 54
52247: PUSH
52248: FOR_TO
52249: IFFALSE 52285
// begin if flags [ i ] then
52251: LD_VAR 0 4
52255: PUSH
52256: LD_VAR 0 8
52260: ARRAY
52261: IFFALSE 52283
// tmp := tmp & i & ; ;
52263: LD_ADDR_VAR 0 3
52267: PUSH
52268: LD_VAR 0 3
52272: PUSH
52273: LD_VAR 0 8
52277: STR
52278: PUSH
52279: LD_STRING ;
52281: STR
52282: ST_TO_ADDR
// end ;
52283: GO 52248
52285: POP
52286: POP
// for i = 1 to hardcoreCounter do
52287: LD_ADDR_VAR 0 8
52291: PUSH
52292: DOUBLE
52293: LD_INT 1
52295: DEC
52296: ST_TO_ADDR
52297: LD_EXP 55
52301: PUSH
52302: FOR_TO
52303: IFFALSE 52349
// begin if flags [ normalCounter + i ] then
52305: LD_VAR 0 4
52309: PUSH
52310: LD_EXP 54
52314: PUSH
52315: LD_VAR 0 8
52319: PLUS
52320: ARRAY
52321: IFFALSE 52347
// tmp := tmp & ( 100 + i ) & ; ;
52323: LD_ADDR_VAR 0 3
52327: PUSH
52328: LD_VAR 0 3
52332: PUSH
52333: LD_INT 100
52335: PUSH
52336: LD_VAR 0 8
52340: PLUS
52341: STR
52342: PUSH
52343: LD_STRING ;
52345: STR
52346: ST_TO_ADDR
// end ;
52347: GO 52302
52349: POP
52350: POP
// if tmp then
52351: LD_VAR 0 3
52355: IFFALSE 52367
// active := tmp ;
52357: LD_ADDR_VAR 0 7
52361: PUSH
52362: LD_VAR 0 3
52366: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
52367: LD_STRING getStreamItemsFromMission("
52369: PUSH
52370: LD_VAR 0 5
52374: STR
52375: PUSH
52376: LD_STRING ","
52378: STR
52379: PUSH
52380: LD_VAR 0 6
52384: STR
52385: PUSH
52386: LD_STRING ","
52388: STR
52389: PUSH
52390: LD_VAR 0 7
52394: STR
52395: PUSH
52396: LD_STRING ")
52398: STR
52399: PPUSH
52400: CALL_OW 559
// end else
52404: GO 52413
// ToLua ( getStreamItemsFromMission("","","") ) ;
52406: LD_STRING getStreamItemsFromMission("","","")
52408: PPUSH
52409: CALL_OW 559
// end ;
52413: LD_VAR 0 2
52417: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
52418: LD_EXP 53
52422: PUSH
52423: LD_EXP 58
52427: AND
52428: IFFALSE 52552
52430: GO 52432
52432: DISABLE
52433: LD_INT 0
52435: PPUSH
52436: PPUSH
// begin enable ;
52437: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
52438: LD_ADDR_VAR 0 2
52442: PUSH
52443: LD_INT 22
52445: PUSH
52446: LD_OWVAR 2
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: LD_INT 34
52460: PUSH
52461: LD_INT 7
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 34
52470: PUSH
52471: LD_INT 45
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 34
52480: PUSH
52481: LD_INT 28
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 34
52490: PUSH
52491: LD_INT 47
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PPUSH
52509: CALL_OW 69
52513: ST_TO_ADDR
// if not tmp then
52514: LD_VAR 0 2
52518: NOT
52519: IFFALSE 52523
// exit ;
52521: GO 52552
// for i in tmp do
52523: LD_ADDR_VAR 0 1
52527: PUSH
52528: LD_VAR 0 2
52532: PUSH
52533: FOR_IN
52534: IFFALSE 52550
// begin SetLives ( i , 0 ) ;
52536: LD_VAR 0 1
52540: PPUSH
52541: LD_INT 0
52543: PPUSH
52544: CALL_OW 234
// end ;
52548: GO 52533
52550: POP
52551: POP
// end ;
52552: PPOPN 2
52554: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
52555: LD_EXP 53
52559: PUSH
52560: LD_EXP 59
52564: AND
52565: IFFALSE 52649
52567: GO 52569
52569: DISABLE
52570: LD_INT 0
52572: PPUSH
52573: PPUSH
// begin enable ;
52574: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
52575: LD_ADDR_VAR 0 2
52579: PUSH
52580: LD_INT 22
52582: PUSH
52583: LD_OWVAR 2
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 32
52594: PUSH
52595: LD_INT 3
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PPUSH
52606: CALL_OW 69
52610: ST_TO_ADDR
// if not tmp then
52611: LD_VAR 0 2
52615: NOT
52616: IFFALSE 52620
// exit ;
52618: GO 52649
// for i in tmp do
52620: LD_ADDR_VAR 0 1
52624: PUSH
52625: LD_VAR 0 2
52629: PUSH
52630: FOR_IN
52631: IFFALSE 52647
// begin SetLives ( i , 0 ) ;
52633: LD_VAR 0 1
52637: PPUSH
52638: LD_INT 0
52640: PPUSH
52641: CALL_OW 234
// end ;
52645: GO 52630
52647: POP
52648: POP
// end ;
52649: PPOPN 2
52651: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
52652: LD_EXP 53
52656: PUSH
52657: LD_EXP 56
52661: AND
52662: IFFALSE 52755
52664: GO 52666
52666: DISABLE
52667: LD_INT 0
52669: PPUSH
// begin enable ;
52670: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
52671: LD_ADDR_VAR 0 1
52675: PUSH
52676: LD_INT 22
52678: PUSH
52679: LD_OWVAR 2
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: LD_INT 25
52693: PUSH
52694: LD_INT 5
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 25
52703: PUSH
52704: LD_INT 9
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 25
52713: PUSH
52714: LD_INT 8
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PPUSH
52731: CALL_OW 69
52735: PUSH
52736: FOR_IN
52737: IFFALSE 52753
// begin SetClass ( i , 1 ) ;
52739: LD_VAR 0 1
52743: PPUSH
52744: LD_INT 1
52746: PPUSH
52747: CALL_OW 336
// end ;
52751: GO 52736
52753: POP
52754: POP
// end ;
52755: PPOPN 1
52757: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
52758: LD_EXP 53
52762: PUSH
52763: LD_EXP 57
52767: AND
52768: PUSH
52769: LD_OWVAR 65
52773: PUSH
52774: LD_INT 7
52776: LESS
52777: AND
52778: IFFALSE 52792
52780: GO 52782
52782: DISABLE
// begin enable ;
52783: ENABLE
// game_speed := 7 ;
52784: LD_ADDR_OWVAR 65
52788: PUSH
52789: LD_INT 7
52791: ST_TO_ADDR
// end ;
52792: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
52793: LD_EXP 53
52797: PUSH
52798: LD_EXP 60
52802: AND
52803: IFFALSE 53005
52805: GO 52807
52807: DISABLE
52808: LD_INT 0
52810: PPUSH
52811: PPUSH
52812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
52813: LD_ADDR_VAR 0 3
52817: PUSH
52818: LD_INT 81
52820: PUSH
52821: LD_OWVAR 2
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 21
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PPUSH
52844: CALL_OW 69
52848: ST_TO_ADDR
// if not tmp then
52849: LD_VAR 0 3
52853: NOT
52854: IFFALSE 52858
// exit ;
52856: GO 53005
// if tmp > 5 then
52858: LD_VAR 0 3
52862: PUSH
52863: LD_INT 5
52865: GREATER
52866: IFFALSE 52878
// k := 5 else
52868: LD_ADDR_VAR 0 2
52872: PUSH
52873: LD_INT 5
52875: ST_TO_ADDR
52876: GO 52888
// k := tmp ;
52878: LD_ADDR_VAR 0 2
52882: PUSH
52883: LD_VAR 0 3
52887: ST_TO_ADDR
// for i := 1 to k do
52888: LD_ADDR_VAR 0 1
52892: PUSH
52893: DOUBLE
52894: LD_INT 1
52896: DEC
52897: ST_TO_ADDR
52898: LD_VAR 0 2
52902: PUSH
52903: FOR_TO
52904: IFFALSE 53003
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
52906: LD_VAR 0 3
52910: PUSH
52911: LD_VAR 0 1
52915: ARRAY
52916: PPUSH
52917: LD_VAR 0 1
52921: PUSH
52922: LD_INT 4
52924: MOD
52925: PUSH
52926: LD_INT 1
52928: PLUS
52929: PPUSH
52930: CALL_OW 259
52934: PUSH
52935: LD_INT 10
52937: LESS
52938: IFFALSE 53001
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
52940: LD_VAR 0 3
52944: PUSH
52945: LD_VAR 0 1
52949: ARRAY
52950: PPUSH
52951: LD_VAR 0 1
52955: PUSH
52956: LD_INT 4
52958: MOD
52959: PUSH
52960: LD_INT 1
52962: PLUS
52963: PPUSH
52964: LD_VAR 0 3
52968: PUSH
52969: LD_VAR 0 1
52973: ARRAY
52974: PPUSH
52975: LD_VAR 0 1
52979: PUSH
52980: LD_INT 4
52982: MOD
52983: PUSH
52984: LD_INT 1
52986: PLUS
52987: PPUSH
52988: CALL_OW 259
52992: PUSH
52993: LD_INT 1
52995: PLUS
52996: PPUSH
52997: CALL_OW 237
53001: GO 52903
53003: POP
53004: POP
// end ;
53005: PPOPN 3
53007: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
53008: LD_EXP 53
53012: PUSH
53013: LD_EXP 61
53017: AND
53018: IFFALSE 53038
53020: GO 53022
53022: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
53023: LD_INT 4
53025: PPUSH
53026: LD_OWVAR 2
53030: PPUSH
53031: LD_INT 0
53033: PPUSH
53034: CALL_OW 324
53038: END
// every 0 0$1 trigger StreamModeActive and sShovel do
53039: LD_EXP 53
53043: PUSH
53044: LD_EXP 90
53048: AND
53049: IFFALSE 53069
53051: GO 53053
53053: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
53054: LD_INT 19
53056: PPUSH
53057: LD_OWVAR 2
53061: PPUSH
53062: LD_INT 0
53064: PPUSH
53065: CALL_OW 324
53069: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
53070: LD_EXP 53
53074: PUSH
53075: LD_EXP 62
53079: AND
53080: IFFALSE 53182
53082: GO 53084
53084: DISABLE
53085: LD_INT 0
53087: PPUSH
53088: PPUSH
// begin enable ;
53089: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
53090: LD_ADDR_VAR 0 2
53094: PUSH
53095: LD_INT 22
53097: PUSH
53098: LD_OWVAR 2
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 2
53109: PUSH
53110: LD_INT 34
53112: PUSH
53113: LD_INT 11
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 34
53122: PUSH
53123: LD_INT 30
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: LIST
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PPUSH
53139: CALL_OW 69
53143: ST_TO_ADDR
// if not tmp then
53144: LD_VAR 0 2
53148: NOT
53149: IFFALSE 53153
// exit ;
53151: GO 53182
// for i in tmp do
53153: LD_ADDR_VAR 0 1
53157: PUSH
53158: LD_VAR 0 2
53162: PUSH
53163: FOR_IN
53164: IFFALSE 53180
// begin SetLives ( i , 0 ) ;
53166: LD_VAR 0 1
53170: PPUSH
53171: LD_INT 0
53173: PPUSH
53174: CALL_OW 234
// end ;
53178: GO 53163
53180: POP
53181: POP
// end ;
53182: PPOPN 2
53184: END
// every 0 0$1 trigger StreamModeActive and sBunker do
53185: LD_EXP 53
53189: PUSH
53190: LD_EXP 63
53194: AND
53195: IFFALSE 53215
53197: GO 53199
53199: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
53200: LD_INT 32
53202: PPUSH
53203: LD_OWVAR 2
53207: PPUSH
53208: LD_INT 0
53210: PPUSH
53211: CALL_OW 324
53215: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
53216: LD_EXP 53
53220: PUSH
53221: LD_EXP 64
53225: AND
53226: IFFALSE 53407
53228: GO 53230
53230: DISABLE
53231: LD_INT 0
53233: PPUSH
53234: PPUSH
53235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
53236: LD_ADDR_VAR 0 2
53240: PUSH
53241: LD_INT 22
53243: PUSH
53244: LD_OWVAR 2
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 33
53255: PUSH
53256: LD_INT 3
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PPUSH
53267: CALL_OW 69
53271: ST_TO_ADDR
// if not tmp then
53272: LD_VAR 0 2
53276: NOT
53277: IFFALSE 53281
// exit ;
53279: GO 53407
// side := 0 ;
53281: LD_ADDR_VAR 0 3
53285: PUSH
53286: LD_INT 0
53288: ST_TO_ADDR
// for i := 1 to 8 do
53289: LD_ADDR_VAR 0 1
53293: PUSH
53294: DOUBLE
53295: LD_INT 1
53297: DEC
53298: ST_TO_ADDR
53299: LD_INT 8
53301: PUSH
53302: FOR_TO
53303: IFFALSE 53351
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
53305: LD_OWVAR 2
53309: PUSH
53310: LD_VAR 0 1
53314: NONEQUAL
53315: PUSH
53316: LD_OWVAR 2
53320: PPUSH
53321: LD_VAR 0 1
53325: PPUSH
53326: CALL_OW 81
53330: PUSH
53331: LD_INT 2
53333: EQUAL
53334: AND
53335: IFFALSE 53349
// begin side := i ;
53337: LD_ADDR_VAR 0 3
53341: PUSH
53342: LD_VAR 0 1
53346: ST_TO_ADDR
// break ;
53347: GO 53351
// end ;
53349: GO 53302
53351: POP
53352: POP
// if not side then
53353: LD_VAR 0 3
53357: NOT
53358: IFFALSE 53362
// exit ;
53360: GO 53407
// for i := 1 to tmp do
53362: LD_ADDR_VAR 0 1
53366: PUSH
53367: DOUBLE
53368: LD_INT 1
53370: DEC
53371: ST_TO_ADDR
53372: LD_VAR 0 2
53376: PUSH
53377: FOR_TO
53378: IFFALSE 53405
// if Prob ( 60 ) then
53380: LD_INT 60
53382: PPUSH
53383: CALL_OW 13
53387: IFFALSE 53403
// SetSide ( i , side ) ;
53389: LD_VAR 0 1
53393: PPUSH
53394: LD_VAR 0 3
53398: PPUSH
53399: CALL_OW 235
53403: GO 53377
53405: POP
53406: POP
// end ;
53407: PPOPN 3
53409: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
53410: LD_EXP 53
53414: PUSH
53415: LD_EXP 66
53419: AND
53420: IFFALSE 53539
53422: GO 53424
53424: DISABLE
53425: LD_INT 0
53427: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
53428: LD_ADDR_VAR 0 1
53432: PUSH
53433: LD_INT 22
53435: PUSH
53436: LD_OWVAR 2
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 21
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 3
53457: PUSH
53458: LD_INT 23
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: LIST
53476: PPUSH
53477: CALL_OW 69
53481: PUSH
53482: FOR_IN
53483: IFFALSE 53537
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
53485: LD_VAR 0 1
53489: PPUSH
53490: CALL_OW 257
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 2
53500: PUSH
53501: LD_INT 3
53503: PUSH
53504: LD_INT 4
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: IN
53513: IFFALSE 53535
// SetClass ( un , rand ( 1 , 4 ) ) ;
53515: LD_VAR 0 1
53519: PPUSH
53520: LD_INT 1
53522: PPUSH
53523: LD_INT 4
53525: PPUSH
53526: CALL_OW 12
53530: PPUSH
53531: CALL_OW 336
53535: GO 53482
53537: POP
53538: POP
// end ;
53539: PPOPN 1
53541: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
53542: LD_EXP 53
53546: PUSH
53547: LD_EXP 65
53551: AND
53552: IFFALSE 53631
53554: GO 53556
53556: DISABLE
53557: LD_INT 0
53559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53560: LD_ADDR_VAR 0 1
53564: PUSH
53565: LD_INT 22
53567: PUSH
53568: LD_OWVAR 2
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 21
53579: PUSH
53580: LD_INT 3
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PPUSH
53591: CALL_OW 69
53595: ST_TO_ADDR
// if not tmp then
53596: LD_VAR 0 1
53600: NOT
53601: IFFALSE 53605
// exit ;
53603: GO 53631
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
53605: LD_VAR 0 1
53609: PUSH
53610: LD_INT 1
53612: PPUSH
53613: LD_VAR 0 1
53617: PPUSH
53618: CALL_OW 12
53622: ARRAY
53623: PPUSH
53624: LD_INT 100
53626: PPUSH
53627: CALL_OW 234
// end ;
53631: PPOPN 1
53633: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
53634: LD_EXP 53
53638: PUSH
53639: LD_EXP 67
53643: AND
53644: IFFALSE 53742
53646: GO 53648
53648: DISABLE
53649: LD_INT 0
53651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53652: LD_ADDR_VAR 0 1
53656: PUSH
53657: LD_INT 22
53659: PUSH
53660: LD_OWVAR 2
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 21
53671: PUSH
53672: LD_INT 1
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PPUSH
53683: CALL_OW 69
53687: ST_TO_ADDR
// if not tmp then
53688: LD_VAR 0 1
53692: NOT
53693: IFFALSE 53697
// exit ;
53695: GO 53742
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
53697: LD_VAR 0 1
53701: PUSH
53702: LD_INT 1
53704: PPUSH
53705: LD_VAR 0 1
53709: PPUSH
53710: CALL_OW 12
53714: ARRAY
53715: PPUSH
53716: LD_INT 1
53718: PPUSH
53719: LD_INT 4
53721: PPUSH
53722: CALL_OW 12
53726: PPUSH
53727: LD_INT 3000
53729: PPUSH
53730: LD_INT 9000
53732: PPUSH
53733: CALL_OW 12
53737: PPUSH
53738: CALL_OW 492
// end ;
53742: PPOPN 1
53744: END
// every 0 0$1 trigger StreamModeActive and sDepot do
53745: LD_EXP 53
53749: PUSH
53750: LD_EXP 68
53754: AND
53755: IFFALSE 53775
53757: GO 53759
53759: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
53760: LD_INT 1
53762: PPUSH
53763: LD_OWVAR 2
53767: PPUSH
53768: LD_INT 0
53770: PPUSH
53771: CALL_OW 324
53775: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
53776: LD_EXP 53
53780: PUSH
53781: LD_EXP 69
53785: AND
53786: IFFALSE 53869
53788: GO 53790
53790: DISABLE
53791: LD_INT 0
53793: PPUSH
53794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53795: LD_ADDR_VAR 0 2
53799: PUSH
53800: LD_INT 22
53802: PUSH
53803: LD_OWVAR 2
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 21
53814: PUSH
53815: LD_INT 3
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PPUSH
53826: CALL_OW 69
53830: ST_TO_ADDR
// if not tmp then
53831: LD_VAR 0 2
53835: NOT
53836: IFFALSE 53840
// exit ;
53838: GO 53869
// for i in tmp do
53840: LD_ADDR_VAR 0 1
53844: PUSH
53845: LD_VAR 0 2
53849: PUSH
53850: FOR_IN
53851: IFFALSE 53867
// SetBLevel ( i , 10 ) ;
53853: LD_VAR 0 1
53857: PPUSH
53858: LD_INT 10
53860: PPUSH
53861: CALL_OW 241
53865: GO 53850
53867: POP
53868: POP
// end ;
53869: PPOPN 2
53871: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
53872: LD_EXP 53
53876: PUSH
53877: LD_EXP 70
53881: AND
53882: IFFALSE 53993
53884: GO 53886
53886: DISABLE
53887: LD_INT 0
53889: PPUSH
53890: PPUSH
53891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53892: LD_ADDR_VAR 0 3
53896: PUSH
53897: LD_INT 22
53899: PUSH
53900: LD_OWVAR 2
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 25
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PPUSH
53923: CALL_OW 69
53927: ST_TO_ADDR
// if not tmp then
53928: LD_VAR 0 3
53932: NOT
53933: IFFALSE 53937
// exit ;
53935: GO 53993
// un := tmp [ rand ( 1 , tmp ) ] ;
53937: LD_ADDR_VAR 0 2
53941: PUSH
53942: LD_VAR 0 3
53946: PUSH
53947: LD_INT 1
53949: PPUSH
53950: LD_VAR 0 3
53954: PPUSH
53955: CALL_OW 12
53959: ARRAY
53960: ST_TO_ADDR
// if Crawls ( un ) then
53961: LD_VAR 0 2
53965: PPUSH
53966: CALL_OW 318
53970: IFFALSE 53981
// ComWalk ( un ) ;
53972: LD_VAR 0 2
53976: PPUSH
53977: CALL_OW 138
// SetClass ( un , class_sniper ) ;
53981: LD_VAR 0 2
53985: PPUSH
53986: LD_INT 5
53988: PPUSH
53989: CALL_OW 336
// end ;
53993: PPOPN 3
53995: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
53996: LD_EXP 53
54000: PUSH
54001: LD_EXP 71
54005: AND
54006: PUSH
54007: LD_OWVAR 67
54011: PUSH
54012: LD_INT 4
54014: LESS
54015: AND
54016: IFFALSE 54035
54018: GO 54020
54020: DISABLE
// begin Difficulty := Difficulty + 1 ;
54021: LD_ADDR_OWVAR 67
54025: PUSH
54026: LD_OWVAR 67
54030: PUSH
54031: LD_INT 1
54033: PLUS
54034: ST_TO_ADDR
// end ;
54035: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
54036: LD_EXP 53
54040: PUSH
54041: LD_EXP 72
54045: AND
54046: IFFALSE 54149
54048: GO 54050
54050: DISABLE
54051: LD_INT 0
54053: PPUSH
// begin for i := 1 to 5 do
54054: LD_ADDR_VAR 0 1
54058: PUSH
54059: DOUBLE
54060: LD_INT 1
54062: DEC
54063: ST_TO_ADDR
54064: LD_INT 5
54066: PUSH
54067: FOR_TO
54068: IFFALSE 54147
// begin uc_nation := nation_nature ;
54070: LD_ADDR_OWVAR 21
54074: PUSH
54075: LD_INT 0
54077: ST_TO_ADDR
// uc_side := 0 ;
54078: LD_ADDR_OWVAR 20
54082: PUSH
54083: LD_INT 0
54085: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54086: LD_ADDR_OWVAR 29
54090: PUSH
54091: LD_INT 12
54093: PUSH
54094: LD_INT 12
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: ST_TO_ADDR
// hc_agressivity := 20 ;
54101: LD_ADDR_OWVAR 35
54105: PUSH
54106: LD_INT 20
54108: ST_TO_ADDR
// hc_class := class_tiger ;
54109: LD_ADDR_OWVAR 28
54113: PUSH
54114: LD_INT 14
54116: ST_TO_ADDR
// hc_gallery :=  ;
54117: LD_ADDR_OWVAR 33
54121: PUSH
54122: LD_STRING 
54124: ST_TO_ADDR
// hc_name :=  ;
54125: LD_ADDR_OWVAR 26
54129: PUSH
54130: LD_STRING 
54132: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
54133: CALL_OW 44
54137: PPUSH
54138: LD_INT 0
54140: PPUSH
54141: CALL_OW 51
// end ;
54145: GO 54067
54147: POP
54148: POP
// end ;
54149: PPOPN 1
54151: END
// every 0 0$1 trigger StreamModeActive and sBomb do
54152: LD_EXP 53
54156: PUSH
54157: LD_EXP 73
54161: AND
54162: IFFALSE 54171
54164: GO 54166
54166: DISABLE
// StreamSibBomb ;
54167: CALL 54172 0 0
54171: END
// export function StreamSibBomb ; var i , x , y ; begin
54172: LD_INT 0
54174: PPUSH
54175: PPUSH
54176: PPUSH
54177: PPUSH
// result := false ;
54178: LD_ADDR_VAR 0 1
54182: PUSH
54183: LD_INT 0
54185: ST_TO_ADDR
// for i := 1 to 16 do
54186: LD_ADDR_VAR 0 2
54190: PUSH
54191: DOUBLE
54192: LD_INT 1
54194: DEC
54195: ST_TO_ADDR
54196: LD_INT 16
54198: PUSH
54199: FOR_TO
54200: IFFALSE 54399
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
54202: LD_ADDR_VAR 0 3
54206: PUSH
54207: LD_INT 10
54209: PUSH
54210: LD_INT 20
54212: PUSH
54213: LD_INT 30
54215: PUSH
54216: LD_INT 40
54218: PUSH
54219: LD_INT 50
54221: PUSH
54222: LD_INT 60
54224: PUSH
54225: LD_INT 70
54227: PUSH
54228: LD_INT 80
54230: PUSH
54231: LD_INT 90
54233: PUSH
54234: LD_INT 100
54236: PUSH
54237: LD_INT 110
54239: PUSH
54240: LD_INT 120
54242: PUSH
54243: LD_INT 130
54245: PUSH
54246: LD_INT 140
54248: PUSH
54249: LD_INT 150
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: PPUSH
54272: LD_INT 15
54274: PPUSH
54275: CALL_OW 12
54279: ARRAY
54280: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
54281: LD_ADDR_VAR 0 4
54285: PUSH
54286: LD_INT 10
54288: PUSH
54289: LD_INT 20
54291: PUSH
54292: LD_INT 30
54294: PUSH
54295: LD_INT 40
54297: PUSH
54298: LD_INT 50
54300: PUSH
54301: LD_INT 60
54303: PUSH
54304: LD_INT 70
54306: PUSH
54307: LD_INT 80
54309: PUSH
54310: LD_INT 90
54312: PUSH
54313: LD_INT 100
54315: PUSH
54316: LD_INT 110
54318: PUSH
54319: LD_INT 120
54321: PUSH
54322: LD_INT 130
54324: PUSH
54325: LD_INT 140
54327: PUSH
54328: LD_INT 150
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 1
54350: PPUSH
54351: LD_INT 15
54353: PPUSH
54354: CALL_OW 12
54358: ARRAY
54359: ST_TO_ADDR
// if ValidHex ( x , y ) then
54360: LD_VAR 0 3
54364: PPUSH
54365: LD_VAR 0 4
54369: PPUSH
54370: CALL_OW 488
54374: IFFALSE 54397
// begin result := [ x , y ] ;
54376: LD_ADDR_VAR 0 1
54380: PUSH
54381: LD_VAR 0 3
54385: PUSH
54386: LD_VAR 0 4
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: ST_TO_ADDR
// break ;
54395: GO 54399
// end ; end ;
54397: GO 54199
54399: POP
54400: POP
// if result then
54401: LD_VAR 0 1
54405: IFFALSE 54465
// begin ToLua ( playSibBomb() ) ;
54407: LD_STRING playSibBomb()
54409: PPUSH
54410: CALL_OW 559
// wait ( 0 0$14 ) ;
54414: LD_INT 490
54416: PPUSH
54417: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
54421: LD_VAR 0 1
54425: PUSH
54426: LD_INT 1
54428: ARRAY
54429: PPUSH
54430: LD_VAR 0 1
54434: PUSH
54435: LD_INT 2
54437: ARRAY
54438: PPUSH
54439: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
54443: LD_VAR 0 1
54447: PUSH
54448: LD_INT 1
54450: ARRAY
54451: PPUSH
54452: LD_VAR 0 1
54456: PUSH
54457: LD_INT 2
54459: ARRAY
54460: PPUSH
54461: CALL_OW 429
// end ; end ;
54465: LD_VAR 0 1
54469: RET
// every 0 0$1 trigger StreamModeActive and sReset do
54470: LD_EXP 53
54474: PUSH
54475: LD_EXP 75
54479: AND
54480: IFFALSE 54492
54482: GO 54484
54484: DISABLE
// YouLost (  ) ;
54485: LD_STRING 
54487: PPUSH
54488: CALL_OW 104
54492: END
// every 0 0$1 trigger StreamModeActive and sFog do
54493: LD_EXP 53
54497: PUSH
54498: LD_EXP 74
54502: AND
54503: IFFALSE 54517
54505: GO 54507
54507: DISABLE
// FogOff ( your_side ) ;
54508: LD_OWVAR 2
54512: PPUSH
54513: CALL_OW 344
54517: END
// every 0 0$1 trigger StreamModeActive and sSun do
54518: LD_EXP 53
54522: PUSH
54523: LD_EXP 76
54527: AND
54528: IFFALSE 54556
54530: GO 54532
54532: DISABLE
// begin solar_recharge_percent := 0 ;
54533: LD_ADDR_OWVAR 79
54537: PUSH
54538: LD_INT 0
54540: ST_TO_ADDR
// wait ( 5 5$00 ) ;
54541: LD_INT 10500
54543: PPUSH
54544: CALL_OW 67
// solar_recharge_percent := 100 ;
54548: LD_ADDR_OWVAR 79
54552: PUSH
54553: LD_INT 100
54555: ST_TO_ADDR
// end ;
54556: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
54557: LD_EXP 53
54561: PUSH
54562: LD_EXP 77
54566: AND
54567: IFFALSE 54806
54569: GO 54571
54571: DISABLE
54572: LD_INT 0
54574: PPUSH
54575: PPUSH
54576: PPUSH
// begin tmp := [ ] ;
54577: LD_ADDR_VAR 0 3
54581: PUSH
54582: EMPTY
54583: ST_TO_ADDR
// for i := 1 to 6 do
54584: LD_ADDR_VAR 0 1
54588: PUSH
54589: DOUBLE
54590: LD_INT 1
54592: DEC
54593: ST_TO_ADDR
54594: LD_INT 6
54596: PUSH
54597: FOR_TO
54598: IFFALSE 54703
// begin uc_nation := nation_nature ;
54600: LD_ADDR_OWVAR 21
54604: PUSH
54605: LD_INT 0
54607: ST_TO_ADDR
// uc_side := 0 ;
54608: LD_ADDR_OWVAR 20
54612: PUSH
54613: LD_INT 0
54615: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54616: LD_ADDR_OWVAR 29
54620: PUSH
54621: LD_INT 12
54623: PUSH
54624: LD_INT 12
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: ST_TO_ADDR
// hc_agressivity := 20 ;
54631: LD_ADDR_OWVAR 35
54635: PUSH
54636: LD_INT 20
54638: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
54639: LD_ADDR_OWVAR 28
54643: PUSH
54644: LD_INT 17
54646: ST_TO_ADDR
// hc_gallery :=  ;
54647: LD_ADDR_OWVAR 33
54651: PUSH
54652: LD_STRING 
54654: ST_TO_ADDR
// hc_name :=  ;
54655: LD_ADDR_OWVAR 26
54659: PUSH
54660: LD_STRING 
54662: ST_TO_ADDR
// un := CreateHuman ;
54663: LD_ADDR_VAR 0 2
54667: PUSH
54668: CALL_OW 44
54672: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
54673: LD_VAR 0 2
54677: PPUSH
54678: LD_INT 1
54680: PPUSH
54681: CALL_OW 51
// tmp := tmp ^ un ;
54685: LD_ADDR_VAR 0 3
54689: PUSH
54690: LD_VAR 0 3
54694: PUSH
54695: LD_VAR 0 2
54699: ADD
54700: ST_TO_ADDR
// end ;
54701: GO 54597
54703: POP
54704: POP
// repeat wait ( 0 0$1 ) ;
54705: LD_INT 35
54707: PPUSH
54708: CALL_OW 67
// for un in tmp do
54712: LD_ADDR_VAR 0 2
54716: PUSH
54717: LD_VAR 0 3
54721: PUSH
54722: FOR_IN
54723: IFFALSE 54797
// begin if IsDead ( un ) then
54725: LD_VAR 0 2
54729: PPUSH
54730: CALL_OW 301
54734: IFFALSE 54754
// begin tmp := tmp diff un ;
54736: LD_ADDR_VAR 0 3
54740: PUSH
54741: LD_VAR 0 3
54745: PUSH
54746: LD_VAR 0 2
54750: DIFF
54751: ST_TO_ADDR
// continue ;
54752: GO 54722
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
54754: LD_VAR 0 2
54758: PPUSH
54759: LD_INT 3
54761: PUSH
54762: LD_INT 22
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PPUSH
54776: CALL_OW 69
54780: PPUSH
54781: LD_VAR 0 2
54785: PPUSH
54786: CALL_OW 74
54790: PPUSH
54791: CALL_OW 115
// end ;
54795: GO 54722
54797: POP
54798: POP
// until not tmp ;
54799: LD_VAR 0 3
54803: NOT
54804: IFFALSE 54705
// end ;
54806: PPOPN 3
54808: END
// every 0 0$1 trigger StreamModeActive and sTroll do
54809: LD_EXP 53
54813: PUSH
54814: LD_EXP 78
54818: AND
54819: IFFALSE 54873
54821: GO 54823
54823: DISABLE
// begin ToLua ( displayTroll(); ) ;
54824: LD_STRING displayTroll();
54826: PPUSH
54827: CALL_OW 559
// wait ( 3 3$00 ) ;
54831: LD_INT 6300
54833: PPUSH
54834: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54838: LD_STRING hideTroll();
54840: PPUSH
54841: CALL_OW 559
// wait ( 1 1$00 ) ;
54845: LD_INT 2100
54847: PPUSH
54848: CALL_OW 67
// ToLua ( displayTroll(); ) ;
54852: LD_STRING displayTroll();
54854: PPUSH
54855: CALL_OW 559
// wait ( 1 1$00 ) ;
54859: LD_INT 2100
54861: PPUSH
54862: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54866: LD_STRING hideTroll();
54868: PPUSH
54869: CALL_OW 559
// end ;
54873: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
54874: LD_EXP 53
54878: PUSH
54879: LD_EXP 79
54883: AND
54884: IFFALSE 54947
54886: GO 54888
54888: DISABLE
54889: LD_INT 0
54891: PPUSH
// begin p := 0 ;
54892: LD_ADDR_VAR 0 1
54896: PUSH
54897: LD_INT 0
54899: ST_TO_ADDR
// repeat game_speed := 1 ;
54900: LD_ADDR_OWVAR 65
54904: PUSH
54905: LD_INT 1
54907: ST_TO_ADDR
// wait ( 0 0$1 ) ;
54908: LD_INT 35
54910: PPUSH
54911: CALL_OW 67
// p := p + 1 ;
54915: LD_ADDR_VAR 0 1
54919: PUSH
54920: LD_VAR 0 1
54924: PUSH
54925: LD_INT 1
54927: PLUS
54928: ST_TO_ADDR
// until p >= 60 ;
54929: LD_VAR 0 1
54933: PUSH
54934: LD_INT 60
54936: GREATEREQUAL
54937: IFFALSE 54900
// game_speed := 4 ;
54939: LD_ADDR_OWVAR 65
54943: PUSH
54944: LD_INT 4
54946: ST_TO_ADDR
// end ;
54947: PPOPN 1
54949: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
54950: LD_EXP 53
54954: PUSH
54955: LD_EXP 80
54959: AND
54960: IFFALSE 55106
54962: GO 54964
54964: DISABLE
54965: LD_INT 0
54967: PPUSH
54968: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54969: LD_ADDR_VAR 0 1
54973: PUSH
54974: LD_INT 22
54976: PUSH
54977: LD_OWVAR 2
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 2
54988: PUSH
54989: LD_INT 30
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 30
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: LIST
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PPUSH
55018: CALL_OW 69
55022: ST_TO_ADDR
// if not depot then
55023: LD_VAR 0 1
55027: NOT
55028: IFFALSE 55032
// exit ;
55030: GO 55106
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
55032: LD_ADDR_VAR 0 2
55036: PUSH
55037: LD_VAR 0 1
55041: PUSH
55042: LD_INT 1
55044: PPUSH
55045: LD_VAR 0 1
55049: PPUSH
55050: CALL_OW 12
55054: ARRAY
55055: PPUSH
55056: CALL_OW 274
55060: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
55061: LD_VAR 0 2
55065: PPUSH
55066: LD_INT 1
55068: PPUSH
55069: LD_INT 0
55071: PPUSH
55072: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
55076: LD_VAR 0 2
55080: PPUSH
55081: LD_INT 2
55083: PPUSH
55084: LD_INT 0
55086: PPUSH
55087: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
55091: LD_VAR 0 2
55095: PPUSH
55096: LD_INT 3
55098: PPUSH
55099: LD_INT 0
55101: PPUSH
55102: CALL_OW 277
// end ;
55106: PPOPN 2
55108: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
55109: LD_EXP 53
55113: PUSH
55114: LD_EXP 81
55118: AND
55119: IFFALSE 55216
55121: GO 55123
55123: DISABLE
55124: LD_INT 0
55126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55127: LD_ADDR_VAR 0 1
55131: PUSH
55132: LD_INT 22
55134: PUSH
55135: LD_OWVAR 2
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 21
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 3
55156: PUSH
55157: LD_INT 23
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: LIST
55175: PPUSH
55176: CALL_OW 69
55180: ST_TO_ADDR
// if not tmp then
55181: LD_VAR 0 1
55185: NOT
55186: IFFALSE 55190
// exit ;
55188: GO 55216
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
55190: LD_VAR 0 1
55194: PUSH
55195: LD_INT 1
55197: PPUSH
55198: LD_VAR 0 1
55202: PPUSH
55203: CALL_OW 12
55207: ARRAY
55208: PPUSH
55209: LD_INT 200
55211: PPUSH
55212: CALL_OW 234
// end ;
55216: PPOPN 1
55218: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
55219: LD_EXP 53
55223: PUSH
55224: LD_EXP 82
55228: AND
55229: IFFALSE 55308
55231: GO 55233
55233: DISABLE
55234: LD_INT 0
55236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
55237: LD_ADDR_VAR 0 1
55241: PUSH
55242: LD_INT 22
55244: PUSH
55245: LD_OWVAR 2
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 21
55256: PUSH
55257: LD_INT 2
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PPUSH
55268: CALL_OW 69
55272: ST_TO_ADDR
// if not tmp then
55273: LD_VAR 0 1
55277: NOT
55278: IFFALSE 55282
// exit ;
55280: GO 55308
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
55282: LD_VAR 0 1
55286: PUSH
55287: LD_INT 1
55289: PPUSH
55290: LD_VAR 0 1
55294: PPUSH
55295: CALL_OW 12
55299: ARRAY
55300: PPUSH
55301: LD_INT 60
55303: PPUSH
55304: CALL_OW 234
// end ;
55308: PPOPN 1
55310: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
55311: LD_EXP 53
55315: PUSH
55316: LD_EXP 83
55320: AND
55321: IFFALSE 55420
55323: GO 55325
55325: DISABLE
55326: LD_INT 0
55328: PPUSH
55329: PPUSH
// begin enable ;
55330: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
55331: LD_ADDR_VAR 0 1
55335: PUSH
55336: LD_INT 22
55338: PUSH
55339: LD_OWVAR 2
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 61
55350: PUSH
55351: EMPTY
55352: LIST
55353: PUSH
55354: LD_INT 33
55356: PUSH
55357: LD_INT 2
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: LIST
55368: PPUSH
55369: CALL_OW 69
55373: ST_TO_ADDR
// if not tmp then
55374: LD_VAR 0 1
55378: NOT
55379: IFFALSE 55383
// exit ;
55381: GO 55420
// for i in tmp do
55383: LD_ADDR_VAR 0 2
55387: PUSH
55388: LD_VAR 0 1
55392: PUSH
55393: FOR_IN
55394: IFFALSE 55418
// if IsControledBy ( i ) then
55396: LD_VAR 0 2
55400: PPUSH
55401: CALL_OW 312
55405: IFFALSE 55416
// ComUnlink ( i ) ;
55407: LD_VAR 0 2
55411: PPUSH
55412: CALL_OW 136
55416: GO 55393
55418: POP
55419: POP
// end ;
55420: PPOPN 2
55422: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
55423: LD_EXP 53
55427: PUSH
55428: LD_EXP 84
55432: AND
55433: IFFALSE 55573
55435: GO 55437
55437: DISABLE
55438: LD_INT 0
55440: PPUSH
55441: PPUSH
// begin ToLua ( displayPowell(); ) ;
55442: LD_STRING displayPowell();
55444: PPUSH
55445: CALL_OW 559
// uc_side := 0 ;
55449: LD_ADDR_OWVAR 20
55453: PUSH
55454: LD_INT 0
55456: ST_TO_ADDR
// uc_nation := 2 ;
55457: LD_ADDR_OWVAR 21
55461: PUSH
55462: LD_INT 2
55464: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
55465: LD_ADDR_OWVAR 37
55469: PUSH
55470: LD_INT 14
55472: ST_TO_ADDR
// vc_engine := engine_siberite ;
55473: LD_ADDR_OWVAR 39
55477: PUSH
55478: LD_INT 3
55480: ST_TO_ADDR
// vc_control := control_apeman ;
55481: LD_ADDR_OWVAR 38
55485: PUSH
55486: LD_INT 5
55488: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
55489: LD_ADDR_OWVAR 40
55493: PUSH
55494: LD_INT 29
55496: ST_TO_ADDR
// un := CreateVehicle ;
55497: LD_ADDR_VAR 0 2
55501: PUSH
55502: CALL_OW 45
55506: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55507: LD_VAR 0 2
55511: PPUSH
55512: LD_INT 1
55514: PPUSH
55515: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55519: LD_INT 35
55521: PPUSH
55522: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55526: LD_VAR 0 2
55530: PPUSH
55531: LD_INT 22
55533: PUSH
55534: LD_OWVAR 2
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PPUSH
55543: CALL_OW 69
55547: PPUSH
55548: LD_VAR 0 2
55552: PPUSH
55553: CALL_OW 74
55557: PPUSH
55558: CALL_OW 115
// until IsDead ( un ) ;
55562: LD_VAR 0 2
55566: PPUSH
55567: CALL_OW 301
55571: IFFALSE 55519
// end ;
55573: PPOPN 2
55575: END
// every 0 0$1 trigger StreamModeActive and sStu do
55576: LD_EXP 53
55580: PUSH
55581: LD_EXP 92
55585: AND
55586: IFFALSE 55602
55588: GO 55590
55590: DISABLE
// begin ToLua ( displayStucuk(); ) ;
55591: LD_STRING displayStucuk();
55593: PPUSH
55594: CALL_OW 559
// ResetFog ;
55598: CALL_OW 335
// end ;
55602: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
55603: LD_EXP 53
55607: PUSH
55608: LD_EXP 85
55612: AND
55613: IFFALSE 55754
55615: GO 55617
55617: DISABLE
55618: LD_INT 0
55620: PPUSH
55621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55622: LD_ADDR_VAR 0 2
55626: PUSH
55627: LD_INT 22
55629: PUSH
55630: LD_OWVAR 2
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 21
55641: PUSH
55642: LD_INT 1
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PPUSH
55653: CALL_OW 69
55657: ST_TO_ADDR
// if not tmp then
55658: LD_VAR 0 2
55662: NOT
55663: IFFALSE 55667
// exit ;
55665: GO 55754
// un := tmp [ rand ( 1 , tmp ) ] ;
55667: LD_ADDR_VAR 0 1
55671: PUSH
55672: LD_VAR 0 2
55676: PUSH
55677: LD_INT 1
55679: PPUSH
55680: LD_VAR 0 2
55684: PPUSH
55685: CALL_OW 12
55689: ARRAY
55690: ST_TO_ADDR
// SetSide ( un , 0 ) ;
55691: LD_VAR 0 1
55695: PPUSH
55696: LD_INT 0
55698: PPUSH
55699: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
55703: LD_VAR 0 1
55707: PPUSH
55708: LD_OWVAR 3
55712: PUSH
55713: LD_VAR 0 1
55717: DIFF
55718: PPUSH
55719: LD_VAR 0 1
55723: PPUSH
55724: CALL_OW 74
55728: PPUSH
55729: CALL_OW 115
// wait ( 0 0$20 ) ;
55733: LD_INT 700
55735: PPUSH
55736: CALL_OW 67
// SetSide ( un , your_side ) ;
55740: LD_VAR 0 1
55744: PPUSH
55745: LD_OWVAR 2
55749: PPUSH
55750: CALL_OW 235
// end ;
55754: PPOPN 2
55756: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
55757: LD_EXP 53
55761: PUSH
55762: LD_EXP 86
55766: AND
55767: IFFALSE 55873
55769: GO 55771
55771: DISABLE
55772: LD_INT 0
55774: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55775: LD_ADDR_VAR 0 1
55779: PUSH
55780: LD_INT 22
55782: PUSH
55783: LD_OWVAR 2
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 2
55794: PUSH
55795: LD_INT 30
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 30
55807: PUSH
55808: LD_INT 1
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: LIST
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PPUSH
55824: CALL_OW 69
55828: ST_TO_ADDR
// if not depot then
55829: LD_VAR 0 1
55833: NOT
55834: IFFALSE 55838
// exit ;
55836: GO 55873
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
55838: LD_VAR 0 1
55842: PUSH
55843: LD_INT 1
55845: ARRAY
55846: PPUSH
55847: CALL_OW 250
55851: PPUSH
55852: LD_VAR 0 1
55856: PUSH
55857: LD_INT 1
55859: ARRAY
55860: PPUSH
55861: CALL_OW 251
55865: PPUSH
55866: LD_INT 70
55868: PPUSH
55869: CALL_OW 495
// end ;
55873: PPOPN 1
55875: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
55876: LD_EXP 53
55880: PUSH
55881: LD_EXP 87
55885: AND
55886: IFFALSE 56097
55888: GO 55890
55890: DISABLE
55891: LD_INT 0
55893: PPUSH
55894: PPUSH
55895: PPUSH
55896: PPUSH
55897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55898: LD_ADDR_VAR 0 5
55902: PUSH
55903: LD_INT 22
55905: PUSH
55906: LD_OWVAR 2
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 21
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PPUSH
55929: CALL_OW 69
55933: ST_TO_ADDR
// if not tmp then
55934: LD_VAR 0 5
55938: NOT
55939: IFFALSE 55943
// exit ;
55941: GO 56097
// for i in tmp do
55943: LD_ADDR_VAR 0 1
55947: PUSH
55948: LD_VAR 0 5
55952: PUSH
55953: FOR_IN
55954: IFFALSE 56095
// begin d := rand ( 0 , 5 ) ;
55956: LD_ADDR_VAR 0 4
55960: PUSH
55961: LD_INT 0
55963: PPUSH
55964: LD_INT 5
55966: PPUSH
55967: CALL_OW 12
55971: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
55972: LD_ADDR_VAR 0 2
55976: PUSH
55977: LD_VAR 0 1
55981: PPUSH
55982: CALL_OW 250
55986: PPUSH
55987: LD_VAR 0 4
55991: PPUSH
55992: LD_INT 3
55994: PPUSH
55995: LD_INT 12
55997: PPUSH
55998: CALL_OW 12
56002: PPUSH
56003: CALL_OW 272
56007: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
56008: LD_ADDR_VAR 0 3
56012: PUSH
56013: LD_VAR 0 1
56017: PPUSH
56018: CALL_OW 251
56022: PPUSH
56023: LD_VAR 0 4
56027: PPUSH
56028: LD_INT 3
56030: PPUSH
56031: LD_INT 12
56033: PPUSH
56034: CALL_OW 12
56038: PPUSH
56039: CALL_OW 273
56043: ST_TO_ADDR
// if ValidHex ( x , y ) then
56044: LD_VAR 0 2
56048: PPUSH
56049: LD_VAR 0 3
56053: PPUSH
56054: CALL_OW 488
56058: IFFALSE 56093
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
56060: LD_VAR 0 1
56064: PPUSH
56065: LD_VAR 0 2
56069: PPUSH
56070: LD_VAR 0 3
56074: PPUSH
56075: LD_INT 3
56077: PPUSH
56078: LD_INT 6
56080: PPUSH
56081: CALL_OW 12
56085: PPUSH
56086: LD_INT 1
56088: PPUSH
56089: CALL_OW 483
// end ;
56093: GO 55953
56095: POP
56096: POP
// end ;
56097: PPOPN 5
56099: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
56100: LD_EXP 53
56104: PUSH
56105: LD_EXP 88
56109: AND
56110: IFFALSE 56204
56112: GO 56114
56114: DISABLE
56115: LD_INT 0
56117: PPUSH
56118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
56119: LD_ADDR_VAR 0 2
56123: PUSH
56124: LD_INT 22
56126: PUSH
56127: LD_OWVAR 2
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 32
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 21
56148: PUSH
56149: LD_INT 2
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: LIST
56160: PPUSH
56161: CALL_OW 69
56165: ST_TO_ADDR
// if not tmp then
56166: LD_VAR 0 2
56170: NOT
56171: IFFALSE 56175
// exit ;
56173: GO 56204
// for i in tmp do
56175: LD_ADDR_VAR 0 1
56179: PUSH
56180: LD_VAR 0 2
56184: PUSH
56185: FOR_IN
56186: IFFALSE 56202
// SetFuel ( i , 0 ) ;
56188: LD_VAR 0 1
56192: PPUSH
56193: LD_INT 0
56195: PPUSH
56196: CALL_OW 240
56200: GO 56185
56202: POP
56203: POP
// end ;
56204: PPOPN 2
56206: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
56207: LD_EXP 53
56211: PUSH
56212: LD_EXP 89
56216: AND
56217: IFFALSE 56283
56219: GO 56221
56221: DISABLE
56222: LD_INT 0
56224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56225: LD_ADDR_VAR 0 1
56229: PUSH
56230: LD_INT 22
56232: PUSH
56233: LD_OWVAR 2
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 30
56244: PUSH
56245: LD_INT 29
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PPUSH
56256: CALL_OW 69
56260: ST_TO_ADDR
// if not tmp then
56261: LD_VAR 0 1
56265: NOT
56266: IFFALSE 56270
// exit ;
56268: GO 56283
// DestroyUnit ( tmp [ 1 ] ) ;
56270: LD_VAR 0 1
56274: PUSH
56275: LD_INT 1
56277: ARRAY
56278: PPUSH
56279: CALL_OW 65
// end ;
56283: PPOPN 1
56285: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
56286: LD_EXP 53
56290: PUSH
56291: LD_EXP 91
56295: AND
56296: IFFALSE 56425
56298: GO 56300
56300: DISABLE
56301: LD_INT 0
56303: PPUSH
// begin uc_side := 0 ;
56304: LD_ADDR_OWVAR 20
56308: PUSH
56309: LD_INT 0
56311: ST_TO_ADDR
// uc_nation := nation_arabian ;
56312: LD_ADDR_OWVAR 21
56316: PUSH
56317: LD_INT 2
56319: ST_TO_ADDR
// hc_gallery :=  ;
56320: LD_ADDR_OWVAR 33
56324: PUSH
56325: LD_STRING 
56327: ST_TO_ADDR
// hc_name :=  ;
56328: LD_ADDR_OWVAR 26
56332: PUSH
56333: LD_STRING 
56335: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
56336: LD_INT 1
56338: PPUSH
56339: LD_INT 11
56341: PPUSH
56342: LD_INT 10
56344: PPUSH
56345: CALL_OW 380
// un := CreateHuman ;
56349: LD_ADDR_VAR 0 1
56353: PUSH
56354: CALL_OW 44
56358: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56359: LD_VAR 0 1
56363: PPUSH
56364: LD_INT 1
56366: PPUSH
56367: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56371: LD_INT 35
56373: PPUSH
56374: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56378: LD_VAR 0 1
56382: PPUSH
56383: LD_INT 22
56385: PUSH
56386: LD_OWVAR 2
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PPUSH
56395: CALL_OW 69
56399: PPUSH
56400: LD_VAR 0 1
56404: PPUSH
56405: CALL_OW 74
56409: PPUSH
56410: CALL_OW 115
// until IsDead ( un ) ;
56414: LD_VAR 0 1
56418: PPUSH
56419: CALL_OW 301
56423: IFFALSE 56371
// end ;
56425: PPOPN 1
56427: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
56428: LD_EXP 53
56432: PUSH
56433: LD_EXP 93
56437: AND
56438: IFFALSE 56450
56440: GO 56442
56442: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
56443: LD_STRING earthquake(getX(game), 0, 32)
56445: PPUSH
56446: CALL_OW 559
56450: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
56451: LD_EXP 53
56455: PUSH
56456: LD_EXP 94
56460: AND
56461: IFFALSE 56552
56463: GO 56465
56465: DISABLE
56466: LD_INT 0
56468: PPUSH
// begin enable ;
56469: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
56470: LD_ADDR_VAR 0 1
56474: PUSH
56475: LD_INT 22
56477: PUSH
56478: LD_OWVAR 2
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 21
56489: PUSH
56490: LD_INT 2
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 33
56499: PUSH
56500: LD_INT 3
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: LIST
56511: PPUSH
56512: CALL_OW 69
56516: ST_TO_ADDR
// if not tmp then
56517: LD_VAR 0 1
56521: NOT
56522: IFFALSE 56526
// exit ;
56524: GO 56552
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56526: LD_VAR 0 1
56530: PUSH
56531: LD_INT 1
56533: PPUSH
56534: LD_VAR 0 1
56538: PPUSH
56539: CALL_OW 12
56543: ARRAY
56544: PPUSH
56545: LD_INT 1
56547: PPUSH
56548: CALL_OW 234
// end ;
56552: PPOPN 1
56554: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
56555: LD_EXP 53
56559: PUSH
56560: LD_EXP 95
56564: AND
56565: IFFALSE 56706
56567: GO 56569
56569: DISABLE
56570: LD_INT 0
56572: PPUSH
56573: PPUSH
56574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56575: LD_ADDR_VAR 0 3
56579: PUSH
56580: LD_INT 22
56582: PUSH
56583: LD_OWVAR 2
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 25
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PPUSH
56606: CALL_OW 69
56610: ST_TO_ADDR
// if not tmp then
56611: LD_VAR 0 3
56615: NOT
56616: IFFALSE 56620
// exit ;
56618: GO 56706
// un := tmp [ rand ( 1 , tmp ) ] ;
56620: LD_ADDR_VAR 0 2
56624: PUSH
56625: LD_VAR 0 3
56629: PUSH
56630: LD_INT 1
56632: PPUSH
56633: LD_VAR 0 3
56637: PPUSH
56638: CALL_OW 12
56642: ARRAY
56643: ST_TO_ADDR
// if Crawls ( un ) then
56644: LD_VAR 0 2
56648: PPUSH
56649: CALL_OW 318
56653: IFFALSE 56664
// ComWalk ( un ) ;
56655: LD_VAR 0 2
56659: PPUSH
56660: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
56664: LD_VAR 0 2
56668: PPUSH
56669: LD_INT 9
56671: PPUSH
56672: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
56676: LD_INT 28
56678: PPUSH
56679: LD_OWVAR 2
56683: PPUSH
56684: LD_INT 2
56686: PPUSH
56687: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
56691: LD_INT 29
56693: PPUSH
56694: LD_OWVAR 2
56698: PPUSH
56699: LD_INT 2
56701: PPUSH
56702: CALL_OW 322
// end ;
56706: PPOPN 3
56708: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
56709: LD_EXP 53
56713: PUSH
56714: LD_EXP 96
56718: AND
56719: IFFALSE 56830
56721: GO 56723
56723: DISABLE
56724: LD_INT 0
56726: PPUSH
56727: PPUSH
56728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56729: LD_ADDR_VAR 0 3
56733: PUSH
56734: LD_INT 22
56736: PUSH
56737: LD_OWVAR 2
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 25
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PPUSH
56760: CALL_OW 69
56764: ST_TO_ADDR
// if not tmp then
56765: LD_VAR 0 3
56769: NOT
56770: IFFALSE 56774
// exit ;
56772: GO 56830
// un := tmp [ rand ( 1 , tmp ) ] ;
56774: LD_ADDR_VAR 0 2
56778: PUSH
56779: LD_VAR 0 3
56783: PUSH
56784: LD_INT 1
56786: PPUSH
56787: LD_VAR 0 3
56791: PPUSH
56792: CALL_OW 12
56796: ARRAY
56797: ST_TO_ADDR
// if Crawls ( un ) then
56798: LD_VAR 0 2
56802: PPUSH
56803: CALL_OW 318
56807: IFFALSE 56818
// ComWalk ( un ) ;
56809: LD_VAR 0 2
56813: PPUSH
56814: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56818: LD_VAR 0 2
56822: PPUSH
56823: LD_INT 8
56825: PPUSH
56826: CALL_OW 336
// end ;
56830: PPOPN 3
56832: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
56833: LD_EXP 53
56837: PUSH
56838: LD_EXP 97
56842: AND
56843: IFFALSE 56987
56845: GO 56847
56847: DISABLE
56848: LD_INT 0
56850: PPUSH
56851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
56852: LD_ADDR_VAR 0 2
56856: PUSH
56857: LD_INT 22
56859: PUSH
56860: LD_OWVAR 2
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 21
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 2
56881: PUSH
56882: LD_INT 34
56884: PUSH
56885: LD_INT 12
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 34
56894: PUSH
56895: LD_INT 51
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 34
56904: PUSH
56905: LD_INT 32
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: LIST
56922: PPUSH
56923: CALL_OW 69
56927: ST_TO_ADDR
// if not tmp then
56928: LD_VAR 0 2
56932: NOT
56933: IFFALSE 56937
// exit ;
56935: GO 56987
// for i in tmp do
56937: LD_ADDR_VAR 0 1
56941: PUSH
56942: LD_VAR 0 2
56946: PUSH
56947: FOR_IN
56948: IFFALSE 56985
// if GetCargo ( i , mat_artifact ) = 0 then
56950: LD_VAR 0 1
56954: PPUSH
56955: LD_INT 4
56957: PPUSH
56958: CALL_OW 289
56962: PUSH
56963: LD_INT 0
56965: EQUAL
56966: IFFALSE 56983
// SetCargo ( i , mat_siberit , 100 ) ;
56968: LD_VAR 0 1
56972: PPUSH
56973: LD_INT 3
56975: PPUSH
56976: LD_INT 100
56978: PPUSH
56979: CALL_OW 290
56983: GO 56947
56985: POP
56986: POP
// end ;
56987: PPOPN 2
56989: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
56990: LD_EXP 53
56994: PUSH
56995: LD_EXP 98
56999: AND
57000: IFFALSE 57183
57002: GO 57004
57004: DISABLE
57005: LD_INT 0
57007: PPUSH
57008: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57009: LD_ADDR_VAR 0 2
57013: PUSH
57014: LD_INT 22
57016: PUSH
57017: LD_OWVAR 2
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PPUSH
57026: CALL_OW 69
57030: ST_TO_ADDR
// if not tmp then
57031: LD_VAR 0 2
57035: NOT
57036: IFFALSE 57040
// exit ;
57038: GO 57183
// for i := 1 to 2 do
57040: LD_ADDR_VAR 0 1
57044: PUSH
57045: DOUBLE
57046: LD_INT 1
57048: DEC
57049: ST_TO_ADDR
57050: LD_INT 2
57052: PUSH
57053: FOR_TO
57054: IFFALSE 57181
// begin uc_side := your_side ;
57056: LD_ADDR_OWVAR 20
57060: PUSH
57061: LD_OWVAR 2
57065: ST_TO_ADDR
// uc_nation := nation_american ;
57066: LD_ADDR_OWVAR 21
57070: PUSH
57071: LD_INT 1
57073: ST_TO_ADDR
// vc_chassis := us_morphling ;
57074: LD_ADDR_OWVAR 37
57078: PUSH
57079: LD_INT 5
57081: ST_TO_ADDR
// vc_engine := engine_siberite ;
57082: LD_ADDR_OWVAR 39
57086: PUSH
57087: LD_INT 3
57089: ST_TO_ADDR
// vc_control := control_computer ;
57090: LD_ADDR_OWVAR 38
57094: PUSH
57095: LD_INT 3
57097: ST_TO_ADDR
// vc_weapon := us_double_laser ;
57098: LD_ADDR_OWVAR 40
57102: PUSH
57103: LD_INT 10
57105: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
57106: LD_VAR 0 2
57110: PUSH
57111: LD_INT 1
57113: ARRAY
57114: PPUSH
57115: CALL_OW 310
57119: NOT
57120: IFFALSE 57167
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
57122: CALL_OW 45
57126: PPUSH
57127: LD_VAR 0 2
57131: PUSH
57132: LD_INT 1
57134: ARRAY
57135: PPUSH
57136: CALL_OW 250
57140: PPUSH
57141: LD_VAR 0 2
57145: PUSH
57146: LD_INT 1
57148: ARRAY
57149: PPUSH
57150: CALL_OW 251
57154: PPUSH
57155: LD_INT 12
57157: PPUSH
57158: LD_INT 1
57160: PPUSH
57161: CALL_OW 50
57165: GO 57179
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
57167: CALL_OW 45
57171: PPUSH
57172: LD_INT 1
57174: PPUSH
57175: CALL_OW 51
// end ;
57179: GO 57053
57181: POP
57182: POP
// end ;
57183: PPOPN 2
57185: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
57186: LD_EXP 53
57190: PUSH
57191: LD_EXP 99
57195: AND
57196: IFFALSE 57418
57198: GO 57200
57200: DISABLE
57201: LD_INT 0
57203: PPUSH
57204: PPUSH
57205: PPUSH
57206: PPUSH
57207: PPUSH
57208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57209: LD_ADDR_VAR 0 6
57213: PUSH
57214: LD_INT 22
57216: PUSH
57217: LD_OWVAR 2
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 21
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 3
57238: PUSH
57239: LD_INT 23
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: LIST
57257: PPUSH
57258: CALL_OW 69
57262: ST_TO_ADDR
// if not tmp then
57263: LD_VAR 0 6
57267: NOT
57268: IFFALSE 57272
// exit ;
57270: GO 57418
// s1 := rand ( 1 , 4 ) ;
57272: LD_ADDR_VAR 0 2
57276: PUSH
57277: LD_INT 1
57279: PPUSH
57280: LD_INT 4
57282: PPUSH
57283: CALL_OW 12
57287: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
57288: LD_ADDR_VAR 0 4
57292: PUSH
57293: LD_VAR 0 6
57297: PUSH
57298: LD_INT 1
57300: ARRAY
57301: PPUSH
57302: LD_VAR 0 2
57306: PPUSH
57307: CALL_OW 259
57311: ST_TO_ADDR
// if s1 = 1 then
57312: LD_VAR 0 2
57316: PUSH
57317: LD_INT 1
57319: EQUAL
57320: IFFALSE 57340
// s2 := rand ( 2 , 4 ) else
57322: LD_ADDR_VAR 0 3
57326: PUSH
57327: LD_INT 2
57329: PPUSH
57330: LD_INT 4
57332: PPUSH
57333: CALL_OW 12
57337: ST_TO_ADDR
57338: GO 57348
// s2 := 1 ;
57340: LD_ADDR_VAR 0 3
57344: PUSH
57345: LD_INT 1
57347: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
57348: LD_ADDR_VAR 0 5
57352: PUSH
57353: LD_VAR 0 6
57357: PUSH
57358: LD_INT 1
57360: ARRAY
57361: PPUSH
57362: LD_VAR 0 3
57366: PPUSH
57367: CALL_OW 259
57371: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
57372: LD_VAR 0 6
57376: PUSH
57377: LD_INT 1
57379: ARRAY
57380: PPUSH
57381: LD_VAR 0 2
57385: PPUSH
57386: LD_VAR 0 5
57390: PPUSH
57391: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
57395: LD_VAR 0 6
57399: PUSH
57400: LD_INT 1
57402: ARRAY
57403: PPUSH
57404: LD_VAR 0 3
57408: PPUSH
57409: LD_VAR 0 4
57413: PPUSH
57414: CALL_OW 237
// end ;
57418: PPOPN 6
57420: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
57421: LD_EXP 53
57425: PUSH
57426: LD_EXP 100
57430: AND
57431: IFFALSE 57510
57433: GO 57435
57435: DISABLE
57436: LD_INT 0
57438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
57439: LD_ADDR_VAR 0 1
57443: PUSH
57444: LD_INT 22
57446: PUSH
57447: LD_OWVAR 2
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 30
57458: PUSH
57459: LD_INT 3
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PPUSH
57470: CALL_OW 69
57474: ST_TO_ADDR
// if not tmp then
57475: LD_VAR 0 1
57479: NOT
57480: IFFALSE 57484
// exit ;
57482: GO 57510
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57484: LD_VAR 0 1
57488: PUSH
57489: LD_INT 1
57491: PPUSH
57492: LD_VAR 0 1
57496: PPUSH
57497: CALL_OW 12
57501: ARRAY
57502: PPUSH
57503: LD_INT 1
57505: PPUSH
57506: CALL_OW 234
// end ;
57510: PPOPN 1
57512: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
57513: LD_EXP 53
57517: PUSH
57518: LD_EXP 101
57522: AND
57523: IFFALSE 57635
57525: GO 57527
57527: DISABLE
57528: LD_INT 0
57530: PPUSH
57531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
57532: LD_ADDR_VAR 0 2
57536: PUSH
57537: LD_INT 22
57539: PUSH
57540: LD_OWVAR 2
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: LD_INT 30
57554: PUSH
57555: LD_INT 27
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 30
57564: PUSH
57565: LD_INT 26
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 30
57574: PUSH
57575: LD_INT 28
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PPUSH
57592: CALL_OW 69
57596: ST_TO_ADDR
// if not tmp then
57597: LD_VAR 0 2
57601: NOT
57602: IFFALSE 57606
// exit ;
57604: GO 57635
// for i in tmp do
57606: LD_ADDR_VAR 0 1
57610: PUSH
57611: LD_VAR 0 2
57615: PUSH
57616: FOR_IN
57617: IFFALSE 57633
// SetLives ( i , 1 ) ;
57619: LD_VAR 0 1
57623: PPUSH
57624: LD_INT 1
57626: PPUSH
57627: CALL_OW 234
57631: GO 57616
57633: POP
57634: POP
// end ;
57635: PPOPN 2
57637: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
57638: LD_EXP 53
57642: PUSH
57643: LD_EXP 102
57647: AND
57648: IFFALSE 57935
57650: GO 57652
57652: DISABLE
57653: LD_INT 0
57655: PPUSH
57656: PPUSH
57657: PPUSH
// begin i := rand ( 1 , 7 ) ;
57658: LD_ADDR_VAR 0 1
57662: PUSH
57663: LD_INT 1
57665: PPUSH
57666: LD_INT 7
57668: PPUSH
57669: CALL_OW 12
57673: ST_TO_ADDR
// case i of 1 :
57674: LD_VAR 0 1
57678: PUSH
57679: LD_INT 1
57681: DOUBLE
57682: EQUAL
57683: IFTRUE 57687
57685: GO 57697
57687: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
57688: LD_STRING earthquake(getX(game), 0, 32)
57690: PPUSH
57691: CALL_OW 559
57695: GO 57935
57697: LD_INT 2
57699: DOUBLE
57700: EQUAL
57701: IFTRUE 57705
57703: GO 57719
57705: POP
// begin ToLua ( displayStucuk(); ) ;
57706: LD_STRING displayStucuk();
57708: PPUSH
57709: CALL_OW 559
// ResetFog ;
57713: CALL_OW 335
// end ; 3 :
57717: GO 57935
57719: LD_INT 3
57721: DOUBLE
57722: EQUAL
57723: IFTRUE 57727
57725: GO 57831
57727: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57728: LD_ADDR_VAR 0 2
57732: PUSH
57733: LD_INT 22
57735: PUSH
57736: LD_OWVAR 2
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 25
57747: PUSH
57748: LD_INT 1
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PPUSH
57759: CALL_OW 69
57763: ST_TO_ADDR
// if not tmp then
57764: LD_VAR 0 2
57768: NOT
57769: IFFALSE 57773
// exit ;
57771: GO 57935
// un := tmp [ rand ( 1 , tmp ) ] ;
57773: LD_ADDR_VAR 0 3
57777: PUSH
57778: LD_VAR 0 2
57782: PUSH
57783: LD_INT 1
57785: PPUSH
57786: LD_VAR 0 2
57790: PPUSH
57791: CALL_OW 12
57795: ARRAY
57796: ST_TO_ADDR
// if Crawls ( un ) then
57797: LD_VAR 0 3
57801: PPUSH
57802: CALL_OW 318
57806: IFFALSE 57817
// ComWalk ( un ) ;
57808: LD_VAR 0 3
57812: PPUSH
57813: CALL_OW 138
// SetClass ( un , class_mortar ) ;
57817: LD_VAR 0 3
57821: PPUSH
57822: LD_INT 8
57824: PPUSH
57825: CALL_OW 336
// end ; 4 :
57829: GO 57935
57831: LD_INT 4
57833: DOUBLE
57834: EQUAL
57835: IFTRUE 57839
57837: GO 57913
57839: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57840: LD_ADDR_VAR 0 2
57844: PUSH
57845: LD_INT 22
57847: PUSH
57848: LD_OWVAR 2
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 30
57859: PUSH
57860: LD_INT 29
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PPUSH
57871: CALL_OW 69
57875: ST_TO_ADDR
// if not tmp then
57876: LD_VAR 0 2
57880: NOT
57881: IFFALSE 57885
// exit ;
57883: GO 57935
// CenterNowOnUnits ( tmp [ 1 ] ) ;
57885: LD_VAR 0 2
57889: PUSH
57890: LD_INT 1
57892: ARRAY
57893: PPUSH
57894: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
57898: LD_VAR 0 2
57902: PUSH
57903: LD_INT 1
57905: ARRAY
57906: PPUSH
57907: CALL_OW 65
// end ; 5 .. 7 :
57911: GO 57935
57913: LD_INT 5
57915: DOUBLE
57916: GREATEREQUAL
57917: IFFALSE 57925
57919: LD_INT 7
57921: DOUBLE
57922: LESSEQUAL
57923: IFTRUE 57927
57925: GO 57934
57927: POP
// StreamSibBomb ; end ;
57928: CALL 54172 0 0
57932: GO 57935
57934: POP
// end ;
57935: PPOPN 3
57937: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
57938: LD_EXP 53
57942: PUSH
57943: LD_EXP 103
57947: AND
57948: IFFALSE 58104
57950: GO 57952
57952: DISABLE
57953: LD_INT 0
57955: PPUSH
57956: PPUSH
57957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
57958: LD_ADDR_VAR 0 2
57962: PUSH
57963: LD_INT 81
57965: PUSH
57966: LD_OWVAR 2
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 2
57977: PUSH
57978: LD_INT 21
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 21
57990: PUSH
57991: LD_INT 2
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: LIST
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PPUSH
58007: CALL_OW 69
58011: ST_TO_ADDR
// if not tmp then
58012: LD_VAR 0 2
58016: NOT
58017: IFFALSE 58021
// exit ;
58019: GO 58104
// p := 0 ;
58021: LD_ADDR_VAR 0 3
58025: PUSH
58026: LD_INT 0
58028: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
58029: LD_INT 35
58031: PPUSH
58032: CALL_OW 67
// p := p + 1 ;
58036: LD_ADDR_VAR 0 3
58040: PUSH
58041: LD_VAR 0 3
58045: PUSH
58046: LD_INT 1
58048: PLUS
58049: ST_TO_ADDR
// for i in tmp do
58050: LD_ADDR_VAR 0 1
58054: PUSH
58055: LD_VAR 0 2
58059: PUSH
58060: FOR_IN
58061: IFFALSE 58092
// if GetLives ( i ) < 1000 then
58063: LD_VAR 0 1
58067: PPUSH
58068: CALL_OW 256
58072: PUSH
58073: LD_INT 1000
58075: LESS
58076: IFFALSE 58090
// SetLives ( i , 1000 ) ;
58078: LD_VAR 0 1
58082: PPUSH
58083: LD_INT 1000
58085: PPUSH
58086: CALL_OW 234
58090: GO 58060
58092: POP
58093: POP
// until p > 20 ;
58094: LD_VAR 0 3
58098: PUSH
58099: LD_INT 20
58101: GREATER
58102: IFFALSE 58029
// end ;
58104: PPOPN 3
58106: END
// every 0 0$1 trigger StreamModeActive and sTime do
58107: LD_EXP 53
58111: PUSH
58112: LD_EXP 104
58116: AND
58117: IFFALSE 58152
58119: GO 58121
58121: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
58122: LD_INT 28
58124: PPUSH
58125: LD_OWVAR 2
58129: PPUSH
58130: LD_INT 2
58132: PPUSH
58133: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
58137: LD_INT 30
58139: PPUSH
58140: LD_OWVAR 2
58144: PPUSH
58145: LD_INT 2
58147: PPUSH
58148: CALL_OW 322
// end ;
58152: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
58153: LD_EXP 53
58157: PUSH
58158: LD_EXP 105
58162: AND
58163: IFFALSE 58284
58165: GO 58167
58167: DISABLE
58168: LD_INT 0
58170: PPUSH
58171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58172: LD_ADDR_VAR 0 2
58176: PUSH
58177: LD_INT 22
58179: PUSH
58180: LD_OWVAR 2
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 21
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 3
58201: PUSH
58202: LD_INT 23
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: LIST
58220: PPUSH
58221: CALL_OW 69
58225: ST_TO_ADDR
// if not tmp then
58226: LD_VAR 0 2
58230: NOT
58231: IFFALSE 58235
// exit ;
58233: GO 58284
// for i in tmp do
58235: LD_ADDR_VAR 0 1
58239: PUSH
58240: LD_VAR 0 2
58244: PUSH
58245: FOR_IN
58246: IFFALSE 58282
// begin if Crawls ( i ) then
58248: LD_VAR 0 1
58252: PPUSH
58253: CALL_OW 318
58257: IFFALSE 58268
// ComWalk ( i ) ;
58259: LD_VAR 0 1
58263: PPUSH
58264: CALL_OW 138
// SetClass ( i , 2 ) ;
58268: LD_VAR 0 1
58272: PPUSH
58273: LD_INT 2
58275: PPUSH
58276: CALL_OW 336
// end ;
58280: GO 58245
58282: POP
58283: POP
// end ;
58284: PPOPN 2
58286: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
58287: LD_EXP 53
58291: PUSH
58292: LD_EXP 106
58296: AND
58297: IFFALSE 58585
58299: GO 58301
58301: DISABLE
58302: LD_INT 0
58304: PPUSH
58305: PPUSH
58306: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
58307: LD_OWVAR 2
58311: PPUSH
58312: LD_INT 9
58314: PPUSH
58315: LD_INT 1
58317: PPUSH
58318: LD_INT 1
58320: PPUSH
58321: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
58325: LD_INT 9
58327: PPUSH
58328: LD_OWVAR 2
58332: PPUSH
58333: CALL_OW 343
// uc_side := 9 ;
58337: LD_ADDR_OWVAR 20
58341: PUSH
58342: LD_INT 9
58344: ST_TO_ADDR
// uc_nation := 2 ;
58345: LD_ADDR_OWVAR 21
58349: PUSH
58350: LD_INT 2
58352: ST_TO_ADDR
// hc_name := Dark Warrior ;
58353: LD_ADDR_OWVAR 26
58357: PUSH
58358: LD_STRING Dark Warrior
58360: ST_TO_ADDR
// hc_gallery :=  ;
58361: LD_ADDR_OWVAR 33
58365: PUSH
58366: LD_STRING 
58368: ST_TO_ADDR
// hc_noskilllimit := true ;
58369: LD_ADDR_OWVAR 76
58373: PUSH
58374: LD_INT 1
58376: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
58377: LD_ADDR_OWVAR 31
58381: PUSH
58382: LD_INT 30
58384: PUSH
58385: LD_INT 30
58387: PUSH
58388: LD_INT 30
58390: PUSH
58391: LD_INT 30
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: ST_TO_ADDR
// un := CreateHuman ;
58400: LD_ADDR_VAR 0 3
58404: PUSH
58405: CALL_OW 44
58409: ST_TO_ADDR
// hc_noskilllimit := false ;
58410: LD_ADDR_OWVAR 76
58414: PUSH
58415: LD_INT 0
58417: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58418: LD_VAR 0 3
58422: PPUSH
58423: LD_INT 1
58425: PPUSH
58426: CALL_OW 51
// ToLua ( playRanger() ) ;
58430: LD_STRING playRanger()
58432: PPUSH
58433: CALL_OW 559
// p := 0 ;
58437: LD_ADDR_VAR 0 2
58441: PUSH
58442: LD_INT 0
58444: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
58445: LD_INT 35
58447: PPUSH
58448: CALL_OW 67
// p := p + 1 ;
58452: LD_ADDR_VAR 0 2
58456: PUSH
58457: LD_VAR 0 2
58461: PUSH
58462: LD_INT 1
58464: PLUS
58465: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
58466: LD_VAR 0 3
58470: PPUSH
58471: CALL_OW 256
58475: PUSH
58476: LD_INT 1000
58478: LESS
58479: IFFALSE 58493
// SetLives ( un , 1000 ) ;
58481: LD_VAR 0 3
58485: PPUSH
58486: LD_INT 1000
58488: PPUSH
58489: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
58493: LD_VAR 0 3
58497: PPUSH
58498: LD_INT 81
58500: PUSH
58501: LD_OWVAR 2
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 91
58512: PUSH
58513: LD_VAR 0 3
58517: PUSH
58518: LD_INT 30
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: LIST
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PPUSH
58530: CALL_OW 69
58534: PPUSH
58535: LD_VAR 0 3
58539: PPUSH
58540: CALL_OW 74
58544: PPUSH
58545: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
58549: LD_VAR 0 2
58553: PUSH
58554: LD_INT 80
58556: GREATER
58557: PUSH
58558: LD_VAR 0 3
58562: PPUSH
58563: CALL_OW 301
58567: OR
58568: IFFALSE 58445
// if un then
58570: LD_VAR 0 3
58574: IFFALSE 58585
// RemoveUnit ( un ) ;
58576: LD_VAR 0 3
58580: PPUSH
58581: CALL_OW 64
// end ;
58585: PPOPN 3
58587: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
58588: LD_EXP 107
58592: IFFALSE 58708
58594: GO 58596
58596: DISABLE
58597: LD_INT 0
58599: PPUSH
58600: PPUSH
58601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58602: LD_ADDR_VAR 0 2
58606: PUSH
58607: LD_INT 81
58609: PUSH
58610: LD_OWVAR 2
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 21
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PPUSH
58633: CALL_OW 69
58637: ST_TO_ADDR
// ToLua ( playComputer() ) ;
58638: LD_STRING playComputer()
58640: PPUSH
58641: CALL_OW 559
// if not tmp then
58645: LD_VAR 0 2
58649: NOT
58650: IFFALSE 58654
// exit ;
58652: GO 58708
// for i in tmp do
58654: LD_ADDR_VAR 0 1
58658: PUSH
58659: LD_VAR 0 2
58663: PUSH
58664: FOR_IN
58665: IFFALSE 58706
// for j := 1 to 4 do
58667: LD_ADDR_VAR 0 3
58671: PUSH
58672: DOUBLE
58673: LD_INT 1
58675: DEC
58676: ST_TO_ADDR
58677: LD_INT 4
58679: PUSH
58680: FOR_TO
58681: IFFALSE 58702
// SetSkill ( i , j , 10 ) ;
58683: LD_VAR 0 1
58687: PPUSH
58688: LD_VAR 0 3
58692: PPUSH
58693: LD_INT 10
58695: PPUSH
58696: CALL_OW 237
58700: GO 58680
58702: POP
58703: POP
58704: GO 58664
58706: POP
58707: POP
// end ;
58708: PPOPN 3
58710: END
// every 0 0$1 trigger s30 do var i , tmp ;
58711: LD_EXP 108
58715: IFFALSE 58784
58717: GO 58719
58719: DISABLE
58720: LD_INT 0
58722: PPUSH
58723: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58724: LD_ADDR_VAR 0 2
58728: PUSH
58729: LD_INT 22
58731: PUSH
58732: LD_OWVAR 2
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PPUSH
58741: CALL_OW 69
58745: ST_TO_ADDR
// if not tmp then
58746: LD_VAR 0 2
58750: NOT
58751: IFFALSE 58755
// exit ;
58753: GO 58784
// for i in tmp do
58755: LD_ADDR_VAR 0 1
58759: PUSH
58760: LD_VAR 0 2
58764: PUSH
58765: FOR_IN
58766: IFFALSE 58782
// SetLives ( i , 300 ) ;
58768: LD_VAR 0 1
58772: PPUSH
58773: LD_INT 300
58775: PPUSH
58776: CALL_OW 234
58780: GO 58765
58782: POP
58783: POP
// end ;
58784: PPOPN 2
58786: END
// every 0 0$1 trigger s60 do var i , tmp ;
58787: LD_EXP 109
58791: IFFALSE 58860
58793: GO 58795
58795: DISABLE
58796: LD_INT 0
58798: PPUSH
58799: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58800: LD_ADDR_VAR 0 2
58804: PUSH
58805: LD_INT 22
58807: PUSH
58808: LD_OWVAR 2
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PPUSH
58817: CALL_OW 69
58821: ST_TO_ADDR
// if not tmp then
58822: LD_VAR 0 2
58826: NOT
58827: IFFALSE 58831
// exit ;
58829: GO 58860
// for i in tmp do
58831: LD_ADDR_VAR 0 1
58835: PUSH
58836: LD_VAR 0 2
58840: PUSH
58841: FOR_IN
58842: IFFALSE 58858
// SetLives ( i , 600 ) ;
58844: LD_VAR 0 1
58848: PPUSH
58849: LD_INT 600
58851: PPUSH
58852: CALL_OW 234
58856: GO 58841
58858: POP
58859: POP
// end ;
58860: PPOPN 2
58862: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58863: LD_INT 0
58865: PPUSH
// case cmd of 301 :
58866: LD_VAR 0 1
58870: PUSH
58871: LD_INT 301
58873: DOUBLE
58874: EQUAL
58875: IFTRUE 58879
58877: GO 58911
58879: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
58880: LD_VAR 0 6
58884: PPUSH
58885: LD_VAR 0 7
58889: PPUSH
58890: LD_VAR 0 8
58894: PPUSH
58895: LD_VAR 0 4
58899: PPUSH
58900: LD_VAR 0 5
58904: PPUSH
58905: CALL 60112 0 5
58909: GO 59032
58911: LD_INT 302
58913: DOUBLE
58914: EQUAL
58915: IFTRUE 58919
58917: GO 58956
58919: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
58920: LD_VAR 0 6
58924: PPUSH
58925: LD_VAR 0 7
58929: PPUSH
58930: LD_VAR 0 8
58934: PPUSH
58935: LD_VAR 0 9
58939: PPUSH
58940: LD_VAR 0 4
58944: PPUSH
58945: LD_VAR 0 5
58949: PPUSH
58950: CALL 60203 0 6
58954: GO 59032
58956: LD_INT 303
58958: DOUBLE
58959: EQUAL
58960: IFTRUE 58964
58962: GO 59001
58964: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
58965: LD_VAR 0 6
58969: PPUSH
58970: LD_VAR 0 7
58974: PPUSH
58975: LD_VAR 0 8
58979: PPUSH
58980: LD_VAR 0 9
58984: PPUSH
58985: LD_VAR 0 4
58989: PPUSH
58990: LD_VAR 0 5
58994: PPUSH
58995: CALL 59037 0 6
58999: GO 59032
59001: LD_INT 304
59003: DOUBLE
59004: EQUAL
59005: IFTRUE 59009
59007: GO 59031
59009: POP
// hHackTeleport ( unit , x , y ) ; end ;
59010: LD_VAR 0 2
59014: PPUSH
59015: LD_VAR 0 4
59019: PPUSH
59020: LD_VAR 0 5
59024: PPUSH
59025: CALL 60796 0 3
59029: GO 59032
59031: POP
// end ;
59032: LD_VAR 0 12
59036: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
59037: LD_INT 0
59039: PPUSH
59040: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
59041: LD_VAR 0 1
59045: PUSH
59046: LD_INT 1
59048: LESS
59049: PUSH
59050: LD_VAR 0 1
59054: PUSH
59055: LD_INT 3
59057: GREATER
59058: OR
59059: PUSH
59060: LD_VAR 0 5
59064: PPUSH
59065: LD_VAR 0 6
59069: PPUSH
59070: CALL_OW 428
59074: OR
59075: IFFALSE 59079
// exit ;
59077: GO 59799
// uc_side := your_side ;
59079: LD_ADDR_OWVAR 20
59083: PUSH
59084: LD_OWVAR 2
59088: ST_TO_ADDR
// uc_nation := nation ;
59089: LD_ADDR_OWVAR 21
59093: PUSH
59094: LD_VAR 0 1
59098: ST_TO_ADDR
// bc_level = 1 ;
59099: LD_ADDR_OWVAR 43
59103: PUSH
59104: LD_INT 1
59106: ST_TO_ADDR
// case btype of 1 :
59107: LD_VAR 0 2
59111: PUSH
59112: LD_INT 1
59114: DOUBLE
59115: EQUAL
59116: IFTRUE 59120
59118: GO 59131
59120: POP
// bc_type := b_depot ; 2 :
59121: LD_ADDR_OWVAR 42
59125: PUSH
59126: LD_INT 0
59128: ST_TO_ADDR
59129: GO 59743
59131: LD_INT 2
59133: DOUBLE
59134: EQUAL
59135: IFTRUE 59139
59137: GO 59150
59139: POP
// bc_type := b_warehouse ; 3 :
59140: LD_ADDR_OWVAR 42
59144: PUSH
59145: LD_INT 1
59147: ST_TO_ADDR
59148: GO 59743
59150: LD_INT 3
59152: DOUBLE
59153: EQUAL
59154: IFTRUE 59158
59156: GO 59169
59158: POP
// bc_type := b_lab ; 4 .. 9 :
59159: LD_ADDR_OWVAR 42
59163: PUSH
59164: LD_INT 6
59166: ST_TO_ADDR
59167: GO 59743
59169: LD_INT 4
59171: DOUBLE
59172: GREATEREQUAL
59173: IFFALSE 59181
59175: LD_INT 9
59177: DOUBLE
59178: LESSEQUAL
59179: IFTRUE 59183
59181: GO 59235
59183: POP
// begin bc_type := b_lab_half ;
59184: LD_ADDR_OWVAR 42
59188: PUSH
59189: LD_INT 7
59191: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
59192: LD_ADDR_OWVAR 44
59196: PUSH
59197: LD_INT 10
59199: PUSH
59200: LD_INT 11
59202: PUSH
59203: LD_INT 12
59205: PUSH
59206: LD_INT 15
59208: PUSH
59209: LD_INT 14
59211: PUSH
59212: LD_INT 13
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: PUSH
59223: LD_VAR 0 2
59227: PUSH
59228: LD_INT 3
59230: MINUS
59231: ARRAY
59232: ST_TO_ADDR
// end ; 10 .. 13 :
59233: GO 59743
59235: LD_INT 10
59237: DOUBLE
59238: GREATEREQUAL
59239: IFFALSE 59247
59241: LD_INT 13
59243: DOUBLE
59244: LESSEQUAL
59245: IFTRUE 59249
59247: GO 59326
59249: POP
// begin bc_type := b_lab_full ;
59250: LD_ADDR_OWVAR 42
59254: PUSH
59255: LD_INT 8
59257: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
59258: LD_ADDR_OWVAR 44
59262: PUSH
59263: LD_INT 10
59265: PUSH
59266: LD_INT 12
59268: PUSH
59269: LD_INT 14
59271: PUSH
59272: LD_INT 13
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: PUSH
59281: LD_VAR 0 2
59285: PUSH
59286: LD_INT 9
59288: MINUS
59289: ARRAY
59290: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
59291: LD_ADDR_OWVAR 45
59295: PUSH
59296: LD_INT 11
59298: PUSH
59299: LD_INT 15
59301: PUSH
59302: LD_INT 12
59304: PUSH
59305: LD_INT 15
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: PUSH
59314: LD_VAR 0 2
59318: PUSH
59319: LD_INT 9
59321: MINUS
59322: ARRAY
59323: ST_TO_ADDR
// end ; 14 :
59324: GO 59743
59326: LD_INT 14
59328: DOUBLE
59329: EQUAL
59330: IFTRUE 59334
59332: GO 59345
59334: POP
// bc_type := b_workshop ; 15 :
59335: LD_ADDR_OWVAR 42
59339: PUSH
59340: LD_INT 2
59342: ST_TO_ADDR
59343: GO 59743
59345: LD_INT 15
59347: DOUBLE
59348: EQUAL
59349: IFTRUE 59353
59351: GO 59364
59353: POP
// bc_type := b_factory ; 16 :
59354: LD_ADDR_OWVAR 42
59358: PUSH
59359: LD_INT 3
59361: ST_TO_ADDR
59362: GO 59743
59364: LD_INT 16
59366: DOUBLE
59367: EQUAL
59368: IFTRUE 59372
59370: GO 59383
59372: POP
// bc_type := b_ext_gun ; 17 :
59373: LD_ADDR_OWVAR 42
59377: PUSH
59378: LD_INT 17
59380: ST_TO_ADDR
59381: GO 59743
59383: LD_INT 17
59385: DOUBLE
59386: EQUAL
59387: IFTRUE 59391
59389: GO 59419
59391: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
59392: LD_ADDR_OWVAR 42
59396: PUSH
59397: LD_INT 19
59399: PUSH
59400: LD_INT 23
59402: PUSH
59403: LD_INT 19
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: LIST
59410: PUSH
59411: LD_VAR 0 1
59415: ARRAY
59416: ST_TO_ADDR
59417: GO 59743
59419: LD_INT 18
59421: DOUBLE
59422: EQUAL
59423: IFTRUE 59427
59425: GO 59438
59427: POP
// bc_type := b_ext_radar ; 19 :
59428: LD_ADDR_OWVAR 42
59432: PUSH
59433: LD_INT 20
59435: ST_TO_ADDR
59436: GO 59743
59438: LD_INT 19
59440: DOUBLE
59441: EQUAL
59442: IFTRUE 59446
59444: GO 59457
59446: POP
// bc_type := b_ext_radio ; 20 :
59447: LD_ADDR_OWVAR 42
59451: PUSH
59452: LD_INT 22
59454: ST_TO_ADDR
59455: GO 59743
59457: LD_INT 20
59459: DOUBLE
59460: EQUAL
59461: IFTRUE 59465
59463: GO 59476
59465: POP
// bc_type := b_ext_siberium ; 21 :
59466: LD_ADDR_OWVAR 42
59470: PUSH
59471: LD_INT 21
59473: ST_TO_ADDR
59474: GO 59743
59476: LD_INT 21
59478: DOUBLE
59479: EQUAL
59480: IFTRUE 59484
59482: GO 59495
59484: POP
// bc_type := b_ext_computer ; 22 :
59485: LD_ADDR_OWVAR 42
59489: PUSH
59490: LD_INT 24
59492: ST_TO_ADDR
59493: GO 59743
59495: LD_INT 22
59497: DOUBLE
59498: EQUAL
59499: IFTRUE 59503
59501: GO 59514
59503: POP
// bc_type := b_ext_track ; 23 :
59504: LD_ADDR_OWVAR 42
59508: PUSH
59509: LD_INT 16
59511: ST_TO_ADDR
59512: GO 59743
59514: LD_INT 23
59516: DOUBLE
59517: EQUAL
59518: IFTRUE 59522
59520: GO 59533
59522: POP
// bc_type := b_ext_laser ; 24 :
59523: LD_ADDR_OWVAR 42
59527: PUSH
59528: LD_INT 25
59530: ST_TO_ADDR
59531: GO 59743
59533: LD_INT 24
59535: DOUBLE
59536: EQUAL
59537: IFTRUE 59541
59539: GO 59552
59541: POP
// bc_type := b_control_tower ; 25 :
59542: LD_ADDR_OWVAR 42
59546: PUSH
59547: LD_INT 36
59549: ST_TO_ADDR
59550: GO 59743
59552: LD_INT 25
59554: DOUBLE
59555: EQUAL
59556: IFTRUE 59560
59558: GO 59571
59560: POP
// bc_type := b_breastwork ; 26 :
59561: LD_ADDR_OWVAR 42
59565: PUSH
59566: LD_INT 31
59568: ST_TO_ADDR
59569: GO 59743
59571: LD_INT 26
59573: DOUBLE
59574: EQUAL
59575: IFTRUE 59579
59577: GO 59590
59579: POP
// bc_type := b_bunker ; 27 :
59580: LD_ADDR_OWVAR 42
59584: PUSH
59585: LD_INT 32
59587: ST_TO_ADDR
59588: GO 59743
59590: LD_INT 27
59592: DOUBLE
59593: EQUAL
59594: IFTRUE 59598
59596: GO 59609
59598: POP
// bc_type := b_turret ; 28 :
59599: LD_ADDR_OWVAR 42
59603: PUSH
59604: LD_INT 33
59606: ST_TO_ADDR
59607: GO 59743
59609: LD_INT 28
59611: DOUBLE
59612: EQUAL
59613: IFTRUE 59617
59615: GO 59628
59617: POP
// bc_type := b_armoury ; 29 :
59618: LD_ADDR_OWVAR 42
59622: PUSH
59623: LD_INT 4
59625: ST_TO_ADDR
59626: GO 59743
59628: LD_INT 29
59630: DOUBLE
59631: EQUAL
59632: IFTRUE 59636
59634: GO 59647
59636: POP
// bc_type := b_barracks ; 30 :
59637: LD_ADDR_OWVAR 42
59641: PUSH
59642: LD_INT 5
59644: ST_TO_ADDR
59645: GO 59743
59647: LD_INT 30
59649: DOUBLE
59650: EQUAL
59651: IFTRUE 59655
59653: GO 59666
59655: POP
// bc_type := b_solar_power ; 31 :
59656: LD_ADDR_OWVAR 42
59660: PUSH
59661: LD_INT 27
59663: ST_TO_ADDR
59664: GO 59743
59666: LD_INT 31
59668: DOUBLE
59669: EQUAL
59670: IFTRUE 59674
59672: GO 59685
59674: POP
// bc_type := b_oil_power ; 32 :
59675: LD_ADDR_OWVAR 42
59679: PUSH
59680: LD_INT 26
59682: ST_TO_ADDR
59683: GO 59743
59685: LD_INT 32
59687: DOUBLE
59688: EQUAL
59689: IFTRUE 59693
59691: GO 59704
59693: POP
// bc_type := b_siberite_power ; 33 :
59694: LD_ADDR_OWVAR 42
59698: PUSH
59699: LD_INT 28
59701: ST_TO_ADDR
59702: GO 59743
59704: LD_INT 33
59706: DOUBLE
59707: EQUAL
59708: IFTRUE 59712
59710: GO 59723
59712: POP
// bc_type := b_oil_mine ; 34 :
59713: LD_ADDR_OWVAR 42
59717: PUSH
59718: LD_INT 29
59720: ST_TO_ADDR
59721: GO 59743
59723: LD_INT 34
59725: DOUBLE
59726: EQUAL
59727: IFTRUE 59731
59729: GO 59742
59731: POP
// bc_type := b_siberite_mine ; end ;
59732: LD_ADDR_OWVAR 42
59736: PUSH
59737: LD_INT 30
59739: ST_TO_ADDR
59740: GO 59743
59742: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
59743: LD_ADDR_VAR 0 8
59747: PUSH
59748: LD_VAR 0 5
59752: PPUSH
59753: LD_VAR 0 6
59757: PPUSH
59758: LD_VAR 0 3
59762: PPUSH
59763: CALL_OW 47
59767: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
59768: LD_OWVAR 42
59772: PUSH
59773: LD_INT 32
59775: PUSH
59776: LD_INT 33
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: IN
59783: IFFALSE 59799
// PlaceWeaponTurret ( b , weapon ) ;
59785: LD_VAR 0 8
59789: PPUSH
59790: LD_VAR 0 4
59794: PPUSH
59795: CALL_OW 431
// end ;
59799: LD_VAR 0 7
59803: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
59804: LD_INT 0
59806: PPUSH
59807: PPUSH
59808: PPUSH
59809: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59810: LD_ADDR_VAR 0 4
59814: PUSH
59815: LD_INT 22
59817: PUSH
59818: LD_OWVAR 2
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 2
59829: PUSH
59830: LD_INT 30
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 30
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: LIST
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PPUSH
59859: CALL_OW 69
59863: ST_TO_ADDR
// if not tmp then
59864: LD_VAR 0 4
59868: NOT
59869: IFFALSE 59873
// exit ;
59871: GO 59932
// for i in tmp do
59873: LD_ADDR_VAR 0 2
59877: PUSH
59878: LD_VAR 0 4
59882: PUSH
59883: FOR_IN
59884: IFFALSE 59930
// for j = 1 to 3 do
59886: LD_ADDR_VAR 0 3
59890: PUSH
59891: DOUBLE
59892: LD_INT 1
59894: DEC
59895: ST_TO_ADDR
59896: LD_INT 3
59898: PUSH
59899: FOR_TO
59900: IFFALSE 59926
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
59902: LD_VAR 0 2
59906: PPUSH
59907: CALL_OW 274
59911: PPUSH
59912: LD_VAR 0 3
59916: PPUSH
59917: LD_INT 99999
59919: PPUSH
59920: CALL_OW 277
59924: GO 59899
59926: POP
59927: POP
59928: GO 59883
59930: POP
59931: POP
// end ;
59932: LD_VAR 0 1
59936: RET
// export function hHackSetLevel10 ; var i , j ; begin
59937: LD_INT 0
59939: PPUSH
59940: PPUSH
59941: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59942: LD_ADDR_VAR 0 2
59946: PUSH
59947: LD_INT 21
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PPUSH
59957: CALL_OW 69
59961: PUSH
59962: FOR_IN
59963: IFFALSE 60015
// if IsSelected ( i ) then
59965: LD_VAR 0 2
59969: PPUSH
59970: CALL_OW 306
59974: IFFALSE 60013
// begin for j := 1 to 4 do
59976: LD_ADDR_VAR 0 3
59980: PUSH
59981: DOUBLE
59982: LD_INT 1
59984: DEC
59985: ST_TO_ADDR
59986: LD_INT 4
59988: PUSH
59989: FOR_TO
59990: IFFALSE 60011
// SetSkill ( i , j , 10 ) ;
59992: LD_VAR 0 2
59996: PPUSH
59997: LD_VAR 0 3
60001: PPUSH
60002: LD_INT 10
60004: PPUSH
60005: CALL_OW 237
60009: GO 59989
60011: POP
60012: POP
// end ;
60013: GO 59962
60015: POP
60016: POP
// end ;
60017: LD_VAR 0 1
60021: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
60022: LD_INT 0
60024: PPUSH
60025: PPUSH
60026: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
60027: LD_ADDR_VAR 0 2
60031: PUSH
60032: LD_INT 22
60034: PUSH
60035: LD_OWVAR 2
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 21
60046: PUSH
60047: LD_INT 1
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PPUSH
60058: CALL_OW 69
60062: PUSH
60063: FOR_IN
60064: IFFALSE 60105
// begin for j := 1 to 4 do
60066: LD_ADDR_VAR 0 3
60070: PUSH
60071: DOUBLE
60072: LD_INT 1
60074: DEC
60075: ST_TO_ADDR
60076: LD_INT 4
60078: PUSH
60079: FOR_TO
60080: IFFALSE 60101
// SetSkill ( i , j , 10 ) ;
60082: LD_VAR 0 2
60086: PPUSH
60087: LD_VAR 0 3
60091: PPUSH
60092: LD_INT 10
60094: PPUSH
60095: CALL_OW 237
60099: GO 60079
60101: POP
60102: POP
// end ;
60103: GO 60063
60105: POP
60106: POP
// end ;
60107: LD_VAR 0 1
60111: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
60112: LD_INT 0
60114: PPUSH
// uc_side := your_side ;
60115: LD_ADDR_OWVAR 20
60119: PUSH
60120: LD_OWVAR 2
60124: ST_TO_ADDR
// uc_nation := nation ;
60125: LD_ADDR_OWVAR 21
60129: PUSH
60130: LD_VAR 0 1
60134: ST_TO_ADDR
// InitHc ;
60135: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
60139: LD_INT 0
60141: PPUSH
60142: LD_VAR 0 2
60146: PPUSH
60147: LD_VAR 0 3
60151: PPUSH
60152: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
60156: LD_VAR 0 4
60160: PPUSH
60161: LD_VAR 0 5
60165: PPUSH
60166: CALL_OW 428
60170: PUSH
60171: LD_INT 0
60173: EQUAL
60174: IFFALSE 60198
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
60176: CALL_OW 44
60180: PPUSH
60181: LD_VAR 0 4
60185: PPUSH
60186: LD_VAR 0 5
60190: PPUSH
60191: LD_INT 1
60193: PPUSH
60194: CALL_OW 48
// end ;
60198: LD_VAR 0 6
60202: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
60203: LD_INT 0
60205: PPUSH
60206: PPUSH
// uc_side := your_side ;
60207: LD_ADDR_OWVAR 20
60211: PUSH
60212: LD_OWVAR 2
60216: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
60217: LD_VAR 0 1
60221: PUSH
60222: LD_INT 1
60224: PUSH
60225: LD_INT 2
60227: PUSH
60228: LD_INT 3
60230: PUSH
60231: LD_INT 4
60233: PUSH
60234: LD_INT 5
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: IN
60244: IFFALSE 60256
// uc_nation := nation_american else
60246: LD_ADDR_OWVAR 21
60250: PUSH
60251: LD_INT 1
60253: ST_TO_ADDR
60254: GO 60299
// if chassis in [ 11 , 12 , 13 , 14 ] then
60256: LD_VAR 0 1
60260: PUSH
60261: LD_INT 11
60263: PUSH
60264: LD_INT 12
60266: PUSH
60267: LD_INT 13
60269: PUSH
60270: LD_INT 14
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: IN
60279: IFFALSE 60291
// uc_nation := nation_arabian else
60281: LD_ADDR_OWVAR 21
60285: PUSH
60286: LD_INT 2
60288: ST_TO_ADDR
60289: GO 60299
// uc_nation := nation_russian ;
60291: LD_ADDR_OWVAR 21
60295: PUSH
60296: LD_INT 3
60298: ST_TO_ADDR
// vc_chassis := chassis ;
60299: LD_ADDR_OWVAR 37
60303: PUSH
60304: LD_VAR 0 1
60308: ST_TO_ADDR
// vc_engine := engine ;
60309: LD_ADDR_OWVAR 39
60313: PUSH
60314: LD_VAR 0 2
60318: ST_TO_ADDR
// vc_control := control ;
60319: LD_ADDR_OWVAR 38
60323: PUSH
60324: LD_VAR 0 3
60328: ST_TO_ADDR
// vc_weapon := weapon ;
60329: LD_ADDR_OWVAR 40
60333: PUSH
60334: LD_VAR 0 4
60338: ST_TO_ADDR
// un := CreateVehicle ;
60339: LD_ADDR_VAR 0 8
60343: PUSH
60344: CALL_OW 45
60348: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
60349: LD_VAR 0 8
60353: PPUSH
60354: LD_INT 0
60356: PPUSH
60357: LD_INT 5
60359: PPUSH
60360: CALL_OW 12
60364: PPUSH
60365: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
60369: LD_VAR 0 8
60373: PPUSH
60374: LD_VAR 0 5
60378: PPUSH
60379: LD_VAR 0 6
60383: PPUSH
60384: LD_INT 1
60386: PPUSH
60387: CALL_OW 48
// end ;
60391: LD_VAR 0 7
60395: RET
// export hInvincible ; every 1 do
60396: GO 60398
60398: DISABLE
// hInvincible := [ ] ;
60399: LD_ADDR_EXP 110
60403: PUSH
60404: EMPTY
60405: ST_TO_ADDR
60406: END
// every 10 do var i ;
60407: GO 60409
60409: DISABLE
60410: LD_INT 0
60412: PPUSH
// begin enable ;
60413: ENABLE
// if not hInvincible then
60414: LD_EXP 110
60418: NOT
60419: IFFALSE 60423
// exit ;
60421: GO 60467
// for i in hInvincible do
60423: LD_ADDR_VAR 0 1
60427: PUSH
60428: LD_EXP 110
60432: PUSH
60433: FOR_IN
60434: IFFALSE 60465
// if GetLives ( i ) < 1000 then
60436: LD_VAR 0 1
60440: PPUSH
60441: CALL_OW 256
60445: PUSH
60446: LD_INT 1000
60448: LESS
60449: IFFALSE 60463
// SetLives ( i , 1000 ) ;
60451: LD_VAR 0 1
60455: PPUSH
60456: LD_INT 1000
60458: PPUSH
60459: CALL_OW 234
60463: GO 60433
60465: POP
60466: POP
// end ;
60467: PPOPN 1
60469: END
// export function hHackInvincible ; var i ; begin
60470: LD_INT 0
60472: PPUSH
60473: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
60474: LD_ADDR_VAR 0 2
60478: PUSH
60479: LD_INT 2
60481: PUSH
60482: LD_INT 21
60484: PUSH
60485: LD_INT 1
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 21
60494: PUSH
60495: LD_INT 2
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: LIST
60506: PPUSH
60507: CALL_OW 69
60511: PUSH
60512: FOR_IN
60513: IFFALSE 60574
// if IsSelected ( i ) then
60515: LD_VAR 0 2
60519: PPUSH
60520: CALL_OW 306
60524: IFFALSE 60572
// begin if i in hInvincible then
60526: LD_VAR 0 2
60530: PUSH
60531: LD_EXP 110
60535: IN
60536: IFFALSE 60556
// hInvincible := hInvincible diff i else
60538: LD_ADDR_EXP 110
60542: PUSH
60543: LD_EXP 110
60547: PUSH
60548: LD_VAR 0 2
60552: DIFF
60553: ST_TO_ADDR
60554: GO 60572
// hInvincible := hInvincible union i ;
60556: LD_ADDR_EXP 110
60560: PUSH
60561: LD_EXP 110
60565: PUSH
60566: LD_VAR 0 2
60570: UNION
60571: ST_TO_ADDR
// end ;
60572: GO 60512
60574: POP
60575: POP
// end ;
60576: LD_VAR 0 1
60580: RET
// export function hHackInvisible ; var i , j ; begin
60581: LD_INT 0
60583: PPUSH
60584: PPUSH
60585: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
60586: LD_ADDR_VAR 0 2
60590: PUSH
60591: LD_INT 21
60593: PUSH
60594: LD_INT 1
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PPUSH
60601: CALL_OW 69
60605: PUSH
60606: FOR_IN
60607: IFFALSE 60631
// if IsSelected ( i ) then
60609: LD_VAR 0 2
60613: PPUSH
60614: CALL_OW 306
60618: IFFALSE 60629
// ComForceInvisible ( i ) ;
60620: LD_VAR 0 2
60624: PPUSH
60625: CALL_OW 496
60629: GO 60606
60631: POP
60632: POP
// end ;
60633: LD_VAR 0 1
60637: RET
// export function hHackChangeYourSide ; begin
60638: LD_INT 0
60640: PPUSH
// if your_side = 8 then
60641: LD_OWVAR 2
60645: PUSH
60646: LD_INT 8
60648: EQUAL
60649: IFFALSE 60661
// your_side := 0 else
60651: LD_ADDR_OWVAR 2
60655: PUSH
60656: LD_INT 0
60658: ST_TO_ADDR
60659: GO 60675
// your_side := your_side + 1 ;
60661: LD_ADDR_OWVAR 2
60665: PUSH
60666: LD_OWVAR 2
60670: PUSH
60671: LD_INT 1
60673: PLUS
60674: ST_TO_ADDR
// end ;
60675: LD_VAR 0 1
60679: RET
// export function hHackChangeUnitSide ; var i , j ; begin
60680: LD_INT 0
60682: PPUSH
60683: PPUSH
60684: PPUSH
// for i in all_units do
60685: LD_ADDR_VAR 0 2
60689: PUSH
60690: LD_OWVAR 3
60694: PUSH
60695: FOR_IN
60696: IFFALSE 60774
// if IsSelected ( i ) then
60698: LD_VAR 0 2
60702: PPUSH
60703: CALL_OW 306
60707: IFFALSE 60772
// begin j := GetSide ( i ) ;
60709: LD_ADDR_VAR 0 3
60713: PUSH
60714: LD_VAR 0 2
60718: PPUSH
60719: CALL_OW 255
60723: ST_TO_ADDR
// if j = 8 then
60724: LD_VAR 0 3
60728: PUSH
60729: LD_INT 8
60731: EQUAL
60732: IFFALSE 60744
// j := 0 else
60734: LD_ADDR_VAR 0 3
60738: PUSH
60739: LD_INT 0
60741: ST_TO_ADDR
60742: GO 60758
// j := j + 1 ;
60744: LD_ADDR_VAR 0 3
60748: PUSH
60749: LD_VAR 0 3
60753: PUSH
60754: LD_INT 1
60756: PLUS
60757: ST_TO_ADDR
// SetSide ( i , j ) ;
60758: LD_VAR 0 2
60762: PPUSH
60763: LD_VAR 0 3
60767: PPUSH
60768: CALL_OW 235
// end ;
60772: GO 60695
60774: POP
60775: POP
// end ;
60776: LD_VAR 0 1
60780: RET
// export function hHackFog ; begin
60781: LD_INT 0
60783: PPUSH
// FogOff ( true ) ;
60784: LD_INT 1
60786: PPUSH
60787: CALL_OW 344
// end ;
60791: LD_VAR 0 1
60795: RET
// export function hHackTeleport ( unit , x , y ) ; begin
60796: LD_INT 0
60798: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
60799: LD_VAR 0 1
60803: PPUSH
60804: LD_VAR 0 2
60808: PPUSH
60809: LD_VAR 0 3
60813: PPUSH
60814: LD_INT 1
60816: PPUSH
60817: LD_INT 1
60819: PPUSH
60820: CALL_OW 483
// CenterOnXY ( x , y ) ;
60824: LD_VAR 0 2
60828: PPUSH
60829: LD_VAR 0 3
60833: PPUSH
60834: CALL_OW 84
// end ;
60838: LD_VAR 0 4
60842: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
60843: LD_INT 0
60845: PPUSH
60846: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
60847: LD_VAR 0 1
60851: NOT
60852: PUSH
60853: LD_VAR 0 2
60857: PPUSH
60858: LD_VAR 0 3
60862: PPUSH
60863: CALL_OW 488
60867: NOT
60868: OR
60869: PUSH
60870: LD_VAR 0 1
60874: PPUSH
60875: CALL_OW 266
60879: PUSH
60880: LD_INT 3
60882: NONEQUAL
60883: PUSH
60884: LD_VAR 0 1
60888: PPUSH
60889: CALL_OW 247
60893: PUSH
60894: LD_INT 1
60896: EQUAL
60897: NOT
60898: AND
60899: OR
60900: IFFALSE 60904
// exit ;
60902: GO 61053
// if GetType ( factory ) = unit_human then
60904: LD_VAR 0 1
60908: PPUSH
60909: CALL_OW 247
60913: PUSH
60914: LD_INT 1
60916: EQUAL
60917: IFFALSE 60934
// factory := IsInUnit ( factory ) ;
60919: LD_ADDR_VAR 0 1
60923: PUSH
60924: LD_VAR 0 1
60928: PPUSH
60929: CALL_OW 310
60933: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60934: LD_VAR 0 1
60938: PPUSH
60939: CALL_OW 266
60943: PUSH
60944: LD_INT 3
60946: NONEQUAL
60947: IFFALSE 60951
// exit ;
60949: GO 61053
// if HexInfo ( x , y ) = factory then
60951: LD_VAR 0 2
60955: PPUSH
60956: LD_VAR 0 3
60960: PPUSH
60961: CALL_OW 428
60965: PUSH
60966: LD_VAR 0 1
60970: EQUAL
60971: IFFALSE 60998
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
60973: LD_ADDR_EXP 111
60977: PUSH
60978: LD_EXP 111
60982: PPUSH
60983: LD_VAR 0 1
60987: PPUSH
60988: LD_INT 0
60990: PPUSH
60991: CALL_OW 1
60995: ST_TO_ADDR
60996: GO 61049
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
60998: LD_ADDR_EXP 111
61002: PUSH
61003: LD_EXP 111
61007: PPUSH
61008: LD_VAR 0 1
61012: PPUSH
61013: LD_VAR 0 1
61017: PPUSH
61018: CALL_OW 255
61022: PUSH
61023: LD_VAR 0 1
61027: PUSH
61028: LD_VAR 0 2
61032: PUSH
61033: LD_VAR 0 3
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: PPUSH
61044: CALL_OW 1
61048: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61049: CALL 61058 0 0
// end ;
61053: LD_VAR 0 4
61057: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61058: LD_INT 0
61060: PPUSH
61061: PPUSH
61062: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61063: LD_STRING resetFactoryWaypoint();
61065: PPUSH
61066: CALL_OW 559
// if factoryWaypoints then
61070: LD_EXP 111
61074: IFFALSE 61200
// begin list := PrepareArray ( factoryWaypoints ) ;
61076: LD_ADDR_VAR 0 3
61080: PUSH
61081: LD_EXP 111
61085: PPUSH
61086: CALL 46235 0 1
61090: ST_TO_ADDR
// for i := 1 to list do
61091: LD_ADDR_VAR 0 2
61095: PUSH
61096: DOUBLE
61097: LD_INT 1
61099: DEC
61100: ST_TO_ADDR
61101: LD_VAR 0 3
61105: PUSH
61106: FOR_TO
61107: IFFALSE 61198
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61109: LD_STRING setFactoryWaypointXY(
61111: PUSH
61112: LD_VAR 0 3
61116: PUSH
61117: LD_VAR 0 2
61121: ARRAY
61122: PUSH
61123: LD_INT 1
61125: ARRAY
61126: STR
61127: PUSH
61128: LD_STRING ,
61130: STR
61131: PUSH
61132: LD_VAR 0 3
61136: PUSH
61137: LD_VAR 0 2
61141: ARRAY
61142: PUSH
61143: LD_INT 2
61145: ARRAY
61146: STR
61147: PUSH
61148: LD_STRING ,
61150: STR
61151: PUSH
61152: LD_VAR 0 3
61156: PUSH
61157: LD_VAR 0 2
61161: ARRAY
61162: PUSH
61163: LD_INT 3
61165: ARRAY
61166: STR
61167: PUSH
61168: LD_STRING ,
61170: STR
61171: PUSH
61172: LD_VAR 0 3
61176: PUSH
61177: LD_VAR 0 2
61181: ARRAY
61182: PUSH
61183: LD_INT 4
61185: ARRAY
61186: STR
61187: PUSH
61188: LD_STRING )
61190: STR
61191: PPUSH
61192: CALL_OW 559
61196: GO 61106
61198: POP
61199: POP
// end ; end ;
61200: LD_VAR 0 1
61204: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61205: LD_INT 0
61207: PPUSH
// if HexInfo ( x , y ) = warehouse then
61208: LD_VAR 0 2
61212: PPUSH
61213: LD_VAR 0 3
61217: PPUSH
61218: CALL_OW 428
61222: PUSH
61223: LD_VAR 0 1
61227: EQUAL
61228: IFFALSE 61255
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61230: LD_ADDR_EXP 112
61234: PUSH
61235: LD_EXP 112
61239: PPUSH
61240: LD_VAR 0 1
61244: PPUSH
61245: LD_INT 0
61247: PPUSH
61248: CALL_OW 1
61252: ST_TO_ADDR
61253: GO 61306
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
61255: LD_ADDR_EXP 112
61259: PUSH
61260: LD_EXP 112
61264: PPUSH
61265: LD_VAR 0 1
61269: PPUSH
61270: LD_VAR 0 1
61274: PPUSH
61275: CALL_OW 255
61279: PUSH
61280: LD_VAR 0 1
61284: PUSH
61285: LD_VAR 0 2
61289: PUSH
61290: LD_VAR 0 3
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: PPUSH
61301: CALL_OW 1
61305: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
61306: CALL 61315 0 0
// end ;
61310: LD_VAR 0 4
61314: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
61315: LD_INT 0
61317: PPUSH
61318: PPUSH
61319: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
61320: LD_STRING resetWarehouseGatheringPoints();
61322: PPUSH
61323: CALL_OW 559
// if warehouseGatheringPoints then
61327: LD_EXP 112
61331: IFFALSE 61457
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
61333: LD_ADDR_VAR 0 3
61337: PUSH
61338: LD_EXP 112
61342: PPUSH
61343: CALL 46235 0 1
61347: ST_TO_ADDR
// for i := 1 to list do
61348: LD_ADDR_VAR 0 2
61352: PUSH
61353: DOUBLE
61354: LD_INT 1
61356: DEC
61357: ST_TO_ADDR
61358: LD_VAR 0 3
61362: PUSH
61363: FOR_TO
61364: IFFALSE 61455
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61366: LD_STRING setWarehouseGatheringPointXY(
61368: PUSH
61369: LD_VAR 0 3
61373: PUSH
61374: LD_VAR 0 2
61378: ARRAY
61379: PUSH
61380: LD_INT 1
61382: ARRAY
61383: STR
61384: PUSH
61385: LD_STRING ,
61387: STR
61388: PUSH
61389: LD_VAR 0 3
61393: PUSH
61394: LD_VAR 0 2
61398: ARRAY
61399: PUSH
61400: LD_INT 2
61402: ARRAY
61403: STR
61404: PUSH
61405: LD_STRING ,
61407: STR
61408: PUSH
61409: LD_VAR 0 3
61413: PUSH
61414: LD_VAR 0 2
61418: ARRAY
61419: PUSH
61420: LD_INT 3
61422: ARRAY
61423: STR
61424: PUSH
61425: LD_STRING ,
61427: STR
61428: PUSH
61429: LD_VAR 0 3
61433: PUSH
61434: LD_VAR 0 2
61438: ARRAY
61439: PUSH
61440: LD_INT 4
61442: ARRAY
61443: STR
61444: PUSH
61445: LD_STRING )
61447: STR
61448: PPUSH
61449: CALL_OW 559
61453: GO 61363
61455: POP
61456: POP
// end ; end ;
61457: LD_VAR 0 1
61461: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
61462: LD_EXP 112
61466: IFFALSE 62153
61468: GO 61470
61470: DISABLE
61471: LD_INT 0
61473: PPUSH
61474: PPUSH
61475: PPUSH
61476: PPUSH
61477: PPUSH
61478: PPUSH
61479: PPUSH
61480: PPUSH
61481: PPUSH
// begin enable ;
61482: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
61483: LD_ADDR_VAR 0 3
61487: PUSH
61488: LD_EXP 112
61492: PPUSH
61493: CALL 46235 0 1
61497: ST_TO_ADDR
// if not list then
61498: LD_VAR 0 3
61502: NOT
61503: IFFALSE 61507
// exit ;
61505: GO 62153
// for i := 1 to list do
61507: LD_ADDR_VAR 0 1
61511: PUSH
61512: DOUBLE
61513: LD_INT 1
61515: DEC
61516: ST_TO_ADDR
61517: LD_VAR 0 3
61521: PUSH
61522: FOR_TO
61523: IFFALSE 62151
// begin depot := list [ i ] [ 2 ] ;
61525: LD_ADDR_VAR 0 8
61529: PUSH
61530: LD_VAR 0 3
61534: PUSH
61535: LD_VAR 0 1
61539: ARRAY
61540: PUSH
61541: LD_INT 2
61543: ARRAY
61544: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
61545: LD_ADDR_VAR 0 5
61549: PUSH
61550: LD_VAR 0 3
61554: PUSH
61555: LD_VAR 0 1
61559: ARRAY
61560: PUSH
61561: LD_INT 1
61563: ARRAY
61564: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
61565: LD_VAR 0 8
61569: PPUSH
61570: CALL_OW 301
61574: PUSH
61575: LD_VAR 0 5
61579: PUSH
61580: LD_VAR 0 8
61584: PPUSH
61585: CALL_OW 255
61589: NONEQUAL
61590: OR
61591: IFFALSE 61620
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
61593: LD_ADDR_EXP 112
61597: PUSH
61598: LD_EXP 112
61602: PPUSH
61603: LD_VAR 0 8
61607: PPUSH
61608: LD_INT 0
61610: PPUSH
61611: CALL_OW 1
61615: ST_TO_ADDR
// exit ;
61616: POP
61617: POP
61618: GO 62153
// end ; x := list [ i ] [ 3 ] ;
61620: LD_ADDR_VAR 0 6
61624: PUSH
61625: LD_VAR 0 3
61629: PUSH
61630: LD_VAR 0 1
61634: ARRAY
61635: PUSH
61636: LD_INT 3
61638: ARRAY
61639: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
61640: LD_ADDR_VAR 0 7
61644: PUSH
61645: LD_VAR 0 3
61649: PUSH
61650: LD_VAR 0 1
61654: ARRAY
61655: PUSH
61656: LD_INT 4
61658: ARRAY
61659: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
61660: LD_ADDR_VAR 0 9
61664: PUSH
61665: LD_VAR 0 6
61669: PPUSH
61670: LD_VAR 0 7
61674: PPUSH
61675: LD_INT 16
61677: PPUSH
61678: CALL 44819 0 3
61682: ST_TO_ADDR
// if not cratesNearbyPoint then
61683: LD_VAR 0 9
61687: NOT
61688: IFFALSE 61694
// exit ;
61690: POP
61691: POP
61692: GO 62153
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
61694: LD_ADDR_VAR 0 4
61698: PUSH
61699: LD_INT 22
61701: PUSH
61702: LD_VAR 0 5
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 3
61713: PUSH
61714: LD_INT 60
61716: PUSH
61717: EMPTY
61718: LIST
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 91
61726: PUSH
61727: LD_VAR 0 8
61731: PUSH
61732: LD_INT 6
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 2
61742: PUSH
61743: LD_INT 25
61745: PUSH
61746: LD_INT 2
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 25
61755: PUSH
61756: LD_INT 16
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: LIST
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: PPUSH
61774: CALL_OW 69
61778: PUSH
61779: LD_VAR 0 8
61783: PPUSH
61784: CALL_OW 313
61788: PPUSH
61789: LD_INT 3
61791: PUSH
61792: LD_INT 60
61794: PUSH
61795: EMPTY
61796: LIST
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: PUSH
61805: LD_INT 25
61807: PUSH
61808: LD_INT 2
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 25
61817: PUSH
61818: LD_INT 16
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: LIST
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PPUSH
61834: CALL_OW 72
61838: UNION
61839: ST_TO_ADDR
// if tmp then
61840: LD_VAR 0 4
61844: IFFALSE 61924
// begin tmp := ShrinkArray ( tmp , 3 ) ;
61846: LD_ADDR_VAR 0 4
61850: PUSH
61851: LD_VAR 0 4
61855: PPUSH
61856: LD_INT 3
61858: PPUSH
61859: CALL 42786 0 2
61863: ST_TO_ADDR
// for j in tmp do
61864: LD_ADDR_VAR 0 2
61868: PUSH
61869: LD_VAR 0 4
61873: PUSH
61874: FOR_IN
61875: IFFALSE 61918
// begin if IsInUnit ( j ) then
61877: LD_VAR 0 2
61881: PPUSH
61882: CALL_OW 310
61886: IFFALSE 61897
// ComExit ( j ) ;
61888: LD_VAR 0 2
61892: PPUSH
61893: CALL 42869 0 1
// AddComCollect ( j , x , y ) ;
61897: LD_VAR 0 2
61901: PPUSH
61902: LD_VAR 0 6
61906: PPUSH
61907: LD_VAR 0 7
61911: PPUSH
61912: CALL_OW 177
// end ;
61916: GO 61874
61918: POP
61919: POP
// exit ;
61920: POP
61921: POP
61922: GO 62153
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
61924: LD_ADDR_VAR 0 4
61928: PUSH
61929: LD_INT 22
61931: PUSH
61932: LD_VAR 0 5
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 91
61943: PUSH
61944: LD_VAR 0 8
61948: PUSH
61949: LD_INT 8
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 2
61959: PUSH
61960: LD_INT 34
61962: PUSH
61963: LD_INT 12
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 34
61972: PUSH
61973: LD_INT 51
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 34
61982: PUSH
61983: LD_INT 32
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 34
61992: PUSH
61993: LD_EXP 36
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: LIST
62013: PPUSH
62014: CALL_OW 69
62018: ST_TO_ADDR
// if tmp then
62019: LD_VAR 0 4
62023: IFFALSE 62149
// begin for j in tmp do
62025: LD_ADDR_VAR 0 2
62029: PUSH
62030: LD_VAR 0 4
62034: PUSH
62035: FOR_IN
62036: IFFALSE 62147
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
62038: LD_VAR 0 2
62042: PPUSH
62043: CALL_OW 262
62047: PUSH
62048: LD_INT 3
62050: EQUAL
62051: PUSH
62052: LD_VAR 0 2
62056: PPUSH
62057: CALL_OW 261
62061: PUSH
62062: LD_INT 20
62064: GREATER
62065: OR
62066: PUSH
62067: LD_VAR 0 2
62071: PPUSH
62072: CALL_OW 314
62076: NOT
62077: AND
62078: PUSH
62079: LD_VAR 0 2
62083: PPUSH
62084: CALL_OW 263
62088: PUSH
62089: LD_INT 1
62091: NONEQUAL
62092: PUSH
62093: LD_VAR 0 2
62097: PPUSH
62098: CALL_OW 311
62102: OR
62103: AND
62104: IFFALSE 62145
// begin ComCollect ( j , x , y ) ;
62106: LD_VAR 0 2
62110: PPUSH
62111: LD_VAR 0 6
62115: PPUSH
62116: LD_VAR 0 7
62120: PPUSH
62121: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
62125: LD_VAR 0 2
62129: PPUSH
62130: LD_VAR 0 8
62134: PPUSH
62135: CALL_OW 172
// exit ;
62139: POP
62140: POP
62141: POP
62142: POP
62143: GO 62153
// end ;
62145: GO 62035
62147: POP
62148: POP
// end ; end ;
62149: GO 61522
62151: POP
62152: POP
// end ; end_of_file
62153: PPOPN 9
62155: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
62156: LD_VAR 0 1
62160: PUSH
62161: LD_INT 200
62163: DOUBLE
62164: GREATEREQUAL
62165: IFFALSE 62173
62167: LD_INT 299
62169: DOUBLE
62170: LESSEQUAL
62171: IFTRUE 62175
62173: GO 62207
62175: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
62176: LD_VAR 0 1
62180: PPUSH
62181: LD_VAR 0 2
62185: PPUSH
62186: LD_VAR 0 3
62190: PPUSH
62191: LD_VAR 0 4
62195: PPUSH
62196: LD_VAR 0 5
62200: PPUSH
62201: CALL 62697 0 5
62205: GO 62284
62207: LD_INT 300
62209: DOUBLE
62210: GREATEREQUAL
62211: IFFALSE 62219
62213: LD_INT 399
62215: DOUBLE
62216: LESSEQUAL
62217: IFTRUE 62221
62219: GO 62283
62221: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
62222: LD_VAR 0 1
62226: PPUSH
62227: LD_VAR 0 2
62231: PPUSH
62232: LD_VAR 0 3
62236: PPUSH
62237: LD_VAR 0 4
62241: PPUSH
62242: LD_VAR 0 5
62246: PPUSH
62247: LD_VAR 0 6
62251: PPUSH
62252: LD_VAR 0 7
62256: PPUSH
62257: LD_VAR 0 8
62261: PPUSH
62262: LD_VAR 0 9
62266: PPUSH
62267: LD_VAR 0 10
62271: PPUSH
62272: LD_VAR 0 11
62276: PPUSH
62277: CALL 58863 0 11
62281: GO 62284
62283: POP
// end ;
62284: PPOPN 11
62286: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
62287: LD_VAR 0 1
62291: PPUSH
62292: LD_VAR 0 2
62296: PPUSH
62297: LD_VAR 0 3
62301: PPUSH
62302: LD_VAR 0 4
62306: PPUSH
62307: LD_VAR 0 5
62311: PPUSH
62312: CALL 62433 0 5
// end ; end_of_file
62316: PPOPN 5
62318: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
62319: LD_INT 0
62321: PPUSH
62322: PPUSH
62323: PPUSH
62324: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
62325: LD_VAR 0 1
62329: PPUSH
62330: CALL_OW 264
62334: PUSH
62335: LD_EXP 39
62339: EQUAL
62340: IFFALSE 62412
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
62342: LD_INT 68
62344: PPUSH
62345: LD_VAR 0 1
62349: PPUSH
62350: CALL_OW 255
62354: PPUSH
62355: CALL_OW 321
62359: PUSH
62360: LD_INT 2
62362: EQUAL
62363: IFFALSE 62375
// eff := 70 else
62365: LD_ADDR_VAR 0 4
62369: PUSH
62370: LD_INT 70
62372: ST_TO_ADDR
62373: GO 62383
// eff := 30 ;
62375: LD_ADDR_VAR 0 4
62379: PUSH
62380: LD_INT 30
62382: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
62383: LD_VAR 0 1
62387: PPUSH
62388: CALL_OW 250
62392: PPUSH
62393: LD_VAR 0 1
62397: PPUSH
62398: CALL_OW 251
62402: PPUSH
62403: LD_VAR 0 4
62407: PPUSH
62408: CALL_OW 495
// end ; end ;
62412: LD_VAR 0 2
62416: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
62417: LD_INT 0
62419: PPUSH
// end ;
62420: LD_VAR 0 4
62424: RET
// export function SOS_Command ( cmd ) ; begin
62425: LD_INT 0
62427: PPUSH
// end ;
62428: LD_VAR 0 2
62432: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
62433: LD_INT 0
62435: PPUSH
// end ;
62436: LD_VAR 0 6
62440: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
62441: LD_INT 0
62443: PPUSH
62444: PPUSH
// if not vehicle or not factory then
62445: LD_VAR 0 1
62449: NOT
62450: PUSH
62451: LD_VAR 0 2
62455: NOT
62456: OR
62457: IFFALSE 62461
// exit ;
62459: GO 62692
// if factoryWaypoints >= factory then
62461: LD_EXP 111
62465: PUSH
62466: LD_VAR 0 2
62470: GREATEREQUAL
62471: IFFALSE 62692
// if factoryWaypoints [ factory ] then
62473: LD_EXP 111
62477: PUSH
62478: LD_VAR 0 2
62482: ARRAY
62483: IFFALSE 62692
// begin if GetControl ( vehicle ) = control_manual then
62485: LD_VAR 0 1
62489: PPUSH
62490: CALL_OW 263
62494: PUSH
62495: LD_INT 1
62497: EQUAL
62498: IFFALSE 62579
// begin driver := IsDrivenBy ( vehicle ) ;
62500: LD_ADDR_VAR 0 4
62504: PUSH
62505: LD_VAR 0 1
62509: PPUSH
62510: CALL_OW 311
62514: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62515: LD_VAR 0 4
62519: PPUSH
62520: LD_EXP 111
62524: PUSH
62525: LD_VAR 0 2
62529: ARRAY
62530: PUSH
62531: LD_INT 3
62533: ARRAY
62534: PPUSH
62535: LD_EXP 111
62539: PUSH
62540: LD_VAR 0 2
62544: ARRAY
62545: PUSH
62546: LD_INT 4
62548: ARRAY
62549: PPUSH
62550: CALL_OW 171
// AddComExitVehicle ( driver ) ;
62554: LD_VAR 0 4
62558: PPUSH
62559: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
62563: LD_VAR 0 4
62567: PPUSH
62568: LD_VAR 0 2
62572: PPUSH
62573: CALL_OW 180
// end else
62577: GO 62692
// if GetControl ( vehicle ) = control_remote then
62579: LD_VAR 0 1
62583: PPUSH
62584: CALL_OW 263
62588: PUSH
62589: LD_INT 2
62591: EQUAL
62592: IFFALSE 62653
// begin wait ( 0 0$2 ) ;
62594: LD_INT 70
62596: PPUSH
62597: CALL_OW 67
// if Connect ( vehicle ) then
62601: LD_VAR 0 1
62605: PPUSH
62606: CALL 13197 0 1
62610: IFFALSE 62651
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62612: LD_VAR 0 1
62616: PPUSH
62617: LD_EXP 111
62621: PUSH
62622: LD_VAR 0 2
62626: ARRAY
62627: PUSH
62628: LD_INT 3
62630: ARRAY
62631: PPUSH
62632: LD_EXP 111
62636: PUSH
62637: LD_VAR 0 2
62641: ARRAY
62642: PUSH
62643: LD_INT 4
62645: ARRAY
62646: PPUSH
62647: CALL_OW 171
// end else
62651: GO 62692
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62653: LD_VAR 0 1
62657: PPUSH
62658: LD_EXP 111
62662: PUSH
62663: LD_VAR 0 2
62667: ARRAY
62668: PUSH
62669: LD_INT 3
62671: ARRAY
62672: PPUSH
62673: LD_EXP 111
62677: PUSH
62678: LD_VAR 0 2
62682: ARRAY
62683: PUSH
62684: LD_INT 4
62686: ARRAY
62687: PPUSH
62688: CALL_OW 171
// end ; end ;
62692: LD_VAR 0 3
62696: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
62697: LD_INT 0
62699: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
62700: LD_VAR 0 1
62704: PUSH
62705: LD_INT 250
62707: EQUAL
62708: PUSH
62709: LD_VAR 0 2
62713: PPUSH
62714: CALL_OW 264
62718: PUSH
62719: LD_EXP 42
62723: EQUAL
62724: AND
62725: IFFALSE 62746
// MinerPlaceMine ( unit , x , y ) ;
62727: LD_VAR 0 2
62731: PPUSH
62732: LD_VAR 0 4
62736: PPUSH
62737: LD_VAR 0 5
62741: PPUSH
62742: CALL 65145 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
62746: LD_VAR 0 1
62750: PUSH
62751: LD_INT 251
62753: EQUAL
62754: PUSH
62755: LD_VAR 0 2
62759: PPUSH
62760: CALL_OW 264
62764: PUSH
62765: LD_EXP 42
62769: EQUAL
62770: AND
62771: IFFALSE 62792
// MinerDetonateMine ( unit , x , y ) ;
62773: LD_VAR 0 2
62777: PPUSH
62778: LD_VAR 0 4
62782: PPUSH
62783: LD_VAR 0 5
62787: PPUSH
62788: CALL 65422 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
62792: LD_VAR 0 1
62796: PUSH
62797: LD_INT 252
62799: EQUAL
62800: PUSH
62801: LD_VAR 0 2
62805: PPUSH
62806: CALL_OW 264
62810: PUSH
62811: LD_EXP 42
62815: EQUAL
62816: AND
62817: IFFALSE 62838
// MinerCreateMinefield ( unit , x , y ) ;
62819: LD_VAR 0 2
62823: PPUSH
62824: LD_VAR 0 4
62828: PPUSH
62829: LD_VAR 0 5
62833: PPUSH
62834: CALL 65839 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
62838: LD_VAR 0 1
62842: PUSH
62843: LD_INT 253
62845: EQUAL
62846: PUSH
62847: LD_VAR 0 2
62851: PPUSH
62852: CALL_OW 257
62856: PUSH
62857: LD_INT 5
62859: EQUAL
62860: AND
62861: IFFALSE 62882
// ComBinocular ( unit , x , y ) ;
62863: LD_VAR 0 2
62867: PPUSH
62868: LD_VAR 0 4
62872: PPUSH
62873: LD_VAR 0 5
62877: PPUSH
62878: CALL 66210 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
62882: LD_VAR 0 1
62886: PUSH
62887: LD_INT 254
62889: EQUAL
62890: PUSH
62891: LD_VAR 0 2
62895: PPUSH
62896: CALL_OW 264
62900: PUSH
62901: LD_EXP 37
62905: EQUAL
62906: AND
62907: PUSH
62908: LD_VAR 0 3
62912: PPUSH
62913: CALL_OW 263
62917: PUSH
62918: LD_INT 3
62920: EQUAL
62921: AND
62922: IFFALSE 62938
// HackDestroyVehicle ( unit , selectedUnit ) ;
62924: LD_VAR 0 2
62928: PPUSH
62929: LD_VAR 0 3
62933: PPUSH
62934: CALL 64505 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
62938: LD_VAR 0 1
62942: PUSH
62943: LD_INT 255
62945: EQUAL
62946: PUSH
62947: LD_VAR 0 2
62951: PPUSH
62952: CALL_OW 264
62956: PUSH
62957: LD_INT 14
62959: PUSH
62960: LD_INT 53
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: IN
62967: AND
62968: PUSH
62969: LD_VAR 0 4
62973: PPUSH
62974: LD_VAR 0 5
62978: PPUSH
62979: CALL_OW 488
62983: AND
62984: IFFALSE 63008
// CutTreeXYR ( unit , x , y , 12 ) ;
62986: LD_VAR 0 2
62990: PPUSH
62991: LD_VAR 0 4
62995: PPUSH
62996: LD_VAR 0 5
63000: PPUSH
63001: LD_INT 12
63003: PPUSH
63004: CALL 63071 0 4
// if cmd = 256 then
63008: LD_VAR 0 1
63012: PUSH
63013: LD_INT 256
63015: EQUAL
63016: IFFALSE 63037
// SetFactoryWaypoint ( unit , x , y ) ;
63018: LD_VAR 0 2
63022: PPUSH
63023: LD_VAR 0 4
63027: PPUSH
63028: LD_VAR 0 5
63032: PPUSH
63033: CALL 60843 0 3
// if cmd = 257 then
63037: LD_VAR 0 1
63041: PUSH
63042: LD_INT 257
63044: EQUAL
63045: IFFALSE 63066
// SetWarehouseGatheringPoint ( unit , x , y ) ;
63047: LD_VAR 0 2
63051: PPUSH
63052: LD_VAR 0 4
63056: PPUSH
63057: LD_VAR 0 5
63061: PPUSH
63062: CALL 61205 0 3
// end ;
63066: LD_VAR 0 6
63070: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
63071: LD_INT 0
63073: PPUSH
63074: PPUSH
63075: PPUSH
63076: PPUSH
63077: PPUSH
63078: PPUSH
63079: PPUSH
63080: PPUSH
63081: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
63082: LD_VAR 0 1
63086: NOT
63087: PUSH
63088: LD_VAR 0 2
63092: PPUSH
63093: LD_VAR 0 3
63097: PPUSH
63098: CALL_OW 488
63102: NOT
63103: OR
63104: PUSH
63105: LD_VAR 0 4
63109: NOT
63110: OR
63111: IFFALSE 63115
// exit ;
63113: GO 63455
// list := [ ] ;
63115: LD_ADDR_VAR 0 13
63119: PUSH
63120: EMPTY
63121: ST_TO_ADDR
// if x - r < 0 then
63122: LD_VAR 0 2
63126: PUSH
63127: LD_VAR 0 4
63131: MINUS
63132: PUSH
63133: LD_INT 0
63135: LESS
63136: IFFALSE 63148
// min_x := 0 else
63138: LD_ADDR_VAR 0 7
63142: PUSH
63143: LD_INT 0
63145: ST_TO_ADDR
63146: GO 63164
// min_x := x - r ;
63148: LD_ADDR_VAR 0 7
63152: PUSH
63153: LD_VAR 0 2
63157: PUSH
63158: LD_VAR 0 4
63162: MINUS
63163: ST_TO_ADDR
// if y - r < 0 then
63164: LD_VAR 0 3
63168: PUSH
63169: LD_VAR 0 4
63173: MINUS
63174: PUSH
63175: LD_INT 0
63177: LESS
63178: IFFALSE 63190
// min_y := 0 else
63180: LD_ADDR_VAR 0 8
63184: PUSH
63185: LD_INT 0
63187: ST_TO_ADDR
63188: GO 63206
// min_y := y - r ;
63190: LD_ADDR_VAR 0 8
63194: PUSH
63195: LD_VAR 0 3
63199: PUSH
63200: LD_VAR 0 4
63204: MINUS
63205: ST_TO_ADDR
// max_x := x + r ;
63206: LD_ADDR_VAR 0 9
63210: PUSH
63211: LD_VAR 0 2
63215: PUSH
63216: LD_VAR 0 4
63220: PLUS
63221: ST_TO_ADDR
// max_y := y + r ;
63222: LD_ADDR_VAR 0 10
63226: PUSH
63227: LD_VAR 0 3
63231: PUSH
63232: LD_VAR 0 4
63236: PLUS
63237: ST_TO_ADDR
// for _x = min_x to max_x do
63238: LD_ADDR_VAR 0 11
63242: PUSH
63243: DOUBLE
63244: LD_VAR 0 7
63248: DEC
63249: ST_TO_ADDR
63250: LD_VAR 0 9
63254: PUSH
63255: FOR_TO
63256: IFFALSE 63373
// for _y = min_y to max_y do
63258: LD_ADDR_VAR 0 12
63262: PUSH
63263: DOUBLE
63264: LD_VAR 0 8
63268: DEC
63269: ST_TO_ADDR
63270: LD_VAR 0 10
63274: PUSH
63275: FOR_TO
63276: IFFALSE 63369
// begin if not ValidHex ( _x , _y ) then
63278: LD_VAR 0 11
63282: PPUSH
63283: LD_VAR 0 12
63287: PPUSH
63288: CALL_OW 488
63292: NOT
63293: IFFALSE 63297
// continue ;
63295: GO 63275
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
63297: LD_VAR 0 11
63301: PPUSH
63302: LD_VAR 0 12
63306: PPUSH
63307: CALL_OW 351
63311: PUSH
63312: LD_VAR 0 11
63316: PPUSH
63317: LD_VAR 0 12
63321: PPUSH
63322: CALL_OW 554
63326: AND
63327: IFFALSE 63367
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
63329: LD_ADDR_VAR 0 13
63333: PUSH
63334: LD_VAR 0 13
63338: PPUSH
63339: LD_VAR 0 13
63343: PUSH
63344: LD_INT 1
63346: PLUS
63347: PPUSH
63348: LD_VAR 0 11
63352: PUSH
63353: LD_VAR 0 12
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PPUSH
63362: CALL_OW 2
63366: ST_TO_ADDR
// end ;
63367: GO 63275
63369: POP
63370: POP
63371: GO 63255
63373: POP
63374: POP
// if not list then
63375: LD_VAR 0 13
63379: NOT
63380: IFFALSE 63384
// exit ;
63382: GO 63455
// for i in list do
63384: LD_ADDR_VAR 0 6
63388: PUSH
63389: LD_VAR 0 13
63393: PUSH
63394: FOR_IN
63395: IFFALSE 63453
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
63397: LD_VAR 0 1
63401: PPUSH
63402: LD_STRING M
63404: PUSH
63405: LD_VAR 0 6
63409: PUSH
63410: LD_INT 1
63412: ARRAY
63413: PUSH
63414: LD_VAR 0 6
63418: PUSH
63419: LD_INT 2
63421: ARRAY
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: PUSH
63444: EMPTY
63445: LIST
63446: PPUSH
63447: CALL_OW 447
63451: GO 63394
63453: POP
63454: POP
// end ;
63455: LD_VAR 0 5
63459: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
63460: LD_EXP 114
63464: NOT
63465: IFFALSE 63515
63467: GO 63469
63469: DISABLE
// begin initHack := true ;
63470: LD_ADDR_EXP 114
63474: PUSH
63475: LD_INT 1
63477: ST_TO_ADDR
// hackTanks := [ ] ;
63478: LD_ADDR_EXP 115
63482: PUSH
63483: EMPTY
63484: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
63485: LD_ADDR_EXP 116
63489: PUSH
63490: EMPTY
63491: ST_TO_ADDR
// hackLimit := 3 ;
63492: LD_ADDR_EXP 117
63496: PUSH
63497: LD_INT 3
63499: ST_TO_ADDR
// hackDist := 12 ;
63500: LD_ADDR_EXP 118
63504: PUSH
63505: LD_INT 12
63507: ST_TO_ADDR
// hackCounter := [ ] ;
63508: LD_ADDR_EXP 119
63512: PUSH
63513: EMPTY
63514: ST_TO_ADDR
// end ;
63515: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
63516: LD_EXP 114
63520: PUSH
63521: LD_INT 34
63523: PUSH
63524: LD_EXP 37
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PPUSH
63533: CALL_OW 69
63537: AND
63538: IFFALSE 63793
63540: GO 63542
63542: DISABLE
63543: LD_INT 0
63545: PPUSH
63546: PPUSH
// begin enable ;
63547: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
63548: LD_ADDR_VAR 0 1
63552: PUSH
63553: LD_INT 34
63555: PUSH
63556: LD_EXP 37
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PPUSH
63565: CALL_OW 69
63569: PUSH
63570: FOR_IN
63571: IFFALSE 63791
// begin if not i in hackTanks then
63573: LD_VAR 0 1
63577: PUSH
63578: LD_EXP 115
63582: IN
63583: NOT
63584: IFFALSE 63667
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
63586: LD_ADDR_EXP 115
63590: PUSH
63591: LD_EXP 115
63595: PPUSH
63596: LD_EXP 115
63600: PUSH
63601: LD_INT 1
63603: PLUS
63604: PPUSH
63605: LD_VAR 0 1
63609: PPUSH
63610: CALL_OW 1
63614: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
63615: LD_ADDR_EXP 116
63619: PUSH
63620: LD_EXP 116
63624: PPUSH
63625: LD_EXP 116
63629: PUSH
63630: LD_INT 1
63632: PLUS
63633: PPUSH
63634: EMPTY
63635: PPUSH
63636: CALL_OW 1
63640: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
63641: LD_ADDR_EXP 119
63645: PUSH
63646: LD_EXP 119
63650: PPUSH
63651: LD_EXP 119
63655: PUSH
63656: LD_INT 1
63658: PLUS
63659: PPUSH
63660: EMPTY
63661: PPUSH
63662: CALL_OW 1
63666: ST_TO_ADDR
// end ; if not IsOk ( i ) then
63667: LD_VAR 0 1
63671: PPUSH
63672: CALL_OW 302
63676: NOT
63677: IFFALSE 63690
// begin HackUnlinkAll ( i ) ;
63679: LD_VAR 0 1
63683: PPUSH
63684: CALL 63796 0 1
// continue ;
63688: GO 63570
// end ; HackCheckCapturedStatus ( i ) ;
63690: LD_VAR 0 1
63694: PPUSH
63695: CALL 64239 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
63699: LD_ADDR_VAR 0 2
63703: PUSH
63704: LD_INT 81
63706: PUSH
63707: LD_VAR 0 1
63711: PPUSH
63712: CALL_OW 255
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 33
63723: PUSH
63724: LD_INT 3
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 91
63733: PUSH
63734: LD_VAR 0 1
63738: PUSH
63739: LD_EXP 118
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 50
63751: PUSH
63752: EMPTY
63753: LIST
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: PPUSH
63761: CALL_OW 69
63765: ST_TO_ADDR
// if not tmp then
63766: LD_VAR 0 2
63770: NOT
63771: IFFALSE 63775
// continue ;
63773: GO 63570
// HackLink ( i , tmp ) ;
63775: LD_VAR 0 1
63779: PPUSH
63780: LD_VAR 0 2
63784: PPUSH
63785: CALL 63932 0 2
// end ;
63789: GO 63570
63791: POP
63792: POP
// end ;
63793: PPOPN 2
63795: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
63796: LD_INT 0
63798: PPUSH
63799: PPUSH
63800: PPUSH
// if not hack in hackTanks then
63801: LD_VAR 0 1
63805: PUSH
63806: LD_EXP 115
63810: IN
63811: NOT
63812: IFFALSE 63816
// exit ;
63814: GO 63927
// index := GetElementIndex ( hackTanks , hack ) ;
63816: LD_ADDR_VAR 0 4
63820: PUSH
63821: LD_EXP 115
63825: PPUSH
63826: LD_VAR 0 1
63830: PPUSH
63831: CALL 10011 0 2
63835: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
63836: LD_EXP 116
63840: PUSH
63841: LD_VAR 0 4
63845: ARRAY
63846: IFFALSE 63927
// begin for i in hackTanksCaptured [ index ] do
63848: LD_ADDR_VAR 0 3
63852: PUSH
63853: LD_EXP 116
63857: PUSH
63858: LD_VAR 0 4
63862: ARRAY
63863: PUSH
63864: FOR_IN
63865: IFFALSE 63891
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
63867: LD_VAR 0 3
63871: PUSH
63872: LD_INT 1
63874: ARRAY
63875: PPUSH
63876: LD_VAR 0 3
63880: PUSH
63881: LD_INT 2
63883: ARRAY
63884: PPUSH
63885: CALL_OW 235
63889: GO 63864
63891: POP
63892: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
63893: LD_ADDR_EXP 116
63897: PUSH
63898: LD_EXP 116
63902: PPUSH
63903: LD_VAR 0 4
63907: PPUSH
63908: EMPTY
63909: PPUSH
63910: CALL_OW 1
63914: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
63915: LD_VAR 0 1
63919: PPUSH
63920: LD_INT 0
63922: PPUSH
63923: CALL_OW 505
// end ; end ;
63927: LD_VAR 0 2
63931: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
63932: LD_INT 0
63934: PPUSH
63935: PPUSH
63936: PPUSH
// if not hack in hackTanks or not vehicles then
63937: LD_VAR 0 1
63941: PUSH
63942: LD_EXP 115
63946: IN
63947: NOT
63948: PUSH
63949: LD_VAR 0 2
63953: NOT
63954: OR
63955: IFFALSE 63959
// exit ;
63957: GO 64234
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
63959: LD_ADDR_VAR 0 2
63963: PUSH
63964: LD_VAR 0 1
63968: PPUSH
63969: LD_VAR 0 2
63973: PPUSH
63974: LD_INT 1
63976: PPUSH
63977: LD_INT 1
63979: PPUSH
63980: CALL 10661 0 4
63984: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
63985: LD_ADDR_VAR 0 5
63989: PUSH
63990: LD_EXP 115
63994: PPUSH
63995: LD_VAR 0 1
63999: PPUSH
64000: CALL 10011 0 2
64004: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
64005: LD_EXP 116
64009: PUSH
64010: LD_VAR 0 5
64014: ARRAY
64015: PUSH
64016: LD_EXP 117
64020: LESS
64021: IFFALSE 64210
// begin for i := 1 to vehicles do
64023: LD_ADDR_VAR 0 4
64027: PUSH
64028: DOUBLE
64029: LD_INT 1
64031: DEC
64032: ST_TO_ADDR
64033: LD_VAR 0 2
64037: PUSH
64038: FOR_TO
64039: IFFALSE 64208
// begin if hackTanksCaptured [ index ] = hackLimit then
64041: LD_EXP 116
64045: PUSH
64046: LD_VAR 0 5
64050: ARRAY
64051: PUSH
64052: LD_EXP 117
64056: EQUAL
64057: IFFALSE 64061
// break ;
64059: GO 64208
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
64061: LD_ADDR_EXP 119
64065: PUSH
64066: LD_EXP 119
64070: PPUSH
64071: LD_VAR 0 5
64075: PPUSH
64076: LD_EXP 119
64080: PUSH
64081: LD_VAR 0 5
64085: ARRAY
64086: PUSH
64087: LD_INT 1
64089: PLUS
64090: PPUSH
64091: CALL_OW 1
64095: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
64096: LD_ADDR_EXP 116
64100: PUSH
64101: LD_EXP 116
64105: PPUSH
64106: LD_VAR 0 5
64110: PUSH
64111: LD_EXP 116
64115: PUSH
64116: LD_VAR 0 5
64120: ARRAY
64121: PUSH
64122: LD_INT 1
64124: PLUS
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PPUSH
64130: LD_VAR 0 2
64134: PUSH
64135: LD_VAR 0 4
64139: ARRAY
64140: PUSH
64141: LD_VAR 0 2
64145: PUSH
64146: LD_VAR 0 4
64150: ARRAY
64151: PPUSH
64152: CALL_OW 255
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PPUSH
64161: CALL 10226 0 3
64165: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
64166: LD_VAR 0 2
64170: PUSH
64171: LD_VAR 0 4
64175: ARRAY
64176: PPUSH
64177: LD_VAR 0 1
64181: PPUSH
64182: CALL_OW 255
64186: PPUSH
64187: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
64191: LD_VAR 0 2
64195: PUSH
64196: LD_VAR 0 4
64200: ARRAY
64201: PPUSH
64202: CALL_OW 141
// end ;
64206: GO 64038
64208: POP
64209: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64210: LD_VAR 0 1
64214: PPUSH
64215: LD_EXP 116
64219: PUSH
64220: LD_VAR 0 5
64224: ARRAY
64225: PUSH
64226: LD_INT 0
64228: PLUS
64229: PPUSH
64230: CALL_OW 505
// end ;
64234: LD_VAR 0 3
64238: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
64239: LD_INT 0
64241: PPUSH
64242: PPUSH
64243: PPUSH
64244: PPUSH
// if not hack in hackTanks then
64245: LD_VAR 0 1
64249: PUSH
64250: LD_EXP 115
64254: IN
64255: NOT
64256: IFFALSE 64260
// exit ;
64258: GO 64500
// index := GetElementIndex ( hackTanks , hack ) ;
64260: LD_ADDR_VAR 0 4
64264: PUSH
64265: LD_EXP 115
64269: PPUSH
64270: LD_VAR 0 1
64274: PPUSH
64275: CALL 10011 0 2
64279: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
64280: LD_ADDR_VAR 0 3
64284: PUSH
64285: DOUBLE
64286: LD_EXP 116
64290: PUSH
64291: LD_VAR 0 4
64295: ARRAY
64296: INC
64297: ST_TO_ADDR
64298: LD_INT 1
64300: PUSH
64301: FOR_DOWNTO
64302: IFFALSE 64474
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
64304: LD_ADDR_VAR 0 5
64308: PUSH
64309: LD_EXP 116
64313: PUSH
64314: LD_VAR 0 4
64318: ARRAY
64319: PUSH
64320: LD_VAR 0 3
64324: ARRAY
64325: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
64326: LD_VAR 0 5
64330: PUSH
64331: LD_INT 1
64333: ARRAY
64334: PPUSH
64335: CALL_OW 302
64339: NOT
64340: PUSH
64341: LD_VAR 0 5
64345: PUSH
64346: LD_INT 1
64348: ARRAY
64349: PPUSH
64350: CALL_OW 255
64354: PUSH
64355: LD_VAR 0 1
64359: PPUSH
64360: CALL_OW 255
64364: NONEQUAL
64365: OR
64366: IFFALSE 64472
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
64368: LD_VAR 0 5
64372: PUSH
64373: LD_INT 1
64375: ARRAY
64376: PPUSH
64377: CALL_OW 305
64381: PUSH
64382: LD_VAR 0 5
64386: PUSH
64387: LD_INT 1
64389: ARRAY
64390: PPUSH
64391: CALL_OW 255
64395: PUSH
64396: LD_VAR 0 1
64400: PPUSH
64401: CALL_OW 255
64405: EQUAL
64406: AND
64407: IFFALSE 64431
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
64409: LD_VAR 0 5
64413: PUSH
64414: LD_INT 1
64416: ARRAY
64417: PPUSH
64418: LD_VAR 0 5
64422: PUSH
64423: LD_INT 2
64425: ARRAY
64426: PPUSH
64427: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
64431: LD_ADDR_EXP 116
64435: PUSH
64436: LD_EXP 116
64440: PPUSH
64441: LD_VAR 0 4
64445: PPUSH
64446: LD_EXP 116
64450: PUSH
64451: LD_VAR 0 4
64455: ARRAY
64456: PPUSH
64457: LD_VAR 0 3
64461: PPUSH
64462: CALL_OW 3
64466: PPUSH
64467: CALL_OW 1
64471: ST_TO_ADDR
// end ; end ;
64472: GO 64301
64474: POP
64475: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64476: LD_VAR 0 1
64480: PPUSH
64481: LD_EXP 116
64485: PUSH
64486: LD_VAR 0 4
64490: ARRAY
64491: PUSH
64492: LD_INT 0
64494: PLUS
64495: PPUSH
64496: CALL_OW 505
// end ;
64500: LD_VAR 0 2
64504: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
64505: LD_INT 0
64507: PPUSH
64508: PPUSH
64509: PPUSH
64510: PPUSH
// if not hack in hackTanks then
64511: LD_VAR 0 1
64515: PUSH
64516: LD_EXP 115
64520: IN
64521: NOT
64522: IFFALSE 64526
// exit ;
64524: GO 64611
// index := GetElementIndex ( hackTanks , hack ) ;
64526: LD_ADDR_VAR 0 5
64530: PUSH
64531: LD_EXP 115
64535: PPUSH
64536: LD_VAR 0 1
64540: PPUSH
64541: CALL 10011 0 2
64545: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
64546: LD_ADDR_VAR 0 4
64550: PUSH
64551: DOUBLE
64552: LD_INT 1
64554: DEC
64555: ST_TO_ADDR
64556: LD_EXP 116
64560: PUSH
64561: LD_VAR 0 5
64565: ARRAY
64566: PUSH
64567: FOR_TO
64568: IFFALSE 64609
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
64570: LD_EXP 116
64574: PUSH
64575: LD_VAR 0 5
64579: ARRAY
64580: PUSH
64581: LD_VAR 0 4
64585: ARRAY
64586: PUSH
64587: LD_INT 1
64589: ARRAY
64590: PUSH
64591: LD_VAR 0 2
64595: EQUAL
64596: IFFALSE 64607
// KillUnit ( vehicle ) ;
64598: LD_VAR 0 2
64602: PPUSH
64603: CALL_OW 66
64607: GO 64567
64609: POP
64610: POP
// end ;
64611: LD_VAR 0 3
64615: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
64616: LD_EXP 120
64620: NOT
64621: IFFALSE 64656
64623: GO 64625
64625: DISABLE
// begin initMiner := true ;
64626: LD_ADDR_EXP 120
64630: PUSH
64631: LD_INT 1
64633: ST_TO_ADDR
// minersList := [ ] ;
64634: LD_ADDR_EXP 121
64638: PUSH
64639: EMPTY
64640: ST_TO_ADDR
// minerMinesList := [ ] ;
64641: LD_ADDR_EXP 122
64645: PUSH
64646: EMPTY
64647: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
64648: LD_ADDR_EXP 123
64652: PUSH
64653: LD_INT 5
64655: ST_TO_ADDR
// end ;
64656: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
64657: LD_EXP 120
64661: PUSH
64662: LD_INT 34
64664: PUSH
64665: LD_EXP 42
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PPUSH
64674: CALL_OW 69
64678: AND
64679: IFFALSE 65142
64681: GO 64683
64683: DISABLE
64684: LD_INT 0
64686: PPUSH
64687: PPUSH
64688: PPUSH
64689: PPUSH
// begin enable ;
64690: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
64691: LD_ADDR_VAR 0 1
64695: PUSH
64696: LD_INT 34
64698: PUSH
64699: LD_EXP 42
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PPUSH
64708: CALL_OW 69
64712: PUSH
64713: FOR_IN
64714: IFFALSE 64786
// begin if not i in minersList then
64716: LD_VAR 0 1
64720: PUSH
64721: LD_EXP 121
64725: IN
64726: NOT
64727: IFFALSE 64784
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
64729: LD_ADDR_EXP 121
64733: PUSH
64734: LD_EXP 121
64738: PPUSH
64739: LD_EXP 121
64743: PUSH
64744: LD_INT 1
64746: PLUS
64747: PPUSH
64748: LD_VAR 0 1
64752: PPUSH
64753: CALL_OW 1
64757: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
64758: LD_ADDR_EXP 122
64762: PUSH
64763: LD_EXP 122
64767: PPUSH
64768: LD_EXP 122
64772: PUSH
64773: LD_INT 1
64775: PLUS
64776: PPUSH
64777: EMPTY
64778: PPUSH
64779: CALL_OW 1
64783: ST_TO_ADDR
// end end ;
64784: GO 64713
64786: POP
64787: POP
// for i := minerMinesList downto 1 do
64788: LD_ADDR_VAR 0 1
64792: PUSH
64793: DOUBLE
64794: LD_EXP 122
64798: INC
64799: ST_TO_ADDR
64800: LD_INT 1
64802: PUSH
64803: FOR_DOWNTO
64804: IFFALSE 65140
// begin if IsLive ( minersList [ i ] ) then
64806: LD_EXP 121
64810: PUSH
64811: LD_VAR 0 1
64815: ARRAY
64816: PPUSH
64817: CALL_OW 300
64821: IFFALSE 64849
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
64823: LD_EXP 121
64827: PUSH
64828: LD_VAR 0 1
64832: ARRAY
64833: PPUSH
64834: LD_EXP 122
64838: PUSH
64839: LD_VAR 0 1
64843: ARRAY
64844: PPUSH
64845: CALL_OW 505
// if not minerMinesList [ i ] then
64849: LD_EXP 122
64853: PUSH
64854: LD_VAR 0 1
64858: ARRAY
64859: NOT
64860: IFFALSE 64864
// continue ;
64862: GO 64803
// for j := minerMinesList [ i ] downto 1 do
64864: LD_ADDR_VAR 0 2
64868: PUSH
64869: DOUBLE
64870: LD_EXP 122
64874: PUSH
64875: LD_VAR 0 1
64879: ARRAY
64880: INC
64881: ST_TO_ADDR
64882: LD_INT 1
64884: PUSH
64885: FOR_DOWNTO
64886: IFFALSE 65136
// begin side := GetSide ( minersList [ i ] ) ;
64888: LD_ADDR_VAR 0 3
64892: PUSH
64893: LD_EXP 121
64897: PUSH
64898: LD_VAR 0 1
64902: ARRAY
64903: PPUSH
64904: CALL_OW 255
64908: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
64909: LD_ADDR_VAR 0 4
64913: PUSH
64914: LD_EXP 122
64918: PUSH
64919: LD_VAR 0 1
64923: ARRAY
64924: PUSH
64925: LD_VAR 0 2
64929: ARRAY
64930: PUSH
64931: LD_INT 1
64933: ARRAY
64934: PPUSH
64935: LD_EXP 122
64939: PUSH
64940: LD_VAR 0 1
64944: ARRAY
64945: PUSH
64946: LD_VAR 0 2
64950: ARRAY
64951: PUSH
64952: LD_INT 2
64954: ARRAY
64955: PPUSH
64956: CALL_OW 428
64960: ST_TO_ADDR
// if not tmp then
64961: LD_VAR 0 4
64965: NOT
64966: IFFALSE 64970
// continue ;
64968: GO 64885
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
64970: LD_VAR 0 4
64974: PUSH
64975: LD_INT 81
64977: PUSH
64978: LD_VAR 0 3
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PPUSH
64987: CALL_OW 69
64991: IN
64992: PUSH
64993: LD_EXP 122
64997: PUSH
64998: LD_VAR 0 1
65002: ARRAY
65003: PUSH
65004: LD_VAR 0 2
65008: ARRAY
65009: PUSH
65010: LD_INT 1
65012: ARRAY
65013: PPUSH
65014: LD_EXP 122
65018: PUSH
65019: LD_VAR 0 1
65023: ARRAY
65024: PUSH
65025: LD_VAR 0 2
65029: ARRAY
65030: PUSH
65031: LD_INT 2
65033: ARRAY
65034: PPUSH
65035: CALL_OW 458
65039: AND
65040: IFFALSE 65134
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
65042: LD_EXP 122
65046: PUSH
65047: LD_VAR 0 1
65051: ARRAY
65052: PUSH
65053: LD_VAR 0 2
65057: ARRAY
65058: PUSH
65059: LD_INT 1
65061: ARRAY
65062: PPUSH
65063: LD_EXP 122
65067: PUSH
65068: LD_VAR 0 1
65072: ARRAY
65073: PUSH
65074: LD_VAR 0 2
65078: ARRAY
65079: PUSH
65080: LD_INT 2
65082: ARRAY
65083: PPUSH
65084: LD_VAR 0 3
65088: PPUSH
65089: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
65093: LD_ADDR_EXP 122
65097: PUSH
65098: LD_EXP 122
65102: PPUSH
65103: LD_VAR 0 1
65107: PPUSH
65108: LD_EXP 122
65112: PUSH
65113: LD_VAR 0 1
65117: ARRAY
65118: PPUSH
65119: LD_VAR 0 2
65123: PPUSH
65124: CALL_OW 3
65128: PPUSH
65129: CALL_OW 1
65133: ST_TO_ADDR
// end ; end ;
65134: GO 64885
65136: POP
65137: POP
// end ;
65138: GO 64803
65140: POP
65141: POP
// end ;
65142: PPOPN 4
65144: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
65145: LD_INT 0
65147: PPUSH
65148: PPUSH
// result := false ;
65149: LD_ADDR_VAR 0 4
65153: PUSH
65154: LD_INT 0
65156: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
65157: LD_VAR 0 1
65161: PPUSH
65162: CALL_OW 264
65166: PUSH
65167: LD_EXP 42
65171: EQUAL
65172: NOT
65173: IFFALSE 65177
// exit ;
65175: GO 65417
// index := GetElementIndex ( minersList , unit ) ;
65177: LD_ADDR_VAR 0 5
65181: PUSH
65182: LD_EXP 121
65186: PPUSH
65187: LD_VAR 0 1
65191: PPUSH
65192: CALL 10011 0 2
65196: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
65197: LD_EXP 122
65201: PUSH
65202: LD_VAR 0 5
65206: ARRAY
65207: PUSH
65208: LD_EXP 123
65212: GREATEREQUAL
65213: IFFALSE 65217
// exit ;
65215: GO 65417
// ComMoveXY ( unit , x , y ) ;
65217: LD_VAR 0 1
65221: PPUSH
65222: LD_VAR 0 2
65226: PPUSH
65227: LD_VAR 0 3
65231: PPUSH
65232: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65236: LD_INT 35
65238: PPUSH
65239: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
65243: LD_VAR 0 1
65247: PPUSH
65248: LD_VAR 0 2
65252: PPUSH
65253: LD_VAR 0 3
65257: PPUSH
65258: CALL 41280 0 3
65262: NOT
65263: PUSH
65264: LD_VAR 0 1
65268: PPUSH
65269: CALL_OW 314
65273: AND
65274: IFFALSE 65278
// exit ;
65276: GO 65417
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
65278: LD_VAR 0 2
65282: PPUSH
65283: LD_VAR 0 3
65287: PPUSH
65288: CALL_OW 428
65292: PUSH
65293: LD_VAR 0 1
65297: EQUAL
65298: PUSH
65299: LD_VAR 0 1
65303: PPUSH
65304: CALL_OW 314
65308: NOT
65309: AND
65310: IFFALSE 65236
// PlaySoundXY ( x , y , PlantMine ) ;
65312: LD_VAR 0 2
65316: PPUSH
65317: LD_VAR 0 3
65321: PPUSH
65322: LD_STRING PlantMine
65324: PPUSH
65325: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
65329: LD_VAR 0 2
65333: PPUSH
65334: LD_VAR 0 3
65338: PPUSH
65339: LD_VAR 0 1
65343: PPUSH
65344: CALL_OW 255
65348: PPUSH
65349: LD_INT 0
65351: PPUSH
65352: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
65356: LD_ADDR_EXP 122
65360: PUSH
65361: LD_EXP 122
65365: PPUSH
65366: LD_VAR 0 5
65370: PUSH
65371: LD_EXP 122
65375: PUSH
65376: LD_VAR 0 5
65380: ARRAY
65381: PUSH
65382: LD_INT 1
65384: PLUS
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PPUSH
65390: LD_VAR 0 2
65394: PUSH
65395: LD_VAR 0 3
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PPUSH
65404: CALL 10226 0 3
65408: ST_TO_ADDR
// result := true ;
65409: LD_ADDR_VAR 0 4
65413: PUSH
65414: LD_INT 1
65416: ST_TO_ADDR
// end ;
65417: LD_VAR 0 4
65421: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
65422: LD_INT 0
65424: PPUSH
65425: PPUSH
65426: PPUSH
// if not unit in minersList then
65427: LD_VAR 0 1
65431: PUSH
65432: LD_EXP 121
65436: IN
65437: NOT
65438: IFFALSE 65442
// exit ;
65440: GO 65834
// index := GetElementIndex ( minersList , unit ) ;
65442: LD_ADDR_VAR 0 6
65446: PUSH
65447: LD_EXP 121
65451: PPUSH
65452: LD_VAR 0 1
65456: PPUSH
65457: CALL 10011 0 2
65461: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
65462: LD_ADDR_VAR 0 5
65466: PUSH
65467: DOUBLE
65468: LD_EXP 122
65472: PUSH
65473: LD_VAR 0 6
65477: ARRAY
65478: INC
65479: ST_TO_ADDR
65480: LD_INT 1
65482: PUSH
65483: FOR_DOWNTO
65484: IFFALSE 65645
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
65486: LD_EXP 122
65490: PUSH
65491: LD_VAR 0 6
65495: ARRAY
65496: PUSH
65497: LD_VAR 0 5
65501: ARRAY
65502: PUSH
65503: LD_INT 1
65505: ARRAY
65506: PUSH
65507: LD_VAR 0 2
65511: EQUAL
65512: PUSH
65513: LD_EXP 122
65517: PUSH
65518: LD_VAR 0 6
65522: ARRAY
65523: PUSH
65524: LD_VAR 0 5
65528: ARRAY
65529: PUSH
65530: LD_INT 2
65532: ARRAY
65533: PUSH
65534: LD_VAR 0 3
65538: EQUAL
65539: AND
65540: IFFALSE 65643
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65542: LD_EXP 122
65546: PUSH
65547: LD_VAR 0 6
65551: ARRAY
65552: PUSH
65553: LD_VAR 0 5
65557: ARRAY
65558: PUSH
65559: LD_INT 1
65561: ARRAY
65562: PPUSH
65563: LD_EXP 122
65567: PUSH
65568: LD_VAR 0 6
65572: ARRAY
65573: PUSH
65574: LD_VAR 0 5
65578: ARRAY
65579: PUSH
65580: LD_INT 2
65582: ARRAY
65583: PPUSH
65584: LD_VAR 0 1
65588: PPUSH
65589: CALL_OW 255
65593: PPUSH
65594: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65598: LD_ADDR_EXP 122
65602: PUSH
65603: LD_EXP 122
65607: PPUSH
65608: LD_VAR 0 6
65612: PPUSH
65613: LD_EXP 122
65617: PUSH
65618: LD_VAR 0 6
65622: ARRAY
65623: PPUSH
65624: LD_VAR 0 5
65628: PPUSH
65629: CALL_OW 3
65633: PPUSH
65634: CALL_OW 1
65638: ST_TO_ADDR
// exit ;
65639: POP
65640: POP
65641: GO 65834
// end ; end ;
65643: GO 65483
65645: POP
65646: POP
// for i := minerMinesList [ index ] downto 1 do
65647: LD_ADDR_VAR 0 5
65651: PUSH
65652: DOUBLE
65653: LD_EXP 122
65657: PUSH
65658: LD_VAR 0 6
65662: ARRAY
65663: INC
65664: ST_TO_ADDR
65665: LD_INT 1
65667: PUSH
65668: FOR_DOWNTO
65669: IFFALSE 65832
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
65671: LD_EXP 122
65675: PUSH
65676: LD_VAR 0 6
65680: ARRAY
65681: PUSH
65682: LD_VAR 0 5
65686: ARRAY
65687: PUSH
65688: LD_INT 1
65690: ARRAY
65691: PPUSH
65692: LD_EXP 122
65696: PUSH
65697: LD_VAR 0 6
65701: ARRAY
65702: PUSH
65703: LD_VAR 0 5
65707: ARRAY
65708: PUSH
65709: LD_INT 2
65711: ARRAY
65712: PPUSH
65713: LD_VAR 0 2
65717: PPUSH
65718: LD_VAR 0 3
65722: PPUSH
65723: CALL_OW 298
65727: PUSH
65728: LD_INT 6
65730: LESS
65731: IFFALSE 65830
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65733: LD_EXP 122
65737: PUSH
65738: LD_VAR 0 6
65742: ARRAY
65743: PUSH
65744: LD_VAR 0 5
65748: ARRAY
65749: PUSH
65750: LD_INT 1
65752: ARRAY
65753: PPUSH
65754: LD_EXP 122
65758: PUSH
65759: LD_VAR 0 6
65763: ARRAY
65764: PUSH
65765: LD_VAR 0 5
65769: ARRAY
65770: PUSH
65771: LD_INT 2
65773: ARRAY
65774: PPUSH
65775: LD_VAR 0 1
65779: PPUSH
65780: CALL_OW 255
65784: PPUSH
65785: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65789: LD_ADDR_EXP 122
65793: PUSH
65794: LD_EXP 122
65798: PPUSH
65799: LD_VAR 0 6
65803: PPUSH
65804: LD_EXP 122
65808: PUSH
65809: LD_VAR 0 6
65813: ARRAY
65814: PPUSH
65815: LD_VAR 0 5
65819: PPUSH
65820: CALL_OW 3
65824: PPUSH
65825: CALL_OW 1
65829: ST_TO_ADDR
// end ; end ;
65830: GO 65668
65832: POP
65833: POP
// end ;
65834: LD_VAR 0 4
65838: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
65839: LD_INT 0
65841: PPUSH
65842: PPUSH
65843: PPUSH
65844: PPUSH
65845: PPUSH
65846: PPUSH
65847: PPUSH
65848: PPUSH
65849: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
65850: LD_VAR 0 1
65854: PPUSH
65855: CALL_OW 264
65859: PUSH
65860: LD_EXP 42
65864: EQUAL
65865: NOT
65866: PUSH
65867: LD_VAR 0 1
65871: PUSH
65872: LD_EXP 121
65876: IN
65877: NOT
65878: OR
65879: IFFALSE 65883
// exit ;
65881: GO 66205
// index := GetElementIndex ( minersList , unit ) ;
65883: LD_ADDR_VAR 0 6
65887: PUSH
65888: LD_EXP 121
65892: PPUSH
65893: LD_VAR 0 1
65897: PPUSH
65898: CALL 10011 0 2
65902: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
65903: LD_ADDR_VAR 0 8
65907: PUSH
65908: LD_EXP 123
65912: PUSH
65913: LD_EXP 122
65917: PUSH
65918: LD_VAR 0 6
65922: ARRAY
65923: MINUS
65924: ST_TO_ADDR
// if not minesFreeAmount then
65925: LD_VAR 0 8
65929: NOT
65930: IFFALSE 65934
// exit ;
65932: GO 66205
// tmp := [ ] ;
65934: LD_ADDR_VAR 0 7
65938: PUSH
65939: EMPTY
65940: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
65941: LD_ADDR_VAR 0 5
65945: PUSH
65946: DOUBLE
65947: LD_INT 1
65949: DEC
65950: ST_TO_ADDR
65951: LD_VAR 0 8
65955: PUSH
65956: FOR_TO
65957: IFFALSE 66152
// begin _d := rand ( 0 , 5 ) ;
65959: LD_ADDR_VAR 0 11
65963: PUSH
65964: LD_INT 0
65966: PPUSH
65967: LD_INT 5
65969: PPUSH
65970: CALL_OW 12
65974: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
65975: LD_ADDR_VAR 0 12
65979: PUSH
65980: LD_INT 2
65982: PPUSH
65983: LD_INT 6
65985: PPUSH
65986: CALL_OW 12
65990: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
65991: LD_ADDR_VAR 0 9
65995: PUSH
65996: LD_VAR 0 2
66000: PPUSH
66001: LD_VAR 0 11
66005: PPUSH
66006: LD_VAR 0 12
66010: PPUSH
66011: CALL_OW 272
66015: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
66016: LD_ADDR_VAR 0 10
66020: PUSH
66021: LD_VAR 0 3
66025: PPUSH
66026: LD_VAR 0 11
66030: PPUSH
66031: LD_VAR 0 12
66035: PPUSH
66036: CALL_OW 273
66040: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
66041: LD_VAR 0 9
66045: PPUSH
66046: LD_VAR 0 10
66050: PPUSH
66051: CALL_OW 488
66055: PUSH
66056: LD_VAR 0 9
66060: PUSH
66061: LD_VAR 0 10
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_VAR 0 7
66074: IN
66075: NOT
66076: AND
66077: PUSH
66078: LD_VAR 0 9
66082: PPUSH
66083: LD_VAR 0 10
66087: PPUSH
66088: CALL_OW 458
66092: NOT
66093: AND
66094: IFFALSE 66136
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
66096: LD_ADDR_VAR 0 7
66100: PUSH
66101: LD_VAR 0 7
66105: PPUSH
66106: LD_VAR 0 7
66110: PUSH
66111: LD_INT 1
66113: PLUS
66114: PPUSH
66115: LD_VAR 0 9
66119: PUSH
66120: LD_VAR 0 10
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PPUSH
66129: CALL_OW 1
66133: ST_TO_ADDR
66134: GO 66150
// i := i - 1 ;
66136: LD_ADDR_VAR 0 5
66140: PUSH
66141: LD_VAR 0 5
66145: PUSH
66146: LD_INT 1
66148: MINUS
66149: ST_TO_ADDR
// end ;
66150: GO 65956
66152: POP
66153: POP
// for i in tmp do
66154: LD_ADDR_VAR 0 5
66158: PUSH
66159: LD_VAR 0 7
66163: PUSH
66164: FOR_IN
66165: IFFALSE 66203
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
66167: LD_VAR 0 1
66171: PPUSH
66172: LD_VAR 0 5
66176: PUSH
66177: LD_INT 1
66179: ARRAY
66180: PPUSH
66181: LD_VAR 0 5
66185: PUSH
66186: LD_INT 2
66188: ARRAY
66189: PPUSH
66190: CALL 65145 0 3
66194: NOT
66195: IFFALSE 66201
// exit ;
66197: POP
66198: POP
66199: GO 66205
66201: GO 66164
66203: POP
66204: POP
// end ;
66205: LD_VAR 0 4
66209: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
66210: LD_INT 0
66212: PPUSH
66213: PPUSH
66214: PPUSH
66215: PPUSH
66216: PPUSH
66217: PPUSH
66218: PPUSH
// if not GetClass ( unit ) = class_sniper then
66219: LD_VAR 0 1
66223: PPUSH
66224: CALL_OW 257
66228: PUSH
66229: LD_INT 5
66231: EQUAL
66232: NOT
66233: IFFALSE 66237
// exit ;
66235: GO 66625
// dist := 8 ;
66237: LD_ADDR_VAR 0 5
66241: PUSH
66242: LD_INT 8
66244: ST_TO_ADDR
// viewRange := 12 ;
66245: LD_ADDR_VAR 0 7
66249: PUSH
66250: LD_INT 12
66252: ST_TO_ADDR
// side := GetSide ( unit ) ;
66253: LD_ADDR_VAR 0 6
66257: PUSH
66258: LD_VAR 0 1
66262: PPUSH
66263: CALL_OW 255
66267: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
66268: LD_INT 61
66270: PPUSH
66271: LD_VAR 0 6
66275: PPUSH
66276: CALL_OW 321
66280: PUSH
66281: LD_INT 2
66283: EQUAL
66284: IFFALSE 66294
// viewRange := 16 ;
66286: LD_ADDR_VAR 0 7
66290: PUSH
66291: LD_INT 16
66293: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
66294: LD_VAR 0 1
66298: PPUSH
66299: LD_VAR 0 2
66303: PPUSH
66304: LD_VAR 0 3
66308: PPUSH
66309: CALL_OW 297
66313: PUSH
66314: LD_VAR 0 5
66318: GREATER
66319: IFFALSE 66398
// begin ComMoveXY ( unit , x , y ) ;
66321: LD_VAR 0 1
66325: PPUSH
66326: LD_VAR 0 2
66330: PPUSH
66331: LD_VAR 0 3
66335: PPUSH
66336: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66340: LD_INT 35
66342: PPUSH
66343: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
66347: LD_VAR 0 1
66351: PPUSH
66352: LD_VAR 0 2
66356: PPUSH
66357: LD_VAR 0 3
66361: PPUSH
66362: CALL 41280 0 3
66366: NOT
66367: IFFALSE 66371
// exit ;
66369: GO 66625
// until GetDistUnitXY ( unit , x , y ) < dist ;
66371: LD_VAR 0 1
66375: PPUSH
66376: LD_VAR 0 2
66380: PPUSH
66381: LD_VAR 0 3
66385: PPUSH
66386: CALL_OW 297
66390: PUSH
66391: LD_VAR 0 5
66395: LESS
66396: IFFALSE 66340
// end ; ComTurnXY ( unit , x , y ) ;
66398: LD_VAR 0 1
66402: PPUSH
66403: LD_VAR 0 2
66407: PPUSH
66408: LD_VAR 0 3
66412: PPUSH
66413: CALL_OW 118
// wait ( 5 ) ;
66417: LD_INT 5
66419: PPUSH
66420: CALL_OW 67
// _d := GetDir ( unit ) ;
66424: LD_ADDR_VAR 0 10
66428: PUSH
66429: LD_VAR 0 1
66433: PPUSH
66434: CALL_OW 254
66438: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
66439: LD_ADDR_VAR 0 8
66443: PUSH
66444: LD_VAR 0 1
66448: PPUSH
66449: CALL_OW 250
66453: PPUSH
66454: LD_VAR 0 10
66458: PPUSH
66459: LD_VAR 0 5
66463: PPUSH
66464: CALL_OW 272
66468: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
66469: LD_ADDR_VAR 0 9
66473: PUSH
66474: LD_VAR 0 1
66478: PPUSH
66479: CALL_OW 251
66483: PPUSH
66484: LD_VAR 0 10
66488: PPUSH
66489: LD_VAR 0 5
66493: PPUSH
66494: CALL_OW 273
66498: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66499: LD_VAR 0 8
66503: PPUSH
66504: LD_VAR 0 9
66508: PPUSH
66509: CALL_OW 488
66513: NOT
66514: IFFALSE 66518
// exit ;
66516: GO 66625
// ComAnimCustom ( unit , 1 ) ;
66518: LD_VAR 0 1
66522: PPUSH
66523: LD_INT 1
66525: PPUSH
66526: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
66530: LD_VAR 0 8
66534: PPUSH
66535: LD_VAR 0 9
66539: PPUSH
66540: LD_VAR 0 6
66544: PPUSH
66545: LD_VAR 0 7
66549: PPUSH
66550: CALL_OW 330
// repeat wait ( 1 ) ;
66554: LD_INT 1
66556: PPUSH
66557: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
66561: LD_VAR 0 1
66565: PPUSH
66566: CALL_OW 316
66570: PUSH
66571: LD_VAR 0 1
66575: PPUSH
66576: CALL_OW 314
66580: OR
66581: PUSH
66582: LD_VAR 0 1
66586: PPUSH
66587: CALL_OW 302
66591: NOT
66592: OR
66593: PUSH
66594: LD_VAR 0 1
66598: PPUSH
66599: CALL_OW 301
66603: OR
66604: IFFALSE 66554
// RemoveSeeing ( _x , _y , side ) ;
66606: LD_VAR 0 8
66610: PPUSH
66611: LD_VAR 0 9
66615: PPUSH
66616: LD_VAR 0 6
66620: PPUSH
66621: CALL_OW 331
// end ;
66625: LD_VAR 0 4
66629: RET
