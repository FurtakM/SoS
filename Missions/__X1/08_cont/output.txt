// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareArabian ;
   8: CALL 41 0 0
// Action ;
  12: CALL 982 0 0
// end ;
  16: END
// export debug , prefix ; function Init ; begin
  17: LD_INT 0
  19: PPUSH
// debug := true ;
  20: LD_ADDR_EXP 1
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// prefix := 07_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 07_
  35: ST_TO_ADDR
// end ; end_of_file
  36: LD_VAR 0 1
  40: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareArabian ; var i , tmp , un , veh ; begin
  41: LD_INT 0
  43: PPUSH
  44: PPUSH
  45: PPUSH
  46: PPUSH
  47: PPUSH
// uc_side := 4 ;
  48: LD_ADDR_OWVAR 20
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// uc_nation := 1 ;
  56: LD_ADDR_OWVAR 21
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
  64: LD_ADDR_EXP 15
  68: PUSH
  69: LD_STRING 07_Americans
  71: PPUSH
  72: CALL_OW 31
  76: ST_TO_ADDR
// if americanSquad < 5 then
  77: LD_EXP 15
  81: PUSH
  82: LD_INT 5
  84: LESS
  85: IFFALSE 142
// begin for i := americanSquad to 5 do
  87: LD_ADDR_VAR 0 2
  91: PUSH
  92: DOUBLE
  93: LD_EXP 15
  97: DEC
  98: ST_TO_ADDR
  99: LD_INT 5
 101: PUSH
 102: FOR_TO
 103: IFFALSE 140
// begin PrepareHuman ( false , 2 , 6 ) ;
 105: LD_INT 0
 107: PPUSH
 108: LD_INT 2
 110: PPUSH
 111: LD_INT 6
 113: PPUSH
 114: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 118: LD_ADDR_EXP 15
 122: PUSH
 123: LD_EXP 15
 127: PPUSH
 128: CALL_OW 44
 132: PPUSH
 133: CALL 37887 0 2
 137: ST_TO_ADDR
// end ;
 138: GO 102
 140: POP
 141: POP
// end ; for i in americanSquad do
 142: LD_ADDR_VAR 0 2
 146: PUSH
 147: LD_EXP 15
 151: PUSH
 152: FOR_IN
 153: IFFALSE 220
// begin SetClass ( i , 2 ) ;
 155: LD_VAR 0 2
 159: PPUSH
 160: LD_INT 2
 162: PPUSH
 163: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
 167: LD_VAR 0 2
 171: PPUSH
 172: LD_INT 78
 174: PPUSH
 175: LD_INT 16
 177: PPUSH
 178: LD_INT 5
 180: PPUSH
 181: LD_INT 0
 183: PPUSH
 184: CALL_OW 50
// ComHold ( i ) ;
 188: LD_VAR 0 2
 192: PPUSH
 193: CALL_OW 140
// if Prob ( 60 ) then
 197: LD_INT 60
 199: PPUSH
 200: CALL_OW 13
 204: IFFALSE 218
// ForceSleep ( i , true ) ;
 206: LD_VAR 0 2
 210: PPUSH
 211: LD_INT 1
 213: PPUSH
 214: CALL_OW 585
// end ;
 218: GO 152
 220: POP
 221: POP
// uc_side := 2 ;
 222: LD_ADDR_OWVAR 20
 226: PUSH
 227: LD_INT 2
 229: ST_TO_ADDR
// uc_nation := 2 ;
 230: LD_ADDR_OWVAR 21
 234: PUSH
 235: LD_INT 2
 237: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 238: LD_ADDR_EXP 3
 242: PUSH
 243: LD_STRING Heike
 245: PPUSH
 246: LD_EXP 1
 250: NOT
 251: PPUSH
 252: LD_EXP 2
 256: PPUSH
 257: CALL 1053 0 3
 261: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 262: LD_ADDR_EXP 6
 266: PUSH
 267: LD_STRING Ibrahim
 269: PPUSH
 270: LD_EXP 1
 274: NOT
 275: PPUSH
 276: LD_EXP 2
 280: PPUSH
 281: CALL 1053 0 3
 285: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 286: LD_ADDR_EXP 4
 290: PUSH
 291: LD_STRING Givi
 293: PPUSH
 294: LD_EXP 1
 298: NOT
 299: PPUSH
 300: LD_EXP 2
 304: PPUSH
 305: CALL 1053 0 3
 309: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 310: LD_ADDR_EXP 7
 314: PUSH
 315: LD_STRING Kamil
 317: PPUSH
 318: LD_EXP 1
 322: NOT
 323: PPUSH
 324: LD_EXP 2
 328: PPUSH
 329: CALL 1053 0 3
 333: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 334: LD_ADDR_EXP 8
 338: PUSH
 339: LD_STRING Kaia
 341: PPUSH
 342: LD_EXP 1
 346: NOT
 347: PPUSH
 348: LD_EXP 2
 352: PPUSH
 353: CALL 1053 0 3
 357: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 358: LD_ADDR_EXP 9
 362: PUSH
 363: LD_STRING Sophia
 365: PPUSH
 366: LD_EXP 1
 370: NOT
 371: PPUSH
 372: LD_EXP 2
 376: PPUSH
 377: CALL 1053 0 3
 381: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 382: LD_ADDR_EXP 10
 386: PUSH
 387: LD_STRING Markov
 389: PPUSH
 390: LD_EXP 1
 394: NOT
 395: PPUSH
 396: LD_EXP 2
 400: PPUSH
 401: CALL 1053 0 3
 405: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 406: LD_ADDR_EXP 13
 410: PUSH
 411: LD_STRING Aviradze
 413: PPUSH
 414: LD_EXP 1
 418: NOT
 419: PPUSH
 420: LD_EXP 2
 424: PPUSH
 425: CALL 1053 0 3
 429: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 430: LD_ADDR_EXP 12
 434: PUSH
 435: LD_STRING Kurt
 437: PPUSH
 438: LD_EXP 1
 442: NOT
 443: PPUSH
 444: LD_EXP 2
 448: PPUSH
 449: CALL 1053 0 3
 453: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 454: LD_ADDR_EXP 5
 458: PUSH
 459: LD_STRING Mike
 461: PPUSH
 462: LD_EXP 1
 466: NOT
 467: PPUSH
 468: LD_EXP 2
 472: PPUSH
 473: CALL 1053 0 3
 477: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 478: LD_ADDR_EXP 11
 482: PUSH
 483: LD_STRING Olaf
 485: PPUSH
 486: LD_INT 0
 488: PPUSH
 489: LD_STRING 
 491: PPUSH
 492: CALL 1053 0 3
 496: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 497: LD_ADDR_EXP 14
 501: PUSH
 502: LD_STRING 07_others
 504: PPUSH
 505: CALL_OW 31
 509: ST_TO_ADDR
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
 510: LD_ADDR_VAR 0 3
 514: PUSH
 515: LD_EXP 5
 519: PUSH
 520: LD_EXP 6
 524: PUSH
 525: LD_EXP 7
 529: PUSH
 530: LD_EXP 8
 534: PUSH
 535: LD_EXP 9
 539: PUSH
 540: LD_EXP 10
 544: PUSH
 545: LD_EXP 11
 549: PUSH
 550: LD_EXP 12
 554: PUSH
 555: LD_EXP 13
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: LIST
 566: LIST
 567: LIST
 568: LIST
 569: LIST
 570: PUSH
 571: LD_EXP 14
 575: UNION
 576: ST_TO_ADDR
// end ; end_of_file
 577: LD_VAR 0 1
 581: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
 582: LD_INT 0
 584: PPUSH
 585: PPUSH
 586: PPUSH
 587: PPUSH
// uc_side := 3 ;
 588: LD_ADDR_OWVAR 20
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
 596: LD_ADDR_OWVAR 21
 600: PUSH
 601: LD_INT 1
 603: PPUSH
 604: LD_INT 3
 606: PPUSH
 607: CALL_OW 12
 611: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
 612: LD_ADDR_VAR 0 4
 616: PUSH
 617: LD_INT 5
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL_OW 517
 627: ST_TO_ADDR
// for i := 1 to 3 do
 628: LD_ADDR_VAR 0 2
 632: PUSH
 633: DOUBLE
 634: LD_INT 1
 636: DEC
 637: ST_TO_ADDR
 638: LD_INT 3
 640: PUSH
 641: FOR_TO
 642: IFFALSE 711
// begin PrepareHuman ( false , 2 , 0 ) ;
 644: LD_INT 0
 646: PPUSH
 647: LD_INT 2
 649: PPUSH
 650: LD_INT 0
 652: PPUSH
 653: CALL_OW 380
// un := CreateHuman ;
 657: LD_ADDR_VAR 0 3
 661: PUSH
 662: CALL_OW 44
 666: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
 667: LD_VAR 0 3
 671: PPUSH
 672: LD_VAR 0 4
 676: PUSH
 677: LD_INT 1
 679: ARRAY
 680: PUSH
 681: LD_VAR 0 2
 685: ARRAY
 686: PPUSH
 687: LD_VAR 0 4
 691: PUSH
 692: LD_INT 2
 694: ARRAY
 695: PUSH
 696: LD_VAR 0 2
 700: ARRAY
 701: PPUSH
 702: LD_INT 1
 704: PPUSH
 705: CALL_OW 601
// end ;
 709: GO 641
 711: POP
 712: POP
// end ;
 713: LD_VAR 0 1
 717: RET
// export function PrepareFirstScene ; var i , un ; begin
 718: LD_INT 0
 720: PPUSH
 721: PPUSH
 722: PPUSH
// uc_side := 4 ;
 723: LD_ADDR_OWVAR 20
 727: PUSH
 728: LD_INT 4
 730: ST_TO_ADDR
// uc_nation := 1 ;
 731: LD_ADDR_OWVAR 21
 735: PUSH
 736: LD_INT 1
 738: ST_TO_ADDR
// PrepareEngineer ( false , 2 ) ;
 739: LD_INT 0
 741: PPUSH
 742: LD_INT 2
 744: PPUSH
 745: CALL_OW 382
// for i := 1 to 2 do
 749: LD_ADDR_VAR 0 2
 753: PUSH
 754: DOUBLE
 755: LD_INT 1
 757: DEC
 758: ST_TO_ADDR
 759: LD_INT 2
 761: PUSH
 762: FOR_TO
 763: IFFALSE 828
// begin un := CreateHuman ;
 765: LD_ADDR_VAR 0 3
 769: PUSH
 770: CALL_OW 44
 774: ST_TO_ADDR
// SetDir ( un , 1 ) ;
 775: LD_VAR 0 3
 779: PPUSH
 780: LD_INT 1
 782: PPUSH
 783: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
 787: LD_VAR 0 3
 791: PPUSH
 792: LD_INT 6
 794: PPUSH
 795: LD_INT 0
 797: PPUSH
 798: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
 802: LD_VAR 0 3
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: CALL 41033 0 2
// SetLives ( un , 251 ) ;
 814: LD_VAR 0 3
 818: PPUSH
 819: LD_INT 251
 821: PPUSH
 822: CALL_OW 234
// end ;
 826: GO 762
 828: POP
 829: POP
// uc_side := 3 ;
 830: LD_ADDR_OWVAR 20
 834: PUSH
 835: LD_INT 3
 837: ST_TO_ADDR
// uc_nation := 3 ;
 838: LD_ADDR_OWVAR 21
 842: PUSH
 843: LD_INT 3
 845: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
 846: LD_INT 1
 848: PPUSH
 849: LD_INT 5
 851: PPUSH
 852: CALL_OW 381
// for i := 1 to 3 do
 856: LD_ADDR_VAR 0 2
 860: PUSH
 861: DOUBLE
 862: LD_INT 1
 864: DEC
 865: ST_TO_ADDR
 866: LD_INT 3
 868: PUSH
 869: FOR_TO
 870: IFFALSE 923
// begin un := CreateHuman ;
 872: LD_ADDR_VAR 0 3
 876: PUSH
 877: CALL_OW 44
 881: ST_TO_ADDR
// SetDir ( un , 4 ) ;
 882: LD_VAR 0 3
 886: PPUSH
 887: LD_INT 4
 889: PPUSH
 890: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 7
 901: PPUSH
 902: LD_INT 0
 904: PPUSH
 905: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
 909: LD_VAR 0 3
 913: PPUSH
 914: LD_INT 4
 916: PPUSH
 917: CALL 41033 0 2
// end ;
 921: GO 869
 923: POP
 924: POP
// un := CreateHuman ;
 925: LD_ADDR_VAR 0 3
 929: PUSH
 930: CALL_OW 44
 934: ST_TO_ADDR
// PlaceUnitXY ( un , 124 , 37 , false ) ;
 935: LD_VAR 0 3
 939: PPUSH
 940: LD_INT 124
 942: PPUSH
 943: LD_INT 37
 945: PPUSH
 946: LD_INT 0
 948: PPUSH
 949: CALL_OW 48
// SetDir ( un , 3 ) ;
 953: LD_VAR 0 3
 957: PPUSH
 958: LD_INT 3
 960: PPUSH
 961: CALL_OW 233
// ComLookAtDir ( un , 3 ) ;
 965: LD_VAR 0 3
 969: PPUSH
 970: LD_INT 3
 972: PPUSH
 973: CALL 41033 0 2
// end ; end_of_file
 977: LD_VAR 0 1
 981: RET
// export function Action ; begin
 982: LD_INT 0
 984: PPUSH
// InGameOn ;
 985: CALL_OW 8
// PrepareDeadBodies ;
 989: CALL 582 0 0
// PrepareFirstScene ;
 993: CALL 718 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 90 ) ;
 997: LD_INT 152
 999: PPUSH
1000: LD_INT 65
1002: PPUSH
1003: LD_INT 2
1005: PPUSH
1006: LD_INT 90
1008: NEG
1009: PPUSH
1010: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
1014: LD_INT 152
1016: PPUSH
1017: LD_INT 65
1019: PPUSH
1020: LD_INT 2
1022: PPUSH
1023: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
1027: LD_INT 122
1029: PPUSH
1030: LD_INT 40
1032: PPUSH
1033: LD_INT 2
1035: PPUSH
1036: LD_INT 8
1038: NEG
1039: PPUSH
1040: CALL_OW 330
// InGameOff ;
1044: CALL_OW 9
// end ; end_of_file
1048: LD_VAR 0 1
1052: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1053: LD_INT 0
1055: PPUSH
1056: PPUSH
// if exist_mode then
1057: LD_VAR 0 2
1061: IFFALSE 1086
// unit := CreateCharacter ( prefix & ident ) else
1063: LD_ADDR_VAR 0 5
1067: PUSH
1068: LD_VAR 0 3
1072: PUSH
1073: LD_VAR 0 1
1077: STR
1078: PPUSH
1079: CALL_OW 34
1083: ST_TO_ADDR
1084: GO 1101
// unit := NewCharacter ( ident ) ;
1086: LD_ADDR_VAR 0 5
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: CALL_OW 25
1100: ST_TO_ADDR
// result := unit ;
1101: LD_ADDR_VAR 0 4
1105: PUSH
1106: LD_VAR 0 5
1110: ST_TO_ADDR
// end ;
1111: LD_VAR 0 4
1115: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1116: LD_INT 0
1118: PPUSH
1119: PPUSH
// if not side or not nation then
1120: LD_VAR 0 1
1124: NOT
1125: PUSH
1126: LD_VAR 0 2
1130: NOT
1131: OR
1132: IFFALSE 1136
// exit ;
1134: GO 1904
// case nation of nation_american :
1136: LD_VAR 0 2
1140: PUSH
1141: LD_INT 1
1143: DOUBLE
1144: EQUAL
1145: IFTRUE 1149
1147: GO 1363
1149: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1150: LD_ADDR_VAR 0 4
1154: PUSH
1155: LD_INT 35
1157: PUSH
1158: LD_INT 45
1160: PUSH
1161: LD_INT 46
1163: PUSH
1164: LD_INT 47
1166: PUSH
1167: LD_INT 82
1169: PUSH
1170: LD_INT 83
1172: PUSH
1173: LD_INT 84
1175: PUSH
1176: LD_INT 85
1178: PUSH
1179: LD_INT 86
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: LD_INT 2
1187: PUSH
1188: LD_INT 6
1190: PUSH
1191: LD_INT 15
1193: PUSH
1194: LD_INT 16
1196: PUSH
1197: LD_INT 7
1199: PUSH
1200: LD_INT 12
1202: PUSH
1203: LD_INT 13
1205: PUSH
1206: LD_INT 10
1208: PUSH
1209: LD_INT 14
1211: PUSH
1212: LD_INT 20
1214: PUSH
1215: LD_INT 21
1217: PUSH
1218: LD_INT 22
1220: PUSH
1221: LD_INT 25
1223: PUSH
1224: LD_INT 32
1226: PUSH
1227: LD_INT 27
1229: PUSH
1230: LD_INT 36
1232: PUSH
1233: LD_INT 69
1235: PUSH
1236: LD_INT 39
1238: PUSH
1239: LD_INT 34
1241: PUSH
1242: LD_INT 40
1244: PUSH
1245: LD_INT 48
1247: PUSH
1248: LD_INT 49
1250: PUSH
1251: LD_INT 50
1253: PUSH
1254: LD_INT 51
1256: PUSH
1257: LD_INT 52
1259: PUSH
1260: LD_INT 53
1262: PUSH
1263: LD_INT 54
1265: PUSH
1266: LD_INT 55
1268: PUSH
1269: LD_INT 56
1271: PUSH
1272: LD_INT 57
1274: PUSH
1275: LD_INT 58
1277: PUSH
1278: LD_INT 59
1280: PUSH
1281: LD_INT 60
1283: PUSH
1284: LD_INT 61
1286: PUSH
1287: LD_INT 62
1289: PUSH
1290: LD_INT 80
1292: PUSH
1293: LD_INT 82
1295: PUSH
1296: LD_INT 83
1298: PUSH
1299: LD_INT 84
1301: PUSH
1302: LD_INT 85
1304: PUSH
1305: LD_INT 86
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: ST_TO_ADDR
1361: GO 1828
1363: LD_INT 2
1365: DOUBLE
1366: EQUAL
1367: IFTRUE 1371
1369: GO 1597
1371: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1372: LD_ADDR_VAR 0 4
1376: PUSH
1377: LD_INT 35
1379: PUSH
1380: LD_INT 45
1382: PUSH
1383: LD_INT 46
1385: PUSH
1386: LD_INT 47
1388: PUSH
1389: LD_INT 82
1391: PUSH
1392: LD_INT 83
1394: PUSH
1395: LD_INT 84
1397: PUSH
1398: LD_INT 85
1400: PUSH
1401: LD_INT 87
1403: PUSH
1404: LD_INT 70
1406: PUSH
1407: LD_INT 1
1409: PUSH
1410: LD_INT 11
1412: PUSH
1413: LD_INT 3
1415: PUSH
1416: LD_INT 4
1418: PUSH
1419: LD_INT 5
1421: PUSH
1422: LD_INT 6
1424: PUSH
1425: LD_INT 15
1427: PUSH
1428: LD_INT 18
1430: PUSH
1431: LD_INT 7
1433: PUSH
1434: LD_INT 17
1436: PUSH
1437: LD_INT 8
1439: PUSH
1440: LD_INT 20
1442: PUSH
1443: LD_INT 21
1445: PUSH
1446: LD_INT 22
1448: PUSH
1449: LD_INT 72
1451: PUSH
1452: LD_INT 26
1454: PUSH
1455: LD_INT 69
1457: PUSH
1458: LD_INT 39
1460: PUSH
1461: LD_INT 40
1463: PUSH
1464: LD_INT 41
1466: PUSH
1467: LD_INT 42
1469: PUSH
1470: LD_INT 43
1472: PUSH
1473: LD_INT 48
1475: PUSH
1476: LD_INT 49
1478: PUSH
1479: LD_INT 50
1481: PUSH
1482: LD_INT 51
1484: PUSH
1485: LD_INT 52
1487: PUSH
1488: LD_INT 53
1490: PUSH
1491: LD_INT 54
1493: PUSH
1494: LD_INT 55
1496: PUSH
1497: LD_INT 56
1499: PUSH
1500: LD_INT 60
1502: PUSH
1503: LD_INT 61
1505: PUSH
1506: LD_INT 62
1508: PUSH
1509: LD_INT 66
1511: PUSH
1512: LD_INT 67
1514: PUSH
1515: LD_INT 68
1517: PUSH
1518: LD_INT 81
1520: PUSH
1521: LD_INT 82
1523: PUSH
1524: LD_INT 83
1526: PUSH
1527: LD_INT 84
1529: PUSH
1530: LD_INT 85
1532: PUSH
1533: LD_INT 87
1535: PUSH
1536: LD_INT 88
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: ST_TO_ADDR
1595: GO 1828
1597: LD_INT 3
1599: DOUBLE
1600: EQUAL
1601: IFTRUE 1605
1603: GO 1827
1605: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1606: LD_ADDR_VAR 0 4
1610: PUSH
1611: LD_INT 46
1613: PUSH
1614: LD_INT 47
1616: PUSH
1617: LD_INT 1
1619: PUSH
1620: LD_INT 2
1622: PUSH
1623: LD_INT 82
1625: PUSH
1626: LD_INT 83
1628: PUSH
1629: LD_INT 84
1631: PUSH
1632: LD_INT 85
1634: PUSH
1635: LD_INT 86
1637: PUSH
1638: LD_INT 11
1640: PUSH
1641: LD_INT 9
1643: PUSH
1644: LD_INT 20
1646: PUSH
1647: LD_INT 19
1649: PUSH
1650: LD_INT 21
1652: PUSH
1653: LD_INT 24
1655: PUSH
1656: LD_INT 22
1658: PUSH
1659: LD_INT 25
1661: PUSH
1662: LD_INT 28
1664: PUSH
1665: LD_INT 29
1667: PUSH
1668: LD_INT 30
1670: PUSH
1671: LD_INT 31
1673: PUSH
1674: LD_INT 37
1676: PUSH
1677: LD_INT 38
1679: PUSH
1680: LD_INT 32
1682: PUSH
1683: LD_INT 27
1685: PUSH
1686: LD_INT 33
1688: PUSH
1689: LD_INT 69
1691: PUSH
1692: LD_INT 39
1694: PUSH
1695: LD_INT 34
1697: PUSH
1698: LD_INT 40
1700: PUSH
1701: LD_INT 71
1703: PUSH
1704: LD_INT 23
1706: PUSH
1707: LD_INT 44
1709: PUSH
1710: LD_INT 48
1712: PUSH
1713: LD_INT 49
1715: PUSH
1716: LD_INT 50
1718: PUSH
1719: LD_INT 51
1721: PUSH
1722: LD_INT 52
1724: PUSH
1725: LD_INT 53
1727: PUSH
1728: LD_INT 54
1730: PUSH
1731: LD_INT 55
1733: PUSH
1734: LD_INT 56
1736: PUSH
1737: LD_INT 57
1739: PUSH
1740: LD_INT 58
1742: PUSH
1743: LD_INT 59
1745: PUSH
1746: LD_INT 63
1748: PUSH
1749: LD_INT 64
1751: PUSH
1752: LD_INT 65
1754: PUSH
1755: LD_INT 82
1757: PUSH
1758: LD_INT 83
1760: PUSH
1761: LD_INT 84
1763: PUSH
1764: LD_INT 85
1766: PUSH
1767: LD_INT 86
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: ST_TO_ADDR
1825: GO 1828
1827: POP
// if state > - 1 and state < 3 then
1828: LD_VAR 0 3
1832: PUSH
1833: LD_INT 1
1835: NEG
1836: GREATER
1837: PUSH
1838: LD_VAR 0 3
1842: PUSH
1843: LD_INT 3
1845: LESS
1846: AND
1847: IFFALSE 1904
// for i in result do
1849: LD_ADDR_VAR 0 5
1853: PUSH
1854: LD_VAR 0 4
1858: PUSH
1859: FOR_IN
1860: IFFALSE 1902
// if GetTech ( i , side ) <> state then
1862: LD_VAR 0 5
1866: PPUSH
1867: LD_VAR 0 1
1871: PPUSH
1872: CALL_OW 321
1876: PUSH
1877: LD_VAR 0 3
1881: NONEQUAL
1882: IFFALSE 1900
// result := result diff i ;
1884: LD_ADDR_VAR 0 4
1888: PUSH
1889: LD_VAR 0 4
1893: PUSH
1894: LD_VAR 0 5
1898: DIFF
1899: ST_TO_ADDR
1900: GO 1859
1902: POP
1903: POP
// end ;
1904: LD_VAR 0 4
1908: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1909: LD_INT 0
1911: PPUSH
1912: PPUSH
1913: PPUSH
// result := true ;
1914: LD_ADDR_VAR 0 3
1918: PUSH
1919: LD_INT 1
1921: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1922: LD_ADDR_VAR 0 5
1926: PUSH
1927: LD_VAR 0 2
1931: PPUSH
1932: CALL_OW 480
1936: ST_TO_ADDR
// if not tmp then
1937: LD_VAR 0 5
1941: NOT
1942: IFFALSE 1946
// exit ;
1944: GO 1995
// for i in tmp do
1946: LD_ADDR_VAR 0 4
1950: PUSH
1951: LD_VAR 0 5
1955: PUSH
1956: FOR_IN
1957: IFFALSE 1993
// if GetTech ( i , side ) <> state_researched then
1959: LD_VAR 0 4
1963: PPUSH
1964: LD_VAR 0 1
1968: PPUSH
1969: CALL_OW 321
1973: PUSH
1974: LD_INT 2
1976: NONEQUAL
1977: IFFALSE 1991
// begin result := false ;
1979: LD_ADDR_VAR 0 3
1983: PUSH
1984: LD_INT 0
1986: ST_TO_ADDR
// exit ;
1987: POP
1988: POP
1989: GO 1995
// end ;
1991: GO 1956
1993: POP
1994: POP
// end ;
1995: LD_VAR 0 3
1999: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2000: LD_INT 0
2002: PPUSH
2003: PPUSH
2004: PPUSH
2005: PPUSH
2006: PPUSH
2007: PPUSH
2008: PPUSH
2009: PPUSH
2010: PPUSH
2011: PPUSH
2012: PPUSH
2013: PPUSH
2014: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2015: LD_VAR 0 1
2019: NOT
2020: PUSH
2021: LD_VAR 0 1
2025: PPUSH
2026: CALL_OW 257
2030: PUSH
2031: LD_INT 9
2033: NONEQUAL
2034: OR
2035: IFFALSE 2039
// exit ;
2037: GO 2612
// side := GetSide ( unit ) ;
2039: LD_ADDR_VAR 0 9
2043: PUSH
2044: LD_VAR 0 1
2048: PPUSH
2049: CALL_OW 255
2053: ST_TO_ADDR
// tech_space := tech_spacanom ;
2054: LD_ADDR_VAR 0 12
2058: PUSH
2059: LD_INT 29
2061: ST_TO_ADDR
// tech_time := tech_taurad ;
2062: LD_ADDR_VAR 0 13
2066: PUSH
2067: LD_INT 28
2069: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2070: LD_ADDR_VAR 0 11
2074: PUSH
2075: LD_VAR 0 1
2079: PPUSH
2080: CALL_OW 310
2084: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2085: LD_VAR 0 11
2089: PPUSH
2090: CALL_OW 247
2094: PUSH
2095: LD_INT 2
2097: EQUAL
2098: IFFALSE 2102
// exit ;
2100: GO 2612
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2102: LD_ADDR_VAR 0 8
2106: PUSH
2107: LD_INT 81
2109: PUSH
2110: LD_VAR 0 9
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 3
2121: PUSH
2122: LD_INT 21
2124: PUSH
2125: LD_INT 3
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PPUSH
2140: CALL_OW 69
2144: ST_TO_ADDR
// if not tmp then
2145: LD_VAR 0 8
2149: NOT
2150: IFFALSE 2154
// exit ;
2152: GO 2612
// if in_unit then
2154: LD_VAR 0 11
2158: IFFALSE 2182
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2160: LD_ADDR_VAR 0 10
2164: PUSH
2165: LD_VAR 0 8
2169: PPUSH
2170: LD_VAR 0 11
2174: PPUSH
2175: CALL_OW 74
2179: ST_TO_ADDR
2180: GO 2202
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2182: LD_ADDR_VAR 0 10
2186: PUSH
2187: LD_VAR 0 8
2191: PPUSH
2192: LD_VAR 0 1
2196: PPUSH
2197: CALL_OW 74
2201: ST_TO_ADDR
// if not enemy then
2202: LD_VAR 0 10
2206: NOT
2207: IFFALSE 2211
// exit ;
2209: GO 2612
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2211: LD_VAR 0 11
2215: PUSH
2216: LD_VAR 0 11
2220: PPUSH
2221: LD_VAR 0 10
2225: PPUSH
2226: CALL_OW 296
2230: PUSH
2231: LD_INT 13
2233: GREATER
2234: AND
2235: PUSH
2236: LD_VAR 0 1
2240: PPUSH
2241: LD_VAR 0 10
2245: PPUSH
2246: CALL_OW 296
2250: PUSH
2251: LD_INT 12
2253: GREATER
2254: OR
2255: IFFALSE 2259
// exit ;
2257: GO 2612
// missile := [ 1 ] ;
2259: LD_ADDR_VAR 0 14
2263: PUSH
2264: LD_INT 1
2266: PUSH
2267: EMPTY
2268: LIST
2269: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2270: LD_VAR 0 9
2274: PPUSH
2275: LD_VAR 0 12
2279: PPUSH
2280: CALL_OW 325
2284: IFFALSE 2313
// missile := Replace ( missile , missile + 1 , 2 ) ;
2286: LD_ADDR_VAR 0 14
2290: PUSH
2291: LD_VAR 0 14
2295: PPUSH
2296: LD_VAR 0 14
2300: PUSH
2301: LD_INT 1
2303: PLUS
2304: PPUSH
2305: LD_INT 2
2307: PPUSH
2308: CALL_OW 1
2312: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2313: LD_VAR 0 9
2317: PPUSH
2318: LD_VAR 0 13
2322: PPUSH
2323: CALL_OW 325
2327: PUSH
2328: LD_VAR 0 10
2332: PPUSH
2333: CALL_OW 255
2337: PPUSH
2338: LD_VAR 0 13
2342: PPUSH
2343: CALL_OW 325
2347: NOT
2348: AND
2349: IFFALSE 2378
// missile := Replace ( missile , missile + 1 , 3 ) ;
2351: LD_ADDR_VAR 0 14
2355: PUSH
2356: LD_VAR 0 14
2360: PPUSH
2361: LD_VAR 0 14
2365: PUSH
2366: LD_INT 1
2368: PLUS
2369: PPUSH
2370: LD_INT 3
2372: PPUSH
2373: CALL_OW 1
2377: ST_TO_ADDR
// if missile < 2 then
2378: LD_VAR 0 14
2382: PUSH
2383: LD_INT 2
2385: LESS
2386: IFFALSE 2390
// exit ;
2388: GO 2612
// x := GetX ( enemy ) ;
2390: LD_ADDR_VAR 0 4
2394: PUSH
2395: LD_VAR 0 10
2399: PPUSH
2400: CALL_OW 250
2404: ST_TO_ADDR
// y := GetY ( enemy ) ;
2405: LD_ADDR_VAR 0 5
2409: PUSH
2410: LD_VAR 0 10
2414: PPUSH
2415: CALL_OW 251
2419: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2420: LD_ADDR_VAR 0 6
2424: PUSH
2425: LD_VAR 0 4
2429: PUSH
2430: LD_INT 1
2432: NEG
2433: PPUSH
2434: LD_INT 1
2436: PPUSH
2437: CALL_OW 12
2441: PLUS
2442: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2443: LD_ADDR_VAR 0 7
2447: PUSH
2448: LD_VAR 0 5
2452: PUSH
2453: LD_INT 1
2455: NEG
2456: PPUSH
2457: LD_INT 1
2459: PPUSH
2460: CALL_OW 12
2464: PLUS
2465: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2466: LD_VAR 0 6
2470: PPUSH
2471: LD_VAR 0 7
2475: PPUSH
2476: CALL_OW 488
2480: NOT
2481: IFFALSE 2503
// begin _x := x ;
2483: LD_ADDR_VAR 0 6
2487: PUSH
2488: LD_VAR 0 4
2492: ST_TO_ADDR
// _y := y ;
2493: LD_ADDR_VAR 0 7
2497: PUSH
2498: LD_VAR 0 5
2502: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: LD_INT 1
2510: PPUSH
2511: LD_VAR 0 14
2515: PPUSH
2516: CALL_OW 12
2520: ST_TO_ADDR
// case i of 1 :
2521: LD_VAR 0 3
2525: PUSH
2526: LD_INT 1
2528: DOUBLE
2529: EQUAL
2530: IFTRUE 2534
2532: GO 2551
2534: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2535: LD_VAR 0 1
2539: PPUSH
2540: LD_VAR 0 10
2544: PPUSH
2545: CALL_OW 115
2549: GO 2612
2551: LD_INT 2
2553: DOUBLE
2554: EQUAL
2555: IFTRUE 2559
2557: GO 2581
2559: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2560: LD_VAR 0 1
2564: PPUSH
2565: LD_VAR 0 6
2569: PPUSH
2570: LD_VAR 0 7
2574: PPUSH
2575: CALL_OW 153
2579: GO 2612
2581: LD_INT 3
2583: DOUBLE
2584: EQUAL
2585: IFTRUE 2589
2587: GO 2611
2589: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2590: LD_VAR 0 1
2594: PPUSH
2595: LD_VAR 0 6
2599: PPUSH
2600: LD_VAR 0 7
2604: PPUSH
2605: CALL_OW 154
2609: GO 2612
2611: POP
// end ;
2612: LD_VAR 0 2
2616: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2617: LD_INT 0
2619: PPUSH
2620: PPUSH
2621: PPUSH
2622: PPUSH
2623: PPUSH
2624: PPUSH
// if not unit or not building then
2625: LD_VAR 0 1
2629: NOT
2630: PUSH
2631: LD_VAR 0 2
2635: NOT
2636: OR
2637: IFFALSE 2641
// exit ;
2639: GO 2799
// x := GetX ( building ) ;
2641: LD_ADDR_VAR 0 5
2645: PUSH
2646: LD_VAR 0 2
2650: PPUSH
2651: CALL_OW 250
2655: ST_TO_ADDR
// y := GetY ( building ) ;
2656: LD_ADDR_VAR 0 6
2660: PUSH
2661: LD_VAR 0 2
2665: PPUSH
2666: CALL_OW 251
2670: ST_TO_ADDR
// for i = 0 to 5 do
2671: LD_ADDR_VAR 0 4
2675: PUSH
2676: DOUBLE
2677: LD_INT 0
2679: DEC
2680: ST_TO_ADDR
2681: LD_INT 5
2683: PUSH
2684: FOR_TO
2685: IFFALSE 2797
// begin _x := ShiftX ( x , i , 3 ) ;
2687: LD_ADDR_VAR 0 7
2691: PUSH
2692: LD_VAR 0 5
2696: PPUSH
2697: LD_VAR 0 4
2701: PPUSH
2702: LD_INT 3
2704: PPUSH
2705: CALL_OW 272
2709: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2710: LD_ADDR_VAR 0 8
2714: PUSH
2715: LD_VAR 0 6
2719: PPUSH
2720: LD_VAR 0 4
2724: PPUSH
2725: LD_INT 3
2727: PPUSH
2728: CALL_OW 273
2732: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2733: LD_VAR 0 7
2737: PPUSH
2738: LD_VAR 0 8
2742: PPUSH
2743: CALL_OW 488
2747: NOT
2748: IFFALSE 2752
// continue ;
2750: GO 2684
// if HexInfo ( _x , _y ) = 0 then
2752: LD_VAR 0 7
2756: PPUSH
2757: LD_VAR 0 8
2761: PPUSH
2762: CALL_OW 428
2766: PUSH
2767: LD_INT 0
2769: EQUAL
2770: IFFALSE 2795
// begin ComMoveXY ( unit , _x , _y ) ;
2772: LD_VAR 0 1
2776: PPUSH
2777: LD_VAR 0 7
2781: PPUSH
2782: LD_VAR 0 8
2786: PPUSH
2787: CALL_OW 111
// exit ;
2791: POP
2792: POP
2793: GO 2799
// end ; end ;
2795: GO 2684
2797: POP
2798: POP
// end ;
2799: LD_VAR 0 3
2803: RET
// export function ScanBase ( side , base_area ) ; begin
2804: LD_INT 0
2806: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2807: LD_ADDR_VAR 0 3
2811: PUSH
2812: LD_VAR 0 2
2816: PPUSH
2817: LD_INT 81
2819: PUSH
2820: LD_VAR 0 1
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PPUSH
2829: CALL_OW 70
2833: ST_TO_ADDR
// end ;
2834: LD_VAR 0 3
2838: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2839: LD_INT 0
2841: PPUSH
2842: PPUSH
2843: PPUSH
2844: PPUSH
// result := false ;
2845: LD_ADDR_VAR 0 2
2849: PUSH
2850: LD_INT 0
2852: ST_TO_ADDR
// side := GetSide ( unit ) ;
2853: LD_ADDR_VAR 0 3
2857: PUSH
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL_OW 255
2867: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2868: LD_ADDR_VAR 0 4
2872: PUSH
2873: LD_VAR 0 1
2877: PPUSH
2878: CALL_OW 248
2882: ST_TO_ADDR
// case nat of 1 :
2883: LD_VAR 0 4
2887: PUSH
2888: LD_INT 1
2890: DOUBLE
2891: EQUAL
2892: IFTRUE 2896
2894: GO 2907
2896: POP
// tech := tech_lassight ; 2 :
2897: LD_ADDR_VAR 0 5
2901: PUSH
2902: LD_INT 12
2904: ST_TO_ADDR
2905: GO 2946
2907: LD_INT 2
2909: DOUBLE
2910: EQUAL
2911: IFTRUE 2915
2913: GO 2926
2915: POP
// tech := tech_mortar ; 3 :
2916: LD_ADDR_VAR 0 5
2920: PUSH
2921: LD_INT 41
2923: ST_TO_ADDR
2924: GO 2946
2926: LD_INT 3
2928: DOUBLE
2929: EQUAL
2930: IFTRUE 2934
2932: GO 2945
2934: POP
// tech := tech_bazooka ; end ;
2935: LD_ADDR_VAR 0 5
2939: PUSH
2940: LD_INT 44
2942: ST_TO_ADDR
2943: GO 2946
2945: POP
// if Researched ( side , tech ) then
2946: LD_VAR 0 3
2950: PPUSH
2951: LD_VAR 0 5
2955: PPUSH
2956: CALL_OW 325
2960: IFFALSE 2987
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2962: LD_ADDR_VAR 0 2
2966: PUSH
2967: LD_INT 5
2969: PUSH
2970: LD_INT 8
2972: PUSH
2973: LD_INT 9
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: PUSH
2981: LD_VAR 0 4
2985: ARRAY
2986: ST_TO_ADDR
// end ;
2987: LD_VAR 0 2
2991: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2992: LD_INT 0
2994: PPUSH
2995: PPUSH
2996: PPUSH
// if not mines then
2997: LD_VAR 0 2
3001: NOT
3002: IFFALSE 3006
// exit ;
3004: GO 3150
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_INT 81
3013: PUSH
3014: LD_VAR 0 1
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 3
3025: PUSH
3026: LD_INT 21
3028: PUSH
3029: LD_INT 3
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PPUSH
3044: CALL_OW 69
3048: ST_TO_ADDR
// for i in mines do
3049: LD_ADDR_VAR 0 4
3053: PUSH
3054: LD_VAR 0 2
3058: PUSH
3059: FOR_IN
3060: IFFALSE 3148
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3062: LD_VAR 0 4
3066: PUSH
3067: LD_INT 1
3069: ARRAY
3070: PPUSH
3071: LD_VAR 0 4
3075: PUSH
3076: LD_INT 2
3078: ARRAY
3079: PPUSH
3080: CALL_OW 458
3084: NOT
3085: IFFALSE 3089
// continue ;
3087: GO 3059
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3089: LD_VAR 0 4
3093: PUSH
3094: LD_INT 1
3096: ARRAY
3097: PPUSH
3098: LD_VAR 0 4
3102: PUSH
3103: LD_INT 2
3105: ARRAY
3106: PPUSH
3107: CALL_OW 428
3111: PUSH
3112: LD_VAR 0 5
3116: IN
3117: IFFALSE 3146
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3119: LD_VAR 0 4
3123: PUSH
3124: LD_INT 1
3126: ARRAY
3127: PPUSH
3128: LD_VAR 0 4
3132: PUSH
3133: LD_INT 2
3135: ARRAY
3136: PPUSH
3137: LD_VAR 0 1
3141: PPUSH
3142: CALL_OW 456
// end ;
3146: GO 3059
3148: POP
3149: POP
// end ;
3150: LD_VAR 0 3
3154: RET
// export function Count ( array ) ; var i ; begin
3155: LD_INT 0
3157: PPUSH
3158: PPUSH
// result := 0 ;
3159: LD_ADDR_VAR 0 2
3163: PUSH
3164: LD_INT 0
3166: ST_TO_ADDR
// for i in array do
3167: LD_ADDR_VAR 0 3
3171: PUSH
3172: LD_VAR 0 1
3176: PUSH
3177: FOR_IN
3178: IFFALSE 3202
// if i then
3180: LD_VAR 0 3
3184: IFFALSE 3200
// result := result + 1 ;
3186: LD_ADDR_VAR 0 2
3190: PUSH
3191: LD_VAR 0 2
3195: PUSH
3196: LD_INT 1
3198: PLUS
3199: ST_TO_ADDR
3200: GO 3177
3202: POP
3203: POP
// end ;
3204: LD_VAR 0 2
3208: RET
// export function IsEmpty ( building ) ; begin
3209: LD_INT 0
3211: PPUSH
// if not building then
3212: LD_VAR 0 1
3216: NOT
3217: IFFALSE 3221
// exit ;
3219: GO 3264
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: LD_VAR 0 1
3230: PUSH
3231: LD_INT 22
3233: PUSH
3234: LD_VAR 0 1
3238: PPUSH
3239: CALL_OW 255
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PUSH
3248: LD_INT 58
3250: PUSH
3251: EMPTY
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PPUSH
3258: CALL_OW 69
3262: IN
3263: ST_TO_ADDR
// end ;
3264: LD_VAR 0 2
3268: RET
// export function IsNotFull ( building ) ; var places ; begin
3269: LD_INT 0
3271: PPUSH
3272: PPUSH
// if not building then
3273: LD_VAR 0 1
3277: NOT
3278: IFFALSE 3282
// exit ;
3280: GO 3453
// result := false ;
3282: LD_ADDR_VAR 0 2
3286: PUSH
3287: LD_INT 0
3289: ST_TO_ADDR
// places := 0 ;
3290: LD_ADDR_VAR 0 3
3294: PUSH
3295: LD_INT 0
3297: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
3298: LD_VAR 0 1
3302: PPUSH
3303: CALL_OW 266
3307: PUSH
3308: LD_INT 0
3310: DOUBLE
3311: EQUAL
3312: IFTRUE 3370
3314: LD_INT 1
3316: DOUBLE
3317: EQUAL
3318: IFTRUE 3370
3320: LD_INT 6
3322: DOUBLE
3323: EQUAL
3324: IFTRUE 3370
3326: LD_INT 7
3328: DOUBLE
3329: EQUAL
3330: IFTRUE 3370
3332: LD_INT 8
3334: DOUBLE
3335: EQUAL
3336: IFTRUE 3370
3338: LD_INT 4
3340: DOUBLE
3341: EQUAL
3342: IFTRUE 3370
3344: LD_INT 5
3346: DOUBLE
3347: EQUAL
3348: IFTRUE 3370
3350: LD_INT 2
3352: DOUBLE
3353: EQUAL
3354: IFTRUE 3370
3356: LD_INT 3
3358: DOUBLE
3359: EQUAL
3360: IFTRUE 3370
3362: LD_INT 35
3364: DOUBLE
3365: EQUAL
3366: IFTRUE 3370
3368: GO 3381
3370: POP
// places := 6 ; b_bunker , b_breastwork :
3371: LD_ADDR_VAR 0 3
3375: PUSH
3376: LD_INT 6
3378: ST_TO_ADDR
3379: GO 3426
3381: LD_INT 32
3383: DOUBLE
3384: EQUAL
3385: IFTRUE 3395
3387: LD_INT 31
3389: DOUBLE
3390: EQUAL
3391: IFTRUE 3395
3393: GO 3406
3395: POP
// places := 1 ; b_control_tower :
3396: LD_ADDR_VAR 0 3
3400: PUSH
3401: LD_INT 1
3403: ST_TO_ADDR
3404: GO 3426
3406: LD_INT 36
3408: DOUBLE
3409: EQUAL
3410: IFTRUE 3414
3412: GO 3425
3414: POP
// places := 3 ; end ;
3415: LD_ADDR_VAR 0 3
3419: PUSH
3420: LD_INT 3
3422: ST_TO_ADDR
3423: GO 3426
3425: POP
// if places then
3426: LD_VAR 0 3
3430: IFFALSE 3453
// result := UnitsInside ( building ) < places ;
3432: LD_ADDR_VAR 0 2
3436: PUSH
3437: LD_VAR 0 1
3441: PPUSH
3442: CALL_OW 313
3446: PUSH
3447: LD_VAR 0 3
3451: LESS
3452: ST_TO_ADDR
// end ;
3453: LD_VAR 0 2
3457: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3458: LD_INT 0
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
// tmp := [ ] ;
3464: LD_ADDR_VAR 0 3
3468: PUSH
3469: EMPTY
3470: ST_TO_ADDR
// list := [ ] ;
3471: LD_ADDR_VAR 0 5
3475: PUSH
3476: EMPTY
3477: ST_TO_ADDR
// for i = 16 to 25 do
3478: LD_ADDR_VAR 0 4
3482: PUSH
3483: DOUBLE
3484: LD_INT 16
3486: DEC
3487: ST_TO_ADDR
3488: LD_INT 25
3490: PUSH
3491: FOR_TO
3492: IFFALSE 3565
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3494: LD_ADDR_VAR 0 3
3498: PUSH
3499: LD_VAR 0 3
3503: PUSH
3504: LD_INT 22
3506: PUSH
3507: LD_VAR 0 1
3511: PPUSH
3512: CALL_OW 255
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PUSH
3521: LD_INT 91
3523: PUSH
3524: LD_VAR 0 1
3528: PUSH
3529: LD_INT 6
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: LIST
3536: PUSH
3537: LD_INT 30
3539: PUSH
3540: LD_VAR 0 4
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: LIST
3553: PUSH
3554: EMPTY
3555: LIST
3556: PPUSH
3557: CALL_OW 69
3561: ADD
3562: ST_TO_ADDR
3563: GO 3491
3565: POP
3566: POP
// for i = 1 to tmp do
3567: LD_ADDR_VAR 0 4
3571: PUSH
3572: DOUBLE
3573: LD_INT 1
3575: DEC
3576: ST_TO_ADDR
3577: LD_VAR 0 3
3581: PUSH
3582: FOR_TO
3583: IFFALSE 3671
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3585: LD_ADDR_VAR 0 5
3589: PUSH
3590: LD_VAR 0 5
3594: PUSH
3595: LD_VAR 0 3
3599: PUSH
3600: LD_VAR 0 4
3604: ARRAY
3605: PPUSH
3606: CALL_OW 266
3610: PUSH
3611: LD_VAR 0 3
3615: PUSH
3616: LD_VAR 0 4
3620: ARRAY
3621: PPUSH
3622: CALL_OW 250
3626: PUSH
3627: LD_VAR 0 3
3631: PUSH
3632: LD_VAR 0 4
3636: ARRAY
3637: PPUSH
3638: CALL_OW 251
3642: PUSH
3643: LD_VAR 0 3
3647: PUSH
3648: LD_VAR 0 4
3652: ARRAY
3653: PPUSH
3654: CALL_OW 254
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: PUSH
3665: EMPTY
3666: LIST
3667: ADD
3668: ST_TO_ADDR
3669: GO 3582
3671: POP
3672: POP
// result := list ;
3673: LD_ADDR_VAR 0 2
3677: PUSH
3678: LD_VAR 0 5
3682: ST_TO_ADDR
// end ;
3683: LD_VAR 0 2
3687: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3688: LD_INT 0
3690: PPUSH
3691: PPUSH
3692: PPUSH
3693: PPUSH
3694: PPUSH
3695: PPUSH
3696: PPUSH
// if not factory then
3697: LD_VAR 0 1
3701: NOT
3702: IFFALSE 3706
// exit ;
3704: GO 4299
// if control = control_apeman then
3706: LD_VAR 0 4
3710: PUSH
3711: LD_INT 5
3713: EQUAL
3714: IFFALSE 3823
// begin tmp := UnitsInside ( factory ) ;
3716: LD_ADDR_VAR 0 8
3720: PUSH
3721: LD_VAR 0 1
3725: PPUSH
3726: CALL_OW 313
3730: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3731: LD_VAR 0 8
3735: PPUSH
3736: LD_INT 25
3738: PUSH
3739: LD_INT 12
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: PPUSH
3746: CALL_OW 72
3750: NOT
3751: IFFALSE 3761
// control := control_manual ;
3753: LD_ADDR_VAR 0 4
3757: PUSH
3758: LD_INT 1
3760: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3761: LD_ADDR_VAR 0 8
3765: PUSH
3766: LD_VAR 0 1
3770: PPUSH
3771: CALL 3458 0 1
3775: ST_TO_ADDR
// if tmp then
3776: LD_VAR 0 8
3780: IFFALSE 3823
// begin for i in tmp do
3782: LD_ADDR_VAR 0 7
3786: PUSH
3787: LD_VAR 0 8
3791: PUSH
3792: FOR_IN
3793: IFFALSE 3821
// if i [ 1 ] = b_ext_radio then
3795: LD_VAR 0 7
3799: PUSH
3800: LD_INT 1
3802: ARRAY
3803: PUSH
3804: LD_INT 22
3806: EQUAL
3807: IFFALSE 3819
// begin control := control_remote ;
3809: LD_ADDR_VAR 0 4
3813: PUSH
3814: LD_INT 2
3816: ST_TO_ADDR
// break ;
3817: GO 3821
// end ;
3819: GO 3792
3821: POP
3822: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3823: LD_VAR 0 1
3827: PPUSH
3828: LD_VAR 0 2
3832: PPUSH
3833: LD_VAR 0 3
3837: PPUSH
3838: LD_VAR 0 4
3842: PPUSH
3843: LD_VAR 0 5
3847: PPUSH
3848: CALL_OW 448
3852: IFFALSE 3887
// begin result := [ chassis , engine , control , weapon ] ;
3854: LD_ADDR_VAR 0 6
3858: PUSH
3859: LD_VAR 0 2
3863: PUSH
3864: LD_VAR 0 3
3868: PUSH
3869: LD_VAR 0 4
3873: PUSH
3874: LD_VAR 0 5
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: ST_TO_ADDR
// exit ;
3885: GO 4299
// end ; _chassis := AvailableChassisList ( factory ) ;
3887: LD_ADDR_VAR 0 9
3891: PUSH
3892: LD_VAR 0 1
3896: PPUSH
3897: CALL_OW 475
3901: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3902: LD_ADDR_VAR 0 11
3906: PUSH
3907: LD_VAR 0 1
3911: PPUSH
3912: CALL_OW 476
3916: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3917: LD_ADDR_VAR 0 12
3921: PUSH
3922: LD_VAR 0 1
3926: PPUSH
3927: CALL_OW 477
3931: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3932: LD_ADDR_VAR 0 10
3936: PUSH
3937: LD_VAR 0 1
3941: PPUSH
3942: CALL_OW 478
3946: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3947: LD_VAR 0 9
3951: NOT
3952: PUSH
3953: LD_VAR 0 11
3957: NOT
3958: OR
3959: PUSH
3960: LD_VAR 0 12
3964: NOT
3965: OR
3966: PUSH
3967: LD_VAR 0 10
3971: NOT
3972: OR
3973: IFFALSE 4008
// begin result := [ chassis , engine , control , weapon ] ;
3975: LD_ADDR_VAR 0 6
3979: PUSH
3980: LD_VAR 0 2
3984: PUSH
3985: LD_VAR 0 3
3989: PUSH
3990: LD_VAR 0 4
3994: PUSH
3995: LD_VAR 0 5
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: LIST
4004: LIST
4005: ST_TO_ADDR
// exit ;
4006: GO 4299
// end ; if not chassis in _chassis then
4008: LD_VAR 0 2
4012: PUSH
4013: LD_VAR 0 9
4017: IN
4018: NOT
4019: IFFALSE 4045
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4021: LD_ADDR_VAR 0 2
4025: PUSH
4026: LD_VAR 0 9
4030: PUSH
4031: LD_INT 1
4033: PPUSH
4034: LD_VAR 0 9
4038: PPUSH
4039: CALL_OW 12
4043: ARRAY
4044: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4045: LD_VAR 0 2
4049: PPUSH
4050: LD_VAR 0 3
4054: PPUSH
4055: CALL 4304 0 2
4059: NOT
4060: IFFALSE 4119
// repeat engine := _engine [ 1 ] ;
4062: LD_ADDR_VAR 0 3
4066: PUSH
4067: LD_VAR 0 11
4071: PUSH
4072: LD_INT 1
4074: ARRAY
4075: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4076: LD_ADDR_VAR 0 11
4080: PUSH
4081: LD_VAR 0 11
4085: PPUSH
4086: LD_INT 1
4088: PPUSH
4089: CALL_OW 3
4093: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4094: LD_VAR 0 2
4098: PPUSH
4099: LD_VAR 0 3
4103: PPUSH
4104: CALL 4304 0 2
4108: PUSH
4109: LD_VAR 0 11
4113: PUSH
4114: EMPTY
4115: EQUAL
4116: OR
4117: IFFALSE 4062
// if not control in _control then
4119: LD_VAR 0 4
4123: PUSH
4124: LD_VAR 0 12
4128: IN
4129: NOT
4130: IFFALSE 4156
// control := _control [ rand ( 1 , _control ) ] ;
4132: LD_ADDR_VAR 0 4
4136: PUSH
4137: LD_VAR 0 12
4141: PUSH
4142: LD_INT 1
4144: PPUSH
4145: LD_VAR 0 12
4149: PPUSH
4150: CALL_OW 12
4154: ARRAY
4155: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4156: LD_VAR 0 2
4160: PPUSH
4161: LD_VAR 0 5
4165: PPUSH
4166: CALL 4524 0 2
4170: NOT
4171: IFFALSE 4230
// repeat weapon := _weapon [ 1 ] ;
4173: LD_ADDR_VAR 0 5
4177: PUSH
4178: LD_VAR 0 10
4182: PUSH
4183: LD_INT 1
4185: ARRAY
4186: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4187: LD_ADDR_VAR 0 10
4191: PUSH
4192: LD_VAR 0 10
4196: PPUSH
4197: LD_INT 1
4199: PPUSH
4200: CALL_OW 3
4204: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4205: LD_VAR 0 2
4209: PPUSH
4210: LD_VAR 0 5
4214: PPUSH
4215: CALL 4524 0 2
4219: PUSH
4220: LD_VAR 0 10
4224: PUSH
4225: EMPTY
4226: EQUAL
4227: OR
4228: IFFALSE 4173
// result := [ ] ;
4230: LD_ADDR_VAR 0 6
4234: PUSH
4235: EMPTY
4236: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4237: LD_VAR 0 1
4241: PPUSH
4242: LD_VAR 0 2
4246: PPUSH
4247: LD_VAR 0 3
4251: PPUSH
4252: LD_VAR 0 4
4256: PPUSH
4257: LD_VAR 0 5
4261: PPUSH
4262: CALL_OW 448
4266: IFFALSE 4299
// result := [ chassis , engine , control , weapon ] ;
4268: LD_ADDR_VAR 0 6
4272: PUSH
4273: LD_VAR 0 2
4277: PUSH
4278: LD_VAR 0 3
4282: PUSH
4283: LD_VAR 0 4
4287: PUSH
4288: LD_VAR 0 5
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: ST_TO_ADDR
// end ;
4299: LD_VAR 0 6
4303: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4304: LD_INT 0
4306: PPUSH
// if not chassis or not engine then
4307: LD_VAR 0 1
4311: NOT
4312: PUSH
4313: LD_VAR 0 2
4317: NOT
4318: OR
4319: IFFALSE 4323
// exit ;
4321: GO 4519
// case engine of engine_solar :
4323: LD_VAR 0 2
4327: PUSH
4328: LD_INT 2
4330: DOUBLE
4331: EQUAL
4332: IFTRUE 4336
4334: GO 4374
4336: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4337: LD_ADDR_VAR 0 3
4341: PUSH
4342: LD_INT 11
4344: PUSH
4345: LD_INT 12
4347: PUSH
4348: LD_INT 13
4350: PUSH
4351: LD_INT 14
4353: PUSH
4354: LD_INT 1
4356: PUSH
4357: LD_INT 2
4359: PUSH
4360: LD_INT 3
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: ST_TO_ADDR
4372: GO 4503
4374: LD_INT 1
4376: DOUBLE
4377: EQUAL
4378: IFTRUE 4382
4380: GO 4444
4382: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4383: LD_ADDR_VAR 0 3
4387: PUSH
4388: LD_INT 11
4390: PUSH
4391: LD_INT 12
4393: PUSH
4394: LD_INT 13
4396: PUSH
4397: LD_INT 14
4399: PUSH
4400: LD_INT 1
4402: PUSH
4403: LD_INT 2
4405: PUSH
4406: LD_INT 3
4408: PUSH
4409: LD_INT 4
4411: PUSH
4412: LD_INT 5
4414: PUSH
4415: LD_INT 21
4417: PUSH
4418: LD_INT 23
4420: PUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 24
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: ST_TO_ADDR
4442: GO 4503
4444: LD_INT 3
4446: DOUBLE
4447: EQUAL
4448: IFTRUE 4452
4450: GO 4502
4452: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4453: LD_ADDR_VAR 0 3
4457: PUSH
4458: LD_INT 13
4460: PUSH
4461: LD_INT 14
4463: PUSH
4464: LD_INT 2
4466: PUSH
4467: LD_INT 3
4469: PUSH
4470: LD_INT 4
4472: PUSH
4473: LD_INT 5
4475: PUSH
4476: LD_INT 21
4478: PUSH
4479: LD_INT 22
4481: PUSH
4482: LD_INT 23
4484: PUSH
4485: LD_INT 24
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: ST_TO_ADDR
4500: GO 4503
4502: POP
// result := ( chassis in result ) ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_VAR 0 1
4512: PUSH
4513: LD_VAR 0 3
4517: IN
4518: ST_TO_ADDR
// end ;
4519: LD_VAR 0 3
4523: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4524: LD_INT 0
4526: PPUSH
// if not chassis or not weapon then
4527: LD_VAR 0 1
4531: NOT
4532: PUSH
4533: LD_VAR 0 2
4537: NOT
4538: OR
4539: IFFALSE 4543
// exit ;
4541: GO 5605
// case weapon of us_machine_gun :
4543: LD_VAR 0 2
4547: PUSH
4548: LD_INT 2
4550: DOUBLE
4551: EQUAL
4552: IFTRUE 4556
4554: GO 4586
4556: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4557: LD_ADDR_VAR 0 3
4561: PUSH
4562: LD_INT 1
4564: PUSH
4565: LD_INT 2
4567: PUSH
4568: LD_INT 3
4570: PUSH
4571: LD_INT 4
4573: PUSH
4574: LD_INT 5
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: ST_TO_ADDR
4584: GO 5589
4586: LD_INT 3
4588: DOUBLE
4589: EQUAL
4590: IFTRUE 4594
4592: GO 4624
4594: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4595: LD_ADDR_VAR 0 3
4599: PUSH
4600: LD_INT 1
4602: PUSH
4603: LD_INT 2
4605: PUSH
4606: LD_INT 3
4608: PUSH
4609: LD_INT 4
4611: PUSH
4612: LD_INT 5
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: ST_TO_ADDR
4622: GO 5589
4624: LD_INT 11
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4662
4632: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4633: LD_ADDR_VAR 0 3
4637: PUSH
4638: LD_INT 1
4640: PUSH
4641: LD_INT 2
4643: PUSH
4644: LD_INT 3
4646: PUSH
4647: LD_INT 4
4649: PUSH
4650: LD_INT 5
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: ST_TO_ADDR
4660: GO 5589
4662: LD_INT 4
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4696
4670: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4671: LD_ADDR_VAR 0 3
4675: PUSH
4676: LD_INT 2
4678: PUSH
4679: LD_INT 3
4681: PUSH
4682: LD_INT 4
4684: PUSH
4685: LD_INT 5
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: ST_TO_ADDR
4694: GO 5589
4696: LD_INT 5
4698: DOUBLE
4699: EQUAL
4700: IFTRUE 4704
4702: GO 4730
4704: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4705: LD_ADDR_VAR 0 3
4709: PUSH
4710: LD_INT 2
4712: PUSH
4713: LD_INT 3
4715: PUSH
4716: LD_INT 4
4718: PUSH
4719: LD_INT 5
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: ST_TO_ADDR
4728: GO 5589
4730: LD_INT 9
4732: DOUBLE
4733: EQUAL
4734: IFTRUE 4738
4736: GO 4764
4738: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4739: LD_ADDR_VAR 0 3
4743: PUSH
4744: LD_INT 2
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: LD_INT 4
4752: PUSH
4753: LD_INT 5
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: ST_TO_ADDR
4762: GO 5589
4764: LD_INT 7
4766: DOUBLE
4767: EQUAL
4768: IFTRUE 4772
4770: GO 4798
4772: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4773: LD_ADDR_VAR 0 3
4777: PUSH
4778: LD_INT 2
4780: PUSH
4781: LD_INT 3
4783: PUSH
4784: LD_INT 4
4786: PUSH
4787: LD_INT 5
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: ST_TO_ADDR
4796: GO 5589
4798: LD_INT 12
4800: DOUBLE
4801: EQUAL
4802: IFTRUE 4806
4804: GO 4832
4806: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4807: LD_ADDR_VAR 0 3
4811: PUSH
4812: LD_INT 2
4814: PUSH
4815: LD_INT 3
4817: PUSH
4818: LD_INT 4
4820: PUSH
4821: LD_INT 5
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: ST_TO_ADDR
4830: GO 5589
4832: LD_INT 13
4834: DOUBLE
4835: EQUAL
4836: IFTRUE 4840
4838: GO 4866
4840: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4841: LD_ADDR_VAR 0 3
4845: PUSH
4846: LD_INT 2
4848: PUSH
4849: LD_INT 3
4851: PUSH
4852: LD_INT 4
4854: PUSH
4855: LD_INT 5
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: ST_TO_ADDR
4864: GO 5589
4866: LD_INT 14
4868: DOUBLE
4869: EQUAL
4870: IFTRUE 4874
4872: GO 4892
4874: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4875: LD_ADDR_VAR 0 3
4879: PUSH
4880: LD_INT 4
4882: PUSH
4883: LD_INT 5
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: ST_TO_ADDR
4890: GO 5589
4892: LD_INT 6
4894: DOUBLE
4895: EQUAL
4896: IFTRUE 4900
4898: GO 4918
4900: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4901: LD_ADDR_VAR 0 3
4905: PUSH
4906: LD_INT 4
4908: PUSH
4909: LD_INT 5
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: ST_TO_ADDR
4916: GO 5589
4918: LD_INT 10
4920: DOUBLE
4921: EQUAL
4922: IFTRUE 4926
4924: GO 4944
4926: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4927: LD_ADDR_VAR 0 3
4931: PUSH
4932: LD_INT 4
4934: PUSH
4935: LD_INT 5
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: ST_TO_ADDR
4942: GO 5589
4944: LD_INT 22
4946: DOUBLE
4947: EQUAL
4948: IFTRUE 4952
4950: GO 4978
4952: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4953: LD_ADDR_VAR 0 3
4957: PUSH
4958: LD_INT 11
4960: PUSH
4961: LD_INT 12
4963: PUSH
4964: LD_INT 13
4966: PUSH
4967: LD_INT 14
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: ST_TO_ADDR
4976: GO 5589
4978: LD_INT 23
4980: DOUBLE
4981: EQUAL
4982: IFTRUE 4986
4984: GO 5012
4986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4987: LD_ADDR_VAR 0 3
4991: PUSH
4992: LD_INT 11
4994: PUSH
4995: LD_INT 12
4997: PUSH
4998: LD_INT 13
5000: PUSH
5001: LD_INT 14
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: ST_TO_ADDR
5010: GO 5589
5012: LD_INT 24
5014: DOUBLE
5015: EQUAL
5016: IFTRUE 5020
5018: GO 5046
5020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5021: LD_ADDR_VAR 0 3
5025: PUSH
5026: LD_INT 11
5028: PUSH
5029: LD_INT 12
5031: PUSH
5032: LD_INT 13
5034: PUSH
5035: LD_INT 14
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: ST_TO_ADDR
5044: GO 5589
5046: LD_INT 30
5048: DOUBLE
5049: EQUAL
5050: IFTRUE 5054
5052: GO 5080
5054: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5055: LD_ADDR_VAR 0 3
5059: PUSH
5060: LD_INT 11
5062: PUSH
5063: LD_INT 12
5065: PUSH
5066: LD_INT 13
5068: PUSH
5069: LD_INT 14
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: ST_TO_ADDR
5078: GO 5589
5080: LD_INT 25
5082: DOUBLE
5083: EQUAL
5084: IFTRUE 5088
5086: GO 5106
5088: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5089: LD_ADDR_VAR 0 3
5093: PUSH
5094: LD_INT 13
5096: PUSH
5097: LD_INT 14
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: ST_TO_ADDR
5104: GO 5589
5106: LD_INT 27
5108: DOUBLE
5109: EQUAL
5110: IFTRUE 5114
5112: GO 5132
5114: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5115: LD_ADDR_VAR 0 3
5119: PUSH
5120: LD_INT 13
5122: PUSH
5123: LD_INT 14
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: ST_TO_ADDR
5130: GO 5589
5132: LD_EXP 21
5136: DOUBLE
5137: EQUAL
5138: IFTRUE 5142
5140: GO 5168
5142: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5143: LD_ADDR_VAR 0 3
5147: PUSH
5148: LD_INT 11
5150: PUSH
5151: LD_INT 12
5153: PUSH
5154: LD_INT 13
5156: PUSH
5157: LD_INT 14
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: ST_TO_ADDR
5166: GO 5589
5168: LD_INT 28
5170: DOUBLE
5171: EQUAL
5172: IFTRUE 5176
5174: GO 5194
5176: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5177: LD_ADDR_VAR 0 3
5181: PUSH
5182: LD_INT 13
5184: PUSH
5185: LD_INT 14
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: ST_TO_ADDR
5192: GO 5589
5194: LD_INT 29
5196: DOUBLE
5197: EQUAL
5198: IFTRUE 5202
5200: GO 5220
5202: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5203: LD_ADDR_VAR 0 3
5207: PUSH
5208: LD_INT 13
5210: PUSH
5211: LD_INT 14
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: ST_TO_ADDR
5218: GO 5589
5220: LD_INT 31
5222: DOUBLE
5223: EQUAL
5224: IFTRUE 5228
5226: GO 5246
5228: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5229: LD_ADDR_VAR 0 3
5233: PUSH
5234: LD_INT 13
5236: PUSH
5237: LD_INT 14
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: ST_TO_ADDR
5244: GO 5589
5246: LD_INT 26
5248: DOUBLE
5249: EQUAL
5250: IFTRUE 5254
5252: GO 5272
5254: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5255: LD_ADDR_VAR 0 3
5259: PUSH
5260: LD_INT 13
5262: PUSH
5263: LD_INT 14
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: ST_TO_ADDR
5270: GO 5589
5272: LD_INT 42
5274: DOUBLE
5275: EQUAL
5276: IFTRUE 5280
5278: GO 5306
5280: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5281: LD_ADDR_VAR 0 3
5285: PUSH
5286: LD_INT 21
5288: PUSH
5289: LD_INT 22
5291: PUSH
5292: LD_INT 23
5294: PUSH
5295: LD_INT 24
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: ST_TO_ADDR
5304: GO 5589
5306: LD_INT 43
5308: DOUBLE
5309: EQUAL
5310: IFTRUE 5314
5312: GO 5340
5314: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5315: LD_ADDR_VAR 0 3
5319: PUSH
5320: LD_INT 21
5322: PUSH
5323: LD_INT 22
5325: PUSH
5326: LD_INT 23
5328: PUSH
5329: LD_INT 24
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: ST_TO_ADDR
5338: GO 5589
5340: LD_INT 44
5342: DOUBLE
5343: EQUAL
5344: IFTRUE 5348
5346: GO 5374
5348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5349: LD_ADDR_VAR 0 3
5353: PUSH
5354: LD_INT 21
5356: PUSH
5357: LD_INT 22
5359: PUSH
5360: LD_INT 23
5362: PUSH
5363: LD_INT 24
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: ST_TO_ADDR
5372: GO 5589
5374: LD_INT 45
5376: DOUBLE
5377: EQUAL
5378: IFTRUE 5382
5380: GO 5408
5382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5383: LD_ADDR_VAR 0 3
5387: PUSH
5388: LD_INT 21
5390: PUSH
5391: LD_INT 22
5393: PUSH
5394: LD_INT 23
5396: PUSH
5397: LD_INT 24
5399: PUSH
5400: EMPTY
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: ST_TO_ADDR
5406: GO 5589
5408: LD_INT 49
5410: DOUBLE
5411: EQUAL
5412: IFTRUE 5416
5414: GO 5442
5416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5417: LD_ADDR_VAR 0 3
5421: PUSH
5422: LD_INT 21
5424: PUSH
5425: LD_INT 22
5427: PUSH
5428: LD_INT 23
5430: PUSH
5431: LD_INT 24
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: ST_TO_ADDR
5440: GO 5589
5442: LD_INT 51
5444: DOUBLE
5445: EQUAL
5446: IFTRUE 5450
5448: GO 5476
5450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5451: LD_ADDR_VAR 0 3
5455: PUSH
5456: LD_INT 21
5458: PUSH
5459: LD_INT 22
5461: PUSH
5462: LD_INT 23
5464: PUSH
5465: LD_INT 24
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: ST_TO_ADDR
5474: GO 5589
5476: LD_INT 52
5478: DOUBLE
5479: EQUAL
5480: IFTRUE 5484
5482: GO 5510
5484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5485: LD_ADDR_VAR 0 3
5489: PUSH
5490: LD_INT 21
5492: PUSH
5493: LD_INT 22
5495: PUSH
5496: LD_INT 23
5498: PUSH
5499: LD_INT 24
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: ST_TO_ADDR
5508: GO 5589
5510: LD_INT 53
5512: DOUBLE
5513: EQUAL
5514: IFTRUE 5518
5516: GO 5536
5518: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5519: LD_ADDR_VAR 0 3
5523: PUSH
5524: LD_INT 23
5526: PUSH
5527: LD_INT 24
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: ST_TO_ADDR
5534: GO 5589
5536: LD_INT 46
5538: DOUBLE
5539: EQUAL
5540: IFTRUE 5544
5542: GO 5562
5544: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5545: LD_ADDR_VAR 0 3
5549: PUSH
5550: LD_INT 23
5552: PUSH
5553: LD_INT 24
5555: PUSH
5556: EMPTY
5557: LIST
5558: LIST
5559: ST_TO_ADDR
5560: GO 5589
5562: LD_INT 47
5564: DOUBLE
5565: EQUAL
5566: IFTRUE 5570
5568: GO 5588
5570: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5571: LD_ADDR_VAR 0 3
5575: PUSH
5576: LD_INT 23
5578: PUSH
5579: LD_INT 24
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: ST_TO_ADDR
5586: GO 5589
5588: POP
// result := ( chassis in result ) ;
5589: LD_ADDR_VAR 0 3
5593: PUSH
5594: LD_VAR 0 1
5598: PUSH
5599: LD_VAR 0 3
5603: IN
5604: ST_TO_ADDR
// end ;
5605: LD_VAR 0 3
5609: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5610: LD_INT 0
5612: PPUSH
5613: PPUSH
5614: PPUSH
5615: PPUSH
5616: PPUSH
5617: PPUSH
5618: PPUSH
// result := array ;
5619: LD_ADDR_VAR 0 5
5623: PUSH
5624: LD_VAR 0 1
5628: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5629: LD_VAR 0 1
5633: NOT
5634: PUSH
5635: LD_VAR 0 2
5639: NOT
5640: OR
5641: PUSH
5642: LD_VAR 0 3
5646: NOT
5647: OR
5648: PUSH
5649: LD_VAR 0 2
5653: PUSH
5654: LD_VAR 0 1
5658: GREATER
5659: OR
5660: PUSH
5661: LD_VAR 0 3
5665: PUSH
5666: LD_VAR 0 1
5670: GREATER
5671: OR
5672: IFFALSE 5676
// exit ;
5674: GO 5972
// if direction then
5676: LD_VAR 0 4
5680: IFFALSE 5744
// begin d := 1 ;
5682: LD_ADDR_VAR 0 9
5686: PUSH
5687: LD_INT 1
5689: ST_TO_ADDR
// if i_from > i_to then
5690: LD_VAR 0 2
5694: PUSH
5695: LD_VAR 0 3
5699: GREATER
5700: IFFALSE 5726
// length := ( array - i_from ) + i_to else
5702: LD_ADDR_VAR 0 11
5706: PUSH
5707: LD_VAR 0 1
5711: PUSH
5712: LD_VAR 0 2
5716: MINUS
5717: PUSH
5718: LD_VAR 0 3
5722: PLUS
5723: ST_TO_ADDR
5724: GO 5742
// length := i_to - i_from ;
5726: LD_ADDR_VAR 0 11
5730: PUSH
5731: LD_VAR 0 3
5735: PUSH
5736: LD_VAR 0 2
5740: MINUS
5741: ST_TO_ADDR
// end else
5742: GO 5805
// begin d := - 1 ;
5744: LD_ADDR_VAR 0 9
5748: PUSH
5749: LD_INT 1
5751: NEG
5752: ST_TO_ADDR
// if i_from > i_to then
5753: LD_VAR 0 2
5757: PUSH
5758: LD_VAR 0 3
5762: GREATER
5763: IFFALSE 5783
// length := i_from - i_to else
5765: LD_ADDR_VAR 0 11
5769: PUSH
5770: LD_VAR 0 2
5774: PUSH
5775: LD_VAR 0 3
5779: MINUS
5780: ST_TO_ADDR
5781: GO 5805
// length := ( array - i_to ) + i_from ;
5783: LD_ADDR_VAR 0 11
5787: PUSH
5788: LD_VAR 0 1
5792: PUSH
5793: LD_VAR 0 3
5797: MINUS
5798: PUSH
5799: LD_VAR 0 2
5803: PLUS
5804: ST_TO_ADDR
// end ; if not length then
5805: LD_VAR 0 11
5809: NOT
5810: IFFALSE 5814
// exit ;
5812: GO 5972
// tmp := array ;
5814: LD_ADDR_VAR 0 10
5818: PUSH
5819: LD_VAR 0 1
5823: ST_TO_ADDR
// for i = 1 to length do
5824: LD_ADDR_VAR 0 6
5828: PUSH
5829: DOUBLE
5830: LD_INT 1
5832: DEC
5833: ST_TO_ADDR
5834: LD_VAR 0 11
5838: PUSH
5839: FOR_TO
5840: IFFALSE 5960
// begin for j = 1 to array do
5842: LD_ADDR_VAR 0 7
5846: PUSH
5847: DOUBLE
5848: LD_INT 1
5850: DEC
5851: ST_TO_ADDR
5852: LD_VAR 0 1
5856: PUSH
5857: FOR_TO
5858: IFFALSE 5946
// begin k := j + d ;
5860: LD_ADDR_VAR 0 8
5864: PUSH
5865: LD_VAR 0 7
5869: PUSH
5870: LD_VAR 0 9
5874: PLUS
5875: ST_TO_ADDR
// if k > array then
5876: LD_VAR 0 8
5880: PUSH
5881: LD_VAR 0 1
5885: GREATER
5886: IFFALSE 5896
// k := 1 ;
5888: LD_ADDR_VAR 0 8
5892: PUSH
5893: LD_INT 1
5895: ST_TO_ADDR
// if not k then
5896: LD_VAR 0 8
5900: NOT
5901: IFFALSE 5913
// k := array ;
5903: LD_ADDR_VAR 0 8
5907: PUSH
5908: LD_VAR 0 1
5912: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5913: LD_ADDR_VAR 0 10
5917: PUSH
5918: LD_VAR 0 10
5922: PPUSH
5923: LD_VAR 0 8
5927: PPUSH
5928: LD_VAR 0 1
5932: PUSH
5933: LD_VAR 0 7
5937: ARRAY
5938: PPUSH
5939: CALL_OW 1
5943: ST_TO_ADDR
// end ;
5944: GO 5857
5946: POP
5947: POP
// array := tmp ;
5948: LD_ADDR_VAR 0 1
5952: PUSH
5953: LD_VAR 0 10
5957: ST_TO_ADDR
// end ;
5958: GO 5839
5960: POP
5961: POP
// result := array ;
5962: LD_ADDR_VAR 0 5
5966: PUSH
5967: LD_VAR 0 1
5971: ST_TO_ADDR
// end ;
5972: LD_VAR 0 5
5976: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5977: LD_INT 0
5979: PPUSH
5980: PPUSH
// result := 0 ;
5981: LD_ADDR_VAR 0 3
5985: PUSH
5986: LD_INT 0
5988: ST_TO_ADDR
// if not array or not value in array then
5989: LD_VAR 0 1
5993: NOT
5994: PUSH
5995: LD_VAR 0 2
5999: PUSH
6000: LD_VAR 0 1
6004: IN
6005: NOT
6006: OR
6007: IFFALSE 6011
// exit ;
6009: GO 6065
// for i = 1 to array do
6011: LD_ADDR_VAR 0 4
6015: PUSH
6016: DOUBLE
6017: LD_INT 1
6019: DEC
6020: ST_TO_ADDR
6021: LD_VAR 0 1
6025: PUSH
6026: FOR_TO
6027: IFFALSE 6063
// if value = array [ i ] then
6029: LD_VAR 0 2
6033: PUSH
6034: LD_VAR 0 1
6038: PUSH
6039: LD_VAR 0 4
6043: ARRAY
6044: EQUAL
6045: IFFALSE 6061
// begin result := i ;
6047: LD_ADDR_VAR 0 3
6051: PUSH
6052: LD_VAR 0 4
6056: ST_TO_ADDR
// exit ;
6057: POP
6058: POP
6059: GO 6065
// end ;
6061: GO 6026
6063: POP
6064: POP
// end ;
6065: LD_VAR 0 3
6069: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6070: LD_INT 0
6072: PPUSH
// vc_chassis := chassis ;
6073: LD_ADDR_OWVAR 37
6077: PUSH
6078: LD_VAR 0 1
6082: ST_TO_ADDR
// vc_engine := engine ;
6083: LD_ADDR_OWVAR 39
6087: PUSH
6088: LD_VAR 0 2
6092: ST_TO_ADDR
// vc_control := control ;
6093: LD_ADDR_OWVAR 38
6097: PUSH
6098: LD_VAR 0 3
6102: ST_TO_ADDR
// vc_weapon := weapon ;
6103: LD_ADDR_OWVAR 40
6107: PUSH
6108: LD_VAR 0 4
6112: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6113: LD_ADDR_OWVAR 41
6117: PUSH
6118: LD_VAR 0 5
6122: ST_TO_ADDR
// end ;
6123: LD_VAR 0 6
6127: RET
// export function WantPlant ( unit ) ; var task ; begin
6128: LD_INT 0
6130: PPUSH
6131: PPUSH
// result := false ;
6132: LD_ADDR_VAR 0 2
6136: PUSH
6137: LD_INT 0
6139: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6140: LD_ADDR_VAR 0 3
6144: PUSH
6145: LD_VAR 0 1
6149: PPUSH
6150: CALL_OW 437
6154: ST_TO_ADDR
// if task then
6155: LD_VAR 0 3
6159: IFFALSE 6187
// if task [ 1 ] [ 1 ] = p then
6161: LD_VAR 0 3
6165: PUSH
6166: LD_INT 1
6168: ARRAY
6169: PUSH
6170: LD_INT 1
6172: ARRAY
6173: PUSH
6174: LD_STRING p
6176: EQUAL
6177: IFFALSE 6187
// result := true ;
6179: LD_ADDR_VAR 0 2
6183: PUSH
6184: LD_INT 1
6186: ST_TO_ADDR
// end ;
6187: LD_VAR 0 2
6191: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6192: LD_INT 0
6194: PPUSH
6195: PPUSH
6196: PPUSH
6197: PPUSH
// if pos < 1 then
6198: LD_VAR 0 2
6202: PUSH
6203: LD_INT 1
6205: LESS
6206: IFFALSE 6210
// exit ;
6208: GO 6513
// if pos = 1 then
6210: LD_VAR 0 2
6214: PUSH
6215: LD_INT 1
6217: EQUAL
6218: IFFALSE 6251
// result := Replace ( arr , pos [ 1 ] , value ) else
6220: LD_ADDR_VAR 0 4
6224: PUSH
6225: LD_VAR 0 1
6229: PPUSH
6230: LD_VAR 0 2
6234: PUSH
6235: LD_INT 1
6237: ARRAY
6238: PPUSH
6239: LD_VAR 0 3
6243: PPUSH
6244: CALL_OW 1
6248: ST_TO_ADDR
6249: GO 6513
// begin tmp := arr ;
6251: LD_ADDR_VAR 0 6
6255: PUSH
6256: LD_VAR 0 1
6260: ST_TO_ADDR
// s_arr := [ tmp ] ;
6261: LD_ADDR_VAR 0 7
6265: PUSH
6266: LD_VAR 0 6
6270: PUSH
6271: EMPTY
6272: LIST
6273: ST_TO_ADDR
// for i = 1 to pos - 1 do
6274: LD_ADDR_VAR 0 5
6278: PUSH
6279: DOUBLE
6280: LD_INT 1
6282: DEC
6283: ST_TO_ADDR
6284: LD_VAR 0 2
6288: PUSH
6289: LD_INT 1
6291: MINUS
6292: PUSH
6293: FOR_TO
6294: IFFALSE 6339
// begin tmp := tmp [ pos [ i ] ] ;
6296: LD_ADDR_VAR 0 6
6300: PUSH
6301: LD_VAR 0 6
6305: PUSH
6306: LD_VAR 0 2
6310: PUSH
6311: LD_VAR 0 5
6315: ARRAY
6316: ARRAY
6317: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6318: LD_ADDR_VAR 0 7
6322: PUSH
6323: LD_VAR 0 7
6327: PUSH
6328: LD_VAR 0 6
6332: PUSH
6333: EMPTY
6334: LIST
6335: ADD
6336: ST_TO_ADDR
// end ;
6337: GO 6293
6339: POP
6340: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6341: LD_ADDR_VAR 0 6
6345: PUSH
6346: LD_VAR 0 6
6350: PPUSH
6351: LD_VAR 0 2
6355: PUSH
6356: LD_VAR 0 2
6360: ARRAY
6361: PPUSH
6362: LD_VAR 0 3
6366: PPUSH
6367: CALL_OW 1
6371: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6372: LD_ADDR_VAR 0 7
6376: PUSH
6377: LD_VAR 0 7
6381: PPUSH
6382: LD_VAR 0 7
6386: PPUSH
6387: LD_VAR 0 6
6391: PPUSH
6392: CALL_OW 1
6396: ST_TO_ADDR
// for i = s_arr downto 2 do
6397: LD_ADDR_VAR 0 5
6401: PUSH
6402: DOUBLE
6403: LD_VAR 0 7
6407: INC
6408: ST_TO_ADDR
6409: LD_INT 2
6411: PUSH
6412: FOR_DOWNTO
6413: IFFALSE 6497
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6415: LD_ADDR_VAR 0 6
6419: PUSH
6420: LD_VAR 0 7
6424: PUSH
6425: LD_VAR 0 5
6429: PUSH
6430: LD_INT 1
6432: MINUS
6433: ARRAY
6434: PPUSH
6435: LD_VAR 0 2
6439: PUSH
6440: LD_VAR 0 5
6444: PUSH
6445: LD_INT 1
6447: MINUS
6448: ARRAY
6449: PPUSH
6450: LD_VAR 0 7
6454: PUSH
6455: LD_VAR 0 5
6459: ARRAY
6460: PPUSH
6461: CALL_OW 1
6465: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6466: LD_ADDR_VAR 0 7
6470: PUSH
6471: LD_VAR 0 7
6475: PPUSH
6476: LD_VAR 0 5
6480: PUSH
6481: LD_INT 1
6483: MINUS
6484: PPUSH
6485: LD_VAR 0 6
6489: PPUSH
6490: CALL_OW 1
6494: ST_TO_ADDR
// end ;
6495: GO 6412
6497: POP
6498: POP
// result := s_arr [ 1 ] ;
6499: LD_ADDR_VAR 0 4
6503: PUSH
6504: LD_VAR 0 7
6508: PUSH
6509: LD_INT 1
6511: ARRAY
6512: ST_TO_ADDR
// end ; end ;
6513: LD_VAR 0 4
6517: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6518: LD_INT 0
6520: PPUSH
6521: PPUSH
// if not list then
6522: LD_VAR 0 1
6526: NOT
6527: IFFALSE 6531
// exit ;
6529: GO 6622
// i := list [ pos1 ] ;
6531: LD_ADDR_VAR 0 5
6535: PUSH
6536: LD_VAR 0 1
6540: PUSH
6541: LD_VAR 0 2
6545: ARRAY
6546: ST_TO_ADDR
// if not i then
6547: LD_VAR 0 5
6551: NOT
6552: IFFALSE 6556
// exit ;
6554: GO 6622
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6556: LD_ADDR_VAR 0 1
6560: PUSH
6561: LD_VAR 0 1
6565: PPUSH
6566: LD_VAR 0 2
6570: PPUSH
6571: LD_VAR 0 1
6575: PUSH
6576: LD_VAR 0 3
6580: ARRAY
6581: PPUSH
6582: CALL_OW 1
6586: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6587: LD_ADDR_VAR 0 1
6591: PUSH
6592: LD_VAR 0 1
6596: PPUSH
6597: LD_VAR 0 3
6601: PPUSH
6602: LD_VAR 0 5
6606: PPUSH
6607: CALL_OW 1
6611: ST_TO_ADDR
// result := list ;
6612: LD_ADDR_VAR 0 4
6616: PUSH
6617: LD_VAR 0 1
6621: ST_TO_ADDR
// end ;
6622: LD_VAR 0 4
6626: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6627: LD_INT 0
6629: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6630: LD_ADDR_VAR 0 5
6634: PUSH
6635: LD_VAR 0 1
6639: PPUSH
6640: CALL_OW 250
6644: PPUSH
6645: LD_VAR 0 1
6649: PPUSH
6650: CALL_OW 251
6654: PPUSH
6655: LD_VAR 0 2
6659: PPUSH
6660: LD_VAR 0 3
6664: PPUSH
6665: LD_VAR 0 4
6669: PPUSH
6670: CALL 6680 0 5
6674: ST_TO_ADDR
// end ;
6675: LD_VAR 0 5
6679: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6680: LD_INT 0
6682: PPUSH
6683: PPUSH
6684: PPUSH
6685: PPUSH
// if not list then
6686: LD_VAR 0 3
6690: NOT
6691: IFFALSE 6695
// exit ;
6693: GO 7083
// result := [ ] ;
6695: LD_ADDR_VAR 0 6
6699: PUSH
6700: EMPTY
6701: ST_TO_ADDR
// for i in list do
6702: LD_ADDR_VAR 0 7
6706: PUSH
6707: LD_VAR 0 3
6711: PUSH
6712: FOR_IN
6713: IFFALSE 6915
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6715: LD_ADDR_VAR 0 9
6719: PUSH
6720: LD_VAR 0 7
6724: PPUSH
6725: LD_VAR 0 1
6729: PPUSH
6730: LD_VAR 0 2
6734: PPUSH
6735: CALL_OW 297
6739: ST_TO_ADDR
// if not result then
6740: LD_VAR 0 6
6744: NOT
6745: IFFALSE 6771
// result := [ [ i , tmp ] ] else
6747: LD_ADDR_VAR 0 6
6751: PUSH
6752: LD_VAR 0 7
6756: PUSH
6757: LD_VAR 0 9
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: EMPTY
6767: LIST
6768: ST_TO_ADDR
6769: GO 6913
// begin if result [ result ] [ 2 ] < tmp then
6771: LD_VAR 0 6
6775: PUSH
6776: LD_VAR 0 6
6780: ARRAY
6781: PUSH
6782: LD_INT 2
6784: ARRAY
6785: PUSH
6786: LD_VAR 0 9
6790: LESS
6791: IFFALSE 6833
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6793: LD_ADDR_VAR 0 6
6797: PUSH
6798: LD_VAR 0 6
6802: PPUSH
6803: LD_VAR 0 6
6807: PUSH
6808: LD_INT 1
6810: PLUS
6811: PPUSH
6812: LD_VAR 0 7
6816: PUSH
6817: LD_VAR 0 9
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PPUSH
6826: CALL_OW 2
6830: ST_TO_ADDR
6831: GO 6913
// for j = 1 to result do
6833: LD_ADDR_VAR 0 8
6837: PUSH
6838: DOUBLE
6839: LD_INT 1
6841: DEC
6842: ST_TO_ADDR
6843: LD_VAR 0 6
6847: PUSH
6848: FOR_TO
6849: IFFALSE 6911
// begin if tmp < result [ j ] [ 2 ] then
6851: LD_VAR 0 9
6855: PUSH
6856: LD_VAR 0 6
6860: PUSH
6861: LD_VAR 0 8
6865: ARRAY
6866: PUSH
6867: LD_INT 2
6869: ARRAY
6870: LESS
6871: IFFALSE 6909
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6873: LD_ADDR_VAR 0 6
6877: PUSH
6878: LD_VAR 0 6
6882: PPUSH
6883: LD_VAR 0 8
6887: PPUSH
6888: LD_VAR 0 7
6892: PUSH
6893: LD_VAR 0 9
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PPUSH
6902: CALL_OW 2
6906: ST_TO_ADDR
// break ;
6907: GO 6911
// end ; end ;
6909: GO 6848
6911: POP
6912: POP
// end ; end ;
6913: GO 6712
6915: POP
6916: POP
// if result and not asc then
6917: LD_VAR 0 6
6921: PUSH
6922: LD_VAR 0 4
6926: NOT
6927: AND
6928: IFFALSE 7003
// begin tmp := result ;
6930: LD_ADDR_VAR 0 9
6934: PUSH
6935: LD_VAR 0 6
6939: ST_TO_ADDR
// for i = tmp downto 1 do
6940: LD_ADDR_VAR 0 7
6944: PUSH
6945: DOUBLE
6946: LD_VAR 0 9
6950: INC
6951: ST_TO_ADDR
6952: LD_INT 1
6954: PUSH
6955: FOR_DOWNTO
6956: IFFALSE 7001
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6958: LD_ADDR_VAR 0 6
6962: PUSH
6963: LD_VAR 0 6
6967: PPUSH
6968: LD_VAR 0 9
6972: PUSH
6973: LD_VAR 0 7
6977: MINUS
6978: PUSH
6979: LD_INT 1
6981: PLUS
6982: PPUSH
6983: LD_VAR 0 9
6987: PUSH
6988: LD_VAR 0 7
6992: ARRAY
6993: PPUSH
6994: CALL_OW 1
6998: ST_TO_ADDR
6999: GO 6955
7001: POP
7002: POP
// end ; tmp := [ ] ;
7003: LD_ADDR_VAR 0 9
7007: PUSH
7008: EMPTY
7009: ST_TO_ADDR
// if mode then
7010: LD_VAR 0 5
7014: IFFALSE 7083
// begin for i = 1 to result do
7016: LD_ADDR_VAR 0 7
7020: PUSH
7021: DOUBLE
7022: LD_INT 1
7024: DEC
7025: ST_TO_ADDR
7026: LD_VAR 0 6
7030: PUSH
7031: FOR_TO
7032: IFFALSE 7071
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7034: LD_ADDR_VAR 0 9
7038: PUSH
7039: LD_VAR 0 9
7043: PPUSH
7044: LD_VAR 0 7
7048: PPUSH
7049: LD_VAR 0 6
7053: PUSH
7054: LD_VAR 0 7
7058: ARRAY
7059: PUSH
7060: LD_INT 1
7062: ARRAY
7063: PPUSH
7064: CALL_OW 1
7068: ST_TO_ADDR
7069: GO 7031
7071: POP
7072: POP
// result := tmp ;
7073: LD_ADDR_VAR 0 6
7077: PUSH
7078: LD_VAR 0 9
7082: ST_TO_ADDR
// end ; end ;
7083: LD_VAR 0 6
7087: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7088: LD_INT 0
7090: PPUSH
7091: PPUSH
7092: PPUSH
7093: PPUSH
7094: PPUSH
7095: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7096: LD_ADDR_VAR 0 5
7100: PUSH
7101: LD_INT 0
7103: PUSH
7104: LD_INT 0
7106: PUSH
7107: LD_INT 0
7109: PUSH
7110: EMPTY
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: ST_TO_ADDR
// if not x or not y then
7118: LD_VAR 0 2
7122: NOT
7123: PUSH
7124: LD_VAR 0 3
7128: NOT
7129: OR
7130: IFFALSE 7134
// exit ;
7132: GO 8786
// if not range then
7134: LD_VAR 0 4
7138: NOT
7139: IFFALSE 7149
// range := 10 ;
7141: LD_ADDR_VAR 0 4
7145: PUSH
7146: LD_INT 10
7148: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7149: LD_ADDR_VAR 0 8
7153: PUSH
7154: LD_INT 81
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 92
7168: PUSH
7169: LD_VAR 0 2
7173: PUSH
7174: LD_VAR 0 3
7178: PUSH
7179: LD_VAR 0 4
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 3
7192: PUSH
7193: LD_INT 21
7195: PUSH
7196: LD_INT 3
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: PPUSH
7212: CALL_OW 69
7216: ST_TO_ADDR
// if not tmp then
7217: LD_VAR 0 8
7221: NOT
7222: IFFALSE 7226
// exit ;
7224: GO 8786
// for i in tmp do
7226: LD_ADDR_VAR 0 6
7230: PUSH
7231: LD_VAR 0 8
7235: PUSH
7236: FOR_IN
7237: IFFALSE 8761
// begin points := [ 0 , 0 , 0 ] ;
7239: LD_ADDR_VAR 0 9
7243: PUSH
7244: LD_INT 0
7246: PUSH
7247: LD_INT 0
7249: PUSH
7250: LD_INT 0
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: ST_TO_ADDR
// bpoints := 1 ;
7258: LD_ADDR_VAR 0 10
7262: PUSH
7263: LD_INT 1
7265: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7266: LD_VAR 0 6
7270: PPUSH
7271: CALL_OW 247
7275: PUSH
7276: LD_INT 1
7278: DOUBLE
7279: EQUAL
7280: IFTRUE 7284
7282: GO 7862
7284: POP
// begin if GetClass ( i ) = 1 then
7285: LD_VAR 0 6
7289: PPUSH
7290: CALL_OW 257
7294: PUSH
7295: LD_INT 1
7297: EQUAL
7298: IFFALSE 7319
// points := [ 10 , 5 , 3 ] ;
7300: LD_ADDR_VAR 0 9
7304: PUSH
7305: LD_INT 10
7307: PUSH
7308: LD_INT 5
7310: PUSH
7311: LD_INT 3
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: LIST
7318: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7319: LD_VAR 0 6
7323: PPUSH
7324: CALL_OW 257
7328: PUSH
7329: LD_INT 2
7331: PUSH
7332: LD_INT 3
7334: PUSH
7335: LD_INT 4
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: LIST
7342: IN
7343: IFFALSE 7364
// points := [ 3 , 2 , 1 ] ;
7345: LD_ADDR_VAR 0 9
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: LD_INT 2
7355: PUSH
7356: LD_INT 1
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7364: LD_VAR 0 6
7368: PPUSH
7369: CALL_OW 257
7373: PUSH
7374: LD_INT 5
7376: EQUAL
7377: IFFALSE 7398
// points := [ 130 , 5 , 2 ] ;
7379: LD_ADDR_VAR 0 9
7383: PUSH
7384: LD_INT 130
7386: PUSH
7387: LD_INT 5
7389: PUSH
7390: LD_INT 2
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: LIST
7397: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7398: LD_VAR 0 6
7402: PPUSH
7403: CALL_OW 257
7407: PUSH
7408: LD_INT 8
7410: EQUAL
7411: IFFALSE 7432
// points := [ 35 , 35 , 30 ] ;
7413: LD_ADDR_VAR 0 9
7417: PUSH
7418: LD_INT 35
7420: PUSH
7421: LD_INT 35
7423: PUSH
7424: LD_INT 30
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: LIST
7431: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7432: LD_VAR 0 6
7436: PPUSH
7437: CALL_OW 257
7441: PUSH
7442: LD_INT 9
7444: EQUAL
7445: IFFALSE 7466
// points := [ 20 , 55 , 40 ] ;
7447: LD_ADDR_VAR 0 9
7451: PUSH
7452: LD_INT 20
7454: PUSH
7455: LD_INT 55
7457: PUSH
7458: LD_INT 40
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: LIST
7465: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7466: LD_VAR 0 6
7470: PPUSH
7471: CALL_OW 257
7475: PUSH
7476: LD_INT 12
7478: PUSH
7479: LD_INT 16
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: IN
7486: IFFALSE 7507
// points := [ 5 , 3 , 2 ] ;
7488: LD_ADDR_VAR 0 9
7492: PUSH
7493: LD_INT 5
7495: PUSH
7496: LD_INT 3
7498: PUSH
7499: LD_INT 2
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: LIST
7506: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7507: LD_VAR 0 6
7511: PPUSH
7512: CALL_OW 257
7516: PUSH
7517: LD_INT 17
7519: EQUAL
7520: IFFALSE 7541
// points := [ 100 , 50 , 75 ] ;
7522: LD_ADDR_VAR 0 9
7526: PUSH
7527: LD_INT 100
7529: PUSH
7530: LD_INT 50
7532: PUSH
7533: LD_INT 75
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: LIST
7540: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7541: LD_VAR 0 6
7545: PPUSH
7546: CALL_OW 257
7550: PUSH
7551: LD_INT 15
7553: EQUAL
7554: IFFALSE 7575
// points := [ 10 , 5 , 3 ] ;
7556: LD_ADDR_VAR 0 9
7560: PUSH
7561: LD_INT 10
7563: PUSH
7564: LD_INT 5
7566: PUSH
7567: LD_INT 3
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7575: LD_VAR 0 6
7579: PPUSH
7580: CALL_OW 257
7584: PUSH
7585: LD_INT 14
7587: EQUAL
7588: IFFALSE 7609
// points := [ 10 , 0 , 0 ] ;
7590: LD_ADDR_VAR 0 9
7594: PUSH
7595: LD_INT 10
7597: PUSH
7598: LD_INT 0
7600: PUSH
7601: LD_INT 0
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: LIST
7608: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7609: LD_VAR 0 6
7613: PPUSH
7614: CALL_OW 257
7618: PUSH
7619: LD_INT 11
7621: EQUAL
7622: IFFALSE 7643
// points := [ 30 , 10 , 5 ] ;
7624: LD_ADDR_VAR 0 9
7628: PUSH
7629: LD_INT 30
7631: PUSH
7632: LD_INT 10
7634: PUSH
7635: LD_INT 5
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: LIST
7642: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7643: LD_VAR 0 1
7647: PPUSH
7648: LD_INT 5
7650: PPUSH
7651: CALL_OW 321
7655: PUSH
7656: LD_INT 2
7658: EQUAL
7659: IFFALSE 7676
// bpoints := bpoints * 1.8 ;
7661: LD_ADDR_VAR 0 10
7665: PUSH
7666: LD_VAR 0 10
7670: PUSH
7671: LD_REAL  1.80000000000000E+0000
7674: MUL
7675: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7676: LD_VAR 0 6
7680: PPUSH
7681: CALL_OW 257
7685: PUSH
7686: LD_INT 1
7688: PUSH
7689: LD_INT 2
7691: PUSH
7692: LD_INT 3
7694: PUSH
7695: LD_INT 4
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: IN
7704: PUSH
7705: LD_VAR 0 1
7709: PPUSH
7710: LD_INT 51
7712: PPUSH
7713: CALL_OW 321
7717: PUSH
7718: LD_INT 2
7720: EQUAL
7721: AND
7722: IFFALSE 7739
// bpoints := bpoints * 1.2 ;
7724: LD_ADDR_VAR 0 10
7728: PUSH
7729: LD_VAR 0 10
7733: PUSH
7734: LD_REAL  1.20000000000000E+0000
7737: MUL
7738: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7739: LD_VAR 0 6
7743: PPUSH
7744: CALL_OW 257
7748: PUSH
7749: LD_INT 5
7751: PUSH
7752: LD_INT 7
7754: PUSH
7755: LD_INT 9
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: IN
7763: PUSH
7764: LD_VAR 0 1
7768: PPUSH
7769: LD_INT 52
7771: PPUSH
7772: CALL_OW 321
7776: PUSH
7777: LD_INT 2
7779: EQUAL
7780: AND
7781: IFFALSE 7798
// bpoints := bpoints * 1.5 ;
7783: LD_ADDR_VAR 0 10
7787: PUSH
7788: LD_VAR 0 10
7792: PUSH
7793: LD_REAL  1.50000000000000E+0000
7796: MUL
7797: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7798: LD_VAR 0 1
7802: PPUSH
7803: LD_INT 66
7805: PPUSH
7806: CALL_OW 321
7810: PUSH
7811: LD_INT 2
7813: EQUAL
7814: IFFALSE 7831
// bpoints := bpoints * 1.1 ;
7816: LD_ADDR_VAR 0 10
7820: PUSH
7821: LD_VAR 0 10
7825: PUSH
7826: LD_REAL  1.10000000000000E+0000
7829: MUL
7830: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7831: LD_ADDR_VAR 0 10
7835: PUSH
7836: LD_VAR 0 10
7840: PUSH
7841: LD_VAR 0 6
7845: PPUSH
7846: LD_INT 1
7848: PPUSH
7849: CALL_OW 259
7853: PUSH
7854: LD_REAL  1.15000000000000E+0000
7857: MUL
7858: MUL
7859: ST_TO_ADDR
// end ; unit_vehicle :
7860: GO 8690
7862: LD_INT 2
7864: DOUBLE
7865: EQUAL
7866: IFTRUE 7870
7868: GO 8678
7870: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7871: LD_VAR 0 6
7875: PPUSH
7876: CALL_OW 264
7880: PUSH
7881: LD_INT 2
7883: PUSH
7884: LD_INT 42
7886: PUSH
7887: LD_INT 24
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: LIST
7894: IN
7895: IFFALSE 7916
// points := [ 25 , 5 , 3 ] ;
7897: LD_ADDR_VAR 0 9
7901: PUSH
7902: LD_INT 25
7904: PUSH
7905: LD_INT 5
7907: PUSH
7908: LD_INT 3
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: LIST
7915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7916: LD_VAR 0 6
7920: PPUSH
7921: CALL_OW 264
7925: PUSH
7926: LD_INT 4
7928: PUSH
7929: LD_INT 43
7931: PUSH
7932: LD_INT 25
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: LIST
7939: IN
7940: IFFALSE 7961
// points := [ 40 , 15 , 5 ] ;
7942: LD_ADDR_VAR 0 9
7946: PUSH
7947: LD_INT 40
7949: PUSH
7950: LD_INT 15
7952: PUSH
7953: LD_INT 5
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: LIST
7960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7961: LD_VAR 0 6
7965: PPUSH
7966: CALL_OW 264
7970: PUSH
7971: LD_INT 3
7973: PUSH
7974: LD_INT 23
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: IN
7981: IFFALSE 8002
// points := [ 7 , 25 , 8 ] ;
7983: LD_ADDR_VAR 0 9
7987: PUSH
7988: LD_INT 7
7990: PUSH
7991: LD_INT 25
7993: PUSH
7994: LD_INT 8
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: LIST
8001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8002: LD_VAR 0 6
8006: PPUSH
8007: CALL_OW 264
8011: PUSH
8012: LD_INT 5
8014: PUSH
8015: LD_INT 27
8017: PUSH
8018: LD_INT 44
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: LIST
8025: IN
8026: IFFALSE 8047
// points := [ 14 , 50 , 16 ] ;
8028: LD_ADDR_VAR 0 9
8032: PUSH
8033: LD_INT 14
8035: PUSH
8036: LD_INT 50
8038: PUSH
8039: LD_INT 16
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: LIST
8046: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8047: LD_VAR 0 6
8051: PPUSH
8052: CALL_OW 264
8056: PUSH
8057: LD_INT 6
8059: PUSH
8060: LD_INT 46
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: IN
8067: IFFALSE 8088
// points := [ 32 , 120 , 70 ] ;
8069: LD_ADDR_VAR 0 9
8073: PUSH
8074: LD_INT 32
8076: PUSH
8077: LD_INT 120
8079: PUSH
8080: LD_INT 70
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8088: LD_VAR 0 6
8092: PPUSH
8093: CALL_OW 264
8097: PUSH
8098: LD_INT 7
8100: PUSH
8101: LD_INT 28
8103: PUSH
8104: LD_INT 45
8106: PUSH
8107: LD_EXP 21
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: IN
8118: IFFALSE 8139
// points := [ 35 , 20 , 45 ] ;
8120: LD_ADDR_VAR 0 9
8124: PUSH
8125: LD_INT 35
8127: PUSH
8128: LD_INT 20
8130: PUSH
8131: LD_INT 45
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8139: LD_VAR 0 6
8143: PPUSH
8144: CALL_OW 264
8148: PUSH
8149: LD_INT 47
8151: PUSH
8152: EMPTY
8153: LIST
8154: IN
8155: IFFALSE 8176
// points := [ 67 , 45 , 75 ] ;
8157: LD_ADDR_VAR 0 9
8161: PUSH
8162: LD_INT 67
8164: PUSH
8165: LD_INT 45
8167: PUSH
8168: LD_INT 75
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8176: LD_VAR 0 6
8180: PPUSH
8181: CALL_OW 264
8185: PUSH
8186: LD_INT 26
8188: PUSH
8189: EMPTY
8190: LIST
8191: IN
8192: IFFALSE 8213
// points := [ 120 , 30 , 80 ] ;
8194: LD_ADDR_VAR 0 9
8198: PUSH
8199: LD_INT 120
8201: PUSH
8202: LD_INT 30
8204: PUSH
8205: LD_INT 80
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: LIST
8212: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8213: LD_VAR 0 6
8217: PPUSH
8218: CALL_OW 264
8222: PUSH
8223: LD_INT 22
8225: PUSH
8226: EMPTY
8227: LIST
8228: IN
8229: IFFALSE 8250
// points := [ 40 , 1 , 1 ] ;
8231: LD_ADDR_VAR 0 9
8235: PUSH
8236: LD_INT 40
8238: PUSH
8239: LD_INT 1
8241: PUSH
8242: LD_INT 1
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: LIST
8249: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8250: LD_VAR 0 6
8254: PPUSH
8255: CALL_OW 264
8259: PUSH
8260: LD_INT 29
8262: PUSH
8263: EMPTY
8264: LIST
8265: IN
8266: IFFALSE 8287
// points := [ 70 , 200 , 400 ] ;
8268: LD_ADDR_VAR 0 9
8272: PUSH
8273: LD_INT 70
8275: PUSH
8276: LD_INT 200
8278: PUSH
8279: LD_INT 400
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: LIST
8286: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8287: LD_VAR 0 6
8291: PPUSH
8292: CALL_OW 264
8296: PUSH
8297: LD_INT 14
8299: PUSH
8300: LD_INT 53
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: IN
8307: IFFALSE 8328
// points := [ 40 , 10 , 20 ] ;
8309: LD_ADDR_VAR 0 9
8313: PUSH
8314: LD_INT 40
8316: PUSH
8317: LD_INT 10
8319: PUSH
8320: LD_INT 20
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8328: LD_VAR 0 6
8332: PPUSH
8333: CALL_OW 264
8337: PUSH
8338: LD_INT 9
8340: PUSH
8341: EMPTY
8342: LIST
8343: IN
8344: IFFALSE 8365
// points := [ 5 , 70 , 20 ] ;
8346: LD_ADDR_VAR 0 9
8350: PUSH
8351: LD_INT 5
8353: PUSH
8354: LD_INT 70
8356: PUSH
8357: LD_INT 20
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: LIST
8364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8365: LD_VAR 0 6
8369: PPUSH
8370: CALL_OW 264
8374: PUSH
8375: LD_INT 10
8377: PUSH
8378: EMPTY
8379: LIST
8380: IN
8381: IFFALSE 8402
// points := [ 35 , 110 , 70 ] ;
8383: LD_ADDR_VAR 0 9
8387: PUSH
8388: LD_INT 35
8390: PUSH
8391: LD_INT 110
8393: PUSH
8394: LD_INT 70
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: LIST
8401: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8402: LD_VAR 0 6
8406: PPUSH
8407: CALL_OW 265
8411: PUSH
8412: LD_INT 25
8414: EQUAL
8415: IFFALSE 8436
// points := [ 80 , 65 , 100 ] ;
8417: LD_ADDR_VAR 0 9
8421: PUSH
8422: LD_INT 80
8424: PUSH
8425: LD_INT 65
8427: PUSH
8428: LD_INT 100
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: LIST
8435: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8436: LD_VAR 0 6
8440: PPUSH
8441: CALL_OW 263
8445: PUSH
8446: LD_INT 1
8448: EQUAL
8449: IFFALSE 8484
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8451: LD_ADDR_VAR 0 10
8455: PUSH
8456: LD_VAR 0 10
8460: PUSH
8461: LD_VAR 0 6
8465: PPUSH
8466: CALL_OW 311
8470: PPUSH
8471: LD_INT 3
8473: PPUSH
8474: CALL_OW 259
8478: PUSH
8479: LD_INT 4
8481: MUL
8482: MUL
8483: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8484: LD_VAR 0 6
8488: PPUSH
8489: CALL_OW 263
8493: PUSH
8494: LD_INT 2
8496: EQUAL
8497: IFFALSE 8548
// begin j := IsControledBy ( i ) ;
8499: LD_ADDR_VAR 0 7
8503: PUSH
8504: LD_VAR 0 6
8508: PPUSH
8509: CALL_OW 312
8513: ST_TO_ADDR
// if j then
8514: LD_VAR 0 7
8518: IFFALSE 8548
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8520: LD_ADDR_VAR 0 10
8524: PUSH
8525: LD_VAR 0 10
8529: PUSH
8530: LD_VAR 0 7
8534: PPUSH
8535: LD_INT 3
8537: PPUSH
8538: CALL_OW 259
8542: PUSH
8543: LD_INT 3
8545: MUL
8546: MUL
8547: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8548: LD_VAR 0 6
8552: PPUSH
8553: CALL_OW 264
8557: PUSH
8558: LD_INT 5
8560: PUSH
8561: LD_INT 6
8563: PUSH
8564: LD_INT 46
8566: PUSH
8567: LD_INT 44
8569: PUSH
8570: LD_INT 47
8572: PUSH
8573: LD_INT 45
8575: PUSH
8576: LD_INT 28
8578: PUSH
8579: LD_INT 7
8581: PUSH
8582: LD_INT 27
8584: PUSH
8585: LD_INT 29
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: IN
8600: PUSH
8601: LD_VAR 0 1
8605: PPUSH
8606: LD_INT 52
8608: PPUSH
8609: CALL_OW 321
8613: PUSH
8614: LD_INT 2
8616: EQUAL
8617: AND
8618: IFFALSE 8635
// bpoints := bpoints * 1.2 ;
8620: LD_ADDR_VAR 0 10
8624: PUSH
8625: LD_VAR 0 10
8629: PUSH
8630: LD_REAL  1.20000000000000E+0000
8633: MUL
8634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8635: LD_VAR 0 6
8639: PPUSH
8640: CALL_OW 264
8644: PUSH
8645: LD_INT 6
8647: PUSH
8648: LD_INT 46
8650: PUSH
8651: LD_INT 47
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: LIST
8658: IN
8659: IFFALSE 8676
// bpoints := bpoints * 1.2 ;
8661: LD_ADDR_VAR 0 10
8665: PUSH
8666: LD_VAR 0 10
8670: PUSH
8671: LD_REAL  1.20000000000000E+0000
8674: MUL
8675: ST_TO_ADDR
// end ; unit_building :
8676: GO 8690
8678: LD_INT 3
8680: DOUBLE
8681: EQUAL
8682: IFTRUE 8686
8684: GO 8689
8686: POP
// ; end ;
8687: GO 8690
8689: POP
// for j = 1 to 3 do
8690: LD_ADDR_VAR 0 7
8694: PUSH
8695: DOUBLE
8696: LD_INT 1
8698: DEC
8699: ST_TO_ADDR
8700: LD_INT 3
8702: PUSH
8703: FOR_TO
8704: IFFALSE 8757
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8706: LD_ADDR_VAR 0 5
8710: PUSH
8711: LD_VAR 0 5
8715: PPUSH
8716: LD_VAR 0 7
8720: PPUSH
8721: LD_VAR 0 5
8725: PUSH
8726: LD_VAR 0 7
8730: ARRAY
8731: PUSH
8732: LD_VAR 0 9
8736: PUSH
8737: LD_VAR 0 7
8741: ARRAY
8742: PUSH
8743: LD_VAR 0 10
8747: MUL
8748: PLUS
8749: PPUSH
8750: CALL_OW 1
8754: ST_TO_ADDR
8755: GO 8703
8757: POP
8758: POP
// end ;
8759: GO 7236
8761: POP
8762: POP
// result := Replace ( result , 4 , tmp ) ;
8763: LD_ADDR_VAR 0 5
8767: PUSH
8768: LD_VAR 0 5
8772: PPUSH
8773: LD_INT 4
8775: PPUSH
8776: LD_VAR 0 8
8780: PPUSH
8781: CALL_OW 1
8785: ST_TO_ADDR
// end ;
8786: LD_VAR 0 5
8790: RET
// export function DangerAtRange ( unit , range ) ; begin
8791: LD_INT 0
8793: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8794: LD_ADDR_VAR 0 3
8798: PUSH
8799: LD_VAR 0 1
8803: PPUSH
8804: CALL_OW 255
8808: PPUSH
8809: LD_VAR 0 1
8813: PPUSH
8814: CALL_OW 250
8818: PPUSH
8819: LD_VAR 0 1
8823: PPUSH
8824: CALL_OW 251
8828: PPUSH
8829: LD_VAR 0 2
8833: PPUSH
8834: CALL 7088 0 4
8838: ST_TO_ADDR
// end ;
8839: LD_VAR 0 3
8843: RET
// export function DangerInArea ( side , area ) ; begin
8844: LD_INT 0
8846: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8847: LD_ADDR_VAR 0 3
8851: PUSH
8852: LD_VAR 0 2
8856: PPUSH
8857: LD_INT 81
8859: PUSH
8860: LD_VAR 0 1
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PPUSH
8869: CALL_OW 70
8873: ST_TO_ADDR
// end ;
8874: LD_VAR 0 3
8878: RET
// export function IsExtension ( b ) ; begin
8879: LD_INT 0
8881: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8882: LD_ADDR_VAR 0 2
8886: PUSH
8887: LD_VAR 0 1
8891: PUSH
8892: LD_INT 23
8894: PUSH
8895: LD_INT 20
8897: PUSH
8898: LD_INT 22
8900: PUSH
8901: LD_INT 17
8903: PUSH
8904: LD_INT 24
8906: PUSH
8907: LD_INT 21
8909: PUSH
8910: LD_INT 19
8912: PUSH
8913: LD_INT 16
8915: PUSH
8916: LD_INT 25
8918: PUSH
8919: LD_INT 18
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: IN
8934: ST_TO_ADDR
// end ;
8935: LD_VAR 0 2
8939: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8940: LD_INT 0
8942: PPUSH
8943: PPUSH
8944: PPUSH
// result := [ ] ;
8945: LD_ADDR_VAR 0 4
8949: PUSH
8950: EMPTY
8951: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8952: LD_ADDR_VAR 0 5
8956: PUSH
8957: LD_VAR 0 2
8961: PPUSH
8962: LD_INT 21
8964: PUSH
8965: LD_INT 3
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: PPUSH
8972: CALL_OW 70
8976: ST_TO_ADDR
// if not tmp then
8977: LD_VAR 0 5
8981: NOT
8982: IFFALSE 8986
// exit ;
8984: GO 9050
// if checkLink then
8986: LD_VAR 0 3
8990: IFFALSE 9040
// begin for i in tmp do
8992: LD_ADDR_VAR 0 6
8996: PUSH
8997: LD_VAR 0 5
9001: PUSH
9002: FOR_IN
9003: IFFALSE 9038
// if GetBase ( i ) <> base then
9005: LD_VAR 0 6
9009: PPUSH
9010: CALL_OW 274
9014: PUSH
9015: LD_VAR 0 1
9019: NONEQUAL
9020: IFFALSE 9036
// ComLinkToBase ( base , i ) ;
9022: LD_VAR 0 1
9026: PPUSH
9027: LD_VAR 0 6
9031: PPUSH
9032: CALL_OW 169
9036: GO 9002
9038: POP
9039: POP
// end ; result := tmp ;
9040: LD_ADDR_VAR 0 4
9044: PUSH
9045: LD_VAR 0 5
9049: ST_TO_ADDR
// end ;
9050: LD_VAR 0 4
9054: RET
// export function ComComplete ( units , b ) ; var i ; begin
9055: LD_INT 0
9057: PPUSH
9058: PPUSH
// if not units then
9059: LD_VAR 0 1
9063: NOT
9064: IFFALSE 9068
// exit ;
9066: GO 9158
// for i in units do
9068: LD_ADDR_VAR 0 4
9072: PUSH
9073: LD_VAR 0 1
9077: PUSH
9078: FOR_IN
9079: IFFALSE 9156
// if BuildingStatus ( b ) = bs_build then
9081: LD_VAR 0 2
9085: PPUSH
9086: CALL_OW 461
9090: PUSH
9091: LD_INT 1
9093: EQUAL
9094: IFFALSE 9154
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9096: LD_VAR 0 4
9100: PPUSH
9101: LD_STRING h
9103: PUSH
9104: LD_VAR 0 2
9108: PPUSH
9109: CALL_OW 250
9113: PUSH
9114: LD_VAR 0 2
9118: PPUSH
9119: CALL_OW 251
9123: PUSH
9124: LD_VAR 0 2
9128: PUSH
9129: LD_INT 0
9131: PUSH
9132: LD_INT 0
9134: PUSH
9135: LD_INT 0
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: PUSH
9147: EMPTY
9148: LIST
9149: PPUSH
9150: CALL_OW 446
9154: GO 9078
9156: POP
9157: POP
// end ;
9158: LD_VAR 0 3
9162: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9163: LD_INT 0
9165: PPUSH
9166: PPUSH
9167: PPUSH
9168: PPUSH
9169: PPUSH
9170: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9171: LD_VAR 0 1
9175: NOT
9176: PUSH
9177: LD_VAR 0 1
9181: PPUSH
9182: CALL_OW 263
9186: PUSH
9187: LD_INT 2
9189: NONEQUAL
9190: OR
9191: IFFALSE 9195
// exit ;
9193: GO 9511
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9195: LD_ADDR_VAR 0 6
9199: PUSH
9200: LD_INT 22
9202: PUSH
9203: LD_VAR 0 1
9207: PPUSH
9208: CALL_OW 255
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: LD_INT 2
9219: PUSH
9220: LD_INT 30
9222: PUSH
9223: LD_INT 36
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: LD_INT 34
9232: PUSH
9233: LD_INT 31
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: LIST
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: PPUSH
9249: CALL_OW 69
9253: ST_TO_ADDR
// if not tmp then
9254: LD_VAR 0 6
9258: NOT
9259: IFFALSE 9263
// exit ;
9261: GO 9511
// result := [ ] ;
9263: LD_ADDR_VAR 0 2
9267: PUSH
9268: EMPTY
9269: ST_TO_ADDR
// for i in tmp do
9270: LD_ADDR_VAR 0 3
9274: PUSH
9275: LD_VAR 0 6
9279: PUSH
9280: FOR_IN
9281: IFFALSE 9352
// begin t := UnitsInside ( i ) ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_VAR 0 3
9292: PPUSH
9293: CALL_OW 313
9297: ST_TO_ADDR
// if t then
9298: LD_VAR 0 4
9302: IFFALSE 9350
// for j in t do
9304: LD_ADDR_VAR 0 7
9308: PUSH
9309: LD_VAR 0 4
9313: PUSH
9314: FOR_IN
9315: IFFALSE 9348
// result := Replace ( result , result + 1 , j ) ;
9317: LD_ADDR_VAR 0 2
9321: PUSH
9322: LD_VAR 0 2
9326: PPUSH
9327: LD_VAR 0 2
9331: PUSH
9332: LD_INT 1
9334: PLUS
9335: PPUSH
9336: LD_VAR 0 7
9340: PPUSH
9341: CALL_OW 1
9345: ST_TO_ADDR
9346: GO 9314
9348: POP
9349: POP
// end ;
9350: GO 9280
9352: POP
9353: POP
// if not result then
9354: LD_VAR 0 2
9358: NOT
9359: IFFALSE 9363
// exit ;
9361: GO 9511
// mech := result [ 1 ] ;
9363: LD_ADDR_VAR 0 5
9367: PUSH
9368: LD_VAR 0 2
9372: PUSH
9373: LD_INT 1
9375: ARRAY
9376: ST_TO_ADDR
// if result > 1 then
9377: LD_VAR 0 2
9381: PUSH
9382: LD_INT 1
9384: GREATER
9385: IFFALSE 9497
// begin for i = 2 to result do
9387: LD_ADDR_VAR 0 3
9391: PUSH
9392: DOUBLE
9393: LD_INT 2
9395: DEC
9396: ST_TO_ADDR
9397: LD_VAR 0 2
9401: PUSH
9402: FOR_TO
9403: IFFALSE 9495
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9405: LD_ADDR_VAR 0 4
9409: PUSH
9410: LD_VAR 0 2
9414: PUSH
9415: LD_VAR 0 3
9419: ARRAY
9420: PPUSH
9421: LD_INT 3
9423: PPUSH
9424: CALL_OW 259
9428: PUSH
9429: LD_VAR 0 2
9433: PUSH
9434: LD_VAR 0 3
9438: ARRAY
9439: PPUSH
9440: CALL_OW 432
9444: MINUS
9445: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9446: LD_VAR 0 4
9450: PUSH
9451: LD_VAR 0 5
9455: PPUSH
9456: LD_INT 3
9458: PPUSH
9459: CALL_OW 259
9463: PUSH
9464: LD_VAR 0 5
9468: PPUSH
9469: CALL_OW 432
9473: MINUS
9474: GREATEREQUAL
9475: IFFALSE 9493
// mech := result [ i ] ;
9477: LD_ADDR_VAR 0 5
9481: PUSH
9482: LD_VAR 0 2
9486: PUSH
9487: LD_VAR 0 3
9491: ARRAY
9492: ST_TO_ADDR
// end ;
9493: GO 9402
9495: POP
9496: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9497: LD_VAR 0 1
9501: PPUSH
9502: LD_VAR 0 5
9506: PPUSH
9507: CALL_OW 135
// end ;
9511: LD_VAR 0 2
9515: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9516: LD_INT 0
9518: PPUSH
9519: PPUSH
9520: PPUSH
9521: PPUSH
9522: PPUSH
9523: PPUSH
9524: PPUSH
9525: PPUSH
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
9530: PPUSH
// result := [ ] ;
9531: LD_ADDR_VAR 0 7
9535: PUSH
9536: EMPTY
9537: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9538: LD_VAR 0 1
9542: PPUSH
9543: CALL_OW 266
9547: PUSH
9548: LD_INT 0
9550: PUSH
9551: LD_INT 1
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: IN
9558: NOT
9559: IFFALSE 9563
// exit ;
9561: GO 11197
// if name then
9563: LD_VAR 0 3
9567: IFFALSE 9583
// SetBName ( base_dep , name ) ;
9569: LD_VAR 0 1
9573: PPUSH
9574: LD_VAR 0 3
9578: PPUSH
9579: CALL_OW 500
// base := GetBase ( base_dep ) ;
9583: LD_ADDR_VAR 0 15
9587: PUSH
9588: LD_VAR 0 1
9592: PPUSH
9593: CALL_OW 274
9597: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9598: LD_ADDR_VAR 0 16
9602: PUSH
9603: LD_VAR 0 1
9607: PPUSH
9608: CALL_OW 255
9612: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9613: LD_ADDR_VAR 0 17
9617: PUSH
9618: LD_VAR 0 1
9622: PPUSH
9623: CALL_OW 248
9627: ST_TO_ADDR
// if sources then
9628: LD_VAR 0 5
9632: IFFALSE 9679
// for i = 1 to 3 do
9634: LD_ADDR_VAR 0 8
9638: PUSH
9639: DOUBLE
9640: LD_INT 1
9642: DEC
9643: ST_TO_ADDR
9644: LD_INT 3
9646: PUSH
9647: FOR_TO
9648: IFFALSE 9677
// AddResourceType ( base , i , sources [ i ] ) ;
9650: LD_VAR 0 15
9654: PPUSH
9655: LD_VAR 0 8
9659: PPUSH
9660: LD_VAR 0 5
9664: PUSH
9665: LD_VAR 0 8
9669: ARRAY
9670: PPUSH
9671: CALL_OW 276
9675: GO 9647
9677: POP
9678: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9679: LD_ADDR_VAR 0 18
9683: PUSH
9684: LD_VAR 0 15
9688: PPUSH
9689: LD_VAR 0 2
9693: PPUSH
9694: LD_INT 1
9696: PPUSH
9697: CALL 8940 0 3
9701: ST_TO_ADDR
// InitHc ;
9702: CALL_OW 19
// InitUc ;
9706: CALL_OW 18
// uc_side := side ;
9710: LD_ADDR_OWVAR 20
9714: PUSH
9715: LD_VAR 0 16
9719: ST_TO_ADDR
// uc_nation := nation ;
9720: LD_ADDR_OWVAR 21
9724: PUSH
9725: LD_VAR 0 17
9729: ST_TO_ADDR
// if buildings then
9730: LD_VAR 0 18
9734: IFFALSE 11056
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9736: LD_ADDR_VAR 0 19
9740: PUSH
9741: LD_VAR 0 18
9745: PPUSH
9746: LD_INT 2
9748: PUSH
9749: LD_INT 30
9751: PUSH
9752: LD_INT 29
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: LD_INT 30
9761: PUSH
9762: LD_INT 30
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: LIST
9773: PPUSH
9774: CALL_OW 72
9778: ST_TO_ADDR
// if tmp then
9779: LD_VAR 0 19
9783: IFFALSE 9831
// for i in tmp do
9785: LD_ADDR_VAR 0 8
9789: PUSH
9790: LD_VAR 0 19
9794: PUSH
9795: FOR_IN
9796: IFFALSE 9829
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9798: LD_VAR 0 8
9802: PPUSH
9803: CALL_OW 250
9807: PPUSH
9808: LD_VAR 0 8
9812: PPUSH
9813: CALL_OW 251
9817: PPUSH
9818: LD_VAR 0 16
9822: PPUSH
9823: CALL_OW 441
9827: GO 9795
9829: POP
9830: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9831: LD_VAR 0 18
9835: PPUSH
9836: LD_INT 2
9838: PUSH
9839: LD_INT 30
9841: PUSH
9842: LD_INT 32
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: PUSH
9849: LD_INT 30
9851: PUSH
9852: LD_INT 33
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: LIST
9863: PPUSH
9864: CALL_OW 72
9868: IFFALSE 9956
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9870: LD_ADDR_VAR 0 8
9874: PUSH
9875: LD_VAR 0 18
9879: PPUSH
9880: LD_INT 2
9882: PUSH
9883: LD_INT 30
9885: PUSH
9886: LD_INT 32
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PUSH
9893: LD_INT 30
9895: PUSH
9896: LD_INT 33
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: LIST
9907: PPUSH
9908: CALL_OW 72
9912: PUSH
9913: FOR_IN
9914: IFFALSE 9954
// begin if not GetBWeapon ( i ) then
9916: LD_VAR 0 8
9920: PPUSH
9921: CALL_OW 269
9925: NOT
9926: IFFALSE 9952
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9928: LD_VAR 0 8
9932: PPUSH
9933: LD_VAR 0 8
9937: PPUSH
9938: LD_VAR 0 2
9942: PPUSH
9943: CALL 11202 0 2
9947: PPUSH
9948: CALL_OW 431
// end ;
9952: GO 9913
9954: POP
9955: POP
// end ; for i = 1 to personel do
9956: LD_ADDR_VAR 0 8
9960: PUSH
9961: DOUBLE
9962: LD_INT 1
9964: DEC
9965: ST_TO_ADDR
9966: LD_VAR 0 6
9970: PUSH
9971: FOR_TO
9972: IFFALSE 11036
// begin if i > 4 then
9974: LD_VAR 0 8
9978: PUSH
9979: LD_INT 4
9981: GREATER
9982: IFFALSE 9986
// break ;
9984: GO 11036
// case i of 1 :
9986: LD_VAR 0 8
9990: PUSH
9991: LD_INT 1
9993: DOUBLE
9994: EQUAL
9995: IFTRUE 9999
9997: GO 10079
9999: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10000: LD_ADDR_VAR 0 12
10004: PUSH
10005: LD_VAR 0 18
10009: PPUSH
10010: LD_INT 22
10012: PUSH
10013: LD_VAR 0 16
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PUSH
10022: LD_INT 58
10024: PUSH
10025: EMPTY
10026: LIST
10027: PUSH
10028: LD_INT 2
10030: PUSH
10031: LD_INT 30
10033: PUSH
10034: LD_INT 32
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PUSH
10041: LD_INT 30
10043: PUSH
10044: LD_INT 4
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: LD_INT 30
10053: PUSH
10054: LD_INT 5
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: LIST
10071: PPUSH
10072: CALL_OW 72
10076: ST_TO_ADDR
10077: GO 10301
10079: LD_INT 2
10081: DOUBLE
10082: EQUAL
10083: IFTRUE 10087
10085: GO 10149
10087: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10088: LD_ADDR_VAR 0 12
10092: PUSH
10093: LD_VAR 0 18
10097: PPUSH
10098: LD_INT 22
10100: PUSH
10101: LD_VAR 0 16
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: LD_INT 2
10112: PUSH
10113: LD_INT 30
10115: PUSH
10116: LD_INT 0
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 30
10125: PUSH
10126: LD_INT 1
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PPUSH
10142: CALL_OW 72
10146: ST_TO_ADDR
10147: GO 10301
10149: LD_INT 3
10151: DOUBLE
10152: EQUAL
10153: IFTRUE 10157
10155: GO 10219
10157: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10158: LD_ADDR_VAR 0 12
10162: PUSH
10163: LD_VAR 0 18
10167: PPUSH
10168: LD_INT 22
10170: PUSH
10171: LD_VAR 0 16
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 2
10182: PUSH
10183: LD_INT 30
10185: PUSH
10186: LD_INT 2
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: LD_INT 30
10195: PUSH
10196: LD_INT 3
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: LIST
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PPUSH
10212: CALL_OW 72
10216: ST_TO_ADDR
10217: GO 10301
10219: LD_INT 4
10221: DOUBLE
10222: EQUAL
10223: IFTRUE 10227
10225: GO 10300
10227: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10228: LD_ADDR_VAR 0 12
10232: PUSH
10233: LD_VAR 0 18
10237: PPUSH
10238: LD_INT 22
10240: PUSH
10241: LD_VAR 0 16
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PUSH
10250: LD_INT 2
10252: PUSH
10253: LD_INT 30
10255: PUSH
10256: LD_INT 6
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 30
10265: PUSH
10266: LD_INT 7
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: LD_INT 30
10275: PUSH
10276: LD_INT 8
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PPUSH
10293: CALL_OW 72
10297: ST_TO_ADDR
10298: GO 10301
10300: POP
// if i = 1 then
10301: LD_VAR 0 8
10305: PUSH
10306: LD_INT 1
10308: EQUAL
10309: IFFALSE 10420
// begin tmp := [ ] ;
10311: LD_ADDR_VAR 0 19
10315: PUSH
10316: EMPTY
10317: ST_TO_ADDR
// for j in f do
10318: LD_ADDR_VAR 0 9
10322: PUSH
10323: LD_VAR 0 12
10327: PUSH
10328: FOR_IN
10329: IFFALSE 10402
// if GetBType ( j ) = b_bunker then
10331: LD_VAR 0 9
10335: PPUSH
10336: CALL_OW 266
10340: PUSH
10341: LD_INT 32
10343: EQUAL
10344: IFFALSE 10371
// tmp := Insert ( tmp , 1 , j ) else
10346: LD_ADDR_VAR 0 19
10350: PUSH
10351: LD_VAR 0 19
10355: PPUSH
10356: LD_INT 1
10358: PPUSH
10359: LD_VAR 0 9
10363: PPUSH
10364: CALL_OW 2
10368: ST_TO_ADDR
10369: GO 10400
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10371: LD_ADDR_VAR 0 19
10375: PUSH
10376: LD_VAR 0 19
10380: PPUSH
10381: LD_VAR 0 19
10385: PUSH
10386: LD_INT 1
10388: PLUS
10389: PPUSH
10390: LD_VAR 0 9
10394: PPUSH
10395: CALL_OW 2
10399: ST_TO_ADDR
10400: GO 10328
10402: POP
10403: POP
// if tmp then
10404: LD_VAR 0 19
10408: IFFALSE 10420
// f := tmp ;
10410: LD_ADDR_VAR 0 12
10414: PUSH
10415: LD_VAR 0 19
10419: ST_TO_ADDR
// end ; x := personel [ i ] ;
10420: LD_ADDR_VAR 0 13
10424: PUSH
10425: LD_VAR 0 6
10429: PUSH
10430: LD_VAR 0 8
10434: ARRAY
10435: ST_TO_ADDR
// if x = - 1 then
10436: LD_VAR 0 13
10440: PUSH
10441: LD_INT 1
10443: NEG
10444: EQUAL
10445: IFFALSE 10654
// begin for j in f do
10447: LD_ADDR_VAR 0 9
10451: PUSH
10452: LD_VAR 0 12
10456: PUSH
10457: FOR_IN
10458: IFFALSE 10650
// repeat InitHc ;
10460: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10464: LD_VAR 0 9
10468: PPUSH
10469: CALL_OW 266
10473: PUSH
10474: LD_INT 5
10476: EQUAL
10477: IFFALSE 10547
// begin if UnitsInside ( j ) < 3 then
10479: LD_VAR 0 9
10483: PPUSH
10484: CALL_OW 313
10488: PUSH
10489: LD_INT 3
10491: LESS
10492: IFFALSE 10528
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10494: LD_INT 0
10496: PPUSH
10497: LD_INT 5
10499: PUSH
10500: LD_INT 8
10502: PUSH
10503: LD_INT 9
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: LIST
10510: PUSH
10511: LD_VAR 0 17
10515: ARRAY
10516: PPUSH
10517: LD_VAR 0 4
10521: PPUSH
10522: CALL_OW 380
10526: GO 10545
// PrepareHuman ( false , i , skill ) ;
10528: LD_INT 0
10530: PPUSH
10531: LD_VAR 0 8
10535: PPUSH
10536: LD_VAR 0 4
10540: PPUSH
10541: CALL_OW 380
// end else
10545: GO 10564
// PrepareHuman ( false , i , skill ) ;
10547: LD_INT 0
10549: PPUSH
10550: LD_VAR 0 8
10554: PPUSH
10555: LD_VAR 0 4
10559: PPUSH
10560: CALL_OW 380
// un := CreateHuman ;
10564: LD_ADDR_VAR 0 14
10568: PUSH
10569: CALL_OW 44
10573: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10574: LD_ADDR_VAR 0 7
10578: PUSH
10579: LD_VAR 0 7
10583: PPUSH
10584: LD_INT 1
10586: PPUSH
10587: LD_VAR 0 14
10591: PPUSH
10592: CALL_OW 2
10596: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10597: LD_VAR 0 14
10601: PPUSH
10602: LD_VAR 0 9
10606: PPUSH
10607: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10611: LD_VAR 0 9
10615: PPUSH
10616: CALL_OW 313
10620: PUSH
10621: LD_INT 6
10623: EQUAL
10624: PUSH
10625: LD_VAR 0 9
10629: PPUSH
10630: CALL_OW 266
10634: PUSH
10635: LD_INT 32
10637: PUSH
10638: LD_INT 31
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: IN
10645: OR
10646: IFFALSE 10460
10648: GO 10457
10650: POP
10651: POP
// end else
10652: GO 11034
// for j = 1 to x do
10654: LD_ADDR_VAR 0 9
10658: PUSH
10659: DOUBLE
10660: LD_INT 1
10662: DEC
10663: ST_TO_ADDR
10664: LD_VAR 0 13
10668: PUSH
10669: FOR_TO
10670: IFFALSE 11032
// begin InitHc ;
10672: CALL_OW 19
// if not f then
10676: LD_VAR 0 12
10680: NOT
10681: IFFALSE 10770
// begin PrepareHuman ( false , i , skill ) ;
10683: LD_INT 0
10685: PPUSH
10686: LD_VAR 0 8
10690: PPUSH
10691: LD_VAR 0 4
10695: PPUSH
10696: CALL_OW 380
// un := CreateHuman ;
10700: LD_ADDR_VAR 0 14
10704: PUSH
10705: CALL_OW 44
10709: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10710: LD_ADDR_VAR 0 7
10714: PUSH
10715: LD_VAR 0 7
10719: PPUSH
10720: LD_INT 1
10722: PPUSH
10723: LD_VAR 0 14
10727: PPUSH
10728: CALL_OW 2
10732: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10733: LD_VAR 0 14
10737: PPUSH
10738: LD_VAR 0 1
10742: PPUSH
10743: CALL_OW 250
10747: PPUSH
10748: LD_VAR 0 1
10752: PPUSH
10753: CALL_OW 251
10757: PPUSH
10758: LD_INT 10
10760: PPUSH
10761: LD_INT 0
10763: PPUSH
10764: CALL_OW 50
// continue ;
10768: GO 10669
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10770: LD_VAR 0 12
10774: PUSH
10775: LD_INT 1
10777: ARRAY
10778: PPUSH
10779: CALL_OW 313
10783: PUSH
10784: LD_VAR 0 12
10788: PUSH
10789: LD_INT 1
10791: ARRAY
10792: PPUSH
10793: CALL_OW 266
10797: PUSH
10798: LD_INT 32
10800: PUSH
10801: LD_INT 31
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: IN
10808: AND
10809: PUSH
10810: LD_VAR 0 12
10814: PUSH
10815: LD_INT 1
10817: ARRAY
10818: PPUSH
10819: CALL_OW 313
10823: PUSH
10824: LD_INT 6
10826: EQUAL
10827: OR
10828: IFFALSE 10848
// f := Delete ( f , 1 ) ;
10830: LD_ADDR_VAR 0 12
10834: PUSH
10835: LD_VAR 0 12
10839: PPUSH
10840: LD_INT 1
10842: PPUSH
10843: CALL_OW 3
10847: ST_TO_ADDR
// if not f then
10848: LD_VAR 0 12
10852: NOT
10853: IFFALSE 10871
// begin x := x + 2 ;
10855: LD_ADDR_VAR 0 13
10859: PUSH
10860: LD_VAR 0 13
10864: PUSH
10865: LD_INT 2
10867: PLUS
10868: ST_TO_ADDR
// continue ;
10869: GO 10669
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10871: LD_VAR 0 12
10875: PUSH
10876: LD_INT 1
10878: ARRAY
10879: PPUSH
10880: CALL_OW 266
10884: PUSH
10885: LD_INT 5
10887: EQUAL
10888: IFFALSE 10962
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10890: LD_VAR 0 12
10894: PUSH
10895: LD_INT 1
10897: ARRAY
10898: PPUSH
10899: CALL_OW 313
10903: PUSH
10904: LD_INT 3
10906: LESS
10907: IFFALSE 10943
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10909: LD_INT 0
10911: PPUSH
10912: LD_INT 5
10914: PUSH
10915: LD_INT 8
10917: PUSH
10918: LD_INT 9
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: PUSH
10926: LD_VAR 0 17
10930: ARRAY
10931: PPUSH
10932: LD_VAR 0 4
10936: PPUSH
10937: CALL_OW 380
10941: GO 10960
// PrepareHuman ( false , i , skill ) ;
10943: LD_INT 0
10945: PPUSH
10946: LD_VAR 0 8
10950: PPUSH
10951: LD_VAR 0 4
10955: PPUSH
10956: CALL_OW 380
// end else
10960: GO 10979
// PrepareHuman ( false , i , skill ) ;
10962: LD_INT 0
10964: PPUSH
10965: LD_VAR 0 8
10969: PPUSH
10970: LD_VAR 0 4
10974: PPUSH
10975: CALL_OW 380
// un := CreateHuman ;
10979: LD_ADDR_VAR 0 14
10983: PUSH
10984: CALL_OW 44
10988: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10989: LD_ADDR_VAR 0 7
10993: PUSH
10994: LD_VAR 0 7
10998: PPUSH
10999: LD_INT 1
11001: PPUSH
11002: LD_VAR 0 14
11006: PPUSH
11007: CALL_OW 2
11011: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11012: LD_VAR 0 14
11016: PPUSH
11017: LD_VAR 0 12
11021: PUSH
11022: LD_INT 1
11024: ARRAY
11025: PPUSH
11026: CALL_OW 52
// end ;
11030: GO 10669
11032: POP
11033: POP
// end ;
11034: GO 9971
11036: POP
11037: POP
// result := result ^ buildings ;
11038: LD_ADDR_VAR 0 7
11042: PUSH
11043: LD_VAR 0 7
11047: PUSH
11048: LD_VAR 0 18
11052: ADD
11053: ST_TO_ADDR
// end else
11054: GO 11197
// begin for i = 1 to personel do
11056: LD_ADDR_VAR 0 8
11060: PUSH
11061: DOUBLE
11062: LD_INT 1
11064: DEC
11065: ST_TO_ADDR
11066: LD_VAR 0 6
11070: PUSH
11071: FOR_TO
11072: IFFALSE 11195
// begin if i > 4 then
11074: LD_VAR 0 8
11078: PUSH
11079: LD_INT 4
11081: GREATER
11082: IFFALSE 11086
// break ;
11084: GO 11195
// x := personel [ i ] ;
11086: LD_ADDR_VAR 0 13
11090: PUSH
11091: LD_VAR 0 6
11095: PUSH
11096: LD_VAR 0 8
11100: ARRAY
11101: ST_TO_ADDR
// if x = - 1 then
11102: LD_VAR 0 13
11106: PUSH
11107: LD_INT 1
11109: NEG
11110: EQUAL
11111: IFFALSE 11115
// continue ;
11113: GO 11071
// PrepareHuman ( false , i , skill ) ;
11115: LD_INT 0
11117: PPUSH
11118: LD_VAR 0 8
11122: PPUSH
11123: LD_VAR 0 4
11127: PPUSH
11128: CALL_OW 380
// un := CreateHuman ;
11132: LD_ADDR_VAR 0 14
11136: PUSH
11137: CALL_OW 44
11141: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11142: LD_VAR 0 14
11146: PPUSH
11147: LD_VAR 0 1
11151: PPUSH
11152: CALL_OW 250
11156: PPUSH
11157: LD_VAR 0 1
11161: PPUSH
11162: CALL_OW 251
11166: PPUSH
11167: LD_INT 10
11169: PPUSH
11170: LD_INT 0
11172: PPUSH
11173: CALL_OW 50
// result := result ^ un ;
11177: LD_ADDR_VAR 0 7
11181: PUSH
11182: LD_VAR 0 7
11186: PUSH
11187: LD_VAR 0 14
11191: ADD
11192: ST_TO_ADDR
// end ;
11193: GO 11071
11195: POP
11196: POP
// end ; end ;
11197: LD_VAR 0 7
11201: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11202: LD_INT 0
11204: PPUSH
11205: PPUSH
11206: PPUSH
11207: PPUSH
11208: PPUSH
11209: PPUSH
11210: PPUSH
11211: PPUSH
11212: PPUSH
11213: PPUSH
11214: PPUSH
11215: PPUSH
11216: PPUSH
11217: PPUSH
11218: PPUSH
11219: PPUSH
// result := false ;
11220: LD_ADDR_VAR 0 3
11224: PUSH
11225: LD_INT 0
11227: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11228: LD_VAR 0 1
11232: NOT
11233: PUSH
11234: LD_VAR 0 1
11238: PPUSH
11239: CALL_OW 266
11243: PUSH
11244: LD_INT 32
11246: PUSH
11247: LD_INT 33
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: IN
11254: NOT
11255: OR
11256: IFFALSE 11260
// exit ;
11258: GO 12369
// nat := GetNation ( tower ) ;
11260: LD_ADDR_VAR 0 12
11264: PUSH
11265: LD_VAR 0 1
11269: PPUSH
11270: CALL_OW 248
11274: ST_TO_ADDR
// side := GetSide ( tower ) ;
11275: LD_ADDR_VAR 0 16
11279: PUSH
11280: LD_VAR 0 1
11284: PPUSH
11285: CALL_OW 255
11289: ST_TO_ADDR
// x := GetX ( tower ) ;
11290: LD_ADDR_VAR 0 10
11294: PUSH
11295: LD_VAR 0 1
11299: PPUSH
11300: CALL_OW 250
11304: ST_TO_ADDR
// y := GetY ( tower ) ;
11305: LD_ADDR_VAR 0 11
11309: PUSH
11310: LD_VAR 0 1
11314: PPUSH
11315: CALL_OW 251
11319: ST_TO_ADDR
// if not x or not y then
11320: LD_VAR 0 10
11324: NOT
11325: PUSH
11326: LD_VAR 0 11
11330: NOT
11331: OR
11332: IFFALSE 11336
// exit ;
11334: GO 12369
// weapon := 0 ;
11336: LD_ADDR_VAR 0 18
11340: PUSH
11341: LD_INT 0
11343: ST_TO_ADDR
// fac_list := [ ] ;
11344: LD_ADDR_VAR 0 17
11348: PUSH
11349: EMPTY
11350: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11351: LD_ADDR_VAR 0 6
11355: PUSH
11356: LD_VAR 0 1
11360: PPUSH
11361: CALL_OW 274
11365: PPUSH
11366: LD_VAR 0 2
11370: PPUSH
11371: LD_INT 0
11373: PPUSH
11374: CALL 8940 0 3
11378: PPUSH
11379: LD_INT 30
11381: PUSH
11382: LD_INT 3
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PPUSH
11389: CALL_OW 72
11393: ST_TO_ADDR
// if not factories then
11394: LD_VAR 0 6
11398: NOT
11399: IFFALSE 11403
// exit ;
11401: GO 12369
// for i in factories do
11403: LD_ADDR_VAR 0 8
11407: PUSH
11408: LD_VAR 0 6
11412: PUSH
11413: FOR_IN
11414: IFFALSE 11439
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11416: LD_ADDR_VAR 0 17
11420: PUSH
11421: LD_VAR 0 17
11425: PUSH
11426: LD_VAR 0 8
11430: PPUSH
11431: CALL_OW 478
11435: UNION
11436: ST_TO_ADDR
11437: GO 11413
11439: POP
11440: POP
// if not fac_list then
11441: LD_VAR 0 17
11445: NOT
11446: IFFALSE 11450
// exit ;
11448: GO 12369
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11450: LD_ADDR_VAR 0 5
11454: PUSH
11455: LD_INT 4
11457: PUSH
11458: LD_INT 5
11460: PUSH
11461: LD_INT 9
11463: PUSH
11464: LD_INT 10
11466: PUSH
11467: LD_INT 6
11469: PUSH
11470: LD_INT 7
11472: PUSH
11473: LD_INT 11
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: PUSH
11485: LD_INT 27
11487: PUSH
11488: LD_INT 28
11490: PUSH
11491: LD_INT 26
11493: PUSH
11494: LD_INT 30
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: PUSH
11503: LD_INT 43
11505: PUSH
11506: LD_INT 44
11508: PUSH
11509: LD_INT 46
11511: PUSH
11512: LD_INT 45
11514: PUSH
11515: LD_INT 47
11517: PUSH
11518: LD_INT 49
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: LIST
11533: PUSH
11534: LD_VAR 0 12
11538: ARRAY
11539: ST_TO_ADDR
// list := list isect fac_list ;
11540: LD_ADDR_VAR 0 5
11544: PUSH
11545: LD_VAR 0 5
11549: PUSH
11550: LD_VAR 0 17
11554: ISECT
11555: ST_TO_ADDR
// if not list then
11556: LD_VAR 0 5
11560: NOT
11561: IFFALSE 11565
// exit ;
11563: GO 12369
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11565: LD_VAR 0 12
11569: PUSH
11570: LD_INT 3
11572: EQUAL
11573: PUSH
11574: LD_INT 49
11576: PUSH
11577: LD_VAR 0 5
11581: IN
11582: AND
11583: PUSH
11584: LD_INT 31
11586: PPUSH
11587: LD_VAR 0 16
11591: PPUSH
11592: CALL_OW 321
11596: PUSH
11597: LD_INT 2
11599: EQUAL
11600: AND
11601: IFFALSE 11661
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11603: LD_INT 22
11605: PUSH
11606: LD_VAR 0 16
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 35
11617: PUSH
11618: LD_INT 49
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: LD_INT 91
11627: PUSH
11628: LD_VAR 0 1
11632: PUSH
11633: LD_INT 10
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: LIST
11645: PPUSH
11646: CALL_OW 69
11650: NOT
11651: IFFALSE 11661
// weapon := ru_time_lapser ;
11653: LD_ADDR_VAR 0 18
11657: PUSH
11658: LD_INT 49
11660: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11661: LD_VAR 0 12
11665: PUSH
11666: LD_INT 1
11668: PUSH
11669: LD_INT 2
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: IN
11676: PUSH
11677: LD_INT 11
11679: PUSH
11680: LD_VAR 0 5
11684: IN
11685: PUSH
11686: LD_INT 30
11688: PUSH
11689: LD_VAR 0 5
11693: IN
11694: OR
11695: AND
11696: PUSH
11697: LD_INT 6
11699: PPUSH
11700: LD_VAR 0 16
11704: PPUSH
11705: CALL_OW 321
11709: PUSH
11710: LD_INT 2
11712: EQUAL
11713: AND
11714: IFFALSE 11879
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11716: LD_INT 22
11718: PUSH
11719: LD_VAR 0 16
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: PUSH
11728: LD_INT 2
11730: PUSH
11731: LD_INT 35
11733: PUSH
11734: LD_INT 11
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 35
11743: PUSH
11744: LD_INT 30
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: PUSH
11756: LD_INT 91
11758: PUSH
11759: LD_VAR 0 1
11763: PUSH
11764: LD_INT 18
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: LIST
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: LIST
11776: PPUSH
11777: CALL_OW 69
11781: NOT
11782: PUSH
11783: LD_INT 22
11785: PUSH
11786: LD_VAR 0 16
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 2
11797: PUSH
11798: LD_INT 30
11800: PUSH
11801: LD_INT 32
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: PUSH
11808: LD_INT 30
11810: PUSH
11811: LD_INT 33
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: LIST
11822: PUSH
11823: LD_INT 91
11825: PUSH
11826: LD_VAR 0 1
11830: PUSH
11831: LD_INT 12
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: LIST
11843: PUSH
11844: EMPTY
11845: LIST
11846: PPUSH
11847: CALL_OW 69
11851: PUSH
11852: LD_INT 2
11854: GREATER
11855: AND
11856: IFFALSE 11879
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11858: LD_ADDR_VAR 0 18
11862: PUSH
11863: LD_INT 11
11865: PUSH
11866: LD_INT 30
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_VAR 0 12
11877: ARRAY
11878: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11879: LD_VAR 0 18
11883: NOT
11884: PUSH
11885: LD_INT 40
11887: PPUSH
11888: LD_VAR 0 16
11892: PPUSH
11893: CALL_OW 321
11897: PUSH
11898: LD_INT 2
11900: EQUAL
11901: AND
11902: PUSH
11903: LD_INT 7
11905: PUSH
11906: LD_VAR 0 5
11910: IN
11911: PUSH
11912: LD_INT 28
11914: PUSH
11915: LD_VAR 0 5
11919: IN
11920: OR
11921: PUSH
11922: LD_INT 45
11924: PUSH
11925: LD_VAR 0 5
11929: IN
11930: OR
11931: AND
11932: IFFALSE 12186
// begin hex := GetHexInfo ( x , y ) ;
11934: LD_ADDR_VAR 0 4
11938: PUSH
11939: LD_VAR 0 10
11943: PPUSH
11944: LD_VAR 0 11
11948: PPUSH
11949: CALL_OW 546
11953: ST_TO_ADDR
// if hex [ 1 ] then
11954: LD_VAR 0 4
11958: PUSH
11959: LD_INT 1
11961: ARRAY
11962: IFFALSE 11966
// exit ;
11964: GO 12369
// height := hex [ 2 ] ;
11966: LD_ADDR_VAR 0 15
11970: PUSH
11971: LD_VAR 0 4
11975: PUSH
11976: LD_INT 2
11978: ARRAY
11979: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11980: LD_ADDR_VAR 0 14
11984: PUSH
11985: LD_INT 0
11987: PUSH
11988: LD_INT 2
11990: PUSH
11991: LD_INT 3
11993: PUSH
11994: LD_INT 5
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: ST_TO_ADDR
// for i in tmp do
12003: LD_ADDR_VAR 0 8
12007: PUSH
12008: LD_VAR 0 14
12012: PUSH
12013: FOR_IN
12014: IFFALSE 12184
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12016: LD_ADDR_VAR 0 9
12020: PUSH
12021: LD_VAR 0 10
12025: PPUSH
12026: LD_VAR 0 8
12030: PPUSH
12031: LD_INT 5
12033: PPUSH
12034: CALL_OW 272
12038: PUSH
12039: LD_VAR 0 11
12043: PPUSH
12044: LD_VAR 0 8
12048: PPUSH
12049: LD_INT 5
12051: PPUSH
12052: CALL_OW 273
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12061: LD_VAR 0 9
12065: PUSH
12066: LD_INT 1
12068: ARRAY
12069: PPUSH
12070: LD_VAR 0 9
12074: PUSH
12075: LD_INT 2
12077: ARRAY
12078: PPUSH
12079: CALL_OW 488
12083: IFFALSE 12182
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12085: LD_ADDR_VAR 0 4
12089: PUSH
12090: LD_VAR 0 9
12094: PUSH
12095: LD_INT 1
12097: ARRAY
12098: PPUSH
12099: LD_VAR 0 9
12103: PUSH
12104: LD_INT 2
12106: ARRAY
12107: PPUSH
12108: CALL_OW 546
12112: ST_TO_ADDR
// if hex [ 1 ] then
12113: LD_VAR 0 4
12117: PUSH
12118: LD_INT 1
12120: ARRAY
12121: IFFALSE 12125
// continue ;
12123: GO 12013
// h := hex [ 2 ] ;
12125: LD_ADDR_VAR 0 13
12129: PUSH
12130: LD_VAR 0 4
12134: PUSH
12135: LD_INT 2
12137: ARRAY
12138: ST_TO_ADDR
// if h + 7 < height then
12139: LD_VAR 0 13
12143: PUSH
12144: LD_INT 7
12146: PLUS
12147: PUSH
12148: LD_VAR 0 15
12152: LESS
12153: IFFALSE 12182
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12155: LD_ADDR_VAR 0 18
12159: PUSH
12160: LD_INT 7
12162: PUSH
12163: LD_INT 28
12165: PUSH
12166: LD_INT 45
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: LIST
12173: PUSH
12174: LD_VAR 0 12
12178: ARRAY
12179: ST_TO_ADDR
// break ;
12180: GO 12184
// end ; end ; end ;
12182: GO 12013
12184: POP
12185: POP
// end ; if not weapon then
12186: LD_VAR 0 18
12190: NOT
12191: IFFALSE 12251
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12193: LD_ADDR_VAR 0 5
12197: PUSH
12198: LD_VAR 0 5
12202: PUSH
12203: LD_INT 11
12205: PUSH
12206: LD_INT 30
12208: PUSH
12209: LD_INT 49
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: LIST
12216: DIFF
12217: ST_TO_ADDR
// if not list then
12218: LD_VAR 0 5
12222: NOT
12223: IFFALSE 12227
// exit ;
12225: GO 12369
// weapon := list [ rand ( 1 , list ) ] ;
12227: LD_ADDR_VAR 0 18
12231: PUSH
12232: LD_VAR 0 5
12236: PUSH
12237: LD_INT 1
12239: PPUSH
12240: LD_VAR 0 5
12244: PPUSH
12245: CALL_OW 12
12249: ARRAY
12250: ST_TO_ADDR
// end ; if weapon then
12251: LD_VAR 0 18
12255: IFFALSE 12369
// begin tmp := CostOfWeapon ( weapon ) ;
12257: LD_ADDR_VAR 0 14
12261: PUSH
12262: LD_VAR 0 18
12266: PPUSH
12267: CALL_OW 451
12271: ST_TO_ADDR
// j := GetBase ( tower ) ;
12272: LD_ADDR_VAR 0 9
12276: PUSH
12277: LD_VAR 0 1
12281: PPUSH
12282: CALL_OW 274
12286: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12287: LD_VAR 0 9
12291: PPUSH
12292: LD_INT 1
12294: PPUSH
12295: CALL_OW 275
12299: PUSH
12300: LD_VAR 0 14
12304: PUSH
12305: LD_INT 1
12307: ARRAY
12308: GREATEREQUAL
12309: PUSH
12310: LD_VAR 0 9
12314: PPUSH
12315: LD_INT 2
12317: PPUSH
12318: CALL_OW 275
12322: PUSH
12323: LD_VAR 0 14
12327: PUSH
12328: LD_INT 2
12330: ARRAY
12331: GREATEREQUAL
12332: AND
12333: PUSH
12334: LD_VAR 0 9
12338: PPUSH
12339: LD_INT 3
12341: PPUSH
12342: CALL_OW 275
12346: PUSH
12347: LD_VAR 0 14
12351: PUSH
12352: LD_INT 3
12354: ARRAY
12355: GREATEREQUAL
12356: AND
12357: IFFALSE 12369
// result := weapon ;
12359: LD_ADDR_VAR 0 3
12363: PUSH
12364: LD_VAR 0 18
12368: ST_TO_ADDR
// end ; end ;
12369: LD_VAR 0 3
12373: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12374: LD_INT 0
12376: PPUSH
12377: PPUSH
// result := true ;
12378: LD_ADDR_VAR 0 3
12382: PUSH
12383: LD_INT 1
12385: ST_TO_ADDR
// if array1 = array2 then
12386: LD_VAR 0 1
12390: PUSH
12391: LD_VAR 0 2
12395: EQUAL
12396: IFFALSE 12456
// begin for i = 1 to array1 do
12398: LD_ADDR_VAR 0 4
12402: PUSH
12403: DOUBLE
12404: LD_INT 1
12406: DEC
12407: ST_TO_ADDR
12408: LD_VAR 0 1
12412: PUSH
12413: FOR_TO
12414: IFFALSE 12452
// if array1 [ i ] <> array2 [ i ] then
12416: LD_VAR 0 1
12420: PUSH
12421: LD_VAR 0 4
12425: ARRAY
12426: PUSH
12427: LD_VAR 0 2
12431: PUSH
12432: LD_VAR 0 4
12436: ARRAY
12437: NONEQUAL
12438: IFFALSE 12450
// begin result := false ;
12440: LD_ADDR_VAR 0 3
12444: PUSH
12445: LD_INT 0
12447: ST_TO_ADDR
// break ;
12448: GO 12452
// end ;
12450: GO 12413
12452: POP
12453: POP
// end else
12454: GO 12464
// result := false ;
12456: LD_ADDR_VAR 0 3
12460: PUSH
12461: LD_INT 0
12463: ST_TO_ADDR
// end ;
12464: LD_VAR 0 3
12468: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12469: LD_INT 0
12471: PPUSH
12472: PPUSH
// if not array1 or not array2 then
12473: LD_VAR 0 1
12477: NOT
12478: PUSH
12479: LD_VAR 0 2
12483: NOT
12484: OR
12485: IFFALSE 12489
// exit ;
12487: GO 12553
// result := true ;
12489: LD_ADDR_VAR 0 3
12493: PUSH
12494: LD_INT 1
12496: ST_TO_ADDR
// for i = 1 to array1 do
12497: LD_ADDR_VAR 0 4
12501: PUSH
12502: DOUBLE
12503: LD_INT 1
12505: DEC
12506: ST_TO_ADDR
12507: LD_VAR 0 1
12511: PUSH
12512: FOR_TO
12513: IFFALSE 12551
// if array1 [ i ] <> array2 [ i ] then
12515: LD_VAR 0 1
12519: PUSH
12520: LD_VAR 0 4
12524: ARRAY
12525: PUSH
12526: LD_VAR 0 2
12530: PUSH
12531: LD_VAR 0 4
12535: ARRAY
12536: NONEQUAL
12537: IFFALSE 12549
// begin result := false ;
12539: LD_ADDR_VAR 0 3
12543: PUSH
12544: LD_INT 0
12546: ST_TO_ADDR
// break ;
12547: GO 12551
// end ;
12549: GO 12512
12551: POP
12552: POP
// end ;
12553: LD_VAR 0 3
12557: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12558: LD_INT 0
12560: PPUSH
12561: PPUSH
12562: PPUSH
// pom := GetBase ( fac ) ;
12563: LD_ADDR_VAR 0 5
12567: PUSH
12568: LD_VAR 0 1
12572: PPUSH
12573: CALL_OW 274
12577: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12578: LD_ADDR_VAR 0 4
12582: PUSH
12583: LD_VAR 0 2
12587: PUSH
12588: LD_INT 1
12590: ARRAY
12591: PPUSH
12592: LD_VAR 0 2
12596: PUSH
12597: LD_INT 2
12599: ARRAY
12600: PPUSH
12601: LD_VAR 0 2
12605: PUSH
12606: LD_INT 3
12608: ARRAY
12609: PPUSH
12610: LD_VAR 0 2
12614: PUSH
12615: LD_INT 4
12617: ARRAY
12618: PPUSH
12619: CALL_OW 449
12623: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12624: LD_ADDR_VAR 0 3
12628: PUSH
12629: LD_VAR 0 5
12633: PPUSH
12634: LD_INT 1
12636: PPUSH
12637: CALL_OW 275
12641: PUSH
12642: LD_VAR 0 4
12646: PUSH
12647: LD_INT 1
12649: ARRAY
12650: GREATEREQUAL
12651: PUSH
12652: LD_VAR 0 5
12656: PPUSH
12657: LD_INT 2
12659: PPUSH
12660: CALL_OW 275
12664: PUSH
12665: LD_VAR 0 4
12669: PUSH
12670: LD_INT 2
12672: ARRAY
12673: GREATEREQUAL
12674: AND
12675: PUSH
12676: LD_VAR 0 5
12680: PPUSH
12681: LD_INT 3
12683: PPUSH
12684: CALL_OW 275
12688: PUSH
12689: LD_VAR 0 4
12693: PUSH
12694: LD_INT 3
12696: ARRAY
12697: GREATEREQUAL
12698: AND
12699: ST_TO_ADDR
// end ;
12700: LD_VAR 0 3
12704: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12705: LD_INT 0
12707: PPUSH
12708: PPUSH
12709: PPUSH
12710: PPUSH
// pom := GetBase ( building ) ;
12711: LD_ADDR_VAR 0 3
12715: PUSH
12716: LD_VAR 0 1
12720: PPUSH
12721: CALL_OW 274
12725: ST_TO_ADDR
// if not pom then
12726: LD_VAR 0 3
12730: NOT
12731: IFFALSE 12735
// exit ;
12733: GO 12905
// btype := GetBType ( building ) ;
12735: LD_ADDR_VAR 0 5
12739: PUSH
12740: LD_VAR 0 1
12744: PPUSH
12745: CALL_OW 266
12749: ST_TO_ADDR
// if btype = b_armoury then
12750: LD_VAR 0 5
12754: PUSH
12755: LD_INT 4
12757: EQUAL
12758: IFFALSE 12768
// btype := b_barracks ;
12760: LD_ADDR_VAR 0 5
12764: PUSH
12765: LD_INT 5
12767: ST_TO_ADDR
// if btype = b_depot then
12768: LD_VAR 0 5
12772: PUSH
12773: LD_INT 0
12775: EQUAL
12776: IFFALSE 12786
// btype := b_warehouse ;
12778: LD_ADDR_VAR 0 5
12782: PUSH
12783: LD_INT 1
12785: ST_TO_ADDR
// if btype = b_workshop then
12786: LD_VAR 0 5
12790: PUSH
12791: LD_INT 2
12793: EQUAL
12794: IFFALSE 12804
// btype := b_factory ;
12796: LD_ADDR_VAR 0 5
12800: PUSH
12801: LD_INT 3
12803: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12804: LD_ADDR_VAR 0 4
12808: PUSH
12809: LD_VAR 0 5
12813: PPUSH
12814: LD_VAR 0 1
12818: PPUSH
12819: CALL_OW 248
12823: PPUSH
12824: CALL_OW 450
12828: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12829: LD_ADDR_VAR 0 2
12833: PUSH
12834: LD_VAR 0 3
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: CALL_OW 275
12846: PUSH
12847: LD_VAR 0 4
12851: PUSH
12852: LD_INT 1
12854: ARRAY
12855: GREATEREQUAL
12856: PUSH
12857: LD_VAR 0 3
12861: PPUSH
12862: LD_INT 2
12864: PPUSH
12865: CALL_OW 275
12869: PUSH
12870: LD_VAR 0 4
12874: PUSH
12875: LD_INT 2
12877: ARRAY
12878: GREATEREQUAL
12879: AND
12880: PUSH
12881: LD_VAR 0 3
12885: PPUSH
12886: LD_INT 3
12888: PPUSH
12889: CALL_OW 275
12893: PUSH
12894: LD_VAR 0 4
12898: PUSH
12899: LD_INT 3
12901: ARRAY
12902: GREATEREQUAL
12903: AND
12904: ST_TO_ADDR
// end ;
12905: LD_VAR 0 2
12909: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12910: LD_INT 0
12912: PPUSH
12913: PPUSH
12914: PPUSH
// pom := GetBase ( building ) ;
12915: LD_ADDR_VAR 0 4
12919: PUSH
12920: LD_VAR 0 1
12924: PPUSH
12925: CALL_OW 274
12929: ST_TO_ADDR
// if not pom then
12930: LD_VAR 0 4
12934: NOT
12935: IFFALSE 12939
// exit ;
12937: GO 13040
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12939: LD_ADDR_VAR 0 5
12943: PUSH
12944: LD_VAR 0 2
12948: PPUSH
12949: LD_VAR 0 1
12953: PPUSH
12954: CALL_OW 248
12958: PPUSH
12959: CALL_OW 450
12963: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12964: LD_ADDR_VAR 0 3
12968: PUSH
12969: LD_VAR 0 4
12973: PPUSH
12974: LD_INT 1
12976: PPUSH
12977: CALL_OW 275
12981: PUSH
12982: LD_VAR 0 5
12986: PUSH
12987: LD_INT 1
12989: ARRAY
12990: GREATEREQUAL
12991: PUSH
12992: LD_VAR 0 4
12996: PPUSH
12997: LD_INT 2
12999: PPUSH
13000: CALL_OW 275
13004: PUSH
13005: LD_VAR 0 5
13009: PUSH
13010: LD_INT 2
13012: ARRAY
13013: GREATEREQUAL
13014: AND
13015: PUSH
13016: LD_VAR 0 4
13020: PPUSH
13021: LD_INT 3
13023: PPUSH
13024: CALL_OW 275
13028: PUSH
13029: LD_VAR 0 5
13033: PUSH
13034: LD_INT 3
13036: ARRAY
13037: GREATEREQUAL
13038: AND
13039: ST_TO_ADDR
// end ;
13040: LD_VAR 0 3
13044: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13045: LD_INT 0
13047: PPUSH
13048: PPUSH
13049: PPUSH
13050: PPUSH
13051: PPUSH
13052: PPUSH
13053: PPUSH
13054: PPUSH
13055: PPUSH
13056: PPUSH
13057: PPUSH
// result := false ;
13058: LD_ADDR_VAR 0 8
13062: PUSH
13063: LD_INT 0
13065: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13066: LD_VAR 0 5
13070: NOT
13071: PUSH
13072: LD_VAR 0 1
13076: NOT
13077: OR
13078: PUSH
13079: LD_VAR 0 2
13083: NOT
13084: OR
13085: PUSH
13086: LD_VAR 0 3
13090: NOT
13091: OR
13092: IFFALSE 13096
// exit ;
13094: GO 13910
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13096: LD_ADDR_VAR 0 14
13100: PUSH
13101: LD_VAR 0 1
13105: PPUSH
13106: LD_VAR 0 2
13110: PPUSH
13111: LD_VAR 0 3
13115: PPUSH
13116: LD_VAR 0 4
13120: PPUSH
13121: LD_VAR 0 5
13125: PUSH
13126: LD_INT 1
13128: ARRAY
13129: PPUSH
13130: CALL_OW 248
13134: PPUSH
13135: LD_INT 0
13137: PPUSH
13138: CALL 15147 0 6
13142: ST_TO_ADDR
// if not hexes then
13143: LD_VAR 0 14
13147: NOT
13148: IFFALSE 13152
// exit ;
13150: GO 13910
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13152: LD_ADDR_VAR 0 17
13156: PUSH
13157: LD_VAR 0 5
13161: PPUSH
13162: LD_INT 22
13164: PUSH
13165: LD_VAR 0 13
13169: PPUSH
13170: CALL_OW 255
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 2
13181: PUSH
13182: LD_INT 30
13184: PUSH
13185: LD_INT 0
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: LD_INT 30
13194: PUSH
13195: LD_INT 1
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: LIST
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PPUSH
13211: CALL_OW 72
13215: ST_TO_ADDR
// for i = 1 to hexes do
13216: LD_ADDR_VAR 0 9
13220: PUSH
13221: DOUBLE
13222: LD_INT 1
13224: DEC
13225: ST_TO_ADDR
13226: LD_VAR 0 14
13230: PUSH
13231: FOR_TO
13232: IFFALSE 13908
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13234: LD_ADDR_VAR 0 13
13238: PUSH
13239: LD_VAR 0 14
13243: PUSH
13244: LD_VAR 0 9
13248: ARRAY
13249: PUSH
13250: LD_INT 1
13252: ARRAY
13253: PPUSH
13254: LD_VAR 0 14
13258: PUSH
13259: LD_VAR 0 9
13263: ARRAY
13264: PUSH
13265: LD_INT 2
13267: ARRAY
13268: PPUSH
13269: CALL_OW 428
13273: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13274: LD_VAR 0 14
13278: PUSH
13279: LD_VAR 0 9
13283: ARRAY
13284: PUSH
13285: LD_INT 1
13287: ARRAY
13288: PPUSH
13289: LD_VAR 0 14
13293: PUSH
13294: LD_VAR 0 9
13298: ARRAY
13299: PUSH
13300: LD_INT 2
13302: ARRAY
13303: PPUSH
13304: CALL_OW 351
13308: PUSH
13309: LD_VAR 0 14
13313: PUSH
13314: LD_VAR 0 9
13318: ARRAY
13319: PUSH
13320: LD_INT 1
13322: ARRAY
13323: PPUSH
13324: LD_VAR 0 14
13328: PUSH
13329: LD_VAR 0 9
13333: ARRAY
13334: PUSH
13335: LD_INT 2
13337: ARRAY
13338: PPUSH
13339: CALL_OW 488
13343: NOT
13344: OR
13345: PUSH
13346: LD_VAR 0 13
13350: PPUSH
13351: CALL_OW 247
13355: PUSH
13356: LD_INT 3
13358: EQUAL
13359: OR
13360: IFFALSE 13366
// exit ;
13362: POP
13363: POP
13364: GO 13910
// if not tmp then
13366: LD_VAR 0 13
13370: NOT
13371: IFFALSE 13375
// continue ;
13373: GO 13231
// result := true ;
13375: LD_ADDR_VAR 0 8
13379: PUSH
13380: LD_INT 1
13382: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13383: LD_VAR 0 6
13387: PUSH
13388: LD_VAR 0 13
13392: PPUSH
13393: CALL_OW 247
13397: PUSH
13398: LD_INT 2
13400: EQUAL
13401: AND
13402: PUSH
13403: LD_VAR 0 13
13407: PPUSH
13408: CALL_OW 263
13412: PUSH
13413: LD_INT 1
13415: EQUAL
13416: AND
13417: IFFALSE 13581
// begin if IsDrivenBy ( tmp ) then
13419: LD_VAR 0 13
13423: PPUSH
13424: CALL_OW 311
13428: IFFALSE 13432
// continue ;
13430: GO 13231
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13432: LD_VAR 0 6
13436: PPUSH
13437: LD_INT 3
13439: PUSH
13440: LD_INT 60
13442: PUSH
13443: EMPTY
13444: LIST
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 3
13452: PUSH
13453: LD_INT 55
13455: PUSH
13456: EMPTY
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PPUSH
13467: CALL_OW 72
13471: IFFALSE 13579
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13473: LD_ADDR_VAR 0 18
13477: PUSH
13478: LD_VAR 0 6
13482: PPUSH
13483: LD_INT 3
13485: PUSH
13486: LD_INT 60
13488: PUSH
13489: EMPTY
13490: LIST
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PUSH
13496: LD_INT 3
13498: PUSH
13499: LD_INT 55
13501: PUSH
13502: EMPTY
13503: LIST
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PPUSH
13513: CALL_OW 72
13517: PUSH
13518: LD_INT 1
13520: ARRAY
13521: ST_TO_ADDR
// if IsInUnit ( driver ) then
13522: LD_VAR 0 18
13526: PPUSH
13527: CALL_OW 310
13531: IFFALSE 13542
// ComExit ( driver ) ;
13533: LD_VAR 0 18
13537: PPUSH
13538: CALL 38275 0 1
// AddComEnterUnit ( driver , tmp ) ;
13542: LD_VAR 0 18
13546: PPUSH
13547: LD_VAR 0 13
13551: PPUSH
13552: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13556: LD_VAR 0 18
13560: PPUSH
13561: LD_VAR 0 7
13565: PPUSH
13566: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13570: LD_VAR 0 18
13574: PPUSH
13575: CALL_OW 181
// end ; continue ;
13579: GO 13231
// end ; if not cleaners or not tmp in cleaners then
13581: LD_VAR 0 6
13585: NOT
13586: PUSH
13587: LD_VAR 0 13
13591: PUSH
13592: LD_VAR 0 6
13596: IN
13597: NOT
13598: OR
13599: IFFALSE 13906
// begin if dep then
13601: LD_VAR 0 17
13605: IFFALSE 13741
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13607: LD_ADDR_VAR 0 16
13611: PUSH
13612: LD_VAR 0 17
13616: PUSH
13617: LD_INT 1
13619: ARRAY
13620: PPUSH
13621: CALL_OW 250
13625: PPUSH
13626: LD_VAR 0 17
13630: PUSH
13631: LD_INT 1
13633: ARRAY
13634: PPUSH
13635: CALL_OW 254
13639: PPUSH
13640: LD_INT 5
13642: PPUSH
13643: CALL_OW 272
13647: PUSH
13648: LD_VAR 0 17
13652: PUSH
13653: LD_INT 1
13655: ARRAY
13656: PPUSH
13657: CALL_OW 251
13661: PPUSH
13662: LD_VAR 0 17
13666: PUSH
13667: LD_INT 1
13669: ARRAY
13670: PPUSH
13671: CALL_OW 254
13675: PPUSH
13676: LD_INT 5
13678: PPUSH
13679: CALL_OW 273
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13688: LD_VAR 0 16
13692: PUSH
13693: LD_INT 1
13695: ARRAY
13696: PPUSH
13697: LD_VAR 0 16
13701: PUSH
13702: LD_INT 2
13704: ARRAY
13705: PPUSH
13706: CALL_OW 488
13710: IFFALSE 13741
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13712: LD_VAR 0 13
13716: PPUSH
13717: LD_VAR 0 16
13721: PUSH
13722: LD_INT 1
13724: ARRAY
13725: PPUSH
13726: LD_VAR 0 16
13730: PUSH
13731: LD_INT 2
13733: ARRAY
13734: PPUSH
13735: CALL_OW 111
// continue ;
13739: GO 13231
// end ; end ; r := GetDir ( tmp ) ;
13741: LD_ADDR_VAR 0 15
13745: PUSH
13746: LD_VAR 0 13
13750: PPUSH
13751: CALL_OW 254
13755: ST_TO_ADDR
// if r = 5 then
13756: LD_VAR 0 15
13760: PUSH
13761: LD_INT 5
13763: EQUAL
13764: IFFALSE 13774
// r := 0 ;
13766: LD_ADDR_VAR 0 15
13770: PUSH
13771: LD_INT 0
13773: ST_TO_ADDR
// for j = r to 5 do
13774: LD_ADDR_VAR 0 10
13778: PUSH
13779: DOUBLE
13780: LD_VAR 0 15
13784: DEC
13785: ST_TO_ADDR
13786: LD_INT 5
13788: PUSH
13789: FOR_TO
13790: IFFALSE 13904
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13792: LD_ADDR_VAR 0 11
13796: PUSH
13797: LD_VAR 0 13
13801: PPUSH
13802: CALL_OW 250
13806: PPUSH
13807: LD_VAR 0 10
13811: PPUSH
13812: LD_INT 2
13814: PPUSH
13815: CALL_OW 272
13819: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13820: LD_ADDR_VAR 0 12
13824: PUSH
13825: LD_VAR 0 13
13829: PPUSH
13830: CALL_OW 251
13834: PPUSH
13835: LD_VAR 0 10
13839: PPUSH
13840: LD_INT 2
13842: PPUSH
13843: CALL_OW 273
13847: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13848: LD_VAR 0 11
13852: PPUSH
13853: LD_VAR 0 12
13857: PPUSH
13858: CALL_OW 488
13862: PUSH
13863: LD_VAR 0 11
13867: PPUSH
13868: LD_VAR 0 12
13872: PPUSH
13873: CALL_OW 428
13877: NOT
13878: AND
13879: IFFALSE 13902
// begin ComMoveXY ( tmp , _x , _y ) ;
13881: LD_VAR 0 13
13885: PPUSH
13886: LD_VAR 0 11
13890: PPUSH
13891: LD_VAR 0 12
13895: PPUSH
13896: CALL_OW 111
// break ;
13900: GO 13904
// end ; end ;
13902: GO 13789
13904: POP
13905: POP
// end ; end ;
13906: GO 13231
13908: POP
13909: POP
// end ;
13910: LD_VAR 0 8
13914: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13915: LD_INT 0
13917: PPUSH
// result := true ;
13918: LD_ADDR_VAR 0 3
13922: PUSH
13923: LD_INT 1
13925: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13926: LD_VAR 0 2
13930: PUSH
13931: LD_INT 24
13933: DOUBLE
13934: EQUAL
13935: IFTRUE 13945
13937: LD_INT 33
13939: DOUBLE
13940: EQUAL
13941: IFTRUE 13945
13943: GO 13970
13945: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13946: LD_ADDR_VAR 0 3
13950: PUSH
13951: LD_INT 32
13953: PPUSH
13954: LD_VAR 0 1
13958: PPUSH
13959: CALL_OW 321
13963: PUSH
13964: LD_INT 2
13966: EQUAL
13967: ST_TO_ADDR
13968: GO 14290
13970: LD_INT 20
13972: DOUBLE
13973: EQUAL
13974: IFTRUE 13978
13976: GO 14003
13978: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13979: LD_ADDR_VAR 0 3
13983: PUSH
13984: LD_INT 6
13986: PPUSH
13987: LD_VAR 0 1
13991: PPUSH
13992: CALL_OW 321
13996: PUSH
13997: LD_INT 2
13999: EQUAL
14000: ST_TO_ADDR
14001: GO 14290
14003: LD_INT 22
14005: DOUBLE
14006: EQUAL
14007: IFTRUE 14017
14009: LD_INT 36
14011: DOUBLE
14012: EQUAL
14013: IFTRUE 14017
14015: GO 14042
14017: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14018: LD_ADDR_VAR 0 3
14022: PUSH
14023: LD_INT 15
14025: PPUSH
14026: LD_VAR 0 1
14030: PPUSH
14031: CALL_OW 321
14035: PUSH
14036: LD_INT 2
14038: EQUAL
14039: ST_TO_ADDR
14040: GO 14290
14042: LD_INT 30
14044: DOUBLE
14045: EQUAL
14046: IFTRUE 14050
14048: GO 14075
14050: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14051: LD_ADDR_VAR 0 3
14055: PUSH
14056: LD_INT 20
14058: PPUSH
14059: LD_VAR 0 1
14063: PPUSH
14064: CALL_OW 321
14068: PUSH
14069: LD_INT 2
14071: EQUAL
14072: ST_TO_ADDR
14073: GO 14290
14075: LD_INT 28
14077: DOUBLE
14078: EQUAL
14079: IFTRUE 14089
14081: LD_INT 21
14083: DOUBLE
14084: EQUAL
14085: IFTRUE 14089
14087: GO 14114
14089: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14090: LD_ADDR_VAR 0 3
14094: PUSH
14095: LD_INT 21
14097: PPUSH
14098: LD_VAR 0 1
14102: PPUSH
14103: CALL_OW 321
14107: PUSH
14108: LD_INT 2
14110: EQUAL
14111: ST_TO_ADDR
14112: GO 14290
14114: LD_INT 16
14116: DOUBLE
14117: EQUAL
14118: IFTRUE 14122
14120: GO 14149
14122: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14123: LD_ADDR_VAR 0 3
14127: PUSH
14128: LD_EXP 29
14132: PPUSH
14133: LD_VAR 0 1
14137: PPUSH
14138: CALL_OW 321
14142: PUSH
14143: LD_INT 2
14145: EQUAL
14146: ST_TO_ADDR
14147: GO 14290
14149: LD_INT 19
14151: DOUBLE
14152: EQUAL
14153: IFTRUE 14163
14155: LD_INT 23
14157: DOUBLE
14158: EQUAL
14159: IFTRUE 14163
14161: GO 14190
14163: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14164: LD_ADDR_VAR 0 3
14168: PUSH
14169: LD_EXP 28
14173: PPUSH
14174: LD_VAR 0 1
14178: PPUSH
14179: CALL_OW 321
14183: PUSH
14184: LD_INT 2
14186: EQUAL
14187: ST_TO_ADDR
14188: GO 14290
14190: LD_INT 17
14192: DOUBLE
14193: EQUAL
14194: IFTRUE 14198
14196: GO 14223
14198: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14199: LD_ADDR_VAR 0 3
14203: PUSH
14204: LD_INT 39
14206: PPUSH
14207: LD_VAR 0 1
14211: PPUSH
14212: CALL_OW 321
14216: PUSH
14217: LD_INT 2
14219: EQUAL
14220: ST_TO_ADDR
14221: GO 14290
14223: LD_INT 18
14225: DOUBLE
14226: EQUAL
14227: IFTRUE 14231
14229: GO 14256
14231: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14232: LD_ADDR_VAR 0 3
14236: PUSH
14237: LD_INT 40
14239: PPUSH
14240: LD_VAR 0 1
14244: PPUSH
14245: CALL_OW 321
14249: PUSH
14250: LD_INT 2
14252: EQUAL
14253: ST_TO_ADDR
14254: GO 14290
14256: LD_INT 27
14258: DOUBLE
14259: EQUAL
14260: IFTRUE 14264
14262: GO 14289
14264: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14265: LD_ADDR_VAR 0 3
14269: PUSH
14270: LD_INT 35
14272: PPUSH
14273: LD_VAR 0 1
14277: PPUSH
14278: CALL_OW 321
14282: PUSH
14283: LD_INT 2
14285: EQUAL
14286: ST_TO_ADDR
14287: GO 14290
14289: POP
// end ;
14290: LD_VAR 0 3
14294: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14295: LD_INT 0
14297: PPUSH
14298: PPUSH
14299: PPUSH
14300: PPUSH
14301: PPUSH
14302: PPUSH
14303: PPUSH
14304: PPUSH
14305: PPUSH
14306: PPUSH
14307: PPUSH
// result := false ;
14308: LD_ADDR_VAR 0 6
14312: PUSH
14313: LD_INT 0
14315: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14316: LD_VAR 0 1
14320: NOT
14321: PUSH
14322: LD_VAR 0 1
14326: PPUSH
14327: CALL_OW 266
14331: PUSH
14332: LD_INT 0
14334: PUSH
14335: LD_INT 1
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: IN
14342: NOT
14343: OR
14344: PUSH
14345: LD_VAR 0 2
14349: NOT
14350: OR
14351: PUSH
14352: LD_VAR 0 5
14356: PUSH
14357: LD_INT 0
14359: PUSH
14360: LD_INT 1
14362: PUSH
14363: LD_INT 2
14365: PUSH
14366: LD_INT 3
14368: PUSH
14369: LD_INT 4
14371: PUSH
14372: LD_INT 5
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: IN
14383: NOT
14384: OR
14385: PUSH
14386: LD_VAR 0 3
14390: PPUSH
14391: LD_VAR 0 4
14395: PPUSH
14396: CALL_OW 488
14400: NOT
14401: OR
14402: IFFALSE 14406
// exit ;
14404: GO 15142
// side := GetSide ( depot ) ;
14406: LD_ADDR_VAR 0 9
14410: PUSH
14411: LD_VAR 0 1
14415: PPUSH
14416: CALL_OW 255
14420: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14421: LD_VAR 0 9
14425: PPUSH
14426: LD_VAR 0 2
14430: PPUSH
14431: CALL 13915 0 2
14435: NOT
14436: IFFALSE 14440
// exit ;
14438: GO 15142
// pom := GetBase ( depot ) ;
14440: LD_ADDR_VAR 0 10
14444: PUSH
14445: LD_VAR 0 1
14449: PPUSH
14450: CALL_OW 274
14454: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14455: LD_ADDR_VAR 0 11
14459: PUSH
14460: LD_VAR 0 2
14464: PPUSH
14465: LD_VAR 0 1
14469: PPUSH
14470: CALL_OW 248
14474: PPUSH
14475: CALL_OW 450
14479: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14480: LD_VAR 0 10
14484: PPUSH
14485: LD_INT 1
14487: PPUSH
14488: CALL_OW 275
14492: PUSH
14493: LD_VAR 0 11
14497: PUSH
14498: LD_INT 1
14500: ARRAY
14501: GREATEREQUAL
14502: PUSH
14503: LD_VAR 0 10
14507: PPUSH
14508: LD_INT 2
14510: PPUSH
14511: CALL_OW 275
14515: PUSH
14516: LD_VAR 0 11
14520: PUSH
14521: LD_INT 2
14523: ARRAY
14524: GREATEREQUAL
14525: AND
14526: PUSH
14527: LD_VAR 0 10
14531: PPUSH
14532: LD_INT 3
14534: PPUSH
14535: CALL_OW 275
14539: PUSH
14540: LD_VAR 0 11
14544: PUSH
14545: LD_INT 3
14547: ARRAY
14548: GREATEREQUAL
14549: AND
14550: NOT
14551: IFFALSE 14555
// exit ;
14553: GO 15142
// if GetBType ( depot ) = b_depot then
14555: LD_VAR 0 1
14559: PPUSH
14560: CALL_OW 266
14564: PUSH
14565: LD_INT 0
14567: EQUAL
14568: IFFALSE 14580
// dist := 28 else
14570: LD_ADDR_VAR 0 14
14574: PUSH
14575: LD_INT 28
14577: ST_TO_ADDR
14578: GO 14588
// dist := 36 ;
14580: LD_ADDR_VAR 0 14
14584: PUSH
14585: LD_INT 36
14587: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14588: LD_VAR 0 1
14592: PPUSH
14593: LD_VAR 0 3
14597: PPUSH
14598: LD_VAR 0 4
14602: PPUSH
14603: CALL_OW 297
14607: PUSH
14608: LD_VAR 0 14
14612: GREATER
14613: IFFALSE 14617
// exit ;
14615: GO 15142
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14617: LD_ADDR_VAR 0 12
14621: PUSH
14622: LD_VAR 0 2
14626: PPUSH
14627: LD_VAR 0 3
14631: PPUSH
14632: LD_VAR 0 4
14636: PPUSH
14637: LD_VAR 0 5
14641: PPUSH
14642: LD_VAR 0 1
14646: PPUSH
14647: CALL_OW 248
14651: PPUSH
14652: LD_INT 0
14654: PPUSH
14655: CALL 15147 0 6
14659: ST_TO_ADDR
// if not hexes then
14660: LD_VAR 0 12
14664: NOT
14665: IFFALSE 14669
// exit ;
14667: GO 15142
// hex := GetHexInfo ( x , y ) ;
14669: LD_ADDR_VAR 0 15
14673: PUSH
14674: LD_VAR 0 3
14678: PPUSH
14679: LD_VAR 0 4
14683: PPUSH
14684: CALL_OW 546
14688: ST_TO_ADDR
// if hex [ 1 ] then
14689: LD_VAR 0 15
14693: PUSH
14694: LD_INT 1
14696: ARRAY
14697: IFFALSE 14701
// exit ;
14699: GO 15142
// height := hex [ 2 ] ;
14701: LD_ADDR_VAR 0 13
14705: PUSH
14706: LD_VAR 0 15
14710: PUSH
14711: LD_INT 2
14713: ARRAY
14714: ST_TO_ADDR
// for i = 1 to hexes do
14715: LD_ADDR_VAR 0 7
14719: PUSH
14720: DOUBLE
14721: LD_INT 1
14723: DEC
14724: ST_TO_ADDR
14725: LD_VAR 0 12
14729: PUSH
14730: FOR_TO
14731: IFFALSE 15061
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14733: LD_VAR 0 12
14737: PUSH
14738: LD_VAR 0 7
14742: ARRAY
14743: PUSH
14744: LD_INT 1
14746: ARRAY
14747: PPUSH
14748: LD_VAR 0 12
14752: PUSH
14753: LD_VAR 0 7
14757: ARRAY
14758: PUSH
14759: LD_INT 2
14761: ARRAY
14762: PPUSH
14763: CALL_OW 488
14767: NOT
14768: PUSH
14769: LD_VAR 0 12
14773: PUSH
14774: LD_VAR 0 7
14778: ARRAY
14779: PUSH
14780: LD_INT 1
14782: ARRAY
14783: PPUSH
14784: LD_VAR 0 12
14788: PUSH
14789: LD_VAR 0 7
14793: ARRAY
14794: PUSH
14795: LD_INT 2
14797: ARRAY
14798: PPUSH
14799: CALL_OW 428
14803: PUSH
14804: LD_INT 0
14806: GREATER
14807: OR
14808: PUSH
14809: LD_VAR 0 12
14813: PUSH
14814: LD_VAR 0 7
14818: ARRAY
14819: PUSH
14820: LD_INT 1
14822: ARRAY
14823: PPUSH
14824: LD_VAR 0 12
14828: PUSH
14829: LD_VAR 0 7
14833: ARRAY
14834: PUSH
14835: LD_INT 2
14837: ARRAY
14838: PPUSH
14839: CALL_OW 351
14843: OR
14844: IFFALSE 14850
// exit ;
14846: POP
14847: POP
14848: GO 15142
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14850: LD_ADDR_VAR 0 8
14854: PUSH
14855: LD_VAR 0 12
14859: PUSH
14860: LD_VAR 0 7
14864: ARRAY
14865: PUSH
14866: LD_INT 1
14868: ARRAY
14869: PPUSH
14870: LD_VAR 0 12
14874: PUSH
14875: LD_VAR 0 7
14879: ARRAY
14880: PUSH
14881: LD_INT 2
14883: ARRAY
14884: PPUSH
14885: CALL_OW 546
14889: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14890: LD_VAR 0 8
14894: PUSH
14895: LD_INT 1
14897: ARRAY
14898: PUSH
14899: LD_VAR 0 8
14903: PUSH
14904: LD_INT 2
14906: ARRAY
14907: PUSH
14908: LD_VAR 0 13
14912: PUSH
14913: LD_INT 2
14915: PLUS
14916: GREATER
14917: OR
14918: PUSH
14919: LD_VAR 0 8
14923: PUSH
14924: LD_INT 2
14926: ARRAY
14927: PUSH
14928: LD_VAR 0 13
14932: PUSH
14933: LD_INT 2
14935: MINUS
14936: LESS
14937: OR
14938: PUSH
14939: LD_VAR 0 8
14943: PUSH
14944: LD_INT 3
14946: ARRAY
14947: PUSH
14948: LD_INT 0
14950: PUSH
14951: LD_INT 8
14953: PUSH
14954: LD_INT 9
14956: PUSH
14957: LD_INT 10
14959: PUSH
14960: LD_INT 11
14962: PUSH
14963: LD_INT 12
14965: PUSH
14966: LD_INT 13
14968: PUSH
14969: LD_INT 16
14971: PUSH
14972: LD_INT 17
14974: PUSH
14975: LD_INT 18
14977: PUSH
14978: LD_INT 19
14980: PUSH
14981: LD_INT 20
14983: PUSH
14984: LD_INT 21
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: IN
15002: NOT
15003: OR
15004: PUSH
15005: LD_VAR 0 8
15009: PUSH
15010: LD_INT 5
15012: ARRAY
15013: NOT
15014: OR
15015: PUSH
15016: LD_VAR 0 8
15020: PUSH
15021: LD_INT 6
15023: ARRAY
15024: PUSH
15025: LD_INT 1
15027: PUSH
15028: LD_INT 2
15030: PUSH
15031: LD_INT 7
15033: PUSH
15034: LD_INT 9
15036: PUSH
15037: LD_INT 10
15039: PUSH
15040: LD_INT 11
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: IN
15051: NOT
15052: OR
15053: IFFALSE 15059
// exit ;
15055: POP
15056: POP
15057: GO 15142
// end ;
15059: GO 14730
15061: POP
15062: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15063: LD_VAR 0 9
15067: PPUSH
15068: LD_VAR 0 3
15072: PPUSH
15073: LD_VAR 0 4
15077: PPUSH
15078: LD_INT 20
15080: PPUSH
15081: CALL 7088 0 4
15085: PUSH
15086: LD_INT 4
15088: ARRAY
15089: IFFALSE 15093
// exit ;
15091: GO 15142
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15093: LD_VAR 0 2
15097: PUSH
15098: LD_INT 29
15100: PUSH
15101: LD_INT 30
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: IN
15108: PUSH
15109: LD_VAR 0 3
15113: PPUSH
15114: LD_VAR 0 4
15118: PPUSH
15119: LD_VAR 0 9
15123: PPUSH
15124: CALL_OW 440
15128: NOT
15129: AND
15130: IFFALSE 15134
// exit ;
15132: GO 15142
// result := true ;
15134: LD_ADDR_VAR 0 6
15138: PUSH
15139: LD_INT 1
15141: ST_TO_ADDR
// end ;
15142: LD_VAR 0 6
15146: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15147: LD_INT 0
15149: PPUSH
15150: PPUSH
15151: PPUSH
15152: PPUSH
15153: PPUSH
15154: PPUSH
15155: PPUSH
15156: PPUSH
15157: PPUSH
15158: PPUSH
15159: PPUSH
15160: PPUSH
15161: PPUSH
15162: PPUSH
15163: PPUSH
15164: PPUSH
15165: PPUSH
15166: PPUSH
15167: PPUSH
15168: PPUSH
15169: PPUSH
15170: PPUSH
15171: PPUSH
15172: PPUSH
15173: PPUSH
15174: PPUSH
15175: PPUSH
15176: PPUSH
15177: PPUSH
15178: PPUSH
15179: PPUSH
15180: PPUSH
15181: PPUSH
15182: PPUSH
15183: PPUSH
15184: PPUSH
15185: PPUSH
15186: PPUSH
15187: PPUSH
15188: PPUSH
15189: PPUSH
15190: PPUSH
15191: PPUSH
15192: PPUSH
15193: PPUSH
15194: PPUSH
15195: PPUSH
15196: PPUSH
15197: PPUSH
15198: PPUSH
15199: PPUSH
15200: PPUSH
15201: PPUSH
15202: PPUSH
15203: PPUSH
15204: PPUSH
15205: PPUSH
15206: PPUSH
// result = [ ] ;
15207: LD_ADDR_VAR 0 7
15211: PUSH
15212: EMPTY
15213: ST_TO_ADDR
// temp_list = [ ] ;
15214: LD_ADDR_VAR 0 9
15218: PUSH
15219: EMPTY
15220: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15221: LD_VAR 0 4
15225: PUSH
15226: LD_INT 0
15228: PUSH
15229: LD_INT 1
15231: PUSH
15232: LD_INT 2
15234: PUSH
15235: LD_INT 3
15237: PUSH
15238: LD_INT 4
15240: PUSH
15241: LD_INT 5
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: IN
15252: NOT
15253: PUSH
15254: LD_VAR 0 1
15258: PUSH
15259: LD_INT 0
15261: PUSH
15262: LD_INT 1
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: IN
15269: PUSH
15270: LD_VAR 0 5
15274: PUSH
15275: LD_INT 1
15277: PUSH
15278: LD_INT 2
15280: PUSH
15281: LD_INT 3
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: LIST
15288: IN
15289: NOT
15290: AND
15291: OR
15292: IFFALSE 15296
// exit ;
15294: GO 33687
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15296: LD_VAR 0 1
15300: PUSH
15301: LD_INT 6
15303: PUSH
15304: LD_INT 7
15306: PUSH
15307: LD_INT 8
15309: PUSH
15310: LD_INT 13
15312: PUSH
15313: LD_INT 12
15315: PUSH
15316: LD_INT 15
15318: PUSH
15319: LD_INT 11
15321: PUSH
15322: LD_INT 14
15324: PUSH
15325: LD_INT 10
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: IN
15339: IFFALSE 15349
// btype = b_lab ;
15341: LD_ADDR_VAR 0 1
15345: PUSH
15346: LD_INT 6
15348: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15349: LD_VAR 0 6
15353: PUSH
15354: LD_INT 0
15356: PUSH
15357: LD_INT 1
15359: PUSH
15360: LD_INT 2
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: LIST
15367: IN
15368: NOT
15369: PUSH
15370: LD_VAR 0 1
15374: PUSH
15375: LD_INT 0
15377: PUSH
15378: LD_INT 1
15380: PUSH
15381: LD_INT 2
15383: PUSH
15384: LD_INT 3
15386: PUSH
15387: LD_INT 6
15389: PUSH
15390: LD_INT 36
15392: PUSH
15393: LD_INT 4
15395: PUSH
15396: LD_INT 5
15398: PUSH
15399: LD_INT 31
15401: PUSH
15402: LD_INT 32
15404: PUSH
15405: LD_INT 33
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: IN
15421: NOT
15422: PUSH
15423: LD_VAR 0 6
15427: PUSH
15428: LD_INT 1
15430: EQUAL
15431: AND
15432: OR
15433: PUSH
15434: LD_VAR 0 1
15438: PUSH
15439: LD_INT 2
15441: PUSH
15442: LD_INT 3
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: IN
15449: NOT
15450: PUSH
15451: LD_VAR 0 6
15455: PUSH
15456: LD_INT 2
15458: EQUAL
15459: AND
15460: OR
15461: IFFALSE 15471
// mode = 0 ;
15463: LD_ADDR_VAR 0 6
15467: PUSH
15468: LD_INT 0
15470: ST_TO_ADDR
// case mode of 0 :
15471: LD_VAR 0 6
15475: PUSH
15476: LD_INT 0
15478: DOUBLE
15479: EQUAL
15480: IFTRUE 15484
15482: GO 26937
15484: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15485: LD_ADDR_VAR 0 11
15489: PUSH
15490: LD_INT 0
15492: PUSH
15493: LD_INT 0
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: LD_INT 0
15502: PUSH
15503: LD_INT 1
15505: NEG
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 1
15513: PUSH
15514: LD_INT 0
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 1
15523: PUSH
15524: LD_INT 1
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 0
15533: PUSH
15534: LD_INT 1
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 1
15543: NEG
15544: PUSH
15545: LD_INT 0
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 1
15554: NEG
15555: PUSH
15556: LD_INT 1
15558: NEG
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 1
15566: NEG
15567: PUSH
15568: LD_INT 2
15570: NEG
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 0
15578: PUSH
15579: LD_INT 2
15581: NEG
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 1
15589: PUSH
15590: LD_INT 1
15592: NEG
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: LD_INT 1
15600: PUSH
15601: LD_INT 2
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: LD_INT 0
15610: PUSH
15611: LD_INT 2
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: LD_INT 1
15620: NEG
15621: PUSH
15622: LD_INT 1
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 1
15631: PUSH
15632: LD_INT 3
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: LD_INT 0
15641: PUSH
15642: LD_INT 3
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 1
15651: NEG
15652: PUSH
15653: LD_INT 2
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15678: LD_ADDR_VAR 0 12
15682: PUSH
15683: LD_INT 0
15685: PUSH
15686: LD_INT 0
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 0
15695: PUSH
15696: LD_INT 1
15698: NEG
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 1
15706: PUSH
15707: LD_INT 0
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 1
15716: PUSH
15717: LD_INT 1
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 0
15726: PUSH
15727: LD_INT 1
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 1
15736: NEG
15737: PUSH
15738: LD_INT 0
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: LD_INT 1
15747: NEG
15748: PUSH
15749: LD_INT 1
15751: NEG
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: PUSH
15757: LD_INT 1
15759: PUSH
15760: LD_INT 1
15762: NEG
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 2
15770: PUSH
15771: LD_INT 0
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: LD_INT 2
15780: PUSH
15781: LD_INT 1
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 1
15790: NEG
15791: PUSH
15792: LD_INT 1
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 2
15801: NEG
15802: PUSH
15803: LD_INT 0
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 2
15812: NEG
15813: PUSH
15814: LD_INT 1
15816: NEG
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 2
15824: NEG
15825: PUSH
15826: LD_INT 1
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 3
15835: NEG
15836: PUSH
15837: LD_INT 0
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 3
15846: NEG
15847: PUSH
15848: LD_INT 1
15850: NEG
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15874: LD_ADDR_VAR 0 13
15878: PUSH
15879: LD_INT 0
15881: PUSH
15882: LD_INT 0
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: LD_INT 0
15891: PUSH
15892: LD_INT 1
15894: NEG
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: LD_INT 1
15902: PUSH
15903: LD_INT 0
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 1
15912: PUSH
15913: LD_INT 1
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: LD_INT 0
15922: PUSH
15923: LD_INT 1
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 1
15932: NEG
15933: PUSH
15934: LD_INT 0
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: LD_INT 1
15943: NEG
15944: PUSH
15945: LD_INT 1
15947: NEG
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 1
15955: NEG
15956: PUSH
15957: LD_INT 2
15959: NEG
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 2
15967: PUSH
15968: LD_INT 1
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 2
15977: PUSH
15978: LD_INT 2
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: LD_INT 1
15987: PUSH
15988: LD_INT 2
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 2
15997: NEG
15998: PUSH
15999: LD_INT 1
16001: NEG
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 2
16009: NEG
16010: PUSH
16011: LD_INT 2
16013: NEG
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PUSH
16019: LD_INT 2
16021: NEG
16022: PUSH
16023: LD_INT 3
16025: NEG
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: LD_INT 3
16033: NEG
16034: PUSH
16035: LD_INT 2
16037: NEG
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PUSH
16043: LD_INT 3
16045: NEG
16046: PUSH
16047: LD_INT 3
16049: NEG
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16073: LD_ADDR_VAR 0 14
16077: PUSH
16078: LD_INT 0
16080: PUSH
16081: LD_INT 0
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: LD_INT 0
16090: PUSH
16091: LD_INT 1
16093: NEG
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: LD_INT 1
16101: PUSH
16102: LD_INT 0
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: PUSH
16109: LD_INT 1
16111: PUSH
16112: LD_INT 1
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: PUSH
16119: LD_INT 0
16121: PUSH
16122: LD_INT 1
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: LD_INT 1
16131: NEG
16132: PUSH
16133: LD_INT 0
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 1
16142: NEG
16143: PUSH
16144: LD_INT 1
16146: NEG
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 1
16154: NEG
16155: PUSH
16156: LD_INT 2
16158: NEG
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 0
16166: PUSH
16167: LD_INT 2
16169: NEG
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 1
16177: PUSH
16178: LD_INT 1
16180: NEG
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: LD_INT 1
16188: PUSH
16189: LD_INT 2
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 0
16198: PUSH
16199: LD_INT 2
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: LD_INT 1
16208: NEG
16209: PUSH
16210: LD_INT 1
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 1
16219: NEG
16220: PUSH
16221: LD_INT 3
16223: NEG
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 0
16231: PUSH
16232: LD_INT 3
16234: NEG
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 1
16242: PUSH
16243: LD_INT 2
16245: NEG
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16269: LD_ADDR_VAR 0 15
16273: PUSH
16274: LD_INT 0
16276: PUSH
16277: LD_INT 0
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 0
16286: PUSH
16287: LD_INT 1
16289: NEG
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 1
16297: PUSH
16298: LD_INT 0
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: LD_INT 1
16307: PUSH
16308: LD_INT 1
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 0
16317: PUSH
16318: LD_INT 1
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 1
16327: NEG
16328: PUSH
16329: LD_INT 0
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 1
16338: NEG
16339: PUSH
16340: LD_INT 1
16342: NEG
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 1
16350: PUSH
16351: LD_INT 1
16353: NEG
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: LD_INT 2
16361: PUSH
16362: LD_INT 0
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: LD_INT 2
16371: PUSH
16372: LD_INT 1
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 1
16381: NEG
16382: PUSH
16383: LD_INT 1
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 2
16392: NEG
16393: PUSH
16394: LD_INT 0
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 2
16403: NEG
16404: PUSH
16405: LD_INT 1
16407: NEG
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: LD_INT 2
16415: PUSH
16416: LD_INT 1
16418: NEG
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 3
16426: PUSH
16427: LD_INT 0
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 3
16436: PUSH
16437: LD_INT 1
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16462: LD_ADDR_VAR 0 16
16466: PUSH
16467: LD_INT 0
16469: PUSH
16470: LD_INT 0
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 0
16479: PUSH
16480: LD_INT 1
16482: NEG
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: PUSH
16488: LD_INT 1
16490: PUSH
16491: LD_INT 0
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: LD_INT 1
16500: PUSH
16501: LD_INT 1
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 0
16510: PUSH
16511: LD_INT 1
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 1
16520: NEG
16521: PUSH
16522: LD_INT 0
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 1
16531: NEG
16532: PUSH
16533: LD_INT 1
16535: NEG
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 1
16543: NEG
16544: PUSH
16545: LD_INT 2
16547: NEG
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: LD_INT 2
16555: PUSH
16556: LD_INT 1
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: LD_INT 2
16565: PUSH
16566: LD_INT 2
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 1
16575: PUSH
16576: LD_INT 2
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 2
16585: NEG
16586: PUSH
16587: LD_INT 1
16589: NEG
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 2
16597: NEG
16598: PUSH
16599: LD_INT 2
16601: NEG
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 3
16609: PUSH
16610: LD_INT 2
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 3
16619: PUSH
16620: LD_INT 3
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 2
16629: PUSH
16630: LD_INT 3
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16655: LD_ADDR_VAR 0 17
16659: PUSH
16660: LD_INT 0
16662: PUSH
16663: LD_INT 0
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 0
16672: PUSH
16673: LD_INT 1
16675: NEG
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PUSH
16681: LD_INT 1
16683: PUSH
16684: LD_INT 0
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 1
16693: PUSH
16694: LD_INT 1
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 0
16703: PUSH
16704: LD_INT 1
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 1
16713: NEG
16714: PUSH
16715: LD_INT 0
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 1
16724: NEG
16725: PUSH
16726: LD_INT 1
16728: NEG
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: LD_INT 1
16736: NEG
16737: PUSH
16738: LD_INT 2
16740: NEG
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 0
16748: PUSH
16749: LD_INT 2
16751: NEG
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 1
16759: PUSH
16760: LD_INT 1
16762: NEG
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 2
16770: PUSH
16771: LD_INT 0
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: LD_INT 2
16790: PUSH
16791: LD_INT 2
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 1
16800: PUSH
16801: LD_INT 2
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: LD_INT 0
16810: PUSH
16811: LD_INT 2
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: LD_INT 1
16820: NEG
16821: PUSH
16822: LD_INT 1
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 2
16831: NEG
16832: PUSH
16833: LD_INT 0
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: LD_INT 2
16842: NEG
16843: PUSH
16844: LD_INT 1
16846: NEG
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 2
16854: NEG
16855: PUSH
16856: LD_INT 2
16858: NEG
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16885: LD_ADDR_VAR 0 18
16889: PUSH
16890: LD_INT 0
16892: PUSH
16893: LD_INT 0
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 0
16902: PUSH
16903: LD_INT 1
16905: NEG
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 1
16913: PUSH
16914: LD_INT 0
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 1
16923: PUSH
16924: LD_INT 1
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 0
16933: PUSH
16934: LD_INT 1
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 1
16943: NEG
16944: PUSH
16945: LD_INT 0
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: LD_INT 1
16954: NEG
16955: PUSH
16956: LD_INT 1
16958: NEG
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 1
16966: NEG
16967: PUSH
16968: LD_INT 2
16970: NEG
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 0
16978: PUSH
16979: LD_INT 2
16981: NEG
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: LD_INT 1
16992: NEG
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PUSH
16998: LD_INT 2
17000: PUSH
17001: LD_INT 0
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: LD_INT 2
17010: PUSH
17011: LD_INT 1
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 2
17020: PUSH
17021: LD_INT 2
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: LD_INT 1
17030: PUSH
17031: LD_INT 2
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 0
17040: PUSH
17041: LD_INT 2
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 1
17050: NEG
17051: PUSH
17052: LD_INT 1
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: PUSH
17059: LD_INT 2
17061: NEG
17062: PUSH
17063: LD_INT 0
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: LD_INT 2
17072: NEG
17073: PUSH
17074: LD_INT 1
17076: NEG
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: LD_INT 2
17084: NEG
17085: PUSH
17086: LD_INT 2
17088: NEG
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17115: LD_ADDR_VAR 0 19
17119: PUSH
17120: LD_INT 0
17122: PUSH
17123: LD_INT 0
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 0
17132: PUSH
17133: LD_INT 1
17135: NEG
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 1
17143: PUSH
17144: LD_INT 0
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 1
17153: PUSH
17154: LD_INT 1
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 0
17163: PUSH
17164: LD_INT 1
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 1
17173: NEG
17174: PUSH
17175: LD_INT 0
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 1
17184: NEG
17185: PUSH
17186: LD_INT 1
17188: NEG
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 1
17196: NEG
17197: PUSH
17198: LD_INT 2
17200: NEG
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 0
17208: PUSH
17209: LD_INT 2
17211: NEG
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 1
17219: PUSH
17220: LD_INT 1
17222: NEG
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: LD_INT 0
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: PUSH
17238: LD_INT 2
17240: PUSH
17241: LD_INT 1
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 2
17250: PUSH
17251: LD_INT 2
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 1
17260: PUSH
17261: LD_INT 2
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 0
17270: PUSH
17271: LD_INT 2
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 1
17280: NEG
17281: PUSH
17282: LD_INT 1
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: LD_INT 2
17291: NEG
17292: PUSH
17293: LD_INT 0
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: LD_INT 2
17302: NEG
17303: PUSH
17304: LD_INT 1
17306: NEG
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 2
17314: NEG
17315: PUSH
17316: LD_INT 2
17318: NEG
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17345: LD_ADDR_VAR 0 20
17349: PUSH
17350: LD_INT 0
17352: PUSH
17353: LD_INT 0
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 0
17362: PUSH
17363: LD_INT 1
17365: NEG
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 1
17373: PUSH
17374: LD_INT 0
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 1
17383: PUSH
17384: LD_INT 1
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 0
17393: PUSH
17394: LD_INT 1
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 1
17403: NEG
17404: PUSH
17405: LD_INT 0
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: LD_INT 1
17414: NEG
17415: PUSH
17416: LD_INT 1
17418: NEG
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 1
17426: NEG
17427: PUSH
17428: LD_INT 2
17430: NEG
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 0
17438: PUSH
17439: LD_INT 2
17441: NEG
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 1
17449: PUSH
17450: LD_INT 1
17452: NEG
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 2
17460: PUSH
17461: LD_INT 0
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 2
17470: PUSH
17471: LD_INT 1
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 2
17480: PUSH
17481: LD_INT 2
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 1
17490: PUSH
17491: LD_INT 2
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 0
17500: PUSH
17501: LD_INT 2
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 1
17510: NEG
17511: PUSH
17512: LD_INT 1
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 2
17521: NEG
17522: PUSH
17523: LD_INT 0
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 2
17532: NEG
17533: PUSH
17534: LD_INT 1
17536: NEG
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 2
17544: NEG
17545: PUSH
17546: LD_INT 2
17548: NEG
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17575: LD_ADDR_VAR 0 21
17579: PUSH
17580: LD_INT 0
17582: PUSH
17583: LD_INT 0
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 0
17592: PUSH
17593: LD_INT 1
17595: NEG
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 1
17603: PUSH
17604: LD_INT 0
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 1
17613: PUSH
17614: LD_INT 1
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 0
17623: PUSH
17624: LD_INT 1
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: LD_INT 1
17633: NEG
17634: PUSH
17635: LD_INT 0
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 1
17644: NEG
17645: PUSH
17646: LD_INT 1
17648: NEG
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 1
17656: NEG
17657: PUSH
17658: LD_INT 2
17660: NEG
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 0
17668: PUSH
17669: LD_INT 2
17671: NEG
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 1
17679: PUSH
17680: LD_INT 1
17682: NEG
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 2
17690: PUSH
17691: LD_INT 0
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 2
17700: PUSH
17701: LD_INT 1
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: LD_INT 2
17710: PUSH
17711: LD_INT 2
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 1
17720: PUSH
17721: LD_INT 2
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 0
17730: PUSH
17731: LD_INT 2
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 1
17740: NEG
17741: PUSH
17742: LD_INT 1
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 2
17751: NEG
17752: PUSH
17753: LD_INT 0
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 2
17762: NEG
17763: PUSH
17764: LD_INT 1
17766: NEG
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 2
17774: NEG
17775: PUSH
17776: LD_INT 2
17778: NEG
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17805: LD_ADDR_VAR 0 22
17809: PUSH
17810: LD_INT 0
17812: PUSH
17813: LD_INT 0
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 0
17822: PUSH
17823: LD_INT 1
17825: NEG
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: LD_INT 0
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 1
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 0
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 1
17863: NEG
17864: PUSH
17865: LD_INT 0
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 1
17874: NEG
17875: PUSH
17876: LD_INT 1
17878: NEG
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 1
17886: NEG
17887: PUSH
17888: LD_INT 2
17890: NEG
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 0
17898: PUSH
17899: LD_INT 2
17901: NEG
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 1
17909: PUSH
17910: LD_INT 1
17912: NEG
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 2
17920: PUSH
17921: LD_INT 0
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 2
17930: PUSH
17931: LD_INT 1
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 2
17940: PUSH
17941: LD_INT 2
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 1
17950: PUSH
17951: LD_INT 2
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 0
17960: PUSH
17961: LD_INT 2
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 1
17970: NEG
17971: PUSH
17972: LD_INT 1
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 2
17981: NEG
17982: PUSH
17983: LD_INT 0
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: LD_INT 2
17992: NEG
17993: PUSH
17994: LD_INT 1
17996: NEG
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 2
18004: NEG
18005: PUSH
18006: LD_INT 2
18008: NEG
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18035: LD_ADDR_VAR 0 23
18039: PUSH
18040: LD_INT 0
18042: PUSH
18043: LD_INT 0
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 0
18052: PUSH
18053: LD_INT 1
18055: NEG
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 1
18063: PUSH
18064: LD_INT 0
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 1
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 0
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 1
18093: NEG
18094: PUSH
18095: LD_INT 0
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 1
18104: NEG
18105: PUSH
18106: LD_INT 1
18108: NEG
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 1
18116: NEG
18117: PUSH
18118: LD_INT 2
18120: NEG
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 0
18128: PUSH
18129: LD_INT 2
18131: NEG
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 1
18139: PUSH
18140: LD_INT 1
18142: NEG
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 2
18150: PUSH
18151: LD_INT 0
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: LD_INT 2
18160: PUSH
18161: LD_INT 1
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 2
18170: PUSH
18171: LD_INT 2
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 1
18180: PUSH
18181: LD_INT 2
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 0
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 1
18200: NEG
18201: PUSH
18202: LD_INT 1
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 2
18211: NEG
18212: PUSH
18213: LD_INT 0
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 2
18222: NEG
18223: PUSH
18224: LD_INT 1
18226: NEG
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 2
18234: NEG
18235: PUSH
18236: LD_INT 2
18238: NEG
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 2
18246: NEG
18247: PUSH
18248: LD_INT 3
18250: NEG
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 1
18258: NEG
18259: PUSH
18260: LD_INT 3
18262: NEG
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 1
18270: PUSH
18271: LD_INT 2
18273: NEG
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 2
18281: PUSH
18282: LD_INT 1
18284: NEG
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18315: LD_ADDR_VAR 0 24
18319: PUSH
18320: LD_INT 0
18322: PUSH
18323: LD_INT 0
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 0
18332: PUSH
18333: LD_INT 1
18335: NEG
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 1
18343: PUSH
18344: LD_INT 0
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 1
18353: PUSH
18354: LD_INT 1
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 0
18363: PUSH
18364: LD_INT 1
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 1
18373: NEG
18374: PUSH
18375: LD_INT 0
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 1
18384: NEG
18385: PUSH
18386: LD_INT 1
18388: NEG
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 1
18396: NEG
18397: PUSH
18398: LD_INT 2
18400: NEG
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: LD_INT 2
18411: NEG
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: LD_INT 1
18422: NEG
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 2
18430: PUSH
18431: LD_INT 0
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 2
18440: PUSH
18441: LD_INT 1
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 2
18450: PUSH
18451: LD_INT 2
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 1
18460: PUSH
18461: LD_INT 2
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 0
18470: PUSH
18471: LD_INT 2
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 1
18480: NEG
18481: PUSH
18482: LD_INT 1
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 2
18491: NEG
18492: PUSH
18493: LD_INT 0
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 2
18502: NEG
18503: PUSH
18504: LD_INT 1
18506: NEG
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 2
18514: NEG
18515: PUSH
18516: LD_INT 2
18518: NEG
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: LD_INT 2
18529: NEG
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 2
18537: PUSH
18538: LD_INT 1
18540: NEG
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 3
18548: PUSH
18549: LD_INT 1
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 3
18558: PUSH
18559: LD_INT 2
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18591: LD_ADDR_VAR 0 25
18595: PUSH
18596: LD_INT 0
18598: PUSH
18599: LD_INT 0
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: LD_INT 0
18608: PUSH
18609: LD_INT 1
18611: NEG
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 1
18619: PUSH
18620: LD_INT 0
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 1
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 0
18639: PUSH
18640: LD_INT 1
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 1
18649: NEG
18650: PUSH
18651: LD_INT 0
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 1
18660: NEG
18661: PUSH
18662: LD_INT 1
18664: NEG
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 1
18672: NEG
18673: PUSH
18674: LD_INT 2
18676: NEG
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 0
18684: PUSH
18685: LD_INT 2
18687: NEG
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 1
18695: PUSH
18696: LD_INT 1
18698: NEG
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_INT 2
18706: PUSH
18707: LD_INT 0
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 2
18716: PUSH
18717: LD_INT 1
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: LD_INT 2
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 0
18746: PUSH
18747: LD_INT 2
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 1
18756: NEG
18757: PUSH
18758: LD_INT 1
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 2
18767: NEG
18768: PUSH
18769: LD_INT 0
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 2
18778: NEG
18779: PUSH
18780: LD_INT 1
18782: NEG
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 2
18790: NEG
18791: PUSH
18792: LD_INT 2
18794: NEG
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 3
18802: PUSH
18803: LD_INT 1
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 3
18812: PUSH
18813: LD_INT 2
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 2
18822: PUSH
18823: LD_INT 3
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 1
18832: PUSH
18833: LD_INT 3
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18865: LD_ADDR_VAR 0 26
18869: PUSH
18870: LD_INT 0
18872: PUSH
18873: LD_INT 0
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 0
18882: PUSH
18883: LD_INT 1
18885: NEG
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 1
18893: PUSH
18894: LD_INT 0
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 1
18903: PUSH
18904: LD_INT 1
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 0
18913: PUSH
18914: LD_INT 1
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 1
18923: NEG
18924: PUSH
18925: LD_INT 0
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 1
18934: NEG
18935: PUSH
18936: LD_INT 1
18938: NEG
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 1
18946: NEG
18947: PUSH
18948: LD_INT 2
18950: NEG
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 0
18958: PUSH
18959: LD_INT 2
18961: NEG
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: LD_INT 1
18972: NEG
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 2
18980: PUSH
18981: LD_INT 0
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 2
18990: PUSH
18991: LD_INT 1
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 2
19000: PUSH
19001: LD_INT 2
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 1
19010: PUSH
19011: LD_INT 2
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 0
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 1
19030: NEG
19031: PUSH
19032: LD_INT 1
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 2
19041: NEG
19042: PUSH
19043: LD_INT 0
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 2
19052: NEG
19053: PUSH
19054: LD_INT 1
19056: NEG
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 2
19064: NEG
19065: PUSH
19066: LD_INT 2
19068: NEG
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: LD_INT 3
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 1
19086: PUSH
19087: LD_INT 3
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 1
19096: NEG
19097: PUSH
19098: LD_INT 2
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 2
19107: NEG
19108: PUSH
19109: LD_INT 1
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19141: LD_ADDR_VAR 0 27
19145: PUSH
19146: LD_INT 0
19148: PUSH
19149: LD_INT 0
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 0
19158: PUSH
19159: LD_INT 1
19161: NEG
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 1
19169: PUSH
19170: LD_INT 0
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: LD_INT 1
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 1
19199: NEG
19200: PUSH
19201: LD_INT 0
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 1
19210: NEG
19211: PUSH
19212: LD_INT 1
19214: NEG
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 1
19222: NEG
19223: PUSH
19224: LD_INT 2
19226: NEG
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 0
19234: PUSH
19235: LD_INT 2
19237: NEG
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 1
19245: PUSH
19246: LD_INT 1
19248: NEG
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: LD_INT 0
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 2
19266: PUSH
19267: LD_INT 1
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 2
19276: PUSH
19277: LD_INT 2
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 1
19286: PUSH
19287: LD_INT 2
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 0
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 1
19306: NEG
19307: PUSH
19308: LD_INT 1
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 2
19317: NEG
19318: PUSH
19319: LD_INT 0
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 2
19328: NEG
19329: PUSH
19330: LD_INT 1
19332: NEG
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: NEG
19341: PUSH
19342: LD_INT 2
19344: NEG
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 1
19352: NEG
19353: PUSH
19354: LD_INT 2
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 2
19363: NEG
19364: PUSH
19365: LD_INT 1
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 3
19374: NEG
19375: PUSH
19376: LD_INT 1
19378: NEG
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 3
19386: NEG
19387: PUSH
19388: LD_INT 2
19390: NEG
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19421: LD_ADDR_VAR 0 28
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: LD_INT 0
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 0
19438: PUSH
19439: LD_INT 1
19441: NEG
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 1
19449: PUSH
19450: LD_INT 0
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 0
19469: PUSH
19470: LD_INT 1
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 1
19479: NEG
19480: PUSH
19481: LD_INT 0
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: NEG
19491: PUSH
19492: LD_INT 1
19494: NEG
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 1
19502: NEG
19503: PUSH
19504: LD_INT 2
19506: NEG
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 0
19514: PUSH
19515: LD_INT 2
19517: NEG
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 1
19525: PUSH
19526: LD_INT 1
19528: NEG
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 2
19536: PUSH
19537: LD_INT 0
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 2
19546: PUSH
19547: LD_INT 1
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 2
19556: PUSH
19557: LD_INT 2
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 1
19566: PUSH
19567: LD_INT 2
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 0
19576: PUSH
19577: LD_INT 2
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 1
19586: NEG
19587: PUSH
19588: LD_INT 1
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 2
19597: NEG
19598: PUSH
19599: LD_INT 0
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 2
19608: NEG
19609: PUSH
19610: LD_INT 1
19612: NEG
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 2
19620: NEG
19621: PUSH
19622: LD_INT 2
19624: NEG
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 2
19632: NEG
19633: PUSH
19634: LD_INT 3
19636: NEG
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 1
19644: NEG
19645: PUSH
19646: LD_INT 3
19648: NEG
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 3
19656: NEG
19657: PUSH
19658: LD_INT 1
19660: NEG
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 3
19668: NEG
19669: PUSH
19670: LD_INT 2
19672: NEG
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19703: LD_ADDR_VAR 0 29
19707: PUSH
19708: LD_INT 0
19710: PUSH
19711: LD_INT 0
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 0
19720: PUSH
19721: LD_INT 1
19723: NEG
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 1
19731: PUSH
19732: LD_INT 0
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 1
19741: PUSH
19742: LD_INT 1
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 0
19751: PUSH
19752: LD_INT 1
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 1
19761: NEG
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 1
19772: NEG
19773: PUSH
19774: LD_INT 1
19776: NEG
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 1
19784: NEG
19785: PUSH
19786: LD_INT 2
19788: NEG
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 0
19796: PUSH
19797: LD_INT 2
19799: NEG
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 1
19807: PUSH
19808: LD_INT 1
19810: NEG
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 2
19818: PUSH
19819: LD_INT 0
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 2
19828: PUSH
19829: LD_INT 1
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 1
19838: PUSH
19839: LD_INT 2
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 0
19848: PUSH
19849: LD_INT 2
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 1
19858: NEG
19859: PUSH
19860: LD_INT 1
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 2
19869: NEG
19870: PUSH
19871: LD_INT 1
19873: NEG
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 2
19881: NEG
19882: PUSH
19883: LD_INT 2
19885: NEG
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 2
19893: NEG
19894: PUSH
19895: LD_INT 3
19897: NEG
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 2
19905: PUSH
19906: LD_INT 1
19908: NEG
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 3
19916: PUSH
19917: LD_INT 1
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 1
19926: PUSH
19927: LD_INT 3
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 1
19936: NEG
19937: PUSH
19938: LD_INT 2
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 3
19947: NEG
19948: PUSH
19949: LD_INT 2
19951: NEG
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19982: LD_ADDR_VAR 0 30
19986: PUSH
19987: LD_INT 0
19989: PUSH
19990: LD_INT 0
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 0
19999: PUSH
20000: LD_INT 1
20002: NEG
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 1
20010: PUSH
20011: LD_INT 0
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 1
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 0
20030: PUSH
20031: LD_INT 1
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 1
20040: NEG
20041: PUSH
20042: LD_INT 0
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 1
20051: NEG
20052: PUSH
20053: LD_INT 1
20055: NEG
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 1
20063: NEG
20064: PUSH
20065: LD_INT 2
20067: NEG
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 0
20075: PUSH
20076: LD_INT 2
20078: NEG
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 1
20086: PUSH
20087: LD_INT 1
20089: NEG
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 2
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 2
20107: PUSH
20108: LD_INT 1
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 2
20117: PUSH
20118: LD_INT 2
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 1
20127: PUSH
20128: LD_INT 2
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 1
20137: NEG
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 2
20148: NEG
20149: PUSH
20150: LD_INT 0
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 2
20159: NEG
20160: PUSH
20161: LD_INT 1
20163: NEG
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 1
20171: NEG
20172: PUSH
20173: LD_INT 3
20175: NEG
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 1
20183: PUSH
20184: LD_INT 2
20186: NEG
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 3
20194: PUSH
20195: LD_INT 2
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 2
20204: PUSH
20205: LD_INT 3
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 2
20214: NEG
20215: PUSH
20216: LD_INT 1
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 3
20225: NEG
20226: PUSH
20227: LD_INT 1
20229: NEG
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20260: LD_ADDR_VAR 0 31
20264: PUSH
20265: LD_INT 0
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: LD_INT 1
20280: NEG
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 1
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 1
20298: PUSH
20299: LD_INT 1
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 0
20308: PUSH
20309: LD_INT 1
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 1
20318: NEG
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 1
20329: NEG
20330: PUSH
20331: LD_INT 1
20333: NEG
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 1
20341: NEG
20342: PUSH
20343: LD_INT 2
20345: NEG
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 1
20353: PUSH
20354: LD_INT 1
20356: NEG
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 2
20364: PUSH
20365: LD_INT 0
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 2
20374: PUSH
20375: LD_INT 1
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 2
20384: PUSH
20385: LD_INT 2
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 1
20394: PUSH
20395: LD_INT 2
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 0
20404: PUSH
20405: LD_INT 2
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 1
20414: NEG
20415: PUSH
20416: LD_INT 1
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 2
20425: NEG
20426: PUSH
20427: LD_INT 1
20429: NEG
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 2
20437: NEG
20438: PUSH
20439: LD_INT 2
20441: NEG
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 2
20449: NEG
20450: PUSH
20451: LD_INT 3
20453: NEG
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 2
20461: PUSH
20462: LD_INT 1
20464: NEG
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 3
20472: PUSH
20473: LD_INT 1
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 1
20482: PUSH
20483: LD_INT 3
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: LD_INT 1
20492: NEG
20493: PUSH
20494: LD_INT 2
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 3
20503: NEG
20504: PUSH
20505: LD_INT 2
20507: NEG
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20538: LD_ADDR_VAR 0 32
20542: PUSH
20543: LD_INT 0
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: LD_INT 1
20558: NEG
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 1
20566: PUSH
20567: LD_INT 0
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 1
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: LD_INT 1
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 1
20596: NEG
20597: PUSH
20598: LD_INT 0
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 1
20607: NEG
20608: PUSH
20609: LD_INT 1
20611: NEG
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 1
20619: NEG
20620: PUSH
20621: LD_INT 2
20623: NEG
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: LD_INT 2
20634: NEG
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: LD_INT 1
20645: NEG
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 2
20653: PUSH
20654: LD_INT 1
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 2
20663: PUSH
20664: LD_INT 2
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 1
20673: PUSH
20674: LD_INT 2
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 0
20683: PUSH
20684: LD_INT 2
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 1
20693: NEG
20694: PUSH
20695: LD_INT 1
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 2
20704: NEG
20705: PUSH
20706: LD_INT 0
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 2
20715: NEG
20716: PUSH
20717: LD_INT 1
20719: NEG
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 1
20727: NEG
20728: PUSH
20729: LD_INT 3
20731: NEG
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 1
20739: PUSH
20740: LD_INT 2
20742: NEG
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 3
20750: PUSH
20751: LD_INT 2
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 2
20760: PUSH
20761: LD_INT 3
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 2
20770: NEG
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 3
20781: NEG
20782: PUSH
20783: LD_INT 1
20785: NEG
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20816: LD_ADDR_VAR 0 33
20820: PUSH
20821: LD_INT 0
20823: PUSH
20824: LD_INT 0
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 0
20833: PUSH
20834: LD_INT 1
20836: NEG
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 1
20844: PUSH
20845: LD_INT 0
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 1
20854: PUSH
20855: LD_INT 1
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 0
20864: PUSH
20865: LD_INT 1
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 1
20874: NEG
20875: PUSH
20876: LD_INT 0
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: NEG
20886: PUSH
20887: LD_INT 1
20889: NEG
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 1
20897: NEG
20898: PUSH
20899: LD_INT 2
20901: NEG
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PUSH
20907: LD_INT 1
20909: PUSH
20910: LD_INT 1
20912: NEG
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 2
20920: PUSH
20921: LD_INT 0
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: LD_INT 1
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 1
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 0
20950: PUSH
20951: LD_INT 2
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 1
20960: NEG
20961: PUSH
20962: LD_INT 1
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 2
20971: NEG
20972: PUSH
20973: LD_INT 0
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 2
20982: NEG
20983: PUSH
20984: LD_INT 1
20986: NEG
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 2
20994: NEG
20995: PUSH
20996: LD_INT 2
20998: NEG
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 2
21006: NEG
21007: PUSH
21008: LD_INT 3
21010: NEG
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 2
21018: PUSH
21019: LD_INT 1
21021: NEG
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 3
21029: PUSH
21030: LD_INT 1
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 1
21039: PUSH
21040: LD_INT 3
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 1
21049: NEG
21050: PUSH
21051: LD_INT 2
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 3
21060: NEG
21061: PUSH
21062: LD_INT 2
21064: NEG
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21095: LD_ADDR_VAR 0 34
21099: PUSH
21100: LD_INT 0
21102: PUSH
21103: LD_INT 0
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 0
21112: PUSH
21113: LD_INT 1
21115: NEG
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 1
21123: PUSH
21124: LD_INT 0
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 1
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 0
21143: PUSH
21144: LD_INT 1
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 1
21153: NEG
21154: PUSH
21155: LD_INT 0
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 1
21164: NEG
21165: PUSH
21166: LD_INT 1
21168: NEG
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 1
21176: NEG
21177: PUSH
21178: LD_INT 2
21180: NEG
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 0
21188: PUSH
21189: LD_INT 2
21191: NEG
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 1
21199: PUSH
21200: LD_INT 1
21202: NEG
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: LD_INT 1
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 2
21220: PUSH
21221: LD_INT 2
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 1
21230: PUSH
21231: LD_INT 2
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 1
21240: NEG
21241: PUSH
21242: LD_INT 1
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 2
21251: NEG
21252: PUSH
21253: LD_INT 0
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 2
21262: NEG
21263: PUSH
21264: LD_INT 1
21266: NEG
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 2
21274: NEG
21275: PUSH
21276: LD_INT 2
21278: NEG
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 1
21286: NEG
21287: PUSH
21288: LD_INT 3
21290: NEG
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 1
21298: PUSH
21299: LD_INT 2
21301: NEG
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 3
21309: PUSH
21310: LD_INT 2
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 2
21319: PUSH
21320: LD_INT 3
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 2
21329: NEG
21330: PUSH
21331: LD_INT 1
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 3
21340: NEG
21341: PUSH
21342: LD_INT 1
21344: NEG
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21375: LD_ADDR_VAR 0 35
21379: PUSH
21380: LD_INT 0
21382: PUSH
21383: LD_INT 0
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 0
21392: PUSH
21393: LD_INT 1
21395: NEG
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: LD_INT 1
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 0
21423: PUSH
21424: LD_INT 1
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: NEG
21434: PUSH
21435: LD_INT 0
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 1
21444: NEG
21445: PUSH
21446: LD_INT 1
21448: NEG
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 2
21456: PUSH
21457: LD_INT 1
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 2
21466: NEG
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21487: LD_ADDR_VAR 0 36
21491: PUSH
21492: LD_INT 0
21494: PUSH
21495: LD_INT 0
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 0
21504: PUSH
21505: LD_INT 1
21507: NEG
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 1
21515: PUSH
21516: LD_INT 0
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 1
21525: PUSH
21526: LD_INT 1
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 0
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 1
21545: NEG
21546: PUSH
21547: LD_INT 0
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 1
21556: NEG
21557: PUSH
21558: LD_INT 1
21560: NEG
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 1
21568: NEG
21569: PUSH
21570: LD_INT 2
21572: NEG
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 1
21580: PUSH
21581: LD_INT 2
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21599: LD_ADDR_VAR 0 37
21603: PUSH
21604: LD_INT 0
21606: PUSH
21607: LD_INT 0
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 0
21616: PUSH
21617: LD_INT 1
21619: NEG
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 1
21627: PUSH
21628: LD_INT 0
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 1
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 0
21647: PUSH
21648: LD_INT 1
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 1
21657: NEG
21658: PUSH
21659: LD_INT 0
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 1
21668: NEG
21669: PUSH
21670: LD_INT 1
21672: NEG
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 1
21680: PUSH
21681: LD_INT 1
21683: NEG
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 1
21691: NEG
21692: PUSH
21693: LD_INT 1
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21711: LD_ADDR_VAR 0 38
21715: PUSH
21716: LD_INT 0
21718: PUSH
21719: LD_INT 0
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 0
21728: PUSH
21729: LD_INT 1
21731: NEG
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 1
21739: PUSH
21740: LD_INT 0
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 0
21759: PUSH
21760: LD_INT 1
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 1
21769: NEG
21770: PUSH
21771: LD_INT 0
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 1
21780: NEG
21781: PUSH
21782: LD_INT 1
21784: NEG
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 2
21792: PUSH
21793: LD_INT 1
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 2
21802: NEG
21803: PUSH
21804: LD_INT 1
21806: NEG
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21823: LD_ADDR_VAR 0 39
21827: PUSH
21828: LD_INT 0
21830: PUSH
21831: LD_INT 0
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 0
21840: PUSH
21841: LD_INT 1
21843: NEG
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 1
21851: PUSH
21852: LD_INT 0
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 1
21861: PUSH
21862: LD_INT 1
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 0
21871: PUSH
21872: LD_INT 1
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 1
21881: NEG
21882: PUSH
21883: LD_INT 0
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 1
21892: NEG
21893: PUSH
21894: LD_INT 1
21896: NEG
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 1
21904: NEG
21905: PUSH
21906: LD_INT 2
21908: NEG
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 1
21916: PUSH
21917: LD_INT 2
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21935: LD_ADDR_VAR 0 40
21939: PUSH
21940: LD_INT 0
21942: PUSH
21943: LD_INT 0
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 0
21952: PUSH
21953: LD_INT 1
21955: NEG
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 1
21963: PUSH
21964: LD_INT 0
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 1
21973: PUSH
21974: LD_INT 1
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 0
21983: PUSH
21984: LD_INT 1
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 1
21993: NEG
21994: PUSH
21995: LD_INT 0
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 1
22004: NEG
22005: PUSH
22006: LD_INT 1
22008: NEG
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: LD_INT 1
22016: PUSH
22017: LD_INT 1
22019: NEG
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 1
22027: NEG
22028: PUSH
22029: LD_INT 1
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22047: LD_ADDR_VAR 0 41
22051: PUSH
22052: LD_INT 0
22054: PUSH
22055: LD_INT 0
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 0
22064: PUSH
22065: LD_INT 1
22067: NEG
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 1
22075: PUSH
22076: LD_INT 0
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 1
22085: PUSH
22086: LD_INT 1
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 0
22095: PUSH
22096: LD_INT 1
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 1
22105: NEG
22106: PUSH
22107: LD_INT 0
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 1
22116: NEG
22117: PUSH
22118: LD_INT 1
22120: NEG
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 1
22128: NEG
22129: PUSH
22130: LD_INT 2
22132: NEG
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 1
22140: PUSH
22141: LD_INT 1
22143: NEG
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 2
22151: PUSH
22152: LD_INT 0
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 2
22161: PUSH
22162: LD_INT 1
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 2
22171: PUSH
22172: LD_INT 2
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: LD_INT 2
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 1
22191: NEG
22192: PUSH
22193: LD_INT 1
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 2
22202: NEG
22203: PUSH
22204: LD_INT 0
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 2
22213: NEG
22214: PUSH
22215: LD_INT 1
22217: NEG
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 2
22225: NEG
22226: PUSH
22227: LD_INT 2
22229: NEG
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 2
22237: NEG
22238: PUSH
22239: LD_INT 3
22241: NEG
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 2
22249: PUSH
22250: LD_INT 1
22252: NEG
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 3
22260: PUSH
22261: LD_INT 0
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 3
22270: PUSH
22271: LD_INT 1
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 3
22280: PUSH
22281: LD_INT 2
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 3
22290: PUSH
22291: LD_INT 3
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 2
22300: PUSH
22301: LD_INT 3
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 2
22310: NEG
22311: PUSH
22312: LD_INT 1
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 3
22321: NEG
22322: PUSH
22323: LD_INT 0
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 3
22332: NEG
22333: PUSH
22334: LD_INT 1
22336: NEG
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 3
22344: NEG
22345: PUSH
22346: LD_INT 2
22348: NEG
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 3
22356: NEG
22357: PUSH
22358: LD_INT 3
22360: NEG
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22397: LD_ADDR_VAR 0 42
22401: PUSH
22402: LD_INT 0
22404: PUSH
22405: LD_INT 0
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 0
22414: PUSH
22415: LD_INT 1
22417: NEG
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 1
22425: PUSH
22426: LD_INT 0
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 1
22435: PUSH
22436: LD_INT 1
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 0
22445: PUSH
22446: LD_INT 1
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 1
22455: NEG
22456: PUSH
22457: LD_INT 0
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 1
22466: NEG
22467: PUSH
22468: LD_INT 1
22470: NEG
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 1
22478: NEG
22479: PUSH
22480: LD_INT 2
22482: NEG
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 0
22490: PUSH
22491: LD_INT 2
22493: NEG
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 1
22501: PUSH
22502: LD_INT 1
22504: NEG
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 2
22512: PUSH
22513: LD_INT 1
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 2
22522: PUSH
22523: LD_INT 2
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: LD_INT 2
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 0
22542: PUSH
22543: LD_INT 2
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: NEG
22553: PUSH
22554: LD_INT 1
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 2
22563: NEG
22564: PUSH
22565: LD_INT 1
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 2
22575: NEG
22576: PUSH
22577: LD_INT 2
22579: NEG
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 2
22587: NEG
22588: PUSH
22589: LD_INT 3
22591: NEG
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 1
22599: NEG
22600: PUSH
22601: LD_INT 3
22603: NEG
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 0
22611: PUSH
22612: LD_INT 3
22614: NEG
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 1
22622: PUSH
22623: LD_INT 2
22625: NEG
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 3
22633: PUSH
22634: LD_INT 2
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 3
22643: PUSH
22644: LD_INT 3
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 2
22653: PUSH
22654: LD_INT 3
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 1
22663: PUSH
22664: LD_INT 3
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 0
22673: PUSH
22674: LD_INT 3
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 1
22683: NEG
22684: PUSH
22685: LD_INT 2
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 3
22694: NEG
22695: PUSH
22696: LD_INT 2
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 3
22706: NEG
22707: PUSH
22708: LD_INT 3
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22747: LD_ADDR_VAR 0 43
22751: PUSH
22752: LD_INT 0
22754: PUSH
22755: LD_INT 0
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 0
22764: PUSH
22765: LD_INT 1
22767: NEG
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 1
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: LD_INT 1
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 0
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 1
22805: NEG
22806: PUSH
22807: LD_INT 0
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 1
22816: NEG
22817: PUSH
22818: LD_INT 1
22820: NEG
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 1
22828: NEG
22829: PUSH
22830: LD_INT 2
22832: NEG
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 0
22840: PUSH
22841: LD_INT 2
22843: NEG
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 1
22851: PUSH
22852: LD_INT 1
22854: NEG
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: LD_INT 0
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 2
22872: PUSH
22873: LD_INT 1
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: LD_INT 2
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 0
22892: PUSH
22893: LD_INT 2
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 1
22902: NEG
22903: PUSH
22904: LD_INT 1
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 2
22913: NEG
22914: PUSH
22915: LD_INT 0
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 2
22924: NEG
22925: PUSH
22926: LD_INT 1
22928: NEG
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 1
22936: NEG
22937: PUSH
22938: LD_INT 3
22940: NEG
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 0
22948: PUSH
22949: LD_INT 3
22951: NEG
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: LD_INT 2
22962: NEG
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 2
22970: PUSH
22971: LD_INT 1
22973: NEG
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 3
22981: PUSH
22982: LD_INT 0
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 3
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 1
23001: PUSH
23002: LD_INT 3
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 0
23011: PUSH
23012: LD_INT 3
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: NEG
23022: PUSH
23023: LD_INT 2
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 2
23032: NEG
23033: PUSH
23034: LD_INT 1
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 3
23043: NEG
23044: PUSH
23045: LD_INT 0
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 3
23054: NEG
23055: PUSH
23056: LD_INT 1
23058: NEG
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23095: LD_ADDR_VAR 0 44
23099: PUSH
23100: LD_INT 0
23102: PUSH
23103: LD_INT 0
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 0
23112: PUSH
23113: LD_INT 1
23115: NEG
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 1
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 0
23143: PUSH
23144: LD_INT 1
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 1
23153: NEG
23154: PUSH
23155: LD_INT 0
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 1
23164: NEG
23165: PUSH
23166: LD_INT 1
23168: NEG
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 1
23176: NEG
23177: PUSH
23178: LD_INT 2
23180: NEG
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 1
23188: PUSH
23189: LD_INT 1
23191: NEG
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 2
23199: PUSH
23200: LD_INT 0
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 2
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 2
23219: PUSH
23220: LD_INT 2
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 1
23229: PUSH
23230: LD_INT 2
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 1
23239: NEG
23240: PUSH
23241: LD_INT 1
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 2
23250: NEG
23251: PUSH
23252: LD_INT 0
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 2
23261: NEG
23262: PUSH
23263: LD_INT 1
23265: NEG
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 2
23273: NEG
23274: PUSH
23275: LD_INT 2
23277: NEG
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 2
23285: NEG
23286: PUSH
23287: LD_INT 3
23289: NEG
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 2
23297: PUSH
23298: LD_INT 1
23300: NEG
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 3
23308: PUSH
23309: LD_INT 0
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 3
23318: PUSH
23319: LD_INT 1
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 3
23328: PUSH
23329: LD_INT 2
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 3
23338: PUSH
23339: LD_INT 3
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 2
23348: PUSH
23349: LD_INT 3
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 2
23358: NEG
23359: PUSH
23360: LD_INT 1
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 3
23369: NEG
23370: PUSH
23371: LD_INT 0
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 3
23380: NEG
23381: PUSH
23382: LD_INT 1
23384: NEG
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 3
23392: NEG
23393: PUSH
23394: LD_INT 2
23396: NEG
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 3
23404: NEG
23405: PUSH
23406: LD_INT 3
23408: NEG
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23445: LD_ADDR_VAR 0 45
23449: PUSH
23450: LD_INT 0
23452: PUSH
23453: LD_INT 0
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 0
23462: PUSH
23463: LD_INT 1
23465: NEG
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 1
23473: PUSH
23474: LD_INT 0
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 1
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 0
23493: PUSH
23494: LD_INT 1
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 1
23503: NEG
23504: PUSH
23505: LD_INT 0
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 1
23514: NEG
23515: PUSH
23516: LD_INT 1
23518: NEG
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 1
23526: NEG
23527: PUSH
23528: LD_INT 2
23530: NEG
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 0
23538: PUSH
23539: LD_INT 2
23541: NEG
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 1
23549: PUSH
23550: LD_INT 1
23552: NEG
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 2
23560: PUSH
23561: LD_INT 1
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 2
23570: PUSH
23571: LD_INT 2
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 1
23580: PUSH
23581: LD_INT 2
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 0
23590: PUSH
23591: LD_INT 2
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 1
23600: NEG
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 2
23611: NEG
23612: PUSH
23613: LD_INT 1
23615: NEG
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 2
23623: NEG
23624: PUSH
23625: LD_INT 2
23627: NEG
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 2
23635: NEG
23636: PUSH
23637: LD_INT 3
23639: NEG
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 1
23647: NEG
23648: PUSH
23649: LD_INT 3
23651: NEG
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: LD_INT 3
23662: NEG
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: LD_INT 2
23673: NEG
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 3
23681: PUSH
23682: LD_INT 2
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 3
23691: PUSH
23692: LD_INT 3
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 2
23701: PUSH
23702: LD_INT 3
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: LD_INT 3
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 0
23721: PUSH
23722: LD_INT 3
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: NEG
23732: PUSH
23733: LD_INT 2
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 3
23742: NEG
23743: PUSH
23744: LD_INT 2
23746: NEG
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 3
23754: NEG
23755: PUSH
23756: LD_INT 3
23758: NEG
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23795: LD_ADDR_VAR 0 46
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: LD_INT 0
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 0
23812: PUSH
23813: LD_INT 1
23815: NEG
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: PUSH
23824: LD_INT 0
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 0
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 1
23853: NEG
23854: PUSH
23855: LD_INT 0
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 1
23864: NEG
23865: PUSH
23866: LD_INT 1
23868: NEG
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 1
23876: NEG
23877: PUSH
23878: LD_INT 2
23880: NEG
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: LD_INT 2
23891: NEG
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 1
23899: PUSH
23900: LD_INT 1
23902: NEG
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 2
23910: PUSH
23911: LD_INT 0
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: LD_INT 2
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: LD_INT 2
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: LD_INT 1
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 2
23961: NEG
23962: PUSH
23963: LD_INT 0
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 2
23972: NEG
23973: PUSH
23974: LD_INT 1
23976: NEG
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: NEG
23985: PUSH
23986: LD_INT 3
23988: NEG
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 0
23996: PUSH
23997: LD_INT 3
23999: NEG
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 1
24007: PUSH
24008: LD_INT 2
24010: NEG
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 2
24018: PUSH
24019: LD_INT 1
24021: NEG
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 3
24029: PUSH
24030: LD_INT 0
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 3
24039: PUSH
24040: LD_INT 1
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 1
24049: PUSH
24050: LD_INT 3
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: LD_INT 3
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 1
24069: NEG
24070: PUSH
24071: LD_INT 2
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 2
24080: NEG
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 3
24091: NEG
24092: PUSH
24093: LD_INT 0
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 3
24102: NEG
24103: PUSH
24104: LD_INT 1
24106: NEG
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24143: LD_ADDR_VAR 0 47
24147: PUSH
24148: LD_INT 0
24150: PUSH
24151: LD_INT 0
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 1
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: LD_INT 1
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: LD_INT 1
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 1
24201: NEG
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: NEG
24213: PUSH
24214: LD_INT 1
24216: NEG
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 1
24224: NEG
24225: PUSH
24226: LD_INT 2
24228: NEG
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: LD_INT 2
24239: NEG
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 1
24247: PUSH
24248: LD_INT 1
24250: NEG
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 2
24258: NEG
24259: PUSH
24260: LD_INT 1
24262: NEG
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 2
24270: NEG
24271: PUSH
24272: LD_INT 2
24274: NEG
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24294: LD_ADDR_VAR 0 48
24298: PUSH
24299: LD_INT 0
24301: PUSH
24302: LD_INT 0
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 0
24311: PUSH
24312: LD_INT 1
24314: NEG
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 1
24322: PUSH
24323: LD_INT 0
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 1
24332: PUSH
24333: LD_INT 1
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 0
24342: PUSH
24343: LD_INT 1
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 1
24352: NEG
24353: PUSH
24354: LD_INT 0
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 1
24363: NEG
24364: PUSH
24365: LD_INT 1
24367: NEG
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 1
24375: NEG
24376: PUSH
24377: LD_INT 2
24379: NEG
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: LD_INT 2
24390: NEG
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: LD_INT 1
24401: NEG
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 2
24409: PUSH
24410: LD_INT 0
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 2
24419: PUSH
24420: LD_INT 1
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24441: LD_ADDR_VAR 0 49
24445: PUSH
24446: LD_INT 0
24448: PUSH
24449: LD_INT 0
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: LD_INT 1
24461: NEG
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: LD_INT 0
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 1
24479: PUSH
24480: LD_INT 1
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 0
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: LD_INT 0
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 1
24510: NEG
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: LD_INT 1
24525: NEG
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 2
24533: PUSH
24534: LD_INT 0
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 2
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 2
24553: PUSH
24554: LD_INT 2
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24585: LD_ADDR_VAR 0 50
24589: PUSH
24590: LD_INT 0
24592: PUSH
24593: LD_INT 0
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 0
24602: PUSH
24603: LD_INT 1
24605: NEG
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 1
24613: PUSH
24614: LD_INT 0
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 1
24623: PUSH
24624: LD_INT 1
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 0
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 1
24643: NEG
24644: PUSH
24645: LD_INT 0
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 1
24654: NEG
24655: PUSH
24656: LD_INT 1
24658: NEG
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 2
24666: PUSH
24667: LD_INT 1
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 2
24676: PUSH
24677: LD_INT 2
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 1
24686: PUSH
24687: LD_INT 2
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 0
24696: PUSH
24697: LD_INT 2
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 1
24706: NEG
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24729: LD_ADDR_VAR 0 51
24733: PUSH
24734: LD_INT 0
24736: PUSH
24737: LD_INT 0
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 0
24746: PUSH
24747: LD_INT 1
24749: NEG
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: LD_INT 0
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 1
24767: PUSH
24768: LD_INT 1
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 0
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 1
24787: NEG
24788: PUSH
24789: LD_INT 0
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 1
24798: NEG
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: PUSH
24811: LD_INT 2
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: LD_INT 2
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 1
24830: NEG
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 2
24841: NEG
24842: PUSH
24843: LD_INT 0
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 2
24852: NEG
24853: PUSH
24854: LD_INT 1
24856: NEG
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24876: LD_ADDR_VAR 0 52
24880: PUSH
24881: LD_INT 0
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: LD_INT 1
24896: NEG
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 1
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 0
24924: PUSH
24925: LD_INT 1
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 1
24934: NEG
24935: PUSH
24936: LD_INT 0
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 1
24945: NEG
24946: PUSH
24947: LD_INT 1
24949: NEG
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 1
24957: NEG
24958: PUSH
24959: LD_INT 2
24961: NEG
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 1
24969: NEG
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 2
24980: NEG
24981: PUSH
24982: LD_INT 0
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 2
24991: NEG
24992: PUSH
24993: LD_INT 1
24995: NEG
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 2
25003: NEG
25004: PUSH
25005: LD_INT 2
25007: NEG
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25027: LD_ADDR_VAR 0 53
25031: PUSH
25032: LD_INT 0
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 0
25044: PUSH
25045: LD_INT 1
25047: NEG
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 1
25055: PUSH
25056: LD_INT 0
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 0
25075: PUSH
25076: LD_INT 1
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 1
25085: NEG
25086: PUSH
25087: LD_INT 0
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 1
25096: NEG
25097: PUSH
25098: LD_INT 1
25100: NEG
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 1
25108: NEG
25109: PUSH
25110: LD_INT 2
25112: NEG
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 0
25120: PUSH
25121: LD_INT 2
25123: NEG
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 1
25131: PUSH
25132: LD_INT 1
25134: NEG
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 2
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 2
25152: PUSH
25153: LD_INT 1
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 2
25162: PUSH
25163: LD_INT 2
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 1
25172: PUSH
25173: LD_INT 2
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 0
25182: PUSH
25183: LD_INT 2
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 1
25192: NEG
25193: PUSH
25194: LD_INT 1
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 2
25203: NEG
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 2
25214: NEG
25215: PUSH
25216: LD_INT 1
25218: NEG
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 2
25226: NEG
25227: PUSH
25228: LD_INT 2
25230: NEG
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25257: LD_ADDR_VAR 0 54
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 1
25285: PUSH
25286: LD_INT 0
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: LD_INT 1
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 0
25305: PUSH
25306: LD_INT 1
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 1
25315: NEG
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: LD_INT 1
25330: NEG
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 1
25338: NEG
25339: PUSH
25340: LD_INT 2
25342: NEG
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 0
25350: PUSH
25351: LD_INT 2
25353: NEG
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: PUSH
25362: LD_INT 1
25364: NEG
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 2
25372: PUSH
25373: LD_INT 0
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 2
25382: PUSH
25383: LD_INT 1
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 2
25392: PUSH
25393: LD_INT 2
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 1
25402: PUSH
25403: LD_INT 2
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 0
25412: PUSH
25413: LD_INT 2
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 1
25422: NEG
25423: PUSH
25424: LD_INT 1
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 2
25433: NEG
25434: PUSH
25435: LD_INT 0
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 2
25444: NEG
25445: PUSH
25446: LD_INT 1
25448: NEG
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 2
25456: NEG
25457: PUSH
25458: LD_INT 2
25460: NEG
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25487: LD_ADDR_VAR 0 55
25491: PUSH
25492: LD_INT 0
25494: PUSH
25495: LD_INT 0
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 0
25504: PUSH
25505: LD_INT 1
25507: NEG
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 1
25515: PUSH
25516: LD_INT 0
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 1
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 0
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 1
25545: NEG
25546: PUSH
25547: LD_INT 0
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 1
25556: NEG
25557: PUSH
25558: LD_INT 1
25560: NEG
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 1
25568: NEG
25569: PUSH
25570: LD_INT 2
25572: NEG
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 0
25580: PUSH
25581: LD_INT 2
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: LD_INT 1
25594: NEG
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 2
25602: PUSH
25603: LD_INT 0
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 2
25612: PUSH
25613: LD_INT 1
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 2
25622: PUSH
25623: LD_INT 2
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: LD_INT 2
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 0
25642: PUSH
25643: LD_INT 2
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: NEG
25653: PUSH
25654: LD_INT 1
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 2
25663: NEG
25664: PUSH
25665: LD_INT 0
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 2
25674: NEG
25675: PUSH
25676: LD_INT 1
25678: NEG
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 2
25686: NEG
25687: PUSH
25688: LD_INT 2
25690: NEG
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25717: LD_ADDR_VAR 0 56
25721: PUSH
25722: LD_INT 0
25724: PUSH
25725: LD_INT 0
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 0
25734: PUSH
25735: LD_INT 1
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: PUSH
25746: LD_INT 0
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 1
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 0
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: LD_INT 0
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: LD_INT 1
25790: NEG
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 1
25798: NEG
25799: PUSH
25800: LD_INT 2
25802: NEG
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: LD_INT 2
25813: NEG
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: LD_INT 1
25824: NEG
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 2
25832: PUSH
25833: LD_INT 0
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 2
25842: PUSH
25843: LD_INT 1
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 2
25852: PUSH
25853: LD_INT 2
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 1
25862: PUSH
25863: LD_INT 2
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 0
25872: PUSH
25873: LD_INT 2
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 2
25893: NEG
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 2
25904: NEG
25905: PUSH
25906: LD_INT 1
25908: NEG
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 2
25916: NEG
25917: PUSH
25918: LD_INT 2
25920: NEG
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25947: LD_ADDR_VAR 0 57
25951: PUSH
25952: LD_INT 0
25954: PUSH
25955: LD_INT 0
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 0
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: PUSH
25976: LD_INT 0
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 1
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 0
25995: PUSH
25996: LD_INT 1
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 1
26005: NEG
26006: PUSH
26007: LD_INT 0
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 1
26016: NEG
26017: PUSH
26018: LD_INT 1
26020: NEG
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 1
26028: NEG
26029: PUSH
26030: LD_INT 2
26032: NEG
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 0
26040: PUSH
26041: LD_INT 2
26043: NEG
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: LD_INT 1
26054: NEG
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 2
26062: PUSH
26063: LD_INT 0
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 2
26072: PUSH
26073: LD_INT 1
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 2
26082: PUSH
26083: LD_INT 2
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 1
26092: PUSH
26093: LD_INT 2
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 0
26102: PUSH
26103: LD_INT 2
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: NEG
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 2
26123: NEG
26124: PUSH
26125: LD_INT 0
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 2
26134: NEG
26135: PUSH
26136: LD_INT 1
26138: NEG
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 2
26146: NEG
26147: PUSH
26148: LD_INT 2
26150: NEG
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26177: LD_ADDR_VAR 0 58
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 0
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: LD_INT 0
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 1
26215: PUSH
26216: LD_INT 1
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 0
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 1
26235: NEG
26236: PUSH
26237: LD_INT 0
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 1
26246: NEG
26247: PUSH
26248: LD_INT 1
26250: NEG
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 1
26258: NEG
26259: PUSH
26260: LD_INT 2
26262: NEG
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: LD_INT 2
26273: NEG
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 1
26281: PUSH
26282: LD_INT 1
26284: NEG
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 2
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 2
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 2
26312: PUSH
26313: LD_INT 2
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: LD_INT 2
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: LD_INT 2
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: LD_INT 1
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 2
26353: NEG
26354: PUSH
26355: LD_INT 0
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 2
26364: NEG
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 2
26376: NEG
26377: PUSH
26378: LD_INT 2
26380: NEG
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26407: LD_ADDR_VAR 0 59
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: LD_INT 0
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 0
26424: PUSH
26425: LD_INT 1
26427: NEG
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 1
26435: PUSH
26436: LD_INT 0
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 1
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 0
26455: PUSH
26456: LD_INT 1
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 1
26465: NEG
26466: PUSH
26467: LD_INT 0
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 1
26476: NEG
26477: PUSH
26478: LD_INT 1
26480: NEG
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26495: LD_ADDR_VAR 0 60
26499: PUSH
26500: LD_INT 0
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: LD_INT 1
26515: NEG
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 1
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: LD_INT 1
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: LD_INT 1
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 1
26553: NEG
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 1
26564: NEG
26565: PUSH
26566: LD_INT 1
26568: NEG
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26583: LD_ADDR_VAR 0 61
26587: PUSH
26588: LD_INT 0
26590: PUSH
26591: LD_INT 0
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: LD_INT 1
26603: NEG
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 1
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: LD_INT 1
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: LD_INT 1
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 1
26652: NEG
26653: PUSH
26654: LD_INT 1
26656: NEG
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26671: LD_ADDR_VAR 0 62
26675: PUSH
26676: LD_INT 0
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: LD_INT 1
26691: NEG
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: LD_INT 1
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 0
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: LD_INT 0
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 1
26740: NEG
26741: PUSH
26742: LD_INT 1
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26759: LD_ADDR_VAR 0 63
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: NEG
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26847: LD_ADDR_VAR 0 64
26851: PUSH
26852: LD_INT 0
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 0
26864: PUSH
26865: LD_INT 1
26867: NEG
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 1
26875: PUSH
26876: LD_INT 0
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 1
26885: PUSH
26886: LD_INT 1
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 0
26895: PUSH
26896: LD_INT 1
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 1
26905: NEG
26906: PUSH
26907: LD_INT 0
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 1
26916: NEG
26917: PUSH
26918: LD_INT 1
26920: NEG
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: ST_TO_ADDR
// end ; 1 :
26935: GO 32832
26937: LD_INT 1
26939: DOUBLE
26940: EQUAL
26941: IFTRUE 26945
26943: GO 29568
26945: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26946: LD_ADDR_VAR 0 11
26950: PUSH
26951: LD_INT 1
26953: NEG
26954: PUSH
26955: LD_INT 3
26957: NEG
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 0
26965: PUSH
26966: LD_INT 3
26968: NEG
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: LD_INT 2
26979: NEG
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: LIST
26989: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26990: LD_ADDR_VAR 0 12
26994: PUSH
26995: LD_INT 2
26997: PUSH
26998: LD_INT 1
27000: NEG
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 3
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 3
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: LIST
27030: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27031: LD_ADDR_VAR 0 13
27035: PUSH
27036: LD_INT 3
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 3
27048: PUSH
27049: LD_INT 3
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 2
27058: PUSH
27059: LD_INT 3
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: LIST
27070: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27071: LD_ADDR_VAR 0 14
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: LD_INT 3
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: LD_INT 3
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: NEG
27099: PUSH
27100: LD_INT 2
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: LIST
27111: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27112: LD_ADDR_VAR 0 15
27116: PUSH
27117: LD_INT 2
27119: NEG
27120: PUSH
27121: LD_INT 1
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 3
27130: NEG
27131: PUSH
27132: LD_INT 0
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 3
27141: NEG
27142: PUSH
27143: LD_INT 1
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: LIST
27155: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27156: LD_ADDR_VAR 0 16
27160: PUSH
27161: LD_INT 2
27163: NEG
27164: PUSH
27165: LD_INT 3
27167: NEG
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 3
27175: NEG
27176: PUSH
27177: LD_INT 2
27179: NEG
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 3
27187: NEG
27188: PUSH
27189: LD_INT 3
27191: NEG
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: LIST
27201: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27202: LD_ADDR_VAR 0 17
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: LD_INT 3
27213: NEG
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 0
27221: PUSH
27222: LD_INT 3
27224: NEG
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 1
27232: PUSH
27233: LD_INT 2
27235: NEG
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: LIST
27245: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27246: LD_ADDR_VAR 0 18
27250: PUSH
27251: LD_INT 2
27253: PUSH
27254: LD_INT 1
27256: NEG
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 3
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 3
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: LIST
27286: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27287: LD_ADDR_VAR 0 19
27291: PUSH
27292: LD_INT 3
27294: PUSH
27295: LD_INT 2
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 3
27304: PUSH
27305: LD_INT 3
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 2
27314: PUSH
27315: LD_INT 3
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: LIST
27326: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27327: LD_ADDR_VAR 0 20
27331: PUSH
27332: LD_INT 1
27334: PUSH
27335: LD_INT 3
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 0
27344: PUSH
27345: LD_INT 3
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: NEG
27355: PUSH
27356: LD_INT 2
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: LIST
27367: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27368: LD_ADDR_VAR 0 21
27372: PUSH
27373: LD_INT 2
27375: NEG
27376: PUSH
27377: LD_INT 1
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 3
27386: NEG
27387: PUSH
27388: LD_INT 0
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 3
27397: NEG
27398: PUSH
27399: LD_INT 1
27401: NEG
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27412: LD_ADDR_VAR 0 22
27416: PUSH
27417: LD_INT 2
27419: NEG
27420: PUSH
27421: LD_INT 3
27423: NEG
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 3
27431: NEG
27432: PUSH
27433: LD_INT 2
27435: NEG
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 3
27443: NEG
27444: PUSH
27445: LD_INT 3
27447: NEG
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: LIST
27457: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27458: LD_ADDR_VAR 0 23
27462: PUSH
27463: LD_INT 0
27465: PUSH
27466: LD_INT 3
27468: NEG
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 1
27476: NEG
27477: PUSH
27478: LD_INT 4
27480: NEG
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: LD_INT 3
27491: NEG
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: LIST
27501: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27502: LD_ADDR_VAR 0 24
27506: PUSH
27507: LD_INT 3
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 3
27519: PUSH
27520: LD_INT 1
27522: NEG
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 4
27530: PUSH
27531: LD_INT 1
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: LIST
27542: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27543: LD_ADDR_VAR 0 25
27547: PUSH
27548: LD_INT 3
27550: PUSH
27551: LD_INT 3
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 4
27560: PUSH
27561: LD_INT 3
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 3
27570: PUSH
27571: LD_INT 4
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: LIST
27582: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27583: LD_ADDR_VAR 0 26
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: LD_INT 3
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: LD_INT 4
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 1
27610: NEG
27611: PUSH
27612: LD_INT 3
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: LIST
27623: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27624: LD_ADDR_VAR 0 27
27628: PUSH
27629: LD_INT 3
27631: NEG
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 3
27642: NEG
27643: PUSH
27644: LD_INT 1
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 4
27653: NEG
27654: PUSH
27655: LD_INT 1
27657: NEG
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: LIST
27667: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27668: LD_ADDR_VAR 0 28
27672: PUSH
27673: LD_INT 3
27675: NEG
27676: PUSH
27677: LD_INT 3
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 3
27687: NEG
27688: PUSH
27689: LD_INT 4
27691: NEG
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 4
27699: NEG
27700: PUSH
27701: LD_INT 3
27703: NEG
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: LIST
27713: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27714: LD_ADDR_VAR 0 29
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: LD_INT 3
27725: NEG
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 0
27733: PUSH
27734: LD_INT 3
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: LD_INT 2
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: LD_INT 4
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: LD_INT 4
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: LD_INT 3
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: LD_INT 5
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 0
27801: PUSH
27802: LD_INT 5
27804: NEG
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: LD_INT 4
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 1
27823: NEG
27824: PUSH
27825: LD_INT 6
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: LD_INT 6
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: LD_INT 5
27849: NEG
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27869: LD_ADDR_VAR 0 30
27873: PUSH
27874: LD_INT 2
27876: PUSH
27877: LD_INT 1
27879: NEG
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 3
27887: PUSH
27888: LD_INT 0
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 3
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 3
27907: PUSH
27908: LD_INT 1
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 4
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 4
27928: PUSH
27929: LD_INT 1
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 4
27938: PUSH
27939: LD_INT 1
27941: NEG
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 5
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 5
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 5
27969: PUSH
27970: LD_INT 1
27972: NEG
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 6
27980: PUSH
27981: LD_INT 0
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 6
27990: PUSH
27991: LD_INT 1
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28012: LD_ADDR_VAR 0 31
28016: PUSH
28017: LD_INT 3
28019: PUSH
28020: LD_INT 2
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 3
28029: PUSH
28030: LD_INT 3
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 2
28039: PUSH
28040: LD_INT 3
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 4
28049: PUSH
28050: LD_INT 3
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 4
28059: PUSH
28060: LD_INT 4
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 3
28069: PUSH
28070: LD_INT 4
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 5
28079: PUSH
28080: LD_INT 4
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 5
28089: PUSH
28090: LD_INT 5
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 4
28099: PUSH
28100: LD_INT 5
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 6
28109: PUSH
28110: LD_INT 5
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 6
28119: PUSH
28120: LD_INT 6
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 5
28129: PUSH
28130: LD_INT 6
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28151: LD_ADDR_VAR 0 32
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: LD_INT 3
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: LD_INT 3
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: LD_INT 4
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: LD_INT 4
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: NEG
28210: PUSH
28211: LD_INT 3
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 1
28220: PUSH
28221: LD_INT 5
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: LD_INT 5
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 1
28240: NEG
28241: PUSH
28242: LD_INT 4
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: LD_INT 6
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 0
28261: PUSH
28262: LD_INT 6
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 1
28271: NEG
28272: PUSH
28273: LD_INT 5
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28294: LD_ADDR_VAR 0 33
28298: PUSH
28299: LD_INT 2
28301: NEG
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 3
28312: NEG
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 3
28323: NEG
28324: PUSH
28325: LD_INT 1
28327: NEG
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 3
28335: NEG
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 4
28346: NEG
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 4
28357: NEG
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 4
28369: NEG
28370: PUSH
28371: LD_INT 1
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 5
28380: NEG
28381: PUSH
28382: LD_INT 0
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 5
28391: NEG
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 5
28403: NEG
28404: PUSH
28405: LD_INT 1
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 6
28414: NEG
28415: PUSH
28416: LD_INT 0
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 6
28425: NEG
28426: PUSH
28427: LD_INT 1
28429: NEG
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28449: LD_ADDR_VAR 0 34
28453: PUSH
28454: LD_INT 2
28456: NEG
28457: PUSH
28458: LD_INT 3
28460: NEG
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 3
28468: NEG
28469: PUSH
28470: LD_INT 2
28472: NEG
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 3
28480: NEG
28481: PUSH
28482: LD_INT 3
28484: NEG
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 3
28492: NEG
28493: PUSH
28494: LD_INT 4
28496: NEG
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 4
28504: NEG
28505: PUSH
28506: LD_INT 3
28508: NEG
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 4
28516: NEG
28517: PUSH
28518: LD_INT 4
28520: NEG
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 4
28528: NEG
28529: PUSH
28530: LD_INT 5
28532: NEG
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 5
28540: NEG
28541: PUSH
28542: LD_INT 4
28544: NEG
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 5
28552: NEG
28553: PUSH
28554: LD_INT 5
28556: NEG
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 5
28564: NEG
28565: PUSH
28566: LD_INT 6
28568: NEG
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 6
28576: NEG
28577: PUSH
28578: LD_INT 5
28580: NEG
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 6
28588: NEG
28589: PUSH
28590: LD_INT 6
28592: NEG
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28612: LD_ADDR_VAR 0 41
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: LD_INT 2
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: NEG
28631: PUSH
28632: LD_INT 3
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: LD_INT 2
28645: NEG
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: LIST
28655: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28656: LD_ADDR_VAR 0 42
28660: PUSH
28661: LD_INT 2
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 2
28673: PUSH
28674: LD_INT 1
28676: NEG
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 3
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: LIST
28696: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28697: LD_ADDR_VAR 0 43
28701: PUSH
28702: LD_INT 2
28704: PUSH
28705: LD_INT 2
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 3
28714: PUSH
28715: LD_INT 2
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 2
28724: PUSH
28725: LD_INT 3
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: LIST
28736: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28737: LD_ADDR_VAR 0 44
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: LD_INT 2
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 1
28754: PUSH
28755: LD_INT 3
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 1
28764: NEG
28765: PUSH
28766: LD_INT 2
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: LIST
28777: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28778: LD_ADDR_VAR 0 45
28782: PUSH
28783: LD_INT 2
28785: NEG
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 2
28796: NEG
28797: PUSH
28798: LD_INT 1
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 3
28807: NEG
28808: PUSH
28809: LD_INT 1
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: LIST
28821: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28822: LD_ADDR_VAR 0 46
28826: PUSH
28827: LD_INT 2
28829: NEG
28830: PUSH
28831: LD_INT 2
28833: NEG
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 2
28841: NEG
28842: PUSH
28843: LD_INT 3
28845: NEG
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 3
28853: NEG
28854: PUSH
28855: LD_INT 2
28857: NEG
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: LIST
28867: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28868: LD_ADDR_VAR 0 47
28872: PUSH
28873: LD_INT 2
28875: NEG
28876: PUSH
28877: LD_INT 3
28879: NEG
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 1
28887: NEG
28888: PUSH
28889: LD_INT 3
28891: NEG
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28901: LD_ADDR_VAR 0 48
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: LD_INT 2
28911: NEG
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 2
28919: PUSH
28920: LD_INT 1
28922: NEG
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28932: LD_ADDR_VAR 0 49
28936: PUSH
28937: LD_INT 3
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 3
28949: PUSH
28950: LD_INT 2
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28961: LD_ADDR_VAR 0 50
28965: PUSH
28966: LD_INT 2
28968: PUSH
28969: LD_INT 3
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: LD_INT 3
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28990: LD_ADDR_VAR 0 51
28994: PUSH
28995: LD_INT 1
28997: NEG
28998: PUSH
28999: LD_INT 2
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 2
29008: NEG
29009: PUSH
29010: LD_INT 1
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29021: LD_ADDR_VAR 0 52
29025: PUSH
29026: LD_INT 3
29028: NEG
29029: PUSH
29030: LD_INT 1
29032: NEG
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 3
29040: NEG
29041: PUSH
29042: LD_INT 2
29044: NEG
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29054: LD_ADDR_VAR 0 53
29058: PUSH
29059: LD_INT 1
29061: NEG
29062: PUSH
29063: LD_INT 3
29065: NEG
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 0
29073: PUSH
29074: LD_INT 3
29076: NEG
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 1
29084: PUSH
29085: LD_INT 2
29087: NEG
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: LIST
29097: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29098: LD_ADDR_VAR 0 54
29102: PUSH
29103: LD_INT 2
29105: PUSH
29106: LD_INT 1
29108: NEG
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 3
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 3
29126: PUSH
29127: LD_INT 1
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: LIST
29138: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29139: LD_ADDR_VAR 0 55
29143: PUSH
29144: LD_INT 3
29146: PUSH
29147: LD_INT 2
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 3
29156: PUSH
29157: LD_INT 3
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 2
29166: PUSH
29167: LD_INT 3
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: LIST
29178: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29179: LD_ADDR_VAR 0 56
29183: PUSH
29184: LD_INT 1
29186: PUSH
29187: LD_INT 3
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: LD_INT 3
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 1
29206: NEG
29207: PUSH
29208: LD_INT 2
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29220: LD_ADDR_VAR 0 57
29224: PUSH
29225: LD_INT 2
29227: NEG
29228: PUSH
29229: LD_INT 1
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 3
29238: NEG
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 3
29249: NEG
29250: PUSH
29251: LD_INT 1
29253: NEG
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: LIST
29263: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29264: LD_ADDR_VAR 0 58
29268: PUSH
29269: LD_INT 2
29271: NEG
29272: PUSH
29273: LD_INT 3
29275: NEG
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 3
29283: NEG
29284: PUSH
29285: LD_INT 2
29287: NEG
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 3
29295: NEG
29296: PUSH
29297: LD_INT 3
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: LIST
29309: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29310: LD_ADDR_VAR 0 59
29314: PUSH
29315: LD_INT 1
29317: NEG
29318: PUSH
29319: LD_INT 2
29321: NEG
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 0
29329: PUSH
29330: LD_INT 2
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 1
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: LIST
29353: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29354: LD_ADDR_VAR 0 60
29358: PUSH
29359: LD_INT 1
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 2
29372: PUSH
29373: LD_INT 0
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 2
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: LIST
29394: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29395: LD_ADDR_VAR 0 61
29399: PUSH
29400: LD_INT 2
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 2
29412: PUSH
29413: LD_INT 2
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: LD_INT 2
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29435: LD_ADDR_VAR 0 62
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: LD_INT 2
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 0
29452: PUSH
29453: LD_INT 2
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 1
29462: NEG
29463: PUSH
29464: LD_INT 1
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: LIST
29475: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29476: LD_ADDR_VAR 0 63
29480: PUSH
29481: LD_INT 1
29483: NEG
29484: PUSH
29485: LD_INT 1
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 2
29494: NEG
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 2
29505: NEG
29506: PUSH
29507: LD_INT 1
29509: NEG
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: LIST
29519: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29520: LD_ADDR_VAR 0 64
29524: PUSH
29525: LD_INT 1
29527: NEG
29528: PUSH
29529: LD_INT 2
29531: NEG
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 2
29539: NEG
29540: PUSH
29541: LD_INT 1
29543: NEG
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 2
29551: NEG
29552: PUSH
29553: LD_INT 2
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: LIST
29565: ST_TO_ADDR
// end ; 2 :
29566: GO 32832
29568: LD_INT 2
29570: DOUBLE
29571: EQUAL
29572: IFTRUE 29576
29574: GO 32831
29576: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29577: LD_ADDR_VAR 0 29
29581: PUSH
29582: LD_INT 4
29584: PUSH
29585: LD_INT 0
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 4
29594: PUSH
29595: LD_INT 1
29597: NEG
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 5
29605: PUSH
29606: LD_INT 0
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 5
29615: PUSH
29616: LD_INT 1
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 4
29625: PUSH
29626: LD_INT 1
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 3
29635: PUSH
29636: LD_INT 0
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 3
29645: PUSH
29646: LD_INT 1
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 3
29656: PUSH
29657: LD_INT 2
29659: NEG
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 5
29667: PUSH
29668: LD_INT 2
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 3
29677: PUSH
29678: LD_INT 3
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 3
29687: PUSH
29688: LD_INT 2
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 4
29697: PUSH
29698: LD_INT 3
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 4
29707: PUSH
29708: LD_INT 4
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 3
29717: PUSH
29718: LD_INT 4
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 2
29727: PUSH
29728: LD_INT 3
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 2
29737: PUSH
29738: LD_INT 2
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 4
29747: PUSH
29748: LD_INT 2
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 2
29757: PUSH
29758: LD_INT 4
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 0
29767: PUSH
29768: LD_INT 4
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: LD_INT 3
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: PUSH
29788: LD_INT 4
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 1
29797: PUSH
29798: LD_INT 5
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 0
29807: PUSH
29808: LD_INT 5
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 1
29817: NEG
29818: PUSH
29819: LD_INT 4
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 1
29828: NEG
29829: PUSH
29830: LD_INT 3
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 2
29839: PUSH
29840: LD_INT 5
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 2
29849: NEG
29850: PUSH
29851: LD_INT 3
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 3
29860: NEG
29861: PUSH
29862: LD_INT 0
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 3
29871: NEG
29872: PUSH
29873: LD_INT 1
29875: NEG
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 2
29883: NEG
29884: PUSH
29885: LD_INT 0
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 2
29894: NEG
29895: PUSH
29896: LD_INT 1
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 3
29905: NEG
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 4
29916: NEG
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 4
29927: NEG
29928: PUSH
29929: LD_INT 1
29931: NEG
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 4
29939: NEG
29940: PUSH
29941: LD_INT 2
29943: NEG
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 2
29951: NEG
29952: PUSH
29953: LD_INT 2
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 4
29962: NEG
29963: PUSH
29964: LD_INT 4
29966: NEG
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 4
29974: NEG
29975: PUSH
29976: LD_INT 5
29978: NEG
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 3
29986: NEG
29987: PUSH
29988: LD_INT 4
29990: NEG
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 3
29998: NEG
29999: PUSH
30000: LD_INT 3
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 4
30010: NEG
30011: PUSH
30012: LD_INT 3
30014: NEG
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 5
30022: NEG
30023: PUSH
30024: LD_INT 4
30026: NEG
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 5
30034: NEG
30035: PUSH
30036: LD_INT 5
30038: NEG
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 3
30046: NEG
30047: PUSH
30048: LD_INT 5
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 5
30058: NEG
30059: PUSH
30060: LD_INT 3
30062: NEG
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30115: LD_ADDR_VAR 0 30
30119: PUSH
30120: LD_INT 4
30122: PUSH
30123: LD_INT 4
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 4
30132: PUSH
30133: LD_INT 3
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 5
30142: PUSH
30143: LD_INT 4
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 5
30152: PUSH
30153: LD_INT 5
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 4
30162: PUSH
30163: LD_INT 5
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 3
30172: PUSH
30173: LD_INT 4
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 3
30182: PUSH
30183: LD_INT 3
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 5
30192: PUSH
30193: LD_INT 3
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 3
30202: PUSH
30203: LD_INT 5
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 0
30212: PUSH
30213: LD_INT 3
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 2
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 1
30232: PUSH
30233: LD_INT 3
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 1
30242: PUSH
30243: LD_INT 4
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 0
30252: PUSH
30253: LD_INT 4
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 1
30262: NEG
30263: PUSH
30264: LD_INT 3
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 1
30273: NEG
30274: PUSH
30275: LD_INT 2
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 2
30284: PUSH
30285: LD_INT 4
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 2
30294: NEG
30295: PUSH
30296: LD_INT 2
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 4
30305: NEG
30306: PUSH
30307: LD_INT 0
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 4
30316: NEG
30317: PUSH
30318: LD_INT 1
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 3
30328: NEG
30329: PUSH
30330: LD_INT 0
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 3
30339: NEG
30340: PUSH
30341: LD_INT 1
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 4
30350: NEG
30351: PUSH
30352: LD_INT 1
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 5
30361: NEG
30362: PUSH
30363: LD_INT 0
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 5
30372: NEG
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 5
30384: NEG
30385: PUSH
30386: LD_INT 2
30388: NEG
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 3
30396: NEG
30397: PUSH
30398: LD_INT 2
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 3
30407: NEG
30408: PUSH
30409: LD_INT 3
30411: NEG
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 3
30419: NEG
30420: PUSH
30421: LD_INT 4
30423: NEG
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 2
30431: NEG
30432: PUSH
30433: LD_INT 3
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 2
30443: NEG
30444: PUSH
30445: LD_INT 2
30447: NEG
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 3
30455: NEG
30456: PUSH
30457: LD_INT 2
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 4
30467: NEG
30468: PUSH
30469: LD_INT 3
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 4
30479: NEG
30480: PUSH
30481: LD_INT 4
30483: NEG
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 2
30491: NEG
30492: PUSH
30493: LD_INT 4
30495: NEG
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 4
30503: NEG
30504: PUSH
30505: LD_INT 2
30507: NEG
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 0
30515: PUSH
30516: LD_INT 4
30518: NEG
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 0
30526: PUSH
30527: LD_INT 5
30529: NEG
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 1
30537: PUSH
30538: LD_INT 4
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 1
30548: PUSH
30549: LD_INT 3
30551: NEG
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 0
30559: PUSH
30560: LD_INT 3
30562: NEG
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 1
30570: NEG
30571: PUSH
30572: LD_INT 4
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 1
30582: NEG
30583: PUSH
30584: LD_INT 5
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 2
30594: PUSH
30595: LD_INT 3
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 2
30605: NEG
30606: PUSH
30607: LD_INT 5
30609: NEG
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30662: LD_ADDR_VAR 0 31
30666: PUSH
30667: LD_INT 0
30669: PUSH
30670: LD_INT 4
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 0
30679: PUSH
30680: LD_INT 3
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 1
30689: PUSH
30690: LD_INT 4
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 1
30699: PUSH
30700: LD_INT 5
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: LD_INT 5
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: LD_INT 4
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 1
30730: NEG
30731: PUSH
30732: LD_INT 3
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 2
30741: PUSH
30742: LD_INT 5
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 2
30751: NEG
30752: PUSH
30753: LD_INT 3
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 3
30762: NEG
30763: PUSH
30764: LD_INT 0
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 3
30773: NEG
30774: PUSH
30775: LD_INT 1
30777: NEG
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 2
30785: NEG
30786: PUSH
30787: LD_INT 0
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 2
30796: NEG
30797: PUSH
30798: LD_INT 1
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 3
30807: NEG
30808: PUSH
30809: LD_INT 1
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 4
30818: NEG
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 4
30829: NEG
30830: PUSH
30831: LD_INT 1
30833: NEG
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 4
30841: NEG
30842: PUSH
30843: LD_INT 2
30845: NEG
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 2
30853: NEG
30854: PUSH
30855: LD_INT 2
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 4
30864: NEG
30865: PUSH
30866: LD_INT 4
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 4
30876: NEG
30877: PUSH
30878: LD_INT 5
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 3
30888: NEG
30889: PUSH
30890: LD_INT 4
30892: NEG
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 3
30900: NEG
30901: PUSH
30902: LD_INT 3
30904: NEG
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 4
30912: NEG
30913: PUSH
30914: LD_INT 3
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 5
30924: NEG
30925: PUSH
30926: LD_INT 4
30928: NEG
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 5
30936: NEG
30937: PUSH
30938: LD_INT 5
30940: NEG
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 3
30948: NEG
30949: PUSH
30950: LD_INT 5
30952: NEG
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 5
30960: NEG
30961: PUSH
30962: LD_INT 3
30964: NEG
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 0
30972: PUSH
30973: LD_INT 3
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: LD_INT 4
30986: NEG
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 1
30994: PUSH
30995: LD_INT 3
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 1
31005: PUSH
31006: LD_INT 2
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 0
31016: PUSH
31017: LD_INT 2
31019: NEG
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 1
31027: NEG
31028: PUSH
31029: LD_INT 3
31031: NEG
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 1
31039: NEG
31040: PUSH
31041: LD_INT 4
31043: NEG
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 2
31051: PUSH
31052: LD_INT 2
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 2
31062: NEG
31063: PUSH
31064: LD_INT 4
31066: NEG
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 4
31074: PUSH
31075: LD_INT 0
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 4
31084: PUSH
31085: LD_INT 1
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 5
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 5
31105: PUSH
31106: LD_INT 1
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 4
31115: PUSH
31116: LD_INT 1
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 3
31125: PUSH
31126: LD_INT 0
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 3
31135: PUSH
31136: LD_INT 1
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 3
31146: PUSH
31147: LD_INT 2
31149: NEG
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 5
31157: PUSH
31158: LD_INT 2
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31212: LD_ADDR_VAR 0 32
31216: PUSH
31217: LD_INT 4
31219: NEG
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 4
31230: NEG
31231: PUSH
31232: LD_INT 1
31234: NEG
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 3
31242: NEG
31243: PUSH
31244: LD_INT 0
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 3
31253: NEG
31254: PUSH
31255: LD_INT 1
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 4
31264: NEG
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 5
31275: NEG
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 5
31286: NEG
31287: PUSH
31288: LD_INT 1
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 5
31298: NEG
31299: PUSH
31300: LD_INT 2
31302: NEG
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 3
31310: NEG
31311: PUSH
31312: LD_INT 2
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 3
31321: NEG
31322: PUSH
31323: LD_INT 3
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 3
31333: NEG
31334: PUSH
31335: LD_INT 4
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 2
31345: NEG
31346: PUSH
31347: LD_INT 3
31349: NEG
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 2
31357: NEG
31358: PUSH
31359: LD_INT 2
31361: NEG
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 3
31369: NEG
31370: PUSH
31371: LD_INT 2
31373: NEG
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 4
31381: NEG
31382: PUSH
31383: LD_INT 3
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 4
31393: NEG
31394: PUSH
31395: LD_INT 4
31397: NEG
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 2
31405: NEG
31406: PUSH
31407: LD_INT 4
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 4
31417: NEG
31418: PUSH
31419: LD_INT 2
31421: NEG
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: LD_INT 4
31432: NEG
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 0
31440: PUSH
31441: LD_INT 5
31443: NEG
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 1
31451: PUSH
31452: LD_INT 4
31454: NEG
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: PUSH
31463: LD_INT 3
31465: NEG
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 0
31473: PUSH
31474: LD_INT 3
31476: NEG
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 1
31484: NEG
31485: PUSH
31486: LD_INT 4
31488: NEG
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 1
31496: NEG
31497: PUSH
31498: LD_INT 5
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 2
31508: PUSH
31509: LD_INT 3
31511: NEG
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 2
31519: NEG
31520: PUSH
31521: LD_INT 5
31523: NEG
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 3
31531: PUSH
31532: LD_INT 0
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 3
31541: PUSH
31542: LD_INT 1
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 4
31552: PUSH
31553: LD_INT 0
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 4
31562: PUSH
31563: LD_INT 1
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 3
31572: PUSH
31573: LD_INT 1
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 2
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: PUSH
31593: LD_INT 1
31595: NEG
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 2
31603: PUSH
31604: LD_INT 2
31606: NEG
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 4
31614: PUSH
31615: LD_INT 2
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 4
31624: PUSH
31625: LD_INT 4
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 4
31634: PUSH
31635: LD_INT 3
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 5
31644: PUSH
31645: LD_INT 4
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 5
31654: PUSH
31655: LD_INT 5
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 4
31664: PUSH
31665: LD_INT 5
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 3
31674: PUSH
31675: LD_INT 4
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 3
31684: PUSH
31685: LD_INT 3
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 5
31694: PUSH
31695: LD_INT 3
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 3
31704: PUSH
31705: LD_INT 5
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31759: LD_ADDR_VAR 0 33
31763: PUSH
31764: LD_INT 4
31766: NEG
31767: PUSH
31768: LD_INT 4
31770: NEG
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 4
31778: NEG
31779: PUSH
31780: LD_INT 5
31782: NEG
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 3
31790: NEG
31791: PUSH
31792: LD_INT 4
31794: NEG
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 3
31802: NEG
31803: PUSH
31804: LD_INT 3
31806: NEG
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 4
31814: NEG
31815: PUSH
31816: LD_INT 3
31818: NEG
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 5
31826: NEG
31827: PUSH
31828: LD_INT 4
31830: NEG
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 5
31838: NEG
31839: PUSH
31840: LD_INT 5
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 3
31850: NEG
31851: PUSH
31852: LD_INT 5
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 5
31862: NEG
31863: PUSH
31864: LD_INT 3
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 0
31874: PUSH
31875: LD_INT 3
31877: NEG
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: LD_INT 4
31888: NEG
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 1
31896: PUSH
31897: LD_INT 3
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: LD_INT 2
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: LD_INT 2
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: LD_INT 3
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: LD_INT 4
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 2
31953: PUSH
31954: LD_INT 2
31956: NEG
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 2
31964: NEG
31965: PUSH
31966: LD_INT 4
31968: NEG
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 4
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 4
31986: PUSH
31987: LD_INT 1
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 5
31997: PUSH
31998: LD_INT 0
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 5
32007: PUSH
32008: LD_INT 1
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 4
32017: PUSH
32018: LD_INT 1
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 3
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 3
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 3
32048: PUSH
32049: LD_INT 2
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 5
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 3
32069: PUSH
32070: LD_INT 3
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 3
32079: PUSH
32080: LD_INT 2
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 4
32089: PUSH
32090: LD_INT 3
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 4
32099: PUSH
32100: LD_INT 4
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 3
32109: PUSH
32110: LD_INT 4
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 2
32119: PUSH
32120: LD_INT 3
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 2
32129: PUSH
32130: LD_INT 2
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 4
32139: PUSH
32140: LD_INT 2
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 2
32149: PUSH
32150: LD_INT 4
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 0
32159: PUSH
32160: LD_INT 4
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 0
32169: PUSH
32170: LD_INT 3
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 1
32179: PUSH
32180: LD_INT 4
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 1
32189: PUSH
32190: LD_INT 5
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: LD_INT 5
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 1
32209: NEG
32210: PUSH
32211: LD_INT 4
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: LD_INT 3
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 2
32231: PUSH
32232: LD_INT 5
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 2
32241: NEG
32242: PUSH
32243: LD_INT 3
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32297: LD_ADDR_VAR 0 34
32301: PUSH
32302: LD_INT 0
32304: PUSH
32305: LD_INT 4
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 0
32315: PUSH
32316: LD_INT 5
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: LD_INT 4
32329: NEG
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: LD_INT 3
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: LD_INT 3
32351: NEG
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 1
32359: NEG
32360: PUSH
32361: LD_INT 4
32363: NEG
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 1
32371: NEG
32372: PUSH
32373: LD_INT 5
32375: NEG
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 2
32383: PUSH
32384: LD_INT 3
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 2
32394: NEG
32395: PUSH
32396: LD_INT 5
32398: NEG
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 3
32406: PUSH
32407: LD_INT 0
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 3
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 4
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 4
32437: PUSH
32438: LD_INT 1
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 3
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 2
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 2
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 2
32478: PUSH
32479: LD_INT 2
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 4
32489: PUSH
32490: LD_INT 2
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 4
32499: PUSH
32500: LD_INT 4
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 4
32509: PUSH
32510: LD_INT 3
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 5
32519: PUSH
32520: LD_INT 4
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 5
32529: PUSH
32530: LD_INT 5
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 4
32539: PUSH
32540: LD_INT 5
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 3
32549: PUSH
32550: LD_INT 4
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 3
32559: PUSH
32560: LD_INT 3
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 5
32569: PUSH
32570: LD_INT 3
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 3
32579: PUSH
32580: LD_INT 5
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 0
32589: PUSH
32590: LD_INT 3
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: LD_INT 2
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: LD_INT 3
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 1
32619: PUSH
32620: LD_INT 4
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: LD_INT 4
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: NEG
32640: PUSH
32641: LD_INT 3
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: LD_INT 2
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 2
32661: PUSH
32662: LD_INT 4
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 2
32671: NEG
32672: PUSH
32673: LD_INT 2
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 4
32682: NEG
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 4
32693: NEG
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 3
32705: NEG
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 3
32716: NEG
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 4
32727: NEG
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 5
32738: NEG
32739: PUSH
32740: LD_INT 0
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 5
32749: NEG
32750: PUSH
32751: LD_INT 1
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 5
32761: NEG
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 3
32773: NEG
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: ST_TO_ADDR
// end ; end ;
32829: GO 32832
32831: POP
// case btype of b_depot , b_warehouse :
32832: LD_VAR 0 1
32836: PUSH
32837: LD_INT 0
32839: DOUBLE
32840: EQUAL
32841: IFTRUE 32851
32843: LD_INT 1
32845: DOUBLE
32846: EQUAL
32847: IFTRUE 32851
32849: GO 33052
32851: POP
// case nation of nation_american :
32852: LD_VAR 0 5
32856: PUSH
32857: LD_INT 1
32859: DOUBLE
32860: EQUAL
32861: IFTRUE 32865
32863: GO 32921
32865: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32866: LD_ADDR_VAR 0 9
32870: PUSH
32871: LD_VAR 0 11
32875: PUSH
32876: LD_VAR 0 12
32880: PUSH
32881: LD_VAR 0 13
32885: PUSH
32886: LD_VAR 0 14
32890: PUSH
32891: LD_VAR 0 15
32895: PUSH
32896: LD_VAR 0 16
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: PUSH
32909: LD_VAR 0 4
32913: PUSH
32914: LD_INT 1
32916: PLUS
32917: ARRAY
32918: ST_TO_ADDR
32919: GO 33050
32921: LD_INT 2
32923: DOUBLE
32924: EQUAL
32925: IFTRUE 32929
32927: GO 32985
32929: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32930: LD_ADDR_VAR 0 9
32934: PUSH
32935: LD_VAR 0 17
32939: PUSH
32940: LD_VAR 0 18
32944: PUSH
32945: LD_VAR 0 19
32949: PUSH
32950: LD_VAR 0 20
32954: PUSH
32955: LD_VAR 0 21
32959: PUSH
32960: LD_VAR 0 22
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: PUSH
32973: LD_VAR 0 4
32977: PUSH
32978: LD_INT 1
32980: PLUS
32981: ARRAY
32982: ST_TO_ADDR
32983: GO 33050
32985: LD_INT 3
32987: DOUBLE
32988: EQUAL
32989: IFTRUE 32993
32991: GO 33049
32993: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32994: LD_ADDR_VAR 0 9
32998: PUSH
32999: LD_VAR 0 23
33003: PUSH
33004: LD_VAR 0 24
33008: PUSH
33009: LD_VAR 0 25
33013: PUSH
33014: LD_VAR 0 26
33018: PUSH
33019: LD_VAR 0 27
33023: PUSH
33024: LD_VAR 0 28
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: PUSH
33037: LD_VAR 0 4
33041: PUSH
33042: LD_INT 1
33044: PLUS
33045: ARRAY
33046: ST_TO_ADDR
33047: GO 33050
33049: POP
33050: GO 33605
33052: LD_INT 2
33054: DOUBLE
33055: EQUAL
33056: IFTRUE 33066
33058: LD_INT 3
33060: DOUBLE
33061: EQUAL
33062: IFTRUE 33066
33064: GO 33122
33066: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33067: LD_ADDR_VAR 0 9
33071: PUSH
33072: LD_VAR 0 29
33076: PUSH
33077: LD_VAR 0 30
33081: PUSH
33082: LD_VAR 0 31
33086: PUSH
33087: LD_VAR 0 32
33091: PUSH
33092: LD_VAR 0 33
33096: PUSH
33097: LD_VAR 0 34
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: PUSH
33110: LD_VAR 0 4
33114: PUSH
33115: LD_INT 1
33117: PLUS
33118: ARRAY
33119: ST_TO_ADDR
33120: GO 33605
33122: LD_INT 16
33124: DOUBLE
33125: EQUAL
33126: IFTRUE 33184
33128: LD_INT 17
33130: DOUBLE
33131: EQUAL
33132: IFTRUE 33184
33134: LD_INT 18
33136: DOUBLE
33137: EQUAL
33138: IFTRUE 33184
33140: LD_INT 19
33142: DOUBLE
33143: EQUAL
33144: IFTRUE 33184
33146: LD_INT 22
33148: DOUBLE
33149: EQUAL
33150: IFTRUE 33184
33152: LD_INT 20
33154: DOUBLE
33155: EQUAL
33156: IFTRUE 33184
33158: LD_INT 21
33160: DOUBLE
33161: EQUAL
33162: IFTRUE 33184
33164: LD_INT 23
33166: DOUBLE
33167: EQUAL
33168: IFTRUE 33184
33170: LD_INT 24
33172: DOUBLE
33173: EQUAL
33174: IFTRUE 33184
33176: LD_INT 25
33178: DOUBLE
33179: EQUAL
33180: IFTRUE 33184
33182: GO 33240
33184: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33185: LD_ADDR_VAR 0 9
33189: PUSH
33190: LD_VAR 0 35
33194: PUSH
33195: LD_VAR 0 36
33199: PUSH
33200: LD_VAR 0 37
33204: PUSH
33205: LD_VAR 0 38
33209: PUSH
33210: LD_VAR 0 39
33214: PUSH
33215: LD_VAR 0 40
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: PUSH
33228: LD_VAR 0 4
33232: PUSH
33233: LD_INT 1
33235: PLUS
33236: ARRAY
33237: ST_TO_ADDR
33238: GO 33605
33240: LD_INT 6
33242: DOUBLE
33243: EQUAL
33244: IFTRUE 33296
33246: LD_INT 7
33248: DOUBLE
33249: EQUAL
33250: IFTRUE 33296
33252: LD_INT 8
33254: DOUBLE
33255: EQUAL
33256: IFTRUE 33296
33258: LD_INT 13
33260: DOUBLE
33261: EQUAL
33262: IFTRUE 33296
33264: LD_INT 12
33266: DOUBLE
33267: EQUAL
33268: IFTRUE 33296
33270: LD_INT 15
33272: DOUBLE
33273: EQUAL
33274: IFTRUE 33296
33276: LD_INT 11
33278: DOUBLE
33279: EQUAL
33280: IFTRUE 33296
33282: LD_INT 14
33284: DOUBLE
33285: EQUAL
33286: IFTRUE 33296
33288: LD_INT 10
33290: DOUBLE
33291: EQUAL
33292: IFTRUE 33296
33294: GO 33352
33296: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33297: LD_ADDR_VAR 0 9
33301: PUSH
33302: LD_VAR 0 41
33306: PUSH
33307: LD_VAR 0 42
33311: PUSH
33312: LD_VAR 0 43
33316: PUSH
33317: LD_VAR 0 44
33321: PUSH
33322: LD_VAR 0 45
33326: PUSH
33327: LD_VAR 0 46
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: PUSH
33340: LD_VAR 0 4
33344: PUSH
33345: LD_INT 1
33347: PLUS
33348: ARRAY
33349: ST_TO_ADDR
33350: GO 33605
33352: LD_INT 36
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33416
33360: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33361: LD_ADDR_VAR 0 9
33365: PUSH
33366: LD_VAR 0 47
33370: PUSH
33371: LD_VAR 0 48
33375: PUSH
33376: LD_VAR 0 49
33380: PUSH
33381: LD_VAR 0 50
33385: PUSH
33386: LD_VAR 0 51
33390: PUSH
33391: LD_VAR 0 52
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: PUSH
33404: LD_VAR 0 4
33408: PUSH
33409: LD_INT 1
33411: PLUS
33412: ARRAY
33413: ST_TO_ADDR
33414: GO 33605
33416: LD_INT 4
33418: DOUBLE
33419: EQUAL
33420: IFTRUE 33442
33422: LD_INT 5
33424: DOUBLE
33425: EQUAL
33426: IFTRUE 33442
33428: LD_INT 34
33430: DOUBLE
33431: EQUAL
33432: IFTRUE 33442
33434: LD_INT 37
33436: DOUBLE
33437: EQUAL
33438: IFTRUE 33442
33440: GO 33498
33442: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33443: LD_ADDR_VAR 0 9
33447: PUSH
33448: LD_VAR 0 53
33452: PUSH
33453: LD_VAR 0 54
33457: PUSH
33458: LD_VAR 0 55
33462: PUSH
33463: LD_VAR 0 56
33467: PUSH
33468: LD_VAR 0 57
33472: PUSH
33473: LD_VAR 0 58
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: PUSH
33486: LD_VAR 0 4
33490: PUSH
33491: LD_INT 1
33493: PLUS
33494: ARRAY
33495: ST_TO_ADDR
33496: GO 33605
33498: LD_INT 31
33500: DOUBLE
33501: EQUAL
33502: IFTRUE 33548
33504: LD_INT 32
33506: DOUBLE
33507: EQUAL
33508: IFTRUE 33548
33510: LD_INT 33
33512: DOUBLE
33513: EQUAL
33514: IFTRUE 33548
33516: LD_INT 27
33518: DOUBLE
33519: EQUAL
33520: IFTRUE 33548
33522: LD_INT 26
33524: DOUBLE
33525: EQUAL
33526: IFTRUE 33548
33528: LD_INT 28
33530: DOUBLE
33531: EQUAL
33532: IFTRUE 33548
33534: LD_INT 29
33536: DOUBLE
33537: EQUAL
33538: IFTRUE 33548
33540: LD_INT 30
33542: DOUBLE
33543: EQUAL
33544: IFTRUE 33548
33546: GO 33604
33548: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33549: LD_ADDR_VAR 0 9
33553: PUSH
33554: LD_VAR 0 59
33558: PUSH
33559: LD_VAR 0 60
33563: PUSH
33564: LD_VAR 0 61
33568: PUSH
33569: LD_VAR 0 62
33573: PUSH
33574: LD_VAR 0 63
33578: PUSH
33579: LD_VAR 0 64
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: PUSH
33592: LD_VAR 0 4
33596: PUSH
33597: LD_INT 1
33599: PLUS
33600: ARRAY
33601: ST_TO_ADDR
33602: GO 33605
33604: POP
// temp_list2 = [ ] ;
33605: LD_ADDR_VAR 0 10
33609: PUSH
33610: EMPTY
33611: ST_TO_ADDR
// for i in temp_list do
33612: LD_ADDR_VAR 0 8
33616: PUSH
33617: LD_VAR 0 9
33621: PUSH
33622: FOR_IN
33623: IFFALSE 33675
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33625: LD_ADDR_VAR 0 10
33629: PUSH
33630: LD_VAR 0 10
33634: PUSH
33635: LD_VAR 0 8
33639: PUSH
33640: LD_INT 1
33642: ARRAY
33643: PUSH
33644: LD_VAR 0 2
33648: PLUS
33649: PUSH
33650: LD_VAR 0 8
33654: PUSH
33655: LD_INT 2
33657: ARRAY
33658: PUSH
33659: LD_VAR 0 3
33663: PLUS
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: EMPTY
33670: LIST
33671: ADD
33672: ST_TO_ADDR
33673: GO 33622
33675: POP
33676: POP
// result = temp_list2 ;
33677: LD_ADDR_VAR 0 7
33681: PUSH
33682: LD_VAR 0 10
33686: ST_TO_ADDR
// end ;
33687: LD_VAR 0 7
33691: RET
// export function EnemyInRange ( unit , dist ) ; begin
33692: LD_INT 0
33694: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33695: LD_ADDR_VAR 0 3
33699: PUSH
33700: LD_VAR 0 1
33704: PPUSH
33705: CALL_OW 255
33709: PPUSH
33710: LD_VAR 0 1
33714: PPUSH
33715: CALL_OW 250
33719: PPUSH
33720: LD_VAR 0 1
33724: PPUSH
33725: CALL_OW 251
33729: PPUSH
33730: LD_VAR 0 2
33734: PPUSH
33735: CALL 7088 0 4
33739: PUSH
33740: LD_INT 4
33742: ARRAY
33743: ST_TO_ADDR
// end ;
33744: LD_VAR 0 3
33748: RET
// export function PlayerSeeMe ( unit ) ; begin
33749: LD_INT 0
33751: PPUSH
// result := See ( your_side , unit ) ;
33752: LD_ADDR_VAR 0 2
33756: PUSH
33757: LD_OWVAR 2
33761: PPUSH
33762: LD_VAR 0 1
33766: PPUSH
33767: CALL_OW 292
33771: ST_TO_ADDR
// end ;
33772: LD_VAR 0 2
33776: RET
// export function ReverseDir ( unit ) ; begin
33777: LD_INT 0
33779: PPUSH
// if not unit then
33780: LD_VAR 0 1
33784: NOT
33785: IFFALSE 33789
// exit ;
33787: GO 33812
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33789: LD_ADDR_VAR 0 2
33793: PUSH
33794: LD_VAR 0 1
33798: PPUSH
33799: CALL_OW 254
33803: PUSH
33804: LD_INT 3
33806: PLUS
33807: PUSH
33808: LD_INT 6
33810: MOD
33811: ST_TO_ADDR
// end ;
33812: LD_VAR 0 2
33816: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
33817: LD_INT 0
33819: PPUSH
33820: PPUSH
33821: PPUSH
33822: PPUSH
33823: PPUSH
// if not hexes then
33824: LD_VAR 0 2
33828: NOT
33829: IFFALSE 33833
// exit ;
33831: GO 33981
// dist := 9999 ;
33833: LD_ADDR_VAR 0 5
33837: PUSH
33838: LD_INT 9999
33840: ST_TO_ADDR
// for i = 1 to hexes do
33841: LD_ADDR_VAR 0 4
33845: PUSH
33846: DOUBLE
33847: LD_INT 1
33849: DEC
33850: ST_TO_ADDR
33851: LD_VAR 0 2
33855: PUSH
33856: FOR_TO
33857: IFFALSE 33969
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
33859: LD_VAR 0 1
33863: PPUSH
33864: LD_VAR 0 2
33868: PUSH
33869: LD_VAR 0 4
33873: ARRAY
33874: PUSH
33875: LD_INT 1
33877: ARRAY
33878: PPUSH
33879: LD_VAR 0 2
33883: PUSH
33884: LD_VAR 0 4
33888: ARRAY
33889: PUSH
33890: LD_INT 2
33892: ARRAY
33893: PPUSH
33894: CALL_OW 297
33898: PUSH
33899: LD_VAR 0 5
33903: LESS
33904: IFFALSE 33967
// begin hex := hexes [ i ] ;
33906: LD_ADDR_VAR 0 7
33910: PUSH
33911: LD_VAR 0 2
33915: PUSH
33916: LD_VAR 0 4
33920: ARRAY
33921: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33922: LD_ADDR_VAR 0 5
33926: PUSH
33927: LD_VAR 0 1
33931: PPUSH
33932: LD_VAR 0 2
33936: PUSH
33937: LD_VAR 0 4
33941: ARRAY
33942: PUSH
33943: LD_INT 1
33945: ARRAY
33946: PPUSH
33947: LD_VAR 0 2
33951: PUSH
33952: LD_VAR 0 4
33956: ARRAY
33957: PUSH
33958: LD_INT 2
33960: ARRAY
33961: PPUSH
33962: CALL_OW 297
33966: ST_TO_ADDR
// end ; end ;
33967: GO 33856
33969: POP
33970: POP
// result := hex ;
33971: LD_ADDR_VAR 0 3
33975: PUSH
33976: LD_VAR 0 7
33980: ST_TO_ADDR
// end ;
33981: LD_VAR 0 3
33985: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33986: LD_INT 0
33988: PPUSH
33989: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33990: LD_VAR 0 1
33994: NOT
33995: PUSH
33996: LD_VAR 0 1
34000: PUSH
34001: LD_INT 21
34003: PUSH
34004: LD_INT 2
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 23
34013: PUSH
34014: LD_INT 2
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PPUSH
34025: CALL_OW 69
34029: IN
34030: NOT
34031: OR
34032: IFFALSE 34036
// exit ;
34034: GO 34083
// for i = 1 to 3 do
34036: LD_ADDR_VAR 0 3
34040: PUSH
34041: DOUBLE
34042: LD_INT 1
34044: DEC
34045: ST_TO_ADDR
34046: LD_INT 3
34048: PUSH
34049: FOR_TO
34050: IFFALSE 34081
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34052: LD_VAR 0 1
34056: PPUSH
34057: CALL_OW 250
34061: PPUSH
34062: LD_VAR 0 1
34066: PPUSH
34067: CALL_OW 251
34071: PPUSH
34072: LD_INT 1
34074: PPUSH
34075: CALL_OW 453
34079: GO 34049
34081: POP
34082: POP
// end ;
34083: LD_VAR 0 2
34087: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34088: LD_INT 0
34090: PPUSH
34091: PPUSH
34092: PPUSH
34093: PPUSH
34094: PPUSH
34095: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34096: LD_VAR 0 1
34100: NOT
34101: PUSH
34102: LD_VAR 0 2
34106: NOT
34107: OR
34108: PUSH
34109: LD_VAR 0 1
34113: PPUSH
34114: CALL_OW 314
34118: OR
34119: IFFALSE 34123
// exit ;
34121: GO 34564
// x := GetX ( enemy_unit ) ;
34123: LD_ADDR_VAR 0 7
34127: PUSH
34128: LD_VAR 0 2
34132: PPUSH
34133: CALL_OW 250
34137: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34138: LD_ADDR_VAR 0 8
34142: PUSH
34143: LD_VAR 0 2
34147: PPUSH
34148: CALL_OW 251
34152: ST_TO_ADDR
// if not x or not y then
34153: LD_VAR 0 7
34157: NOT
34158: PUSH
34159: LD_VAR 0 8
34163: NOT
34164: OR
34165: IFFALSE 34169
// exit ;
34167: GO 34564
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34169: LD_ADDR_VAR 0 6
34173: PUSH
34174: LD_VAR 0 7
34178: PPUSH
34179: LD_INT 0
34181: PPUSH
34182: LD_INT 4
34184: PPUSH
34185: CALL_OW 272
34189: PUSH
34190: LD_VAR 0 8
34194: PPUSH
34195: LD_INT 0
34197: PPUSH
34198: LD_INT 4
34200: PPUSH
34201: CALL_OW 273
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_VAR 0 7
34214: PPUSH
34215: LD_INT 1
34217: PPUSH
34218: LD_INT 4
34220: PPUSH
34221: CALL_OW 272
34225: PUSH
34226: LD_VAR 0 8
34230: PPUSH
34231: LD_INT 1
34233: PPUSH
34234: LD_INT 4
34236: PPUSH
34237: CALL_OW 273
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_VAR 0 7
34250: PPUSH
34251: LD_INT 2
34253: PPUSH
34254: LD_INT 4
34256: PPUSH
34257: CALL_OW 272
34261: PUSH
34262: LD_VAR 0 8
34266: PPUSH
34267: LD_INT 2
34269: PPUSH
34270: LD_INT 4
34272: PPUSH
34273: CALL_OW 273
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_VAR 0 7
34286: PPUSH
34287: LD_INT 3
34289: PPUSH
34290: LD_INT 4
34292: PPUSH
34293: CALL_OW 272
34297: PUSH
34298: LD_VAR 0 8
34302: PPUSH
34303: LD_INT 3
34305: PPUSH
34306: LD_INT 4
34308: PPUSH
34309: CALL_OW 273
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_VAR 0 7
34322: PPUSH
34323: LD_INT 4
34325: PPUSH
34326: LD_INT 4
34328: PPUSH
34329: CALL_OW 272
34333: PUSH
34334: LD_VAR 0 8
34338: PPUSH
34339: LD_INT 4
34341: PPUSH
34342: LD_INT 4
34344: PPUSH
34345: CALL_OW 273
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_VAR 0 7
34358: PPUSH
34359: LD_INT 5
34361: PPUSH
34362: LD_INT 4
34364: PPUSH
34365: CALL_OW 272
34369: PUSH
34370: LD_VAR 0 8
34374: PPUSH
34375: LD_INT 5
34377: PPUSH
34378: LD_INT 4
34380: PPUSH
34381: CALL_OW 273
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: ST_TO_ADDR
// for i = tmp downto 1 do
34398: LD_ADDR_VAR 0 4
34402: PUSH
34403: DOUBLE
34404: LD_VAR 0 6
34408: INC
34409: ST_TO_ADDR
34410: LD_INT 1
34412: PUSH
34413: FOR_DOWNTO
34414: IFFALSE 34515
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34416: LD_VAR 0 6
34420: PUSH
34421: LD_VAR 0 4
34425: ARRAY
34426: PUSH
34427: LD_INT 1
34429: ARRAY
34430: PPUSH
34431: LD_VAR 0 6
34435: PUSH
34436: LD_VAR 0 4
34440: ARRAY
34441: PUSH
34442: LD_INT 2
34444: ARRAY
34445: PPUSH
34446: CALL_OW 488
34450: NOT
34451: PUSH
34452: LD_VAR 0 6
34456: PUSH
34457: LD_VAR 0 4
34461: ARRAY
34462: PUSH
34463: LD_INT 1
34465: ARRAY
34466: PPUSH
34467: LD_VAR 0 6
34471: PUSH
34472: LD_VAR 0 4
34476: ARRAY
34477: PUSH
34478: LD_INT 2
34480: ARRAY
34481: PPUSH
34482: CALL_OW 428
34486: PUSH
34487: LD_INT 0
34489: NONEQUAL
34490: OR
34491: IFFALSE 34513
// tmp := Delete ( tmp , i ) ;
34493: LD_ADDR_VAR 0 6
34497: PUSH
34498: LD_VAR 0 6
34502: PPUSH
34503: LD_VAR 0 4
34507: PPUSH
34508: CALL_OW 3
34512: ST_TO_ADDR
34513: GO 34413
34515: POP
34516: POP
// j := GetClosestHex ( unit , tmp ) ;
34517: LD_ADDR_VAR 0 5
34521: PUSH
34522: LD_VAR 0 1
34526: PPUSH
34527: LD_VAR 0 6
34531: PPUSH
34532: CALL 33817 0 2
34536: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34537: LD_VAR 0 1
34541: PPUSH
34542: LD_VAR 0 5
34546: PUSH
34547: LD_INT 1
34549: ARRAY
34550: PPUSH
34551: LD_VAR 0 5
34555: PUSH
34556: LD_INT 2
34558: ARRAY
34559: PPUSH
34560: CALL_OW 111
// end ;
34564: LD_VAR 0 3
34568: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34569: LD_INT 0
34571: PPUSH
34572: PPUSH
34573: PPUSH
// uc_side = 0 ;
34574: LD_ADDR_OWVAR 20
34578: PUSH
34579: LD_INT 0
34581: ST_TO_ADDR
// uc_nation = 0 ;
34582: LD_ADDR_OWVAR 21
34586: PUSH
34587: LD_INT 0
34589: ST_TO_ADDR
// InitHc_All ( ) ;
34590: CALL_OW 584
// InitVc ;
34594: CALL_OW 20
// if mastodonts then
34598: LD_VAR 0 6
34602: IFFALSE 34669
// for i = 1 to mastodonts do
34604: LD_ADDR_VAR 0 11
34608: PUSH
34609: DOUBLE
34610: LD_INT 1
34612: DEC
34613: ST_TO_ADDR
34614: LD_VAR 0 6
34618: PUSH
34619: FOR_TO
34620: IFFALSE 34667
// begin vc_chassis := 31 ;
34622: LD_ADDR_OWVAR 37
34626: PUSH
34627: LD_INT 31
34629: ST_TO_ADDR
// vc_control := control_rider ;
34630: LD_ADDR_OWVAR 38
34634: PUSH
34635: LD_INT 4
34637: ST_TO_ADDR
// animal := CreateVehicle ;
34638: LD_ADDR_VAR 0 12
34642: PUSH
34643: CALL_OW 45
34647: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34648: LD_VAR 0 12
34652: PPUSH
34653: LD_VAR 0 8
34657: PPUSH
34658: LD_INT 0
34660: PPUSH
34661: CALL 36804 0 3
// end ;
34665: GO 34619
34667: POP
34668: POP
// if horses then
34669: LD_VAR 0 5
34673: IFFALSE 34740
// for i = 1 to horses do
34675: LD_ADDR_VAR 0 11
34679: PUSH
34680: DOUBLE
34681: LD_INT 1
34683: DEC
34684: ST_TO_ADDR
34685: LD_VAR 0 5
34689: PUSH
34690: FOR_TO
34691: IFFALSE 34738
// begin hc_class := 21 ;
34693: LD_ADDR_OWVAR 28
34697: PUSH
34698: LD_INT 21
34700: ST_TO_ADDR
// hc_gallery :=  ;
34701: LD_ADDR_OWVAR 33
34705: PUSH
34706: LD_STRING 
34708: ST_TO_ADDR
// animal := CreateHuman ;
34709: LD_ADDR_VAR 0 12
34713: PUSH
34714: CALL_OW 44
34718: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34719: LD_VAR 0 12
34723: PPUSH
34724: LD_VAR 0 8
34728: PPUSH
34729: LD_INT 0
34731: PPUSH
34732: CALL 36804 0 3
// end ;
34736: GO 34690
34738: POP
34739: POP
// if birds then
34740: LD_VAR 0 1
34744: IFFALSE 34811
// for i = 1 to birds do
34746: LD_ADDR_VAR 0 11
34750: PUSH
34751: DOUBLE
34752: LD_INT 1
34754: DEC
34755: ST_TO_ADDR
34756: LD_VAR 0 1
34760: PUSH
34761: FOR_TO
34762: IFFALSE 34809
// begin hc_class = 18 ;
34764: LD_ADDR_OWVAR 28
34768: PUSH
34769: LD_INT 18
34771: ST_TO_ADDR
// hc_gallery =  ;
34772: LD_ADDR_OWVAR 33
34776: PUSH
34777: LD_STRING 
34779: ST_TO_ADDR
// animal := CreateHuman ;
34780: LD_ADDR_VAR 0 12
34784: PUSH
34785: CALL_OW 44
34789: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34790: LD_VAR 0 12
34794: PPUSH
34795: LD_VAR 0 8
34799: PPUSH
34800: LD_INT 0
34802: PPUSH
34803: CALL 36804 0 3
// end ;
34807: GO 34761
34809: POP
34810: POP
// if tigers then
34811: LD_VAR 0 2
34815: IFFALSE 34899
// for i = 1 to tigers do
34817: LD_ADDR_VAR 0 11
34821: PUSH
34822: DOUBLE
34823: LD_INT 1
34825: DEC
34826: ST_TO_ADDR
34827: LD_VAR 0 2
34831: PUSH
34832: FOR_TO
34833: IFFALSE 34897
// begin hc_class = class_tiger ;
34835: LD_ADDR_OWVAR 28
34839: PUSH
34840: LD_INT 14
34842: ST_TO_ADDR
// hc_gallery =  ;
34843: LD_ADDR_OWVAR 33
34847: PUSH
34848: LD_STRING 
34850: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34851: LD_ADDR_OWVAR 35
34855: PUSH
34856: LD_INT 7
34858: NEG
34859: PPUSH
34860: LD_INT 7
34862: PPUSH
34863: CALL_OW 12
34867: ST_TO_ADDR
// animal := CreateHuman ;
34868: LD_ADDR_VAR 0 12
34872: PUSH
34873: CALL_OW 44
34877: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34878: LD_VAR 0 12
34882: PPUSH
34883: LD_VAR 0 8
34887: PPUSH
34888: LD_INT 0
34890: PPUSH
34891: CALL 36804 0 3
// end ;
34895: GO 34832
34897: POP
34898: POP
// if apemans then
34899: LD_VAR 0 3
34903: IFFALSE 35026
// for i = 1 to apemans do
34905: LD_ADDR_VAR 0 11
34909: PUSH
34910: DOUBLE
34911: LD_INT 1
34913: DEC
34914: ST_TO_ADDR
34915: LD_VAR 0 3
34919: PUSH
34920: FOR_TO
34921: IFFALSE 35024
// begin hc_class = class_apeman ;
34923: LD_ADDR_OWVAR 28
34927: PUSH
34928: LD_INT 12
34930: ST_TO_ADDR
// hc_gallery =  ;
34931: LD_ADDR_OWVAR 33
34935: PUSH
34936: LD_STRING 
34938: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
34939: LD_ADDR_OWVAR 35
34943: PUSH
34944: LD_INT 2
34946: NEG
34947: PPUSH
34948: LD_INT 2
34950: PPUSH
34951: CALL_OW 12
34955: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
34956: LD_ADDR_OWVAR 31
34960: PUSH
34961: LD_INT 1
34963: PPUSH
34964: LD_INT 3
34966: PPUSH
34967: CALL_OW 12
34971: PUSH
34972: LD_INT 1
34974: PPUSH
34975: LD_INT 3
34977: PPUSH
34978: CALL_OW 12
34982: PUSH
34983: LD_INT 0
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: ST_TO_ADDR
// animal := CreateHuman ;
34995: LD_ADDR_VAR 0 12
34999: PUSH
35000: CALL_OW 44
35004: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35005: LD_VAR 0 12
35009: PPUSH
35010: LD_VAR 0 8
35014: PPUSH
35015: LD_INT 0
35017: PPUSH
35018: CALL 36804 0 3
// end ;
35022: GO 34920
35024: POP
35025: POP
// if enchidnas then
35026: LD_VAR 0 4
35030: IFFALSE 35097
// for i = 1 to enchidnas do
35032: LD_ADDR_VAR 0 11
35036: PUSH
35037: DOUBLE
35038: LD_INT 1
35040: DEC
35041: ST_TO_ADDR
35042: LD_VAR 0 4
35046: PUSH
35047: FOR_TO
35048: IFFALSE 35095
// begin hc_class = 13 ;
35050: LD_ADDR_OWVAR 28
35054: PUSH
35055: LD_INT 13
35057: ST_TO_ADDR
// hc_gallery =  ;
35058: LD_ADDR_OWVAR 33
35062: PUSH
35063: LD_STRING 
35065: ST_TO_ADDR
// animal := CreateHuman ;
35066: LD_ADDR_VAR 0 12
35070: PUSH
35071: CALL_OW 44
35075: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35076: LD_VAR 0 12
35080: PPUSH
35081: LD_VAR 0 8
35085: PPUSH
35086: LD_INT 0
35088: PPUSH
35089: CALL 36804 0 3
// end ;
35093: GO 35047
35095: POP
35096: POP
// if fishes then
35097: LD_VAR 0 7
35101: IFFALSE 35168
// for i = 1 to fishes do
35103: LD_ADDR_VAR 0 11
35107: PUSH
35108: DOUBLE
35109: LD_INT 1
35111: DEC
35112: ST_TO_ADDR
35113: LD_VAR 0 7
35117: PUSH
35118: FOR_TO
35119: IFFALSE 35166
// begin hc_class = 20 ;
35121: LD_ADDR_OWVAR 28
35125: PUSH
35126: LD_INT 20
35128: ST_TO_ADDR
// hc_gallery =  ;
35129: LD_ADDR_OWVAR 33
35133: PUSH
35134: LD_STRING 
35136: ST_TO_ADDR
// animal := CreateHuman ;
35137: LD_ADDR_VAR 0 12
35141: PUSH
35142: CALL_OW 44
35146: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35147: LD_VAR 0 12
35151: PPUSH
35152: LD_VAR 0 9
35156: PPUSH
35157: LD_INT 0
35159: PPUSH
35160: CALL 36804 0 3
// end ;
35164: GO 35118
35166: POP
35167: POP
// end ;
35168: LD_VAR 0 10
35172: RET
// export function WantHeal ( sci , unit ) ; begin
35173: LD_INT 0
35175: PPUSH
// if GetTaskList ( sci ) > 0 then
35176: LD_VAR 0 1
35180: PPUSH
35181: CALL_OW 437
35185: PUSH
35186: LD_INT 0
35188: GREATER
35189: IFFALSE 35259
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35191: LD_VAR 0 1
35195: PPUSH
35196: CALL_OW 437
35200: PUSH
35201: LD_INT 1
35203: ARRAY
35204: PUSH
35205: LD_INT 1
35207: ARRAY
35208: PUSH
35209: LD_STRING l
35211: EQUAL
35212: PUSH
35213: LD_VAR 0 1
35217: PPUSH
35218: CALL_OW 437
35222: PUSH
35223: LD_INT 1
35225: ARRAY
35226: PUSH
35227: LD_INT 4
35229: ARRAY
35230: PUSH
35231: LD_VAR 0 2
35235: EQUAL
35236: AND
35237: IFFALSE 35249
// result := true else
35239: LD_ADDR_VAR 0 3
35243: PUSH
35244: LD_INT 1
35246: ST_TO_ADDR
35247: GO 35257
// result := false ;
35249: LD_ADDR_VAR 0 3
35253: PUSH
35254: LD_INT 0
35256: ST_TO_ADDR
// end else
35257: GO 35267
// result := false ;
35259: LD_ADDR_VAR 0 3
35263: PUSH
35264: LD_INT 0
35266: ST_TO_ADDR
// end ;
35267: LD_VAR 0 3
35271: RET
// export function HealTarget ( sci ) ; begin
35272: LD_INT 0
35274: PPUSH
// if not sci then
35275: LD_VAR 0 1
35279: NOT
35280: IFFALSE 35284
// exit ;
35282: GO 35349
// result := 0 ;
35284: LD_ADDR_VAR 0 2
35288: PUSH
35289: LD_INT 0
35291: ST_TO_ADDR
// if GetTaskList ( sci ) then
35292: LD_VAR 0 1
35296: PPUSH
35297: CALL_OW 437
35301: IFFALSE 35349
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35303: LD_VAR 0 1
35307: PPUSH
35308: CALL_OW 437
35312: PUSH
35313: LD_INT 1
35315: ARRAY
35316: PUSH
35317: LD_INT 1
35319: ARRAY
35320: PUSH
35321: LD_STRING l
35323: EQUAL
35324: IFFALSE 35349
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35326: LD_ADDR_VAR 0 2
35330: PUSH
35331: LD_VAR 0 1
35335: PPUSH
35336: CALL_OW 437
35340: PUSH
35341: LD_INT 1
35343: ARRAY
35344: PUSH
35345: LD_INT 4
35347: ARRAY
35348: ST_TO_ADDR
// end ;
35349: LD_VAR 0 2
35353: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35354: LD_INT 0
35356: PPUSH
35357: PPUSH
35358: PPUSH
35359: PPUSH
// if not base_units then
35360: LD_VAR 0 1
35364: NOT
35365: IFFALSE 35369
// exit ;
35367: GO 35456
// result := false ;
35369: LD_ADDR_VAR 0 2
35373: PUSH
35374: LD_INT 0
35376: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35377: LD_ADDR_VAR 0 5
35381: PUSH
35382: LD_VAR 0 1
35386: PPUSH
35387: LD_INT 21
35389: PUSH
35390: LD_INT 3
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PPUSH
35397: CALL_OW 72
35401: ST_TO_ADDR
// if not tmp then
35402: LD_VAR 0 5
35406: NOT
35407: IFFALSE 35411
// exit ;
35409: GO 35456
// for i in tmp do
35411: LD_ADDR_VAR 0 3
35415: PUSH
35416: LD_VAR 0 5
35420: PUSH
35421: FOR_IN
35422: IFFALSE 35454
// begin result := EnemyInRange ( i , 22 ) ;
35424: LD_ADDR_VAR 0 2
35428: PUSH
35429: LD_VAR 0 3
35433: PPUSH
35434: LD_INT 22
35436: PPUSH
35437: CALL 33692 0 2
35441: ST_TO_ADDR
// if result then
35442: LD_VAR 0 2
35446: IFFALSE 35452
// exit ;
35448: POP
35449: POP
35450: GO 35456
// end ;
35452: GO 35421
35454: POP
35455: POP
// end ;
35456: LD_VAR 0 2
35460: RET
// export function FilterByTag ( units , tag ) ; begin
35461: LD_INT 0
35463: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35464: LD_ADDR_VAR 0 3
35468: PUSH
35469: LD_VAR 0 1
35473: PPUSH
35474: LD_INT 120
35476: PUSH
35477: LD_VAR 0 2
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PPUSH
35486: CALL_OW 72
35490: ST_TO_ADDR
// end ;
35491: LD_VAR 0 3
35495: RET
// export function IsDriver ( un ) ; begin
35496: LD_INT 0
35498: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35499: LD_ADDR_VAR 0 2
35503: PUSH
35504: LD_VAR 0 1
35508: PUSH
35509: LD_INT 55
35511: PUSH
35512: EMPTY
35513: LIST
35514: PPUSH
35515: CALL_OW 69
35519: IN
35520: ST_TO_ADDR
// end ;
35521: LD_VAR 0 2
35525: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35526: LD_INT 0
35528: PPUSH
35529: PPUSH
// list := [ ] ;
35530: LD_ADDR_VAR 0 5
35534: PUSH
35535: EMPTY
35536: ST_TO_ADDR
// case d of 0 :
35537: LD_VAR 0 3
35541: PUSH
35542: LD_INT 0
35544: DOUBLE
35545: EQUAL
35546: IFTRUE 35550
35548: GO 35683
35550: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35551: LD_ADDR_VAR 0 5
35555: PUSH
35556: LD_VAR 0 1
35560: PUSH
35561: LD_INT 4
35563: MINUS
35564: PUSH
35565: LD_VAR 0 2
35569: PUSH
35570: LD_INT 4
35572: MINUS
35573: PUSH
35574: LD_INT 2
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: LIST
35581: PUSH
35582: LD_VAR 0 1
35586: PUSH
35587: LD_INT 3
35589: MINUS
35590: PUSH
35591: LD_VAR 0 2
35595: PUSH
35596: LD_INT 1
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: LIST
35603: PUSH
35604: LD_VAR 0 1
35608: PUSH
35609: LD_INT 4
35611: PLUS
35612: PUSH
35613: LD_VAR 0 2
35617: PUSH
35618: LD_INT 4
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: LIST
35625: PUSH
35626: LD_VAR 0 1
35630: PUSH
35631: LD_INT 3
35633: PLUS
35634: PUSH
35635: LD_VAR 0 2
35639: PUSH
35640: LD_INT 3
35642: PLUS
35643: PUSH
35644: LD_INT 5
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: LIST
35651: PUSH
35652: LD_VAR 0 1
35656: PUSH
35657: LD_VAR 0 2
35661: PUSH
35662: LD_INT 4
35664: PLUS
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: LIST
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: ST_TO_ADDR
// end ; 1 :
35681: GO 36381
35683: LD_INT 1
35685: DOUBLE
35686: EQUAL
35687: IFTRUE 35691
35689: GO 35824
35691: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35692: LD_ADDR_VAR 0 5
35696: PUSH
35697: LD_VAR 0 1
35701: PUSH
35702: LD_VAR 0 2
35706: PUSH
35707: LD_INT 4
35709: MINUS
35710: PUSH
35711: LD_INT 3
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: LIST
35718: PUSH
35719: LD_VAR 0 1
35723: PUSH
35724: LD_INT 3
35726: MINUS
35727: PUSH
35728: LD_VAR 0 2
35732: PUSH
35733: LD_INT 3
35735: MINUS
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: LIST
35744: PUSH
35745: LD_VAR 0 1
35749: PUSH
35750: LD_INT 4
35752: MINUS
35753: PUSH
35754: LD_VAR 0 2
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: LIST
35766: PUSH
35767: LD_VAR 0 1
35771: PUSH
35772: LD_VAR 0 2
35776: PUSH
35777: LD_INT 3
35779: PLUS
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: LIST
35788: PUSH
35789: LD_VAR 0 1
35793: PUSH
35794: LD_INT 4
35796: PLUS
35797: PUSH
35798: LD_VAR 0 2
35802: PUSH
35803: LD_INT 4
35805: PLUS
35806: PUSH
35807: LD_INT 5
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: LIST
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: ST_TO_ADDR
// end ; 2 :
35822: GO 36381
35824: LD_INT 2
35826: DOUBLE
35827: EQUAL
35828: IFTRUE 35832
35830: GO 35961
35832: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35833: LD_ADDR_VAR 0 5
35837: PUSH
35838: LD_VAR 0 1
35842: PUSH
35843: LD_VAR 0 2
35847: PUSH
35848: LD_INT 3
35850: MINUS
35851: PUSH
35852: LD_INT 3
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: LIST
35859: PUSH
35860: LD_VAR 0 1
35864: PUSH
35865: LD_INT 4
35867: PLUS
35868: PUSH
35869: LD_VAR 0 2
35873: PUSH
35874: LD_INT 4
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: LIST
35881: PUSH
35882: LD_VAR 0 1
35886: PUSH
35887: LD_VAR 0 2
35891: PUSH
35892: LD_INT 4
35894: PLUS
35895: PUSH
35896: LD_INT 0
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: LIST
35903: PUSH
35904: LD_VAR 0 1
35908: PUSH
35909: LD_INT 3
35911: MINUS
35912: PUSH
35913: LD_VAR 0 2
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: LIST
35925: PUSH
35926: LD_VAR 0 1
35930: PUSH
35931: LD_INT 4
35933: MINUS
35934: PUSH
35935: LD_VAR 0 2
35939: PUSH
35940: LD_INT 4
35942: MINUS
35943: PUSH
35944: LD_INT 2
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: LIST
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: ST_TO_ADDR
// end ; 3 :
35959: GO 36381
35961: LD_INT 3
35963: DOUBLE
35964: EQUAL
35965: IFTRUE 35969
35967: GO 36102
35969: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
35970: LD_ADDR_VAR 0 5
35974: PUSH
35975: LD_VAR 0 1
35979: PUSH
35980: LD_INT 3
35982: PLUS
35983: PUSH
35984: LD_VAR 0 2
35988: PUSH
35989: LD_INT 4
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: LIST
35996: PUSH
35997: LD_VAR 0 1
36001: PUSH
36002: LD_INT 4
36004: PLUS
36005: PUSH
36006: LD_VAR 0 2
36010: PUSH
36011: LD_INT 4
36013: PLUS
36014: PUSH
36015: LD_INT 5
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: LIST
36022: PUSH
36023: LD_VAR 0 1
36027: PUSH
36028: LD_INT 4
36030: MINUS
36031: PUSH
36032: LD_VAR 0 2
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: LIST
36044: PUSH
36045: LD_VAR 0 1
36049: PUSH
36050: LD_VAR 0 2
36054: PUSH
36055: LD_INT 4
36057: MINUS
36058: PUSH
36059: LD_INT 3
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: LIST
36066: PUSH
36067: LD_VAR 0 1
36071: PUSH
36072: LD_INT 3
36074: MINUS
36075: PUSH
36076: LD_VAR 0 2
36080: PUSH
36081: LD_INT 3
36083: MINUS
36084: PUSH
36085: LD_INT 2
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: LIST
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: ST_TO_ADDR
// end ; 4 :
36100: GO 36381
36102: LD_INT 4
36104: DOUBLE
36105: EQUAL
36106: IFTRUE 36110
36108: GO 36243
36110: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36111: LD_ADDR_VAR 0 5
36115: PUSH
36116: LD_VAR 0 1
36120: PUSH
36121: LD_VAR 0 2
36125: PUSH
36126: LD_INT 4
36128: PLUS
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: LIST
36137: PUSH
36138: LD_VAR 0 1
36142: PUSH
36143: LD_INT 3
36145: PLUS
36146: PUSH
36147: LD_VAR 0 2
36151: PUSH
36152: LD_INT 3
36154: PLUS
36155: PUSH
36156: LD_INT 5
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: LIST
36163: PUSH
36164: LD_VAR 0 1
36168: PUSH
36169: LD_INT 4
36171: PLUS
36172: PUSH
36173: LD_VAR 0 2
36177: PUSH
36178: LD_INT 4
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: LIST
36185: PUSH
36186: LD_VAR 0 1
36190: PUSH
36191: LD_VAR 0 2
36195: PUSH
36196: LD_INT 3
36198: MINUS
36199: PUSH
36200: LD_INT 3
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: LIST
36207: PUSH
36208: LD_VAR 0 1
36212: PUSH
36213: LD_INT 4
36215: MINUS
36216: PUSH
36217: LD_VAR 0 2
36221: PUSH
36222: LD_INT 4
36224: MINUS
36225: PUSH
36226: LD_INT 2
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: LIST
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: ST_TO_ADDR
// end ; 5 :
36241: GO 36381
36243: LD_INT 5
36245: DOUBLE
36246: EQUAL
36247: IFTRUE 36251
36249: GO 36380
36251: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36252: LD_ADDR_VAR 0 5
36256: PUSH
36257: LD_VAR 0 1
36261: PUSH
36262: LD_INT 4
36264: MINUS
36265: PUSH
36266: LD_VAR 0 2
36270: PUSH
36271: LD_INT 1
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: LIST
36278: PUSH
36279: LD_VAR 0 1
36283: PUSH
36284: LD_VAR 0 2
36288: PUSH
36289: LD_INT 4
36291: MINUS
36292: PUSH
36293: LD_INT 3
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: LIST
36300: PUSH
36301: LD_VAR 0 1
36305: PUSH
36306: LD_INT 4
36308: PLUS
36309: PUSH
36310: LD_VAR 0 2
36314: PUSH
36315: LD_INT 4
36317: PLUS
36318: PUSH
36319: LD_INT 5
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: LIST
36326: PUSH
36327: LD_VAR 0 1
36331: PUSH
36332: LD_INT 3
36334: PLUS
36335: PUSH
36336: LD_VAR 0 2
36340: PUSH
36341: LD_INT 4
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: LIST
36348: PUSH
36349: LD_VAR 0 1
36353: PUSH
36354: LD_VAR 0 2
36358: PUSH
36359: LD_INT 3
36361: PLUS
36362: PUSH
36363: LD_INT 0
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: LIST
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: ST_TO_ADDR
// end ; end ;
36378: GO 36381
36380: POP
// result := list ;
36381: LD_ADDR_VAR 0 4
36385: PUSH
36386: LD_VAR 0 5
36390: ST_TO_ADDR
// end ;
36391: LD_VAR 0 4
36395: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36396: LD_INT 0
36398: PPUSH
36399: PPUSH
36400: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36401: LD_VAR 0 1
36405: NOT
36406: PUSH
36407: LD_VAR 0 2
36411: PUSH
36412: LD_INT 1
36414: PUSH
36415: LD_INT 2
36417: PUSH
36418: LD_INT 3
36420: PUSH
36421: LD_INT 4
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: IN
36430: NOT
36431: OR
36432: IFFALSE 36436
// exit ;
36434: GO 36528
// tmp := [ ] ;
36436: LD_ADDR_VAR 0 5
36440: PUSH
36441: EMPTY
36442: ST_TO_ADDR
// for i in units do
36443: LD_ADDR_VAR 0 4
36447: PUSH
36448: LD_VAR 0 1
36452: PUSH
36453: FOR_IN
36454: IFFALSE 36497
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
36456: LD_ADDR_VAR 0 5
36460: PUSH
36461: LD_VAR 0 5
36465: PPUSH
36466: LD_VAR 0 5
36470: PUSH
36471: LD_INT 1
36473: PLUS
36474: PPUSH
36475: LD_VAR 0 4
36479: PPUSH
36480: LD_VAR 0 2
36484: PPUSH
36485: CALL_OW 259
36489: PPUSH
36490: CALL_OW 2
36494: ST_TO_ADDR
36495: GO 36453
36497: POP
36498: POP
// if not tmp then
36499: LD_VAR 0 5
36503: NOT
36504: IFFALSE 36508
// exit ;
36506: GO 36528
// result := SortListByListDesc ( units , tmp ) ;
36508: LD_ADDR_VAR 0 3
36512: PUSH
36513: LD_VAR 0 1
36517: PPUSH
36518: LD_VAR 0 5
36522: PPUSH
36523: CALL_OW 77
36527: ST_TO_ADDR
// end ;
36528: LD_VAR 0 3
36532: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36533: LD_INT 0
36535: PPUSH
36536: PPUSH
36537: PPUSH
// result := false ;
36538: LD_ADDR_VAR 0 3
36542: PUSH
36543: LD_INT 0
36545: ST_TO_ADDR
// x := GetX ( building ) ;
36546: LD_ADDR_VAR 0 4
36550: PUSH
36551: LD_VAR 0 2
36555: PPUSH
36556: CALL_OW 250
36560: ST_TO_ADDR
// y := GetY ( building ) ;
36561: LD_ADDR_VAR 0 5
36565: PUSH
36566: LD_VAR 0 2
36570: PPUSH
36571: CALL_OW 251
36575: ST_TO_ADDR
// if not building or not x or not y then
36576: LD_VAR 0 2
36580: NOT
36581: PUSH
36582: LD_VAR 0 4
36586: NOT
36587: OR
36588: PUSH
36589: LD_VAR 0 5
36593: NOT
36594: OR
36595: IFFALSE 36599
// exit ;
36597: GO 36691
// if GetTaskList ( unit ) then
36599: LD_VAR 0 1
36603: PPUSH
36604: CALL_OW 437
36608: IFFALSE 36691
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36610: LD_STRING e
36612: PUSH
36613: LD_VAR 0 1
36617: PPUSH
36618: CALL_OW 437
36622: PUSH
36623: LD_INT 1
36625: ARRAY
36626: PUSH
36627: LD_INT 1
36629: ARRAY
36630: EQUAL
36631: PUSH
36632: LD_VAR 0 4
36636: PUSH
36637: LD_VAR 0 1
36641: PPUSH
36642: CALL_OW 437
36646: PUSH
36647: LD_INT 1
36649: ARRAY
36650: PUSH
36651: LD_INT 2
36653: ARRAY
36654: EQUAL
36655: AND
36656: PUSH
36657: LD_VAR 0 5
36661: PUSH
36662: LD_VAR 0 1
36666: PPUSH
36667: CALL_OW 437
36671: PUSH
36672: LD_INT 1
36674: ARRAY
36675: PUSH
36676: LD_INT 3
36678: ARRAY
36679: EQUAL
36680: AND
36681: IFFALSE 36691
// result := true end ;
36683: LD_ADDR_VAR 0 3
36687: PUSH
36688: LD_INT 1
36690: ST_TO_ADDR
// end ;
36691: LD_VAR 0 3
36695: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36696: LD_INT 0
36698: PPUSH
// result := false ;
36699: LD_ADDR_VAR 0 4
36703: PUSH
36704: LD_INT 0
36706: ST_TO_ADDR
// if GetTaskList ( unit ) then
36707: LD_VAR 0 1
36711: PPUSH
36712: CALL_OW 437
36716: IFFALSE 36799
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36718: LD_STRING M
36720: PUSH
36721: LD_VAR 0 1
36725: PPUSH
36726: CALL_OW 437
36730: PUSH
36731: LD_INT 1
36733: ARRAY
36734: PUSH
36735: LD_INT 1
36737: ARRAY
36738: EQUAL
36739: PUSH
36740: LD_VAR 0 2
36744: PUSH
36745: LD_VAR 0 1
36749: PPUSH
36750: CALL_OW 437
36754: PUSH
36755: LD_INT 1
36757: ARRAY
36758: PUSH
36759: LD_INT 2
36761: ARRAY
36762: EQUAL
36763: AND
36764: PUSH
36765: LD_VAR 0 3
36769: PUSH
36770: LD_VAR 0 1
36774: PPUSH
36775: CALL_OW 437
36779: PUSH
36780: LD_INT 1
36782: ARRAY
36783: PUSH
36784: LD_INT 3
36786: ARRAY
36787: EQUAL
36788: AND
36789: IFFALSE 36799
// result := true ;
36791: LD_ADDR_VAR 0 4
36795: PUSH
36796: LD_INT 1
36798: ST_TO_ADDR
// end ; end ;
36799: LD_VAR 0 4
36803: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36804: LD_INT 0
36806: PPUSH
36807: PPUSH
36808: PPUSH
36809: PPUSH
// if not unit or not area then
36810: LD_VAR 0 1
36814: NOT
36815: PUSH
36816: LD_VAR 0 2
36820: NOT
36821: OR
36822: IFFALSE 36826
// exit ;
36824: GO 36990
// tmp := AreaToList ( area , i ) ;
36826: LD_ADDR_VAR 0 6
36830: PUSH
36831: LD_VAR 0 2
36835: PPUSH
36836: LD_VAR 0 5
36840: PPUSH
36841: CALL_OW 517
36845: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36846: LD_ADDR_VAR 0 5
36850: PUSH
36851: DOUBLE
36852: LD_INT 1
36854: DEC
36855: ST_TO_ADDR
36856: LD_VAR 0 6
36860: PUSH
36861: LD_INT 1
36863: ARRAY
36864: PUSH
36865: FOR_TO
36866: IFFALSE 36988
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36868: LD_ADDR_VAR 0 7
36872: PUSH
36873: LD_VAR 0 6
36877: PUSH
36878: LD_INT 1
36880: ARRAY
36881: PUSH
36882: LD_VAR 0 5
36886: ARRAY
36887: PUSH
36888: LD_VAR 0 6
36892: PUSH
36893: LD_INT 2
36895: ARRAY
36896: PUSH
36897: LD_VAR 0 5
36901: ARRAY
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
36907: LD_VAR 0 7
36911: PUSH
36912: LD_INT 1
36914: ARRAY
36915: PPUSH
36916: LD_VAR 0 7
36920: PUSH
36921: LD_INT 2
36923: ARRAY
36924: PPUSH
36925: CALL_OW 428
36929: PUSH
36930: LD_INT 0
36932: EQUAL
36933: IFFALSE 36986
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
36935: LD_VAR 0 1
36939: PPUSH
36940: LD_VAR 0 7
36944: PUSH
36945: LD_INT 1
36947: ARRAY
36948: PPUSH
36949: LD_VAR 0 7
36953: PUSH
36954: LD_INT 2
36956: ARRAY
36957: PPUSH
36958: LD_VAR 0 3
36962: PPUSH
36963: CALL_OW 48
// result := IsPlaced ( unit ) ;
36967: LD_ADDR_VAR 0 4
36971: PUSH
36972: LD_VAR 0 1
36976: PPUSH
36977: CALL_OW 305
36981: ST_TO_ADDR
// exit ;
36982: POP
36983: POP
36984: GO 36990
// end ; end ;
36986: GO 36865
36988: POP
36989: POP
// end ;
36990: LD_VAR 0 4
36994: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
36995: LD_INT 0
36997: PPUSH
36998: PPUSH
36999: PPUSH
// if not side or side > 8 then
37000: LD_VAR 0 1
37004: NOT
37005: PUSH
37006: LD_VAR 0 1
37010: PUSH
37011: LD_INT 8
37013: GREATER
37014: OR
37015: IFFALSE 37019
// exit ;
37017: GO 37206
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37019: LD_ADDR_VAR 0 4
37023: PUSH
37024: LD_INT 22
37026: PUSH
37027: LD_VAR 0 1
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 21
37038: PUSH
37039: LD_INT 3
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PPUSH
37050: CALL_OW 69
37054: ST_TO_ADDR
// if not tmp then
37055: LD_VAR 0 4
37059: NOT
37060: IFFALSE 37064
// exit ;
37062: GO 37206
// enable_addtolog := true ;
37064: LD_ADDR_OWVAR 81
37068: PUSH
37069: LD_INT 1
37071: ST_TO_ADDR
// AddToLog ( [ ) ;
37072: LD_STRING [
37074: PPUSH
37075: CALL_OW 561
// for i in tmp do
37079: LD_ADDR_VAR 0 3
37083: PUSH
37084: LD_VAR 0 4
37088: PUSH
37089: FOR_IN
37090: IFFALSE 37197
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37092: LD_STRING [
37094: PUSH
37095: LD_VAR 0 3
37099: PPUSH
37100: CALL_OW 266
37104: STR
37105: PUSH
37106: LD_STRING , 
37108: STR
37109: PUSH
37110: LD_VAR 0 3
37114: PPUSH
37115: CALL_OW 250
37119: STR
37120: PUSH
37121: LD_STRING , 
37123: STR
37124: PUSH
37125: LD_VAR 0 3
37129: PPUSH
37130: CALL_OW 251
37134: STR
37135: PUSH
37136: LD_STRING , 
37138: STR
37139: PUSH
37140: LD_VAR 0 3
37144: PPUSH
37145: CALL_OW 254
37149: STR
37150: PUSH
37151: LD_STRING , 
37153: STR
37154: PUSH
37155: LD_VAR 0 3
37159: PPUSH
37160: LD_INT 1
37162: PPUSH
37163: CALL_OW 268
37167: STR
37168: PUSH
37169: LD_STRING , 
37171: STR
37172: PUSH
37173: LD_VAR 0 3
37177: PPUSH
37178: LD_INT 2
37180: PPUSH
37181: CALL_OW 268
37185: STR
37186: PUSH
37187: LD_STRING ],
37189: STR
37190: PPUSH
37191: CALL_OW 561
// end ;
37195: GO 37089
37197: POP
37198: POP
// AddToLog ( ]; ) ;
37199: LD_STRING ];
37201: PPUSH
37202: CALL_OW 561
// end ;
37206: LD_VAR 0 2
37210: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37211: LD_INT 0
37213: PPUSH
37214: PPUSH
37215: PPUSH
37216: PPUSH
37217: PPUSH
// if not area or not rate or not max then
37218: LD_VAR 0 1
37222: NOT
37223: PUSH
37224: LD_VAR 0 2
37228: NOT
37229: OR
37230: PUSH
37231: LD_VAR 0 4
37235: NOT
37236: OR
37237: IFFALSE 37241
// exit ;
37239: GO 37430
// while 1 do
37241: LD_INT 1
37243: IFFALSE 37430
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37245: LD_ADDR_VAR 0 9
37249: PUSH
37250: LD_VAR 0 1
37254: PPUSH
37255: LD_INT 1
37257: PPUSH
37258: CALL_OW 287
37262: PUSH
37263: LD_INT 10
37265: MUL
37266: ST_TO_ADDR
// r := rate / 10 ;
37267: LD_ADDR_VAR 0 7
37271: PUSH
37272: LD_VAR 0 2
37276: PUSH
37277: LD_INT 10
37279: DIVREAL
37280: ST_TO_ADDR
// time := 1 1$00 ;
37281: LD_ADDR_VAR 0 8
37285: PUSH
37286: LD_INT 2100
37288: ST_TO_ADDR
// if amount < min then
37289: LD_VAR 0 9
37293: PUSH
37294: LD_VAR 0 3
37298: LESS
37299: IFFALSE 37317
// r := r * 2 else
37301: LD_ADDR_VAR 0 7
37305: PUSH
37306: LD_VAR 0 7
37310: PUSH
37311: LD_INT 2
37313: MUL
37314: ST_TO_ADDR
37315: GO 37343
// if amount > max then
37317: LD_VAR 0 9
37321: PUSH
37322: LD_VAR 0 4
37326: GREATER
37327: IFFALSE 37343
// r := r / 2 ;
37329: LD_ADDR_VAR 0 7
37333: PUSH
37334: LD_VAR 0 7
37338: PUSH
37339: LD_INT 2
37341: DIVREAL
37342: ST_TO_ADDR
// time := time / r ;
37343: LD_ADDR_VAR 0 8
37347: PUSH
37348: LD_VAR 0 8
37352: PUSH
37353: LD_VAR 0 7
37357: DIVREAL
37358: ST_TO_ADDR
// if time < 0 then
37359: LD_VAR 0 8
37363: PUSH
37364: LD_INT 0
37366: LESS
37367: IFFALSE 37384
// time := time * - 1 ;
37369: LD_ADDR_VAR 0 8
37373: PUSH
37374: LD_VAR 0 8
37378: PUSH
37379: LD_INT 1
37381: NEG
37382: MUL
37383: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37384: LD_VAR 0 8
37388: PUSH
37389: LD_INT 35
37391: PPUSH
37392: LD_INT 875
37394: PPUSH
37395: CALL_OW 12
37399: PLUS
37400: PPUSH
37401: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37405: LD_INT 1
37407: PPUSH
37408: LD_INT 5
37410: PPUSH
37411: CALL_OW 12
37415: PPUSH
37416: LD_VAR 0 1
37420: PPUSH
37421: LD_INT 1
37423: PPUSH
37424: CALL_OW 55
// end ;
37428: GO 37241
// end ;
37430: LD_VAR 0 5
37434: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37435: LD_INT 0
37437: PPUSH
37438: PPUSH
37439: PPUSH
37440: PPUSH
37441: PPUSH
37442: PPUSH
37443: PPUSH
37444: PPUSH
// if not turrets or not factories then
37445: LD_VAR 0 1
37449: NOT
37450: PUSH
37451: LD_VAR 0 2
37455: NOT
37456: OR
37457: IFFALSE 37461
// exit ;
37459: GO 37768
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37461: LD_ADDR_VAR 0 10
37465: PUSH
37466: LD_INT 5
37468: PUSH
37469: LD_INT 6
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 2
37478: PUSH
37479: LD_INT 4
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 3
37488: PUSH
37489: LD_INT 5
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 24
37503: PUSH
37504: LD_INT 25
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 23
37513: PUSH
37514: LD_INT 27
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 42
37527: PUSH
37528: LD_INT 43
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 44
37537: PUSH
37538: LD_INT 46
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 45
37547: PUSH
37548: LD_INT 47
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: LIST
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: LIST
37564: ST_TO_ADDR
// result := [ ] ;
37565: LD_ADDR_VAR 0 3
37569: PUSH
37570: EMPTY
37571: ST_TO_ADDR
// for i in turrets do
37572: LD_ADDR_VAR 0 4
37576: PUSH
37577: LD_VAR 0 1
37581: PUSH
37582: FOR_IN
37583: IFFALSE 37766
// begin nat := GetNation ( i ) ;
37585: LD_ADDR_VAR 0 7
37589: PUSH
37590: LD_VAR 0 4
37594: PPUSH
37595: CALL_OW 248
37599: ST_TO_ADDR
// weapon := 0 ;
37600: LD_ADDR_VAR 0 8
37604: PUSH
37605: LD_INT 0
37607: ST_TO_ADDR
// if not nat then
37608: LD_VAR 0 7
37612: NOT
37613: IFFALSE 37617
// continue ;
37615: GO 37582
// for j in list [ nat ] do
37617: LD_ADDR_VAR 0 5
37621: PUSH
37622: LD_VAR 0 10
37626: PUSH
37627: LD_VAR 0 7
37631: ARRAY
37632: PUSH
37633: FOR_IN
37634: IFFALSE 37675
// if GetBWeapon ( i ) = j [ 1 ] then
37636: LD_VAR 0 4
37640: PPUSH
37641: CALL_OW 269
37645: PUSH
37646: LD_VAR 0 5
37650: PUSH
37651: LD_INT 1
37653: ARRAY
37654: EQUAL
37655: IFFALSE 37673
// begin weapon := j [ 2 ] ;
37657: LD_ADDR_VAR 0 8
37661: PUSH
37662: LD_VAR 0 5
37666: PUSH
37667: LD_INT 2
37669: ARRAY
37670: ST_TO_ADDR
// break ;
37671: GO 37675
// end ;
37673: GO 37633
37675: POP
37676: POP
// if not weapon then
37677: LD_VAR 0 8
37681: NOT
37682: IFFALSE 37686
// continue ;
37684: GO 37582
// for k in factories do
37686: LD_ADDR_VAR 0 6
37690: PUSH
37691: LD_VAR 0 2
37695: PUSH
37696: FOR_IN
37697: IFFALSE 37762
// begin weapons := AvailableWeaponList ( k ) ;
37699: LD_ADDR_VAR 0 9
37703: PUSH
37704: LD_VAR 0 6
37708: PPUSH
37709: CALL_OW 478
37713: ST_TO_ADDR
// if not weapons then
37714: LD_VAR 0 9
37718: NOT
37719: IFFALSE 37723
// continue ;
37721: GO 37696
// if weapon in weapons then
37723: LD_VAR 0 8
37727: PUSH
37728: LD_VAR 0 9
37732: IN
37733: IFFALSE 37760
// begin result := [ i , weapon ] ;
37735: LD_ADDR_VAR 0 3
37739: PUSH
37740: LD_VAR 0 4
37744: PUSH
37745: LD_VAR 0 8
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: ST_TO_ADDR
// exit ;
37754: POP
37755: POP
37756: POP
37757: POP
37758: GO 37768
// end ; end ;
37760: GO 37696
37762: POP
37763: POP
// end ;
37764: GO 37582
37766: POP
37767: POP
// end ;
37768: LD_VAR 0 3
37772: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37773: LD_INT 0
37775: PPUSH
// if not side or side > 8 then
37776: LD_VAR 0 3
37780: NOT
37781: PUSH
37782: LD_VAR 0 3
37786: PUSH
37787: LD_INT 8
37789: GREATER
37790: OR
37791: IFFALSE 37795
// exit ;
37793: GO 37854
// if not range then
37795: LD_VAR 0 4
37799: NOT
37800: IFFALSE 37811
// range := - 12 ;
37802: LD_ADDR_VAR 0 4
37806: PUSH
37807: LD_INT 12
37809: NEG
37810: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37811: LD_VAR 0 1
37815: PPUSH
37816: LD_VAR 0 2
37820: PPUSH
37821: LD_VAR 0 3
37825: PPUSH
37826: LD_VAR 0 4
37830: PPUSH
37831: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37835: LD_VAR 0 1
37839: PPUSH
37840: LD_VAR 0 2
37844: PPUSH
37845: LD_VAR 0 3
37849: PPUSH
37850: CALL_OW 331
// end ;
37854: LD_VAR 0 5
37858: RET
// export function Video ( mode ) ; begin
37859: LD_INT 0
37861: PPUSH
// ingame_video = mode ;
37862: LD_ADDR_OWVAR 52
37866: PUSH
37867: LD_VAR 0 1
37871: ST_TO_ADDR
// interface_hidden = mode ;
37872: LD_ADDR_OWVAR 54
37876: PUSH
37877: LD_VAR 0 1
37881: ST_TO_ADDR
// end ;
37882: LD_VAR 0 2
37886: RET
// export function Join ( array , element ) ; begin
37887: LD_INT 0
37889: PPUSH
// result := Replace ( array , array + 1 , element ) ;
37890: LD_ADDR_VAR 0 3
37894: PUSH
37895: LD_VAR 0 1
37899: PPUSH
37900: LD_VAR 0 1
37904: PUSH
37905: LD_INT 1
37907: PLUS
37908: PPUSH
37909: LD_VAR 0 2
37913: PPUSH
37914: CALL_OW 1
37918: ST_TO_ADDR
// end ;
37919: LD_VAR 0 3
37923: RET
// export function JoinUnion ( array , element ) ; begin
37924: LD_INT 0
37926: PPUSH
// result := array union element ;
37927: LD_ADDR_VAR 0 3
37931: PUSH
37932: LD_VAR 0 1
37936: PUSH
37937: LD_VAR 0 2
37941: UNION
37942: ST_TO_ADDR
// end ;
37943: LD_VAR 0 3
37947: RET
// export function GetBehemoths ( side ) ; begin
37948: LD_INT 0
37950: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
37951: LD_ADDR_VAR 0 2
37955: PUSH
37956: LD_INT 22
37958: PUSH
37959: LD_VAR 0 1
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 31
37970: PUSH
37971: LD_INT 25
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PPUSH
37982: CALL_OW 69
37986: ST_TO_ADDR
// end ;
37987: LD_VAR 0 2
37991: RET
// export function Shuffle ( array ) ; var i , index ; begin
37992: LD_INT 0
37994: PPUSH
37995: PPUSH
37996: PPUSH
// result := [ ] ;
37997: LD_ADDR_VAR 0 2
38001: PUSH
38002: EMPTY
38003: ST_TO_ADDR
// if not array then
38004: LD_VAR 0 1
38008: NOT
38009: IFFALSE 38013
// exit ;
38011: GO 38112
// Randomize ;
38013: CALL_OW 10
// for i = array downto 1 do
38017: LD_ADDR_VAR 0 3
38021: PUSH
38022: DOUBLE
38023: LD_VAR 0 1
38027: INC
38028: ST_TO_ADDR
38029: LD_INT 1
38031: PUSH
38032: FOR_DOWNTO
38033: IFFALSE 38110
// begin index := rand ( 1 , array ) ;
38035: LD_ADDR_VAR 0 4
38039: PUSH
38040: LD_INT 1
38042: PPUSH
38043: LD_VAR 0 1
38047: PPUSH
38048: CALL_OW 12
38052: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38053: LD_ADDR_VAR 0 2
38057: PUSH
38058: LD_VAR 0 2
38062: PPUSH
38063: LD_VAR 0 2
38067: PUSH
38068: LD_INT 1
38070: PLUS
38071: PPUSH
38072: LD_VAR 0 1
38076: PUSH
38077: LD_VAR 0 4
38081: ARRAY
38082: PPUSH
38083: CALL_OW 2
38087: ST_TO_ADDR
// array := Delete ( array , index ) ;
38088: LD_ADDR_VAR 0 1
38092: PUSH
38093: LD_VAR 0 1
38097: PPUSH
38098: LD_VAR 0 4
38102: PPUSH
38103: CALL_OW 3
38107: ST_TO_ADDR
// end ;
38108: GO 38032
38110: POP
38111: POP
// end ;
38112: LD_VAR 0 2
38116: RET
// export function GetBaseMaterials ( base ) ; begin
38117: LD_INT 0
38119: PPUSH
// result := [ 0 , 0 , 0 ] ;
38120: LD_ADDR_VAR 0 2
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: LD_INT 0
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: LIST
38138: ST_TO_ADDR
// if not base then
38139: LD_VAR 0 1
38143: NOT
38144: IFFALSE 38148
// exit ;
38146: GO 38197
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38148: LD_ADDR_VAR 0 2
38152: PUSH
38153: LD_VAR 0 1
38157: PPUSH
38158: LD_INT 1
38160: PPUSH
38161: CALL_OW 275
38165: PUSH
38166: LD_VAR 0 1
38170: PPUSH
38171: LD_INT 2
38173: PPUSH
38174: CALL_OW 275
38178: PUSH
38179: LD_VAR 0 1
38183: PPUSH
38184: LD_INT 3
38186: PPUSH
38187: CALL_OW 275
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: LIST
38196: ST_TO_ADDR
// end ;
38197: LD_VAR 0 2
38201: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38202: LD_INT 0
38204: PPUSH
38205: PPUSH
// result := array ;
38206: LD_ADDR_VAR 0 3
38210: PUSH
38211: LD_VAR 0 1
38215: ST_TO_ADDR
// if size > 0 then
38216: LD_VAR 0 2
38220: PUSH
38221: LD_INT 0
38223: GREATER
38224: IFFALSE 38270
// for i := array downto size do
38226: LD_ADDR_VAR 0 4
38230: PUSH
38231: DOUBLE
38232: LD_VAR 0 1
38236: INC
38237: ST_TO_ADDR
38238: LD_VAR 0 2
38242: PUSH
38243: FOR_DOWNTO
38244: IFFALSE 38268
// result := Delete ( result , result ) ;
38246: LD_ADDR_VAR 0 3
38250: PUSH
38251: LD_VAR 0 3
38255: PPUSH
38256: LD_VAR 0 3
38260: PPUSH
38261: CALL_OW 3
38265: ST_TO_ADDR
38266: GO 38243
38268: POP
38269: POP
// end ;
38270: LD_VAR 0 3
38274: RET
// export function ComExit ( unit ) ; var tmp ; begin
38275: LD_INT 0
38277: PPUSH
38278: PPUSH
// if not IsInUnit ( unit ) then
38279: LD_VAR 0 1
38283: PPUSH
38284: CALL_OW 310
38288: NOT
38289: IFFALSE 38293
// exit ;
38291: GO 38353
// tmp := IsInUnit ( unit ) ;
38293: LD_ADDR_VAR 0 3
38297: PUSH
38298: LD_VAR 0 1
38302: PPUSH
38303: CALL_OW 310
38307: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38308: LD_VAR 0 3
38312: PPUSH
38313: CALL_OW 247
38317: PUSH
38318: LD_INT 2
38320: EQUAL
38321: IFFALSE 38334
// ComExitVehicle ( unit ) else
38323: LD_VAR 0 1
38327: PPUSH
38328: CALL_OW 121
38332: GO 38343
// ComExitBuilding ( unit ) ;
38334: LD_VAR 0 1
38338: PPUSH
38339: CALL_OW 122
// result := tmp ;
38343: LD_ADDR_VAR 0 2
38347: PUSH
38348: LD_VAR 0 3
38352: ST_TO_ADDR
// end ;
38353: LD_VAR 0 2
38357: RET
// export function ComExitAll ( units ) ; var i ; begin
38358: LD_INT 0
38360: PPUSH
38361: PPUSH
// if not units then
38362: LD_VAR 0 1
38366: NOT
38367: IFFALSE 38371
// exit ;
38369: GO 38397
// for i in units do
38371: LD_ADDR_VAR 0 3
38375: PUSH
38376: LD_VAR 0 1
38380: PUSH
38381: FOR_IN
38382: IFFALSE 38395
// ComExit ( i ) ;
38384: LD_VAR 0 3
38388: PPUSH
38389: CALL 38275 0 1
38393: GO 38381
38395: POP
38396: POP
// end ;
38397: LD_VAR 0 2
38401: RET
// export function ResetHc ; begin
38402: LD_INT 0
38404: PPUSH
// InitHc ;
38405: CALL_OW 19
// hc_importance := 0 ;
38409: LD_ADDR_OWVAR 32
38413: PUSH
38414: LD_INT 0
38416: ST_TO_ADDR
// end ;
38417: LD_VAR 0 1
38421: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38422: LD_INT 0
38424: PPUSH
38425: PPUSH
38426: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38427: LD_ADDR_VAR 0 6
38431: PUSH
38432: LD_VAR 0 1
38436: PUSH
38437: LD_VAR 0 3
38441: PLUS
38442: PUSH
38443: LD_INT 2
38445: DIV
38446: ST_TO_ADDR
// if _x < 0 then
38447: LD_VAR 0 6
38451: PUSH
38452: LD_INT 0
38454: LESS
38455: IFFALSE 38472
// _x := _x * - 1 ;
38457: LD_ADDR_VAR 0 6
38461: PUSH
38462: LD_VAR 0 6
38466: PUSH
38467: LD_INT 1
38469: NEG
38470: MUL
38471: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38472: LD_ADDR_VAR 0 7
38476: PUSH
38477: LD_VAR 0 2
38481: PUSH
38482: LD_VAR 0 4
38486: PLUS
38487: PUSH
38488: LD_INT 2
38490: DIV
38491: ST_TO_ADDR
// if _y < 0 then
38492: LD_VAR 0 7
38496: PUSH
38497: LD_INT 0
38499: LESS
38500: IFFALSE 38517
// _y := _y * - 1 ;
38502: LD_ADDR_VAR 0 7
38506: PUSH
38507: LD_VAR 0 7
38511: PUSH
38512: LD_INT 1
38514: NEG
38515: MUL
38516: ST_TO_ADDR
// result := [ _x , _y ] ;
38517: LD_ADDR_VAR 0 5
38521: PUSH
38522: LD_VAR 0 6
38526: PUSH
38527: LD_VAR 0 7
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: ST_TO_ADDR
// end ;
38536: LD_VAR 0 5
38540: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38541: LD_INT 0
38543: PPUSH
38544: PPUSH
38545: PPUSH
38546: PPUSH
// task := GetTaskList ( unit ) ;
38547: LD_ADDR_VAR 0 7
38551: PUSH
38552: LD_VAR 0 1
38556: PPUSH
38557: CALL_OW 437
38561: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38562: LD_VAR 0 7
38566: NOT
38567: PUSH
38568: LD_VAR 0 1
38572: PPUSH
38573: LD_VAR 0 2
38577: PPUSH
38578: CALL_OW 308
38582: NOT
38583: AND
38584: IFFALSE 38588
// exit ;
38586: GO 38706
// if IsInArea ( unit , area ) then
38588: LD_VAR 0 1
38592: PPUSH
38593: LD_VAR 0 2
38597: PPUSH
38598: CALL_OW 308
38602: IFFALSE 38620
// begin ComMoveToArea ( unit , goAway ) ;
38604: LD_VAR 0 1
38608: PPUSH
38609: LD_VAR 0 3
38613: PPUSH
38614: CALL_OW 113
// exit ;
38618: GO 38706
// end ; if task [ 1 ] [ 1 ] <> M then
38620: LD_VAR 0 7
38624: PUSH
38625: LD_INT 1
38627: ARRAY
38628: PUSH
38629: LD_INT 1
38631: ARRAY
38632: PUSH
38633: LD_STRING M
38635: NONEQUAL
38636: IFFALSE 38640
// exit ;
38638: GO 38706
// x := task [ 1 ] [ 2 ] ;
38640: LD_ADDR_VAR 0 5
38644: PUSH
38645: LD_VAR 0 7
38649: PUSH
38650: LD_INT 1
38652: ARRAY
38653: PUSH
38654: LD_INT 2
38656: ARRAY
38657: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38658: LD_ADDR_VAR 0 6
38662: PUSH
38663: LD_VAR 0 7
38667: PUSH
38668: LD_INT 1
38670: ARRAY
38671: PUSH
38672: LD_INT 3
38674: ARRAY
38675: ST_TO_ADDR
// if InArea ( x , y , area ) then
38676: LD_VAR 0 5
38680: PPUSH
38681: LD_VAR 0 6
38685: PPUSH
38686: LD_VAR 0 2
38690: PPUSH
38691: CALL_OW 309
38695: IFFALSE 38706
// ComStop ( unit ) ;
38697: LD_VAR 0 1
38701: PPUSH
38702: CALL_OW 141
// end ;
38706: LD_VAR 0 4
38710: RET
// export function Abs ( value ) ; begin
38711: LD_INT 0
38713: PPUSH
// result := value ;
38714: LD_ADDR_VAR 0 2
38718: PUSH
38719: LD_VAR 0 1
38723: ST_TO_ADDR
// if value < 0 then
38724: LD_VAR 0 1
38728: PUSH
38729: LD_INT 0
38731: LESS
38732: IFFALSE 38749
// result := value * - 1 ;
38734: LD_ADDR_VAR 0 2
38738: PUSH
38739: LD_VAR 0 1
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: MUL
38748: ST_TO_ADDR
// end ;
38749: LD_VAR 0 2
38753: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38754: LD_INT 0
38756: PPUSH
38757: PPUSH
38758: PPUSH
38759: PPUSH
38760: PPUSH
38761: PPUSH
38762: PPUSH
38763: PPUSH
// if not unit or not building then
38764: LD_VAR 0 1
38768: NOT
38769: PUSH
38770: LD_VAR 0 2
38774: NOT
38775: OR
38776: IFFALSE 38780
// exit ;
38778: GO 39006
// x := GetX ( building ) ;
38780: LD_ADDR_VAR 0 4
38784: PUSH
38785: LD_VAR 0 2
38789: PPUSH
38790: CALL_OW 250
38794: ST_TO_ADDR
// y := GetY ( building ) ;
38795: LD_ADDR_VAR 0 6
38799: PUSH
38800: LD_VAR 0 2
38804: PPUSH
38805: CALL_OW 251
38809: ST_TO_ADDR
// d := GetDir ( building ) ;
38810: LD_ADDR_VAR 0 8
38814: PUSH
38815: LD_VAR 0 2
38819: PPUSH
38820: CALL_OW 254
38824: ST_TO_ADDR
// r := 4 ;
38825: LD_ADDR_VAR 0 9
38829: PUSH
38830: LD_INT 4
38832: ST_TO_ADDR
// for i := 1 to 5 do
38833: LD_ADDR_VAR 0 10
38837: PUSH
38838: DOUBLE
38839: LD_INT 1
38841: DEC
38842: ST_TO_ADDR
38843: LD_INT 5
38845: PUSH
38846: FOR_TO
38847: IFFALSE 39004
// begin _x := ShiftX ( x , d , r + i ) ;
38849: LD_ADDR_VAR 0 5
38853: PUSH
38854: LD_VAR 0 4
38858: PPUSH
38859: LD_VAR 0 8
38863: PPUSH
38864: LD_VAR 0 9
38868: PUSH
38869: LD_VAR 0 10
38873: PLUS
38874: PPUSH
38875: CALL_OW 272
38879: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
38880: LD_ADDR_VAR 0 7
38884: PUSH
38885: LD_VAR 0 6
38889: PPUSH
38890: LD_VAR 0 8
38894: PPUSH
38895: LD_VAR 0 9
38899: PUSH
38900: LD_VAR 0 10
38904: PLUS
38905: PPUSH
38906: CALL_OW 273
38910: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
38911: LD_VAR 0 5
38915: PPUSH
38916: LD_VAR 0 7
38920: PPUSH
38921: CALL_OW 488
38925: PUSH
38926: LD_VAR 0 5
38930: PPUSH
38931: LD_VAR 0 7
38935: PPUSH
38936: CALL_OW 428
38940: PPUSH
38941: CALL_OW 247
38945: PUSH
38946: LD_INT 3
38948: PUSH
38949: LD_INT 2
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: IN
38956: NOT
38957: AND
38958: IFFALSE 39002
// begin ComMoveXY ( unit , _x , _y ) ;
38960: LD_VAR 0 1
38964: PPUSH
38965: LD_VAR 0 5
38969: PPUSH
38970: LD_VAR 0 7
38974: PPUSH
38975: CALL_OW 111
// result := [ _x , _y ] ;
38979: LD_ADDR_VAR 0 3
38983: PUSH
38984: LD_VAR 0 5
38988: PUSH
38989: LD_VAR 0 7
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: ST_TO_ADDR
// exit ;
38998: POP
38999: POP
39000: GO 39006
// end ; end ;
39002: GO 38846
39004: POP
39005: POP
// end ;
39006: LD_VAR 0 3
39010: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39011: LD_INT 0
39013: PPUSH
39014: PPUSH
39015: PPUSH
// result := 0 ;
39016: LD_ADDR_VAR 0 3
39020: PUSH
39021: LD_INT 0
39023: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39024: LD_VAR 0 1
39028: PUSH
39029: LD_INT 0
39031: LESS
39032: PUSH
39033: LD_VAR 0 1
39037: PUSH
39038: LD_INT 8
39040: GREATER
39041: OR
39042: PUSH
39043: LD_VAR 0 2
39047: PUSH
39048: LD_INT 0
39050: LESS
39051: OR
39052: PUSH
39053: LD_VAR 0 2
39057: PUSH
39058: LD_INT 8
39060: GREATER
39061: OR
39062: IFFALSE 39066
// exit ;
39064: GO 39141
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39066: LD_ADDR_VAR 0 4
39070: PUSH
39071: LD_INT 22
39073: PUSH
39074: LD_VAR 0 2
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PPUSH
39083: CALL_OW 69
39087: PUSH
39088: FOR_IN
39089: IFFALSE 39139
// begin un := UnitShoot ( i ) ;
39091: LD_ADDR_VAR 0 5
39095: PUSH
39096: LD_VAR 0 4
39100: PPUSH
39101: CALL_OW 504
39105: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39106: LD_VAR 0 5
39110: PPUSH
39111: CALL_OW 255
39115: PUSH
39116: LD_VAR 0 1
39120: EQUAL
39121: IFFALSE 39137
// begin result := un ;
39123: LD_ADDR_VAR 0 3
39127: PUSH
39128: LD_VAR 0 5
39132: ST_TO_ADDR
// exit ;
39133: POP
39134: POP
39135: GO 39141
// end ; end ;
39137: GO 39088
39139: POP
39140: POP
// end ;
39141: LD_VAR 0 3
39145: RET
// export function GetCargoBay ( units ) ; begin
39146: LD_INT 0
39148: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39149: LD_ADDR_VAR 0 2
39153: PUSH
39154: LD_VAR 0 1
39158: PPUSH
39159: LD_INT 2
39161: PUSH
39162: LD_INT 34
39164: PUSH
39165: LD_INT 12
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 34
39174: PUSH
39175: LD_INT 51
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 34
39184: PUSH
39185: LD_INT 32
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 34
39194: PUSH
39195: LD_EXP 17
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: PPUSH
39211: CALL_OW 72
39215: ST_TO_ADDR
// end ;
39216: LD_VAR 0 2
39220: RET
// export function Negate ( value ) ; begin
39221: LD_INT 0
39223: PPUSH
// result := not value ;
39224: LD_ADDR_VAR 0 2
39228: PUSH
39229: LD_VAR 0 1
39233: NOT
39234: ST_TO_ADDR
// end ;
39235: LD_VAR 0 2
39239: RET
// export function Inc ( value ) ; begin
39240: LD_INT 0
39242: PPUSH
// result := value + 1 ;
39243: LD_ADDR_VAR 0 2
39247: PUSH
39248: LD_VAR 0 1
39252: PUSH
39253: LD_INT 1
39255: PLUS
39256: ST_TO_ADDR
// end ;
39257: LD_VAR 0 2
39261: RET
// export function Dec ( value ) ; begin
39262: LD_INT 0
39264: PPUSH
// result := value - 1 ;
39265: LD_ADDR_VAR 0 2
39269: PUSH
39270: LD_VAR 0 1
39274: PUSH
39275: LD_INT 1
39277: MINUS
39278: ST_TO_ADDR
// end ;
39279: LD_VAR 0 2
39283: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39284: LD_INT 0
39286: PPUSH
39287: PPUSH
39288: PPUSH
39289: PPUSH
39290: PPUSH
39291: PPUSH
39292: PPUSH
39293: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39294: LD_VAR 0 1
39298: PPUSH
39299: LD_VAR 0 2
39303: PPUSH
39304: CALL_OW 488
39308: NOT
39309: PUSH
39310: LD_VAR 0 3
39314: PPUSH
39315: LD_VAR 0 4
39319: PPUSH
39320: CALL_OW 488
39324: NOT
39325: OR
39326: IFFALSE 39339
// begin result := - 1 ;
39328: LD_ADDR_VAR 0 5
39332: PUSH
39333: LD_INT 1
39335: NEG
39336: ST_TO_ADDR
// exit ;
39337: GO 39574
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39339: LD_ADDR_VAR 0 12
39343: PUSH
39344: LD_VAR 0 1
39348: PPUSH
39349: LD_VAR 0 2
39353: PPUSH
39354: LD_VAR 0 3
39358: PPUSH
39359: LD_VAR 0 4
39363: PPUSH
39364: CALL 38422 0 4
39368: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39369: LD_ADDR_VAR 0 11
39373: PUSH
39374: LD_VAR 0 1
39378: PPUSH
39379: LD_VAR 0 2
39383: PPUSH
39384: LD_VAR 0 12
39388: PUSH
39389: LD_INT 1
39391: ARRAY
39392: PPUSH
39393: LD_VAR 0 12
39397: PUSH
39398: LD_INT 2
39400: ARRAY
39401: PPUSH
39402: CALL_OW 298
39406: ST_TO_ADDR
// distance := 9999 ;
39407: LD_ADDR_VAR 0 10
39411: PUSH
39412: LD_INT 9999
39414: ST_TO_ADDR
// for i := 0 to 5 do
39415: LD_ADDR_VAR 0 6
39419: PUSH
39420: DOUBLE
39421: LD_INT 0
39423: DEC
39424: ST_TO_ADDR
39425: LD_INT 5
39427: PUSH
39428: FOR_TO
39429: IFFALSE 39572
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39431: LD_ADDR_VAR 0 7
39435: PUSH
39436: LD_VAR 0 1
39440: PPUSH
39441: LD_VAR 0 6
39445: PPUSH
39446: LD_VAR 0 11
39450: PPUSH
39451: CALL_OW 272
39455: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39456: LD_ADDR_VAR 0 8
39460: PUSH
39461: LD_VAR 0 2
39465: PPUSH
39466: LD_VAR 0 6
39470: PPUSH
39471: LD_VAR 0 11
39475: PPUSH
39476: CALL_OW 273
39480: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39481: LD_VAR 0 7
39485: PPUSH
39486: LD_VAR 0 8
39490: PPUSH
39491: CALL_OW 488
39495: NOT
39496: IFFALSE 39500
// continue ;
39498: GO 39428
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39500: LD_ADDR_VAR 0 9
39504: PUSH
39505: LD_VAR 0 12
39509: PUSH
39510: LD_INT 1
39512: ARRAY
39513: PPUSH
39514: LD_VAR 0 12
39518: PUSH
39519: LD_INT 2
39521: ARRAY
39522: PPUSH
39523: LD_VAR 0 7
39527: PPUSH
39528: LD_VAR 0 8
39532: PPUSH
39533: CALL_OW 298
39537: ST_TO_ADDR
// if tmp < distance then
39538: LD_VAR 0 9
39542: PUSH
39543: LD_VAR 0 10
39547: LESS
39548: IFFALSE 39570
// begin result := i ;
39550: LD_ADDR_VAR 0 5
39554: PUSH
39555: LD_VAR 0 6
39559: ST_TO_ADDR
// distance := tmp ;
39560: LD_ADDR_VAR 0 10
39564: PUSH
39565: LD_VAR 0 9
39569: ST_TO_ADDR
// end ; end ;
39570: GO 39428
39572: POP
39573: POP
// end ;
39574: LD_VAR 0 5
39578: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39579: LD_INT 0
39581: PPUSH
39582: PPUSH
// if not driver or not IsInUnit ( driver ) then
39583: LD_VAR 0 1
39587: NOT
39588: PUSH
39589: LD_VAR 0 1
39593: PPUSH
39594: CALL_OW 310
39598: NOT
39599: OR
39600: IFFALSE 39604
// exit ;
39602: GO 39694
// vehicle := IsInUnit ( driver ) ;
39604: LD_ADDR_VAR 0 3
39608: PUSH
39609: LD_VAR 0 1
39613: PPUSH
39614: CALL_OW 310
39618: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39619: LD_VAR 0 1
39623: PPUSH
39624: LD_STRING \
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: PUSH
39654: LD_STRING E
39656: PUSH
39657: LD_INT 0
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: LD_VAR 0 3
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PPUSH
39690: CALL_OW 446
// end ;
39694: LD_VAR 0 2
39698: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39699: LD_INT 0
39701: PPUSH
39702: PPUSH
// if not driver or not IsInUnit ( driver ) then
39703: LD_VAR 0 1
39707: NOT
39708: PUSH
39709: LD_VAR 0 1
39713: PPUSH
39714: CALL_OW 310
39718: NOT
39719: OR
39720: IFFALSE 39724
// exit ;
39722: GO 39814
// vehicle := IsInUnit ( driver ) ;
39724: LD_ADDR_VAR 0 3
39728: PUSH
39729: LD_VAR 0 1
39733: PPUSH
39734: CALL_OW 310
39738: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39739: LD_VAR 0 1
39743: PPUSH
39744: LD_STRING \
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: LD_INT 0
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: LD_INT 0
39758: PUSH
39759: LD_INT 0
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: PUSH
39774: LD_STRING E
39776: PUSH
39777: LD_INT 0
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: LD_VAR 0 3
39787: PUSH
39788: LD_INT 0
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PPUSH
39810: CALL_OW 447
// end ;
39814: LD_VAR 0 2
39818: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39819: LD_INT 0
39821: PPUSH
39822: PPUSH
39823: PPUSH
// tmp := [ ] ;
39824: LD_ADDR_VAR 0 5
39828: PUSH
39829: EMPTY
39830: ST_TO_ADDR
// for i in units do
39831: LD_ADDR_VAR 0 4
39835: PUSH
39836: LD_VAR 0 1
39840: PUSH
39841: FOR_IN
39842: IFFALSE 39880
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39844: LD_ADDR_VAR 0 5
39848: PUSH
39849: LD_VAR 0 5
39853: PPUSH
39854: LD_VAR 0 5
39858: PUSH
39859: LD_INT 1
39861: PLUS
39862: PPUSH
39863: LD_VAR 0 4
39867: PPUSH
39868: CALL_OW 256
39872: PPUSH
39873: CALL_OW 2
39877: ST_TO_ADDR
39878: GO 39841
39880: POP
39881: POP
// if not tmp then
39882: LD_VAR 0 5
39886: NOT
39887: IFFALSE 39891
// exit ;
39889: GO 39939
// if asc then
39891: LD_VAR 0 2
39895: IFFALSE 39919
// result := SortListByListAsc ( units , tmp ) else
39897: LD_ADDR_VAR 0 3
39901: PUSH
39902: LD_VAR 0 1
39906: PPUSH
39907: LD_VAR 0 5
39911: PPUSH
39912: CALL_OW 76
39916: ST_TO_ADDR
39917: GO 39939
// result := SortListByListDesc ( units , tmp ) ;
39919: LD_ADDR_VAR 0 3
39923: PUSH
39924: LD_VAR 0 1
39928: PPUSH
39929: LD_VAR 0 5
39933: PPUSH
39934: CALL_OW 77
39938: ST_TO_ADDR
// end ;
39939: LD_VAR 0 3
39943: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
39944: LD_INT 0
39946: PPUSH
39947: PPUSH
// task := GetTaskList ( mech ) ;
39948: LD_ADDR_VAR 0 4
39952: PUSH
39953: LD_VAR 0 1
39957: PPUSH
39958: CALL_OW 437
39962: ST_TO_ADDR
// if not task then
39963: LD_VAR 0 4
39967: NOT
39968: IFFALSE 39972
// exit ;
39970: GO 40014
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
39972: LD_ADDR_VAR 0 3
39976: PUSH
39977: LD_VAR 0 4
39981: PUSH
39982: LD_INT 1
39984: ARRAY
39985: PUSH
39986: LD_INT 1
39988: ARRAY
39989: PUSH
39990: LD_STRING r
39992: EQUAL
39993: PUSH
39994: LD_VAR 0 4
39998: PUSH
39999: LD_INT 1
40001: ARRAY
40002: PUSH
40003: LD_INT 4
40005: ARRAY
40006: PUSH
40007: LD_VAR 0 2
40011: EQUAL
40012: AND
40013: ST_TO_ADDR
// end ;
40014: LD_VAR 0 3
40018: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40019: LD_INT 0
40021: PPUSH
// SetDir ( unit , d ) ;
40022: LD_VAR 0 1
40026: PPUSH
40027: LD_VAR 0 4
40031: PPUSH
40032: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40036: LD_VAR 0 1
40040: PPUSH
40041: LD_VAR 0 2
40045: PPUSH
40046: LD_VAR 0 3
40050: PPUSH
40051: LD_VAR 0 5
40055: PPUSH
40056: CALL_OW 48
// end ;
40060: LD_VAR 0 6
40064: RET
// export function ToNaturalNumber ( number ) ; begin
40065: LD_INT 0
40067: PPUSH
// result := number div 1 ;
40068: LD_ADDR_VAR 0 2
40072: PUSH
40073: LD_VAR 0 1
40077: PUSH
40078: LD_INT 1
40080: DIV
40081: ST_TO_ADDR
// if number < 0 then
40082: LD_VAR 0 1
40086: PUSH
40087: LD_INT 0
40089: LESS
40090: IFFALSE 40100
// result := 0 ;
40092: LD_ADDR_VAR 0 2
40096: PUSH
40097: LD_INT 0
40099: ST_TO_ADDR
// end ;
40100: LD_VAR 0 2
40104: RET
// export function SortByClass ( units , class ) ; var un ; begin
40105: LD_INT 0
40107: PPUSH
40108: PPUSH
// if not units or not class then
40109: LD_VAR 0 1
40113: NOT
40114: PUSH
40115: LD_VAR 0 2
40119: NOT
40120: OR
40121: IFFALSE 40125
// exit ;
40123: GO 40220
// result := [ ] ;
40125: LD_ADDR_VAR 0 3
40129: PUSH
40130: EMPTY
40131: ST_TO_ADDR
// for un in units do
40132: LD_ADDR_VAR 0 4
40136: PUSH
40137: LD_VAR 0 1
40141: PUSH
40142: FOR_IN
40143: IFFALSE 40218
// if GetClass ( un ) = class then
40145: LD_VAR 0 4
40149: PPUSH
40150: CALL_OW 257
40154: PUSH
40155: LD_VAR 0 2
40159: EQUAL
40160: IFFALSE 40187
// result := Insert ( result , 1 , un ) else
40162: LD_ADDR_VAR 0 3
40166: PUSH
40167: LD_VAR 0 3
40171: PPUSH
40172: LD_INT 1
40174: PPUSH
40175: LD_VAR 0 4
40179: PPUSH
40180: CALL_OW 2
40184: ST_TO_ADDR
40185: GO 40216
// result := Replace ( result , result + 1 , un ) ;
40187: LD_ADDR_VAR 0 3
40191: PUSH
40192: LD_VAR 0 3
40196: PPUSH
40197: LD_VAR 0 3
40201: PUSH
40202: LD_INT 1
40204: PLUS
40205: PPUSH
40206: LD_VAR 0 4
40210: PPUSH
40211: CALL_OW 1
40215: ST_TO_ADDR
40216: GO 40142
40218: POP
40219: POP
// end ;
40220: LD_VAR 0 3
40224: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40225: LD_INT 0
40227: PPUSH
40228: PPUSH
40229: PPUSH
40230: PPUSH
40231: PPUSH
40232: PPUSH
40233: PPUSH
// result := [ ] ;
40234: LD_ADDR_VAR 0 4
40238: PUSH
40239: EMPTY
40240: ST_TO_ADDR
// if x - r < 0 then
40241: LD_VAR 0 1
40245: PUSH
40246: LD_VAR 0 3
40250: MINUS
40251: PUSH
40252: LD_INT 0
40254: LESS
40255: IFFALSE 40267
// min_x := 0 else
40257: LD_ADDR_VAR 0 8
40261: PUSH
40262: LD_INT 0
40264: ST_TO_ADDR
40265: GO 40283
// min_x := x - r ;
40267: LD_ADDR_VAR 0 8
40271: PUSH
40272: LD_VAR 0 1
40276: PUSH
40277: LD_VAR 0 3
40281: MINUS
40282: ST_TO_ADDR
// if y - r < 0 then
40283: LD_VAR 0 2
40287: PUSH
40288: LD_VAR 0 3
40292: MINUS
40293: PUSH
40294: LD_INT 0
40296: LESS
40297: IFFALSE 40309
// min_y := 0 else
40299: LD_ADDR_VAR 0 7
40303: PUSH
40304: LD_INT 0
40306: ST_TO_ADDR
40307: GO 40325
// min_y := y - r ;
40309: LD_ADDR_VAR 0 7
40313: PUSH
40314: LD_VAR 0 2
40318: PUSH
40319: LD_VAR 0 3
40323: MINUS
40324: ST_TO_ADDR
// max_x := x + r ;
40325: LD_ADDR_VAR 0 9
40329: PUSH
40330: LD_VAR 0 1
40334: PUSH
40335: LD_VAR 0 3
40339: PLUS
40340: ST_TO_ADDR
// max_y := y + r ;
40341: LD_ADDR_VAR 0 10
40345: PUSH
40346: LD_VAR 0 2
40350: PUSH
40351: LD_VAR 0 3
40355: PLUS
40356: ST_TO_ADDR
// for _x = min_x to max_x do
40357: LD_ADDR_VAR 0 5
40361: PUSH
40362: DOUBLE
40363: LD_VAR 0 8
40367: DEC
40368: ST_TO_ADDR
40369: LD_VAR 0 9
40373: PUSH
40374: FOR_TO
40375: IFFALSE 40476
// for _y = min_y to max_y do
40377: LD_ADDR_VAR 0 6
40381: PUSH
40382: DOUBLE
40383: LD_VAR 0 7
40387: DEC
40388: ST_TO_ADDR
40389: LD_VAR 0 10
40393: PUSH
40394: FOR_TO
40395: IFFALSE 40472
// begin if not ValidHex ( _x , _y ) then
40397: LD_VAR 0 5
40401: PPUSH
40402: LD_VAR 0 6
40406: PPUSH
40407: CALL_OW 488
40411: NOT
40412: IFFALSE 40416
// continue ;
40414: GO 40394
// if GetResourceTypeXY ( _x , _y ) then
40416: LD_VAR 0 5
40420: PPUSH
40421: LD_VAR 0 6
40425: PPUSH
40426: CALL_OW 283
40430: IFFALSE 40470
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40432: LD_ADDR_VAR 0 4
40436: PUSH
40437: LD_VAR 0 4
40441: PPUSH
40442: LD_VAR 0 4
40446: PUSH
40447: LD_INT 1
40449: PLUS
40450: PPUSH
40451: LD_VAR 0 5
40455: PUSH
40456: LD_VAR 0 6
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PPUSH
40465: CALL_OW 1
40469: ST_TO_ADDR
// end ;
40470: GO 40394
40472: POP
40473: POP
40474: GO 40374
40476: POP
40477: POP
// end ;
40478: LD_VAR 0 4
40482: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40483: LD_INT 0
40485: PPUSH
40486: PPUSH
40487: PPUSH
40488: PPUSH
40489: PPUSH
40490: PPUSH
40491: PPUSH
40492: PPUSH
// if not units then
40493: LD_VAR 0 1
40497: NOT
40498: IFFALSE 40502
// exit ;
40500: GO 41028
// result := UnitFilter ( units , [ f_ok ] ) ;
40502: LD_ADDR_VAR 0 3
40506: PUSH
40507: LD_VAR 0 1
40511: PPUSH
40512: LD_INT 50
40514: PUSH
40515: EMPTY
40516: LIST
40517: PPUSH
40518: CALL_OW 72
40522: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40523: LD_ADDR_VAR 0 8
40527: PUSH
40528: LD_VAR 0 1
40532: PUSH
40533: LD_INT 1
40535: ARRAY
40536: PPUSH
40537: CALL_OW 255
40541: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
40542: LD_ADDR_VAR 0 10
40546: PUSH
40547: LD_INT 29
40549: PUSH
40550: LD_EXP 20
40554: PUSH
40555: LD_INT 49
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: LIST
40562: ST_TO_ADDR
// if not result then
40563: LD_VAR 0 3
40567: NOT
40568: IFFALSE 40572
// exit ;
40570: GO 41028
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40572: LD_ADDR_VAR 0 5
40576: PUSH
40577: LD_INT 81
40579: PUSH
40580: LD_VAR 0 8
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PPUSH
40589: CALL_OW 69
40593: ST_TO_ADDR
// for i in result do
40594: LD_ADDR_VAR 0 4
40598: PUSH
40599: LD_VAR 0 3
40603: PUSH
40604: FOR_IN
40605: IFFALSE 41026
// begin tag := GetTag ( i ) + 1 ;
40607: LD_ADDR_VAR 0 9
40611: PUSH
40612: LD_VAR 0 4
40616: PPUSH
40617: CALL_OW 110
40621: PUSH
40622: LD_INT 1
40624: PLUS
40625: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40626: LD_ADDR_VAR 0 7
40630: PUSH
40631: LD_VAR 0 4
40635: PPUSH
40636: CALL_OW 250
40640: PPUSH
40641: LD_VAR 0 4
40645: PPUSH
40646: CALL_OW 251
40650: PPUSH
40651: LD_INT 6
40653: PPUSH
40654: CALL 40225 0 3
40658: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40659: LD_VAR 0 4
40663: PPUSH
40664: CALL_OW 247
40668: PUSH
40669: LD_INT 2
40671: EQUAL
40672: PUSH
40673: LD_VAR 0 7
40677: AND
40678: PUSH
40679: LD_VAR 0 4
40683: PPUSH
40684: CALL_OW 264
40688: PUSH
40689: LD_VAR 0 10
40693: IN
40694: NOT
40695: AND
40696: IFFALSE 40735
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
40698: LD_VAR 0 4
40702: PPUSH
40703: LD_VAR 0 7
40707: PUSH
40708: LD_INT 1
40710: ARRAY
40711: PUSH
40712: LD_INT 1
40714: ARRAY
40715: PPUSH
40716: LD_VAR 0 7
40720: PUSH
40721: LD_INT 1
40723: ARRAY
40724: PUSH
40725: LD_INT 2
40727: ARRAY
40728: PPUSH
40729: CALL_OW 116
40733: GO 41024
// if path > tag then
40735: LD_VAR 0 2
40739: PUSH
40740: LD_VAR 0 9
40744: GREATER
40745: IFFALSE 40953
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
40747: LD_ADDR_VAR 0 6
40751: PUSH
40752: LD_VAR 0 5
40756: PPUSH
40757: LD_INT 91
40759: PUSH
40760: LD_VAR 0 4
40764: PUSH
40765: LD_INT 8
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: LIST
40772: PPUSH
40773: CALL_OW 72
40777: ST_TO_ADDR
// if nearEnemy then
40778: LD_VAR 0 6
40782: IFFALSE 40851
// begin if GetWeapon ( i ) = ru_time_lapser then
40784: LD_VAR 0 4
40788: PPUSH
40789: CALL_OW 264
40793: PUSH
40794: LD_INT 49
40796: EQUAL
40797: IFFALSE 40825
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
40799: LD_VAR 0 4
40803: PPUSH
40804: LD_VAR 0 6
40808: PPUSH
40809: LD_VAR 0 4
40813: PPUSH
40814: CALL_OW 74
40818: PPUSH
40819: CALL_OW 112
40823: GO 40849
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
40825: LD_VAR 0 4
40829: PPUSH
40830: LD_VAR 0 6
40834: PPUSH
40835: LD_VAR 0 4
40839: PPUSH
40840: CALL_OW 74
40844: PPUSH
40845: CALL_OW 115
// end else
40849: GO 40951
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
40851: LD_VAR 0 4
40855: PPUSH
40856: LD_VAR 0 2
40860: PUSH
40861: LD_VAR 0 9
40865: ARRAY
40866: PUSH
40867: LD_INT 1
40869: ARRAY
40870: PPUSH
40871: LD_VAR 0 2
40875: PUSH
40876: LD_VAR 0 9
40880: ARRAY
40881: PUSH
40882: LD_INT 2
40884: ARRAY
40885: PPUSH
40886: CALL_OW 297
40890: PUSH
40891: LD_INT 6
40893: GREATER
40894: IFFALSE 40937
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
40896: LD_VAR 0 4
40900: PPUSH
40901: LD_VAR 0 2
40905: PUSH
40906: LD_VAR 0 9
40910: ARRAY
40911: PUSH
40912: LD_INT 1
40914: ARRAY
40915: PPUSH
40916: LD_VAR 0 2
40920: PUSH
40921: LD_VAR 0 9
40925: ARRAY
40926: PUSH
40927: LD_INT 2
40929: ARRAY
40930: PPUSH
40931: CALL_OW 114
40935: GO 40951
// SetTag ( i , tag ) ;
40937: LD_VAR 0 4
40941: PPUSH
40942: LD_VAR 0 9
40946: PPUSH
40947: CALL_OW 109
// end else
40951: GO 41024
// if enemy then
40953: LD_VAR 0 5
40957: IFFALSE 41024
// begin if GetWeapon ( i ) = ru_time_lapser then
40959: LD_VAR 0 4
40963: PPUSH
40964: CALL_OW 264
40968: PUSH
40969: LD_INT 49
40971: EQUAL
40972: IFFALSE 41000
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
40974: LD_VAR 0 4
40978: PPUSH
40979: LD_VAR 0 5
40983: PPUSH
40984: LD_VAR 0 4
40988: PPUSH
40989: CALL_OW 74
40993: PPUSH
40994: CALL_OW 112
40998: GO 41024
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41000: LD_VAR 0 4
41004: PPUSH
41005: LD_VAR 0 5
41009: PPUSH
41010: LD_VAR 0 4
41014: PPUSH
41015: CALL_OW 74
41019: PPUSH
41020: CALL_OW 115
// end ; end ;
41024: GO 40604
41026: POP
41027: POP
// end ;
41028: LD_VAR 0 3
41032: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41033: LD_INT 0
41035: PPUSH
41036: PPUSH
41037: PPUSH
// if not unit or IsInUnit ( unit ) then
41038: LD_VAR 0 1
41042: NOT
41043: PUSH
41044: LD_VAR 0 1
41048: PPUSH
41049: CALL_OW 310
41053: OR
41054: IFFALSE 41058
// exit ;
41056: GO 41149
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41058: LD_ADDR_VAR 0 4
41062: PUSH
41063: LD_VAR 0 1
41067: PPUSH
41068: CALL_OW 250
41072: PPUSH
41073: LD_VAR 0 2
41077: PPUSH
41078: LD_INT 1
41080: PPUSH
41081: CALL_OW 272
41085: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41086: LD_ADDR_VAR 0 5
41090: PUSH
41091: LD_VAR 0 1
41095: PPUSH
41096: CALL_OW 251
41100: PPUSH
41101: LD_VAR 0 2
41105: PPUSH
41106: LD_INT 1
41108: PPUSH
41109: CALL_OW 273
41113: ST_TO_ADDR
// if ValidHex ( x , y ) then
41114: LD_VAR 0 4
41118: PPUSH
41119: LD_VAR 0 5
41123: PPUSH
41124: CALL_OW 488
41128: IFFALSE 41149
// ComTurnXY ( unit , x , y ) ;
41130: LD_VAR 0 1
41134: PPUSH
41135: LD_VAR 0 4
41139: PPUSH
41140: LD_VAR 0 5
41144: PPUSH
41145: CALL_OW 118
// end ;
41149: LD_VAR 0 3
41153: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41154: LD_INT 0
41156: PPUSH
41157: PPUSH
// result := false ;
41158: LD_ADDR_VAR 0 3
41162: PUSH
41163: LD_INT 0
41165: ST_TO_ADDR
// if not units then
41166: LD_VAR 0 2
41170: NOT
41171: IFFALSE 41175
// exit ;
41173: GO 41220
// for i in units do
41175: LD_ADDR_VAR 0 4
41179: PUSH
41180: LD_VAR 0 2
41184: PUSH
41185: FOR_IN
41186: IFFALSE 41218
// if See ( side , i ) then
41188: LD_VAR 0 1
41192: PPUSH
41193: LD_VAR 0 4
41197: PPUSH
41198: CALL_OW 292
41202: IFFALSE 41216
// begin result := true ;
41204: LD_ADDR_VAR 0 3
41208: PUSH
41209: LD_INT 1
41211: ST_TO_ADDR
// exit ;
41212: POP
41213: POP
41214: GO 41220
// end ;
41216: GO 41185
41218: POP
41219: POP
// end ;
41220: LD_VAR 0 3
41224: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41225: LD_INT 0
41227: PPUSH
41228: PPUSH
41229: PPUSH
41230: PPUSH
// if not unit or not points then
41231: LD_VAR 0 1
41235: NOT
41236: PUSH
41237: LD_VAR 0 2
41241: NOT
41242: OR
41243: IFFALSE 41247
// exit ;
41245: GO 41337
// dist := 99999 ;
41247: LD_ADDR_VAR 0 5
41251: PUSH
41252: LD_INT 99999
41254: ST_TO_ADDR
// for i in points do
41255: LD_ADDR_VAR 0 4
41259: PUSH
41260: LD_VAR 0 2
41264: PUSH
41265: FOR_IN
41266: IFFALSE 41335
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41268: LD_ADDR_VAR 0 6
41272: PUSH
41273: LD_VAR 0 1
41277: PPUSH
41278: LD_VAR 0 4
41282: PUSH
41283: LD_INT 1
41285: ARRAY
41286: PPUSH
41287: LD_VAR 0 4
41291: PUSH
41292: LD_INT 2
41294: ARRAY
41295: PPUSH
41296: CALL_OW 297
41300: ST_TO_ADDR
// if tmpDist < dist then
41301: LD_VAR 0 6
41305: PUSH
41306: LD_VAR 0 5
41310: LESS
41311: IFFALSE 41333
// begin result := i ;
41313: LD_ADDR_VAR 0 3
41317: PUSH
41318: LD_VAR 0 4
41322: ST_TO_ADDR
// dist := tmpDist ;
41323: LD_ADDR_VAR 0 5
41327: PUSH
41328: LD_VAR 0 6
41332: ST_TO_ADDR
// end ; end ;
41333: GO 41265
41335: POP
41336: POP
// end ;
41337: LD_VAR 0 3
41341: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41342: LD_INT 0
41344: PPUSH
// uc_side := side ;
41345: LD_ADDR_OWVAR 20
41349: PUSH
41350: LD_VAR 0 1
41354: ST_TO_ADDR
// uc_nation := 3 ;
41355: LD_ADDR_OWVAR 21
41359: PUSH
41360: LD_INT 3
41362: ST_TO_ADDR
// vc_chassis := 25 ;
41363: LD_ADDR_OWVAR 37
41367: PUSH
41368: LD_INT 25
41370: ST_TO_ADDR
// vc_engine := engine_siberite ;
41371: LD_ADDR_OWVAR 39
41375: PUSH
41376: LD_INT 3
41378: ST_TO_ADDR
// vc_control := control_computer ;
41379: LD_ADDR_OWVAR 38
41383: PUSH
41384: LD_INT 3
41386: ST_TO_ADDR
// vc_weapon := 59 ;
41387: LD_ADDR_OWVAR 40
41391: PUSH
41392: LD_INT 59
41394: ST_TO_ADDR
// result := CreateVehicle ;
41395: LD_ADDR_VAR 0 5
41399: PUSH
41400: CALL_OW 45
41404: ST_TO_ADDR
// SetDir ( result , d ) ;
41405: LD_VAR 0 5
41409: PPUSH
41410: LD_VAR 0 4
41414: PPUSH
41415: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41419: LD_VAR 0 5
41423: PPUSH
41424: LD_VAR 0 2
41428: PPUSH
41429: LD_VAR 0 3
41433: PPUSH
41434: LD_INT 0
41436: PPUSH
41437: CALL_OW 48
// end ;
41441: LD_VAR 0 5
41445: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41446: LD_INT 0
41448: PPUSH
41449: PPUSH
41450: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41451: LD_ADDR_VAR 0 2
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41474: LD_VAR 0 1
41478: NOT
41479: PUSH
41480: LD_VAR 0 1
41484: PPUSH
41485: CALL_OW 264
41489: PUSH
41490: LD_INT 12
41492: PUSH
41493: LD_INT 51
41495: PUSH
41496: LD_INT 32
41498: PUSH
41499: LD_EXP 17
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: IN
41510: NOT
41511: OR
41512: IFFALSE 41516
// exit ;
41514: GO 41614
// for i := 1 to 3 do
41516: LD_ADDR_VAR 0 3
41520: PUSH
41521: DOUBLE
41522: LD_INT 1
41524: DEC
41525: ST_TO_ADDR
41526: LD_INT 3
41528: PUSH
41529: FOR_TO
41530: IFFALSE 41612
// begin tmp := GetCargo ( cargo , i ) ;
41532: LD_ADDR_VAR 0 4
41536: PUSH
41537: LD_VAR 0 1
41541: PPUSH
41542: LD_VAR 0 3
41546: PPUSH
41547: CALL_OW 289
41551: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
41552: LD_ADDR_VAR 0 2
41556: PUSH
41557: LD_VAR 0 2
41561: PPUSH
41562: LD_VAR 0 3
41566: PPUSH
41567: LD_VAR 0 4
41571: PPUSH
41572: CALL_OW 1
41576: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
41577: LD_ADDR_VAR 0 2
41581: PUSH
41582: LD_VAR 0 2
41586: PPUSH
41587: LD_INT 4
41589: PPUSH
41590: LD_VAR 0 2
41594: PUSH
41595: LD_INT 4
41597: ARRAY
41598: PUSH
41599: LD_VAR 0 4
41603: PLUS
41604: PPUSH
41605: CALL_OW 1
41609: ST_TO_ADDR
// end ;
41610: GO 41529
41612: POP
41613: POP
// end ;
41614: LD_VAR 0 2
41618: RET
// export function Length ( array ) ; begin
41619: LD_INT 0
41621: PPUSH
// result := array + 0 ;
41622: LD_ADDR_VAR 0 2
41626: PUSH
41627: LD_VAR 0 1
41631: PUSH
41632: LD_INT 0
41634: PLUS
41635: ST_TO_ADDR
// end ; end_of_file
41636: LD_VAR 0 2
41640: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
41641: LD_INT 0
41643: PPUSH
// ar_miner := 81 ;
41644: LD_ADDR_EXP 23
41648: PUSH
41649: LD_INT 81
41651: ST_TO_ADDR
// ar_crane := 88 ;
41652: LD_ADDR_EXP 22
41656: PUSH
41657: LD_INT 88
41659: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
41660: LD_ADDR_EXP 17
41664: PUSH
41665: LD_INT 89
41667: ST_TO_ADDR
// us_hack := 99 ;
41668: LD_ADDR_EXP 18
41672: PUSH
41673: LD_INT 99
41675: ST_TO_ADDR
// us_artillery := 97 ;
41676: LD_ADDR_EXP 19
41680: PUSH
41681: LD_INT 97
41683: ST_TO_ADDR
// ar_bio_bomb := 91 ;
41684: LD_ADDR_EXP 20
41688: PUSH
41689: LD_INT 91
41691: ST_TO_ADDR
// ar_mortar := 92 ;
41692: LD_ADDR_EXP 21
41696: PUSH
41697: LD_INT 92
41699: ST_TO_ADDR
// ru_flamethrower := 93 ;
41700: LD_ADDR_EXP 24
41704: PUSH
41705: LD_INT 93
41707: ST_TO_ADDR
// ru_radar := 98 ;
41708: LD_ADDR_EXP 16
41712: PUSH
41713: LD_INT 98
41715: ST_TO_ADDR
// tech_Artillery := 80 ;
41716: LD_ADDR_EXP 25
41720: PUSH
41721: LD_INT 80
41723: ST_TO_ADDR
// tech_RadMat := 81 ;
41724: LD_ADDR_EXP 26
41728: PUSH
41729: LD_INT 81
41731: ST_TO_ADDR
// tech_BasicTools := 82 ;
41732: LD_ADDR_EXP 27
41736: PUSH
41737: LD_INT 82
41739: ST_TO_ADDR
// tech_Cargo := 83 ;
41740: LD_ADDR_EXP 28
41744: PUSH
41745: LD_INT 83
41747: ST_TO_ADDR
// tech_Track := 84 ;
41748: LD_ADDR_EXP 29
41752: PUSH
41753: LD_INT 84
41755: ST_TO_ADDR
// tech_Crane := 85 ;
41756: LD_ADDR_EXP 30
41760: PUSH
41761: LD_INT 85
41763: ST_TO_ADDR
// tech_Bulldozer := 86 ;
41764: LD_ADDR_EXP 31
41768: PUSH
41769: LD_INT 86
41771: ST_TO_ADDR
// tech_Hovercraft := 87 ;
41772: LD_ADDR_EXP 32
41776: PUSH
41777: LD_INT 87
41779: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
41780: LD_ADDR_EXP 33
41784: PUSH
41785: LD_INT 88
41787: ST_TO_ADDR
// class_mastodont := 31 ;
41788: LD_ADDR_EXP 34
41792: PUSH
41793: LD_INT 31
41795: ST_TO_ADDR
// class_horse := 21 ;
41796: LD_ADDR_EXP 35
41800: PUSH
41801: LD_INT 21
41803: ST_TO_ADDR
// end ;
41804: LD_VAR 0 1
41808: RET
// every 1 do
41809: GO 41811
41811: DISABLE
// InitGlobalVariables ; end_of_file
41812: CALL 41641 0 0
41816: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
41817: LD_VAR 0 1
41821: PPUSH
41822: LD_VAR 0 2
41826: PPUSH
41827: LD_VAR 0 3
41831: PPUSH
41832: LD_VAR 0 4
41836: PPUSH
41837: LD_VAR 0 5
41841: PPUSH
41842: LD_VAR 0 6
41846: PPUSH
41847: CALL 41923 0 6
// end ;
41851: PPOPN 6
41853: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
41854: LD_INT 0
41856: PPUSH
// begin if not units then
41857: LD_VAR 0 1
41861: NOT
41862: IFFALSE 41866
// exit ;
41864: GO 41866
// end ;
41866: PPOPN 7
41868: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
41869: CALL 41898 0 0
// end ; end_of_file
41873: PPOPN 1
41875: END
// every 0 0$1 do
41876: GO 41878
41878: DISABLE
// begin enable ;
41879: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
41880: LD_STRING updateTimer(
41882: PUSH
41883: LD_OWVAR 1
41887: STR
41888: PUSH
41889: LD_STRING );
41891: STR
41892: PPUSH
41893: CALL_OW 559
// end ;
41897: END
// export function SOS_MapStart ( ) ; begin
41898: LD_INT 0
41900: PPUSH
// if streamModeActive then
41901: LD_EXP 36
41905: IFFALSE 41914
// DefineStreamItems ( true ) ;
41907: LD_INT 1
41909: PPUSH
41910: CALL 43564 0 1
// UpdateFactoryWaypoints ( ) ;
41914: CALL 57311 0 0
// end ;
41918: LD_VAR 0 1
41922: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
41923: LD_INT 0
41925: PPUSH
// if p2 = 100 then
41926: LD_VAR 0 2
41930: PUSH
41931: LD_INT 100
41933: EQUAL
41934: IFFALSE 42937
// begin if not StreamModeActive then
41936: LD_EXP 36
41940: NOT
41941: IFFALSE 41951
// StreamModeActive := true ;
41943: LD_ADDR_EXP 36
41947: PUSH
41948: LD_INT 1
41950: ST_TO_ADDR
// if p3 = 0 then
41951: LD_VAR 0 3
41955: PUSH
41956: LD_INT 0
41958: EQUAL
41959: IFFALSE 41965
// InitStreamMode ;
41961: CALL 43100 0 0
// if p3 = 1 then
41965: LD_VAR 0 3
41969: PUSH
41970: LD_INT 1
41972: EQUAL
41973: IFFALSE 41983
// sRocket := true ;
41975: LD_ADDR_EXP 41
41979: PUSH
41980: LD_INT 1
41982: ST_TO_ADDR
// if p3 = 2 then
41983: LD_VAR 0 3
41987: PUSH
41988: LD_INT 2
41990: EQUAL
41991: IFFALSE 42001
// sSpeed := true ;
41993: LD_ADDR_EXP 40
41997: PUSH
41998: LD_INT 1
42000: ST_TO_ADDR
// if p3 = 3 then
42001: LD_VAR 0 3
42005: PUSH
42006: LD_INT 3
42008: EQUAL
42009: IFFALSE 42019
// sEngine := true ;
42011: LD_ADDR_EXP 42
42015: PUSH
42016: LD_INT 1
42018: ST_TO_ADDR
// if p3 = 4 then
42019: LD_VAR 0 3
42023: PUSH
42024: LD_INT 4
42026: EQUAL
42027: IFFALSE 42037
// sSpec := true ;
42029: LD_ADDR_EXP 39
42033: PUSH
42034: LD_INT 1
42036: ST_TO_ADDR
// if p3 = 5 then
42037: LD_VAR 0 3
42041: PUSH
42042: LD_INT 5
42044: EQUAL
42045: IFFALSE 42055
// sLevel := true ;
42047: LD_ADDR_EXP 43
42051: PUSH
42052: LD_INT 1
42054: ST_TO_ADDR
// if p3 = 6 then
42055: LD_VAR 0 3
42059: PUSH
42060: LD_INT 6
42062: EQUAL
42063: IFFALSE 42073
// sArmoury := true ;
42065: LD_ADDR_EXP 44
42069: PUSH
42070: LD_INT 1
42072: ST_TO_ADDR
// if p3 = 7 then
42073: LD_VAR 0 3
42077: PUSH
42078: LD_INT 7
42080: EQUAL
42081: IFFALSE 42091
// sRadar := true ;
42083: LD_ADDR_EXP 45
42087: PUSH
42088: LD_INT 1
42090: ST_TO_ADDR
// if p3 = 8 then
42091: LD_VAR 0 3
42095: PUSH
42096: LD_INT 8
42098: EQUAL
42099: IFFALSE 42109
// sBunker := true ;
42101: LD_ADDR_EXP 46
42105: PUSH
42106: LD_INT 1
42108: ST_TO_ADDR
// if p3 = 9 then
42109: LD_VAR 0 3
42113: PUSH
42114: LD_INT 9
42116: EQUAL
42117: IFFALSE 42127
// sHack := true ;
42119: LD_ADDR_EXP 47
42123: PUSH
42124: LD_INT 1
42126: ST_TO_ADDR
// if p3 = 10 then
42127: LD_VAR 0 3
42131: PUSH
42132: LD_INT 10
42134: EQUAL
42135: IFFALSE 42145
// sFire := true ;
42137: LD_ADDR_EXP 48
42141: PUSH
42142: LD_INT 1
42144: ST_TO_ADDR
// if p3 = 11 then
42145: LD_VAR 0 3
42149: PUSH
42150: LD_INT 11
42152: EQUAL
42153: IFFALSE 42163
// sRefresh := true ;
42155: LD_ADDR_EXP 49
42159: PUSH
42160: LD_INT 1
42162: ST_TO_ADDR
// if p3 = 12 then
42163: LD_VAR 0 3
42167: PUSH
42168: LD_INT 12
42170: EQUAL
42171: IFFALSE 42181
// sExp := true ;
42173: LD_ADDR_EXP 50
42177: PUSH
42178: LD_INT 1
42180: ST_TO_ADDR
// if p3 = 13 then
42181: LD_VAR 0 3
42185: PUSH
42186: LD_INT 13
42188: EQUAL
42189: IFFALSE 42199
// sDepot := true ;
42191: LD_ADDR_EXP 51
42195: PUSH
42196: LD_INT 1
42198: ST_TO_ADDR
// if p3 = 14 then
42199: LD_VAR 0 3
42203: PUSH
42204: LD_INT 14
42206: EQUAL
42207: IFFALSE 42217
// sFlag := true ;
42209: LD_ADDR_EXP 52
42213: PUSH
42214: LD_INT 1
42216: ST_TO_ADDR
// if p3 = 15 then
42217: LD_VAR 0 3
42221: PUSH
42222: LD_INT 15
42224: EQUAL
42225: IFFALSE 42235
// sKamikadze := true ;
42227: LD_ADDR_EXP 60
42231: PUSH
42232: LD_INT 1
42234: ST_TO_ADDR
// if p3 = 16 then
42235: LD_VAR 0 3
42239: PUSH
42240: LD_INT 16
42242: EQUAL
42243: IFFALSE 42253
// sTroll := true ;
42245: LD_ADDR_EXP 61
42249: PUSH
42250: LD_INT 1
42252: ST_TO_ADDR
// if p3 = 17 then
42253: LD_VAR 0 3
42257: PUSH
42258: LD_INT 17
42260: EQUAL
42261: IFFALSE 42271
// sSlow := true ;
42263: LD_ADDR_EXP 62
42267: PUSH
42268: LD_INT 1
42270: ST_TO_ADDR
// if p3 = 18 then
42271: LD_VAR 0 3
42275: PUSH
42276: LD_INT 18
42278: EQUAL
42279: IFFALSE 42289
// sLack := true ;
42281: LD_ADDR_EXP 63
42285: PUSH
42286: LD_INT 1
42288: ST_TO_ADDR
// if p3 = 19 then
42289: LD_VAR 0 3
42293: PUSH
42294: LD_INT 19
42296: EQUAL
42297: IFFALSE 42307
// sTank := true ;
42299: LD_ADDR_EXP 65
42303: PUSH
42304: LD_INT 1
42306: ST_TO_ADDR
// if p3 = 20 then
42307: LD_VAR 0 3
42311: PUSH
42312: LD_INT 20
42314: EQUAL
42315: IFFALSE 42325
// sRemote := true ;
42317: LD_ADDR_EXP 66
42321: PUSH
42322: LD_INT 1
42324: ST_TO_ADDR
// if p3 = 21 then
42325: LD_VAR 0 3
42329: PUSH
42330: LD_INT 21
42332: EQUAL
42333: IFFALSE 42343
// sPowell := true ;
42335: LD_ADDR_EXP 67
42339: PUSH
42340: LD_INT 1
42342: ST_TO_ADDR
// if p3 = 22 then
42343: LD_VAR 0 3
42347: PUSH
42348: LD_INT 22
42350: EQUAL
42351: IFFALSE 42361
// sTeleport := true ;
42353: LD_ADDR_EXP 70
42357: PUSH
42358: LD_INT 1
42360: ST_TO_ADDR
// if p3 = 23 then
42361: LD_VAR 0 3
42365: PUSH
42366: LD_INT 23
42368: EQUAL
42369: IFFALSE 42379
// sOilTower := true ;
42371: LD_ADDR_EXP 72
42375: PUSH
42376: LD_INT 1
42378: ST_TO_ADDR
// if p3 = 24 then
42379: LD_VAR 0 3
42383: PUSH
42384: LD_INT 24
42386: EQUAL
42387: IFFALSE 42397
// sShovel := true ;
42389: LD_ADDR_EXP 73
42393: PUSH
42394: LD_INT 1
42396: ST_TO_ADDR
// if p3 = 25 then
42397: LD_VAR 0 3
42401: PUSH
42402: LD_INT 25
42404: EQUAL
42405: IFFALSE 42415
// sSheik := true ;
42407: LD_ADDR_EXP 74
42411: PUSH
42412: LD_INT 1
42414: ST_TO_ADDR
// if p3 = 26 then
42415: LD_VAR 0 3
42419: PUSH
42420: LD_INT 26
42422: EQUAL
42423: IFFALSE 42433
// sEarthquake := true ;
42425: LD_ADDR_EXP 76
42429: PUSH
42430: LD_INT 1
42432: ST_TO_ADDR
// if p3 = 27 then
42433: LD_VAR 0 3
42437: PUSH
42438: LD_INT 27
42440: EQUAL
42441: IFFALSE 42451
// sAI := true ;
42443: LD_ADDR_EXP 77
42447: PUSH
42448: LD_INT 1
42450: ST_TO_ADDR
// if p3 = 28 then
42451: LD_VAR 0 3
42455: PUSH
42456: LD_INT 28
42458: EQUAL
42459: IFFALSE 42469
// sCargo := true ;
42461: LD_ADDR_EXP 80
42465: PUSH
42466: LD_INT 1
42468: ST_TO_ADDR
// if p3 = 29 then
42469: LD_VAR 0 3
42473: PUSH
42474: LD_INT 29
42476: EQUAL
42477: IFFALSE 42487
// sDLaser := true ;
42479: LD_ADDR_EXP 81
42483: PUSH
42484: LD_INT 1
42486: ST_TO_ADDR
// if p3 = 30 then
42487: LD_VAR 0 3
42491: PUSH
42492: LD_INT 30
42494: EQUAL
42495: IFFALSE 42505
// sExchange := true ;
42497: LD_ADDR_EXP 82
42501: PUSH
42502: LD_INT 1
42504: ST_TO_ADDR
// if p3 = 31 then
42505: LD_VAR 0 3
42509: PUSH
42510: LD_INT 31
42512: EQUAL
42513: IFFALSE 42523
// sFac := true ;
42515: LD_ADDR_EXP 83
42519: PUSH
42520: LD_INT 1
42522: ST_TO_ADDR
// if p3 = 32 then
42523: LD_VAR 0 3
42527: PUSH
42528: LD_INT 32
42530: EQUAL
42531: IFFALSE 42541
// sPower := true ;
42533: LD_ADDR_EXP 84
42537: PUSH
42538: LD_INT 1
42540: ST_TO_ADDR
// if p3 = 33 then
42541: LD_VAR 0 3
42545: PUSH
42546: LD_INT 33
42548: EQUAL
42549: IFFALSE 42559
// sRandom := true ;
42551: LD_ADDR_EXP 85
42555: PUSH
42556: LD_INT 1
42558: ST_TO_ADDR
// if p3 = 34 then
42559: LD_VAR 0 3
42563: PUSH
42564: LD_INT 34
42566: EQUAL
42567: IFFALSE 42577
// sShield := true ;
42569: LD_ADDR_EXP 86
42573: PUSH
42574: LD_INT 1
42576: ST_TO_ADDR
// if p3 = 35 then
42577: LD_VAR 0 3
42581: PUSH
42582: LD_INT 35
42584: EQUAL
42585: IFFALSE 42595
// sTime := true ;
42587: LD_ADDR_EXP 87
42591: PUSH
42592: LD_INT 1
42594: ST_TO_ADDR
// if p3 = 36 then
42595: LD_VAR 0 3
42599: PUSH
42600: LD_INT 36
42602: EQUAL
42603: IFFALSE 42613
// sTools := true ;
42605: LD_ADDR_EXP 88
42609: PUSH
42610: LD_INT 1
42612: ST_TO_ADDR
// if p3 = 101 then
42613: LD_VAR 0 3
42617: PUSH
42618: LD_INT 101
42620: EQUAL
42621: IFFALSE 42631
// sSold := true ;
42623: LD_ADDR_EXP 53
42627: PUSH
42628: LD_INT 1
42630: ST_TO_ADDR
// if p3 = 102 then
42631: LD_VAR 0 3
42635: PUSH
42636: LD_INT 102
42638: EQUAL
42639: IFFALSE 42649
// sDiff := true ;
42641: LD_ADDR_EXP 54
42645: PUSH
42646: LD_INT 1
42648: ST_TO_ADDR
// if p3 = 103 then
42649: LD_VAR 0 3
42653: PUSH
42654: LD_INT 103
42656: EQUAL
42657: IFFALSE 42667
// sFog := true ;
42659: LD_ADDR_EXP 57
42663: PUSH
42664: LD_INT 1
42666: ST_TO_ADDR
// if p3 = 104 then
42667: LD_VAR 0 3
42671: PUSH
42672: LD_INT 104
42674: EQUAL
42675: IFFALSE 42685
// sReset := true ;
42677: LD_ADDR_EXP 58
42681: PUSH
42682: LD_INT 1
42684: ST_TO_ADDR
// if p3 = 105 then
42685: LD_VAR 0 3
42689: PUSH
42690: LD_INT 105
42692: EQUAL
42693: IFFALSE 42703
// sSun := true ;
42695: LD_ADDR_EXP 59
42699: PUSH
42700: LD_INT 1
42702: ST_TO_ADDR
// if p3 = 106 then
42703: LD_VAR 0 3
42707: PUSH
42708: LD_INT 106
42710: EQUAL
42711: IFFALSE 42721
// sTiger := true ;
42713: LD_ADDR_EXP 55
42717: PUSH
42718: LD_INT 1
42720: ST_TO_ADDR
// if p3 = 107 then
42721: LD_VAR 0 3
42725: PUSH
42726: LD_INT 107
42728: EQUAL
42729: IFFALSE 42739
// sBomb := true ;
42731: LD_ADDR_EXP 56
42735: PUSH
42736: LD_INT 1
42738: ST_TO_ADDR
// if p3 = 108 then
42739: LD_VAR 0 3
42743: PUSH
42744: LD_INT 108
42746: EQUAL
42747: IFFALSE 42757
// sWound := true ;
42749: LD_ADDR_EXP 64
42753: PUSH
42754: LD_INT 1
42756: ST_TO_ADDR
// if p3 = 109 then
42757: LD_VAR 0 3
42761: PUSH
42762: LD_INT 109
42764: EQUAL
42765: IFFALSE 42775
// sBetray := true ;
42767: LD_ADDR_EXP 68
42771: PUSH
42772: LD_INT 1
42774: ST_TO_ADDR
// if p3 = 110 then
42775: LD_VAR 0 3
42779: PUSH
42780: LD_INT 110
42782: EQUAL
42783: IFFALSE 42793
// sContamin := true ;
42785: LD_ADDR_EXP 69
42789: PUSH
42790: LD_INT 1
42792: ST_TO_ADDR
// if p3 = 111 then
42793: LD_VAR 0 3
42797: PUSH
42798: LD_INT 111
42800: EQUAL
42801: IFFALSE 42811
// sOil := true ;
42803: LD_ADDR_EXP 71
42807: PUSH
42808: LD_INT 1
42810: ST_TO_ADDR
// if p3 = 112 then
42811: LD_VAR 0 3
42815: PUSH
42816: LD_INT 112
42818: EQUAL
42819: IFFALSE 42829
// sStu := true ;
42821: LD_ADDR_EXP 75
42825: PUSH
42826: LD_INT 1
42828: ST_TO_ADDR
// if p3 = 113 then
42829: LD_VAR 0 3
42833: PUSH
42834: LD_INT 113
42836: EQUAL
42837: IFFALSE 42847
// sBazooka := true ;
42839: LD_ADDR_EXP 78
42843: PUSH
42844: LD_INT 1
42846: ST_TO_ADDR
// if p3 = 114 then
42847: LD_VAR 0 3
42851: PUSH
42852: LD_INT 114
42854: EQUAL
42855: IFFALSE 42865
// sMortar := true ;
42857: LD_ADDR_EXP 79
42861: PUSH
42862: LD_INT 1
42864: ST_TO_ADDR
// if p3 = 115 then
42865: LD_VAR 0 3
42869: PUSH
42870: LD_INT 115
42872: EQUAL
42873: IFFALSE 42883
// sRanger := true ;
42875: LD_ADDR_EXP 89
42879: PUSH
42880: LD_INT 1
42882: ST_TO_ADDR
// if p3 = 116 then
42883: LD_VAR 0 3
42887: PUSH
42888: LD_INT 116
42890: EQUAL
42891: IFFALSE 42901
// sComputer := true ;
42893: LD_ADDR_EXP 90
42897: PUSH
42898: LD_INT 1
42900: ST_TO_ADDR
// if p3 = 117 then
42901: LD_VAR 0 3
42905: PUSH
42906: LD_INT 117
42908: EQUAL
42909: IFFALSE 42919
// s30 := true ;
42911: LD_ADDR_EXP 91
42915: PUSH
42916: LD_INT 1
42918: ST_TO_ADDR
// if p3 = 118 then
42919: LD_VAR 0 3
42923: PUSH
42924: LD_INT 118
42926: EQUAL
42927: IFFALSE 42937
// s60 := true ;
42929: LD_ADDR_EXP 92
42933: PUSH
42934: LD_INT 1
42936: ST_TO_ADDR
// end ; if p2 = 101 then
42937: LD_VAR 0 2
42941: PUSH
42942: LD_INT 101
42944: EQUAL
42945: IFFALSE 43073
// begin case p3 of 1 :
42947: LD_VAR 0 3
42951: PUSH
42952: LD_INT 1
42954: DOUBLE
42955: EQUAL
42956: IFTRUE 42960
42958: GO 42967
42960: POP
// hHackUnlimitedResources ; 2 :
42961: CALL 55171 0 0
42965: GO 43073
42967: LD_INT 2
42969: DOUBLE
42970: EQUAL
42971: IFTRUE 42975
42973: GO 42982
42975: POP
// hHackSetLevel10 ; 3 :
42976: CALL 55304 0 0
42980: GO 43073
42982: LD_INT 3
42984: DOUBLE
42985: EQUAL
42986: IFTRUE 42990
42988: GO 42997
42990: POP
// hHackSetLevel10YourUnits ; 4 :
42991: CALL 55389 0 0
42995: GO 43073
42997: LD_INT 4
42999: DOUBLE
43000: EQUAL
43001: IFTRUE 43005
43003: GO 43012
43005: POP
// hHackInvincible ; 5 :
43006: CALL 55837 0 0
43010: GO 43073
43012: LD_INT 5
43014: DOUBLE
43015: EQUAL
43016: IFTRUE 43020
43018: GO 43027
43020: POP
// hHackInvisible ; 6 :
43021: CALL 55948 0 0
43025: GO 43073
43027: LD_INT 6
43029: DOUBLE
43030: EQUAL
43031: IFTRUE 43035
43033: GO 43042
43035: POP
// hHackChangeYourSide ; 7 :
43036: CALL 56005 0 0
43040: GO 43073
43042: LD_INT 7
43044: DOUBLE
43045: EQUAL
43046: IFTRUE 43050
43048: GO 43057
43050: POP
// hHackChangeUnitSide ; 8 :
43051: CALL 56047 0 0
43055: GO 43073
43057: LD_INT 8
43059: DOUBLE
43060: EQUAL
43061: IFTRUE 43065
43063: GO 43072
43065: POP
// hHackFog ; end ;
43066: CALL 56148 0 0
43070: GO 43073
43072: POP
// end ; end ;
43073: LD_VAR 0 7
43077: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
43078: GO 43080
43080: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
43081: LD_STRING initStreamRollete();
43083: PPUSH
43084: CALL_OW 559
// InitStreamMode ;
43088: CALL 43100 0 0
// DefineStreamItems ( false ) ;
43092: LD_INT 0
43094: PPUSH
43095: CALL 43564 0 1
// end ;
43099: END
// function InitStreamMode ; begin
43100: LD_INT 0
43102: PPUSH
// streamModeActive := false ;
43103: LD_ADDR_EXP 36
43107: PUSH
43108: LD_INT 0
43110: ST_TO_ADDR
// normalCounter := 36 ;
43111: LD_ADDR_EXP 37
43115: PUSH
43116: LD_INT 36
43118: ST_TO_ADDR
// hardcoreCounter := 18 ;
43119: LD_ADDR_EXP 38
43123: PUSH
43124: LD_INT 18
43126: ST_TO_ADDR
// sRocket := false ;
43127: LD_ADDR_EXP 41
43131: PUSH
43132: LD_INT 0
43134: ST_TO_ADDR
// sSpeed := false ;
43135: LD_ADDR_EXP 40
43139: PUSH
43140: LD_INT 0
43142: ST_TO_ADDR
// sEngine := false ;
43143: LD_ADDR_EXP 42
43147: PUSH
43148: LD_INT 0
43150: ST_TO_ADDR
// sSpec := false ;
43151: LD_ADDR_EXP 39
43155: PUSH
43156: LD_INT 0
43158: ST_TO_ADDR
// sLevel := false ;
43159: LD_ADDR_EXP 43
43163: PUSH
43164: LD_INT 0
43166: ST_TO_ADDR
// sArmoury := false ;
43167: LD_ADDR_EXP 44
43171: PUSH
43172: LD_INT 0
43174: ST_TO_ADDR
// sRadar := false ;
43175: LD_ADDR_EXP 45
43179: PUSH
43180: LD_INT 0
43182: ST_TO_ADDR
// sBunker := false ;
43183: LD_ADDR_EXP 46
43187: PUSH
43188: LD_INT 0
43190: ST_TO_ADDR
// sHack := false ;
43191: LD_ADDR_EXP 47
43195: PUSH
43196: LD_INT 0
43198: ST_TO_ADDR
// sFire := false ;
43199: LD_ADDR_EXP 48
43203: PUSH
43204: LD_INT 0
43206: ST_TO_ADDR
// sRefresh := false ;
43207: LD_ADDR_EXP 49
43211: PUSH
43212: LD_INT 0
43214: ST_TO_ADDR
// sExp := false ;
43215: LD_ADDR_EXP 50
43219: PUSH
43220: LD_INT 0
43222: ST_TO_ADDR
// sDepot := false ;
43223: LD_ADDR_EXP 51
43227: PUSH
43228: LD_INT 0
43230: ST_TO_ADDR
// sFlag := false ;
43231: LD_ADDR_EXP 52
43235: PUSH
43236: LD_INT 0
43238: ST_TO_ADDR
// sKamikadze := false ;
43239: LD_ADDR_EXP 60
43243: PUSH
43244: LD_INT 0
43246: ST_TO_ADDR
// sTroll := false ;
43247: LD_ADDR_EXP 61
43251: PUSH
43252: LD_INT 0
43254: ST_TO_ADDR
// sSlow := false ;
43255: LD_ADDR_EXP 62
43259: PUSH
43260: LD_INT 0
43262: ST_TO_ADDR
// sLack := false ;
43263: LD_ADDR_EXP 63
43267: PUSH
43268: LD_INT 0
43270: ST_TO_ADDR
// sTank := false ;
43271: LD_ADDR_EXP 65
43275: PUSH
43276: LD_INT 0
43278: ST_TO_ADDR
// sRemote := false ;
43279: LD_ADDR_EXP 66
43283: PUSH
43284: LD_INT 0
43286: ST_TO_ADDR
// sPowell := false ;
43287: LD_ADDR_EXP 67
43291: PUSH
43292: LD_INT 0
43294: ST_TO_ADDR
// sTeleport := false ;
43295: LD_ADDR_EXP 70
43299: PUSH
43300: LD_INT 0
43302: ST_TO_ADDR
// sOilTower := false ;
43303: LD_ADDR_EXP 72
43307: PUSH
43308: LD_INT 0
43310: ST_TO_ADDR
// sShovel := false ;
43311: LD_ADDR_EXP 73
43315: PUSH
43316: LD_INT 0
43318: ST_TO_ADDR
// sSheik := false ;
43319: LD_ADDR_EXP 74
43323: PUSH
43324: LD_INT 0
43326: ST_TO_ADDR
// sEarthquake := false ;
43327: LD_ADDR_EXP 76
43331: PUSH
43332: LD_INT 0
43334: ST_TO_ADDR
// sAI := false ;
43335: LD_ADDR_EXP 77
43339: PUSH
43340: LD_INT 0
43342: ST_TO_ADDR
// sCargo := false ;
43343: LD_ADDR_EXP 80
43347: PUSH
43348: LD_INT 0
43350: ST_TO_ADDR
// sDLaser := false ;
43351: LD_ADDR_EXP 81
43355: PUSH
43356: LD_INT 0
43358: ST_TO_ADDR
// sExchange := false ;
43359: LD_ADDR_EXP 82
43363: PUSH
43364: LD_INT 0
43366: ST_TO_ADDR
// sFac := false ;
43367: LD_ADDR_EXP 83
43371: PUSH
43372: LD_INT 0
43374: ST_TO_ADDR
// sPower := false ;
43375: LD_ADDR_EXP 84
43379: PUSH
43380: LD_INT 0
43382: ST_TO_ADDR
// sRandom := false ;
43383: LD_ADDR_EXP 85
43387: PUSH
43388: LD_INT 0
43390: ST_TO_ADDR
// sShield := false ;
43391: LD_ADDR_EXP 86
43395: PUSH
43396: LD_INT 0
43398: ST_TO_ADDR
// sTime := false ;
43399: LD_ADDR_EXP 87
43403: PUSH
43404: LD_INT 0
43406: ST_TO_ADDR
// sTools := false ;
43407: LD_ADDR_EXP 88
43411: PUSH
43412: LD_INT 0
43414: ST_TO_ADDR
// sSold := false ;
43415: LD_ADDR_EXP 53
43419: PUSH
43420: LD_INT 0
43422: ST_TO_ADDR
// sDiff := false ;
43423: LD_ADDR_EXP 54
43427: PUSH
43428: LD_INT 0
43430: ST_TO_ADDR
// sFog := false ;
43431: LD_ADDR_EXP 57
43435: PUSH
43436: LD_INT 0
43438: ST_TO_ADDR
// sReset := false ;
43439: LD_ADDR_EXP 58
43443: PUSH
43444: LD_INT 0
43446: ST_TO_ADDR
// sSun := false ;
43447: LD_ADDR_EXP 59
43451: PUSH
43452: LD_INT 0
43454: ST_TO_ADDR
// sTiger := false ;
43455: LD_ADDR_EXP 55
43459: PUSH
43460: LD_INT 0
43462: ST_TO_ADDR
// sBomb := false ;
43463: LD_ADDR_EXP 56
43467: PUSH
43468: LD_INT 0
43470: ST_TO_ADDR
// sWound := false ;
43471: LD_ADDR_EXP 64
43475: PUSH
43476: LD_INT 0
43478: ST_TO_ADDR
// sBetray := false ;
43479: LD_ADDR_EXP 68
43483: PUSH
43484: LD_INT 0
43486: ST_TO_ADDR
// sContamin := false ;
43487: LD_ADDR_EXP 69
43491: PUSH
43492: LD_INT 0
43494: ST_TO_ADDR
// sOil := false ;
43495: LD_ADDR_EXP 71
43499: PUSH
43500: LD_INT 0
43502: ST_TO_ADDR
// sStu := false ;
43503: LD_ADDR_EXP 75
43507: PUSH
43508: LD_INT 0
43510: ST_TO_ADDR
// sBazooka := false ;
43511: LD_ADDR_EXP 78
43515: PUSH
43516: LD_INT 0
43518: ST_TO_ADDR
// sMortar := false ;
43519: LD_ADDR_EXP 79
43523: PUSH
43524: LD_INT 0
43526: ST_TO_ADDR
// sRanger := false ;
43527: LD_ADDR_EXP 89
43531: PUSH
43532: LD_INT 0
43534: ST_TO_ADDR
// sComputer := false ;
43535: LD_ADDR_EXP 90
43539: PUSH
43540: LD_INT 0
43542: ST_TO_ADDR
// s30 := false ;
43543: LD_ADDR_EXP 91
43547: PUSH
43548: LD_INT 0
43550: ST_TO_ADDR
// s60 := false ;
43551: LD_ADDR_EXP 92
43555: PUSH
43556: LD_INT 0
43558: ST_TO_ADDR
// end ;
43559: LD_VAR 0 1
43563: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
43564: LD_INT 0
43566: PPUSH
43567: PPUSH
43568: PPUSH
43569: PPUSH
43570: PPUSH
43571: PPUSH
43572: PPUSH
// result := [ ] ;
43573: LD_ADDR_VAR 0 2
43577: PUSH
43578: EMPTY
43579: ST_TO_ADDR
// if campaign_id = 1 then
43580: LD_OWVAR 69
43584: PUSH
43585: LD_INT 1
43587: EQUAL
43588: IFFALSE 46754
// begin case mission_number of 1 :
43590: LD_OWVAR 70
43594: PUSH
43595: LD_INT 1
43597: DOUBLE
43598: EQUAL
43599: IFTRUE 43603
43601: GO 43679
43603: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
43604: LD_ADDR_VAR 0 2
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: LD_INT 4
43614: PUSH
43615: LD_INT 11
43617: PUSH
43618: LD_INT 12
43620: PUSH
43621: LD_INT 15
43623: PUSH
43624: LD_INT 16
43626: PUSH
43627: LD_INT 22
43629: PUSH
43630: LD_INT 23
43632: PUSH
43633: LD_INT 26
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 101
43649: PUSH
43650: LD_INT 102
43652: PUSH
43653: LD_INT 106
43655: PUSH
43656: LD_INT 116
43658: PUSH
43659: LD_INT 117
43661: PUSH
43662: LD_INT 118
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: ST_TO_ADDR
43677: GO 46752
43679: LD_INT 2
43681: DOUBLE
43682: EQUAL
43683: IFTRUE 43687
43685: GO 43771
43687: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
43688: LD_ADDR_VAR 0 2
43692: PUSH
43693: LD_INT 2
43695: PUSH
43696: LD_INT 4
43698: PUSH
43699: LD_INT 11
43701: PUSH
43702: LD_INT 12
43704: PUSH
43705: LD_INT 15
43707: PUSH
43708: LD_INT 16
43710: PUSH
43711: LD_INT 22
43713: PUSH
43714: LD_INT 23
43716: PUSH
43717: LD_INT 26
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 101
43733: PUSH
43734: LD_INT 102
43736: PUSH
43737: LD_INT 105
43739: PUSH
43740: LD_INT 106
43742: PUSH
43743: LD_INT 108
43745: PUSH
43746: LD_INT 116
43748: PUSH
43749: LD_INT 117
43751: PUSH
43752: LD_INT 118
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: ST_TO_ADDR
43769: GO 46752
43771: LD_INT 3
43773: DOUBLE
43774: EQUAL
43775: IFTRUE 43779
43777: GO 43867
43779: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
43780: LD_ADDR_VAR 0 2
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: LD_INT 4
43790: PUSH
43791: LD_INT 5
43793: PUSH
43794: LD_INT 11
43796: PUSH
43797: LD_INT 12
43799: PUSH
43800: LD_INT 15
43802: PUSH
43803: LD_INT 16
43805: PUSH
43806: LD_INT 22
43808: PUSH
43809: LD_INT 26
43811: PUSH
43812: LD_INT 36
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 101
43829: PUSH
43830: LD_INT 102
43832: PUSH
43833: LD_INT 105
43835: PUSH
43836: LD_INT 106
43838: PUSH
43839: LD_INT 108
43841: PUSH
43842: LD_INT 116
43844: PUSH
43845: LD_INT 117
43847: PUSH
43848: LD_INT 118
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: ST_TO_ADDR
43865: GO 46752
43867: LD_INT 4
43869: DOUBLE
43870: EQUAL
43871: IFTRUE 43875
43873: GO 43971
43875: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
43876: LD_ADDR_VAR 0 2
43880: PUSH
43881: LD_INT 2
43883: PUSH
43884: LD_INT 4
43886: PUSH
43887: LD_INT 5
43889: PUSH
43890: LD_INT 8
43892: PUSH
43893: LD_INT 11
43895: PUSH
43896: LD_INT 12
43898: PUSH
43899: LD_INT 15
43901: PUSH
43902: LD_INT 16
43904: PUSH
43905: LD_INT 22
43907: PUSH
43908: LD_INT 23
43910: PUSH
43911: LD_INT 26
43913: PUSH
43914: LD_INT 36
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 101
43933: PUSH
43934: LD_INT 102
43936: PUSH
43937: LD_INT 105
43939: PUSH
43940: LD_INT 106
43942: PUSH
43943: LD_INT 108
43945: PUSH
43946: LD_INT 116
43948: PUSH
43949: LD_INT 117
43951: PUSH
43952: LD_INT 118
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: ST_TO_ADDR
43969: GO 46752
43971: LD_INT 5
43973: DOUBLE
43974: EQUAL
43975: IFTRUE 43979
43977: GO 44091
43979: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
43980: LD_ADDR_VAR 0 2
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: LD_INT 4
43990: PUSH
43991: LD_INT 5
43993: PUSH
43994: LD_INT 6
43996: PUSH
43997: LD_INT 8
43999: PUSH
44000: LD_INT 11
44002: PUSH
44003: LD_INT 12
44005: PUSH
44006: LD_INT 15
44008: PUSH
44009: LD_INT 16
44011: PUSH
44012: LD_INT 22
44014: PUSH
44015: LD_INT 23
44017: PUSH
44018: LD_INT 25
44020: PUSH
44021: LD_INT 26
44023: PUSH
44024: LD_INT 36
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 101
44045: PUSH
44046: LD_INT 102
44048: PUSH
44049: LD_INT 105
44051: PUSH
44052: LD_INT 106
44054: PUSH
44055: LD_INT 108
44057: PUSH
44058: LD_INT 109
44060: PUSH
44061: LD_INT 112
44063: PUSH
44064: LD_INT 116
44066: PUSH
44067: LD_INT 117
44069: PUSH
44070: LD_INT 118
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: ST_TO_ADDR
44089: GO 46752
44091: LD_INT 6
44093: DOUBLE
44094: EQUAL
44095: IFTRUE 44099
44097: GO 44231
44099: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
44100: LD_ADDR_VAR 0 2
44104: PUSH
44105: LD_INT 2
44107: PUSH
44108: LD_INT 4
44110: PUSH
44111: LD_INT 5
44113: PUSH
44114: LD_INT 6
44116: PUSH
44117: LD_INT 8
44119: PUSH
44120: LD_INT 11
44122: PUSH
44123: LD_INT 12
44125: PUSH
44126: LD_INT 15
44128: PUSH
44129: LD_INT 16
44131: PUSH
44132: LD_INT 20
44134: PUSH
44135: LD_INT 21
44137: PUSH
44138: LD_INT 22
44140: PUSH
44141: LD_INT 23
44143: PUSH
44144: LD_INT 25
44146: PUSH
44147: LD_INT 26
44149: PUSH
44150: LD_INT 30
44152: PUSH
44153: LD_INT 31
44155: PUSH
44156: LD_INT 32
44158: PUSH
44159: LD_INT 36
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 101
44185: PUSH
44186: LD_INT 102
44188: PUSH
44189: LD_INT 105
44191: PUSH
44192: LD_INT 106
44194: PUSH
44195: LD_INT 108
44197: PUSH
44198: LD_INT 109
44200: PUSH
44201: LD_INT 112
44203: PUSH
44204: LD_INT 116
44206: PUSH
44207: LD_INT 117
44209: PUSH
44210: LD_INT 118
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: ST_TO_ADDR
44229: GO 46752
44231: LD_INT 7
44233: DOUBLE
44234: EQUAL
44235: IFTRUE 44239
44237: GO 44351
44239: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
44240: LD_ADDR_VAR 0 2
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: LD_INT 4
44250: PUSH
44251: LD_INT 5
44253: PUSH
44254: LD_INT 7
44256: PUSH
44257: LD_INT 11
44259: PUSH
44260: LD_INT 12
44262: PUSH
44263: LD_INT 15
44265: PUSH
44266: LD_INT 16
44268: PUSH
44269: LD_INT 20
44271: PUSH
44272: LD_INT 21
44274: PUSH
44275: LD_INT 22
44277: PUSH
44278: LD_INT 23
44280: PUSH
44281: LD_INT 25
44283: PUSH
44284: LD_INT 26
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 101
44305: PUSH
44306: LD_INT 102
44308: PUSH
44309: LD_INT 103
44311: PUSH
44312: LD_INT 105
44314: PUSH
44315: LD_INT 106
44317: PUSH
44318: LD_INT 108
44320: PUSH
44321: LD_INT 112
44323: PUSH
44324: LD_INT 116
44326: PUSH
44327: LD_INT 117
44329: PUSH
44330: LD_INT 118
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: ST_TO_ADDR
44349: GO 46752
44351: LD_INT 8
44353: DOUBLE
44354: EQUAL
44355: IFTRUE 44359
44357: GO 44499
44359: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
44360: LD_ADDR_VAR 0 2
44364: PUSH
44365: LD_INT 2
44367: PUSH
44368: LD_INT 4
44370: PUSH
44371: LD_INT 5
44373: PUSH
44374: LD_INT 6
44376: PUSH
44377: LD_INT 7
44379: PUSH
44380: LD_INT 8
44382: PUSH
44383: LD_INT 11
44385: PUSH
44386: LD_INT 12
44388: PUSH
44389: LD_INT 15
44391: PUSH
44392: LD_INT 16
44394: PUSH
44395: LD_INT 20
44397: PUSH
44398: LD_INT 21
44400: PUSH
44401: LD_INT 22
44403: PUSH
44404: LD_INT 23
44406: PUSH
44407: LD_INT 25
44409: PUSH
44410: LD_INT 26
44412: PUSH
44413: LD_INT 30
44415: PUSH
44416: LD_INT 31
44418: PUSH
44419: LD_INT 32
44421: PUSH
44422: LD_INT 36
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 101
44449: PUSH
44450: LD_INT 102
44452: PUSH
44453: LD_INT 103
44455: PUSH
44456: LD_INT 105
44458: PUSH
44459: LD_INT 106
44461: PUSH
44462: LD_INT 108
44464: PUSH
44465: LD_INT 109
44467: PUSH
44468: LD_INT 112
44470: PUSH
44471: LD_INT 116
44473: PUSH
44474: LD_INT 117
44476: PUSH
44477: LD_INT 118
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: ST_TO_ADDR
44497: GO 46752
44499: LD_INT 9
44501: DOUBLE
44502: EQUAL
44503: IFTRUE 44507
44505: GO 44655
44507: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
44508: LD_ADDR_VAR 0 2
44512: PUSH
44513: LD_INT 2
44515: PUSH
44516: LD_INT 4
44518: PUSH
44519: LD_INT 5
44521: PUSH
44522: LD_INT 6
44524: PUSH
44525: LD_INT 7
44527: PUSH
44528: LD_INT 8
44530: PUSH
44531: LD_INT 11
44533: PUSH
44534: LD_INT 12
44536: PUSH
44537: LD_INT 15
44539: PUSH
44540: LD_INT 16
44542: PUSH
44543: LD_INT 20
44545: PUSH
44546: LD_INT 21
44548: PUSH
44549: LD_INT 22
44551: PUSH
44552: LD_INT 23
44554: PUSH
44555: LD_INT 25
44557: PUSH
44558: LD_INT 26
44560: PUSH
44561: LD_INT 28
44563: PUSH
44564: LD_INT 30
44566: PUSH
44567: LD_INT 31
44569: PUSH
44570: LD_INT 32
44572: PUSH
44573: LD_INT 36
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 101
44601: PUSH
44602: LD_INT 102
44604: PUSH
44605: LD_INT 103
44607: PUSH
44608: LD_INT 105
44610: PUSH
44611: LD_INT 106
44613: PUSH
44614: LD_INT 108
44616: PUSH
44617: LD_INT 109
44619: PUSH
44620: LD_INT 112
44622: PUSH
44623: LD_INT 114
44625: PUSH
44626: LD_INT 116
44628: PUSH
44629: LD_INT 117
44631: PUSH
44632: LD_INT 118
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: ST_TO_ADDR
44653: GO 46752
44655: LD_INT 10
44657: DOUBLE
44658: EQUAL
44659: IFTRUE 44663
44661: GO 44859
44663: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
44664: LD_ADDR_VAR 0 2
44668: PUSH
44669: LD_INT 2
44671: PUSH
44672: LD_INT 4
44674: PUSH
44675: LD_INT 5
44677: PUSH
44678: LD_INT 6
44680: PUSH
44681: LD_INT 7
44683: PUSH
44684: LD_INT 8
44686: PUSH
44687: LD_INT 9
44689: PUSH
44690: LD_INT 10
44692: PUSH
44693: LD_INT 11
44695: PUSH
44696: LD_INT 12
44698: PUSH
44699: LD_INT 13
44701: PUSH
44702: LD_INT 14
44704: PUSH
44705: LD_INT 15
44707: PUSH
44708: LD_INT 16
44710: PUSH
44711: LD_INT 17
44713: PUSH
44714: LD_INT 18
44716: PUSH
44717: LD_INT 19
44719: PUSH
44720: LD_INT 20
44722: PUSH
44723: LD_INT 21
44725: PUSH
44726: LD_INT 22
44728: PUSH
44729: LD_INT 23
44731: PUSH
44732: LD_INT 24
44734: PUSH
44735: LD_INT 25
44737: PUSH
44738: LD_INT 26
44740: PUSH
44741: LD_INT 28
44743: PUSH
44744: LD_INT 30
44746: PUSH
44747: LD_INT 31
44749: PUSH
44750: LD_INT 32
44752: PUSH
44753: LD_INT 36
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 101
44789: PUSH
44790: LD_INT 102
44792: PUSH
44793: LD_INT 103
44795: PUSH
44796: LD_INT 104
44798: PUSH
44799: LD_INT 105
44801: PUSH
44802: LD_INT 106
44804: PUSH
44805: LD_INT 107
44807: PUSH
44808: LD_INT 108
44810: PUSH
44811: LD_INT 109
44813: PUSH
44814: LD_INT 110
44816: PUSH
44817: LD_INT 111
44819: PUSH
44820: LD_INT 112
44822: PUSH
44823: LD_INT 114
44825: PUSH
44826: LD_INT 116
44828: PUSH
44829: LD_INT 117
44831: PUSH
44832: LD_INT 118
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: ST_TO_ADDR
44857: GO 46752
44859: LD_INT 11
44861: DOUBLE
44862: EQUAL
44863: IFTRUE 44867
44865: GO 45071
44867: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
44868: LD_ADDR_VAR 0 2
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: LD_INT 3
44878: PUSH
44879: LD_INT 4
44881: PUSH
44882: LD_INT 5
44884: PUSH
44885: LD_INT 6
44887: PUSH
44888: LD_INT 7
44890: PUSH
44891: LD_INT 8
44893: PUSH
44894: LD_INT 9
44896: PUSH
44897: LD_INT 10
44899: PUSH
44900: LD_INT 11
44902: PUSH
44903: LD_INT 12
44905: PUSH
44906: LD_INT 13
44908: PUSH
44909: LD_INT 14
44911: PUSH
44912: LD_INT 15
44914: PUSH
44915: LD_INT 16
44917: PUSH
44918: LD_INT 17
44920: PUSH
44921: LD_INT 18
44923: PUSH
44924: LD_INT 19
44926: PUSH
44927: LD_INT 20
44929: PUSH
44930: LD_INT 21
44932: PUSH
44933: LD_INT 22
44935: PUSH
44936: LD_INT 23
44938: PUSH
44939: LD_INT 24
44941: PUSH
44942: LD_INT 25
44944: PUSH
44945: LD_INT 26
44947: PUSH
44948: LD_INT 28
44950: PUSH
44951: LD_INT 30
44953: PUSH
44954: LD_INT 31
44956: PUSH
44957: LD_INT 32
44959: PUSH
44960: LD_INT 34
44962: PUSH
44963: LD_INT 36
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 101
45001: PUSH
45002: LD_INT 102
45004: PUSH
45005: LD_INT 103
45007: PUSH
45008: LD_INT 104
45010: PUSH
45011: LD_INT 105
45013: PUSH
45014: LD_INT 106
45016: PUSH
45017: LD_INT 107
45019: PUSH
45020: LD_INT 108
45022: PUSH
45023: LD_INT 109
45025: PUSH
45026: LD_INT 110
45028: PUSH
45029: LD_INT 111
45031: PUSH
45032: LD_INT 112
45034: PUSH
45035: LD_INT 114
45037: PUSH
45038: LD_INT 116
45040: PUSH
45041: LD_INT 117
45043: PUSH
45044: LD_INT 118
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: ST_TO_ADDR
45069: GO 46752
45071: LD_INT 12
45073: DOUBLE
45074: EQUAL
45075: IFTRUE 45079
45077: GO 45299
45079: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
45080: LD_ADDR_VAR 0 2
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: LD_INT 2
45090: PUSH
45091: LD_INT 3
45093: PUSH
45094: LD_INT 4
45096: PUSH
45097: LD_INT 5
45099: PUSH
45100: LD_INT 6
45102: PUSH
45103: LD_INT 7
45105: PUSH
45106: LD_INT 8
45108: PUSH
45109: LD_INT 9
45111: PUSH
45112: LD_INT 10
45114: PUSH
45115: LD_INT 11
45117: PUSH
45118: LD_INT 12
45120: PUSH
45121: LD_INT 13
45123: PUSH
45124: LD_INT 14
45126: PUSH
45127: LD_INT 15
45129: PUSH
45130: LD_INT 16
45132: PUSH
45133: LD_INT 17
45135: PUSH
45136: LD_INT 18
45138: PUSH
45139: LD_INT 19
45141: PUSH
45142: LD_INT 20
45144: PUSH
45145: LD_INT 21
45147: PUSH
45148: LD_INT 22
45150: PUSH
45151: LD_INT 23
45153: PUSH
45154: LD_INT 24
45156: PUSH
45157: LD_INT 25
45159: PUSH
45160: LD_INT 26
45162: PUSH
45163: LD_INT 27
45165: PUSH
45166: LD_INT 28
45168: PUSH
45169: LD_INT 30
45171: PUSH
45172: LD_INT 31
45174: PUSH
45175: LD_INT 32
45177: PUSH
45178: LD_INT 33
45180: PUSH
45181: LD_INT 34
45183: PUSH
45184: LD_INT 36
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 101
45225: PUSH
45226: LD_INT 102
45228: PUSH
45229: LD_INT 103
45231: PUSH
45232: LD_INT 104
45234: PUSH
45235: LD_INT 105
45237: PUSH
45238: LD_INT 106
45240: PUSH
45241: LD_INT 107
45243: PUSH
45244: LD_INT 108
45246: PUSH
45247: LD_INT 109
45249: PUSH
45250: LD_INT 110
45252: PUSH
45253: LD_INT 111
45255: PUSH
45256: LD_INT 112
45258: PUSH
45259: LD_INT 113
45261: PUSH
45262: LD_INT 114
45264: PUSH
45265: LD_INT 116
45267: PUSH
45268: LD_INT 117
45270: PUSH
45271: LD_INT 118
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: ST_TO_ADDR
45297: GO 46752
45299: LD_INT 13
45301: DOUBLE
45302: EQUAL
45303: IFTRUE 45307
45305: GO 45515
45307: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
45308: LD_ADDR_VAR 0 2
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: LD_INT 2
45318: PUSH
45319: LD_INT 3
45321: PUSH
45322: LD_INT 4
45324: PUSH
45325: LD_INT 5
45327: PUSH
45328: LD_INT 8
45330: PUSH
45331: LD_INT 9
45333: PUSH
45334: LD_INT 10
45336: PUSH
45337: LD_INT 11
45339: PUSH
45340: LD_INT 12
45342: PUSH
45343: LD_INT 14
45345: PUSH
45346: LD_INT 15
45348: PUSH
45349: LD_INT 16
45351: PUSH
45352: LD_INT 17
45354: PUSH
45355: LD_INT 18
45357: PUSH
45358: LD_INT 19
45360: PUSH
45361: LD_INT 20
45363: PUSH
45364: LD_INT 21
45366: PUSH
45367: LD_INT 22
45369: PUSH
45370: LD_INT 23
45372: PUSH
45373: LD_INT 24
45375: PUSH
45376: LD_INT 25
45378: PUSH
45379: LD_INT 26
45381: PUSH
45382: LD_INT 27
45384: PUSH
45385: LD_INT 28
45387: PUSH
45388: LD_INT 30
45390: PUSH
45391: LD_INT 31
45393: PUSH
45394: LD_INT 32
45396: PUSH
45397: LD_INT 33
45399: PUSH
45400: LD_INT 34
45402: PUSH
45403: LD_INT 36
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 101
45441: PUSH
45442: LD_INT 102
45444: PUSH
45445: LD_INT 103
45447: PUSH
45448: LD_INT 104
45450: PUSH
45451: LD_INT 105
45453: PUSH
45454: LD_INT 106
45456: PUSH
45457: LD_INT 107
45459: PUSH
45460: LD_INT 108
45462: PUSH
45463: LD_INT 109
45465: PUSH
45466: LD_INT 110
45468: PUSH
45469: LD_INT 111
45471: PUSH
45472: LD_INT 112
45474: PUSH
45475: LD_INT 113
45477: PUSH
45478: LD_INT 114
45480: PUSH
45481: LD_INT 116
45483: PUSH
45484: LD_INT 117
45486: PUSH
45487: LD_INT 118
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: ST_TO_ADDR
45513: GO 46752
45515: LD_INT 14
45517: DOUBLE
45518: EQUAL
45519: IFTRUE 45523
45521: GO 45747
45523: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
45524: LD_ADDR_VAR 0 2
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: LD_INT 3
45537: PUSH
45538: LD_INT 4
45540: PUSH
45541: LD_INT 5
45543: PUSH
45544: LD_INT 6
45546: PUSH
45547: LD_INT 7
45549: PUSH
45550: LD_INT 8
45552: PUSH
45553: LD_INT 9
45555: PUSH
45556: LD_INT 10
45558: PUSH
45559: LD_INT 11
45561: PUSH
45562: LD_INT 12
45564: PUSH
45565: LD_INT 13
45567: PUSH
45568: LD_INT 14
45570: PUSH
45571: LD_INT 15
45573: PUSH
45574: LD_INT 16
45576: PUSH
45577: LD_INT 17
45579: PUSH
45580: LD_INT 18
45582: PUSH
45583: LD_INT 19
45585: PUSH
45586: LD_INT 20
45588: PUSH
45589: LD_INT 21
45591: PUSH
45592: LD_INT 22
45594: PUSH
45595: LD_INT 23
45597: PUSH
45598: LD_INT 24
45600: PUSH
45601: LD_INT 25
45603: PUSH
45604: LD_INT 26
45606: PUSH
45607: LD_INT 27
45609: PUSH
45610: LD_INT 28
45612: PUSH
45613: LD_INT 29
45615: PUSH
45616: LD_INT 30
45618: PUSH
45619: LD_INT 31
45621: PUSH
45622: LD_INT 32
45624: PUSH
45625: LD_INT 33
45627: PUSH
45628: LD_INT 34
45630: PUSH
45631: LD_INT 36
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 101
45673: PUSH
45674: LD_INT 102
45676: PUSH
45677: LD_INT 103
45679: PUSH
45680: LD_INT 104
45682: PUSH
45683: LD_INT 105
45685: PUSH
45686: LD_INT 106
45688: PUSH
45689: LD_INT 107
45691: PUSH
45692: LD_INT 108
45694: PUSH
45695: LD_INT 109
45697: PUSH
45698: LD_INT 110
45700: PUSH
45701: LD_INT 111
45703: PUSH
45704: LD_INT 112
45706: PUSH
45707: LD_INT 113
45709: PUSH
45710: LD_INT 114
45712: PUSH
45713: LD_INT 116
45715: PUSH
45716: LD_INT 117
45718: PUSH
45719: LD_INT 118
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: ST_TO_ADDR
45745: GO 46752
45747: LD_INT 15
45749: DOUBLE
45750: EQUAL
45751: IFTRUE 45755
45753: GO 45979
45755: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
45756: LD_ADDR_VAR 0 2
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: LD_INT 2
45766: PUSH
45767: LD_INT 3
45769: PUSH
45770: LD_INT 4
45772: PUSH
45773: LD_INT 5
45775: PUSH
45776: LD_INT 6
45778: PUSH
45779: LD_INT 7
45781: PUSH
45782: LD_INT 8
45784: PUSH
45785: LD_INT 9
45787: PUSH
45788: LD_INT 10
45790: PUSH
45791: LD_INT 11
45793: PUSH
45794: LD_INT 12
45796: PUSH
45797: LD_INT 13
45799: PUSH
45800: LD_INT 14
45802: PUSH
45803: LD_INT 15
45805: PUSH
45806: LD_INT 16
45808: PUSH
45809: LD_INT 17
45811: PUSH
45812: LD_INT 18
45814: PUSH
45815: LD_INT 19
45817: PUSH
45818: LD_INT 20
45820: PUSH
45821: LD_INT 21
45823: PUSH
45824: LD_INT 22
45826: PUSH
45827: LD_INT 23
45829: PUSH
45830: LD_INT 24
45832: PUSH
45833: LD_INT 25
45835: PUSH
45836: LD_INT 26
45838: PUSH
45839: LD_INT 27
45841: PUSH
45842: LD_INT 28
45844: PUSH
45845: LD_INT 29
45847: PUSH
45848: LD_INT 30
45850: PUSH
45851: LD_INT 31
45853: PUSH
45854: LD_INT 32
45856: PUSH
45857: LD_INT 33
45859: PUSH
45860: LD_INT 34
45862: PUSH
45863: LD_INT 36
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 101
45905: PUSH
45906: LD_INT 102
45908: PUSH
45909: LD_INT 103
45911: PUSH
45912: LD_INT 104
45914: PUSH
45915: LD_INT 105
45917: PUSH
45918: LD_INT 106
45920: PUSH
45921: LD_INT 107
45923: PUSH
45924: LD_INT 108
45926: PUSH
45927: LD_INT 109
45929: PUSH
45930: LD_INT 110
45932: PUSH
45933: LD_INT 111
45935: PUSH
45936: LD_INT 112
45938: PUSH
45939: LD_INT 113
45941: PUSH
45942: LD_INT 114
45944: PUSH
45945: LD_INT 116
45947: PUSH
45948: LD_INT 117
45950: PUSH
45951: LD_INT 118
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: ST_TO_ADDR
45977: GO 46752
45979: LD_INT 16
45981: DOUBLE
45982: EQUAL
45983: IFTRUE 45987
45985: GO 46123
45987: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
45988: LD_ADDR_VAR 0 2
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: LD_INT 4
45998: PUSH
45999: LD_INT 5
46001: PUSH
46002: LD_INT 7
46004: PUSH
46005: LD_INT 11
46007: PUSH
46008: LD_INT 12
46010: PUSH
46011: LD_INT 15
46013: PUSH
46014: LD_INT 16
46016: PUSH
46017: LD_INT 20
46019: PUSH
46020: LD_INT 21
46022: PUSH
46023: LD_INT 22
46025: PUSH
46026: LD_INT 23
46028: PUSH
46029: LD_INT 25
46031: PUSH
46032: LD_INT 26
46034: PUSH
46035: LD_INT 30
46037: PUSH
46038: LD_INT 31
46040: PUSH
46041: LD_INT 32
46043: PUSH
46044: LD_INT 33
46046: PUSH
46047: LD_INT 34
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 101
46073: PUSH
46074: LD_INT 102
46076: PUSH
46077: LD_INT 103
46079: PUSH
46080: LD_INT 106
46082: PUSH
46083: LD_INT 108
46085: PUSH
46086: LD_INT 112
46088: PUSH
46089: LD_INT 113
46091: PUSH
46092: LD_INT 114
46094: PUSH
46095: LD_INT 116
46097: PUSH
46098: LD_INT 117
46100: PUSH
46101: LD_INT 118
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: ST_TO_ADDR
46121: GO 46752
46123: LD_INT 17
46125: DOUBLE
46126: EQUAL
46127: IFTRUE 46131
46129: GO 46355
46131: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
46132: LD_ADDR_VAR 0 2
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: LD_INT 2
46142: PUSH
46143: LD_INT 3
46145: PUSH
46146: LD_INT 4
46148: PUSH
46149: LD_INT 5
46151: PUSH
46152: LD_INT 6
46154: PUSH
46155: LD_INT 7
46157: PUSH
46158: LD_INT 8
46160: PUSH
46161: LD_INT 9
46163: PUSH
46164: LD_INT 10
46166: PUSH
46167: LD_INT 11
46169: PUSH
46170: LD_INT 12
46172: PUSH
46173: LD_INT 13
46175: PUSH
46176: LD_INT 14
46178: PUSH
46179: LD_INT 15
46181: PUSH
46182: LD_INT 16
46184: PUSH
46185: LD_INT 17
46187: PUSH
46188: LD_INT 18
46190: PUSH
46191: LD_INT 19
46193: PUSH
46194: LD_INT 20
46196: PUSH
46197: LD_INT 21
46199: PUSH
46200: LD_INT 22
46202: PUSH
46203: LD_INT 23
46205: PUSH
46206: LD_INT 24
46208: PUSH
46209: LD_INT 25
46211: PUSH
46212: LD_INT 26
46214: PUSH
46215: LD_INT 27
46217: PUSH
46218: LD_INT 28
46220: PUSH
46221: LD_INT 29
46223: PUSH
46224: LD_INT 30
46226: PUSH
46227: LD_INT 31
46229: PUSH
46230: LD_INT 32
46232: PUSH
46233: LD_INT 33
46235: PUSH
46236: LD_INT 34
46238: PUSH
46239: LD_INT 36
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 101
46281: PUSH
46282: LD_INT 102
46284: PUSH
46285: LD_INT 103
46287: PUSH
46288: LD_INT 104
46290: PUSH
46291: LD_INT 105
46293: PUSH
46294: LD_INT 106
46296: PUSH
46297: LD_INT 107
46299: PUSH
46300: LD_INT 108
46302: PUSH
46303: LD_INT 109
46305: PUSH
46306: LD_INT 110
46308: PUSH
46309: LD_INT 111
46311: PUSH
46312: LD_INT 112
46314: PUSH
46315: LD_INT 113
46317: PUSH
46318: LD_INT 114
46320: PUSH
46321: LD_INT 116
46323: PUSH
46324: LD_INT 117
46326: PUSH
46327: LD_INT 118
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: ST_TO_ADDR
46353: GO 46752
46355: LD_INT 18
46357: DOUBLE
46358: EQUAL
46359: IFTRUE 46363
46361: GO 46511
46363: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
46364: LD_ADDR_VAR 0 2
46368: PUSH
46369: LD_INT 2
46371: PUSH
46372: LD_INT 4
46374: PUSH
46375: LD_INT 5
46377: PUSH
46378: LD_INT 7
46380: PUSH
46381: LD_INT 11
46383: PUSH
46384: LD_INT 12
46386: PUSH
46387: LD_INT 15
46389: PUSH
46390: LD_INT 16
46392: PUSH
46393: LD_INT 20
46395: PUSH
46396: LD_INT 21
46398: PUSH
46399: LD_INT 22
46401: PUSH
46402: LD_INT 23
46404: PUSH
46405: LD_INT 25
46407: PUSH
46408: LD_INT 26
46410: PUSH
46411: LD_INT 30
46413: PUSH
46414: LD_INT 31
46416: PUSH
46417: LD_INT 32
46419: PUSH
46420: LD_INT 33
46422: PUSH
46423: LD_INT 34
46425: PUSH
46426: LD_INT 35
46428: PUSH
46429: LD_INT 36
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 101
46457: PUSH
46458: LD_INT 102
46460: PUSH
46461: LD_INT 103
46463: PUSH
46464: LD_INT 106
46466: PUSH
46467: LD_INT 108
46469: PUSH
46470: LD_INT 112
46472: PUSH
46473: LD_INT 113
46475: PUSH
46476: LD_INT 114
46478: PUSH
46479: LD_INT 115
46481: PUSH
46482: LD_INT 116
46484: PUSH
46485: LD_INT 117
46487: PUSH
46488: LD_INT 118
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: ST_TO_ADDR
46509: GO 46752
46511: LD_INT 19
46513: DOUBLE
46514: EQUAL
46515: IFTRUE 46519
46517: GO 46751
46519: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
46520: LD_ADDR_VAR 0 2
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: LD_INT 2
46530: PUSH
46531: LD_INT 3
46533: PUSH
46534: LD_INT 4
46536: PUSH
46537: LD_INT 5
46539: PUSH
46540: LD_INT 6
46542: PUSH
46543: LD_INT 7
46545: PUSH
46546: LD_INT 8
46548: PUSH
46549: LD_INT 9
46551: PUSH
46552: LD_INT 10
46554: PUSH
46555: LD_INT 11
46557: PUSH
46558: LD_INT 12
46560: PUSH
46561: LD_INT 13
46563: PUSH
46564: LD_INT 14
46566: PUSH
46567: LD_INT 15
46569: PUSH
46570: LD_INT 16
46572: PUSH
46573: LD_INT 17
46575: PUSH
46576: LD_INT 18
46578: PUSH
46579: LD_INT 19
46581: PUSH
46582: LD_INT 20
46584: PUSH
46585: LD_INT 21
46587: PUSH
46588: LD_INT 22
46590: PUSH
46591: LD_INT 23
46593: PUSH
46594: LD_INT 24
46596: PUSH
46597: LD_INT 25
46599: PUSH
46600: LD_INT 26
46602: PUSH
46603: LD_INT 27
46605: PUSH
46606: LD_INT 28
46608: PUSH
46609: LD_INT 29
46611: PUSH
46612: LD_INT 30
46614: PUSH
46615: LD_INT 31
46617: PUSH
46618: LD_INT 32
46620: PUSH
46621: LD_INT 33
46623: PUSH
46624: LD_INT 34
46626: PUSH
46627: LD_INT 35
46629: PUSH
46630: LD_INT 36
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 101
46673: PUSH
46674: LD_INT 102
46676: PUSH
46677: LD_INT 103
46679: PUSH
46680: LD_INT 104
46682: PUSH
46683: LD_INT 105
46685: PUSH
46686: LD_INT 106
46688: PUSH
46689: LD_INT 107
46691: PUSH
46692: LD_INT 108
46694: PUSH
46695: LD_INT 109
46697: PUSH
46698: LD_INT 110
46700: PUSH
46701: LD_INT 111
46703: PUSH
46704: LD_INT 112
46706: PUSH
46707: LD_INT 113
46709: PUSH
46710: LD_INT 114
46712: PUSH
46713: LD_INT 115
46715: PUSH
46716: LD_INT 116
46718: PUSH
46719: LD_INT 117
46721: PUSH
46722: LD_INT 118
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: ST_TO_ADDR
46749: GO 46752
46751: POP
// end else
46752: GO 46983
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
46754: LD_ADDR_VAR 0 2
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: LD_INT 2
46764: PUSH
46765: LD_INT 3
46767: PUSH
46768: LD_INT 4
46770: PUSH
46771: LD_INT 5
46773: PUSH
46774: LD_INT 6
46776: PUSH
46777: LD_INT 7
46779: PUSH
46780: LD_INT 8
46782: PUSH
46783: LD_INT 9
46785: PUSH
46786: LD_INT 10
46788: PUSH
46789: LD_INT 11
46791: PUSH
46792: LD_INT 12
46794: PUSH
46795: LD_INT 13
46797: PUSH
46798: LD_INT 14
46800: PUSH
46801: LD_INT 15
46803: PUSH
46804: LD_INT 16
46806: PUSH
46807: LD_INT 17
46809: PUSH
46810: LD_INT 18
46812: PUSH
46813: LD_INT 19
46815: PUSH
46816: LD_INT 20
46818: PUSH
46819: LD_INT 21
46821: PUSH
46822: LD_INT 22
46824: PUSH
46825: LD_INT 23
46827: PUSH
46828: LD_INT 24
46830: PUSH
46831: LD_INT 25
46833: PUSH
46834: LD_INT 26
46836: PUSH
46837: LD_INT 27
46839: PUSH
46840: LD_INT 28
46842: PUSH
46843: LD_INT 29
46845: PUSH
46846: LD_INT 30
46848: PUSH
46849: LD_INT 31
46851: PUSH
46852: LD_INT 32
46854: PUSH
46855: LD_INT 33
46857: PUSH
46858: LD_INT 34
46860: PUSH
46861: LD_INT 35
46863: PUSH
46864: LD_INT 36
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 101
46907: PUSH
46908: LD_INT 102
46910: PUSH
46911: LD_INT 103
46913: PUSH
46914: LD_INT 104
46916: PUSH
46917: LD_INT 105
46919: PUSH
46920: LD_INT 106
46922: PUSH
46923: LD_INT 107
46925: PUSH
46926: LD_INT 108
46928: PUSH
46929: LD_INT 109
46931: PUSH
46932: LD_INT 110
46934: PUSH
46935: LD_INT 111
46937: PUSH
46938: LD_INT 112
46940: PUSH
46941: LD_INT 113
46943: PUSH
46944: LD_INT 114
46946: PUSH
46947: LD_INT 115
46949: PUSH
46950: LD_INT 116
46952: PUSH
46953: LD_INT 117
46955: PUSH
46956: LD_INT 118
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: ST_TO_ADDR
// if result then
46983: LD_VAR 0 2
46987: IFFALSE 47773
// begin normal :=  ;
46989: LD_ADDR_VAR 0 5
46993: PUSH
46994: LD_STRING 
46996: ST_TO_ADDR
// hardcore :=  ;
46997: LD_ADDR_VAR 0 6
47001: PUSH
47002: LD_STRING 
47004: ST_TO_ADDR
// active :=  ;
47005: LD_ADDR_VAR 0 7
47009: PUSH
47010: LD_STRING 
47012: ST_TO_ADDR
// for i = 1 to normalCounter do
47013: LD_ADDR_VAR 0 8
47017: PUSH
47018: DOUBLE
47019: LD_INT 1
47021: DEC
47022: ST_TO_ADDR
47023: LD_EXP 37
47027: PUSH
47028: FOR_TO
47029: IFFALSE 47130
// begin tmp := 0 ;
47031: LD_ADDR_VAR 0 3
47035: PUSH
47036: LD_STRING 0
47038: ST_TO_ADDR
// if result [ 1 ] then
47039: LD_VAR 0 2
47043: PUSH
47044: LD_INT 1
47046: ARRAY
47047: IFFALSE 47112
// if result [ 1 ] [ 1 ] = i then
47049: LD_VAR 0 2
47053: PUSH
47054: LD_INT 1
47056: ARRAY
47057: PUSH
47058: LD_INT 1
47060: ARRAY
47061: PUSH
47062: LD_VAR 0 8
47066: EQUAL
47067: IFFALSE 47112
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
47069: LD_ADDR_VAR 0 2
47073: PUSH
47074: LD_VAR 0 2
47078: PPUSH
47079: LD_INT 1
47081: PPUSH
47082: LD_VAR 0 2
47086: PUSH
47087: LD_INT 1
47089: ARRAY
47090: PPUSH
47091: LD_INT 1
47093: PPUSH
47094: CALL_OW 3
47098: PPUSH
47099: CALL_OW 1
47103: ST_TO_ADDR
// tmp := 1 ;
47104: LD_ADDR_VAR 0 3
47108: PUSH
47109: LD_STRING 1
47111: ST_TO_ADDR
// end ; normal := normal & tmp ;
47112: LD_ADDR_VAR 0 5
47116: PUSH
47117: LD_VAR 0 5
47121: PUSH
47122: LD_VAR 0 3
47126: STR
47127: ST_TO_ADDR
// end ;
47128: GO 47028
47130: POP
47131: POP
// for i = 1 to hardcoreCounter do
47132: LD_ADDR_VAR 0 8
47136: PUSH
47137: DOUBLE
47138: LD_INT 1
47140: DEC
47141: ST_TO_ADDR
47142: LD_EXP 38
47146: PUSH
47147: FOR_TO
47148: IFFALSE 47253
// begin tmp := 0 ;
47150: LD_ADDR_VAR 0 3
47154: PUSH
47155: LD_STRING 0
47157: ST_TO_ADDR
// if result [ 2 ] then
47158: LD_VAR 0 2
47162: PUSH
47163: LD_INT 2
47165: ARRAY
47166: IFFALSE 47235
// if result [ 2 ] [ 1 ] = 100 + i then
47168: LD_VAR 0 2
47172: PUSH
47173: LD_INT 2
47175: ARRAY
47176: PUSH
47177: LD_INT 1
47179: ARRAY
47180: PUSH
47181: LD_INT 100
47183: PUSH
47184: LD_VAR 0 8
47188: PLUS
47189: EQUAL
47190: IFFALSE 47235
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
47192: LD_ADDR_VAR 0 2
47196: PUSH
47197: LD_VAR 0 2
47201: PPUSH
47202: LD_INT 2
47204: PPUSH
47205: LD_VAR 0 2
47209: PUSH
47210: LD_INT 2
47212: ARRAY
47213: PPUSH
47214: LD_INT 1
47216: PPUSH
47217: CALL_OW 3
47221: PPUSH
47222: CALL_OW 1
47226: ST_TO_ADDR
// tmp := 1 ;
47227: LD_ADDR_VAR 0 3
47231: PUSH
47232: LD_STRING 1
47234: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
47235: LD_ADDR_VAR 0 6
47239: PUSH
47240: LD_VAR 0 6
47244: PUSH
47245: LD_VAR 0 3
47249: STR
47250: ST_TO_ADDR
// end ;
47251: GO 47147
47253: POP
47254: POP
// if isGameLoad then
47255: LD_VAR 0 1
47259: IFFALSE 47734
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
47261: LD_ADDR_VAR 0 4
47265: PUSH
47266: LD_EXP 41
47270: PUSH
47271: LD_EXP 40
47275: PUSH
47276: LD_EXP 42
47280: PUSH
47281: LD_EXP 39
47285: PUSH
47286: LD_EXP 43
47290: PUSH
47291: LD_EXP 44
47295: PUSH
47296: LD_EXP 45
47300: PUSH
47301: LD_EXP 46
47305: PUSH
47306: LD_EXP 47
47310: PUSH
47311: LD_EXP 48
47315: PUSH
47316: LD_EXP 49
47320: PUSH
47321: LD_EXP 50
47325: PUSH
47326: LD_EXP 51
47330: PUSH
47331: LD_EXP 52
47335: PUSH
47336: LD_EXP 60
47340: PUSH
47341: LD_EXP 61
47345: PUSH
47346: LD_EXP 62
47350: PUSH
47351: LD_EXP 63
47355: PUSH
47356: LD_EXP 65
47360: PUSH
47361: LD_EXP 66
47365: PUSH
47366: LD_EXP 67
47370: PUSH
47371: LD_EXP 70
47375: PUSH
47376: LD_EXP 72
47380: PUSH
47381: LD_EXP 73
47385: PUSH
47386: LD_EXP 74
47390: PUSH
47391: LD_EXP 76
47395: PUSH
47396: LD_EXP 77
47400: PUSH
47401: LD_EXP 80
47405: PUSH
47406: LD_EXP 81
47410: PUSH
47411: LD_EXP 82
47415: PUSH
47416: LD_EXP 83
47420: PUSH
47421: LD_EXP 84
47425: PUSH
47426: LD_EXP 85
47430: PUSH
47431: LD_EXP 86
47435: PUSH
47436: LD_EXP 87
47440: PUSH
47441: LD_EXP 88
47445: PUSH
47446: LD_EXP 53
47450: PUSH
47451: LD_EXP 54
47455: PUSH
47456: LD_EXP 57
47460: PUSH
47461: LD_EXP 58
47465: PUSH
47466: LD_EXP 59
47470: PUSH
47471: LD_EXP 55
47475: PUSH
47476: LD_EXP 56
47480: PUSH
47481: LD_EXP 64
47485: PUSH
47486: LD_EXP 68
47490: PUSH
47491: LD_EXP 69
47495: PUSH
47496: LD_EXP 71
47500: PUSH
47501: LD_EXP 75
47505: PUSH
47506: LD_EXP 78
47510: PUSH
47511: LD_EXP 79
47515: PUSH
47516: LD_EXP 89
47520: PUSH
47521: LD_EXP 90
47525: PUSH
47526: LD_EXP 91
47530: PUSH
47531: LD_EXP 92
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: ST_TO_ADDR
// tmp :=  ;
47592: LD_ADDR_VAR 0 3
47596: PUSH
47597: LD_STRING 
47599: ST_TO_ADDR
// for i = 1 to normalCounter do
47600: LD_ADDR_VAR 0 8
47604: PUSH
47605: DOUBLE
47606: LD_INT 1
47608: DEC
47609: ST_TO_ADDR
47610: LD_EXP 37
47614: PUSH
47615: FOR_TO
47616: IFFALSE 47652
// begin if flags [ i ] then
47618: LD_VAR 0 4
47622: PUSH
47623: LD_VAR 0 8
47627: ARRAY
47628: IFFALSE 47650
// tmp := tmp & i & ; ;
47630: LD_ADDR_VAR 0 3
47634: PUSH
47635: LD_VAR 0 3
47639: PUSH
47640: LD_VAR 0 8
47644: STR
47645: PUSH
47646: LD_STRING ;
47648: STR
47649: ST_TO_ADDR
// end ;
47650: GO 47615
47652: POP
47653: POP
// for i = 1 to hardcoreCounter do
47654: LD_ADDR_VAR 0 8
47658: PUSH
47659: DOUBLE
47660: LD_INT 1
47662: DEC
47663: ST_TO_ADDR
47664: LD_EXP 38
47668: PUSH
47669: FOR_TO
47670: IFFALSE 47716
// begin if flags [ normalCounter + i ] then
47672: LD_VAR 0 4
47676: PUSH
47677: LD_EXP 37
47681: PUSH
47682: LD_VAR 0 8
47686: PLUS
47687: ARRAY
47688: IFFALSE 47714
// tmp := tmp & ( 100 + i ) & ; ;
47690: LD_ADDR_VAR 0 3
47694: PUSH
47695: LD_VAR 0 3
47699: PUSH
47700: LD_INT 100
47702: PUSH
47703: LD_VAR 0 8
47707: PLUS
47708: STR
47709: PUSH
47710: LD_STRING ;
47712: STR
47713: ST_TO_ADDR
// end ;
47714: GO 47669
47716: POP
47717: POP
// if tmp then
47718: LD_VAR 0 3
47722: IFFALSE 47734
// active := tmp ;
47724: LD_ADDR_VAR 0 7
47728: PUSH
47729: LD_VAR 0 3
47733: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
47734: LD_STRING getStreamItemsFromMission("
47736: PUSH
47737: LD_VAR 0 5
47741: STR
47742: PUSH
47743: LD_STRING ","
47745: STR
47746: PUSH
47747: LD_VAR 0 6
47751: STR
47752: PUSH
47753: LD_STRING ","
47755: STR
47756: PUSH
47757: LD_VAR 0 7
47761: STR
47762: PUSH
47763: LD_STRING ")
47765: STR
47766: PPUSH
47767: CALL_OW 559
// end else
47771: GO 47780
// ToLua ( getStreamItemsFromMission("","","") ) ;
47773: LD_STRING getStreamItemsFromMission("","","")
47775: PPUSH
47776: CALL_OW 559
// end ;
47780: LD_VAR 0 2
47784: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
47785: LD_EXP 36
47789: PUSH
47790: LD_EXP 41
47794: AND
47795: IFFALSE 47919
47797: GO 47799
47799: DISABLE
47800: LD_INT 0
47802: PPUSH
47803: PPUSH
// begin enable ;
47804: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
47805: LD_ADDR_VAR 0 2
47809: PUSH
47810: LD_INT 22
47812: PUSH
47813: LD_OWVAR 2
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: LD_INT 34
47827: PUSH
47828: LD_INT 7
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 34
47837: PUSH
47838: LD_INT 45
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 34
47847: PUSH
47848: LD_INT 28
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 34
47857: PUSH
47858: LD_INT 47
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PPUSH
47876: CALL_OW 69
47880: ST_TO_ADDR
// if not tmp then
47881: LD_VAR 0 2
47885: NOT
47886: IFFALSE 47890
// exit ;
47888: GO 47919
// for i in tmp do
47890: LD_ADDR_VAR 0 1
47894: PUSH
47895: LD_VAR 0 2
47899: PUSH
47900: FOR_IN
47901: IFFALSE 47917
// begin SetLives ( i , 0 ) ;
47903: LD_VAR 0 1
47907: PPUSH
47908: LD_INT 0
47910: PPUSH
47911: CALL_OW 234
// end ;
47915: GO 47900
47917: POP
47918: POP
// end ;
47919: PPOPN 2
47921: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
47922: LD_EXP 36
47926: PUSH
47927: LD_EXP 42
47931: AND
47932: IFFALSE 48016
47934: GO 47936
47936: DISABLE
47937: LD_INT 0
47939: PPUSH
47940: PPUSH
// begin enable ;
47941: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
47942: LD_ADDR_VAR 0 2
47946: PUSH
47947: LD_INT 22
47949: PUSH
47950: LD_OWVAR 2
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 32
47961: PUSH
47962: LD_INT 3
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PPUSH
47973: CALL_OW 69
47977: ST_TO_ADDR
// if not tmp then
47978: LD_VAR 0 2
47982: NOT
47983: IFFALSE 47987
// exit ;
47985: GO 48016
// for i in tmp do
47987: LD_ADDR_VAR 0 1
47991: PUSH
47992: LD_VAR 0 2
47996: PUSH
47997: FOR_IN
47998: IFFALSE 48014
// begin SetLives ( i , 0 ) ;
48000: LD_VAR 0 1
48004: PPUSH
48005: LD_INT 0
48007: PPUSH
48008: CALL_OW 234
// end ;
48012: GO 47997
48014: POP
48015: POP
// end ;
48016: PPOPN 2
48018: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
48019: LD_EXP 36
48023: PUSH
48024: LD_EXP 39
48028: AND
48029: IFFALSE 48122
48031: GO 48033
48033: DISABLE
48034: LD_INT 0
48036: PPUSH
// begin enable ;
48037: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
48038: LD_ADDR_VAR 0 1
48042: PUSH
48043: LD_INT 22
48045: PUSH
48046: LD_OWVAR 2
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 2
48057: PUSH
48058: LD_INT 25
48060: PUSH
48061: LD_INT 5
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 25
48070: PUSH
48071: LD_INT 9
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 25
48080: PUSH
48081: LD_INT 8
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PPUSH
48098: CALL_OW 69
48102: PUSH
48103: FOR_IN
48104: IFFALSE 48120
// begin SetClass ( i , 1 ) ;
48106: LD_VAR 0 1
48110: PPUSH
48111: LD_INT 1
48113: PPUSH
48114: CALL_OW 336
// end ;
48118: GO 48103
48120: POP
48121: POP
// end ;
48122: PPOPN 1
48124: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
48125: LD_EXP 36
48129: PUSH
48130: LD_EXP 40
48134: AND
48135: PUSH
48136: LD_OWVAR 65
48140: PUSH
48141: LD_INT 7
48143: LESS
48144: AND
48145: IFFALSE 48159
48147: GO 48149
48149: DISABLE
// begin enable ;
48150: ENABLE
// game_speed := 7 ;
48151: LD_ADDR_OWVAR 65
48155: PUSH
48156: LD_INT 7
48158: ST_TO_ADDR
// end ;
48159: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
48160: LD_EXP 36
48164: PUSH
48165: LD_EXP 43
48169: AND
48170: IFFALSE 48372
48172: GO 48174
48174: DISABLE
48175: LD_INT 0
48177: PPUSH
48178: PPUSH
48179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
48180: LD_ADDR_VAR 0 3
48184: PUSH
48185: LD_INT 81
48187: PUSH
48188: LD_OWVAR 2
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 21
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PPUSH
48211: CALL_OW 69
48215: ST_TO_ADDR
// if not tmp then
48216: LD_VAR 0 3
48220: NOT
48221: IFFALSE 48225
// exit ;
48223: GO 48372
// if tmp > 5 then
48225: LD_VAR 0 3
48229: PUSH
48230: LD_INT 5
48232: GREATER
48233: IFFALSE 48245
// k := 5 else
48235: LD_ADDR_VAR 0 2
48239: PUSH
48240: LD_INT 5
48242: ST_TO_ADDR
48243: GO 48255
// k := tmp ;
48245: LD_ADDR_VAR 0 2
48249: PUSH
48250: LD_VAR 0 3
48254: ST_TO_ADDR
// for i := 1 to k do
48255: LD_ADDR_VAR 0 1
48259: PUSH
48260: DOUBLE
48261: LD_INT 1
48263: DEC
48264: ST_TO_ADDR
48265: LD_VAR 0 2
48269: PUSH
48270: FOR_TO
48271: IFFALSE 48370
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
48273: LD_VAR 0 3
48277: PUSH
48278: LD_VAR 0 1
48282: ARRAY
48283: PPUSH
48284: LD_VAR 0 1
48288: PUSH
48289: LD_INT 4
48291: MOD
48292: PUSH
48293: LD_INT 1
48295: PLUS
48296: PPUSH
48297: CALL_OW 259
48301: PUSH
48302: LD_INT 10
48304: LESS
48305: IFFALSE 48368
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
48307: LD_VAR 0 3
48311: PUSH
48312: LD_VAR 0 1
48316: ARRAY
48317: PPUSH
48318: LD_VAR 0 1
48322: PUSH
48323: LD_INT 4
48325: MOD
48326: PUSH
48327: LD_INT 1
48329: PLUS
48330: PPUSH
48331: LD_VAR 0 3
48335: PUSH
48336: LD_VAR 0 1
48340: ARRAY
48341: PPUSH
48342: LD_VAR 0 1
48346: PUSH
48347: LD_INT 4
48349: MOD
48350: PUSH
48351: LD_INT 1
48353: PLUS
48354: PPUSH
48355: CALL_OW 259
48359: PUSH
48360: LD_INT 1
48362: PLUS
48363: PPUSH
48364: CALL_OW 237
48368: GO 48270
48370: POP
48371: POP
// end ;
48372: PPOPN 3
48374: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
48375: LD_EXP 36
48379: PUSH
48380: LD_EXP 44
48384: AND
48385: IFFALSE 48405
48387: GO 48389
48389: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
48390: LD_INT 4
48392: PPUSH
48393: LD_OWVAR 2
48397: PPUSH
48398: LD_INT 0
48400: PPUSH
48401: CALL_OW 324
48405: END
// every 0 0$1 trigger StreamModeActive and sShovel do
48406: LD_EXP 36
48410: PUSH
48411: LD_EXP 73
48415: AND
48416: IFFALSE 48436
48418: GO 48420
48420: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
48421: LD_INT 19
48423: PPUSH
48424: LD_OWVAR 2
48428: PPUSH
48429: LD_INT 0
48431: PPUSH
48432: CALL_OW 324
48436: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
48437: LD_EXP 36
48441: PUSH
48442: LD_EXP 45
48446: AND
48447: IFFALSE 48549
48449: GO 48451
48451: DISABLE
48452: LD_INT 0
48454: PPUSH
48455: PPUSH
// begin enable ;
48456: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
48457: LD_ADDR_VAR 0 2
48461: PUSH
48462: LD_INT 22
48464: PUSH
48465: LD_OWVAR 2
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 2
48476: PUSH
48477: LD_INT 34
48479: PUSH
48480: LD_INT 11
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 34
48489: PUSH
48490: LD_INT 30
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: LIST
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PPUSH
48506: CALL_OW 69
48510: ST_TO_ADDR
// if not tmp then
48511: LD_VAR 0 2
48515: NOT
48516: IFFALSE 48520
// exit ;
48518: GO 48549
// for i in tmp do
48520: LD_ADDR_VAR 0 1
48524: PUSH
48525: LD_VAR 0 2
48529: PUSH
48530: FOR_IN
48531: IFFALSE 48547
// begin SetLives ( i , 0 ) ;
48533: LD_VAR 0 1
48537: PPUSH
48538: LD_INT 0
48540: PPUSH
48541: CALL_OW 234
// end ;
48545: GO 48530
48547: POP
48548: POP
// end ;
48549: PPOPN 2
48551: END
// every 0 0$1 trigger StreamModeActive and sBunker do
48552: LD_EXP 36
48556: PUSH
48557: LD_EXP 46
48561: AND
48562: IFFALSE 48582
48564: GO 48566
48566: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
48567: LD_INT 32
48569: PPUSH
48570: LD_OWVAR 2
48574: PPUSH
48575: LD_INT 0
48577: PPUSH
48578: CALL_OW 324
48582: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
48583: LD_EXP 36
48587: PUSH
48588: LD_EXP 47
48592: AND
48593: IFFALSE 48774
48595: GO 48597
48597: DISABLE
48598: LD_INT 0
48600: PPUSH
48601: PPUSH
48602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
48603: LD_ADDR_VAR 0 2
48607: PUSH
48608: LD_INT 22
48610: PUSH
48611: LD_OWVAR 2
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 33
48622: PUSH
48623: LD_INT 3
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PPUSH
48634: CALL_OW 69
48638: ST_TO_ADDR
// if not tmp then
48639: LD_VAR 0 2
48643: NOT
48644: IFFALSE 48648
// exit ;
48646: GO 48774
// side := 0 ;
48648: LD_ADDR_VAR 0 3
48652: PUSH
48653: LD_INT 0
48655: ST_TO_ADDR
// for i := 1 to 8 do
48656: LD_ADDR_VAR 0 1
48660: PUSH
48661: DOUBLE
48662: LD_INT 1
48664: DEC
48665: ST_TO_ADDR
48666: LD_INT 8
48668: PUSH
48669: FOR_TO
48670: IFFALSE 48718
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
48672: LD_OWVAR 2
48676: PUSH
48677: LD_VAR 0 1
48681: NONEQUAL
48682: PUSH
48683: LD_OWVAR 2
48687: PPUSH
48688: LD_VAR 0 1
48692: PPUSH
48693: CALL_OW 81
48697: PUSH
48698: LD_INT 2
48700: EQUAL
48701: AND
48702: IFFALSE 48716
// begin side := i ;
48704: LD_ADDR_VAR 0 3
48708: PUSH
48709: LD_VAR 0 1
48713: ST_TO_ADDR
// break ;
48714: GO 48718
// end ;
48716: GO 48669
48718: POP
48719: POP
// if not side then
48720: LD_VAR 0 3
48724: NOT
48725: IFFALSE 48729
// exit ;
48727: GO 48774
// for i := 1 to tmp do
48729: LD_ADDR_VAR 0 1
48733: PUSH
48734: DOUBLE
48735: LD_INT 1
48737: DEC
48738: ST_TO_ADDR
48739: LD_VAR 0 2
48743: PUSH
48744: FOR_TO
48745: IFFALSE 48772
// if Prob ( 60 ) then
48747: LD_INT 60
48749: PPUSH
48750: CALL_OW 13
48754: IFFALSE 48770
// SetSide ( i , side ) ;
48756: LD_VAR 0 1
48760: PPUSH
48761: LD_VAR 0 3
48765: PPUSH
48766: CALL_OW 235
48770: GO 48744
48772: POP
48773: POP
// end ;
48774: PPOPN 3
48776: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
48777: LD_EXP 36
48781: PUSH
48782: LD_EXP 49
48786: AND
48787: IFFALSE 48906
48789: GO 48791
48791: DISABLE
48792: LD_INT 0
48794: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
48795: LD_ADDR_VAR 0 1
48799: PUSH
48800: LD_INT 22
48802: PUSH
48803: LD_OWVAR 2
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 21
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 3
48824: PUSH
48825: LD_INT 23
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: LIST
48843: PPUSH
48844: CALL_OW 69
48848: PUSH
48849: FOR_IN
48850: IFFALSE 48904
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
48852: LD_VAR 0 1
48856: PPUSH
48857: CALL_OW 257
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: LD_INT 2
48867: PUSH
48868: LD_INT 3
48870: PUSH
48871: LD_INT 4
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: IN
48880: IFFALSE 48902
// SetClass ( un , rand ( 1 , 4 ) ) ;
48882: LD_VAR 0 1
48886: PPUSH
48887: LD_INT 1
48889: PPUSH
48890: LD_INT 4
48892: PPUSH
48893: CALL_OW 12
48897: PPUSH
48898: CALL_OW 336
48902: GO 48849
48904: POP
48905: POP
// end ;
48906: PPOPN 1
48908: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
48909: LD_EXP 36
48913: PUSH
48914: LD_EXP 48
48918: AND
48919: IFFALSE 48998
48921: GO 48923
48923: DISABLE
48924: LD_INT 0
48926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
48927: LD_ADDR_VAR 0 1
48931: PUSH
48932: LD_INT 22
48934: PUSH
48935: LD_OWVAR 2
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 21
48946: PUSH
48947: LD_INT 3
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PPUSH
48958: CALL_OW 69
48962: ST_TO_ADDR
// if not tmp then
48963: LD_VAR 0 1
48967: NOT
48968: IFFALSE 48972
// exit ;
48970: GO 48998
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
48972: LD_VAR 0 1
48976: PUSH
48977: LD_INT 1
48979: PPUSH
48980: LD_VAR 0 1
48984: PPUSH
48985: CALL_OW 12
48989: ARRAY
48990: PPUSH
48991: LD_INT 100
48993: PPUSH
48994: CALL_OW 234
// end ;
48998: PPOPN 1
49000: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
49001: LD_EXP 36
49005: PUSH
49006: LD_EXP 50
49010: AND
49011: IFFALSE 49109
49013: GO 49015
49015: DISABLE
49016: LD_INT 0
49018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
49019: LD_ADDR_VAR 0 1
49023: PUSH
49024: LD_INT 22
49026: PUSH
49027: LD_OWVAR 2
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 21
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PPUSH
49050: CALL_OW 69
49054: ST_TO_ADDR
// if not tmp then
49055: LD_VAR 0 1
49059: NOT
49060: IFFALSE 49064
// exit ;
49062: GO 49109
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
49064: LD_VAR 0 1
49068: PUSH
49069: LD_INT 1
49071: PPUSH
49072: LD_VAR 0 1
49076: PPUSH
49077: CALL_OW 12
49081: ARRAY
49082: PPUSH
49083: LD_INT 1
49085: PPUSH
49086: LD_INT 4
49088: PPUSH
49089: CALL_OW 12
49093: PPUSH
49094: LD_INT 3000
49096: PPUSH
49097: LD_INT 9000
49099: PPUSH
49100: CALL_OW 12
49104: PPUSH
49105: CALL_OW 492
// end ;
49109: PPOPN 1
49111: END
// every 0 0$1 trigger StreamModeActive and sDepot do
49112: LD_EXP 36
49116: PUSH
49117: LD_EXP 51
49121: AND
49122: IFFALSE 49142
49124: GO 49126
49126: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
49127: LD_INT 1
49129: PPUSH
49130: LD_OWVAR 2
49134: PPUSH
49135: LD_INT 0
49137: PPUSH
49138: CALL_OW 324
49142: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
49143: LD_EXP 36
49147: PUSH
49148: LD_EXP 52
49152: AND
49153: IFFALSE 49236
49155: GO 49157
49157: DISABLE
49158: LD_INT 0
49160: PPUSH
49161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
49162: LD_ADDR_VAR 0 2
49166: PUSH
49167: LD_INT 22
49169: PUSH
49170: LD_OWVAR 2
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 21
49181: PUSH
49182: LD_INT 3
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PPUSH
49193: CALL_OW 69
49197: ST_TO_ADDR
// if not tmp then
49198: LD_VAR 0 2
49202: NOT
49203: IFFALSE 49207
// exit ;
49205: GO 49236
// for i in tmp do
49207: LD_ADDR_VAR 0 1
49211: PUSH
49212: LD_VAR 0 2
49216: PUSH
49217: FOR_IN
49218: IFFALSE 49234
// SetBLevel ( i , 10 ) ;
49220: LD_VAR 0 1
49224: PPUSH
49225: LD_INT 10
49227: PPUSH
49228: CALL_OW 241
49232: GO 49217
49234: POP
49235: POP
// end ;
49236: PPOPN 2
49238: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
49239: LD_EXP 36
49243: PUSH
49244: LD_EXP 53
49248: AND
49249: IFFALSE 49360
49251: GO 49253
49253: DISABLE
49254: LD_INT 0
49256: PPUSH
49257: PPUSH
49258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
49259: LD_ADDR_VAR 0 3
49263: PUSH
49264: LD_INT 22
49266: PUSH
49267: LD_OWVAR 2
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 25
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PPUSH
49290: CALL_OW 69
49294: ST_TO_ADDR
// if not tmp then
49295: LD_VAR 0 3
49299: NOT
49300: IFFALSE 49304
// exit ;
49302: GO 49360
// un := tmp [ rand ( 1 , tmp ) ] ;
49304: LD_ADDR_VAR 0 2
49308: PUSH
49309: LD_VAR 0 3
49313: PUSH
49314: LD_INT 1
49316: PPUSH
49317: LD_VAR 0 3
49321: PPUSH
49322: CALL_OW 12
49326: ARRAY
49327: ST_TO_ADDR
// if Crawls ( un ) then
49328: LD_VAR 0 2
49332: PPUSH
49333: CALL_OW 318
49337: IFFALSE 49348
// ComWalk ( un ) ;
49339: LD_VAR 0 2
49343: PPUSH
49344: CALL_OW 138
// SetClass ( un , class_sniper ) ;
49348: LD_VAR 0 2
49352: PPUSH
49353: LD_INT 5
49355: PPUSH
49356: CALL_OW 336
// end ;
49360: PPOPN 3
49362: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
49363: LD_EXP 36
49367: PUSH
49368: LD_EXP 54
49372: AND
49373: PUSH
49374: LD_OWVAR 67
49378: PUSH
49379: LD_INT 4
49381: LESS
49382: AND
49383: IFFALSE 49402
49385: GO 49387
49387: DISABLE
// begin Difficulty := Difficulty + 1 ;
49388: LD_ADDR_OWVAR 67
49392: PUSH
49393: LD_OWVAR 67
49397: PUSH
49398: LD_INT 1
49400: PLUS
49401: ST_TO_ADDR
// end ;
49402: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
49403: LD_EXP 36
49407: PUSH
49408: LD_EXP 55
49412: AND
49413: IFFALSE 49516
49415: GO 49417
49417: DISABLE
49418: LD_INT 0
49420: PPUSH
// begin for i := 1 to 5 do
49421: LD_ADDR_VAR 0 1
49425: PUSH
49426: DOUBLE
49427: LD_INT 1
49429: DEC
49430: ST_TO_ADDR
49431: LD_INT 5
49433: PUSH
49434: FOR_TO
49435: IFFALSE 49514
// begin uc_nation := nation_nature ;
49437: LD_ADDR_OWVAR 21
49441: PUSH
49442: LD_INT 0
49444: ST_TO_ADDR
// uc_side := 0 ;
49445: LD_ADDR_OWVAR 20
49449: PUSH
49450: LD_INT 0
49452: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49453: LD_ADDR_OWVAR 29
49457: PUSH
49458: LD_INT 12
49460: PUSH
49461: LD_INT 12
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: ST_TO_ADDR
// hc_agressivity := 20 ;
49468: LD_ADDR_OWVAR 35
49472: PUSH
49473: LD_INT 20
49475: ST_TO_ADDR
// hc_class := class_tiger ;
49476: LD_ADDR_OWVAR 28
49480: PUSH
49481: LD_INT 14
49483: ST_TO_ADDR
// hc_gallery :=  ;
49484: LD_ADDR_OWVAR 33
49488: PUSH
49489: LD_STRING 
49491: ST_TO_ADDR
// hc_name :=  ;
49492: LD_ADDR_OWVAR 26
49496: PUSH
49497: LD_STRING 
49499: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
49500: CALL_OW 44
49504: PPUSH
49505: LD_INT 0
49507: PPUSH
49508: CALL_OW 51
// end ;
49512: GO 49434
49514: POP
49515: POP
// end ;
49516: PPOPN 1
49518: END
// every 0 0$1 trigger StreamModeActive and sBomb do
49519: LD_EXP 36
49523: PUSH
49524: LD_EXP 56
49528: AND
49529: IFFALSE 49538
49531: GO 49533
49533: DISABLE
// StreamSibBomb ;
49534: CALL 49539 0 0
49538: END
// export function StreamSibBomb ; var i , x , y ; begin
49539: LD_INT 0
49541: PPUSH
49542: PPUSH
49543: PPUSH
49544: PPUSH
// result := false ;
49545: LD_ADDR_VAR 0 1
49549: PUSH
49550: LD_INT 0
49552: ST_TO_ADDR
// for i := 1 to 16 do
49553: LD_ADDR_VAR 0 2
49557: PUSH
49558: DOUBLE
49559: LD_INT 1
49561: DEC
49562: ST_TO_ADDR
49563: LD_INT 16
49565: PUSH
49566: FOR_TO
49567: IFFALSE 49766
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
49569: LD_ADDR_VAR 0 3
49573: PUSH
49574: LD_INT 10
49576: PUSH
49577: LD_INT 20
49579: PUSH
49580: LD_INT 30
49582: PUSH
49583: LD_INT 40
49585: PUSH
49586: LD_INT 50
49588: PUSH
49589: LD_INT 60
49591: PUSH
49592: LD_INT 70
49594: PUSH
49595: LD_INT 80
49597: PUSH
49598: LD_INT 90
49600: PUSH
49601: LD_INT 100
49603: PUSH
49604: LD_INT 110
49606: PUSH
49607: LD_INT 120
49609: PUSH
49610: LD_INT 130
49612: PUSH
49613: LD_INT 140
49615: PUSH
49616: LD_INT 150
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: PPUSH
49639: LD_INT 15
49641: PPUSH
49642: CALL_OW 12
49646: ARRAY
49647: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
49648: LD_ADDR_VAR 0 4
49652: PUSH
49653: LD_INT 10
49655: PUSH
49656: LD_INT 20
49658: PUSH
49659: LD_INT 30
49661: PUSH
49662: LD_INT 40
49664: PUSH
49665: LD_INT 50
49667: PUSH
49668: LD_INT 60
49670: PUSH
49671: LD_INT 70
49673: PUSH
49674: LD_INT 80
49676: PUSH
49677: LD_INT 90
49679: PUSH
49680: LD_INT 100
49682: PUSH
49683: LD_INT 110
49685: PUSH
49686: LD_INT 120
49688: PUSH
49689: LD_INT 130
49691: PUSH
49692: LD_INT 140
49694: PUSH
49695: LD_INT 150
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: PPUSH
49718: LD_INT 15
49720: PPUSH
49721: CALL_OW 12
49725: ARRAY
49726: ST_TO_ADDR
// if ValidHex ( x , y ) then
49727: LD_VAR 0 3
49731: PPUSH
49732: LD_VAR 0 4
49736: PPUSH
49737: CALL_OW 488
49741: IFFALSE 49764
// begin result := [ x , y ] ;
49743: LD_ADDR_VAR 0 1
49747: PUSH
49748: LD_VAR 0 3
49752: PUSH
49753: LD_VAR 0 4
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: ST_TO_ADDR
// break ;
49762: GO 49766
// end ; end ;
49764: GO 49566
49766: POP
49767: POP
// if result then
49768: LD_VAR 0 1
49772: IFFALSE 49832
// begin ToLua ( playSibBomb() ) ;
49774: LD_STRING playSibBomb()
49776: PPUSH
49777: CALL_OW 559
// wait ( 0 0$14 ) ;
49781: LD_INT 490
49783: PPUSH
49784: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
49788: LD_VAR 0 1
49792: PUSH
49793: LD_INT 1
49795: ARRAY
49796: PPUSH
49797: LD_VAR 0 1
49801: PUSH
49802: LD_INT 2
49804: ARRAY
49805: PPUSH
49806: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
49810: LD_VAR 0 1
49814: PUSH
49815: LD_INT 1
49817: ARRAY
49818: PPUSH
49819: LD_VAR 0 1
49823: PUSH
49824: LD_INT 2
49826: ARRAY
49827: PPUSH
49828: CALL_OW 429
// end ; end ;
49832: LD_VAR 0 1
49836: RET
// every 0 0$1 trigger StreamModeActive and sReset do
49837: LD_EXP 36
49841: PUSH
49842: LD_EXP 58
49846: AND
49847: IFFALSE 49859
49849: GO 49851
49851: DISABLE
// YouLost (  ) ;
49852: LD_STRING 
49854: PPUSH
49855: CALL_OW 104
49859: END
// every 0 0$1 trigger StreamModeActive and sFog do
49860: LD_EXP 36
49864: PUSH
49865: LD_EXP 57
49869: AND
49870: IFFALSE 49884
49872: GO 49874
49874: DISABLE
// FogOff ( your_side ) ;
49875: LD_OWVAR 2
49879: PPUSH
49880: CALL_OW 344
49884: END
// every 0 0$1 trigger StreamModeActive and sSun do
49885: LD_EXP 36
49889: PUSH
49890: LD_EXP 59
49894: AND
49895: IFFALSE 49923
49897: GO 49899
49899: DISABLE
// begin solar_recharge_percent := 0 ;
49900: LD_ADDR_OWVAR 79
49904: PUSH
49905: LD_INT 0
49907: ST_TO_ADDR
// wait ( 5 5$00 ) ;
49908: LD_INT 10500
49910: PPUSH
49911: CALL_OW 67
// solar_recharge_percent := 100 ;
49915: LD_ADDR_OWVAR 79
49919: PUSH
49920: LD_INT 100
49922: ST_TO_ADDR
// end ;
49923: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
49924: LD_EXP 36
49928: PUSH
49929: LD_EXP 60
49933: AND
49934: IFFALSE 50173
49936: GO 49938
49938: DISABLE
49939: LD_INT 0
49941: PPUSH
49942: PPUSH
49943: PPUSH
// begin tmp := [ ] ;
49944: LD_ADDR_VAR 0 3
49948: PUSH
49949: EMPTY
49950: ST_TO_ADDR
// for i := 1 to 6 do
49951: LD_ADDR_VAR 0 1
49955: PUSH
49956: DOUBLE
49957: LD_INT 1
49959: DEC
49960: ST_TO_ADDR
49961: LD_INT 6
49963: PUSH
49964: FOR_TO
49965: IFFALSE 50070
// begin uc_nation := nation_nature ;
49967: LD_ADDR_OWVAR 21
49971: PUSH
49972: LD_INT 0
49974: ST_TO_ADDR
// uc_side := 0 ;
49975: LD_ADDR_OWVAR 20
49979: PUSH
49980: LD_INT 0
49982: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49983: LD_ADDR_OWVAR 29
49987: PUSH
49988: LD_INT 12
49990: PUSH
49991: LD_INT 12
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: ST_TO_ADDR
// hc_agressivity := 20 ;
49998: LD_ADDR_OWVAR 35
50002: PUSH
50003: LD_INT 20
50005: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
50006: LD_ADDR_OWVAR 28
50010: PUSH
50011: LD_INT 17
50013: ST_TO_ADDR
// hc_gallery :=  ;
50014: LD_ADDR_OWVAR 33
50018: PUSH
50019: LD_STRING 
50021: ST_TO_ADDR
// hc_name :=  ;
50022: LD_ADDR_OWVAR 26
50026: PUSH
50027: LD_STRING 
50029: ST_TO_ADDR
// un := CreateHuman ;
50030: LD_ADDR_VAR 0 2
50034: PUSH
50035: CALL_OW 44
50039: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
50040: LD_VAR 0 2
50044: PPUSH
50045: LD_INT 1
50047: PPUSH
50048: CALL_OW 51
// tmp := tmp ^ un ;
50052: LD_ADDR_VAR 0 3
50056: PUSH
50057: LD_VAR 0 3
50061: PUSH
50062: LD_VAR 0 2
50066: ADD
50067: ST_TO_ADDR
// end ;
50068: GO 49964
50070: POP
50071: POP
// repeat wait ( 0 0$1 ) ;
50072: LD_INT 35
50074: PPUSH
50075: CALL_OW 67
// for un in tmp do
50079: LD_ADDR_VAR 0 2
50083: PUSH
50084: LD_VAR 0 3
50088: PUSH
50089: FOR_IN
50090: IFFALSE 50164
// begin if IsDead ( un ) then
50092: LD_VAR 0 2
50096: PPUSH
50097: CALL_OW 301
50101: IFFALSE 50121
// begin tmp := tmp diff un ;
50103: LD_ADDR_VAR 0 3
50107: PUSH
50108: LD_VAR 0 3
50112: PUSH
50113: LD_VAR 0 2
50117: DIFF
50118: ST_TO_ADDR
// continue ;
50119: GO 50089
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
50121: LD_VAR 0 2
50125: PPUSH
50126: LD_INT 3
50128: PUSH
50129: LD_INT 22
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PPUSH
50143: CALL_OW 69
50147: PPUSH
50148: LD_VAR 0 2
50152: PPUSH
50153: CALL_OW 74
50157: PPUSH
50158: CALL_OW 115
// end ;
50162: GO 50089
50164: POP
50165: POP
// until not tmp ;
50166: LD_VAR 0 3
50170: NOT
50171: IFFALSE 50072
// end ;
50173: PPOPN 3
50175: END
// every 0 0$1 trigger StreamModeActive and sTroll do
50176: LD_EXP 36
50180: PUSH
50181: LD_EXP 61
50185: AND
50186: IFFALSE 50240
50188: GO 50190
50190: DISABLE
// begin ToLua ( displayTroll(); ) ;
50191: LD_STRING displayTroll();
50193: PPUSH
50194: CALL_OW 559
// wait ( 3 3$00 ) ;
50198: LD_INT 6300
50200: PPUSH
50201: CALL_OW 67
// ToLua ( hideTroll(); ) ;
50205: LD_STRING hideTroll();
50207: PPUSH
50208: CALL_OW 559
// wait ( 1 1$00 ) ;
50212: LD_INT 2100
50214: PPUSH
50215: CALL_OW 67
// ToLua ( displayTroll(); ) ;
50219: LD_STRING displayTroll();
50221: PPUSH
50222: CALL_OW 559
// wait ( 1 1$00 ) ;
50226: LD_INT 2100
50228: PPUSH
50229: CALL_OW 67
// ToLua ( hideTroll(); ) ;
50233: LD_STRING hideTroll();
50235: PPUSH
50236: CALL_OW 559
// end ;
50240: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
50241: LD_EXP 36
50245: PUSH
50246: LD_EXP 62
50250: AND
50251: IFFALSE 50314
50253: GO 50255
50255: DISABLE
50256: LD_INT 0
50258: PPUSH
// begin p := 0 ;
50259: LD_ADDR_VAR 0 1
50263: PUSH
50264: LD_INT 0
50266: ST_TO_ADDR
// repeat game_speed := 1 ;
50267: LD_ADDR_OWVAR 65
50271: PUSH
50272: LD_INT 1
50274: ST_TO_ADDR
// wait ( 0 0$1 ) ;
50275: LD_INT 35
50277: PPUSH
50278: CALL_OW 67
// p := p + 1 ;
50282: LD_ADDR_VAR 0 1
50286: PUSH
50287: LD_VAR 0 1
50291: PUSH
50292: LD_INT 1
50294: PLUS
50295: ST_TO_ADDR
// until p >= 60 ;
50296: LD_VAR 0 1
50300: PUSH
50301: LD_INT 60
50303: GREATEREQUAL
50304: IFFALSE 50267
// game_speed := 4 ;
50306: LD_ADDR_OWVAR 65
50310: PUSH
50311: LD_INT 4
50313: ST_TO_ADDR
// end ;
50314: PPOPN 1
50316: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
50317: LD_EXP 36
50321: PUSH
50322: LD_EXP 63
50326: AND
50327: IFFALSE 50473
50329: GO 50331
50331: DISABLE
50332: LD_INT 0
50334: PPUSH
50335: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50336: LD_ADDR_VAR 0 1
50340: PUSH
50341: LD_INT 22
50343: PUSH
50344: LD_OWVAR 2
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: LD_INT 30
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 30
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: LIST
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PPUSH
50385: CALL_OW 69
50389: ST_TO_ADDR
// if not depot then
50390: LD_VAR 0 1
50394: NOT
50395: IFFALSE 50399
// exit ;
50397: GO 50473
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
50399: LD_ADDR_VAR 0 2
50403: PUSH
50404: LD_VAR 0 1
50408: PUSH
50409: LD_INT 1
50411: PPUSH
50412: LD_VAR 0 1
50416: PPUSH
50417: CALL_OW 12
50421: ARRAY
50422: PPUSH
50423: CALL_OW 274
50427: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
50428: LD_VAR 0 2
50432: PPUSH
50433: LD_INT 1
50435: PPUSH
50436: LD_INT 0
50438: PPUSH
50439: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
50443: LD_VAR 0 2
50447: PPUSH
50448: LD_INT 2
50450: PPUSH
50451: LD_INT 0
50453: PPUSH
50454: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
50458: LD_VAR 0 2
50462: PPUSH
50463: LD_INT 3
50465: PPUSH
50466: LD_INT 0
50468: PPUSH
50469: CALL_OW 277
// end ;
50473: PPOPN 2
50475: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
50476: LD_EXP 36
50480: PUSH
50481: LD_EXP 64
50485: AND
50486: IFFALSE 50583
50488: GO 50490
50490: DISABLE
50491: LD_INT 0
50493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
50494: LD_ADDR_VAR 0 1
50498: PUSH
50499: LD_INT 22
50501: PUSH
50502: LD_OWVAR 2
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 21
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 3
50523: PUSH
50524: LD_INT 23
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: LIST
50542: PPUSH
50543: CALL_OW 69
50547: ST_TO_ADDR
// if not tmp then
50548: LD_VAR 0 1
50552: NOT
50553: IFFALSE 50557
// exit ;
50555: GO 50583
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
50557: LD_VAR 0 1
50561: PUSH
50562: LD_INT 1
50564: PPUSH
50565: LD_VAR 0 1
50569: PPUSH
50570: CALL_OW 12
50574: ARRAY
50575: PPUSH
50576: LD_INT 200
50578: PPUSH
50579: CALL_OW 234
// end ;
50583: PPOPN 1
50585: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
50586: LD_EXP 36
50590: PUSH
50591: LD_EXP 65
50595: AND
50596: IFFALSE 50675
50598: GO 50600
50600: DISABLE
50601: LD_INT 0
50603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
50604: LD_ADDR_VAR 0 1
50608: PUSH
50609: LD_INT 22
50611: PUSH
50612: LD_OWVAR 2
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 21
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PPUSH
50635: CALL_OW 69
50639: ST_TO_ADDR
// if not tmp then
50640: LD_VAR 0 1
50644: NOT
50645: IFFALSE 50649
// exit ;
50647: GO 50675
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
50649: LD_VAR 0 1
50653: PUSH
50654: LD_INT 1
50656: PPUSH
50657: LD_VAR 0 1
50661: PPUSH
50662: CALL_OW 12
50666: ARRAY
50667: PPUSH
50668: LD_INT 60
50670: PPUSH
50671: CALL_OW 234
// end ;
50675: PPOPN 1
50677: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
50678: LD_EXP 36
50682: PUSH
50683: LD_EXP 66
50687: AND
50688: IFFALSE 50787
50690: GO 50692
50692: DISABLE
50693: LD_INT 0
50695: PPUSH
50696: PPUSH
// begin enable ;
50697: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
50698: LD_ADDR_VAR 0 1
50702: PUSH
50703: LD_INT 22
50705: PUSH
50706: LD_OWVAR 2
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 61
50717: PUSH
50718: EMPTY
50719: LIST
50720: PUSH
50721: LD_INT 33
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: LIST
50735: PPUSH
50736: CALL_OW 69
50740: ST_TO_ADDR
// if not tmp then
50741: LD_VAR 0 1
50745: NOT
50746: IFFALSE 50750
// exit ;
50748: GO 50787
// for i in tmp do
50750: LD_ADDR_VAR 0 2
50754: PUSH
50755: LD_VAR 0 1
50759: PUSH
50760: FOR_IN
50761: IFFALSE 50785
// if IsControledBy ( i ) then
50763: LD_VAR 0 2
50767: PPUSH
50768: CALL_OW 312
50772: IFFALSE 50783
// ComUnlink ( i ) ;
50774: LD_VAR 0 2
50778: PPUSH
50779: CALL_OW 136
50783: GO 50760
50785: POP
50786: POP
// end ;
50787: PPOPN 2
50789: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
50790: LD_EXP 36
50794: PUSH
50795: LD_EXP 67
50799: AND
50800: IFFALSE 50940
50802: GO 50804
50804: DISABLE
50805: LD_INT 0
50807: PPUSH
50808: PPUSH
// begin ToLua ( displayPowell(); ) ;
50809: LD_STRING displayPowell();
50811: PPUSH
50812: CALL_OW 559
// uc_side := 0 ;
50816: LD_ADDR_OWVAR 20
50820: PUSH
50821: LD_INT 0
50823: ST_TO_ADDR
// uc_nation := 2 ;
50824: LD_ADDR_OWVAR 21
50828: PUSH
50829: LD_INT 2
50831: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
50832: LD_ADDR_OWVAR 37
50836: PUSH
50837: LD_INT 14
50839: ST_TO_ADDR
// vc_engine := engine_siberite ;
50840: LD_ADDR_OWVAR 39
50844: PUSH
50845: LD_INT 3
50847: ST_TO_ADDR
// vc_control := control_apeman ;
50848: LD_ADDR_OWVAR 38
50852: PUSH
50853: LD_INT 5
50855: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
50856: LD_ADDR_OWVAR 40
50860: PUSH
50861: LD_INT 29
50863: ST_TO_ADDR
// un := CreateVehicle ;
50864: LD_ADDR_VAR 0 2
50868: PUSH
50869: CALL_OW 45
50873: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
50874: LD_VAR 0 2
50878: PPUSH
50879: LD_INT 1
50881: PPUSH
50882: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
50886: LD_INT 35
50888: PPUSH
50889: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
50893: LD_VAR 0 2
50897: PPUSH
50898: LD_INT 22
50900: PUSH
50901: LD_OWVAR 2
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PPUSH
50910: CALL_OW 69
50914: PPUSH
50915: LD_VAR 0 2
50919: PPUSH
50920: CALL_OW 74
50924: PPUSH
50925: CALL_OW 115
// until IsDead ( un ) ;
50929: LD_VAR 0 2
50933: PPUSH
50934: CALL_OW 301
50938: IFFALSE 50886
// end ;
50940: PPOPN 2
50942: END
// every 0 0$1 trigger StreamModeActive and sStu do
50943: LD_EXP 36
50947: PUSH
50948: LD_EXP 75
50952: AND
50953: IFFALSE 50969
50955: GO 50957
50957: DISABLE
// begin ToLua ( displayStucuk(); ) ;
50958: LD_STRING displayStucuk();
50960: PPUSH
50961: CALL_OW 559
// ResetFog ;
50965: CALL_OW 335
// end ;
50969: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
50970: LD_EXP 36
50974: PUSH
50975: LD_EXP 68
50979: AND
50980: IFFALSE 51121
50982: GO 50984
50984: DISABLE
50985: LD_INT 0
50987: PPUSH
50988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
50989: LD_ADDR_VAR 0 2
50993: PUSH
50994: LD_INT 22
50996: PUSH
50997: LD_OWVAR 2
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 21
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PPUSH
51020: CALL_OW 69
51024: ST_TO_ADDR
// if not tmp then
51025: LD_VAR 0 2
51029: NOT
51030: IFFALSE 51034
// exit ;
51032: GO 51121
// un := tmp [ rand ( 1 , tmp ) ] ;
51034: LD_ADDR_VAR 0 1
51038: PUSH
51039: LD_VAR 0 2
51043: PUSH
51044: LD_INT 1
51046: PPUSH
51047: LD_VAR 0 2
51051: PPUSH
51052: CALL_OW 12
51056: ARRAY
51057: ST_TO_ADDR
// SetSide ( un , 0 ) ;
51058: LD_VAR 0 1
51062: PPUSH
51063: LD_INT 0
51065: PPUSH
51066: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
51070: LD_VAR 0 1
51074: PPUSH
51075: LD_OWVAR 3
51079: PUSH
51080: LD_VAR 0 1
51084: DIFF
51085: PPUSH
51086: LD_VAR 0 1
51090: PPUSH
51091: CALL_OW 74
51095: PPUSH
51096: CALL_OW 115
// wait ( 0 0$20 ) ;
51100: LD_INT 700
51102: PPUSH
51103: CALL_OW 67
// SetSide ( un , your_side ) ;
51107: LD_VAR 0 1
51111: PPUSH
51112: LD_OWVAR 2
51116: PPUSH
51117: CALL_OW 235
// end ;
51121: PPOPN 2
51123: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
51124: LD_EXP 36
51128: PUSH
51129: LD_EXP 69
51133: AND
51134: IFFALSE 51240
51136: GO 51138
51138: DISABLE
51139: LD_INT 0
51141: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51142: LD_ADDR_VAR 0 1
51146: PUSH
51147: LD_INT 22
51149: PUSH
51150: LD_OWVAR 2
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: LD_INT 30
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 30
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: LIST
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PPUSH
51191: CALL_OW 69
51195: ST_TO_ADDR
// if not depot then
51196: LD_VAR 0 1
51200: NOT
51201: IFFALSE 51205
// exit ;
51203: GO 51240
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
51205: LD_VAR 0 1
51209: PUSH
51210: LD_INT 1
51212: ARRAY
51213: PPUSH
51214: CALL_OW 250
51218: PPUSH
51219: LD_VAR 0 1
51223: PUSH
51224: LD_INT 1
51226: ARRAY
51227: PPUSH
51228: CALL_OW 251
51232: PPUSH
51233: LD_INT 70
51235: PPUSH
51236: CALL_OW 495
// end ;
51240: PPOPN 1
51242: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
51243: LD_EXP 36
51247: PUSH
51248: LD_EXP 70
51252: AND
51253: IFFALSE 51464
51255: GO 51257
51257: DISABLE
51258: LD_INT 0
51260: PPUSH
51261: PPUSH
51262: PPUSH
51263: PPUSH
51264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
51265: LD_ADDR_VAR 0 5
51269: PUSH
51270: LD_INT 22
51272: PUSH
51273: LD_OWVAR 2
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 21
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PPUSH
51296: CALL_OW 69
51300: ST_TO_ADDR
// if not tmp then
51301: LD_VAR 0 5
51305: NOT
51306: IFFALSE 51310
// exit ;
51308: GO 51464
// for i in tmp do
51310: LD_ADDR_VAR 0 1
51314: PUSH
51315: LD_VAR 0 5
51319: PUSH
51320: FOR_IN
51321: IFFALSE 51462
// begin d := rand ( 0 , 5 ) ;
51323: LD_ADDR_VAR 0 4
51327: PUSH
51328: LD_INT 0
51330: PPUSH
51331: LD_INT 5
51333: PPUSH
51334: CALL_OW 12
51338: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
51339: LD_ADDR_VAR 0 2
51343: PUSH
51344: LD_VAR 0 1
51348: PPUSH
51349: CALL_OW 250
51353: PPUSH
51354: LD_VAR 0 4
51358: PPUSH
51359: LD_INT 3
51361: PPUSH
51362: LD_INT 12
51364: PPUSH
51365: CALL_OW 12
51369: PPUSH
51370: CALL_OW 272
51374: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
51375: LD_ADDR_VAR 0 3
51379: PUSH
51380: LD_VAR 0 1
51384: PPUSH
51385: CALL_OW 251
51389: PPUSH
51390: LD_VAR 0 4
51394: PPUSH
51395: LD_INT 3
51397: PPUSH
51398: LD_INT 12
51400: PPUSH
51401: CALL_OW 12
51405: PPUSH
51406: CALL_OW 273
51410: ST_TO_ADDR
// if ValidHex ( x , y ) then
51411: LD_VAR 0 2
51415: PPUSH
51416: LD_VAR 0 3
51420: PPUSH
51421: CALL_OW 488
51425: IFFALSE 51460
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
51427: LD_VAR 0 1
51431: PPUSH
51432: LD_VAR 0 2
51436: PPUSH
51437: LD_VAR 0 3
51441: PPUSH
51442: LD_INT 3
51444: PPUSH
51445: LD_INT 6
51447: PPUSH
51448: CALL_OW 12
51452: PPUSH
51453: LD_INT 1
51455: PPUSH
51456: CALL_OW 483
// end ;
51460: GO 51320
51462: POP
51463: POP
// end ;
51464: PPOPN 5
51466: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
51467: LD_EXP 36
51471: PUSH
51472: LD_EXP 71
51476: AND
51477: IFFALSE 51571
51479: GO 51481
51481: DISABLE
51482: LD_INT 0
51484: PPUSH
51485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
51486: LD_ADDR_VAR 0 2
51490: PUSH
51491: LD_INT 22
51493: PUSH
51494: LD_OWVAR 2
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 32
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 21
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: LIST
51527: PPUSH
51528: CALL_OW 69
51532: ST_TO_ADDR
// if not tmp then
51533: LD_VAR 0 2
51537: NOT
51538: IFFALSE 51542
// exit ;
51540: GO 51571
// for i in tmp do
51542: LD_ADDR_VAR 0 1
51546: PUSH
51547: LD_VAR 0 2
51551: PUSH
51552: FOR_IN
51553: IFFALSE 51569
// SetFuel ( i , 0 ) ;
51555: LD_VAR 0 1
51559: PPUSH
51560: LD_INT 0
51562: PPUSH
51563: CALL_OW 240
51567: GO 51552
51569: POP
51570: POP
// end ;
51571: PPOPN 2
51573: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
51574: LD_EXP 36
51578: PUSH
51579: LD_EXP 72
51583: AND
51584: IFFALSE 51650
51586: GO 51588
51588: DISABLE
51589: LD_INT 0
51591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
51592: LD_ADDR_VAR 0 1
51596: PUSH
51597: LD_INT 22
51599: PUSH
51600: LD_OWVAR 2
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 30
51611: PUSH
51612: LD_INT 29
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PPUSH
51623: CALL_OW 69
51627: ST_TO_ADDR
// if not tmp then
51628: LD_VAR 0 1
51632: NOT
51633: IFFALSE 51637
// exit ;
51635: GO 51650
// DestroyUnit ( tmp [ 1 ] ) ;
51637: LD_VAR 0 1
51641: PUSH
51642: LD_INT 1
51644: ARRAY
51645: PPUSH
51646: CALL_OW 65
// end ;
51650: PPOPN 1
51652: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
51653: LD_EXP 36
51657: PUSH
51658: LD_EXP 74
51662: AND
51663: IFFALSE 51792
51665: GO 51667
51667: DISABLE
51668: LD_INT 0
51670: PPUSH
// begin uc_side := 0 ;
51671: LD_ADDR_OWVAR 20
51675: PUSH
51676: LD_INT 0
51678: ST_TO_ADDR
// uc_nation := nation_arabian ;
51679: LD_ADDR_OWVAR 21
51683: PUSH
51684: LD_INT 2
51686: ST_TO_ADDR
// hc_gallery :=  ;
51687: LD_ADDR_OWVAR 33
51691: PUSH
51692: LD_STRING 
51694: ST_TO_ADDR
// hc_name :=  ;
51695: LD_ADDR_OWVAR 26
51699: PUSH
51700: LD_STRING 
51702: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
51703: LD_INT 1
51705: PPUSH
51706: LD_INT 11
51708: PPUSH
51709: LD_INT 10
51711: PPUSH
51712: CALL_OW 380
// un := CreateHuman ;
51716: LD_ADDR_VAR 0 1
51720: PUSH
51721: CALL_OW 44
51725: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
51726: LD_VAR 0 1
51730: PPUSH
51731: LD_INT 1
51733: PPUSH
51734: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
51738: LD_INT 35
51740: PPUSH
51741: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
51745: LD_VAR 0 1
51749: PPUSH
51750: LD_INT 22
51752: PUSH
51753: LD_OWVAR 2
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PPUSH
51762: CALL_OW 69
51766: PPUSH
51767: LD_VAR 0 1
51771: PPUSH
51772: CALL_OW 74
51776: PPUSH
51777: CALL_OW 115
// until IsDead ( un ) ;
51781: LD_VAR 0 1
51785: PPUSH
51786: CALL_OW 301
51790: IFFALSE 51738
// end ;
51792: PPOPN 1
51794: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
51795: LD_EXP 36
51799: PUSH
51800: LD_EXP 76
51804: AND
51805: IFFALSE 51817
51807: GO 51809
51809: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
51810: LD_STRING earthquake(getX(game), 0, 32)
51812: PPUSH
51813: CALL_OW 559
51817: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
51818: LD_EXP 36
51822: PUSH
51823: LD_EXP 77
51827: AND
51828: IFFALSE 51919
51830: GO 51832
51832: DISABLE
51833: LD_INT 0
51835: PPUSH
// begin enable ;
51836: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
51837: LD_ADDR_VAR 0 1
51841: PUSH
51842: LD_INT 22
51844: PUSH
51845: LD_OWVAR 2
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 21
51856: PUSH
51857: LD_INT 2
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 33
51866: PUSH
51867: LD_INT 3
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: LIST
51878: PPUSH
51879: CALL_OW 69
51883: ST_TO_ADDR
// if not tmp then
51884: LD_VAR 0 1
51888: NOT
51889: IFFALSE 51893
// exit ;
51891: GO 51919
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
51893: LD_VAR 0 1
51897: PUSH
51898: LD_INT 1
51900: PPUSH
51901: LD_VAR 0 1
51905: PPUSH
51906: CALL_OW 12
51910: ARRAY
51911: PPUSH
51912: LD_INT 1
51914: PPUSH
51915: CALL_OW 234
// end ;
51919: PPOPN 1
51921: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
51922: LD_EXP 36
51926: PUSH
51927: LD_EXP 78
51931: AND
51932: IFFALSE 52073
51934: GO 51936
51936: DISABLE
51937: LD_INT 0
51939: PPUSH
51940: PPUSH
51941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51942: LD_ADDR_VAR 0 3
51946: PUSH
51947: LD_INT 22
51949: PUSH
51950: LD_OWVAR 2
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 25
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PPUSH
51973: CALL_OW 69
51977: ST_TO_ADDR
// if not tmp then
51978: LD_VAR 0 3
51982: NOT
51983: IFFALSE 51987
// exit ;
51985: GO 52073
// un := tmp [ rand ( 1 , tmp ) ] ;
51987: LD_ADDR_VAR 0 2
51991: PUSH
51992: LD_VAR 0 3
51996: PUSH
51997: LD_INT 1
51999: PPUSH
52000: LD_VAR 0 3
52004: PPUSH
52005: CALL_OW 12
52009: ARRAY
52010: ST_TO_ADDR
// if Crawls ( un ) then
52011: LD_VAR 0 2
52015: PPUSH
52016: CALL_OW 318
52020: IFFALSE 52031
// ComWalk ( un ) ;
52022: LD_VAR 0 2
52026: PPUSH
52027: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
52031: LD_VAR 0 2
52035: PPUSH
52036: LD_INT 9
52038: PPUSH
52039: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
52043: LD_INT 28
52045: PPUSH
52046: LD_OWVAR 2
52050: PPUSH
52051: LD_INT 2
52053: PPUSH
52054: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
52058: LD_INT 29
52060: PPUSH
52061: LD_OWVAR 2
52065: PPUSH
52066: LD_INT 2
52068: PPUSH
52069: CALL_OW 322
// end ;
52073: PPOPN 3
52075: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
52076: LD_EXP 36
52080: PUSH
52081: LD_EXP 79
52085: AND
52086: IFFALSE 52197
52088: GO 52090
52090: DISABLE
52091: LD_INT 0
52093: PPUSH
52094: PPUSH
52095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52096: LD_ADDR_VAR 0 3
52100: PUSH
52101: LD_INT 22
52103: PUSH
52104: LD_OWVAR 2
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 25
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PPUSH
52127: CALL_OW 69
52131: ST_TO_ADDR
// if not tmp then
52132: LD_VAR 0 3
52136: NOT
52137: IFFALSE 52141
// exit ;
52139: GO 52197
// un := tmp [ rand ( 1 , tmp ) ] ;
52141: LD_ADDR_VAR 0 2
52145: PUSH
52146: LD_VAR 0 3
52150: PUSH
52151: LD_INT 1
52153: PPUSH
52154: LD_VAR 0 3
52158: PPUSH
52159: CALL_OW 12
52163: ARRAY
52164: ST_TO_ADDR
// if Crawls ( un ) then
52165: LD_VAR 0 2
52169: PPUSH
52170: CALL_OW 318
52174: IFFALSE 52185
// ComWalk ( un ) ;
52176: LD_VAR 0 2
52180: PPUSH
52181: CALL_OW 138
// SetClass ( un , class_mortar ) ;
52185: LD_VAR 0 2
52189: PPUSH
52190: LD_INT 8
52192: PPUSH
52193: CALL_OW 336
// end ;
52197: PPOPN 3
52199: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
52200: LD_EXP 36
52204: PUSH
52205: LD_EXP 80
52209: AND
52210: IFFALSE 52354
52212: GO 52214
52214: DISABLE
52215: LD_INT 0
52217: PPUSH
52218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
52219: LD_ADDR_VAR 0 2
52223: PUSH
52224: LD_INT 22
52226: PUSH
52227: LD_OWVAR 2
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 21
52238: PUSH
52239: LD_INT 2
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: LD_INT 34
52251: PUSH
52252: LD_INT 12
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 34
52261: PUSH
52262: LD_INT 51
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 34
52271: PUSH
52272: LD_INT 32
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: LIST
52289: PPUSH
52290: CALL_OW 69
52294: ST_TO_ADDR
// if not tmp then
52295: LD_VAR 0 2
52299: NOT
52300: IFFALSE 52304
// exit ;
52302: GO 52354
// for i in tmp do
52304: LD_ADDR_VAR 0 1
52308: PUSH
52309: LD_VAR 0 2
52313: PUSH
52314: FOR_IN
52315: IFFALSE 52352
// if GetCargo ( i , mat_artifact ) = 0 then
52317: LD_VAR 0 1
52321: PPUSH
52322: LD_INT 4
52324: PPUSH
52325: CALL_OW 289
52329: PUSH
52330: LD_INT 0
52332: EQUAL
52333: IFFALSE 52350
// SetCargo ( i , mat_siberit , 100 ) ;
52335: LD_VAR 0 1
52339: PPUSH
52340: LD_INT 3
52342: PPUSH
52343: LD_INT 100
52345: PPUSH
52346: CALL_OW 290
52350: GO 52314
52352: POP
52353: POP
// end ;
52354: PPOPN 2
52356: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
52357: LD_EXP 36
52361: PUSH
52362: LD_EXP 81
52366: AND
52367: IFFALSE 52550
52369: GO 52371
52371: DISABLE
52372: LD_INT 0
52374: PPUSH
52375: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
52376: LD_ADDR_VAR 0 2
52380: PUSH
52381: LD_INT 22
52383: PUSH
52384: LD_OWVAR 2
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PPUSH
52393: CALL_OW 69
52397: ST_TO_ADDR
// if not tmp then
52398: LD_VAR 0 2
52402: NOT
52403: IFFALSE 52407
// exit ;
52405: GO 52550
// for i := 1 to 2 do
52407: LD_ADDR_VAR 0 1
52411: PUSH
52412: DOUBLE
52413: LD_INT 1
52415: DEC
52416: ST_TO_ADDR
52417: LD_INT 2
52419: PUSH
52420: FOR_TO
52421: IFFALSE 52548
// begin uc_side := your_side ;
52423: LD_ADDR_OWVAR 20
52427: PUSH
52428: LD_OWVAR 2
52432: ST_TO_ADDR
// uc_nation := nation_american ;
52433: LD_ADDR_OWVAR 21
52437: PUSH
52438: LD_INT 1
52440: ST_TO_ADDR
// vc_chassis := us_morphling ;
52441: LD_ADDR_OWVAR 37
52445: PUSH
52446: LD_INT 5
52448: ST_TO_ADDR
// vc_engine := engine_siberite ;
52449: LD_ADDR_OWVAR 39
52453: PUSH
52454: LD_INT 3
52456: ST_TO_ADDR
// vc_control := control_computer ;
52457: LD_ADDR_OWVAR 38
52461: PUSH
52462: LD_INT 3
52464: ST_TO_ADDR
// vc_weapon := us_double_laser ;
52465: LD_ADDR_OWVAR 40
52469: PUSH
52470: LD_INT 10
52472: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
52473: LD_VAR 0 2
52477: PUSH
52478: LD_INT 1
52480: ARRAY
52481: PPUSH
52482: CALL_OW 310
52486: NOT
52487: IFFALSE 52534
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
52489: CALL_OW 45
52493: PPUSH
52494: LD_VAR 0 2
52498: PUSH
52499: LD_INT 1
52501: ARRAY
52502: PPUSH
52503: CALL_OW 250
52507: PPUSH
52508: LD_VAR 0 2
52512: PUSH
52513: LD_INT 1
52515: ARRAY
52516: PPUSH
52517: CALL_OW 251
52521: PPUSH
52522: LD_INT 12
52524: PPUSH
52525: LD_INT 1
52527: PPUSH
52528: CALL_OW 50
52532: GO 52546
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
52534: CALL_OW 45
52538: PPUSH
52539: LD_INT 1
52541: PPUSH
52542: CALL_OW 51
// end ;
52546: GO 52420
52548: POP
52549: POP
// end ;
52550: PPOPN 2
52552: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
52553: LD_EXP 36
52557: PUSH
52558: LD_EXP 82
52562: AND
52563: IFFALSE 52785
52565: GO 52567
52567: DISABLE
52568: LD_INT 0
52570: PPUSH
52571: PPUSH
52572: PPUSH
52573: PPUSH
52574: PPUSH
52575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
52576: LD_ADDR_VAR 0 6
52580: PUSH
52581: LD_INT 22
52583: PUSH
52584: LD_OWVAR 2
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 21
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 3
52605: PUSH
52606: LD_INT 23
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: LIST
52624: PPUSH
52625: CALL_OW 69
52629: ST_TO_ADDR
// if not tmp then
52630: LD_VAR 0 6
52634: NOT
52635: IFFALSE 52639
// exit ;
52637: GO 52785
// s1 := rand ( 1 , 4 ) ;
52639: LD_ADDR_VAR 0 2
52643: PUSH
52644: LD_INT 1
52646: PPUSH
52647: LD_INT 4
52649: PPUSH
52650: CALL_OW 12
52654: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
52655: LD_ADDR_VAR 0 4
52659: PUSH
52660: LD_VAR 0 6
52664: PUSH
52665: LD_INT 1
52667: ARRAY
52668: PPUSH
52669: LD_VAR 0 2
52673: PPUSH
52674: CALL_OW 259
52678: ST_TO_ADDR
// if s1 = 1 then
52679: LD_VAR 0 2
52683: PUSH
52684: LD_INT 1
52686: EQUAL
52687: IFFALSE 52707
// s2 := rand ( 2 , 4 ) else
52689: LD_ADDR_VAR 0 3
52693: PUSH
52694: LD_INT 2
52696: PPUSH
52697: LD_INT 4
52699: PPUSH
52700: CALL_OW 12
52704: ST_TO_ADDR
52705: GO 52715
// s2 := 1 ;
52707: LD_ADDR_VAR 0 3
52711: PUSH
52712: LD_INT 1
52714: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
52715: LD_ADDR_VAR 0 5
52719: PUSH
52720: LD_VAR 0 6
52724: PUSH
52725: LD_INT 1
52727: ARRAY
52728: PPUSH
52729: LD_VAR 0 3
52733: PPUSH
52734: CALL_OW 259
52738: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
52739: LD_VAR 0 6
52743: PUSH
52744: LD_INT 1
52746: ARRAY
52747: PPUSH
52748: LD_VAR 0 2
52752: PPUSH
52753: LD_VAR 0 5
52757: PPUSH
52758: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
52762: LD_VAR 0 6
52766: PUSH
52767: LD_INT 1
52769: ARRAY
52770: PPUSH
52771: LD_VAR 0 3
52775: PPUSH
52776: LD_VAR 0 4
52780: PPUSH
52781: CALL_OW 237
// end ;
52785: PPOPN 6
52787: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
52788: LD_EXP 36
52792: PUSH
52793: LD_EXP 83
52797: AND
52798: IFFALSE 52877
52800: GO 52802
52802: DISABLE
52803: LD_INT 0
52805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
52806: LD_ADDR_VAR 0 1
52810: PUSH
52811: LD_INT 22
52813: PUSH
52814: LD_OWVAR 2
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 30
52825: PUSH
52826: LD_INT 3
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PPUSH
52837: CALL_OW 69
52841: ST_TO_ADDR
// if not tmp then
52842: LD_VAR 0 1
52846: NOT
52847: IFFALSE 52851
// exit ;
52849: GO 52877
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
52851: LD_VAR 0 1
52855: PUSH
52856: LD_INT 1
52858: PPUSH
52859: LD_VAR 0 1
52863: PPUSH
52864: CALL_OW 12
52868: ARRAY
52869: PPUSH
52870: LD_INT 1
52872: PPUSH
52873: CALL_OW 234
// end ;
52877: PPOPN 1
52879: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
52880: LD_EXP 36
52884: PUSH
52885: LD_EXP 84
52889: AND
52890: IFFALSE 53002
52892: GO 52894
52894: DISABLE
52895: LD_INT 0
52897: PPUSH
52898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
52899: LD_ADDR_VAR 0 2
52903: PUSH
52904: LD_INT 22
52906: PUSH
52907: LD_OWVAR 2
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: LD_INT 30
52921: PUSH
52922: LD_INT 27
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 30
52931: PUSH
52932: LD_INT 26
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 30
52941: PUSH
52942: LD_INT 28
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PPUSH
52959: CALL_OW 69
52963: ST_TO_ADDR
// if not tmp then
52964: LD_VAR 0 2
52968: NOT
52969: IFFALSE 52973
// exit ;
52971: GO 53002
// for i in tmp do
52973: LD_ADDR_VAR 0 1
52977: PUSH
52978: LD_VAR 0 2
52982: PUSH
52983: FOR_IN
52984: IFFALSE 53000
// SetLives ( i , 1 ) ;
52986: LD_VAR 0 1
52990: PPUSH
52991: LD_INT 1
52993: PPUSH
52994: CALL_OW 234
52998: GO 52983
53000: POP
53001: POP
// end ;
53002: PPOPN 2
53004: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
53005: LD_EXP 36
53009: PUSH
53010: LD_EXP 85
53014: AND
53015: IFFALSE 53302
53017: GO 53019
53019: DISABLE
53020: LD_INT 0
53022: PPUSH
53023: PPUSH
53024: PPUSH
// begin i := rand ( 1 , 7 ) ;
53025: LD_ADDR_VAR 0 1
53029: PUSH
53030: LD_INT 1
53032: PPUSH
53033: LD_INT 7
53035: PPUSH
53036: CALL_OW 12
53040: ST_TO_ADDR
// case i of 1 :
53041: LD_VAR 0 1
53045: PUSH
53046: LD_INT 1
53048: DOUBLE
53049: EQUAL
53050: IFTRUE 53054
53052: GO 53064
53054: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
53055: LD_STRING earthquake(getX(game), 0, 32)
53057: PPUSH
53058: CALL_OW 559
53062: GO 53302
53064: LD_INT 2
53066: DOUBLE
53067: EQUAL
53068: IFTRUE 53072
53070: GO 53086
53072: POP
// begin ToLua ( displayStucuk(); ) ;
53073: LD_STRING displayStucuk();
53075: PPUSH
53076: CALL_OW 559
// ResetFog ;
53080: CALL_OW 335
// end ; 3 :
53084: GO 53302
53086: LD_INT 3
53088: DOUBLE
53089: EQUAL
53090: IFTRUE 53094
53092: GO 53198
53094: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53095: LD_ADDR_VAR 0 2
53099: PUSH
53100: LD_INT 22
53102: PUSH
53103: LD_OWVAR 2
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 25
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PPUSH
53126: CALL_OW 69
53130: ST_TO_ADDR
// if not tmp then
53131: LD_VAR 0 2
53135: NOT
53136: IFFALSE 53140
// exit ;
53138: GO 53302
// un := tmp [ rand ( 1 , tmp ) ] ;
53140: LD_ADDR_VAR 0 3
53144: PUSH
53145: LD_VAR 0 2
53149: PUSH
53150: LD_INT 1
53152: PPUSH
53153: LD_VAR 0 2
53157: PPUSH
53158: CALL_OW 12
53162: ARRAY
53163: ST_TO_ADDR
// if Crawls ( un ) then
53164: LD_VAR 0 3
53168: PPUSH
53169: CALL_OW 318
53173: IFFALSE 53184
// ComWalk ( un ) ;
53175: LD_VAR 0 3
53179: PPUSH
53180: CALL_OW 138
// SetClass ( un , class_mortar ) ;
53184: LD_VAR 0 3
53188: PPUSH
53189: LD_INT 8
53191: PPUSH
53192: CALL_OW 336
// end ; 4 :
53196: GO 53302
53198: LD_INT 4
53200: DOUBLE
53201: EQUAL
53202: IFTRUE 53206
53204: GO 53280
53206: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
53207: LD_ADDR_VAR 0 2
53211: PUSH
53212: LD_INT 22
53214: PUSH
53215: LD_OWVAR 2
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 30
53226: PUSH
53227: LD_INT 29
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PPUSH
53238: CALL_OW 69
53242: ST_TO_ADDR
// if not tmp then
53243: LD_VAR 0 2
53247: NOT
53248: IFFALSE 53252
// exit ;
53250: GO 53302
// CenterNowOnUnits ( tmp [ 1 ] ) ;
53252: LD_VAR 0 2
53256: PUSH
53257: LD_INT 1
53259: ARRAY
53260: PPUSH
53261: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
53265: LD_VAR 0 2
53269: PUSH
53270: LD_INT 1
53272: ARRAY
53273: PPUSH
53274: CALL_OW 65
// end ; 5 .. 7 :
53278: GO 53302
53280: LD_INT 5
53282: DOUBLE
53283: GREATEREQUAL
53284: IFFALSE 53292
53286: LD_INT 7
53288: DOUBLE
53289: LESSEQUAL
53290: IFTRUE 53294
53292: GO 53301
53294: POP
// StreamSibBomb ; end ;
53295: CALL 49539 0 0
53299: GO 53302
53301: POP
// end ;
53302: PPOPN 3
53304: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
53305: LD_EXP 36
53309: PUSH
53310: LD_EXP 86
53314: AND
53315: IFFALSE 53471
53317: GO 53319
53319: DISABLE
53320: LD_INT 0
53322: PPUSH
53323: PPUSH
53324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
53325: LD_ADDR_VAR 0 2
53329: PUSH
53330: LD_INT 81
53332: PUSH
53333: LD_OWVAR 2
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: LD_INT 21
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 21
53357: PUSH
53358: LD_INT 2
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: LIST
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PPUSH
53374: CALL_OW 69
53378: ST_TO_ADDR
// if not tmp then
53379: LD_VAR 0 2
53383: NOT
53384: IFFALSE 53388
// exit ;
53386: GO 53471
// p := 0 ;
53388: LD_ADDR_VAR 0 3
53392: PUSH
53393: LD_INT 0
53395: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
53396: LD_INT 35
53398: PPUSH
53399: CALL_OW 67
// p := p + 1 ;
53403: LD_ADDR_VAR 0 3
53407: PUSH
53408: LD_VAR 0 3
53412: PUSH
53413: LD_INT 1
53415: PLUS
53416: ST_TO_ADDR
// for i in tmp do
53417: LD_ADDR_VAR 0 1
53421: PUSH
53422: LD_VAR 0 2
53426: PUSH
53427: FOR_IN
53428: IFFALSE 53459
// if GetLives ( i ) < 1000 then
53430: LD_VAR 0 1
53434: PPUSH
53435: CALL_OW 256
53439: PUSH
53440: LD_INT 1000
53442: LESS
53443: IFFALSE 53457
// SetLives ( i , 1000 ) ;
53445: LD_VAR 0 1
53449: PPUSH
53450: LD_INT 1000
53452: PPUSH
53453: CALL_OW 234
53457: GO 53427
53459: POP
53460: POP
// until p > 20 ;
53461: LD_VAR 0 3
53465: PUSH
53466: LD_INT 20
53468: GREATER
53469: IFFALSE 53396
// end ;
53471: PPOPN 3
53473: END
// every 0 0$1 trigger StreamModeActive and sTime do
53474: LD_EXP 36
53478: PUSH
53479: LD_EXP 87
53483: AND
53484: IFFALSE 53519
53486: GO 53488
53488: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
53489: LD_INT 28
53491: PPUSH
53492: LD_OWVAR 2
53496: PPUSH
53497: LD_INT 2
53499: PPUSH
53500: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
53504: LD_INT 30
53506: PPUSH
53507: LD_OWVAR 2
53511: PPUSH
53512: LD_INT 2
53514: PPUSH
53515: CALL_OW 322
// end ;
53519: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
53520: LD_EXP 36
53524: PUSH
53525: LD_EXP 88
53529: AND
53530: IFFALSE 53651
53532: GO 53534
53534: DISABLE
53535: LD_INT 0
53537: PPUSH
53538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
53539: LD_ADDR_VAR 0 2
53543: PUSH
53544: LD_INT 22
53546: PUSH
53547: LD_OWVAR 2
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 21
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 3
53568: PUSH
53569: LD_INT 23
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: LIST
53587: PPUSH
53588: CALL_OW 69
53592: ST_TO_ADDR
// if not tmp then
53593: LD_VAR 0 2
53597: NOT
53598: IFFALSE 53602
// exit ;
53600: GO 53651
// for i in tmp do
53602: LD_ADDR_VAR 0 1
53606: PUSH
53607: LD_VAR 0 2
53611: PUSH
53612: FOR_IN
53613: IFFALSE 53649
// begin if Crawls ( i ) then
53615: LD_VAR 0 1
53619: PPUSH
53620: CALL_OW 318
53624: IFFALSE 53635
// ComWalk ( i ) ;
53626: LD_VAR 0 1
53630: PPUSH
53631: CALL_OW 138
// SetClass ( i , 2 ) ;
53635: LD_VAR 0 1
53639: PPUSH
53640: LD_INT 2
53642: PPUSH
53643: CALL_OW 336
// end ;
53647: GO 53612
53649: POP
53650: POP
// end ;
53651: PPOPN 2
53653: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
53654: LD_EXP 36
53658: PUSH
53659: LD_EXP 89
53663: AND
53664: IFFALSE 53952
53666: GO 53668
53668: DISABLE
53669: LD_INT 0
53671: PPUSH
53672: PPUSH
53673: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
53674: LD_OWVAR 2
53678: PPUSH
53679: LD_INT 9
53681: PPUSH
53682: LD_INT 1
53684: PPUSH
53685: LD_INT 1
53687: PPUSH
53688: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
53692: LD_INT 9
53694: PPUSH
53695: LD_OWVAR 2
53699: PPUSH
53700: CALL_OW 343
// uc_side := 9 ;
53704: LD_ADDR_OWVAR 20
53708: PUSH
53709: LD_INT 9
53711: ST_TO_ADDR
// uc_nation := 2 ;
53712: LD_ADDR_OWVAR 21
53716: PUSH
53717: LD_INT 2
53719: ST_TO_ADDR
// hc_name := Dark Warrior ;
53720: LD_ADDR_OWVAR 26
53724: PUSH
53725: LD_STRING Dark Warrior
53727: ST_TO_ADDR
// hc_gallery :=  ;
53728: LD_ADDR_OWVAR 33
53732: PUSH
53733: LD_STRING 
53735: ST_TO_ADDR
// hc_noskilllimit := true ;
53736: LD_ADDR_OWVAR 76
53740: PUSH
53741: LD_INT 1
53743: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
53744: LD_ADDR_OWVAR 31
53748: PUSH
53749: LD_INT 30
53751: PUSH
53752: LD_INT 30
53754: PUSH
53755: LD_INT 30
53757: PUSH
53758: LD_INT 30
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: ST_TO_ADDR
// un := CreateHuman ;
53767: LD_ADDR_VAR 0 3
53771: PUSH
53772: CALL_OW 44
53776: ST_TO_ADDR
// hc_noskilllimit := false ;
53777: LD_ADDR_OWVAR 76
53781: PUSH
53782: LD_INT 0
53784: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53785: LD_VAR 0 3
53789: PPUSH
53790: LD_INT 1
53792: PPUSH
53793: CALL_OW 51
// ToLua ( playRanger() ) ;
53797: LD_STRING playRanger()
53799: PPUSH
53800: CALL_OW 559
// p := 0 ;
53804: LD_ADDR_VAR 0 2
53808: PUSH
53809: LD_INT 0
53811: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
53812: LD_INT 35
53814: PPUSH
53815: CALL_OW 67
// p := p + 1 ;
53819: LD_ADDR_VAR 0 2
53823: PUSH
53824: LD_VAR 0 2
53828: PUSH
53829: LD_INT 1
53831: PLUS
53832: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
53833: LD_VAR 0 3
53837: PPUSH
53838: CALL_OW 256
53842: PUSH
53843: LD_INT 1000
53845: LESS
53846: IFFALSE 53860
// SetLives ( un , 1000 ) ;
53848: LD_VAR 0 3
53852: PPUSH
53853: LD_INT 1000
53855: PPUSH
53856: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
53860: LD_VAR 0 3
53864: PPUSH
53865: LD_INT 81
53867: PUSH
53868: LD_OWVAR 2
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 91
53879: PUSH
53880: LD_VAR 0 3
53884: PUSH
53885: LD_INT 30
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: LIST
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PPUSH
53897: CALL_OW 69
53901: PPUSH
53902: LD_VAR 0 3
53906: PPUSH
53907: CALL_OW 74
53911: PPUSH
53912: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
53916: LD_VAR 0 2
53920: PUSH
53921: LD_INT 80
53923: GREATER
53924: PUSH
53925: LD_VAR 0 3
53929: PPUSH
53930: CALL_OW 301
53934: OR
53935: IFFALSE 53812
// if un then
53937: LD_VAR 0 3
53941: IFFALSE 53952
// RemoveUnit ( un ) ;
53943: LD_VAR 0 3
53947: PPUSH
53948: CALL_OW 64
// end ;
53952: PPOPN 3
53954: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
53955: LD_EXP 90
53959: IFFALSE 54075
53961: GO 53963
53963: DISABLE
53964: LD_INT 0
53966: PPUSH
53967: PPUSH
53968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
53969: LD_ADDR_VAR 0 2
53973: PUSH
53974: LD_INT 81
53976: PUSH
53977: LD_OWVAR 2
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 21
53988: PUSH
53989: LD_INT 1
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PPUSH
54000: CALL_OW 69
54004: ST_TO_ADDR
// ToLua ( playComputer() ) ;
54005: LD_STRING playComputer()
54007: PPUSH
54008: CALL_OW 559
// if not tmp then
54012: LD_VAR 0 2
54016: NOT
54017: IFFALSE 54021
// exit ;
54019: GO 54075
// for i in tmp do
54021: LD_ADDR_VAR 0 1
54025: PUSH
54026: LD_VAR 0 2
54030: PUSH
54031: FOR_IN
54032: IFFALSE 54073
// for j := 1 to 4 do
54034: LD_ADDR_VAR 0 3
54038: PUSH
54039: DOUBLE
54040: LD_INT 1
54042: DEC
54043: ST_TO_ADDR
54044: LD_INT 4
54046: PUSH
54047: FOR_TO
54048: IFFALSE 54069
// SetSkill ( i , j , 10 ) ;
54050: LD_VAR 0 1
54054: PPUSH
54055: LD_VAR 0 3
54059: PPUSH
54060: LD_INT 10
54062: PPUSH
54063: CALL_OW 237
54067: GO 54047
54069: POP
54070: POP
54071: GO 54031
54073: POP
54074: POP
// end ;
54075: PPOPN 3
54077: END
// every 0 0$1 trigger s30 do var i , tmp ;
54078: LD_EXP 91
54082: IFFALSE 54151
54084: GO 54086
54086: DISABLE
54087: LD_INT 0
54089: PPUSH
54090: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
54091: LD_ADDR_VAR 0 2
54095: PUSH
54096: LD_INT 22
54098: PUSH
54099: LD_OWVAR 2
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PPUSH
54108: CALL_OW 69
54112: ST_TO_ADDR
// if not tmp then
54113: LD_VAR 0 2
54117: NOT
54118: IFFALSE 54122
// exit ;
54120: GO 54151
// for i in tmp do
54122: LD_ADDR_VAR 0 1
54126: PUSH
54127: LD_VAR 0 2
54131: PUSH
54132: FOR_IN
54133: IFFALSE 54149
// SetLives ( i , 300 ) ;
54135: LD_VAR 0 1
54139: PPUSH
54140: LD_INT 300
54142: PPUSH
54143: CALL_OW 234
54147: GO 54132
54149: POP
54150: POP
// end ;
54151: PPOPN 2
54153: END
// every 0 0$1 trigger s60 do var i , tmp ;
54154: LD_EXP 92
54158: IFFALSE 54227
54160: GO 54162
54162: DISABLE
54163: LD_INT 0
54165: PPUSH
54166: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
54167: LD_ADDR_VAR 0 2
54171: PUSH
54172: LD_INT 22
54174: PUSH
54175: LD_OWVAR 2
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PPUSH
54184: CALL_OW 69
54188: ST_TO_ADDR
// if not tmp then
54189: LD_VAR 0 2
54193: NOT
54194: IFFALSE 54198
// exit ;
54196: GO 54227
// for i in tmp do
54198: LD_ADDR_VAR 0 1
54202: PUSH
54203: LD_VAR 0 2
54207: PUSH
54208: FOR_IN
54209: IFFALSE 54225
// SetLives ( i , 600 ) ;
54211: LD_VAR 0 1
54215: PPUSH
54216: LD_INT 600
54218: PPUSH
54219: CALL_OW 234
54223: GO 54208
54225: POP
54226: POP
// end ;
54227: PPOPN 2
54229: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
54230: LD_INT 0
54232: PPUSH
// case cmd of 301 :
54233: LD_VAR 0 1
54237: PUSH
54238: LD_INT 301
54240: DOUBLE
54241: EQUAL
54242: IFTRUE 54246
54244: GO 54278
54246: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
54247: LD_VAR 0 6
54251: PPUSH
54252: LD_VAR 0 7
54256: PPUSH
54257: LD_VAR 0 8
54261: PPUSH
54262: LD_VAR 0 4
54266: PPUSH
54267: LD_VAR 0 5
54271: PPUSH
54272: CALL 55479 0 5
54276: GO 54399
54278: LD_INT 302
54280: DOUBLE
54281: EQUAL
54282: IFTRUE 54286
54284: GO 54323
54286: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
54287: LD_VAR 0 6
54291: PPUSH
54292: LD_VAR 0 7
54296: PPUSH
54297: LD_VAR 0 8
54301: PPUSH
54302: LD_VAR 0 9
54306: PPUSH
54307: LD_VAR 0 4
54311: PPUSH
54312: LD_VAR 0 5
54316: PPUSH
54317: CALL 55570 0 6
54321: GO 54399
54323: LD_INT 303
54325: DOUBLE
54326: EQUAL
54327: IFTRUE 54331
54329: GO 54368
54331: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
54332: LD_VAR 0 6
54336: PPUSH
54337: LD_VAR 0 7
54341: PPUSH
54342: LD_VAR 0 8
54346: PPUSH
54347: LD_VAR 0 9
54351: PPUSH
54352: LD_VAR 0 4
54356: PPUSH
54357: LD_VAR 0 5
54361: PPUSH
54362: CALL 54404 0 6
54366: GO 54399
54368: LD_INT 304
54370: DOUBLE
54371: EQUAL
54372: IFTRUE 54376
54374: GO 54398
54376: POP
// hHackTeleport ( unit , x , y ) ; end ;
54377: LD_VAR 0 2
54381: PPUSH
54382: LD_VAR 0 4
54386: PPUSH
54387: LD_VAR 0 5
54391: PPUSH
54392: CALL 56163 0 3
54396: GO 54399
54398: POP
// end ;
54399: LD_VAR 0 12
54403: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
54404: LD_INT 0
54406: PPUSH
54407: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
54408: LD_VAR 0 1
54412: PUSH
54413: LD_INT 1
54415: LESS
54416: PUSH
54417: LD_VAR 0 1
54421: PUSH
54422: LD_INT 3
54424: GREATER
54425: OR
54426: PUSH
54427: LD_VAR 0 5
54431: PPUSH
54432: LD_VAR 0 6
54436: PPUSH
54437: CALL_OW 428
54441: OR
54442: IFFALSE 54446
// exit ;
54444: GO 55166
// uc_side := your_side ;
54446: LD_ADDR_OWVAR 20
54450: PUSH
54451: LD_OWVAR 2
54455: ST_TO_ADDR
// uc_nation := nation ;
54456: LD_ADDR_OWVAR 21
54460: PUSH
54461: LD_VAR 0 1
54465: ST_TO_ADDR
// bc_level = 1 ;
54466: LD_ADDR_OWVAR 43
54470: PUSH
54471: LD_INT 1
54473: ST_TO_ADDR
// case btype of 1 :
54474: LD_VAR 0 2
54478: PUSH
54479: LD_INT 1
54481: DOUBLE
54482: EQUAL
54483: IFTRUE 54487
54485: GO 54498
54487: POP
// bc_type := b_depot ; 2 :
54488: LD_ADDR_OWVAR 42
54492: PUSH
54493: LD_INT 0
54495: ST_TO_ADDR
54496: GO 55110
54498: LD_INT 2
54500: DOUBLE
54501: EQUAL
54502: IFTRUE 54506
54504: GO 54517
54506: POP
// bc_type := b_warehouse ; 3 :
54507: LD_ADDR_OWVAR 42
54511: PUSH
54512: LD_INT 1
54514: ST_TO_ADDR
54515: GO 55110
54517: LD_INT 3
54519: DOUBLE
54520: EQUAL
54521: IFTRUE 54525
54523: GO 54536
54525: POP
// bc_type := b_lab ; 4 .. 9 :
54526: LD_ADDR_OWVAR 42
54530: PUSH
54531: LD_INT 6
54533: ST_TO_ADDR
54534: GO 55110
54536: LD_INT 4
54538: DOUBLE
54539: GREATEREQUAL
54540: IFFALSE 54548
54542: LD_INT 9
54544: DOUBLE
54545: LESSEQUAL
54546: IFTRUE 54550
54548: GO 54602
54550: POP
// begin bc_type := b_lab_half ;
54551: LD_ADDR_OWVAR 42
54555: PUSH
54556: LD_INT 7
54558: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
54559: LD_ADDR_OWVAR 44
54563: PUSH
54564: LD_INT 10
54566: PUSH
54567: LD_INT 11
54569: PUSH
54570: LD_INT 12
54572: PUSH
54573: LD_INT 15
54575: PUSH
54576: LD_INT 14
54578: PUSH
54579: LD_INT 13
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: PUSH
54590: LD_VAR 0 2
54594: PUSH
54595: LD_INT 3
54597: MINUS
54598: ARRAY
54599: ST_TO_ADDR
// end ; 10 .. 13 :
54600: GO 55110
54602: LD_INT 10
54604: DOUBLE
54605: GREATEREQUAL
54606: IFFALSE 54614
54608: LD_INT 13
54610: DOUBLE
54611: LESSEQUAL
54612: IFTRUE 54616
54614: GO 54693
54616: POP
// begin bc_type := b_lab_full ;
54617: LD_ADDR_OWVAR 42
54621: PUSH
54622: LD_INT 8
54624: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
54625: LD_ADDR_OWVAR 44
54629: PUSH
54630: LD_INT 10
54632: PUSH
54633: LD_INT 12
54635: PUSH
54636: LD_INT 14
54638: PUSH
54639: LD_INT 13
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: PUSH
54648: LD_VAR 0 2
54652: PUSH
54653: LD_INT 9
54655: MINUS
54656: ARRAY
54657: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
54658: LD_ADDR_OWVAR 45
54662: PUSH
54663: LD_INT 11
54665: PUSH
54666: LD_INT 15
54668: PUSH
54669: LD_INT 12
54671: PUSH
54672: LD_INT 15
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: PUSH
54681: LD_VAR 0 2
54685: PUSH
54686: LD_INT 9
54688: MINUS
54689: ARRAY
54690: ST_TO_ADDR
// end ; 14 :
54691: GO 55110
54693: LD_INT 14
54695: DOUBLE
54696: EQUAL
54697: IFTRUE 54701
54699: GO 54712
54701: POP
// bc_type := b_workshop ; 15 :
54702: LD_ADDR_OWVAR 42
54706: PUSH
54707: LD_INT 2
54709: ST_TO_ADDR
54710: GO 55110
54712: LD_INT 15
54714: DOUBLE
54715: EQUAL
54716: IFTRUE 54720
54718: GO 54731
54720: POP
// bc_type := b_factory ; 16 :
54721: LD_ADDR_OWVAR 42
54725: PUSH
54726: LD_INT 3
54728: ST_TO_ADDR
54729: GO 55110
54731: LD_INT 16
54733: DOUBLE
54734: EQUAL
54735: IFTRUE 54739
54737: GO 54750
54739: POP
// bc_type := b_ext_gun ; 17 :
54740: LD_ADDR_OWVAR 42
54744: PUSH
54745: LD_INT 17
54747: ST_TO_ADDR
54748: GO 55110
54750: LD_INT 17
54752: DOUBLE
54753: EQUAL
54754: IFTRUE 54758
54756: GO 54786
54758: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
54759: LD_ADDR_OWVAR 42
54763: PUSH
54764: LD_INT 19
54766: PUSH
54767: LD_INT 23
54769: PUSH
54770: LD_INT 19
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: LIST
54777: PUSH
54778: LD_VAR 0 1
54782: ARRAY
54783: ST_TO_ADDR
54784: GO 55110
54786: LD_INT 18
54788: DOUBLE
54789: EQUAL
54790: IFTRUE 54794
54792: GO 54805
54794: POP
// bc_type := b_ext_radar ; 19 :
54795: LD_ADDR_OWVAR 42
54799: PUSH
54800: LD_INT 20
54802: ST_TO_ADDR
54803: GO 55110
54805: LD_INT 19
54807: DOUBLE
54808: EQUAL
54809: IFTRUE 54813
54811: GO 54824
54813: POP
// bc_type := b_ext_radio ; 20 :
54814: LD_ADDR_OWVAR 42
54818: PUSH
54819: LD_INT 22
54821: ST_TO_ADDR
54822: GO 55110
54824: LD_INT 20
54826: DOUBLE
54827: EQUAL
54828: IFTRUE 54832
54830: GO 54843
54832: POP
// bc_type := b_ext_siberium ; 21 :
54833: LD_ADDR_OWVAR 42
54837: PUSH
54838: LD_INT 21
54840: ST_TO_ADDR
54841: GO 55110
54843: LD_INT 21
54845: DOUBLE
54846: EQUAL
54847: IFTRUE 54851
54849: GO 54862
54851: POP
// bc_type := b_ext_computer ; 22 :
54852: LD_ADDR_OWVAR 42
54856: PUSH
54857: LD_INT 24
54859: ST_TO_ADDR
54860: GO 55110
54862: LD_INT 22
54864: DOUBLE
54865: EQUAL
54866: IFTRUE 54870
54868: GO 54881
54870: POP
// bc_type := b_ext_track ; 23 :
54871: LD_ADDR_OWVAR 42
54875: PUSH
54876: LD_INT 16
54878: ST_TO_ADDR
54879: GO 55110
54881: LD_INT 23
54883: DOUBLE
54884: EQUAL
54885: IFTRUE 54889
54887: GO 54900
54889: POP
// bc_type := b_ext_laser ; 24 :
54890: LD_ADDR_OWVAR 42
54894: PUSH
54895: LD_INT 25
54897: ST_TO_ADDR
54898: GO 55110
54900: LD_INT 24
54902: DOUBLE
54903: EQUAL
54904: IFTRUE 54908
54906: GO 54919
54908: POP
// bc_type := b_control_tower ; 25 :
54909: LD_ADDR_OWVAR 42
54913: PUSH
54914: LD_INT 36
54916: ST_TO_ADDR
54917: GO 55110
54919: LD_INT 25
54921: DOUBLE
54922: EQUAL
54923: IFTRUE 54927
54925: GO 54938
54927: POP
// bc_type := b_breastwork ; 26 :
54928: LD_ADDR_OWVAR 42
54932: PUSH
54933: LD_INT 31
54935: ST_TO_ADDR
54936: GO 55110
54938: LD_INT 26
54940: DOUBLE
54941: EQUAL
54942: IFTRUE 54946
54944: GO 54957
54946: POP
// bc_type := b_bunker ; 27 :
54947: LD_ADDR_OWVAR 42
54951: PUSH
54952: LD_INT 32
54954: ST_TO_ADDR
54955: GO 55110
54957: LD_INT 27
54959: DOUBLE
54960: EQUAL
54961: IFTRUE 54965
54963: GO 54976
54965: POP
// bc_type := b_turret ; 28 :
54966: LD_ADDR_OWVAR 42
54970: PUSH
54971: LD_INT 33
54973: ST_TO_ADDR
54974: GO 55110
54976: LD_INT 28
54978: DOUBLE
54979: EQUAL
54980: IFTRUE 54984
54982: GO 54995
54984: POP
// bc_type := b_armoury ; 29 :
54985: LD_ADDR_OWVAR 42
54989: PUSH
54990: LD_INT 4
54992: ST_TO_ADDR
54993: GO 55110
54995: LD_INT 29
54997: DOUBLE
54998: EQUAL
54999: IFTRUE 55003
55001: GO 55014
55003: POP
// bc_type := b_barracks ; 30 :
55004: LD_ADDR_OWVAR 42
55008: PUSH
55009: LD_INT 5
55011: ST_TO_ADDR
55012: GO 55110
55014: LD_INT 30
55016: DOUBLE
55017: EQUAL
55018: IFTRUE 55022
55020: GO 55033
55022: POP
// bc_type := b_solar_power ; 31 :
55023: LD_ADDR_OWVAR 42
55027: PUSH
55028: LD_INT 27
55030: ST_TO_ADDR
55031: GO 55110
55033: LD_INT 31
55035: DOUBLE
55036: EQUAL
55037: IFTRUE 55041
55039: GO 55052
55041: POP
// bc_type := b_oil_power ; 32 :
55042: LD_ADDR_OWVAR 42
55046: PUSH
55047: LD_INT 26
55049: ST_TO_ADDR
55050: GO 55110
55052: LD_INT 32
55054: DOUBLE
55055: EQUAL
55056: IFTRUE 55060
55058: GO 55071
55060: POP
// bc_type := b_siberite_power ; 33 :
55061: LD_ADDR_OWVAR 42
55065: PUSH
55066: LD_INT 28
55068: ST_TO_ADDR
55069: GO 55110
55071: LD_INT 33
55073: DOUBLE
55074: EQUAL
55075: IFTRUE 55079
55077: GO 55090
55079: POP
// bc_type := b_oil_mine ; 34 :
55080: LD_ADDR_OWVAR 42
55084: PUSH
55085: LD_INT 29
55087: ST_TO_ADDR
55088: GO 55110
55090: LD_INT 34
55092: DOUBLE
55093: EQUAL
55094: IFTRUE 55098
55096: GO 55109
55098: POP
// bc_type := b_siberite_mine ; end ;
55099: LD_ADDR_OWVAR 42
55103: PUSH
55104: LD_INT 30
55106: ST_TO_ADDR
55107: GO 55110
55109: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
55110: LD_ADDR_VAR 0 8
55114: PUSH
55115: LD_VAR 0 5
55119: PPUSH
55120: LD_VAR 0 6
55124: PPUSH
55125: LD_VAR 0 3
55129: PPUSH
55130: CALL_OW 47
55134: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
55135: LD_OWVAR 42
55139: PUSH
55140: LD_INT 32
55142: PUSH
55143: LD_INT 33
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: IN
55150: IFFALSE 55166
// PlaceWeaponTurret ( b , weapon ) ;
55152: LD_VAR 0 8
55156: PPUSH
55157: LD_VAR 0 4
55161: PPUSH
55162: CALL_OW 431
// end ;
55166: LD_VAR 0 7
55170: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
55171: LD_INT 0
55173: PPUSH
55174: PPUSH
55175: PPUSH
55176: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55177: LD_ADDR_VAR 0 4
55181: PUSH
55182: LD_INT 22
55184: PUSH
55185: LD_OWVAR 2
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 2
55196: PUSH
55197: LD_INT 30
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 30
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: LIST
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PPUSH
55226: CALL_OW 69
55230: ST_TO_ADDR
// if not tmp then
55231: LD_VAR 0 4
55235: NOT
55236: IFFALSE 55240
// exit ;
55238: GO 55299
// for i in tmp do
55240: LD_ADDR_VAR 0 2
55244: PUSH
55245: LD_VAR 0 4
55249: PUSH
55250: FOR_IN
55251: IFFALSE 55297
// for j = 1 to 3 do
55253: LD_ADDR_VAR 0 3
55257: PUSH
55258: DOUBLE
55259: LD_INT 1
55261: DEC
55262: ST_TO_ADDR
55263: LD_INT 3
55265: PUSH
55266: FOR_TO
55267: IFFALSE 55293
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
55269: LD_VAR 0 2
55273: PPUSH
55274: CALL_OW 274
55278: PPUSH
55279: LD_VAR 0 3
55283: PPUSH
55284: LD_INT 99999
55286: PPUSH
55287: CALL_OW 277
55291: GO 55266
55293: POP
55294: POP
55295: GO 55250
55297: POP
55298: POP
// end ;
55299: LD_VAR 0 1
55303: RET
// export function hHackSetLevel10 ; var i , j ; begin
55304: LD_INT 0
55306: PPUSH
55307: PPUSH
55308: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
55309: LD_ADDR_VAR 0 2
55313: PUSH
55314: LD_INT 21
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PPUSH
55324: CALL_OW 69
55328: PUSH
55329: FOR_IN
55330: IFFALSE 55382
// if IsSelected ( i ) then
55332: LD_VAR 0 2
55336: PPUSH
55337: CALL_OW 306
55341: IFFALSE 55380
// begin for j := 1 to 4 do
55343: LD_ADDR_VAR 0 3
55347: PUSH
55348: DOUBLE
55349: LD_INT 1
55351: DEC
55352: ST_TO_ADDR
55353: LD_INT 4
55355: PUSH
55356: FOR_TO
55357: IFFALSE 55378
// SetSkill ( i , j , 10 ) ;
55359: LD_VAR 0 2
55363: PPUSH
55364: LD_VAR 0 3
55368: PPUSH
55369: LD_INT 10
55371: PPUSH
55372: CALL_OW 237
55376: GO 55356
55378: POP
55379: POP
// end ;
55380: GO 55329
55382: POP
55383: POP
// end ;
55384: LD_VAR 0 1
55388: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
55389: LD_INT 0
55391: PPUSH
55392: PPUSH
55393: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
55394: LD_ADDR_VAR 0 2
55398: PUSH
55399: LD_INT 22
55401: PUSH
55402: LD_OWVAR 2
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 21
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PPUSH
55425: CALL_OW 69
55429: PUSH
55430: FOR_IN
55431: IFFALSE 55472
// begin for j := 1 to 4 do
55433: LD_ADDR_VAR 0 3
55437: PUSH
55438: DOUBLE
55439: LD_INT 1
55441: DEC
55442: ST_TO_ADDR
55443: LD_INT 4
55445: PUSH
55446: FOR_TO
55447: IFFALSE 55468
// SetSkill ( i , j , 10 ) ;
55449: LD_VAR 0 2
55453: PPUSH
55454: LD_VAR 0 3
55458: PPUSH
55459: LD_INT 10
55461: PPUSH
55462: CALL_OW 237
55466: GO 55446
55468: POP
55469: POP
// end ;
55470: GO 55430
55472: POP
55473: POP
// end ;
55474: LD_VAR 0 1
55478: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
55479: LD_INT 0
55481: PPUSH
// uc_side := your_side ;
55482: LD_ADDR_OWVAR 20
55486: PUSH
55487: LD_OWVAR 2
55491: ST_TO_ADDR
// uc_nation := nation ;
55492: LD_ADDR_OWVAR 21
55496: PUSH
55497: LD_VAR 0 1
55501: ST_TO_ADDR
// InitHc ;
55502: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
55506: LD_INT 0
55508: PPUSH
55509: LD_VAR 0 2
55513: PPUSH
55514: LD_VAR 0 3
55518: PPUSH
55519: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
55523: LD_VAR 0 4
55527: PPUSH
55528: LD_VAR 0 5
55532: PPUSH
55533: CALL_OW 428
55537: PUSH
55538: LD_INT 0
55540: EQUAL
55541: IFFALSE 55565
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
55543: CALL_OW 44
55547: PPUSH
55548: LD_VAR 0 4
55552: PPUSH
55553: LD_VAR 0 5
55557: PPUSH
55558: LD_INT 1
55560: PPUSH
55561: CALL_OW 48
// end ;
55565: LD_VAR 0 6
55569: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
55570: LD_INT 0
55572: PPUSH
55573: PPUSH
// uc_side := your_side ;
55574: LD_ADDR_OWVAR 20
55578: PUSH
55579: LD_OWVAR 2
55583: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
55584: LD_VAR 0 1
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: LD_INT 3
55597: PUSH
55598: LD_INT 4
55600: PUSH
55601: LD_INT 5
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: IN
55611: IFFALSE 55623
// uc_nation := nation_american else
55613: LD_ADDR_OWVAR 21
55617: PUSH
55618: LD_INT 1
55620: ST_TO_ADDR
55621: GO 55666
// if chassis in [ 11 , 12 , 13 , 14 ] then
55623: LD_VAR 0 1
55627: PUSH
55628: LD_INT 11
55630: PUSH
55631: LD_INT 12
55633: PUSH
55634: LD_INT 13
55636: PUSH
55637: LD_INT 14
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: IN
55646: IFFALSE 55658
// uc_nation := nation_arabian else
55648: LD_ADDR_OWVAR 21
55652: PUSH
55653: LD_INT 2
55655: ST_TO_ADDR
55656: GO 55666
// uc_nation := nation_russian ;
55658: LD_ADDR_OWVAR 21
55662: PUSH
55663: LD_INT 3
55665: ST_TO_ADDR
// vc_chassis := chassis ;
55666: LD_ADDR_OWVAR 37
55670: PUSH
55671: LD_VAR 0 1
55675: ST_TO_ADDR
// vc_engine := engine ;
55676: LD_ADDR_OWVAR 39
55680: PUSH
55681: LD_VAR 0 2
55685: ST_TO_ADDR
// vc_control := control ;
55686: LD_ADDR_OWVAR 38
55690: PUSH
55691: LD_VAR 0 3
55695: ST_TO_ADDR
// vc_weapon := weapon ;
55696: LD_ADDR_OWVAR 40
55700: PUSH
55701: LD_VAR 0 4
55705: ST_TO_ADDR
// un := CreateVehicle ;
55706: LD_ADDR_VAR 0 8
55710: PUSH
55711: CALL_OW 45
55715: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
55716: LD_VAR 0 8
55720: PPUSH
55721: LD_INT 0
55723: PPUSH
55724: LD_INT 5
55726: PPUSH
55727: CALL_OW 12
55731: PPUSH
55732: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
55736: LD_VAR 0 8
55740: PPUSH
55741: LD_VAR 0 5
55745: PPUSH
55746: LD_VAR 0 6
55750: PPUSH
55751: LD_INT 1
55753: PPUSH
55754: CALL_OW 48
// end ;
55758: LD_VAR 0 7
55762: RET
// export hInvincible ; every 1 do
55763: GO 55765
55765: DISABLE
// hInvincible := [ ] ;
55766: LD_ADDR_EXP 93
55770: PUSH
55771: EMPTY
55772: ST_TO_ADDR
55773: END
// every 10 do var i ;
55774: GO 55776
55776: DISABLE
55777: LD_INT 0
55779: PPUSH
// begin enable ;
55780: ENABLE
// if not hInvincible then
55781: LD_EXP 93
55785: NOT
55786: IFFALSE 55790
// exit ;
55788: GO 55834
// for i in hInvincible do
55790: LD_ADDR_VAR 0 1
55794: PUSH
55795: LD_EXP 93
55799: PUSH
55800: FOR_IN
55801: IFFALSE 55832
// if GetLives ( i ) < 1000 then
55803: LD_VAR 0 1
55807: PPUSH
55808: CALL_OW 256
55812: PUSH
55813: LD_INT 1000
55815: LESS
55816: IFFALSE 55830
// SetLives ( i , 1000 ) ;
55818: LD_VAR 0 1
55822: PPUSH
55823: LD_INT 1000
55825: PPUSH
55826: CALL_OW 234
55830: GO 55800
55832: POP
55833: POP
// end ;
55834: PPOPN 1
55836: END
// export function hHackInvincible ; var i ; begin
55837: LD_INT 0
55839: PPUSH
55840: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
55841: LD_ADDR_VAR 0 2
55845: PUSH
55846: LD_INT 2
55848: PUSH
55849: LD_INT 21
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 21
55861: PUSH
55862: LD_INT 2
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: LIST
55873: PPUSH
55874: CALL_OW 69
55878: PUSH
55879: FOR_IN
55880: IFFALSE 55941
// if IsSelected ( i ) then
55882: LD_VAR 0 2
55886: PPUSH
55887: CALL_OW 306
55891: IFFALSE 55939
// begin if i in hInvincible then
55893: LD_VAR 0 2
55897: PUSH
55898: LD_EXP 93
55902: IN
55903: IFFALSE 55923
// hInvincible := hInvincible diff i else
55905: LD_ADDR_EXP 93
55909: PUSH
55910: LD_EXP 93
55914: PUSH
55915: LD_VAR 0 2
55919: DIFF
55920: ST_TO_ADDR
55921: GO 55939
// hInvincible := hInvincible union i ;
55923: LD_ADDR_EXP 93
55927: PUSH
55928: LD_EXP 93
55932: PUSH
55933: LD_VAR 0 2
55937: UNION
55938: ST_TO_ADDR
// end ;
55939: GO 55879
55941: POP
55942: POP
// end ;
55943: LD_VAR 0 1
55947: RET
// export function hHackInvisible ; var i , j ; begin
55948: LD_INT 0
55950: PPUSH
55951: PPUSH
55952: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
55953: LD_ADDR_VAR 0 2
55957: PUSH
55958: LD_INT 21
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PPUSH
55968: CALL_OW 69
55972: PUSH
55973: FOR_IN
55974: IFFALSE 55998
// if IsSelected ( i ) then
55976: LD_VAR 0 2
55980: PPUSH
55981: CALL_OW 306
55985: IFFALSE 55996
// ComForceInvisible ( i ) ;
55987: LD_VAR 0 2
55991: PPUSH
55992: CALL_OW 496
55996: GO 55973
55998: POP
55999: POP
// end ;
56000: LD_VAR 0 1
56004: RET
// export function hHackChangeYourSide ; begin
56005: LD_INT 0
56007: PPUSH
// if your_side = 8 then
56008: LD_OWVAR 2
56012: PUSH
56013: LD_INT 8
56015: EQUAL
56016: IFFALSE 56028
// your_side := 0 else
56018: LD_ADDR_OWVAR 2
56022: PUSH
56023: LD_INT 0
56025: ST_TO_ADDR
56026: GO 56042
// your_side := your_side + 1 ;
56028: LD_ADDR_OWVAR 2
56032: PUSH
56033: LD_OWVAR 2
56037: PUSH
56038: LD_INT 1
56040: PLUS
56041: ST_TO_ADDR
// end ;
56042: LD_VAR 0 1
56046: RET
// export function hHackChangeUnitSide ; var i , j ; begin
56047: LD_INT 0
56049: PPUSH
56050: PPUSH
56051: PPUSH
// for i in all_units do
56052: LD_ADDR_VAR 0 2
56056: PUSH
56057: LD_OWVAR 3
56061: PUSH
56062: FOR_IN
56063: IFFALSE 56141
// if IsSelected ( i ) then
56065: LD_VAR 0 2
56069: PPUSH
56070: CALL_OW 306
56074: IFFALSE 56139
// begin j := GetSide ( i ) ;
56076: LD_ADDR_VAR 0 3
56080: PUSH
56081: LD_VAR 0 2
56085: PPUSH
56086: CALL_OW 255
56090: ST_TO_ADDR
// if j = 8 then
56091: LD_VAR 0 3
56095: PUSH
56096: LD_INT 8
56098: EQUAL
56099: IFFALSE 56111
// j := 0 else
56101: LD_ADDR_VAR 0 3
56105: PUSH
56106: LD_INT 0
56108: ST_TO_ADDR
56109: GO 56125
// j := j + 1 ;
56111: LD_ADDR_VAR 0 3
56115: PUSH
56116: LD_VAR 0 3
56120: PUSH
56121: LD_INT 1
56123: PLUS
56124: ST_TO_ADDR
// SetSide ( i , j ) ;
56125: LD_VAR 0 2
56129: PPUSH
56130: LD_VAR 0 3
56134: PPUSH
56135: CALL_OW 235
// end ;
56139: GO 56062
56141: POP
56142: POP
// end ;
56143: LD_VAR 0 1
56147: RET
// export function hHackFog ; begin
56148: LD_INT 0
56150: PPUSH
// FogOff ( true ) ;
56151: LD_INT 1
56153: PPUSH
56154: CALL_OW 344
// end ;
56158: LD_VAR 0 1
56162: RET
// export function hHackTeleport ( unit , x , y ) ; begin
56163: LD_INT 0
56165: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
56166: LD_VAR 0 1
56170: PPUSH
56171: LD_VAR 0 2
56175: PPUSH
56176: LD_VAR 0 3
56180: PPUSH
56181: LD_INT 1
56183: PPUSH
56184: LD_INT 1
56186: PPUSH
56187: CALL_OW 483
// CenterOnXY ( x , y ) ;
56191: LD_VAR 0 2
56195: PPUSH
56196: LD_VAR 0 3
56200: PPUSH
56201: CALL_OW 84
// end ; end_of_file
56205: LD_VAR 0 4
56209: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56210: LD_VAR 0 1
56214: PUSH
56215: LD_INT 200
56217: DOUBLE
56218: GREATEREQUAL
56219: IFFALSE 56227
56221: LD_INT 299
56223: DOUBLE
56224: LESSEQUAL
56225: IFTRUE 56229
56227: GO 56261
56229: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56230: LD_VAR 0 1
56234: PPUSH
56235: LD_VAR 0 2
56239: PPUSH
56240: LD_VAR 0 3
56244: PPUSH
56245: LD_VAR 0 4
56249: PPUSH
56250: LD_VAR 0 5
56254: PPUSH
56255: CALL 56751 0 5
56259: GO 56338
56261: LD_INT 300
56263: DOUBLE
56264: GREATEREQUAL
56265: IFFALSE 56273
56267: LD_INT 399
56269: DOUBLE
56270: LESSEQUAL
56271: IFTRUE 56275
56273: GO 56337
56275: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56276: LD_VAR 0 1
56280: PPUSH
56281: LD_VAR 0 2
56285: PPUSH
56286: LD_VAR 0 3
56290: PPUSH
56291: LD_VAR 0 4
56295: PPUSH
56296: LD_VAR 0 5
56300: PPUSH
56301: LD_VAR 0 6
56305: PPUSH
56306: LD_VAR 0 7
56310: PPUSH
56311: LD_VAR 0 8
56315: PPUSH
56316: LD_VAR 0 9
56320: PPUSH
56321: LD_VAR 0 10
56325: PPUSH
56326: LD_VAR 0 11
56330: PPUSH
56331: CALL 54230 0 11
56335: GO 56338
56337: POP
// end ;
56338: PPOPN 11
56340: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56341: LD_VAR 0 1
56345: PPUSH
56346: LD_VAR 0 2
56350: PPUSH
56351: LD_VAR 0 3
56355: PPUSH
56356: LD_VAR 0 4
56360: PPUSH
56361: LD_VAR 0 5
56365: PPUSH
56366: CALL 56487 0 5
// end ; end_of_file
56370: PPOPN 5
56372: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
56373: LD_INT 0
56375: PPUSH
56376: PPUSH
56377: PPUSH
56378: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
56379: LD_VAR 0 1
56383: PPUSH
56384: CALL_OW 264
56388: PUSH
56389: LD_EXP 20
56393: EQUAL
56394: IFFALSE 56466
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56396: LD_INT 68
56398: PPUSH
56399: LD_VAR 0 1
56403: PPUSH
56404: CALL_OW 255
56408: PPUSH
56409: CALL_OW 321
56413: PUSH
56414: LD_INT 2
56416: EQUAL
56417: IFFALSE 56429
// eff := 70 else
56419: LD_ADDR_VAR 0 4
56423: PUSH
56424: LD_INT 70
56426: ST_TO_ADDR
56427: GO 56437
// eff := 30 ;
56429: LD_ADDR_VAR 0 4
56433: PUSH
56434: LD_INT 30
56436: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56437: LD_VAR 0 1
56441: PPUSH
56442: CALL_OW 250
56446: PPUSH
56447: LD_VAR 0 1
56451: PPUSH
56452: CALL_OW 251
56456: PPUSH
56457: LD_VAR 0 4
56461: PPUSH
56462: CALL_OW 495
// end ; end ;
56466: LD_VAR 0 2
56470: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56471: LD_INT 0
56473: PPUSH
// end ;
56474: LD_VAR 0 4
56478: RET
// export function SOS_Command ( cmd ) ; begin
56479: LD_INT 0
56481: PPUSH
// end ;
56482: LD_VAR 0 2
56486: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56487: LD_INT 0
56489: PPUSH
// end ;
56490: LD_VAR 0 6
56494: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
56495: LD_INT 0
56497: PPUSH
56498: PPUSH
// if not vehicle or not factory then
56499: LD_VAR 0 1
56503: NOT
56504: PUSH
56505: LD_VAR 0 2
56509: NOT
56510: OR
56511: IFFALSE 56515
// exit ;
56513: GO 56746
// if factoryWaypoints >= factory then
56515: LD_EXP 94
56519: PUSH
56520: LD_VAR 0 2
56524: GREATEREQUAL
56525: IFFALSE 56746
// if factoryWaypoints [ factory ] then
56527: LD_EXP 94
56531: PUSH
56532: LD_VAR 0 2
56536: ARRAY
56537: IFFALSE 56746
// begin if GetControl ( vehicle ) = control_manual then
56539: LD_VAR 0 1
56543: PPUSH
56544: CALL_OW 263
56548: PUSH
56549: LD_INT 1
56551: EQUAL
56552: IFFALSE 56633
// begin driver := IsDrivenBy ( vehicle ) ;
56554: LD_ADDR_VAR 0 4
56558: PUSH
56559: LD_VAR 0 1
56563: PPUSH
56564: CALL_OW 311
56568: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
56569: LD_VAR 0 4
56573: PPUSH
56574: LD_EXP 94
56578: PUSH
56579: LD_VAR 0 2
56583: ARRAY
56584: PUSH
56585: LD_INT 3
56587: ARRAY
56588: PPUSH
56589: LD_EXP 94
56593: PUSH
56594: LD_VAR 0 2
56598: ARRAY
56599: PUSH
56600: LD_INT 4
56602: ARRAY
56603: PPUSH
56604: CALL_OW 171
// AddComExitVehicle ( driver ) ;
56608: LD_VAR 0 4
56612: PPUSH
56613: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
56617: LD_VAR 0 4
56621: PPUSH
56622: LD_VAR 0 2
56626: PPUSH
56627: CALL_OW 180
// end else
56631: GO 56746
// if GetControl ( vehicle ) = control_remote then
56633: LD_VAR 0 1
56637: PPUSH
56638: CALL_OW 263
56642: PUSH
56643: LD_INT 2
56645: EQUAL
56646: IFFALSE 56707
// begin wait ( 0 0$2 ) ;
56648: LD_INT 70
56650: PPUSH
56651: CALL_OW 67
// if Connect ( vehicle ) then
56655: LD_VAR 0 1
56659: PPUSH
56660: CALL 9163 0 1
56664: IFFALSE 56705
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
56666: LD_VAR 0 1
56670: PPUSH
56671: LD_EXP 94
56675: PUSH
56676: LD_VAR 0 2
56680: ARRAY
56681: PUSH
56682: LD_INT 3
56684: ARRAY
56685: PPUSH
56686: LD_EXP 94
56690: PUSH
56691: LD_VAR 0 2
56695: ARRAY
56696: PUSH
56697: LD_INT 4
56699: ARRAY
56700: PPUSH
56701: CALL_OW 171
// end else
56705: GO 56746
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
56707: LD_VAR 0 1
56711: PPUSH
56712: LD_EXP 94
56716: PUSH
56717: LD_VAR 0 2
56721: ARRAY
56722: PUSH
56723: LD_INT 3
56725: ARRAY
56726: PPUSH
56727: LD_EXP 94
56731: PUSH
56732: LD_VAR 0 2
56736: ARRAY
56737: PUSH
56738: LD_INT 4
56740: ARRAY
56741: PPUSH
56742: CALL_OW 171
// end ; end ;
56746: LD_VAR 0 3
56750: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56751: LD_INT 0
56753: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56754: LD_VAR 0 1
56758: PUSH
56759: LD_INT 250
56761: EQUAL
56762: PUSH
56763: LD_VAR 0 2
56767: PPUSH
56768: CALL_OW 264
56772: PUSH
56773: LD_EXP 23
56777: EQUAL
56778: AND
56779: IFFALSE 56800
// MinerPlaceMine ( unit , x , y ) ;
56781: LD_VAR 0 2
56785: PPUSH
56786: LD_VAR 0 4
56790: PPUSH
56791: LD_VAR 0 5
56795: PPUSH
56796: CALL 59528 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56800: LD_VAR 0 1
56804: PUSH
56805: LD_INT 251
56807: EQUAL
56808: PUSH
56809: LD_VAR 0 2
56813: PPUSH
56814: CALL_OW 264
56818: PUSH
56819: LD_EXP 23
56823: EQUAL
56824: AND
56825: IFFALSE 56846
// MinerDetonateMine ( unit , x , y ) ;
56827: LD_VAR 0 2
56831: PPUSH
56832: LD_VAR 0 4
56836: PPUSH
56837: LD_VAR 0 5
56841: PPUSH
56842: CALL 59805 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56846: LD_VAR 0 1
56850: PUSH
56851: LD_INT 252
56853: EQUAL
56854: PUSH
56855: LD_VAR 0 2
56859: PPUSH
56860: CALL_OW 264
56864: PUSH
56865: LD_EXP 23
56869: EQUAL
56870: AND
56871: IFFALSE 56892
// MinerCreateMinefield ( unit , x , y ) ;
56873: LD_VAR 0 2
56877: PPUSH
56878: LD_VAR 0 4
56882: PPUSH
56883: LD_VAR 0 5
56887: PPUSH
56888: CALL 60222 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
56892: LD_VAR 0 1
56896: PUSH
56897: LD_INT 253
56899: EQUAL
56900: PUSH
56901: LD_VAR 0 2
56905: PPUSH
56906: CALL_OW 257
56910: PUSH
56911: LD_INT 5
56913: EQUAL
56914: AND
56915: IFFALSE 56936
// ComBinocular ( unit , x , y ) ;
56917: LD_VAR 0 2
56921: PPUSH
56922: LD_VAR 0 4
56926: PPUSH
56927: LD_VAR 0 5
56931: PPUSH
56932: CALL 60593 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56936: LD_VAR 0 1
56940: PUSH
56941: LD_INT 254
56943: EQUAL
56944: PUSH
56945: LD_VAR 0 2
56949: PPUSH
56950: CALL_OW 264
56954: PUSH
56955: LD_EXP 18
56959: EQUAL
56960: AND
56961: PUSH
56962: LD_VAR 0 3
56966: PPUSH
56967: CALL_OW 263
56971: PUSH
56972: LD_INT 3
56974: EQUAL
56975: AND
56976: IFFALSE 56992
// HackDestroyVehicle ( unit , selectedUnit ) ;
56978: LD_VAR 0 2
56982: PPUSH
56983: LD_VAR 0 3
56987: PPUSH
56988: CALL 58888 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56992: LD_VAR 0 1
56996: PUSH
56997: LD_INT 255
56999: EQUAL
57000: PUSH
57001: LD_VAR 0 2
57005: PPUSH
57006: CALL_OW 264
57010: PUSH
57011: LD_INT 14
57013: PUSH
57014: LD_INT 53
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: IN
57021: AND
57022: PUSH
57023: LD_VAR 0 4
57027: PPUSH
57028: LD_VAR 0 5
57032: PPUSH
57033: CALL_OW 488
57037: AND
57038: IFFALSE 57062
// CutTreeXYR ( unit , x , y , 12 ) ;
57040: LD_VAR 0 2
57044: PPUSH
57045: LD_VAR 0 4
57049: PPUSH
57050: LD_VAR 0 5
57054: PPUSH
57055: LD_INT 12
57057: PPUSH
57058: CALL 57454 0 4
// if cmd = 256 then
57062: LD_VAR 0 1
57066: PUSH
57067: LD_INT 256
57069: EQUAL
57070: IFFALSE 57091
// SetFactoryWaypoint ( unit , x , y ) ;
57072: LD_VAR 0 2
57076: PPUSH
57077: LD_VAR 0 4
57081: PPUSH
57082: LD_VAR 0 5
57086: PPUSH
57087: CALL 57096 0 3
// end ;
57091: LD_VAR 0 6
57095: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
57096: LD_INT 0
57098: PPUSH
57099: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
57100: LD_VAR 0 1
57104: NOT
57105: PUSH
57106: LD_VAR 0 2
57110: PPUSH
57111: LD_VAR 0 3
57115: PPUSH
57116: CALL_OW 488
57120: NOT
57121: OR
57122: PUSH
57123: LD_VAR 0 1
57127: PPUSH
57128: CALL_OW 266
57132: PUSH
57133: LD_INT 3
57135: NONEQUAL
57136: PUSH
57137: LD_VAR 0 1
57141: PPUSH
57142: CALL_OW 247
57146: PUSH
57147: LD_INT 1
57149: EQUAL
57150: NOT
57151: AND
57152: OR
57153: IFFALSE 57157
// exit ;
57155: GO 57306
// if GetType ( factory ) = unit_human then
57157: LD_VAR 0 1
57161: PPUSH
57162: CALL_OW 247
57166: PUSH
57167: LD_INT 1
57169: EQUAL
57170: IFFALSE 57187
// factory := IsInUnit ( factory ) ;
57172: LD_ADDR_VAR 0 1
57176: PUSH
57177: LD_VAR 0 1
57181: PPUSH
57182: CALL_OW 310
57186: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
57187: LD_VAR 0 1
57191: PPUSH
57192: CALL_OW 266
57196: PUSH
57197: LD_INT 3
57199: NONEQUAL
57200: IFFALSE 57204
// exit ;
57202: GO 57306
// if HexInfo ( x , y ) = factory then
57204: LD_VAR 0 2
57208: PPUSH
57209: LD_VAR 0 3
57213: PPUSH
57214: CALL_OW 428
57218: PUSH
57219: LD_VAR 0 1
57223: EQUAL
57224: IFFALSE 57251
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
57226: LD_ADDR_EXP 94
57230: PUSH
57231: LD_EXP 94
57235: PPUSH
57236: LD_VAR 0 1
57240: PPUSH
57241: LD_INT 0
57243: PPUSH
57244: CALL_OW 1
57248: ST_TO_ADDR
57249: GO 57302
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
57251: LD_ADDR_EXP 94
57255: PUSH
57256: LD_EXP 94
57260: PPUSH
57261: LD_VAR 0 1
57265: PPUSH
57266: LD_VAR 0 1
57270: PPUSH
57271: CALL_OW 255
57275: PUSH
57276: LD_VAR 0 1
57280: PUSH
57281: LD_VAR 0 2
57285: PUSH
57286: LD_VAR 0 3
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: PPUSH
57297: CALL_OW 1
57301: ST_TO_ADDR
// UpdateFactoryWaypoints ;
57302: CALL 57311 0 0
// end ;
57306: LD_VAR 0 4
57310: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
57311: LD_INT 0
57313: PPUSH
57314: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
57315: LD_STRING resetFactoryWaypoint();
57317: PPUSH
57318: CALL_OW 559
// if factoryWaypoints then
57322: LD_EXP 94
57326: IFFALSE 57449
// begin for i := 1 to factoryWaypoints do
57328: LD_ADDR_VAR 0 2
57332: PUSH
57333: DOUBLE
57334: LD_INT 1
57336: DEC
57337: ST_TO_ADDR
57338: LD_EXP 94
57342: PUSH
57343: FOR_TO
57344: IFFALSE 57447
// if factoryWaypoints [ i ] then
57346: LD_EXP 94
57350: PUSH
57351: LD_VAR 0 2
57355: ARRAY
57356: IFFALSE 57445
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
57358: LD_STRING setFactoryWaypointXY(
57360: PUSH
57361: LD_EXP 94
57365: PUSH
57366: LD_VAR 0 2
57370: ARRAY
57371: PUSH
57372: LD_INT 1
57374: ARRAY
57375: STR
57376: PUSH
57377: LD_STRING ,
57379: STR
57380: PUSH
57381: LD_EXP 94
57385: PUSH
57386: LD_VAR 0 2
57390: ARRAY
57391: PUSH
57392: LD_INT 2
57394: ARRAY
57395: STR
57396: PUSH
57397: LD_STRING ,
57399: STR
57400: PUSH
57401: LD_EXP 94
57405: PUSH
57406: LD_VAR 0 2
57410: ARRAY
57411: PUSH
57412: LD_INT 3
57414: ARRAY
57415: STR
57416: PUSH
57417: LD_STRING ,
57419: STR
57420: PUSH
57421: LD_EXP 94
57425: PUSH
57426: LD_VAR 0 2
57430: ARRAY
57431: PUSH
57432: LD_INT 4
57434: ARRAY
57435: STR
57436: PUSH
57437: LD_STRING )
57439: STR
57440: PPUSH
57441: CALL_OW 559
57445: GO 57343
57447: POP
57448: POP
// end ; end ;
57449: LD_VAR 0 1
57453: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57454: LD_INT 0
57456: PPUSH
57457: PPUSH
57458: PPUSH
57459: PPUSH
57460: PPUSH
57461: PPUSH
57462: PPUSH
57463: PPUSH
57464: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
57465: LD_VAR 0 1
57469: NOT
57470: PUSH
57471: LD_VAR 0 2
57475: PPUSH
57476: LD_VAR 0 3
57480: PPUSH
57481: CALL_OW 488
57485: NOT
57486: OR
57487: PUSH
57488: LD_VAR 0 4
57492: NOT
57493: OR
57494: IFFALSE 57498
// exit ;
57496: GO 57838
// list := [ ] ;
57498: LD_ADDR_VAR 0 13
57502: PUSH
57503: EMPTY
57504: ST_TO_ADDR
// if x - r < 0 then
57505: LD_VAR 0 2
57509: PUSH
57510: LD_VAR 0 4
57514: MINUS
57515: PUSH
57516: LD_INT 0
57518: LESS
57519: IFFALSE 57531
// min_x := 0 else
57521: LD_ADDR_VAR 0 7
57525: PUSH
57526: LD_INT 0
57528: ST_TO_ADDR
57529: GO 57547
// min_x := x - r ;
57531: LD_ADDR_VAR 0 7
57535: PUSH
57536: LD_VAR 0 2
57540: PUSH
57541: LD_VAR 0 4
57545: MINUS
57546: ST_TO_ADDR
// if y - r < 0 then
57547: LD_VAR 0 3
57551: PUSH
57552: LD_VAR 0 4
57556: MINUS
57557: PUSH
57558: LD_INT 0
57560: LESS
57561: IFFALSE 57573
// min_y := 0 else
57563: LD_ADDR_VAR 0 8
57567: PUSH
57568: LD_INT 0
57570: ST_TO_ADDR
57571: GO 57589
// min_y := y - r ;
57573: LD_ADDR_VAR 0 8
57577: PUSH
57578: LD_VAR 0 3
57582: PUSH
57583: LD_VAR 0 4
57587: MINUS
57588: ST_TO_ADDR
// max_x := x + r ;
57589: LD_ADDR_VAR 0 9
57593: PUSH
57594: LD_VAR 0 2
57598: PUSH
57599: LD_VAR 0 4
57603: PLUS
57604: ST_TO_ADDR
// max_y := y + r ;
57605: LD_ADDR_VAR 0 10
57609: PUSH
57610: LD_VAR 0 3
57614: PUSH
57615: LD_VAR 0 4
57619: PLUS
57620: ST_TO_ADDR
// for _x = min_x to max_x do
57621: LD_ADDR_VAR 0 11
57625: PUSH
57626: DOUBLE
57627: LD_VAR 0 7
57631: DEC
57632: ST_TO_ADDR
57633: LD_VAR 0 9
57637: PUSH
57638: FOR_TO
57639: IFFALSE 57756
// for _y = min_y to max_y do
57641: LD_ADDR_VAR 0 12
57645: PUSH
57646: DOUBLE
57647: LD_VAR 0 8
57651: DEC
57652: ST_TO_ADDR
57653: LD_VAR 0 10
57657: PUSH
57658: FOR_TO
57659: IFFALSE 57752
// begin if not ValidHex ( _x , _y ) then
57661: LD_VAR 0 11
57665: PPUSH
57666: LD_VAR 0 12
57670: PPUSH
57671: CALL_OW 488
57675: NOT
57676: IFFALSE 57680
// continue ;
57678: GO 57658
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57680: LD_VAR 0 11
57684: PPUSH
57685: LD_VAR 0 12
57689: PPUSH
57690: CALL_OW 351
57694: PUSH
57695: LD_VAR 0 11
57699: PPUSH
57700: LD_VAR 0 12
57704: PPUSH
57705: CALL_OW 554
57709: AND
57710: IFFALSE 57750
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57712: LD_ADDR_VAR 0 13
57716: PUSH
57717: LD_VAR 0 13
57721: PPUSH
57722: LD_VAR 0 13
57726: PUSH
57727: LD_INT 1
57729: PLUS
57730: PPUSH
57731: LD_VAR 0 11
57735: PUSH
57736: LD_VAR 0 12
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PPUSH
57745: CALL_OW 2
57749: ST_TO_ADDR
// end ;
57750: GO 57658
57752: POP
57753: POP
57754: GO 57638
57756: POP
57757: POP
// if not list then
57758: LD_VAR 0 13
57762: NOT
57763: IFFALSE 57767
// exit ;
57765: GO 57838
// for i in list do
57767: LD_ADDR_VAR 0 6
57771: PUSH
57772: LD_VAR 0 13
57776: PUSH
57777: FOR_IN
57778: IFFALSE 57836
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57780: LD_VAR 0 1
57784: PPUSH
57785: LD_STRING M
57787: PUSH
57788: LD_VAR 0 6
57792: PUSH
57793: LD_INT 1
57795: ARRAY
57796: PUSH
57797: LD_VAR 0 6
57801: PUSH
57802: LD_INT 2
57804: ARRAY
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: PUSH
57827: EMPTY
57828: LIST
57829: PPUSH
57830: CALL_OW 447
57834: GO 57777
57836: POP
57837: POP
// end ;
57838: LD_VAR 0 5
57842: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57843: LD_EXP 95
57847: NOT
57848: IFFALSE 57898
57850: GO 57852
57852: DISABLE
// begin initHack := true ;
57853: LD_ADDR_EXP 95
57857: PUSH
57858: LD_INT 1
57860: ST_TO_ADDR
// hackTanks := [ ] ;
57861: LD_ADDR_EXP 96
57865: PUSH
57866: EMPTY
57867: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57868: LD_ADDR_EXP 97
57872: PUSH
57873: EMPTY
57874: ST_TO_ADDR
// hackLimit := 3 ;
57875: LD_ADDR_EXP 98
57879: PUSH
57880: LD_INT 3
57882: ST_TO_ADDR
// hackDist := 12 ;
57883: LD_ADDR_EXP 99
57887: PUSH
57888: LD_INT 12
57890: ST_TO_ADDR
// hackCounter := [ ] ;
57891: LD_ADDR_EXP 100
57895: PUSH
57896: EMPTY
57897: ST_TO_ADDR
// end ;
57898: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57899: LD_EXP 95
57903: PUSH
57904: LD_INT 34
57906: PUSH
57907: LD_EXP 18
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PPUSH
57916: CALL_OW 69
57920: AND
57921: IFFALSE 58176
57923: GO 57925
57925: DISABLE
57926: LD_INT 0
57928: PPUSH
57929: PPUSH
// begin enable ;
57930: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57931: LD_ADDR_VAR 0 1
57935: PUSH
57936: LD_INT 34
57938: PUSH
57939: LD_EXP 18
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PPUSH
57948: CALL_OW 69
57952: PUSH
57953: FOR_IN
57954: IFFALSE 58174
// begin if not i in hackTanks then
57956: LD_VAR 0 1
57960: PUSH
57961: LD_EXP 96
57965: IN
57966: NOT
57967: IFFALSE 58050
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57969: LD_ADDR_EXP 96
57973: PUSH
57974: LD_EXP 96
57978: PPUSH
57979: LD_EXP 96
57983: PUSH
57984: LD_INT 1
57986: PLUS
57987: PPUSH
57988: LD_VAR 0 1
57992: PPUSH
57993: CALL_OW 1
57997: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57998: LD_ADDR_EXP 97
58002: PUSH
58003: LD_EXP 97
58007: PPUSH
58008: LD_EXP 97
58012: PUSH
58013: LD_INT 1
58015: PLUS
58016: PPUSH
58017: EMPTY
58018: PPUSH
58019: CALL_OW 1
58023: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58024: LD_ADDR_EXP 100
58028: PUSH
58029: LD_EXP 100
58033: PPUSH
58034: LD_EXP 100
58038: PUSH
58039: LD_INT 1
58041: PLUS
58042: PPUSH
58043: EMPTY
58044: PPUSH
58045: CALL_OW 1
58049: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58050: LD_VAR 0 1
58054: PPUSH
58055: CALL_OW 302
58059: NOT
58060: IFFALSE 58073
// begin HackUnlinkAll ( i ) ;
58062: LD_VAR 0 1
58066: PPUSH
58067: CALL 58179 0 1
// continue ;
58071: GO 57953
// end ; HackCheckCapturedStatus ( i ) ;
58073: LD_VAR 0 1
58077: PPUSH
58078: CALL 58622 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58082: LD_ADDR_VAR 0 2
58086: PUSH
58087: LD_INT 81
58089: PUSH
58090: LD_VAR 0 1
58094: PPUSH
58095: CALL_OW 255
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 33
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 91
58116: PUSH
58117: LD_VAR 0 1
58121: PUSH
58122: LD_EXP 99
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 50
58134: PUSH
58135: EMPTY
58136: LIST
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: PPUSH
58144: CALL_OW 69
58148: ST_TO_ADDR
// if not tmp then
58149: LD_VAR 0 2
58153: NOT
58154: IFFALSE 58158
// continue ;
58156: GO 57953
// HackLink ( i , tmp ) ;
58158: LD_VAR 0 1
58162: PPUSH
58163: LD_VAR 0 2
58167: PPUSH
58168: CALL 58315 0 2
// end ;
58172: GO 57953
58174: POP
58175: POP
// end ;
58176: PPOPN 2
58178: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58179: LD_INT 0
58181: PPUSH
58182: PPUSH
58183: PPUSH
// if not hack in hackTanks then
58184: LD_VAR 0 1
58188: PUSH
58189: LD_EXP 96
58193: IN
58194: NOT
58195: IFFALSE 58199
// exit ;
58197: GO 58310
// index := GetElementIndex ( hackTanks , hack ) ;
58199: LD_ADDR_VAR 0 4
58203: PUSH
58204: LD_EXP 96
58208: PPUSH
58209: LD_VAR 0 1
58213: PPUSH
58214: CALL 5977 0 2
58218: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58219: LD_EXP 97
58223: PUSH
58224: LD_VAR 0 4
58228: ARRAY
58229: IFFALSE 58310
// begin for i in hackTanksCaptured [ index ] do
58231: LD_ADDR_VAR 0 3
58235: PUSH
58236: LD_EXP 97
58240: PUSH
58241: LD_VAR 0 4
58245: ARRAY
58246: PUSH
58247: FOR_IN
58248: IFFALSE 58274
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58250: LD_VAR 0 3
58254: PUSH
58255: LD_INT 1
58257: ARRAY
58258: PPUSH
58259: LD_VAR 0 3
58263: PUSH
58264: LD_INT 2
58266: ARRAY
58267: PPUSH
58268: CALL_OW 235
58272: GO 58247
58274: POP
58275: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58276: LD_ADDR_EXP 97
58280: PUSH
58281: LD_EXP 97
58285: PPUSH
58286: LD_VAR 0 4
58290: PPUSH
58291: EMPTY
58292: PPUSH
58293: CALL_OW 1
58297: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58298: LD_VAR 0 1
58302: PPUSH
58303: LD_INT 0
58305: PPUSH
58306: CALL_OW 505
// end ; end ;
58310: LD_VAR 0 2
58314: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58315: LD_INT 0
58317: PPUSH
58318: PPUSH
58319: PPUSH
// if not hack in hackTanks or not vehicles then
58320: LD_VAR 0 1
58324: PUSH
58325: LD_EXP 96
58329: IN
58330: NOT
58331: PUSH
58332: LD_VAR 0 2
58336: NOT
58337: OR
58338: IFFALSE 58342
// exit ;
58340: GO 58617
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58342: LD_ADDR_VAR 0 2
58346: PUSH
58347: LD_VAR 0 1
58351: PPUSH
58352: LD_VAR 0 2
58356: PPUSH
58357: LD_INT 1
58359: PPUSH
58360: LD_INT 1
58362: PPUSH
58363: CALL 6627 0 4
58367: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58368: LD_ADDR_VAR 0 5
58372: PUSH
58373: LD_EXP 96
58377: PPUSH
58378: LD_VAR 0 1
58382: PPUSH
58383: CALL 5977 0 2
58387: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58388: LD_EXP 97
58392: PUSH
58393: LD_VAR 0 5
58397: ARRAY
58398: PUSH
58399: LD_EXP 98
58403: LESS
58404: IFFALSE 58593
// begin for i := 1 to vehicles do
58406: LD_ADDR_VAR 0 4
58410: PUSH
58411: DOUBLE
58412: LD_INT 1
58414: DEC
58415: ST_TO_ADDR
58416: LD_VAR 0 2
58420: PUSH
58421: FOR_TO
58422: IFFALSE 58591
// begin if hackTanksCaptured [ index ] = hackLimit then
58424: LD_EXP 97
58428: PUSH
58429: LD_VAR 0 5
58433: ARRAY
58434: PUSH
58435: LD_EXP 98
58439: EQUAL
58440: IFFALSE 58444
// break ;
58442: GO 58591
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58444: LD_ADDR_EXP 100
58448: PUSH
58449: LD_EXP 100
58453: PPUSH
58454: LD_VAR 0 5
58458: PPUSH
58459: LD_EXP 100
58463: PUSH
58464: LD_VAR 0 5
58468: ARRAY
58469: PUSH
58470: LD_INT 1
58472: PLUS
58473: PPUSH
58474: CALL_OW 1
58478: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58479: LD_ADDR_EXP 97
58483: PUSH
58484: LD_EXP 97
58488: PPUSH
58489: LD_VAR 0 5
58493: PUSH
58494: LD_EXP 97
58498: PUSH
58499: LD_VAR 0 5
58503: ARRAY
58504: PUSH
58505: LD_INT 1
58507: PLUS
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PPUSH
58513: LD_VAR 0 2
58517: PUSH
58518: LD_VAR 0 4
58522: ARRAY
58523: PUSH
58524: LD_VAR 0 2
58528: PUSH
58529: LD_VAR 0 4
58533: ARRAY
58534: PPUSH
58535: CALL_OW 255
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PPUSH
58544: CALL 6192 0 3
58548: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58549: LD_VAR 0 2
58553: PUSH
58554: LD_VAR 0 4
58558: ARRAY
58559: PPUSH
58560: LD_VAR 0 1
58564: PPUSH
58565: CALL_OW 255
58569: PPUSH
58570: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58574: LD_VAR 0 2
58578: PUSH
58579: LD_VAR 0 4
58583: ARRAY
58584: PPUSH
58585: CALL_OW 141
// end ;
58589: GO 58421
58591: POP
58592: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58593: LD_VAR 0 1
58597: PPUSH
58598: LD_EXP 97
58602: PUSH
58603: LD_VAR 0 5
58607: ARRAY
58608: PUSH
58609: LD_INT 0
58611: PLUS
58612: PPUSH
58613: CALL_OW 505
// end ;
58617: LD_VAR 0 3
58621: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58622: LD_INT 0
58624: PPUSH
58625: PPUSH
58626: PPUSH
58627: PPUSH
// if not hack in hackTanks then
58628: LD_VAR 0 1
58632: PUSH
58633: LD_EXP 96
58637: IN
58638: NOT
58639: IFFALSE 58643
// exit ;
58641: GO 58883
// index := GetElementIndex ( hackTanks , hack ) ;
58643: LD_ADDR_VAR 0 4
58647: PUSH
58648: LD_EXP 96
58652: PPUSH
58653: LD_VAR 0 1
58657: PPUSH
58658: CALL 5977 0 2
58662: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58663: LD_ADDR_VAR 0 3
58667: PUSH
58668: DOUBLE
58669: LD_EXP 97
58673: PUSH
58674: LD_VAR 0 4
58678: ARRAY
58679: INC
58680: ST_TO_ADDR
58681: LD_INT 1
58683: PUSH
58684: FOR_DOWNTO
58685: IFFALSE 58857
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58687: LD_ADDR_VAR 0 5
58691: PUSH
58692: LD_EXP 97
58696: PUSH
58697: LD_VAR 0 4
58701: ARRAY
58702: PUSH
58703: LD_VAR 0 3
58707: ARRAY
58708: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58709: LD_VAR 0 5
58713: PUSH
58714: LD_INT 1
58716: ARRAY
58717: PPUSH
58718: CALL_OW 302
58722: NOT
58723: PUSH
58724: LD_VAR 0 5
58728: PUSH
58729: LD_INT 1
58731: ARRAY
58732: PPUSH
58733: CALL_OW 255
58737: PUSH
58738: LD_VAR 0 1
58742: PPUSH
58743: CALL_OW 255
58747: NONEQUAL
58748: OR
58749: IFFALSE 58855
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58751: LD_VAR 0 5
58755: PUSH
58756: LD_INT 1
58758: ARRAY
58759: PPUSH
58760: CALL_OW 305
58764: PUSH
58765: LD_VAR 0 5
58769: PUSH
58770: LD_INT 1
58772: ARRAY
58773: PPUSH
58774: CALL_OW 255
58778: PUSH
58779: LD_VAR 0 1
58783: PPUSH
58784: CALL_OW 255
58788: EQUAL
58789: AND
58790: IFFALSE 58814
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58792: LD_VAR 0 5
58796: PUSH
58797: LD_INT 1
58799: ARRAY
58800: PPUSH
58801: LD_VAR 0 5
58805: PUSH
58806: LD_INT 2
58808: ARRAY
58809: PPUSH
58810: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58814: LD_ADDR_EXP 97
58818: PUSH
58819: LD_EXP 97
58823: PPUSH
58824: LD_VAR 0 4
58828: PPUSH
58829: LD_EXP 97
58833: PUSH
58834: LD_VAR 0 4
58838: ARRAY
58839: PPUSH
58840: LD_VAR 0 3
58844: PPUSH
58845: CALL_OW 3
58849: PPUSH
58850: CALL_OW 1
58854: ST_TO_ADDR
// end ; end ;
58855: GO 58684
58857: POP
58858: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58859: LD_VAR 0 1
58863: PPUSH
58864: LD_EXP 97
58868: PUSH
58869: LD_VAR 0 4
58873: ARRAY
58874: PUSH
58875: LD_INT 0
58877: PLUS
58878: PPUSH
58879: CALL_OW 505
// end ;
58883: LD_VAR 0 2
58887: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58888: LD_INT 0
58890: PPUSH
58891: PPUSH
58892: PPUSH
58893: PPUSH
// if not hack in hackTanks then
58894: LD_VAR 0 1
58898: PUSH
58899: LD_EXP 96
58903: IN
58904: NOT
58905: IFFALSE 58909
// exit ;
58907: GO 58994
// index := GetElementIndex ( hackTanks , hack ) ;
58909: LD_ADDR_VAR 0 5
58913: PUSH
58914: LD_EXP 96
58918: PPUSH
58919: LD_VAR 0 1
58923: PPUSH
58924: CALL 5977 0 2
58928: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58929: LD_ADDR_VAR 0 4
58933: PUSH
58934: DOUBLE
58935: LD_INT 1
58937: DEC
58938: ST_TO_ADDR
58939: LD_EXP 97
58943: PUSH
58944: LD_VAR 0 5
58948: ARRAY
58949: PUSH
58950: FOR_TO
58951: IFFALSE 58992
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58953: LD_EXP 97
58957: PUSH
58958: LD_VAR 0 5
58962: ARRAY
58963: PUSH
58964: LD_VAR 0 4
58968: ARRAY
58969: PUSH
58970: LD_INT 1
58972: ARRAY
58973: PUSH
58974: LD_VAR 0 2
58978: EQUAL
58979: IFFALSE 58990
// KillUnit ( vehicle ) ;
58981: LD_VAR 0 2
58985: PPUSH
58986: CALL_OW 66
58990: GO 58950
58992: POP
58993: POP
// end ;
58994: LD_VAR 0 3
58998: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
58999: LD_EXP 101
59003: NOT
59004: IFFALSE 59039
59006: GO 59008
59008: DISABLE
// begin initMiner := true ;
59009: LD_ADDR_EXP 101
59013: PUSH
59014: LD_INT 1
59016: ST_TO_ADDR
// minersList := [ ] ;
59017: LD_ADDR_EXP 102
59021: PUSH
59022: EMPTY
59023: ST_TO_ADDR
// minerMinesList := [ ] ;
59024: LD_ADDR_EXP 103
59028: PUSH
59029: EMPTY
59030: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
59031: LD_ADDR_EXP 104
59035: PUSH
59036: LD_INT 5
59038: ST_TO_ADDR
// end ;
59039: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
59040: LD_EXP 101
59044: PUSH
59045: LD_INT 34
59047: PUSH
59048: LD_EXP 23
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PPUSH
59057: CALL_OW 69
59061: AND
59062: IFFALSE 59525
59064: GO 59066
59066: DISABLE
59067: LD_INT 0
59069: PPUSH
59070: PPUSH
59071: PPUSH
59072: PPUSH
// begin enable ;
59073: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59074: LD_ADDR_VAR 0 1
59078: PUSH
59079: LD_INT 34
59081: PUSH
59082: LD_EXP 23
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PPUSH
59091: CALL_OW 69
59095: PUSH
59096: FOR_IN
59097: IFFALSE 59169
// begin if not i in minersList then
59099: LD_VAR 0 1
59103: PUSH
59104: LD_EXP 102
59108: IN
59109: NOT
59110: IFFALSE 59167
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59112: LD_ADDR_EXP 102
59116: PUSH
59117: LD_EXP 102
59121: PPUSH
59122: LD_EXP 102
59126: PUSH
59127: LD_INT 1
59129: PLUS
59130: PPUSH
59131: LD_VAR 0 1
59135: PPUSH
59136: CALL_OW 1
59140: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59141: LD_ADDR_EXP 103
59145: PUSH
59146: LD_EXP 103
59150: PPUSH
59151: LD_EXP 103
59155: PUSH
59156: LD_INT 1
59158: PLUS
59159: PPUSH
59160: EMPTY
59161: PPUSH
59162: CALL_OW 1
59166: ST_TO_ADDR
// end end ;
59167: GO 59096
59169: POP
59170: POP
// for i := minerMinesList downto 1 do
59171: LD_ADDR_VAR 0 1
59175: PUSH
59176: DOUBLE
59177: LD_EXP 103
59181: INC
59182: ST_TO_ADDR
59183: LD_INT 1
59185: PUSH
59186: FOR_DOWNTO
59187: IFFALSE 59523
// begin if IsLive ( minersList [ i ] ) then
59189: LD_EXP 102
59193: PUSH
59194: LD_VAR 0 1
59198: ARRAY
59199: PPUSH
59200: CALL_OW 300
59204: IFFALSE 59232
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59206: LD_EXP 102
59210: PUSH
59211: LD_VAR 0 1
59215: ARRAY
59216: PPUSH
59217: LD_EXP 103
59221: PUSH
59222: LD_VAR 0 1
59226: ARRAY
59227: PPUSH
59228: CALL_OW 505
// if not minerMinesList [ i ] then
59232: LD_EXP 103
59236: PUSH
59237: LD_VAR 0 1
59241: ARRAY
59242: NOT
59243: IFFALSE 59247
// continue ;
59245: GO 59186
// for j := minerMinesList [ i ] downto 1 do
59247: LD_ADDR_VAR 0 2
59251: PUSH
59252: DOUBLE
59253: LD_EXP 103
59257: PUSH
59258: LD_VAR 0 1
59262: ARRAY
59263: INC
59264: ST_TO_ADDR
59265: LD_INT 1
59267: PUSH
59268: FOR_DOWNTO
59269: IFFALSE 59519
// begin side := GetSide ( minersList [ i ] ) ;
59271: LD_ADDR_VAR 0 3
59275: PUSH
59276: LD_EXP 102
59280: PUSH
59281: LD_VAR 0 1
59285: ARRAY
59286: PPUSH
59287: CALL_OW 255
59291: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59292: LD_ADDR_VAR 0 4
59296: PUSH
59297: LD_EXP 103
59301: PUSH
59302: LD_VAR 0 1
59306: ARRAY
59307: PUSH
59308: LD_VAR 0 2
59312: ARRAY
59313: PUSH
59314: LD_INT 1
59316: ARRAY
59317: PPUSH
59318: LD_EXP 103
59322: PUSH
59323: LD_VAR 0 1
59327: ARRAY
59328: PUSH
59329: LD_VAR 0 2
59333: ARRAY
59334: PUSH
59335: LD_INT 2
59337: ARRAY
59338: PPUSH
59339: CALL_OW 428
59343: ST_TO_ADDR
// if not tmp then
59344: LD_VAR 0 4
59348: NOT
59349: IFFALSE 59353
// continue ;
59351: GO 59268
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59353: LD_VAR 0 4
59357: PUSH
59358: LD_INT 81
59360: PUSH
59361: LD_VAR 0 3
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PPUSH
59370: CALL_OW 69
59374: IN
59375: PUSH
59376: LD_EXP 103
59380: PUSH
59381: LD_VAR 0 1
59385: ARRAY
59386: PUSH
59387: LD_VAR 0 2
59391: ARRAY
59392: PUSH
59393: LD_INT 1
59395: ARRAY
59396: PPUSH
59397: LD_EXP 103
59401: PUSH
59402: LD_VAR 0 1
59406: ARRAY
59407: PUSH
59408: LD_VAR 0 2
59412: ARRAY
59413: PUSH
59414: LD_INT 2
59416: ARRAY
59417: PPUSH
59418: CALL_OW 458
59422: AND
59423: IFFALSE 59517
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59425: LD_EXP 103
59429: PUSH
59430: LD_VAR 0 1
59434: ARRAY
59435: PUSH
59436: LD_VAR 0 2
59440: ARRAY
59441: PUSH
59442: LD_INT 1
59444: ARRAY
59445: PPUSH
59446: LD_EXP 103
59450: PUSH
59451: LD_VAR 0 1
59455: ARRAY
59456: PUSH
59457: LD_VAR 0 2
59461: ARRAY
59462: PUSH
59463: LD_INT 2
59465: ARRAY
59466: PPUSH
59467: LD_VAR 0 3
59471: PPUSH
59472: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59476: LD_ADDR_EXP 103
59480: PUSH
59481: LD_EXP 103
59485: PPUSH
59486: LD_VAR 0 1
59490: PPUSH
59491: LD_EXP 103
59495: PUSH
59496: LD_VAR 0 1
59500: ARRAY
59501: PPUSH
59502: LD_VAR 0 2
59506: PPUSH
59507: CALL_OW 3
59511: PPUSH
59512: CALL_OW 1
59516: ST_TO_ADDR
// end ; end ;
59517: GO 59268
59519: POP
59520: POP
// end ;
59521: GO 59186
59523: POP
59524: POP
// end ;
59525: PPOPN 4
59527: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
59528: LD_INT 0
59530: PPUSH
59531: PPUSH
// result := false ;
59532: LD_ADDR_VAR 0 4
59536: PUSH
59537: LD_INT 0
59539: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59540: LD_VAR 0 1
59544: PPUSH
59545: CALL_OW 264
59549: PUSH
59550: LD_EXP 23
59554: EQUAL
59555: NOT
59556: IFFALSE 59560
// exit ;
59558: GO 59800
// index := GetElementIndex ( minersList , unit ) ;
59560: LD_ADDR_VAR 0 5
59564: PUSH
59565: LD_EXP 102
59569: PPUSH
59570: LD_VAR 0 1
59574: PPUSH
59575: CALL 5977 0 2
59579: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59580: LD_EXP 103
59584: PUSH
59585: LD_VAR 0 5
59589: ARRAY
59590: PUSH
59591: LD_EXP 104
59595: GREATEREQUAL
59596: IFFALSE 59600
// exit ;
59598: GO 59800
// ComMoveXY ( unit , x , y ) ;
59600: LD_VAR 0 1
59604: PPUSH
59605: LD_VAR 0 2
59609: PPUSH
59610: LD_VAR 0 3
59614: PPUSH
59615: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59619: LD_INT 35
59621: PPUSH
59622: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59626: LD_VAR 0 1
59630: PPUSH
59631: LD_VAR 0 2
59635: PPUSH
59636: LD_VAR 0 3
59640: PPUSH
59641: CALL 36696 0 3
59645: NOT
59646: PUSH
59647: LD_VAR 0 1
59651: PPUSH
59652: CALL_OW 314
59656: AND
59657: IFFALSE 59661
// exit ;
59659: GO 59800
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59661: LD_VAR 0 2
59665: PPUSH
59666: LD_VAR 0 3
59670: PPUSH
59671: CALL_OW 428
59675: PUSH
59676: LD_VAR 0 1
59680: EQUAL
59681: PUSH
59682: LD_VAR 0 1
59686: PPUSH
59687: CALL_OW 314
59691: NOT
59692: AND
59693: IFFALSE 59619
// PlaySoundXY ( x , y , PlantMine ) ;
59695: LD_VAR 0 2
59699: PPUSH
59700: LD_VAR 0 3
59704: PPUSH
59705: LD_STRING PlantMine
59707: PPUSH
59708: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
59712: LD_VAR 0 2
59716: PPUSH
59717: LD_VAR 0 3
59721: PPUSH
59722: LD_VAR 0 1
59726: PPUSH
59727: CALL_OW 255
59731: PPUSH
59732: LD_INT 0
59734: PPUSH
59735: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59739: LD_ADDR_EXP 103
59743: PUSH
59744: LD_EXP 103
59748: PPUSH
59749: LD_VAR 0 5
59753: PUSH
59754: LD_EXP 103
59758: PUSH
59759: LD_VAR 0 5
59763: ARRAY
59764: PUSH
59765: LD_INT 1
59767: PLUS
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PPUSH
59773: LD_VAR 0 2
59777: PUSH
59778: LD_VAR 0 3
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PPUSH
59787: CALL 6192 0 3
59791: ST_TO_ADDR
// result := true ;
59792: LD_ADDR_VAR 0 4
59796: PUSH
59797: LD_INT 1
59799: ST_TO_ADDR
// end ;
59800: LD_VAR 0 4
59804: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59805: LD_INT 0
59807: PPUSH
59808: PPUSH
59809: PPUSH
// if not unit in minersList then
59810: LD_VAR 0 1
59814: PUSH
59815: LD_EXP 102
59819: IN
59820: NOT
59821: IFFALSE 59825
// exit ;
59823: GO 60217
// index := GetElementIndex ( minersList , unit ) ;
59825: LD_ADDR_VAR 0 6
59829: PUSH
59830: LD_EXP 102
59834: PPUSH
59835: LD_VAR 0 1
59839: PPUSH
59840: CALL 5977 0 2
59844: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59845: LD_ADDR_VAR 0 5
59849: PUSH
59850: DOUBLE
59851: LD_EXP 103
59855: PUSH
59856: LD_VAR 0 6
59860: ARRAY
59861: INC
59862: ST_TO_ADDR
59863: LD_INT 1
59865: PUSH
59866: FOR_DOWNTO
59867: IFFALSE 60028
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
59869: LD_EXP 103
59873: PUSH
59874: LD_VAR 0 6
59878: ARRAY
59879: PUSH
59880: LD_VAR 0 5
59884: ARRAY
59885: PUSH
59886: LD_INT 1
59888: ARRAY
59889: PUSH
59890: LD_VAR 0 2
59894: EQUAL
59895: PUSH
59896: LD_EXP 103
59900: PUSH
59901: LD_VAR 0 6
59905: ARRAY
59906: PUSH
59907: LD_VAR 0 5
59911: ARRAY
59912: PUSH
59913: LD_INT 2
59915: ARRAY
59916: PUSH
59917: LD_VAR 0 3
59921: EQUAL
59922: AND
59923: IFFALSE 60026
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59925: LD_EXP 103
59929: PUSH
59930: LD_VAR 0 6
59934: ARRAY
59935: PUSH
59936: LD_VAR 0 5
59940: ARRAY
59941: PUSH
59942: LD_INT 1
59944: ARRAY
59945: PPUSH
59946: LD_EXP 103
59950: PUSH
59951: LD_VAR 0 6
59955: ARRAY
59956: PUSH
59957: LD_VAR 0 5
59961: ARRAY
59962: PUSH
59963: LD_INT 2
59965: ARRAY
59966: PPUSH
59967: LD_VAR 0 1
59971: PPUSH
59972: CALL_OW 255
59976: PPUSH
59977: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59981: LD_ADDR_EXP 103
59985: PUSH
59986: LD_EXP 103
59990: PPUSH
59991: LD_VAR 0 6
59995: PPUSH
59996: LD_EXP 103
60000: PUSH
60001: LD_VAR 0 6
60005: ARRAY
60006: PPUSH
60007: LD_VAR 0 5
60011: PPUSH
60012: CALL_OW 3
60016: PPUSH
60017: CALL_OW 1
60021: ST_TO_ADDR
// exit ;
60022: POP
60023: POP
60024: GO 60217
// end ; end ;
60026: GO 59866
60028: POP
60029: POP
// for i := minerMinesList [ index ] downto 1 do
60030: LD_ADDR_VAR 0 5
60034: PUSH
60035: DOUBLE
60036: LD_EXP 103
60040: PUSH
60041: LD_VAR 0 6
60045: ARRAY
60046: INC
60047: ST_TO_ADDR
60048: LD_INT 1
60050: PUSH
60051: FOR_DOWNTO
60052: IFFALSE 60215
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60054: LD_EXP 103
60058: PUSH
60059: LD_VAR 0 6
60063: ARRAY
60064: PUSH
60065: LD_VAR 0 5
60069: ARRAY
60070: PUSH
60071: LD_INT 1
60073: ARRAY
60074: PPUSH
60075: LD_EXP 103
60079: PUSH
60080: LD_VAR 0 6
60084: ARRAY
60085: PUSH
60086: LD_VAR 0 5
60090: ARRAY
60091: PUSH
60092: LD_INT 2
60094: ARRAY
60095: PPUSH
60096: LD_VAR 0 2
60100: PPUSH
60101: LD_VAR 0 3
60105: PPUSH
60106: CALL_OW 298
60110: PUSH
60111: LD_INT 6
60113: LESS
60114: IFFALSE 60213
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60116: LD_EXP 103
60120: PUSH
60121: LD_VAR 0 6
60125: ARRAY
60126: PUSH
60127: LD_VAR 0 5
60131: ARRAY
60132: PUSH
60133: LD_INT 1
60135: ARRAY
60136: PPUSH
60137: LD_EXP 103
60141: PUSH
60142: LD_VAR 0 6
60146: ARRAY
60147: PUSH
60148: LD_VAR 0 5
60152: ARRAY
60153: PUSH
60154: LD_INT 2
60156: ARRAY
60157: PPUSH
60158: LD_VAR 0 1
60162: PPUSH
60163: CALL_OW 255
60167: PPUSH
60168: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60172: LD_ADDR_EXP 103
60176: PUSH
60177: LD_EXP 103
60181: PPUSH
60182: LD_VAR 0 6
60186: PPUSH
60187: LD_EXP 103
60191: PUSH
60192: LD_VAR 0 6
60196: ARRAY
60197: PPUSH
60198: LD_VAR 0 5
60202: PPUSH
60203: CALL_OW 3
60207: PPUSH
60208: CALL_OW 1
60212: ST_TO_ADDR
// end ; end ;
60213: GO 60051
60215: POP
60216: POP
// end ;
60217: LD_VAR 0 4
60221: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60222: LD_INT 0
60224: PPUSH
60225: PPUSH
60226: PPUSH
60227: PPUSH
60228: PPUSH
60229: PPUSH
60230: PPUSH
60231: PPUSH
60232: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60233: LD_VAR 0 1
60237: PPUSH
60238: CALL_OW 264
60242: PUSH
60243: LD_EXP 23
60247: EQUAL
60248: NOT
60249: PUSH
60250: LD_VAR 0 1
60254: PUSH
60255: LD_EXP 102
60259: IN
60260: NOT
60261: OR
60262: IFFALSE 60266
// exit ;
60264: GO 60588
// index := GetElementIndex ( minersList , unit ) ;
60266: LD_ADDR_VAR 0 6
60270: PUSH
60271: LD_EXP 102
60275: PPUSH
60276: LD_VAR 0 1
60280: PPUSH
60281: CALL 5977 0 2
60285: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60286: LD_ADDR_VAR 0 8
60290: PUSH
60291: LD_EXP 104
60295: PUSH
60296: LD_EXP 103
60300: PUSH
60301: LD_VAR 0 6
60305: ARRAY
60306: MINUS
60307: ST_TO_ADDR
// if not minesFreeAmount then
60308: LD_VAR 0 8
60312: NOT
60313: IFFALSE 60317
// exit ;
60315: GO 60588
// tmp := [ ] ;
60317: LD_ADDR_VAR 0 7
60321: PUSH
60322: EMPTY
60323: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60324: LD_ADDR_VAR 0 5
60328: PUSH
60329: DOUBLE
60330: LD_INT 1
60332: DEC
60333: ST_TO_ADDR
60334: LD_VAR 0 8
60338: PUSH
60339: FOR_TO
60340: IFFALSE 60535
// begin _d := rand ( 0 , 5 ) ;
60342: LD_ADDR_VAR 0 11
60346: PUSH
60347: LD_INT 0
60349: PPUSH
60350: LD_INT 5
60352: PPUSH
60353: CALL_OW 12
60357: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60358: LD_ADDR_VAR 0 12
60362: PUSH
60363: LD_INT 2
60365: PPUSH
60366: LD_INT 6
60368: PPUSH
60369: CALL_OW 12
60373: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60374: LD_ADDR_VAR 0 9
60378: PUSH
60379: LD_VAR 0 2
60383: PPUSH
60384: LD_VAR 0 11
60388: PPUSH
60389: LD_VAR 0 12
60393: PPUSH
60394: CALL_OW 272
60398: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60399: LD_ADDR_VAR 0 10
60403: PUSH
60404: LD_VAR 0 3
60408: PPUSH
60409: LD_VAR 0 11
60413: PPUSH
60414: LD_VAR 0 12
60418: PPUSH
60419: CALL_OW 273
60423: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60424: LD_VAR 0 9
60428: PPUSH
60429: LD_VAR 0 10
60433: PPUSH
60434: CALL_OW 488
60438: PUSH
60439: LD_VAR 0 9
60443: PUSH
60444: LD_VAR 0 10
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_VAR 0 7
60457: IN
60458: NOT
60459: AND
60460: PUSH
60461: LD_VAR 0 9
60465: PPUSH
60466: LD_VAR 0 10
60470: PPUSH
60471: CALL_OW 458
60475: NOT
60476: AND
60477: IFFALSE 60519
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60479: LD_ADDR_VAR 0 7
60483: PUSH
60484: LD_VAR 0 7
60488: PPUSH
60489: LD_VAR 0 7
60493: PUSH
60494: LD_INT 1
60496: PLUS
60497: PPUSH
60498: LD_VAR 0 9
60502: PUSH
60503: LD_VAR 0 10
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PPUSH
60512: CALL_OW 1
60516: ST_TO_ADDR
60517: GO 60533
// i := i - 1 ;
60519: LD_ADDR_VAR 0 5
60523: PUSH
60524: LD_VAR 0 5
60528: PUSH
60529: LD_INT 1
60531: MINUS
60532: ST_TO_ADDR
// end ;
60533: GO 60339
60535: POP
60536: POP
// for i in tmp do
60537: LD_ADDR_VAR 0 5
60541: PUSH
60542: LD_VAR 0 7
60546: PUSH
60547: FOR_IN
60548: IFFALSE 60586
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60550: LD_VAR 0 1
60554: PPUSH
60555: LD_VAR 0 5
60559: PUSH
60560: LD_INT 1
60562: ARRAY
60563: PPUSH
60564: LD_VAR 0 5
60568: PUSH
60569: LD_INT 2
60571: ARRAY
60572: PPUSH
60573: CALL 59528 0 3
60577: NOT
60578: IFFALSE 60584
// exit ;
60580: POP
60581: POP
60582: GO 60588
60584: GO 60547
60586: POP
60587: POP
// end ;
60588: LD_VAR 0 4
60592: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
60593: LD_INT 0
60595: PPUSH
60596: PPUSH
60597: PPUSH
60598: PPUSH
60599: PPUSH
60600: PPUSH
60601: PPUSH
// if not GetClass ( unit ) = class_sniper then
60602: LD_VAR 0 1
60606: PPUSH
60607: CALL_OW 257
60611: PUSH
60612: LD_INT 5
60614: EQUAL
60615: NOT
60616: IFFALSE 60620
// exit ;
60618: GO 61008
// dist := 8 ;
60620: LD_ADDR_VAR 0 5
60624: PUSH
60625: LD_INT 8
60627: ST_TO_ADDR
// viewRange := 12 ;
60628: LD_ADDR_VAR 0 7
60632: PUSH
60633: LD_INT 12
60635: ST_TO_ADDR
// side := GetSide ( unit ) ;
60636: LD_ADDR_VAR 0 6
60640: PUSH
60641: LD_VAR 0 1
60645: PPUSH
60646: CALL_OW 255
60650: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60651: LD_INT 61
60653: PPUSH
60654: LD_VAR 0 6
60658: PPUSH
60659: CALL_OW 321
60663: PUSH
60664: LD_INT 2
60666: EQUAL
60667: IFFALSE 60677
// viewRange := 16 ;
60669: LD_ADDR_VAR 0 7
60673: PUSH
60674: LD_INT 16
60676: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60677: LD_VAR 0 1
60681: PPUSH
60682: LD_VAR 0 2
60686: PPUSH
60687: LD_VAR 0 3
60691: PPUSH
60692: CALL_OW 297
60696: PUSH
60697: LD_VAR 0 5
60701: GREATER
60702: IFFALSE 60781
// begin ComMoveXY ( unit , x , y ) ;
60704: LD_VAR 0 1
60708: PPUSH
60709: LD_VAR 0 2
60713: PPUSH
60714: LD_VAR 0 3
60718: PPUSH
60719: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60723: LD_INT 35
60725: PPUSH
60726: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60730: LD_VAR 0 1
60734: PPUSH
60735: LD_VAR 0 2
60739: PPUSH
60740: LD_VAR 0 3
60744: PPUSH
60745: CALL 36696 0 3
60749: NOT
60750: IFFALSE 60754
// exit ;
60752: GO 61008
// until GetDistUnitXY ( unit , x , y ) < dist ;
60754: LD_VAR 0 1
60758: PPUSH
60759: LD_VAR 0 2
60763: PPUSH
60764: LD_VAR 0 3
60768: PPUSH
60769: CALL_OW 297
60773: PUSH
60774: LD_VAR 0 5
60778: LESS
60779: IFFALSE 60723
// end ; ComTurnXY ( unit , x , y ) ;
60781: LD_VAR 0 1
60785: PPUSH
60786: LD_VAR 0 2
60790: PPUSH
60791: LD_VAR 0 3
60795: PPUSH
60796: CALL_OW 118
// wait ( 5 ) ;
60800: LD_INT 5
60802: PPUSH
60803: CALL_OW 67
// _d := GetDir ( unit ) ;
60807: LD_ADDR_VAR 0 10
60811: PUSH
60812: LD_VAR 0 1
60816: PPUSH
60817: CALL_OW 254
60821: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
60822: LD_ADDR_VAR 0 8
60826: PUSH
60827: LD_VAR 0 1
60831: PPUSH
60832: CALL_OW 250
60836: PPUSH
60837: LD_VAR 0 10
60841: PPUSH
60842: LD_VAR 0 5
60846: PPUSH
60847: CALL_OW 272
60851: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
60852: LD_ADDR_VAR 0 9
60856: PUSH
60857: LD_VAR 0 1
60861: PPUSH
60862: CALL_OW 251
60866: PPUSH
60867: LD_VAR 0 10
60871: PPUSH
60872: LD_VAR 0 5
60876: PPUSH
60877: CALL_OW 273
60881: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60882: LD_VAR 0 8
60886: PPUSH
60887: LD_VAR 0 9
60891: PPUSH
60892: CALL_OW 488
60896: NOT
60897: IFFALSE 60901
// exit ;
60899: GO 61008
// ComAnimCustom ( unit , 1 ) ;
60901: LD_VAR 0 1
60905: PPUSH
60906: LD_INT 1
60908: PPUSH
60909: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60913: LD_VAR 0 8
60917: PPUSH
60918: LD_VAR 0 9
60922: PPUSH
60923: LD_VAR 0 6
60927: PPUSH
60928: LD_VAR 0 7
60932: PPUSH
60933: CALL_OW 330
// repeat wait ( 1 ) ;
60937: LD_INT 1
60939: PPUSH
60940: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
60944: LD_VAR 0 1
60948: PPUSH
60949: CALL_OW 316
60953: PUSH
60954: LD_VAR 0 1
60958: PPUSH
60959: CALL_OW 314
60963: OR
60964: PUSH
60965: LD_VAR 0 1
60969: PPUSH
60970: CALL_OW 302
60974: NOT
60975: OR
60976: PUSH
60977: LD_VAR 0 1
60981: PPUSH
60982: CALL_OW 301
60986: OR
60987: IFFALSE 60937
// RemoveSeeing ( _x , _y , side ) ;
60989: LD_VAR 0 8
60993: PPUSH
60994: LD_VAR 0 9
60998: PPUSH
60999: LD_VAR 0 6
61003: PPUSH
61004: CALL_OW 331
// end ;
61008: LD_VAR 0 4
61012: RET
