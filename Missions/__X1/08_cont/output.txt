// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 20814 0 0
// PrepareRussian ;
  12: CALL 2026 0 0
// PrepareArabian ;
  16: CALL 446 0 0
// Action ;
  20: CALL 3824 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy , blockPatrolThread , firstArmouryDialog , weaponsAmount , canEquipWeapons , giveSniperRifleToMike , ruKilledHex , meetWithMuchin , kaiaWeaponHidden ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// blockPatrolThread := false ;
 359: LD_ADDR_EXP 38
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// firstArmouryDialog := false ;
 367: LD_ADDR_EXP 39
 371: PUSH
 372: LD_INT 0
 374: ST_TO_ADDR
// giveSniperRifleToMike := false ;
 375: LD_ADDR_EXP 42
 379: PUSH
 380: LD_INT 0
 382: ST_TO_ADDR
// weaponsAmount := [ 6 , 5 , 4 , 3 ] [ Difficulty ] ;
 383: LD_ADDR_EXP 40
 387: PUSH
 388: LD_INT 6
 390: PUSH
 391: LD_INT 5
 393: PUSH
 394: LD_INT 4
 396: PUSH
 397: LD_INT 3
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// canEquipWeapons := false ;
 412: LD_ADDR_EXP 41
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// ruKilledHex := [ ] ;
 420: LD_ADDR_EXP 43
 424: PUSH
 425: EMPTY
 426: ST_TO_ADDR
// kaiaWeaponHidden := 0 ;
 427: LD_ADDR_EXP 45
 431: PUSH
 432: LD_INT 0
 434: ST_TO_ADDR
// enable ( entranceEvent ) ;
 435: LD_INT 1
 437: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 438: LD_INT 2
 440: DISABLE_MARKED
// end ; end_of_file
 441: LD_VAR 0 1
 445: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 446: LD_INT 0
 448: PPUSH
 449: PPUSH
// uc_side := 4 ;
 450: LD_ADDR_OWVAR 20
 454: PUSH
 455: LD_INT 4
 457: ST_TO_ADDR
// uc_nation := 1 ;
 458: LD_ADDR_OWVAR 21
 462: PUSH
 463: LD_INT 1
 465: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 466: LD_ADDR_EXP 58
 470: PUSH
 471: LD_STRING 07_Americans
 473: PPUSH
 474: CALL_OW 31
 478: ST_TO_ADDR
// if americanSquad < 5 then
 479: LD_EXP 58
 483: PUSH
 484: LD_INT 5
 486: LESS
 487: IFFALSE 581
// begin if not americanSquad then
 489: LD_EXP 58
 493: NOT
 494: IFFALSE 503
// americanSquad := [ ] ;
 496: LD_ADDR_EXP 58
 500: PUSH
 501: EMPTY
 502: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 503: LD_ADDR_VAR 0 2
 507: PUSH
 508: DOUBLE
 509: LD_EXP 58
 513: DEC
 514: ST_TO_ADDR
 515: LD_INT 2
 517: PUSH
 518: LD_INT 3
 520: PUSH
 521: LD_INT 4
 523: PUSH
 524: LD_INT 4
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: PUSH
 533: LD_OWVAR 67
 537: ARRAY
 538: PUSH
 539: FOR_TO
 540: IFFALSE 577
// begin PrepareHuman ( false , 2 , 6 ) ;
 542: LD_INT 0
 544: PPUSH
 545: LD_INT 2
 547: PPUSH
 548: LD_INT 6
 550: PPUSH
 551: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 555: LD_ADDR_EXP 58
 559: PUSH
 560: LD_EXP 58
 564: PPUSH
 565: CALL_OW 44
 569: PPUSH
 570: CALL 67162 0 2
 574: ST_TO_ADDR
// end ;
 575: GO 539
 577: POP
 578: POP
// end else
 579: GO 628
// for i := Count ( americanSquad ) downto 5 do
 581: LD_ADDR_VAR 0 2
 585: PUSH
 586: DOUBLE
 587: LD_EXP 58
 591: PPUSH
 592: CALL 31573 0 1
 596: INC
 597: ST_TO_ADDR
 598: LD_INT 5
 600: PUSH
 601: FOR_DOWNTO
 602: IFFALSE 626
// americanSquad := Delete ( americanSquad , i ) ;
 604: LD_ADDR_EXP 58
 608: PUSH
 609: LD_EXP 58
 613: PPUSH
 614: LD_VAR 0 2
 618: PPUSH
 619: CALL_OW 3
 623: ST_TO_ADDR
 624: GO 601
 626: POP
 627: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 628: LD_ADDR_EXP 60
 632: PUSH
 633: LD_STRING UsCommander
 635: PPUSH
 636: LD_EXP 1
 640: NOT
 641: PPUSH
 642: LD_STRING 07_
 644: PPUSH
 645: CALL 29471 0 3
 649: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 650: LD_INT 1
 652: PPUSH
 653: LD_INT 6
 655: PPUSH
 656: CALL_OW 381
// Jerry := CreateHuman ;
 660: LD_ADDR_EXP 61
 664: PUSH
 665: CALL_OW 44
 669: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 670: LD_EXP 61
 674: PPUSH
 675: LD_INT 33
 677: PPUSH
 678: CALL_OW 336
// if not Doug then
 682: LD_EXP 60
 686: NOT
 687: IFFALSE 709
// begin PrepareSoldier ( sex_male , 6 ) ;
 689: LD_INT 1
 691: PPUSH
 692: LD_INT 6
 694: PPUSH
 695: CALL_OW 381
// Doug := CreateHuman ;
 699: LD_ADDR_EXP 60
 703: PUSH
 704: CALL_OW 44
 708: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 709: LD_EXP 60
 713: PPUSH
 714: LD_INT 33
 716: PPUSH
 717: CALL_OW 336
// if johnnySaved or debug then
 721: LD_EXP 3
 725: PUSH
 726: LD_EXP 1
 730: OR
 731: IFFALSE 758
// begin Harris := NewCharacter ( Harris ) ;
 733: LD_ADDR_EXP 59
 737: PUSH
 738: LD_STRING Harris
 740: PPUSH
 741: CALL_OW 25
 745: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 746: LD_EXP 59
 750: PPUSH
 751: LD_INT 33
 753: PPUSH
 754: CALL_OW 336
// end ; uc_side := 2 ;
 758: LD_ADDR_OWVAR 20
 762: PUSH
 763: LD_INT 2
 765: ST_TO_ADDR
// uc_nation := 2 ;
 766: LD_ADDR_OWVAR 21
 770: PUSH
 771: LD_INT 2
 773: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 774: LD_ADDR_EXP 46
 778: PUSH
 779: LD_STRING Heike
 781: PPUSH
 782: LD_EXP 1
 786: NOT
 787: PPUSH
 788: LD_EXP 2
 792: PPUSH
 793: CALL 29471 0 3
 797: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 798: LD_ADDR_EXP 49
 802: PUSH
 803: LD_STRING Ibrahim
 805: PPUSH
 806: LD_EXP 1
 810: NOT
 811: PPUSH
 812: LD_EXP 2
 816: PPUSH
 817: CALL 29471 0 3
 821: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 822: LD_ADDR_EXP 47
 826: PUSH
 827: LD_STRING Givi
 829: PPUSH
 830: LD_EXP 1
 834: NOT
 835: PPUSH
 836: LD_EXP 2
 840: PPUSH
 841: CALL 29471 0 3
 845: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 846: LD_ADDR_EXP 50
 850: PUSH
 851: LD_STRING Kamil
 853: PPUSH
 854: LD_EXP 1
 858: NOT
 859: PPUSH
 860: LD_EXP 2
 864: PPUSH
 865: CALL 29471 0 3
 869: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 870: LD_ADDR_EXP 51
 874: PUSH
 875: LD_STRING Kaia
 877: PPUSH
 878: LD_EXP 1
 882: NOT
 883: PPUSH
 884: LD_EXP 2
 888: PPUSH
 889: CALL 29471 0 3
 893: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 894: LD_ADDR_EXP 52
 898: PUSH
 899: LD_STRING Sophia
 901: PPUSH
 902: LD_EXP 1
 906: NOT
 907: PPUSH
 908: LD_EXP 2
 912: PPUSH
 913: CALL 29471 0 3
 917: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 918: LD_ADDR_EXP 53
 922: PUSH
 923: LD_STRING Markov
 925: PPUSH
 926: LD_EXP 1
 930: NOT
 931: PPUSH
 932: LD_EXP 2
 936: PPUSH
 937: CALL 29471 0 3
 941: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 942: LD_ADDR_EXP 56
 946: PUSH
 947: LD_STRING Aviradze
 949: PPUSH
 950: LD_EXP 1
 954: NOT
 955: PPUSH
 956: LD_EXP 2
 960: PPUSH
 961: CALL 29471 0 3
 965: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 966: LD_ADDR_EXP 55
 970: PUSH
 971: LD_STRING Kurt
 973: PPUSH
 974: LD_EXP 1
 978: NOT
 979: PPUSH
 980: LD_EXP 2
 984: PPUSH
 985: CALL 29471 0 3
 989: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 990: LD_ADDR_EXP 48
 994: PUSH
 995: LD_STRING Mike
 997: PPUSH
 998: LD_EXP 1
1002: NOT
1003: PPUSH
1004: LD_EXP 2
1008: PPUSH
1009: CALL 29471 0 3
1013: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1014: LD_ADDR_EXP 54
1018: PUSH
1019: LD_STRING Olaf
1021: PPUSH
1022: LD_EXP 1
1026: NOT
1027: PPUSH
1028: LD_EXP 2
1032: PPUSH
1033: CALL 29471 0 3
1037: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1038: LD_ADDR_EXP 57
1042: PUSH
1043: LD_STRING 07_others
1045: PPUSH
1046: CALL_OW 31
1050: ST_TO_ADDR
// end ;
1051: LD_VAR 0 1
1055: RET
// export function PrepareGame ; var i ; begin
1056: LD_INT 0
1058: PPUSH
1059: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
1060: LD_EXP 46
1064: PPUSH
1065: LD_INT 23
1067: PPUSH
1068: CALL_OW 52
// if Givi then
1072: LD_EXP 47
1076: IFFALSE 1114
// begin SetSide ( Givi , 5 ) ;
1078: LD_EXP 47
1082: PPUSH
1083: LD_INT 5
1085: PPUSH
1086: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1090: LD_EXP 47
1094: PPUSH
1095: LD_INT 9
1097: PPUSH
1098: LD_INT 0
1100: PPUSH
1101: CALL_OW 49
// ComHold ( Givi ) ;
1105: LD_EXP 47
1109: PPUSH
1110: CALL_OW 140
// end ; if Markov then
1114: LD_EXP 53
1118: IFFALSE 1156
// begin SetSide ( Markov , 5 ) ;
1120: LD_EXP 53
1124: PPUSH
1125: LD_INT 5
1127: PPUSH
1128: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1132: LD_EXP 53
1136: PPUSH
1137: LD_INT 3
1139: PPUSH
1140: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1144: LD_EXP 53
1148: PPUSH
1149: LD_INT 61
1151: PPUSH
1152: CALL_OW 52
// end ; if Mike then
1156: LD_EXP 48
1160: IFFALSE 1198
// begin SetSide ( Mike , 5 ) ;
1162: LD_EXP 48
1166: PPUSH
1167: LD_INT 5
1169: PPUSH
1170: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1174: LD_EXP 48
1178: PPUSH
1179: LD_INT 17
1181: PPUSH
1182: LD_INT 0
1184: PPUSH
1185: CALL_OW 49
// ComHold ( Mike ) ;
1189: LD_EXP 48
1193: PPUSH
1194: CALL_OW 140
// end ; if Olaf then
1198: LD_EXP 54
1202: IFFALSE 1243
// begin SetSide ( Olaf , 5 ) ;
1204: LD_EXP 54
1208: PPUSH
1209: LD_INT 5
1211: PPUSH
1212: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1216: LD_EXP 54
1220: PPUSH
1221: LD_INT 16
1223: PPUSH
1224: LD_INT 0
1226: PPUSH
1227: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1231: LD_EXP 54
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL 70318 0 2
// end ; if Kamil then
1243: LD_EXP 50
1247: IFFALSE 1273
// begin SetSide ( Kamil , 5 ) ;
1249: LD_EXP 50
1253: PPUSH
1254: LD_INT 5
1256: PPUSH
1257: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1261: LD_EXP 50
1265: PPUSH
1266: LD_INT 109
1268: PPUSH
1269: CALL_OW 52
// end ; if Kurt then
1273: LD_EXP 55
1277: IFFALSE 1303
// begin SetSide ( Kurt , 5 ) ;
1279: LD_EXP 55
1283: PPUSH
1284: LD_INT 5
1286: PPUSH
1287: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1291: LD_EXP 55
1295: PPUSH
1296: LD_INT 169
1298: PPUSH
1299: CALL_OW 52
// end ; if Kaia then
1303: LD_EXP 51
1307: IFFALSE 1333
// begin SetSide ( Kaia , 5 ) ;
1309: LD_EXP 51
1313: PPUSH
1314: LD_INT 5
1316: PPUSH
1317: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1321: LD_EXP 51
1325: PPUSH
1326: LD_INT 147
1328: PPUSH
1329: CALL_OW 52
// end ; if Sophia then
1333: LD_EXP 52
1337: IFFALSE 1378
// begin SetSide ( Sophia , 5 ) ;
1339: LD_EXP 52
1343: PPUSH
1344: LD_INT 5
1346: PPUSH
1347: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1351: LD_EXP 52
1355: PPUSH
1356: LD_INT 142
1358: PPUSH
1359: LD_INT 96
1361: PPUSH
1362: LD_INT 0
1364: PPUSH
1365: CALL_OW 48
// ComHold ( Sophia ) ;
1369: LD_EXP 52
1373: PPUSH
1374: CALL_OW 140
// end ; if Harris then
1378: LD_EXP 59
1382: IFFALSE 1420
// begin SetSide ( Harris , 4 ) ;
1384: LD_EXP 59
1388: PPUSH
1389: LD_INT 4
1391: PPUSH
1392: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1396: LD_EXP 59
1400: PPUSH
1401: LD_INT 20
1403: PPUSH
1404: LD_INT 0
1406: PPUSH
1407: CALL_OW 49
// ComHold ( i ) ;
1411: LD_VAR 0 2
1415: PPUSH
1416: CALL_OW 140
// end ; if Doug then
1420: LD_EXP 60
1424: IFFALSE 1450
// begin SetSide ( Doug , 4 ) ;
1426: LD_EXP 60
1430: PPUSH
1431: LD_INT 4
1433: PPUSH
1434: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1438: LD_EXP 60
1442: PPUSH
1443: LD_INT 106
1445: PPUSH
1446: CALL_OW 52
// end ; if Aviradze then
1450: LD_EXP 56
1454: IFFALSE 1480
// begin SetSide ( Aviradze , 5 ) ;
1456: LD_EXP 56
1460: PPUSH
1461: LD_INT 5
1463: PPUSH
1464: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1468: LD_EXP 56
1472: PPUSH
1473: LD_INT 119
1475: PPUSH
1476: CALL_OW 52
// end ; if Ibrahim then
1480: LD_EXP 49
1484: IFFALSE 1510
// begin SetSide ( Ibrahim , 5 ) ;
1486: LD_EXP 49
1490: PPUSH
1491: LD_INT 5
1493: PPUSH
1494: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1498: LD_EXP 49
1502: PPUSH
1503: LD_INT 119
1505: PPUSH
1506: CALL_OW 52
// end ; if Jerry then
1510: LD_EXP 61
1514: IFFALSE 1555
// begin SetSide ( Jerry , 4 ) ;
1516: LD_EXP 61
1520: PPUSH
1521: LD_INT 4
1523: PPUSH
1524: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1528: LD_EXP 61
1532: PPUSH
1533: LD_INT 119
1535: PPUSH
1536: LD_INT 59
1538: PPUSH
1539: LD_INT 0
1541: PPUSH
1542: CALL_OW 48
// ComHold ( Jerry ) ;
1546: LD_EXP 61
1550: PPUSH
1551: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1555: LD_EXP 65
1559: PPUSH
1560: LD_INT 119
1562: PPUSH
1563: CALL_OW 52
// for i in americanSquad do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: LD_EXP 58
1576: PUSH
1577: FOR_IN
1578: IFFALSE 1606
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1580: LD_VAR 0 2
1584: PPUSH
1585: LD_INT 21
1587: PPUSH
1588: LD_INT 0
1590: PPUSH
1591: CALL_OW 49
// ComHold ( i ) ;
1595: LD_VAR 0 2
1599: PPUSH
1600: CALL_OW 140
// end ;
1604: GO 1577
1606: POP
1607: POP
// for i in heikeSecondSquad do
1608: LD_ADDR_VAR 0 2
1612: PUSH
1613: LD_EXP 57
1617: PUSH
1618: FOR_IN
1619: IFFALSE 1659
// begin SetSide ( i , 5 ) ;
1621: LD_VAR 0 2
1625: PPUSH
1626: LD_INT 5
1628: PPUSH
1629: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1633: LD_VAR 0 2
1637: PPUSH
1638: LD_INT 22
1640: PPUSH
1641: LD_INT 0
1643: PPUSH
1644: CALL_OW 49
// ComHold ( i ) ;
1648: LD_VAR 0 2
1652: PPUSH
1653: CALL_OW 140
// end ;
1657: GO 1618
1659: POP
1660: POP
// if not hasVodka then
1661: LD_EXP 4
1665: NOT
1666: IFFALSE 1725
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1668: LD_ADDR_VAR 0 2
1672: PUSH
1673: LD_INT 2
1675: PUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 2
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PUSH
1686: LD_INT 22
1688: PUSH
1689: LD_INT 5
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PPUSH
1701: CALL_OW 69
1705: PUSH
1706: FOR_IN
1707: IFFALSE 1723
// SetLives ( i , 500 ) ;
1709: LD_VAR 0 2
1713: PPUSH
1714: LD_INT 500
1716: PPUSH
1717: CALL_OW 234
1721: GO 1706
1723: POP
1724: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1725: LD_ADDR_VAR 0 2
1729: PUSH
1730: LD_INT 22
1732: PUSH
1733: LD_INT 4
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: PPUSH
1740: CALL_OW 69
1744: PUSH
1745: FOR_IN
1746: IFFALSE 1762
// SetLives ( i , 500 ) ;
1748: LD_VAR 0 2
1752: PPUSH
1753: LD_INT 500
1755: PPUSH
1756: CALL_OW 234
1760: GO 1745
1762: POP
1763: POP
// end ;
1764: LD_VAR 0 1
1768: RET
// export function SetClassKaiaRevolver ; begin
1769: LD_INT 0
1771: PPUSH
// if not IsOk ( Kaia ) then
1772: LD_EXP 51
1776: PPUSH
1777: CALL_OW 302
1781: NOT
1782: IFFALSE 1786
// exit ;
1784: GO 1805
// SetClass ( Kaia , class_revolver ) ;
1786: LD_EXP 51
1790: PPUSH
1791: LD_INT 34
1793: PPUSH
1794: CALL_OW 336
// SetAchievement ( ACH_REVOLVER ) ;
1798: LD_STRING ACH_REVOLVER
1800: PPUSH
1801: CALL_OW 543
// end ;
1805: LD_VAR 0 1
1809: RET
// export function SpawnHeikeAsRussian ; begin
1810: LD_INT 0
1812: PPUSH
// RemoveUnit ( Heike ) ;
1813: LD_EXP 46
1817: PPUSH
1818: CALL_OW 64
// heikeTmp := Heike ;
1822: LD_ADDR_EXP 62
1826: PUSH
1827: LD_EXP 46
1831: ST_TO_ADDR
// uc_side := 2 ;
1832: LD_ADDR_OWVAR 20
1836: PUSH
1837: LD_INT 2
1839: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1840: LD_ADDR_EXP 46
1844: PUSH
1845: LD_STRING HeikeRu
1847: PPUSH
1848: CALL_OW 25
1852: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1853: LD_EXP 62
1857: PPUSH
1858: LD_EXP 46
1862: PPUSH
1863: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1867: LD_EXP 46
1871: PPUSH
1872: LD_INT 165
1874: PPUSH
1875: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1879: LD_EXP 46
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: CALL_OW 336
// heikeAsRussian := true ;
1891: LD_ADDR_EXP 27
1895: PUSH
1896: LD_INT 1
1898: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1899: LD_STRING M1-laundry-out
1901: PPUSH
1902: CALL_OW 604
// SetAchievement ( ACH_HEIKERU ) ;
1906: LD_STRING ACH_HEIKERU
1908: PPUSH
1909: CALL_OW 543
// end ;
1913: LD_VAR 0 1
1917: RET
// export function SpawnGiviAsRussian ; begin
1918: LD_INT 0
1920: PPUSH
// RemoveUnit ( Givi ) ;
1921: LD_EXP 47
1925: PPUSH
1926: CALL_OW 64
// giviTmp := Givi ;
1930: LD_ADDR_EXP 63
1934: PUSH
1935: LD_EXP 47
1939: ST_TO_ADDR
// uc_side := 2 ;
1940: LD_ADDR_OWVAR 20
1944: PUSH
1945: LD_INT 2
1947: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1948: LD_ADDR_EXP 47
1952: PUSH
1953: LD_STRING GiviRu
1955: PPUSH
1956: CALL_OW 25
1960: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1961: LD_EXP 63
1965: PPUSH
1966: LD_EXP 47
1970: PPUSH
1971: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1975: LD_EXP 47
1979: PPUSH
1980: LD_INT 165
1982: PPUSH
1983: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
1987: LD_EXP 47
1991: PPUSH
1992: LD_INT 1
1994: PPUSH
1995: CALL_OW 336
// giviAsRussian := true ;
1999: LD_ADDR_EXP 28
2003: PUSH
2004: LD_INT 1
2006: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
2007: LD_STRING M1-laundry-out
2009: PPUSH
2010: CALL_OW 604
// SetAchievement ( ACH_GIVIRU ) ;
2014: LD_STRING ACH_GIVIRU
2016: PPUSH
2017: CALL_OW 543
// end ; end_of_file
2021: LD_VAR 0 1
2025: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , un , tmp ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
2031: PPUSH
2032: PPUSH
// uc_side := 3 ;
2033: LD_ADDR_OWVAR 20
2037: PUSH
2038: LD_INT 3
2040: ST_TO_ADDR
// uc_nation := 3 ;
2041: LD_ADDR_OWVAR 21
2045: PUSH
2046: LD_INT 3
2048: ST_TO_ADDR
// SetBName ( ruMainBase , yagoda ) ;
2049: LD_INT 2
2051: PPUSH
2052: LD_STRING yagoda
2054: PPUSH
2055: CALL_OW 500
// SetBName ( ruKitchen , kitchen ) ;
2059: LD_INT 192
2061: PPUSH
2062: LD_STRING kitchen
2064: PPUSH
2065: CALL_OW 500
// SetBName ( laundry , laundry ) ;
2069: LD_INT 165
2071: PPUSH
2072: LD_STRING laundry
2074: PPUSH
2075: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
2079: LD_INT 54
2081: PPUSH
2082: LD_STRING adminSection
2084: PPUSH
2085: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_INT 21
2096: PUSH
2097: LD_INT 3
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PPUSH
2104: CALL_OW 69
2108: PUSH
2109: FOR_IN
2110: IFFALSE 2126
// SetBLevel ( i , 7 ) ;
2112: LD_VAR 0 2
2116: PPUSH
2117: LD_INT 7
2119: PPUSH
2120: CALL_OW 241
2124: GO 2109
2126: POP
2127: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2128: LD_ADDR_VAR 0 2
2132: PUSH
2133: LD_INT 22
2135: PUSH
2136: LD_INT 3
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PUSH
2143: LD_INT 2
2145: PUSH
2146: LD_INT 30
2148: PUSH
2149: LD_INT 0
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: PUSH
2156: LD_INT 30
2158: PUSH
2159: LD_INT 1
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: LIST
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PPUSH
2175: CALL_OW 69
2179: PUSH
2180: FOR_IN
2181: IFFALSE 2245
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2183: LD_VAR 0 2
2187: PPUSH
2188: CALL_OW 274
2192: PPUSH
2193: LD_INT 1
2195: PPUSH
2196: LD_INT 1000
2198: PPUSH
2199: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2203: LD_VAR 0 2
2207: PPUSH
2208: CALL_OW 274
2212: PPUSH
2213: LD_INT 2
2215: PPUSH
2216: LD_INT 1000
2218: PPUSH
2219: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2223: LD_VAR 0 2
2227: PPUSH
2228: CALL_OW 274
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 100
2238: PPUSH
2239: CALL_OW 277
// end ;
2243: GO 2180
2245: POP
2246: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2247: LD_ADDR_VAR 0 2
2251: PUSH
2252: LD_INT 22
2254: PUSH
2255: LD_INT 3
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PUSH
2262: LD_INT 30
2264: PUSH
2265: LD_INT 32
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PPUSH
2276: CALL_OW 69
2280: PUSH
2281: FOR_IN
2282: IFFALSE 2316
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2284: LD_INT 0
2286: PPUSH
2287: LD_INT 5
2289: PUSH
2290: LD_OWVAR 67
2294: PLUS
2295: PPUSH
2296: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2300: CALL_OW 44
2304: PPUSH
2305: LD_VAR 0 2
2309: PPUSH
2310: CALL_OW 52
// end ;
2314: GO 2281
2316: POP
2317: POP
// for i := 1 to 2 do
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: DOUBLE
2324: LD_INT 1
2326: DEC
2327: ST_TO_ADDR
2328: LD_INT 2
2330: PUSH
2331: FOR_TO
2332: IFFALSE 2384
// begin PrepareMechanic ( false , 8 ) ;
2334: LD_INT 0
2336: PPUSH
2337: LD_INT 8
2339: PPUSH
2340: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2344: LD_ADDR_EXP 67
2348: PUSH
2349: LD_EXP 67
2353: PPUSH
2354: CALL_OW 44
2358: PPUSH
2359: CALL 67162 0 2
2363: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2364: LD_EXP 67
2368: PUSH
2369: LD_EXP 67
2373: ARRAY
2374: PPUSH
2375: LD_INT 61
2377: PPUSH
2378: CALL_OW 52
// end ;
2382: GO 2331
2384: POP
2385: POP
// PrepareMechanic ( sex_male , 8 ) ;
2386: LD_INT 1
2388: PPUSH
2389: LD_INT 8
2391: PPUSH
2392: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2396: LD_ADDR_EXP 68
2400: PUSH
2401: LD_EXP 68
2405: PPUSH
2406: CALL_OW 44
2410: PPUSH
2411: CALL 67162 0 2
2415: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2416: LD_EXP 68
2420: PUSH
2421: LD_EXP 68
2425: ARRAY
2426: PPUSH
2427: LD_INT 196
2429: PPUSH
2430: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2434: LD_INT 1
2436: PPUSH
2437: LD_INT 8
2439: PPUSH
2440: CALL_OW 383
// hc_name := Stiepan Simonov ;
2444: LD_ADDR_OWVAR 26
2448: PUSH
2449: LD_STRING Stiepan Simonov
2451: ST_TO_ADDR
// Stiopa := CreateHuman ;
2452: LD_ADDR_EXP 69
2456: PUSH
2457: CALL_OW 44
2461: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2462: LD_INT 2
2464: PPUSH
2465: LD_INT 8
2467: PPUSH
2468: CALL_OW 383
// hc_name := Laura Dragunov ;
2472: LD_ADDR_OWVAR 26
2476: PUSH
2477: LD_STRING Laura Dragunov
2479: ST_TO_ADDR
// Laura := CreateHuman ;
2480: LD_ADDR_EXP 70
2484: PUSH
2485: CALL_OW 44
2489: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2490: LD_EXP 70
2494: PPUSH
2495: LD_INT 196
2497: PPUSH
2498: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2502: LD_INT 1
2504: PPUSH
2505: LD_INT 8
2507: PPUSH
2508: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2512: LD_ADDR_EXP 67
2516: PUSH
2517: LD_EXP 67
2521: PPUSH
2522: LD_INT 1
2524: PPUSH
2525: CALL_OW 44
2529: PPUSH
2530: CALL_OW 2
2534: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2535: LD_EXP 67
2539: PUSH
2540: LD_INT 1
2542: ARRAY
2543: PPUSH
2544: LD_INT 61
2546: PPUSH
2547: CALL_OW 52
// hc_sex := sex_male ;
2551: LD_ADDR_OWVAR 27
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// hc_name := Muchin ;
2559: LD_ADDR_OWVAR 26
2563: PUSH
2564: LD_STRING Muchin
2566: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2567: LD_ADDR_OWVAR 33
2571: PUSH
2572: LD_STRING SecondCharsGal
2574: ST_TO_ADDR
// hc_face_number := 87 ;
2575: LD_ADDR_OWVAR 34
2579: PUSH
2580: LD_INT 87
2582: ST_TO_ADDR
// hc_skills := [ 8 , 2 , 2 , 6 ] ;
2583: LD_ADDR_OWVAR 31
2587: PUSH
2588: LD_INT 8
2590: PUSH
2591: LD_INT 2
2593: PUSH
2594: LD_INT 2
2596: PUSH
2597: LD_INT 6
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2606: LD_ADDR_OWVAR 29
2610: PUSH
2611: LD_INT 13
2613: PUSH
2614: LD_INT 13
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: ST_TO_ADDR
// hc_class := class_soldier ;
2621: LD_ADDR_OWVAR 28
2625: PUSH
2626: LD_INT 1
2628: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2629: LD_ADDR_EXP 66
2633: PUSH
2634: CALL_OW 44
2638: ST_TO_ADDR
// InitHC_All ( ) ;
2639: CALL_OW 584
// if Difficulty > 1 then
2643: LD_OWVAR 67
2647: PUSH
2648: LD_INT 1
2650: GREATER
2651: IFFALSE 2771
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
2653: LD_ADDR_VAR 0 2
2657: PUSH
2658: DOUBLE
2659: LD_INT 1
2661: DEC
2662: ST_TO_ADDR
2663: LD_INT 3
2665: PUSH
2666: LD_INT 4
2668: PUSH
2669: LD_INT 5
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: LIST
2676: PUSH
2677: LD_OWVAR 67
2681: PUSH
2682: LD_INT 1
2684: PLUS
2685: ARRAY
2686: PUSH
2687: FOR_TO
2688: IFFALSE 2769
// begin PrepareSoldier ( false , [ 5 , 6 , 7 ] [ Difficulty + 1 ] ) ;
2690: LD_INT 0
2692: PPUSH
2693: LD_INT 5
2695: PUSH
2696: LD_INT 6
2698: PUSH
2699: LD_INT 7
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: PUSH
2707: LD_OWVAR 67
2711: PUSH
2712: LD_INT 1
2714: PLUS
2715: ARRAY
2716: PPUSH
2717: CALL_OW 381
// un := CreateHuman ;
2721: LD_ADDR_VAR 0 4
2725: PUSH
2726: CALL_OW 44
2730: ST_TO_ADDR
// PlaceUnitArea ( un , [ westGroup1Area , westGroup2Area ] [ i mod 2 + 1 ] , false ) ;
2731: LD_VAR 0 4
2735: PPUSH
2736: LD_INT 62
2738: PUSH
2739: LD_INT 63
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: LD_VAR 0 2
2750: PUSH
2751: LD_INT 2
2753: MOD
2754: PUSH
2755: LD_INT 1
2757: PLUS
2758: ARRAY
2759: PPUSH
2760: LD_INT 0
2762: PPUSH
2763: CALL_OW 49
// end ;
2767: GO 2687
2769: POP
2770: POP
// end ; uc_side := 6 ;
2771: LD_ADDR_OWVAR 20
2775: PUSH
2776: LD_INT 6
2778: ST_TO_ADDR
// uc_nation := 3 ;
2779: LD_ADDR_OWVAR 21
2783: PUSH
2784: LD_INT 3
2786: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2787: LD_ADDR_VAR 0 5
2791: PUSH
2792: LD_INT 14
2794: PUSH
2795: LD_INT 15
2797: PUSH
2798: LD_INT 48
2800: PUSH
2801: LD_INT 24
2803: PUSH
2804: LD_INT 149
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: ST_TO_ADDR
// for i in tmp do
2814: LD_ADDR_VAR 0 2
2818: PUSH
2819: LD_VAR 0 5
2823: PUSH
2824: FOR_IN
2825: IFFALSE 2873
// begin for j := 1 to 2 do
2827: LD_ADDR_VAR 0 3
2831: PUSH
2832: DOUBLE
2833: LD_INT 1
2835: DEC
2836: ST_TO_ADDR
2837: LD_INT 2
2839: PUSH
2840: FOR_TO
2841: IFFALSE 2869
// begin PrepareSoldier ( false , 7 ) ;
2843: LD_INT 0
2845: PPUSH
2846: LD_INT 7
2848: PPUSH
2849: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2853: CALL_OW 44
2857: PPUSH
2858: LD_VAR 0 2
2862: PPUSH
2863: CALL_OW 52
// end ;
2867: GO 2840
2869: POP
2870: POP
// end ;
2871: GO 2824
2873: POP
2874: POP
// end ;
2875: LD_VAR 0 1
2879: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2880: LD_INT 0
2882: PPUSH
2883: PPUSH
2884: PPUSH
2885: PPUSH
// uc_side := 3 ;
2886: LD_ADDR_OWVAR 20
2890: PUSH
2891: LD_INT 3
2893: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2894: LD_ADDR_OWVAR 21
2898: PUSH
2899: LD_INT 1
2901: PPUSH
2902: LD_INT 3
2904: PPUSH
2905: CALL_OW 12
2909: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2910: LD_ADDR_VAR 0 4
2914: PUSH
2915: LD_INT 5
2917: PPUSH
2918: LD_INT 0
2920: PPUSH
2921: CALL_OW 517
2925: ST_TO_ADDR
// for i := 1 to 3 do
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: DOUBLE
2932: LD_INT 1
2934: DEC
2935: ST_TO_ADDR
2936: LD_INT 3
2938: PUSH
2939: FOR_TO
2940: IFFALSE 3009
// begin PrepareHuman ( false , 33 , 0 ) ;
2942: LD_INT 0
2944: PPUSH
2945: LD_INT 33
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 380
// un := CreateHuman ;
2955: LD_ADDR_VAR 0 3
2959: PUSH
2960: CALL_OW 44
2964: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2965: LD_VAR 0 3
2969: PPUSH
2970: LD_VAR 0 4
2974: PUSH
2975: LD_INT 1
2977: ARRAY
2978: PUSH
2979: LD_VAR 0 2
2983: ARRAY
2984: PPUSH
2985: LD_VAR 0 4
2989: PUSH
2990: LD_INT 2
2992: ARRAY
2993: PUSH
2994: LD_VAR 0 2
2998: ARRAY
2999: PPUSH
3000: LD_INT 1
3002: PPUSH
3003: CALL_OW 601
// end ;
3007: GO 2939
3009: POP
3010: POP
// end ;
3011: LD_VAR 0 1
3015: RET
// export function PrepareFirstScene ; var i , un ; begin
3016: LD_INT 0
3018: PPUSH
3019: PPUSH
3020: PPUSH
// uc_side := 4 ;
3021: LD_ADDR_OWVAR 20
3025: PUSH
3026: LD_INT 4
3028: ST_TO_ADDR
// uc_nation := 1 ;
3029: LD_ADDR_OWVAR 21
3033: PUSH
3034: LD_INT 1
3036: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
3037: LD_INT 0
3039: PPUSH
3040: LD_INT 33
3042: PPUSH
3043: LD_INT 0
3045: PPUSH
3046: CALL_OW 380
// for i := 1 to 2 do
3050: LD_ADDR_VAR 0 2
3054: PUSH
3055: DOUBLE
3056: LD_INT 1
3058: DEC
3059: ST_TO_ADDR
3060: LD_INT 2
3062: PUSH
3063: FOR_TO
3064: IFFALSE 3129
// begin un := CreateHuman ;
3066: LD_ADDR_VAR 0 3
3070: PUSH
3071: CALL_OW 44
3075: ST_TO_ADDR
// SetDir ( un , 1 ) ;
3076: LD_VAR 0 3
3080: PPUSH
3081: LD_INT 1
3083: PPUSH
3084: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
3088: LD_VAR 0 3
3092: PPUSH
3093: LD_INT 6
3095: PPUSH
3096: LD_INT 0
3098: PPUSH
3099: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
3103: LD_VAR 0 3
3107: PPUSH
3108: LD_INT 1
3110: PPUSH
3111: CALL 70318 0 2
// SetLives ( un , 300 ) ;
3115: LD_VAR 0 3
3119: PPUSH
3120: LD_INT 300
3122: PPUSH
3123: CALL_OW 234
// end ;
3127: GO 3063
3129: POP
3130: POP
// uc_side := 3 ;
3131: LD_ADDR_OWVAR 20
3135: PUSH
3136: LD_INT 3
3138: ST_TO_ADDR
// uc_nation := 3 ;
3139: LD_ADDR_OWVAR 21
3143: PUSH
3144: LD_INT 3
3146: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
3147: LD_INT 1
3149: PPUSH
3150: LD_INT 5
3152: PPUSH
3153: CALL_OW 381
// for i := 1 to 3 do
3157: LD_ADDR_VAR 0 2
3161: PUSH
3162: DOUBLE
3163: LD_INT 1
3165: DEC
3166: ST_TO_ADDR
3167: LD_INT 3
3169: PUSH
3170: FOR_TO
3171: IFFALSE 3244
// begin un := CreateHuman ;
3173: LD_ADDR_VAR 0 3
3177: PUSH
3178: CALL_OW 44
3182: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
3183: LD_ADDR_EXP 64
3187: PUSH
3188: LD_EXP 64
3192: PPUSH
3193: LD_VAR 0 3
3197: PPUSH
3198: CALL 67162 0 2
3202: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3203: LD_VAR 0 3
3207: PPUSH
3208: LD_INT 4
3210: PPUSH
3211: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
3215: LD_VAR 0 3
3219: PPUSH
3220: LD_INT 7
3222: PPUSH
3223: LD_INT 0
3225: PPUSH
3226: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
3230: LD_VAR 0 3
3234: PPUSH
3235: LD_INT 4
3237: PPUSH
3238: CALL 70318 0 2
// end ;
3242: GO 3170
3244: POP
3245: POP
// ruCommisar := CreateHuman ;
3246: LD_ADDR_EXP 65
3250: PUSH
3251: CALL_OW 44
3255: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
3256: LD_EXP 65
3260: PPUSH
3261: LD_INT 124
3263: PPUSH
3264: LD_INT 37
3266: PPUSH
3267: LD_INT 0
3269: PPUSH
3270: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
3274: LD_EXP 65
3278: PPUSH
3279: LD_INT 3
3281: PPUSH
3282: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
3286: LD_EXP 65
3290: PPUSH
3291: LD_INT 3
3293: PPUSH
3294: CALL 70318 0 2
// end ;
3298: LD_VAR 0 1
3302: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3303: LD_INT 0
3305: PPUSH
3306: PPUSH
3307: PPUSH
3308: PPUSH
// uc_side := 6 ;
3309: LD_ADDR_OWVAR 20
3313: PUSH
3314: LD_INT 6
3316: ST_TO_ADDR
// uc_nation := 3 ;
3317: LD_ADDR_OWVAR 21
3321: PUSH
3322: LD_INT 3
3324: ST_TO_ADDR
// ruPatrol := [ ] ;
3325: LD_ADDR_EXP 71
3329: PUSH
3330: EMPTY
3331: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3332: LD_ADDR_VAR 0 4
3336: PUSH
3337: LD_INT 26
3339: PUSH
3340: LD_INT 30
3342: PUSH
3343: LD_INT 39
3345: PUSH
3346: LD_INT 43
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: ST_TO_ADDR
// for i := 1 to spawn do
3355: LD_ADDR_VAR 0 2
3359: PUSH
3360: DOUBLE
3361: LD_INT 1
3363: DEC
3364: ST_TO_ADDR
3365: LD_VAR 0 4
3369: PUSH
3370: FOR_TO
3371: IFFALSE 3482
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3373: LD_INT 0
3375: PPUSH
3376: LD_INT 4
3378: PUSH
3379: LD_INT 5
3381: PUSH
3382: LD_INT 6
3384: PUSH
3385: LD_INT 7
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: PUSH
3394: LD_OWVAR 67
3398: ARRAY
3399: PPUSH
3400: CALL_OW 381
// un := CreateHuman ;
3404: LD_ADDR_VAR 0 3
3408: PUSH
3409: CALL_OW 44
3413: ST_TO_ADDR
// SetTag ( un , i ) ;
3414: LD_VAR 0 3
3418: PPUSH
3419: LD_VAR 0 2
3423: PPUSH
3424: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3428: LD_ADDR_EXP 71
3432: PUSH
3433: LD_EXP 71
3437: PPUSH
3438: LD_VAR 0 3
3442: PPUSH
3443: CALL 67162 0 2
3447: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3448: LD_VAR 0 3
3452: PPUSH
3453: LD_VAR 0 4
3457: PUSH
3458: LD_VAR 0 2
3462: ARRAY
3463: PPUSH
3464: LD_INT 0
3466: PPUSH
3467: CALL_OW 49
// ComHold ( un ) ;
3471: LD_VAR 0 3
3475: PPUSH
3476: CALL_OW 140
// end ;
3480: GO 3370
3482: POP
3483: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3484: LD_ADDR_VAR 0 4
3488: PUSH
3489: LD_INT 48
3491: PUSH
3492: LD_INT 49
3494: PUSH
3495: LD_INT 50
3497: PUSH
3498: LD_INT 51
3500: PUSH
3501: LD_INT 52
3503: PUSH
3504: LD_INT 53
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: ST_TO_ADDR
// for i := 1 to spawn do
3515: LD_ADDR_VAR 0 2
3519: PUSH
3520: DOUBLE
3521: LD_INT 1
3523: DEC
3524: ST_TO_ADDR
3525: LD_VAR 0 4
3529: PUSH
3530: FOR_TO
3531: IFFALSE 3640
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3533: LD_INT 0
3535: PPUSH
3536: LD_INT 4
3538: PUSH
3539: LD_INT 5
3541: PUSH
3542: LD_INT 6
3544: PUSH
3545: LD_INT 7
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: PUSH
3554: LD_OWVAR 67
3558: ARRAY
3559: PPUSH
3560: CALL_OW 381
// un := CreateHuman ;
3564: LD_ADDR_VAR 0 3
3568: PUSH
3569: CALL_OW 44
3573: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3574: LD_VAR 0 3
3578: PPUSH
3579: LD_INT 0
3581: PPUSH
3582: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3586: LD_ADDR_EXP 71
3590: PUSH
3591: LD_EXP 71
3595: PPUSH
3596: LD_VAR 0 3
3600: PPUSH
3601: CALL 67162 0 2
3605: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3606: LD_VAR 0 3
3610: PPUSH
3611: LD_VAR 0 4
3615: PUSH
3616: LD_VAR 0 2
3620: ARRAY
3621: PPUSH
3622: LD_INT 0
3624: PPUSH
3625: CALL_OW 49
// ComHold ( un ) ;
3629: LD_VAR 0 3
3633: PPUSH
3634: CALL_OW 140
// end ;
3638: GO 3530
3640: POP
3641: POP
// end ;
3642: LD_VAR 0 1
3646: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3647: LD_INT 0
3649: PPUSH
3650: PPUSH
3651: PPUSH
3652: PPUSH
// uc_side := 6 ;
3653: LD_ADDR_OWVAR 20
3657: PUSH
3658: LD_INT 6
3660: ST_TO_ADDR
// uc_nation := nation_russian ;
3661: LD_ADDR_OWVAR 21
3665: PUSH
3666: LD_INT 3
3668: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3669: LD_ADDR_VAR 0 4
3673: PUSH
3674: LD_INT 54
3676: PUSH
3677: LD_INT 55
3679: PUSH
3680: LD_INT 56
3682: PUSH
3683: LD_INT 57
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: ST_TO_ADDR
// for i := 1 to spawn do
3692: LD_ADDR_VAR 0 2
3696: PUSH
3697: DOUBLE
3698: LD_INT 1
3700: DEC
3701: ST_TO_ADDR
3702: LD_VAR 0 4
3706: PUSH
3707: FOR_TO
3708: IFFALSE 3817
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3710: LD_INT 0
3712: PPUSH
3713: LD_INT 4
3715: PUSH
3716: LD_INT 5
3718: PUSH
3719: LD_INT 6
3721: PUSH
3722: LD_INT 7
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: PUSH
3731: LD_OWVAR 67
3735: ARRAY
3736: PPUSH
3737: CALL_OW 381
// un := CreateHuman ;
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: CALL_OW 44
3750: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3751: LD_VAR 0 3
3755: PPUSH
3756: LD_INT 0
3758: PPUSH
3759: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3763: LD_ADDR_EXP 71
3767: PUSH
3768: LD_EXP 71
3772: PPUSH
3773: LD_VAR 0 3
3777: PPUSH
3778: CALL 67162 0 2
3782: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3783: LD_VAR 0 3
3787: PPUSH
3788: LD_VAR 0 4
3792: PUSH
3793: LD_VAR 0 2
3797: ARRAY
3798: PPUSH
3799: LD_INT 0
3801: PPUSH
3802: CALL_OW 49
// ComHold ( un ) ;
3806: LD_VAR 0 3
3810: PPUSH
3811: CALL_OW 140
// end ;
3815: GO 3707
3817: POP
3818: POP
// end ; end_of_file
3819: LD_VAR 0 1
3823: RET
// export function Action ; var speaker , i , tmp ; begin
3824: LD_INT 0
3826: PPUSH
3827: PPUSH
3828: PPUSH
3829: PPUSH
// Video ( true ) ;
3830: LD_INT 1
3832: PPUSH
3833: CALL 67134 0 1
// hasNormalScene := Kaia or Givi ;
3837: LD_ADDR_EXP 5
3841: PUSH
3842: LD_EXP 51
3846: PUSH
3847: LD_EXP 47
3851: OR
3852: ST_TO_ADDR
// if hasNormalScene then
3853: LD_EXP 5
3857: IFFALSE 4098
// begin for i in americanSquad do
3859: LD_ADDR_VAR 0 3
3863: PUSH
3864: LD_EXP 58
3868: PUSH
3869: FOR_IN
3870: IFFALSE 3916
// begin SetClass ( i , class_prison ) ;
3872: LD_VAR 0 3
3876: PPUSH
3877: LD_INT 33
3879: PPUSH
3880: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3884: LD_VAR 0 3
3888: PPUSH
3889: LD_INT 78
3891: PPUSH
3892: LD_INT 16
3894: PPUSH
3895: LD_INT 5
3897: PPUSH
3898: LD_INT 0
3900: PPUSH
3901: CALL_OW 50
// ComHold ( i ) ;
3905: LD_VAR 0 3
3909: PPUSH
3910: CALL_OW 140
// end ;
3914: GO 3869
3916: POP
3917: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3918: LD_ADDR_VAR 0 4
3922: PUSH
3923: LD_EXP 48
3927: PUSH
3928: LD_EXP 49
3932: PUSH
3933: LD_EXP 50
3937: PUSH
3938: LD_EXP 51
3942: PUSH
3943: LD_EXP 52
3947: PUSH
3948: LD_EXP 53
3952: PUSH
3953: LD_EXP 54
3957: PUSH
3958: LD_EXP 55
3962: PUSH
3963: LD_EXP 47
3967: PUSH
3968: LD_EXP 56
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: PUSH
3985: LD_EXP 57
3989: UNION
3990: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
3991: LD_EXP 46
3995: PPUSH
3996: LD_INT 33
3998: PPUSH
3999: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
4003: LD_EXP 46
4007: PPUSH
4008: LD_INT 117
4010: PPUSH
4011: LD_INT 24
4013: PPUSH
4014: LD_INT 3
4016: PPUSH
4017: LD_INT 0
4019: PPUSH
4020: CALL 69302 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
4024: LD_EXP 46
4028: PPUSH
4029: LD_INT 123
4031: PPUSH
4032: LD_INT 39
4034: PPUSH
4035: CALL_OW 118
// for i in tmp do
4039: LD_ADDR_VAR 0 3
4043: PUSH
4044: LD_VAR 0 4
4048: PUSH
4049: FOR_IN
4050: IFFALSE 4096
// begin SetClass ( i , class_prison ) ;
4052: LD_VAR 0 3
4056: PPUSH
4057: LD_INT 33
4059: PPUSH
4060: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
4064: LD_VAR 0 3
4068: PPUSH
4069: LD_INT 3
4071: PPUSH
4072: LD_INT 0
4074: PPUSH
4075: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
4079: LD_VAR 0 3
4083: PPUSH
4084: LD_INT 113
4086: PPUSH
4087: LD_INT 16
4089: PPUSH
4090: CALL_OW 118
// end ;
4094: GO 4049
4096: POP
4097: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
4098: LD_INT 124
4100: PPUSH
4101: LD_INT 39
4103: PPUSH
4104: CALL_OW 86
// PrepareDeadBodies ;
4108: CALL 2880 0 0
// PrepareFirstScene ;
4112: CALL 3016 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4116: LD_INT 152
4118: PPUSH
4119: LD_INT 65
4121: PPUSH
4122: LD_INT 2
4124: PPUSH
4125: LD_INT 70
4127: NEG
4128: PPUSH
4129: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4133: LD_INT 152
4135: PPUSH
4136: LD_INT 65
4138: PPUSH
4139: LD_INT 2
4141: PPUSH
4142: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
4146: LD_INT 122
4148: PPUSH
4149: LD_INT 40
4151: PPUSH
4152: LD_INT 2
4154: PPUSH
4155: LD_INT 8
4157: NEG
4158: PPUSH
4159: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
4163: LD_INT 124
4165: PPUSH
4166: LD_INT 37
4168: PPUSH
4169: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
4173: LD_EXP 65
4177: PPUSH
4178: LD_STRING DRum-Execution-1
4180: PPUSH
4181: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
4185: LD_EXP 65
4189: PPUSH
4190: LD_STRING DRum-Execution-2
4192: PPUSH
4193: CALL_OW 88
// wait ( 0 0$01 ) ;
4197: LD_INT 35
4199: PPUSH
4200: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
4204: LD_EXP 65
4208: PPUSH
4209: LD_STRING DRum-Execution-3
4211: PPUSH
4212: CALL_OW 88
// wait ( 0 0$1 ) ;
4216: LD_INT 35
4218: PPUSH
4219: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
4223: LD_EXP 65
4227: PPUSH
4228: LD_STRING DRum-Execution-4
4230: PPUSH
4231: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
4235: LD_EXP 64
4239: PUSH
4240: LD_INT 1
4242: ARRAY
4243: PPUSH
4244: LD_INT 122
4246: PPUSH
4247: LD_INT 39
4249: PPUSH
4250: CALL_OW 428
4254: PPUSH
4255: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
4259: LD_EXP 64
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 123
4270: PPUSH
4271: LD_INT 41
4273: PPUSH
4274: CALL_OW 428
4278: PPUSH
4279: CALL_OW 115
// AddComHold ( russianKillers ) ;
4283: LD_EXP 64
4287: PPUSH
4288: CALL_OW 200
// wait ( 0 0$1 ) ;
4292: LD_INT 35
4294: PPUSH
4295: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4299: LD_INT 122
4301: PPUSH
4302: LD_INT 40
4304: PPUSH
4305: LD_INT 2
4307: PPUSH
4308: CALL_OW 331
// for i in russianKillers union ruCommisar do
4312: LD_ADDR_VAR 0 3
4316: PUSH
4317: LD_EXP 64
4321: PUSH
4322: LD_EXP 65
4326: UNION
4327: PUSH
4328: FOR_IN
4329: IFFALSE 4342
// RemoveUnit ( i ) ;
4331: LD_VAR 0 3
4335: PPUSH
4336: CALL_OW 64
4340: GO 4328
4342: POP
4343: POP
// if hasNormalScene then
4344: LD_EXP 5
4348: IFFALSE 4356
// ActionNormal else
4350: CALL 4365 0 0
4354: GO 4360
// ActionAdditional ;
4356: CALL 6183 0 0
// end ;
4360: LD_VAR 0 1
4364: RET
// function ActionNormal ; var i , tmp ; begin
4365: LD_INT 0
4367: PPUSH
4368: PPUSH
4369: PPUSH
// CenterNowOnUnits ( Heike ) ;
4370: LD_EXP 46
4374: PPUSH
4375: CALL_OW 87
// wait ( 0 0$1 ) ;
4379: LD_INT 35
4381: PPUSH
4382: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4386: LD_EXP 46
4390: PPUSH
4391: LD_INT 115
4393: PPUSH
4394: LD_INT 19
4396: PPUSH
4397: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4401: LD_EXP 46
4405: PPUSH
4406: LD_INT 113
4408: PPUSH
4409: LD_INT 16
4411: PPUSH
4412: CALL_OW 178
// wait ( 0 0$2 ) ;
4416: LD_INT 70
4418: PPUSH
4419: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4423: LD_EXP 46
4427: PPUSH
4428: LD_STRING DH-Conspiracy-1
4430: PPUSH
4431: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4435: LD_EXP 51
4439: PPUSH
4440: LD_STRING DK-Conspiracy-2
4442: PPUSH
4443: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4447: LD_EXP 47
4451: PPUSH
4452: LD_STRING DG-Conspiracy-3
4454: PPUSH
4455: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4459: LD_EXP 47
4463: PPUSH
4464: LD_STRING DG-Conspiracy-4
4466: PPUSH
4467: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4471: LD_EXP 46
4475: PPUSH
4476: LD_STRING DH-Conspiracy-5
4478: PPUSH
4479: CALL_OW 88
// if IsOk ( Kamil ) then
4483: LD_EXP 50
4487: PPUSH
4488: CALL_OW 302
4492: IFFALSE 4550
// begin hasVodka := true ;
4494: LD_ADDR_EXP 4
4498: PUSH
4499: LD_INT 1
4501: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4502: LD_EXP 50
4506: PPUSH
4507: LD_STRING DKam-Conspiracy-6
4509: PPUSH
4510: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4514: LD_EXP 50
4518: PPUSH
4519: LD_STRING DKam-Conspiracy-7
4521: PPUSH
4522: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4526: LD_EXP 50
4530: PPUSH
4531: LD_STRING DKam-Conspiracy-8
4533: PPUSH
4534: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4538: LD_EXP 50
4542: PPUSH
4543: LD_STRING DKam-Conspiracy-9
4545: PPUSH
4546: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4550: LD_EXP 52
4554: PPUSH
4555: CALL_OW 302
4559: IFFALSE 4740
// begin americanContact := true ;
4561: LD_ADDR_EXP 10
4565: PUSH
4566: LD_INT 1
4568: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4569: LD_STRING M1-american
4571: PPUSH
4572: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4576: LD_EXP 52
4580: PPUSH
4581: LD_STRING DS-Conspiracy-10
4583: PPUSH
4584: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4588: LD_EXP 53
4592: PPUSH
4593: LD_STRING DM-Conspiracy-11
4595: PPUSH
4596: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4600: LD_EXP 52
4604: PPUSH
4605: LD_STRING DS-Conspiracy-12
4607: PPUSH
4608: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4612: LD_INT 84
4614: PPUSH
4615: LD_INT 19
4617: PPUSH
4618: LD_INT 105
4620: PPUSH
4621: CALL 20175 0 3
// if johnnySaved then
4625: LD_EXP 3
4629: IFFALSE 4669
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4631: LD_EXP 52
4635: PPUSH
4636: LD_STRING DS-Conspiracy-13
4638: PPUSH
4639: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4643: LD_EXP 46
4647: PPUSH
4648: LD_STRING DH-Conspiracy-14
4650: PPUSH
4651: CALL_OW 88
// Say ( Heike , DH-Conspiracy-15 ) ;
4655: LD_EXP 46
4659: PPUSH
4660: LD_STRING DH-Conspiracy-15
4662: PPUSH
4663: CALL_OW 88
// end else
4667: GO 4705
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4669: LD_EXP 52
4673: PPUSH
4674: LD_STRING DS-Conspiracy-a-13
4676: PPUSH
4677: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4681: LD_EXP 46
4685: PPUSH
4686: LD_STRING DH-Conspiracy-a-14
4688: PPUSH
4689: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-15 ) ;
4693: LD_EXP 46
4697: PPUSH
4698: LD_STRING DH-Conspiracy-a-15
4700: PPUSH
4701: CALL_OW 88
// end ; if IsOk ( Givi ) then
4705: LD_EXP 47
4709: PPUSH
4710: CALL_OW 302
4714: IFFALSE 4740
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4716: LD_EXP 47
4720: PPUSH
4721: LD_STRING DG-Conspiracy-a-16
4723: PPUSH
4724: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4728: LD_EXP 46
4732: PPUSH
4733: LD_STRING DH-Conspiracy-a-17
4735: PPUSH
4736: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4740: LD_EXP 46
4744: PPUSH
4745: LD_STRING DH-Conspiracy-16
4747: PPUSH
4748: CALL_OW 88
// if IsOk ( Givi ) then
4752: LD_EXP 47
4756: PPUSH
4757: CALL_OW 302
4761: IFFALSE 5033
// begin hasStimDrugs := true ;
4763: LD_ADDR_EXP 9
4767: PUSH
4768: LD_INT 1
4770: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4771: LD_STRING M1-drugs
4773: PPUSH
4774: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4778: LD_EXP 47
4782: PPUSH
4783: LD_STRING DG-Conspiracy-17
4785: PPUSH
4786: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4790: LD_INT 162
4792: PPUSH
4793: LD_INT 2
4795: PPUSH
4796: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4800: LD_INT 194
4802: PPUSH
4803: LD_INT 98
4805: PPUSH
4806: LD_INT 105
4808: PPUSH
4809: CALL 20175 0 3
// SetSide ( drugsLab , 3 ) ;
4813: LD_INT 162
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4823: LD_EXP 47
4827: PPUSH
4828: LD_STRING DG-Conspiracy-18
4830: PPUSH
4831: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4835: LD_EXP 47
4839: PPUSH
4840: LD_STRING DG-Conspiracy-19
4842: PPUSH
4843: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4847: LD_EXP 47
4851: PPUSH
4852: LD_STRING DG-Conspiracy-20
4854: PPUSH
4855: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4859: LD_EXP 46
4863: PPUSH
4864: LD_STRING DH-Conspiracy-21
4866: PPUSH
4867: CALL_OW 88
// if IsOk ( Kaia ) then
4871: LD_EXP 51
4875: PPUSH
4876: CALL_OW 302
4880: IFFALSE 4954
// begin hasExplosions := true ;
4882: LD_ADDR_EXP 6
4886: PUSH
4887: LD_INT 1
4889: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4890: LD_STRING M1-explosive
4892: PPUSH
4893: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4897: LD_EXP 51
4901: PPUSH
4902: LD_STRING DK-Conspiracy-22
4904: PPUSH
4905: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4909: LD_INT 73
4911: PPUSH
4912: LD_INT 2
4914: PPUSH
4915: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4919: LD_INT 170
4921: PPUSH
4922: LD_INT 104
4924: PPUSH
4925: LD_INT 105
4927: PPUSH
4928: CALL 20175 0 3
// SetSide ( barExplosion , 3 ) ;
4932: LD_INT 73
4934: PPUSH
4935: LD_INT 3
4937: PPUSH
4938: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4942: LD_EXP 51
4946: PPUSH
4947: LD_STRING DK-Conspiracy-23
4949: PPUSH
4950: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4954: LD_EXP 54
4958: PPUSH
4959: CALL_OW 302
4963: IFFALSE 5033
// begin hasExplosionsInFactory := true ;
4965: LD_ADDR_EXP 7
4969: PUSH
4970: LD_INT 1
4972: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4973: LD_EXP 54
4977: PPUSH
4978: LD_STRING DO-Conspiracy-24
4980: PPUSH
4981: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4985: LD_INT 175
4987: PPUSH
4988: LD_INT 54
4990: PPUSH
4991: LD_INT 70
4993: PPUSH
4994: CALL 20175 0 3
// if IsOk ( Markov ) then
4998: LD_EXP 53
5002: PPUSH
5003: CALL_OW 302
5007: IFFALSE 5033
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
5009: LD_EXP 53
5013: PPUSH
5014: LD_STRING DMar-Conspiracy-25
5016: PPUSH
5017: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
5021: LD_EXP 53
5025: PPUSH
5026: LD_STRING DMar-Conspiracy-26
5028: PPUSH
5029: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
5033: LD_EXP 55
5037: PPUSH
5038: CALL_OW 302
5042: PUSH
5043: LD_EXP 51
5047: PPUSH
5048: CALL_OW 302
5052: AND
5053: IFFALSE 5513
// begin hasWeapons := true ;
5055: LD_ADDR_EXP 19
5059: PUSH
5060: LD_INT 1
5062: ST_TO_ADDR
// hasRevolver := true ;
5063: LD_ADDR_EXP 8
5067: PUSH
5068: LD_INT 1
5070: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
5071: LD_STRING M1-weapons
5073: PPUSH
5074: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
5078: LD_EXP 55
5082: PPUSH
5083: LD_STRING DKs-Conspiracy-27
5085: PPUSH
5086: CALL_OW 88
// if IsOk ( Givi ) then
5090: LD_EXP 47
5094: PPUSH
5095: CALL_OW 302
5099: IFFALSE 5115
// Say ( Givi , DG-Conspiracy-28 ) else
5101: LD_EXP 47
5105: PPUSH
5106: LD_STRING DG-Conspiracy-28
5108: PPUSH
5109: CALL_OW 88
5113: GO 5180
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
5115: LD_EXP 57
5119: PPUSH
5120: LD_INT 26
5122: PUSH
5123: LD_INT 1
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PPUSH
5130: CALL_OW 72
5134: PUSH
5135: LD_INT 1
5137: ARRAY
5138: PPUSH
5139: LD_STRING DArm-Conspiracy-a-28
5141: PPUSH
5142: CALL_OW 88
5146: NOT
5147: IFFALSE 5180
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
5149: LD_EXP 57
5153: PPUSH
5154: LD_INT 26
5156: PUSH
5157: LD_INT 2
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: PPUSH
5164: CALL_OW 72
5168: PUSH
5169: LD_INT 1
5171: ARRAY
5172: PPUSH
5173: LD_STRING DArf-Conspiracy-a-28
5175: PPUSH
5176: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
5180: LD_EXP 55
5184: PPUSH
5185: LD_STRING DKs-Conspiracy-29
5187: PPUSH
5188: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
5192: LD_INT 192
5194: PPUSH
5195: LD_INT 122
5197: PPUSH
5198: LD_INT 105
5200: PPUSH
5201: CALL 20175 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
5205: LD_EXP 55
5209: PPUSH
5210: LD_STRING DKs-Conspiracy-30
5212: PPUSH
5213: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
5217: LD_EXP 51
5221: PPUSH
5222: LD_STRING DK-Conspiracy-31
5224: PPUSH
5225: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
5229: LD_EXP 53
5233: PPUSH
5234: LD_STRING DMar-Conspiracy-33
5236: PPUSH
5237: CALL_OW 88
5241: NOT
5242: PUSH
5243: LD_EXP 57
5247: AND
5248: IFFALSE 5315
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
5250: LD_EXP 57
5254: PPUSH
5255: LD_INT 26
5257: PUSH
5258: LD_INT 1
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 72
5269: PUSH
5270: LD_INT 1
5272: ARRAY
5273: PPUSH
5274: LD_STRING DArm-Conspiracy-a-34
5276: PPUSH
5277: CALL_OW 88
5281: NOT
5282: IFFALSE 5315
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
5284: LD_EXP 57
5288: PPUSH
5289: LD_INT 26
5291: PUSH
5292: LD_INT 2
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PPUSH
5299: CALL_OW 72
5303: PUSH
5304: LD_INT 1
5306: ARRAY
5307: PPUSH
5308: LD_STRING DArf-Conspiracy-a-34
5310: PPUSH
5311: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5315: LD_EXP 51
5319: PPUSH
5320: LD_STRING DK-Conspiracy-34
5322: PPUSH
5323: CALL_OW 88
// if IsOk ( Markov ) then
5327: LD_EXP 53
5331: PPUSH
5332: CALL_OW 302
5336: IFFALSE 5421
// begin hasSniperRifle := true ;
5338: LD_ADDR_EXP 11
5342: PUSH
5343: LD_INT 1
5345: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5346: LD_EXP 53
5350: PPUSH
5351: LD_STRING DMar-Conspiracy-35
5353: PPUSH
5354: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5358: LD_EXP 51
5362: PPUSH
5363: LD_STRING DK-Conspiracy-36
5365: PPUSH
5366: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5370: LD_EXP 53
5374: PPUSH
5375: LD_STRING DMar-Conspiracy-37
5377: PPUSH
5378: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5382: LD_EXP 53
5386: PPUSH
5387: LD_STRING DMar-Conspiracy-38
5389: PPUSH
5390: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5394: LD_INT 137
5396: PPUSH
5397: LD_INT 98
5399: PPUSH
5400: LD_INT 105
5402: PPUSH
5403: CALL 20175 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5407: LD_EXP 53
5411: PPUSH
5412: LD_STRING DMar-Conspiracy-39
5414: PPUSH
5415: CALL_OW 88
// end else
5419: GO 5513
// if heikeSecondSquad then
5421: LD_EXP 57
5425: IFFALSE 5513
// begin hasSniperRifle := true ;
5427: LD_ADDR_EXP 11
5431: PUSH
5432: LD_INT 1
5434: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5435: LD_INT 137
5437: PPUSH
5438: LD_INT 98
5440: PPUSH
5441: LD_INT 105
5443: PPUSH
5444: CALL 20175 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5448: LD_EXP 57
5452: PPUSH
5453: LD_INT 26
5455: PUSH
5456: LD_INT 1
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PPUSH
5463: CALL_OW 72
5467: PUSH
5468: LD_INT 1
5470: ARRAY
5471: PPUSH
5472: LD_STRING DArm-Conspiracy-a-35
5474: PPUSH
5475: CALL_OW 88
5479: NOT
5480: IFFALSE 5513
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5482: LD_EXP 57
5486: PPUSH
5487: LD_INT 26
5489: PUSH
5490: LD_INT 2
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PPUSH
5497: CALL_OW 72
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: PPUSH
5506: LD_STRING DArf-Conspiracy-a-35
5508: PPUSH
5509: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5513: LD_EXP 46
5517: PPUSH
5518: LD_STRING DH-Conspiracy-40
5520: PPUSH
5521: CALL_OW 88
// if IsOk ( Mike ) then
5525: LD_EXP 48
5529: PPUSH
5530: CALL_OW 302
5534: IFFALSE 5593
// begin hasScout := true ;
5536: LD_ADDR_EXP 12
5540: PUSH
5541: LD_INT 1
5543: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5544: LD_EXP 48
5548: PPUSH
5549: LD_STRING DM-Conspiracy-41
5551: PPUSH
5552: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5556: LD_EXP 48
5560: PPUSH
5561: LD_STRING DM-Conspiracy-42
5563: PPUSH
5564: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5568: LD_INT 73
5570: PPUSH
5571: LD_INT 102
5573: PPUSH
5574: LD_INT 105
5576: PPUSH
5577: CALL 20175 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5581: LD_EXP 48
5585: PPUSH
5586: LD_STRING DM-Conspiracy-43
5588: PPUSH
5589: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5593: LD_EXP 4
5597: PUSH
5598: LD_EXP 51
5602: PPUSH
5603: CALL_OW 302
5607: AND
5608: PUSH
5609: LD_EXP 55
5613: PPUSH
5614: CALL_OW 302
5618: AND
5619: IFFALSE 5665
// begin hasMethanol := true ;
5621: LD_ADDR_EXP 13
5625: PUSH
5626: LD_INT 1
5628: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5629: LD_EXP 51
5633: PPUSH
5634: LD_STRING DK-Conspiracy-44
5636: PPUSH
5637: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5641: LD_EXP 51
5645: PPUSH
5646: LD_STRING DK-Conspiracy-45
5648: PPUSH
5649: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5653: LD_EXP 50
5657: PPUSH
5658: LD_STRING DKam-Conspiracy-46
5660: PPUSH
5661: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5665: LD_EXP 46
5669: PPUSH
5670: LD_STRING DH-Conspiracy-47
5672: PPUSH
5673: CALL_OW 88
// wait ( 0 0$1 ) ;
5677: LD_INT 35
5679: PPUSH
5680: CALL_OW 67
// your_side := 8 ;
5684: LD_ADDR_OWVAR 2
5688: PUSH
5689: LD_INT 8
5691: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5692: LD_INT 1
5694: PPUSH
5695: LD_INT 1
5697: PPUSH
5698: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5702: LD_ADDR_VAR 0 2
5706: PUSH
5707: LD_INT 2
5709: PUSH
5710: LD_INT 22
5712: PUSH
5713: LD_INT 2
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: PUSH
5720: LD_INT 22
5722: PUSH
5723: LD_INT 4
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: LIST
5734: PUSH
5735: LD_INT 21
5737: PUSH
5738: LD_INT 1
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PPUSH
5749: CALL_OW 69
5753: PUSH
5754: FOR_IN
5755: IFFALSE 5768
// RemoveUnit ( i ) ;
5757: LD_VAR 0 2
5761: PPUSH
5762: CALL_OW 64
5766: GO 5754
5768: POP
5769: POP
// wait ( 0 0$0.3 ) ;
5770: LD_INT 10
5772: PPUSH
5773: CALL_OW 67
// Query ( StartInfo1 ) ;
5777: LD_STRING StartInfo1
5779: PPUSH
5780: CALL_OW 97
// wait ( 0 0$1 ) ;
5784: LD_INT 35
5786: PPUSH
5787: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5791: LD_STRING colors_night.txt
5793: PPUSH
5794: CALL_OW 544
// Query ( StartInfo2 ) ;
5798: LD_STRING StartInfo2
5800: PPUSH
5801: CALL_OW 97
// PrepareGame ;
5805: CALL 1056 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5809: LD_INT 152
5811: PPUSH
5812: LD_INT 65
5814: PPUSH
5815: LD_INT 2
5817: PPUSH
5818: LD_INT 70
5820: NEG
5821: PPUSH
5822: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5826: LD_INT 152
5828: PPUSH
5829: LD_INT 65
5831: PPUSH
5832: LD_INT 2
5834: PPUSH
5835: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5839: LD_INT 133
5841: PPUSH
5842: LD_INT 76
5844: PPUSH
5845: LD_INT 2
5847: PPUSH
5848: LD_INT 6
5850: NEG
5851: PPUSH
5852: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5856: LD_INT 152
5858: PPUSH
5859: LD_INT 65
5861: PPUSH
5862: LD_INT 8
5864: PPUSH
5865: LD_INT 70
5867: NEG
5868: PPUSH
5869: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5873: LD_INT 152
5875: PPUSH
5876: LD_INT 65
5878: PPUSH
5879: LD_INT 8
5881: PPUSH
5882: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5886: LD_INT 133
5888: PPUSH
5889: LD_INT 76
5891: PPUSH
5892: LD_INT 8
5894: PPUSH
5895: LD_INT 6
5897: NEG
5898: PPUSH
5899: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5903: LD_INT 23
5905: PPUSH
5906: CALL_OW 87
// dialogue_skipped := false ;
5910: LD_ADDR_OWVAR 59
5914: PUSH
5915: LD_INT 0
5917: ST_TO_ADDR
// InitRuPatrols ;
5918: CALL 3303 0 0
// Say ( Heike , DH-Escape-1 ) ;
5922: LD_EXP 46
5926: PPUSH
5927: LD_STRING DH-Escape-1
5929: PPUSH
5930: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5934: LD_EXP 46
5938: PPUSH
5939: LD_STRING DH-Escape-2
5941: PPUSH
5942: CALL_OW 88
// StartLockerMinigame ;
5946: CALL 20960 0 0
// wait ( 0 0$1 ) ;
5950: LD_INT 35
5952: PPUSH
5953: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5957: LD_EXP 46
5961: PPUSH
5962: LD_STRING DH-Escape-4
5964: PPUSH
5965: CALL_OW 88
// wait ( 0 0$3 ) ;
5969: LD_INT 105
5971: PPUSH
5972: CALL_OW 67
// your_side := 2 ;
5976: LD_ADDR_OWVAR 2
5980: PUSH
5981: LD_INT 2
5983: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5984: LD_EXP 46
5988: PPUSH
5989: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5993: LD_INT 152
5995: PPUSH
5996: LD_INT 65
5998: PPUSH
5999: LD_INT 2
6001: PPUSH
6002: LD_INT 70
6004: NEG
6005: PPUSH
6006: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
6010: LD_INT 152
6012: PPUSH
6013: LD_INT 65
6015: PPUSH
6016: LD_INT 2
6018: PPUSH
6019: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
6023: LD_INT 133
6025: PPUSH
6026: LD_INT 76
6028: PPUSH
6029: LD_INT 8
6031: PPUSH
6032: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
6036: LD_EXP 46
6040: PPUSH
6041: LD_INT 128
6043: PPUSH
6044: LD_INT 64
6046: PPUSH
6047: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6051: LD_INT 35
6053: PPUSH
6054: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
6058: LD_EXP 46
6062: PPUSH
6063: LD_INT 128
6065: PPUSH
6066: LD_INT 64
6068: PPUSH
6069: CALL_OW 307
6073: IFFALSE 6051
// ComHold ( Heike ) ;
6075: LD_EXP 46
6079: PPUSH
6080: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
6084: LD_EXP 46
6088: PPUSH
6089: LD_STRING DH-Start-1
6091: PPUSH
6092: CALL_OW 88
// if not americanContact then
6096: LD_EXP 10
6100: NOT
6101: IFFALSE 6117
// Say ( Heike , DH-Start-c-2 ) else
6103: LD_EXP 46
6107: PPUSH
6108: LD_STRING DH-Start-c-2
6110: PPUSH
6111: CALL_OW 88
6115: GO 6149
// if johnnySaved then
6117: LD_EXP 3
6121: IFFALSE 6137
// Say ( Heike , DH-Start-a-2 ) else
6123: LD_EXP 46
6127: PPUSH
6128: LD_STRING DH-Start-a-2
6130: PPUSH
6131: CALL_OW 88
6135: GO 6149
// Say ( Heike , DH-Start-b-2 ) ;
6137: LD_EXP 46
6141: PPUSH
6142: LD_STRING DH-Start-b-2
6144: PPUSH
6145: CALL_OW 88
// Video ( false ) ;
6149: LD_INT 0
6151: PPUSH
6152: CALL 67134 0 1
// tick := 0 ;
6156: LD_ADDR_OWVAR 1
6160: PUSH
6161: LD_INT 0
6163: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
6164: LD_STRING M1
6166: PPUSH
6167: CALL_OW 337
// enable ( gameStartEvent ) ;
6171: LD_INT 2
6173: ENABLE_MARKED
// SaveForQuickRestart ;
6174: CALL_OW 22
// end ;
6178: LD_VAR 0 1
6182: RET
// function ActionAdditional ; var i , un , tmp ; begin
6183: LD_INT 0
6185: PPUSH
6186: PPUSH
6187: PPUSH
6188: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
6189: LD_INT 115
6191: PPUSH
6192: LD_INT 27
6194: PPUSH
6195: LD_INT 2
6197: PPUSH
6198: LD_INT 6
6200: NEG
6201: PPUSH
6202: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
6206: LD_EXP 46
6210: PPUSH
6211: LD_INT 115
6213: PPUSH
6214: LD_INT 27
6216: PPUSH
6217: CALL_OW 428
6221: PPUSH
6222: CALL_OW 52
// SetClass ( Heike , 33 ) ;
6226: LD_EXP 46
6230: PPUSH
6231: LD_INT 33
6233: PPUSH
6234: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
6238: LD_INT 124
6240: PPUSH
6241: LD_INT 39
6243: PPUSH
6244: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
6248: LD_EXP 46
6252: PPUSH
6253: LD_STRING DH-Fail-1
6255: PPUSH
6256: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
6260: LD_INT 3
6262: PPUSH
6263: CALL_OW 427
// ComExit ( Heike ) ;
6267: LD_EXP 46
6271: PPUSH
6272: CALL 67560 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
6276: LD_EXP 46
6280: PPUSH
6281: LD_INT 109
6283: PPUSH
6284: LD_INT 33
6286: PPUSH
6287: CALL_OW 171
// AddComHold ( Heike ) ;
6291: LD_EXP 46
6295: PPUSH
6296: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6300: LD_INT 115
6302: PPUSH
6303: LD_INT 27
6305: PPUSH
6306: LD_INT 2
6308: PPUSH
6309: CALL_OW 331
// wait ( 0 0$2 ) ;
6313: LD_INT 70
6315: PPUSH
6316: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6320: LD_INT 35
6322: PPUSH
6323: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6327: LD_EXP 46
6331: PPUSH
6332: LD_INT 109
6334: PPUSH
6335: LD_INT 33
6337: PPUSH
6338: CALL_OW 307
6342: IFFALSE 6320
// Say ( Heike , DH-Fail-2 ) ;
6344: LD_EXP 46
6348: PPUSH
6349: LD_STRING DH-Fail-2
6351: PPUSH
6352: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6356: LD_EXP 46
6360: PPUSH
6361: LD_INT 111
6363: PPUSH
6364: LD_INT 48
6366: PPUSH
6367: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6371: LD_INT 35
6373: PPUSH
6374: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6378: LD_EXP 46
6382: PPUSH
6383: LD_INT 111
6385: PPUSH
6386: LD_INT 48
6388: PPUSH
6389: CALL_OW 297
6393: PUSH
6394: LD_INT 4
6396: LESS
6397: IFFALSE 6371
// AddComMoveXY ( Heike , 106 , 72 ) ;
6399: LD_EXP 46
6403: PPUSH
6404: LD_INT 106
6406: PPUSH
6407: LD_INT 72
6409: PPUSH
6410: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6414: LD_EXP 46
6418: PPUSH
6419: LD_INT 103
6421: PPUSH
6422: LD_INT 80
6424: PPUSH
6425: CALL_OW 171
// uc_side := 3 ;
6429: LD_ADDR_OWVAR 20
6433: PUSH
6434: LD_INT 3
6436: ST_TO_ADDR
// uc_nation := 3 ;
6437: LD_ADDR_OWVAR 21
6441: PUSH
6442: LD_INT 3
6444: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6445: LD_INT 1
6447: PPUSH
6448: LD_INT 1
6450: PPUSH
6451: LD_INT 6
6453: PPUSH
6454: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6458: LD_ADDR_OWVAR 29
6462: PUSH
6463: LD_INT 12
6465: PUSH
6466: LD_INT 12
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: ST_TO_ADDR
// un := CreateHuman ;
6473: LD_ADDR_VAR 0 3
6477: PUSH
6478: CALL_OW 44
6482: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6483: LD_VAR 0 3
6487: PPUSH
6488: LD_INT 134
6490: PPUSH
6491: LD_INT 52
6493: PPUSH
6494: LD_INT 4
6496: PPUSH
6497: LD_INT 0
6499: PPUSH
6500: CALL 69302 0 5
// ComTurnUnit ( un , Heike ) ;
6504: LD_VAR 0 3
6508: PPUSH
6509: LD_EXP 46
6513: PPUSH
6514: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6518: LD_VAR 0 3
6522: PPUSH
6523: LD_EXP 46
6527: PPUSH
6528: CALL_OW 112
// if GetSex ( un ) = sex_male then
6532: LD_VAR 0 3
6536: PPUSH
6537: CALL_OW 258
6541: PUSH
6542: LD_INT 1
6544: EQUAL
6545: IFFALSE 6561
// Say ( un , DRum-Fail-3 ) else
6547: LD_VAR 0 3
6551: PPUSH
6552: LD_STRING DRum-Fail-3
6554: PPUSH
6555: CALL_OW 88
6559: GO 6573
// Say ( un , DRuf-Fail-3 ) ;
6561: LD_VAR 0 3
6565: PPUSH
6566: LD_STRING DRuf-Fail-3
6568: PPUSH
6569: CALL_OW 88
// for i := 1 to 3 do
6573: LD_ADDR_VAR 0 2
6577: PUSH
6578: DOUBLE
6579: LD_INT 1
6581: DEC
6582: ST_TO_ADDR
6583: LD_INT 3
6585: PUSH
6586: FOR_TO
6587: IFFALSE 6660
// begin PrepareSoldier ( false , 10 ) ;
6589: LD_INT 0
6591: PPUSH
6592: LD_INT 10
6594: PPUSH
6595: CALL_OW 381
// un := CreateHuman ;
6599: LD_ADDR_VAR 0 3
6603: PUSH
6604: CALL_OW 44
6608: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6609: LD_ADDR_VAR 0 4
6613: PUSH
6614: LD_VAR 0 4
6618: PPUSH
6619: LD_VAR 0 3
6623: PPUSH
6624: CALL 67162 0 2
6628: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6629: LD_VAR 0 3
6633: PPUSH
6634: LD_INT 8
6636: PPUSH
6637: LD_INT 0
6639: PPUSH
6640: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6644: LD_VAR 0 3
6648: PPUSH
6649: LD_EXP 46
6653: PPUSH
6654: CALL_OW 119
// end ;
6658: GO 6586
6660: POP
6661: POP
// repeat wait ( 0 0$1 ) ;
6662: LD_INT 35
6664: PPUSH
6665: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6669: LD_VAR 0 4
6673: PPUSH
6674: LD_INT 101
6676: PUSH
6677: LD_INT 2
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PPUSH
6684: CALL_OW 72
6688: PUSH
6689: LD_INT 1
6691: GREATER
6692: IFFALSE 6662
// wait ( 0 0$1 ) ;
6694: LD_INT 35
6696: PPUSH
6697: CALL_OW 67
// DialogueOn ;
6701: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6705: LD_EXP 46
6709: PPUSH
6710: LD_STRING DH-Fail-4
6712: PPUSH
6713: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6717: LD_EXP 46
6721: PPUSH
6722: LD_STRING DH-Fail-5
6724: PPUSH
6725: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6729: LD_EXP 46
6733: PPUSH
6734: LD_STRING DH-Fail-6
6736: PPUSH
6737: CALL_OW 88
// DialogueOff ;
6741: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6745: LD_VAR 0 4
6749: PPUSH
6750: LD_EXP 46
6754: PPUSH
6755: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6759: LD_INT 35
6761: PPUSH
6762: CALL_OW 67
// until IsDying ( Heike ) ;
6766: LD_EXP 46
6770: PPUSH
6771: CALL_OW 303
6775: IFFALSE 6759
// KillUnit ( Heike ) ;
6777: LD_EXP 46
6781: PPUSH
6782: CALL_OW 66
// wait ( 0 0$4 ) ;
6786: LD_INT 140
6788: PPUSH
6789: CALL_OW 67
// ResetFog ;
6793: CALL_OW 335
// DialogueOn ;
6797: CALL_OW 6
// dwait ( 0 0$1 ) ;
6801: LD_INT 35
6803: PPUSH
6804: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6808: LD_ADDR_EXP 46
6812: PUSH
6813: LD_STRING Heike
6815: PPUSH
6816: LD_EXP 1
6820: NOT
6821: PPUSH
6822: LD_EXP 2
6826: PPUSH
6827: CALL 29471 0 3
6831: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6832: LD_EXP 46
6836: PPUSH
6837: LD_STRING DH-Fail-7
6839: PPUSH
6840: CALL_OW 89
// DialogueOff ;
6844: CALL_OW 7
// YouLost ( Fail ) ;
6848: LD_STRING Fail
6850: PPUSH
6851: CALL_OW 104
// end ;
6855: LD_VAR 0 1
6859: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6860: LD_INT 2
6862: PPUSH
6863: LD_INT 173
6865: PPUSH
6866: LD_INT 29
6868: PPUSH
6869: CALL_OW 293
6873: PUSH
6874: LD_EXP 46
6878: PPUSH
6879: LD_INT 173
6881: PPUSH
6882: LD_INT 29
6884: PPUSH
6885: CALL_OW 297
6889: PUSH
6890: LD_INT 6
6892: LESS
6893: AND
6894: IFFALSE 6911
6896: GO 6898
6898: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6899: LD_EXP 46
6903: PPUSH
6904: LD_STRING DH-EastRoad
6906: PPUSH
6907: CALL_OW 88
6911: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6912: LD_INT 2
6914: PPUSH
6915: LD_INT 149
6917: PPUSH
6918: LD_INT 3
6920: PPUSH
6921: CALL_OW 293
6925: PUSH
6926: LD_EXP 46
6930: PPUSH
6931: LD_INT 149
6933: PPUSH
6934: LD_INT 3
6936: PPUSH
6937: CALL_OW 297
6941: PUSH
6942: LD_INT 6
6944: LESS
6945: AND
6946: IFFALSE 6963
6948: GO 6950
6950: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6951: LD_EXP 46
6955: PPUSH
6956: LD_STRING DH-EastRoad
6958: PPUSH
6959: CALL_OW 88
6963: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6964: LD_INT 2
6966: PPUSH
6967: LD_INT 217
6969: PPUSH
6970: LD_INT 120
6972: PPUSH
6973: CALL_OW 293
6977: PUSH
6978: LD_EXP 46
6982: PPUSH
6983: LD_INT 217
6985: PPUSH
6986: LD_INT 120
6988: PPUSH
6989: CALL_OW 297
6993: PUSH
6994: LD_INT 6
6996: LESS
6997: AND
6998: IFFALSE 7015
7000: GO 7002
7002: DISABLE
// Say ( Heike , DH-EastEnd ) ;
7003: LD_EXP 46
7007: PPUSH
7008: LD_STRING DH-EastEnd
7010: PPUSH
7011: CALL_OW 88
7015: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
7016: LD_EXP 46
7020: PPUSH
7021: LD_INT 11
7023: PPUSH
7024: CALL_OW 308
7028: IFFALSE 7066
7030: GO 7032
7032: DISABLE
// begin if not heikeSquad then
7033: LD_EXP 14
7037: NOT
7038: IFFALSE 7054
// Say ( Heike , DH-Hill ) else
7040: LD_EXP 46
7044: PPUSH
7045: LD_STRING DH-Hill
7047: PPUSH
7048: CALL_OW 88
7052: GO 7066
// Say ( Heike , DH-Hill-a ) ;
7054: LD_EXP 46
7058: PPUSH
7059: LD_STRING DH-Hill-a
7061: PPUSH
7062: CALL_OW 88
// end ;
7066: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
7067: LD_EXP 46
7071: PPUSH
7072: LD_INT 12
7074: PPUSH
7075: CALL_OW 308
7079: IFFALSE 7266
7081: GO 7083
7083: DISABLE
7084: LD_INT 0
7086: PPUSH
7087: PPUSH
7088: PPUSH
// begin DialogueOn ;
7089: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7093: LD_EXP 46
7097: PPUSH
7098: CALL_OW 87
// x := GetX ( Heike ) ;
7102: LD_ADDR_VAR 0 1
7106: PUSH
7107: LD_EXP 46
7111: PPUSH
7112: CALL_OW 250
7116: ST_TO_ADDR
// y := GetY ( Heike ) ;
7117: LD_ADDR_VAR 0 2
7121: PUSH
7122: LD_EXP 46
7126: PPUSH
7127: CALL_OW 251
7131: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7132: LD_VAR 0 1
7136: PPUSH
7137: LD_VAR 0 2
7141: PPUSH
7142: LD_INT 2
7144: PPUSH
7145: LD_INT 12
7147: NEG
7148: PPUSH
7149: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7153: LD_VAR 0 1
7157: PPUSH
7158: LD_VAR 0 2
7162: PPUSH
7163: LD_INT 2
7165: PPUSH
7166: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7170: LD_INT 101
7172: PUSH
7173: LD_INT 2
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 2
7182: PUSH
7183: LD_INT 30
7185: PUSH
7186: LD_INT 32
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 30
7195: PUSH
7196: LD_INT 33
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PPUSH
7212: CALL_OW 69
7216: IFFALSE 7228
// v := 3 else
7218: LD_ADDR_VAR 0 3
7222: PUSH
7223: LD_INT 3
7225: ST_TO_ADDR
7226: GO 7236
// v := 2 ;
7228: LD_ADDR_VAR 0 3
7232: PUSH
7233: LD_INT 2
7235: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7236: LD_EXP 46
7240: PPUSH
7241: LD_STRING DH-Outpost-
7243: PUSH
7244: LD_INT 1
7246: PPUSH
7247: LD_VAR 0 3
7251: PPUSH
7252: CALL_OW 12
7256: STR
7257: PPUSH
7258: CALL_OW 88
// DialogueOff ;
7262: CALL_OW 7
// end ;
7266: PPOPN 3
7268: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorder2Area ) marked gameStartEvent do var x , y , v ;
7269: LD_EXP 46
7273: PPUSH
7274: LD_INT 64
7276: PPUSH
7277: CALL_OW 308
7281: IFFALSE 7468
7283: GO 7285
7285: DISABLE
7286: LD_INT 0
7288: PPUSH
7289: PPUSH
7290: PPUSH
// begin DialogueOn ;
7291: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7295: LD_EXP 46
7299: PPUSH
7300: CALL_OW 87
// x := GetX ( Heike ) ;
7304: LD_ADDR_VAR 0 1
7308: PUSH
7309: LD_EXP 46
7313: PPUSH
7314: CALL_OW 250
7318: ST_TO_ADDR
// y := GetY ( Heike ) ;
7319: LD_ADDR_VAR 0 2
7323: PUSH
7324: LD_EXP 46
7328: PPUSH
7329: CALL_OW 251
7333: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7334: LD_VAR 0 1
7338: PPUSH
7339: LD_VAR 0 2
7343: PPUSH
7344: LD_INT 2
7346: PPUSH
7347: LD_INT 12
7349: NEG
7350: PPUSH
7351: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7355: LD_VAR 0 1
7359: PPUSH
7360: LD_VAR 0 2
7364: PPUSH
7365: LD_INT 2
7367: PPUSH
7368: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7372: LD_INT 101
7374: PUSH
7375: LD_INT 2
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 2
7384: PUSH
7385: LD_INT 30
7387: PUSH
7388: LD_INT 32
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: LD_INT 30
7397: PUSH
7398: LD_INT 33
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: LIST
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PPUSH
7414: CALL_OW 69
7418: IFFALSE 7430
// v := 3 else
7420: LD_ADDR_VAR 0 3
7424: PUSH
7425: LD_INT 3
7427: ST_TO_ADDR
7428: GO 7438
// v := 2 ;
7430: LD_ADDR_VAR 0 3
7434: PUSH
7435: LD_INT 2
7437: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7438: LD_EXP 46
7442: PPUSH
7443: LD_STRING DH-Outpost-
7445: PUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_VAR 0 3
7453: PPUSH
7454: CALL_OW 12
7458: STR
7459: PPUSH
7460: CALL_OW 88
// DialogueOff ;
7464: CALL_OW 7
// end ;
7468: PPOPN 3
7470: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
7471: LD_EXP 46
7475: PPUSH
7476: LD_INT 19
7478: PPUSH
7479: CALL_OW 308
7483: PUSH
7484: LD_EXP 22
7488: NOT
7489: AND
7490: PUSH
7491: LD_EXP 30
7495: NOT
7496: AND
7497: IFFALSE 7570
7499: GO 7501
7501: DISABLE
// begin DialogueOn ;
7502: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
7506: LD_INT 152
7508: PPUSH
7509: LD_INT 115
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: LD_INT 16
7517: NEG
7518: PPUSH
7519: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7523: LD_INT 152
7525: PPUSH
7526: LD_INT 115
7528: PPUSH
7529: LD_INT 2
7531: PPUSH
7532: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7536: LD_INT 152
7538: PPUSH
7539: LD_INT 115
7541: PPUSH
7542: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7546: LD_EXP 46
7550: PPUSH
7551: LD_STRING DH-Stealth-1
7553: PPUSH
7554: CALL_OW 88
// DialogueOff ;
7558: CALL_OW 7
// adminAreaDiscovered := true ;
7562: LD_ADDR_EXP 22
7566: PUSH
7567: LD_INT 1
7569: ST_TO_ADDR
// end ;
7570: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7571: LD_INT 2
7573: PPUSH
7574: LD_EXP 47
7578: PPUSH
7579: CALL_OW 292
7583: PUSH
7584: LD_EXP 46
7588: PPUSH
7589: LD_EXP 47
7593: PPUSH
7594: CALL_OW 296
7598: PUSH
7599: LD_INT 6
7601: LESS
7602: AND
7603: PUSH
7604: LD_EXP 17
7608: NOT
7609: AND
7610: PUSH
7611: LD_EXP 30
7615: NOT
7616: AND
7617: IFFALSE 7723
7619: GO 7621
7621: DISABLE
// begin DialogueOn ;
7622: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7626: LD_EXP 47
7630: PPUSH
7631: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7635: LD_EXP 47
7639: PPUSH
7640: LD_EXP 46
7644: PPUSH
7645: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7649: LD_EXP 46
7653: PPUSH
7654: LD_EXP 47
7658: PPUSH
7659: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7663: LD_EXP 46
7667: PPUSH
7668: LD_STRING DH-Givi-1
7670: PPUSH
7671: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7675: LD_EXP 47
7679: PPUSH
7680: LD_STRING DG-Givi-2
7682: PPUSH
7683: CALL_OW 88
// DialogueOff ;
7687: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7691: LD_EXP 47
7695: PPUSH
7696: LD_INT 2
7698: PPUSH
7699: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7703: LD_ADDR_EXP 14
7707: PUSH
7708: LD_EXP 14
7712: PPUSH
7713: LD_EXP 47
7717: PPUSH
7718: CALL 67162 0 2
7722: ST_TO_ADDR
// end ;
7723: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7724: LD_INT 2
7726: PPUSH
7727: LD_EXP 52
7731: PPUSH
7732: CALL_OW 292
7736: PUSH
7737: LD_EXP 46
7741: PPUSH
7742: LD_EXP 52
7746: PPUSH
7747: CALL_OW 296
7751: PUSH
7752: LD_INT 6
7754: LESS
7755: AND
7756: PUSH
7757: LD_EXP 17
7761: NOT
7762: AND
7763: PUSH
7764: LD_EXP 30
7768: NOT
7769: AND
7770: IFFALSE 7876
7772: GO 7774
7774: DISABLE
// begin DialogueOn ;
7775: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7779: LD_EXP 52
7783: PPUSH
7784: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7788: LD_EXP 52
7792: PPUSH
7793: LD_EXP 46
7797: PPUSH
7798: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7802: LD_EXP 46
7806: PPUSH
7807: LD_EXP 52
7811: PPUSH
7812: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7816: LD_EXP 46
7820: PPUSH
7821: LD_STRING DH-Sophia-1
7823: PPUSH
7824: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7828: LD_EXP 52
7832: PPUSH
7833: LD_STRING DS-Sophia-2
7835: PPUSH
7836: CALL_OW 88
// DialogueOff ;
7840: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7844: LD_EXP 52
7848: PPUSH
7849: LD_INT 2
7851: PPUSH
7852: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7856: LD_ADDR_EXP 14
7860: PUSH
7861: LD_EXP 14
7865: PPUSH
7866: LD_EXP 52
7870: PPUSH
7871: CALL 67162 0 2
7875: ST_TO_ADDR
// end ;
7876: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7877: LD_INT 2
7879: PPUSH
7880: LD_EXP 54
7884: PPUSH
7885: CALL_OW 292
7889: PUSH
7890: LD_EXP 46
7894: PPUSH
7895: LD_EXP 54
7899: PPUSH
7900: CALL_OW 296
7904: PUSH
7905: LD_INT 6
7907: LESS
7908: AND
7909: PUSH
7910: LD_EXP 17
7914: NOT
7915: AND
7916: PUSH
7917: LD_EXP 30
7921: NOT
7922: AND
7923: IFFALSE 8019
7925: GO 7927
7927: DISABLE
// begin DialogueOn ;
7928: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7932: LD_EXP 54
7936: PPUSH
7937: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7941: LD_EXP 46
7945: PPUSH
7946: LD_STRING DH-Olaf-1
7948: PPUSH
7949: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7953: LD_EXP 54
7957: PPUSH
7958: LD_STRING DO-Olaf-2
7960: PPUSH
7961: CALL_OW 88
// if explosionsTakenByRussians then
7965: LD_EXP 21
7969: IFFALSE 7983
// Say ( Olaf , DO-Olaf-a-3 ) ;
7971: LD_EXP 54
7975: PPUSH
7976: LD_STRING DO-Olaf-a-3
7978: PPUSH
7979: CALL_OW 88
// DialogueOff ;
7983: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7987: LD_EXP 54
7991: PPUSH
7992: LD_INT 2
7994: PPUSH
7995: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7999: LD_ADDR_EXP 14
8003: PUSH
8004: LD_EXP 14
8008: PPUSH
8009: LD_EXP 54
8013: PPUSH
8014: CALL 67162 0 2
8018: ST_TO_ADDR
// end ;
8019: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
8020: LD_INT 2
8022: PPUSH
8023: LD_EXP 48
8027: PPUSH
8028: CALL_OW 292
8032: PUSH
8033: LD_EXP 46
8037: PPUSH
8038: LD_EXP 48
8042: PPUSH
8043: CALL_OW 296
8047: PUSH
8048: LD_INT 6
8050: LESS
8051: AND
8052: PUSH
8053: LD_EXP 17
8057: NOT
8058: AND
8059: PUSH
8060: LD_EXP 30
8064: NOT
8065: AND
8066: IFFALSE 8294
8068: GO 8070
8070: DISABLE
8071: LD_INT 0
8073: PPUSH
8074: PPUSH
// begin DialogueOn ;
8075: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
8079: LD_EXP 48
8083: PPUSH
8084: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
8088: LD_ADDR_VAR 0 2
8092: PUSH
8093: LD_INT 18
8095: PPUSH
8096: LD_INT 0
8098: PPUSH
8099: CALL_OW 517
8103: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
8104: LD_ADDR_VAR 0 1
8108: PUSH
8109: DOUBLE
8110: LD_INT 1
8112: DEC
8113: ST_TO_ADDR
8114: LD_VAR 0 2
8118: PUSH
8119: LD_INT 1
8121: ARRAY
8122: PUSH
8123: FOR_TO
8124: IFFALSE 8206
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
8126: LD_VAR 0 2
8130: PUSH
8131: LD_INT 1
8133: ARRAY
8134: PUSH
8135: LD_VAR 0 1
8139: ARRAY
8140: PPUSH
8141: LD_VAR 0 2
8145: PUSH
8146: LD_INT 2
8148: ARRAY
8149: PUSH
8150: LD_VAR 0 1
8154: ARRAY
8155: PPUSH
8156: LD_INT 2
8158: PPUSH
8159: LD_INT 3
8161: NEG
8162: PPUSH
8163: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
8167: LD_VAR 0 2
8171: PUSH
8172: LD_INT 1
8174: ARRAY
8175: PUSH
8176: LD_VAR 0 1
8180: ARRAY
8181: PPUSH
8182: LD_VAR 0 2
8186: PUSH
8187: LD_INT 2
8189: ARRAY
8190: PUSH
8191: LD_VAR 0 1
8195: ARRAY
8196: PPUSH
8197: LD_INT 2
8199: PPUSH
8200: CALL_OW 331
// end ;
8204: GO 8123
8206: POP
8207: POP
// Say ( Mike , DM-Mike-1 ) ;
8208: LD_EXP 48
8212: PPUSH
8213: LD_STRING DM-Mike-1
8215: PPUSH
8216: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
8220: LD_EXP 46
8224: PPUSH
8225: LD_STRING DH-Mike-2
8227: PPUSH
8228: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
8232: LD_INT 78
8234: PPUSH
8235: LD_INT 104
8237: PPUSH
8238: CALL_OW 84
// dwait ( 0 0$1 ) ;
8242: LD_INT 35
8244: PPUSH
8245: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8249: LD_EXP 46
8253: PPUSH
8254: CALL_OW 87
// DialogueOff ;
8258: CALL_OW 7
// SetSide ( Mike , 2 ) ;
8262: LD_EXP 48
8266: PPUSH
8267: LD_INT 2
8269: PPUSH
8270: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
8274: LD_ADDR_EXP 14
8278: PUSH
8279: LD_EXP 14
8283: PPUSH
8284: LD_EXP 48
8288: PPUSH
8289: CALL 67162 0 2
8293: ST_TO_ADDR
// end ;
8294: PPOPN 2
8296: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and not hasMuchin and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
8297: LD_EXP 46
8301: PPUSH
8302: LD_EXP 51
8306: PPUSH
8307: CALL_OW 296
8311: PUSH
8312: LD_INT 6
8314: LESS
8315: PUSH
8316: LD_EXP 51
8320: PPUSH
8321: CALL_OW 257
8325: PUSH
8326: LD_INT 33
8328: EQUAL
8329: AND
8330: PUSH
8331: LD_EXP 17
8335: NOT
8336: AND
8337: PUSH
8338: LD_EXP 30
8342: NOT
8343: AND
8344: PUSH
8345: LD_EXP 51
8349: PPUSH
8350: CALL_OW 302
8354: AND
8355: PUSH
8356: LD_EXP 20
8360: AND
8361: PUSH
8362: LD_EXP 51
8366: PUSH
8367: LD_EXP 14
8371: IN
8372: AND
8373: PUSH
8374: LD_EXP 51
8378: PPUSH
8379: CALL_OW 255
8383: PUSH
8384: LD_INT 2
8386: EQUAL
8387: AND
8388: IFFALSE 8417
8390: GO 8392
8392: DISABLE
// begin DialogueOn ;
8393: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
8397: LD_EXP 46
8401: PPUSH
8402: LD_STRING DH-Kaia-Revolver-2
8404: PPUSH
8405: CALL_OW 88
// SetClassKaiaRevolver ;
8409: CALL 1769 0 0
// DialogueOff ;
8413: CALL_OW 7
// end ;
8417: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
8418: LD_EXP 49
8422: PUSH
8423: LD_EXP 56
8427: AND
8428: PUSH
8429: LD_EXP 56
8433: PPUSH
8434: CALL_OW 255
8438: PUSH
8439: LD_INT 2
8441: NONEQUAL
8442: AND
8443: PUSH
8444: LD_EXP 49
8448: PPUSH
8449: CALL_OW 255
8453: PUSH
8454: LD_INT 2
8456: NONEQUAL
8457: AND
8458: PUSH
8459: LD_EXP 14
8463: PPUSH
8464: LD_INT 22
8466: PUSH
8467: LD_INT 2
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PPUSH
8474: CALL_OW 72
8478: PUSH
8479: LD_INT 5
8481: GREATER
8482: AND
8483: PUSH
8484: LD_EXP 17
8488: NOT
8489: AND
8490: PUSH
8491: LD_EXP 30
8495: NOT
8496: AND
8497: IFFALSE 9214
8499: GO 8501
8501: DISABLE
8502: LD_INT 0
8504: PPUSH
8505: PPUSH
// begin DialogueOn ;
8506: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8510: LD_ADDR_VAR 0 2
8514: PUSH
8515: LD_EXP 47
8519: PPUSH
8520: CALL_OW 302
8524: PUSH
8525: LD_EXP 47
8529: PUSH
8530: LD_EXP 14
8534: IN
8535: AND
8536: PUSH
8537: LD_EXP 47
8541: PPUSH
8542: CALL_OW 255
8546: PUSH
8547: LD_INT 2
8549: EQUAL
8550: AND
8551: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8552: LD_EXP 46
8556: PPUSH
8557: LD_STRING DH-Med-1
8559: PPUSH
8560: CALL_OW 88
// if hasGivi then
8564: LD_VAR 0 2
8568: IFFALSE 8584
// Say ( Givi , DG-Med-2 ) else
8570: LD_EXP 47
8574: PPUSH
8575: LD_STRING DG-Med-2
8577: PPUSH
8578: CALL_OW 88
8582: GO 8689
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8584: LD_EXP 14
8588: PUSH
8589: LD_EXP 57
8593: ISECT
8594: PPUSH
8595: LD_INT 22
8597: PUSH
8598: LD_INT 2
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: LD_INT 26
8607: PUSH
8608: LD_INT 1
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PPUSH
8619: CALL_OW 72
8623: PUSH
8624: LD_INT 1
8626: ARRAY
8627: PPUSH
8628: LD_STRING DArm-Med-e-2
8630: PPUSH
8631: CALL_OW 88
8635: NOT
8636: IFFALSE 8689
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8638: LD_EXP 14
8642: PUSH
8643: LD_EXP 57
8647: ISECT
8648: PPUSH
8649: LD_INT 22
8651: PUSH
8652: LD_INT 2
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PUSH
8659: LD_INT 26
8661: PUSH
8662: LD_INT 2
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PPUSH
8673: CALL_OW 72
8677: PUSH
8678: LD_INT 1
8680: ARRAY
8681: PPUSH
8682: LD_STRING DArf-Med-e-2
8684: PPUSH
8685: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8689: LD_INT 154
8691: PPUSH
8692: LD_INT 119
8694: PPUSH
8695: LD_INT 70
8697: PPUSH
8698: CALL 20175 0 3
// Say ( Heike , DH-Med-3 ) ;
8702: LD_EXP 46
8706: PPUSH
8707: LD_STRING DH-Med-3
8709: PPUSH
8710: CALL_OW 88
// if hasGivi then
8714: LD_VAR 0 2
8718: IFFALSE 8734
// Say ( Givi , DG-Med-4 ) else
8720: LD_EXP 47
8724: PPUSH
8725: LD_STRING DG-Med-4
8727: PPUSH
8728: CALL_OW 88
8732: GO 8839
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8734: LD_EXP 14
8738: PUSH
8739: LD_EXP 57
8743: ISECT
8744: PPUSH
8745: LD_INT 22
8747: PUSH
8748: LD_INT 2
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 26
8757: PUSH
8758: LD_INT 1
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PPUSH
8769: CALL_OW 72
8773: PUSH
8774: LD_INT 1
8776: ARRAY
8777: PPUSH
8778: LD_STRING DArm-Med-e-4
8780: PPUSH
8781: CALL_OW 88
8785: NOT
8786: IFFALSE 8839
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8788: LD_EXP 14
8792: PUSH
8793: LD_EXP 57
8797: ISECT
8798: PPUSH
8799: LD_INT 22
8801: PUSH
8802: LD_INT 2
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 26
8811: PUSH
8812: LD_INT 2
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PPUSH
8823: CALL_OW 72
8827: PUSH
8828: LD_INT 1
8830: ARRAY
8831: PPUSH
8832: LD_STRING DArf-Med-e-4
8834: PPUSH
8835: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8839: LD_ADDR_VAR 0 1
8843: PUSH
8844: LD_EXP 51
8848: PPUSH
8849: CALL_OW 302
8853: PUSH
8854: LD_EXP 51
8858: PUSH
8859: LD_EXP 14
8863: IN
8864: AND
8865: PUSH
8866: LD_EXP 51
8870: PPUSH
8871: CALL_OW 255
8875: PUSH
8876: LD_INT 2
8878: EQUAL
8879: AND
8880: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8881: LD_EXP 48
8885: PPUSH
8886: CALL_OW 302
8890: PUSH
8891: LD_EXP 48
8895: PUSH
8896: LD_EXP 14
8900: IN
8901: AND
8902: PUSH
8903: LD_EXP 51
8907: PPUSH
8908: CALL_OW 255
8912: PUSH
8913: LD_INT 2
8915: EQUAL
8916: AND
8917: IFFALSE 8949
// begin Say ( Mike , DM-Med-5 ) ;
8919: LD_EXP 48
8923: PPUSH
8924: LD_STRING DM-Med-5
8926: PPUSH
8927: CALL_OW 88
// if hasKaia then
8931: LD_VAR 0 1
8935: IFFALSE 8949
// Say ( Kaia , DK-Med-6 ) ;
8937: LD_EXP 51
8941: PPUSH
8942: LD_STRING DK-Med-6
8944: PPUSH
8945: CALL_OW 88
// end ; if hasKaia then
8949: LD_VAR 0 1
8953: IFFALSE 9194
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8955: LD_INT 175
8957: PPUSH
8958: LD_INT 123
8960: PPUSH
8961: LD_INT 2
8963: PPUSH
8964: LD_INT 8
8966: NEG
8967: PPUSH
8968: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8972: LD_INT 175
8974: PPUSH
8975: LD_INT 123
8977: PPUSH
8978: LD_INT 2
8980: PPUSH
8981: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8985: LD_INT 175
8987: PPUSH
8988: LD_INT 123
8990: PPUSH
8991: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
8995: LD_EXP 51
8999: PPUSH
9000: LD_STRING DK-Med-7
9002: PPUSH
9003: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9007: LD_EXP 51
9011: PPUSH
9012: LD_STRING DK-Med-8
9014: PPUSH
9015: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9019: LD_EXP 53
9023: PPUSH
9024: CALL_OW 302
9028: PUSH
9029: LD_EXP 53
9033: PUSH
9034: LD_EXP 14
9038: IN
9039: AND
9040: PUSH
9041: LD_EXP 53
9045: PPUSH
9046: CALL_OW 255
9050: PUSH
9051: LD_INT 2
9053: EQUAL
9054: AND
9055: IFFALSE 9113
// begin Say ( Markov , DMar-Med-9 ) ;
9057: LD_EXP 53
9061: PPUSH
9062: LD_STRING DMar-Med-9
9064: PPUSH
9065: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9069: LD_EXP 51
9073: PPUSH
9074: LD_STRING DK-Med-10
9076: PPUSH
9077: CALL_OW 88
// if hasGivi then
9081: LD_VAR 0 2
9085: IFFALSE 9101
// Say ( Kaia , DK-Med-11 ) else
9087: LD_EXP 51
9091: PPUSH
9092: LD_STRING DK-Med-11
9094: PPUSH
9095: CALL_OW 88
9099: GO 9113
// Say ( Kaia , DK-Med-a-11 ) ;
9101: LD_EXP 51
9105: PPUSH
9106: LD_STRING DK-Med-a-11
9108: PPUSH
9109: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9113: LD_EXP 50
9117: PPUSH
9118: CALL_OW 302
9122: PUSH
9123: LD_EXP 50
9127: PUSH
9128: LD_EXP 14
9132: IN
9133: AND
9134: PUSH
9135: LD_EXP 50
9139: PPUSH
9140: CALL_OW 255
9144: PUSH
9145: LD_INT 2
9147: EQUAL
9148: AND
9149: IFFALSE 9194
// begin Say ( Kamil , DKam-Med-12 ) ;
9151: LD_EXP 50
9155: PPUSH
9156: LD_STRING DKam-Med-12
9158: PPUSH
9159: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9163: LD_EXP 50
9167: PPUSH
9168: LD_STRING DKam-Med-13
9170: PPUSH
9171: CALL_OW 88
// if not hasExplosionCollected then
9175: LD_EXP 23
9179: NOT
9180: IFFALSE 9194
// Say ( Heike , DH-Med-d-14 ) ;
9182: LD_EXP 46
9186: PPUSH
9187: LD_STRING DH-Med-d-14
9189: PPUSH
9190: CALL_OW 88
// end ; end ; DialogueOff ;
9194: CALL_OW 7
// adminAreaDiscovered := true ;
9198: LD_ADDR_EXP 22
9202: PUSH
9203: LD_INT 1
9205: ST_TO_ADDR
// laundryAllowed := true ;
9206: LD_ADDR_EXP 26
9210: PUSH
9211: LD_INT 1
9213: ST_TO_ADDR
// end ;
9214: PPOPN 2
9216: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9217: LD_EXP 49
9221: NOT
9222: PUSH
9223: LD_EXP 56
9227: AND
9228: PUSH
9229: LD_EXP 56
9233: PUSH
9234: LD_EXP 14
9238: IN
9239: NOT
9240: AND
9241: PUSH
9242: LD_EXP 14
9246: PPUSH
9247: LD_INT 22
9249: PUSH
9250: LD_INT 2
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 72
9261: PUSH
9262: LD_INT 4
9264: GREATER
9265: AND
9266: PUSH
9267: LD_EXP 17
9271: NOT
9272: AND
9273: PUSH
9274: LD_EXP 30
9278: NOT
9279: AND
9280: IFFALSE 9997
9282: GO 9284
9284: DISABLE
9285: LD_INT 0
9287: PPUSH
9288: PPUSH
// begin DialogueOn ;
9289: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9293: LD_ADDR_VAR 0 1
9297: PUSH
9298: LD_EXP 47
9302: PPUSH
9303: CALL_OW 302
9307: PUSH
9308: LD_EXP 47
9312: PUSH
9313: LD_EXP 14
9317: IN
9318: AND
9319: PUSH
9320: LD_EXP 47
9324: PPUSH
9325: CALL_OW 255
9329: PUSH
9330: LD_INT 2
9332: EQUAL
9333: AND
9334: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
9335: LD_EXP 46
9339: PPUSH
9340: LD_STRING DH-Med-a-1
9342: PPUSH
9343: CALL_OW 88
// if hasGivi then
9347: LD_VAR 0 1
9351: IFFALSE 9367
// Say ( Givi , DG-Med-a-2 ) else
9353: LD_EXP 47
9357: PPUSH
9358: LD_STRING DG-Med-a-2
9360: PPUSH
9361: CALL_OW 88
9365: GO 9472
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9367: LD_EXP 14
9371: PUSH
9372: LD_EXP 57
9376: ISECT
9377: PPUSH
9378: LD_INT 22
9380: PUSH
9381: LD_INT 2
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 26
9390: PUSH
9391: LD_INT 1
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PPUSH
9402: CALL_OW 72
9406: PUSH
9407: LD_INT 1
9409: ARRAY
9410: PPUSH
9411: LD_STRING DArm-Med-f-2
9413: PPUSH
9414: CALL_OW 88
9418: NOT
9419: IFFALSE 9472
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9421: LD_EXP 14
9425: PUSH
9426: LD_EXP 57
9430: ISECT
9431: PPUSH
9432: LD_INT 22
9434: PUSH
9435: LD_INT 2
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: PUSH
9442: LD_INT 26
9444: PUSH
9445: LD_INT 2
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PPUSH
9456: CALL_OW 72
9460: PUSH
9461: LD_INT 1
9463: ARRAY
9464: PPUSH
9465: LD_STRING DArf-Med-f-2
9467: PPUSH
9468: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9472: LD_INT 154
9474: PPUSH
9475: LD_INT 119
9477: PPUSH
9478: LD_INT 70
9480: PPUSH
9481: CALL 20175 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9485: LD_EXP 46
9489: PPUSH
9490: LD_STRING DH-Med-a-3
9492: PPUSH
9493: CALL_OW 88
// if hasGivi then
9497: LD_VAR 0 1
9501: IFFALSE 9517
// Say ( Givi , DG-Med-a-4 ) else
9503: LD_EXP 47
9507: PPUSH
9508: LD_STRING DG-Med-a-4
9510: PPUSH
9511: CALL_OW 88
9515: GO 9622
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9517: LD_EXP 14
9521: PUSH
9522: LD_EXP 57
9526: ISECT
9527: PPUSH
9528: LD_INT 22
9530: PUSH
9531: LD_INT 2
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: LD_INT 26
9540: PUSH
9541: LD_INT 1
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PPUSH
9552: CALL_OW 72
9556: PUSH
9557: LD_INT 1
9559: ARRAY
9560: PPUSH
9561: LD_STRING DArm-Med-f-4
9563: PPUSH
9564: CALL_OW 88
9568: NOT
9569: IFFALSE 9622
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9571: LD_EXP 14
9575: PUSH
9576: LD_EXP 57
9580: ISECT
9581: PPUSH
9582: LD_INT 22
9584: PUSH
9585: LD_INT 2
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 26
9594: PUSH
9595: LD_INT 2
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PPUSH
9606: CALL_OW 72
9610: PUSH
9611: LD_INT 1
9613: ARRAY
9614: PPUSH
9615: LD_STRING DArf-Med-f-4
9617: PPUSH
9618: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9622: LD_ADDR_VAR 0 2
9626: PUSH
9627: LD_EXP 51
9631: PPUSH
9632: CALL_OW 302
9636: PUSH
9637: LD_EXP 51
9641: PUSH
9642: LD_EXP 14
9646: IN
9647: AND
9648: PUSH
9649: LD_EXP 51
9653: PPUSH
9654: CALL_OW 255
9658: PUSH
9659: LD_INT 2
9661: EQUAL
9662: AND
9663: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9664: LD_EXP 48
9668: PPUSH
9669: CALL_OW 302
9673: PUSH
9674: LD_EXP 48
9678: PUSH
9679: LD_EXP 14
9683: IN
9684: AND
9685: PUSH
9686: LD_EXP 48
9690: PPUSH
9691: CALL_OW 255
9695: PUSH
9696: LD_INT 2
9698: EQUAL
9699: AND
9700: IFFALSE 9732
// begin Say ( Mike , DM-Med-5 ) ;
9702: LD_EXP 48
9706: PPUSH
9707: LD_STRING DM-Med-5
9709: PPUSH
9710: CALL_OW 88
// if hasKaia then
9714: LD_VAR 0 2
9718: IFFALSE 9732
// Say ( Kaia , DK-Med-6 ) ;
9720: LD_EXP 51
9724: PPUSH
9725: LD_STRING DK-Med-6
9727: PPUSH
9728: CALL_OW 88
// end ; if hasKaia then
9732: LD_VAR 0 2
9736: IFFALSE 9977
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9738: LD_INT 175
9740: PPUSH
9741: LD_INT 123
9743: PPUSH
9744: LD_INT 2
9746: PPUSH
9747: LD_INT 8
9749: NEG
9750: PPUSH
9751: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9755: LD_INT 175
9757: PPUSH
9758: LD_INT 123
9760: PPUSH
9761: LD_INT 2
9763: PPUSH
9764: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9768: LD_INT 175
9770: PPUSH
9771: LD_INT 123
9773: PPUSH
9774: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9778: LD_EXP 51
9782: PPUSH
9783: LD_STRING DK-Med-7
9785: PPUSH
9786: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9790: LD_EXP 51
9794: PPUSH
9795: LD_STRING DK-Med-8
9797: PPUSH
9798: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9802: LD_EXP 53
9806: PPUSH
9807: CALL_OW 302
9811: PUSH
9812: LD_EXP 53
9816: PUSH
9817: LD_EXP 14
9821: IN
9822: AND
9823: PUSH
9824: LD_EXP 53
9828: PPUSH
9829: CALL_OW 255
9833: PUSH
9834: LD_INT 2
9836: EQUAL
9837: AND
9838: IFFALSE 9896
// begin Say ( Markov , DMar-Med-9 ) ;
9840: LD_EXP 53
9844: PPUSH
9845: LD_STRING DMar-Med-9
9847: PPUSH
9848: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9852: LD_EXP 51
9856: PPUSH
9857: LD_STRING DK-Med-10
9859: PPUSH
9860: CALL_OW 88
// if hasGivi then
9864: LD_VAR 0 1
9868: IFFALSE 9884
// Say ( Kaia , DK-Med-11 ) else
9870: LD_EXP 51
9874: PPUSH
9875: LD_STRING DK-Med-11
9877: PPUSH
9878: CALL_OW 88
9882: GO 9896
// Say ( Kaia , DK-Med-a-11 ) ;
9884: LD_EXP 51
9888: PPUSH
9889: LD_STRING DK-Med-a-11
9891: PPUSH
9892: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9896: LD_EXP 50
9900: PPUSH
9901: CALL_OW 302
9905: PUSH
9906: LD_EXP 50
9910: PUSH
9911: LD_EXP 14
9915: IN
9916: AND
9917: PUSH
9918: LD_EXP 50
9922: PPUSH
9923: CALL_OW 255
9927: PUSH
9928: LD_INT 2
9930: EQUAL
9931: AND
9932: IFFALSE 9977
// begin Say ( Kamil , DKam-Med-12 ) ;
9934: LD_EXP 50
9938: PPUSH
9939: LD_STRING DKam-Med-12
9941: PPUSH
9942: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9946: LD_EXP 50
9950: PPUSH
9951: LD_STRING DKam-Med-13
9953: PPUSH
9954: CALL_OW 88
// if not hasExplosionCollected then
9958: LD_EXP 23
9962: NOT
9963: IFFALSE 9977
// Say ( Heike , DH-Med-d-14 ) ;
9965: LD_EXP 46
9969: PPUSH
9970: LD_STRING DH-Med-d-14
9972: PPUSH
9973: CALL_OW 88
// end ; end ; DialogueOff ;
9977: CALL_OW 7
// adminAreaDiscovered := true ;
9981: LD_ADDR_EXP 22
9985: PUSH
9986: LD_INT 1
9988: ST_TO_ADDR
// laundryAllowed := true ;
9989: LD_ADDR_EXP 26
9993: PUSH
9994: LD_INT 1
9996: ST_TO_ADDR
// end ;
9997: PPOPN 2
9999: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
10000: LD_EXP 49
10004: PUSH
10005: LD_EXP 56
10009: NOT
10010: AND
10011: PUSH
10012: LD_EXP 49
10016: PUSH
10017: LD_EXP 14
10021: IN
10022: NOT
10023: AND
10024: PUSH
10025: LD_EXP 14
10029: PPUSH
10030: LD_INT 22
10032: PUSH
10033: LD_INT 2
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PPUSH
10040: CALL_OW 72
10044: PUSH
10045: LD_INT 4
10047: GREATER
10048: AND
10049: PUSH
10050: LD_EXP 17
10054: NOT
10055: AND
10056: PUSH
10057: LD_EXP 30
10061: NOT
10062: AND
10063: IFFALSE 10780
10065: GO 10067
10067: DISABLE
10068: LD_INT 0
10070: PPUSH
10071: PPUSH
// begin DialogueOn ;
10072: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
10076: LD_ADDR_VAR 0 1
10080: PUSH
10081: LD_EXP 47
10085: PPUSH
10086: CALL_OW 302
10090: PUSH
10091: LD_EXP 47
10095: PUSH
10096: LD_EXP 14
10100: IN
10101: AND
10102: PUSH
10103: LD_EXP 47
10107: PPUSH
10108: CALL_OW 255
10112: PUSH
10113: LD_INT 2
10115: EQUAL
10116: AND
10117: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
10118: LD_EXP 46
10122: PPUSH
10123: LD_STRING DH-Med-b-1
10125: PPUSH
10126: CALL_OW 88
// if hasGivi then
10130: LD_VAR 0 1
10134: IFFALSE 10150
// Say ( Givi , DG-Med-a-2 ) else
10136: LD_EXP 47
10140: PPUSH
10141: LD_STRING DG-Med-a-2
10143: PPUSH
10144: CALL_OW 88
10148: GO 10255
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
10150: LD_EXP 14
10154: PUSH
10155: LD_EXP 57
10159: ISECT
10160: PPUSH
10161: LD_INT 22
10163: PUSH
10164: LD_INT 2
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: LD_INT 26
10173: PUSH
10174: LD_INT 1
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: PPUSH
10185: CALL_OW 72
10189: PUSH
10190: LD_INT 1
10192: ARRAY
10193: PPUSH
10194: LD_STRING DArm-Med-f-2
10196: PPUSH
10197: CALL_OW 88
10201: NOT
10202: IFFALSE 10255
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
10204: LD_EXP 14
10208: PUSH
10209: LD_EXP 57
10213: ISECT
10214: PPUSH
10215: LD_INT 22
10217: PUSH
10218: LD_INT 2
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PUSH
10225: LD_INT 26
10227: PUSH
10228: LD_INT 2
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PPUSH
10239: CALL_OW 72
10243: PUSH
10244: LD_INT 1
10246: ARRAY
10247: PPUSH
10248: LD_STRING DArf-Med-f-2
10250: PPUSH
10251: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
10255: LD_INT 154
10257: PPUSH
10258: LD_INT 119
10260: PPUSH
10261: LD_INT 70
10263: PPUSH
10264: CALL 20175 0 3
// Say ( Heike , DH-Med-a-3 ) ;
10268: LD_EXP 46
10272: PPUSH
10273: LD_STRING DH-Med-a-3
10275: PPUSH
10276: CALL_OW 88
// if hasGivi then
10280: LD_VAR 0 1
10284: IFFALSE 10300
// Say ( Givi , DG-Med-a-4 ) else
10286: LD_EXP 47
10290: PPUSH
10291: LD_STRING DG-Med-a-4
10293: PPUSH
10294: CALL_OW 88
10298: GO 10405
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
10300: LD_EXP 14
10304: PUSH
10305: LD_EXP 57
10309: ISECT
10310: PPUSH
10311: LD_INT 22
10313: PUSH
10314: LD_INT 2
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 26
10323: PUSH
10324: LD_INT 1
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PPUSH
10335: CALL_OW 72
10339: PUSH
10340: LD_INT 1
10342: ARRAY
10343: PPUSH
10344: LD_STRING DArm-Med-f-4
10346: PPUSH
10347: CALL_OW 88
10351: NOT
10352: IFFALSE 10405
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
10354: LD_EXP 14
10358: PUSH
10359: LD_EXP 57
10363: ISECT
10364: PPUSH
10365: LD_INT 22
10367: PUSH
10368: LD_INT 2
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 26
10377: PUSH
10378: LD_INT 2
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PPUSH
10389: CALL_OW 72
10393: PUSH
10394: LD_INT 1
10396: ARRAY
10397: PPUSH
10398: LD_STRING DArf-Med-f-4
10400: PPUSH
10401: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
10405: LD_ADDR_VAR 0 2
10409: PUSH
10410: LD_EXP 51
10414: PPUSH
10415: CALL_OW 302
10419: PUSH
10420: LD_EXP 51
10424: PUSH
10425: LD_EXP 14
10429: IN
10430: AND
10431: PUSH
10432: LD_EXP 51
10436: PPUSH
10437: CALL_OW 255
10441: PUSH
10442: LD_INT 2
10444: EQUAL
10445: AND
10446: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
10447: LD_EXP 48
10451: PPUSH
10452: CALL_OW 302
10456: PUSH
10457: LD_EXP 48
10461: PUSH
10462: LD_EXP 14
10466: IN
10467: AND
10468: PUSH
10469: LD_EXP 48
10473: PPUSH
10474: CALL_OW 255
10478: PUSH
10479: LD_INT 2
10481: EQUAL
10482: AND
10483: IFFALSE 10515
// begin Say ( Mike , DM-Med-5 ) ;
10485: LD_EXP 48
10489: PPUSH
10490: LD_STRING DM-Med-5
10492: PPUSH
10493: CALL_OW 88
// if hasKaia then
10497: LD_VAR 0 2
10501: IFFALSE 10515
// Say ( Kaia , DK-Med-6 ) ;
10503: LD_EXP 51
10507: PPUSH
10508: LD_STRING DK-Med-6
10510: PPUSH
10511: CALL_OW 88
// end ; if hasKaia then
10515: LD_VAR 0 2
10519: IFFALSE 10760
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
10521: LD_INT 175
10523: PPUSH
10524: LD_INT 123
10526: PPUSH
10527: LD_INT 2
10529: PPUSH
10530: LD_INT 8
10532: NEG
10533: PPUSH
10534: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10538: LD_INT 175
10540: PPUSH
10541: LD_INT 123
10543: PPUSH
10544: LD_INT 2
10546: PPUSH
10547: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10551: LD_INT 175
10553: PPUSH
10554: LD_INT 123
10556: PPUSH
10557: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10561: LD_EXP 51
10565: PPUSH
10566: LD_STRING DK-Med-7
10568: PPUSH
10569: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10573: LD_EXP 51
10577: PPUSH
10578: LD_STRING DK-Med-8
10580: PPUSH
10581: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10585: LD_EXP 53
10589: PPUSH
10590: CALL_OW 302
10594: PUSH
10595: LD_EXP 53
10599: PUSH
10600: LD_EXP 14
10604: IN
10605: AND
10606: PUSH
10607: LD_EXP 53
10611: PPUSH
10612: CALL_OW 255
10616: PUSH
10617: LD_INT 2
10619: EQUAL
10620: AND
10621: IFFALSE 10679
// begin Say ( Markov , DMar-Med-9 ) ;
10623: LD_EXP 53
10627: PPUSH
10628: LD_STRING DMar-Med-9
10630: PPUSH
10631: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10635: LD_EXP 51
10639: PPUSH
10640: LD_STRING DK-Med-10
10642: PPUSH
10643: CALL_OW 88
// if hasGivi then
10647: LD_VAR 0 1
10651: IFFALSE 10667
// Say ( Kaia , DK-Med-11 ) else
10653: LD_EXP 51
10657: PPUSH
10658: LD_STRING DK-Med-11
10660: PPUSH
10661: CALL_OW 88
10665: GO 10679
// Say ( Kaia , DK-Med-a-11 ) ;
10667: LD_EXP 51
10671: PPUSH
10672: LD_STRING DK-Med-a-11
10674: PPUSH
10675: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10679: LD_EXP 50
10683: PPUSH
10684: CALL_OW 302
10688: PUSH
10689: LD_EXP 50
10693: PUSH
10694: LD_EXP 14
10698: IN
10699: AND
10700: PUSH
10701: LD_EXP 50
10705: PPUSH
10706: CALL_OW 255
10710: PUSH
10711: LD_INT 2
10713: EQUAL
10714: AND
10715: IFFALSE 10760
// begin Say ( Kamil , DKam-Med-12 ) ;
10717: LD_EXP 50
10721: PPUSH
10722: LD_STRING DKam-Med-12
10724: PPUSH
10725: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10729: LD_EXP 50
10733: PPUSH
10734: LD_STRING DKam-Med-13
10736: PPUSH
10737: CALL_OW 88
// if not hasExplosionCollected then
10741: LD_EXP 23
10745: NOT
10746: IFFALSE 10760
// Say ( Heike , DH-Med-d-14 ) ;
10748: LD_EXP 46
10752: PPUSH
10753: LD_STRING DH-Med-d-14
10755: PPUSH
10756: CALL_OW 88
// end ; end ; DialogueOff ;
10760: CALL_OW 7
// adminAreaDiscovered := true ;
10764: LD_ADDR_EXP 22
10768: PUSH
10769: LD_INT 1
10771: ST_TO_ADDR
// laundryAllowed := true ;
10772: LD_ADDR_EXP 26
10776: PUSH
10777: LD_INT 1
10779: ST_TO_ADDR
// end ;
10780: PPOPN 2
10782: END
// every 0 0$1 trigger laundryAllowed do
10783: LD_EXP 26
10787: IFFALSE 10799
10789: GO 10791
10791: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10792: LD_STRING M1-laundry
10794: PPUSH
10795: CALL_OW 337
10799: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10800: LD_EXP 49
10804: NOT
10805: PUSH
10806: LD_EXP 56
10810: NOT
10811: AND
10812: PUSH
10813: LD_EXP 54
10817: PPUSH
10818: CALL_OW 302
10822: AND
10823: PUSH
10824: LD_EXP 54
10828: PUSH
10829: LD_EXP 14
10833: IN
10834: AND
10835: PUSH
10836: LD_EXP 54
10840: PPUSH
10841: CALL_OW 255
10845: PUSH
10846: LD_INT 2
10848: EQUAL
10849: AND
10850: PUSH
10851: LD_EXP 17
10855: NOT
10856: AND
10857: PUSH
10858: LD_EXP 30
10862: NOT
10863: AND
10864: IFFALSE 11020
10866: GO 10868
10868: DISABLE
// begin DialogueOn ;
10869: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10873: LD_INT 152
10875: PPUSH
10876: LD_INT 115
10878: PPUSH
10879: LD_INT 2
10881: PPUSH
10882: LD_INT 16
10884: NEG
10885: PPUSH
10886: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10890: LD_INT 152
10892: PPUSH
10893: LD_INT 115
10895: PPUSH
10896: LD_INT 2
10898: PPUSH
10899: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10903: LD_INT 152
10905: PPUSH
10906: LD_INT 115
10908: PPUSH
10909: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10913: LD_EXP 54
10917: PPUSH
10918: LD_STRING DO-Med-c-1
10920: PPUSH
10921: CALL_OW 88
// if not hasExplosionCollected then
10925: LD_EXP 23
10929: NOT
10930: IFFALSE 10946
// Say ( Heike , DH-Med-d-14 ) else
10932: LD_EXP 46
10936: PPUSH
10937: LD_STRING DH-Med-d-14
10939: PPUSH
10940: CALL_OW 88
10944: GO 11008
// begin Say ( Heike , DH-Med-c-2 ) ;
10946: LD_EXP 46
10950: PPUSH
10951: LD_STRING DH-Med-c-2
10953: PPUSH
10954: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10958: LD_EXP 51
10962: PPUSH
10963: CALL_OW 302
10967: PUSH
10968: LD_EXP 51
10972: PUSH
10973: LD_EXP 14
10977: IN
10978: AND
10979: PUSH
10980: LD_EXP 51
10984: PPUSH
10985: CALL_OW 255
10989: PUSH
10990: LD_INT 2
10992: EQUAL
10993: AND
10994: IFFALSE 11008
// Say ( Kaia , DK-Med-c-3 ) ;
10996: LD_EXP 51
11000: PPUSH
11001: LD_STRING DK-Med-c-3
11003: PPUSH
11004: CALL_OW 88
// end ; DialogueOff ;
11008: CALL_OW 7
// adminAreaDiscovered := true ;
11012: LD_ADDR_EXP 22
11016: PUSH
11017: LD_INT 1
11019: ST_TO_ADDR
// end ;
11020: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
11021: LD_EXP 51
11025: PPUSH
11026: CALL_OW 256
11030: PUSH
11031: LD_INT 250
11033: LESS
11034: PUSH
11035: LD_EXP 51
11039: PUSH
11040: LD_EXP 14
11044: IN
11045: AND
11046: PUSH
11047: LD_EXP 17
11051: AND
11052: PUSH
11053: LD_EXP 24
11057: AND
11058: IFFALSE 11187
11060: GO 11062
11062: DISABLE
// begin DialogueOn ;
11063: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
11067: LD_EXP 51
11071: PPUSH
11072: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
11076: LD_EXP 51
11080: PPUSH
11081: LD_STRING DK-death-1
11083: PPUSH
11084: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
11088: LD_EXP 46
11092: PPUSH
11093: LD_STRING DH-death-2
11095: PPUSH
11096: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
11100: LD_EXP 51
11104: PPUSH
11105: LD_STRING DK-death-3
11107: PPUSH
11108: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
11112: LD_EXP 51
11116: PPUSH
11117: LD_STRING DK-death-4
11119: PPUSH
11120: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
11124: LD_EXP 51
11128: PPUSH
11129: LD_INT 8
11131: PPUSH
11132: CALL_OW 235
// ComStop ( Kaia ) ;
11136: LD_EXP 51
11140: PPUSH
11141: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
11145: LD_INT 8
11147: PPUSH
11148: LD_INT 2
11150: PPUSH
11151: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
11155: LD_ADDR_EXP 14
11159: PUSH
11160: LD_EXP 14
11164: PUSH
11165: LD_EXP 51
11169: DIFF
11170: ST_TO_ADDR
// DialogueOff ;
11171: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
11175: LD_EXP 48
11179: PPUSH
11180: LD_STRING DM-death-5
11182: PPUSH
11183: CALL_OW 88
// end ;
11187: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11188: LD_EXP 25
11192: NOT
11193: PUSH
11194: LD_EXP 30
11198: NOT
11199: AND
11200: PUSH
11201: LD_EXP 59
11205: PUSH
11206: LD_EXP 14
11210: IN
11211: NOT
11212: AND
11213: PUSH
11214: LD_INT 2
11216: PPUSH
11217: LD_EXP 59
11221: PPUSH
11222: CALL_OW 292
11226: AND
11227: PUSH
11228: LD_EXP 46
11232: PPUSH
11233: LD_EXP 59
11237: PPUSH
11238: CALL_OW 296
11242: PUSH
11243: LD_INT 6
11245: LESS
11246: AND
11247: PUSH
11248: LD_EXP 17
11252: NOT
11253: AND
11254: IFFALSE 11478
11256: GO 11258
11258: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11259: LD_EXP 59
11263: PPUSH
11264: LD_EXP 46
11268: PPUSH
11269: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11273: LD_EXP 46
11277: PPUSH
11278: LD_EXP 59
11282: PPUSH
11283: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11287: LD_INT 10
11289: PPUSH
11290: CALL_OW 67
// DialogueOn ;
11294: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11298: LD_EXP 59
11302: PPUSH
11303: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
11307: LD_EXP 46
11311: PPUSH
11312: LD_STRING DH-Deal-1
11314: PPUSH
11315: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
11319: LD_EXP 59
11323: PPUSH
11324: LD_STRING DJ-Deal-2
11326: PPUSH
11327: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
11331: LD_EXP 46
11335: PPUSH
11336: LD_STRING DH-Deal-3
11338: PPUSH
11339: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
11343: LD_EXP 59
11347: PPUSH
11348: LD_STRING DJ-Deal-4
11350: PPUSH
11351: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
11355: LD_EXP 59
11359: PPUSH
11360: LD_STRING DJ-Deal-5
11362: PPUSH
11363: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
11367: LD_EXP 59
11371: PPUSH
11372: LD_STRING DJ-Deal-6
11374: PPUSH
11375: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
11379: LD_EXP 59
11383: PPUSH
11384: LD_STRING DJ-Deal-7
11386: PPUSH
11387: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
11391: LD_EXP 46
11395: PPUSH
11396: LD_STRING DH-Deal-8
11398: PPUSH
11399: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
11403: LD_EXP 46
11407: PPUSH
11408: LD_STRING DH-Deal-9
11410: PPUSH
11411: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
11415: LD_EXP 59
11419: PPUSH
11420: LD_STRING DJ-Deal-10
11422: PPUSH
11423: CALL_OW 88
// DialogueOff ;
11427: CALL_OW 7
// contactWithAmerican := true ;
11431: LD_ADDR_EXP 25
11435: PUSH
11436: LD_INT 1
11438: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11439: LD_STRING M1-american-out
11441: PPUSH
11442: CALL_OW 604
// SetSide ( Harris , 2 ) ;
11446: LD_EXP 59
11450: PPUSH
11451: LD_INT 2
11453: PPUSH
11454: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11458: LD_ADDR_EXP 14
11462: PUSH
11463: LD_EXP 14
11467: PPUSH
11468: LD_EXP 59
11472: PPUSH
11473: CALL 67162 0 2
11477: ST_TO_ADDR
// end ;
11478: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11479: LD_EXP 25
11483: PUSH
11484: LD_EXP 30
11488: NOT
11489: AND
11490: PUSH
11491: LD_EXP 59
11495: PUSH
11496: LD_EXP 14
11500: IN
11501: NOT
11502: AND
11503: PUSH
11504: LD_INT 2
11506: PPUSH
11507: LD_EXP 59
11511: PPUSH
11512: CALL_OW 292
11516: AND
11517: PUSH
11518: LD_EXP 46
11522: PPUSH
11523: LD_EXP 59
11527: PPUSH
11528: CALL_OW 296
11532: PUSH
11533: LD_INT 6
11535: LESS
11536: AND
11537: PUSH
11538: LD_EXP 17
11542: NOT
11543: AND
11544: IFFALSE 11669
11546: GO 11548
11548: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11549: LD_EXP 59
11553: PPUSH
11554: LD_EXP 46
11558: PPUSH
11559: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11563: LD_EXP 46
11567: PPUSH
11568: LD_EXP 59
11572: PPUSH
11573: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11577: LD_INT 10
11579: PPUSH
11580: CALL_OW 67
// DialogueOn ;
11584: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11588: LD_EXP 59
11592: PPUSH
11593: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11597: LD_EXP 59
11601: PPUSH
11602: LD_STRING DJ-Escort-1
11604: PPUSH
11605: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11609: LD_EXP 46
11613: PPUSH
11614: LD_STRING DH-Escort-2
11616: PPUSH
11617: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11621: LD_EXP 59
11625: PPUSH
11626: LD_STRING DJ-Escort-3
11628: PPUSH
11629: CALL_OW 88
// DialogueOff ;
11633: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11637: LD_EXP 59
11641: PPUSH
11642: LD_INT 2
11644: PPUSH
11645: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11649: LD_ADDR_EXP 14
11653: PUSH
11654: LD_EXP 14
11658: PPUSH
11659: LD_EXP 59
11663: PPUSH
11664: CALL 67162 0 2
11668: ST_TO_ADDR
// end ;
11669: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11670: LD_EXP 25
11674: PUSH
11675: LD_EXP 30
11679: NOT
11680: AND
11681: PUSH
11682: LD_EXP 58
11686: PUSH
11687: LD_EXP 14
11691: DIFF
11692: PPUSH
11693: LD_INT 22
11695: PUSH
11696: LD_INT 4
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 3
11705: PUSH
11706: LD_INT 120
11708: PUSH
11709: LD_INT 1
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 101
11722: PUSH
11723: LD_INT 2
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: LIST
11734: PPUSH
11735: CALL_OW 72
11739: AND
11740: PUSH
11741: LD_EXP 17
11745: NOT
11746: AND
11747: IFFALSE 11974
11749: GO 11751
11751: DISABLE
11752: LD_INT 0
11754: PPUSH
// begin enable ;
11755: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11756: LD_ADDR_VAR 0 1
11760: PUSH
11761: LD_EXP 58
11765: PUSH
11766: LD_EXP 14
11770: DIFF
11771: PPUSH
11772: LD_INT 22
11774: PUSH
11775: LD_INT 4
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: LD_INT 91
11784: PUSH
11785: LD_EXP 46
11789: PUSH
11790: LD_INT 6
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: LIST
11797: PUSH
11798: LD_INT 101
11800: PUSH
11801: LD_INT 2
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: PPUSH
11813: CALL_OW 72
11817: PPUSH
11818: LD_EXP 46
11822: PPUSH
11823: CALL_OW 74
11827: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11828: LD_VAR 0 1
11832: PPUSH
11833: LD_EXP 46
11837: PPUSH
11838: CALL_OW 296
11842: PUSH
11843: LD_INT 6
11845: LESS
11846: IFFALSE 11974
// begin DialogueOn ;
11848: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11852: LD_VAR 0 1
11856: PPUSH
11857: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11861: LD_EXP 46
11865: PPUSH
11866: LD_STRING DH-USsol-1
11868: PPUSH
11869: CALL_OW 88
// if un <> Jerry then
11873: LD_VAR 0 1
11877: PUSH
11878: LD_EXP 61
11882: NONEQUAL
11883: IFFALSE 11926
// if GetSex ( un ) = sex_male then
11885: LD_VAR 0 1
11889: PPUSH
11890: CALL_OW 258
11894: PUSH
11895: LD_INT 1
11897: EQUAL
11898: IFFALSE 11914
// Say ( un , DUSM-USsol-2 ) else
11900: LD_VAR 0 1
11904: PPUSH
11905: LD_STRING DUSM-USsol-2
11907: PPUSH
11908: CALL_OW 88
11912: GO 11926
// Say ( un , DUSF-USsol-2 ) ;
11914: LD_VAR 0 1
11918: PPUSH
11919: LD_STRING DUSF-USsol-2
11921: PPUSH
11922: CALL_OW 88
// DialogueOff ;
11926: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11930: LD_ADDR_EXP 14
11934: PUSH
11935: LD_EXP 14
11939: PPUSH
11940: LD_VAR 0 1
11944: PPUSH
11945: CALL 67162 0 2
11949: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11950: LD_VAR 0 1
11954: PPUSH
11955: LD_INT 1
11957: PPUSH
11958: CALL_OW 109
// SetSide ( un , 2 ) ;
11962: LD_VAR 0 1
11966: PPUSH
11967: LD_INT 2
11969: PPUSH
11970: CALL_OW 235
// end ; end ;
11974: PPOPN 1
11976: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11977: LD_EXP 57
11981: PUSH
11982: LD_EXP 30
11986: NOT
11987: AND
11988: PUSH
11989: LD_EXP 57
11993: PUSH
11994: LD_EXP 14
11998: DIFF
11999: PPUSH
12000: LD_INT 3
12002: PUSH
12003: LD_INT 120
12005: PUSH
12006: LD_INT 1
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: LD_INT 91
12019: PUSH
12020: LD_EXP 46
12024: PUSH
12025: LD_INT 6
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 101
12035: PUSH
12036: LD_INT 2
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: PPUSH
12048: CALL_OW 72
12052: AND
12053: PUSH
12054: LD_EXP 17
12058: NOT
12059: AND
12060: IFFALSE 12275
12062: GO 12064
12064: DISABLE
12065: LD_INT 0
12067: PPUSH
// begin enable ;
12068: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
12069: LD_ADDR_VAR 0 1
12073: PUSH
12074: LD_EXP 57
12078: PUSH
12079: LD_EXP 14
12083: DIFF
12084: PPUSH
12085: LD_INT 22
12087: PUSH
12088: LD_INT 5
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: LD_INT 91
12097: PUSH
12098: LD_EXP 46
12102: PUSH
12103: LD_INT 6
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 101
12113: PUSH
12114: LD_INT 2
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: LIST
12125: PPUSH
12126: CALL_OW 72
12130: PPUSH
12131: LD_EXP 46
12135: PPUSH
12136: CALL_OW 74
12140: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12141: LD_VAR 0 1
12145: PPUSH
12146: LD_EXP 46
12150: PPUSH
12151: CALL_OW 296
12155: PUSH
12156: LD_INT 6
12158: LESS
12159: IFFALSE 12275
// begin DialogueOn ;
12161: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12165: LD_VAR 0 1
12169: PPUSH
12170: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12174: LD_EXP 46
12178: PPUSH
12179: LD_STRING DH-USsol-1
12181: PPUSH
12182: CALL_OW 88
// if GetSex ( un ) = sex_male then
12186: LD_VAR 0 1
12190: PPUSH
12191: CALL_OW 258
12195: PUSH
12196: LD_INT 1
12198: EQUAL
12199: IFFALSE 12215
// Say ( un , DArm-USsol-2 ) else
12201: LD_VAR 0 1
12205: PPUSH
12206: LD_STRING DArm-USsol-2
12208: PPUSH
12209: CALL_OW 88
12213: GO 12227
// Say ( un , DArf-USsol-3 ) ;
12215: LD_VAR 0 1
12219: PPUSH
12220: LD_STRING DArf-USsol-3
12222: PPUSH
12223: CALL_OW 88
// DialogueOff ;
12227: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12231: LD_ADDR_EXP 14
12235: PUSH
12236: LD_EXP 14
12240: PPUSH
12241: LD_VAR 0 1
12245: PPUSH
12246: CALL 67162 0 2
12250: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12251: LD_VAR 0 1
12255: PPUSH
12256: LD_INT 1
12258: PPUSH
12259: CALL_OW 109
// SetSide ( un , 2 ) ;
12263: LD_VAR 0 1
12267: PPUSH
12268: LD_INT 2
12270: PPUSH
12271: CALL_OW 235
// end ; end ;
12275: PPOPN 1
12277: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
12278: LD_EXP 58
12282: PPUSH
12283: LD_INT 101
12285: PUSH
12286: LD_INT 2
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PPUSH
12293: CALL_OW 72
12297: PUSH
12298: LD_EXP 14
12302: PPUSH
12303: LD_INT 22
12305: PUSH
12306: LD_INT 2
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PPUSH
12313: CALL_OW 72
12317: PUSH
12318: LD_INT 5
12320: GREATER
12321: AND
12322: PUSH
12323: LD_EXP 10
12327: NOT
12328: AND
12329: PUSH
12330: LD_EXP 30
12334: NOT
12335: AND
12336: PUSH
12337: LD_EXP 25
12341: NOT
12342: AND
12343: PUSH
12344: LD_EXP 17
12348: NOT
12349: AND
12350: IFFALSE 12465
12352: GO 12354
12354: DISABLE
12355: LD_INT 0
12357: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
12358: LD_ADDR_VAR 0 1
12362: PUSH
12363: LD_EXP 58
12367: PPUSH
12368: LD_INT 22
12370: PUSH
12371: LD_INT 4
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PUSH
12378: LD_INT 101
12380: PUSH
12381: LD_INT 2
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PPUSH
12392: CALL_OW 72
12396: PUSH
12397: LD_INT 1
12399: ARRAY
12400: ST_TO_ADDR
// DialogueOn ;
12401: CALL_OW 6
// if GetSex ( un ) = sex_male then
12405: LD_VAR 0 1
12409: PPUSH
12410: CALL_OW 258
12414: PUSH
12415: LD_INT 1
12417: EQUAL
12418: IFFALSE 12434
// Say ( un , DUSm-USsol-a-2 ) else
12420: LD_VAR 0 1
12424: PPUSH
12425: LD_STRING DUSm-USsol-a-2
12427: PPUSH
12428: CALL_OW 88
12432: GO 12446
// Say ( un , DUSf-USsol-a-2 ) ;
12434: LD_VAR 0 1
12438: PPUSH
12439: LD_STRING DUSf-USsol-a-2
12441: PPUSH
12442: CALL_OW 88
// DialogueOff ;
12446: CALL_OW 7
// wait ( 0 0$2 ) ;
12450: LD_INT 70
12452: PPUSH
12453: CALL_OW 67
// isAlarm := true ;
12457: LD_ADDR_EXP 17
12461: PUSH
12462: LD_INT 1
12464: ST_TO_ADDR
// end ;
12465: PPOPN 1
12467: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
12468: LD_EXP 17
12472: NOT
12473: PUSH
12474: LD_EXP 47
12478: PPUSH
12479: CALL_OW 302
12483: AND
12484: PUSH
12485: LD_EXP 47
12489: PPUSH
12490: CALL_OW 255
12494: PUSH
12495: LD_INT 2
12497: EQUAL
12498: AND
12499: PUSH
12500: LD_EXP 26
12504: AND
12505: PUSH
12506: LD_EXP 28
12510: NOT
12511: AND
12512: PUSH
12513: LD_EXP 27
12517: NOT
12518: AND
12519: PUSH
12520: LD_EXP 30
12524: NOT
12525: AND
12526: PUSH
12527: LD_EXP 47
12531: PPUSH
12532: LD_INT 165
12534: PPUSH
12535: CALL 20488 0 2
12539: AND
12540: IFFALSE 12672
12542: GO 12544
12544: DISABLE
// begin enable ;
12545: ENABLE
// InGameOn ;
12546: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12550: LD_EXP 47
12554: PPUSH
12555: LD_INT 5
12557: PPUSH
12558: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12562: LD_INT 165
12564: PPUSH
12565: LD_INT 5
12567: PPUSH
12568: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12572: LD_EXP 47
12576: PPUSH
12577: LD_INT 165
12579: PPUSH
12580: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12584: LD_INT 35
12586: PPUSH
12587: CALL_OW 67
// until IsInUnit ( Givi ) ;
12591: LD_EXP 47
12595: PPUSH
12596: CALL_OW 310
12600: IFFALSE 12584
// case Query ( GiviInLaundry ) of 1 :
12602: LD_STRING GiviInLaundry
12604: PPUSH
12605: CALL_OW 97
12609: PUSH
12610: LD_INT 1
12612: DOUBLE
12613: EQUAL
12614: IFTRUE 12618
12616: GO 12625
12618: POP
// SpawnGiviAsRussian ; 2 :
12619: CALL 1918 0 0
12623: GO 12637
12625: LD_INT 2
12627: DOUBLE
12628: EQUAL
12629: IFTRUE 12633
12631: GO 12636
12633: POP
// ; end ;
12634: GO 12637
12636: POP
// ComExitBuilding ( Givi ) ;
12637: LD_EXP 47
12641: PPUSH
12642: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12646: LD_EXP 47
12650: PPUSH
12651: LD_INT 2
12653: PPUSH
12654: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12658: LD_INT 165
12660: PPUSH
12661: LD_INT 3
12663: PPUSH
12664: CALL_OW 235
// InGameOff ;
12668: CALL_OW 9
// end ;
12672: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12673: LD_EXP 17
12677: NOT
12678: PUSH
12679: LD_EXP 28
12683: AND
12684: PUSH
12685: LD_EXP 47
12689: PPUSH
12690: CALL_OW 255
12694: PUSH
12695: LD_INT 2
12697: EQUAL
12698: AND
12699: PUSH
12700: LD_EXP 47
12704: PPUSH
12705: CALL_OW 248
12709: PUSH
12710: LD_INT 3
12712: EQUAL
12713: AND
12714: PUSH
12715: LD_EXP 47
12719: PPUSH
12720: LD_INT 119
12722: PPUSH
12723: CALL 20488 0 2
12727: AND
12728: PUSH
12729: LD_EXP 30
12733: NOT
12734: AND
12735: IFFALSE 12989
12737: GO 12739
12739: DISABLE
// begin InGameOn ;
12740: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12744: LD_EXP 47
12748: PPUSH
12749: LD_INT 3
12751: PPUSH
12752: CALL_OW 235
// wait ( 0 0$0.3 ) ;
12756: LD_INT 10
12758: PPUSH
12759: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
12763: LD_EXP 47
12767: PPUSH
12768: LD_INT 119
12770: PPUSH
12771: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12775: LD_INT 35
12777: PPUSH
12778: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
12782: LD_EXP 47
12786: PPUSH
12787: LD_INT 119
12789: PPUSH
12790: CALL_OW 120
// until IsInUnit ( Givi ) ;
12794: LD_EXP 47
12798: PPUSH
12799: CALL_OW 310
12803: IFFALSE 12775
// DialogueOn ;
12805: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12809: LD_EXP 47
12813: PPUSH
12814: LD_STRING DG-Captive-1
12816: PPUSH
12817: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12821: LD_EXP 65
12825: PPUSH
12826: LD_STRING DCom-Captive-2
12828: PPUSH
12829: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12833: LD_EXP 47
12837: PPUSH
12838: LD_STRING DG-Captive-3
12840: PPUSH
12841: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12845: LD_EXP 65
12849: PPUSH
12850: LD_STRING DCom-Captive-4
12852: PPUSH
12853: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12857: LD_EXP 65
12861: PPUSH
12862: CALL_OW 64
// DialogueOff ;
12866: CALL_OW 7
// InGameOff ;
12870: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12874: LD_EXP 47
12878: PPUSH
12879: LD_INT 2
12881: PPUSH
12882: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12886: LD_EXP 47
12890: PPUSH
12891: CALL_OW 122
// if Aviradze then
12895: LD_EXP 56
12899: IFFALSE 12942
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12901: LD_ADDR_EXP 14
12905: PUSH
12906: LD_EXP 14
12910: PPUSH
12911: LD_EXP 56
12915: PPUSH
12916: CALL 67162 0 2
12920: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12921: LD_EXP 56
12925: PPUSH
12926: LD_INT 2
12928: PPUSH
12929: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12933: LD_EXP 56
12937: PPUSH
12938: CALL_OW 122
// end ; if Ibrahim then
12942: LD_EXP 49
12946: IFFALSE 12989
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12948: LD_ADDR_EXP 14
12952: PUSH
12953: LD_EXP 14
12957: PPUSH
12958: LD_EXP 49
12962: PPUSH
12963: CALL 67162 0 2
12967: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12968: LD_EXP 49
12972: PPUSH
12973: LD_INT 2
12975: PPUSH
12976: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12980: LD_EXP 49
12984: PPUSH
12985: CALL_OW 122
// end ; end ;
12989: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12990: LD_EXP 17
12994: NOT
12995: PUSH
12996: LD_EXP 27
13000: AND
13001: PUSH
13002: LD_EXP 46
13006: PPUSH
13007: CALL_OW 248
13011: PUSH
13012: LD_INT 3
13014: EQUAL
13015: AND
13016: PUSH
13017: LD_EXP 46
13021: PPUSH
13022: LD_INT 119
13024: PPUSH
13025: CALL 20488 0 2
13029: AND
13030: PUSH
13031: LD_EXP 30
13035: NOT
13036: AND
13037: IFFALSE 13336
13039: GO 13041
13041: DISABLE
// begin InGameOn ;
13042: CALL_OW 8
// SetSide ( Heike , 3 ) ;
13046: LD_EXP 46
13050: PPUSH
13051: LD_INT 3
13053: PPUSH
13054: CALL_OW 235
// wait ( 0 0$0.3 ) ;
13058: LD_INT 10
13060: PPUSH
13061: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13065: LD_EXP 46
13069: PPUSH
13070: LD_INT 119
13072: PPUSH
13073: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13077: LD_INT 35
13079: PPUSH
13080: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13084: LD_EXP 46
13088: PPUSH
13089: LD_INT 119
13091: PPUSH
13092: CALL_OW 120
// until IsInUnit ( Heike ) ;
13096: LD_EXP 46
13100: PPUSH
13101: CALL_OW 310
13105: IFFALSE 13077
// wait ( 0 0$1 ) ;
13107: LD_INT 35
13109: PPUSH
13110: CALL_OW 67
// DialogueOn ;
13114: CALL_OW 6
// if Aviradze and Ibrahim then
13118: LD_EXP 56
13122: PUSH
13123: LD_EXP 49
13127: AND
13128: IFFALSE 13144
// Say ( Heike , DH-Captive-a-1 ) else
13130: LD_EXP 46
13134: PPUSH
13135: LD_STRING DH-Captive-a-1
13137: PPUSH
13138: CALL_OW 88
13142: GO 13156
// Say ( Heike , DH-Captive-a-b-1 ) ;
13144: LD_EXP 46
13148: PPUSH
13149: LD_STRING DH-Captive-a-b-1
13151: PPUSH
13152: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
13156: LD_EXP 65
13160: PPUSH
13161: LD_STRING DCom-Captive-a-2
13163: PPUSH
13164: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
13168: LD_EXP 46
13172: PPUSH
13173: LD_STRING DH-Captive-a-3
13175: PPUSH
13176: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
13180: LD_EXP 65
13184: PPUSH
13185: LD_STRING DCom-Captive-a-4
13187: PPUSH
13188: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
13192: LD_EXP 46
13196: PPUSH
13197: LD_STRING DH-Captive-a-5
13199: PPUSH
13200: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13204: LD_EXP 65
13208: PPUSH
13209: CALL_OW 64
// DialogueOff ;
13213: CALL_OW 7
// InGameOff ;
13217: CALL_OW 9
// SetSide ( Heike , 2 ) ;
13221: LD_EXP 46
13225: PPUSH
13226: LD_INT 2
13228: PPUSH
13229: CALL_OW 235
// ComExitBuilding ( Heike ) ;
13233: LD_EXP 46
13237: PPUSH
13238: CALL_OW 122
// if Aviradze then
13242: LD_EXP 56
13246: IFFALSE 13289
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13248: LD_ADDR_EXP 14
13252: PUSH
13253: LD_EXP 14
13257: PPUSH
13258: LD_EXP 56
13262: PPUSH
13263: CALL 67162 0 2
13267: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13268: LD_EXP 56
13272: PPUSH
13273: LD_INT 2
13275: PPUSH
13276: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13280: LD_EXP 56
13284: PPUSH
13285: CALL_OW 122
// end ; if Ibrahim then
13289: LD_EXP 49
13293: IFFALSE 13336
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13295: LD_ADDR_EXP 14
13299: PUSH
13300: LD_EXP 14
13304: PPUSH
13305: LD_EXP 49
13309: PPUSH
13310: CALL 67162 0 2
13314: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13315: LD_EXP 49
13319: PPUSH
13320: LD_INT 2
13322: PPUSH
13323: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13327: LD_EXP 49
13331: PPUSH
13332: CALL_OW 122
// end ; end ;
13336: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
13337: LD_INT 2
13339: PUSH
13340: LD_INT 25
13342: PUSH
13343: LD_INT 32
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PUSH
13350: LD_INT 25
13352: PUSH
13353: LD_INT 34
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: LIST
13364: PPUSH
13365: CALL_OW 69
13369: IFFALSE 13381
13371: GO 13373
13373: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
13374: LD_STRING M1-weapons-out
13376: PPUSH
13377: CALL_OW 604
13381: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
13382: LD_INT 2
13384: PPUSH
13385: LD_EXP 61
13389: PPUSH
13390: CALL_OW 292
13394: PUSH
13395: LD_EXP 46
13399: PPUSH
13400: LD_EXP 61
13404: PPUSH
13405: CALL_OW 296
13409: AND
13410: PUSH
13411: LD_EXP 17
13415: NOT
13416: AND
13417: PUSH
13418: LD_EXP 30
13422: NOT
13423: AND
13424: IFFALSE 14282
13426: GO 13428
13428: DISABLE
13429: LD_INT 0
13431: PPUSH
13432: PPUSH
// begin if contactWithAmerican then
13433: LD_EXP 25
13437: IFFALSE 13534
// begin DialogueOn ;
13439: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13443: LD_EXP 61
13447: PPUSH
13448: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
13452: LD_EXP 46
13456: PPUSH
13457: LD_STRING DH-USsol-1
13459: PPUSH
13460: CALL_OW 88
// SetSide ( Jerry , 2 ) ;
13464: LD_EXP 61
13468: PPUSH
13469: LD_INT 2
13471: PPUSH
13472: CALL_OW 235
// americanSquad := Join ( americanSquad , Jerry ) ;
13476: LD_ADDR_EXP 58
13480: PUSH
13481: LD_EXP 58
13485: PPUSH
13486: LD_EXP 61
13490: PPUSH
13491: CALL 67162 0 2
13495: ST_TO_ADDR
// heikeSquad := Join ( heikeSquad , Mike ) ;
13496: LD_ADDR_EXP 14
13500: PUSH
13501: LD_EXP 14
13505: PPUSH
13506: LD_EXP 48
13510: PPUSH
13511: CALL 67162 0 2
13515: ST_TO_ADDR
// SetTag ( Jerry , tagCaptured ) ;
13516: LD_EXP 61
13520: PPUSH
13521: LD_INT 1
13523: PPUSH
13524: CALL_OW 109
// DialogueOff ;
13528: CALL_OW 7
// exit ;
13532: GO 14282
// end ; DialogueOn ;
13534: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13538: LD_EXP 61
13542: PPUSH
13543: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
13547: LD_EXP 61
13551: PPUSH
13552: LD_STRING DJy-Food-1
13554: PPUSH
13555: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
13559: LD_EXP 46
13563: PPUSH
13564: LD_STRING DH-Food-2
13566: PPUSH
13567: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
13571: LD_EXP 61
13575: PPUSH
13576: LD_STRING DJy-Food-3
13578: PPUSH
13579: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
13583: LD_EXP 61
13587: PPUSH
13588: LD_STRING DJy-Food-4
13590: PPUSH
13591: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
13595: LD_EXP 46
13599: PPUSH
13600: LD_STRING DH-Food-5
13602: PPUSH
13603: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
13607: LD_EXP 61
13611: PPUSH
13612: LD_STRING DJy-Food-6
13614: PPUSH
13615: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
13619: LD_EXP 61
13623: PPUSH
13624: LD_STRING DJy-Food-7
13626: PPUSH
13627: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
13631: LD_EXP 61
13635: PPUSH
13636: LD_STRING DJy-Food-8
13638: PPUSH
13639: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
13643: LD_EXP 46
13647: PPUSH
13648: LD_STRING DH-Food-9
13650: PPUSH
13651: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
13655: LD_EXP 61
13659: PPUSH
13660: LD_STRING DJy-Food-10
13662: PPUSH
13663: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
13667: LD_EXP 46
13671: PPUSH
13672: LD_STRING DH-Food-11
13674: PPUSH
13675: CALL_OW 88
// DialogueOff ;
13679: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13683: LD_STRING M3
13685: PPUSH
13686: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13690: LD_INT 5
13692: PPUSH
13693: LD_INT 215
13695: PPUSH
13696: LD_INT 117
13698: PPUSH
13699: LD_INT 0
13701: PPUSH
13702: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13706: LD_INT 215
13708: PPUSH
13709: LD_INT 118
13711: PPUSH
13712: LD_INT 2
13714: PPUSH
13715: LD_INT 6
13717: NEG
13718: PPUSH
13719: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
13723: LD_INT 215
13725: PPUSH
13726: LD_INT 118
13728: PPUSH
13729: LD_INT 2
13731: PPUSH
13732: CALL_OW 331
// foodDelivered := false ;
13736: LD_ADDR_VAR 0 2
13740: PUSH
13741: LD_INT 0
13743: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13744: LD_INT 35
13746: PPUSH
13747: CALL_OW 67
// if hasMuchin then
13751: LD_EXP 30
13755: IFFALSE 13759
// continue ;
13757: GO 13744
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
13759: LD_ADDR_VAR 0 1
13763: PUSH
13764: LD_EXP 14
13768: PUSH
13769: LD_EXP 46
13773: UNION
13774: PPUSH
13775: LD_INT 91
13777: PUSH
13778: LD_EXP 61
13782: PUSH
13783: LD_INT 6
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 25
13793: PUSH
13794: LD_INT 33
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PPUSH
13805: CALL_OW 72
13809: PUSH
13810: FOR_IN
13811: IFFALSE 14011
// if Carry ( i ) then
13813: LD_VAR 0 1
13817: PPUSH
13818: CALL_OW 281
13822: IFFALSE 14009
// begin DialogueOn ;
13824: CALL_OW 6
// foodDelivered := true ;
13828: LD_ADDR_VAR 0 2
13832: PUSH
13833: LD_INT 1
13835: ST_TO_ADDR
// case i of Heike :
13836: LD_VAR 0 1
13840: PUSH
13841: LD_EXP 46
13845: DOUBLE
13846: EQUAL
13847: IFTRUE 13851
13849: GO 13866
13851: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
13852: LD_EXP 46
13856: PPUSH
13857: LD_STRING DH-Food-12
13859: PPUSH
13860: CALL_OW 88
13864: GO 13992
13866: LD_EXP 51
13870: DOUBLE
13871: EQUAL
13872: IFTRUE 13876
13874: GO 13891
13876: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13877: LD_EXP 51
13881: PPUSH
13882: LD_STRING DK-Food-a-12
13884: PPUSH
13885: CALL_OW 88
13889: GO 13992
13891: LD_EXP 53
13895: DOUBLE
13896: EQUAL
13897: IFTRUE 13901
13899: GO 13916
13901: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13902: LD_EXP 53
13906: PPUSH
13907: LD_STRING DMar-Food-a-12
13909: PPUSH
13910: CALL_OW 88
13914: GO 13992
13916: LD_EXP 47
13920: DOUBLE
13921: EQUAL
13922: IFTRUE 13926
13924: GO 13941
13926: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13927: LD_EXP 47
13931: PPUSH
13932: LD_STRING DG-Food-a-14
13934: PPUSH
13935: CALL_OW 88
13939: GO 13992
13941: LD_EXP 48
13945: DOUBLE
13946: EQUAL
13947: IFTRUE 13951
13949: GO 13966
13951: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13952: LD_EXP 48
13956: PPUSH
13957: LD_STRING DM-Food-a-15
13959: PPUSH
13960: CALL_OW 88
13964: GO 13992
13966: LD_EXP 50
13970: DOUBLE
13971: EQUAL
13972: IFTRUE 13976
13974: GO 13991
13976: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
13977: LD_EXP 50
13981: PPUSH
13982: LD_STRING DKam-Food-a-16
13984: PPUSH
13985: CALL_OW 88
13989: GO 13992
13991: POP
// SetCargo ( i , mat_cans , 0 ) ;
13992: LD_VAR 0 1
13996: PPUSH
13997: LD_INT 1
13999: PPUSH
14000: LD_INT 0
14002: PPUSH
14003: CALL_OW 290
// break ;
14007: GO 14011
// end ;
14009: GO 13810
14011: POP
14012: POP
// until foodDelivered ;
14013: LD_VAR 0 2
14017: IFFALSE 13744
// givenFood := true ;
14019: LD_ADDR_EXP 33
14023: PUSH
14024: LD_INT 1
14026: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
14027: LD_EXP 61
14031: PPUSH
14032: LD_STRING DJy-Food-13
14034: PPUSH
14035: CALL_OW 88
// hasVirus := true ;
14039: LD_ADDR_EXP 31
14043: PUSH
14044: LD_INT 1
14046: ST_TO_ADDR
// if not americanContact then
14047: LD_EXP 10
14051: NOT
14052: IFFALSE 14102
// begin Say ( Heike , DH-Food-14 ) ;
14054: LD_EXP 46
14058: PPUSH
14059: LD_STRING DH-Food-14
14061: PPUSH
14062: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
14066: LD_EXP 61
14070: PPUSH
14071: LD_STRING DJy-Food-15
14073: PPUSH
14074: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
14078: LD_EXP 61
14082: PPUSH
14083: LD_STRING DJy-Food-16
14085: PPUSH
14086: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
14090: LD_EXP 61
14094: PPUSH
14095: LD_STRING DJy-Food-17
14097: PPUSH
14098: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
14102: LD_STRING M3-out
14104: PPUSH
14105: CALL_OW 337
// DialogueOff ;
14109: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
14113: LD_EXP 61
14117: PPUSH
14118: LD_INT 1
14120: PPUSH
14121: LD_INT 10
14123: PPUSH
14124: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
14128: LD_EXP 61
14132: PPUSH
14133: LD_INT 95
14135: PPUSH
14136: LD_INT 17
14138: PPUSH
14139: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14143: LD_INT 35
14145: PPUSH
14146: CALL_OW 67
// if not HasTask ( Jerry ) then
14150: LD_EXP 61
14154: PPUSH
14155: CALL_OW 314
14159: NOT
14160: IFFALSE 14177
// ComMoveXY ( Jerry , 95 , 17 ) ;
14162: LD_EXP 61
14166: PPUSH
14167: LD_INT 95
14169: PPUSH
14170: LD_INT 17
14172: PPUSH
14173: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
14177: LD_EXP 61
14181: PPUSH
14182: LD_INT 95
14184: PPUSH
14185: LD_INT 17
14187: PPUSH
14188: CALL_OW 307
14192: IFFALSE 14143
// SetCargo ( Jerry , mat_cans , 0 ) ;
14194: LD_EXP 61
14198: PPUSH
14199: LD_INT 1
14201: PPUSH
14202: LD_INT 0
14204: PPUSH
14205: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
14209: LD_ADDR_EXP 58
14213: PUSH
14214: LD_EXP 58
14218: PPUSH
14219: LD_EXP 61
14223: PPUSH
14224: CALL 67162 0 2
14228: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
14229: LD_ADDR_VAR 0 1
14233: PUSH
14234: LD_INT 22
14236: PUSH
14237: LD_INT 4
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 23
14246: PUSH
14247: LD_INT 1
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PPUSH
14258: CALL_OW 69
14262: PUSH
14263: FOR_IN
14264: IFFALSE 14280
// SetLives ( i , 1000 ) ;
14266: LD_VAR 0 1
14270: PPUSH
14271: LD_INT 1000
14273: PPUSH
14274: CALL_OW 234
14278: GO 14263
14280: POP
14281: POP
// end ;
14282: PPOPN 2
14284: END
// every 0 0$2 trigger not hasMuchin and hasExplosions marked gameStartEvent do var un , tmp ;
14285: LD_EXP 30
14289: NOT
14290: PUSH
14291: LD_EXP 6
14295: AND
14296: IFFALSE 14722
14298: GO 14300
14300: DISABLE
14301: LD_INT 0
14303: PPUSH
14304: PPUSH
// begin tmp := [ ] ;
14305: LD_ADDR_VAR 0 2
14309: PUSH
14310: EMPTY
14311: ST_TO_ADDR
// uc_side := 3 ;
14312: LD_ADDR_OWVAR 20
14316: PUSH
14317: LD_INT 3
14319: ST_TO_ADDR
// uc_nation := 3 ;
14320: LD_ADDR_OWVAR 21
14324: PUSH
14325: LD_INT 3
14327: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
14328: LD_INT 1
14330: PPUSH
14331: LD_INT 8
14333: PPUSH
14334: CALL_OW 381
// un := CreateHuman ;
14338: LD_ADDR_VAR 0 1
14342: PUSH
14343: CALL_OW 44
14347: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
14348: LD_VAR 0 1
14352: PPUSH
14353: LD_INT 173
14355: PPUSH
14356: LD_INT 104
14358: PPUSH
14359: LD_INT 0
14361: PPUSH
14362: CALL_OW 48
// tmp := Join ( tmp , un ) ;
14366: LD_ADDR_VAR 0 2
14370: PUSH
14371: LD_VAR 0 2
14375: PPUSH
14376: LD_VAR 0 1
14380: PPUSH
14381: CALL 67162 0 2
14385: ST_TO_ADDR
// un := CreateHuman ;
14386: LD_ADDR_VAR 0 1
14390: PUSH
14391: CALL_OW 44
14395: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
14396: LD_VAR 0 1
14400: PPUSH
14401: LD_INT 73
14403: PPUSH
14404: CALL_OW 52
// tmp := Join ( tmp , un ) ;
14408: LD_ADDR_VAR 0 2
14412: PUSH
14413: LD_VAR 0 2
14417: PPUSH
14418: LD_VAR 0 1
14422: PPUSH
14423: CALL 67162 0 2
14427: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14428: LD_INT 35
14430: PPUSH
14431: CALL_OW 67
// if isAlarm then
14435: LD_EXP 17
14439: IFFALSE 14443
// exit ;
14441: GO 14722
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 12 ;
14443: LD_EXP 51
14447: PPUSH
14448: CALL_OW 255
14452: PUSH
14453: LD_INT 2
14455: EQUAL
14456: PUSH
14457: LD_EXP 51
14461: PPUSH
14462: LD_INT 73
14464: PPUSH
14465: CALL_OW 296
14469: PUSH
14470: LD_INT 12
14472: LESS
14473: AND
14474: IFFALSE 14428
// InGameOn ;
14476: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
14480: LD_INT 73
14482: PPUSH
14483: CALL_OW 250
14487: PPUSH
14488: LD_INT 73
14490: PPUSH
14491: CALL_OW 251
14495: PPUSH
14496: LD_INT 2
14498: PPUSH
14499: LD_INT 9
14501: NEG
14502: PPUSH
14503: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
14507: LD_INT 73
14509: PPUSH
14510: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
14514: LD_EXP 51
14518: PPUSH
14519: LD_INT 73
14521: PPUSH
14522: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
14526: LD_EXP 51
14530: PPUSH
14531: LD_STRING DK-Plastic-1
14533: PPUSH
14534: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
14538: LD_EXP 51
14542: PPUSH
14543: LD_STRING DK-Plastic-2
14545: PPUSH
14546: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
14550: LD_EXP 51
14554: PPUSH
14555: LD_INT 73
14557: PPUSH
14558: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14562: LD_INT 35
14564: PPUSH
14565: CALL_OW 67
// if isAlarm then
14569: LD_EXP 17
14573: IFFALSE 14577
// exit ;
14575: GO 14722
// until GetDistUnits ( Kaia , barExplosion ) < 8 ;
14577: LD_EXP 51
14581: PPUSH
14582: LD_INT 73
14584: PPUSH
14585: CALL_OW 296
14589: PUSH
14590: LD_INT 8
14592: LESS
14593: IFFALSE 14562
// ComHold ( Kaia ) ;
14595: LD_EXP 51
14599: PPUSH
14600: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
14604: LD_VAR 0 2
14608: PUSH
14609: LD_INT 1
14611: ARRAY
14612: PPUSH
14613: LD_STRING DRum-Plastic-3
14615: PPUSH
14616: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
14620: LD_VAR 0 2
14624: PUSH
14625: LD_INT 2
14627: ARRAY
14628: PPUSH
14629: LD_STRING DRum2-Plastic-4
14631: PPUSH
14632: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
14636: LD_VAR 0 2
14640: PUSH
14641: LD_INT 1
14643: ARRAY
14644: PPUSH
14645: LD_STRING DRum-Plastic-5
14647: PPUSH
14648: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14652: LD_VAR 0 2
14656: PUSH
14657: LD_INT 2
14659: ARRAY
14660: PPUSH
14661: LD_STRING DRum2-Plastic-6
14663: PPUSH
14664: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14668: LD_EXP 51
14672: PPUSH
14673: LD_STRING DK-Plastic-7
14675: PPUSH
14676: CALL_OW 88
// InGameOff ;
14680: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14684: LD_INT 73
14686: PPUSH
14687: CALL_OW 250
14691: PPUSH
14692: LD_INT 73
14694: PPUSH
14695: CALL_OW 251
14699: PPUSH
14700: LD_INT 2
14702: PPUSH
14703: CALL_OW 331
// explosionsTakenByRussians := true ;
14707: LD_ADDR_EXP 21
14711: PUSH
14712: LD_INT 1
14714: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
14715: LD_STRING ExplosivesInfo
14717: PPUSH
14718: CALL_OW 97
// end ;
14722: PPOPN 2
14724: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do var class ;
14725: LD_EXP 21
14729: PUSH
14730: LD_EXP 51
14734: PPUSH
14735: CALL_OW 255
14739: PUSH
14740: LD_INT 2
14742: EQUAL
14743: AND
14744: PUSH
14745: LD_EXP 51
14749: PPUSH
14750: LD_INT 61
14752: PPUSH
14753: CALL 20488 0 2
14757: AND
14758: PUSH
14759: LD_EXP 17
14763: NOT
14764: AND
14765: PUSH
14766: LD_EXP 30
14770: NOT
14771: AND
14772: IFFALSE 15055
14774: GO 14776
14776: DISABLE
14777: LD_INT 0
14779: PPUSH
// begin class := GetClass ( Kaia ) ;
14780: LD_ADDR_VAR 0 1
14784: PUSH
14785: LD_EXP 51
14789: PPUSH
14790: CALL_OW 257
14794: ST_TO_ADDR
// if class <> class_prison then
14795: LD_VAR 0 1
14799: PUSH
14800: LD_INT 33
14802: NONEQUAL
14803: IFFALSE 14896
// begin Query ( QKaiaWeapon ) ;
14805: LD_STRING QKaiaWeapon
14807: PPUSH
14808: CALL_OW 97
// SetAreaMapShow ( hideWeaponArea , 1 ) ;
14812: LD_INT 67
14814: PPUSH
14815: LD_INT 1
14817: PPUSH
14818: CALL_OW 424
// CenterNowOnXY ( 192 , 71 ) ;
14822: LD_INT 192
14824: PPUSH
14825: LD_INT 71
14827: PPUSH
14828: CALL_OW 86
// kaiaWeaponHidden := class ;
14832: LD_ADDR_EXP 45
14836: PUSH
14837: LD_VAR 0 1
14841: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14842: LD_INT 35
14844: PPUSH
14845: CALL_OW 67
// until IsInArea ( Kaia , hideWeaponArea ) ;
14849: LD_EXP 51
14853: PPUSH
14854: LD_INT 67
14856: PPUSH
14857: CALL_OW 308
14861: IFFALSE 14842
// SetClass ( Kaia , class_prison ) ;
14863: LD_EXP 51
14867: PPUSH
14868: LD_INT 33
14870: PPUSH
14871: CALL_OW 336
// repeat wait ( 0 0$1 ) ;
14875: LD_INT 35
14877: PPUSH
14878: CALL_OW 67
// until InEntrance ( Kaia , ruFac ) ;
14882: LD_EXP 51
14886: PPUSH
14887: LD_INT 61
14889: PPUSH
14890: CALL 20488 0 2
14894: IFFALSE 14875
// end ; if knowWhereExplosivesAre then
14896: LD_EXP 34
14900: IFFALSE 14904
// exit ;
14902: GO 15055
// InGameOn ;
14904: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
14908: LD_INT 61
14910: PPUSH
14911: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14915: LD_EXP 51
14919: PPUSH
14920: LD_INT 3
14922: PPUSH
14923: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
14927: LD_EXP 51
14931: PPUSH
14932: LD_INT 61
14934: PPUSH
14935: CALL_OW 120
// wait ( 0 0$2 ) ;
14939: LD_INT 70
14941: PPUSH
14942: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14946: LD_EXP 51
14950: PPUSH
14951: LD_STRING DK-Plastic-8
14953: PPUSH
14954: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14958: LD_EXP 67
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: PPUSH
14967: LD_STRING DRuMch-Plastic-9
14969: PPUSH
14970: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14974: LD_EXP 51
14978: PPUSH
14979: LD_STRING DK-Plastic-10
14981: PPUSH
14982: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14986: LD_EXP 67
14990: PUSH
14991: LD_INT 1
14993: ARRAY
14994: PPUSH
14995: LD_STRING DRuMch-Plastic-a-11
14997: PPUSH
14998: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
15002: LD_EXP 51
15006: PPUSH
15007: LD_STRING DK-Plastic-a-12
15009: PPUSH
15010: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
15014: LD_EXP 67
15018: PUSH
15019: LD_INT 1
15021: ARRAY
15022: PPUSH
15023: LD_STRING DRuMch-Plastic-a-13
15025: PPUSH
15026: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
15030: LD_EXP 51
15034: PPUSH
15035: LD_INT 2
15037: PPUSH
15038: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15042: LD_EXP 51
15046: PPUSH
15047: CALL_OW 122
// InGameOff ;
15051: CALL_OW 9
// end ;
15055: PPOPN 1
15057: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do var class ;
15058: LD_EXP 21
15062: PUSH
15063: LD_EXP 51
15067: PPUSH
15068: CALL_OW 255
15072: PUSH
15073: LD_INT 2
15075: EQUAL
15076: AND
15077: PUSH
15078: LD_EXP 51
15082: PPUSH
15083: LD_INT 196
15085: PPUSH
15086: CALL 20488 0 2
15090: AND
15091: PUSH
15092: LD_EXP 17
15096: NOT
15097: AND
15098: PUSH
15099: LD_EXP 30
15103: NOT
15104: AND
15105: IFFALSE 15563
15107: GO 15109
15109: DISABLE
15110: LD_INT 0
15112: PPUSH
// begin class := GetClass ( Kaia ) ;
15113: LD_ADDR_VAR 0 1
15117: PUSH
15118: LD_EXP 51
15122: PPUSH
15123: CALL_OW 257
15127: ST_TO_ADDR
// if class <> class_prison then
15128: LD_VAR 0 1
15132: PUSH
15133: LD_INT 33
15135: NONEQUAL
15136: IFFALSE 15229
// begin Query ( QKaiaWeapon ) ;
15138: LD_STRING QKaiaWeapon
15140: PPUSH
15141: CALL_OW 97
// SetAreaMapShow ( hideWeaponArea , 1 ) ;
15145: LD_INT 67
15147: PPUSH
15148: LD_INT 1
15150: PPUSH
15151: CALL_OW 424
// CenterNowOnXY ( 192 , 71 ) ;
15155: LD_INT 192
15157: PPUSH
15158: LD_INT 71
15160: PPUSH
15161: CALL_OW 86
// kaiaWeaponHidden := class ;
15165: LD_ADDR_EXP 45
15169: PUSH
15170: LD_VAR 0 1
15174: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15175: LD_INT 35
15177: PPUSH
15178: CALL_OW 67
// until IsInArea ( Kaia , hideWeaponArea ) ;
15182: LD_EXP 51
15186: PPUSH
15187: LD_INT 67
15189: PPUSH
15190: CALL_OW 308
15194: IFFALSE 15175
// SetClass ( Kaia , class_prison ) ;
15196: LD_EXP 51
15200: PPUSH
15201: LD_INT 33
15203: PPUSH
15204: CALL_OW 336
// repeat wait ( 0 0$1 ) ;
15208: LD_INT 35
15210: PPUSH
15211: CALL_OW 67
// until InEntrance ( Kaia , ruWorkshop ) ;
15215: LD_EXP 51
15219: PPUSH
15220: LD_INT 196
15222: PPUSH
15223: CALL 20488 0 2
15227: IFFALSE 15208
// end ; InGameOn ;
15229: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
15233: LD_INT 196
15235: PPUSH
15236: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
15240: LD_EXP 51
15244: PPUSH
15245: LD_INT 3
15247: PPUSH
15248: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
15252: LD_EXP 51
15256: PPUSH
15257: LD_INT 196
15259: PPUSH
15260: CALL_OW 120
// wait ( 0 0$2 ) ;
15264: LD_INT 70
15266: PPUSH
15267: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
15271: LD_EXP 51
15275: PPUSH
15276: LD_STRING DK-Plastic-8
15278: PPUSH
15279: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
15283: LD_EXP 68
15287: PUSH
15288: LD_INT 1
15290: ARRAY
15291: PPUSH
15292: LD_STRING DRuMch-Plastic-9
15294: PPUSH
15295: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
15299: LD_EXP 51
15303: PPUSH
15304: LD_STRING DK-Plastic-10
15306: PPUSH
15307: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
15311: LD_EXP 68
15315: PUSH
15316: LD_INT 1
15318: ARRAY
15319: PPUSH
15320: LD_STRING DRuMch-Plastic-11
15322: PPUSH
15323: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
15327: LD_EXP 51
15331: PPUSH
15332: LD_STRING DK-Plastic-12
15334: PPUSH
15335: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
15339: LD_EXP 51
15343: PPUSH
15344: LD_STRING DK-Plastic-13
15346: PPUSH
15347: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
15351: LD_EXP 68
15355: PUSH
15356: LD_INT 1
15358: ARRAY
15359: PPUSH
15360: LD_STRING DRuMch-Plastic-14
15362: PPUSH
15363: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
15367: LD_EXP 69
15371: PPUSH
15372: LD_INT 167
15374: PPUSH
15375: LD_INT 34
15377: PPUSH
15378: LD_INT 3
15380: PPUSH
15381: LD_INT 0
15383: PPUSH
15384: CALL 69302 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15388: LD_EXP 69
15392: PPUSH
15393: LD_INT 196
15395: PPUSH
15396: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15400: LD_INT 35
15402: PPUSH
15403: CALL_OW 67
// if not HasTask ( Stiopa ) then
15407: LD_EXP 69
15411: PPUSH
15412: CALL_OW 314
15416: NOT
15417: IFFALSE 15431
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15419: LD_EXP 69
15423: PPUSH
15424: LD_INT 196
15426: PPUSH
15427: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
15431: LD_EXP 69
15435: PPUSH
15436: CALL_OW 310
15440: IFFALSE 15400
// Say ( Stiopa , DSpn-Plastic-15 ) ;
15442: LD_EXP 69
15446: PPUSH
15447: LD_STRING DSpn-Plastic-15
15449: PPUSH
15450: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
15454: LD_EXP 70
15458: PPUSH
15459: LD_STRING DLr-Plastic-16
15461: PPUSH
15462: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
15466: LD_EXP 51
15470: PPUSH
15471: LD_STRING DK-Plastic-17
15473: PPUSH
15474: CALL_OW 88
// wait ( 0 0$0.3 ) ;
15478: LD_INT 10
15480: PPUSH
15481: CALL_OW 67
// UnitsBlockingEntrance ( ruWorkshop ) ;
15485: LD_INT 196
15487: PPUSH
15488: CALL 20214 0 1
// SetSide ( Kaia , 2 ) ;
15492: LD_EXP 51
15496: PPUSH
15497: LD_INT 2
15499: PPUSH
15500: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15504: LD_EXP 51
15508: PPUSH
15509: CALL_OW 122
// InGameOff ;
15513: CALL_OW 9
// explosionsTakenByRussians := false ;
15517: LD_ADDR_EXP 21
15521: PUSH
15522: LD_INT 0
15524: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
15525: LD_INT 170
15527: PPUSH
15528: LD_INT 28
15530: PPUSH
15531: LD_INT 2
15533: PPUSH
15534: LD_INT 6
15536: NEG
15537: PPUSH
15538: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
15542: LD_INT 170
15544: PPUSH
15545: LD_INT 28
15547: PPUSH
15548: LD_INT 2
15550: PPUSH
15551: CALL_OW 331
// knowWhereExplosivesAre := true ;
15555: LD_ADDR_EXP 34
15559: PUSH
15560: LD_INT 1
15562: ST_TO_ADDR
// end ;
15563: PPOPN 1
15565: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
15566: LD_EXP 34
15570: PUSH
15571: LD_EXP 51
15575: PPUSH
15576: CALL_OW 255
15580: PUSH
15581: LD_INT 2
15583: EQUAL
15584: AND
15585: PUSH
15586: LD_EXP 51
15590: PPUSH
15591: LD_INT 195
15593: PPUSH
15594: CALL 20488 0 2
15598: AND
15599: PUSH
15600: LD_EXP 17
15604: NOT
15605: AND
15606: PUSH
15607: LD_EXP 30
15611: NOT
15612: AND
15613: IFFALSE 15719
15615: GO 15617
15617: DISABLE
// begin InGameOn ;
15618: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
15622: LD_EXP 51
15626: PPUSH
15627: LD_INT 3
15629: PPUSH
15630: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
15634: LD_EXP 51
15638: PPUSH
15639: LD_INT 195
15641: PPUSH
15642: CALL_OW 120
// wait ( 0 0$1 ) ;
15646: LD_INT 35
15648: PPUSH
15649: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
15653: LD_EXP 51
15657: PPUSH
15658: LD_STRING DK-Plastic-18
15660: PPUSH
15661: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
15665: LD_STRING ExplosivesInfoUsage
15667: PPUSH
15668: CALL_OW 97
// UnitsBlockingEntrance ( ruExpDep ) ;
15672: LD_INT 195
15674: PPUSH
15675: CALL 20214 0 1
// SetSide ( Kaia , 2 ) ;
15679: LD_EXP 51
15683: PPUSH
15684: LD_INT 2
15686: PPUSH
15687: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15691: LD_EXP 51
15695: PPUSH
15696: CALL_OW 122
// InGameOff ;
15700: CALL_OW 9
// hasExplosionCollected := true ;
15704: LD_ADDR_EXP 23
15708: PUSH
15709: LD_INT 1
15711: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
15712: LD_STRING M1-explosive-out
15714: PPUSH
15715: CALL_OW 337
// end ;
15719: END
// every 0 0$2 trigger kaiaWeaponHidden marked gameStartEvent do
15720: LD_EXP 45
15724: IFFALSE 15761
15726: GO 15728
15728: DISABLE
// begin enable ;
15729: ENABLE
// if not kaiaWeaponHidden then
15730: LD_EXP 45
15734: NOT
15735: IFFALSE 15739
// exit ;
15737: GO 15761
// SetClass ( Kaia , kaiaWeaponHidden ) ;
15739: LD_EXP 51
15743: PPUSH
15744: LD_EXP 45
15748: PPUSH
15749: CALL_OW 336
// kaiaWeaponHidden := 0 ;
15753: LD_ADDR_EXP 45
15757: PUSH
15758: LD_INT 0
15760: ST_TO_ADDR
// end ;
15761: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
15762: LD_EXP 23
15766: PUSH
15767: LD_EXP 17
15771: NOT
15772: AND
15773: PUSH
15774: LD_EXP 30
15778: NOT
15779: AND
15780: IFFALSE 15955
15782: GO 15784
15784: DISABLE
15785: LD_INT 0
15787: PPUSH
15788: PPUSH
// begin for i in importantBuildingsList do
15789: LD_ADDR_VAR 0 1
15793: PUSH
15794: LD_EXP 35
15798: PUSH
15799: FOR_IN
15800: IFFALSE 15816
// MarkBuilding ( i , true ) ;
15802: LD_VAR 0 1
15806: PPUSH
15807: LD_INT 1
15809: PPUSH
15810: CALL 20862 0 2
15814: GO 15799
15816: POP
15817: POP
// repeat wait ( 0 0$1 ) ;
15818: LD_INT 35
15820: PPUSH
15821: CALL_OW 67
// for i in importantBuildingsList do
15825: LD_ADDR_VAR 0 1
15829: PUSH
15830: LD_EXP 35
15834: PUSH
15835: FOR_IN
15836: IFFALSE 15946
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
15838: LD_EXP 46
15842: PUSH
15843: LD_EXP 14
15847: UNION
15848: PPUSH
15849: LD_INT 22
15851: PUSH
15852: LD_INT 2
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 21
15861: PUSH
15862: LD_INT 1
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: PUSH
15869: LD_INT 91
15871: PUSH
15872: LD_VAR 0 1
15876: PUSH
15877: LD_INT 6
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: LIST
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: LIST
15889: PPUSH
15890: CALL_OW 72
15894: IFFALSE 15944
// begin CenterNowOnUnits ( i ) ;
15896: LD_VAR 0 1
15900: PPUSH
15901: CALL_OW 87
// PlaceExplosives ( i ) ;
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL 20759 0 1
// MarkBuilding ( i , false ) ;
15914: LD_VAR 0 1
15918: PPUSH
15919: LD_INT 0
15921: PPUSH
15922: CALL 20862 0 2
// importantBuildingsList := importantBuildingsList diff i ;
15926: LD_ADDR_EXP 35
15930: PUSH
15931: LD_EXP 35
15935: PUSH
15936: LD_VAR 0 1
15940: DIFF
15941: ST_TO_ADDR
// continue ;
15942: GO 15835
// end ; end ;
15944: GO 15835
15946: POP
15947: POP
// until not importantBuildingsList ;
15948: LD_EXP 35
15952: NOT
15953: IFFALSE 15818
// end ;
15955: PPOPN 2
15957: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
15958: LD_EXP 14
15962: PPUSH
15963: LD_INT 22
15965: PUSH
15966: LD_INT 2
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 95
15975: PUSH
15976: LD_INT 23
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PPUSH
15987: CALL_OW 72
15991: PUSH
15992: LD_EXP 46
15996: PPUSH
15997: CALL_OW 302
16001: AND
16002: PUSH
16003: LD_EXP 30
16007: NOT
16008: AND
16009: IFFALSE 16037
16011: GO 16013
16013: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
16014: LD_EXP 46
16018: PPUSH
16019: LD_STRING DH-End-1
16021: PPUSH
16022: CALL_OW 88
// if not activeExplosives then
16026: LD_EXP 36
16030: NOT
16031: IFFALSE 16037
// Explode ;
16033: CALL 23632 0 0
// end ;
16037: END
// function SayHEmpty ( ) ; begin
16038: LD_INT 0
16040: PPUSH
// case rand ( 1 , 3 ) of 1 :
16041: LD_INT 1
16043: PPUSH
16044: LD_INT 3
16046: PPUSH
16047: CALL_OW 12
16051: PUSH
16052: LD_INT 1
16054: DOUBLE
16055: EQUAL
16056: IFTRUE 16060
16058: GO 16075
16060: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
16061: LD_EXP 46
16065: PPUSH
16066: LD_STRING DH-Empty-1
16068: PPUSH
16069: CALL_OW 88
16073: GO 16122
16075: LD_INT 2
16077: DOUBLE
16078: EQUAL
16079: IFTRUE 16083
16081: GO 16098
16083: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
16084: LD_EXP 46
16088: PPUSH
16089: LD_STRING DH-Empty-2
16091: PPUSH
16092: CALL_OW 88
16096: GO 16122
16098: LD_INT 3
16100: DOUBLE
16101: EQUAL
16102: IFTRUE 16106
16104: GO 16121
16106: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
16107: LD_EXP 46
16111: PPUSH
16112: LD_STRING DH-Empty-3
16114: PPUSH
16115: CALL_OW 88
16119: GO 16122
16121: POP
// end ;
16122: LD_VAR 0 1
16126: RET
// function SayHVisited ( ) ; begin
16127: LD_INT 0
16129: PPUSH
// case rand ( 1 , 3 ) of 1 :
16130: LD_INT 1
16132: PPUSH
16133: LD_INT 3
16135: PPUSH
16136: CALL_OW 12
16140: PUSH
16141: LD_INT 1
16143: DOUBLE
16144: EQUAL
16145: IFTRUE 16149
16147: GO 16164
16149: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
16150: LD_EXP 46
16154: PPUSH
16155: LD_STRING DH-Visited-1
16157: PPUSH
16158: CALL_OW 88
16162: GO 16211
16164: LD_INT 2
16166: DOUBLE
16167: EQUAL
16168: IFTRUE 16172
16170: GO 16187
16172: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
16173: LD_EXP 46
16177: PPUSH
16178: LD_STRING DH-Visited-2
16180: PPUSH
16181: CALL_OW 88
16185: GO 16211
16187: LD_INT 3
16189: DOUBLE
16190: EQUAL
16191: IFTRUE 16195
16193: GO 16210
16195: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
16196: LD_EXP 46
16200: PPUSH
16201: LD_STRING DH-Visited-3
16203: PPUSH
16204: CALL_OW 88
16208: GO 16211
16210: POP
// end ;
16211: LD_VAR 0 1
16215: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
16216: LD_EXP 17
16220: NOT
16221: PUSH
16222: LD_EXP 15
16226: AND
16227: PUSH
16228: LD_EXP 46
16232: PPUSH
16233: CALL_OW 255
16237: PUSH
16238: LD_INT 2
16240: EQUAL
16241: AND
16242: PUSH
16243: LD_EXP 46
16247: PPUSH
16248: CALL_OW 302
16252: AND
16253: PUSH
16254: LD_EXP 46
16258: PPUSH
16259: CALL_OW 316
16263: AND
16264: PUSH
16265: LD_EXP 30
16269: NOT
16270: AND
16271: IFFALSE 16337
16273: GO 16275
16275: DISABLE
16276: LD_INT 0
16278: PPUSH
// begin enable ;
16279: ENABLE
// for i in entranceAllowedList do
16280: LD_ADDR_VAR 0 1
16284: PUSH
16285: LD_EXP 15
16289: PUSH
16290: FOR_IN
16291: IFFALSE 16335
// if InEntrance ( Heike , i ) then
16293: LD_EXP 46
16297: PPUSH
16298: LD_VAR 0 1
16302: PPUSH
16303: CALL 20488 0 2
16307: IFFALSE 16333
// begin disable ( entranceEvent ) ;
16309: LD_INT 1
16311: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
16312: LD_VAR 0 1
16316: PPUSH
16317: CALL 16340 0 1
// wait ( 0 0$3 ) ;
16321: LD_INT 105
16323: PPUSH
16324: CALL_OW 67
// enable ( entranceEvent ) ;
16328: LD_INT 1
16330: ENABLE_MARKED
// break ;
16331: GO 16335
// end ;
16333: GO 16290
16335: POP
16336: POP
// end ;
16337: PPOPN 1
16339: END
// function HeikeEnterBuilding ( building ) ; var i , tmp , tmp2 ; begin
16340: LD_INT 0
16342: PPUSH
16343: PPUSH
16344: PPUSH
16345: PPUSH
// if not building then
16346: LD_VAR 0 1
16350: NOT
16351: IFFALSE 16355
// exit ;
16353: GO 18980
// if building in entranceVisitedList then
16355: LD_VAR 0 1
16359: PUSH
16360: LD_EXP 16
16364: IN
16365: IFFALSE 16373
// begin SayHVisited ( ) ;
16367: CALL 16127 0 0
// exit ;
16371: GO 18980
// end ; case Query ( EnterBuilding ) of 1 :
16373: LD_STRING EnterBuilding
16375: PPUSH
16376: CALL_OW 97
16380: PUSH
16381: LD_INT 1
16383: DOUBLE
16384: EQUAL
16385: IFTRUE 16389
16387: GO 16392
16389: POP
// ; 2 :
16390: GO 16406
16392: LD_INT 2
16394: DOUBLE
16395: EQUAL
16396: IFTRUE 16400
16398: GO 16405
16400: POP
// exit ; end ;
16401: GO 18980
16403: GO 16406
16405: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
16406: LD_ADDR_EXP 16
16410: PUSH
16411: LD_EXP 16
16415: PPUSH
16416: LD_VAR 0 1
16420: PPUSH
16421: CALL 67162 0 2
16425: ST_TO_ADDR
// InGameOn ;
16426: CALL_OW 8
// SetSide ( Heike , 5 ) ;
16430: LD_EXP 46
16434: PPUSH
16435: LD_INT 5
16437: PPUSH
16438: CALL_OW 235
// SetSide ( building , 5 ) ;
16442: LD_VAR 0 1
16446: PPUSH
16447: LD_INT 5
16449: PPUSH
16450: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
16454: LD_EXP 46
16458: PPUSH
16459: LD_VAR 0 1
16463: PPUSH
16464: CALL_OW 120
// wait ( 0 0$3 ) ;
16468: LD_INT 105
16470: PPUSH
16471: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
16475: LD_ADDR_VAR 0 4
16479: PUSH
16480: LD_INT 165
16482: PUSH
16483: LD_INT 106
16485: PUSH
16486: LD_INT 135
16488: PUSH
16489: LD_INT 162
16491: PUSH
16492: LD_INT 61
16494: PUSH
16495: LD_INT 109
16497: PUSH
16498: LD_INT 169
16500: PUSH
16501: LD_INT 13
16503: PUSH
16504: LD_INT 147
16506: PUSH
16507: LD_INT 137
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: ST_TO_ADDR
// if not building in tmp then
16522: LD_VAR 0 1
16526: PUSH
16527: LD_VAR 0 4
16531: IN
16532: NOT
16533: IFFALSE 16541
// SayHEmpty ( ) else
16535: CALL 16038 0 0
16539: GO 18927
// case building of laundry :
16541: LD_VAR 0 1
16545: PUSH
16546: LD_INT 165
16548: DOUBLE
16549: EQUAL
16550: IFTRUE 16554
16552: GO 16658
16554: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
16555: LD_EXP 26
16559: PUSH
16560: LD_EXP 27
16564: NOT
16565: AND
16566: PUSH
16567: LD_EXP 28
16571: NOT
16572: AND
16573: IFFALSE 16628
// begin case Query ( HeikeInLaundry ) of 1 :
16575: LD_STRING HeikeInLaundry
16577: PPUSH
16578: CALL_OW 97
16582: PUSH
16583: LD_INT 1
16585: DOUBLE
16586: EQUAL
16587: IFTRUE 16591
16589: GO 16598
16591: POP
// SpawnHeikeAsRussian ; 2 :
16592: CALL 1810 0 0
16596: GO 16626
16598: LD_INT 2
16600: DOUBLE
16601: EQUAL
16602: IFTRUE 16606
16604: GO 16625
16606: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
16607: LD_ADDR_EXP 16
16611: PUSH
16612: LD_EXP 16
16616: PUSH
16617: LD_VAR 0 1
16621: DIFF
16622: ST_TO_ADDR
16623: GO 16626
16625: POP
// end else
16626: GO 16656
// begin entranceVisitedList := entranceVisitedList diff building ;
16628: LD_ADDR_EXP 16
16632: PUSH
16633: LD_EXP 16
16637: PUSH
16638: LD_VAR 0 1
16642: DIFF
16643: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16644: LD_EXP 46
16648: PPUSH
16649: LD_STRING DH-Locked
16651: PPUSH
16652: CALL_OW 88
// end ; end ; dougBar :
16656: GO 18927
16658: LD_INT 106
16660: DOUBLE
16661: EQUAL
16662: IFTRUE 16666
16664: GO 17028
16666: POP
// begin if contactWithAmerican and americanContact then
16667: LD_EXP 25
16671: PUSH
16672: LD_EXP 10
16676: AND
16677: IFFALSE 16741
// begin Say ( Heike , DH-Escort-a-1 ) ;
16679: LD_EXP 46
16683: PPUSH
16684: LD_STRING DH-Escort-a-1
16686: PPUSH
16687: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
16691: LD_EXP 60
16695: PPUSH
16696: LD_STRING DCa-Escort-a-2
16698: PPUSH
16699: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
16703: LD_EXP 60
16707: PPUSH
16708: LD_STRING DCa-Escort-a-3
16710: PPUSH
16711: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
16715: LD_EXP 46
16719: PPUSH
16720: LD_STRING DH-Escort-a-4
16722: PPUSH
16723: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
16727: LD_EXP 46
16731: PPUSH
16732: LD_STRING DH-Escort-a-5
16734: PPUSH
16735: CALL_OW 88
// end else
16739: GO 16985
// if contactWithAmerican then
16741: LD_EXP 25
16745: IFFALSE 16785
// begin Say ( Heike , DH-Escort-b-1 ) ;
16747: LD_EXP 46
16751: PPUSH
16752: LD_STRING DH-Escort-b-1
16754: PPUSH
16755: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
16759: LD_EXP 60
16763: PPUSH
16764: LD_STRING DCa-Escort-b-2
16766: PPUSH
16767: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
16771: LD_EXP 60
16775: PPUSH
16776: LD_STRING DCa-Escort-b-3
16778: PPUSH
16779: CALL_OW 88
// end else
16783: GO 16985
// begin Say ( Doug , DCa-Deal-a-1 ) ;
16785: LD_EXP 60
16789: PPUSH
16790: LD_STRING DCa-Deal-a-1
16792: PPUSH
16793: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
16797: LD_EXP 60
16801: PPUSH
16802: LD_STRING DCa-Deal-a-2
16804: PPUSH
16805: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
16809: LD_EXP 46
16813: PPUSH
16814: LD_STRING DH-Deal-a-3
16816: PPUSH
16817: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
16821: LD_EXP 60
16825: PPUSH
16826: LD_STRING DCa-Deal-a-4
16828: PPUSH
16829: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
16833: LD_EXP 46
16837: PPUSH
16838: LD_STRING DH-Deal-a-5
16840: PPUSH
16841: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
16845: LD_EXP 60
16849: PPUSH
16850: LD_STRING DCa-Deal-a-6
16852: PPUSH
16853: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
16857: LD_EXP 60
16861: PPUSH
16862: LD_STRING DCa-Deal-a-7
16864: PPUSH
16865: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
16869: LD_EXP 60
16873: PPUSH
16874: LD_STRING DCa-Deal-a-8
16876: PPUSH
16877: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
16881: LD_EXP 60
16885: PPUSH
16886: LD_STRING DCa-Deal-a-9
16888: PPUSH
16889: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
16893: LD_EXP 60
16897: PPUSH
16898: LD_STRING DCa-Deal-a-10
16900: PPUSH
16901: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
16905: LD_EXP 60
16909: PPUSH
16910: LD_STRING DCa-Deal-a-11
16912: PPUSH
16913: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16917: LD_INT 10
16919: PPUSH
16920: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
16924: LD_EXP 60
16928: PPUSH
16929: LD_STRING DCa-Deal-a-12
16931: PPUSH
16932: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
16936: LD_EXP 46
16940: PPUSH
16941: LD_STRING DH-Deal-a-13
16943: PPUSH
16944: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
16948: LD_EXP 46
16952: PPUSH
16953: LD_STRING DH-Deal-a-14
16955: PPUSH
16956: CALL_OW 88
// contactWithAmerican := true ;
16960: LD_ADDR_EXP 25
16964: PUSH
16965: LD_INT 1
16967: ST_TO_ADDR
// SaveVariable ( 1 , 08_DealWithDoug ) ;
16968: LD_INT 1
16970: PPUSH
16971: LD_STRING 08_DealWithDoug
16973: PPUSH
16974: CALL_OW 39
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
16978: LD_STRING M1-american-out
16980: PPUSH
16981: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
16985: LD_EXP 60
16989: PPUSH
16990: LD_INT 2
16992: PPUSH
16993: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
16997: LD_ADDR_EXP 14
17001: PUSH
17002: LD_EXP 14
17006: PPUSH
17007: LD_EXP 60
17011: PPUSH
17012: CALL 67162 0 2
17016: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
17017: LD_EXP 60
17021: PPUSH
17022: CALL_OW 122
// end ; usLab :
17026: GO 18927
17028: LD_INT 135
17030: DOUBLE
17031: EQUAL
17032: IFTRUE 17036
17034: GO 17355
17036: POP
// begin if hasSniperRifle then
17037: LD_EXP 11
17041: IFFALSE 17353
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
17043: LD_EXP 51
17047: PPUSH
17048: CALL_OW 302
17052: PUSH
17053: LD_EXP 51
17057: PUSH
17058: LD_EXP 14
17062: IN
17063: AND
17064: PUSH
17065: LD_EXP 51
17069: PPUSH
17070: CALL_OW 255
17074: PUSH
17075: LD_INT 2
17077: EQUAL
17078: AND
17079: IFFALSE 17327
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
17081: LD_EXP 46
17085: PPUSH
17086: LD_EXP 51
17090: PPUSH
17091: CALL_OW 296
17095: PUSH
17096: LD_INT 10
17098: GREATER
17099: IFFALSE 17124
// begin Query ( KaiaDistance ) ;
17101: LD_STRING KaiaDistance
17103: PPUSH
17104: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
17108: LD_ADDR_EXP 16
17112: PUSH
17113: LD_EXP 16
17117: PUSH
17118: LD_INT 135
17120: DIFF
17121: ST_TO_ADDR
// end else
17122: GO 17325
// begin SetSide ( Kaia , 5 ) ;
17124: LD_EXP 51
17128: PPUSH
17129: LD_INT 5
17131: PPUSH
17132: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
17136: LD_EXP 51
17140: PPUSH
17141: LD_INT 135
17143: PPUSH
17144: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17148: LD_INT 35
17150: PPUSH
17151: CALL_OW 67
// until IsInUnit ( Kaia ) ;
17155: LD_EXP 51
17159: PPUSH
17160: CALL_OW 310
17164: IFFALSE 17148
// Say ( Kaia , DK-Sniper-1 ) ;
17166: LD_EXP 51
17170: PPUSH
17171: LD_STRING DK-Sniper-1
17173: PPUSH
17174: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
17178: LD_EXP 51
17182: PPUSH
17183: CALL_OW 257
17187: PUSH
17188: LD_INT 34
17190: EQUAL
17191: PUSH
17192: LD_EXP 48
17196: PUSH
17197: LD_EXP 14
17201: IN
17202: AND
17203: PUSH
17204: LD_EXP 48
17208: PPUSH
17209: CALL_OW 302
17213: AND
17214: IFFALSE 17245
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
17216: LD_EXP 51
17220: PPUSH
17221: LD_STRING DK-Sniper-a-2
17223: PPUSH
17224: CALL_OW 88
// giveSniperRifleToMike := true ;
17228: LD_ADDR_EXP 42
17232: PUSH
17233: LD_INT 1
17235: ST_TO_ADDR
// Query ( QSniperMike ) ;
17236: LD_STRING QSniperMike
17238: PPUSH
17239: CALL_OW 97
// end else
17243: GO 17304
// begin Say ( Kaia , DK-Sniper-2 ) ;
17245: LD_EXP 51
17249: PPUSH
17250: LD_STRING DK-Sniper-2
17252: PPUSH
17253: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
17257: LD_EXP 51
17261: PPUSH
17262: LD_INT 32
17264: PPUSH
17265: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
17269: LD_EXP 53
17273: PPUSH
17274: CALL_OW 302
17278: PUSH
17279: LD_EXP 53
17283: PUSH
17284: LD_EXP 14
17288: IN
17289: AND
17290: IFFALSE 17304
// Say ( Markov , DMar-Sniper-3 ) ;
17292: LD_EXP 53
17296: PPUSH
17297: LD_STRING DMar-Sniper-3
17299: PPUSH
17300: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
17304: LD_EXP 51
17308: PPUSH
17309: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
17313: LD_EXP 51
17317: PPUSH
17318: LD_INT 2
17320: PPUSH
17321: CALL_OW 235
// end ; end else
17325: GO 17353
// begin entranceVisitedList := entranceVisitedList diff usLab ;
17327: LD_ADDR_EXP 16
17331: PUSH
17332: LD_EXP 16
17336: PUSH
17337: LD_INT 135
17339: DIFF
17340: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
17341: LD_EXP 46
17345: PPUSH
17346: LD_STRING DH-Locked
17348: PPUSH
17349: CALL_OW 88
// end ; end ; end ; drugsLab :
17353: GO 18927
17355: LD_INT 162
17357: DOUBLE
17358: EQUAL
17359: IFTRUE 17363
17361: GO 17496
17363: POP
// begin if hasStimDrugs then
17364: LD_EXP 9
17368: IFFALSE 17482
// begin wait ( 0 0$1 ) ;
17370: LD_INT 35
17372: PPUSH
17373: CALL_OW 67
// if not hasStimDrugsCollected then
17377: LD_EXP 24
17381: NOT
17382: IFFALSE 17424
// begin Say ( Heike , DH-Lab-1 ) ;
17384: LD_EXP 46
17388: PPUSH
17389: LD_STRING DH-Lab-1
17391: PPUSH
17392: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
17396: LD_INT 5
17398: PPUSH
17399: LD_INT 2
17401: PPUSH
17402: LD_INT 2
17404: PPUSH
17405: CALL_OW 322
// hasStimDrugsCollected := true ;
17409: LD_ADDR_EXP 24
17413: PUSH
17414: LD_INT 1
17416: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
17417: LD_STRING M1-drugs-out
17419: PPUSH
17420: CALL_OW 604
// end ; if not hasExplosionCollected then
17424: LD_EXP 23
17428: NOT
17429: IFFALSE 17447
// entranceVisitedList := entranceVisitedList diff drugsLab else
17431: LD_ADDR_EXP 16
17435: PUSH
17436: LD_EXP 16
17440: PUSH
17441: LD_INT 162
17443: DIFF
17444: ST_TO_ADDR
17445: GO 17480
// begin wait ( 0 0$3 ) ;
17447: LD_INT 105
17449: PPUSH
17450: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
17454: LD_EXP 46
17458: PPUSH
17459: LD_STRING DH-Lab-2
17461: PPUSH
17462: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
17466: LD_STRING M1-drugsLab-out
17468: PPUSH
17469: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
17473: LD_INT 162
17475: PPUSH
17476: CALL 20759 0 1
// end ; end else
17480: GO 17494
// Say ( Heike , DH-Locked ) ;
17482: LD_EXP 46
17486: PPUSH
17487: LD_STRING DH-Locked
17489: PPUSH
17490: CALL_OW 88
// end ; ruFac :
17494: GO 18927
17496: LD_INT 61
17498: DOUBLE
17499: EQUAL
17500: IFTRUE 17504
17502: GO 17614
17504: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
17505: LD_EXP 53
17509: PPUSH
17510: CALL_OW 302
17514: PUSH
17515: LD_EXP 53
17519: PUSH
17520: LD_EXP 14
17524: IN
17525: NOT
17526: AND
17527: IFFALSE 17608
// begin Say ( Heike , DH-Krastyo-1 ) ;
17529: LD_EXP 46
17533: PPUSH
17534: LD_STRING DH-Krastyo-1
17536: PPUSH
17537: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
17541: LD_EXP 53
17545: PPUSH
17546: LD_STRING DMar-Krastyo-2
17548: PPUSH
17549: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
17553: LD_EXP 53
17557: PPUSH
17558: LD_STRING DMar-Krastyo-3
17560: PPUSH
17561: CALL_OW 88
// SetSide ( Markov , 2 ) ;
17565: LD_EXP 53
17569: PPUSH
17570: LD_INT 2
17572: PPUSH
17573: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
17577: LD_ADDR_EXP 14
17581: PUSH
17582: LD_EXP 14
17586: PPUSH
17587: LD_EXP 53
17591: PPUSH
17592: CALL 67162 0 2
17596: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
17597: LD_EXP 53
17601: PPUSH
17602: CALL_OW 122
// end else
17606: GO 17612
// SayHEmpty ( ) ;
17608: CALL 16038 0 0
// end ; ruBarKam :
17612: GO 18927
17614: LD_INT 109
17616: DOUBLE
17617: EQUAL
17618: IFTRUE 17622
17620: GO 17769
17622: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
17623: LD_EXP 50
17627: PPUSH
17628: CALL_OW 302
17632: PUSH
17633: LD_EXP 50
17637: PUSH
17638: LD_EXP 14
17642: IN
17643: NOT
17644: AND
17645: IFFALSE 17763
// begin Say ( Heike , DH-Kamil-1 ) ;
17647: LD_EXP 46
17651: PPUSH
17652: LD_STRING DH-Kamil-1
17654: PPUSH
17655: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
17659: LD_EXP 50
17663: PPUSH
17664: LD_STRING DKam-Kamil-2
17666: PPUSH
17667: CALL_OW 88
// if IsOk ( Sophia ) then
17671: LD_EXP 52
17675: PPUSH
17676: CALL_OW 302
17680: IFFALSE 17720
// if Sophia in heikeSquad then
17682: LD_EXP 52
17686: PUSH
17687: LD_EXP 14
17691: IN
17692: IFFALSE 17708
// Say ( Kamil , DKam-Kamil-a-3 ) else
17694: LD_EXP 50
17698: PPUSH
17699: LD_STRING DKam-Kamil-a-3
17701: PPUSH
17702: CALL_OW 88
17706: GO 17720
// Say ( Kamil , DKam-Kamil-3 ) ;
17708: LD_EXP 50
17712: PPUSH
17713: LD_STRING DKam-Kamil-3
17715: PPUSH
17716: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
17720: LD_EXP 50
17724: PPUSH
17725: LD_INT 2
17727: PPUSH
17728: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
17732: LD_ADDR_EXP 14
17736: PUSH
17737: LD_EXP 14
17741: PPUSH
17742: LD_EXP 50
17746: PPUSH
17747: CALL 67162 0 2
17751: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
17752: LD_EXP 50
17756: PPUSH
17757: CALL_OW 122
// end else
17761: GO 17767
// SayHEmpty ( ) ;
17763: CALL 16038 0 0
// end ; ruOutpost1 :
17767: GO 18927
17769: LD_INT 169
17771: DOUBLE
17772: EQUAL
17773: IFTRUE 17777
17775: GO 18014
17777: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
17778: LD_EXP 55
17782: PPUSH
17783: CALL_OW 302
17787: PUSH
17788: LD_EXP 55
17792: PUSH
17793: LD_EXP 14
17797: IN
17798: NOT
17799: AND
17800: IFFALSE 18008
// begin if hasMethanol then
17802: LD_EXP 13
17806: IFFALSE 17937
// begin Say ( Heike , DH-Kurt-1 ) ;
17808: LD_EXP 46
17812: PPUSH
17813: LD_STRING DH-Kurt-1
17815: PPUSH
17816: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17820: LD_EXP 55
17824: PPUSH
17825: LD_STRING DKs-Kurt-2
17827: PPUSH
17828: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
17832: LD_EXP 47
17836: PPUSH
17837: LD_INT 169
17839: PPUSH
17840: CALL_OW 296
17844: PUSH
17845: LD_INT 10
17847: LESS
17848: PUSH
17849: LD_EXP 47
17853: PUSH
17854: LD_EXP 14
17858: IN
17859: AND
17860: IFFALSE 17935
// begin ComMoveXY ( Givi , 100 , 37 ) ;
17862: LD_EXP 47
17866: PPUSH
17867: LD_INT 100
17869: PPUSH
17870: LD_INT 37
17872: PPUSH
17873: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
17877: LD_EXP 47
17881: PPUSH
17882: LD_INT 169
17884: PPUSH
17885: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
17889: LD_INT 35
17891: PPUSH
17892: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
17896: LD_EXP 47
17900: PPUSH
17901: LD_INT 169
17903: PPUSH
17904: CALL_OW 296
17908: PUSH
17909: LD_INT 7
17911: LESS
17912: IFFALSE 17889
// Say ( Givi , DG-Kurt-3 ) ;
17914: LD_EXP 47
17918: PPUSH
17919: LD_STRING DG-Kurt-3
17921: PPUSH
17922: CALL_OW 88
// ComStop ( Givi ) ;
17926: LD_EXP 47
17930: PPUSH
17931: CALL_OW 141
// end ; end else
17935: GO 17965
// begin Say ( Heike , DH-Kurt-1 ) ;
17937: LD_EXP 46
17941: PPUSH
17942: LD_STRING DH-Kurt-1
17944: PPUSH
17945: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17949: LD_EXP 55
17953: PPUSH
17954: LD_STRING DKs-Kurt-2
17956: PPUSH
17957: CALL_OW 88
// SpawnAdditionalRuGuards ;
17961: CALL 3647 0 0
// end ; SetSide ( Kurt , 2 ) ;
17965: LD_EXP 55
17969: PPUSH
17970: LD_INT 2
17972: PPUSH
17973: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
17977: LD_ADDR_EXP 14
17981: PUSH
17982: LD_EXP 14
17986: PPUSH
17987: LD_EXP 55
17991: PPUSH
17992: CALL 67162 0 2
17996: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
17997: LD_EXP 55
18001: PPUSH
18002: CALL_OW 122
// end else
18006: GO 18012
// SayHEmpty ( ) ;
18008: CALL 16038 0 0
// end ; ruOutpostBar :
18012: GO 18927
18014: LD_INT 13
18016: DOUBLE
18017: EQUAL
18018: IFTRUE 18022
18020: GO 18068
18022: POP
// begin if not hasGuardPatrolPlan then
18023: LD_EXP 18
18027: NOT
18028: IFFALSE 18062
// begin Say ( Heike , DH-PatrolPlan ) ;
18030: LD_EXP 46
18034: PPUSH
18035: LD_STRING DH-PatrolPlan
18037: PPUSH
18038: CALL_OW 88
// hasGuardPatrolPlan := true ;
18042: LD_ADDR_EXP 18
18046: PUSH
18047: LD_INT 1
18049: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
18050: LD_INT 6
18052: PPUSH
18053: LD_INT 2
18055: PPUSH
18056: CALL_OW 343
// end else
18060: GO 18066
// SayHEmpty ( ) ;
18062: CALL 16038 0 0
// end ; ruKaiaBar :
18066: GO 18927
18068: LD_INT 147
18070: DOUBLE
18071: EQUAL
18072: IFTRUE 18076
18074: GO 18223
18076: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
18077: LD_EXP 51
18081: PPUSH
18082: CALL_OW 302
18086: PUSH
18087: LD_EXP 51
18091: PUSH
18092: LD_EXP 14
18096: IN
18097: NOT
18098: AND
18099: IFFALSE 18221
// begin Say ( Heike , DH-Kaia-1 ) ;
18101: LD_EXP 46
18105: PPUSH
18106: LD_STRING DH-Kaia-1
18108: PPUSH
18109: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
18113: LD_EXP 51
18117: PPUSH
18118: LD_STRING DK-Kaia-2
18120: PPUSH
18121: CALL_OW 88
// if hasSniperRifle then
18125: LD_EXP 11
18129: IFFALSE 18180
// begin if IsOk ( Markov ) then
18131: LD_EXP 53
18135: PPUSH
18136: CALL_OW 302
18140: IFFALSE 18156
// Say ( Kaia , DK-Kaia-3 ) else
18142: LD_EXP 51
18146: PPUSH
18147: LD_STRING DK-Kaia-3
18149: PPUSH
18150: CALL_OW 88
18154: GO 18168
// Say ( Kaia , DK-Kaia-a-3 ) ;
18156: LD_EXP 51
18160: PPUSH
18161: LD_STRING DK-Kaia-a-3
18163: PPUSH
18164: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
18168: LD_EXP 46
18172: PPUSH
18173: LD_STRING DH-Kaia-4
18175: PPUSH
18176: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
18180: LD_EXP 51
18184: PPUSH
18185: LD_INT 2
18187: PPUSH
18188: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
18192: LD_ADDR_EXP 14
18196: PUSH
18197: LD_EXP 14
18201: PPUSH
18202: LD_EXP 51
18206: PPUSH
18207: CALL 67162 0 2
18211: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
18212: LD_EXP 51
18216: PPUSH
18217: CALL_OW 122
// end ; end ; ruWeaponsBar :
18221: GO 18927
18223: LD_INT 137
18225: DOUBLE
18226: EQUAL
18227: IFTRUE 18231
18229: GO 18926
18231: POP
// begin if hasWeapons then
18232: LD_EXP 19
18236: IFFALSE 18912
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
18238: LD_ADDR_EXP 16
18242: PUSH
18243: LD_EXP 16
18247: PUSH
18248: LD_INT 137
18250: DIFF
18251: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
18252: LD_ADDR_VAR 0 4
18256: PUSH
18257: LD_EXP 14
18261: PPUSH
18262: LD_INT 91
18264: PUSH
18265: LD_EXP 46
18269: PUSH
18270: LD_INT 8
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: LIST
18277: PPUSH
18278: CALL_OW 72
18282: ST_TO_ADDR
// if not heikeSquad or not tmp then
18283: LD_EXP 14
18287: NOT
18288: PUSH
18289: LD_VAR 0 4
18293: NOT
18294: OR
18295: IFFALSE 18311
// Say ( Heike , DH-Weapons-Alone ) else
18297: LD_EXP 46
18301: PPUSH
18302: LD_STRING DH-Weapons-Alone
18304: PPUSH
18305: CALL_OW 88
18309: GO 18910
// begin if not firstArmouryDialog then
18311: LD_EXP 39
18315: NOT
18316: IFFALSE 18375
// begin Say ( Heike , DH-Weapons-1 ) ;
18318: LD_EXP 46
18322: PPUSH
18323: LD_STRING DH-Weapons-1
18325: PPUSH
18326: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
18330: LD_EXP 46
18334: PPUSH
18335: LD_STRING DH-Weapons-2
18337: PPUSH
18338: CALL_OW 88
// Query ( Weapons ) ;
18342: LD_STRING Weapons
18344: PPUSH
18345: CALL_OW 97
// SetAreaMapShow ( weaponariesArea , 1 ) ;
18349: LD_INT 65
18351: PPUSH
18352: LD_INT 1
18354: PPUSH
18355: CALL_OW 424
// canEquipWeapons := true ;
18359: LD_ADDR_EXP 41
18363: PUSH
18364: LD_INT 1
18366: ST_TO_ADDR
// firstArmouryDialog := true ;
18367: LD_ADDR_EXP 39
18371: PUSH
18372: LD_INT 1
18374: ST_TO_ADDR
// end ; if hasRevolver and Kaia in tmp and GetClass ( Kaia ) <> class_revolver then
18375: LD_EXP 8
18379: PUSH
18380: LD_EXP 51
18384: PUSH
18385: LD_VAR 0 4
18389: IN
18390: AND
18391: PUSH
18392: LD_EXP 51
18396: PPUSH
18397: CALL_OW 257
18401: PUSH
18402: LD_INT 34
18404: NONEQUAL
18405: AND
18406: IFFALSE 18552
// begin SetSide ( Kaia , 5 ) ;
18408: LD_EXP 51
18412: PPUSH
18413: LD_INT 5
18415: PPUSH
18416: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
18420: LD_EXP 51
18424: PPUSH
18425: LD_INT 137
18427: PPUSH
18428: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18432: LD_INT 35
18434: PPUSH
18435: CALL_OW 67
// until IsInUnit ( Kaia ) ;
18439: LD_EXP 51
18443: PPUSH
18444: CALL_OW 310
18448: IFFALSE 18432
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
18450: LD_EXP 46
18454: PPUSH
18455: LD_STRING DH-Kaia-Revolver-2
18457: PPUSH
18458: CALL_OW 88
// SetClassKaiaRevolver ;
18462: CALL 1769 0 0
// hasRevolver := false ;
18466: LD_ADDR_EXP 8
18470: PUSH
18471: LD_INT 0
18473: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
18474: LD_EXP 51
18478: PPUSH
18479: LD_INT 2
18481: PPUSH
18482: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
18486: LD_EXP 51
18490: PPUSH
18491: CALL_OW 122
// if GetClass ( Kaia ) = class_hunter and Mike in heikeSquad and GetSide ( Mike ) = 2 then
18495: LD_EXP 51
18499: PPUSH
18500: CALL_OW 257
18504: PUSH
18505: LD_INT 32
18507: EQUAL
18508: PUSH
18509: LD_EXP 48
18513: PUSH
18514: LD_EXP 14
18518: IN
18519: AND
18520: PUSH
18521: LD_EXP 48
18525: PPUSH
18526: CALL_OW 255
18530: PUSH
18531: LD_INT 2
18533: EQUAL
18534: AND
18535: IFFALSE 18552
// begin giveSniperRifleToMike := true ;
18537: LD_ADDR_EXP 42
18541: PUSH
18542: LD_INT 1
18544: ST_TO_ADDR
// Query ( QSniperMike ) ;
18545: LD_STRING QSniperMike
18547: PPUSH
18548: CALL_OW 97
// end ; end ; if Givi in tmp and GetClass ( Givi ) = class_prison then
18552: LD_EXP 47
18556: PUSH
18557: LD_VAR 0 4
18561: IN
18562: PUSH
18563: LD_EXP 47
18567: PPUSH
18568: CALL_OW 257
18572: PUSH
18573: LD_INT 33
18575: EQUAL
18576: AND
18577: IFFALSE 18718
// begin SetSide ( Givi , 5 ) ;
18579: LD_EXP 47
18583: PPUSH
18584: LD_INT 5
18586: PPUSH
18587: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
18591: LD_EXP 47
18595: PPUSH
18596: LD_INT 137
18598: PPUSH
18599: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18603: LD_INT 35
18605: PPUSH
18606: CALL_OW 67
// until IsInUnit ( Givi ) ;
18610: LD_EXP 47
18614: PPUSH
18615: CALL_OW 310
18619: IFFALSE 18603
// Say ( Givi , DG-Weapons-3 ) ;
18621: LD_EXP 47
18625: PPUSH
18626: LD_STRING DG-Weapons-3
18628: PPUSH
18629: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
18633: LD_EXP 46
18637: PPUSH
18638: LD_STRING DH-Weapons-4
18640: PPUSH
18641: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
18645: LD_EXP 47
18649: PPUSH
18650: LD_STRING DG-Weapons-5
18652: PPUSH
18653: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
18657: LD_EXP 47
18661: PPUSH
18662: LD_INT 11
18664: PPUSH
18665: CALL_OW 336
// ComExitBuilding ( Givi ) ;
18669: LD_EXP 47
18673: PPUSH
18674: CALL_OW 122
// SetSide ( Givi , 2 ) ;
18678: LD_EXP 47
18682: PPUSH
18683: LD_INT 2
18685: PPUSH
18686: CALL_OW 235
// if hasRevolver then
18690: LD_EXP 8
18694: IFFALSE 18716
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18696: LD_EXP 46
18700: PPUSH
18701: LD_STRING DH-Kaia-Revolver-1
18703: PPUSH
18704: CALL_OW 88
// heikeHasRevolver := true ;
18708: LD_ADDR_EXP 20
18712: PUSH
18713: LD_INT 1
18715: ST_TO_ADDR
// end ; end else
18716: GO 18910
// if Kamil in tmp and GetClass ( Kamil ) = class_prison then
18718: LD_EXP 50
18722: PUSH
18723: LD_VAR 0 4
18727: IN
18728: PUSH
18729: LD_EXP 50
18733: PPUSH
18734: CALL_OW 257
18738: PUSH
18739: LD_INT 33
18741: EQUAL
18742: AND
18743: IFFALSE 18872
// begin SetSide ( Kamil , 5 ) ;
18745: LD_EXP 50
18749: PPUSH
18750: LD_INT 5
18752: PPUSH
18753: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
18757: LD_EXP 50
18761: PPUSH
18762: LD_INT 137
18764: PPUSH
18765: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18769: LD_INT 35
18771: PPUSH
18772: CALL_OW 67
// until IsInUnit ( Kamil ) ;
18776: LD_EXP 50
18780: PPUSH
18781: CALL_OW 310
18785: IFFALSE 18769
// Say ( Kamil , DKam-Weapons-a-3 ) ;
18787: LD_EXP 50
18791: PPUSH
18792: LD_STRING DKam-Weapons-a-3
18794: PPUSH
18795: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
18799: LD_EXP 46
18803: PPUSH
18804: LD_STRING DH-Weapons-a-4
18806: PPUSH
18807: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
18811: LD_EXP 50
18815: PPUSH
18816: LD_INT 11
18818: PPUSH
18819: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
18823: LD_EXP 50
18827: PPUSH
18828: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
18832: LD_EXP 50
18836: PPUSH
18837: LD_INT 2
18839: PPUSH
18840: CALL_OW 235
// if hasRevolver then
18844: LD_EXP 8
18848: IFFALSE 18870
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18850: LD_EXP 46
18854: PPUSH
18855: LD_STRING DH-Kaia-Revolver-1
18857: PPUSH
18858: CALL_OW 88
// heikeHasRevolver := true ;
18862: LD_ADDR_EXP 20
18866: PUSH
18867: LD_INT 1
18869: ST_TO_ADDR
// end ; end else
18870: GO 18910
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
18872: LD_EXP 46
18876: PPUSH
18877: LD_STRING DH-Weapons-Alone-2
18879: PPUSH
18880: CALL_OW 88
// if hasRevolver then
18884: LD_EXP 8
18888: IFFALSE 18910
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
18890: LD_EXP 46
18894: PPUSH
18895: LD_STRING DH-Kaia-Revolver-1a
18897: PPUSH
18898: CALL_OW 88
// heikeHasRevolver := true ;
18902: LD_ADDR_EXP 20
18906: PUSH
18907: LD_INT 1
18909: ST_TO_ADDR
// end ; end ; end ; end else
18910: GO 18924
// Say ( Heike , DH-Locked ) ;
18912: LD_EXP 46
18916: PPUSH
18917: LD_STRING DH-Locked
18919: PPUSH
18920: CALL_OW 88
// end ; end ;
18924: GO 18927
18926: POP
// SetSide ( building , 3 ) ;
18927: LD_VAR 0 1
18931: PPUSH
18932: LD_INT 3
18934: PPUSH
18935: CALL_OW 235
// UnitsBlockingEntrance ( building ) ;
18939: LD_VAR 0 1
18943: PPUSH
18944: CALL 20214 0 1
// wait ( 0 0$0.3 ) ;
18948: LD_INT 10
18950: PPUSH
18951: CALL_OW 67
// ComExitBuilding ( Heike ) ;
18955: LD_EXP 46
18959: PPUSH
18960: CALL_OW 122
// SetSide ( Heike , 2 ) ;
18964: LD_EXP 46
18968: PPUSH
18969: LD_INT 2
18971: PPUSH
18972: CALL_OW 235
// InGameOff ;
18976: CALL_OW 9
// end ;
18980: LD_VAR 0 2
18984: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
18985: LD_EXP 30
18989: NOT
18990: PUSH
18991: LD_EXP 17
18995: NOT
18996: AND
18997: PUSH
18998: LD_INT 22
19000: PUSH
19001: LD_INT 5
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 21
19010: PUSH
19011: LD_INT 1
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PPUSH
19022: CALL_OW 69
19026: PUSH
19027: LD_INT 0
19029: EQUAL
19030: AND
19031: PUSH
19032: LD_INT 22
19034: PUSH
19035: LD_INT 4
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 21
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PPUSH
19056: CALL_OW 69
19060: PUSH
19061: LD_INT 0
19063: EQUAL
19064: PUSH
19065: LD_EXP 25
19069: AND
19070: PUSH
19071: LD_EXP 25
19075: NOT
19076: OR
19077: AND
19078: IFFALSE 19110
19080: GO 19082
19082: DISABLE
// begin DialogueOn ;
19083: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
19087: LD_EXP 46
19091: PPUSH
19092: LD_STRING DH-Alarm-2
19094: PPUSH
19095: CALL_OW 88
// DialogueOff ;
19099: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
19103: LD_STRING M1-people-out
19105: PPUSH
19106: CALL_OW 337
// end ;
19110: END
// every 0 0$2 trigger GetSide ( Mike ) = 2 and Mike in heikeSquad and GetDistUnits ( Heike , Mike ) < 6 and not hasMuchin and giveSniperRifleToMike marked gameStartEvent do
19111: LD_EXP 48
19115: PPUSH
19116: CALL_OW 255
19120: PUSH
19121: LD_INT 2
19123: EQUAL
19124: PUSH
19125: LD_EXP 48
19129: PUSH
19130: LD_EXP 14
19134: IN
19135: AND
19136: PUSH
19137: LD_EXP 46
19141: PPUSH
19142: LD_EXP 48
19146: PPUSH
19147: CALL_OW 296
19151: PUSH
19152: LD_INT 6
19154: LESS
19155: AND
19156: PUSH
19157: LD_EXP 30
19161: NOT
19162: AND
19163: PUSH
19164: LD_EXP 42
19168: AND
19169: IFFALSE 19186
19171: GO 19173
19173: DISABLE
// SetClass ( Mike , class_hunter ) ;
19174: LD_EXP 48
19178: PPUSH
19179: LD_INT 32
19181: PPUSH
19182: CALL_OW 336
19186: END
// every 0 0$5 trigger canEquipWeapons and weaponsAmount and GetSide ( ruWeaponsBar ) = 3 and UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) and not GetAttitude ( 2 , 3 ) = att_enemy and not GetDistUnits ( ruDisturb , ruWeaponsBar ) < 12 marked gameStartEvent do var i , tmp ;
19187: LD_EXP 41
19191: PUSH
19192: LD_EXP 40
19196: AND
19197: PUSH
19198: LD_INT 137
19200: PPUSH
19201: CALL_OW 255
19205: PUSH
19206: LD_INT 3
19208: EQUAL
19209: AND
19210: PUSH
19211: LD_EXP 14
19215: PPUSH
19216: LD_INT 95
19218: PUSH
19219: LD_INT 65
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 22
19228: PUSH
19229: LD_INT 2
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 25
19238: PUSH
19239: LD_INT 33
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: LIST
19250: PPUSH
19251: CALL_OW 72
19255: AND
19256: PUSH
19257: LD_INT 2
19259: PPUSH
19260: LD_INT 3
19262: PPUSH
19263: CALL_OW 81
19267: PUSH
19268: LD_INT 2
19270: EQUAL
19271: NOT
19272: AND
19273: PUSH
19274: LD_EXP 66
19278: PPUSH
19279: LD_INT 137
19281: PPUSH
19282: CALL_OW 296
19286: PUSH
19287: LD_INT 12
19289: LESS
19290: NOT
19291: AND
19292: IFFALSE 19546
19294: GO 19296
19296: DISABLE
19297: LD_INT 0
19299: PPUSH
19300: PPUSH
// begin enable ;
19301: ENABLE
// tmp := UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) ;
19302: LD_ADDR_VAR 0 2
19306: PUSH
19307: LD_EXP 14
19311: PPUSH
19312: LD_INT 95
19314: PUSH
19315: LD_INT 65
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 22
19324: PUSH
19325: LD_INT 2
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 25
19334: PUSH
19335: LD_INT 33
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: LIST
19346: PPUSH
19347: CALL_OW 72
19351: ST_TO_ADDR
// if Query ( QWeapons ) = 1 then
19352: LD_STRING QWeapons
19354: PPUSH
19355: CALL_OW 97
19359: PUSH
19360: LD_INT 1
19362: EQUAL
19363: IFFALSE 19546
// begin for i in tmp do
19365: LD_ADDR_VAR 0 1
19369: PUSH
19370: LD_VAR 0 2
19374: PUSH
19375: FOR_IN
19376: IFFALSE 19544
// begin if UnitsInside ( ruWeaponsBar ) = 6 then
19378: LD_INT 137
19380: PPUSH
19381: CALL_OW 313
19385: PUSH
19386: LD_INT 6
19388: EQUAL
19389: IFFALSE 19393
// continue ;
19391: GO 19375
// SetSide ( i , 3 ) ;
19393: LD_VAR 0 1
19397: PPUSH
19398: LD_INT 3
19400: PPUSH
19401: CALL_OW 235
// ComEnterUnit ( i , ruWeaponsBar ) ;
19405: LD_VAR 0 1
19409: PPUSH
19410: LD_INT 137
19412: PPUSH
19413: CALL_OW 120
// weaponsAmount := Dec ( weaponsAmount ) ;
19417: LD_ADDR_EXP 40
19421: PUSH
19422: LD_EXP 40
19426: PPUSH
19427: CALL 68545 0 1
19431: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
19432: LD_INT 10
19434: PPUSH
19435: CALL_OW 67
// until IsInUnit ( i ) ;
19439: LD_VAR 0 1
19443: PPUSH
19444: CALL_OW 310
19448: IFFALSE 19432
// SetClass ( i , class_soldier ) ;
19450: LD_VAR 0 1
19454: PPUSH
19455: LD_INT 1
19457: PPUSH
19458: CALL_OW 336
// repeat ComExitBuilding ( i ) ;
19462: LD_VAR 0 1
19466: PPUSH
19467: CALL_OW 122
// wait ( 0 0$1 ) ;
19471: LD_INT 35
19473: PPUSH
19474: CALL_OW 67
// until not IsInUnit ( i ) ;
19478: LD_VAR 0 1
19482: PPUSH
19483: CALL_OW 310
19487: NOT
19488: IFFALSE 19462
// SetSide ( i , 2 ) ;
19490: LD_VAR 0 1
19494: PPUSH
19495: LD_INT 2
19497: PPUSH
19498: CALL_OW 235
// AddComMoveXY ( i , 191 , 126 ) ;
19502: LD_VAR 0 1
19506: PPUSH
19507: LD_INT 191
19509: PPUSH
19510: LD_INT 126
19512: PPUSH
19513: CALL_OW 171
// if weaponsAmount = 0 then
19517: LD_EXP 40
19521: PUSH
19522: LD_INT 0
19524: EQUAL
19525: IFFALSE 19542
// begin SetAreaMapShow ( weaponariesArea , 0 ) ;
19527: LD_INT 65
19529: PPUSH
19530: LD_INT 0
19532: PPUSH
19533: CALL_OW 424
// disable ;
19537: DISABLE
// exit ;
19538: POP
19539: POP
19540: GO 19546
// end ; end ;
19542: GO 19375
19544: POP
19545: POP
// end ; end ; end_of_file
19546: PPOPN 2
19548: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
19549: LD_VAR 0 1
19553: PUSH
19554: LD_INT 3
19556: DOUBLE
19557: EQUAL
19558: IFTRUE 19562
19560: GO 19592
19562: POP
// begin repeat wait ( 0 0$1 ) ;
19563: LD_INT 35
19565: PPUSH
19566: CALL_OW 67
// CenterOnUnits ( Heike ) ;
19570: LD_EXP 46
19574: PPUSH
19575: CALL_OW 85
// until IsDying ( Heike ) ;
19579: LD_EXP 46
19583: PPUSH
19584: CALL_OW 303
19588: IFFALSE 19563
// end ; end ;
19590: GO 19593
19592: POP
// end ;
19593: PPOPN 1
19595: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
19596: LD_OWVAR 59
19600: IFFALSE 19604
// exit ;
19602: GO 19678
// if showPlaceEvent then
19604: LD_INT 4
19606: IFFALSE 19678
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
19608: LD_VAR 0 2
19612: PPUSH
19613: LD_VAR 0 3
19617: PPUSH
19618: LD_INT 2
19620: PPUSH
19621: LD_INT 6
19623: NEG
19624: PPUSH
19625: CALL_OW 330
// CenterOnXY ( x , y ) ;
19629: LD_VAR 0 2
19633: PPUSH
19634: LD_VAR 0 3
19638: PPUSH
19639: CALL_OW 84
// wait ( time ) ;
19643: LD_VAR 0 4
19647: PPUSH
19648: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
19652: LD_EXP 46
19656: PPUSH
19657: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
19661: LD_VAR 0 2
19665: PPUSH
19666: LD_VAR 0 3
19670: PPUSH
19671: LD_INT 2
19673: PPUSH
19674: CALL_OW 331
// end ; end ;
19678: PPOPN 7
19680: END
// on UnitDestroyed ( un ) do var x , y ;
19681: LD_INT 0
19683: PPUSH
19684: PPUSH
// begin if un = Heike and hasNormalScene then
19685: LD_VAR 0 1
19689: PUSH
19690: LD_EXP 46
19694: EQUAL
19695: PUSH
19696: LD_EXP 5
19700: AND
19701: IFFALSE 19725
// if loseCounter then
19703: LD_EXP 32
19707: IFFALSE 19718
// YouLost ( HeikeNoSurrender ) else
19709: LD_STRING HeikeNoSurrender
19711: PPUSH
19712: CALL_OW 104
19716: GO 19725
// YouLost ( Heike ) ;
19718: LD_STRING Heike
19720: PPUSH
19721: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
19725: LD_VAR 0 1
19729: PPUSH
19730: CALL_OW 255
19734: PUSH
19735: LD_INT 2
19737: EQUAL
19738: PUSH
19739: LD_VAR 0 1
19743: PPUSH
19744: CALL_OW 247
19748: PUSH
19749: LD_INT 1
19751: EQUAL
19752: AND
19753: IFFALSE 19770
// loseCounter := Inc ( loseCounter ) ;
19755: LD_ADDR_EXP 32
19759: PUSH
19760: LD_EXP 32
19764: PPUSH
19765: CALL 68523 0 1
19769: ST_TO_ADDR
// if GetSide ( un ) = 6 and not isAlarm and un in ruPatrol then
19770: LD_VAR 0 1
19774: PPUSH
19775: CALL_OW 255
19779: PUSH
19780: LD_INT 6
19782: EQUAL
19783: PUSH
19784: LD_EXP 17
19788: NOT
19789: AND
19790: PUSH
19791: LD_VAR 0 1
19795: PUSH
19796: LD_EXP 71
19800: IN
19801: AND
19802: IFFALSE 19906
// begin x := GetX ( un ) ;
19804: LD_ADDR_VAR 0 2
19808: PUSH
19809: LD_VAR 0 1
19813: PPUSH
19814: CALL_OW 250
19818: ST_TO_ADDR
// y := GetY ( un ) ;
19819: LD_ADDR_VAR 0 3
19823: PUSH
19824: LD_VAR 0 1
19828: PPUSH
19829: CALL_OW 251
19833: ST_TO_ADDR
// ruKilledHex := Join ( ruKilledHex , [ x , y ] ) ;
19834: LD_ADDR_EXP 43
19838: PUSH
19839: LD_EXP 43
19843: PPUSH
19844: LD_VAR 0 2
19848: PUSH
19849: LD_VAR 0 3
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PPUSH
19858: CALL 67162 0 2
19862: ST_TO_ADDR
// ruPatrol := ruPatrol diff un ;
19863: LD_ADDR_EXP 71
19867: PUSH
19868: LD_EXP 71
19872: PUSH
19873: LD_VAR 0 1
19877: DIFF
19878: ST_TO_ADDR
// if SeeXY ( 3 , x , y ) then
19879: LD_INT 3
19881: PPUSH
19882: LD_VAR 0 2
19886: PPUSH
19887: LD_VAR 0 3
19891: PPUSH
19892: CALL_OW 293
19896: IFFALSE 19906
// isAlarm := true ;
19898: LD_ADDR_EXP 17
19902: PUSH
19903: LD_INT 1
19905: ST_TO_ADDR
// end ; end ;
19906: PPOPN 3
19908: END
// on Contact ( s1 , s2 ) do begin if meetWithMuchin then
19909: LD_EXP 44
19913: IFFALSE 19917
// exit ;
19915: GO 19965
// if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
19917: LD_VAR 0 1
19921: PUSH
19922: LD_INT 2
19924: EQUAL
19925: PUSH
19926: LD_VAR 0 2
19930: PUSH
19931: LD_INT 3
19933: EQUAL
19934: AND
19935: PUSH
19936: LD_VAR 0 1
19940: PUSH
19941: LD_INT 3
19943: EQUAL
19944: PUSH
19945: LD_VAR 0 2
19949: PUSH
19950: LD_INT 2
19952: EQUAL
19953: AND
19954: OR
19955: IFFALSE 19965
// isAlarm := true ;
19957: LD_ADDR_EXP 17
19961: PUSH
19962: LD_INT 1
19964: ST_TO_ADDR
// end ;
19965: PPOPN 2
19967: END
// on DestinationUnreachable ( un ) do var i , units ;
19968: LD_INT 0
19970: PPUSH
19971: PPUSH
// begin if un = ruDisturb and not isAlarm then
19972: LD_VAR 0 1
19976: PUSH
19977: LD_EXP 66
19981: EQUAL
19982: PUSH
19983: LD_EXP 17
19987: NOT
19988: AND
19989: IFFALSE 20110
// begin units := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff Heike ;
19991: LD_ADDR_VAR 0 3
19995: PUSH
19996: LD_INT 22
19998: PUSH
19999: LD_INT 2
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 21
20008: PUSH
20009: LD_INT 1
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PPUSH
20020: CALL_OW 69
20024: PUSH
20025: LD_EXP 46
20029: DIFF
20030: ST_TO_ADDR
// if not units then
20031: LD_VAR 0 3
20035: NOT
20036: IFFALSE 20040
// exit ;
20038: GO 20110
// for i in units do
20040: LD_ADDR_VAR 0 2
20044: PUSH
20045: LD_VAR 0 3
20049: PUSH
20050: FOR_IN
20051: IFFALSE 20108
// begin if Carry ( i ) then
20053: LD_VAR 0 2
20057: PPUSH
20058: CALL_OW 281
20062: IFFALSE 20079
// SetCargo ( i , mat_cans , 0 ) ;
20064: LD_VAR 0 2
20068: PPUSH
20069: LD_INT 1
20071: PPUSH
20072: LD_INT 0
20074: PPUSH
20075: CALL_OW 290
// SetSide ( i , 5 ) ;
20079: LD_VAR 0 2
20083: PPUSH
20084: LD_INT 5
20086: PPUSH
20087: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
20091: LD_VAR 0 2
20095: PPUSH
20096: LD_INT 113
20098: PPUSH
20099: LD_INT 17
20101: PPUSH
20102: CALL_OW 111
// end ;
20106: GO 20050
20108: POP
20109: POP
// end ; end ; end_of_file
20110: PPOPN 3
20112: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
20113: LD_INT 0
20115: PPUSH
20116: PPUSH
20117: PPUSH
// u1 := IsInUnit ( unit1 ) ;
20118: LD_ADDR_VAR 0 4
20122: PUSH
20123: LD_VAR 0 1
20127: PPUSH
20128: CALL_OW 310
20132: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
20133: LD_ADDR_VAR 0 5
20137: PUSH
20138: LD_VAR 0 2
20142: PPUSH
20143: CALL_OW 310
20147: ST_TO_ADDR
// result := u1 and u1 = u2 ;
20148: LD_ADDR_VAR 0 3
20152: PUSH
20153: LD_VAR 0 4
20157: PUSH
20158: LD_VAR 0 4
20162: PUSH
20163: LD_VAR 0 5
20167: EQUAL
20168: AND
20169: ST_TO_ADDR
// end ;
20170: LD_VAR 0 3
20174: RET
// export function ShowPlace ( x , y , time ) ; begin
20175: LD_INT 0
20177: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
20178: LD_INT 4
20180: PPUSH
20181: LD_VAR 0 1
20185: PPUSH
20186: LD_VAR 0 2
20190: PPUSH
20191: LD_VAR 0 3
20195: PPUSH
20196: LD_INT 0
20198: PPUSH
20199: LD_INT 0
20201: PPUSH
20202: LD_INT 0
20204: PPUSH
20205: CALL_OW 595
// end ;
20209: LD_VAR 0 4
20213: RET
// export function UnitsBlockingEntrance ( building ) ; var i , x , y , d , entrance ; begin
20214: LD_INT 0
20216: PPUSH
20217: PPUSH
20218: PPUSH
20219: PPUSH
20220: PPUSH
20221: PPUSH
// if not IsOk ( building ) then
20222: LD_VAR 0 1
20226: PPUSH
20227: CALL_OW 302
20231: NOT
20232: IFFALSE 20236
// exit ;
20234: GO 20483
// x := GetX ( building ) ;
20236: LD_ADDR_VAR 0 4
20240: PUSH
20241: LD_VAR 0 1
20245: PPUSH
20246: CALL_OW 250
20250: ST_TO_ADDR
// y := GetY ( building ) ;
20251: LD_ADDR_VAR 0 5
20255: PUSH
20256: LD_VAR 0 1
20260: PPUSH
20261: CALL_OW 251
20265: ST_TO_ADDR
// d := GetDir ( building ) ;
20266: LD_ADDR_VAR 0 6
20270: PUSH
20271: LD_VAR 0 1
20275: PPUSH
20276: CALL_OW 254
20280: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
20281: LD_ADDR_VAR 0 7
20285: PUSH
20286: LD_VAR 0 4
20290: PPUSH
20291: LD_VAR 0 6
20295: PPUSH
20296: LD_INT 3
20298: PPUSH
20299: CALL_OW 272
20303: PUSH
20304: LD_VAR 0 5
20308: PPUSH
20309: LD_VAR 0 6
20313: PPUSH
20314: LD_INT 3
20316: PPUSH
20317: CALL_OW 273
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
20326: LD_VAR 0 7
20330: PUSH
20331: LD_INT 1
20333: ARRAY
20334: PPUSH
20335: LD_VAR 0 7
20339: PUSH
20340: LD_INT 2
20342: ARRAY
20343: PPUSH
20344: CALL_OW 488
20348: NOT
20349: IFFALSE 20353
// exit ;
20351: GO 20483
// result := FilterAllUnits ( [ [ f_distxy , x , y , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
20353: LD_ADDR_VAR 0 2
20357: PUSH
20358: LD_INT 92
20360: PUSH
20361: LD_VAR 0 4
20365: PUSH
20366: LD_VAR 0 5
20370: PUSH
20371: LD_INT 4
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 3
20382: PUSH
20383: LD_INT 54
20385: PUSH
20386: EMPTY
20387: LIST
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PPUSH
20397: CALL_OW 69
20401: ST_TO_ADDR
// if not result then
20402: LD_VAR 0 2
20406: NOT
20407: IFFALSE 20411
// exit ;
20409: GO 20483
// for i in result do
20411: LD_ADDR_VAR 0 3
20415: PUSH
20416: LD_VAR 0 2
20420: PUSH
20421: FOR_IN
20422: IFFALSE 20481
// ComMoveXY ( i , ShiftX ( GetX ( i ) , d , 3 ) , ShiftY ( GetY ( i ) , d , 3 ) ) ;
20424: LD_VAR 0 3
20428: PPUSH
20429: LD_VAR 0 3
20433: PPUSH
20434: CALL_OW 250
20438: PPUSH
20439: LD_VAR 0 6
20443: PPUSH
20444: LD_INT 3
20446: PPUSH
20447: CALL_OW 272
20451: PPUSH
20452: LD_VAR 0 3
20456: PPUSH
20457: CALL_OW 251
20461: PPUSH
20462: LD_VAR 0 6
20466: PPUSH
20467: LD_INT 3
20469: PPUSH
20470: CALL_OW 273
20474: PPUSH
20475: CALL_OW 111
20479: GO 20421
20481: POP
20482: POP
// end ;
20483: LD_VAR 0 2
20487: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
20488: LD_INT 0
20490: PPUSH
20491: PPUSH
20492: PPUSH
20493: PPUSH
20494: PPUSH
20495: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
20496: LD_VAR 0 1
20500: PPUSH
20501: CALL_OW 302
20505: NOT
20506: PUSH
20507: LD_VAR 0 2
20511: PPUSH
20512: CALL_OW 302
20516: NOT
20517: OR
20518: PUSH
20519: LD_VAR 0 2
20523: PPUSH
20524: CALL_OW 313
20528: PUSH
20529: LD_INT 6
20531: EQUAL
20532: OR
20533: IFFALSE 20537
// exit ;
20535: GO 20754
// btype := GetBType ( building ) ;
20537: LD_ADDR_VAR 0 8
20541: PUSH
20542: LD_VAR 0 2
20546: PPUSH
20547: CALL_OW 266
20551: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
20552: LD_VAR 0 8
20556: PUSH
20557: LD_INT 0
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: LD_INT 2
20565: PUSH
20566: LD_INT 4
20568: PUSH
20569: LD_INT 5
20571: PUSH
20572: LD_INT 3
20574: PUSH
20575: LD_INT 6
20577: PUSH
20578: LD_INT 7
20580: PUSH
20581: LD_INT 8
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: IN
20595: NOT
20596: IFFALSE 20600
// exit ;
20598: GO 20754
// x := GetX ( building ) ;
20600: LD_ADDR_VAR 0 4
20604: PUSH
20605: LD_VAR 0 2
20609: PPUSH
20610: CALL_OW 250
20614: ST_TO_ADDR
// y := GetY ( building ) ;
20615: LD_ADDR_VAR 0 5
20619: PUSH
20620: LD_VAR 0 2
20624: PPUSH
20625: CALL_OW 251
20629: ST_TO_ADDR
// d := GetDir ( building ) ;
20630: LD_ADDR_VAR 0 6
20634: PUSH
20635: LD_VAR 0 2
20639: PPUSH
20640: CALL_OW 254
20644: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
20645: LD_ADDR_VAR 0 7
20649: PUSH
20650: LD_VAR 0 4
20654: PPUSH
20655: LD_VAR 0 6
20659: PPUSH
20660: LD_INT 3
20662: PPUSH
20663: CALL_OW 272
20667: PUSH
20668: LD_VAR 0 5
20672: PPUSH
20673: LD_VAR 0 6
20677: PPUSH
20678: LD_INT 3
20680: PPUSH
20681: CALL_OW 273
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
20690: LD_VAR 0 7
20694: PUSH
20695: LD_INT 1
20697: ARRAY
20698: PPUSH
20699: LD_VAR 0 7
20703: PUSH
20704: LD_INT 2
20706: ARRAY
20707: PPUSH
20708: CALL_OW 488
20712: NOT
20713: IFFALSE 20717
// exit ;
20715: GO 20754
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
20717: LD_ADDR_VAR 0 3
20721: PUSH
20722: LD_VAR 0 1
20726: PPUSH
20727: LD_VAR 0 7
20731: PUSH
20732: LD_INT 1
20734: ARRAY
20735: PPUSH
20736: LD_VAR 0 7
20740: PUSH
20741: LD_INT 2
20743: ARRAY
20744: PPUSH
20745: CALL_OW 297
20749: PUSH
20750: LD_INT 4
20752: LESS
20753: ST_TO_ADDR
// end ;
20754: LD_VAR 0 3
20758: RET
// export function PlaceExplosives ( building ) ; begin
20759: LD_INT 0
20761: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
20762: LD_ADDR_EXP 29
20766: PUSH
20767: LD_EXP 29
20771: PPUSH
20772: LD_VAR 0 1
20776: PPUSH
20777: CALL 67162 0 2
20781: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
20782: LD_VAR 0 1
20786: PPUSH
20787: CALL_OW 250
20791: PPUSH
20792: LD_VAR 0 1
20796: PPUSH
20797: CALL_OW 251
20801: PPUSH
20802: LD_STRING PlantBomb
20804: PPUSH
20805: CALL_OW 366
// end ;
20809: LD_VAR 0 2
20813: RET
// export function CreateNature ; var i ; begin
20814: LD_INT 0
20816: PPUSH
20817: PPUSH
// PrepareFrog ;
20818: CALL 63639 0 0
// for i := 1 to 3 do
20822: LD_ADDR_VAR 0 2
20826: PUSH
20827: DOUBLE
20828: LD_INT 1
20830: DEC
20831: ST_TO_ADDR
20832: LD_INT 3
20834: PUSH
20835: FOR_TO
20836: IFFALSE 20855
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
20838: CALL_OW 44
20842: PPUSH
20843: LD_INT 24
20845: PPUSH
20846: LD_INT 0
20848: PPUSH
20849: CALL_OW 49
20853: GO 20835
20855: POP
20856: POP
// end ;
20857: LD_VAR 0 1
20861: RET
// export function MarkBuilding ( building , marker ) ; begin
20862: LD_INT 0
20864: PPUSH
// if marker then
20865: LD_VAR 0 2
20869: IFFALSE 20916
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
20871: LD_VAR 0 1
20875: PPUSH
20876: CALL_OW 250
20880: PPUSH
20881: LD_VAR 0 1
20885: PPUSH
20886: CALL_OW 251
20890: PPUSH
20891: LD_INT 2
20893: PPUSH
20894: LD_INT 3
20896: NEG
20897: PPUSH
20898: CALL_OW 330
// SetBName ( building , target ) ;
20902: LD_VAR 0 1
20906: PPUSH
20907: LD_STRING target
20909: PPUSH
20910: CALL_OW 500
// end else
20914: GO 20955
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
20916: LD_VAR 0 1
20920: PPUSH
20921: CALL_OW 250
20925: PPUSH
20926: LD_VAR 0 1
20930: PPUSH
20931: CALL_OW 251
20935: PPUSH
20936: LD_INT 2
20938: PPUSH
20939: CALL_OW 331
// SetBName ( building ,  ) ;
20943: LD_VAR 0 1
20947: PPUSH
20948: LD_STRING 
20950: PPUSH
20951: CALL_OW 500
// end ; end ; end_of_file
20955: LD_VAR 0 3
20959: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
20960: LD_INT 0
20962: PPUSH
// lockerCodeValid := false ;
20963: LD_ADDR_EXP 72
20967: PUSH
20968: LD_INT 0
20970: ST_TO_ADDR
// if not step then
20971: LD_LOC 1
20975: NOT
20976: IFFALSE 20986
// step := 1 ;
20978: LD_ADDR_LOC 1
20982: PUSH
20983: LD_INT 1
20985: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
20986: LD_STRING HEscape
20988: PUSH
20989: LD_LOC 1
20993: STR
20994: PPUSH
20995: CALL_OW 97
20999: PUSH
21000: LD_INT 1
21002: DOUBLE
21003: EQUAL
21004: IFTRUE 21008
21006: GO 21015
21008: POP
// LockerMinigameSearch ; 2 :
21009: CALL 21048 0 0
21013: GO 21031
21015: LD_INT 2
21017: DOUBLE
21018: EQUAL
21019: IFTRUE 21023
21021: GO 21030
21023: POP
// LockerMinigameSetCode ; end ;
21024: CALL 21122 0 0
21028: GO 21031
21030: POP
// if lockerCodeValid then
21031: LD_EXP 72
21035: IFFALSE 21039
// exit ;
21037: GO 21043
// StartLockerMinigame ;
21039: CALL 20960 0 0
// end ;
21043: LD_VAR 0 1
21047: RET
// function LockerMinigameSearch ; begin
21048: LD_INT 0
21050: PPUSH
// if code then
21051: LD_LOC 2
21055: IFFALSE 21071
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
21057: LD_EXP 46
21061: PPUSH
21062: LD_STRING DH-Escape-3-Hint-0
21064: PPUSH
21065: CALL_OW 88
// exit ;
21069: GO 21117
// end ; Randomize ;
21071: CALL_OW 10
// code := rand ( 1 , 5 ) ;
21075: LD_ADDR_LOC 2
21079: PUSH
21080: LD_INT 1
21082: PPUSH
21083: LD_INT 5
21085: PPUSH
21086: CALL_OW 12
21090: ST_TO_ADDR
// step := 2 ;
21091: LD_ADDR_LOC 1
21095: PUSH
21096: LD_INT 2
21098: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
21099: LD_EXP 46
21103: PPUSH
21104: LD_STRING DH-Escape-3-Hint-
21106: PUSH
21107: LD_LOC 2
21111: STR
21112: PPUSH
21113: CALL_OW 88
// end ;
21117: LD_VAR 0 1
21121: RET
// function LockerMinigameSetCode ; begin
21122: LD_INT 0
21124: PPUSH
// if not code then
21125: LD_LOC 2
21129: NOT
21130: IFFALSE 21140
// code := 0 ;
21132: LD_ADDR_LOC 2
21136: PUSH
21137: LD_INT 0
21139: ST_TO_ADDR
// lockerBusy := true ;
21140: LD_ADDR_EXP 73
21144: PUSH
21145: LD_INT 1
21147: ST_TO_ADDR
// InGameOff ;
21148: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
21152: LD_STRING initLockerMinigame("
21154: PUSH
21155: LD_LOC 2
21159: STR
21160: PUSH
21161: LD_STRING ")
21163: STR
21164: PPUSH
21165: CALL_OW 559
// step := 3 ;
21169: LD_ADDR_LOC 1
21173: PUSH
21174: LD_INT 3
21176: ST_TO_ADDR
// repeat wait ( 1 ) ;
21177: LD_INT 1
21179: PPUSH
21180: CALL_OW 67
// until not lockerBusy ;
21184: LD_EXP 73
21188: NOT
21189: IFFALSE 21177
// InGameOn ;
21191: CALL_OW 8
// if not lockerCodeValid then
21195: LD_EXP 72
21199: NOT
21200: IFFALSE 21226
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
21202: LD_EXP 46
21206: PPUSH
21207: LD_STRING DH-Escape-3-Fail-
21209: PUSH
21210: LD_INT 1
21212: PPUSH
21213: LD_INT 2
21215: PPUSH
21216: CALL_OW 12
21220: STR
21221: PPUSH
21222: CALL_OW 88
// end ; end_of_file
21226: LD_VAR 0 1
21230: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
21231: LD_VAR 0 2
21235: PUSH
21236: LD_INT 102
21238: EQUAL
21239: IFFALSE 21261
// begin lockerBusy := false ;
21241: LD_ADDR_EXP 73
21245: PUSH
21246: LD_INT 0
21248: ST_TO_ADDR
// lockerCodeValid := p3 ;
21249: LD_ADDR_EXP 72
21253: PUSH
21254: LD_VAR 0 3
21258: ST_TO_ADDR
// end else
21259: GO 21315
// if p2 = 103 then
21261: LD_VAR 0 2
21265: PUSH
21266: LD_INT 103
21268: EQUAL
21269: IFFALSE 21281
// begin weatherBusy := false ;
21271: LD_ADDR_EXP 37
21275: PUSH
21276: LD_INT 0
21278: ST_TO_ADDR
// end else
21279: GO 21315
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
21281: LD_VAR 0 1
21285: PPUSH
21286: LD_VAR 0 2
21290: PPUSH
21291: LD_VAR 0 3
21295: PPUSH
21296: LD_VAR 0 4
21300: PPUSH
21301: LD_VAR 0 5
21305: PPUSH
21306: LD_VAR 0 6
21310: PPUSH
21311: CALL 72418 0 6
// end ;
21315: PPOPN 6
21317: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
21318: LD_STRING killGameMusic();
21320: PPUSH
21321: CALL_OW 559
// PlayOriginalMusic ;
21325: CALL 93210 0 0
// SOS_MapStart ( ) ;
21329: CALL 72305 0 0
// end ; end_of_file
21333: PPOPN 1
21335: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
21336: LD_EXP 17
21340: NOT
21341: PUSH
21342: LD_EXP 71
21346: AND
21347: IFFALSE 21927
21349: GO 21351
21351: DISABLE
21352: LD_INT 0
21354: PPUSH
21355: PPUSH
21356: PPUSH
21357: PPUSH
21358: PPUSH
// begin enable ;
21359: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
21360: LD_ADDR_VAR 0 3
21364: PUSH
21365: LD_INT 26
21367: PUSH
21368: LD_INT 27
21370: PUSH
21371: LD_INT 28
21373: PUSH
21374: LD_INT 29
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 30
21385: PUSH
21386: LD_INT 31
21388: PUSH
21389: LD_INT 32
21391: PUSH
21392: LD_INT 33
21394: PUSH
21395: LD_INT 34
21397: PUSH
21398: LD_INT 35
21400: PUSH
21401: LD_INT 36
21403: PUSH
21404: LD_INT 37
21406: PUSH
21407: LD_INT 38
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 39
21423: PUSH
21424: LD_INT 40
21426: PUSH
21427: LD_INT 41
21429: PUSH
21430: LD_INT 42
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 43
21441: PUSH
21442: LD_INT 44
21444: PUSH
21445: LD_INT 45
21447: PUSH
21448: LD_INT 46
21450: PUSH
21451: LD_INT 47
21453: PUSH
21454: LD_INT 46
21456: PUSH
21457: LD_INT 45
21459: PUSH
21460: LD_INT 44
21462: PUSH
21463: LD_INT 43
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: ST_TO_ADDR
// for i in ruPatrol do
21483: LD_ADDR_VAR 0 1
21487: PUSH
21488: LD_EXP 71
21492: PUSH
21493: FOR_IN
21494: IFFALSE 21925
// begin if not IsOk ( i ) then
21496: LD_VAR 0 1
21500: PPUSH
21501: CALL_OW 302
21505: NOT
21506: IFFALSE 21510
// continue ;
21508: GO 21493
// if Count ( ruKilledHex ) then
21510: LD_EXP 43
21514: PPUSH
21515: CALL 31573 0 1
21519: IFFALSE 21592
// for j in ruKilledHex do
21521: LD_ADDR_VAR 0 2
21525: PUSH
21526: LD_EXP 43
21530: PUSH
21531: FOR_IN
21532: IFFALSE 21590
// if GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) < 6 then
21534: LD_VAR 0 1
21538: PPUSH
21539: LD_VAR 0 2
21543: PUSH
21544: LD_INT 1
21546: ARRAY
21547: PPUSH
21548: LD_VAR 0 2
21552: PUSH
21553: LD_INT 2
21555: ARRAY
21556: PPUSH
21557: CALL_OW 297
21561: PUSH
21562: LD_INT 6
21564: LESS
21565: IFFALSE 21588
// begin Query ( QBody ) ;
21567: LD_STRING QBody
21569: PPUSH
21570: CALL_OW 97
// isAlarm := true ;
21574: LD_ADDR_EXP 17
21578: PUSH
21579: LD_INT 1
21581: ST_TO_ADDR
// exit ;
21582: POP
21583: POP
21584: POP
21585: POP
21586: GO 21927
// end ;
21588: GO 21531
21590: POP
21591: POP
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
21592: LD_ADDR_VAR 0 5
21596: PUSH
21597: LD_INT 22
21599: PUSH
21600: LD_INT 2
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 21
21609: PUSH
21610: LD_INT 1
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 91
21619: PUSH
21620: LD_VAR 0 1
21624: PUSH
21625: LD_INT 7
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: LIST
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: LIST
21637: PPUSH
21638: CALL_OW 69
21642: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
21643: LD_INT 2
21645: PPUSH
21646: LD_VAR 0 1
21650: PPUSH
21651: CALL_OW 292
21655: PUSH
21656: LD_VAR 0 5
21660: AND
21661: IFFALSE 21811
// begin if ( hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 ) or blockPatrolThread then
21663: LD_EXP 30
21667: PUSH
21668: LD_VAR 0 1
21672: PPUSH
21673: LD_EXP 66
21677: PPUSH
21678: CALL_OW 296
21682: PUSH
21683: LD_INT 16
21685: LESS
21686: AND
21687: PUSH
21688: LD_EXP 38
21692: OR
21693: IFFALSE 21697
// continue ;
21695: GO 21493
// for j in tmp do
21697: LD_ADDR_VAR 0 2
21701: PUSH
21702: LD_VAR 0 5
21706: PUSH
21707: FOR_IN
21708: IFFALSE 21769
// tmp := tmp union FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , j , 4 ] ] ) ;
21710: LD_ADDR_VAR 0 5
21714: PUSH
21715: LD_VAR 0 5
21719: PUSH
21720: LD_INT 22
21722: PUSH
21723: LD_INT 2
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 21
21732: PUSH
21733: LD_INT 1
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 91
21742: PUSH
21743: LD_VAR 0 2
21747: PUSH
21748: LD_INT 4
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: LIST
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: LIST
21760: PPUSH
21761: CALL_OW 69
21765: UNION
21766: ST_TO_ADDR
21767: GO 21707
21769: POP
21770: POP
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
21771: LD_VAR 0 1
21775: PPUSH
21776: LD_VAR 0 5
21780: PPUSH
21781: LD_VAR 0 1
21785: PPUSH
21786: CALL_OW 74
21790: PPUSH
21791: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
21795: LD_VAR 0 1
21799: PPUSH
21800: LD_VAR 0 5
21804: PPUSH
21805: CALL 21930 0 2
// continue ;
21809: GO 21493
// end ; if HasTask ( i ) then
21811: LD_VAR 0 1
21815: PPUSH
21816: CALL_OW 314
21820: IFFALSE 21824
// continue ;
21822: GO 21493
// tag := GetTag ( i ) ;
21824: LD_ADDR_VAR 0 4
21828: PUSH
21829: LD_VAR 0 1
21833: PPUSH
21834: CALL_OW 110
21838: ST_TO_ADDR
// if not tag then
21839: LD_VAR 0 4
21843: NOT
21844: IFFALSE 21857
// begin ComHold ( i ) ;
21846: LD_VAR 0 1
21850: PPUSH
21851: CALL_OW 140
// continue ;
21855: GO 21493
// end ; for j := 1 to points [ tag ] do
21857: LD_ADDR_VAR 0 2
21861: PUSH
21862: DOUBLE
21863: LD_INT 1
21865: DEC
21866: ST_TO_ADDR
21867: LD_VAR 0 3
21871: PUSH
21872: LD_VAR 0 4
21876: ARRAY
21877: PUSH
21878: FOR_TO
21879: IFFALSE 21921
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
21881: LD_VAR 0 1
21885: PPUSH
21886: LD_VAR 0 3
21890: PUSH
21891: LD_VAR 0 4
21895: ARRAY
21896: PUSH
21897: LD_VAR 0 2
21901: ARRAY
21902: PPUSH
21903: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
21907: LD_VAR 0 1
21911: PPUSH
21912: LD_INT 70
21914: PPUSH
21915: CALL_OW 202
// end ;
21919: GO 21878
21921: POP
21922: POP
// end ;
21923: GO 21493
21925: POP
21926: POP
// end ;
21927: PPOPN 5
21929: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
21930: LD_INT 0
21932: PPUSH
21933: PPUSH
21934: PPUSH
// if UnitFilter ( units , [ [ f_nation , nation_arabian ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
21935: LD_VAR 0 2
21939: PPUSH
21940: LD_INT 23
21942: PUSH
21943: LD_INT 2
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 2
21952: PUSH
21953: LD_INT 25
21955: PUSH
21956: LD_INT 1
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 25
21965: PUSH
21966: LD_INT 11
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 25
21975: PUSH
21976: LD_INT 34
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 25
21985: PUSH
21986: LD_INT 32
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PPUSH
22004: CALL_OW 72
22008: IFFALSE 22121
// begin blockPatrolThread := true ;
22010: LD_ADDR_EXP 38
22014: PUSH
22015: LD_INT 1
22017: ST_TO_ADDR
// DialogueOn ;
22018: CALL_OW 6
// case GetSex ( guard ) of sex_male :
22022: LD_VAR 0 1
22026: PPUSH
22027: CALL_OW 258
22031: PUSH
22032: LD_INT 1
22034: DOUBLE
22035: EQUAL
22036: IFTRUE 22040
22038: GO 22055
22040: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22041: LD_VAR 0 1
22045: PPUSH
22046: LD_STRING DRum-Fail-3
22048: PPUSH
22049: CALL_OW 88
22053: GO 22079
22055: LD_INT 2
22057: DOUBLE
22058: EQUAL
22059: IFTRUE 22063
22061: GO 22078
22063: POP
// Say ( guard , DRuf-Fail-3 ) ; end ;
22064: LD_VAR 0 1
22068: PPUSH
22069: LD_STRING DRuf-Fail-3
22071: PPUSH
22072: CALL_OW 88
22076: GO 22079
22078: POP
// DialogueOff ;
22079: CALL_OW 7
// wait ( 0 0$5 ) ;
22083: LD_INT 175
22085: PPUSH
22086: CALL_OW 67
// if IsOk ( guard ) then
22090: LD_VAR 0 1
22094: PPUSH
22095: CALL_OW 302
22099: IFFALSE 22111
// isAlarm := true else
22101: LD_ADDR_EXP 17
22105: PUSH
22106: LD_INT 1
22108: ST_TO_ADDR
22109: GO 22119
// blockPatrolThread := false ;
22111: LD_ADDR_EXP 38
22115: PUSH
22116: LD_INT 0
22118: ST_TO_ADDR
// exit ;
22119: GO 23122
// end ; if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
22121: LD_VAR 0 2
22125: PPUSH
22126: LD_INT 23
22128: PUSH
22129: LD_INT 3
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PPUSH
22136: CALL_OW 72
22140: PUSH
22141: LD_VAR 0 2
22145: PPUSH
22146: LD_INT 95
22148: PUSH
22149: LD_INT 61
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PPUSH
22156: CALL_OW 72
22160: OR
22161: IFFALSE 22165
// exit ;
22163: GO 23122
// DialogueOn ;
22165: CALL_OW 6
// blockPatrolThread := true ;
22169: LD_ADDR_EXP 38
22173: PUSH
22174: LD_INT 1
22176: ST_TO_ADDR
// CenterNowOnUnits ( guard ) ;
22177: LD_VAR 0 1
22181: PPUSH
22182: CALL_OW 87
// if not Heike in units then
22186: LD_EXP 46
22190: PUSH
22191: LD_VAR 0 2
22195: IN
22196: NOT
22197: IFFALSE 22563
// begin case GetSex ( guard ) of sex_male :
22199: LD_VAR 0 1
22203: PPUSH
22204: CALL_OW 258
22208: PUSH
22209: LD_INT 1
22211: DOUBLE
22212: EQUAL
22213: IFTRUE 22217
22215: GO 22232
22217: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
22218: LD_VAR 0 1
22222: PPUSH
22223: LD_STRING DRum-Guard-1
22225: PPUSH
22226: CALL_OW 88
22230: GO 22256
22232: LD_INT 2
22234: DOUBLE
22235: EQUAL
22236: IFTRUE 22240
22238: GO 22255
22240: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
22241: LD_VAR 0 1
22245: PPUSH
22246: LD_STRING DRuf-Guard-1
22248: PPUSH
22249: CALL_OW 88
22253: GO 22256
22255: POP
// case Query ( SurrenderInfoPeople ) of 1 :
22256: LD_STRING SurrenderInfoPeople
22258: PPUSH
22259: CALL_OW 97
22263: PUSH
22264: LD_INT 1
22266: DOUBLE
22267: EQUAL
22268: IFTRUE 22272
22270: GO 22381
22272: POP
// begin Query ( CaughtSquadInfo ) ;
22273: LD_STRING CaughtSquadInfo
22275: PPUSH
22276: CALL_OW 97
// for i in units do
22280: LD_ADDR_VAR 0 4
22284: PUSH
22285: LD_VAR 0 2
22289: PUSH
22290: FOR_IN
22291: IFFALSE 22348
// begin if Carry ( i ) then
22293: LD_VAR 0 4
22297: PPUSH
22298: CALL_OW 281
22302: IFFALSE 22319
// SetCargo ( i , mat_cans , 0 ) ;
22304: LD_VAR 0 4
22308: PPUSH
22309: LD_INT 1
22311: PPUSH
22312: LD_INT 0
22314: PPUSH
22315: CALL_OW 290
// SetSide ( i , 5 ) ;
22319: LD_VAR 0 4
22323: PPUSH
22324: LD_INT 5
22326: PPUSH
22327: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
22331: LD_VAR 0 4
22335: PPUSH
22336: LD_INT 113
22338: PPUSH
22339: LD_INT 17
22341: PPUSH
22342: CALL_OW 111
// end ;
22346: GO 22290
22348: POP
22349: POP
// ComMoveXY ( guard , 117 , 25 ) ;
22350: LD_VAR 0 1
22354: PPUSH
22355: LD_INT 117
22357: PPUSH
22358: LD_INT 25
22360: PPUSH
22361: CALL_OW 111
// DialogueOff ;
22365: CALL_OW 7
// blockPatrolThread := false ;
22369: LD_ADDR_EXP 38
22373: PUSH
22374: LD_INT 0
22376: ST_TO_ADDR
// exit ;
22377: GO 23122
// end ; 2 :
22379: GO 22563
22381: LD_INT 2
22383: DOUBLE
22384: EQUAL
22385: IFTRUE 22389
22387: GO 22562
22389: POP
// begin DialogueOff ;
22390: CALL_OW 7
// wait ( 0 0$2 ) ;
22394: LD_INT 70
22396: PPUSH
22397: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22401: LD_INT 6
22403: PPUSH
22404: LD_INT 2
22406: PPUSH
22407: LD_INT 2
22409: PPUSH
22410: LD_INT 1
22412: PPUSH
22413: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
22417: LD_VAR 0 1
22421: PPUSH
22422: LD_VAR 0 2
22426: PUSH
22427: LD_INT 1
22429: ARRAY
22430: PPUSH
22431: CALL_OW 115
// case GetSex ( guard ) of sex_male :
22435: LD_VAR 0 1
22439: PPUSH
22440: CALL_OW 258
22444: PUSH
22445: LD_INT 1
22447: DOUBLE
22448: EQUAL
22449: IFTRUE 22453
22451: GO 22468
22453: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22454: LD_VAR 0 1
22458: PPUSH
22459: LD_STRING DRum-Fail-3
22461: PPUSH
22462: CALL_OW 88
22466: GO 22492
22468: LD_INT 2
22470: DOUBLE
22471: EQUAL
22472: IFTRUE 22476
22474: GO 22491
22476: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
22477: LD_VAR 0 1
22481: PPUSH
22482: LD_STRING DRum-Fail-3
22484: PPUSH
22485: CALL_OW 88
22489: GO 22492
22491: POP
// wait ( 0 0$5 ) ;
22492: LD_INT 175
22494: PPUSH
22495: CALL_OW 67
// if IsOk ( guard ) then
22499: LD_VAR 0 1
22503: PPUSH
22504: CALL_OW 302
22508: IFFALSE 22520
// isAlarm := true else
22510: LD_ADDR_EXP 17
22514: PUSH
22515: LD_INT 1
22517: ST_TO_ADDR
22518: GO 22552
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
22520: LD_INT 6
22522: PPUSH
22523: LD_INT 2
22525: PPUSH
22526: LD_INT 0
22528: PPUSH
22529: LD_INT 1
22531: PPUSH
22532: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
22536: LD_INT 3
22538: PPUSH
22539: LD_INT 2
22541: PPUSH
22542: LD_INT 0
22544: PPUSH
22545: LD_INT 1
22547: PPUSH
22548: CALL_OW 80
// end ; blockPatrolThread := false ;
22552: LD_ADDR_EXP 38
22556: PUSH
22557: LD_INT 0
22559: ST_TO_ADDR
// end ; end ;
22560: GO 22563
22562: POP
// end ; if Carry ( Heike ) then
22563: LD_EXP 46
22567: PPUSH
22568: CALL_OW 281
22572: IFFALSE 22648
// begin case GetSex ( guard ) of sex_male :
22574: LD_VAR 0 1
22578: PPUSH
22579: CALL_OW 258
22583: PUSH
22584: LD_INT 1
22586: DOUBLE
22587: EQUAL
22588: IFTRUE 22592
22590: GO 22607
22592: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
22593: LD_VAR 0 1
22597: PPUSH
22598: LD_STRING DRum-FoodFail-1
22600: PPUSH
22601: CALL_OW 88
22605: GO 22631
22607: LD_INT 2
22609: DOUBLE
22610: EQUAL
22611: IFTRUE 22615
22613: GO 22630
22615: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
22616: LD_VAR 0 1
22620: PPUSH
22621: LD_STRING DRuf-FoodFail-2
22623: PPUSH
22624: CALL_OW 88
22628: GO 22631
22630: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
22631: LD_EXP 46
22635: PPUSH
22636: LD_INT 1
22638: PPUSH
22639: LD_INT 0
22641: PPUSH
22642: CALL_OW 290
// end else
22646: GO 22705
// begin case GetSex ( guard ) of sex_male :
22648: LD_VAR 0 1
22652: PPUSH
22653: CALL_OW 258
22657: PUSH
22658: LD_INT 1
22660: DOUBLE
22661: EQUAL
22662: IFTRUE 22666
22664: GO 22681
22666: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
22667: LD_VAR 0 1
22671: PPUSH
22672: LD_STRING DRum-Seen-1
22674: PPUSH
22675: CALL_OW 88
22679: GO 22705
22681: LD_INT 2
22683: DOUBLE
22684: EQUAL
22685: IFTRUE 22689
22687: GO 22704
22689: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
22690: LD_VAR 0 1
22694: PPUSH
22695: LD_STRING DRuf-Seen-1
22697: PPUSH
22698: CALL_OW 88
22702: GO 22705
22704: POP
// end ; alone := ( units = 1 ) ;
22705: LD_ADDR_VAR 0 5
22709: PUSH
22710: LD_VAR 0 2
22714: PUSH
22715: LD_INT 1
22717: EQUAL
22718: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
22719: LD_STRING SurrenderInfo
22721: PPUSH
22722: CALL_OW 97
22726: PUSH
22727: LD_INT 1
22729: DOUBLE
22730: EQUAL
22731: IFTRUE 22735
22733: GO 22924
22735: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
22736: LD_INT 23
22738: PPUSH
22739: CALL_OW 87
// RemoveUnit ( Heike ) ;
22743: LD_EXP 46
22747: PPUSH
22748: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
22752: LD_EXP 46
22756: PPUSH
22757: LD_INT 23
22759: PPUSH
22760: CALL_OW 52
// if not alone then
22764: LD_VAR 0 5
22768: NOT
22769: IFFALSE 22836
// for i in units diff Heike do
22771: LD_ADDR_VAR 0 4
22775: PUSH
22776: LD_VAR 0 2
22780: PUSH
22781: LD_EXP 46
22785: DIFF
22786: PUSH
22787: FOR_IN
22788: IFFALSE 22834
// begin RemoveUnit ( i ) ;
22790: LD_VAR 0 4
22794: PPUSH
22795: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
22799: LD_VAR 0 4
22803: PPUSH
22804: LD_INT 114
22806: PPUSH
22807: LD_INT 17
22809: PPUSH
22810: LD_INT 10
22812: PPUSH
22813: LD_INT 0
22815: PPUSH
22816: CALL_OW 50
// SetSide ( i , 5 ) ;
22820: LD_VAR 0 4
22824: PPUSH
22825: LD_INT 5
22827: PPUSH
22828: CALL_OW 235
// end ;
22832: GO 22787
22834: POP
22835: POP
// wait ( 0 0$0.3 ) ;
22836: LD_INT 10
22838: PPUSH
22839: CALL_OW 67
// if alone then
22843: LD_VAR 0 5
22847: IFFALSE 22858
// Query ( CaughtInfoAlone ) else
22849: LD_STRING CaughtInfoAlone
22851: PPUSH
22852: CALL_OW 97
22856: GO 22865
// Query ( CaughtInfo ) ;
22858: LD_STRING CaughtInfo
22860: PPUSH
22861: CALL_OW 97
// wait ( 0 0$2 ) ;
22865: LD_INT 70
22867: PPUSH
22868: CALL_OW 67
// StartLockerMinigame ;
22872: CALL 20960 0 0
// Say ( Heike , DH-Reset ) ;
22876: LD_EXP 46
22880: PPUSH
22881: LD_STRING DH-Reset
22883: PPUSH
22884: CALL_OW 88
// DialogueOff ;
22888: CALL_OW 7
// InGameOff ;
22892: CALL_OW 9
// blockPatrolThread := false ;
22896: LD_ADDR_EXP 38
22900: PUSH
22901: LD_INT 0
22903: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
22904: LD_EXP 46
22908: PPUSH
22909: CALL_OW 122
// ComFree ( guard ) ;
22913: LD_VAR 0 1
22917: PPUSH
22918: CALL_OW 139
// end ; 2 :
22922: GO 23114
22924: LD_INT 2
22926: DOUBLE
22927: EQUAL
22928: IFTRUE 22932
22930: GO 23113
22932: POP
// begin Say ( Heike , DH-Guard-2 ) ;
22933: LD_EXP 46
22937: PPUSH
22938: LD_STRING DH-Guard-2
22940: PPUSH
22941: CALL_OW 88
// DialogueOff ;
22945: CALL_OW 7
// wait ( 0 0$2 ) ;
22949: LD_INT 70
22951: PPUSH
22952: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22956: LD_INT 6
22958: PPUSH
22959: LD_INT 2
22961: PPUSH
22962: LD_INT 2
22964: PPUSH
22965: LD_INT 1
22967: PPUSH
22968: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
22972: LD_VAR 0 1
22976: PPUSH
22977: LD_EXP 46
22981: PPUSH
22982: CALL_OW 115
// case GetSex ( guard ) of sex_male :
22986: LD_VAR 0 1
22990: PPUSH
22991: CALL_OW 258
22995: PUSH
22996: LD_INT 1
22998: DOUBLE
22999: EQUAL
23000: IFTRUE 23004
23002: GO 23019
23004: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
23005: LD_VAR 0 1
23009: PPUSH
23010: LD_STRING DRum-Fail-3
23012: PPUSH
23013: CALL_OW 88
23017: GO 23043
23019: LD_INT 2
23021: DOUBLE
23022: EQUAL
23023: IFTRUE 23027
23025: GO 23042
23027: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
23028: LD_VAR 0 1
23032: PPUSH
23033: LD_STRING DRum-Fail-3
23035: PPUSH
23036: CALL_OW 88
23040: GO 23043
23042: POP
// wait ( 0 0$5 ) ;
23043: LD_INT 175
23045: PPUSH
23046: CALL_OW 67
// if IsOk ( guard ) then
23050: LD_VAR 0 1
23054: PPUSH
23055: CALL_OW 302
23059: IFFALSE 23071
// isAlarm := true else
23061: LD_ADDR_EXP 17
23065: PUSH
23066: LD_INT 1
23068: ST_TO_ADDR
23069: GO 23103
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
23071: LD_INT 6
23073: PPUSH
23074: LD_INT 2
23076: PPUSH
23077: LD_INT 0
23079: PPUSH
23080: LD_INT 1
23082: PPUSH
23083: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
23087: LD_INT 3
23089: PPUSH
23090: LD_INT 2
23092: PPUSH
23093: LD_INT 0
23095: PPUSH
23096: LD_INT 1
23098: PPUSH
23099: CALL_OW 80
// end ; blockPatrolThread := false ;
23103: LD_ADDR_EXP 38
23107: PUSH
23108: LD_INT 0
23110: ST_TO_ADDR
// end ; end ;
23111: GO 23114
23113: POP
// blockPatrolThread := false ;
23114: LD_ADDR_EXP 38
23118: PUSH
23119: LD_INT 0
23121: ST_TO_ADDR
// end ;
23122: LD_VAR 0 3
23126: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
23127: LD_EXP 14
23131: PPUSH
23132: LD_INT 22
23134: PUSH
23135: LD_INT 5
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 3
23144: PUSH
23145: LD_INT 101
23147: PUSH
23148: LD_INT 6
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 92
23161: PUSH
23162: LD_INT 113
23164: PUSH
23165: LD_INT 16
23167: PUSH
23168: LD_INT 12
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 91
23179: PUSH
23180: LD_EXP 46
23184: PUSH
23185: LD_INT 6
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: LIST
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: PPUSH
23199: CALL_OW 72
23203: PUSH
23204: LD_EXP 30
23208: NOT
23209: AND
23210: IFFALSE 23315
23212: GO 23214
23214: DISABLE
23215: LD_INT 0
23217: PPUSH
// begin enable ;
23218: ENABLE
// DialogueOn ;
23219: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
23223: LD_EXP 46
23227: PPUSH
23228: LD_STRING DH-Join-
23230: PUSH
23231: LD_INT 1
23233: PPUSH
23234: LD_INT 3
23236: PPUSH
23237: CALL_OW 12
23241: STR
23242: PPUSH
23243: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
23247: LD_ADDR_VAR 0 1
23251: PUSH
23252: LD_EXP 14
23256: PPUSH
23257: LD_INT 22
23259: PUSH
23260: LD_INT 5
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: LD_INT 91
23269: PUSH
23270: LD_EXP 46
23274: PUSH
23275: LD_INT 10
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: LIST
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PPUSH
23287: CALL_OW 72
23291: PUSH
23292: FOR_IN
23293: IFFALSE 23309
// SetSide ( i , 2 ) ;
23295: LD_VAR 0 1
23299: PPUSH
23300: LD_INT 2
23302: PPUSH
23303: CALL_OW 235
23307: GO 23292
23309: POP
23310: POP
// DialogueOff ;
23311: CALL_OW 7
// end ; end_of_file
23315: PPOPN 1
23317: END
// every 0 0$2 trigger isAlarm and hasNormalScene do var i , points , tmp ;
23318: LD_EXP 17
23322: PUSH
23323: LD_EXP 5
23327: AND
23328: IFFALSE 23629
23330: GO 23332
23332: DISABLE
23333: LD_INT 0
23335: PPUSH
23336: PPUSH
23337: PPUSH
// begin PlaySoundXY ( - 1 , - 1 , alarm ) ;
23338: LD_INT 1
23340: NEG
23341: PPUSH
23342: LD_INT 1
23344: NEG
23345: PPUSH
23346: LD_STRING alarm
23348: PPUSH
23349: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
23353: LD_INT 3
23355: PPUSH
23356: LD_INT 2
23358: PPUSH
23359: LD_INT 2
23361: PPUSH
23362: LD_INT 1
23364: PPUSH
23365: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
23369: LD_INT 6
23371: PPUSH
23372: LD_INT 2
23374: PPUSH
23375: LD_INT 2
23377: PPUSH
23378: LD_INT 1
23380: PPUSH
23381: CALL_OW 80
// DialogueOn ;
23385: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
23389: LD_EXP 46
23393: PPUSH
23394: LD_STRING DH-Alarm-1
23396: PPUSH
23397: CALL_OW 88
// DialogueOff ;
23401: CALL_OW 7
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
23405: LD_ADDR_VAR 0 2
23409: PUSH
23410: LD_INT 107
23412: PUSH
23413: LD_INT 39
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 143
23422: PUSH
23423: LD_INT 33
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 180
23432: PUSH
23433: LD_INT 115
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 96
23442: PUSH
23443: LD_INT 90
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 59
23452: PUSH
23453: LD_INT 52
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 16
23462: PUSH
23463: LD_INT 15
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 90
23472: PUSH
23473: LD_INT 120
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
23489: LD_ADDR_VAR 0 3
23493: PUSH
23494: LD_INT 22
23496: PUSH
23497: LD_INT 6
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 25
23506: PUSH
23507: LD_INT 1
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PPUSH
23518: CALL_OW 69
23522: ST_TO_ADDR
// for i in tmp do
23523: LD_ADDR_VAR 0 1
23527: PUSH
23528: LD_VAR 0 3
23532: PUSH
23533: FOR_IN
23534: IFFALSE 23602
// begin ComExit ( i ) ;
23536: LD_VAR 0 1
23540: PPUSH
23541: CALL 67560 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
23545: LD_VAR 0 1
23549: PPUSH
23550: LD_VAR 0 2
23554: PUSH
23555: LD_VAR 0 1
23559: PUSH
23560: LD_INT 7
23562: MOD
23563: PUSH
23564: LD_INT 1
23566: PLUS
23567: ARRAY
23568: PUSH
23569: LD_INT 1
23571: ARRAY
23572: PPUSH
23573: LD_VAR 0 2
23577: PUSH
23578: LD_VAR 0 1
23582: PUSH
23583: LD_INT 7
23585: MOD
23586: PUSH
23587: LD_INT 1
23589: PLUS
23590: ARRAY
23591: PUSH
23592: LD_INT 2
23594: ARRAY
23595: PPUSH
23596: CALL_OW 174
// end ;
23600: GO 23533
23602: POP
23603: POP
// Explode ;
23604: CALL 23632 0 0
// wait ( 0 0$45 ) ;
23608: LD_INT 1575
23610: PPUSH
23611: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
23615: LD_VAR 0 3
23619: PPUSH
23620: LD_EXP 46
23624: PPUSH
23625: CALL_OW 175
// end ;
23629: PPOPN 3
23631: END
// export function Explode ; var i , x , y , j ; begin
23632: LD_INT 0
23634: PPUSH
23635: PPUSH
23636: PPUSH
23637: PPUSH
23638: PPUSH
// if hasExplosionsInFactory then
23639: LD_EXP 7
23643: IFFALSE 23663
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
23645: LD_ADDR_EXP 29
23649: PUSH
23650: LD_EXP 29
23654: PPUSH
23655: LD_INT 61
23657: PPUSH
23658: CALL 67162 0 2
23662: ST_TO_ADDR
// if explosivePlantedList then
23663: LD_EXP 29
23667: IFFALSE 23815
// begin for i in explosivePlantedList do
23669: LD_ADDR_VAR 0 2
23673: PUSH
23674: LD_EXP 29
23678: PUSH
23679: FOR_IN
23680: IFFALSE 23783
// begin x := GetX ( i ) ;
23682: LD_ADDR_VAR 0 3
23686: PUSH
23687: LD_VAR 0 2
23691: PPUSH
23692: CALL_OW 250
23696: ST_TO_ADDR
// y := GetY ( i ) ;
23697: LD_ADDR_VAR 0 4
23701: PUSH
23702: LD_VAR 0 2
23706: PPUSH
23707: CALL_OW 251
23711: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
23712: LD_ADDR_VAR 0 5
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: LD_INT 3
23722: PUSH
23723: LD_INT 5
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: LIST
23730: PUSH
23731: FOR_IN
23732: IFFALSE 23779
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
23734: LD_VAR 0 3
23738: PPUSH
23739: LD_VAR 0 5
23743: PPUSH
23744: LD_INT 2
23746: PPUSH
23747: CALL_OW 272
23751: PPUSH
23752: LD_VAR 0 4
23756: PPUSH
23757: LD_VAR 0 5
23761: PPUSH
23762: LD_INT 2
23764: PPUSH
23765: CALL_OW 273
23769: PPUSH
23770: LD_INT 1
23772: PPUSH
23773: CALL_OW 453
23777: GO 23731
23779: POP
23780: POP
// end ;
23781: GO 23679
23783: POP
23784: POP
// Say ( Heike , DH-End-2 ) ;
23785: LD_EXP 46
23789: PPUSH
23790: LD_STRING DH-End-2
23792: PPUSH
23793: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
23797: LD_INT 175
23799: PUSH
23800: LD_EXP 29
23804: PPUSH
23805: CALL 31573 0 1
23809: MUL
23810: PPUSH
23811: CALL_OW 67
// end ; if not isAlarm then
23815: LD_EXP 17
23819: NOT
23820: IFFALSE 23830
// isAlarm := true ;
23822: LD_ADDR_EXP 17
23826: PUSH
23827: LD_INT 1
23829: ST_TO_ADDR
// end ;
23830: LD_VAR 0 1
23834: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
23835: LD_INT 22
23837: PUSH
23838: LD_INT 2
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 21
23847: PUSH
23848: LD_INT 2
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 2
23857: PUSH
23858: LD_INT 101
23860: PUSH
23861: LD_INT 3
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 101
23870: PUSH
23871: LD_INT 6
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: LIST
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: LIST
23887: PPUSH
23888: CALL_OW 69
23892: IFFALSE 23905
23894: GO 23896
23896: DISABLE
// isAlarm := true ; end_of_file
23897: LD_ADDR_EXP 17
23901: PUSH
23902: LD_INT 1
23904: ST_TO_ADDR
23905: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
23906: LD_EXP 14
23910: PPUSH
23911: LD_INT 22
23913: PUSH
23914: LD_INT 2
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PPUSH
23921: CALL_OW 72
23925: PUSH
23926: LD_INT 3
23928: GREATER
23929: PUSH
23930: LD_EXP 17
23934: NOT
23935: AND
23936: IFFALSE 27981
23938: GO 23940
23940: DISABLE
23941: LD_INT 0
23943: PPUSH
23944: PPUSH
23945: PPUSH
23946: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
23947: LD_EXP 66
23951: PPUSH
23952: LD_INT 155
23954: PPUSH
23955: LD_INT 68
23957: PPUSH
23958: LD_INT 0
23960: PPUSH
23961: CALL_OW 48
// wait ( 0 0$1 ) ;
23965: LD_INT 35
23967: PPUSH
23968: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23972: LD_INT 35
23974: PPUSH
23975: CALL_OW 67
// if not HasTask ( ruDisturb ) then
23979: LD_EXP 66
23983: PPUSH
23984: CALL_OW 314
23988: NOT
23989: IFFALSE 24005
// ComMoveUnit ( ruDisturb , Heike ) ;
23991: LD_EXP 66
23995: PPUSH
23996: LD_EXP 46
24000: PPUSH
24001: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
24005: LD_EXP 46
24009: PPUSH
24010: LD_EXP 66
24014: PPUSH
24015: CALL_OW 296
24019: PUSH
24020: LD_INT 6
24022: LESS
24023: PUSH
24024: LD_EXP 66
24028: PPUSH
24029: CALL_OW 302
24033: AND
24034: IFFALSE 23972
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24036: LD_EXP 46
24040: PPUSH
24041: CALL_OW 257
24045: PUSH
24046: LD_INT 33
24048: NONEQUAL
24049: PUSH
24050: LD_EXP 14
24054: PPUSH
24055: LD_INT 22
24057: PUSH
24058: LD_INT 2
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 91
24067: PUSH
24068: LD_EXP 66
24072: PUSH
24073: LD_INT 8
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 2
24083: PUSH
24084: LD_INT 25
24086: PUSH
24087: LD_INT 1
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 25
24096: PUSH
24097: LD_INT 11
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 25
24106: PUSH
24107: LD_INT 32
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 25
24116: PUSH
24117: LD_INT 34
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: LIST
24135: PPUSH
24136: CALL_OW 72
24140: OR
24141: IFFALSE 24151
// isAlarm := true ;
24143: LD_ADDR_EXP 17
24147: PUSH
24148: LD_INT 1
24150: ST_TO_ADDR
// if isAlarm then
24151: LD_EXP 17
24155: IFFALSE 24159
// exit ;
24157: GO 27981
// DialogueOn ;
24159: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24163: LD_EXP 66
24167: PPUSH
24168: LD_STRING DMcn-Interrupt-1
24170: PPUSH
24171: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24175: LD_EXP 66
24179: PPUSH
24180: LD_STRING DMcn-Interrupt-2
24182: PPUSH
24183: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
24187: LD_EXP 66
24191: PPUSH
24192: LD_STRING DMcn-Interrupt-3
24194: PPUSH
24195: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
24199: LD_EXP 46
24203: PPUSH
24204: LD_STRING DH-Interrupt-a-4
24206: PPUSH
24207: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
24211: LD_EXP 66
24215: PPUSH
24216: LD_STRING DMcn-Interrupt-a-5
24218: PPUSH
24219: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
24223: LD_EXP 46
24227: PPUSH
24228: LD_STRING DH-Interrupt-a-6
24230: PPUSH
24231: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
24235: LD_EXP 66
24239: PPUSH
24240: LD_STRING DMcn-Interrupt-a-7
24242: PPUSH
24243: CALL_OW 88
// DialogueOff ;
24247: CALL_OW 7
// hasMuchin := true ;
24251: LD_ADDR_EXP 30
24255: PUSH
24256: LD_INT 1
24258: ST_TO_ADDR
// Query ( MuchinInfo ) ;
24259: LD_STRING MuchinInfo
24261: PPUSH
24262: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
24266: LD_STRING M2a
24268: PPUSH
24269: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
24273: LD_INT 105
24275: PPUSH
24276: LD_INT 55
24278: PPUSH
24279: CALL_OW 428
24283: PPUSH
24284: LD_INT 2
24286: PPUSH
24287: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
24291: LD_INT 115
24293: PPUSH
24294: LD_INT 65
24296: PPUSH
24297: CALL_OW 428
24301: PPUSH
24302: LD_INT 2
24304: PPUSH
24305: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
24309: LD_INT 109
24311: PPUSH
24312: LD_INT 59
24314: PPUSH
24315: LD_INT 2
24317: PPUSH
24318: LD_INT 10
24320: NEG
24321: PPUSH
24322: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
24326: LD_INT 109
24328: PPUSH
24329: LD_INT 59
24331: PPUSH
24332: CALL_OW 84
// wait ( 0 0$2 ) ;
24336: LD_INT 70
24338: PPUSH
24339: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
24343: LD_INT 109
24345: PPUSH
24346: LD_INT 59
24348: PPUSH
24349: LD_INT 2
24351: PPUSH
24352: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
24356: LD_INT 35
24358: PPUSH
24359: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24363: LD_EXP 66
24367: PPUSH
24368: LD_EXP 46
24372: PPUSH
24373: CALL_OW 296
24377: PUSH
24378: LD_INT 6
24380: GREATER
24381: IFFALSE 24397
// ComMoveUnit ( ruDisturb , Heike ) ;
24383: LD_EXP 66
24387: PPUSH
24388: LD_EXP 46
24392: PPUSH
24393: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24397: LD_EXP 46
24401: PPUSH
24402: CALL_OW 257
24406: PUSH
24407: LD_INT 33
24409: NONEQUAL
24410: PUSH
24411: LD_EXP 14
24415: PPUSH
24416: LD_INT 22
24418: PUSH
24419: LD_INT 2
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 91
24428: PUSH
24429: LD_EXP 66
24433: PUSH
24434: LD_INT 8
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 2
24444: PUSH
24445: LD_INT 25
24447: PUSH
24448: LD_INT 1
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 25
24457: PUSH
24458: LD_INT 11
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 25
24467: PUSH
24468: LD_INT 32
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 25
24477: PUSH
24478: LD_INT 34
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: LIST
24496: PPUSH
24497: CALL_OW 72
24501: OR
24502: IFFALSE 24514
// begin isAlarm := true ;
24504: LD_ADDR_EXP 17
24508: PUSH
24509: LD_INT 1
24511: ST_TO_ADDR
// exit ;
24512: GO 27981
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
24514: LD_INT 105
24516: PPUSH
24517: LD_INT 55
24519: PPUSH
24520: CALL_OW 428
24524: NOT
24525: PUSH
24526: LD_INT 115
24528: PPUSH
24529: LD_INT 65
24531: PPUSH
24532: CALL_OW 428
24536: NOT
24537: OR
24538: IFFALSE 24550
// begin isAlarm := true ;
24540: LD_ADDR_EXP 17
24544: PUSH
24545: LD_INT 1
24547: ST_TO_ADDR
// exit ;
24548: GO 27981
// end ; until not BuildingsInProgress ( 2 ) ;
24550: LD_INT 2
24552: PPUSH
24553: CALL_OW 345
24557: NOT
24558: IFFALSE 24356
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
24560: LD_INT 105
24562: PPUSH
24563: LD_INT 55
24565: PPUSH
24566: CALL_OW 428
24570: PPUSH
24571: LD_INT 3
24573: PPUSH
24574: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
24578: LD_INT 115
24580: PPUSH
24581: LD_INT 65
24583: PPUSH
24584: CALL_OW 428
24588: PPUSH
24589: LD_INT 3
24591: PPUSH
24592: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
24596: LD_STRING M2a-out
24598: PPUSH
24599: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
24603: LD_EXP 66
24607: PPUSH
24608: LD_INT 2
24610: PPUSH
24611: CALL_OW 120
// wait ( 0 0$3 ) ;
24615: LD_INT 105
24617: PPUSH
24618: CALL_OW 67
// hasMuchin := false ;
24622: LD_ADDR_EXP 30
24626: PUSH
24627: LD_INT 0
24629: ST_TO_ADDR
// wait ( 2 2$00 ) ;
24630: LD_INT 4200
24632: PPUSH
24633: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
24637: LD_INT 35
24639: PPUSH
24640: CALL_OW 67
// if not HasTask ( ruDisturb ) then
24644: LD_EXP 66
24648: PPUSH
24649: CALL_OW 314
24653: NOT
24654: IFFALSE 24670
// ComMoveUnit ( ruDisturb , Heike ) ;
24656: LD_EXP 66
24660: PPUSH
24661: LD_EXP 46
24665: PPUSH
24666: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
24670: LD_EXP 46
24674: PPUSH
24675: LD_EXP 66
24679: PPUSH
24680: CALL_OW 296
24684: PUSH
24685: LD_INT 6
24687: LESS
24688: PUSH
24689: LD_EXP 66
24693: PPUSH
24694: CALL_OW 302
24698: AND
24699: IFFALSE 24637
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24701: LD_EXP 46
24705: PPUSH
24706: CALL_OW 257
24710: PUSH
24711: LD_INT 33
24713: NONEQUAL
24714: PUSH
24715: LD_EXP 14
24719: PPUSH
24720: LD_INT 22
24722: PUSH
24723: LD_INT 2
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 91
24732: PUSH
24733: LD_EXP 66
24737: PUSH
24738: LD_INT 8
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 2
24748: PUSH
24749: LD_INT 25
24751: PUSH
24752: LD_INT 1
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 25
24761: PUSH
24762: LD_INT 11
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 25
24771: PUSH
24772: LD_INT 32
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 25
24781: PUSH
24782: LD_INT 34
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: LIST
24800: PPUSH
24801: CALL_OW 72
24805: OR
24806: IFFALSE 24816
// isAlarm := true ;
24808: LD_ADDR_EXP 17
24812: PUSH
24813: LD_INT 1
24815: ST_TO_ADDR
// if isAlarm then
24816: LD_EXP 17
24820: IFFALSE 24824
// exit ;
24822: GO 27981
// DialogueOn ;
24824: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24828: LD_EXP 66
24832: PPUSH
24833: LD_STRING DMcn-Interrupt-1
24835: PPUSH
24836: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24840: LD_EXP 66
24844: PPUSH
24845: LD_STRING DMcn-Interrupt-2
24847: PPUSH
24848: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
24852: LD_INT 176
24854: PPUSH
24855: LD_INT 54
24857: PPUSH
24858: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
24862: LD_INT 176
24864: PPUSH
24865: LD_INT 54
24867: PPUSH
24868: LD_INT 2
24870: PPUSH
24871: LD_INT 6
24873: NEG
24874: PPUSH
24875: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
24879: LD_INT 10
24881: PPUSH
24882: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
24886: LD_EXP 66
24890: PPUSH
24891: LD_STRING DMcn-Interrupt-b-3
24893: PPUSH
24894: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
24898: LD_EXP 46
24902: PPUSH
24903: LD_STRING DH-Interrupt-b-4
24905: PPUSH
24906: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
24910: LD_EXP 66
24914: PPUSH
24915: LD_STRING DMcn-Interrupt-b-5
24917: PPUSH
24918: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
24922: LD_EXP 46
24926: PPUSH
24927: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
24931: LD_INT 176
24933: PPUSH
24934: LD_INT 54
24936: PPUSH
24937: LD_INT 2
24939: PPUSH
24940: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
24944: LD_EXP 66
24948: PPUSH
24949: LD_STRING DMcn-Interrupt-b-6
24951: PPUSH
24952: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
24956: LD_EXP 46
24960: PPUSH
24961: LD_STRING DH-Interrupt-b-7
24963: PPUSH
24964: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
24968: LD_EXP 66
24972: PPUSH
24973: LD_STRING DMcn-Interrupt-b-8
24975: PPUSH
24976: CALL_OW 88
// DialogueOff ;
24980: CALL_OW 7
// Query ( MuchinInfo ) ;
24984: LD_STRING MuchinInfo
24986: PPUSH
24987: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
24991: LD_STRING M2b
24993: PPUSH
24994: CALL_OW 337
// hasMuchin := true ;
24998: LD_ADDR_EXP 30
25002: PUSH
25003: LD_INT 1
25005: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25006: LD_INT 35
25008: PPUSH
25009: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
25013: LD_EXP 66
25017: PPUSH
25018: LD_EXP 46
25022: PPUSH
25023: CALL_OW 296
25027: PUSH
25028: LD_INT 6
25030: GREATER
25031: IFFALSE 25047
// ComMoveUnit ( ruDisturb , Heike ) ;
25033: LD_EXP 66
25037: PPUSH
25038: LD_EXP 46
25042: PPUSH
25043: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25047: LD_EXP 46
25051: PPUSH
25052: CALL_OW 257
25056: PUSH
25057: LD_INT 33
25059: NONEQUAL
25060: PUSH
25061: LD_EXP 14
25065: PPUSH
25066: LD_INT 22
25068: PUSH
25069: LD_INT 2
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 91
25078: PUSH
25079: LD_EXP 66
25083: PUSH
25084: LD_INT 8
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 2
25094: PUSH
25095: LD_INT 25
25097: PUSH
25098: LD_INT 1
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 25
25107: PUSH
25108: LD_INT 11
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 25
25117: PUSH
25118: LD_INT 32
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 25
25127: PUSH
25128: LD_INT 34
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: LIST
25146: PPUSH
25147: CALL_OW 72
25151: OR
25152: IFFALSE 25164
// begin isAlarm := true ;
25154: LD_ADDR_EXP 17
25158: PUSH
25159: LD_INT 1
25161: ST_TO_ADDR
// exit ;
25162: GO 27981
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
25164: LD_EXP 46
25168: PPUSH
25169: LD_INT 61
25171: PPUSH
25172: CALL_OW 296
25176: PUSH
25177: LD_INT 4
25179: LESS
25180: IFFALSE 25006
// InGameOn ;
25182: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
25186: LD_INT 173
25188: PPUSH
25189: LD_INT 54
25191: PPUSH
25192: LD_INT 2
25194: PPUSH
25195: LD_INT 8
25197: NEG
25198: PPUSH
25199: CALL_OW 330
// SetSide ( Heike , 3 ) ;
25203: LD_EXP 46
25207: PPUSH
25208: LD_INT 3
25210: PPUSH
25211: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
25215: LD_EXP 46
25219: PPUSH
25220: LD_INT 61
25222: PPUSH
25223: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
25227: LD_EXP 66
25231: PPUSH
25232: LD_INT 61
25234: PPUSH
25235: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
25239: LD_EXP 53
25243: PUSH
25244: LD_EXP 14
25248: IN
25249: PUSH
25250: LD_EXP 53
25254: PPUSH
25255: LD_INT 61
25257: PPUSH
25258: CALL_OW 296
25262: PUSH
25263: LD_INT 12
25265: LESS
25266: AND
25267: IFFALSE 25311
// begin SetSide ( Markov , 3 ) ;
25269: LD_EXP 53
25273: PPUSH
25274: LD_INT 3
25276: PPUSH
25277: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
25281: LD_EXP 53
25285: PPUSH
25286: LD_INT 61
25288: PPUSH
25289: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
25293: LD_INT 35
25295: PPUSH
25296: CALL_OW 67
// until IsInUnit ( Markov ) ;
25300: LD_EXP 53
25304: PPUSH
25305: CALL_OW 310
25309: IFFALSE 25293
// end ; repeat wait ( 0 0$1 ) ;
25311: LD_INT 35
25313: PPUSH
25314: CALL_OW 67
// until IsInUnit ( Heike ) ;
25318: LD_EXP 46
25322: PPUSH
25323: CALL_OW 310
25327: IFFALSE 25311
// SetClass ( Heike , class_mechanic ) ;
25329: LD_EXP 46
25333: PPUSH
25334: LD_INT 3
25336: PPUSH
25337: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
25341: LD_INT 61
25343: PPUSH
25344: LD_INT 21
25346: PPUSH
25347: LD_INT 3
25349: PPUSH
25350: LD_INT 3
25352: PPUSH
25353: LD_INT 43
25355: PPUSH
25356: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
25360: LD_EXP 31
25364: PUSH
25365: LD_EXP 53
25369: PUSH
25370: LD_EXP 14
25374: IN
25375: PUSH
25376: LD_EXP 53
25380: PPUSH
25381: CALL_OW 310
25385: PUSH
25386: LD_INT 61
25388: EQUAL
25389: OR
25390: AND
25391: IFFALSE 25881
// begin wait ( 0 0$5 ) ;
25393: LD_INT 175
25395: PPUSH
25396: CALL_OW 67
// SetSide ( Heike , 2 ) ;
25400: LD_EXP 46
25404: PPUSH
25405: LD_INT 2
25407: PPUSH
25408: CALL_OW 235
// SetSide ( Markov , 2 ) ;
25412: LD_EXP 53
25416: PPUSH
25417: LD_INT 2
25419: PPUSH
25420: CALL_OW 235
// if not Markov in heikeSquad then
25424: LD_EXP 53
25428: PUSH
25429: LD_EXP 14
25433: IN
25434: NOT
25435: IFFALSE 25457
// heikeSquad := Join ( heikeSquad , Markov ) ;
25437: LD_ADDR_EXP 14
25441: PUSH
25442: LD_EXP 14
25446: PPUSH
25447: LD_EXP 53
25451: PPUSH
25452: CALL 67162 0 2
25456: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
25457: LD_EXP 53
25461: PPUSH
25462: LD_STRING DMar-Factory-1
25464: PPUSH
25465: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
25469: LD_INT 61
25471: PPUSH
25472: LD_INT 99
25474: PPUSH
25475: CALL_OW 329
// game_speed := 4 ;
25479: LD_ADDR_OWVAR 65
25483: PUSH
25484: LD_INT 4
25486: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
25487: LD_EXP 66
25491: PPUSH
25492: CALL_OW 122
// ComExitBuilding ( Markov ) ;
25496: LD_EXP 53
25500: PPUSH
25501: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
25505: LD_EXP 66
25509: PPUSH
25510: LD_INT 171
25512: PPUSH
25513: LD_INT 51
25515: PPUSH
25516: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
25520: LD_EXP 53
25524: PPUSH
25525: LD_INT 167
25527: PPUSH
25528: LD_INT 50
25530: PPUSH
25531: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
25535: LD_EXP 53
25539: PPUSH
25540: LD_EXP 66
25544: PPUSH
25545: CALL_OW 179
// wait ( 0 0$5 ) ;
25549: LD_INT 175
25551: PPUSH
25552: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
25556: LD_EXP 53
25560: PPUSH
25561: LD_STRING DMar-Factory-2
25563: PPUSH
25564: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
25568: LD_ADDR_VAR 0 2
25572: PUSH
25573: LD_INT 22
25575: PUSH
25576: LD_INT 3
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 33
25585: PUSH
25586: LD_INT 3
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PPUSH
25597: CALL_OW 69
25601: PUSH
25602: LD_INT 1
25604: ARRAY
25605: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
25606: LD_EXP 66
25610: PPUSH
25611: LD_VAR 0 2
25615: PPUSH
25616: CALL_OW 119
// game_speed := 4 ;
25620: LD_ADDR_OWVAR 65
25624: PUSH
25625: LD_INT 4
25627: ST_TO_ADDR
// async ;
25628: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
25629: LD_EXP 66
25633: PPUSH
25634: LD_STRING DMcn-Factory-3
25636: PPUSH
25637: CALL_OW 88
// wait ( 0 0$0.9 ) ;
25641: LD_INT 32
25643: PPUSH
25644: CALL_OW 67
// ComAttackUnit ( veh , ruDisturb ) ;
25648: LD_VAR 0 2
25652: PPUSH
25653: LD_EXP 66
25657: PPUSH
25658: CALL_OW 115
// sync ;
25662: SYNC
// wait ( 0 0$1 ) ;
25663: LD_INT 35
25665: PPUSH
25666: CALL_OW 67
// KillUnit ( ruDisturb ) ;
25670: LD_EXP 66
25674: PPUSH
25675: CALL_OW 66
// SetSide ( veh , 7 ) ;
25679: LD_VAR 0 2
25683: PPUSH
25684: LD_INT 7
25686: PPUSH
25687: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
25691: LD_VAR 0 2
25695: PPUSH
25696: LD_INT 84
25698: PPUSH
25699: LD_INT 38
25701: PPUSH
25702: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
25706: LD_EXP 67
25710: PUSH
25711: LD_INT 1
25713: ARRAY
25714: PPUSH
25715: CALL_OW 258
25719: PUSH
25720: LD_INT 1
25722: EQUAL
25723: IFFALSE 25743
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
25725: LD_EXP 67
25729: PUSH
25730: LD_INT 1
25732: ARRAY
25733: PPUSH
25734: LD_STRING DRum-Factory-4
25736: PPUSH
25737: CALL_OW 88
25741: GO 25759
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
25743: LD_EXP 67
25747: PUSH
25748: LD_INT 1
25750: ARRAY
25751: PPUSH
25752: LD_STRING DRuf-Factory-4
25754: PPUSH
25755: CALL_OW 88
// wait ( 0 0$1 ) ;
25759: LD_INT 35
25761: PPUSH
25762: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
25766: LD_EXP 67
25770: PPUSH
25771: LD_INT 26
25773: PUSH
25774: LD_INT 1
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PPUSH
25781: CALL_OW 72
25785: PUSH
25786: LD_INT 1
25788: ARRAY
25789: PPUSH
25790: LD_STRING DRum-Factory-6
25792: PPUSH
25793: CALL_OW 88
// wait ( 0 0$2 ) ;
25797: LD_INT 70
25799: PPUSH
25800: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
25804: LD_EXP 46
25808: PPUSH
25809: LD_INT 33
25811: PPUSH
25812: CALL_OW 336
// ComExitBuilding ( Heike ) ;
25816: LD_EXP 46
25820: PPUSH
25821: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25825: LD_EXP 46
25829: PPUSH
25830: LD_INT 168
25832: PPUSH
25833: LD_INT 54
25835: PPUSH
25836: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
25840: LD_INT 173
25842: PPUSH
25843: LD_INT 54
25845: PPUSH
25846: LD_INT 2
25848: PPUSH
25849: CALL_OW 331
// InGameOff ;
25853: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
25857: LD_STRING M2b-out
25859: PPUSH
25860: CALL_OW 337
// SetAchievement ( ACH_TOY ) ;
25864: LD_STRING ACH_TOY
25866: PPUSH
25867: CALL_OW 543
// hasMuchin := false ;
25871: LD_ADDR_EXP 30
25875: PUSH
25876: LD_INT 0
25878: ST_TO_ADDR
// exit ;
25879: GO 27981
// end ; wait ( 0 0$5 ) ;
25881: LD_INT 175
25883: PPUSH
25884: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
25888: LD_INT 61
25890: PPUSH
25891: LD_INT 99
25893: PPUSH
25894: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
25898: LD_EXP 53
25902: PUSH
25903: LD_EXP 14
25907: IN
25908: PUSH
25909: LD_EXP 53
25913: PPUSH
25914: CALL_OW 255
25918: PUSH
25919: LD_INT 3
25921: EQUAL
25922: AND
25923: IFFALSE 25946
// begin SetSide ( Markov , 2 ) ;
25925: LD_EXP 53
25929: PPUSH
25930: LD_INT 2
25932: PPUSH
25933: CALL_OW 235
// ComExitBuilding ( Markov ) ;
25937: LD_EXP 53
25941: PPUSH
25942: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
25946: LD_EXP 46
25950: PPUSH
25951: LD_INT 2
25953: PPUSH
25954: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
25958: LD_EXP 46
25962: PPUSH
25963: LD_INT 33
25965: PPUSH
25966: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
25970: LD_EXP 66
25974: PPUSH
25975: CALL_OW 122
// ComExitBuilding ( Heike ) ;
25979: LD_EXP 46
25983: PPUSH
25984: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25988: LD_EXP 46
25992: PPUSH
25993: LD_INT 168
25995: PPUSH
25996: LD_INT 54
25998: PPUSH
25999: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
26003: LD_INT 173
26005: PPUSH
26006: LD_INT 54
26008: PPUSH
26009: LD_INT 2
26011: PPUSH
26012: CALL_OW 331
// InGameOff ;
26016: CALL_OW 9
// wait ( 3 ) ;
26020: LD_INT 3
26022: PPUSH
26023: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
26027: LD_EXP 66
26031: PPUSH
26032: LD_INT 2
26034: PPUSH
26035: CALL_OW 120
// wait ( 0 0$3 ) ;
26039: LD_INT 105
26041: PPUSH
26042: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
26046: LD_STRING M2b-out
26048: PPUSH
26049: CALL_OW 337
// hasMuchin := false ;
26053: LD_ADDR_EXP 30
26057: PUSH
26058: LD_INT 0
26060: ST_TO_ADDR
// wait ( 2 2$00 ) ;
26061: LD_INT 4200
26063: PPUSH
26064: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
26068: LD_INT 35
26070: PPUSH
26071: CALL_OW 67
// if not HasTask ( ruDisturb ) then
26075: LD_EXP 66
26079: PPUSH
26080: CALL_OW 314
26084: NOT
26085: IFFALSE 26101
// ComMoveUnit ( ruDisturb , Heike ) ;
26087: LD_EXP 66
26091: PPUSH
26092: LD_EXP 46
26096: PPUSH
26097: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
26101: LD_EXP 46
26105: PPUSH
26106: LD_EXP 66
26110: PPUSH
26111: CALL_OW 296
26115: PUSH
26116: LD_INT 2
26118: LESS
26119: PUSH
26120: LD_EXP 66
26124: PPUSH
26125: CALL_OW 302
26129: AND
26130: IFFALSE 26068
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
26132: LD_EXP 46
26136: PPUSH
26137: CALL_OW 257
26141: PUSH
26142: LD_INT 33
26144: NONEQUAL
26145: PUSH
26146: LD_EXP 14
26150: PPUSH
26151: LD_INT 22
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 91
26163: PUSH
26164: LD_EXP 66
26168: PUSH
26169: LD_INT 8
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 2
26179: PUSH
26180: LD_INT 25
26182: PUSH
26183: LD_INT 1
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 25
26192: PUSH
26193: LD_INT 11
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 25
26202: PUSH
26203: LD_INT 32
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 25
26212: PUSH
26213: LD_INT 34
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: LIST
26231: PPUSH
26232: CALL_OW 72
26236: OR
26237: IFFALSE 26247
// isAlarm := true ;
26239: LD_ADDR_EXP 17
26243: PUSH
26244: LD_INT 1
26246: ST_TO_ADDR
// if isAlarm then
26247: LD_EXP 17
26251: IFFALSE 26255
// exit ;
26253: GO 27981
// ComTurnUnit ( Heike , ruDisturb ) ;
26255: LD_EXP 46
26259: PPUSH
26260: LD_EXP 66
26264: PPUSH
26265: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
26269: LD_EXP 66
26273: PPUSH
26274: LD_EXP 46
26278: PPUSH
26279: CALL_OW 119
// wait ( 3 ) ;
26283: LD_INT 3
26285: PPUSH
26286: CALL_OW 67
// for i := 1 to 3 do
26290: LD_ADDR_VAR 0 1
26294: PUSH
26295: DOUBLE
26296: LD_INT 1
26298: DEC
26299: ST_TO_ADDR
26300: LD_INT 3
26302: PUSH
26303: FOR_TO
26304: IFFALSE 26321
// CreateCratesArea ( 5 , cratesArea , false ) ;
26306: LD_INT 5
26308: PPUSH
26309: LD_INT 58
26311: PPUSH
26312: LD_INT 0
26314: PPUSH
26315: CALL_OW 55
26319: GO 26303
26321: POP
26322: POP
// uc_side := 3 ;
26323: LD_ADDR_OWVAR 20
26327: PUSH
26328: LD_INT 3
26330: ST_TO_ADDR
// uc_nation := nation_russian ;
26331: LD_ADDR_OWVAR 21
26335: PUSH
26336: LD_INT 3
26338: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
26339: LD_INT 21
26341: PPUSH
26342: LD_INT 3
26344: PPUSH
26345: LD_INT 1
26347: PPUSH
26348: LD_INT 51
26350: PPUSH
26351: LD_INT 100
26353: PPUSH
26354: CALL 34311 0 5
// veh := CreateVehicle ;
26358: LD_ADDR_VAR 0 2
26362: PUSH
26363: CALL_OW 45
26367: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
26368: LD_VAR 0 2
26372: PPUSH
26373: LD_INT 104
26375: PPUSH
26376: LD_INT 41
26378: PPUSH
26379: LD_INT 3
26381: PPUSH
26382: LD_INT 0
26384: PPUSH
26385: CALL 69302 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
26389: LD_VAR 0 2
26393: PPUSH
26394: LD_INT 1
26396: PPUSH
26397: LD_INT 100
26399: PPUSH
26400: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
26404: CALL_OW 44
26408: PPUSH
26409: LD_VAR 0 2
26413: PPUSH
26414: CALL_OW 52
// DialogueOn ;
26418: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
26422: LD_EXP 66
26426: PPUSH
26427: LD_STRING DMcn-Interrupt-1
26429: PPUSH
26430: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
26434: LD_EXP 66
26438: PPUSH
26439: LD_STRING DMcn-Interrupt-2
26441: PPUSH
26442: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
26446: LD_EXP 66
26450: PPUSH
26451: LD_STRING DMcn-Interrupt-c-3
26453: PPUSH
26454: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
26458: LD_INT 101
26460: PPUSH
26461: LD_INT 38
26463: PPUSH
26464: LD_INT 2
26466: PPUSH
26467: LD_INT 10
26469: NEG
26470: PPUSH
26471: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
26475: LD_INT 101
26477: PPUSH
26478: LD_INT 38
26480: PPUSH
26481: CALL_OW 84
// wait ( 0 0$2 ) ;
26485: LD_INT 70
26487: PPUSH
26488: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
26492: LD_INT 101
26494: PPUSH
26495: LD_INT 38
26497: PPUSH
26498: LD_INT 2
26500: PPUSH
26501: CALL_OW 331
// RemoveUnit ( veh ) ;
26505: LD_VAR 0 2
26509: PPUSH
26510: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
26514: LD_EXP 66
26518: PPUSH
26519: LD_STRING DMcn-Interrupt-c-4
26521: PPUSH
26522: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
26526: LD_EXP 46
26530: PPUSH
26531: LD_STRING DH-Interrupt-c-5
26533: PPUSH
26534: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
26538: LD_EXP 66
26542: PPUSH
26543: LD_STRING DMcn-Interrupt-c-6
26545: PPUSH
26546: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
26550: LD_EXP 46
26554: PPUSH
26555: LD_STRING DH-Interrupt-c-7
26557: PPUSH
26558: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
26562: LD_EXP 66
26566: PPUSH
26567: LD_STRING DMcn-Interrupt-c-8
26569: PPUSH
26570: CALL_OW 88
// DialogueOff ;
26574: CALL_OW 7
// hasMuchin := true ;
26578: LD_ADDR_EXP 30
26582: PUSH
26583: LD_INT 1
26585: ST_TO_ADDR
// Query ( MuchinInfo ) ;
26586: LD_STRING MuchinInfo
26588: PPUSH
26589: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
26593: LD_STRING M2c
26595: PPUSH
26596: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
26600: LD_INT 35
26602: PPUSH
26603: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
26607: LD_EXP 66
26611: PPUSH
26612: LD_EXP 46
26616: PPUSH
26617: CALL_OW 296
26621: PUSH
26622: LD_INT 6
26624: GREATER
26625: IFFALSE 26641
// ComMoveUnit ( ruDisturb , Heike ) ;
26627: LD_EXP 66
26631: PPUSH
26632: LD_EXP 46
26636: PPUSH
26637: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
26641: LD_EXP 46
26645: PPUSH
26646: CALL_OW 257
26650: PUSH
26651: LD_INT 33
26653: NONEQUAL
26654: PUSH
26655: LD_EXP 14
26659: PPUSH
26660: LD_INT 22
26662: PUSH
26663: LD_INT 2
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 91
26672: PUSH
26673: LD_EXP 66
26677: PUSH
26678: LD_INT 8
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 2
26688: PUSH
26689: LD_INT 25
26691: PUSH
26692: LD_INT 1
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 25
26701: PUSH
26702: LD_INT 11
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 25
26711: PUSH
26712: LD_INT 32
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 25
26721: PUSH
26722: LD_INT 34
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: LIST
26740: PPUSH
26741: CALL_OW 72
26745: OR
26746: IFFALSE 26758
// begin isAlarm := true ;
26748: LD_ADDR_EXP 17
26752: PUSH
26753: LD_INT 1
26755: ST_TO_ADDR
// exit ;
26756: GO 27981
// end ; until UnitFilter ( heikeSquad union Heike , [ f_distxy , 100 , 37 , 6 ] ) ;
26758: LD_EXP 14
26762: PUSH
26763: LD_EXP 46
26767: UNION
26768: PPUSH
26769: LD_INT 92
26771: PUSH
26772: LD_INT 100
26774: PUSH
26775: LD_INT 37
26777: PUSH
26778: LD_INT 6
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: PPUSH
26787: CALL_OW 72
26791: IFFALSE 26600
// PlaceSeeing ( 100 , 37 , 3 , - 10 ) ;
26793: LD_INT 100
26795: PPUSH
26796: LD_INT 37
26798: PPUSH
26799: LD_INT 3
26801: PPUSH
26802: LD_INT 10
26804: NEG
26805: PPUSH
26806: CALL_OW 330
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
26810: LD_ADDR_VAR 0 3
26814: PUSH
26815: LD_EXP 14
26819: PUSH
26820: LD_EXP 46
26824: UNION
26825: PPUSH
26826: LD_INT 25
26828: PUSH
26829: LD_INT 33
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 91
26838: PUSH
26839: LD_INT 6
26841: PUSH
26842: LD_INT 12
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: LIST
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PPUSH
26854: CALL_OW 72
26858: ST_TO_ADDR
// for i in tmp do
26859: LD_ADDR_VAR 0 1
26863: PUSH
26864: LD_VAR 0 3
26868: PUSH
26869: FOR_IN
26870: IFFALSE 26901
// begin SetSide ( i , 3 ) ;
26872: LD_VAR 0 1
26876: PPUSH
26877: LD_INT 3
26879: PPUSH
26880: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
26884: LD_VAR 0 1
26888: PPUSH
26889: LD_INT 101
26891: PPUSH
26892: LD_INT 38
26894: PPUSH
26895: CALL_OW 111
// end ;
26899: GO 26869
26901: POP
26902: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
26903: LD_EXP 66
26907: PPUSH
26908: LD_INT 104
26910: PPUSH
26911: LD_INT 37
26913: PPUSH
26914: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
26918: LD_EXP 66
26922: PPUSH
26923: LD_EXP 46
26927: PPUSH
26928: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
26932: LD_INT 35
26934: PPUSH
26935: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
26939: LD_ADDR_VAR 0 4
26943: PUSH
26944: LD_INT 58
26946: PPUSH
26947: CALL_OW 435
26951: ST_TO_ADDR
// for i in tmp do
26952: LD_ADDR_VAR 0 1
26956: PUSH
26957: LD_VAR 0 3
26961: PUSH
26962: FOR_IN
26963: IFFALSE 27006
// if not HasTask ( i ) then
26965: LD_VAR 0 1
26969: PPUSH
26970: CALL_OW 314
26974: NOT
26975: IFFALSE 27004
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
26977: LD_VAR 0 1
26981: PPUSH
26982: LD_VAR 0 4
26986: PUSH
26987: LD_INT 1
26989: ARRAY
26990: PPUSH
26991: LD_VAR 0 4
26995: PUSH
26996: LD_INT 2
26998: ARRAY
26999: PPUSH
27000: CALL_OW 117
27004: GO 26962
27006: POP
27007: POP
// until not cr ;
27008: LD_VAR 0 4
27012: NOT
27013: IFFALSE 26932
// wait ( 0 0$2 ) ;
27015: LD_INT 70
27017: PPUSH
27018: CALL_OW 67
// RemoveSeeing ( 100 , 37 , 3 ) ;
27022: LD_INT 100
27024: PPUSH
27025: LD_INT 37
27027: PPUSH
27028: LD_INT 3
27030: PPUSH
27031: CALL_OW 331
// for i in tmp do
27035: LD_ADDR_VAR 0 1
27039: PUSH
27040: LD_VAR 0 3
27044: PUSH
27045: FOR_IN
27046: IFFALSE 27062
// SetSide ( i , 2 ) ;
27048: LD_VAR 0 1
27052: PPUSH
27053: LD_INT 2
27055: PPUSH
27056: CALL_OW 235
27060: GO 27045
27062: POP
27063: POP
// if Kaia in tmp then
27064: LD_EXP 51
27068: PUSH
27069: LD_VAR 0 3
27073: IN
27074: IFFALSE 27375
// begin InGameOn ;
27076: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
27080: LD_EXP 51
27084: PPUSH
27085: LD_EXP 66
27089: PPUSH
27090: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
27094: LD_EXP 66
27098: PPUSH
27099: LD_EXP 51
27103: PPUSH
27104: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
27108: LD_EXP 51
27112: PPUSH
27113: LD_EXP 66
27117: PPUSH
27118: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
27122: LD_EXP 51
27126: PPUSH
27127: LD_STRING DK-Assassin-1
27129: PPUSH
27130: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
27134: LD_EXP 66
27138: PPUSH
27139: LD_STRING DMcn-Assassin-2
27141: PPUSH
27142: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
27146: LD_EXP 51
27150: PPUSH
27151: LD_STRING DK-Assassin-3
27153: PPUSH
27154: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
27158: LD_EXP 66
27162: PPUSH
27163: LD_STRING DMcn-Assassin-4
27165: PPUSH
27166: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
27170: LD_EXP 51
27174: PPUSH
27175: LD_STRING DK-Assassin-5
27177: PPUSH
27178: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
27182: LD_EXP 66
27186: PPUSH
27187: LD_STRING DMcn-Assassin-6
27189: PPUSH
27190: CALL_OW 88
// SetSide ( Kaia , 3 ) ;
27194: LD_EXP 51
27198: PPUSH
27199: LD_INT 3
27201: PPUSH
27202: CALL_OW 235
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
27206: LD_EXP 51
27210: PUSH
27211: LD_EXP 66
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PPUSH
27220: LD_INT 6
27222: PPUSH
27223: CALL_OW 120
// wait ( 0 0$5 ) ;
27227: LD_INT 175
27229: PPUSH
27230: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
27234: LD_EXP 51
27238: PPUSH
27239: LD_STRING DK-Assassin-7
27241: PPUSH
27242: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
27246: LD_EXP 66
27250: PPUSH
27251: LD_STRING DMcn-Assassin-8
27253: PPUSH
27254: CALL_OW 88
// wait ( 0 0$0.3 ) ;
27258: LD_INT 10
27260: PPUSH
27261: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
27265: LD_EXP 51
27269: PPUSH
27270: LD_STRING DK-Assassin-9
27272: PPUSH
27273: CALL_OW 88
// wait ( 0 0$2 ) ;
27277: LD_INT 70
27279: PPUSH
27280: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
27284: LD_EXP 51
27288: PPUSH
27289: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
27293: LD_EXP 66
27297: PPUSH
27298: CALL_OW 64
// SetSide ( Kaia , 2 ) ;
27302: LD_EXP 51
27306: PPUSH
27307: LD_INT 2
27309: PPUSH
27310: CALL_OW 235
// AddComMoveUnit ( Kaia , Heike ) ;
27314: LD_EXP 51
27318: PPUSH
27319: LD_EXP 46
27323: PPUSH
27324: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
27328: LD_EXP 51
27332: PPUSH
27333: LD_STRING DK-Assasin-10
27335: PPUSH
27336: CALL_OW 88
// InGameOff ;
27340: CALL_OW 9
// SetAchievement ( ACH_POKER ) ;
27344: LD_STRING ACH_POKER
27346: PPUSH
27347: CALL_OW 543
// ChangeMissionObjectives ( M2c-out ) ;
27351: LD_STRING M2c-out
27353: PPUSH
27354: CALL_OW 337
// wait ( 0 0$3 ) ;
27358: LD_INT 105
27360: PPUSH
27361: CALL_OW 67
// hasMuchin := false ;
27365: LD_ADDR_EXP 30
27369: PUSH
27370: LD_INT 0
27372: ST_TO_ADDR
// exit ;
27373: GO 27981
// end ; ChangeMissionObjectives ( M2c-out ) ;
27375: LD_STRING M2c-out
27377: PPUSH
27378: CALL_OW 337
// meetWithMuchin := true ;
27382: LD_ADDR_EXP 44
27386: PUSH
27387: LD_INT 1
27389: ST_TO_ADDR
// InGameOn ;
27390: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
27394: LD_EXP 66
27398: PPUSH
27399: LD_STRING DMcn-Fail-1
27401: PPUSH
27402: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
27406: LD_VAR 0 3
27410: PPUSH
27411: LD_INT 114
27413: PPUSH
27414: LD_INT 17
27416: PPUSH
27417: CALL_OW 111
// wait ( 0 0$1 ) ;
27421: LD_INT 35
27423: PPUSH
27424: CALL_OW 67
// async ;
27428: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
27429: LD_EXP 66
27433: PPUSH
27434: LD_EXP 46
27438: PPUSH
27439: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
27443: LD_EXP 66
27447: PPUSH
27448: LD_STRING DMcn-Fail-2
27450: PPUSH
27451: CALL_OW 88
// ComStop ( Heike ) ;
27455: LD_EXP 46
27459: PPUSH
27460: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
27464: LD_EXP 46
27468: PPUSH
27469: LD_EXP 66
27473: PPUSH
27474: CALL_OW 179
// sync ;
27478: SYNC
// Say ( Heike , DH-Fail-3 ) ;
27479: LD_EXP 46
27483: PPUSH
27484: LD_STRING DH-Fail-3
27486: PPUSH
27487: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
27491: LD_EXP 66
27495: PPUSH
27496: LD_STRING DMcn-Fail-4
27498: PPUSH
27499: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
27503: LD_EXP 46
27507: PUSH
27508: LD_EXP 66
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PPUSH
27517: LD_INT 41
27519: PPUSH
27520: LD_INT 19
27522: PPUSH
27523: CALL_OW 111
// wait ( 0 0$2 ) ;
27527: LD_INT 70
27529: PPUSH
27530: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
27534: LD_EXP 66
27538: PPUSH
27539: LD_INT 40
27541: PPUSH
27542: LD_INT 19
27544: PPUSH
27545: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
27549: LD_EXP 46
27553: PPUSH
27554: LD_INT 43
27556: PPUSH
27557: LD_INT 21
27559: PPUSH
27560: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
27564: LD_EXP 66
27568: PPUSH
27569: LD_EXP 46
27573: PPUSH
27574: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
27578: LD_EXP 46
27582: PPUSH
27583: LD_EXP 66
27587: PPUSH
27588: CALL_OW 179
// wait ( 0 0$2 ) ;
27592: LD_INT 70
27594: PPUSH
27595: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
27599: LD_EXP 66
27603: PPUSH
27604: LD_STRING DMcn-Fail-5
27606: PPUSH
27607: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
27611: LD_EXP 46
27615: PPUSH
27616: CALL_OW 87
// wait ( 0 0$2 ) ;
27620: LD_INT 70
27622: PPUSH
27623: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
27627: LD_EXP 66
27631: PPUSH
27632: LD_STRING DMcn-Fail-6
27634: PPUSH
27635: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
27639: LD_EXP 46
27643: PPUSH
27644: CALL_OW 87
// repeat wait ( 0 0$1 ) ;
27648: LD_INT 35
27650: PPUSH
27651: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
27655: LD_EXP 46
27659: PPUSH
27660: LD_INT 43
27662: PPUSH
27663: LD_INT 21
27665: PPUSH
27666: CALL_OW 307
27670: IFFALSE 27648
// CenterNowOnUnits ( Heike ) ;
27672: LD_EXP 46
27676: PPUSH
27677: CALL_OW 87
// case Query ( MuchinQuestion ) of 1 :
27681: LD_STRING MuchinQuestion
27683: PPUSH
27684: CALL_OW 97
27688: PUSH
27689: LD_INT 1
27691: DOUBLE
27692: EQUAL
27693: IFTRUE 27697
27695: GO 27797
27697: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
27698: LD_EXP 66
27702: PPUSH
27703: LD_STRING DMcn-Fail-7
27705: PPUSH
27706: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
27710: LD_EXP 46
27714: PPUSH
27715: LD_STRING DH-Fail-8
27717: PPUSH
27718: CALL_OW 88
// wait ( 0 0$0.3 ) ;
27722: LD_INT 10
27724: PPUSH
27725: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
27729: LD_EXP 46
27733: PPUSH
27734: LD_STRING DH-Fail-9
27736: PPUSH
27737: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
27741: LD_EXP 46
27745: PPUSH
27746: LD_STRING DH-Fail-10
27748: PPUSH
27749: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
27753: LD_EXP 66
27757: PPUSH
27758: LD_STRING DMcn-Fail-11
27760: PPUSH
27761: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
27765: LD_EXP 66
27769: PPUSH
27770: LD_EXP 46
27774: PPUSH
27775: CALL_OW 115
// wait ( 0 0$2 ) ;
27779: LD_INT 70
27781: PPUSH
27782: CALL_OW 67
// KillUnit ( Heike ) ;
27786: LD_EXP 46
27790: PPUSH
27791: CALL_OW 66
// end ; 2 :
27795: GO 27977
27797: LD_INT 2
27799: DOUBLE
27800: EQUAL
27801: IFTRUE 27805
27803: GO 27976
27805: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
27806: LD_EXP 46
27810: PPUSH
27811: LD_STRING DH-Fail-a-8
27813: PPUSH
27814: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
27818: LD_EXP 46
27822: PPUSH
27823: LD_STRING DH-Fail-a-9
27825: PPUSH
27826: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
27830: LD_EXP 46
27834: PPUSH
27835: LD_STRING DH-Fail-10
27837: PPUSH
27838: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
27842: LD_EXP 46
27846: PPUSH
27847: LD_STRING DH-Fail-a-11
27849: PPUSH
27850: CALL_OW 88
// async ;
27854: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
27855: LD_EXP 66
27859: PPUSH
27860: LD_EXP 46
27864: PPUSH
27865: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
27869: LD_EXP 66
27873: PPUSH
27874: LD_EXP 46
27878: PPUSH
27879: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
27883: LD_EXP 66
27887: PPUSH
27888: LD_STRING DH-Fail-12
27890: PPUSH
27891: CALL_OW 88
// sync ;
27895: SYNC
// wait ( 0 0$1 ) ;
27896: LD_INT 35
27898: PPUSH
27899: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
27903: LD_EXP 46
27907: PPUSH
27908: LD_STRING DH-Fail-a-13
27910: PPUSH
27911: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
27915: LD_EXP 66
27919: PPUSH
27920: LD_INT 100
27922: PPUSH
27923: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
27927: LD_EXP 66
27931: PPUSH
27932: LD_STRING DMcn-Fail-a-14
27934: PPUSH
27935: CALL_OW 91
// KillUnit ( ruDisturb ) ;
27939: LD_EXP 66
27943: PPUSH
27944: CALL_OW 66
// wait ( 0 0$1 ) ;
27948: LD_INT 35
27950: PPUSH
27951: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
27955: LD_EXP 46
27959: PPUSH
27960: LD_STRING DH-Fail-a-15
27962: PPUSH
27963: CALL_OW 88
// YouLost ( FailMuchin ) ;
27967: LD_STRING FailMuchin
27969: PPUSH
27970: CALL_OW 104
// end ; end ;
27974: GO 27977
27976: POP
// InGameOff ;
27977: CALL_OW 9
// end ;
27981: PPOPN 4
27983: END
// every 0 0$1 trigger FilterUnitsInArea ( baseOutsideBorderArea , [ f_side , 2 ] ) and not meetWithMuchin and hasMuchin marked gameStartEvent do
27984: LD_INT 23
27986: PPUSH
27987: LD_INT 22
27989: PUSH
27990: LD_INT 2
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PPUSH
27997: CALL_OW 70
28001: PUSH
28002: LD_EXP 44
28006: NOT
28007: AND
28008: PUSH
28009: LD_EXP 30
28013: AND
28014: IFFALSE 28027
28016: GO 28018
28018: DISABLE
// isAlarm := true ; end_of_file
28019: LD_ADDR_EXP 17
28023: PUSH
28024: LD_INT 1
28026: ST_TO_ADDR
28027: END
// every 0 0$1 marked gameStartEvent do
28028: GO 28030
28030: DISABLE
// begin enable ;
28031: ENABLE
// if not contactWithAmerican then
28032: LD_EXP 25
28036: NOT
28037: IFFALSE 28082
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
28039: LD_ADDR_OWVAR 47
28043: PUSH
28044: LD_STRING #X108-1
28046: PUSH
28047: LD_INT 22
28049: PUSH
28050: LD_INT 5
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 21
28059: PUSH
28060: LD_INT 1
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PPUSH
28071: CALL_OW 69
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: ST_TO_ADDR
28080: GO 28171
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , #X108-2 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ] ;
28082: LD_ADDR_OWVAR 47
28086: PUSH
28087: LD_STRING #X108-1
28089: PUSH
28090: LD_INT 22
28092: PUSH
28093: LD_INT 5
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 21
28102: PUSH
28103: LD_INT 1
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 50
28112: PUSH
28113: EMPTY
28114: LIST
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: LIST
28120: PPUSH
28121: CALL_OW 69
28125: PUSH
28126: LD_STRING #X108-2
28128: PUSH
28129: LD_INT 22
28131: PUSH
28132: LD_INT 4
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 21
28141: PUSH
28142: LD_INT 1
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 50
28151: PUSH
28152: EMPTY
28153: LIST
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: LIST
28159: PPUSH
28160: CALL_OW 69
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: ST_TO_ADDR
// end ; end_of_file
28171: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
28172: LD_EXP 46
28176: PPUSH
28177: LD_INT 59
28179: PPUSH
28180: CALL_OW 308
28184: IFFALSE 28306
28186: GO 28188
28188: DISABLE
// begin Query ( FinalInfo ) ;
28189: LD_STRING FinalInfo
28191: PPUSH
28192: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
28196: LD_INT 59
28198: PPUSH
28199: LD_INT 1
28201: PPUSH
28202: CALL_OW 424
// end_the_mission_allowed := true ;
28206: LD_ADDR_OWVAR 57
28210: PUSH
28211: LD_INT 1
28213: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28214: LD_INT 35
28216: PPUSH
28217: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
28221: LD_INT 22
28223: PUSH
28224: LD_INT 2
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 21
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 95
28243: PUSH
28244: LD_INT 59
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: LIST
28255: PPUSH
28256: CALL_OW 69
28260: PPUSH
28261: CALL 31573 0 1
28265: PUSH
28266: LD_INT 22
28268: PUSH
28269: LD_INT 2
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 21
28278: PUSH
28279: LD_INT 1
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PPUSH
28290: CALL_OW 69
28294: PPUSH
28295: CALL 31573 0 1
28299: EQUAL
28300: IFFALSE 28214
// EndMission ;
28302: CALL 28314 0 0
// end ;
28306: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
28307: CALL 28314 0 0
// end ;
28311: PPOPN 1
28313: END
// function EndMission ; var tmp ; begin
28314: LD_INT 0
28316: PPUSH
28317: PPUSH
// PlayOriginalMusic ;
28318: CALL 93210 0 0
// if not IsInArea ( Heike , finalArea ) then
28322: LD_EXP 46
28326: PPUSH
28327: LD_INT 59
28329: PPUSH
28330: CALL_OW 308
28334: NOT
28335: IFFALSE 28346
// begin Query ( HeikeOutOfArea ) ;
28337: LD_STRING HeikeOutOfArea
28339: PPUSH
28340: CALL_OW 97
// exit ;
28344: GO 29269
// end ; if not IsOk ( Heike ) then
28346: LD_EXP 46
28350: PPUSH
28351: CALL_OW 302
28355: NOT
28356: IFFALSE 28367
// begin Query ( HeikeIsHurt ) ;
28358: LD_STRING HeikeIsHurt
28360: PPUSH
28361: CALL_OW 97
// exit ;
28365: GO 29269
// end ; if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ) < 6 then
28367: LD_INT 22
28369: PUSH
28370: LD_INT 2
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 21
28379: PUSH
28380: LD_INT 1
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 50
28389: PUSH
28390: EMPTY
28391: LIST
28392: PUSH
28393: LD_INT 95
28395: PUSH
28396: LD_INT 59
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: PPUSH
28409: CALL_OW 69
28413: PPUSH
28414: CALL 31573 0 1
28418: PUSH
28419: LD_INT 6
28421: LESS
28422: IFFALSE 28431
// YouLost ( NeedMorePep ) ;
28424: LD_STRING NeedMorePep
28426: PPUSH
28427: CALL_OW 104
// if tick < 20 20$00 then
28431: LD_OWVAR 1
28435: PUSH
28436: LD_INT 42000
28438: LESS
28439: IFFALSE 28448
// SetAchievement ( ACH_HSPEED_8 ) ;
28441: LD_STRING ACH_HSPEED_8
28443: PPUSH
28444: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
28448: LD_INT 22
28450: PUSH
28451: LD_INT 5
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 21
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PPUSH
28472: CALL_OW 69
28476: PUSH
28477: LD_INT 0
28479: EQUAL
28480: PUSH
28481: LD_EXP 32
28485: PUSH
28486: LD_INT 0
28488: EQUAL
28489: AND
28490: IFFALSE 28504
// AddMedal ( med1 , 1 ) else
28492: LD_STRING med1
28494: PPUSH
28495: LD_INT 1
28497: PPUSH
28498: CALL_OW 101
28502: GO 28515
// AddMedal ( med1 , - 1 ) ;
28504: LD_STRING med1
28506: PPUSH
28507: LD_INT 1
28509: NEG
28510: PPUSH
28511: CALL_OW 101
// if explosivePlantedList >= 3 then
28515: LD_EXP 29
28519: PUSH
28520: LD_INT 3
28522: GREATEREQUAL
28523: IFFALSE 28537
// AddMedal ( med2 , 1 ) else
28525: LD_STRING med2
28527: PPUSH
28528: LD_INT 1
28530: PPUSH
28531: CALL_OW 101
28535: GO 28571
// if explosivePlantedList < 3 then
28537: LD_EXP 29
28541: PUSH
28542: LD_INT 3
28544: LESS
28545: IFFALSE 28560
// AddMedal ( med2 , - 2 ) else
28547: LD_STRING med2
28549: PPUSH
28550: LD_INT 2
28552: NEG
28553: PPUSH
28554: CALL_OW 101
28558: GO 28571
// AddMedal ( med2 , - 1 ) ;
28560: LD_STRING med2
28562: PPUSH
28563: LD_INT 1
28565: NEG
28566: PPUSH
28567: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
28571: LD_INT 5
28573: PPUSH
28574: LD_INT 2
28576: PPUSH
28577: CALL_OW 321
28581: PUSH
28582: LD_INT 2
28584: EQUAL
28585: IFFALSE 28599
// AddMedal ( med3 , 1 ) else
28587: LD_STRING med3
28589: PPUSH
28590: LD_INT 1
28592: PPUSH
28593: CALL_OW 101
28597: GO 28610
// AddMedal ( med3 , - 1 ) ;
28599: LD_STRING med3
28601: PPUSH
28602: LD_INT 1
28604: NEG
28605: PPUSH
28606: CALL_OW 101
// GiveMedals ( MAIN ) ;
28610: LD_STRING MAIN
28612: PPUSH
28613: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ;
28617: LD_ADDR_VAR 0 2
28621: PUSH
28622: LD_INT 22
28624: PUSH
28625: LD_INT 2
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 21
28634: PUSH
28635: LD_INT 1
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 50
28644: PUSH
28645: EMPTY
28646: LIST
28647: PUSH
28648: LD_INT 95
28650: PUSH
28651: LD_INT 59
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: PPUSH
28664: CALL_OW 69
28668: ST_TO_ADDR
// RewardPeople ( UnitFilter ( tmp , [ f_nation , 2 ] ) ) ;
28669: LD_VAR 0 2
28673: PPUSH
28674: LD_INT 23
28676: PUSH
28677: LD_INT 2
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PPUSH
28684: CALL_OW 72
28688: PPUSH
28689: CALL_OW 43
// if Doug and Doug in tmp then
28693: LD_EXP 60
28697: PUSH
28698: LD_EXP 60
28702: PUSH
28703: LD_VAR 0 2
28707: IN
28708: AND
28709: IFFALSE 28723
// SaveCharacters ( Doug , 08_UsCommander ) ;
28711: LD_EXP 60
28715: PPUSH
28716: LD_STRING 08_UsCommander
28718: PPUSH
28719: CALL_OW 38
// if Harris and Harris in tmp then
28723: LD_EXP 59
28727: PUSH
28728: LD_EXP 59
28732: PUSH
28733: LD_VAR 0 2
28737: IN
28738: AND
28739: IFFALSE 28753
// SaveCharacters ( Harris , 08_Harris ) ;
28741: LD_EXP 59
28745: PPUSH
28746: LD_STRING 08_Harris
28748: PPUSH
28749: CALL_OW 38
// SaveCharacters ( UnitFilter ( tmp , [ f_nation , 1 ] ) diff [ Doug , Harris ] , 08_Americans ) ;
28753: LD_VAR 0 2
28757: PPUSH
28758: LD_INT 23
28760: PUSH
28761: LD_INT 1
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PPUSH
28768: CALL_OW 72
28772: PUSH
28773: LD_EXP 60
28777: PUSH
28778: LD_EXP 59
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: DIFF
28787: PPUSH
28788: LD_STRING 08_Americans
28790: PPUSH
28791: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
28795: LD_EXP 46
28799: PPUSH
28800: CALL_OW 248
28804: PUSH
28805: LD_INT 3
28807: EQUAL
28808: IFFALSE 28838
// begin CopySkills ( Heike , HeikeTmp ) ;
28810: LD_EXP 46
28814: PPUSH
28815: LD_EXP 62
28819: PPUSH
28820: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
28824: LD_EXP 62
28828: PPUSH
28829: LD_STRING 08_Heike
28831: PPUSH
28832: CALL_OW 38
// end else
28836: GO 28850
// SaveCharacters ( Heike , 08_Heike ) ;
28838: LD_EXP 46
28842: PPUSH
28843: LD_STRING 08_Heike
28845: PPUSH
28846: CALL_OW 38
// if Aviradze and Aviradze in tmp then
28850: LD_EXP 56
28854: PUSH
28855: LD_EXP 56
28859: PUSH
28860: LD_VAR 0 2
28864: IN
28865: AND
28866: IFFALSE 28880
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
28868: LD_EXP 56
28872: PPUSH
28873: LD_STRING 08_Aviradze
28875: PPUSH
28876: CALL_OW 38
// if Ibrahim and Ibrahim in tmp then
28880: LD_EXP 49
28884: PUSH
28885: LD_EXP 49
28889: PUSH
28890: LD_VAR 0 2
28894: IN
28895: AND
28896: IFFALSE 28910
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
28898: LD_EXP 49
28902: PPUSH
28903: LD_STRING 08_Ibrahim
28905: PPUSH
28906: CALL_OW 38
// if Kamil and Kamil in tmp then
28910: LD_EXP 50
28914: PUSH
28915: LD_EXP 50
28919: PUSH
28920: LD_VAR 0 2
28924: IN
28925: AND
28926: IFFALSE 28940
// SaveCharacters ( Kamil , 08_Kamil ) ;
28928: LD_EXP 50
28932: PPUSH
28933: LD_STRING 08_Kamil
28935: PPUSH
28936: CALL_OW 38
// if Sophia and Sophia in tmp then
28940: LD_EXP 52
28944: PUSH
28945: LD_EXP 52
28949: PUSH
28950: LD_VAR 0 2
28954: IN
28955: AND
28956: IFFALSE 28970
// SaveCharacters ( Sophia , 08_Sophia ) ;
28958: LD_EXP 52
28962: PPUSH
28963: LD_STRING 08_Sophia
28965: PPUSH
28966: CALL_OW 38
// if Kaia and Kaia in tmp then
28970: LD_EXP 51
28974: PUSH
28975: LD_EXP 51
28979: PUSH
28980: LD_VAR 0 2
28984: IN
28985: AND
28986: IFFALSE 29000
// SaveCharacters ( Kaia , 08_Kaia ) ;
28988: LD_EXP 51
28992: PPUSH
28993: LD_STRING 08_Kaia
28995: PPUSH
28996: CALL_OW 38
// if Givi and Givi in tmp then
29000: LD_EXP 47
29004: PUSH
29005: LD_EXP 47
29009: PUSH
29010: LD_VAR 0 2
29014: IN
29015: AND
29016: IFFALSE 29073
// if GetNation ( Givi ) = nation_russian then
29018: LD_EXP 47
29022: PPUSH
29023: CALL_OW 248
29027: PUSH
29028: LD_INT 3
29030: EQUAL
29031: IFFALSE 29061
// begin CopySkills ( Givi , GiviTmp ) ;
29033: LD_EXP 47
29037: PPUSH
29038: LD_EXP 63
29042: PPUSH
29043: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
29047: LD_EXP 63
29051: PPUSH
29052: LD_STRING 08_Givi
29054: PPUSH
29055: CALL_OW 38
// end else
29059: GO 29073
// SaveCharacters ( Givi , 08_Givi ) ;
29061: LD_EXP 47
29065: PPUSH
29066: LD_STRING 08_Givi
29068: PPUSH
29069: CALL_OW 38
// if Mike and Mike in tmp then
29073: LD_EXP 48
29077: PUSH
29078: LD_EXP 48
29082: PUSH
29083: LD_VAR 0 2
29087: IN
29088: AND
29089: IFFALSE 29103
// SaveCharacters ( Mike , 08_Mike ) ;
29091: LD_EXP 48
29095: PPUSH
29096: LD_STRING 08_Mike
29098: PPUSH
29099: CALL_OW 38
// if Markov and Markov in tmp then
29103: LD_EXP 53
29107: PUSH
29108: LD_EXP 53
29112: PUSH
29113: LD_VAR 0 2
29117: IN
29118: AND
29119: IFFALSE 29133
// SaveCharacters ( Markov , 08_Markov ) ;
29121: LD_EXP 53
29125: PPUSH
29126: LD_STRING 08_Markov
29128: PPUSH
29129: CALL_OW 38
// if Kurt and Kurt in tmp then
29133: LD_EXP 55
29137: PUSH
29138: LD_EXP 55
29142: PUSH
29143: LD_VAR 0 2
29147: IN
29148: AND
29149: IFFALSE 29163
// SaveCharacters ( Kurt , 08_Kurt ) ;
29151: LD_EXP 55
29155: PPUSH
29156: LD_STRING 08_Kurt
29158: PPUSH
29159: CALL_OW 38
// if Olaf and Olaf in tmp then
29163: LD_EXP 54
29167: PUSH
29168: LD_EXP 54
29172: PUSH
29173: LD_VAR 0 2
29177: IN
29178: AND
29179: IFFALSE 29193
// SaveCharacters ( Olaf , 08_Olaf ) ;
29181: LD_EXP 54
29185: PPUSH
29186: LD_STRING 08_Olaf
29188: PPUSH
29189: CALL_OW 38
// if UnitFilter ( heikeSecondSquad , [ [ f_inarea , finalArea ] , [ f_ok ] ] ) then
29193: LD_EXP 57
29197: PPUSH
29198: LD_INT 95
29200: PUSH
29201: LD_INT 59
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 50
29210: PUSH
29211: EMPTY
29212: LIST
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PPUSH
29218: CALL_OW 72
29222: IFFALSE 29261
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , finalArea ] , [ f_ok ] ] ) , 08_others ) ;
29224: LD_EXP 57
29228: PPUSH
29229: LD_INT 95
29231: PUSH
29232: LD_INT 59
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 50
29241: PUSH
29242: EMPTY
29243: LIST
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PPUSH
29249: CALL_OW 72
29253: PPUSH
29254: LD_STRING 08_others
29256: PPUSH
29257: CALL_OW 38
// YouWin ;
29261: CALL_OW 103
// DialogueOff ;
29265: CALL_OW 7
// end ; end_of_file
29269: LD_VAR 0 1
29273: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
29274: LD_EXP 5
29278: IFFALSE 29468
29280: GO 29282
29282: DISABLE
29283: LD_INT 0
29285: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
29286: LD_INT 35
29288: PPUSH
29289: LD_INT 2100
29291: PPUSH
29292: CALL_OW 12
29296: PPUSH
29297: CALL_OW 67
// StopOriginalMusic ;
29301: CALL 93195 0 0
// weatherBusy := true ;
29305: LD_ADDR_EXP 37
29309: PUSH
29310: LD_INT 1
29312: ST_TO_ADDR
// for i := 1 to 3 do
29313: LD_ADDR_VAR 0 1
29317: PUSH
29318: DOUBLE
29319: LD_INT 1
29321: DEC
29322: ST_TO_ADDR
29323: LD_INT 3
29325: PUSH
29326: FOR_TO
29327: IFFALSE 29361
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
29329: LD_INT 1
29331: PPUSH
29332: LD_INT 100
29334: PUSH
29335: LD_INT 100
29337: PUSH
29338: LD_VAR 0 1
29342: MUL
29343: PLUS
29344: PPUSH
29345: LD_INT 60
29347: PPUSH
29348: CALL_OW 550
// wait ( 0 0$2 ) ;
29352: LD_INT 70
29354: PPUSH
29355: CALL_OW 67
// end ;
29359: GO 29326
29361: POP
29362: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
29363: LD_STRING ArStormRain.wav
29365: PPUSH
29366: LD_STRING OW_CUSTOM_COMMAND(103);
29368: PPUSH
29369: CALL 93225 0 2
// wait ( 0 0$3 ) ;
29373: LD_INT 105
29375: PPUSH
29376: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
29380: LD_INT 1
29382: PPUSH
29383: LD_INT 900
29385: PPUSH
29386: LD_INT 120
29388: PPUSH
29389: CALL_OW 550
// wait ( 0 0$10 ) ;
29393: LD_INT 350
29395: PPUSH
29396: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
29400: LD_INT 1
29402: PPUSH
29403: LD_INT 1500
29405: PPUSH
29406: LD_INT 300
29408: PPUSH
29409: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
29413: LD_INT 35
29415: PPUSH
29416: CALL_OW 67
// until not weatherBusy ;
29420: LD_EXP 37
29424: NOT
29425: IFFALSE 29413
// SetWeather ( 0 , 0 , 0 ) ;
29427: LD_INT 0
29429: PPUSH
29430: LD_INT 0
29432: PPUSH
29433: LD_INT 0
29435: PPUSH
29436: CALL_OW 550
// wait ( 5 5$00 ) ;
29440: LD_INT 10500
29442: PPUSH
29443: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
29447: LD_STRING ArStormNormal.wav
29449: PPUSH
29450: LD_STRING OW_CUSTOM_COMMAND(103);
29452: PPUSH
29453: CALL 93225 0 2
// wait ( 5 5$00 ) ;
29457: LD_INT 10500
29459: PPUSH
29460: CALL_OW 67
// PlayOriginalMusic ;
29464: CALL 93210 0 0
// end ; end_of_file
29468: PPOPN 1
29470: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29471: LD_INT 0
29473: PPUSH
29474: PPUSH
// if exist_mode then
29475: LD_VAR 0 2
29479: IFFALSE 29504
// unit := CreateCharacter ( prefix & ident ) else
29481: LD_ADDR_VAR 0 5
29485: PUSH
29486: LD_VAR 0 3
29490: PUSH
29491: LD_VAR 0 1
29495: STR
29496: PPUSH
29497: CALL_OW 34
29501: ST_TO_ADDR
29502: GO 29519
// unit := NewCharacter ( ident ) ;
29504: LD_ADDR_VAR 0 5
29508: PUSH
29509: LD_VAR 0 1
29513: PPUSH
29514: CALL_OW 25
29518: ST_TO_ADDR
// result := unit ;
29519: LD_ADDR_VAR 0 4
29523: PUSH
29524: LD_VAR 0 5
29528: ST_TO_ADDR
// end ;
29529: LD_VAR 0 4
29533: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29534: LD_INT 0
29536: PPUSH
29537: PPUSH
// if not side or not nation then
29538: LD_VAR 0 1
29542: NOT
29543: PUSH
29544: LD_VAR 0 2
29548: NOT
29549: OR
29550: IFFALSE 29554
// exit ;
29552: GO 30322
// case nation of nation_american :
29554: LD_VAR 0 2
29558: PUSH
29559: LD_INT 1
29561: DOUBLE
29562: EQUAL
29563: IFTRUE 29567
29565: GO 29781
29567: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29568: LD_ADDR_VAR 0 4
29572: PUSH
29573: LD_INT 35
29575: PUSH
29576: LD_INT 45
29578: PUSH
29579: LD_INT 46
29581: PUSH
29582: LD_INT 47
29584: PUSH
29585: LD_INT 82
29587: PUSH
29588: LD_INT 83
29590: PUSH
29591: LD_INT 84
29593: PUSH
29594: LD_INT 85
29596: PUSH
29597: LD_INT 86
29599: PUSH
29600: LD_INT 1
29602: PUSH
29603: LD_INT 2
29605: PUSH
29606: LD_INT 6
29608: PUSH
29609: LD_INT 15
29611: PUSH
29612: LD_INT 16
29614: PUSH
29615: LD_INT 7
29617: PUSH
29618: LD_INT 12
29620: PUSH
29621: LD_INT 13
29623: PUSH
29624: LD_INT 10
29626: PUSH
29627: LD_INT 14
29629: PUSH
29630: LD_INT 20
29632: PUSH
29633: LD_INT 21
29635: PUSH
29636: LD_INT 22
29638: PUSH
29639: LD_INT 25
29641: PUSH
29642: LD_INT 32
29644: PUSH
29645: LD_INT 27
29647: PUSH
29648: LD_INT 36
29650: PUSH
29651: LD_INT 69
29653: PUSH
29654: LD_INT 39
29656: PUSH
29657: LD_INT 34
29659: PUSH
29660: LD_INT 40
29662: PUSH
29663: LD_INT 48
29665: PUSH
29666: LD_INT 49
29668: PUSH
29669: LD_INT 50
29671: PUSH
29672: LD_INT 51
29674: PUSH
29675: LD_INT 52
29677: PUSH
29678: LD_INT 53
29680: PUSH
29681: LD_INT 54
29683: PUSH
29684: LD_INT 55
29686: PUSH
29687: LD_INT 56
29689: PUSH
29690: LD_INT 57
29692: PUSH
29693: LD_INT 58
29695: PUSH
29696: LD_INT 59
29698: PUSH
29699: LD_INT 60
29701: PUSH
29702: LD_INT 61
29704: PUSH
29705: LD_INT 62
29707: PUSH
29708: LD_INT 80
29710: PUSH
29711: LD_INT 82
29713: PUSH
29714: LD_INT 83
29716: PUSH
29717: LD_INT 84
29719: PUSH
29720: LD_INT 85
29722: PUSH
29723: LD_INT 86
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: ST_TO_ADDR
29779: GO 30246
29781: LD_INT 2
29783: DOUBLE
29784: EQUAL
29785: IFTRUE 29789
29787: GO 30015
29789: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29790: LD_ADDR_VAR 0 4
29794: PUSH
29795: LD_INT 35
29797: PUSH
29798: LD_INT 45
29800: PUSH
29801: LD_INT 46
29803: PUSH
29804: LD_INT 47
29806: PUSH
29807: LD_INT 82
29809: PUSH
29810: LD_INT 83
29812: PUSH
29813: LD_INT 84
29815: PUSH
29816: LD_INT 85
29818: PUSH
29819: LD_INT 87
29821: PUSH
29822: LD_INT 70
29824: PUSH
29825: LD_INT 1
29827: PUSH
29828: LD_INT 11
29830: PUSH
29831: LD_INT 3
29833: PUSH
29834: LD_INT 4
29836: PUSH
29837: LD_INT 5
29839: PUSH
29840: LD_INT 6
29842: PUSH
29843: LD_INT 15
29845: PUSH
29846: LD_INT 18
29848: PUSH
29849: LD_INT 7
29851: PUSH
29852: LD_INT 17
29854: PUSH
29855: LD_INT 8
29857: PUSH
29858: LD_INT 20
29860: PUSH
29861: LD_INT 21
29863: PUSH
29864: LD_INT 22
29866: PUSH
29867: LD_INT 72
29869: PUSH
29870: LD_INT 26
29872: PUSH
29873: LD_INT 69
29875: PUSH
29876: LD_INT 39
29878: PUSH
29879: LD_INT 40
29881: PUSH
29882: LD_INT 41
29884: PUSH
29885: LD_INT 42
29887: PUSH
29888: LD_INT 43
29890: PUSH
29891: LD_INT 48
29893: PUSH
29894: LD_INT 49
29896: PUSH
29897: LD_INT 50
29899: PUSH
29900: LD_INT 51
29902: PUSH
29903: LD_INT 52
29905: PUSH
29906: LD_INT 53
29908: PUSH
29909: LD_INT 54
29911: PUSH
29912: LD_INT 55
29914: PUSH
29915: LD_INT 56
29917: PUSH
29918: LD_INT 60
29920: PUSH
29921: LD_INT 61
29923: PUSH
29924: LD_INT 62
29926: PUSH
29927: LD_INT 66
29929: PUSH
29930: LD_INT 67
29932: PUSH
29933: LD_INT 68
29935: PUSH
29936: LD_INT 81
29938: PUSH
29939: LD_INT 82
29941: PUSH
29942: LD_INT 83
29944: PUSH
29945: LD_INT 84
29947: PUSH
29948: LD_INT 85
29950: PUSH
29951: LD_INT 87
29953: PUSH
29954: LD_INT 88
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: ST_TO_ADDR
30013: GO 30246
30015: LD_INT 3
30017: DOUBLE
30018: EQUAL
30019: IFTRUE 30023
30021: GO 30245
30023: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30024: LD_ADDR_VAR 0 4
30028: PUSH
30029: LD_INT 46
30031: PUSH
30032: LD_INT 47
30034: PUSH
30035: LD_INT 1
30037: PUSH
30038: LD_INT 2
30040: PUSH
30041: LD_INT 82
30043: PUSH
30044: LD_INT 83
30046: PUSH
30047: LD_INT 84
30049: PUSH
30050: LD_INT 85
30052: PUSH
30053: LD_INT 86
30055: PUSH
30056: LD_INT 11
30058: PUSH
30059: LD_INT 9
30061: PUSH
30062: LD_INT 20
30064: PUSH
30065: LD_INT 19
30067: PUSH
30068: LD_INT 21
30070: PUSH
30071: LD_INT 24
30073: PUSH
30074: LD_INT 22
30076: PUSH
30077: LD_INT 25
30079: PUSH
30080: LD_INT 28
30082: PUSH
30083: LD_INT 29
30085: PUSH
30086: LD_INT 30
30088: PUSH
30089: LD_INT 31
30091: PUSH
30092: LD_INT 37
30094: PUSH
30095: LD_INT 38
30097: PUSH
30098: LD_INT 32
30100: PUSH
30101: LD_INT 27
30103: PUSH
30104: LD_INT 33
30106: PUSH
30107: LD_INT 69
30109: PUSH
30110: LD_INT 39
30112: PUSH
30113: LD_INT 34
30115: PUSH
30116: LD_INT 40
30118: PUSH
30119: LD_INT 71
30121: PUSH
30122: LD_INT 23
30124: PUSH
30125: LD_INT 44
30127: PUSH
30128: LD_INT 48
30130: PUSH
30131: LD_INT 49
30133: PUSH
30134: LD_INT 50
30136: PUSH
30137: LD_INT 51
30139: PUSH
30140: LD_INT 52
30142: PUSH
30143: LD_INT 53
30145: PUSH
30146: LD_INT 54
30148: PUSH
30149: LD_INT 55
30151: PUSH
30152: LD_INT 56
30154: PUSH
30155: LD_INT 57
30157: PUSH
30158: LD_INT 58
30160: PUSH
30161: LD_INT 59
30163: PUSH
30164: LD_INT 63
30166: PUSH
30167: LD_INT 64
30169: PUSH
30170: LD_INT 65
30172: PUSH
30173: LD_INT 82
30175: PUSH
30176: LD_INT 83
30178: PUSH
30179: LD_INT 84
30181: PUSH
30182: LD_INT 85
30184: PUSH
30185: LD_INT 86
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: ST_TO_ADDR
30243: GO 30246
30245: POP
// if state > - 1 and state < 3 then
30246: LD_VAR 0 3
30250: PUSH
30251: LD_INT 1
30253: NEG
30254: GREATER
30255: PUSH
30256: LD_VAR 0 3
30260: PUSH
30261: LD_INT 3
30263: LESS
30264: AND
30265: IFFALSE 30322
// for i in result do
30267: LD_ADDR_VAR 0 5
30271: PUSH
30272: LD_VAR 0 4
30276: PUSH
30277: FOR_IN
30278: IFFALSE 30320
// if GetTech ( i , side ) <> state then
30280: LD_VAR 0 5
30284: PPUSH
30285: LD_VAR 0 1
30289: PPUSH
30290: CALL_OW 321
30294: PUSH
30295: LD_VAR 0 3
30299: NONEQUAL
30300: IFFALSE 30318
// result := result diff i ;
30302: LD_ADDR_VAR 0 4
30306: PUSH
30307: LD_VAR 0 4
30311: PUSH
30312: LD_VAR 0 5
30316: DIFF
30317: ST_TO_ADDR
30318: GO 30277
30320: POP
30321: POP
// end ;
30322: LD_VAR 0 4
30326: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30327: LD_INT 0
30329: PPUSH
30330: PPUSH
30331: PPUSH
// result := true ;
30332: LD_ADDR_VAR 0 3
30336: PUSH
30337: LD_INT 1
30339: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30340: LD_ADDR_VAR 0 5
30344: PUSH
30345: LD_VAR 0 2
30349: PPUSH
30350: CALL_OW 480
30354: ST_TO_ADDR
// if not tmp then
30355: LD_VAR 0 5
30359: NOT
30360: IFFALSE 30364
// exit ;
30362: GO 30413
// for i in tmp do
30364: LD_ADDR_VAR 0 4
30368: PUSH
30369: LD_VAR 0 5
30373: PUSH
30374: FOR_IN
30375: IFFALSE 30411
// if GetTech ( i , side ) <> state_researched then
30377: LD_VAR 0 4
30381: PPUSH
30382: LD_VAR 0 1
30386: PPUSH
30387: CALL_OW 321
30391: PUSH
30392: LD_INT 2
30394: NONEQUAL
30395: IFFALSE 30409
// begin result := false ;
30397: LD_ADDR_VAR 0 3
30401: PUSH
30402: LD_INT 0
30404: ST_TO_ADDR
// exit ;
30405: POP
30406: POP
30407: GO 30413
// end ;
30409: GO 30374
30411: POP
30412: POP
// end ;
30413: LD_VAR 0 3
30417: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30418: LD_INT 0
30420: PPUSH
30421: PPUSH
30422: PPUSH
30423: PPUSH
30424: PPUSH
30425: PPUSH
30426: PPUSH
30427: PPUSH
30428: PPUSH
30429: PPUSH
30430: PPUSH
30431: PPUSH
30432: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30433: LD_VAR 0 1
30437: NOT
30438: PUSH
30439: LD_VAR 0 1
30443: PPUSH
30444: CALL_OW 257
30448: PUSH
30449: LD_INT 9
30451: NONEQUAL
30452: OR
30453: IFFALSE 30457
// exit ;
30455: GO 31030
// side := GetSide ( unit ) ;
30457: LD_ADDR_VAR 0 9
30461: PUSH
30462: LD_VAR 0 1
30466: PPUSH
30467: CALL_OW 255
30471: ST_TO_ADDR
// tech_space := tech_spacanom ;
30472: LD_ADDR_VAR 0 12
30476: PUSH
30477: LD_INT 29
30479: ST_TO_ADDR
// tech_time := tech_taurad ;
30480: LD_ADDR_VAR 0 13
30484: PUSH
30485: LD_INT 28
30487: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30488: LD_ADDR_VAR 0 11
30492: PUSH
30493: LD_VAR 0 1
30497: PPUSH
30498: CALL_OW 310
30502: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30503: LD_VAR 0 11
30507: PPUSH
30508: CALL_OW 247
30512: PUSH
30513: LD_INT 2
30515: EQUAL
30516: IFFALSE 30520
// exit ;
30518: GO 31030
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30520: LD_ADDR_VAR 0 8
30524: PUSH
30525: LD_INT 81
30527: PUSH
30528: LD_VAR 0 9
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 3
30539: PUSH
30540: LD_INT 21
30542: PUSH
30543: LD_INT 3
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PPUSH
30558: CALL_OW 69
30562: ST_TO_ADDR
// if not tmp then
30563: LD_VAR 0 8
30567: NOT
30568: IFFALSE 30572
// exit ;
30570: GO 31030
// if in_unit then
30572: LD_VAR 0 11
30576: IFFALSE 30600
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30578: LD_ADDR_VAR 0 10
30582: PUSH
30583: LD_VAR 0 8
30587: PPUSH
30588: LD_VAR 0 11
30592: PPUSH
30593: CALL_OW 74
30597: ST_TO_ADDR
30598: GO 30620
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30600: LD_ADDR_VAR 0 10
30604: PUSH
30605: LD_VAR 0 8
30609: PPUSH
30610: LD_VAR 0 1
30614: PPUSH
30615: CALL_OW 74
30619: ST_TO_ADDR
// if not enemy then
30620: LD_VAR 0 10
30624: NOT
30625: IFFALSE 30629
// exit ;
30627: GO 31030
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30629: LD_VAR 0 11
30633: PUSH
30634: LD_VAR 0 11
30638: PPUSH
30639: LD_VAR 0 10
30643: PPUSH
30644: CALL_OW 296
30648: PUSH
30649: LD_INT 13
30651: GREATER
30652: AND
30653: PUSH
30654: LD_VAR 0 1
30658: PPUSH
30659: LD_VAR 0 10
30663: PPUSH
30664: CALL_OW 296
30668: PUSH
30669: LD_INT 12
30671: GREATER
30672: OR
30673: IFFALSE 30677
// exit ;
30675: GO 31030
// missile := [ 1 ] ;
30677: LD_ADDR_VAR 0 14
30681: PUSH
30682: LD_INT 1
30684: PUSH
30685: EMPTY
30686: LIST
30687: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30688: LD_VAR 0 9
30692: PPUSH
30693: LD_VAR 0 12
30697: PPUSH
30698: CALL_OW 325
30702: IFFALSE 30731
// missile := Replace ( missile , missile + 1 , 2 ) ;
30704: LD_ADDR_VAR 0 14
30708: PUSH
30709: LD_VAR 0 14
30713: PPUSH
30714: LD_VAR 0 14
30718: PUSH
30719: LD_INT 1
30721: PLUS
30722: PPUSH
30723: LD_INT 2
30725: PPUSH
30726: CALL_OW 1
30730: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30731: LD_VAR 0 9
30735: PPUSH
30736: LD_VAR 0 13
30740: PPUSH
30741: CALL_OW 325
30745: PUSH
30746: LD_VAR 0 10
30750: PPUSH
30751: CALL_OW 255
30755: PPUSH
30756: LD_VAR 0 13
30760: PPUSH
30761: CALL_OW 325
30765: NOT
30766: AND
30767: IFFALSE 30796
// missile := Replace ( missile , missile + 1 , 3 ) ;
30769: LD_ADDR_VAR 0 14
30773: PUSH
30774: LD_VAR 0 14
30778: PPUSH
30779: LD_VAR 0 14
30783: PUSH
30784: LD_INT 1
30786: PLUS
30787: PPUSH
30788: LD_INT 3
30790: PPUSH
30791: CALL_OW 1
30795: ST_TO_ADDR
// if missile < 2 then
30796: LD_VAR 0 14
30800: PUSH
30801: LD_INT 2
30803: LESS
30804: IFFALSE 30808
// exit ;
30806: GO 31030
// x := GetX ( enemy ) ;
30808: LD_ADDR_VAR 0 4
30812: PUSH
30813: LD_VAR 0 10
30817: PPUSH
30818: CALL_OW 250
30822: ST_TO_ADDR
// y := GetY ( enemy ) ;
30823: LD_ADDR_VAR 0 5
30827: PUSH
30828: LD_VAR 0 10
30832: PPUSH
30833: CALL_OW 251
30837: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30838: LD_ADDR_VAR 0 6
30842: PUSH
30843: LD_VAR 0 4
30847: PUSH
30848: LD_INT 1
30850: NEG
30851: PPUSH
30852: LD_INT 1
30854: PPUSH
30855: CALL_OW 12
30859: PLUS
30860: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30861: LD_ADDR_VAR 0 7
30865: PUSH
30866: LD_VAR 0 5
30870: PUSH
30871: LD_INT 1
30873: NEG
30874: PPUSH
30875: LD_INT 1
30877: PPUSH
30878: CALL_OW 12
30882: PLUS
30883: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30884: LD_VAR 0 6
30888: PPUSH
30889: LD_VAR 0 7
30893: PPUSH
30894: CALL_OW 488
30898: NOT
30899: IFFALSE 30921
// begin _x := x ;
30901: LD_ADDR_VAR 0 6
30905: PUSH
30906: LD_VAR 0 4
30910: ST_TO_ADDR
// _y := y ;
30911: LD_ADDR_VAR 0 7
30915: PUSH
30916: LD_VAR 0 5
30920: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30921: LD_ADDR_VAR 0 3
30925: PUSH
30926: LD_INT 1
30928: PPUSH
30929: LD_VAR 0 14
30933: PPUSH
30934: CALL_OW 12
30938: ST_TO_ADDR
// case i of 1 :
30939: LD_VAR 0 3
30943: PUSH
30944: LD_INT 1
30946: DOUBLE
30947: EQUAL
30948: IFTRUE 30952
30950: GO 30969
30952: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30953: LD_VAR 0 1
30957: PPUSH
30958: LD_VAR 0 10
30962: PPUSH
30963: CALL_OW 115
30967: GO 31030
30969: LD_INT 2
30971: DOUBLE
30972: EQUAL
30973: IFTRUE 30977
30975: GO 30999
30977: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30978: LD_VAR 0 1
30982: PPUSH
30983: LD_VAR 0 6
30987: PPUSH
30988: LD_VAR 0 7
30992: PPUSH
30993: CALL_OW 153
30997: GO 31030
30999: LD_INT 3
31001: DOUBLE
31002: EQUAL
31003: IFTRUE 31007
31005: GO 31029
31007: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31008: LD_VAR 0 1
31012: PPUSH
31013: LD_VAR 0 6
31017: PPUSH
31018: LD_VAR 0 7
31022: PPUSH
31023: CALL_OW 154
31027: GO 31030
31029: POP
// end ;
31030: LD_VAR 0 2
31034: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31035: LD_INT 0
31037: PPUSH
31038: PPUSH
31039: PPUSH
31040: PPUSH
31041: PPUSH
31042: PPUSH
// if not unit or not building then
31043: LD_VAR 0 1
31047: NOT
31048: PUSH
31049: LD_VAR 0 2
31053: NOT
31054: OR
31055: IFFALSE 31059
// exit ;
31057: GO 31217
// x := GetX ( building ) ;
31059: LD_ADDR_VAR 0 5
31063: PUSH
31064: LD_VAR 0 2
31068: PPUSH
31069: CALL_OW 250
31073: ST_TO_ADDR
// y := GetY ( building ) ;
31074: LD_ADDR_VAR 0 6
31078: PUSH
31079: LD_VAR 0 2
31083: PPUSH
31084: CALL_OW 251
31088: ST_TO_ADDR
// for i = 0 to 5 do
31089: LD_ADDR_VAR 0 4
31093: PUSH
31094: DOUBLE
31095: LD_INT 0
31097: DEC
31098: ST_TO_ADDR
31099: LD_INT 5
31101: PUSH
31102: FOR_TO
31103: IFFALSE 31215
// begin _x := ShiftX ( x , i , 3 ) ;
31105: LD_ADDR_VAR 0 7
31109: PUSH
31110: LD_VAR 0 5
31114: PPUSH
31115: LD_VAR 0 4
31119: PPUSH
31120: LD_INT 3
31122: PPUSH
31123: CALL_OW 272
31127: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31128: LD_ADDR_VAR 0 8
31132: PUSH
31133: LD_VAR 0 6
31137: PPUSH
31138: LD_VAR 0 4
31142: PPUSH
31143: LD_INT 3
31145: PPUSH
31146: CALL_OW 273
31150: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31151: LD_VAR 0 7
31155: PPUSH
31156: LD_VAR 0 8
31160: PPUSH
31161: CALL_OW 488
31165: NOT
31166: IFFALSE 31170
// continue ;
31168: GO 31102
// if HexInfo ( _x , _y ) = 0 then
31170: LD_VAR 0 7
31174: PPUSH
31175: LD_VAR 0 8
31179: PPUSH
31180: CALL_OW 428
31184: PUSH
31185: LD_INT 0
31187: EQUAL
31188: IFFALSE 31213
// begin ComMoveXY ( unit , _x , _y ) ;
31190: LD_VAR 0 1
31194: PPUSH
31195: LD_VAR 0 7
31199: PPUSH
31200: LD_VAR 0 8
31204: PPUSH
31205: CALL_OW 111
// exit ;
31209: POP
31210: POP
31211: GO 31217
// end ; end ;
31213: GO 31102
31215: POP
31216: POP
// end ;
31217: LD_VAR 0 3
31221: RET
// export function ScanBase ( side , base_area ) ; begin
31222: LD_INT 0
31224: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31225: LD_ADDR_VAR 0 3
31229: PUSH
31230: LD_VAR 0 2
31234: PPUSH
31235: LD_INT 81
31237: PUSH
31238: LD_VAR 0 1
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PPUSH
31247: CALL_OW 70
31251: ST_TO_ADDR
// end ;
31252: LD_VAR 0 3
31256: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31257: LD_INT 0
31259: PPUSH
31260: PPUSH
31261: PPUSH
31262: PPUSH
// result := false ;
31263: LD_ADDR_VAR 0 2
31267: PUSH
31268: LD_INT 0
31270: ST_TO_ADDR
// side := GetSide ( unit ) ;
31271: LD_ADDR_VAR 0 3
31275: PUSH
31276: LD_VAR 0 1
31280: PPUSH
31281: CALL_OW 255
31285: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31286: LD_ADDR_VAR 0 4
31290: PUSH
31291: LD_VAR 0 1
31295: PPUSH
31296: CALL_OW 248
31300: ST_TO_ADDR
// case nat of 1 :
31301: LD_VAR 0 4
31305: PUSH
31306: LD_INT 1
31308: DOUBLE
31309: EQUAL
31310: IFTRUE 31314
31312: GO 31325
31314: POP
// tech := tech_lassight ; 2 :
31315: LD_ADDR_VAR 0 5
31319: PUSH
31320: LD_INT 12
31322: ST_TO_ADDR
31323: GO 31364
31325: LD_INT 2
31327: DOUBLE
31328: EQUAL
31329: IFTRUE 31333
31331: GO 31344
31333: POP
// tech := tech_mortar ; 3 :
31334: LD_ADDR_VAR 0 5
31338: PUSH
31339: LD_INT 41
31341: ST_TO_ADDR
31342: GO 31364
31344: LD_INT 3
31346: DOUBLE
31347: EQUAL
31348: IFTRUE 31352
31350: GO 31363
31352: POP
// tech := tech_bazooka ; end ;
31353: LD_ADDR_VAR 0 5
31357: PUSH
31358: LD_INT 44
31360: ST_TO_ADDR
31361: GO 31364
31363: POP
// if Researched ( side , tech ) then
31364: LD_VAR 0 3
31368: PPUSH
31369: LD_VAR 0 5
31373: PPUSH
31374: CALL_OW 325
31378: IFFALSE 31405
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31380: LD_ADDR_VAR 0 2
31384: PUSH
31385: LD_INT 5
31387: PUSH
31388: LD_INT 8
31390: PUSH
31391: LD_INT 9
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: LIST
31398: PUSH
31399: LD_VAR 0 4
31403: ARRAY
31404: ST_TO_ADDR
// end ;
31405: LD_VAR 0 2
31409: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31410: LD_INT 0
31412: PPUSH
31413: PPUSH
31414: PPUSH
// if not mines then
31415: LD_VAR 0 2
31419: NOT
31420: IFFALSE 31424
// exit ;
31422: GO 31568
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31424: LD_ADDR_VAR 0 5
31428: PUSH
31429: LD_INT 81
31431: PUSH
31432: LD_VAR 0 1
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 3
31443: PUSH
31444: LD_INT 21
31446: PUSH
31447: LD_INT 3
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PPUSH
31462: CALL_OW 69
31466: ST_TO_ADDR
// for i in mines do
31467: LD_ADDR_VAR 0 4
31471: PUSH
31472: LD_VAR 0 2
31476: PUSH
31477: FOR_IN
31478: IFFALSE 31566
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31480: LD_VAR 0 4
31484: PUSH
31485: LD_INT 1
31487: ARRAY
31488: PPUSH
31489: LD_VAR 0 4
31493: PUSH
31494: LD_INT 2
31496: ARRAY
31497: PPUSH
31498: CALL_OW 458
31502: NOT
31503: IFFALSE 31507
// continue ;
31505: GO 31477
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31507: LD_VAR 0 4
31511: PUSH
31512: LD_INT 1
31514: ARRAY
31515: PPUSH
31516: LD_VAR 0 4
31520: PUSH
31521: LD_INT 2
31523: ARRAY
31524: PPUSH
31525: CALL_OW 428
31529: PUSH
31530: LD_VAR 0 5
31534: IN
31535: IFFALSE 31564
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31537: LD_VAR 0 4
31541: PUSH
31542: LD_INT 1
31544: ARRAY
31545: PPUSH
31546: LD_VAR 0 4
31550: PUSH
31551: LD_INT 2
31553: ARRAY
31554: PPUSH
31555: LD_VAR 0 1
31559: PPUSH
31560: CALL_OW 456
// end ;
31564: GO 31477
31566: POP
31567: POP
// end ;
31568: LD_VAR 0 3
31572: RET
// export function Count ( array ) ; begin
31573: LD_INT 0
31575: PPUSH
// result := array + 0 ;
31576: LD_ADDR_VAR 0 2
31580: PUSH
31581: LD_VAR 0 1
31585: PUSH
31586: LD_INT 0
31588: PLUS
31589: ST_TO_ADDR
// end ;
31590: LD_VAR 0 2
31594: RET
// export function IsEmpty ( building ) ; begin
31595: LD_INT 0
31597: PPUSH
// if not building then
31598: LD_VAR 0 1
31602: NOT
31603: IFFALSE 31607
// exit ;
31605: GO 31650
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31607: LD_ADDR_VAR 0 2
31611: PUSH
31612: LD_VAR 0 1
31616: PUSH
31617: LD_INT 22
31619: PUSH
31620: LD_VAR 0 1
31624: PPUSH
31625: CALL_OW 255
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 58
31636: PUSH
31637: EMPTY
31638: LIST
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PPUSH
31644: CALL_OW 69
31648: IN
31649: ST_TO_ADDR
// end ;
31650: LD_VAR 0 2
31654: RET
// export function IsNotFull ( building ) ; var places ; begin
31655: LD_INT 0
31657: PPUSH
31658: PPUSH
// if not building then
31659: LD_VAR 0 1
31663: NOT
31664: IFFALSE 31668
// exit ;
31666: GO 31696
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31668: LD_ADDR_VAR 0 2
31672: PUSH
31673: LD_VAR 0 1
31677: PPUSH
31678: LD_INT 3
31680: PUSH
31681: LD_INT 62
31683: PUSH
31684: EMPTY
31685: LIST
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PPUSH
31691: CALL_OW 72
31695: ST_TO_ADDR
// end ;
31696: LD_VAR 0 2
31700: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31701: LD_INT 0
31703: PPUSH
31704: PPUSH
31705: PPUSH
31706: PPUSH
// tmp := [ ] ;
31707: LD_ADDR_VAR 0 3
31711: PUSH
31712: EMPTY
31713: ST_TO_ADDR
// list := [ ] ;
31714: LD_ADDR_VAR 0 5
31718: PUSH
31719: EMPTY
31720: ST_TO_ADDR
// for i = 16 to 25 do
31721: LD_ADDR_VAR 0 4
31725: PUSH
31726: DOUBLE
31727: LD_INT 16
31729: DEC
31730: ST_TO_ADDR
31731: LD_INT 25
31733: PUSH
31734: FOR_TO
31735: IFFALSE 31808
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31737: LD_ADDR_VAR 0 3
31741: PUSH
31742: LD_VAR 0 3
31746: PUSH
31747: LD_INT 22
31749: PUSH
31750: LD_VAR 0 1
31754: PPUSH
31755: CALL_OW 255
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 91
31766: PUSH
31767: LD_VAR 0 1
31771: PUSH
31772: LD_INT 6
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 30
31782: PUSH
31783: LD_VAR 0 4
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: LIST
31796: PUSH
31797: EMPTY
31798: LIST
31799: PPUSH
31800: CALL_OW 69
31804: ADD
31805: ST_TO_ADDR
31806: GO 31734
31808: POP
31809: POP
// for i = 1 to tmp do
31810: LD_ADDR_VAR 0 4
31814: PUSH
31815: DOUBLE
31816: LD_INT 1
31818: DEC
31819: ST_TO_ADDR
31820: LD_VAR 0 3
31824: PUSH
31825: FOR_TO
31826: IFFALSE 31914
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31828: LD_ADDR_VAR 0 5
31832: PUSH
31833: LD_VAR 0 5
31837: PUSH
31838: LD_VAR 0 3
31842: PUSH
31843: LD_VAR 0 4
31847: ARRAY
31848: PPUSH
31849: CALL_OW 266
31853: PUSH
31854: LD_VAR 0 3
31858: PUSH
31859: LD_VAR 0 4
31863: ARRAY
31864: PPUSH
31865: CALL_OW 250
31869: PUSH
31870: LD_VAR 0 3
31874: PUSH
31875: LD_VAR 0 4
31879: ARRAY
31880: PPUSH
31881: CALL_OW 251
31885: PUSH
31886: LD_VAR 0 3
31890: PUSH
31891: LD_VAR 0 4
31895: ARRAY
31896: PPUSH
31897: CALL_OW 254
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: PUSH
31908: EMPTY
31909: LIST
31910: ADD
31911: ST_TO_ADDR
31912: GO 31825
31914: POP
31915: POP
// result := list ;
31916: LD_ADDR_VAR 0 2
31920: PUSH
31921: LD_VAR 0 5
31925: ST_TO_ADDR
// end ;
31926: LD_VAR 0 2
31930: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31931: LD_INT 0
31933: PPUSH
31934: PPUSH
31935: PPUSH
31936: PPUSH
31937: PPUSH
31938: PPUSH
31939: PPUSH
// if not factory then
31940: LD_VAR 0 1
31944: NOT
31945: IFFALSE 31949
// exit ;
31947: GO 32542
// if control = control_apeman then
31949: LD_VAR 0 4
31953: PUSH
31954: LD_INT 5
31956: EQUAL
31957: IFFALSE 32066
// begin tmp := UnitsInside ( factory ) ;
31959: LD_ADDR_VAR 0 8
31963: PUSH
31964: LD_VAR 0 1
31968: PPUSH
31969: CALL_OW 313
31973: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31974: LD_VAR 0 8
31978: PPUSH
31979: LD_INT 25
31981: PUSH
31982: LD_INT 12
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PPUSH
31989: CALL_OW 72
31993: NOT
31994: IFFALSE 32004
// control := control_manual ;
31996: LD_ADDR_VAR 0 4
32000: PUSH
32001: LD_INT 1
32003: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32004: LD_ADDR_VAR 0 8
32008: PUSH
32009: LD_VAR 0 1
32013: PPUSH
32014: CALL 31701 0 1
32018: ST_TO_ADDR
// if tmp then
32019: LD_VAR 0 8
32023: IFFALSE 32066
// begin for i in tmp do
32025: LD_ADDR_VAR 0 7
32029: PUSH
32030: LD_VAR 0 8
32034: PUSH
32035: FOR_IN
32036: IFFALSE 32064
// if i [ 1 ] = b_ext_radio then
32038: LD_VAR 0 7
32042: PUSH
32043: LD_INT 1
32045: ARRAY
32046: PUSH
32047: LD_INT 22
32049: EQUAL
32050: IFFALSE 32062
// begin control := control_remote ;
32052: LD_ADDR_VAR 0 4
32056: PUSH
32057: LD_INT 2
32059: ST_TO_ADDR
// break ;
32060: GO 32064
// end ;
32062: GO 32035
32064: POP
32065: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32066: LD_VAR 0 1
32070: PPUSH
32071: LD_VAR 0 2
32075: PPUSH
32076: LD_VAR 0 3
32080: PPUSH
32081: LD_VAR 0 4
32085: PPUSH
32086: LD_VAR 0 5
32090: PPUSH
32091: CALL_OW 448
32095: IFFALSE 32130
// begin result := [ chassis , engine , control , weapon ] ;
32097: LD_ADDR_VAR 0 6
32101: PUSH
32102: LD_VAR 0 2
32106: PUSH
32107: LD_VAR 0 3
32111: PUSH
32112: LD_VAR 0 4
32116: PUSH
32117: LD_VAR 0 5
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: ST_TO_ADDR
// exit ;
32128: GO 32542
// end ; _chassis := AvailableChassisList ( factory ) ;
32130: LD_ADDR_VAR 0 9
32134: PUSH
32135: LD_VAR 0 1
32139: PPUSH
32140: CALL_OW 475
32144: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32145: LD_ADDR_VAR 0 11
32149: PUSH
32150: LD_VAR 0 1
32154: PPUSH
32155: CALL_OW 476
32159: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32160: LD_ADDR_VAR 0 12
32164: PUSH
32165: LD_VAR 0 1
32169: PPUSH
32170: CALL_OW 477
32174: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32175: LD_ADDR_VAR 0 10
32179: PUSH
32180: LD_VAR 0 1
32184: PPUSH
32185: CALL_OW 478
32189: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32190: LD_VAR 0 9
32194: NOT
32195: PUSH
32196: LD_VAR 0 11
32200: NOT
32201: OR
32202: PUSH
32203: LD_VAR 0 12
32207: NOT
32208: OR
32209: PUSH
32210: LD_VAR 0 10
32214: NOT
32215: OR
32216: IFFALSE 32251
// begin result := [ chassis , engine , control , weapon ] ;
32218: LD_ADDR_VAR 0 6
32222: PUSH
32223: LD_VAR 0 2
32227: PUSH
32228: LD_VAR 0 3
32232: PUSH
32233: LD_VAR 0 4
32237: PUSH
32238: LD_VAR 0 5
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: ST_TO_ADDR
// exit ;
32249: GO 32542
// end ; if not chassis in _chassis then
32251: LD_VAR 0 2
32255: PUSH
32256: LD_VAR 0 9
32260: IN
32261: NOT
32262: IFFALSE 32288
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32264: LD_ADDR_VAR 0 2
32268: PUSH
32269: LD_VAR 0 9
32273: PUSH
32274: LD_INT 1
32276: PPUSH
32277: LD_VAR 0 9
32281: PPUSH
32282: CALL_OW 12
32286: ARRAY
32287: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32288: LD_VAR 0 2
32292: PPUSH
32293: LD_VAR 0 3
32297: PPUSH
32298: CALL 32547 0 2
32302: NOT
32303: IFFALSE 32362
// repeat engine := _engine [ 1 ] ;
32305: LD_ADDR_VAR 0 3
32309: PUSH
32310: LD_VAR 0 11
32314: PUSH
32315: LD_INT 1
32317: ARRAY
32318: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32319: LD_ADDR_VAR 0 11
32323: PUSH
32324: LD_VAR 0 11
32328: PPUSH
32329: LD_INT 1
32331: PPUSH
32332: CALL_OW 3
32336: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32337: LD_VAR 0 2
32341: PPUSH
32342: LD_VAR 0 3
32346: PPUSH
32347: CALL 32547 0 2
32351: PUSH
32352: LD_VAR 0 11
32356: PUSH
32357: EMPTY
32358: EQUAL
32359: OR
32360: IFFALSE 32305
// if not control in _control then
32362: LD_VAR 0 4
32366: PUSH
32367: LD_VAR 0 12
32371: IN
32372: NOT
32373: IFFALSE 32399
// control := _control [ rand ( 1 , _control ) ] ;
32375: LD_ADDR_VAR 0 4
32379: PUSH
32380: LD_VAR 0 12
32384: PUSH
32385: LD_INT 1
32387: PPUSH
32388: LD_VAR 0 12
32392: PPUSH
32393: CALL_OW 12
32397: ARRAY
32398: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32399: LD_VAR 0 2
32403: PPUSH
32404: LD_VAR 0 5
32408: PPUSH
32409: CALL 32767 0 2
32413: NOT
32414: IFFALSE 32473
// repeat weapon := _weapon [ 1 ] ;
32416: LD_ADDR_VAR 0 5
32420: PUSH
32421: LD_VAR 0 10
32425: PUSH
32426: LD_INT 1
32428: ARRAY
32429: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32430: LD_ADDR_VAR 0 10
32434: PUSH
32435: LD_VAR 0 10
32439: PPUSH
32440: LD_INT 1
32442: PPUSH
32443: CALL_OW 3
32447: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32448: LD_VAR 0 2
32452: PPUSH
32453: LD_VAR 0 5
32457: PPUSH
32458: CALL 32767 0 2
32462: PUSH
32463: LD_VAR 0 10
32467: PUSH
32468: EMPTY
32469: EQUAL
32470: OR
32471: IFFALSE 32416
// result := [ ] ;
32473: LD_ADDR_VAR 0 6
32477: PUSH
32478: EMPTY
32479: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32480: LD_VAR 0 1
32484: PPUSH
32485: LD_VAR 0 2
32489: PPUSH
32490: LD_VAR 0 3
32494: PPUSH
32495: LD_VAR 0 4
32499: PPUSH
32500: LD_VAR 0 5
32504: PPUSH
32505: CALL_OW 448
32509: IFFALSE 32542
// result := [ chassis , engine , control , weapon ] ;
32511: LD_ADDR_VAR 0 6
32515: PUSH
32516: LD_VAR 0 2
32520: PUSH
32521: LD_VAR 0 3
32525: PUSH
32526: LD_VAR 0 4
32530: PUSH
32531: LD_VAR 0 5
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: ST_TO_ADDR
// end ;
32542: LD_VAR 0 6
32546: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32547: LD_INT 0
32549: PPUSH
// if not chassis or not engine then
32550: LD_VAR 0 1
32554: NOT
32555: PUSH
32556: LD_VAR 0 2
32560: NOT
32561: OR
32562: IFFALSE 32566
// exit ;
32564: GO 32762
// case engine of engine_solar :
32566: LD_VAR 0 2
32570: PUSH
32571: LD_INT 2
32573: DOUBLE
32574: EQUAL
32575: IFTRUE 32579
32577: GO 32617
32579: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32580: LD_ADDR_VAR 0 3
32584: PUSH
32585: LD_INT 11
32587: PUSH
32588: LD_INT 12
32590: PUSH
32591: LD_INT 13
32593: PUSH
32594: LD_INT 14
32596: PUSH
32597: LD_INT 1
32599: PUSH
32600: LD_INT 2
32602: PUSH
32603: LD_INT 3
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: ST_TO_ADDR
32615: GO 32746
32617: LD_INT 1
32619: DOUBLE
32620: EQUAL
32621: IFTRUE 32625
32623: GO 32687
32625: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32626: LD_ADDR_VAR 0 3
32630: PUSH
32631: LD_INT 11
32633: PUSH
32634: LD_INT 12
32636: PUSH
32637: LD_INT 13
32639: PUSH
32640: LD_INT 14
32642: PUSH
32643: LD_INT 1
32645: PUSH
32646: LD_INT 2
32648: PUSH
32649: LD_INT 3
32651: PUSH
32652: LD_INT 4
32654: PUSH
32655: LD_INT 5
32657: PUSH
32658: LD_INT 21
32660: PUSH
32661: LD_INT 23
32663: PUSH
32664: LD_INT 22
32666: PUSH
32667: LD_INT 24
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: ST_TO_ADDR
32685: GO 32746
32687: LD_INT 3
32689: DOUBLE
32690: EQUAL
32691: IFTRUE 32695
32693: GO 32745
32695: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32696: LD_ADDR_VAR 0 3
32700: PUSH
32701: LD_INT 13
32703: PUSH
32704: LD_INT 14
32706: PUSH
32707: LD_INT 2
32709: PUSH
32710: LD_INT 3
32712: PUSH
32713: LD_INT 4
32715: PUSH
32716: LD_INT 5
32718: PUSH
32719: LD_INT 21
32721: PUSH
32722: LD_INT 22
32724: PUSH
32725: LD_INT 23
32727: PUSH
32728: LD_INT 24
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: ST_TO_ADDR
32743: GO 32746
32745: POP
// result := ( chassis in result ) ;
32746: LD_ADDR_VAR 0 3
32750: PUSH
32751: LD_VAR 0 1
32755: PUSH
32756: LD_VAR 0 3
32760: IN
32761: ST_TO_ADDR
// end ;
32762: LD_VAR 0 3
32766: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32767: LD_INT 0
32769: PPUSH
// if not chassis or not weapon then
32770: LD_VAR 0 1
32774: NOT
32775: PUSH
32776: LD_VAR 0 2
32780: NOT
32781: OR
32782: IFFALSE 32786
// exit ;
32784: GO 33846
// case weapon of us_machine_gun :
32786: LD_VAR 0 2
32790: PUSH
32791: LD_INT 2
32793: DOUBLE
32794: EQUAL
32795: IFTRUE 32799
32797: GO 32829
32799: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32800: LD_ADDR_VAR 0 3
32804: PUSH
32805: LD_INT 1
32807: PUSH
32808: LD_INT 2
32810: PUSH
32811: LD_INT 3
32813: PUSH
32814: LD_INT 4
32816: PUSH
32817: LD_INT 5
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: ST_TO_ADDR
32827: GO 33830
32829: LD_INT 3
32831: DOUBLE
32832: EQUAL
32833: IFTRUE 32837
32835: GO 32867
32837: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32838: LD_ADDR_VAR 0 3
32842: PUSH
32843: LD_INT 1
32845: PUSH
32846: LD_INT 2
32848: PUSH
32849: LD_INT 3
32851: PUSH
32852: LD_INT 4
32854: PUSH
32855: LD_INT 5
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: ST_TO_ADDR
32865: GO 33830
32867: LD_INT 11
32869: DOUBLE
32870: EQUAL
32871: IFTRUE 32875
32873: GO 32905
32875: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32876: LD_ADDR_VAR 0 3
32880: PUSH
32881: LD_INT 1
32883: PUSH
32884: LD_INT 2
32886: PUSH
32887: LD_INT 3
32889: PUSH
32890: LD_INT 4
32892: PUSH
32893: LD_INT 5
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: ST_TO_ADDR
32903: GO 33830
32905: LD_INT 4
32907: DOUBLE
32908: EQUAL
32909: IFTRUE 32913
32911: GO 32939
32913: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32914: LD_ADDR_VAR 0 3
32918: PUSH
32919: LD_INT 2
32921: PUSH
32922: LD_INT 3
32924: PUSH
32925: LD_INT 4
32927: PUSH
32928: LD_INT 5
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: ST_TO_ADDR
32937: GO 33830
32939: LD_INT 5
32941: DOUBLE
32942: EQUAL
32943: IFTRUE 32947
32945: GO 32973
32947: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32948: LD_ADDR_VAR 0 3
32952: PUSH
32953: LD_INT 2
32955: PUSH
32956: LD_INT 3
32958: PUSH
32959: LD_INT 4
32961: PUSH
32962: LD_INT 5
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: ST_TO_ADDR
32971: GO 33830
32973: LD_INT 9
32975: DOUBLE
32976: EQUAL
32977: IFTRUE 32981
32979: GO 33007
32981: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32982: LD_ADDR_VAR 0 3
32986: PUSH
32987: LD_INT 2
32989: PUSH
32990: LD_INT 3
32992: PUSH
32993: LD_INT 4
32995: PUSH
32996: LD_INT 5
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: ST_TO_ADDR
33005: GO 33830
33007: LD_INT 7
33009: DOUBLE
33010: EQUAL
33011: IFTRUE 33015
33013: GO 33041
33015: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33016: LD_ADDR_VAR 0 3
33020: PUSH
33021: LD_INT 2
33023: PUSH
33024: LD_INT 3
33026: PUSH
33027: LD_INT 4
33029: PUSH
33030: LD_INT 5
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: ST_TO_ADDR
33039: GO 33830
33041: LD_INT 12
33043: DOUBLE
33044: EQUAL
33045: IFTRUE 33049
33047: GO 33075
33049: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33050: LD_ADDR_VAR 0 3
33054: PUSH
33055: LD_INT 2
33057: PUSH
33058: LD_INT 3
33060: PUSH
33061: LD_INT 4
33063: PUSH
33064: LD_INT 5
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: ST_TO_ADDR
33073: GO 33830
33075: LD_INT 13
33077: DOUBLE
33078: EQUAL
33079: IFTRUE 33083
33081: GO 33109
33083: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33084: LD_ADDR_VAR 0 3
33088: PUSH
33089: LD_INT 2
33091: PUSH
33092: LD_INT 3
33094: PUSH
33095: LD_INT 4
33097: PUSH
33098: LD_INT 5
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: ST_TO_ADDR
33107: GO 33830
33109: LD_INT 14
33111: DOUBLE
33112: EQUAL
33113: IFTRUE 33117
33115: GO 33135
33117: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33118: LD_ADDR_VAR 0 3
33122: PUSH
33123: LD_INT 4
33125: PUSH
33126: LD_INT 5
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: ST_TO_ADDR
33133: GO 33830
33135: LD_INT 6
33137: DOUBLE
33138: EQUAL
33139: IFTRUE 33143
33141: GO 33161
33143: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33144: LD_ADDR_VAR 0 3
33148: PUSH
33149: LD_INT 4
33151: PUSH
33152: LD_INT 5
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: ST_TO_ADDR
33159: GO 33830
33161: LD_INT 10
33163: DOUBLE
33164: EQUAL
33165: IFTRUE 33169
33167: GO 33187
33169: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33170: LD_ADDR_VAR 0 3
33174: PUSH
33175: LD_INT 4
33177: PUSH
33178: LD_INT 5
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: ST_TO_ADDR
33185: GO 33830
33187: LD_INT 22
33189: DOUBLE
33190: EQUAL
33191: IFTRUE 33195
33193: GO 33221
33195: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33196: LD_ADDR_VAR 0 3
33200: PUSH
33201: LD_INT 11
33203: PUSH
33204: LD_INT 12
33206: PUSH
33207: LD_INT 13
33209: PUSH
33210: LD_INT 14
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: ST_TO_ADDR
33219: GO 33830
33221: LD_INT 23
33223: DOUBLE
33224: EQUAL
33225: IFTRUE 33229
33227: GO 33255
33229: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33230: LD_ADDR_VAR 0 3
33234: PUSH
33235: LD_INT 11
33237: PUSH
33238: LD_INT 12
33240: PUSH
33241: LD_INT 13
33243: PUSH
33244: LD_INT 14
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: ST_TO_ADDR
33253: GO 33830
33255: LD_INT 24
33257: DOUBLE
33258: EQUAL
33259: IFTRUE 33263
33261: GO 33289
33263: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33264: LD_ADDR_VAR 0 3
33268: PUSH
33269: LD_INT 11
33271: PUSH
33272: LD_INT 12
33274: PUSH
33275: LD_INT 13
33277: PUSH
33278: LD_INT 14
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: ST_TO_ADDR
33287: GO 33830
33289: LD_INT 30
33291: DOUBLE
33292: EQUAL
33293: IFTRUE 33297
33295: GO 33323
33297: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33298: LD_ADDR_VAR 0 3
33302: PUSH
33303: LD_INT 11
33305: PUSH
33306: LD_INT 12
33308: PUSH
33309: LD_INT 13
33311: PUSH
33312: LD_INT 14
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: ST_TO_ADDR
33321: GO 33830
33323: LD_INT 25
33325: DOUBLE
33326: EQUAL
33327: IFTRUE 33331
33329: GO 33349
33331: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33332: LD_ADDR_VAR 0 3
33336: PUSH
33337: LD_INT 13
33339: PUSH
33340: LD_INT 14
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: ST_TO_ADDR
33347: GO 33830
33349: LD_INT 27
33351: DOUBLE
33352: EQUAL
33353: IFTRUE 33357
33355: GO 33375
33357: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33358: LD_ADDR_VAR 0 3
33362: PUSH
33363: LD_INT 13
33365: PUSH
33366: LD_INT 14
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: ST_TO_ADDR
33373: GO 33830
33375: LD_INT 92
33377: DOUBLE
33378: EQUAL
33379: IFTRUE 33383
33381: GO 33409
33383: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33384: LD_ADDR_VAR 0 3
33388: PUSH
33389: LD_INT 11
33391: PUSH
33392: LD_INT 12
33394: PUSH
33395: LD_INT 13
33397: PUSH
33398: LD_INT 14
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: ST_TO_ADDR
33407: GO 33830
33409: LD_INT 28
33411: DOUBLE
33412: EQUAL
33413: IFTRUE 33417
33415: GO 33435
33417: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33418: LD_ADDR_VAR 0 3
33422: PUSH
33423: LD_INT 13
33425: PUSH
33426: LD_INT 14
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: ST_TO_ADDR
33433: GO 33830
33435: LD_INT 29
33437: DOUBLE
33438: EQUAL
33439: IFTRUE 33443
33441: GO 33461
33443: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33444: LD_ADDR_VAR 0 3
33448: PUSH
33449: LD_INT 13
33451: PUSH
33452: LD_INT 14
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: ST_TO_ADDR
33459: GO 33830
33461: LD_INT 31
33463: DOUBLE
33464: EQUAL
33465: IFTRUE 33469
33467: GO 33487
33469: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33470: LD_ADDR_VAR 0 3
33474: PUSH
33475: LD_INT 13
33477: PUSH
33478: LD_INT 14
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: ST_TO_ADDR
33485: GO 33830
33487: LD_INT 26
33489: DOUBLE
33490: EQUAL
33491: IFTRUE 33495
33493: GO 33513
33495: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33496: LD_ADDR_VAR 0 3
33500: PUSH
33501: LD_INT 13
33503: PUSH
33504: LD_INT 14
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: ST_TO_ADDR
33511: GO 33830
33513: LD_INT 42
33515: DOUBLE
33516: EQUAL
33517: IFTRUE 33521
33519: GO 33547
33521: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33522: LD_ADDR_VAR 0 3
33526: PUSH
33527: LD_INT 21
33529: PUSH
33530: LD_INT 22
33532: PUSH
33533: LD_INT 23
33535: PUSH
33536: LD_INT 24
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: ST_TO_ADDR
33545: GO 33830
33547: LD_INT 43
33549: DOUBLE
33550: EQUAL
33551: IFTRUE 33555
33553: GO 33581
33555: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33556: LD_ADDR_VAR 0 3
33560: PUSH
33561: LD_INT 21
33563: PUSH
33564: LD_INT 22
33566: PUSH
33567: LD_INT 23
33569: PUSH
33570: LD_INT 24
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: ST_TO_ADDR
33579: GO 33830
33581: LD_INT 44
33583: DOUBLE
33584: EQUAL
33585: IFTRUE 33589
33587: GO 33615
33589: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33590: LD_ADDR_VAR 0 3
33594: PUSH
33595: LD_INT 21
33597: PUSH
33598: LD_INT 22
33600: PUSH
33601: LD_INT 23
33603: PUSH
33604: LD_INT 24
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: ST_TO_ADDR
33613: GO 33830
33615: LD_INT 45
33617: DOUBLE
33618: EQUAL
33619: IFTRUE 33623
33621: GO 33649
33623: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33624: LD_ADDR_VAR 0 3
33628: PUSH
33629: LD_INT 21
33631: PUSH
33632: LD_INT 22
33634: PUSH
33635: LD_INT 23
33637: PUSH
33638: LD_INT 24
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: ST_TO_ADDR
33647: GO 33830
33649: LD_INT 49
33651: DOUBLE
33652: EQUAL
33653: IFTRUE 33657
33655: GO 33683
33657: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33658: LD_ADDR_VAR 0 3
33662: PUSH
33663: LD_INT 21
33665: PUSH
33666: LD_INT 22
33668: PUSH
33669: LD_INT 23
33671: PUSH
33672: LD_INT 24
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: ST_TO_ADDR
33681: GO 33830
33683: LD_INT 51
33685: DOUBLE
33686: EQUAL
33687: IFTRUE 33691
33689: GO 33717
33691: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33692: LD_ADDR_VAR 0 3
33696: PUSH
33697: LD_INT 21
33699: PUSH
33700: LD_INT 22
33702: PUSH
33703: LD_INT 23
33705: PUSH
33706: LD_INT 24
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: ST_TO_ADDR
33715: GO 33830
33717: LD_INT 52
33719: DOUBLE
33720: EQUAL
33721: IFTRUE 33725
33723: GO 33751
33725: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33726: LD_ADDR_VAR 0 3
33730: PUSH
33731: LD_INT 21
33733: PUSH
33734: LD_INT 22
33736: PUSH
33737: LD_INT 23
33739: PUSH
33740: LD_INT 24
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: ST_TO_ADDR
33749: GO 33830
33751: LD_INT 53
33753: DOUBLE
33754: EQUAL
33755: IFTRUE 33759
33757: GO 33777
33759: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33760: LD_ADDR_VAR 0 3
33764: PUSH
33765: LD_INT 23
33767: PUSH
33768: LD_INT 24
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: ST_TO_ADDR
33775: GO 33830
33777: LD_INT 46
33779: DOUBLE
33780: EQUAL
33781: IFTRUE 33785
33783: GO 33803
33785: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33786: LD_ADDR_VAR 0 3
33790: PUSH
33791: LD_INT 23
33793: PUSH
33794: LD_INT 24
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: ST_TO_ADDR
33801: GO 33830
33803: LD_INT 47
33805: DOUBLE
33806: EQUAL
33807: IFTRUE 33811
33809: GO 33829
33811: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33812: LD_ADDR_VAR 0 3
33816: PUSH
33817: LD_INT 23
33819: PUSH
33820: LD_INT 24
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: ST_TO_ADDR
33827: GO 33830
33829: POP
// result := ( chassis in result ) ;
33830: LD_ADDR_VAR 0 3
33834: PUSH
33835: LD_VAR 0 1
33839: PUSH
33840: LD_VAR 0 3
33844: IN
33845: ST_TO_ADDR
// end ;
33846: LD_VAR 0 3
33850: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33851: LD_INT 0
33853: PPUSH
33854: PPUSH
33855: PPUSH
33856: PPUSH
33857: PPUSH
33858: PPUSH
33859: PPUSH
// result := array ;
33860: LD_ADDR_VAR 0 5
33864: PUSH
33865: LD_VAR 0 1
33869: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33870: LD_VAR 0 1
33874: NOT
33875: PUSH
33876: LD_VAR 0 2
33880: NOT
33881: OR
33882: PUSH
33883: LD_VAR 0 3
33887: NOT
33888: OR
33889: PUSH
33890: LD_VAR 0 2
33894: PUSH
33895: LD_VAR 0 1
33899: GREATER
33900: OR
33901: PUSH
33902: LD_VAR 0 3
33906: PUSH
33907: LD_VAR 0 1
33911: GREATER
33912: OR
33913: IFFALSE 33917
// exit ;
33915: GO 34213
// if direction then
33917: LD_VAR 0 4
33921: IFFALSE 33985
// begin d := 1 ;
33923: LD_ADDR_VAR 0 9
33927: PUSH
33928: LD_INT 1
33930: ST_TO_ADDR
// if i_from > i_to then
33931: LD_VAR 0 2
33935: PUSH
33936: LD_VAR 0 3
33940: GREATER
33941: IFFALSE 33967
// length := ( array - i_from ) + i_to else
33943: LD_ADDR_VAR 0 11
33947: PUSH
33948: LD_VAR 0 1
33952: PUSH
33953: LD_VAR 0 2
33957: MINUS
33958: PUSH
33959: LD_VAR 0 3
33963: PLUS
33964: ST_TO_ADDR
33965: GO 33983
// length := i_to - i_from ;
33967: LD_ADDR_VAR 0 11
33971: PUSH
33972: LD_VAR 0 3
33976: PUSH
33977: LD_VAR 0 2
33981: MINUS
33982: ST_TO_ADDR
// end else
33983: GO 34046
// begin d := - 1 ;
33985: LD_ADDR_VAR 0 9
33989: PUSH
33990: LD_INT 1
33992: NEG
33993: ST_TO_ADDR
// if i_from > i_to then
33994: LD_VAR 0 2
33998: PUSH
33999: LD_VAR 0 3
34003: GREATER
34004: IFFALSE 34024
// length := i_from - i_to else
34006: LD_ADDR_VAR 0 11
34010: PUSH
34011: LD_VAR 0 2
34015: PUSH
34016: LD_VAR 0 3
34020: MINUS
34021: ST_TO_ADDR
34022: GO 34046
// length := ( array - i_to ) + i_from ;
34024: LD_ADDR_VAR 0 11
34028: PUSH
34029: LD_VAR 0 1
34033: PUSH
34034: LD_VAR 0 3
34038: MINUS
34039: PUSH
34040: LD_VAR 0 2
34044: PLUS
34045: ST_TO_ADDR
// end ; if not length then
34046: LD_VAR 0 11
34050: NOT
34051: IFFALSE 34055
// exit ;
34053: GO 34213
// tmp := array ;
34055: LD_ADDR_VAR 0 10
34059: PUSH
34060: LD_VAR 0 1
34064: ST_TO_ADDR
// for i = 1 to length do
34065: LD_ADDR_VAR 0 6
34069: PUSH
34070: DOUBLE
34071: LD_INT 1
34073: DEC
34074: ST_TO_ADDR
34075: LD_VAR 0 11
34079: PUSH
34080: FOR_TO
34081: IFFALSE 34201
// begin for j = 1 to array do
34083: LD_ADDR_VAR 0 7
34087: PUSH
34088: DOUBLE
34089: LD_INT 1
34091: DEC
34092: ST_TO_ADDR
34093: LD_VAR 0 1
34097: PUSH
34098: FOR_TO
34099: IFFALSE 34187
// begin k := j + d ;
34101: LD_ADDR_VAR 0 8
34105: PUSH
34106: LD_VAR 0 7
34110: PUSH
34111: LD_VAR 0 9
34115: PLUS
34116: ST_TO_ADDR
// if k > array then
34117: LD_VAR 0 8
34121: PUSH
34122: LD_VAR 0 1
34126: GREATER
34127: IFFALSE 34137
// k := 1 ;
34129: LD_ADDR_VAR 0 8
34133: PUSH
34134: LD_INT 1
34136: ST_TO_ADDR
// if not k then
34137: LD_VAR 0 8
34141: NOT
34142: IFFALSE 34154
// k := array ;
34144: LD_ADDR_VAR 0 8
34148: PUSH
34149: LD_VAR 0 1
34153: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34154: LD_ADDR_VAR 0 10
34158: PUSH
34159: LD_VAR 0 10
34163: PPUSH
34164: LD_VAR 0 8
34168: PPUSH
34169: LD_VAR 0 1
34173: PUSH
34174: LD_VAR 0 7
34178: ARRAY
34179: PPUSH
34180: CALL_OW 1
34184: ST_TO_ADDR
// end ;
34185: GO 34098
34187: POP
34188: POP
// array := tmp ;
34189: LD_ADDR_VAR 0 1
34193: PUSH
34194: LD_VAR 0 10
34198: ST_TO_ADDR
// end ;
34199: GO 34080
34201: POP
34202: POP
// result := array ;
34203: LD_ADDR_VAR 0 5
34207: PUSH
34208: LD_VAR 0 1
34212: ST_TO_ADDR
// end ;
34213: LD_VAR 0 5
34217: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34218: LD_INT 0
34220: PPUSH
34221: PPUSH
// result := 0 ;
34222: LD_ADDR_VAR 0 3
34226: PUSH
34227: LD_INT 0
34229: ST_TO_ADDR
// if not array or not value in array then
34230: LD_VAR 0 1
34234: NOT
34235: PUSH
34236: LD_VAR 0 2
34240: PUSH
34241: LD_VAR 0 1
34245: IN
34246: NOT
34247: OR
34248: IFFALSE 34252
// exit ;
34250: GO 34306
// for i = 1 to array do
34252: LD_ADDR_VAR 0 4
34256: PUSH
34257: DOUBLE
34258: LD_INT 1
34260: DEC
34261: ST_TO_ADDR
34262: LD_VAR 0 1
34266: PUSH
34267: FOR_TO
34268: IFFALSE 34304
// if value = array [ i ] then
34270: LD_VAR 0 2
34274: PUSH
34275: LD_VAR 0 1
34279: PUSH
34280: LD_VAR 0 4
34284: ARRAY
34285: EQUAL
34286: IFFALSE 34302
// begin result := i ;
34288: LD_ADDR_VAR 0 3
34292: PUSH
34293: LD_VAR 0 4
34297: ST_TO_ADDR
// exit ;
34298: POP
34299: POP
34300: GO 34306
// end ;
34302: GO 34267
34304: POP
34305: POP
// end ;
34306: LD_VAR 0 3
34310: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34311: LD_INT 0
34313: PPUSH
// vc_chassis := chassis ;
34314: LD_ADDR_OWVAR 37
34318: PUSH
34319: LD_VAR 0 1
34323: ST_TO_ADDR
// vc_engine := engine ;
34324: LD_ADDR_OWVAR 39
34328: PUSH
34329: LD_VAR 0 2
34333: ST_TO_ADDR
// vc_control := control ;
34334: LD_ADDR_OWVAR 38
34338: PUSH
34339: LD_VAR 0 3
34343: ST_TO_ADDR
// vc_weapon := weapon ;
34344: LD_ADDR_OWVAR 40
34348: PUSH
34349: LD_VAR 0 4
34353: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34354: LD_ADDR_OWVAR 41
34358: PUSH
34359: LD_VAR 0 5
34363: ST_TO_ADDR
// end ;
34364: LD_VAR 0 6
34368: RET
// export function WantPlant ( unit ) ; var task ; begin
34369: LD_INT 0
34371: PPUSH
34372: PPUSH
// result := false ;
34373: LD_ADDR_VAR 0 2
34377: PUSH
34378: LD_INT 0
34380: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34381: LD_ADDR_VAR 0 3
34385: PUSH
34386: LD_VAR 0 1
34390: PPUSH
34391: CALL_OW 437
34395: ST_TO_ADDR
// if task then
34396: LD_VAR 0 3
34400: IFFALSE 34428
// if task [ 1 ] [ 1 ] = p then
34402: LD_VAR 0 3
34406: PUSH
34407: LD_INT 1
34409: ARRAY
34410: PUSH
34411: LD_INT 1
34413: ARRAY
34414: PUSH
34415: LD_STRING p
34417: EQUAL
34418: IFFALSE 34428
// result := true ;
34420: LD_ADDR_VAR 0 2
34424: PUSH
34425: LD_INT 1
34427: ST_TO_ADDR
// end ;
34428: LD_VAR 0 2
34432: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34433: LD_INT 0
34435: PPUSH
34436: PPUSH
34437: PPUSH
34438: PPUSH
// if pos < 1 then
34439: LD_VAR 0 2
34443: PUSH
34444: LD_INT 1
34446: LESS
34447: IFFALSE 34451
// exit ;
34449: GO 34754
// if pos = 1 then
34451: LD_VAR 0 2
34455: PUSH
34456: LD_INT 1
34458: EQUAL
34459: IFFALSE 34492
// result := Replace ( arr , pos [ 1 ] , value ) else
34461: LD_ADDR_VAR 0 4
34465: PUSH
34466: LD_VAR 0 1
34470: PPUSH
34471: LD_VAR 0 2
34475: PUSH
34476: LD_INT 1
34478: ARRAY
34479: PPUSH
34480: LD_VAR 0 3
34484: PPUSH
34485: CALL_OW 1
34489: ST_TO_ADDR
34490: GO 34754
// begin tmp := arr ;
34492: LD_ADDR_VAR 0 6
34496: PUSH
34497: LD_VAR 0 1
34501: ST_TO_ADDR
// s_arr := [ tmp ] ;
34502: LD_ADDR_VAR 0 7
34506: PUSH
34507: LD_VAR 0 6
34511: PUSH
34512: EMPTY
34513: LIST
34514: ST_TO_ADDR
// for i = 1 to pos - 1 do
34515: LD_ADDR_VAR 0 5
34519: PUSH
34520: DOUBLE
34521: LD_INT 1
34523: DEC
34524: ST_TO_ADDR
34525: LD_VAR 0 2
34529: PUSH
34530: LD_INT 1
34532: MINUS
34533: PUSH
34534: FOR_TO
34535: IFFALSE 34580
// begin tmp := tmp [ pos [ i ] ] ;
34537: LD_ADDR_VAR 0 6
34541: PUSH
34542: LD_VAR 0 6
34546: PUSH
34547: LD_VAR 0 2
34551: PUSH
34552: LD_VAR 0 5
34556: ARRAY
34557: ARRAY
34558: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34559: LD_ADDR_VAR 0 7
34563: PUSH
34564: LD_VAR 0 7
34568: PUSH
34569: LD_VAR 0 6
34573: PUSH
34574: EMPTY
34575: LIST
34576: ADD
34577: ST_TO_ADDR
// end ;
34578: GO 34534
34580: POP
34581: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34582: LD_ADDR_VAR 0 6
34586: PUSH
34587: LD_VAR 0 6
34591: PPUSH
34592: LD_VAR 0 2
34596: PUSH
34597: LD_VAR 0 2
34601: ARRAY
34602: PPUSH
34603: LD_VAR 0 3
34607: PPUSH
34608: CALL_OW 1
34612: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34613: LD_ADDR_VAR 0 7
34617: PUSH
34618: LD_VAR 0 7
34622: PPUSH
34623: LD_VAR 0 7
34627: PPUSH
34628: LD_VAR 0 6
34632: PPUSH
34633: CALL_OW 1
34637: ST_TO_ADDR
// for i = s_arr downto 2 do
34638: LD_ADDR_VAR 0 5
34642: PUSH
34643: DOUBLE
34644: LD_VAR 0 7
34648: INC
34649: ST_TO_ADDR
34650: LD_INT 2
34652: PUSH
34653: FOR_DOWNTO
34654: IFFALSE 34738
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34656: LD_ADDR_VAR 0 6
34660: PUSH
34661: LD_VAR 0 7
34665: PUSH
34666: LD_VAR 0 5
34670: PUSH
34671: LD_INT 1
34673: MINUS
34674: ARRAY
34675: PPUSH
34676: LD_VAR 0 2
34680: PUSH
34681: LD_VAR 0 5
34685: PUSH
34686: LD_INT 1
34688: MINUS
34689: ARRAY
34690: PPUSH
34691: LD_VAR 0 7
34695: PUSH
34696: LD_VAR 0 5
34700: ARRAY
34701: PPUSH
34702: CALL_OW 1
34706: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34707: LD_ADDR_VAR 0 7
34711: PUSH
34712: LD_VAR 0 7
34716: PPUSH
34717: LD_VAR 0 5
34721: PUSH
34722: LD_INT 1
34724: MINUS
34725: PPUSH
34726: LD_VAR 0 6
34730: PPUSH
34731: CALL_OW 1
34735: ST_TO_ADDR
// end ;
34736: GO 34653
34738: POP
34739: POP
// result := s_arr [ 1 ] ;
34740: LD_ADDR_VAR 0 4
34744: PUSH
34745: LD_VAR 0 7
34749: PUSH
34750: LD_INT 1
34752: ARRAY
34753: ST_TO_ADDR
// end ; end ;
34754: LD_VAR 0 4
34758: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34759: LD_INT 0
34761: PPUSH
34762: PPUSH
// if not list then
34763: LD_VAR 0 1
34767: NOT
34768: IFFALSE 34772
// exit ;
34770: GO 34863
// i := list [ pos1 ] ;
34772: LD_ADDR_VAR 0 5
34776: PUSH
34777: LD_VAR 0 1
34781: PUSH
34782: LD_VAR 0 2
34786: ARRAY
34787: ST_TO_ADDR
// if not i then
34788: LD_VAR 0 5
34792: NOT
34793: IFFALSE 34797
// exit ;
34795: GO 34863
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34797: LD_ADDR_VAR 0 1
34801: PUSH
34802: LD_VAR 0 1
34806: PPUSH
34807: LD_VAR 0 2
34811: PPUSH
34812: LD_VAR 0 1
34816: PUSH
34817: LD_VAR 0 3
34821: ARRAY
34822: PPUSH
34823: CALL_OW 1
34827: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34828: LD_ADDR_VAR 0 1
34832: PUSH
34833: LD_VAR 0 1
34837: PPUSH
34838: LD_VAR 0 3
34842: PPUSH
34843: LD_VAR 0 5
34847: PPUSH
34848: CALL_OW 1
34852: ST_TO_ADDR
// result := list ;
34853: LD_ADDR_VAR 0 4
34857: PUSH
34858: LD_VAR 0 1
34862: ST_TO_ADDR
// end ;
34863: LD_VAR 0 4
34867: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34868: LD_INT 0
34870: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34871: LD_ADDR_VAR 0 5
34875: PUSH
34876: LD_VAR 0 1
34880: PPUSH
34881: CALL_OW 250
34885: PPUSH
34886: LD_VAR 0 1
34890: PPUSH
34891: CALL_OW 251
34895: PPUSH
34896: LD_VAR 0 2
34900: PPUSH
34901: LD_VAR 0 3
34905: PPUSH
34906: LD_VAR 0 4
34910: PPUSH
34911: CALL 35289 0 5
34915: ST_TO_ADDR
// end ;
34916: LD_VAR 0 5
34920: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34921: LD_INT 0
34923: PPUSH
34924: PPUSH
34925: PPUSH
34926: PPUSH
// if not list or not unit then
34927: LD_VAR 0 2
34931: NOT
34932: PUSH
34933: LD_VAR 0 1
34937: NOT
34938: OR
34939: IFFALSE 34943
// exit ;
34941: GO 35284
// result := [ ] ;
34943: LD_ADDR_VAR 0 5
34947: PUSH
34948: EMPTY
34949: ST_TO_ADDR
// for i in list do
34950: LD_ADDR_VAR 0 6
34954: PUSH
34955: LD_VAR 0 2
34959: PUSH
34960: FOR_IN
34961: IFFALSE 35179
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34963: LD_ADDR_VAR 0 8
34967: PUSH
34968: LD_VAR 0 1
34972: PPUSH
34973: LD_VAR 0 6
34977: PUSH
34978: LD_INT 1
34980: ARRAY
34981: PPUSH
34982: LD_VAR 0 6
34986: PUSH
34987: LD_INT 2
34989: ARRAY
34990: PPUSH
34991: CALL_OW 297
34995: ST_TO_ADDR
// if not Count ( result ) then
34996: LD_VAR 0 5
35000: PPUSH
35001: CALL 31573 0 1
35005: NOT
35006: IFFALSE 35039
// begin result := Join ( result , [ i , tmp ] ) ;
35008: LD_ADDR_VAR 0 5
35012: PUSH
35013: LD_VAR 0 5
35017: PPUSH
35018: LD_VAR 0 6
35022: PUSH
35023: LD_VAR 0 8
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PPUSH
35032: CALL 67162 0 2
35036: ST_TO_ADDR
// continue ;
35037: GO 34960
// end ; if result [ result ] [ 2 ] <= tmp then
35039: LD_VAR 0 5
35043: PUSH
35044: LD_VAR 0 5
35048: ARRAY
35049: PUSH
35050: LD_INT 2
35052: ARRAY
35053: PUSH
35054: LD_VAR 0 8
35058: LESSEQUAL
35059: IFFALSE 35092
// result := Join ( result , [ i , tmp ] ) else
35061: LD_ADDR_VAR 0 5
35065: PUSH
35066: LD_VAR 0 5
35070: PPUSH
35071: LD_VAR 0 6
35075: PUSH
35076: LD_VAR 0 8
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PPUSH
35085: CALL 67162 0 2
35089: ST_TO_ADDR
35090: GO 35177
// begin for j := 1 to Count ( result ) do
35092: LD_ADDR_VAR 0 7
35096: PUSH
35097: DOUBLE
35098: LD_INT 1
35100: DEC
35101: ST_TO_ADDR
35102: LD_VAR 0 5
35106: PPUSH
35107: CALL 31573 0 1
35111: PUSH
35112: FOR_TO
35113: IFFALSE 35175
// begin if tmp < result [ j ] [ 2 ] then
35115: LD_VAR 0 8
35119: PUSH
35120: LD_VAR 0 5
35124: PUSH
35125: LD_VAR 0 7
35129: ARRAY
35130: PUSH
35131: LD_INT 2
35133: ARRAY
35134: LESS
35135: IFFALSE 35173
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35137: LD_ADDR_VAR 0 5
35141: PUSH
35142: LD_VAR 0 5
35146: PPUSH
35147: LD_VAR 0 7
35151: PPUSH
35152: LD_VAR 0 6
35156: PUSH
35157: LD_VAR 0 8
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PPUSH
35166: CALL_OW 2
35170: ST_TO_ADDR
// break ;
35171: GO 35175
// end ; end ;
35173: GO 35112
35175: POP
35176: POP
// end ; end ;
35177: GO 34960
35179: POP
35180: POP
// if result and not asc then
35181: LD_VAR 0 5
35185: PUSH
35186: LD_VAR 0 3
35190: NOT
35191: AND
35192: IFFALSE 35209
// result := ReverseArray ( result ) ;
35194: LD_ADDR_VAR 0 5
35198: PUSH
35199: LD_VAR 0 5
35203: PPUSH
35204: CALL 62449 0 1
35208: ST_TO_ADDR
// tmp := [ ] ;
35209: LD_ADDR_VAR 0 8
35213: PUSH
35214: EMPTY
35215: ST_TO_ADDR
// if mode then
35216: LD_VAR 0 4
35220: IFFALSE 35284
// begin for i := 1 to result do
35222: LD_ADDR_VAR 0 6
35226: PUSH
35227: DOUBLE
35228: LD_INT 1
35230: DEC
35231: ST_TO_ADDR
35232: LD_VAR 0 5
35236: PUSH
35237: FOR_TO
35238: IFFALSE 35272
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35240: LD_ADDR_VAR 0 8
35244: PUSH
35245: LD_VAR 0 8
35249: PPUSH
35250: LD_VAR 0 5
35254: PUSH
35255: LD_VAR 0 6
35259: ARRAY
35260: PUSH
35261: LD_INT 1
35263: ARRAY
35264: PPUSH
35265: CALL 67162 0 2
35269: ST_TO_ADDR
35270: GO 35237
35272: POP
35273: POP
// result := tmp ;
35274: LD_ADDR_VAR 0 5
35278: PUSH
35279: LD_VAR 0 8
35283: ST_TO_ADDR
// end ; end ;
35284: LD_VAR 0 5
35288: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35289: LD_INT 0
35291: PPUSH
35292: PPUSH
35293: PPUSH
35294: PPUSH
// if not list then
35295: LD_VAR 0 3
35299: NOT
35300: IFFALSE 35304
// exit ;
35302: GO 35692
// result := [ ] ;
35304: LD_ADDR_VAR 0 6
35308: PUSH
35309: EMPTY
35310: ST_TO_ADDR
// for i in list do
35311: LD_ADDR_VAR 0 7
35315: PUSH
35316: LD_VAR 0 3
35320: PUSH
35321: FOR_IN
35322: IFFALSE 35524
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35324: LD_ADDR_VAR 0 9
35328: PUSH
35329: LD_VAR 0 7
35333: PPUSH
35334: LD_VAR 0 1
35338: PPUSH
35339: LD_VAR 0 2
35343: PPUSH
35344: CALL_OW 297
35348: ST_TO_ADDR
// if not result then
35349: LD_VAR 0 6
35353: NOT
35354: IFFALSE 35380
// result := [ [ i , tmp ] ] else
35356: LD_ADDR_VAR 0 6
35360: PUSH
35361: LD_VAR 0 7
35365: PUSH
35366: LD_VAR 0 9
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: EMPTY
35376: LIST
35377: ST_TO_ADDR
35378: GO 35522
// begin if result [ result ] [ 2 ] < tmp then
35380: LD_VAR 0 6
35384: PUSH
35385: LD_VAR 0 6
35389: ARRAY
35390: PUSH
35391: LD_INT 2
35393: ARRAY
35394: PUSH
35395: LD_VAR 0 9
35399: LESS
35400: IFFALSE 35442
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35402: LD_ADDR_VAR 0 6
35406: PUSH
35407: LD_VAR 0 6
35411: PPUSH
35412: LD_VAR 0 6
35416: PUSH
35417: LD_INT 1
35419: PLUS
35420: PPUSH
35421: LD_VAR 0 7
35425: PUSH
35426: LD_VAR 0 9
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PPUSH
35435: CALL_OW 2
35439: ST_TO_ADDR
35440: GO 35522
// for j = 1 to result do
35442: LD_ADDR_VAR 0 8
35446: PUSH
35447: DOUBLE
35448: LD_INT 1
35450: DEC
35451: ST_TO_ADDR
35452: LD_VAR 0 6
35456: PUSH
35457: FOR_TO
35458: IFFALSE 35520
// begin if tmp < result [ j ] [ 2 ] then
35460: LD_VAR 0 9
35464: PUSH
35465: LD_VAR 0 6
35469: PUSH
35470: LD_VAR 0 8
35474: ARRAY
35475: PUSH
35476: LD_INT 2
35478: ARRAY
35479: LESS
35480: IFFALSE 35518
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35482: LD_ADDR_VAR 0 6
35486: PUSH
35487: LD_VAR 0 6
35491: PPUSH
35492: LD_VAR 0 8
35496: PPUSH
35497: LD_VAR 0 7
35501: PUSH
35502: LD_VAR 0 9
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PPUSH
35511: CALL_OW 2
35515: ST_TO_ADDR
// break ;
35516: GO 35520
// end ; end ;
35518: GO 35457
35520: POP
35521: POP
// end ; end ;
35522: GO 35321
35524: POP
35525: POP
// if result and not asc then
35526: LD_VAR 0 6
35530: PUSH
35531: LD_VAR 0 4
35535: NOT
35536: AND
35537: IFFALSE 35612
// begin tmp := result ;
35539: LD_ADDR_VAR 0 9
35543: PUSH
35544: LD_VAR 0 6
35548: ST_TO_ADDR
// for i = tmp downto 1 do
35549: LD_ADDR_VAR 0 7
35553: PUSH
35554: DOUBLE
35555: LD_VAR 0 9
35559: INC
35560: ST_TO_ADDR
35561: LD_INT 1
35563: PUSH
35564: FOR_DOWNTO
35565: IFFALSE 35610
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35567: LD_ADDR_VAR 0 6
35571: PUSH
35572: LD_VAR 0 6
35576: PPUSH
35577: LD_VAR 0 9
35581: PUSH
35582: LD_VAR 0 7
35586: MINUS
35587: PUSH
35588: LD_INT 1
35590: PLUS
35591: PPUSH
35592: LD_VAR 0 9
35596: PUSH
35597: LD_VAR 0 7
35601: ARRAY
35602: PPUSH
35603: CALL_OW 1
35607: ST_TO_ADDR
35608: GO 35564
35610: POP
35611: POP
// end ; tmp := [ ] ;
35612: LD_ADDR_VAR 0 9
35616: PUSH
35617: EMPTY
35618: ST_TO_ADDR
// if mode then
35619: LD_VAR 0 5
35623: IFFALSE 35692
// begin for i = 1 to result do
35625: LD_ADDR_VAR 0 7
35629: PUSH
35630: DOUBLE
35631: LD_INT 1
35633: DEC
35634: ST_TO_ADDR
35635: LD_VAR 0 6
35639: PUSH
35640: FOR_TO
35641: IFFALSE 35680
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35643: LD_ADDR_VAR 0 9
35647: PUSH
35648: LD_VAR 0 9
35652: PPUSH
35653: LD_VAR 0 7
35657: PPUSH
35658: LD_VAR 0 6
35662: PUSH
35663: LD_VAR 0 7
35667: ARRAY
35668: PUSH
35669: LD_INT 1
35671: ARRAY
35672: PPUSH
35673: CALL_OW 1
35677: ST_TO_ADDR
35678: GO 35640
35680: POP
35681: POP
// result := tmp ;
35682: LD_ADDR_VAR 0 6
35686: PUSH
35687: LD_VAR 0 9
35691: ST_TO_ADDR
// end ; end ;
35692: LD_VAR 0 6
35696: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35697: LD_INT 0
35699: PPUSH
35700: PPUSH
35701: PPUSH
35702: PPUSH
35703: PPUSH
35704: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35705: LD_ADDR_VAR 0 5
35709: PUSH
35710: LD_INT 0
35712: PUSH
35713: LD_INT 0
35715: PUSH
35716: LD_INT 0
35718: PUSH
35719: EMPTY
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: ST_TO_ADDR
// if not x or not y then
35727: LD_VAR 0 2
35731: NOT
35732: PUSH
35733: LD_VAR 0 3
35737: NOT
35738: OR
35739: IFFALSE 35743
// exit ;
35741: GO 37393
// if not range then
35743: LD_VAR 0 4
35747: NOT
35748: IFFALSE 35758
// range := 10 ;
35750: LD_ADDR_VAR 0 4
35754: PUSH
35755: LD_INT 10
35757: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35758: LD_ADDR_VAR 0 8
35762: PUSH
35763: LD_INT 81
35765: PUSH
35766: LD_VAR 0 1
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 92
35777: PUSH
35778: LD_VAR 0 2
35782: PUSH
35783: LD_VAR 0 3
35787: PUSH
35788: LD_VAR 0 4
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 3
35801: PUSH
35802: LD_INT 21
35804: PUSH
35805: LD_INT 3
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: LIST
35820: PPUSH
35821: CALL_OW 69
35825: ST_TO_ADDR
// if not tmp then
35826: LD_VAR 0 8
35830: NOT
35831: IFFALSE 35835
// exit ;
35833: GO 37393
// for i in tmp do
35835: LD_ADDR_VAR 0 6
35839: PUSH
35840: LD_VAR 0 8
35844: PUSH
35845: FOR_IN
35846: IFFALSE 37368
// begin points := [ 0 , 0 , 0 ] ;
35848: LD_ADDR_VAR 0 9
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: LD_INT 0
35858: PUSH
35859: LD_INT 0
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: LIST
35866: ST_TO_ADDR
// bpoints := 1 ;
35867: LD_ADDR_VAR 0 10
35871: PUSH
35872: LD_INT 1
35874: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35875: LD_VAR 0 6
35879: PPUSH
35880: CALL_OW 247
35884: PUSH
35885: LD_INT 1
35887: DOUBLE
35888: EQUAL
35889: IFTRUE 35893
35891: GO 36471
35893: POP
// begin if GetClass ( i ) = 1 then
35894: LD_VAR 0 6
35898: PPUSH
35899: CALL_OW 257
35903: PUSH
35904: LD_INT 1
35906: EQUAL
35907: IFFALSE 35928
// points := [ 10 , 5 , 3 ] ;
35909: LD_ADDR_VAR 0 9
35913: PUSH
35914: LD_INT 10
35916: PUSH
35917: LD_INT 5
35919: PUSH
35920: LD_INT 3
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: LIST
35927: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35928: LD_VAR 0 6
35932: PPUSH
35933: CALL_OW 257
35937: PUSH
35938: LD_INT 2
35940: PUSH
35941: LD_INT 3
35943: PUSH
35944: LD_INT 4
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: LIST
35951: IN
35952: IFFALSE 35973
// points := [ 3 , 2 , 1 ] ;
35954: LD_ADDR_VAR 0 9
35958: PUSH
35959: LD_INT 3
35961: PUSH
35962: LD_INT 2
35964: PUSH
35965: LD_INT 1
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: LIST
35972: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35973: LD_VAR 0 6
35977: PPUSH
35978: CALL_OW 257
35982: PUSH
35983: LD_INT 5
35985: EQUAL
35986: IFFALSE 36007
// points := [ 130 , 5 , 2 ] ;
35988: LD_ADDR_VAR 0 9
35992: PUSH
35993: LD_INT 130
35995: PUSH
35996: LD_INT 5
35998: PUSH
35999: LD_INT 2
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: LIST
36006: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36007: LD_VAR 0 6
36011: PPUSH
36012: CALL_OW 257
36016: PUSH
36017: LD_INT 8
36019: EQUAL
36020: IFFALSE 36041
// points := [ 35 , 35 , 30 ] ;
36022: LD_ADDR_VAR 0 9
36026: PUSH
36027: LD_INT 35
36029: PUSH
36030: LD_INT 35
36032: PUSH
36033: LD_INT 30
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: LIST
36040: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36041: LD_VAR 0 6
36045: PPUSH
36046: CALL_OW 257
36050: PUSH
36051: LD_INT 9
36053: EQUAL
36054: IFFALSE 36075
// points := [ 20 , 55 , 40 ] ;
36056: LD_ADDR_VAR 0 9
36060: PUSH
36061: LD_INT 20
36063: PUSH
36064: LD_INT 55
36066: PUSH
36067: LD_INT 40
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: LIST
36074: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36075: LD_VAR 0 6
36079: PPUSH
36080: CALL_OW 257
36084: PUSH
36085: LD_INT 12
36087: PUSH
36088: LD_INT 16
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: IN
36095: IFFALSE 36116
// points := [ 5 , 3 , 2 ] ;
36097: LD_ADDR_VAR 0 9
36101: PUSH
36102: LD_INT 5
36104: PUSH
36105: LD_INT 3
36107: PUSH
36108: LD_INT 2
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: LIST
36115: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36116: LD_VAR 0 6
36120: PPUSH
36121: CALL_OW 257
36125: PUSH
36126: LD_INT 17
36128: EQUAL
36129: IFFALSE 36150
// points := [ 100 , 50 , 75 ] ;
36131: LD_ADDR_VAR 0 9
36135: PUSH
36136: LD_INT 100
36138: PUSH
36139: LD_INT 50
36141: PUSH
36142: LD_INT 75
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: LIST
36149: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36150: LD_VAR 0 6
36154: PPUSH
36155: CALL_OW 257
36159: PUSH
36160: LD_INT 15
36162: EQUAL
36163: IFFALSE 36184
// points := [ 10 , 5 , 3 ] ;
36165: LD_ADDR_VAR 0 9
36169: PUSH
36170: LD_INT 10
36172: PUSH
36173: LD_INT 5
36175: PUSH
36176: LD_INT 3
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: LIST
36183: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36184: LD_VAR 0 6
36188: PPUSH
36189: CALL_OW 257
36193: PUSH
36194: LD_INT 14
36196: EQUAL
36197: IFFALSE 36218
// points := [ 10 , 0 , 0 ] ;
36199: LD_ADDR_VAR 0 9
36203: PUSH
36204: LD_INT 10
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: LIST
36217: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36218: LD_VAR 0 6
36222: PPUSH
36223: CALL_OW 257
36227: PUSH
36228: LD_INT 11
36230: EQUAL
36231: IFFALSE 36252
// points := [ 30 , 10 , 5 ] ;
36233: LD_ADDR_VAR 0 9
36237: PUSH
36238: LD_INT 30
36240: PUSH
36241: LD_INT 10
36243: PUSH
36244: LD_INT 5
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: LIST
36251: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36252: LD_VAR 0 1
36256: PPUSH
36257: LD_INT 5
36259: PPUSH
36260: CALL_OW 321
36264: PUSH
36265: LD_INT 2
36267: EQUAL
36268: IFFALSE 36285
// bpoints := bpoints * 1.8 ;
36270: LD_ADDR_VAR 0 10
36274: PUSH
36275: LD_VAR 0 10
36279: PUSH
36280: LD_REAL  1.80000000000000E+0000
36283: MUL
36284: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36285: LD_VAR 0 6
36289: PPUSH
36290: CALL_OW 257
36294: PUSH
36295: LD_INT 1
36297: PUSH
36298: LD_INT 2
36300: PUSH
36301: LD_INT 3
36303: PUSH
36304: LD_INT 4
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: IN
36313: PUSH
36314: LD_VAR 0 1
36318: PPUSH
36319: LD_INT 51
36321: PPUSH
36322: CALL_OW 321
36326: PUSH
36327: LD_INT 2
36329: EQUAL
36330: AND
36331: IFFALSE 36348
// bpoints := bpoints * 1.2 ;
36333: LD_ADDR_VAR 0 10
36337: PUSH
36338: LD_VAR 0 10
36342: PUSH
36343: LD_REAL  1.20000000000000E+0000
36346: MUL
36347: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36348: LD_VAR 0 6
36352: PPUSH
36353: CALL_OW 257
36357: PUSH
36358: LD_INT 5
36360: PUSH
36361: LD_INT 7
36363: PUSH
36364: LD_INT 9
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: LIST
36371: IN
36372: PUSH
36373: LD_VAR 0 1
36377: PPUSH
36378: LD_INT 52
36380: PPUSH
36381: CALL_OW 321
36385: PUSH
36386: LD_INT 2
36388: EQUAL
36389: AND
36390: IFFALSE 36407
// bpoints := bpoints * 1.5 ;
36392: LD_ADDR_VAR 0 10
36396: PUSH
36397: LD_VAR 0 10
36401: PUSH
36402: LD_REAL  1.50000000000000E+0000
36405: MUL
36406: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36407: LD_VAR 0 1
36411: PPUSH
36412: LD_INT 66
36414: PPUSH
36415: CALL_OW 321
36419: PUSH
36420: LD_INT 2
36422: EQUAL
36423: IFFALSE 36440
// bpoints := bpoints * 1.1 ;
36425: LD_ADDR_VAR 0 10
36429: PUSH
36430: LD_VAR 0 10
36434: PUSH
36435: LD_REAL  1.10000000000000E+0000
36438: MUL
36439: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36440: LD_ADDR_VAR 0 10
36444: PUSH
36445: LD_VAR 0 10
36449: PUSH
36450: LD_VAR 0 6
36454: PPUSH
36455: LD_INT 1
36457: PPUSH
36458: CALL_OW 259
36462: PUSH
36463: LD_REAL  1.15000000000000E+0000
36466: MUL
36467: MUL
36468: ST_TO_ADDR
// end ; unit_vehicle :
36469: GO 37297
36471: LD_INT 2
36473: DOUBLE
36474: EQUAL
36475: IFTRUE 36479
36477: GO 37285
36479: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36480: LD_VAR 0 6
36484: PPUSH
36485: CALL_OW 264
36489: PUSH
36490: LD_INT 2
36492: PUSH
36493: LD_INT 42
36495: PUSH
36496: LD_INT 24
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: IN
36504: IFFALSE 36525
// points := [ 25 , 5 , 3 ] ;
36506: LD_ADDR_VAR 0 9
36510: PUSH
36511: LD_INT 25
36513: PUSH
36514: LD_INT 5
36516: PUSH
36517: LD_INT 3
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: LIST
36524: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36525: LD_VAR 0 6
36529: PPUSH
36530: CALL_OW 264
36534: PUSH
36535: LD_INT 4
36537: PUSH
36538: LD_INT 43
36540: PUSH
36541: LD_INT 25
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: LIST
36548: IN
36549: IFFALSE 36570
// points := [ 40 , 15 , 5 ] ;
36551: LD_ADDR_VAR 0 9
36555: PUSH
36556: LD_INT 40
36558: PUSH
36559: LD_INT 15
36561: PUSH
36562: LD_INT 5
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: LIST
36569: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36570: LD_VAR 0 6
36574: PPUSH
36575: CALL_OW 264
36579: PUSH
36580: LD_INT 3
36582: PUSH
36583: LD_INT 23
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: IN
36590: IFFALSE 36611
// points := [ 7 , 25 , 8 ] ;
36592: LD_ADDR_VAR 0 9
36596: PUSH
36597: LD_INT 7
36599: PUSH
36600: LD_INT 25
36602: PUSH
36603: LD_INT 8
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: LIST
36610: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36611: LD_VAR 0 6
36615: PPUSH
36616: CALL_OW 264
36620: PUSH
36621: LD_INT 5
36623: PUSH
36624: LD_INT 27
36626: PUSH
36627: LD_INT 44
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: LIST
36634: IN
36635: IFFALSE 36656
// points := [ 14 , 50 , 16 ] ;
36637: LD_ADDR_VAR 0 9
36641: PUSH
36642: LD_INT 14
36644: PUSH
36645: LD_INT 50
36647: PUSH
36648: LD_INT 16
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36656: LD_VAR 0 6
36660: PPUSH
36661: CALL_OW 264
36665: PUSH
36666: LD_INT 6
36668: PUSH
36669: LD_INT 46
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: IN
36676: IFFALSE 36697
// points := [ 32 , 120 , 70 ] ;
36678: LD_ADDR_VAR 0 9
36682: PUSH
36683: LD_INT 32
36685: PUSH
36686: LD_INT 120
36688: PUSH
36689: LD_INT 70
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: LIST
36696: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36697: LD_VAR 0 6
36701: PPUSH
36702: CALL_OW 264
36706: PUSH
36707: LD_INT 7
36709: PUSH
36710: LD_INT 28
36712: PUSH
36713: LD_INT 45
36715: PUSH
36716: LD_INT 92
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: IN
36725: IFFALSE 36746
// points := [ 35 , 20 , 45 ] ;
36727: LD_ADDR_VAR 0 9
36731: PUSH
36732: LD_INT 35
36734: PUSH
36735: LD_INT 20
36737: PUSH
36738: LD_INT 45
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: LIST
36745: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36746: LD_VAR 0 6
36750: PPUSH
36751: CALL_OW 264
36755: PUSH
36756: LD_INT 47
36758: PUSH
36759: EMPTY
36760: LIST
36761: IN
36762: IFFALSE 36783
// points := [ 67 , 45 , 75 ] ;
36764: LD_ADDR_VAR 0 9
36768: PUSH
36769: LD_INT 67
36771: PUSH
36772: LD_INT 45
36774: PUSH
36775: LD_INT 75
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: LIST
36782: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36783: LD_VAR 0 6
36787: PPUSH
36788: CALL_OW 264
36792: PUSH
36793: LD_INT 26
36795: PUSH
36796: EMPTY
36797: LIST
36798: IN
36799: IFFALSE 36820
// points := [ 120 , 30 , 80 ] ;
36801: LD_ADDR_VAR 0 9
36805: PUSH
36806: LD_INT 120
36808: PUSH
36809: LD_INT 30
36811: PUSH
36812: LD_INT 80
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: LIST
36819: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36820: LD_VAR 0 6
36824: PPUSH
36825: CALL_OW 264
36829: PUSH
36830: LD_INT 22
36832: PUSH
36833: EMPTY
36834: LIST
36835: IN
36836: IFFALSE 36857
// points := [ 40 , 1 , 1 ] ;
36838: LD_ADDR_VAR 0 9
36842: PUSH
36843: LD_INT 40
36845: PUSH
36846: LD_INT 1
36848: PUSH
36849: LD_INT 1
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: LIST
36856: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36857: LD_VAR 0 6
36861: PPUSH
36862: CALL_OW 264
36866: PUSH
36867: LD_INT 29
36869: PUSH
36870: EMPTY
36871: LIST
36872: IN
36873: IFFALSE 36894
// points := [ 70 , 200 , 400 ] ;
36875: LD_ADDR_VAR 0 9
36879: PUSH
36880: LD_INT 70
36882: PUSH
36883: LD_INT 200
36885: PUSH
36886: LD_INT 400
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: LIST
36893: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36894: LD_VAR 0 6
36898: PPUSH
36899: CALL_OW 264
36903: PUSH
36904: LD_INT 14
36906: PUSH
36907: LD_INT 53
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: IN
36914: IFFALSE 36935
// points := [ 40 , 10 , 20 ] ;
36916: LD_ADDR_VAR 0 9
36920: PUSH
36921: LD_INT 40
36923: PUSH
36924: LD_INT 10
36926: PUSH
36927: LD_INT 20
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: LIST
36934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36935: LD_VAR 0 6
36939: PPUSH
36940: CALL_OW 264
36944: PUSH
36945: LD_INT 9
36947: PUSH
36948: EMPTY
36949: LIST
36950: IN
36951: IFFALSE 36972
// points := [ 5 , 70 , 20 ] ;
36953: LD_ADDR_VAR 0 9
36957: PUSH
36958: LD_INT 5
36960: PUSH
36961: LD_INT 70
36963: PUSH
36964: LD_INT 20
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: LIST
36971: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36972: LD_VAR 0 6
36976: PPUSH
36977: CALL_OW 264
36981: PUSH
36982: LD_INT 10
36984: PUSH
36985: EMPTY
36986: LIST
36987: IN
36988: IFFALSE 37009
// points := [ 35 , 110 , 70 ] ;
36990: LD_ADDR_VAR 0 9
36994: PUSH
36995: LD_INT 35
36997: PUSH
36998: LD_INT 110
37000: PUSH
37001: LD_INT 70
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: LIST
37008: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37009: LD_VAR 0 6
37013: PPUSH
37014: CALL_OW 265
37018: PUSH
37019: LD_INT 25
37021: EQUAL
37022: IFFALSE 37043
// points := [ 80 , 65 , 100 ] ;
37024: LD_ADDR_VAR 0 9
37028: PUSH
37029: LD_INT 80
37031: PUSH
37032: LD_INT 65
37034: PUSH
37035: LD_INT 100
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: LIST
37042: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37043: LD_VAR 0 6
37047: PPUSH
37048: CALL_OW 263
37052: PUSH
37053: LD_INT 1
37055: EQUAL
37056: IFFALSE 37091
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37058: LD_ADDR_VAR 0 10
37062: PUSH
37063: LD_VAR 0 10
37067: PUSH
37068: LD_VAR 0 6
37072: PPUSH
37073: CALL_OW 311
37077: PPUSH
37078: LD_INT 3
37080: PPUSH
37081: CALL_OW 259
37085: PUSH
37086: LD_INT 4
37088: MUL
37089: MUL
37090: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37091: LD_VAR 0 6
37095: PPUSH
37096: CALL_OW 263
37100: PUSH
37101: LD_INT 2
37103: EQUAL
37104: IFFALSE 37155
// begin j := IsControledBy ( i ) ;
37106: LD_ADDR_VAR 0 7
37110: PUSH
37111: LD_VAR 0 6
37115: PPUSH
37116: CALL_OW 312
37120: ST_TO_ADDR
// if j then
37121: LD_VAR 0 7
37125: IFFALSE 37155
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37127: LD_ADDR_VAR 0 10
37131: PUSH
37132: LD_VAR 0 10
37136: PUSH
37137: LD_VAR 0 7
37141: PPUSH
37142: LD_INT 3
37144: PPUSH
37145: CALL_OW 259
37149: PUSH
37150: LD_INT 3
37152: MUL
37153: MUL
37154: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37155: LD_VAR 0 6
37159: PPUSH
37160: CALL_OW 264
37164: PUSH
37165: LD_INT 5
37167: PUSH
37168: LD_INT 6
37170: PUSH
37171: LD_INT 46
37173: PUSH
37174: LD_INT 44
37176: PUSH
37177: LD_INT 47
37179: PUSH
37180: LD_INT 45
37182: PUSH
37183: LD_INT 28
37185: PUSH
37186: LD_INT 7
37188: PUSH
37189: LD_INT 27
37191: PUSH
37192: LD_INT 29
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: IN
37207: PUSH
37208: LD_VAR 0 1
37212: PPUSH
37213: LD_INT 52
37215: PPUSH
37216: CALL_OW 321
37220: PUSH
37221: LD_INT 2
37223: EQUAL
37224: AND
37225: IFFALSE 37242
// bpoints := bpoints * 1.2 ;
37227: LD_ADDR_VAR 0 10
37231: PUSH
37232: LD_VAR 0 10
37236: PUSH
37237: LD_REAL  1.20000000000000E+0000
37240: MUL
37241: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37242: LD_VAR 0 6
37246: PPUSH
37247: CALL_OW 264
37251: PUSH
37252: LD_INT 6
37254: PUSH
37255: LD_INT 46
37257: PUSH
37258: LD_INT 47
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: LIST
37265: IN
37266: IFFALSE 37283
// bpoints := bpoints * 1.2 ;
37268: LD_ADDR_VAR 0 10
37272: PUSH
37273: LD_VAR 0 10
37277: PUSH
37278: LD_REAL  1.20000000000000E+0000
37281: MUL
37282: ST_TO_ADDR
// end ; unit_building :
37283: GO 37297
37285: LD_INT 3
37287: DOUBLE
37288: EQUAL
37289: IFTRUE 37293
37291: GO 37296
37293: POP
// ; end ;
37294: GO 37297
37296: POP
// for j = 1 to 3 do
37297: LD_ADDR_VAR 0 7
37301: PUSH
37302: DOUBLE
37303: LD_INT 1
37305: DEC
37306: ST_TO_ADDR
37307: LD_INT 3
37309: PUSH
37310: FOR_TO
37311: IFFALSE 37364
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37313: LD_ADDR_VAR 0 5
37317: PUSH
37318: LD_VAR 0 5
37322: PPUSH
37323: LD_VAR 0 7
37327: PPUSH
37328: LD_VAR 0 5
37332: PUSH
37333: LD_VAR 0 7
37337: ARRAY
37338: PUSH
37339: LD_VAR 0 9
37343: PUSH
37344: LD_VAR 0 7
37348: ARRAY
37349: PUSH
37350: LD_VAR 0 10
37354: MUL
37355: PLUS
37356: PPUSH
37357: CALL_OW 1
37361: ST_TO_ADDR
37362: GO 37310
37364: POP
37365: POP
// end ;
37366: GO 35845
37368: POP
37369: POP
// result := Replace ( result , 4 , tmp ) ;
37370: LD_ADDR_VAR 0 5
37374: PUSH
37375: LD_VAR 0 5
37379: PPUSH
37380: LD_INT 4
37382: PPUSH
37383: LD_VAR 0 8
37387: PPUSH
37388: CALL_OW 1
37392: ST_TO_ADDR
// end ;
37393: LD_VAR 0 5
37397: RET
// export function DangerAtRange ( unit , range ) ; begin
37398: LD_INT 0
37400: PPUSH
// if not unit then
37401: LD_VAR 0 1
37405: NOT
37406: IFFALSE 37410
// exit ;
37408: GO 37455
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37410: LD_ADDR_VAR 0 3
37414: PUSH
37415: LD_VAR 0 1
37419: PPUSH
37420: CALL_OW 255
37424: PPUSH
37425: LD_VAR 0 1
37429: PPUSH
37430: CALL_OW 250
37434: PPUSH
37435: LD_VAR 0 1
37439: PPUSH
37440: CALL_OW 251
37444: PPUSH
37445: LD_VAR 0 2
37449: PPUSH
37450: CALL 35697 0 4
37454: ST_TO_ADDR
// end ;
37455: LD_VAR 0 3
37459: RET
// export function DangerInArea ( side , area ) ; begin
37460: LD_INT 0
37462: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37463: LD_ADDR_VAR 0 3
37467: PUSH
37468: LD_VAR 0 2
37472: PPUSH
37473: LD_INT 81
37475: PUSH
37476: LD_VAR 0 1
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PPUSH
37485: CALL_OW 70
37489: ST_TO_ADDR
// end ;
37490: LD_VAR 0 3
37494: RET
// export function IsExtension ( b ) ; begin
37495: LD_INT 0
37497: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37498: LD_ADDR_VAR 0 2
37502: PUSH
37503: LD_VAR 0 1
37507: PUSH
37508: LD_INT 23
37510: PUSH
37511: LD_INT 20
37513: PUSH
37514: LD_INT 22
37516: PUSH
37517: LD_INT 17
37519: PUSH
37520: LD_INT 24
37522: PUSH
37523: LD_INT 21
37525: PUSH
37526: LD_INT 19
37528: PUSH
37529: LD_INT 16
37531: PUSH
37532: LD_INT 25
37534: PUSH
37535: LD_INT 18
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: IN
37550: ST_TO_ADDR
// end ;
37551: LD_VAR 0 2
37555: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37556: LD_INT 0
37558: PPUSH
37559: PPUSH
37560: PPUSH
// result := [ ] ;
37561: LD_ADDR_VAR 0 4
37565: PUSH
37566: EMPTY
37567: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37568: LD_ADDR_VAR 0 5
37572: PUSH
37573: LD_VAR 0 2
37577: PPUSH
37578: LD_INT 21
37580: PUSH
37581: LD_INT 3
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PPUSH
37588: CALL_OW 70
37592: ST_TO_ADDR
// if not tmp then
37593: LD_VAR 0 5
37597: NOT
37598: IFFALSE 37602
// exit ;
37600: GO 37666
// if checkLink then
37602: LD_VAR 0 3
37606: IFFALSE 37656
// begin for i in tmp do
37608: LD_ADDR_VAR 0 6
37612: PUSH
37613: LD_VAR 0 5
37617: PUSH
37618: FOR_IN
37619: IFFALSE 37654
// if GetBase ( i ) <> base then
37621: LD_VAR 0 6
37625: PPUSH
37626: CALL_OW 274
37630: PUSH
37631: LD_VAR 0 1
37635: NONEQUAL
37636: IFFALSE 37652
// ComLinkToBase ( base , i ) ;
37638: LD_VAR 0 1
37642: PPUSH
37643: LD_VAR 0 6
37647: PPUSH
37648: CALL_OW 169
37652: GO 37618
37654: POP
37655: POP
// end ; result := tmp ;
37656: LD_ADDR_VAR 0 4
37660: PUSH
37661: LD_VAR 0 5
37665: ST_TO_ADDR
// end ;
37666: LD_VAR 0 4
37670: RET
// export function ComComplete ( units , b ) ; var i ; begin
37671: LD_INT 0
37673: PPUSH
37674: PPUSH
// if not units then
37675: LD_VAR 0 1
37679: NOT
37680: IFFALSE 37684
// exit ;
37682: GO 37774
// for i in units do
37684: LD_ADDR_VAR 0 4
37688: PUSH
37689: LD_VAR 0 1
37693: PUSH
37694: FOR_IN
37695: IFFALSE 37772
// if BuildingStatus ( b ) = bs_build then
37697: LD_VAR 0 2
37701: PPUSH
37702: CALL_OW 461
37706: PUSH
37707: LD_INT 1
37709: EQUAL
37710: IFFALSE 37770
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37712: LD_VAR 0 4
37716: PPUSH
37717: LD_STRING h
37719: PUSH
37720: LD_VAR 0 2
37724: PPUSH
37725: CALL_OW 250
37729: PUSH
37730: LD_VAR 0 2
37734: PPUSH
37735: CALL_OW 251
37739: PUSH
37740: LD_VAR 0 2
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: LD_INT 0
37750: PUSH
37751: LD_INT 0
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: PUSH
37763: EMPTY
37764: LIST
37765: PPUSH
37766: CALL_OW 446
37770: GO 37694
37772: POP
37773: POP
// end ;
37774: LD_VAR 0 3
37778: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37779: LD_INT 0
37781: PPUSH
37782: PPUSH
37783: PPUSH
37784: PPUSH
37785: PPUSH
37786: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37787: LD_VAR 0 1
37791: NOT
37792: PUSH
37793: LD_VAR 0 1
37797: PPUSH
37798: CALL_OW 263
37802: PUSH
37803: LD_INT 2
37805: NONEQUAL
37806: OR
37807: IFFALSE 37811
// exit ;
37809: GO 38127
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37811: LD_ADDR_VAR 0 6
37815: PUSH
37816: LD_INT 22
37818: PUSH
37819: LD_VAR 0 1
37823: PPUSH
37824: CALL_OW 255
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 2
37835: PUSH
37836: LD_INT 30
37838: PUSH
37839: LD_INT 36
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 34
37848: PUSH
37849: LD_INT 31
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: LIST
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PPUSH
37865: CALL_OW 69
37869: ST_TO_ADDR
// if not tmp then
37870: LD_VAR 0 6
37874: NOT
37875: IFFALSE 37879
// exit ;
37877: GO 38127
// result := [ ] ;
37879: LD_ADDR_VAR 0 2
37883: PUSH
37884: EMPTY
37885: ST_TO_ADDR
// for i in tmp do
37886: LD_ADDR_VAR 0 3
37890: PUSH
37891: LD_VAR 0 6
37895: PUSH
37896: FOR_IN
37897: IFFALSE 37968
// begin t := UnitsInside ( i ) ;
37899: LD_ADDR_VAR 0 4
37903: PUSH
37904: LD_VAR 0 3
37908: PPUSH
37909: CALL_OW 313
37913: ST_TO_ADDR
// if t then
37914: LD_VAR 0 4
37918: IFFALSE 37966
// for j in t do
37920: LD_ADDR_VAR 0 7
37924: PUSH
37925: LD_VAR 0 4
37929: PUSH
37930: FOR_IN
37931: IFFALSE 37964
// result := Replace ( result , result + 1 , j ) ;
37933: LD_ADDR_VAR 0 2
37937: PUSH
37938: LD_VAR 0 2
37942: PPUSH
37943: LD_VAR 0 2
37947: PUSH
37948: LD_INT 1
37950: PLUS
37951: PPUSH
37952: LD_VAR 0 7
37956: PPUSH
37957: CALL_OW 1
37961: ST_TO_ADDR
37962: GO 37930
37964: POP
37965: POP
// end ;
37966: GO 37896
37968: POP
37969: POP
// if not result then
37970: LD_VAR 0 2
37974: NOT
37975: IFFALSE 37979
// exit ;
37977: GO 38127
// mech := result [ 1 ] ;
37979: LD_ADDR_VAR 0 5
37983: PUSH
37984: LD_VAR 0 2
37988: PUSH
37989: LD_INT 1
37991: ARRAY
37992: ST_TO_ADDR
// if result > 1 then
37993: LD_VAR 0 2
37997: PUSH
37998: LD_INT 1
38000: GREATER
38001: IFFALSE 38113
// begin for i = 2 to result do
38003: LD_ADDR_VAR 0 3
38007: PUSH
38008: DOUBLE
38009: LD_INT 2
38011: DEC
38012: ST_TO_ADDR
38013: LD_VAR 0 2
38017: PUSH
38018: FOR_TO
38019: IFFALSE 38111
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38021: LD_ADDR_VAR 0 4
38025: PUSH
38026: LD_VAR 0 2
38030: PUSH
38031: LD_VAR 0 3
38035: ARRAY
38036: PPUSH
38037: LD_INT 3
38039: PPUSH
38040: CALL_OW 259
38044: PUSH
38045: LD_VAR 0 2
38049: PUSH
38050: LD_VAR 0 3
38054: ARRAY
38055: PPUSH
38056: CALL_OW 432
38060: MINUS
38061: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38062: LD_VAR 0 4
38066: PUSH
38067: LD_VAR 0 5
38071: PPUSH
38072: LD_INT 3
38074: PPUSH
38075: CALL_OW 259
38079: PUSH
38080: LD_VAR 0 5
38084: PPUSH
38085: CALL_OW 432
38089: MINUS
38090: GREATEREQUAL
38091: IFFALSE 38109
// mech := result [ i ] ;
38093: LD_ADDR_VAR 0 5
38097: PUSH
38098: LD_VAR 0 2
38102: PUSH
38103: LD_VAR 0 3
38107: ARRAY
38108: ST_TO_ADDR
// end ;
38109: GO 38018
38111: POP
38112: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38113: LD_VAR 0 1
38117: PPUSH
38118: LD_VAR 0 5
38122: PPUSH
38123: CALL_OW 135
// end ;
38127: LD_VAR 0 2
38131: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38132: LD_INT 0
38134: PPUSH
38135: PPUSH
38136: PPUSH
38137: PPUSH
38138: PPUSH
38139: PPUSH
38140: PPUSH
38141: PPUSH
38142: PPUSH
38143: PPUSH
38144: PPUSH
38145: PPUSH
38146: PPUSH
// result := [ ] ;
38147: LD_ADDR_VAR 0 7
38151: PUSH
38152: EMPTY
38153: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38154: LD_VAR 0 1
38158: PPUSH
38159: CALL_OW 266
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: IN
38174: NOT
38175: IFFALSE 38179
// exit ;
38177: GO 39813
// if name then
38179: LD_VAR 0 3
38183: IFFALSE 38199
// SetBName ( base_dep , name ) ;
38185: LD_VAR 0 1
38189: PPUSH
38190: LD_VAR 0 3
38194: PPUSH
38195: CALL_OW 500
// base := GetBase ( base_dep ) ;
38199: LD_ADDR_VAR 0 15
38203: PUSH
38204: LD_VAR 0 1
38208: PPUSH
38209: CALL_OW 274
38213: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38214: LD_ADDR_VAR 0 16
38218: PUSH
38219: LD_VAR 0 1
38223: PPUSH
38224: CALL_OW 255
38228: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38229: LD_ADDR_VAR 0 17
38233: PUSH
38234: LD_VAR 0 1
38238: PPUSH
38239: CALL_OW 248
38243: ST_TO_ADDR
// if sources then
38244: LD_VAR 0 5
38248: IFFALSE 38295
// for i = 1 to 3 do
38250: LD_ADDR_VAR 0 8
38254: PUSH
38255: DOUBLE
38256: LD_INT 1
38258: DEC
38259: ST_TO_ADDR
38260: LD_INT 3
38262: PUSH
38263: FOR_TO
38264: IFFALSE 38293
// AddResourceType ( base , i , sources [ i ] ) ;
38266: LD_VAR 0 15
38270: PPUSH
38271: LD_VAR 0 8
38275: PPUSH
38276: LD_VAR 0 5
38280: PUSH
38281: LD_VAR 0 8
38285: ARRAY
38286: PPUSH
38287: CALL_OW 276
38291: GO 38263
38293: POP
38294: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38295: LD_ADDR_VAR 0 18
38299: PUSH
38300: LD_VAR 0 15
38304: PPUSH
38305: LD_VAR 0 2
38309: PPUSH
38310: LD_INT 1
38312: PPUSH
38313: CALL 37556 0 3
38317: ST_TO_ADDR
// InitHc ;
38318: CALL_OW 19
// InitUc ;
38322: CALL_OW 18
// uc_side := side ;
38326: LD_ADDR_OWVAR 20
38330: PUSH
38331: LD_VAR 0 16
38335: ST_TO_ADDR
// uc_nation := nation ;
38336: LD_ADDR_OWVAR 21
38340: PUSH
38341: LD_VAR 0 17
38345: ST_TO_ADDR
// if buildings then
38346: LD_VAR 0 18
38350: IFFALSE 39672
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38352: LD_ADDR_VAR 0 19
38356: PUSH
38357: LD_VAR 0 18
38361: PPUSH
38362: LD_INT 2
38364: PUSH
38365: LD_INT 30
38367: PUSH
38368: LD_INT 29
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 30
38377: PUSH
38378: LD_INT 30
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: LIST
38389: PPUSH
38390: CALL_OW 72
38394: ST_TO_ADDR
// if tmp then
38395: LD_VAR 0 19
38399: IFFALSE 38447
// for i in tmp do
38401: LD_ADDR_VAR 0 8
38405: PUSH
38406: LD_VAR 0 19
38410: PUSH
38411: FOR_IN
38412: IFFALSE 38445
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38414: LD_VAR 0 8
38418: PPUSH
38419: CALL_OW 250
38423: PPUSH
38424: LD_VAR 0 8
38428: PPUSH
38429: CALL_OW 251
38433: PPUSH
38434: LD_VAR 0 16
38438: PPUSH
38439: CALL_OW 441
38443: GO 38411
38445: POP
38446: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38447: LD_VAR 0 18
38451: PPUSH
38452: LD_INT 2
38454: PUSH
38455: LD_INT 30
38457: PUSH
38458: LD_INT 32
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 30
38467: PUSH
38468: LD_INT 33
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: LIST
38479: PPUSH
38480: CALL_OW 72
38484: IFFALSE 38572
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38486: LD_ADDR_VAR 0 8
38490: PUSH
38491: LD_VAR 0 18
38495: PPUSH
38496: LD_INT 2
38498: PUSH
38499: LD_INT 30
38501: PUSH
38502: LD_INT 32
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 30
38511: PUSH
38512: LD_INT 33
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: LIST
38523: PPUSH
38524: CALL_OW 72
38528: PUSH
38529: FOR_IN
38530: IFFALSE 38570
// begin if not GetBWeapon ( i ) then
38532: LD_VAR 0 8
38536: PPUSH
38537: CALL_OW 269
38541: NOT
38542: IFFALSE 38568
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38544: LD_VAR 0 8
38548: PPUSH
38549: LD_VAR 0 8
38553: PPUSH
38554: LD_VAR 0 2
38558: PPUSH
38559: CALL 39818 0 2
38563: PPUSH
38564: CALL_OW 431
// end ;
38568: GO 38529
38570: POP
38571: POP
// end ; for i = 1 to personel do
38572: LD_ADDR_VAR 0 8
38576: PUSH
38577: DOUBLE
38578: LD_INT 1
38580: DEC
38581: ST_TO_ADDR
38582: LD_VAR 0 6
38586: PUSH
38587: FOR_TO
38588: IFFALSE 39652
// begin if i > 4 then
38590: LD_VAR 0 8
38594: PUSH
38595: LD_INT 4
38597: GREATER
38598: IFFALSE 38602
// break ;
38600: GO 39652
// case i of 1 :
38602: LD_VAR 0 8
38606: PUSH
38607: LD_INT 1
38609: DOUBLE
38610: EQUAL
38611: IFTRUE 38615
38613: GO 38695
38615: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38616: LD_ADDR_VAR 0 12
38620: PUSH
38621: LD_VAR 0 18
38625: PPUSH
38626: LD_INT 22
38628: PUSH
38629: LD_VAR 0 16
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 58
38640: PUSH
38641: EMPTY
38642: LIST
38643: PUSH
38644: LD_INT 2
38646: PUSH
38647: LD_INT 30
38649: PUSH
38650: LD_INT 32
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 30
38659: PUSH
38660: LD_INT 4
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 30
38669: PUSH
38670: LD_INT 5
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: LIST
38687: PPUSH
38688: CALL_OW 72
38692: ST_TO_ADDR
38693: GO 38917
38695: LD_INT 2
38697: DOUBLE
38698: EQUAL
38699: IFTRUE 38703
38701: GO 38765
38703: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38704: LD_ADDR_VAR 0 12
38708: PUSH
38709: LD_VAR 0 18
38713: PPUSH
38714: LD_INT 22
38716: PUSH
38717: LD_VAR 0 16
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 2
38728: PUSH
38729: LD_INT 30
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 30
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: LIST
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PPUSH
38758: CALL_OW 72
38762: ST_TO_ADDR
38763: GO 38917
38765: LD_INT 3
38767: DOUBLE
38768: EQUAL
38769: IFTRUE 38773
38771: GO 38835
38773: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38774: LD_ADDR_VAR 0 12
38778: PUSH
38779: LD_VAR 0 18
38783: PPUSH
38784: LD_INT 22
38786: PUSH
38787: LD_VAR 0 16
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 2
38798: PUSH
38799: LD_INT 30
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 30
38811: PUSH
38812: LD_INT 3
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: LIST
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PPUSH
38828: CALL_OW 72
38832: ST_TO_ADDR
38833: GO 38917
38835: LD_INT 4
38837: DOUBLE
38838: EQUAL
38839: IFTRUE 38843
38841: GO 38916
38843: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38844: LD_ADDR_VAR 0 12
38848: PUSH
38849: LD_VAR 0 18
38853: PPUSH
38854: LD_INT 22
38856: PUSH
38857: LD_VAR 0 16
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 2
38868: PUSH
38869: LD_INT 30
38871: PUSH
38872: LD_INT 6
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 30
38881: PUSH
38882: LD_INT 7
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 30
38891: PUSH
38892: LD_INT 8
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PPUSH
38909: CALL_OW 72
38913: ST_TO_ADDR
38914: GO 38917
38916: POP
// if i = 1 then
38917: LD_VAR 0 8
38921: PUSH
38922: LD_INT 1
38924: EQUAL
38925: IFFALSE 39036
// begin tmp := [ ] ;
38927: LD_ADDR_VAR 0 19
38931: PUSH
38932: EMPTY
38933: ST_TO_ADDR
// for j in f do
38934: LD_ADDR_VAR 0 9
38938: PUSH
38939: LD_VAR 0 12
38943: PUSH
38944: FOR_IN
38945: IFFALSE 39018
// if GetBType ( j ) = b_bunker then
38947: LD_VAR 0 9
38951: PPUSH
38952: CALL_OW 266
38956: PUSH
38957: LD_INT 32
38959: EQUAL
38960: IFFALSE 38987
// tmp := Insert ( tmp , 1 , j ) else
38962: LD_ADDR_VAR 0 19
38966: PUSH
38967: LD_VAR 0 19
38971: PPUSH
38972: LD_INT 1
38974: PPUSH
38975: LD_VAR 0 9
38979: PPUSH
38980: CALL_OW 2
38984: ST_TO_ADDR
38985: GO 39016
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38987: LD_ADDR_VAR 0 19
38991: PUSH
38992: LD_VAR 0 19
38996: PPUSH
38997: LD_VAR 0 19
39001: PUSH
39002: LD_INT 1
39004: PLUS
39005: PPUSH
39006: LD_VAR 0 9
39010: PPUSH
39011: CALL_OW 2
39015: ST_TO_ADDR
39016: GO 38944
39018: POP
39019: POP
// if tmp then
39020: LD_VAR 0 19
39024: IFFALSE 39036
// f := tmp ;
39026: LD_ADDR_VAR 0 12
39030: PUSH
39031: LD_VAR 0 19
39035: ST_TO_ADDR
// end ; x := personel [ i ] ;
39036: LD_ADDR_VAR 0 13
39040: PUSH
39041: LD_VAR 0 6
39045: PUSH
39046: LD_VAR 0 8
39050: ARRAY
39051: ST_TO_ADDR
// if x = - 1 then
39052: LD_VAR 0 13
39056: PUSH
39057: LD_INT 1
39059: NEG
39060: EQUAL
39061: IFFALSE 39270
// begin for j in f do
39063: LD_ADDR_VAR 0 9
39067: PUSH
39068: LD_VAR 0 12
39072: PUSH
39073: FOR_IN
39074: IFFALSE 39266
// repeat InitHc ;
39076: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39080: LD_VAR 0 9
39084: PPUSH
39085: CALL_OW 266
39089: PUSH
39090: LD_INT 5
39092: EQUAL
39093: IFFALSE 39163
// begin if UnitsInside ( j ) < 3 then
39095: LD_VAR 0 9
39099: PPUSH
39100: CALL_OW 313
39104: PUSH
39105: LD_INT 3
39107: LESS
39108: IFFALSE 39144
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39110: LD_INT 0
39112: PPUSH
39113: LD_INT 5
39115: PUSH
39116: LD_INT 8
39118: PUSH
39119: LD_INT 9
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: PUSH
39127: LD_VAR 0 17
39131: ARRAY
39132: PPUSH
39133: LD_VAR 0 4
39137: PPUSH
39138: CALL_OW 380
39142: GO 39161
// PrepareHuman ( false , i , skill ) ;
39144: LD_INT 0
39146: PPUSH
39147: LD_VAR 0 8
39151: PPUSH
39152: LD_VAR 0 4
39156: PPUSH
39157: CALL_OW 380
// end else
39161: GO 39180
// PrepareHuman ( false , i , skill ) ;
39163: LD_INT 0
39165: PPUSH
39166: LD_VAR 0 8
39170: PPUSH
39171: LD_VAR 0 4
39175: PPUSH
39176: CALL_OW 380
// un := CreateHuman ;
39180: LD_ADDR_VAR 0 14
39184: PUSH
39185: CALL_OW 44
39189: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39190: LD_ADDR_VAR 0 7
39194: PUSH
39195: LD_VAR 0 7
39199: PPUSH
39200: LD_INT 1
39202: PPUSH
39203: LD_VAR 0 14
39207: PPUSH
39208: CALL_OW 2
39212: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39213: LD_VAR 0 14
39217: PPUSH
39218: LD_VAR 0 9
39222: PPUSH
39223: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39227: LD_VAR 0 9
39231: PPUSH
39232: CALL_OW 313
39236: PUSH
39237: LD_INT 6
39239: EQUAL
39240: PUSH
39241: LD_VAR 0 9
39245: PPUSH
39246: CALL_OW 266
39250: PUSH
39251: LD_INT 32
39253: PUSH
39254: LD_INT 31
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: IN
39261: OR
39262: IFFALSE 39076
39264: GO 39073
39266: POP
39267: POP
// end else
39268: GO 39650
// for j = 1 to x do
39270: LD_ADDR_VAR 0 9
39274: PUSH
39275: DOUBLE
39276: LD_INT 1
39278: DEC
39279: ST_TO_ADDR
39280: LD_VAR 0 13
39284: PUSH
39285: FOR_TO
39286: IFFALSE 39648
// begin InitHc ;
39288: CALL_OW 19
// if not f then
39292: LD_VAR 0 12
39296: NOT
39297: IFFALSE 39386
// begin PrepareHuman ( false , i , skill ) ;
39299: LD_INT 0
39301: PPUSH
39302: LD_VAR 0 8
39306: PPUSH
39307: LD_VAR 0 4
39311: PPUSH
39312: CALL_OW 380
// un := CreateHuman ;
39316: LD_ADDR_VAR 0 14
39320: PUSH
39321: CALL_OW 44
39325: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39326: LD_ADDR_VAR 0 7
39330: PUSH
39331: LD_VAR 0 7
39335: PPUSH
39336: LD_INT 1
39338: PPUSH
39339: LD_VAR 0 14
39343: PPUSH
39344: CALL_OW 2
39348: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39349: LD_VAR 0 14
39353: PPUSH
39354: LD_VAR 0 1
39358: PPUSH
39359: CALL_OW 250
39363: PPUSH
39364: LD_VAR 0 1
39368: PPUSH
39369: CALL_OW 251
39373: PPUSH
39374: LD_INT 10
39376: PPUSH
39377: LD_INT 0
39379: PPUSH
39380: CALL_OW 50
// continue ;
39384: GO 39285
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39386: LD_VAR 0 12
39390: PUSH
39391: LD_INT 1
39393: ARRAY
39394: PPUSH
39395: CALL_OW 313
39399: PUSH
39400: LD_VAR 0 12
39404: PUSH
39405: LD_INT 1
39407: ARRAY
39408: PPUSH
39409: CALL_OW 266
39413: PUSH
39414: LD_INT 32
39416: PUSH
39417: LD_INT 31
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: IN
39424: AND
39425: PUSH
39426: LD_VAR 0 12
39430: PUSH
39431: LD_INT 1
39433: ARRAY
39434: PPUSH
39435: CALL_OW 313
39439: PUSH
39440: LD_INT 6
39442: EQUAL
39443: OR
39444: IFFALSE 39464
// f := Delete ( f , 1 ) ;
39446: LD_ADDR_VAR 0 12
39450: PUSH
39451: LD_VAR 0 12
39455: PPUSH
39456: LD_INT 1
39458: PPUSH
39459: CALL_OW 3
39463: ST_TO_ADDR
// if not f then
39464: LD_VAR 0 12
39468: NOT
39469: IFFALSE 39487
// begin x := x + 2 ;
39471: LD_ADDR_VAR 0 13
39475: PUSH
39476: LD_VAR 0 13
39480: PUSH
39481: LD_INT 2
39483: PLUS
39484: ST_TO_ADDR
// continue ;
39485: GO 39285
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39487: LD_VAR 0 12
39491: PUSH
39492: LD_INT 1
39494: ARRAY
39495: PPUSH
39496: CALL_OW 266
39500: PUSH
39501: LD_INT 5
39503: EQUAL
39504: IFFALSE 39578
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39506: LD_VAR 0 12
39510: PUSH
39511: LD_INT 1
39513: ARRAY
39514: PPUSH
39515: CALL_OW 313
39519: PUSH
39520: LD_INT 3
39522: LESS
39523: IFFALSE 39559
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39525: LD_INT 0
39527: PPUSH
39528: LD_INT 5
39530: PUSH
39531: LD_INT 8
39533: PUSH
39534: LD_INT 9
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: LIST
39541: PUSH
39542: LD_VAR 0 17
39546: ARRAY
39547: PPUSH
39548: LD_VAR 0 4
39552: PPUSH
39553: CALL_OW 380
39557: GO 39576
// PrepareHuman ( false , i , skill ) ;
39559: LD_INT 0
39561: PPUSH
39562: LD_VAR 0 8
39566: PPUSH
39567: LD_VAR 0 4
39571: PPUSH
39572: CALL_OW 380
// end else
39576: GO 39595
// PrepareHuman ( false , i , skill ) ;
39578: LD_INT 0
39580: PPUSH
39581: LD_VAR 0 8
39585: PPUSH
39586: LD_VAR 0 4
39590: PPUSH
39591: CALL_OW 380
// un := CreateHuman ;
39595: LD_ADDR_VAR 0 14
39599: PUSH
39600: CALL_OW 44
39604: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39605: LD_ADDR_VAR 0 7
39609: PUSH
39610: LD_VAR 0 7
39614: PPUSH
39615: LD_INT 1
39617: PPUSH
39618: LD_VAR 0 14
39622: PPUSH
39623: CALL_OW 2
39627: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39628: LD_VAR 0 14
39632: PPUSH
39633: LD_VAR 0 12
39637: PUSH
39638: LD_INT 1
39640: ARRAY
39641: PPUSH
39642: CALL_OW 52
// end ;
39646: GO 39285
39648: POP
39649: POP
// end ;
39650: GO 38587
39652: POP
39653: POP
// result := result ^ buildings ;
39654: LD_ADDR_VAR 0 7
39658: PUSH
39659: LD_VAR 0 7
39663: PUSH
39664: LD_VAR 0 18
39668: ADD
39669: ST_TO_ADDR
// end else
39670: GO 39813
// begin for i = 1 to personel do
39672: LD_ADDR_VAR 0 8
39676: PUSH
39677: DOUBLE
39678: LD_INT 1
39680: DEC
39681: ST_TO_ADDR
39682: LD_VAR 0 6
39686: PUSH
39687: FOR_TO
39688: IFFALSE 39811
// begin if i > 4 then
39690: LD_VAR 0 8
39694: PUSH
39695: LD_INT 4
39697: GREATER
39698: IFFALSE 39702
// break ;
39700: GO 39811
// x := personel [ i ] ;
39702: LD_ADDR_VAR 0 13
39706: PUSH
39707: LD_VAR 0 6
39711: PUSH
39712: LD_VAR 0 8
39716: ARRAY
39717: ST_TO_ADDR
// if x = - 1 then
39718: LD_VAR 0 13
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: EQUAL
39727: IFFALSE 39731
// continue ;
39729: GO 39687
// PrepareHuman ( false , i , skill ) ;
39731: LD_INT 0
39733: PPUSH
39734: LD_VAR 0 8
39738: PPUSH
39739: LD_VAR 0 4
39743: PPUSH
39744: CALL_OW 380
// un := CreateHuman ;
39748: LD_ADDR_VAR 0 14
39752: PUSH
39753: CALL_OW 44
39757: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39758: LD_VAR 0 14
39762: PPUSH
39763: LD_VAR 0 1
39767: PPUSH
39768: CALL_OW 250
39772: PPUSH
39773: LD_VAR 0 1
39777: PPUSH
39778: CALL_OW 251
39782: PPUSH
39783: LD_INT 10
39785: PPUSH
39786: LD_INT 0
39788: PPUSH
39789: CALL_OW 50
// result := result ^ un ;
39793: LD_ADDR_VAR 0 7
39797: PUSH
39798: LD_VAR 0 7
39802: PUSH
39803: LD_VAR 0 14
39807: ADD
39808: ST_TO_ADDR
// end ;
39809: GO 39687
39811: POP
39812: POP
// end ; end ;
39813: LD_VAR 0 7
39817: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39818: LD_INT 0
39820: PPUSH
39821: PPUSH
39822: PPUSH
39823: PPUSH
39824: PPUSH
39825: PPUSH
39826: PPUSH
39827: PPUSH
39828: PPUSH
39829: PPUSH
39830: PPUSH
39831: PPUSH
39832: PPUSH
39833: PPUSH
39834: PPUSH
39835: PPUSH
// result := false ;
39836: LD_ADDR_VAR 0 3
39840: PUSH
39841: LD_INT 0
39843: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39844: LD_VAR 0 1
39848: NOT
39849: PUSH
39850: LD_VAR 0 1
39854: PPUSH
39855: CALL_OW 266
39859: PUSH
39860: LD_INT 32
39862: PUSH
39863: LD_INT 33
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: IN
39870: NOT
39871: OR
39872: IFFALSE 39876
// exit ;
39874: GO 40985
// nat := GetNation ( tower ) ;
39876: LD_ADDR_VAR 0 12
39880: PUSH
39881: LD_VAR 0 1
39885: PPUSH
39886: CALL_OW 248
39890: ST_TO_ADDR
// side := GetSide ( tower ) ;
39891: LD_ADDR_VAR 0 16
39895: PUSH
39896: LD_VAR 0 1
39900: PPUSH
39901: CALL_OW 255
39905: ST_TO_ADDR
// x := GetX ( tower ) ;
39906: LD_ADDR_VAR 0 10
39910: PUSH
39911: LD_VAR 0 1
39915: PPUSH
39916: CALL_OW 250
39920: ST_TO_ADDR
// y := GetY ( tower ) ;
39921: LD_ADDR_VAR 0 11
39925: PUSH
39926: LD_VAR 0 1
39930: PPUSH
39931: CALL_OW 251
39935: ST_TO_ADDR
// if not x or not y then
39936: LD_VAR 0 10
39940: NOT
39941: PUSH
39942: LD_VAR 0 11
39946: NOT
39947: OR
39948: IFFALSE 39952
// exit ;
39950: GO 40985
// weapon := 0 ;
39952: LD_ADDR_VAR 0 18
39956: PUSH
39957: LD_INT 0
39959: ST_TO_ADDR
// fac_list := [ ] ;
39960: LD_ADDR_VAR 0 17
39964: PUSH
39965: EMPTY
39966: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39967: LD_ADDR_VAR 0 6
39971: PUSH
39972: LD_VAR 0 1
39976: PPUSH
39977: CALL_OW 274
39981: PPUSH
39982: LD_VAR 0 2
39986: PPUSH
39987: LD_INT 0
39989: PPUSH
39990: CALL 37556 0 3
39994: PPUSH
39995: LD_INT 30
39997: PUSH
39998: LD_INT 3
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PPUSH
40005: CALL_OW 72
40009: ST_TO_ADDR
// if not factories then
40010: LD_VAR 0 6
40014: NOT
40015: IFFALSE 40019
// exit ;
40017: GO 40985
// for i in factories do
40019: LD_ADDR_VAR 0 8
40023: PUSH
40024: LD_VAR 0 6
40028: PUSH
40029: FOR_IN
40030: IFFALSE 40055
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40032: LD_ADDR_VAR 0 17
40036: PUSH
40037: LD_VAR 0 17
40041: PUSH
40042: LD_VAR 0 8
40046: PPUSH
40047: CALL_OW 478
40051: UNION
40052: ST_TO_ADDR
40053: GO 40029
40055: POP
40056: POP
// if not fac_list then
40057: LD_VAR 0 17
40061: NOT
40062: IFFALSE 40066
// exit ;
40064: GO 40985
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40066: LD_ADDR_VAR 0 5
40070: PUSH
40071: LD_INT 4
40073: PUSH
40074: LD_INT 5
40076: PUSH
40077: LD_INT 9
40079: PUSH
40080: LD_INT 10
40082: PUSH
40083: LD_INT 6
40085: PUSH
40086: LD_INT 7
40088: PUSH
40089: LD_INT 11
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 27
40103: PUSH
40104: LD_INT 28
40106: PUSH
40107: LD_INT 26
40109: PUSH
40110: LD_INT 30
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 43
40121: PUSH
40122: LD_INT 44
40124: PUSH
40125: LD_INT 46
40127: PUSH
40128: LD_INT 45
40130: PUSH
40131: LD_INT 47
40133: PUSH
40134: LD_INT 49
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: LIST
40149: PUSH
40150: LD_VAR 0 12
40154: ARRAY
40155: ST_TO_ADDR
// list := list isect fac_list ;
40156: LD_ADDR_VAR 0 5
40160: PUSH
40161: LD_VAR 0 5
40165: PUSH
40166: LD_VAR 0 17
40170: ISECT
40171: ST_TO_ADDR
// if not list then
40172: LD_VAR 0 5
40176: NOT
40177: IFFALSE 40181
// exit ;
40179: GO 40985
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40181: LD_VAR 0 12
40185: PUSH
40186: LD_INT 3
40188: EQUAL
40189: PUSH
40190: LD_INT 49
40192: PUSH
40193: LD_VAR 0 5
40197: IN
40198: AND
40199: PUSH
40200: LD_INT 31
40202: PPUSH
40203: LD_VAR 0 16
40207: PPUSH
40208: CALL_OW 321
40212: PUSH
40213: LD_INT 2
40215: EQUAL
40216: AND
40217: IFFALSE 40277
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40219: LD_INT 22
40221: PUSH
40222: LD_VAR 0 16
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 35
40233: PUSH
40234: LD_INT 49
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 91
40243: PUSH
40244: LD_VAR 0 1
40248: PUSH
40249: LD_INT 10
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: LIST
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: LIST
40261: PPUSH
40262: CALL_OW 69
40266: NOT
40267: IFFALSE 40277
// weapon := ru_time_lapser ;
40269: LD_ADDR_VAR 0 18
40273: PUSH
40274: LD_INT 49
40276: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40277: LD_VAR 0 12
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: LD_INT 2
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: IN
40292: PUSH
40293: LD_INT 11
40295: PUSH
40296: LD_VAR 0 5
40300: IN
40301: PUSH
40302: LD_INT 30
40304: PUSH
40305: LD_VAR 0 5
40309: IN
40310: OR
40311: AND
40312: PUSH
40313: LD_INT 6
40315: PPUSH
40316: LD_VAR 0 16
40320: PPUSH
40321: CALL_OW 321
40325: PUSH
40326: LD_INT 2
40328: EQUAL
40329: AND
40330: IFFALSE 40495
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40332: LD_INT 22
40334: PUSH
40335: LD_VAR 0 16
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 2
40346: PUSH
40347: LD_INT 35
40349: PUSH
40350: LD_INT 11
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 35
40359: PUSH
40360: LD_INT 30
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 91
40374: PUSH
40375: LD_VAR 0 1
40379: PUSH
40380: LD_INT 18
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: LIST
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: LIST
40392: PPUSH
40393: CALL_OW 69
40397: NOT
40398: PUSH
40399: LD_INT 22
40401: PUSH
40402: LD_VAR 0 16
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 2
40413: PUSH
40414: LD_INT 30
40416: PUSH
40417: LD_INT 32
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 30
40426: PUSH
40427: LD_INT 33
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 91
40441: PUSH
40442: LD_VAR 0 1
40446: PUSH
40447: LD_INT 12
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: LIST
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: LIST
40459: PUSH
40460: EMPTY
40461: LIST
40462: PPUSH
40463: CALL_OW 69
40467: PUSH
40468: LD_INT 2
40470: GREATER
40471: AND
40472: IFFALSE 40495
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40474: LD_ADDR_VAR 0 18
40478: PUSH
40479: LD_INT 11
40481: PUSH
40482: LD_INT 30
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_VAR 0 12
40493: ARRAY
40494: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40495: LD_VAR 0 18
40499: NOT
40500: PUSH
40501: LD_INT 40
40503: PPUSH
40504: LD_VAR 0 16
40508: PPUSH
40509: CALL_OW 321
40513: PUSH
40514: LD_INT 2
40516: EQUAL
40517: AND
40518: PUSH
40519: LD_INT 7
40521: PUSH
40522: LD_VAR 0 5
40526: IN
40527: PUSH
40528: LD_INT 28
40530: PUSH
40531: LD_VAR 0 5
40535: IN
40536: OR
40537: PUSH
40538: LD_INT 45
40540: PUSH
40541: LD_VAR 0 5
40545: IN
40546: OR
40547: AND
40548: IFFALSE 40802
// begin hex := GetHexInfo ( x , y ) ;
40550: LD_ADDR_VAR 0 4
40554: PUSH
40555: LD_VAR 0 10
40559: PPUSH
40560: LD_VAR 0 11
40564: PPUSH
40565: CALL_OW 546
40569: ST_TO_ADDR
// if hex [ 1 ] then
40570: LD_VAR 0 4
40574: PUSH
40575: LD_INT 1
40577: ARRAY
40578: IFFALSE 40582
// exit ;
40580: GO 40985
// height := hex [ 2 ] ;
40582: LD_ADDR_VAR 0 15
40586: PUSH
40587: LD_VAR 0 4
40591: PUSH
40592: LD_INT 2
40594: ARRAY
40595: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40596: LD_ADDR_VAR 0 14
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: LD_INT 2
40606: PUSH
40607: LD_INT 3
40609: PUSH
40610: LD_INT 5
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: ST_TO_ADDR
// for i in tmp do
40619: LD_ADDR_VAR 0 8
40623: PUSH
40624: LD_VAR 0 14
40628: PUSH
40629: FOR_IN
40630: IFFALSE 40800
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40632: LD_ADDR_VAR 0 9
40636: PUSH
40637: LD_VAR 0 10
40641: PPUSH
40642: LD_VAR 0 8
40646: PPUSH
40647: LD_INT 5
40649: PPUSH
40650: CALL_OW 272
40654: PUSH
40655: LD_VAR 0 11
40659: PPUSH
40660: LD_VAR 0 8
40664: PPUSH
40665: LD_INT 5
40667: PPUSH
40668: CALL_OW 273
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40677: LD_VAR 0 9
40681: PUSH
40682: LD_INT 1
40684: ARRAY
40685: PPUSH
40686: LD_VAR 0 9
40690: PUSH
40691: LD_INT 2
40693: ARRAY
40694: PPUSH
40695: CALL_OW 488
40699: IFFALSE 40798
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40701: LD_ADDR_VAR 0 4
40705: PUSH
40706: LD_VAR 0 9
40710: PUSH
40711: LD_INT 1
40713: ARRAY
40714: PPUSH
40715: LD_VAR 0 9
40719: PUSH
40720: LD_INT 2
40722: ARRAY
40723: PPUSH
40724: CALL_OW 546
40728: ST_TO_ADDR
// if hex [ 1 ] then
40729: LD_VAR 0 4
40733: PUSH
40734: LD_INT 1
40736: ARRAY
40737: IFFALSE 40741
// continue ;
40739: GO 40629
// h := hex [ 2 ] ;
40741: LD_ADDR_VAR 0 13
40745: PUSH
40746: LD_VAR 0 4
40750: PUSH
40751: LD_INT 2
40753: ARRAY
40754: ST_TO_ADDR
// if h + 7 < height then
40755: LD_VAR 0 13
40759: PUSH
40760: LD_INT 7
40762: PLUS
40763: PUSH
40764: LD_VAR 0 15
40768: LESS
40769: IFFALSE 40798
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40771: LD_ADDR_VAR 0 18
40775: PUSH
40776: LD_INT 7
40778: PUSH
40779: LD_INT 28
40781: PUSH
40782: LD_INT 45
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: LIST
40789: PUSH
40790: LD_VAR 0 12
40794: ARRAY
40795: ST_TO_ADDR
// break ;
40796: GO 40800
// end ; end ; end ;
40798: GO 40629
40800: POP
40801: POP
// end ; if not weapon then
40802: LD_VAR 0 18
40806: NOT
40807: IFFALSE 40867
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40809: LD_ADDR_VAR 0 5
40813: PUSH
40814: LD_VAR 0 5
40818: PUSH
40819: LD_INT 11
40821: PUSH
40822: LD_INT 30
40824: PUSH
40825: LD_INT 49
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: LIST
40832: DIFF
40833: ST_TO_ADDR
// if not list then
40834: LD_VAR 0 5
40838: NOT
40839: IFFALSE 40843
// exit ;
40841: GO 40985
// weapon := list [ rand ( 1 , list ) ] ;
40843: LD_ADDR_VAR 0 18
40847: PUSH
40848: LD_VAR 0 5
40852: PUSH
40853: LD_INT 1
40855: PPUSH
40856: LD_VAR 0 5
40860: PPUSH
40861: CALL_OW 12
40865: ARRAY
40866: ST_TO_ADDR
// end ; if weapon then
40867: LD_VAR 0 18
40871: IFFALSE 40985
// begin tmp := CostOfWeapon ( weapon ) ;
40873: LD_ADDR_VAR 0 14
40877: PUSH
40878: LD_VAR 0 18
40882: PPUSH
40883: CALL_OW 451
40887: ST_TO_ADDR
// j := GetBase ( tower ) ;
40888: LD_ADDR_VAR 0 9
40892: PUSH
40893: LD_VAR 0 1
40897: PPUSH
40898: CALL_OW 274
40902: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40903: LD_VAR 0 9
40907: PPUSH
40908: LD_INT 1
40910: PPUSH
40911: CALL_OW 275
40915: PUSH
40916: LD_VAR 0 14
40920: PUSH
40921: LD_INT 1
40923: ARRAY
40924: GREATEREQUAL
40925: PUSH
40926: LD_VAR 0 9
40930: PPUSH
40931: LD_INT 2
40933: PPUSH
40934: CALL_OW 275
40938: PUSH
40939: LD_VAR 0 14
40943: PUSH
40944: LD_INT 2
40946: ARRAY
40947: GREATEREQUAL
40948: AND
40949: PUSH
40950: LD_VAR 0 9
40954: PPUSH
40955: LD_INT 3
40957: PPUSH
40958: CALL_OW 275
40962: PUSH
40963: LD_VAR 0 14
40967: PUSH
40968: LD_INT 3
40970: ARRAY
40971: GREATEREQUAL
40972: AND
40973: IFFALSE 40985
// result := weapon ;
40975: LD_ADDR_VAR 0 3
40979: PUSH
40980: LD_VAR 0 18
40984: ST_TO_ADDR
// end ; end ;
40985: LD_VAR 0 3
40989: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40990: LD_INT 0
40992: PPUSH
40993: PPUSH
// result := true ;
40994: LD_ADDR_VAR 0 3
40998: PUSH
40999: LD_INT 1
41001: ST_TO_ADDR
// if array1 = array2 then
41002: LD_VAR 0 1
41006: PUSH
41007: LD_VAR 0 2
41011: EQUAL
41012: IFFALSE 41072
// begin for i = 1 to array1 do
41014: LD_ADDR_VAR 0 4
41018: PUSH
41019: DOUBLE
41020: LD_INT 1
41022: DEC
41023: ST_TO_ADDR
41024: LD_VAR 0 1
41028: PUSH
41029: FOR_TO
41030: IFFALSE 41068
// if array1 [ i ] <> array2 [ i ] then
41032: LD_VAR 0 1
41036: PUSH
41037: LD_VAR 0 4
41041: ARRAY
41042: PUSH
41043: LD_VAR 0 2
41047: PUSH
41048: LD_VAR 0 4
41052: ARRAY
41053: NONEQUAL
41054: IFFALSE 41066
// begin result := false ;
41056: LD_ADDR_VAR 0 3
41060: PUSH
41061: LD_INT 0
41063: ST_TO_ADDR
// break ;
41064: GO 41068
// end ;
41066: GO 41029
41068: POP
41069: POP
// end else
41070: GO 41080
// result := false ;
41072: LD_ADDR_VAR 0 3
41076: PUSH
41077: LD_INT 0
41079: ST_TO_ADDR
// end ;
41080: LD_VAR 0 3
41084: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41085: LD_INT 0
41087: PPUSH
41088: PPUSH
// if not array1 or not array2 then
41089: LD_VAR 0 1
41093: NOT
41094: PUSH
41095: LD_VAR 0 2
41099: NOT
41100: OR
41101: IFFALSE 41105
// exit ;
41103: GO 41169
// result := true ;
41105: LD_ADDR_VAR 0 3
41109: PUSH
41110: LD_INT 1
41112: ST_TO_ADDR
// for i = 1 to array1 do
41113: LD_ADDR_VAR 0 4
41117: PUSH
41118: DOUBLE
41119: LD_INT 1
41121: DEC
41122: ST_TO_ADDR
41123: LD_VAR 0 1
41127: PUSH
41128: FOR_TO
41129: IFFALSE 41167
// if array1 [ i ] <> array2 [ i ] then
41131: LD_VAR 0 1
41135: PUSH
41136: LD_VAR 0 4
41140: ARRAY
41141: PUSH
41142: LD_VAR 0 2
41146: PUSH
41147: LD_VAR 0 4
41151: ARRAY
41152: NONEQUAL
41153: IFFALSE 41165
// begin result := false ;
41155: LD_ADDR_VAR 0 3
41159: PUSH
41160: LD_INT 0
41162: ST_TO_ADDR
// break ;
41163: GO 41167
// end ;
41165: GO 41128
41167: POP
41168: POP
// end ;
41169: LD_VAR 0 3
41173: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41174: LD_INT 0
41176: PPUSH
41177: PPUSH
41178: PPUSH
// pom := GetBase ( fac ) ;
41179: LD_ADDR_VAR 0 5
41183: PUSH
41184: LD_VAR 0 1
41188: PPUSH
41189: CALL_OW 274
41193: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41194: LD_ADDR_VAR 0 4
41198: PUSH
41199: LD_VAR 0 2
41203: PUSH
41204: LD_INT 1
41206: ARRAY
41207: PPUSH
41208: LD_VAR 0 2
41212: PUSH
41213: LD_INT 2
41215: ARRAY
41216: PPUSH
41217: LD_VAR 0 2
41221: PUSH
41222: LD_INT 3
41224: ARRAY
41225: PPUSH
41226: LD_VAR 0 2
41230: PUSH
41231: LD_INT 4
41233: ARRAY
41234: PPUSH
41235: CALL_OW 449
41239: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41240: LD_ADDR_VAR 0 3
41244: PUSH
41245: LD_VAR 0 5
41249: PPUSH
41250: LD_INT 1
41252: PPUSH
41253: CALL_OW 275
41257: PUSH
41258: LD_VAR 0 4
41262: PUSH
41263: LD_INT 1
41265: ARRAY
41266: GREATEREQUAL
41267: PUSH
41268: LD_VAR 0 5
41272: PPUSH
41273: LD_INT 2
41275: PPUSH
41276: CALL_OW 275
41280: PUSH
41281: LD_VAR 0 4
41285: PUSH
41286: LD_INT 2
41288: ARRAY
41289: GREATEREQUAL
41290: AND
41291: PUSH
41292: LD_VAR 0 5
41296: PPUSH
41297: LD_INT 3
41299: PPUSH
41300: CALL_OW 275
41304: PUSH
41305: LD_VAR 0 4
41309: PUSH
41310: LD_INT 3
41312: ARRAY
41313: GREATEREQUAL
41314: AND
41315: ST_TO_ADDR
// end ;
41316: LD_VAR 0 3
41320: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41321: LD_INT 0
41323: PPUSH
41324: PPUSH
41325: PPUSH
41326: PPUSH
// pom := GetBase ( building ) ;
41327: LD_ADDR_VAR 0 3
41331: PUSH
41332: LD_VAR 0 1
41336: PPUSH
41337: CALL_OW 274
41341: ST_TO_ADDR
// if not pom then
41342: LD_VAR 0 3
41346: NOT
41347: IFFALSE 41351
// exit ;
41349: GO 41521
// btype := GetBType ( building ) ;
41351: LD_ADDR_VAR 0 5
41355: PUSH
41356: LD_VAR 0 1
41360: PPUSH
41361: CALL_OW 266
41365: ST_TO_ADDR
// if btype = b_armoury then
41366: LD_VAR 0 5
41370: PUSH
41371: LD_INT 4
41373: EQUAL
41374: IFFALSE 41384
// btype := b_barracks ;
41376: LD_ADDR_VAR 0 5
41380: PUSH
41381: LD_INT 5
41383: ST_TO_ADDR
// if btype = b_depot then
41384: LD_VAR 0 5
41388: PUSH
41389: LD_INT 0
41391: EQUAL
41392: IFFALSE 41402
// btype := b_warehouse ;
41394: LD_ADDR_VAR 0 5
41398: PUSH
41399: LD_INT 1
41401: ST_TO_ADDR
// if btype = b_workshop then
41402: LD_VAR 0 5
41406: PUSH
41407: LD_INT 2
41409: EQUAL
41410: IFFALSE 41420
// btype := b_factory ;
41412: LD_ADDR_VAR 0 5
41416: PUSH
41417: LD_INT 3
41419: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41420: LD_ADDR_VAR 0 4
41424: PUSH
41425: LD_VAR 0 5
41429: PPUSH
41430: LD_VAR 0 1
41434: PPUSH
41435: CALL_OW 248
41439: PPUSH
41440: CALL_OW 450
41444: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41445: LD_ADDR_VAR 0 2
41449: PUSH
41450: LD_VAR 0 3
41454: PPUSH
41455: LD_INT 1
41457: PPUSH
41458: CALL_OW 275
41462: PUSH
41463: LD_VAR 0 4
41467: PUSH
41468: LD_INT 1
41470: ARRAY
41471: GREATEREQUAL
41472: PUSH
41473: LD_VAR 0 3
41477: PPUSH
41478: LD_INT 2
41480: PPUSH
41481: CALL_OW 275
41485: PUSH
41486: LD_VAR 0 4
41490: PUSH
41491: LD_INT 2
41493: ARRAY
41494: GREATEREQUAL
41495: AND
41496: PUSH
41497: LD_VAR 0 3
41501: PPUSH
41502: LD_INT 3
41504: PPUSH
41505: CALL_OW 275
41509: PUSH
41510: LD_VAR 0 4
41514: PUSH
41515: LD_INT 3
41517: ARRAY
41518: GREATEREQUAL
41519: AND
41520: ST_TO_ADDR
// end ;
41521: LD_VAR 0 2
41525: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41526: LD_INT 0
41528: PPUSH
41529: PPUSH
41530: PPUSH
// pom := GetBase ( building ) ;
41531: LD_ADDR_VAR 0 4
41535: PUSH
41536: LD_VAR 0 1
41540: PPUSH
41541: CALL_OW 274
41545: ST_TO_ADDR
// if not pom then
41546: LD_VAR 0 4
41550: NOT
41551: IFFALSE 41555
// exit ;
41553: GO 41656
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41555: LD_ADDR_VAR 0 5
41559: PUSH
41560: LD_VAR 0 2
41564: PPUSH
41565: LD_VAR 0 1
41569: PPUSH
41570: CALL_OW 248
41574: PPUSH
41575: CALL_OW 450
41579: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41580: LD_ADDR_VAR 0 3
41584: PUSH
41585: LD_VAR 0 4
41589: PPUSH
41590: LD_INT 1
41592: PPUSH
41593: CALL_OW 275
41597: PUSH
41598: LD_VAR 0 5
41602: PUSH
41603: LD_INT 1
41605: ARRAY
41606: GREATEREQUAL
41607: PUSH
41608: LD_VAR 0 4
41612: PPUSH
41613: LD_INT 2
41615: PPUSH
41616: CALL_OW 275
41620: PUSH
41621: LD_VAR 0 5
41625: PUSH
41626: LD_INT 2
41628: ARRAY
41629: GREATEREQUAL
41630: AND
41631: PUSH
41632: LD_VAR 0 4
41636: PPUSH
41637: LD_INT 3
41639: PPUSH
41640: CALL_OW 275
41644: PUSH
41645: LD_VAR 0 5
41649: PUSH
41650: LD_INT 3
41652: ARRAY
41653: GREATEREQUAL
41654: AND
41655: ST_TO_ADDR
// end ;
41656: LD_VAR 0 3
41660: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41661: LD_INT 0
41663: PPUSH
41664: PPUSH
41665: PPUSH
41666: PPUSH
41667: PPUSH
41668: PPUSH
41669: PPUSH
41670: PPUSH
41671: PPUSH
41672: PPUSH
41673: PPUSH
// result := false ;
41674: LD_ADDR_VAR 0 8
41678: PUSH
41679: LD_INT 0
41681: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41682: LD_VAR 0 5
41686: NOT
41687: PUSH
41688: LD_VAR 0 1
41692: NOT
41693: OR
41694: PUSH
41695: LD_VAR 0 2
41699: NOT
41700: OR
41701: PUSH
41702: LD_VAR 0 3
41706: NOT
41707: OR
41708: IFFALSE 41712
// exit ;
41710: GO 42526
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41712: LD_ADDR_VAR 0 14
41716: PUSH
41717: LD_VAR 0 1
41721: PPUSH
41722: LD_VAR 0 2
41726: PPUSH
41727: LD_VAR 0 3
41731: PPUSH
41732: LD_VAR 0 4
41736: PPUSH
41737: LD_VAR 0 5
41741: PUSH
41742: LD_INT 1
41744: ARRAY
41745: PPUSH
41746: CALL_OW 248
41750: PPUSH
41751: LD_INT 0
41753: PPUSH
41754: CALL 43779 0 6
41758: ST_TO_ADDR
// if not hexes then
41759: LD_VAR 0 14
41763: NOT
41764: IFFALSE 41768
// exit ;
41766: GO 42526
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41768: LD_ADDR_VAR 0 17
41772: PUSH
41773: LD_VAR 0 5
41777: PPUSH
41778: LD_INT 22
41780: PUSH
41781: LD_VAR 0 13
41785: PPUSH
41786: CALL_OW 255
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 2
41797: PUSH
41798: LD_INT 30
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 30
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: LIST
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PPUSH
41827: CALL_OW 72
41831: ST_TO_ADDR
// for i = 1 to hexes do
41832: LD_ADDR_VAR 0 9
41836: PUSH
41837: DOUBLE
41838: LD_INT 1
41840: DEC
41841: ST_TO_ADDR
41842: LD_VAR 0 14
41846: PUSH
41847: FOR_TO
41848: IFFALSE 42524
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41850: LD_ADDR_VAR 0 13
41854: PUSH
41855: LD_VAR 0 14
41859: PUSH
41860: LD_VAR 0 9
41864: ARRAY
41865: PUSH
41866: LD_INT 1
41868: ARRAY
41869: PPUSH
41870: LD_VAR 0 14
41874: PUSH
41875: LD_VAR 0 9
41879: ARRAY
41880: PUSH
41881: LD_INT 2
41883: ARRAY
41884: PPUSH
41885: CALL_OW 428
41889: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41890: LD_VAR 0 14
41894: PUSH
41895: LD_VAR 0 9
41899: ARRAY
41900: PUSH
41901: LD_INT 1
41903: ARRAY
41904: PPUSH
41905: LD_VAR 0 14
41909: PUSH
41910: LD_VAR 0 9
41914: ARRAY
41915: PUSH
41916: LD_INT 2
41918: ARRAY
41919: PPUSH
41920: CALL_OW 351
41924: PUSH
41925: LD_VAR 0 14
41929: PUSH
41930: LD_VAR 0 9
41934: ARRAY
41935: PUSH
41936: LD_INT 1
41938: ARRAY
41939: PPUSH
41940: LD_VAR 0 14
41944: PUSH
41945: LD_VAR 0 9
41949: ARRAY
41950: PUSH
41951: LD_INT 2
41953: ARRAY
41954: PPUSH
41955: CALL_OW 488
41959: NOT
41960: OR
41961: PUSH
41962: LD_VAR 0 13
41966: PPUSH
41967: CALL_OW 247
41971: PUSH
41972: LD_INT 3
41974: EQUAL
41975: OR
41976: IFFALSE 41982
// exit ;
41978: POP
41979: POP
41980: GO 42526
// if not tmp then
41982: LD_VAR 0 13
41986: NOT
41987: IFFALSE 41991
// continue ;
41989: GO 41847
// result := true ;
41991: LD_ADDR_VAR 0 8
41995: PUSH
41996: LD_INT 1
41998: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41999: LD_VAR 0 6
42003: PUSH
42004: LD_VAR 0 13
42008: PPUSH
42009: CALL_OW 247
42013: PUSH
42014: LD_INT 2
42016: EQUAL
42017: AND
42018: PUSH
42019: LD_VAR 0 13
42023: PPUSH
42024: CALL_OW 263
42028: PUSH
42029: LD_INT 1
42031: EQUAL
42032: AND
42033: IFFALSE 42197
// begin if IsDrivenBy ( tmp ) then
42035: LD_VAR 0 13
42039: PPUSH
42040: CALL_OW 311
42044: IFFALSE 42048
// continue ;
42046: GO 41847
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42048: LD_VAR 0 6
42052: PPUSH
42053: LD_INT 3
42055: PUSH
42056: LD_INT 60
42058: PUSH
42059: EMPTY
42060: LIST
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 3
42068: PUSH
42069: LD_INT 55
42071: PUSH
42072: EMPTY
42073: LIST
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PPUSH
42083: CALL_OW 72
42087: IFFALSE 42195
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42089: LD_ADDR_VAR 0 18
42093: PUSH
42094: LD_VAR 0 6
42098: PPUSH
42099: LD_INT 3
42101: PUSH
42102: LD_INT 60
42104: PUSH
42105: EMPTY
42106: LIST
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 3
42114: PUSH
42115: LD_INT 55
42117: PUSH
42118: EMPTY
42119: LIST
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PPUSH
42129: CALL_OW 72
42133: PUSH
42134: LD_INT 1
42136: ARRAY
42137: ST_TO_ADDR
// if IsInUnit ( driver ) then
42138: LD_VAR 0 18
42142: PPUSH
42143: CALL_OW 310
42147: IFFALSE 42158
// ComExit ( driver ) ;
42149: LD_VAR 0 18
42153: PPUSH
42154: CALL 67560 0 1
// AddComEnterUnit ( driver , tmp ) ;
42158: LD_VAR 0 18
42162: PPUSH
42163: LD_VAR 0 13
42167: PPUSH
42168: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42172: LD_VAR 0 18
42176: PPUSH
42177: LD_VAR 0 7
42181: PPUSH
42182: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42186: LD_VAR 0 18
42190: PPUSH
42191: CALL_OW 181
// end ; continue ;
42195: GO 41847
// end ; if not cleaners or not tmp in cleaners then
42197: LD_VAR 0 6
42201: NOT
42202: PUSH
42203: LD_VAR 0 13
42207: PUSH
42208: LD_VAR 0 6
42212: IN
42213: NOT
42214: OR
42215: IFFALSE 42522
// begin if dep then
42217: LD_VAR 0 17
42221: IFFALSE 42357
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42223: LD_ADDR_VAR 0 16
42227: PUSH
42228: LD_VAR 0 17
42232: PUSH
42233: LD_INT 1
42235: ARRAY
42236: PPUSH
42237: CALL_OW 250
42241: PPUSH
42242: LD_VAR 0 17
42246: PUSH
42247: LD_INT 1
42249: ARRAY
42250: PPUSH
42251: CALL_OW 254
42255: PPUSH
42256: LD_INT 5
42258: PPUSH
42259: CALL_OW 272
42263: PUSH
42264: LD_VAR 0 17
42268: PUSH
42269: LD_INT 1
42271: ARRAY
42272: PPUSH
42273: CALL_OW 251
42277: PPUSH
42278: LD_VAR 0 17
42282: PUSH
42283: LD_INT 1
42285: ARRAY
42286: PPUSH
42287: CALL_OW 254
42291: PPUSH
42292: LD_INT 5
42294: PPUSH
42295: CALL_OW 273
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42304: LD_VAR 0 16
42308: PUSH
42309: LD_INT 1
42311: ARRAY
42312: PPUSH
42313: LD_VAR 0 16
42317: PUSH
42318: LD_INT 2
42320: ARRAY
42321: PPUSH
42322: CALL_OW 488
42326: IFFALSE 42357
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42328: LD_VAR 0 13
42332: PPUSH
42333: LD_VAR 0 16
42337: PUSH
42338: LD_INT 1
42340: ARRAY
42341: PPUSH
42342: LD_VAR 0 16
42346: PUSH
42347: LD_INT 2
42349: ARRAY
42350: PPUSH
42351: CALL_OW 111
// continue ;
42355: GO 41847
// end ; end ; r := GetDir ( tmp ) ;
42357: LD_ADDR_VAR 0 15
42361: PUSH
42362: LD_VAR 0 13
42366: PPUSH
42367: CALL_OW 254
42371: ST_TO_ADDR
// if r = 5 then
42372: LD_VAR 0 15
42376: PUSH
42377: LD_INT 5
42379: EQUAL
42380: IFFALSE 42390
// r := 0 ;
42382: LD_ADDR_VAR 0 15
42386: PUSH
42387: LD_INT 0
42389: ST_TO_ADDR
// for j = r to 5 do
42390: LD_ADDR_VAR 0 10
42394: PUSH
42395: DOUBLE
42396: LD_VAR 0 15
42400: DEC
42401: ST_TO_ADDR
42402: LD_INT 5
42404: PUSH
42405: FOR_TO
42406: IFFALSE 42520
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42408: LD_ADDR_VAR 0 11
42412: PUSH
42413: LD_VAR 0 13
42417: PPUSH
42418: CALL_OW 250
42422: PPUSH
42423: LD_VAR 0 10
42427: PPUSH
42428: LD_INT 2
42430: PPUSH
42431: CALL_OW 272
42435: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42436: LD_ADDR_VAR 0 12
42440: PUSH
42441: LD_VAR 0 13
42445: PPUSH
42446: CALL_OW 251
42450: PPUSH
42451: LD_VAR 0 10
42455: PPUSH
42456: LD_INT 2
42458: PPUSH
42459: CALL_OW 273
42463: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42464: LD_VAR 0 11
42468: PPUSH
42469: LD_VAR 0 12
42473: PPUSH
42474: CALL_OW 488
42478: PUSH
42479: LD_VAR 0 11
42483: PPUSH
42484: LD_VAR 0 12
42488: PPUSH
42489: CALL_OW 428
42493: NOT
42494: AND
42495: IFFALSE 42518
// begin ComMoveXY ( tmp , _x , _y ) ;
42497: LD_VAR 0 13
42501: PPUSH
42502: LD_VAR 0 11
42506: PPUSH
42507: LD_VAR 0 12
42511: PPUSH
42512: CALL_OW 111
// break ;
42516: GO 42520
// end ; end ;
42518: GO 42405
42520: POP
42521: POP
// end ; end ;
42522: GO 41847
42524: POP
42525: POP
// end ;
42526: LD_VAR 0 8
42530: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42531: LD_INT 0
42533: PPUSH
// result := true ;
42534: LD_ADDR_VAR 0 3
42538: PUSH
42539: LD_INT 1
42541: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42542: LD_VAR 0 2
42546: PUSH
42547: LD_INT 24
42549: DOUBLE
42550: EQUAL
42551: IFTRUE 42561
42553: LD_INT 33
42555: DOUBLE
42556: EQUAL
42557: IFTRUE 42561
42559: GO 42586
42561: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42562: LD_ADDR_VAR 0 3
42566: PUSH
42567: LD_INT 32
42569: PPUSH
42570: LD_VAR 0 1
42574: PPUSH
42575: CALL_OW 321
42579: PUSH
42580: LD_INT 2
42582: EQUAL
42583: ST_TO_ADDR
42584: GO 42902
42586: LD_INT 20
42588: DOUBLE
42589: EQUAL
42590: IFTRUE 42594
42592: GO 42619
42594: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42595: LD_ADDR_VAR 0 3
42599: PUSH
42600: LD_INT 6
42602: PPUSH
42603: LD_VAR 0 1
42607: PPUSH
42608: CALL_OW 321
42612: PUSH
42613: LD_INT 2
42615: EQUAL
42616: ST_TO_ADDR
42617: GO 42902
42619: LD_INT 22
42621: DOUBLE
42622: EQUAL
42623: IFTRUE 42633
42625: LD_INT 36
42627: DOUBLE
42628: EQUAL
42629: IFTRUE 42633
42631: GO 42658
42633: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42634: LD_ADDR_VAR 0 3
42638: PUSH
42639: LD_INT 15
42641: PPUSH
42642: LD_VAR 0 1
42646: PPUSH
42647: CALL_OW 321
42651: PUSH
42652: LD_INT 2
42654: EQUAL
42655: ST_TO_ADDR
42656: GO 42902
42658: LD_INT 30
42660: DOUBLE
42661: EQUAL
42662: IFTRUE 42666
42664: GO 42691
42666: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42667: LD_ADDR_VAR 0 3
42671: PUSH
42672: LD_INT 20
42674: PPUSH
42675: LD_VAR 0 1
42679: PPUSH
42680: CALL_OW 321
42684: PUSH
42685: LD_INT 2
42687: EQUAL
42688: ST_TO_ADDR
42689: GO 42902
42691: LD_INT 28
42693: DOUBLE
42694: EQUAL
42695: IFTRUE 42705
42697: LD_INT 21
42699: DOUBLE
42700: EQUAL
42701: IFTRUE 42705
42703: GO 42730
42705: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42706: LD_ADDR_VAR 0 3
42710: PUSH
42711: LD_INT 21
42713: PPUSH
42714: LD_VAR 0 1
42718: PPUSH
42719: CALL_OW 321
42723: PUSH
42724: LD_INT 2
42726: EQUAL
42727: ST_TO_ADDR
42728: GO 42902
42730: LD_INT 16
42732: DOUBLE
42733: EQUAL
42734: IFTRUE 42738
42736: GO 42763
42738: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42739: LD_ADDR_VAR 0 3
42743: PUSH
42744: LD_INT 84
42746: PPUSH
42747: LD_VAR 0 1
42751: PPUSH
42752: CALL_OW 321
42756: PUSH
42757: LD_INT 2
42759: EQUAL
42760: ST_TO_ADDR
42761: GO 42902
42763: LD_INT 19
42765: DOUBLE
42766: EQUAL
42767: IFTRUE 42777
42769: LD_INT 23
42771: DOUBLE
42772: EQUAL
42773: IFTRUE 42777
42775: GO 42802
42777: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42778: LD_ADDR_VAR 0 3
42782: PUSH
42783: LD_INT 83
42785: PPUSH
42786: LD_VAR 0 1
42790: PPUSH
42791: CALL_OW 321
42795: PUSH
42796: LD_INT 2
42798: EQUAL
42799: ST_TO_ADDR
42800: GO 42902
42802: LD_INT 17
42804: DOUBLE
42805: EQUAL
42806: IFTRUE 42810
42808: GO 42835
42810: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42811: LD_ADDR_VAR 0 3
42815: PUSH
42816: LD_INT 39
42818: PPUSH
42819: LD_VAR 0 1
42823: PPUSH
42824: CALL_OW 321
42828: PUSH
42829: LD_INT 2
42831: EQUAL
42832: ST_TO_ADDR
42833: GO 42902
42835: LD_INT 18
42837: DOUBLE
42838: EQUAL
42839: IFTRUE 42843
42841: GO 42868
42843: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42844: LD_ADDR_VAR 0 3
42848: PUSH
42849: LD_INT 40
42851: PPUSH
42852: LD_VAR 0 1
42856: PPUSH
42857: CALL_OW 321
42861: PUSH
42862: LD_INT 2
42864: EQUAL
42865: ST_TO_ADDR
42866: GO 42902
42868: LD_INT 27
42870: DOUBLE
42871: EQUAL
42872: IFTRUE 42876
42874: GO 42901
42876: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42877: LD_ADDR_VAR 0 3
42881: PUSH
42882: LD_INT 35
42884: PPUSH
42885: LD_VAR 0 1
42889: PPUSH
42890: CALL_OW 321
42894: PUSH
42895: LD_INT 2
42897: EQUAL
42898: ST_TO_ADDR
42899: GO 42902
42901: POP
// end ;
42902: LD_VAR 0 3
42906: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42907: LD_INT 0
42909: PPUSH
42910: PPUSH
42911: PPUSH
42912: PPUSH
42913: PPUSH
42914: PPUSH
42915: PPUSH
42916: PPUSH
42917: PPUSH
42918: PPUSH
42919: PPUSH
// result := false ;
42920: LD_ADDR_VAR 0 6
42924: PUSH
42925: LD_INT 0
42927: ST_TO_ADDR
// if btype = b_depot then
42928: LD_VAR 0 2
42932: PUSH
42933: LD_INT 0
42935: EQUAL
42936: IFFALSE 42948
// begin result := true ;
42938: LD_ADDR_VAR 0 6
42942: PUSH
42943: LD_INT 1
42945: ST_TO_ADDR
// exit ;
42946: GO 43774
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42948: LD_VAR 0 1
42952: NOT
42953: PUSH
42954: LD_VAR 0 1
42958: PPUSH
42959: CALL_OW 266
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: LD_INT 1
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: IN
42974: NOT
42975: OR
42976: PUSH
42977: LD_VAR 0 2
42981: NOT
42982: OR
42983: PUSH
42984: LD_VAR 0 5
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: LD_INT 2
42997: PUSH
42998: LD_INT 3
43000: PUSH
43001: LD_INT 4
43003: PUSH
43004: LD_INT 5
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: IN
43015: NOT
43016: OR
43017: PUSH
43018: LD_VAR 0 3
43022: PPUSH
43023: LD_VAR 0 4
43027: PPUSH
43028: CALL_OW 488
43032: NOT
43033: OR
43034: IFFALSE 43038
// exit ;
43036: GO 43774
// side := GetSide ( depot ) ;
43038: LD_ADDR_VAR 0 9
43042: PUSH
43043: LD_VAR 0 1
43047: PPUSH
43048: CALL_OW 255
43052: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43053: LD_VAR 0 9
43057: PPUSH
43058: LD_VAR 0 2
43062: PPUSH
43063: CALL 42531 0 2
43067: NOT
43068: IFFALSE 43072
// exit ;
43070: GO 43774
// pom := GetBase ( depot ) ;
43072: LD_ADDR_VAR 0 10
43076: PUSH
43077: LD_VAR 0 1
43081: PPUSH
43082: CALL_OW 274
43086: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43087: LD_ADDR_VAR 0 11
43091: PUSH
43092: LD_VAR 0 2
43096: PPUSH
43097: LD_VAR 0 1
43101: PPUSH
43102: CALL_OW 248
43106: PPUSH
43107: CALL_OW 450
43111: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43112: LD_VAR 0 10
43116: PPUSH
43117: LD_INT 1
43119: PPUSH
43120: CALL_OW 275
43124: PUSH
43125: LD_VAR 0 11
43129: PUSH
43130: LD_INT 1
43132: ARRAY
43133: GREATEREQUAL
43134: PUSH
43135: LD_VAR 0 10
43139: PPUSH
43140: LD_INT 2
43142: PPUSH
43143: CALL_OW 275
43147: PUSH
43148: LD_VAR 0 11
43152: PUSH
43153: LD_INT 2
43155: ARRAY
43156: GREATEREQUAL
43157: AND
43158: PUSH
43159: LD_VAR 0 10
43163: PPUSH
43164: LD_INT 3
43166: PPUSH
43167: CALL_OW 275
43171: PUSH
43172: LD_VAR 0 11
43176: PUSH
43177: LD_INT 3
43179: ARRAY
43180: GREATEREQUAL
43181: AND
43182: NOT
43183: IFFALSE 43187
// exit ;
43185: GO 43774
// if GetBType ( depot ) = b_depot then
43187: LD_VAR 0 1
43191: PPUSH
43192: CALL_OW 266
43196: PUSH
43197: LD_INT 0
43199: EQUAL
43200: IFFALSE 43212
// dist := 28 else
43202: LD_ADDR_VAR 0 14
43206: PUSH
43207: LD_INT 28
43209: ST_TO_ADDR
43210: GO 43220
// dist := 36 ;
43212: LD_ADDR_VAR 0 14
43216: PUSH
43217: LD_INT 36
43219: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43220: LD_VAR 0 1
43224: PPUSH
43225: LD_VAR 0 3
43229: PPUSH
43230: LD_VAR 0 4
43234: PPUSH
43235: CALL_OW 297
43239: PUSH
43240: LD_VAR 0 14
43244: GREATER
43245: IFFALSE 43249
// exit ;
43247: GO 43774
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43249: LD_ADDR_VAR 0 12
43253: PUSH
43254: LD_VAR 0 2
43258: PPUSH
43259: LD_VAR 0 3
43263: PPUSH
43264: LD_VAR 0 4
43268: PPUSH
43269: LD_VAR 0 5
43273: PPUSH
43274: LD_VAR 0 1
43278: PPUSH
43279: CALL_OW 248
43283: PPUSH
43284: LD_INT 0
43286: PPUSH
43287: CALL 43779 0 6
43291: ST_TO_ADDR
// if not hexes then
43292: LD_VAR 0 12
43296: NOT
43297: IFFALSE 43301
// exit ;
43299: GO 43774
// hex := GetHexInfo ( x , y ) ;
43301: LD_ADDR_VAR 0 15
43305: PUSH
43306: LD_VAR 0 3
43310: PPUSH
43311: LD_VAR 0 4
43315: PPUSH
43316: CALL_OW 546
43320: ST_TO_ADDR
// if hex [ 1 ] then
43321: LD_VAR 0 15
43325: PUSH
43326: LD_INT 1
43328: ARRAY
43329: IFFALSE 43333
// exit ;
43331: GO 43774
// height := hex [ 2 ] ;
43333: LD_ADDR_VAR 0 13
43337: PUSH
43338: LD_VAR 0 15
43342: PUSH
43343: LD_INT 2
43345: ARRAY
43346: ST_TO_ADDR
// for i = 1 to hexes do
43347: LD_ADDR_VAR 0 7
43351: PUSH
43352: DOUBLE
43353: LD_INT 1
43355: DEC
43356: ST_TO_ADDR
43357: LD_VAR 0 12
43361: PUSH
43362: FOR_TO
43363: IFFALSE 43693
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43365: LD_VAR 0 12
43369: PUSH
43370: LD_VAR 0 7
43374: ARRAY
43375: PUSH
43376: LD_INT 1
43378: ARRAY
43379: PPUSH
43380: LD_VAR 0 12
43384: PUSH
43385: LD_VAR 0 7
43389: ARRAY
43390: PUSH
43391: LD_INT 2
43393: ARRAY
43394: PPUSH
43395: CALL_OW 488
43399: NOT
43400: PUSH
43401: LD_VAR 0 12
43405: PUSH
43406: LD_VAR 0 7
43410: ARRAY
43411: PUSH
43412: LD_INT 1
43414: ARRAY
43415: PPUSH
43416: LD_VAR 0 12
43420: PUSH
43421: LD_VAR 0 7
43425: ARRAY
43426: PUSH
43427: LD_INT 2
43429: ARRAY
43430: PPUSH
43431: CALL_OW 428
43435: PUSH
43436: LD_INT 0
43438: GREATER
43439: OR
43440: PUSH
43441: LD_VAR 0 12
43445: PUSH
43446: LD_VAR 0 7
43450: ARRAY
43451: PUSH
43452: LD_INT 1
43454: ARRAY
43455: PPUSH
43456: LD_VAR 0 12
43460: PUSH
43461: LD_VAR 0 7
43465: ARRAY
43466: PUSH
43467: LD_INT 2
43469: ARRAY
43470: PPUSH
43471: CALL_OW 351
43475: OR
43476: IFFALSE 43482
// exit ;
43478: POP
43479: POP
43480: GO 43774
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43482: LD_ADDR_VAR 0 8
43486: PUSH
43487: LD_VAR 0 12
43491: PUSH
43492: LD_VAR 0 7
43496: ARRAY
43497: PUSH
43498: LD_INT 1
43500: ARRAY
43501: PPUSH
43502: LD_VAR 0 12
43506: PUSH
43507: LD_VAR 0 7
43511: ARRAY
43512: PUSH
43513: LD_INT 2
43515: ARRAY
43516: PPUSH
43517: CALL_OW 546
43521: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43522: LD_VAR 0 8
43526: PUSH
43527: LD_INT 1
43529: ARRAY
43530: PUSH
43531: LD_VAR 0 8
43535: PUSH
43536: LD_INT 2
43538: ARRAY
43539: PUSH
43540: LD_VAR 0 13
43544: PUSH
43545: LD_INT 2
43547: PLUS
43548: GREATER
43549: OR
43550: PUSH
43551: LD_VAR 0 8
43555: PUSH
43556: LD_INT 2
43558: ARRAY
43559: PUSH
43560: LD_VAR 0 13
43564: PUSH
43565: LD_INT 2
43567: MINUS
43568: LESS
43569: OR
43570: PUSH
43571: LD_VAR 0 8
43575: PUSH
43576: LD_INT 3
43578: ARRAY
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: LD_INT 8
43585: PUSH
43586: LD_INT 9
43588: PUSH
43589: LD_INT 10
43591: PUSH
43592: LD_INT 11
43594: PUSH
43595: LD_INT 12
43597: PUSH
43598: LD_INT 13
43600: PUSH
43601: LD_INT 16
43603: PUSH
43604: LD_INT 17
43606: PUSH
43607: LD_INT 18
43609: PUSH
43610: LD_INT 19
43612: PUSH
43613: LD_INT 20
43615: PUSH
43616: LD_INT 21
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: IN
43634: NOT
43635: OR
43636: PUSH
43637: LD_VAR 0 8
43641: PUSH
43642: LD_INT 5
43644: ARRAY
43645: NOT
43646: OR
43647: PUSH
43648: LD_VAR 0 8
43652: PUSH
43653: LD_INT 6
43655: ARRAY
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: LD_INT 2
43662: PUSH
43663: LD_INT 7
43665: PUSH
43666: LD_INT 9
43668: PUSH
43669: LD_INT 10
43671: PUSH
43672: LD_INT 11
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: IN
43683: NOT
43684: OR
43685: IFFALSE 43691
// exit ;
43687: POP
43688: POP
43689: GO 43774
// end ;
43691: GO 43362
43693: POP
43694: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43695: LD_VAR 0 9
43699: PPUSH
43700: LD_VAR 0 3
43704: PPUSH
43705: LD_VAR 0 4
43709: PPUSH
43710: LD_INT 20
43712: PPUSH
43713: CALL 35697 0 4
43717: PUSH
43718: LD_INT 4
43720: ARRAY
43721: IFFALSE 43725
// exit ;
43723: GO 43774
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43725: LD_VAR 0 2
43729: PUSH
43730: LD_INT 29
43732: PUSH
43733: LD_INT 30
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: IN
43740: PUSH
43741: LD_VAR 0 3
43745: PPUSH
43746: LD_VAR 0 4
43750: PPUSH
43751: LD_VAR 0 9
43755: PPUSH
43756: CALL_OW 440
43760: NOT
43761: AND
43762: IFFALSE 43766
// exit ;
43764: GO 43774
// result := true ;
43766: LD_ADDR_VAR 0 6
43770: PUSH
43771: LD_INT 1
43773: ST_TO_ADDR
// end ;
43774: LD_VAR 0 6
43778: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43779: LD_INT 0
43781: PPUSH
43782: PPUSH
43783: PPUSH
43784: PPUSH
43785: PPUSH
43786: PPUSH
43787: PPUSH
43788: PPUSH
43789: PPUSH
43790: PPUSH
43791: PPUSH
43792: PPUSH
43793: PPUSH
43794: PPUSH
43795: PPUSH
43796: PPUSH
43797: PPUSH
43798: PPUSH
43799: PPUSH
43800: PPUSH
43801: PPUSH
43802: PPUSH
43803: PPUSH
43804: PPUSH
43805: PPUSH
43806: PPUSH
43807: PPUSH
43808: PPUSH
43809: PPUSH
43810: PPUSH
43811: PPUSH
43812: PPUSH
43813: PPUSH
43814: PPUSH
43815: PPUSH
43816: PPUSH
43817: PPUSH
43818: PPUSH
43819: PPUSH
43820: PPUSH
43821: PPUSH
43822: PPUSH
43823: PPUSH
43824: PPUSH
43825: PPUSH
43826: PPUSH
43827: PPUSH
43828: PPUSH
43829: PPUSH
43830: PPUSH
43831: PPUSH
43832: PPUSH
43833: PPUSH
43834: PPUSH
43835: PPUSH
43836: PPUSH
43837: PPUSH
43838: PPUSH
// result = [ ] ;
43839: LD_ADDR_VAR 0 7
43843: PUSH
43844: EMPTY
43845: ST_TO_ADDR
// temp_list = [ ] ;
43846: LD_ADDR_VAR 0 9
43850: PUSH
43851: EMPTY
43852: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43853: LD_VAR 0 4
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: LD_INT 2
43866: PUSH
43867: LD_INT 3
43869: PUSH
43870: LD_INT 4
43872: PUSH
43873: LD_INT 5
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: IN
43884: NOT
43885: PUSH
43886: LD_VAR 0 1
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: IN
43901: PUSH
43902: LD_VAR 0 5
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: LD_INT 2
43912: PUSH
43913: LD_INT 3
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: LIST
43920: IN
43921: NOT
43922: AND
43923: OR
43924: IFFALSE 43928
// exit ;
43926: GO 62319
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43928: LD_VAR 0 1
43932: PUSH
43933: LD_INT 6
43935: PUSH
43936: LD_INT 7
43938: PUSH
43939: LD_INT 8
43941: PUSH
43942: LD_INT 13
43944: PUSH
43945: LD_INT 12
43947: PUSH
43948: LD_INT 15
43950: PUSH
43951: LD_INT 11
43953: PUSH
43954: LD_INT 14
43956: PUSH
43957: LD_INT 10
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: IN
43971: IFFALSE 43981
// btype = b_lab ;
43973: LD_ADDR_VAR 0 1
43977: PUSH
43978: LD_INT 6
43980: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43981: LD_VAR 0 6
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: LD_INT 2
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: LIST
43999: IN
44000: NOT
44001: PUSH
44002: LD_VAR 0 1
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: LD_INT 3
44018: PUSH
44019: LD_INT 6
44021: PUSH
44022: LD_INT 36
44024: PUSH
44025: LD_INT 4
44027: PUSH
44028: LD_INT 5
44030: PUSH
44031: LD_INT 31
44033: PUSH
44034: LD_INT 32
44036: PUSH
44037: LD_INT 33
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: IN
44053: NOT
44054: PUSH
44055: LD_VAR 0 6
44059: PUSH
44060: LD_INT 1
44062: EQUAL
44063: AND
44064: OR
44065: PUSH
44066: LD_VAR 0 1
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: LD_INT 3
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: IN
44081: NOT
44082: PUSH
44083: LD_VAR 0 6
44087: PUSH
44088: LD_INT 2
44090: EQUAL
44091: AND
44092: OR
44093: IFFALSE 44103
// mode = 0 ;
44095: LD_ADDR_VAR 0 6
44099: PUSH
44100: LD_INT 0
44102: ST_TO_ADDR
// case mode of 0 :
44103: LD_VAR 0 6
44107: PUSH
44108: LD_INT 0
44110: DOUBLE
44111: EQUAL
44112: IFTRUE 44116
44114: GO 55569
44116: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44117: LD_ADDR_VAR 0 11
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: LD_INT 0
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: LD_INT 1
44190: NEG
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: LD_INT 2
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 0
44210: PUSH
44211: LD_INT 2
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: LD_INT 2
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: LD_INT 2
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 1
44252: NEG
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: LD_INT 3
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: LD_INT 3
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: LD_INT 2
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44310: LD_ADDR_VAR 0 12
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 2
44433: NEG
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: NEG
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 3
44467: NEG
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 3
44478: NEG
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44506: LD_ADDR_VAR 0 13
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 1
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: LD_INT 1
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 2
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 2
44609: PUSH
44610: LD_INT 2
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: LD_INT 2
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 2
44641: NEG
44642: PUSH
44643: LD_INT 2
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 2
44653: NEG
44654: PUSH
44655: LD_INT 3
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 3
44665: NEG
44666: PUSH
44667: LD_INT 2
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 3
44677: NEG
44678: PUSH
44679: LD_INT 3
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44705: LD_ADDR_VAR 0 14
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: LD_INT 2
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: LD_INT 3
44855: NEG
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: LD_INT 3
44866: NEG
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: LD_INT 2
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44901: LD_ADDR_VAR 0 15
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 2
45003: PUSH
45004: LD_INT 1
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: NEG
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 2
45035: NEG
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 2
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 3
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 3
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45094: LD_ADDR_VAR 0 16
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: LD_INT 1
45114: NEG
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: LD_INT 1
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: LD_INT 2
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: LD_INT 2
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: LD_INT 2
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 2
45217: NEG
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: LD_INT 2
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 3
45241: PUSH
45242: LD_INT 2
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 3
45251: PUSH
45252: LD_INT 3
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 2
45261: PUSH
45262: LD_INT 3
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45287: LD_ADDR_VAR 0 17
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 2
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: LD_INT 2
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 2
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: LD_INT 2
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: NEG
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: LD_INT 2
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45517: LD_ADDR_VAR 0 18
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: LD_INT 2
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: LD_INT 2
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: NEG
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: LD_INT 2
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45747: LD_ADDR_VAR 0 19
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: LD_INT 2
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 2
45923: NEG
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 2
45934: NEG
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: LD_INT 2
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45977: LD_ADDR_VAR 0 20
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 2
46112: PUSH
46113: LD_INT 2
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46207: LD_ADDR_VAR 0 21
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: LD_INT 2
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: LD_INT 2
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: LD_INT 2
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: LD_INT 2
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 2
46406: NEG
46407: PUSH
46408: LD_INT 2
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46437: LD_ADDR_VAR 0 22
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: LD_INT 2
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: LD_INT 2
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: LD_INT 2
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 2
46636: NEG
46637: PUSH
46638: LD_INT 2
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46667: LD_ADDR_VAR 0 23
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: LD_INT 2
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: LD_INT 2
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: LD_INT 2
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 2
46843: NEG
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: NEG
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: LD_INT 2
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 2
46878: NEG
46879: PUSH
46880: LD_INT 3
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: LD_INT 3
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: LD_INT 2
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 2
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46947: LD_ADDR_VAR 0 24
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: LD_INT 2
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: LD_INT 2
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 2
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 2
47134: NEG
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 2
47146: NEG
47147: PUSH
47148: LD_INT 2
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: LD_INT 2
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 2
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 3
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 3
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47223: LD_ADDR_VAR 0 25
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: LD_INT 1
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: LD_INT 2
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: LD_INT 2
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 2
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 2
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: LD_INT 2
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: LD_INT 2
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: LD_INT 2
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: LD_INT 1
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 2
47399: NEG
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 2
47410: NEG
47411: PUSH
47412: LD_INT 1
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 2
47422: NEG
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 3
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 3
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: LD_INT 3
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 3
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47497: LD_ADDR_VAR 0 26
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: LD_INT 2
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: LD_INT 2
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 2
47632: PUSH
47633: LD_INT 2
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: LD_INT 2
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 2
47684: NEG
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 2
47696: NEG
47697: PUSH
47698: LD_INT 2
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: LD_INT 3
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: LD_INT 3
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: LD_INT 2
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 2
47739: NEG
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47773: LD_ADDR_VAR 0 27
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: LD_INT 2
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: LD_INT 2
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: LD_INT 2
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 2
47960: NEG
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: NEG
47973: PUSH
47974: LD_INT 2
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 2
47995: NEG
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 3
48006: NEG
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 3
48018: NEG
48019: PUSH
48020: LD_INT 2
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48053: LD_ADDR_VAR 0 28
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 2
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: LD_INT 2
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 2
48229: NEG
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: NEG
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 2
48252: NEG
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: LD_INT 3
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: NEG
48277: PUSH
48278: LD_INT 3
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 3
48288: NEG
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 3
48300: NEG
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48335: LD_ADDR_VAR 0 29
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: LD_INT 2
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: LD_INT 2
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: NEG
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 2
48513: NEG
48514: PUSH
48515: LD_INT 2
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: LD_INT 3
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 3
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: LD_INT 3
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: LD_INT 2
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 3
48579: NEG
48580: PUSH
48581: LD_INT 2
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48614: LD_ADDR_VAR 0 30
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 2
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: LD_INT 2
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 2
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 2
48749: PUSH
48750: LD_INT 2
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: LD_INT 2
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 2
48780: NEG
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 2
48791: NEG
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: LD_INT 3
48807: NEG
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: LD_INT 2
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 3
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 2
48836: PUSH
48837: LD_INT 3
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 2
48846: NEG
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 3
48857: NEG
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48892: LD_ADDR_VAR 0 31
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: LD_INT 2
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 2
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 2
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: LD_INT 2
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: LD_INT 2
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: LD_INT 2
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 2
49057: NEG
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 2
49069: NEG
49070: PUSH
49071: LD_INT 2
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: LD_INT 3
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 3
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: LD_INT 3
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: LD_INT 2
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 3
49135: NEG
49136: PUSH
49137: LD_INT 2
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49170: LD_ADDR_VAR 0 32
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: LD_INT 2
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 2
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 2
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: LD_INT 2
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 2
49336: NEG
49337: PUSH
49338: LD_INT 0
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: NEG
49348: PUSH
49349: LD_INT 1
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 3
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 3
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: LD_INT 3
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 3
49413: NEG
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49448: LD_ADDR_VAR 0 33
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: LD_INT 2
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 2
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: LD_INT 2
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: LD_INT 2
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 2
49603: NEG
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: NEG
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: NEG
49627: PUSH
49628: LD_INT 2
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 2
49638: NEG
49639: PUSH
49640: LD_INT 3
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 3
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 3
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 3
49692: NEG
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49727: LD_ADDR_VAR 0 34
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: LD_INT 2
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: LD_INT 2
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: NEG
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: NEG
49907: PUSH
49908: LD_INT 2
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: LD_INT 3
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 3
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 2
49951: PUSH
49952: LD_INT 3
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: NEG
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 3
49972: NEG
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50007: LD_ADDR_VAR 0 35
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 2
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 2
50098: NEG
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50119: LD_ADDR_VAR 0 36
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: LD_INT 2
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50231: LD_ADDR_VAR 0 37
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: LD_INT 1
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50343: LD_ADDR_VAR 0 38
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 2
50434: NEG
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50455: LD_ADDR_VAR 0 39
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: LD_INT 2
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: LD_INT 2
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50567: LD_ADDR_VAR 0 40
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50679: LD_ADDR_VAR 0 41
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: LD_INT 1
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: LD_INT 2
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 2
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: PUSH
50804: LD_INT 2
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: LD_INT 2
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 2
50834: NEG
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 2
50845: NEG
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 2
50857: NEG
50858: PUSH
50859: LD_INT 2
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 2
50869: NEG
50870: PUSH
50871: LD_INT 3
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 2
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 3
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 3
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 3
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 3
50922: PUSH
50923: LD_INT 3
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 2
50932: PUSH
50933: LD_INT 3
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 3
50953: NEG
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 3
50964: NEG
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 3
50976: NEG
50977: PUSH
50978: LD_INT 2
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 3
50988: NEG
50989: PUSH
50990: LD_INT 3
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51029: LD_ADDR_VAR 0 42
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: LD_INT 2
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 2
51154: PUSH
51155: LD_INT 2
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 2
51195: NEG
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 2
51207: NEG
51208: PUSH
51209: LD_INT 2
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 2
51219: NEG
51220: PUSH
51221: LD_INT 3
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: LD_INT 3
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: LD_INT 3
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: LD_INT 2
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 3
51265: PUSH
51266: LD_INT 2
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 3
51275: PUSH
51276: LD_INT 3
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: PUSH
51286: LD_INT 3
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: LD_INT 3
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: LD_INT 3
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 2
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 3
51326: NEG
51327: PUSH
51328: LD_INT 2
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 3
51338: NEG
51339: PUSH
51340: LD_INT 3
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51379: LD_ADDR_VAR 0 43
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: LD_INT 2
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: LD_INT 2
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 2
51545: NEG
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 2
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: LD_INT 3
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 3
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 3
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 3
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: LD_INT 3
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: LD_INT 3
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 3
51675: NEG
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 3
51686: NEG
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51727: LD_ADDR_VAR 0 44
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: LD_INT 2
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 2
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 2
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 2
51851: PUSH
51852: LD_INT 2
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 2
51882: NEG
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: NEG
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: LD_INT 2
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 2
51917: NEG
51918: PUSH
51919: LD_INT 3
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 3
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 3
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 3
51960: PUSH
51961: LD_INT 2
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 3
51970: PUSH
51971: LD_INT 3
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: PUSH
51981: LD_INT 3
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 2
51990: NEG
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 3
52001: NEG
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 3
52012: NEG
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 3
52024: NEG
52025: PUSH
52026: LD_INT 2
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 3
52036: NEG
52037: PUSH
52038: LD_INT 3
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52077: LD_ADDR_VAR 0 45
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: LD_INT 2
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: PUSH
52203: LD_INT 2
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 2
52255: NEG
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: NEG
52268: PUSH
52269: LD_INT 3
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 3
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 3
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 3
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 3
52323: PUSH
52324: LD_INT 3
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 2
52333: PUSH
52334: LD_INT 3
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: LD_INT 3
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: LD_INT 3
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 3
52374: NEG
52375: PUSH
52376: LD_INT 2
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 3
52386: NEG
52387: PUSH
52388: LD_INT 3
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52427: LD_ADDR_VAR 0 46
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 2
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: LD_INT 2
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: LD_INT 2
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: NEG
52617: PUSH
52618: LD_INT 3
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: LD_INT 3
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: LD_INT 2
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 2
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 3
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 3
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 3
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: LD_INT 3
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 2
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 2
52712: NEG
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 3
52723: NEG
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 3
52734: NEG
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52775: LD_ADDR_VAR 0 47
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: LD_INT 2
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: LD_INT 2
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 2
52902: NEG
52903: PUSH
52904: LD_INT 2
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52926: LD_ADDR_VAR 0 48
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: LD_INT 2
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 2
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53073: LD_ADDR_VAR 0 49
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 2
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 2
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: LD_INT 2
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53217: LD_ADDR_VAR 0 50
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 2
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 2
53308: PUSH
53309: LD_INT 2
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: LD_INT 2
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53361: LD_ADDR_VAR 0 51
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: NEG
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 2
53484: NEG
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53508: LD_ADDR_VAR 0 52
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: LD_INT 2
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: NEG
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: NEG
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 2
53635: NEG
53636: PUSH
53637: LD_INT 2
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53659: LD_ADDR_VAR 0 53
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: LD_INT 2
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: LD_INT 2
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: LD_INT 2
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 2
53846: NEG
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: LD_INT 2
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53889: LD_ADDR_VAR 0 54
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: LD_INT 2
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: LD_INT 2
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: LD_INT 2
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: LD_INT 2
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 2
54065: NEG
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 2
54076: NEG
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: LD_INT 2
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54119: LD_ADDR_VAR 0 55
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: LD_INT 2
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: LD_INT 2
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 2
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 2
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 2
54254: PUSH
54255: LD_INT 2
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: NEG
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 2
54306: NEG
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 2
54318: NEG
54319: PUSH
54320: LD_INT 2
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54349: LD_ADDR_VAR 0 56
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: LD_INT 2
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: LD_INT 2
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: NEG
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 2
54548: NEG
54549: PUSH
54550: LD_INT 2
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54579: LD_ADDR_VAR 0 57
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 2
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 2
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 2
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 2
54755: NEG
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 2
54778: NEG
54779: PUSH
54780: LD_INT 2
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54809: LD_ADDR_VAR 0 58
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: LD_INT 2
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 2
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: LD_INT 2
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: LD_INT 2
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: NEG
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 2
54996: NEG
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 2
55008: NEG
55009: PUSH
55010: LD_INT 2
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55039: LD_ADDR_VAR 0 59
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55127: LD_ADDR_VAR 0 60
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55215: LD_ADDR_VAR 0 61
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55303: LD_ADDR_VAR 0 62
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55391: LD_ADDR_VAR 0 63
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: LD_INT 1
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55479: LD_ADDR_VAR 0 64
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: ST_TO_ADDR
// end ; 1 :
55567: GO 61464
55569: LD_INT 1
55571: DOUBLE
55572: EQUAL
55573: IFTRUE 55577
55575: GO 58200
55577: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55578: LD_ADDR_VAR 0 11
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: LD_INT 3
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: LD_INT 3
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: LD_INT 2
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: LIST
55621: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55622: LD_ADDR_VAR 0 12
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 3
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 3
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: LIST
55662: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55663: LD_ADDR_VAR 0 13
55667: PUSH
55668: LD_INT 3
55670: PUSH
55671: LD_INT 2
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 3
55680: PUSH
55681: LD_INT 3
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 2
55690: PUSH
55691: LD_INT 3
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: LIST
55702: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55703: LD_ADDR_VAR 0 14
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: LD_INT 3
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 3
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: LIST
55743: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55744: LD_ADDR_VAR 0 15
55748: PUSH
55749: LD_INT 2
55751: NEG
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 3
55762: NEG
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 3
55773: NEG
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: LIST
55787: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55788: LD_ADDR_VAR 0 16
55792: PUSH
55793: LD_INT 2
55795: NEG
55796: PUSH
55797: LD_INT 3
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 3
55807: NEG
55808: PUSH
55809: LD_INT 2
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 3
55819: NEG
55820: PUSH
55821: LD_INT 3
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: LIST
55833: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55834: LD_ADDR_VAR 0 17
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: LD_INT 3
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: LD_INT 3
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: LIST
55877: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55878: LD_ADDR_VAR 0 18
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 3
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 3
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: LIST
55918: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55919: LD_ADDR_VAR 0 19
55923: PUSH
55924: LD_INT 3
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 3
55936: PUSH
55937: LD_INT 3
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 2
55946: PUSH
55947: LD_INT 3
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: LIST
55958: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55959: LD_ADDR_VAR 0 20
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: LD_INT 3
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: LD_INT 3
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: LD_INT 2
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: LIST
55999: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56000: LD_ADDR_VAR 0 21
56004: PUSH
56005: LD_INT 2
56007: NEG
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 3
56018: NEG
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 3
56029: NEG
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: LIST
56043: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56044: LD_ADDR_VAR 0 22
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: LD_INT 3
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 3
56063: NEG
56064: PUSH
56065: LD_INT 2
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 3
56075: NEG
56076: PUSH
56077: LD_INT 3
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: LIST
56089: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56090: LD_ADDR_VAR 0 23
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: LD_INT 3
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: LD_INT 4
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: LD_INT 3
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: LIST
56133: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56134: LD_ADDR_VAR 0 24
56138: PUSH
56139: LD_INT 3
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 3
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 4
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: LIST
56174: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56175: LD_ADDR_VAR 0 25
56179: PUSH
56180: LD_INT 3
56182: PUSH
56183: LD_INT 3
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 4
56192: PUSH
56193: LD_INT 3
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 3
56202: PUSH
56203: LD_INT 4
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: LIST
56214: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56215: LD_ADDR_VAR 0 26
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 3
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: LD_INT 4
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 1
56242: NEG
56243: PUSH
56244: LD_INT 3
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: LIST
56255: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56256: LD_ADDR_VAR 0 27
56260: PUSH
56261: LD_INT 3
56263: NEG
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 3
56274: NEG
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 4
56285: NEG
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: LIST
56299: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56300: LD_ADDR_VAR 0 28
56304: PUSH
56305: LD_INT 3
56307: NEG
56308: PUSH
56309: LD_INT 3
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 3
56319: NEG
56320: PUSH
56321: LD_INT 4
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 4
56331: NEG
56332: PUSH
56333: LD_INT 3
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: LIST
56345: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56346: LD_ADDR_VAR 0 29
56350: PUSH
56351: LD_INT 1
56353: NEG
56354: PUSH
56355: LD_INT 3
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 3
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: LD_INT 2
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: LD_INT 4
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: LD_INT 4
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: LD_INT 3
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: LD_INT 5
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: LD_INT 5
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: LD_INT 4
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: LD_INT 6
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: LD_INT 6
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: LD_INT 5
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56501: LD_ADDR_VAR 0 30
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 3
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 3
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 3
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 4
56550: PUSH
56551: LD_INT 0
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 4
56560: PUSH
56561: LD_INT 1
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 4
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 5
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 5
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 5
56601: PUSH
56602: LD_INT 1
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 6
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 6
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56644: LD_ADDR_VAR 0 31
56648: PUSH
56649: LD_INT 3
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 3
56661: PUSH
56662: LD_INT 3
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: LD_INT 3
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 4
56681: PUSH
56682: LD_INT 3
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 4
56691: PUSH
56692: LD_INT 4
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 3
56701: PUSH
56702: LD_INT 4
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 5
56711: PUSH
56712: LD_INT 4
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 5
56721: PUSH
56722: LD_INT 5
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 4
56731: PUSH
56732: LD_INT 5
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 6
56741: PUSH
56742: LD_INT 5
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 6
56751: PUSH
56752: LD_INT 6
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 5
56761: PUSH
56762: LD_INT 6
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56783: LD_ADDR_VAR 0 32
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 3
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: LD_INT 3
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: LD_INT 2
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: LD_INT 4
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: LD_INT 4
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: LD_INT 3
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: LD_INT 5
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: LD_INT 5
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 4
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: LD_INT 6
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: LD_INT 6
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: LD_INT 5
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56926: LD_ADDR_VAR 0 33
56930: PUSH
56931: LD_INT 2
56933: NEG
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 3
56944: NEG
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 3
56955: NEG
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 3
56967: NEG
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 4
56978: NEG
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 4
56989: NEG
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 4
57001: NEG
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 5
57012: NEG
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 5
57023: NEG
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 5
57035: NEG
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 6
57046: NEG
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 6
57057: NEG
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57081: LD_ADDR_VAR 0 34
57085: PUSH
57086: LD_INT 2
57088: NEG
57089: PUSH
57090: LD_INT 3
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 3
57100: NEG
57101: PUSH
57102: LD_INT 2
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 3
57112: NEG
57113: PUSH
57114: LD_INT 3
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 3
57124: NEG
57125: PUSH
57126: LD_INT 4
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 4
57136: NEG
57137: PUSH
57138: LD_INT 3
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 4
57148: NEG
57149: PUSH
57150: LD_INT 4
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 4
57160: NEG
57161: PUSH
57162: LD_INT 5
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 5
57172: NEG
57173: PUSH
57174: LD_INT 4
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 5
57184: NEG
57185: PUSH
57186: LD_INT 5
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 5
57196: NEG
57197: PUSH
57198: LD_INT 6
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 6
57208: NEG
57209: PUSH
57210: LD_INT 5
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 6
57220: NEG
57221: PUSH
57222: LD_INT 6
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57244: LD_ADDR_VAR 0 41
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: LD_INT 2
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: LD_INT 3
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: LIST
57287: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57288: LD_ADDR_VAR 0 42
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 3
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: LIST
57328: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57329: LD_ADDR_VAR 0 43
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: LD_INT 2
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 3
57346: PUSH
57347: LD_INT 2
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 2
57356: PUSH
57357: LD_INT 3
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: LIST
57368: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57369: LD_ADDR_VAR 0 44
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: LD_INT 2
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: LD_INT 3
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: LD_INT 2
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: LIST
57409: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57410: LD_ADDR_VAR 0 45
57414: PUSH
57415: LD_INT 2
57417: NEG
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 2
57428: NEG
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 3
57439: NEG
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: LIST
57453: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57454: LD_ADDR_VAR 0 46
57458: PUSH
57459: LD_INT 2
57461: NEG
57462: PUSH
57463: LD_INT 2
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: LD_INT 3
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 3
57485: NEG
57486: PUSH
57487: LD_INT 2
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: LIST
57499: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57500: LD_ADDR_VAR 0 47
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: LD_INT 3
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: LD_INT 3
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57533: LD_ADDR_VAR 0 48
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57564: LD_ADDR_VAR 0 49
57568: PUSH
57569: LD_INT 3
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 3
57581: PUSH
57582: LD_INT 2
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57593: LD_ADDR_VAR 0 50
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: LD_INT 3
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: PUSH
57611: LD_INT 3
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57622: LD_ADDR_VAR 0 51
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: LD_INT 2
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 2
57640: NEG
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57653: LD_ADDR_VAR 0 52
57657: PUSH
57658: LD_INT 3
57660: NEG
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 3
57672: NEG
57673: PUSH
57674: LD_INT 2
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57686: LD_ADDR_VAR 0 53
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: LD_INT 3
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: LD_INT 3
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: LD_INT 2
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: LIST
57729: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57730: LD_ADDR_VAR 0 54
57734: PUSH
57735: LD_INT 2
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 3
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 3
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: LIST
57770: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57771: LD_ADDR_VAR 0 55
57775: PUSH
57776: LD_INT 3
57778: PUSH
57779: LD_INT 2
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 3
57788: PUSH
57789: LD_INT 3
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 2
57798: PUSH
57799: LD_INT 3
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: LIST
57810: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57811: LD_ADDR_VAR 0 56
57815: PUSH
57816: LD_INT 1
57818: PUSH
57819: LD_INT 3
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: LD_INT 3
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: LD_INT 2
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: LIST
57851: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57852: LD_ADDR_VAR 0 57
57856: PUSH
57857: LD_INT 2
57859: NEG
57860: PUSH
57861: LD_INT 1
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 3
57870: NEG
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 3
57881: NEG
57882: PUSH
57883: LD_INT 1
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: LIST
57895: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57896: LD_ADDR_VAR 0 58
57900: PUSH
57901: LD_INT 2
57903: NEG
57904: PUSH
57905: LD_INT 3
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 3
57915: NEG
57916: PUSH
57917: LD_INT 2
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 3
57927: NEG
57928: PUSH
57929: LD_INT 3
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: LIST
57941: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57942: LD_ADDR_VAR 0 59
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: LD_INT 2
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: LIST
57985: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57986: LD_ADDR_VAR 0 60
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: LIST
58026: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58027: LD_ADDR_VAR 0 61
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 2
58044: PUSH
58045: LD_INT 2
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: LD_INT 2
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: LIST
58066: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58067: LD_ADDR_VAR 0 62
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: LD_INT 2
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: LD_INT 2
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: NEG
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: LIST
58107: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58108: LD_ADDR_VAR 0 63
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: LD_INT 1
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 2
58126: NEG
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 2
58137: NEG
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: LIST
58151: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58152: LD_ADDR_VAR 0 64
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: LD_INT 2
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 2
58171: NEG
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 2
58183: NEG
58184: PUSH
58185: LD_INT 2
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: LIST
58197: ST_TO_ADDR
// end ; 2 :
58198: GO 61464
58200: LD_INT 2
58202: DOUBLE
58203: EQUAL
58204: IFTRUE 58208
58206: GO 61463
58208: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58209: LD_ADDR_VAR 0 29
58213: PUSH
58214: LD_INT 4
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 4
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 5
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 5
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 4
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 3
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 3
58277: PUSH
58278: LD_INT 1
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 3
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 5
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 3
58309: PUSH
58310: LD_INT 3
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 3
58319: PUSH
58320: LD_INT 2
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 4
58329: PUSH
58330: LD_INT 3
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 4
58339: PUSH
58340: LD_INT 4
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 3
58349: PUSH
58350: LD_INT 4
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 2
58359: PUSH
58360: LD_INT 3
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 2
58369: PUSH
58370: LD_INT 2
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 4
58379: PUSH
58380: LD_INT 2
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 2
58389: PUSH
58390: LD_INT 4
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: LD_INT 4
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: LD_INT 3
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: LD_INT 4
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: LD_INT 5
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: LD_INT 5
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: LD_INT 4
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: NEG
58461: PUSH
58462: LD_INT 3
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: PUSH
58472: LD_INT 5
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: LD_INT 3
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 3
58492: NEG
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 3
58503: NEG
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 2
58526: NEG
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 4
58548: NEG
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 4
58559: NEG
58560: PUSH
58561: LD_INT 1
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 4
58571: NEG
58572: PUSH
58573: LD_INT 2
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: NEG
58584: PUSH
58585: LD_INT 2
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 4
58594: NEG
58595: PUSH
58596: LD_INT 4
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 4
58606: NEG
58607: PUSH
58608: LD_INT 5
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 3
58618: NEG
58619: PUSH
58620: LD_INT 4
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 3
58630: NEG
58631: PUSH
58632: LD_INT 3
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 4
58642: NEG
58643: PUSH
58644: LD_INT 3
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 5
58654: NEG
58655: PUSH
58656: LD_INT 4
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 5
58666: NEG
58667: PUSH
58668: LD_INT 5
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 3
58678: NEG
58679: PUSH
58680: LD_INT 5
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 5
58690: NEG
58691: PUSH
58692: LD_INT 3
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58747: LD_ADDR_VAR 0 30
58751: PUSH
58752: LD_INT 4
58754: PUSH
58755: LD_INT 4
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 4
58764: PUSH
58765: LD_INT 3
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 5
58774: PUSH
58775: LD_INT 4
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 5
58784: PUSH
58785: LD_INT 5
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 4
58794: PUSH
58795: LD_INT 5
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 3
58804: PUSH
58805: LD_INT 4
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 3
58814: PUSH
58815: LD_INT 3
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 5
58824: PUSH
58825: LD_INT 3
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 3
58834: PUSH
58835: LD_INT 5
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: LD_INT 3
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: LD_INT 2
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: LD_INT 3
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: LD_INT 4
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: LD_INT 4
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: LD_INT 3
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: LD_INT 2
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: PUSH
58917: LD_INT 4
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 4
58937: NEG
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 4
58948: NEG
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: NEG
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 3
58971: NEG
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 4
58982: NEG
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 5
58993: NEG
58994: PUSH
58995: LD_INT 0
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 5
59004: NEG
59005: PUSH
59006: LD_INT 1
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 5
59016: NEG
59017: PUSH
59018: LD_INT 2
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 3
59028: NEG
59029: PUSH
59030: LD_INT 2
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 3
59039: NEG
59040: PUSH
59041: LD_INT 3
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 3
59051: NEG
59052: PUSH
59053: LD_INT 4
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 2
59063: NEG
59064: PUSH
59065: LD_INT 3
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 2
59075: NEG
59076: PUSH
59077: LD_INT 2
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 3
59087: NEG
59088: PUSH
59089: LD_INT 2
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 4
59099: NEG
59100: PUSH
59101: LD_INT 3
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 4
59111: NEG
59112: PUSH
59113: LD_INT 4
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 2
59123: NEG
59124: PUSH
59125: LD_INT 4
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 4
59135: NEG
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: LD_INT 4
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: LD_INT 5
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: LD_INT 4
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: LD_INT 3
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: LD_INT 3
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: LD_INT 4
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: LD_INT 5
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 2
59226: PUSH
59227: LD_INT 3
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 2
59237: NEG
59238: PUSH
59239: LD_INT 5
59241: NEG
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59294: LD_ADDR_VAR 0 31
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: LD_INT 4
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: LD_INT 3
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: LD_INT 4
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: LD_INT 5
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: LD_INT 5
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: LD_INT 4
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: LD_INT 3
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: LD_INT 5
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 2
59383: NEG
59384: PUSH
59385: LD_INT 3
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 3
59394: NEG
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 3
59405: NEG
59406: PUSH
59407: LD_INT 1
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 2
59417: NEG
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 2
59428: NEG
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 3
59439: NEG
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 4
59450: NEG
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 4
59461: NEG
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 4
59473: NEG
59474: PUSH
59475: LD_INT 2
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 4
59496: NEG
59497: PUSH
59498: LD_INT 4
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 4
59508: NEG
59509: PUSH
59510: LD_INT 5
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 3
59520: NEG
59521: PUSH
59522: LD_INT 4
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 3
59532: NEG
59533: PUSH
59534: LD_INT 3
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 4
59544: NEG
59545: PUSH
59546: LD_INT 3
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 5
59556: NEG
59557: PUSH
59558: LD_INT 4
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 5
59568: NEG
59569: PUSH
59570: LD_INT 5
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 3
59580: NEG
59581: PUSH
59582: LD_INT 5
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 5
59592: NEG
59593: PUSH
59594: LD_INT 3
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: LD_INT 3
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: LD_INT 4
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: LD_INT 3
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: LD_INT 2
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: LD_INT 2
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: LD_INT 3
59663: NEG
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 1
59671: NEG
59672: PUSH
59673: LD_INT 4
59675: NEG
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 2
59683: PUSH
59684: LD_INT 2
59686: NEG
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 2
59694: NEG
59695: PUSH
59696: LD_INT 4
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 4
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 4
59716: PUSH
59717: LD_INT 1
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 5
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 5
59737: PUSH
59738: LD_INT 1
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 4
59747: PUSH
59748: LD_INT 1
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 3
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 3
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 3
59778: PUSH
59779: LD_INT 2
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 5
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59844: LD_ADDR_VAR 0 32
59848: PUSH
59849: LD_INT 4
59851: NEG
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 4
59862: NEG
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 3
59874: NEG
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 3
59885: NEG
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 4
59896: NEG
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 5
59907: NEG
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 5
59918: NEG
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 5
59930: NEG
59931: PUSH
59932: LD_INT 2
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 3
59942: NEG
59943: PUSH
59944: LD_INT 2
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 3
59953: NEG
59954: PUSH
59955: LD_INT 3
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 3
59965: NEG
59966: PUSH
59967: LD_INT 4
59969: NEG
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 2
59977: NEG
59978: PUSH
59979: LD_INT 3
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 2
59989: NEG
59990: PUSH
59991: LD_INT 2
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 3
60001: NEG
60002: PUSH
60003: LD_INT 2
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 4
60013: NEG
60014: PUSH
60015: LD_INT 3
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 4
60025: NEG
60026: PUSH
60027: LD_INT 4
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 2
60037: NEG
60038: PUSH
60039: LD_INT 4
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 4
60049: NEG
60050: PUSH
60051: LD_INT 2
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: LD_INT 4
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: LD_INT 5
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: LD_INT 4
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 1
60094: PUSH
60095: LD_INT 3
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: LD_INT 3
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: LD_INT 4
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: LD_INT 5
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 2
60140: PUSH
60141: LD_INT 3
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 2
60151: NEG
60152: PUSH
60153: LD_INT 5
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 3
60163: PUSH
60164: LD_INT 0
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 3
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 4
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 4
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 3
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 2
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 2
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: LD_INT 2
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 4
60246: PUSH
60247: LD_INT 2
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 4
60256: PUSH
60257: LD_INT 4
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 4
60266: PUSH
60267: LD_INT 3
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 5
60276: PUSH
60277: LD_INT 4
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 5
60286: PUSH
60287: LD_INT 5
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 4
60296: PUSH
60297: LD_INT 5
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 3
60306: PUSH
60307: LD_INT 4
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 3
60316: PUSH
60317: LD_INT 3
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 5
60326: PUSH
60327: LD_INT 3
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 3
60336: PUSH
60337: LD_INT 5
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60391: LD_ADDR_VAR 0 33
60395: PUSH
60396: LD_INT 4
60398: NEG
60399: PUSH
60400: LD_INT 4
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 4
60410: NEG
60411: PUSH
60412: LD_INT 5
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 3
60422: NEG
60423: PUSH
60424: LD_INT 4
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 3
60434: NEG
60435: PUSH
60436: LD_INT 3
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 4
60446: NEG
60447: PUSH
60448: LD_INT 3
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 5
60458: NEG
60459: PUSH
60460: LD_INT 4
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 5
60470: NEG
60471: PUSH
60472: LD_INT 5
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 3
60482: NEG
60483: PUSH
60484: LD_INT 5
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 5
60494: NEG
60495: PUSH
60496: LD_INT 3
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 3
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 0
60517: PUSH
60518: LD_INT 4
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: LD_INT 3
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: PUSH
60540: LD_INT 2
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: LD_INT 2
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: NEG
60562: PUSH
60563: LD_INT 3
60565: NEG
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 1
60573: NEG
60574: PUSH
60575: LD_INT 4
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 2
60585: PUSH
60586: LD_INT 2
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 2
60596: NEG
60597: PUSH
60598: LD_INT 4
60600: NEG
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 4
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 4
60618: PUSH
60619: LD_INT 1
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 5
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 5
60639: PUSH
60640: LD_INT 1
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 4
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 3
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 3
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 3
60680: PUSH
60681: LD_INT 2
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 5
60691: PUSH
60692: LD_INT 2
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 3
60701: PUSH
60702: LD_INT 3
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 3
60711: PUSH
60712: LD_INT 2
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 4
60721: PUSH
60722: LD_INT 3
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 4
60731: PUSH
60732: LD_INT 4
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 3
60741: PUSH
60742: LD_INT 4
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 2
60751: PUSH
60752: LD_INT 3
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 2
60761: PUSH
60762: LD_INT 2
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 4
60771: PUSH
60772: LD_INT 2
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: LD_INT 4
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 0
60791: PUSH
60792: LD_INT 4
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: LD_INT 3
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: LD_INT 4
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: LD_INT 5
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: LD_INT 5
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 1
60841: NEG
60842: PUSH
60843: LD_INT 4
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: NEG
60853: PUSH
60854: LD_INT 3
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 2
60863: PUSH
60864: LD_INT 5
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 2
60873: NEG
60874: PUSH
60875: LD_INT 3
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60929: LD_ADDR_VAR 0 34
60933: PUSH
60934: LD_INT 0
60936: PUSH
60937: LD_INT 4
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: LD_INT 5
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 1
60958: PUSH
60959: LD_INT 4
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: LD_INT 3
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: LD_INT 3
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: LD_INT 4
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: LD_INT 5
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 2
61015: PUSH
61016: LD_INT 3
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 2
61026: NEG
61027: PUSH
61028: LD_INT 5
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 3
61038: PUSH
61039: LD_INT 0
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 3
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 4
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 4
61069: PUSH
61070: LD_INT 1
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 3
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 2
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: LD_INT 1
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 2
61110: PUSH
61111: LD_INT 2
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 4
61121: PUSH
61122: LD_INT 2
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 4
61131: PUSH
61132: LD_INT 4
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 4
61141: PUSH
61142: LD_INT 3
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 5
61151: PUSH
61152: LD_INT 4
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 5
61161: PUSH
61162: LD_INT 5
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 4
61171: PUSH
61172: LD_INT 5
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 3
61181: PUSH
61182: LD_INT 4
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 3
61191: PUSH
61192: LD_INT 3
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 5
61201: PUSH
61202: LD_INT 3
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 3
61211: PUSH
61212: LD_INT 5
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: LD_INT 3
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: LD_INT 2
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 1
61241: PUSH
61242: LD_INT 3
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: LD_INT 4
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: LD_INT 4
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 1
61271: NEG
61272: PUSH
61273: LD_INT 3
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: LD_INT 2
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 2
61293: PUSH
61294: LD_INT 4
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 2
61303: NEG
61304: PUSH
61305: LD_INT 2
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 4
61314: NEG
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 4
61325: NEG
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 3
61337: NEG
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 3
61348: NEG
61349: PUSH
61350: LD_INT 1
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 4
61359: NEG
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 5
61370: NEG
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 5
61381: NEG
61382: PUSH
61383: LD_INT 1
61385: NEG
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 5
61393: NEG
61394: PUSH
61395: LD_INT 2
61397: NEG
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 3
61405: NEG
61406: PUSH
61407: LD_INT 2
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: ST_TO_ADDR
// end ; end ;
61461: GO 61464
61463: POP
// case btype of b_depot , b_warehouse :
61464: LD_VAR 0 1
61468: PUSH
61469: LD_INT 0
61471: DOUBLE
61472: EQUAL
61473: IFTRUE 61483
61475: LD_INT 1
61477: DOUBLE
61478: EQUAL
61479: IFTRUE 61483
61481: GO 61684
61483: POP
// case nation of nation_american :
61484: LD_VAR 0 5
61488: PUSH
61489: LD_INT 1
61491: DOUBLE
61492: EQUAL
61493: IFTRUE 61497
61495: GO 61553
61497: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61498: LD_ADDR_VAR 0 9
61502: PUSH
61503: LD_VAR 0 11
61507: PUSH
61508: LD_VAR 0 12
61512: PUSH
61513: LD_VAR 0 13
61517: PUSH
61518: LD_VAR 0 14
61522: PUSH
61523: LD_VAR 0 15
61527: PUSH
61528: LD_VAR 0 16
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: PUSH
61541: LD_VAR 0 4
61545: PUSH
61546: LD_INT 1
61548: PLUS
61549: ARRAY
61550: ST_TO_ADDR
61551: GO 61682
61553: LD_INT 2
61555: DOUBLE
61556: EQUAL
61557: IFTRUE 61561
61559: GO 61617
61561: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61562: LD_ADDR_VAR 0 9
61566: PUSH
61567: LD_VAR 0 17
61571: PUSH
61572: LD_VAR 0 18
61576: PUSH
61577: LD_VAR 0 19
61581: PUSH
61582: LD_VAR 0 20
61586: PUSH
61587: LD_VAR 0 21
61591: PUSH
61592: LD_VAR 0 22
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: PUSH
61605: LD_VAR 0 4
61609: PUSH
61610: LD_INT 1
61612: PLUS
61613: ARRAY
61614: ST_TO_ADDR
61615: GO 61682
61617: LD_INT 3
61619: DOUBLE
61620: EQUAL
61621: IFTRUE 61625
61623: GO 61681
61625: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61626: LD_ADDR_VAR 0 9
61630: PUSH
61631: LD_VAR 0 23
61635: PUSH
61636: LD_VAR 0 24
61640: PUSH
61641: LD_VAR 0 25
61645: PUSH
61646: LD_VAR 0 26
61650: PUSH
61651: LD_VAR 0 27
61655: PUSH
61656: LD_VAR 0 28
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: PUSH
61669: LD_VAR 0 4
61673: PUSH
61674: LD_INT 1
61676: PLUS
61677: ARRAY
61678: ST_TO_ADDR
61679: GO 61682
61681: POP
61682: GO 62237
61684: LD_INT 2
61686: DOUBLE
61687: EQUAL
61688: IFTRUE 61698
61690: LD_INT 3
61692: DOUBLE
61693: EQUAL
61694: IFTRUE 61698
61696: GO 61754
61698: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61699: LD_ADDR_VAR 0 9
61703: PUSH
61704: LD_VAR 0 29
61708: PUSH
61709: LD_VAR 0 30
61713: PUSH
61714: LD_VAR 0 31
61718: PUSH
61719: LD_VAR 0 32
61723: PUSH
61724: LD_VAR 0 33
61728: PUSH
61729: LD_VAR 0 34
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: PUSH
61742: LD_VAR 0 4
61746: PUSH
61747: LD_INT 1
61749: PLUS
61750: ARRAY
61751: ST_TO_ADDR
61752: GO 62237
61754: LD_INT 16
61756: DOUBLE
61757: EQUAL
61758: IFTRUE 61816
61760: LD_INT 17
61762: DOUBLE
61763: EQUAL
61764: IFTRUE 61816
61766: LD_INT 18
61768: DOUBLE
61769: EQUAL
61770: IFTRUE 61816
61772: LD_INT 19
61774: DOUBLE
61775: EQUAL
61776: IFTRUE 61816
61778: LD_INT 22
61780: DOUBLE
61781: EQUAL
61782: IFTRUE 61816
61784: LD_INT 20
61786: DOUBLE
61787: EQUAL
61788: IFTRUE 61816
61790: LD_INT 21
61792: DOUBLE
61793: EQUAL
61794: IFTRUE 61816
61796: LD_INT 23
61798: DOUBLE
61799: EQUAL
61800: IFTRUE 61816
61802: LD_INT 24
61804: DOUBLE
61805: EQUAL
61806: IFTRUE 61816
61808: LD_INT 25
61810: DOUBLE
61811: EQUAL
61812: IFTRUE 61816
61814: GO 61872
61816: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61817: LD_ADDR_VAR 0 9
61821: PUSH
61822: LD_VAR 0 35
61826: PUSH
61827: LD_VAR 0 36
61831: PUSH
61832: LD_VAR 0 37
61836: PUSH
61837: LD_VAR 0 38
61841: PUSH
61842: LD_VAR 0 39
61846: PUSH
61847: LD_VAR 0 40
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: PUSH
61860: LD_VAR 0 4
61864: PUSH
61865: LD_INT 1
61867: PLUS
61868: ARRAY
61869: ST_TO_ADDR
61870: GO 62237
61872: LD_INT 6
61874: DOUBLE
61875: EQUAL
61876: IFTRUE 61928
61878: LD_INT 7
61880: DOUBLE
61881: EQUAL
61882: IFTRUE 61928
61884: LD_INT 8
61886: DOUBLE
61887: EQUAL
61888: IFTRUE 61928
61890: LD_INT 13
61892: DOUBLE
61893: EQUAL
61894: IFTRUE 61928
61896: LD_INT 12
61898: DOUBLE
61899: EQUAL
61900: IFTRUE 61928
61902: LD_INT 15
61904: DOUBLE
61905: EQUAL
61906: IFTRUE 61928
61908: LD_INT 11
61910: DOUBLE
61911: EQUAL
61912: IFTRUE 61928
61914: LD_INT 14
61916: DOUBLE
61917: EQUAL
61918: IFTRUE 61928
61920: LD_INT 10
61922: DOUBLE
61923: EQUAL
61924: IFTRUE 61928
61926: GO 61984
61928: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61929: LD_ADDR_VAR 0 9
61933: PUSH
61934: LD_VAR 0 41
61938: PUSH
61939: LD_VAR 0 42
61943: PUSH
61944: LD_VAR 0 43
61948: PUSH
61949: LD_VAR 0 44
61953: PUSH
61954: LD_VAR 0 45
61958: PUSH
61959: LD_VAR 0 46
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: PUSH
61972: LD_VAR 0 4
61976: PUSH
61977: LD_INT 1
61979: PLUS
61980: ARRAY
61981: ST_TO_ADDR
61982: GO 62237
61984: LD_INT 36
61986: DOUBLE
61987: EQUAL
61988: IFTRUE 61992
61990: GO 62048
61992: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61993: LD_ADDR_VAR 0 9
61997: PUSH
61998: LD_VAR 0 47
62002: PUSH
62003: LD_VAR 0 48
62007: PUSH
62008: LD_VAR 0 49
62012: PUSH
62013: LD_VAR 0 50
62017: PUSH
62018: LD_VAR 0 51
62022: PUSH
62023: LD_VAR 0 52
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: PUSH
62036: LD_VAR 0 4
62040: PUSH
62041: LD_INT 1
62043: PLUS
62044: ARRAY
62045: ST_TO_ADDR
62046: GO 62237
62048: LD_INT 4
62050: DOUBLE
62051: EQUAL
62052: IFTRUE 62074
62054: LD_INT 5
62056: DOUBLE
62057: EQUAL
62058: IFTRUE 62074
62060: LD_INT 34
62062: DOUBLE
62063: EQUAL
62064: IFTRUE 62074
62066: LD_INT 37
62068: DOUBLE
62069: EQUAL
62070: IFTRUE 62074
62072: GO 62130
62074: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62075: LD_ADDR_VAR 0 9
62079: PUSH
62080: LD_VAR 0 53
62084: PUSH
62085: LD_VAR 0 54
62089: PUSH
62090: LD_VAR 0 55
62094: PUSH
62095: LD_VAR 0 56
62099: PUSH
62100: LD_VAR 0 57
62104: PUSH
62105: LD_VAR 0 58
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: PUSH
62118: LD_VAR 0 4
62122: PUSH
62123: LD_INT 1
62125: PLUS
62126: ARRAY
62127: ST_TO_ADDR
62128: GO 62237
62130: LD_INT 31
62132: DOUBLE
62133: EQUAL
62134: IFTRUE 62180
62136: LD_INT 32
62138: DOUBLE
62139: EQUAL
62140: IFTRUE 62180
62142: LD_INT 33
62144: DOUBLE
62145: EQUAL
62146: IFTRUE 62180
62148: LD_INT 27
62150: DOUBLE
62151: EQUAL
62152: IFTRUE 62180
62154: LD_INT 26
62156: DOUBLE
62157: EQUAL
62158: IFTRUE 62180
62160: LD_INT 28
62162: DOUBLE
62163: EQUAL
62164: IFTRUE 62180
62166: LD_INT 29
62168: DOUBLE
62169: EQUAL
62170: IFTRUE 62180
62172: LD_INT 30
62174: DOUBLE
62175: EQUAL
62176: IFTRUE 62180
62178: GO 62236
62180: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62181: LD_ADDR_VAR 0 9
62185: PUSH
62186: LD_VAR 0 59
62190: PUSH
62191: LD_VAR 0 60
62195: PUSH
62196: LD_VAR 0 61
62200: PUSH
62201: LD_VAR 0 62
62205: PUSH
62206: LD_VAR 0 63
62210: PUSH
62211: LD_VAR 0 64
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: PUSH
62224: LD_VAR 0 4
62228: PUSH
62229: LD_INT 1
62231: PLUS
62232: ARRAY
62233: ST_TO_ADDR
62234: GO 62237
62236: POP
// temp_list2 = [ ] ;
62237: LD_ADDR_VAR 0 10
62241: PUSH
62242: EMPTY
62243: ST_TO_ADDR
// for i in temp_list do
62244: LD_ADDR_VAR 0 8
62248: PUSH
62249: LD_VAR 0 9
62253: PUSH
62254: FOR_IN
62255: IFFALSE 62307
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62257: LD_ADDR_VAR 0 10
62261: PUSH
62262: LD_VAR 0 10
62266: PUSH
62267: LD_VAR 0 8
62271: PUSH
62272: LD_INT 1
62274: ARRAY
62275: PUSH
62276: LD_VAR 0 2
62280: PLUS
62281: PUSH
62282: LD_VAR 0 8
62286: PUSH
62287: LD_INT 2
62289: ARRAY
62290: PUSH
62291: LD_VAR 0 3
62295: PLUS
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: EMPTY
62302: LIST
62303: ADD
62304: ST_TO_ADDR
62305: GO 62254
62307: POP
62308: POP
// result = temp_list2 ;
62309: LD_ADDR_VAR 0 7
62313: PUSH
62314: LD_VAR 0 10
62318: ST_TO_ADDR
// end ;
62319: LD_VAR 0 7
62323: RET
// export function EnemyInRange ( unit , dist ) ; begin
62324: LD_INT 0
62326: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62327: LD_ADDR_VAR 0 3
62331: PUSH
62332: LD_VAR 0 1
62336: PPUSH
62337: CALL_OW 255
62341: PPUSH
62342: LD_VAR 0 1
62346: PPUSH
62347: CALL_OW 250
62351: PPUSH
62352: LD_VAR 0 1
62356: PPUSH
62357: CALL_OW 251
62361: PPUSH
62362: LD_VAR 0 2
62366: PPUSH
62367: CALL 35697 0 4
62371: PUSH
62372: LD_INT 4
62374: ARRAY
62375: ST_TO_ADDR
// end ;
62376: LD_VAR 0 3
62380: RET
// export function PlayerSeeMe ( unit ) ; begin
62381: LD_INT 0
62383: PPUSH
// result := See ( your_side , unit ) ;
62384: LD_ADDR_VAR 0 2
62388: PUSH
62389: LD_OWVAR 2
62393: PPUSH
62394: LD_VAR 0 1
62398: PPUSH
62399: CALL_OW 292
62403: ST_TO_ADDR
// end ;
62404: LD_VAR 0 2
62408: RET
// export function ReverseDir ( unit ) ; begin
62409: LD_INT 0
62411: PPUSH
// if not unit then
62412: LD_VAR 0 1
62416: NOT
62417: IFFALSE 62421
// exit ;
62419: GO 62444
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62421: LD_ADDR_VAR 0 2
62425: PUSH
62426: LD_VAR 0 1
62430: PPUSH
62431: CALL_OW 254
62435: PUSH
62436: LD_INT 3
62438: PLUS
62439: PUSH
62440: LD_INT 6
62442: MOD
62443: ST_TO_ADDR
// end ;
62444: LD_VAR 0 2
62448: RET
// export function ReverseArray ( array ) ; var i ; begin
62449: LD_INT 0
62451: PPUSH
62452: PPUSH
// if not array then
62453: LD_VAR 0 1
62457: NOT
62458: IFFALSE 62462
// exit ;
62460: GO 62517
// result := [ ] ;
62462: LD_ADDR_VAR 0 2
62466: PUSH
62467: EMPTY
62468: ST_TO_ADDR
// for i := array downto 1 do
62469: LD_ADDR_VAR 0 3
62473: PUSH
62474: DOUBLE
62475: LD_VAR 0 1
62479: INC
62480: ST_TO_ADDR
62481: LD_INT 1
62483: PUSH
62484: FOR_DOWNTO
62485: IFFALSE 62515
// result := Join ( result , array [ i ] ) ;
62487: LD_ADDR_VAR 0 2
62491: PUSH
62492: LD_VAR 0 2
62496: PPUSH
62497: LD_VAR 0 1
62501: PUSH
62502: LD_VAR 0 3
62506: ARRAY
62507: PPUSH
62508: CALL 67162 0 2
62512: ST_TO_ADDR
62513: GO 62484
62515: POP
62516: POP
// end ;
62517: LD_VAR 0 2
62521: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62522: LD_INT 0
62524: PPUSH
62525: PPUSH
62526: PPUSH
62527: PPUSH
62528: PPUSH
62529: PPUSH
// if not unit or not hexes then
62530: LD_VAR 0 1
62534: NOT
62535: PUSH
62536: LD_VAR 0 2
62540: NOT
62541: OR
62542: IFFALSE 62546
// exit ;
62544: GO 62669
// dist := 9999 ;
62546: LD_ADDR_VAR 0 5
62550: PUSH
62551: LD_INT 9999
62553: ST_TO_ADDR
// for i = 1 to hexes do
62554: LD_ADDR_VAR 0 4
62558: PUSH
62559: DOUBLE
62560: LD_INT 1
62562: DEC
62563: ST_TO_ADDR
62564: LD_VAR 0 2
62568: PUSH
62569: FOR_TO
62570: IFFALSE 62657
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62572: LD_ADDR_VAR 0 6
62576: PUSH
62577: LD_VAR 0 1
62581: PPUSH
62582: LD_VAR 0 2
62586: PUSH
62587: LD_VAR 0 4
62591: ARRAY
62592: PUSH
62593: LD_INT 1
62595: ARRAY
62596: PPUSH
62597: LD_VAR 0 2
62601: PUSH
62602: LD_VAR 0 4
62606: ARRAY
62607: PUSH
62608: LD_INT 2
62610: ARRAY
62611: PPUSH
62612: CALL_OW 297
62616: ST_TO_ADDR
// if tdist < dist then
62617: LD_VAR 0 6
62621: PUSH
62622: LD_VAR 0 5
62626: LESS
62627: IFFALSE 62655
// begin hex := hexes [ i ] ;
62629: LD_ADDR_VAR 0 8
62633: PUSH
62634: LD_VAR 0 2
62638: PUSH
62639: LD_VAR 0 4
62643: ARRAY
62644: ST_TO_ADDR
// dist := tdist ;
62645: LD_ADDR_VAR 0 5
62649: PUSH
62650: LD_VAR 0 6
62654: ST_TO_ADDR
// end ; end ;
62655: GO 62569
62657: POP
62658: POP
// result := hex ;
62659: LD_ADDR_VAR 0 3
62663: PUSH
62664: LD_VAR 0 8
62668: ST_TO_ADDR
// end ;
62669: LD_VAR 0 3
62673: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62674: LD_INT 0
62676: PPUSH
62677: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62678: LD_VAR 0 1
62682: NOT
62683: PUSH
62684: LD_VAR 0 1
62688: PUSH
62689: LD_INT 21
62691: PUSH
62692: LD_INT 2
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 23
62701: PUSH
62702: LD_INT 2
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PPUSH
62713: CALL_OW 69
62717: IN
62718: NOT
62719: OR
62720: IFFALSE 62724
// exit ;
62722: GO 62771
// for i = 1 to 3 do
62724: LD_ADDR_VAR 0 3
62728: PUSH
62729: DOUBLE
62730: LD_INT 1
62732: DEC
62733: ST_TO_ADDR
62734: LD_INT 3
62736: PUSH
62737: FOR_TO
62738: IFFALSE 62769
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62740: LD_VAR 0 1
62744: PPUSH
62745: CALL_OW 250
62749: PPUSH
62750: LD_VAR 0 1
62754: PPUSH
62755: CALL_OW 251
62759: PPUSH
62760: LD_INT 1
62762: PPUSH
62763: CALL_OW 453
62767: GO 62737
62769: POP
62770: POP
// end ;
62771: LD_VAR 0 2
62775: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62776: LD_INT 0
62778: PPUSH
62779: PPUSH
62780: PPUSH
62781: PPUSH
62782: PPUSH
62783: PPUSH
// if not unit or not enemy_unit then
62784: LD_VAR 0 1
62788: NOT
62789: PUSH
62790: LD_VAR 0 2
62794: NOT
62795: OR
62796: IFFALSE 62800
// exit ;
62798: GO 63267
// if GetLives ( i ) < 250 then
62800: LD_VAR 0 4
62804: PPUSH
62805: CALL_OW 256
62809: PUSH
62810: LD_INT 250
62812: LESS
62813: IFFALSE 62826
// begin ComAutodestruct ( i ) ;
62815: LD_VAR 0 4
62819: PPUSH
62820: CALL 62674 0 1
// exit ;
62824: GO 63267
// end ; x := GetX ( enemy_unit ) ;
62826: LD_ADDR_VAR 0 7
62830: PUSH
62831: LD_VAR 0 2
62835: PPUSH
62836: CALL_OW 250
62840: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62841: LD_ADDR_VAR 0 8
62845: PUSH
62846: LD_VAR 0 2
62850: PPUSH
62851: CALL_OW 251
62855: ST_TO_ADDR
// if not x or not y then
62856: LD_VAR 0 7
62860: NOT
62861: PUSH
62862: LD_VAR 0 8
62866: NOT
62867: OR
62868: IFFALSE 62872
// exit ;
62870: GO 63267
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62872: LD_ADDR_VAR 0 6
62876: PUSH
62877: LD_VAR 0 7
62881: PPUSH
62882: LD_INT 0
62884: PPUSH
62885: LD_INT 4
62887: PPUSH
62888: CALL_OW 272
62892: PUSH
62893: LD_VAR 0 8
62897: PPUSH
62898: LD_INT 0
62900: PPUSH
62901: LD_INT 4
62903: PPUSH
62904: CALL_OW 273
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_VAR 0 7
62917: PPUSH
62918: LD_INT 1
62920: PPUSH
62921: LD_INT 4
62923: PPUSH
62924: CALL_OW 272
62928: PUSH
62929: LD_VAR 0 8
62933: PPUSH
62934: LD_INT 1
62936: PPUSH
62937: LD_INT 4
62939: PPUSH
62940: CALL_OW 273
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_VAR 0 7
62953: PPUSH
62954: LD_INT 2
62956: PPUSH
62957: LD_INT 4
62959: PPUSH
62960: CALL_OW 272
62964: PUSH
62965: LD_VAR 0 8
62969: PPUSH
62970: LD_INT 2
62972: PPUSH
62973: LD_INT 4
62975: PPUSH
62976: CALL_OW 273
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_VAR 0 7
62989: PPUSH
62990: LD_INT 3
62992: PPUSH
62993: LD_INT 4
62995: PPUSH
62996: CALL_OW 272
63000: PUSH
63001: LD_VAR 0 8
63005: PPUSH
63006: LD_INT 3
63008: PPUSH
63009: LD_INT 4
63011: PPUSH
63012: CALL_OW 273
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_VAR 0 7
63025: PPUSH
63026: LD_INT 4
63028: PPUSH
63029: LD_INT 4
63031: PPUSH
63032: CALL_OW 272
63036: PUSH
63037: LD_VAR 0 8
63041: PPUSH
63042: LD_INT 4
63044: PPUSH
63045: LD_INT 4
63047: PPUSH
63048: CALL_OW 273
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_VAR 0 7
63061: PPUSH
63062: LD_INT 5
63064: PPUSH
63065: LD_INT 4
63067: PPUSH
63068: CALL_OW 272
63072: PUSH
63073: LD_VAR 0 8
63077: PPUSH
63078: LD_INT 5
63080: PPUSH
63081: LD_INT 4
63083: PPUSH
63084: CALL_OW 273
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: ST_TO_ADDR
// for i = tmp downto 1 do
63101: LD_ADDR_VAR 0 4
63105: PUSH
63106: DOUBLE
63107: LD_VAR 0 6
63111: INC
63112: ST_TO_ADDR
63113: LD_INT 1
63115: PUSH
63116: FOR_DOWNTO
63117: IFFALSE 63218
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63119: LD_VAR 0 6
63123: PUSH
63124: LD_VAR 0 4
63128: ARRAY
63129: PUSH
63130: LD_INT 1
63132: ARRAY
63133: PPUSH
63134: LD_VAR 0 6
63138: PUSH
63139: LD_VAR 0 4
63143: ARRAY
63144: PUSH
63145: LD_INT 2
63147: ARRAY
63148: PPUSH
63149: CALL_OW 488
63153: NOT
63154: PUSH
63155: LD_VAR 0 6
63159: PUSH
63160: LD_VAR 0 4
63164: ARRAY
63165: PUSH
63166: LD_INT 1
63168: ARRAY
63169: PPUSH
63170: LD_VAR 0 6
63174: PUSH
63175: LD_VAR 0 4
63179: ARRAY
63180: PUSH
63181: LD_INT 2
63183: ARRAY
63184: PPUSH
63185: CALL_OW 428
63189: PUSH
63190: LD_INT 0
63192: NONEQUAL
63193: OR
63194: IFFALSE 63216
// tmp := Delete ( tmp , i ) ;
63196: LD_ADDR_VAR 0 6
63200: PUSH
63201: LD_VAR 0 6
63205: PPUSH
63206: LD_VAR 0 4
63210: PPUSH
63211: CALL_OW 3
63215: ST_TO_ADDR
63216: GO 63116
63218: POP
63219: POP
// j := GetClosestHex ( unit , tmp ) ;
63220: LD_ADDR_VAR 0 5
63224: PUSH
63225: LD_VAR 0 1
63229: PPUSH
63230: LD_VAR 0 6
63234: PPUSH
63235: CALL 62522 0 2
63239: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63240: LD_VAR 0 1
63244: PPUSH
63245: LD_VAR 0 5
63249: PUSH
63250: LD_INT 1
63252: ARRAY
63253: PPUSH
63254: LD_VAR 0 5
63258: PUSH
63259: LD_INT 2
63261: ARRAY
63262: PPUSH
63263: CALL_OW 111
// end ;
63267: LD_VAR 0 3
63271: RET
// export function PrepareApemanSoldier ( ) ; begin
63272: LD_INT 0
63274: PPUSH
// uc_nation := 0 ;
63275: LD_ADDR_OWVAR 21
63279: PUSH
63280: LD_INT 0
63282: ST_TO_ADDR
// hc_sex := sex_male ;
63283: LD_ADDR_OWVAR 27
63287: PUSH
63288: LD_INT 1
63290: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63291: LD_ADDR_OWVAR 28
63295: PUSH
63296: LD_INT 15
63298: ST_TO_ADDR
// hc_gallery :=  ;
63299: LD_ADDR_OWVAR 33
63303: PUSH
63304: LD_STRING 
63306: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63307: LD_ADDR_OWVAR 31
63311: PUSH
63312: LD_INT 0
63314: PPUSH
63315: LD_INT 3
63317: PPUSH
63318: CALL_OW 12
63322: PUSH
63323: LD_INT 0
63325: PPUSH
63326: LD_INT 3
63328: PPUSH
63329: CALL_OW 12
63333: PUSH
63334: LD_INT 0
63336: PUSH
63337: LD_INT 0
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: ST_TO_ADDR
// end ;
63346: LD_VAR 0 1
63350: RET
// export function PrepareApemanEngineer ( ) ; begin
63351: LD_INT 0
63353: PPUSH
// uc_nation := 0 ;
63354: LD_ADDR_OWVAR 21
63358: PUSH
63359: LD_INT 0
63361: ST_TO_ADDR
// hc_sex := sex_male ;
63362: LD_ADDR_OWVAR 27
63366: PUSH
63367: LD_INT 1
63369: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63370: LD_ADDR_OWVAR 28
63374: PUSH
63375: LD_INT 16
63377: ST_TO_ADDR
// hc_gallery :=  ;
63378: LD_ADDR_OWVAR 33
63382: PUSH
63383: LD_STRING 
63385: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63386: LD_ADDR_OWVAR 31
63390: PUSH
63391: LD_INT 0
63393: PPUSH
63394: LD_INT 3
63396: PPUSH
63397: CALL_OW 12
63401: PUSH
63402: LD_INT 0
63404: PPUSH
63405: LD_INT 3
63407: PPUSH
63408: CALL_OW 12
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: LD_INT 0
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: ST_TO_ADDR
// end ;
63425: LD_VAR 0 1
63429: RET
// export function PrepareApeman ( agressivity ) ; begin
63430: LD_INT 0
63432: PPUSH
// uc_side := 0 ;
63433: LD_ADDR_OWVAR 20
63437: PUSH
63438: LD_INT 0
63440: ST_TO_ADDR
// uc_nation := 0 ;
63441: LD_ADDR_OWVAR 21
63445: PUSH
63446: LD_INT 0
63448: ST_TO_ADDR
// hc_sex := sex_male ;
63449: LD_ADDR_OWVAR 27
63453: PUSH
63454: LD_INT 1
63456: ST_TO_ADDR
// hc_class := class_apeman ;
63457: LD_ADDR_OWVAR 28
63461: PUSH
63462: LD_INT 12
63464: ST_TO_ADDR
// hc_gallery :=  ;
63465: LD_ADDR_OWVAR 33
63469: PUSH
63470: LD_STRING 
63472: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63473: LD_ADDR_OWVAR 35
63477: PUSH
63478: LD_VAR 0 1
63482: NEG
63483: PPUSH
63484: LD_VAR 0 1
63488: PPUSH
63489: CALL_OW 12
63493: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63494: LD_ADDR_OWVAR 31
63498: PUSH
63499: LD_INT 0
63501: PPUSH
63502: LD_INT 3
63504: PPUSH
63505: CALL_OW 12
63509: PUSH
63510: LD_INT 0
63512: PPUSH
63513: LD_INT 3
63515: PPUSH
63516: CALL_OW 12
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: LD_INT 0
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: ST_TO_ADDR
// end ;
63533: LD_VAR 0 2
63537: RET
// export function PrepareTiger ( agressivity ) ; begin
63538: LD_INT 0
63540: PPUSH
// uc_side := 0 ;
63541: LD_ADDR_OWVAR 20
63545: PUSH
63546: LD_INT 0
63548: ST_TO_ADDR
// uc_nation := 0 ;
63549: LD_ADDR_OWVAR 21
63553: PUSH
63554: LD_INT 0
63556: ST_TO_ADDR
// hc_class := class_tiger ;
63557: LD_ADDR_OWVAR 28
63561: PUSH
63562: LD_INT 14
63564: ST_TO_ADDR
// hc_gallery :=  ;
63565: LD_ADDR_OWVAR 33
63569: PUSH
63570: LD_STRING 
63572: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63573: LD_ADDR_OWVAR 35
63577: PUSH
63578: LD_VAR 0 1
63582: NEG
63583: PPUSH
63584: LD_VAR 0 1
63588: PPUSH
63589: CALL_OW 12
63593: ST_TO_ADDR
// end ;
63594: LD_VAR 0 2
63598: RET
// export function PrepareEnchidna ( ) ; begin
63599: LD_INT 0
63601: PPUSH
// uc_side := 0 ;
63602: LD_ADDR_OWVAR 20
63606: PUSH
63607: LD_INT 0
63609: ST_TO_ADDR
// uc_nation := 0 ;
63610: LD_ADDR_OWVAR 21
63614: PUSH
63615: LD_INT 0
63617: ST_TO_ADDR
// hc_class := class_baggie ;
63618: LD_ADDR_OWVAR 28
63622: PUSH
63623: LD_INT 13
63625: ST_TO_ADDR
// hc_gallery :=  ;
63626: LD_ADDR_OWVAR 33
63630: PUSH
63631: LD_STRING 
63633: ST_TO_ADDR
// end ;
63634: LD_VAR 0 1
63638: RET
// export function PrepareFrog ( ) ; begin
63639: LD_INT 0
63641: PPUSH
// uc_side := 0 ;
63642: LD_ADDR_OWVAR 20
63646: PUSH
63647: LD_INT 0
63649: ST_TO_ADDR
// uc_nation := 0 ;
63650: LD_ADDR_OWVAR 21
63654: PUSH
63655: LD_INT 0
63657: ST_TO_ADDR
// hc_class := class_frog ;
63658: LD_ADDR_OWVAR 28
63662: PUSH
63663: LD_INT 19
63665: ST_TO_ADDR
// hc_gallery :=  ;
63666: LD_ADDR_OWVAR 33
63670: PUSH
63671: LD_STRING 
63673: ST_TO_ADDR
// end ;
63674: LD_VAR 0 1
63678: RET
// export function PrepareFish ( ) ; begin
63679: LD_INT 0
63681: PPUSH
// uc_side := 0 ;
63682: LD_ADDR_OWVAR 20
63686: PUSH
63687: LD_INT 0
63689: ST_TO_ADDR
// uc_nation := 0 ;
63690: LD_ADDR_OWVAR 21
63694: PUSH
63695: LD_INT 0
63697: ST_TO_ADDR
// hc_class := class_fish ;
63698: LD_ADDR_OWVAR 28
63702: PUSH
63703: LD_INT 20
63705: ST_TO_ADDR
// hc_gallery :=  ;
63706: LD_ADDR_OWVAR 33
63710: PUSH
63711: LD_STRING 
63713: ST_TO_ADDR
// end ;
63714: LD_VAR 0 1
63718: RET
// export function PrepareBird ( ) ; begin
63719: LD_INT 0
63721: PPUSH
// uc_side := 0 ;
63722: LD_ADDR_OWVAR 20
63726: PUSH
63727: LD_INT 0
63729: ST_TO_ADDR
// uc_nation := 0 ;
63730: LD_ADDR_OWVAR 21
63734: PUSH
63735: LD_INT 0
63737: ST_TO_ADDR
// hc_class := class_phororhacos ;
63738: LD_ADDR_OWVAR 28
63742: PUSH
63743: LD_INT 18
63745: ST_TO_ADDR
// hc_gallery :=  ;
63746: LD_ADDR_OWVAR 33
63750: PUSH
63751: LD_STRING 
63753: ST_TO_ADDR
// end ;
63754: LD_VAR 0 1
63758: RET
// export function PrepareHorse ( ) ; begin
63759: LD_INT 0
63761: PPUSH
// uc_side := 0 ;
63762: LD_ADDR_OWVAR 20
63766: PUSH
63767: LD_INT 0
63769: ST_TO_ADDR
// uc_nation := 0 ;
63770: LD_ADDR_OWVAR 21
63774: PUSH
63775: LD_INT 0
63777: ST_TO_ADDR
// hc_class := class_horse ;
63778: LD_ADDR_OWVAR 28
63782: PUSH
63783: LD_INT 21
63785: ST_TO_ADDR
// hc_gallery :=  ;
63786: LD_ADDR_OWVAR 33
63790: PUSH
63791: LD_STRING 
63793: ST_TO_ADDR
// end ;
63794: LD_VAR 0 1
63798: RET
// export function PrepareMastodont ( ) ; begin
63799: LD_INT 0
63801: PPUSH
// uc_side := 0 ;
63802: LD_ADDR_OWVAR 20
63806: PUSH
63807: LD_INT 0
63809: ST_TO_ADDR
// uc_nation := 0 ;
63810: LD_ADDR_OWVAR 21
63814: PUSH
63815: LD_INT 0
63817: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63818: LD_ADDR_OWVAR 37
63822: PUSH
63823: LD_INT 31
63825: ST_TO_ADDR
// vc_control := control_rider ;
63826: LD_ADDR_OWVAR 38
63830: PUSH
63831: LD_INT 4
63833: ST_TO_ADDR
// end ;
63834: LD_VAR 0 1
63838: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63839: LD_INT 0
63841: PPUSH
63842: PPUSH
63843: PPUSH
// uc_side = 0 ;
63844: LD_ADDR_OWVAR 20
63848: PUSH
63849: LD_INT 0
63851: ST_TO_ADDR
// uc_nation = 0 ;
63852: LD_ADDR_OWVAR 21
63856: PUSH
63857: LD_INT 0
63859: ST_TO_ADDR
// InitHc_All ( ) ;
63860: CALL_OW 584
// InitVc ;
63864: CALL_OW 20
// if mastodonts then
63868: LD_VAR 0 6
63872: IFFALSE 63939
// for i = 1 to mastodonts do
63874: LD_ADDR_VAR 0 11
63878: PUSH
63879: DOUBLE
63880: LD_INT 1
63882: DEC
63883: ST_TO_ADDR
63884: LD_VAR 0 6
63888: PUSH
63889: FOR_TO
63890: IFFALSE 63937
// begin vc_chassis := 31 ;
63892: LD_ADDR_OWVAR 37
63896: PUSH
63897: LD_INT 31
63899: ST_TO_ADDR
// vc_control := control_rider ;
63900: LD_ADDR_OWVAR 38
63904: PUSH
63905: LD_INT 4
63907: ST_TO_ADDR
// animal := CreateVehicle ;
63908: LD_ADDR_VAR 0 12
63912: PUSH
63913: CALL_OW 45
63917: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63918: LD_VAR 0 12
63922: PPUSH
63923: LD_VAR 0 8
63927: PPUSH
63928: LD_INT 0
63930: PPUSH
63931: CALL 66067 0 3
// end ;
63935: GO 63889
63937: POP
63938: POP
// if horses then
63939: LD_VAR 0 5
63943: IFFALSE 64010
// for i = 1 to horses do
63945: LD_ADDR_VAR 0 11
63949: PUSH
63950: DOUBLE
63951: LD_INT 1
63953: DEC
63954: ST_TO_ADDR
63955: LD_VAR 0 5
63959: PUSH
63960: FOR_TO
63961: IFFALSE 64008
// begin hc_class := 21 ;
63963: LD_ADDR_OWVAR 28
63967: PUSH
63968: LD_INT 21
63970: ST_TO_ADDR
// hc_gallery :=  ;
63971: LD_ADDR_OWVAR 33
63975: PUSH
63976: LD_STRING 
63978: ST_TO_ADDR
// animal := CreateHuman ;
63979: LD_ADDR_VAR 0 12
63983: PUSH
63984: CALL_OW 44
63988: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63989: LD_VAR 0 12
63993: PPUSH
63994: LD_VAR 0 8
63998: PPUSH
63999: LD_INT 0
64001: PPUSH
64002: CALL 66067 0 3
// end ;
64006: GO 63960
64008: POP
64009: POP
// if birds then
64010: LD_VAR 0 1
64014: IFFALSE 64081
// for i = 1 to birds do
64016: LD_ADDR_VAR 0 11
64020: PUSH
64021: DOUBLE
64022: LD_INT 1
64024: DEC
64025: ST_TO_ADDR
64026: LD_VAR 0 1
64030: PUSH
64031: FOR_TO
64032: IFFALSE 64079
// begin hc_class := 18 ;
64034: LD_ADDR_OWVAR 28
64038: PUSH
64039: LD_INT 18
64041: ST_TO_ADDR
// hc_gallery =  ;
64042: LD_ADDR_OWVAR 33
64046: PUSH
64047: LD_STRING 
64049: ST_TO_ADDR
// animal := CreateHuman ;
64050: LD_ADDR_VAR 0 12
64054: PUSH
64055: CALL_OW 44
64059: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64060: LD_VAR 0 12
64064: PPUSH
64065: LD_VAR 0 8
64069: PPUSH
64070: LD_INT 0
64072: PPUSH
64073: CALL 66067 0 3
// end ;
64077: GO 64031
64079: POP
64080: POP
// if tigers then
64081: LD_VAR 0 2
64085: IFFALSE 64169
// for i = 1 to tigers do
64087: LD_ADDR_VAR 0 11
64091: PUSH
64092: DOUBLE
64093: LD_INT 1
64095: DEC
64096: ST_TO_ADDR
64097: LD_VAR 0 2
64101: PUSH
64102: FOR_TO
64103: IFFALSE 64167
// begin hc_class = class_tiger ;
64105: LD_ADDR_OWVAR 28
64109: PUSH
64110: LD_INT 14
64112: ST_TO_ADDR
// hc_gallery =  ;
64113: LD_ADDR_OWVAR 33
64117: PUSH
64118: LD_STRING 
64120: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64121: LD_ADDR_OWVAR 35
64125: PUSH
64126: LD_INT 7
64128: NEG
64129: PPUSH
64130: LD_INT 7
64132: PPUSH
64133: CALL_OW 12
64137: ST_TO_ADDR
// animal := CreateHuman ;
64138: LD_ADDR_VAR 0 12
64142: PUSH
64143: CALL_OW 44
64147: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64148: LD_VAR 0 12
64152: PPUSH
64153: LD_VAR 0 8
64157: PPUSH
64158: LD_INT 0
64160: PPUSH
64161: CALL 66067 0 3
// end ;
64165: GO 64102
64167: POP
64168: POP
// if apemans then
64169: LD_VAR 0 3
64173: IFFALSE 64296
// for i = 1 to apemans do
64175: LD_ADDR_VAR 0 11
64179: PUSH
64180: DOUBLE
64181: LD_INT 1
64183: DEC
64184: ST_TO_ADDR
64185: LD_VAR 0 3
64189: PUSH
64190: FOR_TO
64191: IFFALSE 64294
// begin hc_class = class_apeman ;
64193: LD_ADDR_OWVAR 28
64197: PUSH
64198: LD_INT 12
64200: ST_TO_ADDR
// hc_gallery =  ;
64201: LD_ADDR_OWVAR 33
64205: PUSH
64206: LD_STRING 
64208: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64209: LD_ADDR_OWVAR 35
64213: PUSH
64214: LD_INT 2
64216: NEG
64217: PPUSH
64218: LD_INT 2
64220: PPUSH
64221: CALL_OW 12
64225: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64226: LD_ADDR_OWVAR 31
64230: PUSH
64231: LD_INT 1
64233: PPUSH
64234: LD_INT 3
64236: PPUSH
64237: CALL_OW 12
64241: PUSH
64242: LD_INT 1
64244: PPUSH
64245: LD_INT 3
64247: PPUSH
64248: CALL_OW 12
64252: PUSH
64253: LD_INT 0
64255: PUSH
64256: LD_INT 0
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: ST_TO_ADDR
// animal := CreateHuman ;
64265: LD_ADDR_VAR 0 12
64269: PUSH
64270: CALL_OW 44
64274: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64275: LD_VAR 0 12
64279: PPUSH
64280: LD_VAR 0 8
64284: PPUSH
64285: LD_INT 0
64287: PPUSH
64288: CALL 66067 0 3
// end ;
64292: GO 64190
64294: POP
64295: POP
// if enchidnas then
64296: LD_VAR 0 4
64300: IFFALSE 64367
// for i = 1 to enchidnas do
64302: LD_ADDR_VAR 0 11
64306: PUSH
64307: DOUBLE
64308: LD_INT 1
64310: DEC
64311: ST_TO_ADDR
64312: LD_VAR 0 4
64316: PUSH
64317: FOR_TO
64318: IFFALSE 64365
// begin hc_class = 13 ;
64320: LD_ADDR_OWVAR 28
64324: PUSH
64325: LD_INT 13
64327: ST_TO_ADDR
// hc_gallery =  ;
64328: LD_ADDR_OWVAR 33
64332: PUSH
64333: LD_STRING 
64335: ST_TO_ADDR
// animal := CreateHuman ;
64336: LD_ADDR_VAR 0 12
64340: PUSH
64341: CALL_OW 44
64345: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64346: LD_VAR 0 12
64350: PPUSH
64351: LD_VAR 0 8
64355: PPUSH
64356: LD_INT 0
64358: PPUSH
64359: CALL 66067 0 3
// end ;
64363: GO 64317
64365: POP
64366: POP
// if fishes then
64367: LD_VAR 0 7
64371: IFFALSE 64438
// for i = 1 to fishes do
64373: LD_ADDR_VAR 0 11
64377: PUSH
64378: DOUBLE
64379: LD_INT 1
64381: DEC
64382: ST_TO_ADDR
64383: LD_VAR 0 7
64387: PUSH
64388: FOR_TO
64389: IFFALSE 64436
// begin hc_class = 20 ;
64391: LD_ADDR_OWVAR 28
64395: PUSH
64396: LD_INT 20
64398: ST_TO_ADDR
// hc_gallery =  ;
64399: LD_ADDR_OWVAR 33
64403: PUSH
64404: LD_STRING 
64406: ST_TO_ADDR
// animal := CreateHuman ;
64407: LD_ADDR_VAR 0 12
64411: PUSH
64412: CALL_OW 44
64416: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64417: LD_VAR 0 12
64421: PPUSH
64422: LD_VAR 0 9
64426: PPUSH
64427: LD_INT 0
64429: PPUSH
64430: CALL 66067 0 3
// end ;
64434: GO 64388
64436: POP
64437: POP
// end ;
64438: LD_VAR 0 10
64442: RET
// export function WantHeal ( sci , unit ) ; begin
64443: LD_INT 0
64445: PPUSH
// if GetTaskList ( sci ) > 0 then
64446: LD_VAR 0 1
64450: PPUSH
64451: CALL_OW 437
64455: PUSH
64456: LD_INT 0
64458: GREATER
64459: IFFALSE 64529
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64461: LD_VAR 0 1
64465: PPUSH
64466: CALL_OW 437
64470: PUSH
64471: LD_INT 1
64473: ARRAY
64474: PUSH
64475: LD_INT 1
64477: ARRAY
64478: PUSH
64479: LD_STRING l
64481: EQUAL
64482: PUSH
64483: LD_VAR 0 1
64487: PPUSH
64488: CALL_OW 437
64492: PUSH
64493: LD_INT 1
64495: ARRAY
64496: PUSH
64497: LD_INT 4
64499: ARRAY
64500: PUSH
64501: LD_VAR 0 2
64505: EQUAL
64506: AND
64507: IFFALSE 64519
// result := true else
64509: LD_ADDR_VAR 0 3
64513: PUSH
64514: LD_INT 1
64516: ST_TO_ADDR
64517: GO 64527
// result := false ;
64519: LD_ADDR_VAR 0 3
64523: PUSH
64524: LD_INT 0
64526: ST_TO_ADDR
// end else
64527: GO 64537
// result := false ;
64529: LD_ADDR_VAR 0 3
64533: PUSH
64534: LD_INT 0
64536: ST_TO_ADDR
// end ;
64537: LD_VAR 0 3
64541: RET
// export function HealTarget ( sci ) ; begin
64542: LD_INT 0
64544: PPUSH
// if not sci then
64545: LD_VAR 0 1
64549: NOT
64550: IFFALSE 64554
// exit ;
64552: GO 64619
// result := 0 ;
64554: LD_ADDR_VAR 0 2
64558: PUSH
64559: LD_INT 0
64561: ST_TO_ADDR
// if GetTaskList ( sci ) then
64562: LD_VAR 0 1
64566: PPUSH
64567: CALL_OW 437
64571: IFFALSE 64619
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64573: LD_VAR 0 1
64577: PPUSH
64578: CALL_OW 437
64582: PUSH
64583: LD_INT 1
64585: ARRAY
64586: PUSH
64587: LD_INT 1
64589: ARRAY
64590: PUSH
64591: LD_STRING l
64593: EQUAL
64594: IFFALSE 64619
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64596: LD_ADDR_VAR 0 2
64600: PUSH
64601: LD_VAR 0 1
64605: PPUSH
64606: CALL_OW 437
64610: PUSH
64611: LD_INT 1
64613: ARRAY
64614: PUSH
64615: LD_INT 4
64617: ARRAY
64618: ST_TO_ADDR
// end ;
64619: LD_VAR 0 2
64623: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64624: LD_INT 0
64626: PPUSH
64627: PPUSH
64628: PPUSH
64629: PPUSH
// if not base_units then
64630: LD_VAR 0 1
64634: NOT
64635: IFFALSE 64639
// exit ;
64637: GO 64726
// result := false ;
64639: LD_ADDR_VAR 0 2
64643: PUSH
64644: LD_INT 0
64646: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64647: LD_ADDR_VAR 0 5
64651: PUSH
64652: LD_VAR 0 1
64656: PPUSH
64657: LD_INT 21
64659: PUSH
64660: LD_INT 3
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PPUSH
64667: CALL_OW 72
64671: ST_TO_ADDR
// if not tmp then
64672: LD_VAR 0 5
64676: NOT
64677: IFFALSE 64681
// exit ;
64679: GO 64726
// for i in tmp do
64681: LD_ADDR_VAR 0 3
64685: PUSH
64686: LD_VAR 0 5
64690: PUSH
64691: FOR_IN
64692: IFFALSE 64724
// begin result := EnemyInRange ( i , 22 ) ;
64694: LD_ADDR_VAR 0 2
64698: PUSH
64699: LD_VAR 0 3
64703: PPUSH
64704: LD_INT 22
64706: PPUSH
64707: CALL 62324 0 2
64711: ST_TO_ADDR
// if result then
64712: LD_VAR 0 2
64716: IFFALSE 64722
// exit ;
64718: POP
64719: POP
64720: GO 64726
// end ;
64722: GO 64691
64724: POP
64725: POP
// end ;
64726: LD_VAR 0 2
64730: RET
// export function FilterByTag ( units , tag ) ; begin
64731: LD_INT 0
64733: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64734: LD_ADDR_VAR 0 3
64738: PUSH
64739: LD_VAR 0 1
64743: PPUSH
64744: LD_INT 120
64746: PUSH
64747: LD_VAR 0 2
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PPUSH
64756: CALL_OW 72
64760: ST_TO_ADDR
// end ;
64761: LD_VAR 0 3
64765: RET
// export function IsDriver ( un ) ; begin
64766: LD_INT 0
64768: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64769: LD_ADDR_VAR 0 2
64773: PUSH
64774: LD_VAR 0 1
64778: PUSH
64779: LD_INT 55
64781: PUSH
64782: EMPTY
64783: LIST
64784: PPUSH
64785: CALL_OW 69
64789: IN
64790: ST_TO_ADDR
// end ;
64791: LD_VAR 0 2
64795: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64796: LD_INT 0
64798: PPUSH
64799: PPUSH
// list := [ ] ;
64800: LD_ADDR_VAR 0 5
64804: PUSH
64805: EMPTY
64806: ST_TO_ADDR
// case d of 0 :
64807: LD_VAR 0 3
64811: PUSH
64812: LD_INT 0
64814: DOUBLE
64815: EQUAL
64816: IFTRUE 64820
64818: GO 64953
64820: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64821: LD_ADDR_VAR 0 5
64825: PUSH
64826: LD_VAR 0 1
64830: PUSH
64831: LD_INT 4
64833: MINUS
64834: PUSH
64835: LD_VAR 0 2
64839: PUSH
64840: LD_INT 4
64842: MINUS
64843: PUSH
64844: LD_INT 2
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: LIST
64851: PUSH
64852: LD_VAR 0 1
64856: PUSH
64857: LD_INT 3
64859: MINUS
64860: PUSH
64861: LD_VAR 0 2
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: LIST
64873: PUSH
64874: LD_VAR 0 1
64878: PUSH
64879: LD_INT 4
64881: PLUS
64882: PUSH
64883: LD_VAR 0 2
64887: PUSH
64888: LD_INT 4
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: LIST
64895: PUSH
64896: LD_VAR 0 1
64900: PUSH
64901: LD_INT 3
64903: PLUS
64904: PUSH
64905: LD_VAR 0 2
64909: PUSH
64910: LD_INT 3
64912: PLUS
64913: PUSH
64914: LD_INT 5
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: LIST
64921: PUSH
64922: LD_VAR 0 1
64926: PUSH
64927: LD_VAR 0 2
64931: PUSH
64932: LD_INT 4
64934: PLUS
64935: PUSH
64936: LD_INT 0
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: LIST
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: ST_TO_ADDR
// end ; 1 :
64951: GO 65651
64953: LD_INT 1
64955: DOUBLE
64956: EQUAL
64957: IFTRUE 64961
64959: GO 65094
64961: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64962: LD_ADDR_VAR 0 5
64966: PUSH
64967: LD_VAR 0 1
64971: PUSH
64972: LD_VAR 0 2
64976: PUSH
64977: LD_INT 4
64979: MINUS
64980: PUSH
64981: LD_INT 3
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: LIST
64988: PUSH
64989: LD_VAR 0 1
64993: PUSH
64994: LD_INT 3
64996: MINUS
64997: PUSH
64998: LD_VAR 0 2
65002: PUSH
65003: LD_INT 3
65005: MINUS
65006: PUSH
65007: LD_INT 2
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: LIST
65014: PUSH
65015: LD_VAR 0 1
65019: PUSH
65020: LD_INT 4
65022: MINUS
65023: PUSH
65024: LD_VAR 0 2
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: LIST
65036: PUSH
65037: LD_VAR 0 1
65041: PUSH
65042: LD_VAR 0 2
65046: PUSH
65047: LD_INT 3
65049: PLUS
65050: PUSH
65051: LD_INT 0
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: LIST
65058: PUSH
65059: LD_VAR 0 1
65063: PUSH
65064: LD_INT 4
65066: PLUS
65067: PUSH
65068: LD_VAR 0 2
65072: PUSH
65073: LD_INT 4
65075: PLUS
65076: PUSH
65077: LD_INT 5
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: LIST
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: ST_TO_ADDR
// end ; 2 :
65092: GO 65651
65094: LD_INT 2
65096: DOUBLE
65097: EQUAL
65098: IFTRUE 65102
65100: GO 65231
65102: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65103: LD_ADDR_VAR 0 5
65107: PUSH
65108: LD_VAR 0 1
65112: PUSH
65113: LD_VAR 0 2
65117: PUSH
65118: LD_INT 3
65120: MINUS
65121: PUSH
65122: LD_INT 3
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: LIST
65129: PUSH
65130: LD_VAR 0 1
65134: PUSH
65135: LD_INT 4
65137: PLUS
65138: PUSH
65139: LD_VAR 0 2
65143: PUSH
65144: LD_INT 4
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: LIST
65151: PUSH
65152: LD_VAR 0 1
65156: PUSH
65157: LD_VAR 0 2
65161: PUSH
65162: LD_INT 4
65164: PLUS
65165: PUSH
65166: LD_INT 0
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: LIST
65173: PUSH
65174: LD_VAR 0 1
65178: PUSH
65179: LD_INT 3
65181: MINUS
65182: PUSH
65183: LD_VAR 0 2
65187: PUSH
65188: LD_INT 1
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: LIST
65195: PUSH
65196: LD_VAR 0 1
65200: PUSH
65201: LD_INT 4
65203: MINUS
65204: PUSH
65205: LD_VAR 0 2
65209: PUSH
65210: LD_INT 4
65212: MINUS
65213: PUSH
65214: LD_INT 2
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: LIST
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: ST_TO_ADDR
// end ; 3 :
65229: GO 65651
65231: LD_INT 3
65233: DOUBLE
65234: EQUAL
65235: IFTRUE 65239
65237: GO 65372
65239: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65240: LD_ADDR_VAR 0 5
65244: PUSH
65245: LD_VAR 0 1
65249: PUSH
65250: LD_INT 3
65252: PLUS
65253: PUSH
65254: LD_VAR 0 2
65258: PUSH
65259: LD_INT 4
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: LIST
65266: PUSH
65267: LD_VAR 0 1
65271: PUSH
65272: LD_INT 4
65274: PLUS
65275: PUSH
65276: LD_VAR 0 2
65280: PUSH
65281: LD_INT 4
65283: PLUS
65284: PUSH
65285: LD_INT 5
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: LIST
65292: PUSH
65293: LD_VAR 0 1
65297: PUSH
65298: LD_INT 4
65300: MINUS
65301: PUSH
65302: LD_VAR 0 2
65306: PUSH
65307: LD_INT 1
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: LIST
65314: PUSH
65315: LD_VAR 0 1
65319: PUSH
65320: LD_VAR 0 2
65324: PUSH
65325: LD_INT 4
65327: MINUS
65328: PUSH
65329: LD_INT 3
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: LIST
65336: PUSH
65337: LD_VAR 0 1
65341: PUSH
65342: LD_INT 3
65344: MINUS
65345: PUSH
65346: LD_VAR 0 2
65350: PUSH
65351: LD_INT 3
65353: MINUS
65354: PUSH
65355: LD_INT 2
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: LIST
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: ST_TO_ADDR
// end ; 4 :
65370: GO 65651
65372: LD_INT 4
65374: DOUBLE
65375: EQUAL
65376: IFTRUE 65380
65378: GO 65513
65380: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65381: LD_ADDR_VAR 0 5
65385: PUSH
65386: LD_VAR 0 1
65390: PUSH
65391: LD_VAR 0 2
65395: PUSH
65396: LD_INT 4
65398: PLUS
65399: PUSH
65400: LD_INT 0
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: LIST
65407: PUSH
65408: LD_VAR 0 1
65412: PUSH
65413: LD_INT 3
65415: PLUS
65416: PUSH
65417: LD_VAR 0 2
65421: PUSH
65422: LD_INT 3
65424: PLUS
65425: PUSH
65426: LD_INT 5
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: LIST
65433: PUSH
65434: LD_VAR 0 1
65438: PUSH
65439: LD_INT 4
65441: PLUS
65442: PUSH
65443: LD_VAR 0 2
65447: PUSH
65448: LD_INT 4
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: LIST
65455: PUSH
65456: LD_VAR 0 1
65460: PUSH
65461: LD_VAR 0 2
65465: PUSH
65466: LD_INT 3
65468: MINUS
65469: PUSH
65470: LD_INT 3
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: LIST
65477: PUSH
65478: LD_VAR 0 1
65482: PUSH
65483: LD_INT 4
65485: MINUS
65486: PUSH
65487: LD_VAR 0 2
65491: PUSH
65492: LD_INT 4
65494: MINUS
65495: PUSH
65496: LD_INT 2
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: LIST
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: ST_TO_ADDR
// end ; 5 :
65511: GO 65651
65513: LD_INT 5
65515: DOUBLE
65516: EQUAL
65517: IFTRUE 65521
65519: GO 65650
65521: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65522: LD_ADDR_VAR 0 5
65526: PUSH
65527: LD_VAR 0 1
65531: PUSH
65532: LD_INT 4
65534: MINUS
65535: PUSH
65536: LD_VAR 0 2
65540: PUSH
65541: LD_INT 1
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: LIST
65548: PUSH
65549: LD_VAR 0 1
65553: PUSH
65554: LD_VAR 0 2
65558: PUSH
65559: LD_INT 4
65561: MINUS
65562: PUSH
65563: LD_INT 3
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: LIST
65570: PUSH
65571: LD_VAR 0 1
65575: PUSH
65576: LD_INT 4
65578: PLUS
65579: PUSH
65580: LD_VAR 0 2
65584: PUSH
65585: LD_INT 4
65587: PLUS
65588: PUSH
65589: LD_INT 5
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: LIST
65596: PUSH
65597: LD_VAR 0 1
65601: PUSH
65602: LD_INT 3
65604: PLUS
65605: PUSH
65606: LD_VAR 0 2
65610: PUSH
65611: LD_INT 4
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: LIST
65618: PUSH
65619: LD_VAR 0 1
65623: PUSH
65624: LD_VAR 0 2
65628: PUSH
65629: LD_INT 3
65631: PLUS
65632: PUSH
65633: LD_INT 0
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: LIST
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: ST_TO_ADDR
// end ; end ;
65648: GO 65651
65650: POP
// result := list ;
65651: LD_ADDR_VAR 0 4
65655: PUSH
65656: LD_VAR 0 5
65660: ST_TO_ADDR
// end ;
65661: LD_VAR 0 4
65665: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65666: LD_INT 0
65668: PPUSH
65669: PPUSH
65670: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65671: LD_VAR 0 1
65675: NOT
65676: PUSH
65677: LD_VAR 0 2
65681: PUSH
65682: LD_INT 1
65684: PUSH
65685: LD_INT 2
65687: PUSH
65688: LD_INT 3
65690: PUSH
65691: LD_INT 4
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: IN
65700: NOT
65701: OR
65702: IFFALSE 65706
// exit ;
65704: GO 65789
// tmp := [ ] ;
65706: LD_ADDR_VAR 0 5
65710: PUSH
65711: EMPTY
65712: ST_TO_ADDR
// for i in units do
65713: LD_ADDR_VAR 0 4
65717: PUSH
65718: LD_VAR 0 1
65722: PUSH
65723: FOR_IN
65724: IFFALSE 65758
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65726: LD_ADDR_VAR 0 5
65730: PUSH
65731: LD_VAR 0 5
65735: PPUSH
65736: LD_VAR 0 4
65740: PPUSH
65741: LD_VAR 0 2
65745: PPUSH
65746: CALL_OW 259
65750: PPUSH
65751: CALL 67162 0 2
65755: ST_TO_ADDR
65756: GO 65723
65758: POP
65759: POP
// if not tmp then
65760: LD_VAR 0 5
65764: NOT
65765: IFFALSE 65769
// exit ;
65767: GO 65789
// result := SortListByListDesc ( units , tmp ) ;
65769: LD_ADDR_VAR 0 3
65773: PUSH
65774: LD_VAR 0 1
65778: PPUSH
65779: LD_VAR 0 5
65783: PPUSH
65784: CALL_OW 77
65788: ST_TO_ADDR
// end ;
65789: LD_VAR 0 3
65793: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65794: LD_INT 0
65796: PPUSH
65797: PPUSH
65798: PPUSH
// result := false ;
65799: LD_ADDR_VAR 0 3
65803: PUSH
65804: LD_INT 0
65806: ST_TO_ADDR
// if not building then
65807: LD_VAR 0 2
65811: NOT
65812: IFFALSE 65816
// exit ;
65814: GO 65954
// x := GetX ( building ) ;
65816: LD_ADDR_VAR 0 4
65820: PUSH
65821: LD_VAR 0 2
65825: PPUSH
65826: CALL_OW 250
65830: ST_TO_ADDR
// y := GetY ( building ) ;
65831: LD_ADDR_VAR 0 5
65835: PUSH
65836: LD_VAR 0 2
65840: PPUSH
65841: CALL_OW 251
65845: ST_TO_ADDR
// if not x or not y then
65846: LD_VAR 0 4
65850: NOT
65851: PUSH
65852: LD_VAR 0 5
65856: NOT
65857: OR
65858: IFFALSE 65862
// exit ;
65860: GO 65954
// if GetTaskList ( unit ) then
65862: LD_VAR 0 1
65866: PPUSH
65867: CALL_OW 437
65871: IFFALSE 65954
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65873: LD_STRING e
65875: PUSH
65876: LD_VAR 0 1
65880: PPUSH
65881: CALL_OW 437
65885: PUSH
65886: LD_INT 1
65888: ARRAY
65889: PUSH
65890: LD_INT 1
65892: ARRAY
65893: EQUAL
65894: PUSH
65895: LD_VAR 0 4
65899: PUSH
65900: LD_VAR 0 1
65904: PPUSH
65905: CALL_OW 437
65909: PUSH
65910: LD_INT 1
65912: ARRAY
65913: PUSH
65914: LD_INT 2
65916: ARRAY
65917: EQUAL
65918: AND
65919: PUSH
65920: LD_VAR 0 5
65924: PUSH
65925: LD_VAR 0 1
65929: PPUSH
65930: CALL_OW 437
65934: PUSH
65935: LD_INT 1
65937: ARRAY
65938: PUSH
65939: LD_INT 3
65941: ARRAY
65942: EQUAL
65943: AND
65944: IFFALSE 65954
// result := true end ;
65946: LD_ADDR_VAR 0 3
65950: PUSH
65951: LD_INT 1
65953: ST_TO_ADDR
// end ;
65954: LD_VAR 0 3
65958: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65959: LD_INT 0
65961: PPUSH
// result := false ;
65962: LD_ADDR_VAR 0 4
65966: PUSH
65967: LD_INT 0
65969: ST_TO_ADDR
// if GetTaskList ( unit ) then
65970: LD_VAR 0 1
65974: PPUSH
65975: CALL_OW 437
65979: IFFALSE 66062
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65981: LD_STRING M
65983: PUSH
65984: LD_VAR 0 1
65988: PPUSH
65989: CALL_OW 437
65993: PUSH
65994: LD_INT 1
65996: ARRAY
65997: PUSH
65998: LD_INT 1
66000: ARRAY
66001: EQUAL
66002: PUSH
66003: LD_VAR 0 2
66007: PUSH
66008: LD_VAR 0 1
66012: PPUSH
66013: CALL_OW 437
66017: PUSH
66018: LD_INT 1
66020: ARRAY
66021: PUSH
66022: LD_INT 2
66024: ARRAY
66025: EQUAL
66026: AND
66027: PUSH
66028: LD_VAR 0 3
66032: PUSH
66033: LD_VAR 0 1
66037: PPUSH
66038: CALL_OW 437
66042: PUSH
66043: LD_INT 1
66045: ARRAY
66046: PUSH
66047: LD_INT 3
66049: ARRAY
66050: EQUAL
66051: AND
66052: IFFALSE 66062
// result := true ;
66054: LD_ADDR_VAR 0 4
66058: PUSH
66059: LD_INT 1
66061: ST_TO_ADDR
// end ; end ;
66062: LD_VAR 0 4
66066: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66067: LD_INT 0
66069: PPUSH
66070: PPUSH
66071: PPUSH
66072: PPUSH
// if not unit or not area then
66073: LD_VAR 0 1
66077: NOT
66078: PUSH
66079: LD_VAR 0 2
66083: NOT
66084: OR
66085: IFFALSE 66089
// exit ;
66087: GO 66265
// tmp := AreaToList ( area , i ) ;
66089: LD_ADDR_VAR 0 6
66093: PUSH
66094: LD_VAR 0 2
66098: PPUSH
66099: LD_VAR 0 5
66103: PPUSH
66104: CALL_OW 517
66108: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66109: LD_ADDR_VAR 0 5
66113: PUSH
66114: DOUBLE
66115: LD_INT 1
66117: DEC
66118: ST_TO_ADDR
66119: LD_VAR 0 6
66123: PUSH
66124: LD_INT 1
66126: ARRAY
66127: PUSH
66128: FOR_TO
66129: IFFALSE 66263
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66131: LD_ADDR_VAR 0 7
66135: PUSH
66136: LD_VAR 0 6
66140: PUSH
66141: LD_INT 1
66143: ARRAY
66144: PUSH
66145: LD_VAR 0 5
66149: ARRAY
66150: PUSH
66151: LD_VAR 0 6
66155: PUSH
66156: LD_INT 2
66158: ARRAY
66159: PUSH
66160: LD_VAR 0 5
66164: ARRAY
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66170: LD_INT 92
66172: PUSH
66173: LD_VAR 0 7
66177: PUSH
66178: LD_INT 1
66180: ARRAY
66181: PUSH
66182: LD_VAR 0 7
66186: PUSH
66187: LD_INT 2
66189: ARRAY
66190: PUSH
66191: LD_INT 2
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: PPUSH
66200: CALL_OW 69
66204: PUSH
66205: LD_INT 0
66207: EQUAL
66208: IFFALSE 66261
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66210: LD_VAR 0 1
66214: PPUSH
66215: LD_VAR 0 7
66219: PUSH
66220: LD_INT 1
66222: ARRAY
66223: PPUSH
66224: LD_VAR 0 7
66228: PUSH
66229: LD_INT 2
66231: ARRAY
66232: PPUSH
66233: LD_VAR 0 3
66237: PPUSH
66238: CALL_OW 48
// result := IsPlaced ( unit ) ;
66242: LD_ADDR_VAR 0 4
66246: PUSH
66247: LD_VAR 0 1
66251: PPUSH
66252: CALL_OW 305
66256: ST_TO_ADDR
// exit ;
66257: POP
66258: POP
66259: GO 66265
// end ; end ;
66261: GO 66128
66263: POP
66264: POP
// end ;
66265: LD_VAR 0 4
66269: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66270: LD_INT 0
66272: PPUSH
66273: PPUSH
66274: PPUSH
// if not side or side > 8 then
66275: LD_VAR 0 1
66279: NOT
66280: PUSH
66281: LD_VAR 0 1
66285: PUSH
66286: LD_INT 8
66288: GREATER
66289: OR
66290: IFFALSE 66294
// exit ;
66292: GO 66481
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66294: LD_ADDR_VAR 0 4
66298: PUSH
66299: LD_INT 22
66301: PUSH
66302: LD_VAR 0 1
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 21
66313: PUSH
66314: LD_INT 3
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PPUSH
66325: CALL_OW 69
66329: ST_TO_ADDR
// if not tmp then
66330: LD_VAR 0 4
66334: NOT
66335: IFFALSE 66339
// exit ;
66337: GO 66481
// enable_addtolog := true ;
66339: LD_ADDR_OWVAR 81
66343: PUSH
66344: LD_INT 1
66346: ST_TO_ADDR
// AddToLog ( [ ) ;
66347: LD_STRING [
66349: PPUSH
66350: CALL_OW 561
// for i in tmp do
66354: LD_ADDR_VAR 0 3
66358: PUSH
66359: LD_VAR 0 4
66363: PUSH
66364: FOR_IN
66365: IFFALSE 66472
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66367: LD_STRING [
66369: PUSH
66370: LD_VAR 0 3
66374: PPUSH
66375: CALL_OW 266
66379: STR
66380: PUSH
66381: LD_STRING , 
66383: STR
66384: PUSH
66385: LD_VAR 0 3
66389: PPUSH
66390: CALL_OW 250
66394: STR
66395: PUSH
66396: LD_STRING , 
66398: STR
66399: PUSH
66400: LD_VAR 0 3
66404: PPUSH
66405: CALL_OW 251
66409: STR
66410: PUSH
66411: LD_STRING , 
66413: STR
66414: PUSH
66415: LD_VAR 0 3
66419: PPUSH
66420: CALL_OW 254
66424: STR
66425: PUSH
66426: LD_STRING , 
66428: STR
66429: PUSH
66430: LD_VAR 0 3
66434: PPUSH
66435: LD_INT 1
66437: PPUSH
66438: CALL_OW 268
66442: STR
66443: PUSH
66444: LD_STRING , 
66446: STR
66447: PUSH
66448: LD_VAR 0 3
66452: PPUSH
66453: LD_INT 2
66455: PPUSH
66456: CALL_OW 268
66460: STR
66461: PUSH
66462: LD_STRING ],
66464: STR
66465: PPUSH
66466: CALL_OW 561
// end ;
66470: GO 66364
66472: POP
66473: POP
// AddToLog ( ]; ) ;
66474: LD_STRING ];
66476: PPUSH
66477: CALL_OW 561
// end ;
66481: LD_VAR 0 2
66485: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66486: LD_INT 0
66488: PPUSH
66489: PPUSH
66490: PPUSH
66491: PPUSH
66492: PPUSH
// if not area or not rate or not max then
66493: LD_VAR 0 1
66497: NOT
66498: PUSH
66499: LD_VAR 0 2
66503: NOT
66504: OR
66505: PUSH
66506: LD_VAR 0 4
66510: NOT
66511: OR
66512: IFFALSE 66516
// exit ;
66514: GO 66705
// while 1 do
66516: LD_INT 1
66518: IFFALSE 66705
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66520: LD_ADDR_VAR 0 9
66524: PUSH
66525: LD_VAR 0 1
66529: PPUSH
66530: LD_INT 1
66532: PPUSH
66533: CALL_OW 287
66537: PUSH
66538: LD_INT 10
66540: MUL
66541: ST_TO_ADDR
// r := rate / 10 ;
66542: LD_ADDR_VAR 0 7
66546: PUSH
66547: LD_VAR 0 2
66551: PUSH
66552: LD_INT 10
66554: DIVREAL
66555: ST_TO_ADDR
// time := 1 1$00 ;
66556: LD_ADDR_VAR 0 8
66560: PUSH
66561: LD_INT 2100
66563: ST_TO_ADDR
// if amount < min then
66564: LD_VAR 0 9
66568: PUSH
66569: LD_VAR 0 3
66573: LESS
66574: IFFALSE 66592
// r := r * 2 else
66576: LD_ADDR_VAR 0 7
66580: PUSH
66581: LD_VAR 0 7
66585: PUSH
66586: LD_INT 2
66588: MUL
66589: ST_TO_ADDR
66590: GO 66618
// if amount > max then
66592: LD_VAR 0 9
66596: PUSH
66597: LD_VAR 0 4
66601: GREATER
66602: IFFALSE 66618
// r := r / 2 ;
66604: LD_ADDR_VAR 0 7
66608: PUSH
66609: LD_VAR 0 7
66613: PUSH
66614: LD_INT 2
66616: DIVREAL
66617: ST_TO_ADDR
// time := time / r ;
66618: LD_ADDR_VAR 0 8
66622: PUSH
66623: LD_VAR 0 8
66627: PUSH
66628: LD_VAR 0 7
66632: DIVREAL
66633: ST_TO_ADDR
// if time < 0 then
66634: LD_VAR 0 8
66638: PUSH
66639: LD_INT 0
66641: LESS
66642: IFFALSE 66659
// time := time * - 1 ;
66644: LD_ADDR_VAR 0 8
66648: PUSH
66649: LD_VAR 0 8
66653: PUSH
66654: LD_INT 1
66656: NEG
66657: MUL
66658: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66659: LD_VAR 0 8
66663: PUSH
66664: LD_INT 35
66666: PPUSH
66667: LD_INT 875
66669: PPUSH
66670: CALL_OW 12
66674: PLUS
66675: PPUSH
66676: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66680: LD_INT 1
66682: PPUSH
66683: LD_INT 5
66685: PPUSH
66686: CALL_OW 12
66690: PPUSH
66691: LD_VAR 0 1
66695: PPUSH
66696: LD_INT 1
66698: PPUSH
66699: CALL_OW 55
// end ;
66703: GO 66516
// end ;
66705: LD_VAR 0 5
66709: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66710: LD_INT 0
66712: PPUSH
66713: PPUSH
66714: PPUSH
66715: PPUSH
66716: PPUSH
66717: PPUSH
66718: PPUSH
66719: PPUSH
// if not turrets or not factories then
66720: LD_VAR 0 1
66724: NOT
66725: PUSH
66726: LD_VAR 0 2
66730: NOT
66731: OR
66732: IFFALSE 66736
// exit ;
66734: GO 67043
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66736: LD_ADDR_VAR 0 10
66740: PUSH
66741: LD_INT 5
66743: PUSH
66744: LD_INT 6
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 2
66753: PUSH
66754: LD_INT 4
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 3
66763: PUSH
66764: LD_INT 5
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 24
66778: PUSH
66779: LD_INT 25
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 23
66788: PUSH
66789: LD_INT 27
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: LD_INT 42
66802: PUSH
66803: LD_INT 43
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PUSH
66810: LD_INT 44
66812: PUSH
66813: LD_INT 46
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 45
66822: PUSH
66823: LD_INT 47
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: LIST
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: LIST
66839: ST_TO_ADDR
// result := [ ] ;
66840: LD_ADDR_VAR 0 3
66844: PUSH
66845: EMPTY
66846: ST_TO_ADDR
// for i in turrets do
66847: LD_ADDR_VAR 0 4
66851: PUSH
66852: LD_VAR 0 1
66856: PUSH
66857: FOR_IN
66858: IFFALSE 67041
// begin nat := GetNation ( i ) ;
66860: LD_ADDR_VAR 0 7
66864: PUSH
66865: LD_VAR 0 4
66869: PPUSH
66870: CALL_OW 248
66874: ST_TO_ADDR
// weapon := 0 ;
66875: LD_ADDR_VAR 0 8
66879: PUSH
66880: LD_INT 0
66882: ST_TO_ADDR
// if not nat then
66883: LD_VAR 0 7
66887: NOT
66888: IFFALSE 66892
// continue ;
66890: GO 66857
// for j in list [ nat ] do
66892: LD_ADDR_VAR 0 5
66896: PUSH
66897: LD_VAR 0 10
66901: PUSH
66902: LD_VAR 0 7
66906: ARRAY
66907: PUSH
66908: FOR_IN
66909: IFFALSE 66950
// if GetBWeapon ( i ) = j [ 1 ] then
66911: LD_VAR 0 4
66915: PPUSH
66916: CALL_OW 269
66920: PUSH
66921: LD_VAR 0 5
66925: PUSH
66926: LD_INT 1
66928: ARRAY
66929: EQUAL
66930: IFFALSE 66948
// begin weapon := j [ 2 ] ;
66932: LD_ADDR_VAR 0 8
66936: PUSH
66937: LD_VAR 0 5
66941: PUSH
66942: LD_INT 2
66944: ARRAY
66945: ST_TO_ADDR
// break ;
66946: GO 66950
// end ;
66948: GO 66908
66950: POP
66951: POP
// if not weapon then
66952: LD_VAR 0 8
66956: NOT
66957: IFFALSE 66961
// continue ;
66959: GO 66857
// for k in factories do
66961: LD_ADDR_VAR 0 6
66965: PUSH
66966: LD_VAR 0 2
66970: PUSH
66971: FOR_IN
66972: IFFALSE 67037
// begin weapons := AvailableWeaponList ( k ) ;
66974: LD_ADDR_VAR 0 9
66978: PUSH
66979: LD_VAR 0 6
66983: PPUSH
66984: CALL_OW 478
66988: ST_TO_ADDR
// if not weapons then
66989: LD_VAR 0 9
66993: NOT
66994: IFFALSE 66998
// continue ;
66996: GO 66971
// if weapon in weapons then
66998: LD_VAR 0 8
67002: PUSH
67003: LD_VAR 0 9
67007: IN
67008: IFFALSE 67035
// begin result := [ i , weapon ] ;
67010: LD_ADDR_VAR 0 3
67014: PUSH
67015: LD_VAR 0 4
67019: PUSH
67020: LD_VAR 0 8
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: ST_TO_ADDR
// exit ;
67029: POP
67030: POP
67031: POP
67032: POP
67033: GO 67043
// end ; end ;
67035: GO 66971
67037: POP
67038: POP
// end ;
67039: GO 66857
67041: POP
67042: POP
// end ;
67043: LD_VAR 0 3
67047: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67048: LD_INT 0
67050: PPUSH
// if not side or side > 8 then
67051: LD_VAR 0 3
67055: NOT
67056: PUSH
67057: LD_VAR 0 3
67061: PUSH
67062: LD_INT 8
67064: GREATER
67065: OR
67066: IFFALSE 67070
// exit ;
67068: GO 67129
// if not range then
67070: LD_VAR 0 4
67074: NOT
67075: IFFALSE 67086
// range := - 12 ;
67077: LD_ADDR_VAR 0 4
67081: PUSH
67082: LD_INT 12
67084: NEG
67085: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67086: LD_VAR 0 1
67090: PPUSH
67091: LD_VAR 0 2
67095: PPUSH
67096: LD_VAR 0 3
67100: PPUSH
67101: LD_VAR 0 4
67105: PPUSH
67106: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67110: LD_VAR 0 1
67114: PPUSH
67115: LD_VAR 0 2
67119: PPUSH
67120: LD_VAR 0 3
67124: PPUSH
67125: CALL_OW 331
// end ;
67129: LD_VAR 0 5
67133: RET
// export function Video ( mode ) ; begin
67134: LD_INT 0
67136: PPUSH
// ingame_video = mode ;
67137: LD_ADDR_OWVAR 52
67141: PUSH
67142: LD_VAR 0 1
67146: ST_TO_ADDR
// interface_hidden = mode ;
67147: LD_ADDR_OWVAR 54
67151: PUSH
67152: LD_VAR 0 1
67156: ST_TO_ADDR
// end ;
67157: LD_VAR 0 2
67161: RET
// export function Join ( array , element ) ; begin
67162: LD_INT 0
67164: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67165: LD_ADDR_VAR 0 3
67169: PUSH
67170: LD_VAR 0 1
67174: PPUSH
67175: LD_VAR 0 1
67179: PUSH
67180: LD_INT 1
67182: PLUS
67183: PPUSH
67184: LD_VAR 0 2
67188: PPUSH
67189: CALL_OW 1
67193: ST_TO_ADDR
// end ;
67194: LD_VAR 0 3
67198: RET
// export function JoinUnion ( array , element ) ; begin
67199: LD_INT 0
67201: PPUSH
// result := array union element ;
67202: LD_ADDR_VAR 0 3
67206: PUSH
67207: LD_VAR 0 1
67211: PUSH
67212: LD_VAR 0 2
67216: UNION
67217: ST_TO_ADDR
// end ;
67218: LD_VAR 0 3
67222: RET
// export function GetBehemoths ( side ) ; begin
67223: LD_INT 0
67225: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67226: LD_ADDR_VAR 0 2
67230: PUSH
67231: LD_INT 22
67233: PUSH
67234: LD_VAR 0 1
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 31
67245: PUSH
67246: LD_INT 25
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PPUSH
67257: CALL_OW 69
67261: ST_TO_ADDR
// end ;
67262: LD_VAR 0 2
67266: RET
// export function Shuffle ( array ) ; var i , index ; begin
67267: LD_INT 0
67269: PPUSH
67270: PPUSH
67271: PPUSH
// result := [ ] ;
67272: LD_ADDR_VAR 0 2
67276: PUSH
67277: EMPTY
67278: ST_TO_ADDR
// if not array then
67279: LD_VAR 0 1
67283: NOT
67284: IFFALSE 67288
// exit ;
67286: GO 67387
// Randomize ;
67288: CALL_OW 10
// for i = array downto 1 do
67292: LD_ADDR_VAR 0 3
67296: PUSH
67297: DOUBLE
67298: LD_VAR 0 1
67302: INC
67303: ST_TO_ADDR
67304: LD_INT 1
67306: PUSH
67307: FOR_DOWNTO
67308: IFFALSE 67385
// begin index := rand ( 1 , array ) ;
67310: LD_ADDR_VAR 0 4
67314: PUSH
67315: LD_INT 1
67317: PPUSH
67318: LD_VAR 0 1
67322: PPUSH
67323: CALL_OW 12
67327: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67328: LD_ADDR_VAR 0 2
67332: PUSH
67333: LD_VAR 0 2
67337: PPUSH
67338: LD_VAR 0 2
67342: PUSH
67343: LD_INT 1
67345: PLUS
67346: PPUSH
67347: LD_VAR 0 1
67351: PUSH
67352: LD_VAR 0 4
67356: ARRAY
67357: PPUSH
67358: CALL_OW 2
67362: ST_TO_ADDR
// array := Delete ( array , index ) ;
67363: LD_ADDR_VAR 0 1
67367: PUSH
67368: LD_VAR 0 1
67372: PPUSH
67373: LD_VAR 0 4
67377: PPUSH
67378: CALL_OW 3
67382: ST_TO_ADDR
// end ;
67383: GO 67307
67385: POP
67386: POP
// end ;
67387: LD_VAR 0 2
67391: RET
// export function GetBaseMaterials ( base ) ; begin
67392: LD_INT 0
67394: PPUSH
// result := [ 0 , 0 , 0 ] ;
67395: LD_ADDR_VAR 0 2
67399: PUSH
67400: LD_INT 0
67402: PUSH
67403: LD_INT 0
67405: PUSH
67406: LD_INT 0
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: LIST
67413: ST_TO_ADDR
// if not base then
67414: LD_VAR 0 1
67418: NOT
67419: IFFALSE 67423
// exit ;
67421: GO 67472
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67423: LD_ADDR_VAR 0 2
67427: PUSH
67428: LD_VAR 0 1
67432: PPUSH
67433: LD_INT 1
67435: PPUSH
67436: CALL_OW 275
67440: PUSH
67441: LD_VAR 0 1
67445: PPUSH
67446: LD_INT 2
67448: PPUSH
67449: CALL_OW 275
67453: PUSH
67454: LD_VAR 0 1
67458: PPUSH
67459: LD_INT 3
67461: PPUSH
67462: CALL_OW 275
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: LIST
67471: ST_TO_ADDR
// end ;
67472: LD_VAR 0 2
67476: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67477: LD_INT 0
67479: PPUSH
67480: PPUSH
// result := array ;
67481: LD_ADDR_VAR 0 3
67485: PUSH
67486: LD_VAR 0 1
67490: ST_TO_ADDR
// if size >= result then
67491: LD_VAR 0 2
67495: PUSH
67496: LD_VAR 0 3
67500: GREATEREQUAL
67501: IFFALSE 67505
// exit ;
67503: GO 67555
// if size then
67505: LD_VAR 0 2
67509: IFFALSE 67555
// for i := array downto size do
67511: LD_ADDR_VAR 0 4
67515: PUSH
67516: DOUBLE
67517: LD_VAR 0 1
67521: INC
67522: ST_TO_ADDR
67523: LD_VAR 0 2
67527: PUSH
67528: FOR_DOWNTO
67529: IFFALSE 67553
// result := Delete ( result , result ) ;
67531: LD_ADDR_VAR 0 3
67535: PUSH
67536: LD_VAR 0 3
67540: PPUSH
67541: LD_VAR 0 3
67545: PPUSH
67546: CALL_OW 3
67550: ST_TO_ADDR
67551: GO 67528
67553: POP
67554: POP
// end ;
67555: LD_VAR 0 3
67559: RET
// export function ComExit ( unit ) ; var tmp ; begin
67560: LD_INT 0
67562: PPUSH
67563: PPUSH
// if not IsInUnit ( unit ) then
67564: LD_VAR 0 1
67568: PPUSH
67569: CALL_OW 310
67573: NOT
67574: IFFALSE 67578
// exit ;
67576: GO 67638
// tmp := IsInUnit ( unit ) ;
67578: LD_ADDR_VAR 0 3
67582: PUSH
67583: LD_VAR 0 1
67587: PPUSH
67588: CALL_OW 310
67592: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67593: LD_VAR 0 3
67597: PPUSH
67598: CALL_OW 247
67602: PUSH
67603: LD_INT 2
67605: EQUAL
67606: IFFALSE 67619
// ComExitVehicle ( unit ) else
67608: LD_VAR 0 1
67612: PPUSH
67613: CALL_OW 121
67617: GO 67628
// ComExitBuilding ( unit ) ;
67619: LD_VAR 0 1
67623: PPUSH
67624: CALL_OW 122
// result := tmp ;
67628: LD_ADDR_VAR 0 2
67632: PUSH
67633: LD_VAR 0 3
67637: ST_TO_ADDR
// end ;
67638: LD_VAR 0 2
67642: RET
// export function ComExitAll ( units ) ; var i ; begin
67643: LD_INT 0
67645: PPUSH
67646: PPUSH
// if not units then
67647: LD_VAR 0 1
67651: NOT
67652: IFFALSE 67656
// exit ;
67654: GO 67682
// for i in units do
67656: LD_ADDR_VAR 0 3
67660: PUSH
67661: LD_VAR 0 1
67665: PUSH
67666: FOR_IN
67667: IFFALSE 67680
// ComExit ( i ) ;
67669: LD_VAR 0 3
67673: PPUSH
67674: CALL 67560 0 1
67678: GO 67666
67680: POP
67681: POP
// end ;
67682: LD_VAR 0 2
67686: RET
// export function ResetHc ; begin
67687: LD_INT 0
67689: PPUSH
// InitHc ;
67690: CALL_OW 19
// hc_importance := 0 ;
67694: LD_ADDR_OWVAR 32
67698: PUSH
67699: LD_INT 0
67701: ST_TO_ADDR
// end ;
67702: LD_VAR 0 1
67706: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67707: LD_INT 0
67709: PPUSH
67710: PPUSH
67711: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67712: LD_ADDR_VAR 0 6
67716: PUSH
67717: LD_VAR 0 1
67721: PUSH
67722: LD_VAR 0 3
67726: PLUS
67727: PUSH
67728: LD_INT 2
67730: DIV
67731: ST_TO_ADDR
// if _x < 0 then
67732: LD_VAR 0 6
67736: PUSH
67737: LD_INT 0
67739: LESS
67740: IFFALSE 67757
// _x := _x * - 1 ;
67742: LD_ADDR_VAR 0 6
67746: PUSH
67747: LD_VAR 0 6
67751: PUSH
67752: LD_INT 1
67754: NEG
67755: MUL
67756: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67757: LD_ADDR_VAR 0 7
67761: PUSH
67762: LD_VAR 0 2
67766: PUSH
67767: LD_VAR 0 4
67771: PLUS
67772: PUSH
67773: LD_INT 2
67775: DIV
67776: ST_TO_ADDR
// if _y < 0 then
67777: LD_VAR 0 7
67781: PUSH
67782: LD_INT 0
67784: LESS
67785: IFFALSE 67802
// _y := _y * - 1 ;
67787: LD_ADDR_VAR 0 7
67791: PUSH
67792: LD_VAR 0 7
67796: PUSH
67797: LD_INT 1
67799: NEG
67800: MUL
67801: ST_TO_ADDR
// result := [ _x , _y ] ;
67802: LD_ADDR_VAR 0 5
67806: PUSH
67807: LD_VAR 0 6
67811: PUSH
67812: LD_VAR 0 7
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: ST_TO_ADDR
// end ;
67821: LD_VAR 0 5
67825: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67826: LD_INT 0
67828: PPUSH
67829: PPUSH
67830: PPUSH
67831: PPUSH
// task := GetTaskList ( unit ) ;
67832: LD_ADDR_VAR 0 7
67836: PUSH
67837: LD_VAR 0 1
67841: PPUSH
67842: CALL_OW 437
67846: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67847: LD_VAR 0 7
67851: NOT
67852: PUSH
67853: LD_VAR 0 1
67857: PPUSH
67858: LD_VAR 0 2
67862: PPUSH
67863: CALL_OW 308
67867: NOT
67868: AND
67869: IFFALSE 67873
// exit ;
67871: GO 67991
// if IsInArea ( unit , area ) then
67873: LD_VAR 0 1
67877: PPUSH
67878: LD_VAR 0 2
67882: PPUSH
67883: CALL_OW 308
67887: IFFALSE 67905
// begin ComMoveToArea ( unit , goAway ) ;
67889: LD_VAR 0 1
67893: PPUSH
67894: LD_VAR 0 3
67898: PPUSH
67899: CALL_OW 113
// exit ;
67903: GO 67991
// end ; if task [ 1 ] [ 1 ] <> M then
67905: LD_VAR 0 7
67909: PUSH
67910: LD_INT 1
67912: ARRAY
67913: PUSH
67914: LD_INT 1
67916: ARRAY
67917: PUSH
67918: LD_STRING M
67920: NONEQUAL
67921: IFFALSE 67925
// exit ;
67923: GO 67991
// x := task [ 1 ] [ 2 ] ;
67925: LD_ADDR_VAR 0 5
67929: PUSH
67930: LD_VAR 0 7
67934: PUSH
67935: LD_INT 1
67937: ARRAY
67938: PUSH
67939: LD_INT 2
67941: ARRAY
67942: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67943: LD_ADDR_VAR 0 6
67947: PUSH
67948: LD_VAR 0 7
67952: PUSH
67953: LD_INT 1
67955: ARRAY
67956: PUSH
67957: LD_INT 3
67959: ARRAY
67960: ST_TO_ADDR
// if InArea ( x , y , area ) then
67961: LD_VAR 0 5
67965: PPUSH
67966: LD_VAR 0 6
67970: PPUSH
67971: LD_VAR 0 2
67975: PPUSH
67976: CALL_OW 309
67980: IFFALSE 67991
// ComStop ( unit ) ;
67982: LD_VAR 0 1
67986: PPUSH
67987: CALL_OW 141
// end ;
67991: LD_VAR 0 4
67995: RET
// export function Abs ( value ) ; begin
67996: LD_INT 0
67998: PPUSH
// result := value ;
67999: LD_ADDR_VAR 0 2
68003: PUSH
68004: LD_VAR 0 1
68008: ST_TO_ADDR
// if value < 0 then
68009: LD_VAR 0 1
68013: PUSH
68014: LD_INT 0
68016: LESS
68017: IFFALSE 68034
// result := value * - 1 ;
68019: LD_ADDR_VAR 0 2
68023: PUSH
68024: LD_VAR 0 1
68028: PUSH
68029: LD_INT 1
68031: NEG
68032: MUL
68033: ST_TO_ADDR
// end ;
68034: LD_VAR 0 2
68038: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68039: LD_INT 0
68041: PPUSH
68042: PPUSH
68043: PPUSH
68044: PPUSH
68045: PPUSH
68046: PPUSH
68047: PPUSH
68048: PPUSH
// if not unit or not building then
68049: LD_VAR 0 1
68053: NOT
68054: PUSH
68055: LD_VAR 0 2
68059: NOT
68060: OR
68061: IFFALSE 68065
// exit ;
68063: GO 68291
// x := GetX ( building ) ;
68065: LD_ADDR_VAR 0 4
68069: PUSH
68070: LD_VAR 0 2
68074: PPUSH
68075: CALL_OW 250
68079: ST_TO_ADDR
// y := GetY ( building ) ;
68080: LD_ADDR_VAR 0 6
68084: PUSH
68085: LD_VAR 0 2
68089: PPUSH
68090: CALL_OW 251
68094: ST_TO_ADDR
// d := GetDir ( building ) ;
68095: LD_ADDR_VAR 0 8
68099: PUSH
68100: LD_VAR 0 2
68104: PPUSH
68105: CALL_OW 254
68109: ST_TO_ADDR
// r := 4 ;
68110: LD_ADDR_VAR 0 9
68114: PUSH
68115: LD_INT 4
68117: ST_TO_ADDR
// for i := 1 to 5 do
68118: LD_ADDR_VAR 0 10
68122: PUSH
68123: DOUBLE
68124: LD_INT 1
68126: DEC
68127: ST_TO_ADDR
68128: LD_INT 5
68130: PUSH
68131: FOR_TO
68132: IFFALSE 68289
// begin _x := ShiftX ( x , d , r + i ) ;
68134: LD_ADDR_VAR 0 5
68138: PUSH
68139: LD_VAR 0 4
68143: PPUSH
68144: LD_VAR 0 8
68148: PPUSH
68149: LD_VAR 0 9
68153: PUSH
68154: LD_VAR 0 10
68158: PLUS
68159: PPUSH
68160: CALL_OW 272
68164: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68165: LD_ADDR_VAR 0 7
68169: PUSH
68170: LD_VAR 0 6
68174: PPUSH
68175: LD_VAR 0 8
68179: PPUSH
68180: LD_VAR 0 9
68184: PUSH
68185: LD_VAR 0 10
68189: PLUS
68190: PPUSH
68191: CALL_OW 273
68195: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68196: LD_VAR 0 5
68200: PPUSH
68201: LD_VAR 0 7
68205: PPUSH
68206: CALL_OW 488
68210: PUSH
68211: LD_VAR 0 5
68215: PPUSH
68216: LD_VAR 0 7
68220: PPUSH
68221: CALL_OW 428
68225: PPUSH
68226: CALL_OW 247
68230: PUSH
68231: LD_INT 3
68233: PUSH
68234: LD_INT 2
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: IN
68241: NOT
68242: AND
68243: IFFALSE 68287
// begin ComMoveXY ( unit , _x , _y ) ;
68245: LD_VAR 0 1
68249: PPUSH
68250: LD_VAR 0 5
68254: PPUSH
68255: LD_VAR 0 7
68259: PPUSH
68260: CALL_OW 111
// result := [ _x , _y ] ;
68264: LD_ADDR_VAR 0 3
68268: PUSH
68269: LD_VAR 0 5
68273: PUSH
68274: LD_VAR 0 7
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: ST_TO_ADDR
// exit ;
68283: POP
68284: POP
68285: GO 68291
// end ; end ;
68287: GO 68131
68289: POP
68290: POP
// end ;
68291: LD_VAR 0 3
68295: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68296: LD_INT 0
68298: PPUSH
68299: PPUSH
68300: PPUSH
// result := 0 ;
68301: LD_ADDR_VAR 0 3
68305: PUSH
68306: LD_INT 0
68308: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68309: LD_VAR 0 1
68313: PUSH
68314: LD_INT 0
68316: LESS
68317: PUSH
68318: LD_VAR 0 1
68322: PUSH
68323: LD_INT 8
68325: GREATER
68326: OR
68327: PUSH
68328: LD_VAR 0 2
68332: PUSH
68333: LD_INT 0
68335: LESS
68336: OR
68337: PUSH
68338: LD_VAR 0 2
68342: PUSH
68343: LD_INT 8
68345: GREATER
68346: OR
68347: IFFALSE 68351
// exit ;
68349: GO 68426
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68351: LD_ADDR_VAR 0 4
68355: PUSH
68356: LD_INT 22
68358: PUSH
68359: LD_VAR 0 2
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PPUSH
68368: CALL_OW 69
68372: PUSH
68373: FOR_IN
68374: IFFALSE 68424
// begin un := UnitShoot ( i ) ;
68376: LD_ADDR_VAR 0 5
68380: PUSH
68381: LD_VAR 0 4
68385: PPUSH
68386: CALL_OW 504
68390: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68391: LD_VAR 0 5
68395: PPUSH
68396: CALL_OW 255
68400: PUSH
68401: LD_VAR 0 1
68405: EQUAL
68406: IFFALSE 68422
// begin result := un ;
68408: LD_ADDR_VAR 0 3
68412: PUSH
68413: LD_VAR 0 5
68417: ST_TO_ADDR
// exit ;
68418: POP
68419: POP
68420: GO 68426
// end ; end ;
68422: GO 68373
68424: POP
68425: POP
// end ;
68426: LD_VAR 0 3
68430: RET
// export function GetCargoBay ( units ) ; begin
68431: LD_INT 0
68433: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68434: LD_ADDR_VAR 0 2
68438: PUSH
68439: LD_VAR 0 1
68443: PPUSH
68444: LD_INT 2
68446: PUSH
68447: LD_INT 34
68449: PUSH
68450: LD_INT 12
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 34
68459: PUSH
68460: LD_INT 51
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 34
68469: PUSH
68470: LD_INT 32
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 34
68479: PUSH
68480: LD_INT 89
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: PPUSH
68494: CALL_OW 72
68498: ST_TO_ADDR
// end ;
68499: LD_VAR 0 2
68503: RET
// export function Negate ( value ) ; begin
68504: LD_INT 0
68506: PPUSH
// result := not value ;
68507: LD_ADDR_VAR 0 2
68511: PUSH
68512: LD_VAR 0 1
68516: NOT
68517: ST_TO_ADDR
// end ;
68518: LD_VAR 0 2
68522: RET
// export function Inc ( value ) ; begin
68523: LD_INT 0
68525: PPUSH
// result := value + 1 ;
68526: LD_ADDR_VAR 0 2
68530: PUSH
68531: LD_VAR 0 1
68535: PUSH
68536: LD_INT 1
68538: PLUS
68539: ST_TO_ADDR
// end ;
68540: LD_VAR 0 2
68544: RET
// export function Dec ( value ) ; begin
68545: LD_INT 0
68547: PPUSH
// result := value - 1 ;
68548: LD_ADDR_VAR 0 2
68552: PUSH
68553: LD_VAR 0 1
68557: PUSH
68558: LD_INT 1
68560: MINUS
68561: ST_TO_ADDR
// end ;
68562: LD_VAR 0 2
68566: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68567: LD_INT 0
68569: PPUSH
68570: PPUSH
68571: PPUSH
68572: PPUSH
68573: PPUSH
68574: PPUSH
68575: PPUSH
68576: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68577: LD_VAR 0 1
68581: PPUSH
68582: LD_VAR 0 2
68586: PPUSH
68587: CALL_OW 488
68591: NOT
68592: PUSH
68593: LD_VAR 0 3
68597: PPUSH
68598: LD_VAR 0 4
68602: PPUSH
68603: CALL_OW 488
68607: NOT
68608: OR
68609: IFFALSE 68622
// begin result := - 1 ;
68611: LD_ADDR_VAR 0 5
68615: PUSH
68616: LD_INT 1
68618: NEG
68619: ST_TO_ADDR
// exit ;
68620: GO 68857
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68622: LD_ADDR_VAR 0 12
68626: PUSH
68627: LD_VAR 0 1
68631: PPUSH
68632: LD_VAR 0 2
68636: PPUSH
68637: LD_VAR 0 3
68641: PPUSH
68642: LD_VAR 0 4
68646: PPUSH
68647: CALL 67707 0 4
68651: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68652: LD_ADDR_VAR 0 11
68656: PUSH
68657: LD_VAR 0 1
68661: PPUSH
68662: LD_VAR 0 2
68666: PPUSH
68667: LD_VAR 0 12
68671: PUSH
68672: LD_INT 1
68674: ARRAY
68675: PPUSH
68676: LD_VAR 0 12
68680: PUSH
68681: LD_INT 2
68683: ARRAY
68684: PPUSH
68685: CALL_OW 298
68689: ST_TO_ADDR
// distance := 9999 ;
68690: LD_ADDR_VAR 0 10
68694: PUSH
68695: LD_INT 9999
68697: ST_TO_ADDR
// for i := 0 to 5 do
68698: LD_ADDR_VAR 0 6
68702: PUSH
68703: DOUBLE
68704: LD_INT 0
68706: DEC
68707: ST_TO_ADDR
68708: LD_INT 5
68710: PUSH
68711: FOR_TO
68712: IFFALSE 68855
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68714: LD_ADDR_VAR 0 7
68718: PUSH
68719: LD_VAR 0 1
68723: PPUSH
68724: LD_VAR 0 6
68728: PPUSH
68729: LD_VAR 0 11
68733: PPUSH
68734: CALL_OW 272
68738: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68739: LD_ADDR_VAR 0 8
68743: PUSH
68744: LD_VAR 0 2
68748: PPUSH
68749: LD_VAR 0 6
68753: PPUSH
68754: LD_VAR 0 11
68758: PPUSH
68759: CALL_OW 273
68763: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68764: LD_VAR 0 7
68768: PPUSH
68769: LD_VAR 0 8
68773: PPUSH
68774: CALL_OW 488
68778: NOT
68779: IFFALSE 68783
// continue ;
68781: GO 68711
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68783: LD_ADDR_VAR 0 9
68787: PUSH
68788: LD_VAR 0 12
68792: PUSH
68793: LD_INT 1
68795: ARRAY
68796: PPUSH
68797: LD_VAR 0 12
68801: PUSH
68802: LD_INT 2
68804: ARRAY
68805: PPUSH
68806: LD_VAR 0 7
68810: PPUSH
68811: LD_VAR 0 8
68815: PPUSH
68816: CALL_OW 298
68820: ST_TO_ADDR
// if tmp < distance then
68821: LD_VAR 0 9
68825: PUSH
68826: LD_VAR 0 10
68830: LESS
68831: IFFALSE 68853
// begin result := i ;
68833: LD_ADDR_VAR 0 5
68837: PUSH
68838: LD_VAR 0 6
68842: ST_TO_ADDR
// distance := tmp ;
68843: LD_ADDR_VAR 0 10
68847: PUSH
68848: LD_VAR 0 9
68852: ST_TO_ADDR
// end ; end ;
68853: GO 68711
68855: POP
68856: POP
// end ;
68857: LD_VAR 0 5
68861: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68862: LD_INT 0
68864: PPUSH
68865: PPUSH
// if not driver or not IsInUnit ( driver ) then
68866: LD_VAR 0 1
68870: NOT
68871: PUSH
68872: LD_VAR 0 1
68876: PPUSH
68877: CALL_OW 310
68881: NOT
68882: OR
68883: IFFALSE 68887
// exit ;
68885: GO 68977
// vehicle := IsInUnit ( driver ) ;
68887: LD_ADDR_VAR 0 3
68891: PUSH
68892: LD_VAR 0 1
68896: PPUSH
68897: CALL_OW 310
68901: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68902: LD_VAR 0 1
68906: PPUSH
68907: LD_STRING \
68909: PUSH
68910: LD_INT 0
68912: PUSH
68913: LD_INT 0
68915: PUSH
68916: LD_INT 0
68918: PUSH
68919: LD_INT 0
68921: PUSH
68922: LD_INT 0
68924: PUSH
68925: LD_INT 0
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: PUSH
68937: LD_STRING E
68939: PUSH
68940: LD_INT 0
68942: PUSH
68943: LD_INT 0
68945: PUSH
68946: LD_VAR 0 3
68950: PUSH
68951: LD_INT 0
68953: PUSH
68954: LD_INT 0
68956: PUSH
68957: LD_INT 0
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PPUSH
68973: CALL_OW 446
// end ;
68977: LD_VAR 0 2
68981: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68982: LD_INT 0
68984: PPUSH
68985: PPUSH
// if not driver or not IsInUnit ( driver ) then
68986: LD_VAR 0 1
68990: NOT
68991: PUSH
68992: LD_VAR 0 1
68996: PPUSH
68997: CALL_OW 310
69001: NOT
69002: OR
69003: IFFALSE 69007
// exit ;
69005: GO 69097
// vehicle := IsInUnit ( driver ) ;
69007: LD_ADDR_VAR 0 3
69011: PUSH
69012: LD_VAR 0 1
69016: PPUSH
69017: CALL_OW 310
69021: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69022: LD_VAR 0 1
69026: PPUSH
69027: LD_STRING \
69029: PUSH
69030: LD_INT 0
69032: PUSH
69033: LD_INT 0
69035: PUSH
69036: LD_INT 0
69038: PUSH
69039: LD_INT 0
69041: PUSH
69042: LD_INT 0
69044: PUSH
69045: LD_INT 0
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: PUSH
69057: LD_STRING E
69059: PUSH
69060: LD_INT 0
69062: PUSH
69063: LD_INT 0
69065: PUSH
69066: LD_VAR 0 3
69070: PUSH
69071: LD_INT 0
69073: PUSH
69074: LD_INT 0
69076: PUSH
69077: LD_INT 0
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PPUSH
69093: CALL_OW 447
// end ;
69097: LD_VAR 0 2
69101: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69102: LD_INT 0
69104: PPUSH
69105: PPUSH
69106: PPUSH
// tmp := [ ] ;
69107: LD_ADDR_VAR 0 5
69111: PUSH
69112: EMPTY
69113: ST_TO_ADDR
// for i in units do
69114: LD_ADDR_VAR 0 4
69118: PUSH
69119: LD_VAR 0 1
69123: PUSH
69124: FOR_IN
69125: IFFALSE 69163
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69127: LD_ADDR_VAR 0 5
69131: PUSH
69132: LD_VAR 0 5
69136: PPUSH
69137: LD_VAR 0 5
69141: PUSH
69142: LD_INT 1
69144: PLUS
69145: PPUSH
69146: LD_VAR 0 4
69150: PPUSH
69151: CALL_OW 256
69155: PPUSH
69156: CALL_OW 2
69160: ST_TO_ADDR
69161: GO 69124
69163: POP
69164: POP
// if not tmp then
69165: LD_VAR 0 5
69169: NOT
69170: IFFALSE 69174
// exit ;
69172: GO 69222
// if asc then
69174: LD_VAR 0 2
69178: IFFALSE 69202
// result := SortListByListAsc ( units , tmp ) else
69180: LD_ADDR_VAR 0 3
69184: PUSH
69185: LD_VAR 0 1
69189: PPUSH
69190: LD_VAR 0 5
69194: PPUSH
69195: CALL_OW 76
69199: ST_TO_ADDR
69200: GO 69222
// result := SortListByListDesc ( units , tmp ) ;
69202: LD_ADDR_VAR 0 3
69206: PUSH
69207: LD_VAR 0 1
69211: PPUSH
69212: LD_VAR 0 5
69216: PPUSH
69217: CALL_OW 77
69221: ST_TO_ADDR
// end ;
69222: LD_VAR 0 3
69226: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69227: LD_INT 0
69229: PPUSH
69230: PPUSH
// task := GetTaskList ( mech ) ;
69231: LD_ADDR_VAR 0 4
69235: PUSH
69236: LD_VAR 0 1
69240: PPUSH
69241: CALL_OW 437
69245: ST_TO_ADDR
// if not task then
69246: LD_VAR 0 4
69250: NOT
69251: IFFALSE 69255
// exit ;
69253: GO 69297
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69255: LD_ADDR_VAR 0 3
69259: PUSH
69260: LD_VAR 0 4
69264: PUSH
69265: LD_INT 1
69267: ARRAY
69268: PUSH
69269: LD_INT 1
69271: ARRAY
69272: PUSH
69273: LD_STRING r
69275: EQUAL
69276: PUSH
69277: LD_VAR 0 4
69281: PUSH
69282: LD_INT 1
69284: ARRAY
69285: PUSH
69286: LD_INT 4
69288: ARRAY
69289: PUSH
69290: LD_VAR 0 2
69294: EQUAL
69295: AND
69296: ST_TO_ADDR
// end ;
69297: LD_VAR 0 3
69301: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69302: LD_INT 0
69304: PPUSH
// SetDir ( unit , d ) ;
69305: LD_VAR 0 1
69309: PPUSH
69310: LD_VAR 0 4
69314: PPUSH
69315: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69319: LD_VAR 0 1
69323: PPUSH
69324: LD_VAR 0 2
69328: PPUSH
69329: LD_VAR 0 3
69333: PPUSH
69334: LD_VAR 0 5
69338: PPUSH
69339: CALL_OW 48
// end ;
69343: LD_VAR 0 6
69347: RET
// export function ToNaturalNumber ( number ) ; begin
69348: LD_INT 0
69350: PPUSH
// result := number div 1 ;
69351: LD_ADDR_VAR 0 2
69355: PUSH
69356: LD_VAR 0 1
69360: PUSH
69361: LD_INT 1
69363: DIV
69364: ST_TO_ADDR
// if number < 0 then
69365: LD_VAR 0 1
69369: PUSH
69370: LD_INT 0
69372: LESS
69373: IFFALSE 69383
// result := 0 ;
69375: LD_ADDR_VAR 0 2
69379: PUSH
69380: LD_INT 0
69382: ST_TO_ADDR
// end ;
69383: LD_VAR 0 2
69387: RET
// export function SortByClass ( units , class ) ; var un ; begin
69388: LD_INT 0
69390: PPUSH
69391: PPUSH
// if not units or not class then
69392: LD_VAR 0 1
69396: NOT
69397: PUSH
69398: LD_VAR 0 2
69402: NOT
69403: OR
69404: IFFALSE 69408
// exit ;
69406: GO 69503
// result := [ ] ;
69408: LD_ADDR_VAR 0 3
69412: PUSH
69413: EMPTY
69414: ST_TO_ADDR
// for un in units do
69415: LD_ADDR_VAR 0 4
69419: PUSH
69420: LD_VAR 0 1
69424: PUSH
69425: FOR_IN
69426: IFFALSE 69501
// if GetClass ( un ) = class then
69428: LD_VAR 0 4
69432: PPUSH
69433: CALL_OW 257
69437: PUSH
69438: LD_VAR 0 2
69442: EQUAL
69443: IFFALSE 69470
// result := Insert ( result , 1 , un ) else
69445: LD_ADDR_VAR 0 3
69449: PUSH
69450: LD_VAR 0 3
69454: PPUSH
69455: LD_INT 1
69457: PPUSH
69458: LD_VAR 0 4
69462: PPUSH
69463: CALL_OW 2
69467: ST_TO_ADDR
69468: GO 69499
// result := Replace ( result , result + 1 , un ) ;
69470: LD_ADDR_VAR 0 3
69474: PUSH
69475: LD_VAR 0 3
69479: PPUSH
69480: LD_VAR 0 3
69484: PUSH
69485: LD_INT 1
69487: PLUS
69488: PPUSH
69489: LD_VAR 0 4
69493: PPUSH
69494: CALL_OW 1
69498: ST_TO_ADDR
69499: GO 69425
69501: POP
69502: POP
// end ;
69503: LD_VAR 0 3
69507: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69508: LD_INT 0
69510: PPUSH
69511: PPUSH
69512: PPUSH
69513: PPUSH
69514: PPUSH
69515: PPUSH
69516: PPUSH
// result := [ ] ;
69517: LD_ADDR_VAR 0 4
69521: PUSH
69522: EMPTY
69523: ST_TO_ADDR
// if x - r < 0 then
69524: LD_VAR 0 1
69528: PUSH
69529: LD_VAR 0 3
69533: MINUS
69534: PUSH
69535: LD_INT 0
69537: LESS
69538: IFFALSE 69550
// min_x := 0 else
69540: LD_ADDR_VAR 0 8
69544: PUSH
69545: LD_INT 0
69547: ST_TO_ADDR
69548: GO 69566
// min_x := x - r ;
69550: LD_ADDR_VAR 0 8
69554: PUSH
69555: LD_VAR 0 1
69559: PUSH
69560: LD_VAR 0 3
69564: MINUS
69565: ST_TO_ADDR
// if y - r < 0 then
69566: LD_VAR 0 2
69570: PUSH
69571: LD_VAR 0 3
69575: MINUS
69576: PUSH
69577: LD_INT 0
69579: LESS
69580: IFFALSE 69592
// min_y := 0 else
69582: LD_ADDR_VAR 0 7
69586: PUSH
69587: LD_INT 0
69589: ST_TO_ADDR
69590: GO 69608
// min_y := y - r ;
69592: LD_ADDR_VAR 0 7
69596: PUSH
69597: LD_VAR 0 2
69601: PUSH
69602: LD_VAR 0 3
69606: MINUS
69607: ST_TO_ADDR
// max_x := x + r ;
69608: LD_ADDR_VAR 0 9
69612: PUSH
69613: LD_VAR 0 1
69617: PUSH
69618: LD_VAR 0 3
69622: PLUS
69623: ST_TO_ADDR
// max_y := y + r ;
69624: LD_ADDR_VAR 0 10
69628: PUSH
69629: LD_VAR 0 2
69633: PUSH
69634: LD_VAR 0 3
69638: PLUS
69639: ST_TO_ADDR
// for _x = min_x to max_x do
69640: LD_ADDR_VAR 0 5
69644: PUSH
69645: DOUBLE
69646: LD_VAR 0 8
69650: DEC
69651: ST_TO_ADDR
69652: LD_VAR 0 9
69656: PUSH
69657: FOR_TO
69658: IFFALSE 69759
// for _y = min_y to max_y do
69660: LD_ADDR_VAR 0 6
69664: PUSH
69665: DOUBLE
69666: LD_VAR 0 7
69670: DEC
69671: ST_TO_ADDR
69672: LD_VAR 0 10
69676: PUSH
69677: FOR_TO
69678: IFFALSE 69755
// begin if not ValidHex ( _x , _y ) then
69680: LD_VAR 0 5
69684: PPUSH
69685: LD_VAR 0 6
69689: PPUSH
69690: CALL_OW 488
69694: NOT
69695: IFFALSE 69699
// continue ;
69697: GO 69677
// if GetResourceTypeXY ( _x , _y ) then
69699: LD_VAR 0 5
69703: PPUSH
69704: LD_VAR 0 6
69708: PPUSH
69709: CALL_OW 283
69713: IFFALSE 69753
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69715: LD_ADDR_VAR 0 4
69719: PUSH
69720: LD_VAR 0 4
69724: PPUSH
69725: LD_VAR 0 4
69729: PUSH
69730: LD_INT 1
69732: PLUS
69733: PPUSH
69734: LD_VAR 0 5
69738: PUSH
69739: LD_VAR 0 6
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PPUSH
69748: CALL_OW 1
69752: ST_TO_ADDR
// end ;
69753: GO 69677
69755: POP
69756: POP
69757: GO 69657
69759: POP
69760: POP
// end ;
69761: LD_VAR 0 4
69765: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69766: LD_INT 0
69768: PPUSH
69769: PPUSH
69770: PPUSH
69771: PPUSH
69772: PPUSH
69773: PPUSH
69774: PPUSH
69775: PPUSH
// if not units then
69776: LD_VAR 0 1
69780: NOT
69781: IFFALSE 69785
// exit ;
69783: GO 70313
// result := UnitFilter ( units , [ f_ok ] ) ;
69785: LD_ADDR_VAR 0 3
69789: PUSH
69790: LD_VAR 0 1
69794: PPUSH
69795: LD_INT 50
69797: PUSH
69798: EMPTY
69799: LIST
69800: PPUSH
69801: CALL_OW 72
69805: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69806: LD_ADDR_VAR 0 8
69810: PUSH
69811: LD_VAR 0 1
69815: PUSH
69816: LD_INT 1
69818: ARRAY
69819: PPUSH
69820: CALL_OW 255
69824: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69825: LD_ADDR_VAR 0 10
69829: PUSH
69830: LD_INT 29
69832: PUSH
69833: LD_INT 91
69835: PUSH
69836: LD_INT 49
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: LIST
69843: ST_TO_ADDR
// if not result then
69844: LD_VAR 0 3
69848: NOT
69849: IFFALSE 69853
// exit ;
69851: GO 70313
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69853: LD_ADDR_VAR 0 5
69857: PUSH
69858: LD_INT 81
69860: PUSH
69861: LD_VAR 0 8
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PPUSH
69870: CALL_OW 69
69874: ST_TO_ADDR
// for i in result do
69875: LD_ADDR_VAR 0 4
69879: PUSH
69880: LD_VAR 0 3
69884: PUSH
69885: FOR_IN
69886: IFFALSE 70311
// begin tag := GetTag ( i ) + 1 ;
69888: LD_ADDR_VAR 0 9
69892: PUSH
69893: LD_VAR 0 4
69897: PPUSH
69898: CALL_OW 110
69902: PUSH
69903: LD_INT 1
69905: PLUS
69906: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
69907: LD_ADDR_VAR 0 7
69911: PUSH
69912: LD_VAR 0 4
69916: PPUSH
69917: CALL_OW 250
69921: PPUSH
69922: LD_VAR 0 4
69926: PPUSH
69927: CALL_OW 251
69931: PPUSH
69932: LD_INT 4
69934: PPUSH
69935: CALL 69508 0 3
69939: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
69940: LD_VAR 0 4
69944: PPUSH
69945: CALL_OW 247
69949: PUSH
69950: LD_INT 2
69952: EQUAL
69953: PUSH
69954: LD_VAR 0 7
69958: PUSH
69959: LD_INT 2
69961: GREATER
69962: AND
69963: PUSH
69964: LD_VAR 0 4
69968: PPUSH
69969: CALL_OW 264
69973: PUSH
69974: LD_VAR 0 10
69978: IN
69979: NOT
69980: AND
69981: IFFALSE 70020
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69983: LD_VAR 0 4
69987: PPUSH
69988: LD_VAR 0 7
69992: PUSH
69993: LD_INT 1
69995: ARRAY
69996: PUSH
69997: LD_INT 1
69999: ARRAY
70000: PPUSH
70001: LD_VAR 0 7
70005: PUSH
70006: LD_INT 1
70008: ARRAY
70009: PUSH
70010: LD_INT 2
70012: ARRAY
70013: PPUSH
70014: CALL_OW 116
70018: GO 70309
// if path > tag then
70020: LD_VAR 0 2
70024: PUSH
70025: LD_VAR 0 9
70029: GREATER
70030: IFFALSE 70238
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70032: LD_ADDR_VAR 0 6
70036: PUSH
70037: LD_VAR 0 5
70041: PPUSH
70042: LD_INT 91
70044: PUSH
70045: LD_VAR 0 4
70049: PUSH
70050: LD_INT 8
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: LIST
70057: PPUSH
70058: CALL_OW 72
70062: ST_TO_ADDR
// if nearEnemy then
70063: LD_VAR 0 6
70067: IFFALSE 70136
// begin if GetWeapon ( i ) = ru_time_lapser then
70069: LD_VAR 0 4
70073: PPUSH
70074: CALL_OW 264
70078: PUSH
70079: LD_INT 49
70081: EQUAL
70082: IFFALSE 70110
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70084: LD_VAR 0 4
70088: PPUSH
70089: LD_VAR 0 6
70093: PPUSH
70094: LD_VAR 0 4
70098: PPUSH
70099: CALL_OW 74
70103: PPUSH
70104: CALL_OW 112
70108: GO 70134
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70110: LD_VAR 0 4
70114: PPUSH
70115: LD_VAR 0 6
70119: PPUSH
70120: LD_VAR 0 4
70124: PPUSH
70125: CALL_OW 74
70129: PPUSH
70130: CALL 71384 0 2
// end else
70134: GO 70236
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70136: LD_VAR 0 4
70140: PPUSH
70141: LD_VAR 0 2
70145: PUSH
70146: LD_VAR 0 9
70150: ARRAY
70151: PUSH
70152: LD_INT 1
70154: ARRAY
70155: PPUSH
70156: LD_VAR 0 2
70160: PUSH
70161: LD_VAR 0 9
70165: ARRAY
70166: PUSH
70167: LD_INT 2
70169: ARRAY
70170: PPUSH
70171: CALL_OW 297
70175: PUSH
70176: LD_INT 6
70178: GREATER
70179: IFFALSE 70222
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70181: LD_VAR 0 4
70185: PPUSH
70186: LD_VAR 0 2
70190: PUSH
70191: LD_VAR 0 9
70195: ARRAY
70196: PUSH
70197: LD_INT 1
70199: ARRAY
70200: PPUSH
70201: LD_VAR 0 2
70205: PUSH
70206: LD_VAR 0 9
70210: ARRAY
70211: PUSH
70212: LD_INT 2
70214: ARRAY
70215: PPUSH
70216: CALL_OW 114
70220: GO 70236
// SetTag ( i , tag ) ;
70222: LD_VAR 0 4
70226: PPUSH
70227: LD_VAR 0 9
70231: PPUSH
70232: CALL_OW 109
// end else
70236: GO 70309
// if enemy then
70238: LD_VAR 0 5
70242: IFFALSE 70309
// begin if GetWeapon ( i ) = ru_time_lapser then
70244: LD_VAR 0 4
70248: PPUSH
70249: CALL_OW 264
70253: PUSH
70254: LD_INT 49
70256: EQUAL
70257: IFFALSE 70285
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70259: LD_VAR 0 4
70263: PPUSH
70264: LD_VAR 0 5
70268: PPUSH
70269: LD_VAR 0 4
70273: PPUSH
70274: CALL_OW 74
70278: PPUSH
70279: CALL_OW 112
70283: GO 70309
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70285: LD_VAR 0 4
70289: PPUSH
70290: LD_VAR 0 5
70294: PPUSH
70295: LD_VAR 0 4
70299: PPUSH
70300: CALL_OW 74
70304: PPUSH
70305: CALL 71384 0 2
// end ; end ;
70309: GO 69885
70311: POP
70312: POP
// end ;
70313: LD_VAR 0 3
70317: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70318: LD_INT 0
70320: PPUSH
70321: PPUSH
70322: PPUSH
// if not unit or IsInUnit ( unit ) then
70323: LD_VAR 0 1
70327: NOT
70328: PUSH
70329: LD_VAR 0 1
70333: PPUSH
70334: CALL_OW 310
70338: OR
70339: IFFALSE 70343
// exit ;
70341: GO 70434
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70343: LD_ADDR_VAR 0 4
70347: PUSH
70348: LD_VAR 0 1
70352: PPUSH
70353: CALL_OW 250
70357: PPUSH
70358: LD_VAR 0 2
70362: PPUSH
70363: LD_INT 1
70365: PPUSH
70366: CALL_OW 272
70370: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70371: LD_ADDR_VAR 0 5
70375: PUSH
70376: LD_VAR 0 1
70380: PPUSH
70381: CALL_OW 251
70385: PPUSH
70386: LD_VAR 0 2
70390: PPUSH
70391: LD_INT 1
70393: PPUSH
70394: CALL_OW 273
70398: ST_TO_ADDR
// if ValidHex ( x , y ) then
70399: LD_VAR 0 4
70403: PPUSH
70404: LD_VAR 0 5
70408: PPUSH
70409: CALL_OW 488
70413: IFFALSE 70434
// ComTurnXY ( unit , x , y ) ;
70415: LD_VAR 0 1
70419: PPUSH
70420: LD_VAR 0 4
70424: PPUSH
70425: LD_VAR 0 5
70429: PPUSH
70430: CALL_OW 118
// end ;
70434: LD_VAR 0 3
70438: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70439: LD_INT 0
70441: PPUSH
70442: PPUSH
// result := false ;
70443: LD_ADDR_VAR 0 3
70447: PUSH
70448: LD_INT 0
70450: ST_TO_ADDR
// if not units then
70451: LD_VAR 0 2
70455: NOT
70456: IFFALSE 70460
// exit ;
70458: GO 70505
// for i in units do
70460: LD_ADDR_VAR 0 4
70464: PUSH
70465: LD_VAR 0 2
70469: PUSH
70470: FOR_IN
70471: IFFALSE 70503
// if See ( side , i ) then
70473: LD_VAR 0 1
70477: PPUSH
70478: LD_VAR 0 4
70482: PPUSH
70483: CALL_OW 292
70487: IFFALSE 70501
// begin result := true ;
70489: LD_ADDR_VAR 0 3
70493: PUSH
70494: LD_INT 1
70496: ST_TO_ADDR
// exit ;
70497: POP
70498: POP
70499: GO 70505
// end ;
70501: GO 70470
70503: POP
70504: POP
// end ;
70505: LD_VAR 0 3
70509: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70510: LD_INT 0
70512: PPUSH
70513: PPUSH
70514: PPUSH
70515: PPUSH
// if not unit or not points then
70516: LD_VAR 0 1
70520: NOT
70521: PUSH
70522: LD_VAR 0 2
70526: NOT
70527: OR
70528: IFFALSE 70532
// exit ;
70530: GO 70622
// dist := 99999 ;
70532: LD_ADDR_VAR 0 5
70536: PUSH
70537: LD_INT 99999
70539: ST_TO_ADDR
// for i in points do
70540: LD_ADDR_VAR 0 4
70544: PUSH
70545: LD_VAR 0 2
70549: PUSH
70550: FOR_IN
70551: IFFALSE 70620
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70553: LD_ADDR_VAR 0 6
70557: PUSH
70558: LD_VAR 0 1
70562: PPUSH
70563: LD_VAR 0 4
70567: PUSH
70568: LD_INT 1
70570: ARRAY
70571: PPUSH
70572: LD_VAR 0 4
70576: PUSH
70577: LD_INT 2
70579: ARRAY
70580: PPUSH
70581: CALL_OW 297
70585: ST_TO_ADDR
// if tmpDist < dist then
70586: LD_VAR 0 6
70590: PUSH
70591: LD_VAR 0 5
70595: LESS
70596: IFFALSE 70618
// begin result := i ;
70598: LD_ADDR_VAR 0 3
70602: PUSH
70603: LD_VAR 0 4
70607: ST_TO_ADDR
// dist := tmpDist ;
70608: LD_ADDR_VAR 0 5
70612: PUSH
70613: LD_VAR 0 6
70617: ST_TO_ADDR
// end ; end ;
70618: GO 70550
70620: POP
70621: POP
// end ;
70622: LD_VAR 0 3
70626: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70627: LD_INT 0
70629: PPUSH
// uc_side := side ;
70630: LD_ADDR_OWVAR 20
70634: PUSH
70635: LD_VAR 0 1
70639: ST_TO_ADDR
// uc_nation := 3 ;
70640: LD_ADDR_OWVAR 21
70644: PUSH
70645: LD_INT 3
70647: ST_TO_ADDR
// vc_chassis := 25 ;
70648: LD_ADDR_OWVAR 37
70652: PUSH
70653: LD_INT 25
70655: ST_TO_ADDR
// vc_engine := engine_siberite ;
70656: LD_ADDR_OWVAR 39
70660: PUSH
70661: LD_INT 3
70663: ST_TO_ADDR
// vc_control := control_computer ;
70664: LD_ADDR_OWVAR 38
70668: PUSH
70669: LD_INT 3
70671: ST_TO_ADDR
// vc_weapon := 59 ;
70672: LD_ADDR_OWVAR 40
70676: PUSH
70677: LD_INT 59
70679: ST_TO_ADDR
// result := CreateVehicle ;
70680: LD_ADDR_VAR 0 5
70684: PUSH
70685: CALL_OW 45
70689: ST_TO_ADDR
// SetDir ( result , d ) ;
70690: LD_VAR 0 5
70694: PPUSH
70695: LD_VAR 0 4
70699: PPUSH
70700: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70704: LD_VAR 0 5
70708: PPUSH
70709: LD_VAR 0 2
70713: PPUSH
70714: LD_VAR 0 3
70718: PPUSH
70719: LD_INT 0
70721: PPUSH
70722: CALL_OW 48
// end ;
70726: LD_VAR 0 5
70730: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70731: LD_INT 0
70733: PPUSH
70734: PPUSH
70735: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70736: LD_ADDR_VAR 0 2
70740: PUSH
70741: LD_INT 0
70743: PUSH
70744: LD_INT 0
70746: PUSH
70747: LD_INT 0
70749: PUSH
70750: LD_INT 0
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70759: LD_VAR 0 1
70763: NOT
70764: PUSH
70765: LD_VAR 0 1
70769: PPUSH
70770: CALL_OW 264
70774: PUSH
70775: LD_INT 12
70777: PUSH
70778: LD_INT 51
70780: PUSH
70781: LD_INT 32
70783: PUSH
70784: LD_INT 89
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: IN
70793: NOT
70794: OR
70795: IFFALSE 70799
// exit ;
70797: GO 70897
// for i := 1 to 3 do
70799: LD_ADDR_VAR 0 3
70803: PUSH
70804: DOUBLE
70805: LD_INT 1
70807: DEC
70808: ST_TO_ADDR
70809: LD_INT 3
70811: PUSH
70812: FOR_TO
70813: IFFALSE 70895
// begin tmp := GetCargo ( cargo , i ) ;
70815: LD_ADDR_VAR 0 4
70819: PUSH
70820: LD_VAR 0 1
70824: PPUSH
70825: LD_VAR 0 3
70829: PPUSH
70830: CALL_OW 289
70834: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70835: LD_ADDR_VAR 0 2
70839: PUSH
70840: LD_VAR 0 2
70844: PPUSH
70845: LD_VAR 0 3
70849: PPUSH
70850: LD_VAR 0 4
70854: PPUSH
70855: CALL_OW 1
70859: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70860: LD_ADDR_VAR 0 2
70864: PUSH
70865: LD_VAR 0 2
70869: PPUSH
70870: LD_INT 4
70872: PPUSH
70873: LD_VAR 0 2
70877: PUSH
70878: LD_INT 4
70880: ARRAY
70881: PUSH
70882: LD_VAR 0 4
70886: PLUS
70887: PPUSH
70888: CALL_OW 1
70892: ST_TO_ADDR
// end ;
70893: GO 70812
70895: POP
70896: POP
// end ;
70897: LD_VAR 0 2
70901: RET
// export function Length ( array ) ; begin
70902: LD_INT 0
70904: PPUSH
// result := array + 0 ;
70905: LD_ADDR_VAR 0 2
70909: PUSH
70910: LD_VAR 0 1
70914: PUSH
70915: LD_INT 0
70917: PLUS
70918: ST_TO_ADDR
// end ;
70919: LD_VAR 0 2
70923: RET
// export function PrepareArray ( array ) ; begin
70924: LD_INT 0
70926: PPUSH
// result := array diff 0 ;
70927: LD_ADDR_VAR 0 2
70931: PUSH
70932: LD_VAR 0 1
70936: PUSH
70937: LD_INT 0
70939: DIFF
70940: ST_TO_ADDR
// if not result [ 1 ] then
70941: LD_VAR 0 2
70945: PUSH
70946: LD_INT 1
70948: ARRAY
70949: NOT
70950: IFFALSE 70970
// result := Delete ( result , 1 ) ;
70952: LD_ADDR_VAR 0 2
70956: PUSH
70957: LD_VAR 0 2
70961: PPUSH
70962: LD_INT 1
70964: PPUSH
70965: CALL_OW 3
70969: ST_TO_ADDR
// end ;
70970: LD_VAR 0 2
70974: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70975: LD_INT 0
70977: PPUSH
70978: PPUSH
70979: PPUSH
70980: PPUSH
// sibRocketRange := 25 ;
70981: LD_ADDR_VAR 0 6
70985: PUSH
70986: LD_INT 25
70988: ST_TO_ADDR
// result := false ;
70989: LD_ADDR_VAR 0 4
70993: PUSH
70994: LD_INT 0
70996: ST_TO_ADDR
// for i := 0 to 5 do
70997: LD_ADDR_VAR 0 5
71001: PUSH
71002: DOUBLE
71003: LD_INT 0
71005: DEC
71006: ST_TO_ADDR
71007: LD_INT 5
71009: PUSH
71010: FOR_TO
71011: IFFALSE 71078
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71013: LD_VAR 0 1
71017: PPUSH
71018: LD_VAR 0 5
71022: PPUSH
71023: LD_VAR 0 6
71027: PPUSH
71028: CALL_OW 272
71032: PPUSH
71033: LD_VAR 0 2
71037: PPUSH
71038: LD_VAR 0 5
71042: PPUSH
71043: LD_VAR 0 6
71047: PPUSH
71048: CALL_OW 273
71052: PPUSH
71053: LD_VAR 0 3
71057: PPUSH
71058: CALL_OW 309
71062: IFFALSE 71076
// begin result := true ;
71064: LD_ADDR_VAR 0 4
71068: PUSH
71069: LD_INT 1
71071: ST_TO_ADDR
// exit ;
71072: POP
71073: POP
71074: GO 71080
// end ;
71076: GO 71010
71078: POP
71079: POP
// end ;
71080: LD_VAR 0 4
71084: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
71085: LD_INT 0
71087: PPUSH
71088: PPUSH
71089: PPUSH
// if btype = b_depot then
71090: LD_VAR 0 2
71094: PUSH
71095: LD_INT 0
71097: EQUAL
71098: IFFALSE 71110
// begin result := true ;
71100: LD_ADDR_VAR 0 3
71104: PUSH
71105: LD_INT 1
71107: ST_TO_ADDR
// exit ;
71108: GO 71226
// end ; pom := GetBase ( depot ) ;
71110: LD_ADDR_VAR 0 4
71114: PUSH
71115: LD_VAR 0 1
71119: PPUSH
71120: CALL_OW 274
71124: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
71125: LD_ADDR_VAR 0 5
71129: PUSH
71130: LD_VAR 0 2
71134: PPUSH
71135: LD_VAR 0 1
71139: PPUSH
71140: CALL_OW 248
71144: PPUSH
71145: CALL_OW 450
71149: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
71150: LD_ADDR_VAR 0 3
71154: PUSH
71155: LD_VAR 0 4
71159: PPUSH
71160: LD_INT 1
71162: PPUSH
71163: CALL_OW 275
71167: PUSH
71168: LD_VAR 0 5
71172: PUSH
71173: LD_INT 1
71175: ARRAY
71176: GREATEREQUAL
71177: PUSH
71178: LD_VAR 0 4
71182: PPUSH
71183: LD_INT 2
71185: PPUSH
71186: CALL_OW 275
71190: PUSH
71191: LD_VAR 0 5
71195: PUSH
71196: LD_INT 2
71198: ARRAY
71199: GREATEREQUAL
71200: AND
71201: PUSH
71202: LD_VAR 0 4
71206: PPUSH
71207: LD_INT 3
71209: PPUSH
71210: CALL_OW 275
71214: PUSH
71215: LD_VAR 0 5
71219: PUSH
71220: LD_INT 3
71222: ARRAY
71223: GREATEREQUAL
71224: AND
71225: ST_TO_ADDR
// end ;
71226: LD_VAR 0 3
71230: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71231: LD_INT 0
71233: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71234: LD_VAR 0 1
71238: PPUSH
71239: LD_VAR 0 2
71243: PPUSH
71244: LD_INT 0
71246: PPUSH
71247: LD_INT 0
71249: PPUSH
71250: LD_INT 1
71252: PPUSH
71253: LD_INT 0
71255: PPUSH
71256: CALL_OW 587
// end ;
71260: LD_VAR 0 3
71264: RET
// export function CenterOnNow ( unit ) ; begin
71265: LD_INT 0
71267: PPUSH
// result := IsInUnit ( unit ) ;
71268: LD_ADDR_VAR 0 2
71272: PUSH
71273: LD_VAR 0 1
71277: PPUSH
71278: CALL_OW 310
71282: ST_TO_ADDR
// if not result then
71283: LD_VAR 0 2
71287: NOT
71288: IFFALSE 71300
// result := unit ;
71290: LD_ADDR_VAR 0 2
71294: PUSH
71295: LD_VAR 0 1
71299: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71300: LD_VAR 0 1
71304: PPUSH
71305: CALL_OW 87
// end ;
71309: LD_VAR 0 2
71313: RET
// export function ComMoveHex ( unit , hex ) ; begin
71314: LD_INT 0
71316: PPUSH
// if not hex then
71317: LD_VAR 0 2
71321: NOT
71322: IFFALSE 71326
// exit ;
71324: GO 71379
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71326: LD_VAR 0 2
71330: PUSH
71331: LD_INT 1
71333: ARRAY
71334: PPUSH
71335: LD_VAR 0 2
71339: PUSH
71340: LD_INT 2
71342: ARRAY
71343: PPUSH
71344: CALL_OW 428
71348: IFFALSE 71352
// exit ;
71350: GO 71379
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71352: LD_VAR 0 1
71356: PPUSH
71357: LD_VAR 0 2
71361: PUSH
71362: LD_INT 1
71364: ARRAY
71365: PPUSH
71366: LD_VAR 0 2
71370: PUSH
71371: LD_INT 2
71373: ARRAY
71374: PPUSH
71375: CALL_OW 111
// end ;
71379: LD_VAR 0 3
71383: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71384: LD_INT 0
71386: PPUSH
71387: PPUSH
71388: PPUSH
// if not unit or not enemy then
71389: LD_VAR 0 1
71393: NOT
71394: PUSH
71395: LD_VAR 0 2
71399: NOT
71400: OR
71401: IFFALSE 71405
// exit ;
71403: GO 71529
// x := GetX ( enemy ) ;
71405: LD_ADDR_VAR 0 4
71409: PUSH
71410: LD_VAR 0 2
71414: PPUSH
71415: CALL_OW 250
71419: ST_TO_ADDR
// y := GetY ( enemy ) ;
71420: LD_ADDR_VAR 0 5
71424: PUSH
71425: LD_VAR 0 2
71429: PPUSH
71430: CALL_OW 251
71434: ST_TO_ADDR
// if ValidHex ( x , y ) then
71435: LD_VAR 0 4
71439: PPUSH
71440: LD_VAR 0 5
71444: PPUSH
71445: CALL_OW 488
71449: IFFALSE 71529
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
71451: LD_VAR 0 2
71455: PPUSH
71456: CALL_OW 247
71460: PUSH
71461: LD_INT 3
71463: PUSH
71464: LD_INT 2
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: IN
71471: PUSH
71472: LD_VAR 0 1
71476: PPUSH
71477: CALL_OW 255
71481: PPUSH
71482: LD_VAR 0 2
71486: PPUSH
71487: CALL_OW 292
71491: OR
71492: IFFALSE 71510
// ComAttackUnit ( unit , enemy ) else
71494: LD_VAR 0 1
71498: PPUSH
71499: LD_VAR 0 2
71503: PPUSH
71504: CALL_OW 115
71508: GO 71529
// ComAgressiveMove ( unit , x , y ) ;
71510: LD_VAR 0 1
71514: PPUSH
71515: LD_VAR 0 4
71519: PPUSH
71520: LD_VAR 0 5
71524: PPUSH
71525: CALL_OW 114
// end ;
71529: LD_VAR 0 3
71533: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
71534: LD_INT 0
71536: PPUSH
71537: PPUSH
71538: PPUSH
// list := AreaToList ( area , 0 ) ;
71539: LD_ADDR_VAR 0 5
71543: PUSH
71544: LD_VAR 0 1
71548: PPUSH
71549: LD_INT 0
71551: PPUSH
71552: CALL_OW 517
71556: ST_TO_ADDR
// if not list then
71557: LD_VAR 0 5
71561: NOT
71562: IFFALSE 71566
// exit ;
71564: GO 71696
// if all then
71566: LD_VAR 0 2
71570: IFFALSE 71658
// begin for i := 1 to list [ 1 ] do
71572: LD_ADDR_VAR 0 4
71576: PUSH
71577: DOUBLE
71578: LD_INT 1
71580: DEC
71581: ST_TO_ADDR
71582: LD_VAR 0 5
71586: PUSH
71587: LD_INT 1
71589: ARRAY
71590: PUSH
71591: FOR_TO
71592: IFFALSE 71654
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
71594: LD_ADDR_VAR 0 3
71598: PUSH
71599: LD_VAR 0 3
71603: PPUSH
71604: LD_VAR 0 3
71608: PUSH
71609: LD_INT 1
71611: PLUS
71612: PPUSH
71613: LD_VAR 0 5
71617: PUSH
71618: LD_INT 1
71620: ARRAY
71621: PUSH
71622: LD_VAR 0 4
71626: ARRAY
71627: PUSH
71628: LD_VAR 0 5
71632: PUSH
71633: LD_INT 2
71635: ARRAY
71636: PUSH
71637: LD_VAR 0 4
71641: ARRAY
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PPUSH
71647: CALL_OW 1
71651: ST_TO_ADDR
71652: GO 71591
71654: POP
71655: POP
// exit ;
71656: GO 71696
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
71658: LD_ADDR_VAR 0 3
71662: PUSH
71663: LD_VAR 0 5
71667: PUSH
71668: LD_INT 1
71670: ARRAY
71671: PUSH
71672: LD_INT 1
71674: ARRAY
71675: PUSH
71676: LD_VAR 0 5
71680: PUSH
71681: LD_INT 2
71683: ARRAY
71684: PUSH
71685: LD_INT 1
71687: ARRAY
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: EMPTY
71694: LIST
71695: ST_TO_ADDR
// end ;
71696: LD_VAR 0 3
71700: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
71701: LD_INT 0
71703: PPUSH
71704: PPUSH
// list := AreaToList ( area , 0 ) ;
71705: LD_ADDR_VAR 0 4
71709: PUSH
71710: LD_VAR 0 1
71714: PPUSH
71715: LD_INT 0
71717: PPUSH
71718: CALL_OW 517
71722: ST_TO_ADDR
// if not list then
71723: LD_VAR 0 4
71727: NOT
71728: IFFALSE 71732
// exit ;
71730: GO 71773
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
71732: LD_ADDR_VAR 0 3
71736: PUSH
71737: LD_VAR 0 4
71741: PUSH
71742: LD_INT 1
71744: ARRAY
71745: PUSH
71746: LD_INT 1
71748: ARRAY
71749: PUSH
71750: LD_VAR 0 4
71754: PUSH
71755: LD_INT 2
71757: ARRAY
71758: PUSH
71759: LD_INT 1
71761: ARRAY
71762: PUSH
71763: LD_VAR 0 2
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: LIST
71772: ST_TO_ADDR
// end ;
71773: LD_VAR 0 3
71777: RET
// export function First ( array ) ; begin
71778: LD_INT 0
71780: PPUSH
// if not array then
71781: LD_VAR 0 1
71785: NOT
71786: IFFALSE 71790
// exit ;
71788: GO 71804
// result := array [ 1 ] ;
71790: LD_ADDR_VAR 0 2
71794: PUSH
71795: LD_VAR 0 1
71799: PUSH
71800: LD_INT 1
71802: ARRAY
71803: ST_TO_ADDR
// end ;
71804: LD_VAR 0 2
71808: RET
// export function Last ( array ) ; begin
71809: LD_INT 0
71811: PPUSH
// if not array then
71812: LD_VAR 0 1
71816: NOT
71817: IFFALSE 71821
// exit ;
71819: GO 71837
// result := array [ array ] ;
71821: LD_ADDR_VAR 0 2
71825: PUSH
71826: LD_VAR 0 1
71830: PUSH
71831: LD_VAR 0 1
71835: ARRAY
71836: ST_TO_ADDR
// end ;
71837: LD_VAR 0 2
71841: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
71842: LD_INT 0
71844: PPUSH
71845: PPUSH
// result := [ ] ;
71846: LD_ADDR_VAR 0 5
71850: PUSH
71851: EMPTY
71852: ST_TO_ADDR
// if not array then
71853: LD_VAR 0 1
71857: NOT
71858: IFFALSE 71862
// exit ;
71860: GO 71974
// for i := 1 to array do
71862: LD_ADDR_VAR 0 6
71866: PUSH
71867: DOUBLE
71868: LD_INT 1
71870: DEC
71871: ST_TO_ADDR
71872: LD_VAR 0 1
71876: PUSH
71877: FOR_TO
71878: IFFALSE 71972
// if array [ i ] [ index ] = value then
71880: LD_VAR 0 1
71884: PUSH
71885: LD_VAR 0 6
71889: ARRAY
71890: PUSH
71891: LD_VAR 0 2
71895: ARRAY
71896: PUSH
71897: LD_VAR 0 3
71901: EQUAL
71902: IFFALSE 71970
// begin if indexColumn then
71904: LD_VAR 0 4
71908: IFFALSE 71944
// result := Join ( result , array [ i ] [ indexColumn ] ) else
71910: LD_ADDR_VAR 0 5
71914: PUSH
71915: LD_VAR 0 5
71919: PPUSH
71920: LD_VAR 0 1
71924: PUSH
71925: LD_VAR 0 6
71929: ARRAY
71930: PUSH
71931: LD_VAR 0 4
71935: ARRAY
71936: PPUSH
71937: CALL 67162 0 2
71941: ST_TO_ADDR
71942: GO 71970
// result := Join ( result , array [ i ] ) ;
71944: LD_ADDR_VAR 0 5
71948: PUSH
71949: LD_VAR 0 5
71953: PPUSH
71954: LD_VAR 0 1
71958: PUSH
71959: LD_VAR 0 6
71963: ARRAY
71964: PPUSH
71965: CALL 67162 0 2
71969: ST_TO_ADDR
// end ;
71970: GO 71877
71972: POP
71973: POP
// end ;
71974: LD_VAR 0 5
71978: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
71979: LD_INT 0
71981: PPUSH
// if not vehicles or not parkingPoint then
71982: LD_VAR 0 1
71986: NOT
71987: PUSH
71988: LD_VAR 0 2
71992: NOT
71993: OR
71994: IFFALSE 71998
// exit ;
71996: GO 72096
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
71998: LD_ADDR_VAR 0 1
72002: PUSH
72003: LD_VAR 0 1
72007: PPUSH
72008: LD_INT 50
72010: PUSH
72011: EMPTY
72012: LIST
72013: PUSH
72014: LD_INT 3
72016: PUSH
72017: LD_INT 92
72019: PUSH
72020: LD_VAR 0 2
72024: PUSH
72025: LD_INT 1
72027: ARRAY
72028: PUSH
72029: LD_VAR 0 2
72033: PUSH
72034: LD_INT 2
72036: ARRAY
72037: PUSH
72038: LD_INT 8
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: LIST
72045: LIST
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: PPUSH
72055: CALL_OW 72
72059: ST_TO_ADDR
// if not vehicles then
72060: LD_VAR 0 1
72064: NOT
72065: IFFALSE 72069
// exit ;
72067: GO 72096
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
72069: LD_VAR 0 1
72073: PPUSH
72074: LD_VAR 0 2
72078: PUSH
72079: LD_INT 1
72081: ARRAY
72082: PPUSH
72083: LD_VAR 0 2
72087: PUSH
72088: LD_INT 2
72090: ARRAY
72091: PPUSH
72092: CALL_OW 111
// end ;
72096: LD_VAR 0 3
72100: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
72101: LD_INT 0
72103: PPUSH
72104: PPUSH
72105: PPUSH
// if not side or not area then
72106: LD_VAR 0 1
72110: NOT
72111: PUSH
72112: LD_VAR 0 2
72116: NOT
72117: OR
72118: IFFALSE 72122
// exit ;
72120: GO 72241
// tmp := AreaToList ( area , 0 ) ;
72122: LD_ADDR_VAR 0 5
72126: PUSH
72127: LD_VAR 0 2
72131: PPUSH
72132: LD_INT 0
72134: PPUSH
72135: CALL_OW 517
72139: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
72140: LD_ADDR_VAR 0 4
72144: PUSH
72145: DOUBLE
72146: LD_INT 1
72148: DEC
72149: ST_TO_ADDR
72150: LD_VAR 0 5
72154: PUSH
72155: LD_INT 1
72157: ARRAY
72158: PUSH
72159: FOR_TO
72160: IFFALSE 72239
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
72162: LD_VAR 0 5
72166: PUSH
72167: LD_INT 1
72169: ARRAY
72170: PUSH
72171: LD_VAR 0 4
72175: ARRAY
72176: PPUSH
72177: LD_VAR 0 5
72181: PUSH
72182: LD_INT 2
72184: ARRAY
72185: PUSH
72186: LD_VAR 0 4
72190: ARRAY
72191: PPUSH
72192: CALL_OW 351
72196: IFFALSE 72237
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
72198: LD_VAR 0 5
72202: PUSH
72203: LD_INT 1
72205: ARRAY
72206: PUSH
72207: LD_VAR 0 4
72211: ARRAY
72212: PPUSH
72213: LD_VAR 0 5
72217: PUSH
72218: LD_INT 2
72220: ARRAY
72221: PUSH
72222: LD_VAR 0 4
72226: ARRAY
72227: PPUSH
72228: LD_VAR 0 1
72232: PPUSH
72233: CALL_OW 244
// end ;
72237: GO 72159
72239: POP
72240: POP
// end ; end_of_file
72241: LD_VAR 0 3
72245: RET
// export globalGameSaveCounter ; every 0 0$1 do
72246: GO 72248
72248: DISABLE
// begin enable ;
72249: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
72250: LD_STRING updateTimer(
72252: PUSH
72253: LD_OWVAR 1
72257: STR
72258: PUSH
72259: LD_STRING );
72261: STR
72262: PPUSH
72263: CALL_OW 559
// end ;
72267: END
// every 0 0$1 do
72268: GO 72270
72270: DISABLE
// begin globalGameSaveCounter := 0 ;
72271: LD_ADDR_EXP 74
72275: PUSH
72276: LD_INT 0
72278: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
72279: LD_STRING setGameSaveCounter(0)
72281: PPUSH
72282: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
72286: LD_STRING initStreamRollete();
72288: PPUSH
72289: CALL_OW 559
// InitStreamMode ;
72293: CALL 73636 0 0
// DefineStreamItems ( false ) ;
72297: LD_INT 0
72299: PPUSH
72300: CALL 74100 0 1
// end ;
72304: END
// export function SOS_MapStart ( ) ; begin
72305: LD_INT 0
72307: PPUSH
// if streamModeActive then
72308: LD_EXP 75
72312: IFFALSE 72321
// DefineStreamItems ( true ) ;
72314: LD_INT 1
72316: PPUSH
72317: CALL 74100 0 1
// UpdateLuaVariables ( ) ;
72321: CALL 72338 0 0
// UpdateFactoryWaypoints ( ) ;
72325: CALL 86969 0 0
// UpdateWarehouseGatheringPoints ( ) ;
72329: CALL 87226 0 0
// end ;
72333: LD_VAR 0 1
72337: RET
// function UpdateLuaVariables ( ) ; begin
72338: LD_INT 0
72340: PPUSH
// if globalGameSaveCounter then
72341: LD_EXP 74
72345: IFFALSE 72379
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
72347: LD_ADDR_EXP 74
72351: PUSH
72352: LD_EXP 74
72356: PPUSH
72357: CALL 68523 0 1
72361: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
72362: LD_STRING setGameSaveCounter(
72364: PUSH
72365: LD_EXP 74
72369: STR
72370: PUSH
72371: LD_STRING )
72373: STR
72374: PPUSH
72375: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
72379: LD_STRING setGameDifficulty(
72381: PUSH
72382: LD_OWVAR 67
72386: STR
72387: PUSH
72388: LD_STRING )
72390: STR
72391: PPUSH
72392: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
72396: LD_STRING displayDifficulty(
72398: PUSH
72399: LD_OWVAR 67
72403: STR
72404: PUSH
72405: LD_STRING )
72407: STR
72408: PPUSH
72409: CALL_OW 559
// end ;
72413: LD_VAR 0 1
72417: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
72418: LD_INT 0
72420: PPUSH
// if p2 = stream_mode then
72421: LD_VAR 0 2
72425: PUSH
72426: LD_INT 100
72428: EQUAL
72429: IFFALSE 73432
// begin if not StreamModeActive then
72431: LD_EXP 75
72435: NOT
72436: IFFALSE 72446
// StreamModeActive := true ;
72438: LD_ADDR_EXP 75
72442: PUSH
72443: LD_INT 1
72445: ST_TO_ADDR
// if p3 = 0 then
72446: LD_VAR 0 3
72450: PUSH
72451: LD_INT 0
72453: EQUAL
72454: IFFALSE 72460
// InitStreamMode ;
72456: CALL 73636 0 0
// if p3 = 1 then
72460: LD_VAR 0 3
72464: PUSH
72465: LD_INT 1
72467: EQUAL
72468: IFFALSE 72478
// sRocket := true ;
72470: LD_ADDR_EXP 80
72474: PUSH
72475: LD_INT 1
72477: ST_TO_ADDR
// if p3 = 2 then
72478: LD_VAR 0 3
72482: PUSH
72483: LD_INT 2
72485: EQUAL
72486: IFFALSE 72496
// sSpeed := true ;
72488: LD_ADDR_EXP 79
72492: PUSH
72493: LD_INT 1
72495: ST_TO_ADDR
// if p3 = 3 then
72496: LD_VAR 0 3
72500: PUSH
72501: LD_INT 3
72503: EQUAL
72504: IFFALSE 72514
// sEngine := true ;
72506: LD_ADDR_EXP 81
72510: PUSH
72511: LD_INT 1
72513: ST_TO_ADDR
// if p3 = 4 then
72514: LD_VAR 0 3
72518: PUSH
72519: LD_INT 4
72521: EQUAL
72522: IFFALSE 72532
// sSpec := true ;
72524: LD_ADDR_EXP 78
72528: PUSH
72529: LD_INT 1
72531: ST_TO_ADDR
// if p3 = 5 then
72532: LD_VAR 0 3
72536: PUSH
72537: LD_INT 5
72539: EQUAL
72540: IFFALSE 72550
// sLevel := true ;
72542: LD_ADDR_EXP 82
72546: PUSH
72547: LD_INT 1
72549: ST_TO_ADDR
// if p3 = 6 then
72550: LD_VAR 0 3
72554: PUSH
72555: LD_INT 6
72557: EQUAL
72558: IFFALSE 72568
// sArmoury := true ;
72560: LD_ADDR_EXP 83
72564: PUSH
72565: LD_INT 1
72567: ST_TO_ADDR
// if p3 = 7 then
72568: LD_VAR 0 3
72572: PUSH
72573: LD_INT 7
72575: EQUAL
72576: IFFALSE 72586
// sRadar := true ;
72578: LD_ADDR_EXP 84
72582: PUSH
72583: LD_INT 1
72585: ST_TO_ADDR
// if p3 = 8 then
72586: LD_VAR 0 3
72590: PUSH
72591: LD_INT 8
72593: EQUAL
72594: IFFALSE 72604
// sBunker := true ;
72596: LD_ADDR_EXP 85
72600: PUSH
72601: LD_INT 1
72603: ST_TO_ADDR
// if p3 = 9 then
72604: LD_VAR 0 3
72608: PUSH
72609: LD_INT 9
72611: EQUAL
72612: IFFALSE 72622
// sHack := true ;
72614: LD_ADDR_EXP 86
72618: PUSH
72619: LD_INT 1
72621: ST_TO_ADDR
// if p3 = 10 then
72622: LD_VAR 0 3
72626: PUSH
72627: LD_INT 10
72629: EQUAL
72630: IFFALSE 72640
// sFire := true ;
72632: LD_ADDR_EXP 87
72636: PUSH
72637: LD_INT 1
72639: ST_TO_ADDR
// if p3 = 11 then
72640: LD_VAR 0 3
72644: PUSH
72645: LD_INT 11
72647: EQUAL
72648: IFFALSE 72658
// sRefresh := true ;
72650: LD_ADDR_EXP 88
72654: PUSH
72655: LD_INT 1
72657: ST_TO_ADDR
// if p3 = 12 then
72658: LD_VAR 0 3
72662: PUSH
72663: LD_INT 12
72665: EQUAL
72666: IFFALSE 72676
// sExp := true ;
72668: LD_ADDR_EXP 89
72672: PUSH
72673: LD_INT 1
72675: ST_TO_ADDR
// if p3 = 13 then
72676: LD_VAR 0 3
72680: PUSH
72681: LD_INT 13
72683: EQUAL
72684: IFFALSE 72694
// sDepot := true ;
72686: LD_ADDR_EXP 90
72690: PUSH
72691: LD_INT 1
72693: ST_TO_ADDR
// if p3 = 14 then
72694: LD_VAR 0 3
72698: PUSH
72699: LD_INT 14
72701: EQUAL
72702: IFFALSE 72712
// sFlag := true ;
72704: LD_ADDR_EXP 91
72708: PUSH
72709: LD_INT 1
72711: ST_TO_ADDR
// if p3 = 15 then
72712: LD_VAR 0 3
72716: PUSH
72717: LD_INT 15
72719: EQUAL
72720: IFFALSE 72730
// sKamikadze := true ;
72722: LD_ADDR_EXP 99
72726: PUSH
72727: LD_INT 1
72729: ST_TO_ADDR
// if p3 = 16 then
72730: LD_VAR 0 3
72734: PUSH
72735: LD_INT 16
72737: EQUAL
72738: IFFALSE 72748
// sTroll := true ;
72740: LD_ADDR_EXP 100
72744: PUSH
72745: LD_INT 1
72747: ST_TO_ADDR
// if p3 = 17 then
72748: LD_VAR 0 3
72752: PUSH
72753: LD_INT 17
72755: EQUAL
72756: IFFALSE 72766
// sSlow := true ;
72758: LD_ADDR_EXP 101
72762: PUSH
72763: LD_INT 1
72765: ST_TO_ADDR
// if p3 = 18 then
72766: LD_VAR 0 3
72770: PUSH
72771: LD_INT 18
72773: EQUAL
72774: IFFALSE 72784
// sLack := true ;
72776: LD_ADDR_EXP 102
72780: PUSH
72781: LD_INT 1
72783: ST_TO_ADDR
// if p3 = 19 then
72784: LD_VAR 0 3
72788: PUSH
72789: LD_INT 19
72791: EQUAL
72792: IFFALSE 72802
// sTank := true ;
72794: LD_ADDR_EXP 104
72798: PUSH
72799: LD_INT 1
72801: ST_TO_ADDR
// if p3 = 20 then
72802: LD_VAR 0 3
72806: PUSH
72807: LD_INT 20
72809: EQUAL
72810: IFFALSE 72820
// sRemote := true ;
72812: LD_ADDR_EXP 105
72816: PUSH
72817: LD_INT 1
72819: ST_TO_ADDR
// if p3 = 21 then
72820: LD_VAR 0 3
72824: PUSH
72825: LD_INT 21
72827: EQUAL
72828: IFFALSE 72838
// sPowell := true ;
72830: LD_ADDR_EXP 106
72834: PUSH
72835: LD_INT 1
72837: ST_TO_ADDR
// if p3 = 22 then
72838: LD_VAR 0 3
72842: PUSH
72843: LD_INT 22
72845: EQUAL
72846: IFFALSE 72856
// sTeleport := true ;
72848: LD_ADDR_EXP 109
72852: PUSH
72853: LD_INT 1
72855: ST_TO_ADDR
// if p3 = 23 then
72856: LD_VAR 0 3
72860: PUSH
72861: LD_INT 23
72863: EQUAL
72864: IFFALSE 72874
// sOilTower := true ;
72866: LD_ADDR_EXP 111
72870: PUSH
72871: LD_INT 1
72873: ST_TO_ADDR
// if p3 = 24 then
72874: LD_VAR 0 3
72878: PUSH
72879: LD_INT 24
72881: EQUAL
72882: IFFALSE 72892
// sShovel := true ;
72884: LD_ADDR_EXP 112
72888: PUSH
72889: LD_INT 1
72891: ST_TO_ADDR
// if p3 = 25 then
72892: LD_VAR 0 3
72896: PUSH
72897: LD_INT 25
72899: EQUAL
72900: IFFALSE 72910
// sSheik := true ;
72902: LD_ADDR_EXP 113
72906: PUSH
72907: LD_INT 1
72909: ST_TO_ADDR
// if p3 = 26 then
72910: LD_VAR 0 3
72914: PUSH
72915: LD_INT 26
72917: EQUAL
72918: IFFALSE 72928
// sEarthquake := true ;
72920: LD_ADDR_EXP 115
72924: PUSH
72925: LD_INT 1
72927: ST_TO_ADDR
// if p3 = 27 then
72928: LD_VAR 0 3
72932: PUSH
72933: LD_INT 27
72935: EQUAL
72936: IFFALSE 72946
// sAI := true ;
72938: LD_ADDR_EXP 116
72942: PUSH
72943: LD_INT 1
72945: ST_TO_ADDR
// if p3 = 28 then
72946: LD_VAR 0 3
72950: PUSH
72951: LD_INT 28
72953: EQUAL
72954: IFFALSE 72964
// sCargo := true ;
72956: LD_ADDR_EXP 119
72960: PUSH
72961: LD_INT 1
72963: ST_TO_ADDR
// if p3 = 29 then
72964: LD_VAR 0 3
72968: PUSH
72969: LD_INT 29
72971: EQUAL
72972: IFFALSE 72982
// sDLaser := true ;
72974: LD_ADDR_EXP 120
72978: PUSH
72979: LD_INT 1
72981: ST_TO_ADDR
// if p3 = 30 then
72982: LD_VAR 0 3
72986: PUSH
72987: LD_INT 30
72989: EQUAL
72990: IFFALSE 73000
// sExchange := true ;
72992: LD_ADDR_EXP 121
72996: PUSH
72997: LD_INT 1
72999: ST_TO_ADDR
// if p3 = 31 then
73000: LD_VAR 0 3
73004: PUSH
73005: LD_INT 31
73007: EQUAL
73008: IFFALSE 73018
// sFac := true ;
73010: LD_ADDR_EXP 122
73014: PUSH
73015: LD_INT 1
73017: ST_TO_ADDR
// if p3 = 32 then
73018: LD_VAR 0 3
73022: PUSH
73023: LD_INT 32
73025: EQUAL
73026: IFFALSE 73036
// sPower := true ;
73028: LD_ADDR_EXP 123
73032: PUSH
73033: LD_INT 1
73035: ST_TO_ADDR
// if p3 = 33 then
73036: LD_VAR 0 3
73040: PUSH
73041: LD_INT 33
73043: EQUAL
73044: IFFALSE 73054
// sRandom := true ;
73046: LD_ADDR_EXP 124
73050: PUSH
73051: LD_INT 1
73053: ST_TO_ADDR
// if p3 = 34 then
73054: LD_VAR 0 3
73058: PUSH
73059: LD_INT 34
73061: EQUAL
73062: IFFALSE 73072
// sShield := true ;
73064: LD_ADDR_EXP 125
73068: PUSH
73069: LD_INT 1
73071: ST_TO_ADDR
// if p3 = 35 then
73072: LD_VAR 0 3
73076: PUSH
73077: LD_INT 35
73079: EQUAL
73080: IFFALSE 73090
// sTime := true ;
73082: LD_ADDR_EXP 126
73086: PUSH
73087: LD_INT 1
73089: ST_TO_ADDR
// if p3 = 36 then
73090: LD_VAR 0 3
73094: PUSH
73095: LD_INT 36
73097: EQUAL
73098: IFFALSE 73108
// sTools := true ;
73100: LD_ADDR_EXP 127
73104: PUSH
73105: LD_INT 1
73107: ST_TO_ADDR
// if p3 = 101 then
73108: LD_VAR 0 3
73112: PUSH
73113: LD_INT 101
73115: EQUAL
73116: IFFALSE 73126
// sSold := true ;
73118: LD_ADDR_EXP 92
73122: PUSH
73123: LD_INT 1
73125: ST_TO_ADDR
// if p3 = 102 then
73126: LD_VAR 0 3
73130: PUSH
73131: LD_INT 102
73133: EQUAL
73134: IFFALSE 73144
// sDiff := true ;
73136: LD_ADDR_EXP 93
73140: PUSH
73141: LD_INT 1
73143: ST_TO_ADDR
// if p3 = 103 then
73144: LD_VAR 0 3
73148: PUSH
73149: LD_INT 103
73151: EQUAL
73152: IFFALSE 73162
// sFog := true ;
73154: LD_ADDR_EXP 96
73158: PUSH
73159: LD_INT 1
73161: ST_TO_ADDR
// if p3 = 104 then
73162: LD_VAR 0 3
73166: PUSH
73167: LD_INT 104
73169: EQUAL
73170: IFFALSE 73180
// sReset := true ;
73172: LD_ADDR_EXP 97
73176: PUSH
73177: LD_INT 1
73179: ST_TO_ADDR
// if p3 = 105 then
73180: LD_VAR 0 3
73184: PUSH
73185: LD_INT 105
73187: EQUAL
73188: IFFALSE 73198
// sSun := true ;
73190: LD_ADDR_EXP 98
73194: PUSH
73195: LD_INT 1
73197: ST_TO_ADDR
// if p3 = 106 then
73198: LD_VAR 0 3
73202: PUSH
73203: LD_INT 106
73205: EQUAL
73206: IFFALSE 73216
// sTiger := true ;
73208: LD_ADDR_EXP 94
73212: PUSH
73213: LD_INT 1
73215: ST_TO_ADDR
// if p3 = 107 then
73216: LD_VAR 0 3
73220: PUSH
73221: LD_INT 107
73223: EQUAL
73224: IFFALSE 73234
// sBomb := true ;
73226: LD_ADDR_EXP 95
73230: PUSH
73231: LD_INT 1
73233: ST_TO_ADDR
// if p3 = 108 then
73234: LD_VAR 0 3
73238: PUSH
73239: LD_INT 108
73241: EQUAL
73242: IFFALSE 73252
// sWound := true ;
73244: LD_ADDR_EXP 103
73248: PUSH
73249: LD_INT 1
73251: ST_TO_ADDR
// if p3 = 109 then
73252: LD_VAR 0 3
73256: PUSH
73257: LD_INT 109
73259: EQUAL
73260: IFFALSE 73270
// sBetray := true ;
73262: LD_ADDR_EXP 107
73266: PUSH
73267: LD_INT 1
73269: ST_TO_ADDR
// if p3 = 110 then
73270: LD_VAR 0 3
73274: PUSH
73275: LD_INT 110
73277: EQUAL
73278: IFFALSE 73288
// sContamin := true ;
73280: LD_ADDR_EXP 108
73284: PUSH
73285: LD_INT 1
73287: ST_TO_ADDR
// if p3 = 111 then
73288: LD_VAR 0 3
73292: PUSH
73293: LD_INT 111
73295: EQUAL
73296: IFFALSE 73306
// sOil := true ;
73298: LD_ADDR_EXP 110
73302: PUSH
73303: LD_INT 1
73305: ST_TO_ADDR
// if p3 = 112 then
73306: LD_VAR 0 3
73310: PUSH
73311: LD_INT 112
73313: EQUAL
73314: IFFALSE 73324
// sStu := true ;
73316: LD_ADDR_EXP 114
73320: PUSH
73321: LD_INT 1
73323: ST_TO_ADDR
// if p3 = 113 then
73324: LD_VAR 0 3
73328: PUSH
73329: LD_INT 113
73331: EQUAL
73332: IFFALSE 73342
// sBazooka := true ;
73334: LD_ADDR_EXP 117
73338: PUSH
73339: LD_INT 1
73341: ST_TO_ADDR
// if p3 = 114 then
73342: LD_VAR 0 3
73346: PUSH
73347: LD_INT 114
73349: EQUAL
73350: IFFALSE 73360
// sMortar := true ;
73352: LD_ADDR_EXP 118
73356: PUSH
73357: LD_INT 1
73359: ST_TO_ADDR
// if p3 = 115 then
73360: LD_VAR 0 3
73364: PUSH
73365: LD_INT 115
73367: EQUAL
73368: IFFALSE 73378
// sRanger := true ;
73370: LD_ADDR_EXP 128
73374: PUSH
73375: LD_INT 1
73377: ST_TO_ADDR
// if p3 = 116 then
73378: LD_VAR 0 3
73382: PUSH
73383: LD_INT 116
73385: EQUAL
73386: IFFALSE 73396
// sComputer := true ;
73388: LD_ADDR_EXP 129
73392: PUSH
73393: LD_INT 1
73395: ST_TO_ADDR
// if p3 = 117 then
73396: LD_VAR 0 3
73400: PUSH
73401: LD_INT 117
73403: EQUAL
73404: IFFALSE 73414
// s30 := true ;
73406: LD_ADDR_EXP 130
73410: PUSH
73411: LD_INT 1
73413: ST_TO_ADDR
// if p3 = 118 then
73414: LD_VAR 0 3
73418: PUSH
73419: LD_INT 118
73421: EQUAL
73422: IFFALSE 73432
// s60 := true ;
73424: LD_ADDR_EXP 131
73428: PUSH
73429: LD_INT 1
73431: ST_TO_ADDR
// end ; if p2 = hack_mode then
73432: LD_VAR 0 2
73436: PUSH
73437: LD_INT 101
73439: EQUAL
73440: IFFALSE 73568
// begin case p3 of 1 :
73442: LD_VAR 0 3
73446: PUSH
73447: LD_INT 1
73449: DOUBLE
73450: EQUAL
73451: IFTRUE 73455
73453: GO 73462
73455: POP
// hHackUnlimitedResources ; 2 :
73456: CALL 85715 0 0
73460: GO 73568
73462: LD_INT 2
73464: DOUBLE
73465: EQUAL
73466: IFTRUE 73470
73468: GO 73477
73470: POP
// hHackSetLevel10 ; 3 :
73471: CALL 85848 0 0
73475: GO 73568
73477: LD_INT 3
73479: DOUBLE
73480: EQUAL
73481: IFTRUE 73485
73483: GO 73492
73485: POP
// hHackSetLevel10YourUnits ; 4 :
73486: CALL 85933 0 0
73490: GO 73568
73492: LD_INT 4
73494: DOUBLE
73495: EQUAL
73496: IFTRUE 73500
73498: GO 73507
73500: POP
// hHackInvincible ; 5 :
73501: CALL 86381 0 0
73505: GO 73568
73507: LD_INT 5
73509: DOUBLE
73510: EQUAL
73511: IFTRUE 73515
73513: GO 73522
73515: POP
// hHackInvisible ; 6 :
73516: CALL 86492 0 0
73520: GO 73568
73522: LD_INT 6
73524: DOUBLE
73525: EQUAL
73526: IFTRUE 73530
73528: GO 73537
73530: POP
// hHackChangeYourSide ; 7 :
73531: CALL 86549 0 0
73535: GO 73568
73537: LD_INT 7
73539: DOUBLE
73540: EQUAL
73541: IFTRUE 73545
73543: GO 73552
73545: POP
// hHackChangeUnitSide ; 8 :
73546: CALL 86591 0 0
73550: GO 73568
73552: LD_INT 8
73554: DOUBLE
73555: EQUAL
73556: IFTRUE 73560
73558: GO 73567
73560: POP
// hHackFog ; end ;
73561: CALL 86692 0 0
73565: GO 73568
73567: POP
// end ; if p2 = game_save_mode then
73568: LD_VAR 0 2
73572: PUSH
73573: LD_INT 102
73575: EQUAL
73576: IFFALSE 73631
// begin if p3 = 1 then
73578: LD_VAR 0 3
73582: PUSH
73583: LD_INT 1
73585: EQUAL
73586: IFFALSE 73598
// globalGameSaveCounter := p4 ;
73588: LD_ADDR_EXP 74
73592: PUSH
73593: LD_VAR 0 4
73597: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
73598: LD_VAR 0 3
73602: PUSH
73603: LD_INT 2
73605: EQUAL
73606: PUSH
73607: LD_EXP 74
73611: AND
73612: IFFALSE 73631
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
73614: LD_STRING setGameSaveCounter(
73616: PUSH
73617: LD_EXP 74
73621: STR
73622: PUSH
73623: LD_STRING )
73625: STR
73626: PPUSH
73627: CALL_OW 559
// end ; end ;
73631: LD_VAR 0 7
73635: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
73636: LD_INT 0
73638: PPUSH
// streamModeActive := false ;
73639: LD_ADDR_EXP 75
73643: PUSH
73644: LD_INT 0
73646: ST_TO_ADDR
// normalCounter := 36 ;
73647: LD_ADDR_EXP 76
73651: PUSH
73652: LD_INT 36
73654: ST_TO_ADDR
// hardcoreCounter := 18 ;
73655: LD_ADDR_EXP 77
73659: PUSH
73660: LD_INT 18
73662: ST_TO_ADDR
// sRocket := false ;
73663: LD_ADDR_EXP 80
73667: PUSH
73668: LD_INT 0
73670: ST_TO_ADDR
// sSpeed := false ;
73671: LD_ADDR_EXP 79
73675: PUSH
73676: LD_INT 0
73678: ST_TO_ADDR
// sEngine := false ;
73679: LD_ADDR_EXP 81
73683: PUSH
73684: LD_INT 0
73686: ST_TO_ADDR
// sSpec := false ;
73687: LD_ADDR_EXP 78
73691: PUSH
73692: LD_INT 0
73694: ST_TO_ADDR
// sLevel := false ;
73695: LD_ADDR_EXP 82
73699: PUSH
73700: LD_INT 0
73702: ST_TO_ADDR
// sArmoury := false ;
73703: LD_ADDR_EXP 83
73707: PUSH
73708: LD_INT 0
73710: ST_TO_ADDR
// sRadar := false ;
73711: LD_ADDR_EXP 84
73715: PUSH
73716: LD_INT 0
73718: ST_TO_ADDR
// sBunker := false ;
73719: LD_ADDR_EXP 85
73723: PUSH
73724: LD_INT 0
73726: ST_TO_ADDR
// sHack := false ;
73727: LD_ADDR_EXP 86
73731: PUSH
73732: LD_INT 0
73734: ST_TO_ADDR
// sFire := false ;
73735: LD_ADDR_EXP 87
73739: PUSH
73740: LD_INT 0
73742: ST_TO_ADDR
// sRefresh := false ;
73743: LD_ADDR_EXP 88
73747: PUSH
73748: LD_INT 0
73750: ST_TO_ADDR
// sExp := false ;
73751: LD_ADDR_EXP 89
73755: PUSH
73756: LD_INT 0
73758: ST_TO_ADDR
// sDepot := false ;
73759: LD_ADDR_EXP 90
73763: PUSH
73764: LD_INT 0
73766: ST_TO_ADDR
// sFlag := false ;
73767: LD_ADDR_EXP 91
73771: PUSH
73772: LD_INT 0
73774: ST_TO_ADDR
// sKamikadze := false ;
73775: LD_ADDR_EXP 99
73779: PUSH
73780: LD_INT 0
73782: ST_TO_ADDR
// sTroll := false ;
73783: LD_ADDR_EXP 100
73787: PUSH
73788: LD_INT 0
73790: ST_TO_ADDR
// sSlow := false ;
73791: LD_ADDR_EXP 101
73795: PUSH
73796: LD_INT 0
73798: ST_TO_ADDR
// sLack := false ;
73799: LD_ADDR_EXP 102
73803: PUSH
73804: LD_INT 0
73806: ST_TO_ADDR
// sTank := false ;
73807: LD_ADDR_EXP 104
73811: PUSH
73812: LD_INT 0
73814: ST_TO_ADDR
// sRemote := false ;
73815: LD_ADDR_EXP 105
73819: PUSH
73820: LD_INT 0
73822: ST_TO_ADDR
// sPowell := false ;
73823: LD_ADDR_EXP 106
73827: PUSH
73828: LD_INT 0
73830: ST_TO_ADDR
// sTeleport := false ;
73831: LD_ADDR_EXP 109
73835: PUSH
73836: LD_INT 0
73838: ST_TO_ADDR
// sOilTower := false ;
73839: LD_ADDR_EXP 111
73843: PUSH
73844: LD_INT 0
73846: ST_TO_ADDR
// sShovel := false ;
73847: LD_ADDR_EXP 112
73851: PUSH
73852: LD_INT 0
73854: ST_TO_ADDR
// sSheik := false ;
73855: LD_ADDR_EXP 113
73859: PUSH
73860: LD_INT 0
73862: ST_TO_ADDR
// sEarthquake := false ;
73863: LD_ADDR_EXP 115
73867: PUSH
73868: LD_INT 0
73870: ST_TO_ADDR
// sAI := false ;
73871: LD_ADDR_EXP 116
73875: PUSH
73876: LD_INT 0
73878: ST_TO_ADDR
// sCargo := false ;
73879: LD_ADDR_EXP 119
73883: PUSH
73884: LD_INT 0
73886: ST_TO_ADDR
// sDLaser := false ;
73887: LD_ADDR_EXP 120
73891: PUSH
73892: LD_INT 0
73894: ST_TO_ADDR
// sExchange := false ;
73895: LD_ADDR_EXP 121
73899: PUSH
73900: LD_INT 0
73902: ST_TO_ADDR
// sFac := false ;
73903: LD_ADDR_EXP 122
73907: PUSH
73908: LD_INT 0
73910: ST_TO_ADDR
// sPower := false ;
73911: LD_ADDR_EXP 123
73915: PUSH
73916: LD_INT 0
73918: ST_TO_ADDR
// sRandom := false ;
73919: LD_ADDR_EXP 124
73923: PUSH
73924: LD_INT 0
73926: ST_TO_ADDR
// sShield := false ;
73927: LD_ADDR_EXP 125
73931: PUSH
73932: LD_INT 0
73934: ST_TO_ADDR
// sTime := false ;
73935: LD_ADDR_EXP 126
73939: PUSH
73940: LD_INT 0
73942: ST_TO_ADDR
// sTools := false ;
73943: LD_ADDR_EXP 127
73947: PUSH
73948: LD_INT 0
73950: ST_TO_ADDR
// sSold := false ;
73951: LD_ADDR_EXP 92
73955: PUSH
73956: LD_INT 0
73958: ST_TO_ADDR
// sDiff := false ;
73959: LD_ADDR_EXP 93
73963: PUSH
73964: LD_INT 0
73966: ST_TO_ADDR
// sFog := false ;
73967: LD_ADDR_EXP 96
73971: PUSH
73972: LD_INT 0
73974: ST_TO_ADDR
// sReset := false ;
73975: LD_ADDR_EXP 97
73979: PUSH
73980: LD_INT 0
73982: ST_TO_ADDR
// sSun := false ;
73983: LD_ADDR_EXP 98
73987: PUSH
73988: LD_INT 0
73990: ST_TO_ADDR
// sTiger := false ;
73991: LD_ADDR_EXP 94
73995: PUSH
73996: LD_INT 0
73998: ST_TO_ADDR
// sBomb := false ;
73999: LD_ADDR_EXP 95
74003: PUSH
74004: LD_INT 0
74006: ST_TO_ADDR
// sWound := false ;
74007: LD_ADDR_EXP 103
74011: PUSH
74012: LD_INT 0
74014: ST_TO_ADDR
// sBetray := false ;
74015: LD_ADDR_EXP 107
74019: PUSH
74020: LD_INT 0
74022: ST_TO_ADDR
// sContamin := false ;
74023: LD_ADDR_EXP 108
74027: PUSH
74028: LD_INT 0
74030: ST_TO_ADDR
// sOil := false ;
74031: LD_ADDR_EXP 110
74035: PUSH
74036: LD_INT 0
74038: ST_TO_ADDR
// sStu := false ;
74039: LD_ADDR_EXP 114
74043: PUSH
74044: LD_INT 0
74046: ST_TO_ADDR
// sBazooka := false ;
74047: LD_ADDR_EXP 117
74051: PUSH
74052: LD_INT 0
74054: ST_TO_ADDR
// sMortar := false ;
74055: LD_ADDR_EXP 118
74059: PUSH
74060: LD_INT 0
74062: ST_TO_ADDR
// sRanger := false ;
74063: LD_ADDR_EXP 128
74067: PUSH
74068: LD_INT 0
74070: ST_TO_ADDR
// sComputer := false ;
74071: LD_ADDR_EXP 129
74075: PUSH
74076: LD_INT 0
74078: ST_TO_ADDR
// s30 := false ;
74079: LD_ADDR_EXP 130
74083: PUSH
74084: LD_INT 0
74086: ST_TO_ADDR
// s60 := false ;
74087: LD_ADDR_EXP 131
74091: PUSH
74092: LD_INT 0
74094: ST_TO_ADDR
// end ;
74095: LD_VAR 0 1
74099: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
74100: LD_INT 0
74102: PPUSH
74103: PPUSH
74104: PPUSH
74105: PPUSH
74106: PPUSH
74107: PPUSH
74108: PPUSH
// result := [ ] ;
74109: LD_ADDR_VAR 0 2
74113: PUSH
74114: EMPTY
74115: ST_TO_ADDR
// if campaign_id = 1 then
74116: LD_OWVAR 69
74120: PUSH
74121: LD_INT 1
74123: EQUAL
74124: IFFALSE 77290
// begin case mission_number of 1 :
74126: LD_OWVAR 70
74130: PUSH
74131: LD_INT 1
74133: DOUBLE
74134: EQUAL
74135: IFTRUE 74139
74137: GO 74215
74139: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
74140: LD_ADDR_VAR 0 2
74144: PUSH
74145: LD_INT 2
74147: PUSH
74148: LD_INT 4
74150: PUSH
74151: LD_INT 11
74153: PUSH
74154: LD_INT 12
74156: PUSH
74157: LD_INT 15
74159: PUSH
74160: LD_INT 16
74162: PUSH
74163: LD_INT 22
74165: PUSH
74166: LD_INT 23
74168: PUSH
74169: LD_INT 26
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: LIST
74176: LIST
74177: LIST
74178: LIST
74179: LIST
74180: LIST
74181: LIST
74182: PUSH
74183: LD_INT 101
74185: PUSH
74186: LD_INT 102
74188: PUSH
74189: LD_INT 106
74191: PUSH
74192: LD_INT 116
74194: PUSH
74195: LD_INT 117
74197: PUSH
74198: LD_INT 118
74200: PUSH
74201: EMPTY
74202: LIST
74203: LIST
74204: LIST
74205: LIST
74206: LIST
74207: LIST
74208: PUSH
74209: EMPTY
74210: LIST
74211: LIST
74212: ST_TO_ADDR
74213: GO 77288
74215: LD_INT 2
74217: DOUBLE
74218: EQUAL
74219: IFTRUE 74223
74221: GO 74307
74223: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
74224: LD_ADDR_VAR 0 2
74228: PUSH
74229: LD_INT 2
74231: PUSH
74232: LD_INT 4
74234: PUSH
74235: LD_INT 11
74237: PUSH
74238: LD_INT 12
74240: PUSH
74241: LD_INT 15
74243: PUSH
74244: LD_INT 16
74246: PUSH
74247: LD_INT 22
74249: PUSH
74250: LD_INT 23
74252: PUSH
74253: LD_INT 26
74255: PUSH
74256: EMPTY
74257: LIST
74258: LIST
74259: LIST
74260: LIST
74261: LIST
74262: LIST
74263: LIST
74264: LIST
74265: LIST
74266: PUSH
74267: LD_INT 101
74269: PUSH
74270: LD_INT 102
74272: PUSH
74273: LD_INT 105
74275: PUSH
74276: LD_INT 106
74278: PUSH
74279: LD_INT 108
74281: PUSH
74282: LD_INT 116
74284: PUSH
74285: LD_INT 117
74287: PUSH
74288: LD_INT 118
74290: PUSH
74291: EMPTY
74292: LIST
74293: LIST
74294: LIST
74295: LIST
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: PUSH
74301: EMPTY
74302: LIST
74303: LIST
74304: ST_TO_ADDR
74305: GO 77288
74307: LD_INT 3
74309: DOUBLE
74310: EQUAL
74311: IFTRUE 74315
74313: GO 74403
74315: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
74316: LD_ADDR_VAR 0 2
74320: PUSH
74321: LD_INT 2
74323: PUSH
74324: LD_INT 4
74326: PUSH
74327: LD_INT 5
74329: PUSH
74330: LD_INT 11
74332: PUSH
74333: LD_INT 12
74335: PUSH
74336: LD_INT 15
74338: PUSH
74339: LD_INT 16
74341: PUSH
74342: LD_INT 22
74344: PUSH
74345: LD_INT 26
74347: PUSH
74348: LD_INT 36
74350: PUSH
74351: EMPTY
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: PUSH
74363: LD_INT 101
74365: PUSH
74366: LD_INT 102
74368: PUSH
74369: LD_INT 105
74371: PUSH
74372: LD_INT 106
74374: PUSH
74375: LD_INT 108
74377: PUSH
74378: LD_INT 116
74380: PUSH
74381: LD_INT 117
74383: PUSH
74384: LD_INT 118
74386: PUSH
74387: EMPTY
74388: LIST
74389: LIST
74390: LIST
74391: LIST
74392: LIST
74393: LIST
74394: LIST
74395: LIST
74396: PUSH
74397: EMPTY
74398: LIST
74399: LIST
74400: ST_TO_ADDR
74401: GO 77288
74403: LD_INT 4
74405: DOUBLE
74406: EQUAL
74407: IFTRUE 74411
74409: GO 74507
74411: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
74412: LD_ADDR_VAR 0 2
74416: PUSH
74417: LD_INT 2
74419: PUSH
74420: LD_INT 4
74422: PUSH
74423: LD_INT 5
74425: PUSH
74426: LD_INT 8
74428: PUSH
74429: LD_INT 11
74431: PUSH
74432: LD_INT 12
74434: PUSH
74435: LD_INT 15
74437: PUSH
74438: LD_INT 16
74440: PUSH
74441: LD_INT 22
74443: PUSH
74444: LD_INT 23
74446: PUSH
74447: LD_INT 26
74449: PUSH
74450: LD_INT 36
74452: PUSH
74453: EMPTY
74454: LIST
74455: LIST
74456: LIST
74457: LIST
74458: LIST
74459: LIST
74460: LIST
74461: LIST
74462: LIST
74463: LIST
74464: LIST
74465: LIST
74466: PUSH
74467: LD_INT 101
74469: PUSH
74470: LD_INT 102
74472: PUSH
74473: LD_INT 105
74475: PUSH
74476: LD_INT 106
74478: PUSH
74479: LD_INT 108
74481: PUSH
74482: LD_INT 116
74484: PUSH
74485: LD_INT 117
74487: PUSH
74488: LD_INT 118
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: LIST
74495: LIST
74496: LIST
74497: LIST
74498: LIST
74499: LIST
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: ST_TO_ADDR
74505: GO 77288
74507: LD_INT 5
74509: DOUBLE
74510: EQUAL
74511: IFTRUE 74515
74513: GO 74627
74515: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
74516: LD_ADDR_VAR 0 2
74520: PUSH
74521: LD_INT 2
74523: PUSH
74524: LD_INT 4
74526: PUSH
74527: LD_INT 5
74529: PUSH
74530: LD_INT 6
74532: PUSH
74533: LD_INT 8
74535: PUSH
74536: LD_INT 11
74538: PUSH
74539: LD_INT 12
74541: PUSH
74542: LD_INT 15
74544: PUSH
74545: LD_INT 16
74547: PUSH
74548: LD_INT 22
74550: PUSH
74551: LD_INT 23
74553: PUSH
74554: LD_INT 25
74556: PUSH
74557: LD_INT 26
74559: PUSH
74560: LD_INT 36
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: LIST
74567: LIST
74568: LIST
74569: LIST
74570: LIST
74571: LIST
74572: LIST
74573: LIST
74574: LIST
74575: LIST
74576: LIST
74577: LIST
74578: PUSH
74579: LD_INT 101
74581: PUSH
74582: LD_INT 102
74584: PUSH
74585: LD_INT 105
74587: PUSH
74588: LD_INT 106
74590: PUSH
74591: LD_INT 108
74593: PUSH
74594: LD_INT 109
74596: PUSH
74597: LD_INT 112
74599: PUSH
74600: LD_INT 116
74602: PUSH
74603: LD_INT 117
74605: PUSH
74606: LD_INT 118
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: LIST
74613: LIST
74614: LIST
74615: LIST
74616: LIST
74617: LIST
74618: LIST
74619: LIST
74620: PUSH
74621: EMPTY
74622: LIST
74623: LIST
74624: ST_TO_ADDR
74625: GO 77288
74627: LD_INT 6
74629: DOUBLE
74630: EQUAL
74631: IFTRUE 74635
74633: GO 74767
74635: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
74636: LD_ADDR_VAR 0 2
74640: PUSH
74641: LD_INT 2
74643: PUSH
74644: LD_INT 4
74646: PUSH
74647: LD_INT 5
74649: PUSH
74650: LD_INT 6
74652: PUSH
74653: LD_INT 8
74655: PUSH
74656: LD_INT 11
74658: PUSH
74659: LD_INT 12
74661: PUSH
74662: LD_INT 15
74664: PUSH
74665: LD_INT 16
74667: PUSH
74668: LD_INT 20
74670: PUSH
74671: LD_INT 21
74673: PUSH
74674: LD_INT 22
74676: PUSH
74677: LD_INT 23
74679: PUSH
74680: LD_INT 25
74682: PUSH
74683: LD_INT 26
74685: PUSH
74686: LD_INT 30
74688: PUSH
74689: LD_INT 31
74691: PUSH
74692: LD_INT 32
74694: PUSH
74695: LD_INT 36
74697: PUSH
74698: EMPTY
74699: LIST
74700: LIST
74701: LIST
74702: LIST
74703: LIST
74704: LIST
74705: LIST
74706: LIST
74707: LIST
74708: LIST
74709: LIST
74710: LIST
74711: LIST
74712: LIST
74713: LIST
74714: LIST
74715: LIST
74716: LIST
74717: LIST
74718: PUSH
74719: LD_INT 101
74721: PUSH
74722: LD_INT 102
74724: PUSH
74725: LD_INT 105
74727: PUSH
74728: LD_INT 106
74730: PUSH
74731: LD_INT 108
74733: PUSH
74734: LD_INT 109
74736: PUSH
74737: LD_INT 112
74739: PUSH
74740: LD_INT 116
74742: PUSH
74743: LD_INT 117
74745: PUSH
74746: LD_INT 118
74748: PUSH
74749: EMPTY
74750: LIST
74751: LIST
74752: LIST
74753: LIST
74754: LIST
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: LIST
74760: PUSH
74761: EMPTY
74762: LIST
74763: LIST
74764: ST_TO_ADDR
74765: GO 77288
74767: LD_INT 7
74769: DOUBLE
74770: EQUAL
74771: IFTRUE 74775
74773: GO 74887
74775: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
74776: LD_ADDR_VAR 0 2
74780: PUSH
74781: LD_INT 2
74783: PUSH
74784: LD_INT 4
74786: PUSH
74787: LD_INT 5
74789: PUSH
74790: LD_INT 7
74792: PUSH
74793: LD_INT 11
74795: PUSH
74796: LD_INT 12
74798: PUSH
74799: LD_INT 15
74801: PUSH
74802: LD_INT 16
74804: PUSH
74805: LD_INT 20
74807: PUSH
74808: LD_INT 21
74810: PUSH
74811: LD_INT 22
74813: PUSH
74814: LD_INT 23
74816: PUSH
74817: LD_INT 25
74819: PUSH
74820: LD_INT 26
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: LIST
74827: LIST
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: LIST
74833: LIST
74834: LIST
74835: LIST
74836: LIST
74837: LIST
74838: PUSH
74839: LD_INT 101
74841: PUSH
74842: LD_INT 102
74844: PUSH
74845: LD_INT 103
74847: PUSH
74848: LD_INT 105
74850: PUSH
74851: LD_INT 106
74853: PUSH
74854: LD_INT 108
74856: PUSH
74857: LD_INT 112
74859: PUSH
74860: LD_INT 116
74862: PUSH
74863: LD_INT 117
74865: PUSH
74866: LD_INT 118
74868: PUSH
74869: EMPTY
74870: LIST
74871: LIST
74872: LIST
74873: LIST
74874: LIST
74875: LIST
74876: LIST
74877: LIST
74878: LIST
74879: LIST
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: ST_TO_ADDR
74885: GO 77288
74887: LD_INT 8
74889: DOUBLE
74890: EQUAL
74891: IFTRUE 74895
74893: GO 75035
74895: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
74896: LD_ADDR_VAR 0 2
74900: PUSH
74901: LD_INT 2
74903: PUSH
74904: LD_INT 4
74906: PUSH
74907: LD_INT 5
74909: PUSH
74910: LD_INT 6
74912: PUSH
74913: LD_INT 7
74915: PUSH
74916: LD_INT 8
74918: PUSH
74919: LD_INT 11
74921: PUSH
74922: LD_INT 12
74924: PUSH
74925: LD_INT 15
74927: PUSH
74928: LD_INT 16
74930: PUSH
74931: LD_INT 20
74933: PUSH
74934: LD_INT 21
74936: PUSH
74937: LD_INT 22
74939: PUSH
74940: LD_INT 23
74942: PUSH
74943: LD_INT 25
74945: PUSH
74946: LD_INT 26
74948: PUSH
74949: LD_INT 30
74951: PUSH
74952: LD_INT 31
74954: PUSH
74955: LD_INT 32
74957: PUSH
74958: LD_INT 36
74960: PUSH
74961: EMPTY
74962: LIST
74963: LIST
74964: LIST
74965: LIST
74966: LIST
74967: LIST
74968: LIST
74969: LIST
74970: LIST
74971: LIST
74972: LIST
74973: LIST
74974: LIST
74975: LIST
74976: LIST
74977: LIST
74978: LIST
74979: LIST
74980: LIST
74981: LIST
74982: PUSH
74983: LD_INT 101
74985: PUSH
74986: LD_INT 102
74988: PUSH
74989: LD_INT 103
74991: PUSH
74992: LD_INT 105
74994: PUSH
74995: LD_INT 106
74997: PUSH
74998: LD_INT 108
75000: PUSH
75001: LD_INT 109
75003: PUSH
75004: LD_INT 112
75006: PUSH
75007: LD_INT 116
75009: PUSH
75010: LD_INT 117
75012: PUSH
75013: LD_INT 118
75015: PUSH
75016: EMPTY
75017: LIST
75018: LIST
75019: LIST
75020: LIST
75021: LIST
75022: LIST
75023: LIST
75024: LIST
75025: LIST
75026: LIST
75027: LIST
75028: PUSH
75029: EMPTY
75030: LIST
75031: LIST
75032: ST_TO_ADDR
75033: GO 77288
75035: LD_INT 9
75037: DOUBLE
75038: EQUAL
75039: IFTRUE 75043
75041: GO 75191
75043: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
75044: LD_ADDR_VAR 0 2
75048: PUSH
75049: LD_INT 2
75051: PUSH
75052: LD_INT 4
75054: PUSH
75055: LD_INT 5
75057: PUSH
75058: LD_INT 6
75060: PUSH
75061: LD_INT 7
75063: PUSH
75064: LD_INT 8
75066: PUSH
75067: LD_INT 11
75069: PUSH
75070: LD_INT 12
75072: PUSH
75073: LD_INT 15
75075: PUSH
75076: LD_INT 16
75078: PUSH
75079: LD_INT 20
75081: PUSH
75082: LD_INT 21
75084: PUSH
75085: LD_INT 22
75087: PUSH
75088: LD_INT 23
75090: PUSH
75091: LD_INT 25
75093: PUSH
75094: LD_INT 26
75096: PUSH
75097: LD_INT 28
75099: PUSH
75100: LD_INT 30
75102: PUSH
75103: LD_INT 31
75105: PUSH
75106: LD_INT 32
75108: PUSH
75109: LD_INT 36
75111: PUSH
75112: EMPTY
75113: LIST
75114: LIST
75115: LIST
75116: LIST
75117: LIST
75118: LIST
75119: LIST
75120: LIST
75121: LIST
75122: LIST
75123: LIST
75124: LIST
75125: LIST
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: LIST
75132: LIST
75133: LIST
75134: PUSH
75135: LD_INT 101
75137: PUSH
75138: LD_INT 102
75140: PUSH
75141: LD_INT 103
75143: PUSH
75144: LD_INT 105
75146: PUSH
75147: LD_INT 106
75149: PUSH
75150: LD_INT 108
75152: PUSH
75153: LD_INT 109
75155: PUSH
75156: LD_INT 112
75158: PUSH
75159: LD_INT 114
75161: PUSH
75162: LD_INT 116
75164: PUSH
75165: LD_INT 117
75167: PUSH
75168: LD_INT 118
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: LIST
75175: LIST
75176: LIST
75177: LIST
75178: LIST
75179: LIST
75180: LIST
75181: LIST
75182: LIST
75183: LIST
75184: PUSH
75185: EMPTY
75186: LIST
75187: LIST
75188: ST_TO_ADDR
75189: GO 77288
75191: LD_INT 10
75193: DOUBLE
75194: EQUAL
75195: IFTRUE 75199
75197: GO 75395
75199: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
75200: LD_ADDR_VAR 0 2
75204: PUSH
75205: LD_INT 2
75207: PUSH
75208: LD_INT 4
75210: PUSH
75211: LD_INT 5
75213: PUSH
75214: LD_INT 6
75216: PUSH
75217: LD_INT 7
75219: PUSH
75220: LD_INT 8
75222: PUSH
75223: LD_INT 9
75225: PUSH
75226: LD_INT 10
75228: PUSH
75229: LD_INT 11
75231: PUSH
75232: LD_INT 12
75234: PUSH
75235: LD_INT 13
75237: PUSH
75238: LD_INT 14
75240: PUSH
75241: LD_INT 15
75243: PUSH
75244: LD_INT 16
75246: PUSH
75247: LD_INT 17
75249: PUSH
75250: LD_INT 18
75252: PUSH
75253: LD_INT 19
75255: PUSH
75256: LD_INT 20
75258: PUSH
75259: LD_INT 21
75261: PUSH
75262: LD_INT 22
75264: PUSH
75265: LD_INT 23
75267: PUSH
75268: LD_INT 24
75270: PUSH
75271: LD_INT 25
75273: PUSH
75274: LD_INT 26
75276: PUSH
75277: LD_INT 28
75279: PUSH
75280: LD_INT 30
75282: PUSH
75283: LD_INT 31
75285: PUSH
75286: LD_INT 32
75288: PUSH
75289: LD_INT 36
75291: PUSH
75292: EMPTY
75293: LIST
75294: LIST
75295: LIST
75296: LIST
75297: LIST
75298: LIST
75299: LIST
75300: LIST
75301: LIST
75302: LIST
75303: LIST
75304: LIST
75305: LIST
75306: LIST
75307: LIST
75308: LIST
75309: LIST
75310: LIST
75311: LIST
75312: LIST
75313: LIST
75314: LIST
75315: LIST
75316: LIST
75317: LIST
75318: LIST
75319: LIST
75320: LIST
75321: LIST
75322: PUSH
75323: LD_INT 101
75325: PUSH
75326: LD_INT 102
75328: PUSH
75329: LD_INT 103
75331: PUSH
75332: LD_INT 104
75334: PUSH
75335: LD_INT 105
75337: PUSH
75338: LD_INT 106
75340: PUSH
75341: LD_INT 107
75343: PUSH
75344: LD_INT 108
75346: PUSH
75347: LD_INT 109
75349: PUSH
75350: LD_INT 110
75352: PUSH
75353: LD_INT 111
75355: PUSH
75356: LD_INT 112
75358: PUSH
75359: LD_INT 114
75361: PUSH
75362: LD_INT 116
75364: PUSH
75365: LD_INT 117
75367: PUSH
75368: LD_INT 118
75370: PUSH
75371: EMPTY
75372: LIST
75373: LIST
75374: LIST
75375: LIST
75376: LIST
75377: LIST
75378: LIST
75379: LIST
75380: LIST
75381: LIST
75382: LIST
75383: LIST
75384: LIST
75385: LIST
75386: LIST
75387: LIST
75388: PUSH
75389: EMPTY
75390: LIST
75391: LIST
75392: ST_TO_ADDR
75393: GO 77288
75395: LD_INT 11
75397: DOUBLE
75398: EQUAL
75399: IFTRUE 75403
75401: GO 75607
75403: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
75404: LD_ADDR_VAR 0 2
75408: PUSH
75409: LD_INT 2
75411: PUSH
75412: LD_INT 3
75414: PUSH
75415: LD_INT 4
75417: PUSH
75418: LD_INT 5
75420: PUSH
75421: LD_INT 6
75423: PUSH
75424: LD_INT 7
75426: PUSH
75427: LD_INT 8
75429: PUSH
75430: LD_INT 9
75432: PUSH
75433: LD_INT 10
75435: PUSH
75436: LD_INT 11
75438: PUSH
75439: LD_INT 12
75441: PUSH
75442: LD_INT 13
75444: PUSH
75445: LD_INT 14
75447: PUSH
75448: LD_INT 15
75450: PUSH
75451: LD_INT 16
75453: PUSH
75454: LD_INT 17
75456: PUSH
75457: LD_INT 18
75459: PUSH
75460: LD_INT 19
75462: PUSH
75463: LD_INT 20
75465: PUSH
75466: LD_INT 21
75468: PUSH
75469: LD_INT 22
75471: PUSH
75472: LD_INT 23
75474: PUSH
75475: LD_INT 24
75477: PUSH
75478: LD_INT 25
75480: PUSH
75481: LD_INT 26
75483: PUSH
75484: LD_INT 28
75486: PUSH
75487: LD_INT 30
75489: PUSH
75490: LD_INT 31
75492: PUSH
75493: LD_INT 32
75495: PUSH
75496: LD_INT 34
75498: PUSH
75499: LD_INT 36
75501: PUSH
75502: EMPTY
75503: LIST
75504: LIST
75505: LIST
75506: LIST
75507: LIST
75508: LIST
75509: LIST
75510: LIST
75511: LIST
75512: LIST
75513: LIST
75514: LIST
75515: LIST
75516: LIST
75517: LIST
75518: LIST
75519: LIST
75520: LIST
75521: LIST
75522: LIST
75523: LIST
75524: LIST
75525: LIST
75526: LIST
75527: LIST
75528: LIST
75529: LIST
75530: LIST
75531: LIST
75532: LIST
75533: LIST
75534: PUSH
75535: LD_INT 101
75537: PUSH
75538: LD_INT 102
75540: PUSH
75541: LD_INT 103
75543: PUSH
75544: LD_INT 104
75546: PUSH
75547: LD_INT 105
75549: PUSH
75550: LD_INT 106
75552: PUSH
75553: LD_INT 107
75555: PUSH
75556: LD_INT 108
75558: PUSH
75559: LD_INT 109
75561: PUSH
75562: LD_INT 110
75564: PUSH
75565: LD_INT 111
75567: PUSH
75568: LD_INT 112
75570: PUSH
75571: LD_INT 114
75573: PUSH
75574: LD_INT 116
75576: PUSH
75577: LD_INT 117
75579: PUSH
75580: LD_INT 118
75582: PUSH
75583: EMPTY
75584: LIST
75585: LIST
75586: LIST
75587: LIST
75588: LIST
75589: LIST
75590: LIST
75591: LIST
75592: LIST
75593: LIST
75594: LIST
75595: LIST
75596: LIST
75597: LIST
75598: LIST
75599: LIST
75600: PUSH
75601: EMPTY
75602: LIST
75603: LIST
75604: ST_TO_ADDR
75605: GO 77288
75607: LD_INT 12
75609: DOUBLE
75610: EQUAL
75611: IFTRUE 75615
75613: GO 75835
75615: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
75616: LD_ADDR_VAR 0 2
75620: PUSH
75621: LD_INT 1
75623: PUSH
75624: LD_INT 2
75626: PUSH
75627: LD_INT 3
75629: PUSH
75630: LD_INT 4
75632: PUSH
75633: LD_INT 5
75635: PUSH
75636: LD_INT 6
75638: PUSH
75639: LD_INT 7
75641: PUSH
75642: LD_INT 8
75644: PUSH
75645: LD_INT 9
75647: PUSH
75648: LD_INT 10
75650: PUSH
75651: LD_INT 11
75653: PUSH
75654: LD_INT 12
75656: PUSH
75657: LD_INT 13
75659: PUSH
75660: LD_INT 14
75662: PUSH
75663: LD_INT 15
75665: PUSH
75666: LD_INT 16
75668: PUSH
75669: LD_INT 17
75671: PUSH
75672: LD_INT 18
75674: PUSH
75675: LD_INT 19
75677: PUSH
75678: LD_INT 20
75680: PUSH
75681: LD_INT 21
75683: PUSH
75684: LD_INT 22
75686: PUSH
75687: LD_INT 23
75689: PUSH
75690: LD_INT 24
75692: PUSH
75693: LD_INT 25
75695: PUSH
75696: LD_INT 26
75698: PUSH
75699: LD_INT 27
75701: PUSH
75702: LD_INT 28
75704: PUSH
75705: LD_INT 30
75707: PUSH
75708: LD_INT 31
75710: PUSH
75711: LD_INT 32
75713: PUSH
75714: LD_INT 33
75716: PUSH
75717: LD_INT 34
75719: PUSH
75720: LD_INT 36
75722: PUSH
75723: EMPTY
75724: LIST
75725: LIST
75726: LIST
75727: LIST
75728: LIST
75729: LIST
75730: LIST
75731: LIST
75732: LIST
75733: LIST
75734: LIST
75735: LIST
75736: LIST
75737: LIST
75738: LIST
75739: LIST
75740: LIST
75741: LIST
75742: LIST
75743: LIST
75744: LIST
75745: LIST
75746: LIST
75747: LIST
75748: LIST
75749: LIST
75750: LIST
75751: LIST
75752: LIST
75753: LIST
75754: LIST
75755: LIST
75756: LIST
75757: LIST
75758: PUSH
75759: LD_INT 101
75761: PUSH
75762: LD_INT 102
75764: PUSH
75765: LD_INT 103
75767: PUSH
75768: LD_INT 104
75770: PUSH
75771: LD_INT 105
75773: PUSH
75774: LD_INT 106
75776: PUSH
75777: LD_INT 107
75779: PUSH
75780: LD_INT 108
75782: PUSH
75783: LD_INT 109
75785: PUSH
75786: LD_INT 110
75788: PUSH
75789: LD_INT 111
75791: PUSH
75792: LD_INT 112
75794: PUSH
75795: LD_INT 113
75797: PUSH
75798: LD_INT 114
75800: PUSH
75801: LD_INT 116
75803: PUSH
75804: LD_INT 117
75806: PUSH
75807: LD_INT 118
75809: PUSH
75810: EMPTY
75811: LIST
75812: LIST
75813: LIST
75814: LIST
75815: LIST
75816: LIST
75817: LIST
75818: LIST
75819: LIST
75820: LIST
75821: LIST
75822: LIST
75823: LIST
75824: LIST
75825: LIST
75826: LIST
75827: LIST
75828: PUSH
75829: EMPTY
75830: LIST
75831: LIST
75832: ST_TO_ADDR
75833: GO 77288
75835: LD_INT 13
75837: DOUBLE
75838: EQUAL
75839: IFTRUE 75843
75841: GO 76051
75843: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
75844: LD_ADDR_VAR 0 2
75848: PUSH
75849: LD_INT 1
75851: PUSH
75852: LD_INT 2
75854: PUSH
75855: LD_INT 3
75857: PUSH
75858: LD_INT 4
75860: PUSH
75861: LD_INT 5
75863: PUSH
75864: LD_INT 8
75866: PUSH
75867: LD_INT 9
75869: PUSH
75870: LD_INT 10
75872: PUSH
75873: LD_INT 11
75875: PUSH
75876: LD_INT 12
75878: PUSH
75879: LD_INT 14
75881: PUSH
75882: LD_INT 15
75884: PUSH
75885: LD_INT 16
75887: PUSH
75888: LD_INT 17
75890: PUSH
75891: LD_INT 18
75893: PUSH
75894: LD_INT 19
75896: PUSH
75897: LD_INT 20
75899: PUSH
75900: LD_INT 21
75902: PUSH
75903: LD_INT 22
75905: PUSH
75906: LD_INT 23
75908: PUSH
75909: LD_INT 24
75911: PUSH
75912: LD_INT 25
75914: PUSH
75915: LD_INT 26
75917: PUSH
75918: LD_INT 27
75920: PUSH
75921: LD_INT 28
75923: PUSH
75924: LD_INT 30
75926: PUSH
75927: LD_INT 31
75929: PUSH
75930: LD_INT 32
75932: PUSH
75933: LD_INT 33
75935: PUSH
75936: LD_INT 34
75938: PUSH
75939: LD_INT 36
75941: PUSH
75942: EMPTY
75943: LIST
75944: LIST
75945: LIST
75946: LIST
75947: LIST
75948: LIST
75949: LIST
75950: LIST
75951: LIST
75952: LIST
75953: LIST
75954: LIST
75955: LIST
75956: LIST
75957: LIST
75958: LIST
75959: LIST
75960: LIST
75961: LIST
75962: LIST
75963: LIST
75964: LIST
75965: LIST
75966: LIST
75967: LIST
75968: LIST
75969: LIST
75970: LIST
75971: LIST
75972: LIST
75973: LIST
75974: PUSH
75975: LD_INT 101
75977: PUSH
75978: LD_INT 102
75980: PUSH
75981: LD_INT 103
75983: PUSH
75984: LD_INT 104
75986: PUSH
75987: LD_INT 105
75989: PUSH
75990: LD_INT 106
75992: PUSH
75993: LD_INT 107
75995: PUSH
75996: LD_INT 108
75998: PUSH
75999: LD_INT 109
76001: PUSH
76002: LD_INT 110
76004: PUSH
76005: LD_INT 111
76007: PUSH
76008: LD_INT 112
76010: PUSH
76011: LD_INT 113
76013: PUSH
76014: LD_INT 114
76016: PUSH
76017: LD_INT 116
76019: PUSH
76020: LD_INT 117
76022: PUSH
76023: LD_INT 118
76025: PUSH
76026: EMPTY
76027: LIST
76028: LIST
76029: LIST
76030: LIST
76031: LIST
76032: LIST
76033: LIST
76034: LIST
76035: LIST
76036: LIST
76037: LIST
76038: LIST
76039: LIST
76040: LIST
76041: LIST
76042: LIST
76043: LIST
76044: PUSH
76045: EMPTY
76046: LIST
76047: LIST
76048: ST_TO_ADDR
76049: GO 77288
76051: LD_INT 14
76053: DOUBLE
76054: EQUAL
76055: IFTRUE 76059
76057: GO 76283
76059: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
76060: LD_ADDR_VAR 0 2
76064: PUSH
76065: LD_INT 1
76067: PUSH
76068: LD_INT 2
76070: PUSH
76071: LD_INT 3
76073: PUSH
76074: LD_INT 4
76076: PUSH
76077: LD_INT 5
76079: PUSH
76080: LD_INT 6
76082: PUSH
76083: LD_INT 7
76085: PUSH
76086: LD_INT 8
76088: PUSH
76089: LD_INT 9
76091: PUSH
76092: LD_INT 10
76094: PUSH
76095: LD_INT 11
76097: PUSH
76098: LD_INT 12
76100: PUSH
76101: LD_INT 13
76103: PUSH
76104: LD_INT 14
76106: PUSH
76107: LD_INT 15
76109: PUSH
76110: LD_INT 16
76112: PUSH
76113: LD_INT 17
76115: PUSH
76116: LD_INT 18
76118: PUSH
76119: LD_INT 19
76121: PUSH
76122: LD_INT 20
76124: PUSH
76125: LD_INT 21
76127: PUSH
76128: LD_INT 22
76130: PUSH
76131: LD_INT 23
76133: PUSH
76134: LD_INT 24
76136: PUSH
76137: LD_INT 25
76139: PUSH
76140: LD_INT 26
76142: PUSH
76143: LD_INT 27
76145: PUSH
76146: LD_INT 28
76148: PUSH
76149: LD_INT 29
76151: PUSH
76152: LD_INT 30
76154: PUSH
76155: LD_INT 31
76157: PUSH
76158: LD_INT 32
76160: PUSH
76161: LD_INT 33
76163: PUSH
76164: LD_INT 34
76166: PUSH
76167: LD_INT 36
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: LIST
76174: LIST
76175: LIST
76176: LIST
76177: LIST
76178: LIST
76179: LIST
76180: LIST
76181: LIST
76182: LIST
76183: LIST
76184: LIST
76185: LIST
76186: LIST
76187: LIST
76188: LIST
76189: LIST
76190: LIST
76191: LIST
76192: LIST
76193: LIST
76194: LIST
76195: LIST
76196: LIST
76197: LIST
76198: LIST
76199: LIST
76200: LIST
76201: LIST
76202: LIST
76203: LIST
76204: LIST
76205: LIST
76206: PUSH
76207: LD_INT 101
76209: PUSH
76210: LD_INT 102
76212: PUSH
76213: LD_INT 103
76215: PUSH
76216: LD_INT 104
76218: PUSH
76219: LD_INT 105
76221: PUSH
76222: LD_INT 106
76224: PUSH
76225: LD_INT 107
76227: PUSH
76228: LD_INT 108
76230: PUSH
76231: LD_INT 109
76233: PUSH
76234: LD_INT 110
76236: PUSH
76237: LD_INT 111
76239: PUSH
76240: LD_INT 112
76242: PUSH
76243: LD_INT 113
76245: PUSH
76246: LD_INT 114
76248: PUSH
76249: LD_INT 116
76251: PUSH
76252: LD_INT 117
76254: PUSH
76255: LD_INT 118
76257: PUSH
76258: EMPTY
76259: LIST
76260: LIST
76261: LIST
76262: LIST
76263: LIST
76264: LIST
76265: LIST
76266: LIST
76267: LIST
76268: LIST
76269: LIST
76270: LIST
76271: LIST
76272: LIST
76273: LIST
76274: LIST
76275: LIST
76276: PUSH
76277: EMPTY
76278: LIST
76279: LIST
76280: ST_TO_ADDR
76281: GO 77288
76283: LD_INT 15
76285: DOUBLE
76286: EQUAL
76287: IFTRUE 76291
76289: GO 76515
76291: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
76292: LD_ADDR_VAR 0 2
76296: PUSH
76297: LD_INT 1
76299: PUSH
76300: LD_INT 2
76302: PUSH
76303: LD_INT 3
76305: PUSH
76306: LD_INT 4
76308: PUSH
76309: LD_INT 5
76311: PUSH
76312: LD_INT 6
76314: PUSH
76315: LD_INT 7
76317: PUSH
76318: LD_INT 8
76320: PUSH
76321: LD_INT 9
76323: PUSH
76324: LD_INT 10
76326: PUSH
76327: LD_INT 11
76329: PUSH
76330: LD_INT 12
76332: PUSH
76333: LD_INT 13
76335: PUSH
76336: LD_INT 14
76338: PUSH
76339: LD_INT 15
76341: PUSH
76342: LD_INT 16
76344: PUSH
76345: LD_INT 17
76347: PUSH
76348: LD_INT 18
76350: PUSH
76351: LD_INT 19
76353: PUSH
76354: LD_INT 20
76356: PUSH
76357: LD_INT 21
76359: PUSH
76360: LD_INT 22
76362: PUSH
76363: LD_INT 23
76365: PUSH
76366: LD_INT 24
76368: PUSH
76369: LD_INT 25
76371: PUSH
76372: LD_INT 26
76374: PUSH
76375: LD_INT 27
76377: PUSH
76378: LD_INT 28
76380: PUSH
76381: LD_INT 29
76383: PUSH
76384: LD_INT 30
76386: PUSH
76387: LD_INT 31
76389: PUSH
76390: LD_INT 32
76392: PUSH
76393: LD_INT 33
76395: PUSH
76396: LD_INT 34
76398: PUSH
76399: LD_INT 36
76401: PUSH
76402: EMPTY
76403: LIST
76404: LIST
76405: LIST
76406: LIST
76407: LIST
76408: LIST
76409: LIST
76410: LIST
76411: LIST
76412: LIST
76413: LIST
76414: LIST
76415: LIST
76416: LIST
76417: LIST
76418: LIST
76419: LIST
76420: LIST
76421: LIST
76422: LIST
76423: LIST
76424: LIST
76425: LIST
76426: LIST
76427: LIST
76428: LIST
76429: LIST
76430: LIST
76431: LIST
76432: LIST
76433: LIST
76434: LIST
76435: LIST
76436: LIST
76437: LIST
76438: PUSH
76439: LD_INT 101
76441: PUSH
76442: LD_INT 102
76444: PUSH
76445: LD_INT 103
76447: PUSH
76448: LD_INT 104
76450: PUSH
76451: LD_INT 105
76453: PUSH
76454: LD_INT 106
76456: PUSH
76457: LD_INT 107
76459: PUSH
76460: LD_INT 108
76462: PUSH
76463: LD_INT 109
76465: PUSH
76466: LD_INT 110
76468: PUSH
76469: LD_INT 111
76471: PUSH
76472: LD_INT 112
76474: PUSH
76475: LD_INT 113
76477: PUSH
76478: LD_INT 114
76480: PUSH
76481: LD_INT 116
76483: PUSH
76484: LD_INT 117
76486: PUSH
76487: LD_INT 118
76489: PUSH
76490: EMPTY
76491: LIST
76492: LIST
76493: LIST
76494: LIST
76495: LIST
76496: LIST
76497: LIST
76498: LIST
76499: LIST
76500: LIST
76501: LIST
76502: LIST
76503: LIST
76504: LIST
76505: LIST
76506: LIST
76507: LIST
76508: PUSH
76509: EMPTY
76510: LIST
76511: LIST
76512: ST_TO_ADDR
76513: GO 77288
76515: LD_INT 16
76517: DOUBLE
76518: EQUAL
76519: IFTRUE 76523
76521: GO 76659
76523: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
76524: LD_ADDR_VAR 0 2
76528: PUSH
76529: LD_INT 2
76531: PUSH
76532: LD_INT 4
76534: PUSH
76535: LD_INT 5
76537: PUSH
76538: LD_INT 7
76540: PUSH
76541: LD_INT 11
76543: PUSH
76544: LD_INT 12
76546: PUSH
76547: LD_INT 15
76549: PUSH
76550: LD_INT 16
76552: PUSH
76553: LD_INT 20
76555: PUSH
76556: LD_INT 21
76558: PUSH
76559: LD_INT 22
76561: PUSH
76562: LD_INT 23
76564: PUSH
76565: LD_INT 25
76567: PUSH
76568: LD_INT 26
76570: PUSH
76571: LD_INT 30
76573: PUSH
76574: LD_INT 31
76576: PUSH
76577: LD_INT 32
76579: PUSH
76580: LD_INT 33
76582: PUSH
76583: LD_INT 34
76585: PUSH
76586: EMPTY
76587: LIST
76588: LIST
76589: LIST
76590: LIST
76591: LIST
76592: LIST
76593: LIST
76594: LIST
76595: LIST
76596: LIST
76597: LIST
76598: LIST
76599: LIST
76600: LIST
76601: LIST
76602: LIST
76603: LIST
76604: LIST
76605: LIST
76606: PUSH
76607: LD_INT 101
76609: PUSH
76610: LD_INT 102
76612: PUSH
76613: LD_INT 103
76615: PUSH
76616: LD_INT 106
76618: PUSH
76619: LD_INT 108
76621: PUSH
76622: LD_INT 112
76624: PUSH
76625: LD_INT 113
76627: PUSH
76628: LD_INT 114
76630: PUSH
76631: LD_INT 116
76633: PUSH
76634: LD_INT 117
76636: PUSH
76637: LD_INT 118
76639: PUSH
76640: EMPTY
76641: LIST
76642: LIST
76643: LIST
76644: LIST
76645: LIST
76646: LIST
76647: LIST
76648: LIST
76649: LIST
76650: LIST
76651: LIST
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: ST_TO_ADDR
76657: GO 77288
76659: LD_INT 17
76661: DOUBLE
76662: EQUAL
76663: IFTRUE 76667
76665: GO 76891
76667: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
76668: LD_ADDR_VAR 0 2
76672: PUSH
76673: LD_INT 1
76675: PUSH
76676: LD_INT 2
76678: PUSH
76679: LD_INT 3
76681: PUSH
76682: LD_INT 4
76684: PUSH
76685: LD_INT 5
76687: PUSH
76688: LD_INT 6
76690: PUSH
76691: LD_INT 7
76693: PUSH
76694: LD_INT 8
76696: PUSH
76697: LD_INT 9
76699: PUSH
76700: LD_INT 10
76702: PUSH
76703: LD_INT 11
76705: PUSH
76706: LD_INT 12
76708: PUSH
76709: LD_INT 13
76711: PUSH
76712: LD_INT 14
76714: PUSH
76715: LD_INT 15
76717: PUSH
76718: LD_INT 16
76720: PUSH
76721: LD_INT 17
76723: PUSH
76724: LD_INT 18
76726: PUSH
76727: LD_INT 19
76729: PUSH
76730: LD_INT 20
76732: PUSH
76733: LD_INT 21
76735: PUSH
76736: LD_INT 22
76738: PUSH
76739: LD_INT 23
76741: PUSH
76742: LD_INT 24
76744: PUSH
76745: LD_INT 25
76747: PUSH
76748: LD_INT 26
76750: PUSH
76751: LD_INT 27
76753: PUSH
76754: LD_INT 28
76756: PUSH
76757: LD_INT 29
76759: PUSH
76760: LD_INT 30
76762: PUSH
76763: LD_INT 31
76765: PUSH
76766: LD_INT 32
76768: PUSH
76769: LD_INT 33
76771: PUSH
76772: LD_INT 34
76774: PUSH
76775: LD_INT 36
76777: PUSH
76778: EMPTY
76779: LIST
76780: LIST
76781: LIST
76782: LIST
76783: LIST
76784: LIST
76785: LIST
76786: LIST
76787: LIST
76788: LIST
76789: LIST
76790: LIST
76791: LIST
76792: LIST
76793: LIST
76794: LIST
76795: LIST
76796: LIST
76797: LIST
76798: LIST
76799: LIST
76800: LIST
76801: LIST
76802: LIST
76803: LIST
76804: LIST
76805: LIST
76806: LIST
76807: LIST
76808: LIST
76809: LIST
76810: LIST
76811: LIST
76812: LIST
76813: LIST
76814: PUSH
76815: LD_INT 101
76817: PUSH
76818: LD_INT 102
76820: PUSH
76821: LD_INT 103
76823: PUSH
76824: LD_INT 104
76826: PUSH
76827: LD_INT 105
76829: PUSH
76830: LD_INT 106
76832: PUSH
76833: LD_INT 107
76835: PUSH
76836: LD_INT 108
76838: PUSH
76839: LD_INT 109
76841: PUSH
76842: LD_INT 110
76844: PUSH
76845: LD_INT 111
76847: PUSH
76848: LD_INT 112
76850: PUSH
76851: LD_INT 113
76853: PUSH
76854: LD_INT 114
76856: PUSH
76857: LD_INT 116
76859: PUSH
76860: LD_INT 117
76862: PUSH
76863: LD_INT 118
76865: PUSH
76866: EMPTY
76867: LIST
76868: LIST
76869: LIST
76870: LIST
76871: LIST
76872: LIST
76873: LIST
76874: LIST
76875: LIST
76876: LIST
76877: LIST
76878: LIST
76879: LIST
76880: LIST
76881: LIST
76882: LIST
76883: LIST
76884: PUSH
76885: EMPTY
76886: LIST
76887: LIST
76888: ST_TO_ADDR
76889: GO 77288
76891: LD_INT 18
76893: DOUBLE
76894: EQUAL
76895: IFTRUE 76899
76897: GO 77047
76899: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
76900: LD_ADDR_VAR 0 2
76904: PUSH
76905: LD_INT 2
76907: PUSH
76908: LD_INT 4
76910: PUSH
76911: LD_INT 5
76913: PUSH
76914: LD_INT 7
76916: PUSH
76917: LD_INT 11
76919: PUSH
76920: LD_INT 12
76922: PUSH
76923: LD_INT 15
76925: PUSH
76926: LD_INT 16
76928: PUSH
76929: LD_INT 20
76931: PUSH
76932: LD_INT 21
76934: PUSH
76935: LD_INT 22
76937: PUSH
76938: LD_INT 23
76940: PUSH
76941: LD_INT 25
76943: PUSH
76944: LD_INT 26
76946: PUSH
76947: LD_INT 30
76949: PUSH
76950: LD_INT 31
76952: PUSH
76953: LD_INT 32
76955: PUSH
76956: LD_INT 33
76958: PUSH
76959: LD_INT 34
76961: PUSH
76962: LD_INT 35
76964: PUSH
76965: LD_INT 36
76967: PUSH
76968: EMPTY
76969: LIST
76970: LIST
76971: LIST
76972: LIST
76973: LIST
76974: LIST
76975: LIST
76976: LIST
76977: LIST
76978: LIST
76979: LIST
76980: LIST
76981: LIST
76982: LIST
76983: LIST
76984: LIST
76985: LIST
76986: LIST
76987: LIST
76988: LIST
76989: LIST
76990: PUSH
76991: LD_INT 101
76993: PUSH
76994: LD_INT 102
76996: PUSH
76997: LD_INT 103
76999: PUSH
77000: LD_INT 106
77002: PUSH
77003: LD_INT 108
77005: PUSH
77006: LD_INT 112
77008: PUSH
77009: LD_INT 113
77011: PUSH
77012: LD_INT 114
77014: PUSH
77015: LD_INT 115
77017: PUSH
77018: LD_INT 116
77020: PUSH
77021: LD_INT 117
77023: PUSH
77024: LD_INT 118
77026: PUSH
77027: EMPTY
77028: LIST
77029: LIST
77030: LIST
77031: LIST
77032: LIST
77033: LIST
77034: LIST
77035: LIST
77036: LIST
77037: LIST
77038: LIST
77039: LIST
77040: PUSH
77041: EMPTY
77042: LIST
77043: LIST
77044: ST_TO_ADDR
77045: GO 77288
77047: LD_INT 19
77049: DOUBLE
77050: EQUAL
77051: IFTRUE 77055
77053: GO 77287
77055: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
77056: LD_ADDR_VAR 0 2
77060: PUSH
77061: LD_INT 1
77063: PUSH
77064: LD_INT 2
77066: PUSH
77067: LD_INT 3
77069: PUSH
77070: LD_INT 4
77072: PUSH
77073: LD_INT 5
77075: PUSH
77076: LD_INT 6
77078: PUSH
77079: LD_INT 7
77081: PUSH
77082: LD_INT 8
77084: PUSH
77085: LD_INT 9
77087: PUSH
77088: LD_INT 10
77090: PUSH
77091: LD_INT 11
77093: PUSH
77094: LD_INT 12
77096: PUSH
77097: LD_INT 13
77099: PUSH
77100: LD_INT 14
77102: PUSH
77103: LD_INT 15
77105: PUSH
77106: LD_INT 16
77108: PUSH
77109: LD_INT 17
77111: PUSH
77112: LD_INT 18
77114: PUSH
77115: LD_INT 19
77117: PUSH
77118: LD_INT 20
77120: PUSH
77121: LD_INT 21
77123: PUSH
77124: LD_INT 22
77126: PUSH
77127: LD_INT 23
77129: PUSH
77130: LD_INT 24
77132: PUSH
77133: LD_INT 25
77135: PUSH
77136: LD_INT 26
77138: PUSH
77139: LD_INT 27
77141: PUSH
77142: LD_INT 28
77144: PUSH
77145: LD_INT 29
77147: PUSH
77148: LD_INT 30
77150: PUSH
77151: LD_INT 31
77153: PUSH
77154: LD_INT 32
77156: PUSH
77157: LD_INT 33
77159: PUSH
77160: LD_INT 34
77162: PUSH
77163: LD_INT 35
77165: PUSH
77166: LD_INT 36
77168: PUSH
77169: EMPTY
77170: LIST
77171: LIST
77172: LIST
77173: LIST
77174: LIST
77175: LIST
77176: LIST
77177: LIST
77178: LIST
77179: LIST
77180: LIST
77181: LIST
77182: LIST
77183: LIST
77184: LIST
77185: LIST
77186: LIST
77187: LIST
77188: LIST
77189: LIST
77190: LIST
77191: LIST
77192: LIST
77193: LIST
77194: LIST
77195: LIST
77196: LIST
77197: LIST
77198: LIST
77199: LIST
77200: LIST
77201: LIST
77202: LIST
77203: LIST
77204: LIST
77205: LIST
77206: PUSH
77207: LD_INT 101
77209: PUSH
77210: LD_INT 102
77212: PUSH
77213: LD_INT 103
77215: PUSH
77216: LD_INT 104
77218: PUSH
77219: LD_INT 105
77221: PUSH
77222: LD_INT 106
77224: PUSH
77225: LD_INT 107
77227: PUSH
77228: LD_INT 108
77230: PUSH
77231: LD_INT 109
77233: PUSH
77234: LD_INT 110
77236: PUSH
77237: LD_INT 111
77239: PUSH
77240: LD_INT 112
77242: PUSH
77243: LD_INT 113
77245: PUSH
77246: LD_INT 114
77248: PUSH
77249: LD_INT 115
77251: PUSH
77252: LD_INT 116
77254: PUSH
77255: LD_INT 117
77257: PUSH
77258: LD_INT 118
77260: PUSH
77261: EMPTY
77262: LIST
77263: LIST
77264: LIST
77265: LIST
77266: LIST
77267: LIST
77268: LIST
77269: LIST
77270: LIST
77271: LIST
77272: LIST
77273: LIST
77274: LIST
77275: LIST
77276: LIST
77277: LIST
77278: LIST
77279: LIST
77280: PUSH
77281: EMPTY
77282: LIST
77283: LIST
77284: ST_TO_ADDR
77285: GO 77288
77287: POP
// end else
77288: GO 77519
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
77290: LD_ADDR_VAR 0 2
77294: PUSH
77295: LD_INT 1
77297: PUSH
77298: LD_INT 2
77300: PUSH
77301: LD_INT 3
77303: PUSH
77304: LD_INT 4
77306: PUSH
77307: LD_INT 5
77309: PUSH
77310: LD_INT 6
77312: PUSH
77313: LD_INT 7
77315: PUSH
77316: LD_INT 8
77318: PUSH
77319: LD_INT 9
77321: PUSH
77322: LD_INT 10
77324: PUSH
77325: LD_INT 11
77327: PUSH
77328: LD_INT 12
77330: PUSH
77331: LD_INT 13
77333: PUSH
77334: LD_INT 14
77336: PUSH
77337: LD_INT 15
77339: PUSH
77340: LD_INT 16
77342: PUSH
77343: LD_INT 17
77345: PUSH
77346: LD_INT 18
77348: PUSH
77349: LD_INT 19
77351: PUSH
77352: LD_INT 20
77354: PUSH
77355: LD_INT 21
77357: PUSH
77358: LD_INT 22
77360: PUSH
77361: LD_INT 23
77363: PUSH
77364: LD_INT 24
77366: PUSH
77367: LD_INT 25
77369: PUSH
77370: LD_INT 26
77372: PUSH
77373: LD_INT 27
77375: PUSH
77376: LD_INT 28
77378: PUSH
77379: LD_INT 29
77381: PUSH
77382: LD_INT 30
77384: PUSH
77385: LD_INT 31
77387: PUSH
77388: LD_INT 32
77390: PUSH
77391: LD_INT 33
77393: PUSH
77394: LD_INT 34
77396: PUSH
77397: LD_INT 35
77399: PUSH
77400: LD_INT 36
77402: PUSH
77403: EMPTY
77404: LIST
77405: LIST
77406: LIST
77407: LIST
77408: LIST
77409: LIST
77410: LIST
77411: LIST
77412: LIST
77413: LIST
77414: LIST
77415: LIST
77416: LIST
77417: LIST
77418: LIST
77419: LIST
77420: LIST
77421: LIST
77422: LIST
77423: LIST
77424: LIST
77425: LIST
77426: LIST
77427: LIST
77428: LIST
77429: LIST
77430: LIST
77431: LIST
77432: LIST
77433: LIST
77434: LIST
77435: LIST
77436: LIST
77437: LIST
77438: LIST
77439: LIST
77440: PUSH
77441: LD_INT 101
77443: PUSH
77444: LD_INT 102
77446: PUSH
77447: LD_INT 103
77449: PUSH
77450: LD_INT 104
77452: PUSH
77453: LD_INT 105
77455: PUSH
77456: LD_INT 106
77458: PUSH
77459: LD_INT 107
77461: PUSH
77462: LD_INT 108
77464: PUSH
77465: LD_INT 109
77467: PUSH
77468: LD_INT 110
77470: PUSH
77471: LD_INT 111
77473: PUSH
77474: LD_INT 112
77476: PUSH
77477: LD_INT 113
77479: PUSH
77480: LD_INT 114
77482: PUSH
77483: LD_INT 115
77485: PUSH
77486: LD_INT 116
77488: PUSH
77489: LD_INT 117
77491: PUSH
77492: LD_INT 118
77494: PUSH
77495: EMPTY
77496: LIST
77497: LIST
77498: LIST
77499: LIST
77500: LIST
77501: LIST
77502: LIST
77503: LIST
77504: LIST
77505: LIST
77506: LIST
77507: LIST
77508: LIST
77509: LIST
77510: LIST
77511: LIST
77512: LIST
77513: LIST
77514: PUSH
77515: EMPTY
77516: LIST
77517: LIST
77518: ST_TO_ADDR
// if result then
77519: LD_VAR 0 2
77523: IFFALSE 78309
// begin normal :=  ;
77525: LD_ADDR_VAR 0 5
77529: PUSH
77530: LD_STRING 
77532: ST_TO_ADDR
// hardcore :=  ;
77533: LD_ADDR_VAR 0 6
77537: PUSH
77538: LD_STRING 
77540: ST_TO_ADDR
// active :=  ;
77541: LD_ADDR_VAR 0 7
77545: PUSH
77546: LD_STRING 
77548: ST_TO_ADDR
// for i = 1 to normalCounter do
77549: LD_ADDR_VAR 0 8
77553: PUSH
77554: DOUBLE
77555: LD_INT 1
77557: DEC
77558: ST_TO_ADDR
77559: LD_EXP 76
77563: PUSH
77564: FOR_TO
77565: IFFALSE 77666
// begin tmp := 0 ;
77567: LD_ADDR_VAR 0 3
77571: PUSH
77572: LD_STRING 0
77574: ST_TO_ADDR
// if result [ 1 ] then
77575: LD_VAR 0 2
77579: PUSH
77580: LD_INT 1
77582: ARRAY
77583: IFFALSE 77648
// if result [ 1 ] [ 1 ] = i then
77585: LD_VAR 0 2
77589: PUSH
77590: LD_INT 1
77592: ARRAY
77593: PUSH
77594: LD_INT 1
77596: ARRAY
77597: PUSH
77598: LD_VAR 0 8
77602: EQUAL
77603: IFFALSE 77648
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
77605: LD_ADDR_VAR 0 2
77609: PUSH
77610: LD_VAR 0 2
77614: PPUSH
77615: LD_INT 1
77617: PPUSH
77618: LD_VAR 0 2
77622: PUSH
77623: LD_INT 1
77625: ARRAY
77626: PPUSH
77627: LD_INT 1
77629: PPUSH
77630: CALL_OW 3
77634: PPUSH
77635: CALL_OW 1
77639: ST_TO_ADDR
// tmp := 1 ;
77640: LD_ADDR_VAR 0 3
77644: PUSH
77645: LD_STRING 1
77647: ST_TO_ADDR
// end ; normal := normal & tmp ;
77648: LD_ADDR_VAR 0 5
77652: PUSH
77653: LD_VAR 0 5
77657: PUSH
77658: LD_VAR 0 3
77662: STR
77663: ST_TO_ADDR
// end ;
77664: GO 77564
77666: POP
77667: POP
// for i = 1 to hardcoreCounter do
77668: LD_ADDR_VAR 0 8
77672: PUSH
77673: DOUBLE
77674: LD_INT 1
77676: DEC
77677: ST_TO_ADDR
77678: LD_EXP 77
77682: PUSH
77683: FOR_TO
77684: IFFALSE 77789
// begin tmp := 0 ;
77686: LD_ADDR_VAR 0 3
77690: PUSH
77691: LD_STRING 0
77693: ST_TO_ADDR
// if result [ 2 ] then
77694: LD_VAR 0 2
77698: PUSH
77699: LD_INT 2
77701: ARRAY
77702: IFFALSE 77771
// if result [ 2 ] [ 1 ] = 100 + i then
77704: LD_VAR 0 2
77708: PUSH
77709: LD_INT 2
77711: ARRAY
77712: PUSH
77713: LD_INT 1
77715: ARRAY
77716: PUSH
77717: LD_INT 100
77719: PUSH
77720: LD_VAR 0 8
77724: PLUS
77725: EQUAL
77726: IFFALSE 77771
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
77728: LD_ADDR_VAR 0 2
77732: PUSH
77733: LD_VAR 0 2
77737: PPUSH
77738: LD_INT 2
77740: PPUSH
77741: LD_VAR 0 2
77745: PUSH
77746: LD_INT 2
77748: ARRAY
77749: PPUSH
77750: LD_INT 1
77752: PPUSH
77753: CALL_OW 3
77757: PPUSH
77758: CALL_OW 1
77762: ST_TO_ADDR
// tmp := 1 ;
77763: LD_ADDR_VAR 0 3
77767: PUSH
77768: LD_STRING 1
77770: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
77771: LD_ADDR_VAR 0 6
77775: PUSH
77776: LD_VAR 0 6
77780: PUSH
77781: LD_VAR 0 3
77785: STR
77786: ST_TO_ADDR
// end ;
77787: GO 77683
77789: POP
77790: POP
// if isGameLoad then
77791: LD_VAR 0 1
77795: IFFALSE 78270
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
77797: LD_ADDR_VAR 0 4
77801: PUSH
77802: LD_EXP 80
77806: PUSH
77807: LD_EXP 79
77811: PUSH
77812: LD_EXP 81
77816: PUSH
77817: LD_EXP 78
77821: PUSH
77822: LD_EXP 82
77826: PUSH
77827: LD_EXP 83
77831: PUSH
77832: LD_EXP 84
77836: PUSH
77837: LD_EXP 85
77841: PUSH
77842: LD_EXP 86
77846: PUSH
77847: LD_EXP 87
77851: PUSH
77852: LD_EXP 88
77856: PUSH
77857: LD_EXP 89
77861: PUSH
77862: LD_EXP 90
77866: PUSH
77867: LD_EXP 91
77871: PUSH
77872: LD_EXP 99
77876: PUSH
77877: LD_EXP 100
77881: PUSH
77882: LD_EXP 101
77886: PUSH
77887: LD_EXP 102
77891: PUSH
77892: LD_EXP 104
77896: PUSH
77897: LD_EXP 105
77901: PUSH
77902: LD_EXP 106
77906: PUSH
77907: LD_EXP 109
77911: PUSH
77912: LD_EXP 111
77916: PUSH
77917: LD_EXP 112
77921: PUSH
77922: LD_EXP 113
77926: PUSH
77927: LD_EXP 115
77931: PUSH
77932: LD_EXP 116
77936: PUSH
77937: LD_EXP 119
77941: PUSH
77942: LD_EXP 120
77946: PUSH
77947: LD_EXP 121
77951: PUSH
77952: LD_EXP 122
77956: PUSH
77957: LD_EXP 123
77961: PUSH
77962: LD_EXP 124
77966: PUSH
77967: LD_EXP 125
77971: PUSH
77972: LD_EXP 126
77976: PUSH
77977: LD_EXP 127
77981: PUSH
77982: LD_EXP 92
77986: PUSH
77987: LD_EXP 93
77991: PUSH
77992: LD_EXP 96
77996: PUSH
77997: LD_EXP 97
78001: PUSH
78002: LD_EXP 98
78006: PUSH
78007: LD_EXP 94
78011: PUSH
78012: LD_EXP 95
78016: PUSH
78017: LD_EXP 103
78021: PUSH
78022: LD_EXP 107
78026: PUSH
78027: LD_EXP 108
78031: PUSH
78032: LD_EXP 110
78036: PUSH
78037: LD_EXP 114
78041: PUSH
78042: LD_EXP 117
78046: PUSH
78047: LD_EXP 118
78051: PUSH
78052: LD_EXP 128
78056: PUSH
78057: LD_EXP 129
78061: PUSH
78062: LD_EXP 130
78066: PUSH
78067: LD_EXP 131
78071: PUSH
78072: EMPTY
78073: LIST
78074: LIST
78075: LIST
78076: LIST
78077: LIST
78078: LIST
78079: LIST
78080: LIST
78081: LIST
78082: LIST
78083: LIST
78084: LIST
78085: LIST
78086: LIST
78087: LIST
78088: LIST
78089: LIST
78090: LIST
78091: LIST
78092: LIST
78093: LIST
78094: LIST
78095: LIST
78096: LIST
78097: LIST
78098: LIST
78099: LIST
78100: LIST
78101: LIST
78102: LIST
78103: LIST
78104: LIST
78105: LIST
78106: LIST
78107: LIST
78108: LIST
78109: LIST
78110: LIST
78111: LIST
78112: LIST
78113: LIST
78114: LIST
78115: LIST
78116: LIST
78117: LIST
78118: LIST
78119: LIST
78120: LIST
78121: LIST
78122: LIST
78123: LIST
78124: LIST
78125: LIST
78126: LIST
78127: ST_TO_ADDR
// tmp :=  ;
78128: LD_ADDR_VAR 0 3
78132: PUSH
78133: LD_STRING 
78135: ST_TO_ADDR
// for i = 1 to normalCounter do
78136: LD_ADDR_VAR 0 8
78140: PUSH
78141: DOUBLE
78142: LD_INT 1
78144: DEC
78145: ST_TO_ADDR
78146: LD_EXP 76
78150: PUSH
78151: FOR_TO
78152: IFFALSE 78188
// begin if flags [ i ] then
78154: LD_VAR 0 4
78158: PUSH
78159: LD_VAR 0 8
78163: ARRAY
78164: IFFALSE 78186
// tmp := tmp & i & ; ;
78166: LD_ADDR_VAR 0 3
78170: PUSH
78171: LD_VAR 0 3
78175: PUSH
78176: LD_VAR 0 8
78180: STR
78181: PUSH
78182: LD_STRING ;
78184: STR
78185: ST_TO_ADDR
// end ;
78186: GO 78151
78188: POP
78189: POP
// for i = 1 to hardcoreCounter do
78190: LD_ADDR_VAR 0 8
78194: PUSH
78195: DOUBLE
78196: LD_INT 1
78198: DEC
78199: ST_TO_ADDR
78200: LD_EXP 77
78204: PUSH
78205: FOR_TO
78206: IFFALSE 78252
// begin if flags [ normalCounter + i ] then
78208: LD_VAR 0 4
78212: PUSH
78213: LD_EXP 76
78217: PUSH
78218: LD_VAR 0 8
78222: PLUS
78223: ARRAY
78224: IFFALSE 78250
// tmp := tmp & ( 100 + i ) & ; ;
78226: LD_ADDR_VAR 0 3
78230: PUSH
78231: LD_VAR 0 3
78235: PUSH
78236: LD_INT 100
78238: PUSH
78239: LD_VAR 0 8
78243: PLUS
78244: STR
78245: PUSH
78246: LD_STRING ;
78248: STR
78249: ST_TO_ADDR
// end ;
78250: GO 78205
78252: POP
78253: POP
// if tmp then
78254: LD_VAR 0 3
78258: IFFALSE 78270
// active := tmp ;
78260: LD_ADDR_VAR 0 7
78264: PUSH
78265: LD_VAR 0 3
78269: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
78270: LD_STRING getStreamItemsFromMission("
78272: PUSH
78273: LD_VAR 0 5
78277: STR
78278: PUSH
78279: LD_STRING ","
78281: STR
78282: PUSH
78283: LD_VAR 0 6
78287: STR
78288: PUSH
78289: LD_STRING ","
78291: STR
78292: PUSH
78293: LD_VAR 0 7
78297: STR
78298: PUSH
78299: LD_STRING ")
78301: STR
78302: PPUSH
78303: CALL_OW 559
// end else
78307: GO 78316
// ToLua ( getStreamItemsFromMission("","","") ) ;
78309: LD_STRING getStreamItemsFromMission("","","")
78311: PPUSH
78312: CALL_OW 559
// end ;
78316: LD_VAR 0 2
78320: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
78321: LD_EXP 75
78325: PUSH
78326: LD_EXP 80
78330: AND
78331: IFFALSE 78455
78333: GO 78335
78335: DISABLE
78336: LD_INT 0
78338: PPUSH
78339: PPUSH
// begin enable ;
78340: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
78341: LD_ADDR_VAR 0 2
78345: PUSH
78346: LD_INT 22
78348: PUSH
78349: LD_OWVAR 2
78353: PUSH
78354: EMPTY
78355: LIST
78356: LIST
78357: PUSH
78358: LD_INT 2
78360: PUSH
78361: LD_INT 34
78363: PUSH
78364: LD_INT 7
78366: PUSH
78367: EMPTY
78368: LIST
78369: LIST
78370: PUSH
78371: LD_INT 34
78373: PUSH
78374: LD_INT 45
78376: PUSH
78377: EMPTY
78378: LIST
78379: LIST
78380: PUSH
78381: LD_INT 34
78383: PUSH
78384: LD_INT 28
78386: PUSH
78387: EMPTY
78388: LIST
78389: LIST
78390: PUSH
78391: LD_INT 34
78393: PUSH
78394: LD_INT 47
78396: PUSH
78397: EMPTY
78398: LIST
78399: LIST
78400: PUSH
78401: EMPTY
78402: LIST
78403: LIST
78404: LIST
78405: LIST
78406: LIST
78407: PUSH
78408: EMPTY
78409: LIST
78410: LIST
78411: PPUSH
78412: CALL_OW 69
78416: ST_TO_ADDR
// if not tmp then
78417: LD_VAR 0 2
78421: NOT
78422: IFFALSE 78426
// exit ;
78424: GO 78455
// for i in tmp do
78426: LD_ADDR_VAR 0 1
78430: PUSH
78431: LD_VAR 0 2
78435: PUSH
78436: FOR_IN
78437: IFFALSE 78453
// begin SetLives ( i , 0 ) ;
78439: LD_VAR 0 1
78443: PPUSH
78444: LD_INT 0
78446: PPUSH
78447: CALL_OW 234
// end ;
78451: GO 78436
78453: POP
78454: POP
// end ;
78455: PPOPN 2
78457: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
78458: LD_EXP 75
78462: PUSH
78463: LD_EXP 81
78467: AND
78468: IFFALSE 78552
78470: GO 78472
78472: DISABLE
78473: LD_INT 0
78475: PPUSH
78476: PPUSH
// begin enable ;
78477: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
78478: LD_ADDR_VAR 0 2
78482: PUSH
78483: LD_INT 22
78485: PUSH
78486: LD_OWVAR 2
78490: PUSH
78491: EMPTY
78492: LIST
78493: LIST
78494: PUSH
78495: LD_INT 32
78497: PUSH
78498: LD_INT 3
78500: PUSH
78501: EMPTY
78502: LIST
78503: LIST
78504: PUSH
78505: EMPTY
78506: LIST
78507: LIST
78508: PPUSH
78509: CALL_OW 69
78513: ST_TO_ADDR
// if not tmp then
78514: LD_VAR 0 2
78518: NOT
78519: IFFALSE 78523
// exit ;
78521: GO 78552
// for i in tmp do
78523: LD_ADDR_VAR 0 1
78527: PUSH
78528: LD_VAR 0 2
78532: PUSH
78533: FOR_IN
78534: IFFALSE 78550
// begin SetLives ( i , 0 ) ;
78536: LD_VAR 0 1
78540: PPUSH
78541: LD_INT 0
78543: PPUSH
78544: CALL_OW 234
// end ;
78548: GO 78533
78550: POP
78551: POP
// end ;
78552: PPOPN 2
78554: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
78555: LD_EXP 75
78559: PUSH
78560: LD_EXP 78
78564: AND
78565: IFFALSE 78658
78567: GO 78569
78569: DISABLE
78570: LD_INT 0
78572: PPUSH
// begin enable ;
78573: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
78574: LD_ADDR_VAR 0 1
78578: PUSH
78579: LD_INT 22
78581: PUSH
78582: LD_OWVAR 2
78586: PUSH
78587: EMPTY
78588: LIST
78589: LIST
78590: PUSH
78591: LD_INT 2
78593: PUSH
78594: LD_INT 25
78596: PUSH
78597: LD_INT 5
78599: PUSH
78600: EMPTY
78601: LIST
78602: LIST
78603: PUSH
78604: LD_INT 25
78606: PUSH
78607: LD_INT 9
78609: PUSH
78610: EMPTY
78611: LIST
78612: LIST
78613: PUSH
78614: LD_INT 25
78616: PUSH
78617: LD_INT 8
78619: PUSH
78620: EMPTY
78621: LIST
78622: LIST
78623: PUSH
78624: EMPTY
78625: LIST
78626: LIST
78627: LIST
78628: LIST
78629: PUSH
78630: EMPTY
78631: LIST
78632: LIST
78633: PPUSH
78634: CALL_OW 69
78638: PUSH
78639: FOR_IN
78640: IFFALSE 78656
// begin SetClass ( i , 1 ) ;
78642: LD_VAR 0 1
78646: PPUSH
78647: LD_INT 1
78649: PPUSH
78650: CALL_OW 336
// end ;
78654: GO 78639
78656: POP
78657: POP
// end ;
78658: PPOPN 1
78660: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
78661: LD_EXP 75
78665: PUSH
78666: LD_EXP 79
78670: AND
78671: PUSH
78672: LD_OWVAR 65
78676: PUSH
78677: LD_INT 7
78679: LESS
78680: AND
78681: IFFALSE 78695
78683: GO 78685
78685: DISABLE
// begin enable ;
78686: ENABLE
// game_speed := 7 ;
78687: LD_ADDR_OWVAR 65
78691: PUSH
78692: LD_INT 7
78694: ST_TO_ADDR
// end ;
78695: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
78696: LD_EXP 75
78700: PUSH
78701: LD_EXP 82
78705: AND
78706: IFFALSE 78908
78708: GO 78710
78710: DISABLE
78711: LD_INT 0
78713: PPUSH
78714: PPUSH
78715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
78716: LD_ADDR_VAR 0 3
78720: PUSH
78721: LD_INT 81
78723: PUSH
78724: LD_OWVAR 2
78728: PUSH
78729: EMPTY
78730: LIST
78731: LIST
78732: PUSH
78733: LD_INT 21
78735: PUSH
78736: LD_INT 1
78738: PUSH
78739: EMPTY
78740: LIST
78741: LIST
78742: PUSH
78743: EMPTY
78744: LIST
78745: LIST
78746: PPUSH
78747: CALL_OW 69
78751: ST_TO_ADDR
// if not tmp then
78752: LD_VAR 0 3
78756: NOT
78757: IFFALSE 78761
// exit ;
78759: GO 78908
// if tmp > 5 then
78761: LD_VAR 0 3
78765: PUSH
78766: LD_INT 5
78768: GREATER
78769: IFFALSE 78781
// k := 5 else
78771: LD_ADDR_VAR 0 2
78775: PUSH
78776: LD_INT 5
78778: ST_TO_ADDR
78779: GO 78791
// k := tmp ;
78781: LD_ADDR_VAR 0 2
78785: PUSH
78786: LD_VAR 0 3
78790: ST_TO_ADDR
// for i := 1 to k do
78791: LD_ADDR_VAR 0 1
78795: PUSH
78796: DOUBLE
78797: LD_INT 1
78799: DEC
78800: ST_TO_ADDR
78801: LD_VAR 0 2
78805: PUSH
78806: FOR_TO
78807: IFFALSE 78906
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
78809: LD_VAR 0 3
78813: PUSH
78814: LD_VAR 0 1
78818: ARRAY
78819: PPUSH
78820: LD_VAR 0 1
78824: PUSH
78825: LD_INT 4
78827: MOD
78828: PUSH
78829: LD_INT 1
78831: PLUS
78832: PPUSH
78833: CALL_OW 259
78837: PUSH
78838: LD_INT 10
78840: LESS
78841: IFFALSE 78904
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
78843: LD_VAR 0 3
78847: PUSH
78848: LD_VAR 0 1
78852: ARRAY
78853: PPUSH
78854: LD_VAR 0 1
78858: PUSH
78859: LD_INT 4
78861: MOD
78862: PUSH
78863: LD_INT 1
78865: PLUS
78866: PPUSH
78867: LD_VAR 0 3
78871: PUSH
78872: LD_VAR 0 1
78876: ARRAY
78877: PPUSH
78878: LD_VAR 0 1
78882: PUSH
78883: LD_INT 4
78885: MOD
78886: PUSH
78887: LD_INT 1
78889: PLUS
78890: PPUSH
78891: CALL_OW 259
78895: PUSH
78896: LD_INT 1
78898: PLUS
78899: PPUSH
78900: CALL_OW 237
78904: GO 78806
78906: POP
78907: POP
// end ;
78908: PPOPN 3
78910: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
78911: LD_EXP 75
78915: PUSH
78916: LD_EXP 83
78920: AND
78921: IFFALSE 78941
78923: GO 78925
78925: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
78926: LD_INT 4
78928: PPUSH
78929: LD_OWVAR 2
78933: PPUSH
78934: LD_INT 0
78936: PPUSH
78937: CALL_OW 324
78941: END
// every 0 0$1 trigger StreamModeActive and sShovel do
78942: LD_EXP 75
78946: PUSH
78947: LD_EXP 112
78951: AND
78952: IFFALSE 78972
78954: GO 78956
78956: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
78957: LD_INT 19
78959: PPUSH
78960: LD_OWVAR 2
78964: PPUSH
78965: LD_INT 0
78967: PPUSH
78968: CALL_OW 324
78972: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
78973: LD_EXP 75
78977: PUSH
78978: LD_EXP 84
78982: AND
78983: IFFALSE 79085
78985: GO 78987
78987: DISABLE
78988: LD_INT 0
78990: PPUSH
78991: PPUSH
// begin enable ;
78992: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
78993: LD_ADDR_VAR 0 2
78997: PUSH
78998: LD_INT 22
79000: PUSH
79001: LD_OWVAR 2
79005: PUSH
79006: EMPTY
79007: LIST
79008: LIST
79009: PUSH
79010: LD_INT 2
79012: PUSH
79013: LD_INT 34
79015: PUSH
79016: LD_INT 11
79018: PUSH
79019: EMPTY
79020: LIST
79021: LIST
79022: PUSH
79023: LD_INT 34
79025: PUSH
79026: LD_INT 30
79028: PUSH
79029: EMPTY
79030: LIST
79031: LIST
79032: PUSH
79033: EMPTY
79034: LIST
79035: LIST
79036: LIST
79037: PUSH
79038: EMPTY
79039: LIST
79040: LIST
79041: PPUSH
79042: CALL_OW 69
79046: ST_TO_ADDR
// if not tmp then
79047: LD_VAR 0 2
79051: NOT
79052: IFFALSE 79056
// exit ;
79054: GO 79085
// for i in tmp do
79056: LD_ADDR_VAR 0 1
79060: PUSH
79061: LD_VAR 0 2
79065: PUSH
79066: FOR_IN
79067: IFFALSE 79083
// begin SetLives ( i , 0 ) ;
79069: LD_VAR 0 1
79073: PPUSH
79074: LD_INT 0
79076: PPUSH
79077: CALL_OW 234
// end ;
79081: GO 79066
79083: POP
79084: POP
// end ;
79085: PPOPN 2
79087: END
// every 0 0$1 trigger StreamModeActive and sBunker do
79088: LD_EXP 75
79092: PUSH
79093: LD_EXP 85
79097: AND
79098: IFFALSE 79118
79100: GO 79102
79102: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
79103: LD_INT 32
79105: PPUSH
79106: LD_OWVAR 2
79110: PPUSH
79111: LD_INT 0
79113: PPUSH
79114: CALL_OW 324
79118: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
79119: LD_EXP 75
79123: PUSH
79124: LD_EXP 86
79128: AND
79129: IFFALSE 79310
79131: GO 79133
79133: DISABLE
79134: LD_INT 0
79136: PPUSH
79137: PPUSH
79138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
79139: LD_ADDR_VAR 0 2
79143: PUSH
79144: LD_INT 22
79146: PUSH
79147: LD_OWVAR 2
79151: PUSH
79152: EMPTY
79153: LIST
79154: LIST
79155: PUSH
79156: LD_INT 33
79158: PUSH
79159: LD_INT 3
79161: PUSH
79162: EMPTY
79163: LIST
79164: LIST
79165: PUSH
79166: EMPTY
79167: LIST
79168: LIST
79169: PPUSH
79170: CALL_OW 69
79174: ST_TO_ADDR
// if not tmp then
79175: LD_VAR 0 2
79179: NOT
79180: IFFALSE 79184
// exit ;
79182: GO 79310
// side := 0 ;
79184: LD_ADDR_VAR 0 3
79188: PUSH
79189: LD_INT 0
79191: ST_TO_ADDR
// for i := 1 to 8 do
79192: LD_ADDR_VAR 0 1
79196: PUSH
79197: DOUBLE
79198: LD_INT 1
79200: DEC
79201: ST_TO_ADDR
79202: LD_INT 8
79204: PUSH
79205: FOR_TO
79206: IFFALSE 79254
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
79208: LD_OWVAR 2
79212: PUSH
79213: LD_VAR 0 1
79217: NONEQUAL
79218: PUSH
79219: LD_OWVAR 2
79223: PPUSH
79224: LD_VAR 0 1
79228: PPUSH
79229: CALL_OW 81
79233: PUSH
79234: LD_INT 2
79236: EQUAL
79237: AND
79238: IFFALSE 79252
// begin side := i ;
79240: LD_ADDR_VAR 0 3
79244: PUSH
79245: LD_VAR 0 1
79249: ST_TO_ADDR
// break ;
79250: GO 79254
// end ;
79252: GO 79205
79254: POP
79255: POP
// if not side then
79256: LD_VAR 0 3
79260: NOT
79261: IFFALSE 79265
// exit ;
79263: GO 79310
// for i := 1 to tmp do
79265: LD_ADDR_VAR 0 1
79269: PUSH
79270: DOUBLE
79271: LD_INT 1
79273: DEC
79274: ST_TO_ADDR
79275: LD_VAR 0 2
79279: PUSH
79280: FOR_TO
79281: IFFALSE 79308
// if Prob ( 60 ) then
79283: LD_INT 60
79285: PPUSH
79286: CALL_OW 13
79290: IFFALSE 79306
// SetSide ( i , side ) ;
79292: LD_VAR 0 1
79296: PPUSH
79297: LD_VAR 0 3
79301: PPUSH
79302: CALL_OW 235
79306: GO 79280
79308: POP
79309: POP
// end ;
79310: PPOPN 3
79312: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
79313: LD_EXP 75
79317: PUSH
79318: LD_EXP 88
79322: AND
79323: IFFALSE 79442
79325: GO 79327
79327: DISABLE
79328: LD_INT 0
79330: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
79331: LD_ADDR_VAR 0 1
79335: PUSH
79336: LD_INT 22
79338: PUSH
79339: LD_OWVAR 2
79343: PUSH
79344: EMPTY
79345: LIST
79346: LIST
79347: PUSH
79348: LD_INT 21
79350: PUSH
79351: LD_INT 1
79353: PUSH
79354: EMPTY
79355: LIST
79356: LIST
79357: PUSH
79358: LD_INT 3
79360: PUSH
79361: LD_INT 23
79363: PUSH
79364: LD_INT 0
79366: PUSH
79367: EMPTY
79368: LIST
79369: LIST
79370: PUSH
79371: EMPTY
79372: LIST
79373: LIST
79374: PUSH
79375: EMPTY
79376: LIST
79377: LIST
79378: LIST
79379: PPUSH
79380: CALL_OW 69
79384: PUSH
79385: FOR_IN
79386: IFFALSE 79440
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
79388: LD_VAR 0 1
79392: PPUSH
79393: CALL_OW 257
79397: PUSH
79398: LD_INT 1
79400: PUSH
79401: LD_INT 2
79403: PUSH
79404: LD_INT 3
79406: PUSH
79407: LD_INT 4
79409: PUSH
79410: EMPTY
79411: LIST
79412: LIST
79413: LIST
79414: LIST
79415: IN
79416: IFFALSE 79438
// SetClass ( un , rand ( 1 , 4 ) ) ;
79418: LD_VAR 0 1
79422: PPUSH
79423: LD_INT 1
79425: PPUSH
79426: LD_INT 4
79428: PPUSH
79429: CALL_OW 12
79433: PPUSH
79434: CALL_OW 336
79438: GO 79385
79440: POP
79441: POP
// end ;
79442: PPOPN 1
79444: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
79445: LD_EXP 75
79449: PUSH
79450: LD_EXP 87
79454: AND
79455: IFFALSE 79534
79457: GO 79459
79459: DISABLE
79460: LD_INT 0
79462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
79463: LD_ADDR_VAR 0 1
79467: PUSH
79468: LD_INT 22
79470: PUSH
79471: LD_OWVAR 2
79475: PUSH
79476: EMPTY
79477: LIST
79478: LIST
79479: PUSH
79480: LD_INT 21
79482: PUSH
79483: LD_INT 3
79485: PUSH
79486: EMPTY
79487: LIST
79488: LIST
79489: PUSH
79490: EMPTY
79491: LIST
79492: LIST
79493: PPUSH
79494: CALL_OW 69
79498: ST_TO_ADDR
// if not tmp then
79499: LD_VAR 0 1
79503: NOT
79504: IFFALSE 79508
// exit ;
79506: GO 79534
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
79508: LD_VAR 0 1
79512: PUSH
79513: LD_INT 1
79515: PPUSH
79516: LD_VAR 0 1
79520: PPUSH
79521: CALL_OW 12
79525: ARRAY
79526: PPUSH
79527: LD_INT 100
79529: PPUSH
79530: CALL_OW 234
// end ;
79534: PPOPN 1
79536: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
79537: LD_EXP 75
79541: PUSH
79542: LD_EXP 89
79546: AND
79547: IFFALSE 79645
79549: GO 79551
79551: DISABLE
79552: LD_INT 0
79554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79555: LD_ADDR_VAR 0 1
79559: PUSH
79560: LD_INT 22
79562: PUSH
79563: LD_OWVAR 2
79567: PUSH
79568: EMPTY
79569: LIST
79570: LIST
79571: PUSH
79572: LD_INT 21
79574: PUSH
79575: LD_INT 1
79577: PUSH
79578: EMPTY
79579: LIST
79580: LIST
79581: PUSH
79582: EMPTY
79583: LIST
79584: LIST
79585: PPUSH
79586: CALL_OW 69
79590: ST_TO_ADDR
// if not tmp then
79591: LD_VAR 0 1
79595: NOT
79596: IFFALSE 79600
// exit ;
79598: GO 79645
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
79600: LD_VAR 0 1
79604: PUSH
79605: LD_INT 1
79607: PPUSH
79608: LD_VAR 0 1
79612: PPUSH
79613: CALL_OW 12
79617: ARRAY
79618: PPUSH
79619: LD_INT 1
79621: PPUSH
79622: LD_INT 4
79624: PPUSH
79625: CALL_OW 12
79629: PPUSH
79630: LD_INT 3000
79632: PPUSH
79633: LD_INT 9000
79635: PPUSH
79636: CALL_OW 12
79640: PPUSH
79641: CALL_OW 492
// end ;
79645: PPOPN 1
79647: END
// every 0 0$1 trigger StreamModeActive and sDepot do
79648: LD_EXP 75
79652: PUSH
79653: LD_EXP 90
79657: AND
79658: IFFALSE 79678
79660: GO 79662
79662: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
79663: LD_INT 1
79665: PPUSH
79666: LD_OWVAR 2
79670: PPUSH
79671: LD_INT 0
79673: PPUSH
79674: CALL_OW 324
79678: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
79679: LD_EXP 75
79683: PUSH
79684: LD_EXP 91
79688: AND
79689: IFFALSE 79772
79691: GO 79693
79693: DISABLE
79694: LD_INT 0
79696: PPUSH
79697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
79698: LD_ADDR_VAR 0 2
79702: PUSH
79703: LD_INT 22
79705: PUSH
79706: LD_OWVAR 2
79710: PUSH
79711: EMPTY
79712: LIST
79713: LIST
79714: PUSH
79715: LD_INT 21
79717: PUSH
79718: LD_INT 3
79720: PUSH
79721: EMPTY
79722: LIST
79723: LIST
79724: PUSH
79725: EMPTY
79726: LIST
79727: LIST
79728: PPUSH
79729: CALL_OW 69
79733: ST_TO_ADDR
// if not tmp then
79734: LD_VAR 0 2
79738: NOT
79739: IFFALSE 79743
// exit ;
79741: GO 79772
// for i in tmp do
79743: LD_ADDR_VAR 0 1
79747: PUSH
79748: LD_VAR 0 2
79752: PUSH
79753: FOR_IN
79754: IFFALSE 79770
// SetBLevel ( i , 10 ) ;
79756: LD_VAR 0 1
79760: PPUSH
79761: LD_INT 10
79763: PPUSH
79764: CALL_OW 241
79768: GO 79753
79770: POP
79771: POP
// end ;
79772: PPOPN 2
79774: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
79775: LD_EXP 75
79779: PUSH
79780: LD_EXP 92
79784: AND
79785: IFFALSE 79896
79787: GO 79789
79789: DISABLE
79790: LD_INT 0
79792: PPUSH
79793: PPUSH
79794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79795: LD_ADDR_VAR 0 3
79799: PUSH
79800: LD_INT 22
79802: PUSH
79803: LD_OWVAR 2
79807: PUSH
79808: EMPTY
79809: LIST
79810: LIST
79811: PUSH
79812: LD_INT 25
79814: PUSH
79815: LD_INT 1
79817: PUSH
79818: EMPTY
79819: LIST
79820: LIST
79821: PUSH
79822: EMPTY
79823: LIST
79824: LIST
79825: PPUSH
79826: CALL_OW 69
79830: ST_TO_ADDR
// if not tmp then
79831: LD_VAR 0 3
79835: NOT
79836: IFFALSE 79840
// exit ;
79838: GO 79896
// un := tmp [ rand ( 1 , tmp ) ] ;
79840: LD_ADDR_VAR 0 2
79844: PUSH
79845: LD_VAR 0 3
79849: PUSH
79850: LD_INT 1
79852: PPUSH
79853: LD_VAR 0 3
79857: PPUSH
79858: CALL_OW 12
79862: ARRAY
79863: ST_TO_ADDR
// if Crawls ( un ) then
79864: LD_VAR 0 2
79868: PPUSH
79869: CALL_OW 318
79873: IFFALSE 79884
// ComWalk ( un ) ;
79875: LD_VAR 0 2
79879: PPUSH
79880: CALL_OW 138
// SetClass ( un , class_sniper ) ;
79884: LD_VAR 0 2
79888: PPUSH
79889: LD_INT 5
79891: PPUSH
79892: CALL_OW 336
// end ;
79896: PPOPN 3
79898: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
79899: LD_EXP 75
79903: PUSH
79904: LD_EXP 93
79908: AND
79909: PUSH
79910: LD_OWVAR 67
79914: PUSH
79915: LD_INT 4
79917: LESS
79918: AND
79919: IFFALSE 79938
79921: GO 79923
79923: DISABLE
// begin Difficulty := Difficulty + 1 ;
79924: LD_ADDR_OWVAR 67
79928: PUSH
79929: LD_OWVAR 67
79933: PUSH
79934: LD_INT 1
79936: PLUS
79937: ST_TO_ADDR
// end ;
79938: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
79939: LD_EXP 75
79943: PUSH
79944: LD_EXP 94
79948: AND
79949: IFFALSE 80052
79951: GO 79953
79953: DISABLE
79954: LD_INT 0
79956: PPUSH
// begin for i := 1 to 5 do
79957: LD_ADDR_VAR 0 1
79961: PUSH
79962: DOUBLE
79963: LD_INT 1
79965: DEC
79966: ST_TO_ADDR
79967: LD_INT 5
79969: PUSH
79970: FOR_TO
79971: IFFALSE 80050
// begin uc_nation := nation_nature ;
79973: LD_ADDR_OWVAR 21
79977: PUSH
79978: LD_INT 0
79980: ST_TO_ADDR
// uc_side := 0 ;
79981: LD_ADDR_OWVAR 20
79985: PUSH
79986: LD_INT 0
79988: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
79989: LD_ADDR_OWVAR 29
79993: PUSH
79994: LD_INT 12
79996: PUSH
79997: LD_INT 12
79999: PUSH
80000: EMPTY
80001: LIST
80002: LIST
80003: ST_TO_ADDR
// hc_agressivity := 20 ;
80004: LD_ADDR_OWVAR 35
80008: PUSH
80009: LD_INT 20
80011: ST_TO_ADDR
// hc_class := class_tiger ;
80012: LD_ADDR_OWVAR 28
80016: PUSH
80017: LD_INT 14
80019: ST_TO_ADDR
// hc_gallery :=  ;
80020: LD_ADDR_OWVAR 33
80024: PUSH
80025: LD_STRING 
80027: ST_TO_ADDR
// hc_name :=  ;
80028: LD_ADDR_OWVAR 26
80032: PUSH
80033: LD_STRING 
80035: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
80036: CALL_OW 44
80040: PPUSH
80041: LD_INT 0
80043: PPUSH
80044: CALL_OW 51
// end ;
80048: GO 79970
80050: POP
80051: POP
// end ;
80052: PPOPN 1
80054: END
// every 0 0$1 trigger StreamModeActive and sBomb do
80055: LD_EXP 75
80059: PUSH
80060: LD_EXP 95
80064: AND
80065: IFFALSE 80074
80067: GO 80069
80069: DISABLE
// StreamSibBomb ;
80070: CALL 80075 0 0
80074: END
// export function StreamSibBomb ; var i , x , y ; begin
80075: LD_INT 0
80077: PPUSH
80078: PPUSH
80079: PPUSH
80080: PPUSH
// result := false ;
80081: LD_ADDR_VAR 0 1
80085: PUSH
80086: LD_INT 0
80088: ST_TO_ADDR
// for i := 1 to 16 do
80089: LD_ADDR_VAR 0 2
80093: PUSH
80094: DOUBLE
80095: LD_INT 1
80097: DEC
80098: ST_TO_ADDR
80099: LD_INT 16
80101: PUSH
80102: FOR_TO
80103: IFFALSE 80302
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
80105: LD_ADDR_VAR 0 3
80109: PUSH
80110: LD_INT 10
80112: PUSH
80113: LD_INT 20
80115: PUSH
80116: LD_INT 30
80118: PUSH
80119: LD_INT 40
80121: PUSH
80122: LD_INT 50
80124: PUSH
80125: LD_INT 60
80127: PUSH
80128: LD_INT 70
80130: PUSH
80131: LD_INT 80
80133: PUSH
80134: LD_INT 90
80136: PUSH
80137: LD_INT 100
80139: PUSH
80140: LD_INT 110
80142: PUSH
80143: LD_INT 120
80145: PUSH
80146: LD_INT 130
80148: PUSH
80149: LD_INT 140
80151: PUSH
80152: LD_INT 150
80154: PUSH
80155: EMPTY
80156: LIST
80157: LIST
80158: LIST
80159: LIST
80160: LIST
80161: LIST
80162: LIST
80163: LIST
80164: LIST
80165: LIST
80166: LIST
80167: LIST
80168: LIST
80169: LIST
80170: LIST
80171: PUSH
80172: LD_INT 1
80174: PPUSH
80175: LD_INT 15
80177: PPUSH
80178: CALL_OW 12
80182: ARRAY
80183: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
80184: LD_ADDR_VAR 0 4
80188: PUSH
80189: LD_INT 10
80191: PUSH
80192: LD_INT 20
80194: PUSH
80195: LD_INT 30
80197: PUSH
80198: LD_INT 40
80200: PUSH
80201: LD_INT 50
80203: PUSH
80204: LD_INT 60
80206: PUSH
80207: LD_INT 70
80209: PUSH
80210: LD_INT 80
80212: PUSH
80213: LD_INT 90
80215: PUSH
80216: LD_INT 100
80218: PUSH
80219: LD_INT 110
80221: PUSH
80222: LD_INT 120
80224: PUSH
80225: LD_INT 130
80227: PUSH
80228: LD_INT 140
80230: PUSH
80231: LD_INT 150
80233: PUSH
80234: EMPTY
80235: LIST
80236: LIST
80237: LIST
80238: LIST
80239: LIST
80240: LIST
80241: LIST
80242: LIST
80243: LIST
80244: LIST
80245: LIST
80246: LIST
80247: LIST
80248: LIST
80249: LIST
80250: PUSH
80251: LD_INT 1
80253: PPUSH
80254: LD_INT 15
80256: PPUSH
80257: CALL_OW 12
80261: ARRAY
80262: ST_TO_ADDR
// if ValidHex ( x , y ) then
80263: LD_VAR 0 3
80267: PPUSH
80268: LD_VAR 0 4
80272: PPUSH
80273: CALL_OW 488
80277: IFFALSE 80300
// begin result := [ x , y ] ;
80279: LD_ADDR_VAR 0 1
80283: PUSH
80284: LD_VAR 0 3
80288: PUSH
80289: LD_VAR 0 4
80293: PUSH
80294: EMPTY
80295: LIST
80296: LIST
80297: ST_TO_ADDR
// break ;
80298: GO 80302
// end ; end ;
80300: GO 80102
80302: POP
80303: POP
// if result then
80304: LD_VAR 0 1
80308: IFFALSE 80368
// begin ToLua ( playSibBomb() ) ;
80310: LD_STRING playSibBomb()
80312: PPUSH
80313: CALL_OW 559
// wait ( 0 0$14 ) ;
80317: LD_INT 490
80319: PPUSH
80320: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
80324: LD_VAR 0 1
80328: PUSH
80329: LD_INT 1
80331: ARRAY
80332: PPUSH
80333: LD_VAR 0 1
80337: PUSH
80338: LD_INT 2
80340: ARRAY
80341: PPUSH
80342: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
80346: LD_VAR 0 1
80350: PUSH
80351: LD_INT 1
80353: ARRAY
80354: PPUSH
80355: LD_VAR 0 1
80359: PUSH
80360: LD_INT 2
80362: ARRAY
80363: PPUSH
80364: CALL_OW 429
// end ; end ;
80368: LD_VAR 0 1
80372: RET
// every 0 0$1 trigger StreamModeActive and sReset do
80373: LD_EXP 75
80377: PUSH
80378: LD_EXP 97
80382: AND
80383: IFFALSE 80395
80385: GO 80387
80387: DISABLE
// YouLost (  ) ;
80388: LD_STRING 
80390: PPUSH
80391: CALL_OW 104
80395: END
// every 0 0$1 trigger StreamModeActive and sFog do
80396: LD_EXP 75
80400: PUSH
80401: LD_EXP 96
80405: AND
80406: IFFALSE 80420
80408: GO 80410
80410: DISABLE
// FogOff ( your_side ) ;
80411: LD_OWVAR 2
80415: PPUSH
80416: CALL_OW 344
80420: END
// every 0 0$1 trigger StreamModeActive and sSun do
80421: LD_EXP 75
80425: PUSH
80426: LD_EXP 98
80430: AND
80431: IFFALSE 80459
80433: GO 80435
80435: DISABLE
// begin solar_recharge_percent := 0 ;
80436: LD_ADDR_OWVAR 79
80440: PUSH
80441: LD_INT 0
80443: ST_TO_ADDR
// wait ( 5 5$00 ) ;
80444: LD_INT 10500
80446: PPUSH
80447: CALL_OW 67
// solar_recharge_percent := 100 ;
80451: LD_ADDR_OWVAR 79
80455: PUSH
80456: LD_INT 100
80458: ST_TO_ADDR
// end ;
80459: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
80460: LD_EXP 75
80464: PUSH
80465: LD_EXP 99
80469: AND
80470: IFFALSE 80709
80472: GO 80474
80474: DISABLE
80475: LD_INT 0
80477: PPUSH
80478: PPUSH
80479: PPUSH
// begin tmp := [ ] ;
80480: LD_ADDR_VAR 0 3
80484: PUSH
80485: EMPTY
80486: ST_TO_ADDR
// for i := 1 to 6 do
80487: LD_ADDR_VAR 0 1
80491: PUSH
80492: DOUBLE
80493: LD_INT 1
80495: DEC
80496: ST_TO_ADDR
80497: LD_INT 6
80499: PUSH
80500: FOR_TO
80501: IFFALSE 80606
// begin uc_nation := nation_nature ;
80503: LD_ADDR_OWVAR 21
80507: PUSH
80508: LD_INT 0
80510: ST_TO_ADDR
// uc_side := 0 ;
80511: LD_ADDR_OWVAR 20
80515: PUSH
80516: LD_INT 0
80518: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
80519: LD_ADDR_OWVAR 29
80523: PUSH
80524: LD_INT 12
80526: PUSH
80527: LD_INT 12
80529: PUSH
80530: EMPTY
80531: LIST
80532: LIST
80533: ST_TO_ADDR
// hc_agressivity := 20 ;
80534: LD_ADDR_OWVAR 35
80538: PUSH
80539: LD_INT 20
80541: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
80542: LD_ADDR_OWVAR 28
80546: PUSH
80547: LD_INT 17
80549: ST_TO_ADDR
// hc_gallery :=  ;
80550: LD_ADDR_OWVAR 33
80554: PUSH
80555: LD_STRING 
80557: ST_TO_ADDR
// hc_name :=  ;
80558: LD_ADDR_OWVAR 26
80562: PUSH
80563: LD_STRING 
80565: ST_TO_ADDR
// un := CreateHuman ;
80566: LD_ADDR_VAR 0 2
80570: PUSH
80571: CALL_OW 44
80575: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
80576: LD_VAR 0 2
80580: PPUSH
80581: LD_INT 1
80583: PPUSH
80584: CALL_OW 51
// tmp := tmp ^ un ;
80588: LD_ADDR_VAR 0 3
80592: PUSH
80593: LD_VAR 0 3
80597: PUSH
80598: LD_VAR 0 2
80602: ADD
80603: ST_TO_ADDR
// end ;
80604: GO 80500
80606: POP
80607: POP
// repeat wait ( 0 0$1 ) ;
80608: LD_INT 35
80610: PPUSH
80611: CALL_OW 67
// for un in tmp do
80615: LD_ADDR_VAR 0 2
80619: PUSH
80620: LD_VAR 0 3
80624: PUSH
80625: FOR_IN
80626: IFFALSE 80700
// begin if IsDead ( un ) then
80628: LD_VAR 0 2
80632: PPUSH
80633: CALL_OW 301
80637: IFFALSE 80657
// begin tmp := tmp diff un ;
80639: LD_ADDR_VAR 0 3
80643: PUSH
80644: LD_VAR 0 3
80648: PUSH
80649: LD_VAR 0 2
80653: DIFF
80654: ST_TO_ADDR
// continue ;
80655: GO 80625
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
80657: LD_VAR 0 2
80661: PPUSH
80662: LD_INT 3
80664: PUSH
80665: LD_INT 22
80667: PUSH
80668: LD_INT 0
80670: PUSH
80671: EMPTY
80672: LIST
80673: LIST
80674: PUSH
80675: EMPTY
80676: LIST
80677: LIST
80678: PPUSH
80679: CALL_OW 69
80683: PPUSH
80684: LD_VAR 0 2
80688: PPUSH
80689: CALL_OW 74
80693: PPUSH
80694: CALL_OW 115
// end ;
80698: GO 80625
80700: POP
80701: POP
// until not tmp ;
80702: LD_VAR 0 3
80706: NOT
80707: IFFALSE 80608
// end ;
80709: PPOPN 3
80711: END
// every 0 0$1 trigger StreamModeActive and sTroll do
80712: LD_EXP 75
80716: PUSH
80717: LD_EXP 100
80721: AND
80722: IFFALSE 80776
80724: GO 80726
80726: DISABLE
// begin ToLua ( displayTroll(); ) ;
80727: LD_STRING displayTroll();
80729: PPUSH
80730: CALL_OW 559
// wait ( 3 3$00 ) ;
80734: LD_INT 6300
80736: PPUSH
80737: CALL_OW 67
// ToLua ( hideTroll(); ) ;
80741: LD_STRING hideTroll();
80743: PPUSH
80744: CALL_OW 559
// wait ( 1 1$00 ) ;
80748: LD_INT 2100
80750: PPUSH
80751: CALL_OW 67
// ToLua ( displayTroll(); ) ;
80755: LD_STRING displayTroll();
80757: PPUSH
80758: CALL_OW 559
// wait ( 1 1$00 ) ;
80762: LD_INT 2100
80764: PPUSH
80765: CALL_OW 67
// ToLua ( hideTroll(); ) ;
80769: LD_STRING hideTroll();
80771: PPUSH
80772: CALL_OW 559
// end ;
80776: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
80777: LD_EXP 75
80781: PUSH
80782: LD_EXP 101
80786: AND
80787: IFFALSE 80850
80789: GO 80791
80791: DISABLE
80792: LD_INT 0
80794: PPUSH
// begin p := 0 ;
80795: LD_ADDR_VAR 0 1
80799: PUSH
80800: LD_INT 0
80802: ST_TO_ADDR
// repeat game_speed := 1 ;
80803: LD_ADDR_OWVAR 65
80807: PUSH
80808: LD_INT 1
80810: ST_TO_ADDR
// wait ( 0 0$1 ) ;
80811: LD_INT 35
80813: PPUSH
80814: CALL_OW 67
// p := p + 1 ;
80818: LD_ADDR_VAR 0 1
80822: PUSH
80823: LD_VAR 0 1
80827: PUSH
80828: LD_INT 1
80830: PLUS
80831: ST_TO_ADDR
// until p >= 60 ;
80832: LD_VAR 0 1
80836: PUSH
80837: LD_INT 60
80839: GREATEREQUAL
80840: IFFALSE 80803
// game_speed := 4 ;
80842: LD_ADDR_OWVAR 65
80846: PUSH
80847: LD_INT 4
80849: ST_TO_ADDR
// end ;
80850: PPOPN 1
80852: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
80853: LD_EXP 75
80857: PUSH
80858: LD_EXP 102
80862: AND
80863: IFFALSE 81009
80865: GO 80867
80867: DISABLE
80868: LD_INT 0
80870: PPUSH
80871: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80872: LD_ADDR_VAR 0 1
80876: PUSH
80877: LD_INT 22
80879: PUSH
80880: LD_OWVAR 2
80884: PUSH
80885: EMPTY
80886: LIST
80887: LIST
80888: PUSH
80889: LD_INT 2
80891: PUSH
80892: LD_INT 30
80894: PUSH
80895: LD_INT 0
80897: PUSH
80898: EMPTY
80899: LIST
80900: LIST
80901: PUSH
80902: LD_INT 30
80904: PUSH
80905: LD_INT 1
80907: PUSH
80908: EMPTY
80909: LIST
80910: LIST
80911: PUSH
80912: EMPTY
80913: LIST
80914: LIST
80915: LIST
80916: PUSH
80917: EMPTY
80918: LIST
80919: LIST
80920: PPUSH
80921: CALL_OW 69
80925: ST_TO_ADDR
// if not depot then
80926: LD_VAR 0 1
80930: NOT
80931: IFFALSE 80935
// exit ;
80933: GO 81009
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
80935: LD_ADDR_VAR 0 2
80939: PUSH
80940: LD_VAR 0 1
80944: PUSH
80945: LD_INT 1
80947: PPUSH
80948: LD_VAR 0 1
80952: PPUSH
80953: CALL_OW 12
80957: ARRAY
80958: PPUSH
80959: CALL_OW 274
80963: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
80964: LD_VAR 0 2
80968: PPUSH
80969: LD_INT 1
80971: PPUSH
80972: LD_INT 0
80974: PPUSH
80975: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
80979: LD_VAR 0 2
80983: PPUSH
80984: LD_INT 2
80986: PPUSH
80987: LD_INT 0
80989: PPUSH
80990: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
80994: LD_VAR 0 2
80998: PPUSH
80999: LD_INT 3
81001: PPUSH
81002: LD_INT 0
81004: PPUSH
81005: CALL_OW 277
// end ;
81009: PPOPN 2
81011: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
81012: LD_EXP 75
81016: PUSH
81017: LD_EXP 103
81021: AND
81022: IFFALSE 81119
81024: GO 81026
81026: DISABLE
81027: LD_INT 0
81029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81030: LD_ADDR_VAR 0 1
81034: PUSH
81035: LD_INT 22
81037: PUSH
81038: LD_OWVAR 2
81042: PUSH
81043: EMPTY
81044: LIST
81045: LIST
81046: PUSH
81047: LD_INT 21
81049: PUSH
81050: LD_INT 1
81052: PUSH
81053: EMPTY
81054: LIST
81055: LIST
81056: PUSH
81057: LD_INT 3
81059: PUSH
81060: LD_INT 23
81062: PUSH
81063: LD_INT 0
81065: PUSH
81066: EMPTY
81067: LIST
81068: LIST
81069: PUSH
81070: EMPTY
81071: LIST
81072: LIST
81073: PUSH
81074: EMPTY
81075: LIST
81076: LIST
81077: LIST
81078: PPUSH
81079: CALL_OW 69
81083: ST_TO_ADDR
// if not tmp then
81084: LD_VAR 0 1
81088: NOT
81089: IFFALSE 81093
// exit ;
81091: GO 81119
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
81093: LD_VAR 0 1
81097: PUSH
81098: LD_INT 1
81100: PPUSH
81101: LD_VAR 0 1
81105: PPUSH
81106: CALL_OW 12
81110: ARRAY
81111: PPUSH
81112: LD_INT 200
81114: PPUSH
81115: CALL_OW 234
// end ;
81119: PPOPN 1
81121: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
81122: LD_EXP 75
81126: PUSH
81127: LD_EXP 104
81131: AND
81132: IFFALSE 81211
81134: GO 81136
81136: DISABLE
81137: LD_INT 0
81139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
81140: LD_ADDR_VAR 0 1
81144: PUSH
81145: LD_INT 22
81147: PUSH
81148: LD_OWVAR 2
81152: PUSH
81153: EMPTY
81154: LIST
81155: LIST
81156: PUSH
81157: LD_INT 21
81159: PUSH
81160: LD_INT 2
81162: PUSH
81163: EMPTY
81164: LIST
81165: LIST
81166: PUSH
81167: EMPTY
81168: LIST
81169: LIST
81170: PPUSH
81171: CALL_OW 69
81175: ST_TO_ADDR
// if not tmp then
81176: LD_VAR 0 1
81180: NOT
81181: IFFALSE 81185
// exit ;
81183: GO 81211
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
81185: LD_VAR 0 1
81189: PUSH
81190: LD_INT 1
81192: PPUSH
81193: LD_VAR 0 1
81197: PPUSH
81198: CALL_OW 12
81202: ARRAY
81203: PPUSH
81204: LD_INT 60
81206: PPUSH
81207: CALL_OW 234
// end ;
81211: PPOPN 1
81213: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
81214: LD_EXP 75
81218: PUSH
81219: LD_EXP 105
81223: AND
81224: IFFALSE 81323
81226: GO 81228
81228: DISABLE
81229: LD_INT 0
81231: PPUSH
81232: PPUSH
// begin enable ;
81233: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
81234: LD_ADDR_VAR 0 1
81238: PUSH
81239: LD_INT 22
81241: PUSH
81242: LD_OWVAR 2
81246: PUSH
81247: EMPTY
81248: LIST
81249: LIST
81250: PUSH
81251: LD_INT 61
81253: PUSH
81254: EMPTY
81255: LIST
81256: PUSH
81257: LD_INT 33
81259: PUSH
81260: LD_INT 2
81262: PUSH
81263: EMPTY
81264: LIST
81265: LIST
81266: PUSH
81267: EMPTY
81268: LIST
81269: LIST
81270: LIST
81271: PPUSH
81272: CALL_OW 69
81276: ST_TO_ADDR
// if not tmp then
81277: LD_VAR 0 1
81281: NOT
81282: IFFALSE 81286
// exit ;
81284: GO 81323
// for i in tmp do
81286: LD_ADDR_VAR 0 2
81290: PUSH
81291: LD_VAR 0 1
81295: PUSH
81296: FOR_IN
81297: IFFALSE 81321
// if IsControledBy ( i ) then
81299: LD_VAR 0 2
81303: PPUSH
81304: CALL_OW 312
81308: IFFALSE 81319
// ComUnlink ( i ) ;
81310: LD_VAR 0 2
81314: PPUSH
81315: CALL_OW 136
81319: GO 81296
81321: POP
81322: POP
// end ;
81323: PPOPN 2
81325: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
81326: LD_EXP 75
81330: PUSH
81331: LD_EXP 106
81335: AND
81336: IFFALSE 81476
81338: GO 81340
81340: DISABLE
81341: LD_INT 0
81343: PPUSH
81344: PPUSH
// begin ToLua ( displayPowell(); ) ;
81345: LD_STRING displayPowell();
81347: PPUSH
81348: CALL_OW 559
// uc_side := 0 ;
81352: LD_ADDR_OWVAR 20
81356: PUSH
81357: LD_INT 0
81359: ST_TO_ADDR
// uc_nation := 2 ;
81360: LD_ADDR_OWVAR 21
81364: PUSH
81365: LD_INT 2
81367: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
81368: LD_ADDR_OWVAR 37
81372: PUSH
81373: LD_INT 14
81375: ST_TO_ADDR
// vc_engine := engine_siberite ;
81376: LD_ADDR_OWVAR 39
81380: PUSH
81381: LD_INT 3
81383: ST_TO_ADDR
// vc_control := control_apeman ;
81384: LD_ADDR_OWVAR 38
81388: PUSH
81389: LD_INT 5
81391: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
81392: LD_ADDR_OWVAR 40
81396: PUSH
81397: LD_INT 29
81399: ST_TO_ADDR
// un := CreateVehicle ;
81400: LD_ADDR_VAR 0 2
81404: PUSH
81405: CALL_OW 45
81409: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
81410: LD_VAR 0 2
81414: PPUSH
81415: LD_INT 1
81417: PPUSH
81418: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
81422: LD_INT 35
81424: PPUSH
81425: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
81429: LD_VAR 0 2
81433: PPUSH
81434: LD_INT 22
81436: PUSH
81437: LD_OWVAR 2
81441: PUSH
81442: EMPTY
81443: LIST
81444: LIST
81445: PPUSH
81446: CALL_OW 69
81450: PPUSH
81451: LD_VAR 0 2
81455: PPUSH
81456: CALL_OW 74
81460: PPUSH
81461: CALL_OW 115
// until IsDead ( un ) ;
81465: LD_VAR 0 2
81469: PPUSH
81470: CALL_OW 301
81474: IFFALSE 81422
// end ;
81476: PPOPN 2
81478: END
// every 0 0$1 trigger StreamModeActive and sStu do
81479: LD_EXP 75
81483: PUSH
81484: LD_EXP 114
81488: AND
81489: IFFALSE 81505
81491: GO 81493
81493: DISABLE
// begin ToLua ( displayStucuk(); ) ;
81494: LD_STRING displayStucuk();
81496: PPUSH
81497: CALL_OW 559
// ResetFog ;
81501: CALL_OW 335
// end ;
81505: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
81506: LD_EXP 75
81510: PUSH
81511: LD_EXP 107
81515: AND
81516: IFFALSE 81657
81518: GO 81520
81520: DISABLE
81521: LD_INT 0
81523: PPUSH
81524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81525: LD_ADDR_VAR 0 2
81529: PUSH
81530: LD_INT 22
81532: PUSH
81533: LD_OWVAR 2
81537: PUSH
81538: EMPTY
81539: LIST
81540: LIST
81541: PUSH
81542: LD_INT 21
81544: PUSH
81545: LD_INT 1
81547: PUSH
81548: EMPTY
81549: LIST
81550: LIST
81551: PUSH
81552: EMPTY
81553: LIST
81554: LIST
81555: PPUSH
81556: CALL_OW 69
81560: ST_TO_ADDR
// if not tmp then
81561: LD_VAR 0 2
81565: NOT
81566: IFFALSE 81570
// exit ;
81568: GO 81657
// un := tmp [ rand ( 1 , tmp ) ] ;
81570: LD_ADDR_VAR 0 1
81574: PUSH
81575: LD_VAR 0 2
81579: PUSH
81580: LD_INT 1
81582: PPUSH
81583: LD_VAR 0 2
81587: PPUSH
81588: CALL_OW 12
81592: ARRAY
81593: ST_TO_ADDR
// SetSide ( un , 0 ) ;
81594: LD_VAR 0 1
81598: PPUSH
81599: LD_INT 0
81601: PPUSH
81602: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
81606: LD_VAR 0 1
81610: PPUSH
81611: LD_OWVAR 3
81615: PUSH
81616: LD_VAR 0 1
81620: DIFF
81621: PPUSH
81622: LD_VAR 0 1
81626: PPUSH
81627: CALL_OW 74
81631: PPUSH
81632: CALL_OW 115
// wait ( 0 0$20 ) ;
81636: LD_INT 700
81638: PPUSH
81639: CALL_OW 67
// SetSide ( un , your_side ) ;
81643: LD_VAR 0 1
81647: PPUSH
81648: LD_OWVAR 2
81652: PPUSH
81653: CALL_OW 235
// end ;
81657: PPOPN 2
81659: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
81660: LD_EXP 75
81664: PUSH
81665: LD_EXP 108
81669: AND
81670: IFFALSE 81776
81672: GO 81674
81674: DISABLE
81675: LD_INT 0
81677: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81678: LD_ADDR_VAR 0 1
81682: PUSH
81683: LD_INT 22
81685: PUSH
81686: LD_OWVAR 2
81690: PUSH
81691: EMPTY
81692: LIST
81693: LIST
81694: PUSH
81695: LD_INT 2
81697: PUSH
81698: LD_INT 30
81700: PUSH
81701: LD_INT 0
81703: PUSH
81704: EMPTY
81705: LIST
81706: LIST
81707: PUSH
81708: LD_INT 30
81710: PUSH
81711: LD_INT 1
81713: PUSH
81714: EMPTY
81715: LIST
81716: LIST
81717: PUSH
81718: EMPTY
81719: LIST
81720: LIST
81721: LIST
81722: PUSH
81723: EMPTY
81724: LIST
81725: LIST
81726: PPUSH
81727: CALL_OW 69
81731: ST_TO_ADDR
// if not depot then
81732: LD_VAR 0 1
81736: NOT
81737: IFFALSE 81741
// exit ;
81739: GO 81776
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
81741: LD_VAR 0 1
81745: PUSH
81746: LD_INT 1
81748: ARRAY
81749: PPUSH
81750: CALL_OW 250
81754: PPUSH
81755: LD_VAR 0 1
81759: PUSH
81760: LD_INT 1
81762: ARRAY
81763: PPUSH
81764: CALL_OW 251
81768: PPUSH
81769: LD_INT 70
81771: PPUSH
81772: CALL_OW 495
// end ;
81776: PPOPN 1
81778: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
81779: LD_EXP 75
81783: PUSH
81784: LD_EXP 109
81788: AND
81789: IFFALSE 82000
81791: GO 81793
81793: DISABLE
81794: LD_INT 0
81796: PPUSH
81797: PPUSH
81798: PPUSH
81799: PPUSH
81800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81801: LD_ADDR_VAR 0 5
81805: PUSH
81806: LD_INT 22
81808: PUSH
81809: LD_OWVAR 2
81813: PUSH
81814: EMPTY
81815: LIST
81816: LIST
81817: PUSH
81818: LD_INT 21
81820: PUSH
81821: LD_INT 1
81823: PUSH
81824: EMPTY
81825: LIST
81826: LIST
81827: PUSH
81828: EMPTY
81829: LIST
81830: LIST
81831: PPUSH
81832: CALL_OW 69
81836: ST_TO_ADDR
// if not tmp then
81837: LD_VAR 0 5
81841: NOT
81842: IFFALSE 81846
// exit ;
81844: GO 82000
// for i in tmp do
81846: LD_ADDR_VAR 0 1
81850: PUSH
81851: LD_VAR 0 5
81855: PUSH
81856: FOR_IN
81857: IFFALSE 81998
// begin d := rand ( 0 , 5 ) ;
81859: LD_ADDR_VAR 0 4
81863: PUSH
81864: LD_INT 0
81866: PPUSH
81867: LD_INT 5
81869: PPUSH
81870: CALL_OW 12
81874: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
81875: LD_ADDR_VAR 0 2
81879: PUSH
81880: LD_VAR 0 1
81884: PPUSH
81885: CALL_OW 250
81889: PPUSH
81890: LD_VAR 0 4
81894: PPUSH
81895: LD_INT 3
81897: PPUSH
81898: LD_INT 12
81900: PPUSH
81901: CALL_OW 12
81905: PPUSH
81906: CALL_OW 272
81910: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
81911: LD_ADDR_VAR 0 3
81915: PUSH
81916: LD_VAR 0 1
81920: PPUSH
81921: CALL_OW 251
81925: PPUSH
81926: LD_VAR 0 4
81930: PPUSH
81931: LD_INT 3
81933: PPUSH
81934: LD_INT 12
81936: PPUSH
81937: CALL_OW 12
81941: PPUSH
81942: CALL_OW 273
81946: ST_TO_ADDR
// if ValidHex ( x , y ) then
81947: LD_VAR 0 2
81951: PPUSH
81952: LD_VAR 0 3
81956: PPUSH
81957: CALL_OW 488
81961: IFFALSE 81996
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
81963: LD_VAR 0 1
81967: PPUSH
81968: LD_VAR 0 2
81972: PPUSH
81973: LD_VAR 0 3
81977: PPUSH
81978: LD_INT 3
81980: PPUSH
81981: LD_INT 6
81983: PPUSH
81984: CALL_OW 12
81988: PPUSH
81989: LD_INT 1
81991: PPUSH
81992: CALL_OW 483
// end ;
81996: GO 81856
81998: POP
81999: POP
// end ;
82000: PPOPN 5
82002: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
82003: LD_EXP 75
82007: PUSH
82008: LD_EXP 110
82012: AND
82013: IFFALSE 82107
82015: GO 82017
82017: DISABLE
82018: LD_INT 0
82020: PPUSH
82021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
82022: LD_ADDR_VAR 0 2
82026: PUSH
82027: LD_INT 22
82029: PUSH
82030: LD_OWVAR 2
82034: PUSH
82035: EMPTY
82036: LIST
82037: LIST
82038: PUSH
82039: LD_INT 32
82041: PUSH
82042: LD_INT 1
82044: PUSH
82045: EMPTY
82046: LIST
82047: LIST
82048: PUSH
82049: LD_INT 21
82051: PUSH
82052: LD_INT 2
82054: PUSH
82055: EMPTY
82056: LIST
82057: LIST
82058: PUSH
82059: EMPTY
82060: LIST
82061: LIST
82062: LIST
82063: PPUSH
82064: CALL_OW 69
82068: ST_TO_ADDR
// if not tmp then
82069: LD_VAR 0 2
82073: NOT
82074: IFFALSE 82078
// exit ;
82076: GO 82107
// for i in tmp do
82078: LD_ADDR_VAR 0 1
82082: PUSH
82083: LD_VAR 0 2
82087: PUSH
82088: FOR_IN
82089: IFFALSE 82105
// SetFuel ( i , 0 ) ;
82091: LD_VAR 0 1
82095: PPUSH
82096: LD_INT 0
82098: PPUSH
82099: CALL_OW 240
82103: GO 82088
82105: POP
82106: POP
// end ;
82107: PPOPN 2
82109: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
82110: LD_EXP 75
82114: PUSH
82115: LD_EXP 111
82119: AND
82120: IFFALSE 82186
82122: GO 82124
82124: DISABLE
82125: LD_INT 0
82127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
82128: LD_ADDR_VAR 0 1
82132: PUSH
82133: LD_INT 22
82135: PUSH
82136: LD_OWVAR 2
82140: PUSH
82141: EMPTY
82142: LIST
82143: LIST
82144: PUSH
82145: LD_INT 30
82147: PUSH
82148: LD_INT 29
82150: PUSH
82151: EMPTY
82152: LIST
82153: LIST
82154: PUSH
82155: EMPTY
82156: LIST
82157: LIST
82158: PPUSH
82159: CALL_OW 69
82163: ST_TO_ADDR
// if not tmp then
82164: LD_VAR 0 1
82168: NOT
82169: IFFALSE 82173
// exit ;
82171: GO 82186
// DestroyUnit ( tmp [ 1 ] ) ;
82173: LD_VAR 0 1
82177: PUSH
82178: LD_INT 1
82180: ARRAY
82181: PPUSH
82182: CALL_OW 65
// end ;
82186: PPOPN 1
82188: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
82189: LD_EXP 75
82193: PUSH
82194: LD_EXP 113
82198: AND
82199: IFFALSE 82328
82201: GO 82203
82203: DISABLE
82204: LD_INT 0
82206: PPUSH
// begin uc_side := 0 ;
82207: LD_ADDR_OWVAR 20
82211: PUSH
82212: LD_INT 0
82214: ST_TO_ADDR
// uc_nation := nation_arabian ;
82215: LD_ADDR_OWVAR 21
82219: PUSH
82220: LD_INT 2
82222: ST_TO_ADDR
// hc_gallery :=  ;
82223: LD_ADDR_OWVAR 33
82227: PUSH
82228: LD_STRING 
82230: ST_TO_ADDR
// hc_name :=  ;
82231: LD_ADDR_OWVAR 26
82235: PUSH
82236: LD_STRING 
82238: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
82239: LD_INT 1
82241: PPUSH
82242: LD_INT 11
82244: PPUSH
82245: LD_INT 10
82247: PPUSH
82248: CALL_OW 380
// un := CreateHuman ;
82252: LD_ADDR_VAR 0 1
82256: PUSH
82257: CALL_OW 44
82261: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82262: LD_VAR 0 1
82266: PPUSH
82267: LD_INT 1
82269: PPUSH
82270: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
82274: LD_INT 35
82276: PPUSH
82277: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
82281: LD_VAR 0 1
82285: PPUSH
82286: LD_INT 22
82288: PUSH
82289: LD_OWVAR 2
82293: PUSH
82294: EMPTY
82295: LIST
82296: LIST
82297: PPUSH
82298: CALL_OW 69
82302: PPUSH
82303: LD_VAR 0 1
82307: PPUSH
82308: CALL_OW 74
82312: PPUSH
82313: CALL_OW 115
// until IsDead ( un ) ;
82317: LD_VAR 0 1
82321: PPUSH
82322: CALL_OW 301
82326: IFFALSE 82274
// end ;
82328: PPOPN 1
82330: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
82331: LD_EXP 75
82335: PUSH
82336: LD_EXP 115
82340: AND
82341: IFFALSE 82353
82343: GO 82345
82345: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
82346: LD_STRING earthquake(getX(game), 0, 32)
82348: PPUSH
82349: CALL_OW 559
82353: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
82354: LD_EXP 75
82358: PUSH
82359: LD_EXP 116
82363: AND
82364: IFFALSE 82455
82366: GO 82368
82368: DISABLE
82369: LD_INT 0
82371: PPUSH
// begin enable ;
82372: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
82373: LD_ADDR_VAR 0 1
82377: PUSH
82378: LD_INT 22
82380: PUSH
82381: LD_OWVAR 2
82385: PUSH
82386: EMPTY
82387: LIST
82388: LIST
82389: PUSH
82390: LD_INT 21
82392: PUSH
82393: LD_INT 2
82395: PUSH
82396: EMPTY
82397: LIST
82398: LIST
82399: PUSH
82400: LD_INT 33
82402: PUSH
82403: LD_INT 3
82405: PUSH
82406: EMPTY
82407: LIST
82408: LIST
82409: PUSH
82410: EMPTY
82411: LIST
82412: LIST
82413: LIST
82414: PPUSH
82415: CALL_OW 69
82419: ST_TO_ADDR
// if not tmp then
82420: LD_VAR 0 1
82424: NOT
82425: IFFALSE 82429
// exit ;
82427: GO 82455
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
82429: LD_VAR 0 1
82433: PUSH
82434: LD_INT 1
82436: PPUSH
82437: LD_VAR 0 1
82441: PPUSH
82442: CALL_OW 12
82446: ARRAY
82447: PPUSH
82448: LD_INT 1
82450: PPUSH
82451: CALL_OW 234
// end ;
82455: PPOPN 1
82457: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
82458: LD_EXP 75
82462: PUSH
82463: LD_EXP 117
82467: AND
82468: IFFALSE 82609
82470: GO 82472
82472: DISABLE
82473: LD_INT 0
82475: PPUSH
82476: PPUSH
82477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82478: LD_ADDR_VAR 0 3
82482: PUSH
82483: LD_INT 22
82485: PUSH
82486: LD_OWVAR 2
82490: PUSH
82491: EMPTY
82492: LIST
82493: LIST
82494: PUSH
82495: LD_INT 25
82497: PUSH
82498: LD_INT 1
82500: PUSH
82501: EMPTY
82502: LIST
82503: LIST
82504: PUSH
82505: EMPTY
82506: LIST
82507: LIST
82508: PPUSH
82509: CALL_OW 69
82513: ST_TO_ADDR
// if not tmp then
82514: LD_VAR 0 3
82518: NOT
82519: IFFALSE 82523
// exit ;
82521: GO 82609
// un := tmp [ rand ( 1 , tmp ) ] ;
82523: LD_ADDR_VAR 0 2
82527: PUSH
82528: LD_VAR 0 3
82532: PUSH
82533: LD_INT 1
82535: PPUSH
82536: LD_VAR 0 3
82540: PPUSH
82541: CALL_OW 12
82545: ARRAY
82546: ST_TO_ADDR
// if Crawls ( un ) then
82547: LD_VAR 0 2
82551: PPUSH
82552: CALL_OW 318
82556: IFFALSE 82567
// ComWalk ( un ) ;
82558: LD_VAR 0 2
82562: PPUSH
82563: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
82567: LD_VAR 0 2
82571: PPUSH
82572: LD_INT 9
82574: PPUSH
82575: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
82579: LD_INT 28
82581: PPUSH
82582: LD_OWVAR 2
82586: PPUSH
82587: LD_INT 2
82589: PPUSH
82590: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
82594: LD_INT 29
82596: PPUSH
82597: LD_OWVAR 2
82601: PPUSH
82602: LD_INT 2
82604: PPUSH
82605: CALL_OW 322
// end ;
82609: PPOPN 3
82611: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
82612: LD_EXP 75
82616: PUSH
82617: LD_EXP 118
82621: AND
82622: IFFALSE 82733
82624: GO 82626
82626: DISABLE
82627: LD_INT 0
82629: PPUSH
82630: PPUSH
82631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82632: LD_ADDR_VAR 0 3
82636: PUSH
82637: LD_INT 22
82639: PUSH
82640: LD_OWVAR 2
82644: PUSH
82645: EMPTY
82646: LIST
82647: LIST
82648: PUSH
82649: LD_INT 25
82651: PUSH
82652: LD_INT 1
82654: PUSH
82655: EMPTY
82656: LIST
82657: LIST
82658: PUSH
82659: EMPTY
82660: LIST
82661: LIST
82662: PPUSH
82663: CALL_OW 69
82667: ST_TO_ADDR
// if not tmp then
82668: LD_VAR 0 3
82672: NOT
82673: IFFALSE 82677
// exit ;
82675: GO 82733
// un := tmp [ rand ( 1 , tmp ) ] ;
82677: LD_ADDR_VAR 0 2
82681: PUSH
82682: LD_VAR 0 3
82686: PUSH
82687: LD_INT 1
82689: PPUSH
82690: LD_VAR 0 3
82694: PPUSH
82695: CALL_OW 12
82699: ARRAY
82700: ST_TO_ADDR
// if Crawls ( un ) then
82701: LD_VAR 0 2
82705: PPUSH
82706: CALL_OW 318
82710: IFFALSE 82721
// ComWalk ( un ) ;
82712: LD_VAR 0 2
82716: PPUSH
82717: CALL_OW 138
// SetClass ( un , class_mortar ) ;
82721: LD_VAR 0 2
82725: PPUSH
82726: LD_INT 8
82728: PPUSH
82729: CALL_OW 336
// end ;
82733: PPOPN 3
82735: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
82736: LD_EXP 75
82740: PUSH
82741: LD_EXP 119
82745: AND
82746: IFFALSE 82890
82748: GO 82750
82750: DISABLE
82751: LD_INT 0
82753: PPUSH
82754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
82755: LD_ADDR_VAR 0 2
82759: PUSH
82760: LD_INT 22
82762: PUSH
82763: LD_OWVAR 2
82767: PUSH
82768: EMPTY
82769: LIST
82770: LIST
82771: PUSH
82772: LD_INT 21
82774: PUSH
82775: LD_INT 2
82777: PUSH
82778: EMPTY
82779: LIST
82780: LIST
82781: PUSH
82782: LD_INT 2
82784: PUSH
82785: LD_INT 34
82787: PUSH
82788: LD_INT 12
82790: PUSH
82791: EMPTY
82792: LIST
82793: LIST
82794: PUSH
82795: LD_INT 34
82797: PUSH
82798: LD_INT 51
82800: PUSH
82801: EMPTY
82802: LIST
82803: LIST
82804: PUSH
82805: LD_INT 34
82807: PUSH
82808: LD_INT 32
82810: PUSH
82811: EMPTY
82812: LIST
82813: LIST
82814: PUSH
82815: EMPTY
82816: LIST
82817: LIST
82818: LIST
82819: LIST
82820: PUSH
82821: EMPTY
82822: LIST
82823: LIST
82824: LIST
82825: PPUSH
82826: CALL_OW 69
82830: ST_TO_ADDR
// if not tmp then
82831: LD_VAR 0 2
82835: NOT
82836: IFFALSE 82840
// exit ;
82838: GO 82890
// for i in tmp do
82840: LD_ADDR_VAR 0 1
82844: PUSH
82845: LD_VAR 0 2
82849: PUSH
82850: FOR_IN
82851: IFFALSE 82888
// if GetCargo ( i , mat_artifact ) = 0 then
82853: LD_VAR 0 1
82857: PPUSH
82858: LD_INT 4
82860: PPUSH
82861: CALL_OW 289
82865: PUSH
82866: LD_INT 0
82868: EQUAL
82869: IFFALSE 82886
// SetCargo ( i , mat_siberit , 100 ) ;
82871: LD_VAR 0 1
82875: PPUSH
82876: LD_INT 3
82878: PPUSH
82879: LD_INT 100
82881: PPUSH
82882: CALL_OW 290
82886: GO 82850
82888: POP
82889: POP
// end ;
82890: PPOPN 2
82892: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
82893: LD_EXP 75
82897: PUSH
82898: LD_EXP 120
82902: AND
82903: IFFALSE 83086
82905: GO 82907
82907: DISABLE
82908: LD_INT 0
82910: PPUSH
82911: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82912: LD_ADDR_VAR 0 2
82916: PUSH
82917: LD_INT 22
82919: PUSH
82920: LD_OWVAR 2
82924: PUSH
82925: EMPTY
82926: LIST
82927: LIST
82928: PPUSH
82929: CALL_OW 69
82933: ST_TO_ADDR
// if not tmp then
82934: LD_VAR 0 2
82938: NOT
82939: IFFALSE 82943
// exit ;
82941: GO 83086
// for i := 1 to 2 do
82943: LD_ADDR_VAR 0 1
82947: PUSH
82948: DOUBLE
82949: LD_INT 1
82951: DEC
82952: ST_TO_ADDR
82953: LD_INT 2
82955: PUSH
82956: FOR_TO
82957: IFFALSE 83084
// begin uc_side := your_side ;
82959: LD_ADDR_OWVAR 20
82963: PUSH
82964: LD_OWVAR 2
82968: ST_TO_ADDR
// uc_nation := nation_american ;
82969: LD_ADDR_OWVAR 21
82973: PUSH
82974: LD_INT 1
82976: ST_TO_ADDR
// vc_chassis := us_morphling ;
82977: LD_ADDR_OWVAR 37
82981: PUSH
82982: LD_INT 5
82984: ST_TO_ADDR
// vc_engine := engine_siberite ;
82985: LD_ADDR_OWVAR 39
82989: PUSH
82990: LD_INT 3
82992: ST_TO_ADDR
// vc_control := control_computer ;
82993: LD_ADDR_OWVAR 38
82997: PUSH
82998: LD_INT 3
83000: ST_TO_ADDR
// vc_weapon := us_double_laser ;
83001: LD_ADDR_OWVAR 40
83005: PUSH
83006: LD_INT 10
83008: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
83009: LD_VAR 0 2
83013: PUSH
83014: LD_INT 1
83016: ARRAY
83017: PPUSH
83018: CALL_OW 310
83022: NOT
83023: IFFALSE 83070
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
83025: CALL_OW 45
83029: PPUSH
83030: LD_VAR 0 2
83034: PUSH
83035: LD_INT 1
83037: ARRAY
83038: PPUSH
83039: CALL_OW 250
83043: PPUSH
83044: LD_VAR 0 2
83048: PUSH
83049: LD_INT 1
83051: ARRAY
83052: PPUSH
83053: CALL_OW 251
83057: PPUSH
83058: LD_INT 12
83060: PPUSH
83061: LD_INT 1
83063: PPUSH
83064: CALL_OW 50
83068: GO 83082
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
83070: CALL_OW 45
83074: PPUSH
83075: LD_INT 1
83077: PPUSH
83078: CALL_OW 51
// end ;
83082: GO 82956
83084: POP
83085: POP
// end ;
83086: PPOPN 2
83088: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
83089: LD_EXP 75
83093: PUSH
83094: LD_EXP 121
83098: AND
83099: IFFALSE 83321
83101: GO 83103
83103: DISABLE
83104: LD_INT 0
83106: PPUSH
83107: PPUSH
83108: PPUSH
83109: PPUSH
83110: PPUSH
83111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
83112: LD_ADDR_VAR 0 6
83116: PUSH
83117: LD_INT 22
83119: PUSH
83120: LD_OWVAR 2
83124: PUSH
83125: EMPTY
83126: LIST
83127: LIST
83128: PUSH
83129: LD_INT 21
83131: PUSH
83132: LD_INT 1
83134: PUSH
83135: EMPTY
83136: LIST
83137: LIST
83138: PUSH
83139: LD_INT 3
83141: PUSH
83142: LD_INT 23
83144: PUSH
83145: LD_INT 0
83147: PUSH
83148: EMPTY
83149: LIST
83150: LIST
83151: PUSH
83152: EMPTY
83153: LIST
83154: LIST
83155: PUSH
83156: EMPTY
83157: LIST
83158: LIST
83159: LIST
83160: PPUSH
83161: CALL_OW 69
83165: ST_TO_ADDR
// if not tmp then
83166: LD_VAR 0 6
83170: NOT
83171: IFFALSE 83175
// exit ;
83173: GO 83321
// s1 := rand ( 1 , 4 ) ;
83175: LD_ADDR_VAR 0 2
83179: PUSH
83180: LD_INT 1
83182: PPUSH
83183: LD_INT 4
83185: PPUSH
83186: CALL_OW 12
83190: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
83191: LD_ADDR_VAR 0 4
83195: PUSH
83196: LD_VAR 0 6
83200: PUSH
83201: LD_INT 1
83203: ARRAY
83204: PPUSH
83205: LD_VAR 0 2
83209: PPUSH
83210: CALL_OW 259
83214: ST_TO_ADDR
// if s1 = 1 then
83215: LD_VAR 0 2
83219: PUSH
83220: LD_INT 1
83222: EQUAL
83223: IFFALSE 83243
// s2 := rand ( 2 , 4 ) else
83225: LD_ADDR_VAR 0 3
83229: PUSH
83230: LD_INT 2
83232: PPUSH
83233: LD_INT 4
83235: PPUSH
83236: CALL_OW 12
83240: ST_TO_ADDR
83241: GO 83251
// s2 := 1 ;
83243: LD_ADDR_VAR 0 3
83247: PUSH
83248: LD_INT 1
83250: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
83251: LD_ADDR_VAR 0 5
83255: PUSH
83256: LD_VAR 0 6
83260: PUSH
83261: LD_INT 1
83263: ARRAY
83264: PPUSH
83265: LD_VAR 0 3
83269: PPUSH
83270: CALL_OW 259
83274: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
83275: LD_VAR 0 6
83279: PUSH
83280: LD_INT 1
83282: ARRAY
83283: PPUSH
83284: LD_VAR 0 2
83288: PPUSH
83289: LD_VAR 0 5
83293: PPUSH
83294: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
83298: LD_VAR 0 6
83302: PUSH
83303: LD_INT 1
83305: ARRAY
83306: PPUSH
83307: LD_VAR 0 3
83311: PPUSH
83312: LD_VAR 0 4
83316: PPUSH
83317: CALL_OW 237
// end ;
83321: PPOPN 6
83323: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
83324: LD_EXP 75
83328: PUSH
83329: LD_EXP 122
83333: AND
83334: IFFALSE 83413
83336: GO 83338
83338: DISABLE
83339: LD_INT 0
83341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
83342: LD_ADDR_VAR 0 1
83346: PUSH
83347: LD_INT 22
83349: PUSH
83350: LD_OWVAR 2
83354: PUSH
83355: EMPTY
83356: LIST
83357: LIST
83358: PUSH
83359: LD_INT 30
83361: PUSH
83362: LD_INT 3
83364: PUSH
83365: EMPTY
83366: LIST
83367: LIST
83368: PUSH
83369: EMPTY
83370: LIST
83371: LIST
83372: PPUSH
83373: CALL_OW 69
83377: ST_TO_ADDR
// if not tmp then
83378: LD_VAR 0 1
83382: NOT
83383: IFFALSE 83387
// exit ;
83385: GO 83413
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
83387: LD_VAR 0 1
83391: PUSH
83392: LD_INT 1
83394: PPUSH
83395: LD_VAR 0 1
83399: PPUSH
83400: CALL_OW 12
83404: ARRAY
83405: PPUSH
83406: LD_INT 1
83408: PPUSH
83409: CALL_OW 234
// end ;
83413: PPOPN 1
83415: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
83416: LD_EXP 75
83420: PUSH
83421: LD_EXP 123
83425: AND
83426: IFFALSE 83538
83428: GO 83430
83430: DISABLE
83431: LD_INT 0
83433: PPUSH
83434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
83435: LD_ADDR_VAR 0 2
83439: PUSH
83440: LD_INT 22
83442: PUSH
83443: LD_OWVAR 2
83447: PUSH
83448: EMPTY
83449: LIST
83450: LIST
83451: PUSH
83452: LD_INT 2
83454: PUSH
83455: LD_INT 30
83457: PUSH
83458: LD_INT 27
83460: PUSH
83461: EMPTY
83462: LIST
83463: LIST
83464: PUSH
83465: LD_INT 30
83467: PUSH
83468: LD_INT 26
83470: PUSH
83471: EMPTY
83472: LIST
83473: LIST
83474: PUSH
83475: LD_INT 30
83477: PUSH
83478: LD_INT 28
83480: PUSH
83481: EMPTY
83482: LIST
83483: LIST
83484: PUSH
83485: EMPTY
83486: LIST
83487: LIST
83488: LIST
83489: LIST
83490: PUSH
83491: EMPTY
83492: LIST
83493: LIST
83494: PPUSH
83495: CALL_OW 69
83499: ST_TO_ADDR
// if not tmp then
83500: LD_VAR 0 2
83504: NOT
83505: IFFALSE 83509
// exit ;
83507: GO 83538
// for i in tmp do
83509: LD_ADDR_VAR 0 1
83513: PUSH
83514: LD_VAR 0 2
83518: PUSH
83519: FOR_IN
83520: IFFALSE 83536
// SetLives ( i , 1 ) ;
83522: LD_VAR 0 1
83526: PPUSH
83527: LD_INT 1
83529: PPUSH
83530: CALL_OW 234
83534: GO 83519
83536: POP
83537: POP
// end ;
83538: PPOPN 2
83540: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
83541: LD_EXP 75
83545: PUSH
83546: LD_EXP 124
83550: AND
83551: IFFALSE 83838
83553: GO 83555
83555: DISABLE
83556: LD_INT 0
83558: PPUSH
83559: PPUSH
83560: PPUSH
// begin i := rand ( 1 , 7 ) ;
83561: LD_ADDR_VAR 0 1
83565: PUSH
83566: LD_INT 1
83568: PPUSH
83569: LD_INT 7
83571: PPUSH
83572: CALL_OW 12
83576: ST_TO_ADDR
// case i of 1 :
83577: LD_VAR 0 1
83581: PUSH
83582: LD_INT 1
83584: DOUBLE
83585: EQUAL
83586: IFTRUE 83590
83588: GO 83600
83590: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
83591: LD_STRING earthquake(getX(game), 0, 32)
83593: PPUSH
83594: CALL_OW 559
83598: GO 83838
83600: LD_INT 2
83602: DOUBLE
83603: EQUAL
83604: IFTRUE 83608
83606: GO 83622
83608: POP
// begin ToLua ( displayStucuk(); ) ;
83609: LD_STRING displayStucuk();
83611: PPUSH
83612: CALL_OW 559
// ResetFog ;
83616: CALL_OW 335
// end ; 3 :
83620: GO 83838
83622: LD_INT 3
83624: DOUBLE
83625: EQUAL
83626: IFTRUE 83630
83628: GO 83734
83630: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
83631: LD_ADDR_VAR 0 2
83635: PUSH
83636: LD_INT 22
83638: PUSH
83639: LD_OWVAR 2
83643: PUSH
83644: EMPTY
83645: LIST
83646: LIST
83647: PUSH
83648: LD_INT 25
83650: PUSH
83651: LD_INT 1
83653: PUSH
83654: EMPTY
83655: LIST
83656: LIST
83657: PUSH
83658: EMPTY
83659: LIST
83660: LIST
83661: PPUSH
83662: CALL_OW 69
83666: ST_TO_ADDR
// if not tmp then
83667: LD_VAR 0 2
83671: NOT
83672: IFFALSE 83676
// exit ;
83674: GO 83838
// un := tmp [ rand ( 1 , tmp ) ] ;
83676: LD_ADDR_VAR 0 3
83680: PUSH
83681: LD_VAR 0 2
83685: PUSH
83686: LD_INT 1
83688: PPUSH
83689: LD_VAR 0 2
83693: PPUSH
83694: CALL_OW 12
83698: ARRAY
83699: ST_TO_ADDR
// if Crawls ( un ) then
83700: LD_VAR 0 3
83704: PPUSH
83705: CALL_OW 318
83709: IFFALSE 83720
// ComWalk ( un ) ;
83711: LD_VAR 0 3
83715: PPUSH
83716: CALL_OW 138
// SetClass ( un , class_mortar ) ;
83720: LD_VAR 0 3
83724: PPUSH
83725: LD_INT 8
83727: PPUSH
83728: CALL_OW 336
// end ; 4 :
83732: GO 83838
83734: LD_INT 4
83736: DOUBLE
83737: EQUAL
83738: IFTRUE 83742
83740: GO 83816
83742: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
83743: LD_ADDR_VAR 0 2
83747: PUSH
83748: LD_INT 22
83750: PUSH
83751: LD_OWVAR 2
83755: PUSH
83756: EMPTY
83757: LIST
83758: LIST
83759: PUSH
83760: LD_INT 30
83762: PUSH
83763: LD_INT 29
83765: PUSH
83766: EMPTY
83767: LIST
83768: LIST
83769: PUSH
83770: EMPTY
83771: LIST
83772: LIST
83773: PPUSH
83774: CALL_OW 69
83778: ST_TO_ADDR
// if not tmp then
83779: LD_VAR 0 2
83783: NOT
83784: IFFALSE 83788
// exit ;
83786: GO 83838
// CenterNowOnUnits ( tmp [ 1 ] ) ;
83788: LD_VAR 0 2
83792: PUSH
83793: LD_INT 1
83795: ARRAY
83796: PPUSH
83797: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
83801: LD_VAR 0 2
83805: PUSH
83806: LD_INT 1
83808: ARRAY
83809: PPUSH
83810: CALL_OW 65
// end ; 5 .. 7 :
83814: GO 83838
83816: LD_INT 5
83818: DOUBLE
83819: GREATEREQUAL
83820: IFFALSE 83828
83822: LD_INT 7
83824: DOUBLE
83825: LESSEQUAL
83826: IFTRUE 83830
83828: GO 83837
83830: POP
// StreamSibBomb ; end ;
83831: CALL 80075 0 0
83835: GO 83838
83837: POP
// end ;
83838: PPOPN 3
83840: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
83841: LD_EXP 75
83845: PUSH
83846: LD_EXP 125
83850: AND
83851: IFFALSE 84007
83853: GO 83855
83855: DISABLE
83856: LD_INT 0
83858: PPUSH
83859: PPUSH
83860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
83861: LD_ADDR_VAR 0 2
83865: PUSH
83866: LD_INT 81
83868: PUSH
83869: LD_OWVAR 2
83873: PUSH
83874: EMPTY
83875: LIST
83876: LIST
83877: PUSH
83878: LD_INT 2
83880: PUSH
83881: LD_INT 21
83883: PUSH
83884: LD_INT 1
83886: PUSH
83887: EMPTY
83888: LIST
83889: LIST
83890: PUSH
83891: LD_INT 21
83893: PUSH
83894: LD_INT 2
83896: PUSH
83897: EMPTY
83898: LIST
83899: LIST
83900: PUSH
83901: EMPTY
83902: LIST
83903: LIST
83904: LIST
83905: PUSH
83906: EMPTY
83907: LIST
83908: LIST
83909: PPUSH
83910: CALL_OW 69
83914: ST_TO_ADDR
// if not tmp then
83915: LD_VAR 0 2
83919: NOT
83920: IFFALSE 83924
// exit ;
83922: GO 84007
// p := 0 ;
83924: LD_ADDR_VAR 0 3
83928: PUSH
83929: LD_INT 0
83931: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
83932: LD_INT 35
83934: PPUSH
83935: CALL_OW 67
// p := p + 1 ;
83939: LD_ADDR_VAR 0 3
83943: PUSH
83944: LD_VAR 0 3
83948: PUSH
83949: LD_INT 1
83951: PLUS
83952: ST_TO_ADDR
// for i in tmp do
83953: LD_ADDR_VAR 0 1
83957: PUSH
83958: LD_VAR 0 2
83962: PUSH
83963: FOR_IN
83964: IFFALSE 83995
// if GetLives ( i ) < 1000 then
83966: LD_VAR 0 1
83970: PPUSH
83971: CALL_OW 256
83975: PUSH
83976: LD_INT 1000
83978: LESS
83979: IFFALSE 83993
// SetLives ( i , 1000 ) ;
83981: LD_VAR 0 1
83985: PPUSH
83986: LD_INT 1000
83988: PPUSH
83989: CALL_OW 234
83993: GO 83963
83995: POP
83996: POP
// until p > 20 ;
83997: LD_VAR 0 3
84001: PUSH
84002: LD_INT 20
84004: GREATER
84005: IFFALSE 83932
// end ;
84007: PPOPN 3
84009: END
// every 0 0$1 trigger StreamModeActive and sTime do
84010: LD_EXP 75
84014: PUSH
84015: LD_EXP 126
84019: AND
84020: IFFALSE 84055
84022: GO 84024
84024: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
84025: LD_INT 28
84027: PPUSH
84028: LD_OWVAR 2
84032: PPUSH
84033: LD_INT 2
84035: PPUSH
84036: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
84040: LD_INT 30
84042: PPUSH
84043: LD_OWVAR 2
84047: PPUSH
84048: LD_INT 2
84050: PPUSH
84051: CALL_OW 322
// end ;
84055: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
84056: LD_EXP 75
84060: PUSH
84061: LD_EXP 127
84065: AND
84066: IFFALSE 84187
84068: GO 84070
84070: DISABLE
84071: LD_INT 0
84073: PPUSH
84074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
84075: LD_ADDR_VAR 0 2
84079: PUSH
84080: LD_INT 22
84082: PUSH
84083: LD_OWVAR 2
84087: PUSH
84088: EMPTY
84089: LIST
84090: LIST
84091: PUSH
84092: LD_INT 21
84094: PUSH
84095: LD_INT 1
84097: PUSH
84098: EMPTY
84099: LIST
84100: LIST
84101: PUSH
84102: LD_INT 3
84104: PUSH
84105: LD_INT 23
84107: PUSH
84108: LD_INT 0
84110: PUSH
84111: EMPTY
84112: LIST
84113: LIST
84114: PUSH
84115: EMPTY
84116: LIST
84117: LIST
84118: PUSH
84119: EMPTY
84120: LIST
84121: LIST
84122: LIST
84123: PPUSH
84124: CALL_OW 69
84128: ST_TO_ADDR
// if not tmp then
84129: LD_VAR 0 2
84133: NOT
84134: IFFALSE 84138
// exit ;
84136: GO 84187
// for i in tmp do
84138: LD_ADDR_VAR 0 1
84142: PUSH
84143: LD_VAR 0 2
84147: PUSH
84148: FOR_IN
84149: IFFALSE 84185
// begin if Crawls ( i ) then
84151: LD_VAR 0 1
84155: PPUSH
84156: CALL_OW 318
84160: IFFALSE 84171
// ComWalk ( i ) ;
84162: LD_VAR 0 1
84166: PPUSH
84167: CALL_OW 138
// SetClass ( i , 2 ) ;
84171: LD_VAR 0 1
84175: PPUSH
84176: LD_INT 2
84178: PPUSH
84179: CALL_OW 336
// end ;
84183: GO 84148
84185: POP
84186: POP
// end ;
84187: PPOPN 2
84189: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
84190: LD_EXP 75
84194: PUSH
84195: LD_EXP 128
84199: AND
84200: IFFALSE 84488
84202: GO 84204
84204: DISABLE
84205: LD_INT 0
84207: PPUSH
84208: PPUSH
84209: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
84210: LD_OWVAR 2
84214: PPUSH
84215: LD_INT 9
84217: PPUSH
84218: LD_INT 1
84220: PPUSH
84221: LD_INT 1
84223: PPUSH
84224: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
84228: LD_INT 9
84230: PPUSH
84231: LD_OWVAR 2
84235: PPUSH
84236: CALL_OW 343
// uc_side := 9 ;
84240: LD_ADDR_OWVAR 20
84244: PUSH
84245: LD_INT 9
84247: ST_TO_ADDR
// uc_nation := 2 ;
84248: LD_ADDR_OWVAR 21
84252: PUSH
84253: LD_INT 2
84255: ST_TO_ADDR
// hc_name := Dark Warrior ;
84256: LD_ADDR_OWVAR 26
84260: PUSH
84261: LD_STRING Dark Warrior
84263: ST_TO_ADDR
// hc_gallery :=  ;
84264: LD_ADDR_OWVAR 33
84268: PUSH
84269: LD_STRING 
84271: ST_TO_ADDR
// hc_noskilllimit := true ;
84272: LD_ADDR_OWVAR 76
84276: PUSH
84277: LD_INT 1
84279: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
84280: LD_ADDR_OWVAR 31
84284: PUSH
84285: LD_INT 30
84287: PUSH
84288: LD_INT 30
84290: PUSH
84291: LD_INT 30
84293: PUSH
84294: LD_INT 30
84296: PUSH
84297: EMPTY
84298: LIST
84299: LIST
84300: LIST
84301: LIST
84302: ST_TO_ADDR
// un := CreateHuman ;
84303: LD_ADDR_VAR 0 3
84307: PUSH
84308: CALL_OW 44
84312: ST_TO_ADDR
// hc_noskilllimit := false ;
84313: LD_ADDR_OWVAR 76
84317: PUSH
84318: LD_INT 0
84320: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
84321: LD_VAR 0 3
84325: PPUSH
84326: LD_INT 1
84328: PPUSH
84329: CALL_OW 51
// ToLua ( playRanger() ) ;
84333: LD_STRING playRanger()
84335: PPUSH
84336: CALL_OW 559
// p := 0 ;
84340: LD_ADDR_VAR 0 2
84344: PUSH
84345: LD_INT 0
84347: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
84348: LD_INT 35
84350: PPUSH
84351: CALL_OW 67
// p := p + 1 ;
84355: LD_ADDR_VAR 0 2
84359: PUSH
84360: LD_VAR 0 2
84364: PUSH
84365: LD_INT 1
84367: PLUS
84368: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
84369: LD_VAR 0 3
84373: PPUSH
84374: CALL_OW 256
84378: PUSH
84379: LD_INT 1000
84381: LESS
84382: IFFALSE 84396
// SetLives ( un , 1000 ) ;
84384: LD_VAR 0 3
84388: PPUSH
84389: LD_INT 1000
84391: PPUSH
84392: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
84396: LD_VAR 0 3
84400: PPUSH
84401: LD_INT 81
84403: PUSH
84404: LD_OWVAR 2
84408: PUSH
84409: EMPTY
84410: LIST
84411: LIST
84412: PUSH
84413: LD_INT 91
84415: PUSH
84416: LD_VAR 0 3
84420: PUSH
84421: LD_INT 30
84423: PUSH
84424: EMPTY
84425: LIST
84426: LIST
84427: LIST
84428: PUSH
84429: EMPTY
84430: LIST
84431: LIST
84432: PPUSH
84433: CALL_OW 69
84437: PPUSH
84438: LD_VAR 0 3
84442: PPUSH
84443: CALL_OW 74
84447: PPUSH
84448: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
84452: LD_VAR 0 2
84456: PUSH
84457: LD_INT 80
84459: GREATER
84460: PUSH
84461: LD_VAR 0 3
84465: PPUSH
84466: CALL_OW 301
84470: OR
84471: IFFALSE 84348
// if un then
84473: LD_VAR 0 3
84477: IFFALSE 84488
// RemoveUnit ( un ) ;
84479: LD_VAR 0 3
84483: PPUSH
84484: CALL_OW 64
// end ;
84488: PPOPN 3
84490: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
84491: LD_EXP 129
84495: IFFALSE 84611
84497: GO 84499
84499: DISABLE
84500: LD_INT 0
84502: PPUSH
84503: PPUSH
84504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
84505: LD_ADDR_VAR 0 2
84509: PUSH
84510: LD_INT 81
84512: PUSH
84513: LD_OWVAR 2
84517: PUSH
84518: EMPTY
84519: LIST
84520: LIST
84521: PUSH
84522: LD_INT 21
84524: PUSH
84525: LD_INT 1
84527: PUSH
84528: EMPTY
84529: LIST
84530: LIST
84531: PUSH
84532: EMPTY
84533: LIST
84534: LIST
84535: PPUSH
84536: CALL_OW 69
84540: ST_TO_ADDR
// ToLua ( playComputer() ) ;
84541: LD_STRING playComputer()
84543: PPUSH
84544: CALL_OW 559
// if not tmp then
84548: LD_VAR 0 2
84552: NOT
84553: IFFALSE 84557
// exit ;
84555: GO 84611
// for i in tmp do
84557: LD_ADDR_VAR 0 1
84561: PUSH
84562: LD_VAR 0 2
84566: PUSH
84567: FOR_IN
84568: IFFALSE 84609
// for j := 1 to 4 do
84570: LD_ADDR_VAR 0 3
84574: PUSH
84575: DOUBLE
84576: LD_INT 1
84578: DEC
84579: ST_TO_ADDR
84580: LD_INT 4
84582: PUSH
84583: FOR_TO
84584: IFFALSE 84605
// SetSkill ( i , j , 10 ) ;
84586: LD_VAR 0 1
84590: PPUSH
84591: LD_VAR 0 3
84595: PPUSH
84596: LD_INT 10
84598: PPUSH
84599: CALL_OW 237
84603: GO 84583
84605: POP
84606: POP
84607: GO 84567
84609: POP
84610: POP
// end ;
84611: PPOPN 3
84613: END
// every 0 0$1 trigger s30 do var i , tmp ;
84614: LD_EXP 130
84618: IFFALSE 84687
84620: GO 84622
84622: DISABLE
84623: LD_INT 0
84625: PPUSH
84626: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84627: LD_ADDR_VAR 0 2
84631: PUSH
84632: LD_INT 22
84634: PUSH
84635: LD_OWVAR 2
84639: PUSH
84640: EMPTY
84641: LIST
84642: LIST
84643: PPUSH
84644: CALL_OW 69
84648: ST_TO_ADDR
// if not tmp then
84649: LD_VAR 0 2
84653: NOT
84654: IFFALSE 84658
// exit ;
84656: GO 84687
// for i in tmp do
84658: LD_ADDR_VAR 0 1
84662: PUSH
84663: LD_VAR 0 2
84667: PUSH
84668: FOR_IN
84669: IFFALSE 84685
// SetLives ( i , 300 ) ;
84671: LD_VAR 0 1
84675: PPUSH
84676: LD_INT 300
84678: PPUSH
84679: CALL_OW 234
84683: GO 84668
84685: POP
84686: POP
// end ;
84687: PPOPN 2
84689: END
// every 0 0$1 trigger s60 do var i , tmp ;
84690: LD_EXP 131
84694: IFFALSE 84763
84696: GO 84698
84698: DISABLE
84699: LD_INT 0
84701: PPUSH
84702: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84703: LD_ADDR_VAR 0 2
84707: PUSH
84708: LD_INT 22
84710: PUSH
84711: LD_OWVAR 2
84715: PUSH
84716: EMPTY
84717: LIST
84718: LIST
84719: PPUSH
84720: CALL_OW 69
84724: ST_TO_ADDR
// if not tmp then
84725: LD_VAR 0 2
84729: NOT
84730: IFFALSE 84734
// exit ;
84732: GO 84763
// for i in tmp do
84734: LD_ADDR_VAR 0 1
84738: PUSH
84739: LD_VAR 0 2
84743: PUSH
84744: FOR_IN
84745: IFFALSE 84761
// SetLives ( i , 600 ) ;
84747: LD_VAR 0 1
84751: PPUSH
84752: LD_INT 600
84754: PPUSH
84755: CALL_OW 234
84759: GO 84744
84761: POP
84762: POP
// end ;
84763: PPOPN 2
84765: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
84766: LD_INT 0
84768: PPUSH
// case cmd of 301 :
84769: LD_VAR 0 1
84773: PUSH
84774: LD_INT 301
84776: DOUBLE
84777: EQUAL
84778: IFTRUE 84782
84780: GO 84814
84782: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
84783: LD_VAR 0 6
84787: PPUSH
84788: LD_VAR 0 7
84792: PPUSH
84793: LD_VAR 0 8
84797: PPUSH
84798: LD_VAR 0 4
84802: PPUSH
84803: LD_VAR 0 5
84807: PPUSH
84808: CALL 86023 0 5
84812: GO 84935
84814: LD_INT 302
84816: DOUBLE
84817: EQUAL
84818: IFTRUE 84822
84820: GO 84859
84822: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
84823: LD_VAR 0 6
84827: PPUSH
84828: LD_VAR 0 7
84832: PPUSH
84833: LD_VAR 0 8
84837: PPUSH
84838: LD_VAR 0 9
84842: PPUSH
84843: LD_VAR 0 4
84847: PPUSH
84848: LD_VAR 0 5
84852: PPUSH
84853: CALL 86114 0 6
84857: GO 84935
84859: LD_INT 303
84861: DOUBLE
84862: EQUAL
84863: IFTRUE 84867
84865: GO 84904
84867: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
84868: LD_VAR 0 6
84872: PPUSH
84873: LD_VAR 0 7
84877: PPUSH
84878: LD_VAR 0 8
84882: PPUSH
84883: LD_VAR 0 9
84887: PPUSH
84888: LD_VAR 0 4
84892: PPUSH
84893: LD_VAR 0 5
84897: PPUSH
84898: CALL 84940 0 6
84902: GO 84935
84904: LD_INT 304
84906: DOUBLE
84907: EQUAL
84908: IFTRUE 84912
84910: GO 84934
84912: POP
// hHackTeleport ( unit , x , y ) ; end ;
84913: LD_VAR 0 2
84917: PPUSH
84918: LD_VAR 0 4
84922: PPUSH
84923: LD_VAR 0 5
84927: PPUSH
84928: CALL 86707 0 3
84932: GO 84935
84934: POP
// end ;
84935: LD_VAR 0 12
84939: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
84940: LD_INT 0
84942: PPUSH
84943: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
84944: LD_VAR 0 1
84948: PUSH
84949: LD_INT 1
84951: LESS
84952: PUSH
84953: LD_VAR 0 1
84957: PUSH
84958: LD_INT 3
84960: GREATER
84961: OR
84962: PUSH
84963: LD_VAR 0 5
84967: PPUSH
84968: LD_VAR 0 6
84972: PPUSH
84973: CALL_OW 428
84977: OR
84978: IFFALSE 84982
// exit ;
84980: GO 85710
// uc_side := your_side ;
84982: LD_ADDR_OWVAR 20
84986: PUSH
84987: LD_OWVAR 2
84991: ST_TO_ADDR
// uc_nation := nation ;
84992: LD_ADDR_OWVAR 21
84996: PUSH
84997: LD_VAR 0 1
85001: ST_TO_ADDR
// bc_level = 1 ;
85002: LD_ADDR_OWVAR 43
85006: PUSH
85007: LD_INT 1
85009: ST_TO_ADDR
// case btype of 1 :
85010: LD_VAR 0 2
85014: PUSH
85015: LD_INT 1
85017: DOUBLE
85018: EQUAL
85019: IFTRUE 85023
85021: GO 85034
85023: POP
// bc_type := b_depot ; 2 :
85024: LD_ADDR_OWVAR 42
85028: PUSH
85029: LD_INT 0
85031: ST_TO_ADDR
85032: GO 85654
85034: LD_INT 2
85036: DOUBLE
85037: EQUAL
85038: IFTRUE 85042
85040: GO 85053
85042: POP
// bc_type := b_warehouse ; 3 :
85043: LD_ADDR_OWVAR 42
85047: PUSH
85048: LD_INT 1
85050: ST_TO_ADDR
85051: GO 85654
85053: LD_INT 3
85055: DOUBLE
85056: EQUAL
85057: IFTRUE 85061
85059: GO 85072
85061: POP
// bc_type := b_lab ; 4 .. 9 :
85062: LD_ADDR_OWVAR 42
85066: PUSH
85067: LD_INT 6
85069: ST_TO_ADDR
85070: GO 85654
85072: LD_INT 4
85074: DOUBLE
85075: GREATEREQUAL
85076: IFFALSE 85084
85078: LD_INT 9
85080: DOUBLE
85081: LESSEQUAL
85082: IFTRUE 85086
85084: GO 85146
85086: POP
// begin bc_type := b_lab_half ;
85087: LD_ADDR_OWVAR 42
85091: PUSH
85092: LD_INT 7
85094: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
85095: LD_ADDR_OWVAR 44
85099: PUSH
85100: LD_INT 10
85102: PUSH
85103: LD_INT 11
85105: PUSH
85106: LD_INT 12
85108: PUSH
85109: LD_INT 15
85111: PUSH
85112: LD_INT 14
85114: PUSH
85115: LD_INT 13
85117: PUSH
85118: EMPTY
85119: LIST
85120: LIST
85121: LIST
85122: LIST
85123: LIST
85124: LIST
85125: PUSH
85126: LD_VAR 0 2
85130: PUSH
85131: LD_INT 3
85133: MINUS
85134: ARRAY
85135: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
85136: LD_ADDR_OWVAR 45
85140: PUSH
85141: LD_INT 9
85143: ST_TO_ADDR
// end ; 10 .. 13 :
85144: GO 85654
85146: LD_INT 10
85148: DOUBLE
85149: GREATEREQUAL
85150: IFFALSE 85158
85152: LD_INT 13
85154: DOUBLE
85155: LESSEQUAL
85156: IFTRUE 85160
85158: GO 85237
85160: POP
// begin bc_type := b_lab_full ;
85161: LD_ADDR_OWVAR 42
85165: PUSH
85166: LD_INT 8
85168: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
85169: LD_ADDR_OWVAR 44
85173: PUSH
85174: LD_INT 10
85176: PUSH
85177: LD_INT 12
85179: PUSH
85180: LD_INT 14
85182: PUSH
85183: LD_INT 13
85185: PUSH
85186: EMPTY
85187: LIST
85188: LIST
85189: LIST
85190: LIST
85191: PUSH
85192: LD_VAR 0 2
85196: PUSH
85197: LD_INT 9
85199: MINUS
85200: ARRAY
85201: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
85202: LD_ADDR_OWVAR 45
85206: PUSH
85207: LD_INT 11
85209: PUSH
85210: LD_INT 15
85212: PUSH
85213: LD_INT 12
85215: PUSH
85216: LD_INT 15
85218: PUSH
85219: EMPTY
85220: LIST
85221: LIST
85222: LIST
85223: LIST
85224: PUSH
85225: LD_VAR 0 2
85229: PUSH
85230: LD_INT 9
85232: MINUS
85233: ARRAY
85234: ST_TO_ADDR
// end ; 14 :
85235: GO 85654
85237: LD_INT 14
85239: DOUBLE
85240: EQUAL
85241: IFTRUE 85245
85243: GO 85256
85245: POP
// bc_type := b_workshop ; 15 :
85246: LD_ADDR_OWVAR 42
85250: PUSH
85251: LD_INT 2
85253: ST_TO_ADDR
85254: GO 85654
85256: LD_INT 15
85258: DOUBLE
85259: EQUAL
85260: IFTRUE 85264
85262: GO 85275
85264: POP
// bc_type := b_factory ; 16 :
85265: LD_ADDR_OWVAR 42
85269: PUSH
85270: LD_INT 3
85272: ST_TO_ADDR
85273: GO 85654
85275: LD_INT 16
85277: DOUBLE
85278: EQUAL
85279: IFTRUE 85283
85281: GO 85294
85283: POP
// bc_type := b_ext_gun ; 17 :
85284: LD_ADDR_OWVAR 42
85288: PUSH
85289: LD_INT 17
85291: ST_TO_ADDR
85292: GO 85654
85294: LD_INT 17
85296: DOUBLE
85297: EQUAL
85298: IFTRUE 85302
85300: GO 85330
85302: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
85303: LD_ADDR_OWVAR 42
85307: PUSH
85308: LD_INT 19
85310: PUSH
85311: LD_INT 23
85313: PUSH
85314: LD_INT 19
85316: PUSH
85317: EMPTY
85318: LIST
85319: LIST
85320: LIST
85321: PUSH
85322: LD_VAR 0 1
85326: ARRAY
85327: ST_TO_ADDR
85328: GO 85654
85330: LD_INT 18
85332: DOUBLE
85333: EQUAL
85334: IFTRUE 85338
85336: GO 85349
85338: POP
// bc_type := b_ext_radar ; 19 :
85339: LD_ADDR_OWVAR 42
85343: PUSH
85344: LD_INT 20
85346: ST_TO_ADDR
85347: GO 85654
85349: LD_INT 19
85351: DOUBLE
85352: EQUAL
85353: IFTRUE 85357
85355: GO 85368
85357: POP
// bc_type := b_ext_radio ; 20 :
85358: LD_ADDR_OWVAR 42
85362: PUSH
85363: LD_INT 22
85365: ST_TO_ADDR
85366: GO 85654
85368: LD_INT 20
85370: DOUBLE
85371: EQUAL
85372: IFTRUE 85376
85374: GO 85387
85376: POP
// bc_type := b_ext_siberium ; 21 :
85377: LD_ADDR_OWVAR 42
85381: PUSH
85382: LD_INT 21
85384: ST_TO_ADDR
85385: GO 85654
85387: LD_INT 21
85389: DOUBLE
85390: EQUAL
85391: IFTRUE 85395
85393: GO 85406
85395: POP
// bc_type := b_ext_computer ; 22 :
85396: LD_ADDR_OWVAR 42
85400: PUSH
85401: LD_INT 24
85403: ST_TO_ADDR
85404: GO 85654
85406: LD_INT 22
85408: DOUBLE
85409: EQUAL
85410: IFTRUE 85414
85412: GO 85425
85414: POP
// bc_type := b_ext_track ; 23 :
85415: LD_ADDR_OWVAR 42
85419: PUSH
85420: LD_INT 16
85422: ST_TO_ADDR
85423: GO 85654
85425: LD_INT 23
85427: DOUBLE
85428: EQUAL
85429: IFTRUE 85433
85431: GO 85444
85433: POP
// bc_type := b_ext_laser ; 24 :
85434: LD_ADDR_OWVAR 42
85438: PUSH
85439: LD_INT 25
85441: ST_TO_ADDR
85442: GO 85654
85444: LD_INT 24
85446: DOUBLE
85447: EQUAL
85448: IFTRUE 85452
85450: GO 85463
85452: POP
// bc_type := b_control_tower ; 25 :
85453: LD_ADDR_OWVAR 42
85457: PUSH
85458: LD_INT 36
85460: ST_TO_ADDR
85461: GO 85654
85463: LD_INT 25
85465: DOUBLE
85466: EQUAL
85467: IFTRUE 85471
85469: GO 85482
85471: POP
// bc_type := b_breastwork ; 26 :
85472: LD_ADDR_OWVAR 42
85476: PUSH
85477: LD_INT 31
85479: ST_TO_ADDR
85480: GO 85654
85482: LD_INT 26
85484: DOUBLE
85485: EQUAL
85486: IFTRUE 85490
85488: GO 85501
85490: POP
// bc_type := b_bunker ; 27 :
85491: LD_ADDR_OWVAR 42
85495: PUSH
85496: LD_INT 32
85498: ST_TO_ADDR
85499: GO 85654
85501: LD_INT 27
85503: DOUBLE
85504: EQUAL
85505: IFTRUE 85509
85507: GO 85520
85509: POP
// bc_type := b_turret ; 28 :
85510: LD_ADDR_OWVAR 42
85514: PUSH
85515: LD_INT 33
85517: ST_TO_ADDR
85518: GO 85654
85520: LD_INT 28
85522: DOUBLE
85523: EQUAL
85524: IFTRUE 85528
85526: GO 85539
85528: POP
// bc_type := b_armoury ; 29 :
85529: LD_ADDR_OWVAR 42
85533: PUSH
85534: LD_INT 4
85536: ST_TO_ADDR
85537: GO 85654
85539: LD_INT 29
85541: DOUBLE
85542: EQUAL
85543: IFTRUE 85547
85545: GO 85558
85547: POP
// bc_type := b_barracks ; 30 :
85548: LD_ADDR_OWVAR 42
85552: PUSH
85553: LD_INT 5
85555: ST_TO_ADDR
85556: GO 85654
85558: LD_INT 30
85560: DOUBLE
85561: EQUAL
85562: IFTRUE 85566
85564: GO 85577
85566: POP
// bc_type := b_solar_power ; 31 :
85567: LD_ADDR_OWVAR 42
85571: PUSH
85572: LD_INT 27
85574: ST_TO_ADDR
85575: GO 85654
85577: LD_INT 31
85579: DOUBLE
85580: EQUAL
85581: IFTRUE 85585
85583: GO 85596
85585: POP
// bc_type := b_oil_power ; 32 :
85586: LD_ADDR_OWVAR 42
85590: PUSH
85591: LD_INT 26
85593: ST_TO_ADDR
85594: GO 85654
85596: LD_INT 32
85598: DOUBLE
85599: EQUAL
85600: IFTRUE 85604
85602: GO 85615
85604: POP
// bc_type := b_siberite_power ; 33 :
85605: LD_ADDR_OWVAR 42
85609: PUSH
85610: LD_INT 28
85612: ST_TO_ADDR
85613: GO 85654
85615: LD_INT 33
85617: DOUBLE
85618: EQUAL
85619: IFTRUE 85623
85621: GO 85634
85623: POP
// bc_type := b_oil_mine ; 34 :
85624: LD_ADDR_OWVAR 42
85628: PUSH
85629: LD_INT 29
85631: ST_TO_ADDR
85632: GO 85654
85634: LD_INT 34
85636: DOUBLE
85637: EQUAL
85638: IFTRUE 85642
85640: GO 85653
85642: POP
// bc_type := b_siberite_mine ; end ;
85643: LD_ADDR_OWVAR 42
85647: PUSH
85648: LD_INT 30
85650: ST_TO_ADDR
85651: GO 85654
85653: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
85654: LD_ADDR_VAR 0 8
85658: PUSH
85659: LD_VAR 0 5
85663: PPUSH
85664: LD_VAR 0 6
85668: PPUSH
85669: LD_VAR 0 3
85673: PPUSH
85674: CALL_OW 47
85678: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
85679: LD_OWVAR 42
85683: PUSH
85684: LD_INT 32
85686: PUSH
85687: LD_INT 33
85689: PUSH
85690: EMPTY
85691: LIST
85692: LIST
85693: IN
85694: IFFALSE 85710
// PlaceWeaponTurret ( b , weapon ) ;
85696: LD_VAR 0 8
85700: PPUSH
85701: LD_VAR 0 4
85705: PPUSH
85706: CALL_OW 431
// end ;
85710: LD_VAR 0 7
85714: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
85715: LD_INT 0
85717: PPUSH
85718: PPUSH
85719: PPUSH
85720: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
85721: LD_ADDR_VAR 0 4
85725: PUSH
85726: LD_INT 22
85728: PUSH
85729: LD_OWVAR 2
85733: PUSH
85734: EMPTY
85735: LIST
85736: LIST
85737: PUSH
85738: LD_INT 2
85740: PUSH
85741: LD_INT 30
85743: PUSH
85744: LD_INT 0
85746: PUSH
85747: EMPTY
85748: LIST
85749: LIST
85750: PUSH
85751: LD_INT 30
85753: PUSH
85754: LD_INT 1
85756: PUSH
85757: EMPTY
85758: LIST
85759: LIST
85760: PUSH
85761: EMPTY
85762: LIST
85763: LIST
85764: LIST
85765: PUSH
85766: EMPTY
85767: LIST
85768: LIST
85769: PPUSH
85770: CALL_OW 69
85774: ST_TO_ADDR
// if not tmp then
85775: LD_VAR 0 4
85779: NOT
85780: IFFALSE 85784
// exit ;
85782: GO 85843
// for i in tmp do
85784: LD_ADDR_VAR 0 2
85788: PUSH
85789: LD_VAR 0 4
85793: PUSH
85794: FOR_IN
85795: IFFALSE 85841
// for j = 1 to 3 do
85797: LD_ADDR_VAR 0 3
85801: PUSH
85802: DOUBLE
85803: LD_INT 1
85805: DEC
85806: ST_TO_ADDR
85807: LD_INT 3
85809: PUSH
85810: FOR_TO
85811: IFFALSE 85837
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
85813: LD_VAR 0 2
85817: PPUSH
85818: CALL_OW 274
85822: PPUSH
85823: LD_VAR 0 3
85827: PPUSH
85828: LD_INT 99999
85830: PPUSH
85831: CALL_OW 277
85835: GO 85810
85837: POP
85838: POP
85839: GO 85794
85841: POP
85842: POP
// end ;
85843: LD_VAR 0 1
85847: RET
// export function hHackSetLevel10 ; var i , j ; begin
85848: LD_INT 0
85850: PPUSH
85851: PPUSH
85852: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
85853: LD_ADDR_VAR 0 2
85857: PUSH
85858: LD_INT 21
85860: PUSH
85861: LD_INT 1
85863: PUSH
85864: EMPTY
85865: LIST
85866: LIST
85867: PPUSH
85868: CALL_OW 69
85872: PUSH
85873: FOR_IN
85874: IFFALSE 85926
// if IsSelected ( i ) then
85876: LD_VAR 0 2
85880: PPUSH
85881: CALL_OW 306
85885: IFFALSE 85924
// begin for j := 1 to 4 do
85887: LD_ADDR_VAR 0 3
85891: PUSH
85892: DOUBLE
85893: LD_INT 1
85895: DEC
85896: ST_TO_ADDR
85897: LD_INT 4
85899: PUSH
85900: FOR_TO
85901: IFFALSE 85922
// SetSkill ( i , j , 10 ) ;
85903: LD_VAR 0 2
85907: PPUSH
85908: LD_VAR 0 3
85912: PPUSH
85913: LD_INT 10
85915: PPUSH
85916: CALL_OW 237
85920: GO 85900
85922: POP
85923: POP
// end ;
85924: GO 85873
85926: POP
85927: POP
// end ;
85928: LD_VAR 0 1
85932: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
85933: LD_INT 0
85935: PPUSH
85936: PPUSH
85937: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
85938: LD_ADDR_VAR 0 2
85942: PUSH
85943: LD_INT 22
85945: PUSH
85946: LD_OWVAR 2
85950: PUSH
85951: EMPTY
85952: LIST
85953: LIST
85954: PUSH
85955: LD_INT 21
85957: PUSH
85958: LD_INT 1
85960: PUSH
85961: EMPTY
85962: LIST
85963: LIST
85964: PUSH
85965: EMPTY
85966: LIST
85967: LIST
85968: PPUSH
85969: CALL_OW 69
85973: PUSH
85974: FOR_IN
85975: IFFALSE 86016
// begin for j := 1 to 4 do
85977: LD_ADDR_VAR 0 3
85981: PUSH
85982: DOUBLE
85983: LD_INT 1
85985: DEC
85986: ST_TO_ADDR
85987: LD_INT 4
85989: PUSH
85990: FOR_TO
85991: IFFALSE 86012
// SetSkill ( i , j , 10 ) ;
85993: LD_VAR 0 2
85997: PPUSH
85998: LD_VAR 0 3
86002: PPUSH
86003: LD_INT 10
86005: PPUSH
86006: CALL_OW 237
86010: GO 85990
86012: POP
86013: POP
// end ;
86014: GO 85974
86016: POP
86017: POP
// end ;
86018: LD_VAR 0 1
86022: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
86023: LD_INT 0
86025: PPUSH
// uc_side := your_side ;
86026: LD_ADDR_OWVAR 20
86030: PUSH
86031: LD_OWVAR 2
86035: ST_TO_ADDR
// uc_nation := nation ;
86036: LD_ADDR_OWVAR 21
86040: PUSH
86041: LD_VAR 0 1
86045: ST_TO_ADDR
// InitHc ;
86046: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
86050: LD_INT 0
86052: PPUSH
86053: LD_VAR 0 2
86057: PPUSH
86058: LD_VAR 0 3
86062: PPUSH
86063: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
86067: LD_VAR 0 4
86071: PPUSH
86072: LD_VAR 0 5
86076: PPUSH
86077: CALL_OW 428
86081: PUSH
86082: LD_INT 0
86084: EQUAL
86085: IFFALSE 86109
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
86087: CALL_OW 44
86091: PPUSH
86092: LD_VAR 0 4
86096: PPUSH
86097: LD_VAR 0 5
86101: PPUSH
86102: LD_INT 1
86104: PPUSH
86105: CALL_OW 48
// end ;
86109: LD_VAR 0 6
86113: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
86114: LD_INT 0
86116: PPUSH
86117: PPUSH
// uc_side := your_side ;
86118: LD_ADDR_OWVAR 20
86122: PUSH
86123: LD_OWVAR 2
86127: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
86128: LD_VAR 0 1
86132: PUSH
86133: LD_INT 1
86135: PUSH
86136: LD_INT 2
86138: PUSH
86139: LD_INT 3
86141: PUSH
86142: LD_INT 4
86144: PUSH
86145: LD_INT 5
86147: PUSH
86148: EMPTY
86149: LIST
86150: LIST
86151: LIST
86152: LIST
86153: LIST
86154: IN
86155: IFFALSE 86167
// uc_nation := nation_american else
86157: LD_ADDR_OWVAR 21
86161: PUSH
86162: LD_INT 1
86164: ST_TO_ADDR
86165: GO 86210
// if chassis in [ 11 , 12 , 13 , 14 ] then
86167: LD_VAR 0 1
86171: PUSH
86172: LD_INT 11
86174: PUSH
86175: LD_INT 12
86177: PUSH
86178: LD_INT 13
86180: PUSH
86181: LD_INT 14
86183: PUSH
86184: EMPTY
86185: LIST
86186: LIST
86187: LIST
86188: LIST
86189: IN
86190: IFFALSE 86202
// uc_nation := nation_arabian else
86192: LD_ADDR_OWVAR 21
86196: PUSH
86197: LD_INT 2
86199: ST_TO_ADDR
86200: GO 86210
// uc_nation := nation_russian ;
86202: LD_ADDR_OWVAR 21
86206: PUSH
86207: LD_INT 3
86209: ST_TO_ADDR
// vc_chassis := chassis ;
86210: LD_ADDR_OWVAR 37
86214: PUSH
86215: LD_VAR 0 1
86219: ST_TO_ADDR
// vc_engine := engine ;
86220: LD_ADDR_OWVAR 39
86224: PUSH
86225: LD_VAR 0 2
86229: ST_TO_ADDR
// vc_control := control ;
86230: LD_ADDR_OWVAR 38
86234: PUSH
86235: LD_VAR 0 3
86239: ST_TO_ADDR
// vc_weapon := weapon ;
86240: LD_ADDR_OWVAR 40
86244: PUSH
86245: LD_VAR 0 4
86249: ST_TO_ADDR
// un := CreateVehicle ;
86250: LD_ADDR_VAR 0 8
86254: PUSH
86255: CALL_OW 45
86259: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
86260: LD_VAR 0 8
86264: PPUSH
86265: LD_INT 0
86267: PPUSH
86268: LD_INT 5
86270: PPUSH
86271: CALL_OW 12
86275: PPUSH
86276: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
86280: LD_VAR 0 8
86284: PPUSH
86285: LD_VAR 0 5
86289: PPUSH
86290: LD_VAR 0 6
86294: PPUSH
86295: LD_INT 1
86297: PPUSH
86298: CALL_OW 48
// end ;
86302: LD_VAR 0 7
86306: RET
// export hInvincible ; every 1 do
86307: GO 86309
86309: DISABLE
// hInvincible := [ ] ;
86310: LD_ADDR_EXP 132
86314: PUSH
86315: EMPTY
86316: ST_TO_ADDR
86317: END
// every 10 do var i ;
86318: GO 86320
86320: DISABLE
86321: LD_INT 0
86323: PPUSH
// begin enable ;
86324: ENABLE
// if not hInvincible then
86325: LD_EXP 132
86329: NOT
86330: IFFALSE 86334
// exit ;
86332: GO 86378
// for i in hInvincible do
86334: LD_ADDR_VAR 0 1
86338: PUSH
86339: LD_EXP 132
86343: PUSH
86344: FOR_IN
86345: IFFALSE 86376
// if GetLives ( i ) < 1000 then
86347: LD_VAR 0 1
86351: PPUSH
86352: CALL_OW 256
86356: PUSH
86357: LD_INT 1000
86359: LESS
86360: IFFALSE 86374
// SetLives ( i , 1000 ) ;
86362: LD_VAR 0 1
86366: PPUSH
86367: LD_INT 1000
86369: PPUSH
86370: CALL_OW 234
86374: GO 86344
86376: POP
86377: POP
// end ;
86378: PPOPN 1
86380: END
// export function hHackInvincible ; var i ; begin
86381: LD_INT 0
86383: PPUSH
86384: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
86385: LD_ADDR_VAR 0 2
86389: PUSH
86390: LD_INT 2
86392: PUSH
86393: LD_INT 21
86395: PUSH
86396: LD_INT 1
86398: PUSH
86399: EMPTY
86400: LIST
86401: LIST
86402: PUSH
86403: LD_INT 21
86405: PUSH
86406: LD_INT 2
86408: PUSH
86409: EMPTY
86410: LIST
86411: LIST
86412: PUSH
86413: EMPTY
86414: LIST
86415: LIST
86416: LIST
86417: PPUSH
86418: CALL_OW 69
86422: PUSH
86423: FOR_IN
86424: IFFALSE 86485
// if IsSelected ( i ) then
86426: LD_VAR 0 2
86430: PPUSH
86431: CALL_OW 306
86435: IFFALSE 86483
// begin if i in hInvincible then
86437: LD_VAR 0 2
86441: PUSH
86442: LD_EXP 132
86446: IN
86447: IFFALSE 86467
// hInvincible := hInvincible diff i else
86449: LD_ADDR_EXP 132
86453: PUSH
86454: LD_EXP 132
86458: PUSH
86459: LD_VAR 0 2
86463: DIFF
86464: ST_TO_ADDR
86465: GO 86483
// hInvincible := hInvincible union i ;
86467: LD_ADDR_EXP 132
86471: PUSH
86472: LD_EXP 132
86476: PUSH
86477: LD_VAR 0 2
86481: UNION
86482: ST_TO_ADDR
// end ;
86483: GO 86423
86485: POP
86486: POP
// end ;
86487: LD_VAR 0 1
86491: RET
// export function hHackInvisible ; var i , j ; begin
86492: LD_INT 0
86494: PPUSH
86495: PPUSH
86496: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
86497: LD_ADDR_VAR 0 2
86501: PUSH
86502: LD_INT 21
86504: PUSH
86505: LD_INT 1
86507: PUSH
86508: EMPTY
86509: LIST
86510: LIST
86511: PPUSH
86512: CALL_OW 69
86516: PUSH
86517: FOR_IN
86518: IFFALSE 86542
// if IsSelected ( i ) then
86520: LD_VAR 0 2
86524: PPUSH
86525: CALL_OW 306
86529: IFFALSE 86540
// ComForceInvisible ( i ) ;
86531: LD_VAR 0 2
86535: PPUSH
86536: CALL_OW 496
86540: GO 86517
86542: POP
86543: POP
// end ;
86544: LD_VAR 0 1
86548: RET
// export function hHackChangeYourSide ; begin
86549: LD_INT 0
86551: PPUSH
// if your_side = 8 then
86552: LD_OWVAR 2
86556: PUSH
86557: LD_INT 8
86559: EQUAL
86560: IFFALSE 86572
// your_side := 0 else
86562: LD_ADDR_OWVAR 2
86566: PUSH
86567: LD_INT 0
86569: ST_TO_ADDR
86570: GO 86586
// your_side := your_side + 1 ;
86572: LD_ADDR_OWVAR 2
86576: PUSH
86577: LD_OWVAR 2
86581: PUSH
86582: LD_INT 1
86584: PLUS
86585: ST_TO_ADDR
// end ;
86586: LD_VAR 0 1
86590: RET
// export function hHackChangeUnitSide ; var i , j ; begin
86591: LD_INT 0
86593: PPUSH
86594: PPUSH
86595: PPUSH
// for i in all_units do
86596: LD_ADDR_VAR 0 2
86600: PUSH
86601: LD_OWVAR 3
86605: PUSH
86606: FOR_IN
86607: IFFALSE 86685
// if IsSelected ( i ) then
86609: LD_VAR 0 2
86613: PPUSH
86614: CALL_OW 306
86618: IFFALSE 86683
// begin j := GetSide ( i ) ;
86620: LD_ADDR_VAR 0 3
86624: PUSH
86625: LD_VAR 0 2
86629: PPUSH
86630: CALL_OW 255
86634: ST_TO_ADDR
// if j = 8 then
86635: LD_VAR 0 3
86639: PUSH
86640: LD_INT 8
86642: EQUAL
86643: IFFALSE 86655
// j := 0 else
86645: LD_ADDR_VAR 0 3
86649: PUSH
86650: LD_INT 0
86652: ST_TO_ADDR
86653: GO 86669
// j := j + 1 ;
86655: LD_ADDR_VAR 0 3
86659: PUSH
86660: LD_VAR 0 3
86664: PUSH
86665: LD_INT 1
86667: PLUS
86668: ST_TO_ADDR
// SetSide ( i , j ) ;
86669: LD_VAR 0 2
86673: PPUSH
86674: LD_VAR 0 3
86678: PPUSH
86679: CALL_OW 235
// end ;
86683: GO 86606
86685: POP
86686: POP
// end ;
86687: LD_VAR 0 1
86691: RET
// export function hHackFog ; begin
86692: LD_INT 0
86694: PPUSH
// FogOff ( true ) ;
86695: LD_INT 1
86697: PPUSH
86698: CALL_OW 344
// end ;
86702: LD_VAR 0 1
86706: RET
// export function hHackTeleport ( unit , x , y ) ; begin
86707: LD_INT 0
86709: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
86710: LD_VAR 0 1
86714: PPUSH
86715: LD_VAR 0 2
86719: PPUSH
86720: LD_VAR 0 3
86724: PPUSH
86725: LD_INT 1
86727: PPUSH
86728: LD_INT 1
86730: PPUSH
86731: CALL_OW 483
// CenterOnXY ( x , y ) ;
86735: LD_VAR 0 2
86739: PPUSH
86740: LD_VAR 0 3
86744: PPUSH
86745: CALL_OW 84
// end ;
86749: LD_VAR 0 4
86753: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
86754: LD_INT 0
86756: PPUSH
86757: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
86758: LD_VAR 0 1
86762: NOT
86763: PUSH
86764: LD_VAR 0 2
86768: PPUSH
86769: LD_VAR 0 3
86773: PPUSH
86774: CALL_OW 488
86778: NOT
86779: OR
86780: PUSH
86781: LD_VAR 0 1
86785: PPUSH
86786: CALL_OW 266
86790: PUSH
86791: LD_INT 3
86793: NONEQUAL
86794: PUSH
86795: LD_VAR 0 1
86799: PPUSH
86800: CALL_OW 247
86804: PUSH
86805: LD_INT 1
86807: EQUAL
86808: NOT
86809: AND
86810: OR
86811: IFFALSE 86815
// exit ;
86813: GO 86964
// if GetType ( factory ) = unit_human then
86815: LD_VAR 0 1
86819: PPUSH
86820: CALL_OW 247
86824: PUSH
86825: LD_INT 1
86827: EQUAL
86828: IFFALSE 86845
// factory := IsInUnit ( factory ) ;
86830: LD_ADDR_VAR 0 1
86834: PUSH
86835: LD_VAR 0 1
86839: PPUSH
86840: CALL_OW 310
86844: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
86845: LD_VAR 0 1
86849: PPUSH
86850: CALL_OW 266
86854: PUSH
86855: LD_INT 3
86857: NONEQUAL
86858: IFFALSE 86862
// exit ;
86860: GO 86964
// if HexInfo ( x , y ) = factory then
86862: LD_VAR 0 2
86866: PPUSH
86867: LD_VAR 0 3
86871: PPUSH
86872: CALL_OW 428
86876: PUSH
86877: LD_VAR 0 1
86881: EQUAL
86882: IFFALSE 86909
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
86884: LD_ADDR_EXP 133
86888: PUSH
86889: LD_EXP 133
86893: PPUSH
86894: LD_VAR 0 1
86898: PPUSH
86899: LD_INT 0
86901: PPUSH
86902: CALL_OW 1
86906: ST_TO_ADDR
86907: GO 86960
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
86909: LD_ADDR_EXP 133
86913: PUSH
86914: LD_EXP 133
86918: PPUSH
86919: LD_VAR 0 1
86923: PPUSH
86924: LD_VAR 0 1
86928: PPUSH
86929: CALL_OW 255
86933: PUSH
86934: LD_VAR 0 1
86938: PUSH
86939: LD_VAR 0 2
86943: PUSH
86944: LD_VAR 0 3
86948: PUSH
86949: EMPTY
86950: LIST
86951: LIST
86952: LIST
86953: LIST
86954: PPUSH
86955: CALL_OW 1
86959: ST_TO_ADDR
// UpdateFactoryWaypoints ;
86960: CALL 86969 0 0
// end ;
86964: LD_VAR 0 4
86968: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
86969: LD_INT 0
86971: PPUSH
86972: PPUSH
86973: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
86974: LD_STRING resetFactoryWaypoint();
86976: PPUSH
86977: CALL_OW 559
// if factoryWaypoints then
86981: LD_EXP 133
86985: IFFALSE 87111
// begin list := PrepareArray ( factoryWaypoints ) ;
86987: LD_ADDR_VAR 0 3
86991: PUSH
86992: LD_EXP 133
86996: PPUSH
86997: CALL 70924 0 1
87001: ST_TO_ADDR
// for i := 1 to list do
87002: LD_ADDR_VAR 0 2
87006: PUSH
87007: DOUBLE
87008: LD_INT 1
87010: DEC
87011: ST_TO_ADDR
87012: LD_VAR 0 3
87016: PUSH
87017: FOR_TO
87018: IFFALSE 87109
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
87020: LD_STRING setFactoryWaypointXY(
87022: PUSH
87023: LD_VAR 0 3
87027: PUSH
87028: LD_VAR 0 2
87032: ARRAY
87033: PUSH
87034: LD_INT 1
87036: ARRAY
87037: STR
87038: PUSH
87039: LD_STRING ,
87041: STR
87042: PUSH
87043: LD_VAR 0 3
87047: PUSH
87048: LD_VAR 0 2
87052: ARRAY
87053: PUSH
87054: LD_INT 2
87056: ARRAY
87057: STR
87058: PUSH
87059: LD_STRING ,
87061: STR
87062: PUSH
87063: LD_VAR 0 3
87067: PUSH
87068: LD_VAR 0 2
87072: ARRAY
87073: PUSH
87074: LD_INT 3
87076: ARRAY
87077: STR
87078: PUSH
87079: LD_STRING ,
87081: STR
87082: PUSH
87083: LD_VAR 0 3
87087: PUSH
87088: LD_VAR 0 2
87092: ARRAY
87093: PUSH
87094: LD_INT 4
87096: ARRAY
87097: STR
87098: PUSH
87099: LD_STRING )
87101: STR
87102: PPUSH
87103: CALL_OW 559
87107: GO 87017
87109: POP
87110: POP
// end ; end ;
87111: LD_VAR 0 1
87115: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
87116: LD_INT 0
87118: PPUSH
// if HexInfo ( x , y ) = warehouse then
87119: LD_VAR 0 2
87123: PPUSH
87124: LD_VAR 0 3
87128: PPUSH
87129: CALL_OW 428
87133: PUSH
87134: LD_VAR 0 1
87138: EQUAL
87139: IFFALSE 87166
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
87141: LD_ADDR_EXP 134
87145: PUSH
87146: LD_EXP 134
87150: PPUSH
87151: LD_VAR 0 1
87155: PPUSH
87156: LD_INT 0
87158: PPUSH
87159: CALL_OW 1
87163: ST_TO_ADDR
87164: GO 87217
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
87166: LD_ADDR_EXP 134
87170: PUSH
87171: LD_EXP 134
87175: PPUSH
87176: LD_VAR 0 1
87180: PPUSH
87181: LD_VAR 0 1
87185: PPUSH
87186: CALL_OW 255
87190: PUSH
87191: LD_VAR 0 1
87195: PUSH
87196: LD_VAR 0 2
87200: PUSH
87201: LD_VAR 0 3
87205: PUSH
87206: EMPTY
87207: LIST
87208: LIST
87209: LIST
87210: LIST
87211: PPUSH
87212: CALL_OW 1
87216: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
87217: CALL 87226 0 0
// end ;
87221: LD_VAR 0 4
87225: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
87226: LD_INT 0
87228: PPUSH
87229: PPUSH
87230: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
87231: LD_STRING resetWarehouseGatheringPoints();
87233: PPUSH
87234: CALL_OW 559
// if warehouseGatheringPoints then
87238: LD_EXP 134
87242: IFFALSE 87368
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
87244: LD_ADDR_VAR 0 3
87248: PUSH
87249: LD_EXP 134
87253: PPUSH
87254: CALL 70924 0 1
87258: ST_TO_ADDR
// for i := 1 to list do
87259: LD_ADDR_VAR 0 2
87263: PUSH
87264: DOUBLE
87265: LD_INT 1
87267: DEC
87268: ST_TO_ADDR
87269: LD_VAR 0 3
87273: PUSH
87274: FOR_TO
87275: IFFALSE 87366
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
87277: LD_STRING setWarehouseGatheringPointXY(
87279: PUSH
87280: LD_VAR 0 3
87284: PUSH
87285: LD_VAR 0 2
87289: ARRAY
87290: PUSH
87291: LD_INT 1
87293: ARRAY
87294: STR
87295: PUSH
87296: LD_STRING ,
87298: STR
87299: PUSH
87300: LD_VAR 0 3
87304: PUSH
87305: LD_VAR 0 2
87309: ARRAY
87310: PUSH
87311: LD_INT 2
87313: ARRAY
87314: STR
87315: PUSH
87316: LD_STRING ,
87318: STR
87319: PUSH
87320: LD_VAR 0 3
87324: PUSH
87325: LD_VAR 0 2
87329: ARRAY
87330: PUSH
87331: LD_INT 3
87333: ARRAY
87334: STR
87335: PUSH
87336: LD_STRING ,
87338: STR
87339: PUSH
87340: LD_VAR 0 3
87344: PUSH
87345: LD_VAR 0 2
87349: ARRAY
87350: PUSH
87351: LD_INT 4
87353: ARRAY
87354: STR
87355: PUSH
87356: LD_STRING )
87358: STR
87359: PPUSH
87360: CALL_OW 559
87364: GO 87274
87366: POP
87367: POP
// end ; end ;
87368: LD_VAR 0 1
87372: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
87373: LD_EXP 134
87377: IFFALSE 88062
87379: GO 87381
87381: DISABLE
87382: LD_INT 0
87384: PPUSH
87385: PPUSH
87386: PPUSH
87387: PPUSH
87388: PPUSH
87389: PPUSH
87390: PPUSH
87391: PPUSH
87392: PPUSH
// begin enable ;
87393: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
87394: LD_ADDR_VAR 0 3
87398: PUSH
87399: LD_EXP 134
87403: PPUSH
87404: CALL 70924 0 1
87408: ST_TO_ADDR
// if not list then
87409: LD_VAR 0 3
87413: NOT
87414: IFFALSE 87418
// exit ;
87416: GO 88062
// for i := 1 to list do
87418: LD_ADDR_VAR 0 1
87422: PUSH
87423: DOUBLE
87424: LD_INT 1
87426: DEC
87427: ST_TO_ADDR
87428: LD_VAR 0 3
87432: PUSH
87433: FOR_TO
87434: IFFALSE 88060
// begin depot := list [ i ] [ 2 ] ;
87436: LD_ADDR_VAR 0 8
87440: PUSH
87441: LD_VAR 0 3
87445: PUSH
87446: LD_VAR 0 1
87450: ARRAY
87451: PUSH
87452: LD_INT 2
87454: ARRAY
87455: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
87456: LD_ADDR_VAR 0 5
87460: PUSH
87461: LD_VAR 0 3
87465: PUSH
87466: LD_VAR 0 1
87470: ARRAY
87471: PUSH
87472: LD_INT 1
87474: ARRAY
87475: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
87476: LD_VAR 0 8
87480: PPUSH
87481: CALL_OW 301
87485: PUSH
87486: LD_VAR 0 5
87490: PUSH
87491: LD_VAR 0 8
87495: PPUSH
87496: CALL_OW 255
87500: NONEQUAL
87501: OR
87502: IFFALSE 87531
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
87504: LD_ADDR_EXP 134
87508: PUSH
87509: LD_EXP 134
87513: PPUSH
87514: LD_VAR 0 8
87518: PPUSH
87519: LD_INT 0
87521: PPUSH
87522: CALL_OW 1
87526: ST_TO_ADDR
// exit ;
87527: POP
87528: POP
87529: GO 88062
// end ; x := list [ i ] [ 3 ] ;
87531: LD_ADDR_VAR 0 6
87535: PUSH
87536: LD_VAR 0 3
87540: PUSH
87541: LD_VAR 0 1
87545: ARRAY
87546: PUSH
87547: LD_INT 3
87549: ARRAY
87550: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
87551: LD_ADDR_VAR 0 7
87555: PUSH
87556: LD_VAR 0 3
87560: PUSH
87561: LD_VAR 0 1
87565: ARRAY
87566: PUSH
87567: LD_INT 4
87569: ARRAY
87570: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
87571: LD_ADDR_VAR 0 9
87575: PUSH
87576: LD_VAR 0 6
87580: PPUSH
87581: LD_VAR 0 7
87585: PPUSH
87586: LD_INT 16
87588: PPUSH
87589: CALL 69508 0 3
87593: ST_TO_ADDR
// if not cratesNearbyPoint then
87594: LD_VAR 0 9
87598: NOT
87599: IFFALSE 87605
// exit ;
87601: POP
87602: POP
87603: GO 88062
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
87605: LD_ADDR_VAR 0 4
87609: PUSH
87610: LD_INT 22
87612: PUSH
87613: LD_VAR 0 5
87617: PUSH
87618: EMPTY
87619: LIST
87620: LIST
87621: PUSH
87622: LD_INT 3
87624: PUSH
87625: LD_INT 60
87627: PUSH
87628: EMPTY
87629: LIST
87630: PUSH
87631: EMPTY
87632: LIST
87633: LIST
87634: PUSH
87635: LD_INT 91
87637: PUSH
87638: LD_VAR 0 8
87642: PUSH
87643: LD_INT 6
87645: PUSH
87646: EMPTY
87647: LIST
87648: LIST
87649: LIST
87650: PUSH
87651: LD_INT 2
87653: PUSH
87654: LD_INT 25
87656: PUSH
87657: LD_INT 2
87659: PUSH
87660: EMPTY
87661: LIST
87662: LIST
87663: PUSH
87664: LD_INT 25
87666: PUSH
87667: LD_INT 16
87669: PUSH
87670: EMPTY
87671: LIST
87672: LIST
87673: PUSH
87674: EMPTY
87675: LIST
87676: LIST
87677: LIST
87678: PUSH
87679: EMPTY
87680: LIST
87681: LIST
87682: LIST
87683: LIST
87684: PPUSH
87685: CALL_OW 69
87689: PUSH
87690: LD_VAR 0 8
87694: PPUSH
87695: CALL_OW 313
87699: PPUSH
87700: LD_INT 3
87702: PUSH
87703: LD_INT 60
87705: PUSH
87706: EMPTY
87707: LIST
87708: PUSH
87709: EMPTY
87710: LIST
87711: LIST
87712: PUSH
87713: LD_INT 2
87715: PUSH
87716: LD_INT 25
87718: PUSH
87719: LD_INT 2
87721: PUSH
87722: EMPTY
87723: LIST
87724: LIST
87725: PUSH
87726: LD_INT 25
87728: PUSH
87729: LD_INT 16
87731: PUSH
87732: EMPTY
87733: LIST
87734: LIST
87735: PUSH
87736: EMPTY
87737: LIST
87738: LIST
87739: LIST
87740: PUSH
87741: EMPTY
87742: LIST
87743: LIST
87744: PPUSH
87745: CALL_OW 72
87749: UNION
87750: ST_TO_ADDR
// if tmp then
87751: LD_VAR 0 4
87755: IFFALSE 87835
// begin tmp := ShrinkArray ( tmp , 3 ) ;
87757: LD_ADDR_VAR 0 4
87761: PUSH
87762: LD_VAR 0 4
87766: PPUSH
87767: LD_INT 3
87769: PPUSH
87770: CALL 67477 0 2
87774: ST_TO_ADDR
// for j in tmp do
87775: LD_ADDR_VAR 0 2
87779: PUSH
87780: LD_VAR 0 4
87784: PUSH
87785: FOR_IN
87786: IFFALSE 87829
// begin if IsInUnit ( j ) then
87788: LD_VAR 0 2
87792: PPUSH
87793: CALL_OW 310
87797: IFFALSE 87808
// ComExit ( j ) ;
87799: LD_VAR 0 2
87803: PPUSH
87804: CALL 67560 0 1
// AddComCollect ( j , x , y ) ;
87808: LD_VAR 0 2
87812: PPUSH
87813: LD_VAR 0 6
87817: PPUSH
87818: LD_VAR 0 7
87822: PPUSH
87823: CALL_OW 177
// end ;
87827: GO 87785
87829: POP
87830: POP
// exit ;
87831: POP
87832: POP
87833: GO 88062
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
87835: LD_ADDR_VAR 0 4
87839: PUSH
87840: LD_INT 22
87842: PUSH
87843: LD_VAR 0 5
87847: PUSH
87848: EMPTY
87849: LIST
87850: LIST
87851: PUSH
87852: LD_INT 91
87854: PUSH
87855: LD_VAR 0 8
87859: PUSH
87860: LD_INT 8
87862: PUSH
87863: EMPTY
87864: LIST
87865: LIST
87866: LIST
87867: PUSH
87868: LD_INT 2
87870: PUSH
87871: LD_INT 34
87873: PUSH
87874: LD_INT 12
87876: PUSH
87877: EMPTY
87878: LIST
87879: LIST
87880: PUSH
87881: LD_INT 34
87883: PUSH
87884: LD_INT 51
87886: PUSH
87887: EMPTY
87888: LIST
87889: LIST
87890: PUSH
87891: LD_INT 34
87893: PUSH
87894: LD_INT 32
87896: PUSH
87897: EMPTY
87898: LIST
87899: LIST
87900: PUSH
87901: LD_INT 34
87903: PUSH
87904: LD_INT 89
87906: PUSH
87907: EMPTY
87908: LIST
87909: LIST
87910: PUSH
87911: EMPTY
87912: LIST
87913: LIST
87914: LIST
87915: LIST
87916: LIST
87917: PUSH
87918: EMPTY
87919: LIST
87920: LIST
87921: LIST
87922: PPUSH
87923: CALL_OW 69
87927: ST_TO_ADDR
// if tmp then
87928: LD_VAR 0 4
87932: IFFALSE 88058
// begin for j in tmp do
87934: LD_ADDR_VAR 0 2
87938: PUSH
87939: LD_VAR 0 4
87943: PUSH
87944: FOR_IN
87945: IFFALSE 88056
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
87947: LD_VAR 0 2
87951: PPUSH
87952: CALL_OW 262
87956: PUSH
87957: LD_INT 3
87959: EQUAL
87960: PUSH
87961: LD_VAR 0 2
87965: PPUSH
87966: CALL_OW 261
87970: PUSH
87971: LD_INT 20
87973: GREATER
87974: OR
87975: PUSH
87976: LD_VAR 0 2
87980: PPUSH
87981: CALL_OW 314
87985: NOT
87986: AND
87987: PUSH
87988: LD_VAR 0 2
87992: PPUSH
87993: CALL_OW 263
87997: PUSH
87998: LD_INT 1
88000: NONEQUAL
88001: PUSH
88002: LD_VAR 0 2
88006: PPUSH
88007: CALL_OW 311
88011: OR
88012: AND
88013: IFFALSE 88054
// begin ComCollect ( j , x , y ) ;
88015: LD_VAR 0 2
88019: PPUSH
88020: LD_VAR 0 6
88024: PPUSH
88025: LD_VAR 0 7
88029: PPUSH
88030: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
88034: LD_VAR 0 2
88038: PPUSH
88039: LD_VAR 0 8
88043: PPUSH
88044: CALL_OW 172
// exit ;
88048: POP
88049: POP
88050: POP
88051: POP
88052: GO 88062
// end ;
88054: GO 87944
88056: POP
88057: POP
// end ; end ;
88058: GO 87433
88060: POP
88061: POP
// end ; end_of_file
88062: PPOPN 9
88064: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
88065: LD_VAR 0 1
88069: PUSH
88070: LD_INT 200
88072: DOUBLE
88073: GREATEREQUAL
88074: IFFALSE 88082
88076: LD_INT 299
88078: DOUBLE
88079: LESSEQUAL
88080: IFTRUE 88084
88082: GO 88116
88084: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
88085: LD_VAR 0 1
88089: PPUSH
88090: LD_VAR 0 2
88094: PPUSH
88095: LD_VAR 0 3
88099: PPUSH
88100: LD_VAR 0 4
88104: PPUSH
88105: LD_VAR 0 5
88109: PPUSH
88110: CALL 88677 0 5
88114: GO 88193
88116: LD_INT 300
88118: DOUBLE
88119: GREATEREQUAL
88120: IFFALSE 88128
88122: LD_INT 399
88124: DOUBLE
88125: LESSEQUAL
88126: IFTRUE 88130
88128: GO 88192
88130: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
88131: LD_VAR 0 1
88135: PPUSH
88136: LD_VAR 0 2
88140: PPUSH
88141: LD_VAR 0 3
88145: PPUSH
88146: LD_VAR 0 4
88150: PPUSH
88151: LD_VAR 0 5
88155: PPUSH
88156: LD_VAR 0 6
88160: PPUSH
88161: LD_VAR 0 7
88165: PPUSH
88166: LD_VAR 0 8
88170: PPUSH
88171: LD_VAR 0 9
88175: PPUSH
88176: LD_VAR 0 10
88180: PPUSH
88181: LD_VAR 0 11
88185: PPUSH
88186: CALL 84766 0 11
88190: GO 88193
88192: POP
// end ;
88193: PPOPN 11
88195: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
88196: LD_VAR 0 1
88200: PPUSH
88201: LD_VAR 0 2
88205: PPUSH
88206: LD_VAR 0 3
88210: PPUSH
88211: LD_VAR 0 4
88215: PPUSH
88216: LD_VAR 0 5
88220: PPUSH
88221: CALL 88340 0 5
// end ; end_of_file
88225: PPOPN 5
88227: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
88228: LD_INT 0
88230: PPUSH
88231: PPUSH
88232: PPUSH
88233: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
88234: LD_VAR 0 1
88238: PPUSH
88239: CALL_OW 264
88243: PUSH
88244: LD_INT 91
88246: EQUAL
88247: IFFALSE 88319
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
88249: LD_INT 68
88251: PPUSH
88252: LD_VAR 0 1
88256: PPUSH
88257: CALL_OW 255
88261: PPUSH
88262: CALL_OW 321
88266: PUSH
88267: LD_INT 2
88269: EQUAL
88270: IFFALSE 88282
// eff := 70 else
88272: LD_ADDR_VAR 0 4
88276: PUSH
88277: LD_INT 70
88279: ST_TO_ADDR
88280: GO 88290
// eff := 30 ;
88282: LD_ADDR_VAR 0 4
88286: PUSH
88287: LD_INT 30
88289: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
88290: LD_VAR 0 1
88294: PPUSH
88295: CALL_OW 250
88299: PPUSH
88300: LD_VAR 0 1
88304: PPUSH
88305: CALL_OW 251
88309: PPUSH
88310: LD_VAR 0 4
88314: PPUSH
88315: CALL_OW 495
// end ; end ;
88319: LD_VAR 0 2
88323: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
88324: LD_INT 0
88326: PPUSH
// end ;
88327: LD_VAR 0 4
88331: RET
// export function SOS_Command ( cmd ) ; begin
88332: LD_INT 0
88334: PPUSH
// end ;
88335: LD_VAR 0 2
88339: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
88340: LD_INT 0
88342: PPUSH
// end ;
88343: LD_VAR 0 6
88347: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver ; begin
88348: LD_INT 0
88350: PPUSH
88351: PPUSH
88352: PPUSH
// if not vehicle or not factory then
88353: LD_VAR 0 1
88357: NOT
88358: PUSH
88359: LD_VAR 0 2
88363: NOT
88364: OR
88365: IFFALSE 88369
// exit ;
88367: GO 88672
// if factoryWaypoints >= factory then
88369: LD_EXP 133
88373: PUSH
88374: LD_VAR 0 2
88378: GREATEREQUAL
88379: IFFALSE 88672
// if factoryWaypoints [ factory ] then
88381: LD_EXP 133
88385: PUSH
88386: LD_VAR 0 2
88390: ARRAY
88391: IFFALSE 88672
// begin if GetControl ( vehicle ) = control_manual then
88393: LD_VAR 0 1
88397: PPUSH
88398: CALL_OW 263
88402: PUSH
88403: LD_INT 1
88405: EQUAL
88406: IFFALSE 88559
// begin driver := IsDrivenBy ( vehicle ) ;
88408: LD_ADDR_VAR 0 5
88412: PUSH
88413: LD_VAR 0 1
88417: PPUSH
88418: CALL_OW 311
88422: ST_TO_ADDR
// tag := GetTag ( driver ) ;
88423: LD_ADDR_VAR 0 4
88427: PUSH
88428: LD_VAR 0 5
88432: PPUSH
88433: CALL_OW 110
88437: ST_TO_ADDR
// if tag = tDriver then
88438: LD_VAR 0 4
88442: PUSH
88443: LD_INT 501
88445: EQUAL
88446: IFFALSE 88450
// exit ;
88448: GO 88672
// if not HasTask ( driver ) then
88450: LD_VAR 0 5
88454: PPUSH
88455: CALL_OW 314
88459: NOT
88460: IFFALSE 88557
// begin SetTag ( driver , tDriver ) ;
88462: LD_VAR 0 5
88466: PPUSH
88467: LD_INT 501
88469: PPUSH
88470: CALL_OW 109
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
88474: LD_VAR 0 5
88478: PPUSH
88479: LD_EXP 133
88483: PUSH
88484: LD_VAR 0 2
88488: ARRAY
88489: PUSH
88490: LD_INT 3
88492: ARRAY
88493: PPUSH
88494: LD_EXP 133
88498: PUSH
88499: LD_VAR 0 2
88503: ARRAY
88504: PUSH
88505: LD_INT 4
88507: ARRAY
88508: PPUSH
88509: CALL_OW 111
// AddComExitVehicle ( driver ) ;
88513: LD_VAR 0 5
88517: PPUSH
88518: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
88522: LD_VAR 0 5
88526: PPUSH
88527: LD_VAR 0 2
88531: PPUSH
88532: CALL_OW 180
// wait ( 0 0$1 ) ;
88536: LD_INT 35
88538: PPUSH
88539: CALL_OW 67
// SetTag ( driver , tag ) ;
88543: LD_VAR 0 5
88547: PPUSH
88548: LD_VAR 0 4
88552: PPUSH
88553: CALL_OW 109
// end ; end else
88557: GO 88672
// if GetControl ( vehicle ) = control_remote then
88559: LD_VAR 0 1
88563: PPUSH
88564: CALL_OW 263
88568: PUSH
88569: LD_INT 2
88571: EQUAL
88572: IFFALSE 88633
// begin wait ( 0 0$2 ) ;
88574: LD_INT 70
88576: PPUSH
88577: CALL_OW 67
// if Connect ( vehicle ) then
88581: LD_VAR 0 1
88585: PPUSH
88586: CALL 37779 0 1
88590: IFFALSE 88631
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
88592: LD_VAR 0 1
88596: PPUSH
88597: LD_EXP 133
88601: PUSH
88602: LD_VAR 0 2
88606: ARRAY
88607: PUSH
88608: LD_INT 3
88610: ARRAY
88611: PPUSH
88612: LD_EXP 133
88616: PUSH
88617: LD_VAR 0 2
88621: ARRAY
88622: PUSH
88623: LD_INT 4
88625: ARRAY
88626: PPUSH
88627: CALL_OW 171
// end else
88631: GO 88672
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
88633: LD_VAR 0 1
88637: PPUSH
88638: LD_EXP 133
88642: PUSH
88643: LD_VAR 0 2
88647: ARRAY
88648: PUSH
88649: LD_INT 3
88651: ARRAY
88652: PPUSH
88653: LD_EXP 133
88657: PUSH
88658: LD_VAR 0 2
88662: ARRAY
88663: PUSH
88664: LD_INT 4
88666: ARRAY
88667: PPUSH
88668: CALL_OW 171
// end ; end ;
88672: LD_VAR 0 3
88676: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
88677: LD_INT 0
88679: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
88680: LD_VAR 0 1
88684: PUSH
88685: LD_INT 250
88687: EQUAL
88688: PUSH
88689: LD_VAR 0 2
88693: PPUSH
88694: CALL_OW 264
88698: PUSH
88699: LD_INT 81
88701: EQUAL
88702: AND
88703: IFFALSE 88724
// MinerPlaceMine ( unit , x , y ) ;
88705: LD_VAR 0 2
88709: PPUSH
88710: LD_VAR 0 4
88714: PPUSH
88715: LD_VAR 0 5
88719: PPUSH
88720: CALL 91714 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
88724: LD_VAR 0 1
88728: PUSH
88729: LD_INT 251
88731: EQUAL
88732: PUSH
88733: LD_VAR 0 2
88737: PPUSH
88738: CALL_OW 264
88742: PUSH
88743: LD_INT 81
88745: EQUAL
88746: AND
88747: IFFALSE 88768
// MinerDetonateMine ( unit , x , y ) ;
88749: LD_VAR 0 2
88753: PPUSH
88754: LD_VAR 0 4
88758: PPUSH
88759: LD_VAR 0 5
88763: PPUSH
88764: CALL 91989 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
88768: LD_VAR 0 1
88772: PUSH
88773: LD_INT 252
88775: EQUAL
88776: PUSH
88777: LD_VAR 0 2
88781: PPUSH
88782: CALL_OW 264
88786: PUSH
88787: LD_INT 81
88789: EQUAL
88790: AND
88791: IFFALSE 88812
// MinerCreateMinefield ( unit , x , y ) ;
88793: LD_VAR 0 2
88797: PPUSH
88798: LD_VAR 0 4
88802: PPUSH
88803: LD_VAR 0 5
88807: PPUSH
88808: CALL 92406 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
88812: LD_VAR 0 1
88816: PUSH
88817: LD_INT 253
88819: EQUAL
88820: PUSH
88821: LD_VAR 0 2
88825: PPUSH
88826: CALL_OW 257
88830: PUSH
88831: LD_INT 5
88833: EQUAL
88834: AND
88835: IFFALSE 88856
// ComBinocular ( unit , x , y ) ;
88837: LD_VAR 0 2
88841: PPUSH
88842: LD_VAR 0 4
88846: PPUSH
88847: LD_VAR 0 5
88851: PPUSH
88852: CALL 92775 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
88856: LD_VAR 0 1
88860: PUSH
88861: LD_INT 254
88863: EQUAL
88864: PUSH
88865: LD_VAR 0 2
88869: PPUSH
88870: CALL_OW 264
88874: PUSH
88875: LD_INT 99
88877: EQUAL
88878: AND
88879: PUSH
88880: LD_VAR 0 3
88884: PPUSH
88885: CALL_OW 263
88889: PUSH
88890: LD_INT 3
88892: EQUAL
88893: AND
88894: IFFALSE 88910
// HackDestroyVehicle ( unit , selectedUnit ) ;
88896: LD_VAR 0 2
88900: PPUSH
88901: LD_VAR 0 3
88905: PPUSH
88906: CALL 91078 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
88910: LD_VAR 0 1
88914: PUSH
88915: LD_INT 255
88917: EQUAL
88918: PUSH
88919: LD_VAR 0 2
88923: PPUSH
88924: CALL_OW 264
88928: PUSH
88929: LD_INT 14
88931: PUSH
88932: LD_INT 53
88934: PUSH
88935: EMPTY
88936: LIST
88937: LIST
88938: IN
88939: AND
88940: PUSH
88941: LD_VAR 0 4
88945: PPUSH
88946: LD_VAR 0 5
88950: PPUSH
88951: CALL_OW 488
88955: AND
88956: IFFALSE 88980
// CutTreeXYR ( unit , x , y , 12 ) ;
88958: LD_VAR 0 2
88962: PPUSH
88963: LD_VAR 0 4
88967: PPUSH
88968: LD_VAR 0 5
88972: PPUSH
88973: LD_INT 12
88975: PPUSH
88976: CALL 89075 0 4
// if cmd = 256 then
88980: LD_VAR 0 1
88984: PUSH
88985: LD_INT 256
88987: EQUAL
88988: IFFALSE 89009
// SetFactoryWaypoint ( unit , x , y ) ;
88990: LD_VAR 0 2
88994: PPUSH
88995: LD_VAR 0 4
88999: PPUSH
89000: LD_VAR 0 5
89004: PPUSH
89005: CALL 86754 0 3
// if cmd = 257 then
89009: LD_VAR 0 1
89013: PUSH
89014: LD_INT 257
89016: EQUAL
89017: IFFALSE 89038
// SetWarehouseGatheringPoint ( unit , x , y ) ;
89019: LD_VAR 0 2
89023: PPUSH
89024: LD_VAR 0 4
89028: PPUSH
89029: LD_VAR 0 5
89033: PPUSH
89034: CALL 87116 0 3
// if cmd = 258 then
89038: LD_VAR 0 1
89042: PUSH
89043: LD_INT 258
89045: EQUAL
89046: IFFALSE 89070
// BurnTreeXYR ( unit , x , y , 8 ) ;
89048: LD_VAR 0 2
89052: PPUSH
89053: LD_VAR 0 4
89057: PPUSH
89058: LD_VAR 0 5
89062: PPUSH
89063: LD_INT 8
89065: PPUSH
89066: CALL 89469 0 4
// end ;
89070: LD_VAR 0 6
89074: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
89075: LD_INT 0
89077: PPUSH
89078: PPUSH
89079: PPUSH
89080: PPUSH
89081: PPUSH
89082: PPUSH
89083: PPUSH
89084: PPUSH
89085: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
89086: LD_VAR 0 1
89090: PPUSH
89091: CALL_OW 302
89095: NOT
89096: PUSH
89097: LD_VAR 0 2
89101: PPUSH
89102: LD_VAR 0 3
89106: PPUSH
89107: CALL_OW 488
89111: NOT
89112: OR
89113: PUSH
89114: LD_VAR 0 4
89118: NOT
89119: OR
89120: IFFALSE 89124
// exit ;
89122: GO 89464
// list := [ ] ;
89124: LD_ADDR_VAR 0 13
89128: PUSH
89129: EMPTY
89130: ST_TO_ADDR
// if x - r < 0 then
89131: LD_VAR 0 2
89135: PUSH
89136: LD_VAR 0 4
89140: MINUS
89141: PUSH
89142: LD_INT 0
89144: LESS
89145: IFFALSE 89157
// min_x := 0 else
89147: LD_ADDR_VAR 0 7
89151: PUSH
89152: LD_INT 0
89154: ST_TO_ADDR
89155: GO 89173
// min_x := x - r ;
89157: LD_ADDR_VAR 0 7
89161: PUSH
89162: LD_VAR 0 2
89166: PUSH
89167: LD_VAR 0 4
89171: MINUS
89172: ST_TO_ADDR
// if y - r < 0 then
89173: LD_VAR 0 3
89177: PUSH
89178: LD_VAR 0 4
89182: MINUS
89183: PUSH
89184: LD_INT 0
89186: LESS
89187: IFFALSE 89199
// min_y := 0 else
89189: LD_ADDR_VAR 0 8
89193: PUSH
89194: LD_INT 0
89196: ST_TO_ADDR
89197: GO 89215
// min_y := y - r ;
89199: LD_ADDR_VAR 0 8
89203: PUSH
89204: LD_VAR 0 3
89208: PUSH
89209: LD_VAR 0 4
89213: MINUS
89214: ST_TO_ADDR
// max_x := x + r ;
89215: LD_ADDR_VAR 0 9
89219: PUSH
89220: LD_VAR 0 2
89224: PUSH
89225: LD_VAR 0 4
89229: PLUS
89230: ST_TO_ADDR
// max_y := y + r ;
89231: LD_ADDR_VAR 0 10
89235: PUSH
89236: LD_VAR 0 3
89240: PUSH
89241: LD_VAR 0 4
89245: PLUS
89246: ST_TO_ADDR
// for _x = min_x to max_x do
89247: LD_ADDR_VAR 0 11
89251: PUSH
89252: DOUBLE
89253: LD_VAR 0 7
89257: DEC
89258: ST_TO_ADDR
89259: LD_VAR 0 9
89263: PUSH
89264: FOR_TO
89265: IFFALSE 89382
// for _y = min_y to max_y do
89267: LD_ADDR_VAR 0 12
89271: PUSH
89272: DOUBLE
89273: LD_VAR 0 8
89277: DEC
89278: ST_TO_ADDR
89279: LD_VAR 0 10
89283: PUSH
89284: FOR_TO
89285: IFFALSE 89378
// begin if not ValidHex ( _x , _y ) then
89287: LD_VAR 0 11
89291: PPUSH
89292: LD_VAR 0 12
89296: PPUSH
89297: CALL_OW 488
89301: NOT
89302: IFFALSE 89306
// continue ;
89304: GO 89284
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
89306: LD_VAR 0 11
89310: PPUSH
89311: LD_VAR 0 12
89315: PPUSH
89316: CALL_OW 351
89320: PUSH
89321: LD_VAR 0 11
89325: PPUSH
89326: LD_VAR 0 12
89330: PPUSH
89331: CALL_OW 554
89335: AND
89336: IFFALSE 89376
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
89338: LD_ADDR_VAR 0 13
89342: PUSH
89343: LD_VAR 0 13
89347: PPUSH
89348: LD_VAR 0 13
89352: PUSH
89353: LD_INT 1
89355: PLUS
89356: PPUSH
89357: LD_VAR 0 11
89361: PUSH
89362: LD_VAR 0 12
89366: PUSH
89367: EMPTY
89368: LIST
89369: LIST
89370: PPUSH
89371: CALL_OW 2
89375: ST_TO_ADDR
// end ;
89376: GO 89284
89378: POP
89379: POP
89380: GO 89264
89382: POP
89383: POP
// if not list then
89384: LD_VAR 0 13
89388: NOT
89389: IFFALSE 89393
// exit ;
89391: GO 89464
// for i in list do
89393: LD_ADDR_VAR 0 6
89397: PUSH
89398: LD_VAR 0 13
89402: PUSH
89403: FOR_IN
89404: IFFALSE 89462
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
89406: LD_VAR 0 1
89410: PPUSH
89411: LD_STRING M
89413: PUSH
89414: LD_VAR 0 6
89418: PUSH
89419: LD_INT 1
89421: ARRAY
89422: PUSH
89423: LD_VAR 0 6
89427: PUSH
89428: LD_INT 2
89430: ARRAY
89431: PUSH
89432: LD_INT 0
89434: PUSH
89435: LD_INT 0
89437: PUSH
89438: LD_INT 0
89440: PUSH
89441: LD_INT 0
89443: PUSH
89444: EMPTY
89445: LIST
89446: LIST
89447: LIST
89448: LIST
89449: LIST
89450: LIST
89451: LIST
89452: PUSH
89453: EMPTY
89454: LIST
89455: PPUSH
89456: CALL_OW 447
89460: GO 89403
89462: POP
89463: POP
// end ;
89464: LD_VAR 0 5
89468: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
89469: LD_INT 0
89471: PPUSH
89472: PPUSH
89473: PPUSH
89474: PPUSH
89475: PPUSH
89476: PPUSH
89477: PPUSH
89478: PPUSH
89479: PPUSH
89480: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
89481: LD_VAR 0 1
89485: PPUSH
89486: CALL_OW 302
89490: NOT
89491: PUSH
89492: LD_VAR 0 2
89496: PPUSH
89497: LD_VAR 0 3
89501: PPUSH
89502: CALL_OW 488
89506: NOT
89507: OR
89508: PUSH
89509: LD_VAR 0 4
89513: NOT
89514: OR
89515: IFFALSE 89519
// exit ;
89517: GO 90032
// list := [ ] ;
89519: LD_ADDR_VAR 0 13
89523: PUSH
89524: EMPTY
89525: ST_TO_ADDR
// if x - r < 0 then
89526: LD_VAR 0 2
89530: PUSH
89531: LD_VAR 0 4
89535: MINUS
89536: PUSH
89537: LD_INT 0
89539: LESS
89540: IFFALSE 89552
// min_x := 0 else
89542: LD_ADDR_VAR 0 7
89546: PUSH
89547: LD_INT 0
89549: ST_TO_ADDR
89550: GO 89568
// min_x := x - r ;
89552: LD_ADDR_VAR 0 7
89556: PUSH
89557: LD_VAR 0 2
89561: PUSH
89562: LD_VAR 0 4
89566: MINUS
89567: ST_TO_ADDR
// if y - r < 0 then
89568: LD_VAR 0 3
89572: PUSH
89573: LD_VAR 0 4
89577: MINUS
89578: PUSH
89579: LD_INT 0
89581: LESS
89582: IFFALSE 89594
// min_y := 0 else
89584: LD_ADDR_VAR 0 8
89588: PUSH
89589: LD_INT 0
89591: ST_TO_ADDR
89592: GO 89610
// min_y := y - r ;
89594: LD_ADDR_VAR 0 8
89598: PUSH
89599: LD_VAR 0 3
89603: PUSH
89604: LD_VAR 0 4
89608: MINUS
89609: ST_TO_ADDR
// max_x := x + r ;
89610: LD_ADDR_VAR 0 9
89614: PUSH
89615: LD_VAR 0 2
89619: PUSH
89620: LD_VAR 0 4
89624: PLUS
89625: ST_TO_ADDR
// max_y := y + r ;
89626: LD_ADDR_VAR 0 10
89630: PUSH
89631: LD_VAR 0 3
89635: PUSH
89636: LD_VAR 0 4
89640: PLUS
89641: ST_TO_ADDR
// for _x = min_x to max_x do
89642: LD_ADDR_VAR 0 11
89646: PUSH
89647: DOUBLE
89648: LD_VAR 0 7
89652: DEC
89653: ST_TO_ADDR
89654: LD_VAR 0 9
89658: PUSH
89659: FOR_TO
89660: IFFALSE 89777
// for _y = min_y to max_y do
89662: LD_ADDR_VAR 0 12
89666: PUSH
89667: DOUBLE
89668: LD_VAR 0 8
89672: DEC
89673: ST_TO_ADDR
89674: LD_VAR 0 10
89678: PUSH
89679: FOR_TO
89680: IFFALSE 89773
// begin if not ValidHex ( _x , _y ) then
89682: LD_VAR 0 11
89686: PPUSH
89687: LD_VAR 0 12
89691: PPUSH
89692: CALL_OW 488
89696: NOT
89697: IFFALSE 89701
// continue ;
89699: GO 89679
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
89701: LD_VAR 0 11
89705: PPUSH
89706: LD_VAR 0 12
89710: PPUSH
89711: CALL_OW 351
89715: PUSH
89716: LD_VAR 0 11
89720: PPUSH
89721: LD_VAR 0 12
89725: PPUSH
89726: CALL_OW 554
89730: AND
89731: IFFALSE 89771
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
89733: LD_ADDR_VAR 0 13
89737: PUSH
89738: LD_VAR 0 13
89742: PPUSH
89743: LD_VAR 0 13
89747: PUSH
89748: LD_INT 1
89750: PLUS
89751: PPUSH
89752: LD_VAR 0 11
89756: PUSH
89757: LD_VAR 0 12
89761: PUSH
89762: EMPTY
89763: LIST
89764: LIST
89765: PPUSH
89766: CALL_OW 2
89770: ST_TO_ADDR
// end ;
89771: GO 89679
89773: POP
89774: POP
89775: GO 89659
89777: POP
89778: POP
// if not list then
89779: LD_VAR 0 13
89783: NOT
89784: IFFALSE 89788
// exit ;
89786: GO 90032
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
89788: LD_ADDR_VAR 0 13
89792: PUSH
89793: LD_VAR 0 1
89797: PPUSH
89798: LD_VAR 0 13
89802: PPUSH
89803: LD_INT 1
89805: PPUSH
89806: LD_INT 1
89808: PPUSH
89809: CALL 34921 0 4
89813: ST_TO_ADDR
// ComStop ( flame ) ;
89814: LD_VAR 0 1
89818: PPUSH
89819: CALL_OW 141
// for i in list do
89823: LD_ADDR_VAR 0 6
89827: PUSH
89828: LD_VAR 0 13
89832: PUSH
89833: FOR_IN
89834: IFFALSE 89865
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
89836: LD_VAR 0 1
89840: PPUSH
89841: LD_VAR 0 6
89845: PUSH
89846: LD_INT 1
89848: ARRAY
89849: PPUSH
89850: LD_VAR 0 6
89854: PUSH
89855: LD_INT 2
89857: ARRAY
89858: PPUSH
89859: CALL_OW 176
89863: GO 89833
89865: POP
89866: POP
// repeat wait ( 0 0$1 ) ;
89867: LD_INT 35
89869: PPUSH
89870: CALL_OW 67
// task := GetTaskList ( flame ) ;
89874: LD_ADDR_VAR 0 14
89878: PUSH
89879: LD_VAR 0 1
89883: PPUSH
89884: CALL_OW 437
89888: ST_TO_ADDR
// if not task then
89889: LD_VAR 0 14
89893: NOT
89894: IFFALSE 89898
// exit ;
89896: GO 90032
// if task [ 1 ] [ 1 ] <> | then
89898: LD_VAR 0 14
89902: PUSH
89903: LD_INT 1
89905: ARRAY
89906: PUSH
89907: LD_INT 1
89909: ARRAY
89910: PUSH
89911: LD_STRING |
89913: NONEQUAL
89914: IFFALSE 89918
// exit ;
89916: GO 90032
// _x := task [ 1 ] [ 2 ] ;
89918: LD_ADDR_VAR 0 11
89922: PUSH
89923: LD_VAR 0 14
89927: PUSH
89928: LD_INT 1
89930: ARRAY
89931: PUSH
89932: LD_INT 2
89934: ARRAY
89935: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
89936: LD_ADDR_VAR 0 12
89940: PUSH
89941: LD_VAR 0 14
89945: PUSH
89946: LD_INT 1
89948: ARRAY
89949: PUSH
89950: LD_INT 3
89952: ARRAY
89953: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
89954: LD_VAR 0 11
89958: PPUSH
89959: LD_VAR 0 12
89963: PPUSH
89964: CALL_OW 351
89968: NOT
89969: PUSH
89970: LD_VAR 0 11
89974: PPUSH
89975: LD_VAR 0 12
89979: PPUSH
89980: CALL_OW 554
89984: NOT
89985: OR
89986: IFFALSE 90020
// begin task := Delete ( task , 1 ) ;
89988: LD_ADDR_VAR 0 14
89992: PUSH
89993: LD_VAR 0 14
89997: PPUSH
89998: LD_INT 1
90000: PPUSH
90001: CALL_OW 3
90005: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
90006: LD_VAR 0 1
90010: PPUSH
90011: LD_VAR 0 14
90015: PPUSH
90016: CALL_OW 446
// end ; until not HasTask ( flame ) ;
90020: LD_VAR 0 1
90024: PPUSH
90025: CALL_OW 314
90029: NOT
90030: IFFALSE 89867
// end ;
90032: LD_VAR 0 5
90036: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
90037: LD_EXP 136
90041: NOT
90042: IFFALSE 90092
90044: GO 90046
90046: DISABLE
// begin initHack := true ;
90047: LD_ADDR_EXP 136
90051: PUSH
90052: LD_INT 1
90054: ST_TO_ADDR
// hackTanks := [ ] ;
90055: LD_ADDR_EXP 137
90059: PUSH
90060: EMPTY
90061: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
90062: LD_ADDR_EXP 138
90066: PUSH
90067: EMPTY
90068: ST_TO_ADDR
// hackLimit := 3 ;
90069: LD_ADDR_EXP 139
90073: PUSH
90074: LD_INT 3
90076: ST_TO_ADDR
// hackDist := 12 ;
90077: LD_ADDR_EXP 140
90081: PUSH
90082: LD_INT 12
90084: ST_TO_ADDR
// hackCounter := [ ] ;
90085: LD_ADDR_EXP 141
90089: PUSH
90090: EMPTY
90091: ST_TO_ADDR
// end ;
90092: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
90093: LD_EXP 136
90097: PUSH
90098: LD_INT 34
90100: PUSH
90101: LD_INT 99
90103: PUSH
90104: EMPTY
90105: LIST
90106: LIST
90107: PPUSH
90108: CALL_OW 69
90112: AND
90113: IFFALSE 90366
90115: GO 90117
90117: DISABLE
90118: LD_INT 0
90120: PPUSH
90121: PPUSH
// begin enable ;
90122: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
90123: LD_ADDR_VAR 0 1
90127: PUSH
90128: LD_INT 34
90130: PUSH
90131: LD_INT 99
90133: PUSH
90134: EMPTY
90135: LIST
90136: LIST
90137: PPUSH
90138: CALL_OW 69
90142: PUSH
90143: FOR_IN
90144: IFFALSE 90364
// begin if not i in hackTanks then
90146: LD_VAR 0 1
90150: PUSH
90151: LD_EXP 137
90155: IN
90156: NOT
90157: IFFALSE 90240
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
90159: LD_ADDR_EXP 137
90163: PUSH
90164: LD_EXP 137
90168: PPUSH
90169: LD_EXP 137
90173: PUSH
90174: LD_INT 1
90176: PLUS
90177: PPUSH
90178: LD_VAR 0 1
90182: PPUSH
90183: CALL_OW 1
90187: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
90188: LD_ADDR_EXP 138
90192: PUSH
90193: LD_EXP 138
90197: PPUSH
90198: LD_EXP 138
90202: PUSH
90203: LD_INT 1
90205: PLUS
90206: PPUSH
90207: EMPTY
90208: PPUSH
90209: CALL_OW 1
90213: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
90214: LD_ADDR_EXP 141
90218: PUSH
90219: LD_EXP 141
90223: PPUSH
90224: LD_EXP 141
90228: PUSH
90229: LD_INT 1
90231: PLUS
90232: PPUSH
90233: EMPTY
90234: PPUSH
90235: CALL_OW 1
90239: ST_TO_ADDR
// end ; if not IsOk ( i ) then
90240: LD_VAR 0 1
90244: PPUSH
90245: CALL_OW 302
90249: NOT
90250: IFFALSE 90263
// begin HackUnlinkAll ( i ) ;
90252: LD_VAR 0 1
90256: PPUSH
90257: CALL 90369 0 1
// continue ;
90261: GO 90143
// end ; HackCheckCapturedStatus ( i ) ;
90263: LD_VAR 0 1
90267: PPUSH
90268: CALL 90812 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
90272: LD_ADDR_VAR 0 2
90276: PUSH
90277: LD_INT 81
90279: PUSH
90280: LD_VAR 0 1
90284: PPUSH
90285: CALL_OW 255
90289: PUSH
90290: EMPTY
90291: LIST
90292: LIST
90293: PUSH
90294: LD_INT 33
90296: PUSH
90297: LD_INT 3
90299: PUSH
90300: EMPTY
90301: LIST
90302: LIST
90303: PUSH
90304: LD_INT 91
90306: PUSH
90307: LD_VAR 0 1
90311: PUSH
90312: LD_EXP 140
90316: PUSH
90317: EMPTY
90318: LIST
90319: LIST
90320: LIST
90321: PUSH
90322: LD_INT 50
90324: PUSH
90325: EMPTY
90326: LIST
90327: PUSH
90328: EMPTY
90329: LIST
90330: LIST
90331: LIST
90332: LIST
90333: PPUSH
90334: CALL_OW 69
90338: ST_TO_ADDR
// if not tmp then
90339: LD_VAR 0 2
90343: NOT
90344: IFFALSE 90348
// continue ;
90346: GO 90143
// HackLink ( i , tmp ) ;
90348: LD_VAR 0 1
90352: PPUSH
90353: LD_VAR 0 2
90357: PPUSH
90358: CALL 90505 0 2
// end ;
90362: GO 90143
90364: POP
90365: POP
// end ;
90366: PPOPN 2
90368: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
90369: LD_INT 0
90371: PPUSH
90372: PPUSH
90373: PPUSH
// if not hack in hackTanks then
90374: LD_VAR 0 1
90378: PUSH
90379: LD_EXP 137
90383: IN
90384: NOT
90385: IFFALSE 90389
// exit ;
90387: GO 90500
// index := GetElementIndex ( hackTanks , hack ) ;
90389: LD_ADDR_VAR 0 4
90393: PUSH
90394: LD_EXP 137
90398: PPUSH
90399: LD_VAR 0 1
90403: PPUSH
90404: CALL 34218 0 2
90408: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
90409: LD_EXP 138
90413: PUSH
90414: LD_VAR 0 4
90418: ARRAY
90419: IFFALSE 90500
// begin for i in hackTanksCaptured [ index ] do
90421: LD_ADDR_VAR 0 3
90425: PUSH
90426: LD_EXP 138
90430: PUSH
90431: LD_VAR 0 4
90435: ARRAY
90436: PUSH
90437: FOR_IN
90438: IFFALSE 90464
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
90440: LD_VAR 0 3
90444: PUSH
90445: LD_INT 1
90447: ARRAY
90448: PPUSH
90449: LD_VAR 0 3
90453: PUSH
90454: LD_INT 2
90456: ARRAY
90457: PPUSH
90458: CALL_OW 235
90462: GO 90437
90464: POP
90465: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
90466: LD_ADDR_EXP 138
90470: PUSH
90471: LD_EXP 138
90475: PPUSH
90476: LD_VAR 0 4
90480: PPUSH
90481: EMPTY
90482: PPUSH
90483: CALL_OW 1
90487: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
90488: LD_VAR 0 1
90492: PPUSH
90493: LD_INT 0
90495: PPUSH
90496: CALL_OW 505
// end ; end ;
90500: LD_VAR 0 2
90504: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
90505: LD_INT 0
90507: PPUSH
90508: PPUSH
90509: PPUSH
// if not hack in hackTanks or not vehicles then
90510: LD_VAR 0 1
90514: PUSH
90515: LD_EXP 137
90519: IN
90520: NOT
90521: PUSH
90522: LD_VAR 0 2
90526: NOT
90527: OR
90528: IFFALSE 90532
// exit ;
90530: GO 90807
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
90532: LD_ADDR_VAR 0 2
90536: PUSH
90537: LD_VAR 0 1
90541: PPUSH
90542: LD_VAR 0 2
90546: PPUSH
90547: LD_INT 1
90549: PPUSH
90550: LD_INT 1
90552: PPUSH
90553: CALL 34868 0 4
90557: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
90558: LD_ADDR_VAR 0 5
90562: PUSH
90563: LD_EXP 137
90567: PPUSH
90568: LD_VAR 0 1
90572: PPUSH
90573: CALL 34218 0 2
90577: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
90578: LD_EXP 138
90582: PUSH
90583: LD_VAR 0 5
90587: ARRAY
90588: PUSH
90589: LD_EXP 139
90593: LESS
90594: IFFALSE 90783
// begin for i := 1 to vehicles do
90596: LD_ADDR_VAR 0 4
90600: PUSH
90601: DOUBLE
90602: LD_INT 1
90604: DEC
90605: ST_TO_ADDR
90606: LD_VAR 0 2
90610: PUSH
90611: FOR_TO
90612: IFFALSE 90781
// begin if hackTanksCaptured [ index ] = hackLimit then
90614: LD_EXP 138
90618: PUSH
90619: LD_VAR 0 5
90623: ARRAY
90624: PUSH
90625: LD_EXP 139
90629: EQUAL
90630: IFFALSE 90634
// break ;
90632: GO 90781
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
90634: LD_ADDR_EXP 141
90638: PUSH
90639: LD_EXP 141
90643: PPUSH
90644: LD_VAR 0 5
90648: PPUSH
90649: LD_EXP 141
90653: PUSH
90654: LD_VAR 0 5
90658: ARRAY
90659: PUSH
90660: LD_INT 1
90662: PLUS
90663: PPUSH
90664: CALL_OW 1
90668: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
90669: LD_ADDR_EXP 138
90673: PUSH
90674: LD_EXP 138
90678: PPUSH
90679: LD_VAR 0 5
90683: PUSH
90684: LD_EXP 138
90688: PUSH
90689: LD_VAR 0 5
90693: ARRAY
90694: PUSH
90695: LD_INT 1
90697: PLUS
90698: PUSH
90699: EMPTY
90700: LIST
90701: LIST
90702: PPUSH
90703: LD_VAR 0 2
90707: PUSH
90708: LD_VAR 0 4
90712: ARRAY
90713: PUSH
90714: LD_VAR 0 2
90718: PUSH
90719: LD_VAR 0 4
90723: ARRAY
90724: PPUSH
90725: CALL_OW 255
90729: PUSH
90730: EMPTY
90731: LIST
90732: LIST
90733: PPUSH
90734: CALL 34433 0 3
90738: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
90739: LD_VAR 0 2
90743: PUSH
90744: LD_VAR 0 4
90748: ARRAY
90749: PPUSH
90750: LD_VAR 0 1
90754: PPUSH
90755: CALL_OW 255
90759: PPUSH
90760: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
90764: LD_VAR 0 2
90768: PUSH
90769: LD_VAR 0 4
90773: ARRAY
90774: PPUSH
90775: CALL_OW 141
// end ;
90779: GO 90611
90781: POP
90782: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
90783: LD_VAR 0 1
90787: PPUSH
90788: LD_EXP 138
90792: PUSH
90793: LD_VAR 0 5
90797: ARRAY
90798: PUSH
90799: LD_INT 0
90801: PLUS
90802: PPUSH
90803: CALL_OW 505
// end ;
90807: LD_VAR 0 3
90811: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
90812: LD_INT 0
90814: PPUSH
90815: PPUSH
90816: PPUSH
90817: PPUSH
// if not hack in hackTanks then
90818: LD_VAR 0 1
90822: PUSH
90823: LD_EXP 137
90827: IN
90828: NOT
90829: IFFALSE 90833
// exit ;
90831: GO 91073
// index := GetElementIndex ( hackTanks , hack ) ;
90833: LD_ADDR_VAR 0 4
90837: PUSH
90838: LD_EXP 137
90842: PPUSH
90843: LD_VAR 0 1
90847: PPUSH
90848: CALL 34218 0 2
90852: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
90853: LD_ADDR_VAR 0 3
90857: PUSH
90858: DOUBLE
90859: LD_EXP 138
90863: PUSH
90864: LD_VAR 0 4
90868: ARRAY
90869: INC
90870: ST_TO_ADDR
90871: LD_INT 1
90873: PUSH
90874: FOR_DOWNTO
90875: IFFALSE 91047
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
90877: LD_ADDR_VAR 0 5
90881: PUSH
90882: LD_EXP 138
90886: PUSH
90887: LD_VAR 0 4
90891: ARRAY
90892: PUSH
90893: LD_VAR 0 3
90897: ARRAY
90898: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
90899: LD_VAR 0 5
90903: PUSH
90904: LD_INT 1
90906: ARRAY
90907: PPUSH
90908: CALL_OW 302
90912: NOT
90913: PUSH
90914: LD_VAR 0 5
90918: PUSH
90919: LD_INT 1
90921: ARRAY
90922: PPUSH
90923: CALL_OW 255
90927: PUSH
90928: LD_VAR 0 1
90932: PPUSH
90933: CALL_OW 255
90937: NONEQUAL
90938: OR
90939: IFFALSE 91045
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
90941: LD_VAR 0 5
90945: PUSH
90946: LD_INT 1
90948: ARRAY
90949: PPUSH
90950: CALL_OW 305
90954: PUSH
90955: LD_VAR 0 5
90959: PUSH
90960: LD_INT 1
90962: ARRAY
90963: PPUSH
90964: CALL_OW 255
90968: PUSH
90969: LD_VAR 0 1
90973: PPUSH
90974: CALL_OW 255
90978: EQUAL
90979: AND
90980: IFFALSE 91004
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
90982: LD_VAR 0 5
90986: PUSH
90987: LD_INT 1
90989: ARRAY
90990: PPUSH
90991: LD_VAR 0 5
90995: PUSH
90996: LD_INT 2
90998: ARRAY
90999: PPUSH
91000: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
91004: LD_ADDR_EXP 138
91008: PUSH
91009: LD_EXP 138
91013: PPUSH
91014: LD_VAR 0 4
91018: PPUSH
91019: LD_EXP 138
91023: PUSH
91024: LD_VAR 0 4
91028: ARRAY
91029: PPUSH
91030: LD_VAR 0 3
91034: PPUSH
91035: CALL_OW 3
91039: PPUSH
91040: CALL_OW 1
91044: ST_TO_ADDR
// end ; end ;
91045: GO 90874
91047: POP
91048: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
91049: LD_VAR 0 1
91053: PPUSH
91054: LD_EXP 138
91058: PUSH
91059: LD_VAR 0 4
91063: ARRAY
91064: PUSH
91065: LD_INT 0
91067: PLUS
91068: PPUSH
91069: CALL_OW 505
// end ;
91073: LD_VAR 0 2
91077: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
91078: LD_INT 0
91080: PPUSH
91081: PPUSH
91082: PPUSH
91083: PPUSH
// if not hack in hackTanks then
91084: LD_VAR 0 1
91088: PUSH
91089: LD_EXP 137
91093: IN
91094: NOT
91095: IFFALSE 91099
// exit ;
91097: GO 91184
// index := GetElementIndex ( hackTanks , hack ) ;
91099: LD_ADDR_VAR 0 5
91103: PUSH
91104: LD_EXP 137
91108: PPUSH
91109: LD_VAR 0 1
91113: PPUSH
91114: CALL 34218 0 2
91118: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
91119: LD_ADDR_VAR 0 4
91123: PUSH
91124: DOUBLE
91125: LD_INT 1
91127: DEC
91128: ST_TO_ADDR
91129: LD_EXP 138
91133: PUSH
91134: LD_VAR 0 5
91138: ARRAY
91139: PUSH
91140: FOR_TO
91141: IFFALSE 91182
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
91143: LD_EXP 138
91147: PUSH
91148: LD_VAR 0 5
91152: ARRAY
91153: PUSH
91154: LD_VAR 0 4
91158: ARRAY
91159: PUSH
91160: LD_INT 1
91162: ARRAY
91163: PUSH
91164: LD_VAR 0 2
91168: EQUAL
91169: IFFALSE 91180
// KillUnit ( vehicle ) ;
91171: LD_VAR 0 2
91175: PPUSH
91176: CALL_OW 66
91180: GO 91140
91182: POP
91183: POP
// end ;
91184: LD_VAR 0 3
91188: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
91189: LD_EXP 142
91193: NOT
91194: IFFALSE 91229
91196: GO 91198
91198: DISABLE
// begin initMiner := true ;
91199: LD_ADDR_EXP 142
91203: PUSH
91204: LD_INT 1
91206: ST_TO_ADDR
// minersList := [ ] ;
91207: LD_ADDR_EXP 143
91211: PUSH
91212: EMPTY
91213: ST_TO_ADDR
// minerMinesList := [ ] ;
91214: LD_ADDR_EXP 144
91218: PUSH
91219: EMPTY
91220: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
91221: LD_ADDR_EXP 145
91225: PUSH
91226: LD_INT 5
91228: ST_TO_ADDR
// end ;
91229: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
91230: LD_EXP 142
91234: PUSH
91235: LD_INT 34
91237: PUSH
91238: LD_INT 81
91240: PUSH
91241: EMPTY
91242: LIST
91243: LIST
91244: PPUSH
91245: CALL_OW 69
91249: AND
91250: IFFALSE 91711
91252: GO 91254
91254: DISABLE
91255: LD_INT 0
91257: PPUSH
91258: PPUSH
91259: PPUSH
91260: PPUSH
// begin enable ;
91261: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
91262: LD_ADDR_VAR 0 1
91266: PUSH
91267: LD_INT 34
91269: PUSH
91270: LD_INT 81
91272: PUSH
91273: EMPTY
91274: LIST
91275: LIST
91276: PPUSH
91277: CALL_OW 69
91281: PUSH
91282: FOR_IN
91283: IFFALSE 91355
// begin if not i in minersList then
91285: LD_VAR 0 1
91289: PUSH
91290: LD_EXP 143
91294: IN
91295: NOT
91296: IFFALSE 91353
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
91298: LD_ADDR_EXP 143
91302: PUSH
91303: LD_EXP 143
91307: PPUSH
91308: LD_EXP 143
91312: PUSH
91313: LD_INT 1
91315: PLUS
91316: PPUSH
91317: LD_VAR 0 1
91321: PPUSH
91322: CALL_OW 1
91326: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
91327: LD_ADDR_EXP 144
91331: PUSH
91332: LD_EXP 144
91336: PPUSH
91337: LD_EXP 144
91341: PUSH
91342: LD_INT 1
91344: PLUS
91345: PPUSH
91346: EMPTY
91347: PPUSH
91348: CALL_OW 1
91352: ST_TO_ADDR
// end end ;
91353: GO 91282
91355: POP
91356: POP
// for i := minerMinesList downto 1 do
91357: LD_ADDR_VAR 0 1
91361: PUSH
91362: DOUBLE
91363: LD_EXP 144
91367: INC
91368: ST_TO_ADDR
91369: LD_INT 1
91371: PUSH
91372: FOR_DOWNTO
91373: IFFALSE 91709
// begin if IsLive ( minersList [ i ] ) then
91375: LD_EXP 143
91379: PUSH
91380: LD_VAR 0 1
91384: ARRAY
91385: PPUSH
91386: CALL_OW 300
91390: IFFALSE 91418
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
91392: LD_EXP 143
91396: PUSH
91397: LD_VAR 0 1
91401: ARRAY
91402: PPUSH
91403: LD_EXP 144
91407: PUSH
91408: LD_VAR 0 1
91412: ARRAY
91413: PPUSH
91414: CALL_OW 505
// if not minerMinesList [ i ] then
91418: LD_EXP 144
91422: PUSH
91423: LD_VAR 0 1
91427: ARRAY
91428: NOT
91429: IFFALSE 91433
// continue ;
91431: GO 91372
// for j := minerMinesList [ i ] downto 1 do
91433: LD_ADDR_VAR 0 2
91437: PUSH
91438: DOUBLE
91439: LD_EXP 144
91443: PUSH
91444: LD_VAR 0 1
91448: ARRAY
91449: INC
91450: ST_TO_ADDR
91451: LD_INT 1
91453: PUSH
91454: FOR_DOWNTO
91455: IFFALSE 91705
// begin side := GetSide ( minersList [ i ] ) ;
91457: LD_ADDR_VAR 0 3
91461: PUSH
91462: LD_EXP 143
91466: PUSH
91467: LD_VAR 0 1
91471: ARRAY
91472: PPUSH
91473: CALL_OW 255
91477: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
91478: LD_ADDR_VAR 0 4
91482: PUSH
91483: LD_EXP 144
91487: PUSH
91488: LD_VAR 0 1
91492: ARRAY
91493: PUSH
91494: LD_VAR 0 2
91498: ARRAY
91499: PUSH
91500: LD_INT 1
91502: ARRAY
91503: PPUSH
91504: LD_EXP 144
91508: PUSH
91509: LD_VAR 0 1
91513: ARRAY
91514: PUSH
91515: LD_VAR 0 2
91519: ARRAY
91520: PUSH
91521: LD_INT 2
91523: ARRAY
91524: PPUSH
91525: CALL_OW 428
91529: ST_TO_ADDR
// if not tmp then
91530: LD_VAR 0 4
91534: NOT
91535: IFFALSE 91539
// continue ;
91537: GO 91454
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
91539: LD_VAR 0 4
91543: PUSH
91544: LD_INT 81
91546: PUSH
91547: LD_VAR 0 3
91551: PUSH
91552: EMPTY
91553: LIST
91554: LIST
91555: PPUSH
91556: CALL_OW 69
91560: IN
91561: PUSH
91562: LD_EXP 144
91566: PUSH
91567: LD_VAR 0 1
91571: ARRAY
91572: PUSH
91573: LD_VAR 0 2
91577: ARRAY
91578: PUSH
91579: LD_INT 1
91581: ARRAY
91582: PPUSH
91583: LD_EXP 144
91587: PUSH
91588: LD_VAR 0 1
91592: ARRAY
91593: PUSH
91594: LD_VAR 0 2
91598: ARRAY
91599: PUSH
91600: LD_INT 2
91602: ARRAY
91603: PPUSH
91604: CALL_OW 458
91608: AND
91609: IFFALSE 91703
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
91611: LD_EXP 144
91615: PUSH
91616: LD_VAR 0 1
91620: ARRAY
91621: PUSH
91622: LD_VAR 0 2
91626: ARRAY
91627: PUSH
91628: LD_INT 1
91630: ARRAY
91631: PPUSH
91632: LD_EXP 144
91636: PUSH
91637: LD_VAR 0 1
91641: ARRAY
91642: PUSH
91643: LD_VAR 0 2
91647: ARRAY
91648: PUSH
91649: LD_INT 2
91651: ARRAY
91652: PPUSH
91653: LD_VAR 0 3
91657: PPUSH
91658: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
91662: LD_ADDR_EXP 144
91666: PUSH
91667: LD_EXP 144
91671: PPUSH
91672: LD_VAR 0 1
91676: PPUSH
91677: LD_EXP 144
91681: PUSH
91682: LD_VAR 0 1
91686: ARRAY
91687: PPUSH
91688: LD_VAR 0 2
91692: PPUSH
91693: CALL_OW 3
91697: PPUSH
91698: CALL_OW 1
91702: ST_TO_ADDR
// end ; end ;
91703: GO 91454
91705: POP
91706: POP
// end ;
91707: GO 91372
91709: POP
91710: POP
// end ;
91711: PPOPN 4
91713: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
91714: LD_INT 0
91716: PPUSH
91717: PPUSH
// result := false ;
91718: LD_ADDR_VAR 0 4
91722: PUSH
91723: LD_INT 0
91725: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
91726: LD_VAR 0 1
91730: PPUSH
91731: CALL_OW 264
91735: PUSH
91736: LD_INT 81
91738: EQUAL
91739: NOT
91740: IFFALSE 91744
// exit ;
91742: GO 91984
// index := GetElementIndex ( minersList , unit ) ;
91744: LD_ADDR_VAR 0 5
91748: PUSH
91749: LD_EXP 143
91753: PPUSH
91754: LD_VAR 0 1
91758: PPUSH
91759: CALL 34218 0 2
91763: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
91764: LD_EXP 144
91768: PUSH
91769: LD_VAR 0 5
91773: ARRAY
91774: PUSH
91775: LD_EXP 145
91779: GREATEREQUAL
91780: IFFALSE 91784
// exit ;
91782: GO 91984
// ComMoveXY ( unit , x , y ) ;
91784: LD_VAR 0 1
91788: PPUSH
91789: LD_VAR 0 2
91793: PPUSH
91794: LD_VAR 0 3
91798: PPUSH
91799: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
91803: LD_INT 35
91805: PPUSH
91806: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
91810: LD_VAR 0 1
91814: PPUSH
91815: LD_VAR 0 2
91819: PPUSH
91820: LD_VAR 0 3
91824: PPUSH
91825: CALL 65959 0 3
91829: NOT
91830: PUSH
91831: LD_VAR 0 1
91835: PPUSH
91836: CALL_OW 314
91840: AND
91841: IFFALSE 91845
// exit ;
91843: GO 91984
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
91845: LD_VAR 0 2
91849: PPUSH
91850: LD_VAR 0 3
91854: PPUSH
91855: CALL_OW 428
91859: PUSH
91860: LD_VAR 0 1
91864: EQUAL
91865: PUSH
91866: LD_VAR 0 1
91870: PPUSH
91871: CALL_OW 314
91875: NOT
91876: AND
91877: IFFALSE 91803
// PlaySoundXY ( x , y , PlantMine ) ;
91879: LD_VAR 0 2
91883: PPUSH
91884: LD_VAR 0 3
91888: PPUSH
91889: LD_STRING PlantMine
91891: PPUSH
91892: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
91896: LD_VAR 0 2
91900: PPUSH
91901: LD_VAR 0 3
91905: PPUSH
91906: LD_VAR 0 1
91910: PPUSH
91911: CALL_OW 255
91915: PPUSH
91916: LD_INT 0
91918: PPUSH
91919: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
91923: LD_ADDR_EXP 144
91927: PUSH
91928: LD_EXP 144
91932: PPUSH
91933: LD_VAR 0 5
91937: PUSH
91938: LD_EXP 144
91942: PUSH
91943: LD_VAR 0 5
91947: ARRAY
91948: PUSH
91949: LD_INT 1
91951: PLUS
91952: PUSH
91953: EMPTY
91954: LIST
91955: LIST
91956: PPUSH
91957: LD_VAR 0 2
91961: PUSH
91962: LD_VAR 0 3
91966: PUSH
91967: EMPTY
91968: LIST
91969: LIST
91970: PPUSH
91971: CALL 34433 0 3
91975: ST_TO_ADDR
// result := true ;
91976: LD_ADDR_VAR 0 4
91980: PUSH
91981: LD_INT 1
91983: ST_TO_ADDR
// end ;
91984: LD_VAR 0 4
91988: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
91989: LD_INT 0
91991: PPUSH
91992: PPUSH
91993: PPUSH
// if not unit in minersList then
91994: LD_VAR 0 1
91998: PUSH
91999: LD_EXP 143
92003: IN
92004: NOT
92005: IFFALSE 92009
// exit ;
92007: GO 92401
// index := GetElementIndex ( minersList , unit ) ;
92009: LD_ADDR_VAR 0 6
92013: PUSH
92014: LD_EXP 143
92018: PPUSH
92019: LD_VAR 0 1
92023: PPUSH
92024: CALL 34218 0 2
92028: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
92029: LD_ADDR_VAR 0 5
92033: PUSH
92034: DOUBLE
92035: LD_EXP 144
92039: PUSH
92040: LD_VAR 0 6
92044: ARRAY
92045: INC
92046: ST_TO_ADDR
92047: LD_INT 1
92049: PUSH
92050: FOR_DOWNTO
92051: IFFALSE 92212
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
92053: LD_EXP 144
92057: PUSH
92058: LD_VAR 0 6
92062: ARRAY
92063: PUSH
92064: LD_VAR 0 5
92068: ARRAY
92069: PUSH
92070: LD_INT 1
92072: ARRAY
92073: PUSH
92074: LD_VAR 0 2
92078: EQUAL
92079: PUSH
92080: LD_EXP 144
92084: PUSH
92085: LD_VAR 0 6
92089: ARRAY
92090: PUSH
92091: LD_VAR 0 5
92095: ARRAY
92096: PUSH
92097: LD_INT 2
92099: ARRAY
92100: PUSH
92101: LD_VAR 0 3
92105: EQUAL
92106: AND
92107: IFFALSE 92210
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
92109: LD_EXP 144
92113: PUSH
92114: LD_VAR 0 6
92118: ARRAY
92119: PUSH
92120: LD_VAR 0 5
92124: ARRAY
92125: PUSH
92126: LD_INT 1
92128: ARRAY
92129: PPUSH
92130: LD_EXP 144
92134: PUSH
92135: LD_VAR 0 6
92139: ARRAY
92140: PUSH
92141: LD_VAR 0 5
92145: ARRAY
92146: PUSH
92147: LD_INT 2
92149: ARRAY
92150: PPUSH
92151: LD_VAR 0 1
92155: PPUSH
92156: CALL_OW 255
92160: PPUSH
92161: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
92165: LD_ADDR_EXP 144
92169: PUSH
92170: LD_EXP 144
92174: PPUSH
92175: LD_VAR 0 6
92179: PPUSH
92180: LD_EXP 144
92184: PUSH
92185: LD_VAR 0 6
92189: ARRAY
92190: PPUSH
92191: LD_VAR 0 5
92195: PPUSH
92196: CALL_OW 3
92200: PPUSH
92201: CALL_OW 1
92205: ST_TO_ADDR
// exit ;
92206: POP
92207: POP
92208: GO 92401
// end ; end ;
92210: GO 92050
92212: POP
92213: POP
// for i := minerMinesList [ index ] downto 1 do
92214: LD_ADDR_VAR 0 5
92218: PUSH
92219: DOUBLE
92220: LD_EXP 144
92224: PUSH
92225: LD_VAR 0 6
92229: ARRAY
92230: INC
92231: ST_TO_ADDR
92232: LD_INT 1
92234: PUSH
92235: FOR_DOWNTO
92236: IFFALSE 92399
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
92238: LD_EXP 144
92242: PUSH
92243: LD_VAR 0 6
92247: ARRAY
92248: PUSH
92249: LD_VAR 0 5
92253: ARRAY
92254: PUSH
92255: LD_INT 1
92257: ARRAY
92258: PPUSH
92259: LD_EXP 144
92263: PUSH
92264: LD_VAR 0 6
92268: ARRAY
92269: PUSH
92270: LD_VAR 0 5
92274: ARRAY
92275: PUSH
92276: LD_INT 2
92278: ARRAY
92279: PPUSH
92280: LD_VAR 0 2
92284: PPUSH
92285: LD_VAR 0 3
92289: PPUSH
92290: CALL_OW 298
92294: PUSH
92295: LD_INT 6
92297: LESS
92298: IFFALSE 92397
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
92300: LD_EXP 144
92304: PUSH
92305: LD_VAR 0 6
92309: ARRAY
92310: PUSH
92311: LD_VAR 0 5
92315: ARRAY
92316: PUSH
92317: LD_INT 1
92319: ARRAY
92320: PPUSH
92321: LD_EXP 144
92325: PUSH
92326: LD_VAR 0 6
92330: ARRAY
92331: PUSH
92332: LD_VAR 0 5
92336: ARRAY
92337: PUSH
92338: LD_INT 2
92340: ARRAY
92341: PPUSH
92342: LD_VAR 0 1
92346: PPUSH
92347: CALL_OW 255
92351: PPUSH
92352: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
92356: LD_ADDR_EXP 144
92360: PUSH
92361: LD_EXP 144
92365: PPUSH
92366: LD_VAR 0 6
92370: PPUSH
92371: LD_EXP 144
92375: PUSH
92376: LD_VAR 0 6
92380: ARRAY
92381: PPUSH
92382: LD_VAR 0 5
92386: PPUSH
92387: CALL_OW 3
92391: PPUSH
92392: CALL_OW 1
92396: ST_TO_ADDR
// end ; end ;
92397: GO 92235
92399: POP
92400: POP
// end ;
92401: LD_VAR 0 4
92405: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
92406: LD_INT 0
92408: PPUSH
92409: PPUSH
92410: PPUSH
92411: PPUSH
92412: PPUSH
92413: PPUSH
92414: PPUSH
92415: PPUSH
92416: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
92417: LD_VAR 0 1
92421: PPUSH
92422: CALL_OW 264
92426: PUSH
92427: LD_INT 81
92429: EQUAL
92430: NOT
92431: PUSH
92432: LD_VAR 0 1
92436: PUSH
92437: LD_EXP 143
92441: IN
92442: NOT
92443: OR
92444: IFFALSE 92448
// exit ;
92446: GO 92770
// index := GetElementIndex ( minersList , unit ) ;
92448: LD_ADDR_VAR 0 6
92452: PUSH
92453: LD_EXP 143
92457: PPUSH
92458: LD_VAR 0 1
92462: PPUSH
92463: CALL 34218 0 2
92467: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
92468: LD_ADDR_VAR 0 8
92472: PUSH
92473: LD_EXP 145
92477: PUSH
92478: LD_EXP 144
92482: PUSH
92483: LD_VAR 0 6
92487: ARRAY
92488: MINUS
92489: ST_TO_ADDR
// if not minesFreeAmount then
92490: LD_VAR 0 8
92494: NOT
92495: IFFALSE 92499
// exit ;
92497: GO 92770
// tmp := [ ] ;
92499: LD_ADDR_VAR 0 7
92503: PUSH
92504: EMPTY
92505: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
92506: LD_ADDR_VAR 0 5
92510: PUSH
92511: DOUBLE
92512: LD_INT 1
92514: DEC
92515: ST_TO_ADDR
92516: LD_VAR 0 8
92520: PUSH
92521: FOR_TO
92522: IFFALSE 92717
// begin _d := rand ( 0 , 5 ) ;
92524: LD_ADDR_VAR 0 11
92528: PUSH
92529: LD_INT 0
92531: PPUSH
92532: LD_INT 5
92534: PPUSH
92535: CALL_OW 12
92539: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
92540: LD_ADDR_VAR 0 12
92544: PUSH
92545: LD_INT 2
92547: PPUSH
92548: LD_INT 6
92550: PPUSH
92551: CALL_OW 12
92555: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
92556: LD_ADDR_VAR 0 9
92560: PUSH
92561: LD_VAR 0 2
92565: PPUSH
92566: LD_VAR 0 11
92570: PPUSH
92571: LD_VAR 0 12
92575: PPUSH
92576: CALL_OW 272
92580: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
92581: LD_ADDR_VAR 0 10
92585: PUSH
92586: LD_VAR 0 3
92590: PPUSH
92591: LD_VAR 0 11
92595: PPUSH
92596: LD_VAR 0 12
92600: PPUSH
92601: CALL_OW 273
92605: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
92606: LD_VAR 0 9
92610: PPUSH
92611: LD_VAR 0 10
92615: PPUSH
92616: CALL_OW 488
92620: PUSH
92621: LD_VAR 0 9
92625: PUSH
92626: LD_VAR 0 10
92630: PUSH
92631: EMPTY
92632: LIST
92633: LIST
92634: PUSH
92635: LD_VAR 0 7
92639: IN
92640: NOT
92641: AND
92642: PUSH
92643: LD_VAR 0 9
92647: PPUSH
92648: LD_VAR 0 10
92652: PPUSH
92653: CALL_OW 458
92657: NOT
92658: AND
92659: IFFALSE 92701
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
92661: LD_ADDR_VAR 0 7
92665: PUSH
92666: LD_VAR 0 7
92670: PPUSH
92671: LD_VAR 0 7
92675: PUSH
92676: LD_INT 1
92678: PLUS
92679: PPUSH
92680: LD_VAR 0 9
92684: PUSH
92685: LD_VAR 0 10
92689: PUSH
92690: EMPTY
92691: LIST
92692: LIST
92693: PPUSH
92694: CALL_OW 1
92698: ST_TO_ADDR
92699: GO 92715
// i := i - 1 ;
92701: LD_ADDR_VAR 0 5
92705: PUSH
92706: LD_VAR 0 5
92710: PUSH
92711: LD_INT 1
92713: MINUS
92714: ST_TO_ADDR
// end ;
92715: GO 92521
92717: POP
92718: POP
// for i in tmp do
92719: LD_ADDR_VAR 0 5
92723: PUSH
92724: LD_VAR 0 7
92728: PUSH
92729: FOR_IN
92730: IFFALSE 92768
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
92732: LD_VAR 0 1
92736: PPUSH
92737: LD_VAR 0 5
92741: PUSH
92742: LD_INT 1
92744: ARRAY
92745: PPUSH
92746: LD_VAR 0 5
92750: PUSH
92751: LD_INT 2
92753: ARRAY
92754: PPUSH
92755: CALL 91714 0 3
92759: NOT
92760: IFFALSE 92766
// exit ;
92762: POP
92763: POP
92764: GO 92770
92766: GO 92729
92768: POP
92769: POP
// end ;
92770: LD_VAR 0 4
92774: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
92775: LD_INT 0
92777: PPUSH
92778: PPUSH
92779: PPUSH
92780: PPUSH
92781: PPUSH
92782: PPUSH
92783: PPUSH
// if not GetClass ( unit ) = class_sniper then
92784: LD_VAR 0 1
92788: PPUSH
92789: CALL_OW 257
92793: PUSH
92794: LD_INT 5
92796: EQUAL
92797: NOT
92798: IFFALSE 92802
// exit ;
92800: GO 93190
// dist := 8 ;
92802: LD_ADDR_VAR 0 5
92806: PUSH
92807: LD_INT 8
92809: ST_TO_ADDR
// viewRange := 12 ;
92810: LD_ADDR_VAR 0 7
92814: PUSH
92815: LD_INT 12
92817: ST_TO_ADDR
// side := GetSide ( unit ) ;
92818: LD_ADDR_VAR 0 6
92822: PUSH
92823: LD_VAR 0 1
92827: PPUSH
92828: CALL_OW 255
92832: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
92833: LD_INT 61
92835: PPUSH
92836: LD_VAR 0 6
92840: PPUSH
92841: CALL_OW 321
92845: PUSH
92846: LD_INT 2
92848: EQUAL
92849: IFFALSE 92859
// viewRange := 16 ;
92851: LD_ADDR_VAR 0 7
92855: PUSH
92856: LD_INT 16
92858: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
92859: LD_VAR 0 1
92863: PPUSH
92864: LD_VAR 0 2
92868: PPUSH
92869: LD_VAR 0 3
92873: PPUSH
92874: CALL_OW 297
92878: PUSH
92879: LD_VAR 0 5
92883: GREATER
92884: IFFALSE 92963
// begin ComMoveXY ( unit , x , y ) ;
92886: LD_VAR 0 1
92890: PPUSH
92891: LD_VAR 0 2
92895: PPUSH
92896: LD_VAR 0 3
92900: PPUSH
92901: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
92905: LD_INT 35
92907: PPUSH
92908: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
92912: LD_VAR 0 1
92916: PPUSH
92917: LD_VAR 0 2
92921: PPUSH
92922: LD_VAR 0 3
92926: PPUSH
92927: CALL 65959 0 3
92931: NOT
92932: IFFALSE 92936
// exit ;
92934: GO 93190
// until GetDistUnitXY ( unit , x , y ) < dist ;
92936: LD_VAR 0 1
92940: PPUSH
92941: LD_VAR 0 2
92945: PPUSH
92946: LD_VAR 0 3
92950: PPUSH
92951: CALL_OW 297
92955: PUSH
92956: LD_VAR 0 5
92960: LESS
92961: IFFALSE 92905
// end ; ComTurnXY ( unit , x , y ) ;
92963: LD_VAR 0 1
92967: PPUSH
92968: LD_VAR 0 2
92972: PPUSH
92973: LD_VAR 0 3
92977: PPUSH
92978: CALL_OW 118
// wait ( 5 ) ;
92982: LD_INT 5
92984: PPUSH
92985: CALL_OW 67
// _d := GetDir ( unit ) ;
92989: LD_ADDR_VAR 0 10
92993: PUSH
92994: LD_VAR 0 1
92998: PPUSH
92999: CALL_OW 254
93003: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
93004: LD_ADDR_VAR 0 8
93008: PUSH
93009: LD_VAR 0 1
93013: PPUSH
93014: CALL_OW 250
93018: PPUSH
93019: LD_VAR 0 10
93023: PPUSH
93024: LD_VAR 0 5
93028: PPUSH
93029: CALL_OW 272
93033: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
93034: LD_ADDR_VAR 0 9
93038: PUSH
93039: LD_VAR 0 1
93043: PPUSH
93044: CALL_OW 251
93048: PPUSH
93049: LD_VAR 0 10
93053: PPUSH
93054: LD_VAR 0 5
93058: PPUSH
93059: CALL_OW 273
93063: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
93064: LD_VAR 0 8
93068: PPUSH
93069: LD_VAR 0 9
93073: PPUSH
93074: CALL_OW 488
93078: NOT
93079: IFFALSE 93083
// exit ;
93081: GO 93190
// ComAnimCustom ( unit , 1 ) ;
93083: LD_VAR 0 1
93087: PPUSH
93088: LD_INT 1
93090: PPUSH
93091: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
93095: LD_VAR 0 8
93099: PPUSH
93100: LD_VAR 0 9
93104: PPUSH
93105: LD_VAR 0 6
93109: PPUSH
93110: LD_VAR 0 7
93114: PPUSH
93115: CALL_OW 330
// repeat wait ( 1 ) ;
93119: LD_INT 1
93121: PPUSH
93122: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
93126: LD_VAR 0 1
93130: PPUSH
93131: CALL_OW 316
93135: PUSH
93136: LD_VAR 0 1
93140: PPUSH
93141: CALL_OW 314
93145: OR
93146: PUSH
93147: LD_VAR 0 1
93151: PPUSH
93152: CALL_OW 302
93156: NOT
93157: OR
93158: PUSH
93159: LD_VAR 0 1
93163: PPUSH
93164: CALL_OW 301
93168: OR
93169: IFFALSE 93119
// RemoveSeeing ( _x , _y , side ) ;
93171: LD_VAR 0 8
93175: PPUSH
93176: LD_VAR 0 9
93180: PPUSH
93181: LD_VAR 0 6
93185: PPUSH
93186: CALL_OW 331
// end ; end_of_file
93190: LD_VAR 0 4
93194: RET
// export function StopOriginalMusic ; begin
93195: LD_INT 0
93197: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
93198: LD_STRING OW_FORCEMUSICDISABLE(true);
93200: PPUSH
93201: CALL_OW 559
// end ;
93205: LD_VAR 0 1
93209: RET
// export function PlayOriginalMusic ; begin
93210: LD_INT 0
93212: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
93213: LD_STRING OW_FORCEMUSICDISABLE(false);
93215: PPUSH
93216: CALL_OW 559
// end ;
93220: LD_VAR 0 1
93224: RET
// export function PlayCustomMusic ( track , callback ) ; begin
93225: LD_INT 0
93227: PPUSH
// StopOriginalMusic ;
93228: CALL 93195 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
93232: LD_STRING playMusic("
93234: PUSH
93235: LD_VAR 0 1
93239: STR
93240: PUSH
93241: LD_STRING ", "
93243: STR
93244: PUSH
93245: LD_VAR 0 2
93249: STR
93250: PUSH
93251: LD_STRING ")
93253: STR
93254: PPUSH
93255: CALL_OW 559
// end ;
93259: LD_VAR 0 3
93263: RET
