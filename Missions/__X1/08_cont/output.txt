// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 34 0 0
// PrepareRussian ;
   8: CALL 1590 0 0
// PrepareArabian ;
  12: CALL 300 0 0
// Action ;
  16: CALL 2256 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// end ;
  33: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList ; function Init ; begin
  34: LD_INT 0
  36: PPUSH
// debug := true ;
  37: LD_ADDR_EXP 1
  41: PUSH
  42: LD_INT 1
  44: ST_TO_ADDR
// hasNormalScene := false ;
  45: LD_ADDR_EXP 5
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 07_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 07_
  60: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 01_JohnnySaved
  68: PPUSH
  69: LD_INT 0
  71: PPUSH
  72: CALL_OW 30
  76: ST_TO_ADDR
// hasVodka := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  85: LD_ADDR_EXP 7
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// hasStimDrugs := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// hasExplosions := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// americanContact := false ;
 109: LD_ADDR_EXP 10
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// hasWeapons := false ;
 117: LD_ADDR_EXP 19
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// hasSniperRifle := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// hasScout := false ;
 133: LD_ADDR_EXP 12
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// hasMethanol := false ;
 141: LD_ADDR_EXP 13
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// heikeSquad := [ ] ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: EMPTY
 155: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 156: LD_ADDR_EXP 15
 160: PUSH
 161: LD_INT 10
 163: PPUSH
 164: LD_INT 21
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PPUSH
 174: CALL_OW 70
 178: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 179: LD_ADDR_EXP 16
 183: PUSH
 184: EMPTY
 185: ST_TO_ADDR
// isAlarm := false ;
 186: LD_ADDR_EXP 17
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 194: LD_ADDR_EXP 18
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// hasRevolver := false ;
 202: LD_ADDR_EXP 8
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// heikeHasRevolver := false ;
 210: LD_ADDR_EXP 20
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 218: LD_ADDR_EXP 21
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// adminAreaDiscovered := false ;
 226: LD_ADDR_EXP 22
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hasExplosionCollected := false ;
 234: LD_ADDR_EXP 23
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 242: LD_ADDR_EXP 24
 246: PUSH
 247: LD_INT 0
 249: ST_TO_ADDR
// contactWithAmerican := false ;
 250: LD_ADDR_EXP 25
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// laundryAllowed := false ;
 258: LD_ADDR_EXP 26
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// heikeAsRussian := false ;
 266: LD_ADDR_EXP 27
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// giviAsRussian := false ;
 274: LD_ADDR_EXP 28
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 282: LD_ADDR_EXP 29
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// enable ( entranceEvent ) ;
 289: LD_INT 1
 291: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 292: LD_INT 2
 294: DISABLE_MARKED
// end ; end_of_file
 295: LD_VAR 0 1
 299: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 300: LD_INT 0
 302: PPUSH
 303: PPUSH
// uc_side := 4 ;
 304: LD_ADDR_OWVAR 20
 308: PUSH
 309: LD_INT 4
 311: ST_TO_ADDR
// uc_nation := 1 ;
 312: LD_ADDR_OWVAR 21
 316: PUSH
 317: LD_INT 1
 319: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 320: LD_ADDR_EXP 42
 324: PUSH
 325: LD_STRING 07_Americans
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if americanSquad < 5 then
 333: LD_EXP 42
 337: PUSH
 338: LD_INT 5
 340: LESS
 341: IFFALSE 433
// begin if not americanSquad then
 343: LD_EXP 42
 347: NOT
 348: IFFALSE 357
// americanSquad := [ ] ;
 350: LD_ADDR_EXP 42
 354: PUSH
 355: EMPTY
 356: ST_TO_ADDR
// for i := americanSquad to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
 357: LD_ADDR_VAR 0 2
 361: PUSH
 362: DOUBLE
 363: LD_EXP 42
 367: DEC
 368: ST_TO_ADDR
 369: LD_INT 3
 371: PUSH
 372: LD_INT 4
 374: PUSH
 375: LD_INT 5
 377: PUSH
 378: LD_INT 5
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: PUSH
 387: LD_OWVAR 67
 391: ARRAY
 392: PUSH
 393: FOR_TO
 394: IFFALSE 431
// begin PrepareHuman ( false , 2 , 6 ) ;
 396: LD_INT 0
 398: PPUSH
 399: LD_INT 2
 401: PPUSH
 402: LD_INT 6
 404: PPUSH
 405: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 409: LD_ADDR_EXP 42
 413: PUSH
 414: LD_EXP 42
 418: PPUSH
 419: CALL_OW 44
 423: PPUSH
 424: CALL 51783 0 2
 428: ST_TO_ADDR
// end ;
 429: GO 393
 431: POP
 432: POP
// end ; Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 433: LD_ADDR_EXP 44
 437: PUSH
 438: LD_STRING UsCommander
 440: PPUSH
 441: LD_EXP 1
 445: NOT
 446: PPUSH
 447: LD_STRING 07_
 449: PPUSH
 450: CALL 14407 0 3
 454: ST_TO_ADDR
// if not Doug then
 455: LD_EXP 44
 459: NOT
 460: IFFALSE 494
// begin PrepareSoldier ( sex_male , 6 ) ;
 462: LD_INT 1
 464: PPUSH
 465: LD_INT 6
 467: PPUSH
 468: CALL_OW 381
// Doug := CreateHuman ;
 472: LD_ADDR_EXP 44
 476: PUSH
 477: CALL_OW 44
 481: ST_TO_ADDR
// SetClass ( Doug , class_prison ) ;
 482: LD_EXP 44
 486: PPUSH
 487: LD_INT 33
 489: PPUSH
 490: CALL_OW 336
// end ; if johnnySaved or debug then
 494: LD_EXP 3
 498: PUSH
 499: LD_EXP 1
 503: OR
 504: IFFALSE 531
// begin Harris := NewCharacter ( Harris ) ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_STRING Harris
 513: PPUSH
 514: CALL_OW 25
 518: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 519: LD_EXP 43
 523: PPUSH
 524: LD_INT 33
 526: PPUSH
 527: CALL_OW 336
// end ; uc_side := 2 ;
 531: LD_ADDR_OWVAR 20
 535: PUSH
 536: LD_INT 2
 538: ST_TO_ADDR
// uc_nation := 2 ;
 539: LD_ADDR_OWVAR 21
 543: PUSH
 544: LD_INT 2
 546: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 547: LD_ADDR_EXP 30
 551: PUSH
 552: LD_STRING Heike
 554: PPUSH
 555: LD_EXP 1
 559: NOT
 560: PPUSH
 561: LD_EXP 2
 565: PPUSH
 566: CALL 14407 0 3
 570: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 571: LD_ADDR_EXP 33
 575: PUSH
 576: LD_STRING Ibrahim
 578: PPUSH
 579: LD_EXP 1
 583: NOT
 584: PPUSH
 585: LD_EXP 2
 589: PPUSH
 590: CALL 14407 0 3
 594: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 595: LD_ADDR_EXP 31
 599: PUSH
 600: LD_STRING Givi
 602: PPUSH
 603: LD_EXP 1
 607: NOT
 608: PPUSH
 609: LD_EXP 2
 613: PPUSH
 614: CALL 14407 0 3
 618: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 619: LD_ADDR_EXP 34
 623: PUSH
 624: LD_STRING Kamil
 626: PPUSH
 627: LD_EXP 1
 631: NOT
 632: PPUSH
 633: LD_EXP 2
 637: PPUSH
 638: CALL 14407 0 3
 642: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 643: LD_ADDR_EXP 35
 647: PUSH
 648: LD_STRING Kaia
 650: PPUSH
 651: LD_EXP 1
 655: NOT
 656: PPUSH
 657: LD_EXP 2
 661: PPUSH
 662: CALL 14407 0 3
 666: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 667: LD_ADDR_EXP 36
 671: PUSH
 672: LD_STRING Sophia
 674: PPUSH
 675: LD_EXP 1
 679: NOT
 680: PPUSH
 681: LD_EXP 2
 685: PPUSH
 686: CALL 14407 0 3
 690: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 691: LD_ADDR_EXP 37
 695: PUSH
 696: LD_STRING Markov
 698: PPUSH
 699: LD_EXP 1
 703: NOT
 704: PPUSH
 705: LD_EXP 2
 709: PPUSH
 710: CALL 14407 0 3
 714: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 715: LD_ADDR_EXP 40
 719: PUSH
 720: LD_STRING Aviradze
 722: PPUSH
 723: LD_EXP 1
 727: NOT
 728: PPUSH
 729: LD_EXP 2
 733: PPUSH
 734: CALL 14407 0 3
 738: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 739: LD_ADDR_EXP 39
 743: PUSH
 744: LD_STRING Kurt
 746: PPUSH
 747: LD_EXP 1
 751: NOT
 752: PPUSH
 753: LD_EXP 2
 757: PPUSH
 758: CALL 14407 0 3
 762: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 763: LD_ADDR_EXP 32
 767: PUSH
 768: LD_STRING Mike
 770: PPUSH
 771: LD_EXP 1
 775: NOT
 776: PPUSH
 777: LD_EXP 2
 781: PPUSH
 782: CALL 14407 0 3
 786: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 787: LD_ADDR_EXP 38
 791: PUSH
 792: LD_STRING Olaf
 794: PPUSH
 795: LD_INT 0
 797: PPUSH
 798: LD_STRING 
 800: PPUSH
 801: CALL 14407 0 3
 805: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 806: LD_ADDR_EXP 41
 810: PUSH
 811: LD_STRING 07_others
 813: PPUSH
 814: CALL_OW 31
 818: ST_TO_ADDR
// end ;
 819: LD_VAR 0 1
 823: RET
// export function PrepareGame ; var i ; begin
 824: LD_INT 0
 826: PPUSH
 827: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
 828: LD_EXP 30
 832: PPUSH
 833: LD_INT 23
 835: PPUSH
 836: CALL_OW 52
// if Givi then
 840: LD_EXP 31
 844: IFFALSE 882
// begin SetSide ( Givi , 5 ) ;
 846: LD_EXP 31
 850: PPUSH
 851: LD_INT 5
 853: PPUSH
 854: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
 858: LD_EXP 31
 862: PPUSH
 863: LD_INT 9
 865: PPUSH
 866: LD_INT 0
 868: PPUSH
 869: CALL_OW 49
// ComHold ( Givi ) ;
 873: LD_EXP 31
 877: PPUSH
 878: CALL_OW 140
// end ; if Markov then
 882: LD_EXP 37
 886: IFFALSE 912
// begin SetSide ( Markov , 5 ) ;
 888: LD_EXP 37
 892: PPUSH
 893: LD_INT 5
 895: PPUSH
 896: CALL_OW 235
// PlaceHumanInUnit ( Markov , ruFac ) ;
 900: LD_EXP 37
 904: PPUSH
 905: LD_INT 61
 907: PPUSH
 908: CALL_OW 52
// end ; if Olaf then
 912: LD_EXP 38
 916: IFFALSE 957
// begin SetSide ( Olaf , 5 ) ;
 918: LD_EXP 38
 922: PPUSH
 923: LD_INT 5
 925: PPUSH
 926: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
 930: LD_EXP 38
 934: PPUSH
 935: LD_INT 17
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
 945: LD_EXP 38
 949: PPUSH
 950: LD_INT 3
 952: PPUSH
 953: CALL 54935 0 2
// end ; if Kamil then
 957: LD_EXP 34
 961: IFFALSE 987
// begin SetSide ( Kamil , 5 ) ;
 963: LD_EXP 34
 967: PPUSH
 968: LD_INT 5
 970: PPUSH
 971: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
 975: LD_EXP 34
 979: PPUSH
 980: LD_INT 109
 982: PPUSH
 983: CALL_OW 52
// end ; if Kurt then
 987: LD_EXP 39
 991: IFFALSE 1017
// begin SetSide ( Kurt , 5 ) ;
 993: LD_EXP 39
 997: PPUSH
 998: LD_INT 5
1000: PPUSH
1001: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1005: LD_EXP 39
1009: PPUSH
1010: LD_INT 169
1012: PPUSH
1013: CALL_OW 52
// end ; if Kaia then
1017: LD_EXP 35
1021: IFFALSE 1047
// begin SetSide ( Kaia , 5 ) ;
1023: LD_EXP 35
1027: PPUSH
1028: LD_INT 5
1030: PPUSH
1031: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1035: LD_EXP 35
1039: PPUSH
1040: LD_INT 147
1042: PPUSH
1043: CALL_OW 52
// end ; if Harris then
1047: LD_EXP 43
1051: IFFALSE 1089
// begin SetSide ( Harris , 4 ) ;
1053: LD_EXP 43
1057: PPUSH
1058: LD_INT 4
1060: PPUSH
1061: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1065: LD_EXP 43
1069: PPUSH
1070: LD_INT 21
1072: PPUSH
1073: LD_INT 0
1075: PPUSH
1076: CALL_OW 49
// ComHold ( i ) ;
1080: LD_VAR 0 2
1084: PPUSH
1085: CALL_OW 140
// end ; if Doug then
1089: LD_EXP 44
1093: IFFALSE 1119
// begin SetSide ( Doug , 4 ) ;
1095: LD_EXP 44
1099: PPUSH
1100: LD_INT 4
1102: PPUSH
1103: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1107: LD_EXP 44
1111: PPUSH
1112: LD_INT 106
1114: PPUSH
1115: CALL_OW 52
// end ; if Aviradze then
1119: LD_EXP 40
1123: IFFALSE 1149
// begin SetSide ( Aviradze , 5 ) ;
1125: LD_EXP 40
1129: PPUSH
1130: LD_INT 5
1132: PPUSH
1133: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1137: LD_EXP 40
1141: PPUSH
1142: LD_INT 119
1144: PPUSH
1145: CALL_OW 52
// end ; if Ibrahim then
1149: LD_EXP 33
1153: IFFALSE 1179
// begin SetSide ( Ibrahim , 5 ) ;
1155: LD_EXP 33
1159: PPUSH
1160: LD_INT 5
1162: PPUSH
1163: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1167: LD_EXP 33
1171: PPUSH
1172: LD_INT 119
1174: PPUSH
1175: CALL_OW 52
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1179: LD_EXP 48
1183: PPUSH
1184: LD_INT 119
1186: PPUSH
1187: CALL_OW 52
// for i in americanSquad do
1191: LD_ADDR_VAR 0 2
1195: PUSH
1196: LD_EXP 42
1200: PUSH
1201: FOR_IN
1202: IFFALSE 1230
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1204: LD_VAR 0 2
1208: PPUSH
1209: LD_INT 22
1211: PPUSH
1212: LD_INT 0
1214: PPUSH
1215: CALL_OW 49
// ComHold ( i ) ;
1219: LD_VAR 0 2
1223: PPUSH
1224: CALL_OW 140
// end ;
1228: GO 1201
1230: POP
1231: POP
// for i in heikeSecondSquad do
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_EXP 41
1241: PUSH
1242: FOR_IN
1243: IFFALSE 1271
// begin PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1245: LD_VAR 0 2
1249: PPUSH
1250: LD_INT 23
1252: PPUSH
1253: LD_INT 0
1255: PPUSH
1256: CALL_OW 49
// ComHold ( i ) ;
1260: LD_VAR 0 2
1264: PPUSH
1265: CALL_OW 140
// end ;
1269: GO 1242
1271: POP
1272: POP
// if not hasVodka then
1273: LD_EXP 4
1277: NOT
1278: IFFALSE 1337
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1280: LD_ADDR_VAR 0 2
1284: PUSH
1285: LD_INT 2
1287: PUSH
1288: LD_INT 22
1290: PUSH
1291: LD_INT 2
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: PUSH
1298: LD_INT 22
1300: PUSH
1301: LD_INT 5
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: LIST
1312: PPUSH
1313: CALL_OW 69
1317: PUSH
1318: FOR_IN
1319: IFFALSE 1335
// SetLives ( i , 500 ) ;
1321: LD_VAR 0 2
1325: PPUSH
1326: LD_INT 500
1328: PPUSH
1329: CALL_OW 234
1333: GO 1318
1335: POP
1336: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: LD_INT 22
1344: PUSH
1345: LD_INT 4
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PPUSH
1352: CALL_OW 69
1356: PUSH
1357: FOR_IN
1358: IFFALSE 1374
// SetLives ( i , 500 ) ;
1360: LD_VAR 0 2
1364: PPUSH
1365: LD_INT 500
1367: PPUSH
1368: CALL_OW 234
1372: GO 1357
1374: POP
1375: POP
// end ;
1376: LD_VAR 0 1
1380: RET
// export function SetClassKaiaRevolver ; begin
1381: LD_INT 0
1383: PPUSH
// if IsOk ( Kaia ) then
1384: LD_EXP 35
1388: PPUSH
1389: CALL_OW 302
1393: IFFALSE 1407
// SetClass ( Kaia , class_revolver ) ;
1395: LD_EXP 35
1399: PPUSH
1400: LD_INT 34
1402: PPUSH
1403: CALL_OW 336
// end ;
1407: LD_VAR 0 1
1411: RET
// export function SpawnHeikeAsRussian ; begin
1412: LD_INT 0
1414: PPUSH
// RemoveUnit ( Heike ) ;
1415: LD_EXP 30
1419: PPUSH
1420: CALL_OW 64
// heikeTmp := Heike ;
1424: LD_ADDR_EXP 45
1428: PUSH
1429: LD_EXP 30
1433: ST_TO_ADDR
// uc_side := 2 ;
1434: LD_ADDR_OWVAR 20
1438: PUSH
1439: LD_INT 2
1441: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1442: LD_ADDR_EXP 30
1446: PUSH
1447: LD_STRING HeikeRu
1449: PPUSH
1450: CALL_OW 25
1454: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1455: LD_EXP 45
1459: PPUSH
1460: LD_EXP 30
1464: PPUSH
1465: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1469: LD_EXP 30
1473: PPUSH
1474: LD_INT 165
1476: PPUSH
1477: CALL_OW 52
// heikeAsRussian := true ;
1481: LD_ADDR_EXP 27
1485: PUSH
1486: LD_INT 1
1488: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1489: LD_STRING M1-laundry-out
1491: PPUSH
1492: CALL_OW 604
// end ;
1496: LD_VAR 0 1
1500: RET
// export function SpawnGiviAsRussian ; begin
1501: LD_INT 0
1503: PPUSH
// RemoveUnit ( Givi ) ;
1504: LD_EXP 31
1508: PPUSH
1509: CALL_OW 64
// giviTmp := Givi ;
1513: LD_ADDR_EXP 46
1517: PUSH
1518: LD_EXP 31
1522: ST_TO_ADDR
// uc_side := 2 ;
1523: LD_ADDR_OWVAR 20
1527: PUSH
1528: LD_INT 2
1530: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1531: LD_ADDR_EXP 31
1535: PUSH
1536: LD_STRING GiviRu
1538: PPUSH
1539: CALL_OW 25
1543: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1544: LD_EXP 46
1548: PPUSH
1549: LD_EXP 31
1553: PPUSH
1554: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1558: LD_EXP 31
1562: PPUSH
1563: LD_INT 165
1565: PPUSH
1566: CALL_OW 52
// giviAsRussian := true ;
1570: LD_ADDR_EXP 28
1574: PUSH
1575: LD_INT 1
1577: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1578: LD_STRING M1-laundry-out
1580: PPUSH
1581: CALL_OW 604
// end ; end_of_file
1585: LD_VAR 0 1
1589: RET
// export russianKillers , ruCommisar ; export function PrepareRussian ; var i , tmp ; begin
1590: LD_INT 0
1592: PPUSH
1593: PPUSH
1594: PPUSH
// uc_side := 3 ;
1595: LD_ADDR_OWVAR 20
1599: PUSH
1600: LD_INT 3
1602: ST_TO_ADDR
// uc_nation := 3 ;
1603: LD_ADDR_OWVAR 21
1607: PUSH
1608: LD_INT 3
1610: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
1611: LD_ADDR_VAR 0 2
1615: PUSH
1616: LD_INT 21
1618: PUSH
1619: LD_INT 3
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PPUSH
1626: CALL_OW 69
1630: PUSH
1631: FOR_IN
1632: IFFALSE 1648
// SetBLevel ( i , 7 ) ;
1634: LD_VAR 0 2
1638: PPUSH
1639: LD_INT 7
1641: PPUSH
1642: CALL_OW 241
1646: GO 1631
1648: POP
1649: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1650: LD_ADDR_VAR 0 2
1654: PUSH
1655: LD_INT 22
1657: PUSH
1658: LD_INT 3
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: LD_INT 2
1667: PUSH
1668: LD_INT 30
1670: PUSH
1671: LD_INT 0
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 30
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PPUSH
1697: CALL_OW 69
1701: PUSH
1702: FOR_IN
1703: IFFALSE 1747
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
1705: LD_VAR 0 2
1709: PPUSH
1710: CALL_OW 274
1714: PPUSH
1715: LD_INT 1
1717: PPUSH
1718: LD_INT 1000
1720: PPUSH
1721: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
1725: LD_VAR 0 2
1729: PPUSH
1730: CALL_OW 274
1734: PPUSH
1735: LD_INT 2
1737: PPUSH
1738: LD_INT 1000
1740: PPUSH
1741: CALL_OW 277
// end ;
1745: GO 1702
1747: POP
1748: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
1749: LD_ADDR_VAR 0 2
1753: PUSH
1754: LD_INT 22
1756: PUSH
1757: LD_INT 3
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PUSH
1764: LD_INT 30
1766: PUSH
1767: LD_INT 32
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PPUSH
1778: CALL_OW 69
1782: PUSH
1783: FOR_IN
1784: IFFALSE 1818
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
1786: LD_INT 0
1788: PPUSH
1789: LD_INT 5
1791: PUSH
1792: LD_OWVAR 67
1796: PLUS
1797: PPUSH
1798: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
1802: CALL_OW 44
1806: PPUSH
1807: LD_VAR 0 2
1811: PPUSH
1812: CALL_OW 52
// end ;
1816: GO 1783
1818: POP
1819: POP
// end ;
1820: LD_VAR 0 1
1824: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
1825: LD_INT 0
1827: PPUSH
1828: PPUSH
1829: PPUSH
1830: PPUSH
// uc_side := 3 ;
1831: LD_ADDR_OWVAR 20
1835: PUSH
1836: LD_INT 3
1838: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
1839: LD_ADDR_OWVAR 21
1843: PUSH
1844: LD_INT 1
1846: PPUSH
1847: LD_INT 3
1849: PPUSH
1850: CALL_OW 12
1854: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
1855: LD_ADDR_VAR 0 4
1859: PUSH
1860: LD_INT 5
1862: PPUSH
1863: LD_INT 0
1865: PPUSH
1866: CALL_OW 517
1870: ST_TO_ADDR
// for i := 1 to 3 do
1871: LD_ADDR_VAR 0 2
1875: PUSH
1876: DOUBLE
1877: LD_INT 1
1879: DEC
1880: ST_TO_ADDR
1881: LD_INT 3
1883: PUSH
1884: FOR_TO
1885: IFFALSE 1954
// begin PrepareHuman ( false , 33 , 0 ) ;
1887: LD_INT 0
1889: PPUSH
1890: LD_INT 33
1892: PPUSH
1893: LD_INT 0
1895: PPUSH
1896: CALL_OW 380
// un := CreateHuman ;
1900: LD_ADDR_VAR 0 3
1904: PUSH
1905: CALL_OW 44
1909: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
1910: LD_VAR 0 3
1914: PPUSH
1915: LD_VAR 0 4
1919: PUSH
1920: LD_INT 1
1922: ARRAY
1923: PUSH
1924: LD_VAR 0 2
1928: ARRAY
1929: PPUSH
1930: LD_VAR 0 4
1934: PUSH
1935: LD_INT 2
1937: ARRAY
1938: PUSH
1939: LD_VAR 0 2
1943: ARRAY
1944: PPUSH
1945: LD_INT 1
1947: PPUSH
1948: CALL_OW 601
// end ;
1952: GO 1884
1954: POP
1955: POP
// end ;
1956: LD_VAR 0 1
1960: RET
// export function PrepareFirstScene ; var i , un ; begin
1961: LD_INT 0
1963: PPUSH
1964: PPUSH
1965: PPUSH
// uc_side := 4 ;
1966: LD_ADDR_OWVAR 20
1970: PUSH
1971: LD_INT 4
1973: ST_TO_ADDR
// uc_nation := 1 ;
1974: LD_ADDR_OWVAR 21
1978: PUSH
1979: LD_INT 1
1981: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
1982: LD_INT 0
1984: PPUSH
1985: LD_INT 33
1987: PPUSH
1988: LD_INT 0
1990: PPUSH
1991: CALL_OW 380
// for i := 1 to 2 do
1995: LD_ADDR_VAR 0 2
1999: PUSH
2000: DOUBLE
2001: LD_INT 1
2003: DEC
2004: ST_TO_ADDR
2005: LD_INT 2
2007: PUSH
2008: FOR_TO
2009: IFFALSE 2074
// begin un := CreateHuman ;
2011: LD_ADDR_VAR 0 3
2015: PUSH
2016: CALL_OW 44
2020: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2021: LD_VAR 0 3
2025: PPUSH
2026: LD_INT 1
2028: PPUSH
2029: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
2033: LD_VAR 0 3
2037: PPUSH
2038: LD_INT 6
2040: PPUSH
2041: LD_INT 0
2043: PPUSH
2044: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
2048: LD_VAR 0 3
2052: PPUSH
2053: LD_INT 1
2055: PPUSH
2056: CALL 54935 0 2
// SetLives ( un , 300 ) ;
2060: LD_VAR 0 3
2064: PPUSH
2065: LD_INT 300
2067: PPUSH
2068: CALL_OW 234
// end ;
2072: GO 2008
2074: POP
2075: POP
// uc_side := 3 ;
2076: LD_ADDR_OWVAR 20
2080: PUSH
2081: LD_INT 3
2083: ST_TO_ADDR
// uc_nation := 3 ;
2084: LD_ADDR_OWVAR 21
2088: PUSH
2089: LD_INT 3
2091: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
2092: LD_INT 1
2094: PPUSH
2095: LD_INT 5
2097: PPUSH
2098: CALL_OW 381
// for i := 1 to 3 do
2102: LD_ADDR_VAR 0 2
2106: PUSH
2107: DOUBLE
2108: LD_INT 1
2110: DEC
2111: ST_TO_ADDR
2112: LD_INT 3
2114: PUSH
2115: FOR_TO
2116: IFFALSE 2189
// begin un := CreateHuman ;
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: CALL_OW 44
2127: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
2128: LD_ADDR_EXP 47
2132: PUSH
2133: LD_EXP 47
2137: PPUSH
2138: LD_VAR 0 3
2142: PPUSH
2143: CALL 51783 0 2
2147: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2148: LD_VAR 0 3
2152: PPUSH
2153: LD_INT 4
2155: PPUSH
2156: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
2160: LD_VAR 0 3
2164: PPUSH
2165: LD_INT 7
2167: PPUSH
2168: LD_INT 0
2170: PPUSH
2171: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
2175: LD_VAR 0 3
2179: PPUSH
2180: LD_INT 4
2182: PPUSH
2183: CALL 54935 0 2
// end ;
2187: GO 2115
2189: POP
2190: POP
// ruCommisar := CreateHuman ;
2191: LD_ADDR_EXP 48
2195: PUSH
2196: CALL_OW 44
2200: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
2201: LD_EXP 48
2205: PPUSH
2206: LD_INT 124
2208: PPUSH
2209: LD_INT 37
2211: PPUSH
2212: LD_INT 0
2214: PPUSH
2215: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
2219: LD_EXP 48
2223: PPUSH
2224: LD_INT 3
2226: PPUSH
2227: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
2231: LD_EXP 48
2235: PPUSH
2236: LD_INT 3
2238: PPUSH
2239: CALL 54935 0 2
// end ;
2243: LD_VAR 0 1
2247: RET
// export function SpawnAdditionalRuGuards ; begin
2248: LD_INT 0
2250: PPUSH
// end ; end_of_file
2251: LD_VAR 0 1
2255: RET
// export function Action ; var speaker , i , tmp ; begin
2256: LD_INT 0
2258: PPUSH
2259: PPUSH
2260: PPUSH
2261: PPUSH
// Video ( true ) ;
2262: LD_INT 1
2264: PPUSH
2265: CALL 51755 0 1
// hasNormalScene := Kaia or Givi ;
2269: LD_ADDR_EXP 5
2273: PUSH
2274: LD_EXP 35
2278: PUSH
2279: LD_EXP 31
2283: OR
2284: ST_TO_ADDR
// if hasNormalScene then
2285: LD_EXP 5
2289: IFFALSE 2524
// begin for i in americanSquad do
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_EXP 42
2300: PUSH
2301: FOR_IN
2302: IFFALSE 2348
// begin SetClass ( i , 33 ) ;
2304: LD_VAR 0 3
2308: PPUSH
2309: LD_INT 33
2311: PPUSH
2312: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
2316: LD_VAR 0 3
2320: PPUSH
2321: LD_INT 78
2323: PPUSH
2324: LD_INT 16
2326: PPUSH
2327: LD_INT 5
2329: PPUSH
2330: LD_INT 0
2332: PPUSH
2333: CALL_OW 50
// ComHold ( i ) ;
2337: LD_VAR 0 3
2341: PPUSH
2342: CALL_OW 140
// end ;
2346: GO 2301
2348: POP
2349: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi ] union heikeSecondSquad ;
2350: LD_ADDR_VAR 0 4
2354: PUSH
2355: LD_EXP 32
2359: PUSH
2360: LD_EXP 33
2364: PUSH
2365: LD_EXP 34
2369: PUSH
2370: LD_EXP 35
2374: PUSH
2375: LD_EXP 36
2379: PUSH
2380: LD_EXP 37
2384: PUSH
2385: LD_EXP 38
2389: PUSH
2390: LD_EXP 39
2394: PUSH
2395: LD_EXP 31
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: PUSH
2411: LD_EXP 41
2415: UNION
2416: ST_TO_ADDR
// SetClass ( Heike , 33 ) ;
2417: LD_EXP 30
2421: PPUSH
2422: LD_INT 33
2424: PPUSH
2425: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
2429: LD_EXP 30
2433: PPUSH
2434: LD_INT 117
2436: PPUSH
2437: LD_INT 24
2439: PPUSH
2440: LD_INT 3
2442: PPUSH
2443: LD_INT 0
2445: PPUSH
2446: CALL 53923 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
2450: LD_EXP 30
2454: PPUSH
2455: LD_INT 123
2457: PPUSH
2458: LD_INT 39
2460: PPUSH
2461: CALL_OW 118
// for i in tmp do
2465: LD_ADDR_VAR 0 3
2469: PUSH
2470: LD_VAR 0 4
2474: PUSH
2475: FOR_IN
2476: IFFALSE 2522
// begin SetClass ( i , 33 ) ;
2478: LD_VAR 0 3
2482: PPUSH
2483: LD_INT 33
2485: PPUSH
2486: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
2490: LD_VAR 0 3
2494: PPUSH
2495: LD_INT 3
2497: PPUSH
2498: LD_INT 0
2500: PPUSH
2501: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
2505: LD_VAR 0 3
2509: PPUSH
2510: LD_INT 113
2512: PPUSH
2513: LD_INT 16
2515: PPUSH
2516: CALL_OW 118
// end ;
2520: GO 2475
2522: POP
2523: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
2524: LD_INT 124
2526: PPUSH
2527: LD_INT 39
2529: PPUSH
2530: CALL_OW 86
// PrepareDeadBodies ;
2534: CALL 1825 0 0
// PrepareFirstScene ;
2538: CALL 1961 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
2542: LD_INT 152
2544: PPUSH
2545: LD_INT 65
2547: PPUSH
2548: LD_INT 2
2550: PPUSH
2551: LD_INT 70
2553: NEG
2554: PPUSH
2555: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
2559: LD_INT 152
2561: PPUSH
2562: LD_INT 65
2564: PPUSH
2565: LD_INT 2
2567: PPUSH
2568: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
2572: LD_INT 122
2574: PPUSH
2575: LD_INT 40
2577: PPUSH
2578: LD_INT 2
2580: PPUSH
2581: LD_INT 8
2583: NEG
2584: PPUSH
2585: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
2589: LD_INT 124
2591: PPUSH
2592: LD_INT 37
2594: PPUSH
2595: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
2599: LD_EXP 48
2603: PPUSH
2604: LD_STRING DRum-Execution-1
2606: PPUSH
2607: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
2611: LD_EXP 48
2615: PPUSH
2616: LD_STRING DRum-Execution-2
2618: PPUSH
2619: CALL_OW 88
// wait ( 0 0$01 ) ;
2623: LD_INT 35
2625: PPUSH
2626: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
2630: LD_EXP 48
2634: PPUSH
2635: LD_STRING DRum-Execution-3
2637: PPUSH
2638: CALL_OW 88
// wait ( 0 0$1 ) ;
2642: LD_INT 35
2644: PPUSH
2645: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
2649: LD_EXP 48
2653: PPUSH
2654: LD_STRING DRum-Execution-4
2656: PPUSH
2657: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
2661: LD_EXP 47
2665: PUSH
2666: LD_INT 1
2668: ARRAY
2669: PPUSH
2670: LD_INT 122
2672: PPUSH
2673: LD_INT 39
2675: PPUSH
2676: CALL_OW 428
2680: PPUSH
2681: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
2685: LD_EXP 47
2689: PUSH
2690: LD_INT 2
2692: ARRAY
2693: PPUSH
2694: LD_INT 123
2696: PPUSH
2697: LD_INT 41
2699: PPUSH
2700: CALL_OW 428
2704: PPUSH
2705: CALL_OW 115
// AddComHold ( russianKillers ) ;
2709: LD_EXP 47
2713: PPUSH
2714: CALL_OW 200
// wait ( 0 0$1 ) ;
2718: LD_INT 35
2720: PPUSH
2721: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
2725: LD_INT 122
2727: PPUSH
2728: LD_INT 40
2730: PPUSH
2731: LD_INT 2
2733: PPUSH
2734: CALL_OW 331
// for i in russianKillers union ruCommisar do
2738: LD_ADDR_VAR 0 3
2742: PUSH
2743: LD_EXP 47
2747: PUSH
2748: LD_EXP 48
2752: UNION
2753: PUSH
2754: FOR_IN
2755: IFFALSE 2768
// RemoveUnit ( i ) ;
2757: LD_VAR 0 3
2761: PPUSH
2762: CALL_OW 64
2766: GO 2754
2768: POP
2769: POP
// if hasNormalScene then
2770: LD_EXP 5
2774: IFFALSE 2782
// ActionNormal else
2776: CALL 2791 0 0
2780: GO 2786
// ActionAdditional ;
2782: CALL 4561 0 0
// end ;
2786: LD_VAR 0 1
2790: RET
// function ActionNormal ; var i , tmp ; begin
2791: LD_INT 0
2793: PPUSH
2794: PPUSH
2795: PPUSH
// CenterNowOnUnits ( Heike ) ;
2796: LD_EXP 30
2800: PPUSH
2801: CALL_OW 87
// wait ( 0 0$1 ) ;
2805: LD_INT 35
2807: PPUSH
2808: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
2812: LD_EXP 30
2816: PPUSH
2817: LD_INT 115
2819: PPUSH
2820: LD_INT 19
2822: PPUSH
2823: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
2827: LD_EXP 30
2831: PPUSH
2832: LD_INT 113
2834: PPUSH
2835: LD_INT 16
2837: PPUSH
2838: CALL_OW 178
// wait ( 0 0$2 ) ;
2842: LD_INT 70
2844: PPUSH
2845: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
2849: LD_EXP 30
2853: PPUSH
2854: LD_STRING DH-Conspiracy-1
2856: PPUSH
2857: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
2861: LD_EXP 35
2865: PPUSH
2866: LD_STRING DK-Conspiracy-2
2868: PPUSH
2869: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
2873: LD_EXP 31
2877: PPUSH
2878: LD_STRING DG-Conspiracy-3
2880: PPUSH
2881: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
2885: LD_EXP 31
2889: PPUSH
2890: LD_STRING DG-Conspiracy-4
2892: PPUSH
2893: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
2897: LD_EXP 30
2901: PPUSH
2902: LD_STRING DH-Conspiracy-5
2904: PPUSH
2905: CALL_OW 88
// if IsOk ( Kamil ) then
2909: LD_EXP 34
2913: PPUSH
2914: CALL_OW 302
2918: IFFALSE 2976
// begin hasVodka := true ;
2920: LD_ADDR_EXP 4
2924: PUSH
2925: LD_INT 1
2927: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
2928: LD_EXP 34
2932: PPUSH
2933: LD_STRING DKam-Conspiracy-6
2935: PPUSH
2936: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
2940: LD_EXP 34
2944: PPUSH
2945: LD_STRING DKam-Conspiracy-7
2947: PPUSH
2948: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
2952: LD_EXP 34
2956: PPUSH
2957: LD_STRING DKam-Conspiracy-8
2959: PPUSH
2960: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
2964: LD_EXP 34
2968: PPUSH
2969: LD_STRING DKam-Conspiracy-9
2971: PPUSH
2972: CALL_OW 88
// end ; if IsOk ( Sophia ) then
2976: LD_EXP 36
2980: PPUSH
2981: CALL_OW 302
2985: IFFALSE 3166
// begin americanContact := true ;
2987: LD_ADDR_EXP 10
2991: PUSH
2992: LD_INT 1
2994: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
2995: LD_STRING M1-american
2997: PPUSH
2998: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
3002: LD_EXP 36
3006: PPUSH
3007: LD_STRING DS-Conspiracy-10
3009: PPUSH
3010: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
3014: LD_EXP 37
3018: PPUSH
3019: LD_STRING DM-Conspiracy-11
3021: PPUSH
3022: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
3026: LD_EXP 36
3030: PPUSH
3031: LD_STRING DS-Conspiracy-12
3033: PPUSH
3034: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
3038: LD_INT 84
3040: PPUSH
3041: LD_INT 19
3043: PPUSH
3044: LD_INT 105
3046: PPUSH
3047: CALL 13738 0 3
// if johnnySaved then
3051: LD_EXP 3
3055: IFFALSE 3095
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
3057: LD_EXP 36
3061: PPUSH
3062: LD_STRING DS-Conspiracy-13
3064: PPUSH
3065: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
3069: LD_EXP 30
3073: PPUSH
3074: LD_STRING DH-Conspiracy-14
3076: PPUSH
3077: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
3081: LD_EXP 36
3085: PPUSH
3086: LD_STRING DH-Conspiracy-15
3088: PPUSH
3089: CALL_OW 88
// end else
3093: GO 3131
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
3095: LD_EXP 36
3099: PPUSH
3100: LD_STRING DS-Conspiracy-a-13
3102: PPUSH
3103: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
3107: LD_EXP 30
3111: PPUSH
3112: LD_STRING DH-Conspiracy-a-14
3114: PPUSH
3115: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-a-15 ) ;
3119: LD_EXP 36
3123: PPUSH
3124: LD_STRING DH-Conspiracy-a-15
3126: PPUSH
3127: CALL_OW 88
// end ; if IsOk ( Givi ) then
3131: LD_EXP 31
3135: PPUSH
3136: CALL_OW 302
3140: IFFALSE 3166
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
3142: LD_EXP 31
3146: PPUSH
3147: LD_STRING DG-Conspiracy-a-16
3149: PPUSH
3150: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
3154: LD_EXP 30
3158: PPUSH
3159: LD_STRING DH-Conspiracy-a-17
3161: PPUSH
3162: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
3166: LD_EXP 30
3170: PPUSH
3171: LD_STRING DH-Conspiracy-16
3173: PPUSH
3174: CALL_OW 88
// if IsOk ( Givi ) then
3178: LD_EXP 31
3182: PPUSH
3183: CALL_OW 302
3187: IFFALSE 3459
// begin hasStimDrugs := true ;
3189: LD_ADDR_EXP 9
3193: PUSH
3194: LD_INT 1
3196: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
3197: LD_STRING M1-drugs
3199: PPUSH
3200: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
3204: LD_EXP 31
3208: PPUSH
3209: LD_STRING DG-Conspiracy-17
3211: PPUSH
3212: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
3216: LD_INT 162
3218: PPUSH
3219: LD_INT 2
3221: PPUSH
3222: CALL_OW 235
// ShowPlace ( 184 , 95 , 0 0$3 ) ;
3226: LD_INT 184
3228: PPUSH
3229: LD_INT 95
3231: PPUSH
3232: LD_INT 105
3234: PPUSH
3235: CALL 13738 0 3
// SetSide ( drugsLab , 3 ) ;
3239: LD_INT 162
3241: PPUSH
3242: LD_INT 3
3244: PPUSH
3245: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
3249: LD_EXP 31
3253: PPUSH
3254: LD_STRING DG-Conspiracy-18
3256: PPUSH
3257: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
3261: LD_EXP 31
3265: PPUSH
3266: LD_STRING DG-Conspiracy-19
3268: PPUSH
3269: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
3273: LD_EXP 31
3277: PPUSH
3278: LD_STRING DG-Conspiracy-20
3280: PPUSH
3281: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
3285: LD_EXP 30
3289: PPUSH
3290: LD_STRING DH-Conspiracy-21
3292: PPUSH
3293: CALL_OW 88
// if IsOk ( Kaia ) then
3297: LD_EXP 35
3301: PPUSH
3302: CALL_OW 302
3306: IFFALSE 3380
// begin hasExplosions := true ;
3308: LD_ADDR_EXP 6
3312: PUSH
3313: LD_INT 1
3315: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
3316: LD_STRING M1-explosive
3318: PPUSH
3319: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
3323: LD_EXP 35
3327: PPUSH
3328: LD_STRING DK-Conspiracy-22
3330: PPUSH
3331: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
3335: LD_INT 73
3337: PPUSH
3338: LD_INT 2
3340: PPUSH
3341: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
3345: LD_INT 170
3347: PPUSH
3348: LD_INT 104
3350: PPUSH
3351: LD_INT 105
3353: PPUSH
3354: CALL 13738 0 3
// SetSide ( barExplosion , 3 ) ;
3358: LD_INT 73
3360: PPUSH
3361: LD_INT 3
3363: PPUSH
3364: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
3368: LD_EXP 35
3372: PPUSH
3373: LD_STRING DK-Conspiracy-23
3375: PPUSH
3376: CALL_OW 88
// end ; if IsOk ( Olaf ) then
3380: LD_EXP 38
3384: PPUSH
3385: CALL_OW 302
3389: IFFALSE 3459
// begin hasExplosionsInFactory := true ;
3391: LD_ADDR_EXP 7
3395: PUSH
3396: LD_INT 1
3398: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
3399: LD_EXP 38
3403: PPUSH
3404: LD_STRING DO-Conspiracy-24
3406: PPUSH
3407: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
3411: LD_INT 175
3413: PPUSH
3414: LD_INT 54
3416: PPUSH
3417: LD_INT 70
3419: PPUSH
3420: CALL 13738 0 3
// if IsOk ( Markov ) then
3424: LD_EXP 37
3428: PPUSH
3429: CALL_OW 302
3433: IFFALSE 3459
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
3435: LD_EXP 37
3439: PPUSH
3440: LD_STRING DMar-Conspiracy-25
3442: PPUSH
3443: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
3447: LD_EXP 37
3451: PPUSH
3452: LD_STRING DMar-Conspiracy-26
3454: PPUSH
3455: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
3459: LD_EXP 39
3463: PPUSH
3464: CALL_OW 302
3468: PUSH
3469: LD_EXP 35
3473: PPUSH
3474: CALL_OW 302
3478: AND
3479: IFFALSE 3931
// begin hasWeapons := true ;
3481: LD_ADDR_EXP 19
3485: PUSH
3486: LD_INT 1
3488: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
3489: LD_STRING M1-weapons
3491: PPUSH
3492: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
3496: LD_EXP 39
3500: PPUSH
3501: LD_STRING DKs-Conspiracy-27
3503: PPUSH
3504: CALL_OW 88
// if IsOk ( Givi ) then
3508: LD_EXP 31
3512: PPUSH
3513: CALL_OW 302
3517: IFFALSE 3533
// Say ( Givi , DG-Conspiracy-28 ) else
3519: LD_EXP 31
3523: PPUSH
3524: LD_STRING DG-Conspiracy-28
3526: PPUSH
3527: CALL_OW 88
3531: GO 3598
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
3533: LD_EXP 41
3537: PPUSH
3538: LD_INT 26
3540: PUSH
3541: LD_INT 1
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: PPUSH
3548: CALL_OW 72
3552: PUSH
3553: LD_INT 1
3555: ARRAY
3556: PPUSH
3557: LD_STRING DArm-Conspiracy-a-28
3559: PPUSH
3560: CALL_OW 88
3564: NOT
3565: IFFALSE 3598
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
3567: LD_EXP 41
3571: PPUSH
3572: LD_INT 26
3574: PUSH
3575: LD_INT 2
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: PPUSH
3582: CALL_OW 72
3586: PUSH
3587: LD_INT 1
3589: ARRAY
3590: PPUSH
3591: LD_STRING DArf-Conspiracy-a-28
3593: PPUSH
3594: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
3598: LD_EXP 39
3602: PPUSH
3603: LD_STRING DKs-Conspiracy-29
3605: PPUSH
3606: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
3610: LD_INT 192
3612: PPUSH
3613: LD_INT 122
3615: PPUSH
3616: LD_INT 105
3618: PPUSH
3619: CALL 13738 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
3623: LD_EXP 39
3627: PPUSH
3628: LD_STRING DKs-Conspiracy-30
3630: PPUSH
3631: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
3635: LD_EXP 35
3639: PPUSH
3640: LD_STRING DK-Conspiracy-31
3642: PPUSH
3643: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
3647: LD_EXP 37
3651: PPUSH
3652: LD_STRING DMar-Conspiracy-33
3654: PPUSH
3655: CALL_OW 88
3659: NOT
3660: PUSH
3661: LD_EXP 41
3665: AND
3666: IFFALSE 3733
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
3668: LD_EXP 41
3672: PPUSH
3673: LD_INT 26
3675: PUSH
3676: LD_INT 1
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PPUSH
3683: CALL_OW 72
3687: PUSH
3688: LD_INT 1
3690: ARRAY
3691: PPUSH
3692: LD_STRING DArm-Conspiracy-a-34
3694: PPUSH
3695: CALL_OW 88
3699: NOT
3700: IFFALSE 3733
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
3702: LD_EXP 41
3706: PPUSH
3707: LD_INT 26
3709: PUSH
3710: LD_INT 2
3712: PUSH
3713: EMPTY
3714: LIST
3715: LIST
3716: PPUSH
3717: CALL_OW 72
3721: PUSH
3722: LD_INT 1
3724: ARRAY
3725: PPUSH
3726: LD_STRING DArf-Conspiracy-a-34
3728: PPUSH
3729: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
3733: LD_EXP 35
3737: PPUSH
3738: LD_STRING DK-Conspiracy-34
3740: PPUSH
3741: CALL_OW 88
// if IsOk ( Markov ) then
3745: LD_EXP 37
3749: PPUSH
3750: CALL_OW 302
3754: IFFALSE 3839
// begin hasSniperRifle := true ;
3756: LD_ADDR_EXP 11
3760: PUSH
3761: LD_INT 1
3763: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
3764: LD_EXP 37
3768: PPUSH
3769: LD_STRING DMar-Conspiracy-35
3771: PPUSH
3772: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
3776: LD_EXP 35
3780: PPUSH
3781: LD_STRING DK-Conspiracy-36
3783: PPUSH
3784: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
3788: LD_EXP 37
3792: PPUSH
3793: LD_STRING DMar-Conspiracy-37
3795: PPUSH
3796: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
3800: LD_EXP 37
3804: PPUSH
3805: LD_STRING DMar-Conspiracy-38
3807: PPUSH
3808: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
3812: LD_INT 137
3814: PPUSH
3815: LD_INT 98
3817: PPUSH
3818: LD_INT 105
3820: PPUSH
3821: CALL 13738 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
3825: LD_EXP 37
3829: PPUSH
3830: LD_STRING DMar-Conspiracy-39
3832: PPUSH
3833: CALL_OW 88
// end else
3837: GO 3931
// if heikeSecondSquad then
3839: LD_EXP 41
3843: IFFALSE 3931
// begin hasSniperRifle := true ;
3845: LD_ADDR_EXP 11
3849: PUSH
3850: LD_INT 1
3852: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
3853: LD_INT 137
3855: PPUSH
3856: LD_INT 98
3858: PPUSH
3859: LD_INT 105
3861: PPUSH
3862: CALL 13738 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
3866: LD_EXP 41
3870: PPUSH
3871: LD_INT 26
3873: PUSH
3874: LD_INT 1
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: PPUSH
3881: CALL_OW 72
3885: PUSH
3886: LD_INT 1
3888: ARRAY
3889: PPUSH
3890: LD_STRING DArm-Conspiracy-a-35
3892: PPUSH
3893: CALL_OW 88
3897: NOT
3898: IFFALSE 3931
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
3900: LD_EXP 41
3904: PPUSH
3905: LD_INT 26
3907: PUSH
3908: LD_INT 2
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PPUSH
3915: CALL_OW 72
3919: PUSH
3920: LD_INT 1
3922: ARRAY
3923: PPUSH
3924: LD_STRING DArf-Conspiracy-a-35
3926: PPUSH
3927: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
3931: LD_EXP 30
3935: PPUSH
3936: LD_STRING DH-Conspiracy-40
3938: PPUSH
3939: CALL_OW 88
// if IsOk ( Mike ) then
3943: LD_EXP 32
3947: PPUSH
3948: CALL_OW 302
3952: IFFALSE 4011
// begin hasScout := true ;
3954: LD_ADDR_EXP 12
3958: PUSH
3959: LD_INT 1
3961: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
3962: LD_EXP 32
3966: PPUSH
3967: LD_STRING DM-Conspiracy-41
3969: PPUSH
3970: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
3974: LD_EXP 32
3978: PPUSH
3979: LD_STRING DM-Conspiracy-42
3981: PPUSH
3982: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
3986: LD_INT 73
3988: PPUSH
3989: LD_INT 102
3991: PPUSH
3992: LD_INT 105
3994: PPUSH
3995: CALL 13738 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
3999: LD_EXP 32
4003: PPUSH
4004: LD_STRING DM-Conspiracy-43
4006: PPUSH
4007: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
4011: LD_EXP 4
4015: PUSH
4016: LD_EXP 35
4020: PPUSH
4021: CALL_OW 302
4025: AND
4026: PUSH
4027: LD_EXP 39
4031: PPUSH
4032: CALL_OW 302
4036: AND
4037: IFFALSE 4083
// begin hasMethanol := true ;
4039: LD_ADDR_EXP 13
4043: PUSH
4044: LD_INT 1
4046: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
4047: LD_EXP 35
4051: PPUSH
4052: LD_STRING DK-Conspiracy-44
4054: PPUSH
4055: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
4059: LD_EXP 35
4063: PPUSH
4064: LD_STRING DK-Conspiracy-45
4066: PPUSH
4067: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
4071: LD_EXP 34
4075: PPUSH
4076: LD_STRING DKam-Conspiracy-46
4078: PPUSH
4079: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
4083: LD_EXP 30
4087: PPUSH
4088: LD_STRING DH-Conspiracy-47
4090: PPUSH
4091: CALL_OW 88
// wait ( 0 0$1 ) ;
4095: LD_INT 35
4097: PPUSH
4098: CALL_OW 67
// your_side := 8 ;
4102: LD_ADDR_OWVAR 2
4106: PUSH
4107: LD_INT 8
4109: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 1
4115: PPUSH
4116: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
4120: LD_ADDR_VAR 0 2
4124: PUSH
4125: LD_INT 2
4127: PUSH
4128: LD_INT 22
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 22
4140: PUSH
4141: LD_INT 4
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: LIST
4152: PUSH
4153: LD_INT 21
4155: PUSH
4156: LD_INT 1
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: EMPTY
4164: LIST
4165: LIST
4166: PPUSH
4167: CALL_OW 69
4171: PUSH
4172: FOR_IN
4173: IFFALSE 4186
// RemoveUnit ( i ) ;
4175: LD_VAR 0 2
4179: PPUSH
4180: CALL_OW 64
4184: GO 4172
4186: POP
4187: POP
// wait ( 0 0$0.3 ) ;
4188: LD_INT 10
4190: PPUSH
4191: CALL_OW 67
// Query ( StartInfo1 ) ;
4195: LD_STRING StartInfo1
4197: PPUSH
4198: CALL_OW 97
// wait ( 0 0$1 ) ;
4202: LD_INT 35
4204: PPUSH
4205: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
4209: LD_STRING colors_night.txt
4211: PPUSH
4212: CALL_OW 544
// Query ( StartInfo2 ) ;
4216: LD_STRING StartInfo2
4218: PPUSH
4219: CALL_OW 97
// PrepareGame ;
4223: CALL 824 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4227: LD_INT 152
4229: PPUSH
4230: LD_INT 65
4232: PPUSH
4233: LD_INT 2
4235: PPUSH
4236: LD_INT 70
4238: NEG
4239: PPUSH
4240: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4244: LD_INT 152
4246: PPUSH
4247: LD_INT 65
4249: PPUSH
4250: LD_INT 2
4252: PPUSH
4253: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
4257: LD_INT 133
4259: PPUSH
4260: LD_INT 76
4262: PPUSH
4263: LD_INT 2
4265: PPUSH
4266: LD_INT 6
4268: NEG
4269: PPUSH
4270: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
4274: LD_INT 152
4276: PPUSH
4277: LD_INT 65
4279: PPUSH
4280: LD_INT 8
4282: PPUSH
4283: LD_INT 70
4285: NEG
4286: PPUSH
4287: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
4291: LD_INT 152
4293: PPUSH
4294: LD_INT 65
4296: PPUSH
4297: LD_INT 8
4299: PPUSH
4300: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
4304: LD_INT 133
4306: PPUSH
4307: LD_INT 76
4309: PPUSH
4310: LD_INT 8
4312: PPUSH
4313: LD_INT 6
4315: NEG
4316: PPUSH
4317: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
4321: LD_INT 23
4323: PPUSH
4324: CALL_OW 87
// dialogue_skipped := false ;
4328: LD_ADDR_OWVAR 59
4332: PUSH
4333: LD_INT 0
4335: ST_TO_ADDR
// Say ( Heike , DH-Escape-1 ) ;
4336: LD_EXP 30
4340: PPUSH
4341: LD_STRING DH-Escape-1
4343: PPUSH
4344: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
4348: LD_EXP 30
4352: PPUSH
4353: LD_STRING DH-Escape-2
4355: PPUSH
4356: CALL_OW 88
// if not debug then
4360: LD_EXP 1
4364: NOT
4365: IFFALSE 4371
// StartLockerMinigame ;
4367: CALL 14070 0 0
// wait ( 0 0$1 ) ;
4371: LD_INT 35
4373: PPUSH
4374: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
4378: LD_EXP 30
4382: PPUSH
4383: LD_STRING DH-Escape-4
4385: PPUSH
4386: CALL_OW 88
// wait ( 0 0$3 ) ;
4390: LD_INT 105
4392: PPUSH
4393: CALL_OW 67
// your_side := 2 ;
4397: LD_ADDR_OWVAR 2
4401: PUSH
4402: LD_INT 2
4404: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
4405: LD_EXP 30
4409: PPUSH
4410: CALL_OW 122
// AddComMoveXY ( Heike , 128 , 64 ) ;
4414: LD_EXP 30
4418: PPUSH
4419: LD_INT 128
4421: PPUSH
4422: LD_INT 64
4424: PPUSH
4425: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4429: LD_INT 35
4431: PPUSH
4432: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
4436: LD_EXP 30
4440: PPUSH
4441: LD_INT 128
4443: PPUSH
4444: LD_INT 64
4446: PPUSH
4447: CALL_OW 307
4451: IFFALSE 4429
// ComHold ( Heike ) ;
4453: LD_EXP 30
4457: PPUSH
4458: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
4462: LD_EXP 30
4466: PPUSH
4467: LD_STRING DH-Start-1
4469: PPUSH
4470: CALL_OW 88
// if not americanContact then
4474: LD_EXP 10
4478: NOT
4479: IFFALSE 4495
// Say ( Heike , DH-Start-c-2 ) else
4481: LD_EXP 30
4485: PPUSH
4486: LD_STRING DH-Start-c-2
4488: PPUSH
4489: CALL_OW 88
4493: GO 4527
// if johnnySaved then
4495: LD_EXP 3
4499: IFFALSE 4515
// Say ( Heike , DH-Start-a-2 ) else
4501: LD_EXP 30
4505: PPUSH
4506: LD_STRING DH-Start-a-2
4508: PPUSH
4509: CALL_OW 88
4513: GO 4527
// Say ( Heike , DH-Start-b-2 ) ;
4515: LD_EXP 30
4519: PPUSH
4520: LD_STRING DH-Start-b-2
4522: PPUSH
4523: CALL_OW 88
// Video ( false ) ;
4527: LD_INT 0
4529: PPUSH
4530: CALL 51755 0 1
// tick := 0 ;
4534: LD_ADDR_OWVAR 1
4538: PUSH
4539: LD_INT 0
4541: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
4542: LD_STRING M1
4544: PPUSH
4545: CALL_OW 337
// enable ( gameStartEvent ) ;
4549: LD_INT 2
4551: ENABLE_MARKED
// SaveForQuickRestart ;
4552: CALL_OW 22
// end ;
4556: LD_VAR 0 1
4560: RET
// function ActionAdditional ; var i , un , tmp ; begin
4561: LD_INT 0
4563: PPUSH
4564: PPUSH
4565: PPUSH
4566: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
4567: LD_INT 115
4569: PPUSH
4570: LD_INT 27
4572: PPUSH
4573: LD_INT 2
4575: PPUSH
4576: LD_INT 6
4578: NEG
4579: PPUSH
4580: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
4584: LD_EXP 30
4588: PPUSH
4589: LD_INT 115
4591: PPUSH
4592: LD_INT 27
4594: PPUSH
4595: CALL_OW 428
4599: PPUSH
4600: CALL_OW 52
// SetClass ( Heike , 33 ) ;
4604: LD_EXP 30
4608: PPUSH
4609: LD_INT 33
4611: PPUSH
4612: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
4616: LD_INT 124
4618: PPUSH
4619: LD_INT 39
4621: PPUSH
4622: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
4626: LD_EXP 30
4630: PPUSH
4631: LD_STRING DH-Fail-1
4633: PPUSH
4634: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
4638: LD_INT 3
4640: PPUSH
4641: CALL_OW 427
// ComExit ( Heike ) ;
4645: LD_EXP 30
4649: PPUSH
4650: CALL 52181 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
4654: LD_EXP 30
4658: PPUSH
4659: LD_INT 109
4661: PPUSH
4662: LD_INT 33
4664: PPUSH
4665: CALL_OW 171
// AddComHold ( Heike ) ;
4669: LD_EXP 30
4673: PPUSH
4674: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
4678: LD_INT 115
4680: PPUSH
4681: LD_INT 27
4683: PPUSH
4684: LD_INT 2
4686: PPUSH
4687: CALL_OW 331
// wait ( 0 0$2 ) ;
4691: LD_INT 70
4693: PPUSH
4694: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
4698: LD_INT 35
4700: PPUSH
4701: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
4705: LD_EXP 30
4709: PPUSH
4710: LD_INT 109
4712: PPUSH
4713: LD_INT 33
4715: PPUSH
4716: CALL_OW 307
4720: IFFALSE 4698
// Say ( Heike , DH-Fail-2 ) ;
4722: LD_EXP 30
4726: PPUSH
4727: LD_STRING DH-Fail-2
4729: PPUSH
4730: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
4734: LD_EXP 30
4738: PPUSH
4739: LD_INT 111
4741: PPUSH
4742: LD_INT 48
4744: PPUSH
4745: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4749: LD_INT 35
4751: PPUSH
4752: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
4756: LD_EXP 30
4760: PPUSH
4761: LD_INT 111
4763: PPUSH
4764: LD_INT 48
4766: PPUSH
4767: CALL_OW 297
4771: PUSH
4772: LD_INT 4
4774: LESS
4775: IFFALSE 4749
// AddComMoveXY ( Heike , 106 , 72 ) ;
4777: LD_EXP 30
4781: PPUSH
4782: LD_INT 106
4784: PPUSH
4785: LD_INT 72
4787: PPUSH
4788: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
4792: LD_EXP 30
4796: PPUSH
4797: LD_INT 103
4799: PPUSH
4800: LD_INT 80
4802: PPUSH
4803: CALL_OW 171
// uc_side := 3 ;
4807: LD_ADDR_OWVAR 20
4811: PUSH
4812: LD_INT 3
4814: ST_TO_ADDR
// uc_nation := 3 ;
4815: LD_ADDR_OWVAR 21
4819: PUSH
4820: LD_INT 3
4822: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
4823: LD_INT 1
4825: PPUSH
4826: LD_INT 1
4828: PPUSH
4829: LD_INT 6
4831: PPUSH
4832: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
4836: LD_ADDR_OWVAR 29
4840: PUSH
4841: LD_INT 12
4843: PUSH
4844: LD_INT 12
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: ST_TO_ADDR
// un := CreateHuman ;
4851: LD_ADDR_VAR 0 3
4855: PUSH
4856: CALL_OW 44
4860: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
4861: LD_VAR 0 3
4865: PPUSH
4866: LD_INT 134
4868: PPUSH
4869: LD_INT 52
4871: PPUSH
4872: LD_INT 4
4874: PPUSH
4875: LD_INT 0
4877: PPUSH
4878: CALL 53923 0 5
// ComTurnUnit ( un , Heike ) ;
4882: LD_VAR 0 3
4886: PPUSH
4887: LD_EXP 30
4891: PPUSH
4892: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
4896: LD_VAR 0 3
4900: PPUSH
4901: LD_EXP 30
4905: PPUSH
4906: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
4910: LD_VAR 0 3
4914: PPUSH
4915: LD_STRING DRum-Fail-3
4917: PPUSH
4918: CALL_OW 88
// for i := 1 to 3 do
4922: LD_ADDR_VAR 0 2
4926: PUSH
4927: DOUBLE
4928: LD_INT 1
4930: DEC
4931: ST_TO_ADDR
4932: LD_INT 3
4934: PUSH
4935: FOR_TO
4936: IFFALSE 5009
// begin PrepareSoldier ( false , 10 ) ;
4938: LD_INT 0
4940: PPUSH
4941: LD_INT 10
4943: PPUSH
4944: CALL_OW 381
// un := CreateHuman ;
4948: LD_ADDR_VAR 0 3
4952: PUSH
4953: CALL_OW 44
4957: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
4958: LD_ADDR_VAR 0 4
4962: PUSH
4963: LD_VAR 0 4
4967: PPUSH
4968: LD_VAR 0 3
4972: PPUSH
4973: CALL 51783 0 2
4977: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
4978: LD_VAR 0 3
4982: PPUSH
4983: LD_INT 8
4985: PPUSH
4986: LD_INT 0
4988: PPUSH
4989: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
4993: LD_VAR 0 3
4997: PPUSH
4998: LD_EXP 30
5002: PPUSH
5003: CALL_OW 119
// end ;
5007: GO 4935
5009: POP
5010: POP
// repeat wait ( 0 0$1 ) ;
5011: LD_INT 35
5013: PPUSH
5014: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
5018: LD_VAR 0 4
5022: PPUSH
5023: LD_INT 101
5025: PUSH
5026: LD_INT 2
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: PPUSH
5033: CALL_OW 72
5037: PUSH
5038: LD_INT 1
5040: GREATER
5041: IFFALSE 5011
// wait ( 0 0$1 ) ;
5043: LD_INT 35
5045: PPUSH
5046: CALL_OW 67
// DialogueOn ;
5050: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
5054: LD_EXP 30
5058: PPUSH
5059: LD_STRING DH-Fail-4
5061: PPUSH
5062: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
5066: LD_EXP 30
5070: PPUSH
5071: LD_STRING DH-Fail-5
5073: PPUSH
5074: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
5078: LD_EXP 30
5082: PPUSH
5083: LD_STRING DH-Fail-6
5085: PPUSH
5086: CALL_OW 88
// DialogueOff ;
5090: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
5094: LD_VAR 0 4
5098: PPUSH
5099: LD_EXP 30
5103: PPUSH
5104: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
5108: LD_INT 35
5110: PPUSH
5111: CALL_OW 67
// until IsDying ( Heike ) ;
5115: LD_EXP 30
5119: PPUSH
5120: CALL_OW 303
5124: IFFALSE 5108
// KillUnit ( Heike ) ;
5126: LD_EXP 30
5130: PPUSH
5131: CALL_OW 66
// wait ( 0 0$4 ) ;
5135: LD_INT 140
5137: PPUSH
5138: CALL_OW 67
// ResetFog ;
5142: CALL_OW 335
// DialogueOn ;
5146: CALL_OW 6
// dwait ( 0 0$1 ) ;
5150: LD_INT 35
5152: PPUSH
5153: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
5157: LD_ADDR_EXP 30
5161: PUSH
5162: LD_STRING Heike
5164: PPUSH
5165: LD_EXP 1
5169: NOT
5170: PPUSH
5171: LD_EXP 2
5175: PPUSH
5176: CALL 14407 0 3
5180: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
5181: LD_EXP 30
5185: PPUSH
5186: LD_STRING DH-Fail-7
5188: PPUSH
5189: CALL_OW 89
// DialogueOff ;
5193: CALL_OW 7
// YouLost ( Fail ) ;
5197: LD_STRING Fail
5199: PPUSH
5200: CALL_OW 104
// end ;
5204: LD_VAR 0 1
5208: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
5209: LD_INT 2
5211: PPUSH
5212: LD_INT 173
5214: PPUSH
5215: LD_INT 29
5217: PPUSH
5218: CALL_OW 293
5222: PUSH
5223: LD_EXP 30
5227: PPUSH
5228: LD_INT 173
5230: PPUSH
5231: LD_INT 29
5233: PPUSH
5234: CALL_OW 297
5238: PUSH
5239: LD_INT 6
5241: LESS
5242: AND
5243: IFFALSE 5260
5245: GO 5247
5247: DISABLE
// Say ( Heike , DH-EastRoad ) ;
5248: LD_EXP 30
5252: PPUSH
5253: LD_STRING DH-EastRoad
5255: PPUSH
5256: CALL_OW 88
5260: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
5261: LD_INT 2
5263: PPUSH
5264: LD_INT 149
5266: PPUSH
5267: LD_INT 3
5269: PPUSH
5270: CALL_OW 293
5274: PUSH
5275: LD_EXP 30
5279: PPUSH
5280: LD_INT 149
5282: PPUSH
5283: LD_INT 3
5285: PPUSH
5286: CALL_OW 297
5290: PUSH
5291: LD_INT 6
5293: LESS
5294: AND
5295: IFFALSE 5312
5297: GO 5299
5299: DISABLE
// Say ( Heike , DH-EastRoad ) ;
5300: LD_EXP 30
5304: PPUSH
5305: LD_STRING DH-EastRoad
5307: PPUSH
5308: CALL_OW 88
5312: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
5313: LD_INT 2
5315: PPUSH
5316: LD_INT 217
5318: PPUSH
5319: LD_INT 120
5321: PPUSH
5322: CALL_OW 293
5326: PUSH
5327: LD_EXP 30
5331: PPUSH
5332: LD_INT 217
5334: PPUSH
5335: LD_INT 120
5337: PPUSH
5338: CALL_OW 297
5342: PUSH
5343: LD_INT 6
5345: LESS
5346: AND
5347: IFFALSE 5364
5349: GO 5351
5351: DISABLE
// Say ( Heike , DH-EastEnd ) ;
5352: LD_EXP 30
5356: PPUSH
5357: LD_STRING DH-EastEnd
5359: PPUSH
5360: CALL_OW 88
5364: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
5365: LD_EXP 30
5369: PPUSH
5370: LD_INT 11
5372: PPUSH
5373: CALL_OW 308
5377: IFFALSE 5415
5379: GO 5381
5381: DISABLE
// begin if not heikeSquad then
5382: LD_EXP 14
5386: NOT
5387: IFFALSE 5403
// Say ( Heike , DH-Hill ) else
5389: LD_EXP 30
5393: PPUSH
5394: LD_STRING DH-Hill
5396: PPUSH
5397: CALL_OW 88
5401: GO 5415
// Say ( Heike , DH-Hill-a ) ;
5403: LD_EXP 30
5407: PPUSH
5408: LD_STRING DH-Hill-a
5410: PPUSH
5411: CALL_OW 88
// end ;
5415: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
5416: LD_EXP 30
5420: PPUSH
5421: LD_INT 12
5423: PPUSH
5424: CALL_OW 308
5428: IFFALSE 5610
5430: GO 5432
5432: DISABLE
5433: LD_INT 0
5435: PPUSH
5436: PPUSH
5437: PPUSH
// begin DialogueOn ;
5438: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
5442: LD_EXP 30
5446: PPUSH
5447: CALL_OW 87
// x := GetX ( Heike ) ;
5451: LD_ADDR_VAR 0 1
5455: PUSH
5456: LD_EXP 30
5460: PPUSH
5461: CALL_OW 250
5465: ST_TO_ADDR
// y := GetY ( Heike ) ;
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: LD_EXP 30
5475: PPUSH
5476: CALL_OW 251
5480: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
5481: LD_VAR 0 1
5485: PPUSH
5486: LD_VAR 0 2
5490: PPUSH
5491: LD_INT 2
5493: PPUSH
5494: LD_INT 12
5496: NEG
5497: PPUSH
5498: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
5502: LD_VAR 0 1
5506: PPUSH
5507: LD_VAR 0 2
5511: PPUSH
5512: LD_INT 2
5514: PPUSH
5515: CALL_OW 331
// if FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
5519: LD_INT 2
5521: PUSH
5522: LD_INT 30
5524: PUSH
5525: LD_INT 32
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: LD_INT 30
5534: PUSH
5535: LD_INT 33
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: LIST
5546: PPUSH
5547: CALL_OW 69
5551: IFFALSE 5563
// v := 3 else
5553: LD_ADDR_VAR 0 3
5557: PUSH
5558: LD_INT 3
5560: ST_TO_ADDR
5561: GO 5571
// v := 2 ;
5563: LD_ADDR_VAR 0 3
5567: PUSH
5568: LD_INT 2
5570: ST_TO_ADDR
// disable ;
5571: DISABLE
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
5572: LD_EXP 30
5576: PPUSH
5577: LD_STRING DH-Outpost-
5579: PUSH
5580: LD_INT 1
5582: PPUSH
5583: LD_VAR 0 3
5587: PPUSH
5588: CALL_OW 12
5592: STR
5593: PPUSH
5594: CALL_OW 88
// DialogueOff ;
5598: CALL_OW 7
// wait ( 0 0$10 ) ;
5602: LD_INT 350
5604: PPUSH
5605: CALL_OW 67
// enable ;
5609: ENABLE
// end ;
5610: PPOPN 3
5612: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered marked gameStartEvent do
5613: LD_EXP 30
5617: PPUSH
5618: LD_INT 20
5620: PPUSH
5621: CALL_OW 308
5625: PUSH
5626: LD_EXP 22
5630: NOT
5631: AND
5632: IFFALSE 5705
5634: GO 5636
5636: DISABLE
// begin DialogueOn ;
5637: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
5641: LD_INT 152
5643: PPUSH
5644: LD_INT 115
5646: PPUSH
5647: LD_INT 2
5649: PPUSH
5650: LD_INT 16
5652: NEG
5653: PPUSH
5654: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
5658: LD_INT 152
5660: PPUSH
5661: LD_INT 115
5663: PPUSH
5664: LD_INT 2
5666: PPUSH
5667: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
5671: LD_INT 152
5673: PPUSH
5674: LD_INT 115
5676: PPUSH
5677: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
5681: LD_EXP 30
5685: PPUSH
5686: LD_STRING DH-Stealth-1
5688: PPUSH
5689: CALL_OW 88
// DialogueOff ;
5693: CALL_OW 7
// adminAreaDiscovered := true ;
5697: LD_ADDR_EXP 22
5701: PUSH
5702: LD_INT 1
5704: ST_TO_ADDR
// end ;
5705: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm marked gameStartEvent do
5706: LD_INT 2
5708: PPUSH
5709: LD_EXP 31
5713: PPUSH
5714: CALL_OW 292
5718: PUSH
5719: LD_EXP 30
5723: PPUSH
5724: LD_EXP 31
5728: PPUSH
5729: CALL_OW 296
5733: PUSH
5734: LD_INT 6
5736: LESS
5737: AND
5738: PUSH
5739: LD_EXP 17
5743: NOT
5744: AND
5745: IFFALSE 5851
5747: GO 5749
5749: DISABLE
// begin DialogueOn ;
5750: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
5754: LD_EXP 31
5758: PPUSH
5759: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
5763: LD_EXP 31
5767: PPUSH
5768: LD_EXP 30
5772: PPUSH
5773: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
5777: LD_EXP 30
5781: PPUSH
5782: LD_EXP 31
5786: PPUSH
5787: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
5791: LD_EXP 30
5795: PPUSH
5796: LD_STRING DH-Givi-1
5798: PPUSH
5799: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
5803: LD_EXP 31
5807: PPUSH
5808: LD_STRING DG-Givi-2
5810: PPUSH
5811: CALL_OW 88
// DialogueOff ;
5815: CALL_OW 7
// SetSide ( Givi , 2 ) ;
5819: LD_EXP 31
5823: PPUSH
5824: LD_INT 2
5826: PPUSH
5827: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
5831: LD_ADDR_EXP 14
5835: PUSH
5836: LD_EXP 14
5840: PPUSH
5841: LD_EXP 31
5845: PPUSH
5846: CALL 51783 0 2
5850: ST_TO_ADDR
// end ;
5851: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm marked gameStartEvent do
5852: LD_INT 2
5854: PPUSH
5855: LD_EXP 38
5859: PPUSH
5860: CALL_OW 292
5864: PUSH
5865: LD_EXP 30
5869: PPUSH
5870: LD_EXP 38
5874: PPUSH
5875: CALL_OW 296
5879: PUSH
5880: LD_INT 6
5882: LESS
5883: AND
5884: PUSH
5885: LD_EXP 17
5889: NOT
5890: AND
5891: IFFALSE 5987
5893: GO 5895
5895: DISABLE
// begin DialogueOn ;
5896: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
5900: LD_EXP 38
5904: PPUSH
5905: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
5909: LD_EXP 30
5913: PPUSH
5914: LD_STRING DH-Olaf-1
5916: PPUSH
5917: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
5921: LD_EXP 38
5925: PPUSH
5926: LD_STRING DO-Olaf-2
5928: PPUSH
5929: CALL_OW 88
// if explosionsTakenByRussians then
5933: LD_EXP 21
5937: IFFALSE 5951
// Say ( Olaf , DO-Olaf-a-3 ) ;
5939: LD_EXP 38
5943: PPUSH
5944: LD_STRING DO-Olaf-a-3
5946: PPUSH
5947: CALL_OW 88
// DialogueOff ;
5951: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
5955: LD_EXP 38
5959: PPUSH
5960: LD_INT 2
5962: PPUSH
5963: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
5967: LD_ADDR_EXP 14
5971: PUSH
5972: LD_EXP 14
5976: PPUSH
5977: LD_EXP 38
5981: PPUSH
5982: CALL 51783 0 2
5986: ST_TO_ADDR
// end ;
5987: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm marked gameStartEvent do var i , xy ;
5988: LD_INT 2
5990: PPUSH
5991: LD_EXP 32
5995: PPUSH
5996: CALL_OW 292
6000: PUSH
6001: LD_EXP 30
6005: PPUSH
6006: LD_EXP 32
6010: PPUSH
6011: CALL_OW 296
6015: PUSH
6016: LD_INT 6
6018: LESS
6019: AND
6020: PUSH
6021: LD_EXP 17
6025: NOT
6026: AND
6027: IFFALSE 6255
6029: GO 6031
6031: DISABLE
6032: LD_INT 0
6034: PPUSH
6035: PPUSH
// begin DialogueOn ;
6036: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
6040: LD_EXP 32
6044: PPUSH
6045: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
6049: LD_ADDR_VAR 0 2
6053: PUSH
6054: LD_INT 19
6056: PPUSH
6057: LD_INT 0
6059: PPUSH
6060: CALL_OW 517
6064: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
6065: LD_ADDR_VAR 0 1
6069: PUSH
6070: DOUBLE
6071: LD_INT 1
6073: DEC
6074: ST_TO_ADDR
6075: LD_VAR 0 2
6079: PUSH
6080: LD_INT 1
6082: ARRAY
6083: PUSH
6084: FOR_TO
6085: IFFALSE 6167
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
6087: LD_VAR 0 2
6091: PUSH
6092: LD_INT 1
6094: ARRAY
6095: PUSH
6096: LD_VAR 0 1
6100: ARRAY
6101: PPUSH
6102: LD_VAR 0 2
6106: PUSH
6107: LD_INT 2
6109: ARRAY
6110: PUSH
6111: LD_VAR 0 1
6115: ARRAY
6116: PPUSH
6117: LD_INT 2
6119: PPUSH
6120: LD_INT 3
6122: NEG
6123: PPUSH
6124: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
6128: LD_VAR 0 2
6132: PUSH
6133: LD_INT 1
6135: ARRAY
6136: PUSH
6137: LD_VAR 0 1
6141: ARRAY
6142: PPUSH
6143: LD_VAR 0 2
6147: PUSH
6148: LD_INT 2
6150: ARRAY
6151: PUSH
6152: LD_VAR 0 1
6156: ARRAY
6157: PPUSH
6158: LD_INT 2
6160: PPUSH
6161: CALL_OW 331
// end ;
6165: GO 6084
6167: POP
6168: POP
// Say ( Mike , DM-Mike-1 ) ;
6169: LD_EXP 32
6173: PPUSH
6174: LD_STRING DM-Mike-1
6176: PPUSH
6177: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
6181: LD_EXP 30
6185: PPUSH
6186: LD_STRING DH-Mike-2
6188: PPUSH
6189: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
6193: LD_INT 78
6195: PPUSH
6196: LD_INT 104
6198: PPUSH
6199: CALL_OW 84
// dwait ( 0 0$1 ) ;
6203: LD_INT 35
6205: PPUSH
6206: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
6210: LD_EXP 30
6214: PPUSH
6215: CALL_OW 87
// DialogueOff ;
6219: CALL_OW 7
// SetSide ( Mike , 2 ) ;
6223: LD_EXP 32
6227: PPUSH
6228: LD_INT 2
6230: PPUSH
6231: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
6235: LD_ADDR_EXP 14
6239: PUSH
6240: LD_EXP 14
6244: PPUSH
6245: LD_EXP 32
6249: PPUSH
6250: CALL 51783 0 2
6254: ST_TO_ADDR
// end ;
6255: PPOPN 2
6257: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad marked gameStartEvent do
6258: LD_EXP 30
6262: PPUSH
6263: LD_EXP 35
6267: PPUSH
6268: CALL_OW 296
6272: PUSH
6273: LD_INT 6
6275: LESS
6276: PUSH
6277: LD_EXP 35
6281: PPUSH
6282: CALL_OW 257
6286: PUSH
6287: LD_INT 33
6289: EQUAL
6290: AND
6291: PUSH
6292: LD_EXP 17
6296: NOT
6297: AND
6298: PUSH
6299: LD_EXP 35
6303: PPUSH
6304: CALL_OW 302
6308: AND
6309: PUSH
6310: LD_EXP 20
6314: AND
6315: PUSH
6316: LD_EXP 35
6320: PUSH
6321: LD_EXP 14
6325: IN
6326: AND
6327: IFFALSE 6356
6329: GO 6331
6331: DISABLE
// begin DialogueOn ;
6332: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
6336: LD_EXP 30
6340: PPUSH
6341: LD_STRING DH-Kaia-Revolver-2
6343: PPUSH
6344: CALL_OW 88
// SetClassKaiaRevolver ;
6348: CALL 1381 0 0
// DialogueOff ;
6352: CALL_OW 7
// end ;
6356: END
// every 0 0$3 trigger Ibrahim and Aviradze and not [ Ibrahim , Aviradze ] in heikeSquad and heikeSquad > 5 and not isAlarm marked gameStartEvent do var hasKaia , hasGivi ;
6357: LD_EXP 33
6361: PUSH
6362: LD_EXP 40
6366: AND
6367: PUSH
6368: LD_EXP 33
6372: PUSH
6373: LD_EXP 40
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: LD_EXP 14
6386: IN
6387: NOT
6388: AND
6389: PUSH
6390: LD_EXP 14
6394: PUSH
6395: LD_INT 5
6397: GREATER
6398: AND
6399: PUSH
6400: LD_EXP 17
6404: NOT
6405: AND
6406: IFFALSE 6990
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
6414: PPUSH
// begin DialogueOn ;
6415: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad ;
6419: LD_ADDR_VAR 0 2
6423: PUSH
6424: LD_EXP 31
6428: PPUSH
6429: CALL_OW 302
6433: PUSH
6434: LD_EXP 31
6438: PUSH
6439: LD_EXP 14
6443: IN
6444: AND
6445: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
6446: LD_EXP 30
6450: PPUSH
6451: LD_STRING DH-Med-1
6453: PPUSH
6454: CALL_OW 88
// if hasGivi then
6458: LD_VAR 0 2
6462: IFFALSE 6478
// Say ( Givi , DG-Med-2 ) else
6464: LD_EXP 31
6468: PPUSH
6469: LD_STRING DG-Med-2
6471: PPUSH
6472: CALL_OW 88
6476: GO 6554
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Med-e-2 ) then
6478: LD_EXP 14
6482: PUSH
6483: LD_EXP 41
6487: ISECT
6488: PPUSH
6489: LD_INT 26
6491: PUSH
6492: LD_INT 1
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PPUSH
6499: CALL_OW 72
6503: PUSH
6504: LD_INT 1
6506: ARRAY
6507: PPUSH
6508: LD_STRING DArm-Med-e-2
6510: PPUSH
6511: CALL_OW 88
6515: IFFALSE 6554
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Med-e-2 ) ;
6517: LD_EXP 14
6521: PUSH
6522: LD_EXP 41
6526: ISECT
6527: PPUSH
6528: LD_INT 26
6530: PUSH
6531: LD_INT 2
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: PPUSH
6538: CALL_OW 72
6542: PUSH
6543: LD_INT 1
6545: ARRAY
6546: PPUSH
6547: LD_STRING DArf-Med-e-2
6549: PPUSH
6550: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
6554: LD_INT 154
6556: PPUSH
6557: LD_INT 119
6559: PPUSH
6560: LD_INT 70
6562: PPUSH
6563: CALL 13738 0 3
// Say ( Heike , DH-Med-3 ) ;
6567: LD_EXP 30
6571: PPUSH
6572: LD_STRING DH-Med-3
6574: PPUSH
6575: CALL_OW 88
// if hasGivi then
6579: LD_VAR 0 2
6583: IFFALSE 6599
// Say ( Givi , DG-Med-4 ) else
6585: LD_EXP 31
6589: PPUSH
6590: LD_STRING DG-Med-4
6592: PPUSH
6593: CALL_OW 88
6597: GO 6675
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Med-e-4 ) then
6599: LD_EXP 14
6603: PUSH
6604: LD_EXP 41
6608: ISECT
6609: PPUSH
6610: LD_INT 26
6612: PUSH
6613: LD_INT 1
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PPUSH
6620: CALL_OW 72
6624: PUSH
6625: LD_INT 1
6627: ARRAY
6628: PPUSH
6629: LD_STRING DArm-Med-e-4
6631: PPUSH
6632: CALL_OW 88
6636: IFFALSE 6675
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Med-e-4 ) ;
6638: LD_EXP 14
6642: PUSH
6643: LD_EXP 41
6647: ISECT
6648: PPUSH
6649: LD_INT 26
6651: PUSH
6652: LD_INT 2
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PPUSH
6659: CALL_OW 72
6663: PUSH
6664: LD_INT 1
6666: ARRAY
6667: PPUSH
6668: LD_STRING DArf-Med-e-4
6670: PPUSH
6671: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad ;
6675: LD_ADDR_VAR 0 1
6679: PUSH
6680: LD_EXP 35
6684: PPUSH
6685: CALL_OW 302
6689: PUSH
6690: LD_EXP 35
6694: PUSH
6695: LD_EXP 14
6699: IN
6700: AND
6701: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad then
6702: LD_EXP 32
6706: PPUSH
6707: CALL_OW 302
6711: PUSH
6712: LD_EXP 32
6716: PUSH
6717: LD_EXP 14
6721: IN
6722: AND
6723: IFFALSE 6755
// begin Say ( Mike , DM-Med-5 ) ;
6725: LD_EXP 32
6729: PPUSH
6730: LD_STRING DM-Med-5
6732: PPUSH
6733: CALL_OW 88
// if hasKaia then
6737: LD_VAR 0 1
6741: IFFALSE 6755
// Say ( Kaia , DK-Med-6 ) ;
6743: LD_EXP 35
6747: PPUSH
6748: LD_STRING DK-Med-6
6750: PPUSH
6751: CALL_OW 88
// end ; if hasKaia then
6755: LD_VAR 0 1
6759: IFFALSE 6978
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
6761: LD_INT 175
6763: PPUSH
6764: LD_INT 123
6766: PPUSH
6767: LD_INT 2
6769: PPUSH
6770: LD_INT 8
6772: NEG
6773: PPUSH
6774: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
6778: LD_INT 175
6780: PPUSH
6781: LD_INT 123
6783: PPUSH
6784: LD_INT 2
6786: PPUSH
6787: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
6791: LD_INT 175
6793: PPUSH
6794: LD_INT 123
6796: PPUSH
6797: CALL_OW 86
// laundryAllowed := true ;
6801: LD_ADDR_EXP 26
6805: PUSH
6806: LD_INT 1
6808: ST_TO_ADDR
// Say ( Kaia , DK-Med-7 ) ;
6809: LD_EXP 35
6813: PPUSH
6814: LD_STRING DK-Med-7
6816: PPUSH
6817: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
6821: LD_EXP 35
6825: PPUSH
6826: LD_STRING DK-Med-8
6828: PPUSH
6829: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad then
6833: LD_EXP 37
6837: PPUSH
6838: CALL_OW 302
6842: PUSH
6843: LD_EXP 37
6847: PUSH
6848: LD_EXP 14
6852: IN
6853: AND
6854: IFFALSE 6912
// begin Say ( Markov , DMar-Med-9 ) ;
6856: LD_EXP 37
6860: PPUSH
6861: LD_STRING DMar-Med-9
6863: PPUSH
6864: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
6868: LD_EXP 35
6872: PPUSH
6873: LD_STRING DK-Med-10
6875: PPUSH
6876: CALL_OW 88
// if hasGivi then
6880: LD_VAR 0 2
6884: IFFALSE 6900
// Say ( Kaia , DK-Med-11 ) else
6886: LD_EXP 35
6890: PPUSH
6891: LD_STRING DK-Med-11
6893: PPUSH
6894: CALL_OW 88
6898: GO 6912
// Say ( Kaia , DK-Med-a-11 ) ;
6900: LD_EXP 35
6904: PPUSH
6905: LD_STRING DK-Med-a-11
6907: PPUSH
6908: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad then
6912: LD_EXP 34
6916: PPUSH
6917: CALL_OW 302
6921: PUSH
6922: LD_EXP 34
6926: PUSH
6927: LD_EXP 14
6931: IN
6932: AND
6933: IFFALSE 6978
// begin Say ( Kamil , DKam-Med-12 ) ;
6935: LD_EXP 34
6939: PPUSH
6940: LD_STRING DKam-Med-12
6942: PPUSH
6943: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
6947: LD_EXP 34
6951: PPUSH
6952: LD_STRING DKam-Med-13
6954: PPUSH
6955: CALL_OW 88
// if not hasExplosionCollected then
6959: LD_EXP 23
6963: NOT
6964: IFFALSE 6978
// Say ( Heike , DH-Med-d-14 ) ;
6966: LD_EXP 30
6970: PPUSH
6971: LD_STRING DH-Med-d-14
6973: PPUSH
6974: CALL_OW 88
// end ; end ; DialogueOff ;
6978: CALL_OW 7
// adminAreaDiscovered := true ;
6982: LD_ADDR_EXP 22
6986: PUSH
6987: LD_INT 1
6989: ST_TO_ADDR
// end ;
6990: PPOPN 2
6992: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and heikeSquad > 4 and not isAlarm marked gameStartEvent do var hasGivi , hasKaia ;
6993: LD_EXP 33
6997: NOT
6998: PUSH
6999: LD_EXP 40
7003: AND
7004: PUSH
7005: LD_EXP 40
7009: PUSH
7010: LD_EXP 14
7014: IN
7015: NOT
7016: AND
7017: PUSH
7018: LD_EXP 14
7022: PUSH
7023: LD_INT 4
7025: GREATER
7026: AND
7027: PUSH
7028: LD_EXP 17
7032: NOT
7033: AND
7034: IFFALSE 7618
7036: GO 7038
7038: DISABLE
7039: LD_INT 0
7041: PPUSH
7042: PPUSH
// begin DialogueOn ;
7043: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad ;
7047: LD_ADDR_VAR 0 1
7051: PUSH
7052: LD_EXP 31
7056: PPUSH
7057: CALL_OW 302
7061: PUSH
7062: LD_EXP 31
7066: PUSH
7067: LD_EXP 14
7071: IN
7072: AND
7073: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
7074: LD_EXP 30
7078: PPUSH
7079: LD_STRING DH-Med-a-1
7081: PPUSH
7082: CALL_OW 88
// if hasGivi then
7086: LD_VAR 0 1
7090: IFFALSE 7106
// Say ( Givi , DG-Med-a-2 ) else
7092: LD_EXP 31
7096: PPUSH
7097: LD_STRING DG-Med-a-2
7099: PPUSH
7100: CALL_OW 88
7104: GO 7182
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Med-f-2 ) then
7106: LD_EXP 14
7110: PUSH
7111: LD_EXP 41
7115: ISECT
7116: PPUSH
7117: LD_INT 26
7119: PUSH
7120: LD_INT 1
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PPUSH
7127: CALL_OW 72
7131: PUSH
7132: LD_INT 1
7134: ARRAY
7135: PPUSH
7136: LD_STRING DArm-Med-f-2
7138: PPUSH
7139: CALL_OW 88
7143: IFFALSE 7182
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Med-f-2 ) ;
7145: LD_EXP 14
7149: PUSH
7150: LD_EXP 41
7154: ISECT
7155: PPUSH
7156: LD_INT 26
7158: PUSH
7159: LD_INT 2
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PPUSH
7166: CALL_OW 72
7170: PUSH
7171: LD_INT 1
7173: ARRAY
7174: PPUSH
7175: LD_STRING DArf-Med-f-2
7177: PPUSH
7178: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
7182: LD_INT 154
7184: PPUSH
7185: LD_INT 119
7187: PPUSH
7188: LD_INT 70
7190: PPUSH
7191: CALL 13738 0 3
// Say ( Heike , DH-Med-a-3 ) ;
7195: LD_EXP 30
7199: PPUSH
7200: LD_STRING DH-Med-a-3
7202: PPUSH
7203: CALL_OW 88
// if hasGivi then
7207: LD_VAR 0 1
7211: IFFALSE 7227
// Say ( Givi , DG-Med-a-4 ) else
7213: LD_EXP 31
7217: PPUSH
7218: LD_STRING DG-Med-a-4
7220: PPUSH
7221: CALL_OW 88
7225: GO 7303
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Med-f-4 ) then
7227: LD_EXP 14
7231: PUSH
7232: LD_EXP 41
7236: ISECT
7237: PPUSH
7238: LD_INT 26
7240: PUSH
7241: LD_INT 1
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PPUSH
7248: CALL_OW 72
7252: PUSH
7253: LD_INT 1
7255: ARRAY
7256: PPUSH
7257: LD_STRING DArm-Med-f-4
7259: PPUSH
7260: CALL_OW 88
7264: IFFALSE 7303
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Med-f-4 ) ;
7266: LD_EXP 14
7270: PUSH
7271: LD_EXP 41
7275: ISECT
7276: PPUSH
7277: LD_INT 26
7279: PUSH
7280: LD_INT 2
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PPUSH
7287: CALL_OW 72
7291: PUSH
7292: LD_INT 1
7294: ARRAY
7295: PPUSH
7296: LD_STRING DArf-Med-f-4
7298: PPUSH
7299: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad ;
7303: LD_ADDR_VAR 0 2
7307: PUSH
7308: LD_EXP 35
7312: PPUSH
7313: CALL_OW 302
7317: PUSH
7318: LD_EXP 35
7322: PUSH
7323: LD_EXP 14
7327: IN
7328: AND
7329: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad then
7330: LD_EXP 32
7334: PPUSH
7335: CALL_OW 302
7339: PUSH
7340: LD_EXP 32
7344: PUSH
7345: LD_EXP 14
7349: IN
7350: AND
7351: IFFALSE 7383
// begin Say ( Mike , DM-Med-5 ) ;
7353: LD_EXP 32
7357: PPUSH
7358: LD_STRING DM-Med-5
7360: PPUSH
7361: CALL_OW 88
// if hasKaia then
7365: LD_VAR 0 2
7369: IFFALSE 7383
// Say ( Kaia , DK-Med-6 ) ;
7371: LD_EXP 35
7375: PPUSH
7376: LD_STRING DK-Med-6
7378: PPUSH
7379: CALL_OW 88
// end ; if hasKaia then
7383: LD_VAR 0 2
7387: IFFALSE 7606
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
7389: LD_INT 175
7391: PPUSH
7392: LD_INT 123
7394: PPUSH
7395: LD_INT 2
7397: PPUSH
7398: LD_INT 8
7400: NEG
7401: PPUSH
7402: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
7406: LD_INT 175
7408: PPUSH
7409: LD_INT 123
7411: PPUSH
7412: LD_INT 2
7414: PPUSH
7415: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
7419: LD_INT 175
7421: PPUSH
7422: LD_INT 123
7424: PPUSH
7425: CALL_OW 86
// laundryAllowed := true ;
7429: LD_ADDR_EXP 26
7433: PUSH
7434: LD_INT 1
7436: ST_TO_ADDR
// Say ( Kaia , DK-Med-7 ) ;
7437: LD_EXP 35
7441: PPUSH
7442: LD_STRING DK-Med-7
7444: PPUSH
7445: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
7449: LD_EXP 35
7453: PPUSH
7454: LD_STRING DK-Med-8
7456: PPUSH
7457: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad then
7461: LD_EXP 37
7465: PPUSH
7466: CALL_OW 302
7470: PUSH
7471: LD_EXP 37
7475: PUSH
7476: LD_EXP 14
7480: IN
7481: AND
7482: IFFALSE 7540
// begin Say ( Markov , DMar-Med-9 ) ;
7484: LD_EXP 37
7488: PPUSH
7489: LD_STRING DMar-Med-9
7491: PPUSH
7492: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
7496: LD_EXP 35
7500: PPUSH
7501: LD_STRING DK-Med-10
7503: PPUSH
7504: CALL_OW 88
// if hasGivi then
7508: LD_VAR 0 1
7512: IFFALSE 7528
// Say ( Kaia , DK-Med-11 ) else
7514: LD_EXP 35
7518: PPUSH
7519: LD_STRING DK-Med-11
7521: PPUSH
7522: CALL_OW 88
7526: GO 7540
// Say ( Kaia , DK-Med-a-11 ) ;
7528: LD_EXP 35
7532: PPUSH
7533: LD_STRING DK-Med-a-11
7535: PPUSH
7536: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad then
7540: LD_EXP 34
7544: PPUSH
7545: CALL_OW 302
7549: PUSH
7550: LD_EXP 34
7554: PUSH
7555: LD_EXP 14
7559: IN
7560: AND
7561: IFFALSE 7606
// begin Say ( Kamil , DKam-Med-12 ) ;
7563: LD_EXP 34
7567: PPUSH
7568: LD_STRING DKam-Med-12
7570: PPUSH
7571: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
7575: LD_EXP 34
7579: PPUSH
7580: LD_STRING DKam-Med-13
7582: PPUSH
7583: CALL_OW 88
// if not hasExplosionCollected then
7587: LD_EXP 23
7591: NOT
7592: IFFALSE 7606
// Say ( Heike , DH-Med-d-14 ) ;
7594: LD_EXP 30
7598: PPUSH
7599: LD_STRING DH-Med-d-14
7601: PPUSH
7602: CALL_OW 88
// end ; end ; DialogueOff ;
7606: CALL_OW 7
// adminAreaDiscovered := true ;
7610: LD_ADDR_EXP 22
7614: PUSH
7615: LD_INT 1
7617: ST_TO_ADDR
// end ;
7618: PPOPN 2
7620: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and heikeSquad > 4 and not isAlarm marked gameStartEvent do var hasGivi , hasKaia ;
7621: LD_EXP 33
7625: PUSH
7626: LD_EXP 40
7630: NOT
7631: AND
7632: PUSH
7633: LD_EXP 33
7637: PUSH
7638: LD_EXP 14
7642: IN
7643: NOT
7644: AND
7645: PUSH
7646: LD_EXP 14
7650: PUSH
7651: LD_INT 4
7653: GREATER
7654: AND
7655: PUSH
7656: LD_EXP 17
7660: NOT
7661: AND
7662: IFFALSE 8246
7664: GO 7666
7666: DISABLE
7667: LD_INT 0
7669: PPUSH
7670: PPUSH
// begin DialogueOn ;
7671: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad ;
7675: LD_ADDR_VAR 0 1
7679: PUSH
7680: LD_EXP 31
7684: PPUSH
7685: CALL_OW 302
7689: PUSH
7690: LD_EXP 31
7694: PUSH
7695: LD_EXP 14
7699: IN
7700: AND
7701: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
7702: LD_EXP 30
7706: PPUSH
7707: LD_STRING DH-Med-b-1
7709: PPUSH
7710: CALL_OW 88
// if hasGivi then
7714: LD_VAR 0 1
7718: IFFALSE 7734
// Say ( Givi , DG-Med-a-2 ) else
7720: LD_EXP 31
7724: PPUSH
7725: LD_STRING DG-Med-a-2
7727: PPUSH
7728: CALL_OW 88
7732: GO 7810
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Med-f-2 ) then
7734: LD_EXP 14
7738: PUSH
7739: LD_EXP 41
7743: ISECT
7744: PPUSH
7745: LD_INT 26
7747: PUSH
7748: LD_INT 1
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PPUSH
7755: CALL_OW 72
7759: PUSH
7760: LD_INT 1
7762: ARRAY
7763: PPUSH
7764: LD_STRING DArm-Med-f-2
7766: PPUSH
7767: CALL_OW 88
7771: IFFALSE 7810
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Med-f-2 ) ;
7773: LD_EXP 14
7777: PUSH
7778: LD_EXP 41
7782: ISECT
7783: PPUSH
7784: LD_INT 26
7786: PUSH
7787: LD_INT 2
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PPUSH
7794: CALL_OW 72
7798: PUSH
7799: LD_INT 1
7801: ARRAY
7802: PPUSH
7803: LD_STRING DArf-Med-f-2
7805: PPUSH
7806: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
7810: LD_INT 154
7812: PPUSH
7813: LD_INT 119
7815: PPUSH
7816: LD_INT 70
7818: PPUSH
7819: CALL 13738 0 3
// Say ( Heike , DH-Med-a-3 ) ;
7823: LD_EXP 30
7827: PPUSH
7828: LD_STRING DH-Med-a-3
7830: PPUSH
7831: CALL_OW 88
// if hasGivi then
7835: LD_VAR 0 1
7839: IFFALSE 7855
// Say ( Givi , DG-Med-a-4 ) else
7841: LD_EXP 31
7845: PPUSH
7846: LD_STRING DG-Med-a-4
7848: PPUSH
7849: CALL_OW 88
7853: GO 7931
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Med-f-4 ) then
7855: LD_EXP 14
7859: PUSH
7860: LD_EXP 41
7864: ISECT
7865: PPUSH
7866: LD_INT 26
7868: PUSH
7869: LD_INT 1
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: PPUSH
7876: CALL_OW 72
7880: PUSH
7881: LD_INT 1
7883: ARRAY
7884: PPUSH
7885: LD_STRING DArm-Med-f-4
7887: PPUSH
7888: CALL_OW 88
7892: IFFALSE 7931
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Med-f-4 ) ;
7894: LD_EXP 14
7898: PUSH
7899: LD_EXP 41
7903: ISECT
7904: PPUSH
7905: LD_INT 26
7907: PUSH
7908: LD_INT 2
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PPUSH
7915: CALL_OW 72
7919: PUSH
7920: LD_INT 1
7922: ARRAY
7923: PPUSH
7924: LD_STRING DArf-Med-f-4
7926: PPUSH
7927: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad ;
7931: LD_ADDR_VAR 0 2
7935: PUSH
7936: LD_EXP 35
7940: PPUSH
7941: CALL_OW 302
7945: PUSH
7946: LD_EXP 35
7950: PUSH
7951: LD_EXP 14
7955: IN
7956: AND
7957: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad then
7958: LD_EXP 32
7962: PPUSH
7963: CALL_OW 302
7967: PUSH
7968: LD_EXP 32
7972: PUSH
7973: LD_EXP 14
7977: IN
7978: AND
7979: IFFALSE 8011
// begin Say ( Mike , DM-Med-5 ) ;
7981: LD_EXP 32
7985: PPUSH
7986: LD_STRING DM-Med-5
7988: PPUSH
7989: CALL_OW 88
// if hasKaia then
7993: LD_VAR 0 2
7997: IFFALSE 8011
// Say ( Kaia , DK-Med-6 ) ;
7999: LD_EXP 35
8003: PPUSH
8004: LD_STRING DK-Med-6
8006: PPUSH
8007: CALL_OW 88
// end ; if hasKaia then
8011: LD_VAR 0 2
8015: IFFALSE 8234
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8017: LD_INT 175
8019: PPUSH
8020: LD_INT 123
8022: PPUSH
8023: LD_INT 2
8025: PPUSH
8026: LD_INT 8
8028: NEG
8029: PPUSH
8030: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8034: LD_INT 175
8036: PPUSH
8037: LD_INT 123
8039: PPUSH
8040: LD_INT 2
8042: PPUSH
8043: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8047: LD_INT 175
8049: PPUSH
8050: LD_INT 123
8052: PPUSH
8053: CALL_OW 86
// laundryAllowed := true ;
8057: LD_ADDR_EXP 26
8061: PUSH
8062: LD_INT 1
8064: ST_TO_ADDR
// Say ( Kaia , DK-Med-7 ) ;
8065: LD_EXP 35
8069: PPUSH
8070: LD_STRING DK-Med-7
8072: PPUSH
8073: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8077: LD_EXP 35
8081: PPUSH
8082: LD_STRING DK-Med-8
8084: PPUSH
8085: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad then
8089: LD_EXP 37
8093: PPUSH
8094: CALL_OW 302
8098: PUSH
8099: LD_EXP 37
8103: PUSH
8104: LD_EXP 14
8108: IN
8109: AND
8110: IFFALSE 8168
// begin Say ( Markov , DMar-Med-9 ) ;
8112: LD_EXP 37
8116: PPUSH
8117: LD_STRING DMar-Med-9
8119: PPUSH
8120: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
8124: LD_EXP 35
8128: PPUSH
8129: LD_STRING DK-Med-10
8131: PPUSH
8132: CALL_OW 88
// if hasGivi then
8136: LD_VAR 0 1
8140: IFFALSE 8156
// Say ( Kaia , DK-Med-11 ) else
8142: LD_EXP 35
8146: PPUSH
8147: LD_STRING DK-Med-11
8149: PPUSH
8150: CALL_OW 88
8154: GO 8168
// Say ( Kaia , DK-Med-a-11 ) ;
8156: LD_EXP 35
8160: PPUSH
8161: LD_STRING DK-Med-a-11
8163: PPUSH
8164: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad then
8168: LD_EXP 34
8172: PPUSH
8173: CALL_OW 302
8177: PUSH
8178: LD_EXP 34
8182: PUSH
8183: LD_EXP 14
8187: IN
8188: AND
8189: IFFALSE 8234
// begin Say ( Kamil , DKam-Med-12 ) ;
8191: LD_EXP 34
8195: PPUSH
8196: LD_STRING DKam-Med-12
8198: PPUSH
8199: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
8203: LD_EXP 34
8207: PPUSH
8208: LD_STRING DKam-Med-13
8210: PPUSH
8211: CALL_OW 88
// if not hasExplosionCollected then
8215: LD_EXP 23
8219: NOT
8220: IFFALSE 8234
// Say ( Heike , DH-Med-d-14 ) ;
8222: LD_EXP 30
8226: PPUSH
8227: LD_STRING DH-Med-d-14
8229: PPUSH
8230: CALL_OW 88
// end ; end ; DialogueOff ;
8234: CALL_OW 7
// adminAreaDiscovered := true ;
8238: LD_ADDR_EXP 22
8242: PUSH
8243: LD_INT 1
8245: ST_TO_ADDR
// end ;
8246: PPOPN 2
8248: END
// every 0 0$1 trigger laundryAllowed do
8249: LD_EXP 26
8253: IFFALSE 8265
8255: GO 8257
8257: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
8258: LD_STRING M1-laundry
8260: PPUSH
8261: CALL_OW 337
8265: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and not isAlarm marked gameStartEvent do
8266: LD_EXP 33
8270: NOT
8271: PUSH
8272: LD_EXP 40
8276: NOT
8277: AND
8278: PUSH
8279: LD_EXP 38
8283: PPUSH
8284: CALL_OW 302
8288: AND
8289: PUSH
8290: LD_EXP 38
8294: PUSH
8295: LD_EXP 14
8299: IN
8300: AND
8301: PUSH
8302: LD_EXP 17
8306: NOT
8307: AND
8308: IFFALSE 8449
8310: GO 8312
8312: DISABLE
// begin DialogueOn ;
8313: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
8317: LD_INT 152
8319: PPUSH
8320: LD_INT 115
8322: PPUSH
8323: LD_INT 2
8325: PPUSH
8326: LD_INT 16
8328: NEG
8329: PPUSH
8330: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
8334: LD_INT 152
8336: PPUSH
8337: LD_INT 115
8339: PPUSH
8340: LD_INT 2
8342: PPUSH
8343: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
8347: LD_INT 152
8349: PPUSH
8350: LD_INT 115
8352: PPUSH
8353: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
8357: LD_EXP 38
8361: PPUSH
8362: LD_STRING DO-Med-c-1
8364: PPUSH
8365: CALL_OW 88
// if not hasExplosionCollected then
8369: LD_EXP 23
8373: NOT
8374: IFFALSE 8390
// Say ( Heike , DH-Med-d-14 ) else
8376: LD_EXP 30
8380: PPUSH
8381: LD_STRING DH-Med-d-14
8383: PPUSH
8384: CALL_OW 88
8388: GO 8437
// begin Say ( Heike , DH-Med-c-2 ) ;
8390: LD_EXP 30
8394: PPUSH
8395: LD_STRING DH-Med-c-2
8397: PPUSH
8398: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad then
8402: LD_EXP 35
8406: PPUSH
8407: CALL_OW 302
8411: PUSH
8412: LD_EXP 35
8416: PUSH
8417: LD_EXP 14
8421: IN
8422: AND
8423: IFFALSE 8437
// Say ( Kaia , DK-Med-c-3 ) ;
8425: LD_EXP 35
8429: PPUSH
8430: LD_STRING DK-Med-c-3
8432: PPUSH
8433: CALL_OW 88
// end ; DialogueOff ;
8437: CALL_OW 7
// adminAreaDiscovered := true ;
8441: LD_ADDR_EXP 22
8445: PUSH
8446: LD_INT 1
8448: ST_TO_ADDR
// end ;
8449: END
// every 0 0$1 trigger IsDying ( Kaia ) and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
8450: LD_EXP 35
8454: PPUSH
8455: CALL_OW 303
8459: PUSH
8460: LD_EXP 35
8464: PUSH
8465: LD_EXP 14
8469: IN
8470: AND
8471: PUSH
8472: LD_EXP 17
8476: AND
8477: PUSH
8478: LD_EXP 24
8482: AND
8483: IFFALSE 8612
8485: GO 8487
8487: DISABLE
// begin DialogueOn ;
8488: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
8492: LD_EXP 35
8496: PPUSH
8497: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
8501: LD_EXP 35
8505: PPUSH
8506: LD_STRING DK-death-1
8508: PPUSH
8509: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
8513: LD_EXP 30
8517: PPUSH
8518: LD_STRING DH-death-2
8520: PPUSH
8521: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
8525: LD_EXP 35
8529: PPUSH
8530: LD_STRING DK-death-3
8532: PPUSH
8533: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
8537: LD_EXP 35
8541: PPUSH
8542: LD_STRING DK-death-4
8544: PPUSH
8545: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
8549: LD_EXP 35
8553: PPUSH
8554: LD_INT 8
8556: PPUSH
8557: CALL_OW 235
// ComStop ( Kaia ) ;
8561: LD_EXP 35
8565: PPUSH
8566: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
8570: LD_INT 8
8572: PPUSH
8573: LD_INT 2
8575: PPUSH
8576: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
8580: LD_ADDR_EXP 14
8584: PUSH
8585: LD_EXP 14
8589: PUSH
8590: LD_EXP 35
8594: DIFF
8595: ST_TO_ADDR
// DialogueOff ;
8596: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
8600: LD_EXP 32
8604: PPUSH
8605: LD_STRING DM-death-5
8607: PPUSH
8608: CALL_OW 88
// end ;
8612: END
// every 0 0$2 trigger not contactWithAmerican and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
8613: LD_EXP 25
8617: NOT
8618: PUSH
8619: LD_EXP 43
8623: PUSH
8624: LD_EXP 14
8628: IN
8629: NOT
8630: AND
8631: PUSH
8632: LD_INT 2
8634: PPUSH
8635: LD_EXP 43
8639: PPUSH
8640: CALL_OW 292
8644: AND
8645: PUSH
8646: LD_EXP 30
8650: PPUSH
8651: LD_EXP 43
8655: PPUSH
8656: CALL_OW 296
8660: PUSH
8661: LD_INT 6
8663: LESS
8664: AND
8665: PUSH
8666: LD_EXP 17
8670: NOT
8671: AND
8672: IFFALSE 8896
8674: GO 8676
8676: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
8677: LD_EXP 43
8681: PPUSH
8682: LD_EXP 30
8686: PPUSH
8687: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
8691: LD_EXP 30
8695: PPUSH
8696: LD_EXP 43
8700: PPUSH
8701: CALL_OW 119
// wait ( 0 0$0.3 ) ;
8705: LD_INT 10
8707: PPUSH
8708: CALL_OW 67
// DialogueOn ;
8712: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
8716: LD_EXP 43
8720: PPUSH
8721: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
8725: LD_EXP 30
8729: PPUSH
8730: LD_STRING DH-Deal-1
8732: PPUSH
8733: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
8737: LD_EXP 43
8741: PPUSH
8742: LD_STRING DJ-Deal-2
8744: PPUSH
8745: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
8749: LD_EXP 30
8753: PPUSH
8754: LD_STRING DH-Deal-3
8756: PPUSH
8757: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
8761: LD_EXP 43
8765: PPUSH
8766: LD_STRING DJ-Deal-4
8768: PPUSH
8769: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
8773: LD_EXP 43
8777: PPUSH
8778: LD_STRING DJ-Deal-5
8780: PPUSH
8781: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
8785: LD_EXP 43
8789: PPUSH
8790: LD_STRING DJ-Deal-6
8792: PPUSH
8793: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
8797: LD_EXP 43
8801: PPUSH
8802: LD_STRING DJ-Deal-7
8804: PPUSH
8805: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
8809: LD_EXP 30
8813: PPUSH
8814: LD_STRING DH-Deal-8
8816: PPUSH
8817: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
8821: LD_EXP 30
8825: PPUSH
8826: LD_STRING DH-Deal-9
8828: PPUSH
8829: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
8833: LD_EXP 43
8837: PPUSH
8838: LD_STRING DJ-Deal-10
8840: PPUSH
8841: CALL_OW 88
// DialogueOff ;
8845: CALL_OW 7
// contactWithAmerican := true ;
8849: LD_ADDR_EXP 25
8853: PUSH
8854: LD_INT 1
8856: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
8857: LD_STRING M1-american-out
8859: PPUSH
8860: CALL_OW 604
// SetSide ( Harris , 2 ) ;
8864: LD_EXP 43
8868: PPUSH
8869: LD_INT 2
8871: PPUSH
8872: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
8876: LD_ADDR_EXP 14
8880: PUSH
8881: LD_EXP 14
8885: PPUSH
8886: LD_EXP 43
8890: PPUSH
8891: CALL 51783 0 2
8895: ST_TO_ADDR
// end ;
8896: END
// every 0 0$2 trigger contactWithAmerican and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
8897: LD_EXP 25
8901: PUSH
8902: LD_EXP 43
8906: PUSH
8907: LD_EXP 14
8911: IN
8912: NOT
8913: AND
8914: PUSH
8915: LD_INT 2
8917: PPUSH
8918: LD_EXP 43
8922: PPUSH
8923: CALL_OW 292
8927: AND
8928: PUSH
8929: LD_EXP 30
8933: PPUSH
8934: LD_EXP 43
8938: PPUSH
8939: CALL_OW 296
8943: PUSH
8944: LD_INT 6
8946: LESS
8947: AND
8948: PUSH
8949: LD_EXP 17
8953: NOT
8954: AND
8955: IFFALSE 9080
8957: GO 8959
8959: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
8960: LD_EXP 43
8964: PPUSH
8965: LD_EXP 30
8969: PPUSH
8970: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
8974: LD_EXP 30
8978: PPUSH
8979: LD_EXP 43
8983: PPUSH
8984: CALL_OW 119
// wait ( 0 0$0.3 ) ;
8988: LD_INT 10
8990: PPUSH
8991: CALL_OW 67
// DialogueOn ;
8995: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
8999: LD_EXP 43
9003: PPUSH
9004: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
9008: LD_EXP 43
9012: PPUSH
9013: LD_STRING DJ-Escort-1
9015: PPUSH
9016: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
9020: LD_EXP 30
9024: PPUSH
9025: LD_STRING DH-Escort-2
9027: PPUSH
9028: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
9032: LD_EXP 43
9036: PPUSH
9037: LD_STRING DJ-Escort-3
9039: PPUSH
9040: CALL_OW 88
// DialogueOff ;
9044: CALL_OW 7
// SetSide ( Harris , 2 ) ;
9048: LD_EXP 43
9052: PPUSH
9053: LD_INT 2
9055: PPUSH
9056: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
9060: LD_ADDR_EXP 14
9064: PUSH
9065: LD_EXP 14
9069: PPUSH
9070: LD_EXP 43
9074: PPUSH
9075: CALL 51783 0 2
9079: ST_TO_ADDR
// end ;
9080: END
// every 0 0$2 trigger contactWithAmerican and UnitFilter ( americanSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
9081: LD_EXP 25
9085: PUSH
9086: LD_EXP 42
9090: PUSH
9091: LD_EXP 14
9095: DIFF
9096: PPUSH
9097: LD_INT 3
9099: PUSH
9100: LD_INT 120
9102: PUSH
9103: LD_INT 1
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PUSH
9114: LD_INT 101
9116: PUSH
9117: LD_INT 2
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PPUSH
9128: CALL_OW 72
9132: AND
9133: PUSH
9134: LD_EXP 17
9138: NOT
9139: AND
9140: IFFALSE 9324
9142: GO 9144
9144: DISABLE
9145: LD_INT 0
9147: PPUSH
// begin enable ;
9148: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ f_see , 2 ] ) , Heike ) ;
9149: LD_ADDR_VAR 0 1
9153: PUSH
9154: LD_EXP 42
9158: PUSH
9159: LD_EXP 14
9163: DIFF
9164: PPUSH
9165: LD_INT 101
9167: PUSH
9168: LD_INT 2
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PPUSH
9175: CALL_OW 72
9179: PPUSH
9180: LD_EXP 30
9184: PPUSH
9185: CALL_OW 74
9189: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
9190: LD_VAR 0 1
9194: PPUSH
9195: LD_EXP 30
9199: PPUSH
9200: CALL_OW 296
9204: PUSH
9205: LD_INT 6
9207: LESS
9208: IFFALSE 9324
// begin DialogueOn ;
9210: CALL_OW 6
// CenterNowOnUnits ( un ) ;
9214: LD_VAR 0 1
9218: PPUSH
9219: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
9223: LD_EXP 30
9227: PPUSH
9228: LD_STRING DH-USsol-1
9230: PPUSH
9231: CALL_OW 88
// if GetSex ( un ) = sex_male then
9235: LD_VAR 0 1
9239: PPUSH
9240: CALL_OW 258
9244: PUSH
9245: LD_INT 1
9247: EQUAL
9248: IFFALSE 9264
// Say ( un , DUSM-USsol-2 ) else
9250: LD_VAR 0 1
9254: PPUSH
9255: LD_STRING DUSM-USsol-2
9257: PPUSH
9258: CALL_OW 88
9262: GO 9276
// Say ( un , DUSF-USsol-2 ) ;
9264: LD_VAR 0 1
9268: PPUSH
9269: LD_STRING DUSF-USsol-2
9271: PPUSH
9272: CALL_OW 88
// DialogueOff ;
9276: CALL_OW 7
// un := Join ( heikeSquad , un ) ;
9280: LD_ADDR_VAR 0 1
9284: PUSH
9285: LD_EXP 14
9289: PPUSH
9290: LD_VAR 0 1
9294: PPUSH
9295: CALL 51783 0 2
9299: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
9300: LD_VAR 0 1
9304: PPUSH
9305: LD_INT 1
9307: PPUSH
9308: CALL_OW 109
// SetSide ( un , 2 ) ;
9312: LD_VAR 0 1
9316: PPUSH
9317: LD_INT 2
9319: PPUSH
9320: CALL_OW 235
// end ; end ;
9324: PPOPN 1
9326: END
// every 0 0$2 trigger heikeSecondSquad and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
9327: LD_EXP 41
9331: PUSH
9332: LD_EXP 41
9336: PUSH
9337: LD_EXP 14
9341: DIFF
9342: PPUSH
9343: LD_INT 3
9345: PUSH
9346: LD_INT 120
9348: PUSH
9349: LD_INT 1
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: PUSH
9360: LD_INT 101
9362: PUSH
9363: LD_INT 2
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PPUSH
9374: CALL_OW 72
9378: AND
9379: PUSH
9380: LD_EXP 17
9384: NOT
9385: AND
9386: IFFALSE 9570
9388: GO 9390
9390: DISABLE
9391: LD_INT 0
9393: PPUSH
// begin enable ;
9394: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ f_see , 2 ] ) , Heike ) ;
9395: LD_ADDR_VAR 0 1
9399: PUSH
9400: LD_EXP 41
9404: PUSH
9405: LD_EXP 14
9409: DIFF
9410: PPUSH
9411: LD_INT 101
9413: PUSH
9414: LD_INT 2
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PPUSH
9421: CALL_OW 72
9425: PPUSH
9426: LD_EXP 30
9430: PPUSH
9431: CALL_OW 74
9435: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
9436: LD_VAR 0 1
9440: PPUSH
9441: LD_EXP 30
9445: PPUSH
9446: CALL_OW 296
9450: PUSH
9451: LD_INT 6
9453: LESS
9454: IFFALSE 9570
// begin DialogueOn ;
9456: CALL_OW 6
// CenterNowOnUnits ( un ) ;
9460: LD_VAR 0 1
9464: PPUSH
9465: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
9469: LD_EXP 30
9473: PPUSH
9474: LD_STRING DH-USsol-1
9476: PPUSH
9477: CALL_OW 88
// if GetSex ( un ) = sex_male then
9481: LD_VAR 0 1
9485: PPUSH
9486: CALL_OW 258
9490: PUSH
9491: LD_INT 1
9493: EQUAL
9494: IFFALSE 9510
// Say ( un , DArm-USsol-2 ) else
9496: LD_VAR 0 1
9500: PPUSH
9501: LD_STRING DArm-USsol-2
9503: PPUSH
9504: CALL_OW 88
9508: GO 9522
// Say ( un , DArf-USsol-3 ) ;
9510: LD_VAR 0 1
9514: PPUSH
9515: LD_STRING DArf-USsol-3
9517: PPUSH
9518: CALL_OW 88
// DialogueOff ;
9522: CALL_OW 7
// un := Join ( heikeSquad , un ) ;
9526: LD_ADDR_VAR 0 1
9530: PUSH
9531: LD_EXP 14
9535: PPUSH
9536: LD_VAR 0 1
9540: PPUSH
9541: CALL 51783 0 2
9545: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
9546: LD_VAR 0 1
9550: PPUSH
9551: LD_INT 1
9553: PPUSH
9554: CALL_OW 109
// SetSide ( un , 2 ) ;
9558: LD_VAR 0 1
9562: PPUSH
9563: LD_INT 2
9565: PPUSH
9566: CALL_OW 235
// end ; end ;
9570: PPOPN 1
9572: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and heikeSquad > 5 and not americanContact and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
9573: LD_EXP 42
9577: PPUSH
9578: LD_INT 101
9580: PUSH
9581: LD_INT 2
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PPUSH
9588: CALL_OW 72
9592: PUSH
9593: LD_EXP 14
9597: PUSH
9598: LD_INT 5
9600: GREATER
9601: AND
9602: PUSH
9603: LD_EXP 10
9607: NOT
9608: AND
9609: PUSH
9610: LD_EXP 25
9614: NOT
9615: AND
9616: PUSH
9617: LD_EXP 17
9621: NOT
9622: AND
9623: IFFALSE 9724
9625: GO 9627
9627: DISABLE
9628: LD_INT 0
9630: PPUSH
// begin un := UnitFilter ( americanSquad , [ f_see , 2 ] ) [ 1 ] ;
9631: LD_ADDR_VAR 0 1
9635: PUSH
9636: LD_EXP 42
9640: PPUSH
9641: LD_INT 101
9643: PUSH
9644: LD_INT 2
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PPUSH
9651: CALL_OW 72
9655: PUSH
9656: LD_INT 1
9658: ARRAY
9659: ST_TO_ADDR
// DialogueOn ;
9660: CALL_OW 6
// if GetSex ( un ) = sex_male then
9664: LD_VAR 0 1
9668: PPUSH
9669: CALL_OW 258
9673: PUSH
9674: LD_INT 1
9676: EQUAL
9677: IFFALSE 9693
// Say ( un , DUSm-USsol-a-2 ) else
9679: LD_VAR 0 1
9683: PPUSH
9684: LD_STRING DUSm-USsol-a-2
9686: PPUSH
9687: CALL_OW 88
9691: GO 9705
// Say ( un , DUSf-USsol-a-2 ) ;
9693: LD_VAR 0 1
9697: PPUSH
9698: LD_STRING DUSf-USsol-a-2
9700: PPUSH
9701: CALL_OW 88
// DialogueOff ;
9705: CALL_OW 7
// wait ( 0 0$2 ) ;
9709: LD_INT 70
9711: PPUSH
9712: CALL_OW 67
// isAlarm := true ;
9716: LD_ADDR_EXP 17
9720: PUSH
9721: LD_INT 1
9723: ST_TO_ADDR
// end ;
9724: PPOPN 1
9726: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and laundryAllowed and not giviAsRussian and not heikeAsRussian and InEntrance ( Givi , laundry ) marked gameStartEvent do
9727: LD_EXP 17
9731: NOT
9732: PUSH
9733: LD_EXP 31
9737: PPUSH
9738: CALL_OW 302
9742: AND
9743: PUSH
9744: LD_EXP 26
9748: AND
9749: PUSH
9750: LD_EXP 28
9754: NOT
9755: AND
9756: PUSH
9757: LD_EXP 27
9761: NOT
9762: AND
9763: PUSH
9764: LD_EXP 31
9768: PPUSH
9769: LD_INT 165
9771: PPUSH
9772: CALL 13777 0 2
9776: AND
9777: IFFALSE 9909
9779: GO 9781
9781: DISABLE
// begin enable ;
9782: ENABLE
// InGameOn ;
9783: CALL_OW 8
// SetSide ( Givi , 5 ) ;
9787: LD_EXP 31
9791: PPUSH
9792: LD_INT 5
9794: PPUSH
9795: CALL_OW 235
// SetSide ( laundry , 5 ) ;
9799: LD_INT 165
9801: PPUSH
9802: LD_INT 5
9804: PPUSH
9805: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
9809: LD_EXP 31
9813: PPUSH
9814: LD_INT 165
9816: PPUSH
9817: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
9821: LD_INT 35
9823: PPUSH
9824: CALL_OW 67
// until IsInUnit ( Givi ) ;
9828: LD_EXP 31
9832: PPUSH
9833: CALL_OW 310
9837: IFFALSE 9821
// case Query ( HeikeInLaundry ) of 1 :
9839: LD_STRING HeikeInLaundry
9841: PPUSH
9842: CALL_OW 97
9846: PUSH
9847: LD_INT 1
9849: DOUBLE
9850: EQUAL
9851: IFTRUE 9855
9853: GO 9862
9855: POP
// SpawnGiviAsRussian ; 2 :
9856: CALL 1501 0 0
9860: GO 9874
9862: LD_INT 2
9864: DOUBLE
9865: EQUAL
9866: IFTRUE 9870
9868: GO 9873
9870: POP
// ; end ;
9871: GO 9874
9873: POP
// ComExitBuilding ( Givi ) ;
9874: LD_EXP 31
9878: PPUSH
9879: CALL_OW 122
// SetSide ( Givi , 2 ) ;
9883: LD_EXP 31
9887: PPUSH
9888: LD_INT 2
9890: PPUSH
9891: CALL_OW 235
// SetSide ( laundry , 3 ) ;
9895: LD_INT 165
9897: PPUSH
9898: LD_INT 3
9900: PPUSH
9901: CALL_OW 235
// InGameOff ;
9905: CALL_OW 9
// end ;
9909: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) do
9910: LD_EXP 17
9914: NOT
9915: PUSH
9916: LD_EXP 28
9920: AND
9921: PUSH
9922: LD_EXP 31
9926: PPUSH
9927: CALL_OW 248
9931: PUSH
9932: LD_INT 3
9934: EQUAL
9935: AND
9936: PUSH
9937: LD_EXP 31
9941: PPUSH
9942: LD_INT 119
9944: PPUSH
9945: CALL 13777 0 2
9949: AND
9950: IFFALSE 10138
9952: GO 9954
9954: DISABLE
// begin InGameOn ;
9955: CALL_OW 8
// wait ( 0 0$1 ) ;
9959: LD_INT 35
9961: PPUSH
9962: CALL_OW 67
// DialogueOn ;
9966: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
9970: LD_EXP 31
9974: PPUSH
9975: LD_STRING DG-Captive-1
9977: PPUSH
9978: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
9982: LD_EXP 48
9986: PPUSH
9987: LD_STRING DCom-Captive-2
9989: PPUSH
9990: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
9994: LD_EXP 31
9998: PPUSH
9999: LD_STRING DG-Captive-3
10001: PPUSH
10002: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
10006: LD_EXP 48
10010: PPUSH
10011: LD_STRING DCom-Captive-4
10013: PPUSH
10014: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
10018: LD_EXP 48
10022: PPUSH
10023: CALL_OW 64
// DialogueOff ;
10027: CALL_OW 7
// InGameOff ;
10031: CALL_OW 9
// ComExitBuilding ( Givi ) ;
10035: LD_EXP 31
10039: PPUSH
10040: CALL_OW 122
// if Aviradze then
10044: LD_EXP 40
10048: IFFALSE 10091
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
10050: LD_ADDR_EXP 14
10054: PUSH
10055: LD_EXP 14
10059: PPUSH
10060: LD_EXP 40
10064: PPUSH
10065: CALL 51783 0 2
10069: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
10070: LD_EXP 40
10074: PPUSH
10075: LD_INT 2
10077: PPUSH
10078: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
10082: LD_EXP 40
10086: PPUSH
10087: CALL_OW 122
// end ; if Ibrahim then
10091: LD_EXP 33
10095: IFFALSE 10138
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
10097: LD_ADDR_EXP 14
10101: PUSH
10102: LD_EXP 14
10106: PPUSH
10107: LD_EXP 33
10111: PPUSH
10112: CALL 51783 0 2
10116: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
10117: LD_EXP 33
10121: PPUSH
10122: LD_INT 2
10124: PPUSH
10125: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
10129: LD_EXP 33
10133: PPUSH
10134: CALL_OW 122
// end ; end ;
10138: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) do
10139: LD_EXP 17
10143: NOT
10144: PUSH
10145: LD_EXP 27
10149: AND
10150: PUSH
10151: LD_EXP 30
10155: PPUSH
10156: CALL_OW 248
10160: PUSH
10161: LD_INT 3
10163: EQUAL
10164: AND
10165: PUSH
10166: LD_EXP 30
10170: PPUSH
10171: LD_INT 119
10173: PPUSH
10174: CALL 13777 0 2
10178: AND
10179: IFFALSE 10417
10181: GO 10183
10183: DISABLE
// begin InGameOn ;
10184: CALL_OW 8
// wait ( 0 0$1 ) ;
10188: LD_INT 35
10190: PPUSH
10191: CALL_OW 67
// DialogueOn ;
10195: CALL_OW 6
// if Aviradze and Ibrahim then
10199: LD_EXP 40
10203: PUSH
10204: LD_EXP 33
10208: AND
10209: IFFALSE 10225
// Say ( Heike , DH-Captive-a-1 ) else
10211: LD_EXP 30
10215: PPUSH
10216: LD_STRING DH-Captive-a-1
10218: PPUSH
10219: CALL_OW 88
10223: GO 10237
// Say ( Heike , DH-Captive-a-b-1 ) ;
10225: LD_EXP 30
10229: PPUSH
10230: LD_STRING DH-Captive-a-b-1
10232: PPUSH
10233: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
10237: LD_EXP 48
10241: PPUSH
10242: LD_STRING DCom-Captive-a-2
10244: PPUSH
10245: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
10249: LD_EXP 30
10253: PPUSH
10254: LD_STRING DH-Captive-a-3
10256: PPUSH
10257: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
10261: LD_EXP 48
10265: PPUSH
10266: LD_STRING DCom-Captive-a-4
10268: PPUSH
10269: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
10273: LD_EXP 30
10277: PPUSH
10278: LD_STRING DH-Captive-a-5
10280: PPUSH
10281: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-6 ) ;
10285: LD_EXP 48
10289: PPUSH
10290: LD_STRING DCom-Captive-a-6
10292: PPUSH
10293: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
10297: LD_EXP 48
10301: PPUSH
10302: CALL_OW 64
// DialogueOff ;
10306: CALL_OW 7
// InGameOff ;
10310: CALL_OW 9
// ComExitBuilding ( Heike ) ;
10314: LD_EXP 30
10318: PPUSH
10319: CALL_OW 122
// if Aviradze then
10323: LD_EXP 40
10327: IFFALSE 10370
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
10329: LD_ADDR_EXP 14
10333: PUSH
10334: LD_EXP 14
10338: PPUSH
10339: LD_EXP 40
10343: PPUSH
10344: CALL 51783 0 2
10348: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
10349: LD_EXP 40
10353: PPUSH
10354: LD_INT 2
10356: PPUSH
10357: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
10361: LD_EXP 40
10365: PPUSH
10366: CALL_OW 122
// end ; if Ibrahim then
10370: LD_EXP 33
10374: IFFALSE 10417
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
10376: LD_ADDR_EXP 14
10380: PUSH
10381: LD_EXP 14
10385: PPUSH
10386: LD_EXP 33
10390: PPUSH
10391: CALL 51783 0 2
10395: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
10396: LD_EXP 33
10400: PPUSH
10401: LD_INT 2
10403: PPUSH
10404: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
10408: LD_EXP 33
10412: PPUSH
10413: CALL_OW 122
// end ; end ;
10417: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
10418: LD_INT 2
10420: PUSH
10421: LD_INT 25
10423: PUSH
10424: LD_INT 32
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 25
10433: PUSH
10434: LD_INT 34
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: LIST
10445: PPUSH
10446: CALL_OW 69
10450: IFFALSE 10462
10452: GO 10454
10454: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
10455: LD_STRING M1-weapons-out
10457: PPUSH
10458: CALL_OW 604
10462: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ f_inarea , baseOutsideBorderArea ] ) and IsOk ( Heike ) marked gameStartEvent do var i , j , x , y ;
10463: LD_EXP 14
10467: PPUSH
10468: LD_INT 95
10470: PUSH
10471: LD_INT 24
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PPUSH
10478: CALL_OW 72
10482: PUSH
10483: LD_EXP 30
10487: PPUSH
10488: CALL_OW 302
10492: AND
10493: IFFALSE 10665
10495: GO 10497
10497: DISABLE
10498: LD_INT 0
10500: PPUSH
10501: PPUSH
10502: PPUSH
10503: PPUSH
// begin Say ( Heike , DH-End-1 ) ;
10504: LD_EXP 30
10508: PPUSH
10509: LD_STRING DH-End-1
10511: PPUSH
10512: CALL_OW 88
// if explosivePlantedList then
10516: LD_EXP 29
10520: IFFALSE 10650
// begin for i in explosivePlantedList do
10522: LD_ADDR_VAR 0 1
10526: PUSH
10527: LD_EXP 29
10531: PUSH
10532: FOR_IN
10533: IFFALSE 10636
// begin x := GetX ( i ) ;
10535: LD_ADDR_VAR 0 3
10539: PUSH
10540: LD_VAR 0 1
10544: PPUSH
10545: CALL_OW 250
10549: ST_TO_ADDR
// y := GetY ( i ) ;
10550: LD_ADDR_VAR 0 4
10554: PUSH
10555: LD_VAR 0 1
10559: PPUSH
10560: CALL_OW 251
10564: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
10565: LD_ADDR_VAR 0 2
10569: PUSH
10570: LD_INT 1
10572: PUSH
10573: LD_INT 3
10575: PUSH
10576: LD_INT 5
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: LIST
10583: PUSH
10584: FOR_IN
10585: IFFALSE 10632
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
10587: LD_VAR 0 3
10591: PPUSH
10592: LD_VAR 0 2
10596: PPUSH
10597: LD_INT 2
10599: PPUSH
10600: CALL_OW 272
10604: PPUSH
10605: LD_VAR 0 4
10609: PPUSH
10610: LD_VAR 0 2
10614: PPUSH
10615: LD_INT 2
10617: PPUSH
10618: CALL_OW 273
10622: PPUSH
10623: LD_INT 1
10625: PPUSH
10626: CALL_OW 453
10630: GO 10584
10632: POP
10633: POP
// end ;
10634: GO 10532
10636: POP
10637: POP
// Say ( Heike , DH-End-2 ) ;
10638: LD_EXP 30
10642: PPUSH
10643: LD_STRING DH-End-2
10645: PPUSH
10646: CALL_OW 88
// end ; if not isAlarm then
10650: LD_EXP 17
10654: NOT
10655: IFFALSE 10665
// isAlarm := true ;
10657: LD_ADDR_EXP 17
10661: PUSH
10662: LD_INT 1
10664: ST_TO_ADDR
// end ;
10665: PPOPN 4
10667: END
// function SayHEmpty ( ) ; begin
10668: LD_INT 0
10670: PPUSH
// case rand ( 1 , 3 ) of 1 :
10671: LD_INT 1
10673: PPUSH
10674: LD_INT 3
10676: PPUSH
10677: CALL_OW 12
10681: PUSH
10682: LD_INT 1
10684: DOUBLE
10685: EQUAL
10686: IFTRUE 10690
10688: GO 10705
10690: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
10691: LD_EXP 30
10695: PPUSH
10696: LD_STRING DH-Empty-1
10698: PPUSH
10699: CALL_OW 88
10703: GO 10752
10705: LD_INT 2
10707: DOUBLE
10708: EQUAL
10709: IFTRUE 10713
10711: GO 10728
10713: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
10714: LD_EXP 30
10718: PPUSH
10719: LD_STRING DH-Empty-2
10721: PPUSH
10722: CALL_OW 88
10726: GO 10752
10728: LD_INT 3
10730: DOUBLE
10731: EQUAL
10732: IFTRUE 10736
10734: GO 10751
10736: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
10737: LD_EXP 30
10741: PPUSH
10742: LD_STRING DH-Empty-3
10744: PPUSH
10745: CALL_OW 88
10749: GO 10752
10751: POP
// end ;
10752: LD_VAR 0 1
10756: RET
// function SayHVisited ( ) ; begin
10757: LD_INT 0
10759: PPUSH
// case rand ( 1 , 3 ) of 1 :
10760: LD_INT 1
10762: PPUSH
10763: LD_INT 3
10765: PPUSH
10766: CALL_OW 12
10770: PUSH
10771: LD_INT 1
10773: DOUBLE
10774: EQUAL
10775: IFTRUE 10779
10777: GO 10794
10779: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
10780: LD_EXP 30
10784: PPUSH
10785: LD_STRING DH-Visited-1
10787: PPUSH
10788: CALL_OW 88
10792: GO 10841
10794: LD_INT 2
10796: DOUBLE
10797: EQUAL
10798: IFTRUE 10802
10800: GO 10817
10802: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
10803: LD_EXP 30
10807: PPUSH
10808: LD_STRING DH-Visited-2
10810: PPUSH
10811: CALL_OW 88
10815: GO 10841
10817: LD_INT 3
10819: DOUBLE
10820: EQUAL
10821: IFTRUE 10825
10823: GO 10840
10825: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
10826: LD_EXP 30
10830: PPUSH
10831: LD_STRING DH-Visited-3
10833: PPUSH
10834: CALL_OW 88
10838: GO 10841
10840: POP
// end ;
10841: LD_VAR 0 1
10845: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and IsOk ( Heike ) and IsIdle ( Heike ) marked entranceEvent do var i ;
10846: LD_EXP 17
10850: NOT
10851: PUSH
10852: LD_EXP 15
10856: AND
10857: PUSH
10858: LD_EXP 30
10862: PPUSH
10863: CALL_OW 302
10867: AND
10868: PUSH
10869: LD_EXP 30
10873: PPUSH
10874: CALL_OW 316
10878: AND
10879: IFFALSE 10945
10881: GO 10883
10883: DISABLE
10884: LD_INT 0
10886: PPUSH
// begin enable ;
10887: ENABLE
// for i in entranceAllowedList do
10888: LD_ADDR_VAR 0 1
10892: PUSH
10893: LD_EXP 15
10897: PUSH
10898: FOR_IN
10899: IFFALSE 10943
// if InEntrance ( Heike , i ) then
10901: LD_EXP 30
10905: PPUSH
10906: LD_VAR 0 1
10910: PPUSH
10911: CALL 13777 0 2
10915: IFFALSE 10941
// begin disable ( entranceEvent ) ;
10917: LD_INT 1
10919: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
10920: LD_VAR 0 1
10924: PPUSH
10925: CALL 10948 0 1
// wait ( 0 0$3 ) ;
10929: LD_INT 105
10931: PPUSH
10932: CALL_OW 67
// enable ( entranceEvent ) ;
10936: LD_INT 1
10938: ENABLE_MARKED
// break ;
10939: GO 10943
// end ;
10941: GO 10898
10943: POP
10944: POP
// end ;
10945: PPOPN 1
10947: END
// function HeikeEnterBuilding ( building ) ; var tmp ; begin
10948: LD_INT 0
10950: PPUSH
10951: PPUSH
// if not building then
10952: LD_VAR 0 1
10956: NOT
10957: IFFALSE 10961
// exit ;
10959: GO 13511
// if building in entranceVisitedList then
10961: LD_VAR 0 1
10965: PUSH
10966: LD_EXP 16
10970: IN
10971: IFFALSE 10979
// begin SayHVisited ( ) ;
10973: CALL 10757 0 0
// exit ;
10977: GO 13511
// end ; case Query ( EnterBuilding ) of 1 :
10979: LD_STRING EnterBuilding
10981: PPUSH
10982: CALL_OW 97
10986: PUSH
10987: LD_INT 1
10989: DOUBLE
10990: EQUAL
10991: IFTRUE 10995
10993: GO 10998
10995: POP
// ; 2 :
10996: GO 11012
10998: LD_INT 2
11000: DOUBLE
11001: EQUAL
11002: IFTRUE 11006
11004: GO 11011
11006: POP
// exit ; end ;
11007: GO 13511
11009: GO 11012
11011: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
11012: LD_ADDR_EXP 16
11016: PUSH
11017: LD_EXP 16
11021: PPUSH
11022: LD_VAR 0 1
11026: PPUSH
11027: CALL 51783 0 2
11031: ST_TO_ADDR
// InGameOn ;
11032: CALL_OW 8
// SetSide ( Heike , 5 ) ;
11036: LD_EXP 30
11040: PPUSH
11041: LD_INT 5
11043: PPUSH
11044: CALL_OW 235
// SetSide ( building , 5 ) ;
11048: LD_VAR 0 1
11052: PPUSH
11053: LD_INT 5
11055: PPUSH
11056: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
11060: LD_EXP 30
11064: PPUSH
11065: LD_VAR 0 1
11069: PPUSH
11070: CALL_OW 120
// wait ( 0 0$3 ) ;
11074: LD_INT 105
11076: PPUSH
11077: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar , barExplosion ] ;
11081: LD_ADDR_VAR 0 3
11085: PUSH
11086: LD_INT 165
11088: PUSH
11089: LD_INT 106
11091: PUSH
11092: LD_INT 135
11094: PUSH
11095: LD_INT 162
11097: PUSH
11098: LD_INT 61
11100: PUSH
11101: LD_INT 109
11103: PUSH
11104: LD_INT 169
11106: PUSH
11107: LD_INT 13
11109: PUSH
11110: LD_INT 147
11112: PUSH
11113: LD_INT 137
11115: PUSH
11116: LD_INT 73
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: ST_TO_ADDR
// if not building in tmp then
11132: LD_VAR 0 1
11136: PUSH
11137: LD_VAR 0 3
11141: IN
11142: NOT
11143: IFFALSE 11151
// SayHEmpty ( ) else
11145: CALL 10668 0 0
11149: GO 13474
// case building of laundry :
11151: LD_VAR 0 1
11155: PUSH
11156: LD_INT 165
11158: DOUBLE
11159: EQUAL
11160: IFTRUE 11164
11162: GO 11252
11164: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
11165: LD_EXP 26
11169: PUSH
11170: LD_EXP 27
11174: NOT
11175: AND
11176: PUSH
11177: LD_EXP 28
11181: NOT
11182: AND
11183: IFFALSE 11238
// begin case Query ( HeikeInLaundry ) of 1 :
11185: LD_STRING HeikeInLaundry
11187: PPUSH
11188: CALL_OW 97
11192: PUSH
11193: LD_INT 1
11195: DOUBLE
11196: EQUAL
11197: IFTRUE 11201
11199: GO 11208
11201: POP
// SpawnHeikeAsRussian ; 2 :
11202: CALL 1412 0 0
11206: GO 11236
11208: LD_INT 2
11210: DOUBLE
11211: EQUAL
11212: IFTRUE 11216
11214: GO 11235
11216: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
11217: LD_ADDR_EXP 16
11221: PUSH
11222: LD_EXP 16
11226: PUSH
11227: LD_VAR 0 1
11231: DIFF
11232: ST_TO_ADDR
11233: GO 11236
11235: POP
// end else
11236: GO 11250
// Say ( Heike , DH-Locked ) ;
11238: LD_EXP 30
11242: PPUSH
11243: LD_STRING DH-Locked
11245: PPUSH
11246: CALL_OW 88
// end ; dougBar :
11250: GO 13474
11252: LD_INT 106
11254: DOUBLE
11255: EQUAL
11256: IFTRUE 11260
11258: GO 11612
11260: POP
// begin if contactWithAmerican and americanContact then
11261: LD_EXP 25
11265: PUSH
11266: LD_EXP 10
11270: AND
11271: IFFALSE 11335
// begin Say ( Heike , DH-Escort-a-1 ) ;
11273: LD_EXP 30
11277: PPUSH
11278: LD_STRING DH-Escort-a-1
11280: PPUSH
11281: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
11285: LD_EXP 44
11289: PPUSH
11290: LD_STRING DCa-Escort-a-2
11292: PPUSH
11293: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
11297: LD_EXP 44
11301: PPUSH
11302: LD_STRING DCa-Escort-a-3
11304: PPUSH
11305: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
11309: LD_EXP 30
11313: PPUSH
11314: LD_STRING DH-Escort-a-4
11316: PPUSH
11317: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
11321: LD_EXP 30
11325: PPUSH
11326: LD_STRING DH-Escort-a-5
11328: PPUSH
11329: CALL_OW 88
// end else
11333: GO 11569
// if contactWithAmerican then
11335: LD_EXP 25
11339: IFFALSE 11379
// begin Say ( Heike , DH-Escort-b-1 ) ;
11341: LD_EXP 30
11345: PPUSH
11346: LD_STRING DH-Escort-b-1
11348: PPUSH
11349: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
11353: LD_EXP 44
11357: PPUSH
11358: LD_STRING DCa-Escort-b-2
11360: PPUSH
11361: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
11365: LD_EXP 44
11369: PPUSH
11370: LD_STRING DCa-Escort-b-3
11372: PPUSH
11373: CALL_OW 88
// end else
11377: GO 11569
// begin Say ( Doug , DCa-Deal-a-1 ) ;
11379: LD_EXP 44
11383: PPUSH
11384: LD_STRING DCa-Deal-a-1
11386: PPUSH
11387: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
11391: LD_EXP 44
11395: PPUSH
11396: LD_STRING DCa-Deal-a-2
11398: PPUSH
11399: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
11403: LD_EXP 30
11407: PPUSH
11408: LD_STRING DH-Deal-a-3
11410: PPUSH
11411: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
11415: LD_EXP 44
11419: PPUSH
11420: LD_STRING DCa-Deal-a-4
11422: PPUSH
11423: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
11427: LD_EXP 30
11431: PPUSH
11432: LD_STRING DH-Deal-a-5
11434: PPUSH
11435: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
11439: LD_EXP 44
11443: PPUSH
11444: LD_STRING DCa-Deal-a-6
11446: PPUSH
11447: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
11451: LD_EXP 44
11455: PPUSH
11456: LD_STRING DCa-Deal-a-7
11458: PPUSH
11459: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
11463: LD_EXP 44
11467: PPUSH
11468: LD_STRING DCa-Deal-a-8
11470: PPUSH
11471: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
11475: LD_EXP 44
11479: PPUSH
11480: LD_STRING DCa-Deal-a-9
11482: PPUSH
11483: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
11487: LD_EXP 44
11491: PPUSH
11492: LD_STRING DCa-Deal-a-10
11494: PPUSH
11495: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
11499: LD_EXP 44
11503: PPUSH
11504: LD_STRING DCa-Deal-a-11
11506: PPUSH
11507: CALL_OW 88
// wait ( 0 0$0.3 ) ;
11511: LD_INT 10
11513: PPUSH
11514: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
11518: LD_EXP 44
11522: PPUSH
11523: LD_STRING DCa-Deal-a-12
11525: PPUSH
11526: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
11530: LD_EXP 30
11534: PPUSH
11535: LD_STRING DH-Deal-a-13
11537: PPUSH
11538: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
11542: LD_EXP 30
11546: PPUSH
11547: LD_STRING DH-Deal-a-14
11549: PPUSH
11550: CALL_OW 88
// contactWithAmerican := true ;
11554: LD_ADDR_EXP 25
11558: PUSH
11559: LD_INT 1
11561: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11562: LD_STRING M1-american-out
11564: PPUSH
11565: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
11569: LD_EXP 44
11573: PPUSH
11574: LD_INT 2
11576: PPUSH
11577: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
11581: LD_ADDR_EXP 14
11585: PUSH
11586: LD_EXP 14
11590: PPUSH
11591: LD_EXP 44
11595: PPUSH
11596: CALL 51783 0 2
11600: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
11601: LD_EXP 44
11605: PPUSH
11606: CALL_OW 122
// end ; usLab :
11610: GO 13474
11612: LD_INT 135
11614: DOUBLE
11615: EQUAL
11616: IFTRUE 11620
11618: GO 11921
11620: POP
// begin if hasSniperRifle then
11621: LD_EXP 11
11625: IFFALSE 11919
// begin if IsOK ( Kaia ) and Kaia in heikeSquad then
11627: LD_EXP 35
11631: PPUSH
11632: CALL_OW 302
11636: PUSH
11637: LD_EXP 35
11641: PUSH
11642: LD_EXP 14
11646: IN
11647: AND
11648: IFFALSE 11893
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
11650: LD_EXP 30
11654: PPUSH
11655: LD_EXP 35
11659: PPUSH
11660: CALL_OW 296
11664: PUSH
11665: LD_INT 10
11667: GREATER
11668: IFFALSE 11693
// begin Query ( KaiaDistance ) ;
11670: LD_STRING KaiaDistance
11672: PPUSH
11673: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
11677: LD_ADDR_EXP 16
11681: PUSH
11682: LD_EXP 16
11686: PUSH
11687: LD_INT 135
11689: DIFF
11690: ST_TO_ADDR
// end else
11691: GO 11891
// begin SetSide ( Kaia , 5 ) ;
11693: LD_EXP 35
11697: PPUSH
11698: LD_INT 5
11700: PPUSH
11701: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
11705: LD_EXP 35
11709: PPUSH
11710: LD_INT 135
11712: PPUSH
11713: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
11717: LD_INT 35
11719: PPUSH
11720: CALL_OW 67
// until IsInUnit ( Kaia ) ;
11724: LD_EXP 35
11728: PPUSH
11729: CALL_OW 310
11733: IFFALSE 11717
// Say ( Kaia , DK-Sniper-1 ) ;
11735: LD_EXP 35
11739: PPUSH
11740: LD_STRING DK-Sniper-1
11742: PPUSH
11743: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
11747: LD_EXP 35
11751: PPUSH
11752: CALL_OW 257
11756: PUSH
11757: LD_INT 34
11759: EQUAL
11760: PUSH
11761: LD_EXP 32
11765: PUSH
11766: LD_EXP 14
11770: IN
11771: AND
11772: PUSH
11773: LD_EXP 32
11777: PPUSH
11778: CALL_OW 302
11782: AND
11783: IFFALSE 11811
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
11785: LD_EXP 35
11789: PPUSH
11790: LD_STRING DK-Sniper-a-2
11792: PPUSH
11793: CALL_OW 88
// SetClass ( Mike , class_hunter ) ;
11797: LD_EXP 32
11801: PPUSH
11802: LD_INT 32
11804: PPUSH
11805: CALL_OW 336
// end else
11809: GO 11870
// begin Say ( Kaia , DK-Sniper-2 ) ;
11811: LD_EXP 35
11815: PPUSH
11816: LD_STRING DK-Sniper-2
11818: PPUSH
11819: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
11823: LD_EXP 35
11827: PPUSH
11828: LD_INT 32
11830: PPUSH
11831: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
11835: LD_EXP 37
11839: PPUSH
11840: CALL_OW 302
11844: PUSH
11845: LD_EXP 37
11849: PUSH
11850: LD_EXP 14
11854: IN
11855: AND
11856: IFFALSE 11870
// Say ( Markov , DMar-Sniper-3 ) ;
11858: LD_EXP 37
11862: PPUSH
11863: LD_STRING DMar-Sniper-3
11865: PPUSH
11866: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
11870: LD_EXP 35
11874: PPUSH
11875: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
11879: LD_EXP 35
11883: PPUSH
11884: LD_INT 2
11886: PPUSH
11887: CALL_OW 235
// end ; end else
11891: GO 11919
// begin Say ( Heike , DH-Locked ) ;
11893: LD_EXP 30
11897: PPUSH
11898: LD_STRING DH-Locked
11900: PPUSH
11901: CALL_OW 88
// entranceVisitedList := entranceVisitedList diff usLab ;
11905: LD_ADDR_EXP 16
11909: PUSH
11910: LD_EXP 16
11914: PUSH
11915: LD_INT 135
11917: DIFF
11918: ST_TO_ADDR
// end ; end ; end ; drugsLab :
11919: GO 13474
11921: LD_INT 162
11923: DOUBLE
11924: EQUAL
11925: IFTRUE 11929
11927: GO 12062
11929: POP
// begin if hasStimDrugs then
11930: LD_EXP 9
11934: IFFALSE 12048
// begin wait ( 0 0$1 ) ;
11936: LD_INT 35
11938: PPUSH
11939: CALL_OW 67
// if not hasStimDrugsCollected then
11943: LD_EXP 24
11947: NOT
11948: IFFALSE 11990
// begin Say ( Heike , DH-Lab-1 ) ;
11950: LD_EXP 30
11954: PPUSH
11955: LD_STRING DH-Lab-1
11957: PPUSH
11958: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
11962: LD_INT 5
11964: PPUSH
11965: LD_INT 2
11967: PPUSH
11968: LD_INT 2
11970: PPUSH
11971: CALL_OW 322
// hasStimDrugsCollected := true ;
11975: LD_ADDR_EXP 24
11979: PUSH
11980: LD_INT 1
11982: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
11983: LD_STRING M1-drugs-out
11985: PPUSH
11986: CALL_OW 604
// end ; if not hasExplosionCollected then
11990: LD_EXP 23
11994: NOT
11995: IFFALSE 12013
// entranceVisitedList := entranceVisitedList diff drugsLab else
11997: LD_ADDR_EXP 16
12001: PUSH
12002: LD_EXP 16
12006: PUSH
12007: LD_INT 162
12009: DIFF
12010: ST_TO_ADDR
12011: GO 12046
// begin wait ( 0 0$3 ) ;
12013: LD_INT 105
12015: PPUSH
12016: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
12020: LD_EXP 30
12024: PPUSH
12025: LD_STRING DH-Lab-2
12027: PPUSH
12028: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
12032: LD_STRING M1-drugsLab-out
12034: PPUSH
12035: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
12039: LD_INT 162
12041: PPUSH
12042: CALL 14044 0 1
// end ; end else
12046: GO 12060
// Say ( Heike , DH-Locked ) ;
12048: LD_EXP 30
12052: PPUSH
12053: LD_STRING DH-Locked
12055: PPUSH
12056: CALL_OW 88
// end ; ruFac :
12060: GO 13474
12062: LD_INT 61
12064: DOUBLE
12065: EQUAL
12066: IFTRUE 12070
12068: GO 12180
12070: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
12071: LD_EXP 37
12075: PPUSH
12076: CALL_OW 302
12080: PUSH
12081: LD_EXP 37
12085: PUSH
12086: LD_EXP 14
12090: IN
12091: NOT
12092: AND
12093: IFFALSE 12174
// begin Say ( Heike , DH-Krastyo-1 ) ;
12095: LD_EXP 30
12099: PPUSH
12100: LD_STRING DH-Krastyo-1
12102: PPUSH
12103: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
12107: LD_EXP 37
12111: PPUSH
12112: LD_STRING DMar-Krastyo-2
12114: PPUSH
12115: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
12119: LD_EXP 37
12123: PPUSH
12124: LD_STRING DMar-Krastyo-3
12126: PPUSH
12127: CALL_OW 88
// SetSide ( Markov , 2 ) ;
12131: LD_EXP 37
12135: PPUSH
12136: LD_INT 2
12138: PPUSH
12139: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
12143: LD_ADDR_EXP 14
12147: PUSH
12148: LD_EXP 14
12152: PPUSH
12153: LD_EXP 37
12157: PPUSH
12158: CALL 51783 0 2
12162: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
12163: LD_EXP 37
12167: PPUSH
12168: CALL_OW 122
// end else
12172: GO 12178
// SayHEmpty ( ) ;
12174: CALL 10668 0 0
// end ; ruBarKam :
12178: GO 13474
12180: LD_INT 109
12182: DOUBLE
12183: EQUAL
12184: IFTRUE 12188
12186: GO 12335
12188: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
12189: LD_EXP 34
12193: PPUSH
12194: CALL_OW 302
12198: PUSH
12199: LD_EXP 34
12203: PUSH
12204: LD_EXP 14
12208: IN
12209: NOT
12210: AND
12211: IFFALSE 12329
// begin Say ( Heike , DH-Kamil-1 ) ;
12213: LD_EXP 30
12217: PPUSH
12218: LD_STRING DH-Kamil-1
12220: PPUSH
12221: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
12225: LD_EXP 34
12229: PPUSH
12230: LD_STRING DKam-Kamil-2
12232: PPUSH
12233: CALL_OW 88
// if IsOk ( Sophia ) then
12237: LD_EXP 36
12241: PPUSH
12242: CALL_OW 302
12246: IFFALSE 12286
// if Sophia in heikeSquad then
12248: LD_EXP 36
12252: PUSH
12253: LD_EXP 14
12257: IN
12258: IFFALSE 12274
// Say ( Kamil , DKam-Kamil-a-3 ) else
12260: LD_EXP 34
12264: PPUSH
12265: LD_STRING DKam-Kamil-a-3
12267: PPUSH
12268: CALL_OW 88
12272: GO 12286
// Say ( Kamil , DKam-Kamil-3 ) ;
12274: LD_EXP 34
12278: PPUSH
12279: LD_STRING DKam-Kamil-3
12281: PPUSH
12282: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
12286: LD_EXP 34
12290: PPUSH
12291: LD_INT 2
12293: PPUSH
12294: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
12298: LD_ADDR_EXP 14
12302: PUSH
12303: LD_EXP 14
12307: PPUSH
12308: LD_EXP 34
12312: PPUSH
12313: CALL 51783 0 2
12317: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
12318: LD_EXP 34
12322: PPUSH
12323: CALL_OW 122
// end else
12327: GO 12333
// SayHEmpty ( ) ;
12329: CALL 10668 0 0
// end ; ruOutpost1 :
12333: GO 13474
12335: LD_INT 169
12337: DOUBLE
12338: EQUAL
12339: IFTRUE 12343
12341: GO 12685
12343: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
12344: LD_EXP 39
12348: PPUSH
12349: CALL_OW 302
12353: PUSH
12354: LD_EXP 39
12358: PUSH
12359: LD_EXP 14
12363: IN
12364: NOT
12365: AND
12366: IFFALSE 12679
// begin if hasMethanol then
12368: LD_EXP 13
12372: IFFALSE 12608
// begin Say ( Heike , DH-Kurt-1 ) ;
12374: LD_EXP 30
12378: PPUSH
12379: LD_STRING DH-Kurt-1
12381: PPUSH
12382: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
12386: LD_EXP 39
12390: PPUSH
12391: LD_STRING DKs-Kurt-2
12393: PPUSH
12394: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
12398: LD_EXP 31
12402: PPUSH
12403: LD_INT 169
12405: PPUSH
12406: CALL_OW 296
12410: PUSH
12411: LD_INT 10
12413: LESS
12414: PUSH
12415: LD_EXP 31
12419: PUSH
12420: LD_EXP 14
12424: IN
12425: AND
12426: IFFALSE 12503
// begin ComMoveXY ( Givi , 100 , 37 ) ;
12428: LD_EXP 31
12432: PPUSH
12433: LD_INT 100
12435: PPUSH
12436: LD_INT 37
12438: PPUSH
12439: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
12443: LD_EXP 31
12447: PPUSH
12448: LD_INT 169
12450: PPUSH
12451: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
12455: LD_INT 35
12457: PPUSH
12458: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
12462: LD_EXP 31
12466: PPUSH
12467: LD_INT 169
12469: PPUSH
12470: CALL_OW 296
12474: PUSH
12475: LD_INT 7
12477: LESS
12478: IFFALSE 12455
// Say ( Givi , DG-Kurt-3 ) ;
12480: LD_EXP 31
12484: PPUSH
12485: LD_STRING DG-Kurt-3
12487: PPUSH
12488: CALL_OW 88
// ComStop ( Givi ) ;
12492: LD_EXP 31
12496: PPUSH
12497: CALL_OW 141
// end else
12501: GO 12606
// if GetDistUnits ( Olaf , ruOutpost1 ) < 10 and Olaf in heikeSquad then
12503: LD_EXP 38
12507: PPUSH
12508: LD_INT 169
12510: PPUSH
12511: CALL_OW 296
12515: PUSH
12516: LD_INT 10
12518: LESS
12519: PUSH
12520: LD_EXP 38
12524: PUSH
12525: LD_EXP 14
12529: IN
12530: AND
12531: IFFALSE 12606
// begin ComMoveXY ( Olaf , 100 , 37 ) ;
12533: LD_EXP 38
12537: PPUSH
12538: LD_INT 100
12540: PPUSH
12541: LD_INT 37
12543: PPUSH
12544: CALL_OW 111
// AddComTurnUnit ( Olaf , ruOutpost1 ) ;
12548: LD_EXP 38
12552: PPUSH
12553: LD_INT 169
12555: PPUSH
12556: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
12560: LD_INT 35
12562: PPUSH
12563: CALL_OW 67
// until GetDistUnits ( Olaf , ruOutpost1 ) < 7 ;
12567: LD_EXP 38
12571: PPUSH
12572: LD_INT 169
12574: PPUSH
12575: CALL_OW 296
12579: PUSH
12580: LD_INT 7
12582: LESS
12583: IFFALSE 12560
// Say ( Olaf , DO-Kurt-a-3 ) ;
12585: LD_EXP 38
12589: PPUSH
12590: LD_STRING DO-Kurt-a-3
12592: PPUSH
12593: CALL_OW 88
// ComStop ( Olaf ) ;
12597: LD_EXP 38
12601: PPUSH
12602: CALL_OW 141
// end ; end else
12606: GO 12636
// begin Say ( Heike , DH-Kurt-1 ) ;
12608: LD_EXP 30
12612: PPUSH
12613: LD_STRING DH-Kurt-1
12615: PPUSH
12616: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
12620: LD_EXP 39
12624: PPUSH
12625: LD_STRING DKs-Kurt-2
12627: PPUSH
12628: CALL_OW 88
// SpawnAdditionalRuGuards ;
12632: CALL 2248 0 0
// end ; SetSide ( Kurt , 2 ) ;
12636: LD_EXP 39
12640: PPUSH
12641: LD_INT 2
12643: PPUSH
12644: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
12648: LD_ADDR_EXP 14
12652: PUSH
12653: LD_EXP 14
12657: PPUSH
12658: LD_EXP 39
12662: PPUSH
12663: CALL 51783 0 2
12667: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
12668: LD_EXP 39
12672: PPUSH
12673: CALL_OW 122
// end else
12677: GO 12683
// SayHEmpty ( ) ;
12679: CALL 10668 0 0
// end ; ruOutpostBar :
12683: GO 13474
12685: LD_INT 13
12687: DOUBLE
12688: EQUAL
12689: IFTRUE 12693
12691: GO 12739
12693: POP
// begin if not hasGuardPatrolPlan then
12694: LD_EXP 18
12698: NOT
12699: IFFALSE 12733
// begin Say ( Heike , DH-PatrolPlan ) ;
12701: LD_EXP 30
12705: PPUSH
12706: LD_STRING DH-PatrolPlan
12708: PPUSH
12709: CALL_OW 88
// hasGuardPatrolPlan := true ;
12713: LD_ADDR_EXP 18
12717: PUSH
12718: LD_INT 1
12720: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
12721: LD_INT 6
12723: PPUSH
12724: LD_INT 2
12726: PPUSH
12727: CALL_OW 343
// end else
12731: GO 12737
// SayHEmpty ( ) ;
12733: CALL 10668 0 0
// end ; ruKaiaBar :
12737: GO 13474
12739: LD_INT 147
12741: DOUBLE
12742: EQUAL
12743: IFTRUE 12747
12745: GO 12894
12747: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
12748: LD_EXP 35
12752: PPUSH
12753: CALL_OW 302
12757: PUSH
12758: LD_EXP 35
12762: PUSH
12763: LD_EXP 14
12767: IN
12768: NOT
12769: AND
12770: IFFALSE 12892
// begin Say ( Heike , DH-Kaia-1 ) ;
12772: LD_EXP 30
12776: PPUSH
12777: LD_STRING DH-Kaia-1
12779: PPUSH
12780: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
12784: LD_EXP 35
12788: PPUSH
12789: LD_STRING DK-Kaia-2
12791: PPUSH
12792: CALL_OW 88
// if hasSniperRifle then
12796: LD_EXP 11
12800: IFFALSE 12851
// begin if IsOk ( Markov ) then
12802: LD_EXP 37
12806: PPUSH
12807: CALL_OW 302
12811: IFFALSE 12827
// Say ( Kaia , DK-Kaia-3 ) else
12813: LD_EXP 35
12817: PPUSH
12818: LD_STRING DK-Kaia-3
12820: PPUSH
12821: CALL_OW 88
12825: GO 12839
// Say ( Kaia , DK-Kaia-a-3 ) ;
12827: LD_EXP 35
12831: PPUSH
12832: LD_STRING DK-Kaia-a-3
12834: PPUSH
12835: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
12839: LD_EXP 30
12843: PPUSH
12844: LD_STRING DH-Kaia-4
12846: PPUSH
12847: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
12851: LD_EXP 35
12855: PPUSH
12856: LD_INT 2
12858: PPUSH
12859: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
12863: LD_ADDR_EXP 14
12867: PUSH
12868: LD_EXP 14
12872: PPUSH
12873: LD_EXP 35
12877: PPUSH
12878: CALL 51783 0 2
12882: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
12883: LD_EXP 35
12887: PPUSH
12888: CALL_OW 122
// end ; end ; ruWeaponsBar :
12892: GO 13474
12894: LD_INT 137
12896: DOUBLE
12897: EQUAL
12898: IFTRUE 12902
12900: GO 13473
12902: POP
// begin if hasWeapons then
12903: LD_EXP 19
12907: IFFALSE 13459
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
12909: LD_ADDR_EXP 16
12913: PUSH
12914: LD_EXP 16
12918: PUSH
12919: LD_INT 137
12921: DIFF
12922: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
12923: LD_ADDR_VAR 0 3
12927: PUSH
12928: LD_EXP 14
12932: PPUSH
12933: LD_INT 91
12935: PUSH
12936: LD_EXP 30
12940: PUSH
12941: LD_INT 8
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: LIST
12948: PPUSH
12949: CALL_OW 72
12953: ST_TO_ADDR
// if not heikeSquad or not tmp then
12954: LD_EXP 14
12958: NOT
12959: PUSH
12960: LD_VAR 0 3
12964: NOT
12965: OR
12966: IFFALSE 12982
// Say ( Heike , DH-Weapons-Alone ) else
12968: LD_EXP 30
12972: PPUSH
12973: LD_STRING DH-Weapons-Alone
12975: PPUSH
12976: CALL_OW 88
12980: GO 13457
// begin entranceVisitedList := Join ( entranceVisitedList , ruWeaponsBar ) ;
12982: LD_ADDR_EXP 16
12986: PUSH
12987: LD_EXP 16
12991: PPUSH
12992: LD_INT 137
12994: PPUSH
12995: CALL 51783 0 2
12999: ST_TO_ADDR
// Say ( Heike , DH-Weapons-1 ) ;
13000: LD_EXP 30
13004: PPUSH
13005: LD_STRING DH-Weapons-1
13007: PPUSH
13008: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
13012: LD_EXP 30
13016: PPUSH
13017: LD_STRING DH-Weapons-2
13019: PPUSH
13020: CALL_OW 88
// if hasRevolver and Kaia in tmp then
13024: LD_EXP 8
13028: PUSH
13029: LD_EXP 35
13033: PUSH
13034: LD_VAR 0 3
13038: IN
13039: AND
13040: IFFALSE 13129
// begin SetSide ( Kaia , 5 ) ;
13042: LD_EXP 35
13046: PPUSH
13047: LD_INT 5
13049: PPUSH
13050: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
13054: LD_EXP 35
13058: PPUSH
13059: LD_INT 137
13061: PPUSH
13062: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13066: LD_INT 35
13068: PPUSH
13069: CALL_OW 67
// until IsInUnit ( Kaia ) ;
13073: LD_EXP 35
13077: PPUSH
13078: CALL_OW 310
13082: IFFALSE 13066
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
13084: LD_EXP 30
13088: PPUSH
13089: LD_STRING DH-Kaia-Revolver-2
13091: PPUSH
13092: CALL_OW 88
// SetClassKaiaRevolver ;
13096: CALL 1381 0 0
// hasRevolver := false ;
13100: LD_ADDR_EXP 8
13104: PUSH
13105: LD_INT 0
13107: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
13108: LD_EXP 35
13112: PPUSH
13113: LD_INT 2
13115: PPUSH
13116: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
13120: LD_EXP 35
13124: PPUSH
13125: CALL_OW 122
// end ; if Givi in tmp then
13129: LD_EXP 31
13133: PUSH
13134: LD_VAR 0 3
13138: IN
13139: IFFALSE 13280
// begin SetSide ( Givi , 5 ) ;
13141: LD_EXP 31
13145: PPUSH
13146: LD_INT 5
13148: PPUSH
13149: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
13153: LD_EXP 31
13157: PPUSH
13158: LD_INT 137
13160: PPUSH
13161: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13165: LD_INT 35
13167: PPUSH
13168: CALL_OW 67
// until IsInUnit ( Givi ) ;
13172: LD_EXP 31
13176: PPUSH
13177: CALL_OW 310
13181: IFFALSE 13165
// Say ( Givi , DG-Weapons-3 ) ;
13183: LD_EXP 31
13187: PPUSH
13188: LD_STRING DG-Weapons-3
13190: PPUSH
13191: CALL_OW 88
// Say ( Givi , DH-Weapons-4 ) ;
13195: LD_EXP 31
13199: PPUSH
13200: LD_STRING DH-Weapons-4
13202: PPUSH
13203: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
13207: LD_EXP 31
13211: PPUSH
13212: LD_STRING DG-Weapons-5
13214: PPUSH
13215: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
13219: LD_EXP 31
13223: PPUSH
13224: LD_INT 11
13226: PPUSH
13227: CALL_OW 336
// ComExitBuilding ( Givi ) ;
13231: LD_EXP 31
13235: PPUSH
13236: CALL_OW 122
// SetSide ( Givi , 2 ) ;
13240: LD_EXP 31
13244: PPUSH
13245: LD_INT 2
13247: PPUSH
13248: CALL_OW 235
// if hasRevolver then
13252: LD_EXP 8
13256: IFFALSE 13278
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
13258: LD_EXP 30
13262: PPUSH
13263: LD_STRING DH-Kaia-Revolver-1
13265: PPUSH
13266: CALL_OW 88
// heikeHasRevolver := true ;
13270: LD_ADDR_EXP 20
13274: PUSH
13275: LD_INT 1
13277: ST_TO_ADDR
// end ; end else
13278: GO 13457
// if Kamil in tmp then
13280: LD_EXP 34
13284: PUSH
13285: LD_VAR 0 3
13289: IN
13290: IFFALSE 13419
// begin SetSide ( Kamil , 5 ) ;
13292: LD_EXP 34
13296: PPUSH
13297: LD_INT 5
13299: PPUSH
13300: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
13304: LD_EXP 34
13308: PPUSH
13309: LD_INT 137
13311: PPUSH
13312: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13316: LD_INT 35
13318: PPUSH
13319: CALL_OW 67
// until IsInUnit ( Kamil ) ;
13323: LD_EXP 34
13327: PPUSH
13328: CALL_OW 310
13332: IFFALSE 13316
// Say ( Kamil , DKam-Weapons-a-3 ) ;
13334: LD_EXP 34
13338: PPUSH
13339: LD_STRING DKam-Weapons-a-3
13341: PPUSH
13342: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
13346: LD_EXP 30
13350: PPUSH
13351: LD_STRING DH-Weapons-a-4
13353: PPUSH
13354: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
13358: LD_EXP 34
13362: PPUSH
13363: LD_INT 11
13365: PPUSH
13366: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
13370: LD_EXP 34
13374: PPUSH
13375: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
13379: LD_EXP 34
13383: PPUSH
13384: LD_INT 2
13386: PPUSH
13387: CALL_OW 235
// if hasRevolver then
13391: LD_EXP 8
13395: IFFALSE 13417
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
13397: LD_EXP 30
13401: PPUSH
13402: LD_STRING DH-Kaia-Revolver-1
13404: PPUSH
13405: CALL_OW 88
// heikeHasRevolver := true ;
13409: LD_ADDR_EXP 20
13413: PUSH
13414: LD_INT 1
13416: ST_TO_ADDR
// end ; end else
13417: GO 13457
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
13419: LD_EXP 30
13423: PPUSH
13424: LD_STRING DH-Weapons-Alone-2
13426: PPUSH
13427: CALL_OW 88
// if hasRevolver then
13431: LD_EXP 8
13435: IFFALSE 13457
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
13437: LD_EXP 30
13441: PPUSH
13442: LD_STRING DH-Kaia-Revolver-1a
13444: PPUSH
13445: CALL_OW 88
// heikeHasRevolver := true ;
13449: LD_ADDR_EXP 20
13453: PUSH
13454: LD_INT 1
13456: ST_TO_ADDR
// end ; end ; end ; end else
13457: GO 13471
// Say ( Heike , DH-Locked ) ;
13459: LD_EXP 30
13463: PPUSH
13464: LD_STRING DH-Locked
13466: PPUSH
13467: CALL_OW 88
// end ; end ;
13471: GO 13474
13473: POP
// ComExitBuilding ( Heike ) ;
13474: LD_EXP 30
13478: PPUSH
13479: CALL_OW 122
// SetSide ( Heike , 2 ) ;
13483: LD_EXP 30
13487: PPUSH
13488: LD_INT 2
13490: PPUSH
13491: CALL_OW 235
// SetSide ( building , 3 ) ;
13495: LD_VAR 0 1
13499: PPUSH
13500: LD_INT 3
13502: PPUSH
13503: CALL_OW 235
// InGameOff ;
13507: CALL_OW 9
// end ; end_of_file
13511: LD_VAR 0 2
13515: RET
// on SailEvent ( event ) do begin case event of centerCamEvent :
13516: LD_VAR 0 1
13520: PUSH
13521: LD_INT 3
13523: DOUBLE
13524: EQUAL
13525: IFTRUE 13529
13527: GO 13559
13529: POP
// begin repeat wait ( 0 0$1 ) ;
13530: LD_INT 35
13532: PPUSH
13533: CALL_OW 67
// CenterOnUnits ( Heike ) ;
13537: LD_EXP 30
13541: PPUSH
13542: CALL_OW 85
// until IsDying ( Heike ) ;
13546: LD_EXP 30
13550: PPUSH
13551: CALL_OW 303
13555: IFFALSE 13530
// end ; end ;
13557: GO 13560
13559: POP
// end ;
13560: PPOPN 1
13562: END
// on SaiLEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
13563: LD_OWVAR 59
13567: IFFALSE 13571
// exit ;
13569: GO 13645
// if showPlaceEvent then
13571: LD_INT 4
13573: IFFALSE 13645
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
13575: LD_VAR 0 2
13579: PPUSH
13580: LD_VAR 0 3
13584: PPUSH
13585: LD_INT 2
13587: PPUSH
13588: LD_INT 6
13590: NEG
13591: PPUSH
13592: CALL_OW 330
// CenterOnXY ( x , y ) ;
13596: LD_VAR 0 2
13600: PPUSH
13601: LD_VAR 0 3
13605: PPUSH
13606: CALL_OW 84
// wait ( time ) ;
13610: LD_VAR 0 4
13614: PPUSH
13615: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
13619: LD_EXP 30
13623: PPUSH
13624: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
13628: LD_VAR 0 2
13632: PPUSH
13633: LD_VAR 0 3
13637: PPUSH
13638: LD_INT 2
13640: PPUSH
13641: CALL_OW 331
// end ; end ;
13645: PPOPN 7
13647: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
13648: LD_VAR 0 1
13652: PUSH
13653: LD_EXP 30
13657: EQUAL
13658: PUSH
13659: LD_EXP 5
13663: AND
13664: IFFALSE 13673
// YouLost ( Heike ) ;
13666: LD_STRING Heike
13668: PPUSH
13669: CALL_OW 104
// end ; end_of_file
13673: PPOPN 1
13675: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
13676: LD_INT 0
13678: PPUSH
13679: PPUSH
13680: PPUSH
// u1 := IsInUnit ( unit1 ) ;
13681: LD_ADDR_VAR 0 4
13685: PUSH
13686: LD_VAR 0 1
13690: PPUSH
13691: CALL_OW 310
13695: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
13696: LD_ADDR_VAR 0 5
13700: PUSH
13701: LD_VAR 0 2
13705: PPUSH
13706: CALL_OW 310
13710: ST_TO_ADDR
// result := u1 and u1 = u2 ;
13711: LD_ADDR_VAR 0 3
13715: PUSH
13716: LD_VAR 0 4
13720: PUSH
13721: LD_VAR 0 4
13725: PUSH
13726: LD_VAR 0 5
13730: EQUAL
13731: AND
13732: ST_TO_ADDR
// end ;
13733: LD_VAR 0 3
13737: RET
// export function ShowPlace ( x , y , time ) ; begin
13738: LD_INT 0
13740: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
13741: LD_INT 4
13743: PPUSH
13744: LD_VAR 0 1
13748: PPUSH
13749: LD_VAR 0 2
13753: PPUSH
13754: LD_VAR 0 3
13758: PPUSH
13759: LD_INT 0
13761: PPUSH
13762: LD_INT 0
13764: PPUSH
13765: LD_INT 0
13767: PPUSH
13768: CALL_OW 595
// end ;
13772: LD_VAR 0 4
13776: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
13777: LD_INT 0
13779: PPUSH
13780: PPUSH
13781: PPUSH
13782: PPUSH
13783: PPUSH
13784: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
13785: LD_VAR 0 1
13789: PPUSH
13790: CALL_OW 302
13794: NOT
13795: PUSH
13796: LD_VAR 0 2
13800: PPUSH
13801: CALL_OW 302
13805: NOT
13806: OR
13807: PUSH
13808: LD_VAR 0 2
13812: PPUSH
13813: CALL_OW 313
13817: PUSH
13818: LD_INT 6
13820: EQUAL
13821: OR
13822: IFFALSE 13826
// exit ;
13824: GO 14039
// btype := GetBType ( building ) ;
13826: LD_ADDR_VAR 0 8
13830: PUSH
13831: LD_VAR 0 2
13835: PPUSH
13836: CALL_OW 266
13840: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
13841: LD_VAR 0 8
13845: PUSH
13846: LD_INT 0
13848: PUSH
13849: LD_INT 1
13851: PUSH
13852: LD_INT 4
13854: PUSH
13855: LD_INT 5
13857: PUSH
13858: LD_INT 3
13860: PUSH
13861: LD_INT 6
13863: PUSH
13864: LD_INT 7
13866: PUSH
13867: LD_INT 8
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: IN
13880: NOT
13881: IFFALSE 13885
// exit ;
13883: GO 14039
// x := GetX ( building ) ;
13885: LD_ADDR_VAR 0 4
13889: PUSH
13890: LD_VAR 0 2
13894: PPUSH
13895: CALL_OW 250
13899: ST_TO_ADDR
// y := GetY ( building ) ;
13900: LD_ADDR_VAR 0 5
13904: PUSH
13905: LD_VAR 0 2
13909: PPUSH
13910: CALL_OW 251
13914: ST_TO_ADDR
// d := GetDir ( building ) ;
13915: LD_ADDR_VAR 0 6
13919: PUSH
13920: LD_VAR 0 2
13924: PPUSH
13925: CALL_OW 254
13929: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
13930: LD_ADDR_VAR 0 7
13934: PUSH
13935: LD_VAR 0 4
13939: PPUSH
13940: LD_VAR 0 6
13944: PPUSH
13945: LD_INT 3
13947: PPUSH
13948: CALL_OW 272
13952: PUSH
13953: LD_VAR 0 5
13957: PPUSH
13958: LD_VAR 0 6
13962: PPUSH
13963: LD_INT 3
13965: PPUSH
13966: CALL_OW 273
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
13975: LD_VAR 0 7
13979: PUSH
13980: LD_INT 1
13982: ARRAY
13983: PPUSH
13984: LD_VAR 0 7
13988: PUSH
13989: LD_INT 2
13991: ARRAY
13992: PPUSH
13993: CALL_OW 488
13997: NOT
13998: IFFALSE 14002
// exit ;
14000: GO 14039
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 5 ;
14002: LD_ADDR_VAR 0 3
14006: PUSH
14007: LD_VAR 0 1
14011: PPUSH
14012: LD_VAR 0 7
14016: PUSH
14017: LD_INT 1
14019: ARRAY
14020: PPUSH
14021: LD_VAR 0 7
14025: PUSH
14026: LD_INT 2
14028: ARRAY
14029: PPUSH
14030: CALL_OW 297
14034: PUSH
14035: LD_INT 5
14037: LESS
14038: ST_TO_ADDR
// end ;
14039: LD_VAR 0 3
14043: RET
// export function PlaceExplosives ( building ) ; begin
14044: LD_INT 0
14046: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , drugsLab ) ;
14047: LD_ADDR_EXP 29
14051: PUSH
14052: LD_EXP 29
14056: PPUSH
14057: LD_INT 162
14059: PPUSH
14060: CALL 51783 0 2
14064: ST_TO_ADDR
// end ; end_of_file
14065: LD_VAR 0 2
14069: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
14070: LD_INT 0
14072: PPUSH
// if not step then
14073: LD_LOC 1
14077: NOT
14078: IFFALSE 14088
// step := 1 ;
14080: LD_ADDR_LOC 1
14084: PUSH
14085: LD_INT 1
14087: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
14088: LD_STRING HEscape
14090: PUSH
14091: LD_LOC 1
14095: STR
14096: PPUSH
14097: CALL_OW 97
14101: PUSH
14102: LD_INT 1
14104: DOUBLE
14105: EQUAL
14106: IFTRUE 14110
14108: GO 14117
14110: POP
// LockerMinigameSearch ; 2 :
14111: CALL 14150 0 0
14115: GO 14133
14117: LD_INT 2
14119: DOUBLE
14120: EQUAL
14121: IFTRUE 14125
14123: GO 14132
14125: POP
// LockerMinigameSetCode ; end ;
14126: CALL 14224 0 0
14130: GO 14133
14132: POP
// if lockerCodeValid then
14133: LD_EXP 49
14137: IFFALSE 14141
// exit ;
14139: GO 14145
// StartLockerMinigame ;
14141: CALL 14070 0 0
// end ;
14145: LD_VAR 0 1
14149: RET
// function LockerMinigameSearch ; begin
14150: LD_INT 0
14152: PPUSH
// if code then
14153: LD_LOC 2
14157: IFFALSE 14173
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
14159: LD_EXP 30
14163: PPUSH
14164: LD_STRING DH-Escape-3-Hint-0
14166: PPUSH
14167: CALL_OW 88
// exit ;
14171: GO 14219
// end ; Randomize ;
14173: CALL_OW 10
// code := rand ( 1 , 5 ) ;
14177: LD_ADDR_LOC 2
14181: PUSH
14182: LD_INT 1
14184: PPUSH
14185: LD_INT 5
14187: PPUSH
14188: CALL_OW 12
14192: ST_TO_ADDR
// step := 2 ;
14193: LD_ADDR_LOC 1
14197: PUSH
14198: LD_INT 2
14200: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
14201: LD_EXP 30
14205: PPUSH
14206: LD_STRING DH-Escape-3-Hint-
14208: PUSH
14209: LD_LOC 2
14213: STR
14214: PPUSH
14215: CALL_OW 88
// end ;
14219: LD_VAR 0 1
14223: RET
// function LockerMinigameSetCode ; begin
14224: LD_INT 0
14226: PPUSH
// if not code then
14227: LD_LOC 2
14231: NOT
14232: IFFALSE 14242
// code := 0 ;
14234: LD_ADDR_LOC 2
14238: PUSH
14239: LD_INT 0
14241: ST_TO_ADDR
// lockerBusy := true ;
14242: LD_ADDR_EXP 50
14246: PUSH
14247: LD_INT 1
14249: ST_TO_ADDR
// InGameOff ;
14250: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
14254: LD_STRING initLockerMinigame("
14256: PUSH
14257: LD_LOC 2
14261: STR
14262: PUSH
14263: LD_STRING ")
14265: STR
14266: PPUSH
14267: CALL_OW 559
// step := 3 ;
14271: LD_ADDR_LOC 1
14275: PUSH
14276: LD_INT 3
14278: ST_TO_ADDR
// repeat wait ( 1 ) ;
14279: LD_INT 1
14281: PPUSH
14282: CALL_OW 67
// until not lockerBusy ;
14286: LD_EXP 50
14290: NOT
14291: IFFALSE 14279
// InGameOn ;
14293: CALL_OW 8
// if not lockerCodeValid then
14297: LD_EXP 49
14301: NOT
14302: IFFALSE 14328
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
14304: LD_EXP 30
14308: PPUSH
14309: LD_STRING DH-Escape-3-Fail-
14311: PUSH
14312: LD_INT 1
14314: PPUSH
14315: LD_INT 2
14317: PPUSH
14318: CALL_OW 12
14322: STR
14323: PPUSH
14324: CALL_OW 88
// end ; end_of_file
14328: LD_VAR 0 1
14332: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
14333: LD_VAR 0 2
14337: PUSH
14338: LD_INT 102
14340: EQUAL
14341: IFFALSE 14363
// begin lockerBusy := false ;
14343: LD_ADDR_EXP 50
14347: PUSH
14348: LD_INT 0
14350: ST_TO_ADDR
// lockerCodeValid := p3 ;
14351: LD_ADDR_EXP 49
14355: PUSH
14356: LD_VAR 0 3
14360: ST_TO_ADDR
// end else
14361: GO 14397
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
14363: LD_VAR 0 1
14367: PPUSH
14368: LD_VAR 0 2
14372: PPUSH
14373: LD_VAR 0 3
14377: PPUSH
14378: LD_VAR 0 4
14382: PPUSH
14383: LD_VAR 0 5
14387: PPUSH
14388: LD_VAR 0 6
14392: PPUSH
14393: CALL 55643 0 6
// end ;
14397: PPOPN 6
14399: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
14400: CALL 55614 0 0
// end ; end_of_file
14404: PPOPN 1
14406: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
14407: LD_INT 0
14409: PPUSH
14410: PPUSH
// if exist_mode then
14411: LD_VAR 0 2
14415: IFFALSE 14440
// unit := CreateCharacter ( prefix & ident ) else
14417: LD_ADDR_VAR 0 5
14421: PUSH
14422: LD_VAR 0 3
14426: PUSH
14427: LD_VAR 0 1
14431: STR
14432: PPUSH
14433: CALL_OW 34
14437: ST_TO_ADDR
14438: GO 14455
// unit := NewCharacter ( ident ) ;
14440: LD_ADDR_VAR 0 5
14444: PUSH
14445: LD_VAR 0 1
14449: PPUSH
14450: CALL_OW 25
14454: ST_TO_ADDR
// result := unit ;
14455: LD_ADDR_VAR 0 4
14459: PUSH
14460: LD_VAR 0 5
14464: ST_TO_ADDR
// end ;
14465: LD_VAR 0 4
14469: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
14470: LD_INT 0
14472: PPUSH
14473: PPUSH
// if not side or not nation then
14474: LD_VAR 0 1
14478: NOT
14479: PUSH
14480: LD_VAR 0 2
14484: NOT
14485: OR
14486: IFFALSE 14490
// exit ;
14488: GO 15258
// case nation of nation_american :
14490: LD_VAR 0 2
14494: PUSH
14495: LD_INT 1
14497: DOUBLE
14498: EQUAL
14499: IFTRUE 14503
14501: GO 14717
14503: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
14504: LD_ADDR_VAR 0 4
14508: PUSH
14509: LD_INT 35
14511: PUSH
14512: LD_INT 45
14514: PUSH
14515: LD_INT 46
14517: PUSH
14518: LD_INT 47
14520: PUSH
14521: LD_INT 82
14523: PUSH
14524: LD_INT 83
14526: PUSH
14527: LD_INT 84
14529: PUSH
14530: LD_INT 85
14532: PUSH
14533: LD_INT 86
14535: PUSH
14536: LD_INT 1
14538: PUSH
14539: LD_INT 2
14541: PUSH
14542: LD_INT 6
14544: PUSH
14545: LD_INT 15
14547: PUSH
14548: LD_INT 16
14550: PUSH
14551: LD_INT 7
14553: PUSH
14554: LD_INT 12
14556: PUSH
14557: LD_INT 13
14559: PUSH
14560: LD_INT 10
14562: PUSH
14563: LD_INT 14
14565: PUSH
14566: LD_INT 20
14568: PUSH
14569: LD_INT 21
14571: PUSH
14572: LD_INT 22
14574: PUSH
14575: LD_INT 25
14577: PUSH
14578: LD_INT 32
14580: PUSH
14581: LD_INT 27
14583: PUSH
14584: LD_INT 36
14586: PUSH
14587: LD_INT 69
14589: PUSH
14590: LD_INT 39
14592: PUSH
14593: LD_INT 34
14595: PUSH
14596: LD_INT 40
14598: PUSH
14599: LD_INT 48
14601: PUSH
14602: LD_INT 49
14604: PUSH
14605: LD_INT 50
14607: PUSH
14608: LD_INT 51
14610: PUSH
14611: LD_INT 52
14613: PUSH
14614: LD_INT 53
14616: PUSH
14617: LD_INT 54
14619: PUSH
14620: LD_INT 55
14622: PUSH
14623: LD_INT 56
14625: PUSH
14626: LD_INT 57
14628: PUSH
14629: LD_INT 58
14631: PUSH
14632: LD_INT 59
14634: PUSH
14635: LD_INT 60
14637: PUSH
14638: LD_INT 61
14640: PUSH
14641: LD_INT 62
14643: PUSH
14644: LD_INT 80
14646: PUSH
14647: LD_INT 82
14649: PUSH
14650: LD_INT 83
14652: PUSH
14653: LD_INT 84
14655: PUSH
14656: LD_INT 85
14658: PUSH
14659: LD_INT 86
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: ST_TO_ADDR
14715: GO 15182
14717: LD_INT 2
14719: DOUBLE
14720: EQUAL
14721: IFTRUE 14725
14723: GO 14951
14725: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
14726: LD_ADDR_VAR 0 4
14730: PUSH
14731: LD_INT 35
14733: PUSH
14734: LD_INT 45
14736: PUSH
14737: LD_INT 46
14739: PUSH
14740: LD_INT 47
14742: PUSH
14743: LD_INT 82
14745: PUSH
14746: LD_INT 83
14748: PUSH
14749: LD_INT 84
14751: PUSH
14752: LD_INT 85
14754: PUSH
14755: LD_INT 87
14757: PUSH
14758: LD_INT 70
14760: PUSH
14761: LD_INT 1
14763: PUSH
14764: LD_INT 11
14766: PUSH
14767: LD_INT 3
14769: PUSH
14770: LD_INT 4
14772: PUSH
14773: LD_INT 5
14775: PUSH
14776: LD_INT 6
14778: PUSH
14779: LD_INT 15
14781: PUSH
14782: LD_INT 18
14784: PUSH
14785: LD_INT 7
14787: PUSH
14788: LD_INT 17
14790: PUSH
14791: LD_INT 8
14793: PUSH
14794: LD_INT 20
14796: PUSH
14797: LD_INT 21
14799: PUSH
14800: LD_INT 22
14802: PUSH
14803: LD_INT 72
14805: PUSH
14806: LD_INT 26
14808: PUSH
14809: LD_INT 69
14811: PUSH
14812: LD_INT 39
14814: PUSH
14815: LD_INT 40
14817: PUSH
14818: LD_INT 41
14820: PUSH
14821: LD_INT 42
14823: PUSH
14824: LD_INT 43
14826: PUSH
14827: LD_INT 48
14829: PUSH
14830: LD_INT 49
14832: PUSH
14833: LD_INT 50
14835: PUSH
14836: LD_INT 51
14838: PUSH
14839: LD_INT 52
14841: PUSH
14842: LD_INT 53
14844: PUSH
14845: LD_INT 54
14847: PUSH
14848: LD_INT 55
14850: PUSH
14851: LD_INT 56
14853: PUSH
14854: LD_INT 60
14856: PUSH
14857: LD_INT 61
14859: PUSH
14860: LD_INT 62
14862: PUSH
14863: LD_INT 66
14865: PUSH
14866: LD_INT 67
14868: PUSH
14869: LD_INT 68
14871: PUSH
14872: LD_INT 81
14874: PUSH
14875: LD_INT 82
14877: PUSH
14878: LD_INT 83
14880: PUSH
14881: LD_INT 84
14883: PUSH
14884: LD_INT 85
14886: PUSH
14887: LD_INT 87
14889: PUSH
14890: LD_INT 88
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: ST_TO_ADDR
14949: GO 15182
14951: LD_INT 3
14953: DOUBLE
14954: EQUAL
14955: IFTRUE 14959
14957: GO 15181
14959: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
14960: LD_ADDR_VAR 0 4
14964: PUSH
14965: LD_INT 46
14967: PUSH
14968: LD_INT 47
14970: PUSH
14971: LD_INT 1
14973: PUSH
14974: LD_INT 2
14976: PUSH
14977: LD_INT 82
14979: PUSH
14980: LD_INT 83
14982: PUSH
14983: LD_INT 84
14985: PUSH
14986: LD_INT 85
14988: PUSH
14989: LD_INT 86
14991: PUSH
14992: LD_INT 11
14994: PUSH
14995: LD_INT 9
14997: PUSH
14998: LD_INT 20
15000: PUSH
15001: LD_INT 19
15003: PUSH
15004: LD_INT 21
15006: PUSH
15007: LD_INT 24
15009: PUSH
15010: LD_INT 22
15012: PUSH
15013: LD_INT 25
15015: PUSH
15016: LD_INT 28
15018: PUSH
15019: LD_INT 29
15021: PUSH
15022: LD_INT 30
15024: PUSH
15025: LD_INT 31
15027: PUSH
15028: LD_INT 37
15030: PUSH
15031: LD_INT 38
15033: PUSH
15034: LD_INT 32
15036: PUSH
15037: LD_INT 27
15039: PUSH
15040: LD_INT 33
15042: PUSH
15043: LD_INT 69
15045: PUSH
15046: LD_INT 39
15048: PUSH
15049: LD_INT 34
15051: PUSH
15052: LD_INT 40
15054: PUSH
15055: LD_INT 71
15057: PUSH
15058: LD_INT 23
15060: PUSH
15061: LD_INT 44
15063: PUSH
15064: LD_INT 48
15066: PUSH
15067: LD_INT 49
15069: PUSH
15070: LD_INT 50
15072: PUSH
15073: LD_INT 51
15075: PUSH
15076: LD_INT 52
15078: PUSH
15079: LD_INT 53
15081: PUSH
15082: LD_INT 54
15084: PUSH
15085: LD_INT 55
15087: PUSH
15088: LD_INT 56
15090: PUSH
15091: LD_INT 57
15093: PUSH
15094: LD_INT 58
15096: PUSH
15097: LD_INT 59
15099: PUSH
15100: LD_INT 63
15102: PUSH
15103: LD_INT 64
15105: PUSH
15106: LD_INT 65
15108: PUSH
15109: LD_INT 82
15111: PUSH
15112: LD_INT 83
15114: PUSH
15115: LD_INT 84
15117: PUSH
15118: LD_INT 85
15120: PUSH
15121: LD_INT 86
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: ST_TO_ADDR
15179: GO 15182
15181: POP
// if state > - 1 and state < 3 then
15182: LD_VAR 0 3
15186: PUSH
15187: LD_INT 1
15189: NEG
15190: GREATER
15191: PUSH
15192: LD_VAR 0 3
15196: PUSH
15197: LD_INT 3
15199: LESS
15200: AND
15201: IFFALSE 15258
// for i in result do
15203: LD_ADDR_VAR 0 5
15207: PUSH
15208: LD_VAR 0 4
15212: PUSH
15213: FOR_IN
15214: IFFALSE 15256
// if GetTech ( i , side ) <> state then
15216: LD_VAR 0 5
15220: PPUSH
15221: LD_VAR 0 1
15225: PPUSH
15226: CALL_OW 321
15230: PUSH
15231: LD_VAR 0 3
15235: NONEQUAL
15236: IFFALSE 15254
// result := result diff i ;
15238: LD_ADDR_VAR 0 4
15242: PUSH
15243: LD_VAR 0 4
15247: PUSH
15248: LD_VAR 0 5
15252: DIFF
15253: ST_TO_ADDR
15254: GO 15213
15256: POP
15257: POP
// end ;
15258: LD_VAR 0 4
15262: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
15263: LD_INT 0
15265: PPUSH
15266: PPUSH
15267: PPUSH
// result := true ;
15268: LD_ADDR_VAR 0 3
15272: PUSH
15273: LD_INT 1
15275: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
15276: LD_ADDR_VAR 0 5
15280: PUSH
15281: LD_VAR 0 2
15285: PPUSH
15286: CALL_OW 480
15290: ST_TO_ADDR
// if not tmp then
15291: LD_VAR 0 5
15295: NOT
15296: IFFALSE 15300
// exit ;
15298: GO 15349
// for i in tmp do
15300: LD_ADDR_VAR 0 4
15304: PUSH
15305: LD_VAR 0 5
15309: PUSH
15310: FOR_IN
15311: IFFALSE 15347
// if GetTech ( i , side ) <> state_researched then
15313: LD_VAR 0 4
15317: PPUSH
15318: LD_VAR 0 1
15322: PPUSH
15323: CALL_OW 321
15327: PUSH
15328: LD_INT 2
15330: NONEQUAL
15331: IFFALSE 15345
// begin result := false ;
15333: LD_ADDR_VAR 0 3
15337: PUSH
15338: LD_INT 0
15340: ST_TO_ADDR
// exit ;
15341: POP
15342: POP
15343: GO 15349
// end ;
15345: GO 15310
15347: POP
15348: POP
// end ;
15349: LD_VAR 0 3
15353: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
15354: LD_INT 0
15356: PPUSH
15357: PPUSH
15358: PPUSH
15359: PPUSH
15360: PPUSH
15361: PPUSH
15362: PPUSH
15363: PPUSH
15364: PPUSH
15365: PPUSH
15366: PPUSH
15367: PPUSH
15368: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
15369: LD_VAR 0 1
15373: NOT
15374: PUSH
15375: LD_VAR 0 1
15379: PPUSH
15380: CALL_OW 257
15384: PUSH
15385: LD_INT 9
15387: NONEQUAL
15388: OR
15389: IFFALSE 15393
// exit ;
15391: GO 15966
// side := GetSide ( unit ) ;
15393: LD_ADDR_VAR 0 9
15397: PUSH
15398: LD_VAR 0 1
15402: PPUSH
15403: CALL_OW 255
15407: ST_TO_ADDR
// tech_space := tech_spacanom ;
15408: LD_ADDR_VAR 0 12
15412: PUSH
15413: LD_INT 29
15415: ST_TO_ADDR
// tech_time := tech_taurad ;
15416: LD_ADDR_VAR 0 13
15420: PUSH
15421: LD_INT 28
15423: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
15424: LD_ADDR_VAR 0 11
15428: PUSH
15429: LD_VAR 0 1
15433: PPUSH
15434: CALL_OW 310
15438: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
15439: LD_VAR 0 11
15443: PPUSH
15444: CALL_OW 247
15448: PUSH
15449: LD_INT 2
15451: EQUAL
15452: IFFALSE 15456
// exit ;
15454: GO 15966
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15456: LD_ADDR_VAR 0 8
15460: PUSH
15461: LD_INT 81
15463: PUSH
15464: LD_VAR 0 9
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PUSH
15473: LD_INT 3
15475: PUSH
15476: LD_INT 21
15478: PUSH
15479: LD_INT 3
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PPUSH
15494: CALL_OW 69
15498: ST_TO_ADDR
// if not tmp then
15499: LD_VAR 0 8
15503: NOT
15504: IFFALSE 15508
// exit ;
15506: GO 15966
// if in_unit then
15508: LD_VAR 0 11
15512: IFFALSE 15536
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
15514: LD_ADDR_VAR 0 10
15518: PUSH
15519: LD_VAR 0 8
15523: PPUSH
15524: LD_VAR 0 11
15528: PPUSH
15529: CALL_OW 74
15533: ST_TO_ADDR
15534: GO 15556
// enemy := NearestUnitToUnit ( tmp , unit ) ;
15536: LD_ADDR_VAR 0 10
15540: PUSH
15541: LD_VAR 0 8
15545: PPUSH
15546: LD_VAR 0 1
15550: PPUSH
15551: CALL_OW 74
15555: ST_TO_ADDR
// if not enemy then
15556: LD_VAR 0 10
15560: NOT
15561: IFFALSE 15565
// exit ;
15563: GO 15966
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
15565: LD_VAR 0 11
15569: PUSH
15570: LD_VAR 0 11
15574: PPUSH
15575: LD_VAR 0 10
15579: PPUSH
15580: CALL_OW 296
15584: PUSH
15585: LD_INT 13
15587: GREATER
15588: AND
15589: PUSH
15590: LD_VAR 0 1
15594: PPUSH
15595: LD_VAR 0 10
15599: PPUSH
15600: CALL_OW 296
15604: PUSH
15605: LD_INT 12
15607: GREATER
15608: OR
15609: IFFALSE 15613
// exit ;
15611: GO 15966
// missile := [ 1 ] ;
15613: LD_ADDR_VAR 0 14
15617: PUSH
15618: LD_INT 1
15620: PUSH
15621: EMPTY
15622: LIST
15623: ST_TO_ADDR
// if Researched ( side , tech_space ) then
15624: LD_VAR 0 9
15628: PPUSH
15629: LD_VAR 0 12
15633: PPUSH
15634: CALL_OW 325
15638: IFFALSE 15667
// missile := Replace ( missile , missile + 1 , 2 ) ;
15640: LD_ADDR_VAR 0 14
15644: PUSH
15645: LD_VAR 0 14
15649: PPUSH
15650: LD_VAR 0 14
15654: PUSH
15655: LD_INT 1
15657: PLUS
15658: PPUSH
15659: LD_INT 2
15661: PPUSH
15662: CALL_OW 1
15666: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
15667: LD_VAR 0 9
15671: PPUSH
15672: LD_VAR 0 13
15676: PPUSH
15677: CALL_OW 325
15681: PUSH
15682: LD_VAR 0 10
15686: PPUSH
15687: CALL_OW 255
15691: PPUSH
15692: LD_VAR 0 13
15696: PPUSH
15697: CALL_OW 325
15701: NOT
15702: AND
15703: IFFALSE 15732
// missile := Replace ( missile , missile + 1 , 3 ) ;
15705: LD_ADDR_VAR 0 14
15709: PUSH
15710: LD_VAR 0 14
15714: PPUSH
15715: LD_VAR 0 14
15719: PUSH
15720: LD_INT 1
15722: PLUS
15723: PPUSH
15724: LD_INT 3
15726: PPUSH
15727: CALL_OW 1
15731: ST_TO_ADDR
// if missile < 2 then
15732: LD_VAR 0 14
15736: PUSH
15737: LD_INT 2
15739: LESS
15740: IFFALSE 15744
// exit ;
15742: GO 15966
// x := GetX ( enemy ) ;
15744: LD_ADDR_VAR 0 4
15748: PUSH
15749: LD_VAR 0 10
15753: PPUSH
15754: CALL_OW 250
15758: ST_TO_ADDR
// y := GetY ( enemy ) ;
15759: LD_ADDR_VAR 0 5
15763: PUSH
15764: LD_VAR 0 10
15768: PPUSH
15769: CALL_OW 251
15773: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
15774: LD_ADDR_VAR 0 6
15778: PUSH
15779: LD_VAR 0 4
15783: PUSH
15784: LD_INT 1
15786: NEG
15787: PPUSH
15788: LD_INT 1
15790: PPUSH
15791: CALL_OW 12
15795: PLUS
15796: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
15797: LD_ADDR_VAR 0 7
15801: PUSH
15802: LD_VAR 0 5
15806: PUSH
15807: LD_INT 1
15809: NEG
15810: PPUSH
15811: LD_INT 1
15813: PPUSH
15814: CALL_OW 12
15818: PLUS
15819: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15820: LD_VAR 0 6
15824: PPUSH
15825: LD_VAR 0 7
15829: PPUSH
15830: CALL_OW 488
15834: NOT
15835: IFFALSE 15857
// begin _x := x ;
15837: LD_ADDR_VAR 0 6
15841: PUSH
15842: LD_VAR 0 4
15846: ST_TO_ADDR
// _y := y ;
15847: LD_ADDR_VAR 0 7
15851: PUSH
15852: LD_VAR 0 5
15856: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
15857: LD_ADDR_VAR 0 3
15861: PUSH
15862: LD_INT 1
15864: PPUSH
15865: LD_VAR 0 14
15869: PPUSH
15870: CALL_OW 12
15874: ST_TO_ADDR
// case i of 1 :
15875: LD_VAR 0 3
15879: PUSH
15880: LD_INT 1
15882: DOUBLE
15883: EQUAL
15884: IFTRUE 15888
15886: GO 15905
15888: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
15889: LD_VAR 0 1
15893: PPUSH
15894: LD_VAR 0 10
15898: PPUSH
15899: CALL_OW 115
15903: GO 15966
15905: LD_INT 2
15907: DOUBLE
15908: EQUAL
15909: IFTRUE 15913
15911: GO 15935
15913: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
15914: LD_VAR 0 1
15918: PPUSH
15919: LD_VAR 0 6
15923: PPUSH
15924: LD_VAR 0 7
15928: PPUSH
15929: CALL_OW 153
15933: GO 15966
15935: LD_INT 3
15937: DOUBLE
15938: EQUAL
15939: IFTRUE 15943
15941: GO 15965
15943: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
15944: LD_VAR 0 1
15948: PPUSH
15949: LD_VAR 0 6
15953: PPUSH
15954: LD_VAR 0 7
15958: PPUSH
15959: CALL_OW 154
15963: GO 15966
15965: POP
// end ;
15966: LD_VAR 0 2
15970: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
15971: LD_INT 0
15973: PPUSH
15974: PPUSH
15975: PPUSH
15976: PPUSH
15977: PPUSH
15978: PPUSH
// if not unit or not building then
15979: LD_VAR 0 1
15983: NOT
15984: PUSH
15985: LD_VAR 0 2
15989: NOT
15990: OR
15991: IFFALSE 15995
// exit ;
15993: GO 16153
// x := GetX ( building ) ;
15995: LD_ADDR_VAR 0 5
15999: PUSH
16000: LD_VAR 0 2
16004: PPUSH
16005: CALL_OW 250
16009: ST_TO_ADDR
// y := GetY ( building ) ;
16010: LD_ADDR_VAR 0 6
16014: PUSH
16015: LD_VAR 0 2
16019: PPUSH
16020: CALL_OW 251
16024: ST_TO_ADDR
// for i = 0 to 5 do
16025: LD_ADDR_VAR 0 4
16029: PUSH
16030: DOUBLE
16031: LD_INT 0
16033: DEC
16034: ST_TO_ADDR
16035: LD_INT 5
16037: PUSH
16038: FOR_TO
16039: IFFALSE 16151
// begin _x := ShiftX ( x , i , 3 ) ;
16041: LD_ADDR_VAR 0 7
16045: PUSH
16046: LD_VAR 0 5
16050: PPUSH
16051: LD_VAR 0 4
16055: PPUSH
16056: LD_INT 3
16058: PPUSH
16059: CALL_OW 272
16063: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16064: LD_ADDR_VAR 0 8
16068: PUSH
16069: LD_VAR 0 6
16073: PPUSH
16074: LD_VAR 0 4
16078: PPUSH
16079: LD_INT 3
16081: PPUSH
16082: CALL_OW 273
16086: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16087: LD_VAR 0 7
16091: PPUSH
16092: LD_VAR 0 8
16096: PPUSH
16097: CALL_OW 488
16101: NOT
16102: IFFALSE 16106
// continue ;
16104: GO 16038
// if HexInfo ( _x , _y ) = 0 then
16106: LD_VAR 0 7
16110: PPUSH
16111: LD_VAR 0 8
16115: PPUSH
16116: CALL_OW 428
16120: PUSH
16121: LD_INT 0
16123: EQUAL
16124: IFFALSE 16149
// begin ComMoveXY ( unit , _x , _y ) ;
16126: LD_VAR 0 1
16130: PPUSH
16131: LD_VAR 0 7
16135: PPUSH
16136: LD_VAR 0 8
16140: PPUSH
16141: CALL_OW 111
// exit ;
16145: POP
16146: POP
16147: GO 16153
// end ; end ;
16149: GO 16038
16151: POP
16152: POP
// end ;
16153: LD_VAR 0 3
16157: RET
// export function ScanBase ( side , base_area ) ; begin
16158: LD_INT 0
16160: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16161: LD_ADDR_VAR 0 3
16165: PUSH
16166: LD_VAR 0 2
16170: PPUSH
16171: LD_INT 81
16173: PUSH
16174: LD_VAR 0 1
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PPUSH
16183: CALL_OW 70
16187: ST_TO_ADDR
// end ;
16188: LD_VAR 0 3
16192: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16193: LD_INT 0
16195: PPUSH
16196: PPUSH
16197: PPUSH
16198: PPUSH
// result := false ;
16199: LD_ADDR_VAR 0 2
16203: PUSH
16204: LD_INT 0
16206: ST_TO_ADDR
// side := GetSide ( unit ) ;
16207: LD_ADDR_VAR 0 3
16211: PUSH
16212: LD_VAR 0 1
16216: PPUSH
16217: CALL_OW 255
16221: ST_TO_ADDR
// nat := GetNation ( unit ) ;
16222: LD_ADDR_VAR 0 4
16226: PUSH
16227: LD_VAR 0 1
16231: PPUSH
16232: CALL_OW 248
16236: ST_TO_ADDR
// case nat of 1 :
16237: LD_VAR 0 4
16241: PUSH
16242: LD_INT 1
16244: DOUBLE
16245: EQUAL
16246: IFTRUE 16250
16248: GO 16261
16250: POP
// tech := tech_lassight ; 2 :
16251: LD_ADDR_VAR 0 5
16255: PUSH
16256: LD_INT 12
16258: ST_TO_ADDR
16259: GO 16300
16261: LD_INT 2
16263: DOUBLE
16264: EQUAL
16265: IFTRUE 16269
16267: GO 16280
16269: POP
// tech := tech_mortar ; 3 :
16270: LD_ADDR_VAR 0 5
16274: PUSH
16275: LD_INT 41
16277: ST_TO_ADDR
16278: GO 16300
16280: LD_INT 3
16282: DOUBLE
16283: EQUAL
16284: IFTRUE 16288
16286: GO 16299
16288: POP
// tech := tech_bazooka ; end ;
16289: LD_ADDR_VAR 0 5
16293: PUSH
16294: LD_INT 44
16296: ST_TO_ADDR
16297: GO 16300
16299: POP
// if Researched ( side , tech ) then
16300: LD_VAR 0 3
16304: PPUSH
16305: LD_VAR 0 5
16309: PPUSH
16310: CALL_OW 325
16314: IFFALSE 16341
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
16316: LD_ADDR_VAR 0 2
16320: PUSH
16321: LD_INT 5
16323: PUSH
16324: LD_INT 8
16326: PUSH
16327: LD_INT 9
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: LIST
16334: PUSH
16335: LD_VAR 0 4
16339: ARRAY
16340: ST_TO_ADDR
// end ;
16341: LD_VAR 0 2
16345: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
16346: LD_INT 0
16348: PPUSH
16349: PPUSH
16350: PPUSH
// if not mines then
16351: LD_VAR 0 2
16355: NOT
16356: IFFALSE 16360
// exit ;
16358: GO 16504
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16360: LD_ADDR_VAR 0 5
16364: PUSH
16365: LD_INT 81
16367: PUSH
16368: LD_VAR 0 1
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 3
16379: PUSH
16380: LD_INT 21
16382: PUSH
16383: LD_INT 3
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PPUSH
16398: CALL_OW 69
16402: ST_TO_ADDR
// for i in mines do
16403: LD_ADDR_VAR 0 4
16407: PUSH
16408: LD_VAR 0 2
16412: PUSH
16413: FOR_IN
16414: IFFALSE 16502
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
16416: LD_VAR 0 4
16420: PUSH
16421: LD_INT 1
16423: ARRAY
16424: PPUSH
16425: LD_VAR 0 4
16429: PUSH
16430: LD_INT 2
16432: ARRAY
16433: PPUSH
16434: CALL_OW 458
16438: NOT
16439: IFFALSE 16443
// continue ;
16441: GO 16413
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
16443: LD_VAR 0 4
16447: PUSH
16448: LD_INT 1
16450: ARRAY
16451: PPUSH
16452: LD_VAR 0 4
16456: PUSH
16457: LD_INT 2
16459: ARRAY
16460: PPUSH
16461: CALL_OW 428
16465: PUSH
16466: LD_VAR 0 5
16470: IN
16471: IFFALSE 16500
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
16473: LD_VAR 0 4
16477: PUSH
16478: LD_INT 1
16480: ARRAY
16481: PPUSH
16482: LD_VAR 0 4
16486: PUSH
16487: LD_INT 2
16489: ARRAY
16490: PPUSH
16491: LD_VAR 0 1
16495: PPUSH
16496: CALL_OW 456
// end ;
16500: GO 16413
16502: POP
16503: POP
// end ;
16504: LD_VAR 0 3
16508: RET
// export function Count ( array ) ; var i ; begin
16509: LD_INT 0
16511: PPUSH
16512: PPUSH
// result := 0 ;
16513: LD_ADDR_VAR 0 2
16517: PUSH
16518: LD_INT 0
16520: ST_TO_ADDR
// for i in array do
16521: LD_ADDR_VAR 0 3
16525: PUSH
16526: LD_VAR 0 1
16530: PUSH
16531: FOR_IN
16532: IFFALSE 16556
// if i then
16534: LD_VAR 0 3
16538: IFFALSE 16554
// result := result + 1 ;
16540: LD_ADDR_VAR 0 2
16544: PUSH
16545: LD_VAR 0 2
16549: PUSH
16550: LD_INT 1
16552: PLUS
16553: ST_TO_ADDR
16554: GO 16531
16556: POP
16557: POP
// end ;
16558: LD_VAR 0 2
16562: RET
// export function IsEmpty ( building ) ; begin
16563: LD_INT 0
16565: PPUSH
// if not building then
16566: LD_VAR 0 1
16570: NOT
16571: IFFALSE 16575
// exit ;
16573: GO 16618
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
16575: LD_ADDR_VAR 0 2
16579: PUSH
16580: LD_VAR 0 1
16584: PUSH
16585: LD_INT 22
16587: PUSH
16588: LD_VAR 0 1
16592: PPUSH
16593: CALL_OW 255
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 58
16604: PUSH
16605: EMPTY
16606: LIST
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: IN
16617: ST_TO_ADDR
// end ;
16618: LD_VAR 0 2
16622: RET
// export function IsNotFull ( building ) ; var places ; begin
16623: LD_INT 0
16625: PPUSH
16626: PPUSH
// if not building then
16627: LD_VAR 0 1
16631: NOT
16632: IFFALSE 16636
// exit ;
16634: GO 16807
// result := false ;
16636: LD_ADDR_VAR 0 2
16640: PUSH
16641: LD_INT 0
16643: ST_TO_ADDR
// places := 0 ;
16644: LD_ADDR_VAR 0 3
16648: PUSH
16649: LD_INT 0
16651: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
16652: LD_VAR 0 1
16656: PPUSH
16657: CALL_OW 266
16661: PUSH
16662: LD_INT 0
16664: DOUBLE
16665: EQUAL
16666: IFTRUE 16724
16668: LD_INT 1
16670: DOUBLE
16671: EQUAL
16672: IFTRUE 16724
16674: LD_INT 6
16676: DOUBLE
16677: EQUAL
16678: IFTRUE 16724
16680: LD_INT 7
16682: DOUBLE
16683: EQUAL
16684: IFTRUE 16724
16686: LD_INT 8
16688: DOUBLE
16689: EQUAL
16690: IFTRUE 16724
16692: LD_INT 4
16694: DOUBLE
16695: EQUAL
16696: IFTRUE 16724
16698: LD_INT 5
16700: DOUBLE
16701: EQUAL
16702: IFTRUE 16724
16704: LD_INT 2
16706: DOUBLE
16707: EQUAL
16708: IFTRUE 16724
16710: LD_INT 3
16712: DOUBLE
16713: EQUAL
16714: IFTRUE 16724
16716: LD_INT 35
16718: DOUBLE
16719: EQUAL
16720: IFTRUE 16724
16722: GO 16735
16724: POP
// places := 6 ; b_bunker , b_breastwork :
16725: LD_ADDR_VAR 0 3
16729: PUSH
16730: LD_INT 6
16732: ST_TO_ADDR
16733: GO 16780
16735: LD_INT 32
16737: DOUBLE
16738: EQUAL
16739: IFTRUE 16749
16741: LD_INT 31
16743: DOUBLE
16744: EQUAL
16745: IFTRUE 16749
16747: GO 16760
16749: POP
// places := 1 ; b_control_tower :
16750: LD_ADDR_VAR 0 3
16754: PUSH
16755: LD_INT 1
16757: ST_TO_ADDR
16758: GO 16780
16760: LD_INT 36
16762: DOUBLE
16763: EQUAL
16764: IFTRUE 16768
16766: GO 16779
16768: POP
// places := 3 ; end ;
16769: LD_ADDR_VAR 0 3
16773: PUSH
16774: LD_INT 3
16776: ST_TO_ADDR
16777: GO 16780
16779: POP
// if places then
16780: LD_VAR 0 3
16784: IFFALSE 16807
// result := UnitsInside ( building ) < places ;
16786: LD_ADDR_VAR 0 2
16790: PUSH
16791: LD_VAR 0 1
16795: PPUSH
16796: CALL_OW 313
16800: PUSH
16801: LD_VAR 0 3
16805: LESS
16806: ST_TO_ADDR
// end ;
16807: LD_VAR 0 2
16811: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
16812: LD_INT 0
16814: PPUSH
16815: PPUSH
16816: PPUSH
16817: PPUSH
// tmp := [ ] ;
16818: LD_ADDR_VAR 0 3
16822: PUSH
16823: EMPTY
16824: ST_TO_ADDR
// list := [ ] ;
16825: LD_ADDR_VAR 0 5
16829: PUSH
16830: EMPTY
16831: ST_TO_ADDR
// for i = 16 to 25 do
16832: LD_ADDR_VAR 0 4
16836: PUSH
16837: DOUBLE
16838: LD_INT 16
16840: DEC
16841: ST_TO_ADDR
16842: LD_INT 25
16844: PUSH
16845: FOR_TO
16846: IFFALSE 16919
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
16848: LD_ADDR_VAR 0 3
16852: PUSH
16853: LD_VAR 0 3
16857: PUSH
16858: LD_INT 22
16860: PUSH
16861: LD_VAR 0 1
16865: PPUSH
16866: CALL_OW 255
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 91
16877: PUSH
16878: LD_VAR 0 1
16882: PUSH
16883: LD_INT 6
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 30
16893: PUSH
16894: LD_VAR 0 4
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: LIST
16907: PUSH
16908: EMPTY
16909: LIST
16910: PPUSH
16911: CALL_OW 69
16915: ADD
16916: ST_TO_ADDR
16917: GO 16845
16919: POP
16920: POP
// for i = 1 to tmp do
16921: LD_ADDR_VAR 0 4
16925: PUSH
16926: DOUBLE
16927: LD_INT 1
16929: DEC
16930: ST_TO_ADDR
16931: LD_VAR 0 3
16935: PUSH
16936: FOR_TO
16937: IFFALSE 17025
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
16939: LD_ADDR_VAR 0 5
16943: PUSH
16944: LD_VAR 0 5
16948: PUSH
16949: LD_VAR 0 3
16953: PUSH
16954: LD_VAR 0 4
16958: ARRAY
16959: PPUSH
16960: CALL_OW 266
16964: PUSH
16965: LD_VAR 0 3
16969: PUSH
16970: LD_VAR 0 4
16974: ARRAY
16975: PPUSH
16976: CALL_OW 250
16980: PUSH
16981: LD_VAR 0 3
16985: PUSH
16986: LD_VAR 0 4
16990: ARRAY
16991: PPUSH
16992: CALL_OW 251
16996: PUSH
16997: LD_VAR 0 3
17001: PUSH
17002: LD_VAR 0 4
17006: ARRAY
17007: PPUSH
17008: CALL_OW 254
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: PUSH
17019: EMPTY
17020: LIST
17021: ADD
17022: ST_TO_ADDR
17023: GO 16936
17025: POP
17026: POP
// result := list ;
17027: LD_ADDR_VAR 0 2
17031: PUSH
17032: LD_VAR 0 5
17036: ST_TO_ADDR
// end ;
17037: LD_VAR 0 2
17041: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17042: LD_INT 0
17044: PPUSH
17045: PPUSH
17046: PPUSH
17047: PPUSH
17048: PPUSH
17049: PPUSH
17050: PPUSH
// if not factory then
17051: LD_VAR 0 1
17055: NOT
17056: IFFALSE 17060
// exit ;
17058: GO 17653
// if control = control_apeman then
17060: LD_VAR 0 4
17064: PUSH
17065: LD_INT 5
17067: EQUAL
17068: IFFALSE 17177
// begin tmp := UnitsInside ( factory ) ;
17070: LD_ADDR_VAR 0 8
17074: PUSH
17075: LD_VAR 0 1
17079: PPUSH
17080: CALL_OW 313
17084: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17085: LD_VAR 0 8
17089: PPUSH
17090: LD_INT 25
17092: PUSH
17093: LD_INT 12
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PPUSH
17100: CALL_OW 72
17104: NOT
17105: IFFALSE 17115
// control := control_manual ;
17107: LD_ADDR_VAR 0 4
17111: PUSH
17112: LD_INT 1
17114: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17115: LD_ADDR_VAR 0 8
17119: PUSH
17120: LD_VAR 0 1
17124: PPUSH
17125: CALL 16812 0 1
17129: ST_TO_ADDR
// if tmp then
17130: LD_VAR 0 8
17134: IFFALSE 17177
// begin for i in tmp do
17136: LD_ADDR_VAR 0 7
17140: PUSH
17141: LD_VAR 0 8
17145: PUSH
17146: FOR_IN
17147: IFFALSE 17175
// if i [ 1 ] = b_ext_radio then
17149: LD_VAR 0 7
17153: PUSH
17154: LD_INT 1
17156: ARRAY
17157: PUSH
17158: LD_INT 22
17160: EQUAL
17161: IFFALSE 17173
// begin control := control_remote ;
17163: LD_ADDR_VAR 0 4
17167: PUSH
17168: LD_INT 2
17170: ST_TO_ADDR
// break ;
17171: GO 17175
// end ;
17173: GO 17146
17175: POP
17176: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17177: LD_VAR 0 1
17181: PPUSH
17182: LD_VAR 0 2
17186: PPUSH
17187: LD_VAR 0 3
17191: PPUSH
17192: LD_VAR 0 4
17196: PPUSH
17197: LD_VAR 0 5
17201: PPUSH
17202: CALL_OW 448
17206: IFFALSE 17241
// begin result := [ chassis , engine , control , weapon ] ;
17208: LD_ADDR_VAR 0 6
17212: PUSH
17213: LD_VAR 0 2
17217: PUSH
17218: LD_VAR 0 3
17222: PUSH
17223: LD_VAR 0 4
17227: PUSH
17228: LD_VAR 0 5
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: ST_TO_ADDR
// exit ;
17239: GO 17653
// end ; _chassis := AvailableChassisList ( factory ) ;
17241: LD_ADDR_VAR 0 9
17245: PUSH
17246: LD_VAR 0 1
17250: PPUSH
17251: CALL_OW 475
17255: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17256: LD_ADDR_VAR 0 11
17260: PUSH
17261: LD_VAR 0 1
17265: PPUSH
17266: CALL_OW 476
17270: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17271: LD_ADDR_VAR 0 12
17275: PUSH
17276: LD_VAR 0 1
17280: PPUSH
17281: CALL_OW 477
17285: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17286: LD_ADDR_VAR 0 10
17290: PUSH
17291: LD_VAR 0 1
17295: PPUSH
17296: CALL_OW 478
17300: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
17301: LD_VAR 0 9
17305: NOT
17306: PUSH
17307: LD_VAR 0 11
17311: NOT
17312: OR
17313: PUSH
17314: LD_VAR 0 12
17318: NOT
17319: OR
17320: PUSH
17321: LD_VAR 0 10
17325: NOT
17326: OR
17327: IFFALSE 17362
// begin result := [ chassis , engine , control , weapon ] ;
17329: LD_ADDR_VAR 0 6
17333: PUSH
17334: LD_VAR 0 2
17338: PUSH
17339: LD_VAR 0 3
17343: PUSH
17344: LD_VAR 0 4
17348: PUSH
17349: LD_VAR 0 5
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: ST_TO_ADDR
// exit ;
17360: GO 17653
// end ; if not chassis in _chassis then
17362: LD_VAR 0 2
17366: PUSH
17367: LD_VAR 0 9
17371: IN
17372: NOT
17373: IFFALSE 17399
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17375: LD_ADDR_VAR 0 2
17379: PUSH
17380: LD_VAR 0 9
17384: PUSH
17385: LD_INT 1
17387: PPUSH
17388: LD_VAR 0 9
17392: PPUSH
17393: CALL_OW 12
17397: ARRAY
17398: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
17399: LD_VAR 0 2
17403: PPUSH
17404: LD_VAR 0 3
17408: PPUSH
17409: CALL 17658 0 2
17413: NOT
17414: IFFALSE 17473
// repeat engine := _engine [ 1 ] ;
17416: LD_ADDR_VAR 0 3
17420: PUSH
17421: LD_VAR 0 11
17425: PUSH
17426: LD_INT 1
17428: ARRAY
17429: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
17430: LD_ADDR_VAR 0 11
17434: PUSH
17435: LD_VAR 0 11
17439: PPUSH
17440: LD_INT 1
17442: PPUSH
17443: CALL_OW 3
17447: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
17448: LD_VAR 0 2
17452: PPUSH
17453: LD_VAR 0 3
17457: PPUSH
17458: CALL 17658 0 2
17462: PUSH
17463: LD_VAR 0 11
17467: PUSH
17468: EMPTY
17469: EQUAL
17470: OR
17471: IFFALSE 17416
// if not control in _control then
17473: LD_VAR 0 4
17477: PUSH
17478: LD_VAR 0 12
17482: IN
17483: NOT
17484: IFFALSE 17510
// control := _control [ rand ( 1 , _control ) ] ;
17486: LD_ADDR_VAR 0 4
17490: PUSH
17491: LD_VAR 0 12
17495: PUSH
17496: LD_INT 1
17498: PPUSH
17499: LD_VAR 0 12
17503: PPUSH
17504: CALL_OW 12
17508: ARRAY
17509: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
17510: LD_VAR 0 2
17514: PPUSH
17515: LD_VAR 0 5
17519: PPUSH
17520: CALL 17878 0 2
17524: NOT
17525: IFFALSE 17584
// repeat weapon := _weapon [ 1 ] ;
17527: LD_ADDR_VAR 0 5
17531: PUSH
17532: LD_VAR 0 10
17536: PUSH
17537: LD_INT 1
17539: ARRAY
17540: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
17541: LD_ADDR_VAR 0 10
17545: PUSH
17546: LD_VAR 0 10
17550: PPUSH
17551: LD_INT 1
17553: PPUSH
17554: CALL_OW 3
17558: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
17559: LD_VAR 0 2
17563: PPUSH
17564: LD_VAR 0 5
17568: PPUSH
17569: CALL 17878 0 2
17573: PUSH
17574: LD_VAR 0 10
17578: PUSH
17579: EMPTY
17580: EQUAL
17581: OR
17582: IFFALSE 17527
// result := [ ] ;
17584: LD_ADDR_VAR 0 6
17588: PUSH
17589: EMPTY
17590: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17591: LD_VAR 0 1
17595: PPUSH
17596: LD_VAR 0 2
17600: PPUSH
17601: LD_VAR 0 3
17605: PPUSH
17606: LD_VAR 0 4
17610: PPUSH
17611: LD_VAR 0 5
17615: PPUSH
17616: CALL_OW 448
17620: IFFALSE 17653
// result := [ chassis , engine , control , weapon ] ;
17622: LD_ADDR_VAR 0 6
17626: PUSH
17627: LD_VAR 0 2
17631: PUSH
17632: LD_VAR 0 3
17636: PUSH
17637: LD_VAR 0 4
17641: PUSH
17642: LD_VAR 0 5
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: ST_TO_ADDR
// end ;
17653: LD_VAR 0 6
17657: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
17658: LD_INT 0
17660: PPUSH
// if not chassis or not engine then
17661: LD_VAR 0 1
17665: NOT
17666: PUSH
17667: LD_VAR 0 2
17671: NOT
17672: OR
17673: IFFALSE 17677
// exit ;
17675: GO 17873
// case engine of engine_solar :
17677: LD_VAR 0 2
17681: PUSH
17682: LD_INT 2
17684: DOUBLE
17685: EQUAL
17686: IFTRUE 17690
17688: GO 17728
17690: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
17691: LD_ADDR_VAR 0 3
17695: PUSH
17696: LD_INT 11
17698: PUSH
17699: LD_INT 12
17701: PUSH
17702: LD_INT 13
17704: PUSH
17705: LD_INT 14
17707: PUSH
17708: LD_INT 1
17710: PUSH
17711: LD_INT 2
17713: PUSH
17714: LD_INT 3
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: ST_TO_ADDR
17726: GO 17857
17728: LD_INT 1
17730: DOUBLE
17731: EQUAL
17732: IFTRUE 17736
17734: GO 17798
17736: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
17737: LD_ADDR_VAR 0 3
17741: PUSH
17742: LD_INT 11
17744: PUSH
17745: LD_INT 12
17747: PUSH
17748: LD_INT 13
17750: PUSH
17751: LD_INT 14
17753: PUSH
17754: LD_INT 1
17756: PUSH
17757: LD_INT 2
17759: PUSH
17760: LD_INT 3
17762: PUSH
17763: LD_INT 4
17765: PUSH
17766: LD_INT 5
17768: PUSH
17769: LD_INT 21
17771: PUSH
17772: LD_INT 23
17774: PUSH
17775: LD_INT 22
17777: PUSH
17778: LD_INT 24
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: ST_TO_ADDR
17796: GO 17857
17798: LD_INT 3
17800: DOUBLE
17801: EQUAL
17802: IFTRUE 17806
17804: GO 17856
17806: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17807: LD_ADDR_VAR 0 3
17811: PUSH
17812: LD_INT 13
17814: PUSH
17815: LD_INT 14
17817: PUSH
17818: LD_INT 2
17820: PUSH
17821: LD_INT 3
17823: PUSH
17824: LD_INT 4
17826: PUSH
17827: LD_INT 5
17829: PUSH
17830: LD_INT 21
17832: PUSH
17833: LD_INT 22
17835: PUSH
17836: LD_INT 23
17838: PUSH
17839: LD_INT 24
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: ST_TO_ADDR
17854: GO 17857
17856: POP
// result := ( chassis in result ) ;
17857: LD_ADDR_VAR 0 3
17861: PUSH
17862: LD_VAR 0 1
17866: PUSH
17867: LD_VAR 0 3
17871: IN
17872: ST_TO_ADDR
// end ;
17873: LD_VAR 0 3
17877: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
17878: LD_INT 0
17880: PPUSH
// if not chassis or not weapon then
17881: LD_VAR 0 1
17885: NOT
17886: PUSH
17887: LD_VAR 0 2
17891: NOT
17892: OR
17893: IFFALSE 17897
// exit ;
17895: GO 18957
// case weapon of us_machine_gun :
17897: LD_VAR 0 2
17901: PUSH
17902: LD_INT 2
17904: DOUBLE
17905: EQUAL
17906: IFTRUE 17910
17908: GO 17940
17910: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
17911: LD_ADDR_VAR 0 3
17915: PUSH
17916: LD_INT 1
17918: PUSH
17919: LD_INT 2
17921: PUSH
17922: LD_INT 3
17924: PUSH
17925: LD_INT 4
17927: PUSH
17928: LD_INT 5
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: ST_TO_ADDR
17938: GO 18941
17940: LD_INT 3
17942: DOUBLE
17943: EQUAL
17944: IFTRUE 17948
17946: GO 17978
17948: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
17949: LD_ADDR_VAR 0 3
17953: PUSH
17954: LD_INT 1
17956: PUSH
17957: LD_INT 2
17959: PUSH
17960: LD_INT 3
17962: PUSH
17963: LD_INT 4
17965: PUSH
17966: LD_INT 5
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: ST_TO_ADDR
17976: GO 18941
17978: LD_INT 11
17980: DOUBLE
17981: EQUAL
17982: IFTRUE 17986
17984: GO 18016
17986: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
17987: LD_ADDR_VAR 0 3
17991: PUSH
17992: LD_INT 1
17994: PUSH
17995: LD_INT 2
17997: PUSH
17998: LD_INT 3
18000: PUSH
18001: LD_INT 4
18003: PUSH
18004: LD_INT 5
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: ST_TO_ADDR
18014: GO 18941
18016: LD_INT 4
18018: DOUBLE
18019: EQUAL
18020: IFTRUE 18024
18022: GO 18050
18024: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18025: LD_ADDR_VAR 0 3
18029: PUSH
18030: LD_INT 2
18032: PUSH
18033: LD_INT 3
18035: PUSH
18036: LD_INT 4
18038: PUSH
18039: LD_INT 5
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: ST_TO_ADDR
18048: GO 18941
18050: LD_INT 5
18052: DOUBLE
18053: EQUAL
18054: IFTRUE 18058
18056: GO 18084
18058: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18059: LD_ADDR_VAR 0 3
18063: PUSH
18064: LD_INT 2
18066: PUSH
18067: LD_INT 3
18069: PUSH
18070: LD_INT 4
18072: PUSH
18073: LD_INT 5
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: ST_TO_ADDR
18082: GO 18941
18084: LD_INT 9
18086: DOUBLE
18087: EQUAL
18088: IFTRUE 18092
18090: GO 18118
18092: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18093: LD_ADDR_VAR 0 3
18097: PUSH
18098: LD_INT 2
18100: PUSH
18101: LD_INT 3
18103: PUSH
18104: LD_INT 4
18106: PUSH
18107: LD_INT 5
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: ST_TO_ADDR
18116: GO 18941
18118: LD_INT 7
18120: DOUBLE
18121: EQUAL
18122: IFTRUE 18126
18124: GO 18152
18126: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18127: LD_ADDR_VAR 0 3
18131: PUSH
18132: LD_INT 2
18134: PUSH
18135: LD_INT 3
18137: PUSH
18138: LD_INT 4
18140: PUSH
18141: LD_INT 5
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: ST_TO_ADDR
18150: GO 18941
18152: LD_INT 12
18154: DOUBLE
18155: EQUAL
18156: IFTRUE 18160
18158: GO 18186
18160: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18161: LD_ADDR_VAR 0 3
18165: PUSH
18166: LD_INT 2
18168: PUSH
18169: LD_INT 3
18171: PUSH
18172: LD_INT 4
18174: PUSH
18175: LD_INT 5
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: ST_TO_ADDR
18184: GO 18941
18186: LD_INT 13
18188: DOUBLE
18189: EQUAL
18190: IFTRUE 18194
18192: GO 18220
18194: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18195: LD_ADDR_VAR 0 3
18199: PUSH
18200: LD_INT 2
18202: PUSH
18203: LD_INT 3
18205: PUSH
18206: LD_INT 4
18208: PUSH
18209: LD_INT 5
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: ST_TO_ADDR
18218: GO 18941
18220: LD_INT 14
18222: DOUBLE
18223: EQUAL
18224: IFTRUE 18228
18226: GO 18246
18228: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18229: LD_ADDR_VAR 0 3
18233: PUSH
18234: LD_INT 4
18236: PUSH
18237: LD_INT 5
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: ST_TO_ADDR
18244: GO 18941
18246: LD_INT 6
18248: DOUBLE
18249: EQUAL
18250: IFTRUE 18254
18252: GO 18272
18254: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18255: LD_ADDR_VAR 0 3
18259: PUSH
18260: LD_INT 4
18262: PUSH
18263: LD_INT 5
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: ST_TO_ADDR
18270: GO 18941
18272: LD_INT 10
18274: DOUBLE
18275: EQUAL
18276: IFTRUE 18280
18278: GO 18298
18280: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18281: LD_ADDR_VAR 0 3
18285: PUSH
18286: LD_INT 4
18288: PUSH
18289: LD_INT 5
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: ST_TO_ADDR
18296: GO 18941
18298: LD_INT 22
18300: DOUBLE
18301: EQUAL
18302: IFTRUE 18306
18304: GO 18332
18306: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18307: LD_ADDR_VAR 0 3
18311: PUSH
18312: LD_INT 11
18314: PUSH
18315: LD_INT 12
18317: PUSH
18318: LD_INT 13
18320: PUSH
18321: LD_INT 14
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: ST_TO_ADDR
18330: GO 18941
18332: LD_INT 23
18334: DOUBLE
18335: EQUAL
18336: IFTRUE 18340
18338: GO 18366
18340: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18341: LD_ADDR_VAR 0 3
18345: PUSH
18346: LD_INT 11
18348: PUSH
18349: LD_INT 12
18351: PUSH
18352: LD_INT 13
18354: PUSH
18355: LD_INT 14
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: ST_TO_ADDR
18364: GO 18941
18366: LD_INT 24
18368: DOUBLE
18369: EQUAL
18370: IFTRUE 18374
18372: GO 18400
18374: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18375: LD_ADDR_VAR 0 3
18379: PUSH
18380: LD_INT 11
18382: PUSH
18383: LD_INT 12
18385: PUSH
18386: LD_INT 13
18388: PUSH
18389: LD_INT 14
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: ST_TO_ADDR
18398: GO 18941
18400: LD_INT 30
18402: DOUBLE
18403: EQUAL
18404: IFTRUE 18408
18406: GO 18434
18408: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
18409: LD_ADDR_VAR 0 3
18413: PUSH
18414: LD_INT 11
18416: PUSH
18417: LD_INT 12
18419: PUSH
18420: LD_INT 13
18422: PUSH
18423: LD_INT 14
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: ST_TO_ADDR
18432: GO 18941
18434: LD_INT 25
18436: DOUBLE
18437: EQUAL
18438: IFTRUE 18442
18440: GO 18460
18442: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
18443: LD_ADDR_VAR 0 3
18447: PUSH
18448: LD_INT 13
18450: PUSH
18451: LD_INT 14
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: ST_TO_ADDR
18458: GO 18941
18460: LD_INT 27
18462: DOUBLE
18463: EQUAL
18464: IFTRUE 18468
18466: GO 18486
18468: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
18469: LD_ADDR_VAR 0 3
18473: PUSH
18474: LD_INT 13
18476: PUSH
18477: LD_INT 14
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: ST_TO_ADDR
18484: GO 18941
18486: LD_INT 92
18488: DOUBLE
18489: EQUAL
18490: IFTRUE 18494
18492: GO 18520
18494: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
18495: LD_ADDR_VAR 0 3
18499: PUSH
18500: LD_INT 11
18502: PUSH
18503: LD_INT 12
18505: PUSH
18506: LD_INT 13
18508: PUSH
18509: LD_INT 14
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: ST_TO_ADDR
18518: GO 18941
18520: LD_INT 28
18522: DOUBLE
18523: EQUAL
18524: IFTRUE 18528
18526: GO 18546
18528: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
18529: LD_ADDR_VAR 0 3
18533: PUSH
18534: LD_INT 13
18536: PUSH
18537: LD_INT 14
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: ST_TO_ADDR
18544: GO 18941
18546: LD_INT 29
18548: DOUBLE
18549: EQUAL
18550: IFTRUE 18554
18552: GO 18572
18554: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
18555: LD_ADDR_VAR 0 3
18559: PUSH
18560: LD_INT 13
18562: PUSH
18563: LD_INT 14
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: ST_TO_ADDR
18570: GO 18941
18572: LD_INT 31
18574: DOUBLE
18575: EQUAL
18576: IFTRUE 18580
18578: GO 18598
18580: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
18581: LD_ADDR_VAR 0 3
18585: PUSH
18586: LD_INT 13
18588: PUSH
18589: LD_INT 14
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: ST_TO_ADDR
18596: GO 18941
18598: LD_INT 26
18600: DOUBLE
18601: EQUAL
18602: IFTRUE 18606
18604: GO 18624
18606: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
18607: LD_ADDR_VAR 0 3
18611: PUSH
18612: LD_INT 13
18614: PUSH
18615: LD_INT 14
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: ST_TO_ADDR
18622: GO 18941
18624: LD_INT 42
18626: DOUBLE
18627: EQUAL
18628: IFTRUE 18632
18630: GO 18658
18632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
18633: LD_ADDR_VAR 0 3
18637: PUSH
18638: LD_INT 21
18640: PUSH
18641: LD_INT 22
18643: PUSH
18644: LD_INT 23
18646: PUSH
18647: LD_INT 24
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: ST_TO_ADDR
18656: GO 18941
18658: LD_INT 43
18660: DOUBLE
18661: EQUAL
18662: IFTRUE 18666
18664: GO 18692
18666: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
18667: LD_ADDR_VAR 0 3
18671: PUSH
18672: LD_INT 21
18674: PUSH
18675: LD_INT 22
18677: PUSH
18678: LD_INT 23
18680: PUSH
18681: LD_INT 24
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: ST_TO_ADDR
18690: GO 18941
18692: LD_INT 44
18694: DOUBLE
18695: EQUAL
18696: IFTRUE 18700
18698: GO 18726
18700: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
18701: LD_ADDR_VAR 0 3
18705: PUSH
18706: LD_INT 21
18708: PUSH
18709: LD_INT 22
18711: PUSH
18712: LD_INT 23
18714: PUSH
18715: LD_INT 24
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: ST_TO_ADDR
18724: GO 18941
18726: LD_INT 45
18728: DOUBLE
18729: EQUAL
18730: IFTRUE 18734
18732: GO 18760
18734: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
18735: LD_ADDR_VAR 0 3
18739: PUSH
18740: LD_INT 21
18742: PUSH
18743: LD_INT 22
18745: PUSH
18746: LD_INT 23
18748: PUSH
18749: LD_INT 24
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: ST_TO_ADDR
18758: GO 18941
18760: LD_INT 49
18762: DOUBLE
18763: EQUAL
18764: IFTRUE 18768
18766: GO 18794
18768: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
18769: LD_ADDR_VAR 0 3
18773: PUSH
18774: LD_INT 21
18776: PUSH
18777: LD_INT 22
18779: PUSH
18780: LD_INT 23
18782: PUSH
18783: LD_INT 24
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: ST_TO_ADDR
18792: GO 18941
18794: LD_INT 51
18796: DOUBLE
18797: EQUAL
18798: IFTRUE 18802
18800: GO 18828
18802: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
18803: LD_ADDR_VAR 0 3
18807: PUSH
18808: LD_INT 21
18810: PUSH
18811: LD_INT 22
18813: PUSH
18814: LD_INT 23
18816: PUSH
18817: LD_INT 24
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: ST_TO_ADDR
18826: GO 18941
18828: LD_INT 52
18830: DOUBLE
18831: EQUAL
18832: IFTRUE 18836
18834: GO 18862
18836: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
18837: LD_ADDR_VAR 0 3
18841: PUSH
18842: LD_INT 21
18844: PUSH
18845: LD_INT 22
18847: PUSH
18848: LD_INT 23
18850: PUSH
18851: LD_INT 24
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: ST_TO_ADDR
18860: GO 18941
18862: LD_INT 53
18864: DOUBLE
18865: EQUAL
18866: IFTRUE 18870
18868: GO 18888
18870: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
18871: LD_ADDR_VAR 0 3
18875: PUSH
18876: LD_INT 23
18878: PUSH
18879: LD_INT 24
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: ST_TO_ADDR
18886: GO 18941
18888: LD_INT 46
18890: DOUBLE
18891: EQUAL
18892: IFTRUE 18896
18894: GO 18914
18896: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
18897: LD_ADDR_VAR 0 3
18901: PUSH
18902: LD_INT 23
18904: PUSH
18905: LD_INT 24
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: ST_TO_ADDR
18912: GO 18941
18914: LD_INT 47
18916: DOUBLE
18917: EQUAL
18918: IFTRUE 18922
18920: GO 18940
18922: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18923: LD_ADDR_VAR 0 3
18927: PUSH
18928: LD_INT 23
18930: PUSH
18931: LD_INT 24
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: ST_TO_ADDR
18938: GO 18941
18940: POP
// result := ( chassis in result ) ;
18941: LD_ADDR_VAR 0 3
18945: PUSH
18946: LD_VAR 0 1
18950: PUSH
18951: LD_VAR 0 3
18955: IN
18956: ST_TO_ADDR
// end ;
18957: LD_VAR 0 3
18961: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
18962: LD_INT 0
18964: PPUSH
18965: PPUSH
18966: PPUSH
18967: PPUSH
18968: PPUSH
18969: PPUSH
18970: PPUSH
// result := array ;
18971: LD_ADDR_VAR 0 5
18975: PUSH
18976: LD_VAR 0 1
18980: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
18981: LD_VAR 0 1
18985: NOT
18986: PUSH
18987: LD_VAR 0 2
18991: NOT
18992: OR
18993: PUSH
18994: LD_VAR 0 3
18998: NOT
18999: OR
19000: PUSH
19001: LD_VAR 0 2
19005: PUSH
19006: LD_VAR 0 1
19010: GREATER
19011: OR
19012: PUSH
19013: LD_VAR 0 3
19017: PUSH
19018: LD_VAR 0 1
19022: GREATER
19023: OR
19024: IFFALSE 19028
// exit ;
19026: GO 19324
// if direction then
19028: LD_VAR 0 4
19032: IFFALSE 19096
// begin d := 1 ;
19034: LD_ADDR_VAR 0 9
19038: PUSH
19039: LD_INT 1
19041: ST_TO_ADDR
// if i_from > i_to then
19042: LD_VAR 0 2
19046: PUSH
19047: LD_VAR 0 3
19051: GREATER
19052: IFFALSE 19078
// length := ( array - i_from ) + i_to else
19054: LD_ADDR_VAR 0 11
19058: PUSH
19059: LD_VAR 0 1
19063: PUSH
19064: LD_VAR 0 2
19068: MINUS
19069: PUSH
19070: LD_VAR 0 3
19074: PLUS
19075: ST_TO_ADDR
19076: GO 19094
// length := i_to - i_from ;
19078: LD_ADDR_VAR 0 11
19082: PUSH
19083: LD_VAR 0 3
19087: PUSH
19088: LD_VAR 0 2
19092: MINUS
19093: ST_TO_ADDR
// end else
19094: GO 19157
// begin d := - 1 ;
19096: LD_ADDR_VAR 0 9
19100: PUSH
19101: LD_INT 1
19103: NEG
19104: ST_TO_ADDR
// if i_from > i_to then
19105: LD_VAR 0 2
19109: PUSH
19110: LD_VAR 0 3
19114: GREATER
19115: IFFALSE 19135
// length := i_from - i_to else
19117: LD_ADDR_VAR 0 11
19121: PUSH
19122: LD_VAR 0 2
19126: PUSH
19127: LD_VAR 0 3
19131: MINUS
19132: ST_TO_ADDR
19133: GO 19157
// length := ( array - i_to ) + i_from ;
19135: LD_ADDR_VAR 0 11
19139: PUSH
19140: LD_VAR 0 1
19144: PUSH
19145: LD_VAR 0 3
19149: MINUS
19150: PUSH
19151: LD_VAR 0 2
19155: PLUS
19156: ST_TO_ADDR
// end ; if not length then
19157: LD_VAR 0 11
19161: NOT
19162: IFFALSE 19166
// exit ;
19164: GO 19324
// tmp := array ;
19166: LD_ADDR_VAR 0 10
19170: PUSH
19171: LD_VAR 0 1
19175: ST_TO_ADDR
// for i = 1 to length do
19176: LD_ADDR_VAR 0 6
19180: PUSH
19181: DOUBLE
19182: LD_INT 1
19184: DEC
19185: ST_TO_ADDR
19186: LD_VAR 0 11
19190: PUSH
19191: FOR_TO
19192: IFFALSE 19312
// begin for j = 1 to array do
19194: LD_ADDR_VAR 0 7
19198: PUSH
19199: DOUBLE
19200: LD_INT 1
19202: DEC
19203: ST_TO_ADDR
19204: LD_VAR 0 1
19208: PUSH
19209: FOR_TO
19210: IFFALSE 19298
// begin k := j + d ;
19212: LD_ADDR_VAR 0 8
19216: PUSH
19217: LD_VAR 0 7
19221: PUSH
19222: LD_VAR 0 9
19226: PLUS
19227: ST_TO_ADDR
// if k > array then
19228: LD_VAR 0 8
19232: PUSH
19233: LD_VAR 0 1
19237: GREATER
19238: IFFALSE 19248
// k := 1 ;
19240: LD_ADDR_VAR 0 8
19244: PUSH
19245: LD_INT 1
19247: ST_TO_ADDR
// if not k then
19248: LD_VAR 0 8
19252: NOT
19253: IFFALSE 19265
// k := array ;
19255: LD_ADDR_VAR 0 8
19259: PUSH
19260: LD_VAR 0 1
19264: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19265: LD_ADDR_VAR 0 10
19269: PUSH
19270: LD_VAR 0 10
19274: PPUSH
19275: LD_VAR 0 8
19279: PPUSH
19280: LD_VAR 0 1
19284: PUSH
19285: LD_VAR 0 7
19289: ARRAY
19290: PPUSH
19291: CALL_OW 1
19295: ST_TO_ADDR
// end ;
19296: GO 19209
19298: POP
19299: POP
// array := tmp ;
19300: LD_ADDR_VAR 0 1
19304: PUSH
19305: LD_VAR 0 10
19309: ST_TO_ADDR
// end ;
19310: GO 19191
19312: POP
19313: POP
// result := array ;
19314: LD_ADDR_VAR 0 5
19318: PUSH
19319: LD_VAR 0 1
19323: ST_TO_ADDR
// end ;
19324: LD_VAR 0 5
19328: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19329: LD_INT 0
19331: PPUSH
19332: PPUSH
// result := 0 ;
19333: LD_ADDR_VAR 0 3
19337: PUSH
19338: LD_INT 0
19340: ST_TO_ADDR
// if not array or not value in array then
19341: LD_VAR 0 1
19345: NOT
19346: PUSH
19347: LD_VAR 0 2
19351: PUSH
19352: LD_VAR 0 1
19356: IN
19357: NOT
19358: OR
19359: IFFALSE 19363
// exit ;
19361: GO 19417
// for i = 1 to array do
19363: LD_ADDR_VAR 0 4
19367: PUSH
19368: DOUBLE
19369: LD_INT 1
19371: DEC
19372: ST_TO_ADDR
19373: LD_VAR 0 1
19377: PUSH
19378: FOR_TO
19379: IFFALSE 19415
// if value = array [ i ] then
19381: LD_VAR 0 2
19385: PUSH
19386: LD_VAR 0 1
19390: PUSH
19391: LD_VAR 0 4
19395: ARRAY
19396: EQUAL
19397: IFFALSE 19413
// begin result := i ;
19399: LD_ADDR_VAR 0 3
19403: PUSH
19404: LD_VAR 0 4
19408: ST_TO_ADDR
// exit ;
19409: POP
19410: POP
19411: GO 19417
// end ;
19413: GO 19378
19415: POP
19416: POP
// end ;
19417: LD_VAR 0 3
19421: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
19422: LD_INT 0
19424: PPUSH
// vc_chassis := chassis ;
19425: LD_ADDR_OWVAR 37
19429: PUSH
19430: LD_VAR 0 1
19434: ST_TO_ADDR
// vc_engine := engine ;
19435: LD_ADDR_OWVAR 39
19439: PUSH
19440: LD_VAR 0 2
19444: ST_TO_ADDR
// vc_control := control ;
19445: LD_ADDR_OWVAR 38
19449: PUSH
19450: LD_VAR 0 3
19454: ST_TO_ADDR
// vc_weapon := weapon ;
19455: LD_ADDR_OWVAR 40
19459: PUSH
19460: LD_VAR 0 4
19464: ST_TO_ADDR
// vc_fuel_battery := fuel ;
19465: LD_ADDR_OWVAR 41
19469: PUSH
19470: LD_VAR 0 5
19474: ST_TO_ADDR
// end ;
19475: LD_VAR 0 6
19479: RET
// export function WantPlant ( unit ) ; var task ; begin
19480: LD_INT 0
19482: PPUSH
19483: PPUSH
// result := false ;
19484: LD_ADDR_VAR 0 2
19488: PUSH
19489: LD_INT 0
19491: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
19492: LD_ADDR_VAR 0 3
19496: PUSH
19497: LD_VAR 0 1
19501: PPUSH
19502: CALL_OW 437
19506: ST_TO_ADDR
// if task then
19507: LD_VAR 0 3
19511: IFFALSE 19539
// if task [ 1 ] [ 1 ] = p then
19513: LD_VAR 0 3
19517: PUSH
19518: LD_INT 1
19520: ARRAY
19521: PUSH
19522: LD_INT 1
19524: ARRAY
19525: PUSH
19526: LD_STRING p
19528: EQUAL
19529: IFFALSE 19539
// result := true ;
19531: LD_ADDR_VAR 0 2
19535: PUSH
19536: LD_INT 1
19538: ST_TO_ADDR
// end ;
19539: LD_VAR 0 2
19543: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
19544: LD_INT 0
19546: PPUSH
19547: PPUSH
19548: PPUSH
19549: PPUSH
// if pos < 1 then
19550: LD_VAR 0 2
19554: PUSH
19555: LD_INT 1
19557: LESS
19558: IFFALSE 19562
// exit ;
19560: GO 19865
// if pos = 1 then
19562: LD_VAR 0 2
19566: PUSH
19567: LD_INT 1
19569: EQUAL
19570: IFFALSE 19603
// result := Replace ( arr , pos [ 1 ] , value ) else
19572: LD_ADDR_VAR 0 4
19576: PUSH
19577: LD_VAR 0 1
19581: PPUSH
19582: LD_VAR 0 2
19586: PUSH
19587: LD_INT 1
19589: ARRAY
19590: PPUSH
19591: LD_VAR 0 3
19595: PPUSH
19596: CALL_OW 1
19600: ST_TO_ADDR
19601: GO 19865
// begin tmp := arr ;
19603: LD_ADDR_VAR 0 6
19607: PUSH
19608: LD_VAR 0 1
19612: ST_TO_ADDR
// s_arr := [ tmp ] ;
19613: LD_ADDR_VAR 0 7
19617: PUSH
19618: LD_VAR 0 6
19622: PUSH
19623: EMPTY
19624: LIST
19625: ST_TO_ADDR
// for i = 1 to pos - 1 do
19626: LD_ADDR_VAR 0 5
19630: PUSH
19631: DOUBLE
19632: LD_INT 1
19634: DEC
19635: ST_TO_ADDR
19636: LD_VAR 0 2
19640: PUSH
19641: LD_INT 1
19643: MINUS
19644: PUSH
19645: FOR_TO
19646: IFFALSE 19691
// begin tmp := tmp [ pos [ i ] ] ;
19648: LD_ADDR_VAR 0 6
19652: PUSH
19653: LD_VAR 0 6
19657: PUSH
19658: LD_VAR 0 2
19662: PUSH
19663: LD_VAR 0 5
19667: ARRAY
19668: ARRAY
19669: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
19670: LD_ADDR_VAR 0 7
19674: PUSH
19675: LD_VAR 0 7
19679: PUSH
19680: LD_VAR 0 6
19684: PUSH
19685: EMPTY
19686: LIST
19687: ADD
19688: ST_TO_ADDR
// end ;
19689: GO 19645
19691: POP
19692: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
19693: LD_ADDR_VAR 0 6
19697: PUSH
19698: LD_VAR 0 6
19702: PPUSH
19703: LD_VAR 0 2
19707: PUSH
19708: LD_VAR 0 2
19712: ARRAY
19713: PPUSH
19714: LD_VAR 0 3
19718: PPUSH
19719: CALL_OW 1
19723: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
19724: LD_ADDR_VAR 0 7
19728: PUSH
19729: LD_VAR 0 7
19733: PPUSH
19734: LD_VAR 0 7
19738: PPUSH
19739: LD_VAR 0 6
19743: PPUSH
19744: CALL_OW 1
19748: ST_TO_ADDR
// for i = s_arr downto 2 do
19749: LD_ADDR_VAR 0 5
19753: PUSH
19754: DOUBLE
19755: LD_VAR 0 7
19759: INC
19760: ST_TO_ADDR
19761: LD_INT 2
19763: PUSH
19764: FOR_DOWNTO
19765: IFFALSE 19849
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
19767: LD_ADDR_VAR 0 6
19771: PUSH
19772: LD_VAR 0 7
19776: PUSH
19777: LD_VAR 0 5
19781: PUSH
19782: LD_INT 1
19784: MINUS
19785: ARRAY
19786: PPUSH
19787: LD_VAR 0 2
19791: PUSH
19792: LD_VAR 0 5
19796: PUSH
19797: LD_INT 1
19799: MINUS
19800: ARRAY
19801: PPUSH
19802: LD_VAR 0 7
19806: PUSH
19807: LD_VAR 0 5
19811: ARRAY
19812: PPUSH
19813: CALL_OW 1
19817: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
19818: LD_ADDR_VAR 0 7
19822: PUSH
19823: LD_VAR 0 7
19827: PPUSH
19828: LD_VAR 0 5
19832: PUSH
19833: LD_INT 1
19835: MINUS
19836: PPUSH
19837: LD_VAR 0 6
19841: PPUSH
19842: CALL_OW 1
19846: ST_TO_ADDR
// end ;
19847: GO 19764
19849: POP
19850: POP
// result := s_arr [ 1 ] ;
19851: LD_ADDR_VAR 0 4
19855: PUSH
19856: LD_VAR 0 7
19860: PUSH
19861: LD_INT 1
19863: ARRAY
19864: ST_TO_ADDR
// end ; end ;
19865: LD_VAR 0 4
19869: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
19870: LD_INT 0
19872: PPUSH
19873: PPUSH
// if not list then
19874: LD_VAR 0 1
19878: NOT
19879: IFFALSE 19883
// exit ;
19881: GO 19974
// i := list [ pos1 ] ;
19883: LD_ADDR_VAR 0 5
19887: PUSH
19888: LD_VAR 0 1
19892: PUSH
19893: LD_VAR 0 2
19897: ARRAY
19898: ST_TO_ADDR
// if not i then
19899: LD_VAR 0 5
19903: NOT
19904: IFFALSE 19908
// exit ;
19906: GO 19974
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
19908: LD_ADDR_VAR 0 1
19912: PUSH
19913: LD_VAR 0 1
19917: PPUSH
19918: LD_VAR 0 2
19922: PPUSH
19923: LD_VAR 0 1
19927: PUSH
19928: LD_VAR 0 3
19932: ARRAY
19933: PPUSH
19934: CALL_OW 1
19938: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
19939: LD_ADDR_VAR 0 1
19943: PUSH
19944: LD_VAR 0 1
19948: PPUSH
19949: LD_VAR 0 3
19953: PPUSH
19954: LD_VAR 0 5
19958: PPUSH
19959: CALL_OW 1
19963: ST_TO_ADDR
// result := list ;
19964: LD_ADDR_VAR 0 4
19968: PUSH
19969: LD_VAR 0 1
19973: ST_TO_ADDR
// end ;
19974: LD_VAR 0 4
19978: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
19979: LD_INT 0
19981: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
19982: LD_ADDR_VAR 0 5
19986: PUSH
19987: LD_VAR 0 1
19991: PPUSH
19992: CALL_OW 250
19996: PPUSH
19997: LD_VAR 0 1
20001: PPUSH
20002: CALL_OW 251
20006: PPUSH
20007: LD_VAR 0 2
20011: PPUSH
20012: LD_VAR 0 3
20016: PPUSH
20017: LD_VAR 0 4
20021: PPUSH
20022: CALL 20032 0 5
20026: ST_TO_ADDR
// end ;
20027: LD_VAR 0 5
20031: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20032: LD_INT 0
20034: PPUSH
20035: PPUSH
20036: PPUSH
20037: PPUSH
// if not list then
20038: LD_VAR 0 3
20042: NOT
20043: IFFALSE 20047
// exit ;
20045: GO 20435
// result := [ ] ;
20047: LD_ADDR_VAR 0 6
20051: PUSH
20052: EMPTY
20053: ST_TO_ADDR
// for i in list do
20054: LD_ADDR_VAR 0 7
20058: PUSH
20059: LD_VAR 0 3
20063: PUSH
20064: FOR_IN
20065: IFFALSE 20267
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20067: LD_ADDR_VAR 0 9
20071: PUSH
20072: LD_VAR 0 7
20076: PPUSH
20077: LD_VAR 0 1
20081: PPUSH
20082: LD_VAR 0 2
20086: PPUSH
20087: CALL_OW 297
20091: ST_TO_ADDR
// if not result then
20092: LD_VAR 0 6
20096: NOT
20097: IFFALSE 20123
// result := [ [ i , tmp ] ] else
20099: LD_ADDR_VAR 0 6
20103: PUSH
20104: LD_VAR 0 7
20108: PUSH
20109: LD_VAR 0 9
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: EMPTY
20119: LIST
20120: ST_TO_ADDR
20121: GO 20265
// begin if result [ result ] [ 2 ] < tmp then
20123: LD_VAR 0 6
20127: PUSH
20128: LD_VAR 0 6
20132: ARRAY
20133: PUSH
20134: LD_INT 2
20136: ARRAY
20137: PUSH
20138: LD_VAR 0 9
20142: LESS
20143: IFFALSE 20185
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20145: LD_ADDR_VAR 0 6
20149: PUSH
20150: LD_VAR 0 6
20154: PPUSH
20155: LD_VAR 0 6
20159: PUSH
20160: LD_INT 1
20162: PLUS
20163: PPUSH
20164: LD_VAR 0 7
20168: PUSH
20169: LD_VAR 0 9
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PPUSH
20178: CALL_OW 2
20182: ST_TO_ADDR
20183: GO 20265
// for j = 1 to result do
20185: LD_ADDR_VAR 0 8
20189: PUSH
20190: DOUBLE
20191: LD_INT 1
20193: DEC
20194: ST_TO_ADDR
20195: LD_VAR 0 6
20199: PUSH
20200: FOR_TO
20201: IFFALSE 20263
// begin if tmp < result [ j ] [ 2 ] then
20203: LD_VAR 0 9
20207: PUSH
20208: LD_VAR 0 6
20212: PUSH
20213: LD_VAR 0 8
20217: ARRAY
20218: PUSH
20219: LD_INT 2
20221: ARRAY
20222: LESS
20223: IFFALSE 20261
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20225: LD_ADDR_VAR 0 6
20229: PUSH
20230: LD_VAR 0 6
20234: PPUSH
20235: LD_VAR 0 8
20239: PPUSH
20240: LD_VAR 0 7
20244: PUSH
20245: LD_VAR 0 9
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PPUSH
20254: CALL_OW 2
20258: ST_TO_ADDR
// break ;
20259: GO 20263
// end ; end ;
20261: GO 20200
20263: POP
20264: POP
// end ; end ;
20265: GO 20064
20267: POP
20268: POP
// if result and not asc then
20269: LD_VAR 0 6
20273: PUSH
20274: LD_VAR 0 4
20278: NOT
20279: AND
20280: IFFALSE 20355
// begin tmp := result ;
20282: LD_ADDR_VAR 0 9
20286: PUSH
20287: LD_VAR 0 6
20291: ST_TO_ADDR
// for i = tmp downto 1 do
20292: LD_ADDR_VAR 0 7
20296: PUSH
20297: DOUBLE
20298: LD_VAR 0 9
20302: INC
20303: ST_TO_ADDR
20304: LD_INT 1
20306: PUSH
20307: FOR_DOWNTO
20308: IFFALSE 20353
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
20310: LD_ADDR_VAR 0 6
20314: PUSH
20315: LD_VAR 0 6
20319: PPUSH
20320: LD_VAR 0 9
20324: PUSH
20325: LD_VAR 0 7
20329: MINUS
20330: PUSH
20331: LD_INT 1
20333: PLUS
20334: PPUSH
20335: LD_VAR 0 9
20339: PUSH
20340: LD_VAR 0 7
20344: ARRAY
20345: PPUSH
20346: CALL_OW 1
20350: ST_TO_ADDR
20351: GO 20307
20353: POP
20354: POP
// end ; tmp := [ ] ;
20355: LD_ADDR_VAR 0 9
20359: PUSH
20360: EMPTY
20361: ST_TO_ADDR
// if mode then
20362: LD_VAR 0 5
20366: IFFALSE 20435
// begin for i = 1 to result do
20368: LD_ADDR_VAR 0 7
20372: PUSH
20373: DOUBLE
20374: LD_INT 1
20376: DEC
20377: ST_TO_ADDR
20378: LD_VAR 0 6
20382: PUSH
20383: FOR_TO
20384: IFFALSE 20423
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
20386: LD_ADDR_VAR 0 9
20390: PUSH
20391: LD_VAR 0 9
20395: PPUSH
20396: LD_VAR 0 7
20400: PPUSH
20401: LD_VAR 0 6
20405: PUSH
20406: LD_VAR 0 7
20410: ARRAY
20411: PUSH
20412: LD_INT 1
20414: ARRAY
20415: PPUSH
20416: CALL_OW 1
20420: ST_TO_ADDR
20421: GO 20383
20423: POP
20424: POP
// result := tmp ;
20425: LD_ADDR_VAR 0 6
20429: PUSH
20430: LD_VAR 0 9
20434: ST_TO_ADDR
// end ; end ;
20435: LD_VAR 0 6
20439: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
20440: LD_INT 0
20442: PPUSH
20443: PPUSH
20444: PPUSH
20445: PPUSH
20446: PPUSH
20447: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
20448: LD_ADDR_VAR 0 5
20452: PUSH
20453: LD_INT 0
20455: PUSH
20456: LD_INT 0
20458: PUSH
20459: LD_INT 0
20461: PUSH
20462: EMPTY
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: ST_TO_ADDR
// if not x or not y then
20470: LD_VAR 0 2
20474: NOT
20475: PUSH
20476: LD_VAR 0 3
20480: NOT
20481: OR
20482: IFFALSE 20486
// exit ;
20484: GO 22136
// if not range then
20486: LD_VAR 0 4
20490: NOT
20491: IFFALSE 20501
// range := 10 ;
20493: LD_ADDR_VAR 0 4
20497: PUSH
20498: LD_INT 10
20500: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20501: LD_ADDR_VAR 0 8
20505: PUSH
20506: LD_INT 81
20508: PUSH
20509: LD_VAR 0 1
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 92
20520: PUSH
20521: LD_VAR 0 2
20525: PUSH
20526: LD_VAR 0 3
20530: PUSH
20531: LD_VAR 0 4
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 3
20544: PUSH
20545: LD_INT 21
20547: PUSH
20548: LD_INT 3
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: LIST
20563: PPUSH
20564: CALL_OW 69
20568: ST_TO_ADDR
// if not tmp then
20569: LD_VAR 0 8
20573: NOT
20574: IFFALSE 20578
// exit ;
20576: GO 22136
// for i in tmp do
20578: LD_ADDR_VAR 0 6
20582: PUSH
20583: LD_VAR 0 8
20587: PUSH
20588: FOR_IN
20589: IFFALSE 22111
// begin points := [ 0 , 0 , 0 ] ;
20591: LD_ADDR_VAR 0 9
20595: PUSH
20596: LD_INT 0
20598: PUSH
20599: LD_INT 0
20601: PUSH
20602: LD_INT 0
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: LIST
20609: ST_TO_ADDR
// bpoints := 1 ;
20610: LD_ADDR_VAR 0 10
20614: PUSH
20615: LD_INT 1
20617: ST_TO_ADDR
// case GetType ( i ) of unit_human :
20618: LD_VAR 0 6
20622: PPUSH
20623: CALL_OW 247
20627: PUSH
20628: LD_INT 1
20630: DOUBLE
20631: EQUAL
20632: IFTRUE 20636
20634: GO 21214
20636: POP
// begin if GetClass ( i ) = 1 then
20637: LD_VAR 0 6
20641: PPUSH
20642: CALL_OW 257
20646: PUSH
20647: LD_INT 1
20649: EQUAL
20650: IFFALSE 20671
// points := [ 10 , 5 , 3 ] ;
20652: LD_ADDR_VAR 0 9
20656: PUSH
20657: LD_INT 10
20659: PUSH
20660: LD_INT 5
20662: PUSH
20663: LD_INT 3
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: LIST
20670: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
20671: LD_VAR 0 6
20675: PPUSH
20676: CALL_OW 257
20680: PUSH
20681: LD_INT 2
20683: PUSH
20684: LD_INT 3
20686: PUSH
20687: LD_INT 4
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: LIST
20694: IN
20695: IFFALSE 20716
// points := [ 3 , 2 , 1 ] ;
20697: LD_ADDR_VAR 0 9
20701: PUSH
20702: LD_INT 3
20704: PUSH
20705: LD_INT 2
20707: PUSH
20708: LD_INT 1
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: LIST
20715: ST_TO_ADDR
// if GetClass ( i ) = 5 then
20716: LD_VAR 0 6
20720: PPUSH
20721: CALL_OW 257
20725: PUSH
20726: LD_INT 5
20728: EQUAL
20729: IFFALSE 20750
// points := [ 130 , 5 , 2 ] ;
20731: LD_ADDR_VAR 0 9
20735: PUSH
20736: LD_INT 130
20738: PUSH
20739: LD_INT 5
20741: PUSH
20742: LD_INT 2
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: ST_TO_ADDR
// if GetClass ( i ) = 8 then
20750: LD_VAR 0 6
20754: PPUSH
20755: CALL_OW 257
20759: PUSH
20760: LD_INT 8
20762: EQUAL
20763: IFFALSE 20784
// points := [ 35 , 35 , 30 ] ;
20765: LD_ADDR_VAR 0 9
20769: PUSH
20770: LD_INT 35
20772: PUSH
20773: LD_INT 35
20775: PUSH
20776: LD_INT 30
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: LIST
20783: ST_TO_ADDR
// if GetClass ( i ) = 9 then
20784: LD_VAR 0 6
20788: PPUSH
20789: CALL_OW 257
20793: PUSH
20794: LD_INT 9
20796: EQUAL
20797: IFFALSE 20818
// points := [ 20 , 55 , 40 ] ;
20799: LD_ADDR_VAR 0 9
20803: PUSH
20804: LD_INT 20
20806: PUSH
20807: LD_INT 55
20809: PUSH
20810: LD_INT 40
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: LIST
20817: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
20818: LD_VAR 0 6
20822: PPUSH
20823: CALL_OW 257
20827: PUSH
20828: LD_INT 12
20830: PUSH
20831: LD_INT 16
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: IN
20838: IFFALSE 20859
// points := [ 5 , 3 , 2 ] ;
20840: LD_ADDR_VAR 0 9
20844: PUSH
20845: LD_INT 5
20847: PUSH
20848: LD_INT 3
20850: PUSH
20851: LD_INT 2
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: LIST
20858: ST_TO_ADDR
// if GetClass ( i ) = 17 then
20859: LD_VAR 0 6
20863: PPUSH
20864: CALL_OW 257
20868: PUSH
20869: LD_INT 17
20871: EQUAL
20872: IFFALSE 20893
// points := [ 100 , 50 , 75 ] ;
20874: LD_ADDR_VAR 0 9
20878: PUSH
20879: LD_INT 100
20881: PUSH
20882: LD_INT 50
20884: PUSH
20885: LD_INT 75
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: LIST
20892: ST_TO_ADDR
// if GetClass ( i ) = 15 then
20893: LD_VAR 0 6
20897: PPUSH
20898: CALL_OW 257
20902: PUSH
20903: LD_INT 15
20905: EQUAL
20906: IFFALSE 20927
// points := [ 10 , 5 , 3 ] ;
20908: LD_ADDR_VAR 0 9
20912: PUSH
20913: LD_INT 10
20915: PUSH
20916: LD_INT 5
20918: PUSH
20919: LD_INT 3
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: LIST
20926: ST_TO_ADDR
// if GetClass ( i ) = 14 then
20927: LD_VAR 0 6
20931: PPUSH
20932: CALL_OW 257
20936: PUSH
20937: LD_INT 14
20939: EQUAL
20940: IFFALSE 20961
// points := [ 10 , 0 , 0 ] ;
20942: LD_ADDR_VAR 0 9
20946: PUSH
20947: LD_INT 10
20949: PUSH
20950: LD_INT 0
20952: PUSH
20953: LD_INT 0
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: LIST
20960: ST_TO_ADDR
// if GetClass ( i ) = 11 then
20961: LD_VAR 0 6
20965: PPUSH
20966: CALL_OW 257
20970: PUSH
20971: LD_INT 11
20973: EQUAL
20974: IFFALSE 20995
// points := [ 30 , 10 , 5 ] ;
20976: LD_ADDR_VAR 0 9
20980: PUSH
20981: LD_INT 30
20983: PUSH
20984: LD_INT 10
20986: PUSH
20987: LD_INT 5
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: LIST
20994: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
20995: LD_VAR 0 1
20999: PPUSH
21000: LD_INT 5
21002: PPUSH
21003: CALL_OW 321
21007: PUSH
21008: LD_INT 2
21010: EQUAL
21011: IFFALSE 21028
// bpoints := bpoints * 1.8 ;
21013: LD_ADDR_VAR 0 10
21017: PUSH
21018: LD_VAR 0 10
21022: PUSH
21023: LD_REAL  1.80000000000000E+0000
21026: MUL
21027: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21028: LD_VAR 0 6
21032: PPUSH
21033: CALL_OW 257
21037: PUSH
21038: LD_INT 1
21040: PUSH
21041: LD_INT 2
21043: PUSH
21044: LD_INT 3
21046: PUSH
21047: LD_INT 4
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: IN
21056: PUSH
21057: LD_VAR 0 1
21061: PPUSH
21062: LD_INT 51
21064: PPUSH
21065: CALL_OW 321
21069: PUSH
21070: LD_INT 2
21072: EQUAL
21073: AND
21074: IFFALSE 21091
// bpoints := bpoints * 1.2 ;
21076: LD_ADDR_VAR 0 10
21080: PUSH
21081: LD_VAR 0 10
21085: PUSH
21086: LD_REAL  1.20000000000000E+0000
21089: MUL
21090: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21091: LD_VAR 0 6
21095: PPUSH
21096: CALL_OW 257
21100: PUSH
21101: LD_INT 5
21103: PUSH
21104: LD_INT 7
21106: PUSH
21107: LD_INT 9
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: LIST
21114: IN
21115: PUSH
21116: LD_VAR 0 1
21120: PPUSH
21121: LD_INT 52
21123: PPUSH
21124: CALL_OW 321
21128: PUSH
21129: LD_INT 2
21131: EQUAL
21132: AND
21133: IFFALSE 21150
// bpoints := bpoints * 1.5 ;
21135: LD_ADDR_VAR 0 10
21139: PUSH
21140: LD_VAR 0 10
21144: PUSH
21145: LD_REAL  1.50000000000000E+0000
21148: MUL
21149: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21150: LD_VAR 0 1
21154: PPUSH
21155: LD_INT 66
21157: PPUSH
21158: CALL_OW 321
21162: PUSH
21163: LD_INT 2
21165: EQUAL
21166: IFFALSE 21183
// bpoints := bpoints * 1.1 ;
21168: LD_ADDR_VAR 0 10
21172: PUSH
21173: LD_VAR 0 10
21177: PUSH
21178: LD_REAL  1.10000000000000E+0000
21181: MUL
21182: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21183: LD_ADDR_VAR 0 10
21187: PUSH
21188: LD_VAR 0 10
21192: PUSH
21193: LD_VAR 0 6
21197: PPUSH
21198: LD_INT 1
21200: PPUSH
21201: CALL_OW 259
21205: PUSH
21206: LD_REAL  1.15000000000000E+0000
21209: MUL
21210: MUL
21211: ST_TO_ADDR
// end ; unit_vehicle :
21212: GO 22040
21214: LD_INT 2
21216: DOUBLE
21217: EQUAL
21218: IFTRUE 21222
21220: GO 22028
21222: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
21223: LD_VAR 0 6
21227: PPUSH
21228: CALL_OW 264
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: LD_INT 42
21238: PUSH
21239: LD_INT 24
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: LIST
21246: IN
21247: IFFALSE 21268
// points := [ 25 , 5 , 3 ] ;
21249: LD_ADDR_VAR 0 9
21253: PUSH
21254: LD_INT 25
21256: PUSH
21257: LD_INT 5
21259: PUSH
21260: LD_INT 3
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: LIST
21267: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
21268: LD_VAR 0 6
21272: PPUSH
21273: CALL_OW 264
21277: PUSH
21278: LD_INT 4
21280: PUSH
21281: LD_INT 43
21283: PUSH
21284: LD_INT 25
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: LIST
21291: IN
21292: IFFALSE 21313
// points := [ 40 , 15 , 5 ] ;
21294: LD_ADDR_VAR 0 9
21298: PUSH
21299: LD_INT 40
21301: PUSH
21302: LD_INT 15
21304: PUSH
21305: LD_INT 5
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: LIST
21312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
21313: LD_VAR 0 6
21317: PPUSH
21318: CALL_OW 264
21322: PUSH
21323: LD_INT 3
21325: PUSH
21326: LD_INT 23
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: IN
21333: IFFALSE 21354
// points := [ 7 , 25 , 8 ] ;
21335: LD_ADDR_VAR 0 9
21339: PUSH
21340: LD_INT 7
21342: PUSH
21343: LD_INT 25
21345: PUSH
21346: LD_INT 8
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: LIST
21353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
21354: LD_VAR 0 6
21358: PPUSH
21359: CALL_OW 264
21363: PUSH
21364: LD_INT 5
21366: PUSH
21367: LD_INT 27
21369: PUSH
21370: LD_INT 44
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: LIST
21377: IN
21378: IFFALSE 21399
// points := [ 14 , 50 , 16 ] ;
21380: LD_ADDR_VAR 0 9
21384: PUSH
21385: LD_INT 14
21387: PUSH
21388: LD_INT 50
21390: PUSH
21391: LD_INT 16
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: LIST
21398: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
21399: LD_VAR 0 6
21403: PPUSH
21404: CALL_OW 264
21408: PUSH
21409: LD_INT 6
21411: PUSH
21412: LD_INT 46
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: IN
21419: IFFALSE 21440
// points := [ 32 , 120 , 70 ] ;
21421: LD_ADDR_VAR 0 9
21425: PUSH
21426: LD_INT 32
21428: PUSH
21429: LD_INT 120
21431: PUSH
21432: LD_INT 70
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: LIST
21439: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
21440: LD_VAR 0 6
21444: PPUSH
21445: CALL_OW 264
21449: PUSH
21450: LD_INT 7
21452: PUSH
21453: LD_INT 28
21455: PUSH
21456: LD_INT 45
21458: PUSH
21459: LD_INT 92
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: IN
21468: IFFALSE 21489
// points := [ 35 , 20 , 45 ] ;
21470: LD_ADDR_VAR 0 9
21474: PUSH
21475: LD_INT 35
21477: PUSH
21478: LD_INT 20
21480: PUSH
21481: LD_INT 45
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: LIST
21488: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
21489: LD_VAR 0 6
21493: PPUSH
21494: CALL_OW 264
21498: PUSH
21499: LD_INT 47
21501: PUSH
21502: EMPTY
21503: LIST
21504: IN
21505: IFFALSE 21526
// points := [ 67 , 45 , 75 ] ;
21507: LD_ADDR_VAR 0 9
21511: PUSH
21512: LD_INT 67
21514: PUSH
21515: LD_INT 45
21517: PUSH
21518: LD_INT 75
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: LIST
21525: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
21526: LD_VAR 0 6
21530: PPUSH
21531: CALL_OW 264
21535: PUSH
21536: LD_INT 26
21538: PUSH
21539: EMPTY
21540: LIST
21541: IN
21542: IFFALSE 21563
// points := [ 120 , 30 , 80 ] ;
21544: LD_ADDR_VAR 0 9
21548: PUSH
21549: LD_INT 120
21551: PUSH
21552: LD_INT 30
21554: PUSH
21555: LD_INT 80
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: LIST
21562: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
21563: LD_VAR 0 6
21567: PPUSH
21568: CALL_OW 264
21572: PUSH
21573: LD_INT 22
21575: PUSH
21576: EMPTY
21577: LIST
21578: IN
21579: IFFALSE 21600
// points := [ 40 , 1 , 1 ] ;
21581: LD_ADDR_VAR 0 9
21585: PUSH
21586: LD_INT 40
21588: PUSH
21589: LD_INT 1
21591: PUSH
21592: LD_INT 1
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: LIST
21599: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
21600: LD_VAR 0 6
21604: PPUSH
21605: CALL_OW 264
21609: PUSH
21610: LD_INT 29
21612: PUSH
21613: EMPTY
21614: LIST
21615: IN
21616: IFFALSE 21637
// points := [ 70 , 200 , 400 ] ;
21618: LD_ADDR_VAR 0 9
21622: PUSH
21623: LD_INT 70
21625: PUSH
21626: LD_INT 200
21628: PUSH
21629: LD_INT 400
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: LIST
21636: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
21637: LD_VAR 0 6
21641: PPUSH
21642: CALL_OW 264
21646: PUSH
21647: LD_INT 14
21649: PUSH
21650: LD_INT 53
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: IN
21657: IFFALSE 21678
// points := [ 40 , 10 , 20 ] ;
21659: LD_ADDR_VAR 0 9
21663: PUSH
21664: LD_INT 40
21666: PUSH
21667: LD_INT 10
21669: PUSH
21670: LD_INT 20
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: LIST
21677: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
21678: LD_VAR 0 6
21682: PPUSH
21683: CALL_OW 264
21687: PUSH
21688: LD_INT 9
21690: PUSH
21691: EMPTY
21692: LIST
21693: IN
21694: IFFALSE 21715
// points := [ 5 , 70 , 20 ] ;
21696: LD_ADDR_VAR 0 9
21700: PUSH
21701: LD_INT 5
21703: PUSH
21704: LD_INT 70
21706: PUSH
21707: LD_INT 20
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: LIST
21714: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
21715: LD_VAR 0 6
21719: PPUSH
21720: CALL_OW 264
21724: PUSH
21725: LD_INT 10
21727: PUSH
21728: EMPTY
21729: LIST
21730: IN
21731: IFFALSE 21752
// points := [ 35 , 110 , 70 ] ;
21733: LD_ADDR_VAR 0 9
21737: PUSH
21738: LD_INT 35
21740: PUSH
21741: LD_INT 110
21743: PUSH
21744: LD_INT 70
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: LIST
21751: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
21752: LD_VAR 0 6
21756: PPUSH
21757: CALL_OW 265
21761: PUSH
21762: LD_INT 25
21764: EQUAL
21765: IFFALSE 21786
// points := [ 80 , 65 , 100 ] ;
21767: LD_ADDR_VAR 0 9
21771: PUSH
21772: LD_INT 80
21774: PUSH
21775: LD_INT 65
21777: PUSH
21778: LD_INT 100
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: LIST
21785: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
21786: LD_VAR 0 6
21790: PPUSH
21791: CALL_OW 263
21795: PUSH
21796: LD_INT 1
21798: EQUAL
21799: IFFALSE 21834
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
21801: LD_ADDR_VAR 0 10
21805: PUSH
21806: LD_VAR 0 10
21810: PUSH
21811: LD_VAR 0 6
21815: PPUSH
21816: CALL_OW 311
21820: PPUSH
21821: LD_INT 3
21823: PPUSH
21824: CALL_OW 259
21828: PUSH
21829: LD_INT 4
21831: MUL
21832: MUL
21833: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
21834: LD_VAR 0 6
21838: PPUSH
21839: CALL_OW 263
21843: PUSH
21844: LD_INT 2
21846: EQUAL
21847: IFFALSE 21898
// begin j := IsControledBy ( i ) ;
21849: LD_ADDR_VAR 0 7
21853: PUSH
21854: LD_VAR 0 6
21858: PPUSH
21859: CALL_OW 312
21863: ST_TO_ADDR
// if j then
21864: LD_VAR 0 7
21868: IFFALSE 21898
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
21870: LD_ADDR_VAR 0 10
21874: PUSH
21875: LD_VAR 0 10
21879: PUSH
21880: LD_VAR 0 7
21884: PPUSH
21885: LD_INT 3
21887: PPUSH
21888: CALL_OW 259
21892: PUSH
21893: LD_INT 3
21895: MUL
21896: MUL
21897: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
21898: LD_VAR 0 6
21902: PPUSH
21903: CALL_OW 264
21907: PUSH
21908: LD_INT 5
21910: PUSH
21911: LD_INT 6
21913: PUSH
21914: LD_INT 46
21916: PUSH
21917: LD_INT 44
21919: PUSH
21920: LD_INT 47
21922: PUSH
21923: LD_INT 45
21925: PUSH
21926: LD_INT 28
21928: PUSH
21929: LD_INT 7
21931: PUSH
21932: LD_INT 27
21934: PUSH
21935: LD_INT 29
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: IN
21950: PUSH
21951: LD_VAR 0 1
21955: PPUSH
21956: LD_INT 52
21958: PPUSH
21959: CALL_OW 321
21963: PUSH
21964: LD_INT 2
21966: EQUAL
21967: AND
21968: IFFALSE 21985
// bpoints := bpoints * 1.2 ;
21970: LD_ADDR_VAR 0 10
21974: PUSH
21975: LD_VAR 0 10
21979: PUSH
21980: LD_REAL  1.20000000000000E+0000
21983: MUL
21984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
21985: LD_VAR 0 6
21989: PPUSH
21990: CALL_OW 264
21994: PUSH
21995: LD_INT 6
21997: PUSH
21998: LD_INT 46
22000: PUSH
22001: LD_INT 47
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: LIST
22008: IN
22009: IFFALSE 22026
// bpoints := bpoints * 1.2 ;
22011: LD_ADDR_VAR 0 10
22015: PUSH
22016: LD_VAR 0 10
22020: PUSH
22021: LD_REAL  1.20000000000000E+0000
22024: MUL
22025: ST_TO_ADDR
// end ; unit_building :
22026: GO 22040
22028: LD_INT 3
22030: DOUBLE
22031: EQUAL
22032: IFTRUE 22036
22034: GO 22039
22036: POP
// ; end ;
22037: GO 22040
22039: POP
// for j = 1 to 3 do
22040: LD_ADDR_VAR 0 7
22044: PUSH
22045: DOUBLE
22046: LD_INT 1
22048: DEC
22049: ST_TO_ADDR
22050: LD_INT 3
22052: PUSH
22053: FOR_TO
22054: IFFALSE 22107
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22056: LD_ADDR_VAR 0 5
22060: PUSH
22061: LD_VAR 0 5
22065: PPUSH
22066: LD_VAR 0 7
22070: PPUSH
22071: LD_VAR 0 5
22075: PUSH
22076: LD_VAR 0 7
22080: ARRAY
22081: PUSH
22082: LD_VAR 0 9
22086: PUSH
22087: LD_VAR 0 7
22091: ARRAY
22092: PUSH
22093: LD_VAR 0 10
22097: MUL
22098: PLUS
22099: PPUSH
22100: CALL_OW 1
22104: ST_TO_ADDR
22105: GO 22053
22107: POP
22108: POP
// end ;
22109: GO 20588
22111: POP
22112: POP
// result := Replace ( result , 4 , tmp ) ;
22113: LD_ADDR_VAR 0 5
22117: PUSH
22118: LD_VAR 0 5
22122: PPUSH
22123: LD_INT 4
22125: PPUSH
22126: LD_VAR 0 8
22130: PPUSH
22131: CALL_OW 1
22135: ST_TO_ADDR
// end ;
22136: LD_VAR 0 5
22140: RET
// export function DangerAtRange ( unit , range ) ; begin
22141: LD_INT 0
22143: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22144: LD_ADDR_VAR 0 3
22148: PUSH
22149: LD_VAR 0 1
22153: PPUSH
22154: CALL_OW 255
22158: PPUSH
22159: LD_VAR 0 1
22163: PPUSH
22164: CALL_OW 250
22168: PPUSH
22169: LD_VAR 0 1
22173: PPUSH
22174: CALL_OW 251
22178: PPUSH
22179: LD_VAR 0 2
22183: PPUSH
22184: CALL 20440 0 4
22188: ST_TO_ADDR
// end ;
22189: LD_VAR 0 3
22193: RET
// export function DangerInArea ( side , area ) ; begin
22194: LD_INT 0
22196: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
22197: LD_ADDR_VAR 0 3
22201: PUSH
22202: LD_VAR 0 2
22206: PPUSH
22207: LD_INT 81
22209: PUSH
22210: LD_VAR 0 1
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PPUSH
22219: CALL_OW 70
22223: ST_TO_ADDR
// end ;
22224: LD_VAR 0 3
22228: RET
// export function IsExtension ( b ) ; begin
22229: LD_INT 0
22231: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
22232: LD_ADDR_VAR 0 2
22236: PUSH
22237: LD_VAR 0 1
22241: PUSH
22242: LD_INT 23
22244: PUSH
22245: LD_INT 20
22247: PUSH
22248: LD_INT 22
22250: PUSH
22251: LD_INT 17
22253: PUSH
22254: LD_INT 24
22256: PUSH
22257: LD_INT 21
22259: PUSH
22260: LD_INT 19
22262: PUSH
22263: LD_INT 16
22265: PUSH
22266: LD_INT 25
22268: PUSH
22269: LD_INT 18
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: IN
22284: ST_TO_ADDR
// end ;
22285: LD_VAR 0 2
22289: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
22290: LD_INT 0
22292: PPUSH
22293: PPUSH
22294: PPUSH
// result := [ ] ;
22295: LD_ADDR_VAR 0 4
22299: PUSH
22300: EMPTY
22301: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
22302: LD_ADDR_VAR 0 5
22306: PUSH
22307: LD_VAR 0 2
22311: PPUSH
22312: LD_INT 21
22314: PUSH
22315: LD_INT 3
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PPUSH
22322: CALL_OW 70
22326: ST_TO_ADDR
// if not tmp then
22327: LD_VAR 0 5
22331: NOT
22332: IFFALSE 22336
// exit ;
22334: GO 22400
// if checkLink then
22336: LD_VAR 0 3
22340: IFFALSE 22390
// begin for i in tmp do
22342: LD_ADDR_VAR 0 6
22346: PUSH
22347: LD_VAR 0 5
22351: PUSH
22352: FOR_IN
22353: IFFALSE 22388
// if GetBase ( i ) <> base then
22355: LD_VAR 0 6
22359: PPUSH
22360: CALL_OW 274
22364: PUSH
22365: LD_VAR 0 1
22369: NONEQUAL
22370: IFFALSE 22386
// ComLinkToBase ( base , i ) ;
22372: LD_VAR 0 1
22376: PPUSH
22377: LD_VAR 0 6
22381: PPUSH
22382: CALL_OW 169
22386: GO 22352
22388: POP
22389: POP
// end ; result := tmp ;
22390: LD_ADDR_VAR 0 4
22394: PUSH
22395: LD_VAR 0 5
22399: ST_TO_ADDR
// end ;
22400: LD_VAR 0 4
22404: RET
// export function ComComplete ( units , b ) ; var i ; begin
22405: LD_INT 0
22407: PPUSH
22408: PPUSH
// if not units then
22409: LD_VAR 0 1
22413: NOT
22414: IFFALSE 22418
// exit ;
22416: GO 22508
// for i in units do
22418: LD_ADDR_VAR 0 4
22422: PUSH
22423: LD_VAR 0 1
22427: PUSH
22428: FOR_IN
22429: IFFALSE 22506
// if BuildingStatus ( b ) = bs_build then
22431: LD_VAR 0 2
22435: PPUSH
22436: CALL_OW 461
22440: PUSH
22441: LD_INT 1
22443: EQUAL
22444: IFFALSE 22504
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
22446: LD_VAR 0 4
22450: PPUSH
22451: LD_STRING h
22453: PUSH
22454: LD_VAR 0 2
22458: PPUSH
22459: CALL_OW 250
22463: PUSH
22464: LD_VAR 0 2
22468: PPUSH
22469: CALL_OW 251
22473: PUSH
22474: LD_VAR 0 2
22478: PUSH
22479: LD_INT 0
22481: PUSH
22482: LD_INT 0
22484: PUSH
22485: LD_INT 0
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: PUSH
22497: EMPTY
22498: LIST
22499: PPUSH
22500: CALL_OW 446
22504: GO 22428
22506: POP
22507: POP
// end ;
22508: LD_VAR 0 3
22512: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
22513: LD_INT 0
22515: PPUSH
22516: PPUSH
22517: PPUSH
22518: PPUSH
22519: PPUSH
22520: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
22521: LD_VAR 0 1
22525: NOT
22526: PUSH
22527: LD_VAR 0 1
22531: PPUSH
22532: CALL_OW 263
22536: PUSH
22537: LD_INT 2
22539: NONEQUAL
22540: OR
22541: IFFALSE 22545
// exit ;
22543: GO 22861
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
22545: LD_ADDR_VAR 0 6
22549: PUSH
22550: LD_INT 22
22552: PUSH
22553: LD_VAR 0 1
22557: PPUSH
22558: CALL_OW 255
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 2
22569: PUSH
22570: LD_INT 30
22572: PUSH
22573: LD_INT 36
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 34
22582: PUSH
22583: LD_INT 31
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: LIST
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PPUSH
22599: CALL_OW 69
22603: ST_TO_ADDR
// if not tmp then
22604: LD_VAR 0 6
22608: NOT
22609: IFFALSE 22613
// exit ;
22611: GO 22861
// result := [ ] ;
22613: LD_ADDR_VAR 0 2
22617: PUSH
22618: EMPTY
22619: ST_TO_ADDR
// for i in tmp do
22620: LD_ADDR_VAR 0 3
22624: PUSH
22625: LD_VAR 0 6
22629: PUSH
22630: FOR_IN
22631: IFFALSE 22702
// begin t := UnitsInside ( i ) ;
22633: LD_ADDR_VAR 0 4
22637: PUSH
22638: LD_VAR 0 3
22642: PPUSH
22643: CALL_OW 313
22647: ST_TO_ADDR
// if t then
22648: LD_VAR 0 4
22652: IFFALSE 22700
// for j in t do
22654: LD_ADDR_VAR 0 7
22658: PUSH
22659: LD_VAR 0 4
22663: PUSH
22664: FOR_IN
22665: IFFALSE 22698
// result := Replace ( result , result + 1 , j ) ;
22667: LD_ADDR_VAR 0 2
22671: PUSH
22672: LD_VAR 0 2
22676: PPUSH
22677: LD_VAR 0 2
22681: PUSH
22682: LD_INT 1
22684: PLUS
22685: PPUSH
22686: LD_VAR 0 7
22690: PPUSH
22691: CALL_OW 1
22695: ST_TO_ADDR
22696: GO 22664
22698: POP
22699: POP
// end ;
22700: GO 22630
22702: POP
22703: POP
// if not result then
22704: LD_VAR 0 2
22708: NOT
22709: IFFALSE 22713
// exit ;
22711: GO 22861
// mech := result [ 1 ] ;
22713: LD_ADDR_VAR 0 5
22717: PUSH
22718: LD_VAR 0 2
22722: PUSH
22723: LD_INT 1
22725: ARRAY
22726: ST_TO_ADDR
// if result > 1 then
22727: LD_VAR 0 2
22731: PUSH
22732: LD_INT 1
22734: GREATER
22735: IFFALSE 22847
// begin for i = 2 to result do
22737: LD_ADDR_VAR 0 3
22741: PUSH
22742: DOUBLE
22743: LD_INT 2
22745: DEC
22746: ST_TO_ADDR
22747: LD_VAR 0 2
22751: PUSH
22752: FOR_TO
22753: IFFALSE 22845
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
22755: LD_ADDR_VAR 0 4
22759: PUSH
22760: LD_VAR 0 2
22764: PUSH
22765: LD_VAR 0 3
22769: ARRAY
22770: PPUSH
22771: LD_INT 3
22773: PPUSH
22774: CALL_OW 259
22778: PUSH
22779: LD_VAR 0 2
22783: PUSH
22784: LD_VAR 0 3
22788: ARRAY
22789: PPUSH
22790: CALL_OW 432
22794: MINUS
22795: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
22796: LD_VAR 0 4
22800: PUSH
22801: LD_VAR 0 5
22805: PPUSH
22806: LD_INT 3
22808: PPUSH
22809: CALL_OW 259
22813: PUSH
22814: LD_VAR 0 5
22818: PPUSH
22819: CALL_OW 432
22823: MINUS
22824: GREATEREQUAL
22825: IFFALSE 22843
// mech := result [ i ] ;
22827: LD_ADDR_VAR 0 5
22831: PUSH
22832: LD_VAR 0 2
22836: PUSH
22837: LD_VAR 0 3
22841: ARRAY
22842: ST_TO_ADDR
// end ;
22843: GO 22752
22845: POP
22846: POP
// end ; ComLinkTo ( vehicle , mech ) ;
22847: LD_VAR 0 1
22851: PPUSH
22852: LD_VAR 0 5
22856: PPUSH
22857: CALL_OW 135
// end ;
22861: LD_VAR 0 2
22865: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
22866: LD_INT 0
22868: PPUSH
22869: PPUSH
22870: PPUSH
22871: PPUSH
22872: PPUSH
22873: PPUSH
22874: PPUSH
22875: PPUSH
22876: PPUSH
22877: PPUSH
22878: PPUSH
22879: PPUSH
22880: PPUSH
// result := [ ] ;
22881: LD_ADDR_VAR 0 7
22885: PUSH
22886: EMPTY
22887: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
22888: LD_VAR 0 1
22892: PPUSH
22893: CALL_OW 266
22897: PUSH
22898: LD_INT 0
22900: PUSH
22901: LD_INT 1
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: IN
22908: NOT
22909: IFFALSE 22913
// exit ;
22911: GO 24547
// if name then
22913: LD_VAR 0 3
22917: IFFALSE 22933
// SetBName ( base_dep , name ) ;
22919: LD_VAR 0 1
22923: PPUSH
22924: LD_VAR 0 3
22928: PPUSH
22929: CALL_OW 500
// base := GetBase ( base_dep ) ;
22933: LD_ADDR_VAR 0 15
22937: PUSH
22938: LD_VAR 0 1
22942: PPUSH
22943: CALL_OW 274
22947: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
22948: LD_ADDR_VAR 0 16
22952: PUSH
22953: LD_VAR 0 1
22957: PPUSH
22958: CALL_OW 255
22962: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
22963: LD_ADDR_VAR 0 17
22967: PUSH
22968: LD_VAR 0 1
22972: PPUSH
22973: CALL_OW 248
22977: ST_TO_ADDR
// if sources then
22978: LD_VAR 0 5
22982: IFFALSE 23029
// for i = 1 to 3 do
22984: LD_ADDR_VAR 0 8
22988: PUSH
22989: DOUBLE
22990: LD_INT 1
22992: DEC
22993: ST_TO_ADDR
22994: LD_INT 3
22996: PUSH
22997: FOR_TO
22998: IFFALSE 23027
// AddResourceType ( base , i , sources [ i ] ) ;
23000: LD_VAR 0 15
23004: PPUSH
23005: LD_VAR 0 8
23009: PPUSH
23010: LD_VAR 0 5
23014: PUSH
23015: LD_VAR 0 8
23019: ARRAY
23020: PPUSH
23021: CALL_OW 276
23025: GO 22997
23027: POP
23028: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23029: LD_ADDR_VAR 0 18
23033: PUSH
23034: LD_VAR 0 15
23038: PPUSH
23039: LD_VAR 0 2
23043: PPUSH
23044: LD_INT 1
23046: PPUSH
23047: CALL 22290 0 3
23051: ST_TO_ADDR
// InitHc ;
23052: CALL_OW 19
// InitUc ;
23056: CALL_OW 18
// uc_side := side ;
23060: LD_ADDR_OWVAR 20
23064: PUSH
23065: LD_VAR 0 16
23069: ST_TO_ADDR
// uc_nation := nation ;
23070: LD_ADDR_OWVAR 21
23074: PUSH
23075: LD_VAR 0 17
23079: ST_TO_ADDR
// if buildings then
23080: LD_VAR 0 18
23084: IFFALSE 24406
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23086: LD_ADDR_VAR 0 19
23090: PUSH
23091: LD_VAR 0 18
23095: PPUSH
23096: LD_INT 2
23098: PUSH
23099: LD_INT 30
23101: PUSH
23102: LD_INT 29
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 30
23111: PUSH
23112: LD_INT 30
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: LIST
23123: PPUSH
23124: CALL_OW 72
23128: ST_TO_ADDR
// if tmp then
23129: LD_VAR 0 19
23133: IFFALSE 23181
// for i in tmp do
23135: LD_ADDR_VAR 0 8
23139: PUSH
23140: LD_VAR 0 19
23144: PUSH
23145: FOR_IN
23146: IFFALSE 23179
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
23148: LD_VAR 0 8
23152: PPUSH
23153: CALL_OW 250
23157: PPUSH
23158: LD_VAR 0 8
23162: PPUSH
23163: CALL_OW 251
23167: PPUSH
23168: LD_VAR 0 16
23172: PPUSH
23173: CALL_OW 441
23177: GO 23145
23179: POP
23180: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23181: LD_VAR 0 18
23185: PPUSH
23186: LD_INT 2
23188: PUSH
23189: LD_INT 30
23191: PUSH
23192: LD_INT 32
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 30
23201: PUSH
23202: LD_INT 33
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: LIST
23213: PPUSH
23214: CALL_OW 72
23218: IFFALSE 23306
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
23220: LD_ADDR_VAR 0 8
23224: PUSH
23225: LD_VAR 0 18
23229: PPUSH
23230: LD_INT 2
23232: PUSH
23233: LD_INT 30
23235: PUSH
23236: LD_INT 32
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 30
23245: PUSH
23246: LD_INT 33
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: LIST
23257: PPUSH
23258: CALL_OW 72
23262: PUSH
23263: FOR_IN
23264: IFFALSE 23304
// begin if not GetBWeapon ( i ) then
23266: LD_VAR 0 8
23270: PPUSH
23271: CALL_OW 269
23275: NOT
23276: IFFALSE 23302
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
23278: LD_VAR 0 8
23282: PPUSH
23283: LD_VAR 0 8
23287: PPUSH
23288: LD_VAR 0 2
23292: PPUSH
23293: CALL 24552 0 2
23297: PPUSH
23298: CALL_OW 431
// end ;
23302: GO 23263
23304: POP
23305: POP
// end ; for i = 1 to personel do
23306: LD_ADDR_VAR 0 8
23310: PUSH
23311: DOUBLE
23312: LD_INT 1
23314: DEC
23315: ST_TO_ADDR
23316: LD_VAR 0 6
23320: PUSH
23321: FOR_TO
23322: IFFALSE 24386
// begin if i > 4 then
23324: LD_VAR 0 8
23328: PUSH
23329: LD_INT 4
23331: GREATER
23332: IFFALSE 23336
// break ;
23334: GO 24386
// case i of 1 :
23336: LD_VAR 0 8
23340: PUSH
23341: LD_INT 1
23343: DOUBLE
23344: EQUAL
23345: IFTRUE 23349
23347: GO 23429
23349: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
23350: LD_ADDR_VAR 0 12
23354: PUSH
23355: LD_VAR 0 18
23359: PPUSH
23360: LD_INT 22
23362: PUSH
23363: LD_VAR 0 16
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 58
23374: PUSH
23375: EMPTY
23376: LIST
23377: PUSH
23378: LD_INT 2
23380: PUSH
23381: LD_INT 30
23383: PUSH
23384: LD_INT 32
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 30
23393: PUSH
23394: LD_INT 4
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 30
23403: PUSH
23404: LD_INT 5
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: LIST
23421: PPUSH
23422: CALL_OW 72
23426: ST_TO_ADDR
23427: GO 23651
23429: LD_INT 2
23431: DOUBLE
23432: EQUAL
23433: IFTRUE 23437
23435: GO 23499
23437: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
23438: LD_ADDR_VAR 0 12
23442: PUSH
23443: LD_VAR 0 18
23447: PPUSH
23448: LD_INT 22
23450: PUSH
23451: LD_VAR 0 16
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 2
23462: PUSH
23463: LD_INT 30
23465: PUSH
23466: LD_INT 0
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 30
23475: PUSH
23476: LD_INT 1
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: LIST
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PPUSH
23492: CALL_OW 72
23496: ST_TO_ADDR
23497: GO 23651
23499: LD_INT 3
23501: DOUBLE
23502: EQUAL
23503: IFTRUE 23507
23505: GO 23569
23507: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
23508: LD_ADDR_VAR 0 12
23512: PUSH
23513: LD_VAR 0 18
23517: PPUSH
23518: LD_INT 22
23520: PUSH
23521: LD_VAR 0 16
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 2
23532: PUSH
23533: LD_INT 30
23535: PUSH
23536: LD_INT 2
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 30
23545: PUSH
23546: LD_INT 3
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: LIST
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PPUSH
23562: CALL_OW 72
23566: ST_TO_ADDR
23567: GO 23651
23569: LD_INT 4
23571: DOUBLE
23572: EQUAL
23573: IFTRUE 23577
23575: GO 23650
23577: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
23578: LD_ADDR_VAR 0 12
23582: PUSH
23583: LD_VAR 0 18
23587: PPUSH
23588: LD_INT 22
23590: PUSH
23591: LD_VAR 0 16
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 2
23602: PUSH
23603: LD_INT 30
23605: PUSH
23606: LD_INT 6
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 30
23615: PUSH
23616: LD_INT 7
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 30
23625: PUSH
23626: LD_INT 8
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PPUSH
23643: CALL_OW 72
23647: ST_TO_ADDR
23648: GO 23651
23650: POP
// if i = 1 then
23651: LD_VAR 0 8
23655: PUSH
23656: LD_INT 1
23658: EQUAL
23659: IFFALSE 23770
// begin tmp := [ ] ;
23661: LD_ADDR_VAR 0 19
23665: PUSH
23666: EMPTY
23667: ST_TO_ADDR
// for j in f do
23668: LD_ADDR_VAR 0 9
23672: PUSH
23673: LD_VAR 0 12
23677: PUSH
23678: FOR_IN
23679: IFFALSE 23752
// if GetBType ( j ) = b_bunker then
23681: LD_VAR 0 9
23685: PPUSH
23686: CALL_OW 266
23690: PUSH
23691: LD_INT 32
23693: EQUAL
23694: IFFALSE 23721
// tmp := Insert ( tmp , 1 , j ) else
23696: LD_ADDR_VAR 0 19
23700: PUSH
23701: LD_VAR 0 19
23705: PPUSH
23706: LD_INT 1
23708: PPUSH
23709: LD_VAR 0 9
23713: PPUSH
23714: CALL_OW 2
23718: ST_TO_ADDR
23719: GO 23750
// tmp := Insert ( tmp , tmp + 1 , j ) ;
23721: LD_ADDR_VAR 0 19
23725: PUSH
23726: LD_VAR 0 19
23730: PPUSH
23731: LD_VAR 0 19
23735: PUSH
23736: LD_INT 1
23738: PLUS
23739: PPUSH
23740: LD_VAR 0 9
23744: PPUSH
23745: CALL_OW 2
23749: ST_TO_ADDR
23750: GO 23678
23752: POP
23753: POP
// if tmp then
23754: LD_VAR 0 19
23758: IFFALSE 23770
// f := tmp ;
23760: LD_ADDR_VAR 0 12
23764: PUSH
23765: LD_VAR 0 19
23769: ST_TO_ADDR
// end ; x := personel [ i ] ;
23770: LD_ADDR_VAR 0 13
23774: PUSH
23775: LD_VAR 0 6
23779: PUSH
23780: LD_VAR 0 8
23784: ARRAY
23785: ST_TO_ADDR
// if x = - 1 then
23786: LD_VAR 0 13
23790: PUSH
23791: LD_INT 1
23793: NEG
23794: EQUAL
23795: IFFALSE 24004
// begin for j in f do
23797: LD_ADDR_VAR 0 9
23801: PUSH
23802: LD_VAR 0 12
23806: PUSH
23807: FOR_IN
23808: IFFALSE 24000
// repeat InitHc ;
23810: CALL_OW 19
// if GetBType ( j ) = b_barracks then
23814: LD_VAR 0 9
23818: PPUSH
23819: CALL_OW 266
23823: PUSH
23824: LD_INT 5
23826: EQUAL
23827: IFFALSE 23897
// begin if UnitsInside ( j ) < 3 then
23829: LD_VAR 0 9
23833: PPUSH
23834: CALL_OW 313
23838: PUSH
23839: LD_INT 3
23841: LESS
23842: IFFALSE 23878
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23844: LD_INT 0
23846: PPUSH
23847: LD_INT 5
23849: PUSH
23850: LD_INT 8
23852: PUSH
23853: LD_INT 9
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: PUSH
23861: LD_VAR 0 17
23865: ARRAY
23866: PPUSH
23867: LD_VAR 0 4
23871: PPUSH
23872: CALL_OW 380
23876: GO 23895
// PrepareHuman ( false , i , skill ) ;
23878: LD_INT 0
23880: PPUSH
23881: LD_VAR 0 8
23885: PPUSH
23886: LD_VAR 0 4
23890: PPUSH
23891: CALL_OW 380
// end else
23895: GO 23914
// PrepareHuman ( false , i , skill ) ;
23897: LD_INT 0
23899: PPUSH
23900: LD_VAR 0 8
23904: PPUSH
23905: LD_VAR 0 4
23909: PPUSH
23910: CALL_OW 380
// un := CreateHuman ;
23914: LD_ADDR_VAR 0 14
23918: PUSH
23919: CALL_OW 44
23923: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23924: LD_ADDR_VAR 0 7
23928: PUSH
23929: LD_VAR 0 7
23933: PPUSH
23934: LD_INT 1
23936: PPUSH
23937: LD_VAR 0 14
23941: PPUSH
23942: CALL_OW 2
23946: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
23947: LD_VAR 0 14
23951: PPUSH
23952: LD_VAR 0 9
23956: PPUSH
23957: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
23961: LD_VAR 0 9
23965: PPUSH
23966: CALL_OW 313
23970: PUSH
23971: LD_INT 6
23973: EQUAL
23974: PUSH
23975: LD_VAR 0 9
23979: PPUSH
23980: CALL_OW 266
23984: PUSH
23985: LD_INT 32
23987: PUSH
23988: LD_INT 31
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: IN
23995: OR
23996: IFFALSE 23810
23998: GO 23807
24000: POP
24001: POP
// end else
24002: GO 24384
// for j = 1 to x do
24004: LD_ADDR_VAR 0 9
24008: PUSH
24009: DOUBLE
24010: LD_INT 1
24012: DEC
24013: ST_TO_ADDR
24014: LD_VAR 0 13
24018: PUSH
24019: FOR_TO
24020: IFFALSE 24382
// begin InitHc ;
24022: CALL_OW 19
// if not f then
24026: LD_VAR 0 12
24030: NOT
24031: IFFALSE 24120
// begin PrepareHuman ( false , i , skill ) ;
24033: LD_INT 0
24035: PPUSH
24036: LD_VAR 0 8
24040: PPUSH
24041: LD_VAR 0 4
24045: PPUSH
24046: CALL_OW 380
// un := CreateHuman ;
24050: LD_ADDR_VAR 0 14
24054: PUSH
24055: CALL_OW 44
24059: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24060: LD_ADDR_VAR 0 7
24064: PUSH
24065: LD_VAR 0 7
24069: PPUSH
24070: LD_INT 1
24072: PPUSH
24073: LD_VAR 0 14
24077: PPUSH
24078: CALL_OW 2
24082: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24083: LD_VAR 0 14
24087: PPUSH
24088: LD_VAR 0 1
24092: PPUSH
24093: CALL_OW 250
24097: PPUSH
24098: LD_VAR 0 1
24102: PPUSH
24103: CALL_OW 251
24107: PPUSH
24108: LD_INT 10
24110: PPUSH
24111: LD_INT 0
24113: PPUSH
24114: CALL_OW 50
// continue ;
24118: GO 24019
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
24120: LD_VAR 0 12
24124: PUSH
24125: LD_INT 1
24127: ARRAY
24128: PPUSH
24129: CALL_OW 313
24133: PUSH
24134: LD_VAR 0 12
24138: PUSH
24139: LD_INT 1
24141: ARRAY
24142: PPUSH
24143: CALL_OW 266
24147: PUSH
24148: LD_INT 32
24150: PUSH
24151: LD_INT 31
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: IN
24158: AND
24159: PUSH
24160: LD_VAR 0 12
24164: PUSH
24165: LD_INT 1
24167: ARRAY
24168: PPUSH
24169: CALL_OW 313
24173: PUSH
24174: LD_INT 6
24176: EQUAL
24177: OR
24178: IFFALSE 24198
// f := Delete ( f , 1 ) ;
24180: LD_ADDR_VAR 0 12
24184: PUSH
24185: LD_VAR 0 12
24189: PPUSH
24190: LD_INT 1
24192: PPUSH
24193: CALL_OW 3
24197: ST_TO_ADDR
// if not f then
24198: LD_VAR 0 12
24202: NOT
24203: IFFALSE 24221
// begin x := x + 2 ;
24205: LD_ADDR_VAR 0 13
24209: PUSH
24210: LD_VAR 0 13
24214: PUSH
24215: LD_INT 2
24217: PLUS
24218: ST_TO_ADDR
// continue ;
24219: GO 24019
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
24221: LD_VAR 0 12
24225: PUSH
24226: LD_INT 1
24228: ARRAY
24229: PPUSH
24230: CALL_OW 266
24234: PUSH
24235: LD_INT 5
24237: EQUAL
24238: IFFALSE 24312
// begin if UnitsInside ( f [ 1 ] ) < 3 then
24240: LD_VAR 0 12
24244: PUSH
24245: LD_INT 1
24247: ARRAY
24248: PPUSH
24249: CALL_OW 313
24253: PUSH
24254: LD_INT 3
24256: LESS
24257: IFFALSE 24293
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24259: LD_INT 0
24261: PPUSH
24262: LD_INT 5
24264: PUSH
24265: LD_INT 8
24267: PUSH
24268: LD_INT 9
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: LIST
24275: PUSH
24276: LD_VAR 0 17
24280: ARRAY
24281: PPUSH
24282: LD_VAR 0 4
24286: PPUSH
24287: CALL_OW 380
24291: GO 24310
// PrepareHuman ( false , i , skill ) ;
24293: LD_INT 0
24295: PPUSH
24296: LD_VAR 0 8
24300: PPUSH
24301: LD_VAR 0 4
24305: PPUSH
24306: CALL_OW 380
// end else
24310: GO 24329
// PrepareHuman ( false , i , skill ) ;
24312: LD_INT 0
24314: PPUSH
24315: LD_VAR 0 8
24319: PPUSH
24320: LD_VAR 0 4
24324: PPUSH
24325: CALL_OW 380
// un := CreateHuman ;
24329: LD_ADDR_VAR 0 14
24333: PUSH
24334: CALL_OW 44
24338: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24339: LD_ADDR_VAR 0 7
24343: PUSH
24344: LD_VAR 0 7
24348: PPUSH
24349: LD_INT 1
24351: PPUSH
24352: LD_VAR 0 14
24356: PPUSH
24357: CALL_OW 2
24361: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
24362: LD_VAR 0 14
24366: PPUSH
24367: LD_VAR 0 12
24371: PUSH
24372: LD_INT 1
24374: ARRAY
24375: PPUSH
24376: CALL_OW 52
// end ;
24380: GO 24019
24382: POP
24383: POP
// end ;
24384: GO 23321
24386: POP
24387: POP
// result := result ^ buildings ;
24388: LD_ADDR_VAR 0 7
24392: PUSH
24393: LD_VAR 0 7
24397: PUSH
24398: LD_VAR 0 18
24402: ADD
24403: ST_TO_ADDR
// end else
24404: GO 24547
// begin for i = 1 to personel do
24406: LD_ADDR_VAR 0 8
24410: PUSH
24411: DOUBLE
24412: LD_INT 1
24414: DEC
24415: ST_TO_ADDR
24416: LD_VAR 0 6
24420: PUSH
24421: FOR_TO
24422: IFFALSE 24545
// begin if i > 4 then
24424: LD_VAR 0 8
24428: PUSH
24429: LD_INT 4
24431: GREATER
24432: IFFALSE 24436
// break ;
24434: GO 24545
// x := personel [ i ] ;
24436: LD_ADDR_VAR 0 13
24440: PUSH
24441: LD_VAR 0 6
24445: PUSH
24446: LD_VAR 0 8
24450: ARRAY
24451: ST_TO_ADDR
// if x = - 1 then
24452: LD_VAR 0 13
24456: PUSH
24457: LD_INT 1
24459: NEG
24460: EQUAL
24461: IFFALSE 24465
// continue ;
24463: GO 24421
// PrepareHuman ( false , i , skill ) ;
24465: LD_INT 0
24467: PPUSH
24468: LD_VAR 0 8
24472: PPUSH
24473: LD_VAR 0 4
24477: PPUSH
24478: CALL_OW 380
// un := CreateHuman ;
24482: LD_ADDR_VAR 0 14
24486: PUSH
24487: CALL_OW 44
24491: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24492: LD_VAR 0 14
24496: PPUSH
24497: LD_VAR 0 1
24501: PPUSH
24502: CALL_OW 250
24506: PPUSH
24507: LD_VAR 0 1
24511: PPUSH
24512: CALL_OW 251
24516: PPUSH
24517: LD_INT 10
24519: PPUSH
24520: LD_INT 0
24522: PPUSH
24523: CALL_OW 50
// result := result ^ un ;
24527: LD_ADDR_VAR 0 7
24531: PUSH
24532: LD_VAR 0 7
24536: PUSH
24537: LD_VAR 0 14
24541: ADD
24542: ST_TO_ADDR
// end ;
24543: GO 24421
24545: POP
24546: POP
// end ; end ;
24547: LD_VAR 0 7
24551: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
24552: LD_INT 0
24554: PPUSH
24555: PPUSH
24556: PPUSH
24557: PPUSH
24558: PPUSH
24559: PPUSH
24560: PPUSH
24561: PPUSH
24562: PPUSH
24563: PPUSH
24564: PPUSH
24565: PPUSH
24566: PPUSH
24567: PPUSH
24568: PPUSH
24569: PPUSH
// result := false ;
24570: LD_ADDR_VAR 0 3
24574: PUSH
24575: LD_INT 0
24577: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
24578: LD_VAR 0 1
24582: NOT
24583: PUSH
24584: LD_VAR 0 1
24588: PPUSH
24589: CALL_OW 266
24593: PUSH
24594: LD_INT 32
24596: PUSH
24597: LD_INT 33
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: IN
24604: NOT
24605: OR
24606: IFFALSE 24610
// exit ;
24608: GO 25719
// nat := GetNation ( tower ) ;
24610: LD_ADDR_VAR 0 12
24614: PUSH
24615: LD_VAR 0 1
24619: PPUSH
24620: CALL_OW 248
24624: ST_TO_ADDR
// side := GetSide ( tower ) ;
24625: LD_ADDR_VAR 0 16
24629: PUSH
24630: LD_VAR 0 1
24634: PPUSH
24635: CALL_OW 255
24639: ST_TO_ADDR
// x := GetX ( tower ) ;
24640: LD_ADDR_VAR 0 10
24644: PUSH
24645: LD_VAR 0 1
24649: PPUSH
24650: CALL_OW 250
24654: ST_TO_ADDR
// y := GetY ( tower ) ;
24655: LD_ADDR_VAR 0 11
24659: PUSH
24660: LD_VAR 0 1
24664: PPUSH
24665: CALL_OW 251
24669: ST_TO_ADDR
// if not x or not y then
24670: LD_VAR 0 10
24674: NOT
24675: PUSH
24676: LD_VAR 0 11
24680: NOT
24681: OR
24682: IFFALSE 24686
// exit ;
24684: GO 25719
// weapon := 0 ;
24686: LD_ADDR_VAR 0 18
24690: PUSH
24691: LD_INT 0
24693: ST_TO_ADDR
// fac_list := [ ] ;
24694: LD_ADDR_VAR 0 17
24698: PUSH
24699: EMPTY
24700: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
24701: LD_ADDR_VAR 0 6
24705: PUSH
24706: LD_VAR 0 1
24710: PPUSH
24711: CALL_OW 274
24715: PPUSH
24716: LD_VAR 0 2
24720: PPUSH
24721: LD_INT 0
24723: PPUSH
24724: CALL 22290 0 3
24728: PPUSH
24729: LD_INT 30
24731: PUSH
24732: LD_INT 3
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PPUSH
24739: CALL_OW 72
24743: ST_TO_ADDR
// if not factories then
24744: LD_VAR 0 6
24748: NOT
24749: IFFALSE 24753
// exit ;
24751: GO 25719
// for i in factories do
24753: LD_ADDR_VAR 0 8
24757: PUSH
24758: LD_VAR 0 6
24762: PUSH
24763: FOR_IN
24764: IFFALSE 24789
// fac_list := fac_list union AvailableWeaponList ( i ) ;
24766: LD_ADDR_VAR 0 17
24770: PUSH
24771: LD_VAR 0 17
24775: PUSH
24776: LD_VAR 0 8
24780: PPUSH
24781: CALL_OW 478
24785: UNION
24786: ST_TO_ADDR
24787: GO 24763
24789: POP
24790: POP
// if not fac_list then
24791: LD_VAR 0 17
24795: NOT
24796: IFFALSE 24800
// exit ;
24798: GO 25719
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
24800: LD_ADDR_VAR 0 5
24804: PUSH
24805: LD_INT 4
24807: PUSH
24808: LD_INT 5
24810: PUSH
24811: LD_INT 9
24813: PUSH
24814: LD_INT 10
24816: PUSH
24817: LD_INT 6
24819: PUSH
24820: LD_INT 7
24822: PUSH
24823: LD_INT 11
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 27
24837: PUSH
24838: LD_INT 28
24840: PUSH
24841: LD_INT 26
24843: PUSH
24844: LD_INT 30
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 43
24855: PUSH
24856: LD_INT 44
24858: PUSH
24859: LD_INT 46
24861: PUSH
24862: LD_INT 45
24864: PUSH
24865: LD_INT 47
24867: PUSH
24868: LD_INT 49
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: LIST
24883: PUSH
24884: LD_VAR 0 12
24888: ARRAY
24889: ST_TO_ADDR
// list := list isect fac_list ;
24890: LD_ADDR_VAR 0 5
24894: PUSH
24895: LD_VAR 0 5
24899: PUSH
24900: LD_VAR 0 17
24904: ISECT
24905: ST_TO_ADDR
// if not list then
24906: LD_VAR 0 5
24910: NOT
24911: IFFALSE 24915
// exit ;
24913: GO 25719
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
24915: LD_VAR 0 12
24919: PUSH
24920: LD_INT 3
24922: EQUAL
24923: PUSH
24924: LD_INT 49
24926: PUSH
24927: LD_VAR 0 5
24931: IN
24932: AND
24933: PUSH
24934: LD_INT 31
24936: PPUSH
24937: LD_VAR 0 16
24941: PPUSH
24942: CALL_OW 321
24946: PUSH
24947: LD_INT 2
24949: EQUAL
24950: AND
24951: IFFALSE 25011
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
24953: LD_INT 22
24955: PUSH
24956: LD_VAR 0 16
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 35
24967: PUSH
24968: LD_INT 49
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 91
24977: PUSH
24978: LD_VAR 0 1
24982: PUSH
24983: LD_INT 10
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: LIST
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: LIST
24995: PPUSH
24996: CALL_OW 69
25000: NOT
25001: IFFALSE 25011
// weapon := ru_time_lapser ;
25003: LD_ADDR_VAR 0 18
25007: PUSH
25008: LD_INT 49
25010: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25011: LD_VAR 0 12
25015: PUSH
25016: LD_INT 1
25018: PUSH
25019: LD_INT 2
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: IN
25026: PUSH
25027: LD_INT 11
25029: PUSH
25030: LD_VAR 0 5
25034: IN
25035: PUSH
25036: LD_INT 30
25038: PUSH
25039: LD_VAR 0 5
25043: IN
25044: OR
25045: AND
25046: PUSH
25047: LD_INT 6
25049: PPUSH
25050: LD_VAR 0 16
25054: PPUSH
25055: CALL_OW 321
25059: PUSH
25060: LD_INT 2
25062: EQUAL
25063: AND
25064: IFFALSE 25229
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25066: LD_INT 22
25068: PUSH
25069: LD_VAR 0 16
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 2
25080: PUSH
25081: LD_INT 35
25083: PUSH
25084: LD_INT 11
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 35
25093: PUSH
25094: LD_INT 30
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 91
25108: PUSH
25109: LD_VAR 0 1
25113: PUSH
25114: LD_INT 18
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: LIST
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: LIST
25126: PPUSH
25127: CALL_OW 69
25131: NOT
25132: PUSH
25133: LD_INT 22
25135: PUSH
25136: LD_VAR 0 16
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 2
25147: PUSH
25148: LD_INT 30
25150: PUSH
25151: LD_INT 32
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 30
25160: PUSH
25161: LD_INT 33
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 91
25175: PUSH
25176: LD_VAR 0 1
25180: PUSH
25181: LD_INT 12
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: LIST
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: LIST
25193: PUSH
25194: EMPTY
25195: LIST
25196: PPUSH
25197: CALL_OW 69
25201: PUSH
25202: LD_INT 2
25204: GREATER
25205: AND
25206: IFFALSE 25229
// weapon := [ us_radar , ar_radar ] [ nat ] ;
25208: LD_ADDR_VAR 0 18
25212: PUSH
25213: LD_INT 11
25215: PUSH
25216: LD_INT 30
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_VAR 0 12
25227: ARRAY
25228: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
25229: LD_VAR 0 18
25233: NOT
25234: PUSH
25235: LD_INT 40
25237: PPUSH
25238: LD_VAR 0 16
25242: PPUSH
25243: CALL_OW 321
25247: PUSH
25248: LD_INT 2
25250: EQUAL
25251: AND
25252: PUSH
25253: LD_INT 7
25255: PUSH
25256: LD_VAR 0 5
25260: IN
25261: PUSH
25262: LD_INT 28
25264: PUSH
25265: LD_VAR 0 5
25269: IN
25270: OR
25271: PUSH
25272: LD_INT 45
25274: PUSH
25275: LD_VAR 0 5
25279: IN
25280: OR
25281: AND
25282: IFFALSE 25536
// begin hex := GetHexInfo ( x , y ) ;
25284: LD_ADDR_VAR 0 4
25288: PUSH
25289: LD_VAR 0 10
25293: PPUSH
25294: LD_VAR 0 11
25298: PPUSH
25299: CALL_OW 546
25303: ST_TO_ADDR
// if hex [ 1 ] then
25304: LD_VAR 0 4
25308: PUSH
25309: LD_INT 1
25311: ARRAY
25312: IFFALSE 25316
// exit ;
25314: GO 25719
// height := hex [ 2 ] ;
25316: LD_ADDR_VAR 0 15
25320: PUSH
25321: LD_VAR 0 4
25325: PUSH
25326: LD_INT 2
25328: ARRAY
25329: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
25330: LD_ADDR_VAR 0 14
25334: PUSH
25335: LD_INT 0
25337: PUSH
25338: LD_INT 2
25340: PUSH
25341: LD_INT 3
25343: PUSH
25344: LD_INT 5
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: ST_TO_ADDR
// for i in tmp do
25353: LD_ADDR_VAR 0 8
25357: PUSH
25358: LD_VAR 0 14
25362: PUSH
25363: FOR_IN
25364: IFFALSE 25534
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
25366: LD_ADDR_VAR 0 9
25370: PUSH
25371: LD_VAR 0 10
25375: PPUSH
25376: LD_VAR 0 8
25380: PPUSH
25381: LD_INT 5
25383: PPUSH
25384: CALL_OW 272
25388: PUSH
25389: LD_VAR 0 11
25393: PPUSH
25394: LD_VAR 0 8
25398: PPUSH
25399: LD_INT 5
25401: PPUSH
25402: CALL_OW 273
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
25411: LD_VAR 0 9
25415: PUSH
25416: LD_INT 1
25418: ARRAY
25419: PPUSH
25420: LD_VAR 0 9
25424: PUSH
25425: LD_INT 2
25427: ARRAY
25428: PPUSH
25429: CALL_OW 488
25433: IFFALSE 25532
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
25435: LD_ADDR_VAR 0 4
25439: PUSH
25440: LD_VAR 0 9
25444: PUSH
25445: LD_INT 1
25447: ARRAY
25448: PPUSH
25449: LD_VAR 0 9
25453: PUSH
25454: LD_INT 2
25456: ARRAY
25457: PPUSH
25458: CALL_OW 546
25462: ST_TO_ADDR
// if hex [ 1 ] then
25463: LD_VAR 0 4
25467: PUSH
25468: LD_INT 1
25470: ARRAY
25471: IFFALSE 25475
// continue ;
25473: GO 25363
// h := hex [ 2 ] ;
25475: LD_ADDR_VAR 0 13
25479: PUSH
25480: LD_VAR 0 4
25484: PUSH
25485: LD_INT 2
25487: ARRAY
25488: ST_TO_ADDR
// if h + 7 < height then
25489: LD_VAR 0 13
25493: PUSH
25494: LD_INT 7
25496: PLUS
25497: PUSH
25498: LD_VAR 0 15
25502: LESS
25503: IFFALSE 25532
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
25505: LD_ADDR_VAR 0 18
25509: PUSH
25510: LD_INT 7
25512: PUSH
25513: LD_INT 28
25515: PUSH
25516: LD_INT 45
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: LIST
25523: PUSH
25524: LD_VAR 0 12
25528: ARRAY
25529: ST_TO_ADDR
// break ;
25530: GO 25534
// end ; end ; end ;
25532: GO 25363
25534: POP
25535: POP
// end ; if not weapon then
25536: LD_VAR 0 18
25540: NOT
25541: IFFALSE 25601
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
25543: LD_ADDR_VAR 0 5
25547: PUSH
25548: LD_VAR 0 5
25552: PUSH
25553: LD_INT 11
25555: PUSH
25556: LD_INT 30
25558: PUSH
25559: LD_INT 49
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: LIST
25566: DIFF
25567: ST_TO_ADDR
// if not list then
25568: LD_VAR 0 5
25572: NOT
25573: IFFALSE 25577
// exit ;
25575: GO 25719
// weapon := list [ rand ( 1 , list ) ] ;
25577: LD_ADDR_VAR 0 18
25581: PUSH
25582: LD_VAR 0 5
25586: PUSH
25587: LD_INT 1
25589: PPUSH
25590: LD_VAR 0 5
25594: PPUSH
25595: CALL_OW 12
25599: ARRAY
25600: ST_TO_ADDR
// end ; if weapon then
25601: LD_VAR 0 18
25605: IFFALSE 25719
// begin tmp := CostOfWeapon ( weapon ) ;
25607: LD_ADDR_VAR 0 14
25611: PUSH
25612: LD_VAR 0 18
25616: PPUSH
25617: CALL_OW 451
25621: ST_TO_ADDR
// j := GetBase ( tower ) ;
25622: LD_ADDR_VAR 0 9
25626: PUSH
25627: LD_VAR 0 1
25631: PPUSH
25632: CALL_OW 274
25636: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
25637: LD_VAR 0 9
25641: PPUSH
25642: LD_INT 1
25644: PPUSH
25645: CALL_OW 275
25649: PUSH
25650: LD_VAR 0 14
25654: PUSH
25655: LD_INT 1
25657: ARRAY
25658: GREATEREQUAL
25659: PUSH
25660: LD_VAR 0 9
25664: PPUSH
25665: LD_INT 2
25667: PPUSH
25668: CALL_OW 275
25672: PUSH
25673: LD_VAR 0 14
25677: PUSH
25678: LD_INT 2
25680: ARRAY
25681: GREATEREQUAL
25682: AND
25683: PUSH
25684: LD_VAR 0 9
25688: PPUSH
25689: LD_INT 3
25691: PPUSH
25692: CALL_OW 275
25696: PUSH
25697: LD_VAR 0 14
25701: PUSH
25702: LD_INT 3
25704: ARRAY
25705: GREATEREQUAL
25706: AND
25707: IFFALSE 25719
// result := weapon ;
25709: LD_ADDR_VAR 0 3
25713: PUSH
25714: LD_VAR 0 18
25718: ST_TO_ADDR
// end ; end ;
25719: LD_VAR 0 3
25723: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
25724: LD_INT 0
25726: PPUSH
25727: PPUSH
// result := true ;
25728: LD_ADDR_VAR 0 3
25732: PUSH
25733: LD_INT 1
25735: ST_TO_ADDR
// if array1 = array2 then
25736: LD_VAR 0 1
25740: PUSH
25741: LD_VAR 0 2
25745: EQUAL
25746: IFFALSE 25806
// begin for i = 1 to array1 do
25748: LD_ADDR_VAR 0 4
25752: PUSH
25753: DOUBLE
25754: LD_INT 1
25756: DEC
25757: ST_TO_ADDR
25758: LD_VAR 0 1
25762: PUSH
25763: FOR_TO
25764: IFFALSE 25802
// if array1 [ i ] <> array2 [ i ] then
25766: LD_VAR 0 1
25770: PUSH
25771: LD_VAR 0 4
25775: ARRAY
25776: PUSH
25777: LD_VAR 0 2
25781: PUSH
25782: LD_VAR 0 4
25786: ARRAY
25787: NONEQUAL
25788: IFFALSE 25800
// begin result := false ;
25790: LD_ADDR_VAR 0 3
25794: PUSH
25795: LD_INT 0
25797: ST_TO_ADDR
// break ;
25798: GO 25802
// end ;
25800: GO 25763
25802: POP
25803: POP
// end else
25804: GO 25814
// result := false ;
25806: LD_ADDR_VAR 0 3
25810: PUSH
25811: LD_INT 0
25813: ST_TO_ADDR
// end ;
25814: LD_VAR 0 3
25818: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
25819: LD_INT 0
25821: PPUSH
25822: PPUSH
// if not array1 or not array2 then
25823: LD_VAR 0 1
25827: NOT
25828: PUSH
25829: LD_VAR 0 2
25833: NOT
25834: OR
25835: IFFALSE 25839
// exit ;
25837: GO 25903
// result := true ;
25839: LD_ADDR_VAR 0 3
25843: PUSH
25844: LD_INT 1
25846: ST_TO_ADDR
// for i = 1 to array1 do
25847: LD_ADDR_VAR 0 4
25851: PUSH
25852: DOUBLE
25853: LD_INT 1
25855: DEC
25856: ST_TO_ADDR
25857: LD_VAR 0 1
25861: PUSH
25862: FOR_TO
25863: IFFALSE 25901
// if array1 [ i ] <> array2 [ i ] then
25865: LD_VAR 0 1
25869: PUSH
25870: LD_VAR 0 4
25874: ARRAY
25875: PUSH
25876: LD_VAR 0 2
25880: PUSH
25881: LD_VAR 0 4
25885: ARRAY
25886: NONEQUAL
25887: IFFALSE 25899
// begin result := false ;
25889: LD_ADDR_VAR 0 3
25893: PUSH
25894: LD_INT 0
25896: ST_TO_ADDR
// break ;
25897: GO 25901
// end ;
25899: GO 25862
25901: POP
25902: POP
// end ;
25903: LD_VAR 0 3
25907: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
25908: LD_INT 0
25910: PPUSH
25911: PPUSH
25912: PPUSH
// pom := GetBase ( fac ) ;
25913: LD_ADDR_VAR 0 5
25917: PUSH
25918: LD_VAR 0 1
25922: PPUSH
25923: CALL_OW 274
25927: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
25928: LD_ADDR_VAR 0 4
25932: PUSH
25933: LD_VAR 0 2
25937: PUSH
25938: LD_INT 1
25940: ARRAY
25941: PPUSH
25942: LD_VAR 0 2
25946: PUSH
25947: LD_INT 2
25949: ARRAY
25950: PPUSH
25951: LD_VAR 0 2
25955: PUSH
25956: LD_INT 3
25958: ARRAY
25959: PPUSH
25960: LD_VAR 0 2
25964: PUSH
25965: LD_INT 4
25967: ARRAY
25968: PPUSH
25969: CALL_OW 449
25973: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25974: LD_ADDR_VAR 0 3
25978: PUSH
25979: LD_VAR 0 5
25983: PPUSH
25984: LD_INT 1
25986: PPUSH
25987: CALL_OW 275
25991: PUSH
25992: LD_VAR 0 4
25996: PUSH
25997: LD_INT 1
25999: ARRAY
26000: GREATEREQUAL
26001: PUSH
26002: LD_VAR 0 5
26006: PPUSH
26007: LD_INT 2
26009: PPUSH
26010: CALL_OW 275
26014: PUSH
26015: LD_VAR 0 4
26019: PUSH
26020: LD_INT 2
26022: ARRAY
26023: GREATEREQUAL
26024: AND
26025: PUSH
26026: LD_VAR 0 5
26030: PPUSH
26031: LD_INT 3
26033: PPUSH
26034: CALL_OW 275
26038: PUSH
26039: LD_VAR 0 4
26043: PUSH
26044: LD_INT 3
26046: ARRAY
26047: GREATEREQUAL
26048: AND
26049: ST_TO_ADDR
// end ;
26050: LD_VAR 0 3
26054: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26055: LD_INT 0
26057: PPUSH
26058: PPUSH
26059: PPUSH
26060: PPUSH
// pom := GetBase ( building ) ;
26061: LD_ADDR_VAR 0 3
26065: PUSH
26066: LD_VAR 0 1
26070: PPUSH
26071: CALL_OW 274
26075: ST_TO_ADDR
// if not pom then
26076: LD_VAR 0 3
26080: NOT
26081: IFFALSE 26085
// exit ;
26083: GO 26255
// btype := GetBType ( building ) ;
26085: LD_ADDR_VAR 0 5
26089: PUSH
26090: LD_VAR 0 1
26094: PPUSH
26095: CALL_OW 266
26099: ST_TO_ADDR
// if btype = b_armoury then
26100: LD_VAR 0 5
26104: PUSH
26105: LD_INT 4
26107: EQUAL
26108: IFFALSE 26118
// btype := b_barracks ;
26110: LD_ADDR_VAR 0 5
26114: PUSH
26115: LD_INT 5
26117: ST_TO_ADDR
// if btype = b_depot then
26118: LD_VAR 0 5
26122: PUSH
26123: LD_INT 0
26125: EQUAL
26126: IFFALSE 26136
// btype := b_warehouse ;
26128: LD_ADDR_VAR 0 5
26132: PUSH
26133: LD_INT 1
26135: ST_TO_ADDR
// if btype = b_workshop then
26136: LD_VAR 0 5
26140: PUSH
26141: LD_INT 2
26143: EQUAL
26144: IFFALSE 26154
// btype := b_factory ;
26146: LD_ADDR_VAR 0 5
26150: PUSH
26151: LD_INT 3
26153: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26154: LD_ADDR_VAR 0 4
26158: PUSH
26159: LD_VAR 0 5
26163: PPUSH
26164: LD_VAR 0 1
26168: PPUSH
26169: CALL_OW 248
26173: PPUSH
26174: CALL_OW 450
26178: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26179: LD_ADDR_VAR 0 2
26183: PUSH
26184: LD_VAR 0 3
26188: PPUSH
26189: LD_INT 1
26191: PPUSH
26192: CALL_OW 275
26196: PUSH
26197: LD_VAR 0 4
26201: PUSH
26202: LD_INT 1
26204: ARRAY
26205: GREATEREQUAL
26206: PUSH
26207: LD_VAR 0 3
26211: PPUSH
26212: LD_INT 2
26214: PPUSH
26215: CALL_OW 275
26219: PUSH
26220: LD_VAR 0 4
26224: PUSH
26225: LD_INT 2
26227: ARRAY
26228: GREATEREQUAL
26229: AND
26230: PUSH
26231: LD_VAR 0 3
26235: PPUSH
26236: LD_INT 3
26238: PPUSH
26239: CALL_OW 275
26243: PUSH
26244: LD_VAR 0 4
26248: PUSH
26249: LD_INT 3
26251: ARRAY
26252: GREATEREQUAL
26253: AND
26254: ST_TO_ADDR
// end ;
26255: LD_VAR 0 2
26259: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
26260: LD_INT 0
26262: PPUSH
26263: PPUSH
26264: PPUSH
// pom := GetBase ( building ) ;
26265: LD_ADDR_VAR 0 4
26269: PUSH
26270: LD_VAR 0 1
26274: PPUSH
26275: CALL_OW 274
26279: ST_TO_ADDR
// if not pom then
26280: LD_VAR 0 4
26284: NOT
26285: IFFALSE 26289
// exit ;
26287: GO 26390
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26289: LD_ADDR_VAR 0 5
26293: PUSH
26294: LD_VAR 0 2
26298: PPUSH
26299: LD_VAR 0 1
26303: PPUSH
26304: CALL_OW 248
26308: PPUSH
26309: CALL_OW 450
26313: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26314: LD_ADDR_VAR 0 3
26318: PUSH
26319: LD_VAR 0 4
26323: PPUSH
26324: LD_INT 1
26326: PPUSH
26327: CALL_OW 275
26331: PUSH
26332: LD_VAR 0 5
26336: PUSH
26337: LD_INT 1
26339: ARRAY
26340: GREATEREQUAL
26341: PUSH
26342: LD_VAR 0 4
26346: PPUSH
26347: LD_INT 2
26349: PPUSH
26350: CALL_OW 275
26354: PUSH
26355: LD_VAR 0 5
26359: PUSH
26360: LD_INT 2
26362: ARRAY
26363: GREATEREQUAL
26364: AND
26365: PUSH
26366: LD_VAR 0 4
26370: PPUSH
26371: LD_INT 3
26373: PPUSH
26374: CALL_OW 275
26378: PUSH
26379: LD_VAR 0 5
26383: PUSH
26384: LD_INT 3
26386: ARRAY
26387: GREATEREQUAL
26388: AND
26389: ST_TO_ADDR
// end ;
26390: LD_VAR 0 3
26394: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
26395: LD_INT 0
26397: PPUSH
26398: PPUSH
26399: PPUSH
26400: PPUSH
26401: PPUSH
26402: PPUSH
26403: PPUSH
26404: PPUSH
26405: PPUSH
26406: PPUSH
26407: PPUSH
// result := false ;
26408: LD_ADDR_VAR 0 8
26412: PUSH
26413: LD_INT 0
26415: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
26416: LD_VAR 0 5
26420: NOT
26421: PUSH
26422: LD_VAR 0 1
26426: NOT
26427: OR
26428: PUSH
26429: LD_VAR 0 2
26433: NOT
26434: OR
26435: PUSH
26436: LD_VAR 0 3
26440: NOT
26441: OR
26442: IFFALSE 26446
// exit ;
26444: GO 27260
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
26446: LD_ADDR_VAR 0 14
26450: PUSH
26451: LD_VAR 0 1
26455: PPUSH
26456: LD_VAR 0 2
26460: PPUSH
26461: LD_VAR 0 3
26465: PPUSH
26466: LD_VAR 0 4
26470: PPUSH
26471: LD_VAR 0 5
26475: PUSH
26476: LD_INT 1
26478: ARRAY
26479: PPUSH
26480: CALL_OW 248
26484: PPUSH
26485: LD_INT 0
26487: PPUSH
26488: CALL 28493 0 6
26492: ST_TO_ADDR
// if not hexes then
26493: LD_VAR 0 14
26497: NOT
26498: IFFALSE 26502
// exit ;
26500: GO 27260
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26502: LD_ADDR_VAR 0 17
26506: PUSH
26507: LD_VAR 0 5
26511: PPUSH
26512: LD_INT 22
26514: PUSH
26515: LD_VAR 0 13
26519: PPUSH
26520: CALL_OW 255
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 2
26531: PUSH
26532: LD_INT 30
26534: PUSH
26535: LD_INT 0
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 30
26544: PUSH
26545: LD_INT 1
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: LIST
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PPUSH
26561: CALL_OW 72
26565: ST_TO_ADDR
// for i = 1 to hexes do
26566: LD_ADDR_VAR 0 9
26570: PUSH
26571: DOUBLE
26572: LD_INT 1
26574: DEC
26575: ST_TO_ADDR
26576: LD_VAR 0 14
26580: PUSH
26581: FOR_TO
26582: IFFALSE 27258
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26584: LD_ADDR_VAR 0 13
26588: PUSH
26589: LD_VAR 0 14
26593: PUSH
26594: LD_VAR 0 9
26598: ARRAY
26599: PUSH
26600: LD_INT 1
26602: ARRAY
26603: PPUSH
26604: LD_VAR 0 14
26608: PUSH
26609: LD_VAR 0 9
26613: ARRAY
26614: PUSH
26615: LD_INT 2
26617: ARRAY
26618: PPUSH
26619: CALL_OW 428
26623: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
26624: LD_VAR 0 14
26628: PUSH
26629: LD_VAR 0 9
26633: ARRAY
26634: PUSH
26635: LD_INT 1
26637: ARRAY
26638: PPUSH
26639: LD_VAR 0 14
26643: PUSH
26644: LD_VAR 0 9
26648: ARRAY
26649: PUSH
26650: LD_INT 2
26652: ARRAY
26653: PPUSH
26654: CALL_OW 351
26658: PUSH
26659: LD_VAR 0 14
26663: PUSH
26664: LD_VAR 0 9
26668: ARRAY
26669: PUSH
26670: LD_INT 1
26672: ARRAY
26673: PPUSH
26674: LD_VAR 0 14
26678: PUSH
26679: LD_VAR 0 9
26683: ARRAY
26684: PUSH
26685: LD_INT 2
26687: ARRAY
26688: PPUSH
26689: CALL_OW 488
26693: NOT
26694: OR
26695: PUSH
26696: LD_VAR 0 13
26700: PPUSH
26701: CALL_OW 247
26705: PUSH
26706: LD_INT 3
26708: EQUAL
26709: OR
26710: IFFALSE 26716
// exit ;
26712: POP
26713: POP
26714: GO 27260
// if not tmp then
26716: LD_VAR 0 13
26720: NOT
26721: IFFALSE 26725
// continue ;
26723: GO 26581
// result := true ;
26725: LD_ADDR_VAR 0 8
26729: PUSH
26730: LD_INT 1
26732: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
26733: LD_VAR 0 6
26737: PUSH
26738: LD_VAR 0 13
26742: PPUSH
26743: CALL_OW 247
26747: PUSH
26748: LD_INT 2
26750: EQUAL
26751: AND
26752: PUSH
26753: LD_VAR 0 13
26757: PPUSH
26758: CALL_OW 263
26762: PUSH
26763: LD_INT 1
26765: EQUAL
26766: AND
26767: IFFALSE 26931
// begin if IsDrivenBy ( tmp ) then
26769: LD_VAR 0 13
26773: PPUSH
26774: CALL_OW 311
26778: IFFALSE 26782
// continue ;
26780: GO 26581
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
26782: LD_VAR 0 6
26786: PPUSH
26787: LD_INT 3
26789: PUSH
26790: LD_INT 60
26792: PUSH
26793: EMPTY
26794: LIST
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 3
26802: PUSH
26803: LD_INT 55
26805: PUSH
26806: EMPTY
26807: LIST
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PPUSH
26817: CALL_OW 72
26821: IFFALSE 26929
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
26823: LD_ADDR_VAR 0 18
26827: PUSH
26828: LD_VAR 0 6
26832: PPUSH
26833: LD_INT 3
26835: PUSH
26836: LD_INT 60
26838: PUSH
26839: EMPTY
26840: LIST
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 3
26848: PUSH
26849: LD_INT 55
26851: PUSH
26852: EMPTY
26853: LIST
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PPUSH
26863: CALL_OW 72
26867: PUSH
26868: LD_INT 1
26870: ARRAY
26871: ST_TO_ADDR
// if IsInUnit ( driver ) then
26872: LD_VAR 0 18
26876: PPUSH
26877: CALL_OW 310
26881: IFFALSE 26892
// ComExit ( driver ) ;
26883: LD_VAR 0 18
26887: PPUSH
26888: CALL 52181 0 1
// AddComEnterUnit ( driver , tmp ) ;
26892: LD_VAR 0 18
26896: PPUSH
26897: LD_VAR 0 13
26901: PPUSH
26902: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
26906: LD_VAR 0 18
26910: PPUSH
26911: LD_VAR 0 7
26915: PPUSH
26916: CALL_OW 173
// AddComExitVehicle ( driver ) ;
26920: LD_VAR 0 18
26924: PPUSH
26925: CALL_OW 181
// end ; continue ;
26929: GO 26581
// end ; if not cleaners or not tmp in cleaners then
26931: LD_VAR 0 6
26935: NOT
26936: PUSH
26937: LD_VAR 0 13
26941: PUSH
26942: LD_VAR 0 6
26946: IN
26947: NOT
26948: OR
26949: IFFALSE 27256
// begin if dep then
26951: LD_VAR 0 17
26955: IFFALSE 27091
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
26957: LD_ADDR_VAR 0 16
26961: PUSH
26962: LD_VAR 0 17
26966: PUSH
26967: LD_INT 1
26969: ARRAY
26970: PPUSH
26971: CALL_OW 250
26975: PPUSH
26976: LD_VAR 0 17
26980: PUSH
26981: LD_INT 1
26983: ARRAY
26984: PPUSH
26985: CALL_OW 254
26989: PPUSH
26990: LD_INT 5
26992: PPUSH
26993: CALL_OW 272
26997: PUSH
26998: LD_VAR 0 17
27002: PUSH
27003: LD_INT 1
27005: ARRAY
27006: PPUSH
27007: CALL_OW 251
27011: PPUSH
27012: LD_VAR 0 17
27016: PUSH
27017: LD_INT 1
27019: ARRAY
27020: PPUSH
27021: CALL_OW 254
27025: PPUSH
27026: LD_INT 5
27028: PPUSH
27029: CALL_OW 273
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27038: LD_VAR 0 16
27042: PUSH
27043: LD_INT 1
27045: ARRAY
27046: PPUSH
27047: LD_VAR 0 16
27051: PUSH
27052: LD_INT 2
27054: ARRAY
27055: PPUSH
27056: CALL_OW 488
27060: IFFALSE 27091
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27062: LD_VAR 0 13
27066: PPUSH
27067: LD_VAR 0 16
27071: PUSH
27072: LD_INT 1
27074: ARRAY
27075: PPUSH
27076: LD_VAR 0 16
27080: PUSH
27081: LD_INT 2
27083: ARRAY
27084: PPUSH
27085: CALL_OW 111
// continue ;
27089: GO 26581
// end ; end ; r := GetDir ( tmp ) ;
27091: LD_ADDR_VAR 0 15
27095: PUSH
27096: LD_VAR 0 13
27100: PPUSH
27101: CALL_OW 254
27105: ST_TO_ADDR
// if r = 5 then
27106: LD_VAR 0 15
27110: PUSH
27111: LD_INT 5
27113: EQUAL
27114: IFFALSE 27124
// r := 0 ;
27116: LD_ADDR_VAR 0 15
27120: PUSH
27121: LD_INT 0
27123: ST_TO_ADDR
// for j = r to 5 do
27124: LD_ADDR_VAR 0 10
27128: PUSH
27129: DOUBLE
27130: LD_VAR 0 15
27134: DEC
27135: ST_TO_ADDR
27136: LD_INT 5
27138: PUSH
27139: FOR_TO
27140: IFFALSE 27254
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
27142: LD_ADDR_VAR 0 11
27146: PUSH
27147: LD_VAR 0 13
27151: PPUSH
27152: CALL_OW 250
27156: PPUSH
27157: LD_VAR 0 10
27161: PPUSH
27162: LD_INT 2
27164: PPUSH
27165: CALL_OW 272
27169: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
27170: LD_ADDR_VAR 0 12
27174: PUSH
27175: LD_VAR 0 13
27179: PPUSH
27180: CALL_OW 251
27184: PPUSH
27185: LD_VAR 0 10
27189: PPUSH
27190: LD_INT 2
27192: PPUSH
27193: CALL_OW 273
27197: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
27198: LD_VAR 0 11
27202: PPUSH
27203: LD_VAR 0 12
27207: PPUSH
27208: CALL_OW 488
27212: PUSH
27213: LD_VAR 0 11
27217: PPUSH
27218: LD_VAR 0 12
27222: PPUSH
27223: CALL_OW 428
27227: NOT
27228: AND
27229: IFFALSE 27252
// begin ComMoveXY ( tmp , _x , _y ) ;
27231: LD_VAR 0 13
27235: PPUSH
27236: LD_VAR 0 11
27240: PPUSH
27241: LD_VAR 0 12
27245: PPUSH
27246: CALL_OW 111
// break ;
27250: GO 27254
// end ; end ;
27252: GO 27139
27254: POP
27255: POP
// end ; end ;
27256: GO 26581
27258: POP
27259: POP
// end ;
27260: LD_VAR 0 8
27264: RET
// export function BuildingTechInvented ( side , btype ) ; begin
27265: LD_INT 0
27267: PPUSH
// result := true ;
27268: LD_ADDR_VAR 0 3
27272: PUSH
27273: LD_INT 1
27275: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
27276: LD_VAR 0 2
27280: PUSH
27281: LD_INT 24
27283: DOUBLE
27284: EQUAL
27285: IFTRUE 27295
27287: LD_INT 33
27289: DOUBLE
27290: EQUAL
27291: IFTRUE 27295
27293: GO 27320
27295: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
27296: LD_ADDR_VAR 0 3
27300: PUSH
27301: LD_INT 32
27303: PPUSH
27304: LD_VAR 0 1
27308: PPUSH
27309: CALL_OW 321
27313: PUSH
27314: LD_INT 2
27316: EQUAL
27317: ST_TO_ADDR
27318: GO 27636
27320: LD_INT 20
27322: DOUBLE
27323: EQUAL
27324: IFTRUE 27328
27326: GO 27353
27328: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
27329: LD_ADDR_VAR 0 3
27333: PUSH
27334: LD_INT 6
27336: PPUSH
27337: LD_VAR 0 1
27341: PPUSH
27342: CALL_OW 321
27346: PUSH
27347: LD_INT 2
27349: EQUAL
27350: ST_TO_ADDR
27351: GO 27636
27353: LD_INT 22
27355: DOUBLE
27356: EQUAL
27357: IFTRUE 27367
27359: LD_INT 36
27361: DOUBLE
27362: EQUAL
27363: IFTRUE 27367
27365: GO 27392
27367: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
27368: LD_ADDR_VAR 0 3
27372: PUSH
27373: LD_INT 15
27375: PPUSH
27376: LD_VAR 0 1
27380: PPUSH
27381: CALL_OW 321
27385: PUSH
27386: LD_INT 2
27388: EQUAL
27389: ST_TO_ADDR
27390: GO 27636
27392: LD_INT 30
27394: DOUBLE
27395: EQUAL
27396: IFTRUE 27400
27398: GO 27425
27400: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
27401: LD_ADDR_VAR 0 3
27405: PUSH
27406: LD_INT 20
27408: PPUSH
27409: LD_VAR 0 1
27413: PPUSH
27414: CALL_OW 321
27418: PUSH
27419: LD_INT 2
27421: EQUAL
27422: ST_TO_ADDR
27423: GO 27636
27425: LD_INT 28
27427: DOUBLE
27428: EQUAL
27429: IFTRUE 27439
27431: LD_INT 21
27433: DOUBLE
27434: EQUAL
27435: IFTRUE 27439
27437: GO 27464
27439: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
27440: LD_ADDR_VAR 0 3
27444: PUSH
27445: LD_INT 21
27447: PPUSH
27448: LD_VAR 0 1
27452: PPUSH
27453: CALL_OW 321
27457: PUSH
27458: LD_INT 2
27460: EQUAL
27461: ST_TO_ADDR
27462: GO 27636
27464: LD_INT 16
27466: DOUBLE
27467: EQUAL
27468: IFTRUE 27472
27470: GO 27497
27472: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
27473: LD_ADDR_VAR 0 3
27477: PUSH
27478: LD_INT 84
27480: PPUSH
27481: LD_VAR 0 1
27485: PPUSH
27486: CALL_OW 321
27490: PUSH
27491: LD_INT 2
27493: EQUAL
27494: ST_TO_ADDR
27495: GO 27636
27497: LD_INT 19
27499: DOUBLE
27500: EQUAL
27501: IFTRUE 27511
27503: LD_INT 23
27505: DOUBLE
27506: EQUAL
27507: IFTRUE 27511
27509: GO 27536
27511: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
27512: LD_ADDR_VAR 0 3
27516: PUSH
27517: LD_INT 83
27519: PPUSH
27520: LD_VAR 0 1
27524: PPUSH
27525: CALL_OW 321
27529: PUSH
27530: LD_INT 2
27532: EQUAL
27533: ST_TO_ADDR
27534: GO 27636
27536: LD_INT 17
27538: DOUBLE
27539: EQUAL
27540: IFTRUE 27544
27542: GO 27569
27544: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
27545: LD_ADDR_VAR 0 3
27549: PUSH
27550: LD_INT 39
27552: PPUSH
27553: LD_VAR 0 1
27557: PPUSH
27558: CALL_OW 321
27562: PUSH
27563: LD_INT 2
27565: EQUAL
27566: ST_TO_ADDR
27567: GO 27636
27569: LD_INT 18
27571: DOUBLE
27572: EQUAL
27573: IFTRUE 27577
27575: GO 27602
27577: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
27578: LD_ADDR_VAR 0 3
27582: PUSH
27583: LD_INT 40
27585: PPUSH
27586: LD_VAR 0 1
27590: PPUSH
27591: CALL_OW 321
27595: PUSH
27596: LD_INT 2
27598: EQUAL
27599: ST_TO_ADDR
27600: GO 27636
27602: LD_INT 27
27604: DOUBLE
27605: EQUAL
27606: IFTRUE 27610
27608: GO 27635
27610: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
27611: LD_ADDR_VAR 0 3
27615: PUSH
27616: LD_INT 35
27618: PPUSH
27619: LD_VAR 0 1
27623: PPUSH
27624: CALL_OW 321
27628: PUSH
27629: LD_INT 2
27631: EQUAL
27632: ST_TO_ADDR
27633: GO 27636
27635: POP
// end ;
27636: LD_VAR 0 3
27640: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
27641: LD_INT 0
27643: PPUSH
27644: PPUSH
27645: PPUSH
27646: PPUSH
27647: PPUSH
27648: PPUSH
27649: PPUSH
27650: PPUSH
27651: PPUSH
27652: PPUSH
27653: PPUSH
// result := false ;
27654: LD_ADDR_VAR 0 6
27658: PUSH
27659: LD_INT 0
27661: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
27662: LD_VAR 0 1
27666: NOT
27667: PUSH
27668: LD_VAR 0 1
27672: PPUSH
27673: CALL_OW 266
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: LD_INT 1
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: IN
27688: NOT
27689: OR
27690: PUSH
27691: LD_VAR 0 2
27695: NOT
27696: OR
27697: PUSH
27698: LD_VAR 0 5
27702: PUSH
27703: LD_INT 0
27705: PUSH
27706: LD_INT 1
27708: PUSH
27709: LD_INT 2
27711: PUSH
27712: LD_INT 3
27714: PUSH
27715: LD_INT 4
27717: PUSH
27718: LD_INT 5
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: IN
27729: NOT
27730: OR
27731: PUSH
27732: LD_VAR 0 3
27736: PPUSH
27737: LD_VAR 0 4
27741: PPUSH
27742: CALL_OW 488
27746: NOT
27747: OR
27748: IFFALSE 27752
// exit ;
27750: GO 28488
// side := GetSide ( depot ) ;
27752: LD_ADDR_VAR 0 9
27756: PUSH
27757: LD_VAR 0 1
27761: PPUSH
27762: CALL_OW 255
27766: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
27767: LD_VAR 0 9
27771: PPUSH
27772: LD_VAR 0 2
27776: PPUSH
27777: CALL 27265 0 2
27781: NOT
27782: IFFALSE 27786
// exit ;
27784: GO 28488
// pom := GetBase ( depot ) ;
27786: LD_ADDR_VAR 0 10
27790: PUSH
27791: LD_VAR 0 1
27795: PPUSH
27796: CALL_OW 274
27800: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
27801: LD_ADDR_VAR 0 11
27805: PUSH
27806: LD_VAR 0 2
27810: PPUSH
27811: LD_VAR 0 1
27815: PPUSH
27816: CALL_OW 248
27820: PPUSH
27821: CALL_OW 450
27825: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
27826: LD_VAR 0 10
27830: PPUSH
27831: LD_INT 1
27833: PPUSH
27834: CALL_OW 275
27838: PUSH
27839: LD_VAR 0 11
27843: PUSH
27844: LD_INT 1
27846: ARRAY
27847: GREATEREQUAL
27848: PUSH
27849: LD_VAR 0 10
27853: PPUSH
27854: LD_INT 2
27856: PPUSH
27857: CALL_OW 275
27861: PUSH
27862: LD_VAR 0 11
27866: PUSH
27867: LD_INT 2
27869: ARRAY
27870: GREATEREQUAL
27871: AND
27872: PUSH
27873: LD_VAR 0 10
27877: PPUSH
27878: LD_INT 3
27880: PPUSH
27881: CALL_OW 275
27885: PUSH
27886: LD_VAR 0 11
27890: PUSH
27891: LD_INT 3
27893: ARRAY
27894: GREATEREQUAL
27895: AND
27896: NOT
27897: IFFALSE 27901
// exit ;
27899: GO 28488
// if GetBType ( depot ) = b_depot then
27901: LD_VAR 0 1
27905: PPUSH
27906: CALL_OW 266
27910: PUSH
27911: LD_INT 0
27913: EQUAL
27914: IFFALSE 27926
// dist := 28 else
27916: LD_ADDR_VAR 0 14
27920: PUSH
27921: LD_INT 28
27923: ST_TO_ADDR
27924: GO 27934
// dist := 36 ;
27926: LD_ADDR_VAR 0 14
27930: PUSH
27931: LD_INT 36
27933: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
27934: LD_VAR 0 1
27938: PPUSH
27939: LD_VAR 0 3
27943: PPUSH
27944: LD_VAR 0 4
27948: PPUSH
27949: CALL_OW 297
27953: PUSH
27954: LD_VAR 0 14
27958: GREATER
27959: IFFALSE 27963
// exit ;
27961: GO 28488
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
27963: LD_ADDR_VAR 0 12
27967: PUSH
27968: LD_VAR 0 2
27972: PPUSH
27973: LD_VAR 0 3
27977: PPUSH
27978: LD_VAR 0 4
27982: PPUSH
27983: LD_VAR 0 5
27987: PPUSH
27988: LD_VAR 0 1
27992: PPUSH
27993: CALL_OW 248
27997: PPUSH
27998: LD_INT 0
28000: PPUSH
28001: CALL 28493 0 6
28005: ST_TO_ADDR
// if not hexes then
28006: LD_VAR 0 12
28010: NOT
28011: IFFALSE 28015
// exit ;
28013: GO 28488
// hex := GetHexInfo ( x , y ) ;
28015: LD_ADDR_VAR 0 15
28019: PUSH
28020: LD_VAR 0 3
28024: PPUSH
28025: LD_VAR 0 4
28029: PPUSH
28030: CALL_OW 546
28034: ST_TO_ADDR
// if hex [ 1 ] then
28035: LD_VAR 0 15
28039: PUSH
28040: LD_INT 1
28042: ARRAY
28043: IFFALSE 28047
// exit ;
28045: GO 28488
// height := hex [ 2 ] ;
28047: LD_ADDR_VAR 0 13
28051: PUSH
28052: LD_VAR 0 15
28056: PUSH
28057: LD_INT 2
28059: ARRAY
28060: ST_TO_ADDR
// for i = 1 to hexes do
28061: LD_ADDR_VAR 0 7
28065: PUSH
28066: DOUBLE
28067: LD_INT 1
28069: DEC
28070: ST_TO_ADDR
28071: LD_VAR 0 12
28075: PUSH
28076: FOR_TO
28077: IFFALSE 28407
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
28079: LD_VAR 0 12
28083: PUSH
28084: LD_VAR 0 7
28088: ARRAY
28089: PUSH
28090: LD_INT 1
28092: ARRAY
28093: PPUSH
28094: LD_VAR 0 12
28098: PUSH
28099: LD_VAR 0 7
28103: ARRAY
28104: PUSH
28105: LD_INT 2
28107: ARRAY
28108: PPUSH
28109: CALL_OW 488
28113: NOT
28114: PUSH
28115: LD_VAR 0 12
28119: PUSH
28120: LD_VAR 0 7
28124: ARRAY
28125: PUSH
28126: LD_INT 1
28128: ARRAY
28129: PPUSH
28130: LD_VAR 0 12
28134: PUSH
28135: LD_VAR 0 7
28139: ARRAY
28140: PUSH
28141: LD_INT 2
28143: ARRAY
28144: PPUSH
28145: CALL_OW 428
28149: PUSH
28150: LD_INT 0
28152: GREATER
28153: OR
28154: PUSH
28155: LD_VAR 0 12
28159: PUSH
28160: LD_VAR 0 7
28164: ARRAY
28165: PUSH
28166: LD_INT 1
28168: ARRAY
28169: PPUSH
28170: LD_VAR 0 12
28174: PUSH
28175: LD_VAR 0 7
28179: ARRAY
28180: PUSH
28181: LD_INT 2
28183: ARRAY
28184: PPUSH
28185: CALL_OW 351
28189: OR
28190: IFFALSE 28196
// exit ;
28192: POP
28193: POP
28194: GO 28488
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28196: LD_ADDR_VAR 0 8
28200: PUSH
28201: LD_VAR 0 12
28205: PUSH
28206: LD_VAR 0 7
28210: ARRAY
28211: PUSH
28212: LD_INT 1
28214: ARRAY
28215: PPUSH
28216: LD_VAR 0 12
28220: PUSH
28221: LD_VAR 0 7
28225: ARRAY
28226: PUSH
28227: LD_INT 2
28229: ARRAY
28230: PPUSH
28231: CALL_OW 546
28235: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
28236: LD_VAR 0 8
28240: PUSH
28241: LD_INT 1
28243: ARRAY
28244: PUSH
28245: LD_VAR 0 8
28249: PUSH
28250: LD_INT 2
28252: ARRAY
28253: PUSH
28254: LD_VAR 0 13
28258: PUSH
28259: LD_INT 2
28261: PLUS
28262: GREATER
28263: OR
28264: PUSH
28265: LD_VAR 0 8
28269: PUSH
28270: LD_INT 2
28272: ARRAY
28273: PUSH
28274: LD_VAR 0 13
28278: PUSH
28279: LD_INT 2
28281: MINUS
28282: LESS
28283: OR
28284: PUSH
28285: LD_VAR 0 8
28289: PUSH
28290: LD_INT 3
28292: ARRAY
28293: PUSH
28294: LD_INT 0
28296: PUSH
28297: LD_INT 8
28299: PUSH
28300: LD_INT 9
28302: PUSH
28303: LD_INT 10
28305: PUSH
28306: LD_INT 11
28308: PUSH
28309: LD_INT 12
28311: PUSH
28312: LD_INT 13
28314: PUSH
28315: LD_INT 16
28317: PUSH
28318: LD_INT 17
28320: PUSH
28321: LD_INT 18
28323: PUSH
28324: LD_INT 19
28326: PUSH
28327: LD_INT 20
28329: PUSH
28330: LD_INT 21
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: IN
28348: NOT
28349: OR
28350: PUSH
28351: LD_VAR 0 8
28355: PUSH
28356: LD_INT 5
28358: ARRAY
28359: NOT
28360: OR
28361: PUSH
28362: LD_VAR 0 8
28366: PUSH
28367: LD_INT 6
28369: ARRAY
28370: PUSH
28371: LD_INT 1
28373: PUSH
28374: LD_INT 2
28376: PUSH
28377: LD_INT 7
28379: PUSH
28380: LD_INT 9
28382: PUSH
28383: LD_INT 10
28385: PUSH
28386: LD_INT 11
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: IN
28397: NOT
28398: OR
28399: IFFALSE 28405
// exit ;
28401: POP
28402: POP
28403: GO 28488
// end ;
28405: GO 28076
28407: POP
28408: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
28409: LD_VAR 0 9
28413: PPUSH
28414: LD_VAR 0 3
28418: PPUSH
28419: LD_VAR 0 4
28423: PPUSH
28424: LD_INT 20
28426: PPUSH
28427: CALL 20440 0 4
28431: PUSH
28432: LD_INT 4
28434: ARRAY
28435: IFFALSE 28439
// exit ;
28437: GO 28488
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
28439: LD_VAR 0 2
28443: PUSH
28444: LD_INT 29
28446: PUSH
28447: LD_INT 30
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: IN
28454: PUSH
28455: LD_VAR 0 3
28459: PPUSH
28460: LD_VAR 0 4
28464: PPUSH
28465: LD_VAR 0 9
28469: PPUSH
28470: CALL_OW 440
28474: NOT
28475: AND
28476: IFFALSE 28480
// exit ;
28478: GO 28488
// result := true ;
28480: LD_ADDR_VAR 0 6
28484: PUSH
28485: LD_INT 1
28487: ST_TO_ADDR
// end ;
28488: LD_VAR 0 6
28492: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
28493: LD_INT 0
28495: PPUSH
28496: PPUSH
28497: PPUSH
28498: PPUSH
28499: PPUSH
28500: PPUSH
28501: PPUSH
28502: PPUSH
28503: PPUSH
28504: PPUSH
28505: PPUSH
28506: PPUSH
28507: PPUSH
28508: PPUSH
28509: PPUSH
28510: PPUSH
28511: PPUSH
28512: PPUSH
28513: PPUSH
28514: PPUSH
28515: PPUSH
28516: PPUSH
28517: PPUSH
28518: PPUSH
28519: PPUSH
28520: PPUSH
28521: PPUSH
28522: PPUSH
28523: PPUSH
28524: PPUSH
28525: PPUSH
28526: PPUSH
28527: PPUSH
28528: PPUSH
28529: PPUSH
28530: PPUSH
28531: PPUSH
28532: PPUSH
28533: PPUSH
28534: PPUSH
28535: PPUSH
28536: PPUSH
28537: PPUSH
28538: PPUSH
28539: PPUSH
28540: PPUSH
28541: PPUSH
28542: PPUSH
28543: PPUSH
28544: PPUSH
28545: PPUSH
28546: PPUSH
28547: PPUSH
28548: PPUSH
28549: PPUSH
28550: PPUSH
28551: PPUSH
28552: PPUSH
// result = [ ] ;
28553: LD_ADDR_VAR 0 7
28557: PUSH
28558: EMPTY
28559: ST_TO_ADDR
// temp_list = [ ] ;
28560: LD_ADDR_VAR 0 9
28564: PUSH
28565: EMPTY
28566: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
28567: LD_VAR 0 4
28571: PUSH
28572: LD_INT 0
28574: PUSH
28575: LD_INT 1
28577: PUSH
28578: LD_INT 2
28580: PUSH
28581: LD_INT 3
28583: PUSH
28584: LD_INT 4
28586: PUSH
28587: LD_INT 5
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: IN
28598: NOT
28599: PUSH
28600: LD_VAR 0 1
28604: PUSH
28605: LD_INT 0
28607: PUSH
28608: LD_INT 1
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: IN
28615: PUSH
28616: LD_VAR 0 5
28620: PUSH
28621: LD_INT 1
28623: PUSH
28624: LD_INT 2
28626: PUSH
28627: LD_INT 3
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: LIST
28634: IN
28635: NOT
28636: AND
28637: OR
28638: IFFALSE 28642
// exit ;
28640: GO 47033
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
28642: LD_VAR 0 1
28646: PUSH
28647: LD_INT 6
28649: PUSH
28650: LD_INT 7
28652: PUSH
28653: LD_INT 8
28655: PUSH
28656: LD_INT 13
28658: PUSH
28659: LD_INT 12
28661: PUSH
28662: LD_INT 15
28664: PUSH
28665: LD_INT 11
28667: PUSH
28668: LD_INT 14
28670: PUSH
28671: LD_INT 10
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: IN
28685: IFFALSE 28695
// btype = b_lab ;
28687: LD_ADDR_VAR 0 1
28691: PUSH
28692: LD_INT 6
28694: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
28695: LD_VAR 0 6
28699: PUSH
28700: LD_INT 0
28702: PUSH
28703: LD_INT 1
28705: PUSH
28706: LD_INT 2
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: LIST
28713: IN
28714: NOT
28715: PUSH
28716: LD_VAR 0 1
28720: PUSH
28721: LD_INT 0
28723: PUSH
28724: LD_INT 1
28726: PUSH
28727: LD_INT 2
28729: PUSH
28730: LD_INT 3
28732: PUSH
28733: LD_INT 6
28735: PUSH
28736: LD_INT 36
28738: PUSH
28739: LD_INT 4
28741: PUSH
28742: LD_INT 5
28744: PUSH
28745: LD_INT 31
28747: PUSH
28748: LD_INT 32
28750: PUSH
28751: LD_INT 33
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: IN
28767: NOT
28768: PUSH
28769: LD_VAR 0 6
28773: PUSH
28774: LD_INT 1
28776: EQUAL
28777: AND
28778: OR
28779: PUSH
28780: LD_VAR 0 1
28784: PUSH
28785: LD_INT 2
28787: PUSH
28788: LD_INT 3
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: IN
28795: NOT
28796: PUSH
28797: LD_VAR 0 6
28801: PUSH
28802: LD_INT 2
28804: EQUAL
28805: AND
28806: OR
28807: IFFALSE 28817
// mode = 0 ;
28809: LD_ADDR_VAR 0 6
28813: PUSH
28814: LD_INT 0
28816: ST_TO_ADDR
// case mode of 0 :
28817: LD_VAR 0 6
28821: PUSH
28822: LD_INT 0
28824: DOUBLE
28825: EQUAL
28826: IFTRUE 28830
28828: GO 40283
28830: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28831: LD_ADDR_VAR 0 11
28835: PUSH
28836: LD_INT 0
28838: PUSH
28839: LD_INT 0
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 0
28848: PUSH
28849: LD_INT 1
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 1
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 1
28869: PUSH
28870: LD_INT 1
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 0
28879: PUSH
28880: LD_INT 1
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 1
28889: NEG
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 1
28900: NEG
28901: PUSH
28902: LD_INT 1
28904: NEG
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 1
28912: NEG
28913: PUSH
28914: LD_INT 2
28916: NEG
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: LD_INT 2
28927: NEG
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: LD_INT 1
28938: NEG
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 1
28946: PUSH
28947: LD_INT 2
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 0
28956: PUSH
28957: LD_INT 2
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 1
28966: NEG
28967: PUSH
28968: LD_INT 1
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 1
28977: PUSH
28978: LD_INT 3
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 0
28987: PUSH
28988: LD_INT 3
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 1
28997: NEG
28998: PUSH
28999: LD_INT 2
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29024: LD_ADDR_VAR 0 12
29028: PUSH
29029: LD_INT 0
29031: PUSH
29032: LD_INT 0
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 0
29041: PUSH
29042: LD_INT 1
29044: NEG
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 1
29052: PUSH
29053: LD_INT 0
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 1
29062: PUSH
29063: LD_INT 1
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 0
29072: PUSH
29073: LD_INT 1
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 1
29082: NEG
29083: PUSH
29084: LD_INT 0
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 1
29093: NEG
29094: PUSH
29095: LD_INT 1
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: LD_INT 1
29108: NEG
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 2
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 2
29126: PUSH
29127: LD_INT 1
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 1
29136: NEG
29137: PUSH
29138: LD_INT 1
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 2
29147: NEG
29148: PUSH
29149: LD_INT 0
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 2
29158: NEG
29159: PUSH
29160: LD_INT 1
29162: NEG
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 2
29170: NEG
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 3
29181: NEG
29182: PUSH
29183: LD_INT 0
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 3
29192: NEG
29193: PUSH
29194: LD_INT 1
29196: NEG
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29220: LD_ADDR_VAR 0 13
29224: PUSH
29225: LD_INT 0
29227: PUSH
29228: LD_INT 0
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 0
29237: PUSH
29238: LD_INT 1
29240: NEG
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 1
29258: PUSH
29259: LD_INT 1
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 0
29268: PUSH
29269: LD_INT 1
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 1
29278: NEG
29279: PUSH
29280: LD_INT 0
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 1
29289: NEG
29290: PUSH
29291: LD_INT 1
29293: NEG
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 1
29301: NEG
29302: PUSH
29303: LD_INT 2
29305: NEG
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 2
29313: PUSH
29314: LD_INT 1
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 2
29323: PUSH
29324: LD_INT 2
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: LD_INT 2
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 2
29343: NEG
29344: PUSH
29345: LD_INT 1
29347: NEG
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 2
29355: NEG
29356: PUSH
29357: LD_INT 2
29359: NEG
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 2
29367: NEG
29368: PUSH
29369: LD_INT 3
29371: NEG
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 3
29379: NEG
29380: PUSH
29381: LD_INT 2
29383: NEG
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 3
29391: NEG
29392: PUSH
29393: LD_INT 3
29395: NEG
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29419: LD_ADDR_VAR 0 14
29423: PUSH
29424: LD_INT 0
29426: PUSH
29427: LD_INT 0
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 0
29436: PUSH
29437: LD_INT 1
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 1
29447: PUSH
29448: LD_INT 0
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 1
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 0
29467: PUSH
29468: LD_INT 1
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 1
29477: NEG
29478: PUSH
29479: LD_INT 0
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 1
29488: NEG
29489: PUSH
29490: LD_INT 1
29492: NEG
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 1
29500: NEG
29501: PUSH
29502: LD_INT 2
29504: NEG
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 0
29512: PUSH
29513: LD_INT 2
29515: NEG
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: LD_INT 1
29526: NEG
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 1
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 0
29544: PUSH
29545: LD_INT 2
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 1
29554: NEG
29555: PUSH
29556: LD_INT 1
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 1
29565: NEG
29566: PUSH
29567: LD_INT 3
29569: NEG
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: LD_INT 3
29580: NEG
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 1
29588: PUSH
29589: LD_INT 2
29591: NEG
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29615: LD_ADDR_VAR 0 15
29619: PUSH
29620: LD_INT 0
29622: PUSH
29623: LD_INT 0
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 0
29632: PUSH
29633: LD_INT 1
29635: NEG
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 1
29643: PUSH
29644: LD_INT 0
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: PUSH
29654: LD_INT 1
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 0
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 1
29673: NEG
29674: PUSH
29675: LD_INT 0
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 1
29684: NEG
29685: PUSH
29686: LD_INT 1
29688: NEG
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 1
29696: PUSH
29697: LD_INT 1
29699: NEG
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 2
29707: PUSH
29708: LD_INT 0
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 2
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: LD_INT 1
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 2
29738: NEG
29739: PUSH
29740: LD_INT 0
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 2
29749: NEG
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 2
29761: PUSH
29762: LD_INT 1
29764: NEG
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 3
29772: PUSH
29773: LD_INT 0
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 3
29782: PUSH
29783: LD_INT 1
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29808: LD_ADDR_VAR 0 16
29812: PUSH
29813: LD_INT 0
29815: PUSH
29816: LD_INT 0
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 0
29825: PUSH
29826: LD_INT 1
29828: NEG
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 1
29836: PUSH
29837: LD_INT 0
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 1
29846: PUSH
29847: LD_INT 1
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 0
29856: PUSH
29857: LD_INT 1
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 1
29866: NEG
29867: PUSH
29868: LD_INT 0
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 1
29877: NEG
29878: PUSH
29879: LD_INT 1
29881: NEG
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 1
29889: NEG
29890: PUSH
29891: LD_INT 2
29893: NEG
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 2
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 2
29911: PUSH
29912: LD_INT 2
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 1
29921: PUSH
29922: LD_INT 2
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 2
29931: NEG
29932: PUSH
29933: LD_INT 1
29935: NEG
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 2
29943: NEG
29944: PUSH
29945: LD_INT 2
29947: NEG
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 3
29955: PUSH
29956: LD_INT 2
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 3
29965: PUSH
29966: LD_INT 3
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 2
29975: PUSH
29976: LD_INT 3
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30001: LD_ADDR_VAR 0 17
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: LD_INT 0
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 0
30018: PUSH
30019: LD_INT 1
30021: NEG
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 1
30029: PUSH
30030: LD_INT 0
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 1
30039: PUSH
30040: LD_INT 1
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 0
30049: PUSH
30050: LD_INT 1
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 1
30059: NEG
30060: PUSH
30061: LD_INT 0
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 1
30070: NEG
30071: PUSH
30072: LD_INT 1
30074: NEG
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 1
30082: NEG
30083: PUSH
30084: LD_INT 2
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 0
30094: PUSH
30095: LD_INT 2
30097: NEG
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 1
30105: PUSH
30106: LD_INT 1
30108: NEG
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 2
30116: PUSH
30117: LD_INT 0
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 2
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 2
30136: PUSH
30137: LD_INT 2
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 1
30146: PUSH
30147: LD_INT 2
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 0
30156: PUSH
30157: LD_INT 2
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 1
30166: NEG
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 2
30177: NEG
30178: PUSH
30179: LD_INT 0
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 2
30188: NEG
30189: PUSH
30190: LD_INT 1
30192: NEG
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 2
30200: NEG
30201: PUSH
30202: LD_INT 2
30204: NEG
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30231: LD_ADDR_VAR 0 18
30235: PUSH
30236: LD_INT 0
30238: PUSH
30239: LD_INT 0
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 0
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 1
30259: PUSH
30260: LD_INT 0
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 0
30279: PUSH
30280: LD_INT 1
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: PUSH
30291: LD_INT 0
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 1
30300: NEG
30301: PUSH
30302: LD_INT 1
30304: NEG
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 1
30312: NEG
30313: PUSH
30314: LD_INT 2
30316: NEG
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 0
30324: PUSH
30325: LD_INT 2
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: LD_INT 1
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 2
30346: PUSH
30347: LD_INT 0
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 2
30356: PUSH
30357: LD_INT 1
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 2
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: LD_INT 2
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 0
30386: PUSH
30387: LD_INT 2
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 1
30396: NEG
30397: PUSH
30398: LD_INT 1
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 2
30407: NEG
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 2
30418: NEG
30419: PUSH
30420: LD_INT 1
30422: NEG
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 2
30430: NEG
30431: PUSH
30432: LD_INT 2
30434: NEG
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30461: LD_ADDR_VAR 0 19
30465: PUSH
30466: LD_INT 0
30468: PUSH
30469: LD_INT 0
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: LD_INT 1
30481: NEG
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: LD_INT 0
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 1
30499: PUSH
30500: LD_INT 1
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 0
30509: PUSH
30510: LD_INT 1
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 1
30519: NEG
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 1
30530: NEG
30531: PUSH
30532: LD_INT 1
30534: NEG
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 1
30542: NEG
30543: PUSH
30544: LD_INT 2
30546: NEG
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 0
30554: PUSH
30555: LD_INT 2
30557: NEG
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 1
30565: PUSH
30566: LD_INT 1
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 2
30576: PUSH
30577: LD_INT 0
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 2
30586: PUSH
30587: LD_INT 1
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 2
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 1
30606: PUSH
30607: LD_INT 2
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 0
30616: PUSH
30617: LD_INT 2
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 1
30626: NEG
30627: PUSH
30628: LD_INT 1
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 2
30637: NEG
30638: PUSH
30639: LD_INT 0
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 2
30648: NEG
30649: PUSH
30650: LD_INT 1
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 2
30660: NEG
30661: PUSH
30662: LD_INT 2
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30691: LD_ADDR_VAR 0 20
30695: PUSH
30696: LD_INT 0
30698: PUSH
30699: LD_INT 0
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: LD_INT 1
30711: NEG
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 1
30719: PUSH
30720: LD_INT 0
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 1
30729: PUSH
30730: LD_INT 1
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 0
30739: PUSH
30740: LD_INT 1
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 1
30749: NEG
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 1
30760: NEG
30761: PUSH
30762: LD_INT 1
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 1
30772: NEG
30773: PUSH
30774: LD_INT 2
30776: NEG
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 0
30784: PUSH
30785: LD_INT 2
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 1
30795: PUSH
30796: LD_INT 1
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 2
30806: PUSH
30807: LD_INT 0
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 2
30816: PUSH
30817: LD_INT 1
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 2
30826: PUSH
30827: LD_INT 2
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: LD_INT 2
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: LD_INT 2
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 1
30856: NEG
30857: PUSH
30858: LD_INT 1
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 2
30867: NEG
30868: PUSH
30869: LD_INT 0
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 2
30878: NEG
30879: PUSH
30880: LD_INT 1
30882: NEG
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 2
30890: NEG
30891: PUSH
30892: LD_INT 2
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30921: LD_ADDR_VAR 0 21
30925: PUSH
30926: LD_INT 0
30928: PUSH
30929: LD_INT 0
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 0
30938: PUSH
30939: LD_INT 1
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 1
30949: PUSH
30950: LD_INT 0
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 1
30959: PUSH
30960: LD_INT 1
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 0
30969: PUSH
30970: LD_INT 1
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 1
30979: NEG
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 1
30990: NEG
30991: PUSH
30992: LD_INT 1
30994: NEG
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 1
31002: NEG
31003: PUSH
31004: LD_INT 2
31006: NEG
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 0
31014: PUSH
31015: LD_INT 2
31017: NEG
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 1
31025: PUSH
31026: LD_INT 1
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 2
31036: PUSH
31037: LD_INT 0
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 2
31046: PUSH
31047: LD_INT 1
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 2
31056: PUSH
31057: LD_INT 2
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: LD_INT 2
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: LD_INT 2
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: LD_INT 1
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 2
31097: NEG
31098: PUSH
31099: LD_INT 0
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 2
31108: NEG
31109: PUSH
31110: LD_INT 1
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 2
31120: NEG
31121: PUSH
31122: LD_INT 2
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31151: LD_ADDR_VAR 0 22
31155: PUSH
31156: LD_INT 0
31158: PUSH
31159: LD_INT 0
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 0
31168: PUSH
31169: LD_INT 1
31171: NEG
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 1
31179: PUSH
31180: LD_INT 0
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 1
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: LD_INT 1
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 1
31209: NEG
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 1
31220: NEG
31221: PUSH
31222: LD_INT 1
31224: NEG
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 1
31232: NEG
31233: PUSH
31234: LD_INT 2
31236: NEG
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: LD_INT 2
31247: NEG
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 1
31255: PUSH
31256: LD_INT 1
31258: NEG
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 2
31266: PUSH
31267: LD_INT 0
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 2
31276: PUSH
31277: LD_INT 1
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 2
31286: PUSH
31287: LD_INT 2
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: LD_INT 2
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: LD_INT 2
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 1
31316: NEG
31317: PUSH
31318: LD_INT 1
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 2
31327: NEG
31328: PUSH
31329: LD_INT 0
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 2
31338: NEG
31339: PUSH
31340: LD_INT 1
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 2
31350: NEG
31351: PUSH
31352: LD_INT 2
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31381: LD_ADDR_VAR 0 23
31385: PUSH
31386: LD_INT 0
31388: PUSH
31389: LD_INT 0
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 0
31398: PUSH
31399: LD_INT 1
31401: NEG
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: LD_INT 0
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: LD_INT 1
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 1
31439: NEG
31440: PUSH
31441: LD_INT 0
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 1
31450: NEG
31451: PUSH
31452: LD_INT 1
31454: NEG
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: LD_INT 2
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 0
31474: PUSH
31475: LD_INT 2
31477: NEG
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 1
31485: PUSH
31486: LD_INT 1
31488: NEG
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 2
31496: PUSH
31497: LD_INT 0
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 2
31506: PUSH
31507: LD_INT 1
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 2
31516: PUSH
31517: LD_INT 2
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 1
31526: PUSH
31527: LD_INT 2
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 0
31536: PUSH
31537: LD_INT 2
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 1
31546: NEG
31547: PUSH
31548: LD_INT 1
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 2
31557: NEG
31558: PUSH
31559: LD_INT 0
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 2
31568: NEG
31569: PUSH
31570: LD_INT 1
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 2
31580: NEG
31581: PUSH
31582: LD_INT 2
31584: NEG
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: LD_INT 3
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 1
31604: NEG
31605: PUSH
31606: LD_INT 3
31608: NEG
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: LD_INT 2
31619: NEG
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 2
31627: PUSH
31628: LD_INT 1
31630: NEG
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
31661: LD_ADDR_VAR 0 24
31665: PUSH
31666: LD_INT 0
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 0
31678: PUSH
31679: LD_INT 1
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 1
31689: PUSH
31690: LD_INT 0
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 1
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 0
31709: PUSH
31710: LD_INT 1
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 1
31719: NEG
31720: PUSH
31721: LD_INT 0
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 1
31730: NEG
31731: PUSH
31732: LD_INT 1
31734: NEG
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 1
31742: NEG
31743: PUSH
31744: LD_INT 2
31746: NEG
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: LD_INT 2
31757: NEG
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 1
31765: PUSH
31766: LD_INT 1
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 2
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 2
31786: PUSH
31787: LD_INT 1
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 2
31796: PUSH
31797: LD_INT 2
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 1
31806: PUSH
31807: LD_INT 2
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 0
31816: PUSH
31817: LD_INT 2
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 1
31826: NEG
31827: PUSH
31828: LD_INT 1
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 2
31837: NEG
31838: PUSH
31839: LD_INT 0
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 2
31848: NEG
31849: PUSH
31850: LD_INT 1
31852: NEG
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 2
31860: NEG
31861: PUSH
31862: LD_INT 2
31864: NEG
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: LD_INT 2
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 2
31883: PUSH
31884: LD_INT 1
31886: NEG
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 3
31894: PUSH
31895: LD_INT 1
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 3
31904: PUSH
31905: LD_INT 2
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
31937: LD_ADDR_VAR 0 25
31941: PUSH
31942: LD_INT 0
31944: PUSH
31945: LD_INT 0
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 0
31954: PUSH
31955: LD_INT 1
31957: NEG
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: LD_INT 0
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: LD_INT 1
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 1
31995: NEG
31996: PUSH
31997: LD_INT 0
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: NEG
32007: PUSH
32008: LD_INT 1
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 1
32018: NEG
32019: PUSH
32020: LD_INT 2
32022: NEG
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: LD_INT 2
32033: NEG
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: LD_INT 1
32044: NEG
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 2
32052: PUSH
32053: LD_INT 0
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 2
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 1
32082: PUSH
32083: LD_INT 2
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: LD_INT 2
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 1
32102: NEG
32103: PUSH
32104: LD_INT 1
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 2
32113: NEG
32114: PUSH
32115: LD_INT 0
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 2
32124: NEG
32125: PUSH
32126: LD_INT 1
32128: NEG
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 2
32136: NEG
32137: PUSH
32138: LD_INT 2
32140: NEG
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 3
32148: PUSH
32149: LD_INT 1
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 3
32158: PUSH
32159: LD_INT 2
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 2
32168: PUSH
32169: LD_INT 3
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 1
32178: PUSH
32179: LD_INT 3
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32211: LD_ADDR_VAR 0 26
32215: PUSH
32216: LD_INT 0
32218: PUSH
32219: LD_INT 0
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 0
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 1
32239: PUSH
32240: LD_INT 0
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 0
32259: PUSH
32260: LD_INT 1
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: LD_INT 0
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 1
32280: NEG
32281: PUSH
32282: LD_INT 1
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 1
32292: NEG
32293: PUSH
32294: LD_INT 2
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 0
32304: PUSH
32305: LD_INT 2
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 1
32315: PUSH
32316: LD_INT 1
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 2
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 2
32336: PUSH
32337: LD_INT 1
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 2
32346: PUSH
32347: LD_INT 2
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 1
32356: PUSH
32357: LD_INT 2
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 0
32366: PUSH
32367: LD_INT 2
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 1
32376: NEG
32377: PUSH
32378: LD_INT 1
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 2
32387: NEG
32388: PUSH
32389: LD_INT 0
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 2
32398: NEG
32399: PUSH
32400: LD_INT 1
32402: NEG
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 2
32410: NEG
32411: PUSH
32412: LD_INT 2
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 2
32422: PUSH
32423: LD_INT 3
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: LD_INT 3
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 1
32442: NEG
32443: PUSH
32444: LD_INT 2
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 2
32453: NEG
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32487: LD_ADDR_VAR 0 27
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: LD_INT 0
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 0
32504: PUSH
32505: LD_INT 1
32507: NEG
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 1
32515: PUSH
32516: LD_INT 0
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 1
32525: PUSH
32526: LD_INT 1
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 0
32535: PUSH
32536: LD_INT 1
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 1
32545: NEG
32546: PUSH
32547: LD_INT 0
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 1
32556: NEG
32557: PUSH
32558: LD_INT 1
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 1
32568: NEG
32569: PUSH
32570: LD_INT 2
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: LD_INT 2
32583: NEG
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 1
32591: PUSH
32592: LD_INT 1
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 2
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 2
32612: PUSH
32613: LD_INT 1
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 2
32622: PUSH
32623: LD_INT 2
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 1
32632: PUSH
32633: LD_INT 2
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 0
32642: PUSH
32643: LD_INT 2
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 1
32652: NEG
32653: PUSH
32654: LD_INT 1
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 2
32663: NEG
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 2
32674: NEG
32675: PUSH
32676: LD_INT 1
32678: NEG
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 2
32686: NEG
32687: PUSH
32688: LD_INT 2
32690: NEG
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 1
32698: NEG
32699: PUSH
32700: LD_INT 2
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 2
32709: NEG
32710: PUSH
32711: LD_INT 1
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 3
32720: NEG
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 3
32732: NEG
32733: PUSH
32734: LD_INT 2
32736: NEG
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32767: LD_ADDR_VAR 0 28
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: LD_INT 1
32787: NEG
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 1
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 1
32805: PUSH
32806: LD_INT 1
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 0
32815: PUSH
32816: LD_INT 1
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 1
32825: NEG
32826: PUSH
32827: LD_INT 0
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: LD_INT 1
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 1
32848: NEG
32849: PUSH
32850: LD_INT 2
32852: NEG
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 0
32860: PUSH
32861: LD_INT 2
32863: NEG
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 1
32871: PUSH
32872: LD_INT 1
32874: NEG
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 2
32882: PUSH
32883: LD_INT 0
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 2
32892: PUSH
32893: LD_INT 1
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 2
32902: PUSH
32903: LD_INT 2
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: LD_INT 2
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: LD_INT 2
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 1
32932: NEG
32933: PUSH
32934: LD_INT 1
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 2
32943: NEG
32944: PUSH
32945: LD_INT 0
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 2
32954: NEG
32955: PUSH
32956: LD_INT 1
32958: NEG
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 2
32966: NEG
32967: PUSH
32968: LD_INT 2
32970: NEG
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 2
32978: NEG
32979: PUSH
32980: LD_INT 3
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: NEG
32991: PUSH
32992: LD_INT 3
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 3
33002: NEG
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 3
33014: NEG
33015: PUSH
33016: LD_INT 2
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33049: LD_ADDR_VAR 0 29
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 0
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 1
33077: PUSH
33078: LD_INT 0
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 1
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 0
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: PUSH
33109: LD_INT 0
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 1
33118: NEG
33119: PUSH
33120: LD_INT 1
33122: NEG
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: PUSH
33132: LD_INT 2
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 0
33142: PUSH
33143: LD_INT 2
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 2
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 2
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: LD_INT 2
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: LD_INT 2
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 1
33204: NEG
33205: PUSH
33206: LD_INT 1
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 2
33215: NEG
33216: PUSH
33217: LD_INT 1
33219: NEG
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 2
33227: NEG
33228: PUSH
33229: LD_INT 2
33231: NEG
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 2
33239: NEG
33240: PUSH
33241: LD_INT 3
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 2
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 3
33262: PUSH
33263: LD_INT 1
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: LD_INT 3
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 1
33282: NEG
33283: PUSH
33284: LD_INT 2
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 3
33293: NEG
33294: PUSH
33295: LD_INT 2
33297: NEG
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33328: LD_ADDR_VAR 0 30
33332: PUSH
33333: LD_INT 0
33335: PUSH
33336: LD_INT 0
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 0
33345: PUSH
33346: LD_INT 1
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: LD_INT 0
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 1
33366: PUSH
33367: LD_INT 1
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: NEG
33387: PUSH
33388: LD_INT 0
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 1
33397: NEG
33398: PUSH
33399: LD_INT 1
33401: NEG
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 1
33409: NEG
33410: PUSH
33411: LD_INT 2
33413: NEG
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 0
33421: PUSH
33422: LD_INT 2
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 1
33432: PUSH
33433: LD_INT 1
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 2
33443: PUSH
33444: LD_INT 0
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 2
33453: PUSH
33454: LD_INT 1
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 2
33463: PUSH
33464: LD_INT 2
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 1
33473: PUSH
33474: LD_INT 2
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 1
33483: NEG
33484: PUSH
33485: LD_INT 1
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 2
33494: NEG
33495: PUSH
33496: LD_INT 0
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 2
33505: NEG
33506: PUSH
33507: LD_INT 1
33509: NEG
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 1
33517: NEG
33518: PUSH
33519: LD_INT 3
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 1
33529: PUSH
33530: LD_INT 2
33532: NEG
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 3
33540: PUSH
33541: LD_INT 2
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 2
33550: PUSH
33551: LD_INT 3
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 2
33560: NEG
33561: PUSH
33562: LD_INT 1
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 3
33571: NEG
33572: PUSH
33573: LD_INT 1
33575: NEG
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33606: LD_ADDR_VAR 0 31
33610: PUSH
33611: LD_INT 0
33613: PUSH
33614: LD_INT 0
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 0
33623: PUSH
33624: LD_INT 1
33626: NEG
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 1
33634: PUSH
33635: LD_INT 0
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 1
33644: PUSH
33645: LD_INT 1
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 0
33654: PUSH
33655: LD_INT 1
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 1
33664: NEG
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 1
33675: NEG
33676: PUSH
33677: LD_INT 1
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 1
33687: NEG
33688: PUSH
33689: LD_INT 2
33691: NEG
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 1
33699: PUSH
33700: LD_INT 1
33702: NEG
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 2
33710: PUSH
33711: LD_INT 0
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 2
33720: PUSH
33721: LD_INT 1
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 2
33730: PUSH
33731: LD_INT 2
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 1
33740: PUSH
33741: LD_INT 2
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 0
33750: PUSH
33751: LD_INT 2
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 1
33760: NEG
33761: PUSH
33762: LD_INT 1
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 2
33771: NEG
33772: PUSH
33773: LD_INT 1
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 2
33783: NEG
33784: PUSH
33785: LD_INT 2
33787: NEG
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 2
33795: NEG
33796: PUSH
33797: LD_INT 3
33799: NEG
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 2
33807: PUSH
33808: LD_INT 1
33810: NEG
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 3
33818: PUSH
33819: LD_INT 1
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 1
33828: PUSH
33829: LD_INT 3
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 1
33838: NEG
33839: PUSH
33840: LD_INT 2
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 3
33849: NEG
33850: PUSH
33851: LD_INT 2
33853: NEG
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33884: LD_ADDR_VAR 0 32
33888: PUSH
33889: LD_INT 0
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 0
33901: PUSH
33902: LD_INT 1
33904: NEG
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 1
33912: PUSH
33913: LD_INT 0
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 1
33922: PUSH
33923: LD_INT 1
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 0
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 1
33942: NEG
33943: PUSH
33944: LD_INT 0
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 1
33953: NEG
33954: PUSH
33955: LD_INT 1
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: NEG
33966: PUSH
33967: LD_INT 2
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: LD_INT 2
33980: NEG
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 1
33988: PUSH
33989: LD_INT 1
33991: NEG
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 2
33999: PUSH
34000: LD_INT 1
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 2
34009: PUSH
34010: LD_INT 2
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 1
34019: PUSH
34020: LD_INT 2
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 0
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 1
34039: NEG
34040: PUSH
34041: LD_INT 1
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 2
34050: NEG
34051: PUSH
34052: LD_INT 0
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 2
34061: NEG
34062: PUSH
34063: LD_INT 1
34065: NEG
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 1
34073: NEG
34074: PUSH
34075: LD_INT 3
34077: NEG
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 1
34085: PUSH
34086: LD_INT 2
34088: NEG
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 3
34096: PUSH
34097: LD_INT 2
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 2
34106: PUSH
34107: LD_INT 3
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 2
34116: NEG
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 3
34127: NEG
34128: PUSH
34129: LD_INT 1
34131: NEG
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34162: LD_ADDR_VAR 0 33
34166: PUSH
34167: LD_INT 0
34169: PUSH
34170: LD_INT 0
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: LD_INT 1
34182: NEG
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 1
34190: PUSH
34191: LD_INT 0
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 1
34200: PUSH
34201: LD_INT 1
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 0
34210: PUSH
34211: LD_INT 1
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 1
34220: NEG
34221: PUSH
34222: LD_INT 0
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 1
34231: NEG
34232: PUSH
34233: LD_INT 1
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 1
34243: NEG
34244: PUSH
34245: LD_INT 2
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: PUSH
34256: LD_INT 1
34258: NEG
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 2
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 2
34276: PUSH
34277: LD_INT 1
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 1
34286: PUSH
34287: LD_INT 2
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: LD_INT 2
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 1
34306: NEG
34307: PUSH
34308: LD_INT 1
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 2
34317: NEG
34318: PUSH
34319: LD_INT 0
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 2
34328: NEG
34329: PUSH
34330: LD_INT 1
34332: NEG
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 2
34340: NEG
34341: PUSH
34342: LD_INT 2
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 2
34352: NEG
34353: PUSH
34354: LD_INT 3
34356: NEG
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 2
34364: PUSH
34365: LD_INT 1
34367: NEG
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 3
34375: PUSH
34376: LD_INT 1
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 1
34385: PUSH
34386: LD_INT 3
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 1
34395: NEG
34396: PUSH
34397: LD_INT 2
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 3
34406: NEG
34407: PUSH
34408: LD_INT 2
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34441: LD_ADDR_VAR 0 34
34445: PUSH
34446: LD_INT 0
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 0
34458: PUSH
34459: LD_INT 1
34461: NEG
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 1
34469: PUSH
34470: LD_INT 0
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 1
34479: PUSH
34480: LD_INT 1
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 0
34489: PUSH
34490: LD_INT 1
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 1
34499: NEG
34500: PUSH
34501: LD_INT 0
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 1
34510: NEG
34511: PUSH
34512: LD_INT 1
34514: NEG
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 1
34522: NEG
34523: PUSH
34524: LD_INT 2
34526: NEG
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 0
34534: PUSH
34535: LD_INT 2
34537: NEG
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 1
34545: PUSH
34546: LD_INT 1
34548: NEG
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 2
34556: PUSH
34557: LD_INT 1
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 2
34566: PUSH
34567: LD_INT 2
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 1
34576: PUSH
34577: LD_INT 2
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 1
34586: NEG
34587: PUSH
34588: LD_INT 1
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 2
34597: NEG
34598: PUSH
34599: LD_INT 0
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 2
34608: NEG
34609: PUSH
34610: LD_INT 1
34612: NEG
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 2
34620: NEG
34621: PUSH
34622: LD_INT 2
34624: NEG
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: LD_INT 3
34636: NEG
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: LD_INT 2
34647: NEG
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 3
34655: PUSH
34656: LD_INT 2
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 2
34665: PUSH
34666: LD_INT 3
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 2
34675: NEG
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 3
34686: NEG
34687: PUSH
34688: LD_INT 1
34690: NEG
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34721: LD_ADDR_VAR 0 35
34725: PUSH
34726: LD_INT 0
34728: PUSH
34729: LD_INT 0
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: LD_INT 1
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 1
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 1
34759: PUSH
34760: LD_INT 1
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 0
34769: PUSH
34770: LD_INT 1
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 1
34779: NEG
34780: PUSH
34781: LD_INT 0
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: LD_INT 1
34794: NEG
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 2
34802: PUSH
34803: LD_INT 1
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 2
34812: NEG
34813: PUSH
34814: LD_INT 1
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34833: LD_ADDR_VAR 0 36
34837: PUSH
34838: LD_INT 0
34840: PUSH
34841: LD_INT 0
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 0
34850: PUSH
34851: LD_INT 1
34853: NEG
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 1
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 1
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 1
34891: NEG
34892: PUSH
34893: LD_INT 0
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 1
34902: NEG
34903: PUSH
34904: LD_INT 1
34906: NEG
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 1
34914: NEG
34915: PUSH
34916: LD_INT 2
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 1
34926: PUSH
34927: LD_INT 2
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34945: LD_ADDR_VAR 0 37
34949: PUSH
34950: LD_INT 0
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 0
34962: PUSH
34963: LD_INT 1
34965: NEG
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 1
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 1
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 0
34993: PUSH
34994: LD_INT 1
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 1
35003: NEG
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 1
35014: NEG
35015: PUSH
35016: LD_INT 1
35018: NEG
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 1
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: PUSH
35039: LD_INT 1
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35057: LD_ADDR_VAR 0 38
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: LD_INT 0
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 0
35074: PUSH
35075: LD_INT 1
35077: NEG
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 1
35085: PUSH
35086: LD_INT 0
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: LD_INT 1
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 0
35105: PUSH
35106: LD_INT 1
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: NEG
35116: PUSH
35117: LD_INT 0
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 1
35126: NEG
35127: PUSH
35128: LD_INT 1
35130: NEG
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 2
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 2
35148: NEG
35149: PUSH
35150: LD_INT 1
35152: NEG
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35169: LD_ADDR_VAR 0 39
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 0
35186: PUSH
35187: LD_INT 1
35189: NEG
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 1
35197: PUSH
35198: LD_INT 0
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 1
35207: PUSH
35208: LD_INT 1
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 0
35217: PUSH
35218: LD_INT 1
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 1
35227: NEG
35228: PUSH
35229: LD_INT 0
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 1
35238: NEG
35239: PUSH
35240: LD_INT 1
35242: NEG
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 1
35250: NEG
35251: PUSH
35252: LD_INT 2
35254: NEG
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: LD_INT 2
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35281: LD_ADDR_VAR 0 40
35285: PUSH
35286: LD_INT 0
35288: PUSH
35289: LD_INT 0
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: LD_INT 1
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 1
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: PUSH
35320: LD_INT 1
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: LD_INT 1
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: LD_INT 0
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 1
35350: NEG
35351: PUSH
35352: LD_INT 1
35354: NEG
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: LD_INT 1
35365: NEG
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 1
35373: NEG
35374: PUSH
35375: LD_INT 1
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35393: LD_ADDR_VAR 0 41
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 0
35410: PUSH
35411: LD_INT 1
35413: NEG
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 1
35421: PUSH
35422: LD_INT 0
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 1
35431: PUSH
35432: LD_INT 1
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 0
35441: PUSH
35442: LD_INT 1
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 1
35451: NEG
35452: PUSH
35453: LD_INT 0
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 1
35462: NEG
35463: PUSH
35464: LD_INT 1
35466: NEG
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 1
35474: NEG
35475: PUSH
35476: LD_INT 2
35478: NEG
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 1
35486: PUSH
35487: LD_INT 1
35489: NEG
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 2
35497: PUSH
35498: LD_INT 0
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 2
35507: PUSH
35508: LD_INT 1
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 2
35517: PUSH
35518: LD_INT 2
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: LD_INT 2
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 1
35537: NEG
35538: PUSH
35539: LD_INT 1
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 2
35548: NEG
35549: PUSH
35550: LD_INT 0
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 2
35559: NEG
35560: PUSH
35561: LD_INT 1
35563: NEG
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 2
35571: NEG
35572: PUSH
35573: LD_INT 2
35575: NEG
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 2
35583: NEG
35584: PUSH
35585: LD_INT 3
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 2
35595: PUSH
35596: LD_INT 1
35598: NEG
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 3
35606: PUSH
35607: LD_INT 0
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 3
35616: PUSH
35617: LD_INT 1
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 3
35626: PUSH
35627: LD_INT 2
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 3
35636: PUSH
35637: LD_INT 3
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 2
35646: PUSH
35647: LD_INT 3
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 2
35656: NEG
35657: PUSH
35658: LD_INT 1
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 3
35667: NEG
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 3
35678: NEG
35679: PUSH
35680: LD_INT 1
35682: NEG
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 3
35690: NEG
35691: PUSH
35692: LD_INT 2
35694: NEG
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 3
35702: NEG
35703: PUSH
35704: LD_INT 3
35706: NEG
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35743: LD_ADDR_VAR 0 42
35747: PUSH
35748: LD_INT 0
35750: PUSH
35751: LD_INT 0
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 0
35760: PUSH
35761: LD_INT 1
35763: NEG
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: LD_INT 0
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 1
35781: PUSH
35782: LD_INT 1
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 0
35791: PUSH
35792: LD_INT 1
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 1
35801: NEG
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: LD_INT 1
35816: NEG
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 1
35824: NEG
35825: PUSH
35826: LD_INT 2
35828: NEG
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 0
35836: PUSH
35837: LD_INT 2
35839: NEG
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 1
35847: PUSH
35848: LD_INT 1
35850: NEG
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 2
35858: PUSH
35859: LD_INT 1
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 2
35868: PUSH
35869: LD_INT 2
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 1
35878: PUSH
35879: LD_INT 2
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: LD_INT 2
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 1
35898: NEG
35899: PUSH
35900: LD_INT 1
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 2
35909: NEG
35910: PUSH
35911: LD_INT 1
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 2
35921: NEG
35922: PUSH
35923: LD_INT 2
35925: NEG
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 2
35933: NEG
35934: PUSH
35935: LD_INT 3
35937: NEG
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 1
35945: NEG
35946: PUSH
35947: LD_INT 3
35949: NEG
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 0
35957: PUSH
35958: LD_INT 3
35960: NEG
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: LD_INT 2
35971: NEG
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 3
35979: PUSH
35980: LD_INT 2
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 3
35989: PUSH
35990: LD_INT 3
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 2
35999: PUSH
36000: LD_INT 3
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 1
36009: PUSH
36010: LD_INT 3
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: LD_INT 3
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 1
36029: NEG
36030: PUSH
36031: LD_INT 2
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 3
36040: NEG
36041: PUSH
36042: LD_INT 2
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 3
36052: NEG
36053: PUSH
36054: LD_INT 3
36056: NEG
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36093: LD_ADDR_VAR 0 43
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: LD_INT 0
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 0
36110: PUSH
36111: LD_INT 1
36113: NEG
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 1
36121: PUSH
36122: LD_INT 0
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: PUSH
36132: LD_INT 1
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 0
36141: PUSH
36142: LD_INT 1
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 1
36151: NEG
36152: PUSH
36153: LD_INT 0
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 1
36162: NEG
36163: PUSH
36164: LD_INT 1
36166: NEG
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: NEG
36175: PUSH
36176: LD_INT 2
36178: NEG
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: LD_INT 2
36189: NEG
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 1
36197: PUSH
36198: LD_INT 1
36200: NEG
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 2
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 2
36218: PUSH
36219: LD_INT 1
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: PUSH
36229: LD_INT 2
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: LD_INT 2
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 1
36248: NEG
36249: PUSH
36250: LD_INT 1
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 2
36259: NEG
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 2
36270: NEG
36271: PUSH
36272: LD_INT 1
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: NEG
36283: PUSH
36284: LD_INT 3
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: LD_INT 3
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 1
36305: PUSH
36306: LD_INT 2
36308: NEG
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 2
36316: PUSH
36317: LD_INT 1
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 3
36327: PUSH
36328: LD_INT 0
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 3
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: LD_INT 3
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 3
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: LD_INT 2
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 2
36378: NEG
36379: PUSH
36380: LD_INT 1
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 3
36389: NEG
36390: PUSH
36391: LD_INT 0
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 3
36400: NEG
36401: PUSH
36402: LD_INT 1
36404: NEG
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36441: LD_ADDR_VAR 0 44
36445: PUSH
36446: LD_INT 0
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: LD_INT 1
36461: NEG
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 1
36469: PUSH
36470: LD_INT 0
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 1
36479: PUSH
36480: LD_INT 1
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: LD_INT 1
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 1
36499: NEG
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 1
36510: NEG
36511: PUSH
36512: LD_INT 1
36514: NEG
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 1
36522: NEG
36523: PUSH
36524: LD_INT 2
36526: NEG
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 1
36534: PUSH
36535: LD_INT 1
36537: NEG
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 2
36545: PUSH
36546: LD_INT 0
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 2
36555: PUSH
36556: LD_INT 1
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 2
36565: PUSH
36566: LD_INT 2
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: LD_INT 2
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 1
36585: NEG
36586: PUSH
36587: LD_INT 1
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 2
36596: NEG
36597: PUSH
36598: LD_INT 0
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 2
36607: NEG
36608: PUSH
36609: LD_INT 1
36611: NEG
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 2
36619: NEG
36620: PUSH
36621: LD_INT 2
36623: NEG
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: LD_INT 3
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 2
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 3
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 3
36664: PUSH
36665: LD_INT 1
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 3
36674: PUSH
36675: LD_INT 2
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 3
36684: PUSH
36685: LD_INT 3
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 2
36694: PUSH
36695: LD_INT 3
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 2
36704: NEG
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 3
36715: NEG
36716: PUSH
36717: LD_INT 0
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 3
36726: NEG
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 3
36738: NEG
36739: PUSH
36740: LD_INT 2
36742: NEG
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 3
36750: NEG
36751: PUSH
36752: LD_INT 3
36754: NEG
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36791: LD_ADDR_VAR 0 45
36795: PUSH
36796: LD_INT 0
36798: PUSH
36799: LD_INT 0
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: LD_INT 1
36811: NEG
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 1
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 0
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 1
36849: NEG
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: PUSH
36862: LD_INT 1
36864: NEG
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: LD_INT 2
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: LD_INT 2
36887: NEG
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: LD_INT 1
36898: NEG
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 2
36906: PUSH
36907: LD_INT 1
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 2
36916: PUSH
36917: LD_INT 2
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: LD_INT 2
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: LD_INT 2
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 1
36946: NEG
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 2
36957: NEG
36958: PUSH
36959: LD_INT 1
36961: NEG
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 2
36969: NEG
36970: PUSH
36971: LD_INT 2
36973: NEG
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 2
36981: NEG
36982: PUSH
36983: LD_INT 3
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 1
36993: NEG
36994: PUSH
36995: LD_INT 3
36997: NEG
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: LD_INT 3
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: LD_INT 2
37019: NEG
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 3
37027: PUSH
37028: LD_INT 2
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 3
37037: PUSH
37038: LD_INT 3
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 2
37047: PUSH
37048: LD_INT 3
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 1
37057: PUSH
37058: LD_INT 3
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 0
37067: PUSH
37068: LD_INT 3
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 1
37077: NEG
37078: PUSH
37079: LD_INT 2
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 3
37088: NEG
37089: PUSH
37090: LD_INT 2
37092: NEG
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 3
37100: NEG
37101: PUSH
37102: LD_INT 3
37104: NEG
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37141: LD_ADDR_VAR 0 46
37145: PUSH
37146: LD_INT 0
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: LD_INT 1
37161: NEG
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: LD_INT 0
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 1
37179: PUSH
37180: LD_INT 1
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: NEG
37200: PUSH
37201: LD_INT 0
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: LD_INT 1
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: NEG
37223: PUSH
37224: LD_INT 2
37226: NEG
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 0
37234: PUSH
37235: LD_INT 2
37237: NEG
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: LD_INT 2
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: LD_INT 2
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 1
37296: NEG
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 2
37307: NEG
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 2
37318: NEG
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 1
37330: NEG
37331: PUSH
37332: LD_INT 3
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: LD_INT 3
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: LD_INT 2
37356: NEG
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 2
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 3
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 3
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: LD_INT 3
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 0
37405: PUSH
37406: LD_INT 3
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: NEG
37416: PUSH
37417: LD_INT 2
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 2
37426: NEG
37427: PUSH
37428: LD_INT 1
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 3
37437: NEG
37438: PUSH
37439: LD_INT 0
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 3
37448: NEG
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37489: LD_ADDR_VAR 0 47
37493: PUSH
37494: LD_INT 0
37496: PUSH
37497: LD_INT 0
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 0
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 1
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 1
37527: PUSH
37528: LD_INT 1
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: LD_INT 1
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 1
37547: NEG
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 1
37558: NEG
37559: PUSH
37560: LD_INT 1
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 1
37570: NEG
37571: PUSH
37572: LD_INT 2
37574: NEG
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: LD_INT 2
37585: NEG
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 1
37593: PUSH
37594: LD_INT 1
37596: NEG
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 2
37604: NEG
37605: PUSH
37606: LD_INT 1
37608: NEG
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 2
37616: NEG
37617: PUSH
37618: LD_INT 2
37620: NEG
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37640: LD_ADDR_VAR 0 48
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: LD_INT 1
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: LD_INT 1
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 0
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 1
37698: NEG
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 1
37709: NEG
37710: PUSH
37711: LD_INT 1
37713: NEG
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: PUSH
37723: LD_INT 2
37725: NEG
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: LD_INT 2
37736: NEG
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: LD_INT 1
37747: NEG
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 2
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37787: LD_ADDR_VAR 0 49
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 1
37825: PUSH
37826: LD_INT 1
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 1
37845: NEG
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 1
37868: PUSH
37869: LD_INT 1
37871: NEG
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 2
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 2
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 2
37899: PUSH
37900: LD_INT 2
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37931: LD_ADDR_VAR 0 50
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: LD_INT 0
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: LD_INT 1
37951: NEG
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 1
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 1
37969: PUSH
37970: LD_INT 1
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 0
37979: PUSH
37980: LD_INT 1
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 1
37989: NEG
37990: PUSH
37991: LD_INT 0
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 1
38000: NEG
38001: PUSH
38002: LD_INT 1
38004: NEG
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 2
38012: PUSH
38013: LD_INT 1
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 2
38022: PUSH
38023: LD_INT 2
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: LD_INT 2
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 1
38052: NEG
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38075: LD_ADDR_VAR 0 51
38079: PUSH
38080: LD_INT 0
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: LD_INT 1
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 1
38103: PUSH
38104: LD_INT 0
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 1
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 0
38123: PUSH
38124: LD_INT 1
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 1
38133: NEG
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 1
38144: NEG
38145: PUSH
38146: LD_INT 1
38148: NEG
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 1
38156: PUSH
38157: LD_INT 2
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: LD_INT 2
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 1
38176: NEG
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 2
38187: NEG
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 2
38198: NEG
38199: PUSH
38200: LD_INT 1
38202: NEG
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38222: LD_ADDR_VAR 0 52
38226: PUSH
38227: LD_INT 0
38229: PUSH
38230: LD_INT 0
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: LD_INT 1
38242: NEG
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 1
38250: PUSH
38251: LD_INT 0
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 1
38260: PUSH
38261: LD_INT 1
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 0
38270: PUSH
38271: LD_INT 1
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: LD_INT 2
38307: NEG
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 1
38315: NEG
38316: PUSH
38317: LD_INT 1
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: NEG
38327: PUSH
38328: LD_INT 0
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 2
38337: NEG
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 2
38349: NEG
38350: PUSH
38351: LD_INT 2
38353: NEG
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38373: LD_ADDR_VAR 0 53
38377: PUSH
38378: LD_INT 0
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 1
38401: PUSH
38402: LD_INT 0
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 1
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: LD_INT 1
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: NEG
38432: PUSH
38433: LD_INT 0
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 1
38442: NEG
38443: PUSH
38444: LD_INT 1
38446: NEG
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 1
38454: NEG
38455: PUSH
38456: LD_INT 2
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: LD_INT 2
38469: NEG
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 1
38477: PUSH
38478: LD_INT 1
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 2
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 2
38498: PUSH
38499: LD_INT 1
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 2
38508: PUSH
38509: LD_INT 2
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 2
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: LD_INT 2
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 1
38538: NEG
38539: PUSH
38540: LD_INT 1
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 2
38549: NEG
38550: PUSH
38551: LD_INT 0
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 2
38560: NEG
38561: PUSH
38562: LD_INT 1
38564: NEG
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 2
38572: NEG
38573: PUSH
38574: LD_INT 2
38576: NEG
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38603: LD_ADDR_VAR 0 54
38607: PUSH
38608: LD_INT 0
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: LD_INT 1
38623: NEG
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: LD_INT 1
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 1
38672: NEG
38673: PUSH
38674: LD_INT 1
38676: NEG
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 1
38684: NEG
38685: PUSH
38686: LD_INT 2
38688: NEG
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: LD_INT 2
38699: NEG
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 1
38707: PUSH
38708: LD_INT 1
38710: NEG
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 2
38718: PUSH
38719: LD_INT 0
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 2
38728: PUSH
38729: LD_INT 1
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 2
38738: PUSH
38739: LD_INT 2
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: LD_INT 2
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 0
38758: PUSH
38759: LD_INT 2
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 1
38768: NEG
38769: PUSH
38770: LD_INT 1
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 2
38779: NEG
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 2
38790: NEG
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 2
38802: NEG
38803: PUSH
38804: LD_INT 2
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38833: LD_ADDR_VAR 0 55
38837: PUSH
38838: LD_INT 0
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 0
38850: PUSH
38851: LD_INT 1
38853: NEG
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 1
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 1
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 0
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 1
38891: NEG
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 1
38902: NEG
38903: PUSH
38904: LD_INT 1
38906: NEG
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 1
38914: NEG
38915: PUSH
38916: LD_INT 2
38918: NEG
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: LD_INT 2
38929: NEG
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: LD_INT 1
38940: NEG
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 2
38948: PUSH
38949: LD_INT 0
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 2
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 2
38968: PUSH
38969: LD_INT 2
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: LD_INT 2
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: LD_INT 2
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: LD_INT 1
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 2
39009: NEG
39010: PUSH
39011: LD_INT 0
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 2
39020: NEG
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 2
39032: NEG
39033: PUSH
39034: LD_INT 2
39036: NEG
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39063: LD_ADDR_VAR 0 56
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 0
39080: PUSH
39081: LD_INT 1
39083: NEG
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: PUSH
39092: LD_INT 0
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: LD_INT 1
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: LD_INT 1
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 1
39121: NEG
39122: PUSH
39123: LD_INT 0
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 1
39132: NEG
39133: PUSH
39134: LD_INT 1
39136: NEG
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 1
39144: NEG
39145: PUSH
39146: LD_INT 2
39148: NEG
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: LD_INT 2
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: LD_INT 1
39170: NEG
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 2
39178: PUSH
39179: LD_INT 0
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 2
39188: PUSH
39189: LD_INT 1
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 2
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: LD_INT 2
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: LD_INT 2
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: LD_INT 1
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 2
39239: NEG
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 2
39250: NEG
39251: PUSH
39252: LD_INT 1
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 2
39262: NEG
39263: PUSH
39264: LD_INT 2
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39293: LD_ADDR_VAR 0 57
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 0
39310: PUSH
39311: LD_INT 1
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 1
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: LD_INT 1
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: PUSH
39376: LD_INT 2
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 0
39386: PUSH
39387: LD_INT 2
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 2
39408: PUSH
39409: LD_INT 0
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 2
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 2
39428: PUSH
39429: LD_INT 2
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 1
39438: PUSH
39439: LD_INT 2
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: LD_INT 2
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 1
39458: NEG
39459: PUSH
39460: LD_INT 1
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 2
39469: NEG
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 2
39480: NEG
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 2
39492: NEG
39493: PUSH
39494: LD_INT 2
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39523: LD_ADDR_VAR 0 58
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 0
39540: PUSH
39541: LD_INT 1
39543: NEG
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: PUSH
39552: LD_INT 0
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 1
39561: PUSH
39562: LD_INT 1
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 1
39581: NEG
39582: PUSH
39583: LD_INT 0
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 1
39604: NEG
39605: PUSH
39606: LD_INT 2
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: LD_INT 2
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: LD_INT 1
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 2
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 2
39658: PUSH
39659: LD_INT 2
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: LD_INT 2
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: LD_INT 2
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 2
39699: NEG
39700: PUSH
39701: LD_INT 0
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 2
39710: NEG
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 2
39722: NEG
39723: PUSH
39724: LD_INT 2
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39753: LD_ADDR_VAR 0 59
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 1
39791: PUSH
39792: LD_INT 1
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: LD_INT 1
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 1
39822: NEG
39823: PUSH
39824: LD_INT 1
39826: NEG
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39841: LD_ADDR_VAR 0 60
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: LD_INT 1
39861: NEG
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: LD_INT 1
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39929: LD_ADDR_VAR 0 61
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 0
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 1
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 0
39977: PUSH
39978: LD_INT 1
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: LD_INT 0
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 1
39998: NEG
39999: PUSH
40000: LD_INT 1
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40017: LD_ADDR_VAR 0 62
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40105: LD_ADDR_VAR 0 63
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: LD_INT 1
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: LD_INT 1
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40193: LD_ADDR_VAR 0 64
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: LD_INT 1
40213: NEG
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 1
40262: NEG
40263: PUSH
40264: LD_INT 1
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: ST_TO_ADDR
// end ; 1 :
40281: GO 46178
40283: LD_INT 1
40285: DOUBLE
40286: EQUAL
40287: IFTRUE 40291
40289: GO 42914
40291: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40292: LD_ADDR_VAR 0 11
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: LD_INT 3
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: LD_INT 3
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 1
40322: PUSH
40323: LD_INT 2
40325: NEG
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: LIST
40335: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40336: LD_ADDR_VAR 0 12
40340: PUSH
40341: LD_INT 2
40343: PUSH
40344: LD_INT 1
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 3
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 3
40364: PUSH
40365: LD_INT 1
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: LIST
40376: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40377: LD_ADDR_VAR 0 13
40381: PUSH
40382: LD_INT 3
40384: PUSH
40385: LD_INT 2
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 3
40394: PUSH
40395: LD_INT 3
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 2
40404: PUSH
40405: LD_INT 3
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: LIST
40416: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40417: LD_ADDR_VAR 0 14
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: LD_INT 3
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: LD_INT 3
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: LD_INT 2
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: LIST
40457: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40458: LD_ADDR_VAR 0 15
40462: PUSH
40463: LD_INT 2
40465: NEG
40466: PUSH
40467: LD_INT 1
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 3
40476: NEG
40477: PUSH
40478: LD_INT 0
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 3
40487: NEG
40488: PUSH
40489: LD_INT 1
40491: NEG
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: LIST
40501: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40502: LD_ADDR_VAR 0 16
40506: PUSH
40507: LD_INT 2
40509: NEG
40510: PUSH
40511: LD_INT 3
40513: NEG
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 3
40521: NEG
40522: PUSH
40523: LD_INT 2
40525: NEG
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 3
40533: NEG
40534: PUSH
40535: LD_INT 3
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: LIST
40547: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40548: LD_ADDR_VAR 0 17
40552: PUSH
40553: LD_INT 1
40555: NEG
40556: PUSH
40557: LD_INT 3
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: LD_INT 3
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: LD_INT 2
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: LIST
40591: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40592: LD_ADDR_VAR 0 18
40596: PUSH
40597: LD_INT 2
40599: PUSH
40600: LD_INT 1
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 3
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 3
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: LIST
40632: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40633: LD_ADDR_VAR 0 19
40637: PUSH
40638: LD_INT 3
40640: PUSH
40641: LD_INT 2
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 3
40650: PUSH
40651: LD_INT 3
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 2
40660: PUSH
40661: LD_INT 3
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: LIST
40672: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40673: LD_ADDR_VAR 0 20
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: LD_INT 3
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: LD_INT 3
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 1
40700: NEG
40701: PUSH
40702: LD_INT 2
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: LIST
40713: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40714: LD_ADDR_VAR 0 21
40718: PUSH
40719: LD_INT 2
40721: NEG
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 3
40732: NEG
40733: PUSH
40734: LD_INT 0
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 3
40743: NEG
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: LIST
40757: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40758: LD_ADDR_VAR 0 22
40762: PUSH
40763: LD_INT 2
40765: NEG
40766: PUSH
40767: LD_INT 3
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 3
40777: NEG
40778: PUSH
40779: LD_INT 2
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 3
40789: NEG
40790: PUSH
40791: LD_INT 3
40793: NEG
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: LIST
40803: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
40804: LD_ADDR_VAR 0 23
40808: PUSH
40809: LD_INT 0
40811: PUSH
40812: LD_INT 3
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: NEG
40823: PUSH
40824: LD_INT 4
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: LD_INT 3
40837: NEG
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: LIST
40847: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
40848: LD_ADDR_VAR 0 24
40852: PUSH
40853: LD_INT 3
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 3
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 4
40876: PUSH
40877: LD_INT 1
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: LIST
40888: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
40889: LD_ADDR_VAR 0 25
40893: PUSH
40894: LD_INT 3
40896: PUSH
40897: LD_INT 3
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 4
40906: PUSH
40907: LD_INT 3
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 3
40916: PUSH
40917: LD_INT 4
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: LIST
40928: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
40929: LD_ADDR_VAR 0 26
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: LD_INT 3
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: LD_INT 4
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 1
40956: NEG
40957: PUSH
40958: LD_INT 3
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: LIST
40969: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
40970: LD_ADDR_VAR 0 27
40974: PUSH
40975: LD_INT 3
40977: NEG
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 3
40988: NEG
40989: PUSH
40990: LD_INT 1
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 4
40999: NEG
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: LIST
41013: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41014: LD_ADDR_VAR 0 28
41018: PUSH
41019: LD_INT 3
41021: NEG
41022: PUSH
41023: LD_INT 3
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 3
41033: NEG
41034: PUSH
41035: LD_INT 4
41037: NEG
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 4
41045: NEG
41046: PUSH
41047: LD_INT 3
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: LIST
41059: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41060: LD_ADDR_VAR 0 29
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: LD_INT 3
41071: NEG
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 0
41079: PUSH
41080: LD_INT 3
41082: NEG
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 1
41090: PUSH
41091: LD_INT 2
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: LD_INT 4
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: LD_INT 4
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: LD_INT 3
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: LD_INT 5
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: LD_INT 5
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: LD_INT 4
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: LD_INT 6
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: LD_INT 6
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: LD_INT 5
41195: NEG
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
41215: LD_ADDR_VAR 0 30
41219: PUSH
41220: LD_INT 2
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 3
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 3
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 3
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 4
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 4
41274: PUSH
41275: LD_INT 1
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 4
41284: PUSH
41285: LD_INT 1
41287: NEG
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 5
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 5
41305: PUSH
41306: LD_INT 1
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 5
41315: PUSH
41316: LD_INT 1
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 6
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 6
41336: PUSH
41337: LD_INT 1
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
41358: LD_ADDR_VAR 0 31
41362: PUSH
41363: LD_INT 3
41365: PUSH
41366: LD_INT 2
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 3
41375: PUSH
41376: LD_INT 3
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: LD_INT 3
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 4
41395: PUSH
41396: LD_INT 3
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 4
41405: PUSH
41406: LD_INT 4
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 3
41415: PUSH
41416: LD_INT 4
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 5
41425: PUSH
41426: LD_INT 4
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 5
41435: PUSH
41436: LD_INT 5
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 4
41445: PUSH
41446: LD_INT 5
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 6
41455: PUSH
41456: LD_INT 5
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 6
41465: PUSH
41466: LD_INT 6
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 5
41475: PUSH
41476: LD_INT 6
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
41497: LD_ADDR_VAR 0 32
41501: PUSH
41502: LD_INT 1
41504: PUSH
41505: LD_INT 3
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: LD_INT 3
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 1
41524: NEG
41525: PUSH
41526: LD_INT 2
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: LD_INT 4
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: LD_INT 4
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: LD_INT 3
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: LD_INT 5
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: LD_INT 5
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: PUSH
41588: LD_INT 4
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: PUSH
41598: LD_INT 6
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: LD_INT 6
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: LD_INT 5
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
41640: LD_ADDR_VAR 0 33
41644: PUSH
41645: LD_INT 2
41647: NEG
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 3
41658: NEG
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 3
41669: NEG
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 3
41681: NEG
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 4
41692: NEG
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 4
41703: NEG
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 4
41715: NEG
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 5
41726: NEG
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 5
41737: NEG
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 5
41749: NEG
41750: PUSH
41751: LD_INT 1
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 6
41760: NEG
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 6
41771: NEG
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
41795: LD_ADDR_VAR 0 34
41799: PUSH
41800: LD_INT 2
41802: NEG
41803: PUSH
41804: LD_INT 3
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 3
41814: NEG
41815: PUSH
41816: LD_INT 2
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 3
41826: NEG
41827: PUSH
41828: LD_INT 3
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 3
41838: NEG
41839: PUSH
41840: LD_INT 4
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 4
41850: NEG
41851: PUSH
41852: LD_INT 3
41854: NEG
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 4
41862: NEG
41863: PUSH
41864: LD_INT 4
41866: NEG
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 4
41874: NEG
41875: PUSH
41876: LD_INT 5
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 5
41886: NEG
41887: PUSH
41888: LD_INT 4
41890: NEG
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 5
41898: NEG
41899: PUSH
41900: LD_INT 5
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 5
41910: NEG
41911: PUSH
41912: LD_INT 6
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 6
41922: NEG
41923: PUSH
41924: LD_INT 5
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 6
41934: NEG
41935: PUSH
41936: LD_INT 6
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
41958: LD_ADDR_VAR 0 41
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: LD_INT 2
41968: NEG
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: LD_INT 3
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: LD_INT 2
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: LIST
42001: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42002: LD_ADDR_VAR 0 42
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 2
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 3
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: LIST
42042: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42043: LD_ADDR_VAR 0 43
42047: PUSH
42048: LD_INT 2
42050: PUSH
42051: LD_INT 2
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 3
42060: PUSH
42061: LD_INT 2
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: LD_INT 3
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: LIST
42082: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
42083: LD_ADDR_VAR 0 44
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 2
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: LD_INT 3
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: NEG
42111: PUSH
42112: LD_INT 2
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: LIST
42123: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42124: LD_ADDR_VAR 0 45
42128: PUSH
42129: LD_INT 2
42131: NEG
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 2
42142: NEG
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 3
42153: NEG
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: LIST
42167: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
42168: LD_ADDR_VAR 0 46
42172: PUSH
42173: LD_INT 2
42175: NEG
42176: PUSH
42177: LD_INT 2
42179: NEG
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 2
42187: NEG
42188: PUSH
42189: LD_INT 3
42191: NEG
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 3
42199: NEG
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: LIST
42213: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
42214: LD_ADDR_VAR 0 47
42218: PUSH
42219: LD_INT 2
42221: NEG
42222: PUSH
42223: LD_INT 3
42225: NEG
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: LD_INT 3
42237: NEG
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42247: LD_ADDR_VAR 0 48
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: LD_INT 2
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
42278: LD_ADDR_VAR 0 49
42282: PUSH
42283: LD_INT 3
42285: PUSH
42286: LD_INT 1
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 3
42295: PUSH
42296: LD_INT 2
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
42307: LD_ADDR_VAR 0 50
42311: PUSH
42312: LD_INT 2
42314: PUSH
42315: LD_INT 3
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: LD_INT 3
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42336: LD_ADDR_VAR 0 51
42340: PUSH
42341: LD_INT 1
42343: NEG
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 2
42354: NEG
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42367: LD_ADDR_VAR 0 52
42371: PUSH
42372: LD_INT 3
42374: NEG
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 3
42386: NEG
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42400: LD_ADDR_VAR 0 53
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: LD_INT 3
42411: NEG
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: LD_INT 3
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: LD_INT 2
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: LIST
42443: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42444: LD_ADDR_VAR 0 54
42448: PUSH
42449: LD_INT 2
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 3
42462: PUSH
42463: LD_INT 0
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 3
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: LIST
42484: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42485: LD_ADDR_VAR 0 55
42489: PUSH
42490: LD_INT 3
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 3
42502: PUSH
42503: LD_INT 3
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 2
42512: PUSH
42513: LD_INT 3
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: LIST
42524: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42525: LD_ADDR_VAR 0 56
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: LD_INT 3
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: LD_INT 3
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: LD_INT 2
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: LIST
42565: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42566: LD_ADDR_VAR 0 57
42570: PUSH
42571: LD_INT 2
42573: NEG
42574: PUSH
42575: LD_INT 1
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 3
42584: NEG
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 3
42595: NEG
42596: PUSH
42597: LD_INT 1
42599: NEG
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: LIST
42609: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42610: LD_ADDR_VAR 0 58
42614: PUSH
42615: LD_INT 2
42617: NEG
42618: PUSH
42619: LD_INT 3
42621: NEG
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 3
42629: NEG
42630: PUSH
42631: LD_INT 2
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 3
42641: NEG
42642: PUSH
42643: LD_INT 3
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
42656: LD_ADDR_VAR 0 59
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 2
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: LIST
42699: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42700: LD_ADDR_VAR 0 60
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 2
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 2
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: LIST
42740: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42741: LD_ADDR_VAR 0 61
42745: PUSH
42746: LD_INT 2
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 2
42758: PUSH
42759: LD_INT 2
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 1
42768: PUSH
42769: LD_INT 2
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: LIST
42780: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42781: LD_ADDR_VAR 0 62
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: LD_INT 2
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: LIST
42821: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42822: LD_ADDR_VAR 0 63
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 2
42840: NEG
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 2
42851: NEG
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: LIST
42865: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42866: LD_ADDR_VAR 0 64
42870: PUSH
42871: LD_INT 1
42873: NEG
42874: PUSH
42875: LD_INT 2
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 2
42885: NEG
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 2
42897: NEG
42898: PUSH
42899: LD_INT 2
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: LIST
42911: ST_TO_ADDR
// end ; 2 :
42912: GO 46178
42914: LD_INT 2
42916: DOUBLE
42917: EQUAL
42918: IFTRUE 42922
42920: GO 46177
42922: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
42923: LD_ADDR_VAR 0 29
42927: PUSH
42928: LD_INT 4
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 4
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 5
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 5
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 4
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 3
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 3
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 3
43002: PUSH
43003: LD_INT 2
43005: NEG
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 5
43013: PUSH
43014: LD_INT 2
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 3
43023: PUSH
43024: LD_INT 3
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 3
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 4
43043: PUSH
43044: LD_INT 3
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 4
43053: PUSH
43054: LD_INT 4
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 3
43063: PUSH
43064: LD_INT 4
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 2
43073: PUSH
43074: LD_INT 3
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: LD_INT 2
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 4
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 2
43103: PUSH
43104: LD_INT 4
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: LD_INT 4
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: LD_INT 3
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: LD_INT 4
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: LD_INT 5
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: LD_INT 5
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: NEG
43164: PUSH
43165: LD_INT 4
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: LD_INT 3
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 2
43185: PUSH
43186: LD_INT 5
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 2
43195: NEG
43196: PUSH
43197: LD_INT 3
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 3
43206: NEG
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 3
43217: NEG
43218: PUSH
43219: LD_INT 1
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 2
43229: NEG
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 2
43240: NEG
43241: PUSH
43242: LD_INT 1
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 3
43251: NEG
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 4
43262: NEG
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 4
43273: NEG
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 4
43285: NEG
43286: PUSH
43287: LD_INT 2
43289: NEG
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 2
43297: NEG
43298: PUSH
43299: LD_INT 2
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 4
43308: NEG
43309: PUSH
43310: LD_INT 4
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 4
43320: NEG
43321: PUSH
43322: LD_INT 5
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 3
43332: NEG
43333: PUSH
43334: LD_INT 4
43336: NEG
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 3
43344: NEG
43345: PUSH
43346: LD_INT 3
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 4
43356: NEG
43357: PUSH
43358: LD_INT 3
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 5
43368: NEG
43369: PUSH
43370: LD_INT 4
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 5
43380: NEG
43381: PUSH
43382: LD_INT 5
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 3
43392: NEG
43393: PUSH
43394: LD_INT 5
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 5
43404: NEG
43405: PUSH
43406: LD_INT 3
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
43461: LD_ADDR_VAR 0 30
43465: PUSH
43466: LD_INT 4
43468: PUSH
43469: LD_INT 4
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 4
43478: PUSH
43479: LD_INT 3
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 5
43488: PUSH
43489: LD_INT 4
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 5
43498: PUSH
43499: LD_INT 5
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 4
43508: PUSH
43509: LD_INT 5
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 3
43518: PUSH
43519: LD_INT 4
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 3
43528: PUSH
43529: LD_INT 3
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 5
43538: PUSH
43539: LD_INT 3
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 3
43548: PUSH
43549: LD_INT 5
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: LD_INT 3
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: LD_INT 2
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: LD_INT 3
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 4
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: LD_INT 4
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: LD_INT 3
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 2
43630: PUSH
43631: LD_INT 4
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 2
43640: NEG
43641: PUSH
43642: LD_INT 2
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 4
43651: NEG
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 4
43662: NEG
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 3
43674: NEG
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 3
43685: NEG
43686: PUSH
43687: LD_INT 1
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 4
43696: NEG
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 5
43707: NEG
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 5
43718: NEG
43719: PUSH
43720: LD_INT 1
43722: NEG
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 5
43730: NEG
43731: PUSH
43732: LD_INT 2
43734: NEG
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 3
43742: NEG
43743: PUSH
43744: LD_INT 2
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 3
43753: NEG
43754: PUSH
43755: LD_INT 3
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 3
43765: NEG
43766: PUSH
43767: LD_INT 4
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: LD_INT 3
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 2
43789: NEG
43790: PUSH
43791: LD_INT 2
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 3
43801: NEG
43802: PUSH
43803: LD_INT 2
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 4
43813: NEG
43814: PUSH
43815: LD_INT 3
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 4
43825: NEG
43826: PUSH
43827: LD_INT 4
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 2
43837: NEG
43838: PUSH
43839: LD_INT 4
43841: NEG
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 4
43849: NEG
43850: PUSH
43851: LD_INT 2
43853: NEG
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: LD_INT 4
43864: NEG
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: LD_INT 5
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 4
43886: NEG
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: LD_INT 3
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 3
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: LD_INT 4
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: LD_INT 5
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: LD_INT 3
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 2
43951: NEG
43952: PUSH
43953: LD_INT 5
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44008: LD_ADDR_VAR 0 31
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: LD_INT 4
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: LD_INT 3
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: PUSH
44036: LD_INT 4
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: LD_INT 5
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: LD_INT 5
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: LD_INT 4
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: LD_INT 3
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: PUSH
44088: LD_INT 5
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 2
44097: NEG
44098: PUSH
44099: LD_INT 3
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 3
44108: NEG
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 3
44119: NEG
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 2
44131: NEG
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: NEG
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 3
44153: NEG
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 4
44164: NEG
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 4
44175: NEG
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 4
44187: NEG
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 2
44199: NEG
44200: PUSH
44201: LD_INT 2
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 4
44210: NEG
44211: PUSH
44212: LD_INT 4
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 4
44222: NEG
44223: PUSH
44224: LD_INT 5
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 3
44234: NEG
44235: PUSH
44236: LD_INT 4
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 3
44246: NEG
44247: PUSH
44248: LD_INT 3
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 4
44258: NEG
44259: PUSH
44260: LD_INT 3
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 5
44270: NEG
44271: PUSH
44272: LD_INT 4
44274: NEG
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 5
44282: NEG
44283: PUSH
44284: LD_INT 5
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 3
44294: NEG
44295: PUSH
44296: LD_INT 5
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 5
44306: NEG
44307: PUSH
44308: LD_INT 3
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: LD_INT 3
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: LD_INT 4
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: PUSH
44341: LD_INT 3
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: LD_INT 2
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: LD_INT 2
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: LD_INT 3
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: LD_INT 4
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: PUSH
44398: LD_INT 2
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 2
44408: NEG
44409: PUSH
44410: LD_INT 4
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 4
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 4
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 5
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 5
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 4
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 3
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 3
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 3
44492: PUSH
44493: LD_INT 2
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 5
44503: PUSH
44504: LD_INT 2
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
44558: LD_ADDR_VAR 0 32
44562: PUSH
44563: LD_INT 4
44565: NEG
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 4
44576: NEG
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 3
44588: NEG
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 3
44599: NEG
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 4
44610: NEG
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 5
44621: NEG
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 5
44632: NEG
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 5
44644: NEG
44645: PUSH
44646: LD_INT 2
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 3
44656: NEG
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 3
44667: NEG
44668: PUSH
44669: LD_INT 3
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 3
44679: NEG
44680: PUSH
44681: LD_INT 4
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 2
44691: NEG
44692: PUSH
44693: LD_INT 3
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 2
44703: NEG
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 3
44715: NEG
44716: PUSH
44717: LD_INT 2
44719: NEG
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 4
44727: NEG
44728: PUSH
44729: LD_INT 3
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 4
44739: NEG
44740: PUSH
44741: LD_INT 4
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 2
44751: NEG
44752: PUSH
44753: LD_INT 4
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 4
44763: NEG
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 0
44775: PUSH
44776: LD_INT 4
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: LD_INT 5
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: LD_INT 4
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: LD_INT 3
44811: NEG
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: LD_INT 3
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: LD_INT 4
44834: NEG
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: LD_INT 5
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: LD_INT 3
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 2
44865: NEG
44866: PUSH
44867: LD_INT 5
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 3
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 3
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 4
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 4
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 3
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 2
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 4
44960: PUSH
44961: LD_INT 2
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 4
44970: PUSH
44971: LD_INT 4
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 4
44980: PUSH
44981: LD_INT 3
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 5
44990: PUSH
44991: LD_INT 4
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 5
45000: PUSH
45001: LD_INT 5
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 4
45010: PUSH
45011: LD_INT 5
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 3
45020: PUSH
45021: LD_INT 4
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 3
45030: PUSH
45031: LD_INT 3
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 5
45040: PUSH
45041: LD_INT 3
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 3
45050: PUSH
45051: LD_INT 5
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
45105: LD_ADDR_VAR 0 33
45109: PUSH
45110: LD_INT 4
45112: NEG
45113: PUSH
45114: LD_INT 4
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 4
45124: NEG
45125: PUSH
45126: LD_INT 5
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 3
45136: NEG
45137: PUSH
45138: LD_INT 4
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 3
45148: NEG
45149: PUSH
45150: LD_INT 3
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 4
45160: NEG
45161: PUSH
45162: LD_INT 3
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 5
45172: NEG
45173: PUSH
45174: LD_INT 4
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 5
45184: NEG
45185: PUSH
45186: LD_INT 5
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 3
45196: NEG
45197: PUSH
45198: LD_INT 5
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 5
45208: NEG
45209: PUSH
45210: LD_INT 3
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: LD_INT 3
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: LD_INT 4
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: LD_INT 3
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: LD_INT 3
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: LD_INT 4
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 2
45310: NEG
45311: PUSH
45312: LD_INT 4
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 4
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 4
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 5
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 5
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 4
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 3
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 3
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 3
45394: PUSH
45395: LD_INT 2
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 5
45405: PUSH
45406: LD_INT 2
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 3
45415: PUSH
45416: LD_INT 3
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 3
45425: PUSH
45426: LD_INT 2
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 4
45435: PUSH
45436: LD_INT 3
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 4
45445: PUSH
45446: LD_INT 4
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 3
45455: PUSH
45456: LD_INT 4
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 2
45465: PUSH
45466: LD_INT 3
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 4
45485: PUSH
45486: LD_INT 2
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: LD_INT 4
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: LD_INT 4
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 3
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: LD_INT 4
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: LD_INT 5
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 5
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: LD_INT 4
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: LD_INT 3
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 2
45577: PUSH
45578: LD_INT 5
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: LD_INT 3
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
45643: LD_ADDR_VAR 0 34
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: LD_INT 4
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: LD_INT 5
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: LD_INT 4
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: LD_INT 3
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: LD_INT 3
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: LD_INT 4
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: NEG
45718: PUSH
45719: LD_INT 5
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: LD_INT 3
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 2
45740: NEG
45741: PUSH
45742: LD_INT 5
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 3
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 3
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 4
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 4
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 3
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: LD_INT 2
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 4
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 4
45845: PUSH
45846: LD_INT 4
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 4
45855: PUSH
45856: LD_INT 3
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 5
45865: PUSH
45866: LD_INT 4
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 5
45875: PUSH
45876: LD_INT 5
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 4
45885: PUSH
45886: LD_INT 5
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 3
45895: PUSH
45896: LD_INT 4
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 3
45905: PUSH
45906: LD_INT 3
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 5
45915: PUSH
45916: LD_INT 3
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 3
45925: PUSH
45926: LD_INT 5
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 3
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: LD_INT 2
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: LD_INT 3
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: LD_INT 4
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: LD_INT 4
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: LD_INT 3
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 2
46007: PUSH
46008: LD_INT 4
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 2
46017: NEG
46018: PUSH
46019: LD_INT 2
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 4
46028: NEG
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 4
46039: NEG
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 3
46051: NEG
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 3
46062: NEG
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 4
46073: NEG
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 5
46084: NEG
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 5
46095: NEG
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 5
46107: NEG
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 3
46119: NEG
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: ST_TO_ADDR
// end ; end ;
46175: GO 46178
46177: POP
// case btype of b_depot , b_warehouse :
46178: LD_VAR 0 1
46182: PUSH
46183: LD_INT 0
46185: DOUBLE
46186: EQUAL
46187: IFTRUE 46197
46189: LD_INT 1
46191: DOUBLE
46192: EQUAL
46193: IFTRUE 46197
46195: GO 46398
46197: POP
// case nation of nation_american :
46198: LD_VAR 0 5
46202: PUSH
46203: LD_INT 1
46205: DOUBLE
46206: EQUAL
46207: IFTRUE 46211
46209: GO 46267
46211: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
46212: LD_ADDR_VAR 0 9
46216: PUSH
46217: LD_VAR 0 11
46221: PUSH
46222: LD_VAR 0 12
46226: PUSH
46227: LD_VAR 0 13
46231: PUSH
46232: LD_VAR 0 14
46236: PUSH
46237: LD_VAR 0 15
46241: PUSH
46242: LD_VAR 0 16
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: PUSH
46255: LD_VAR 0 4
46259: PUSH
46260: LD_INT 1
46262: PLUS
46263: ARRAY
46264: ST_TO_ADDR
46265: GO 46396
46267: LD_INT 2
46269: DOUBLE
46270: EQUAL
46271: IFTRUE 46275
46273: GO 46331
46275: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
46276: LD_ADDR_VAR 0 9
46280: PUSH
46281: LD_VAR 0 17
46285: PUSH
46286: LD_VAR 0 18
46290: PUSH
46291: LD_VAR 0 19
46295: PUSH
46296: LD_VAR 0 20
46300: PUSH
46301: LD_VAR 0 21
46305: PUSH
46306: LD_VAR 0 22
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: PUSH
46319: LD_VAR 0 4
46323: PUSH
46324: LD_INT 1
46326: PLUS
46327: ARRAY
46328: ST_TO_ADDR
46329: GO 46396
46331: LD_INT 3
46333: DOUBLE
46334: EQUAL
46335: IFTRUE 46339
46337: GO 46395
46339: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
46340: LD_ADDR_VAR 0 9
46344: PUSH
46345: LD_VAR 0 23
46349: PUSH
46350: LD_VAR 0 24
46354: PUSH
46355: LD_VAR 0 25
46359: PUSH
46360: LD_VAR 0 26
46364: PUSH
46365: LD_VAR 0 27
46369: PUSH
46370: LD_VAR 0 28
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: PUSH
46383: LD_VAR 0 4
46387: PUSH
46388: LD_INT 1
46390: PLUS
46391: ARRAY
46392: ST_TO_ADDR
46393: GO 46396
46395: POP
46396: GO 46951
46398: LD_INT 2
46400: DOUBLE
46401: EQUAL
46402: IFTRUE 46412
46404: LD_INT 3
46406: DOUBLE
46407: EQUAL
46408: IFTRUE 46412
46410: GO 46468
46412: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
46413: LD_ADDR_VAR 0 9
46417: PUSH
46418: LD_VAR 0 29
46422: PUSH
46423: LD_VAR 0 30
46427: PUSH
46428: LD_VAR 0 31
46432: PUSH
46433: LD_VAR 0 32
46437: PUSH
46438: LD_VAR 0 33
46442: PUSH
46443: LD_VAR 0 34
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: PUSH
46456: LD_VAR 0 4
46460: PUSH
46461: LD_INT 1
46463: PLUS
46464: ARRAY
46465: ST_TO_ADDR
46466: GO 46951
46468: LD_INT 16
46470: DOUBLE
46471: EQUAL
46472: IFTRUE 46530
46474: LD_INT 17
46476: DOUBLE
46477: EQUAL
46478: IFTRUE 46530
46480: LD_INT 18
46482: DOUBLE
46483: EQUAL
46484: IFTRUE 46530
46486: LD_INT 19
46488: DOUBLE
46489: EQUAL
46490: IFTRUE 46530
46492: LD_INT 22
46494: DOUBLE
46495: EQUAL
46496: IFTRUE 46530
46498: LD_INT 20
46500: DOUBLE
46501: EQUAL
46502: IFTRUE 46530
46504: LD_INT 21
46506: DOUBLE
46507: EQUAL
46508: IFTRUE 46530
46510: LD_INT 23
46512: DOUBLE
46513: EQUAL
46514: IFTRUE 46530
46516: LD_INT 24
46518: DOUBLE
46519: EQUAL
46520: IFTRUE 46530
46522: LD_INT 25
46524: DOUBLE
46525: EQUAL
46526: IFTRUE 46530
46528: GO 46586
46530: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
46531: LD_ADDR_VAR 0 9
46535: PUSH
46536: LD_VAR 0 35
46540: PUSH
46541: LD_VAR 0 36
46545: PUSH
46546: LD_VAR 0 37
46550: PUSH
46551: LD_VAR 0 38
46555: PUSH
46556: LD_VAR 0 39
46560: PUSH
46561: LD_VAR 0 40
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: PUSH
46574: LD_VAR 0 4
46578: PUSH
46579: LD_INT 1
46581: PLUS
46582: ARRAY
46583: ST_TO_ADDR
46584: GO 46951
46586: LD_INT 6
46588: DOUBLE
46589: EQUAL
46590: IFTRUE 46642
46592: LD_INT 7
46594: DOUBLE
46595: EQUAL
46596: IFTRUE 46642
46598: LD_INT 8
46600: DOUBLE
46601: EQUAL
46602: IFTRUE 46642
46604: LD_INT 13
46606: DOUBLE
46607: EQUAL
46608: IFTRUE 46642
46610: LD_INT 12
46612: DOUBLE
46613: EQUAL
46614: IFTRUE 46642
46616: LD_INT 15
46618: DOUBLE
46619: EQUAL
46620: IFTRUE 46642
46622: LD_INT 11
46624: DOUBLE
46625: EQUAL
46626: IFTRUE 46642
46628: LD_INT 14
46630: DOUBLE
46631: EQUAL
46632: IFTRUE 46642
46634: LD_INT 10
46636: DOUBLE
46637: EQUAL
46638: IFTRUE 46642
46640: GO 46698
46642: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
46643: LD_ADDR_VAR 0 9
46647: PUSH
46648: LD_VAR 0 41
46652: PUSH
46653: LD_VAR 0 42
46657: PUSH
46658: LD_VAR 0 43
46662: PUSH
46663: LD_VAR 0 44
46667: PUSH
46668: LD_VAR 0 45
46672: PUSH
46673: LD_VAR 0 46
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: PUSH
46686: LD_VAR 0 4
46690: PUSH
46691: LD_INT 1
46693: PLUS
46694: ARRAY
46695: ST_TO_ADDR
46696: GO 46951
46698: LD_INT 36
46700: DOUBLE
46701: EQUAL
46702: IFTRUE 46706
46704: GO 46762
46706: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
46707: LD_ADDR_VAR 0 9
46711: PUSH
46712: LD_VAR 0 47
46716: PUSH
46717: LD_VAR 0 48
46721: PUSH
46722: LD_VAR 0 49
46726: PUSH
46727: LD_VAR 0 50
46731: PUSH
46732: LD_VAR 0 51
46736: PUSH
46737: LD_VAR 0 52
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: PUSH
46750: LD_VAR 0 4
46754: PUSH
46755: LD_INT 1
46757: PLUS
46758: ARRAY
46759: ST_TO_ADDR
46760: GO 46951
46762: LD_INT 4
46764: DOUBLE
46765: EQUAL
46766: IFTRUE 46788
46768: LD_INT 5
46770: DOUBLE
46771: EQUAL
46772: IFTRUE 46788
46774: LD_INT 34
46776: DOUBLE
46777: EQUAL
46778: IFTRUE 46788
46780: LD_INT 37
46782: DOUBLE
46783: EQUAL
46784: IFTRUE 46788
46786: GO 46844
46788: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
46789: LD_ADDR_VAR 0 9
46793: PUSH
46794: LD_VAR 0 53
46798: PUSH
46799: LD_VAR 0 54
46803: PUSH
46804: LD_VAR 0 55
46808: PUSH
46809: LD_VAR 0 56
46813: PUSH
46814: LD_VAR 0 57
46818: PUSH
46819: LD_VAR 0 58
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: PUSH
46832: LD_VAR 0 4
46836: PUSH
46837: LD_INT 1
46839: PLUS
46840: ARRAY
46841: ST_TO_ADDR
46842: GO 46951
46844: LD_INT 31
46846: DOUBLE
46847: EQUAL
46848: IFTRUE 46894
46850: LD_INT 32
46852: DOUBLE
46853: EQUAL
46854: IFTRUE 46894
46856: LD_INT 33
46858: DOUBLE
46859: EQUAL
46860: IFTRUE 46894
46862: LD_INT 27
46864: DOUBLE
46865: EQUAL
46866: IFTRUE 46894
46868: LD_INT 26
46870: DOUBLE
46871: EQUAL
46872: IFTRUE 46894
46874: LD_INT 28
46876: DOUBLE
46877: EQUAL
46878: IFTRUE 46894
46880: LD_INT 29
46882: DOUBLE
46883: EQUAL
46884: IFTRUE 46894
46886: LD_INT 30
46888: DOUBLE
46889: EQUAL
46890: IFTRUE 46894
46892: GO 46950
46894: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
46895: LD_ADDR_VAR 0 9
46899: PUSH
46900: LD_VAR 0 59
46904: PUSH
46905: LD_VAR 0 60
46909: PUSH
46910: LD_VAR 0 61
46914: PUSH
46915: LD_VAR 0 62
46919: PUSH
46920: LD_VAR 0 63
46924: PUSH
46925: LD_VAR 0 64
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: PUSH
46938: LD_VAR 0 4
46942: PUSH
46943: LD_INT 1
46945: PLUS
46946: ARRAY
46947: ST_TO_ADDR
46948: GO 46951
46950: POP
// temp_list2 = [ ] ;
46951: LD_ADDR_VAR 0 10
46955: PUSH
46956: EMPTY
46957: ST_TO_ADDR
// for i in temp_list do
46958: LD_ADDR_VAR 0 8
46962: PUSH
46963: LD_VAR 0 9
46967: PUSH
46968: FOR_IN
46969: IFFALSE 47021
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
46971: LD_ADDR_VAR 0 10
46975: PUSH
46976: LD_VAR 0 10
46980: PUSH
46981: LD_VAR 0 8
46985: PUSH
46986: LD_INT 1
46988: ARRAY
46989: PUSH
46990: LD_VAR 0 2
46994: PLUS
46995: PUSH
46996: LD_VAR 0 8
47000: PUSH
47001: LD_INT 2
47003: ARRAY
47004: PUSH
47005: LD_VAR 0 3
47009: PLUS
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: EMPTY
47016: LIST
47017: ADD
47018: ST_TO_ADDR
47019: GO 46968
47021: POP
47022: POP
// result = temp_list2 ;
47023: LD_ADDR_VAR 0 7
47027: PUSH
47028: LD_VAR 0 10
47032: ST_TO_ADDR
// end ;
47033: LD_VAR 0 7
47037: RET
// export function EnemyInRange ( unit , dist ) ; begin
47038: LD_INT 0
47040: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47041: LD_ADDR_VAR 0 3
47045: PUSH
47046: LD_VAR 0 1
47050: PPUSH
47051: CALL_OW 255
47055: PPUSH
47056: LD_VAR 0 1
47060: PPUSH
47061: CALL_OW 250
47065: PPUSH
47066: LD_VAR 0 1
47070: PPUSH
47071: CALL_OW 251
47075: PPUSH
47076: LD_VAR 0 2
47080: PPUSH
47081: CALL 20440 0 4
47085: PUSH
47086: LD_INT 4
47088: ARRAY
47089: ST_TO_ADDR
// end ;
47090: LD_VAR 0 3
47094: RET
// export function PlayerSeeMe ( unit ) ; begin
47095: LD_INT 0
47097: PPUSH
// result := See ( your_side , unit ) ;
47098: LD_ADDR_VAR 0 2
47102: PUSH
47103: LD_OWVAR 2
47107: PPUSH
47108: LD_VAR 0 1
47112: PPUSH
47113: CALL_OW 292
47117: ST_TO_ADDR
// end ;
47118: LD_VAR 0 2
47122: RET
// export function ReverseDir ( unit ) ; begin
47123: LD_INT 0
47125: PPUSH
// if not unit then
47126: LD_VAR 0 1
47130: NOT
47131: IFFALSE 47135
// exit ;
47133: GO 47158
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
47135: LD_ADDR_VAR 0 2
47139: PUSH
47140: LD_VAR 0 1
47144: PPUSH
47145: CALL_OW 254
47149: PUSH
47150: LD_INT 3
47152: PLUS
47153: PUSH
47154: LD_INT 6
47156: MOD
47157: ST_TO_ADDR
// end ;
47158: LD_VAR 0 2
47162: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
47163: LD_INT 0
47165: PPUSH
47166: PPUSH
47167: PPUSH
47168: PPUSH
47169: PPUSH
47170: PPUSH
// if not unit or not hexes then
47171: LD_VAR 0 1
47175: NOT
47176: PUSH
47177: LD_VAR 0 2
47181: NOT
47182: OR
47183: IFFALSE 47187
// exit ;
47185: GO 47310
// dist := 9999 ;
47187: LD_ADDR_VAR 0 5
47191: PUSH
47192: LD_INT 9999
47194: ST_TO_ADDR
// for i = 1 to hexes do
47195: LD_ADDR_VAR 0 4
47199: PUSH
47200: DOUBLE
47201: LD_INT 1
47203: DEC
47204: ST_TO_ADDR
47205: LD_VAR 0 2
47209: PUSH
47210: FOR_TO
47211: IFFALSE 47298
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47213: LD_ADDR_VAR 0 6
47217: PUSH
47218: LD_VAR 0 1
47222: PPUSH
47223: LD_VAR 0 2
47227: PUSH
47228: LD_VAR 0 4
47232: ARRAY
47233: PUSH
47234: LD_INT 1
47236: ARRAY
47237: PPUSH
47238: LD_VAR 0 2
47242: PUSH
47243: LD_VAR 0 4
47247: ARRAY
47248: PUSH
47249: LD_INT 2
47251: ARRAY
47252: PPUSH
47253: CALL_OW 297
47257: ST_TO_ADDR
// if tdist < dist then
47258: LD_VAR 0 6
47262: PUSH
47263: LD_VAR 0 5
47267: LESS
47268: IFFALSE 47296
// begin hex := hexes [ i ] ;
47270: LD_ADDR_VAR 0 8
47274: PUSH
47275: LD_VAR 0 2
47279: PUSH
47280: LD_VAR 0 4
47284: ARRAY
47285: ST_TO_ADDR
// dist := tdist ;
47286: LD_ADDR_VAR 0 5
47290: PUSH
47291: LD_VAR 0 6
47295: ST_TO_ADDR
// end ; end ;
47296: GO 47210
47298: POP
47299: POP
// result := hex ;
47300: LD_ADDR_VAR 0 3
47304: PUSH
47305: LD_VAR 0 8
47309: ST_TO_ADDR
// end ;
47310: LD_VAR 0 3
47314: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
47315: LD_INT 0
47317: PPUSH
47318: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
47319: LD_VAR 0 1
47323: NOT
47324: PUSH
47325: LD_VAR 0 1
47329: PUSH
47330: LD_INT 21
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 23
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PPUSH
47354: CALL_OW 69
47358: IN
47359: NOT
47360: OR
47361: IFFALSE 47365
// exit ;
47363: GO 47412
// for i = 1 to 3 do
47365: LD_ADDR_VAR 0 3
47369: PUSH
47370: DOUBLE
47371: LD_INT 1
47373: DEC
47374: ST_TO_ADDR
47375: LD_INT 3
47377: PUSH
47378: FOR_TO
47379: IFFALSE 47410
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
47381: LD_VAR 0 1
47385: PPUSH
47386: CALL_OW 250
47390: PPUSH
47391: LD_VAR 0 1
47395: PPUSH
47396: CALL_OW 251
47400: PPUSH
47401: LD_INT 1
47403: PPUSH
47404: CALL_OW 453
47408: GO 47378
47410: POP
47411: POP
// end ;
47412: LD_VAR 0 2
47416: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
47417: LD_INT 0
47419: PPUSH
47420: PPUSH
47421: PPUSH
47422: PPUSH
47423: PPUSH
47424: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
47425: LD_VAR 0 1
47429: NOT
47430: PUSH
47431: LD_VAR 0 2
47435: NOT
47436: OR
47437: PUSH
47438: LD_VAR 0 1
47442: PPUSH
47443: CALL_OW 314
47447: OR
47448: IFFALSE 47452
// exit ;
47450: GO 47893
// x := GetX ( enemy_unit ) ;
47452: LD_ADDR_VAR 0 7
47456: PUSH
47457: LD_VAR 0 2
47461: PPUSH
47462: CALL_OW 250
47466: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
47467: LD_ADDR_VAR 0 8
47471: PUSH
47472: LD_VAR 0 2
47476: PPUSH
47477: CALL_OW 251
47481: ST_TO_ADDR
// if not x or not y then
47482: LD_VAR 0 7
47486: NOT
47487: PUSH
47488: LD_VAR 0 8
47492: NOT
47493: OR
47494: IFFALSE 47498
// exit ;
47496: GO 47893
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
47498: LD_ADDR_VAR 0 6
47502: PUSH
47503: LD_VAR 0 7
47507: PPUSH
47508: LD_INT 0
47510: PPUSH
47511: LD_INT 4
47513: PPUSH
47514: CALL_OW 272
47518: PUSH
47519: LD_VAR 0 8
47523: PPUSH
47524: LD_INT 0
47526: PPUSH
47527: LD_INT 4
47529: PPUSH
47530: CALL_OW 273
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_VAR 0 7
47543: PPUSH
47544: LD_INT 1
47546: PPUSH
47547: LD_INT 4
47549: PPUSH
47550: CALL_OW 272
47554: PUSH
47555: LD_VAR 0 8
47559: PPUSH
47560: LD_INT 1
47562: PPUSH
47563: LD_INT 4
47565: PPUSH
47566: CALL_OW 273
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_VAR 0 7
47579: PPUSH
47580: LD_INT 2
47582: PPUSH
47583: LD_INT 4
47585: PPUSH
47586: CALL_OW 272
47590: PUSH
47591: LD_VAR 0 8
47595: PPUSH
47596: LD_INT 2
47598: PPUSH
47599: LD_INT 4
47601: PPUSH
47602: CALL_OW 273
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_VAR 0 7
47615: PPUSH
47616: LD_INT 3
47618: PPUSH
47619: LD_INT 4
47621: PPUSH
47622: CALL_OW 272
47626: PUSH
47627: LD_VAR 0 8
47631: PPUSH
47632: LD_INT 3
47634: PPUSH
47635: LD_INT 4
47637: PPUSH
47638: CALL_OW 273
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_VAR 0 7
47651: PPUSH
47652: LD_INT 4
47654: PPUSH
47655: LD_INT 4
47657: PPUSH
47658: CALL_OW 272
47662: PUSH
47663: LD_VAR 0 8
47667: PPUSH
47668: LD_INT 4
47670: PPUSH
47671: LD_INT 4
47673: PPUSH
47674: CALL_OW 273
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_VAR 0 7
47687: PPUSH
47688: LD_INT 5
47690: PPUSH
47691: LD_INT 4
47693: PPUSH
47694: CALL_OW 272
47698: PUSH
47699: LD_VAR 0 8
47703: PPUSH
47704: LD_INT 5
47706: PPUSH
47707: LD_INT 4
47709: PPUSH
47710: CALL_OW 273
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: ST_TO_ADDR
// for i = tmp downto 1 do
47727: LD_ADDR_VAR 0 4
47731: PUSH
47732: DOUBLE
47733: LD_VAR 0 6
47737: INC
47738: ST_TO_ADDR
47739: LD_INT 1
47741: PUSH
47742: FOR_DOWNTO
47743: IFFALSE 47844
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
47745: LD_VAR 0 6
47749: PUSH
47750: LD_VAR 0 4
47754: ARRAY
47755: PUSH
47756: LD_INT 1
47758: ARRAY
47759: PPUSH
47760: LD_VAR 0 6
47764: PUSH
47765: LD_VAR 0 4
47769: ARRAY
47770: PUSH
47771: LD_INT 2
47773: ARRAY
47774: PPUSH
47775: CALL_OW 488
47779: NOT
47780: PUSH
47781: LD_VAR 0 6
47785: PUSH
47786: LD_VAR 0 4
47790: ARRAY
47791: PUSH
47792: LD_INT 1
47794: ARRAY
47795: PPUSH
47796: LD_VAR 0 6
47800: PUSH
47801: LD_VAR 0 4
47805: ARRAY
47806: PUSH
47807: LD_INT 2
47809: ARRAY
47810: PPUSH
47811: CALL_OW 428
47815: PUSH
47816: LD_INT 0
47818: NONEQUAL
47819: OR
47820: IFFALSE 47842
// tmp := Delete ( tmp , i ) ;
47822: LD_ADDR_VAR 0 6
47826: PUSH
47827: LD_VAR 0 6
47831: PPUSH
47832: LD_VAR 0 4
47836: PPUSH
47837: CALL_OW 3
47841: ST_TO_ADDR
47842: GO 47742
47844: POP
47845: POP
// j := GetClosestHex ( unit , tmp ) ;
47846: LD_ADDR_VAR 0 5
47850: PUSH
47851: LD_VAR 0 1
47855: PPUSH
47856: LD_VAR 0 6
47860: PPUSH
47861: CALL 47163 0 2
47865: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
47866: LD_VAR 0 1
47870: PPUSH
47871: LD_VAR 0 5
47875: PUSH
47876: LD_INT 1
47878: ARRAY
47879: PPUSH
47880: LD_VAR 0 5
47884: PUSH
47885: LD_INT 2
47887: ARRAY
47888: PPUSH
47889: CALL_OW 111
// end ;
47893: LD_VAR 0 3
47897: RET
// export function PrepareApemanSoldier ( ) ; begin
47898: LD_INT 0
47900: PPUSH
// uc_nation := 0 ;
47901: LD_ADDR_OWVAR 21
47905: PUSH
47906: LD_INT 0
47908: ST_TO_ADDR
// hc_sex := sex_male ;
47909: LD_ADDR_OWVAR 27
47913: PUSH
47914: LD_INT 1
47916: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
47917: LD_ADDR_OWVAR 28
47921: PUSH
47922: LD_INT 15
47924: ST_TO_ADDR
// hc_gallery :=  ;
47925: LD_ADDR_OWVAR 33
47929: PUSH
47930: LD_STRING 
47932: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
47933: LD_ADDR_OWVAR 31
47937: PUSH
47938: LD_INT 0
47940: PPUSH
47941: LD_INT 3
47943: PPUSH
47944: CALL_OW 12
47948: PUSH
47949: LD_INT 0
47951: PPUSH
47952: LD_INT 3
47954: PPUSH
47955: CALL_OW 12
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: ST_TO_ADDR
// end ;
47972: LD_VAR 0 1
47976: RET
// export function PrepareApemanEngineer ( ) ; begin
47977: LD_INT 0
47979: PPUSH
// uc_nation := 0 ;
47980: LD_ADDR_OWVAR 21
47984: PUSH
47985: LD_INT 0
47987: ST_TO_ADDR
// hc_sex := sex_male ;
47988: LD_ADDR_OWVAR 27
47992: PUSH
47993: LD_INT 1
47995: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
47996: LD_ADDR_OWVAR 28
48000: PUSH
48001: LD_INT 16
48003: ST_TO_ADDR
// hc_gallery :=  ;
48004: LD_ADDR_OWVAR 33
48008: PUSH
48009: LD_STRING 
48011: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48012: LD_ADDR_OWVAR 31
48016: PUSH
48017: LD_INT 0
48019: PPUSH
48020: LD_INT 3
48022: PPUSH
48023: CALL_OW 12
48027: PUSH
48028: LD_INT 0
48030: PPUSH
48031: LD_INT 3
48033: PPUSH
48034: CALL_OW 12
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: ST_TO_ADDR
// end ;
48051: LD_VAR 0 1
48055: RET
// export function PrepareApeman ( agressivity ) ; begin
48056: LD_INT 0
48058: PPUSH
// uc_side := 0 ;
48059: LD_ADDR_OWVAR 20
48063: PUSH
48064: LD_INT 0
48066: ST_TO_ADDR
// uc_nation := 0 ;
48067: LD_ADDR_OWVAR 21
48071: PUSH
48072: LD_INT 0
48074: ST_TO_ADDR
// hc_sex := sex_male ;
48075: LD_ADDR_OWVAR 27
48079: PUSH
48080: LD_INT 1
48082: ST_TO_ADDR
// hc_class := class_apeman ;
48083: LD_ADDR_OWVAR 28
48087: PUSH
48088: LD_INT 12
48090: ST_TO_ADDR
// hc_gallery :=  ;
48091: LD_ADDR_OWVAR 33
48095: PUSH
48096: LD_STRING 
48098: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
48099: LD_ADDR_OWVAR 35
48103: PUSH
48104: LD_VAR 0 1
48108: NEG
48109: PPUSH
48110: LD_VAR 0 1
48114: PPUSH
48115: CALL_OW 12
48119: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48120: LD_ADDR_OWVAR 31
48124: PUSH
48125: LD_INT 0
48127: PPUSH
48128: LD_INT 3
48130: PPUSH
48131: CALL_OW 12
48135: PUSH
48136: LD_INT 0
48138: PPUSH
48139: LD_INT 3
48141: PPUSH
48142: CALL_OW 12
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: ST_TO_ADDR
// end ;
48159: LD_VAR 0 2
48163: RET
// export function PrepareTiger ( agressivity ) ; begin
48164: LD_INT 0
48166: PPUSH
// uc_side := 0 ;
48167: LD_ADDR_OWVAR 20
48171: PUSH
48172: LD_INT 0
48174: ST_TO_ADDR
// uc_nation := 0 ;
48175: LD_ADDR_OWVAR 21
48179: PUSH
48180: LD_INT 0
48182: ST_TO_ADDR
// hc_class := class_tiger ;
48183: LD_ADDR_OWVAR 28
48187: PUSH
48188: LD_INT 14
48190: ST_TO_ADDR
// hc_gallery :=  ;
48191: LD_ADDR_OWVAR 33
48195: PUSH
48196: LD_STRING 
48198: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
48199: LD_ADDR_OWVAR 35
48203: PUSH
48204: LD_VAR 0 1
48208: NEG
48209: PPUSH
48210: LD_VAR 0 1
48214: PPUSH
48215: CALL_OW 12
48219: ST_TO_ADDR
// end ;
48220: LD_VAR 0 2
48224: RET
// export function PrepareEnchidna ( ) ; begin
48225: LD_INT 0
48227: PPUSH
// uc_side := 0 ;
48228: LD_ADDR_OWVAR 20
48232: PUSH
48233: LD_INT 0
48235: ST_TO_ADDR
// uc_nation := 0 ;
48236: LD_ADDR_OWVAR 21
48240: PUSH
48241: LD_INT 0
48243: ST_TO_ADDR
// hc_class := class_baggie ;
48244: LD_ADDR_OWVAR 28
48248: PUSH
48249: LD_INT 13
48251: ST_TO_ADDR
// hc_gallery :=  ;
48252: LD_ADDR_OWVAR 33
48256: PUSH
48257: LD_STRING 
48259: ST_TO_ADDR
// end ;
48260: LD_VAR 0 1
48264: RET
// export function PrepareFrog ( ) ; begin
48265: LD_INT 0
48267: PPUSH
// uc_side := 0 ;
48268: LD_ADDR_OWVAR 20
48272: PUSH
48273: LD_INT 0
48275: ST_TO_ADDR
// uc_nation := 0 ;
48276: LD_ADDR_OWVAR 21
48280: PUSH
48281: LD_INT 0
48283: ST_TO_ADDR
// hc_class := class_frog ;
48284: LD_ADDR_OWVAR 28
48288: PUSH
48289: LD_INT 19
48291: ST_TO_ADDR
// hc_gallery :=  ;
48292: LD_ADDR_OWVAR 33
48296: PUSH
48297: LD_STRING 
48299: ST_TO_ADDR
// end ;
48300: LD_VAR 0 1
48304: RET
// export function PrepareFish ( ) ; begin
48305: LD_INT 0
48307: PPUSH
// uc_side := 0 ;
48308: LD_ADDR_OWVAR 20
48312: PUSH
48313: LD_INT 0
48315: ST_TO_ADDR
// uc_nation := 0 ;
48316: LD_ADDR_OWVAR 21
48320: PUSH
48321: LD_INT 0
48323: ST_TO_ADDR
// hc_class := class_fish ;
48324: LD_ADDR_OWVAR 28
48328: PUSH
48329: LD_INT 20
48331: ST_TO_ADDR
// hc_gallery :=  ;
48332: LD_ADDR_OWVAR 33
48336: PUSH
48337: LD_STRING 
48339: ST_TO_ADDR
// end ;
48340: LD_VAR 0 1
48344: RET
// export function PrepareBird ( ) ; begin
48345: LD_INT 0
48347: PPUSH
// uc_side := 0 ;
48348: LD_ADDR_OWVAR 20
48352: PUSH
48353: LD_INT 0
48355: ST_TO_ADDR
// uc_nation := 0 ;
48356: LD_ADDR_OWVAR 21
48360: PUSH
48361: LD_INT 0
48363: ST_TO_ADDR
// hc_class := class_phororhacos ;
48364: LD_ADDR_OWVAR 28
48368: PUSH
48369: LD_INT 18
48371: ST_TO_ADDR
// hc_gallery :=  ;
48372: LD_ADDR_OWVAR 33
48376: PUSH
48377: LD_STRING 
48379: ST_TO_ADDR
// end ;
48380: LD_VAR 0 1
48384: RET
// export function PrepareHorse ( ) ; begin
48385: LD_INT 0
48387: PPUSH
// uc_side := 0 ;
48388: LD_ADDR_OWVAR 20
48392: PUSH
48393: LD_INT 0
48395: ST_TO_ADDR
// uc_nation := 0 ;
48396: LD_ADDR_OWVAR 21
48400: PUSH
48401: LD_INT 0
48403: ST_TO_ADDR
// hc_class := class_horse ;
48404: LD_ADDR_OWVAR 28
48408: PUSH
48409: LD_INT 21
48411: ST_TO_ADDR
// hc_gallery :=  ;
48412: LD_ADDR_OWVAR 33
48416: PUSH
48417: LD_STRING 
48419: ST_TO_ADDR
// end ;
48420: LD_VAR 0 1
48424: RET
// export function PrepareMastodont ( ) ; begin
48425: LD_INT 0
48427: PPUSH
// uc_side := 0 ;
48428: LD_ADDR_OWVAR 20
48432: PUSH
48433: LD_INT 0
48435: ST_TO_ADDR
// uc_nation := 0 ;
48436: LD_ADDR_OWVAR 21
48440: PUSH
48441: LD_INT 0
48443: ST_TO_ADDR
// vc_chassis := class_mastodont ;
48444: LD_ADDR_OWVAR 37
48448: PUSH
48449: LD_INT 31
48451: ST_TO_ADDR
// vc_control := control_rider ;
48452: LD_ADDR_OWVAR 38
48456: PUSH
48457: LD_INT 4
48459: ST_TO_ADDR
// end ;
48460: LD_VAR 0 1
48464: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
48465: LD_INT 0
48467: PPUSH
48468: PPUSH
48469: PPUSH
// uc_side = 0 ;
48470: LD_ADDR_OWVAR 20
48474: PUSH
48475: LD_INT 0
48477: ST_TO_ADDR
// uc_nation = 0 ;
48478: LD_ADDR_OWVAR 21
48482: PUSH
48483: LD_INT 0
48485: ST_TO_ADDR
// InitHc_All ( ) ;
48486: CALL_OW 584
// InitVc ;
48490: CALL_OW 20
// if mastodonts then
48494: LD_VAR 0 6
48498: IFFALSE 48565
// for i = 1 to mastodonts do
48500: LD_ADDR_VAR 0 11
48504: PUSH
48505: DOUBLE
48506: LD_INT 1
48508: DEC
48509: ST_TO_ADDR
48510: LD_VAR 0 6
48514: PUSH
48515: FOR_TO
48516: IFFALSE 48563
// begin vc_chassis := 31 ;
48518: LD_ADDR_OWVAR 37
48522: PUSH
48523: LD_INT 31
48525: ST_TO_ADDR
// vc_control := control_rider ;
48526: LD_ADDR_OWVAR 38
48530: PUSH
48531: LD_INT 4
48533: ST_TO_ADDR
// animal := CreateVehicle ;
48534: LD_ADDR_VAR 0 12
48538: PUSH
48539: CALL_OW 45
48543: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48544: LD_VAR 0 12
48548: PPUSH
48549: LD_VAR 0 8
48553: PPUSH
48554: LD_INT 0
48556: PPUSH
48557: CALL 50700 0 3
// end ;
48561: GO 48515
48563: POP
48564: POP
// if horses then
48565: LD_VAR 0 5
48569: IFFALSE 48636
// for i = 1 to horses do
48571: LD_ADDR_VAR 0 11
48575: PUSH
48576: DOUBLE
48577: LD_INT 1
48579: DEC
48580: ST_TO_ADDR
48581: LD_VAR 0 5
48585: PUSH
48586: FOR_TO
48587: IFFALSE 48634
// begin hc_class := 21 ;
48589: LD_ADDR_OWVAR 28
48593: PUSH
48594: LD_INT 21
48596: ST_TO_ADDR
// hc_gallery :=  ;
48597: LD_ADDR_OWVAR 33
48601: PUSH
48602: LD_STRING 
48604: ST_TO_ADDR
// animal := CreateHuman ;
48605: LD_ADDR_VAR 0 12
48609: PUSH
48610: CALL_OW 44
48614: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48615: LD_VAR 0 12
48619: PPUSH
48620: LD_VAR 0 8
48624: PPUSH
48625: LD_INT 0
48627: PPUSH
48628: CALL 50700 0 3
// end ;
48632: GO 48586
48634: POP
48635: POP
// if birds then
48636: LD_VAR 0 1
48640: IFFALSE 48707
// for i = 1 to birds do
48642: LD_ADDR_VAR 0 11
48646: PUSH
48647: DOUBLE
48648: LD_INT 1
48650: DEC
48651: ST_TO_ADDR
48652: LD_VAR 0 1
48656: PUSH
48657: FOR_TO
48658: IFFALSE 48705
// begin hc_class = 18 ;
48660: LD_ADDR_OWVAR 28
48664: PUSH
48665: LD_INT 18
48667: ST_TO_ADDR
// hc_gallery =  ;
48668: LD_ADDR_OWVAR 33
48672: PUSH
48673: LD_STRING 
48675: ST_TO_ADDR
// animal := CreateHuman ;
48676: LD_ADDR_VAR 0 12
48680: PUSH
48681: CALL_OW 44
48685: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48686: LD_VAR 0 12
48690: PPUSH
48691: LD_VAR 0 8
48695: PPUSH
48696: LD_INT 0
48698: PPUSH
48699: CALL 50700 0 3
// end ;
48703: GO 48657
48705: POP
48706: POP
// if tigers then
48707: LD_VAR 0 2
48711: IFFALSE 48795
// for i = 1 to tigers do
48713: LD_ADDR_VAR 0 11
48717: PUSH
48718: DOUBLE
48719: LD_INT 1
48721: DEC
48722: ST_TO_ADDR
48723: LD_VAR 0 2
48727: PUSH
48728: FOR_TO
48729: IFFALSE 48793
// begin hc_class = class_tiger ;
48731: LD_ADDR_OWVAR 28
48735: PUSH
48736: LD_INT 14
48738: ST_TO_ADDR
// hc_gallery =  ;
48739: LD_ADDR_OWVAR 33
48743: PUSH
48744: LD_STRING 
48746: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
48747: LD_ADDR_OWVAR 35
48751: PUSH
48752: LD_INT 7
48754: NEG
48755: PPUSH
48756: LD_INT 7
48758: PPUSH
48759: CALL_OW 12
48763: ST_TO_ADDR
// animal := CreateHuman ;
48764: LD_ADDR_VAR 0 12
48768: PUSH
48769: CALL_OW 44
48773: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48774: LD_VAR 0 12
48778: PPUSH
48779: LD_VAR 0 8
48783: PPUSH
48784: LD_INT 0
48786: PPUSH
48787: CALL 50700 0 3
// end ;
48791: GO 48728
48793: POP
48794: POP
// if apemans then
48795: LD_VAR 0 3
48799: IFFALSE 48922
// for i = 1 to apemans do
48801: LD_ADDR_VAR 0 11
48805: PUSH
48806: DOUBLE
48807: LD_INT 1
48809: DEC
48810: ST_TO_ADDR
48811: LD_VAR 0 3
48815: PUSH
48816: FOR_TO
48817: IFFALSE 48920
// begin hc_class = class_apeman ;
48819: LD_ADDR_OWVAR 28
48823: PUSH
48824: LD_INT 12
48826: ST_TO_ADDR
// hc_gallery =  ;
48827: LD_ADDR_OWVAR 33
48831: PUSH
48832: LD_STRING 
48834: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
48835: LD_ADDR_OWVAR 35
48839: PUSH
48840: LD_INT 2
48842: NEG
48843: PPUSH
48844: LD_INT 2
48846: PPUSH
48847: CALL_OW 12
48851: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
48852: LD_ADDR_OWVAR 31
48856: PUSH
48857: LD_INT 1
48859: PPUSH
48860: LD_INT 3
48862: PPUSH
48863: CALL_OW 12
48867: PUSH
48868: LD_INT 1
48870: PPUSH
48871: LD_INT 3
48873: PPUSH
48874: CALL_OW 12
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: ST_TO_ADDR
// animal := CreateHuman ;
48891: LD_ADDR_VAR 0 12
48895: PUSH
48896: CALL_OW 44
48900: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48901: LD_VAR 0 12
48905: PPUSH
48906: LD_VAR 0 8
48910: PPUSH
48911: LD_INT 0
48913: PPUSH
48914: CALL 50700 0 3
// end ;
48918: GO 48816
48920: POP
48921: POP
// if enchidnas then
48922: LD_VAR 0 4
48926: IFFALSE 48993
// for i = 1 to enchidnas do
48928: LD_ADDR_VAR 0 11
48932: PUSH
48933: DOUBLE
48934: LD_INT 1
48936: DEC
48937: ST_TO_ADDR
48938: LD_VAR 0 4
48942: PUSH
48943: FOR_TO
48944: IFFALSE 48991
// begin hc_class = 13 ;
48946: LD_ADDR_OWVAR 28
48950: PUSH
48951: LD_INT 13
48953: ST_TO_ADDR
// hc_gallery =  ;
48954: LD_ADDR_OWVAR 33
48958: PUSH
48959: LD_STRING 
48961: ST_TO_ADDR
// animal := CreateHuman ;
48962: LD_ADDR_VAR 0 12
48966: PUSH
48967: CALL_OW 44
48971: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48972: LD_VAR 0 12
48976: PPUSH
48977: LD_VAR 0 8
48981: PPUSH
48982: LD_INT 0
48984: PPUSH
48985: CALL 50700 0 3
// end ;
48989: GO 48943
48991: POP
48992: POP
// if fishes then
48993: LD_VAR 0 7
48997: IFFALSE 49064
// for i = 1 to fishes do
48999: LD_ADDR_VAR 0 11
49003: PUSH
49004: DOUBLE
49005: LD_INT 1
49007: DEC
49008: ST_TO_ADDR
49009: LD_VAR 0 7
49013: PUSH
49014: FOR_TO
49015: IFFALSE 49062
// begin hc_class = 20 ;
49017: LD_ADDR_OWVAR 28
49021: PUSH
49022: LD_INT 20
49024: ST_TO_ADDR
// hc_gallery =  ;
49025: LD_ADDR_OWVAR 33
49029: PUSH
49030: LD_STRING 
49032: ST_TO_ADDR
// animal := CreateHuman ;
49033: LD_ADDR_VAR 0 12
49037: PUSH
49038: CALL_OW 44
49042: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
49043: LD_VAR 0 12
49047: PPUSH
49048: LD_VAR 0 9
49052: PPUSH
49053: LD_INT 0
49055: PPUSH
49056: CALL 50700 0 3
// end ;
49060: GO 49014
49062: POP
49063: POP
// end ;
49064: LD_VAR 0 10
49068: RET
// export function WantHeal ( sci , unit ) ; begin
49069: LD_INT 0
49071: PPUSH
// if GetTaskList ( sci ) > 0 then
49072: LD_VAR 0 1
49076: PPUSH
49077: CALL_OW 437
49081: PUSH
49082: LD_INT 0
49084: GREATER
49085: IFFALSE 49155
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
49087: LD_VAR 0 1
49091: PPUSH
49092: CALL_OW 437
49096: PUSH
49097: LD_INT 1
49099: ARRAY
49100: PUSH
49101: LD_INT 1
49103: ARRAY
49104: PUSH
49105: LD_STRING l
49107: EQUAL
49108: PUSH
49109: LD_VAR 0 1
49113: PPUSH
49114: CALL_OW 437
49118: PUSH
49119: LD_INT 1
49121: ARRAY
49122: PUSH
49123: LD_INT 4
49125: ARRAY
49126: PUSH
49127: LD_VAR 0 2
49131: EQUAL
49132: AND
49133: IFFALSE 49145
// result := true else
49135: LD_ADDR_VAR 0 3
49139: PUSH
49140: LD_INT 1
49142: ST_TO_ADDR
49143: GO 49153
// result := false ;
49145: LD_ADDR_VAR 0 3
49149: PUSH
49150: LD_INT 0
49152: ST_TO_ADDR
// end else
49153: GO 49163
// result := false ;
49155: LD_ADDR_VAR 0 3
49159: PUSH
49160: LD_INT 0
49162: ST_TO_ADDR
// end ;
49163: LD_VAR 0 3
49167: RET
// export function HealTarget ( sci ) ; begin
49168: LD_INT 0
49170: PPUSH
// if not sci then
49171: LD_VAR 0 1
49175: NOT
49176: IFFALSE 49180
// exit ;
49178: GO 49245
// result := 0 ;
49180: LD_ADDR_VAR 0 2
49184: PUSH
49185: LD_INT 0
49187: ST_TO_ADDR
// if GetTaskList ( sci ) then
49188: LD_VAR 0 1
49192: PPUSH
49193: CALL_OW 437
49197: IFFALSE 49245
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
49199: LD_VAR 0 1
49203: PPUSH
49204: CALL_OW 437
49208: PUSH
49209: LD_INT 1
49211: ARRAY
49212: PUSH
49213: LD_INT 1
49215: ARRAY
49216: PUSH
49217: LD_STRING l
49219: EQUAL
49220: IFFALSE 49245
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
49222: LD_ADDR_VAR 0 2
49226: PUSH
49227: LD_VAR 0 1
49231: PPUSH
49232: CALL_OW 437
49236: PUSH
49237: LD_INT 1
49239: ARRAY
49240: PUSH
49241: LD_INT 4
49243: ARRAY
49244: ST_TO_ADDR
// end ;
49245: LD_VAR 0 2
49249: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
49250: LD_INT 0
49252: PPUSH
49253: PPUSH
49254: PPUSH
49255: PPUSH
// if not base_units then
49256: LD_VAR 0 1
49260: NOT
49261: IFFALSE 49265
// exit ;
49263: GO 49352
// result := false ;
49265: LD_ADDR_VAR 0 2
49269: PUSH
49270: LD_INT 0
49272: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
49273: LD_ADDR_VAR 0 5
49277: PUSH
49278: LD_VAR 0 1
49282: PPUSH
49283: LD_INT 21
49285: PUSH
49286: LD_INT 3
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PPUSH
49293: CALL_OW 72
49297: ST_TO_ADDR
// if not tmp then
49298: LD_VAR 0 5
49302: NOT
49303: IFFALSE 49307
// exit ;
49305: GO 49352
// for i in tmp do
49307: LD_ADDR_VAR 0 3
49311: PUSH
49312: LD_VAR 0 5
49316: PUSH
49317: FOR_IN
49318: IFFALSE 49350
// begin result := EnemyInRange ( i , 22 ) ;
49320: LD_ADDR_VAR 0 2
49324: PUSH
49325: LD_VAR 0 3
49329: PPUSH
49330: LD_INT 22
49332: PPUSH
49333: CALL 47038 0 2
49337: ST_TO_ADDR
// if result then
49338: LD_VAR 0 2
49342: IFFALSE 49348
// exit ;
49344: POP
49345: POP
49346: GO 49352
// end ;
49348: GO 49317
49350: POP
49351: POP
// end ;
49352: LD_VAR 0 2
49356: RET
// export function FilterByTag ( units , tag ) ; begin
49357: LD_INT 0
49359: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
49360: LD_ADDR_VAR 0 3
49364: PUSH
49365: LD_VAR 0 1
49369: PPUSH
49370: LD_INT 120
49372: PUSH
49373: LD_VAR 0 2
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PPUSH
49382: CALL_OW 72
49386: ST_TO_ADDR
// end ;
49387: LD_VAR 0 3
49391: RET
// export function IsDriver ( un ) ; begin
49392: LD_INT 0
49394: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
49395: LD_ADDR_VAR 0 2
49399: PUSH
49400: LD_VAR 0 1
49404: PUSH
49405: LD_INT 55
49407: PUSH
49408: EMPTY
49409: LIST
49410: PPUSH
49411: CALL_OW 69
49415: IN
49416: ST_TO_ADDR
// end ;
49417: LD_VAR 0 2
49421: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
49422: LD_INT 0
49424: PPUSH
49425: PPUSH
// list := [ ] ;
49426: LD_ADDR_VAR 0 5
49430: PUSH
49431: EMPTY
49432: ST_TO_ADDR
// case d of 0 :
49433: LD_VAR 0 3
49437: PUSH
49438: LD_INT 0
49440: DOUBLE
49441: EQUAL
49442: IFTRUE 49446
49444: GO 49579
49446: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
49447: LD_ADDR_VAR 0 5
49451: PUSH
49452: LD_VAR 0 1
49456: PUSH
49457: LD_INT 4
49459: MINUS
49460: PUSH
49461: LD_VAR 0 2
49465: PUSH
49466: LD_INT 4
49468: MINUS
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: LIST
49477: PUSH
49478: LD_VAR 0 1
49482: PUSH
49483: LD_INT 3
49485: MINUS
49486: PUSH
49487: LD_VAR 0 2
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: LIST
49499: PUSH
49500: LD_VAR 0 1
49504: PUSH
49505: LD_INT 4
49507: PLUS
49508: PUSH
49509: LD_VAR 0 2
49513: PUSH
49514: LD_INT 4
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: LIST
49521: PUSH
49522: LD_VAR 0 1
49526: PUSH
49527: LD_INT 3
49529: PLUS
49530: PUSH
49531: LD_VAR 0 2
49535: PUSH
49536: LD_INT 3
49538: PLUS
49539: PUSH
49540: LD_INT 5
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: LIST
49547: PUSH
49548: LD_VAR 0 1
49552: PUSH
49553: LD_VAR 0 2
49557: PUSH
49558: LD_INT 4
49560: PLUS
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: LIST
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: ST_TO_ADDR
// end ; 1 :
49577: GO 50277
49579: LD_INT 1
49581: DOUBLE
49582: EQUAL
49583: IFTRUE 49587
49585: GO 49720
49587: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
49588: LD_ADDR_VAR 0 5
49592: PUSH
49593: LD_VAR 0 1
49597: PUSH
49598: LD_VAR 0 2
49602: PUSH
49603: LD_INT 4
49605: MINUS
49606: PUSH
49607: LD_INT 3
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: LIST
49614: PUSH
49615: LD_VAR 0 1
49619: PUSH
49620: LD_INT 3
49622: MINUS
49623: PUSH
49624: LD_VAR 0 2
49628: PUSH
49629: LD_INT 3
49631: MINUS
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: LIST
49640: PUSH
49641: LD_VAR 0 1
49645: PUSH
49646: LD_INT 4
49648: MINUS
49649: PUSH
49650: LD_VAR 0 2
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: LIST
49662: PUSH
49663: LD_VAR 0 1
49667: PUSH
49668: LD_VAR 0 2
49672: PUSH
49673: LD_INT 3
49675: PLUS
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: LIST
49684: PUSH
49685: LD_VAR 0 1
49689: PUSH
49690: LD_INT 4
49692: PLUS
49693: PUSH
49694: LD_VAR 0 2
49698: PUSH
49699: LD_INT 4
49701: PLUS
49702: PUSH
49703: LD_INT 5
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: LIST
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: ST_TO_ADDR
// end ; 2 :
49718: GO 50277
49720: LD_INT 2
49722: DOUBLE
49723: EQUAL
49724: IFTRUE 49728
49726: GO 49857
49728: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
49729: LD_ADDR_VAR 0 5
49733: PUSH
49734: LD_VAR 0 1
49738: PUSH
49739: LD_VAR 0 2
49743: PUSH
49744: LD_INT 3
49746: MINUS
49747: PUSH
49748: LD_INT 3
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: LIST
49755: PUSH
49756: LD_VAR 0 1
49760: PUSH
49761: LD_INT 4
49763: PLUS
49764: PUSH
49765: LD_VAR 0 2
49769: PUSH
49770: LD_INT 4
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: LIST
49777: PUSH
49778: LD_VAR 0 1
49782: PUSH
49783: LD_VAR 0 2
49787: PUSH
49788: LD_INT 4
49790: PLUS
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: LIST
49799: PUSH
49800: LD_VAR 0 1
49804: PUSH
49805: LD_INT 3
49807: MINUS
49808: PUSH
49809: LD_VAR 0 2
49813: PUSH
49814: LD_INT 1
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: LIST
49821: PUSH
49822: LD_VAR 0 1
49826: PUSH
49827: LD_INT 4
49829: MINUS
49830: PUSH
49831: LD_VAR 0 2
49835: PUSH
49836: LD_INT 4
49838: MINUS
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: LIST
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: ST_TO_ADDR
// end ; 3 :
49855: GO 50277
49857: LD_INT 3
49859: DOUBLE
49860: EQUAL
49861: IFTRUE 49865
49863: GO 49998
49865: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
49866: LD_ADDR_VAR 0 5
49870: PUSH
49871: LD_VAR 0 1
49875: PUSH
49876: LD_INT 3
49878: PLUS
49879: PUSH
49880: LD_VAR 0 2
49884: PUSH
49885: LD_INT 4
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: LIST
49892: PUSH
49893: LD_VAR 0 1
49897: PUSH
49898: LD_INT 4
49900: PLUS
49901: PUSH
49902: LD_VAR 0 2
49906: PUSH
49907: LD_INT 4
49909: PLUS
49910: PUSH
49911: LD_INT 5
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: LIST
49918: PUSH
49919: LD_VAR 0 1
49923: PUSH
49924: LD_INT 4
49926: MINUS
49927: PUSH
49928: LD_VAR 0 2
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: LIST
49940: PUSH
49941: LD_VAR 0 1
49945: PUSH
49946: LD_VAR 0 2
49950: PUSH
49951: LD_INT 4
49953: MINUS
49954: PUSH
49955: LD_INT 3
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: LIST
49962: PUSH
49963: LD_VAR 0 1
49967: PUSH
49968: LD_INT 3
49970: MINUS
49971: PUSH
49972: LD_VAR 0 2
49976: PUSH
49977: LD_INT 3
49979: MINUS
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: LIST
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: ST_TO_ADDR
// end ; 4 :
49996: GO 50277
49998: LD_INT 4
50000: DOUBLE
50001: EQUAL
50002: IFTRUE 50006
50004: GO 50139
50006: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50007: LD_ADDR_VAR 0 5
50011: PUSH
50012: LD_VAR 0 1
50016: PUSH
50017: LD_VAR 0 2
50021: PUSH
50022: LD_INT 4
50024: PLUS
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: LIST
50033: PUSH
50034: LD_VAR 0 1
50038: PUSH
50039: LD_INT 3
50041: PLUS
50042: PUSH
50043: LD_VAR 0 2
50047: PUSH
50048: LD_INT 3
50050: PLUS
50051: PUSH
50052: LD_INT 5
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: LIST
50059: PUSH
50060: LD_VAR 0 1
50064: PUSH
50065: LD_INT 4
50067: PLUS
50068: PUSH
50069: LD_VAR 0 2
50073: PUSH
50074: LD_INT 4
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: LIST
50081: PUSH
50082: LD_VAR 0 1
50086: PUSH
50087: LD_VAR 0 2
50091: PUSH
50092: LD_INT 3
50094: MINUS
50095: PUSH
50096: LD_INT 3
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: LIST
50103: PUSH
50104: LD_VAR 0 1
50108: PUSH
50109: LD_INT 4
50111: MINUS
50112: PUSH
50113: LD_VAR 0 2
50117: PUSH
50118: LD_INT 4
50120: MINUS
50121: PUSH
50122: LD_INT 2
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: LIST
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: ST_TO_ADDR
// end ; 5 :
50137: GO 50277
50139: LD_INT 5
50141: DOUBLE
50142: EQUAL
50143: IFTRUE 50147
50145: GO 50276
50147: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
50148: LD_ADDR_VAR 0 5
50152: PUSH
50153: LD_VAR 0 1
50157: PUSH
50158: LD_INT 4
50160: MINUS
50161: PUSH
50162: LD_VAR 0 2
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: LIST
50174: PUSH
50175: LD_VAR 0 1
50179: PUSH
50180: LD_VAR 0 2
50184: PUSH
50185: LD_INT 4
50187: MINUS
50188: PUSH
50189: LD_INT 3
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: LIST
50196: PUSH
50197: LD_VAR 0 1
50201: PUSH
50202: LD_INT 4
50204: PLUS
50205: PUSH
50206: LD_VAR 0 2
50210: PUSH
50211: LD_INT 4
50213: PLUS
50214: PUSH
50215: LD_INT 5
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: LIST
50222: PUSH
50223: LD_VAR 0 1
50227: PUSH
50228: LD_INT 3
50230: PLUS
50231: PUSH
50232: LD_VAR 0 2
50236: PUSH
50237: LD_INT 4
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: LIST
50244: PUSH
50245: LD_VAR 0 1
50249: PUSH
50250: LD_VAR 0 2
50254: PUSH
50255: LD_INT 3
50257: PLUS
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: LIST
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: ST_TO_ADDR
// end ; end ;
50274: GO 50277
50276: POP
// result := list ;
50277: LD_ADDR_VAR 0 4
50281: PUSH
50282: LD_VAR 0 5
50286: ST_TO_ADDR
// end ;
50287: LD_VAR 0 4
50291: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
50292: LD_INT 0
50294: PPUSH
50295: PPUSH
50296: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
50297: LD_VAR 0 1
50301: NOT
50302: PUSH
50303: LD_VAR 0 2
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: LD_INT 2
50313: PUSH
50314: LD_INT 3
50316: PUSH
50317: LD_INT 4
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: IN
50326: NOT
50327: OR
50328: IFFALSE 50332
// exit ;
50330: GO 50424
// tmp := [ ] ;
50332: LD_ADDR_VAR 0 5
50336: PUSH
50337: EMPTY
50338: ST_TO_ADDR
// for i in units do
50339: LD_ADDR_VAR 0 4
50343: PUSH
50344: LD_VAR 0 1
50348: PUSH
50349: FOR_IN
50350: IFFALSE 50393
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
50352: LD_ADDR_VAR 0 5
50356: PUSH
50357: LD_VAR 0 5
50361: PPUSH
50362: LD_VAR 0 5
50366: PUSH
50367: LD_INT 1
50369: PLUS
50370: PPUSH
50371: LD_VAR 0 4
50375: PPUSH
50376: LD_VAR 0 2
50380: PPUSH
50381: CALL_OW 259
50385: PPUSH
50386: CALL_OW 2
50390: ST_TO_ADDR
50391: GO 50349
50393: POP
50394: POP
// if not tmp then
50395: LD_VAR 0 5
50399: NOT
50400: IFFALSE 50404
// exit ;
50402: GO 50424
// result := SortListByListDesc ( units , tmp ) ;
50404: LD_ADDR_VAR 0 3
50408: PUSH
50409: LD_VAR 0 1
50413: PPUSH
50414: LD_VAR 0 5
50418: PPUSH
50419: CALL_OW 77
50423: ST_TO_ADDR
// end ;
50424: LD_VAR 0 3
50428: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
50429: LD_INT 0
50431: PPUSH
50432: PPUSH
50433: PPUSH
// result := false ;
50434: LD_ADDR_VAR 0 3
50438: PUSH
50439: LD_INT 0
50441: ST_TO_ADDR
// x := GetX ( building ) ;
50442: LD_ADDR_VAR 0 4
50446: PUSH
50447: LD_VAR 0 2
50451: PPUSH
50452: CALL_OW 250
50456: ST_TO_ADDR
// y := GetY ( building ) ;
50457: LD_ADDR_VAR 0 5
50461: PUSH
50462: LD_VAR 0 2
50466: PPUSH
50467: CALL_OW 251
50471: ST_TO_ADDR
// if not building or not x or not y then
50472: LD_VAR 0 2
50476: NOT
50477: PUSH
50478: LD_VAR 0 4
50482: NOT
50483: OR
50484: PUSH
50485: LD_VAR 0 5
50489: NOT
50490: OR
50491: IFFALSE 50495
// exit ;
50493: GO 50587
// if GetTaskList ( unit ) then
50495: LD_VAR 0 1
50499: PPUSH
50500: CALL_OW 437
50504: IFFALSE 50587
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50506: LD_STRING e
50508: PUSH
50509: LD_VAR 0 1
50513: PPUSH
50514: CALL_OW 437
50518: PUSH
50519: LD_INT 1
50521: ARRAY
50522: PUSH
50523: LD_INT 1
50525: ARRAY
50526: EQUAL
50527: PUSH
50528: LD_VAR 0 4
50532: PUSH
50533: LD_VAR 0 1
50537: PPUSH
50538: CALL_OW 437
50542: PUSH
50543: LD_INT 1
50545: ARRAY
50546: PUSH
50547: LD_INT 2
50549: ARRAY
50550: EQUAL
50551: AND
50552: PUSH
50553: LD_VAR 0 5
50557: PUSH
50558: LD_VAR 0 1
50562: PPUSH
50563: CALL_OW 437
50567: PUSH
50568: LD_INT 1
50570: ARRAY
50571: PUSH
50572: LD_INT 3
50574: ARRAY
50575: EQUAL
50576: AND
50577: IFFALSE 50587
// result := true end ;
50579: LD_ADDR_VAR 0 3
50583: PUSH
50584: LD_INT 1
50586: ST_TO_ADDR
// end ;
50587: LD_VAR 0 3
50591: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
50592: LD_INT 0
50594: PPUSH
// result := false ;
50595: LD_ADDR_VAR 0 4
50599: PUSH
50600: LD_INT 0
50602: ST_TO_ADDR
// if GetTaskList ( unit ) then
50603: LD_VAR 0 1
50607: PPUSH
50608: CALL_OW 437
50612: IFFALSE 50695
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50614: LD_STRING M
50616: PUSH
50617: LD_VAR 0 1
50621: PPUSH
50622: CALL_OW 437
50626: PUSH
50627: LD_INT 1
50629: ARRAY
50630: PUSH
50631: LD_INT 1
50633: ARRAY
50634: EQUAL
50635: PUSH
50636: LD_VAR 0 2
50640: PUSH
50641: LD_VAR 0 1
50645: PPUSH
50646: CALL_OW 437
50650: PUSH
50651: LD_INT 1
50653: ARRAY
50654: PUSH
50655: LD_INT 2
50657: ARRAY
50658: EQUAL
50659: AND
50660: PUSH
50661: LD_VAR 0 3
50665: PUSH
50666: LD_VAR 0 1
50670: PPUSH
50671: CALL_OW 437
50675: PUSH
50676: LD_INT 1
50678: ARRAY
50679: PUSH
50680: LD_INT 3
50682: ARRAY
50683: EQUAL
50684: AND
50685: IFFALSE 50695
// result := true ;
50687: LD_ADDR_VAR 0 4
50691: PUSH
50692: LD_INT 1
50694: ST_TO_ADDR
// end ; end ;
50695: LD_VAR 0 4
50699: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
50700: LD_INT 0
50702: PPUSH
50703: PPUSH
50704: PPUSH
50705: PPUSH
// if not unit or not area then
50706: LD_VAR 0 1
50710: NOT
50711: PUSH
50712: LD_VAR 0 2
50716: NOT
50717: OR
50718: IFFALSE 50722
// exit ;
50720: GO 50886
// tmp := AreaToList ( area , i ) ;
50722: LD_ADDR_VAR 0 6
50726: PUSH
50727: LD_VAR 0 2
50731: PPUSH
50732: LD_VAR 0 5
50736: PPUSH
50737: CALL_OW 517
50741: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
50742: LD_ADDR_VAR 0 5
50746: PUSH
50747: DOUBLE
50748: LD_INT 1
50750: DEC
50751: ST_TO_ADDR
50752: LD_VAR 0 6
50756: PUSH
50757: LD_INT 1
50759: ARRAY
50760: PUSH
50761: FOR_TO
50762: IFFALSE 50884
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
50764: LD_ADDR_VAR 0 7
50768: PUSH
50769: LD_VAR 0 6
50773: PUSH
50774: LD_INT 1
50776: ARRAY
50777: PUSH
50778: LD_VAR 0 5
50782: ARRAY
50783: PUSH
50784: LD_VAR 0 6
50788: PUSH
50789: LD_INT 2
50791: ARRAY
50792: PUSH
50793: LD_VAR 0 5
50797: ARRAY
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
50803: LD_VAR 0 7
50807: PUSH
50808: LD_INT 1
50810: ARRAY
50811: PPUSH
50812: LD_VAR 0 7
50816: PUSH
50817: LD_INT 2
50819: ARRAY
50820: PPUSH
50821: CALL_OW 428
50825: PUSH
50826: LD_INT 0
50828: EQUAL
50829: IFFALSE 50882
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
50831: LD_VAR 0 1
50835: PPUSH
50836: LD_VAR 0 7
50840: PUSH
50841: LD_INT 1
50843: ARRAY
50844: PPUSH
50845: LD_VAR 0 7
50849: PUSH
50850: LD_INT 2
50852: ARRAY
50853: PPUSH
50854: LD_VAR 0 3
50858: PPUSH
50859: CALL_OW 48
// result := IsPlaced ( unit ) ;
50863: LD_ADDR_VAR 0 4
50867: PUSH
50868: LD_VAR 0 1
50872: PPUSH
50873: CALL_OW 305
50877: ST_TO_ADDR
// exit ;
50878: POP
50879: POP
50880: GO 50886
// end ; end ;
50882: GO 50761
50884: POP
50885: POP
// end ;
50886: LD_VAR 0 4
50890: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
50891: LD_INT 0
50893: PPUSH
50894: PPUSH
50895: PPUSH
// if not side or side > 8 then
50896: LD_VAR 0 1
50900: NOT
50901: PUSH
50902: LD_VAR 0 1
50906: PUSH
50907: LD_INT 8
50909: GREATER
50910: OR
50911: IFFALSE 50915
// exit ;
50913: GO 51102
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
50915: LD_ADDR_VAR 0 4
50919: PUSH
50920: LD_INT 22
50922: PUSH
50923: LD_VAR 0 1
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 21
50934: PUSH
50935: LD_INT 3
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PPUSH
50946: CALL_OW 69
50950: ST_TO_ADDR
// if not tmp then
50951: LD_VAR 0 4
50955: NOT
50956: IFFALSE 50960
// exit ;
50958: GO 51102
// enable_addtolog := true ;
50960: LD_ADDR_OWVAR 81
50964: PUSH
50965: LD_INT 1
50967: ST_TO_ADDR
// AddToLog ( [ ) ;
50968: LD_STRING [
50970: PPUSH
50971: CALL_OW 561
// for i in tmp do
50975: LD_ADDR_VAR 0 3
50979: PUSH
50980: LD_VAR 0 4
50984: PUSH
50985: FOR_IN
50986: IFFALSE 51093
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
50988: LD_STRING [
50990: PUSH
50991: LD_VAR 0 3
50995: PPUSH
50996: CALL_OW 266
51000: STR
51001: PUSH
51002: LD_STRING , 
51004: STR
51005: PUSH
51006: LD_VAR 0 3
51010: PPUSH
51011: CALL_OW 250
51015: STR
51016: PUSH
51017: LD_STRING , 
51019: STR
51020: PUSH
51021: LD_VAR 0 3
51025: PPUSH
51026: CALL_OW 251
51030: STR
51031: PUSH
51032: LD_STRING , 
51034: STR
51035: PUSH
51036: LD_VAR 0 3
51040: PPUSH
51041: CALL_OW 254
51045: STR
51046: PUSH
51047: LD_STRING , 
51049: STR
51050: PUSH
51051: LD_VAR 0 3
51055: PPUSH
51056: LD_INT 1
51058: PPUSH
51059: CALL_OW 268
51063: STR
51064: PUSH
51065: LD_STRING , 
51067: STR
51068: PUSH
51069: LD_VAR 0 3
51073: PPUSH
51074: LD_INT 2
51076: PPUSH
51077: CALL_OW 268
51081: STR
51082: PUSH
51083: LD_STRING ],
51085: STR
51086: PPUSH
51087: CALL_OW 561
// end ;
51091: GO 50985
51093: POP
51094: POP
// AddToLog ( ]; ) ;
51095: LD_STRING ];
51097: PPUSH
51098: CALL_OW 561
// end ;
51102: LD_VAR 0 2
51106: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
51107: LD_INT 0
51109: PPUSH
51110: PPUSH
51111: PPUSH
51112: PPUSH
51113: PPUSH
// if not area or not rate or not max then
51114: LD_VAR 0 1
51118: NOT
51119: PUSH
51120: LD_VAR 0 2
51124: NOT
51125: OR
51126: PUSH
51127: LD_VAR 0 4
51131: NOT
51132: OR
51133: IFFALSE 51137
// exit ;
51135: GO 51326
// while 1 do
51137: LD_INT 1
51139: IFFALSE 51326
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
51141: LD_ADDR_VAR 0 9
51145: PUSH
51146: LD_VAR 0 1
51150: PPUSH
51151: LD_INT 1
51153: PPUSH
51154: CALL_OW 287
51158: PUSH
51159: LD_INT 10
51161: MUL
51162: ST_TO_ADDR
// r := rate / 10 ;
51163: LD_ADDR_VAR 0 7
51167: PUSH
51168: LD_VAR 0 2
51172: PUSH
51173: LD_INT 10
51175: DIVREAL
51176: ST_TO_ADDR
// time := 1 1$00 ;
51177: LD_ADDR_VAR 0 8
51181: PUSH
51182: LD_INT 2100
51184: ST_TO_ADDR
// if amount < min then
51185: LD_VAR 0 9
51189: PUSH
51190: LD_VAR 0 3
51194: LESS
51195: IFFALSE 51213
// r := r * 2 else
51197: LD_ADDR_VAR 0 7
51201: PUSH
51202: LD_VAR 0 7
51206: PUSH
51207: LD_INT 2
51209: MUL
51210: ST_TO_ADDR
51211: GO 51239
// if amount > max then
51213: LD_VAR 0 9
51217: PUSH
51218: LD_VAR 0 4
51222: GREATER
51223: IFFALSE 51239
// r := r / 2 ;
51225: LD_ADDR_VAR 0 7
51229: PUSH
51230: LD_VAR 0 7
51234: PUSH
51235: LD_INT 2
51237: DIVREAL
51238: ST_TO_ADDR
// time := time / r ;
51239: LD_ADDR_VAR 0 8
51243: PUSH
51244: LD_VAR 0 8
51248: PUSH
51249: LD_VAR 0 7
51253: DIVREAL
51254: ST_TO_ADDR
// if time < 0 then
51255: LD_VAR 0 8
51259: PUSH
51260: LD_INT 0
51262: LESS
51263: IFFALSE 51280
// time := time * - 1 ;
51265: LD_ADDR_VAR 0 8
51269: PUSH
51270: LD_VAR 0 8
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: MUL
51279: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
51280: LD_VAR 0 8
51284: PUSH
51285: LD_INT 35
51287: PPUSH
51288: LD_INT 875
51290: PPUSH
51291: CALL_OW 12
51295: PLUS
51296: PPUSH
51297: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
51301: LD_INT 1
51303: PPUSH
51304: LD_INT 5
51306: PPUSH
51307: CALL_OW 12
51311: PPUSH
51312: LD_VAR 0 1
51316: PPUSH
51317: LD_INT 1
51319: PPUSH
51320: CALL_OW 55
// end ;
51324: GO 51137
// end ;
51326: LD_VAR 0 5
51330: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
51331: LD_INT 0
51333: PPUSH
51334: PPUSH
51335: PPUSH
51336: PPUSH
51337: PPUSH
51338: PPUSH
51339: PPUSH
51340: PPUSH
// if not turrets or not factories then
51341: LD_VAR 0 1
51345: NOT
51346: PUSH
51347: LD_VAR 0 2
51351: NOT
51352: OR
51353: IFFALSE 51357
// exit ;
51355: GO 51664
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
51357: LD_ADDR_VAR 0 10
51361: PUSH
51362: LD_INT 5
51364: PUSH
51365: LD_INT 6
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: LD_INT 4
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 3
51384: PUSH
51385: LD_INT 5
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 24
51399: PUSH
51400: LD_INT 25
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 23
51409: PUSH
51410: LD_INT 27
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 42
51423: PUSH
51424: LD_INT 43
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 44
51433: PUSH
51434: LD_INT 46
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 45
51443: PUSH
51444: LD_INT 47
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: LIST
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: LIST
51460: ST_TO_ADDR
// result := [ ] ;
51461: LD_ADDR_VAR 0 3
51465: PUSH
51466: EMPTY
51467: ST_TO_ADDR
// for i in turrets do
51468: LD_ADDR_VAR 0 4
51472: PUSH
51473: LD_VAR 0 1
51477: PUSH
51478: FOR_IN
51479: IFFALSE 51662
// begin nat := GetNation ( i ) ;
51481: LD_ADDR_VAR 0 7
51485: PUSH
51486: LD_VAR 0 4
51490: PPUSH
51491: CALL_OW 248
51495: ST_TO_ADDR
// weapon := 0 ;
51496: LD_ADDR_VAR 0 8
51500: PUSH
51501: LD_INT 0
51503: ST_TO_ADDR
// if not nat then
51504: LD_VAR 0 7
51508: NOT
51509: IFFALSE 51513
// continue ;
51511: GO 51478
// for j in list [ nat ] do
51513: LD_ADDR_VAR 0 5
51517: PUSH
51518: LD_VAR 0 10
51522: PUSH
51523: LD_VAR 0 7
51527: ARRAY
51528: PUSH
51529: FOR_IN
51530: IFFALSE 51571
// if GetBWeapon ( i ) = j [ 1 ] then
51532: LD_VAR 0 4
51536: PPUSH
51537: CALL_OW 269
51541: PUSH
51542: LD_VAR 0 5
51546: PUSH
51547: LD_INT 1
51549: ARRAY
51550: EQUAL
51551: IFFALSE 51569
// begin weapon := j [ 2 ] ;
51553: LD_ADDR_VAR 0 8
51557: PUSH
51558: LD_VAR 0 5
51562: PUSH
51563: LD_INT 2
51565: ARRAY
51566: ST_TO_ADDR
// break ;
51567: GO 51571
// end ;
51569: GO 51529
51571: POP
51572: POP
// if not weapon then
51573: LD_VAR 0 8
51577: NOT
51578: IFFALSE 51582
// continue ;
51580: GO 51478
// for k in factories do
51582: LD_ADDR_VAR 0 6
51586: PUSH
51587: LD_VAR 0 2
51591: PUSH
51592: FOR_IN
51593: IFFALSE 51658
// begin weapons := AvailableWeaponList ( k ) ;
51595: LD_ADDR_VAR 0 9
51599: PUSH
51600: LD_VAR 0 6
51604: PPUSH
51605: CALL_OW 478
51609: ST_TO_ADDR
// if not weapons then
51610: LD_VAR 0 9
51614: NOT
51615: IFFALSE 51619
// continue ;
51617: GO 51592
// if weapon in weapons then
51619: LD_VAR 0 8
51623: PUSH
51624: LD_VAR 0 9
51628: IN
51629: IFFALSE 51656
// begin result := [ i , weapon ] ;
51631: LD_ADDR_VAR 0 3
51635: PUSH
51636: LD_VAR 0 4
51640: PUSH
51641: LD_VAR 0 8
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: ST_TO_ADDR
// exit ;
51650: POP
51651: POP
51652: POP
51653: POP
51654: GO 51664
// end ; end ;
51656: GO 51592
51658: POP
51659: POP
// end ;
51660: GO 51478
51662: POP
51663: POP
// end ;
51664: LD_VAR 0 3
51668: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
51669: LD_INT 0
51671: PPUSH
// if not side or side > 8 then
51672: LD_VAR 0 3
51676: NOT
51677: PUSH
51678: LD_VAR 0 3
51682: PUSH
51683: LD_INT 8
51685: GREATER
51686: OR
51687: IFFALSE 51691
// exit ;
51689: GO 51750
// if not range then
51691: LD_VAR 0 4
51695: NOT
51696: IFFALSE 51707
// range := - 12 ;
51698: LD_ADDR_VAR 0 4
51702: PUSH
51703: LD_INT 12
51705: NEG
51706: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
51707: LD_VAR 0 1
51711: PPUSH
51712: LD_VAR 0 2
51716: PPUSH
51717: LD_VAR 0 3
51721: PPUSH
51722: LD_VAR 0 4
51726: PPUSH
51727: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
51731: LD_VAR 0 1
51735: PPUSH
51736: LD_VAR 0 2
51740: PPUSH
51741: LD_VAR 0 3
51745: PPUSH
51746: CALL_OW 331
// end ;
51750: LD_VAR 0 5
51754: RET
// export function Video ( mode ) ; begin
51755: LD_INT 0
51757: PPUSH
// ingame_video = mode ;
51758: LD_ADDR_OWVAR 52
51762: PUSH
51763: LD_VAR 0 1
51767: ST_TO_ADDR
// interface_hidden = mode ;
51768: LD_ADDR_OWVAR 54
51772: PUSH
51773: LD_VAR 0 1
51777: ST_TO_ADDR
// end ;
51778: LD_VAR 0 2
51782: RET
// export function Join ( array , element ) ; begin
51783: LD_INT 0
51785: PPUSH
// result := Replace ( array , array + 1 , element ) ;
51786: LD_ADDR_VAR 0 3
51790: PUSH
51791: LD_VAR 0 1
51795: PPUSH
51796: LD_VAR 0 1
51800: PUSH
51801: LD_INT 1
51803: PLUS
51804: PPUSH
51805: LD_VAR 0 2
51809: PPUSH
51810: CALL_OW 1
51814: ST_TO_ADDR
// end ;
51815: LD_VAR 0 3
51819: RET
// export function JoinUnion ( array , element ) ; begin
51820: LD_INT 0
51822: PPUSH
// result := array union element ;
51823: LD_ADDR_VAR 0 3
51827: PUSH
51828: LD_VAR 0 1
51832: PUSH
51833: LD_VAR 0 2
51837: UNION
51838: ST_TO_ADDR
// end ;
51839: LD_VAR 0 3
51843: RET
// export function GetBehemoths ( side ) ; begin
51844: LD_INT 0
51846: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
51847: LD_ADDR_VAR 0 2
51851: PUSH
51852: LD_INT 22
51854: PUSH
51855: LD_VAR 0 1
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 31
51866: PUSH
51867: LD_INT 25
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PPUSH
51878: CALL_OW 69
51882: ST_TO_ADDR
// end ;
51883: LD_VAR 0 2
51887: RET
// export function Shuffle ( array ) ; var i , index ; begin
51888: LD_INT 0
51890: PPUSH
51891: PPUSH
51892: PPUSH
// result := [ ] ;
51893: LD_ADDR_VAR 0 2
51897: PUSH
51898: EMPTY
51899: ST_TO_ADDR
// if not array then
51900: LD_VAR 0 1
51904: NOT
51905: IFFALSE 51909
// exit ;
51907: GO 52008
// Randomize ;
51909: CALL_OW 10
// for i = array downto 1 do
51913: LD_ADDR_VAR 0 3
51917: PUSH
51918: DOUBLE
51919: LD_VAR 0 1
51923: INC
51924: ST_TO_ADDR
51925: LD_INT 1
51927: PUSH
51928: FOR_DOWNTO
51929: IFFALSE 52006
// begin index := rand ( 1 , array ) ;
51931: LD_ADDR_VAR 0 4
51935: PUSH
51936: LD_INT 1
51938: PPUSH
51939: LD_VAR 0 1
51943: PPUSH
51944: CALL_OW 12
51948: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
51949: LD_ADDR_VAR 0 2
51953: PUSH
51954: LD_VAR 0 2
51958: PPUSH
51959: LD_VAR 0 2
51963: PUSH
51964: LD_INT 1
51966: PLUS
51967: PPUSH
51968: LD_VAR 0 1
51972: PUSH
51973: LD_VAR 0 4
51977: ARRAY
51978: PPUSH
51979: CALL_OW 2
51983: ST_TO_ADDR
// array := Delete ( array , index ) ;
51984: LD_ADDR_VAR 0 1
51988: PUSH
51989: LD_VAR 0 1
51993: PPUSH
51994: LD_VAR 0 4
51998: PPUSH
51999: CALL_OW 3
52003: ST_TO_ADDR
// end ;
52004: GO 51928
52006: POP
52007: POP
// end ;
52008: LD_VAR 0 2
52012: RET
// export function GetBaseMaterials ( base ) ; begin
52013: LD_INT 0
52015: PPUSH
// result := [ 0 , 0 , 0 ] ;
52016: LD_ADDR_VAR 0 2
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: LIST
52034: ST_TO_ADDR
// if not base then
52035: LD_VAR 0 1
52039: NOT
52040: IFFALSE 52044
// exit ;
52042: GO 52093
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
52044: LD_ADDR_VAR 0 2
52048: PUSH
52049: LD_VAR 0 1
52053: PPUSH
52054: LD_INT 1
52056: PPUSH
52057: CALL_OW 275
52061: PUSH
52062: LD_VAR 0 1
52066: PPUSH
52067: LD_INT 2
52069: PPUSH
52070: CALL_OW 275
52074: PUSH
52075: LD_VAR 0 1
52079: PPUSH
52080: LD_INT 3
52082: PPUSH
52083: CALL_OW 275
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: LIST
52092: ST_TO_ADDR
// end ;
52093: LD_VAR 0 2
52097: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
52098: LD_INT 0
52100: PPUSH
52101: PPUSH
// result := array ;
52102: LD_ADDR_VAR 0 3
52106: PUSH
52107: LD_VAR 0 1
52111: ST_TO_ADDR
// if size >= result then
52112: LD_VAR 0 2
52116: PUSH
52117: LD_VAR 0 3
52121: GREATEREQUAL
52122: IFFALSE 52126
// exit ;
52124: GO 52176
// if size then
52126: LD_VAR 0 2
52130: IFFALSE 52176
// for i := array downto size do
52132: LD_ADDR_VAR 0 4
52136: PUSH
52137: DOUBLE
52138: LD_VAR 0 1
52142: INC
52143: ST_TO_ADDR
52144: LD_VAR 0 2
52148: PUSH
52149: FOR_DOWNTO
52150: IFFALSE 52174
// result := Delete ( result , result ) ;
52152: LD_ADDR_VAR 0 3
52156: PUSH
52157: LD_VAR 0 3
52161: PPUSH
52162: LD_VAR 0 3
52166: PPUSH
52167: CALL_OW 3
52171: ST_TO_ADDR
52172: GO 52149
52174: POP
52175: POP
// end ;
52176: LD_VAR 0 3
52180: RET
// export function ComExit ( unit ) ; var tmp ; begin
52181: LD_INT 0
52183: PPUSH
52184: PPUSH
// if not IsInUnit ( unit ) then
52185: LD_VAR 0 1
52189: PPUSH
52190: CALL_OW 310
52194: NOT
52195: IFFALSE 52199
// exit ;
52197: GO 52259
// tmp := IsInUnit ( unit ) ;
52199: LD_ADDR_VAR 0 3
52203: PUSH
52204: LD_VAR 0 1
52208: PPUSH
52209: CALL_OW 310
52213: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
52214: LD_VAR 0 3
52218: PPUSH
52219: CALL_OW 247
52223: PUSH
52224: LD_INT 2
52226: EQUAL
52227: IFFALSE 52240
// ComExitVehicle ( unit ) else
52229: LD_VAR 0 1
52233: PPUSH
52234: CALL_OW 121
52238: GO 52249
// ComExitBuilding ( unit ) ;
52240: LD_VAR 0 1
52244: PPUSH
52245: CALL_OW 122
// result := tmp ;
52249: LD_ADDR_VAR 0 2
52253: PUSH
52254: LD_VAR 0 3
52258: ST_TO_ADDR
// end ;
52259: LD_VAR 0 2
52263: RET
// export function ComExitAll ( units ) ; var i ; begin
52264: LD_INT 0
52266: PPUSH
52267: PPUSH
// if not units then
52268: LD_VAR 0 1
52272: NOT
52273: IFFALSE 52277
// exit ;
52275: GO 52303
// for i in units do
52277: LD_ADDR_VAR 0 3
52281: PUSH
52282: LD_VAR 0 1
52286: PUSH
52287: FOR_IN
52288: IFFALSE 52301
// ComExit ( i ) ;
52290: LD_VAR 0 3
52294: PPUSH
52295: CALL 52181 0 1
52299: GO 52287
52301: POP
52302: POP
// end ;
52303: LD_VAR 0 2
52307: RET
// export function ResetHc ; begin
52308: LD_INT 0
52310: PPUSH
// InitHc ;
52311: CALL_OW 19
// hc_importance := 0 ;
52315: LD_ADDR_OWVAR 32
52319: PUSH
52320: LD_INT 0
52322: ST_TO_ADDR
// end ;
52323: LD_VAR 0 1
52327: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
52328: LD_INT 0
52330: PPUSH
52331: PPUSH
52332: PPUSH
// _x := ( x1 + x2 ) div 2 ;
52333: LD_ADDR_VAR 0 6
52337: PUSH
52338: LD_VAR 0 1
52342: PUSH
52343: LD_VAR 0 3
52347: PLUS
52348: PUSH
52349: LD_INT 2
52351: DIV
52352: ST_TO_ADDR
// if _x < 0 then
52353: LD_VAR 0 6
52357: PUSH
52358: LD_INT 0
52360: LESS
52361: IFFALSE 52378
// _x := _x * - 1 ;
52363: LD_ADDR_VAR 0 6
52367: PUSH
52368: LD_VAR 0 6
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: MUL
52377: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
52378: LD_ADDR_VAR 0 7
52382: PUSH
52383: LD_VAR 0 2
52387: PUSH
52388: LD_VAR 0 4
52392: PLUS
52393: PUSH
52394: LD_INT 2
52396: DIV
52397: ST_TO_ADDR
// if _y < 0 then
52398: LD_VAR 0 7
52402: PUSH
52403: LD_INT 0
52405: LESS
52406: IFFALSE 52423
// _y := _y * - 1 ;
52408: LD_ADDR_VAR 0 7
52412: PUSH
52413: LD_VAR 0 7
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: MUL
52422: ST_TO_ADDR
// result := [ _x , _y ] ;
52423: LD_ADDR_VAR 0 5
52427: PUSH
52428: LD_VAR 0 6
52432: PUSH
52433: LD_VAR 0 7
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: ST_TO_ADDR
// end ;
52442: LD_VAR 0 5
52446: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
52447: LD_INT 0
52449: PPUSH
52450: PPUSH
52451: PPUSH
52452: PPUSH
// task := GetTaskList ( unit ) ;
52453: LD_ADDR_VAR 0 7
52457: PUSH
52458: LD_VAR 0 1
52462: PPUSH
52463: CALL_OW 437
52467: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
52468: LD_VAR 0 7
52472: NOT
52473: PUSH
52474: LD_VAR 0 1
52478: PPUSH
52479: LD_VAR 0 2
52483: PPUSH
52484: CALL_OW 308
52488: NOT
52489: AND
52490: IFFALSE 52494
// exit ;
52492: GO 52612
// if IsInArea ( unit , area ) then
52494: LD_VAR 0 1
52498: PPUSH
52499: LD_VAR 0 2
52503: PPUSH
52504: CALL_OW 308
52508: IFFALSE 52526
// begin ComMoveToArea ( unit , goAway ) ;
52510: LD_VAR 0 1
52514: PPUSH
52515: LD_VAR 0 3
52519: PPUSH
52520: CALL_OW 113
// exit ;
52524: GO 52612
// end ; if task [ 1 ] [ 1 ] <> M then
52526: LD_VAR 0 7
52530: PUSH
52531: LD_INT 1
52533: ARRAY
52534: PUSH
52535: LD_INT 1
52537: ARRAY
52538: PUSH
52539: LD_STRING M
52541: NONEQUAL
52542: IFFALSE 52546
// exit ;
52544: GO 52612
// x := task [ 1 ] [ 2 ] ;
52546: LD_ADDR_VAR 0 5
52550: PUSH
52551: LD_VAR 0 7
52555: PUSH
52556: LD_INT 1
52558: ARRAY
52559: PUSH
52560: LD_INT 2
52562: ARRAY
52563: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
52564: LD_ADDR_VAR 0 6
52568: PUSH
52569: LD_VAR 0 7
52573: PUSH
52574: LD_INT 1
52576: ARRAY
52577: PUSH
52578: LD_INT 3
52580: ARRAY
52581: ST_TO_ADDR
// if InArea ( x , y , area ) then
52582: LD_VAR 0 5
52586: PPUSH
52587: LD_VAR 0 6
52591: PPUSH
52592: LD_VAR 0 2
52596: PPUSH
52597: CALL_OW 309
52601: IFFALSE 52612
// ComStop ( unit ) ;
52603: LD_VAR 0 1
52607: PPUSH
52608: CALL_OW 141
// end ;
52612: LD_VAR 0 4
52616: RET
// export function Abs ( value ) ; begin
52617: LD_INT 0
52619: PPUSH
// result := value ;
52620: LD_ADDR_VAR 0 2
52624: PUSH
52625: LD_VAR 0 1
52629: ST_TO_ADDR
// if value < 0 then
52630: LD_VAR 0 1
52634: PUSH
52635: LD_INT 0
52637: LESS
52638: IFFALSE 52655
// result := value * - 1 ;
52640: LD_ADDR_VAR 0 2
52644: PUSH
52645: LD_VAR 0 1
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: MUL
52654: ST_TO_ADDR
// end ;
52655: LD_VAR 0 2
52659: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
52660: LD_INT 0
52662: PPUSH
52663: PPUSH
52664: PPUSH
52665: PPUSH
52666: PPUSH
52667: PPUSH
52668: PPUSH
52669: PPUSH
// if not unit or not building then
52670: LD_VAR 0 1
52674: NOT
52675: PUSH
52676: LD_VAR 0 2
52680: NOT
52681: OR
52682: IFFALSE 52686
// exit ;
52684: GO 52912
// x := GetX ( building ) ;
52686: LD_ADDR_VAR 0 4
52690: PUSH
52691: LD_VAR 0 2
52695: PPUSH
52696: CALL_OW 250
52700: ST_TO_ADDR
// y := GetY ( building ) ;
52701: LD_ADDR_VAR 0 6
52705: PUSH
52706: LD_VAR 0 2
52710: PPUSH
52711: CALL_OW 251
52715: ST_TO_ADDR
// d := GetDir ( building ) ;
52716: LD_ADDR_VAR 0 8
52720: PUSH
52721: LD_VAR 0 2
52725: PPUSH
52726: CALL_OW 254
52730: ST_TO_ADDR
// r := 4 ;
52731: LD_ADDR_VAR 0 9
52735: PUSH
52736: LD_INT 4
52738: ST_TO_ADDR
// for i := 1 to 5 do
52739: LD_ADDR_VAR 0 10
52743: PUSH
52744: DOUBLE
52745: LD_INT 1
52747: DEC
52748: ST_TO_ADDR
52749: LD_INT 5
52751: PUSH
52752: FOR_TO
52753: IFFALSE 52910
// begin _x := ShiftX ( x , d , r + i ) ;
52755: LD_ADDR_VAR 0 5
52759: PUSH
52760: LD_VAR 0 4
52764: PPUSH
52765: LD_VAR 0 8
52769: PPUSH
52770: LD_VAR 0 9
52774: PUSH
52775: LD_VAR 0 10
52779: PLUS
52780: PPUSH
52781: CALL_OW 272
52785: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
52786: LD_ADDR_VAR 0 7
52790: PUSH
52791: LD_VAR 0 6
52795: PPUSH
52796: LD_VAR 0 8
52800: PPUSH
52801: LD_VAR 0 9
52805: PUSH
52806: LD_VAR 0 10
52810: PLUS
52811: PPUSH
52812: CALL_OW 273
52816: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
52817: LD_VAR 0 5
52821: PPUSH
52822: LD_VAR 0 7
52826: PPUSH
52827: CALL_OW 488
52831: PUSH
52832: LD_VAR 0 5
52836: PPUSH
52837: LD_VAR 0 7
52841: PPUSH
52842: CALL_OW 428
52846: PPUSH
52847: CALL_OW 247
52851: PUSH
52852: LD_INT 3
52854: PUSH
52855: LD_INT 2
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: IN
52862: NOT
52863: AND
52864: IFFALSE 52908
// begin ComMoveXY ( unit , _x , _y ) ;
52866: LD_VAR 0 1
52870: PPUSH
52871: LD_VAR 0 5
52875: PPUSH
52876: LD_VAR 0 7
52880: PPUSH
52881: CALL_OW 111
// result := [ _x , _y ] ;
52885: LD_ADDR_VAR 0 3
52889: PUSH
52890: LD_VAR 0 5
52894: PUSH
52895: LD_VAR 0 7
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: ST_TO_ADDR
// exit ;
52904: POP
52905: POP
52906: GO 52912
// end ; end ;
52908: GO 52752
52910: POP
52911: POP
// end ;
52912: LD_VAR 0 3
52916: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
52917: LD_INT 0
52919: PPUSH
52920: PPUSH
52921: PPUSH
// result := 0 ;
52922: LD_ADDR_VAR 0 3
52926: PUSH
52927: LD_INT 0
52929: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
52930: LD_VAR 0 1
52934: PUSH
52935: LD_INT 0
52937: LESS
52938: PUSH
52939: LD_VAR 0 1
52943: PUSH
52944: LD_INT 8
52946: GREATER
52947: OR
52948: PUSH
52949: LD_VAR 0 2
52953: PUSH
52954: LD_INT 0
52956: LESS
52957: OR
52958: PUSH
52959: LD_VAR 0 2
52963: PUSH
52964: LD_INT 8
52966: GREATER
52967: OR
52968: IFFALSE 52972
// exit ;
52970: GO 53047
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
52972: LD_ADDR_VAR 0 4
52976: PUSH
52977: LD_INT 22
52979: PUSH
52980: LD_VAR 0 2
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PPUSH
52989: CALL_OW 69
52993: PUSH
52994: FOR_IN
52995: IFFALSE 53045
// begin un := UnitShoot ( i ) ;
52997: LD_ADDR_VAR 0 5
53001: PUSH
53002: LD_VAR 0 4
53006: PPUSH
53007: CALL_OW 504
53011: ST_TO_ADDR
// if GetSide ( un ) = side1 then
53012: LD_VAR 0 5
53016: PPUSH
53017: CALL_OW 255
53021: PUSH
53022: LD_VAR 0 1
53026: EQUAL
53027: IFFALSE 53043
// begin result := un ;
53029: LD_ADDR_VAR 0 3
53033: PUSH
53034: LD_VAR 0 5
53038: ST_TO_ADDR
// exit ;
53039: POP
53040: POP
53041: GO 53047
// end ; end ;
53043: GO 52994
53045: POP
53046: POP
// end ;
53047: LD_VAR 0 3
53051: RET
// export function GetCargoBay ( units ) ; begin
53052: LD_INT 0
53054: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
53055: LD_ADDR_VAR 0 2
53059: PUSH
53060: LD_VAR 0 1
53064: PPUSH
53065: LD_INT 2
53067: PUSH
53068: LD_INT 34
53070: PUSH
53071: LD_INT 12
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 34
53080: PUSH
53081: LD_INT 51
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 34
53090: PUSH
53091: LD_INT 32
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 34
53100: PUSH
53101: LD_INT 89
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: PPUSH
53115: CALL_OW 72
53119: ST_TO_ADDR
// end ;
53120: LD_VAR 0 2
53124: RET
// export function Negate ( value ) ; begin
53125: LD_INT 0
53127: PPUSH
// result := not value ;
53128: LD_ADDR_VAR 0 2
53132: PUSH
53133: LD_VAR 0 1
53137: NOT
53138: ST_TO_ADDR
// end ;
53139: LD_VAR 0 2
53143: RET
// export function Inc ( value ) ; begin
53144: LD_INT 0
53146: PPUSH
// result := value + 1 ;
53147: LD_ADDR_VAR 0 2
53151: PUSH
53152: LD_VAR 0 1
53156: PUSH
53157: LD_INT 1
53159: PLUS
53160: ST_TO_ADDR
// end ;
53161: LD_VAR 0 2
53165: RET
// export function Dec ( value ) ; begin
53166: LD_INT 0
53168: PPUSH
// result := value - 1 ;
53169: LD_ADDR_VAR 0 2
53173: PUSH
53174: LD_VAR 0 1
53178: PUSH
53179: LD_INT 1
53181: MINUS
53182: ST_TO_ADDR
// end ;
53183: LD_VAR 0 2
53187: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
53188: LD_INT 0
53190: PPUSH
53191: PPUSH
53192: PPUSH
53193: PPUSH
53194: PPUSH
53195: PPUSH
53196: PPUSH
53197: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
53198: LD_VAR 0 1
53202: PPUSH
53203: LD_VAR 0 2
53207: PPUSH
53208: CALL_OW 488
53212: NOT
53213: PUSH
53214: LD_VAR 0 3
53218: PPUSH
53219: LD_VAR 0 4
53223: PPUSH
53224: CALL_OW 488
53228: NOT
53229: OR
53230: IFFALSE 53243
// begin result := - 1 ;
53232: LD_ADDR_VAR 0 5
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: ST_TO_ADDR
// exit ;
53241: GO 53478
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
53243: LD_ADDR_VAR 0 12
53247: PUSH
53248: LD_VAR 0 1
53252: PPUSH
53253: LD_VAR 0 2
53257: PPUSH
53258: LD_VAR 0 3
53262: PPUSH
53263: LD_VAR 0 4
53267: PPUSH
53268: CALL 52328 0 4
53272: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
53273: LD_ADDR_VAR 0 11
53277: PUSH
53278: LD_VAR 0 1
53282: PPUSH
53283: LD_VAR 0 2
53287: PPUSH
53288: LD_VAR 0 12
53292: PUSH
53293: LD_INT 1
53295: ARRAY
53296: PPUSH
53297: LD_VAR 0 12
53301: PUSH
53302: LD_INT 2
53304: ARRAY
53305: PPUSH
53306: CALL_OW 298
53310: ST_TO_ADDR
// distance := 9999 ;
53311: LD_ADDR_VAR 0 10
53315: PUSH
53316: LD_INT 9999
53318: ST_TO_ADDR
// for i := 0 to 5 do
53319: LD_ADDR_VAR 0 6
53323: PUSH
53324: DOUBLE
53325: LD_INT 0
53327: DEC
53328: ST_TO_ADDR
53329: LD_INT 5
53331: PUSH
53332: FOR_TO
53333: IFFALSE 53476
// begin _x := ShiftX ( x1 , i , centerDist ) ;
53335: LD_ADDR_VAR 0 7
53339: PUSH
53340: LD_VAR 0 1
53344: PPUSH
53345: LD_VAR 0 6
53349: PPUSH
53350: LD_VAR 0 11
53354: PPUSH
53355: CALL_OW 272
53359: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
53360: LD_ADDR_VAR 0 8
53364: PUSH
53365: LD_VAR 0 2
53369: PPUSH
53370: LD_VAR 0 6
53374: PPUSH
53375: LD_VAR 0 11
53379: PPUSH
53380: CALL_OW 273
53384: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
53385: LD_VAR 0 7
53389: PPUSH
53390: LD_VAR 0 8
53394: PPUSH
53395: CALL_OW 488
53399: NOT
53400: IFFALSE 53404
// continue ;
53402: GO 53332
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
53404: LD_ADDR_VAR 0 9
53408: PUSH
53409: LD_VAR 0 12
53413: PUSH
53414: LD_INT 1
53416: ARRAY
53417: PPUSH
53418: LD_VAR 0 12
53422: PUSH
53423: LD_INT 2
53425: ARRAY
53426: PPUSH
53427: LD_VAR 0 7
53431: PPUSH
53432: LD_VAR 0 8
53436: PPUSH
53437: CALL_OW 298
53441: ST_TO_ADDR
// if tmp < distance then
53442: LD_VAR 0 9
53446: PUSH
53447: LD_VAR 0 10
53451: LESS
53452: IFFALSE 53474
// begin result := i ;
53454: LD_ADDR_VAR 0 5
53458: PUSH
53459: LD_VAR 0 6
53463: ST_TO_ADDR
// distance := tmp ;
53464: LD_ADDR_VAR 0 10
53468: PUSH
53469: LD_VAR 0 9
53473: ST_TO_ADDR
// end ; end ;
53474: GO 53332
53476: POP
53477: POP
// end ;
53478: LD_VAR 0 5
53482: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53483: LD_INT 0
53485: PPUSH
53486: PPUSH
// if not driver or not IsInUnit ( driver ) then
53487: LD_VAR 0 1
53491: NOT
53492: PUSH
53493: LD_VAR 0 1
53497: PPUSH
53498: CALL_OW 310
53502: NOT
53503: OR
53504: IFFALSE 53508
// exit ;
53506: GO 53598
// vehicle := IsInUnit ( driver ) ;
53508: LD_ADDR_VAR 0 3
53512: PUSH
53513: LD_VAR 0 1
53517: PPUSH
53518: CALL_OW 310
53522: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53523: LD_VAR 0 1
53527: PPUSH
53528: LD_STRING \
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: PUSH
53558: LD_STRING E
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: LD_VAR 0 3
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PPUSH
53594: CALL_OW 446
// end ;
53598: LD_VAR 0 2
53602: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53603: LD_INT 0
53605: PPUSH
53606: PPUSH
// if not driver or not IsInUnit ( driver ) then
53607: LD_VAR 0 1
53611: NOT
53612: PUSH
53613: LD_VAR 0 1
53617: PPUSH
53618: CALL_OW 310
53622: NOT
53623: OR
53624: IFFALSE 53628
// exit ;
53626: GO 53718
// vehicle := IsInUnit ( driver ) ;
53628: LD_ADDR_VAR 0 3
53632: PUSH
53633: LD_VAR 0 1
53637: PPUSH
53638: CALL_OW 310
53642: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53643: LD_VAR 0 1
53647: PPUSH
53648: LD_STRING \
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: PUSH
53678: LD_STRING E
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_VAR 0 3
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PPUSH
53714: CALL_OW 447
// end ;
53718: LD_VAR 0 2
53722: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
53723: LD_INT 0
53725: PPUSH
53726: PPUSH
53727: PPUSH
// tmp := [ ] ;
53728: LD_ADDR_VAR 0 5
53732: PUSH
53733: EMPTY
53734: ST_TO_ADDR
// for i in units do
53735: LD_ADDR_VAR 0 4
53739: PUSH
53740: LD_VAR 0 1
53744: PUSH
53745: FOR_IN
53746: IFFALSE 53784
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
53748: LD_ADDR_VAR 0 5
53752: PUSH
53753: LD_VAR 0 5
53757: PPUSH
53758: LD_VAR 0 5
53762: PUSH
53763: LD_INT 1
53765: PLUS
53766: PPUSH
53767: LD_VAR 0 4
53771: PPUSH
53772: CALL_OW 256
53776: PPUSH
53777: CALL_OW 2
53781: ST_TO_ADDR
53782: GO 53745
53784: POP
53785: POP
// if not tmp then
53786: LD_VAR 0 5
53790: NOT
53791: IFFALSE 53795
// exit ;
53793: GO 53843
// if asc then
53795: LD_VAR 0 2
53799: IFFALSE 53823
// result := SortListByListAsc ( units , tmp ) else
53801: LD_ADDR_VAR 0 3
53805: PUSH
53806: LD_VAR 0 1
53810: PPUSH
53811: LD_VAR 0 5
53815: PPUSH
53816: CALL_OW 76
53820: ST_TO_ADDR
53821: GO 53843
// result := SortListByListDesc ( units , tmp ) ;
53823: LD_ADDR_VAR 0 3
53827: PUSH
53828: LD_VAR 0 1
53832: PPUSH
53833: LD_VAR 0 5
53837: PPUSH
53838: CALL_OW 77
53842: ST_TO_ADDR
// end ;
53843: LD_VAR 0 3
53847: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
53848: LD_INT 0
53850: PPUSH
53851: PPUSH
// task := GetTaskList ( mech ) ;
53852: LD_ADDR_VAR 0 4
53856: PUSH
53857: LD_VAR 0 1
53861: PPUSH
53862: CALL_OW 437
53866: ST_TO_ADDR
// if not task then
53867: LD_VAR 0 4
53871: NOT
53872: IFFALSE 53876
// exit ;
53874: GO 53918
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
53876: LD_ADDR_VAR 0 3
53880: PUSH
53881: LD_VAR 0 4
53885: PUSH
53886: LD_INT 1
53888: ARRAY
53889: PUSH
53890: LD_INT 1
53892: ARRAY
53893: PUSH
53894: LD_STRING r
53896: EQUAL
53897: PUSH
53898: LD_VAR 0 4
53902: PUSH
53903: LD_INT 1
53905: ARRAY
53906: PUSH
53907: LD_INT 4
53909: ARRAY
53910: PUSH
53911: LD_VAR 0 2
53915: EQUAL
53916: AND
53917: ST_TO_ADDR
// end ;
53918: LD_VAR 0 3
53922: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
53923: LD_INT 0
53925: PPUSH
// SetDir ( unit , d ) ;
53926: LD_VAR 0 1
53930: PPUSH
53931: LD_VAR 0 4
53935: PPUSH
53936: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
53940: LD_VAR 0 1
53944: PPUSH
53945: LD_VAR 0 2
53949: PPUSH
53950: LD_VAR 0 3
53954: PPUSH
53955: LD_VAR 0 5
53959: PPUSH
53960: CALL_OW 48
// end ;
53964: LD_VAR 0 6
53968: RET
// export function ToNaturalNumber ( number ) ; begin
53969: LD_INT 0
53971: PPUSH
// result := number div 1 ;
53972: LD_ADDR_VAR 0 2
53976: PUSH
53977: LD_VAR 0 1
53981: PUSH
53982: LD_INT 1
53984: DIV
53985: ST_TO_ADDR
// if number < 0 then
53986: LD_VAR 0 1
53990: PUSH
53991: LD_INT 0
53993: LESS
53994: IFFALSE 54004
// result := 0 ;
53996: LD_ADDR_VAR 0 2
54000: PUSH
54001: LD_INT 0
54003: ST_TO_ADDR
// end ;
54004: LD_VAR 0 2
54008: RET
// export function SortByClass ( units , class ) ; var un ; begin
54009: LD_INT 0
54011: PPUSH
54012: PPUSH
// if not units or not class then
54013: LD_VAR 0 1
54017: NOT
54018: PUSH
54019: LD_VAR 0 2
54023: NOT
54024: OR
54025: IFFALSE 54029
// exit ;
54027: GO 54124
// result := [ ] ;
54029: LD_ADDR_VAR 0 3
54033: PUSH
54034: EMPTY
54035: ST_TO_ADDR
// for un in units do
54036: LD_ADDR_VAR 0 4
54040: PUSH
54041: LD_VAR 0 1
54045: PUSH
54046: FOR_IN
54047: IFFALSE 54122
// if GetClass ( un ) = class then
54049: LD_VAR 0 4
54053: PPUSH
54054: CALL_OW 257
54058: PUSH
54059: LD_VAR 0 2
54063: EQUAL
54064: IFFALSE 54091
// result := Insert ( result , 1 , un ) else
54066: LD_ADDR_VAR 0 3
54070: PUSH
54071: LD_VAR 0 3
54075: PPUSH
54076: LD_INT 1
54078: PPUSH
54079: LD_VAR 0 4
54083: PPUSH
54084: CALL_OW 2
54088: ST_TO_ADDR
54089: GO 54120
// result := Replace ( result , result + 1 , un ) ;
54091: LD_ADDR_VAR 0 3
54095: PUSH
54096: LD_VAR 0 3
54100: PPUSH
54101: LD_VAR 0 3
54105: PUSH
54106: LD_INT 1
54108: PLUS
54109: PPUSH
54110: LD_VAR 0 4
54114: PPUSH
54115: CALL_OW 1
54119: ST_TO_ADDR
54120: GO 54046
54122: POP
54123: POP
// end ;
54124: LD_VAR 0 3
54128: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
54129: LD_INT 0
54131: PPUSH
54132: PPUSH
54133: PPUSH
54134: PPUSH
54135: PPUSH
54136: PPUSH
54137: PPUSH
// result := [ ] ;
54138: LD_ADDR_VAR 0 4
54142: PUSH
54143: EMPTY
54144: ST_TO_ADDR
// if x - r < 0 then
54145: LD_VAR 0 1
54149: PUSH
54150: LD_VAR 0 3
54154: MINUS
54155: PUSH
54156: LD_INT 0
54158: LESS
54159: IFFALSE 54171
// min_x := 0 else
54161: LD_ADDR_VAR 0 8
54165: PUSH
54166: LD_INT 0
54168: ST_TO_ADDR
54169: GO 54187
// min_x := x - r ;
54171: LD_ADDR_VAR 0 8
54175: PUSH
54176: LD_VAR 0 1
54180: PUSH
54181: LD_VAR 0 3
54185: MINUS
54186: ST_TO_ADDR
// if y - r < 0 then
54187: LD_VAR 0 2
54191: PUSH
54192: LD_VAR 0 3
54196: MINUS
54197: PUSH
54198: LD_INT 0
54200: LESS
54201: IFFALSE 54213
// min_y := 0 else
54203: LD_ADDR_VAR 0 7
54207: PUSH
54208: LD_INT 0
54210: ST_TO_ADDR
54211: GO 54229
// min_y := y - r ;
54213: LD_ADDR_VAR 0 7
54217: PUSH
54218: LD_VAR 0 2
54222: PUSH
54223: LD_VAR 0 3
54227: MINUS
54228: ST_TO_ADDR
// max_x := x + r ;
54229: LD_ADDR_VAR 0 9
54233: PUSH
54234: LD_VAR 0 1
54238: PUSH
54239: LD_VAR 0 3
54243: PLUS
54244: ST_TO_ADDR
// max_y := y + r ;
54245: LD_ADDR_VAR 0 10
54249: PUSH
54250: LD_VAR 0 2
54254: PUSH
54255: LD_VAR 0 3
54259: PLUS
54260: ST_TO_ADDR
// for _x = min_x to max_x do
54261: LD_ADDR_VAR 0 5
54265: PUSH
54266: DOUBLE
54267: LD_VAR 0 8
54271: DEC
54272: ST_TO_ADDR
54273: LD_VAR 0 9
54277: PUSH
54278: FOR_TO
54279: IFFALSE 54380
// for _y = min_y to max_y do
54281: LD_ADDR_VAR 0 6
54285: PUSH
54286: DOUBLE
54287: LD_VAR 0 7
54291: DEC
54292: ST_TO_ADDR
54293: LD_VAR 0 10
54297: PUSH
54298: FOR_TO
54299: IFFALSE 54376
// begin if not ValidHex ( _x , _y ) then
54301: LD_VAR 0 5
54305: PPUSH
54306: LD_VAR 0 6
54310: PPUSH
54311: CALL_OW 488
54315: NOT
54316: IFFALSE 54320
// continue ;
54318: GO 54298
// if GetResourceTypeXY ( _x , _y ) then
54320: LD_VAR 0 5
54324: PPUSH
54325: LD_VAR 0 6
54329: PPUSH
54330: CALL_OW 283
54334: IFFALSE 54374
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
54336: LD_ADDR_VAR 0 4
54340: PUSH
54341: LD_VAR 0 4
54345: PPUSH
54346: LD_VAR 0 4
54350: PUSH
54351: LD_INT 1
54353: PLUS
54354: PPUSH
54355: LD_VAR 0 5
54359: PUSH
54360: LD_VAR 0 6
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PPUSH
54369: CALL_OW 1
54373: ST_TO_ADDR
// end ;
54374: GO 54298
54376: POP
54377: POP
54378: GO 54278
54380: POP
54381: POP
// end ;
54382: LD_VAR 0 4
54386: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
54387: LD_INT 0
54389: PPUSH
54390: PPUSH
54391: PPUSH
54392: PPUSH
54393: PPUSH
54394: PPUSH
54395: PPUSH
54396: PPUSH
// if not units then
54397: LD_VAR 0 1
54401: NOT
54402: IFFALSE 54406
// exit ;
54404: GO 54930
// result := UnitFilter ( units , [ f_ok ] ) ;
54406: LD_ADDR_VAR 0 3
54410: PUSH
54411: LD_VAR 0 1
54415: PPUSH
54416: LD_INT 50
54418: PUSH
54419: EMPTY
54420: LIST
54421: PPUSH
54422: CALL_OW 72
54426: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
54427: LD_ADDR_VAR 0 8
54431: PUSH
54432: LD_VAR 0 1
54436: PUSH
54437: LD_INT 1
54439: ARRAY
54440: PPUSH
54441: CALL_OW 255
54445: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
54446: LD_ADDR_VAR 0 10
54450: PUSH
54451: LD_INT 29
54453: PUSH
54454: LD_INT 91
54456: PUSH
54457: LD_INT 49
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: LIST
54464: ST_TO_ADDR
// if not result then
54465: LD_VAR 0 3
54469: NOT
54470: IFFALSE 54474
// exit ;
54472: GO 54930
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
54474: LD_ADDR_VAR 0 5
54478: PUSH
54479: LD_INT 81
54481: PUSH
54482: LD_VAR 0 8
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PPUSH
54491: CALL_OW 69
54495: ST_TO_ADDR
// for i in result do
54496: LD_ADDR_VAR 0 4
54500: PUSH
54501: LD_VAR 0 3
54505: PUSH
54506: FOR_IN
54507: IFFALSE 54928
// begin tag := GetTag ( i ) + 1 ;
54509: LD_ADDR_VAR 0 9
54513: PUSH
54514: LD_VAR 0 4
54518: PPUSH
54519: CALL_OW 110
54523: PUSH
54524: LD_INT 1
54526: PLUS
54527: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
54528: LD_ADDR_VAR 0 7
54532: PUSH
54533: LD_VAR 0 4
54537: PPUSH
54538: CALL_OW 250
54542: PPUSH
54543: LD_VAR 0 4
54547: PPUSH
54548: CALL_OW 251
54552: PPUSH
54553: LD_INT 6
54555: PPUSH
54556: CALL 54129 0 3
54560: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
54561: LD_VAR 0 4
54565: PPUSH
54566: CALL_OW 247
54570: PUSH
54571: LD_INT 2
54573: EQUAL
54574: PUSH
54575: LD_VAR 0 7
54579: AND
54580: PUSH
54581: LD_VAR 0 4
54585: PPUSH
54586: CALL_OW 264
54590: PUSH
54591: LD_VAR 0 10
54595: IN
54596: NOT
54597: AND
54598: IFFALSE 54637
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
54600: LD_VAR 0 4
54604: PPUSH
54605: LD_VAR 0 7
54609: PUSH
54610: LD_INT 1
54612: ARRAY
54613: PUSH
54614: LD_INT 1
54616: ARRAY
54617: PPUSH
54618: LD_VAR 0 7
54622: PUSH
54623: LD_INT 1
54625: ARRAY
54626: PUSH
54627: LD_INT 2
54629: ARRAY
54630: PPUSH
54631: CALL_OW 116
54635: GO 54926
// if path > tag then
54637: LD_VAR 0 2
54641: PUSH
54642: LD_VAR 0 9
54646: GREATER
54647: IFFALSE 54855
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
54649: LD_ADDR_VAR 0 6
54653: PUSH
54654: LD_VAR 0 5
54658: PPUSH
54659: LD_INT 91
54661: PUSH
54662: LD_VAR 0 4
54666: PUSH
54667: LD_INT 8
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: LIST
54674: PPUSH
54675: CALL_OW 72
54679: ST_TO_ADDR
// if nearEnemy then
54680: LD_VAR 0 6
54684: IFFALSE 54753
// begin if GetWeapon ( i ) = ru_time_lapser then
54686: LD_VAR 0 4
54690: PPUSH
54691: CALL_OW 264
54695: PUSH
54696: LD_INT 49
54698: EQUAL
54699: IFFALSE 54727
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
54701: LD_VAR 0 4
54705: PPUSH
54706: LD_VAR 0 6
54710: PPUSH
54711: LD_VAR 0 4
54715: PPUSH
54716: CALL_OW 74
54720: PPUSH
54721: CALL_OW 112
54725: GO 54751
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
54727: LD_VAR 0 4
54731: PPUSH
54732: LD_VAR 0 6
54736: PPUSH
54737: LD_VAR 0 4
54741: PPUSH
54742: CALL_OW 74
54746: PPUSH
54747: CALL_OW 115
// end else
54751: GO 54853
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
54753: LD_VAR 0 4
54757: PPUSH
54758: LD_VAR 0 2
54762: PUSH
54763: LD_VAR 0 9
54767: ARRAY
54768: PUSH
54769: LD_INT 1
54771: ARRAY
54772: PPUSH
54773: LD_VAR 0 2
54777: PUSH
54778: LD_VAR 0 9
54782: ARRAY
54783: PUSH
54784: LD_INT 2
54786: ARRAY
54787: PPUSH
54788: CALL_OW 297
54792: PUSH
54793: LD_INT 6
54795: GREATER
54796: IFFALSE 54839
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
54798: LD_VAR 0 4
54802: PPUSH
54803: LD_VAR 0 2
54807: PUSH
54808: LD_VAR 0 9
54812: ARRAY
54813: PUSH
54814: LD_INT 1
54816: ARRAY
54817: PPUSH
54818: LD_VAR 0 2
54822: PUSH
54823: LD_VAR 0 9
54827: ARRAY
54828: PUSH
54829: LD_INT 2
54831: ARRAY
54832: PPUSH
54833: CALL_OW 114
54837: GO 54853
// SetTag ( i , tag ) ;
54839: LD_VAR 0 4
54843: PPUSH
54844: LD_VAR 0 9
54848: PPUSH
54849: CALL_OW 109
// end else
54853: GO 54926
// if enemy then
54855: LD_VAR 0 5
54859: IFFALSE 54926
// begin if GetWeapon ( i ) = ru_time_lapser then
54861: LD_VAR 0 4
54865: PPUSH
54866: CALL_OW 264
54870: PUSH
54871: LD_INT 49
54873: EQUAL
54874: IFFALSE 54902
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
54876: LD_VAR 0 4
54880: PPUSH
54881: LD_VAR 0 5
54885: PPUSH
54886: LD_VAR 0 4
54890: PPUSH
54891: CALL_OW 74
54895: PPUSH
54896: CALL_OW 112
54900: GO 54926
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
54902: LD_VAR 0 4
54906: PPUSH
54907: LD_VAR 0 5
54911: PPUSH
54912: LD_VAR 0 4
54916: PPUSH
54917: CALL_OW 74
54921: PPUSH
54922: CALL_OW 115
// end ; end ;
54926: GO 54506
54928: POP
54929: POP
// end ;
54930: LD_VAR 0 3
54934: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
54935: LD_INT 0
54937: PPUSH
54938: PPUSH
54939: PPUSH
// if not unit or IsInUnit ( unit ) then
54940: LD_VAR 0 1
54944: NOT
54945: PUSH
54946: LD_VAR 0 1
54950: PPUSH
54951: CALL_OW 310
54955: OR
54956: IFFALSE 54960
// exit ;
54958: GO 55051
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
54960: LD_ADDR_VAR 0 4
54964: PUSH
54965: LD_VAR 0 1
54969: PPUSH
54970: CALL_OW 250
54974: PPUSH
54975: LD_VAR 0 2
54979: PPUSH
54980: LD_INT 1
54982: PPUSH
54983: CALL_OW 272
54987: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
54988: LD_ADDR_VAR 0 5
54992: PUSH
54993: LD_VAR 0 1
54997: PPUSH
54998: CALL_OW 251
55002: PPUSH
55003: LD_VAR 0 2
55007: PPUSH
55008: LD_INT 1
55010: PPUSH
55011: CALL_OW 273
55015: ST_TO_ADDR
// if ValidHex ( x , y ) then
55016: LD_VAR 0 4
55020: PPUSH
55021: LD_VAR 0 5
55025: PPUSH
55026: CALL_OW 488
55030: IFFALSE 55051
// ComTurnXY ( unit , x , y ) ;
55032: LD_VAR 0 1
55036: PPUSH
55037: LD_VAR 0 4
55041: PPUSH
55042: LD_VAR 0 5
55046: PPUSH
55047: CALL_OW 118
// end ;
55051: LD_VAR 0 3
55055: RET
// export function SeeUnits ( side , units ) ; var i ; begin
55056: LD_INT 0
55058: PPUSH
55059: PPUSH
// result := false ;
55060: LD_ADDR_VAR 0 3
55064: PUSH
55065: LD_INT 0
55067: ST_TO_ADDR
// if not units then
55068: LD_VAR 0 2
55072: NOT
55073: IFFALSE 55077
// exit ;
55075: GO 55122
// for i in units do
55077: LD_ADDR_VAR 0 4
55081: PUSH
55082: LD_VAR 0 2
55086: PUSH
55087: FOR_IN
55088: IFFALSE 55120
// if See ( side , i ) then
55090: LD_VAR 0 1
55094: PPUSH
55095: LD_VAR 0 4
55099: PPUSH
55100: CALL_OW 292
55104: IFFALSE 55118
// begin result := true ;
55106: LD_ADDR_VAR 0 3
55110: PUSH
55111: LD_INT 1
55113: ST_TO_ADDR
// exit ;
55114: POP
55115: POP
55116: GO 55122
// end ;
55118: GO 55087
55120: POP
55121: POP
// end ;
55122: LD_VAR 0 3
55126: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
55127: LD_INT 0
55129: PPUSH
55130: PPUSH
55131: PPUSH
55132: PPUSH
// if not unit or not points then
55133: LD_VAR 0 1
55137: NOT
55138: PUSH
55139: LD_VAR 0 2
55143: NOT
55144: OR
55145: IFFALSE 55149
// exit ;
55147: GO 55239
// dist := 99999 ;
55149: LD_ADDR_VAR 0 5
55153: PUSH
55154: LD_INT 99999
55156: ST_TO_ADDR
// for i in points do
55157: LD_ADDR_VAR 0 4
55161: PUSH
55162: LD_VAR 0 2
55166: PUSH
55167: FOR_IN
55168: IFFALSE 55237
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
55170: LD_ADDR_VAR 0 6
55174: PUSH
55175: LD_VAR 0 1
55179: PPUSH
55180: LD_VAR 0 4
55184: PUSH
55185: LD_INT 1
55187: ARRAY
55188: PPUSH
55189: LD_VAR 0 4
55193: PUSH
55194: LD_INT 2
55196: ARRAY
55197: PPUSH
55198: CALL_OW 297
55202: ST_TO_ADDR
// if tmpDist < dist then
55203: LD_VAR 0 6
55207: PUSH
55208: LD_VAR 0 5
55212: LESS
55213: IFFALSE 55235
// begin result := i ;
55215: LD_ADDR_VAR 0 3
55219: PUSH
55220: LD_VAR 0 4
55224: ST_TO_ADDR
// dist := tmpDist ;
55225: LD_ADDR_VAR 0 5
55229: PUSH
55230: LD_VAR 0 6
55234: ST_TO_ADDR
// end ; end ;
55235: GO 55167
55237: POP
55238: POP
// end ;
55239: LD_VAR 0 3
55243: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
55244: LD_INT 0
55246: PPUSH
// uc_side := side ;
55247: LD_ADDR_OWVAR 20
55251: PUSH
55252: LD_VAR 0 1
55256: ST_TO_ADDR
// uc_nation := 3 ;
55257: LD_ADDR_OWVAR 21
55261: PUSH
55262: LD_INT 3
55264: ST_TO_ADDR
// vc_chassis := 25 ;
55265: LD_ADDR_OWVAR 37
55269: PUSH
55270: LD_INT 25
55272: ST_TO_ADDR
// vc_engine := engine_siberite ;
55273: LD_ADDR_OWVAR 39
55277: PUSH
55278: LD_INT 3
55280: ST_TO_ADDR
// vc_control := control_computer ;
55281: LD_ADDR_OWVAR 38
55285: PUSH
55286: LD_INT 3
55288: ST_TO_ADDR
// vc_weapon := 59 ;
55289: LD_ADDR_OWVAR 40
55293: PUSH
55294: LD_INT 59
55296: ST_TO_ADDR
// result := CreateVehicle ;
55297: LD_ADDR_VAR 0 5
55301: PUSH
55302: CALL_OW 45
55306: ST_TO_ADDR
// SetDir ( result , d ) ;
55307: LD_VAR 0 5
55311: PPUSH
55312: LD_VAR 0 4
55316: PPUSH
55317: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
55321: LD_VAR 0 5
55325: PPUSH
55326: LD_VAR 0 2
55330: PPUSH
55331: LD_VAR 0 3
55335: PPUSH
55336: LD_INT 0
55338: PPUSH
55339: CALL_OW 48
// end ;
55343: LD_VAR 0 5
55347: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
55348: LD_INT 0
55350: PPUSH
55351: PPUSH
55352: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
55353: LD_ADDR_VAR 0 2
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
55376: LD_VAR 0 1
55380: NOT
55381: PUSH
55382: LD_VAR 0 1
55386: PPUSH
55387: CALL_OW 264
55391: PUSH
55392: LD_INT 12
55394: PUSH
55395: LD_INT 51
55397: PUSH
55398: LD_INT 32
55400: PUSH
55401: LD_INT 89
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: IN
55410: NOT
55411: OR
55412: IFFALSE 55416
// exit ;
55414: GO 55514
// for i := 1 to 3 do
55416: LD_ADDR_VAR 0 3
55420: PUSH
55421: DOUBLE
55422: LD_INT 1
55424: DEC
55425: ST_TO_ADDR
55426: LD_INT 3
55428: PUSH
55429: FOR_TO
55430: IFFALSE 55512
// begin tmp := GetCargo ( cargo , i ) ;
55432: LD_ADDR_VAR 0 4
55436: PUSH
55437: LD_VAR 0 1
55441: PPUSH
55442: LD_VAR 0 3
55446: PPUSH
55447: CALL_OW 289
55451: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
55452: LD_ADDR_VAR 0 2
55456: PUSH
55457: LD_VAR 0 2
55461: PPUSH
55462: LD_VAR 0 3
55466: PPUSH
55467: LD_VAR 0 4
55471: PPUSH
55472: CALL_OW 1
55476: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
55477: LD_ADDR_VAR 0 2
55481: PUSH
55482: LD_VAR 0 2
55486: PPUSH
55487: LD_INT 4
55489: PPUSH
55490: LD_VAR 0 2
55494: PUSH
55495: LD_INT 4
55497: ARRAY
55498: PUSH
55499: LD_VAR 0 4
55503: PLUS
55504: PPUSH
55505: CALL_OW 1
55509: ST_TO_ADDR
// end ;
55510: GO 55429
55512: POP
55513: POP
// end ;
55514: LD_VAR 0 2
55518: RET
// export function Length ( array ) ; begin
55519: LD_INT 0
55521: PPUSH
// result := array + 0 ;
55522: LD_ADDR_VAR 0 2
55526: PUSH
55527: LD_VAR 0 1
55531: PUSH
55532: LD_INT 0
55534: PLUS
55535: ST_TO_ADDR
// end ;
55536: LD_VAR 0 2
55540: RET
// export function PrepareArray ( array ) ; begin
55541: LD_INT 0
55543: PPUSH
// result := array diff 0 ;
55544: LD_ADDR_VAR 0 2
55548: PUSH
55549: LD_VAR 0 1
55553: PUSH
55554: LD_INT 0
55556: DIFF
55557: ST_TO_ADDR
// if not result [ 1 ] then
55558: LD_VAR 0 2
55562: PUSH
55563: LD_INT 1
55565: ARRAY
55566: NOT
55567: IFFALSE 55587
// result := Delete ( result , 1 ) ;
55569: LD_ADDR_VAR 0 2
55573: PUSH
55574: LD_VAR 0 2
55578: PPUSH
55579: LD_INT 1
55581: PPUSH
55582: CALL_OW 3
55586: ST_TO_ADDR
// end ; end_of_file
55587: LD_VAR 0 2
55591: RET
// every 0 0$1 do
55592: GO 55594
55594: DISABLE
// begin enable ;
55595: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
55596: LD_STRING updateTimer(
55598: PUSH
55599: LD_OWVAR 1
55603: STR
55604: PUSH
55605: LD_STRING );
55607: STR
55608: PPUSH
55609: CALL_OW 559
// end ;
55613: END
// export function SOS_MapStart ( ) ; begin
55614: LD_INT 0
55616: PPUSH
// if streamModeActive then
55617: LD_EXP 51
55621: IFFALSE 55630
// DefineStreamItems ( true ) ;
55623: LD_INT 1
55625: PPUSH
55626: CALL 57284 0 1
// UpdateFactoryWaypoints ( ) ;
55630: CALL 70145 0 0
// UpdateWarehouseGatheringPoints ( ) ;
55634: CALL 70402 0 0
// end ;
55638: LD_VAR 0 1
55642: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
55643: LD_INT 0
55645: PPUSH
// if p2 = 100 then
55646: LD_VAR 0 2
55650: PUSH
55651: LD_INT 100
55653: EQUAL
55654: IFFALSE 56657
// begin if not StreamModeActive then
55656: LD_EXP 51
55660: NOT
55661: IFFALSE 55671
// StreamModeActive := true ;
55663: LD_ADDR_EXP 51
55667: PUSH
55668: LD_INT 1
55670: ST_TO_ADDR
// if p3 = 0 then
55671: LD_VAR 0 3
55675: PUSH
55676: LD_INT 0
55678: EQUAL
55679: IFFALSE 55685
// InitStreamMode ;
55681: CALL 56820 0 0
// if p3 = 1 then
55685: LD_VAR 0 3
55689: PUSH
55690: LD_INT 1
55692: EQUAL
55693: IFFALSE 55703
// sRocket := true ;
55695: LD_ADDR_EXP 56
55699: PUSH
55700: LD_INT 1
55702: ST_TO_ADDR
// if p3 = 2 then
55703: LD_VAR 0 3
55707: PUSH
55708: LD_INT 2
55710: EQUAL
55711: IFFALSE 55721
// sSpeed := true ;
55713: LD_ADDR_EXP 55
55717: PUSH
55718: LD_INT 1
55720: ST_TO_ADDR
// if p3 = 3 then
55721: LD_VAR 0 3
55725: PUSH
55726: LD_INT 3
55728: EQUAL
55729: IFFALSE 55739
// sEngine := true ;
55731: LD_ADDR_EXP 57
55735: PUSH
55736: LD_INT 1
55738: ST_TO_ADDR
// if p3 = 4 then
55739: LD_VAR 0 3
55743: PUSH
55744: LD_INT 4
55746: EQUAL
55747: IFFALSE 55757
// sSpec := true ;
55749: LD_ADDR_EXP 54
55753: PUSH
55754: LD_INT 1
55756: ST_TO_ADDR
// if p3 = 5 then
55757: LD_VAR 0 3
55761: PUSH
55762: LD_INT 5
55764: EQUAL
55765: IFFALSE 55775
// sLevel := true ;
55767: LD_ADDR_EXP 58
55771: PUSH
55772: LD_INT 1
55774: ST_TO_ADDR
// if p3 = 6 then
55775: LD_VAR 0 3
55779: PUSH
55780: LD_INT 6
55782: EQUAL
55783: IFFALSE 55793
// sArmoury := true ;
55785: LD_ADDR_EXP 59
55789: PUSH
55790: LD_INT 1
55792: ST_TO_ADDR
// if p3 = 7 then
55793: LD_VAR 0 3
55797: PUSH
55798: LD_INT 7
55800: EQUAL
55801: IFFALSE 55811
// sRadar := true ;
55803: LD_ADDR_EXP 60
55807: PUSH
55808: LD_INT 1
55810: ST_TO_ADDR
// if p3 = 8 then
55811: LD_VAR 0 3
55815: PUSH
55816: LD_INT 8
55818: EQUAL
55819: IFFALSE 55829
// sBunker := true ;
55821: LD_ADDR_EXP 61
55825: PUSH
55826: LD_INT 1
55828: ST_TO_ADDR
// if p3 = 9 then
55829: LD_VAR 0 3
55833: PUSH
55834: LD_INT 9
55836: EQUAL
55837: IFFALSE 55847
// sHack := true ;
55839: LD_ADDR_EXP 62
55843: PUSH
55844: LD_INT 1
55846: ST_TO_ADDR
// if p3 = 10 then
55847: LD_VAR 0 3
55851: PUSH
55852: LD_INT 10
55854: EQUAL
55855: IFFALSE 55865
// sFire := true ;
55857: LD_ADDR_EXP 63
55861: PUSH
55862: LD_INT 1
55864: ST_TO_ADDR
// if p3 = 11 then
55865: LD_VAR 0 3
55869: PUSH
55870: LD_INT 11
55872: EQUAL
55873: IFFALSE 55883
// sRefresh := true ;
55875: LD_ADDR_EXP 64
55879: PUSH
55880: LD_INT 1
55882: ST_TO_ADDR
// if p3 = 12 then
55883: LD_VAR 0 3
55887: PUSH
55888: LD_INT 12
55890: EQUAL
55891: IFFALSE 55901
// sExp := true ;
55893: LD_ADDR_EXP 65
55897: PUSH
55898: LD_INT 1
55900: ST_TO_ADDR
// if p3 = 13 then
55901: LD_VAR 0 3
55905: PUSH
55906: LD_INT 13
55908: EQUAL
55909: IFFALSE 55919
// sDepot := true ;
55911: LD_ADDR_EXP 66
55915: PUSH
55916: LD_INT 1
55918: ST_TO_ADDR
// if p3 = 14 then
55919: LD_VAR 0 3
55923: PUSH
55924: LD_INT 14
55926: EQUAL
55927: IFFALSE 55937
// sFlag := true ;
55929: LD_ADDR_EXP 67
55933: PUSH
55934: LD_INT 1
55936: ST_TO_ADDR
// if p3 = 15 then
55937: LD_VAR 0 3
55941: PUSH
55942: LD_INT 15
55944: EQUAL
55945: IFFALSE 55955
// sKamikadze := true ;
55947: LD_ADDR_EXP 75
55951: PUSH
55952: LD_INT 1
55954: ST_TO_ADDR
// if p3 = 16 then
55955: LD_VAR 0 3
55959: PUSH
55960: LD_INT 16
55962: EQUAL
55963: IFFALSE 55973
// sTroll := true ;
55965: LD_ADDR_EXP 76
55969: PUSH
55970: LD_INT 1
55972: ST_TO_ADDR
// if p3 = 17 then
55973: LD_VAR 0 3
55977: PUSH
55978: LD_INT 17
55980: EQUAL
55981: IFFALSE 55991
// sSlow := true ;
55983: LD_ADDR_EXP 77
55987: PUSH
55988: LD_INT 1
55990: ST_TO_ADDR
// if p3 = 18 then
55991: LD_VAR 0 3
55995: PUSH
55996: LD_INT 18
55998: EQUAL
55999: IFFALSE 56009
// sLack := true ;
56001: LD_ADDR_EXP 78
56005: PUSH
56006: LD_INT 1
56008: ST_TO_ADDR
// if p3 = 19 then
56009: LD_VAR 0 3
56013: PUSH
56014: LD_INT 19
56016: EQUAL
56017: IFFALSE 56027
// sTank := true ;
56019: LD_ADDR_EXP 80
56023: PUSH
56024: LD_INT 1
56026: ST_TO_ADDR
// if p3 = 20 then
56027: LD_VAR 0 3
56031: PUSH
56032: LD_INT 20
56034: EQUAL
56035: IFFALSE 56045
// sRemote := true ;
56037: LD_ADDR_EXP 81
56041: PUSH
56042: LD_INT 1
56044: ST_TO_ADDR
// if p3 = 21 then
56045: LD_VAR 0 3
56049: PUSH
56050: LD_INT 21
56052: EQUAL
56053: IFFALSE 56063
// sPowell := true ;
56055: LD_ADDR_EXP 82
56059: PUSH
56060: LD_INT 1
56062: ST_TO_ADDR
// if p3 = 22 then
56063: LD_VAR 0 3
56067: PUSH
56068: LD_INT 22
56070: EQUAL
56071: IFFALSE 56081
// sTeleport := true ;
56073: LD_ADDR_EXP 85
56077: PUSH
56078: LD_INT 1
56080: ST_TO_ADDR
// if p3 = 23 then
56081: LD_VAR 0 3
56085: PUSH
56086: LD_INT 23
56088: EQUAL
56089: IFFALSE 56099
// sOilTower := true ;
56091: LD_ADDR_EXP 87
56095: PUSH
56096: LD_INT 1
56098: ST_TO_ADDR
// if p3 = 24 then
56099: LD_VAR 0 3
56103: PUSH
56104: LD_INT 24
56106: EQUAL
56107: IFFALSE 56117
// sShovel := true ;
56109: LD_ADDR_EXP 88
56113: PUSH
56114: LD_INT 1
56116: ST_TO_ADDR
// if p3 = 25 then
56117: LD_VAR 0 3
56121: PUSH
56122: LD_INT 25
56124: EQUAL
56125: IFFALSE 56135
// sSheik := true ;
56127: LD_ADDR_EXP 89
56131: PUSH
56132: LD_INT 1
56134: ST_TO_ADDR
// if p3 = 26 then
56135: LD_VAR 0 3
56139: PUSH
56140: LD_INT 26
56142: EQUAL
56143: IFFALSE 56153
// sEarthquake := true ;
56145: LD_ADDR_EXP 91
56149: PUSH
56150: LD_INT 1
56152: ST_TO_ADDR
// if p3 = 27 then
56153: LD_VAR 0 3
56157: PUSH
56158: LD_INT 27
56160: EQUAL
56161: IFFALSE 56171
// sAI := true ;
56163: LD_ADDR_EXP 92
56167: PUSH
56168: LD_INT 1
56170: ST_TO_ADDR
// if p3 = 28 then
56171: LD_VAR 0 3
56175: PUSH
56176: LD_INT 28
56178: EQUAL
56179: IFFALSE 56189
// sCargo := true ;
56181: LD_ADDR_EXP 95
56185: PUSH
56186: LD_INT 1
56188: ST_TO_ADDR
// if p3 = 29 then
56189: LD_VAR 0 3
56193: PUSH
56194: LD_INT 29
56196: EQUAL
56197: IFFALSE 56207
// sDLaser := true ;
56199: LD_ADDR_EXP 96
56203: PUSH
56204: LD_INT 1
56206: ST_TO_ADDR
// if p3 = 30 then
56207: LD_VAR 0 3
56211: PUSH
56212: LD_INT 30
56214: EQUAL
56215: IFFALSE 56225
// sExchange := true ;
56217: LD_ADDR_EXP 97
56221: PUSH
56222: LD_INT 1
56224: ST_TO_ADDR
// if p3 = 31 then
56225: LD_VAR 0 3
56229: PUSH
56230: LD_INT 31
56232: EQUAL
56233: IFFALSE 56243
// sFac := true ;
56235: LD_ADDR_EXP 98
56239: PUSH
56240: LD_INT 1
56242: ST_TO_ADDR
// if p3 = 32 then
56243: LD_VAR 0 3
56247: PUSH
56248: LD_INT 32
56250: EQUAL
56251: IFFALSE 56261
// sPower := true ;
56253: LD_ADDR_EXP 99
56257: PUSH
56258: LD_INT 1
56260: ST_TO_ADDR
// if p3 = 33 then
56261: LD_VAR 0 3
56265: PUSH
56266: LD_INT 33
56268: EQUAL
56269: IFFALSE 56279
// sRandom := true ;
56271: LD_ADDR_EXP 100
56275: PUSH
56276: LD_INT 1
56278: ST_TO_ADDR
// if p3 = 34 then
56279: LD_VAR 0 3
56283: PUSH
56284: LD_INT 34
56286: EQUAL
56287: IFFALSE 56297
// sShield := true ;
56289: LD_ADDR_EXP 101
56293: PUSH
56294: LD_INT 1
56296: ST_TO_ADDR
// if p3 = 35 then
56297: LD_VAR 0 3
56301: PUSH
56302: LD_INT 35
56304: EQUAL
56305: IFFALSE 56315
// sTime := true ;
56307: LD_ADDR_EXP 102
56311: PUSH
56312: LD_INT 1
56314: ST_TO_ADDR
// if p3 = 36 then
56315: LD_VAR 0 3
56319: PUSH
56320: LD_INT 36
56322: EQUAL
56323: IFFALSE 56333
// sTools := true ;
56325: LD_ADDR_EXP 103
56329: PUSH
56330: LD_INT 1
56332: ST_TO_ADDR
// if p3 = 101 then
56333: LD_VAR 0 3
56337: PUSH
56338: LD_INT 101
56340: EQUAL
56341: IFFALSE 56351
// sSold := true ;
56343: LD_ADDR_EXP 68
56347: PUSH
56348: LD_INT 1
56350: ST_TO_ADDR
// if p3 = 102 then
56351: LD_VAR 0 3
56355: PUSH
56356: LD_INT 102
56358: EQUAL
56359: IFFALSE 56369
// sDiff := true ;
56361: LD_ADDR_EXP 69
56365: PUSH
56366: LD_INT 1
56368: ST_TO_ADDR
// if p3 = 103 then
56369: LD_VAR 0 3
56373: PUSH
56374: LD_INT 103
56376: EQUAL
56377: IFFALSE 56387
// sFog := true ;
56379: LD_ADDR_EXP 72
56383: PUSH
56384: LD_INT 1
56386: ST_TO_ADDR
// if p3 = 104 then
56387: LD_VAR 0 3
56391: PUSH
56392: LD_INT 104
56394: EQUAL
56395: IFFALSE 56405
// sReset := true ;
56397: LD_ADDR_EXP 73
56401: PUSH
56402: LD_INT 1
56404: ST_TO_ADDR
// if p3 = 105 then
56405: LD_VAR 0 3
56409: PUSH
56410: LD_INT 105
56412: EQUAL
56413: IFFALSE 56423
// sSun := true ;
56415: LD_ADDR_EXP 74
56419: PUSH
56420: LD_INT 1
56422: ST_TO_ADDR
// if p3 = 106 then
56423: LD_VAR 0 3
56427: PUSH
56428: LD_INT 106
56430: EQUAL
56431: IFFALSE 56441
// sTiger := true ;
56433: LD_ADDR_EXP 70
56437: PUSH
56438: LD_INT 1
56440: ST_TO_ADDR
// if p3 = 107 then
56441: LD_VAR 0 3
56445: PUSH
56446: LD_INT 107
56448: EQUAL
56449: IFFALSE 56459
// sBomb := true ;
56451: LD_ADDR_EXP 71
56455: PUSH
56456: LD_INT 1
56458: ST_TO_ADDR
// if p3 = 108 then
56459: LD_VAR 0 3
56463: PUSH
56464: LD_INT 108
56466: EQUAL
56467: IFFALSE 56477
// sWound := true ;
56469: LD_ADDR_EXP 79
56473: PUSH
56474: LD_INT 1
56476: ST_TO_ADDR
// if p3 = 109 then
56477: LD_VAR 0 3
56481: PUSH
56482: LD_INT 109
56484: EQUAL
56485: IFFALSE 56495
// sBetray := true ;
56487: LD_ADDR_EXP 83
56491: PUSH
56492: LD_INT 1
56494: ST_TO_ADDR
// if p3 = 110 then
56495: LD_VAR 0 3
56499: PUSH
56500: LD_INT 110
56502: EQUAL
56503: IFFALSE 56513
// sContamin := true ;
56505: LD_ADDR_EXP 84
56509: PUSH
56510: LD_INT 1
56512: ST_TO_ADDR
// if p3 = 111 then
56513: LD_VAR 0 3
56517: PUSH
56518: LD_INT 111
56520: EQUAL
56521: IFFALSE 56531
// sOil := true ;
56523: LD_ADDR_EXP 86
56527: PUSH
56528: LD_INT 1
56530: ST_TO_ADDR
// if p3 = 112 then
56531: LD_VAR 0 3
56535: PUSH
56536: LD_INT 112
56538: EQUAL
56539: IFFALSE 56549
// sStu := true ;
56541: LD_ADDR_EXP 90
56545: PUSH
56546: LD_INT 1
56548: ST_TO_ADDR
// if p3 = 113 then
56549: LD_VAR 0 3
56553: PUSH
56554: LD_INT 113
56556: EQUAL
56557: IFFALSE 56567
// sBazooka := true ;
56559: LD_ADDR_EXP 93
56563: PUSH
56564: LD_INT 1
56566: ST_TO_ADDR
// if p3 = 114 then
56567: LD_VAR 0 3
56571: PUSH
56572: LD_INT 114
56574: EQUAL
56575: IFFALSE 56585
// sMortar := true ;
56577: LD_ADDR_EXP 94
56581: PUSH
56582: LD_INT 1
56584: ST_TO_ADDR
// if p3 = 115 then
56585: LD_VAR 0 3
56589: PUSH
56590: LD_INT 115
56592: EQUAL
56593: IFFALSE 56603
// sRanger := true ;
56595: LD_ADDR_EXP 104
56599: PUSH
56600: LD_INT 1
56602: ST_TO_ADDR
// if p3 = 116 then
56603: LD_VAR 0 3
56607: PUSH
56608: LD_INT 116
56610: EQUAL
56611: IFFALSE 56621
// sComputer := true ;
56613: LD_ADDR_EXP 105
56617: PUSH
56618: LD_INT 1
56620: ST_TO_ADDR
// if p3 = 117 then
56621: LD_VAR 0 3
56625: PUSH
56626: LD_INT 117
56628: EQUAL
56629: IFFALSE 56639
// s30 := true ;
56631: LD_ADDR_EXP 106
56635: PUSH
56636: LD_INT 1
56638: ST_TO_ADDR
// if p3 = 118 then
56639: LD_VAR 0 3
56643: PUSH
56644: LD_INT 118
56646: EQUAL
56647: IFFALSE 56657
// s60 := true ;
56649: LD_ADDR_EXP 107
56653: PUSH
56654: LD_INT 1
56656: ST_TO_ADDR
// end ; if p2 = 101 then
56657: LD_VAR 0 2
56661: PUSH
56662: LD_INT 101
56664: EQUAL
56665: IFFALSE 56793
// begin case p3 of 1 :
56667: LD_VAR 0 3
56671: PUSH
56672: LD_INT 1
56674: DOUBLE
56675: EQUAL
56676: IFTRUE 56680
56678: GO 56687
56680: POP
// hHackUnlimitedResources ; 2 :
56681: CALL 68891 0 0
56685: GO 56793
56687: LD_INT 2
56689: DOUBLE
56690: EQUAL
56691: IFTRUE 56695
56693: GO 56702
56695: POP
// hHackSetLevel10 ; 3 :
56696: CALL 69024 0 0
56700: GO 56793
56702: LD_INT 3
56704: DOUBLE
56705: EQUAL
56706: IFTRUE 56710
56708: GO 56717
56710: POP
// hHackSetLevel10YourUnits ; 4 :
56711: CALL 69109 0 0
56715: GO 56793
56717: LD_INT 4
56719: DOUBLE
56720: EQUAL
56721: IFTRUE 56725
56723: GO 56732
56725: POP
// hHackInvincible ; 5 :
56726: CALL 69557 0 0
56730: GO 56793
56732: LD_INT 5
56734: DOUBLE
56735: EQUAL
56736: IFTRUE 56740
56738: GO 56747
56740: POP
// hHackInvisible ; 6 :
56741: CALL 69668 0 0
56745: GO 56793
56747: LD_INT 6
56749: DOUBLE
56750: EQUAL
56751: IFTRUE 56755
56753: GO 56762
56755: POP
// hHackChangeYourSide ; 7 :
56756: CALL 69725 0 0
56760: GO 56793
56762: LD_INT 7
56764: DOUBLE
56765: EQUAL
56766: IFTRUE 56770
56768: GO 56777
56770: POP
// hHackChangeUnitSide ; 8 :
56771: CALL 69767 0 0
56775: GO 56793
56777: LD_INT 8
56779: DOUBLE
56780: EQUAL
56781: IFTRUE 56785
56783: GO 56792
56785: POP
// hHackFog ; end ;
56786: CALL 69868 0 0
56790: GO 56793
56792: POP
// end ; end ;
56793: LD_VAR 0 7
56797: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
56798: GO 56800
56800: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
56801: LD_STRING initStreamRollete();
56803: PPUSH
56804: CALL_OW 559
// InitStreamMode ;
56808: CALL 56820 0 0
// DefineStreamItems ( false ) ;
56812: LD_INT 0
56814: PPUSH
56815: CALL 57284 0 1
// end ;
56819: END
// function InitStreamMode ; begin
56820: LD_INT 0
56822: PPUSH
// streamModeActive := false ;
56823: LD_ADDR_EXP 51
56827: PUSH
56828: LD_INT 0
56830: ST_TO_ADDR
// normalCounter := 36 ;
56831: LD_ADDR_EXP 52
56835: PUSH
56836: LD_INT 36
56838: ST_TO_ADDR
// hardcoreCounter := 18 ;
56839: LD_ADDR_EXP 53
56843: PUSH
56844: LD_INT 18
56846: ST_TO_ADDR
// sRocket := false ;
56847: LD_ADDR_EXP 56
56851: PUSH
56852: LD_INT 0
56854: ST_TO_ADDR
// sSpeed := false ;
56855: LD_ADDR_EXP 55
56859: PUSH
56860: LD_INT 0
56862: ST_TO_ADDR
// sEngine := false ;
56863: LD_ADDR_EXP 57
56867: PUSH
56868: LD_INT 0
56870: ST_TO_ADDR
// sSpec := false ;
56871: LD_ADDR_EXP 54
56875: PUSH
56876: LD_INT 0
56878: ST_TO_ADDR
// sLevel := false ;
56879: LD_ADDR_EXP 58
56883: PUSH
56884: LD_INT 0
56886: ST_TO_ADDR
// sArmoury := false ;
56887: LD_ADDR_EXP 59
56891: PUSH
56892: LD_INT 0
56894: ST_TO_ADDR
// sRadar := false ;
56895: LD_ADDR_EXP 60
56899: PUSH
56900: LD_INT 0
56902: ST_TO_ADDR
// sBunker := false ;
56903: LD_ADDR_EXP 61
56907: PUSH
56908: LD_INT 0
56910: ST_TO_ADDR
// sHack := false ;
56911: LD_ADDR_EXP 62
56915: PUSH
56916: LD_INT 0
56918: ST_TO_ADDR
// sFire := false ;
56919: LD_ADDR_EXP 63
56923: PUSH
56924: LD_INT 0
56926: ST_TO_ADDR
// sRefresh := false ;
56927: LD_ADDR_EXP 64
56931: PUSH
56932: LD_INT 0
56934: ST_TO_ADDR
// sExp := false ;
56935: LD_ADDR_EXP 65
56939: PUSH
56940: LD_INT 0
56942: ST_TO_ADDR
// sDepot := false ;
56943: LD_ADDR_EXP 66
56947: PUSH
56948: LD_INT 0
56950: ST_TO_ADDR
// sFlag := false ;
56951: LD_ADDR_EXP 67
56955: PUSH
56956: LD_INT 0
56958: ST_TO_ADDR
// sKamikadze := false ;
56959: LD_ADDR_EXP 75
56963: PUSH
56964: LD_INT 0
56966: ST_TO_ADDR
// sTroll := false ;
56967: LD_ADDR_EXP 76
56971: PUSH
56972: LD_INT 0
56974: ST_TO_ADDR
// sSlow := false ;
56975: LD_ADDR_EXP 77
56979: PUSH
56980: LD_INT 0
56982: ST_TO_ADDR
// sLack := false ;
56983: LD_ADDR_EXP 78
56987: PUSH
56988: LD_INT 0
56990: ST_TO_ADDR
// sTank := false ;
56991: LD_ADDR_EXP 80
56995: PUSH
56996: LD_INT 0
56998: ST_TO_ADDR
// sRemote := false ;
56999: LD_ADDR_EXP 81
57003: PUSH
57004: LD_INT 0
57006: ST_TO_ADDR
// sPowell := false ;
57007: LD_ADDR_EXP 82
57011: PUSH
57012: LD_INT 0
57014: ST_TO_ADDR
// sTeleport := false ;
57015: LD_ADDR_EXP 85
57019: PUSH
57020: LD_INT 0
57022: ST_TO_ADDR
// sOilTower := false ;
57023: LD_ADDR_EXP 87
57027: PUSH
57028: LD_INT 0
57030: ST_TO_ADDR
// sShovel := false ;
57031: LD_ADDR_EXP 88
57035: PUSH
57036: LD_INT 0
57038: ST_TO_ADDR
// sSheik := false ;
57039: LD_ADDR_EXP 89
57043: PUSH
57044: LD_INT 0
57046: ST_TO_ADDR
// sEarthquake := false ;
57047: LD_ADDR_EXP 91
57051: PUSH
57052: LD_INT 0
57054: ST_TO_ADDR
// sAI := false ;
57055: LD_ADDR_EXP 92
57059: PUSH
57060: LD_INT 0
57062: ST_TO_ADDR
// sCargo := false ;
57063: LD_ADDR_EXP 95
57067: PUSH
57068: LD_INT 0
57070: ST_TO_ADDR
// sDLaser := false ;
57071: LD_ADDR_EXP 96
57075: PUSH
57076: LD_INT 0
57078: ST_TO_ADDR
// sExchange := false ;
57079: LD_ADDR_EXP 97
57083: PUSH
57084: LD_INT 0
57086: ST_TO_ADDR
// sFac := false ;
57087: LD_ADDR_EXP 98
57091: PUSH
57092: LD_INT 0
57094: ST_TO_ADDR
// sPower := false ;
57095: LD_ADDR_EXP 99
57099: PUSH
57100: LD_INT 0
57102: ST_TO_ADDR
// sRandom := false ;
57103: LD_ADDR_EXP 100
57107: PUSH
57108: LD_INT 0
57110: ST_TO_ADDR
// sShield := false ;
57111: LD_ADDR_EXP 101
57115: PUSH
57116: LD_INT 0
57118: ST_TO_ADDR
// sTime := false ;
57119: LD_ADDR_EXP 102
57123: PUSH
57124: LD_INT 0
57126: ST_TO_ADDR
// sTools := false ;
57127: LD_ADDR_EXP 103
57131: PUSH
57132: LD_INT 0
57134: ST_TO_ADDR
// sSold := false ;
57135: LD_ADDR_EXP 68
57139: PUSH
57140: LD_INT 0
57142: ST_TO_ADDR
// sDiff := false ;
57143: LD_ADDR_EXP 69
57147: PUSH
57148: LD_INT 0
57150: ST_TO_ADDR
// sFog := false ;
57151: LD_ADDR_EXP 72
57155: PUSH
57156: LD_INT 0
57158: ST_TO_ADDR
// sReset := false ;
57159: LD_ADDR_EXP 73
57163: PUSH
57164: LD_INT 0
57166: ST_TO_ADDR
// sSun := false ;
57167: LD_ADDR_EXP 74
57171: PUSH
57172: LD_INT 0
57174: ST_TO_ADDR
// sTiger := false ;
57175: LD_ADDR_EXP 70
57179: PUSH
57180: LD_INT 0
57182: ST_TO_ADDR
// sBomb := false ;
57183: LD_ADDR_EXP 71
57187: PUSH
57188: LD_INT 0
57190: ST_TO_ADDR
// sWound := false ;
57191: LD_ADDR_EXP 79
57195: PUSH
57196: LD_INT 0
57198: ST_TO_ADDR
// sBetray := false ;
57199: LD_ADDR_EXP 83
57203: PUSH
57204: LD_INT 0
57206: ST_TO_ADDR
// sContamin := false ;
57207: LD_ADDR_EXP 84
57211: PUSH
57212: LD_INT 0
57214: ST_TO_ADDR
// sOil := false ;
57215: LD_ADDR_EXP 86
57219: PUSH
57220: LD_INT 0
57222: ST_TO_ADDR
// sStu := false ;
57223: LD_ADDR_EXP 90
57227: PUSH
57228: LD_INT 0
57230: ST_TO_ADDR
// sBazooka := false ;
57231: LD_ADDR_EXP 93
57235: PUSH
57236: LD_INT 0
57238: ST_TO_ADDR
// sMortar := false ;
57239: LD_ADDR_EXP 94
57243: PUSH
57244: LD_INT 0
57246: ST_TO_ADDR
// sRanger := false ;
57247: LD_ADDR_EXP 104
57251: PUSH
57252: LD_INT 0
57254: ST_TO_ADDR
// sComputer := false ;
57255: LD_ADDR_EXP 105
57259: PUSH
57260: LD_INT 0
57262: ST_TO_ADDR
// s30 := false ;
57263: LD_ADDR_EXP 106
57267: PUSH
57268: LD_INT 0
57270: ST_TO_ADDR
// s60 := false ;
57271: LD_ADDR_EXP 107
57275: PUSH
57276: LD_INT 0
57278: ST_TO_ADDR
// end ;
57279: LD_VAR 0 1
57283: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
57284: LD_INT 0
57286: PPUSH
57287: PPUSH
57288: PPUSH
57289: PPUSH
57290: PPUSH
57291: PPUSH
57292: PPUSH
// result := [ ] ;
57293: LD_ADDR_VAR 0 2
57297: PUSH
57298: EMPTY
57299: ST_TO_ADDR
// if campaign_id = 1 then
57300: LD_OWVAR 69
57304: PUSH
57305: LD_INT 1
57307: EQUAL
57308: IFFALSE 60474
// begin case mission_number of 1 :
57310: LD_OWVAR 70
57314: PUSH
57315: LD_INT 1
57317: DOUBLE
57318: EQUAL
57319: IFTRUE 57323
57321: GO 57399
57323: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
57324: LD_ADDR_VAR 0 2
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: LD_INT 4
57334: PUSH
57335: LD_INT 11
57337: PUSH
57338: LD_INT 12
57340: PUSH
57341: LD_INT 15
57343: PUSH
57344: LD_INT 16
57346: PUSH
57347: LD_INT 22
57349: PUSH
57350: LD_INT 23
57352: PUSH
57353: LD_INT 26
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 101
57369: PUSH
57370: LD_INT 102
57372: PUSH
57373: LD_INT 106
57375: PUSH
57376: LD_INT 116
57378: PUSH
57379: LD_INT 117
57381: PUSH
57382: LD_INT 118
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: ST_TO_ADDR
57397: GO 60472
57399: LD_INT 2
57401: DOUBLE
57402: EQUAL
57403: IFTRUE 57407
57405: GO 57491
57407: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
57408: LD_ADDR_VAR 0 2
57412: PUSH
57413: LD_INT 2
57415: PUSH
57416: LD_INT 4
57418: PUSH
57419: LD_INT 11
57421: PUSH
57422: LD_INT 12
57424: PUSH
57425: LD_INT 15
57427: PUSH
57428: LD_INT 16
57430: PUSH
57431: LD_INT 22
57433: PUSH
57434: LD_INT 23
57436: PUSH
57437: LD_INT 26
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 101
57453: PUSH
57454: LD_INT 102
57456: PUSH
57457: LD_INT 105
57459: PUSH
57460: LD_INT 106
57462: PUSH
57463: LD_INT 108
57465: PUSH
57466: LD_INT 116
57468: PUSH
57469: LD_INT 117
57471: PUSH
57472: LD_INT 118
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: ST_TO_ADDR
57489: GO 60472
57491: LD_INT 3
57493: DOUBLE
57494: EQUAL
57495: IFTRUE 57499
57497: GO 57587
57499: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
57500: LD_ADDR_VAR 0 2
57504: PUSH
57505: LD_INT 2
57507: PUSH
57508: LD_INT 4
57510: PUSH
57511: LD_INT 5
57513: PUSH
57514: LD_INT 11
57516: PUSH
57517: LD_INT 12
57519: PUSH
57520: LD_INT 15
57522: PUSH
57523: LD_INT 16
57525: PUSH
57526: LD_INT 22
57528: PUSH
57529: LD_INT 26
57531: PUSH
57532: LD_INT 36
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 101
57549: PUSH
57550: LD_INT 102
57552: PUSH
57553: LD_INT 105
57555: PUSH
57556: LD_INT 106
57558: PUSH
57559: LD_INT 108
57561: PUSH
57562: LD_INT 116
57564: PUSH
57565: LD_INT 117
57567: PUSH
57568: LD_INT 118
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: ST_TO_ADDR
57585: GO 60472
57587: LD_INT 4
57589: DOUBLE
57590: EQUAL
57591: IFTRUE 57595
57593: GO 57691
57595: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
57596: LD_ADDR_VAR 0 2
57600: PUSH
57601: LD_INT 2
57603: PUSH
57604: LD_INT 4
57606: PUSH
57607: LD_INT 5
57609: PUSH
57610: LD_INT 8
57612: PUSH
57613: LD_INT 11
57615: PUSH
57616: LD_INT 12
57618: PUSH
57619: LD_INT 15
57621: PUSH
57622: LD_INT 16
57624: PUSH
57625: LD_INT 22
57627: PUSH
57628: LD_INT 23
57630: PUSH
57631: LD_INT 26
57633: PUSH
57634: LD_INT 36
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 101
57653: PUSH
57654: LD_INT 102
57656: PUSH
57657: LD_INT 105
57659: PUSH
57660: LD_INT 106
57662: PUSH
57663: LD_INT 108
57665: PUSH
57666: LD_INT 116
57668: PUSH
57669: LD_INT 117
57671: PUSH
57672: LD_INT 118
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: ST_TO_ADDR
57689: GO 60472
57691: LD_INT 5
57693: DOUBLE
57694: EQUAL
57695: IFTRUE 57699
57697: GO 57811
57699: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
57700: LD_ADDR_VAR 0 2
57704: PUSH
57705: LD_INT 2
57707: PUSH
57708: LD_INT 4
57710: PUSH
57711: LD_INT 5
57713: PUSH
57714: LD_INT 6
57716: PUSH
57717: LD_INT 8
57719: PUSH
57720: LD_INT 11
57722: PUSH
57723: LD_INT 12
57725: PUSH
57726: LD_INT 15
57728: PUSH
57729: LD_INT 16
57731: PUSH
57732: LD_INT 22
57734: PUSH
57735: LD_INT 23
57737: PUSH
57738: LD_INT 25
57740: PUSH
57741: LD_INT 26
57743: PUSH
57744: LD_INT 36
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 101
57765: PUSH
57766: LD_INT 102
57768: PUSH
57769: LD_INT 105
57771: PUSH
57772: LD_INT 106
57774: PUSH
57775: LD_INT 108
57777: PUSH
57778: LD_INT 109
57780: PUSH
57781: LD_INT 112
57783: PUSH
57784: LD_INT 116
57786: PUSH
57787: LD_INT 117
57789: PUSH
57790: LD_INT 118
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: ST_TO_ADDR
57809: GO 60472
57811: LD_INT 6
57813: DOUBLE
57814: EQUAL
57815: IFTRUE 57819
57817: GO 57951
57819: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
57820: LD_ADDR_VAR 0 2
57824: PUSH
57825: LD_INT 2
57827: PUSH
57828: LD_INT 4
57830: PUSH
57831: LD_INT 5
57833: PUSH
57834: LD_INT 6
57836: PUSH
57837: LD_INT 8
57839: PUSH
57840: LD_INT 11
57842: PUSH
57843: LD_INT 12
57845: PUSH
57846: LD_INT 15
57848: PUSH
57849: LD_INT 16
57851: PUSH
57852: LD_INT 20
57854: PUSH
57855: LD_INT 21
57857: PUSH
57858: LD_INT 22
57860: PUSH
57861: LD_INT 23
57863: PUSH
57864: LD_INT 25
57866: PUSH
57867: LD_INT 26
57869: PUSH
57870: LD_INT 30
57872: PUSH
57873: LD_INT 31
57875: PUSH
57876: LD_INT 32
57878: PUSH
57879: LD_INT 36
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 101
57905: PUSH
57906: LD_INT 102
57908: PUSH
57909: LD_INT 105
57911: PUSH
57912: LD_INT 106
57914: PUSH
57915: LD_INT 108
57917: PUSH
57918: LD_INT 109
57920: PUSH
57921: LD_INT 112
57923: PUSH
57924: LD_INT 116
57926: PUSH
57927: LD_INT 117
57929: PUSH
57930: LD_INT 118
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: ST_TO_ADDR
57949: GO 60472
57951: LD_INT 7
57953: DOUBLE
57954: EQUAL
57955: IFTRUE 57959
57957: GO 58071
57959: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
57960: LD_ADDR_VAR 0 2
57964: PUSH
57965: LD_INT 2
57967: PUSH
57968: LD_INT 4
57970: PUSH
57971: LD_INT 5
57973: PUSH
57974: LD_INT 7
57976: PUSH
57977: LD_INT 11
57979: PUSH
57980: LD_INT 12
57982: PUSH
57983: LD_INT 15
57985: PUSH
57986: LD_INT 16
57988: PUSH
57989: LD_INT 20
57991: PUSH
57992: LD_INT 21
57994: PUSH
57995: LD_INT 22
57997: PUSH
57998: LD_INT 23
58000: PUSH
58001: LD_INT 25
58003: PUSH
58004: LD_INT 26
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 101
58025: PUSH
58026: LD_INT 102
58028: PUSH
58029: LD_INT 103
58031: PUSH
58032: LD_INT 105
58034: PUSH
58035: LD_INT 106
58037: PUSH
58038: LD_INT 108
58040: PUSH
58041: LD_INT 112
58043: PUSH
58044: LD_INT 116
58046: PUSH
58047: LD_INT 117
58049: PUSH
58050: LD_INT 118
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: ST_TO_ADDR
58069: GO 60472
58071: LD_INT 8
58073: DOUBLE
58074: EQUAL
58075: IFTRUE 58079
58077: GO 58219
58079: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
58080: LD_ADDR_VAR 0 2
58084: PUSH
58085: LD_INT 2
58087: PUSH
58088: LD_INT 4
58090: PUSH
58091: LD_INT 5
58093: PUSH
58094: LD_INT 6
58096: PUSH
58097: LD_INT 7
58099: PUSH
58100: LD_INT 8
58102: PUSH
58103: LD_INT 11
58105: PUSH
58106: LD_INT 12
58108: PUSH
58109: LD_INT 15
58111: PUSH
58112: LD_INT 16
58114: PUSH
58115: LD_INT 20
58117: PUSH
58118: LD_INT 21
58120: PUSH
58121: LD_INT 22
58123: PUSH
58124: LD_INT 23
58126: PUSH
58127: LD_INT 25
58129: PUSH
58130: LD_INT 26
58132: PUSH
58133: LD_INT 30
58135: PUSH
58136: LD_INT 31
58138: PUSH
58139: LD_INT 32
58141: PUSH
58142: LD_INT 36
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 101
58169: PUSH
58170: LD_INT 102
58172: PUSH
58173: LD_INT 103
58175: PUSH
58176: LD_INT 105
58178: PUSH
58179: LD_INT 106
58181: PUSH
58182: LD_INT 108
58184: PUSH
58185: LD_INT 109
58187: PUSH
58188: LD_INT 112
58190: PUSH
58191: LD_INT 116
58193: PUSH
58194: LD_INT 117
58196: PUSH
58197: LD_INT 118
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: ST_TO_ADDR
58217: GO 60472
58219: LD_INT 9
58221: DOUBLE
58222: EQUAL
58223: IFTRUE 58227
58225: GO 58375
58227: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
58228: LD_ADDR_VAR 0 2
58232: PUSH
58233: LD_INT 2
58235: PUSH
58236: LD_INT 4
58238: PUSH
58239: LD_INT 5
58241: PUSH
58242: LD_INT 6
58244: PUSH
58245: LD_INT 7
58247: PUSH
58248: LD_INT 8
58250: PUSH
58251: LD_INT 11
58253: PUSH
58254: LD_INT 12
58256: PUSH
58257: LD_INT 15
58259: PUSH
58260: LD_INT 16
58262: PUSH
58263: LD_INT 20
58265: PUSH
58266: LD_INT 21
58268: PUSH
58269: LD_INT 22
58271: PUSH
58272: LD_INT 23
58274: PUSH
58275: LD_INT 25
58277: PUSH
58278: LD_INT 26
58280: PUSH
58281: LD_INT 28
58283: PUSH
58284: LD_INT 30
58286: PUSH
58287: LD_INT 31
58289: PUSH
58290: LD_INT 32
58292: PUSH
58293: LD_INT 36
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 101
58321: PUSH
58322: LD_INT 102
58324: PUSH
58325: LD_INT 103
58327: PUSH
58328: LD_INT 105
58330: PUSH
58331: LD_INT 106
58333: PUSH
58334: LD_INT 108
58336: PUSH
58337: LD_INT 109
58339: PUSH
58340: LD_INT 112
58342: PUSH
58343: LD_INT 114
58345: PUSH
58346: LD_INT 116
58348: PUSH
58349: LD_INT 117
58351: PUSH
58352: LD_INT 118
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: ST_TO_ADDR
58373: GO 60472
58375: LD_INT 10
58377: DOUBLE
58378: EQUAL
58379: IFTRUE 58383
58381: GO 58579
58383: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
58384: LD_ADDR_VAR 0 2
58388: PUSH
58389: LD_INT 2
58391: PUSH
58392: LD_INT 4
58394: PUSH
58395: LD_INT 5
58397: PUSH
58398: LD_INT 6
58400: PUSH
58401: LD_INT 7
58403: PUSH
58404: LD_INT 8
58406: PUSH
58407: LD_INT 9
58409: PUSH
58410: LD_INT 10
58412: PUSH
58413: LD_INT 11
58415: PUSH
58416: LD_INT 12
58418: PUSH
58419: LD_INT 13
58421: PUSH
58422: LD_INT 14
58424: PUSH
58425: LD_INT 15
58427: PUSH
58428: LD_INT 16
58430: PUSH
58431: LD_INT 17
58433: PUSH
58434: LD_INT 18
58436: PUSH
58437: LD_INT 19
58439: PUSH
58440: LD_INT 20
58442: PUSH
58443: LD_INT 21
58445: PUSH
58446: LD_INT 22
58448: PUSH
58449: LD_INT 23
58451: PUSH
58452: LD_INT 24
58454: PUSH
58455: LD_INT 25
58457: PUSH
58458: LD_INT 26
58460: PUSH
58461: LD_INT 28
58463: PUSH
58464: LD_INT 30
58466: PUSH
58467: LD_INT 31
58469: PUSH
58470: LD_INT 32
58472: PUSH
58473: LD_INT 36
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 101
58509: PUSH
58510: LD_INT 102
58512: PUSH
58513: LD_INT 103
58515: PUSH
58516: LD_INT 104
58518: PUSH
58519: LD_INT 105
58521: PUSH
58522: LD_INT 106
58524: PUSH
58525: LD_INT 107
58527: PUSH
58528: LD_INT 108
58530: PUSH
58531: LD_INT 109
58533: PUSH
58534: LD_INT 110
58536: PUSH
58537: LD_INT 111
58539: PUSH
58540: LD_INT 112
58542: PUSH
58543: LD_INT 114
58545: PUSH
58546: LD_INT 116
58548: PUSH
58549: LD_INT 117
58551: PUSH
58552: LD_INT 118
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: ST_TO_ADDR
58577: GO 60472
58579: LD_INT 11
58581: DOUBLE
58582: EQUAL
58583: IFTRUE 58587
58585: GO 58791
58587: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
58588: LD_ADDR_VAR 0 2
58592: PUSH
58593: LD_INT 2
58595: PUSH
58596: LD_INT 3
58598: PUSH
58599: LD_INT 4
58601: PUSH
58602: LD_INT 5
58604: PUSH
58605: LD_INT 6
58607: PUSH
58608: LD_INT 7
58610: PUSH
58611: LD_INT 8
58613: PUSH
58614: LD_INT 9
58616: PUSH
58617: LD_INT 10
58619: PUSH
58620: LD_INT 11
58622: PUSH
58623: LD_INT 12
58625: PUSH
58626: LD_INT 13
58628: PUSH
58629: LD_INT 14
58631: PUSH
58632: LD_INT 15
58634: PUSH
58635: LD_INT 16
58637: PUSH
58638: LD_INT 17
58640: PUSH
58641: LD_INT 18
58643: PUSH
58644: LD_INT 19
58646: PUSH
58647: LD_INT 20
58649: PUSH
58650: LD_INT 21
58652: PUSH
58653: LD_INT 22
58655: PUSH
58656: LD_INT 23
58658: PUSH
58659: LD_INT 24
58661: PUSH
58662: LD_INT 25
58664: PUSH
58665: LD_INT 26
58667: PUSH
58668: LD_INT 28
58670: PUSH
58671: LD_INT 30
58673: PUSH
58674: LD_INT 31
58676: PUSH
58677: LD_INT 32
58679: PUSH
58680: LD_INT 34
58682: PUSH
58683: LD_INT 36
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 101
58721: PUSH
58722: LD_INT 102
58724: PUSH
58725: LD_INT 103
58727: PUSH
58728: LD_INT 104
58730: PUSH
58731: LD_INT 105
58733: PUSH
58734: LD_INT 106
58736: PUSH
58737: LD_INT 107
58739: PUSH
58740: LD_INT 108
58742: PUSH
58743: LD_INT 109
58745: PUSH
58746: LD_INT 110
58748: PUSH
58749: LD_INT 111
58751: PUSH
58752: LD_INT 112
58754: PUSH
58755: LD_INT 114
58757: PUSH
58758: LD_INT 116
58760: PUSH
58761: LD_INT 117
58763: PUSH
58764: LD_INT 118
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: ST_TO_ADDR
58789: GO 60472
58791: LD_INT 12
58793: DOUBLE
58794: EQUAL
58795: IFTRUE 58799
58797: GO 59019
58799: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
58800: LD_ADDR_VAR 0 2
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: LD_INT 2
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: LD_INT 4
58816: PUSH
58817: LD_INT 5
58819: PUSH
58820: LD_INT 6
58822: PUSH
58823: LD_INT 7
58825: PUSH
58826: LD_INT 8
58828: PUSH
58829: LD_INT 9
58831: PUSH
58832: LD_INT 10
58834: PUSH
58835: LD_INT 11
58837: PUSH
58838: LD_INT 12
58840: PUSH
58841: LD_INT 13
58843: PUSH
58844: LD_INT 14
58846: PUSH
58847: LD_INT 15
58849: PUSH
58850: LD_INT 16
58852: PUSH
58853: LD_INT 17
58855: PUSH
58856: LD_INT 18
58858: PUSH
58859: LD_INT 19
58861: PUSH
58862: LD_INT 20
58864: PUSH
58865: LD_INT 21
58867: PUSH
58868: LD_INT 22
58870: PUSH
58871: LD_INT 23
58873: PUSH
58874: LD_INT 24
58876: PUSH
58877: LD_INT 25
58879: PUSH
58880: LD_INT 26
58882: PUSH
58883: LD_INT 27
58885: PUSH
58886: LD_INT 28
58888: PUSH
58889: LD_INT 30
58891: PUSH
58892: LD_INT 31
58894: PUSH
58895: LD_INT 32
58897: PUSH
58898: LD_INT 33
58900: PUSH
58901: LD_INT 34
58903: PUSH
58904: LD_INT 36
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 101
58945: PUSH
58946: LD_INT 102
58948: PUSH
58949: LD_INT 103
58951: PUSH
58952: LD_INT 104
58954: PUSH
58955: LD_INT 105
58957: PUSH
58958: LD_INT 106
58960: PUSH
58961: LD_INT 107
58963: PUSH
58964: LD_INT 108
58966: PUSH
58967: LD_INT 109
58969: PUSH
58970: LD_INT 110
58972: PUSH
58973: LD_INT 111
58975: PUSH
58976: LD_INT 112
58978: PUSH
58979: LD_INT 113
58981: PUSH
58982: LD_INT 114
58984: PUSH
58985: LD_INT 116
58987: PUSH
58988: LD_INT 117
58990: PUSH
58991: LD_INT 118
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: ST_TO_ADDR
59017: GO 60472
59019: LD_INT 13
59021: DOUBLE
59022: EQUAL
59023: IFTRUE 59027
59025: GO 59235
59027: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
59028: LD_ADDR_VAR 0 2
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: LD_INT 3
59041: PUSH
59042: LD_INT 4
59044: PUSH
59045: LD_INT 5
59047: PUSH
59048: LD_INT 8
59050: PUSH
59051: LD_INT 9
59053: PUSH
59054: LD_INT 10
59056: PUSH
59057: LD_INT 11
59059: PUSH
59060: LD_INT 12
59062: PUSH
59063: LD_INT 14
59065: PUSH
59066: LD_INT 15
59068: PUSH
59069: LD_INT 16
59071: PUSH
59072: LD_INT 17
59074: PUSH
59075: LD_INT 18
59077: PUSH
59078: LD_INT 19
59080: PUSH
59081: LD_INT 20
59083: PUSH
59084: LD_INT 21
59086: PUSH
59087: LD_INT 22
59089: PUSH
59090: LD_INT 23
59092: PUSH
59093: LD_INT 24
59095: PUSH
59096: LD_INT 25
59098: PUSH
59099: LD_INT 26
59101: PUSH
59102: LD_INT 27
59104: PUSH
59105: LD_INT 28
59107: PUSH
59108: LD_INT 30
59110: PUSH
59111: LD_INT 31
59113: PUSH
59114: LD_INT 32
59116: PUSH
59117: LD_INT 33
59119: PUSH
59120: LD_INT 34
59122: PUSH
59123: LD_INT 36
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 101
59161: PUSH
59162: LD_INT 102
59164: PUSH
59165: LD_INT 103
59167: PUSH
59168: LD_INT 104
59170: PUSH
59171: LD_INT 105
59173: PUSH
59174: LD_INT 106
59176: PUSH
59177: LD_INT 107
59179: PUSH
59180: LD_INT 108
59182: PUSH
59183: LD_INT 109
59185: PUSH
59186: LD_INT 110
59188: PUSH
59189: LD_INT 111
59191: PUSH
59192: LD_INT 112
59194: PUSH
59195: LD_INT 113
59197: PUSH
59198: LD_INT 114
59200: PUSH
59201: LD_INT 116
59203: PUSH
59204: LD_INT 117
59206: PUSH
59207: LD_INT 118
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: ST_TO_ADDR
59233: GO 60472
59235: LD_INT 14
59237: DOUBLE
59238: EQUAL
59239: IFTRUE 59243
59241: GO 59467
59243: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
59244: LD_ADDR_VAR 0 2
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 2
59254: PUSH
59255: LD_INT 3
59257: PUSH
59258: LD_INT 4
59260: PUSH
59261: LD_INT 5
59263: PUSH
59264: LD_INT 6
59266: PUSH
59267: LD_INT 7
59269: PUSH
59270: LD_INT 8
59272: PUSH
59273: LD_INT 9
59275: PUSH
59276: LD_INT 10
59278: PUSH
59279: LD_INT 11
59281: PUSH
59282: LD_INT 12
59284: PUSH
59285: LD_INT 13
59287: PUSH
59288: LD_INT 14
59290: PUSH
59291: LD_INT 15
59293: PUSH
59294: LD_INT 16
59296: PUSH
59297: LD_INT 17
59299: PUSH
59300: LD_INT 18
59302: PUSH
59303: LD_INT 19
59305: PUSH
59306: LD_INT 20
59308: PUSH
59309: LD_INT 21
59311: PUSH
59312: LD_INT 22
59314: PUSH
59315: LD_INT 23
59317: PUSH
59318: LD_INT 24
59320: PUSH
59321: LD_INT 25
59323: PUSH
59324: LD_INT 26
59326: PUSH
59327: LD_INT 27
59329: PUSH
59330: LD_INT 28
59332: PUSH
59333: LD_INT 29
59335: PUSH
59336: LD_INT 30
59338: PUSH
59339: LD_INT 31
59341: PUSH
59342: LD_INT 32
59344: PUSH
59345: LD_INT 33
59347: PUSH
59348: LD_INT 34
59350: PUSH
59351: LD_INT 36
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 101
59393: PUSH
59394: LD_INT 102
59396: PUSH
59397: LD_INT 103
59399: PUSH
59400: LD_INT 104
59402: PUSH
59403: LD_INT 105
59405: PUSH
59406: LD_INT 106
59408: PUSH
59409: LD_INT 107
59411: PUSH
59412: LD_INT 108
59414: PUSH
59415: LD_INT 109
59417: PUSH
59418: LD_INT 110
59420: PUSH
59421: LD_INT 111
59423: PUSH
59424: LD_INT 112
59426: PUSH
59427: LD_INT 113
59429: PUSH
59430: LD_INT 114
59432: PUSH
59433: LD_INT 116
59435: PUSH
59436: LD_INT 117
59438: PUSH
59439: LD_INT 118
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: ST_TO_ADDR
59465: GO 60472
59467: LD_INT 15
59469: DOUBLE
59470: EQUAL
59471: IFTRUE 59475
59473: GO 59699
59475: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
59476: LD_ADDR_VAR 0 2
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: LD_INT 2
59486: PUSH
59487: LD_INT 3
59489: PUSH
59490: LD_INT 4
59492: PUSH
59493: LD_INT 5
59495: PUSH
59496: LD_INT 6
59498: PUSH
59499: LD_INT 7
59501: PUSH
59502: LD_INT 8
59504: PUSH
59505: LD_INT 9
59507: PUSH
59508: LD_INT 10
59510: PUSH
59511: LD_INT 11
59513: PUSH
59514: LD_INT 12
59516: PUSH
59517: LD_INT 13
59519: PUSH
59520: LD_INT 14
59522: PUSH
59523: LD_INT 15
59525: PUSH
59526: LD_INT 16
59528: PUSH
59529: LD_INT 17
59531: PUSH
59532: LD_INT 18
59534: PUSH
59535: LD_INT 19
59537: PUSH
59538: LD_INT 20
59540: PUSH
59541: LD_INT 21
59543: PUSH
59544: LD_INT 22
59546: PUSH
59547: LD_INT 23
59549: PUSH
59550: LD_INT 24
59552: PUSH
59553: LD_INT 25
59555: PUSH
59556: LD_INT 26
59558: PUSH
59559: LD_INT 27
59561: PUSH
59562: LD_INT 28
59564: PUSH
59565: LD_INT 29
59567: PUSH
59568: LD_INT 30
59570: PUSH
59571: LD_INT 31
59573: PUSH
59574: LD_INT 32
59576: PUSH
59577: LD_INT 33
59579: PUSH
59580: LD_INT 34
59582: PUSH
59583: LD_INT 36
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 101
59625: PUSH
59626: LD_INT 102
59628: PUSH
59629: LD_INT 103
59631: PUSH
59632: LD_INT 104
59634: PUSH
59635: LD_INT 105
59637: PUSH
59638: LD_INT 106
59640: PUSH
59641: LD_INT 107
59643: PUSH
59644: LD_INT 108
59646: PUSH
59647: LD_INT 109
59649: PUSH
59650: LD_INT 110
59652: PUSH
59653: LD_INT 111
59655: PUSH
59656: LD_INT 112
59658: PUSH
59659: LD_INT 113
59661: PUSH
59662: LD_INT 114
59664: PUSH
59665: LD_INT 116
59667: PUSH
59668: LD_INT 117
59670: PUSH
59671: LD_INT 118
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: ST_TO_ADDR
59697: GO 60472
59699: LD_INT 16
59701: DOUBLE
59702: EQUAL
59703: IFTRUE 59707
59705: GO 59843
59707: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
59708: LD_ADDR_VAR 0 2
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: LD_INT 4
59718: PUSH
59719: LD_INT 5
59721: PUSH
59722: LD_INT 7
59724: PUSH
59725: LD_INT 11
59727: PUSH
59728: LD_INT 12
59730: PUSH
59731: LD_INT 15
59733: PUSH
59734: LD_INT 16
59736: PUSH
59737: LD_INT 20
59739: PUSH
59740: LD_INT 21
59742: PUSH
59743: LD_INT 22
59745: PUSH
59746: LD_INT 23
59748: PUSH
59749: LD_INT 25
59751: PUSH
59752: LD_INT 26
59754: PUSH
59755: LD_INT 30
59757: PUSH
59758: LD_INT 31
59760: PUSH
59761: LD_INT 32
59763: PUSH
59764: LD_INT 33
59766: PUSH
59767: LD_INT 34
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 101
59793: PUSH
59794: LD_INT 102
59796: PUSH
59797: LD_INT 103
59799: PUSH
59800: LD_INT 106
59802: PUSH
59803: LD_INT 108
59805: PUSH
59806: LD_INT 112
59808: PUSH
59809: LD_INT 113
59811: PUSH
59812: LD_INT 114
59814: PUSH
59815: LD_INT 116
59817: PUSH
59818: LD_INT 117
59820: PUSH
59821: LD_INT 118
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: ST_TO_ADDR
59841: GO 60472
59843: LD_INT 17
59845: DOUBLE
59846: EQUAL
59847: IFTRUE 59851
59849: GO 60075
59851: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
59852: LD_ADDR_VAR 0 2
59856: PUSH
59857: LD_INT 1
59859: PUSH
59860: LD_INT 2
59862: PUSH
59863: LD_INT 3
59865: PUSH
59866: LD_INT 4
59868: PUSH
59869: LD_INT 5
59871: PUSH
59872: LD_INT 6
59874: PUSH
59875: LD_INT 7
59877: PUSH
59878: LD_INT 8
59880: PUSH
59881: LD_INT 9
59883: PUSH
59884: LD_INT 10
59886: PUSH
59887: LD_INT 11
59889: PUSH
59890: LD_INT 12
59892: PUSH
59893: LD_INT 13
59895: PUSH
59896: LD_INT 14
59898: PUSH
59899: LD_INT 15
59901: PUSH
59902: LD_INT 16
59904: PUSH
59905: LD_INT 17
59907: PUSH
59908: LD_INT 18
59910: PUSH
59911: LD_INT 19
59913: PUSH
59914: LD_INT 20
59916: PUSH
59917: LD_INT 21
59919: PUSH
59920: LD_INT 22
59922: PUSH
59923: LD_INT 23
59925: PUSH
59926: LD_INT 24
59928: PUSH
59929: LD_INT 25
59931: PUSH
59932: LD_INT 26
59934: PUSH
59935: LD_INT 27
59937: PUSH
59938: LD_INT 28
59940: PUSH
59941: LD_INT 29
59943: PUSH
59944: LD_INT 30
59946: PUSH
59947: LD_INT 31
59949: PUSH
59950: LD_INT 32
59952: PUSH
59953: LD_INT 33
59955: PUSH
59956: LD_INT 34
59958: PUSH
59959: LD_INT 36
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 101
60001: PUSH
60002: LD_INT 102
60004: PUSH
60005: LD_INT 103
60007: PUSH
60008: LD_INT 104
60010: PUSH
60011: LD_INT 105
60013: PUSH
60014: LD_INT 106
60016: PUSH
60017: LD_INT 107
60019: PUSH
60020: LD_INT 108
60022: PUSH
60023: LD_INT 109
60025: PUSH
60026: LD_INT 110
60028: PUSH
60029: LD_INT 111
60031: PUSH
60032: LD_INT 112
60034: PUSH
60035: LD_INT 113
60037: PUSH
60038: LD_INT 114
60040: PUSH
60041: LD_INT 116
60043: PUSH
60044: LD_INT 117
60046: PUSH
60047: LD_INT 118
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: ST_TO_ADDR
60073: GO 60472
60075: LD_INT 18
60077: DOUBLE
60078: EQUAL
60079: IFTRUE 60083
60081: GO 60231
60083: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
60084: LD_ADDR_VAR 0 2
60088: PUSH
60089: LD_INT 2
60091: PUSH
60092: LD_INT 4
60094: PUSH
60095: LD_INT 5
60097: PUSH
60098: LD_INT 7
60100: PUSH
60101: LD_INT 11
60103: PUSH
60104: LD_INT 12
60106: PUSH
60107: LD_INT 15
60109: PUSH
60110: LD_INT 16
60112: PUSH
60113: LD_INT 20
60115: PUSH
60116: LD_INT 21
60118: PUSH
60119: LD_INT 22
60121: PUSH
60122: LD_INT 23
60124: PUSH
60125: LD_INT 25
60127: PUSH
60128: LD_INT 26
60130: PUSH
60131: LD_INT 30
60133: PUSH
60134: LD_INT 31
60136: PUSH
60137: LD_INT 32
60139: PUSH
60140: LD_INT 33
60142: PUSH
60143: LD_INT 34
60145: PUSH
60146: LD_INT 35
60148: PUSH
60149: LD_INT 36
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 101
60177: PUSH
60178: LD_INT 102
60180: PUSH
60181: LD_INT 103
60183: PUSH
60184: LD_INT 106
60186: PUSH
60187: LD_INT 108
60189: PUSH
60190: LD_INT 112
60192: PUSH
60193: LD_INT 113
60195: PUSH
60196: LD_INT 114
60198: PUSH
60199: LD_INT 115
60201: PUSH
60202: LD_INT 116
60204: PUSH
60205: LD_INT 117
60207: PUSH
60208: LD_INT 118
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: ST_TO_ADDR
60229: GO 60472
60231: LD_INT 19
60233: DOUBLE
60234: EQUAL
60235: IFTRUE 60239
60237: GO 60471
60239: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
60240: LD_ADDR_VAR 0 2
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: LD_INT 2
60250: PUSH
60251: LD_INT 3
60253: PUSH
60254: LD_INT 4
60256: PUSH
60257: LD_INT 5
60259: PUSH
60260: LD_INT 6
60262: PUSH
60263: LD_INT 7
60265: PUSH
60266: LD_INT 8
60268: PUSH
60269: LD_INT 9
60271: PUSH
60272: LD_INT 10
60274: PUSH
60275: LD_INT 11
60277: PUSH
60278: LD_INT 12
60280: PUSH
60281: LD_INT 13
60283: PUSH
60284: LD_INT 14
60286: PUSH
60287: LD_INT 15
60289: PUSH
60290: LD_INT 16
60292: PUSH
60293: LD_INT 17
60295: PUSH
60296: LD_INT 18
60298: PUSH
60299: LD_INT 19
60301: PUSH
60302: LD_INT 20
60304: PUSH
60305: LD_INT 21
60307: PUSH
60308: LD_INT 22
60310: PUSH
60311: LD_INT 23
60313: PUSH
60314: LD_INT 24
60316: PUSH
60317: LD_INT 25
60319: PUSH
60320: LD_INT 26
60322: PUSH
60323: LD_INT 27
60325: PUSH
60326: LD_INT 28
60328: PUSH
60329: LD_INT 29
60331: PUSH
60332: LD_INT 30
60334: PUSH
60335: LD_INT 31
60337: PUSH
60338: LD_INT 32
60340: PUSH
60341: LD_INT 33
60343: PUSH
60344: LD_INT 34
60346: PUSH
60347: LD_INT 35
60349: PUSH
60350: LD_INT 36
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 101
60393: PUSH
60394: LD_INT 102
60396: PUSH
60397: LD_INT 103
60399: PUSH
60400: LD_INT 104
60402: PUSH
60403: LD_INT 105
60405: PUSH
60406: LD_INT 106
60408: PUSH
60409: LD_INT 107
60411: PUSH
60412: LD_INT 108
60414: PUSH
60415: LD_INT 109
60417: PUSH
60418: LD_INT 110
60420: PUSH
60421: LD_INT 111
60423: PUSH
60424: LD_INT 112
60426: PUSH
60427: LD_INT 113
60429: PUSH
60430: LD_INT 114
60432: PUSH
60433: LD_INT 115
60435: PUSH
60436: LD_INT 116
60438: PUSH
60439: LD_INT 117
60441: PUSH
60442: LD_INT 118
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: ST_TO_ADDR
60469: GO 60472
60471: POP
// end else
60472: GO 60703
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
60474: LD_ADDR_VAR 0 2
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: LD_INT 2
60484: PUSH
60485: LD_INT 3
60487: PUSH
60488: LD_INT 4
60490: PUSH
60491: LD_INT 5
60493: PUSH
60494: LD_INT 6
60496: PUSH
60497: LD_INT 7
60499: PUSH
60500: LD_INT 8
60502: PUSH
60503: LD_INT 9
60505: PUSH
60506: LD_INT 10
60508: PUSH
60509: LD_INT 11
60511: PUSH
60512: LD_INT 12
60514: PUSH
60515: LD_INT 13
60517: PUSH
60518: LD_INT 14
60520: PUSH
60521: LD_INT 15
60523: PUSH
60524: LD_INT 16
60526: PUSH
60527: LD_INT 17
60529: PUSH
60530: LD_INT 18
60532: PUSH
60533: LD_INT 19
60535: PUSH
60536: LD_INT 20
60538: PUSH
60539: LD_INT 21
60541: PUSH
60542: LD_INT 22
60544: PUSH
60545: LD_INT 23
60547: PUSH
60548: LD_INT 24
60550: PUSH
60551: LD_INT 25
60553: PUSH
60554: LD_INT 26
60556: PUSH
60557: LD_INT 27
60559: PUSH
60560: LD_INT 28
60562: PUSH
60563: LD_INT 29
60565: PUSH
60566: LD_INT 30
60568: PUSH
60569: LD_INT 31
60571: PUSH
60572: LD_INT 32
60574: PUSH
60575: LD_INT 33
60577: PUSH
60578: LD_INT 34
60580: PUSH
60581: LD_INT 35
60583: PUSH
60584: LD_INT 36
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 101
60627: PUSH
60628: LD_INT 102
60630: PUSH
60631: LD_INT 103
60633: PUSH
60634: LD_INT 104
60636: PUSH
60637: LD_INT 105
60639: PUSH
60640: LD_INT 106
60642: PUSH
60643: LD_INT 107
60645: PUSH
60646: LD_INT 108
60648: PUSH
60649: LD_INT 109
60651: PUSH
60652: LD_INT 110
60654: PUSH
60655: LD_INT 111
60657: PUSH
60658: LD_INT 112
60660: PUSH
60661: LD_INT 113
60663: PUSH
60664: LD_INT 114
60666: PUSH
60667: LD_INT 115
60669: PUSH
60670: LD_INT 116
60672: PUSH
60673: LD_INT 117
60675: PUSH
60676: LD_INT 118
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: ST_TO_ADDR
// if result then
60703: LD_VAR 0 2
60707: IFFALSE 61493
// begin normal :=  ;
60709: LD_ADDR_VAR 0 5
60713: PUSH
60714: LD_STRING 
60716: ST_TO_ADDR
// hardcore :=  ;
60717: LD_ADDR_VAR 0 6
60721: PUSH
60722: LD_STRING 
60724: ST_TO_ADDR
// active :=  ;
60725: LD_ADDR_VAR 0 7
60729: PUSH
60730: LD_STRING 
60732: ST_TO_ADDR
// for i = 1 to normalCounter do
60733: LD_ADDR_VAR 0 8
60737: PUSH
60738: DOUBLE
60739: LD_INT 1
60741: DEC
60742: ST_TO_ADDR
60743: LD_EXP 52
60747: PUSH
60748: FOR_TO
60749: IFFALSE 60850
// begin tmp := 0 ;
60751: LD_ADDR_VAR 0 3
60755: PUSH
60756: LD_STRING 0
60758: ST_TO_ADDR
// if result [ 1 ] then
60759: LD_VAR 0 2
60763: PUSH
60764: LD_INT 1
60766: ARRAY
60767: IFFALSE 60832
// if result [ 1 ] [ 1 ] = i then
60769: LD_VAR 0 2
60773: PUSH
60774: LD_INT 1
60776: ARRAY
60777: PUSH
60778: LD_INT 1
60780: ARRAY
60781: PUSH
60782: LD_VAR 0 8
60786: EQUAL
60787: IFFALSE 60832
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
60789: LD_ADDR_VAR 0 2
60793: PUSH
60794: LD_VAR 0 2
60798: PPUSH
60799: LD_INT 1
60801: PPUSH
60802: LD_VAR 0 2
60806: PUSH
60807: LD_INT 1
60809: ARRAY
60810: PPUSH
60811: LD_INT 1
60813: PPUSH
60814: CALL_OW 3
60818: PPUSH
60819: CALL_OW 1
60823: ST_TO_ADDR
// tmp := 1 ;
60824: LD_ADDR_VAR 0 3
60828: PUSH
60829: LD_STRING 1
60831: ST_TO_ADDR
// end ; normal := normal & tmp ;
60832: LD_ADDR_VAR 0 5
60836: PUSH
60837: LD_VAR 0 5
60841: PUSH
60842: LD_VAR 0 3
60846: STR
60847: ST_TO_ADDR
// end ;
60848: GO 60748
60850: POP
60851: POP
// for i = 1 to hardcoreCounter do
60852: LD_ADDR_VAR 0 8
60856: PUSH
60857: DOUBLE
60858: LD_INT 1
60860: DEC
60861: ST_TO_ADDR
60862: LD_EXP 53
60866: PUSH
60867: FOR_TO
60868: IFFALSE 60973
// begin tmp := 0 ;
60870: LD_ADDR_VAR 0 3
60874: PUSH
60875: LD_STRING 0
60877: ST_TO_ADDR
// if result [ 2 ] then
60878: LD_VAR 0 2
60882: PUSH
60883: LD_INT 2
60885: ARRAY
60886: IFFALSE 60955
// if result [ 2 ] [ 1 ] = 100 + i then
60888: LD_VAR 0 2
60892: PUSH
60893: LD_INT 2
60895: ARRAY
60896: PUSH
60897: LD_INT 1
60899: ARRAY
60900: PUSH
60901: LD_INT 100
60903: PUSH
60904: LD_VAR 0 8
60908: PLUS
60909: EQUAL
60910: IFFALSE 60955
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
60912: LD_ADDR_VAR 0 2
60916: PUSH
60917: LD_VAR 0 2
60921: PPUSH
60922: LD_INT 2
60924: PPUSH
60925: LD_VAR 0 2
60929: PUSH
60930: LD_INT 2
60932: ARRAY
60933: PPUSH
60934: LD_INT 1
60936: PPUSH
60937: CALL_OW 3
60941: PPUSH
60942: CALL_OW 1
60946: ST_TO_ADDR
// tmp := 1 ;
60947: LD_ADDR_VAR 0 3
60951: PUSH
60952: LD_STRING 1
60954: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
60955: LD_ADDR_VAR 0 6
60959: PUSH
60960: LD_VAR 0 6
60964: PUSH
60965: LD_VAR 0 3
60969: STR
60970: ST_TO_ADDR
// end ;
60971: GO 60867
60973: POP
60974: POP
// if isGameLoad then
60975: LD_VAR 0 1
60979: IFFALSE 61454
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
60981: LD_ADDR_VAR 0 4
60985: PUSH
60986: LD_EXP 56
60990: PUSH
60991: LD_EXP 55
60995: PUSH
60996: LD_EXP 57
61000: PUSH
61001: LD_EXP 54
61005: PUSH
61006: LD_EXP 58
61010: PUSH
61011: LD_EXP 59
61015: PUSH
61016: LD_EXP 60
61020: PUSH
61021: LD_EXP 61
61025: PUSH
61026: LD_EXP 62
61030: PUSH
61031: LD_EXP 63
61035: PUSH
61036: LD_EXP 64
61040: PUSH
61041: LD_EXP 65
61045: PUSH
61046: LD_EXP 66
61050: PUSH
61051: LD_EXP 67
61055: PUSH
61056: LD_EXP 75
61060: PUSH
61061: LD_EXP 76
61065: PUSH
61066: LD_EXP 77
61070: PUSH
61071: LD_EXP 78
61075: PUSH
61076: LD_EXP 80
61080: PUSH
61081: LD_EXP 81
61085: PUSH
61086: LD_EXP 82
61090: PUSH
61091: LD_EXP 85
61095: PUSH
61096: LD_EXP 87
61100: PUSH
61101: LD_EXP 88
61105: PUSH
61106: LD_EXP 89
61110: PUSH
61111: LD_EXP 91
61115: PUSH
61116: LD_EXP 92
61120: PUSH
61121: LD_EXP 95
61125: PUSH
61126: LD_EXP 96
61130: PUSH
61131: LD_EXP 97
61135: PUSH
61136: LD_EXP 98
61140: PUSH
61141: LD_EXP 99
61145: PUSH
61146: LD_EXP 100
61150: PUSH
61151: LD_EXP 101
61155: PUSH
61156: LD_EXP 102
61160: PUSH
61161: LD_EXP 103
61165: PUSH
61166: LD_EXP 68
61170: PUSH
61171: LD_EXP 69
61175: PUSH
61176: LD_EXP 72
61180: PUSH
61181: LD_EXP 73
61185: PUSH
61186: LD_EXP 74
61190: PUSH
61191: LD_EXP 70
61195: PUSH
61196: LD_EXP 71
61200: PUSH
61201: LD_EXP 79
61205: PUSH
61206: LD_EXP 83
61210: PUSH
61211: LD_EXP 84
61215: PUSH
61216: LD_EXP 86
61220: PUSH
61221: LD_EXP 90
61225: PUSH
61226: LD_EXP 93
61230: PUSH
61231: LD_EXP 94
61235: PUSH
61236: LD_EXP 104
61240: PUSH
61241: LD_EXP 105
61245: PUSH
61246: LD_EXP 106
61250: PUSH
61251: LD_EXP 107
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: ST_TO_ADDR
// tmp :=  ;
61312: LD_ADDR_VAR 0 3
61316: PUSH
61317: LD_STRING 
61319: ST_TO_ADDR
// for i = 1 to normalCounter do
61320: LD_ADDR_VAR 0 8
61324: PUSH
61325: DOUBLE
61326: LD_INT 1
61328: DEC
61329: ST_TO_ADDR
61330: LD_EXP 52
61334: PUSH
61335: FOR_TO
61336: IFFALSE 61372
// begin if flags [ i ] then
61338: LD_VAR 0 4
61342: PUSH
61343: LD_VAR 0 8
61347: ARRAY
61348: IFFALSE 61370
// tmp := tmp & i & ; ;
61350: LD_ADDR_VAR 0 3
61354: PUSH
61355: LD_VAR 0 3
61359: PUSH
61360: LD_VAR 0 8
61364: STR
61365: PUSH
61366: LD_STRING ;
61368: STR
61369: ST_TO_ADDR
// end ;
61370: GO 61335
61372: POP
61373: POP
// for i = 1 to hardcoreCounter do
61374: LD_ADDR_VAR 0 8
61378: PUSH
61379: DOUBLE
61380: LD_INT 1
61382: DEC
61383: ST_TO_ADDR
61384: LD_EXP 53
61388: PUSH
61389: FOR_TO
61390: IFFALSE 61436
// begin if flags [ normalCounter + i ] then
61392: LD_VAR 0 4
61396: PUSH
61397: LD_EXP 52
61401: PUSH
61402: LD_VAR 0 8
61406: PLUS
61407: ARRAY
61408: IFFALSE 61434
// tmp := tmp & ( 100 + i ) & ; ;
61410: LD_ADDR_VAR 0 3
61414: PUSH
61415: LD_VAR 0 3
61419: PUSH
61420: LD_INT 100
61422: PUSH
61423: LD_VAR 0 8
61427: PLUS
61428: STR
61429: PUSH
61430: LD_STRING ;
61432: STR
61433: ST_TO_ADDR
// end ;
61434: GO 61389
61436: POP
61437: POP
// if tmp then
61438: LD_VAR 0 3
61442: IFFALSE 61454
// active := tmp ;
61444: LD_ADDR_VAR 0 7
61448: PUSH
61449: LD_VAR 0 3
61453: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
61454: LD_STRING getStreamItemsFromMission("
61456: PUSH
61457: LD_VAR 0 5
61461: STR
61462: PUSH
61463: LD_STRING ","
61465: STR
61466: PUSH
61467: LD_VAR 0 6
61471: STR
61472: PUSH
61473: LD_STRING ","
61475: STR
61476: PUSH
61477: LD_VAR 0 7
61481: STR
61482: PUSH
61483: LD_STRING ")
61485: STR
61486: PPUSH
61487: CALL_OW 559
// end else
61491: GO 61500
// ToLua ( getStreamItemsFromMission("","","") ) ;
61493: LD_STRING getStreamItemsFromMission("","","")
61495: PPUSH
61496: CALL_OW 559
// end ;
61500: LD_VAR 0 2
61504: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
61505: LD_EXP 51
61509: PUSH
61510: LD_EXP 56
61514: AND
61515: IFFALSE 61639
61517: GO 61519
61519: DISABLE
61520: LD_INT 0
61522: PPUSH
61523: PPUSH
// begin enable ;
61524: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
61525: LD_ADDR_VAR 0 2
61529: PUSH
61530: LD_INT 22
61532: PUSH
61533: LD_OWVAR 2
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: PUSH
61545: LD_INT 34
61547: PUSH
61548: LD_INT 7
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 34
61557: PUSH
61558: LD_INT 45
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 34
61567: PUSH
61568: LD_INT 28
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 34
61577: PUSH
61578: LD_INT 47
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PPUSH
61596: CALL_OW 69
61600: ST_TO_ADDR
// if not tmp then
61601: LD_VAR 0 2
61605: NOT
61606: IFFALSE 61610
// exit ;
61608: GO 61639
// for i in tmp do
61610: LD_ADDR_VAR 0 1
61614: PUSH
61615: LD_VAR 0 2
61619: PUSH
61620: FOR_IN
61621: IFFALSE 61637
// begin SetLives ( i , 0 ) ;
61623: LD_VAR 0 1
61627: PPUSH
61628: LD_INT 0
61630: PPUSH
61631: CALL_OW 234
// end ;
61635: GO 61620
61637: POP
61638: POP
// end ;
61639: PPOPN 2
61641: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
61642: LD_EXP 51
61646: PUSH
61647: LD_EXP 57
61651: AND
61652: IFFALSE 61736
61654: GO 61656
61656: DISABLE
61657: LD_INT 0
61659: PPUSH
61660: PPUSH
// begin enable ;
61661: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
61662: LD_ADDR_VAR 0 2
61666: PUSH
61667: LD_INT 22
61669: PUSH
61670: LD_OWVAR 2
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 32
61681: PUSH
61682: LD_INT 3
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PPUSH
61693: CALL_OW 69
61697: ST_TO_ADDR
// if not tmp then
61698: LD_VAR 0 2
61702: NOT
61703: IFFALSE 61707
// exit ;
61705: GO 61736
// for i in tmp do
61707: LD_ADDR_VAR 0 1
61711: PUSH
61712: LD_VAR 0 2
61716: PUSH
61717: FOR_IN
61718: IFFALSE 61734
// begin SetLives ( i , 0 ) ;
61720: LD_VAR 0 1
61724: PPUSH
61725: LD_INT 0
61727: PPUSH
61728: CALL_OW 234
// end ;
61732: GO 61717
61734: POP
61735: POP
// end ;
61736: PPOPN 2
61738: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
61739: LD_EXP 51
61743: PUSH
61744: LD_EXP 54
61748: AND
61749: IFFALSE 61842
61751: GO 61753
61753: DISABLE
61754: LD_INT 0
61756: PPUSH
// begin enable ;
61757: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
61758: LD_ADDR_VAR 0 1
61762: PUSH
61763: LD_INT 22
61765: PUSH
61766: LD_OWVAR 2
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 2
61777: PUSH
61778: LD_INT 25
61780: PUSH
61781: LD_INT 5
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 25
61790: PUSH
61791: LD_INT 9
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 25
61800: PUSH
61801: LD_INT 8
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PPUSH
61818: CALL_OW 69
61822: PUSH
61823: FOR_IN
61824: IFFALSE 61840
// begin SetClass ( i , 1 ) ;
61826: LD_VAR 0 1
61830: PPUSH
61831: LD_INT 1
61833: PPUSH
61834: CALL_OW 336
// end ;
61838: GO 61823
61840: POP
61841: POP
// end ;
61842: PPOPN 1
61844: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
61845: LD_EXP 51
61849: PUSH
61850: LD_EXP 55
61854: AND
61855: PUSH
61856: LD_OWVAR 65
61860: PUSH
61861: LD_INT 7
61863: LESS
61864: AND
61865: IFFALSE 61879
61867: GO 61869
61869: DISABLE
// begin enable ;
61870: ENABLE
// game_speed := 7 ;
61871: LD_ADDR_OWVAR 65
61875: PUSH
61876: LD_INT 7
61878: ST_TO_ADDR
// end ;
61879: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
61880: LD_EXP 51
61884: PUSH
61885: LD_EXP 58
61889: AND
61890: IFFALSE 62092
61892: GO 61894
61894: DISABLE
61895: LD_INT 0
61897: PPUSH
61898: PPUSH
61899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
61900: LD_ADDR_VAR 0 3
61904: PUSH
61905: LD_INT 81
61907: PUSH
61908: LD_OWVAR 2
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 21
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PPUSH
61931: CALL_OW 69
61935: ST_TO_ADDR
// if not tmp then
61936: LD_VAR 0 3
61940: NOT
61941: IFFALSE 61945
// exit ;
61943: GO 62092
// if tmp > 5 then
61945: LD_VAR 0 3
61949: PUSH
61950: LD_INT 5
61952: GREATER
61953: IFFALSE 61965
// k := 5 else
61955: LD_ADDR_VAR 0 2
61959: PUSH
61960: LD_INT 5
61962: ST_TO_ADDR
61963: GO 61975
// k := tmp ;
61965: LD_ADDR_VAR 0 2
61969: PUSH
61970: LD_VAR 0 3
61974: ST_TO_ADDR
// for i := 1 to k do
61975: LD_ADDR_VAR 0 1
61979: PUSH
61980: DOUBLE
61981: LD_INT 1
61983: DEC
61984: ST_TO_ADDR
61985: LD_VAR 0 2
61989: PUSH
61990: FOR_TO
61991: IFFALSE 62090
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
61993: LD_VAR 0 3
61997: PUSH
61998: LD_VAR 0 1
62002: ARRAY
62003: PPUSH
62004: LD_VAR 0 1
62008: PUSH
62009: LD_INT 4
62011: MOD
62012: PUSH
62013: LD_INT 1
62015: PLUS
62016: PPUSH
62017: CALL_OW 259
62021: PUSH
62022: LD_INT 10
62024: LESS
62025: IFFALSE 62088
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
62027: LD_VAR 0 3
62031: PUSH
62032: LD_VAR 0 1
62036: ARRAY
62037: PPUSH
62038: LD_VAR 0 1
62042: PUSH
62043: LD_INT 4
62045: MOD
62046: PUSH
62047: LD_INT 1
62049: PLUS
62050: PPUSH
62051: LD_VAR 0 3
62055: PUSH
62056: LD_VAR 0 1
62060: ARRAY
62061: PPUSH
62062: LD_VAR 0 1
62066: PUSH
62067: LD_INT 4
62069: MOD
62070: PUSH
62071: LD_INT 1
62073: PLUS
62074: PPUSH
62075: CALL_OW 259
62079: PUSH
62080: LD_INT 1
62082: PLUS
62083: PPUSH
62084: CALL_OW 237
62088: GO 61990
62090: POP
62091: POP
// end ;
62092: PPOPN 3
62094: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
62095: LD_EXP 51
62099: PUSH
62100: LD_EXP 59
62104: AND
62105: IFFALSE 62125
62107: GO 62109
62109: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
62110: LD_INT 4
62112: PPUSH
62113: LD_OWVAR 2
62117: PPUSH
62118: LD_INT 0
62120: PPUSH
62121: CALL_OW 324
62125: END
// every 0 0$1 trigger StreamModeActive and sShovel do
62126: LD_EXP 51
62130: PUSH
62131: LD_EXP 88
62135: AND
62136: IFFALSE 62156
62138: GO 62140
62140: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
62141: LD_INT 19
62143: PPUSH
62144: LD_OWVAR 2
62148: PPUSH
62149: LD_INT 0
62151: PPUSH
62152: CALL_OW 324
62156: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
62157: LD_EXP 51
62161: PUSH
62162: LD_EXP 60
62166: AND
62167: IFFALSE 62269
62169: GO 62171
62171: DISABLE
62172: LD_INT 0
62174: PPUSH
62175: PPUSH
// begin enable ;
62176: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
62177: LD_ADDR_VAR 0 2
62181: PUSH
62182: LD_INT 22
62184: PUSH
62185: LD_OWVAR 2
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 2
62196: PUSH
62197: LD_INT 34
62199: PUSH
62200: LD_INT 11
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 34
62209: PUSH
62210: LD_INT 30
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: LIST
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PPUSH
62226: CALL_OW 69
62230: ST_TO_ADDR
// if not tmp then
62231: LD_VAR 0 2
62235: NOT
62236: IFFALSE 62240
// exit ;
62238: GO 62269
// for i in tmp do
62240: LD_ADDR_VAR 0 1
62244: PUSH
62245: LD_VAR 0 2
62249: PUSH
62250: FOR_IN
62251: IFFALSE 62267
// begin SetLives ( i , 0 ) ;
62253: LD_VAR 0 1
62257: PPUSH
62258: LD_INT 0
62260: PPUSH
62261: CALL_OW 234
// end ;
62265: GO 62250
62267: POP
62268: POP
// end ;
62269: PPOPN 2
62271: END
// every 0 0$1 trigger StreamModeActive and sBunker do
62272: LD_EXP 51
62276: PUSH
62277: LD_EXP 61
62281: AND
62282: IFFALSE 62302
62284: GO 62286
62286: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
62287: LD_INT 32
62289: PPUSH
62290: LD_OWVAR 2
62294: PPUSH
62295: LD_INT 0
62297: PPUSH
62298: CALL_OW 324
62302: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
62303: LD_EXP 51
62307: PUSH
62308: LD_EXP 62
62312: AND
62313: IFFALSE 62494
62315: GO 62317
62317: DISABLE
62318: LD_INT 0
62320: PPUSH
62321: PPUSH
62322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
62323: LD_ADDR_VAR 0 2
62327: PUSH
62328: LD_INT 22
62330: PUSH
62331: LD_OWVAR 2
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 33
62342: PUSH
62343: LD_INT 3
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PPUSH
62354: CALL_OW 69
62358: ST_TO_ADDR
// if not tmp then
62359: LD_VAR 0 2
62363: NOT
62364: IFFALSE 62368
// exit ;
62366: GO 62494
// side := 0 ;
62368: LD_ADDR_VAR 0 3
62372: PUSH
62373: LD_INT 0
62375: ST_TO_ADDR
// for i := 1 to 8 do
62376: LD_ADDR_VAR 0 1
62380: PUSH
62381: DOUBLE
62382: LD_INT 1
62384: DEC
62385: ST_TO_ADDR
62386: LD_INT 8
62388: PUSH
62389: FOR_TO
62390: IFFALSE 62438
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
62392: LD_OWVAR 2
62396: PUSH
62397: LD_VAR 0 1
62401: NONEQUAL
62402: PUSH
62403: LD_OWVAR 2
62407: PPUSH
62408: LD_VAR 0 1
62412: PPUSH
62413: CALL_OW 81
62417: PUSH
62418: LD_INT 2
62420: EQUAL
62421: AND
62422: IFFALSE 62436
// begin side := i ;
62424: LD_ADDR_VAR 0 3
62428: PUSH
62429: LD_VAR 0 1
62433: ST_TO_ADDR
// break ;
62434: GO 62438
// end ;
62436: GO 62389
62438: POP
62439: POP
// if not side then
62440: LD_VAR 0 3
62444: NOT
62445: IFFALSE 62449
// exit ;
62447: GO 62494
// for i := 1 to tmp do
62449: LD_ADDR_VAR 0 1
62453: PUSH
62454: DOUBLE
62455: LD_INT 1
62457: DEC
62458: ST_TO_ADDR
62459: LD_VAR 0 2
62463: PUSH
62464: FOR_TO
62465: IFFALSE 62492
// if Prob ( 60 ) then
62467: LD_INT 60
62469: PPUSH
62470: CALL_OW 13
62474: IFFALSE 62490
// SetSide ( i , side ) ;
62476: LD_VAR 0 1
62480: PPUSH
62481: LD_VAR 0 3
62485: PPUSH
62486: CALL_OW 235
62490: GO 62464
62492: POP
62493: POP
// end ;
62494: PPOPN 3
62496: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
62497: LD_EXP 51
62501: PUSH
62502: LD_EXP 64
62506: AND
62507: IFFALSE 62626
62509: GO 62511
62511: DISABLE
62512: LD_INT 0
62514: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
62515: LD_ADDR_VAR 0 1
62519: PUSH
62520: LD_INT 22
62522: PUSH
62523: LD_OWVAR 2
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 21
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 3
62544: PUSH
62545: LD_INT 23
62547: PUSH
62548: LD_INT 0
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: LIST
62563: PPUSH
62564: CALL_OW 69
62568: PUSH
62569: FOR_IN
62570: IFFALSE 62624
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
62572: LD_VAR 0 1
62576: PPUSH
62577: CALL_OW 257
62581: PUSH
62582: LD_INT 1
62584: PUSH
62585: LD_INT 2
62587: PUSH
62588: LD_INT 3
62590: PUSH
62591: LD_INT 4
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: IN
62600: IFFALSE 62622
// SetClass ( un , rand ( 1 , 4 ) ) ;
62602: LD_VAR 0 1
62606: PPUSH
62607: LD_INT 1
62609: PPUSH
62610: LD_INT 4
62612: PPUSH
62613: CALL_OW 12
62617: PPUSH
62618: CALL_OW 336
62622: GO 62569
62624: POP
62625: POP
// end ;
62626: PPOPN 1
62628: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
62629: LD_EXP 51
62633: PUSH
62634: LD_EXP 63
62638: AND
62639: IFFALSE 62718
62641: GO 62643
62643: DISABLE
62644: LD_INT 0
62646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
62647: LD_ADDR_VAR 0 1
62651: PUSH
62652: LD_INT 22
62654: PUSH
62655: LD_OWVAR 2
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 21
62666: PUSH
62667: LD_INT 3
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PPUSH
62678: CALL_OW 69
62682: ST_TO_ADDR
// if not tmp then
62683: LD_VAR 0 1
62687: NOT
62688: IFFALSE 62692
// exit ;
62690: GO 62718
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
62692: LD_VAR 0 1
62696: PUSH
62697: LD_INT 1
62699: PPUSH
62700: LD_VAR 0 1
62704: PPUSH
62705: CALL_OW 12
62709: ARRAY
62710: PPUSH
62711: LD_INT 100
62713: PPUSH
62714: CALL_OW 234
// end ;
62718: PPOPN 1
62720: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
62721: LD_EXP 51
62725: PUSH
62726: LD_EXP 65
62730: AND
62731: IFFALSE 62829
62733: GO 62735
62735: DISABLE
62736: LD_INT 0
62738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62739: LD_ADDR_VAR 0 1
62743: PUSH
62744: LD_INT 22
62746: PUSH
62747: LD_OWVAR 2
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 21
62758: PUSH
62759: LD_INT 1
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PPUSH
62770: CALL_OW 69
62774: ST_TO_ADDR
// if not tmp then
62775: LD_VAR 0 1
62779: NOT
62780: IFFALSE 62784
// exit ;
62782: GO 62829
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
62784: LD_VAR 0 1
62788: PUSH
62789: LD_INT 1
62791: PPUSH
62792: LD_VAR 0 1
62796: PPUSH
62797: CALL_OW 12
62801: ARRAY
62802: PPUSH
62803: LD_INT 1
62805: PPUSH
62806: LD_INT 4
62808: PPUSH
62809: CALL_OW 12
62813: PPUSH
62814: LD_INT 3000
62816: PPUSH
62817: LD_INT 9000
62819: PPUSH
62820: CALL_OW 12
62824: PPUSH
62825: CALL_OW 492
// end ;
62829: PPOPN 1
62831: END
// every 0 0$1 trigger StreamModeActive and sDepot do
62832: LD_EXP 51
62836: PUSH
62837: LD_EXP 66
62841: AND
62842: IFFALSE 62862
62844: GO 62846
62846: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
62847: LD_INT 1
62849: PPUSH
62850: LD_OWVAR 2
62854: PPUSH
62855: LD_INT 0
62857: PPUSH
62858: CALL_OW 324
62862: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
62863: LD_EXP 51
62867: PUSH
62868: LD_EXP 67
62872: AND
62873: IFFALSE 62956
62875: GO 62877
62877: DISABLE
62878: LD_INT 0
62880: PPUSH
62881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
62882: LD_ADDR_VAR 0 2
62886: PUSH
62887: LD_INT 22
62889: PUSH
62890: LD_OWVAR 2
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 21
62901: PUSH
62902: LD_INT 3
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PPUSH
62913: CALL_OW 69
62917: ST_TO_ADDR
// if not tmp then
62918: LD_VAR 0 2
62922: NOT
62923: IFFALSE 62927
// exit ;
62925: GO 62956
// for i in tmp do
62927: LD_ADDR_VAR 0 1
62931: PUSH
62932: LD_VAR 0 2
62936: PUSH
62937: FOR_IN
62938: IFFALSE 62954
// SetBLevel ( i , 10 ) ;
62940: LD_VAR 0 1
62944: PPUSH
62945: LD_INT 10
62947: PPUSH
62948: CALL_OW 241
62952: GO 62937
62954: POP
62955: POP
// end ;
62956: PPOPN 2
62958: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
62959: LD_EXP 51
62963: PUSH
62964: LD_EXP 68
62968: AND
62969: IFFALSE 63080
62971: GO 62973
62973: DISABLE
62974: LD_INT 0
62976: PPUSH
62977: PPUSH
62978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62979: LD_ADDR_VAR 0 3
62983: PUSH
62984: LD_INT 22
62986: PUSH
62987: LD_OWVAR 2
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 25
62998: PUSH
62999: LD_INT 1
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PPUSH
63010: CALL_OW 69
63014: ST_TO_ADDR
// if not tmp then
63015: LD_VAR 0 3
63019: NOT
63020: IFFALSE 63024
// exit ;
63022: GO 63080
// un := tmp [ rand ( 1 , tmp ) ] ;
63024: LD_ADDR_VAR 0 2
63028: PUSH
63029: LD_VAR 0 3
63033: PUSH
63034: LD_INT 1
63036: PPUSH
63037: LD_VAR 0 3
63041: PPUSH
63042: CALL_OW 12
63046: ARRAY
63047: ST_TO_ADDR
// if Crawls ( un ) then
63048: LD_VAR 0 2
63052: PPUSH
63053: CALL_OW 318
63057: IFFALSE 63068
// ComWalk ( un ) ;
63059: LD_VAR 0 2
63063: PPUSH
63064: CALL_OW 138
// SetClass ( un , class_sniper ) ;
63068: LD_VAR 0 2
63072: PPUSH
63073: LD_INT 5
63075: PPUSH
63076: CALL_OW 336
// end ;
63080: PPOPN 3
63082: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
63083: LD_EXP 51
63087: PUSH
63088: LD_EXP 69
63092: AND
63093: PUSH
63094: LD_OWVAR 67
63098: PUSH
63099: LD_INT 4
63101: LESS
63102: AND
63103: IFFALSE 63122
63105: GO 63107
63107: DISABLE
// begin Difficulty := Difficulty + 1 ;
63108: LD_ADDR_OWVAR 67
63112: PUSH
63113: LD_OWVAR 67
63117: PUSH
63118: LD_INT 1
63120: PLUS
63121: ST_TO_ADDR
// end ;
63122: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
63123: LD_EXP 51
63127: PUSH
63128: LD_EXP 70
63132: AND
63133: IFFALSE 63236
63135: GO 63137
63137: DISABLE
63138: LD_INT 0
63140: PPUSH
// begin for i := 1 to 5 do
63141: LD_ADDR_VAR 0 1
63145: PUSH
63146: DOUBLE
63147: LD_INT 1
63149: DEC
63150: ST_TO_ADDR
63151: LD_INT 5
63153: PUSH
63154: FOR_TO
63155: IFFALSE 63234
// begin uc_nation := nation_nature ;
63157: LD_ADDR_OWVAR 21
63161: PUSH
63162: LD_INT 0
63164: ST_TO_ADDR
// uc_side := 0 ;
63165: LD_ADDR_OWVAR 20
63169: PUSH
63170: LD_INT 0
63172: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63173: LD_ADDR_OWVAR 29
63177: PUSH
63178: LD_INT 12
63180: PUSH
63181: LD_INT 12
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: ST_TO_ADDR
// hc_agressivity := 20 ;
63188: LD_ADDR_OWVAR 35
63192: PUSH
63193: LD_INT 20
63195: ST_TO_ADDR
// hc_class := class_tiger ;
63196: LD_ADDR_OWVAR 28
63200: PUSH
63201: LD_INT 14
63203: ST_TO_ADDR
// hc_gallery :=  ;
63204: LD_ADDR_OWVAR 33
63208: PUSH
63209: LD_STRING 
63211: ST_TO_ADDR
// hc_name :=  ;
63212: LD_ADDR_OWVAR 26
63216: PUSH
63217: LD_STRING 
63219: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
63220: CALL_OW 44
63224: PPUSH
63225: LD_INT 0
63227: PPUSH
63228: CALL_OW 51
// end ;
63232: GO 63154
63234: POP
63235: POP
// end ;
63236: PPOPN 1
63238: END
// every 0 0$1 trigger StreamModeActive and sBomb do
63239: LD_EXP 51
63243: PUSH
63244: LD_EXP 71
63248: AND
63249: IFFALSE 63258
63251: GO 63253
63253: DISABLE
// StreamSibBomb ;
63254: CALL 63259 0 0
63258: END
// export function StreamSibBomb ; var i , x , y ; begin
63259: LD_INT 0
63261: PPUSH
63262: PPUSH
63263: PPUSH
63264: PPUSH
// result := false ;
63265: LD_ADDR_VAR 0 1
63269: PUSH
63270: LD_INT 0
63272: ST_TO_ADDR
// for i := 1 to 16 do
63273: LD_ADDR_VAR 0 2
63277: PUSH
63278: DOUBLE
63279: LD_INT 1
63281: DEC
63282: ST_TO_ADDR
63283: LD_INT 16
63285: PUSH
63286: FOR_TO
63287: IFFALSE 63486
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
63289: LD_ADDR_VAR 0 3
63293: PUSH
63294: LD_INT 10
63296: PUSH
63297: LD_INT 20
63299: PUSH
63300: LD_INT 30
63302: PUSH
63303: LD_INT 40
63305: PUSH
63306: LD_INT 50
63308: PUSH
63309: LD_INT 60
63311: PUSH
63312: LD_INT 70
63314: PUSH
63315: LD_INT 80
63317: PUSH
63318: LD_INT 90
63320: PUSH
63321: LD_INT 100
63323: PUSH
63324: LD_INT 110
63326: PUSH
63327: LD_INT 120
63329: PUSH
63330: LD_INT 130
63332: PUSH
63333: LD_INT 140
63335: PUSH
63336: LD_INT 150
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 1
63358: PPUSH
63359: LD_INT 15
63361: PPUSH
63362: CALL_OW 12
63366: ARRAY
63367: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
63368: LD_ADDR_VAR 0 4
63372: PUSH
63373: LD_INT 10
63375: PUSH
63376: LD_INT 20
63378: PUSH
63379: LD_INT 30
63381: PUSH
63382: LD_INT 40
63384: PUSH
63385: LD_INT 50
63387: PUSH
63388: LD_INT 60
63390: PUSH
63391: LD_INT 70
63393: PUSH
63394: LD_INT 80
63396: PUSH
63397: LD_INT 90
63399: PUSH
63400: LD_INT 100
63402: PUSH
63403: LD_INT 110
63405: PUSH
63406: LD_INT 120
63408: PUSH
63409: LD_INT 130
63411: PUSH
63412: LD_INT 140
63414: PUSH
63415: LD_INT 150
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 1
63437: PPUSH
63438: LD_INT 15
63440: PPUSH
63441: CALL_OW 12
63445: ARRAY
63446: ST_TO_ADDR
// if ValidHex ( x , y ) then
63447: LD_VAR 0 3
63451: PPUSH
63452: LD_VAR 0 4
63456: PPUSH
63457: CALL_OW 488
63461: IFFALSE 63484
// begin result := [ x , y ] ;
63463: LD_ADDR_VAR 0 1
63467: PUSH
63468: LD_VAR 0 3
63472: PUSH
63473: LD_VAR 0 4
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: ST_TO_ADDR
// break ;
63482: GO 63486
// end ; end ;
63484: GO 63286
63486: POP
63487: POP
// if result then
63488: LD_VAR 0 1
63492: IFFALSE 63552
// begin ToLua ( playSibBomb() ) ;
63494: LD_STRING playSibBomb()
63496: PPUSH
63497: CALL_OW 559
// wait ( 0 0$14 ) ;
63501: LD_INT 490
63503: PPUSH
63504: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
63508: LD_VAR 0 1
63512: PUSH
63513: LD_INT 1
63515: ARRAY
63516: PPUSH
63517: LD_VAR 0 1
63521: PUSH
63522: LD_INT 2
63524: ARRAY
63525: PPUSH
63526: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
63530: LD_VAR 0 1
63534: PUSH
63535: LD_INT 1
63537: ARRAY
63538: PPUSH
63539: LD_VAR 0 1
63543: PUSH
63544: LD_INT 2
63546: ARRAY
63547: PPUSH
63548: CALL_OW 429
// end ; end ;
63552: LD_VAR 0 1
63556: RET
// every 0 0$1 trigger StreamModeActive and sReset do
63557: LD_EXP 51
63561: PUSH
63562: LD_EXP 73
63566: AND
63567: IFFALSE 63579
63569: GO 63571
63571: DISABLE
// YouLost (  ) ;
63572: LD_STRING 
63574: PPUSH
63575: CALL_OW 104
63579: END
// every 0 0$1 trigger StreamModeActive and sFog do
63580: LD_EXP 51
63584: PUSH
63585: LD_EXP 72
63589: AND
63590: IFFALSE 63604
63592: GO 63594
63594: DISABLE
// FogOff ( your_side ) ;
63595: LD_OWVAR 2
63599: PPUSH
63600: CALL_OW 344
63604: END
// every 0 0$1 trigger StreamModeActive and sSun do
63605: LD_EXP 51
63609: PUSH
63610: LD_EXP 74
63614: AND
63615: IFFALSE 63643
63617: GO 63619
63619: DISABLE
// begin solar_recharge_percent := 0 ;
63620: LD_ADDR_OWVAR 79
63624: PUSH
63625: LD_INT 0
63627: ST_TO_ADDR
// wait ( 5 5$00 ) ;
63628: LD_INT 10500
63630: PPUSH
63631: CALL_OW 67
// solar_recharge_percent := 100 ;
63635: LD_ADDR_OWVAR 79
63639: PUSH
63640: LD_INT 100
63642: ST_TO_ADDR
// end ;
63643: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
63644: LD_EXP 51
63648: PUSH
63649: LD_EXP 75
63653: AND
63654: IFFALSE 63893
63656: GO 63658
63658: DISABLE
63659: LD_INT 0
63661: PPUSH
63662: PPUSH
63663: PPUSH
// begin tmp := [ ] ;
63664: LD_ADDR_VAR 0 3
63668: PUSH
63669: EMPTY
63670: ST_TO_ADDR
// for i := 1 to 6 do
63671: LD_ADDR_VAR 0 1
63675: PUSH
63676: DOUBLE
63677: LD_INT 1
63679: DEC
63680: ST_TO_ADDR
63681: LD_INT 6
63683: PUSH
63684: FOR_TO
63685: IFFALSE 63790
// begin uc_nation := nation_nature ;
63687: LD_ADDR_OWVAR 21
63691: PUSH
63692: LD_INT 0
63694: ST_TO_ADDR
// uc_side := 0 ;
63695: LD_ADDR_OWVAR 20
63699: PUSH
63700: LD_INT 0
63702: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63703: LD_ADDR_OWVAR 29
63707: PUSH
63708: LD_INT 12
63710: PUSH
63711: LD_INT 12
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: ST_TO_ADDR
// hc_agressivity := 20 ;
63718: LD_ADDR_OWVAR 35
63722: PUSH
63723: LD_INT 20
63725: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
63726: LD_ADDR_OWVAR 28
63730: PUSH
63731: LD_INT 17
63733: ST_TO_ADDR
// hc_gallery :=  ;
63734: LD_ADDR_OWVAR 33
63738: PUSH
63739: LD_STRING 
63741: ST_TO_ADDR
// hc_name :=  ;
63742: LD_ADDR_OWVAR 26
63746: PUSH
63747: LD_STRING 
63749: ST_TO_ADDR
// un := CreateHuman ;
63750: LD_ADDR_VAR 0 2
63754: PUSH
63755: CALL_OW 44
63759: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
63760: LD_VAR 0 2
63764: PPUSH
63765: LD_INT 1
63767: PPUSH
63768: CALL_OW 51
// tmp := tmp ^ un ;
63772: LD_ADDR_VAR 0 3
63776: PUSH
63777: LD_VAR 0 3
63781: PUSH
63782: LD_VAR 0 2
63786: ADD
63787: ST_TO_ADDR
// end ;
63788: GO 63684
63790: POP
63791: POP
// repeat wait ( 0 0$1 ) ;
63792: LD_INT 35
63794: PPUSH
63795: CALL_OW 67
// for un in tmp do
63799: LD_ADDR_VAR 0 2
63803: PUSH
63804: LD_VAR 0 3
63808: PUSH
63809: FOR_IN
63810: IFFALSE 63884
// begin if IsDead ( un ) then
63812: LD_VAR 0 2
63816: PPUSH
63817: CALL_OW 301
63821: IFFALSE 63841
// begin tmp := tmp diff un ;
63823: LD_ADDR_VAR 0 3
63827: PUSH
63828: LD_VAR 0 3
63832: PUSH
63833: LD_VAR 0 2
63837: DIFF
63838: ST_TO_ADDR
// continue ;
63839: GO 63809
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
63841: LD_VAR 0 2
63845: PPUSH
63846: LD_INT 3
63848: PUSH
63849: LD_INT 22
63851: PUSH
63852: LD_INT 0
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PPUSH
63863: CALL_OW 69
63867: PPUSH
63868: LD_VAR 0 2
63872: PPUSH
63873: CALL_OW 74
63877: PPUSH
63878: CALL_OW 115
// end ;
63882: GO 63809
63884: POP
63885: POP
// until not tmp ;
63886: LD_VAR 0 3
63890: NOT
63891: IFFALSE 63792
// end ;
63893: PPOPN 3
63895: END
// every 0 0$1 trigger StreamModeActive and sTroll do
63896: LD_EXP 51
63900: PUSH
63901: LD_EXP 76
63905: AND
63906: IFFALSE 63960
63908: GO 63910
63910: DISABLE
// begin ToLua ( displayTroll(); ) ;
63911: LD_STRING displayTroll();
63913: PPUSH
63914: CALL_OW 559
// wait ( 3 3$00 ) ;
63918: LD_INT 6300
63920: PPUSH
63921: CALL_OW 67
// ToLua ( hideTroll(); ) ;
63925: LD_STRING hideTroll();
63927: PPUSH
63928: CALL_OW 559
// wait ( 1 1$00 ) ;
63932: LD_INT 2100
63934: PPUSH
63935: CALL_OW 67
// ToLua ( displayTroll(); ) ;
63939: LD_STRING displayTroll();
63941: PPUSH
63942: CALL_OW 559
// wait ( 1 1$00 ) ;
63946: LD_INT 2100
63948: PPUSH
63949: CALL_OW 67
// ToLua ( hideTroll(); ) ;
63953: LD_STRING hideTroll();
63955: PPUSH
63956: CALL_OW 559
// end ;
63960: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
63961: LD_EXP 51
63965: PUSH
63966: LD_EXP 77
63970: AND
63971: IFFALSE 64034
63973: GO 63975
63975: DISABLE
63976: LD_INT 0
63978: PPUSH
// begin p := 0 ;
63979: LD_ADDR_VAR 0 1
63983: PUSH
63984: LD_INT 0
63986: ST_TO_ADDR
// repeat game_speed := 1 ;
63987: LD_ADDR_OWVAR 65
63991: PUSH
63992: LD_INT 1
63994: ST_TO_ADDR
// wait ( 0 0$1 ) ;
63995: LD_INT 35
63997: PPUSH
63998: CALL_OW 67
// p := p + 1 ;
64002: LD_ADDR_VAR 0 1
64006: PUSH
64007: LD_VAR 0 1
64011: PUSH
64012: LD_INT 1
64014: PLUS
64015: ST_TO_ADDR
// until p >= 60 ;
64016: LD_VAR 0 1
64020: PUSH
64021: LD_INT 60
64023: GREATEREQUAL
64024: IFFALSE 63987
// game_speed := 4 ;
64026: LD_ADDR_OWVAR 65
64030: PUSH
64031: LD_INT 4
64033: ST_TO_ADDR
// end ;
64034: PPOPN 1
64036: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
64037: LD_EXP 51
64041: PUSH
64042: LD_EXP 78
64046: AND
64047: IFFALSE 64193
64049: GO 64051
64051: DISABLE
64052: LD_INT 0
64054: PPUSH
64055: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64056: LD_ADDR_VAR 0 1
64060: PUSH
64061: LD_INT 22
64063: PUSH
64064: LD_OWVAR 2
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 2
64075: PUSH
64076: LD_INT 30
64078: PUSH
64079: LD_INT 0
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 30
64088: PUSH
64089: LD_INT 1
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: LIST
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PPUSH
64105: CALL_OW 69
64109: ST_TO_ADDR
// if not depot then
64110: LD_VAR 0 1
64114: NOT
64115: IFFALSE 64119
// exit ;
64117: GO 64193
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
64119: LD_ADDR_VAR 0 2
64123: PUSH
64124: LD_VAR 0 1
64128: PUSH
64129: LD_INT 1
64131: PPUSH
64132: LD_VAR 0 1
64136: PPUSH
64137: CALL_OW 12
64141: ARRAY
64142: PPUSH
64143: CALL_OW 274
64147: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
64148: LD_VAR 0 2
64152: PPUSH
64153: LD_INT 1
64155: PPUSH
64156: LD_INT 0
64158: PPUSH
64159: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
64163: LD_VAR 0 2
64167: PPUSH
64168: LD_INT 2
64170: PPUSH
64171: LD_INT 0
64173: PPUSH
64174: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
64178: LD_VAR 0 2
64182: PPUSH
64183: LD_INT 3
64185: PPUSH
64186: LD_INT 0
64188: PPUSH
64189: CALL_OW 277
// end ;
64193: PPOPN 2
64195: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
64196: LD_EXP 51
64200: PUSH
64201: LD_EXP 79
64205: AND
64206: IFFALSE 64303
64208: GO 64210
64210: DISABLE
64211: LD_INT 0
64213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64214: LD_ADDR_VAR 0 1
64218: PUSH
64219: LD_INT 22
64221: PUSH
64222: LD_OWVAR 2
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 21
64233: PUSH
64234: LD_INT 1
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 3
64243: PUSH
64244: LD_INT 23
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: LIST
64262: PPUSH
64263: CALL_OW 69
64267: ST_TO_ADDR
// if not tmp then
64268: LD_VAR 0 1
64272: NOT
64273: IFFALSE 64277
// exit ;
64275: GO 64303
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
64277: LD_VAR 0 1
64281: PUSH
64282: LD_INT 1
64284: PPUSH
64285: LD_VAR 0 1
64289: PPUSH
64290: CALL_OW 12
64294: ARRAY
64295: PPUSH
64296: LD_INT 200
64298: PPUSH
64299: CALL_OW 234
// end ;
64303: PPOPN 1
64305: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
64306: LD_EXP 51
64310: PUSH
64311: LD_EXP 80
64315: AND
64316: IFFALSE 64395
64318: GO 64320
64320: DISABLE
64321: LD_INT 0
64323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
64324: LD_ADDR_VAR 0 1
64328: PUSH
64329: LD_INT 22
64331: PUSH
64332: LD_OWVAR 2
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 21
64343: PUSH
64344: LD_INT 2
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PPUSH
64355: CALL_OW 69
64359: ST_TO_ADDR
// if not tmp then
64360: LD_VAR 0 1
64364: NOT
64365: IFFALSE 64369
// exit ;
64367: GO 64395
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
64369: LD_VAR 0 1
64373: PUSH
64374: LD_INT 1
64376: PPUSH
64377: LD_VAR 0 1
64381: PPUSH
64382: CALL_OW 12
64386: ARRAY
64387: PPUSH
64388: LD_INT 60
64390: PPUSH
64391: CALL_OW 234
// end ;
64395: PPOPN 1
64397: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
64398: LD_EXP 51
64402: PUSH
64403: LD_EXP 81
64407: AND
64408: IFFALSE 64507
64410: GO 64412
64412: DISABLE
64413: LD_INT 0
64415: PPUSH
64416: PPUSH
// begin enable ;
64417: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
64418: LD_ADDR_VAR 0 1
64422: PUSH
64423: LD_INT 22
64425: PUSH
64426: LD_OWVAR 2
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 61
64437: PUSH
64438: EMPTY
64439: LIST
64440: PUSH
64441: LD_INT 33
64443: PUSH
64444: LD_INT 2
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: LIST
64455: PPUSH
64456: CALL_OW 69
64460: ST_TO_ADDR
// if not tmp then
64461: LD_VAR 0 1
64465: NOT
64466: IFFALSE 64470
// exit ;
64468: GO 64507
// for i in tmp do
64470: LD_ADDR_VAR 0 2
64474: PUSH
64475: LD_VAR 0 1
64479: PUSH
64480: FOR_IN
64481: IFFALSE 64505
// if IsControledBy ( i ) then
64483: LD_VAR 0 2
64487: PPUSH
64488: CALL_OW 312
64492: IFFALSE 64503
// ComUnlink ( i ) ;
64494: LD_VAR 0 2
64498: PPUSH
64499: CALL_OW 136
64503: GO 64480
64505: POP
64506: POP
// end ;
64507: PPOPN 2
64509: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
64510: LD_EXP 51
64514: PUSH
64515: LD_EXP 82
64519: AND
64520: IFFALSE 64660
64522: GO 64524
64524: DISABLE
64525: LD_INT 0
64527: PPUSH
64528: PPUSH
// begin ToLua ( displayPowell(); ) ;
64529: LD_STRING displayPowell();
64531: PPUSH
64532: CALL_OW 559
// uc_side := 0 ;
64536: LD_ADDR_OWVAR 20
64540: PUSH
64541: LD_INT 0
64543: ST_TO_ADDR
// uc_nation := 2 ;
64544: LD_ADDR_OWVAR 21
64548: PUSH
64549: LD_INT 2
64551: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
64552: LD_ADDR_OWVAR 37
64556: PUSH
64557: LD_INT 14
64559: ST_TO_ADDR
// vc_engine := engine_siberite ;
64560: LD_ADDR_OWVAR 39
64564: PUSH
64565: LD_INT 3
64567: ST_TO_ADDR
// vc_control := control_apeman ;
64568: LD_ADDR_OWVAR 38
64572: PUSH
64573: LD_INT 5
64575: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
64576: LD_ADDR_OWVAR 40
64580: PUSH
64581: LD_INT 29
64583: ST_TO_ADDR
// un := CreateVehicle ;
64584: LD_ADDR_VAR 0 2
64588: PUSH
64589: CALL_OW 45
64593: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
64594: LD_VAR 0 2
64598: PPUSH
64599: LD_INT 1
64601: PPUSH
64602: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
64606: LD_INT 35
64608: PPUSH
64609: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
64613: LD_VAR 0 2
64617: PPUSH
64618: LD_INT 22
64620: PUSH
64621: LD_OWVAR 2
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PPUSH
64630: CALL_OW 69
64634: PPUSH
64635: LD_VAR 0 2
64639: PPUSH
64640: CALL_OW 74
64644: PPUSH
64645: CALL_OW 115
// until IsDead ( un ) ;
64649: LD_VAR 0 2
64653: PPUSH
64654: CALL_OW 301
64658: IFFALSE 64606
// end ;
64660: PPOPN 2
64662: END
// every 0 0$1 trigger StreamModeActive and sStu do
64663: LD_EXP 51
64667: PUSH
64668: LD_EXP 90
64672: AND
64673: IFFALSE 64689
64675: GO 64677
64677: DISABLE
// begin ToLua ( displayStucuk(); ) ;
64678: LD_STRING displayStucuk();
64680: PPUSH
64681: CALL_OW 559
// ResetFog ;
64685: CALL_OW 335
// end ;
64689: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
64690: LD_EXP 51
64694: PUSH
64695: LD_EXP 83
64699: AND
64700: IFFALSE 64841
64702: GO 64704
64704: DISABLE
64705: LD_INT 0
64707: PPUSH
64708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
64709: LD_ADDR_VAR 0 2
64713: PUSH
64714: LD_INT 22
64716: PUSH
64717: LD_OWVAR 2
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 21
64728: PUSH
64729: LD_INT 1
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PPUSH
64740: CALL_OW 69
64744: ST_TO_ADDR
// if not tmp then
64745: LD_VAR 0 2
64749: NOT
64750: IFFALSE 64754
// exit ;
64752: GO 64841
// un := tmp [ rand ( 1 , tmp ) ] ;
64754: LD_ADDR_VAR 0 1
64758: PUSH
64759: LD_VAR 0 2
64763: PUSH
64764: LD_INT 1
64766: PPUSH
64767: LD_VAR 0 2
64771: PPUSH
64772: CALL_OW 12
64776: ARRAY
64777: ST_TO_ADDR
// SetSide ( un , 0 ) ;
64778: LD_VAR 0 1
64782: PPUSH
64783: LD_INT 0
64785: PPUSH
64786: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
64790: LD_VAR 0 1
64794: PPUSH
64795: LD_OWVAR 3
64799: PUSH
64800: LD_VAR 0 1
64804: DIFF
64805: PPUSH
64806: LD_VAR 0 1
64810: PPUSH
64811: CALL_OW 74
64815: PPUSH
64816: CALL_OW 115
// wait ( 0 0$20 ) ;
64820: LD_INT 700
64822: PPUSH
64823: CALL_OW 67
// SetSide ( un , your_side ) ;
64827: LD_VAR 0 1
64831: PPUSH
64832: LD_OWVAR 2
64836: PPUSH
64837: CALL_OW 235
// end ;
64841: PPOPN 2
64843: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
64844: LD_EXP 51
64848: PUSH
64849: LD_EXP 84
64853: AND
64854: IFFALSE 64960
64856: GO 64858
64858: DISABLE
64859: LD_INT 0
64861: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64862: LD_ADDR_VAR 0 1
64866: PUSH
64867: LD_INT 22
64869: PUSH
64870: LD_OWVAR 2
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 2
64881: PUSH
64882: LD_INT 30
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 30
64894: PUSH
64895: LD_INT 1
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: LIST
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PPUSH
64911: CALL_OW 69
64915: ST_TO_ADDR
// if not depot then
64916: LD_VAR 0 1
64920: NOT
64921: IFFALSE 64925
// exit ;
64923: GO 64960
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
64925: LD_VAR 0 1
64929: PUSH
64930: LD_INT 1
64932: ARRAY
64933: PPUSH
64934: CALL_OW 250
64938: PPUSH
64939: LD_VAR 0 1
64943: PUSH
64944: LD_INT 1
64946: ARRAY
64947: PPUSH
64948: CALL_OW 251
64952: PPUSH
64953: LD_INT 70
64955: PPUSH
64956: CALL_OW 495
// end ;
64960: PPOPN 1
64962: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
64963: LD_EXP 51
64967: PUSH
64968: LD_EXP 85
64972: AND
64973: IFFALSE 65184
64975: GO 64977
64977: DISABLE
64978: LD_INT 0
64980: PPUSH
64981: PPUSH
64982: PPUSH
64983: PPUSH
64984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
64985: LD_ADDR_VAR 0 5
64989: PUSH
64990: LD_INT 22
64992: PUSH
64993: LD_OWVAR 2
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 21
65004: PUSH
65005: LD_INT 1
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PPUSH
65016: CALL_OW 69
65020: ST_TO_ADDR
// if not tmp then
65021: LD_VAR 0 5
65025: NOT
65026: IFFALSE 65030
// exit ;
65028: GO 65184
// for i in tmp do
65030: LD_ADDR_VAR 0 1
65034: PUSH
65035: LD_VAR 0 5
65039: PUSH
65040: FOR_IN
65041: IFFALSE 65182
// begin d := rand ( 0 , 5 ) ;
65043: LD_ADDR_VAR 0 4
65047: PUSH
65048: LD_INT 0
65050: PPUSH
65051: LD_INT 5
65053: PPUSH
65054: CALL_OW 12
65058: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
65059: LD_ADDR_VAR 0 2
65063: PUSH
65064: LD_VAR 0 1
65068: PPUSH
65069: CALL_OW 250
65073: PPUSH
65074: LD_VAR 0 4
65078: PPUSH
65079: LD_INT 3
65081: PPUSH
65082: LD_INT 12
65084: PPUSH
65085: CALL_OW 12
65089: PPUSH
65090: CALL_OW 272
65094: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
65095: LD_ADDR_VAR 0 3
65099: PUSH
65100: LD_VAR 0 1
65104: PPUSH
65105: CALL_OW 251
65109: PPUSH
65110: LD_VAR 0 4
65114: PPUSH
65115: LD_INT 3
65117: PPUSH
65118: LD_INT 12
65120: PPUSH
65121: CALL_OW 12
65125: PPUSH
65126: CALL_OW 273
65130: ST_TO_ADDR
// if ValidHex ( x , y ) then
65131: LD_VAR 0 2
65135: PPUSH
65136: LD_VAR 0 3
65140: PPUSH
65141: CALL_OW 488
65145: IFFALSE 65180
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
65147: LD_VAR 0 1
65151: PPUSH
65152: LD_VAR 0 2
65156: PPUSH
65157: LD_VAR 0 3
65161: PPUSH
65162: LD_INT 3
65164: PPUSH
65165: LD_INT 6
65167: PPUSH
65168: CALL_OW 12
65172: PPUSH
65173: LD_INT 1
65175: PPUSH
65176: CALL_OW 483
// end ;
65180: GO 65040
65182: POP
65183: POP
// end ;
65184: PPOPN 5
65186: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
65187: LD_EXP 51
65191: PUSH
65192: LD_EXP 86
65196: AND
65197: IFFALSE 65291
65199: GO 65201
65201: DISABLE
65202: LD_INT 0
65204: PPUSH
65205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
65206: LD_ADDR_VAR 0 2
65210: PUSH
65211: LD_INT 22
65213: PUSH
65214: LD_OWVAR 2
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 32
65225: PUSH
65226: LD_INT 1
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 21
65235: PUSH
65236: LD_INT 2
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: LIST
65247: PPUSH
65248: CALL_OW 69
65252: ST_TO_ADDR
// if not tmp then
65253: LD_VAR 0 2
65257: NOT
65258: IFFALSE 65262
// exit ;
65260: GO 65291
// for i in tmp do
65262: LD_ADDR_VAR 0 1
65266: PUSH
65267: LD_VAR 0 2
65271: PUSH
65272: FOR_IN
65273: IFFALSE 65289
// SetFuel ( i , 0 ) ;
65275: LD_VAR 0 1
65279: PPUSH
65280: LD_INT 0
65282: PPUSH
65283: CALL_OW 240
65287: GO 65272
65289: POP
65290: POP
// end ;
65291: PPOPN 2
65293: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
65294: LD_EXP 51
65298: PUSH
65299: LD_EXP 87
65303: AND
65304: IFFALSE 65370
65306: GO 65308
65308: DISABLE
65309: LD_INT 0
65311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
65312: LD_ADDR_VAR 0 1
65316: PUSH
65317: LD_INT 22
65319: PUSH
65320: LD_OWVAR 2
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 30
65331: PUSH
65332: LD_INT 29
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PPUSH
65343: CALL_OW 69
65347: ST_TO_ADDR
// if not tmp then
65348: LD_VAR 0 1
65352: NOT
65353: IFFALSE 65357
// exit ;
65355: GO 65370
// DestroyUnit ( tmp [ 1 ] ) ;
65357: LD_VAR 0 1
65361: PUSH
65362: LD_INT 1
65364: ARRAY
65365: PPUSH
65366: CALL_OW 65
// end ;
65370: PPOPN 1
65372: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
65373: LD_EXP 51
65377: PUSH
65378: LD_EXP 89
65382: AND
65383: IFFALSE 65512
65385: GO 65387
65387: DISABLE
65388: LD_INT 0
65390: PPUSH
// begin uc_side := 0 ;
65391: LD_ADDR_OWVAR 20
65395: PUSH
65396: LD_INT 0
65398: ST_TO_ADDR
// uc_nation := nation_arabian ;
65399: LD_ADDR_OWVAR 21
65403: PUSH
65404: LD_INT 2
65406: ST_TO_ADDR
// hc_gallery :=  ;
65407: LD_ADDR_OWVAR 33
65411: PUSH
65412: LD_STRING 
65414: ST_TO_ADDR
// hc_name :=  ;
65415: LD_ADDR_OWVAR 26
65419: PUSH
65420: LD_STRING 
65422: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
65423: LD_INT 1
65425: PPUSH
65426: LD_INT 11
65428: PPUSH
65429: LD_INT 10
65431: PPUSH
65432: CALL_OW 380
// un := CreateHuman ;
65436: LD_ADDR_VAR 0 1
65440: PUSH
65441: CALL_OW 44
65445: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65446: LD_VAR 0 1
65450: PPUSH
65451: LD_INT 1
65453: PPUSH
65454: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
65458: LD_INT 35
65460: PPUSH
65461: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
65465: LD_VAR 0 1
65469: PPUSH
65470: LD_INT 22
65472: PUSH
65473: LD_OWVAR 2
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PPUSH
65482: CALL_OW 69
65486: PPUSH
65487: LD_VAR 0 1
65491: PPUSH
65492: CALL_OW 74
65496: PPUSH
65497: CALL_OW 115
// until IsDead ( un ) ;
65501: LD_VAR 0 1
65505: PPUSH
65506: CALL_OW 301
65510: IFFALSE 65458
// end ;
65512: PPOPN 1
65514: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
65515: LD_EXP 51
65519: PUSH
65520: LD_EXP 91
65524: AND
65525: IFFALSE 65537
65527: GO 65529
65529: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
65530: LD_STRING earthquake(getX(game), 0, 32)
65532: PPUSH
65533: CALL_OW 559
65537: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
65538: LD_EXP 51
65542: PUSH
65543: LD_EXP 92
65547: AND
65548: IFFALSE 65639
65550: GO 65552
65552: DISABLE
65553: LD_INT 0
65555: PPUSH
// begin enable ;
65556: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
65557: LD_ADDR_VAR 0 1
65561: PUSH
65562: LD_INT 22
65564: PUSH
65565: LD_OWVAR 2
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 21
65576: PUSH
65577: LD_INT 2
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 33
65586: PUSH
65587: LD_INT 3
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: LIST
65598: PPUSH
65599: CALL_OW 69
65603: ST_TO_ADDR
// if not tmp then
65604: LD_VAR 0 1
65608: NOT
65609: IFFALSE 65613
// exit ;
65611: GO 65639
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
65613: LD_VAR 0 1
65617: PUSH
65618: LD_INT 1
65620: PPUSH
65621: LD_VAR 0 1
65625: PPUSH
65626: CALL_OW 12
65630: ARRAY
65631: PPUSH
65632: LD_INT 1
65634: PPUSH
65635: CALL_OW 234
// end ;
65639: PPOPN 1
65641: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
65642: LD_EXP 51
65646: PUSH
65647: LD_EXP 93
65651: AND
65652: IFFALSE 65793
65654: GO 65656
65656: DISABLE
65657: LD_INT 0
65659: PPUSH
65660: PPUSH
65661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65662: LD_ADDR_VAR 0 3
65666: PUSH
65667: LD_INT 22
65669: PUSH
65670: LD_OWVAR 2
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 25
65681: PUSH
65682: LD_INT 1
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PPUSH
65693: CALL_OW 69
65697: ST_TO_ADDR
// if not tmp then
65698: LD_VAR 0 3
65702: NOT
65703: IFFALSE 65707
// exit ;
65705: GO 65793
// un := tmp [ rand ( 1 , tmp ) ] ;
65707: LD_ADDR_VAR 0 2
65711: PUSH
65712: LD_VAR 0 3
65716: PUSH
65717: LD_INT 1
65719: PPUSH
65720: LD_VAR 0 3
65724: PPUSH
65725: CALL_OW 12
65729: ARRAY
65730: ST_TO_ADDR
// if Crawls ( un ) then
65731: LD_VAR 0 2
65735: PPUSH
65736: CALL_OW 318
65740: IFFALSE 65751
// ComWalk ( un ) ;
65742: LD_VAR 0 2
65746: PPUSH
65747: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
65751: LD_VAR 0 2
65755: PPUSH
65756: LD_INT 9
65758: PPUSH
65759: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
65763: LD_INT 28
65765: PPUSH
65766: LD_OWVAR 2
65770: PPUSH
65771: LD_INT 2
65773: PPUSH
65774: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
65778: LD_INT 29
65780: PPUSH
65781: LD_OWVAR 2
65785: PPUSH
65786: LD_INT 2
65788: PPUSH
65789: CALL_OW 322
// end ;
65793: PPOPN 3
65795: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
65796: LD_EXP 51
65800: PUSH
65801: LD_EXP 94
65805: AND
65806: IFFALSE 65917
65808: GO 65810
65810: DISABLE
65811: LD_INT 0
65813: PPUSH
65814: PPUSH
65815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65816: LD_ADDR_VAR 0 3
65820: PUSH
65821: LD_INT 22
65823: PUSH
65824: LD_OWVAR 2
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 25
65835: PUSH
65836: LD_INT 1
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PPUSH
65847: CALL_OW 69
65851: ST_TO_ADDR
// if not tmp then
65852: LD_VAR 0 3
65856: NOT
65857: IFFALSE 65861
// exit ;
65859: GO 65917
// un := tmp [ rand ( 1 , tmp ) ] ;
65861: LD_ADDR_VAR 0 2
65865: PUSH
65866: LD_VAR 0 3
65870: PUSH
65871: LD_INT 1
65873: PPUSH
65874: LD_VAR 0 3
65878: PPUSH
65879: CALL_OW 12
65883: ARRAY
65884: ST_TO_ADDR
// if Crawls ( un ) then
65885: LD_VAR 0 2
65889: PPUSH
65890: CALL_OW 318
65894: IFFALSE 65905
// ComWalk ( un ) ;
65896: LD_VAR 0 2
65900: PPUSH
65901: CALL_OW 138
// SetClass ( un , class_mortar ) ;
65905: LD_VAR 0 2
65909: PPUSH
65910: LD_INT 8
65912: PPUSH
65913: CALL_OW 336
// end ;
65917: PPOPN 3
65919: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
65920: LD_EXP 51
65924: PUSH
65925: LD_EXP 95
65929: AND
65930: IFFALSE 66074
65932: GO 65934
65934: DISABLE
65935: LD_INT 0
65937: PPUSH
65938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
65939: LD_ADDR_VAR 0 2
65943: PUSH
65944: LD_INT 22
65946: PUSH
65947: LD_OWVAR 2
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 21
65958: PUSH
65959: LD_INT 2
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 2
65968: PUSH
65969: LD_INT 34
65971: PUSH
65972: LD_INT 12
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 34
65981: PUSH
65982: LD_INT 51
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 34
65991: PUSH
65992: LD_INT 32
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: LIST
66009: PPUSH
66010: CALL_OW 69
66014: ST_TO_ADDR
// if not tmp then
66015: LD_VAR 0 2
66019: NOT
66020: IFFALSE 66024
// exit ;
66022: GO 66074
// for i in tmp do
66024: LD_ADDR_VAR 0 1
66028: PUSH
66029: LD_VAR 0 2
66033: PUSH
66034: FOR_IN
66035: IFFALSE 66072
// if GetCargo ( i , mat_artifact ) = 0 then
66037: LD_VAR 0 1
66041: PPUSH
66042: LD_INT 4
66044: PPUSH
66045: CALL_OW 289
66049: PUSH
66050: LD_INT 0
66052: EQUAL
66053: IFFALSE 66070
// SetCargo ( i , mat_siberit , 100 ) ;
66055: LD_VAR 0 1
66059: PPUSH
66060: LD_INT 3
66062: PPUSH
66063: LD_INT 100
66065: PPUSH
66066: CALL_OW 290
66070: GO 66034
66072: POP
66073: POP
// end ;
66074: PPOPN 2
66076: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
66077: LD_EXP 51
66081: PUSH
66082: LD_EXP 96
66086: AND
66087: IFFALSE 66270
66089: GO 66091
66091: DISABLE
66092: LD_INT 0
66094: PPUSH
66095: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
66096: LD_ADDR_VAR 0 2
66100: PUSH
66101: LD_INT 22
66103: PUSH
66104: LD_OWVAR 2
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PPUSH
66113: CALL_OW 69
66117: ST_TO_ADDR
// if not tmp then
66118: LD_VAR 0 2
66122: NOT
66123: IFFALSE 66127
// exit ;
66125: GO 66270
// for i := 1 to 2 do
66127: LD_ADDR_VAR 0 1
66131: PUSH
66132: DOUBLE
66133: LD_INT 1
66135: DEC
66136: ST_TO_ADDR
66137: LD_INT 2
66139: PUSH
66140: FOR_TO
66141: IFFALSE 66268
// begin uc_side := your_side ;
66143: LD_ADDR_OWVAR 20
66147: PUSH
66148: LD_OWVAR 2
66152: ST_TO_ADDR
// uc_nation := nation_american ;
66153: LD_ADDR_OWVAR 21
66157: PUSH
66158: LD_INT 1
66160: ST_TO_ADDR
// vc_chassis := us_morphling ;
66161: LD_ADDR_OWVAR 37
66165: PUSH
66166: LD_INT 5
66168: ST_TO_ADDR
// vc_engine := engine_siberite ;
66169: LD_ADDR_OWVAR 39
66173: PUSH
66174: LD_INT 3
66176: ST_TO_ADDR
// vc_control := control_computer ;
66177: LD_ADDR_OWVAR 38
66181: PUSH
66182: LD_INT 3
66184: ST_TO_ADDR
// vc_weapon := us_double_laser ;
66185: LD_ADDR_OWVAR 40
66189: PUSH
66190: LD_INT 10
66192: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
66193: LD_VAR 0 2
66197: PUSH
66198: LD_INT 1
66200: ARRAY
66201: PPUSH
66202: CALL_OW 310
66206: NOT
66207: IFFALSE 66254
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
66209: CALL_OW 45
66213: PPUSH
66214: LD_VAR 0 2
66218: PUSH
66219: LD_INT 1
66221: ARRAY
66222: PPUSH
66223: CALL_OW 250
66227: PPUSH
66228: LD_VAR 0 2
66232: PUSH
66233: LD_INT 1
66235: ARRAY
66236: PPUSH
66237: CALL_OW 251
66241: PPUSH
66242: LD_INT 12
66244: PPUSH
66245: LD_INT 1
66247: PPUSH
66248: CALL_OW 50
66252: GO 66266
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
66254: CALL_OW 45
66258: PPUSH
66259: LD_INT 1
66261: PPUSH
66262: CALL_OW 51
// end ;
66266: GO 66140
66268: POP
66269: POP
// end ;
66270: PPOPN 2
66272: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
66273: LD_EXP 51
66277: PUSH
66278: LD_EXP 97
66282: AND
66283: IFFALSE 66505
66285: GO 66287
66287: DISABLE
66288: LD_INT 0
66290: PPUSH
66291: PPUSH
66292: PPUSH
66293: PPUSH
66294: PPUSH
66295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66296: LD_ADDR_VAR 0 6
66300: PUSH
66301: LD_INT 22
66303: PUSH
66304: LD_OWVAR 2
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 21
66315: PUSH
66316: LD_INT 1
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 3
66325: PUSH
66326: LD_INT 23
66328: PUSH
66329: LD_INT 0
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: LIST
66344: PPUSH
66345: CALL_OW 69
66349: ST_TO_ADDR
// if not tmp then
66350: LD_VAR 0 6
66354: NOT
66355: IFFALSE 66359
// exit ;
66357: GO 66505
// s1 := rand ( 1 , 4 ) ;
66359: LD_ADDR_VAR 0 2
66363: PUSH
66364: LD_INT 1
66366: PPUSH
66367: LD_INT 4
66369: PPUSH
66370: CALL_OW 12
66374: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
66375: LD_ADDR_VAR 0 4
66379: PUSH
66380: LD_VAR 0 6
66384: PUSH
66385: LD_INT 1
66387: ARRAY
66388: PPUSH
66389: LD_VAR 0 2
66393: PPUSH
66394: CALL_OW 259
66398: ST_TO_ADDR
// if s1 = 1 then
66399: LD_VAR 0 2
66403: PUSH
66404: LD_INT 1
66406: EQUAL
66407: IFFALSE 66427
// s2 := rand ( 2 , 4 ) else
66409: LD_ADDR_VAR 0 3
66413: PUSH
66414: LD_INT 2
66416: PPUSH
66417: LD_INT 4
66419: PPUSH
66420: CALL_OW 12
66424: ST_TO_ADDR
66425: GO 66435
// s2 := 1 ;
66427: LD_ADDR_VAR 0 3
66431: PUSH
66432: LD_INT 1
66434: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
66435: LD_ADDR_VAR 0 5
66439: PUSH
66440: LD_VAR 0 6
66444: PUSH
66445: LD_INT 1
66447: ARRAY
66448: PPUSH
66449: LD_VAR 0 3
66453: PPUSH
66454: CALL_OW 259
66458: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
66459: LD_VAR 0 6
66463: PUSH
66464: LD_INT 1
66466: ARRAY
66467: PPUSH
66468: LD_VAR 0 2
66472: PPUSH
66473: LD_VAR 0 5
66477: PPUSH
66478: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
66482: LD_VAR 0 6
66486: PUSH
66487: LD_INT 1
66489: ARRAY
66490: PPUSH
66491: LD_VAR 0 3
66495: PPUSH
66496: LD_VAR 0 4
66500: PPUSH
66501: CALL_OW 237
// end ;
66505: PPOPN 6
66507: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
66508: LD_EXP 51
66512: PUSH
66513: LD_EXP 98
66517: AND
66518: IFFALSE 66597
66520: GO 66522
66522: DISABLE
66523: LD_INT 0
66525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
66526: LD_ADDR_VAR 0 1
66530: PUSH
66531: LD_INT 22
66533: PUSH
66534: LD_OWVAR 2
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 30
66545: PUSH
66546: LD_INT 3
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PPUSH
66557: CALL_OW 69
66561: ST_TO_ADDR
// if not tmp then
66562: LD_VAR 0 1
66566: NOT
66567: IFFALSE 66571
// exit ;
66569: GO 66597
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
66571: LD_VAR 0 1
66575: PUSH
66576: LD_INT 1
66578: PPUSH
66579: LD_VAR 0 1
66583: PPUSH
66584: CALL_OW 12
66588: ARRAY
66589: PPUSH
66590: LD_INT 1
66592: PPUSH
66593: CALL_OW 234
// end ;
66597: PPOPN 1
66599: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
66600: LD_EXP 51
66604: PUSH
66605: LD_EXP 99
66609: AND
66610: IFFALSE 66722
66612: GO 66614
66614: DISABLE
66615: LD_INT 0
66617: PPUSH
66618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
66619: LD_ADDR_VAR 0 2
66623: PUSH
66624: LD_INT 22
66626: PUSH
66627: LD_OWVAR 2
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 2
66638: PUSH
66639: LD_INT 30
66641: PUSH
66642: LD_INT 27
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 30
66651: PUSH
66652: LD_INT 26
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 30
66661: PUSH
66662: LD_INT 28
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PPUSH
66679: CALL_OW 69
66683: ST_TO_ADDR
// if not tmp then
66684: LD_VAR 0 2
66688: NOT
66689: IFFALSE 66693
// exit ;
66691: GO 66722
// for i in tmp do
66693: LD_ADDR_VAR 0 1
66697: PUSH
66698: LD_VAR 0 2
66702: PUSH
66703: FOR_IN
66704: IFFALSE 66720
// SetLives ( i , 1 ) ;
66706: LD_VAR 0 1
66710: PPUSH
66711: LD_INT 1
66713: PPUSH
66714: CALL_OW 234
66718: GO 66703
66720: POP
66721: POP
// end ;
66722: PPOPN 2
66724: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
66725: LD_EXP 51
66729: PUSH
66730: LD_EXP 100
66734: AND
66735: IFFALSE 67022
66737: GO 66739
66739: DISABLE
66740: LD_INT 0
66742: PPUSH
66743: PPUSH
66744: PPUSH
// begin i := rand ( 1 , 7 ) ;
66745: LD_ADDR_VAR 0 1
66749: PUSH
66750: LD_INT 1
66752: PPUSH
66753: LD_INT 7
66755: PPUSH
66756: CALL_OW 12
66760: ST_TO_ADDR
// case i of 1 :
66761: LD_VAR 0 1
66765: PUSH
66766: LD_INT 1
66768: DOUBLE
66769: EQUAL
66770: IFTRUE 66774
66772: GO 66784
66774: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
66775: LD_STRING earthquake(getX(game), 0, 32)
66777: PPUSH
66778: CALL_OW 559
66782: GO 67022
66784: LD_INT 2
66786: DOUBLE
66787: EQUAL
66788: IFTRUE 66792
66790: GO 66806
66792: POP
// begin ToLua ( displayStucuk(); ) ;
66793: LD_STRING displayStucuk();
66795: PPUSH
66796: CALL_OW 559
// ResetFog ;
66800: CALL_OW 335
// end ; 3 :
66804: GO 67022
66806: LD_INT 3
66808: DOUBLE
66809: EQUAL
66810: IFTRUE 66814
66812: GO 66918
66814: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66815: LD_ADDR_VAR 0 2
66819: PUSH
66820: LD_INT 22
66822: PUSH
66823: LD_OWVAR 2
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 25
66834: PUSH
66835: LD_INT 1
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PPUSH
66846: CALL_OW 69
66850: ST_TO_ADDR
// if not tmp then
66851: LD_VAR 0 2
66855: NOT
66856: IFFALSE 66860
// exit ;
66858: GO 67022
// un := tmp [ rand ( 1 , tmp ) ] ;
66860: LD_ADDR_VAR 0 3
66864: PUSH
66865: LD_VAR 0 2
66869: PUSH
66870: LD_INT 1
66872: PPUSH
66873: LD_VAR 0 2
66877: PPUSH
66878: CALL_OW 12
66882: ARRAY
66883: ST_TO_ADDR
// if Crawls ( un ) then
66884: LD_VAR 0 3
66888: PPUSH
66889: CALL_OW 318
66893: IFFALSE 66904
// ComWalk ( un ) ;
66895: LD_VAR 0 3
66899: PPUSH
66900: CALL_OW 138
// SetClass ( un , class_mortar ) ;
66904: LD_VAR 0 3
66908: PPUSH
66909: LD_INT 8
66911: PPUSH
66912: CALL_OW 336
// end ; 4 :
66916: GO 67022
66918: LD_INT 4
66920: DOUBLE
66921: EQUAL
66922: IFTRUE 66926
66924: GO 67000
66926: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
66927: LD_ADDR_VAR 0 2
66931: PUSH
66932: LD_INT 22
66934: PUSH
66935: LD_OWVAR 2
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 30
66946: PUSH
66947: LD_INT 29
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PPUSH
66958: CALL_OW 69
66962: ST_TO_ADDR
// if not tmp then
66963: LD_VAR 0 2
66967: NOT
66968: IFFALSE 66972
// exit ;
66970: GO 67022
// CenterNowOnUnits ( tmp [ 1 ] ) ;
66972: LD_VAR 0 2
66976: PUSH
66977: LD_INT 1
66979: ARRAY
66980: PPUSH
66981: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
66985: LD_VAR 0 2
66989: PUSH
66990: LD_INT 1
66992: ARRAY
66993: PPUSH
66994: CALL_OW 65
// end ; 5 .. 7 :
66998: GO 67022
67000: LD_INT 5
67002: DOUBLE
67003: GREATEREQUAL
67004: IFFALSE 67012
67006: LD_INT 7
67008: DOUBLE
67009: LESSEQUAL
67010: IFTRUE 67014
67012: GO 67021
67014: POP
// StreamSibBomb ; end ;
67015: CALL 63259 0 0
67019: GO 67022
67021: POP
// end ;
67022: PPOPN 3
67024: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
67025: LD_EXP 51
67029: PUSH
67030: LD_EXP 101
67034: AND
67035: IFFALSE 67191
67037: GO 67039
67039: DISABLE
67040: LD_INT 0
67042: PPUSH
67043: PPUSH
67044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
67045: LD_ADDR_VAR 0 2
67049: PUSH
67050: LD_INT 81
67052: PUSH
67053: LD_OWVAR 2
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 2
67064: PUSH
67065: LD_INT 21
67067: PUSH
67068: LD_INT 1
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 21
67077: PUSH
67078: LD_INT 2
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: LIST
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PPUSH
67094: CALL_OW 69
67098: ST_TO_ADDR
// if not tmp then
67099: LD_VAR 0 2
67103: NOT
67104: IFFALSE 67108
// exit ;
67106: GO 67191
// p := 0 ;
67108: LD_ADDR_VAR 0 3
67112: PUSH
67113: LD_INT 0
67115: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
67116: LD_INT 35
67118: PPUSH
67119: CALL_OW 67
// p := p + 1 ;
67123: LD_ADDR_VAR 0 3
67127: PUSH
67128: LD_VAR 0 3
67132: PUSH
67133: LD_INT 1
67135: PLUS
67136: ST_TO_ADDR
// for i in tmp do
67137: LD_ADDR_VAR 0 1
67141: PUSH
67142: LD_VAR 0 2
67146: PUSH
67147: FOR_IN
67148: IFFALSE 67179
// if GetLives ( i ) < 1000 then
67150: LD_VAR 0 1
67154: PPUSH
67155: CALL_OW 256
67159: PUSH
67160: LD_INT 1000
67162: LESS
67163: IFFALSE 67177
// SetLives ( i , 1000 ) ;
67165: LD_VAR 0 1
67169: PPUSH
67170: LD_INT 1000
67172: PPUSH
67173: CALL_OW 234
67177: GO 67147
67179: POP
67180: POP
// until p > 20 ;
67181: LD_VAR 0 3
67185: PUSH
67186: LD_INT 20
67188: GREATER
67189: IFFALSE 67116
// end ;
67191: PPOPN 3
67193: END
// every 0 0$1 trigger StreamModeActive and sTime do
67194: LD_EXP 51
67198: PUSH
67199: LD_EXP 102
67203: AND
67204: IFFALSE 67239
67206: GO 67208
67208: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
67209: LD_INT 28
67211: PPUSH
67212: LD_OWVAR 2
67216: PPUSH
67217: LD_INT 2
67219: PPUSH
67220: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
67224: LD_INT 30
67226: PPUSH
67227: LD_OWVAR 2
67231: PPUSH
67232: LD_INT 2
67234: PPUSH
67235: CALL_OW 322
// end ;
67239: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
67240: LD_EXP 51
67244: PUSH
67245: LD_EXP 103
67249: AND
67250: IFFALSE 67371
67252: GO 67254
67254: DISABLE
67255: LD_INT 0
67257: PPUSH
67258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67259: LD_ADDR_VAR 0 2
67263: PUSH
67264: LD_INT 22
67266: PUSH
67267: LD_OWVAR 2
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 21
67278: PUSH
67279: LD_INT 1
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 3
67288: PUSH
67289: LD_INT 23
67291: PUSH
67292: LD_INT 0
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: LIST
67307: PPUSH
67308: CALL_OW 69
67312: ST_TO_ADDR
// if not tmp then
67313: LD_VAR 0 2
67317: NOT
67318: IFFALSE 67322
// exit ;
67320: GO 67371
// for i in tmp do
67322: LD_ADDR_VAR 0 1
67326: PUSH
67327: LD_VAR 0 2
67331: PUSH
67332: FOR_IN
67333: IFFALSE 67369
// begin if Crawls ( i ) then
67335: LD_VAR 0 1
67339: PPUSH
67340: CALL_OW 318
67344: IFFALSE 67355
// ComWalk ( i ) ;
67346: LD_VAR 0 1
67350: PPUSH
67351: CALL_OW 138
// SetClass ( i , 2 ) ;
67355: LD_VAR 0 1
67359: PPUSH
67360: LD_INT 2
67362: PPUSH
67363: CALL_OW 336
// end ;
67367: GO 67332
67369: POP
67370: POP
// end ;
67371: PPOPN 2
67373: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
67374: LD_EXP 51
67378: PUSH
67379: LD_EXP 104
67383: AND
67384: IFFALSE 67672
67386: GO 67388
67388: DISABLE
67389: LD_INT 0
67391: PPUSH
67392: PPUSH
67393: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
67394: LD_OWVAR 2
67398: PPUSH
67399: LD_INT 9
67401: PPUSH
67402: LD_INT 1
67404: PPUSH
67405: LD_INT 1
67407: PPUSH
67408: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
67412: LD_INT 9
67414: PPUSH
67415: LD_OWVAR 2
67419: PPUSH
67420: CALL_OW 343
// uc_side := 9 ;
67424: LD_ADDR_OWVAR 20
67428: PUSH
67429: LD_INT 9
67431: ST_TO_ADDR
// uc_nation := 2 ;
67432: LD_ADDR_OWVAR 21
67436: PUSH
67437: LD_INT 2
67439: ST_TO_ADDR
// hc_name := Dark Warrior ;
67440: LD_ADDR_OWVAR 26
67444: PUSH
67445: LD_STRING Dark Warrior
67447: ST_TO_ADDR
// hc_gallery :=  ;
67448: LD_ADDR_OWVAR 33
67452: PUSH
67453: LD_STRING 
67455: ST_TO_ADDR
// hc_noskilllimit := true ;
67456: LD_ADDR_OWVAR 76
67460: PUSH
67461: LD_INT 1
67463: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
67464: LD_ADDR_OWVAR 31
67468: PUSH
67469: LD_INT 30
67471: PUSH
67472: LD_INT 30
67474: PUSH
67475: LD_INT 30
67477: PUSH
67478: LD_INT 30
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: ST_TO_ADDR
// un := CreateHuman ;
67487: LD_ADDR_VAR 0 3
67491: PUSH
67492: CALL_OW 44
67496: ST_TO_ADDR
// hc_noskilllimit := false ;
67497: LD_ADDR_OWVAR 76
67501: PUSH
67502: LD_INT 0
67504: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67505: LD_VAR 0 3
67509: PPUSH
67510: LD_INT 1
67512: PPUSH
67513: CALL_OW 51
// ToLua ( playRanger() ) ;
67517: LD_STRING playRanger()
67519: PPUSH
67520: CALL_OW 559
// p := 0 ;
67524: LD_ADDR_VAR 0 2
67528: PUSH
67529: LD_INT 0
67531: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
67532: LD_INT 35
67534: PPUSH
67535: CALL_OW 67
// p := p + 1 ;
67539: LD_ADDR_VAR 0 2
67543: PUSH
67544: LD_VAR 0 2
67548: PUSH
67549: LD_INT 1
67551: PLUS
67552: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
67553: LD_VAR 0 3
67557: PPUSH
67558: CALL_OW 256
67562: PUSH
67563: LD_INT 1000
67565: LESS
67566: IFFALSE 67580
// SetLives ( un , 1000 ) ;
67568: LD_VAR 0 3
67572: PPUSH
67573: LD_INT 1000
67575: PPUSH
67576: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
67580: LD_VAR 0 3
67584: PPUSH
67585: LD_INT 81
67587: PUSH
67588: LD_OWVAR 2
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 91
67599: PUSH
67600: LD_VAR 0 3
67604: PUSH
67605: LD_INT 30
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: LIST
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PPUSH
67617: CALL_OW 69
67621: PPUSH
67622: LD_VAR 0 3
67626: PPUSH
67627: CALL_OW 74
67631: PPUSH
67632: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
67636: LD_VAR 0 2
67640: PUSH
67641: LD_INT 80
67643: GREATER
67644: PUSH
67645: LD_VAR 0 3
67649: PPUSH
67650: CALL_OW 301
67654: OR
67655: IFFALSE 67532
// if un then
67657: LD_VAR 0 3
67661: IFFALSE 67672
// RemoveUnit ( un ) ;
67663: LD_VAR 0 3
67667: PPUSH
67668: CALL_OW 64
// end ;
67672: PPOPN 3
67674: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
67675: LD_EXP 105
67679: IFFALSE 67795
67681: GO 67683
67683: DISABLE
67684: LD_INT 0
67686: PPUSH
67687: PPUSH
67688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67689: LD_ADDR_VAR 0 2
67693: PUSH
67694: LD_INT 81
67696: PUSH
67697: LD_OWVAR 2
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 21
67708: PUSH
67709: LD_INT 1
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PPUSH
67720: CALL_OW 69
67724: ST_TO_ADDR
// ToLua ( playComputer() ) ;
67725: LD_STRING playComputer()
67727: PPUSH
67728: CALL_OW 559
// if not tmp then
67732: LD_VAR 0 2
67736: NOT
67737: IFFALSE 67741
// exit ;
67739: GO 67795
// for i in tmp do
67741: LD_ADDR_VAR 0 1
67745: PUSH
67746: LD_VAR 0 2
67750: PUSH
67751: FOR_IN
67752: IFFALSE 67793
// for j := 1 to 4 do
67754: LD_ADDR_VAR 0 3
67758: PUSH
67759: DOUBLE
67760: LD_INT 1
67762: DEC
67763: ST_TO_ADDR
67764: LD_INT 4
67766: PUSH
67767: FOR_TO
67768: IFFALSE 67789
// SetSkill ( i , j , 10 ) ;
67770: LD_VAR 0 1
67774: PPUSH
67775: LD_VAR 0 3
67779: PPUSH
67780: LD_INT 10
67782: PPUSH
67783: CALL_OW 237
67787: GO 67767
67789: POP
67790: POP
67791: GO 67751
67793: POP
67794: POP
// end ;
67795: PPOPN 3
67797: END
// every 0 0$1 trigger s30 do var i , tmp ;
67798: LD_EXP 106
67802: IFFALSE 67871
67804: GO 67806
67806: DISABLE
67807: LD_INT 0
67809: PPUSH
67810: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
67811: LD_ADDR_VAR 0 2
67815: PUSH
67816: LD_INT 22
67818: PUSH
67819: LD_OWVAR 2
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PPUSH
67828: CALL_OW 69
67832: ST_TO_ADDR
// if not tmp then
67833: LD_VAR 0 2
67837: NOT
67838: IFFALSE 67842
// exit ;
67840: GO 67871
// for i in tmp do
67842: LD_ADDR_VAR 0 1
67846: PUSH
67847: LD_VAR 0 2
67851: PUSH
67852: FOR_IN
67853: IFFALSE 67869
// SetLives ( i , 300 ) ;
67855: LD_VAR 0 1
67859: PPUSH
67860: LD_INT 300
67862: PPUSH
67863: CALL_OW 234
67867: GO 67852
67869: POP
67870: POP
// end ;
67871: PPOPN 2
67873: END
// every 0 0$1 trigger s60 do var i , tmp ;
67874: LD_EXP 107
67878: IFFALSE 67947
67880: GO 67882
67882: DISABLE
67883: LD_INT 0
67885: PPUSH
67886: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
67887: LD_ADDR_VAR 0 2
67891: PUSH
67892: LD_INT 22
67894: PUSH
67895: LD_OWVAR 2
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PPUSH
67904: CALL_OW 69
67908: ST_TO_ADDR
// if not tmp then
67909: LD_VAR 0 2
67913: NOT
67914: IFFALSE 67918
// exit ;
67916: GO 67947
// for i in tmp do
67918: LD_ADDR_VAR 0 1
67922: PUSH
67923: LD_VAR 0 2
67927: PUSH
67928: FOR_IN
67929: IFFALSE 67945
// SetLives ( i , 600 ) ;
67931: LD_VAR 0 1
67935: PPUSH
67936: LD_INT 600
67938: PPUSH
67939: CALL_OW 234
67943: GO 67928
67945: POP
67946: POP
// end ;
67947: PPOPN 2
67949: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
67950: LD_INT 0
67952: PPUSH
// case cmd of 301 :
67953: LD_VAR 0 1
67957: PUSH
67958: LD_INT 301
67960: DOUBLE
67961: EQUAL
67962: IFTRUE 67966
67964: GO 67998
67966: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
67967: LD_VAR 0 6
67971: PPUSH
67972: LD_VAR 0 7
67976: PPUSH
67977: LD_VAR 0 8
67981: PPUSH
67982: LD_VAR 0 4
67986: PPUSH
67987: LD_VAR 0 5
67991: PPUSH
67992: CALL 69199 0 5
67996: GO 68119
67998: LD_INT 302
68000: DOUBLE
68001: EQUAL
68002: IFTRUE 68006
68004: GO 68043
68006: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
68007: LD_VAR 0 6
68011: PPUSH
68012: LD_VAR 0 7
68016: PPUSH
68017: LD_VAR 0 8
68021: PPUSH
68022: LD_VAR 0 9
68026: PPUSH
68027: LD_VAR 0 4
68031: PPUSH
68032: LD_VAR 0 5
68036: PPUSH
68037: CALL 69290 0 6
68041: GO 68119
68043: LD_INT 303
68045: DOUBLE
68046: EQUAL
68047: IFTRUE 68051
68049: GO 68088
68051: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
68052: LD_VAR 0 6
68056: PPUSH
68057: LD_VAR 0 7
68061: PPUSH
68062: LD_VAR 0 8
68066: PPUSH
68067: LD_VAR 0 9
68071: PPUSH
68072: LD_VAR 0 4
68076: PPUSH
68077: LD_VAR 0 5
68081: PPUSH
68082: CALL 68124 0 6
68086: GO 68119
68088: LD_INT 304
68090: DOUBLE
68091: EQUAL
68092: IFTRUE 68096
68094: GO 68118
68096: POP
// hHackTeleport ( unit , x , y ) ; end ;
68097: LD_VAR 0 2
68101: PPUSH
68102: LD_VAR 0 4
68106: PPUSH
68107: LD_VAR 0 5
68111: PPUSH
68112: CALL 69883 0 3
68116: GO 68119
68118: POP
// end ;
68119: LD_VAR 0 12
68123: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
68124: LD_INT 0
68126: PPUSH
68127: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
68128: LD_VAR 0 1
68132: PUSH
68133: LD_INT 1
68135: LESS
68136: PUSH
68137: LD_VAR 0 1
68141: PUSH
68142: LD_INT 3
68144: GREATER
68145: OR
68146: PUSH
68147: LD_VAR 0 5
68151: PPUSH
68152: LD_VAR 0 6
68156: PPUSH
68157: CALL_OW 428
68161: OR
68162: IFFALSE 68166
// exit ;
68164: GO 68886
// uc_side := your_side ;
68166: LD_ADDR_OWVAR 20
68170: PUSH
68171: LD_OWVAR 2
68175: ST_TO_ADDR
// uc_nation := nation ;
68176: LD_ADDR_OWVAR 21
68180: PUSH
68181: LD_VAR 0 1
68185: ST_TO_ADDR
// bc_level = 1 ;
68186: LD_ADDR_OWVAR 43
68190: PUSH
68191: LD_INT 1
68193: ST_TO_ADDR
// case btype of 1 :
68194: LD_VAR 0 2
68198: PUSH
68199: LD_INT 1
68201: DOUBLE
68202: EQUAL
68203: IFTRUE 68207
68205: GO 68218
68207: POP
// bc_type := b_depot ; 2 :
68208: LD_ADDR_OWVAR 42
68212: PUSH
68213: LD_INT 0
68215: ST_TO_ADDR
68216: GO 68830
68218: LD_INT 2
68220: DOUBLE
68221: EQUAL
68222: IFTRUE 68226
68224: GO 68237
68226: POP
// bc_type := b_warehouse ; 3 :
68227: LD_ADDR_OWVAR 42
68231: PUSH
68232: LD_INT 1
68234: ST_TO_ADDR
68235: GO 68830
68237: LD_INT 3
68239: DOUBLE
68240: EQUAL
68241: IFTRUE 68245
68243: GO 68256
68245: POP
// bc_type := b_lab ; 4 .. 9 :
68246: LD_ADDR_OWVAR 42
68250: PUSH
68251: LD_INT 6
68253: ST_TO_ADDR
68254: GO 68830
68256: LD_INT 4
68258: DOUBLE
68259: GREATEREQUAL
68260: IFFALSE 68268
68262: LD_INT 9
68264: DOUBLE
68265: LESSEQUAL
68266: IFTRUE 68270
68268: GO 68322
68270: POP
// begin bc_type := b_lab_half ;
68271: LD_ADDR_OWVAR 42
68275: PUSH
68276: LD_INT 7
68278: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
68279: LD_ADDR_OWVAR 44
68283: PUSH
68284: LD_INT 10
68286: PUSH
68287: LD_INT 11
68289: PUSH
68290: LD_INT 12
68292: PUSH
68293: LD_INT 15
68295: PUSH
68296: LD_INT 14
68298: PUSH
68299: LD_INT 13
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: PUSH
68310: LD_VAR 0 2
68314: PUSH
68315: LD_INT 3
68317: MINUS
68318: ARRAY
68319: ST_TO_ADDR
// end ; 10 .. 13 :
68320: GO 68830
68322: LD_INT 10
68324: DOUBLE
68325: GREATEREQUAL
68326: IFFALSE 68334
68328: LD_INT 13
68330: DOUBLE
68331: LESSEQUAL
68332: IFTRUE 68336
68334: GO 68413
68336: POP
// begin bc_type := b_lab_full ;
68337: LD_ADDR_OWVAR 42
68341: PUSH
68342: LD_INT 8
68344: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
68345: LD_ADDR_OWVAR 44
68349: PUSH
68350: LD_INT 10
68352: PUSH
68353: LD_INT 12
68355: PUSH
68356: LD_INT 14
68358: PUSH
68359: LD_INT 13
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: PUSH
68368: LD_VAR 0 2
68372: PUSH
68373: LD_INT 9
68375: MINUS
68376: ARRAY
68377: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
68378: LD_ADDR_OWVAR 45
68382: PUSH
68383: LD_INT 11
68385: PUSH
68386: LD_INT 15
68388: PUSH
68389: LD_INT 12
68391: PUSH
68392: LD_INT 15
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: PUSH
68401: LD_VAR 0 2
68405: PUSH
68406: LD_INT 9
68408: MINUS
68409: ARRAY
68410: ST_TO_ADDR
// end ; 14 :
68411: GO 68830
68413: LD_INT 14
68415: DOUBLE
68416: EQUAL
68417: IFTRUE 68421
68419: GO 68432
68421: POP
// bc_type := b_workshop ; 15 :
68422: LD_ADDR_OWVAR 42
68426: PUSH
68427: LD_INT 2
68429: ST_TO_ADDR
68430: GO 68830
68432: LD_INT 15
68434: DOUBLE
68435: EQUAL
68436: IFTRUE 68440
68438: GO 68451
68440: POP
// bc_type := b_factory ; 16 :
68441: LD_ADDR_OWVAR 42
68445: PUSH
68446: LD_INT 3
68448: ST_TO_ADDR
68449: GO 68830
68451: LD_INT 16
68453: DOUBLE
68454: EQUAL
68455: IFTRUE 68459
68457: GO 68470
68459: POP
// bc_type := b_ext_gun ; 17 :
68460: LD_ADDR_OWVAR 42
68464: PUSH
68465: LD_INT 17
68467: ST_TO_ADDR
68468: GO 68830
68470: LD_INT 17
68472: DOUBLE
68473: EQUAL
68474: IFTRUE 68478
68476: GO 68506
68478: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
68479: LD_ADDR_OWVAR 42
68483: PUSH
68484: LD_INT 19
68486: PUSH
68487: LD_INT 23
68489: PUSH
68490: LD_INT 19
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: LIST
68497: PUSH
68498: LD_VAR 0 1
68502: ARRAY
68503: ST_TO_ADDR
68504: GO 68830
68506: LD_INT 18
68508: DOUBLE
68509: EQUAL
68510: IFTRUE 68514
68512: GO 68525
68514: POP
// bc_type := b_ext_radar ; 19 :
68515: LD_ADDR_OWVAR 42
68519: PUSH
68520: LD_INT 20
68522: ST_TO_ADDR
68523: GO 68830
68525: LD_INT 19
68527: DOUBLE
68528: EQUAL
68529: IFTRUE 68533
68531: GO 68544
68533: POP
// bc_type := b_ext_radio ; 20 :
68534: LD_ADDR_OWVAR 42
68538: PUSH
68539: LD_INT 22
68541: ST_TO_ADDR
68542: GO 68830
68544: LD_INT 20
68546: DOUBLE
68547: EQUAL
68548: IFTRUE 68552
68550: GO 68563
68552: POP
// bc_type := b_ext_siberium ; 21 :
68553: LD_ADDR_OWVAR 42
68557: PUSH
68558: LD_INT 21
68560: ST_TO_ADDR
68561: GO 68830
68563: LD_INT 21
68565: DOUBLE
68566: EQUAL
68567: IFTRUE 68571
68569: GO 68582
68571: POP
// bc_type := b_ext_computer ; 22 :
68572: LD_ADDR_OWVAR 42
68576: PUSH
68577: LD_INT 24
68579: ST_TO_ADDR
68580: GO 68830
68582: LD_INT 22
68584: DOUBLE
68585: EQUAL
68586: IFTRUE 68590
68588: GO 68601
68590: POP
// bc_type := b_ext_track ; 23 :
68591: LD_ADDR_OWVAR 42
68595: PUSH
68596: LD_INT 16
68598: ST_TO_ADDR
68599: GO 68830
68601: LD_INT 23
68603: DOUBLE
68604: EQUAL
68605: IFTRUE 68609
68607: GO 68620
68609: POP
// bc_type := b_ext_laser ; 24 :
68610: LD_ADDR_OWVAR 42
68614: PUSH
68615: LD_INT 25
68617: ST_TO_ADDR
68618: GO 68830
68620: LD_INT 24
68622: DOUBLE
68623: EQUAL
68624: IFTRUE 68628
68626: GO 68639
68628: POP
// bc_type := b_control_tower ; 25 :
68629: LD_ADDR_OWVAR 42
68633: PUSH
68634: LD_INT 36
68636: ST_TO_ADDR
68637: GO 68830
68639: LD_INT 25
68641: DOUBLE
68642: EQUAL
68643: IFTRUE 68647
68645: GO 68658
68647: POP
// bc_type := b_breastwork ; 26 :
68648: LD_ADDR_OWVAR 42
68652: PUSH
68653: LD_INT 31
68655: ST_TO_ADDR
68656: GO 68830
68658: LD_INT 26
68660: DOUBLE
68661: EQUAL
68662: IFTRUE 68666
68664: GO 68677
68666: POP
// bc_type := b_bunker ; 27 :
68667: LD_ADDR_OWVAR 42
68671: PUSH
68672: LD_INT 32
68674: ST_TO_ADDR
68675: GO 68830
68677: LD_INT 27
68679: DOUBLE
68680: EQUAL
68681: IFTRUE 68685
68683: GO 68696
68685: POP
// bc_type := b_turret ; 28 :
68686: LD_ADDR_OWVAR 42
68690: PUSH
68691: LD_INT 33
68693: ST_TO_ADDR
68694: GO 68830
68696: LD_INT 28
68698: DOUBLE
68699: EQUAL
68700: IFTRUE 68704
68702: GO 68715
68704: POP
// bc_type := b_armoury ; 29 :
68705: LD_ADDR_OWVAR 42
68709: PUSH
68710: LD_INT 4
68712: ST_TO_ADDR
68713: GO 68830
68715: LD_INT 29
68717: DOUBLE
68718: EQUAL
68719: IFTRUE 68723
68721: GO 68734
68723: POP
// bc_type := b_barracks ; 30 :
68724: LD_ADDR_OWVAR 42
68728: PUSH
68729: LD_INT 5
68731: ST_TO_ADDR
68732: GO 68830
68734: LD_INT 30
68736: DOUBLE
68737: EQUAL
68738: IFTRUE 68742
68740: GO 68753
68742: POP
// bc_type := b_solar_power ; 31 :
68743: LD_ADDR_OWVAR 42
68747: PUSH
68748: LD_INT 27
68750: ST_TO_ADDR
68751: GO 68830
68753: LD_INT 31
68755: DOUBLE
68756: EQUAL
68757: IFTRUE 68761
68759: GO 68772
68761: POP
// bc_type := b_oil_power ; 32 :
68762: LD_ADDR_OWVAR 42
68766: PUSH
68767: LD_INT 26
68769: ST_TO_ADDR
68770: GO 68830
68772: LD_INT 32
68774: DOUBLE
68775: EQUAL
68776: IFTRUE 68780
68778: GO 68791
68780: POP
// bc_type := b_siberite_power ; 33 :
68781: LD_ADDR_OWVAR 42
68785: PUSH
68786: LD_INT 28
68788: ST_TO_ADDR
68789: GO 68830
68791: LD_INT 33
68793: DOUBLE
68794: EQUAL
68795: IFTRUE 68799
68797: GO 68810
68799: POP
// bc_type := b_oil_mine ; 34 :
68800: LD_ADDR_OWVAR 42
68804: PUSH
68805: LD_INT 29
68807: ST_TO_ADDR
68808: GO 68830
68810: LD_INT 34
68812: DOUBLE
68813: EQUAL
68814: IFTRUE 68818
68816: GO 68829
68818: POP
// bc_type := b_siberite_mine ; end ;
68819: LD_ADDR_OWVAR 42
68823: PUSH
68824: LD_INT 30
68826: ST_TO_ADDR
68827: GO 68830
68829: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
68830: LD_ADDR_VAR 0 8
68834: PUSH
68835: LD_VAR 0 5
68839: PPUSH
68840: LD_VAR 0 6
68844: PPUSH
68845: LD_VAR 0 3
68849: PPUSH
68850: CALL_OW 47
68854: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
68855: LD_OWVAR 42
68859: PUSH
68860: LD_INT 32
68862: PUSH
68863: LD_INT 33
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: IN
68870: IFFALSE 68886
// PlaceWeaponTurret ( b , weapon ) ;
68872: LD_VAR 0 8
68876: PPUSH
68877: LD_VAR 0 4
68881: PPUSH
68882: CALL_OW 431
// end ;
68886: LD_VAR 0 7
68890: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
68891: LD_INT 0
68893: PPUSH
68894: PPUSH
68895: PPUSH
68896: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68897: LD_ADDR_VAR 0 4
68901: PUSH
68902: LD_INT 22
68904: PUSH
68905: LD_OWVAR 2
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 2
68916: PUSH
68917: LD_INT 30
68919: PUSH
68920: LD_INT 0
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: PUSH
68927: LD_INT 30
68929: PUSH
68930: LD_INT 1
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: LIST
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PPUSH
68946: CALL_OW 69
68950: ST_TO_ADDR
// if not tmp then
68951: LD_VAR 0 4
68955: NOT
68956: IFFALSE 68960
// exit ;
68958: GO 69019
// for i in tmp do
68960: LD_ADDR_VAR 0 2
68964: PUSH
68965: LD_VAR 0 4
68969: PUSH
68970: FOR_IN
68971: IFFALSE 69017
// for j = 1 to 3 do
68973: LD_ADDR_VAR 0 3
68977: PUSH
68978: DOUBLE
68979: LD_INT 1
68981: DEC
68982: ST_TO_ADDR
68983: LD_INT 3
68985: PUSH
68986: FOR_TO
68987: IFFALSE 69013
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
68989: LD_VAR 0 2
68993: PPUSH
68994: CALL_OW 274
68998: PPUSH
68999: LD_VAR 0 3
69003: PPUSH
69004: LD_INT 99999
69006: PPUSH
69007: CALL_OW 277
69011: GO 68986
69013: POP
69014: POP
69015: GO 68970
69017: POP
69018: POP
// end ;
69019: LD_VAR 0 1
69023: RET
// export function hHackSetLevel10 ; var i , j ; begin
69024: LD_INT 0
69026: PPUSH
69027: PPUSH
69028: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
69029: LD_ADDR_VAR 0 2
69033: PUSH
69034: LD_INT 21
69036: PUSH
69037: LD_INT 1
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PPUSH
69044: CALL_OW 69
69048: PUSH
69049: FOR_IN
69050: IFFALSE 69102
// if IsSelected ( i ) then
69052: LD_VAR 0 2
69056: PPUSH
69057: CALL_OW 306
69061: IFFALSE 69100
// begin for j := 1 to 4 do
69063: LD_ADDR_VAR 0 3
69067: PUSH
69068: DOUBLE
69069: LD_INT 1
69071: DEC
69072: ST_TO_ADDR
69073: LD_INT 4
69075: PUSH
69076: FOR_TO
69077: IFFALSE 69098
// SetSkill ( i , j , 10 ) ;
69079: LD_VAR 0 2
69083: PPUSH
69084: LD_VAR 0 3
69088: PPUSH
69089: LD_INT 10
69091: PPUSH
69092: CALL_OW 237
69096: GO 69076
69098: POP
69099: POP
// end ;
69100: GO 69049
69102: POP
69103: POP
// end ;
69104: LD_VAR 0 1
69108: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
69109: LD_INT 0
69111: PPUSH
69112: PPUSH
69113: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
69114: LD_ADDR_VAR 0 2
69118: PUSH
69119: LD_INT 22
69121: PUSH
69122: LD_OWVAR 2
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 21
69133: PUSH
69134: LD_INT 1
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PPUSH
69145: CALL_OW 69
69149: PUSH
69150: FOR_IN
69151: IFFALSE 69192
// begin for j := 1 to 4 do
69153: LD_ADDR_VAR 0 3
69157: PUSH
69158: DOUBLE
69159: LD_INT 1
69161: DEC
69162: ST_TO_ADDR
69163: LD_INT 4
69165: PUSH
69166: FOR_TO
69167: IFFALSE 69188
// SetSkill ( i , j , 10 ) ;
69169: LD_VAR 0 2
69173: PPUSH
69174: LD_VAR 0 3
69178: PPUSH
69179: LD_INT 10
69181: PPUSH
69182: CALL_OW 237
69186: GO 69166
69188: POP
69189: POP
// end ;
69190: GO 69150
69192: POP
69193: POP
// end ;
69194: LD_VAR 0 1
69198: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
69199: LD_INT 0
69201: PPUSH
// uc_side := your_side ;
69202: LD_ADDR_OWVAR 20
69206: PUSH
69207: LD_OWVAR 2
69211: ST_TO_ADDR
// uc_nation := nation ;
69212: LD_ADDR_OWVAR 21
69216: PUSH
69217: LD_VAR 0 1
69221: ST_TO_ADDR
// InitHc ;
69222: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
69226: LD_INT 0
69228: PPUSH
69229: LD_VAR 0 2
69233: PPUSH
69234: LD_VAR 0 3
69238: PPUSH
69239: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
69243: LD_VAR 0 4
69247: PPUSH
69248: LD_VAR 0 5
69252: PPUSH
69253: CALL_OW 428
69257: PUSH
69258: LD_INT 0
69260: EQUAL
69261: IFFALSE 69285
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
69263: CALL_OW 44
69267: PPUSH
69268: LD_VAR 0 4
69272: PPUSH
69273: LD_VAR 0 5
69277: PPUSH
69278: LD_INT 1
69280: PPUSH
69281: CALL_OW 48
// end ;
69285: LD_VAR 0 6
69289: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
69290: LD_INT 0
69292: PPUSH
69293: PPUSH
// uc_side := your_side ;
69294: LD_ADDR_OWVAR 20
69298: PUSH
69299: LD_OWVAR 2
69303: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
69304: LD_VAR 0 1
69308: PUSH
69309: LD_INT 1
69311: PUSH
69312: LD_INT 2
69314: PUSH
69315: LD_INT 3
69317: PUSH
69318: LD_INT 4
69320: PUSH
69321: LD_INT 5
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: IN
69331: IFFALSE 69343
// uc_nation := nation_american else
69333: LD_ADDR_OWVAR 21
69337: PUSH
69338: LD_INT 1
69340: ST_TO_ADDR
69341: GO 69386
// if chassis in [ 11 , 12 , 13 , 14 ] then
69343: LD_VAR 0 1
69347: PUSH
69348: LD_INT 11
69350: PUSH
69351: LD_INT 12
69353: PUSH
69354: LD_INT 13
69356: PUSH
69357: LD_INT 14
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: IN
69366: IFFALSE 69378
// uc_nation := nation_arabian else
69368: LD_ADDR_OWVAR 21
69372: PUSH
69373: LD_INT 2
69375: ST_TO_ADDR
69376: GO 69386
// uc_nation := nation_russian ;
69378: LD_ADDR_OWVAR 21
69382: PUSH
69383: LD_INT 3
69385: ST_TO_ADDR
// vc_chassis := chassis ;
69386: LD_ADDR_OWVAR 37
69390: PUSH
69391: LD_VAR 0 1
69395: ST_TO_ADDR
// vc_engine := engine ;
69396: LD_ADDR_OWVAR 39
69400: PUSH
69401: LD_VAR 0 2
69405: ST_TO_ADDR
// vc_control := control ;
69406: LD_ADDR_OWVAR 38
69410: PUSH
69411: LD_VAR 0 3
69415: ST_TO_ADDR
// vc_weapon := weapon ;
69416: LD_ADDR_OWVAR 40
69420: PUSH
69421: LD_VAR 0 4
69425: ST_TO_ADDR
// un := CreateVehicle ;
69426: LD_ADDR_VAR 0 8
69430: PUSH
69431: CALL_OW 45
69435: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
69436: LD_VAR 0 8
69440: PPUSH
69441: LD_INT 0
69443: PPUSH
69444: LD_INT 5
69446: PPUSH
69447: CALL_OW 12
69451: PPUSH
69452: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
69456: LD_VAR 0 8
69460: PPUSH
69461: LD_VAR 0 5
69465: PPUSH
69466: LD_VAR 0 6
69470: PPUSH
69471: LD_INT 1
69473: PPUSH
69474: CALL_OW 48
// end ;
69478: LD_VAR 0 7
69482: RET
// export hInvincible ; every 1 do
69483: GO 69485
69485: DISABLE
// hInvincible := [ ] ;
69486: LD_ADDR_EXP 108
69490: PUSH
69491: EMPTY
69492: ST_TO_ADDR
69493: END
// every 10 do var i ;
69494: GO 69496
69496: DISABLE
69497: LD_INT 0
69499: PPUSH
// begin enable ;
69500: ENABLE
// if not hInvincible then
69501: LD_EXP 108
69505: NOT
69506: IFFALSE 69510
// exit ;
69508: GO 69554
// for i in hInvincible do
69510: LD_ADDR_VAR 0 1
69514: PUSH
69515: LD_EXP 108
69519: PUSH
69520: FOR_IN
69521: IFFALSE 69552
// if GetLives ( i ) < 1000 then
69523: LD_VAR 0 1
69527: PPUSH
69528: CALL_OW 256
69532: PUSH
69533: LD_INT 1000
69535: LESS
69536: IFFALSE 69550
// SetLives ( i , 1000 ) ;
69538: LD_VAR 0 1
69542: PPUSH
69543: LD_INT 1000
69545: PPUSH
69546: CALL_OW 234
69550: GO 69520
69552: POP
69553: POP
// end ;
69554: PPOPN 1
69556: END
// export function hHackInvincible ; var i ; begin
69557: LD_INT 0
69559: PPUSH
69560: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
69561: LD_ADDR_VAR 0 2
69565: PUSH
69566: LD_INT 2
69568: PUSH
69569: LD_INT 21
69571: PUSH
69572: LD_INT 1
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 21
69581: PUSH
69582: LD_INT 2
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: EMPTY
69590: LIST
69591: LIST
69592: LIST
69593: PPUSH
69594: CALL_OW 69
69598: PUSH
69599: FOR_IN
69600: IFFALSE 69661
// if IsSelected ( i ) then
69602: LD_VAR 0 2
69606: PPUSH
69607: CALL_OW 306
69611: IFFALSE 69659
// begin if i in hInvincible then
69613: LD_VAR 0 2
69617: PUSH
69618: LD_EXP 108
69622: IN
69623: IFFALSE 69643
// hInvincible := hInvincible diff i else
69625: LD_ADDR_EXP 108
69629: PUSH
69630: LD_EXP 108
69634: PUSH
69635: LD_VAR 0 2
69639: DIFF
69640: ST_TO_ADDR
69641: GO 69659
// hInvincible := hInvincible union i ;
69643: LD_ADDR_EXP 108
69647: PUSH
69648: LD_EXP 108
69652: PUSH
69653: LD_VAR 0 2
69657: UNION
69658: ST_TO_ADDR
// end ;
69659: GO 69599
69661: POP
69662: POP
// end ;
69663: LD_VAR 0 1
69667: RET
// export function hHackInvisible ; var i , j ; begin
69668: LD_INT 0
69670: PPUSH
69671: PPUSH
69672: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
69673: LD_ADDR_VAR 0 2
69677: PUSH
69678: LD_INT 21
69680: PUSH
69681: LD_INT 1
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PPUSH
69688: CALL_OW 69
69692: PUSH
69693: FOR_IN
69694: IFFALSE 69718
// if IsSelected ( i ) then
69696: LD_VAR 0 2
69700: PPUSH
69701: CALL_OW 306
69705: IFFALSE 69716
// ComForceInvisible ( i ) ;
69707: LD_VAR 0 2
69711: PPUSH
69712: CALL_OW 496
69716: GO 69693
69718: POP
69719: POP
// end ;
69720: LD_VAR 0 1
69724: RET
// export function hHackChangeYourSide ; begin
69725: LD_INT 0
69727: PPUSH
// if your_side = 8 then
69728: LD_OWVAR 2
69732: PUSH
69733: LD_INT 8
69735: EQUAL
69736: IFFALSE 69748
// your_side := 0 else
69738: LD_ADDR_OWVAR 2
69742: PUSH
69743: LD_INT 0
69745: ST_TO_ADDR
69746: GO 69762
// your_side := your_side + 1 ;
69748: LD_ADDR_OWVAR 2
69752: PUSH
69753: LD_OWVAR 2
69757: PUSH
69758: LD_INT 1
69760: PLUS
69761: ST_TO_ADDR
// end ;
69762: LD_VAR 0 1
69766: RET
// export function hHackChangeUnitSide ; var i , j ; begin
69767: LD_INT 0
69769: PPUSH
69770: PPUSH
69771: PPUSH
// for i in all_units do
69772: LD_ADDR_VAR 0 2
69776: PUSH
69777: LD_OWVAR 3
69781: PUSH
69782: FOR_IN
69783: IFFALSE 69861
// if IsSelected ( i ) then
69785: LD_VAR 0 2
69789: PPUSH
69790: CALL_OW 306
69794: IFFALSE 69859
// begin j := GetSide ( i ) ;
69796: LD_ADDR_VAR 0 3
69800: PUSH
69801: LD_VAR 0 2
69805: PPUSH
69806: CALL_OW 255
69810: ST_TO_ADDR
// if j = 8 then
69811: LD_VAR 0 3
69815: PUSH
69816: LD_INT 8
69818: EQUAL
69819: IFFALSE 69831
// j := 0 else
69821: LD_ADDR_VAR 0 3
69825: PUSH
69826: LD_INT 0
69828: ST_TO_ADDR
69829: GO 69845
// j := j + 1 ;
69831: LD_ADDR_VAR 0 3
69835: PUSH
69836: LD_VAR 0 3
69840: PUSH
69841: LD_INT 1
69843: PLUS
69844: ST_TO_ADDR
// SetSide ( i , j ) ;
69845: LD_VAR 0 2
69849: PPUSH
69850: LD_VAR 0 3
69854: PPUSH
69855: CALL_OW 235
// end ;
69859: GO 69782
69861: POP
69862: POP
// end ;
69863: LD_VAR 0 1
69867: RET
// export function hHackFog ; begin
69868: LD_INT 0
69870: PPUSH
// FogOff ( true ) ;
69871: LD_INT 1
69873: PPUSH
69874: CALL_OW 344
// end ;
69878: LD_VAR 0 1
69882: RET
// export function hHackTeleport ( unit , x , y ) ; begin
69883: LD_INT 0
69885: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
69886: LD_VAR 0 1
69890: PPUSH
69891: LD_VAR 0 2
69895: PPUSH
69896: LD_VAR 0 3
69900: PPUSH
69901: LD_INT 1
69903: PPUSH
69904: LD_INT 1
69906: PPUSH
69907: CALL_OW 483
// CenterOnXY ( x , y ) ;
69911: LD_VAR 0 2
69915: PPUSH
69916: LD_VAR 0 3
69920: PPUSH
69921: CALL_OW 84
// end ;
69925: LD_VAR 0 4
69929: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
69930: LD_INT 0
69932: PPUSH
69933: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
69934: LD_VAR 0 1
69938: NOT
69939: PUSH
69940: LD_VAR 0 2
69944: PPUSH
69945: LD_VAR 0 3
69949: PPUSH
69950: CALL_OW 488
69954: NOT
69955: OR
69956: PUSH
69957: LD_VAR 0 1
69961: PPUSH
69962: CALL_OW 266
69966: PUSH
69967: LD_INT 3
69969: NONEQUAL
69970: PUSH
69971: LD_VAR 0 1
69975: PPUSH
69976: CALL_OW 247
69980: PUSH
69981: LD_INT 1
69983: EQUAL
69984: NOT
69985: AND
69986: OR
69987: IFFALSE 69991
// exit ;
69989: GO 70140
// if GetType ( factory ) = unit_human then
69991: LD_VAR 0 1
69995: PPUSH
69996: CALL_OW 247
70000: PUSH
70001: LD_INT 1
70003: EQUAL
70004: IFFALSE 70021
// factory := IsInUnit ( factory ) ;
70006: LD_ADDR_VAR 0 1
70010: PUSH
70011: LD_VAR 0 1
70015: PPUSH
70016: CALL_OW 310
70020: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
70021: LD_VAR 0 1
70025: PPUSH
70026: CALL_OW 266
70030: PUSH
70031: LD_INT 3
70033: NONEQUAL
70034: IFFALSE 70038
// exit ;
70036: GO 70140
// if HexInfo ( x , y ) = factory then
70038: LD_VAR 0 2
70042: PPUSH
70043: LD_VAR 0 3
70047: PPUSH
70048: CALL_OW 428
70052: PUSH
70053: LD_VAR 0 1
70057: EQUAL
70058: IFFALSE 70085
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
70060: LD_ADDR_EXP 109
70064: PUSH
70065: LD_EXP 109
70069: PPUSH
70070: LD_VAR 0 1
70074: PPUSH
70075: LD_INT 0
70077: PPUSH
70078: CALL_OW 1
70082: ST_TO_ADDR
70083: GO 70136
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
70085: LD_ADDR_EXP 109
70089: PUSH
70090: LD_EXP 109
70094: PPUSH
70095: LD_VAR 0 1
70099: PPUSH
70100: LD_VAR 0 1
70104: PPUSH
70105: CALL_OW 255
70109: PUSH
70110: LD_VAR 0 1
70114: PUSH
70115: LD_VAR 0 2
70119: PUSH
70120: LD_VAR 0 3
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: PPUSH
70131: CALL_OW 1
70135: ST_TO_ADDR
// UpdateFactoryWaypoints ;
70136: CALL 70145 0 0
// end ;
70140: LD_VAR 0 4
70144: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
70145: LD_INT 0
70147: PPUSH
70148: PPUSH
70149: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
70150: LD_STRING resetFactoryWaypoint();
70152: PPUSH
70153: CALL_OW 559
// if factoryWaypoints then
70157: LD_EXP 109
70161: IFFALSE 70287
// begin list := PrepareArray ( factoryWaypoints ) ;
70163: LD_ADDR_VAR 0 3
70167: PUSH
70168: LD_EXP 109
70172: PPUSH
70173: CALL 55541 0 1
70177: ST_TO_ADDR
// for i := 1 to list do
70178: LD_ADDR_VAR 0 2
70182: PUSH
70183: DOUBLE
70184: LD_INT 1
70186: DEC
70187: ST_TO_ADDR
70188: LD_VAR 0 3
70192: PUSH
70193: FOR_TO
70194: IFFALSE 70285
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
70196: LD_STRING setFactoryWaypointXY(
70198: PUSH
70199: LD_VAR 0 3
70203: PUSH
70204: LD_VAR 0 2
70208: ARRAY
70209: PUSH
70210: LD_INT 1
70212: ARRAY
70213: STR
70214: PUSH
70215: LD_STRING ,
70217: STR
70218: PUSH
70219: LD_VAR 0 3
70223: PUSH
70224: LD_VAR 0 2
70228: ARRAY
70229: PUSH
70230: LD_INT 2
70232: ARRAY
70233: STR
70234: PUSH
70235: LD_STRING ,
70237: STR
70238: PUSH
70239: LD_VAR 0 3
70243: PUSH
70244: LD_VAR 0 2
70248: ARRAY
70249: PUSH
70250: LD_INT 3
70252: ARRAY
70253: STR
70254: PUSH
70255: LD_STRING ,
70257: STR
70258: PUSH
70259: LD_VAR 0 3
70263: PUSH
70264: LD_VAR 0 2
70268: ARRAY
70269: PUSH
70270: LD_INT 4
70272: ARRAY
70273: STR
70274: PUSH
70275: LD_STRING )
70277: STR
70278: PPUSH
70279: CALL_OW 559
70283: GO 70193
70285: POP
70286: POP
// end ; end ;
70287: LD_VAR 0 1
70291: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
70292: LD_INT 0
70294: PPUSH
// if HexInfo ( x , y ) = warehouse then
70295: LD_VAR 0 2
70299: PPUSH
70300: LD_VAR 0 3
70304: PPUSH
70305: CALL_OW 428
70309: PUSH
70310: LD_VAR 0 1
70314: EQUAL
70315: IFFALSE 70342
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
70317: LD_ADDR_EXP 110
70321: PUSH
70322: LD_EXP 110
70326: PPUSH
70327: LD_VAR 0 1
70331: PPUSH
70332: LD_INT 0
70334: PPUSH
70335: CALL_OW 1
70339: ST_TO_ADDR
70340: GO 70393
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
70342: LD_ADDR_EXP 110
70346: PUSH
70347: LD_EXP 110
70351: PPUSH
70352: LD_VAR 0 1
70356: PPUSH
70357: LD_VAR 0 1
70361: PPUSH
70362: CALL_OW 255
70366: PUSH
70367: LD_VAR 0 1
70371: PUSH
70372: LD_VAR 0 2
70376: PUSH
70377: LD_VAR 0 3
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: PPUSH
70388: CALL_OW 1
70392: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
70393: CALL 70402 0 0
// end ;
70397: LD_VAR 0 4
70401: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
70402: LD_INT 0
70404: PPUSH
70405: PPUSH
70406: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
70407: LD_STRING resetWarehouseGatheringPoints();
70409: PPUSH
70410: CALL_OW 559
// if warehouseGatheringPoints then
70414: LD_EXP 110
70418: IFFALSE 70544
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
70420: LD_ADDR_VAR 0 3
70424: PUSH
70425: LD_EXP 110
70429: PPUSH
70430: CALL 55541 0 1
70434: ST_TO_ADDR
// for i := 1 to list do
70435: LD_ADDR_VAR 0 2
70439: PUSH
70440: DOUBLE
70441: LD_INT 1
70443: DEC
70444: ST_TO_ADDR
70445: LD_VAR 0 3
70449: PUSH
70450: FOR_TO
70451: IFFALSE 70542
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
70453: LD_STRING setWarehouseGatheringPointXY(
70455: PUSH
70456: LD_VAR 0 3
70460: PUSH
70461: LD_VAR 0 2
70465: ARRAY
70466: PUSH
70467: LD_INT 1
70469: ARRAY
70470: STR
70471: PUSH
70472: LD_STRING ,
70474: STR
70475: PUSH
70476: LD_VAR 0 3
70480: PUSH
70481: LD_VAR 0 2
70485: ARRAY
70486: PUSH
70487: LD_INT 2
70489: ARRAY
70490: STR
70491: PUSH
70492: LD_STRING ,
70494: STR
70495: PUSH
70496: LD_VAR 0 3
70500: PUSH
70501: LD_VAR 0 2
70505: ARRAY
70506: PUSH
70507: LD_INT 3
70509: ARRAY
70510: STR
70511: PUSH
70512: LD_STRING ,
70514: STR
70515: PUSH
70516: LD_VAR 0 3
70520: PUSH
70521: LD_VAR 0 2
70525: ARRAY
70526: PUSH
70527: LD_INT 4
70529: ARRAY
70530: STR
70531: PUSH
70532: LD_STRING )
70534: STR
70535: PPUSH
70536: CALL_OW 559
70540: GO 70450
70542: POP
70543: POP
// end ; end ;
70544: LD_VAR 0 1
70548: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
70549: LD_EXP 110
70553: IFFALSE 71238
70555: GO 70557
70557: DISABLE
70558: LD_INT 0
70560: PPUSH
70561: PPUSH
70562: PPUSH
70563: PPUSH
70564: PPUSH
70565: PPUSH
70566: PPUSH
70567: PPUSH
70568: PPUSH
// begin enable ;
70569: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
70570: LD_ADDR_VAR 0 3
70574: PUSH
70575: LD_EXP 110
70579: PPUSH
70580: CALL 55541 0 1
70584: ST_TO_ADDR
// if not list then
70585: LD_VAR 0 3
70589: NOT
70590: IFFALSE 70594
// exit ;
70592: GO 71238
// for i := 1 to list do
70594: LD_ADDR_VAR 0 1
70598: PUSH
70599: DOUBLE
70600: LD_INT 1
70602: DEC
70603: ST_TO_ADDR
70604: LD_VAR 0 3
70608: PUSH
70609: FOR_TO
70610: IFFALSE 71236
// begin depot := list [ i ] [ 2 ] ;
70612: LD_ADDR_VAR 0 8
70616: PUSH
70617: LD_VAR 0 3
70621: PUSH
70622: LD_VAR 0 1
70626: ARRAY
70627: PUSH
70628: LD_INT 2
70630: ARRAY
70631: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
70632: LD_ADDR_VAR 0 5
70636: PUSH
70637: LD_VAR 0 3
70641: PUSH
70642: LD_VAR 0 1
70646: ARRAY
70647: PUSH
70648: LD_INT 1
70650: ARRAY
70651: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
70652: LD_VAR 0 8
70656: PPUSH
70657: CALL_OW 301
70661: PUSH
70662: LD_VAR 0 5
70666: PUSH
70667: LD_VAR 0 8
70671: PPUSH
70672: CALL_OW 255
70676: NONEQUAL
70677: OR
70678: IFFALSE 70707
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
70680: LD_ADDR_EXP 110
70684: PUSH
70685: LD_EXP 110
70689: PPUSH
70690: LD_VAR 0 8
70694: PPUSH
70695: LD_INT 0
70697: PPUSH
70698: CALL_OW 1
70702: ST_TO_ADDR
// exit ;
70703: POP
70704: POP
70705: GO 71238
// end ; x := list [ i ] [ 3 ] ;
70707: LD_ADDR_VAR 0 6
70711: PUSH
70712: LD_VAR 0 3
70716: PUSH
70717: LD_VAR 0 1
70721: ARRAY
70722: PUSH
70723: LD_INT 3
70725: ARRAY
70726: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
70727: LD_ADDR_VAR 0 7
70731: PUSH
70732: LD_VAR 0 3
70736: PUSH
70737: LD_VAR 0 1
70741: ARRAY
70742: PUSH
70743: LD_INT 4
70745: ARRAY
70746: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
70747: LD_ADDR_VAR 0 9
70751: PUSH
70752: LD_VAR 0 6
70756: PPUSH
70757: LD_VAR 0 7
70761: PPUSH
70762: LD_INT 16
70764: PPUSH
70765: CALL 54129 0 3
70769: ST_TO_ADDR
// if not cratesNearbyPoint then
70770: LD_VAR 0 9
70774: NOT
70775: IFFALSE 70781
// exit ;
70777: POP
70778: POP
70779: GO 71238
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
70781: LD_ADDR_VAR 0 4
70785: PUSH
70786: LD_INT 22
70788: PUSH
70789: LD_VAR 0 5
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 3
70800: PUSH
70801: LD_INT 60
70803: PUSH
70804: EMPTY
70805: LIST
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 91
70813: PUSH
70814: LD_VAR 0 8
70818: PUSH
70819: LD_INT 6
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 2
70829: PUSH
70830: LD_INT 25
70832: PUSH
70833: LD_INT 2
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: LD_INT 25
70842: PUSH
70843: LD_INT 16
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: LIST
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: PPUSH
70861: CALL_OW 69
70865: PUSH
70866: LD_VAR 0 8
70870: PPUSH
70871: CALL_OW 313
70875: PPUSH
70876: LD_INT 3
70878: PUSH
70879: LD_INT 60
70881: PUSH
70882: EMPTY
70883: LIST
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: PUSH
70889: LD_INT 2
70891: PUSH
70892: LD_INT 25
70894: PUSH
70895: LD_INT 2
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: LD_INT 25
70904: PUSH
70905: LD_INT 16
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: LIST
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PPUSH
70921: CALL_OW 72
70925: UNION
70926: ST_TO_ADDR
// if tmp then
70927: LD_VAR 0 4
70931: IFFALSE 71011
// begin tmp := ShrinkArray ( tmp , 3 ) ;
70933: LD_ADDR_VAR 0 4
70937: PUSH
70938: LD_VAR 0 4
70942: PPUSH
70943: LD_INT 3
70945: PPUSH
70946: CALL 52098 0 2
70950: ST_TO_ADDR
// for j in tmp do
70951: LD_ADDR_VAR 0 2
70955: PUSH
70956: LD_VAR 0 4
70960: PUSH
70961: FOR_IN
70962: IFFALSE 71005
// begin if IsInUnit ( j ) then
70964: LD_VAR 0 2
70968: PPUSH
70969: CALL_OW 310
70973: IFFALSE 70984
// ComExit ( j ) ;
70975: LD_VAR 0 2
70979: PPUSH
70980: CALL 52181 0 1
// AddComCollect ( j , x , y ) ;
70984: LD_VAR 0 2
70988: PPUSH
70989: LD_VAR 0 6
70993: PPUSH
70994: LD_VAR 0 7
70998: PPUSH
70999: CALL_OW 177
// end ;
71003: GO 70961
71005: POP
71006: POP
// exit ;
71007: POP
71008: POP
71009: GO 71238
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
71011: LD_ADDR_VAR 0 4
71015: PUSH
71016: LD_INT 22
71018: PUSH
71019: LD_VAR 0 5
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: PUSH
71028: LD_INT 91
71030: PUSH
71031: LD_VAR 0 8
71035: PUSH
71036: LD_INT 8
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 2
71046: PUSH
71047: LD_INT 34
71049: PUSH
71050: LD_INT 12
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: LD_INT 34
71059: PUSH
71060: LD_INT 51
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: LD_INT 34
71069: PUSH
71070: LD_INT 32
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 34
71079: PUSH
71080: LD_INT 89
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: LIST
71098: PPUSH
71099: CALL_OW 69
71103: ST_TO_ADDR
// if tmp then
71104: LD_VAR 0 4
71108: IFFALSE 71234
// begin for j in tmp do
71110: LD_ADDR_VAR 0 2
71114: PUSH
71115: LD_VAR 0 4
71119: PUSH
71120: FOR_IN
71121: IFFALSE 71232
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
71123: LD_VAR 0 2
71127: PPUSH
71128: CALL_OW 262
71132: PUSH
71133: LD_INT 3
71135: EQUAL
71136: PUSH
71137: LD_VAR 0 2
71141: PPUSH
71142: CALL_OW 261
71146: PUSH
71147: LD_INT 20
71149: GREATER
71150: OR
71151: PUSH
71152: LD_VAR 0 2
71156: PPUSH
71157: CALL_OW 314
71161: NOT
71162: AND
71163: PUSH
71164: LD_VAR 0 2
71168: PPUSH
71169: CALL_OW 263
71173: PUSH
71174: LD_INT 1
71176: NONEQUAL
71177: PUSH
71178: LD_VAR 0 2
71182: PPUSH
71183: CALL_OW 311
71187: OR
71188: AND
71189: IFFALSE 71230
// begin ComCollect ( j , x , y ) ;
71191: LD_VAR 0 2
71195: PPUSH
71196: LD_VAR 0 6
71200: PPUSH
71201: LD_VAR 0 7
71205: PPUSH
71206: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
71210: LD_VAR 0 2
71214: PPUSH
71215: LD_VAR 0 8
71219: PPUSH
71220: CALL_OW 172
// exit ;
71224: POP
71225: POP
71226: POP
71227: POP
71228: GO 71238
// end ;
71230: GO 71120
71232: POP
71233: POP
// end ; end ;
71234: GO 70609
71236: POP
71237: POP
// end ; end_of_file
71238: PPOPN 9
71240: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71241: LD_VAR 0 1
71245: PUSH
71246: LD_INT 200
71248: DOUBLE
71249: GREATEREQUAL
71250: IFFALSE 71258
71252: LD_INT 299
71254: DOUBLE
71255: LESSEQUAL
71256: IFTRUE 71260
71258: GO 71292
71260: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71261: LD_VAR 0 1
71265: PPUSH
71266: LD_VAR 0 2
71270: PPUSH
71271: LD_VAR 0 3
71275: PPUSH
71276: LD_VAR 0 4
71280: PPUSH
71281: LD_VAR 0 5
71285: PPUSH
71286: CALL 71780 0 5
71290: GO 71369
71292: LD_INT 300
71294: DOUBLE
71295: GREATEREQUAL
71296: IFFALSE 71304
71298: LD_INT 399
71300: DOUBLE
71301: LESSEQUAL
71302: IFTRUE 71306
71304: GO 71368
71306: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71307: LD_VAR 0 1
71311: PPUSH
71312: LD_VAR 0 2
71316: PPUSH
71317: LD_VAR 0 3
71321: PPUSH
71322: LD_VAR 0 4
71326: PPUSH
71327: LD_VAR 0 5
71331: PPUSH
71332: LD_VAR 0 6
71336: PPUSH
71337: LD_VAR 0 7
71341: PPUSH
71342: LD_VAR 0 8
71346: PPUSH
71347: LD_VAR 0 9
71351: PPUSH
71352: LD_VAR 0 10
71356: PPUSH
71357: LD_VAR 0 11
71361: PPUSH
71362: CALL 67950 0 11
71366: GO 71369
71368: POP
// end ;
71369: PPOPN 11
71371: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71372: LD_VAR 0 1
71376: PPUSH
71377: LD_VAR 0 2
71381: PPUSH
71382: LD_VAR 0 3
71386: PPUSH
71387: LD_VAR 0 4
71391: PPUSH
71392: LD_VAR 0 5
71396: PPUSH
71397: CALL 71516 0 5
// end ; end_of_file
71401: PPOPN 5
71403: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
71404: LD_INT 0
71406: PPUSH
71407: PPUSH
71408: PPUSH
71409: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
71410: LD_VAR 0 1
71414: PPUSH
71415: CALL_OW 264
71419: PUSH
71420: LD_INT 91
71422: EQUAL
71423: IFFALSE 71495
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
71425: LD_INT 68
71427: PPUSH
71428: LD_VAR 0 1
71432: PPUSH
71433: CALL_OW 255
71437: PPUSH
71438: CALL_OW 321
71442: PUSH
71443: LD_INT 2
71445: EQUAL
71446: IFFALSE 71458
// eff := 70 else
71448: LD_ADDR_VAR 0 4
71452: PUSH
71453: LD_INT 70
71455: ST_TO_ADDR
71456: GO 71466
// eff := 30 ;
71458: LD_ADDR_VAR 0 4
71462: PUSH
71463: LD_INT 30
71465: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
71466: LD_VAR 0 1
71470: PPUSH
71471: CALL_OW 250
71475: PPUSH
71476: LD_VAR 0 1
71480: PPUSH
71481: CALL_OW 251
71485: PPUSH
71486: LD_VAR 0 4
71490: PPUSH
71491: CALL_OW 495
// end ; end ;
71495: LD_VAR 0 2
71499: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
71500: LD_INT 0
71502: PPUSH
// end ;
71503: LD_VAR 0 4
71507: RET
// export function SOS_Command ( cmd ) ; begin
71508: LD_INT 0
71510: PPUSH
// end ;
71511: LD_VAR 0 2
71515: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
71516: LD_INT 0
71518: PPUSH
// end ;
71519: LD_VAR 0 6
71523: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
71524: LD_INT 0
71526: PPUSH
71527: PPUSH
// if not vehicle or not factory then
71528: LD_VAR 0 1
71532: NOT
71533: PUSH
71534: LD_VAR 0 2
71538: NOT
71539: OR
71540: IFFALSE 71544
// exit ;
71542: GO 71775
// if factoryWaypoints >= factory then
71544: LD_EXP 109
71548: PUSH
71549: LD_VAR 0 2
71553: GREATEREQUAL
71554: IFFALSE 71775
// if factoryWaypoints [ factory ] then
71556: LD_EXP 109
71560: PUSH
71561: LD_VAR 0 2
71565: ARRAY
71566: IFFALSE 71775
// begin if GetControl ( vehicle ) = control_manual then
71568: LD_VAR 0 1
71572: PPUSH
71573: CALL_OW 263
71577: PUSH
71578: LD_INT 1
71580: EQUAL
71581: IFFALSE 71662
// begin driver := IsDrivenBy ( vehicle ) ;
71583: LD_ADDR_VAR 0 4
71587: PUSH
71588: LD_VAR 0 1
71592: PPUSH
71593: CALL_OW 311
71597: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
71598: LD_VAR 0 4
71602: PPUSH
71603: LD_EXP 109
71607: PUSH
71608: LD_VAR 0 2
71612: ARRAY
71613: PUSH
71614: LD_INT 3
71616: ARRAY
71617: PPUSH
71618: LD_EXP 109
71622: PUSH
71623: LD_VAR 0 2
71627: ARRAY
71628: PUSH
71629: LD_INT 4
71631: ARRAY
71632: PPUSH
71633: CALL_OW 171
// AddComExitVehicle ( driver ) ;
71637: LD_VAR 0 4
71641: PPUSH
71642: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
71646: LD_VAR 0 4
71650: PPUSH
71651: LD_VAR 0 2
71655: PPUSH
71656: CALL_OW 180
// end else
71660: GO 71775
// if GetControl ( vehicle ) = control_remote then
71662: LD_VAR 0 1
71666: PPUSH
71667: CALL_OW 263
71671: PUSH
71672: LD_INT 2
71674: EQUAL
71675: IFFALSE 71736
// begin wait ( 0 0$2 ) ;
71677: LD_INT 70
71679: PPUSH
71680: CALL_OW 67
// if Connect ( vehicle ) then
71684: LD_VAR 0 1
71688: PPUSH
71689: CALL 22513 0 1
71693: IFFALSE 71734
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
71695: LD_VAR 0 1
71699: PPUSH
71700: LD_EXP 109
71704: PUSH
71705: LD_VAR 0 2
71709: ARRAY
71710: PUSH
71711: LD_INT 3
71713: ARRAY
71714: PPUSH
71715: LD_EXP 109
71719: PUSH
71720: LD_VAR 0 2
71724: ARRAY
71725: PUSH
71726: LD_INT 4
71728: ARRAY
71729: PPUSH
71730: CALL_OW 171
// end else
71734: GO 71775
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
71736: LD_VAR 0 1
71740: PPUSH
71741: LD_EXP 109
71745: PUSH
71746: LD_VAR 0 2
71750: ARRAY
71751: PUSH
71752: LD_INT 3
71754: ARRAY
71755: PPUSH
71756: LD_EXP 109
71760: PUSH
71761: LD_VAR 0 2
71765: ARRAY
71766: PUSH
71767: LD_INT 4
71769: ARRAY
71770: PPUSH
71771: CALL_OW 171
// end ; end ;
71775: LD_VAR 0 3
71779: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
71780: LD_INT 0
71782: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
71783: LD_VAR 0 1
71787: PUSH
71788: LD_INT 250
71790: EQUAL
71791: PUSH
71792: LD_VAR 0 2
71796: PPUSH
71797: CALL_OW 264
71801: PUSH
71802: LD_INT 81
71804: EQUAL
71805: AND
71806: IFFALSE 71827
// MinerPlaceMine ( unit , x , y ) ;
71808: LD_VAR 0 2
71812: PPUSH
71813: LD_VAR 0 4
71817: PPUSH
71818: LD_VAR 0 5
71822: PPUSH
71823: CALL 74212 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
71827: LD_VAR 0 1
71831: PUSH
71832: LD_INT 251
71834: EQUAL
71835: PUSH
71836: LD_VAR 0 2
71840: PPUSH
71841: CALL_OW 264
71845: PUSH
71846: LD_INT 81
71848: EQUAL
71849: AND
71850: IFFALSE 71871
// MinerDetonateMine ( unit , x , y ) ;
71852: LD_VAR 0 2
71856: PPUSH
71857: LD_VAR 0 4
71861: PPUSH
71862: LD_VAR 0 5
71866: PPUSH
71867: CALL 74487 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
71871: LD_VAR 0 1
71875: PUSH
71876: LD_INT 252
71878: EQUAL
71879: PUSH
71880: LD_VAR 0 2
71884: PPUSH
71885: CALL_OW 264
71889: PUSH
71890: LD_INT 81
71892: EQUAL
71893: AND
71894: IFFALSE 71915
// MinerCreateMinefield ( unit , x , y ) ;
71896: LD_VAR 0 2
71900: PPUSH
71901: LD_VAR 0 4
71905: PPUSH
71906: LD_VAR 0 5
71910: PPUSH
71911: CALL 74904 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
71915: LD_VAR 0 1
71919: PUSH
71920: LD_INT 253
71922: EQUAL
71923: PUSH
71924: LD_VAR 0 2
71928: PPUSH
71929: CALL_OW 257
71933: PUSH
71934: LD_INT 5
71936: EQUAL
71937: AND
71938: IFFALSE 71959
// ComBinocular ( unit , x , y ) ;
71940: LD_VAR 0 2
71944: PPUSH
71945: LD_VAR 0 4
71949: PPUSH
71950: LD_VAR 0 5
71954: PPUSH
71955: CALL 75273 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
71959: LD_VAR 0 1
71963: PUSH
71964: LD_INT 254
71966: EQUAL
71967: PUSH
71968: LD_VAR 0 2
71972: PPUSH
71973: CALL_OW 264
71977: PUSH
71978: LD_INT 99
71980: EQUAL
71981: AND
71982: PUSH
71983: LD_VAR 0 3
71987: PPUSH
71988: CALL_OW 263
71992: PUSH
71993: LD_INT 3
71995: EQUAL
71996: AND
71997: IFFALSE 72013
// HackDestroyVehicle ( unit , selectedUnit ) ;
71999: LD_VAR 0 2
72003: PPUSH
72004: LD_VAR 0 3
72008: PPUSH
72009: CALL 73576 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
72013: LD_VAR 0 1
72017: PUSH
72018: LD_INT 255
72020: EQUAL
72021: PUSH
72022: LD_VAR 0 2
72026: PPUSH
72027: CALL_OW 264
72031: PUSH
72032: LD_INT 14
72034: PUSH
72035: LD_INT 53
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: IN
72042: AND
72043: PUSH
72044: LD_VAR 0 4
72048: PPUSH
72049: LD_VAR 0 5
72053: PPUSH
72054: CALL_OW 488
72058: AND
72059: IFFALSE 72083
// CutTreeXYR ( unit , x , y , 12 ) ;
72061: LD_VAR 0 2
72065: PPUSH
72066: LD_VAR 0 4
72070: PPUSH
72071: LD_VAR 0 5
72075: PPUSH
72076: LD_INT 12
72078: PPUSH
72079: CALL 72146 0 4
// if cmd = 256 then
72083: LD_VAR 0 1
72087: PUSH
72088: LD_INT 256
72090: EQUAL
72091: IFFALSE 72112
// SetFactoryWaypoint ( unit , x , y ) ;
72093: LD_VAR 0 2
72097: PPUSH
72098: LD_VAR 0 4
72102: PPUSH
72103: LD_VAR 0 5
72107: PPUSH
72108: CALL 69930 0 3
// if cmd = 257 then
72112: LD_VAR 0 1
72116: PUSH
72117: LD_INT 257
72119: EQUAL
72120: IFFALSE 72141
// SetWarehouseGatheringPoint ( unit , x , y ) ;
72122: LD_VAR 0 2
72126: PPUSH
72127: LD_VAR 0 4
72131: PPUSH
72132: LD_VAR 0 5
72136: PPUSH
72137: CALL 70292 0 3
// end ;
72141: LD_VAR 0 6
72145: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
72146: LD_INT 0
72148: PPUSH
72149: PPUSH
72150: PPUSH
72151: PPUSH
72152: PPUSH
72153: PPUSH
72154: PPUSH
72155: PPUSH
72156: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
72157: LD_VAR 0 1
72161: NOT
72162: PUSH
72163: LD_VAR 0 2
72167: PPUSH
72168: LD_VAR 0 3
72172: PPUSH
72173: CALL_OW 488
72177: NOT
72178: OR
72179: PUSH
72180: LD_VAR 0 4
72184: NOT
72185: OR
72186: IFFALSE 72190
// exit ;
72188: GO 72530
// list := [ ] ;
72190: LD_ADDR_VAR 0 13
72194: PUSH
72195: EMPTY
72196: ST_TO_ADDR
// if x - r < 0 then
72197: LD_VAR 0 2
72201: PUSH
72202: LD_VAR 0 4
72206: MINUS
72207: PUSH
72208: LD_INT 0
72210: LESS
72211: IFFALSE 72223
// min_x := 0 else
72213: LD_ADDR_VAR 0 7
72217: PUSH
72218: LD_INT 0
72220: ST_TO_ADDR
72221: GO 72239
// min_x := x - r ;
72223: LD_ADDR_VAR 0 7
72227: PUSH
72228: LD_VAR 0 2
72232: PUSH
72233: LD_VAR 0 4
72237: MINUS
72238: ST_TO_ADDR
// if y - r < 0 then
72239: LD_VAR 0 3
72243: PUSH
72244: LD_VAR 0 4
72248: MINUS
72249: PUSH
72250: LD_INT 0
72252: LESS
72253: IFFALSE 72265
// min_y := 0 else
72255: LD_ADDR_VAR 0 8
72259: PUSH
72260: LD_INT 0
72262: ST_TO_ADDR
72263: GO 72281
// min_y := y - r ;
72265: LD_ADDR_VAR 0 8
72269: PUSH
72270: LD_VAR 0 3
72274: PUSH
72275: LD_VAR 0 4
72279: MINUS
72280: ST_TO_ADDR
// max_x := x + r ;
72281: LD_ADDR_VAR 0 9
72285: PUSH
72286: LD_VAR 0 2
72290: PUSH
72291: LD_VAR 0 4
72295: PLUS
72296: ST_TO_ADDR
// max_y := y + r ;
72297: LD_ADDR_VAR 0 10
72301: PUSH
72302: LD_VAR 0 3
72306: PUSH
72307: LD_VAR 0 4
72311: PLUS
72312: ST_TO_ADDR
// for _x = min_x to max_x do
72313: LD_ADDR_VAR 0 11
72317: PUSH
72318: DOUBLE
72319: LD_VAR 0 7
72323: DEC
72324: ST_TO_ADDR
72325: LD_VAR 0 9
72329: PUSH
72330: FOR_TO
72331: IFFALSE 72448
// for _y = min_y to max_y do
72333: LD_ADDR_VAR 0 12
72337: PUSH
72338: DOUBLE
72339: LD_VAR 0 8
72343: DEC
72344: ST_TO_ADDR
72345: LD_VAR 0 10
72349: PUSH
72350: FOR_TO
72351: IFFALSE 72444
// begin if not ValidHex ( _x , _y ) then
72353: LD_VAR 0 11
72357: PPUSH
72358: LD_VAR 0 12
72362: PPUSH
72363: CALL_OW 488
72367: NOT
72368: IFFALSE 72372
// continue ;
72370: GO 72350
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
72372: LD_VAR 0 11
72376: PPUSH
72377: LD_VAR 0 12
72381: PPUSH
72382: CALL_OW 351
72386: PUSH
72387: LD_VAR 0 11
72391: PPUSH
72392: LD_VAR 0 12
72396: PPUSH
72397: CALL_OW 554
72401: AND
72402: IFFALSE 72442
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
72404: LD_ADDR_VAR 0 13
72408: PUSH
72409: LD_VAR 0 13
72413: PPUSH
72414: LD_VAR 0 13
72418: PUSH
72419: LD_INT 1
72421: PLUS
72422: PPUSH
72423: LD_VAR 0 11
72427: PUSH
72428: LD_VAR 0 12
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PPUSH
72437: CALL_OW 2
72441: ST_TO_ADDR
// end ;
72442: GO 72350
72444: POP
72445: POP
72446: GO 72330
72448: POP
72449: POP
// if not list then
72450: LD_VAR 0 13
72454: NOT
72455: IFFALSE 72459
// exit ;
72457: GO 72530
// for i in list do
72459: LD_ADDR_VAR 0 6
72463: PUSH
72464: LD_VAR 0 13
72468: PUSH
72469: FOR_IN
72470: IFFALSE 72528
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
72472: LD_VAR 0 1
72476: PPUSH
72477: LD_STRING M
72479: PUSH
72480: LD_VAR 0 6
72484: PUSH
72485: LD_INT 1
72487: ARRAY
72488: PUSH
72489: LD_VAR 0 6
72493: PUSH
72494: LD_INT 2
72496: ARRAY
72497: PUSH
72498: LD_INT 0
72500: PUSH
72501: LD_INT 0
72503: PUSH
72504: LD_INT 0
72506: PUSH
72507: LD_INT 0
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: LIST
72518: PUSH
72519: EMPTY
72520: LIST
72521: PPUSH
72522: CALL_OW 447
72526: GO 72469
72528: POP
72529: POP
// end ;
72530: LD_VAR 0 5
72534: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
72535: LD_EXP 112
72539: NOT
72540: IFFALSE 72590
72542: GO 72544
72544: DISABLE
// begin initHack := true ;
72545: LD_ADDR_EXP 112
72549: PUSH
72550: LD_INT 1
72552: ST_TO_ADDR
// hackTanks := [ ] ;
72553: LD_ADDR_EXP 113
72557: PUSH
72558: EMPTY
72559: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
72560: LD_ADDR_EXP 114
72564: PUSH
72565: EMPTY
72566: ST_TO_ADDR
// hackLimit := 3 ;
72567: LD_ADDR_EXP 115
72571: PUSH
72572: LD_INT 3
72574: ST_TO_ADDR
// hackDist := 12 ;
72575: LD_ADDR_EXP 116
72579: PUSH
72580: LD_INT 12
72582: ST_TO_ADDR
// hackCounter := [ ] ;
72583: LD_ADDR_EXP 117
72587: PUSH
72588: EMPTY
72589: ST_TO_ADDR
// end ;
72590: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
72591: LD_EXP 112
72595: PUSH
72596: LD_INT 34
72598: PUSH
72599: LD_INT 99
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: PPUSH
72606: CALL_OW 69
72610: AND
72611: IFFALSE 72864
72613: GO 72615
72615: DISABLE
72616: LD_INT 0
72618: PPUSH
72619: PPUSH
// begin enable ;
72620: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
72621: LD_ADDR_VAR 0 1
72625: PUSH
72626: LD_INT 34
72628: PUSH
72629: LD_INT 99
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: PPUSH
72636: CALL_OW 69
72640: PUSH
72641: FOR_IN
72642: IFFALSE 72862
// begin if not i in hackTanks then
72644: LD_VAR 0 1
72648: PUSH
72649: LD_EXP 113
72653: IN
72654: NOT
72655: IFFALSE 72738
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
72657: LD_ADDR_EXP 113
72661: PUSH
72662: LD_EXP 113
72666: PPUSH
72667: LD_EXP 113
72671: PUSH
72672: LD_INT 1
72674: PLUS
72675: PPUSH
72676: LD_VAR 0 1
72680: PPUSH
72681: CALL_OW 1
72685: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
72686: LD_ADDR_EXP 114
72690: PUSH
72691: LD_EXP 114
72695: PPUSH
72696: LD_EXP 114
72700: PUSH
72701: LD_INT 1
72703: PLUS
72704: PPUSH
72705: EMPTY
72706: PPUSH
72707: CALL_OW 1
72711: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
72712: LD_ADDR_EXP 117
72716: PUSH
72717: LD_EXP 117
72721: PPUSH
72722: LD_EXP 117
72726: PUSH
72727: LD_INT 1
72729: PLUS
72730: PPUSH
72731: EMPTY
72732: PPUSH
72733: CALL_OW 1
72737: ST_TO_ADDR
// end ; if not IsOk ( i ) then
72738: LD_VAR 0 1
72742: PPUSH
72743: CALL_OW 302
72747: NOT
72748: IFFALSE 72761
// begin HackUnlinkAll ( i ) ;
72750: LD_VAR 0 1
72754: PPUSH
72755: CALL 72867 0 1
// continue ;
72759: GO 72641
// end ; HackCheckCapturedStatus ( i ) ;
72761: LD_VAR 0 1
72765: PPUSH
72766: CALL 73310 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
72770: LD_ADDR_VAR 0 2
72774: PUSH
72775: LD_INT 81
72777: PUSH
72778: LD_VAR 0 1
72782: PPUSH
72783: CALL_OW 255
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: PUSH
72792: LD_INT 33
72794: PUSH
72795: LD_INT 3
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: PUSH
72802: LD_INT 91
72804: PUSH
72805: LD_VAR 0 1
72809: PUSH
72810: LD_EXP 116
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: LIST
72819: PUSH
72820: LD_INT 50
72822: PUSH
72823: EMPTY
72824: LIST
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: LIST
72830: LIST
72831: PPUSH
72832: CALL_OW 69
72836: ST_TO_ADDR
// if not tmp then
72837: LD_VAR 0 2
72841: NOT
72842: IFFALSE 72846
// continue ;
72844: GO 72641
// HackLink ( i , tmp ) ;
72846: LD_VAR 0 1
72850: PPUSH
72851: LD_VAR 0 2
72855: PPUSH
72856: CALL 73003 0 2
// end ;
72860: GO 72641
72862: POP
72863: POP
// end ;
72864: PPOPN 2
72866: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
72867: LD_INT 0
72869: PPUSH
72870: PPUSH
72871: PPUSH
// if not hack in hackTanks then
72872: LD_VAR 0 1
72876: PUSH
72877: LD_EXP 113
72881: IN
72882: NOT
72883: IFFALSE 72887
// exit ;
72885: GO 72998
// index := GetElementIndex ( hackTanks , hack ) ;
72887: LD_ADDR_VAR 0 4
72891: PUSH
72892: LD_EXP 113
72896: PPUSH
72897: LD_VAR 0 1
72901: PPUSH
72902: CALL 19329 0 2
72906: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
72907: LD_EXP 114
72911: PUSH
72912: LD_VAR 0 4
72916: ARRAY
72917: IFFALSE 72998
// begin for i in hackTanksCaptured [ index ] do
72919: LD_ADDR_VAR 0 3
72923: PUSH
72924: LD_EXP 114
72928: PUSH
72929: LD_VAR 0 4
72933: ARRAY
72934: PUSH
72935: FOR_IN
72936: IFFALSE 72962
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
72938: LD_VAR 0 3
72942: PUSH
72943: LD_INT 1
72945: ARRAY
72946: PPUSH
72947: LD_VAR 0 3
72951: PUSH
72952: LD_INT 2
72954: ARRAY
72955: PPUSH
72956: CALL_OW 235
72960: GO 72935
72962: POP
72963: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
72964: LD_ADDR_EXP 114
72968: PUSH
72969: LD_EXP 114
72973: PPUSH
72974: LD_VAR 0 4
72978: PPUSH
72979: EMPTY
72980: PPUSH
72981: CALL_OW 1
72985: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
72986: LD_VAR 0 1
72990: PPUSH
72991: LD_INT 0
72993: PPUSH
72994: CALL_OW 505
// end ; end ;
72998: LD_VAR 0 2
73002: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
73003: LD_INT 0
73005: PPUSH
73006: PPUSH
73007: PPUSH
// if not hack in hackTanks or not vehicles then
73008: LD_VAR 0 1
73012: PUSH
73013: LD_EXP 113
73017: IN
73018: NOT
73019: PUSH
73020: LD_VAR 0 2
73024: NOT
73025: OR
73026: IFFALSE 73030
// exit ;
73028: GO 73305
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
73030: LD_ADDR_VAR 0 2
73034: PUSH
73035: LD_VAR 0 1
73039: PPUSH
73040: LD_VAR 0 2
73044: PPUSH
73045: LD_INT 1
73047: PPUSH
73048: LD_INT 1
73050: PPUSH
73051: CALL 19979 0 4
73055: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
73056: LD_ADDR_VAR 0 5
73060: PUSH
73061: LD_EXP 113
73065: PPUSH
73066: LD_VAR 0 1
73070: PPUSH
73071: CALL 19329 0 2
73075: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
73076: LD_EXP 114
73080: PUSH
73081: LD_VAR 0 5
73085: ARRAY
73086: PUSH
73087: LD_EXP 115
73091: LESS
73092: IFFALSE 73281
// begin for i := 1 to vehicles do
73094: LD_ADDR_VAR 0 4
73098: PUSH
73099: DOUBLE
73100: LD_INT 1
73102: DEC
73103: ST_TO_ADDR
73104: LD_VAR 0 2
73108: PUSH
73109: FOR_TO
73110: IFFALSE 73279
// begin if hackTanksCaptured [ index ] = hackLimit then
73112: LD_EXP 114
73116: PUSH
73117: LD_VAR 0 5
73121: ARRAY
73122: PUSH
73123: LD_EXP 115
73127: EQUAL
73128: IFFALSE 73132
// break ;
73130: GO 73279
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
73132: LD_ADDR_EXP 117
73136: PUSH
73137: LD_EXP 117
73141: PPUSH
73142: LD_VAR 0 5
73146: PPUSH
73147: LD_EXP 117
73151: PUSH
73152: LD_VAR 0 5
73156: ARRAY
73157: PUSH
73158: LD_INT 1
73160: PLUS
73161: PPUSH
73162: CALL_OW 1
73166: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
73167: LD_ADDR_EXP 114
73171: PUSH
73172: LD_EXP 114
73176: PPUSH
73177: LD_VAR 0 5
73181: PUSH
73182: LD_EXP 114
73186: PUSH
73187: LD_VAR 0 5
73191: ARRAY
73192: PUSH
73193: LD_INT 1
73195: PLUS
73196: PUSH
73197: EMPTY
73198: LIST
73199: LIST
73200: PPUSH
73201: LD_VAR 0 2
73205: PUSH
73206: LD_VAR 0 4
73210: ARRAY
73211: PUSH
73212: LD_VAR 0 2
73216: PUSH
73217: LD_VAR 0 4
73221: ARRAY
73222: PPUSH
73223: CALL_OW 255
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: PPUSH
73232: CALL 19544 0 3
73236: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
73237: LD_VAR 0 2
73241: PUSH
73242: LD_VAR 0 4
73246: ARRAY
73247: PPUSH
73248: LD_VAR 0 1
73252: PPUSH
73253: CALL_OW 255
73257: PPUSH
73258: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
73262: LD_VAR 0 2
73266: PUSH
73267: LD_VAR 0 4
73271: ARRAY
73272: PPUSH
73273: CALL_OW 141
// end ;
73277: GO 73109
73279: POP
73280: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
73281: LD_VAR 0 1
73285: PPUSH
73286: LD_EXP 114
73290: PUSH
73291: LD_VAR 0 5
73295: ARRAY
73296: PUSH
73297: LD_INT 0
73299: PLUS
73300: PPUSH
73301: CALL_OW 505
// end ;
73305: LD_VAR 0 3
73309: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
73310: LD_INT 0
73312: PPUSH
73313: PPUSH
73314: PPUSH
73315: PPUSH
// if not hack in hackTanks then
73316: LD_VAR 0 1
73320: PUSH
73321: LD_EXP 113
73325: IN
73326: NOT
73327: IFFALSE 73331
// exit ;
73329: GO 73571
// index := GetElementIndex ( hackTanks , hack ) ;
73331: LD_ADDR_VAR 0 4
73335: PUSH
73336: LD_EXP 113
73340: PPUSH
73341: LD_VAR 0 1
73345: PPUSH
73346: CALL 19329 0 2
73350: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
73351: LD_ADDR_VAR 0 3
73355: PUSH
73356: DOUBLE
73357: LD_EXP 114
73361: PUSH
73362: LD_VAR 0 4
73366: ARRAY
73367: INC
73368: ST_TO_ADDR
73369: LD_INT 1
73371: PUSH
73372: FOR_DOWNTO
73373: IFFALSE 73545
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
73375: LD_ADDR_VAR 0 5
73379: PUSH
73380: LD_EXP 114
73384: PUSH
73385: LD_VAR 0 4
73389: ARRAY
73390: PUSH
73391: LD_VAR 0 3
73395: ARRAY
73396: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
73397: LD_VAR 0 5
73401: PUSH
73402: LD_INT 1
73404: ARRAY
73405: PPUSH
73406: CALL_OW 302
73410: NOT
73411: PUSH
73412: LD_VAR 0 5
73416: PUSH
73417: LD_INT 1
73419: ARRAY
73420: PPUSH
73421: CALL_OW 255
73425: PUSH
73426: LD_VAR 0 1
73430: PPUSH
73431: CALL_OW 255
73435: NONEQUAL
73436: OR
73437: IFFALSE 73543
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
73439: LD_VAR 0 5
73443: PUSH
73444: LD_INT 1
73446: ARRAY
73447: PPUSH
73448: CALL_OW 305
73452: PUSH
73453: LD_VAR 0 5
73457: PUSH
73458: LD_INT 1
73460: ARRAY
73461: PPUSH
73462: CALL_OW 255
73466: PUSH
73467: LD_VAR 0 1
73471: PPUSH
73472: CALL_OW 255
73476: EQUAL
73477: AND
73478: IFFALSE 73502
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
73480: LD_VAR 0 5
73484: PUSH
73485: LD_INT 1
73487: ARRAY
73488: PPUSH
73489: LD_VAR 0 5
73493: PUSH
73494: LD_INT 2
73496: ARRAY
73497: PPUSH
73498: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
73502: LD_ADDR_EXP 114
73506: PUSH
73507: LD_EXP 114
73511: PPUSH
73512: LD_VAR 0 4
73516: PPUSH
73517: LD_EXP 114
73521: PUSH
73522: LD_VAR 0 4
73526: ARRAY
73527: PPUSH
73528: LD_VAR 0 3
73532: PPUSH
73533: CALL_OW 3
73537: PPUSH
73538: CALL_OW 1
73542: ST_TO_ADDR
// end ; end ;
73543: GO 73372
73545: POP
73546: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
73547: LD_VAR 0 1
73551: PPUSH
73552: LD_EXP 114
73556: PUSH
73557: LD_VAR 0 4
73561: ARRAY
73562: PUSH
73563: LD_INT 0
73565: PLUS
73566: PPUSH
73567: CALL_OW 505
// end ;
73571: LD_VAR 0 2
73575: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
73576: LD_INT 0
73578: PPUSH
73579: PPUSH
73580: PPUSH
73581: PPUSH
// if not hack in hackTanks then
73582: LD_VAR 0 1
73586: PUSH
73587: LD_EXP 113
73591: IN
73592: NOT
73593: IFFALSE 73597
// exit ;
73595: GO 73682
// index := GetElementIndex ( hackTanks , hack ) ;
73597: LD_ADDR_VAR 0 5
73601: PUSH
73602: LD_EXP 113
73606: PPUSH
73607: LD_VAR 0 1
73611: PPUSH
73612: CALL 19329 0 2
73616: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
73617: LD_ADDR_VAR 0 4
73621: PUSH
73622: DOUBLE
73623: LD_INT 1
73625: DEC
73626: ST_TO_ADDR
73627: LD_EXP 114
73631: PUSH
73632: LD_VAR 0 5
73636: ARRAY
73637: PUSH
73638: FOR_TO
73639: IFFALSE 73680
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
73641: LD_EXP 114
73645: PUSH
73646: LD_VAR 0 5
73650: ARRAY
73651: PUSH
73652: LD_VAR 0 4
73656: ARRAY
73657: PUSH
73658: LD_INT 1
73660: ARRAY
73661: PUSH
73662: LD_VAR 0 2
73666: EQUAL
73667: IFFALSE 73678
// KillUnit ( vehicle ) ;
73669: LD_VAR 0 2
73673: PPUSH
73674: CALL_OW 66
73678: GO 73638
73680: POP
73681: POP
// end ;
73682: LD_VAR 0 3
73686: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
73687: LD_EXP 118
73691: NOT
73692: IFFALSE 73727
73694: GO 73696
73696: DISABLE
// begin initMiner := true ;
73697: LD_ADDR_EXP 118
73701: PUSH
73702: LD_INT 1
73704: ST_TO_ADDR
// minersList := [ ] ;
73705: LD_ADDR_EXP 119
73709: PUSH
73710: EMPTY
73711: ST_TO_ADDR
// minerMinesList := [ ] ;
73712: LD_ADDR_EXP 120
73716: PUSH
73717: EMPTY
73718: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
73719: LD_ADDR_EXP 121
73723: PUSH
73724: LD_INT 5
73726: ST_TO_ADDR
// end ;
73727: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
73728: LD_EXP 118
73732: PUSH
73733: LD_INT 34
73735: PUSH
73736: LD_INT 81
73738: PUSH
73739: EMPTY
73740: LIST
73741: LIST
73742: PPUSH
73743: CALL_OW 69
73747: AND
73748: IFFALSE 74209
73750: GO 73752
73752: DISABLE
73753: LD_INT 0
73755: PPUSH
73756: PPUSH
73757: PPUSH
73758: PPUSH
// begin enable ;
73759: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
73760: LD_ADDR_VAR 0 1
73764: PUSH
73765: LD_INT 34
73767: PUSH
73768: LD_INT 81
73770: PUSH
73771: EMPTY
73772: LIST
73773: LIST
73774: PPUSH
73775: CALL_OW 69
73779: PUSH
73780: FOR_IN
73781: IFFALSE 73853
// begin if not i in minersList then
73783: LD_VAR 0 1
73787: PUSH
73788: LD_EXP 119
73792: IN
73793: NOT
73794: IFFALSE 73851
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
73796: LD_ADDR_EXP 119
73800: PUSH
73801: LD_EXP 119
73805: PPUSH
73806: LD_EXP 119
73810: PUSH
73811: LD_INT 1
73813: PLUS
73814: PPUSH
73815: LD_VAR 0 1
73819: PPUSH
73820: CALL_OW 1
73824: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
73825: LD_ADDR_EXP 120
73829: PUSH
73830: LD_EXP 120
73834: PPUSH
73835: LD_EXP 120
73839: PUSH
73840: LD_INT 1
73842: PLUS
73843: PPUSH
73844: EMPTY
73845: PPUSH
73846: CALL_OW 1
73850: ST_TO_ADDR
// end end ;
73851: GO 73780
73853: POP
73854: POP
// for i := minerMinesList downto 1 do
73855: LD_ADDR_VAR 0 1
73859: PUSH
73860: DOUBLE
73861: LD_EXP 120
73865: INC
73866: ST_TO_ADDR
73867: LD_INT 1
73869: PUSH
73870: FOR_DOWNTO
73871: IFFALSE 74207
// begin if IsLive ( minersList [ i ] ) then
73873: LD_EXP 119
73877: PUSH
73878: LD_VAR 0 1
73882: ARRAY
73883: PPUSH
73884: CALL_OW 300
73888: IFFALSE 73916
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
73890: LD_EXP 119
73894: PUSH
73895: LD_VAR 0 1
73899: ARRAY
73900: PPUSH
73901: LD_EXP 120
73905: PUSH
73906: LD_VAR 0 1
73910: ARRAY
73911: PPUSH
73912: CALL_OW 505
// if not minerMinesList [ i ] then
73916: LD_EXP 120
73920: PUSH
73921: LD_VAR 0 1
73925: ARRAY
73926: NOT
73927: IFFALSE 73931
// continue ;
73929: GO 73870
// for j := minerMinesList [ i ] downto 1 do
73931: LD_ADDR_VAR 0 2
73935: PUSH
73936: DOUBLE
73937: LD_EXP 120
73941: PUSH
73942: LD_VAR 0 1
73946: ARRAY
73947: INC
73948: ST_TO_ADDR
73949: LD_INT 1
73951: PUSH
73952: FOR_DOWNTO
73953: IFFALSE 74203
// begin side := GetSide ( minersList [ i ] ) ;
73955: LD_ADDR_VAR 0 3
73959: PUSH
73960: LD_EXP 119
73964: PUSH
73965: LD_VAR 0 1
73969: ARRAY
73970: PPUSH
73971: CALL_OW 255
73975: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
73976: LD_ADDR_VAR 0 4
73980: PUSH
73981: LD_EXP 120
73985: PUSH
73986: LD_VAR 0 1
73990: ARRAY
73991: PUSH
73992: LD_VAR 0 2
73996: ARRAY
73997: PUSH
73998: LD_INT 1
74000: ARRAY
74001: PPUSH
74002: LD_EXP 120
74006: PUSH
74007: LD_VAR 0 1
74011: ARRAY
74012: PUSH
74013: LD_VAR 0 2
74017: ARRAY
74018: PUSH
74019: LD_INT 2
74021: ARRAY
74022: PPUSH
74023: CALL_OW 428
74027: ST_TO_ADDR
// if not tmp then
74028: LD_VAR 0 4
74032: NOT
74033: IFFALSE 74037
// continue ;
74035: GO 73952
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
74037: LD_VAR 0 4
74041: PUSH
74042: LD_INT 81
74044: PUSH
74045: LD_VAR 0 3
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: PPUSH
74054: CALL_OW 69
74058: IN
74059: PUSH
74060: LD_EXP 120
74064: PUSH
74065: LD_VAR 0 1
74069: ARRAY
74070: PUSH
74071: LD_VAR 0 2
74075: ARRAY
74076: PUSH
74077: LD_INT 1
74079: ARRAY
74080: PPUSH
74081: LD_EXP 120
74085: PUSH
74086: LD_VAR 0 1
74090: ARRAY
74091: PUSH
74092: LD_VAR 0 2
74096: ARRAY
74097: PUSH
74098: LD_INT 2
74100: ARRAY
74101: PPUSH
74102: CALL_OW 458
74106: AND
74107: IFFALSE 74201
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
74109: LD_EXP 120
74113: PUSH
74114: LD_VAR 0 1
74118: ARRAY
74119: PUSH
74120: LD_VAR 0 2
74124: ARRAY
74125: PUSH
74126: LD_INT 1
74128: ARRAY
74129: PPUSH
74130: LD_EXP 120
74134: PUSH
74135: LD_VAR 0 1
74139: ARRAY
74140: PUSH
74141: LD_VAR 0 2
74145: ARRAY
74146: PUSH
74147: LD_INT 2
74149: ARRAY
74150: PPUSH
74151: LD_VAR 0 3
74155: PPUSH
74156: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
74160: LD_ADDR_EXP 120
74164: PUSH
74165: LD_EXP 120
74169: PPUSH
74170: LD_VAR 0 1
74174: PPUSH
74175: LD_EXP 120
74179: PUSH
74180: LD_VAR 0 1
74184: ARRAY
74185: PPUSH
74186: LD_VAR 0 2
74190: PPUSH
74191: CALL_OW 3
74195: PPUSH
74196: CALL_OW 1
74200: ST_TO_ADDR
// end ; end ;
74201: GO 73952
74203: POP
74204: POP
// end ;
74205: GO 73870
74207: POP
74208: POP
// end ;
74209: PPOPN 4
74211: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
74212: LD_INT 0
74214: PPUSH
74215: PPUSH
// result := false ;
74216: LD_ADDR_VAR 0 4
74220: PUSH
74221: LD_INT 0
74223: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
74224: LD_VAR 0 1
74228: PPUSH
74229: CALL_OW 264
74233: PUSH
74234: LD_INT 81
74236: EQUAL
74237: NOT
74238: IFFALSE 74242
// exit ;
74240: GO 74482
// index := GetElementIndex ( minersList , unit ) ;
74242: LD_ADDR_VAR 0 5
74246: PUSH
74247: LD_EXP 119
74251: PPUSH
74252: LD_VAR 0 1
74256: PPUSH
74257: CALL 19329 0 2
74261: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
74262: LD_EXP 120
74266: PUSH
74267: LD_VAR 0 5
74271: ARRAY
74272: PUSH
74273: LD_EXP 121
74277: GREATEREQUAL
74278: IFFALSE 74282
// exit ;
74280: GO 74482
// ComMoveXY ( unit , x , y ) ;
74282: LD_VAR 0 1
74286: PPUSH
74287: LD_VAR 0 2
74291: PPUSH
74292: LD_VAR 0 3
74296: PPUSH
74297: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
74301: LD_INT 35
74303: PPUSH
74304: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
74308: LD_VAR 0 1
74312: PPUSH
74313: LD_VAR 0 2
74317: PPUSH
74318: LD_VAR 0 3
74322: PPUSH
74323: CALL 50592 0 3
74327: NOT
74328: PUSH
74329: LD_VAR 0 1
74333: PPUSH
74334: CALL_OW 314
74338: AND
74339: IFFALSE 74343
// exit ;
74341: GO 74482
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
74343: LD_VAR 0 2
74347: PPUSH
74348: LD_VAR 0 3
74352: PPUSH
74353: CALL_OW 428
74357: PUSH
74358: LD_VAR 0 1
74362: EQUAL
74363: PUSH
74364: LD_VAR 0 1
74368: PPUSH
74369: CALL_OW 314
74373: NOT
74374: AND
74375: IFFALSE 74301
// PlaySoundXY ( x , y , PlantMine ) ;
74377: LD_VAR 0 2
74381: PPUSH
74382: LD_VAR 0 3
74386: PPUSH
74387: LD_STRING PlantMine
74389: PPUSH
74390: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
74394: LD_VAR 0 2
74398: PPUSH
74399: LD_VAR 0 3
74403: PPUSH
74404: LD_VAR 0 1
74408: PPUSH
74409: CALL_OW 255
74413: PPUSH
74414: LD_INT 0
74416: PPUSH
74417: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
74421: LD_ADDR_EXP 120
74425: PUSH
74426: LD_EXP 120
74430: PPUSH
74431: LD_VAR 0 5
74435: PUSH
74436: LD_EXP 120
74440: PUSH
74441: LD_VAR 0 5
74445: ARRAY
74446: PUSH
74447: LD_INT 1
74449: PLUS
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PPUSH
74455: LD_VAR 0 2
74459: PUSH
74460: LD_VAR 0 3
74464: PUSH
74465: EMPTY
74466: LIST
74467: LIST
74468: PPUSH
74469: CALL 19544 0 3
74473: ST_TO_ADDR
// result := true ;
74474: LD_ADDR_VAR 0 4
74478: PUSH
74479: LD_INT 1
74481: ST_TO_ADDR
// end ;
74482: LD_VAR 0 4
74486: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
74487: LD_INT 0
74489: PPUSH
74490: PPUSH
74491: PPUSH
// if not unit in minersList then
74492: LD_VAR 0 1
74496: PUSH
74497: LD_EXP 119
74501: IN
74502: NOT
74503: IFFALSE 74507
// exit ;
74505: GO 74899
// index := GetElementIndex ( minersList , unit ) ;
74507: LD_ADDR_VAR 0 6
74511: PUSH
74512: LD_EXP 119
74516: PPUSH
74517: LD_VAR 0 1
74521: PPUSH
74522: CALL 19329 0 2
74526: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
74527: LD_ADDR_VAR 0 5
74531: PUSH
74532: DOUBLE
74533: LD_EXP 120
74537: PUSH
74538: LD_VAR 0 6
74542: ARRAY
74543: INC
74544: ST_TO_ADDR
74545: LD_INT 1
74547: PUSH
74548: FOR_DOWNTO
74549: IFFALSE 74710
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
74551: LD_EXP 120
74555: PUSH
74556: LD_VAR 0 6
74560: ARRAY
74561: PUSH
74562: LD_VAR 0 5
74566: ARRAY
74567: PUSH
74568: LD_INT 1
74570: ARRAY
74571: PUSH
74572: LD_VAR 0 2
74576: EQUAL
74577: PUSH
74578: LD_EXP 120
74582: PUSH
74583: LD_VAR 0 6
74587: ARRAY
74588: PUSH
74589: LD_VAR 0 5
74593: ARRAY
74594: PUSH
74595: LD_INT 2
74597: ARRAY
74598: PUSH
74599: LD_VAR 0 3
74603: EQUAL
74604: AND
74605: IFFALSE 74708
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
74607: LD_EXP 120
74611: PUSH
74612: LD_VAR 0 6
74616: ARRAY
74617: PUSH
74618: LD_VAR 0 5
74622: ARRAY
74623: PUSH
74624: LD_INT 1
74626: ARRAY
74627: PPUSH
74628: LD_EXP 120
74632: PUSH
74633: LD_VAR 0 6
74637: ARRAY
74638: PUSH
74639: LD_VAR 0 5
74643: ARRAY
74644: PUSH
74645: LD_INT 2
74647: ARRAY
74648: PPUSH
74649: LD_VAR 0 1
74653: PPUSH
74654: CALL_OW 255
74658: PPUSH
74659: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
74663: LD_ADDR_EXP 120
74667: PUSH
74668: LD_EXP 120
74672: PPUSH
74673: LD_VAR 0 6
74677: PPUSH
74678: LD_EXP 120
74682: PUSH
74683: LD_VAR 0 6
74687: ARRAY
74688: PPUSH
74689: LD_VAR 0 5
74693: PPUSH
74694: CALL_OW 3
74698: PPUSH
74699: CALL_OW 1
74703: ST_TO_ADDR
// exit ;
74704: POP
74705: POP
74706: GO 74899
// end ; end ;
74708: GO 74548
74710: POP
74711: POP
// for i := minerMinesList [ index ] downto 1 do
74712: LD_ADDR_VAR 0 5
74716: PUSH
74717: DOUBLE
74718: LD_EXP 120
74722: PUSH
74723: LD_VAR 0 6
74727: ARRAY
74728: INC
74729: ST_TO_ADDR
74730: LD_INT 1
74732: PUSH
74733: FOR_DOWNTO
74734: IFFALSE 74897
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
74736: LD_EXP 120
74740: PUSH
74741: LD_VAR 0 6
74745: ARRAY
74746: PUSH
74747: LD_VAR 0 5
74751: ARRAY
74752: PUSH
74753: LD_INT 1
74755: ARRAY
74756: PPUSH
74757: LD_EXP 120
74761: PUSH
74762: LD_VAR 0 6
74766: ARRAY
74767: PUSH
74768: LD_VAR 0 5
74772: ARRAY
74773: PUSH
74774: LD_INT 2
74776: ARRAY
74777: PPUSH
74778: LD_VAR 0 2
74782: PPUSH
74783: LD_VAR 0 3
74787: PPUSH
74788: CALL_OW 298
74792: PUSH
74793: LD_INT 6
74795: LESS
74796: IFFALSE 74895
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
74798: LD_EXP 120
74802: PUSH
74803: LD_VAR 0 6
74807: ARRAY
74808: PUSH
74809: LD_VAR 0 5
74813: ARRAY
74814: PUSH
74815: LD_INT 1
74817: ARRAY
74818: PPUSH
74819: LD_EXP 120
74823: PUSH
74824: LD_VAR 0 6
74828: ARRAY
74829: PUSH
74830: LD_VAR 0 5
74834: ARRAY
74835: PUSH
74836: LD_INT 2
74838: ARRAY
74839: PPUSH
74840: LD_VAR 0 1
74844: PPUSH
74845: CALL_OW 255
74849: PPUSH
74850: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
74854: LD_ADDR_EXP 120
74858: PUSH
74859: LD_EXP 120
74863: PPUSH
74864: LD_VAR 0 6
74868: PPUSH
74869: LD_EXP 120
74873: PUSH
74874: LD_VAR 0 6
74878: ARRAY
74879: PPUSH
74880: LD_VAR 0 5
74884: PPUSH
74885: CALL_OW 3
74889: PPUSH
74890: CALL_OW 1
74894: ST_TO_ADDR
// end ; end ;
74895: GO 74733
74897: POP
74898: POP
// end ;
74899: LD_VAR 0 4
74903: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
74904: LD_INT 0
74906: PPUSH
74907: PPUSH
74908: PPUSH
74909: PPUSH
74910: PPUSH
74911: PPUSH
74912: PPUSH
74913: PPUSH
74914: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
74915: LD_VAR 0 1
74919: PPUSH
74920: CALL_OW 264
74924: PUSH
74925: LD_INT 81
74927: EQUAL
74928: NOT
74929: PUSH
74930: LD_VAR 0 1
74934: PUSH
74935: LD_EXP 119
74939: IN
74940: NOT
74941: OR
74942: IFFALSE 74946
// exit ;
74944: GO 75268
// index := GetElementIndex ( minersList , unit ) ;
74946: LD_ADDR_VAR 0 6
74950: PUSH
74951: LD_EXP 119
74955: PPUSH
74956: LD_VAR 0 1
74960: PPUSH
74961: CALL 19329 0 2
74965: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
74966: LD_ADDR_VAR 0 8
74970: PUSH
74971: LD_EXP 121
74975: PUSH
74976: LD_EXP 120
74980: PUSH
74981: LD_VAR 0 6
74985: ARRAY
74986: MINUS
74987: ST_TO_ADDR
// if not minesFreeAmount then
74988: LD_VAR 0 8
74992: NOT
74993: IFFALSE 74997
// exit ;
74995: GO 75268
// tmp := [ ] ;
74997: LD_ADDR_VAR 0 7
75001: PUSH
75002: EMPTY
75003: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
75004: LD_ADDR_VAR 0 5
75008: PUSH
75009: DOUBLE
75010: LD_INT 1
75012: DEC
75013: ST_TO_ADDR
75014: LD_VAR 0 8
75018: PUSH
75019: FOR_TO
75020: IFFALSE 75215
// begin _d := rand ( 0 , 5 ) ;
75022: LD_ADDR_VAR 0 11
75026: PUSH
75027: LD_INT 0
75029: PPUSH
75030: LD_INT 5
75032: PPUSH
75033: CALL_OW 12
75037: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
75038: LD_ADDR_VAR 0 12
75042: PUSH
75043: LD_INT 2
75045: PPUSH
75046: LD_INT 6
75048: PPUSH
75049: CALL_OW 12
75053: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
75054: LD_ADDR_VAR 0 9
75058: PUSH
75059: LD_VAR 0 2
75063: PPUSH
75064: LD_VAR 0 11
75068: PPUSH
75069: LD_VAR 0 12
75073: PPUSH
75074: CALL_OW 272
75078: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
75079: LD_ADDR_VAR 0 10
75083: PUSH
75084: LD_VAR 0 3
75088: PPUSH
75089: LD_VAR 0 11
75093: PPUSH
75094: LD_VAR 0 12
75098: PPUSH
75099: CALL_OW 273
75103: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
75104: LD_VAR 0 9
75108: PPUSH
75109: LD_VAR 0 10
75113: PPUSH
75114: CALL_OW 488
75118: PUSH
75119: LD_VAR 0 9
75123: PUSH
75124: LD_VAR 0 10
75128: PUSH
75129: EMPTY
75130: LIST
75131: LIST
75132: PUSH
75133: LD_VAR 0 7
75137: IN
75138: NOT
75139: AND
75140: PUSH
75141: LD_VAR 0 9
75145: PPUSH
75146: LD_VAR 0 10
75150: PPUSH
75151: CALL_OW 458
75155: NOT
75156: AND
75157: IFFALSE 75199
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
75159: LD_ADDR_VAR 0 7
75163: PUSH
75164: LD_VAR 0 7
75168: PPUSH
75169: LD_VAR 0 7
75173: PUSH
75174: LD_INT 1
75176: PLUS
75177: PPUSH
75178: LD_VAR 0 9
75182: PUSH
75183: LD_VAR 0 10
75187: PUSH
75188: EMPTY
75189: LIST
75190: LIST
75191: PPUSH
75192: CALL_OW 1
75196: ST_TO_ADDR
75197: GO 75213
// i := i - 1 ;
75199: LD_ADDR_VAR 0 5
75203: PUSH
75204: LD_VAR 0 5
75208: PUSH
75209: LD_INT 1
75211: MINUS
75212: ST_TO_ADDR
// end ;
75213: GO 75019
75215: POP
75216: POP
// for i in tmp do
75217: LD_ADDR_VAR 0 5
75221: PUSH
75222: LD_VAR 0 7
75226: PUSH
75227: FOR_IN
75228: IFFALSE 75266
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
75230: LD_VAR 0 1
75234: PPUSH
75235: LD_VAR 0 5
75239: PUSH
75240: LD_INT 1
75242: ARRAY
75243: PPUSH
75244: LD_VAR 0 5
75248: PUSH
75249: LD_INT 2
75251: ARRAY
75252: PPUSH
75253: CALL 74212 0 3
75257: NOT
75258: IFFALSE 75264
// exit ;
75260: POP
75261: POP
75262: GO 75268
75264: GO 75227
75266: POP
75267: POP
// end ;
75268: LD_VAR 0 4
75272: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
75273: LD_INT 0
75275: PPUSH
75276: PPUSH
75277: PPUSH
75278: PPUSH
75279: PPUSH
75280: PPUSH
75281: PPUSH
// if not GetClass ( unit ) = class_sniper then
75282: LD_VAR 0 1
75286: PPUSH
75287: CALL_OW 257
75291: PUSH
75292: LD_INT 5
75294: EQUAL
75295: NOT
75296: IFFALSE 75300
// exit ;
75298: GO 75688
// dist := 8 ;
75300: LD_ADDR_VAR 0 5
75304: PUSH
75305: LD_INT 8
75307: ST_TO_ADDR
// viewRange := 12 ;
75308: LD_ADDR_VAR 0 7
75312: PUSH
75313: LD_INT 12
75315: ST_TO_ADDR
// side := GetSide ( unit ) ;
75316: LD_ADDR_VAR 0 6
75320: PUSH
75321: LD_VAR 0 1
75325: PPUSH
75326: CALL_OW 255
75330: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
75331: LD_INT 61
75333: PPUSH
75334: LD_VAR 0 6
75338: PPUSH
75339: CALL_OW 321
75343: PUSH
75344: LD_INT 2
75346: EQUAL
75347: IFFALSE 75357
// viewRange := 16 ;
75349: LD_ADDR_VAR 0 7
75353: PUSH
75354: LD_INT 16
75356: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
75357: LD_VAR 0 1
75361: PPUSH
75362: LD_VAR 0 2
75366: PPUSH
75367: LD_VAR 0 3
75371: PPUSH
75372: CALL_OW 297
75376: PUSH
75377: LD_VAR 0 5
75381: GREATER
75382: IFFALSE 75461
// begin ComMoveXY ( unit , x , y ) ;
75384: LD_VAR 0 1
75388: PPUSH
75389: LD_VAR 0 2
75393: PPUSH
75394: LD_VAR 0 3
75398: PPUSH
75399: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
75403: LD_INT 35
75405: PPUSH
75406: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
75410: LD_VAR 0 1
75414: PPUSH
75415: LD_VAR 0 2
75419: PPUSH
75420: LD_VAR 0 3
75424: PPUSH
75425: CALL 50592 0 3
75429: NOT
75430: IFFALSE 75434
// exit ;
75432: GO 75688
// until GetDistUnitXY ( unit , x , y ) < dist ;
75434: LD_VAR 0 1
75438: PPUSH
75439: LD_VAR 0 2
75443: PPUSH
75444: LD_VAR 0 3
75448: PPUSH
75449: CALL_OW 297
75453: PUSH
75454: LD_VAR 0 5
75458: LESS
75459: IFFALSE 75403
// end ; ComTurnXY ( unit , x , y ) ;
75461: LD_VAR 0 1
75465: PPUSH
75466: LD_VAR 0 2
75470: PPUSH
75471: LD_VAR 0 3
75475: PPUSH
75476: CALL_OW 118
// wait ( 5 ) ;
75480: LD_INT 5
75482: PPUSH
75483: CALL_OW 67
// _d := GetDir ( unit ) ;
75487: LD_ADDR_VAR 0 10
75491: PUSH
75492: LD_VAR 0 1
75496: PPUSH
75497: CALL_OW 254
75501: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
75502: LD_ADDR_VAR 0 8
75506: PUSH
75507: LD_VAR 0 1
75511: PPUSH
75512: CALL_OW 250
75516: PPUSH
75517: LD_VAR 0 10
75521: PPUSH
75522: LD_VAR 0 5
75526: PPUSH
75527: CALL_OW 272
75531: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
75532: LD_ADDR_VAR 0 9
75536: PUSH
75537: LD_VAR 0 1
75541: PPUSH
75542: CALL_OW 251
75546: PPUSH
75547: LD_VAR 0 10
75551: PPUSH
75552: LD_VAR 0 5
75556: PPUSH
75557: CALL_OW 273
75561: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75562: LD_VAR 0 8
75566: PPUSH
75567: LD_VAR 0 9
75571: PPUSH
75572: CALL_OW 488
75576: NOT
75577: IFFALSE 75581
// exit ;
75579: GO 75688
// ComAnimCustom ( unit , 1 ) ;
75581: LD_VAR 0 1
75585: PPUSH
75586: LD_INT 1
75588: PPUSH
75589: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
75593: LD_VAR 0 8
75597: PPUSH
75598: LD_VAR 0 9
75602: PPUSH
75603: LD_VAR 0 6
75607: PPUSH
75608: LD_VAR 0 7
75612: PPUSH
75613: CALL_OW 330
// repeat wait ( 1 ) ;
75617: LD_INT 1
75619: PPUSH
75620: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
75624: LD_VAR 0 1
75628: PPUSH
75629: CALL_OW 316
75633: PUSH
75634: LD_VAR 0 1
75638: PPUSH
75639: CALL_OW 314
75643: OR
75644: PUSH
75645: LD_VAR 0 1
75649: PPUSH
75650: CALL_OW 302
75654: NOT
75655: OR
75656: PUSH
75657: LD_VAR 0 1
75661: PPUSH
75662: CALL_OW 301
75666: OR
75667: IFFALSE 75617
// RemoveSeeing ( _x , _y , side ) ;
75669: LD_VAR 0 8
75673: PPUSH
75674: LD_VAR 0 9
75678: PPUSH
75679: LD_VAR 0 6
75683: PPUSH
75684: CALL_OW 331
// end ;
75688: LD_VAR 0 4
75692: RET
