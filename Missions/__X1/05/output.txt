// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 758 0 2
// PrepareArabian ;
  31: CALL 1379 0 0
// PrepareRussian ;
  35: CALL 3056 0 0
// Action ;
  39: CALL 8492 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// solar_recharge_amount := 0 ;
 262: LD_ADDR_OWVAR 82
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// end ;
 270: LD_VAR 0 1
 274: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 275: LD_EXP 10
 279: NOT
 280: IFFALSE 289
 282: PUSH
 283: LD_EXP 9
 287: NOT
 288: AND
 289: IFFALSE 298
 291: PUSH
 292: LD_EXP 39
 296: NOT
 297: AND
 298: IFFALSE 307
 300: PUSH
 301: LD_EXP 40
 305: NOT
 306: AND
 307: IFFALSE 319
 309: GO 311
 311: DISABLE
// SetAchievement ( ACH_EXT ) ;
 312: LD_STRING ACH_EXT
 314: PPUSH
 315: CALL_OW 543
 319: END
// every 0 0$1 trigger captureCounter >= 6 do
 320: LD_EXP 18
 324: PUSH
 325: LD_INT 6
 327: GREATEREQUAL
 328: IFFALSE 340
 330: GO 332
 332: DISABLE
// SetAchievement ( ACH_KEY ) ;
 333: LD_STRING ACH_KEY
 335: PPUSH
 336: CALL_OW 543
 340: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 341: LD_EXP 19
 345: PUSH
 346: LD_INT 3
 348: GREATEREQUAL
 349: IFFALSE 361
 351: GO 353
 353: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 354: LD_STRING ACH_CHEM
 356: PPUSH
 357: CALL_OW 543
 361: END
// every 0 0$1 trigger debug do var i ;
 362: LD_EXP 1
 366: IFFALSE 450
 368: GO 370
 370: DISABLE
 371: LD_INT 0
 373: PPUSH
// begin enable ;
 374: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 375: LD_ADDR_VAR 0 1
 379: PUSH
 380: LD_INT 22
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: PUSH
 390: LD_INT 3
 392: PUSH
 393: LD_INT 21
 395: PUSH
 396: LD_INT 3
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PPUSH
 411: CALL_OW 69
 415: PUSH
 416: FOR_IN
 417: IFFALSE 448
// if GetLives ( i ) < 1000 then
 419: LD_VAR 0 1
 423: PPUSH
 424: CALL_OW 256
 428: PUSH
 429: LD_INT 1000
 431: LESS
 432: IFFALSE 446
// SetLives ( i , 1000 ) ;
 434: LD_VAR 0 1
 438: PPUSH
 439: LD_INT 1000
 441: PPUSH
 442: CALL_OW 234
 446: GO 416
 448: POP
 449: POP
// end ; end_of_file
 450: PPOPN 1
 452: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 453: LD_INT 0
 455: PPUSH
// uc_side := side ;
 456: LD_ADDR_OWVAR 20
 460: PUSH
 461: LD_VAR 0 1
 465: ST_TO_ADDR
// uc_nation := nation ;
 466: LD_ADDR_OWVAR 21
 470: PUSH
 471: LD_VAR 0 2
 475: ST_TO_ADDR
// vc_chassis := chassis ;
 476: LD_ADDR_OWVAR 37
 480: PUSH
 481: LD_VAR 0 3
 485: ST_TO_ADDR
// vc_engine := engine ;
 486: LD_ADDR_OWVAR 39
 490: PUSH
 491: LD_VAR 0 4
 495: ST_TO_ADDR
// vc_control := control ;
 496: LD_ADDR_OWVAR 38
 500: PUSH
 501: LD_VAR 0 5
 505: ST_TO_ADDR
// vc_weapon := weapon ;
 506: LD_ADDR_OWVAR 40
 510: PUSH
 511: LD_VAR 0 6
 515: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 516: LD_ADDR_OWVAR 41
 520: PUSH
 521: LD_VAR 0 7
 525: ST_TO_ADDR
// result := CreateVehicle ;
 526: LD_ADDR_VAR 0 8
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// end ;
 536: LD_VAR 0 8
 540: RET
// export function SayX ( units , ident ) ; var i ; begin
 541: LD_INT 0
 543: PPUSH
 544: PPUSH
// result := false ;
 545: LD_ADDR_VAR 0 3
 549: PUSH
 550: LD_INT 0
 552: ST_TO_ADDR
// if not units then
 553: LD_VAR 0 1
 557: NOT
 558: IFFALSE 562
// exit ;
 560: GO 616
// for i in units do
 562: LD_ADDR_VAR 0 4
 566: PUSH
 567: LD_VAR 0 1
 571: PUSH
 572: FOR_IN
 573: IFFALSE 614
// if IsOk ( i ) then
 575: LD_VAR 0 4
 579: PPUSH
 580: CALL_OW 302
 584: IFFALSE 612
// begin Say ( i , ident ) ;
 586: LD_VAR 0 4
 590: PPUSH
 591: LD_VAR 0 2
 595: PPUSH
 596: CALL_OW 88
// result := i ;
 600: LD_ADDR_VAR 0 3
 604: PUSH
 605: LD_VAR 0 4
 609: ST_TO_ADDR
// break ;
 610: GO 614
// end ;
 612: GO 572
 614: POP
 615: POP
// end ;
 616: LD_VAR 0 3
 620: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 621: LD_INT 0
 623: PPUSH
 624: PPUSH
// InitUc ;
 625: CALL_OW 18
// InitHc ;
 629: CALL_OW 19
// uc_side := 0 ;
 633: LD_ADDR_OWVAR 20
 637: PUSH
 638: LD_INT 0
 640: ST_TO_ADDR
// uc_nation := 0 ;
 641: LD_ADDR_OWVAR 21
 645: PUSH
 646: LD_INT 0
 648: ST_TO_ADDR
// for i = 1 to amount do
 649: LD_ADDR_VAR 0 4
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_VAR 0 2
 663: PUSH
 664: FOR_TO
 665: IFFALSE 747
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 667: LD_ADDR_OWVAR 29
 671: PUSH
 672: LD_INT 9
 674: PPUSH
 675: LD_INT 12
 677: PPUSH
 678: CALL_OW 12
 682: PUSH
 683: LD_INT 9
 685: PPUSH
 686: LD_INT 12
 688: PPUSH
 689: CALL_OW 12
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 698: LD_ADDR_OWVAR 35
 702: PUSH
 703: LD_INT 1
 705: NEG
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 12
 714: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 715: LD_INT 0
 717: PPUSH
 718: LD_INT 12
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 728: CALL_OW 44
 732: PPUSH
 733: LD_VAR 0 1
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 49
// end ;
 745: GO 664
 747: POP
 748: POP
// InitHc ;
 749: CALL_OW 19
// end ;
 753: LD_VAR 0 3
 757: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// uc_side := 0 ;
 762: LD_ADDR_OWVAR 20
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// uc_nation := 0 ;
 770: LD_ADDR_OWVAR 21
 774: PUSH
 775: LD_INT 0
 777: ST_TO_ADDR
// for i := 1 to 3 do
 778: LD_ADDR_VAR 0 4
 782: PUSH
 783: DOUBLE
 784: LD_INT 1
 786: DEC
 787: ST_TO_ADDR
 788: LD_INT 3
 790: PUSH
 791: FOR_TO
 792: IFFALSE 829
// begin hc_class := 21 ;
 794: LD_ADDR_OWVAR 28
 798: PUSH
 799: LD_INT 21
 801: ST_TO_ADDR
// hc_gallery :=  ;
 802: LD_ADDR_OWVAR 33
 806: PUSH
 807: LD_STRING 
 809: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 810: CALL_OW 44
 814: PPUSH
 815: LD_VAR 0 1
 819: PPUSH
 820: LD_INT 0
 822: PPUSH
 823: CALL_OW 49
// end ;
 827: GO 791
 829: POP
 830: POP
// for i := 1 to 3 do
 831: LD_ADDR_VAR 0 4
 835: PUSH
 836: DOUBLE
 837: LD_INT 1
 839: DEC
 840: ST_TO_ADDR
 841: LD_INT 3
 843: PUSH
 844: FOR_TO
 845: IFFALSE 882
// begin hc_class := 18 ;
 847: LD_ADDR_OWVAR 28
 851: PUSH
 852: LD_INT 18
 854: ST_TO_ADDR
// hc_gallery :=  ;
 855: LD_ADDR_OWVAR 33
 859: PUSH
 860: LD_STRING 
 862: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 863: CALL_OW 44
 867: PPUSH
 868: LD_VAR 0 1
 872: PPUSH
 873: LD_INT 0
 875: PPUSH
 876: CALL_OW 49
// end ;
 880: GO 844
 882: POP
 883: POP
// for i := 1 to 3 do
 884: LD_ADDR_VAR 0 4
 888: PUSH
 889: DOUBLE
 890: LD_INT 1
 892: DEC
 893: ST_TO_ADDR
 894: LD_INT 3
 896: PUSH
 897: FOR_TO
 898: IFFALSE 935
// begin hc_class := 13 ;
 900: LD_ADDR_OWVAR 28
 904: PUSH
 905: LD_INT 13
 907: ST_TO_ADDR
// hc_gallery :=  ;
 908: LD_ADDR_OWVAR 33
 912: PUSH
 913: LD_STRING 
 915: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 916: CALL_OW 44
 920: PPUSH
 921: LD_VAR 0 1
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: CALL_OW 49
// end ;
 933: GO 897
 935: POP
 936: POP
// for i := 1 to 4 do
 937: LD_ADDR_VAR 0 4
 941: PUSH
 942: DOUBLE
 943: LD_INT 1
 945: DEC
 946: ST_TO_ADDR
 947: LD_INT 4
 949: PUSH
 950: FOR_TO
 951: IFFALSE 988
// begin hc_class := class_frog ;
 953: LD_ADDR_OWVAR 28
 957: PUSH
 958: LD_INT 19
 960: ST_TO_ADDR
// hc_gallery :=  ;
 961: LD_ADDR_OWVAR 33
 965: PUSH
 966: LD_STRING 
 968: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 969: CALL_OW 44
 973: PPUSH
 974: LD_VAR 0 2
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 49
// end ;
 986: GO 950
 988: POP
 989: POP
// end ;
 990: LD_VAR 0 3
 994: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 995: LD_INT 0
 997: PPUSH
 998: PPUSH
 999: PPUSH
// if not observer or not unit then
1000: LD_VAR 0 1
1004: NOT
1005: IFTRUE 1014
1007: PUSH
1008: LD_VAR 0 2
1012: NOT
1013: OR
1014: IFFALSE 1018
// exit ;
1016: GO 1066
// if not See ( GetSide ( observer ) , unit ) then
1018: LD_VAR 0 1
1022: PPUSH
1023: CALL_OW 255
1027: PPUSH
1028: LD_VAR 0 2
1032: PPUSH
1033: CALL_OW 292
1037: NOT
1038: IFFALSE 1042
// exit ;
1040: GO 1066
// result := GetDistUnits ( observer , unit ) < 12 ;
1042: LD_ADDR_VAR 0 3
1046: PUSH
1047: LD_VAR 0 1
1051: PPUSH
1052: LD_VAR 0 2
1056: PPUSH
1057: CALL_OW 296
1061: PUSH
1062: LD_INT 12
1064: LESS
1065: ST_TO_ADDR
// end ;
1066: LD_VAR 0 3
1070: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1071: LD_INT 0
1073: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1074: LD_VAR 0 2
1078: PUSH
1079: LD_INT 1
1081: ARRAY
1082: PPUSH
1083: LD_VAR 0 2
1087: PUSH
1088: LD_INT 2
1090: ARRAY
1091: PPUSH
1092: CALL_OW 488
1096: IFFALSE 1126
1098: PUSH
1099: LD_VAR 0 2
1103: PUSH
1104: LD_INT 1
1106: ARRAY
1107: PPUSH
1108: LD_VAR 0 2
1112: PUSH
1113: LD_INT 2
1115: ARRAY
1116: PPUSH
1117: CALL_OW 428
1121: PUSH
1122: LD_INT 0
1124: EQUAL
1125: AND
1126: IFFALSE 1160
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1128: LD_VAR 0 1
1132: PPUSH
1133: LD_VAR 0 2
1137: PUSH
1138: LD_INT 1
1140: ARRAY
1141: PPUSH
1142: LD_VAR 0 2
1146: PUSH
1147: LD_INT 2
1149: ARRAY
1150: PPUSH
1151: LD_VAR 0 3
1155: PPUSH
1156: CALL_OW 48
// end ;
1160: LD_VAR 0 4
1164: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1165: LD_INT 0
1167: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1168: LD_VAR 0 1
1172: PPUSH
1173: LD_VAR 0 2
1177: PPUSH
1178: LD_VAR 0 3
1182: PPUSH
1183: LD_VAR 0 4
1187: PPUSH
1188: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1192: LD_VAR 0 1
1196: PPUSH
1197: LD_VAR 0 2
1201: PPUSH
1202: LD_VAR 0 3
1206: PPUSH
1207: CALL_OW 331
// end ;
1211: LD_VAR 0 5
1215: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1216: LD_INT 0
1218: PPUSH
// if not units then
1219: LD_VAR 0 1
1223: NOT
1224: IFFALSE 1228
// exit ;
1226: GO 1311
// result := true ;
1228: LD_ADDR_VAR 0 4
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1236: LD_VAR 0 1
1240: PPUSH
1241: LD_INT 26
1243: PUSH
1244: LD_INT 1
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: PPUSH
1251: CALL_OW 72
1255: PUSH
1256: LD_INT 1
1258: ARRAY
1259: PPUSH
1260: LD_VAR 0 2
1264: PPUSH
1265: CALL_OW 88
1269: NOT
1270: IFFALSE 1311
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1272: LD_ADDR_VAR 0 4
1276: PUSH
1277: LD_VAR 0 1
1281: PPUSH
1282: LD_INT 26
1284: PUSH
1285: LD_INT 2
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 72
1296: PUSH
1297: LD_INT 1
1299: ARRAY
1300: PPUSH
1301: LD_VAR 0 3
1305: PPUSH
1306: CALL_OW 88
1310: ST_TO_ADDR
// end ;
1311: LD_VAR 0 4
1315: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1316: LD_INT 0
1318: PPUSH
1319: PPUSH
// if not group then
1320: LD_VAR 0 2
1324: NOT
1325: IFFALSE 1329
// exit ;
1327: GO 1374
// for i in group do
1329: LD_ADDR_VAR 0 4
1333: PUSH
1334: LD_VAR 0 2
1338: PUSH
1339: FOR_IN
1340: IFFALSE 1372
// if See ( side , i ) then
1342: LD_VAR 0 1
1346: PPUSH
1347: LD_VAR 0 4
1351: PPUSH
1352: CALL_OW 292
1356: IFFALSE 1370
// begin result := true ;
1358: LD_ADDR_VAR 0 3
1362: PUSH
1363: LD_INT 1
1365: ST_TO_ADDR
// exit ;
1366: POP
1367: POP
1368: GO 1374
// end ;
1370: GO 1339
1372: POP
1373: POP
// end ; end_of_file
1374: LD_VAR 0 3
1378: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1379: LD_INT 0
1381: PPUSH
1382: PPUSH
// uc_side := 2 ;
1383: LD_ADDR_OWVAR 20
1387: PUSH
1388: LD_INT 2
1390: ST_TO_ADDR
// uc_nation := 2 ;
1391: LD_ADDR_OWVAR 21
1395: PUSH
1396: LD_INT 2
1398: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_STRING Heike
1406: PPUSH
1407: LD_EXP 1
1411: NOT
1412: PPUSH
1413: LD_EXP 2
1417: PPUSH
1418: CALL 37825 0 3
1422: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1423: LD_ADDR_EXP 24
1427: PUSH
1428: LD_STRING Ibrahim
1430: PPUSH
1431: LD_EXP 1
1435: NOT
1436: PPUSH
1437: LD_EXP 2
1441: PPUSH
1442: CALL 37825 0 3
1446: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1447: LD_ADDR_EXP 22
1451: PUSH
1452: LD_STRING Givi
1454: PPUSH
1455: LD_EXP 1
1459: NOT
1460: PPUSH
1461: LD_EXP 2
1465: PPUSH
1466: CALL 37825 0 3
1470: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1471: LD_ADDR_EXP 25
1475: PUSH
1476: LD_STRING Kamil
1478: PPUSH
1479: LD_EXP 1
1483: NOT
1484: PPUSH
1485: LD_EXP 2
1489: PPUSH
1490: CALL 37825 0 3
1494: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1495: LD_ADDR_EXP 26
1499: PUSH
1500: LD_STRING Kaia
1502: PPUSH
1503: LD_EXP 1
1507: NOT
1508: PPUSH
1509: LD_EXP 2
1513: PPUSH
1514: CALL 37825 0 3
1518: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1519: LD_ADDR_EXP 27
1523: PUSH
1524: LD_STRING Sophia
1526: PPUSH
1527: LD_EXP 1
1531: NOT
1532: PPUSH
1533: LD_EXP 2
1537: PPUSH
1538: CALL 37825 0 3
1542: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1543: LD_ADDR_EXP 28
1547: PUSH
1548: LD_STRING Markov
1550: PPUSH
1551: LD_EXP 1
1555: NOT
1556: PPUSH
1557: LD_EXP 2
1561: PPUSH
1562: CALL 37825 0 3
1566: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1567: LD_ADDR_EXP 33
1571: PUSH
1572: LD_STRING Aviradze
1574: PPUSH
1575: LD_EXP 1
1579: NOT
1580: PPUSH
1581: LD_EXP 2
1585: PPUSH
1586: CALL 37825 0 3
1590: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1591: LD_ADDR_EXP 32
1595: PUSH
1596: LD_STRING Kurt
1598: PPUSH
1599: LD_EXP 1
1603: NOT
1604: PPUSH
1605: LD_EXP 2
1609: PPUSH
1610: CALL 37825 0 3
1614: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1615: LD_ADDR_EXP 23
1619: PUSH
1620: LD_STRING Mike
1622: PPUSH
1623: LD_EXP 1
1627: NOT
1628: PPUSH
1629: LD_EXP 2
1633: PPUSH
1634: CALL 37825 0 3
1638: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1639: LD_ADDR_EXP 30
1643: PUSH
1644: LD_STRING Olaf
1646: PPUSH
1647: LD_INT 0
1649: PPUSH
1650: LD_STRING 
1652: PPUSH
1653: CALL 37825 0 3
1657: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1658: LD_ADDR_EXP 34
1662: PUSH
1663: LD_STRING 04_2_others
1665: PPUSH
1666: CALL_OW 31
1670: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1671: LD_ADDR_EXP 36
1675: PUSH
1676: LD_STRING 04_2_apes
1678: PPUSH
1679: CALL_OW 31
1683: ST_TO_ADDR
// if hasFlamethrower then
1684: LD_EXP 3
1688: IFFALSE 1923
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1690: LD_INT 70
1692: PPUSH
1693: LD_INT 2
1695: PPUSH
1696: LD_INT 2
1698: PPUSH
1699: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1703: LD_ADDR_EXP 35
1707: PUSH
1708: LD_INT 13
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: LD_INT 27
1719: PUSH
1720: LD_INT 2
1722: PUSH
1723: LD_INT 1000
1725: PUSH
1726: LD_INT 0
1728: PUSH
1729: LD_INT 0
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_INT 13
1747: PUSH
1748: LD_INT 1
1750: PUSH
1751: LD_INT 1
1753: PUSH
1754: LD_INT 25
1756: PUSH
1757: LD_INT 2
1759: PUSH
1760: LD_INT 1000
1762: PUSH
1763: LD_INT 0
1765: PUSH
1766: LD_INT 0
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: PUSH
1782: LD_INT 13
1784: PUSH
1785: LD_INT 1
1787: PUSH
1788: LD_INT 1
1790: PUSH
1791: LD_INT 26
1793: PUSH
1794: LD_INT 2
1796: PUSH
1797: LD_INT 1000
1799: PUSH
1800: LD_INT 0
1802: PUSH
1803: LD_INT 0
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 13
1821: PUSH
1822: LD_INT 1
1824: PUSH
1825: LD_INT 1
1827: PUSH
1828: LD_INT 27
1830: PUSH
1831: LD_INT 2
1833: PUSH
1834: LD_INT 1000
1836: PUSH
1837: LD_INT 0
1839: PUSH
1840: LD_INT 0
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 13
1858: PUSH
1859: LD_INT 1
1861: PUSH
1862: LD_INT 1
1864: PUSH
1865: LD_INT 32
1867: PUSH
1868: LD_INT 2
1870: PUSH
1871: LD_INT 1000
1873: PUSH
1874: LD_INT 0
1876: PUSH
1877: LD_INT 60
1879: PUSH
1880: LD_INT 40
1882: PUSH
1883: LD_INT 20
1885: PUSH
1886: LD_INT 10
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: PUSH
1895: LD_OWVAR 67
1899: ARRAY
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: ST_TO_ADDR
// end else
1921: GO 2141
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1923: LD_ADDR_EXP 35
1927: PUSH
1928: LD_INT 13
1930: PUSH
1931: LD_INT 1
1933: PUSH
1934: LD_INT 1
1936: PUSH
1937: LD_INT 25
1939: PUSH
1940: LD_INT 2
1942: PUSH
1943: LD_INT 1000
1945: PUSH
1946: LD_INT 0
1948: PUSH
1949: LD_INT 0
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 13
1967: PUSH
1968: LD_INT 1
1970: PUSH
1971: LD_INT 1
1973: PUSH
1974: LD_INT 27
1976: PUSH
1977: LD_INT 2
1979: PUSH
1980: LD_INT 1000
1982: PUSH
1983: LD_INT 0
1985: PUSH
1986: LD_INT 0
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: PUSH
2002: LD_INT 13
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 1
2010: PUSH
2011: LD_INT 24
2013: PUSH
2014: LD_INT 2
2016: PUSH
2017: LD_INT 1000
2019: PUSH
2020: LD_INT 0
2022: PUSH
2023: LD_INT 0
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 13
2041: PUSH
2042: LD_INT 1
2044: PUSH
2045: LD_INT 1
2047: PUSH
2048: LD_INT 27
2050: PUSH
2051: LD_INT 2
2053: PUSH
2054: LD_INT 1000
2056: PUSH
2057: LD_INT 0
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: PUSH
2076: LD_INT 13
2078: PUSH
2079: LD_INT 1
2081: PUSH
2082: LD_INT 1
2084: PUSH
2085: LD_INT 32
2087: PUSH
2088: LD_INT 2
2090: PUSH
2091: LD_INT 1000
2093: PUSH
2094: LD_INT 0
2096: PUSH
2097: LD_INT 50
2099: PUSH
2100: LD_INT 30
2102: PUSH
2103: LD_INT 20
2105: PUSH
2106: LD_INT 10
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: LD_OWVAR 67
2119: ARRAY
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: ST_TO_ADDR
// end ; uc_side := 5 ;
2141: LD_ADDR_OWVAR 20
2145: PUSH
2146: LD_INT 5
2148: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2149: LD_ADDR_EXP 29
2153: PUSH
2154: LD_STRING Abdul
2156: PPUSH
2157: LD_INT 0
2159: PPUSH
2160: LD_STRING 
2162: PPUSH
2163: CALL 37825 0 3
2167: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2168: LD_ADDR_EXP 31
2172: PUSH
2173: LD_STRING Omar
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: LD_STRING 
2181: PPUSH
2182: CALL 37825 0 3
2186: ST_TO_ADDR
// end ;
2187: LD_VAR 0 1
2191: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2192: LD_INT 0
2194: PPUSH
2195: PPUSH
2196: PPUSH
2197: PPUSH
2198: PPUSH
// pfx := 04_1_ ;
2199: LD_ADDR_VAR 0 2
2203: PUSH
2204: LD_STRING 04_1_
2206: ST_TO_ADDR
// if HexInfo ( 10 , 16 ) then
2207: LD_INT 10
2209: PPUSH
2210: LD_INT 16
2212: PPUSH
2213: CALL_OW 428
2217: IFFALSE 2242
// ComMoveXY ( HexInfo ( 10 , 16 ) , 18 , 18 ) else
2219: LD_INT 10
2221: PPUSH
2222: LD_INT 16
2224: PPUSH
2225: CALL_OW 428
2229: PPUSH
2230: LD_INT 18
2232: PPUSH
2233: LD_INT 18
2235: PPUSH
2236: CALL_OW 111
2240: GO 2252
// EraseResourceArea ( mat_cans , westSpawnPointArea ) ;
2242: LD_INT 1
2244: PPUSH
2245: LD_INT 14
2247: PPUSH
2248: CALL_OW 286
// repeat wait ( 0 0$1 ) ;
2252: LD_INT 35
2254: PPUSH
2255: CALL_OW 67
// until not HexInfo ( 10 , 16 ) ;
2259: LD_INT 10
2261: PPUSH
2262: LD_INT 16
2264: PPUSH
2265: CALL_OW 428
2269: NOT
2270: IFFALSE 2252
// tmp := [ ] ;
2272: LD_ADDR_VAR 0 4
2276: PUSH
2277: EMPTY
2278: ST_TO_ADDR
// uc_side := 5 ;
2279: LD_ADDR_OWVAR 20
2283: PUSH
2284: LD_INT 5
2286: ST_TO_ADDR
// uc_nation := 2 ;
2287: LD_ADDR_OWVAR 21
2291: PUSH
2292: LD_INT 2
2294: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2295: LD_ADDR_EXP 33
2299: PUSH
2300: LD_STRING Aviradze_L
2302: PPUSH
2303: LD_EXP 1
2307: NOT
2308: PPUSH
2309: LD_VAR 0 2
2313: PPUSH
2314: CALL 37825 0 3
2318: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2319: LD_EXP 33
2323: PPUSH
2324: LD_INT 2
2326: PPUSH
2327: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2331: LD_EXP 33
2335: PPUSH
2336: LD_INT 14
2338: PPUSH
2339: LD_INT 0
2341: PPUSH
2342: CALL_OW 49
// ComMoveXY ( Aviradze , 25 , 19 ) ;
2346: LD_EXP 33
2350: PPUSH
2351: LD_INT 25
2353: PPUSH
2354: LD_INT 19
2356: PPUSH
2357: CALL_OW 111
// AddComHold ( Aviradze ) ;
2361: LD_EXP 33
2365: PPUSH
2366: CALL_OW 200
// tmp := [ Aviradze ] ;
2370: LD_ADDR_VAR 0 4
2374: PUSH
2375: LD_EXP 33
2379: PUSH
2380: EMPTY
2381: LIST
2382: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2383: LD_INT 70
2385: PPUSH
2386: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2390: LD_STRING Ibrahim_L
2392: PPUSH
2393: LD_EXP 1
2397: NOT
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: CALL 37825 0 3
2408: IFFALSE 2508
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2410: LD_ADDR_EXP 24
2414: PUSH
2415: LD_STRING Ibrahim_L
2417: PPUSH
2418: LD_EXP 1
2422: NOT
2423: PPUSH
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL 37825 0 3
2433: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2434: LD_EXP 24
2438: PPUSH
2439: LD_INT 2
2441: PPUSH
2442: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2446: LD_EXP 24
2450: PPUSH
2451: LD_INT 14
2453: PPUSH
2454: LD_INT 0
2456: PPUSH
2457: CALL_OW 49
// ComMoveXY ( Ibrahim , 25 , 19 ) ;
2461: LD_EXP 24
2465: PPUSH
2466: LD_INT 25
2468: PPUSH
2469: LD_INT 19
2471: PPUSH
2472: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2476: LD_EXP 24
2480: PPUSH
2481: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2485: LD_ADDR_VAR 0 4
2489: PUSH
2490: LD_VAR 0 4
2494: PUSH
2495: LD_EXP 24
2499: ADD
2500: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2501: LD_INT 70
2503: PPUSH
2504: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2508: LD_STRING Kaia_L
2510: PPUSH
2511: LD_EXP 1
2515: NOT
2516: PPUSH
2517: LD_VAR 0 2
2521: PPUSH
2522: CALL 37825 0 3
2526: IFFALSE 2626
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2528: LD_ADDR_EXP 26
2532: PUSH
2533: LD_STRING Kaia_L
2535: PPUSH
2536: LD_EXP 1
2540: NOT
2541: PPUSH
2542: LD_VAR 0 2
2546: PPUSH
2547: CALL 37825 0 3
2551: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2552: LD_EXP 26
2556: PPUSH
2557: LD_INT 2
2559: PPUSH
2560: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2564: LD_EXP 26
2568: PPUSH
2569: LD_INT 14
2571: PPUSH
2572: LD_INT 0
2574: PPUSH
2575: CALL_OW 49
// ComMoveXY ( Kaia , 25 , 19 ) ;
2579: LD_EXP 26
2583: PPUSH
2584: LD_INT 25
2586: PPUSH
2587: LD_INT 19
2589: PPUSH
2590: CALL_OW 111
// AddComHold ( Kaia ) ;
2594: LD_EXP 26
2598: PPUSH
2599: CALL_OW 200
// tmp := tmp ^ Kaia ;
2603: LD_ADDR_VAR 0 4
2607: PUSH
2608: LD_VAR 0 4
2612: PUSH
2613: LD_EXP 26
2617: ADD
2618: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2619: LD_INT 70
2621: PPUSH
2622: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2626: LD_STRING Kamil_L
2628: PPUSH
2629: LD_EXP 1
2633: NOT
2634: PPUSH
2635: LD_VAR 0 2
2639: PPUSH
2640: CALL 37825 0 3
2644: IFFALSE 2744
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2646: LD_ADDR_EXP 25
2650: PUSH
2651: LD_STRING Kamil_L
2653: PPUSH
2654: LD_EXP 1
2658: NOT
2659: PPUSH
2660: LD_VAR 0 2
2664: PPUSH
2665: CALL 37825 0 3
2669: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2670: LD_EXP 25
2674: PPUSH
2675: LD_INT 2
2677: PPUSH
2678: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2682: LD_EXP 25
2686: PPUSH
2687: LD_INT 14
2689: PPUSH
2690: LD_INT 0
2692: PPUSH
2693: CALL_OW 49
// ComMoveXY ( Kamil , 25 , 19 ) ;
2697: LD_EXP 25
2701: PPUSH
2702: LD_INT 25
2704: PPUSH
2705: LD_INT 19
2707: PPUSH
2708: CALL_OW 111
// AddComHold ( Kamil ) ;
2712: LD_EXP 25
2716: PPUSH
2717: CALL_OW 200
// tmp := tmp ^ Kamil ;
2721: LD_ADDR_VAR 0 4
2725: PUSH
2726: LD_VAR 0 4
2730: PUSH
2731: LD_EXP 25
2735: ADD
2736: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2737: LD_INT 70
2739: PPUSH
2740: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2744: LD_STRING Sophia_L
2746: PPUSH
2747: LD_EXP 1
2751: NOT
2752: PPUSH
2753: LD_VAR 0 2
2757: PPUSH
2758: CALL 37825 0 3
2762: IFFALSE 2862
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2764: LD_ADDR_EXP 27
2768: PUSH
2769: LD_STRING Sophia_L
2771: PPUSH
2772: LD_EXP 1
2776: NOT
2777: PPUSH
2778: LD_VAR 0 2
2782: PPUSH
2783: CALL 37825 0 3
2787: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2788: LD_EXP 27
2792: PPUSH
2793: LD_INT 2
2795: PPUSH
2796: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2800: LD_EXP 27
2804: PPUSH
2805: LD_INT 14
2807: PPUSH
2808: LD_INT 0
2810: PPUSH
2811: CALL_OW 49
// ComMoveXY ( Sophia , 25 , 19 ) ;
2815: LD_EXP 27
2819: PPUSH
2820: LD_INT 25
2822: PPUSH
2823: LD_INT 19
2825: PPUSH
2826: CALL_OW 111
// AddComHold ( Sophia ) ;
2830: LD_EXP 27
2834: PPUSH
2835: CALL_OW 200
// tmp := tmp ^ Sophia ;
2839: LD_ADDR_VAR 0 4
2843: PUSH
2844: LD_VAR 0 4
2848: PUSH
2849: LD_EXP 27
2853: ADD
2854: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2855: LD_INT 70
2857: PPUSH
2858: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2862: LD_ADDR_VAR 0 5
2866: PUSH
2867: LD_STRING 04_1_others_L
2869: PPUSH
2870: CALL_OW 31
2874: ST_TO_ADDR
// if tmp2 then
2875: LD_VAR 0 5
2879: IFFALSE 2976
// for i in tmp2 do
2881: LD_ADDR_VAR 0 3
2885: PUSH
2886: LD_VAR 0 5
2890: PUSH
2891: FOR_IN
2892: IFFALSE 2974
// begin SetDir ( i , 2 ) ;
2894: LD_VAR 0 3
2898: PPUSH
2899: LD_INT 2
2901: PPUSH
2902: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2906: LD_VAR 0 3
2910: PPUSH
2911: LD_INT 14
2913: PPUSH
2914: LD_INT 0
2916: PPUSH
2917: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2921: LD_ADDR_EXP 34
2925: PUSH
2926: LD_EXP 34
2930: PPUSH
2931: LD_EXP 34
2935: PUSH
2936: LD_INT 1
2938: PLUS
2939: PPUSH
2940: LD_VAR 0 3
2944: PPUSH
2945: CALL_OW 1
2949: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2950: LD_VAR 0 3
2954: PPUSH
2955: LD_INT 17
2957: PPUSH
2958: LD_INT 14
2960: PPUSH
2961: CALL_OW 111
// wait ( 0 0$2 ) ;
2965: LD_INT 70
2967: PPUSH
2968: CALL_OW 67
// end ;
2972: GO 2891
2974: POP
2975: POP
// for i in tmp union tmp2 do
2976: LD_ADDR_VAR 0 3
2980: PUSH
2981: LD_VAR 0 4
2985: PUSH
2986: LD_VAR 0 5
2990: UNION
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3024
// begin SetSide ( i , 2 ) ;
2995: LD_VAR 0 3
2999: PPUSH
3000: LD_INT 2
3002: PPUSH
3003: CALL_OW 235
// ComMoveXY ( i , 31 , 24 ) ;
3007: LD_VAR 0 3
3011: PPUSH
3012: LD_INT 31
3014: PPUSH
3015: LD_INT 24
3017: PPUSH
3018: CALL_OW 111
// end ;
3022: GO 2992
3024: POP
3025: POP
// DialogueOn ;
3026: CALL_OW 6
// CenterNowOnXY ( 31 , 24 ) ;
3030: LD_INT 31
3032: PPUSH
3033: LD_INT 24
3035: PPUSH
3036: CALL_OW 86
// dwait ( 0 0$2 ) ;
3040: LD_INT 70
3042: PPUSH
3043: CALL_OW 68
// DialogueOff ;
3047: CALL_OW 7
// end ; end_of_file
3051: LD_VAR 0 1
3055: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3056: LD_INT 0
3058: PPUSH
3059: PPUSH
3060: PPUSH
// uc_side := 3 ;
3061: LD_ADDR_OWVAR 20
3065: PUSH
3066: LD_INT 3
3068: ST_TO_ADDR
// uc_nation := 3 ;
3069: LD_ADDR_OWVAR 21
3073: PUSH
3074: LD_INT 3
3076: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3077: LD_ADDR_EXP 37
3081: PUSH
3082: EMPTY
3083: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3084: LD_ADDR_EXP 38
3088: PUSH
3089: EMPTY
3090: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3091: LD_ADDR_EXP 41
3095: PUSH
3096: EMPTY
3097: ST_TO_ADDR
// for i := 1 to 2 do
3098: LD_ADDR_VAR 0 2
3102: PUSH
3103: DOUBLE
3104: LD_INT 1
3106: DEC
3107: ST_TO_ADDR
3108: LD_INT 2
3110: PUSH
3111: FOR_TO
3112: IFFALSE 3251
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3114: LD_INT 0
3116: PPUSH
3117: LD_INT 1
3119: PPUSH
3120: LD_INT 3
3122: PUSH
3123: LD_INT 4
3125: PUSH
3126: LD_INT 5
3128: PUSH
3129: LD_INT 6
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: PUSH
3138: LD_OWVAR 67
3142: ARRAY
3143: PPUSH
3144: CALL_OW 380
// un := CreateHuman ;
3148: LD_ADDR_VAR 0 3
3152: PUSH
3153: CALL_OW 44
3157: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3158: LD_ADDR_EXP 37
3162: PUSH
3163: LD_EXP 37
3167: PPUSH
3168: LD_EXP 37
3172: PUSH
3173: LD_INT 1
3175: PLUS
3176: PPUSH
3177: LD_VAR 0 3
3181: PPUSH
3182: CALL_OW 1
3186: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3187: LD_VAR 0 3
3191: PPUSH
3192: LD_INT 100
3194: PPUSH
3195: LD_INT 63
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: LD_INT 0
3203: PPUSH
3204: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3208: LD_VAR 0 3
3212: PPUSH
3213: LD_INT 97
3215: PPUSH
3216: LD_INT 64
3218: PPUSH
3219: CALL_OW 428
3223: PUSH
3224: LD_INT 98
3226: PPUSH
3227: LD_INT 58
3229: PPUSH
3230: CALL_OW 428
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PUSH
3239: LD_VAR 0 2
3243: ARRAY
3244: PPUSH
3245: CALL_OW 120
// end ;
3249: GO 3111
3251: POP
3252: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3253: LD_INT 51
3255: PPUSH
3256: LD_INT 77
3258: PPUSH
3259: CALL_OW 428
3263: PPUSH
3264: CALL_OW 274
3268: PPUSH
3269: LD_INT 1
3271: PPUSH
3272: LD_INT 120
3274: PPUSH
3275: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3279: LD_INT 10
3281: PPUSH
3282: CALL_OW 274
3286: PPUSH
3287: LD_INT 2
3289: PPUSH
3290: LD_INT 300
3292: PPUSH
3293: CALL_OW 277
// for i := 1 to 2 do
3297: LD_ADDR_VAR 0 2
3301: PUSH
3302: DOUBLE
3303: LD_INT 1
3305: DEC
3306: ST_TO_ADDR
3307: LD_INT 2
3309: PUSH
3310: FOR_TO
3311: IFFALSE 3429
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3313: LD_INT 0
3315: PPUSH
3316: LD_INT 1
3318: PPUSH
3319: LD_INT 3
3321: PUSH
3322: LD_INT 4
3324: PUSH
3325: LD_INT 5
3327: PUSH
3328: LD_INT 6
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: PUSH
3337: LD_OWVAR 67
3341: ARRAY
3342: PPUSH
3343: CALL_OW 380
// un := CreateHuman ;
3347: LD_ADDR_VAR 0 3
3351: PUSH
3352: CALL_OW 44
3356: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3357: LD_ADDR_EXP 38
3361: PUSH
3362: LD_EXP 38
3366: PPUSH
3367: LD_EXP 38
3371: PUSH
3372: LD_INT 1
3374: PLUS
3375: PPUSH
3376: LD_VAR 0 3
3380: PPUSH
3381: CALL_OW 1
3385: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3386: LD_VAR 0 3
3390: PPUSH
3391: LD_INT 198
3393: PPUSH
3394: LD_INT 106
3396: PPUSH
3397: CALL_OW 428
3401: PUSH
3402: LD_INT 205
3404: PPUSH
3405: LD_INT 114
3407: PPUSH
3408: CALL_OW 428
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PUSH
3417: LD_VAR 0 2
3421: ARRAY
3422: PPUSH
3423: CALL_OW 52
// end ;
3427: GO 3310
3429: POP
3430: POP
// for i := 1 to 2 do
3431: LD_ADDR_VAR 0 2
3435: PUSH
3436: DOUBLE
3437: LD_INT 1
3439: DEC
3440: ST_TO_ADDR
3441: LD_INT 2
3443: PUSH
3444: FOR_TO
3445: IFFALSE 3522
// begin PrepareHuman ( false , 2 , 3 ) ;
3447: LD_INT 0
3449: PPUSH
3450: LD_INT 2
3452: PPUSH
3453: LD_INT 3
3455: PPUSH
3456: CALL_OW 380
// un := CreateHuman ;
3460: LD_ADDR_VAR 0 3
3464: PUSH
3465: CALL_OW 44
3469: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3470: LD_ADDR_EXP 38
3474: PUSH
3475: LD_EXP 38
3479: PPUSH
3480: LD_EXP 38
3484: PUSH
3485: LD_INT 1
3487: PLUS
3488: PPUSH
3489: LD_VAR 0 3
3493: PPUSH
3494: CALL_OW 1
3498: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3499: LD_VAR 0 3
3503: PPUSH
3504: LD_INT 204
3506: PPUSH
3507: LD_INT 108
3509: PPUSH
3510: LD_INT 2
3512: PPUSH
3513: LD_INT 0
3515: PPUSH
3516: CALL_OW 50
// end ;
3520: GO 3444
3522: POP
3523: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3524: LD_ADDR_VAR 0 2
3528: PUSH
3529: DOUBLE
3530: LD_INT 1
3532: DEC
3533: ST_TO_ADDR
3534: LD_INT 4
3536: PUSH
3537: LD_INT 5
3539: PUSH
3540: LD_INT 6
3542: PUSH
3543: LD_INT 7
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: PUSH
3552: LD_OWVAR 67
3556: ARRAY
3557: PUSH
3558: FOR_TO
3559: IFFALSE 3705
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3561: LD_INT 0
3563: PPUSH
3564: LD_INT 1
3566: PUSH
3567: LD_INT 1
3569: PUSH
3570: LD_INT 2
3572: PUSH
3573: LD_INT 4
3575: PUSH
3576: LD_INT 1
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: PUSH
3586: LD_INT 1
3588: PPUSH
3589: LD_INT 5
3591: PPUSH
3592: CALL_OW 12
3596: ARRAY
3597: PPUSH
3598: LD_INT 3
3600: PUSH
3601: LD_INT 4
3603: PUSH
3604: LD_INT 5
3606: PUSH
3607: LD_INT 5
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: PUSH
3616: LD_OWVAR 67
3620: ARRAY
3621: PPUSH
3622: CALL_OW 380
// un := CreateHuman ;
3626: LD_ADDR_VAR 0 3
3630: PUSH
3631: CALL_OW 44
3635: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3636: LD_VAR 0 3
3640: PPUSH
3641: LD_INT 10
3643: PPUSH
3644: LD_INT 0
3646: PPUSH
3647: CALL 74918 0 3
3651: IFFALSE 3703
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3653: LD_ADDR_EXP 39
3657: PUSH
3658: LD_EXP 39
3662: PPUSH
3663: LD_EXP 39
3667: PUSH
3668: LD_INT 1
3670: PLUS
3671: PPUSH
3672: LD_VAR 0 3
3676: PPUSH
3677: CALL_OW 1
3681: ST_TO_ADDR
// if Prob ( 50 ) then
3682: LD_INT 50
3684: PPUSH
3685: CALL_OW 13
3689: IFFALSE 3703
// ForceSleep ( un , true ) ;
3691: LD_VAR 0 3
3695: PPUSH
3696: LD_INT 1
3698: PPUSH
3699: CALL_OW 585
// end ; end ;
3703: GO 3558
3705: POP
3706: POP
// for i := 1 to 3 do
3707: LD_ADDR_VAR 0 2
3711: PUSH
3712: DOUBLE
3713: LD_INT 1
3715: DEC
3716: ST_TO_ADDR
3717: LD_INT 3
3719: PUSH
3720: FOR_TO
3721: IFFALSE 3815
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3723: LD_INT 0
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: LD_INT 3
3731: PUSH
3732: LD_INT 4
3734: PUSH
3735: LD_INT 4
3737: PUSH
3738: LD_INT 5
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: PUSH
3747: LD_OWVAR 67
3751: ARRAY
3752: PPUSH
3753: CALL_OW 380
// un := CreateHuman ;
3757: LD_ADDR_VAR 0 3
3761: PUSH
3762: CALL_OW 44
3766: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3767: LD_VAR 0 3
3771: PPUSH
3772: LD_INT 11
3774: PPUSH
3775: LD_INT 0
3777: PPUSH
3778: CALL 74918 0 3
3782: IFFALSE 3813
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3784: LD_ADDR_EXP 39
3788: PUSH
3789: LD_EXP 39
3793: PPUSH
3794: LD_EXP 39
3798: PUSH
3799: LD_INT 1
3801: PLUS
3802: PPUSH
3803: LD_VAR 0 3
3807: PPUSH
3808: CALL_OW 1
3812: ST_TO_ADDR
// end ;
3813: GO 3720
3815: POP
3816: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3817: LD_ADDR_VAR 0 2
3821: PUSH
3822: DOUBLE
3823: LD_INT 1
3825: DEC
3826: ST_TO_ADDR
3827: LD_INT 5
3829: PUSH
3830: LD_INT 6
3832: PUSH
3833: LD_INT 7
3835: PUSH
3836: LD_INT 8
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: PUSH
3845: LD_OWVAR 67
3849: ARRAY
3850: PUSH
3851: FOR_TO
3852: IFFALSE 3998
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3854: LD_INT 0
3856: PPUSH
3857: LD_INT 1
3859: PUSH
3860: LD_INT 1
3862: PUSH
3863: LD_INT 2
3865: PUSH
3866: LD_INT 4
3868: PUSH
3869: LD_INT 1
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: PUSH
3879: LD_INT 1
3881: PPUSH
3882: LD_INT 5
3884: PPUSH
3885: CALL_OW 12
3889: ARRAY
3890: PPUSH
3891: LD_INT 3
3893: PUSH
3894: LD_INT 4
3896: PUSH
3897: LD_INT 5
3899: PUSH
3900: LD_INT 5
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: PUSH
3909: LD_OWVAR 67
3913: ARRAY
3914: PPUSH
3915: CALL_OW 380
// un := CreateHuman ;
3919: LD_ADDR_VAR 0 3
3923: PUSH
3924: CALL_OW 44
3928: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3929: LD_VAR 0 3
3933: PPUSH
3934: LD_INT 15
3936: PPUSH
3937: LD_INT 0
3939: PPUSH
3940: CALL 74918 0 3
3944: IFFALSE 3996
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3946: LD_ADDR_EXP 40
3950: PUSH
3951: LD_EXP 40
3955: PPUSH
3956: LD_EXP 40
3960: PUSH
3961: LD_INT 1
3963: PLUS
3964: PPUSH
3965: LD_VAR 0 3
3969: PPUSH
3970: CALL_OW 1
3974: ST_TO_ADDR
// if Prob ( 50 ) then
3975: LD_INT 50
3977: PPUSH
3978: CALL_OW 13
3982: IFFALSE 3996
// ForceSleep ( un , true ) ;
3984: LD_VAR 0 3
3988: PPUSH
3989: LD_INT 1
3991: PPUSH
3992: CALL_OW 585
// end ; end ;
3996: GO 3851
3998: POP
3999: POP
// end ;
4000: LD_VAR 0 1
4004: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
4005: LD_INT 0
4007: PPUSH
4008: PPUSH
4009: PPUSH
// uc_side := 3 ;
4010: LD_ADDR_OWVAR 20
4014: PUSH
4015: LD_INT 3
4017: ST_TO_ADDR
// uc_nation := 3 ;
4018: LD_ADDR_OWVAR 21
4022: PUSH
4023: LD_INT 3
4025: ST_TO_ADDR
// for i := 1 to 6 do
4026: LD_ADDR_VAR 0 2
4030: PUSH
4031: DOUBLE
4032: LD_INT 1
4034: DEC
4035: ST_TO_ADDR
4036: LD_INT 6
4038: PUSH
4039: FOR_TO
4040: IFFALSE 4119
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
4042: LD_INT 0
4044: PPUSH
4045: LD_INT 1
4047: PUSH
4048: LD_INT 4
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 1
4057: PPUSH
4058: LD_INT 2
4060: PPUSH
4061: CALL_OW 12
4065: ARRAY
4066: PPUSH
4067: LD_INT 0
4069: PPUSH
4070: CALL_OW 380
// un := CreateHuman ;
4074: LD_ADDR_VAR 0 3
4078: PUSH
4079: CALL_OW 44
4083: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
4084: LD_VAR 0 3
4088: PPUSH
4089: LD_INT 54
4091: PPUSH
4092: LD_INT 88
4094: PPUSH
4095: LD_INT 12
4097: PPUSH
4098: LD_INT 0
4100: PPUSH
4101: CALL_OW 50
// SetLives ( un , 1 ) ;
4105: LD_VAR 0 3
4109: PPUSH
4110: LD_INT 1
4112: PPUSH
4113: CALL_OW 234
// end ;
4117: GO 4039
4119: POP
4120: POP
// uc_side := 3 ;
4121: LD_ADDR_OWVAR 20
4125: PUSH
4126: LD_INT 3
4128: ST_TO_ADDR
// uc_nation := 0 ;
4129: LD_ADDR_OWVAR 21
4133: PUSH
4134: LD_INT 0
4136: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4137: LD_ADDR_EXP 42
4141: PUSH
4142: EMPTY
4143: ST_TO_ADDR
// apeEngGroup := [ ] ;
4144: LD_ADDR_EXP 43
4148: PUSH
4149: EMPTY
4150: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4151: LD_ADDR_VAR 0 2
4155: PUSH
4156: DOUBLE
4157: LD_INT 1
4159: DEC
4160: ST_TO_ADDR
4161: LD_INT 4
4163: PUSH
4164: LD_INT 5
4166: PUSH
4167: LD_INT 6
4169: PUSH
4170: LD_INT 7
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: PUSH
4179: LD_OWVAR 67
4183: ARRAY
4184: PUSH
4185: FOR_TO
4186: IFFALSE 4304
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4188: LD_INT 0
4190: PPUSH
4191: LD_INT 15
4193: PPUSH
4194: LD_INT 3
4196: PUSH
4197: LD_INT 4
4199: PUSH
4200: LD_INT 5
4202: PUSH
4203: LD_INT 6
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: PUSH
4212: LD_OWVAR 67
4216: ARRAY
4217: PPUSH
4218: CALL_OW 380
// un := CreateHuman ;
4222: LD_ADDR_VAR 0 3
4226: PUSH
4227: CALL_OW 44
4231: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4232: LD_ADDR_EXP 42
4236: PUSH
4237: LD_EXP 42
4241: PPUSH
4242: LD_EXP 42
4246: PUSH
4247: LD_INT 1
4249: PLUS
4250: PPUSH
4251: LD_VAR 0 3
4255: PPUSH
4256: CALL_OW 1
4260: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4261: LD_VAR 0 3
4265: PPUSH
4266: LD_INT 0
4268: PPUSH
4269: LD_INT 5
4271: PPUSH
4272: CALL_OW 12
4276: PPUSH
4277: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4281: LD_VAR 0 3
4285: PPUSH
4286: LD_INT 56
4288: PPUSH
4289: LD_INT 82
4291: PPUSH
4292: LD_INT 6
4294: PPUSH
4295: LD_INT 0
4297: PPUSH
4298: CALL_OW 50
// end ;
4302: GO 4185
4304: POP
4305: POP
// for i := 1 to 2 do
4306: LD_ADDR_VAR 0 2
4310: PUSH
4311: DOUBLE
4312: LD_INT 1
4314: DEC
4315: ST_TO_ADDR
4316: LD_INT 2
4318: PUSH
4319: FOR_TO
4320: IFFALSE 4396
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4322: LD_INT 0
4324: PPUSH
4325: LD_INT 16
4327: PPUSH
4328: LD_INT 4
4330: PPUSH
4331: CALL_OW 380
// un := CreateHuman ;
4335: LD_ADDR_VAR 0 3
4339: PUSH
4340: CALL_OW 44
4344: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4345: LD_ADDR_EXP 43
4349: PUSH
4350: LD_EXP 43
4354: PPUSH
4355: LD_EXP 43
4359: PUSH
4360: LD_INT 1
4362: PLUS
4363: PPUSH
4364: LD_VAR 0 3
4368: PPUSH
4369: CALL_OW 1
4373: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4374: LD_VAR 0 3
4378: PPUSH
4379: LD_INT 51
4381: PPUSH
4382: LD_INT 77
4384: PPUSH
4385: CALL_OW 428
4389: PPUSH
4390: CALL_OW 52
// end ;
4394: GO 4319
4396: POP
4397: POP
// end ;
4398: LD_VAR 0 1
4402: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4403: LD_EXP 42
4407: PPUSH
4408: LD_INT 3
4410: PUSH
4411: LD_INT 24
4413: PUSH
4414: LD_INT 600
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: LD_INT 3
4427: PUSH
4428: LD_INT 54
4430: PUSH
4431: EMPTY
4432: LIST
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PPUSH
4442: CALL_OW 72
4446: IFFALSE 4465
4448: PUSH
4449: LD_INT 66
4451: PPUSH
4452: LD_INT 89
4454: PPUSH
4455: CALL_OW 428
4459: PPUSH
4460: CALL_OW 302
4464: AND
4465: IFFALSE 4550
4467: GO 4469
4469: DISABLE
4470: LD_INT 0
4472: PPUSH
// begin enable ;
4473: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4474: LD_ADDR_VAR 0 1
4478: PUSH
4479: LD_EXP 42
4483: PPUSH
4484: LD_INT 3
4486: PUSH
4487: LD_INT 24
4489: PUSH
4490: LD_INT 600
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PUSH
4501: LD_INT 3
4503: PUSH
4504: LD_INT 54
4506: PUSH
4507: EMPTY
4508: LIST
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PPUSH
4518: CALL_OW 72
4522: PUSH
4523: FOR_IN
4524: IFFALSE 4548
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4526: LD_VAR 0 1
4530: PPUSH
4531: LD_INT 66
4533: PPUSH
4534: LD_INT 89
4536: PPUSH
4537: CALL_OW 428
4541: PPUSH
4542: CALL_OW 120
4546: GO 4523
4548: POP
4549: POP
// end ;
4550: PPOPN 1
4552: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4553: LD_INT 22
4555: PUSH
4556: LD_INT 2
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PUSH
4563: LD_INT 92
4565: PUSH
4566: LD_INT 54
4568: PUSH
4569: LD_INT 77
4571: PUSH
4572: LD_INT 8
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PPUSH
4585: CALL_OW 69
4589: IFFALSE 4653
4591: GO 4593
4593: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4594: LD_EXP 43
4598: PPUSH
4599: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4603: LD_EXP 43
4607: PPUSH
4608: LD_INT 22
4610: PUSH
4611: LD_INT 2
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PUSH
4618: LD_INT 92
4620: PUSH
4621: LD_INT 54
4623: PUSH
4624: LD_INT 77
4626: PUSH
4627: LD_INT 8
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PPUSH
4640: CALL_OW 69
4644: PUSH
4645: LD_INT 1
4647: ARRAY
4648: PPUSH
4649: CALL_OW 175
// end ;
4653: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4654: LD_INT 0
4656: PPUSH
4657: PPUSH
4658: PPUSH
4659: PPUSH
4660: PPUSH
4661: PPUSH
4662: PPUSH
4663: PPUSH
4664: PPUSH
4665: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4666: LD_ADDR_VAR 0 3
4670: PUSH
4671: LD_INT 1
4673: PPUSH
4674: LD_INT 3
4676: PPUSH
4677: CALL_OW 12
4681: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4682: LD_ADDR_VAR 0 5
4686: PUSH
4687: LD_INT 16
4689: PUSH
4690: LD_INT 17
4692: PUSH
4693: LD_INT 19
4695: PUSH
4696: EMPTY
4697: LIST
4698: LIST
4699: LIST
4700: PUSH
4701: LD_VAR 0 3
4705: ARRAY
4706: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4707: LD_ADDR_VAR 0 7
4711: PUSH
4712: LD_INT 159
4714: PUSH
4715: LD_INT 25
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: PUSH
4722: LD_INT 137
4724: PUSH
4725: LD_INT 37
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PUSH
4732: LD_INT 123
4734: PUSH
4735: LD_INT 55
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: PUSH
4742: LD_INT 115
4744: PUSH
4745: LD_INT 71
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: PUSH
4752: LD_INT 106
4754: PUSH
4755: LD_INT 88
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PUSH
4762: LD_INT 97
4764: PUSH
4765: LD_INT 114
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: PUSH
4772: LD_INT 75
4774: PUSH
4775: LD_INT 146
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: PUSH
4791: LD_INT 206
4793: PUSH
4794: LD_INT 135
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: LD_INT 184
4803: PUSH
4804: LD_INT 111
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PUSH
4811: LD_INT 154
4813: PUSH
4814: LD_INT 97
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PUSH
4821: LD_INT 122
4823: PUSH
4824: LD_INT 80
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PUSH
4831: LD_INT 109
4833: PUSH
4834: LD_INT 78
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PUSH
4841: LD_INT 97
4843: PUSH
4844: LD_INT 113
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PUSH
4851: LD_INT 75
4853: PUSH
4854: LD_INT 147
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: PUSH
4870: LD_INT 185
4872: PUSH
4873: LD_INT 72
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 171
4882: PUSH
4883: LD_INT 83
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: LD_INT 161
4892: PUSH
4893: LD_INT 99
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PUSH
4900: LD_INT 125
4902: PUSH
4903: LD_INT 82
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 105
4912: PUSH
4913: LD_INT 90
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: LD_INT 96
4922: PUSH
4923: LD_INT 116
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: PUSH
4930: LD_INT 75
4932: PUSH
4933: LD_INT 147
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: LIST
4953: PUSH
4954: LD_VAR 0 3
4958: ARRAY
4959: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4960: LD_ADDR_VAR 0 4
4964: PUSH
4965: LD_INT 4
4967: PUSH
4968: LD_INT 5
4970: PUSH
4971: LD_INT 3
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: LIST
4978: PUSH
4979: LD_VAR 0 3
4983: ARRAY
4984: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4985: LD_ADDR_VAR 0 6
4989: PUSH
4990: LD_INT 22
4992: PUSH
4993: LD_INT 20
4995: PUSH
4996: LD_INT 21
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: LIST
5003: PUSH
5004: LD_VAR 0 3
5008: ARRAY
5009: ST_TO_ADDR
// for i := 1 to 2 do
5010: LD_ADDR_VAR 0 2
5014: PUSH
5015: DOUBLE
5016: LD_INT 1
5018: DEC
5019: ST_TO_ADDR
5020: LD_INT 2
5022: PUSH
5023: FOR_TO
5024: IFFALSE 5042
// EraseResourceArea ( i , outerSpawnArea ) ;
5026: LD_VAR 0 2
5030: PPUSH
5031: LD_VAR 0 6
5035: PPUSH
5036: CALL_OW 286
5040: GO 5023
5042: POP
5043: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5044: LD_VAR 0 6
5048: PPUSH
5049: LD_INT 2
5051: PUSH
5052: LD_INT 21
5054: PUSH
5055: LD_INT 1
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: PUSH
5062: LD_INT 21
5064: PUSH
5065: LD_INT 2
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: PUSH
5072: LD_INT 21
5074: PUSH
5075: LD_INT 3
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: PPUSH
5088: CALL_OW 70
5092: IFFALSE 5307
// repeat wait ( 0 0$1 ) ;
5094: LD_INT 35
5096: PPUSH
5097: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5101: LD_VAR 0 6
5105: PPUSH
5106: LD_INT 2
5108: PUSH
5109: LD_INT 21
5111: PUSH
5112: LD_INT 2
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: LD_INT 21
5121: PUSH
5122: LD_INT 3
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: LIST
5133: PPUSH
5134: CALL_OW 70
5138: IFFALSE 5199
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5140: LD_ADDR_VAR 0 2
5144: PUSH
5145: LD_VAR 0 6
5149: PPUSH
5150: LD_INT 2
5152: PUSH
5153: LD_INT 21
5155: PUSH
5156: LD_INT 2
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PUSH
5163: LD_INT 21
5165: PUSH
5166: LD_INT 3
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: LIST
5177: PPUSH
5178: CALL_OW 70
5182: PUSH
5183: FOR_IN
5184: IFFALSE 5197
// RemoveUnit ( i ) ;
5186: LD_VAR 0 2
5190: PPUSH
5191: CALL_OW 64
5195: GO 5183
5197: POP
5198: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5199: LD_VAR 0 6
5203: PPUSH
5204: LD_INT 21
5206: PUSH
5207: LD_INT 1
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 70
5218: IFFALSE 5267
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5220: LD_ADDR_VAR 0 2
5224: PUSH
5225: LD_VAR 0 6
5229: PPUSH
5230: LD_INT 21
5232: PUSH
5233: LD_INT 1
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: PPUSH
5240: CALL_OW 70
5244: PUSH
5245: FOR_IN
5246: IFFALSE 5265
// ComMoveXY ( i , 113 , 53 ) ;
5248: LD_VAR 0 2
5252: PPUSH
5253: LD_INT 113
5255: PPUSH
5256: LD_INT 53
5258: PPUSH
5259: CALL_OW 111
5263: GO 5245
5265: POP
5266: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5267: LD_VAR 0 6
5271: PPUSH
5272: LD_INT 2
5274: PUSH
5275: LD_INT 21
5277: PUSH
5278: LD_INT 1
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: PUSH
5285: LD_INT 21
5287: PUSH
5288: LD_INT 2
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: LIST
5299: PPUSH
5300: CALL_OW 70
5304: NOT
5305: IFFALSE 5094
// case convoyCounter of 1 .. 3 :
5307: LD_EXP 16
5311: PUSH
5312: LD_INT 1
5314: DOUBLE
5315: GREATEREQUAL
5316: IFFALSE 5324
5318: LD_INT 3
5320: DOUBLE
5321: LESSEQUAL
5322: IFTRUE 5326
5324: GO 5961
5326: POP
// begin for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5327: LD_ADDR_VAR 0 2
5331: PUSH
5332: DOUBLE
5333: LD_INT 1
5335: DEC
5336: ST_TO_ADDR
5337: LD_INT 5
5339: PUSH
5340: LD_INT 6
5342: PUSH
5343: LD_INT 7
5345: PUSH
5346: LD_INT 8
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: LIST
5353: LIST
5354: PUSH
5355: LD_OWVAR 67
5359: ARRAY
5360: PUSH
5361: LD_EXP 16
5365: MINUS
5366: PUSH
5367: FOR_TO
5368: IFFALSE 5575
// begin uc_side := 3 ;
5370: LD_ADDR_OWVAR 20
5374: PUSH
5375: LD_INT 3
5377: ST_TO_ADDR
// uc_nation := 3 ;
5378: LD_ADDR_OWVAR 21
5382: PUSH
5383: LD_INT 3
5385: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5386: LD_INT 0
5388: PPUSH
5389: LD_INT 1
5391: PUSH
5392: LD_INT 1
5394: PUSH
5395: LD_INT 1
5397: PUSH
5398: LD_INT 4
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 1
5409: PPUSH
5410: LD_INT 4
5412: PPUSH
5413: CALL_OW 12
5417: ARRAY
5418: PPUSH
5419: LD_INT 4
5421: PUSH
5422: LD_INT 5
5424: PUSH
5425: LD_INT 6
5427: PUSH
5428: LD_INT 7
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: PUSH
5437: LD_OWVAR 67
5441: ARRAY
5442: PPUSH
5443: CALL_OW 380
// un := CreateHuman ;
5447: LD_ADDR_VAR 0 8
5451: PUSH
5452: CALL_OW 44
5456: ST_TO_ADDR
// SetDir ( un , dir ) ;
5457: LD_VAR 0 8
5461: PPUSH
5462: LD_VAR 0 4
5466: PPUSH
5467: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5471: LD_VAR 0 8
5475: PPUSH
5476: LD_VAR 0 5
5480: PPUSH
5481: LD_INT 0
5483: PPUSH
5484: CALL 74918 0 3
5488: IFFALSE 5573
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5490: LD_ADDR_EXP 41
5494: PUSH
5495: LD_EXP 41
5499: PPUSH
5500: LD_EXP 41
5504: PUSH
5505: LD_INT 1
5507: PLUS
5508: PPUSH
5509: LD_VAR 0 8
5513: PPUSH
5514: CALL_OW 1
5518: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5519: LD_VAR 0 8
5523: PPUSH
5524: LD_INT 1
5526: PPUSH
5527: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5531: LD_VAR 0 8
5535: PPUSH
5536: LD_VAR 0 7
5540: PUSH
5541: LD_INT 1
5543: ARRAY
5544: PUSH
5545: LD_INT 1
5547: ARRAY
5548: PPUSH
5549: LD_VAR 0 7
5553: PUSH
5554: LD_INT 1
5556: ARRAY
5557: PUSH
5558: LD_INT 2
5560: ARRAY
5561: PPUSH
5562: CALL_OW 111
// wait ( 0 0$2 ) ;
5566: LD_INT 70
5568: PPUSH
5569: CALL_OW 67
// end ; end ;
5573: GO 5367
5575: POP
5576: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5577: LD_ADDR_VAR 0 2
5581: PUSH
5582: DOUBLE
5583: LD_INT 1
5585: DEC
5586: ST_TO_ADDR
5587: LD_INT 3
5589: PUSH
5590: LD_INT 4
5592: PUSH
5593: LD_INT 4
5595: PUSH
5596: LD_INT 4
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: PUSH
5605: LD_OWVAR 67
5609: ARRAY
5610: PUSH
5611: FOR_TO
5612: IFFALSE 5957
// begin uc_side := 3 ;
5614: LD_ADDR_OWVAR 20
5618: PUSH
5619: LD_INT 3
5621: ST_TO_ADDR
// uc_nation := 3 ;
5622: LD_ADDR_OWVAR 21
5626: PUSH
5627: LD_INT 3
5629: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5630: LD_INT 3
5632: PPUSH
5633: LD_INT 3
5635: PPUSH
5636: LD_INT 21
5638: PUSH
5639: LD_INT 22
5641: PUSH
5642: LD_INT 23
5644: PUSH
5645: LD_INT 24
5647: PUSH
5648: LD_INT 24
5650: PUSH
5651: LD_INT 24
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: PUSH
5662: LD_OWVAR 67
5666: PPUSH
5667: LD_OWVAR 67
5671: PUSH
5672: LD_INT 2
5674: PLUS
5675: PPUSH
5676: CALL_OW 12
5680: ARRAY
5681: PPUSH
5682: LD_INT 1
5684: PPUSH
5685: LD_INT 1
5687: PPUSH
5688: LD_INT 42
5690: PUSH
5691: LD_INT 44
5693: PUSH
5694: LD_INT 43
5696: PUSH
5697: LD_INT 44
5699: PUSH
5700: LD_INT 46
5702: PUSH
5703: LD_INT 46
5705: PUSH
5706: EMPTY
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: PUSH
5714: LD_INT 1
5716: PPUSH
5717: LD_OWVAR 67
5721: PUSH
5722: LD_INT 2
5724: PLUS
5725: PPUSH
5726: CALL_OW 12
5730: ARRAY
5731: PPUSH
5732: LD_INT 90
5734: PPUSH
5735: CALL 453 0 7
// un := CreateVehicle ;
5739: LD_ADDR_VAR 0 8
5743: PUSH
5744: CALL_OW 45
5748: ST_TO_ADDR
// SetDir ( un , dir ) ;
5749: LD_VAR 0 8
5753: PPUSH
5754: LD_VAR 0 4
5758: PPUSH
5759: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5763: LD_VAR 0 8
5767: PPUSH
5768: LD_VAR 0 5
5772: PPUSH
5773: LD_INT 0
5775: PPUSH
5776: CALL 74918 0 3
5780: IFFALSE 5955
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5782: LD_ADDR_EXP 41
5786: PUSH
5787: LD_EXP 41
5791: PPUSH
5792: LD_EXP 41
5796: PUSH
5797: LD_INT 1
5799: PLUS
5800: PPUSH
5801: LD_VAR 0 8
5805: PPUSH
5806: CALL_OW 1
5810: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5811: LD_INT 0
5813: PPUSH
5814: LD_INT 3
5816: PUSH
5817: LD_INT 4
5819: PUSH
5820: LD_INT 5
5822: PUSH
5823: LD_INT 6
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: PUSH
5832: LD_OWVAR 67
5836: ARRAY
5837: PPUSH
5838: CALL_OW 383
// un := CreateHuman ;
5842: LD_ADDR_VAR 0 8
5846: PUSH
5847: CALL_OW 44
5851: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5852: LD_VAR 0 8
5856: PPUSH
5857: LD_EXP 41
5861: PUSH
5862: LD_EXP 41
5866: ARRAY
5867: PPUSH
5868: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5872: LD_ADDR_EXP 41
5876: PUSH
5877: LD_EXP 41
5881: PPUSH
5882: LD_EXP 41
5886: PUSH
5887: LD_INT 1
5889: PLUS
5890: PPUSH
5891: LD_VAR 0 8
5895: PPUSH
5896: CALL_OW 1
5900: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5901: LD_VAR 0 8
5905: PPUSH
5906: LD_INT 1
5908: PPUSH
5909: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5913: LD_VAR 0 8
5917: PPUSH
5918: LD_VAR 0 7
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PUSH
5927: LD_INT 1
5929: ARRAY
5930: PPUSH
5931: LD_VAR 0 7
5935: PUSH
5936: LD_INT 1
5938: ARRAY
5939: PUSH
5940: LD_INT 2
5942: ARRAY
5943: PPUSH
5944: CALL_OW 111
// wait ( 0 0$3 ) ;
5948: LD_INT 105
5950: PPUSH
5951: CALL_OW 67
// end ; end ;
5955: GO 5611
5957: POP
5958: POP
// end ; 4 .. 7 :
5959: GO 6566
5961: LD_INT 4
5963: DOUBLE
5964: GREATEREQUAL
5965: IFFALSE 5973
5967: LD_INT 7
5969: DOUBLE
5970: LESSEQUAL
5971: IFTRUE 5975
5973: GO 6565
5975: POP
// begin for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5976: LD_ADDR_VAR 0 2
5980: PUSH
5981: DOUBLE
5982: LD_INT 1
5984: DEC
5985: ST_TO_ADDR
5986: LD_INT 2
5988: PUSH
5989: LD_INT 3
5991: PUSH
5992: LD_INT 4
5994: PUSH
5995: LD_INT 4
5997: PUSH
5998: EMPTY
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: PUSH
6004: LD_OWVAR 67
6008: ARRAY
6009: PUSH
6010: FOR_TO
6011: IFFALSE 6191
// begin uc_side := 3 ;
6013: LD_ADDR_OWVAR 20
6017: PUSH
6018: LD_INT 3
6020: ST_TO_ADDR
// uc_nation := 3 ;
6021: LD_ADDR_OWVAR 21
6025: PUSH
6026: LD_INT 3
6028: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
6029: LD_INT 0
6031: PPUSH
6032: LD_INT 1
6034: PPUSH
6035: LD_INT 4
6037: PUSH
6038: LD_INT 5
6040: PUSH
6041: LD_INT 6
6043: PUSH
6044: LD_INT 7
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: PUSH
6053: LD_OWVAR 67
6057: ARRAY
6058: PPUSH
6059: CALL_OW 380
// un := CreateHuman ;
6063: LD_ADDR_VAR 0 8
6067: PUSH
6068: CALL_OW 44
6072: ST_TO_ADDR
// SetDir ( un , dir ) ;
6073: LD_VAR 0 8
6077: PPUSH
6078: LD_VAR 0 4
6082: PPUSH
6083: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6087: LD_VAR 0 8
6091: PPUSH
6092: LD_VAR 0 5
6096: PPUSH
6097: LD_INT 0
6099: PPUSH
6100: CALL 74918 0 3
6104: IFFALSE 6189
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6106: LD_ADDR_EXP 41
6110: PUSH
6111: LD_EXP 41
6115: PPUSH
6116: LD_EXP 41
6120: PUSH
6121: LD_INT 1
6123: PLUS
6124: PPUSH
6125: LD_VAR 0 8
6129: PPUSH
6130: CALL_OW 1
6134: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6135: LD_VAR 0 8
6139: PPUSH
6140: LD_INT 1
6142: PPUSH
6143: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6147: LD_VAR 0 8
6151: PPUSH
6152: LD_VAR 0 7
6156: PUSH
6157: LD_INT 1
6159: ARRAY
6160: PUSH
6161: LD_INT 1
6163: ARRAY
6164: PPUSH
6165: LD_VAR 0 7
6169: PUSH
6170: LD_INT 1
6172: ARRAY
6173: PUSH
6174: LD_INT 2
6176: ARRAY
6177: PPUSH
6178: CALL_OW 111
// wait ( 0 0$2 ) ;
6182: LD_INT 70
6184: PPUSH
6185: CALL_OW 67
// end ; end ;
6189: GO 6010
6191: POP
6192: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6193: LD_ADDR_VAR 0 2
6197: PUSH
6198: DOUBLE
6199: LD_INT 1
6201: DEC
6202: ST_TO_ADDR
6203: LD_INT 2
6205: PUSH
6206: LD_INT 3
6208: PUSH
6209: LD_INT 3
6211: PUSH
6212: LD_INT 4
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: PUSH
6221: LD_OWVAR 67
6225: ARRAY
6226: PUSH
6227: FOR_TO
6228: IFFALSE 6561
// begin uc_side := 3 ;
6230: LD_ADDR_OWVAR 20
6234: PUSH
6235: LD_INT 3
6237: ST_TO_ADDR
// uc_nation := 3 ;
6238: LD_ADDR_OWVAR 21
6242: PUSH
6243: LD_INT 3
6245: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6246: LD_INT 3
6248: PPUSH
6249: LD_INT 3
6251: PPUSH
6252: LD_INT 21
6254: PUSH
6255: LD_INT 22
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: PUSH
6262: LD_INT 1
6264: PPUSH
6265: LD_INT 2
6267: PPUSH
6268: CALL_OW 12
6272: ARRAY
6273: PPUSH
6274: LD_INT 1
6276: PPUSH
6277: LD_INT 1
6279: PPUSH
6280: LD_INT 42
6282: PUSH
6283: LD_INT 44
6285: PUSH
6286: LD_INT 43
6288: PUSH
6289: LD_INT 44
6291: PUSH
6292: LD_INT 44
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: PUSH
6302: LD_INT 1
6304: PPUSH
6305: LD_OWVAR 67
6309: PUSH
6310: LD_INT 1
6312: PLUS
6313: PPUSH
6314: CALL_OW 12
6318: ARRAY
6319: PPUSH
6320: LD_INT 90
6322: PPUSH
6323: CALL 453 0 7
// un := CreateVehicle ;
6327: LD_ADDR_VAR 0 8
6331: PUSH
6332: CALL_OW 45
6336: ST_TO_ADDR
// SetDir ( un , dir ) ;
6337: LD_VAR 0 8
6341: PPUSH
6342: LD_VAR 0 4
6346: PPUSH
6347: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6351: LD_VAR 0 8
6355: PPUSH
6356: LD_VAR 0 5
6360: PPUSH
6361: LD_INT 0
6363: PPUSH
6364: CALL 74918 0 3
6368: IFFALSE 6559
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6370: LD_ADDR_EXP 41
6374: PUSH
6375: LD_EXP 41
6379: PPUSH
6380: LD_EXP 41
6384: PUSH
6385: LD_INT 1
6387: PLUS
6388: PPUSH
6389: LD_VAR 0 8
6393: PPUSH
6394: CALL_OW 1
6398: ST_TO_ADDR
// uc_side := 3 ;
6399: LD_ADDR_OWVAR 20
6403: PUSH
6404: LD_INT 3
6406: ST_TO_ADDR
// uc_nation := 3 ;
6407: LD_ADDR_OWVAR 21
6411: PUSH
6412: LD_INT 3
6414: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6415: LD_INT 0
6417: PPUSH
6418: LD_INT 3
6420: PUSH
6421: LD_INT 4
6423: PUSH
6424: LD_INT 5
6426: PUSH
6427: LD_INT 6
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: PUSH
6436: LD_OWVAR 67
6440: ARRAY
6441: PPUSH
6442: CALL_OW 383
// un := CreateHuman ;
6446: LD_ADDR_VAR 0 8
6450: PUSH
6451: CALL_OW 44
6455: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6456: LD_VAR 0 8
6460: PPUSH
6461: LD_EXP 41
6465: PUSH
6466: LD_EXP 41
6470: ARRAY
6471: PPUSH
6472: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6476: LD_ADDR_EXP 41
6480: PUSH
6481: LD_EXP 41
6485: PPUSH
6486: LD_EXP 41
6490: PUSH
6491: LD_INT 1
6493: PLUS
6494: PPUSH
6495: LD_VAR 0 8
6499: PPUSH
6500: CALL_OW 1
6504: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6505: LD_VAR 0 8
6509: PPUSH
6510: LD_INT 1
6512: PPUSH
6513: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6517: LD_VAR 0 8
6521: PPUSH
6522: LD_VAR 0 7
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PUSH
6531: LD_INT 1
6533: ARRAY
6534: PPUSH
6535: LD_VAR 0 7
6539: PUSH
6540: LD_INT 1
6542: ARRAY
6543: PUSH
6544: LD_INT 2
6546: ARRAY
6547: PPUSH
6548: CALL_OW 111
// wait ( 0 0$2 ) ;
6552: LD_INT 70
6554: PPUSH
6555: CALL_OW 67
// end ; end ;
6559: GO 6227
6561: POP
6562: POP
// end ; end ;
6563: GO 6566
6565: POP
// repeat wait ( 0 0$1 ) ;
6566: LD_INT 35
6568: PPUSH
6569: CALL_OW 67
// for un in ruConvoySquad do
6573: LD_ADDR_VAR 0 8
6577: PUSH
6578: LD_EXP 41
6582: PUSH
6583: FOR_IN
6584: IFFALSE 7214
// begin if IsInArea ( un , westSouthOutArea ) then
6586: LD_VAR 0 8
6590: PPUSH
6591: LD_INT 18
6593: PPUSH
6594: CALL_OW 308
6598: IFFALSE 6686
// begin if GetType ( un ) = unit_vehicle then
6600: LD_VAR 0 8
6604: PPUSH
6605: CALL_OW 247
6609: PUSH
6610: LD_INT 2
6612: EQUAL
6613: IFFALSE 6645
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6615: LD_ADDR_EXP 41
6619: PUSH
6620: LD_EXP 41
6624: PUSH
6625: LD_VAR 0 8
6629: PPUSH
6630: CALL_OW 311
6634: DIFF
6635: ST_TO_ADDR
// RemoveUnit ( un ) ;
6636: LD_VAR 0 8
6640: PPUSH
6641: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6645: LD_ADDR_EXP 15
6649: PUSH
6650: LD_EXP 15
6654: PUSH
6655: LD_INT 1
6657: PLUS
6658: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6659: LD_ADDR_EXP 41
6663: PUSH
6664: LD_EXP 41
6668: PUSH
6669: LD_VAR 0 8
6673: DIFF
6674: ST_TO_ADDR
// RemoveUnit ( un ) ;
6675: LD_VAR 0 8
6679: PPUSH
6680: CALL_OW 64
// break ;
6684: GO 7214
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6686: LD_VAR 0 8
6690: PPUSH
6691: CALL_OW 305
6695: NOT
6696: IFFALSE 6710
6698: PUSH
6699: LD_VAR 0 8
6703: PPUSH
6704: CALL_OW 310
6708: NOT
6709: AND
6710: IFFALSE 6728
// ruConvoySquad := ruConvoySquad diff un ;
6712: LD_ADDR_EXP 41
6716: PUSH
6717: LD_EXP 41
6721: PUSH
6722: LD_VAR 0 8
6726: DIFF
6727: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6728: LD_VAR 0 8
6732: PPUSH
6733: CALL_OW 302
6737: IFFALSE 6751
6739: PUSH
6740: LD_VAR 0 8
6744: PPUSH
6745: CALL_OW 314
6749: NOT
6750: AND
6751: IFFALSE 7212
// begin tag := GetTag ( un ) ;
6753: LD_ADDR_VAR 0 9
6757: PUSH
6758: LD_VAR 0 8
6762: PPUSH
6763: CALL_OW 110
6767: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6768: LD_VAR 0 8
6772: PPUSH
6773: LD_VAR 0 7
6777: PUSH
6778: LD_VAR 0 9
6782: PUSH
6783: LD_INT 1
6785: PLUS
6786: ARRAY
6787: PUSH
6788: LD_INT 1
6790: ARRAY
6791: PPUSH
6792: LD_VAR 0 7
6796: PUSH
6797: LD_VAR 0 9
6801: PUSH
6802: LD_INT 1
6804: PLUS
6805: ARRAY
6806: PUSH
6807: LD_INT 2
6809: ARRAY
6810: PPUSH
6811: CALL_OW 297
6815: PUSH
6816: LD_INT 6
6818: LESS
6819: IFFALSE 7004
// begin SetTag ( un , tag + 1 ) ;
6821: LD_VAR 0 8
6825: PPUSH
6826: LD_VAR 0 9
6830: PUSH
6831: LD_INT 1
6833: PLUS
6834: PPUSH
6835: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6839: LD_VAR 0 8
6843: PPUSH
6844: CALL_OW 247
6848: PUSH
6849: LD_INT 2
6851: EQUAL
6852: IFTRUE 6869
6854: PUSH
6855: LD_VAR 0 8
6859: PPUSH
6860: CALL_OW 257
6864: PUSH
6865: LD_INT 3
6867: EQUAL
6868: OR
6869: IFFALSE 7002
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6871: LD_ADDR_VAR 0 10
6875: PUSH
6876: LD_INT 22
6878: PUSH
6879: LD_INT 2
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PUSH
6886: LD_INT 91
6888: PUSH
6889: LD_VAR 0 8
6893: PUSH
6894: LD_INT 8
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: LIST
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PPUSH
6906: CALL_OW 69
6910: ST_TO_ADDR
// if enemy then
6911: LD_VAR 0 10
6915: IFFALSE 6943
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6917: LD_VAR 0 8
6921: PPUSH
6922: LD_VAR 0 10
6926: PPUSH
6927: LD_VAR 0 8
6931: PPUSH
6932: CALL_OW 74
6936: PPUSH
6937: CALL_OW 115
6941: GO 7002
// begin AddComWait ( un , 0 0$4 ) ;
6943: LD_VAR 0 8
6947: PPUSH
6948: LD_INT 140
6950: PPUSH
6951: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6955: LD_VAR 0 8
6959: PPUSH
6960: LD_VAR 0 7
6964: PUSH
6965: LD_VAR 0 9
6969: PUSH
6970: LD_INT 1
6972: PLUS
6973: ARRAY
6974: PUSH
6975: LD_INT 1
6977: ARRAY
6978: PPUSH
6979: LD_VAR 0 7
6983: PUSH
6984: LD_VAR 0 9
6988: PUSH
6989: LD_INT 1
6991: PLUS
6992: ARRAY
6993: PUSH
6994: LD_INT 2
6996: ARRAY
6997: PPUSH
6998: CALL_OW 174
// end ; end ; end else
7002: GO 7212
// begin if GetClass ( un ) = 4 then
7004: LD_VAR 0 8
7008: PPUSH
7009: CALL_OW 257
7013: PUSH
7014: LD_INT 4
7016: EQUAL
7017: IFFALSE 7165
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7019: LD_EXP 41
7023: PPUSH
7024: LD_INT 21
7026: PUSH
7027: LD_INT 1
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 3
7036: PUSH
7037: LD_INT 24
7039: PUSH
7040: LD_INT 1000
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PPUSH
7055: CALL_OW 72
7059: IFFALSE 7117
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
7061: LD_VAR 0 8
7065: PPUSH
7066: LD_EXP 41
7070: PPUSH
7071: LD_INT 21
7073: PUSH
7074: LD_INT 1
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PUSH
7081: LD_INT 3
7083: PUSH
7084: LD_INT 24
7086: PUSH
7087: LD_INT 1000
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PPUSH
7102: CALL_OW 72
7106: PUSH
7107: LD_INT 1
7109: ARRAY
7110: PPUSH
7111: CALL_OW 128
7115: GO 7163
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7117: LD_VAR 0 8
7121: PPUSH
7122: LD_EXP 41
7126: PPUSH
7127: LD_INT 3
7129: PUSH
7130: LD_INT 25
7132: PUSH
7133: LD_INT 4
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PPUSH
7144: CALL_OW 72
7148: PPUSH
7149: LD_VAR 0 8
7153: PPUSH
7154: CALL_OW 74
7158: PPUSH
7159: CALL_OW 112
7163: GO 7212
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7165: LD_VAR 0 8
7169: PPUSH
7170: LD_VAR 0 7
7174: PUSH
7175: LD_VAR 0 9
7179: PUSH
7180: LD_INT 1
7182: PLUS
7183: ARRAY
7184: PUSH
7185: LD_INT 1
7187: ARRAY
7188: PPUSH
7189: LD_VAR 0 7
7193: PUSH
7194: LD_VAR 0 9
7198: PUSH
7199: LD_INT 1
7201: PLUS
7202: ARRAY
7203: PUSH
7204: LD_INT 2
7206: ARRAY
7207: PPUSH
7208: CALL_OW 114
// end ; end ; end ;
7212: GO 6583
7214: POP
7215: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7216: LD_EXP 41
7220: PPUSH
7221: LD_INT 52
7223: PUSH
7224: EMPTY
7225: LIST
7226: PUSH
7227: LD_INT 21
7229: PUSH
7230: LD_INT 1
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PPUSH
7241: CALL_OW 72
7245: NOT
7246: IFFALSE 6566
// end ;
7248: LD_VAR 0 1
7252: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7253: LD_EXP 16
7257: PUSH
7258: LD_INT 3
7260: PPUSH
7261: LD_INT 5
7263: PPUSH
7264: CALL_OW 12
7268: LESS
7269: IFFALSE 7278
7271: PUSH
7272: LD_EXP 41
7276: NOT
7277: AND
7278: IFFALSE 7290
7280: PUSH
7281: LD_OWVAR 67
7285: PUSH
7286: LD_INT 1
7288: GREATER
7289: AND
7290: IFFALSE 7710
7292: GO 7294
7294: DISABLE
7295: LD_INT 0
7297: PPUSH
7298: PPUSH
7299: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7300: LD_ADDR_VAR 0 1
7304: PUSH
7305: DOUBLE
7306: LD_INT 1
7308: DEC
7309: ST_TO_ADDR
7310: LD_INT 2
7312: PUSH
7313: LD_INT 3
7315: PUSH
7316: LD_INT 4
7318: PUSH
7319: LD_INT 5
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: PUSH
7328: LD_OWVAR 67
7332: ARRAY
7333: PUSH
7334: FOR_TO
7335: IFFALSE 7631
// begin uc_side := 3 ;
7337: LD_ADDR_OWVAR 20
7341: PUSH
7342: LD_INT 3
7344: ST_TO_ADDR
// uc_nation := 3 ;
7345: LD_ADDR_OWVAR 21
7349: PUSH
7350: LD_INT 3
7352: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7353: LD_INT 3
7355: PPUSH
7356: LD_INT 3
7358: PPUSH
7359: LD_INT 21
7361: PUSH
7362: LD_INT 22
7364: PUSH
7365: LD_INT 23
7367: PUSH
7368: LD_INT 24
7370: PUSH
7371: LD_INT 24
7373: PUSH
7374: LD_INT 24
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: PUSH
7385: LD_OWVAR 67
7389: PPUSH
7390: LD_OWVAR 67
7394: PUSH
7395: LD_INT 2
7397: PLUS
7398: PPUSH
7399: CALL_OW 12
7403: ARRAY
7404: PPUSH
7405: LD_INT 1
7407: PPUSH
7408: LD_INT 1
7410: PPUSH
7411: LD_INT 42
7413: PUSH
7414: LD_INT 44
7416: PUSH
7417: LD_INT 43
7419: PUSH
7420: LD_INT 44
7422: PUSH
7423: LD_INT 46
7425: PUSH
7426: LD_INT 46
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 1
7439: PPUSH
7440: LD_OWVAR 67
7444: PUSH
7445: LD_INT 2
7447: PLUS
7448: PPUSH
7449: CALL_OW 12
7453: ARRAY
7454: PPUSH
7455: LD_INT 90
7457: PPUSH
7458: CALL 453 0 7
// un := CreateVehicle ;
7462: LD_ADDR_VAR 0 3
7466: PUSH
7467: CALL_OW 45
7471: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7472: LD_VAR 0 3
7476: PPUSH
7477: LD_INT 0
7479: PPUSH
7480: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7484: LD_VAR 0 3
7488: PPUSH
7489: LD_INT 23
7491: PPUSH
7492: LD_INT 0
7494: PPUSH
7495: CALL 74918 0 3
7499: IFFALSE 7629
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7501: LD_ADDR_VAR 0 2
7505: PUSH
7506: LD_VAR 0 2
7510: PPUSH
7511: LD_VAR 0 2
7515: PUSH
7516: LD_INT 1
7518: PLUS
7519: PPUSH
7520: LD_VAR 0 3
7524: PPUSH
7525: CALL_OW 1
7529: ST_TO_ADDR
// uc_side := 3 ;
7530: LD_ADDR_OWVAR 20
7534: PUSH
7535: LD_INT 3
7537: ST_TO_ADDR
// uc_nation := 3 ;
7538: LD_ADDR_OWVAR 21
7542: PUSH
7543: LD_INT 3
7545: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7546: LD_INT 0
7548: PPUSH
7549: LD_INT 3
7551: PUSH
7552: LD_INT 4
7554: PUSH
7555: LD_INT 5
7557: PUSH
7558: LD_INT 6
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: PUSH
7567: LD_OWVAR 67
7571: ARRAY
7572: PPUSH
7573: CALL_OW 383
// un := CreateHuman ;
7577: LD_ADDR_VAR 0 3
7581: PUSH
7582: CALL_OW 44
7586: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7587: LD_VAR 0 3
7591: PPUSH
7592: LD_VAR 0 2
7596: PUSH
7597: LD_VAR 0 2
7601: ARRAY
7602: PPUSH
7603: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7607: LD_VAR 0 3
7611: PPUSH
7612: LD_INT 80
7614: PPUSH
7615: LD_INT 139
7617: PPUSH
7618: CALL_OW 111
// wait ( 0 0$3 ) ;
7622: LD_INT 105
7624: PPUSH
7625: CALL_OW 67
// end ; end ;
7629: GO 7334
7631: POP
7632: POP
// for i in tmp do
7633: LD_ADDR_VAR 0 1
7637: PUSH
7638: LD_VAR 0 2
7642: PUSH
7643: FOR_IN
7644: IFFALSE 7708
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7646: LD_VAR 0 1
7650: PPUSH
7651: LD_INT 101
7653: PPUSH
7654: LD_INT 102
7656: PPUSH
7657: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7661: LD_VAR 0 1
7665: PPUSH
7666: LD_INT 110
7668: PPUSH
7669: LD_INT 78
7671: PPUSH
7672: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7676: LD_VAR 0 1
7680: PPUSH
7681: LD_INT 75
7683: PPUSH
7684: LD_INT 101
7686: PPUSH
7687: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7691: LD_VAR 0 1
7695: PPUSH
7696: LD_INT 57
7698: PPUSH
7699: LD_INT 83
7701: PPUSH
7702: CALL_OW 174
// end ;
7706: GO 7643
7708: POP
7709: POP
// end ;
7710: PPOPN 3
7712: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7713: LD_EXP 39
7717: PPUSH
7718: LD_INT 3
7720: PUSH
7721: LD_INT 24
7723: PUSH
7724: LD_INT 1000
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: PPUSH
7735: CALL_OW 72
7739: IFTRUE 7769
7741: PUSH
7742: LD_EXP 40
7746: PPUSH
7747: LD_INT 3
7749: PUSH
7750: LD_INT 24
7752: PUSH
7753: LD_INT 1000
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PPUSH
7764: CALL_OW 72
7768: OR
7769: IFFALSE 7868
7771: GO 7773
7773: DISABLE
7774: LD_INT 0
7776: PPUSH
// begin enable ;
7777: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7778: LD_ADDR_VAR 0 1
7782: PUSH
7783: LD_EXP 39
7787: PPUSH
7788: LD_INT 3
7790: PUSH
7791: LD_INT 24
7793: PUSH
7794: LD_INT 1000
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PPUSH
7805: CALL_OW 72
7809: PUSH
7810: LD_EXP 40
7814: PPUSH
7815: LD_INT 3
7817: PUSH
7818: LD_INT 24
7820: PUSH
7821: LD_INT 1000
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PPUSH
7832: CALL_OW 72
7836: UNION
7837: PUSH
7838: FOR_IN
7839: IFFALSE 7866
// if IsSleeping ( i ) then
7841: LD_VAR 0 1
7845: PPUSH
7846: CALL_OW 555
7850: IFFALSE 7864
// ForceSleep ( i , false ) ;
7852: LD_VAR 0 1
7856: PPUSH
7857: LD_INT 0
7859: PPUSH
7860: CALL_OW 585
7864: GO 7838
7866: POP
7867: POP
// end ;
7868: PPOPN 1
7870: END
// every 0 0$1 trigger UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) do var i , tmp ;
7871: LD_EXP 38
7875: PPUSH
7876: LD_INT 1
7878: PUSH
7879: LD_INT 3
7881: PUSH
7882: LD_INT 54
7884: PUSH
7885: EMPTY
7886: LIST
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: PUSH
7892: LD_INT 3
7894: PUSH
7895: LD_INT 95
7897: PUSH
7898: LD_INT 26
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: PPUSH
7914: CALL_OW 72
7918: IFFALSE 8013
7920: GO 7922
7922: DISABLE
7923: LD_INT 0
7925: PPUSH
7926: PPUSH
// begin enable ;
7927: ENABLE
// tmp := UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) ;
7928: LD_ADDR_VAR 0 2
7932: PUSH
7933: LD_EXP 38
7937: PPUSH
7938: LD_INT 1
7940: PUSH
7941: LD_INT 3
7943: PUSH
7944: LD_INT 54
7946: PUSH
7947: EMPTY
7948: LIST
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: PUSH
7954: LD_INT 3
7956: PUSH
7957: LD_INT 95
7959: PUSH
7960: LD_INT 26
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: LIST
7975: PPUSH
7976: CALL_OW 72
7980: ST_TO_ADDR
// for i in tmp do
7981: LD_ADDR_VAR 0 1
7985: PUSH
7986: LD_VAR 0 2
7990: PUSH
7991: FOR_IN
7992: IFFALSE 8011
// ComMoveXY ( i , 206 , 110 ) ;
7994: LD_VAR 0 1
7998: PPUSH
7999: LD_INT 206
8001: PPUSH
8002: LD_INT 110
8004: PPUSH
8005: CALL_OW 111
8009: GO 7991
8011: POP
8012: POP
// end ;
8013: PPOPN 2
8015: END
// every 0 0$5 trigger FilterUnitsInArea ( eastBaseArea , [ f_side , 2 ] ) and FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do var i ;
8016: LD_INT 26
8018: PPUSH
8019: LD_INT 22
8021: PUSH
8022: LD_INT 2
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PPUSH
8029: CALL_OW 70
8033: IFFALSE 8075
8035: PUSH
8036: LD_INT 26
8038: PPUSH
8039: LD_INT 22
8041: PUSH
8042: LD_INT 3
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: PUSH
8049: LD_INT 30
8051: PUSH
8052: LD_INT 32
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PUSH
8059: LD_INT 50
8061: PUSH
8062: EMPTY
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 70
8074: AND
8075: IFFALSE 8154
8077: GO 8079
8079: DISABLE
8080: LD_INT 0
8082: PPUSH
// begin for i in FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do
8083: LD_ADDR_VAR 0 1
8087: PUSH
8088: LD_INT 26
8090: PPUSH
8091: LD_INT 22
8093: PUSH
8094: LD_INT 3
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 30
8103: PUSH
8104: LD_INT 32
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PUSH
8111: LD_INT 50
8113: PUSH
8114: EMPTY
8115: LIST
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: LIST
8121: PPUSH
8122: CALL_OW 70
8126: PUSH
8127: FOR_IN
8128: IFFALSE 8152
// if IsInUnit ( i ) then
8130: LD_VAR 0 1
8134: PPUSH
8135: CALL_OW 310
8139: IFFALSE 8150
// ComExitBuilding ( i ) ;
8141: LD_VAR 0 1
8145: PPUSH
8146: CALL_OW 122
8150: GO 8127
8152: POP
8153: POP
// end ; end_of_file
8154: PPOPN 1
8156: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8157: LD_VAR 0 1
8161: PPUSH
8162: CALL 15265 0 1
// if un = Heike then
8166: LD_VAR 0 1
8170: PUSH
8171: LD_EXP 21
8175: EQUAL
8176: IFFALSE 8185
// YouLost ( Heike ) ;
8178: LD_STRING Heike
8180: PPUSH
8181: CALL_OW 104
// if un in apeSoldGroup then
8185: LD_VAR 0 1
8189: PUSH
8190: LD_EXP 42
8194: IN
8195: IFFALSE 8213
// apeSoldGroup := apeSoldGroup diff un ;
8197: LD_ADDR_EXP 42
8201: PUSH
8202: LD_EXP 42
8206: PUSH
8207: LD_VAR 0 1
8211: DIFF
8212: ST_TO_ADDR
// if un in apeEngGroup then
8213: LD_VAR 0 1
8217: PUSH
8218: LD_EXP 43
8222: IN
8223: IFFALSE 8241
// apeEngGroup := apeEngGroup diff un ;
8225: LD_ADDR_EXP 43
8229: PUSH
8230: LD_EXP 43
8234: PUSH
8235: LD_VAR 0 1
8239: DIFF
8240: ST_TO_ADDR
// if un in oilBaseGuard then
8241: LD_VAR 0 1
8245: PUSH
8246: LD_EXP 38
8250: IN
8251: IFFALSE 8269
// oilBaseGuard := oilBaseGuard diff un ;
8253: LD_ADDR_EXP 38
8257: PUSH
8258: LD_EXP 38
8262: PUSH
8263: LD_VAR 0 1
8267: DIFF
8268: ST_TO_ADDR
// if un in ruNorthGroup then
8269: LD_VAR 0 1
8273: PUSH
8274: LD_EXP 39
8278: IN
8279: IFFALSE 8297
// ruNorthGroup := ruNorthGroup diff un ;
8281: LD_ADDR_EXP 39
8285: PUSH
8286: LD_EXP 39
8290: PUSH
8291: LD_VAR 0 1
8295: DIFF
8296: ST_TO_ADDR
// if un in ruSouthGroup then
8297: LD_VAR 0 1
8301: PUSH
8302: LD_EXP 40
8306: IN
8307: IFFALSE 8325
// ruSouthGroup := ruSouthGroup diff un ;
8309: LD_ADDR_EXP 40
8313: PUSH
8314: LD_EXP 40
8318: PUSH
8319: LD_VAR 0 1
8323: DIFF
8324: ST_TO_ADDR
// if un in ruConvoySquad then
8325: LD_VAR 0 1
8329: PUSH
8330: LD_EXP 41
8334: IN
8335: IFFALSE 8353
// ruConvoySquad := ruConvoySquad diff un ;
8337: LD_ADDR_EXP 41
8341: PUSH
8342: LD_EXP 41
8346: PUSH
8347: LD_VAR 0 1
8351: DIFF
8352: ST_TO_ADDR
// end ;
8353: PPOPN 1
8355: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8356: LD_VAR 0 1
8360: PPUSH
8361: LD_VAR 0 2
8365: PPUSH
8366: CALL 15323 0 2
// if GetWeapon ( veh ) = ar_radar then
8370: LD_VAR 0 1
8374: PPUSH
8375: CALL_OW 264
8379: PUSH
8380: LD_INT 30
8382: EQUAL
8383: IFFALSE 8393
// radarConstructed := true ;
8385: LD_ADDR_EXP 13
8389: PUSH
8390: LD_INT 1
8392: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8393: LD_VAR 0 1
8397: PPUSH
8398: CALL_OW 264
8402: PUSH
8403: LD_INT 26
8405: EQUAL
8406: IFFALSE 8416
// flamethrowerBuilt := true ;
8408: LD_ADDR_EXP 20
8412: PUSH
8413: LD_INT 1
8415: ST_TO_ADDR
// end ;
8416: PPOPN 2
8418: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8419: LD_ADDR_EXP 18
8423: PUSH
8424: LD_EXP 18
8428: PUSH
8429: LD_INT 1
8431: PLUS
8432: ST_TO_ADDR
// if oldId in ruConvoySquad then
8433: LD_VAR 0 2
8437: PUSH
8438: LD_EXP 41
8442: IN
8443: IFFALSE 8461
// ruConvoySquad := ruConvoySquad diff oldId ;
8445: LD_ADDR_EXP 41
8449: PUSH
8450: LD_EXP 41
8454: PUSH
8455: LD_VAR 0 2
8459: DIFF
8460: ST_TO_ADDR
// if newId in ruConvoySquad then
8461: LD_VAR 0 1
8465: PUSH
8466: LD_EXP 41
8470: IN
8471: IFFALSE 8489
// ruConvoySquad := ruConvoySquad diff newId ;
8473: LD_ADDR_EXP 41
8477: PUSH
8478: LD_EXP 41
8482: PUSH
8483: LD_VAR 0 1
8487: DIFF
8488: ST_TO_ADDR
// end ; end_of_file
8489: PPOPN 4
8491: END
// export function Action ; var i , p , un , veh , tmp ; begin
8492: LD_INT 0
8494: PPUSH
8495: PPUSH
8496: PPUSH
8497: PPUSH
8498: PPUSH
8499: PPUSH
// InGameOn ;
8500: CALL_OW 8
// music_nat := 2 ;
8504: LD_ADDR_OWVAR 71
8508: PUSH
8509: LD_INT 2
8511: ST_TO_ADDR
// music_class := music_recon ;
8512: LD_ADDR_OWVAR 72
8516: PUSH
8517: LD_INT 3
8519: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8520: LD_INT 7
8522: PPUSH
8523: LD_INT 6
8525: PPUSH
8526: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8530: LD_INT 7
8532: PPUSH
8533: LD_INT 6
8535: PPUSH
8536: LD_INT 2
8538: PPUSH
8539: LD_INT 30
8541: NEG
8542: PPUSH
8543: CALL 1165 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8547: LD_ADDR_VAR 0 6
8551: PUSH
8552: LD_EXP 21
8556: PUSH
8557: LD_EXP 22
8561: PUSH
8562: LD_EXP 23
8566: PUSH
8567: LD_EXP 24
8571: PUSH
8572: LD_EXP 25
8576: PUSH
8577: LD_EXP 26
8581: PUSH
8582: LD_EXP 28
8586: PUSH
8587: LD_EXP 33
8591: PUSH
8592: LD_EXP 27
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: ST_TO_ADDR
// tmp := tmp diff 0 ;
8608: LD_ADDR_VAR 0 6
8612: PUSH
8613: LD_VAR 0 6
8617: PUSH
8618: LD_INT 0
8620: DIFF
8621: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8622: LD_ADDR_VAR 0 6
8626: PUSH
8627: LD_VAR 0 6
8631: PPUSH
8632: LD_INT 3
8634: PPUSH
8635: CALL 74505 0 2
8639: ST_TO_ADDR
// for i in heikeVehicles do
8640: LD_ADDR_VAR 0 2
8644: PUSH
8645: LD_EXP 35
8649: PUSH
8650: FOR_IN
8651: IFFALSE 8850
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8653: LD_INT 5
8655: PPUSH
8656: LD_VAR 0 2
8660: PUSH
8661: LD_INT 5
8663: ARRAY
8664: PPUSH
8665: LD_VAR 0 2
8669: PUSH
8670: LD_INT 1
8672: ARRAY
8673: PPUSH
8674: LD_VAR 0 2
8678: PUSH
8679: LD_INT 2
8681: ARRAY
8682: PPUSH
8683: LD_VAR 0 2
8687: PUSH
8688: LD_INT 3
8690: ARRAY
8691: PPUSH
8692: LD_VAR 0 2
8696: PUSH
8697: LD_INT 4
8699: ARRAY
8700: PPUSH
8701: LD_INT 34
8703: PPUSH
8704: CALL 453 0 7
// veh := CreateVehicle ;
8708: LD_ADDR_VAR 0 5
8712: PUSH
8713: CALL_OW 45
8717: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8718: LD_VAR 0 2
8722: PUSH
8723: LD_INT 4
8725: ARRAY
8726: PUSH
8727: LD_INT 51
8729: PUSH
8730: LD_INT 32
8732: PUSH
8733: LD_INT 12
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: LIST
8740: IN
8741: IFFALSE 8821
// begin if i [ 7 ] [ 1 ] then
8743: LD_VAR 0 2
8747: PUSH
8748: LD_INT 7
8750: ARRAY
8751: PUSH
8752: LD_INT 1
8754: ARRAY
8755: IFFALSE 8782
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8757: LD_VAR 0 5
8761: PPUSH
8762: LD_INT 1
8764: PPUSH
8765: LD_VAR 0 2
8769: PUSH
8770: LD_INT 7
8772: ARRAY
8773: PUSH
8774: LD_INT 1
8776: ARRAY
8777: PPUSH
8778: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8782: LD_VAR 0 2
8786: PUSH
8787: LD_INT 7
8789: ARRAY
8790: PUSH
8791: LD_INT 2
8793: ARRAY
8794: IFFALSE 8821
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8796: LD_VAR 0 5
8800: PPUSH
8801: LD_INT 2
8803: PPUSH
8804: LD_VAR 0 2
8808: PUSH
8809: LD_INT 7
8811: ARRAY
8812: PUSH
8813: LD_INT 2
8815: ARRAY
8816: PPUSH
8817: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8821: LD_VAR 0 5
8825: PPUSH
8826: LD_INT 2
8828: PPUSH
8829: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8833: LD_VAR 0 5
8837: PPUSH
8838: LD_INT 4
8840: PPUSH
8841: LD_INT 0
8843: PPUSH
8844: CALL_OW 49
// end ;
8848: GO 8650
8850: POP
8851: POP
// if tmp then
8852: LD_VAR 0 6
8856: IFFALSE 8968
// begin p := 0 ;
8858: LD_ADDR_VAR 0 3
8862: PUSH
8863: LD_INT 0
8865: ST_TO_ADDR
// for i in tmp do
8866: LD_ADDR_VAR 0 2
8870: PUSH
8871: LD_VAR 0 6
8875: PUSH
8876: FOR_IN
8877: IFFALSE 8966
// begin p := p + 1 ;
8879: LD_ADDR_VAR 0 3
8883: PUSH
8884: LD_VAR 0 3
8888: PUSH
8889: LD_INT 1
8891: PLUS
8892: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8893: LD_VAR 0 2
8897: PPUSH
8898: LD_INT 5
8900: PPUSH
8901: LD_INT 0
8903: PPUSH
8904: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8908: LD_VAR 0 2
8912: PPUSH
8913: LD_INT 26
8915: PPUSH
8916: LD_INT 9
8918: PPUSH
8919: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8923: LD_VAR 0 3
8927: PUSH
8928: LD_EXP 35
8932: GREATEREQUAL
8933: IFFALSE 8950
8935: PUSH
8936: LD_VAR 0 2
8940: PPUSH
8941: CALL_OW 257
8945: PUSH
8946: LD_INT 3
8948: EQUAL
8949: AND
8950: IFFALSE 8964
// SetClass ( i , 1 ) ;
8952: LD_VAR 0 2
8956: PPUSH
8957: LD_INT 1
8959: PPUSH
8960: CALL_OW 336
// end ;
8964: GO 8876
8966: POP
8967: POP
// end ; if heikeSecondSquad then
8968: LD_EXP 34
8972: IFFALSE 9076
// for i in heikeSecondSquad do
8974: LD_ADDR_VAR 0 2
8978: PUSH
8979: LD_EXP 34
8983: PUSH
8984: FOR_IN
8985: IFFALSE 9074
// begin p := p + 1 ;
8987: LD_ADDR_VAR 0 3
8991: PUSH
8992: LD_VAR 0 3
8996: PUSH
8997: LD_INT 1
8999: PLUS
9000: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
9001: LD_VAR 0 2
9005: PPUSH
9006: LD_INT 6
9008: PPUSH
9009: LD_INT 0
9011: PPUSH
9012: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
9016: LD_VAR 0 2
9020: PPUSH
9021: LD_INT 26
9023: PPUSH
9024: LD_INT 9
9026: PPUSH
9027: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
9031: LD_VAR 0 3
9035: PUSH
9036: LD_EXP 35
9040: GREATEREQUAL
9041: IFFALSE 9058
9043: PUSH
9044: LD_VAR 0 2
9048: PPUSH
9049: CALL_OW 257
9053: PUSH
9054: LD_INT 3
9056: EQUAL
9057: AND
9058: IFFALSE 9072
// SetClass ( i , 1 ) ;
9060: LD_VAR 0 2
9064: PPUSH
9065: LD_INT 1
9067: PPUSH
9068: CALL_OW 336
// end ;
9072: GO 8984
9074: POP
9075: POP
// if heikeApes then
9076: LD_EXP 36
9080: IFFALSE 9123
// for i in heikeApes do
9082: LD_ADDR_VAR 0 2
9086: PUSH
9087: LD_EXP 36
9091: PUSH
9092: FOR_IN
9093: IFFALSE 9121
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
9095: LD_VAR 0 2
9099: PPUSH
9100: LD_INT 7
9102: PPUSH
9103: LD_INT 0
9105: PPUSH
9106: CALL_OW 49
// ComHold ( i ) ;
9110: LD_VAR 0 2
9114: PPUSH
9115: CALL_OW 140
// end ;
9119: GO 9092
9121: POP
9122: POP
// if Kurt then
9123: LD_EXP 32
9127: IFFALSE 9159
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
9129: LD_EXP 32
9133: PPUSH
9134: LD_INT 8
9136: PPUSH
9137: LD_INT 0
9139: PPUSH
9140: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
9144: LD_EXP 32
9148: PPUSH
9149: LD_INT 42
9151: PPUSH
9152: LD_INT 32
9154: PPUSH
9155: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
9159: LD_INT 70
9161: PPUSH
9162: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
9166: LD_EXP 21
9170: PPUSH
9171: LD_STRING DH-Start-1
9173: PPUSH
9174: CALL_OW 88
// if Givi then
9178: LD_EXP 22
9182: IFFALSE 9445
// begin Say ( Givi , DG-Start-2-5 ) ;
9184: LD_EXP 22
9188: PPUSH
9189: LD_STRING DG-Start-2-5
9191: PPUSH
9192: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
9196: LD_EXP 21
9200: PPUSH
9201: LD_STRING DH-Start-3
9203: PPUSH
9204: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9208: LD_EXP 21
9212: PPUSH
9213: LD_STRING DH-Start-4
9215: PPUSH
9216: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
9220: LD_EXP 22
9224: PPUSH
9225: LD_STRING DG-Start-5
9227: PPUSH
9228: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
9232: LD_EXP 21
9236: PPUSH
9237: LD_STRING DH-Start-6
9239: PPUSH
9240: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
9244: LD_EXP 22
9248: PPUSH
9249: LD_STRING DG-Start-7
9251: PPUSH
9252: CALL_OW 88
// if Mike then
9256: LD_EXP 23
9260: IFFALSE 9433
// begin Say ( Mike , DM-Start-8 ) ;
9262: LD_EXP 23
9266: PPUSH
9267: LD_STRING DM-Start-8
9269: PPUSH
9270: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
9274: LD_EXP 23
9278: PPUSH
9279: LD_STRING DM-Start-9
9281: PPUSH
9282: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
9286: LD_EXP 22
9290: PPUSH
9291: LD_STRING DG-Start-10
9293: PPUSH
9294: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
9298: LD_EXP 22
9302: PPUSH
9303: LD_STRING DG-Start-11
9305: PPUSH
9306: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
9310: LD_EXP 21
9314: PPUSH
9315: LD_STRING DH-Start-12
9317: PPUSH
9318: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
9322: LD_EXP 22
9326: PPUSH
9327: LD_STRING DG-Start-13
9329: PPUSH
9330: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
9334: LD_EXP 22
9338: PPUSH
9339: LD_STRING DG-Start-14
9341: PPUSH
9342: CALL_OW 88
// if Kaia then
9346: LD_EXP 26
9350: IFFALSE 9433
// begin Say ( Kaia , DK-Start-15 ) ;
9352: LD_EXP 26
9356: PPUSH
9357: LD_STRING DK-Start-15
9359: PPUSH
9360: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
9364: LD_EXP 26
9368: PPUSH
9369: LD_STRING DK-Start-16
9371: PPUSH
9372: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
9376: LD_EXP 26
9380: PPUSH
9381: LD_STRING DK-Start-17
9383: PPUSH
9384: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9388: LD_INT 10
9390: PPUSH
9391: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9395: LD_EXP 22
9399: PPUSH
9400: LD_EXP 26
9404: PPUSH
9405: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9409: LD_EXP 22
9413: PPUSH
9414: LD_STRING DG-Start-18
9416: PPUSH
9417: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9421: LD_EXP 26
9425: PPUSH
9426: LD_STRING DK-Start-19
9428: PPUSH
9429: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9433: LD_EXP 21
9437: PPUSH
9438: LD_STRING DH-Start-20
9440: PPUSH
9441: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9445: LD_INT 70
9447: PPUSH
9448: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9452: LD_EXP 29
9456: PPUSH
9457: LD_STRING DShar-Start-21
9459: PPUSH
9460: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9464: LD_EXP 21
9468: PPUSH
9469: LD_STRING DH-Start-22
9471: PPUSH
9472: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9476: LD_EXP 29
9480: PPUSH
9481: LD_STRING DShar-Start-23
9483: PPUSH
9484: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9488: LD_EXP 29
9492: PPUSH
9493: LD_STRING DShar-Start-24
9495: PPUSH
9496: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9500: LD_EXP 29
9504: PPUSH
9505: LD_STRING DShar-Start-25
9507: PPUSH
9508: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9512: LD_EXP 29
9516: PPUSH
9517: LD_STRING DShar-Start-26
9519: PPUSH
9520: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9524: LD_EXP 21
9528: PPUSH
9529: LD_STRING DH-Start-27
9531: PPUSH
9532: CALL_OW 88
// if Kaia then
9536: LD_EXP 26
9540: IFFALSE 9582
// begin ComTurnUnit ( Heike , Kaia ) ;
9542: LD_EXP 21
9546: PPUSH
9547: LD_EXP 26
9551: PPUSH
9552: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9556: LD_EXP 26
9560: PPUSH
9561: LD_STRING DK-Start-28
9563: PPUSH
9564: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9568: LD_EXP 21
9572: PPUSH
9573: LD_STRING DH-Start-29
9575: PPUSH
9576: CALL_OW 88
// end else
9580: GO 9594
// Say ( Heike , DH-Start-a-28 ) ;
9582: LD_EXP 21
9586: PPUSH
9587: LD_STRING DH-Start-a-28
9589: PPUSH
9590: CALL_OW 88
// if Givi then
9594: LD_EXP 22
9598: IFFALSE 9835
// begin ComTurnUnit ( Heike , Givi ) ;
9600: LD_EXP 21
9604: PPUSH
9605: LD_EXP 22
9609: PPUSH
9610: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9614: LD_EXP 22
9618: PPUSH
9619: LD_EXP 21
9623: PPUSH
9624: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9628: LD_EXP 21
9632: PPUSH
9633: LD_STRING DH-Start-30
9635: PPUSH
9636: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9640: LD_EXP 21
9644: PPUSH
9645: LD_STRING DH-Start-31
9647: PPUSH
9648: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9652: LD_EXP 22
9656: PPUSH
9657: LD_STRING DG-Start-32
9659: PPUSH
9660: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9664: LD_EXP 21
9668: PPUSH
9669: LD_STRING DH-Start-33
9671: PPUSH
9672: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9676: LD_EXP 22
9680: PPUSH
9681: LD_STRING DG-Start-34
9683: PPUSH
9684: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9688: LD_EXP 22
9692: PPUSH
9693: LD_STRING DG-Start-35
9695: PPUSH
9696: CALL_OW 88
// if Kurt and not dialogue_skipped then
9700: LD_EXP 32
9704: IFFALSE 9713
9706: PUSH
9707: LD_OWVAR 59
9711: NOT
9712: AND
9713: IFFALSE 9744
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9715: LD_EXP 32
9719: PPUSH
9720: LD_INT 28
9722: PPUSH
9723: LD_INT 13
9725: PPUSH
9726: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9730: LD_EXP 32
9734: PPUSH
9735: LD_EXP 21
9739: PPUSH
9740: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9744: LD_EXP 22
9748: PPUSH
9749: LD_STRING DG-Start-36
9751: PPUSH
9752: CALL_OW 88
// if Kurt then
9756: LD_EXP 32
9760: IFFALSE 9833
// begin if not Givi then
9762: LD_EXP 22
9766: NOT
9767: IFFALSE 9783
// Say ( Kurt , DKs-Start-37-a ) else
9769: LD_EXP 32
9773: PPUSH
9774: LD_STRING DKs-Start-37-a
9776: PPUSH
9777: CALL_OW 88
9781: GO 9795
// Say ( Kurt , DKs-Start-37 ) ;
9783: LD_EXP 32
9787: PPUSH
9788: LD_STRING DKs-Start-37
9790: PPUSH
9791: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9795: LD_EXP 32
9799: PPUSH
9800: LD_STRING DKs-Start-38
9802: PPUSH
9803: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9807: LD_EXP 21
9811: PPUSH
9812: LD_EXP 32
9816: PPUSH
9817: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9821: LD_EXP 21
9825: PPUSH
9826: LD_STRING DH-Start-39
9828: PPUSH
9829: CALL_OW 88
// end ; end else
9833: GO 9864
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9835: LD_EXP 34
9839: PPUSH
9840: LD_STRING DArm-Start-a-37
9842: PPUSH
9843: LD_STRING DArf-Start-a-37
9845: PPUSH
9846: CALL 1216 0 3
9850: IFFALSE 9864
// Say ( Heike , DH-Start-39 ) ;
9852: LD_EXP 21
9856: PPUSH
9857: LD_STRING DH-Start-39
9859: PPUSH
9860: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9864: LD_INT 44
9866: PPUSH
9867: LD_INT 25
9869: PPUSH
9870: CALL_OW 428
9874: IFFALSE 9891
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9876: LD_INT 44
9878: PPUSH
9879: LD_INT 25
9881: PPUSH
9882: CALL_OW 428
9886: PPUSH
9887: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9891: LD_EXP 30
9895: PPUSH
9896: LD_INT 5
9898: PPUSH
9899: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9903: LD_EXP 30
9907: PPUSH
9908: LD_INT 44
9910: PPUSH
9911: LD_INT 25
9913: PPUSH
9914: LD_INT 0
9916: PPUSH
9917: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9921: LD_EXP 30
9925: PPUSH
9926: LD_INT 29
9928: PPUSH
9929: LD_INT 12
9931: PPUSH
9932: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9936: LD_INT 35
9938: PPUSH
9939: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9943: LD_OWVAR 59
9947: IFTRUE 9969
9949: PUSH
9950: LD_EXP 21
9954: PPUSH
9955: LD_EXP 30
9959: PPUSH
9960: CALL_OW 296
9964: PUSH
9965: LD_INT 8
9967: LESS
9968: OR
9969: IFTRUE 9992
9971: PUSH
9972: LD_EXP 30
9976: PPUSH
9977: LD_INT 26
9979: PPUSH
9980: LD_INT 9
9982: PPUSH
9983: CALL_OW 297
9987: PUSH
9988: LD_INT 6
9990: LESS
9991: OR
9992: IFFALSE 9936
// Say ( Olaf , DO-Scout-1 ) ;
9994: LD_EXP 30
9998: PPUSH
9999: LD_STRING DO-Scout-1
10001: PPUSH
10002: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
10006: LD_EXP 30
10010: PPUSH
10011: LD_EXP 21
10015: PPUSH
10016: CALL_OW 119
// for i in tmp union heikeSecondSquad do
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_VAR 0 6
10029: PUSH
10030: LD_EXP 34
10034: UNION
10035: PUSH
10036: FOR_IN
10037: IFFALSE 10055
// ComTurnUnit ( i , Olaf ) ;
10039: LD_VAR 0 2
10043: PPUSH
10044: LD_EXP 30
10048: PPUSH
10049: CALL_OW 119
10053: GO 10036
10055: POP
10056: POP
// wait ( 0 0$0.3 ) ;
10057: LD_INT 10
10059: PPUSH
10060: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
10064: LD_EXP 21
10068: PPUSH
10069: LD_EXP 30
10073: PPUSH
10074: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
10078: LD_EXP 21
10082: PPUSH
10083: LD_EXP 30
10087: PPUSH
10088: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
10092: LD_EXP 21
10096: PPUSH
10097: LD_STRING DH-Scout-2
10099: PPUSH
10100: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
10104: LD_EXP 30
10108: PPUSH
10109: LD_STRING DO-Scout-3
10111: PPUSH
10112: CALL_OW 88
// if Mike and Givi then
10116: LD_EXP 23
10120: IFFALSE 10128
10122: PUSH
10123: LD_EXP 22
10127: AND
10128: IFFALSE 10144
// Say ( Olaf , DO-Scout-4 ) else
10130: LD_EXP 30
10134: PPUSH
10135: LD_STRING DO-Scout-4
10137: PPUSH
10138: CALL_OW 88
10142: GO 10244
// begin if Mike then
10144: LD_EXP 23
10148: IFFALSE 10176
// begin Say ( Olaf , DO-Scout-a-4 ) ;
10150: LD_EXP 30
10154: PPUSH
10155: LD_STRING DO-Scout-a-4
10157: PPUSH
10158: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
10162: LD_EXP 21
10166: PPUSH
10167: LD_STRING DH-Scout-a-5
10169: PPUSH
10170: CALL_OW 88
// end else
10174: GO 10244
// if Givi then
10176: LD_EXP 22
10180: IFFALSE 10208
// begin Say ( Olaf , DO-Scout-b-4 ) ;
10182: LD_EXP 30
10186: PPUSH
10187: LD_STRING DO-Scout-b-4
10189: PPUSH
10190: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
10194: LD_EXP 21
10198: PPUSH
10199: LD_STRING DH-Scout-b-5
10201: PPUSH
10202: CALL_OW 88
// end else
10206: GO 10244
// begin Say ( Olaf , DO-Scout-f-4 ) ;
10208: LD_EXP 30
10212: PPUSH
10213: LD_STRING DO-Scout-f-4
10215: PPUSH
10216: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
10220: LD_EXP 21
10224: PPUSH
10225: LD_STRING DH-Scout-f-5
10227: PPUSH
10228: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
10232: LD_EXP 30
10236: PPUSH
10237: LD_STRING DO-Scout-f-6
10239: PPUSH
10240: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
10244: LD_EXP 21
10248: PPUSH
10249: LD_STRING DH-Scout-5
10251: PPUSH
10252: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
10256: LD_EXP 30
10260: PPUSH
10261: LD_STRING DO-Scout-6
10263: PPUSH
10264: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
10268: LD_EXP 30
10272: PPUSH
10273: LD_STRING DO-Scout-7
10275: PPUSH
10276: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
10280: LD_EXP 21
10284: PPUSH
10285: LD_STRING DH-Scout-8
10287: PPUSH
10288: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
10292: LD_EXP 21
10296: PPUSH
10297: LD_STRING DH-Scout-9
10299: PPUSH
10300: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
10304: LD_EXP 30
10308: PPUSH
10309: LD_STRING DO-Scout-10
10311: PPUSH
10312: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
10316: LD_EXP 30
10320: PPUSH
10321: LD_STRING DO-Scout-12
10323: PPUSH
10324: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
10328: LD_EXP 30
10332: PPUSH
10333: LD_STRING DO-Scout-13
10335: PPUSH
10336: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
10340: LD_EXP 30
10344: PPUSH
10345: LD_STRING DO-Scout-14
10347: PPUSH
10348: CALL_OW 88
// if Givi then
10352: LD_EXP 22
10356: IFFALSE 10382
// begin Say ( Givi , DG-Scout-15 ) ;
10358: LD_EXP 22
10362: PPUSH
10363: LD_STRING DG-Scout-15
10365: PPUSH
10366: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
10370: LD_EXP 26
10374: PPUSH
10375: LD_STRING DK-Scout-16
10377: PPUSH
10378: CALL_OW 88
// end ; if not dialogue_skipped then
10382: LD_OWVAR 59
10386: NOT
10387: IFFALSE 10508
// begin async ;
10389: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10390: LD_EXP 30
10394: PPUSH
10395: LD_STRING DO-Scout-17
10397: PPUSH
10398: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10402: LD_INT 55
10404: PPUSH
10405: LD_INT 77
10407: PPUSH
10408: LD_INT 2
10410: PPUSH
10411: LD_INT 6
10413: NEG
10414: PPUSH
10415: CALL 1165 0 4
// wait ( 10 ) ;
10419: LD_INT 10
10421: PPUSH
10422: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10426: LD_INT 55
10428: PPUSH
10429: LD_INT 77
10431: PPUSH
10432: CALL_OW 84
// wait ( 0 0$10 ) ;
10436: LD_INT 350
10438: PPUSH
10439: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10443: LD_EXP 30
10447: PPUSH
10448: LD_STRING DO-Scout-18
10450: PPUSH
10451: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10455: LD_INT 204
10457: PPUSH
10458: LD_INT 107
10460: PPUSH
10461: LD_INT 2
10463: PPUSH
10464: LD_INT 12
10466: NEG
10467: PPUSH
10468: CALL 1165 0 4
// wait ( 10 ) ;
10472: LD_INT 10
10474: PPUSH
10475: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10479: LD_INT 204
10481: PPUSH
10482: LD_INT 107
10484: PPUSH
10485: CALL_OW 84
// wait ( 0 0$10 ) ;
10489: LD_INT 350
10491: PPUSH
10492: CALL_OW 67
// sync ;
10496: SYNC
// CenterNowOnUnits ( Heike ) ;
10497: LD_EXP 21
10501: PPUSH
10502: CALL_OW 87
// end else
10506: GO 10542
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10508: LD_INT 55
10510: PPUSH
10511: LD_INT 77
10513: PPUSH
10514: LD_INT 2
10516: PPUSH
10517: LD_INT 6
10519: NEG
10520: PPUSH
10521: CALL 1165 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10525: LD_INT 204
10527: PPUSH
10528: LD_INT 107
10530: PPUSH
10531: LD_INT 2
10533: PPUSH
10534: LD_INT 12
10536: NEG
10537: PPUSH
10538: CALL 1165 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10542: LD_EXP 30
10546: PPUSH
10547: LD_STRING DO-Scout-19
10549: PPUSH
10550: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10554: LD_EXP 30
10558: PPUSH
10559: LD_STRING DO-Scout-20
10561: PPUSH
10562: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10566: LD_EXP 21
10570: PPUSH
10571: LD_STRING DH-Scout-21
10573: PPUSH
10574: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10578: LD_EXP 21
10582: PPUSH
10583: LD_STRING DH-Scout-22
10585: PPUSH
10586: CALL_OW 88
// InGameOff ;
10590: CALL_OW 9
// if heikeSecondSquad then
10594: LD_EXP 34
10598: IFFALSE 10612
// ForceSleep ( heikeSecondSquad , false ) ;
10600: LD_EXP 34
10604: PPUSH
10605: LD_INT 0
10607: PPUSH
10608: CALL_OW 585
// if Givi then
10612: LD_EXP 22
10616: IFFALSE 10631
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10618: LD_INT 13
10620: PPUSH
10621: LD_INT 2
10623: PPUSH
10624: LD_INT 1
10626: PPUSH
10627: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10631: LD_STRING Road
10633: PPUSH
10634: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10638: LD_ADDR_VAR 0 2
10642: PUSH
10643: LD_INT 22
10645: PUSH
10646: LD_INT 5
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 21
10655: PUSH
10656: LD_INT 2
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PPUSH
10667: CALL_OW 69
10671: PUSH
10672: FOR_IN
10673: IFFALSE 10689
// SetSide ( i , 2 ) ;
10675: LD_VAR 0 2
10679: PPUSH
10680: LD_INT 2
10682: PPUSH
10683: CALL_OW 235
10687: GO 10672
10689: POP
10690: POP
// SaveForQuickRestart ;
10691: CALL_OW 22
// music_class := music_auto ;
10695: LD_ADDR_OWVAR 72
10699: PUSH
10700: LD_INT 0
10702: ST_TO_ADDR
// end ;
10703: LD_VAR 0 1
10707: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10708: LD_INT 2
10710: PPUSH
10711: LD_INT 9
10713: PPUSH
10714: CALL_OW 294
10718: IFFALSE 11083
10720: GO 10722
10722: DISABLE
// begin DialogueOn ;
10723: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10727: LD_INT 111
10729: PPUSH
10730: LD_INT 72
10732: PPUSH
10733: LD_INT 2
10735: PPUSH
10736: LD_INT 20
10738: NEG
10739: PPUSH
10740: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10744: LD_INT 111
10746: PPUSH
10747: LD_INT 72
10749: PPUSH
10750: LD_INT 2
10752: PPUSH
10753: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10757: LD_INT 111
10759: PPUSH
10760: LD_INT 72
10762: PPUSH
10763: CALL_OW 86
// if IsOk ( Kamil ) then
10767: LD_EXP 25
10771: PPUSH
10772: CALL_OW 302
10776: IFFALSE 10893
// begin Say ( Kamil , DKam-Cross-1 ) ;
10778: LD_EXP 25
10782: PPUSH
10783: LD_STRING DKam-Cross-1
10785: PPUSH
10786: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10790: LD_EXP 25
10794: PPUSH
10795: LD_STRING DKam-Cross-2
10797: PPUSH
10798: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10802: LD_EXP 25
10806: PPUSH
10807: LD_STRING DKam-Cross-3
10809: PPUSH
10810: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10814: LD_EXP 25
10818: PPUSH
10819: LD_STRING DKam-Cross-4
10821: PPUSH
10822: CALL_OW 88
// if IsOk ( Ibrahim ) then
10826: LD_EXP 24
10830: PPUSH
10831: CALL_OW 302
10835: IFFALSE 10891
// begin if ibrahimJoinedIn04 then
10837: LD_EXP 4
10841: IFFALSE 10855
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10843: LD_EXP 24
10847: PPUSH
10848: LD_STRING DI-Cross-b-5
10850: PPUSH
10851: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10855: LD_EXP 24
10859: PPUSH
10860: LD_STRING DI-Cross-b-6
10862: PPUSH
10863: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10867: LD_EXP 24
10871: PPUSH
10872: LD_STRING DI-Cross-b-7
10874: PPUSH
10875: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10879: LD_EXP 25
10883: PPUSH
10884: LD_STRING DKam-Cross-8
10886: PPUSH
10887: CALL_OW 88
// end ; end else
10891: GO 11051
// if IsOk ( Sophia ) then
10893: LD_EXP 27
10897: PPUSH
10898: CALL_OW 302
10902: IFFALSE 11019
// begin Say ( Sophia , DS-Cross-1 ) ;
10904: LD_EXP 27
10908: PPUSH
10909: LD_STRING DS-Cross-1
10911: PPUSH
10912: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10916: LD_EXP 27
10920: PPUSH
10921: LD_STRING DS-Cross-2
10923: PPUSH
10924: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10928: LD_EXP 27
10932: PPUSH
10933: LD_STRING DS-Cross-3
10935: PPUSH
10936: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10940: LD_EXP 27
10944: PPUSH
10945: LD_STRING DS-Cross-4
10947: PPUSH
10948: CALL_OW 88
// if IsOk ( Ibrahim ) then
10952: LD_EXP 24
10956: PPUSH
10957: CALL_OW 302
10961: IFFALSE 11017
// begin if ibrahimJoinedIn04 then
10963: LD_EXP 4
10967: IFFALSE 10981
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10969: LD_EXP 24
10973: PPUSH
10974: LD_STRING DI-Cross-b-5
10976: PPUSH
10977: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10981: LD_EXP 24
10985: PPUSH
10986: LD_STRING DI-Cross-b-6
10988: PPUSH
10989: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10993: LD_EXP 24
10997: PPUSH
10998: LD_STRING DI-Cross-b-7
11000: PPUSH
11001: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
11005: LD_EXP 27
11009: PPUSH
11010: LD_STRING DS-Cross-8
11012: PPUSH
11013: CALL_OW 88
// end ; end else
11017: GO 11051
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
11019: LD_EXP 34
11023: PPUSH
11024: LD_INT 50
11026: PUSH
11027: EMPTY
11028: LIST
11029: PPUSH
11030: CALL_OW 72
11034: IFFALSE 11051
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
11036: LD_EXP 34
11040: PPUSH
11041: LD_STRING DArm-Cross-c-1
11043: PPUSH
11044: LD_STRING DArf-Cross-c-1
11046: PPUSH
11047: CALL 1216 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
11051: LD_INT 85
11053: PPUSH
11054: LD_INT 2
11056: PPUSH
11057: LD_INT 1
11059: PPUSH
11060: CALL_OW 322
// DialogueOff ;
11064: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
11068: LD_STRING Crane
11070: PPUSH
11071: CALL_OW 337
// spottedCrossRoad := true ;
11075: LD_ADDR_EXP 8
11079: PUSH
11080: LD_INT 1
11082: ST_TO_ADDR
// end ;
11083: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
11084: LD_INT 22
11086: PUSH
11087: LD_INT 2
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 2
11096: PUSH
11097: LD_INT 30
11099: PUSH
11100: LD_INT 0
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 30
11109: PUSH
11110: LD_INT 1
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: LIST
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PPUSH
11126: CALL_OW 69
11130: IFFALSE 11151
11132: PUSH
11133: LD_EXP 26
11137: PPUSH
11138: CALL_OW 302
11142: IFTRUE 11150
11144: PUSH
11145: LD_EXP 34
11149: OR
11150: AND
11151: IFFALSE 11363
11153: GO 11155
11155: DISABLE
// begin DialogueOn ;
11156: CALL_OW 6
// if Kaia then
11160: LD_EXP 26
11164: IFFALSE 11177
// CenterNowOnUnits ( Kaia ) else
11166: LD_EXP 26
11170: PPUSH
11171: CALL_OW 87
11175: GO 11186
// CenterNowOnUnits ( Heike ) ;
11177: LD_EXP 21
11181: PPUSH
11182: CALL_OW 87
// if IsOk ( Kaia ) then
11186: LD_EXP 26
11190: PPUSH
11191: CALL_OW 302
11195: IFFALSE 11211
// Say ( Kaia , DK-Cam-1 ) else
11197: LD_EXP 26
11201: PPUSH
11202: LD_STRING DK-Cam-1
11204: PPUSH
11205: CALL_OW 88
11209: GO 11226
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
11211: LD_EXP 34
11215: PPUSH
11216: LD_STRING DArm-Cam-1
11218: PPUSH
11219: LD_STRING DArf-Cam-1
11221: PPUSH
11222: CALL 1216 0 3
// Say ( Heike , DH-Cam-2 ) ;
11226: LD_EXP 21
11230: PPUSH
11231: LD_STRING DH-Cam-2
11233: PPUSH
11234: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
11238: LD_EXP 21
11242: PPUSH
11243: LD_STRING DH-Cam-3
11245: PPUSH
11246: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11250: LD_EXP 21
11254: PPUSH
11255: LD_STRING DH-Cam-4
11257: PPUSH
11258: CALL_OW 88
// if IsOk ( Kaia ) then
11262: LD_EXP 26
11266: PPUSH
11267: CALL_OW 302
11271: IFFALSE 11287
// Say ( Kaia , DK-Cam-5 ) else
11273: LD_EXP 26
11277: PPUSH
11278: LD_STRING DK-Cam-5
11280: PPUSH
11281: CALL_OW 88
11285: GO 11302
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
11287: LD_EXP 34
11291: PPUSH
11292: LD_STRING DArm-Cam-5
11294: PPUSH
11295: LD_STRING DArf-Cam-5
11297: PPUSH
11298: CALL 1216 0 3
// Say ( Olaf , DO-Cam-6 ) ;
11302: LD_EXP 30
11306: PPUSH
11307: LD_STRING DO-Cam-6
11309: PPUSH
11310: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
11314: LD_EXP 30
11318: PPUSH
11319: LD_STRING DO-Cam-7
11321: PPUSH
11322: CALL_OW 88
// DialogueOff ;
11326: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
11330: LD_STRING Radar
11332: PPUSH
11333: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
11337: LD_INT 6
11339: PPUSH
11340: LD_INT 2
11342: PPUSH
11343: LD_INT 1
11345: PPUSH
11346: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
11350: LD_INT 20
11352: PPUSH
11353: LD_INT 2
11355: PPUSH
11356: LD_INT 1
11358: PPUSH
11359: CALL_OW 324
// end ;
11363: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
11364: LD_INT 22
11366: PUSH
11367: LD_INT 2
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: PUSH
11374: LD_INT 2
11376: PUSH
11377: LD_INT 34
11379: PUSH
11380: LD_INT 30
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 35
11389: PUSH
11390: LD_INT 30
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: LIST
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PPUSH
11406: CALL_OW 69
11410: IFFALSE 11422
11412: GO 11414
11414: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11415: LD_STRING RadarDone
11417: PPUSH
11418: CALL_OW 337
11422: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11423: LD_INT 22
11425: PUSH
11426: LD_INT 2
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 34
11435: PUSH
11436: LD_INT 88
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PPUSH
11447: CALL_OW 69
11451: IFFALSE 11463
11453: GO 11455
11455: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11456: LD_STRING CraneDone
11458: PPUSH
11459: CALL_OW 337
11463: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11464: LD_EXP 30
11468: PPUSH
11469: CALL_OW 302
11473: IFFALSE 11486
11475: PUSH
11476: LD_EXP 33
11480: PPUSH
11481: CALL_OW 302
11485: AND
11486: IFFALSE 11504
11488: PUSH
11489: LD_INT 6
11491: PPUSH
11492: LD_INT 2
11494: PPUSH
11495: CALL_OW 321
11499: PUSH
11500: LD_INT 2
11502: EQUAL
11503: AND
11504: IFFALSE 11539
11506: PUSH
11507: LD_EXP 33
11511: PPUSH
11512: LD_EXP 21
11516: PPUSH
11517: CALL_OW 296
11521: PUSH
11522: LD_INT 10
11524: LESS
11525: IFTRUE 11538
11527: PUSH
11528: LD_EXP 33
11532: PPUSH
11533: CALL_OW 310
11537: OR
11538: AND
11539: IFFALSE 11753
11541: GO 11543
11543: DISABLE
// begin DialogueOn ;
11544: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11548: LD_EXP 33
11552: PPUSH
11553: LD_STRING DA-RC-1
11555: PPUSH
11556: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11560: LD_EXP 33
11564: PPUSH
11565: LD_STRING DA-RC-2
11567: PPUSH
11568: CALL_OW 88
// if IsOk ( Kaia ) then
11572: LD_EXP 26
11576: PPUSH
11577: CALL_OW 302
11581: IFFALSE 11655
// begin Say ( Kaia , DK-RC-3 ) ;
11583: LD_EXP 26
11587: PPUSH
11588: LD_STRING DK-RC-3
11590: PPUSH
11591: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11595: LD_EXP 33
11599: PPUSH
11600: LD_STRING DA-RC-4
11602: PPUSH
11603: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11607: LD_EXP 26
11611: PPUSH
11612: LD_STRING DK-RC-5
11614: PPUSH
11615: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11619: LD_EXP 33
11623: PPUSH
11624: LD_STRING DA-RC-6
11626: PPUSH
11627: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11631: LD_EXP 26
11635: PPUSH
11636: LD_STRING DK-RC-7
11638: PPUSH
11639: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11643: LD_EXP 33
11647: PPUSH
11648: LD_STRING DA-RC-8
11650: PPUSH
11651: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11655: LD_EXP 21
11659: PPUSH
11660: LD_STRING DH-RC-9
11662: PPUSH
11663: CALL_OW 88
// if IsOk ( Markov ) then
11667: LD_EXP 28
11671: PPUSH
11672: CALL_OW 302
11676: IFFALSE 11704
// begin Say ( Markov , DMar-RC-10 ) ;
11678: LD_EXP 28
11682: PPUSH
11683: LD_STRING DMar-RC-10
11685: PPUSH
11686: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11690: LD_EXP 28
11694: PPUSH
11695: LD_STRING DMar-RC-11
11697: PPUSH
11698: CALL_OW 88
// end else
11702: GO 11716
// begin Say ( Olaf , DO-RC-a-10 ) ;
11704: LD_EXP 30
11708: PPUSH
11709: LD_STRING DO-RC-a-10
11711: PPUSH
11712: CALL_OW 88
// end ; DialogueOff ;
11716: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11720: LD_STRING RemoteControl
11722: PPUSH
11723: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11727: LD_INT 15
11729: PPUSH
11730: LD_INT 2
11732: PPUSH
11733: LD_INT 1
11735: PPUSH
11736: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11740: LD_INT 22
11742: PPUSH
11743: LD_INT 2
11745: PPUSH
11746: LD_INT 1
11748: PPUSH
11749: CALL_OW 324
// end ;
11753: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11754: LD_INT 12
11756: PPUSH
11757: LD_INT 22
11759: PUSH
11760: LD_INT 2
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PPUSH
11767: CALL_OW 70
11771: IFFALSE 12140
11773: GO 11775
11775: DISABLE
11776: LD_INT 0
11778: PPUSH
// begin PrepareWestBase ;
11779: CALL 4005 0 0
// westBaseSpotted := true ;
11783: LD_ADDR_EXP 5
11787: PUSH
11788: LD_INT 1
11790: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11791: LD_INT 70
11793: PPUSH
11794: CALL_OW 67
// InGameOn ;
11798: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11802: LD_INT 56
11804: PPUSH
11805: LD_INT 77
11807: PPUSH
11808: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11812: LD_INT 56
11814: PPUSH
11815: LD_INT 77
11817: PPUSH
11818: LD_INT 2
11820: PPUSH
11821: LD_INT 12
11823: NEG
11824: PPUSH
11825: CALL_OW 330
// wait ( 0 0$2 ) ;
11829: LD_INT 70
11831: PPUSH
11832: CALL_OW 67
// DialogueOn ;
11836: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11840: LD_EXP 21
11844: PPUSH
11845: LD_STRING DH-Rbase-1
11847: PPUSH
11848: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11852: LD_EXP 26
11856: PPUSH
11857: LD_STRING DK-Rbase-2
11859: PPUSH
11860: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11864: LD_EXP 26
11868: PPUSH
11869: LD_STRING DK-Rbase-3
11871: PPUSH
11872: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11876: LD_EXP 26
11880: PPUSH
11881: LD_STRING DK-Rbase-4
11883: PPUSH
11884: CALL_OW 88
// DialogueOff ;
11888: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11892: LD_INT 56
11894: PPUSH
11895: LD_INT 77
11897: PPUSH
11898: LD_INT 2
11900: PPUSH
11901: CALL_OW 331
// InGameOff ;
11905: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11909: LD_INT 35
11911: PPUSH
11912: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11916: LD_EXP 42
11920: NOT
11921: IFFALSE 11930
11923: PUSH
11924: LD_EXP 43
11928: NOT
11929: AND
11930: IFFALSE 11909
// wait ( 0 0$2 ) ;
11932: LD_INT 70
11934: PPUSH
11935: CALL_OW 67
// if IsOk ( Kaia ) then
11939: LD_EXP 26
11943: PPUSH
11944: CALL_OW 302
11948: IFFALSE 12063
// begin DialogueOn ;
11950: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11954: LD_INT 56
11956: PPUSH
11957: LD_INT 81
11959: PPUSH
11960: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11964: LD_EXP 26
11968: PPUSH
11969: LD_STRING DK-Rbase-5
11971: PPUSH
11972: CALL_OW 88
// if IsOk ( Givi ) then
11976: LD_EXP 22
11980: PPUSH
11981: CALL_OW 302
11985: IFFALSE 12059
// begin Say ( Givi , DG-Rbase-6 ) ;
11987: LD_EXP 22
11991: PPUSH
11992: LD_STRING DG-Rbase-6
11994: PPUSH
11995: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11999: LD_EXP 22
12003: PPUSH
12004: LD_STRING DG-Rbase-7
12006: PPUSH
12007: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
12011: LD_EXP 26
12015: PPUSH
12016: LD_STRING DK-Rbase-8
12018: PPUSH
12019: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
12023: LD_EXP 22
12027: PPUSH
12028: LD_STRING DG-Rbase-9
12030: PPUSH
12031: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
12035: LD_EXP 22
12039: PPUSH
12040: LD_STRING DG-Rbase-10
12042: PPUSH
12043: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
12047: LD_EXP 26
12051: PPUSH
12052: LD_STRING DK-Rbase-11
12054: PPUSH
12055: CALL_OW 88
// end ; DialogueOff ;
12059: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
12063: LD_ADDR_VAR 0 1
12067: PUSH
12068: LD_INT 12
12070: PPUSH
12071: LD_INT 22
12073: PUSH
12074: LD_INT 3
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 21
12083: PUSH
12084: LD_INT 3
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PPUSH
12095: CALL_OW 70
12099: PUSH
12100: FOR_IN
12101: IFFALSE 12117
// SetSide ( i , 2 ) ;
12103: LD_VAR 0 1
12107: PPUSH
12108: LD_INT 2
12110: PPUSH
12111: CALL_OW 235
12115: GO 12100
12117: POP
12118: POP
// westBaseCaptured := true ;
12119: LD_ADDR_EXP 9
12123: PUSH
12124: LD_INT 1
12126: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
12127: LD_INT 0
12129: PPUSH
12130: LD_INT 2
12132: PPUSH
12133: LD_INT 1
12135: PPUSH
12136: CALL_OW 324
// end ;
12140: PPOPN 1
12142: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
12143: LD_EXP 38
12147: NOT
12148: IFTRUE 12163
12150: PUSH
12151: LD_INT 10
12153: PPUSH
12154: CALL_OW 255
12158: PUSH
12159: LD_INT 2
12161: EQUAL
12162: OR
12163: IFFALSE 12300
12165: GO 12167
12167: DISABLE
// begin DialogueOn ;
12168: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
12172: LD_EXP 21
12176: PPUSH
12177: LD_STRING DH-Goal-1
12179: PPUSH
12180: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
12184: LD_EXP 29
12188: PPUSH
12189: LD_STRING DShar-Goal-2
12191: PPUSH
12192: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
12196: LD_EXP 21
12200: PPUSH
12201: LD_STRING DH-Goal-3
12203: PPUSH
12204: CALL_OW 88
// if reinforcementsAllowed then
12208: LD_EXP 14
12212: IFFALSE 12238
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
12214: LD_EXP 29
12218: PPUSH
12219: LD_STRING DShar-Goal-4
12221: PPUSH
12222: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
12226: LD_EXP 21
12230: PPUSH
12231: LD_STRING DH-Goal-5
12233: PPUSH
12234: CALL_OW 88
// end ; DialogueOff ;
12238: CALL_OW 7
// eastBaseCaptured := true ;
12242: LD_ADDR_EXP 10
12246: PUSH
12247: LD_INT 1
12249: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
12250: LD_STRING BaseCaptured
12252: PPUSH
12253: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
12257: LD_INT 10
12259: PPUSH
12260: LD_INT 2
12262: PPUSH
12263: CALL_OW 235
// if not reinforcementsAllowed then
12267: LD_EXP 14
12271: NOT
12272: IFFALSE 12276
// exit ;
12274: GO 12300
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
12276: LD_INT 21000
12278: PUSH
12279: LD_INT 1050
12281: NEG
12282: PPUSH
12283: LD_INT 1050
12285: PPUSH
12286: CALL_OW 12
12290: PLUS
12291: PPUSH
12292: CALL_OW 67
// PrepareReinforcements ;
12296: CALL 2192 0 0
// end ;
12300: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
12301: LD_INT 22
12303: PUSH
12304: LD_INT 2
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 30
12313: PUSH
12314: LD_INT 13
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PPUSH
12325: CALL_OW 69
12329: IFFALSE 12346
12331: GO 12333
12333: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
12334: LD_EXP 22
12338: PPUSH
12339: LD_STRING DG-Lab-1
12341: PPUSH
12342: CALL_OW 88
// end ;
12346: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
12347: LD_INT 5
12349: PPUSH
12350: LD_INT 2
12352: PPUSH
12353: CALL_OW 321
12357: PUSH
12358: LD_INT 2
12360: EQUAL
12361: IFFALSE 12374
12363: PUSH
12364: LD_EXP 22
12368: PPUSH
12369: CALL_OW 302
12373: AND
12374: IFFALSE 12435
12376: GO 12378
12378: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
12379: LD_EXP 22
12383: PPUSH
12384: LD_STRING DG-Stim-1
12386: PPUSH
12387: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12391: LD_EXP 21
12395: PPUSH
12396: LD_STRING DH-Stim-2
12398: PPUSH
12399: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12403: LD_EXP 22
12407: PPUSH
12408: LD_STRING DG-Stim-3
12410: PPUSH
12411: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12415: LD_EXP 21
12419: PPUSH
12420: LD_STRING DH-Stim-4
12422: PPUSH
12423: CALL_OW 88
// drugsResearched := true ;
12427: LD_ADDR_EXP 11
12431: PUSH
12432: LD_INT 1
12434: ST_TO_ADDR
// end ;
12435: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12436: LD_EXP 11
12440: IFFALSE 12771
12442: GO 12444
12444: DISABLE
12445: LD_INT 0
12447: PPUSH
12448: PPUSH
12449: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12450: LD_ADDR_VAR 0 2
12454: PUSH
12455: LD_EXP 21
12459: PUSH
12460: LD_EXP 22
12464: PUSH
12465: LD_EXP 30
12469: PUSH
12470: LD_EXP 28
12474: PUSH
12475: LD_EXP 26
12479: PUSH
12480: LD_EXP 27
12484: PUSH
12485: LD_EXP 32
12489: PUSH
12490: LD_EXP 25
12494: PUSH
12495: LD_EXP 23
12499: PUSH
12500: LD_EXP 24
12504: PUSH
12505: LD_EXP 33
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12523: LD_ADDR_VAR 0 3
12527: PUSH
12528: LD_STRING H
12530: PUSH
12531: LD_STRING G
12533: PUSH
12534: LD_STRING O
12536: PUSH
12537: LD_STRING Mar
12539: PUSH
12540: LD_STRING K
12542: PUSH
12543: LD_STRING S
12545: PUSH
12546: LD_STRING Ks
12548: PUSH
12549: LD_STRING Kam
12551: PUSH
12552: LD_STRING M
12554: PUSH
12555: LD_STRING I
12557: PUSH
12558: LD_STRING A
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12574: LD_INT 35
12576: PPUSH
12577: CALL_OW 67
// for i := tmp downto 1 do
12581: LD_ADDR_VAR 0 1
12585: PUSH
12586: DOUBLE
12587: LD_VAR 0 2
12591: INC
12592: ST_TO_ADDR
12593: LD_INT 1
12595: PUSH
12596: FOR_DOWNTO
12597: IFFALSE 12762
// if GetLives ( tmp [ i ] ) < 250 and IsPlaced ( tmp [ i ] ) then
12599: LD_VAR 0 2
12603: PUSH
12604: LD_VAR 0 1
12608: ARRAY
12609: PPUSH
12610: CALL_OW 256
12614: PUSH
12615: LD_INT 250
12617: LESS
12618: IFFALSE 12637
12620: PUSH
12621: LD_VAR 0 2
12625: PUSH
12626: LD_VAR 0 1
12630: ARRAY
12631: PPUSH
12632: CALL_OW 305
12636: AND
12637: IFFALSE 12760
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12639: LD_ADDR_EXP 19
12643: PUSH
12644: LD_EXP 19
12648: PUSH
12649: LD_INT 1
12651: PLUS
12652: ST_TO_ADDR
// DialogueOn ;
12653: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12657: LD_VAR 0 2
12661: PUSH
12662: LD_VAR 0 1
12666: ARRAY
12667: PPUSH
12668: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12672: LD_VAR 0 2
12676: PUSH
12677: LD_VAR 0 1
12681: ARRAY
12682: PPUSH
12683: LD_STRING D
12685: PUSH
12686: LD_VAR 0 3
12690: PUSH
12691: LD_VAR 0 1
12695: ARRAY
12696: STR
12697: PUSH
12698: LD_STRING -Stim-a-1
12700: STR
12701: PPUSH
12702: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12706: LD_ADDR_VAR 0 2
12710: PUSH
12711: LD_VAR 0 2
12715: PPUSH
12716: LD_VAR 0 1
12720: PPUSH
12721: CALL_OW 3
12725: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12726: LD_ADDR_VAR 0 3
12730: PUSH
12731: LD_VAR 0 3
12735: PPUSH
12736: LD_VAR 0 1
12740: PPUSH
12741: CALL_OW 3
12745: ST_TO_ADDR
// drugsTested := true ;
12746: LD_ADDR_EXP 6
12750: PUSH
12751: LD_INT 1
12753: ST_TO_ADDR
// DialogueOff ;
12754: CALL_OW 7
// break ;
12758: GO 12762
// end ;
12760: GO 12596
12762: POP
12763: POP
// until not tmp ;
12764: LD_VAR 0 2
12768: NOT
12769: IFFALSE 12574
// end ;
12771: PPOPN 3
12773: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12774: LD_INT 22
12776: PUSH
12777: LD_INT 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: LD_INT 34
12786: PUSH
12787: LD_INT 31
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PPUSH
12798: CALL_OW 69
12802: IFFALSE 12834
12804: PUSH
12805: LD_INT 22
12807: PUSH
12808: LD_INT 2
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 33
12817: PUSH
12818: LD_INT 2
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PPUSH
12829: CALL_OW 69
12833: AND
12834: IFFALSE 12847
12836: GO 12838
12838: DISABLE
// remoteControlConstructed := true ;
12839: LD_ADDR_EXP 12
12843: PUSH
12844: LD_INT 1
12846: ST_TO_ADDR
12847: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12848: LD_EXP 12
12852: IFFALSE 13154
12854: GO 12856
12856: DISABLE
12857: LD_INT 0
12859: PPUSH
12860: PPUSH
12861: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12862: LD_ADDR_VAR 0 2
12866: PUSH
12867: LD_EXP 21
12871: PUSH
12872: LD_EXP 22
12876: PUSH
12877: LD_EXP 30
12881: PUSH
12882: LD_EXP 28
12886: PUSH
12887: LD_EXP 26
12891: PUSH
12892: LD_EXP 27
12896: PUSH
12897: LD_EXP 32
12901: PUSH
12902: LD_EXP 25
12906: PUSH
12907: LD_EXP 23
12911: PUSH
12912: LD_EXP 24
12916: PUSH
12917: LD_EXP 33
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12935: LD_ADDR_VAR 0 3
12939: PUSH
12940: LD_STRING H
12942: PUSH
12943: LD_STRING G
12945: PUSH
12946: LD_STRING O
12948: PUSH
12949: LD_STRING Mar
12951: PUSH
12952: LD_STRING K
12954: PUSH
12955: LD_STRING S
12957: PUSH
12958: LD_STRING Ks
12960: PUSH
12961: LD_STRING Kam
12963: PUSH
12964: LD_STRING M
12966: PUSH
12967: LD_STRING I
12969: PUSH
12970: LD_STRING A
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12986: LD_INT 35
12988: PPUSH
12989: CALL_OW 67
// for i := tmp downto 1 do
12993: LD_ADDR_VAR 0 1
12997: PUSH
12998: DOUBLE
12999: LD_VAR 0 2
13003: INC
13004: ST_TO_ADDR
13005: LD_INT 1
13007: PUSH
13008: FOR_DOWNTO
13009: IFFALSE 13145
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
13011: LD_VAR 0 2
13015: PUSH
13016: LD_VAR 0 1
13020: ARRAY
13021: PPUSH
13022: CALL_OW 257
13026: PUSH
13027: LD_INT 3
13029: EQUAL
13030: IFFALSE 13049
13032: PUSH
13033: LD_VAR 0 2
13037: PUSH
13038: LD_VAR 0 1
13042: ARRAY
13043: PPUSH
13044: CALL_OW 432
13048: AND
13049: IFFALSE 13143
// begin DialogueOn ;
13051: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
13055: LD_VAR 0 2
13059: PUSH
13060: LD_VAR 0 1
13064: ARRAY
13065: PPUSH
13066: LD_STRING D
13068: PUSH
13069: LD_VAR 0 3
13073: PUSH
13074: LD_VAR 0 1
13078: ARRAY
13079: STR
13080: PUSH
13081: LD_STRING -RC-a-1
13083: STR
13084: PPUSH
13085: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
13089: LD_ADDR_VAR 0 2
13093: PUSH
13094: LD_VAR 0 2
13098: PPUSH
13099: LD_VAR 0 1
13103: PPUSH
13104: CALL_OW 3
13108: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
13109: LD_ADDR_VAR 0 3
13113: PUSH
13114: LD_VAR 0 3
13118: PPUSH
13119: LD_VAR 0 1
13123: PPUSH
13124: CALL_OW 3
13128: ST_TO_ADDR
// DialogueOff ;
13129: CALL_OW 7
// remoteControlTested := true ;
13133: LD_ADDR_EXP 7
13137: PUSH
13138: LD_INT 1
13140: ST_TO_ADDR
// break ;
13141: GO 13145
// end ;
13143: GO 13008
13145: POP
13146: POP
// until not tmp ;
13147: LD_VAR 0 2
13151: NOT
13152: IFFALSE 12986
// end ;
13154: PPOPN 3
13156: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
13157: LD_EXP 7
13161: IFFALSE 13174
13163: PUSH
13164: LD_EXP 28
13168: PPUSH
13169: CALL_OW 302
13173: AND
13174: IFFALSE 13203
13176: GO 13178
13178: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
13179: LD_EXP 28
13183: PPUSH
13184: LD_STRING DMar-RC-a-2
13186: PPUSH
13187: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
13191: LD_EXP 28
13195: PPUSH
13196: LD_STRING DMar-RC-a-3
13198: PPUSH
13199: CALL_OW 88
// end ;
13203: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
13204: LD_EXP 14
13208: IFFALSE 13230
13210: PUSH
13211: LD_EXP 21
13215: PPUSH
13216: LD_EXP 33
13220: PPUSH
13221: CALL_OW 296
13225: PUSH
13226: LD_INT 8
13228: LESS
13229: AND
13230: IFFALSE 13242
13232: PUSH
13233: LD_INT 2
13235: PPUSH
13236: CALL_OW 463
13240: NOT
13241: AND
13242: IFFALSE 13255
13244: PUSH
13245: LD_EXP 33
13249: PPUSH
13250: CALL_OW 302
13254: AND
13255: IFFALSE 13268
13257: PUSH
13258: LD_EXP 21
13262: PPUSH
13263: CALL_OW 302
13267: AND
13268: IFFALSE 13446
13270: GO 13272
13272: DISABLE
// begin if not IsInUnit ( Aviradze ) then
13273: LD_EXP 33
13277: PPUSH
13278: CALL_OW 310
13282: NOT
13283: IFFALSE 13299
// ComTurnUnit ( Aviradze , Heike ) ;
13285: LD_EXP 33
13289: PPUSH
13290: LD_EXP 21
13294: PPUSH
13295: CALL_OW 119
// if not IsInUnit ( Heike ) then
13299: LD_EXP 21
13303: PPUSH
13304: CALL_OW 310
13308: NOT
13309: IFFALSE 13325
// ComTurnUnit ( Heike , Aviradze ) ;
13311: LD_EXP 21
13315: PPUSH
13316: LD_EXP 33
13320: PPUSH
13321: CALL_OW 119
// wait ( 0 0$1 ) ;
13325: LD_INT 35
13327: PPUSH
13328: CALL_OW 67
// DialogueOn ;
13332: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
13336: LD_EXP 33
13340: PPUSH
13341: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
13345: LD_EXP 21
13349: PPUSH
13350: LD_STRING DH-Beria-1
13352: PPUSH
13353: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
13357: LD_EXP 33
13361: PPUSH
13362: LD_STRING DA-Beria-2
13364: PPUSH
13365: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
13369: LD_EXP 21
13373: PPUSH
13374: LD_STRING DH-Beria-3
13376: PPUSH
13377: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
13381: LD_EXP 33
13385: PPUSH
13386: LD_STRING DA-Beria-4
13388: PPUSH
13389: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
13393: LD_EXP 33
13397: PPUSH
13398: LD_STRING DA-Beria-5
13400: PPUSH
13401: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
13405: LD_EXP 33
13409: PPUSH
13410: LD_STRING DA-Beria-6
13412: PPUSH
13413: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
13417: LD_EXP 21
13421: PPUSH
13422: LD_STRING DA-Beria-7
13424: PPUSH
13425: CALL_OW 88
// DialogueOff ;
13429: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13433: LD_INT 52
13435: PPUSH
13436: LD_INT 2
13438: PPUSH
13439: LD_INT 1
13441: PPUSH
13442: CALL_OW 322
// end ;
13446: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13447: LD_EXP 26
13451: PPUSH
13452: CALL_OW 300
13456: IFFALSE 13473
13458: PUSH
13459: LD_EXP 26
13463: PPUSH
13464: CALL_OW 256
13468: PUSH
13469: LD_INT 10
13471: LESS
13472: AND
13473: IFFALSE 13510
13475: GO 13477
13477: DISABLE
// begin DialogueOn ;
13478: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13482: LD_EXP 26
13486: PPUSH
13487: LD_STRING DK-Kdeath-1
13489: PPUSH
13490: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13494: LD_EXP 21
13498: PPUSH
13499: LD_STRING DH-Kdeath-2
13501: PPUSH
13502: CALL_OW 88
// DialogueOff ;
13506: CALL_OW 7
// end ;
13510: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13511: LD_INT 2
13513: PPUSH
13514: LD_EXP 39
13518: PPUSH
13519: CALL 1316 0 2
13523: IFFALSE 13540
13525: GO 13527
13527: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13528: LD_EXP 21
13532: PPUSH
13533: LD_STRING DH-Obj-1
13535: PPUSH
13536: CALL_OW 88
13540: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13541: LD_INT 2
13543: PPUSH
13544: LD_EXP 40
13548: PPUSH
13549: CALL 1316 0 2
13553: IFFALSE 13570
13555: GO 13557
13557: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13558: LD_EXP 21
13562: PPUSH
13563: LD_STRING DH-Obj-a-1
13565: PPUSH
13566: CALL_OW 88
13570: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 11 11$00 , 10 10$30 , 10 10$00 , 9 9$30 ] [ Difficulty ] do
13571: LD_EXP 10
13575: IFTRUE 13608
13577: PUSH
13578: LD_OWVAR 1
13582: PUSH
13583: LD_INT 23100
13585: PUSH
13586: LD_INT 22050
13588: PUSH
13589: LD_INT 21000
13591: PUSH
13592: LD_INT 19950
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: PUSH
13601: LD_OWVAR 67
13605: ARRAY
13606: GREATEREQUAL
13607: OR
13608: IFFALSE 13634
13610: GO 13612
13612: DISABLE
// begin if eastBaseCaptured then
13613: LD_EXP 10
13617: IFFALSE 13626
// wait ( 2 2$00 ) ;
13619: LD_INT 4200
13621: PPUSH
13622: CALL_OW 67
// convoyStarted := true ;
13626: LD_ADDR_EXP 17
13630: PUSH
13631: LD_INT 1
13633: ST_TO_ADDR
// end ;
13634: END
// every 0 0$1 trigger convoyStarted do
13635: LD_EXP 17
13639: IFFALSE 13730
13641: GO 13643
13643: DISABLE
// begin DialogueOn ;
13644: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13648: LD_EXP 29
13652: PPUSH
13653: LD_STRING DShar-Convoy-1
13655: PPUSH
13656: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13660: LD_EXP 21
13664: PPUSH
13665: LD_STRING DH-Convoy-2
13667: PPUSH
13668: CALL_OW 88
// DialogueOff ;
13672: CALL_OW 7
// wait ( 0 0$10 ) ;
13676: LD_INT 350
13678: PPUSH
13679: CALL_OW 67
// PrepareConvoy ;
13683: CALL 4654 0 0
// repeat wait ( rand ( 2 2$30 , 4 4$30 ) ) ;
13687: LD_INT 5250
13689: PPUSH
13690: LD_INT 9450
13692: PPUSH
13693: CALL_OW 12
13697: PPUSH
13698: CALL_OW 67
// PrepareConvoy ;
13702: CALL 4654 0 0
// convoyCounter := convoyCounter - 1 ;
13706: LD_ADDR_EXP 16
13710: PUSH
13711: LD_EXP 16
13715: PUSH
13716: LD_INT 1
13718: MINUS
13719: ST_TO_ADDR
// until convoyCounter <= 0 ;
13720: LD_EXP 16
13724: PUSH
13725: LD_INT 0
13727: LESSEQUAL
13728: IFFALSE 13687
// end ;
13730: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13731: LD_EXP 15
13735: PUSH
13736: LD_INT 10
13738: GREATEREQUAL
13739: IFFALSE 13756
13741: GO 13743
13743: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13744: LD_EXP 31
13748: PPUSH
13749: LD_STRING DOm-Fail-1
13751: PPUSH
13752: CALL_OW 94
13756: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13757: LD_EXP 39
13761: NOT
13762: IFFALSE 13771
13764: PUSH
13765: LD_EXP 40
13769: NOT
13770: AND
13771: IFFALSE 13783
13773: GO 13775
13775: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13776: LD_STRING RaiderDone
13778: PPUSH
13779: CALL_OW 337
13783: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13784: LD_INT 22
13786: PUSH
13787: LD_INT 2
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 33
13796: PUSH
13797: LD_INT 2
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PPUSH
13808: CALL_OW 69
13812: PUSH
13813: LD_INT 3
13815: GREATEREQUAL
13816: IFFALSE 13852
13818: PUSH
13819: LD_INT 22
13821: PUSH
13822: LD_INT 2
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PUSH
13829: LD_INT 34
13831: PUSH
13832: LD_INT 31
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PPUSH
13843: CALL_OW 69
13847: PUSH
13848: LD_INT 2
13850: GREATEREQUAL
13851: AND
13852: IFFALSE 13864
13854: GO 13856
13856: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13857: LD_STRING RemoteControlDone
13859: PPUSH
13860: CALL_OW 337
13864: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var i , tmp , tmp2 , vehs , m1 , m2 , m3 ;
13865: LD_EXP 16
13869: PUSH
13870: LD_INT 1
13872: LESS
13873: IFFALSE 13907
13875: PUSH
13876: LD_EXP 41
13880: PPUSH
13881: LD_INT 52
13883: PUSH
13884: EMPTY
13885: LIST
13886: PUSH
13887: LD_INT 21
13889: PUSH
13890: LD_INT 1
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PPUSH
13901: CALL_OW 72
13905: NOT
13906: AND
13907: IFTRUE 13919
13909: PUSH
13910: LD_OWVAR 1
13914: PUSH
13915: LD_INT 126000
13917: GREATEREQUAL
13918: OR
13919: IFFALSE 15212
13921: GO 13923
13923: DISABLE
13924: LD_INT 0
13926: PPUSH
13927: PPUSH
13928: PPUSH
13929: PPUSH
13930: PPUSH
13931: PPUSH
13932: PPUSH
// begin m1 := false ;
13933: LD_ADDR_VAR 0 5
13937: PUSH
13938: LD_INT 0
13940: ST_TO_ADDR
// m2 := false ;
13941: LD_ADDR_VAR 0 6
13945: PUSH
13946: LD_INT 0
13948: ST_TO_ADDR
// m3 := false ;
13949: LD_ADDR_VAR 0 7
13953: PUSH
13954: LD_INT 0
13956: ST_TO_ADDR
// ChangeMissionObjectives ( ReinforcementsDone ) ;
13957: LD_STRING ReinforcementsDone
13959: PPUSH
13960: CALL_OW 337
// music_class := music_victory ;
13964: LD_ADDR_OWVAR 72
13968: PUSH
13969: LD_INT 4
13971: ST_TO_ADDR
// if tick <= 45 45$00 then
13972: LD_OWVAR 1
13976: PUSH
13977: LD_INT 94500
13979: LESSEQUAL
13980: IFFALSE 13989
// SetAchievement ( ACH_HSPEED_5 ) ;
13982: LD_STRING ACH_HSPEED_5
13984: PPUSH
13985: CALL_OW 543
// InGameOn ;
13989: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13993: LD_EXP 21
13997: PPUSH
13998: LD_STRING DH-end-1
14000: PPUSH
14001: CALL_OW 88
// wait ( 0 0$2 ) ;
14005: LD_INT 70
14007: PPUSH
14008: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
14012: LD_EXP 29
14016: PPUSH
14017: LD_STRING DShar-end-2
14019: PPUSH
14020: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
14024: LD_EXP 39
14028: NOT
14029: IFFALSE 14038
14031: PUSH
14032: LD_EXP 40
14036: NOT
14037: AND
14038: IFFALSE 14054
// begin Say ( Heike , DH-end-3 ) ;
14040: LD_EXP 21
14044: PPUSH
14045: LD_STRING DH-end-3
14047: PPUSH
14048: CALL_OW 88
// end else
14052: GO 14158
// begin Say ( Heike , DH-end-a-3 ) ;
14054: LD_EXP 21
14058: PPUSH
14059: LD_STRING DH-end-a-3
14061: PPUSH
14062: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
14066: LD_EXP 29
14070: PPUSH
14071: LD_STRING DShar-end-a-4
14073: PPUSH
14074: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
14078: LD_EXP 21
14082: PPUSH
14083: LD_STRING DH-end-a-5
14085: PPUSH
14086: CALL_OW 88
// InGameOff ;
14090: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
14094: LD_INT 35
14096: PPUSH
14097: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) = 0 ;
14101: LD_INT 22
14103: PUSH
14104: LD_INT 3
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 50
14113: PUSH
14114: EMPTY
14115: LIST
14116: PUSH
14117: LD_INT 21
14119: PUSH
14120: LD_INT 1
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: LIST
14131: PPUSH
14132: CALL_OW 69
14136: PUSH
14137: LD_INT 0
14139: EQUAL
14140: IFFALSE 14094
// InGameOn ;
14142: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
14146: LD_EXP 21
14150: PPUSH
14151: LD_STRING DH-end-a-6
14153: PPUSH
14154: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
14158: LD_EXP 29
14162: PPUSH
14163: LD_STRING DShar-end-3
14165: PPUSH
14166: CALL_OW 94
// if not flamethrowerBuilt then
14170: LD_EXP 20
14174: NOT
14175: IFFALSE 14184
// SetAchievement ( ACH_FIRE ) ;
14177: LD_STRING ACH_FIRE
14179: PPUSH
14180: CALL_OW 543
// if drugsTested then
14184: LD_EXP 6
14188: IFFALSE 14210
// begin m1 := true ;
14190: LD_ADDR_VAR 0 5
14194: PUSH
14195: LD_INT 1
14197: ST_TO_ADDR
// AddMedal ( med1 , 1 ) ;
14198: LD_STRING med1
14200: PPUSH
14201: LD_INT 1
14203: PPUSH
14204: CALL_OW 101
// end else
14208: GO 14250
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
14210: LD_INT 5
14212: PPUSH
14213: LD_INT 2
14215: PPUSH
14216: CALL_OW 321
14220: PUSH
14221: LD_INT 2
14223: EQUAL
14224: IFFALSE 14239
// AddMedal ( med1 , - 1 ) else
14226: LD_STRING med1
14228: PPUSH
14229: LD_INT 1
14231: NEG
14232: PPUSH
14233: CALL_OW 101
14237: GO 14250
// AddMedal ( med1 , - 2 ) ;
14239: LD_STRING med1
14241: PPUSH
14242: LD_INT 2
14244: NEG
14245: PPUSH
14246: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
14250: LD_INT 22
14252: PUSH
14253: LD_INT 2
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 33
14262: PUSH
14263: LD_INT 2
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PPUSH
14274: CALL_OW 69
14278: PUSH
14279: LD_INT 3
14281: GREATEREQUAL
14282: IFFALSE 14318
14284: PUSH
14285: LD_INT 22
14287: PUSH
14288: LD_INT 2
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 34
14297: PUSH
14298: LD_INT 31
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PPUSH
14309: CALL_OW 69
14313: PUSH
14314: LD_INT 1
14316: GREATEREQUAL
14317: AND
14318: IFFALSE 14340
// begin m2 := true ;
14320: LD_ADDR_VAR 0 6
14324: PUSH
14325: LD_INT 1
14327: ST_TO_ADDR
// AddMedal ( med2 , 1 ) ;
14328: LD_STRING med2
14330: PPUSH
14331: LD_INT 1
14333: PPUSH
14334: CALL_OW 101
// end else
14338: GO 14351
// AddMedal ( med2 , - 1 ) ;
14340: LD_STRING med2
14342: PPUSH
14343: LD_INT 1
14345: NEG
14346: PPUSH
14347: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14351: LD_EXP 15
14355: PUSH
14356: LD_INT 10
14358: PUSH
14359: LD_INT 8
14361: PUSH
14362: LD_INT 6
14364: PUSH
14365: LD_INT 5
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: PUSH
14374: LD_OWVAR 67
14378: ARRAY
14379: LESS
14380: IFFALSE 14402
// begin m3 := true ;
14382: LD_ADDR_VAR 0 7
14386: PUSH
14387: LD_INT 1
14389: ST_TO_ADDR
// AddMedal ( med3 , 1 ) ;
14390: LD_STRING med3
14392: PPUSH
14393: LD_INT 1
14395: PPUSH
14396: CALL_OW 101
// end else
14400: GO 14413
// AddMedal ( med3 , - 1 ) ;
14402: LD_STRING med3
14404: PPUSH
14405: LD_INT 1
14407: NEG
14408: PPUSH
14409: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
14413: LD_VAR 0 5
14417: IFFALSE 14425
14419: PUSH
14420: LD_VAR 0 6
14424: AND
14425: IFFALSE 14433
14427: PUSH
14428: LD_VAR 0 7
14432: AND
14433: IFFALSE 14445
14435: PUSH
14436: LD_OWVAR 67
14440: PUSH
14441: LD_INT 3
14443: GREATEREQUAL
14444: AND
14445: IFFALSE 14457
// SetAchievementEX ( ACH_ARES , 5 ) ;
14447: LD_STRING ACH_ARES
14449: PPUSH
14450: LD_INT 5
14452: PPUSH
14453: CALL_OW 564
// GiveMedals ( MAIN ) ;
14457: LD_STRING MAIN
14459: PPUSH
14460: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14464: LD_INT 22
14466: PUSH
14467: LD_INT 2
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 23
14476: PUSH
14477: LD_INT 2
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: LD_INT 21
14486: PUSH
14487: LD_INT 1
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: LIST
14498: PPUSH
14499: CALL_OW 69
14503: PPUSH
14504: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
14508: LD_EXP 15
14512: PPUSH
14513: LD_STRING 05_ConvoySavedCounter
14515: PPUSH
14516: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
14520: LD_EXP 13
14524: PPUSH
14525: LD_STRING 05_Radar
14527: PPUSH
14528: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
14532: LD_EXP 6
14536: PPUSH
14537: LD_STRING 05_DrugsTested
14539: PPUSH
14540: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
14544: LD_INT 22
14546: PUSH
14547: LD_INT 2
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PUSH
14554: LD_INT 33
14556: PUSH
14557: LD_INT 2
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PPUSH
14568: CALL_OW 69
14572: PUSH
14573: LD_INT 3
14575: GREATEREQUAL
14576: IFFALSE 14612
14578: PUSH
14579: LD_INT 22
14581: PUSH
14582: LD_INT 2
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 34
14591: PUSH
14592: LD_INT 31
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PPUSH
14603: CALL_OW 69
14607: PUSH
14608: LD_INT 2
14610: GREATEREQUAL
14611: AND
14612: PPUSH
14613: LD_STRING 05_RemoteControl
14615: PPUSH
14616: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
14620: LD_ADDR_VAR 0 2
14624: PUSH
14625: LD_INT 22
14627: PUSH
14628: LD_INT 2
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: LD_INT 21
14637: PUSH
14638: LD_INT 2
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PPUSH
14649: CALL_OW 69
14653: ST_TO_ADDR
// if tmp then
14654: LD_VAR 0 2
14658: IFFALSE 14777
// begin vehs := [ ] ;
14660: LD_ADDR_VAR 0 4
14664: PUSH
14665: EMPTY
14666: ST_TO_ADDR
// for i in tmp do
14667: LD_ADDR_VAR 0 1
14671: PUSH
14672: LD_VAR 0 2
14676: PUSH
14677: FOR_IN
14678: IFFALSE 14763
// vehs := Replace ( vehs , vehs + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) ] ) ;
14680: LD_ADDR_VAR 0 4
14684: PUSH
14685: LD_VAR 0 4
14689: PPUSH
14690: LD_VAR 0 4
14694: PUSH
14695: LD_INT 1
14697: PLUS
14698: PPUSH
14699: LD_VAR 0 1
14703: PPUSH
14704: CALL_OW 265
14708: PUSH
14709: LD_VAR 0 1
14713: PPUSH
14714: CALL_OW 262
14718: PUSH
14719: LD_VAR 0 1
14723: PPUSH
14724: CALL_OW 263
14728: PUSH
14729: LD_VAR 0 1
14733: PPUSH
14734: CALL_OW 264
14738: PUSH
14739: LD_VAR 0 1
14743: PPUSH
14744: CALL_OW 248
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: PPUSH
14756: CALL_OW 1
14760: ST_TO_ADDR
14761: GO 14677
14763: POP
14764: POP
// SaveVariable ( vehs , 05_Vehicles ) ;
14765: LD_VAR 0 4
14769: PPUSH
14770: LD_STRING 05_Vehicles
14772: PPUSH
14773: CALL_OW 39
// end ; tmp := FilterUnitsInArea ( saveBuildingsArea , [ f_type , unit_building ] ) ;
14777: LD_ADDR_VAR 0 2
14781: PUSH
14782: LD_INT 25
14784: PPUSH
14785: LD_INT 21
14787: PUSH
14788: LD_INT 3
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PPUSH
14795: CALL_OW 70
14799: ST_TO_ADDR
// tmp2 := [ ] ;
14800: LD_ADDR_VAR 0 3
14804: PUSH
14805: EMPTY
14806: ST_TO_ADDR
// if tmp then
14807: LD_VAR 0 2
14811: IFFALSE 14964
// begin for i in tmp do
14813: LD_ADDR_VAR 0 1
14817: PUSH
14818: LD_VAR 0 2
14822: PUSH
14823: FOR_IN
14824: IFFALSE 14950
// tmp2 := Join ( tmp2 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
14826: LD_ADDR_VAR 0 3
14830: PUSH
14831: LD_VAR 0 3
14835: PPUSH
14836: LD_VAR 0 1
14840: PPUSH
14841: CALL_OW 266
14845: PUSH
14846: LD_VAR 0 1
14850: PPUSH
14851: CALL_OW 250
14855: PUSH
14856: LD_VAR 0 1
14860: PPUSH
14861: CALL_OW 251
14865: PUSH
14866: LD_VAR 0 1
14870: PPUSH
14871: CALL_OW 254
14875: PUSH
14876: LD_VAR 0 1
14880: PPUSH
14881: CALL_OW 248
14885: PUSH
14886: LD_VAR 0 1
14890: PPUSH
14891: CALL_OW 267
14895: PUSH
14896: LD_VAR 0 1
14900: PPUSH
14901: LD_INT 1
14903: PPUSH
14904: CALL_OW 268
14908: PUSH
14909: LD_VAR 0 1
14913: PPUSH
14914: LD_INT 2
14916: PPUSH
14917: CALL_OW 268
14921: PUSH
14922: LD_VAR 0 1
14926: PPUSH
14927: CALL_OW 269
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: PPUSH
14943: CALL 76025 0 2
14947: ST_TO_ADDR
14948: GO 14823
14950: POP
14951: POP
// SaveVariable ( tmp2 , 05_Buildings ) ;
14952: LD_VAR 0 3
14956: PPUSH
14957: LD_STRING 05_Buildings
14959: PPUSH
14960: CALL_OW 39
// end ; SaveCharacters ( Heike , 05_Heike ) ;
14964: LD_EXP 21
14968: PPUSH
14969: LD_STRING 05_Heike
14971: PPUSH
14972: CALL_OW 38
// if Aviradze then
14976: LD_EXP 33
14980: IFFALSE 14994
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14982: LD_EXP 33
14986: PPUSH
14987: LD_STRING 05_Aviradze
14989: PPUSH
14990: CALL_OW 38
// if Ibrahim then
14994: LD_EXP 24
14998: IFFALSE 15012
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
15000: LD_EXP 24
15004: PPUSH
15005: LD_STRING 05_Ibrahim
15007: PPUSH
15008: CALL_OW 38
// if Kamil then
15012: LD_EXP 25
15016: IFFALSE 15030
// SaveCharacters ( Kamil , 05_Kamil ) ;
15018: LD_EXP 25
15022: PPUSH
15023: LD_STRING 05_Kamil
15025: PPUSH
15026: CALL_OW 38
// if Sophia then
15030: LD_EXP 27
15034: IFFALSE 15048
// SaveCharacters ( Sophia , 05_Sophia ) ;
15036: LD_EXP 27
15040: PPUSH
15041: LD_STRING 05_Sophia
15043: PPUSH
15044: CALL_OW 38
// if Kaia then
15048: LD_EXP 26
15052: IFFALSE 15066
// SaveCharacters ( Kaia , 05_Kaia ) ;
15054: LD_EXP 26
15058: PPUSH
15059: LD_STRING 05_Kaia
15061: PPUSH
15062: CALL_OW 38
// if Givi then
15066: LD_EXP 22
15070: IFFALSE 15084
// SaveCharacters ( Givi , 05_Givi ) ;
15072: LD_EXP 22
15076: PPUSH
15077: LD_STRING 05_Givi
15079: PPUSH
15080: CALL_OW 38
// if Mike then
15084: LD_EXP 23
15088: IFFALSE 15102
// SaveCharacters ( Mike , 05_Mike ) ;
15090: LD_EXP 23
15094: PPUSH
15095: LD_STRING 05_Mike
15097: PPUSH
15098: CALL_OW 38
// if Markov then
15102: LD_EXP 28
15106: IFFALSE 15120
// SaveCharacters ( Markov , 05_Markov ) ;
15108: LD_EXP 28
15112: PPUSH
15113: LD_STRING 05_Markov
15115: PPUSH
15116: CALL_OW 38
// if Kurt then
15120: LD_EXP 32
15124: IFFALSE 15138
// SaveCharacters ( Kurt , 05_Kurt ) ;
15126: LD_EXP 32
15130: PPUSH
15131: LD_STRING 05_Kurt
15133: PPUSH
15134: CALL_OW 38
// if heikeSecondSquad then
15138: LD_EXP 34
15142: IFFALSE 15156
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
15144: LD_EXP 34
15148: PPUSH
15149: LD_STRING 05_others
15151: PPUSH
15152: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15156: LD_ADDR_VAR 0 2
15160: PUSH
15161: LD_INT 22
15163: PUSH
15164: LD_INT 2
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PUSH
15171: LD_INT 23
15173: PUSH
15174: LD_INT 0
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PPUSH
15185: CALL_OW 69
15189: ST_TO_ADDR
// if tmp then
15190: LD_VAR 0 2
15194: IFFALSE 15208
// SaveCharacters ( tmp , 05_apes ) ;
15196: LD_VAR 0 2
15200: PPUSH
15201: LD_STRING 05_apes
15203: PPUSH
15204: CALL_OW 38
// YouWin ;
15208: CALL_OW 103
// end ; end_of_file
15212: PPOPN 7
15214: END
// every 0 0$35 + 0 0$20 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
15215: LD_EXP 9
15219: IFFALSE 15237
15221: PUSH
15222: LD_INT 13
15224: PPUSH
15225: LD_INT 1
15227: PPUSH
15228: CALL_OW 287
15232: PUSH
15233: LD_INT 25
15235: LESS
15236: AND
15237: IFFALSE 15264
15239: GO 15241
15241: DISABLE
// begin enable ;
15242: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
15243: LD_INT 1
15245: PPUSH
15246: LD_INT 5
15248: PPUSH
15249: CALL_OW 12
15253: PPUSH
15254: LD_INT 13
15256: PPUSH
15257: LD_INT 1
15259: PPUSH
15260: CALL_OW 55
// end ; end_of_file
15264: END
// export function SOS_UnitDestroyed ( un ) ; begin
15265: LD_INT 0
15267: PPUSH
// ComRadiation ( un ) ;
15268: LD_VAR 0 1
15272: PPUSH
15273: CALL 16435 0 1
// end ;
15277: LD_VAR 0 2
15281: RET
// export function SOS_UnitKamikazed ( un ) ; begin
15282: LD_INT 0
15284: PPUSH
// ComRadiation ( un ) ;
15285: LD_VAR 0 1
15289: PPUSH
15290: CALL 16435 0 1
// end ;
15294: LD_VAR 0 2
15298: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15299: LD_INT 0
15301: PPUSH
// end ;
15302: LD_VAR 0 4
15306: RET
// export function SOS_Command ( cmd ) ; begin
15307: LD_INT 0
15309: PPUSH
// end ;
15310: LD_VAR 0 2
15314: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15315: LD_INT 0
15317: PPUSH
// end ;
15318: LD_VAR 0 6
15322: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
15323: LD_INT 0
15325: PPUSH
15326: PPUSH
15327: PPUSH
15328: PPUSH
15329: PPUSH
// if not vehicle or not factory then
15330: LD_VAR 0 1
15334: NOT
15335: IFTRUE 15344
15337: PUSH
15338: LD_VAR 0 2
15342: NOT
15343: OR
15344: IFFALSE 15348
// exit ;
15346: GO 16010
// weapon := GetWeapon ( vehicle ) ;
15348: LD_ADDR_VAR 0 7
15352: PUSH
15353: LD_VAR 0 1
15357: PPUSH
15358: CALL_OW 264
15362: ST_TO_ADDR
// if weapon = ar_miner then
15363: LD_VAR 0 7
15367: PUSH
15368: LD_INT 81
15370: EQUAL
15371: IFFALSE 15428
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
15373: LD_ADDR_EXP 51
15377: PUSH
15378: LD_EXP 51
15382: PPUSH
15383: LD_EXP 51
15387: PUSH
15388: LD_INT 1
15390: PLUS
15391: PPUSH
15392: LD_VAR 0 1
15396: PPUSH
15397: CALL_OW 1
15401: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
15402: LD_ADDR_EXP 52
15406: PUSH
15407: LD_EXP 52
15411: PPUSH
15412: LD_EXP 52
15416: PUSH
15417: LD_INT 1
15419: PLUS
15420: PPUSH
15421: EMPTY
15422: PPUSH
15423: CALL_OW 1
15427: ST_TO_ADDR
// end ; if not factoryWaypoints then
15428: LD_EXP 113
15432: NOT
15433: IFFALSE 15437
// exit ;
15435: GO 16010
// for i := 1 to Count ( factoryWaypoints ) do
15437: LD_ADDR_VAR 0 4
15441: PUSH
15442: DOUBLE
15443: LD_INT 1
15445: DEC
15446: ST_TO_ADDR
15447: LD_EXP 113
15451: PPUSH
15452: CALL 40049 0 1
15456: PUSH
15457: FOR_TO
15458: IFFALSE 16008
// if factoryWaypoints [ i ] [ 2 ] = factory then
15460: LD_EXP 113
15464: PUSH
15465: LD_VAR 0 4
15469: ARRAY
15470: PUSH
15471: LD_INT 2
15473: ARRAY
15474: PUSH
15475: LD_VAR 0 2
15479: EQUAL
15480: IFFALSE 16006
// begin if GetControl ( vehicle ) = control_manual then
15482: LD_VAR 0 1
15486: PPUSH
15487: CALL_OW 263
15491: PUSH
15492: LD_INT 1
15494: EQUAL
15495: IFFALSE 15859
// begin driver := IsDrivenBy ( vehicle ) ;
15497: LD_ADDR_VAR 0 5
15501: PUSH
15502: LD_VAR 0 1
15506: PPUSH
15507: CALL_OW 311
15511: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
15512: LD_VAR 0 5
15516: PUSH
15517: LD_EXP 114
15521: IN
15522: IFTRUE 15536
15524: PUSH
15525: LD_VAR 0 1
15529: PUSH
15530: LD_EXP 114
15534: IN
15535: OR
15536: IFFALSE 15542
// exit ;
15538: POP
15539: POP
15540: GO 16010
// if not HasTask ( driver ) then
15542: LD_VAR 0 5
15546: PPUSH
15547: CALL_OW 314
15551: NOT
15552: IFFALSE 15857
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
15554: LD_ADDR_EXP 114
15558: PUSH
15559: LD_EXP 114
15563: PPUSH
15564: LD_VAR 0 5
15568: PPUSH
15569: CALL 76025 0 2
15573: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
15574: LD_ADDR_EXP 114
15578: PUSH
15579: LD_EXP 114
15583: PPUSH
15584: LD_VAR 0 1
15588: PPUSH
15589: CALL 76025 0 2
15593: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15594: LD_ADDR_VAR 0 6
15598: PUSH
15599: LD_EXP 113
15603: PUSH
15604: LD_VAR 0 4
15608: ARRAY
15609: PUSH
15610: LD_INT 3
15612: ARRAY
15613: PPUSH
15614: LD_EXP 113
15618: PUSH
15619: LD_VAR 0 4
15623: ARRAY
15624: PUSH
15625: LD_INT 4
15627: ARRAY
15628: PPUSH
15629: CALL_OW 428
15633: ST_TO_ADDR
// if hex then
15634: LD_VAR 0 6
15638: IFFALSE 15656
// ComMoveUnit ( driver , hex ) else
15640: LD_VAR 0 5
15644: PPUSH
15645: LD_VAR 0 6
15649: PPUSH
15650: CALL_OW 112
15654: GO 15740
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
15656: LD_VAR 0 1
15660: PPUSH
15661: LD_EXP 113
15665: PUSH
15666: LD_VAR 0 4
15670: ARRAY
15671: PUSH
15672: LD_INT 3
15674: ARRAY
15675: PPUSH
15676: LD_EXP 113
15680: PUSH
15681: LD_VAR 0 4
15685: ARRAY
15686: PUSH
15687: LD_INT 4
15689: ARRAY
15690: PPUSH
15691: CALL_OW 297
15695: PUSH
15696: LD_INT 0
15698: GREATER
15699: IFFALSE 15740
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15701: LD_VAR 0 5
15705: PPUSH
15706: LD_EXP 113
15710: PUSH
15711: LD_VAR 0 4
15715: ARRAY
15716: PUSH
15717: LD_INT 3
15719: ARRAY
15720: PPUSH
15721: LD_EXP 113
15725: PUSH
15726: LD_VAR 0 4
15730: ARRAY
15731: PUSH
15732: LD_INT 4
15734: ARRAY
15735: PPUSH
15736: CALL_OW 111
// AddComExitVehicle ( driver ) ;
15740: LD_VAR 0 5
15744: PPUSH
15745: CALL_OW 181
// if Multiplayer then
15749: LD_OWVAR 4
15753: IFFALSE 15802
// begin repeat wait ( 10 ) ;
15755: LD_INT 10
15757: PPUSH
15758: CALL_OW 67
// until not IsInUnit ( driver ) ;
15762: LD_VAR 0 5
15766: PPUSH
15767: CALL_OW 310
15771: NOT
15772: IFFALSE 15755
// if not HasTask ( driver ) then
15774: LD_VAR 0 5
15778: PPUSH
15779: CALL_OW 314
15783: NOT
15784: IFFALSE 15800
// ComEnterUnit ( driver , factory ) ;
15786: LD_VAR 0 5
15790: PPUSH
15791: LD_VAR 0 2
15795: PPUSH
15796: CALL_OW 120
// end else
15800: GO 15816
// AddComEnterUnit ( driver , factory ) ;
15802: LD_VAR 0 5
15806: PPUSH
15807: LD_VAR 0 2
15811: PPUSH
15812: CALL_OW 180
// wait ( 0 0$1 ) ;
15816: LD_INT 35
15818: PPUSH
15819: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
15823: LD_ADDR_EXP 114
15827: PUSH
15828: LD_EXP 114
15832: PUSH
15833: LD_VAR 0 5
15837: DIFF
15838: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
15839: LD_ADDR_EXP 114
15843: PUSH
15844: LD_EXP 114
15848: PUSH
15849: LD_VAR 0 1
15853: DIFF
15854: ST_TO_ADDR
// break ;
15855: GO 16008
// end ; end else
15857: GO 16006
// if GetControl ( vehicle ) = control_remote then
15859: LD_VAR 0 1
15863: PPUSH
15864: CALL_OW 263
15868: PUSH
15869: LD_INT 2
15871: EQUAL
15872: IFFALSE 15958
// begin wait ( 0 0$2 ) ;
15874: LD_INT 70
15876: PPUSH
15877: CALL_OW 67
// repeat wait ( 10 ) ;
15881: LD_INT 10
15883: PPUSH
15884: CALL_OW 67
// Connect ( vehicle ) ;
15888: LD_VAR 0 1
15892: PPUSH
15893: CALL 46327 0 1
// until IsControledBy ( vehicle ) ;
15897: LD_VAR 0 1
15901: PPUSH
15902: CALL_OW 312
15906: IFFALSE 15881
// wait ( 10 ) ;
15908: LD_INT 10
15910: PPUSH
15911: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15915: LD_VAR 0 1
15919: PPUSH
15920: LD_EXP 113
15924: PUSH
15925: LD_VAR 0 4
15929: ARRAY
15930: PUSH
15931: LD_INT 3
15933: ARRAY
15934: PPUSH
15935: LD_EXP 113
15939: PUSH
15940: LD_VAR 0 4
15944: ARRAY
15945: PUSH
15946: LD_INT 4
15948: ARRAY
15949: PPUSH
15950: CALL_OW 111
// break ;
15954: GO 16008
// end else
15956: GO 16006
// begin wait ( 0 0$3 ) ;
15958: LD_INT 105
15960: PPUSH
15961: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15965: LD_VAR 0 1
15969: PPUSH
15970: LD_EXP 113
15974: PUSH
15975: LD_VAR 0 4
15979: ARRAY
15980: PUSH
15981: LD_INT 3
15983: ARRAY
15984: PPUSH
15985: LD_EXP 113
15989: PUSH
15990: LD_VAR 0 4
15994: ARRAY
15995: PUSH
15996: LD_INT 4
15998: ARRAY
15999: PPUSH
16000: CALL_OW 111
// break ;
16004: GO 16008
// end ; end ;
16006: GO 15457
16008: POP
16009: POP
// end ;
16010: LD_VAR 0 3
16014: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
16015: LD_INT 0
16017: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
16018: LD_VAR 0 1
16022: PUSH
16023: LD_INT 250
16025: EQUAL
16026: IFFALSE 16043
16028: PUSH
16029: LD_VAR 0 2
16033: PPUSH
16034: CALL_OW 264
16038: PUSH
16039: LD_INT 81
16041: EQUAL
16042: AND
16043: IFFALSE 16064
// MinerPlaceMine ( unit , x , y ) ;
16045: LD_VAR 0 2
16049: PPUSH
16050: LD_VAR 0 4
16054: PPUSH
16055: LD_VAR 0 5
16059: PPUSH
16060: CALL 19410 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
16064: LD_VAR 0 1
16068: PUSH
16069: LD_INT 251
16071: EQUAL
16072: IFFALSE 16089
16074: PUSH
16075: LD_VAR 0 2
16079: PPUSH
16080: CALL_OW 264
16084: PUSH
16085: LD_INT 81
16087: EQUAL
16088: AND
16089: IFFALSE 16110
// MinerDetonateMine ( unit , x , y ) ;
16091: LD_VAR 0 2
16095: PPUSH
16096: LD_VAR 0 4
16100: PPUSH
16101: LD_VAR 0 5
16105: PPUSH
16106: CALL 19817 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16110: LD_VAR 0 1
16114: PUSH
16115: LD_INT 252
16117: EQUAL
16118: IFFALSE 16135
16120: PUSH
16121: LD_VAR 0 2
16125: PPUSH
16126: CALL_OW 264
16130: PUSH
16131: LD_INT 81
16133: EQUAL
16134: AND
16135: IFFALSE 16156
// MinerCreateMinefield ( unit , x , y ) ;
16137: LD_VAR 0 2
16141: PPUSH
16142: LD_VAR 0 4
16146: PPUSH
16147: LD_VAR 0 5
16151: PPUSH
16152: CALL 20049 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16156: LD_VAR 0 1
16160: PUSH
16161: LD_INT 253
16163: EQUAL
16164: IFFALSE 16181
16166: PUSH
16167: LD_VAR 0 2
16171: PPUSH
16172: CALL_OW 257
16176: PUSH
16177: LD_INT 5
16179: EQUAL
16180: AND
16181: IFFALSE 16202
// ComBinocular ( unit , x , y ) ;
16183: LD_VAR 0 2
16187: PPUSH
16188: LD_VAR 0 4
16192: PPUSH
16193: LD_VAR 0 5
16197: PPUSH
16198: CALL 20424 0 3
// if selectedUnit then
16202: LD_VAR 0 3
16206: IFFALSE 16266
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16208: LD_VAR 0 1
16212: PUSH
16213: LD_INT 254
16215: EQUAL
16216: IFFALSE 16233
16218: PUSH
16219: LD_VAR 0 2
16223: PPUSH
16224: CALL_OW 264
16228: PUSH
16229: LD_INT 99
16231: EQUAL
16232: AND
16233: IFFALSE 16250
16235: PUSH
16236: LD_VAR 0 3
16240: PPUSH
16241: CALL_OW 263
16245: PUSH
16246: LD_INT 3
16248: EQUAL
16249: AND
16250: IFFALSE 16266
// HackDestroyVehicle ( unit , selectedUnit ) ;
16252: LD_VAR 0 2
16256: PPUSH
16257: LD_VAR 0 3
16261: PPUSH
16262: CALL 18600 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16266: LD_VAR 0 1
16270: PUSH
16271: LD_INT 255
16273: EQUAL
16274: IFFALSE 16298
16276: PUSH
16277: LD_VAR 0 2
16281: PPUSH
16282: CALL_OW 264
16286: PUSH
16287: LD_INT 14
16289: PUSH
16290: LD_INT 53
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: IN
16297: AND
16298: IFFALSE 16316
16300: PUSH
16301: LD_VAR 0 4
16305: PPUSH
16306: LD_VAR 0 5
16310: PPUSH
16311: CALL_OW 488
16315: AND
16316: IFFALSE 16340
// CutTreeXYR ( unit , x , y , 12 ) ;
16318: LD_VAR 0 2
16322: PPUSH
16323: LD_VAR 0 4
16327: PPUSH
16328: LD_VAR 0 5
16332: PPUSH
16333: LD_INT 12
16335: PPUSH
16336: CALL 16531 0 4
// if cmd = 256 then
16340: LD_VAR 0 1
16344: PUSH
16345: LD_INT 256
16347: EQUAL
16348: IFFALSE 16369
// SetFactoryWaypoint ( unit , x , y ) ;
16350: LD_VAR 0 2
16354: PPUSH
16355: LD_VAR 0 4
16359: PPUSH
16360: LD_VAR 0 5
16364: PPUSH
16365: CALL 36370 0 3
// if cmd = 257 then
16369: LD_VAR 0 1
16373: PUSH
16374: LD_INT 257
16376: EQUAL
16377: IFFALSE 16398
// SetWarehouseGatheringPoint ( unit , x , y ) ;
16379: LD_VAR 0 2
16383: PPUSH
16384: LD_VAR 0 4
16388: PPUSH
16389: LD_VAR 0 5
16393: PPUSH
16394: CALL 36866 0 3
// if cmd = 258 then
16398: LD_VAR 0 1
16402: PUSH
16403: LD_INT 258
16405: EQUAL
16406: IFFALSE 16430
// BurnTreeXYR ( unit , x , y , 8 ) ;
16408: LD_VAR 0 2
16412: PPUSH
16413: LD_VAR 0 4
16417: PPUSH
16418: LD_VAR 0 5
16422: PPUSH
16423: LD_INT 8
16425: PPUSH
16426: CALL 16953 0 4
// end ;
16430: LD_VAR 0 6
16434: RET
// export function ComRadiation ( un ) ; var eff ; begin
16435: LD_INT 0
16437: PPUSH
16438: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
16439: LD_VAR 0 1
16443: PPUSH
16444: CALL_OW 264
16448: PUSH
16449: LD_INT 91
16451: NONEQUAL
16452: IFFALSE 16456
// exit ;
16454: GO 16526
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
16456: LD_INT 68
16458: PPUSH
16459: LD_VAR 0 1
16463: PPUSH
16464: CALL_OW 255
16468: PPUSH
16469: CALL_OW 321
16473: PUSH
16474: LD_INT 2
16476: EQUAL
16477: IFFALSE 16489
// eff := 50 else
16479: LD_ADDR_VAR 0 3
16483: PUSH
16484: LD_INT 50
16486: ST_TO_ADDR
16487: GO 16497
// eff := 25 ;
16489: LD_ADDR_VAR 0 3
16493: PUSH
16494: LD_INT 25
16496: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
16497: LD_VAR 0 1
16501: PPUSH
16502: CALL_OW 250
16506: PPUSH
16507: LD_VAR 0 1
16511: PPUSH
16512: CALL_OW 251
16516: PPUSH
16517: LD_VAR 0 3
16521: PPUSH
16522: CALL_OW 495
// end ;
16526: LD_VAR 0 2
16530: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16531: LD_INT 0
16533: PPUSH
16534: PPUSH
16535: PPUSH
16536: PPUSH
16537: PPUSH
16538: PPUSH
16539: PPUSH
16540: PPUSH
16541: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
16542: LD_VAR 0 1
16546: PPUSH
16547: CALL_OW 302
16551: NOT
16552: IFTRUE 16571
16554: PUSH
16555: LD_VAR 0 2
16559: PPUSH
16560: LD_VAR 0 3
16564: PPUSH
16565: CALL_OW 488
16569: NOT
16570: OR
16571: IFTRUE 16580
16573: PUSH
16574: LD_VAR 0 4
16578: NOT
16579: OR
16580: IFFALSE 16584
// exit ;
16582: GO 16948
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 437
16593: PPUSH
16594: CALL 40049 0 1
16598: PUSH
16599: LD_INT 10
16601: GREATER
16602: IFFALSE 16606
// exit ;
16604: GO 16948
// list := [ ] ;
16606: LD_ADDR_VAR 0 13
16610: PUSH
16611: EMPTY
16612: ST_TO_ADDR
// if x - r < 0 then
16613: LD_VAR 0 2
16617: PUSH
16618: LD_VAR 0 4
16622: MINUS
16623: PUSH
16624: LD_INT 0
16626: LESS
16627: IFFALSE 16639
// min_x := 0 else
16629: LD_ADDR_VAR 0 7
16633: PUSH
16634: LD_INT 0
16636: ST_TO_ADDR
16637: GO 16655
// min_x := x - r ;
16639: LD_ADDR_VAR 0 7
16643: PUSH
16644: LD_VAR 0 2
16648: PUSH
16649: LD_VAR 0 4
16653: MINUS
16654: ST_TO_ADDR
// if y - r < 0 then
16655: LD_VAR 0 3
16659: PUSH
16660: LD_VAR 0 4
16664: MINUS
16665: PUSH
16666: LD_INT 0
16668: LESS
16669: IFFALSE 16681
// min_y := 0 else
16671: LD_ADDR_VAR 0 8
16675: PUSH
16676: LD_INT 0
16678: ST_TO_ADDR
16679: GO 16697
// min_y := y - r ;
16681: LD_ADDR_VAR 0 8
16685: PUSH
16686: LD_VAR 0 3
16690: PUSH
16691: LD_VAR 0 4
16695: MINUS
16696: ST_TO_ADDR
// max_x := x + r ;
16697: LD_ADDR_VAR 0 9
16701: PUSH
16702: LD_VAR 0 2
16706: PUSH
16707: LD_VAR 0 4
16711: PLUS
16712: ST_TO_ADDR
// max_y := y + r ;
16713: LD_ADDR_VAR 0 10
16717: PUSH
16718: LD_VAR 0 3
16722: PUSH
16723: LD_VAR 0 4
16727: PLUS
16728: ST_TO_ADDR
// for _x = min_x to max_x do
16729: LD_ADDR_VAR 0 11
16733: PUSH
16734: DOUBLE
16735: LD_VAR 0 7
16739: DEC
16740: ST_TO_ADDR
16741: LD_VAR 0 9
16745: PUSH
16746: FOR_TO
16747: IFFALSE 16866
// for _y = min_y to max_y do
16749: LD_ADDR_VAR 0 12
16753: PUSH
16754: DOUBLE
16755: LD_VAR 0 8
16759: DEC
16760: ST_TO_ADDR
16761: LD_VAR 0 10
16765: PUSH
16766: FOR_TO
16767: IFFALSE 16862
// begin if not ValidHex ( _x , _y ) then
16769: LD_VAR 0 11
16773: PPUSH
16774: LD_VAR 0 12
16778: PPUSH
16779: CALL_OW 488
16783: NOT
16784: IFFALSE 16788
// continue ;
16786: GO 16766
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16788: LD_VAR 0 11
16792: PPUSH
16793: LD_VAR 0 12
16797: PPUSH
16798: CALL_OW 351
16802: IFFALSE 16820
16804: PUSH
16805: LD_VAR 0 11
16809: PPUSH
16810: LD_VAR 0 12
16814: PPUSH
16815: CALL_OW 554
16819: AND
16820: IFFALSE 16860
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16822: LD_ADDR_VAR 0 13
16826: PUSH
16827: LD_VAR 0 13
16831: PPUSH
16832: LD_VAR 0 13
16836: PUSH
16837: LD_INT 1
16839: PLUS
16840: PPUSH
16841: LD_VAR 0 11
16845: PUSH
16846: LD_VAR 0 12
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PPUSH
16855: CALL_OW 2
16859: ST_TO_ADDR
// end ;
16860: GO 16766
16862: POP
16863: POP
16864: GO 16746
16866: POP
16867: POP
// if not list then
16868: LD_VAR 0 13
16872: NOT
16873: IFFALSE 16877
// exit ;
16875: GO 16948
// for i in list do
16877: LD_ADDR_VAR 0 6
16881: PUSH
16882: LD_VAR 0 13
16886: PUSH
16887: FOR_IN
16888: IFFALSE 16946
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16890: LD_VAR 0 1
16894: PPUSH
16895: LD_STRING M
16897: PUSH
16898: LD_VAR 0 6
16902: PUSH
16903: LD_INT 1
16905: ARRAY
16906: PUSH
16907: LD_VAR 0 6
16911: PUSH
16912: LD_INT 2
16914: ARRAY
16915: PUSH
16916: LD_INT 0
16918: PUSH
16919: LD_INT 0
16921: PUSH
16922: LD_INT 0
16924: PUSH
16925: LD_INT 0
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: PUSH
16937: EMPTY
16938: LIST
16939: PPUSH
16940: CALL_OW 447
16944: GO 16887
16946: POP
16947: POP
// end ;
16948: LD_VAR 0 5
16952: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
16953: LD_INT 0
16955: PPUSH
16956: PPUSH
16957: PPUSH
16958: PPUSH
16959: PPUSH
16960: PPUSH
16961: PPUSH
16962: PPUSH
16963: PPUSH
16964: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
16965: LD_VAR 0 1
16969: PPUSH
16970: CALL_OW 302
16974: NOT
16975: IFTRUE 16994
16977: PUSH
16978: LD_VAR 0 2
16982: PPUSH
16983: LD_VAR 0 3
16987: PPUSH
16988: CALL_OW 488
16992: NOT
16993: OR
16994: IFTRUE 17003
16996: PUSH
16997: LD_VAR 0 4
17001: NOT
17002: OR
17003: IFFALSE 17007
// exit ;
17005: GO 17546
// if Count ( GetTaskList ( flame ) ) > 10 then
17007: LD_VAR 0 1
17011: PPUSH
17012: CALL_OW 437
17016: PPUSH
17017: CALL 40049 0 1
17021: PUSH
17022: LD_INT 10
17024: GREATER
17025: IFFALSE 17029
// exit ;
17027: GO 17546
// list := [ ] ;
17029: LD_ADDR_VAR 0 13
17033: PUSH
17034: EMPTY
17035: ST_TO_ADDR
// if x - r < 0 then
17036: LD_VAR 0 2
17040: PUSH
17041: LD_VAR 0 4
17045: MINUS
17046: PUSH
17047: LD_INT 0
17049: LESS
17050: IFFALSE 17062
// min_x := 0 else
17052: LD_ADDR_VAR 0 7
17056: PUSH
17057: LD_INT 0
17059: ST_TO_ADDR
17060: GO 17078
// min_x := x - r ;
17062: LD_ADDR_VAR 0 7
17066: PUSH
17067: LD_VAR 0 2
17071: PUSH
17072: LD_VAR 0 4
17076: MINUS
17077: ST_TO_ADDR
// if y - r < 0 then
17078: LD_VAR 0 3
17082: PUSH
17083: LD_VAR 0 4
17087: MINUS
17088: PUSH
17089: LD_INT 0
17091: LESS
17092: IFFALSE 17104
// min_y := 0 else
17094: LD_ADDR_VAR 0 8
17098: PUSH
17099: LD_INT 0
17101: ST_TO_ADDR
17102: GO 17120
// min_y := y - r ;
17104: LD_ADDR_VAR 0 8
17108: PUSH
17109: LD_VAR 0 3
17113: PUSH
17114: LD_VAR 0 4
17118: MINUS
17119: ST_TO_ADDR
// max_x := x + r ;
17120: LD_ADDR_VAR 0 9
17124: PUSH
17125: LD_VAR 0 2
17129: PUSH
17130: LD_VAR 0 4
17134: PLUS
17135: ST_TO_ADDR
// max_y := y + r ;
17136: LD_ADDR_VAR 0 10
17140: PUSH
17141: LD_VAR 0 3
17145: PUSH
17146: LD_VAR 0 4
17150: PLUS
17151: ST_TO_ADDR
// for _x = min_x to max_x do
17152: LD_ADDR_VAR 0 11
17156: PUSH
17157: DOUBLE
17158: LD_VAR 0 7
17162: DEC
17163: ST_TO_ADDR
17164: LD_VAR 0 9
17168: PUSH
17169: FOR_TO
17170: IFFALSE 17289
// for _y = min_y to max_y do
17172: LD_ADDR_VAR 0 12
17176: PUSH
17177: DOUBLE
17178: LD_VAR 0 8
17182: DEC
17183: ST_TO_ADDR
17184: LD_VAR 0 10
17188: PUSH
17189: FOR_TO
17190: IFFALSE 17285
// begin if not ValidHex ( _x , _y ) then
17192: LD_VAR 0 11
17196: PPUSH
17197: LD_VAR 0 12
17201: PPUSH
17202: CALL_OW 488
17206: NOT
17207: IFFALSE 17211
// continue ;
17209: GO 17189
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17211: LD_VAR 0 11
17215: PPUSH
17216: LD_VAR 0 12
17220: PPUSH
17221: CALL_OW 351
17225: IFFALSE 17243
17227: PUSH
17228: LD_VAR 0 11
17232: PPUSH
17233: LD_VAR 0 12
17237: PPUSH
17238: CALL_OW 554
17242: AND
17243: IFFALSE 17283
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17245: LD_ADDR_VAR 0 13
17249: PUSH
17250: LD_VAR 0 13
17254: PPUSH
17255: LD_VAR 0 13
17259: PUSH
17260: LD_INT 1
17262: PLUS
17263: PPUSH
17264: LD_VAR 0 11
17268: PUSH
17269: LD_VAR 0 12
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PPUSH
17278: CALL_OW 2
17282: ST_TO_ADDR
// end ;
17283: GO 17189
17285: POP
17286: POP
17287: GO 17169
17289: POP
17290: POP
// if not list then
17291: LD_VAR 0 13
17295: NOT
17296: IFFALSE 17300
// exit ;
17298: GO 17546
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
17300: LD_ADDR_VAR 0 13
17304: PUSH
17305: LD_VAR 0 1
17309: PPUSH
17310: LD_VAR 0 13
17314: PPUSH
17315: LD_INT 1
17317: PPUSH
17318: LD_INT 1
17320: PPUSH
17321: CALL 43455 0 4
17325: ST_TO_ADDR
// ComStop ( flame ) ;
17326: LD_VAR 0 1
17330: PPUSH
17331: CALL_OW 141
// for i in list do
17335: LD_ADDR_VAR 0 6
17339: PUSH
17340: LD_VAR 0 13
17344: PUSH
17345: FOR_IN
17346: IFFALSE 17377
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
17348: LD_VAR 0 1
17352: PPUSH
17353: LD_VAR 0 6
17357: PUSH
17358: LD_INT 1
17360: ARRAY
17361: PPUSH
17362: LD_VAR 0 6
17366: PUSH
17367: LD_INT 2
17369: ARRAY
17370: PPUSH
17371: CALL_OW 176
17375: GO 17345
17377: POP
17378: POP
// repeat wait ( 0 0$1 ) ;
17379: LD_INT 35
17381: PPUSH
17382: CALL_OW 67
// task := GetTaskList ( flame ) ;
17386: LD_ADDR_VAR 0 14
17390: PUSH
17391: LD_VAR 0 1
17395: PPUSH
17396: CALL_OW 437
17400: ST_TO_ADDR
// if not task then
17401: LD_VAR 0 14
17405: NOT
17406: IFFALSE 17410
// exit ;
17408: GO 17546
// if task [ 1 ] [ 1 ] <> | then
17410: LD_VAR 0 14
17414: PUSH
17415: LD_INT 1
17417: ARRAY
17418: PUSH
17419: LD_INT 1
17421: ARRAY
17422: PUSH
17423: LD_STRING |
17425: NONEQUAL
17426: IFFALSE 17430
// exit ;
17428: GO 17546
// _x := task [ 1 ] [ 2 ] ;
17430: LD_ADDR_VAR 0 11
17434: PUSH
17435: LD_VAR 0 14
17439: PUSH
17440: LD_INT 1
17442: ARRAY
17443: PUSH
17444: LD_INT 2
17446: ARRAY
17447: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
17448: LD_ADDR_VAR 0 12
17452: PUSH
17453: LD_VAR 0 14
17457: PUSH
17458: LD_INT 1
17460: ARRAY
17461: PUSH
17462: LD_INT 3
17464: ARRAY
17465: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
17466: LD_VAR 0 11
17470: PPUSH
17471: LD_VAR 0 12
17475: PPUSH
17476: CALL_OW 351
17480: NOT
17481: IFTRUE 17500
17483: PUSH
17484: LD_VAR 0 11
17488: PPUSH
17489: LD_VAR 0 12
17493: PPUSH
17494: CALL_OW 554
17498: NOT
17499: OR
17500: IFFALSE 17534
// begin task := Delete ( task , 1 ) ;
17502: LD_ADDR_VAR 0 14
17506: PUSH
17507: LD_VAR 0 14
17511: PPUSH
17512: LD_INT 1
17514: PPUSH
17515: CALL_OW 3
17519: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
17520: LD_VAR 0 1
17524: PPUSH
17525: LD_VAR 0 14
17529: PPUSH
17530: CALL_OW 446
// end ; until not HasTask ( flame ) ;
17534: LD_VAR 0 1
17538: PPUSH
17539: CALL_OW 314
17543: NOT
17544: IFFALSE 17379
// end ;
17546: LD_VAR 0 5
17550: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
17551: LD_EXP 44
17555: NOT
17556: IFFALSE 17606
17558: GO 17560
17560: DISABLE
// begin initHack := true ;
17561: LD_ADDR_EXP 44
17565: PUSH
17566: LD_INT 1
17568: ST_TO_ADDR
// hackTanks := [ ] ;
17569: LD_ADDR_EXP 45
17573: PUSH
17574: EMPTY
17575: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
17576: LD_ADDR_EXP 46
17580: PUSH
17581: EMPTY
17582: ST_TO_ADDR
// hackLimit := 3 ;
17583: LD_ADDR_EXP 47
17587: PUSH
17588: LD_INT 3
17590: ST_TO_ADDR
// hackDist := 12 ;
17591: LD_ADDR_EXP 48
17595: PUSH
17596: LD_INT 12
17598: ST_TO_ADDR
// hackCounter := [ ] ;
17599: LD_ADDR_EXP 49
17603: PUSH
17604: EMPTY
17605: ST_TO_ADDR
// end ;
17606: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
17607: LD_EXP 44
17611: IFFALSE 17629
17613: PUSH
17614: LD_INT 34
17616: PUSH
17617: LD_INT 99
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PPUSH
17624: CALL_OW 69
17628: AND
17629: IFFALSE 17882
17631: GO 17633
17633: DISABLE
17634: LD_INT 0
17636: PPUSH
17637: PPUSH
// begin enable ;
17638: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
17639: LD_ADDR_VAR 0 1
17643: PUSH
17644: LD_INT 34
17646: PUSH
17647: LD_INT 99
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PPUSH
17654: CALL_OW 69
17658: PUSH
17659: FOR_IN
17660: IFFALSE 17880
// begin if not i in hackTanks then
17662: LD_VAR 0 1
17666: PUSH
17667: LD_EXP 45
17671: IN
17672: NOT
17673: IFFALSE 17756
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
17675: LD_ADDR_EXP 45
17679: PUSH
17680: LD_EXP 45
17684: PPUSH
17685: LD_EXP 45
17689: PUSH
17690: LD_INT 1
17692: PLUS
17693: PPUSH
17694: LD_VAR 0 1
17698: PPUSH
17699: CALL_OW 1
17703: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
17704: LD_ADDR_EXP 46
17708: PUSH
17709: LD_EXP 46
17713: PPUSH
17714: LD_EXP 46
17718: PUSH
17719: LD_INT 1
17721: PLUS
17722: PPUSH
17723: EMPTY
17724: PPUSH
17725: CALL_OW 1
17729: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
17730: LD_ADDR_EXP 49
17734: PUSH
17735: LD_EXP 49
17739: PPUSH
17740: LD_EXP 49
17744: PUSH
17745: LD_INT 1
17747: PLUS
17748: PPUSH
17749: EMPTY
17750: PPUSH
17751: CALL_OW 1
17755: ST_TO_ADDR
// end ; if not IsOk ( i ) then
17756: LD_VAR 0 1
17760: PPUSH
17761: CALL_OW 302
17765: NOT
17766: IFFALSE 17779
// begin HackUnlinkAll ( i ) ;
17768: LD_VAR 0 1
17772: PPUSH
17773: CALL 17885 0 1
// continue ;
17777: GO 17659
// end ; HackCheckCapturedStatus ( i ) ;
17779: LD_VAR 0 1
17783: PPUSH
17784: CALL 18330 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
17788: LD_ADDR_VAR 0 2
17792: PUSH
17793: LD_INT 81
17795: PUSH
17796: LD_VAR 0 1
17800: PPUSH
17801: CALL_OW 255
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 33
17812: PUSH
17813: LD_INT 3
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 91
17822: PUSH
17823: LD_VAR 0 1
17827: PUSH
17828: LD_EXP 48
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 50
17840: PUSH
17841: EMPTY
17842: LIST
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: PPUSH
17850: CALL_OW 69
17854: ST_TO_ADDR
// if not tmp then
17855: LD_VAR 0 2
17859: NOT
17860: IFFALSE 17864
// continue ;
17862: GO 17659
// HackLink ( i , tmp ) ;
17864: LD_VAR 0 1
17868: PPUSH
17869: LD_VAR 0 2
17873: PPUSH
17874: CALL 18021 0 2
// end ;
17878: GO 17659
17880: POP
17881: POP
// end ;
17882: PPOPN 2
17884: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
17885: LD_INT 0
17887: PPUSH
17888: PPUSH
17889: PPUSH
// if not hack in hackTanks then
17890: LD_VAR 0 1
17894: PUSH
17895: LD_EXP 45
17899: IN
17900: NOT
17901: IFFALSE 17905
// exit ;
17903: GO 18016
// index := GetElementIndex ( hackTanks , hack ) ;
17905: LD_ADDR_VAR 0 4
17909: PUSH
17910: LD_EXP 45
17914: PPUSH
17915: LD_VAR 0 1
17919: PPUSH
17920: CALL 42750 0 2
17924: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
17925: LD_EXP 46
17929: PUSH
17930: LD_VAR 0 4
17934: ARRAY
17935: IFFALSE 18016
// begin for i in hackTanksCaptured [ index ] do
17937: LD_ADDR_VAR 0 3
17941: PUSH
17942: LD_EXP 46
17946: PUSH
17947: LD_VAR 0 4
17951: ARRAY
17952: PUSH
17953: FOR_IN
17954: IFFALSE 17980
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
17956: LD_VAR 0 3
17960: PUSH
17961: LD_INT 1
17963: ARRAY
17964: PPUSH
17965: LD_VAR 0 3
17969: PUSH
17970: LD_INT 2
17972: ARRAY
17973: PPUSH
17974: CALL_OW 235
17978: GO 17953
17980: POP
17981: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
17982: LD_ADDR_EXP 46
17986: PUSH
17987: LD_EXP 46
17991: PPUSH
17992: LD_VAR 0 4
17996: PPUSH
17997: EMPTY
17998: PPUSH
17999: CALL_OW 1
18003: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18004: LD_VAR 0 1
18008: PPUSH
18009: LD_INT 0
18011: PPUSH
18012: CALL_OW 505
// end ; end ;
18016: LD_VAR 0 2
18020: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18021: LD_INT 0
18023: PPUSH
18024: PPUSH
18025: PPUSH
// if not hack in hackTanks or not vehicles then
18026: LD_VAR 0 1
18030: PUSH
18031: LD_EXP 45
18035: IN
18036: NOT
18037: IFTRUE 18046
18039: PUSH
18040: LD_VAR 0 2
18044: NOT
18045: OR
18046: IFFALSE 18050
// exit ;
18048: GO 18325
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18050: LD_ADDR_VAR 0 2
18054: PUSH
18055: LD_VAR 0 1
18059: PPUSH
18060: LD_VAR 0 2
18064: PPUSH
18065: LD_INT 1
18067: PPUSH
18068: LD_INT 1
18070: PPUSH
18071: CALL 43402 0 4
18075: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18076: LD_ADDR_VAR 0 5
18080: PUSH
18081: LD_EXP 45
18085: PPUSH
18086: LD_VAR 0 1
18090: PPUSH
18091: CALL 42750 0 2
18095: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18096: LD_EXP 46
18100: PUSH
18101: LD_VAR 0 5
18105: ARRAY
18106: PUSH
18107: LD_EXP 47
18111: LESS
18112: IFFALSE 18301
// begin for i := 1 to vehicles do
18114: LD_ADDR_VAR 0 4
18118: PUSH
18119: DOUBLE
18120: LD_INT 1
18122: DEC
18123: ST_TO_ADDR
18124: LD_VAR 0 2
18128: PUSH
18129: FOR_TO
18130: IFFALSE 18299
// begin if hackTanksCaptured [ index ] = hackLimit then
18132: LD_EXP 46
18136: PUSH
18137: LD_VAR 0 5
18141: ARRAY
18142: PUSH
18143: LD_EXP 47
18147: EQUAL
18148: IFFALSE 18152
// break ;
18150: GO 18299
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18152: LD_ADDR_EXP 49
18156: PUSH
18157: LD_EXP 49
18161: PPUSH
18162: LD_VAR 0 5
18166: PPUSH
18167: LD_EXP 49
18171: PUSH
18172: LD_VAR 0 5
18176: ARRAY
18177: PUSH
18178: LD_INT 1
18180: PLUS
18181: PPUSH
18182: CALL_OW 1
18186: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18187: LD_ADDR_EXP 46
18191: PUSH
18192: LD_EXP 46
18196: PPUSH
18197: LD_VAR 0 5
18201: PUSH
18202: LD_EXP 46
18206: PUSH
18207: LD_VAR 0 5
18211: ARRAY
18212: PUSH
18213: LD_INT 1
18215: PLUS
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PPUSH
18221: LD_VAR 0 2
18225: PUSH
18226: LD_VAR 0 4
18230: ARRAY
18231: PUSH
18232: LD_VAR 0 2
18236: PUSH
18237: LD_VAR 0 4
18241: ARRAY
18242: PPUSH
18243: CALL_OW 255
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PPUSH
18252: CALL 42967 0 3
18256: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18257: LD_VAR 0 2
18261: PUSH
18262: LD_VAR 0 4
18266: ARRAY
18267: PPUSH
18268: LD_VAR 0 1
18272: PPUSH
18273: CALL_OW 255
18277: PPUSH
18278: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18282: LD_VAR 0 2
18286: PUSH
18287: LD_VAR 0 4
18291: ARRAY
18292: PPUSH
18293: CALL_OW 141
// end ;
18297: GO 18129
18299: POP
18300: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18301: LD_VAR 0 1
18305: PPUSH
18306: LD_EXP 46
18310: PUSH
18311: LD_VAR 0 5
18315: ARRAY
18316: PUSH
18317: LD_INT 0
18319: PLUS
18320: PPUSH
18321: CALL_OW 505
// end ;
18325: LD_VAR 0 3
18329: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18330: LD_INT 0
18332: PPUSH
18333: PPUSH
18334: PPUSH
18335: PPUSH
// if not hack in hackTanks then
18336: LD_VAR 0 1
18340: PUSH
18341: LD_EXP 45
18345: IN
18346: NOT
18347: IFFALSE 18351
// exit ;
18349: GO 18595
// index := GetElementIndex ( hackTanks , hack ) ;
18351: LD_ADDR_VAR 0 4
18355: PUSH
18356: LD_EXP 45
18360: PPUSH
18361: LD_VAR 0 1
18365: PPUSH
18366: CALL 42750 0 2
18370: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
18371: LD_ADDR_VAR 0 3
18375: PUSH
18376: DOUBLE
18377: LD_EXP 46
18381: PUSH
18382: LD_VAR 0 4
18386: ARRAY
18387: INC
18388: ST_TO_ADDR
18389: LD_INT 1
18391: PUSH
18392: FOR_DOWNTO
18393: IFFALSE 18569
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
18395: LD_ADDR_VAR 0 5
18399: PUSH
18400: LD_EXP 46
18404: PUSH
18405: LD_VAR 0 4
18409: ARRAY
18410: PUSH
18411: LD_VAR 0 3
18415: ARRAY
18416: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
18417: LD_VAR 0 5
18421: PUSH
18422: LD_INT 1
18424: ARRAY
18425: PPUSH
18426: CALL_OW 302
18430: NOT
18431: IFTRUE 18459
18433: PUSH
18434: LD_VAR 0 5
18438: PUSH
18439: LD_INT 1
18441: ARRAY
18442: PPUSH
18443: CALL_OW 255
18447: PUSH
18448: LD_VAR 0 1
18452: PPUSH
18453: CALL_OW 255
18457: NONEQUAL
18458: OR
18459: IFFALSE 18567
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
18461: LD_VAR 0 5
18465: PUSH
18466: LD_INT 1
18468: ARRAY
18469: PPUSH
18470: CALL_OW 305
18474: IFFALSE 18502
18476: PUSH
18477: LD_VAR 0 5
18481: PUSH
18482: LD_INT 1
18484: ARRAY
18485: PPUSH
18486: CALL_OW 255
18490: PUSH
18491: LD_VAR 0 1
18495: PPUSH
18496: CALL_OW 255
18500: EQUAL
18501: AND
18502: IFFALSE 18526
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
18504: LD_VAR 0 5
18508: PUSH
18509: LD_INT 1
18511: ARRAY
18512: PPUSH
18513: LD_VAR 0 5
18517: PUSH
18518: LD_INT 2
18520: ARRAY
18521: PPUSH
18522: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
18526: LD_ADDR_EXP 46
18530: PUSH
18531: LD_EXP 46
18535: PPUSH
18536: LD_VAR 0 4
18540: PPUSH
18541: LD_EXP 46
18545: PUSH
18546: LD_VAR 0 4
18550: ARRAY
18551: PPUSH
18552: LD_VAR 0 3
18556: PPUSH
18557: CALL_OW 3
18561: PPUSH
18562: CALL_OW 1
18566: ST_TO_ADDR
// end ; end ;
18567: GO 18392
18569: POP
18570: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18571: LD_VAR 0 1
18575: PPUSH
18576: LD_EXP 46
18580: PUSH
18581: LD_VAR 0 4
18585: ARRAY
18586: PUSH
18587: LD_INT 0
18589: PLUS
18590: PPUSH
18591: CALL_OW 505
// end ;
18595: LD_VAR 0 2
18599: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
18600: LD_INT 0
18602: PPUSH
18603: PPUSH
18604: PPUSH
18605: PPUSH
// if not hack in hackTanks then
18606: LD_VAR 0 1
18610: PUSH
18611: LD_EXP 45
18615: IN
18616: NOT
18617: IFFALSE 18621
// exit ;
18619: GO 18706
// index := GetElementIndex ( hackTanks , hack ) ;
18621: LD_ADDR_VAR 0 5
18625: PUSH
18626: LD_EXP 45
18630: PPUSH
18631: LD_VAR 0 1
18635: PPUSH
18636: CALL 42750 0 2
18640: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
18641: LD_ADDR_VAR 0 4
18645: PUSH
18646: DOUBLE
18647: LD_INT 1
18649: DEC
18650: ST_TO_ADDR
18651: LD_EXP 46
18655: PUSH
18656: LD_VAR 0 5
18660: ARRAY
18661: PUSH
18662: FOR_TO
18663: IFFALSE 18704
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
18665: LD_EXP 46
18669: PUSH
18670: LD_VAR 0 5
18674: ARRAY
18675: PUSH
18676: LD_VAR 0 4
18680: ARRAY
18681: PUSH
18682: LD_INT 1
18684: ARRAY
18685: PUSH
18686: LD_VAR 0 2
18690: EQUAL
18691: IFFALSE 18702
// KillUnit ( vehicle ) ;
18693: LD_VAR 0 2
18697: PPUSH
18698: CALL_OW 66
18702: GO 18662
18704: POP
18705: POP
// end ;
18706: LD_VAR 0 3
18710: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
18711: LD_EXP 50
18715: NOT
18716: IFFALSE 18849
18718: GO 18720
18720: DISABLE
18721: LD_INT 0
18723: PPUSH
// begin initMiner := true ;
18724: LD_ADDR_EXP 50
18728: PUSH
18729: LD_INT 1
18731: ST_TO_ADDR
// minersList := [ ] ;
18732: LD_ADDR_EXP 51
18736: PUSH
18737: EMPTY
18738: ST_TO_ADDR
// minerMinesList := [ ] ;
18739: LD_ADDR_EXP 52
18743: PUSH
18744: EMPTY
18745: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
18746: LD_ADDR_EXP 53
18750: PUSH
18751: LD_INT 10
18753: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
18754: LD_ADDR_VAR 0 1
18758: PUSH
18759: LD_INT 34
18761: PUSH
18762: LD_INT 81
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PPUSH
18769: CALL_OW 69
18773: PUSH
18774: FOR_IN
18775: IFFALSE 18847
// begin if not i in minersList then
18777: LD_VAR 0 1
18781: PUSH
18782: LD_EXP 51
18786: IN
18787: NOT
18788: IFFALSE 18845
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
18790: LD_ADDR_EXP 51
18794: PUSH
18795: LD_EXP 51
18799: PPUSH
18800: LD_EXP 51
18804: PUSH
18805: LD_INT 1
18807: PLUS
18808: PPUSH
18809: LD_VAR 0 1
18813: PPUSH
18814: CALL_OW 1
18818: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
18819: LD_ADDR_EXP 52
18823: PUSH
18824: LD_EXP 52
18828: PPUSH
18829: LD_EXP 52
18833: PUSH
18834: LD_INT 1
18836: PLUS
18837: PPUSH
18838: EMPTY
18839: PPUSH
18840: CALL_OW 1
18844: ST_TO_ADDR
// end end ;
18845: GO 18774
18847: POP
18848: POP
// end ;
18849: PPOPN 1
18851: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
18852: LD_EXP 50
18856: IFFALSE 18887
18858: PUSH
18859: LD_EXP 52
18863: PPUSH
18864: CALL 40049 0 1
18868: IFTRUE 18886
18870: PUSH
18871: LD_INT 34
18873: PUSH
18874: LD_INT 81
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PPUSH
18881: CALL_OW 69
18885: OR
18886: AND
18887: IFFALSE 19407
18889: GO 18891
18891: DISABLE
18892: LD_INT 0
18894: PPUSH
18895: PPUSH
18896: PPUSH
18897: PPUSH
// begin enable ;
18898: ENABLE
// for i := minerMinesList downto 1 do
18899: LD_ADDR_VAR 0 1
18903: PUSH
18904: DOUBLE
18905: LD_EXP 52
18909: INC
18910: ST_TO_ADDR
18911: LD_INT 1
18913: PUSH
18914: FOR_DOWNTO
18915: IFFALSE 19405
// begin side := GetSide ( minersList [ i ] ) ;
18917: LD_ADDR_VAR 0 3
18921: PUSH
18922: LD_EXP 51
18926: PUSH
18927: LD_VAR 0 1
18931: ARRAY
18932: PPUSH
18933: CALL_OW 255
18937: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
18938: LD_EXP 51
18942: PUSH
18943: LD_VAR 0 1
18947: ARRAY
18948: PPUSH
18949: CALL_OW 300
18953: IFFALSE 18974
18955: PUSH
18956: LD_VAR 0 3
18960: PUSH
18961: LD_OWVAR 2
18965: PUSH
18966: LD_INT 9
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: IN
18973: AND
18974: IFFALSE 19007
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
18976: LD_EXP 51
18980: PUSH
18981: LD_VAR 0 1
18985: ARRAY
18986: PPUSH
18987: LD_EXP 52
18991: PUSH
18992: LD_VAR 0 1
18996: ARRAY
18997: PPUSH
18998: CALL 40049 0 1
19002: PPUSH
19003: CALL_OW 505
// if not minerMinesList [ i ] then
19007: LD_EXP 52
19011: PUSH
19012: LD_VAR 0 1
19016: ARRAY
19017: NOT
19018: IFFALSE 19022
// continue ;
19020: GO 18914
// for j := minerMinesList [ i ] downto 1 do
19022: LD_ADDR_VAR 0 2
19026: PUSH
19027: DOUBLE
19028: LD_EXP 52
19032: PUSH
19033: LD_VAR 0 1
19037: ARRAY
19038: INC
19039: ST_TO_ADDR
19040: LD_INT 1
19042: PUSH
19043: FOR_DOWNTO
19044: IFFALSE 19401
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
19046: LD_EXP 51
19050: PUSH
19051: LD_VAR 0 1
19055: ARRAY
19056: PPUSH
19057: CALL_OW 301
19061: IFTRUE 19081
19063: PUSH
19064: LD_EXP 51
19068: PUSH
19069: LD_VAR 0 1
19073: ARRAY
19074: PPUSH
19075: CALL_OW 305
19079: NOT
19080: OR
19081: IFFALSE 19172
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19083: LD_EXP 52
19087: PUSH
19088: LD_VAR 0 1
19092: ARRAY
19093: PUSH
19094: LD_VAR 0 2
19098: ARRAY
19099: PUSH
19100: LD_INT 1
19102: ARRAY
19103: PPUSH
19104: LD_EXP 52
19108: PUSH
19109: LD_VAR 0 1
19113: ARRAY
19114: PUSH
19115: LD_VAR 0 2
19119: ARRAY
19120: PUSH
19121: LD_INT 2
19123: ARRAY
19124: PPUSH
19125: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19129: LD_ADDR_EXP 52
19133: PUSH
19134: LD_EXP 52
19138: PPUSH
19139: LD_VAR 0 1
19143: PPUSH
19144: LD_EXP 52
19148: PUSH
19149: LD_VAR 0 1
19153: ARRAY
19154: PPUSH
19155: LD_VAR 0 2
19159: PPUSH
19160: CALL_OW 3
19164: PPUSH
19165: CALL_OW 1
19169: ST_TO_ADDR
// continue ;
19170: GO 19043
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19172: LD_ADDR_VAR 0 4
19176: PUSH
19177: LD_EXP 52
19181: PUSH
19182: LD_VAR 0 1
19186: ARRAY
19187: PUSH
19188: LD_VAR 0 2
19192: ARRAY
19193: PUSH
19194: LD_INT 1
19196: ARRAY
19197: PPUSH
19198: LD_EXP 52
19202: PUSH
19203: LD_VAR 0 1
19207: ARRAY
19208: PUSH
19209: LD_VAR 0 2
19213: ARRAY
19214: PUSH
19215: LD_INT 2
19217: ARRAY
19218: PPUSH
19219: CALL_OW 428
19223: ST_TO_ADDR
// if not tmp then
19224: LD_VAR 0 4
19228: NOT
19229: IFFALSE 19233
// continue ;
19231: GO 19043
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19233: LD_VAR 0 4
19237: PUSH
19238: LD_INT 81
19240: PUSH
19241: LD_VAR 0 3
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PPUSH
19250: CALL_OW 69
19254: IN
19255: IFFALSE 19305
19257: PUSH
19258: LD_EXP 52
19262: PUSH
19263: LD_VAR 0 1
19267: ARRAY
19268: PUSH
19269: LD_VAR 0 2
19273: ARRAY
19274: PUSH
19275: LD_INT 1
19277: ARRAY
19278: PPUSH
19279: LD_EXP 52
19283: PUSH
19284: LD_VAR 0 1
19288: ARRAY
19289: PUSH
19290: LD_VAR 0 2
19294: ARRAY
19295: PUSH
19296: LD_INT 2
19298: ARRAY
19299: PPUSH
19300: CALL_OW 458
19304: AND
19305: IFFALSE 19399
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19307: LD_EXP 52
19311: PUSH
19312: LD_VAR 0 1
19316: ARRAY
19317: PUSH
19318: LD_VAR 0 2
19322: ARRAY
19323: PUSH
19324: LD_INT 1
19326: ARRAY
19327: PPUSH
19328: LD_EXP 52
19332: PUSH
19333: LD_VAR 0 1
19337: ARRAY
19338: PUSH
19339: LD_VAR 0 2
19343: ARRAY
19344: PUSH
19345: LD_INT 2
19347: ARRAY
19348: PPUSH
19349: LD_VAR 0 3
19353: PPUSH
19354: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19358: LD_ADDR_EXP 52
19362: PUSH
19363: LD_EXP 52
19367: PPUSH
19368: LD_VAR 0 1
19372: PPUSH
19373: LD_EXP 52
19377: PUSH
19378: LD_VAR 0 1
19382: ARRAY
19383: PPUSH
19384: LD_VAR 0 2
19388: PPUSH
19389: CALL_OW 3
19393: PPUSH
19394: CALL_OW 1
19398: ST_TO_ADDR
// end ; end ;
19399: GO 19043
19401: POP
19402: POP
// end ;
19403: GO 18914
19405: POP
19406: POP
// end ;
19407: PPOPN 4
19409: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
19410: LD_INT 0
19412: PPUSH
19413: PPUSH
19414: PPUSH
19415: PPUSH
// result := false ;
19416: LD_ADDR_VAR 0 4
19420: PUSH
19421: LD_INT 0
19423: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19424: LD_VAR 0 1
19428: PPUSH
19429: CALL_OW 264
19433: PUSH
19434: LD_INT 81
19436: EQUAL
19437: NOT
19438: IFFALSE 19442
// exit ;
19440: GO 19812
// side := GetSide ( unit ) ;
19442: LD_ADDR_VAR 0 6
19446: PUSH
19447: LD_VAR 0 1
19451: PPUSH
19452: CALL_OW 255
19456: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
19457: LD_ADDR_VAR 0 5
19461: PUSH
19462: LD_EXP 51
19466: PPUSH
19467: LD_VAR 0 1
19471: PPUSH
19472: CALL 42750 0 2
19476: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19477: LD_EXP 52
19481: PUSH
19482: LD_VAR 0 5
19486: ARRAY
19487: PUSH
19488: LD_EXP 53
19492: GREATEREQUAL
19493: IFFALSE 19497
// exit ;
19495: GO 19812
// ComMoveXY ( unit , x , y ) ;
19497: LD_VAR 0 1
19501: PPUSH
19502: LD_VAR 0 2
19506: PPUSH
19507: LD_VAR 0 3
19511: PPUSH
19512: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19516: LD_INT 35
19518: PPUSH
19519: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19523: LD_VAR 0 1
19527: PPUSH
19528: LD_VAR 0 2
19532: PPUSH
19533: LD_VAR 0 3
19537: PPUSH
19538: CALL 74806 0 3
19542: NOT
19543: IFFALSE 19556
19545: PUSH
19546: LD_VAR 0 1
19550: PPUSH
19551: CALL_OW 314
19555: AND
19556: IFFALSE 19560
// exit ;
19558: GO 19812
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
19560: LD_VAR 0 2
19564: PPUSH
19565: LD_VAR 0 3
19569: PPUSH
19570: CALL_OW 428
19574: PUSH
19575: LD_VAR 0 1
19579: EQUAL
19580: IFFALSE 19594
19582: PUSH
19583: LD_VAR 0 1
19587: PPUSH
19588: CALL_OW 314
19592: NOT
19593: AND
19594: IFFALSE 19516
// if MineAtPos ( x , y ) then
19596: LD_VAR 0 2
19600: PPUSH
19601: LD_VAR 0 3
19605: PPUSH
19606: CALL_OW 458
19610: IFFALSE 19614
// exit ;
19612: GO 19812
// if your_side = side then
19614: LD_OWVAR 2
19618: PUSH
19619: LD_VAR 0 6
19623: EQUAL
19624: IFFALSE 19643
// PlaySoundXY ( x , y , PlantMine ) ;
19626: LD_VAR 0 2
19630: PPUSH
19631: LD_VAR 0 3
19635: PPUSH
19636: LD_STRING PlantMine
19638: PPUSH
19639: CALL_OW 366
// repeat wait ( 1 ) ;
19643: LD_INT 1
19645: PPUSH
19646: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
19650: LD_VAR 0 2
19654: PPUSH
19655: LD_VAR 0 3
19659: PPUSH
19660: LD_VAR 0 6
19664: PPUSH
19665: LD_INT 0
19667: PPUSH
19668: CALL_OW 454
19672: IFFALSE 19643
// if MineAtPos ( x , y ) then
19674: LD_VAR 0 2
19678: PPUSH
19679: LD_VAR 0 3
19683: PPUSH
19684: CALL_OW 458
19688: IFFALSE 19804
// begin for i in minerMinesList [ index ] do
19690: LD_ADDR_VAR 0 7
19694: PUSH
19695: LD_EXP 52
19699: PUSH
19700: LD_VAR 0 5
19704: ARRAY
19705: PUSH
19706: FOR_IN
19707: IFFALSE 19749
// if i [ 1 ] = x and i [ 2 ] = y then
19709: LD_VAR 0 7
19713: PUSH
19714: LD_INT 1
19716: ARRAY
19717: PUSH
19718: LD_VAR 0 2
19722: EQUAL
19723: IFFALSE 19741
19725: PUSH
19726: LD_VAR 0 7
19730: PUSH
19731: LD_INT 2
19733: ARRAY
19734: PUSH
19735: LD_VAR 0 3
19739: EQUAL
19740: AND
19741: IFFALSE 19747
// exit ;
19743: POP
19744: POP
19745: GO 19812
19747: GO 19706
19749: POP
19750: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
19751: LD_ADDR_EXP 52
19755: PUSH
19756: LD_EXP 52
19760: PPUSH
19761: LD_VAR 0 5
19765: PUSH
19766: LD_EXP 52
19770: PUSH
19771: LD_VAR 0 5
19775: ARRAY
19776: PUSH
19777: LD_INT 1
19779: PLUS
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PPUSH
19785: LD_VAR 0 2
19789: PUSH
19790: LD_VAR 0 3
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PPUSH
19799: CALL 42967 0 3
19803: ST_TO_ADDR
// end ; result := true ;
19804: LD_ADDR_VAR 0 4
19808: PUSH
19809: LD_INT 1
19811: ST_TO_ADDR
// end ;
19812: LD_VAR 0 4
19816: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
19817: LD_INT 0
19819: PPUSH
19820: PPUSH
19821: PPUSH
// if not unit in minersList then
19822: LD_VAR 0 1
19826: PUSH
19827: LD_EXP 51
19831: IN
19832: NOT
19833: IFFALSE 19837
// exit ;
19835: GO 20044
// index := GetElementIndex ( minersList , unit ) ;
19837: LD_ADDR_VAR 0 6
19841: PUSH
19842: LD_EXP 51
19846: PPUSH
19847: LD_VAR 0 1
19851: PPUSH
19852: CALL 42750 0 2
19856: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
19857: LD_ADDR_VAR 0 5
19861: PUSH
19862: DOUBLE
19863: LD_EXP 52
19867: PUSH
19868: LD_VAR 0 6
19872: ARRAY
19873: INC
19874: ST_TO_ADDR
19875: LD_INT 1
19877: PUSH
19878: FOR_DOWNTO
19879: IFFALSE 20042
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
19881: LD_EXP 52
19885: PUSH
19886: LD_VAR 0 6
19890: ARRAY
19891: PUSH
19892: LD_VAR 0 5
19896: ARRAY
19897: PUSH
19898: LD_INT 1
19900: ARRAY
19901: PPUSH
19902: LD_EXP 52
19906: PUSH
19907: LD_VAR 0 6
19911: ARRAY
19912: PUSH
19913: LD_VAR 0 5
19917: ARRAY
19918: PUSH
19919: LD_INT 2
19921: ARRAY
19922: PPUSH
19923: LD_VAR 0 2
19927: PPUSH
19928: LD_VAR 0 3
19932: PPUSH
19933: CALL_OW 298
19937: PUSH
19938: LD_INT 6
19940: LESS
19941: IFFALSE 20040
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19943: LD_EXP 52
19947: PUSH
19948: LD_VAR 0 6
19952: ARRAY
19953: PUSH
19954: LD_VAR 0 5
19958: ARRAY
19959: PUSH
19960: LD_INT 1
19962: ARRAY
19963: PPUSH
19964: LD_EXP 52
19968: PUSH
19969: LD_VAR 0 6
19973: ARRAY
19974: PUSH
19975: LD_VAR 0 5
19979: ARRAY
19980: PUSH
19981: LD_INT 2
19983: ARRAY
19984: PPUSH
19985: LD_VAR 0 1
19989: PPUSH
19990: CALL_OW 255
19994: PPUSH
19995: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19999: LD_ADDR_EXP 52
20003: PUSH
20004: LD_EXP 52
20008: PPUSH
20009: LD_VAR 0 6
20013: PPUSH
20014: LD_EXP 52
20018: PUSH
20019: LD_VAR 0 6
20023: ARRAY
20024: PPUSH
20025: LD_VAR 0 5
20029: PPUSH
20030: CALL_OW 3
20034: PPUSH
20035: CALL_OW 1
20039: ST_TO_ADDR
// end ; end ;
20040: GO 19878
20042: POP
20043: POP
// end ;
20044: LD_VAR 0 4
20048: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20049: LD_INT 0
20051: PPUSH
20052: PPUSH
20053: PPUSH
20054: PPUSH
20055: PPUSH
20056: PPUSH
20057: PPUSH
20058: PPUSH
20059: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20060: LD_VAR 0 1
20064: PPUSH
20065: CALL_OW 264
20069: PUSH
20070: LD_INT 81
20072: EQUAL
20073: NOT
20074: IFTRUE 20089
20076: PUSH
20077: LD_VAR 0 1
20081: PUSH
20082: LD_EXP 51
20086: IN
20087: NOT
20088: OR
20089: IFFALSE 20093
// exit ;
20091: GO 20419
// index := GetElementIndex ( minersList , unit ) ;
20093: LD_ADDR_VAR 0 6
20097: PUSH
20098: LD_EXP 51
20102: PPUSH
20103: LD_VAR 0 1
20107: PPUSH
20108: CALL 42750 0 2
20112: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20113: LD_ADDR_VAR 0 8
20117: PUSH
20118: LD_EXP 53
20122: PUSH
20123: LD_EXP 52
20127: PUSH
20128: LD_VAR 0 6
20132: ARRAY
20133: MINUS
20134: ST_TO_ADDR
// if not minesFreeAmount then
20135: LD_VAR 0 8
20139: NOT
20140: IFFALSE 20144
// exit ;
20142: GO 20419
// tmp := [ ] ;
20144: LD_ADDR_VAR 0 7
20148: PUSH
20149: EMPTY
20150: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20151: LD_ADDR_VAR 0 5
20155: PUSH
20156: DOUBLE
20157: LD_INT 1
20159: DEC
20160: ST_TO_ADDR
20161: LD_VAR 0 8
20165: PUSH
20166: FOR_TO
20167: IFFALSE 20366
// begin _d := rand ( 0 , 5 ) ;
20169: LD_ADDR_VAR 0 11
20173: PUSH
20174: LD_INT 0
20176: PPUSH
20177: LD_INT 5
20179: PPUSH
20180: CALL_OW 12
20184: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20185: LD_ADDR_VAR 0 12
20189: PUSH
20190: LD_INT 2
20192: PPUSH
20193: LD_INT 6
20195: PPUSH
20196: CALL_OW 12
20200: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20201: LD_ADDR_VAR 0 9
20205: PUSH
20206: LD_VAR 0 2
20210: PPUSH
20211: LD_VAR 0 11
20215: PPUSH
20216: LD_VAR 0 12
20220: PPUSH
20221: CALL_OW 272
20225: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20226: LD_ADDR_VAR 0 10
20230: PUSH
20231: LD_VAR 0 3
20235: PPUSH
20236: LD_VAR 0 11
20240: PPUSH
20241: LD_VAR 0 12
20245: PPUSH
20246: CALL_OW 273
20250: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20251: LD_VAR 0 9
20255: PPUSH
20256: LD_VAR 0 10
20260: PPUSH
20261: CALL_OW 488
20265: IFFALSE 20289
20267: PUSH
20268: LD_VAR 0 9
20272: PUSH
20273: LD_VAR 0 10
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_VAR 0 7
20286: IN
20287: NOT
20288: AND
20289: IFFALSE 20308
20291: PUSH
20292: LD_VAR 0 9
20296: PPUSH
20297: LD_VAR 0 10
20301: PPUSH
20302: CALL_OW 458
20306: NOT
20307: AND
20308: IFFALSE 20350
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20310: LD_ADDR_VAR 0 7
20314: PUSH
20315: LD_VAR 0 7
20319: PPUSH
20320: LD_VAR 0 7
20324: PUSH
20325: LD_INT 1
20327: PLUS
20328: PPUSH
20329: LD_VAR 0 9
20333: PUSH
20334: LD_VAR 0 10
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PPUSH
20343: CALL_OW 1
20347: ST_TO_ADDR
20348: GO 20364
// i := i - 1 ;
20350: LD_ADDR_VAR 0 5
20354: PUSH
20355: LD_VAR 0 5
20359: PUSH
20360: LD_INT 1
20362: MINUS
20363: ST_TO_ADDR
// end ;
20364: GO 20166
20366: POP
20367: POP
// for i in tmp do
20368: LD_ADDR_VAR 0 5
20372: PUSH
20373: LD_VAR 0 7
20377: PUSH
20378: FOR_IN
20379: IFFALSE 20417
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20381: LD_VAR 0 1
20385: PPUSH
20386: LD_VAR 0 5
20390: PUSH
20391: LD_INT 1
20393: ARRAY
20394: PPUSH
20395: LD_VAR 0 5
20399: PUSH
20400: LD_INT 2
20402: ARRAY
20403: PPUSH
20404: CALL 19410 0 3
20408: NOT
20409: IFFALSE 20415
// exit ;
20411: POP
20412: POP
20413: GO 20419
20415: GO 20378
20417: POP
20418: POP
// end ;
20419: LD_VAR 0 4
20423: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
20424: LD_INT 0
20426: PPUSH
20427: PPUSH
20428: PPUSH
20429: PPUSH
20430: PPUSH
20431: PPUSH
20432: PPUSH
20433: PPUSH
20434: PPUSH
// if GetClass ( unit ) <> class_sniper then
20435: LD_VAR 0 1
20439: PPUSH
20440: CALL_OW 257
20444: PUSH
20445: LD_INT 5
20447: NONEQUAL
20448: IFFALSE 20452
// exit ;
20450: GO 20922
// dist := 8 ;
20452: LD_ADDR_VAR 0 5
20456: PUSH
20457: LD_INT 8
20459: ST_TO_ADDR
// viewRange := 12 ;
20460: LD_ADDR_VAR 0 8
20464: PUSH
20465: LD_INT 12
20467: ST_TO_ADDR
// side := GetSide ( unit ) ;
20468: LD_ADDR_VAR 0 6
20472: PUSH
20473: LD_VAR 0 1
20477: PPUSH
20478: CALL_OW 255
20482: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
20483: LD_INT 61
20485: PPUSH
20486: LD_VAR 0 6
20490: PPUSH
20491: CALL_OW 321
20495: PUSH
20496: LD_INT 2
20498: EQUAL
20499: IFFALSE 20509
// viewRange := 16 ;
20501: LD_ADDR_VAR 0 8
20505: PUSH
20506: LD_INT 16
20508: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
20509: LD_VAR 0 1
20513: PPUSH
20514: LD_VAR 0 2
20518: PPUSH
20519: LD_VAR 0 3
20523: PPUSH
20524: CALL_OW 297
20528: PUSH
20529: LD_VAR 0 5
20533: GREATER
20534: IFFALSE 20613
// begin ComMoveXY ( unit , x , y ) ;
20536: LD_VAR 0 1
20540: PPUSH
20541: LD_VAR 0 2
20545: PPUSH
20546: LD_VAR 0 3
20550: PPUSH
20551: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20555: LD_INT 35
20557: PPUSH
20558: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
20562: LD_VAR 0 1
20566: PPUSH
20567: LD_VAR 0 2
20571: PPUSH
20572: LD_VAR 0 3
20576: PPUSH
20577: CALL 74806 0 3
20581: NOT
20582: IFFALSE 20586
// exit ;
20584: GO 20922
// until GetDistUnitXY ( unit , x , y ) < dist ;
20586: LD_VAR 0 1
20590: PPUSH
20591: LD_VAR 0 2
20595: PPUSH
20596: LD_VAR 0 3
20600: PPUSH
20601: CALL_OW 297
20605: PUSH
20606: LD_VAR 0 5
20610: LESS
20611: IFFALSE 20555
// end ; ComTurnXY ( unit , x , y ) ;
20613: LD_VAR 0 1
20617: PPUSH
20618: LD_VAR 0 2
20622: PPUSH
20623: LD_VAR 0 3
20627: PPUSH
20628: CALL_OW 118
// repeat if Multiplayer then
20632: LD_OWVAR 4
20636: IFFALSE 20647
// wait ( 35 ) else
20638: LD_INT 35
20640: PPUSH
20641: CALL_OW 67
20645: GO 20654
// wait ( 5 ) ;
20647: LD_INT 5
20649: PPUSH
20650: CALL_OW 67
// _d := GetDir ( unit ) ;
20654: LD_ADDR_VAR 0 11
20658: PUSH
20659: LD_VAR 0 1
20663: PPUSH
20664: CALL_OW 254
20668: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
20669: LD_ADDR_VAR 0 7
20673: PUSH
20674: LD_VAR 0 1
20678: PPUSH
20679: CALL_OW 250
20683: PPUSH
20684: LD_VAR 0 1
20688: PPUSH
20689: CALL_OW 251
20693: PPUSH
20694: LD_VAR 0 2
20698: PPUSH
20699: LD_VAR 0 3
20703: PPUSH
20704: CALL 77442 0 4
20708: ST_TO_ADDR
// until dir = _d ;
20709: LD_VAR 0 7
20713: PUSH
20714: LD_VAR 0 11
20718: EQUAL
20719: IFFALSE 20632
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
20721: LD_ADDR_VAR 0 9
20725: PUSH
20726: LD_VAR 0 1
20730: PPUSH
20731: CALL_OW 250
20735: PPUSH
20736: LD_VAR 0 7
20740: PPUSH
20741: LD_VAR 0 5
20745: PPUSH
20746: CALL_OW 272
20750: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
20751: LD_ADDR_VAR 0 10
20755: PUSH
20756: LD_VAR 0 1
20760: PPUSH
20761: CALL_OW 251
20765: PPUSH
20766: LD_VAR 0 7
20770: PPUSH
20771: LD_VAR 0 5
20775: PPUSH
20776: CALL_OW 273
20780: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20781: LD_VAR 0 9
20785: PPUSH
20786: LD_VAR 0 10
20790: PPUSH
20791: CALL_OW 488
20795: NOT
20796: IFFALSE 20800
// exit ;
20798: GO 20922
// ComAnimCustom ( unit , 1 ) ;
20800: LD_VAR 0 1
20804: PPUSH
20805: LD_INT 1
20807: PPUSH
20808: CALL_OW 592
// p := 0 ;
20812: LD_ADDR_VAR 0 12
20816: PUSH
20817: LD_INT 0
20819: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
20820: LD_VAR 0 9
20824: PPUSH
20825: LD_VAR 0 10
20829: PPUSH
20830: LD_VAR 0 6
20834: PPUSH
20835: LD_VAR 0 8
20839: PPUSH
20840: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
20844: LD_INT 35
20846: PPUSH
20847: CALL_OW 67
// p := Inc ( p ) ;
20851: LD_ADDR_VAR 0 12
20855: PUSH
20856: LD_VAR 0 12
20860: PPUSH
20861: CALL 77398 0 1
20865: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
20866: LD_VAR 0 12
20870: PUSH
20871: LD_INT 3
20873: EQUAL
20874: IFTRUE 20888
20876: PUSH
20877: LD_VAR 0 1
20881: PPUSH
20882: CALL_OW 302
20886: NOT
20887: OR
20888: IFTRUE 20901
20890: PUSH
20891: LD_VAR 0 1
20895: PPUSH
20896: CALL_OW 301
20900: OR
20901: IFFALSE 20844
// RemoveSeeing ( _x , _y , side ) ;
20903: LD_VAR 0 9
20907: PPUSH
20908: LD_VAR 0 10
20912: PPUSH
20913: LD_VAR 0 6
20917: PPUSH
20918: CALL_OW 331
// end ;
20922: LD_VAR 0 4
20926: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
20927: LD_INT 0
20929: PPUSH
20930: PPUSH
20931: PPUSH
20932: PPUSH
20933: PPUSH
20934: PPUSH
20935: PPUSH
20936: PPUSH
20937: PPUSH
20938: PPUSH
20939: PPUSH
// if not unit then
20940: LD_VAR 0 1
20944: NOT
20945: IFFALSE 20949
// exit ;
20947: GO 21220
// side := GetSide ( unit ) ;
20949: LD_ADDR_VAR 0 3
20953: PUSH
20954: LD_VAR 0 1
20958: PPUSH
20959: CALL_OW 255
20963: ST_TO_ADDR
// x := GetX ( unit ) ;
20964: LD_ADDR_VAR 0 5
20968: PUSH
20969: LD_VAR 0 1
20973: PPUSH
20974: CALL_OW 250
20978: ST_TO_ADDR
// y := GetY ( unit ) ;
20979: LD_ADDR_VAR 0 6
20983: PUSH
20984: LD_VAR 0 1
20988: PPUSH
20989: CALL_OW 251
20993: ST_TO_ADDR
// r := 8 ;
20994: LD_ADDR_VAR 0 4
20998: PUSH
20999: LD_INT 8
21001: ST_TO_ADDR
// if x - r < 0 then
21002: LD_VAR 0 5
21006: PUSH
21007: LD_VAR 0 4
21011: MINUS
21012: PUSH
21013: LD_INT 0
21015: LESS
21016: IFFALSE 21028
// min_x := 0 else
21018: LD_ADDR_VAR 0 7
21022: PUSH
21023: LD_INT 0
21025: ST_TO_ADDR
21026: GO 21044
// min_x := x - r ;
21028: LD_ADDR_VAR 0 7
21032: PUSH
21033: LD_VAR 0 5
21037: PUSH
21038: LD_VAR 0 4
21042: MINUS
21043: ST_TO_ADDR
// if y - r < 0 then
21044: LD_VAR 0 6
21048: PUSH
21049: LD_VAR 0 4
21053: MINUS
21054: PUSH
21055: LD_INT 0
21057: LESS
21058: IFFALSE 21070
// min_y := 0 else
21060: LD_ADDR_VAR 0 8
21064: PUSH
21065: LD_INT 0
21067: ST_TO_ADDR
21068: GO 21086
// min_y := y - r ;
21070: LD_ADDR_VAR 0 8
21074: PUSH
21075: LD_VAR 0 6
21079: PUSH
21080: LD_VAR 0 4
21084: MINUS
21085: ST_TO_ADDR
// max_x := x + r ;
21086: LD_ADDR_VAR 0 9
21090: PUSH
21091: LD_VAR 0 5
21095: PUSH
21096: LD_VAR 0 4
21100: PLUS
21101: ST_TO_ADDR
// max_y := y + r ;
21102: LD_ADDR_VAR 0 10
21106: PUSH
21107: LD_VAR 0 6
21111: PUSH
21112: LD_VAR 0 4
21116: PLUS
21117: ST_TO_ADDR
// for _x = min_x to max_x do
21118: LD_ADDR_VAR 0 11
21122: PUSH
21123: DOUBLE
21124: LD_VAR 0 7
21128: DEC
21129: ST_TO_ADDR
21130: LD_VAR 0 9
21134: PUSH
21135: FOR_TO
21136: IFFALSE 21218
// for _y = min_y to max_y do
21138: LD_ADDR_VAR 0 12
21142: PUSH
21143: DOUBLE
21144: LD_VAR 0 8
21148: DEC
21149: ST_TO_ADDR
21150: LD_VAR 0 10
21154: PUSH
21155: FOR_TO
21156: IFFALSE 21214
// begin if not ValidHex ( _x , _y ) then
21158: LD_VAR 0 11
21162: PPUSH
21163: LD_VAR 0 12
21167: PPUSH
21168: CALL_OW 488
21172: NOT
21173: IFFALSE 21177
// continue ;
21175: GO 21155
// if MineAtPos ( _x , _y ) then
21177: LD_VAR 0 11
21181: PPUSH
21182: LD_VAR 0 12
21186: PPUSH
21187: CALL_OW 458
21191: IFFALSE 21212
// ViewMineAtPos ( _x , _y , side ) ;
21193: LD_VAR 0 11
21197: PPUSH
21198: LD_VAR 0 12
21202: PPUSH
21203: LD_VAR 0 3
21207: PPUSH
21208: CALL_OW 457
// end ;
21212: GO 21155
21214: POP
21215: POP
21216: GO 21135
21218: POP
21219: POP
// end ;
21220: LD_VAR 0 2
21224: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
21225: LD_INT 0
21227: PPUSH
21228: PPUSH
21229: PPUSH
21230: PPUSH
21231: PPUSH
21232: PPUSH
21233: PPUSH
// if not units then
21234: LD_VAR 0 1
21238: NOT
21239: IFFALSE 21243
// exit ;
21241: GO 21707
// scaners := [ ] ;
21243: LD_ADDR_VAR 0 6
21247: PUSH
21248: EMPTY
21249: ST_TO_ADDR
// for i in units do
21250: LD_ADDR_VAR 0 3
21254: PUSH
21255: LD_VAR 0 1
21259: PUSH
21260: FOR_IN
21261: IFFALSE 21418
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
21263: LD_VAR 0 3
21267: PPUSH
21268: CALL_OW 264
21272: PUSH
21273: LD_INT 11
21275: NONEQUAL
21276: IFTRUE 21290
21278: PUSH
21279: LD_VAR 0 3
21283: PPUSH
21284: CALL_OW 302
21288: NOT
21289: OR
21290: IFTRUE 21307
21292: PUSH
21293: LD_VAR 0 3
21297: PPUSH
21298: CALL_OW 110
21302: PUSH
21303: LD_INT 502
21305: EQUAL
21306: OR
21307: IFFALSE 21311
// continue ;
21309: GO 21260
// ComStop ( i ) ;
21311: LD_VAR 0 3
21315: PPUSH
21316: CALL_OW 141
// x := GetX ( i ) ;
21320: LD_ADDR_VAR 0 4
21324: PUSH
21325: LD_VAR 0 3
21329: PPUSH
21330: CALL_OW 250
21334: ST_TO_ADDR
// y := GetY ( i ) ;
21335: LD_ADDR_VAR 0 5
21339: PUSH
21340: LD_VAR 0 3
21344: PPUSH
21345: CALL_OW 251
21349: ST_TO_ADDR
// if GetSide ( i ) = your_side then
21350: LD_VAR 0 3
21354: PPUSH
21355: CALL_OW 255
21359: PUSH
21360: LD_OWVAR 2
21364: EQUAL
21365: IFFALSE 21384
// PlaySoundXY ( x , y , mineDetector ) ;
21367: LD_VAR 0 4
21371: PPUSH
21372: LD_VAR 0 5
21376: PPUSH
21377: LD_STRING mineDetector
21379: PPUSH
21380: CALL_OW 366
// scaners := Join ( scaners , i ) ;
21384: LD_ADDR_VAR 0 6
21388: PUSH
21389: LD_VAR 0 6
21393: PPUSH
21394: LD_VAR 0 3
21398: PPUSH
21399: CALL 76025 0 2
21403: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
21404: LD_VAR 0 3
21408: PPUSH
21409: LD_INT 502
21411: PPUSH
21412: CALL_OW 109
// end ;
21416: GO 21260
21418: POP
21419: POP
// if not scaners then
21420: LD_VAR 0 6
21424: NOT
21425: IFFALSE 21429
// exit ;
21427: GO 21707
// wait ( 3 ) ;
21429: LD_INT 3
21431: PPUSH
21432: CALL_OW 67
// timer := 6 ;
21436: LD_ADDR_VAR 0 7
21440: PUSH
21441: LD_INT 6
21443: ST_TO_ADDR
// repeat for i in scaners do
21444: LD_ADDR_VAR 0 3
21448: PUSH
21449: LD_VAR 0 6
21453: PUSH
21454: FOR_IN
21455: IFFALSE 21605
// begin side := GetSide ( i ) ;
21457: LD_ADDR_VAR 0 8
21461: PUSH
21462: LD_VAR 0 3
21466: PPUSH
21467: CALL_OW 255
21471: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
21472: LD_VAR 0 3
21476: PPUSH
21477: CALL_OW 302
21481: NOT
21482: IFTRUE 21495
21484: PUSH
21485: LD_VAR 0 3
21489: PPUSH
21490: CALL_OW 314
21494: OR
21495: IFTRUE 21526
21497: PUSH
21498: LD_VAR 0 3
21502: PPUSH
21503: CALL_OW 263
21507: PUSH
21508: LD_INT 1
21510: EQUAL
21511: IFFALSE 21525
21513: PUSH
21514: LD_VAR 0 3
21518: PPUSH
21519: CALL_OW 311
21523: NOT
21524: AND
21525: OR
21526: IFFALSE 21570
// begin SetUnitDisplayNumber ( i , 0 ) ;
21528: LD_VAR 0 3
21532: PPUSH
21533: LD_INT 0
21535: PPUSH
21536: CALL_OW 505
// SetTag ( i , 0 ) ;
21540: LD_VAR 0 3
21544: PPUSH
21545: LD_INT 0
21547: PPUSH
21548: CALL_OW 109
// scaners := scaners diff i ;
21552: LD_ADDR_VAR 0 6
21556: PUSH
21557: LD_VAR 0 6
21561: PUSH
21562: LD_VAR 0 3
21566: DIFF
21567: ST_TO_ADDR
// continue ;
21568: GO 21454
// end ; if side in [ your_side , 9 ] then
21570: LD_VAR 0 8
21574: PUSH
21575: LD_OWVAR 2
21579: PUSH
21580: LD_INT 9
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: IN
21587: IFFALSE 21603
// SetUnitDisplayNumber ( i , timer ) ;
21589: LD_VAR 0 3
21593: PPUSH
21594: LD_VAR 0 7
21598: PPUSH
21599: CALL_OW 505
// end ;
21603: GO 21454
21605: POP
21606: POP
// if not scaners then
21607: LD_VAR 0 6
21611: NOT
21612: IFFALSE 21616
// exit ;
21614: GO 21707
// timer := Dec ( timer ) ;
21616: LD_ADDR_VAR 0 7
21620: PUSH
21621: LD_VAR 0 7
21625: PPUSH
21626: CALL 77420 0 1
21630: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21631: LD_INT 35
21633: PPUSH
21634: CALL_OW 67
// until timer = 0 ;
21638: LD_VAR 0 7
21642: PUSH
21643: LD_INT 0
21645: EQUAL
21646: IFFALSE 21444
// if not scaners then
21648: LD_VAR 0 6
21652: NOT
21653: IFFALSE 21657
// exit ;
21655: GO 21707
// for i in scaners do
21657: LD_ADDR_VAR 0 3
21661: PUSH
21662: LD_VAR 0 6
21666: PUSH
21667: FOR_IN
21668: IFFALSE 21705
// begin SetUnitDisplayNumber ( i , 0 ) ;
21670: LD_VAR 0 3
21674: PPUSH
21675: LD_INT 0
21677: PPUSH
21678: CALL_OW 505
// SetTag ( i , 0 ) ;
21682: LD_VAR 0 3
21686: PPUSH
21687: LD_INT 0
21689: PPUSH
21690: CALL_OW 109
// RevealDetectorMine ( i ) ;
21694: LD_VAR 0 3
21698: PPUSH
21699: CALL 20927 0 1
// end ;
21703: GO 21667
21705: POP
21706: POP
// end ;
21707: LD_VAR 0 2
21711: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
21712: LD_INT 0
21714: PPUSH
// if p1 = mine_detector_mode then
21715: LD_VAR 0 2
21719: PUSH
21720: LD_INT 103
21722: EQUAL
21723: IFFALSE 21734
// DetectMine ( units ) ;
21725: LD_VAR 0 1
21729: PPUSH
21730: CALL 21225 0 1
// end ; end_of_file
21734: LD_VAR 0 7
21738: RET
// export globalGameSaveCounter ; every 0 0$1 do
21739: GO 21741
21741: DISABLE
// begin enable ;
21742: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21743: LD_STRING updateTimer(
21745: PUSH
21746: LD_OWVAR 1
21750: STR
21751: PUSH
21752: LD_STRING );
21754: STR
21755: PPUSH
21756: CALL_OW 559
// end ;
21760: END
// every 0 0$1 do
21761: GO 21763
21763: DISABLE
// begin globalGameSaveCounter := 0 ;
21764: LD_ADDR_EXP 54
21768: PUSH
21769: LD_INT 0
21771: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
21772: LD_STRING setGameSaveCounter(0)
21774: PPUSH
21775: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
21779: LD_STRING initStreamRollete();
21781: PPUSH
21782: CALL_OW 559
// InitStreamMode ;
21786: CALL 23138 0 0
// DefineStreamItems ( false ) ;
21790: LD_INT 0
21792: PPUSH
21793: CALL 23602 0 1
// end ;
21797: END
// export function SOS_MapStart ( ) ; begin
21798: LD_INT 0
21800: PPUSH
// if streamModeActive then
21801: LD_EXP 55
21805: IFFALSE 21814
// DefineStreamItems ( true ) ;
21807: LD_INT 1
21809: PPUSH
21810: CALL 23602 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
21814: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
21816: PPUSH
21817: CALL_OW 559
// UpdateLuaVariables ( ) ;
21821: CALL 21838 0 0
// UpdateFactoryWaypoints ( ) ;
21825: CALL 36724 0 0
// UpdateWarehouseGatheringPoints ( ) ;
21829: CALL 36976 0 0
// end ;
21833: LD_VAR 0 1
21837: RET
// function UpdateLuaVariables ( ) ; begin
21838: LD_INT 0
21840: PPUSH
// if globalGameSaveCounter then
21841: LD_EXP 54
21845: IFFALSE 21879
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
21847: LD_ADDR_EXP 54
21851: PUSH
21852: LD_EXP 54
21856: PPUSH
21857: CALL 77398 0 1
21861: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21862: LD_STRING setGameSaveCounter(
21864: PUSH
21865: LD_EXP 54
21869: STR
21870: PUSH
21871: LD_STRING )
21873: STR
21874: PPUSH
21875: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
21879: LD_STRING setGameDifficulty(
21881: PUSH
21882: LD_OWVAR 67
21886: STR
21887: PUSH
21888: LD_STRING )
21890: STR
21891: PPUSH
21892: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
21896: LD_STRING displayDifficulty(
21898: PUSH
21899: LD_OWVAR 67
21903: STR
21904: PUSH
21905: LD_STRING )
21907: STR
21908: PPUSH
21909: CALL_OW 559
// end ;
21913: LD_VAR 0 1
21917: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21918: LD_INT 0
21920: PPUSH
// if p2 = stream_mode then
21921: LD_VAR 0 2
21925: PUSH
21926: LD_INT 100
21928: EQUAL
21929: IFFALSE 22932
// begin if not StreamModeActive then
21931: LD_EXP 55
21935: NOT
21936: IFFALSE 21946
// StreamModeActive := true ;
21938: LD_ADDR_EXP 55
21942: PUSH
21943: LD_INT 1
21945: ST_TO_ADDR
// if p3 = 0 then
21946: LD_VAR 0 3
21950: PUSH
21951: LD_INT 0
21953: EQUAL
21954: IFFALSE 21960
// InitStreamMode ;
21956: CALL 23138 0 0
// if p3 = 1 then
21960: LD_VAR 0 3
21964: PUSH
21965: LD_INT 1
21967: EQUAL
21968: IFFALSE 21978
// sRocket := true ;
21970: LD_ADDR_EXP 60
21974: PUSH
21975: LD_INT 1
21977: ST_TO_ADDR
// if p3 = 2 then
21978: LD_VAR 0 3
21982: PUSH
21983: LD_INT 2
21985: EQUAL
21986: IFFALSE 21996
// sSpeed := true ;
21988: LD_ADDR_EXP 59
21992: PUSH
21993: LD_INT 1
21995: ST_TO_ADDR
// if p3 = 3 then
21996: LD_VAR 0 3
22000: PUSH
22001: LD_INT 3
22003: EQUAL
22004: IFFALSE 22014
// sEngine := true ;
22006: LD_ADDR_EXP 61
22010: PUSH
22011: LD_INT 1
22013: ST_TO_ADDR
// if p3 = 4 then
22014: LD_VAR 0 3
22018: PUSH
22019: LD_INT 4
22021: EQUAL
22022: IFFALSE 22032
// sSpec := true ;
22024: LD_ADDR_EXP 58
22028: PUSH
22029: LD_INT 1
22031: ST_TO_ADDR
// if p3 = 5 then
22032: LD_VAR 0 3
22036: PUSH
22037: LD_INT 5
22039: EQUAL
22040: IFFALSE 22050
// sLevel := true ;
22042: LD_ADDR_EXP 62
22046: PUSH
22047: LD_INT 1
22049: ST_TO_ADDR
// if p3 = 6 then
22050: LD_VAR 0 3
22054: PUSH
22055: LD_INT 6
22057: EQUAL
22058: IFFALSE 22068
// sArmoury := true ;
22060: LD_ADDR_EXP 63
22064: PUSH
22065: LD_INT 1
22067: ST_TO_ADDR
// if p3 = 7 then
22068: LD_VAR 0 3
22072: PUSH
22073: LD_INT 7
22075: EQUAL
22076: IFFALSE 22086
// sRadar := true ;
22078: LD_ADDR_EXP 64
22082: PUSH
22083: LD_INT 1
22085: ST_TO_ADDR
// if p3 = 8 then
22086: LD_VAR 0 3
22090: PUSH
22091: LD_INT 8
22093: EQUAL
22094: IFFALSE 22104
// sBunker := true ;
22096: LD_ADDR_EXP 65
22100: PUSH
22101: LD_INT 1
22103: ST_TO_ADDR
// if p3 = 9 then
22104: LD_VAR 0 3
22108: PUSH
22109: LD_INT 9
22111: EQUAL
22112: IFFALSE 22122
// sHack := true ;
22114: LD_ADDR_EXP 66
22118: PUSH
22119: LD_INT 1
22121: ST_TO_ADDR
// if p3 = 10 then
22122: LD_VAR 0 3
22126: PUSH
22127: LD_INT 10
22129: EQUAL
22130: IFFALSE 22140
// sFire := true ;
22132: LD_ADDR_EXP 67
22136: PUSH
22137: LD_INT 1
22139: ST_TO_ADDR
// if p3 = 11 then
22140: LD_VAR 0 3
22144: PUSH
22145: LD_INT 11
22147: EQUAL
22148: IFFALSE 22158
// sRefresh := true ;
22150: LD_ADDR_EXP 68
22154: PUSH
22155: LD_INT 1
22157: ST_TO_ADDR
// if p3 = 12 then
22158: LD_VAR 0 3
22162: PUSH
22163: LD_INT 12
22165: EQUAL
22166: IFFALSE 22176
// sExp := true ;
22168: LD_ADDR_EXP 69
22172: PUSH
22173: LD_INT 1
22175: ST_TO_ADDR
// if p3 = 13 then
22176: LD_VAR 0 3
22180: PUSH
22181: LD_INT 13
22183: EQUAL
22184: IFFALSE 22194
// sDepot := true ;
22186: LD_ADDR_EXP 70
22190: PUSH
22191: LD_INT 1
22193: ST_TO_ADDR
// if p3 = 14 then
22194: LD_VAR 0 3
22198: PUSH
22199: LD_INT 14
22201: EQUAL
22202: IFFALSE 22212
// sFlag := true ;
22204: LD_ADDR_EXP 71
22208: PUSH
22209: LD_INT 1
22211: ST_TO_ADDR
// if p3 = 15 then
22212: LD_VAR 0 3
22216: PUSH
22217: LD_INT 15
22219: EQUAL
22220: IFFALSE 22230
// sKamikadze := true ;
22222: LD_ADDR_EXP 79
22226: PUSH
22227: LD_INT 1
22229: ST_TO_ADDR
// if p3 = 16 then
22230: LD_VAR 0 3
22234: PUSH
22235: LD_INT 16
22237: EQUAL
22238: IFFALSE 22248
// sTroll := true ;
22240: LD_ADDR_EXP 80
22244: PUSH
22245: LD_INT 1
22247: ST_TO_ADDR
// if p3 = 17 then
22248: LD_VAR 0 3
22252: PUSH
22253: LD_INT 17
22255: EQUAL
22256: IFFALSE 22266
// sSlow := true ;
22258: LD_ADDR_EXP 81
22262: PUSH
22263: LD_INT 1
22265: ST_TO_ADDR
// if p3 = 18 then
22266: LD_VAR 0 3
22270: PUSH
22271: LD_INT 18
22273: EQUAL
22274: IFFALSE 22284
// sLack := true ;
22276: LD_ADDR_EXP 82
22280: PUSH
22281: LD_INT 1
22283: ST_TO_ADDR
// if p3 = 19 then
22284: LD_VAR 0 3
22288: PUSH
22289: LD_INT 19
22291: EQUAL
22292: IFFALSE 22302
// sTank := true ;
22294: LD_ADDR_EXP 84
22298: PUSH
22299: LD_INT 1
22301: ST_TO_ADDR
// if p3 = 20 then
22302: LD_VAR 0 3
22306: PUSH
22307: LD_INT 20
22309: EQUAL
22310: IFFALSE 22320
// sRemote := true ;
22312: LD_ADDR_EXP 85
22316: PUSH
22317: LD_INT 1
22319: ST_TO_ADDR
// if p3 = 21 then
22320: LD_VAR 0 3
22324: PUSH
22325: LD_INT 21
22327: EQUAL
22328: IFFALSE 22338
// sPowell := true ;
22330: LD_ADDR_EXP 86
22334: PUSH
22335: LD_INT 1
22337: ST_TO_ADDR
// if p3 = 22 then
22338: LD_VAR 0 3
22342: PUSH
22343: LD_INT 22
22345: EQUAL
22346: IFFALSE 22356
// sTeleport := true ;
22348: LD_ADDR_EXP 89
22352: PUSH
22353: LD_INT 1
22355: ST_TO_ADDR
// if p3 = 23 then
22356: LD_VAR 0 3
22360: PUSH
22361: LD_INT 23
22363: EQUAL
22364: IFFALSE 22374
// sOilTower := true ;
22366: LD_ADDR_EXP 91
22370: PUSH
22371: LD_INT 1
22373: ST_TO_ADDR
// if p3 = 24 then
22374: LD_VAR 0 3
22378: PUSH
22379: LD_INT 24
22381: EQUAL
22382: IFFALSE 22392
// sShovel := true ;
22384: LD_ADDR_EXP 92
22388: PUSH
22389: LD_INT 1
22391: ST_TO_ADDR
// if p3 = 25 then
22392: LD_VAR 0 3
22396: PUSH
22397: LD_INT 25
22399: EQUAL
22400: IFFALSE 22410
// sSheik := true ;
22402: LD_ADDR_EXP 93
22406: PUSH
22407: LD_INT 1
22409: ST_TO_ADDR
// if p3 = 26 then
22410: LD_VAR 0 3
22414: PUSH
22415: LD_INT 26
22417: EQUAL
22418: IFFALSE 22428
// sEarthquake := true ;
22420: LD_ADDR_EXP 95
22424: PUSH
22425: LD_INT 1
22427: ST_TO_ADDR
// if p3 = 27 then
22428: LD_VAR 0 3
22432: PUSH
22433: LD_INT 27
22435: EQUAL
22436: IFFALSE 22446
// sAI := true ;
22438: LD_ADDR_EXP 96
22442: PUSH
22443: LD_INT 1
22445: ST_TO_ADDR
// if p3 = 28 then
22446: LD_VAR 0 3
22450: PUSH
22451: LD_INT 28
22453: EQUAL
22454: IFFALSE 22464
// sCargo := true ;
22456: LD_ADDR_EXP 99
22460: PUSH
22461: LD_INT 1
22463: ST_TO_ADDR
// if p3 = 29 then
22464: LD_VAR 0 3
22468: PUSH
22469: LD_INT 29
22471: EQUAL
22472: IFFALSE 22482
// sDLaser := true ;
22474: LD_ADDR_EXP 100
22478: PUSH
22479: LD_INT 1
22481: ST_TO_ADDR
// if p3 = 30 then
22482: LD_VAR 0 3
22486: PUSH
22487: LD_INT 30
22489: EQUAL
22490: IFFALSE 22500
// sExchange := true ;
22492: LD_ADDR_EXP 101
22496: PUSH
22497: LD_INT 1
22499: ST_TO_ADDR
// if p3 = 31 then
22500: LD_VAR 0 3
22504: PUSH
22505: LD_INT 31
22507: EQUAL
22508: IFFALSE 22518
// sFac := true ;
22510: LD_ADDR_EXP 102
22514: PUSH
22515: LD_INT 1
22517: ST_TO_ADDR
// if p3 = 32 then
22518: LD_VAR 0 3
22522: PUSH
22523: LD_INT 32
22525: EQUAL
22526: IFFALSE 22536
// sPower := true ;
22528: LD_ADDR_EXP 103
22532: PUSH
22533: LD_INT 1
22535: ST_TO_ADDR
// if p3 = 33 then
22536: LD_VAR 0 3
22540: PUSH
22541: LD_INT 33
22543: EQUAL
22544: IFFALSE 22554
// sRandom := true ;
22546: LD_ADDR_EXP 104
22550: PUSH
22551: LD_INT 1
22553: ST_TO_ADDR
// if p3 = 34 then
22554: LD_VAR 0 3
22558: PUSH
22559: LD_INT 34
22561: EQUAL
22562: IFFALSE 22572
// sShield := true ;
22564: LD_ADDR_EXP 105
22568: PUSH
22569: LD_INT 1
22571: ST_TO_ADDR
// if p3 = 35 then
22572: LD_VAR 0 3
22576: PUSH
22577: LD_INT 35
22579: EQUAL
22580: IFFALSE 22590
// sTime := true ;
22582: LD_ADDR_EXP 106
22586: PUSH
22587: LD_INT 1
22589: ST_TO_ADDR
// if p3 = 36 then
22590: LD_VAR 0 3
22594: PUSH
22595: LD_INT 36
22597: EQUAL
22598: IFFALSE 22608
// sTools := true ;
22600: LD_ADDR_EXP 107
22604: PUSH
22605: LD_INT 1
22607: ST_TO_ADDR
// if p3 = 101 then
22608: LD_VAR 0 3
22612: PUSH
22613: LD_INT 101
22615: EQUAL
22616: IFFALSE 22626
// sSold := true ;
22618: LD_ADDR_EXP 72
22622: PUSH
22623: LD_INT 1
22625: ST_TO_ADDR
// if p3 = 102 then
22626: LD_VAR 0 3
22630: PUSH
22631: LD_INT 102
22633: EQUAL
22634: IFFALSE 22644
// sDiff := true ;
22636: LD_ADDR_EXP 73
22640: PUSH
22641: LD_INT 1
22643: ST_TO_ADDR
// if p3 = 103 then
22644: LD_VAR 0 3
22648: PUSH
22649: LD_INT 103
22651: EQUAL
22652: IFFALSE 22662
// sFog := true ;
22654: LD_ADDR_EXP 76
22658: PUSH
22659: LD_INT 1
22661: ST_TO_ADDR
// if p3 = 104 then
22662: LD_VAR 0 3
22666: PUSH
22667: LD_INT 104
22669: EQUAL
22670: IFFALSE 22680
// sReset := true ;
22672: LD_ADDR_EXP 77
22676: PUSH
22677: LD_INT 1
22679: ST_TO_ADDR
// if p3 = 105 then
22680: LD_VAR 0 3
22684: PUSH
22685: LD_INT 105
22687: EQUAL
22688: IFFALSE 22698
// sSun := true ;
22690: LD_ADDR_EXP 78
22694: PUSH
22695: LD_INT 1
22697: ST_TO_ADDR
// if p3 = 106 then
22698: LD_VAR 0 3
22702: PUSH
22703: LD_INT 106
22705: EQUAL
22706: IFFALSE 22716
// sTiger := true ;
22708: LD_ADDR_EXP 74
22712: PUSH
22713: LD_INT 1
22715: ST_TO_ADDR
// if p3 = 107 then
22716: LD_VAR 0 3
22720: PUSH
22721: LD_INT 107
22723: EQUAL
22724: IFFALSE 22734
// sBomb := true ;
22726: LD_ADDR_EXP 75
22730: PUSH
22731: LD_INT 1
22733: ST_TO_ADDR
// if p3 = 108 then
22734: LD_VAR 0 3
22738: PUSH
22739: LD_INT 108
22741: EQUAL
22742: IFFALSE 22752
// sWound := true ;
22744: LD_ADDR_EXP 83
22748: PUSH
22749: LD_INT 1
22751: ST_TO_ADDR
// if p3 = 109 then
22752: LD_VAR 0 3
22756: PUSH
22757: LD_INT 109
22759: EQUAL
22760: IFFALSE 22770
// sBetray := true ;
22762: LD_ADDR_EXP 87
22766: PUSH
22767: LD_INT 1
22769: ST_TO_ADDR
// if p3 = 110 then
22770: LD_VAR 0 3
22774: PUSH
22775: LD_INT 110
22777: EQUAL
22778: IFFALSE 22788
// sContamin := true ;
22780: LD_ADDR_EXP 88
22784: PUSH
22785: LD_INT 1
22787: ST_TO_ADDR
// if p3 = 111 then
22788: LD_VAR 0 3
22792: PUSH
22793: LD_INT 111
22795: EQUAL
22796: IFFALSE 22806
// sOil := true ;
22798: LD_ADDR_EXP 90
22802: PUSH
22803: LD_INT 1
22805: ST_TO_ADDR
// if p3 = 112 then
22806: LD_VAR 0 3
22810: PUSH
22811: LD_INT 112
22813: EQUAL
22814: IFFALSE 22824
// sStu := true ;
22816: LD_ADDR_EXP 94
22820: PUSH
22821: LD_INT 1
22823: ST_TO_ADDR
// if p3 = 113 then
22824: LD_VAR 0 3
22828: PUSH
22829: LD_INT 113
22831: EQUAL
22832: IFFALSE 22842
// sBazooka := true ;
22834: LD_ADDR_EXP 97
22838: PUSH
22839: LD_INT 1
22841: ST_TO_ADDR
// if p3 = 114 then
22842: LD_VAR 0 3
22846: PUSH
22847: LD_INT 114
22849: EQUAL
22850: IFFALSE 22860
// sMortar := true ;
22852: LD_ADDR_EXP 98
22856: PUSH
22857: LD_INT 1
22859: ST_TO_ADDR
// if p3 = 115 then
22860: LD_VAR 0 3
22864: PUSH
22865: LD_INT 115
22867: EQUAL
22868: IFFALSE 22878
// sRanger := true ;
22870: LD_ADDR_EXP 108
22874: PUSH
22875: LD_INT 1
22877: ST_TO_ADDR
// if p3 = 116 then
22878: LD_VAR 0 3
22882: PUSH
22883: LD_INT 116
22885: EQUAL
22886: IFFALSE 22896
// sComputer := true ;
22888: LD_ADDR_EXP 109
22892: PUSH
22893: LD_INT 1
22895: ST_TO_ADDR
// if p3 = 117 then
22896: LD_VAR 0 3
22900: PUSH
22901: LD_INT 117
22903: EQUAL
22904: IFFALSE 22914
// s30 := true ;
22906: LD_ADDR_EXP 110
22910: PUSH
22911: LD_INT 1
22913: ST_TO_ADDR
// if p3 = 118 then
22914: LD_VAR 0 3
22918: PUSH
22919: LD_INT 118
22921: EQUAL
22922: IFFALSE 22932
// s60 := true ;
22924: LD_ADDR_EXP 111
22928: PUSH
22929: LD_INT 1
22931: ST_TO_ADDR
// end ; if p2 = hack_mode then
22932: LD_VAR 0 2
22936: PUSH
22937: LD_INT 101
22939: EQUAL
22940: IFFALSE 23068
// begin case p3 of 1 :
22942: LD_VAR 0 3
22946: PUSH
22947: LD_INT 1
22949: DOUBLE
22950: EQUAL
22951: IFTRUE 22955
22953: GO 22962
22955: POP
// hHackUnlimitedResources ; 2 :
22956: CALL 35331 0 0
22960: GO 23068
22962: LD_INT 2
22964: DOUBLE
22965: EQUAL
22966: IFTRUE 22970
22968: GO 22977
22970: POP
// hHackSetLevel10 ; 3 :
22971: CALL 35464 0 0
22975: GO 23068
22977: LD_INT 3
22979: DOUBLE
22980: EQUAL
22981: IFTRUE 22985
22983: GO 22992
22985: POP
// hHackSetLevel10YourUnits ; 4 :
22986: CALL 35549 0 0
22990: GO 23068
22992: LD_INT 4
22994: DOUBLE
22995: EQUAL
22996: IFTRUE 23000
22998: GO 23007
23000: POP
// hHackInvincible ; 5 :
23001: CALL 35997 0 0
23005: GO 23068
23007: LD_INT 5
23009: DOUBLE
23010: EQUAL
23011: IFTRUE 23015
23013: GO 23022
23015: POP
// hHackInvisible ; 6 :
23016: CALL 36108 0 0
23020: GO 23068
23022: LD_INT 6
23024: DOUBLE
23025: EQUAL
23026: IFTRUE 23030
23028: GO 23037
23030: POP
// hHackChangeYourSide ; 7 :
23031: CALL 36165 0 0
23035: GO 23068
23037: LD_INT 7
23039: DOUBLE
23040: EQUAL
23041: IFTRUE 23045
23043: GO 23052
23045: POP
// hHackChangeUnitSide ; 8 :
23046: CALL 36207 0 0
23050: GO 23068
23052: LD_INT 8
23054: DOUBLE
23055: EQUAL
23056: IFTRUE 23060
23058: GO 23067
23060: POP
// hHackFog ; end ;
23061: CALL 36308 0 0
23065: GO 23068
23067: POP
// end ; if p2 = game_save_mode then
23068: LD_VAR 0 2
23072: PUSH
23073: LD_INT 102
23075: EQUAL
23076: IFFALSE 23133
// begin if p3 = 1 then
23078: LD_VAR 0 3
23082: PUSH
23083: LD_INT 1
23085: EQUAL
23086: IFFALSE 23098
// globalGameSaveCounter := p4 ;
23088: LD_ADDR_EXP 54
23092: PUSH
23093: LD_VAR 0 4
23097: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
23098: LD_VAR 0 3
23102: PUSH
23103: LD_INT 2
23105: EQUAL
23106: IFFALSE 23114
23108: PUSH
23109: LD_EXP 54
23113: AND
23114: IFFALSE 23133
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
23116: LD_STRING setGameSaveCounter(
23118: PUSH
23119: LD_EXP 54
23123: STR
23124: PUSH
23125: LD_STRING )
23127: STR
23128: PPUSH
23129: CALL_OW 559
// end ; end ;
23133: LD_VAR 0 7
23137: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
23138: LD_INT 0
23140: PPUSH
// streamModeActive := false ;
23141: LD_ADDR_EXP 55
23145: PUSH
23146: LD_INT 0
23148: ST_TO_ADDR
// normalCounter := 36 ;
23149: LD_ADDR_EXP 56
23153: PUSH
23154: LD_INT 36
23156: ST_TO_ADDR
// hardcoreCounter := 18 ;
23157: LD_ADDR_EXP 57
23161: PUSH
23162: LD_INT 18
23164: ST_TO_ADDR
// sRocket := false ;
23165: LD_ADDR_EXP 60
23169: PUSH
23170: LD_INT 0
23172: ST_TO_ADDR
// sSpeed := false ;
23173: LD_ADDR_EXP 59
23177: PUSH
23178: LD_INT 0
23180: ST_TO_ADDR
// sEngine := false ;
23181: LD_ADDR_EXP 61
23185: PUSH
23186: LD_INT 0
23188: ST_TO_ADDR
// sSpec := false ;
23189: LD_ADDR_EXP 58
23193: PUSH
23194: LD_INT 0
23196: ST_TO_ADDR
// sLevel := false ;
23197: LD_ADDR_EXP 62
23201: PUSH
23202: LD_INT 0
23204: ST_TO_ADDR
// sArmoury := false ;
23205: LD_ADDR_EXP 63
23209: PUSH
23210: LD_INT 0
23212: ST_TO_ADDR
// sRadar := false ;
23213: LD_ADDR_EXP 64
23217: PUSH
23218: LD_INT 0
23220: ST_TO_ADDR
// sBunker := false ;
23221: LD_ADDR_EXP 65
23225: PUSH
23226: LD_INT 0
23228: ST_TO_ADDR
// sHack := false ;
23229: LD_ADDR_EXP 66
23233: PUSH
23234: LD_INT 0
23236: ST_TO_ADDR
// sFire := false ;
23237: LD_ADDR_EXP 67
23241: PUSH
23242: LD_INT 0
23244: ST_TO_ADDR
// sRefresh := false ;
23245: LD_ADDR_EXP 68
23249: PUSH
23250: LD_INT 0
23252: ST_TO_ADDR
// sExp := false ;
23253: LD_ADDR_EXP 69
23257: PUSH
23258: LD_INT 0
23260: ST_TO_ADDR
// sDepot := false ;
23261: LD_ADDR_EXP 70
23265: PUSH
23266: LD_INT 0
23268: ST_TO_ADDR
// sFlag := false ;
23269: LD_ADDR_EXP 71
23273: PUSH
23274: LD_INT 0
23276: ST_TO_ADDR
// sKamikadze := false ;
23277: LD_ADDR_EXP 79
23281: PUSH
23282: LD_INT 0
23284: ST_TO_ADDR
// sTroll := false ;
23285: LD_ADDR_EXP 80
23289: PUSH
23290: LD_INT 0
23292: ST_TO_ADDR
// sSlow := false ;
23293: LD_ADDR_EXP 81
23297: PUSH
23298: LD_INT 0
23300: ST_TO_ADDR
// sLack := false ;
23301: LD_ADDR_EXP 82
23305: PUSH
23306: LD_INT 0
23308: ST_TO_ADDR
// sTank := false ;
23309: LD_ADDR_EXP 84
23313: PUSH
23314: LD_INT 0
23316: ST_TO_ADDR
// sRemote := false ;
23317: LD_ADDR_EXP 85
23321: PUSH
23322: LD_INT 0
23324: ST_TO_ADDR
// sPowell := false ;
23325: LD_ADDR_EXP 86
23329: PUSH
23330: LD_INT 0
23332: ST_TO_ADDR
// sTeleport := false ;
23333: LD_ADDR_EXP 89
23337: PUSH
23338: LD_INT 0
23340: ST_TO_ADDR
// sOilTower := false ;
23341: LD_ADDR_EXP 91
23345: PUSH
23346: LD_INT 0
23348: ST_TO_ADDR
// sShovel := false ;
23349: LD_ADDR_EXP 92
23353: PUSH
23354: LD_INT 0
23356: ST_TO_ADDR
// sSheik := false ;
23357: LD_ADDR_EXP 93
23361: PUSH
23362: LD_INT 0
23364: ST_TO_ADDR
// sEarthquake := false ;
23365: LD_ADDR_EXP 95
23369: PUSH
23370: LD_INT 0
23372: ST_TO_ADDR
// sAI := false ;
23373: LD_ADDR_EXP 96
23377: PUSH
23378: LD_INT 0
23380: ST_TO_ADDR
// sCargo := false ;
23381: LD_ADDR_EXP 99
23385: PUSH
23386: LD_INT 0
23388: ST_TO_ADDR
// sDLaser := false ;
23389: LD_ADDR_EXP 100
23393: PUSH
23394: LD_INT 0
23396: ST_TO_ADDR
// sExchange := false ;
23397: LD_ADDR_EXP 101
23401: PUSH
23402: LD_INT 0
23404: ST_TO_ADDR
// sFac := false ;
23405: LD_ADDR_EXP 102
23409: PUSH
23410: LD_INT 0
23412: ST_TO_ADDR
// sPower := false ;
23413: LD_ADDR_EXP 103
23417: PUSH
23418: LD_INT 0
23420: ST_TO_ADDR
// sRandom := false ;
23421: LD_ADDR_EXP 104
23425: PUSH
23426: LD_INT 0
23428: ST_TO_ADDR
// sShield := false ;
23429: LD_ADDR_EXP 105
23433: PUSH
23434: LD_INT 0
23436: ST_TO_ADDR
// sTime := false ;
23437: LD_ADDR_EXP 106
23441: PUSH
23442: LD_INT 0
23444: ST_TO_ADDR
// sTools := false ;
23445: LD_ADDR_EXP 107
23449: PUSH
23450: LD_INT 0
23452: ST_TO_ADDR
// sSold := false ;
23453: LD_ADDR_EXP 72
23457: PUSH
23458: LD_INT 0
23460: ST_TO_ADDR
// sDiff := false ;
23461: LD_ADDR_EXP 73
23465: PUSH
23466: LD_INT 0
23468: ST_TO_ADDR
// sFog := false ;
23469: LD_ADDR_EXP 76
23473: PUSH
23474: LD_INT 0
23476: ST_TO_ADDR
// sReset := false ;
23477: LD_ADDR_EXP 77
23481: PUSH
23482: LD_INT 0
23484: ST_TO_ADDR
// sSun := false ;
23485: LD_ADDR_EXP 78
23489: PUSH
23490: LD_INT 0
23492: ST_TO_ADDR
// sTiger := false ;
23493: LD_ADDR_EXP 74
23497: PUSH
23498: LD_INT 0
23500: ST_TO_ADDR
// sBomb := false ;
23501: LD_ADDR_EXP 75
23505: PUSH
23506: LD_INT 0
23508: ST_TO_ADDR
// sWound := false ;
23509: LD_ADDR_EXP 83
23513: PUSH
23514: LD_INT 0
23516: ST_TO_ADDR
// sBetray := false ;
23517: LD_ADDR_EXP 87
23521: PUSH
23522: LD_INT 0
23524: ST_TO_ADDR
// sContamin := false ;
23525: LD_ADDR_EXP 88
23529: PUSH
23530: LD_INT 0
23532: ST_TO_ADDR
// sOil := false ;
23533: LD_ADDR_EXP 90
23537: PUSH
23538: LD_INT 0
23540: ST_TO_ADDR
// sStu := false ;
23541: LD_ADDR_EXP 94
23545: PUSH
23546: LD_INT 0
23548: ST_TO_ADDR
// sBazooka := false ;
23549: LD_ADDR_EXP 97
23553: PUSH
23554: LD_INT 0
23556: ST_TO_ADDR
// sMortar := false ;
23557: LD_ADDR_EXP 98
23561: PUSH
23562: LD_INT 0
23564: ST_TO_ADDR
// sRanger := false ;
23565: LD_ADDR_EXP 108
23569: PUSH
23570: LD_INT 0
23572: ST_TO_ADDR
// sComputer := false ;
23573: LD_ADDR_EXP 109
23577: PUSH
23578: LD_INT 0
23580: ST_TO_ADDR
// s30 := false ;
23581: LD_ADDR_EXP 110
23585: PUSH
23586: LD_INT 0
23588: ST_TO_ADDR
// s60 := false ;
23589: LD_ADDR_EXP 111
23593: PUSH
23594: LD_INT 0
23596: ST_TO_ADDR
// end ;
23597: LD_VAR 0 1
23601: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
23602: LD_INT 0
23604: PPUSH
23605: PPUSH
23606: PPUSH
23607: PPUSH
23608: PPUSH
23609: PPUSH
23610: PPUSH
// result := [ ] ;
23611: LD_ADDR_VAR 0 2
23615: PUSH
23616: EMPTY
23617: ST_TO_ADDR
// if campaign_id = 1 then
23618: LD_OWVAR 69
23622: PUSH
23623: LD_INT 1
23625: EQUAL
23626: IFFALSE 26792
// begin case mission_number of 1 :
23628: LD_OWVAR 70
23632: PUSH
23633: LD_INT 1
23635: DOUBLE
23636: EQUAL
23637: IFTRUE 23641
23639: GO 23717
23641: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
23642: LD_ADDR_VAR 0 2
23646: PUSH
23647: LD_INT 2
23649: PUSH
23650: LD_INT 4
23652: PUSH
23653: LD_INT 11
23655: PUSH
23656: LD_INT 12
23658: PUSH
23659: LD_INT 15
23661: PUSH
23662: LD_INT 16
23664: PUSH
23665: LD_INT 22
23667: PUSH
23668: LD_INT 23
23670: PUSH
23671: LD_INT 26
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 101
23687: PUSH
23688: LD_INT 102
23690: PUSH
23691: LD_INT 106
23693: PUSH
23694: LD_INT 116
23696: PUSH
23697: LD_INT 117
23699: PUSH
23700: LD_INT 118
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: ST_TO_ADDR
23715: GO 26790
23717: LD_INT 2
23719: DOUBLE
23720: EQUAL
23721: IFTRUE 23725
23723: GO 23809
23725: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
23726: LD_ADDR_VAR 0 2
23730: PUSH
23731: LD_INT 2
23733: PUSH
23734: LD_INT 4
23736: PUSH
23737: LD_INT 11
23739: PUSH
23740: LD_INT 12
23742: PUSH
23743: LD_INT 15
23745: PUSH
23746: LD_INT 16
23748: PUSH
23749: LD_INT 22
23751: PUSH
23752: LD_INT 23
23754: PUSH
23755: LD_INT 26
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 101
23771: PUSH
23772: LD_INT 102
23774: PUSH
23775: LD_INT 105
23777: PUSH
23778: LD_INT 106
23780: PUSH
23781: LD_INT 108
23783: PUSH
23784: LD_INT 116
23786: PUSH
23787: LD_INT 117
23789: PUSH
23790: LD_INT 118
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: ST_TO_ADDR
23807: GO 26790
23809: LD_INT 3
23811: DOUBLE
23812: EQUAL
23813: IFTRUE 23817
23815: GO 23905
23817: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
23818: LD_ADDR_VAR 0 2
23822: PUSH
23823: LD_INT 2
23825: PUSH
23826: LD_INT 4
23828: PUSH
23829: LD_INT 5
23831: PUSH
23832: LD_INT 11
23834: PUSH
23835: LD_INT 12
23837: PUSH
23838: LD_INT 15
23840: PUSH
23841: LD_INT 16
23843: PUSH
23844: LD_INT 22
23846: PUSH
23847: LD_INT 26
23849: PUSH
23850: LD_INT 36
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 101
23867: PUSH
23868: LD_INT 102
23870: PUSH
23871: LD_INT 105
23873: PUSH
23874: LD_INT 106
23876: PUSH
23877: LD_INT 108
23879: PUSH
23880: LD_INT 116
23882: PUSH
23883: LD_INT 117
23885: PUSH
23886: LD_INT 118
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: ST_TO_ADDR
23903: GO 26790
23905: LD_INT 4
23907: DOUBLE
23908: EQUAL
23909: IFTRUE 23913
23911: GO 24009
23913: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23914: LD_ADDR_VAR 0 2
23918: PUSH
23919: LD_INT 2
23921: PUSH
23922: LD_INT 4
23924: PUSH
23925: LD_INT 5
23927: PUSH
23928: LD_INT 8
23930: PUSH
23931: LD_INT 11
23933: PUSH
23934: LD_INT 12
23936: PUSH
23937: LD_INT 15
23939: PUSH
23940: LD_INT 16
23942: PUSH
23943: LD_INT 22
23945: PUSH
23946: LD_INT 23
23948: PUSH
23949: LD_INT 26
23951: PUSH
23952: LD_INT 36
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 101
23971: PUSH
23972: LD_INT 102
23974: PUSH
23975: LD_INT 105
23977: PUSH
23978: LD_INT 106
23980: PUSH
23981: LD_INT 108
23983: PUSH
23984: LD_INT 116
23986: PUSH
23987: LD_INT 117
23989: PUSH
23990: LD_INT 118
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: ST_TO_ADDR
24007: GO 26790
24009: LD_INT 5
24011: DOUBLE
24012: EQUAL
24013: IFTRUE 24017
24015: GO 24129
24017: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
24018: LD_ADDR_VAR 0 2
24022: PUSH
24023: LD_INT 2
24025: PUSH
24026: LD_INT 4
24028: PUSH
24029: LD_INT 5
24031: PUSH
24032: LD_INT 6
24034: PUSH
24035: LD_INT 8
24037: PUSH
24038: LD_INT 11
24040: PUSH
24041: LD_INT 12
24043: PUSH
24044: LD_INT 15
24046: PUSH
24047: LD_INT 16
24049: PUSH
24050: LD_INT 22
24052: PUSH
24053: LD_INT 23
24055: PUSH
24056: LD_INT 25
24058: PUSH
24059: LD_INT 26
24061: PUSH
24062: LD_INT 36
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 101
24083: PUSH
24084: LD_INT 102
24086: PUSH
24087: LD_INT 105
24089: PUSH
24090: LD_INT 106
24092: PUSH
24093: LD_INT 108
24095: PUSH
24096: LD_INT 109
24098: PUSH
24099: LD_INT 112
24101: PUSH
24102: LD_INT 116
24104: PUSH
24105: LD_INT 117
24107: PUSH
24108: LD_INT 118
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: ST_TO_ADDR
24127: GO 26790
24129: LD_INT 6
24131: DOUBLE
24132: EQUAL
24133: IFTRUE 24137
24135: GO 24269
24137: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
24138: LD_ADDR_VAR 0 2
24142: PUSH
24143: LD_INT 2
24145: PUSH
24146: LD_INT 4
24148: PUSH
24149: LD_INT 5
24151: PUSH
24152: LD_INT 6
24154: PUSH
24155: LD_INT 8
24157: PUSH
24158: LD_INT 11
24160: PUSH
24161: LD_INT 12
24163: PUSH
24164: LD_INT 15
24166: PUSH
24167: LD_INT 16
24169: PUSH
24170: LD_INT 20
24172: PUSH
24173: LD_INT 21
24175: PUSH
24176: LD_INT 22
24178: PUSH
24179: LD_INT 23
24181: PUSH
24182: LD_INT 25
24184: PUSH
24185: LD_INT 26
24187: PUSH
24188: LD_INT 30
24190: PUSH
24191: LD_INT 31
24193: PUSH
24194: LD_INT 32
24196: PUSH
24197: LD_INT 36
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 101
24223: PUSH
24224: LD_INT 102
24226: PUSH
24227: LD_INT 105
24229: PUSH
24230: LD_INT 106
24232: PUSH
24233: LD_INT 108
24235: PUSH
24236: LD_INT 109
24238: PUSH
24239: LD_INT 112
24241: PUSH
24242: LD_INT 116
24244: PUSH
24245: LD_INT 117
24247: PUSH
24248: LD_INT 118
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: ST_TO_ADDR
24267: GO 26790
24269: LD_INT 7
24271: DOUBLE
24272: EQUAL
24273: IFTRUE 24277
24275: GO 24389
24277: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
24278: LD_ADDR_VAR 0 2
24282: PUSH
24283: LD_INT 2
24285: PUSH
24286: LD_INT 4
24288: PUSH
24289: LD_INT 5
24291: PUSH
24292: LD_INT 7
24294: PUSH
24295: LD_INT 11
24297: PUSH
24298: LD_INT 12
24300: PUSH
24301: LD_INT 15
24303: PUSH
24304: LD_INT 16
24306: PUSH
24307: LD_INT 20
24309: PUSH
24310: LD_INT 21
24312: PUSH
24313: LD_INT 22
24315: PUSH
24316: LD_INT 23
24318: PUSH
24319: LD_INT 25
24321: PUSH
24322: LD_INT 26
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 101
24343: PUSH
24344: LD_INT 102
24346: PUSH
24347: LD_INT 103
24349: PUSH
24350: LD_INT 105
24352: PUSH
24353: LD_INT 106
24355: PUSH
24356: LD_INT 108
24358: PUSH
24359: LD_INT 112
24361: PUSH
24362: LD_INT 116
24364: PUSH
24365: LD_INT 117
24367: PUSH
24368: LD_INT 118
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: ST_TO_ADDR
24387: GO 26790
24389: LD_INT 8
24391: DOUBLE
24392: EQUAL
24393: IFTRUE 24397
24395: GO 24537
24397: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
24398: LD_ADDR_VAR 0 2
24402: PUSH
24403: LD_INT 2
24405: PUSH
24406: LD_INT 4
24408: PUSH
24409: LD_INT 5
24411: PUSH
24412: LD_INT 6
24414: PUSH
24415: LD_INT 7
24417: PUSH
24418: LD_INT 8
24420: PUSH
24421: LD_INT 11
24423: PUSH
24424: LD_INT 12
24426: PUSH
24427: LD_INT 15
24429: PUSH
24430: LD_INT 16
24432: PUSH
24433: LD_INT 20
24435: PUSH
24436: LD_INT 21
24438: PUSH
24439: LD_INT 22
24441: PUSH
24442: LD_INT 23
24444: PUSH
24445: LD_INT 25
24447: PUSH
24448: LD_INT 26
24450: PUSH
24451: LD_INT 30
24453: PUSH
24454: LD_INT 31
24456: PUSH
24457: LD_INT 32
24459: PUSH
24460: LD_INT 36
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 101
24487: PUSH
24488: LD_INT 102
24490: PUSH
24491: LD_INT 103
24493: PUSH
24494: LD_INT 105
24496: PUSH
24497: LD_INT 106
24499: PUSH
24500: LD_INT 108
24502: PUSH
24503: LD_INT 109
24505: PUSH
24506: LD_INT 112
24508: PUSH
24509: LD_INT 116
24511: PUSH
24512: LD_INT 117
24514: PUSH
24515: LD_INT 118
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: ST_TO_ADDR
24535: GO 26790
24537: LD_INT 9
24539: DOUBLE
24540: EQUAL
24541: IFTRUE 24545
24543: GO 24693
24545: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
24546: LD_ADDR_VAR 0 2
24550: PUSH
24551: LD_INT 2
24553: PUSH
24554: LD_INT 4
24556: PUSH
24557: LD_INT 5
24559: PUSH
24560: LD_INT 6
24562: PUSH
24563: LD_INT 7
24565: PUSH
24566: LD_INT 8
24568: PUSH
24569: LD_INT 11
24571: PUSH
24572: LD_INT 12
24574: PUSH
24575: LD_INT 15
24577: PUSH
24578: LD_INT 16
24580: PUSH
24581: LD_INT 20
24583: PUSH
24584: LD_INT 21
24586: PUSH
24587: LD_INT 22
24589: PUSH
24590: LD_INT 23
24592: PUSH
24593: LD_INT 25
24595: PUSH
24596: LD_INT 26
24598: PUSH
24599: LD_INT 28
24601: PUSH
24602: LD_INT 30
24604: PUSH
24605: LD_INT 31
24607: PUSH
24608: LD_INT 32
24610: PUSH
24611: LD_INT 36
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 101
24639: PUSH
24640: LD_INT 102
24642: PUSH
24643: LD_INT 103
24645: PUSH
24646: LD_INT 105
24648: PUSH
24649: LD_INT 106
24651: PUSH
24652: LD_INT 108
24654: PUSH
24655: LD_INT 109
24657: PUSH
24658: LD_INT 112
24660: PUSH
24661: LD_INT 114
24663: PUSH
24664: LD_INT 116
24666: PUSH
24667: LD_INT 117
24669: PUSH
24670: LD_INT 118
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: ST_TO_ADDR
24691: GO 26790
24693: LD_INT 10
24695: DOUBLE
24696: EQUAL
24697: IFTRUE 24701
24699: GO 24897
24701: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
24702: LD_ADDR_VAR 0 2
24706: PUSH
24707: LD_INT 2
24709: PUSH
24710: LD_INT 4
24712: PUSH
24713: LD_INT 5
24715: PUSH
24716: LD_INT 6
24718: PUSH
24719: LD_INT 7
24721: PUSH
24722: LD_INT 8
24724: PUSH
24725: LD_INT 9
24727: PUSH
24728: LD_INT 10
24730: PUSH
24731: LD_INT 11
24733: PUSH
24734: LD_INT 12
24736: PUSH
24737: LD_INT 13
24739: PUSH
24740: LD_INT 14
24742: PUSH
24743: LD_INT 15
24745: PUSH
24746: LD_INT 16
24748: PUSH
24749: LD_INT 17
24751: PUSH
24752: LD_INT 18
24754: PUSH
24755: LD_INT 19
24757: PUSH
24758: LD_INT 20
24760: PUSH
24761: LD_INT 21
24763: PUSH
24764: LD_INT 22
24766: PUSH
24767: LD_INT 23
24769: PUSH
24770: LD_INT 24
24772: PUSH
24773: LD_INT 25
24775: PUSH
24776: LD_INT 26
24778: PUSH
24779: LD_INT 28
24781: PUSH
24782: LD_INT 30
24784: PUSH
24785: LD_INT 31
24787: PUSH
24788: LD_INT 32
24790: PUSH
24791: LD_INT 36
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 101
24827: PUSH
24828: LD_INT 102
24830: PUSH
24831: LD_INT 103
24833: PUSH
24834: LD_INT 104
24836: PUSH
24837: LD_INT 105
24839: PUSH
24840: LD_INT 106
24842: PUSH
24843: LD_INT 107
24845: PUSH
24846: LD_INT 108
24848: PUSH
24849: LD_INT 109
24851: PUSH
24852: LD_INT 110
24854: PUSH
24855: LD_INT 111
24857: PUSH
24858: LD_INT 112
24860: PUSH
24861: LD_INT 114
24863: PUSH
24864: LD_INT 116
24866: PUSH
24867: LD_INT 117
24869: PUSH
24870: LD_INT 118
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: ST_TO_ADDR
24895: GO 26790
24897: LD_INT 11
24899: DOUBLE
24900: EQUAL
24901: IFTRUE 24905
24903: GO 25109
24905: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24906: LD_ADDR_VAR 0 2
24910: PUSH
24911: LD_INT 2
24913: PUSH
24914: LD_INT 3
24916: PUSH
24917: LD_INT 4
24919: PUSH
24920: LD_INT 5
24922: PUSH
24923: LD_INT 6
24925: PUSH
24926: LD_INT 7
24928: PUSH
24929: LD_INT 8
24931: PUSH
24932: LD_INT 9
24934: PUSH
24935: LD_INT 10
24937: PUSH
24938: LD_INT 11
24940: PUSH
24941: LD_INT 12
24943: PUSH
24944: LD_INT 13
24946: PUSH
24947: LD_INT 14
24949: PUSH
24950: LD_INT 15
24952: PUSH
24953: LD_INT 16
24955: PUSH
24956: LD_INT 17
24958: PUSH
24959: LD_INT 18
24961: PUSH
24962: LD_INT 19
24964: PUSH
24965: LD_INT 20
24967: PUSH
24968: LD_INT 21
24970: PUSH
24971: LD_INT 22
24973: PUSH
24974: LD_INT 23
24976: PUSH
24977: LD_INT 24
24979: PUSH
24980: LD_INT 25
24982: PUSH
24983: LD_INT 26
24985: PUSH
24986: LD_INT 28
24988: PUSH
24989: LD_INT 30
24991: PUSH
24992: LD_INT 31
24994: PUSH
24995: LD_INT 32
24997: PUSH
24998: LD_INT 34
25000: PUSH
25001: LD_INT 36
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 101
25039: PUSH
25040: LD_INT 102
25042: PUSH
25043: LD_INT 103
25045: PUSH
25046: LD_INT 104
25048: PUSH
25049: LD_INT 105
25051: PUSH
25052: LD_INT 106
25054: PUSH
25055: LD_INT 107
25057: PUSH
25058: LD_INT 108
25060: PUSH
25061: LD_INT 109
25063: PUSH
25064: LD_INT 110
25066: PUSH
25067: LD_INT 111
25069: PUSH
25070: LD_INT 112
25072: PUSH
25073: LD_INT 114
25075: PUSH
25076: LD_INT 116
25078: PUSH
25079: LD_INT 117
25081: PUSH
25082: LD_INT 118
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: ST_TO_ADDR
25107: GO 26790
25109: LD_INT 12
25111: DOUBLE
25112: EQUAL
25113: IFTRUE 25117
25115: GO 25337
25117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
25118: LD_ADDR_VAR 0 2
25122: PUSH
25123: LD_INT 1
25125: PUSH
25126: LD_INT 2
25128: PUSH
25129: LD_INT 3
25131: PUSH
25132: LD_INT 4
25134: PUSH
25135: LD_INT 5
25137: PUSH
25138: LD_INT 6
25140: PUSH
25141: LD_INT 7
25143: PUSH
25144: LD_INT 8
25146: PUSH
25147: LD_INT 9
25149: PUSH
25150: LD_INT 10
25152: PUSH
25153: LD_INT 11
25155: PUSH
25156: LD_INT 12
25158: PUSH
25159: LD_INT 13
25161: PUSH
25162: LD_INT 14
25164: PUSH
25165: LD_INT 15
25167: PUSH
25168: LD_INT 16
25170: PUSH
25171: LD_INT 17
25173: PUSH
25174: LD_INT 18
25176: PUSH
25177: LD_INT 19
25179: PUSH
25180: LD_INT 20
25182: PUSH
25183: LD_INT 21
25185: PUSH
25186: LD_INT 22
25188: PUSH
25189: LD_INT 23
25191: PUSH
25192: LD_INT 24
25194: PUSH
25195: LD_INT 25
25197: PUSH
25198: LD_INT 26
25200: PUSH
25201: LD_INT 27
25203: PUSH
25204: LD_INT 28
25206: PUSH
25207: LD_INT 30
25209: PUSH
25210: LD_INT 31
25212: PUSH
25213: LD_INT 32
25215: PUSH
25216: LD_INT 33
25218: PUSH
25219: LD_INT 34
25221: PUSH
25222: LD_INT 36
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 101
25263: PUSH
25264: LD_INT 102
25266: PUSH
25267: LD_INT 103
25269: PUSH
25270: LD_INT 104
25272: PUSH
25273: LD_INT 105
25275: PUSH
25276: LD_INT 106
25278: PUSH
25279: LD_INT 107
25281: PUSH
25282: LD_INT 108
25284: PUSH
25285: LD_INT 109
25287: PUSH
25288: LD_INT 110
25290: PUSH
25291: LD_INT 111
25293: PUSH
25294: LD_INT 112
25296: PUSH
25297: LD_INT 113
25299: PUSH
25300: LD_INT 114
25302: PUSH
25303: LD_INT 116
25305: PUSH
25306: LD_INT 117
25308: PUSH
25309: LD_INT 118
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: ST_TO_ADDR
25335: GO 26790
25337: LD_INT 13
25339: DOUBLE
25340: EQUAL
25341: IFTRUE 25345
25343: GO 25553
25345: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
25346: LD_ADDR_VAR 0 2
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: LD_INT 2
25356: PUSH
25357: LD_INT 3
25359: PUSH
25360: LD_INT 4
25362: PUSH
25363: LD_INT 5
25365: PUSH
25366: LD_INT 8
25368: PUSH
25369: LD_INT 9
25371: PUSH
25372: LD_INT 10
25374: PUSH
25375: LD_INT 11
25377: PUSH
25378: LD_INT 12
25380: PUSH
25381: LD_INT 14
25383: PUSH
25384: LD_INT 15
25386: PUSH
25387: LD_INT 16
25389: PUSH
25390: LD_INT 17
25392: PUSH
25393: LD_INT 18
25395: PUSH
25396: LD_INT 19
25398: PUSH
25399: LD_INT 20
25401: PUSH
25402: LD_INT 21
25404: PUSH
25405: LD_INT 22
25407: PUSH
25408: LD_INT 23
25410: PUSH
25411: LD_INT 24
25413: PUSH
25414: LD_INT 25
25416: PUSH
25417: LD_INT 26
25419: PUSH
25420: LD_INT 27
25422: PUSH
25423: LD_INT 28
25425: PUSH
25426: LD_INT 30
25428: PUSH
25429: LD_INT 31
25431: PUSH
25432: LD_INT 32
25434: PUSH
25435: LD_INT 33
25437: PUSH
25438: LD_INT 34
25440: PUSH
25441: LD_INT 36
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 101
25479: PUSH
25480: LD_INT 102
25482: PUSH
25483: LD_INT 103
25485: PUSH
25486: LD_INT 104
25488: PUSH
25489: LD_INT 105
25491: PUSH
25492: LD_INT 106
25494: PUSH
25495: LD_INT 107
25497: PUSH
25498: LD_INT 108
25500: PUSH
25501: LD_INT 109
25503: PUSH
25504: LD_INT 110
25506: PUSH
25507: LD_INT 111
25509: PUSH
25510: LD_INT 112
25512: PUSH
25513: LD_INT 113
25515: PUSH
25516: LD_INT 114
25518: PUSH
25519: LD_INT 116
25521: PUSH
25522: LD_INT 117
25524: PUSH
25525: LD_INT 118
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: ST_TO_ADDR
25551: GO 26790
25553: LD_INT 14
25555: DOUBLE
25556: EQUAL
25557: IFTRUE 25561
25559: GO 25785
25561: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
25562: LD_ADDR_VAR 0 2
25566: PUSH
25567: LD_INT 1
25569: PUSH
25570: LD_INT 2
25572: PUSH
25573: LD_INT 3
25575: PUSH
25576: LD_INT 4
25578: PUSH
25579: LD_INT 5
25581: PUSH
25582: LD_INT 6
25584: PUSH
25585: LD_INT 7
25587: PUSH
25588: LD_INT 8
25590: PUSH
25591: LD_INT 9
25593: PUSH
25594: LD_INT 10
25596: PUSH
25597: LD_INT 11
25599: PUSH
25600: LD_INT 12
25602: PUSH
25603: LD_INT 13
25605: PUSH
25606: LD_INT 14
25608: PUSH
25609: LD_INT 15
25611: PUSH
25612: LD_INT 16
25614: PUSH
25615: LD_INT 17
25617: PUSH
25618: LD_INT 18
25620: PUSH
25621: LD_INT 19
25623: PUSH
25624: LD_INT 20
25626: PUSH
25627: LD_INT 21
25629: PUSH
25630: LD_INT 22
25632: PUSH
25633: LD_INT 23
25635: PUSH
25636: LD_INT 24
25638: PUSH
25639: LD_INT 25
25641: PUSH
25642: LD_INT 26
25644: PUSH
25645: LD_INT 27
25647: PUSH
25648: LD_INT 28
25650: PUSH
25651: LD_INT 29
25653: PUSH
25654: LD_INT 30
25656: PUSH
25657: LD_INT 31
25659: PUSH
25660: LD_INT 32
25662: PUSH
25663: LD_INT 33
25665: PUSH
25666: LD_INT 34
25668: PUSH
25669: LD_INT 36
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 101
25711: PUSH
25712: LD_INT 102
25714: PUSH
25715: LD_INT 103
25717: PUSH
25718: LD_INT 104
25720: PUSH
25721: LD_INT 105
25723: PUSH
25724: LD_INT 106
25726: PUSH
25727: LD_INT 107
25729: PUSH
25730: LD_INT 108
25732: PUSH
25733: LD_INT 109
25735: PUSH
25736: LD_INT 110
25738: PUSH
25739: LD_INT 111
25741: PUSH
25742: LD_INT 112
25744: PUSH
25745: LD_INT 113
25747: PUSH
25748: LD_INT 114
25750: PUSH
25751: LD_INT 116
25753: PUSH
25754: LD_INT 117
25756: PUSH
25757: LD_INT 118
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: ST_TO_ADDR
25783: GO 26790
25785: LD_INT 15
25787: DOUBLE
25788: EQUAL
25789: IFTRUE 25793
25791: GO 26017
25793: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
25794: LD_ADDR_VAR 0 2
25798: PUSH
25799: LD_INT 1
25801: PUSH
25802: LD_INT 2
25804: PUSH
25805: LD_INT 3
25807: PUSH
25808: LD_INT 4
25810: PUSH
25811: LD_INT 5
25813: PUSH
25814: LD_INT 6
25816: PUSH
25817: LD_INT 7
25819: PUSH
25820: LD_INT 8
25822: PUSH
25823: LD_INT 9
25825: PUSH
25826: LD_INT 10
25828: PUSH
25829: LD_INT 11
25831: PUSH
25832: LD_INT 12
25834: PUSH
25835: LD_INT 13
25837: PUSH
25838: LD_INT 14
25840: PUSH
25841: LD_INT 15
25843: PUSH
25844: LD_INT 16
25846: PUSH
25847: LD_INT 17
25849: PUSH
25850: LD_INT 18
25852: PUSH
25853: LD_INT 19
25855: PUSH
25856: LD_INT 20
25858: PUSH
25859: LD_INT 21
25861: PUSH
25862: LD_INT 22
25864: PUSH
25865: LD_INT 23
25867: PUSH
25868: LD_INT 24
25870: PUSH
25871: LD_INT 25
25873: PUSH
25874: LD_INT 26
25876: PUSH
25877: LD_INT 27
25879: PUSH
25880: LD_INT 28
25882: PUSH
25883: LD_INT 29
25885: PUSH
25886: LD_INT 30
25888: PUSH
25889: LD_INT 31
25891: PUSH
25892: LD_INT 32
25894: PUSH
25895: LD_INT 33
25897: PUSH
25898: LD_INT 34
25900: PUSH
25901: LD_INT 36
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 101
25943: PUSH
25944: LD_INT 102
25946: PUSH
25947: LD_INT 103
25949: PUSH
25950: LD_INT 104
25952: PUSH
25953: LD_INT 105
25955: PUSH
25956: LD_INT 106
25958: PUSH
25959: LD_INT 107
25961: PUSH
25962: LD_INT 108
25964: PUSH
25965: LD_INT 109
25967: PUSH
25968: LD_INT 110
25970: PUSH
25971: LD_INT 111
25973: PUSH
25974: LD_INT 112
25976: PUSH
25977: LD_INT 113
25979: PUSH
25980: LD_INT 114
25982: PUSH
25983: LD_INT 116
25985: PUSH
25986: LD_INT 117
25988: PUSH
25989: LD_INT 118
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: ST_TO_ADDR
26015: GO 26790
26017: LD_INT 16
26019: DOUBLE
26020: EQUAL
26021: IFTRUE 26025
26023: GO 26161
26025: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
26026: LD_ADDR_VAR 0 2
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: LD_INT 4
26036: PUSH
26037: LD_INT 5
26039: PUSH
26040: LD_INT 7
26042: PUSH
26043: LD_INT 11
26045: PUSH
26046: LD_INT 12
26048: PUSH
26049: LD_INT 15
26051: PUSH
26052: LD_INT 16
26054: PUSH
26055: LD_INT 20
26057: PUSH
26058: LD_INT 21
26060: PUSH
26061: LD_INT 22
26063: PUSH
26064: LD_INT 23
26066: PUSH
26067: LD_INT 25
26069: PUSH
26070: LD_INT 26
26072: PUSH
26073: LD_INT 30
26075: PUSH
26076: LD_INT 31
26078: PUSH
26079: LD_INT 32
26081: PUSH
26082: LD_INT 33
26084: PUSH
26085: LD_INT 34
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 101
26111: PUSH
26112: LD_INT 102
26114: PUSH
26115: LD_INT 103
26117: PUSH
26118: LD_INT 106
26120: PUSH
26121: LD_INT 108
26123: PUSH
26124: LD_INT 112
26126: PUSH
26127: LD_INT 113
26129: PUSH
26130: LD_INT 114
26132: PUSH
26133: LD_INT 116
26135: PUSH
26136: LD_INT 117
26138: PUSH
26139: LD_INT 118
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: ST_TO_ADDR
26159: GO 26790
26161: LD_INT 17
26163: DOUBLE
26164: EQUAL
26165: IFTRUE 26169
26167: GO 26393
26169: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
26170: LD_ADDR_VAR 0 2
26174: PUSH
26175: LD_INT 1
26177: PUSH
26178: LD_INT 2
26180: PUSH
26181: LD_INT 3
26183: PUSH
26184: LD_INT 4
26186: PUSH
26187: LD_INT 5
26189: PUSH
26190: LD_INT 6
26192: PUSH
26193: LD_INT 7
26195: PUSH
26196: LD_INT 8
26198: PUSH
26199: LD_INT 9
26201: PUSH
26202: LD_INT 10
26204: PUSH
26205: LD_INT 11
26207: PUSH
26208: LD_INT 12
26210: PUSH
26211: LD_INT 13
26213: PUSH
26214: LD_INT 14
26216: PUSH
26217: LD_INT 15
26219: PUSH
26220: LD_INT 16
26222: PUSH
26223: LD_INT 17
26225: PUSH
26226: LD_INT 18
26228: PUSH
26229: LD_INT 19
26231: PUSH
26232: LD_INT 20
26234: PUSH
26235: LD_INT 21
26237: PUSH
26238: LD_INT 22
26240: PUSH
26241: LD_INT 23
26243: PUSH
26244: LD_INT 24
26246: PUSH
26247: LD_INT 25
26249: PUSH
26250: LD_INT 26
26252: PUSH
26253: LD_INT 27
26255: PUSH
26256: LD_INT 28
26258: PUSH
26259: LD_INT 29
26261: PUSH
26262: LD_INT 30
26264: PUSH
26265: LD_INT 31
26267: PUSH
26268: LD_INT 32
26270: PUSH
26271: LD_INT 33
26273: PUSH
26274: LD_INT 34
26276: PUSH
26277: LD_INT 36
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 101
26319: PUSH
26320: LD_INT 102
26322: PUSH
26323: LD_INT 103
26325: PUSH
26326: LD_INT 104
26328: PUSH
26329: LD_INT 105
26331: PUSH
26332: LD_INT 106
26334: PUSH
26335: LD_INT 107
26337: PUSH
26338: LD_INT 108
26340: PUSH
26341: LD_INT 109
26343: PUSH
26344: LD_INT 110
26346: PUSH
26347: LD_INT 111
26349: PUSH
26350: LD_INT 112
26352: PUSH
26353: LD_INT 113
26355: PUSH
26356: LD_INT 114
26358: PUSH
26359: LD_INT 116
26361: PUSH
26362: LD_INT 117
26364: PUSH
26365: LD_INT 118
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: ST_TO_ADDR
26391: GO 26790
26393: LD_INT 18
26395: DOUBLE
26396: EQUAL
26397: IFTRUE 26401
26399: GO 26549
26401: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
26402: LD_ADDR_VAR 0 2
26406: PUSH
26407: LD_INT 2
26409: PUSH
26410: LD_INT 4
26412: PUSH
26413: LD_INT 5
26415: PUSH
26416: LD_INT 7
26418: PUSH
26419: LD_INT 11
26421: PUSH
26422: LD_INT 12
26424: PUSH
26425: LD_INT 15
26427: PUSH
26428: LD_INT 16
26430: PUSH
26431: LD_INT 20
26433: PUSH
26434: LD_INT 21
26436: PUSH
26437: LD_INT 22
26439: PUSH
26440: LD_INT 23
26442: PUSH
26443: LD_INT 25
26445: PUSH
26446: LD_INT 26
26448: PUSH
26449: LD_INT 30
26451: PUSH
26452: LD_INT 31
26454: PUSH
26455: LD_INT 32
26457: PUSH
26458: LD_INT 33
26460: PUSH
26461: LD_INT 34
26463: PUSH
26464: LD_INT 35
26466: PUSH
26467: LD_INT 36
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 101
26495: PUSH
26496: LD_INT 102
26498: PUSH
26499: LD_INT 103
26501: PUSH
26502: LD_INT 106
26504: PUSH
26505: LD_INT 108
26507: PUSH
26508: LD_INT 112
26510: PUSH
26511: LD_INT 113
26513: PUSH
26514: LD_INT 114
26516: PUSH
26517: LD_INT 115
26519: PUSH
26520: LD_INT 116
26522: PUSH
26523: LD_INT 117
26525: PUSH
26526: LD_INT 118
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: ST_TO_ADDR
26547: GO 26790
26549: LD_INT 19
26551: DOUBLE
26552: EQUAL
26553: IFTRUE 26557
26555: GO 26789
26557: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
26558: LD_ADDR_VAR 0 2
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: LD_INT 2
26568: PUSH
26569: LD_INT 3
26571: PUSH
26572: LD_INT 4
26574: PUSH
26575: LD_INT 5
26577: PUSH
26578: LD_INT 6
26580: PUSH
26581: LD_INT 7
26583: PUSH
26584: LD_INT 8
26586: PUSH
26587: LD_INT 9
26589: PUSH
26590: LD_INT 10
26592: PUSH
26593: LD_INT 11
26595: PUSH
26596: LD_INT 12
26598: PUSH
26599: LD_INT 13
26601: PUSH
26602: LD_INT 14
26604: PUSH
26605: LD_INT 15
26607: PUSH
26608: LD_INT 16
26610: PUSH
26611: LD_INT 17
26613: PUSH
26614: LD_INT 18
26616: PUSH
26617: LD_INT 19
26619: PUSH
26620: LD_INT 20
26622: PUSH
26623: LD_INT 21
26625: PUSH
26626: LD_INT 22
26628: PUSH
26629: LD_INT 23
26631: PUSH
26632: LD_INT 24
26634: PUSH
26635: LD_INT 25
26637: PUSH
26638: LD_INT 26
26640: PUSH
26641: LD_INT 27
26643: PUSH
26644: LD_INT 28
26646: PUSH
26647: LD_INT 29
26649: PUSH
26650: LD_INT 30
26652: PUSH
26653: LD_INT 31
26655: PUSH
26656: LD_INT 32
26658: PUSH
26659: LD_INT 33
26661: PUSH
26662: LD_INT 34
26664: PUSH
26665: LD_INT 35
26667: PUSH
26668: LD_INT 36
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 101
26711: PUSH
26712: LD_INT 102
26714: PUSH
26715: LD_INT 103
26717: PUSH
26718: LD_INT 104
26720: PUSH
26721: LD_INT 105
26723: PUSH
26724: LD_INT 106
26726: PUSH
26727: LD_INT 107
26729: PUSH
26730: LD_INT 108
26732: PUSH
26733: LD_INT 109
26735: PUSH
26736: LD_INT 110
26738: PUSH
26739: LD_INT 111
26741: PUSH
26742: LD_INT 112
26744: PUSH
26745: LD_INT 113
26747: PUSH
26748: LD_INT 114
26750: PUSH
26751: LD_INT 115
26753: PUSH
26754: LD_INT 116
26756: PUSH
26757: LD_INT 117
26759: PUSH
26760: LD_INT 118
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: ST_TO_ADDR
26787: GO 26790
26789: POP
// end else
26790: GO 27021
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
26792: LD_ADDR_VAR 0 2
26796: PUSH
26797: LD_INT 1
26799: PUSH
26800: LD_INT 2
26802: PUSH
26803: LD_INT 3
26805: PUSH
26806: LD_INT 4
26808: PUSH
26809: LD_INT 5
26811: PUSH
26812: LD_INT 6
26814: PUSH
26815: LD_INT 7
26817: PUSH
26818: LD_INT 8
26820: PUSH
26821: LD_INT 9
26823: PUSH
26824: LD_INT 10
26826: PUSH
26827: LD_INT 11
26829: PUSH
26830: LD_INT 12
26832: PUSH
26833: LD_INT 13
26835: PUSH
26836: LD_INT 14
26838: PUSH
26839: LD_INT 15
26841: PUSH
26842: LD_INT 16
26844: PUSH
26845: LD_INT 17
26847: PUSH
26848: LD_INT 18
26850: PUSH
26851: LD_INT 19
26853: PUSH
26854: LD_INT 20
26856: PUSH
26857: LD_INT 21
26859: PUSH
26860: LD_INT 22
26862: PUSH
26863: LD_INT 23
26865: PUSH
26866: LD_INT 24
26868: PUSH
26869: LD_INT 25
26871: PUSH
26872: LD_INT 26
26874: PUSH
26875: LD_INT 27
26877: PUSH
26878: LD_INT 28
26880: PUSH
26881: LD_INT 29
26883: PUSH
26884: LD_INT 30
26886: PUSH
26887: LD_INT 31
26889: PUSH
26890: LD_INT 32
26892: PUSH
26893: LD_INT 33
26895: PUSH
26896: LD_INT 34
26898: PUSH
26899: LD_INT 35
26901: PUSH
26902: LD_INT 36
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 101
26945: PUSH
26946: LD_INT 102
26948: PUSH
26949: LD_INT 103
26951: PUSH
26952: LD_INT 104
26954: PUSH
26955: LD_INT 105
26957: PUSH
26958: LD_INT 106
26960: PUSH
26961: LD_INT 107
26963: PUSH
26964: LD_INT 108
26966: PUSH
26967: LD_INT 109
26969: PUSH
26970: LD_INT 110
26972: PUSH
26973: LD_INT 111
26975: PUSH
26976: LD_INT 112
26978: PUSH
26979: LD_INT 113
26981: PUSH
26982: LD_INT 114
26984: PUSH
26985: LD_INT 115
26987: PUSH
26988: LD_INT 116
26990: PUSH
26991: LD_INT 117
26993: PUSH
26994: LD_INT 118
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: ST_TO_ADDR
// if result then
27021: LD_VAR 0 2
27025: IFFALSE 27811
// begin normal :=  ;
27027: LD_ADDR_VAR 0 5
27031: PUSH
27032: LD_STRING 
27034: ST_TO_ADDR
// hardcore :=  ;
27035: LD_ADDR_VAR 0 6
27039: PUSH
27040: LD_STRING 
27042: ST_TO_ADDR
// active :=  ;
27043: LD_ADDR_VAR 0 7
27047: PUSH
27048: LD_STRING 
27050: ST_TO_ADDR
// for i = 1 to normalCounter do
27051: LD_ADDR_VAR 0 8
27055: PUSH
27056: DOUBLE
27057: LD_INT 1
27059: DEC
27060: ST_TO_ADDR
27061: LD_EXP 56
27065: PUSH
27066: FOR_TO
27067: IFFALSE 27168
// begin tmp := 0 ;
27069: LD_ADDR_VAR 0 3
27073: PUSH
27074: LD_STRING 0
27076: ST_TO_ADDR
// if result [ 1 ] then
27077: LD_VAR 0 2
27081: PUSH
27082: LD_INT 1
27084: ARRAY
27085: IFFALSE 27150
// if result [ 1 ] [ 1 ] = i then
27087: LD_VAR 0 2
27091: PUSH
27092: LD_INT 1
27094: ARRAY
27095: PUSH
27096: LD_INT 1
27098: ARRAY
27099: PUSH
27100: LD_VAR 0 8
27104: EQUAL
27105: IFFALSE 27150
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
27107: LD_ADDR_VAR 0 2
27111: PUSH
27112: LD_VAR 0 2
27116: PPUSH
27117: LD_INT 1
27119: PPUSH
27120: LD_VAR 0 2
27124: PUSH
27125: LD_INT 1
27127: ARRAY
27128: PPUSH
27129: LD_INT 1
27131: PPUSH
27132: CALL_OW 3
27136: PPUSH
27137: CALL_OW 1
27141: ST_TO_ADDR
// tmp := 1 ;
27142: LD_ADDR_VAR 0 3
27146: PUSH
27147: LD_STRING 1
27149: ST_TO_ADDR
// end ; normal := normal & tmp ;
27150: LD_ADDR_VAR 0 5
27154: PUSH
27155: LD_VAR 0 5
27159: PUSH
27160: LD_VAR 0 3
27164: STR
27165: ST_TO_ADDR
// end ;
27166: GO 27066
27168: POP
27169: POP
// for i = 1 to hardcoreCounter do
27170: LD_ADDR_VAR 0 8
27174: PUSH
27175: DOUBLE
27176: LD_INT 1
27178: DEC
27179: ST_TO_ADDR
27180: LD_EXP 57
27184: PUSH
27185: FOR_TO
27186: IFFALSE 27291
// begin tmp := 0 ;
27188: LD_ADDR_VAR 0 3
27192: PUSH
27193: LD_STRING 0
27195: ST_TO_ADDR
// if result [ 2 ] then
27196: LD_VAR 0 2
27200: PUSH
27201: LD_INT 2
27203: ARRAY
27204: IFFALSE 27273
// if result [ 2 ] [ 1 ] = 100 + i then
27206: LD_VAR 0 2
27210: PUSH
27211: LD_INT 2
27213: ARRAY
27214: PUSH
27215: LD_INT 1
27217: ARRAY
27218: PUSH
27219: LD_INT 100
27221: PUSH
27222: LD_VAR 0 8
27226: PLUS
27227: EQUAL
27228: IFFALSE 27273
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27230: LD_ADDR_VAR 0 2
27234: PUSH
27235: LD_VAR 0 2
27239: PPUSH
27240: LD_INT 2
27242: PPUSH
27243: LD_VAR 0 2
27247: PUSH
27248: LD_INT 2
27250: ARRAY
27251: PPUSH
27252: LD_INT 1
27254: PPUSH
27255: CALL_OW 3
27259: PPUSH
27260: CALL_OW 1
27264: ST_TO_ADDR
// tmp := 1 ;
27265: LD_ADDR_VAR 0 3
27269: PUSH
27270: LD_STRING 1
27272: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27273: LD_ADDR_VAR 0 6
27277: PUSH
27278: LD_VAR 0 6
27282: PUSH
27283: LD_VAR 0 3
27287: STR
27288: ST_TO_ADDR
// end ;
27289: GO 27185
27291: POP
27292: POP
// if isGameLoad then
27293: LD_VAR 0 1
27297: IFFALSE 27772
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
27299: LD_ADDR_VAR 0 4
27303: PUSH
27304: LD_EXP 60
27308: PUSH
27309: LD_EXP 59
27313: PUSH
27314: LD_EXP 61
27318: PUSH
27319: LD_EXP 58
27323: PUSH
27324: LD_EXP 62
27328: PUSH
27329: LD_EXP 63
27333: PUSH
27334: LD_EXP 64
27338: PUSH
27339: LD_EXP 65
27343: PUSH
27344: LD_EXP 66
27348: PUSH
27349: LD_EXP 67
27353: PUSH
27354: LD_EXP 68
27358: PUSH
27359: LD_EXP 69
27363: PUSH
27364: LD_EXP 70
27368: PUSH
27369: LD_EXP 71
27373: PUSH
27374: LD_EXP 79
27378: PUSH
27379: LD_EXP 80
27383: PUSH
27384: LD_EXP 81
27388: PUSH
27389: LD_EXP 82
27393: PUSH
27394: LD_EXP 84
27398: PUSH
27399: LD_EXP 85
27403: PUSH
27404: LD_EXP 86
27408: PUSH
27409: LD_EXP 89
27413: PUSH
27414: LD_EXP 91
27418: PUSH
27419: LD_EXP 92
27423: PUSH
27424: LD_EXP 93
27428: PUSH
27429: LD_EXP 95
27433: PUSH
27434: LD_EXP 96
27438: PUSH
27439: LD_EXP 99
27443: PUSH
27444: LD_EXP 100
27448: PUSH
27449: LD_EXP 101
27453: PUSH
27454: LD_EXP 102
27458: PUSH
27459: LD_EXP 103
27463: PUSH
27464: LD_EXP 104
27468: PUSH
27469: LD_EXP 105
27473: PUSH
27474: LD_EXP 106
27478: PUSH
27479: LD_EXP 107
27483: PUSH
27484: LD_EXP 72
27488: PUSH
27489: LD_EXP 73
27493: PUSH
27494: LD_EXP 76
27498: PUSH
27499: LD_EXP 77
27503: PUSH
27504: LD_EXP 78
27508: PUSH
27509: LD_EXP 74
27513: PUSH
27514: LD_EXP 75
27518: PUSH
27519: LD_EXP 83
27523: PUSH
27524: LD_EXP 87
27528: PUSH
27529: LD_EXP 88
27533: PUSH
27534: LD_EXP 90
27538: PUSH
27539: LD_EXP 94
27543: PUSH
27544: LD_EXP 97
27548: PUSH
27549: LD_EXP 98
27553: PUSH
27554: LD_EXP 108
27558: PUSH
27559: LD_EXP 109
27563: PUSH
27564: LD_EXP 110
27568: PUSH
27569: LD_EXP 111
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: ST_TO_ADDR
// tmp :=  ;
27630: LD_ADDR_VAR 0 3
27634: PUSH
27635: LD_STRING 
27637: ST_TO_ADDR
// for i = 1 to normalCounter do
27638: LD_ADDR_VAR 0 8
27642: PUSH
27643: DOUBLE
27644: LD_INT 1
27646: DEC
27647: ST_TO_ADDR
27648: LD_EXP 56
27652: PUSH
27653: FOR_TO
27654: IFFALSE 27690
// begin if flags [ i ] then
27656: LD_VAR 0 4
27660: PUSH
27661: LD_VAR 0 8
27665: ARRAY
27666: IFFALSE 27688
// tmp := tmp & i & ; ;
27668: LD_ADDR_VAR 0 3
27672: PUSH
27673: LD_VAR 0 3
27677: PUSH
27678: LD_VAR 0 8
27682: STR
27683: PUSH
27684: LD_STRING ;
27686: STR
27687: ST_TO_ADDR
// end ;
27688: GO 27653
27690: POP
27691: POP
// for i = 1 to hardcoreCounter do
27692: LD_ADDR_VAR 0 8
27696: PUSH
27697: DOUBLE
27698: LD_INT 1
27700: DEC
27701: ST_TO_ADDR
27702: LD_EXP 57
27706: PUSH
27707: FOR_TO
27708: IFFALSE 27754
// begin if flags [ normalCounter + i ] then
27710: LD_VAR 0 4
27714: PUSH
27715: LD_EXP 56
27719: PUSH
27720: LD_VAR 0 8
27724: PLUS
27725: ARRAY
27726: IFFALSE 27752
// tmp := tmp & ( 100 + i ) & ; ;
27728: LD_ADDR_VAR 0 3
27732: PUSH
27733: LD_VAR 0 3
27737: PUSH
27738: LD_INT 100
27740: PUSH
27741: LD_VAR 0 8
27745: PLUS
27746: STR
27747: PUSH
27748: LD_STRING ;
27750: STR
27751: ST_TO_ADDR
// end ;
27752: GO 27707
27754: POP
27755: POP
// if tmp then
27756: LD_VAR 0 3
27760: IFFALSE 27772
// active := tmp ;
27762: LD_ADDR_VAR 0 7
27766: PUSH
27767: LD_VAR 0 3
27771: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
27772: LD_STRING getStreamItemsFromMission("
27774: PUSH
27775: LD_VAR 0 5
27779: STR
27780: PUSH
27781: LD_STRING ","
27783: STR
27784: PUSH
27785: LD_VAR 0 6
27789: STR
27790: PUSH
27791: LD_STRING ","
27793: STR
27794: PUSH
27795: LD_VAR 0 7
27799: STR
27800: PUSH
27801: LD_STRING ")
27803: STR
27804: PPUSH
27805: CALL_OW 559
// end else
27809: GO 27818
// ToLua ( getStreamItemsFromMission("","","") ) ;
27811: LD_STRING getStreamItemsFromMission("","","")
27813: PPUSH
27814: CALL_OW 559
// end ;
27818: LD_VAR 0 2
27822: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27823: LD_EXP 55
27827: IFFALSE 27835
27829: PUSH
27830: LD_EXP 60
27834: AND
27835: IFFALSE 27959
27837: GO 27839
27839: DISABLE
27840: LD_INT 0
27842: PPUSH
27843: PPUSH
// begin enable ;
27844: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27845: LD_ADDR_VAR 0 2
27849: PUSH
27850: LD_INT 22
27852: PUSH
27853: LD_OWVAR 2
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 2
27864: PUSH
27865: LD_INT 34
27867: PUSH
27868: LD_INT 7
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 34
27877: PUSH
27878: LD_INT 45
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 34
27887: PUSH
27888: LD_INT 28
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 34
27897: PUSH
27898: LD_INT 47
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PPUSH
27916: CALL_OW 69
27920: ST_TO_ADDR
// if not tmp then
27921: LD_VAR 0 2
27925: NOT
27926: IFFALSE 27930
// exit ;
27928: GO 27959
// for i in tmp do
27930: LD_ADDR_VAR 0 1
27934: PUSH
27935: LD_VAR 0 2
27939: PUSH
27940: FOR_IN
27941: IFFALSE 27957
// begin SetLives ( i , 0 ) ;
27943: LD_VAR 0 1
27947: PPUSH
27948: LD_INT 0
27950: PPUSH
27951: CALL_OW 234
// end ;
27955: GO 27940
27957: POP
27958: POP
// end ;
27959: PPOPN 2
27961: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27962: LD_EXP 55
27966: IFFALSE 27974
27968: PUSH
27969: LD_EXP 61
27973: AND
27974: IFFALSE 28058
27976: GO 27978
27978: DISABLE
27979: LD_INT 0
27981: PPUSH
27982: PPUSH
// begin enable ;
27983: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27984: LD_ADDR_VAR 0 2
27988: PUSH
27989: LD_INT 22
27991: PUSH
27992: LD_OWVAR 2
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 32
28003: PUSH
28004: LD_INT 3
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PPUSH
28015: CALL_OW 69
28019: ST_TO_ADDR
// if not tmp then
28020: LD_VAR 0 2
28024: NOT
28025: IFFALSE 28029
// exit ;
28027: GO 28058
// for i in tmp do
28029: LD_ADDR_VAR 0 1
28033: PUSH
28034: LD_VAR 0 2
28038: PUSH
28039: FOR_IN
28040: IFFALSE 28056
// begin SetLives ( i , 0 ) ;
28042: LD_VAR 0 1
28046: PPUSH
28047: LD_INT 0
28049: PPUSH
28050: CALL_OW 234
// end ;
28054: GO 28039
28056: POP
28057: POP
// end ;
28058: PPOPN 2
28060: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
28061: LD_EXP 55
28065: IFFALSE 28073
28067: PUSH
28068: LD_EXP 58
28072: AND
28073: IFFALSE 28166
28075: GO 28077
28077: DISABLE
28078: LD_INT 0
28080: PPUSH
// begin enable ;
28081: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
28082: LD_ADDR_VAR 0 1
28086: PUSH
28087: LD_INT 22
28089: PUSH
28090: LD_OWVAR 2
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 2
28101: PUSH
28102: LD_INT 25
28104: PUSH
28105: LD_INT 5
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 25
28114: PUSH
28115: LD_INT 9
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 25
28124: PUSH
28125: LD_INT 8
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PPUSH
28142: CALL_OW 69
28146: PUSH
28147: FOR_IN
28148: IFFALSE 28164
// begin SetClass ( i , 1 ) ;
28150: LD_VAR 0 1
28154: PPUSH
28155: LD_INT 1
28157: PPUSH
28158: CALL_OW 336
// end ;
28162: GO 28147
28164: POP
28165: POP
// end ;
28166: PPOPN 1
28168: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28169: LD_EXP 55
28173: IFFALSE 28181
28175: PUSH
28176: LD_EXP 59
28180: AND
28181: IFFALSE 28193
28183: PUSH
28184: LD_OWVAR 65
28188: PUSH
28189: LD_INT 7
28191: LESS
28192: AND
28193: IFFALSE 28207
28195: GO 28197
28197: DISABLE
// begin enable ;
28198: ENABLE
// game_speed := 7 ;
28199: LD_ADDR_OWVAR 65
28203: PUSH
28204: LD_INT 7
28206: ST_TO_ADDR
// end ;
28207: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28208: LD_EXP 55
28212: IFFALSE 28220
28214: PUSH
28215: LD_EXP 62
28219: AND
28220: IFFALSE 28422
28222: GO 28224
28224: DISABLE
28225: LD_INT 0
28227: PPUSH
28228: PPUSH
28229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28230: LD_ADDR_VAR 0 3
28234: PUSH
28235: LD_INT 81
28237: PUSH
28238: LD_OWVAR 2
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 21
28249: PUSH
28250: LD_INT 1
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PPUSH
28261: CALL_OW 69
28265: ST_TO_ADDR
// if not tmp then
28266: LD_VAR 0 3
28270: NOT
28271: IFFALSE 28275
// exit ;
28273: GO 28422
// if tmp > 5 then
28275: LD_VAR 0 3
28279: PUSH
28280: LD_INT 5
28282: GREATER
28283: IFFALSE 28295
// k := 5 else
28285: LD_ADDR_VAR 0 2
28289: PUSH
28290: LD_INT 5
28292: ST_TO_ADDR
28293: GO 28305
// k := tmp ;
28295: LD_ADDR_VAR 0 2
28299: PUSH
28300: LD_VAR 0 3
28304: ST_TO_ADDR
// for i := 1 to k do
28305: LD_ADDR_VAR 0 1
28309: PUSH
28310: DOUBLE
28311: LD_INT 1
28313: DEC
28314: ST_TO_ADDR
28315: LD_VAR 0 2
28319: PUSH
28320: FOR_TO
28321: IFFALSE 28420
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28323: LD_VAR 0 3
28327: PUSH
28328: LD_VAR 0 1
28332: ARRAY
28333: PPUSH
28334: LD_VAR 0 1
28338: PUSH
28339: LD_INT 4
28341: MOD
28342: PUSH
28343: LD_INT 1
28345: PLUS
28346: PPUSH
28347: CALL_OW 259
28351: PUSH
28352: LD_INT 10
28354: LESS
28355: IFFALSE 28418
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28357: LD_VAR 0 3
28361: PUSH
28362: LD_VAR 0 1
28366: ARRAY
28367: PPUSH
28368: LD_VAR 0 1
28372: PUSH
28373: LD_INT 4
28375: MOD
28376: PUSH
28377: LD_INT 1
28379: PLUS
28380: PPUSH
28381: LD_VAR 0 3
28385: PUSH
28386: LD_VAR 0 1
28390: ARRAY
28391: PPUSH
28392: LD_VAR 0 1
28396: PUSH
28397: LD_INT 4
28399: MOD
28400: PUSH
28401: LD_INT 1
28403: PLUS
28404: PPUSH
28405: CALL_OW 259
28409: PUSH
28410: LD_INT 1
28412: PLUS
28413: PPUSH
28414: CALL_OW 237
28418: GO 28320
28420: POP
28421: POP
// end ;
28422: PPOPN 3
28424: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28425: LD_EXP 55
28429: IFFALSE 28437
28431: PUSH
28432: LD_EXP 63
28436: AND
28437: IFFALSE 28457
28439: GO 28441
28441: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28442: LD_INT 4
28444: PPUSH
28445: LD_OWVAR 2
28449: PPUSH
28450: LD_INT 0
28452: PPUSH
28453: CALL_OW 324
28457: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28458: LD_EXP 55
28462: IFFALSE 28470
28464: PUSH
28465: LD_EXP 92
28469: AND
28470: IFFALSE 28490
28472: GO 28474
28474: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28475: LD_INT 19
28477: PPUSH
28478: LD_OWVAR 2
28482: PPUSH
28483: LD_INT 0
28485: PPUSH
28486: CALL_OW 324
28490: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28491: LD_EXP 55
28495: IFFALSE 28503
28497: PUSH
28498: LD_EXP 64
28502: AND
28503: IFFALSE 28605
28505: GO 28507
28507: DISABLE
28508: LD_INT 0
28510: PPUSH
28511: PPUSH
// begin enable ;
28512: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28513: LD_ADDR_VAR 0 2
28517: PUSH
28518: LD_INT 22
28520: PUSH
28521: LD_OWVAR 2
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 2
28532: PUSH
28533: LD_INT 34
28535: PUSH
28536: LD_INT 11
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 34
28545: PUSH
28546: LD_INT 30
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: LIST
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PPUSH
28562: CALL_OW 69
28566: ST_TO_ADDR
// if not tmp then
28567: LD_VAR 0 2
28571: NOT
28572: IFFALSE 28576
// exit ;
28574: GO 28605
// for i in tmp do
28576: LD_ADDR_VAR 0 1
28580: PUSH
28581: LD_VAR 0 2
28585: PUSH
28586: FOR_IN
28587: IFFALSE 28603
// begin SetLives ( i , 0 ) ;
28589: LD_VAR 0 1
28593: PPUSH
28594: LD_INT 0
28596: PPUSH
28597: CALL_OW 234
// end ;
28601: GO 28586
28603: POP
28604: POP
// end ;
28605: PPOPN 2
28607: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28608: LD_EXP 55
28612: IFFALSE 28620
28614: PUSH
28615: LD_EXP 65
28619: AND
28620: IFFALSE 28640
28622: GO 28624
28624: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28625: LD_INT 32
28627: PPUSH
28628: LD_OWVAR 2
28632: PPUSH
28633: LD_INT 0
28635: PPUSH
28636: CALL_OW 324
28640: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28641: LD_EXP 55
28645: IFFALSE 28653
28647: PUSH
28648: LD_EXP 66
28652: AND
28653: IFFALSE 28836
28655: GO 28657
28657: DISABLE
28658: LD_INT 0
28660: PPUSH
28661: PPUSH
28662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28663: LD_ADDR_VAR 0 2
28667: PUSH
28668: LD_INT 22
28670: PUSH
28671: LD_OWVAR 2
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 33
28682: PUSH
28683: LD_INT 3
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PPUSH
28694: CALL_OW 69
28698: ST_TO_ADDR
// if not tmp then
28699: LD_VAR 0 2
28703: NOT
28704: IFFALSE 28708
// exit ;
28706: GO 28836
// side := 0 ;
28708: LD_ADDR_VAR 0 3
28712: PUSH
28713: LD_INT 0
28715: ST_TO_ADDR
// for i := 1 to 8 do
28716: LD_ADDR_VAR 0 1
28720: PUSH
28721: DOUBLE
28722: LD_INT 1
28724: DEC
28725: ST_TO_ADDR
28726: LD_INT 8
28728: PUSH
28729: FOR_TO
28730: IFFALSE 28780
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28732: LD_OWVAR 2
28736: PUSH
28737: LD_VAR 0 1
28741: NONEQUAL
28742: IFFALSE 28764
28744: PUSH
28745: LD_OWVAR 2
28749: PPUSH
28750: LD_VAR 0 1
28754: PPUSH
28755: CALL_OW 81
28759: PUSH
28760: LD_INT 2
28762: EQUAL
28763: AND
28764: IFFALSE 28778
// begin side := i ;
28766: LD_ADDR_VAR 0 3
28770: PUSH
28771: LD_VAR 0 1
28775: ST_TO_ADDR
// break ;
28776: GO 28780
// end ;
28778: GO 28729
28780: POP
28781: POP
// if not side then
28782: LD_VAR 0 3
28786: NOT
28787: IFFALSE 28791
// exit ;
28789: GO 28836
// for i := 1 to tmp do
28791: LD_ADDR_VAR 0 1
28795: PUSH
28796: DOUBLE
28797: LD_INT 1
28799: DEC
28800: ST_TO_ADDR
28801: LD_VAR 0 2
28805: PUSH
28806: FOR_TO
28807: IFFALSE 28834
// if Prob ( 60 ) then
28809: LD_INT 60
28811: PPUSH
28812: CALL_OW 13
28816: IFFALSE 28832
// SetSide ( i , side ) ;
28818: LD_VAR 0 1
28822: PPUSH
28823: LD_VAR 0 3
28827: PPUSH
28828: CALL_OW 235
28832: GO 28806
28834: POP
28835: POP
// end ;
28836: PPOPN 3
28838: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28839: LD_EXP 55
28843: IFFALSE 28851
28845: PUSH
28846: LD_EXP 68
28850: AND
28851: IFFALSE 28970
28853: GO 28855
28855: DISABLE
28856: LD_INT 0
28858: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28859: LD_ADDR_VAR 0 1
28863: PUSH
28864: LD_INT 22
28866: PUSH
28867: LD_OWVAR 2
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 21
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 3
28888: PUSH
28889: LD_INT 23
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: LIST
28907: PPUSH
28908: CALL_OW 69
28912: PUSH
28913: FOR_IN
28914: IFFALSE 28968
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28916: LD_VAR 0 1
28920: PPUSH
28921: CALL_OW 257
28925: PUSH
28926: LD_INT 1
28928: PUSH
28929: LD_INT 2
28931: PUSH
28932: LD_INT 3
28934: PUSH
28935: LD_INT 4
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: IN
28944: IFFALSE 28966
// SetClass ( un , rand ( 1 , 4 ) ) ;
28946: LD_VAR 0 1
28950: PPUSH
28951: LD_INT 1
28953: PPUSH
28954: LD_INT 4
28956: PPUSH
28957: CALL_OW 12
28961: PPUSH
28962: CALL_OW 336
28966: GO 28913
28968: POP
28969: POP
// end ;
28970: PPOPN 1
28972: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28973: LD_EXP 55
28977: IFFALSE 28985
28979: PUSH
28980: LD_EXP 67
28984: AND
28985: IFFALSE 29064
28987: GO 28989
28989: DISABLE
28990: LD_INT 0
28992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28993: LD_ADDR_VAR 0 1
28997: PUSH
28998: LD_INT 22
29000: PUSH
29001: LD_OWVAR 2
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 21
29012: PUSH
29013: LD_INT 3
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PPUSH
29024: CALL_OW 69
29028: ST_TO_ADDR
// if not tmp then
29029: LD_VAR 0 1
29033: NOT
29034: IFFALSE 29038
// exit ;
29036: GO 29064
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
29038: LD_VAR 0 1
29042: PUSH
29043: LD_INT 1
29045: PPUSH
29046: LD_VAR 0 1
29050: PPUSH
29051: CALL_OW 12
29055: ARRAY
29056: PPUSH
29057: LD_INT 100
29059: PPUSH
29060: CALL_OW 234
// end ;
29064: PPOPN 1
29066: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
29067: LD_EXP 55
29071: IFFALSE 29079
29073: PUSH
29074: LD_EXP 69
29078: AND
29079: IFFALSE 29177
29081: GO 29083
29083: DISABLE
29084: LD_INT 0
29086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29087: LD_ADDR_VAR 0 1
29091: PUSH
29092: LD_INT 22
29094: PUSH
29095: LD_OWVAR 2
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 21
29106: PUSH
29107: LD_INT 1
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PPUSH
29118: CALL_OW 69
29122: ST_TO_ADDR
// if not tmp then
29123: LD_VAR 0 1
29127: NOT
29128: IFFALSE 29132
// exit ;
29130: GO 29177
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
29132: LD_VAR 0 1
29136: PUSH
29137: LD_INT 1
29139: PPUSH
29140: LD_VAR 0 1
29144: PPUSH
29145: CALL_OW 12
29149: ARRAY
29150: PPUSH
29151: LD_INT 1
29153: PPUSH
29154: LD_INT 4
29156: PPUSH
29157: CALL_OW 12
29161: PPUSH
29162: LD_INT 3000
29164: PPUSH
29165: LD_INT 9000
29167: PPUSH
29168: CALL_OW 12
29172: PPUSH
29173: CALL_OW 492
// end ;
29177: PPOPN 1
29179: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29180: LD_EXP 55
29184: IFFALSE 29192
29186: PUSH
29187: LD_EXP 70
29191: AND
29192: IFFALSE 29212
29194: GO 29196
29196: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29197: LD_INT 1
29199: PPUSH
29200: LD_OWVAR 2
29204: PPUSH
29205: LD_INT 0
29207: PPUSH
29208: CALL_OW 324
29212: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29213: LD_EXP 55
29217: IFFALSE 29225
29219: PUSH
29220: LD_EXP 71
29224: AND
29225: IFFALSE 29308
29227: GO 29229
29229: DISABLE
29230: LD_INT 0
29232: PPUSH
29233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29234: LD_ADDR_VAR 0 2
29238: PUSH
29239: LD_INT 22
29241: PUSH
29242: LD_OWVAR 2
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 21
29253: PUSH
29254: LD_INT 3
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PPUSH
29265: CALL_OW 69
29269: ST_TO_ADDR
// if not tmp then
29270: LD_VAR 0 2
29274: NOT
29275: IFFALSE 29279
// exit ;
29277: GO 29308
// for i in tmp do
29279: LD_ADDR_VAR 0 1
29283: PUSH
29284: LD_VAR 0 2
29288: PUSH
29289: FOR_IN
29290: IFFALSE 29306
// SetBLevel ( i , 10 ) ;
29292: LD_VAR 0 1
29296: PPUSH
29297: LD_INT 10
29299: PPUSH
29300: CALL_OW 241
29304: GO 29289
29306: POP
29307: POP
// end ;
29308: PPOPN 2
29310: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29311: LD_EXP 55
29315: IFFALSE 29323
29317: PUSH
29318: LD_EXP 72
29322: AND
29323: IFFALSE 29434
29325: GO 29327
29327: DISABLE
29328: LD_INT 0
29330: PPUSH
29331: PPUSH
29332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29333: LD_ADDR_VAR 0 3
29337: PUSH
29338: LD_INT 22
29340: PUSH
29341: LD_OWVAR 2
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 25
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PPUSH
29364: CALL_OW 69
29368: ST_TO_ADDR
// if not tmp then
29369: LD_VAR 0 3
29373: NOT
29374: IFFALSE 29378
// exit ;
29376: GO 29434
// un := tmp [ rand ( 1 , tmp ) ] ;
29378: LD_ADDR_VAR 0 2
29382: PUSH
29383: LD_VAR 0 3
29387: PUSH
29388: LD_INT 1
29390: PPUSH
29391: LD_VAR 0 3
29395: PPUSH
29396: CALL_OW 12
29400: ARRAY
29401: ST_TO_ADDR
// if Crawls ( un ) then
29402: LD_VAR 0 2
29406: PPUSH
29407: CALL_OW 318
29411: IFFALSE 29422
// ComWalk ( un ) ;
29413: LD_VAR 0 2
29417: PPUSH
29418: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29422: LD_VAR 0 2
29426: PPUSH
29427: LD_INT 5
29429: PPUSH
29430: CALL_OW 336
// end ;
29434: PPOPN 3
29436: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
29437: LD_EXP 55
29441: IFFALSE 29449
29443: PUSH
29444: LD_EXP 73
29448: AND
29449: IFFALSE 29461
29451: PUSH
29452: LD_OWVAR 67
29456: PUSH
29457: LD_INT 4
29459: LESS
29460: AND
29461: IFFALSE 29480
29463: GO 29465
29465: DISABLE
// begin Difficulty := Difficulty + 1 ;
29466: LD_ADDR_OWVAR 67
29470: PUSH
29471: LD_OWVAR 67
29475: PUSH
29476: LD_INT 1
29478: PLUS
29479: ST_TO_ADDR
// end ;
29480: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29481: LD_EXP 55
29485: IFFALSE 29493
29487: PUSH
29488: LD_EXP 74
29492: AND
29493: IFFALSE 29596
29495: GO 29497
29497: DISABLE
29498: LD_INT 0
29500: PPUSH
// begin for i := 1 to 5 do
29501: LD_ADDR_VAR 0 1
29505: PUSH
29506: DOUBLE
29507: LD_INT 1
29509: DEC
29510: ST_TO_ADDR
29511: LD_INT 5
29513: PUSH
29514: FOR_TO
29515: IFFALSE 29594
// begin uc_nation := nation_nature ;
29517: LD_ADDR_OWVAR 21
29521: PUSH
29522: LD_INT 0
29524: ST_TO_ADDR
// uc_side := 0 ;
29525: LD_ADDR_OWVAR 20
29529: PUSH
29530: LD_INT 0
29532: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29533: LD_ADDR_OWVAR 29
29537: PUSH
29538: LD_INT 12
29540: PUSH
29541: LD_INT 12
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: ST_TO_ADDR
// hc_agressivity := 20 ;
29548: LD_ADDR_OWVAR 35
29552: PUSH
29553: LD_INT 20
29555: ST_TO_ADDR
// hc_class := class_tiger ;
29556: LD_ADDR_OWVAR 28
29560: PUSH
29561: LD_INT 14
29563: ST_TO_ADDR
// hc_gallery :=  ;
29564: LD_ADDR_OWVAR 33
29568: PUSH
29569: LD_STRING 
29571: ST_TO_ADDR
// hc_name :=  ;
29572: LD_ADDR_OWVAR 26
29576: PUSH
29577: LD_STRING 
29579: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29580: CALL_OW 44
29584: PPUSH
29585: LD_INT 0
29587: PPUSH
29588: CALL_OW 51
// end ;
29592: GO 29514
29594: POP
29595: POP
// end ;
29596: PPOPN 1
29598: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29599: LD_EXP 55
29603: IFFALSE 29611
29605: PUSH
29606: LD_EXP 75
29610: AND
29611: IFFALSE 29620
29613: GO 29615
29615: DISABLE
// StreamSibBomb ;
29616: CALL 29621 0 0
29620: END
// export function StreamSibBomb ; var i , x , y ; begin
29621: LD_INT 0
29623: PPUSH
29624: PPUSH
29625: PPUSH
29626: PPUSH
// result := false ;
29627: LD_ADDR_VAR 0 1
29631: PUSH
29632: LD_INT 0
29634: ST_TO_ADDR
// for i := 1 to 16 do
29635: LD_ADDR_VAR 0 2
29639: PUSH
29640: DOUBLE
29641: LD_INT 1
29643: DEC
29644: ST_TO_ADDR
29645: LD_INT 16
29647: PUSH
29648: FOR_TO
29649: IFFALSE 29848
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29651: LD_ADDR_VAR 0 3
29655: PUSH
29656: LD_INT 10
29658: PUSH
29659: LD_INT 20
29661: PUSH
29662: LD_INT 30
29664: PUSH
29665: LD_INT 40
29667: PUSH
29668: LD_INT 50
29670: PUSH
29671: LD_INT 60
29673: PUSH
29674: LD_INT 70
29676: PUSH
29677: LD_INT 80
29679: PUSH
29680: LD_INT 90
29682: PUSH
29683: LD_INT 100
29685: PUSH
29686: LD_INT 110
29688: PUSH
29689: LD_INT 120
29691: PUSH
29692: LD_INT 130
29694: PUSH
29695: LD_INT 140
29697: PUSH
29698: LD_INT 150
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: PPUSH
29721: LD_INT 15
29723: PPUSH
29724: CALL_OW 12
29728: ARRAY
29729: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29730: LD_ADDR_VAR 0 4
29734: PUSH
29735: LD_INT 10
29737: PUSH
29738: LD_INT 20
29740: PUSH
29741: LD_INT 30
29743: PUSH
29744: LD_INT 40
29746: PUSH
29747: LD_INT 50
29749: PUSH
29750: LD_INT 60
29752: PUSH
29753: LD_INT 70
29755: PUSH
29756: LD_INT 80
29758: PUSH
29759: LD_INT 90
29761: PUSH
29762: LD_INT 100
29764: PUSH
29765: LD_INT 110
29767: PUSH
29768: LD_INT 120
29770: PUSH
29771: LD_INT 130
29773: PUSH
29774: LD_INT 140
29776: PUSH
29777: LD_INT 150
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 1
29799: PPUSH
29800: LD_INT 15
29802: PPUSH
29803: CALL_OW 12
29807: ARRAY
29808: ST_TO_ADDR
// if ValidHex ( x , y ) then
29809: LD_VAR 0 3
29813: PPUSH
29814: LD_VAR 0 4
29818: PPUSH
29819: CALL_OW 488
29823: IFFALSE 29846
// begin result := [ x , y ] ;
29825: LD_ADDR_VAR 0 1
29829: PUSH
29830: LD_VAR 0 3
29834: PUSH
29835: LD_VAR 0 4
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: ST_TO_ADDR
// break ;
29844: GO 29848
// end ; end ;
29846: GO 29648
29848: POP
29849: POP
// if result then
29850: LD_VAR 0 1
29854: IFFALSE 29914
// begin ToLua ( playSibBomb() ) ;
29856: LD_STRING playSibBomb()
29858: PPUSH
29859: CALL_OW 559
// wait ( 0 0$14 ) ;
29863: LD_INT 490
29865: PPUSH
29866: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29870: LD_VAR 0 1
29874: PUSH
29875: LD_INT 1
29877: ARRAY
29878: PPUSH
29879: LD_VAR 0 1
29883: PUSH
29884: LD_INT 2
29886: ARRAY
29887: PPUSH
29888: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29892: LD_VAR 0 1
29896: PUSH
29897: LD_INT 1
29899: ARRAY
29900: PPUSH
29901: LD_VAR 0 1
29905: PUSH
29906: LD_INT 2
29908: ARRAY
29909: PPUSH
29910: CALL_OW 429
// end ; end ;
29914: LD_VAR 0 1
29918: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29919: LD_EXP 55
29923: IFFALSE 29931
29925: PUSH
29926: LD_EXP 77
29930: AND
29931: IFFALSE 29943
29933: GO 29935
29935: DISABLE
// YouLost (  ) ;
29936: LD_STRING 
29938: PPUSH
29939: CALL_OW 104
29943: END
// every 0 0$1 trigger StreamModeActive and sFog do
29944: LD_EXP 55
29948: IFFALSE 29956
29950: PUSH
29951: LD_EXP 76
29955: AND
29956: IFFALSE 29970
29958: GO 29960
29960: DISABLE
// FogOff ( your_side ) ;
29961: LD_OWVAR 2
29965: PPUSH
29966: CALL_OW 344
29970: END
// every 0 0$1 trigger StreamModeActive and sSun do
29971: LD_EXP 55
29975: IFFALSE 29983
29977: PUSH
29978: LD_EXP 78
29982: AND
29983: IFFALSE 30011
29985: GO 29987
29987: DISABLE
// begin solar_recharge_percent := 0 ;
29988: LD_ADDR_OWVAR 79
29992: PUSH
29993: LD_INT 0
29995: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29996: LD_INT 10500
29998: PPUSH
29999: CALL_OW 67
// solar_recharge_percent := 100 ;
30003: LD_ADDR_OWVAR 79
30007: PUSH
30008: LD_INT 100
30010: ST_TO_ADDR
// end ;
30011: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
30012: LD_EXP 55
30016: IFFALSE 30024
30018: PUSH
30019: LD_EXP 79
30023: AND
30024: IFFALSE 30263
30026: GO 30028
30028: DISABLE
30029: LD_INT 0
30031: PPUSH
30032: PPUSH
30033: PPUSH
// begin tmp := [ ] ;
30034: LD_ADDR_VAR 0 3
30038: PUSH
30039: EMPTY
30040: ST_TO_ADDR
// for i := 1 to 6 do
30041: LD_ADDR_VAR 0 1
30045: PUSH
30046: DOUBLE
30047: LD_INT 1
30049: DEC
30050: ST_TO_ADDR
30051: LD_INT 6
30053: PUSH
30054: FOR_TO
30055: IFFALSE 30160
// begin uc_nation := nation_nature ;
30057: LD_ADDR_OWVAR 21
30061: PUSH
30062: LD_INT 0
30064: ST_TO_ADDR
// uc_side := 0 ;
30065: LD_ADDR_OWVAR 20
30069: PUSH
30070: LD_INT 0
30072: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30073: LD_ADDR_OWVAR 29
30077: PUSH
30078: LD_INT 12
30080: PUSH
30081: LD_INT 12
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: ST_TO_ADDR
// hc_agressivity := 20 ;
30088: LD_ADDR_OWVAR 35
30092: PUSH
30093: LD_INT 20
30095: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
30096: LD_ADDR_OWVAR 28
30100: PUSH
30101: LD_INT 17
30103: ST_TO_ADDR
// hc_gallery :=  ;
30104: LD_ADDR_OWVAR 33
30108: PUSH
30109: LD_STRING 
30111: ST_TO_ADDR
// hc_name :=  ;
30112: LD_ADDR_OWVAR 26
30116: PUSH
30117: LD_STRING 
30119: ST_TO_ADDR
// un := CreateHuman ;
30120: LD_ADDR_VAR 0 2
30124: PUSH
30125: CALL_OW 44
30129: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
30130: LD_VAR 0 2
30134: PPUSH
30135: LD_INT 1
30137: PPUSH
30138: CALL_OW 51
// tmp := tmp ^ un ;
30142: LD_ADDR_VAR 0 3
30146: PUSH
30147: LD_VAR 0 3
30151: PUSH
30152: LD_VAR 0 2
30156: ADD
30157: ST_TO_ADDR
// end ;
30158: GO 30054
30160: POP
30161: POP
// repeat wait ( 0 0$1 ) ;
30162: LD_INT 35
30164: PPUSH
30165: CALL_OW 67
// for un in tmp do
30169: LD_ADDR_VAR 0 2
30173: PUSH
30174: LD_VAR 0 3
30178: PUSH
30179: FOR_IN
30180: IFFALSE 30254
// begin if IsDead ( un ) then
30182: LD_VAR 0 2
30186: PPUSH
30187: CALL_OW 301
30191: IFFALSE 30211
// begin tmp := tmp diff un ;
30193: LD_ADDR_VAR 0 3
30197: PUSH
30198: LD_VAR 0 3
30202: PUSH
30203: LD_VAR 0 2
30207: DIFF
30208: ST_TO_ADDR
// continue ;
30209: GO 30179
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30211: LD_VAR 0 2
30215: PPUSH
30216: LD_INT 3
30218: PUSH
30219: LD_INT 22
30221: PUSH
30222: LD_INT 0
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PPUSH
30233: CALL_OW 69
30237: PPUSH
30238: LD_VAR 0 2
30242: PPUSH
30243: CALL_OW 74
30247: PPUSH
30248: CALL_OW 115
// end ;
30252: GO 30179
30254: POP
30255: POP
// until not tmp ;
30256: LD_VAR 0 3
30260: NOT
30261: IFFALSE 30162
// end ;
30263: PPOPN 3
30265: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30266: LD_EXP 55
30270: IFFALSE 30278
30272: PUSH
30273: LD_EXP 80
30277: AND
30278: IFFALSE 30332
30280: GO 30282
30282: DISABLE
// begin ToLua ( displayTroll(); ) ;
30283: LD_STRING displayTroll();
30285: PPUSH
30286: CALL_OW 559
// wait ( 3 3$00 ) ;
30290: LD_INT 6300
30292: PPUSH
30293: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30297: LD_STRING hideTroll();
30299: PPUSH
30300: CALL_OW 559
// wait ( 1 1$00 ) ;
30304: LD_INT 2100
30306: PPUSH
30307: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30311: LD_STRING displayTroll();
30313: PPUSH
30314: CALL_OW 559
// wait ( 1 1$00 ) ;
30318: LD_INT 2100
30320: PPUSH
30321: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30325: LD_STRING hideTroll();
30327: PPUSH
30328: CALL_OW 559
// end ;
30332: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30333: LD_EXP 55
30337: IFFALSE 30345
30339: PUSH
30340: LD_EXP 81
30344: AND
30345: IFFALSE 30408
30347: GO 30349
30349: DISABLE
30350: LD_INT 0
30352: PPUSH
// begin p := 0 ;
30353: LD_ADDR_VAR 0 1
30357: PUSH
30358: LD_INT 0
30360: ST_TO_ADDR
// repeat game_speed := 1 ;
30361: LD_ADDR_OWVAR 65
30365: PUSH
30366: LD_INT 1
30368: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30369: LD_INT 35
30371: PPUSH
30372: CALL_OW 67
// p := p + 1 ;
30376: LD_ADDR_VAR 0 1
30380: PUSH
30381: LD_VAR 0 1
30385: PUSH
30386: LD_INT 1
30388: PLUS
30389: ST_TO_ADDR
// until p >= 60 ;
30390: LD_VAR 0 1
30394: PUSH
30395: LD_INT 60
30397: GREATEREQUAL
30398: IFFALSE 30361
// game_speed := 4 ;
30400: LD_ADDR_OWVAR 65
30404: PUSH
30405: LD_INT 4
30407: ST_TO_ADDR
// end ;
30408: PPOPN 1
30410: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30411: LD_EXP 55
30415: IFFALSE 30423
30417: PUSH
30418: LD_EXP 82
30422: AND
30423: IFFALSE 30569
30425: GO 30427
30427: DISABLE
30428: LD_INT 0
30430: PPUSH
30431: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30432: LD_ADDR_VAR 0 1
30436: PUSH
30437: LD_INT 22
30439: PUSH
30440: LD_OWVAR 2
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 2
30451: PUSH
30452: LD_INT 30
30454: PUSH
30455: LD_INT 0
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 30
30464: PUSH
30465: LD_INT 1
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: LIST
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PPUSH
30481: CALL_OW 69
30485: ST_TO_ADDR
// if not depot then
30486: LD_VAR 0 1
30490: NOT
30491: IFFALSE 30495
// exit ;
30493: GO 30569
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30495: LD_ADDR_VAR 0 2
30499: PUSH
30500: LD_VAR 0 1
30504: PUSH
30505: LD_INT 1
30507: PPUSH
30508: LD_VAR 0 1
30512: PPUSH
30513: CALL_OW 12
30517: ARRAY
30518: PPUSH
30519: CALL_OW 274
30523: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30524: LD_VAR 0 2
30528: PPUSH
30529: LD_INT 1
30531: PPUSH
30532: LD_INT 0
30534: PPUSH
30535: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30539: LD_VAR 0 2
30543: PPUSH
30544: LD_INT 2
30546: PPUSH
30547: LD_INT 0
30549: PPUSH
30550: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30554: LD_VAR 0 2
30558: PPUSH
30559: LD_INT 3
30561: PPUSH
30562: LD_INT 0
30564: PPUSH
30565: CALL_OW 277
// end ;
30569: PPOPN 2
30571: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30572: LD_EXP 55
30576: IFFALSE 30584
30578: PUSH
30579: LD_EXP 83
30583: AND
30584: IFFALSE 30681
30586: GO 30588
30588: DISABLE
30589: LD_INT 0
30591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30592: LD_ADDR_VAR 0 1
30596: PUSH
30597: LD_INT 22
30599: PUSH
30600: LD_OWVAR 2
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 21
30611: PUSH
30612: LD_INT 1
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 3
30621: PUSH
30622: LD_INT 23
30624: PUSH
30625: LD_INT 0
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: PPUSH
30641: CALL_OW 69
30645: ST_TO_ADDR
// if not tmp then
30646: LD_VAR 0 1
30650: NOT
30651: IFFALSE 30655
// exit ;
30653: GO 30681
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30655: LD_VAR 0 1
30659: PUSH
30660: LD_INT 1
30662: PPUSH
30663: LD_VAR 0 1
30667: PPUSH
30668: CALL_OW 12
30672: ARRAY
30673: PPUSH
30674: LD_INT 200
30676: PPUSH
30677: CALL_OW 234
// end ;
30681: PPOPN 1
30683: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30684: LD_EXP 55
30688: IFFALSE 30696
30690: PUSH
30691: LD_EXP 84
30695: AND
30696: IFFALSE 30775
30698: GO 30700
30700: DISABLE
30701: LD_INT 0
30703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30704: LD_ADDR_VAR 0 1
30708: PUSH
30709: LD_INT 22
30711: PUSH
30712: LD_OWVAR 2
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 21
30723: PUSH
30724: LD_INT 2
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PPUSH
30735: CALL_OW 69
30739: ST_TO_ADDR
// if not tmp then
30740: LD_VAR 0 1
30744: NOT
30745: IFFALSE 30749
// exit ;
30747: GO 30775
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30749: LD_VAR 0 1
30753: PUSH
30754: LD_INT 1
30756: PPUSH
30757: LD_VAR 0 1
30761: PPUSH
30762: CALL_OW 12
30766: ARRAY
30767: PPUSH
30768: LD_INT 60
30770: PPUSH
30771: CALL_OW 234
// end ;
30775: PPOPN 1
30777: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30778: LD_EXP 55
30782: IFFALSE 30790
30784: PUSH
30785: LD_EXP 85
30789: AND
30790: IFFALSE 30889
30792: GO 30794
30794: DISABLE
30795: LD_INT 0
30797: PPUSH
30798: PPUSH
// begin enable ;
30799: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30800: LD_ADDR_VAR 0 1
30804: PUSH
30805: LD_INT 22
30807: PUSH
30808: LD_OWVAR 2
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 61
30819: PUSH
30820: EMPTY
30821: LIST
30822: PUSH
30823: LD_INT 33
30825: PUSH
30826: LD_INT 2
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: LIST
30837: PPUSH
30838: CALL_OW 69
30842: ST_TO_ADDR
// if not tmp then
30843: LD_VAR 0 1
30847: NOT
30848: IFFALSE 30852
// exit ;
30850: GO 30889
// for i in tmp do
30852: LD_ADDR_VAR 0 2
30856: PUSH
30857: LD_VAR 0 1
30861: PUSH
30862: FOR_IN
30863: IFFALSE 30887
// if IsControledBy ( i ) then
30865: LD_VAR 0 2
30869: PPUSH
30870: CALL_OW 312
30874: IFFALSE 30885
// ComUnlink ( i ) ;
30876: LD_VAR 0 2
30880: PPUSH
30881: CALL_OW 136
30885: GO 30862
30887: POP
30888: POP
// end ;
30889: PPOPN 2
30891: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30892: LD_EXP 55
30896: IFFALSE 30904
30898: PUSH
30899: LD_EXP 86
30903: AND
30904: IFFALSE 31044
30906: GO 30908
30908: DISABLE
30909: LD_INT 0
30911: PPUSH
30912: PPUSH
// begin ToLua ( displayPowell(); ) ;
30913: LD_STRING displayPowell();
30915: PPUSH
30916: CALL_OW 559
// uc_side := 0 ;
30920: LD_ADDR_OWVAR 20
30924: PUSH
30925: LD_INT 0
30927: ST_TO_ADDR
// uc_nation := 2 ;
30928: LD_ADDR_OWVAR 21
30932: PUSH
30933: LD_INT 2
30935: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30936: LD_ADDR_OWVAR 37
30940: PUSH
30941: LD_INT 14
30943: ST_TO_ADDR
// vc_engine := engine_siberite ;
30944: LD_ADDR_OWVAR 39
30948: PUSH
30949: LD_INT 3
30951: ST_TO_ADDR
// vc_control := control_apeman ;
30952: LD_ADDR_OWVAR 38
30956: PUSH
30957: LD_INT 5
30959: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30960: LD_ADDR_OWVAR 40
30964: PUSH
30965: LD_INT 29
30967: ST_TO_ADDR
// un := CreateVehicle ;
30968: LD_ADDR_VAR 0 2
30972: PUSH
30973: CALL_OW 45
30977: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30978: LD_VAR 0 2
30982: PPUSH
30983: LD_INT 1
30985: PPUSH
30986: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30990: LD_INT 35
30992: PPUSH
30993: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30997: LD_VAR 0 2
31001: PPUSH
31002: LD_INT 22
31004: PUSH
31005: LD_OWVAR 2
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PPUSH
31014: CALL_OW 69
31018: PPUSH
31019: LD_VAR 0 2
31023: PPUSH
31024: CALL_OW 74
31028: PPUSH
31029: CALL_OW 115
// until IsDead ( un ) ;
31033: LD_VAR 0 2
31037: PPUSH
31038: CALL_OW 301
31042: IFFALSE 30990
// end ;
31044: PPOPN 2
31046: END
// every 0 0$1 trigger StreamModeActive and sStu do
31047: LD_EXP 55
31051: IFFALSE 31059
31053: PUSH
31054: LD_EXP 94
31058: AND
31059: IFFALSE 31075
31061: GO 31063
31063: DISABLE
// begin ToLua ( displayStucuk(); ) ;
31064: LD_STRING displayStucuk();
31066: PPUSH
31067: CALL_OW 559
// ResetFog ;
31071: CALL_OW 335
// end ;
31075: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
31076: LD_EXP 55
31080: IFFALSE 31088
31082: PUSH
31083: LD_EXP 87
31087: AND
31088: IFFALSE 31229
31090: GO 31092
31092: DISABLE
31093: LD_INT 0
31095: PPUSH
31096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31097: LD_ADDR_VAR 0 2
31101: PUSH
31102: LD_INT 22
31104: PUSH
31105: LD_OWVAR 2
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 21
31116: PUSH
31117: LD_INT 1
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PPUSH
31128: CALL_OW 69
31132: ST_TO_ADDR
// if not tmp then
31133: LD_VAR 0 2
31137: NOT
31138: IFFALSE 31142
// exit ;
31140: GO 31229
// un := tmp [ rand ( 1 , tmp ) ] ;
31142: LD_ADDR_VAR 0 1
31146: PUSH
31147: LD_VAR 0 2
31151: PUSH
31152: LD_INT 1
31154: PPUSH
31155: LD_VAR 0 2
31159: PPUSH
31160: CALL_OW 12
31164: ARRAY
31165: ST_TO_ADDR
// SetSide ( un , 0 ) ;
31166: LD_VAR 0 1
31170: PPUSH
31171: LD_INT 0
31173: PPUSH
31174: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31178: LD_VAR 0 1
31182: PPUSH
31183: LD_OWVAR 3
31187: PUSH
31188: LD_VAR 0 1
31192: DIFF
31193: PPUSH
31194: LD_VAR 0 1
31198: PPUSH
31199: CALL_OW 74
31203: PPUSH
31204: CALL_OW 115
// wait ( 0 0$20 ) ;
31208: LD_INT 700
31210: PPUSH
31211: CALL_OW 67
// SetSide ( un , your_side ) ;
31215: LD_VAR 0 1
31219: PPUSH
31220: LD_OWVAR 2
31224: PPUSH
31225: CALL_OW 235
// end ;
31229: PPOPN 2
31231: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31232: LD_EXP 55
31236: IFFALSE 31244
31238: PUSH
31239: LD_EXP 88
31243: AND
31244: IFFALSE 31350
31246: GO 31248
31248: DISABLE
31249: LD_INT 0
31251: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31252: LD_ADDR_VAR 0 1
31256: PUSH
31257: LD_INT 22
31259: PUSH
31260: LD_OWVAR 2
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 2
31271: PUSH
31272: LD_INT 30
31274: PUSH
31275: LD_INT 0
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 30
31284: PUSH
31285: LD_INT 1
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: LIST
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PPUSH
31301: CALL_OW 69
31305: ST_TO_ADDR
// if not depot then
31306: LD_VAR 0 1
31310: NOT
31311: IFFALSE 31315
// exit ;
31313: GO 31350
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31315: LD_VAR 0 1
31319: PUSH
31320: LD_INT 1
31322: ARRAY
31323: PPUSH
31324: CALL_OW 250
31328: PPUSH
31329: LD_VAR 0 1
31333: PUSH
31334: LD_INT 1
31336: ARRAY
31337: PPUSH
31338: CALL_OW 251
31342: PPUSH
31343: LD_INT 70
31345: PPUSH
31346: CALL_OW 495
// end ;
31350: PPOPN 1
31352: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31353: LD_EXP 55
31357: IFFALSE 31365
31359: PUSH
31360: LD_EXP 89
31364: AND
31365: IFFALSE 31576
31367: GO 31369
31369: DISABLE
31370: LD_INT 0
31372: PPUSH
31373: PPUSH
31374: PPUSH
31375: PPUSH
31376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31377: LD_ADDR_VAR 0 5
31381: PUSH
31382: LD_INT 22
31384: PUSH
31385: LD_OWVAR 2
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 21
31396: PUSH
31397: LD_INT 1
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PPUSH
31408: CALL_OW 69
31412: ST_TO_ADDR
// if not tmp then
31413: LD_VAR 0 5
31417: NOT
31418: IFFALSE 31422
// exit ;
31420: GO 31576
// for i in tmp do
31422: LD_ADDR_VAR 0 1
31426: PUSH
31427: LD_VAR 0 5
31431: PUSH
31432: FOR_IN
31433: IFFALSE 31574
// begin d := rand ( 0 , 5 ) ;
31435: LD_ADDR_VAR 0 4
31439: PUSH
31440: LD_INT 0
31442: PPUSH
31443: LD_INT 5
31445: PPUSH
31446: CALL_OW 12
31450: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31451: LD_ADDR_VAR 0 2
31455: PUSH
31456: LD_VAR 0 1
31460: PPUSH
31461: CALL_OW 250
31465: PPUSH
31466: LD_VAR 0 4
31470: PPUSH
31471: LD_INT 3
31473: PPUSH
31474: LD_INT 12
31476: PPUSH
31477: CALL_OW 12
31481: PPUSH
31482: CALL_OW 272
31486: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31487: LD_ADDR_VAR 0 3
31491: PUSH
31492: LD_VAR 0 1
31496: PPUSH
31497: CALL_OW 251
31501: PPUSH
31502: LD_VAR 0 4
31506: PPUSH
31507: LD_INT 3
31509: PPUSH
31510: LD_INT 12
31512: PPUSH
31513: CALL_OW 12
31517: PPUSH
31518: CALL_OW 273
31522: ST_TO_ADDR
// if ValidHex ( x , y ) then
31523: LD_VAR 0 2
31527: PPUSH
31528: LD_VAR 0 3
31532: PPUSH
31533: CALL_OW 488
31537: IFFALSE 31572
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31539: LD_VAR 0 1
31543: PPUSH
31544: LD_VAR 0 2
31548: PPUSH
31549: LD_VAR 0 3
31553: PPUSH
31554: LD_INT 3
31556: PPUSH
31557: LD_INT 6
31559: PPUSH
31560: CALL_OW 12
31564: PPUSH
31565: LD_INT 1
31567: PPUSH
31568: CALL_OW 483
// end ;
31572: GO 31432
31574: POP
31575: POP
// end ;
31576: PPOPN 5
31578: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31579: LD_EXP 55
31583: IFFALSE 31591
31585: PUSH
31586: LD_EXP 90
31590: AND
31591: IFFALSE 31685
31593: GO 31595
31595: DISABLE
31596: LD_INT 0
31598: PPUSH
31599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31600: LD_ADDR_VAR 0 2
31604: PUSH
31605: LD_INT 22
31607: PUSH
31608: LD_OWVAR 2
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 32
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 21
31629: PUSH
31630: LD_INT 2
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: LIST
31641: PPUSH
31642: CALL_OW 69
31646: ST_TO_ADDR
// if not tmp then
31647: LD_VAR 0 2
31651: NOT
31652: IFFALSE 31656
// exit ;
31654: GO 31685
// for i in tmp do
31656: LD_ADDR_VAR 0 1
31660: PUSH
31661: LD_VAR 0 2
31665: PUSH
31666: FOR_IN
31667: IFFALSE 31683
// SetFuel ( i , 0 ) ;
31669: LD_VAR 0 1
31673: PPUSH
31674: LD_INT 0
31676: PPUSH
31677: CALL_OW 240
31681: GO 31666
31683: POP
31684: POP
// end ;
31685: PPOPN 2
31687: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31688: LD_EXP 55
31692: IFFALSE 31700
31694: PUSH
31695: LD_EXP 91
31699: AND
31700: IFFALSE 31766
31702: GO 31704
31704: DISABLE
31705: LD_INT 0
31707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31708: LD_ADDR_VAR 0 1
31712: PUSH
31713: LD_INT 22
31715: PUSH
31716: LD_OWVAR 2
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 30
31727: PUSH
31728: LD_INT 29
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PPUSH
31739: CALL_OW 69
31743: ST_TO_ADDR
// if not tmp then
31744: LD_VAR 0 1
31748: NOT
31749: IFFALSE 31753
// exit ;
31751: GO 31766
// DestroyUnit ( tmp [ 1 ] ) ;
31753: LD_VAR 0 1
31757: PUSH
31758: LD_INT 1
31760: ARRAY
31761: PPUSH
31762: CALL_OW 65
// end ;
31766: PPOPN 1
31768: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31769: LD_EXP 55
31773: IFFALSE 31781
31775: PUSH
31776: LD_EXP 93
31780: AND
31781: IFFALSE 31910
31783: GO 31785
31785: DISABLE
31786: LD_INT 0
31788: PPUSH
// begin uc_side := 0 ;
31789: LD_ADDR_OWVAR 20
31793: PUSH
31794: LD_INT 0
31796: ST_TO_ADDR
// uc_nation := nation_arabian ;
31797: LD_ADDR_OWVAR 21
31801: PUSH
31802: LD_INT 2
31804: ST_TO_ADDR
// hc_gallery :=  ;
31805: LD_ADDR_OWVAR 33
31809: PUSH
31810: LD_STRING 
31812: ST_TO_ADDR
// hc_name :=  ;
31813: LD_ADDR_OWVAR 26
31817: PUSH
31818: LD_STRING 
31820: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31821: LD_INT 1
31823: PPUSH
31824: LD_INT 11
31826: PPUSH
31827: LD_INT 10
31829: PPUSH
31830: CALL_OW 380
// un := CreateHuman ;
31834: LD_ADDR_VAR 0 1
31838: PUSH
31839: CALL_OW 44
31843: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31844: LD_VAR 0 1
31848: PPUSH
31849: LD_INT 1
31851: PPUSH
31852: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31856: LD_INT 35
31858: PPUSH
31859: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31863: LD_VAR 0 1
31867: PPUSH
31868: LD_INT 22
31870: PUSH
31871: LD_OWVAR 2
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PPUSH
31880: CALL_OW 69
31884: PPUSH
31885: LD_VAR 0 1
31889: PPUSH
31890: CALL_OW 74
31894: PPUSH
31895: CALL_OW 115
// until IsDead ( un ) ;
31899: LD_VAR 0 1
31903: PPUSH
31904: CALL_OW 301
31908: IFFALSE 31856
// end ;
31910: PPOPN 1
31912: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31913: LD_EXP 55
31917: IFFALSE 31925
31919: PUSH
31920: LD_EXP 95
31924: AND
31925: IFFALSE 31937
31927: GO 31929
31929: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31930: LD_STRING earthquake(getX(game), 0, 32)
31932: PPUSH
31933: CALL_OW 559
31937: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31938: LD_EXP 55
31942: IFFALSE 31950
31944: PUSH
31945: LD_EXP 96
31949: AND
31950: IFFALSE 32041
31952: GO 31954
31954: DISABLE
31955: LD_INT 0
31957: PPUSH
// begin enable ;
31958: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31959: LD_ADDR_VAR 0 1
31963: PUSH
31964: LD_INT 22
31966: PUSH
31967: LD_OWVAR 2
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 21
31978: PUSH
31979: LD_INT 2
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 33
31988: PUSH
31989: LD_INT 3
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: LIST
32000: PPUSH
32001: CALL_OW 69
32005: ST_TO_ADDR
// if not tmp then
32006: LD_VAR 0 1
32010: NOT
32011: IFFALSE 32015
// exit ;
32013: GO 32041
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32015: LD_VAR 0 1
32019: PUSH
32020: LD_INT 1
32022: PPUSH
32023: LD_VAR 0 1
32027: PPUSH
32028: CALL_OW 12
32032: ARRAY
32033: PPUSH
32034: LD_INT 1
32036: PPUSH
32037: CALL_OW 234
// end ;
32041: PPOPN 1
32043: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
32044: LD_EXP 55
32048: IFFALSE 32056
32050: PUSH
32051: LD_EXP 97
32055: AND
32056: IFFALSE 32197
32058: GO 32060
32060: DISABLE
32061: LD_INT 0
32063: PPUSH
32064: PPUSH
32065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32066: LD_ADDR_VAR 0 3
32070: PUSH
32071: LD_INT 22
32073: PUSH
32074: LD_OWVAR 2
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 25
32085: PUSH
32086: LD_INT 1
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PPUSH
32097: CALL_OW 69
32101: ST_TO_ADDR
// if not tmp then
32102: LD_VAR 0 3
32106: NOT
32107: IFFALSE 32111
// exit ;
32109: GO 32197
// un := tmp [ rand ( 1 , tmp ) ] ;
32111: LD_ADDR_VAR 0 2
32115: PUSH
32116: LD_VAR 0 3
32120: PUSH
32121: LD_INT 1
32123: PPUSH
32124: LD_VAR 0 3
32128: PPUSH
32129: CALL_OW 12
32133: ARRAY
32134: ST_TO_ADDR
// if Crawls ( un ) then
32135: LD_VAR 0 2
32139: PPUSH
32140: CALL_OW 318
32144: IFFALSE 32155
// ComWalk ( un ) ;
32146: LD_VAR 0 2
32150: PPUSH
32151: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
32155: LD_VAR 0 2
32159: PPUSH
32160: LD_INT 9
32162: PPUSH
32163: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
32167: LD_INT 28
32169: PPUSH
32170: LD_OWVAR 2
32174: PPUSH
32175: LD_INT 2
32177: PPUSH
32178: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
32182: LD_INT 29
32184: PPUSH
32185: LD_OWVAR 2
32189: PPUSH
32190: LD_INT 2
32192: PPUSH
32193: CALL_OW 322
// end ;
32197: PPOPN 3
32199: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32200: LD_EXP 55
32204: IFFALSE 32212
32206: PUSH
32207: LD_EXP 98
32211: AND
32212: IFFALSE 32323
32214: GO 32216
32216: DISABLE
32217: LD_INT 0
32219: PPUSH
32220: PPUSH
32221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32222: LD_ADDR_VAR 0 3
32226: PUSH
32227: LD_INT 22
32229: PUSH
32230: LD_OWVAR 2
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 25
32241: PUSH
32242: LD_INT 1
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PPUSH
32253: CALL_OW 69
32257: ST_TO_ADDR
// if not tmp then
32258: LD_VAR 0 3
32262: NOT
32263: IFFALSE 32267
// exit ;
32265: GO 32323
// un := tmp [ rand ( 1 , tmp ) ] ;
32267: LD_ADDR_VAR 0 2
32271: PUSH
32272: LD_VAR 0 3
32276: PUSH
32277: LD_INT 1
32279: PPUSH
32280: LD_VAR 0 3
32284: PPUSH
32285: CALL_OW 12
32289: ARRAY
32290: ST_TO_ADDR
// if Crawls ( un ) then
32291: LD_VAR 0 2
32295: PPUSH
32296: CALL_OW 318
32300: IFFALSE 32311
// ComWalk ( un ) ;
32302: LD_VAR 0 2
32306: PPUSH
32307: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32311: LD_VAR 0 2
32315: PPUSH
32316: LD_INT 8
32318: PPUSH
32319: CALL_OW 336
// end ;
32323: PPOPN 3
32325: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32326: LD_EXP 55
32330: IFFALSE 32338
32332: PUSH
32333: LD_EXP 99
32337: AND
32338: IFFALSE 32482
32340: GO 32342
32342: DISABLE
32343: LD_INT 0
32345: PPUSH
32346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32347: LD_ADDR_VAR 0 2
32351: PUSH
32352: LD_INT 22
32354: PUSH
32355: LD_OWVAR 2
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 21
32366: PUSH
32367: LD_INT 2
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 2
32376: PUSH
32377: LD_INT 34
32379: PUSH
32380: LD_INT 12
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 34
32389: PUSH
32390: LD_INT 51
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 34
32399: PUSH
32400: LD_INT 32
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: LIST
32417: PPUSH
32418: CALL_OW 69
32422: ST_TO_ADDR
// if not tmp then
32423: LD_VAR 0 2
32427: NOT
32428: IFFALSE 32432
// exit ;
32430: GO 32482
// for i in tmp do
32432: LD_ADDR_VAR 0 1
32436: PUSH
32437: LD_VAR 0 2
32441: PUSH
32442: FOR_IN
32443: IFFALSE 32480
// if GetCargo ( i , mat_artifact ) = 0 then
32445: LD_VAR 0 1
32449: PPUSH
32450: LD_INT 4
32452: PPUSH
32453: CALL_OW 289
32457: PUSH
32458: LD_INT 0
32460: EQUAL
32461: IFFALSE 32478
// SetCargo ( i , mat_siberit , 100 ) ;
32463: LD_VAR 0 1
32467: PPUSH
32468: LD_INT 3
32470: PPUSH
32471: LD_INT 100
32473: PPUSH
32474: CALL_OW 290
32478: GO 32442
32480: POP
32481: POP
// end ;
32482: PPOPN 2
32484: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32485: LD_EXP 55
32489: IFFALSE 32497
32491: PUSH
32492: LD_EXP 100
32496: AND
32497: IFFALSE 32680
32499: GO 32501
32501: DISABLE
32502: LD_INT 0
32504: PPUSH
32505: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32506: LD_ADDR_VAR 0 2
32510: PUSH
32511: LD_INT 22
32513: PUSH
32514: LD_OWVAR 2
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PPUSH
32523: CALL_OW 69
32527: ST_TO_ADDR
// if not tmp then
32528: LD_VAR 0 2
32532: NOT
32533: IFFALSE 32537
// exit ;
32535: GO 32680
// for i := 1 to 2 do
32537: LD_ADDR_VAR 0 1
32541: PUSH
32542: DOUBLE
32543: LD_INT 1
32545: DEC
32546: ST_TO_ADDR
32547: LD_INT 2
32549: PUSH
32550: FOR_TO
32551: IFFALSE 32678
// begin uc_side := your_side ;
32553: LD_ADDR_OWVAR 20
32557: PUSH
32558: LD_OWVAR 2
32562: ST_TO_ADDR
// uc_nation := nation_american ;
32563: LD_ADDR_OWVAR 21
32567: PUSH
32568: LD_INT 1
32570: ST_TO_ADDR
// vc_chassis := us_morphling ;
32571: LD_ADDR_OWVAR 37
32575: PUSH
32576: LD_INT 5
32578: ST_TO_ADDR
// vc_engine := engine_siberite ;
32579: LD_ADDR_OWVAR 39
32583: PUSH
32584: LD_INT 3
32586: ST_TO_ADDR
// vc_control := control_computer ;
32587: LD_ADDR_OWVAR 38
32591: PUSH
32592: LD_INT 3
32594: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32595: LD_ADDR_OWVAR 40
32599: PUSH
32600: LD_INT 10
32602: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32603: LD_VAR 0 2
32607: PUSH
32608: LD_INT 1
32610: ARRAY
32611: PPUSH
32612: CALL_OW 310
32616: NOT
32617: IFFALSE 32664
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32619: CALL_OW 45
32623: PPUSH
32624: LD_VAR 0 2
32628: PUSH
32629: LD_INT 1
32631: ARRAY
32632: PPUSH
32633: CALL_OW 250
32637: PPUSH
32638: LD_VAR 0 2
32642: PUSH
32643: LD_INT 1
32645: ARRAY
32646: PPUSH
32647: CALL_OW 251
32651: PPUSH
32652: LD_INT 12
32654: PPUSH
32655: LD_INT 1
32657: PPUSH
32658: CALL_OW 50
32662: GO 32676
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32664: CALL_OW 45
32668: PPUSH
32669: LD_INT 1
32671: PPUSH
32672: CALL_OW 51
// end ;
32676: GO 32550
32678: POP
32679: POP
// end ;
32680: PPOPN 2
32682: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32683: LD_EXP 55
32687: IFFALSE 32695
32689: PUSH
32690: LD_EXP 101
32694: AND
32695: IFFALSE 32917
32697: GO 32699
32699: DISABLE
32700: LD_INT 0
32702: PPUSH
32703: PPUSH
32704: PPUSH
32705: PPUSH
32706: PPUSH
32707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32708: LD_ADDR_VAR 0 6
32712: PUSH
32713: LD_INT 22
32715: PUSH
32716: LD_OWVAR 2
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 21
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 3
32737: PUSH
32738: LD_INT 23
32740: PUSH
32741: LD_INT 0
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: LIST
32756: PPUSH
32757: CALL_OW 69
32761: ST_TO_ADDR
// if not tmp then
32762: LD_VAR 0 6
32766: NOT
32767: IFFALSE 32771
// exit ;
32769: GO 32917
// s1 := rand ( 1 , 4 ) ;
32771: LD_ADDR_VAR 0 2
32775: PUSH
32776: LD_INT 1
32778: PPUSH
32779: LD_INT 4
32781: PPUSH
32782: CALL_OW 12
32786: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32787: LD_ADDR_VAR 0 4
32791: PUSH
32792: LD_VAR 0 6
32796: PUSH
32797: LD_INT 1
32799: ARRAY
32800: PPUSH
32801: LD_VAR 0 2
32805: PPUSH
32806: CALL_OW 259
32810: ST_TO_ADDR
// if s1 = 1 then
32811: LD_VAR 0 2
32815: PUSH
32816: LD_INT 1
32818: EQUAL
32819: IFFALSE 32839
// s2 := rand ( 2 , 4 ) else
32821: LD_ADDR_VAR 0 3
32825: PUSH
32826: LD_INT 2
32828: PPUSH
32829: LD_INT 4
32831: PPUSH
32832: CALL_OW 12
32836: ST_TO_ADDR
32837: GO 32847
// s2 := 1 ;
32839: LD_ADDR_VAR 0 3
32843: PUSH
32844: LD_INT 1
32846: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32847: LD_ADDR_VAR 0 5
32851: PUSH
32852: LD_VAR 0 6
32856: PUSH
32857: LD_INT 1
32859: ARRAY
32860: PPUSH
32861: LD_VAR 0 3
32865: PPUSH
32866: CALL_OW 259
32870: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32871: LD_VAR 0 6
32875: PUSH
32876: LD_INT 1
32878: ARRAY
32879: PPUSH
32880: LD_VAR 0 2
32884: PPUSH
32885: LD_VAR 0 5
32889: PPUSH
32890: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32894: LD_VAR 0 6
32898: PUSH
32899: LD_INT 1
32901: ARRAY
32902: PPUSH
32903: LD_VAR 0 3
32907: PPUSH
32908: LD_VAR 0 4
32912: PPUSH
32913: CALL_OW 237
// end ;
32917: PPOPN 6
32919: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32920: LD_EXP 55
32924: IFFALSE 32932
32926: PUSH
32927: LD_EXP 102
32931: AND
32932: IFFALSE 33011
32934: GO 32936
32936: DISABLE
32937: LD_INT 0
32939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32940: LD_ADDR_VAR 0 1
32944: PUSH
32945: LD_INT 22
32947: PUSH
32948: LD_OWVAR 2
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 30
32959: PUSH
32960: LD_INT 3
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PPUSH
32971: CALL_OW 69
32975: ST_TO_ADDR
// if not tmp then
32976: LD_VAR 0 1
32980: NOT
32981: IFFALSE 32985
// exit ;
32983: GO 33011
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32985: LD_VAR 0 1
32989: PUSH
32990: LD_INT 1
32992: PPUSH
32993: LD_VAR 0 1
32997: PPUSH
32998: CALL_OW 12
33002: ARRAY
33003: PPUSH
33004: LD_INT 1
33006: PPUSH
33007: CALL_OW 234
// end ;
33011: PPOPN 1
33013: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
33014: LD_EXP 55
33018: IFFALSE 33026
33020: PUSH
33021: LD_EXP 103
33025: AND
33026: IFFALSE 33138
33028: GO 33030
33030: DISABLE
33031: LD_INT 0
33033: PPUSH
33034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
33035: LD_ADDR_VAR 0 2
33039: PUSH
33040: LD_INT 22
33042: PUSH
33043: LD_OWVAR 2
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 2
33054: PUSH
33055: LD_INT 30
33057: PUSH
33058: LD_INT 27
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 30
33067: PUSH
33068: LD_INT 26
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 30
33077: PUSH
33078: LD_INT 28
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PPUSH
33095: CALL_OW 69
33099: ST_TO_ADDR
// if not tmp then
33100: LD_VAR 0 2
33104: NOT
33105: IFFALSE 33109
// exit ;
33107: GO 33138
// for i in tmp do
33109: LD_ADDR_VAR 0 1
33113: PUSH
33114: LD_VAR 0 2
33118: PUSH
33119: FOR_IN
33120: IFFALSE 33136
// SetLives ( i , 1 ) ;
33122: LD_VAR 0 1
33126: PPUSH
33127: LD_INT 1
33129: PPUSH
33130: CALL_OW 234
33134: GO 33119
33136: POP
33137: POP
// end ;
33138: PPOPN 2
33140: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
33141: LD_EXP 55
33145: IFFALSE 33153
33147: PUSH
33148: LD_EXP 104
33152: AND
33153: IFFALSE 33440
33155: GO 33157
33157: DISABLE
33158: LD_INT 0
33160: PPUSH
33161: PPUSH
33162: PPUSH
// begin i := rand ( 1 , 7 ) ;
33163: LD_ADDR_VAR 0 1
33167: PUSH
33168: LD_INT 1
33170: PPUSH
33171: LD_INT 7
33173: PPUSH
33174: CALL_OW 12
33178: ST_TO_ADDR
// case i of 1 :
33179: LD_VAR 0 1
33183: PUSH
33184: LD_INT 1
33186: DOUBLE
33187: EQUAL
33188: IFTRUE 33192
33190: GO 33202
33192: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
33193: LD_STRING earthquake(getX(game), 0, 32)
33195: PPUSH
33196: CALL_OW 559
33200: GO 33440
33202: LD_INT 2
33204: DOUBLE
33205: EQUAL
33206: IFTRUE 33210
33208: GO 33224
33210: POP
// begin ToLua ( displayStucuk(); ) ;
33211: LD_STRING displayStucuk();
33213: PPUSH
33214: CALL_OW 559
// ResetFog ;
33218: CALL_OW 335
// end ; 3 :
33222: GO 33440
33224: LD_INT 3
33226: DOUBLE
33227: EQUAL
33228: IFTRUE 33232
33230: GO 33336
33232: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33233: LD_ADDR_VAR 0 2
33237: PUSH
33238: LD_INT 22
33240: PUSH
33241: LD_OWVAR 2
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 25
33252: PUSH
33253: LD_INT 1
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PPUSH
33264: CALL_OW 69
33268: ST_TO_ADDR
// if not tmp then
33269: LD_VAR 0 2
33273: NOT
33274: IFFALSE 33278
// exit ;
33276: GO 33440
// un := tmp [ rand ( 1 , tmp ) ] ;
33278: LD_ADDR_VAR 0 3
33282: PUSH
33283: LD_VAR 0 2
33287: PUSH
33288: LD_INT 1
33290: PPUSH
33291: LD_VAR 0 2
33295: PPUSH
33296: CALL_OW 12
33300: ARRAY
33301: ST_TO_ADDR
// if Crawls ( un ) then
33302: LD_VAR 0 3
33306: PPUSH
33307: CALL_OW 318
33311: IFFALSE 33322
// ComWalk ( un ) ;
33313: LD_VAR 0 3
33317: PPUSH
33318: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33322: LD_VAR 0 3
33326: PPUSH
33327: LD_INT 8
33329: PPUSH
33330: CALL_OW 336
// end ; 4 :
33334: GO 33440
33336: LD_INT 4
33338: DOUBLE
33339: EQUAL
33340: IFTRUE 33344
33342: GO 33418
33344: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33345: LD_ADDR_VAR 0 2
33349: PUSH
33350: LD_INT 22
33352: PUSH
33353: LD_OWVAR 2
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 30
33364: PUSH
33365: LD_INT 29
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PPUSH
33376: CALL_OW 69
33380: ST_TO_ADDR
// if not tmp then
33381: LD_VAR 0 2
33385: NOT
33386: IFFALSE 33390
// exit ;
33388: GO 33440
// CenterNowOnUnits ( tmp [ 1 ] ) ;
33390: LD_VAR 0 2
33394: PUSH
33395: LD_INT 1
33397: ARRAY
33398: PPUSH
33399: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
33403: LD_VAR 0 2
33407: PUSH
33408: LD_INT 1
33410: ARRAY
33411: PPUSH
33412: CALL_OW 65
// end ; 5 .. 7 :
33416: GO 33440
33418: LD_INT 5
33420: DOUBLE
33421: GREATEREQUAL
33422: IFFALSE 33430
33424: LD_INT 7
33426: DOUBLE
33427: LESSEQUAL
33428: IFTRUE 33432
33430: GO 33439
33432: POP
// StreamSibBomb ; end ;
33433: CALL 29621 0 0
33437: GO 33440
33439: POP
// end ;
33440: PPOPN 3
33442: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33443: LD_EXP 55
33447: IFFALSE 33455
33449: PUSH
33450: LD_EXP 105
33454: AND
33455: IFFALSE 33611
33457: GO 33459
33459: DISABLE
33460: LD_INT 0
33462: PPUSH
33463: PPUSH
33464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33465: LD_ADDR_VAR 0 2
33469: PUSH
33470: LD_INT 81
33472: PUSH
33473: LD_OWVAR 2
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 2
33484: PUSH
33485: LD_INT 21
33487: PUSH
33488: LD_INT 1
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 21
33497: PUSH
33498: LD_INT 2
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: LIST
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PPUSH
33514: CALL_OW 69
33518: ST_TO_ADDR
// if not tmp then
33519: LD_VAR 0 2
33523: NOT
33524: IFFALSE 33528
// exit ;
33526: GO 33611
// p := 0 ;
33528: LD_ADDR_VAR 0 3
33532: PUSH
33533: LD_INT 0
33535: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33536: LD_INT 35
33538: PPUSH
33539: CALL_OW 67
// p := p + 1 ;
33543: LD_ADDR_VAR 0 3
33547: PUSH
33548: LD_VAR 0 3
33552: PUSH
33553: LD_INT 1
33555: PLUS
33556: ST_TO_ADDR
// for i in tmp do
33557: LD_ADDR_VAR 0 1
33561: PUSH
33562: LD_VAR 0 2
33566: PUSH
33567: FOR_IN
33568: IFFALSE 33599
// if GetLives ( i ) < 1000 then
33570: LD_VAR 0 1
33574: PPUSH
33575: CALL_OW 256
33579: PUSH
33580: LD_INT 1000
33582: LESS
33583: IFFALSE 33597
// SetLives ( i , 1000 ) ;
33585: LD_VAR 0 1
33589: PPUSH
33590: LD_INT 1000
33592: PPUSH
33593: CALL_OW 234
33597: GO 33567
33599: POP
33600: POP
// until p > 20 ;
33601: LD_VAR 0 3
33605: PUSH
33606: LD_INT 20
33608: GREATER
33609: IFFALSE 33536
// end ;
33611: PPOPN 3
33613: END
// every 0 0$1 trigger StreamModeActive and sTime do
33614: LD_EXP 55
33618: IFFALSE 33626
33620: PUSH
33621: LD_EXP 106
33625: AND
33626: IFFALSE 33661
33628: GO 33630
33630: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33631: LD_INT 28
33633: PPUSH
33634: LD_OWVAR 2
33638: PPUSH
33639: LD_INT 2
33641: PPUSH
33642: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33646: LD_INT 30
33648: PPUSH
33649: LD_OWVAR 2
33653: PPUSH
33654: LD_INT 2
33656: PPUSH
33657: CALL_OW 322
// end ;
33661: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33662: LD_EXP 55
33666: IFFALSE 33674
33668: PUSH
33669: LD_EXP 107
33673: AND
33674: IFFALSE 33795
33676: GO 33678
33678: DISABLE
33679: LD_INT 0
33681: PPUSH
33682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33683: LD_ADDR_VAR 0 2
33687: PUSH
33688: LD_INT 22
33690: PUSH
33691: LD_OWVAR 2
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 21
33702: PUSH
33703: LD_INT 1
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 3
33712: PUSH
33713: LD_INT 23
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: LIST
33731: PPUSH
33732: CALL_OW 69
33736: ST_TO_ADDR
// if not tmp then
33737: LD_VAR 0 2
33741: NOT
33742: IFFALSE 33746
// exit ;
33744: GO 33795
// for i in tmp do
33746: LD_ADDR_VAR 0 1
33750: PUSH
33751: LD_VAR 0 2
33755: PUSH
33756: FOR_IN
33757: IFFALSE 33793
// begin if Crawls ( i ) then
33759: LD_VAR 0 1
33763: PPUSH
33764: CALL_OW 318
33768: IFFALSE 33779
// ComWalk ( i ) ;
33770: LD_VAR 0 1
33774: PPUSH
33775: CALL_OW 138
// SetClass ( i , 2 ) ;
33779: LD_VAR 0 1
33783: PPUSH
33784: LD_INT 2
33786: PPUSH
33787: CALL_OW 336
// end ;
33791: GO 33756
33793: POP
33794: POP
// end ;
33795: PPOPN 2
33797: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33798: LD_EXP 55
33802: IFFALSE 33810
33804: PUSH
33805: LD_EXP 108
33809: AND
33810: IFFALSE 34100
33812: GO 33814
33814: DISABLE
33815: LD_INT 0
33817: PPUSH
33818: PPUSH
33819: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33820: LD_OWVAR 2
33824: PPUSH
33825: LD_INT 9
33827: PPUSH
33828: LD_INT 1
33830: PPUSH
33831: LD_INT 1
33833: PPUSH
33834: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33838: LD_INT 9
33840: PPUSH
33841: LD_OWVAR 2
33845: PPUSH
33846: CALL_OW 343
// uc_side := 9 ;
33850: LD_ADDR_OWVAR 20
33854: PUSH
33855: LD_INT 9
33857: ST_TO_ADDR
// uc_nation := 2 ;
33858: LD_ADDR_OWVAR 21
33862: PUSH
33863: LD_INT 2
33865: ST_TO_ADDR
// hc_name := Dark Warrior ;
33866: LD_ADDR_OWVAR 26
33870: PUSH
33871: LD_STRING Dark Warrior
33873: ST_TO_ADDR
// hc_gallery :=  ;
33874: LD_ADDR_OWVAR 33
33878: PUSH
33879: LD_STRING 
33881: ST_TO_ADDR
// hc_noskilllimit := true ;
33882: LD_ADDR_OWVAR 76
33886: PUSH
33887: LD_INT 1
33889: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33890: LD_ADDR_OWVAR 31
33894: PUSH
33895: LD_INT 30
33897: PUSH
33898: LD_INT 30
33900: PUSH
33901: LD_INT 30
33903: PUSH
33904: LD_INT 30
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: ST_TO_ADDR
// un := CreateHuman ;
33913: LD_ADDR_VAR 0 3
33917: PUSH
33918: CALL_OW 44
33922: ST_TO_ADDR
// hc_noskilllimit := false ;
33923: LD_ADDR_OWVAR 76
33927: PUSH
33928: LD_INT 0
33930: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33931: LD_VAR 0 3
33935: PPUSH
33936: LD_INT 1
33938: PPUSH
33939: CALL_OW 51
// ToLua ( playRanger() ) ;
33943: LD_STRING playRanger()
33945: PPUSH
33946: CALL_OW 559
// p := 0 ;
33950: LD_ADDR_VAR 0 2
33954: PUSH
33955: LD_INT 0
33957: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33958: LD_INT 35
33960: PPUSH
33961: CALL_OW 67
// p := p + 1 ;
33965: LD_ADDR_VAR 0 2
33969: PUSH
33970: LD_VAR 0 2
33974: PUSH
33975: LD_INT 1
33977: PLUS
33978: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33979: LD_VAR 0 3
33983: PPUSH
33984: CALL_OW 256
33988: PUSH
33989: LD_INT 1000
33991: LESS
33992: IFFALSE 34006
// SetLives ( un , 1000 ) ;
33994: LD_VAR 0 3
33998: PPUSH
33999: LD_INT 1000
34001: PPUSH
34002: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
34006: LD_VAR 0 3
34010: PPUSH
34011: LD_INT 81
34013: PUSH
34014: LD_OWVAR 2
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 91
34025: PUSH
34026: LD_VAR 0 3
34030: PUSH
34031: LD_INT 30
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: LIST
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PPUSH
34043: CALL_OW 69
34047: PPUSH
34048: LD_VAR 0 3
34052: PPUSH
34053: CALL_OW 74
34057: PPUSH
34058: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
34062: LD_VAR 0 2
34066: PUSH
34067: LD_INT 80
34069: GREATER
34070: IFTRUE 34083
34072: PUSH
34073: LD_VAR 0 3
34077: PPUSH
34078: CALL_OW 301
34082: OR
34083: IFFALSE 33958
// if un then
34085: LD_VAR 0 3
34089: IFFALSE 34100
// RemoveUnit ( un ) ;
34091: LD_VAR 0 3
34095: PPUSH
34096: CALL_OW 64
// end ;
34100: PPOPN 3
34102: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
34103: LD_EXP 109
34107: IFFALSE 34223
34109: GO 34111
34111: DISABLE
34112: LD_INT 0
34114: PPUSH
34115: PPUSH
34116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
34117: LD_ADDR_VAR 0 2
34121: PUSH
34122: LD_INT 81
34124: PUSH
34125: LD_OWVAR 2
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 21
34136: PUSH
34137: LD_INT 1
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PPUSH
34148: CALL_OW 69
34152: ST_TO_ADDR
// ToLua ( playComputer() ) ;
34153: LD_STRING playComputer()
34155: PPUSH
34156: CALL_OW 559
// if not tmp then
34160: LD_VAR 0 2
34164: NOT
34165: IFFALSE 34169
// exit ;
34167: GO 34223
// for i in tmp do
34169: LD_ADDR_VAR 0 1
34173: PUSH
34174: LD_VAR 0 2
34178: PUSH
34179: FOR_IN
34180: IFFALSE 34221
// for j := 1 to 4 do
34182: LD_ADDR_VAR 0 3
34186: PUSH
34187: DOUBLE
34188: LD_INT 1
34190: DEC
34191: ST_TO_ADDR
34192: LD_INT 4
34194: PUSH
34195: FOR_TO
34196: IFFALSE 34217
// SetSkill ( i , j , 10 ) ;
34198: LD_VAR 0 1
34202: PPUSH
34203: LD_VAR 0 3
34207: PPUSH
34208: LD_INT 10
34210: PPUSH
34211: CALL_OW 237
34215: GO 34195
34217: POP
34218: POP
34219: GO 34179
34221: POP
34222: POP
// end ;
34223: PPOPN 3
34225: END
// every 0 0$1 trigger s30 do var i , tmp ;
34226: LD_EXP 110
34230: IFFALSE 34299
34232: GO 34234
34234: DISABLE
34235: LD_INT 0
34237: PPUSH
34238: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34239: LD_ADDR_VAR 0 2
34243: PUSH
34244: LD_INT 22
34246: PUSH
34247: LD_OWVAR 2
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PPUSH
34256: CALL_OW 69
34260: ST_TO_ADDR
// if not tmp then
34261: LD_VAR 0 2
34265: NOT
34266: IFFALSE 34270
// exit ;
34268: GO 34299
// for i in tmp do
34270: LD_ADDR_VAR 0 1
34274: PUSH
34275: LD_VAR 0 2
34279: PUSH
34280: FOR_IN
34281: IFFALSE 34297
// SetLives ( i , 300 ) ;
34283: LD_VAR 0 1
34287: PPUSH
34288: LD_INT 300
34290: PPUSH
34291: CALL_OW 234
34295: GO 34280
34297: POP
34298: POP
// end ;
34299: PPOPN 2
34301: END
// every 0 0$1 trigger s60 do var i , tmp ;
34302: LD_EXP 111
34306: IFFALSE 34375
34308: GO 34310
34310: DISABLE
34311: LD_INT 0
34313: PPUSH
34314: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34315: LD_ADDR_VAR 0 2
34319: PUSH
34320: LD_INT 22
34322: PUSH
34323: LD_OWVAR 2
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PPUSH
34332: CALL_OW 69
34336: ST_TO_ADDR
// if not tmp then
34337: LD_VAR 0 2
34341: NOT
34342: IFFALSE 34346
// exit ;
34344: GO 34375
// for i in tmp do
34346: LD_ADDR_VAR 0 1
34350: PUSH
34351: LD_VAR 0 2
34355: PUSH
34356: FOR_IN
34357: IFFALSE 34373
// SetLives ( i , 600 ) ;
34359: LD_VAR 0 1
34363: PPUSH
34364: LD_INT 600
34366: PPUSH
34367: CALL_OW 234
34371: GO 34356
34373: POP
34374: POP
// end ;
34375: PPOPN 2
34377: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34378: LD_INT 0
34380: PPUSH
// case cmd of 301 :
34381: LD_VAR 0 1
34385: PUSH
34386: LD_INT 301
34388: DOUBLE
34389: EQUAL
34390: IFTRUE 34394
34392: GO 34426
34394: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
34395: LD_VAR 0 6
34399: PPUSH
34400: LD_VAR 0 7
34404: PPUSH
34405: LD_VAR 0 8
34409: PPUSH
34410: LD_VAR 0 4
34414: PPUSH
34415: LD_VAR 0 5
34419: PPUSH
34420: CALL 35639 0 5
34424: GO 34547
34426: LD_INT 302
34428: DOUBLE
34429: EQUAL
34430: IFTRUE 34434
34432: GO 34471
34434: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34435: LD_VAR 0 6
34439: PPUSH
34440: LD_VAR 0 7
34444: PPUSH
34445: LD_VAR 0 8
34449: PPUSH
34450: LD_VAR 0 9
34454: PPUSH
34455: LD_VAR 0 4
34459: PPUSH
34460: LD_VAR 0 5
34464: PPUSH
34465: CALL 35730 0 6
34469: GO 34547
34471: LD_INT 303
34473: DOUBLE
34474: EQUAL
34475: IFTRUE 34479
34477: GO 34516
34479: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34480: LD_VAR 0 6
34484: PPUSH
34485: LD_VAR 0 7
34489: PPUSH
34490: LD_VAR 0 8
34494: PPUSH
34495: LD_VAR 0 9
34499: PPUSH
34500: LD_VAR 0 4
34504: PPUSH
34505: LD_VAR 0 5
34509: PPUSH
34510: CALL 34552 0 6
34514: GO 34547
34516: LD_INT 304
34518: DOUBLE
34519: EQUAL
34520: IFTRUE 34524
34522: GO 34546
34524: POP
// hHackTeleport ( unit , x , y ) ; end ;
34525: LD_VAR 0 2
34529: PPUSH
34530: LD_VAR 0 4
34534: PPUSH
34535: LD_VAR 0 5
34539: PPUSH
34540: CALL 36323 0 3
34544: GO 34547
34546: POP
// end ;
34547: LD_VAR 0 12
34551: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34552: LD_INT 0
34554: PPUSH
34555: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34556: LD_VAR 0 1
34560: PUSH
34561: LD_INT 1
34563: LESS
34564: IFTRUE 34576
34566: PUSH
34567: LD_VAR 0 1
34571: PUSH
34572: LD_INT 3
34574: GREATER
34575: OR
34576: IFTRUE 34594
34578: PUSH
34579: LD_VAR 0 5
34583: PPUSH
34584: LD_VAR 0 6
34588: PPUSH
34589: CALL_OW 428
34593: OR
34594: IFFALSE 34598
// exit ;
34596: GO 35326
// uc_side := your_side ;
34598: LD_ADDR_OWVAR 20
34602: PUSH
34603: LD_OWVAR 2
34607: ST_TO_ADDR
// uc_nation := nation ;
34608: LD_ADDR_OWVAR 21
34612: PUSH
34613: LD_VAR 0 1
34617: ST_TO_ADDR
// bc_level = 1 ;
34618: LD_ADDR_OWVAR 43
34622: PUSH
34623: LD_INT 1
34625: ST_TO_ADDR
// case btype of 1 :
34626: LD_VAR 0 2
34630: PUSH
34631: LD_INT 1
34633: DOUBLE
34634: EQUAL
34635: IFTRUE 34639
34637: GO 34650
34639: POP
// bc_type := b_depot ; 2 :
34640: LD_ADDR_OWVAR 42
34644: PUSH
34645: LD_INT 0
34647: ST_TO_ADDR
34648: GO 35270
34650: LD_INT 2
34652: DOUBLE
34653: EQUAL
34654: IFTRUE 34658
34656: GO 34669
34658: POP
// bc_type := b_warehouse ; 3 :
34659: LD_ADDR_OWVAR 42
34663: PUSH
34664: LD_INT 1
34666: ST_TO_ADDR
34667: GO 35270
34669: LD_INT 3
34671: DOUBLE
34672: EQUAL
34673: IFTRUE 34677
34675: GO 34688
34677: POP
// bc_type := b_lab ; 4 .. 9 :
34678: LD_ADDR_OWVAR 42
34682: PUSH
34683: LD_INT 6
34685: ST_TO_ADDR
34686: GO 35270
34688: LD_INT 4
34690: DOUBLE
34691: GREATEREQUAL
34692: IFFALSE 34700
34694: LD_INT 9
34696: DOUBLE
34697: LESSEQUAL
34698: IFTRUE 34702
34700: GO 34762
34702: POP
// begin bc_type := b_lab_half ;
34703: LD_ADDR_OWVAR 42
34707: PUSH
34708: LD_INT 7
34710: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34711: LD_ADDR_OWVAR 44
34715: PUSH
34716: LD_INT 10
34718: PUSH
34719: LD_INT 11
34721: PUSH
34722: LD_INT 12
34724: PUSH
34725: LD_INT 15
34727: PUSH
34728: LD_INT 14
34730: PUSH
34731: LD_INT 13
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: PUSH
34742: LD_VAR 0 2
34746: PUSH
34747: LD_INT 3
34749: MINUS
34750: ARRAY
34751: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
34752: LD_ADDR_OWVAR 45
34756: PUSH
34757: LD_INT 9
34759: ST_TO_ADDR
// end ; 10 .. 13 :
34760: GO 35270
34762: LD_INT 10
34764: DOUBLE
34765: GREATEREQUAL
34766: IFFALSE 34774
34768: LD_INT 13
34770: DOUBLE
34771: LESSEQUAL
34772: IFTRUE 34776
34774: GO 34853
34776: POP
// begin bc_type := b_lab_full ;
34777: LD_ADDR_OWVAR 42
34781: PUSH
34782: LD_INT 8
34784: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34785: LD_ADDR_OWVAR 44
34789: PUSH
34790: LD_INT 10
34792: PUSH
34793: LD_INT 12
34795: PUSH
34796: LD_INT 14
34798: PUSH
34799: LD_INT 13
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: PUSH
34808: LD_VAR 0 2
34812: PUSH
34813: LD_INT 9
34815: MINUS
34816: ARRAY
34817: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34818: LD_ADDR_OWVAR 45
34822: PUSH
34823: LD_INT 11
34825: PUSH
34826: LD_INT 15
34828: PUSH
34829: LD_INT 12
34831: PUSH
34832: LD_INT 15
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: PUSH
34841: LD_VAR 0 2
34845: PUSH
34846: LD_INT 9
34848: MINUS
34849: ARRAY
34850: ST_TO_ADDR
// end ; 14 :
34851: GO 35270
34853: LD_INT 14
34855: DOUBLE
34856: EQUAL
34857: IFTRUE 34861
34859: GO 34872
34861: POP
// bc_type := b_workshop ; 15 :
34862: LD_ADDR_OWVAR 42
34866: PUSH
34867: LD_INT 2
34869: ST_TO_ADDR
34870: GO 35270
34872: LD_INT 15
34874: DOUBLE
34875: EQUAL
34876: IFTRUE 34880
34878: GO 34891
34880: POP
// bc_type := b_factory ; 16 :
34881: LD_ADDR_OWVAR 42
34885: PUSH
34886: LD_INT 3
34888: ST_TO_ADDR
34889: GO 35270
34891: LD_INT 16
34893: DOUBLE
34894: EQUAL
34895: IFTRUE 34899
34897: GO 34910
34899: POP
// bc_type := b_ext_gun ; 17 :
34900: LD_ADDR_OWVAR 42
34904: PUSH
34905: LD_INT 17
34907: ST_TO_ADDR
34908: GO 35270
34910: LD_INT 17
34912: DOUBLE
34913: EQUAL
34914: IFTRUE 34918
34916: GO 34946
34918: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34919: LD_ADDR_OWVAR 42
34923: PUSH
34924: LD_INT 19
34926: PUSH
34927: LD_INT 23
34929: PUSH
34930: LD_INT 19
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: LIST
34937: PUSH
34938: LD_VAR 0 1
34942: ARRAY
34943: ST_TO_ADDR
34944: GO 35270
34946: LD_INT 18
34948: DOUBLE
34949: EQUAL
34950: IFTRUE 34954
34952: GO 34965
34954: POP
// bc_type := b_ext_radar ; 19 :
34955: LD_ADDR_OWVAR 42
34959: PUSH
34960: LD_INT 20
34962: ST_TO_ADDR
34963: GO 35270
34965: LD_INT 19
34967: DOUBLE
34968: EQUAL
34969: IFTRUE 34973
34971: GO 34984
34973: POP
// bc_type := b_ext_radio ; 20 :
34974: LD_ADDR_OWVAR 42
34978: PUSH
34979: LD_INT 22
34981: ST_TO_ADDR
34982: GO 35270
34984: LD_INT 20
34986: DOUBLE
34987: EQUAL
34988: IFTRUE 34992
34990: GO 35003
34992: POP
// bc_type := b_ext_siberium ; 21 :
34993: LD_ADDR_OWVAR 42
34997: PUSH
34998: LD_INT 21
35000: ST_TO_ADDR
35001: GO 35270
35003: LD_INT 21
35005: DOUBLE
35006: EQUAL
35007: IFTRUE 35011
35009: GO 35022
35011: POP
// bc_type := b_ext_computer ; 22 :
35012: LD_ADDR_OWVAR 42
35016: PUSH
35017: LD_INT 24
35019: ST_TO_ADDR
35020: GO 35270
35022: LD_INT 22
35024: DOUBLE
35025: EQUAL
35026: IFTRUE 35030
35028: GO 35041
35030: POP
// bc_type := b_ext_track ; 23 :
35031: LD_ADDR_OWVAR 42
35035: PUSH
35036: LD_INT 16
35038: ST_TO_ADDR
35039: GO 35270
35041: LD_INT 23
35043: DOUBLE
35044: EQUAL
35045: IFTRUE 35049
35047: GO 35060
35049: POP
// bc_type := b_ext_laser ; 24 :
35050: LD_ADDR_OWVAR 42
35054: PUSH
35055: LD_INT 25
35057: ST_TO_ADDR
35058: GO 35270
35060: LD_INT 24
35062: DOUBLE
35063: EQUAL
35064: IFTRUE 35068
35066: GO 35079
35068: POP
// bc_type := b_control_tower ; 25 :
35069: LD_ADDR_OWVAR 42
35073: PUSH
35074: LD_INT 36
35076: ST_TO_ADDR
35077: GO 35270
35079: LD_INT 25
35081: DOUBLE
35082: EQUAL
35083: IFTRUE 35087
35085: GO 35098
35087: POP
// bc_type := b_breastwork ; 26 :
35088: LD_ADDR_OWVAR 42
35092: PUSH
35093: LD_INT 31
35095: ST_TO_ADDR
35096: GO 35270
35098: LD_INT 26
35100: DOUBLE
35101: EQUAL
35102: IFTRUE 35106
35104: GO 35117
35106: POP
// bc_type := b_bunker ; 27 :
35107: LD_ADDR_OWVAR 42
35111: PUSH
35112: LD_INT 32
35114: ST_TO_ADDR
35115: GO 35270
35117: LD_INT 27
35119: DOUBLE
35120: EQUAL
35121: IFTRUE 35125
35123: GO 35136
35125: POP
// bc_type := b_turret ; 28 :
35126: LD_ADDR_OWVAR 42
35130: PUSH
35131: LD_INT 33
35133: ST_TO_ADDR
35134: GO 35270
35136: LD_INT 28
35138: DOUBLE
35139: EQUAL
35140: IFTRUE 35144
35142: GO 35155
35144: POP
// bc_type := b_armoury ; 29 :
35145: LD_ADDR_OWVAR 42
35149: PUSH
35150: LD_INT 4
35152: ST_TO_ADDR
35153: GO 35270
35155: LD_INT 29
35157: DOUBLE
35158: EQUAL
35159: IFTRUE 35163
35161: GO 35174
35163: POP
// bc_type := b_barracks ; 30 :
35164: LD_ADDR_OWVAR 42
35168: PUSH
35169: LD_INT 5
35171: ST_TO_ADDR
35172: GO 35270
35174: LD_INT 30
35176: DOUBLE
35177: EQUAL
35178: IFTRUE 35182
35180: GO 35193
35182: POP
// bc_type := b_solar_power ; 31 :
35183: LD_ADDR_OWVAR 42
35187: PUSH
35188: LD_INT 27
35190: ST_TO_ADDR
35191: GO 35270
35193: LD_INT 31
35195: DOUBLE
35196: EQUAL
35197: IFTRUE 35201
35199: GO 35212
35201: POP
// bc_type := b_oil_power ; 32 :
35202: LD_ADDR_OWVAR 42
35206: PUSH
35207: LD_INT 26
35209: ST_TO_ADDR
35210: GO 35270
35212: LD_INT 32
35214: DOUBLE
35215: EQUAL
35216: IFTRUE 35220
35218: GO 35231
35220: POP
// bc_type := b_siberite_power ; 33 :
35221: LD_ADDR_OWVAR 42
35225: PUSH
35226: LD_INT 28
35228: ST_TO_ADDR
35229: GO 35270
35231: LD_INT 33
35233: DOUBLE
35234: EQUAL
35235: IFTRUE 35239
35237: GO 35250
35239: POP
// bc_type := b_oil_mine ; 34 :
35240: LD_ADDR_OWVAR 42
35244: PUSH
35245: LD_INT 29
35247: ST_TO_ADDR
35248: GO 35270
35250: LD_INT 34
35252: DOUBLE
35253: EQUAL
35254: IFTRUE 35258
35256: GO 35269
35258: POP
// bc_type := b_siberite_mine ; end ;
35259: LD_ADDR_OWVAR 42
35263: PUSH
35264: LD_INT 30
35266: ST_TO_ADDR
35267: GO 35270
35269: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
35270: LD_ADDR_VAR 0 8
35274: PUSH
35275: LD_VAR 0 5
35279: PPUSH
35280: LD_VAR 0 6
35284: PPUSH
35285: LD_VAR 0 3
35289: PPUSH
35290: CALL_OW 47
35294: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
35295: LD_OWVAR 42
35299: PUSH
35300: LD_INT 32
35302: PUSH
35303: LD_INT 33
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: IN
35310: IFFALSE 35326
// PlaceWeaponTurret ( b , weapon ) ;
35312: LD_VAR 0 8
35316: PPUSH
35317: LD_VAR 0 4
35321: PPUSH
35322: CALL_OW 431
// end ;
35326: LD_VAR 0 7
35330: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
35331: LD_INT 0
35333: PPUSH
35334: PPUSH
35335: PPUSH
35336: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35337: LD_ADDR_VAR 0 4
35341: PUSH
35342: LD_INT 22
35344: PUSH
35345: LD_OWVAR 2
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 2
35356: PUSH
35357: LD_INT 30
35359: PUSH
35360: LD_INT 0
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 30
35369: PUSH
35370: LD_INT 1
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: LIST
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PPUSH
35386: CALL_OW 69
35390: ST_TO_ADDR
// if not tmp then
35391: LD_VAR 0 4
35395: NOT
35396: IFFALSE 35400
// exit ;
35398: GO 35459
// for i in tmp do
35400: LD_ADDR_VAR 0 2
35404: PUSH
35405: LD_VAR 0 4
35409: PUSH
35410: FOR_IN
35411: IFFALSE 35457
// for j = 1 to 3 do
35413: LD_ADDR_VAR 0 3
35417: PUSH
35418: DOUBLE
35419: LD_INT 1
35421: DEC
35422: ST_TO_ADDR
35423: LD_INT 3
35425: PUSH
35426: FOR_TO
35427: IFFALSE 35453
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35429: LD_VAR 0 2
35433: PPUSH
35434: CALL_OW 274
35438: PPUSH
35439: LD_VAR 0 3
35443: PPUSH
35444: LD_INT 99999
35446: PPUSH
35447: CALL_OW 277
35451: GO 35426
35453: POP
35454: POP
35455: GO 35410
35457: POP
35458: POP
// end ;
35459: LD_VAR 0 1
35463: RET
// export function hHackSetLevel10 ; var i , j ; begin
35464: LD_INT 0
35466: PPUSH
35467: PPUSH
35468: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35469: LD_ADDR_VAR 0 2
35473: PUSH
35474: LD_INT 21
35476: PUSH
35477: LD_INT 1
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PPUSH
35484: CALL_OW 69
35488: PUSH
35489: FOR_IN
35490: IFFALSE 35542
// if IsSelected ( i ) then
35492: LD_VAR 0 2
35496: PPUSH
35497: CALL_OW 306
35501: IFFALSE 35540
// begin for j := 1 to 4 do
35503: LD_ADDR_VAR 0 3
35507: PUSH
35508: DOUBLE
35509: LD_INT 1
35511: DEC
35512: ST_TO_ADDR
35513: LD_INT 4
35515: PUSH
35516: FOR_TO
35517: IFFALSE 35538
// SetSkill ( i , j , 10 ) ;
35519: LD_VAR 0 2
35523: PPUSH
35524: LD_VAR 0 3
35528: PPUSH
35529: LD_INT 10
35531: PPUSH
35532: CALL_OW 237
35536: GO 35516
35538: POP
35539: POP
// end ;
35540: GO 35489
35542: POP
35543: POP
// end ;
35544: LD_VAR 0 1
35548: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35549: LD_INT 0
35551: PPUSH
35552: PPUSH
35553: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35554: LD_ADDR_VAR 0 2
35558: PUSH
35559: LD_INT 22
35561: PUSH
35562: LD_OWVAR 2
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 21
35573: PUSH
35574: LD_INT 1
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PPUSH
35585: CALL_OW 69
35589: PUSH
35590: FOR_IN
35591: IFFALSE 35632
// begin for j := 1 to 4 do
35593: LD_ADDR_VAR 0 3
35597: PUSH
35598: DOUBLE
35599: LD_INT 1
35601: DEC
35602: ST_TO_ADDR
35603: LD_INT 4
35605: PUSH
35606: FOR_TO
35607: IFFALSE 35628
// SetSkill ( i , j , 10 ) ;
35609: LD_VAR 0 2
35613: PPUSH
35614: LD_VAR 0 3
35618: PPUSH
35619: LD_INT 10
35621: PPUSH
35622: CALL_OW 237
35626: GO 35606
35628: POP
35629: POP
// end ;
35630: GO 35590
35632: POP
35633: POP
// end ;
35634: LD_VAR 0 1
35638: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35639: LD_INT 0
35641: PPUSH
// uc_side := your_side ;
35642: LD_ADDR_OWVAR 20
35646: PUSH
35647: LD_OWVAR 2
35651: ST_TO_ADDR
// uc_nation := nation ;
35652: LD_ADDR_OWVAR 21
35656: PUSH
35657: LD_VAR 0 1
35661: ST_TO_ADDR
// InitHc ;
35662: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35666: LD_INT 0
35668: PPUSH
35669: LD_VAR 0 2
35673: PPUSH
35674: LD_VAR 0 3
35678: PPUSH
35679: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35683: LD_VAR 0 4
35687: PPUSH
35688: LD_VAR 0 5
35692: PPUSH
35693: CALL_OW 428
35697: PUSH
35698: LD_INT 0
35700: EQUAL
35701: IFFALSE 35725
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35703: CALL_OW 44
35707: PPUSH
35708: LD_VAR 0 4
35712: PPUSH
35713: LD_VAR 0 5
35717: PPUSH
35718: LD_INT 1
35720: PPUSH
35721: CALL_OW 48
// end ;
35725: LD_VAR 0 6
35729: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35730: LD_INT 0
35732: PPUSH
35733: PPUSH
// uc_side := your_side ;
35734: LD_ADDR_OWVAR 20
35738: PUSH
35739: LD_OWVAR 2
35743: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35744: LD_VAR 0 1
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: LD_INT 2
35754: PUSH
35755: LD_INT 3
35757: PUSH
35758: LD_INT 4
35760: PUSH
35761: LD_INT 5
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: IN
35771: IFFALSE 35783
// uc_nation := nation_american else
35773: LD_ADDR_OWVAR 21
35777: PUSH
35778: LD_INT 1
35780: ST_TO_ADDR
35781: GO 35826
// if chassis in [ 11 , 12 , 13 , 14 ] then
35783: LD_VAR 0 1
35787: PUSH
35788: LD_INT 11
35790: PUSH
35791: LD_INT 12
35793: PUSH
35794: LD_INT 13
35796: PUSH
35797: LD_INT 14
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: IN
35806: IFFALSE 35818
// uc_nation := nation_arabian else
35808: LD_ADDR_OWVAR 21
35812: PUSH
35813: LD_INT 2
35815: ST_TO_ADDR
35816: GO 35826
// uc_nation := nation_russian ;
35818: LD_ADDR_OWVAR 21
35822: PUSH
35823: LD_INT 3
35825: ST_TO_ADDR
// vc_chassis := chassis ;
35826: LD_ADDR_OWVAR 37
35830: PUSH
35831: LD_VAR 0 1
35835: ST_TO_ADDR
// vc_engine := engine ;
35836: LD_ADDR_OWVAR 39
35840: PUSH
35841: LD_VAR 0 2
35845: ST_TO_ADDR
// vc_control := control ;
35846: LD_ADDR_OWVAR 38
35850: PUSH
35851: LD_VAR 0 3
35855: ST_TO_ADDR
// vc_weapon := weapon ;
35856: LD_ADDR_OWVAR 40
35860: PUSH
35861: LD_VAR 0 4
35865: ST_TO_ADDR
// un := CreateVehicle ;
35866: LD_ADDR_VAR 0 8
35870: PUSH
35871: CALL_OW 45
35875: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35876: LD_VAR 0 8
35880: PPUSH
35881: LD_INT 0
35883: PPUSH
35884: LD_INT 5
35886: PPUSH
35887: CALL_OW 12
35891: PPUSH
35892: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35896: LD_VAR 0 8
35900: PPUSH
35901: LD_VAR 0 5
35905: PPUSH
35906: LD_VAR 0 6
35910: PPUSH
35911: LD_INT 1
35913: PPUSH
35914: CALL_OW 48
// end ;
35918: LD_VAR 0 7
35922: RET
// export hInvincible ; every 1 do
35923: GO 35925
35925: DISABLE
// hInvincible := [ ] ;
35926: LD_ADDR_EXP 112
35930: PUSH
35931: EMPTY
35932: ST_TO_ADDR
35933: END
// every 10 do var i ;
35934: GO 35936
35936: DISABLE
35937: LD_INT 0
35939: PPUSH
// begin enable ;
35940: ENABLE
// if not hInvincible then
35941: LD_EXP 112
35945: NOT
35946: IFFALSE 35950
// exit ;
35948: GO 35994
// for i in hInvincible do
35950: LD_ADDR_VAR 0 1
35954: PUSH
35955: LD_EXP 112
35959: PUSH
35960: FOR_IN
35961: IFFALSE 35992
// if GetLives ( i ) < 1000 then
35963: LD_VAR 0 1
35967: PPUSH
35968: CALL_OW 256
35972: PUSH
35973: LD_INT 1000
35975: LESS
35976: IFFALSE 35990
// SetLives ( i , 1000 ) ;
35978: LD_VAR 0 1
35982: PPUSH
35983: LD_INT 1000
35985: PPUSH
35986: CALL_OW 234
35990: GO 35960
35992: POP
35993: POP
// end ;
35994: PPOPN 1
35996: END
// export function hHackInvincible ; var i ; begin
35997: LD_INT 0
35999: PPUSH
36000: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
36001: LD_ADDR_VAR 0 2
36005: PUSH
36006: LD_INT 2
36008: PUSH
36009: LD_INT 21
36011: PUSH
36012: LD_INT 1
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 21
36021: PUSH
36022: LD_INT 2
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: PPUSH
36034: CALL_OW 69
36038: PUSH
36039: FOR_IN
36040: IFFALSE 36101
// if IsSelected ( i ) then
36042: LD_VAR 0 2
36046: PPUSH
36047: CALL_OW 306
36051: IFFALSE 36099
// begin if i in hInvincible then
36053: LD_VAR 0 2
36057: PUSH
36058: LD_EXP 112
36062: IN
36063: IFFALSE 36083
// hInvincible := hInvincible diff i else
36065: LD_ADDR_EXP 112
36069: PUSH
36070: LD_EXP 112
36074: PUSH
36075: LD_VAR 0 2
36079: DIFF
36080: ST_TO_ADDR
36081: GO 36099
// hInvincible := hInvincible union i ;
36083: LD_ADDR_EXP 112
36087: PUSH
36088: LD_EXP 112
36092: PUSH
36093: LD_VAR 0 2
36097: UNION
36098: ST_TO_ADDR
// end ;
36099: GO 36039
36101: POP
36102: POP
// end ;
36103: LD_VAR 0 1
36107: RET
// export function hHackInvisible ; var i , j ; begin
36108: LD_INT 0
36110: PPUSH
36111: PPUSH
36112: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36113: LD_ADDR_VAR 0 2
36117: PUSH
36118: LD_INT 21
36120: PUSH
36121: LD_INT 1
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PPUSH
36128: CALL_OW 69
36132: PUSH
36133: FOR_IN
36134: IFFALSE 36158
// if IsSelected ( i ) then
36136: LD_VAR 0 2
36140: PPUSH
36141: CALL_OW 306
36145: IFFALSE 36156
// ComForceInvisible ( i ) ;
36147: LD_VAR 0 2
36151: PPUSH
36152: CALL_OW 496
36156: GO 36133
36158: POP
36159: POP
// end ;
36160: LD_VAR 0 1
36164: RET
// export function hHackChangeYourSide ; begin
36165: LD_INT 0
36167: PPUSH
// if your_side = 8 then
36168: LD_OWVAR 2
36172: PUSH
36173: LD_INT 8
36175: EQUAL
36176: IFFALSE 36188
// your_side := 0 else
36178: LD_ADDR_OWVAR 2
36182: PUSH
36183: LD_INT 0
36185: ST_TO_ADDR
36186: GO 36202
// your_side := your_side + 1 ;
36188: LD_ADDR_OWVAR 2
36192: PUSH
36193: LD_OWVAR 2
36197: PUSH
36198: LD_INT 1
36200: PLUS
36201: ST_TO_ADDR
// end ;
36202: LD_VAR 0 1
36206: RET
// export function hHackChangeUnitSide ; var i , j ; begin
36207: LD_INT 0
36209: PPUSH
36210: PPUSH
36211: PPUSH
// for i in all_units do
36212: LD_ADDR_VAR 0 2
36216: PUSH
36217: LD_OWVAR 3
36221: PUSH
36222: FOR_IN
36223: IFFALSE 36301
// if IsSelected ( i ) then
36225: LD_VAR 0 2
36229: PPUSH
36230: CALL_OW 306
36234: IFFALSE 36299
// begin j := GetSide ( i ) ;
36236: LD_ADDR_VAR 0 3
36240: PUSH
36241: LD_VAR 0 2
36245: PPUSH
36246: CALL_OW 255
36250: ST_TO_ADDR
// if j = 8 then
36251: LD_VAR 0 3
36255: PUSH
36256: LD_INT 8
36258: EQUAL
36259: IFFALSE 36271
// j := 0 else
36261: LD_ADDR_VAR 0 3
36265: PUSH
36266: LD_INT 0
36268: ST_TO_ADDR
36269: GO 36285
// j := j + 1 ;
36271: LD_ADDR_VAR 0 3
36275: PUSH
36276: LD_VAR 0 3
36280: PUSH
36281: LD_INT 1
36283: PLUS
36284: ST_TO_ADDR
// SetSide ( i , j ) ;
36285: LD_VAR 0 2
36289: PPUSH
36290: LD_VAR 0 3
36294: PPUSH
36295: CALL_OW 235
// end ;
36299: GO 36222
36301: POP
36302: POP
// end ;
36303: LD_VAR 0 1
36307: RET
// export function hHackFog ; begin
36308: LD_INT 0
36310: PPUSH
// FogOff ( true ) ;
36311: LD_INT 1
36313: PPUSH
36314: CALL_OW 344
// end ;
36318: LD_VAR 0 1
36322: RET
// export function hHackTeleport ( unit , x , y ) ; begin
36323: LD_INT 0
36325: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
36326: LD_VAR 0 1
36330: PPUSH
36331: LD_VAR 0 2
36335: PPUSH
36336: LD_VAR 0 3
36340: PPUSH
36341: LD_INT 1
36343: PPUSH
36344: LD_INT 1
36346: PPUSH
36347: CALL_OW 483
// CenterOnXY ( x , y ) ;
36351: LD_VAR 0 2
36355: PPUSH
36356: LD_VAR 0 3
36360: PPUSH
36361: CALL_OW 84
// end ;
36365: LD_VAR 0 4
36369: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
36370: LD_INT 0
36372: PPUSH
36373: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
36374: LD_VAR 0 1
36378: NOT
36379: IFTRUE 36398
36381: PUSH
36382: LD_VAR 0 2
36386: PPUSH
36387: LD_VAR 0 3
36391: PPUSH
36392: CALL_OW 488
36396: NOT
36397: OR
36398: IFTRUE 36433
36400: PUSH
36401: LD_VAR 0 1
36405: PPUSH
36406: CALL_OW 266
36410: PUSH
36411: LD_INT 3
36413: NONEQUAL
36414: IFFALSE 36432
36416: PUSH
36417: LD_VAR 0 1
36421: PPUSH
36422: CALL_OW 247
36426: PUSH
36427: LD_INT 1
36429: EQUAL
36430: NOT
36431: AND
36432: OR
36433: IFFALSE 36437
// exit ;
36435: GO 36719
// if GetType ( factory ) = unit_human then
36437: LD_VAR 0 1
36441: PPUSH
36442: CALL_OW 247
36446: PUSH
36447: LD_INT 1
36449: EQUAL
36450: IFFALSE 36467
// factory := IsInUnit ( factory ) ;
36452: LD_ADDR_VAR 0 1
36456: PUSH
36457: LD_VAR 0 1
36461: PPUSH
36462: CALL_OW 310
36466: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
36467: LD_VAR 0 1
36471: PPUSH
36472: CALL_OW 266
36476: PUSH
36477: LD_INT 3
36479: NONEQUAL
36480: IFFALSE 36484
// exit ;
36482: GO 36719
// for i := 1 to Count ( factoryWaypoints ) do
36484: LD_ADDR_VAR 0 5
36488: PUSH
36489: DOUBLE
36490: LD_INT 1
36492: DEC
36493: ST_TO_ADDR
36494: LD_EXP 113
36498: PPUSH
36499: CALL 40049 0 1
36503: PUSH
36504: FOR_TO
36505: IFFALSE 36667
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
36507: LD_VAR 0 2
36511: PPUSH
36512: LD_VAR 0 3
36516: PPUSH
36517: CALL_OW 428
36521: PUSH
36522: LD_EXP 113
36526: PUSH
36527: LD_VAR 0 5
36531: ARRAY
36532: PUSH
36533: LD_INT 2
36535: ARRAY
36536: EQUAL
36537: IFFALSE 36569
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
36539: LD_ADDR_EXP 113
36543: PUSH
36544: LD_EXP 113
36548: PPUSH
36549: LD_VAR 0 5
36553: PPUSH
36554: CALL_OW 3
36558: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36559: CALL 36724 0 0
// exit ;
36563: POP
36564: POP
36565: GO 36719
// end else
36567: GO 36665
// if factory = factoryWaypoints [ i ] [ 2 ] then
36569: LD_VAR 0 1
36573: PUSH
36574: LD_EXP 113
36578: PUSH
36579: LD_VAR 0 5
36583: ARRAY
36584: PUSH
36585: LD_INT 2
36587: ARRAY
36588: EQUAL
36589: IFFALSE 36665
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
36591: LD_ADDR_EXP 113
36595: PUSH
36596: LD_EXP 113
36600: PPUSH
36601: LD_VAR 0 5
36605: PPUSH
36606: CALL_OW 3
36610: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
36611: LD_ADDR_EXP 113
36615: PUSH
36616: LD_EXP 113
36620: PPUSH
36621: LD_VAR 0 1
36625: PPUSH
36626: CALL_OW 255
36630: PUSH
36631: LD_VAR 0 1
36635: PUSH
36636: LD_VAR 0 2
36640: PUSH
36641: LD_VAR 0 3
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: PPUSH
36652: CALL 76025 0 2
36656: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36657: CALL 36724 0 0
// exit ;
36661: POP
36662: POP
36663: GO 36719
// end ; end ;
36665: GO 36504
36667: POP
36668: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
36669: LD_ADDR_EXP 113
36673: PUSH
36674: LD_EXP 113
36678: PPUSH
36679: LD_VAR 0 1
36683: PPUSH
36684: CALL_OW 255
36688: PUSH
36689: LD_VAR 0 1
36693: PUSH
36694: LD_VAR 0 2
36698: PUSH
36699: LD_VAR 0 3
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: PPUSH
36710: CALL 76025 0 2
36714: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36715: CALL 36724 0 0
// end ;
36719: LD_VAR 0 4
36723: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
36724: LD_INT 0
36726: PPUSH
36727: PPUSH
36728: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
36729: LD_STRING resetFactoryWaypoint();
36731: PPUSH
36732: CALL_OW 559
// if factoryWaypoints then
36736: LD_EXP 113
36740: IFFALSE 36861
// begin list := factoryWaypoints ;
36742: LD_ADDR_VAR 0 3
36746: PUSH
36747: LD_EXP 113
36751: ST_TO_ADDR
// for i := 1 to list do
36752: LD_ADDR_VAR 0 2
36756: PUSH
36757: DOUBLE
36758: LD_INT 1
36760: DEC
36761: ST_TO_ADDR
36762: LD_VAR 0 3
36766: PUSH
36767: FOR_TO
36768: IFFALSE 36859
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36770: LD_STRING setFactoryWaypointXY(
36772: PUSH
36773: LD_VAR 0 3
36777: PUSH
36778: LD_VAR 0 2
36782: ARRAY
36783: PUSH
36784: LD_INT 1
36786: ARRAY
36787: STR
36788: PUSH
36789: LD_STRING ,
36791: STR
36792: PUSH
36793: LD_VAR 0 3
36797: PUSH
36798: LD_VAR 0 2
36802: ARRAY
36803: PUSH
36804: LD_INT 2
36806: ARRAY
36807: STR
36808: PUSH
36809: LD_STRING ,
36811: STR
36812: PUSH
36813: LD_VAR 0 3
36817: PUSH
36818: LD_VAR 0 2
36822: ARRAY
36823: PUSH
36824: LD_INT 3
36826: ARRAY
36827: STR
36828: PUSH
36829: LD_STRING ,
36831: STR
36832: PUSH
36833: LD_VAR 0 3
36837: PUSH
36838: LD_VAR 0 2
36842: ARRAY
36843: PUSH
36844: LD_INT 4
36846: ARRAY
36847: STR
36848: PUSH
36849: LD_STRING )
36851: STR
36852: PPUSH
36853: CALL_OW 559
36857: GO 36767
36859: POP
36860: POP
// end ; end ;
36861: LD_VAR 0 1
36865: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
36866: LD_INT 0
36868: PPUSH
// if HexInfo ( x , y ) = warehouse then
36869: LD_VAR 0 2
36873: PPUSH
36874: LD_VAR 0 3
36878: PPUSH
36879: CALL_OW 428
36883: PUSH
36884: LD_VAR 0 1
36888: EQUAL
36889: IFFALSE 36916
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
36891: LD_ADDR_EXP 115
36895: PUSH
36896: LD_EXP 115
36900: PPUSH
36901: LD_VAR 0 1
36905: PPUSH
36906: LD_INT 0
36908: PPUSH
36909: CALL_OW 1
36913: ST_TO_ADDR
36914: GO 36967
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
36916: LD_ADDR_EXP 115
36920: PUSH
36921: LD_EXP 115
36925: PPUSH
36926: LD_VAR 0 1
36930: PPUSH
36931: LD_VAR 0 1
36935: PPUSH
36936: CALL_OW 255
36940: PUSH
36941: LD_VAR 0 1
36945: PUSH
36946: LD_VAR 0 2
36950: PUSH
36951: LD_VAR 0 3
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: PPUSH
36962: CALL_OW 1
36966: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
36967: CALL 36976 0 0
// end ;
36971: LD_VAR 0 4
36975: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
36976: LD_INT 0
36978: PPUSH
36979: PPUSH
36980: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
36981: LD_STRING resetWarehouseGatheringPoints();
36983: PPUSH
36984: CALL_OW 559
// if warehouseGatheringPoints then
36988: LD_EXP 115
36992: IFFALSE 37118
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
36994: LD_ADDR_VAR 0 3
36998: PUSH
36999: LD_EXP 115
37003: PPUSH
37004: CALL 79959 0 1
37008: ST_TO_ADDR
// for i := 1 to list do
37009: LD_ADDR_VAR 0 2
37013: PUSH
37014: DOUBLE
37015: LD_INT 1
37017: DEC
37018: ST_TO_ADDR
37019: LD_VAR 0 3
37023: PUSH
37024: FOR_TO
37025: IFFALSE 37116
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
37027: LD_STRING setWarehouseGatheringPointXY(
37029: PUSH
37030: LD_VAR 0 3
37034: PUSH
37035: LD_VAR 0 2
37039: ARRAY
37040: PUSH
37041: LD_INT 1
37043: ARRAY
37044: STR
37045: PUSH
37046: LD_STRING ,
37048: STR
37049: PUSH
37050: LD_VAR 0 3
37054: PUSH
37055: LD_VAR 0 2
37059: ARRAY
37060: PUSH
37061: LD_INT 2
37063: ARRAY
37064: STR
37065: PUSH
37066: LD_STRING ,
37068: STR
37069: PUSH
37070: LD_VAR 0 3
37074: PUSH
37075: LD_VAR 0 2
37079: ARRAY
37080: PUSH
37081: LD_INT 3
37083: ARRAY
37084: STR
37085: PUSH
37086: LD_STRING ,
37088: STR
37089: PUSH
37090: LD_VAR 0 3
37094: PUSH
37095: LD_VAR 0 2
37099: ARRAY
37100: PUSH
37101: LD_INT 4
37103: ARRAY
37104: STR
37105: PUSH
37106: LD_STRING )
37108: STR
37109: PPUSH
37110: CALL_OW 559
37114: GO 37024
37116: POP
37117: POP
// end ; end ;
37118: LD_VAR 0 1
37122: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
37123: LD_EXP 115
37127: IFFALSE 37822
37129: GO 37131
37131: DISABLE
37132: LD_INT 0
37134: PPUSH
37135: PPUSH
37136: PPUSH
37137: PPUSH
37138: PPUSH
37139: PPUSH
37140: PPUSH
37141: PPUSH
37142: PPUSH
// begin enable ;
37143: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
37144: LD_ADDR_VAR 0 3
37148: PUSH
37149: LD_EXP 115
37153: PPUSH
37154: CALL 79959 0 1
37158: ST_TO_ADDR
// if not list then
37159: LD_VAR 0 3
37163: NOT
37164: IFFALSE 37168
// exit ;
37166: GO 37822
// for i := 1 to list do
37168: LD_ADDR_VAR 0 1
37172: PUSH
37173: DOUBLE
37174: LD_INT 1
37176: DEC
37177: ST_TO_ADDR
37178: LD_VAR 0 3
37182: PUSH
37183: FOR_TO
37184: IFFALSE 37820
// begin depot := list [ i ] [ 2 ] ;
37186: LD_ADDR_VAR 0 8
37190: PUSH
37191: LD_VAR 0 3
37195: PUSH
37196: LD_VAR 0 1
37200: ARRAY
37201: PUSH
37202: LD_INT 2
37204: ARRAY
37205: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
37206: LD_ADDR_VAR 0 5
37210: PUSH
37211: LD_VAR 0 3
37215: PUSH
37216: LD_VAR 0 1
37220: ARRAY
37221: PUSH
37222: LD_INT 1
37224: ARRAY
37225: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
37226: LD_VAR 0 8
37230: PPUSH
37231: CALL_OW 301
37235: IFTRUE 37254
37237: PUSH
37238: LD_VAR 0 5
37242: PUSH
37243: LD_VAR 0 8
37247: PPUSH
37248: CALL_OW 255
37252: NONEQUAL
37253: OR
37254: IFFALSE 37283
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
37256: LD_ADDR_EXP 115
37260: PUSH
37261: LD_EXP 115
37265: PPUSH
37266: LD_VAR 0 8
37270: PPUSH
37271: LD_INT 0
37273: PPUSH
37274: CALL_OW 1
37278: ST_TO_ADDR
// exit ;
37279: POP
37280: POP
37281: GO 37822
// end ; x := list [ i ] [ 3 ] ;
37283: LD_ADDR_VAR 0 6
37287: PUSH
37288: LD_VAR 0 3
37292: PUSH
37293: LD_VAR 0 1
37297: ARRAY
37298: PUSH
37299: LD_INT 3
37301: ARRAY
37302: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
37303: LD_ADDR_VAR 0 7
37307: PUSH
37308: LD_VAR 0 3
37312: PUSH
37313: LD_VAR 0 1
37317: ARRAY
37318: PUSH
37319: LD_INT 4
37321: ARRAY
37322: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
37323: LD_ADDR_VAR 0 9
37327: PUSH
37328: LD_VAR 0 6
37332: PPUSH
37333: LD_VAR 0 7
37337: PPUSH
37338: LD_INT 16
37340: PPUSH
37341: CALL 78533 0 3
37345: ST_TO_ADDR
// if not cratesNearbyPoint then
37346: LD_VAR 0 9
37350: NOT
37351: IFFALSE 37357
// exit ;
37353: POP
37354: POP
37355: GO 37822
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
37357: LD_ADDR_VAR 0 4
37361: PUSH
37362: LD_INT 22
37364: PUSH
37365: LD_VAR 0 5
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 3
37376: PUSH
37377: LD_INT 60
37379: PUSH
37380: EMPTY
37381: LIST
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 91
37389: PUSH
37390: LD_VAR 0 8
37394: PUSH
37395: LD_INT 6
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 2
37405: PUSH
37406: LD_INT 25
37408: PUSH
37409: LD_INT 2
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 25
37418: PUSH
37419: LD_INT 16
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: LIST
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: PPUSH
37437: CALL_OW 69
37441: PUSH
37442: LD_VAR 0 8
37446: PPUSH
37447: CALL_OW 313
37451: PPUSH
37452: LD_INT 3
37454: PUSH
37455: LD_INT 60
37457: PUSH
37458: EMPTY
37459: LIST
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 2
37467: PUSH
37468: LD_INT 25
37470: PUSH
37471: LD_INT 2
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 25
37480: PUSH
37481: LD_INT 16
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: LIST
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PPUSH
37497: CALL_OW 72
37501: UNION
37502: ST_TO_ADDR
// if tmp then
37503: LD_VAR 0 4
37507: IFFALSE 37587
// begin tmp := ShrinkArray ( tmp , 3 ) ;
37509: LD_ADDR_VAR 0 4
37513: PUSH
37514: LD_VAR 0 4
37518: PPUSH
37519: LD_INT 3
37521: PPUSH
37522: CALL 76340 0 2
37526: ST_TO_ADDR
// for j in tmp do
37527: LD_ADDR_VAR 0 2
37531: PUSH
37532: LD_VAR 0 4
37536: PUSH
37537: FOR_IN
37538: IFFALSE 37581
// begin if IsInUnit ( j ) then
37540: LD_VAR 0 2
37544: PPUSH
37545: CALL_OW 310
37549: IFFALSE 37560
// ComExit ( j ) ;
37551: LD_VAR 0 2
37555: PPUSH
37556: CALL 76423 0 1
// AddComCollect ( j , x , y ) ;
37560: LD_VAR 0 2
37564: PPUSH
37565: LD_VAR 0 6
37569: PPUSH
37570: LD_VAR 0 7
37574: PPUSH
37575: CALL_OW 177
// end ;
37579: GO 37537
37581: POP
37582: POP
// exit ;
37583: POP
37584: POP
37585: GO 37822
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
37587: LD_ADDR_VAR 0 4
37591: PUSH
37592: LD_INT 22
37594: PUSH
37595: LD_VAR 0 5
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 91
37606: PUSH
37607: LD_VAR 0 8
37611: PUSH
37612: LD_INT 8
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 2
37622: PUSH
37623: LD_INT 34
37625: PUSH
37626: LD_INT 12
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 34
37635: PUSH
37636: LD_INT 51
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 34
37645: PUSH
37646: LD_INT 32
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 34
37655: PUSH
37656: LD_INT 89
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: LIST
37674: PPUSH
37675: CALL_OW 69
37679: ST_TO_ADDR
// if tmp then
37680: LD_VAR 0 4
37684: IFFALSE 37818
// begin for j in tmp do
37686: LD_ADDR_VAR 0 2
37690: PUSH
37691: LD_VAR 0 4
37695: PUSH
37696: FOR_IN
37697: IFFALSE 37816
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
37699: LD_VAR 0 2
37703: PPUSH
37704: CALL_OW 262
37708: PUSH
37709: LD_INT 3
37711: EQUAL
37712: IFTRUE 37729
37714: PUSH
37715: LD_VAR 0 2
37719: PPUSH
37720: CALL_OW 261
37724: PUSH
37725: LD_INT 20
37727: GREATER
37728: OR
37729: IFFALSE 37743
37731: PUSH
37732: LD_VAR 0 2
37736: PPUSH
37737: CALL_OW 314
37741: NOT
37742: AND
37743: IFFALSE 37773
37745: PUSH
37746: LD_VAR 0 2
37750: PPUSH
37751: CALL_OW 263
37755: PUSH
37756: LD_INT 1
37758: NONEQUAL
37759: IFTRUE 37772
37761: PUSH
37762: LD_VAR 0 2
37766: PPUSH
37767: CALL_OW 311
37771: OR
37772: AND
37773: IFFALSE 37814
// begin ComCollect ( j , x , y ) ;
37775: LD_VAR 0 2
37779: PPUSH
37780: LD_VAR 0 6
37784: PPUSH
37785: LD_VAR 0 7
37789: PPUSH
37790: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
37794: LD_VAR 0 2
37798: PPUSH
37799: LD_VAR 0 8
37803: PPUSH
37804: CALL_OW 172
// exit ;
37808: POP
37809: POP
37810: POP
37811: POP
37812: GO 37822
// end ;
37814: GO 37696
37816: POP
37817: POP
// end ; end ;
37818: GO 37183
37820: POP
37821: POP
// end ; end_of_file end_of_file
37822: PPOPN 9
37824: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37825: LD_INT 0
37827: PPUSH
37828: PPUSH
// if exist_mode then
37829: LD_VAR 0 2
37833: IFFALSE 37879
// begin unit := CreateCharacter ( prefix & ident ) ;
37835: LD_ADDR_VAR 0 5
37839: PUSH
37840: LD_VAR 0 3
37844: PUSH
37845: LD_VAR 0 1
37849: STR
37850: PPUSH
37851: CALL_OW 34
37855: ST_TO_ADDR
// if unit then
37856: LD_VAR 0 5
37860: IFFALSE 37877
// DeleteCharacters ( prefix & ident ) ;
37862: LD_VAR 0 3
37866: PUSH
37867: LD_VAR 0 1
37871: STR
37872: PPUSH
37873: CALL_OW 40
// end else
37877: GO 37894
// unit := NewCharacter ( ident ) ;
37879: LD_ADDR_VAR 0 5
37883: PUSH
37884: LD_VAR 0 1
37888: PPUSH
37889: CALL_OW 25
37893: ST_TO_ADDR
// result := unit ;
37894: LD_ADDR_VAR 0 4
37898: PUSH
37899: LD_VAR 0 5
37903: ST_TO_ADDR
// end ;
37904: LD_VAR 0 4
37908: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
37909: LD_INT 0
37911: PPUSH
37912: PPUSH
// if exist_mode then
37913: LD_VAR 0 2
37917: IFFALSE 37942
// unit := CreateCharacter ( prefix & ident ) else
37919: LD_ADDR_VAR 0 5
37923: PUSH
37924: LD_VAR 0 3
37928: PUSH
37929: LD_VAR 0 1
37933: STR
37934: PPUSH
37935: CALL_OW 34
37939: ST_TO_ADDR
37940: GO 37957
// unit := NewCharacter ( ident ) ;
37942: LD_ADDR_VAR 0 5
37946: PUSH
37947: LD_VAR 0 1
37951: PPUSH
37952: CALL_OW 25
37956: ST_TO_ADDR
// result := unit ;
37957: LD_ADDR_VAR 0 4
37961: PUSH
37962: LD_VAR 0 5
37966: ST_TO_ADDR
// end ;
37967: LD_VAR 0 4
37971: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37972: LD_INT 0
37974: PPUSH
37975: PPUSH
// if not side or not nation then
37976: LD_VAR 0 1
37980: NOT
37981: IFTRUE 37990
37983: PUSH
37984: LD_VAR 0 2
37988: NOT
37989: OR
37990: IFFALSE 37994
// exit ;
37992: GO 38788
// case nation of nation_american :
37994: LD_VAR 0 2
37998: PUSH
37999: LD_INT 1
38001: DOUBLE
38002: EQUAL
38003: IFTRUE 38007
38005: GO 38229
38007: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
38008: LD_ADDR_VAR 0 4
38012: PUSH
38013: LD_INT 35
38015: PUSH
38016: LD_INT 45
38018: PUSH
38019: LD_INT 46
38021: PUSH
38022: LD_INT 47
38024: PUSH
38025: LD_INT 82
38027: PUSH
38028: LD_INT 83
38030: PUSH
38031: LD_INT 84
38033: PUSH
38034: LD_INT 85
38036: PUSH
38037: LD_INT 86
38039: PUSH
38040: LD_INT 1
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: LD_INT 6
38048: PUSH
38049: LD_INT 15
38051: PUSH
38052: LD_INT 16
38054: PUSH
38055: LD_INT 7
38057: PUSH
38058: LD_INT 12
38060: PUSH
38061: LD_INT 13
38063: PUSH
38064: LD_INT 10
38066: PUSH
38067: LD_INT 14
38069: PUSH
38070: LD_INT 20
38072: PUSH
38073: LD_INT 21
38075: PUSH
38076: LD_INT 22
38078: PUSH
38079: LD_INT 25
38081: PUSH
38082: LD_INT 32
38084: PUSH
38085: LD_INT 27
38087: PUSH
38088: LD_INT 36
38090: PUSH
38091: LD_INT 69
38093: PUSH
38094: LD_INT 39
38096: PUSH
38097: LD_INT 34
38099: PUSH
38100: LD_INT 40
38102: PUSH
38103: LD_INT 48
38105: PUSH
38106: LD_INT 49
38108: PUSH
38109: LD_INT 50
38111: PUSH
38112: LD_INT 51
38114: PUSH
38115: LD_INT 52
38117: PUSH
38118: LD_INT 53
38120: PUSH
38121: LD_INT 54
38123: PUSH
38124: LD_INT 55
38126: PUSH
38127: LD_INT 56
38129: PUSH
38130: LD_INT 57
38132: PUSH
38133: LD_INT 58
38135: PUSH
38136: LD_INT 59
38138: PUSH
38139: LD_INT 60
38141: PUSH
38142: LD_INT 61
38144: PUSH
38145: LD_INT 62
38147: PUSH
38148: LD_INT 80
38150: PUSH
38151: LD_INT 82
38153: PUSH
38154: LD_INT 83
38156: PUSH
38157: LD_INT 84
38159: PUSH
38160: LD_INT 85
38162: PUSH
38163: LD_INT 86
38165: PUSH
38166: LD_INT 90
38168: PUSH
38169: LD_INT 93
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: ST_TO_ADDR
38227: GO 38710
38229: LD_INT 2
38231: DOUBLE
38232: EQUAL
38233: IFTRUE 38237
38235: GO 38471
38237: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
38238: LD_ADDR_VAR 0 4
38242: PUSH
38243: LD_INT 35
38245: PUSH
38246: LD_INT 45
38248: PUSH
38249: LD_INT 46
38251: PUSH
38252: LD_INT 47
38254: PUSH
38255: LD_INT 82
38257: PUSH
38258: LD_INT 83
38260: PUSH
38261: LD_INT 84
38263: PUSH
38264: LD_INT 85
38266: PUSH
38267: LD_INT 87
38269: PUSH
38270: LD_INT 70
38272: PUSH
38273: LD_INT 1
38275: PUSH
38276: LD_INT 11
38278: PUSH
38279: LD_INT 3
38281: PUSH
38282: LD_INT 4
38284: PUSH
38285: LD_INT 5
38287: PUSH
38288: LD_INT 6
38290: PUSH
38291: LD_INT 15
38293: PUSH
38294: LD_INT 18
38296: PUSH
38297: LD_INT 7
38299: PUSH
38300: LD_INT 17
38302: PUSH
38303: LD_INT 8
38305: PUSH
38306: LD_INT 20
38308: PUSH
38309: LD_INT 21
38311: PUSH
38312: LD_INT 22
38314: PUSH
38315: LD_INT 72
38317: PUSH
38318: LD_INT 26
38320: PUSH
38321: LD_INT 69
38323: PUSH
38324: LD_INT 39
38326: PUSH
38327: LD_INT 40
38329: PUSH
38330: LD_INT 41
38332: PUSH
38333: LD_INT 42
38335: PUSH
38336: LD_INT 43
38338: PUSH
38339: LD_INT 48
38341: PUSH
38342: LD_INT 49
38344: PUSH
38345: LD_INT 50
38347: PUSH
38348: LD_INT 51
38350: PUSH
38351: LD_INT 52
38353: PUSH
38354: LD_INT 53
38356: PUSH
38357: LD_INT 54
38359: PUSH
38360: LD_INT 55
38362: PUSH
38363: LD_INT 56
38365: PUSH
38366: LD_INT 60
38368: PUSH
38369: LD_INT 61
38371: PUSH
38372: LD_INT 62
38374: PUSH
38375: LD_INT 66
38377: PUSH
38378: LD_INT 67
38380: PUSH
38381: LD_INT 68
38383: PUSH
38384: LD_INT 81
38386: PUSH
38387: LD_INT 82
38389: PUSH
38390: LD_INT 83
38392: PUSH
38393: LD_INT 84
38395: PUSH
38396: LD_INT 85
38398: PUSH
38399: LD_INT 87
38401: PUSH
38402: LD_INT 88
38404: PUSH
38405: LD_INT 92
38407: PUSH
38408: LD_INT 94
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: ST_TO_ADDR
38469: GO 38710
38471: LD_INT 3
38473: DOUBLE
38474: EQUAL
38475: IFTRUE 38479
38477: GO 38709
38479: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
38480: LD_ADDR_VAR 0 4
38484: PUSH
38485: LD_INT 46
38487: PUSH
38488: LD_INT 47
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: LD_INT 2
38496: PUSH
38497: LD_INT 82
38499: PUSH
38500: LD_INT 83
38502: PUSH
38503: LD_INT 84
38505: PUSH
38506: LD_INT 85
38508: PUSH
38509: LD_INT 86
38511: PUSH
38512: LD_INT 11
38514: PUSH
38515: LD_INT 9
38517: PUSH
38518: LD_INT 20
38520: PUSH
38521: LD_INT 19
38523: PUSH
38524: LD_INT 21
38526: PUSH
38527: LD_INT 24
38529: PUSH
38530: LD_INT 22
38532: PUSH
38533: LD_INT 25
38535: PUSH
38536: LD_INT 28
38538: PUSH
38539: LD_INT 29
38541: PUSH
38542: LD_INT 30
38544: PUSH
38545: LD_INT 31
38547: PUSH
38548: LD_INT 37
38550: PUSH
38551: LD_INT 38
38553: PUSH
38554: LD_INT 32
38556: PUSH
38557: LD_INT 27
38559: PUSH
38560: LD_INT 33
38562: PUSH
38563: LD_INT 69
38565: PUSH
38566: LD_INT 39
38568: PUSH
38569: LD_INT 34
38571: PUSH
38572: LD_INT 40
38574: PUSH
38575: LD_INT 71
38577: PUSH
38578: LD_INT 23
38580: PUSH
38581: LD_INT 44
38583: PUSH
38584: LD_INT 48
38586: PUSH
38587: LD_INT 49
38589: PUSH
38590: LD_INT 50
38592: PUSH
38593: LD_INT 51
38595: PUSH
38596: LD_INT 52
38598: PUSH
38599: LD_INT 53
38601: PUSH
38602: LD_INT 54
38604: PUSH
38605: LD_INT 55
38607: PUSH
38608: LD_INT 56
38610: PUSH
38611: LD_INT 57
38613: PUSH
38614: LD_INT 58
38616: PUSH
38617: LD_INT 59
38619: PUSH
38620: LD_INT 63
38622: PUSH
38623: LD_INT 64
38625: PUSH
38626: LD_INT 65
38628: PUSH
38629: LD_INT 82
38631: PUSH
38632: LD_INT 83
38634: PUSH
38635: LD_INT 84
38637: PUSH
38638: LD_INT 85
38640: PUSH
38641: LD_INT 86
38643: PUSH
38644: LD_INT 89
38646: PUSH
38647: LD_INT 91
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: ST_TO_ADDR
38707: GO 38710
38709: POP
// if state > - 1 and state < 3 then
38710: LD_VAR 0 3
38714: PUSH
38715: LD_INT 1
38717: NEG
38718: GREATER
38719: IFFALSE 38731
38721: PUSH
38722: LD_VAR 0 3
38726: PUSH
38727: LD_INT 3
38729: LESS
38730: AND
38731: IFFALSE 38788
// for i in result do
38733: LD_ADDR_VAR 0 5
38737: PUSH
38738: LD_VAR 0 4
38742: PUSH
38743: FOR_IN
38744: IFFALSE 38786
// if GetTech ( i , side ) <> state then
38746: LD_VAR 0 5
38750: PPUSH
38751: LD_VAR 0 1
38755: PPUSH
38756: CALL_OW 321
38760: PUSH
38761: LD_VAR 0 3
38765: NONEQUAL
38766: IFFALSE 38784
// result := result diff i ;
38768: LD_ADDR_VAR 0 4
38772: PUSH
38773: LD_VAR 0 4
38777: PUSH
38778: LD_VAR 0 5
38782: DIFF
38783: ST_TO_ADDR
38784: GO 38743
38786: POP
38787: POP
// end ;
38788: LD_VAR 0 4
38792: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38793: LD_INT 0
38795: PPUSH
38796: PPUSH
38797: PPUSH
// result := true ;
38798: LD_ADDR_VAR 0 3
38802: PUSH
38803: LD_INT 1
38805: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38806: LD_ADDR_VAR 0 5
38810: PUSH
38811: LD_VAR 0 2
38815: PPUSH
38816: CALL_OW 480
38820: ST_TO_ADDR
// if not tmp then
38821: LD_VAR 0 5
38825: NOT
38826: IFFALSE 38830
// exit ;
38828: GO 38879
// for i in tmp do
38830: LD_ADDR_VAR 0 4
38834: PUSH
38835: LD_VAR 0 5
38839: PUSH
38840: FOR_IN
38841: IFFALSE 38877
// if GetTech ( i , side ) <> state_researched then
38843: LD_VAR 0 4
38847: PPUSH
38848: LD_VAR 0 1
38852: PPUSH
38853: CALL_OW 321
38857: PUSH
38858: LD_INT 2
38860: NONEQUAL
38861: IFFALSE 38875
// begin result := false ;
38863: LD_ADDR_VAR 0 3
38867: PUSH
38868: LD_INT 0
38870: ST_TO_ADDR
// exit ;
38871: POP
38872: POP
38873: GO 38879
// end ;
38875: GO 38840
38877: POP
38878: POP
// end ;
38879: LD_VAR 0 3
38883: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38884: LD_INT 0
38886: PPUSH
38887: PPUSH
38888: PPUSH
38889: PPUSH
38890: PPUSH
38891: PPUSH
38892: PPUSH
38893: PPUSH
38894: PPUSH
38895: PPUSH
38896: PPUSH
38897: PPUSH
38898: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38899: LD_VAR 0 1
38903: NOT
38904: IFTRUE 38921
38906: PUSH
38907: LD_VAR 0 1
38911: PPUSH
38912: CALL_OW 257
38916: PUSH
38917: LD_INT 9
38919: NONEQUAL
38920: OR
38921: IFFALSE 38925
// exit ;
38923: GO 39504
// side := GetSide ( unit ) ;
38925: LD_ADDR_VAR 0 9
38929: PUSH
38930: LD_VAR 0 1
38934: PPUSH
38935: CALL_OW 255
38939: ST_TO_ADDR
// tech_space := tech_spacanom ;
38940: LD_ADDR_VAR 0 12
38944: PUSH
38945: LD_INT 29
38947: ST_TO_ADDR
// tech_time := tech_taurad ;
38948: LD_ADDR_VAR 0 13
38952: PUSH
38953: LD_INT 28
38955: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38956: LD_ADDR_VAR 0 11
38960: PUSH
38961: LD_VAR 0 1
38965: PPUSH
38966: CALL_OW 310
38970: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38971: LD_VAR 0 11
38975: PPUSH
38976: CALL_OW 247
38980: PUSH
38981: LD_INT 2
38983: EQUAL
38984: IFFALSE 38988
// exit ;
38986: GO 39504
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38988: LD_ADDR_VAR 0 8
38992: PUSH
38993: LD_INT 81
38995: PUSH
38996: LD_VAR 0 9
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 3
39007: PUSH
39008: LD_INT 21
39010: PUSH
39011: LD_INT 3
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PPUSH
39026: CALL_OW 69
39030: ST_TO_ADDR
// if not tmp then
39031: LD_VAR 0 8
39035: NOT
39036: IFFALSE 39040
// exit ;
39038: GO 39504
// if in_unit then
39040: LD_VAR 0 11
39044: IFFALSE 39068
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39046: LD_ADDR_VAR 0 10
39050: PUSH
39051: LD_VAR 0 8
39055: PPUSH
39056: LD_VAR 0 11
39060: PPUSH
39061: CALL_OW 74
39065: ST_TO_ADDR
39066: GO 39088
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39068: LD_ADDR_VAR 0 10
39072: PUSH
39073: LD_VAR 0 8
39077: PPUSH
39078: LD_VAR 0 1
39082: PPUSH
39083: CALL_OW 74
39087: ST_TO_ADDR
// if not enemy then
39088: LD_VAR 0 10
39092: NOT
39093: IFFALSE 39097
// exit ;
39095: GO 39504
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39097: LD_VAR 0 11
39101: IFFALSE 39123
39103: PUSH
39104: LD_VAR 0 11
39108: PPUSH
39109: LD_VAR 0 10
39113: PPUSH
39114: CALL_OW 296
39118: PUSH
39119: LD_INT 13
39121: GREATER
39122: AND
39123: IFTRUE 39145
39125: PUSH
39126: LD_VAR 0 1
39130: PPUSH
39131: LD_VAR 0 10
39135: PPUSH
39136: CALL_OW 296
39140: PUSH
39141: LD_INT 12
39143: GREATER
39144: OR
39145: IFFALSE 39149
// exit ;
39147: GO 39504
// missile := [ 1 ] ;
39149: LD_ADDR_VAR 0 14
39153: PUSH
39154: LD_INT 1
39156: PUSH
39157: EMPTY
39158: LIST
39159: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39160: LD_VAR 0 9
39164: PPUSH
39165: LD_VAR 0 12
39169: PPUSH
39170: CALL_OW 325
39174: IFFALSE 39203
// missile := Replace ( missile , missile + 1 , 2 ) ;
39176: LD_ADDR_VAR 0 14
39180: PUSH
39181: LD_VAR 0 14
39185: PPUSH
39186: LD_VAR 0 14
39190: PUSH
39191: LD_INT 1
39193: PLUS
39194: PPUSH
39195: LD_INT 2
39197: PPUSH
39198: CALL_OW 1
39202: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39203: LD_VAR 0 9
39207: PPUSH
39208: LD_VAR 0 13
39212: PPUSH
39213: CALL_OW 325
39217: IFFALSE 39241
39219: PUSH
39220: LD_VAR 0 10
39224: PPUSH
39225: CALL_OW 255
39229: PPUSH
39230: LD_VAR 0 13
39234: PPUSH
39235: CALL_OW 325
39239: NOT
39240: AND
39241: IFFALSE 39270
// missile := Replace ( missile , missile + 1 , 3 ) ;
39243: LD_ADDR_VAR 0 14
39247: PUSH
39248: LD_VAR 0 14
39252: PPUSH
39253: LD_VAR 0 14
39257: PUSH
39258: LD_INT 1
39260: PLUS
39261: PPUSH
39262: LD_INT 3
39264: PPUSH
39265: CALL_OW 1
39269: ST_TO_ADDR
// if missile < 2 then
39270: LD_VAR 0 14
39274: PUSH
39275: LD_INT 2
39277: LESS
39278: IFFALSE 39282
// exit ;
39280: GO 39504
// x := GetX ( enemy ) ;
39282: LD_ADDR_VAR 0 4
39286: PUSH
39287: LD_VAR 0 10
39291: PPUSH
39292: CALL_OW 250
39296: ST_TO_ADDR
// y := GetY ( enemy ) ;
39297: LD_ADDR_VAR 0 5
39301: PUSH
39302: LD_VAR 0 10
39306: PPUSH
39307: CALL_OW 251
39311: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39312: LD_ADDR_VAR 0 6
39316: PUSH
39317: LD_VAR 0 4
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PPUSH
39326: LD_INT 1
39328: PPUSH
39329: CALL_OW 12
39333: PLUS
39334: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39335: LD_ADDR_VAR 0 7
39339: PUSH
39340: LD_VAR 0 5
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PPUSH
39349: LD_INT 1
39351: PPUSH
39352: CALL_OW 12
39356: PLUS
39357: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39358: LD_VAR 0 6
39362: PPUSH
39363: LD_VAR 0 7
39367: PPUSH
39368: CALL_OW 488
39372: NOT
39373: IFFALSE 39395
// begin _x := x ;
39375: LD_ADDR_VAR 0 6
39379: PUSH
39380: LD_VAR 0 4
39384: ST_TO_ADDR
// _y := y ;
39385: LD_ADDR_VAR 0 7
39389: PUSH
39390: LD_VAR 0 5
39394: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39395: LD_ADDR_VAR 0 3
39399: PUSH
39400: LD_INT 1
39402: PPUSH
39403: LD_VAR 0 14
39407: PPUSH
39408: CALL_OW 12
39412: ST_TO_ADDR
// case i of 1 :
39413: LD_VAR 0 3
39417: PUSH
39418: LD_INT 1
39420: DOUBLE
39421: EQUAL
39422: IFTRUE 39426
39424: GO 39443
39426: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39427: LD_VAR 0 1
39431: PPUSH
39432: LD_VAR 0 10
39436: PPUSH
39437: CALL_OW 115
39441: GO 39504
39443: LD_INT 2
39445: DOUBLE
39446: EQUAL
39447: IFTRUE 39451
39449: GO 39473
39451: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39452: LD_VAR 0 1
39456: PPUSH
39457: LD_VAR 0 6
39461: PPUSH
39462: LD_VAR 0 7
39466: PPUSH
39467: CALL_OW 153
39471: GO 39504
39473: LD_INT 3
39475: DOUBLE
39476: EQUAL
39477: IFTRUE 39481
39479: GO 39503
39481: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39482: LD_VAR 0 1
39486: PPUSH
39487: LD_VAR 0 6
39491: PPUSH
39492: LD_VAR 0 7
39496: PPUSH
39497: CALL_OW 154
39501: GO 39504
39503: POP
// end ;
39504: LD_VAR 0 2
39508: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39509: LD_INT 0
39511: PPUSH
39512: PPUSH
39513: PPUSH
39514: PPUSH
39515: PPUSH
39516: PPUSH
// if not unit or not building then
39517: LD_VAR 0 1
39521: NOT
39522: IFTRUE 39531
39524: PUSH
39525: LD_VAR 0 2
39529: NOT
39530: OR
39531: IFFALSE 39535
// exit ;
39533: GO 39693
// x := GetX ( building ) ;
39535: LD_ADDR_VAR 0 5
39539: PUSH
39540: LD_VAR 0 2
39544: PPUSH
39545: CALL_OW 250
39549: ST_TO_ADDR
// y := GetY ( building ) ;
39550: LD_ADDR_VAR 0 6
39554: PUSH
39555: LD_VAR 0 2
39559: PPUSH
39560: CALL_OW 251
39564: ST_TO_ADDR
// for i := 0 to 5 do
39565: LD_ADDR_VAR 0 4
39569: PUSH
39570: DOUBLE
39571: LD_INT 0
39573: DEC
39574: ST_TO_ADDR
39575: LD_INT 5
39577: PUSH
39578: FOR_TO
39579: IFFALSE 39691
// begin _x := ShiftX ( x , i , 3 ) ;
39581: LD_ADDR_VAR 0 7
39585: PUSH
39586: LD_VAR 0 5
39590: PPUSH
39591: LD_VAR 0 4
39595: PPUSH
39596: LD_INT 3
39598: PPUSH
39599: CALL_OW 272
39603: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39604: LD_ADDR_VAR 0 8
39608: PUSH
39609: LD_VAR 0 6
39613: PPUSH
39614: LD_VAR 0 4
39618: PPUSH
39619: LD_INT 3
39621: PPUSH
39622: CALL_OW 273
39626: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39627: LD_VAR 0 7
39631: PPUSH
39632: LD_VAR 0 8
39636: PPUSH
39637: CALL_OW 488
39641: NOT
39642: IFFALSE 39646
// continue ;
39644: GO 39578
// if HexInfo ( _x , _y ) = 0 then
39646: LD_VAR 0 7
39650: PPUSH
39651: LD_VAR 0 8
39655: PPUSH
39656: CALL_OW 428
39660: PUSH
39661: LD_INT 0
39663: EQUAL
39664: IFFALSE 39689
// begin ComMoveXY ( unit , _x , _y ) ;
39666: LD_VAR 0 1
39670: PPUSH
39671: LD_VAR 0 7
39675: PPUSH
39676: LD_VAR 0 8
39680: PPUSH
39681: CALL_OW 111
// exit ;
39685: POP
39686: POP
39687: GO 39693
// end ; end ;
39689: GO 39578
39691: POP
39692: POP
// end ;
39693: LD_VAR 0 3
39697: RET
// export function ScanBase ( side , base_area ) ; begin
39698: LD_INT 0
39700: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39701: LD_ADDR_VAR 0 3
39705: PUSH
39706: LD_VAR 0 2
39710: PPUSH
39711: LD_INT 81
39713: PUSH
39714: LD_VAR 0 1
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PPUSH
39723: CALL_OW 70
39727: ST_TO_ADDR
// end ;
39728: LD_VAR 0 3
39732: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39733: LD_INT 0
39735: PPUSH
39736: PPUSH
39737: PPUSH
39738: PPUSH
// result := false ;
39739: LD_ADDR_VAR 0 2
39743: PUSH
39744: LD_INT 0
39746: ST_TO_ADDR
// side := GetSide ( unit ) ;
39747: LD_ADDR_VAR 0 3
39751: PUSH
39752: LD_VAR 0 1
39756: PPUSH
39757: CALL_OW 255
39761: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39762: LD_ADDR_VAR 0 4
39766: PUSH
39767: LD_VAR 0 1
39771: PPUSH
39772: CALL_OW 248
39776: ST_TO_ADDR
// case nat of 1 :
39777: LD_VAR 0 4
39781: PUSH
39782: LD_INT 1
39784: DOUBLE
39785: EQUAL
39786: IFTRUE 39790
39788: GO 39801
39790: POP
// tech := tech_lassight ; 2 :
39791: LD_ADDR_VAR 0 5
39795: PUSH
39796: LD_INT 12
39798: ST_TO_ADDR
39799: GO 39840
39801: LD_INT 2
39803: DOUBLE
39804: EQUAL
39805: IFTRUE 39809
39807: GO 39820
39809: POP
// tech := tech_mortar ; 3 :
39810: LD_ADDR_VAR 0 5
39814: PUSH
39815: LD_INT 41
39817: ST_TO_ADDR
39818: GO 39840
39820: LD_INT 3
39822: DOUBLE
39823: EQUAL
39824: IFTRUE 39828
39826: GO 39839
39828: POP
// tech := tech_bazooka ; end ;
39829: LD_ADDR_VAR 0 5
39833: PUSH
39834: LD_INT 44
39836: ST_TO_ADDR
39837: GO 39840
39839: POP
// if Researched ( side , tech ) then
39840: LD_VAR 0 3
39844: PPUSH
39845: LD_VAR 0 5
39849: PPUSH
39850: CALL_OW 325
39854: IFFALSE 39881
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39856: LD_ADDR_VAR 0 2
39860: PUSH
39861: LD_INT 5
39863: PUSH
39864: LD_INT 8
39866: PUSH
39867: LD_INT 9
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: LIST
39874: PUSH
39875: LD_VAR 0 4
39879: ARRAY
39880: ST_TO_ADDR
// end ;
39881: LD_VAR 0 2
39885: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39886: LD_INT 0
39888: PPUSH
39889: PPUSH
39890: PPUSH
// if not mines then
39891: LD_VAR 0 2
39895: NOT
39896: IFFALSE 39900
// exit ;
39898: GO 40044
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39900: LD_ADDR_VAR 0 5
39904: PUSH
39905: LD_INT 81
39907: PUSH
39908: LD_VAR 0 1
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 3
39919: PUSH
39920: LD_INT 21
39922: PUSH
39923: LD_INT 3
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PPUSH
39938: CALL_OW 69
39942: ST_TO_ADDR
// for i in mines do
39943: LD_ADDR_VAR 0 4
39947: PUSH
39948: LD_VAR 0 2
39952: PUSH
39953: FOR_IN
39954: IFFALSE 40042
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39956: LD_VAR 0 4
39960: PUSH
39961: LD_INT 1
39963: ARRAY
39964: PPUSH
39965: LD_VAR 0 4
39969: PUSH
39970: LD_INT 2
39972: ARRAY
39973: PPUSH
39974: CALL_OW 458
39978: NOT
39979: IFFALSE 39983
// continue ;
39981: GO 39953
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39983: LD_VAR 0 4
39987: PUSH
39988: LD_INT 1
39990: ARRAY
39991: PPUSH
39992: LD_VAR 0 4
39996: PUSH
39997: LD_INT 2
39999: ARRAY
40000: PPUSH
40001: CALL_OW 428
40005: PUSH
40006: LD_VAR 0 5
40010: IN
40011: IFFALSE 40040
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40013: LD_VAR 0 4
40017: PUSH
40018: LD_INT 1
40020: ARRAY
40021: PPUSH
40022: LD_VAR 0 4
40026: PUSH
40027: LD_INT 2
40029: ARRAY
40030: PPUSH
40031: LD_VAR 0 1
40035: PPUSH
40036: CALL_OW 456
// end ;
40040: GO 39953
40042: POP
40043: POP
// end ;
40044: LD_VAR 0 3
40048: RET
// export function Count ( array ) ; begin
40049: LD_INT 0
40051: PPUSH
// result := array + 0 ;
40052: LD_ADDR_VAR 0 2
40056: PUSH
40057: LD_VAR 0 1
40061: PUSH
40062: LD_INT 0
40064: PLUS
40065: ST_TO_ADDR
// end ;
40066: LD_VAR 0 2
40070: RET
// export function IsEmpty ( building ) ; begin
40071: LD_INT 0
40073: PPUSH
// if not building then
40074: LD_VAR 0 1
40078: NOT
40079: IFFALSE 40083
// exit ;
40081: GO 40126
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40083: LD_ADDR_VAR 0 2
40087: PUSH
40088: LD_VAR 0 1
40092: PUSH
40093: LD_INT 22
40095: PUSH
40096: LD_VAR 0 1
40100: PPUSH
40101: CALL_OW 255
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 58
40112: PUSH
40113: EMPTY
40114: LIST
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PPUSH
40120: CALL_OW 69
40124: IN
40125: ST_TO_ADDR
// end ;
40126: LD_VAR 0 2
40130: RET
// export function IsNotFull ( building ) ; var places ; begin
40131: LD_INT 0
40133: PPUSH
40134: PPUSH
// if not building then
40135: LD_VAR 0 1
40139: NOT
40140: IFFALSE 40144
// exit ;
40142: GO 40172
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
40144: LD_ADDR_VAR 0 2
40148: PUSH
40149: LD_VAR 0 1
40153: PPUSH
40154: LD_INT 3
40156: PUSH
40157: LD_INT 62
40159: PUSH
40160: EMPTY
40161: LIST
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PPUSH
40167: CALL_OW 72
40171: ST_TO_ADDR
// end ;
40172: LD_VAR 0 2
40176: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40177: LD_INT 0
40179: PPUSH
40180: PPUSH
40181: PPUSH
40182: PPUSH
// tmp := [ ] ;
40183: LD_ADDR_VAR 0 3
40187: PUSH
40188: EMPTY
40189: ST_TO_ADDR
// list := [ ] ;
40190: LD_ADDR_VAR 0 5
40194: PUSH
40195: EMPTY
40196: ST_TO_ADDR
// for i = 16 to 25 do
40197: LD_ADDR_VAR 0 4
40201: PUSH
40202: DOUBLE
40203: LD_INT 16
40205: DEC
40206: ST_TO_ADDR
40207: LD_INT 25
40209: PUSH
40210: FOR_TO
40211: IFFALSE 40284
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40213: LD_ADDR_VAR 0 3
40217: PUSH
40218: LD_VAR 0 3
40222: PUSH
40223: LD_INT 22
40225: PUSH
40226: LD_VAR 0 1
40230: PPUSH
40231: CALL_OW 255
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 91
40242: PUSH
40243: LD_VAR 0 1
40247: PUSH
40248: LD_INT 6
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 30
40258: PUSH
40259: LD_VAR 0 4
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: LIST
40272: PUSH
40273: EMPTY
40274: LIST
40275: PPUSH
40276: CALL_OW 69
40280: ADD
40281: ST_TO_ADDR
40282: GO 40210
40284: POP
40285: POP
// for i = 1 to tmp do
40286: LD_ADDR_VAR 0 4
40290: PUSH
40291: DOUBLE
40292: LD_INT 1
40294: DEC
40295: ST_TO_ADDR
40296: LD_VAR 0 3
40300: PUSH
40301: FOR_TO
40302: IFFALSE 40390
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40304: LD_ADDR_VAR 0 5
40308: PUSH
40309: LD_VAR 0 5
40313: PUSH
40314: LD_VAR 0 3
40318: PUSH
40319: LD_VAR 0 4
40323: ARRAY
40324: PPUSH
40325: CALL_OW 266
40329: PUSH
40330: LD_VAR 0 3
40334: PUSH
40335: LD_VAR 0 4
40339: ARRAY
40340: PPUSH
40341: CALL_OW 250
40345: PUSH
40346: LD_VAR 0 3
40350: PUSH
40351: LD_VAR 0 4
40355: ARRAY
40356: PPUSH
40357: CALL_OW 251
40361: PUSH
40362: LD_VAR 0 3
40366: PUSH
40367: LD_VAR 0 4
40371: ARRAY
40372: PPUSH
40373: CALL_OW 254
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: PUSH
40384: EMPTY
40385: LIST
40386: ADD
40387: ST_TO_ADDR
40388: GO 40301
40390: POP
40391: POP
// result := list ;
40392: LD_ADDR_VAR 0 2
40396: PUSH
40397: LD_VAR 0 5
40401: ST_TO_ADDR
// end ;
40402: LD_VAR 0 2
40406: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40407: LD_INT 0
40409: PPUSH
40410: PPUSH
40411: PPUSH
40412: PPUSH
40413: PPUSH
40414: PPUSH
40415: PPUSH
// if not factory then
40416: LD_VAR 0 1
40420: NOT
40421: IFFALSE 40425
// exit ;
40423: GO 41028
// if control = control_apeman then
40425: LD_VAR 0 4
40429: PUSH
40430: LD_INT 5
40432: EQUAL
40433: IFFALSE 40542
// begin tmp := UnitsInside ( factory ) ;
40435: LD_ADDR_VAR 0 8
40439: PUSH
40440: LD_VAR 0 1
40444: PPUSH
40445: CALL_OW 313
40449: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40450: LD_VAR 0 8
40454: PPUSH
40455: LD_INT 25
40457: PUSH
40458: LD_INT 12
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PPUSH
40465: CALL_OW 72
40469: NOT
40470: IFFALSE 40480
// control := control_manual ;
40472: LD_ADDR_VAR 0 4
40476: PUSH
40477: LD_INT 1
40479: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40480: LD_ADDR_VAR 0 8
40484: PUSH
40485: LD_VAR 0 1
40489: PPUSH
40490: CALL 40177 0 1
40494: ST_TO_ADDR
// if tmp then
40495: LD_VAR 0 8
40499: IFFALSE 40542
// begin for i in tmp do
40501: LD_ADDR_VAR 0 7
40505: PUSH
40506: LD_VAR 0 8
40510: PUSH
40511: FOR_IN
40512: IFFALSE 40540
// if i [ 1 ] = b_ext_radio then
40514: LD_VAR 0 7
40518: PUSH
40519: LD_INT 1
40521: ARRAY
40522: PUSH
40523: LD_INT 22
40525: EQUAL
40526: IFFALSE 40538
// begin control := control_remote ;
40528: LD_ADDR_VAR 0 4
40532: PUSH
40533: LD_INT 2
40535: ST_TO_ADDR
// break ;
40536: GO 40540
// end ;
40538: GO 40511
40540: POP
40541: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40542: LD_VAR 0 1
40546: PPUSH
40547: LD_VAR 0 2
40551: PPUSH
40552: LD_VAR 0 3
40556: PPUSH
40557: LD_VAR 0 4
40561: PPUSH
40562: LD_VAR 0 5
40566: PPUSH
40567: CALL_OW 448
40571: IFFALSE 40606
// begin result := [ chassis , engine , control , weapon ] ;
40573: LD_ADDR_VAR 0 6
40577: PUSH
40578: LD_VAR 0 2
40582: PUSH
40583: LD_VAR 0 3
40587: PUSH
40588: LD_VAR 0 4
40592: PUSH
40593: LD_VAR 0 5
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: ST_TO_ADDR
// exit ;
40604: GO 41028
// end ; _chassis := AvailableChassisList ( factory ) ;
40606: LD_ADDR_VAR 0 9
40610: PUSH
40611: LD_VAR 0 1
40615: PPUSH
40616: CALL_OW 475
40620: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40621: LD_ADDR_VAR 0 11
40625: PUSH
40626: LD_VAR 0 1
40630: PPUSH
40631: CALL_OW 476
40635: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40636: LD_ADDR_VAR 0 12
40640: PUSH
40641: LD_VAR 0 1
40645: PPUSH
40646: CALL_OW 477
40650: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40651: LD_ADDR_VAR 0 10
40655: PUSH
40656: LD_VAR 0 1
40660: PPUSH
40661: CALL_OW 478
40665: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40666: LD_VAR 0 9
40670: NOT
40671: IFTRUE 40680
40673: PUSH
40674: LD_VAR 0 11
40678: NOT
40679: OR
40680: IFTRUE 40689
40682: PUSH
40683: LD_VAR 0 12
40687: NOT
40688: OR
40689: IFTRUE 40698
40691: PUSH
40692: LD_VAR 0 10
40696: NOT
40697: OR
40698: IFFALSE 40733
// begin result := [ chassis , engine , control , weapon ] ;
40700: LD_ADDR_VAR 0 6
40704: PUSH
40705: LD_VAR 0 2
40709: PUSH
40710: LD_VAR 0 3
40714: PUSH
40715: LD_VAR 0 4
40719: PUSH
40720: LD_VAR 0 5
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: ST_TO_ADDR
// exit ;
40731: GO 41028
// end ; if not chassis in _chassis then
40733: LD_VAR 0 2
40737: PUSH
40738: LD_VAR 0 9
40742: IN
40743: NOT
40744: IFFALSE 40770
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40746: LD_ADDR_VAR 0 2
40750: PUSH
40751: LD_VAR 0 9
40755: PUSH
40756: LD_INT 1
40758: PPUSH
40759: LD_VAR 0 9
40763: PPUSH
40764: CALL_OW 12
40768: ARRAY
40769: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40770: LD_VAR 0 2
40774: PPUSH
40775: LD_VAR 0 3
40779: PPUSH
40780: CALL 41033 0 2
40784: NOT
40785: IFFALSE 40846
// repeat engine := _engine [ 1 ] ;
40787: LD_ADDR_VAR 0 3
40791: PUSH
40792: LD_VAR 0 11
40796: PUSH
40797: LD_INT 1
40799: ARRAY
40800: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40801: LD_ADDR_VAR 0 11
40805: PUSH
40806: LD_VAR 0 11
40810: PPUSH
40811: LD_INT 1
40813: PPUSH
40814: CALL_OW 3
40818: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40819: LD_VAR 0 2
40823: PPUSH
40824: LD_VAR 0 3
40828: PPUSH
40829: CALL 41033 0 2
40833: IFTRUE 40844
40835: PUSH
40836: LD_VAR 0 11
40840: PUSH
40841: EMPTY
40842: EQUAL
40843: OR
40844: IFFALSE 40787
// if not control in _control then
40846: LD_VAR 0 4
40850: PUSH
40851: LD_VAR 0 12
40855: IN
40856: NOT
40857: IFFALSE 40883
// control := _control [ rand ( 1 , _control ) ] ;
40859: LD_ADDR_VAR 0 4
40863: PUSH
40864: LD_VAR 0 12
40868: PUSH
40869: LD_INT 1
40871: PPUSH
40872: LD_VAR 0 12
40876: PPUSH
40877: CALL_OW 12
40881: ARRAY
40882: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40883: LD_VAR 0 2
40887: PPUSH
40888: LD_VAR 0 5
40892: PPUSH
40893: CALL 41255 0 2
40897: NOT
40898: IFFALSE 40959
// repeat weapon := _weapon [ 1 ] ;
40900: LD_ADDR_VAR 0 5
40904: PUSH
40905: LD_VAR 0 10
40909: PUSH
40910: LD_INT 1
40912: ARRAY
40913: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40914: LD_ADDR_VAR 0 10
40918: PUSH
40919: LD_VAR 0 10
40923: PPUSH
40924: LD_INT 1
40926: PPUSH
40927: CALL_OW 3
40931: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40932: LD_VAR 0 2
40936: PPUSH
40937: LD_VAR 0 5
40941: PPUSH
40942: CALL 41255 0 2
40946: IFTRUE 40957
40948: PUSH
40949: LD_VAR 0 10
40953: PUSH
40954: EMPTY
40955: EQUAL
40956: OR
40957: IFFALSE 40900
// result := [ ] ;
40959: LD_ADDR_VAR 0 6
40963: PUSH
40964: EMPTY
40965: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40966: LD_VAR 0 1
40970: PPUSH
40971: LD_VAR 0 2
40975: PPUSH
40976: LD_VAR 0 3
40980: PPUSH
40981: LD_VAR 0 4
40985: PPUSH
40986: LD_VAR 0 5
40990: PPUSH
40991: CALL_OW 448
40995: IFFALSE 41028
// result := [ chassis , engine , control , weapon ] ;
40997: LD_ADDR_VAR 0 6
41001: PUSH
41002: LD_VAR 0 2
41006: PUSH
41007: LD_VAR 0 3
41011: PUSH
41012: LD_VAR 0 4
41016: PUSH
41017: LD_VAR 0 5
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: ST_TO_ADDR
// end ;
41028: LD_VAR 0 6
41032: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41033: LD_INT 0
41035: PPUSH
// if not chassis or not engine then
41036: LD_VAR 0 1
41040: NOT
41041: IFTRUE 41050
41043: PUSH
41044: LD_VAR 0 2
41048: NOT
41049: OR
41050: IFFALSE 41054
// exit ;
41052: GO 41250
// case engine of engine_solar :
41054: LD_VAR 0 2
41058: PUSH
41059: LD_INT 2
41061: DOUBLE
41062: EQUAL
41063: IFTRUE 41067
41065: GO 41105
41067: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41068: LD_ADDR_VAR 0 3
41072: PUSH
41073: LD_INT 11
41075: PUSH
41076: LD_INT 12
41078: PUSH
41079: LD_INT 13
41081: PUSH
41082: LD_INT 14
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: LD_INT 2
41090: PUSH
41091: LD_INT 3
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: ST_TO_ADDR
41103: GO 41234
41105: LD_INT 1
41107: DOUBLE
41108: EQUAL
41109: IFTRUE 41113
41111: GO 41175
41113: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41114: LD_ADDR_VAR 0 3
41118: PUSH
41119: LD_INT 11
41121: PUSH
41122: LD_INT 12
41124: PUSH
41125: LD_INT 13
41127: PUSH
41128: LD_INT 14
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: LD_INT 3
41139: PUSH
41140: LD_INT 4
41142: PUSH
41143: LD_INT 5
41145: PUSH
41146: LD_INT 21
41148: PUSH
41149: LD_INT 23
41151: PUSH
41152: LD_INT 22
41154: PUSH
41155: LD_INT 24
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: ST_TO_ADDR
41173: GO 41234
41175: LD_INT 3
41177: DOUBLE
41178: EQUAL
41179: IFTRUE 41183
41181: GO 41233
41183: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41184: LD_ADDR_VAR 0 3
41188: PUSH
41189: LD_INT 13
41191: PUSH
41192: LD_INT 14
41194: PUSH
41195: LD_INT 2
41197: PUSH
41198: LD_INT 3
41200: PUSH
41201: LD_INT 4
41203: PUSH
41204: LD_INT 5
41206: PUSH
41207: LD_INT 21
41209: PUSH
41210: LD_INT 22
41212: PUSH
41213: LD_INT 23
41215: PUSH
41216: LD_INT 24
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: ST_TO_ADDR
41231: GO 41234
41233: POP
// result := ( chassis in result ) ;
41234: LD_ADDR_VAR 0 3
41238: PUSH
41239: LD_VAR 0 1
41243: PUSH
41244: LD_VAR 0 3
41248: IN
41249: ST_TO_ADDR
// end ;
41250: LD_VAR 0 3
41254: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41255: LD_INT 0
41257: PPUSH
// if not chassis or not weapon then
41258: LD_VAR 0 1
41262: NOT
41263: IFTRUE 41272
41265: PUSH
41266: LD_VAR 0 2
41270: NOT
41271: OR
41272: IFFALSE 41276
// exit ;
41274: GO 42370
// case weapon of us_machine_gun :
41276: LD_VAR 0 2
41280: PUSH
41281: LD_INT 2
41283: DOUBLE
41284: EQUAL
41285: IFTRUE 41289
41287: GO 41319
41289: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41290: LD_ADDR_VAR 0 3
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: LD_INT 2
41300: PUSH
41301: LD_INT 3
41303: PUSH
41304: LD_INT 4
41306: PUSH
41307: LD_INT 5
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: ST_TO_ADDR
41317: GO 42354
41319: LD_INT 3
41321: DOUBLE
41322: EQUAL
41323: IFTRUE 41327
41325: GO 41357
41327: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41328: LD_ADDR_VAR 0 3
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: LD_INT 2
41338: PUSH
41339: LD_INT 3
41341: PUSH
41342: LD_INT 4
41344: PUSH
41345: LD_INT 5
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: ST_TO_ADDR
41355: GO 42354
41357: LD_INT 11
41359: DOUBLE
41360: EQUAL
41361: IFTRUE 41365
41363: GO 41395
41365: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41366: LD_ADDR_VAR 0 3
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: LD_INT 3
41379: PUSH
41380: LD_INT 4
41382: PUSH
41383: LD_INT 5
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: ST_TO_ADDR
41393: GO 42354
41395: LD_INT 4
41397: DOUBLE
41398: EQUAL
41399: IFTRUE 41403
41401: GO 41429
41403: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41404: LD_ADDR_VAR 0 3
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: LD_INT 3
41414: PUSH
41415: LD_INT 4
41417: PUSH
41418: LD_INT 5
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: ST_TO_ADDR
41427: GO 42354
41429: LD_INT 5
41431: DOUBLE
41432: EQUAL
41433: IFTRUE 41437
41435: GO 41463
41437: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41438: LD_ADDR_VAR 0 3
41442: PUSH
41443: LD_INT 2
41445: PUSH
41446: LD_INT 3
41448: PUSH
41449: LD_INT 4
41451: PUSH
41452: LD_INT 5
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: ST_TO_ADDR
41461: GO 42354
41463: LD_INT 9
41465: DOUBLE
41466: EQUAL
41467: IFTRUE 41471
41469: GO 41497
41471: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41472: LD_ADDR_VAR 0 3
41476: PUSH
41477: LD_INT 2
41479: PUSH
41480: LD_INT 3
41482: PUSH
41483: LD_INT 4
41485: PUSH
41486: LD_INT 5
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: ST_TO_ADDR
41495: GO 42354
41497: LD_INT 7
41499: DOUBLE
41500: EQUAL
41501: IFTRUE 41505
41503: GO 41531
41505: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41506: LD_ADDR_VAR 0 3
41510: PUSH
41511: LD_INT 2
41513: PUSH
41514: LD_INT 3
41516: PUSH
41517: LD_INT 4
41519: PUSH
41520: LD_INT 5
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: ST_TO_ADDR
41529: GO 42354
41531: LD_INT 12
41533: DOUBLE
41534: EQUAL
41535: IFTRUE 41539
41537: GO 41565
41539: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41540: LD_ADDR_VAR 0 3
41544: PUSH
41545: LD_INT 2
41547: PUSH
41548: LD_INT 3
41550: PUSH
41551: LD_INT 4
41553: PUSH
41554: LD_INT 5
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: ST_TO_ADDR
41563: GO 42354
41565: LD_INT 13
41567: DOUBLE
41568: EQUAL
41569: IFTRUE 41573
41571: GO 41599
41573: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41574: LD_ADDR_VAR 0 3
41578: PUSH
41579: LD_INT 2
41581: PUSH
41582: LD_INT 3
41584: PUSH
41585: LD_INT 4
41587: PUSH
41588: LD_INT 5
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: ST_TO_ADDR
41597: GO 42354
41599: LD_INT 14
41601: DOUBLE
41602: EQUAL
41603: IFTRUE 41607
41605: GO 41625
41607: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41608: LD_ADDR_VAR 0 3
41612: PUSH
41613: LD_INT 4
41615: PUSH
41616: LD_INT 5
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: ST_TO_ADDR
41623: GO 42354
41625: LD_INT 6
41627: DOUBLE
41628: EQUAL
41629: IFTRUE 41633
41631: GO 41651
41633: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41634: LD_ADDR_VAR 0 3
41638: PUSH
41639: LD_INT 4
41641: PUSH
41642: LD_INT 5
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: ST_TO_ADDR
41649: GO 42354
41651: LD_INT 10
41653: DOUBLE
41654: EQUAL
41655: IFTRUE 41659
41657: GO 41677
41659: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41660: LD_ADDR_VAR 0 3
41664: PUSH
41665: LD_INT 4
41667: PUSH
41668: LD_INT 5
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: ST_TO_ADDR
41675: GO 42354
41677: LD_INT 22
41679: DOUBLE
41680: EQUAL
41681: IFTRUE 41685
41683: GO 41711
41685: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41686: LD_ADDR_VAR 0 3
41690: PUSH
41691: LD_INT 11
41693: PUSH
41694: LD_INT 12
41696: PUSH
41697: LD_INT 13
41699: PUSH
41700: LD_INT 14
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: ST_TO_ADDR
41709: GO 42354
41711: LD_INT 23
41713: DOUBLE
41714: EQUAL
41715: IFTRUE 41719
41717: GO 41745
41719: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41720: LD_ADDR_VAR 0 3
41724: PUSH
41725: LD_INT 11
41727: PUSH
41728: LD_INT 12
41730: PUSH
41731: LD_INT 13
41733: PUSH
41734: LD_INT 14
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: ST_TO_ADDR
41743: GO 42354
41745: LD_INT 24
41747: DOUBLE
41748: EQUAL
41749: IFTRUE 41753
41751: GO 41779
41753: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41754: LD_ADDR_VAR 0 3
41758: PUSH
41759: LD_INT 11
41761: PUSH
41762: LD_INT 12
41764: PUSH
41765: LD_INT 13
41767: PUSH
41768: LD_INT 14
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: ST_TO_ADDR
41777: GO 42354
41779: LD_INT 30
41781: DOUBLE
41782: EQUAL
41783: IFTRUE 41787
41785: GO 41813
41787: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41788: LD_ADDR_VAR 0 3
41792: PUSH
41793: LD_INT 11
41795: PUSH
41796: LD_INT 12
41798: PUSH
41799: LD_INT 13
41801: PUSH
41802: LD_INT 14
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: ST_TO_ADDR
41811: GO 42354
41813: LD_INT 25
41815: DOUBLE
41816: EQUAL
41817: IFTRUE 41821
41819: GO 41839
41821: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41822: LD_ADDR_VAR 0 3
41826: PUSH
41827: LD_INT 13
41829: PUSH
41830: LD_INT 14
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: ST_TO_ADDR
41837: GO 42354
41839: LD_INT 27
41841: DOUBLE
41842: EQUAL
41843: IFTRUE 41847
41845: GO 41865
41847: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41848: LD_ADDR_VAR 0 3
41852: PUSH
41853: LD_INT 13
41855: PUSH
41856: LD_INT 14
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: ST_TO_ADDR
41863: GO 42354
41865: LD_INT 92
41867: DOUBLE
41868: EQUAL
41869: IFTRUE 41873
41871: GO 41899
41873: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41874: LD_ADDR_VAR 0 3
41878: PUSH
41879: LD_INT 11
41881: PUSH
41882: LD_INT 12
41884: PUSH
41885: LD_INT 13
41887: PUSH
41888: LD_INT 14
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: ST_TO_ADDR
41897: GO 42354
41899: LD_INT 28
41901: DOUBLE
41902: EQUAL
41903: IFTRUE 41907
41905: GO 41925
41907: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41908: LD_ADDR_VAR 0 3
41912: PUSH
41913: LD_INT 13
41915: PUSH
41916: LD_INT 14
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: ST_TO_ADDR
41923: GO 42354
41925: LD_INT 29
41927: DOUBLE
41928: EQUAL
41929: IFTRUE 41933
41931: GO 41951
41933: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41934: LD_ADDR_VAR 0 3
41938: PUSH
41939: LD_INT 13
41941: PUSH
41942: LD_INT 14
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: ST_TO_ADDR
41949: GO 42354
41951: LD_INT 31
41953: DOUBLE
41954: EQUAL
41955: IFTRUE 41959
41957: GO 41977
41959: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41960: LD_ADDR_VAR 0 3
41964: PUSH
41965: LD_INT 13
41967: PUSH
41968: LD_INT 14
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: ST_TO_ADDR
41975: GO 42354
41977: LD_INT 26
41979: DOUBLE
41980: EQUAL
41981: IFTRUE 41985
41983: GO 42003
41985: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41986: LD_ADDR_VAR 0 3
41990: PUSH
41991: LD_INT 13
41993: PUSH
41994: LD_INT 14
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: ST_TO_ADDR
42001: GO 42354
42003: LD_INT 42
42005: DOUBLE
42006: EQUAL
42007: IFTRUE 42011
42009: GO 42037
42011: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42012: LD_ADDR_VAR 0 3
42016: PUSH
42017: LD_INT 21
42019: PUSH
42020: LD_INT 22
42022: PUSH
42023: LD_INT 23
42025: PUSH
42026: LD_INT 24
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: ST_TO_ADDR
42035: GO 42354
42037: LD_INT 43
42039: DOUBLE
42040: EQUAL
42041: IFTRUE 42045
42043: GO 42071
42045: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42046: LD_ADDR_VAR 0 3
42050: PUSH
42051: LD_INT 21
42053: PUSH
42054: LD_INT 22
42056: PUSH
42057: LD_INT 23
42059: PUSH
42060: LD_INT 24
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: ST_TO_ADDR
42069: GO 42354
42071: LD_INT 44
42073: DOUBLE
42074: EQUAL
42075: IFTRUE 42079
42077: GO 42105
42079: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42080: LD_ADDR_VAR 0 3
42084: PUSH
42085: LD_INT 21
42087: PUSH
42088: LD_INT 22
42090: PUSH
42091: LD_INT 23
42093: PUSH
42094: LD_INT 24
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: ST_TO_ADDR
42103: GO 42354
42105: LD_INT 45
42107: DOUBLE
42108: EQUAL
42109: IFTRUE 42113
42111: GO 42139
42113: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42114: LD_ADDR_VAR 0 3
42118: PUSH
42119: LD_INT 21
42121: PUSH
42122: LD_INT 22
42124: PUSH
42125: LD_INT 23
42127: PUSH
42128: LD_INT 24
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: ST_TO_ADDR
42137: GO 42354
42139: LD_INT 49
42141: DOUBLE
42142: EQUAL
42143: IFTRUE 42147
42145: GO 42173
42147: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42148: LD_ADDR_VAR 0 3
42152: PUSH
42153: LD_INT 21
42155: PUSH
42156: LD_INT 22
42158: PUSH
42159: LD_INT 23
42161: PUSH
42162: LD_INT 24
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: ST_TO_ADDR
42171: GO 42354
42173: LD_INT 51
42175: DOUBLE
42176: EQUAL
42177: IFTRUE 42181
42179: GO 42207
42181: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42182: LD_ADDR_VAR 0 3
42186: PUSH
42187: LD_INT 21
42189: PUSH
42190: LD_INT 22
42192: PUSH
42193: LD_INT 23
42195: PUSH
42196: LD_INT 24
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: ST_TO_ADDR
42205: GO 42354
42207: LD_INT 52
42209: DOUBLE
42210: EQUAL
42211: IFTRUE 42215
42213: GO 42241
42215: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42216: LD_ADDR_VAR 0 3
42220: PUSH
42221: LD_INT 21
42223: PUSH
42224: LD_INT 22
42226: PUSH
42227: LD_INT 23
42229: PUSH
42230: LD_INT 24
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: ST_TO_ADDR
42239: GO 42354
42241: LD_INT 53
42243: DOUBLE
42244: EQUAL
42245: IFTRUE 42249
42247: GO 42267
42249: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42250: LD_ADDR_VAR 0 3
42254: PUSH
42255: LD_INT 23
42257: PUSH
42258: LD_INT 24
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: ST_TO_ADDR
42265: GO 42354
42267: LD_INT 46
42269: DOUBLE
42270: EQUAL
42271: IFTRUE 42275
42273: GO 42293
42275: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42276: LD_ADDR_VAR 0 3
42280: PUSH
42281: LD_INT 23
42283: PUSH
42284: LD_INT 24
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: ST_TO_ADDR
42291: GO 42354
42293: LD_INT 47
42295: DOUBLE
42296: EQUAL
42297: IFTRUE 42301
42299: GO 42319
42301: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
42302: LD_ADDR_VAR 0 3
42306: PUSH
42307: LD_INT 23
42309: PUSH
42310: LD_INT 24
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: ST_TO_ADDR
42317: GO 42354
42319: LD_INT 98
42321: DOUBLE
42322: EQUAL
42323: IFTRUE 42327
42325: GO 42353
42327: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42328: LD_ADDR_VAR 0 3
42332: PUSH
42333: LD_INT 21
42335: PUSH
42336: LD_INT 22
42338: PUSH
42339: LD_INT 23
42341: PUSH
42342: LD_INT 24
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: ST_TO_ADDR
42351: GO 42354
42353: POP
// result := ( chassis in result ) ;
42354: LD_ADDR_VAR 0 3
42358: PUSH
42359: LD_VAR 0 1
42363: PUSH
42364: LD_VAR 0 3
42368: IN
42369: ST_TO_ADDR
// end ;
42370: LD_VAR 0 3
42374: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42375: LD_INT 0
42377: PPUSH
42378: PPUSH
42379: PPUSH
42380: PPUSH
42381: PPUSH
42382: PPUSH
42383: PPUSH
// result := array ;
42384: LD_ADDR_VAR 0 5
42388: PUSH
42389: LD_VAR 0 1
42393: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42394: LD_VAR 0 1
42398: NOT
42399: IFTRUE 42408
42401: PUSH
42402: LD_VAR 0 2
42406: NOT
42407: OR
42408: IFTRUE 42417
42410: PUSH
42411: LD_VAR 0 3
42415: NOT
42416: OR
42417: IFTRUE 42431
42419: PUSH
42420: LD_VAR 0 2
42424: PUSH
42425: LD_VAR 0 1
42429: GREATER
42430: OR
42431: IFTRUE 42445
42433: PUSH
42434: LD_VAR 0 3
42438: PUSH
42439: LD_VAR 0 1
42443: GREATER
42444: OR
42445: IFFALSE 42449
// exit ;
42447: GO 42745
// if direction then
42449: LD_VAR 0 4
42453: IFFALSE 42517
// begin d := 1 ;
42455: LD_ADDR_VAR 0 9
42459: PUSH
42460: LD_INT 1
42462: ST_TO_ADDR
// if i_from > i_to then
42463: LD_VAR 0 2
42467: PUSH
42468: LD_VAR 0 3
42472: GREATER
42473: IFFALSE 42499
// length := ( array - i_from ) + i_to else
42475: LD_ADDR_VAR 0 11
42479: PUSH
42480: LD_VAR 0 1
42484: PUSH
42485: LD_VAR 0 2
42489: MINUS
42490: PUSH
42491: LD_VAR 0 3
42495: PLUS
42496: ST_TO_ADDR
42497: GO 42515
// length := i_to - i_from ;
42499: LD_ADDR_VAR 0 11
42503: PUSH
42504: LD_VAR 0 3
42508: PUSH
42509: LD_VAR 0 2
42513: MINUS
42514: ST_TO_ADDR
// end else
42515: GO 42578
// begin d := - 1 ;
42517: LD_ADDR_VAR 0 9
42521: PUSH
42522: LD_INT 1
42524: NEG
42525: ST_TO_ADDR
// if i_from > i_to then
42526: LD_VAR 0 2
42530: PUSH
42531: LD_VAR 0 3
42535: GREATER
42536: IFFALSE 42556
// length := i_from - i_to else
42538: LD_ADDR_VAR 0 11
42542: PUSH
42543: LD_VAR 0 2
42547: PUSH
42548: LD_VAR 0 3
42552: MINUS
42553: ST_TO_ADDR
42554: GO 42578
// length := ( array - i_to ) + i_from ;
42556: LD_ADDR_VAR 0 11
42560: PUSH
42561: LD_VAR 0 1
42565: PUSH
42566: LD_VAR 0 3
42570: MINUS
42571: PUSH
42572: LD_VAR 0 2
42576: PLUS
42577: ST_TO_ADDR
// end ; if not length then
42578: LD_VAR 0 11
42582: NOT
42583: IFFALSE 42587
// exit ;
42585: GO 42745
// tmp := array ;
42587: LD_ADDR_VAR 0 10
42591: PUSH
42592: LD_VAR 0 1
42596: ST_TO_ADDR
// for i = 1 to length do
42597: LD_ADDR_VAR 0 6
42601: PUSH
42602: DOUBLE
42603: LD_INT 1
42605: DEC
42606: ST_TO_ADDR
42607: LD_VAR 0 11
42611: PUSH
42612: FOR_TO
42613: IFFALSE 42733
// begin for j = 1 to array do
42615: LD_ADDR_VAR 0 7
42619: PUSH
42620: DOUBLE
42621: LD_INT 1
42623: DEC
42624: ST_TO_ADDR
42625: LD_VAR 0 1
42629: PUSH
42630: FOR_TO
42631: IFFALSE 42719
// begin k := j + d ;
42633: LD_ADDR_VAR 0 8
42637: PUSH
42638: LD_VAR 0 7
42642: PUSH
42643: LD_VAR 0 9
42647: PLUS
42648: ST_TO_ADDR
// if k > array then
42649: LD_VAR 0 8
42653: PUSH
42654: LD_VAR 0 1
42658: GREATER
42659: IFFALSE 42669
// k := 1 ;
42661: LD_ADDR_VAR 0 8
42665: PUSH
42666: LD_INT 1
42668: ST_TO_ADDR
// if not k then
42669: LD_VAR 0 8
42673: NOT
42674: IFFALSE 42686
// k := array ;
42676: LD_ADDR_VAR 0 8
42680: PUSH
42681: LD_VAR 0 1
42685: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42686: LD_ADDR_VAR 0 10
42690: PUSH
42691: LD_VAR 0 10
42695: PPUSH
42696: LD_VAR 0 8
42700: PPUSH
42701: LD_VAR 0 1
42705: PUSH
42706: LD_VAR 0 7
42710: ARRAY
42711: PPUSH
42712: CALL_OW 1
42716: ST_TO_ADDR
// end ;
42717: GO 42630
42719: POP
42720: POP
// array := tmp ;
42721: LD_ADDR_VAR 0 1
42725: PUSH
42726: LD_VAR 0 10
42730: ST_TO_ADDR
// end ;
42731: GO 42612
42733: POP
42734: POP
// result := array ;
42735: LD_ADDR_VAR 0 5
42739: PUSH
42740: LD_VAR 0 1
42744: ST_TO_ADDR
// end ;
42745: LD_VAR 0 5
42749: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42750: LD_INT 0
42752: PPUSH
42753: PPUSH
// result := 0 ;
42754: LD_ADDR_VAR 0 3
42758: PUSH
42759: LD_INT 0
42761: ST_TO_ADDR
// if not array or not value in array then
42762: LD_VAR 0 1
42766: NOT
42767: IFTRUE 42782
42769: PUSH
42770: LD_VAR 0 2
42774: PUSH
42775: LD_VAR 0 1
42779: IN
42780: NOT
42781: OR
42782: IFFALSE 42786
// exit ;
42784: GO 42840
// for i = 1 to array do
42786: LD_ADDR_VAR 0 4
42790: PUSH
42791: DOUBLE
42792: LD_INT 1
42794: DEC
42795: ST_TO_ADDR
42796: LD_VAR 0 1
42800: PUSH
42801: FOR_TO
42802: IFFALSE 42838
// if value = array [ i ] then
42804: LD_VAR 0 2
42808: PUSH
42809: LD_VAR 0 1
42813: PUSH
42814: LD_VAR 0 4
42818: ARRAY
42819: EQUAL
42820: IFFALSE 42836
// begin result := i ;
42822: LD_ADDR_VAR 0 3
42826: PUSH
42827: LD_VAR 0 4
42831: ST_TO_ADDR
// exit ;
42832: POP
42833: POP
42834: GO 42840
// end ;
42836: GO 42801
42838: POP
42839: POP
// end ;
42840: LD_VAR 0 3
42844: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42845: LD_INT 0
42847: PPUSH
// vc_chassis := chassis ;
42848: LD_ADDR_OWVAR 37
42852: PUSH
42853: LD_VAR 0 1
42857: ST_TO_ADDR
// vc_engine := engine ;
42858: LD_ADDR_OWVAR 39
42862: PUSH
42863: LD_VAR 0 2
42867: ST_TO_ADDR
// vc_control := control ;
42868: LD_ADDR_OWVAR 38
42872: PUSH
42873: LD_VAR 0 3
42877: ST_TO_ADDR
// vc_weapon := weapon ;
42878: LD_ADDR_OWVAR 40
42882: PUSH
42883: LD_VAR 0 4
42887: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42888: LD_ADDR_OWVAR 41
42892: PUSH
42893: LD_VAR 0 5
42897: ST_TO_ADDR
// end ;
42898: LD_VAR 0 6
42902: RET
// export function WantPlant ( unit ) ; var task ; begin
42903: LD_INT 0
42905: PPUSH
42906: PPUSH
// result := false ;
42907: LD_ADDR_VAR 0 2
42911: PUSH
42912: LD_INT 0
42914: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42915: LD_ADDR_VAR 0 3
42919: PUSH
42920: LD_VAR 0 1
42924: PPUSH
42925: CALL_OW 437
42929: ST_TO_ADDR
// if task then
42930: LD_VAR 0 3
42934: IFFALSE 42962
// if task [ 1 ] [ 1 ] = p then
42936: LD_VAR 0 3
42940: PUSH
42941: LD_INT 1
42943: ARRAY
42944: PUSH
42945: LD_INT 1
42947: ARRAY
42948: PUSH
42949: LD_STRING p
42951: EQUAL
42952: IFFALSE 42962
// result := true ;
42954: LD_ADDR_VAR 0 2
42958: PUSH
42959: LD_INT 1
42961: ST_TO_ADDR
// end ;
42962: LD_VAR 0 2
42966: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42967: LD_INT 0
42969: PPUSH
42970: PPUSH
42971: PPUSH
42972: PPUSH
// if pos < 1 then
42973: LD_VAR 0 2
42977: PUSH
42978: LD_INT 1
42980: LESS
42981: IFFALSE 42985
// exit ;
42983: GO 43288
// if pos = 1 then
42985: LD_VAR 0 2
42989: PUSH
42990: LD_INT 1
42992: EQUAL
42993: IFFALSE 43026
// result := Replace ( arr , pos [ 1 ] , value ) else
42995: LD_ADDR_VAR 0 4
42999: PUSH
43000: LD_VAR 0 1
43004: PPUSH
43005: LD_VAR 0 2
43009: PUSH
43010: LD_INT 1
43012: ARRAY
43013: PPUSH
43014: LD_VAR 0 3
43018: PPUSH
43019: CALL_OW 1
43023: ST_TO_ADDR
43024: GO 43288
// begin tmp := arr ;
43026: LD_ADDR_VAR 0 6
43030: PUSH
43031: LD_VAR 0 1
43035: ST_TO_ADDR
// s_arr := [ tmp ] ;
43036: LD_ADDR_VAR 0 7
43040: PUSH
43041: LD_VAR 0 6
43045: PUSH
43046: EMPTY
43047: LIST
43048: ST_TO_ADDR
// for i = 1 to pos - 1 do
43049: LD_ADDR_VAR 0 5
43053: PUSH
43054: DOUBLE
43055: LD_INT 1
43057: DEC
43058: ST_TO_ADDR
43059: LD_VAR 0 2
43063: PUSH
43064: LD_INT 1
43066: MINUS
43067: PUSH
43068: FOR_TO
43069: IFFALSE 43114
// begin tmp := tmp [ pos [ i ] ] ;
43071: LD_ADDR_VAR 0 6
43075: PUSH
43076: LD_VAR 0 6
43080: PUSH
43081: LD_VAR 0 2
43085: PUSH
43086: LD_VAR 0 5
43090: ARRAY
43091: ARRAY
43092: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43093: LD_ADDR_VAR 0 7
43097: PUSH
43098: LD_VAR 0 7
43102: PUSH
43103: LD_VAR 0 6
43107: PUSH
43108: EMPTY
43109: LIST
43110: ADD
43111: ST_TO_ADDR
// end ;
43112: GO 43068
43114: POP
43115: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43116: LD_ADDR_VAR 0 6
43120: PUSH
43121: LD_VAR 0 6
43125: PPUSH
43126: LD_VAR 0 2
43130: PUSH
43131: LD_VAR 0 2
43135: ARRAY
43136: PPUSH
43137: LD_VAR 0 3
43141: PPUSH
43142: CALL_OW 1
43146: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43147: LD_ADDR_VAR 0 7
43151: PUSH
43152: LD_VAR 0 7
43156: PPUSH
43157: LD_VAR 0 7
43161: PPUSH
43162: LD_VAR 0 6
43166: PPUSH
43167: CALL_OW 1
43171: ST_TO_ADDR
// for i = s_arr downto 2 do
43172: LD_ADDR_VAR 0 5
43176: PUSH
43177: DOUBLE
43178: LD_VAR 0 7
43182: INC
43183: ST_TO_ADDR
43184: LD_INT 2
43186: PUSH
43187: FOR_DOWNTO
43188: IFFALSE 43272
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43190: LD_ADDR_VAR 0 6
43194: PUSH
43195: LD_VAR 0 7
43199: PUSH
43200: LD_VAR 0 5
43204: PUSH
43205: LD_INT 1
43207: MINUS
43208: ARRAY
43209: PPUSH
43210: LD_VAR 0 2
43214: PUSH
43215: LD_VAR 0 5
43219: PUSH
43220: LD_INT 1
43222: MINUS
43223: ARRAY
43224: PPUSH
43225: LD_VAR 0 7
43229: PUSH
43230: LD_VAR 0 5
43234: ARRAY
43235: PPUSH
43236: CALL_OW 1
43240: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43241: LD_ADDR_VAR 0 7
43245: PUSH
43246: LD_VAR 0 7
43250: PPUSH
43251: LD_VAR 0 5
43255: PUSH
43256: LD_INT 1
43258: MINUS
43259: PPUSH
43260: LD_VAR 0 6
43264: PPUSH
43265: CALL_OW 1
43269: ST_TO_ADDR
// end ;
43270: GO 43187
43272: POP
43273: POP
// result := s_arr [ 1 ] ;
43274: LD_ADDR_VAR 0 4
43278: PUSH
43279: LD_VAR 0 7
43283: PUSH
43284: LD_INT 1
43286: ARRAY
43287: ST_TO_ADDR
// end ; end ;
43288: LD_VAR 0 4
43292: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43293: LD_INT 0
43295: PPUSH
43296: PPUSH
// if not list then
43297: LD_VAR 0 1
43301: NOT
43302: IFFALSE 43306
// exit ;
43304: GO 43397
// i := list [ pos1 ] ;
43306: LD_ADDR_VAR 0 5
43310: PUSH
43311: LD_VAR 0 1
43315: PUSH
43316: LD_VAR 0 2
43320: ARRAY
43321: ST_TO_ADDR
// if not i then
43322: LD_VAR 0 5
43326: NOT
43327: IFFALSE 43331
// exit ;
43329: GO 43397
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43331: LD_ADDR_VAR 0 1
43335: PUSH
43336: LD_VAR 0 1
43340: PPUSH
43341: LD_VAR 0 2
43345: PPUSH
43346: LD_VAR 0 1
43350: PUSH
43351: LD_VAR 0 3
43355: ARRAY
43356: PPUSH
43357: CALL_OW 1
43361: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43362: LD_ADDR_VAR 0 1
43366: PUSH
43367: LD_VAR 0 1
43371: PPUSH
43372: LD_VAR 0 3
43376: PPUSH
43377: LD_VAR 0 5
43381: PPUSH
43382: CALL_OW 1
43386: ST_TO_ADDR
// result := list ;
43387: LD_ADDR_VAR 0 4
43391: PUSH
43392: LD_VAR 0 1
43396: ST_TO_ADDR
// end ;
43397: LD_VAR 0 4
43401: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43402: LD_INT 0
43404: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43405: LD_ADDR_VAR 0 5
43409: PUSH
43410: LD_VAR 0 1
43414: PPUSH
43415: CALL_OW 250
43419: PPUSH
43420: LD_VAR 0 1
43424: PPUSH
43425: CALL_OW 251
43429: PPUSH
43430: LD_VAR 0 2
43434: PPUSH
43435: LD_VAR 0 3
43439: PPUSH
43440: LD_VAR 0 4
43444: PPUSH
43445: CALL 43827 0 5
43449: ST_TO_ADDR
// end ;
43450: LD_VAR 0 5
43454: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
43455: LD_INT 0
43457: PPUSH
43458: PPUSH
43459: PPUSH
43460: PPUSH
// if not list or not unit then
43461: LD_VAR 0 2
43465: NOT
43466: IFTRUE 43475
43468: PUSH
43469: LD_VAR 0 1
43473: NOT
43474: OR
43475: IFFALSE 43479
// exit ;
43477: GO 43822
// result := [ ] ;
43479: LD_ADDR_VAR 0 5
43483: PUSH
43484: EMPTY
43485: ST_TO_ADDR
// for i in list do
43486: LD_ADDR_VAR 0 6
43490: PUSH
43491: LD_VAR 0 2
43495: PUSH
43496: FOR_IN
43497: IFFALSE 43715
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43499: LD_ADDR_VAR 0 8
43503: PUSH
43504: LD_VAR 0 1
43508: PPUSH
43509: LD_VAR 0 6
43513: PUSH
43514: LD_INT 1
43516: ARRAY
43517: PPUSH
43518: LD_VAR 0 6
43522: PUSH
43523: LD_INT 2
43525: ARRAY
43526: PPUSH
43527: CALL_OW 297
43531: ST_TO_ADDR
// if not Count ( result ) then
43532: LD_VAR 0 5
43536: PPUSH
43537: CALL 40049 0 1
43541: NOT
43542: IFFALSE 43575
// begin result := Join ( result , [ i , tmp ] ) ;
43544: LD_ADDR_VAR 0 5
43548: PUSH
43549: LD_VAR 0 5
43553: PPUSH
43554: LD_VAR 0 6
43558: PUSH
43559: LD_VAR 0 8
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PPUSH
43568: CALL 76025 0 2
43572: ST_TO_ADDR
// continue ;
43573: GO 43496
// end ; if result [ result ] [ 2 ] <= tmp then
43575: LD_VAR 0 5
43579: PUSH
43580: LD_VAR 0 5
43584: ARRAY
43585: PUSH
43586: LD_INT 2
43588: ARRAY
43589: PUSH
43590: LD_VAR 0 8
43594: LESSEQUAL
43595: IFFALSE 43628
// result := Join ( result , [ i , tmp ] ) else
43597: LD_ADDR_VAR 0 5
43601: PUSH
43602: LD_VAR 0 5
43606: PPUSH
43607: LD_VAR 0 6
43611: PUSH
43612: LD_VAR 0 8
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PPUSH
43621: CALL 76025 0 2
43625: ST_TO_ADDR
43626: GO 43713
// begin for j := 1 to Count ( result ) do
43628: LD_ADDR_VAR 0 7
43632: PUSH
43633: DOUBLE
43634: LD_INT 1
43636: DEC
43637: ST_TO_ADDR
43638: LD_VAR 0 5
43642: PPUSH
43643: CALL 40049 0 1
43647: PUSH
43648: FOR_TO
43649: IFFALSE 43711
// begin if tmp < result [ j ] [ 2 ] then
43651: LD_VAR 0 8
43655: PUSH
43656: LD_VAR 0 5
43660: PUSH
43661: LD_VAR 0 7
43665: ARRAY
43666: PUSH
43667: LD_INT 2
43669: ARRAY
43670: LESS
43671: IFFALSE 43709
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43673: LD_ADDR_VAR 0 5
43677: PUSH
43678: LD_VAR 0 5
43682: PPUSH
43683: LD_VAR 0 7
43687: PPUSH
43688: LD_VAR 0 6
43692: PUSH
43693: LD_VAR 0 8
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PPUSH
43702: CALL_OW 2
43706: ST_TO_ADDR
// break ;
43707: GO 43711
// end ; end ;
43709: GO 43648
43711: POP
43712: POP
// end ; end ;
43713: GO 43496
43715: POP
43716: POP
// if result and not asc then
43717: LD_VAR 0 5
43721: IFFALSE 43730
43723: PUSH
43724: LD_VAR 0 3
43728: NOT
43729: AND
43730: IFFALSE 43747
// result := ReverseArray ( result ) ;
43732: LD_ADDR_VAR 0 5
43736: PUSH
43737: LD_VAR 0 5
43741: PPUSH
43742: CALL 71105 0 1
43746: ST_TO_ADDR
// tmp := [ ] ;
43747: LD_ADDR_VAR 0 8
43751: PUSH
43752: EMPTY
43753: ST_TO_ADDR
// if mode then
43754: LD_VAR 0 4
43758: IFFALSE 43822
// begin for i := 1 to result do
43760: LD_ADDR_VAR 0 6
43764: PUSH
43765: DOUBLE
43766: LD_INT 1
43768: DEC
43769: ST_TO_ADDR
43770: LD_VAR 0 5
43774: PUSH
43775: FOR_TO
43776: IFFALSE 43810
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
43778: LD_ADDR_VAR 0 8
43782: PUSH
43783: LD_VAR 0 8
43787: PPUSH
43788: LD_VAR 0 5
43792: PUSH
43793: LD_VAR 0 6
43797: ARRAY
43798: PUSH
43799: LD_INT 1
43801: ARRAY
43802: PPUSH
43803: CALL 76025 0 2
43807: ST_TO_ADDR
43808: GO 43775
43810: POP
43811: POP
// result := tmp ;
43812: LD_ADDR_VAR 0 5
43816: PUSH
43817: LD_VAR 0 8
43821: ST_TO_ADDR
// end ; end ;
43822: LD_VAR 0 5
43826: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43827: LD_INT 0
43829: PPUSH
43830: PPUSH
43831: PPUSH
43832: PPUSH
// if not list then
43833: LD_VAR 0 3
43837: NOT
43838: IFFALSE 43842
// exit ;
43840: GO 44232
// result := [ ] ;
43842: LD_ADDR_VAR 0 6
43846: PUSH
43847: EMPTY
43848: ST_TO_ADDR
// for i in list do
43849: LD_ADDR_VAR 0 7
43853: PUSH
43854: LD_VAR 0 3
43858: PUSH
43859: FOR_IN
43860: IFFALSE 44062
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43862: LD_ADDR_VAR 0 9
43866: PUSH
43867: LD_VAR 0 7
43871: PPUSH
43872: LD_VAR 0 1
43876: PPUSH
43877: LD_VAR 0 2
43881: PPUSH
43882: CALL_OW 297
43886: ST_TO_ADDR
// if not result then
43887: LD_VAR 0 6
43891: NOT
43892: IFFALSE 43918
// result := [ [ i , tmp ] ] else
43894: LD_ADDR_VAR 0 6
43898: PUSH
43899: LD_VAR 0 7
43903: PUSH
43904: LD_VAR 0 9
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: EMPTY
43914: LIST
43915: ST_TO_ADDR
43916: GO 44060
// begin if result [ result ] [ 2 ] <= tmp then
43918: LD_VAR 0 6
43922: PUSH
43923: LD_VAR 0 6
43927: ARRAY
43928: PUSH
43929: LD_INT 2
43931: ARRAY
43932: PUSH
43933: LD_VAR 0 9
43937: LESSEQUAL
43938: IFFALSE 43980
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43940: LD_ADDR_VAR 0 6
43944: PUSH
43945: LD_VAR 0 6
43949: PPUSH
43950: LD_VAR 0 6
43954: PUSH
43955: LD_INT 1
43957: PLUS
43958: PPUSH
43959: LD_VAR 0 7
43963: PUSH
43964: LD_VAR 0 9
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PPUSH
43973: CALL_OW 2
43977: ST_TO_ADDR
43978: GO 44060
// for j := 1 to result do
43980: LD_ADDR_VAR 0 8
43984: PUSH
43985: DOUBLE
43986: LD_INT 1
43988: DEC
43989: ST_TO_ADDR
43990: LD_VAR 0 6
43994: PUSH
43995: FOR_TO
43996: IFFALSE 44058
// begin if tmp < result [ j ] [ 2 ] then
43998: LD_VAR 0 9
44002: PUSH
44003: LD_VAR 0 6
44007: PUSH
44008: LD_VAR 0 8
44012: ARRAY
44013: PUSH
44014: LD_INT 2
44016: ARRAY
44017: LESS
44018: IFFALSE 44056
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44020: LD_ADDR_VAR 0 6
44024: PUSH
44025: LD_VAR 0 6
44029: PPUSH
44030: LD_VAR 0 8
44034: PPUSH
44035: LD_VAR 0 7
44039: PUSH
44040: LD_VAR 0 9
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PPUSH
44049: CALL_OW 2
44053: ST_TO_ADDR
// break ;
44054: GO 44058
// end ; end ;
44056: GO 43995
44058: POP
44059: POP
// end ; end ;
44060: GO 43859
44062: POP
44063: POP
// if result and not asc then
44064: LD_VAR 0 6
44068: IFFALSE 44077
44070: PUSH
44071: LD_VAR 0 4
44075: NOT
44076: AND
44077: IFFALSE 44152
// begin tmp := result ;
44079: LD_ADDR_VAR 0 9
44083: PUSH
44084: LD_VAR 0 6
44088: ST_TO_ADDR
// for i = tmp downto 1 do
44089: LD_ADDR_VAR 0 7
44093: PUSH
44094: DOUBLE
44095: LD_VAR 0 9
44099: INC
44100: ST_TO_ADDR
44101: LD_INT 1
44103: PUSH
44104: FOR_DOWNTO
44105: IFFALSE 44150
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44107: LD_ADDR_VAR 0 6
44111: PUSH
44112: LD_VAR 0 6
44116: PPUSH
44117: LD_VAR 0 9
44121: PUSH
44122: LD_VAR 0 7
44126: MINUS
44127: PUSH
44128: LD_INT 1
44130: PLUS
44131: PPUSH
44132: LD_VAR 0 9
44136: PUSH
44137: LD_VAR 0 7
44141: ARRAY
44142: PPUSH
44143: CALL_OW 1
44147: ST_TO_ADDR
44148: GO 44104
44150: POP
44151: POP
// end ; tmp := [ ] ;
44152: LD_ADDR_VAR 0 9
44156: PUSH
44157: EMPTY
44158: ST_TO_ADDR
// if mode then
44159: LD_VAR 0 5
44163: IFFALSE 44232
// begin for i = 1 to result do
44165: LD_ADDR_VAR 0 7
44169: PUSH
44170: DOUBLE
44171: LD_INT 1
44173: DEC
44174: ST_TO_ADDR
44175: LD_VAR 0 6
44179: PUSH
44180: FOR_TO
44181: IFFALSE 44220
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44183: LD_ADDR_VAR 0 9
44187: PUSH
44188: LD_VAR 0 9
44192: PPUSH
44193: LD_VAR 0 7
44197: PPUSH
44198: LD_VAR 0 6
44202: PUSH
44203: LD_VAR 0 7
44207: ARRAY
44208: PUSH
44209: LD_INT 1
44211: ARRAY
44212: PPUSH
44213: CALL_OW 1
44217: ST_TO_ADDR
44218: GO 44180
44220: POP
44221: POP
// result := tmp ;
44222: LD_ADDR_VAR 0 6
44226: PUSH
44227: LD_VAR 0 9
44231: ST_TO_ADDR
// end ; end ;
44232: LD_VAR 0 6
44236: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44237: LD_INT 0
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
44243: PPUSH
44244: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44245: LD_ADDR_VAR 0 5
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: ST_TO_ADDR
// if not x or not y then
44267: LD_VAR 0 2
44271: NOT
44272: IFTRUE 44281
44274: PUSH
44275: LD_VAR 0 3
44279: NOT
44280: OR
44281: IFFALSE 44285
// exit ;
44283: GO 45941
// if not range then
44285: LD_VAR 0 4
44289: NOT
44290: IFFALSE 44300
// range := 10 ;
44292: LD_ADDR_VAR 0 4
44296: PUSH
44297: LD_INT 10
44299: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44300: LD_ADDR_VAR 0 8
44304: PUSH
44305: LD_INT 81
44307: PUSH
44308: LD_VAR 0 1
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 92
44319: PUSH
44320: LD_VAR 0 2
44324: PUSH
44325: LD_VAR 0 3
44329: PUSH
44330: LD_VAR 0 4
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 3
44343: PUSH
44344: LD_INT 21
44346: PUSH
44347: LD_INT 3
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: LIST
44362: PPUSH
44363: CALL_OW 69
44367: ST_TO_ADDR
// if not tmp then
44368: LD_VAR 0 8
44372: NOT
44373: IFFALSE 44377
// exit ;
44375: GO 45941
// for i in tmp do
44377: LD_ADDR_VAR 0 6
44381: PUSH
44382: LD_VAR 0 8
44386: PUSH
44387: FOR_IN
44388: IFFALSE 45916
// begin points := [ 0 , 0 , 0 ] ;
44390: LD_ADDR_VAR 0 9
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: LIST
44408: ST_TO_ADDR
// bpoints := 1 ;
44409: LD_ADDR_VAR 0 10
44413: PUSH
44414: LD_INT 1
44416: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44417: LD_VAR 0 6
44421: PPUSH
44422: CALL_OW 247
44426: PUSH
44427: LD_INT 1
44429: DOUBLE
44430: EQUAL
44431: IFTRUE 44435
44433: GO 45017
44435: POP
// begin if GetClass ( i ) = 1 then
44436: LD_VAR 0 6
44440: PPUSH
44441: CALL_OW 257
44445: PUSH
44446: LD_INT 1
44448: EQUAL
44449: IFFALSE 44470
// points := [ 10 , 5 , 3 ] ;
44451: LD_ADDR_VAR 0 9
44455: PUSH
44456: LD_INT 10
44458: PUSH
44459: LD_INT 5
44461: PUSH
44462: LD_INT 3
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: LIST
44469: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44470: LD_VAR 0 6
44474: PPUSH
44475: CALL_OW 257
44479: PUSH
44480: LD_INT 2
44482: PUSH
44483: LD_INT 3
44485: PUSH
44486: LD_INT 4
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: IN
44494: IFFALSE 44515
// points := [ 3 , 2 , 1 ] ;
44496: LD_ADDR_VAR 0 9
44500: PUSH
44501: LD_INT 3
44503: PUSH
44504: LD_INT 2
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: LIST
44514: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44515: LD_VAR 0 6
44519: PPUSH
44520: CALL_OW 257
44524: PUSH
44525: LD_INT 5
44527: EQUAL
44528: IFFALSE 44549
// points := [ 130 , 5 , 2 ] ;
44530: LD_ADDR_VAR 0 9
44534: PUSH
44535: LD_INT 130
44537: PUSH
44538: LD_INT 5
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: LIST
44548: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44549: LD_VAR 0 6
44553: PPUSH
44554: CALL_OW 257
44558: PUSH
44559: LD_INT 8
44561: EQUAL
44562: IFFALSE 44583
// points := [ 35 , 35 , 30 ] ;
44564: LD_ADDR_VAR 0 9
44568: PUSH
44569: LD_INT 35
44571: PUSH
44572: LD_INT 35
44574: PUSH
44575: LD_INT 30
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: LIST
44582: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44583: LD_VAR 0 6
44587: PPUSH
44588: CALL_OW 257
44592: PUSH
44593: LD_INT 9
44595: EQUAL
44596: IFFALSE 44617
// points := [ 20 , 55 , 40 ] ;
44598: LD_ADDR_VAR 0 9
44602: PUSH
44603: LD_INT 20
44605: PUSH
44606: LD_INT 55
44608: PUSH
44609: LD_INT 40
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: LIST
44616: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44617: LD_VAR 0 6
44621: PPUSH
44622: CALL_OW 257
44626: PUSH
44627: LD_INT 12
44629: PUSH
44630: LD_INT 16
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: IN
44637: IFFALSE 44658
// points := [ 5 , 3 , 2 ] ;
44639: LD_ADDR_VAR 0 9
44643: PUSH
44644: LD_INT 5
44646: PUSH
44647: LD_INT 3
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: LIST
44657: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44658: LD_VAR 0 6
44662: PPUSH
44663: CALL_OW 257
44667: PUSH
44668: LD_INT 17
44670: EQUAL
44671: IFFALSE 44692
// points := [ 100 , 50 , 75 ] ;
44673: LD_ADDR_VAR 0 9
44677: PUSH
44678: LD_INT 100
44680: PUSH
44681: LD_INT 50
44683: PUSH
44684: LD_INT 75
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: LIST
44691: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44692: LD_VAR 0 6
44696: PPUSH
44697: CALL_OW 257
44701: PUSH
44702: LD_INT 15
44704: EQUAL
44705: IFFALSE 44726
// points := [ 10 , 5 , 3 ] ;
44707: LD_ADDR_VAR 0 9
44711: PUSH
44712: LD_INT 10
44714: PUSH
44715: LD_INT 5
44717: PUSH
44718: LD_INT 3
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: LIST
44725: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44726: LD_VAR 0 6
44730: PPUSH
44731: CALL_OW 257
44735: PUSH
44736: LD_INT 14
44738: EQUAL
44739: IFFALSE 44760
// points := [ 10 , 0 , 0 ] ;
44741: LD_ADDR_VAR 0 9
44745: PUSH
44746: LD_INT 10
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: LIST
44759: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44760: LD_VAR 0 6
44764: PPUSH
44765: CALL_OW 257
44769: PUSH
44770: LD_INT 11
44772: EQUAL
44773: IFFALSE 44794
// points := [ 30 , 10 , 5 ] ;
44775: LD_ADDR_VAR 0 9
44779: PUSH
44780: LD_INT 30
44782: PUSH
44783: LD_INT 10
44785: PUSH
44786: LD_INT 5
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: LIST
44793: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44794: LD_VAR 0 1
44798: PPUSH
44799: LD_INT 5
44801: PPUSH
44802: CALL_OW 321
44806: PUSH
44807: LD_INT 2
44809: EQUAL
44810: IFFALSE 44827
// bpoints := bpoints * 1.8 ;
44812: LD_ADDR_VAR 0 10
44816: PUSH
44817: LD_VAR 0 10
44821: PUSH
44822: LD_REAL  1.80000000000000E+0000
44825: MUL
44826: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44827: LD_VAR 0 6
44831: PPUSH
44832: CALL_OW 257
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: LD_INT 2
44842: PUSH
44843: LD_INT 3
44845: PUSH
44846: LD_INT 4
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: IN
44855: IFFALSE 44875
44857: PUSH
44858: LD_VAR 0 1
44862: PPUSH
44863: LD_INT 51
44865: PPUSH
44866: CALL_OW 321
44870: PUSH
44871: LD_INT 2
44873: EQUAL
44874: AND
44875: IFFALSE 44892
// bpoints := bpoints * 1.2 ;
44877: LD_ADDR_VAR 0 10
44881: PUSH
44882: LD_VAR 0 10
44886: PUSH
44887: LD_REAL  1.20000000000000E+0000
44890: MUL
44891: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44892: LD_VAR 0 6
44896: PPUSH
44897: CALL_OW 257
44901: PUSH
44902: LD_INT 5
44904: PUSH
44905: LD_INT 7
44907: PUSH
44908: LD_INT 9
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: LIST
44915: IN
44916: IFFALSE 44936
44918: PUSH
44919: LD_VAR 0 1
44923: PPUSH
44924: LD_INT 52
44926: PPUSH
44927: CALL_OW 321
44931: PUSH
44932: LD_INT 2
44934: EQUAL
44935: AND
44936: IFFALSE 44953
// bpoints := bpoints * 1.5 ;
44938: LD_ADDR_VAR 0 10
44942: PUSH
44943: LD_VAR 0 10
44947: PUSH
44948: LD_REAL  1.50000000000000E+0000
44951: MUL
44952: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44953: LD_VAR 0 1
44957: PPUSH
44958: LD_INT 66
44960: PPUSH
44961: CALL_OW 321
44965: PUSH
44966: LD_INT 2
44968: EQUAL
44969: IFFALSE 44986
// bpoints := bpoints * 1.1 ;
44971: LD_ADDR_VAR 0 10
44975: PUSH
44976: LD_VAR 0 10
44980: PUSH
44981: LD_REAL  1.10000000000000E+0000
44984: MUL
44985: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44986: LD_ADDR_VAR 0 10
44990: PUSH
44991: LD_VAR 0 10
44995: PUSH
44996: LD_VAR 0 6
45000: PPUSH
45001: LD_INT 1
45003: PPUSH
45004: CALL_OW 259
45008: PUSH
45009: LD_REAL  1.15000000000000E+0000
45012: MUL
45013: MUL
45014: ST_TO_ADDR
// end ; unit_vehicle :
45015: GO 45845
45017: LD_INT 2
45019: DOUBLE
45020: EQUAL
45021: IFTRUE 45025
45023: GO 45833
45025: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45026: LD_VAR 0 6
45030: PPUSH
45031: CALL_OW 264
45035: PUSH
45036: LD_INT 2
45038: PUSH
45039: LD_INT 42
45041: PUSH
45042: LD_INT 24
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: LIST
45049: IN
45050: IFFALSE 45071
// points := [ 25 , 5 , 3 ] ;
45052: LD_ADDR_VAR 0 9
45056: PUSH
45057: LD_INT 25
45059: PUSH
45060: LD_INT 5
45062: PUSH
45063: LD_INT 3
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: LIST
45070: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45071: LD_VAR 0 6
45075: PPUSH
45076: CALL_OW 264
45080: PUSH
45081: LD_INT 4
45083: PUSH
45084: LD_INT 43
45086: PUSH
45087: LD_INT 25
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: LIST
45094: IN
45095: IFFALSE 45116
// points := [ 40 , 15 , 5 ] ;
45097: LD_ADDR_VAR 0 9
45101: PUSH
45102: LD_INT 40
45104: PUSH
45105: LD_INT 15
45107: PUSH
45108: LD_INT 5
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: LIST
45115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45116: LD_VAR 0 6
45120: PPUSH
45121: CALL_OW 264
45125: PUSH
45126: LD_INT 3
45128: PUSH
45129: LD_INT 23
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: IN
45136: IFFALSE 45157
// points := [ 7 , 25 , 8 ] ;
45138: LD_ADDR_VAR 0 9
45142: PUSH
45143: LD_INT 7
45145: PUSH
45146: LD_INT 25
45148: PUSH
45149: LD_INT 8
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45157: LD_VAR 0 6
45161: PPUSH
45162: CALL_OW 264
45166: PUSH
45167: LD_INT 5
45169: PUSH
45170: LD_INT 27
45172: PUSH
45173: LD_INT 44
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: LIST
45180: IN
45181: IFFALSE 45202
// points := [ 14 , 50 , 16 ] ;
45183: LD_ADDR_VAR 0 9
45187: PUSH
45188: LD_INT 14
45190: PUSH
45191: LD_INT 50
45193: PUSH
45194: LD_INT 16
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: LIST
45201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45202: LD_VAR 0 6
45206: PPUSH
45207: CALL_OW 264
45211: PUSH
45212: LD_INT 6
45214: PUSH
45215: LD_INT 46
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: IN
45222: IFFALSE 45243
// points := [ 32 , 120 , 70 ] ;
45224: LD_ADDR_VAR 0 9
45228: PUSH
45229: LD_INT 32
45231: PUSH
45232: LD_INT 120
45234: PUSH
45235: LD_INT 70
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: LIST
45242: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45243: LD_VAR 0 6
45247: PPUSH
45248: CALL_OW 264
45252: PUSH
45253: LD_INT 7
45255: PUSH
45256: LD_INT 28
45258: PUSH
45259: LD_INT 45
45261: PUSH
45262: LD_INT 92
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: IN
45271: IFFALSE 45292
// points := [ 35 , 20 , 45 ] ;
45273: LD_ADDR_VAR 0 9
45277: PUSH
45278: LD_INT 35
45280: PUSH
45281: LD_INT 20
45283: PUSH
45284: LD_INT 45
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: LIST
45291: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45292: LD_VAR 0 6
45296: PPUSH
45297: CALL_OW 264
45301: PUSH
45302: LD_INT 47
45304: PUSH
45305: EMPTY
45306: LIST
45307: IN
45308: IFFALSE 45329
// points := [ 67 , 45 , 75 ] ;
45310: LD_ADDR_VAR 0 9
45314: PUSH
45315: LD_INT 67
45317: PUSH
45318: LD_INT 45
45320: PUSH
45321: LD_INT 75
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: LIST
45328: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45329: LD_VAR 0 6
45333: PPUSH
45334: CALL_OW 264
45338: PUSH
45339: LD_INT 26
45341: PUSH
45342: EMPTY
45343: LIST
45344: IN
45345: IFFALSE 45366
// points := [ 120 , 30 , 80 ] ;
45347: LD_ADDR_VAR 0 9
45351: PUSH
45352: LD_INT 120
45354: PUSH
45355: LD_INT 30
45357: PUSH
45358: LD_INT 80
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: LIST
45365: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45366: LD_VAR 0 6
45370: PPUSH
45371: CALL_OW 264
45375: PUSH
45376: LD_INT 22
45378: PUSH
45379: EMPTY
45380: LIST
45381: IN
45382: IFFALSE 45403
// points := [ 40 , 1 , 1 ] ;
45384: LD_ADDR_VAR 0 9
45388: PUSH
45389: LD_INT 40
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: LIST
45402: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45403: LD_VAR 0 6
45407: PPUSH
45408: CALL_OW 264
45412: PUSH
45413: LD_INT 29
45415: PUSH
45416: EMPTY
45417: LIST
45418: IN
45419: IFFALSE 45440
// points := [ 70 , 200 , 400 ] ;
45421: LD_ADDR_VAR 0 9
45425: PUSH
45426: LD_INT 70
45428: PUSH
45429: LD_INT 200
45431: PUSH
45432: LD_INT 400
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: LIST
45439: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45440: LD_VAR 0 6
45444: PPUSH
45445: CALL_OW 264
45449: PUSH
45450: LD_INT 14
45452: PUSH
45453: LD_INT 53
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: IN
45460: IFFALSE 45481
// points := [ 40 , 10 , 20 ] ;
45462: LD_ADDR_VAR 0 9
45466: PUSH
45467: LD_INT 40
45469: PUSH
45470: LD_INT 10
45472: PUSH
45473: LD_INT 20
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: LIST
45480: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45481: LD_VAR 0 6
45485: PPUSH
45486: CALL_OW 264
45490: PUSH
45491: LD_INT 9
45493: PUSH
45494: EMPTY
45495: LIST
45496: IN
45497: IFFALSE 45518
// points := [ 5 , 70 , 20 ] ;
45499: LD_ADDR_VAR 0 9
45503: PUSH
45504: LD_INT 5
45506: PUSH
45507: LD_INT 70
45509: PUSH
45510: LD_INT 20
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: LIST
45517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45518: LD_VAR 0 6
45522: PPUSH
45523: CALL_OW 264
45527: PUSH
45528: LD_INT 10
45530: PUSH
45531: EMPTY
45532: LIST
45533: IN
45534: IFFALSE 45555
// points := [ 35 , 110 , 70 ] ;
45536: LD_ADDR_VAR 0 9
45540: PUSH
45541: LD_INT 35
45543: PUSH
45544: LD_INT 110
45546: PUSH
45547: LD_INT 70
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: LIST
45554: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45555: LD_VAR 0 6
45559: PPUSH
45560: CALL_OW 265
45564: PUSH
45565: LD_INT 25
45567: EQUAL
45568: IFFALSE 45589
// points := [ 80 , 65 , 100 ] ;
45570: LD_ADDR_VAR 0 9
45574: PUSH
45575: LD_INT 80
45577: PUSH
45578: LD_INT 65
45580: PUSH
45581: LD_INT 100
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: LIST
45588: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45589: LD_VAR 0 6
45593: PPUSH
45594: CALL_OW 263
45598: PUSH
45599: LD_INT 1
45601: EQUAL
45602: IFFALSE 45637
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45604: LD_ADDR_VAR 0 10
45608: PUSH
45609: LD_VAR 0 10
45613: PUSH
45614: LD_VAR 0 6
45618: PPUSH
45619: CALL_OW 311
45623: PPUSH
45624: LD_INT 3
45626: PPUSH
45627: CALL_OW 259
45631: PUSH
45632: LD_INT 4
45634: MUL
45635: MUL
45636: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45637: LD_VAR 0 6
45641: PPUSH
45642: CALL_OW 263
45646: PUSH
45647: LD_INT 2
45649: EQUAL
45650: IFFALSE 45701
// begin j := IsControledBy ( i ) ;
45652: LD_ADDR_VAR 0 7
45656: PUSH
45657: LD_VAR 0 6
45661: PPUSH
45662: CALL_OW 312
45666: ST_TO_ADDR
// if j then
45667: LD_VAR 0 7
45671: IFFALSE 45701
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45673: LD_ADDR_VAR 0 10
45677: PUSH
45678: LD_VAR 0 10
45682: PUSH
45683: LD_VAR 0 7
45687: PPUSH
45688: LD_INT 3
45690: PPUSH
45691: CALL_OW 259
45695: PUSH
45696: LD_INT 3
45698: MUL
45699: MUL
45700: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45701: LD_VAR 0 6
45705: PPUSH
45706: CALL_OW 264
45710: PUSH
45711: LD_INT 5
45713: PUSH
45714: LD_INT 6
45716: PUSH
45717: LD_INT 46
45719: PUSH
45720: LD_INT 44
45722: PUSH
45723: LD_INT 47
45725: PUSH
45726: LD_INT 45
45728: PUSH
45729: LD_INT 28
45731: PUSH
45732: LD_INT 7
45734: PUSH
45735: LD_INT 27
45737: PUSH
45738: LD_INT 29
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: IN
45753: IFFALSE 45773
45755: PUSH
45756: LD_VAR 0 1
45760: PPUSH
45761: LD_INT 52
45763: PPUSH
45764: CALL_OW 321
45768: PUSH
45769: LD_INT 2
45771: EQUAL
45772: AND
45773: IFFALSE 45790
// bpoints := bpoints * 1.2 ;
45775: LD_ADDR_VAR 0 10
45779: PUSH
45780: LD_VAR 0 10
45784: PUSH
45785: LD_REAL  1.20000000000000E+0000
45788: MUL
45789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45790: LD_VAR 0 6
45794: PPUSH
45795: CALL_OW 264
45799: PUSH
45800: LD_INT 6
45802: PUSH
45803: LD_INT 46
45805: PUSH
45806: LD_INT 47
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: LIST
45813: IN
45814: IFFALSE 45831
// bpoints := bpoints * 1.2 ;
45816: LD_ADDR_VAR 0 10
45820: PUSH
45821: LD_VAR 0 10
45825: PUSH
45826: LD_REAL  1.20000000000000E+0000
45829: MUL
45830: ST_TO_ADDR
// end ; unit_building :
45831: GO 45845
45833: LD_INT 3
45835: DOUBLE
45836: EQUAL
45837: IFTRUE 45841
45839: GO 45844
45841: POP
// ; end ;
45842: GO 45845
45844: POP
// for j = 1 to 3 do
45845: LD_ADDR_VAR 0 7
45849: PUSH
45850: DOUBLE
45851: LD_INT 1
45853: DEC
45854: ST_TO_ADDR
45855: LD_INT 3
45857: PUSH
45858: FOR_TO
45859: IFFALSE 45912
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45861: LD_ADDR_VAR 0 5
45865: PUSH
45866: LD_VAR 0 5
45870: PPUSH
45871: LD_VAR 0 7
45875: PPUSH
45876: LD_VAR 0 5
45880: PUSH
45881: LD_VAR 0 7
45885: ARRAY
45886: PUSH
45887: LD_VAR 0 9
45891: PUSH
45892: LD_VAR 0 7
45896: ARRAY
45897: PUSH
45898: LD_VAR 0 10
45902: MUL
45903: PLUS
45904: PPUSH
45905: CALL_OW 1
45909: ST_TO_ADDR
45910: GO 45858
45912: POP
45913: POP
// end ;
45914: GO 44387
45916: POP
45917: POP
// result := Replace ( result , 4 , tmp ) ;
45918: LD_ADDR_VAR 0 5
45922: PUSH
45923: LD_VAR 0 5
45927: PPUSH
45928: LD_INT 4
45930: PPUSH
45931: LD_VAR 0 8
45935: PPUSH
45936: CALL_OW 1
45940: ST_TO_ADDR
// end ;
45941: LD_VAR 0 5
45945: RET
// export function DangerAtRange ( unit , range ) ; begin
45946: LD_INT 0
45948: PPUSH
// if not unit then
45949: LD_VAR 0 1
45953: NOT
45954: IFFALSE 45958
// exit ;
45956: GO 46003
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45958: LD_ADDR_VAR 0 3
45962: PUSH
45963: LD_VAR 0 1
45967: PPUSH
45968: CALL_OW 255
45972: PPUSH
45973: LD_VAR 0 1
45977: PPUSH
45978: CALL_OW 250
45982: PPUSH
45983: LD_VAR 0 1
45987: PPUSH
45988: CALL_OW 251
45992: PPUSH
45993: LD_VAR 0 2
45997: PPUSH
45998: CALL 44237 0 4
46002: ST_TO_ADDR
// end ;
46003: LD_VAR 0 3
46007: RET
// export function DangerInArea ( side , area ) ; begin
46008: LD_INT 0
46010: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46011: LD_ADDR_VAR 0 3
46015: PUSH
46016: LD_VAR 0 2
46020: PPUSH
46021: LD_INT 81
46023: PUSH
46024: LD_VAR 0 1
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PPUSH
46033: CALL_OW 70
46037: ST_TO_ADDR
// end ;
46038: LD_VAR 0 3
46042: RET
// export function IsExtension ( b ) ; begin
46043: LD_INT 0
46045: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46046: LD_ADDR_VAR 0 2
46050: PUSH
46051: LD_VAR 0 1
46055: PUSH
46056: LD_INT 23
46058: PUSH
46059: LD_INT 20
46061: PUSH
46062: LD_INT 22
46064: PUSH
46065: LD_INT 17
46067: PUSH
46068: LD_INT 24
46070: PUSH
46071: LD_INT 21
46073: PUSH
46074: LD_INT 19
46076: PUSH
46077: LD_INT 16
46079: PUSH
46080: LD_INT 25
46082: PUSH
46083: LD_INT 18
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: IN
46098: ST_TO_ADDR
// end ;
46099: LD_VAR 0 2
46103: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46104: LD_INT 0
46106: PPUSH
46107: PPUSH
46108: PPUSH
// result := [ ] ;
46109: LD_ADDR_VAR 0 4
46113: PUSH
46114: EMPTY
46115: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46116: LD_ADDR_VAR 0 5
46120: PUSH
46121: LD_VAR 0 2
46125: PPUSH
46126: LD_INT 21
46128: PUSH
46129: LD_INT 3
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PPUSH
46136: CALL_OW 70
46140: ST_TO_ADDR
// if not tmp then
46141: LD_VAR 0 5
46145: NOT
46146: IFFALSE 46150
// exit ;
46148: GO 46214
// if checkLink then
46150: LD_VAR 0 3
46154: IFFALSE 46204
// begin for i in tmp do
46156: LD_ADDR_VAR 0 6
46160: PUSH
46161: LD_VAR 0 5
46165: PUSH
46166: FOR_IN
46167: IFFALSE 46202
// if GetBase ( i ) <> base then
46169: LD_VAR 0 6
46173: PPUSH
46174: CALL_OW 274
46178: PUSH
46179: LD_VAR 0 1
46183: NONEQUAL
46184: IFFALSE 46200
// ComLinkToBase ( base , i ) ;
46186: LD_VAR 0 1
46190: PPUSH
46191: LD_VAR 0 6
46195: PPUSH
46196: CALL_OW 169
46200: GO 46166
46202: POP
46203: POP
// end ; result := tmp ;
46204: LD_ADDR_VAR 0 4
46208: PUSH
46209: LD_VAR 0 5
46213: ST_TO_ADDR
// end ;
46214: LD_VAR 0 4
46218: RET
// export function ComComplete ( units , b ) ; var i ; begin
46219: LD_INT 0
46221: PPUSH
46222: PPUSH
// if not units then
46223: LD_VAR 0 1
46227: NOT
46228: IFFALSE 46232
// exit ;
46230: GO 46322
// for i in units do
46232: LD_ADDR_VAR 0 4
46236: PUSH
46237: LD_VAR 0 1
46241: PUSH
46242: FOR_IN
46243: IFFALSE 46320
// if BuildingStatus ( b ) = bs_build then
46245: LD_VAR 0 2
46249: PPUSH
46250: CALL_OW 461
46254: PUSH
46255: LD_INT 1
46257: EQUAL
46258: IFFALSE 46318
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46260: LD_VAR 0 4
46264: PPUSH
46265: LD_STRING h
46267: PUSH
46268: LD_VAR 0 2
46272: PPUSH
46273: CALL_OW 250
46277: PUSH
46278: LD_VAR 0 2
46282: PPUSH
46283: CALL_OW 251
46287: PUSH
46288: LD_VAR 0 2
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: PUSH
46311: EMPTY
46312: LIST
46313: PPUSH
46314: CALL_OW 446
46318: GO 46242
46320: POP
46321: POP
// end ;
46322: LD_VAR 0 3
46326: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46327: LD_INT 0
46329: PPUSH
46330: PPUSH
46331: PPUSH
46332: PPUSH
46333: PPUSH
46334: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46335: LD_VAR 0 1
46339: NOT
46340: IFTRUE 46357
46342: PUSH
46343: LD_VAR 0 1
46347: PPUSH
46348: CALL_OW 263
46352: PUSH
46353: LD_INT 2
46355: NONEQUAL
46356: OR
46357: IFFALSE 46361
// exit ;
46359: GO 46677
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46361: LD_ADDR_VAR 0 6
46365: PUSH
46366: LD_INT 22
46368: PUSH
46369: LD_VAR 0 1
46373: PPUSH
46374: CALL_OW 255
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: LD_INT 30
46388: PUSH
46389: LD_INT 36
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 34
46398: PUSH
46399: LD_INT 31
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: LIST
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PPUSH
46415: CALL_OW 69
46419: ST_TO_ADDR
// if not tmp then
46420: LD_VAR 0 6
46424: NOT
46425: IFFALSE 46429
// exit ;
46427: GO 46677
// result := [ ] ;
46429: LD_ADDR_VAR 0 2
46433: PUSH
46434: EMPTY
46435: ST_TO_ADDR
// for i in tmp do
46436: LD_ADDR_VAR 0 3
46440: PUSH
46441: LD_VAR 0 6
46445: PUSH
46446: FOR_IN
46447: IFFALSE 46518
// begin t := UnitsInside ( i ) ;
46449: LD_ADDR_VAR 0 4
46453: PUSH
46454: LD_VAR 0 3
46458: PPUSH
46459: CALL_OW 313
46463: ST_TO_ADDR
// if t then
46464: LD_VAR 0 4
46468: IFFALSE 46516
// for j in t do
46470: LD_ADDR_VAR 0 7
46474: PUSH
46475: LD_VAR 0 4
46479: PUSH
46480: FOR_IN
46481: IFFALSE 46514
// result := Replace ( result , result + 1 , j ) ;
46483: LD_ADDR_VAR 0 2
46487: PUSH
46488: LD_VAR 0 2
46492: PPUSH
46493: LD_VAR 0 2
46497: PUSH
46498: LD_INT 1
46500: PLUS
46501: PPUSH
46502: LD_VAR 0 7
46506: PPUSH
46507: CALL_OW 1
46511: ST_TO_ADDR
46512: GO 46480
46514: POP
46515: POP
// end ;
46516: GO 46446
46518: POP
46519: POP
// if not result then
46520: LD_VAR 0 2
46524: NOT
46525: IFFALSE 46529
// exit ;
46527: GO 46677
// mech := result [ 1 ] ;
46529: LD_ADDR_VAR 0 5
46533: PUSH
46534: LD_VAR 0 2
46538: PUSH
46539: LD_INT 1
46541: ARRAY
46542: ST_TO_ADDR
// if result > 1 then
46543: LD_VAR 0 2
46547: PUSH
46548: LD_INT 1
46550: GREATER
46551: IFFALSE 46663
// begin for i = 2 to result do
46553: LD_ADDR_VAR 0 3
46557: PUSH
46558: DOUBLE
46559: LD_INT 2
46561: DEC
46562: ST_TO_ADDR
46563: LD_VAR 0 2
46567: PUSH
46568: FOR_TO
46569: IFFALSE 46661
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46571: LD_ADDR_VAR 0 4
46575: PUSH
46576: LD_VAR 0 2
46580: PUSH
46581: LD_VAR 0 3
46585: ARRAY
46586: PPUSH
46587: LD_INT 3
46589: PPUSH
46590: CALL_OW 259
46594: PUSH
46595: LD_VAR 0 2
46599: PUSH
46600: LD_VAR 0 3
46604: ARRAY
46605: PPUSH
46606: CALL_OW 432
46610: MINUS
46611: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46612: LD_VAR 0 4
46616: PUSH
46617: LD_VAR 0 5
46621: PPUSH
46622: LD_INT 3
46624: PPUSH
46625: CALL_OW 259
46629: PUSH
46630: LD_VAR 0 5
46634: PPUSH
46635: CALL_OW 432
46639: MINUS
46640: GREATEREQUAL
46641: IFFALSE 46659
// mech := result [ i ] ;
46643: LD_ADDR_VAR 0 5
46647: PUSH
46648: LD_VAR 0 2
46652: PUSH
46653: LD_VAR 0 3
46657: ARRAY
46658: ST_TO_ADDR
// end ;
46659: GO 46568
46661: POP
46662: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46663: LD_VAR 0 1
46667: PPUSH
46668: LD_VAR 0 5
46672: PPUSH
46673: CALL_OW 135
// end ;
46677: LD_VAR 0 2
46681: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46682: LD_INT 0
46684: PPUSH
46685: PPUSH
46686: PPUSH
46687: PPUSH
46688: PPUSH
46689: PPUSH
46690: PPUSH
46691: PPUSH
46692: PPUSH
46693: PPUSH
46694: PPUSH
46695: PPUSH
46696: PPUSH
// result := [ ] ;
46697: LD_ADDR_VAR 0 7
46701: PUSH
46702: EMPTY
46703: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46704: LD_VAR 0 1
46708: PPUSH
46709: CALL_OW 266
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: IN
46724: NOT
46725: IFFALSE 46729
// exit ;
46727: GO 48369
// if name then
46729: LD_VAR 0 3
46733: IFFALSE 46749
// SetBName ( base_dep , name ) ;
46735: LD_VAR 0 1
46739: PPUSH
46740: LD_VAR 0 3
46744: PPUSH
46745: CALL_OW 500
// base := GetBase ( base_dep ) ;
46749: LD_ADDR_VAR 0 15
46753: PUSH
46754: LD_VAR 0 1
46758: PPUSH
46759: CALL_OW 274
46763: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46764: LD_ADDR_VAR 0 16
46768: PUSH
46769: LD_VAR 0 1
46773: PPUSH
46774: CALL_OW 255
46778: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46779: LD_ADDR_VAR 0 17
46783: PUSH
46784: LD_VAR 0 1
46788: PPUSH
46789: CALL_OW 248
46793: ST_TO_ADDR
// if sources then
46794: LD_VAR 0 5
46798: IFFALSE 46845
// for i = 1 to 3 do
46800: LD_ADDR_VAR 0 8
46804: PUSH
46805: DOUBLE
46806: LD_INT 1
46808: DEC
46809: ST_TO_ADDR
46810: LD_INT 3
46812: PUSH
46813: FOR_TO
46814: IFFALSE 46843
// AddResourceType ( base , i , sources [ i ] ) ;
46816: LD_VAR 0 15
46820: PPUSH
46821: LD_VAR 0 8
46825: PPUSH
46826: LD_VAR 0 5
46830: PUSH
46831: LD_VAR 0 8
46835: ARRAY
46836: PPUSH
46837: CALL_OW 276
46841: GO 46813
46843: POP
46844: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46845: LD_ADDR_VAR 0 18
46849: PUSH
46850: LD_VAR 0 15
46854: PPUSH
46855: LD_VAR 0 2
46859: PPUSH
46860: LD_INT 1
46862: PPUSH
46863: CALL 46104 0 3
46867: ST_TO_ADDR
// InitHc ;
46868: CALL_OW 19
// InitUc ;
46872: CALL_OW 18
// uc_side := side ;
46876: LD_ADDR_OWVAR 20
46880: PUSH
46881: LD_VAR 0 16
46885: ST_TO_ADDR
// uc_nation := nation ;
46886: LD_ADDR_OWVAR 21
46890: PUSH
46891: LD_VAR 0 17
46895: ST_TO_ADDR
// if buildings then
46896: LD_VAR 0 18
46900: IFFALSE 48228
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46902: LD_ADDR_VAR 0 19
46906: PUSH
46907: LD_VAR 0 18
46911: PPUSH
46912: LD_INT 2
46914: PUSH
46915: LD_INT 30
46917: PUSH
46918: LD_INT 29
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 30
46927: PUSH
46928: LD_INT 30
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: LIST
46939: PPUSH
46940: CALL_OW 72
46944: ST_TO_ADDR
// if tmp then
46945: LD_VAR 0 19
46949: IFFALSE 46997
// for i in tmp do
46951: LD_ADDR_VAR 0 8
46955: PUSH
46956: LD_VAR 0 19
46960: PUSH
46961: FOR_IN
46962: IFFALSE 46995
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46964: LD_VAR 0 8
46968: PPUSH
46969: CALL_OW 250
46973: PPUSH
46974: LD_VAR 0 8
46978: PPUSH
46979: CALL_OW 251
46983: PPUSH
46984: LD_VAR 0 16
46988: PPUSH
46989: CALL_OW 441
46993: GO 46961
46995: POP
46996: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46997: LD_VAR 0 18
47001: PPUSH
47002: LD_INT 2
47004: PUSH
47005: LD_INT 30
47007: PUSH
47008: LD_INT 32
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 30
47017: PUSH
47018: LD_INT 33
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: LIST
47029: PPUSH
47030: CALL_OW 72
47034: IFFALSE 47122
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47036: LD_ADDR_VAR 0 8
47040: PUSH
47041: LD_VAR 0 18
47045: PPUSH
47046: LD_INT 2
47048: PUSH
47049: LD_INT 30
47051: PUSH
47052: LD_INT 32
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 30
47061: PUSH
47062: LD_INT 33
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: LIST
47073: PPUSH
47074: CALL_OW 72
47078: PUSH
47079: FOR_IN
47080: IFFALSE 47120
// begin if not GetBWeapon ( i ) then
47082: LD_VAR 0 8
47086: PPUSH
47087: CALL_OW 269
47091: NOT
47092: IFFALSE 47118
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47094: LD_VAR 0 8
47098: PPUSH
47099: LD_VAR 0 8
47103: PPUSH
47104: LD_VAR 0 2
47108: PPUSH
47109: CALL 48374 0 2
47113: PPUSH
47114: CALL_OW 431
// end ;
47118: GO 47079
47120: POP
47121: POP
// end ; for i = 1 to personel do
47122: LD_ADDR_VAR 0 8
47126: PUSH
47127: DOUBLE
47128: LD_INT 1
47130: DEC
47131: ST_TO_ADDR
47132: LD_VAR 0 6
47136: PUSH
47137: FOR_TO
47138: IFFALSE 48208
// begin if i > 4 then
47140: LD_VAR 0 8
47144: PUSH
47145: LD_INT 4
47147: GREATER
47148: IFFALSE 47152
// break ;
47150: GO 48208
// case i of 1 :
47152: LD_VAR 0 8
47156: PUSH
47157: LD_INT 1
47159: DOUBLE
47160: EQUAL
47161: IFTRUE 47165
47163: GO 47245
47165: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47166: LD_ADDR_VAR 0 12
47170: PUSH
47171: LD_VAR 0 18
47175: PPUSH
47176: LD_INT 22
47178: PUSH
47179: LD_VAR 0 16
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 58
47190: PUSH
47191: EMPTY
47192: LIST
47193: PUSH
47194: LD_INT 2
47196: PUSH
47197: LD_INT 30
47199: PUSH
47200: LD_INT 32
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 30
47209: PUSH
47210: LD_INT 4
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 30
47219: PUSH
47220: LD_INT 5
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: LIST
47237: PPUSH
47238: CALL_OW 72
47242: ST_TO_ADDR
47243: GO 47467
47245: LD_INT 2
47247: DOUBLE
47248: EQUAL
47249: IFTRUE 47253
47251: GO 47315
47253: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47254: LD_ADDR_VAR 0 12
47258: PUSH
47259: LD_VAR 0 18
47263: PPUSH
47264: LD_INT 22
47266: PUSH
47267: LD_VAR 0 16
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: LD_INT 30
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 30
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: LIST
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PPUSH
47308: CALL_OW 72
47312: ST_TO_ADDR
47313: GO 47467
47315: LD_INT 3
47317: DOUBLE
47318: EQUAL
47319: IFTRUE 47323
47321: GO 47385
47323: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47324: LD_ADDR_VAR 0 12
47328: PUSH
47329: LD_VAR 0 18
47333: PPUSH
47334: LD_INT 22
47336: PUSH
47337: LD_VAR 0 16
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 2
47348: PUSH
47349: LD_INT 30
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 30
47361: PUSH
47362: LD_INT 3
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: LIST
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PPUSH
47378: CALL_OW 72
47382: ST_TO_ADDR
47383: GO 47467
47385: LD_INT 4
47387: DOUBLE
47388: EQUAL
47389: IFTRUE 47393
47391: GO 47466
47393: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47394: LD_ADDR_VAR 0 12
47398: PUSH
47399: LD_VAR 0 18
47403: PPUSH
47404: LD_INT 22
47406: PUSH
47407: LD_VAR 0 16
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: PUSH
47419: LD_INT 30
47421: PUSH
47422: LD_INT 6
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 30
47431: PUSH
47432: LD_INT 7
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 30
47441: PUSH
47442: LD_INT 8
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PPUSH
47459: CALL_OW 72
47463: ST_TO_ADDR
47464: GO 47467
47466: POP
// if i = 1 then
47467: LD_VAR 0 8
47471: PUSH
47472: LD_INT 1
47474: EQUAL
47475: IFFALSE 47586
// begin tmp := [ ] ;
47477: LD_ADDR_VAR 0 19
47481: PUSH
47482: EMPTY
47483: ST_TO_ADDR
// for j in f do
47484: LD_ADDR_VAR 0 9
47488: PUSH
47489: LD_VAR 0 12
47493: PUSH
47494: FOR_IN
47495: IFFALSE 47568
// if GetBType ( j ) = b_bunker then
47497: LD_VAR 0 9
47501: PPUSH
47502: CALL_OW 266
47506: PUSH
47507: LD_INT 32
47509: EQUAL
47510: IFFALSE 47537
// tmp := Insert ( tmp , 1 , j ) else
47512: LD_ADDR_VAR 0 19
47516: PUSH
47517: LD_VAR 0 19
47521: PPUSH
47522: LD_INT 1
47524: PPUSH
47525: LD_VAR 0 9
47529: PPUSH
47530: CALL_OW 2
47534: ST_TO_ADDR
47535: GO 47566
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47537: LD_ADDR_VAR 0 19
47541: PUSH
47542: LD_VAR 0 19
47546: PPUSH
47547: LD_VAR 0 19
47551: PUSH
47552: LD_INT 1
47554: PLUS
47555: PPUSH
47556: LD_VAR 0 9
47560: PPUSH
47561: CALL_OW 2
47565: ST_TO_ADDR
47566: GO 47494
47568: POP
47569: POP
// if tmp then
47570: LD_VAR 0 19
47574: IFFALSE 47586
// f := tmp ;
47576: LD_ADDR_VAR 0 12
47580: PUSH
47581: LD_VAR 0 19
47585: ST_TO_ADDR
// end ; x := personel [ i ] ;
47586: LD_ADDR_VAR 0 13
47590: PUSH
47591: LD_VAR 0 6
47595: PUSH
47596: LD_VAR 0 8
47600: ARRAY
47601: ST_TO_ADDR
// if x = - 1 then
47602: LD_VAR 0 13
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: EQUAL
47611: IFFALSE 47822
// begin for j in f do
47613: LD_ADDR_VAR 0 9
47617: PUSH
47618: LD_VAR 0 12
47622: PUSH
47623: FOR_IN
47624: IFFALSE 47818
// repeat InitHc ;
47626: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47630: LD_VAR 0 9
47634: PPUSH
47635: CALL_OW 266
47639: PUSH
47640: LD_INT 5
47642: EQUAL
47643: IFFALSE 47713
// begin if UnitsInside ( j ) < 3 then
47645: LD_VAR 0 9
47649: PPUSH
47650: CALL_OW 313
47654: PUSH
47655: LD_INT 3
47657: LESS
47658: IFFALSE 47694
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47660: LD_INT 0
47662: PPUSH
47663: LD_INT 5
47665: PUSH
47666: LD_INT 8
47668: PUSH
47669: LD_INT 9
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: LIST
47676: PUSH
47677: LD_VAR 0 17
47681: ARRAY
47682: PPUSH
47683: LD_VAR 0 4
47687: PPUSH
47688: CALL_OW 380
47692: GO 47711
// PrepareHuman ( false , i , skill ) ;
47694: LD_INT 0
47696: PPUSH
47697: LD_VAR 0 8
47701: PPUSH
47702: LD_VAR 0 4
47706: PPUSH
47707: CALL_OW 380
// end else
47711: GO 47730
// PrepareHuman ( false , i , skill ) ;
47713: LD_INT 0
47715: PPUSH
47716: LD_VAR 0 8
47720: PPUSH
47721: LD_VAR 0 4
47725: PPUSH
47726: CALL_OW 380
// un := CreateHuman ;
47730: LD_ADDR_VAR 0 14
47734: PUSH
47735: CALL_OW 44
47739: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47740: LD_ADDR_VAR 0 7
47744: PUSH
47745: LD_VAR 0 7
47749: PPUSH
47750: LD_INT 1
47752: PPUSH
47753: LD_VAR 0 14
47757: PPUSH
47758: CALL_OW 2
47762: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47763: LD_VAR 0 14
47767: PPUSH
47768: LD_VAR 0 9
47772: PPUSH
47773: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47777: LD_VAR 0 9
47781: PPUSH
47782: CALL_OW 313
47786: PUSH
47787: LD_INT 6
47789: EQUAL
47790: IFTRUE 47814
47792: PUSH
47793: LD_VAR 0 9
47797: PPUSH
47798: CALL_OW 266
47802: PUSH
47803: LD_INT 32
47805: PUSH
47806: LD_INT 31
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: IN
47813: OR
47814: IFFALSE 47626
47816: GO 47623
47818: POP
47819: POP
// end else
47820: GO 48206
// for j = 1 to x do
47822: LD_ADDR_VAR 0 9
47826: PUSH
47827: DOUBLE
47828: LD_INT 1
47830: DEC
47831: ST_TO_ADDR
47832: LD_VAR 0 13
47836: PUSH
47837: FOR_TO
47838: IFFALSE 48204
// begin InitHc ;
47840: CALL_OW 19
// if not f then
47844: LD_VAR 0 12
47848: NOT
47849: IFFALSE 47938
// begin PrepareHuman ( false , i , skill ) ;
47851: LD_INT 0
47853: PPUSH
47854: LD_VAR 0 8
47858: PPUSH
47859: LD_VAR 0 4
47863: PPUSH
47864: CALL_OW 380
// un := CreateHuman ;
47868: LD_ADDR_VAR 0 14
47872: PUSH
47873: CALL_OW 44
47877: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47878: LD_ADDR_VAR 0 7
47882: PUSH
47883: LD_VAR 0 7
47887: PPUSH
47888: LD_INT 1
47890: PPUSH
47891: LD_VAR 0 14
47895: PPUSH
47896: CALL_OW 2
47900: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47901: LD_VAR 0 14
47905: PPUSH
47906: LD_VAR 0 1
47910: PPUSH
47911: CALL_OW 250
47915: PPUSH
47916: LD_VAR 0 1
47920: PPUSH
47921: CALL_OW 251
47925: PPUSH
47926: LD_INT 10
47928: PPUSH
47929: LD_INT 0
47931: PPUSH
47932: CALL_OW 50
// continue ;
47936: GO 47837
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47938: LD_VAR 0 12
47942: PUSH
47943: LD_INT 1
47945: ARRAY
47946: PPUSH
47947: CALL_OW 313
47951: IFFALSE 47979
47953: PUSH
47954: LD_VAR 0 12
47958: PUSH
47959: LD_INT 1
47961: ARRAY
47962: PPUSH
47963: CALL_OW 266
47967: PUSH
47968: LD_INT 32
47970: PUSH
47971: LD_INT 31
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: IN
47978: AND
47979: IFTRUE 48000
47981: PUSH
47982: LD_VAR 0 12
47986: PUSH
47987: LD_INT 1
47989: ARRAY
47990: PPUSH
47991: CALL_OW 313
47995: PUSH
47996: LD_INT 6
47998: EQUAL
47999: OR
48000: IFFALSE 48020
// f := Delete ( f , 1 ) ;
48002: LD_ADDR_VAR 0 12
48006: PUSH
48007: LD_VAR 0 12
48011: PPUSH
48012: LD_INT 1
48014: PPUSH
48015: CALL_OW 3
48019: ST_TO_ADDR
// if not f then
48020: LD_VAR 0 12
48024: NOT
48025: IFFALSE 48043
// begin x := x + 2 ;
48027: LD_ADDR_VAR 0 13
48031: PUSH
48032: LD_VAR 0 13
48036: PUSH
48037: LD_INT 2
48039: PLUS
48040: ST_TO_ADDR
// continue ;
48041: GO 47837
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48043: LD_VAR 0 12
48047: PUSH
48048: LD_INT 1
48050: ARRAY
48051: PPUSH
48052: CALL_OW 266
48056: PUSH
48057: LD_INT 5
48059: EQUAL
48060: IFFALSE 48134
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48062: LD_VAR 0 12
48066: PUSH
48067: LD_INT 1
48069: ARRAY
48070: PPUSH
48071: CALL_OW 313
48075: PUSH
48076: LD_INT 3
48078: LESS
48079: IFFALSE 48115
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48081: LD_INT 0
48083: PPUSH
48084: LD_INT 5
48086: PUSH
48087: LD_INT 8
48089: PUSH
48090: LD_INT 9
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: LIST
48097: PUSH
48098: LD_VAR 0 17
48102: ARRAY
48103: PPUSH
48104: LD_VAR 0 4
48108: PPUSH
48109: CALL_OW 380
48113: GO 48132
// PrepareHuman ( false , i , skill ) ;
48115: LD_INT 0
48117: PPUSH
48118: LD_VAR 0 8
48122: PPUSH
48123: LD_VAR 0 4
48127: PPUSH
48128: CALL_OW 380
// end else
48132: GO 48151
// PrepareHuman ( false , i , skill ) ;
48134: LD_INT 0
48136: PPUSH
48137: LD_VAR 0 8
48141: PPUSH
48142: LD_VAR 0 4
48146: PPUSH
48147: CALL_OW 380
// un := CreateHuman ;
48151: LD_ADDR_VAR 0 14
48155: PUSH
48156: CALL_OW 44
48160: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48161: LD_ADDR_VAR 0 7
48165: PUSH
48166: LD_VAR 0 7
48170: PPUSH
48171: LD_INT 1
48173: PPUSH
48174: LD_VAR 0 14
48178: PPUSH
48179: CALL_OW 2
48183: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48184: LD_VAR 0 14
48188: PPUSH
48189: LD_VAR 0 12
48193: PUSH
48194: LD_INT 1
48196: ARRAY
48197: PPUSH
48198: CALL_OW 52
// end ;
48202: GO 47837
48204: POP
48205: POP
// end ;
48206: GO 47137
48208: POP
48209: POP
// result := result ^ buildings ;
48210: LD_ADDR_VAR 0 7
48214: PUSH
48215: LD_VAR 0 7
48219: PUSH
48220: LD_VAR 0 18
48224: ADD
48225: ST_TO_ADDR
// end else
48226: GO 48369
// begin for i = 1 to personel do
48228: LD_ADDR_VAR 0 8
48232: PUSH
48233: DOUBLE
48234: LD_INT 1
48236: DEC
48237: ST_TO_ADDR
48238: LD_VAR 0 6
48242: PUSH
48243: FOR_TO
48244: IFFALSE 48367
// begin if i > 4 then
48246: LD_VAR 0 8
48250: PUSH
48251: LD_INT 4
48253: GREATER
48254: IFFALSE 48258
// break ;
48256: GO 48367
// x := personel [ i ] ;
48258: LD_ADDR_VAR 0 13
48262: PUSH
48263: LD_VAR 0 6
48267: PUSH
48268: LD_VAR 0 8
48272: ARRAY
48273: ST_TO_ADDR
// if x = - 1 then
48274: LD_VAR 0 13
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: EQUAL
48283: IFFALSE 48287
// continue ;
48285: GO 48243
// PrepareHuman ( false , i , skill ) ;
48287: LD_INT 0
48289: PPUSH
48290: LD_VAR 0 8
48294: PPUSH
48295: LD_VAR 0 4
48299: PPUSH
48300: CALL_OW 380
// un := CreateHuman ;
48304: LD_ADDR_VAR 0 14
48308: PUSH
48309: CALL_OW 44
48313: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48314: LD_VAR 0 14
48318: PPUSH
48319: LD_VAR 0 1
48323: PPUSH
48324: CALL_OW 250
48328: PPUSH
48329: LD_VAR 0 1
48333: PPUSH
48334: CALL_OW 251
48338: PPUSH
48339: LD_INT 10
48341: PPUSH
48342: LD_INT 0
48344: PPUSH
48345: CALL_OW 50
// result := result ^ un ;
48349: LD_ADDR_VAR 0 7
48353: PUSH
48354: LD_VAR 0 7
48358: PUSH
48359: LD_VAR 0 14
48363: ADD
48364: ST_TO_ADDR
// end ;
48365: GO 48243
48367: POP
48368: POP
// end ; end ;
48369: LD_VAR 0 7
48373: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48374: LD_INT 0
48376: PPUSH
48377: PPUSH
48378: PPUSH
48379: PPUSH
48380: PPUSH
48381: PPUSH
48382: PPUSH
48383: PPUSH
48384: PPUSH
48385: PPUSH
48386: PPUSH
48387: PPUSH
48388: PPUSH
48389: PPUSH
48390: PPUSH
48391: PPUSH
// result := false ;
48392: LD_ADDR_VAR 0 3
48396: PUSH
48397: LD_INT 0
48399: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48400: LD_VAR 0 1
48404: NOT
48405: IFTRUE 48430
48407: PUSH
48408: LD_VAR 0 1
48412: PPUSH
48413: CALL_OW 266
48417: PUSH
48418: LD_INT 32
48420: PUSH
48421: LD_INT 33
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: IN
48428: NOT
48429: OR
48430: IFFALSE 48434
// exit ;
48432: GO 49569
// nat := GetNation ( tower ) ;
48434: LD_ADDR_VAR 0 12
48438: PUSH
48439: LD_VAR 0 1
48443: PPUSH
48444: CALL_OW 248
48448: ST_TO_ADDR
// side := GetSide ( tower ) ;
48449: LD_ADDR_VAR 0 16
48453: PUSH
48454: LD_VAR 0 1
48458: PPUSH
48459: CALL_OW 255
48463: ST_TO_ADDR
// x := GetX ( tower ) ;
48464: LD_ADDR_VAR 0 10
48468: PUSH
48469: LD_VAR 0 1
48473: PPUSH
48474: CALL_OW 250
48478: ST_TO_ADDR
// y := GetY ( tower ) ;
48479: LD_ADDR_VAR 0 11
48483: PUSH
48484: LD_VAR 0 1
48488: PPUSH
48489: CALL_OW 251
48493: ST_TO_ADDR
// if not x or not y then
48494: LD_VAR 0 10
48498: NOT
48499: IFTRUE 48508
48501: PUSH
48502: LD_VAR 0 11
48506: NOT
48507: OR
48508: IFFALSE 48512
// exit ;
48510: GO 49569
// weapon := 0 ;
48512: LD_ADDR_VAR 0 18
48516: PUSH
48517: LD_INT 0
48519: ST_TO_ADDR
// fac_list := [ ] ;
48520: LD_ADDR_VAR 0 17
48524: PUSH
48525: EMPTY
48526: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48527: LD_ADDR_VAR 0 6
48531: PUSH
48532: LD_VAR 0 1
48536: PPUSH
48537: CALL_OW 274
48541: PPUSH
48542: LD_VAR 0 2
48546: PPUSH
48547: LD_INT 0
48549: PPUSH
48550: CALL 46104 0 3
48554: PPUSH
48555: LD_INT 30
48557: PUSH
48558: LD_INT 3
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PPUSH
48565: CALL_OW 72
48569: ST_TO_ADDR
// if not factories then
48570: LD_VAR 0 6
48574: NOT
48575: IFFALSE 48579
// exit ;
48577: GO 49569
// for i in factories do
48579: LD_ADDR_VAR 0 8
48583: PUSH
48584: LD_VAR 0 6
48588: PUSH
48589: FOR_IN
48590: IFFALSE 48615
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48592: LD_ADDR_VAR 0 17
48596: PUSH
48597: LD_VAR 0 17
48601: PUSH
48602: LD_VAR 0 8
48606: PPUSH
48607: CALL_OW 478
48611: UNION
48612: ST_TO_ADDR
48613: GO 48589
48615: POP
48616: POP
// if not fac_list then
48617: LD_VAR 0 17
48621: NOT
48622: IFFALSE 48626
// exit ;
48624: GO 49569
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48626: LD_ADDR_VAR 0 5
48630: PUSH
48631: LD_INT 4
48633: PUSH
48634: LD_INT 5
48636: PUSH
48637: LD_INT 9
48639: PUSH
48640: LD_INT 10
48642: PUSH
48643: LD_INT 6
48645: PUSH
48646: LD_INT 7
48648: PUSH
48649: LD_INT 11
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 27
48663: PUSH
48664: LD_INT 28
48666: PUSH
48667: LD_INT 26
48669: PUSH
48670: LD_INT 30
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 43
48681: PUSH
48682: LD_INT 44
48684: PUSH
48685: LD_INT 46
48687: PUSH
48688: LD_INT 45
48690: PUSH
48691: LD_INT 47
48693: PUSH
48694: LD_INT 49
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: LIST
48709: PUSH
48710: LD_VAR 0 12
48714: ARRAY
48715: ST_TO_ADDR
// list := list isect fac_list ;
48716: LD_ADDR_VAR 0 5
48720: PUSH
48721: LD_VAR 0 5
48725: PUSH
48726: LD_VAR 0 17
48730: ISECT
48731: ST_TO_ADDR
// if not list then
48732: LD_VAR 0 5
48736: NOT
48737: IFFALSE 48741
// exit ;
48739: GO 49569
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48741: LD_VAR 0 12
48745: PUSH
48746: LD_INT 3
48748: EQUAL
48749: IFFALSE 48761
48751: PUSH
48752: LD_INT 49
48754: PUSH
48755: LD_VAR 0 5
48759: IN
48760: AND
48761: IFFALSE 48781
48763: PUSH
48764: LD_INT 31
48766: PPUSH
48767: LD_VAR 0 16
48771: PPUSH
48772: CALL_OW 321
48776: PUSH
48777: LD_INT 2
48779: EQUAL
48780: AND
48781: IFFALSE 48841
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48783: LD_INT 22
48785: PUSH
48786: LD_VAR 0 16
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 35
48797: PUSH
48798: LD_INT 49
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 91
48807: PUSH
48808: LD_VAR 0 1
48812: PUSH
48813: LD_INT 10
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: LIST
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: LIST
48825: PPUSH
48826: CALL_OW 69
48830: NOT
48831: IFFALSE 48841
// weapon := ru_time_lapser ;
48833: LD_ADDR_VAR 0 18
48837: PUSH
48838: LD_INT 49
48840: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48841: LD_VAR 0 12
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: LD_INT 2
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: IN
48856: IFFALSE 48880
48858: PUSH
48859: LD_INT 11
48861: PUSH
48862: LD_VAR 0 5
48866: IN
48867: IFTRUE 48879
48869: PUSH
48870: LD_INT 30
48872: PUSH
48873: LD_VAR 0 5
48877: IN
48878: OR
48879: AND
48880: IFFALSE 48900
48882: PUSH
48883: LD_INT 6
48885: PPUSH
48886: LD_VAR 0 16
48890: PPUSH
48891: CALL_OW 321
48895: PUSH
48896: LD_INT 2
48898: EQUAL
48899: AND
48900: IFFALSE 49067
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48902: LD_INT 22
48904: PUSH
48905: LD_VAR 0 16
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 2
48916: PUSH
48917: LD_INT 35
48919: PUSH
48920: LD_INT 11
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 35
48929: PUSH
48930: LD_INT 30
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 91
48944: PUSH
48945: LD_VAR 0 1
48949: PUSH
48950: LD_INT 18
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: LIST
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: LIST
48962: PPUSH
48963: CALL_OW 69
48967: NOT
48968: IFFALSE 49044
48970: PUSH
48971: LD_INT 22
48973: PUSH
48974: LD_VAR 0 16
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: LD_INT 30
48988: PUSH
48989: LD_INT 32
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 30
48998: PUSH
48999: LD_INT 33
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 91
49013: PUSH
49014: LD_VAR 0 1
49018: PUSH
49019: LD_INT 12
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: LIST
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: LIST
49031: PUSH
49032: EMPTY
49033: LIST
49034: PPUSH
49035: CALL_OW 69
49039: PUSH
49040: LD_INT 2
49042: GREATER
49043: AND
49044: IFFALSE 49067
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49046: LD_ADDR_VAR 0 18
49050: PUSH
49051: LD_INT 11
49053: PUSH
49054: LD_INT 30
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_VAR 0 12
49065: ARRAY
49066: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49067: LD_VAR 0 18
49071: NOT
49072: IFFALSE 49092
49074: PUSH
49075: LD_INT 40
49077: PPUSH
49078: LD_VAR 0 16
49082: PPUSH
49083: CALL_OW 321
49087: PUSH
49088: LD_INT 2
49090: EQUAL
49091: AND
49092: IFFALSE 49128
49094: PUSH
49095: LD_INT 7
49097: PUSH
49098: LD_VAR 0 5
49102: IN
49103: IFTRUE 49115
49105: PUSH
49106: LD_INT 28
49108: PUSH
49109: LD_VAR 0 5
49113: IN
49114: OR
49115: IFTRUE 49127
49117: PUSH
49118: LD_INT 45
49120: PUSH
49121: LD_VAR 0 5
49125: IN
49126: OR
49127: AND
49128: IFFALSE 49382
// begin hex := GetHexInfo ( x , y ) ;
49130: LD_ADDR_VAR 0 4
49134: PUSH
49135: LD_VAR 0 10
49139: PPUSH
49140: LD_VAR 0 11
49144: PPUSH
49145: CALL_OW 546
49149: ST_TO_ADDR
// if hex [ 1 ] then
49150: LD_VAR 0 4
49154: PUSH
49155: LD_INT 1
49157: ARRAY
49158: IFFALSE 49162
// exit ;
49160: GO 49569
// height := hex [ 2 ] ;
49162: LD_ADDR_VAR 0 15
49166: PUSH
49167: LD_VAR 0 4
49171: PUSH
49172: LD_INT 2
49174: ARRAY
49175: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49176: LD_ADDR_VAR 0 14
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: LD_INT 2
49186: PUSH
49187: LD_INT 3
49189: PUSH
49190: LD_INT 5
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: ST_TO_ADDR
// for i in tmp do
49199: LD_ADDR_VAR 0 8
49203: PUSH
49204: LD_VAR 0 14
49208: PUSH
49209: FOR_IN
49210: IFFALSE 49380
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49212: LD_ADDR_VAR 0 9
49216: PUSH
49217: LD_VAR 0 10
49221: PPUSH
49222: LD_VAR 0 8
49226: PPUSH
49227: LD_INT 5
49229: PPUSH
49230: CALL_OW 272
49234: PUSH
49235: LD_VAR 0 11
49239: PPUSH
49240: LD_VAR 0 8
49244: PPUSH
49245: LD_INT 5
49247: PPUSH
49248: CALL_OW 273
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49257: LD_VAR 0 9
49261: PUSH
49262: LD_INT 1
49264: ARRAY
49265: PPUSH
49266: LD_VAR 0 9
49270: PUSH
49271: LD_INT 2
49273: ARRAY
49274: PPUSH
49275: CALL_OW 488
49279: IFFALSE 49378
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49281: LD_ADDR_VAR 0 4
49285: PUSH
49286: LD_VAR 0 9
49290: PUSH
49291: LD_INT 1
49293: ARRAY
49294: PPUSH
49295: LD_VAR 0 9
49299: PUSH
49300: LD_INT 2
49302: ARRAY
49303: PPUSH
49304: CALL_OW 546
49308: ST_TO_ADDR
// if hex [ 1 ] then
49309: LD_VAR 0 4
49313: PUSH
49314: LD_INT 1
49316: ARRAY
49317: IFFALSE 49321
// continue ;
49319: GO 49209
// h := hex [ 2 ] ;
49321: LD_ADDR_VAR 0 13
49325: PUSH
49326: LD_VAR 0 4
49330: PUSH
49331: LD_INT 2
49333: ARRAY
49334: ST_TO_ADDR
// if h + 7 < height then
49335: LD_VAR 0 13
49339: PUSH
49340: LD_INT 7
49342: PLUS
49343: PUSH
49344: LD_VAR 0 15
49348: LESS
49349: IFFALSE 49378
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49351: LD_ADDR_VAR 0 18
49355: PUSH
49356: LD_INT 7
49358: PUSH
49359: LD_INT 28
49361: PUSH
49362: LD_INT 45
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: LIST
49369: PUSH
49370: LD_VAR 0 12
49374: ARRAY
49375: ST_TO_ADDR
// break ;
49376: GO 49380
// end ; end ; end ;
49378: GO 49209
49380: POP
49381: POP
// end ; if not weapon then
49382: LD_VAR 0 18
49386: NOT
49387: IFFALSE 49447
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49389: LD_ADDR_VAR 0 5
49393: PUSH
49394: LD_VAR 0 5
49398: PUSH
49399: LD_INT 11
49401: PUSH
49402: LD_INT 30
49404: PUSH
49405: LD_INT 49
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: LIST
49412: DIFF
49413: ST_TO_ADDR
// if not list then
49414: LD_VAR 0 5
49418: NOT
49419: IFFALSE 49423
// exit ;
49421: GO 49569
// weapon := list [ rand ( 1 , list ) ] ;
49423: LD_ADDR_VAR 0 18
49427: PUSH
49428: LD_VAR 0 5
49432: PUSH
49433: LD_INT 1
49435: PPUSH
49436: LD_VAR 0 5
49440: PPUSH
49441: CALL_OW 12
49445: ARRAY
49446: ST_TO_ADDR
// end ; if weapon then
49447: LD_VAR 0 18
49451: IFFALSE 49569
// begin tmp := CostOfWeapon ( weapon ) ;
49453: LD_ADDR_VAR 0 14
49457: PUSH
49458: LD_VAR 0 18
49462: PPUSH
49463: CALL_OW 451
49467: ST_TO_ADDR
// j := GetBase ( tower ) ;
49468: LD_ADDR_VAR 0 9
49472: PUSH
49473: LD_VAR 0 1
49477: PPUSH
49478: CALL_OW 274
49482: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49483: LD_VAR 0 9
49487: PPUSH
49488: LD_INT 1
49490: PPUSH
49491: CALL_OW 275
49495: PUSH
49496: LD_VAR 0 14
49500: PUSH
49501: LD_INT 1
49503: ARRAY
49504: GREATEREQUAL
49505: IFFALSE 49531
49507: PUSH
49508: LD_VAR 0 9
49512: PPUSH
49513: LD_INT 2
49515: PPUSH
49516: CALL_OW 275
49520: PUSH
49521: LD_VAR 0 14
49525: PUSH
49526: LD_INT 2
49528: ARRAY
49529: GREATEREQUAL
49530: AND
49531: IFFALSE 49557
49533: PUSH
49534: LD_VAR 0 9
49538: PPUSH
49539: LD_INT 3
49541: PPUSH
49542: CALL_OW 275
49546: PUSH
49547: LD_VAR 0 14
49551: PUSH
49552: LD_INT 3
49554: ARRAY
49555: GREATEREQUAL
49556: AND
49557: IFFALSE 49569
// result := weapon ;
49559: LD_ADDR_VAR 0 3
49563: PUSH
49564: LD_VAR 0 18
49568: ST_TO_ADDR
// end ; end ;
49569: LD_VAR 0 3
49573: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49574: LD_INT 0
49576: PPUSH
49577: PPUSH
// result := true ;
49578: LD_ADDR_VAR 0 3
49582: PUSH
49583: LD_INT 1
49585: ST_TO_ADDR
// if array1 = array2 then
49586: LD_VAR 0 1
49590: PUSH
49591: LD_VAR 0 2
49595: EQUAL
49596: IFFALSE 49656
// begin for i = 1 to array1 do
49598: LD_ADDR_VAR 0 4
49602: PUSH
49603: DOUBLE
49604: LD_INT 1
49606: DEC
49607: ST_TO_ADDR
49608: LD_VAR 0 1
49612: PUSH
49613: FOR_TO
49614: IFFALSE 49652
// if array1 [ i ] <> array2 [ i ] then
49616: LD_VAR 0 1
49620: PUSH
49621: LD_VAR 0 4
49625: ARRAY
49626: PUSH
49627: LD_VAR 0 2
49631: PUSH
49632: LD_VAR 0 4
49636: ARRAY
49637: NONEQUAL
49638: IFFALSE 49650
// begin result := false ;
49640: LD_ADDR_VAR 0 3
49644: PUSH
49645: LD_INT 0
49647: ST_TO_ADDR
// break ;
49648: GO 49652
// end ;
49650: GO 49613
49652: POP
49653: POP
// end else
49654: GO 49664
// result := false ;
49656: LD_ADDR_VAR 0 3
49660: PUSH
49661: LD_INT 0
49663: ST_TO_ADDR
// end ;
49664: LD_VAR 0 3
49668: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49669: LD_INT 0
49671: PPUSH
49672: PPUSH
// if not array1 or not array2 then
49673: LD_VAR 0 1
49677: NOT
49678: IFTRUE 49687
49680: PUSH
49681: LD_VAR 0 2
49685: NOT
49686: OR
49687: IFFALSE 49691
// exit ;
49689: GO 49755
// result := true ;
49691: LD_ADDR_VAR 0 3
49695: PUSH
49696: LD_INT 1
49698: ST_TO_ADDR
// for i = 1 to array1 do
49699: LD_ADDR_VAR 0 4
49703: PUSH
49704: DOUBLE
49705: LD_INT 1
49707: DEC
49708: ST_TO_ADDR
49709: LD_VAR 0 1
49713: PUSH
49714: FOR_TO
49715: IFFALSE 49753
// if array1 [ i ] <> array2 [ i ] then
49717: LD_VAR 0 1
49721: PUSH
49722: LD_VAR 0 4
49726: ARRAY
49727: PUSH
49728: LD_VAR 0 2
49732: PUSH
49733: LD_VAR 0 4
49737: ARRAY
49738: NONEQUAL
49739: IFFALSE 49751
// begin result := false ;
49741: LD_ADDR_VAR 0 3
49745: PUSH
49746: LD_INT 0
49748: ST_TO_ADDR
// break ;
49749: GO 49753
// end ;
49751: GO 49714
49753: POP
49754: POP
// end ;
49755: LD_VAR 0 3
49759: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49760: LD_INT 0
49762: PPUSH
49763: PPUSH
49764: PPUSH
// pom := GetBase ( fac ) ;
49765: LD_ADDR_VAR 0 5
49769: PUSH
49770: LD_VAR 0 1
49774: PPUSH
49775: CALL_OW 274
49779: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49780: LD_ADDR_VAR 0 4
49784: PUSH
49785: LD_VAR 0 2
49789: PUSH
49790: LD_INT 1
49792: ARRAY
49793: PPUSH
49794: LD_VAR 0 2
49798: PUSH
49799: LD_INT 2
49801: ARRAY
49802: PPUSH
49803: LD_VAR 0 2
49807: PUSH
49808: LD_INT 3
49810: ARRAY
49811: PPUSH
49812: LD_VAR 0 2
49816: PUSH
49817: LD_INT 4
49819: ARRAY
49820: PPUSH
49821: CALL_OW 449
49825: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49826: LD_ADDR_VAR 0 3
49830: PUSH
49831: LD_VAR 0 5
49835: PPUSH
49836: LD_INT 1
49838: PPUSH
49839: CALL_OW 275
49843: PUSH
49844: LD_VAR 0 4
49848: PUSH
49849: LD_INT 1
49851: ARRAY
49852: GREATEREQUAL
49853: IFFALSE 49879
49855: PUSH
49856: LD_VAR 0 5
49860: PPUSH
49861: LD_INT 2
49863: PPUSH
49864: CALL_OW 275
49868: PUSH
49869: LD_VAR 0 4
49873: PUSH
49874: LD_INT 2
49876: ARRAY
49877: GREATEREQUAL
49878: AND
49879: IFFALSE 49905
49881: PUSH
49882: LD_VAR 0 5
49886: PPUSH
49887: LD_INT 3
49889: PPUSH
49890: CALL_OW 275
49894: PUSH
49895: LD_VAR 0 4
49899: PUSH
49900: LD_INT 3
49902: ARRAY
49903: GREATEREQUAL
49904: AND
49905: ST_TO_ADDR
// end ;
49906: LD_VAR 0 3
49910: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49911: LD_INT 0
49913: PPUSH
49914: PPUSH
49915: PPUSH
49916: PPUSH
// pom := GetBase ( building ) ;
49917: LD_ADDR_VAR 0 3
49921: PUSH
49922: LD_VAR 0 1
49926: PPUSH
49927: CALL_OW 274
49931: ST_TO_ADDR
// if not pom then
49932: LD_VAR 0 3
49936: NOT
49937: IFFALSE 49941
// exit ;
49939: GO 50115
// btype := GetBType ( building ) ;
49941: LD_ADDR_VAR 0 5
49945: PUSH
49946: LD_VAR 0 1
49950: PPUSH
49951: CALL_OW 266
49955: ST_TO_ADDR
// if btype = b_armoury then
49956: LD_VAR 0 5
49960: PUSH
49961: LD_INT 4
49963: EQUAL
49964: IFFALSE 49974
// btype := b_barracks ;
49966: LD_ADDR_VAR 0 5
49970: PUSH
49971: LD_INT 5
49973: ST_TO_ADDR
// if btype = b_depot then
49974: LD_VAR 0 5
49978: PUSH
49979: LD_INT 0
49981: EQUAL
49982: IFFALSE 49992
// btype := b_warehouse ;
49984: LD_ADDR_VAR 0 5
49988: PUSH
49989: LD_INT 1
49991: ST_TO_ADDR
// if btype = b_workshop then
49992: LD_VAR 0 5
49996: PUSH
49997: LD_INT 2
49999: EQUAL
50000: IFFALSE 50010
// btype := b_factory ;
50002: LD_ADDR_VAR 0 5
50006: PUSH
50007: LD_INT 3
50009: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50010: LD_ADDR_VAR 0 4
50014: PUSH
50015: LD_VAR 0 5
50019: PPUSH
50020: LD_VAR 0 1
50024: PPUSH
50025: CALL_OW 248
50029: PPUSH
50030: CALL_OW 450
50034: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50035: LD_ADDR_VAR 0 2
50039: PUSH
50040: LD_VAR 0 3
50044: PPUSH
50045: LD_INT 1
50047: PPUSH
50048: CALL_OW 275
50052: PUSH
50053: LD_VAR 0 4
50057: PUSH
50058: LD_INT 1
50060: ARRAY
50061: GREATEREQUAL
50062: IFFALSE 50088
50064: PUSH
50065: LD_VAR 0 3
50069: PPUSH
50070: LD_INT 2
50072: PPUSH
50073: CALL_OW 275
50077: PUSH
50078: LD_VAR 0 4
50082: PUSH
50083: LD_INT 2
50085: ARRAY
50086: GREATEREQUAL
50087: AND
50088: IFFALSE 50114
50090: PUSH
50091: LD_VAR 0 3
50095: PPUSH
50096: LD_INT 3
50098: PPUSH
50099: CALL_OW 275
50103: PUSH
50104: LD_VAR 0 4
50108: PUSH
50109: LD_INT 3
50111: ARRAY
50112: GREATEREQUAL
50113: AND
50114: ST_TO_ADDR
// end ;
50115: LD_VAR 0 2
50119: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50120: LD_INT 0
50122: PPUSH
50123: PPUSH
50124: PPUSH
// pom := GetBase ( building ) ;
50125: LD_ADDR_VAR 0 4
50129: PUSH
50130: LD_VAR 0 1
50134: PPUSH
50135: CALL_OW 274
50139: ST_TO_ADDR
// if not pom then
50140: LD_VAR 0 4
50144: NOT
50145: IFFALSE 50149
// exit ;
50147: GO 50254
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50149: LD_ADDR_VAR 0 5
50153: PUSH
50154: LD_VAR 0 2
50158: PPUSH
50159: LD_VAR 0 1
50163: PPUSH
50164: CALL_OW 248
50168: PPUSH
50169: CALL_OW 450
50173: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50174: LD_ADDR_VAR 0 3
50178: PUSH
50179: LD_VAR 0 4
50183: PPUSH
50184: LD_INT 1
50186: PPUSH
50187: CALL_OW 275
50191: PUSH
50192: LD_VAR 0 5
50196: PUSH
50197: LD_INT 1
50199: ARRAY
50200: GREATEREQUAL
50201: IFFALSE 50227
50203: PUSH
50204: LD_VAR 0 4
50208: PPUSH
50209: LD_INT 2
50211: PPUSH
50212: CALL_OW 275
50216: PUSH
50217: LD_VAR 0 5
50221: PUSH
50222: LD_INT 2
50224: ARRAY
50225: GREATEREQUAL
50226: AND
50227: IFFALSE 50253
50229: PUSH
50230: LD_VAR 0 4
50234: PPUSH
50235: LD_INT 3
50237: PPUSH
50238: CALL_OW 275
50242: PUSH
50243: LD_VAR 0 5
50247: PUSH
50248: LD_INT 3
50250: ARRAY
50251: GREATEREQUAL
50252: AND
50253: ST_TO_ADDR
// end ;
50254: LD_VAR 0 3
50258: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50259: LD_INT 0
50261: PPUSH
50262: PPUSH
50263: PPUSH
50264: PPUSH
50265: PPUSH
50266: PPUSH
50267: PPUSH
50268: PPUSH
50269: PPUSH
50270: PPUSH
50271: PPUSH
// result := false ;
50272: LD_ADDR_VAR 0 8
50276: PUSH
50277: LD_INT 0
50279: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50280: LD_VAR 0 5
50284: NOT
50285: IFTRUE 50294
50287: PUSH
50288: LD_VAR 0 1
50292: NOT
50293: OR
50294: IFTRUE 50303
50296: PUSH
50297: LD_VAR 0 2
50301: NOT
50302: OR
50303: IFTRUE 50312
50305: PUSH
50306: LD_VAR 0 3
50310: NOT
50311: OR
50312: IFFALSE 50316
// exit ;
50314: GO 51142
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50316: LD_ADDR_VAR 0 14
50320: PUSH
50321: LD_VAR 0 1
50325: PPUSH
50326: LD_VAR 0 2
50330: PPUSH
50331: LD_VAR 0 3
50335: PPUSH
50336: LD_VAR 0 4
50340: PPUSH
50341: LD_VAR 0 5
50345: PUSH
50346: LD_INT 1
50348: ARRAY
50349: PPUSH
50350: CALL_OW 248
50354: PPUSH
50355: LD_INT 0
50357: PPUSH
50358: CALL 52423 0 6
50362: ST_TO_ADDR
// if not hexes then
50363: LD_VAR 0 14
50367: NOT
50368: IFFALSE 50372
// exit ;
50370: GO 51142
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50372: LD_ADDR_VAR 0 17
50376: PUSH
50377: LD_VAR 0 5
50381: PPUSH
50382: LD_INT 22
50384: PUSH
50385: LD_VAR 0 13
50389: PPUSH
50390: CALL_OW 255
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 2
50401: PUSH
50402: LD_INT 30
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 30
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: LIST
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PPUSH
50431: CALL_OW 72
50435: ST_TO_ADDR
// for i = 1 to hexes do
50436: LD_ADDR_VAR 0 9
50440: PUSH
50441: DOUBLE
50442: LD_INT 1
50444: DEC
50445: ST_TO_ADDR
50446: LD_VAR 0 14
50450: PUSH
50451: FOR_TO
50452: IFFALSE 51140
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50454: LD_ADDR_VAR 0 13
50458: PUSH
50459: LD_VAR 0 14
50463: PUSH
50464: LD_VAR 0 9
50468: ARRAY
50469: PUSH
50470: LD_INT 1
50472: ARRAY
50473: PPUSH
50474: LD_VAR 0 14
50478: PUSH
50479: LD_VAR 0 9
50483: ARRAY
50484: PUSH
50485: LD_INT 2
50487: ARRAY
50488: PPUSH
50489: CALL_OW 428
50493: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50494: LD_VAR 0 14
50498: PUSH
50499: LD_VAR 0 9
50503: ARRAY
50504: PUSH
50505: LD_INT 1
50507: ARRAY
50508: PPUSH
50509: LD_VAR 0 14
50513: PUSH
50514: LD_VAR 0 9
50518: ARRAY
50519: PUSH
50520: LD_INT 2
50522: ARRAY
50523: PPUSH
50524: CALL_OW 351
50528: IFTRUE 50567
50530: PUSH
50531: LD_VAR 0 14
50535: PUSH
50536: LD_VAR 0 9
50540: ARRAY
50541: PUSH
50542: LD_INT 1
50544: ARRAY
50545: PPUSH
50546: LD_VAR 0 14
50550: PUSH
50551: LD_VAR 0 9
50555: ARRAY
50556: PUSH
50557: LD_INT 2
50559: ARRAY
50560: PPUSH
50561: CALL_OW 488
50565: NOT
50566: OR
50567: IFTRUE 50584
50569: PUSH
50570: LD_VAR 0 13
50574: PPUSH
50575: CALL_OW 247
50579: PUSH
50580: LD_INT 3
50582: EQUAL
50583: OR
50584: IFFALSE 50590
// exit ;
50586: POP
50587: POP
50588: GO 51142
// if not tmp then
50590: LD_VAR 0 13
50594: NOT
50595: IFFALSE 50599
// continue ;
50597: GO 50451
// result := true ;
50599: LD_ADDR_VAR 0 8
50603: PUSH
50604: LD_INT 1
50606: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50607: LD_VAR 0 6
50611: IFFALSE 50628
50613: PUSH
50614: LD_VAR 0 13
50618: PPUSH
50619: CALL_OW 247
50623: PUSH
50624: LD_INT 2
50626: EQUAL
50627: AND
50628: IFFALSE 50645
50630: PUSH
50631: LD_VAR 0 13
50635: PPUSH
50636: CALL_OW 263
50640: PUSH
50641: LD_INT 1
50643: EQUAL
50644: AND
50645: IFFALSE 50809
// begin if IsDrivenBy ( tmp ) then
50647: LD_VAR 0 13
50651: PPUSH
50652: CALL_OW 311
50656: IFFALSE 50660
// continue ;
50658: GO 50451
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50660: LD_VAR 0 6
50664: PPUSH
50665: LD_INT 3
50667: PUSH
50668: LD_INT 60
50670: PUSH
50671: EMPTY
50672: LIST
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 3
50680: PUSH
50681: LD_INT 55
50683: PUSH
50684: EMPTY
50685: LIST
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PPUSH
50695: CALL_OW 72
50699: IFFALSE 50807
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50701: LD_ADDR_VAR 0 18
50705: PUSH
50706: LD_VAR 0 6
50710: PPUSH
50711: LD_INT 3
50713: PUSH
50714: LD_INT 60
50716: PUSH
50717: EMPTY
50718: LIST
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 3
50726: PUSH
50727: LD_INT 55
50729: PUSH
50730: EMPTY
50731: LIST
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PPUSH
50741: CALL_OW 72
50745: PUSH
50746: LD_INT 1
50748: ARRAY
50749: ST_TO_ADDR
// if IsInUnit ( driver ) then
50750: LD_VAR 0 18
50754: PPUSH
50755: CALL_OW 310
50759: IFFALSE 50770
// ComExit ( driver ) ;
50761: LD_VAR 0 18
50765: PPUSH
50766: CALL 76423 0 1
// AddComEnterUnit ( driver , tmp ) ;
50770: LD_VAR 0 18
50774: PPUSH
50775: LD_VAR 0 13
50779: PPUSH
50780: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50784: LD_VAR 0 18
50788: PPUSH
50789: LD_VAR 0 7
50793: PPUSH
50794: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50798: LD_VAR 0 18
50802: PPUSH
50803: CALL_OW 181
// end ; continue ;
50807: GO 50451
// end ; if not cleaners or not tmp in cleaners then
50809: LD_VAR 0 6
50813: NOT
50814: IFTRUE 50829
50816: PUSH
50817: LD_VAR 0 13
50821: PUSH
50822: LD_VAR 0 6
50826: IN
50827: NOT
50828: OR
50829: IFFALSE 51138
// begin if dep then
50831: LD_VAR 0 17
50835: IFFALSE 50971
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50837: LD_ADDR_VAR 0 16
50841: PUSH
50842: LD_VAR 0 17
50846: PUSH
50847: LD_INT 1
50849: ARRAY
50850: PPUSH
50851: CALL_OW 250
50855: PPUSH
50856: LD_VAR 0 17
50860: PUSH
50861: LD_INT 1
50863: ARRAY
50864: PPUSH
50865: CALL_OW 254
50869: PPUSH
50870: LD_INT 5
50872: PPUSH
50873: CALL_OW 272
50877: PUSH
50878: LD_VAR 0 17
50882: PUSH
50883: LD_INT 1
50885: ARRAY
50886: PPUSH
50887: CALL_OW 251
50891: PPUSH
50892: LD_VAR 0 17
50896: PUSH
50897: LD_INT 1
50899: ARRAY
50900: PPUSH
50901: CALL_OW 254
50905: PPUSH
50906: LD_INT 5
50908: PPUSH
50909: CALL_OW 273
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50918: LD_VAR 0 16
50922: PUSH
50923: LD_INT 1
50925: ARRAY
50926: PPUSH
50927: LD_VAR 0 16
50931: PUSH
50932: LD_INT 2
50934: ARRAY
50935: PPUSH
50936: CALL_OW 488
50940: IFFALSE 50971
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50942: LD_VAR 0 13
50946: PPUSH
50947: LD_VAR 0 16
50951: PUSH
50952: LD_INT 1
50954: ARRAY
50955: PPUSH
50956: LD_VAR 0 16
50960: PUSH
50961: LD_INT 2
50963: ARRAY
50964: PPUSH
50965: CALL_OW 111
// continue ;
50969: GO 50451
// end ; end ; r := GetDir ( tmp ) ;
50971: LD_ADDR_VAR 0 15
50975: PUSH
50976: LD_VAR 0 13
50980: PPUSH
50981: CALL_OW 254
50985: ST_TO_ADDR
// if r = 5 then
50986: LD_VAR 0 15
50990: PUSH
50991: LD_INT 5
50993: EQUAL
50994: IFFALSE 51004
// r := 0 ;
50996: LD_ADDR_VAR 0 15
51000: PUSH
51001: LD_INT 0
51003: ST_TO_ADDR
// for j = r to 5 do
51004: LD_ADDR_VAR 0 10
51008: PUSH
51009: DOUBLE
51010: LD_VAR 0 15
51014: DEC
51015: ST_TO_ADDR
51016: LD_INT 5
51018: PUSH
51019: FOR_TO
51020: IFFALSE 51136
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51022: LD_ADDR_VAR 0 11
51026: PUSH
51027: LD_VAR 0 13
51031: PPUSH
51032: CALL_OW 250
51036: PPUSH
51037: LD_VAR 0 10
51041: PPUSH
51042: LD_INT 2
51044: PPUSH
51045: CALL_OW 272
51049: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51050: LD_ADDR_VAR 0 12
51054: PUSH
51055: LD_VAR 0 13
51059: PPUSH
51060: CALL_OW 251
51064: PPUSH
51065: LD_VAR 0 10
51069: PPUSH
51070: LD_INT 2
51072: PPUSH
51073: CALL_OW 273
51077: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51078: LD_VAR 0 11
51082: PPUSH
51083: LD_VAR 0 12
51087: PPUSH
51088: CALL_OW 488
51092: IFFALSE 51111
51094: PUSH
51095: LD_VAR 0 11
51099: PPUSH
51100: LD_VAR 0 12
51104: PPUSH
51105: CALL_OW 428
51109: NOT
51110: AND
51111: IFFALSE 51134
// begin ComMoveXY ( tmp , _x , _y ) ;
51113: LD_VAR 0 13
51117: PPUSH
51118: LD_VAR 0 11
51122: PPUSH
51123: LD_VAR 0 12
51127: PPUSH
51128: CALL_OW 111
// break ;
51132: GO 51136
// end ; end ;
51134: GO 51019
51136: POP
51137: POP
// end ; end ;
51138: GO 50451
51140: POP
51141: POP
// end ;
51142: LD_VAR 0 8
51146: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51147: LD_INT 0
51149: PPUSH
// result := true ;
51150: LD_ADDR_VAR 0 3
51154: PUSH
51155: LD_INT 1
51157: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51158: LD_VAR 0 2
51162: PUSH
51163: LD_INT 24
51165: DOUBLE
51166: EQUAL
51167: IFTRUE 51177
51169: LD_INT 33
51171: DOUBLE
51172: EQUAL
51173: IFTRUE 51177
51175: GO 51202
51177: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51178: LD_ADDR_VAR 0 3
51182: PUSH
51183: LD_INT 32
51185: PPUSH
51186: LD_VAR 0 1
51190: PPUSH
51191: CALL_OW 321
51195: PUSH
51196: LD_INT 2
51198: EQUAL
51199: ST_TO_ADDR
51200: GO 51518
51202: LD_INT 20
51204: DOUBLE
51205: EQUAL
51206: IFTRUE 51210
51208: GO 51235
51210: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51211: LD_ADDR_VAR 0 3
51215: PUSH
51216: LD_INT 6
51218: PPUSH
51219: LD_VAR 0 1
51223: PPUSH
51224: CALL_OW 321
51228: PUSH
51229: LD_INT 2
51231: EQUAL
51232: ST_TO_ADDR
51233: GO 51518
51235: LD_INT 22
51237: DOUBLE
51238: EQUAL
51239: IFTRUE 51249
51241: LD_INT 36
51243: DOUBLE
51244: EQUAL
51245: IFTRUE 51249
51247: GO 51274
51249: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51250: LD_ADDR_VAR 0 3
51254: PUSH
51255: LD_INT 15
51257: PPUSH
51258: LD_VAR 0 1
51262: PPUSH
51263: CALL_OW 321
51267: PUSH
51268: LD_INT 2
51270: EQUAL
51271: ST_TO_ADDR
51272: GO 51518
51274: LD_INT 30
51276: DOUBLE
51277: EQUAL
51278: IFTRUE 51282
51280: GO 51307
51282: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51283: LD_ADDR_VAR 0 3
51287: PUSH
51288: LD_INT 20
51290: PPUSH
51291: LD_VAR 0 1
51295: PPUSH
51296: CALL_OW 321
51300: PUSH
51301: LD_INT 2
51303: EQUAL
51304: ST_TO_ADDR
51305: GO 51518
51307: LD_INT 28
51309: DOUBLE
51310: EQUAL
51311: IFTRUE 51321
51313: LD_INT 21
51315: DOUBLE
51316: EQUAL
51317: IFTRUE 51321
51319: GO 51346
51321: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51322: LD_ADDR_VAR 0 3
51326: PUSH
51327: LD_INT 21
51329: PPUSH
51330: LD_VAR 0 1
51334: PPUSH
51335: CALL_OW 321
51339: PUSH
51340: LD_INT 2
51342: EQUAL
51343: ST_TO_ADDR
51344: GO 51518
51346: LD_INT 16
51348: DOUBLE
51349: EQUAL
51350: IFTRUE 51354
51352: GO 51379
51354: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51355: LD_ADDR_VAR 0 3
51359: PUSH
51360: LD_INT 84
51362: PPUSH
51363: LD_VAR 0 1
51367: PPUSH
51368: CALL_OW 321
51372: PUSH
51373: LD_INT 2
51375: EQUAL
51376: ST_TO_ADDR
51377: GO 51518
51379: LD_INT 19
51381: DOUBLE
51382: EQUAL
51383: IFTRUE 51393
51385: LD_INT 23
51387: DOUBLE
51388: EQUAL
51389: IFTRUE 51393
51391: GO 51418
51393: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51394: LD_ADDR_VAR 0 3
51398: PUSH
51399: LD_INT 83
51401: PPUSH
51402: LD_VAR 0 1
51406: PPUSH
51407: CALL_OW 321
51411: PUSH
51412: LD_INT 2
51414: EQUAL
51415: ST_TO_ADDR
51416: GO 51518
51418: LD_INT 17
51420: DOUBLE
51421: EQUAL
51422: IFTRUE 51426
51424: GO 51451
51426: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51427: LD_ADDR_VAR 0 3
51431: PUSH
51432: LD_INT 39
51434: PPUSH
51435: LD_VAR 0 1
51439: PPUSH
51440: CALL_OW 321
51444: PUSH
51445: LD_INT 2
51447: EQUAL
51448: ST_TO_ADDR
51449: GO 51518
51451: LD_INT 18
51453: DOUBLE
51454: EQUAL
51455: IFTRUE 51459
51457: GO 51484
51459: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51460: LD_ADDR_VAR 0 3
51464: PUSH
51465: LD_INT 40
51467: PPUSH
51468: LD_VAR 0 1
51472: PPUSH
51473: CALL_OW 321
51477: PUSH
51478: LD_INT 2
51480: EQUAL
51481: ST_TO_ADDR
51482: GO 51518
51484: LD_INT 27
51486: DOUBLE
51487: EQUAL
51488: IFTRUE 51492
51490: GO 51517
51492: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51493: LD_ADDR_VAR 0 3
51497: PUSH
51498: LD_INT 35
51500: PPUSH
51501: LD_VAR 0 1
51505: PPUSH
51506: CALL_OW 321
51510: PUSH
51511: LD_INT 2
51513: EQUAL
51514: ST_TO_ADDR
51515: GO 51518
51517: POP
// end ;
51518: LD_VAR 0 3
51522: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51523: LD_INT 0
51525: PPUSH
51526: PPUSH
51527: PPUSH
51528: PPUSH
51529: PPUSH
51530: PPUSH
51531: PPUSH
51532: PPUSH
51533: PPUSH
51534: PPUSH
51535: PPUSH
// result := false ;
51536: LD_ADDR_VAR 0 6
51540: PUSH
51541: LD_INT 0
51543: ST_TO_ADDR
// if btype = b_depot then
51544: LD_VAR 0 2
51548: PUSH
51549: LD_INT 0
51551: EQUAL
51552: IFFALSE 51564
// begin result := true ;
51554: LD_ADDR_VAR 0 6
51558: PUSH
51559: LD_INT 1
51561: ST_TO_ADDR
// exit ;
51562: GO 52418
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51564: LD_VAR 0 1
51568: NOT
51569: IFTRUE 51594
51571: PUSH
51572: LD_VAR 0 1
51576: PPUSH
51577: CALL_OW 266
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: IN
51592: NOT
51593: OR
51594: IFTRUE 51603
51596: PUSH
51597: LD_VAR 0 2
51601: NOT
51602: OR
51603: IFTRUE 51639
51605: PUSH
51606: LD_VAR 0 5
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: LD_INT 2
51619: PUSH
51620: LD_INT 3
51622: PUSH
51623: LD_INT 4
51625: PUSH
51626: LD_INT 5
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: IN
51637: NOT
51638: OR
51639: IFTRUE 51658
51641: PUSH
51642: LD_VAR 0 3
51646: PPUSH
51647: LD_VAR 0 4
51651: PPUSH
51652: CALL_OW 488
51656: NOT
51657: OR
51658: IFFALSE 51662
// exit ;
51660: GO 52418
// side := GetSide ( depot ) ;
51662: LD_ADDR_VAR 0 9
51666: PUSH
51667: LD_VAR 0 1
51671: PPUSH
51672: CALL_OW 255
51676: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51677: LD_VAR 0 9
51681: PPUSH
51682: LD_VAR 0 2
51686: PPUSH
51687: CALL 51147 0 2
51691: NOT
51692: IFFALSE 51696
// exit ;
51694: GO 52418
// pom := GetBase ( depot ) ;
51696: LD_ADDR_VAR 0 10
51700: PUSH
51701: LD_VAR 0 1
51705: PPUSH
51706: CALL_OW 274
51710: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51711: LD_ADDR_VAR 0 11
51715: PUSH
51716: LD_VAR 0 2
51720: PPUSH
51721: LD_VAR 0 1
51725: PPUSH
51726: CALL_OW 248
51730: PPUSH
51731: CALL_OW 450
51735: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51736: LD_VAR 0 10
51740: PPUSH
51741: LD_INT 1
51743: PPUSH
51744: CALL_OW 275
51748: PUSH
51749: LD_VAR 0 11
51753: PUSH
51754: LD_INT 1
51756: ARRAY
51757: GREATEREQUAL
51758: IFFALSE 51784
51760: PUSH
51761: LD_VAR 0 10
51765: PPUSH
51766: LD_INT 2
51768: PPUSH
51769: CALL_OW 275
51773: PUSH
51774: LD_VAR 0 11
51778: PUSH
51779: LD_INT 2
51781: ARRAY
51782: GREATEREQUAL
51783: AND
51784: IFFALSE 51810
51786: PUSH
51787: LD_VAR 0 10
51791: PPUSH
51792: LD_INT 3
51794: PPUSH
51795: CALL_OW 275
51799: PUSH
51800: LD_VAR 0 11
51804: PUSH
51805: LD_INT 3
51807: ARRAY
51808: GREATEREQUAL
51809: AND
51810: NOT
51811: IFFALSE 51815
// exit ;
51813: GO 52418
// if GetBType ( depot ) = b_depot then
51815: LD_VAR 0 1
51819: PPUSH
51820: CALL_OW 266
51824: PUSH
51825: LD_INT 0
51827: EQUAL
51828: IFFALSE 51840
// dist := 28 else
51830: LD_ADDR_VAR 0 14
51834: PUSH
51835: LD_INT 28
51837: ST_TO_ADDR
51838: GO 51848
// dist := 36 ;
51840: LD_ADDR_VAR 0 14
51844: PUSH
51845: LD_INT 36
51847: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51848: LD_VAR 0 1
51852: PPUSH
51853: LD_VAR 0 3
51857: PPUSH
51858: LD_VAR 0 4
51862: PPUSH
51863: CALL_OW 297
51867: PUSH
51868: LD_VAR 0 14
51872: GREATER
51873: IFFALSE 51877
// exit ;
51875: GO 52418
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51877: LD_ADDR_VAR 0 12
51881: PUSH
51882: LD_VAR 0 2
51886: PPUSH
51887: LD_VAR 0 3
51891: PPUSH
51892: LD_VAR 0 4
51896: PPUSH
51897: LD_VAR 0 5
51901: PPUSH
51902: LD_VAR 0 1
51906: PPUSH
51907: CALL_OW 248
51911: PPUSH
51912: LD_INT 0
51914: PPUSH
51915: CALL 52423 0 6
51919: ST_TO_ADDR
// if not hexes then
51920: LD_VAR 0 12
51924: NOT
51925: IFFALSE 51929
// exit ;
51927: GO 52418
// hex := GetHexInfo ( x , y ) ;
51929: LD_ADDR_VAR 0 15
51933: PUSH
51934: LD_VAR 0 3
51938: PPUSH
51939: LD_VAR 0 4
51943: PPUSH
51944: CALL_OW 546
51948: ST_TO_ADDR
// if hex [ 1 ] then
51949: LD_VAR 0 15
51953: PUSH
51954: LD_INT 1
51956: ARRAY
51957: IFFALSE 51961
// exit ;
51959: GO 52418
// height := hex [ 2 ] ;
51961: LD_ADDR_VAR 0 13
51965: PUSH
51966: LD_VAR 0 15
51970: PUSH
51971: LD_INT 2
51973: ARRAY
51974: ST_TO_ADDR
// for i = 1 to hexes do
51975: LD_ADDR_VAR 0 7
51979: PUSH
51980: DOUBLE
51981: LD_INT 1
51983: DEC
51984: ST_TO_ADDR
51985: LD_VAR 0 12
51989: PUSH
51990: FOR_TO
51991: IFFALSE 52335
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51993: LD_VAR 0 12
51997: PUSH
51998: LD_VAR 0 7
52002: ARRAY
52003: PUSH
52004: LD_INT 1
52006: ARRAY
52007: PPUSH
52008: LD_VAR 0 12
52012: PUSH
52013: LD_VAR 0 7
52017: ARRAY
52018: PUSH
52019: LD_INT 2
52021: ARRAY
52022: PPUSH
52023: CALL_OW 488
52027: NOT
52028: IFTRUE 52070
52030: PUSH
52031: LD_VAR 0 12
52035: PUSH
52036: LD_VAR 0 7
52040: ARRAY
52041: PUSH
52042: LD_INT 1
52044: ARRAY
52045: PPUSH
52046: LD_VAR 0 12
52050: PUSH
52051: LD_VAR 0 7
52055: ARRAY
52056: PUSH
52057: LD_INT 2
52059: ARRAY
52060: PPUSH
52061: CALL_OW 428
52065: PUSH
52066: LD_INT 0
52068: GREATER
52069: OR
52070: IFTRUE 52108
52072: PUSH
52073: LD_VAR 0 12
52077: PUSH
52078: LD_VAR 0 7
52082: ARRAY
52083: PUSH
52084: LD_INT 1
52086: ARRAY
52087: PPUSH
52088: LD_VAR 0 12
52092: PUSH
52093: LD_VAR 0 7
52097: ARRAY
52098: PUSH
52099: LD_INT 2
52101: ARRAY
52102: PPUSH
52103: CALL_OW 351
52107: OR
52108: IFFALSE 52114
// exit ;
52110: POP
52111: POP
52112: GO 52418
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52114: LD_ADDR_VAR 0 8
52118: PUSH
52119: LD_VAR 0 12
52123: PUSH
52124: LD_VAR 0 7
52128: ARRAY
52129: PUSH
52130: LD_INT 1
52132: ARRAY
52133: PPUSH
52134: LD_VAR 0 12
52138: PUSH
52139: LD_VAR 0 7
52143: ARRAY
52144: PUSH
52145: LD_INT 2
52147: ARRAY
52148: PPUSH
52149: CALL_OW 546
52153: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52154: LD_VAR 0 8
52158: PUSH
52159: LD_INT 1
52161: ARRAY
52162: IFTRUE 52184
52164: PUSH
52165: LD_VAR 0 8
52169: PUSH
52170: LD_INT 2
52172: ARRAY
52173: PUSH
52174: LD_VAR 0 13
52178: PUSH
52179: LD_INT 2
52181: PLUS
52182: GREATER
52183: OR
52184: IFTRUE 52206
52186: PUSH
52187: LD_VAR 0 8
52191: PUSH
52192: LD_INT 2
52194: ARRAY
52195: PUSH
52196: LD_VAR 0 13
52200: PUSH
52201: LD_INT 2
52203: MINUS
52204: LESS
52205: OR
52206: IFTRUE 52274
52208: PUSH
52209: LD_VAR 0 8
52213: PUSH
52214: LD_INT 3
52216: ARRAY
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: LD_INT 8
52223: PUSH
52224: LD_INT 9
52226: PUSH
52227: LD_INT 10
52229: PUSH
52230: LD_INT 11
52232: PUSH
52233: LD_INT 12
52235: PUSH
52236: LD_INT 13
52238: PUSH
52239: LD_INT 16
52241: PUSH
52242: LD_INT 17
52244: PUSH
52245: LD_INT 18
52247: PUSH
52248: LD_INT 19
52250: PUSH
52251: LD_INT 20
52253: PUSH
52254: LD_INT 21
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: IN
52272: NOT
52273: OR
52274: IFTRUE 52287
52276: PUSH
52277: LD_VAR 0 8
52281: PUSH
52282: LD_INT 5
52284: ARRAY
52285: NOT
52286: OR
52287: IFTRUE 52327
52289: PUSH
52290: LD_VAR 0 8
52294: PUSH
52295: LD_INT 6
52297: ARRAY
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: LD_INT 7
52307: PUSH
52308: LD_INT 9
52310: PUSH
52311: LD_INT 10
52313: PUSH
52314: LD_INT 11
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: IN
52325: NOT
52326: OR
52327: IFFALSE 52333
// exit ;
52329: POP
52330: POP
52331: GO 52418
// end ;
52333: GO 51990
52335: POP
52336: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52337: LD_VAR 0 9
52341: PPUSH
52342: LD_VAR 0 3
52346: PPUSH
52347: LD_VAR 0 4
52351: PPUSH
52352: LD_INT 20
52354: PPUSH
52355: CALL 44237 0 4
52359: PUSH
52360: LD_INT 4
52362: ARRAY
52363: IFFALSE 52367
// exit ;
52365: GO 52418
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52367: LD_VAR 0 2
52371: PUSH
52372: LD_INT 29
52374: PUSH
52375: LD_INT 30
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: IN
52382: IFFALSE 52406
52384: PUSH
52385: LD_VAR 0 3
52389: PPUSH
52390: LD_VAR 0 4
52394: PPUSH
52395: LD_VAR 0 9
52399: PPUSH
52400: CALL_OW 440
52404: NOT
52405: AND
52406: IFFALSE 52410
// exit ;
52408: GO 52418
// result := true ;
52410: LD_ADDR_VAR 0 6
52414: PUSH
52415: LD_INT 1
52417: ST_TO_ADDR
// end ;
52418: LD_VAR 0 6
52422: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52423: LD_INT 0
52425: PPUSH
52426: PPUSH
52427: PPUSH
52428: PPUSH
52429: PPUSH
52430: PPUSH
52431: PPUSH
52432: PPUSH
52433: PPUSH
52434: PPUSH
52435: PPUSH
52436: PPUSH
52437: PPUSH
52438: PPUSH
52439: PPUSH
52440: PPUSH
52441: PPUSH
52442: PPUSH
52443: PPUSH
52444: PPUSH
52445: PPUSH
52446: PPUSH
52447: PPUSH
52448: PPUSH
52449: PPUSH
52450: PPUSH
52451: PPUSH
52452: PPUSH
52453: PPUSH
52454: PPUSH
52455: PPUSH
52456: PPUSH
52457: PPUSH
52458: PPUSH
52459: PPUSH
52460: PPUSH
52461: PPUSH
52462: PPUSH
52463: PPUSH
52464: PPUSH
52465: PPUSH
52466: PPUSH
52467: PPUSH
52468: PPUSH
52469: PPUSH
52470: PPUSH
52471: PPUSH
52472: PPUSH
52473: PPUSH
52474: PPUSH
52475: PPUSH
52476: PPUSH
52477: PPUSH
52478: PPUSH
52479: PPUSH
52480: PPUSH
52481: PPUSH
52482: PPUSH
// result = [ ] ;
52483: LD_ADDR_VAR 0 7
52487: PUSH
52488: EMPTY
52489: ST_TO_ADDR
// temp_list = [ ] ;
52490: LD_ADDR_VAR 0 9
52494: PUSH
52495: EMPTY
52496: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52497: LD_VAR 0 4
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: LD_INT 3
52513: PUSH
52514: LD_INT 4
52516: PUSH
52517: LD_INT 5
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: IN
52528: NOT
52529: IFTRUE 52572
52531: PUSH
52532: LD_VAR 0 1
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: IN
52547: IFFALSE 52571
52549: PUSH
52550: LD_VAR 0 5
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: LD_INT 2
52560: PUSH
52561: LD_INT 3
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: LIST
52568: IN
52569: NOT
52570: AND
52571: OR
52572: IFFALSE 52576
// exit ;
52574: GO 70975
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52576: LD_VAR 0 1
52580: PUSH
52581: LD_INT 6
52583: PUSH
52584: LD_INT 7
52586: PUSH
52587: LD_INT 8
52589: PUSH
52590: LD_INT 13
52592: PUSH
52593: LD_INT 12
52595: PUSH
52596: LD_INT 15
52598: PUSH
52599: LD_INT 11
52601: PUSH
52602: LD_INT 14
52604: PUSH
52605: LD_INT 10
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: IN
52619: IFFALSE 52629
// btype = b_lab ;
52621: LD_ADDR_VAR 0 1
52625: PUSH
52626: LD_INT 6
52628: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52629: LD_VAR 0 6
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: LD_INT 2
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: LIST
52647: IN
52648: NOT
52649: IFTRUE 52717
52651: PUSH
52652: LD_VAR 0 1
52656: PUSH
52657: LD_INT 0
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: LD_INT 2
52665: PUSH
52666: LD_INT 3
52668: PUSH
52669: LD_INT 6
52671: PUSH
52672: LD_INT 36
52674: PUSH
52675: LD_INT 4
52677: PUSH
52678: LD_INT 5
52680: PUSH
52681: LD_INT 31
52683: PUSH
52684: LD_INT 32
52686: PUSH
52687: LD_INT 33
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: IN
52703: NOT
52704: IFFALSE 52716
52706: PUSH
52707: LD_VAR 0 6
52711: PUSH
52712: LD_INT 1
52714: EQUAL
52715: AND
52716: OR
52717: IFTRUE 52749
52719: PUSH
52720: LD_VAR 0 1
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: LD_INT 3
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: IN
52735: NOT
52736: IFFALSE 52748
52738: PUSH
52739: LD_VAR 0 6
52743: PUSH
52744: LD_INT 2
52746: EQUAL
52747: AND
52748: OR
52749: IFFALSE 52759
// mode = 0 ;
52751: LD_ADDR_VAR 0 6
52755: PUSH
52756: LD_INT 0
52758: ST_TO_ADDR
// case mode of 0 :
52759: LD_VAR 0 6
52763: PUSH
52764: LD_INT 0
52766: DOUBLE
52767: EQUAL
52768: IFTRUE 52772
52770: GO 64225
52772: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52773: LD_ADDR_VAR 0 11
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: LD_INT 2
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: LD_INT 2
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: LD_INT 2
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 2
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: LD_INT 3
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 3
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: LD_INT 2
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52966: LD_ADDR_VAR 0 12
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 2
53100: NEG
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 3
53123: NEG
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 3
53134: NEG
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53162: LD_ADDR_VAR 0 13
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 2
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 2
53285: NEG
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 2
53297: NEG
53298: PUSH
53299: LD_INT 2
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: LD_INT 3
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 3
53321: NEG
53322: PUSH
53323: LD_INT 2
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 3
53333: NEG
53334: PUSH
53335: LD_INT 3
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53361: LD_ADDR_VAR 0 14
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 2
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: LD_INT 2
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: LD_INT 2
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: LD_INT 2
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: LD_INT 3
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 3
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: LD_INT 2
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53557: LD_ADDR_VAR 0 15
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 2
53680: NEG
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 2
53691: NEG
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 3
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 3
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53750: LD_ADDR_VAR 0 16
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 2
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 2
53853: PUSH
53854: LD_INT 2
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: LD_INT 2
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 2
53873: NEG
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 2
53885: NEG
53886: PUSH
53887: LD_INT 2
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 3
53897: PUSH
53898: LD_INT 2
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 3
53907: PUSH
53908: LD_INT 3
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: LD_INT 3
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53943: LD_ADDR_VAR 0 17
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 1
54001: NEG
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: LD_INT 2
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: LD_INT 2
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 1
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 2
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 2
54068: PUSH
54069: LD_INT 1
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 2
54078: PUSH
54079: LD_INT 2
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: LD_INT 2
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 2
54119: NEG
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 2
54130: NEG
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 2
54142: NEG
54143: PUSH
54144: LD_INT 2
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54173: LD_ADDR_VAR 0 18
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 2
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 2
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: LD_INT 2
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: LD_INT 2
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 2
54349: NEG
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 2
54360: NEG
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 2
54372: NEG
54373: PUSH
54374: LD_INT 2
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54403: LD_ADDR_VAR 0 19
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 1
54472: NEG
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: LD_INT 2
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: LD_INT 2
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: LD_INT 2
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: LD_INT 2
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 2
54579: NEG
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 2
54590: NEG
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 2
54602: NEG
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54633: LD_ADDR_VAR 0 20
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: LD_INT 2
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: LD_INT 2
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 2
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 2
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 2
54768: PUSH
54769: LD_INT 2
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: NEG
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: NEG
54833: PUSH
54834: LD_INT 2
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54863: LD_ADDR_VAR 0 21
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: LD_INT 2
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 2
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: LD_INT 2
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 2
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 2
55039: NEG
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 2
55050: NEG
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55093: LD_ADDR_VAR 0 22
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 1
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: LD_INT 2
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 2
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 1
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 2
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 2
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 2
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: LD_INT 2
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: LD_INT 2
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: LD_INT 1
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 2
55269: NEG
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 2
55280: NEG
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 2
55292: NEG
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55323: LD_ADDR_VAR 0 23
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 1
55392: NEG
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: LD_INT 2
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: LD_INT 2
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 2
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 2
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: LD_INT 2
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: NEG
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: NEG
55523: PUSH
55524: LD_INT 2
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 2
55534: NEG
55535: PUSH
55536: LD_INT 3
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: LD_INT 3
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: LD_INT 2
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 2
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55603: LD_ADDR_VAR 0 24
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: LD_INT 1
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: LD_INT 2
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: LD_INT 2
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 2
55802: NEG
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: LD_INT 2
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 2
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 3
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 3
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55879: LD_ADDR_VAR 0 25
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: LD_INT 0
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 2
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 2
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 2
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 2
56014: PUSH
56015: LD_INT 2
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: LD_INT 2
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 2
56055: NEG
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 2
56066: NEG
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 2
56078: NEG
56079: PUSH
56080: LD_INT 2
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 3
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 3
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 2
56110: PUSH
56111: LD_INT 3
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: LD_INT 3
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56153: LD_ADDR_VAR 0 26
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: LD_INT 2
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 2
56278: PUSH
56279: LD_INT 1
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 2
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 2
56329: NEG
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 2
56352: NEG
56353: PUSH
56354: LD_INT 2
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: LD_INT 3
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: LD_INT 3
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: LD_INT 2
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 2
56395: NEG
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56429: LD_ADDR_VAR 0 27
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: NEG
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: LD_INT 2
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 2
56564: PUSH
56565: LD_INT 2
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: LD_INT 2
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: LD_INT 2
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 2
56616: NEG
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: LD_INT 2
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 2
56651: NEG
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 3
56662: NEG
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 3
56674: NEG
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56709: LD_ADDR_VAR 0 28
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: LD_INT 2
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: LD_INT 2
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 2
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 2
56844: PUSH
56845: LD_INT 2
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: LD_INT 2
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: LD_INT 2
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 1
56874: NEG
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 2
56885: NEG
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 2
56896: NEG
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: LD_INT 2
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: LD_INT 3
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 3
56944: NEG
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 3
56956: NEG
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56991: LD_ADDR_VAR 0 29
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: LD_INT 1
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: NEG
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: LD_INT 2
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: LD_INT 2
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 2
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 2
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: LD_INT 2
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: LD_INT 2
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 2
57157: NEG
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 2
57169: NEG
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: LD_INT 3
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 3
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: LD_INT 3
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 1
57224: NEG
57225: PUSH
57226: LD_INT 2
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 3
57235: NEG
57236: PUSH
57237: LD_INT 2
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57270: LD_ADDR_VAR 0 30
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 1
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 1
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: LD_INT 2
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: LD_INT 2
57366: NEG
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 2
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 2
57395: PUSH
57396: LD_INT 1
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 2
57405: PUSH
57406: LD_INT 2
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: LD_INT 2
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: NEG
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 2
57436: NEG
57437: PUSH
57438: LD_INT 0
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 2
57447: NEG
57448: PUSH
57449: LD_INT 1
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: LD_INT 3
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: PUSH
57472: LD_INT 2
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 3
57482: PUSH
57483: LD_INT 2
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 2
57492: PUSH
57493: LD_INT 3
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 2
57502: NEG
57503: PUSH
57504: LD_INT 1
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 3
57513: NEG
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57548: LD_ADDR_VAR 0 31
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: LD_INT 1
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 1
57617: NEG
57618: PUSH
57619: LD_INT 1
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: LD_INT 2
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 2
57662: PUSH
57663: LD_INT 1
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 2
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: LD_INT 2
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 2
57713: NEG
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: LD_INT 2
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 2
57737: NEG
57738: PUSH
57739: LD_INT 3
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 2
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 3
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: LD_INT 3
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: LD_INT 2
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 3
57791: NEG
57792: PUSH
57793: LD_INT 2
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57826: LD_ADDR_VAR 0 32
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: LD_INT 1
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: LD_INT 2
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 2
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 2
57951: PUSH
57952: LD_INT 2
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: LD_INT 2
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: LD_INT 2
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 2
57992: NEG
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PUSH
58005: LD_INT 1
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: LD_INT 3
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 2
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 3
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 2
58048: PUSH
58049: LD_INT 3
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 2
58058: NEG
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 3
58069: NEG
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58104: LD_ADDR_VAR 0 33
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 1
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 1
58162: NEG
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: LD_INT 1
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 1
58185: NEG
58186: PUSH
58187: LD_INT 2
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 2
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 2
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: LD_INT 2
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: LD_INT 2
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 2
58259: NEG
58260: PUSH
58261: LD_INT 0
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 2
58270: NEG
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 2
58282: NEG
58283: PUSH
58284: LD_INT 2
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 2
58294: NEG
58295: PUSH
58296: LD_INT 3
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 3
58317: PUSH
58318: LD_INT 1
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: LD_INT 3
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: NEG
58338: PUSH
58339: LD_INT 2
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 3
58348: NEG
58349: PUSH
58350: LD_INT 2
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58383: LD_ADDR_VAR 0 34
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: LD_INT 1
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: NEG
58465: PUSH
58466: LD_INT 2
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: LD_INT 2
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: LD_INT 1
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 2
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 2
58508: PUSH
58509: LD_INT 2
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: LD_INT 2
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 2
58539: NEG
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 2
58562: NEG
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: LD_INT 3
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: LD_INT 2
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 3
58597: PUSH
58598: LD_INT 2
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 2
58607: PUSH
58608: LD_INT 3
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 2
58617: NEG
58618: PUSH
58619: LD_INT 1
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 3
58628: NEG
58629: PUSH
58630: LD_INT 1
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58663: LD_ADDR_VAR 0 35
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 2
58754: NEG
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58775: LD_ADDR_VAR 0 36
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 1
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 1
58833: NEG
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: LD_INT 1
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: NEG
58857: PUSH
58858: LD_INT 2
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58887: LD_ADDR_VAR 0 37
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: LD_INT 1
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: LD_INT 1
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58999: LD_ADDR_VAR 0 38
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: LD_INT 0
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: LD_INT 1
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 1
59068: NEG
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 2
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 2
59090: NEG
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59111: LD_ADDR_VAR 0 39
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: LD_INT 1
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: LD_INT 2
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: LD_INT 2
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59223: LD_ADDR_VAR 0 40
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: LD_INT 1
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 1
59304: PUSH
59305: LD_INT 1
59307: NEG
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59335: LD_ADDR_VAR 0 41
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: LD_INT 0
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: LD_INT 1
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 1
59393: NEG
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: LD_INT 1
59408: NEG
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: LD_INT 2
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: LD_INT 1
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 2
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 2
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 2
59459: PUSH
59460: LD_INT 2
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: LD_INT 2
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 1
59479: NEG
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 2
59490: NEG
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 2
59501: NEG
59502: PUSH
59503: LD_INT 1
59505: NEG
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 2
59513: NEG
59514: PUSH
59515: LD_INT 2
59517: NEG
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 2
59525: NEG
59526: PUSH
59527: LD_INT 3
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 2
59537: PUSH
59538: LD_INT 1
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 3
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 3
59558: PUSH
59559: LD_INT 1
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 3
59568: PUSH
59569: LD_INT 2
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 3
59578: PUSH
59579: LD_INT 3
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 2
59588: PUSH
59589: LD_INT 3
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: LD_INT 1
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 3
59609: NEG
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 3
59620: NEG
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 3
59632: NEG
59633: PUSH
59634: LD_INT 2
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 3
59644: NEG
59645: PUSH
59646: LD_INT 3
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59685: LD_ADDR_VAR 0 42
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 1
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 1
59743: NEG
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: LD_INT 2
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 0
59778: PUSH
59779: LD_INT 2
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 2
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: PUSH
59821: LD_INT 2
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: LD_INT 2
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 2
59851: NEG
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 2
59863: NEG
59864: PUSH
59865: LD_INT 2
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 2
59875: NEG
59876: PUSH
59877: LD_INT 3
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: NEG
59888: PUSH
59889: LD_INT 3
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: LD_INT 3
59902: NEG
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: LD_INT 2
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 3
59921: PUSH
59922: LD_INT 2
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 3
59931: PUSH
59932: LD_INT 3
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 2
59941: PUSH
59942: LD_INT 3
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: LD_INT 3
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 0
59961: PUSH
59962: LD_INT 3
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: LD_INT 2
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 3
59982: NEG
59983: PUSH
59984: LD_INT 2
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 3
59994: NEG
59995: PUSH
59996: LD_INT 3
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60035: LD_ADDR_VAR 0 43
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: LD_INT 0
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: PUSH
60064: LD_INT 0
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: LD_INT 2
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: LD_INT 2
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 1
60139: PUSH
60140: LD_INT 1
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 2
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 2
60160: PUSH
60161: LD_INT 1
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: LD_INT 2
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: LD_INT 2
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 2
60201: NEG
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: NEG
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: LD_INT 3
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: LD_INT 3
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: LD_INT 2
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 2
60258: PUSH
60259: LD_INT 1
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 3
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 3
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: LD_INT 3
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: LD_INT 3
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: LD_INT 2
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 2
60320: NEG
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 3
60331: NEG
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 3
60342: NEG
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60383: LD_ADDR_VAR 0 44
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: LD_INT 1
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 1
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 1
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: LD_INT 1
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: NEG
60453: PUSH
60454: LD_INT 1
60456: NEG
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: LD_INT 2
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 2
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 2
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: LD_INT 2
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: NEG
60528: PUSH
60529: LD_INT 1
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 2
60538: NEG
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 2
60549: NEG
60550: PUSH
60551: LD_INT 1
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 2
60561: NEG
60562: PUSH
60563: LD_INT 2
60565: NEG
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: NEG
60574: PUSH
60575: LD_INT 3
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 2
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 3
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 3
60606: PUSH
60607: LD_INT 1
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 3
60616: PUSH
60617: LD_INT 2
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 3
60626: PUSH
60627: LD_INT 3
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 2
60636: PUSH
60637: LD_INT 3
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 3
60657: NEG
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 3
60668: NEG
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 3
60680: NEG
60681: PUSH
60682: LD_INT 2
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 3
60692: NEG
60693: PUSH
60694: LD_INT 3
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60733: LD_ADDR_VAR 0 45
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: LD_INT 1
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: LD_INT 1
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: LD_INT 1
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: LD_INT 2
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: LD_INT 2
60829: NEG
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 1
60837: PUSH
60838: LD_INT 1
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 2
60848: PUSH
60849: LD_INT 1
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 2
60858: PUSH
60859: LD_INT 2
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 1
60868: PUSH
60869: LD_INT 2
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: LD_INT 2
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: LD_INT 1
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 2
60899: NEG
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 2
60911: NEG
60912: PUSH
60913: LD_INT 2
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 2
60923: NEG
60924: PUSH
60925: LD_INT 3
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: LD_INT 3
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: LD_INT 3
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 1
60958: PUSH
60959: LD_INT 2
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 3
60969: PUSH
60970: LD_INT 2
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 3
60979: PUSH
60980: LD_INT 3
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 2
60989: PUSH
60990: LD_INT 3
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: LD_INT 3
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: LD_INT 3
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 1
61019: NEG
61020: PUSH
61021: LD_INT 2
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 3
61030: NEG
61031: PUSH
61032: LD_INT 2
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 3
61042: NEG
61043: PUSH
61044: LD_INT 3
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61083: LD_ADDR_VAR 0 46
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: LD_INT 1
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 1
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: PUSH
61122: LD_INT 1
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: LD_INT 1
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: LD_INT 0
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: LD_INT 1
61156: NEG
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: LD_INT 2
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: LD_INT 2
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 2
61198: PUSH
61199: LD_INT 0
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 2
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: LD_INT 2
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: LD_INT 2
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: LD_INT 1
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 2
61249: NEG
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 2
61260: NEG
61261: PUSH
61262: LD_INT 1
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: PUSH
61274: LD_INT 3
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: LD_INT 3
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 1
61295: PUSH
61296: LD_INT 2
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 2
61306: PUSH
61307: LD_INT 1
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 3
61317: PUSH
61318: LD_INT 0
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 3
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 1
61337: PUSH
61338: LD_INT 3
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: LD_INT 3
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: NEG
61358: PUSH
61359: LD_INT 2
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 2
61368: NEG
61369: PUSH
61370: LD_INT 1
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 3
61379: NEG
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 3
61390: NEG
61391: PUSH
61392: LD_INT 1
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61431: LD_ADDR_VAR 0 47
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 1
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 1
61489: NEG
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: LD_INT 1
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: LD_INT 2
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: LD_INT 2
61527: NEG
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 1
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 2
61546: NEG
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 2
61558: NEG
61559: PUSH
61560: LD_INT 2
61562: NEG
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61582: LD_ADDR_VAR 0 48
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: LD_INT 1
61602: NEG
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 1
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: LD_INT 1
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: LD_INT 1
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: NEG
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 1
61651: NEG
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 1
61663: NEG
61664: PUSH
61665: LD_INT 2
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: LD_INT 2
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: LD_INT 1
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 2
61697: PUSH
61698: LD_INT 0
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 2
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61729: LD_ADDR_VAR 0 49
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: LD_INT 1
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 1
61757: PUSH
61758: LD_INT 0
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 1
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: LD_INT 0
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 1
61798: NEG
61799: PUSH
61800: LD_INT 1
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: PUSH
61811: LD_INT 1
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 2
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 2
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 2
61841: PUSH
61842: LD_INT 2
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: LD_INT 2
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61873: LD_ADDR_VAR 0 50
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: LD_INT 0
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 1
61911: PUSH
61912: LD_INT 1
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 1
61931: NEG
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: LD_INT 1
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 2
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 2
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: LD_INT 2
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 0
61984: PUSH
61985: LD_INT 2
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62017: LD_ADDR_VAR 0 51
62021: PUSH
62022: LD_INT 0
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: NEG
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: PUSH
62099: LD_INT 2
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: LD_INT 2
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: LD_INT 1
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 2
62129: NEG
62130: PUSH
62131: LD_INT 0
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 2
62140: NEG
62141: PUSH
62142: LD_INT 1
62144: NEG
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62164: LD_ADDR_VAR 0 52
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: LD_INT 0
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: LD_INT 1
62184: NEG
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: LD_INT 0
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: PUSH
62203: LD_INT 1
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: LD_INT 1
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 1
62222: NEG
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: NEG
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: NEG
62246: PUSH
62247: LD_INT 2
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 2
62268: NEG
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 2
62279: NEG
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 2
62291: NEG
62292: PUSH
62293: LD_INT 2
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62315: LD_ADDR_VAR 0 53
62319: PUSH
62320: LD_INT 0
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: LD_INT 1
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 1
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 1
62353: PUSH
62354: LD_INT 1
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: LD_INT 1
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 1
62373: NEG
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 1
62384: NEG
62385: PUSH
62386: LD_INT 1
62388: NEG
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: LD_INT 2
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 0
62408: PUSH
62409: LD_INT 2
62411: NEG
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 2
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 2
62440: PUSH
62441: LD_INT 1
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 2
62450: PUSH
62451: LD_INT 2
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: PUSH
62461: LD_INT 2
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 0
62470: PUSH
62471: LD_INT 2
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 1
62480: NEG
62481: PUSH
62482: LD_INT 1
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 2
62491: NEG
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 2
62502: NEG
62503: PUSH
62504: LD_INT 1
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 2
62514: NEG
62515: PUSH
62516: LD_INT 2
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62545: LD_ADDR_VAR 0 54
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: LD_INT 0
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: LD_INT 1
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 1
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 1
62603: NEG
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 1
62614: NEG
62615: PUSH
62616: LD_INT 1
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 1
62626: NEG
62627: PUSH
62628: LD_INT 2
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 0
62638: PUSH
62639: LD_INT 2
62641: NEG
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 1
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 2
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: LD_INT 1
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 2
62680: PUSH
62681: LD_INT 2
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: LD_INT 2
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: LD_INT 2
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: NEG
62711: PUSH
62712: LD_INT 1
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 2
62721: NEG
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 2
62732: NEG
62733: PUSH
62734: LD_INT 1
62736: NEG
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 2
62744: NEG
62745: PUSH
62746: LD_INT 2
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62775: LD_ADDR_VAR 0 55
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: LD_INT 0
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: LD_INT 1
62795: NEG
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 1
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 1
62813: PUSH
62814: LD_INT 1
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 0
62823: PUSH
62824: LD_INT 1
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 1
62833: NEG
62834: PUSH
62835: LD_INT 0
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 1
62844: NEG
62845: PUSH
62846: LD_INT 1
62848: NEG
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: LD_INT 2
62860: NEG
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 0
62868: PUSH
62869: LD_INT 2
62871: NEG
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 1
62879: PUSH
62880: LD_INT 1
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 2
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 2
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 2
62910: PUSH
62911: LD_INT 2
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 1
62920: PUSH
62921: LD_INT 2
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 0
62930: PUSH
62931: LD_INT 2
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: PUSH
62942: LD_INT 1
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 2
62951: NEG
62952: PUSH
62953: LD_INT 0
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 2
62962: NEG
62963: PUSH
62964: LD_INT 1
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 2
62974: NEG
62975: PUSH
62976: LD_INT 2
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63005: LD_ADDR_VAR 0 56
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: LD_INT 1
63025: NEG
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 1
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 1
63043: PUSH
63044: LD_INT 1
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: LD_INT 1
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 1
63063: NEG
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: NEG
63075: PUSH
63076: LD_INT 1
63078: NEG
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 1
63086: NEG
63087: PUSH
63088: LD_INT 2
63090: NEG
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: LD_INT 2
63101: NEG
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: LD_INT 1
63112: NEG
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 2
63120: PUSH
63121: LD_INT 0
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 2
63130: PUSH
63131: LD_INT 1
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 2
63140: PUSH
63141: LD_INT 2
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: LD_INT 2
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 0
63160: PUSH
63161: LD_INT 2
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 1
63170: NEG
63171: PUSH
63172: LD_INT 1
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 2
63181: NEG
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 2
63192: NEG
63193: PUSH
63194: LD_INT 1
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 2
63204: NEG
63205: PUSH
63206: LD_INT 2
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63235: LD_ADDR_VAR 0 57
63239: PUSH
63240: LD_INT 0
63242: PUSH
63243: LD_INT 0
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: LD_INT 1
63255: NEG
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: LD_INT 0
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 1
63273: PUSH
63274: LD_INT 1
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: LD_INT 1
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 1
63293: NEG
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 1
63304: NEG
63305: PUSH
63306: LD_INT 1
63308: NEG
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 1
63316: NEG
63317: PUSH
63318: LD_INT 2
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 0
63328: PUSH
63329: LD_INT 2
63331: NEG
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 1
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 2
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 2
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 2
63370: PUSH
63371: LD_INT 2
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: LD_INT 2
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 0
63390: PUSH
63391: LD_INT 2
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 1
63400: NEG
63401: PUSH
63402: LD_INT 1
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 2
63411: NEG
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 2
63422: NEG
63423: PUSH
63424: LD_INT 1
63426: NEG
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 2
63434: NEG
63435: PUSH
63436: LD_INT 2
63438: NEG
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63465: LD_ADDR_VAR 0 58
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: LD_INT 0
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: LD_INT 1
63485: NEG
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 1
63493: PUSH
63494: LD_INT 0
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 1
63503: PUSH
63504: LD_INT 1
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: LD_INT 1
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 1
63523: NEG
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 1
63534: NEG
63535: PUSH
63536: LD_INT 1
63538: NEG
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 1
63546: NEG
63547: PUSH
63548: LD_INT 2
63550: NEG
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: LD_INT 2
63561: NEG
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: LD_INT 1
63572: NEG
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 2
63580: PUSH
63581: LD_INT 0
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 2
63590: PUSH
63591: LD_INT 1
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 2
63600: PUSH
63601: LD_INT 2
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 1
63610: PUSH
63611: LD_INT 2
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 0
63620: PUSH
63621: LD_INT 2
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 1
63630: NEG
63631: PUSH
63632: LD_INT 1
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 2
63641: NEG
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 2
63652: NEG
63653: PUSH
63654: LD_INT 1
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 2
63664: NEG
63665: PUSH
63666: LD_INT 2
63668: NEG
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63695: LD_ADDR_VAR 0 59
63699: PUSH
63700: LD_INT 0
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 0
63712: PUSH
63713: LD_INT 1
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 1
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: LD_INT 1
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 0
63743: PUSH
63744: LD_INT 1
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 1
63753: NEG
63754: PUSH
63755: LD_INT 0
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 1
63764: NEG
63765: PUSH
63766: LD_INT 1
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63783: LD_ADDR_VAR 0 60
63787: PUSH
63788: LD_INT 0
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 0
63800: PUSH
63801: LD_INT 1
63803: NEG
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: LD_INT 0
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 1
63821: PUSH
63822: LD_INT 1
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 0
63831: PUSH
63832: LD_INT 1
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 1
63841: NEG
63842: PUSH
63843: LD_INT 0
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 1
63852: NEG
63853: PUSH
63854: LD_INT 1
63856: NEG
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63871: LD_ADDR_VAR 0 61
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 0
63888: PUSH
63889: LD_INT 1
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 1
63899: PUSH
63900: LD_INT 0
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 1
63909: PUSH
63910: LD_INT 1
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 0
63919: PUSH
63920: LD_INT 1
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 1
63929: NEG
63930: PUSH
63931: LD_INT 0
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 1
63940: NEG
63941: PUSH
63942: LD_INT 1
63944: NEG
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63959: LD_ADDR_VAR 0 62
63963: PUSH
63964: LD_INT 0
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: LD_INT 1
63979: NEG
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 1
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 0
64007: PUSH
64008: LD_INT 1
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 1
64017: NEG
64018: PUSH
64019: LD_INT 0
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 1
64028: NEG
64029: PUSH
64030: LD_INT 1
64032: NEG
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64047: LD_ADDR_VAR 0 63
64051: PUSH
64052: LD_INT 0
64054: PUSH
64055: LD_INT 0
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: LD_INT 1
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 1
64075: PUSH
64076: LD_INT 0
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 1
64085: PUSH
64086: LD_INT 1
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 0
64095: PUSH
64096: LD_INT 1
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 1
64105: NEG
64106: PUSH
64107: LD_INT 0
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 1
64116: NEG
64117: PUSH
64118: LD_INT 1
64120: NEG
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64135: LD_ADDR_VAR 0 64
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: LD_INT 0
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 0
64152: PUSH
64153: LD_INT 1
64155: NEG
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 1
64163: PUSH
64164: LD_INT 0
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 1
64173: PUSH
64174: LD_INT 1
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: LD_INT 1
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 1
64193: NEG
64194: PUSH
64195: LD_INT 0
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 1
64204: NEG
64205: PUSH
64206: LD_INT 1
64208: NEG
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: ST_TO_ADDR
// end ; 1 :
64223: GO 70120
64225: LD_INT 1
64227: DOUBLE
64228: EQUAL
64229: IFTRUE 64233
64231: GO 66856
64233: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64234: LD_ADDR_VAR 0 11
64238: PUSH
64239: LD_INT 1
64241: NEG
64242: PUSH
64243: LD_INT 3
64245: NEG
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 0
64253: PUSH
64254: LD_INT 3
64256: NEG
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 1
64264: PUSH
64265: LD_INT 2
64267: NEG
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: LIST
64277: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64278: LD_ADDR_VAR 0 12
64282: PUSH
64283: LD_INT 2
64285: PUSH
64286: LD_INT 1
64288: NEG
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 3
64296: PUSH
64297: LD_INT 0
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 3
64306: PUSH
64307: LD_INT 1
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: LIST
64318: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64319: LD_ADDR_VAR 0 13
64323: PUSH
64324: LD_INT 3
64326: PUSH
64327: LD_INT 2
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 3
64336: PUSH
64337: LD_INT 3
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 2
64346: PUSH
64347: LD_INT 3
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: LIST
64358: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64359: LD_ADDR_VAR 0 14
64363: PUSH
64364: LD_INT 1
64366: PUSH
64367: LD_INT 3
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 0
64376: PUSH
64377: LD_INT 3
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 1
64386: NEG
64387: PUSH
64388: LD_INT 2
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: LIST
64399: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64400: LD_ADDR_VAR 0 15
64404: PUSH
64405: LD_INT 2
64407: NEG
64408: PUSH
64409: LD_INT 1
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 3
64418: NEG
64419: PUSH
64420: LD_INT 0
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 3
64429: NEG
64430: PUSH
64431: LD_INT 1
64433: NEG
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: LIST
64443: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64444: LD_ADDR_VAR 0 16
64448: PUSH
64449: LD_INT 2
64451: NEG
64452: PUSH
64453: LD_INT 3
64455: NEG
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 3
64463: NEG
64464: PUSH
64465: LD_INT 2
64467: NEG
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 3
64475: NEG
64476: PUSH
64477: LD_INT 3
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: LIST
64489: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64490: LD_ADDR_VAR 0 17
64494: PUSH
64495: LD_INT 1
64497: NEG
64498: PUSH
64499: LD_INT 3
64501: NEG
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 0
64509: PUSH
64510: LD_INT 3
64512: NEG
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 1
64520: PUSH
64521: LD_INT 2
64523: NEG
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: LIST
64533: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64534: LD_ADDR_VAR 0 18
64538: PUSH
64539: LD_INT 2
64541: PUSH
64542: LD_INT 1
64544: NEG
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 3
64552: PUSH
64553: LD_INT 0
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 3
64562: PUSH
64563: LD_INT 1
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: LIST
64574: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64575: LD_ADDR_VAR 0 19
64579: PUSH
64580: LD_INT 3
64582: PUSH
64583: LD_INT 2
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 3
64592: PUSH
64593: LD_INT 3
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 2
64602: PUSH
64603: LD_INT 3
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: LIST
64614: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64615: LD_ADDR_VAR 0 20
64619: PUSH
64620: LD_INT 1
64622: PUSH
64623: LD_INT 3
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 0
64632: PUSH
64633: LD_INT 3
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 1
64642: NEG
64643: PUSH
64644: LD_INT 2
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: LIST
64655: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64656: LD_ADDR_VAR 0 21
64660: PUSH
64661: LD_INT 2
64663: NEG
64664: PUSH
64665: LD_INT 1
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 3
64674: NEG
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 3
64685: NEG
64686: PUSH
64687: LD_INT 1
64689: NEG
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: LIST
64699: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64700: LD_ADDR_VAR 0 22
64704: PUSH
64705: LD_INT 2
64707: NEG
64708: PUSH
64709: LD_INT 3
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 3
64719: NEG
64720: PUSH
64721: LD_INT 2
64723: NEG
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 3
64731: NEG
64732: PUSH
64733: LD_INT 3
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: LIST
64745: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64746: LD_ADDR_VAR 0 23
64750: PUSH
64751: LD_INT 0
64753: PUSH
64754: LD_INT 3
64756: NEG
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 1
64764: NEG
64765: PUSH
64766: LD_INT 4
64768: NEG
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 1
64776: PUSH
64777: LD_INT 3
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: LIST
64789: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64790: LD_ADDR_VAR 0 24
64794: PUSH
64795: LD_INT 3
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 3
64807: PUSH
64808: LD_INT 1
64810: NEG
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 4
64818: PUSH
64819: LD_INT 1
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: LIST
64830: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64831: LD_ADDR_VAR 0 25
64835: PUSH
64836: LD_INT 3
64838: PUSH
64839: LD_INT 3
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 4
64848: PUSH
64849: LD_INT 3
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 3
64858: PUSH
64859: LD_INT 4
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: LIST
64870: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64871: LD_ADDR_VAR 0 26
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: LD_INT 3
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 1
64888: PUSH
64889: LD_INT 4
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 1
64898: NEG
64899: PUSH
64900: LD_INT 3
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: LIST
64911: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64912: LD_ADDR_VAR 0 27
64916: PUSH
64917: LD_INT 3
64919: NEG
64920: PUSH
64921: LD_INT 0
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 3
64930: NEG
64931: PUSH
64932: LD_INT 1
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 4
64941: NEG
64942: PUSH
64943: LD_INT 1
64945: NEG
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: LIST
64955: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64956: LD_ADDR_VAR 0 28
64960: PUSH
64961: LD_INT 3
64963: NEG
64964: PUSH
64965: LD_INT 3
64967: NEG
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 3
64975: NEG
64976: PUSH
64977: LD_INT 4
64979: NEG
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 4
64987: NEG
64988: PUSH
64989: LD_INT 3
64991: NEG
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: LIST
65001: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65002: LD_ADDR_VAR 0 29
65006: PUSH
65007: LD_INT 1
65009: NEG
65010: PUSH
65011: LD_INT 3
65013: NEG
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: LD_INT 3
65024: NEG
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 1
65032: PUSH
65033: LD_INT 2
65035: NEG
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 1
65043: NEG
65044: PUSH
65045: LD_INT 4
65047: NEG
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 0
65055: PUSH
65056: LD_INT 4
65058: NEG
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 1
65066: PUSH
65067: LD_INT 3
65069: NEG
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 1
65077: NEG
65078: PUSH
65079: LD_INT 5
65081: NEG
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 0
65089: PUSH
65090: LD_INT 5
65092: NEG
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 1
65100: PUSH
65101: LD_INT 4
65103: NEG
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 1
65111: NEG
65112: PUSH
65113: LD_INT 6
65115: NEG
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 0
65123: PUSH
65124: LD_INT 6
65126: NEG
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 1
65134: PUSH
65135: LD_INT 5
65137: NEG
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65157: LD_ADDR_VAR 0 30
65161: PUSH
65162: LD_INT 2
65164: PUSH
65165: LD_INT 1
65167: NEG
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 3
65175: PUSH
65176: LD_INT 0
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 3
65185: PUSH
65186: LD_INT 1
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 3
65195: PUSH
65196: LD_INT 1
65198: NEG
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 4
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 4
65216: PUSH
65217: LD_INT 1
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 4
65226: PUSH
65227: LD_INT 1
65229: NEG
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 5
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 5
65247: PUSH
65248: LD_INT 1
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 5
65257: PUSH
65258: LD_INT 1
65260: NEG
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 6
65268: PUSH
65269: LD_INT 0
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 6
65278: PUSH
65279: LD_INT 1
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65300: LD_ADDR_VAR 0 31
65304: PUSH
65305: LD_INT 3
65307: PUSH
65308: LD_INT 2
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 3
65317: PUSH
65318: LD_INT 3
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 2
65327: PUSH
65328: LD_INT 3
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 4
65337: PUSH
65338: LD_INT 3
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 4
65347: PUSH
65348: LD_INT 4
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 3
65357: PUSH
65358: LD_INT 4
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 5
65367: PUSH
65368: LD_INT 4
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 5
65377: PUSH
65378: LD_INT 5
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 4
65387: PUSH
65388: LD_INT 5
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 6
65397: PUSH
65398: LD_INT 5
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 6
65407: PUSH
65408: LD_INT 6
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 5
65417: PUSH
65418: LD_INT 6
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65439: LD_ADDR_VAR 0 32
65443: PUSH
65444: LD_INT 1
65446: PUSH
65447: LD_INT 3
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 0
65456: PUSH
65457: LD_INT 3
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 1
65466: NEG
65467: PUSH
65468: LD_INT 2
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 1
65477: PUSH
65478: LD_INT 4
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 0
65487: PUSH
65488: LD_INT 4
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 1
65497: NEG
65498: PUSH
65499: LD_INT 3
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 1
65508: PUSH
65509: LD_INT 5
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 0
65518: PUSH
65519: LD_INT 5
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 1
65528: NEG
65529: PUSH
65530: LD_INT 4
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 1
65539: PUSH
65540: LD_INT 6
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 0
65549: PUSH
65550: LD_INT 6
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 1
65559: NEG
65560: PUSH
65561: LD_INT 5
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65582: LD_ADDR_VAR 0 33
65586: PUSH
65587: LD_INT 2
65589: NEG
65590: PUSH
65591: LD_INT 1
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 3
65600: NEG
65601: PUSH
65602: LD_INT 0
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 3
65611: NEG
65612: PUSH
65613: LD_INT 1
65615: NEG
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 3
65623: NEG
65624: PUSH
65625: LD_INT 1
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 4
65634: NEG
65635: PUSH
65636: LD_INT 0
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 4
65645: NEG
65646: PUSH
65647: LD_INT 1
65649: NEG
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 4
65657: NEG
65658: PUSH
65659: LD_INT 1
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 5
65668: NEG
65669: PUSH
65670: LD_INT 0
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 5
65679: NEG
65680: PUSH
65681: LD_INT 1
65683: NEG
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 5
65691: NEG
65692: PUSH
65693: LD_INT 1
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 6
65702: NEG
65703: PUSH
65704: LD_INT 0
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 6
65713: NEG
65714: PUSH
65715: LD_INT 1
65717: NEG
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65737: LD_ADDR_VAR 0 34
65741: PUSH
65742: LD_INT 2
65744: NEG
65745: PUSH
65746: LD_INT 3
65748: NEG
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 3
65756: NEG
65757: PUSH
65758: LD_INT 2
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 3
65768: NEG
65769: PUSH
65770: LD_INT 3
65772: NEG
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 3
65780: NEG
65781: PUSH
65782: LD_INT 4
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 4
65792: NEG
65793: PUSH
65794: LD_INT 3
65796: NEG
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 4
65804: NEG
65805: PUSH
65806: LD_INT 4
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 4
65816: NEG
65817: PUSH
65818: LD_INT 5
65820: NEG
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 5
65828: NEG
65829: PUSH
65830: LD_INT 4
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 5
65840: NEG
65841: PUSH
65842: LD_INT 5
65844: NEG
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 5
65852: NEG
65853: PUSH
65854: LD_INT 6
65856: NEG
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 6
65864: NEG
65865: PUSH
65866: LD_INT 5
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 6
65876: NEG
65877: PUSH
65878: LD_INT 6
65880: NEG
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65900: LD_ADDR_VAR 0 41
65904: PUSH
65905: LD_INT 0
65907: PUSH
65908: LD_INT 2
65910: NEG
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 1
65918: NEG
65919: PUSH
65920: LD_INT 3
65922: NEG
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 1
65930: PUSH
65931: LD_INT 2
65933: NEG
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: LIST
65943: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65944: LD_ADDR_VAR 0 42
65948: PUSH
65949: LD_INT 2
65951: PUSH
65952: LD_INT 0
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 2
65961: PUSH
65962: LD_INT 1
65964: NEG
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 3
65972: PUSH
65973: LD_INT 1
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: LIST
65984: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65985: LD_ADDR_VAR 0 43
65989: PUSH
65990: LD_INT 2
65992: PUSH
65993: LD_INT 2
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 3
66002: PUSH
66003: LD_INT 2
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 2
66012: PUSH
66013: LD_INT 3
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: LIST
66024: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66025: LD_ADDR_VAR 0 44
66029: PUSH
66030: LD_INT 0
66032: PUSH
66033: LD_INT 2
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 1
66042: PUSH
66043: LD_INT 3
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 1
66052: NEG
66053: PUSH
66054: LD_INT 2
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: LIST
66065: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66066: LD_ADDR_VAR 0 45
66070: PUSH
66071: LD_INT 2
66073: NEG
66074: PUSH
66075: LD_INT 0
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 2
66084: NEG
66085: PUSH
66086: LD_INT 1
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 3
66095: NEG
66096: PUSH
66097: LD_INT 1
66099: NEG
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: LIST
66109: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66110: LD_ADDR_VAR 0 46
66114: PUSH
66115: LD_INT 2
66117: NEG
66118: PUSH
66119: LD_INT 2
66121: NEG
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 2
66129: NEG
66130: PUSH
66131: LD_INT 3
66133: NEG
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 3
66141: NEG
66142: PUSH
66143: LD_INT 2
66145: NEG
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: LIST
66155: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66156: LD_ADDR_VAR 0 47
66160: PUSH
66161: LD_INT 2
66163: NEG
66164: PUSH
66165: LD_INT 3
66167: NEG
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 1
66175: NEG
66176: PUSH
66177: LD_INT 3
66179: NEG
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66189: LD_ADDR_VAR 0 48
66193: PUSH
66194: LD_INT 1
66196: PUSH
66197: LD_INT 2
66199: NEG
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 2
66207: PUSH
66208: LD_INT 1
66210: NEG
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66220: LD_ADDR_VAR 0 49
66224: PUSH
66225: LD_INT 3
66227: PUSH
66228: LD_INT 1
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 3
66237: PUSH
66238: LD_INT 2
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66249: LD_ADDR_VAR 0 50
66253: PUSH
66254: LD_INT 2
66256: PUSH
66257: LD_INT 3
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 1
66266: PUSH
66267: LD_INT 3
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66278: LD_ADDR_VAR 0 51
66282: PUSH
66283: LD_INT 1
66285: NEG
66286: PUSH
66287: LD_INT 2
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 2
66296: NEG
66297: PUSH
66298: LD_INT 1
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66309: LD_ADDR_VAR 0 52
66313: PUSH
66314: LD_INT 3
66316: NEG
66317: PUSH
66318: LD_INT 1
66320: NEG
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 3
66328: NEG
66329: PUSH
66330: LD_INT 2
66332: NEG
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66342: LD_ADDR_VAR 0 53
66346: PUSH
66347: LD_INT 1
66349: NEG
66350: PUSH
66351: LD_INT 3
66353: NEG
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 0
66361: PUSH
66362: LD_INT 3
66364: NEG
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 1
66372: PUSH
66373: LD_INT 2
66375: NEG
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: LIST
66385: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66386: LD_ADDR_VAR 0 54
66390: PUSH
66391: LD_INT 2
66393: PUSH
66394: LD_INT 1
66396: NEG
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 3
66404: PUSH
66405: LD_INT 0
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 3
66414: PUSH
66415: LD_INT 1
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: LIST
66426: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66427: LD_ADDR_VAR 0 55
66431: PUSH
66432: LD_INT 3
66434: PUSH
66435: LD_INT 2
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 3
66444: PUSH
66445: LD_INT 3
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 2
66454: PUSH
66455: LD_INT 3
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: LIST
66466: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66467: LD_ADDR_VAR 0 56
66471: PUSH
66472: LD_INT 1
66474: PUSH
66475: LD_INT 3
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 0
66484: PUSH
66485: LD_INT 3
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 1
66494: NEG
66495: PUSH
66496: LD_INT 2
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: LIST
66507: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66508: LD_ADDR_VAR 0 57
66512: PUSH
66513: LD_INT 2
66515: NEG
66516: PUSH
66517: LD_INT 1
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 3
66526: NEG
66527: PUSH
66528: LD_INT 0
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 3
66537: NEG
66538: PUSH
66539: LD_INT 1
66541: NEG
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: LIST
66551: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66552: LD_ADDR_VAR 0 58
66556: PUSH
66557: LD_INT 2
66559: NEG
66560: PUSH
66561: LD_INT 3
66563: NEG
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 3
66571: NEG
66572: PUSH
66573: LD_INT 2
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 3
66583: NEG
66584: PUSH
66585: LD_INT 3
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: LIST
66597: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66598: LD_ADDR_VAR 0 59
66602: PUSH
66603: LD_INT 1
66605: NEG
66606: PUSH
66607: LD_INT 2
66609: NEG
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 0
66617: PUSH
66618: LD_INT 2
66620: NEG
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 1
66628: PUSH
66629: LD_INT 1
66631: NEG
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: LIST
66641: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66642: LD_ADDR_VAR 0 60
66646: PUSH
66647: LD_INT 1
66649: PUSH
66650: LD_INT 1
66652: NEG
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 2
66660: PUSH
66661: LD_INT 0
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 2
66670: PUSH
66671: LD_INT 1
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: LIST
66682: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66683: LD_ADDR_VAR 0 61
66687: PUSH
66688: LD_INT 2
66690: PUSH
66691: LD_INT 1
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 2
66700: PUSH
66701: LD_INT 2
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 1
66710: PUSH
66711: LD_INT 2
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: LIST
66722: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66723: LD_ADDR_VAR 0 62
66727: PUSH
66728: LD_INT 1
66730: PUSH
66731: LD_INT 2
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 0
66740: PUSH
66741: LD_INT 2
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 1
66750: NEG
66751: PUSH
66752: LD_INT 1
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: LIST
66763: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66764: LD_ADDR_VAR 0 63
66768: PUSH
66769: LD_INT 1
66771: NEG
66772: PUSH
66773: LD_INT 1
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 2
66782: NEG
66783: PUSH
66784: LD_INT 0
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 2
66793: NEG
66794: PUSH
66795: LD_INT 1
66797: NEG
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: LIST
66807: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66808: LD_ADDR_VAR 0 64
66812: PUSH
66813: LD_INT 1
66815: NEG
66816: PUSH
66817: LD_INT 2
66819: NEG
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 2
66827: NEG
66828: PUSH
66829: LD_INT 1
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 2
66839: NEG
66840: PUSH
66841: LD_INT 2
66843: NEG
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: LIST
66853: ST_TO_ADDR
// end ; 2 :
66854: GO 70120
66856: LD_INT 2
66858: DOUBLE
66859: EQUAL
66860: IFTRUE 66864
66862: GO 70119
66864: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66865: LD_ADDR_VAR 0 29
66869: PUSH
66870: LD_INT 4
66872: PUSH
66873: LD_INT 0
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 4
66882: PUSH
66883: LD_INT 1
66885: NEG
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 5
66893: PUSH
66894: LD_INT 0
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 5
66903: PUSH
66904: LD_INT 1
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 4
66913: PUSH
66914: LD_INT 1
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 3
66923: PUSH
66924: LD_INT 0
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 3
66933: PUSH
66934: LD_INT 1
66936: NEG
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 3
66944: PUSH
66945: LD_INT 2
66947: NEG
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 5
66955: PUSH
66956: LD_INT 2
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 3
66965: PUSH
66966: LD_INT 3
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 3
66975: PUSH
66976: LD_INT 2
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 4
66985: PUSH
66986: LD_INT 3
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 4
66995: PUSH
66996: LD_INT 4
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 3
67005: PUSH
67006: LD_INT 4
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 2
67015: PUSH
67016: LD_INT 3
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 2
67025: PUSH
67026: LD_INT 2
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 4
67035: PUSH
67036: LD_INT 2
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 2
67045: PUSH
67046: LD_INT 4
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 0
67055: PUSH
67056: LD_INT 4
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 0
67065: PUSH
67066: LD_INT 3
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 1
67075: PUSH
67076: LD_INT 4
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 1
67085: PUSH
67086: LD_INT 5
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 0
67095: PUSH
67096: LD_INT 5
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 1
67105: NEG
67106: PUSH
67107: LD_INT 4
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 1
67116: NEG
67117: PUSH
67118: LD_INT 3
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 2
67127: PUSH
67128: LD_INT 5
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 2
67137: NEG
67138: PUSH
67139: LD_INT 3
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 3
67148: NEG
67149: PUSH
67150: LD_INT 0
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 3
67159: NEG
67160: PUSH
67161: LD_INT 1
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 2
67171: NEG
67172: PUSH
67173: LD_INT 0
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 2
67182: NEG
67183: PUSH
67184: LD_INT 1
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 3
67193: NEG
67194: PUSH
67195: LD_INT 1
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 4
67204: NEG
67205: PUSH
67206: LD_INT 0
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 4
67215: NEG
67216: PUSH
67217: LD_INT 1
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 4
67227: NEG
67228: PUSH
67229: LD_INT 2
67231: NEG
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 2
67239: NEG
67240: PUSH
67241: LD_INT 2
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 4
67250: NEG
67251: PUSH
67252: LD_INT 4
67254: NEG
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 4
67262: NEG
67263: PUSH
67264: LD_INT 5
67266: NEG
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 3
67274: NEG
67275: PUSH
67276: LD_INT 4
67278: NEG
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 3
67286: NEG
67287: PUSH
67288: LD_INT 3
67290: NEG
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 4
67298: NEG
67299: PUSH
67300: LD_INT 3
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 5
67310: NEG
67311: PUSH
67312: LD_INT 4
67314: NEG
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 5
67322: NEG
67323: PUSH
67324: LD_INT 5
67326: NEG
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 3
67334: NEG
67335: PUSH
67336: LD_INT 5
67338: NEG
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 5
67346: NEG
67347: PUSH
67348: LD_INT 3
67350: NEG
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67403: LD_ADDR_VAR 0 30
67407: PUSH
67408: LD_INT 4
67410: PUSH
67411: LD_INT 4
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 4
67420: PUSH
67421: LD_INT 3
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 5
67430: PUSH
67431: LD_INT 4
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 5
67440: PUSH
67441: LD_INT 5
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 4
67450: PUSH
67451: LD_INT 5
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 3
67460: PUSH
67461: LD_INT 4
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 3
67470: PUSH
67471: LD_INT 3
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 5
67480: PUSH
67481: LD_INT 3
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 3
67490: PUSH
67491: LD_INT 5
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 0
67500: PUSH
67501: LD_INT 3
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 0
67510: PUSH
67511: LD_INT 2
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 1
67520: PUSH
67521: LD_INT 3
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 1
67530: PUSH
67531: LD_INT 4
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 0
67540: PUSH
67541: LD_INT 4
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 1
67550: NEG
67551: PUSH
67552: LD_INT 3
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 1
67561: NEG
67562: PUSH
67563: LD_INT 2
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 2
67572: PUSH
67573: LD_INT 4
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 2
67582: NEG
67583: PUSH
67584: LD_INT 2
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 4
67593: NEG
67594: PUSH
67595: LD_INT 0
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 4
67604: NEG
67605: PUSH
67606: LD_INT 1
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 3
67616: NEG
67617: PUSH
67618: LD_INT 0
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 3
67627: NEG
67628: PUSH
67629: LD_INT 1
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 4
67638: NEG
67639: PUSH
67640: LD_INT 1
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 5
67649: NEG
67650: PUSH
67651: LD_INT 0
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 5
67660: NEG
67661: PUSH
67662: LD_INT 1
67664: NEG
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 5
67672: NEG
67673: PUSH
67674: LD_INT 2
67676: NEG
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 3
67684: NEG
67685: PUSH
67686: LD_INT 2
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 3
67695: NEG
67696: PUSH
67697: LD_INT 3
67699: NEG
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 3
67707: NEG
67708: PUSH
67709: LD_INT 4
67711: NEG
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 2
67719: NEG
67720: PUSH
67721: LD_INT 3
67723: NEG
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 2
67731: NEG
67732: PUSH
67733: LD_INT 2
67735: NEG
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 3
67743: NEG
67744: PUSH
67745: LD_INT 2
67747: NEG
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 4
67755: NEG
67756: PUSH
67757: LD_INT 3
67759: NEG
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 4
67767: NEG
67768: PUSH
67769: LD_INT 4
67771: NEG
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 2
67779: NEG
67780: PUSH
67781: LD_INT 4
67783: NEG
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 4
67791: NEG
67792: PUSH
67793: LD_INT 2
67795: NEG
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 0
67803: PUSH
67804: LD_INT 4
67806: NEG
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 0
67814: PUSH
67815: LD_INT 5
67817: NEG
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 1
67825: PUSH
67826: LD_INT 4
67828: NEG
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 1
67836: PUSH
67837: LD_INT 3
67839: NEG
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 0
67847: PUSH
67848: LD_INT 3
67850: NEG
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 1
67858: NEG
67859: PUSH
67860: LD_INT 4
67862: NEG
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 1
67870: NEG
67871: PUSH
67872: LD_INT 5
67874: NEG
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 2
67882: PUSH
67883: LD_INT 3
67885: NEG
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 2
67893: NEG
67894: PUSH
67895: LD_INT 5
67897: NEG
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67950: LD_ADDR_VAR 0 31
67954: PUSH
67955: LD_INT 0
67957: PUSH
67958: LD_INT 4
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 0
67967: PUSH
67968: LD_INT 3
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 1
67977: PUSH
67978: LD_INT 4
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 1
67987: PUSH
67988: LD_INT 5
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 0
67997: PUSH
67998: LD_INT 5
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 1
68007: NEG
68008: PUSH
68009: LD_INT 4
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 1
68018: NEG
68019: PUSH
68020: LD_INT 3
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 2
68029: PUSH
68030: LD_INT 5
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 2
68039: NEG
68040: PUSH
68041: LD_INT 3
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 3
68050: NEG
68051: PUSH
68052: LD_INT 0
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 3
68061: NEG
68062: PUSH
68063: LD_INT 1
68065: NEG
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 2
68073: NEG
68074: PUSH
68075: LD_INT 0
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 2
68084: NEG
68085: PUSH
68086: LD_INT 1
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 3
68095: NEG
68096: PUSH
68097: LD_INT 1
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 4
68106: NEG
68107: PUSH
68108: LD_INT 0
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 4
68117: NEG
68118: PUSH
68119: LD_INT 1
68121: NEG
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 4
68129: NEG
68130: PUSH
68131: LD_INT 2
68133: NEG
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 2
68141: NEG
68142: PUSH
68143: LD_INT 2
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 4
68152: NEG
68153: PUSH
68154: LD_INT 4
68156: NEG
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 4
68164: NEG
68165: PUSH
68166: LD_INT 5
68168: NEG
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 3
68176: NEG
68177: PUSH
68178: LD_INT 4
68180: NEG
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 3
68188: NEG
68189: PUSH
68190: LD_INT 3
68192: NEG
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 4
68200: NEG
68201: PUSH
68202: LD_INT 3
68204: NEG
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 5
68212: NEG
68213: PUSH
68214: LD_INT 4
68216: NEG
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 5
68224: NEG
68225: PUSH
68226: LD_INT 5
68228: NEG
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 3
68236: NEG
68237: PUSH
68238: LD_INT 5
68240: NEG
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 5
68248: NEG
68249: PUSH
68250: LD_INT 3
68252: NEG
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 0
68260: PUSH
68261: LD_INT 3
68263: NEG
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 0
68271: PUSH
68272: LD_INT 4
68274: NEG
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 1
68282: PUSH
68283: LD_INT 3
68285: NEG
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 1
68293: PUSH
68294: LD_INT 2
68296: NEG
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 0
68304: PUSH
68305: LD_INT 2
68307: NEG
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 1
68315: NEG
68316: PUSH
68317: LD_INT 3
68319: NEG
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 1
68327: NEG
68328: PUSH
68329: LD_INT 4
68331: NEG
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 2
68339: PUSH
68340: LD_INT 2
68342: NEG
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 2
68350: NEG
68351: PUSH
68352: LD_INT 4
68354: NEG
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 4
68362: PUSH
68363: LD_INT 0
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 4
68372: PUSH
68373: LD_INT 1
68375: NEG
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 5
68383: PUSH
68384: LD_INT 0
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: LD_INT 5
68393: PUSH
68394: LD_INT 1
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 4
68403: PUSH
68404: LD_INT 1
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 3
68413: PUSH
68414: LD_INT 0
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 3
68423: PUSH
68424: LD_INT 1
68426: NEG
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 3
68434: PUSH
68435: LD_INT 2
68437: NEG
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 5
68445: PUSH
68446: LD_INT 2
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68500: LD_ADDR_VAR 0 32
68504: PUSH
68505: LD_INT 4
68507: NEG
68508: PUSH
68509: LD_INT 0
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 4
68518: NEG
68519: PUSH
68520: LD_INT 1
68522: NEG
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 3
68530: NEG
68531: PUSH
68532: LD_INT 0
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 3
68541: NEG
68542: PUSH
68543: LD_INT 1
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 4
68552: NEG
68553: PUSH
68554: LD_INT 1
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 5
68563: NEG
68564: PUSH
68565: LD_INT 0
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 5
68574: NEG
68575: PUSH
68576: LD_INT 1
68578: NEG
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 5
68586: NEG
68587: PUSH
68588: LD_INT 2
68590: NEG
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 3
68598: NEG
68599: PUSH
68600: LD_INT 2
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 3
68609: NEG
68610: PUSH
68611: LD_INT 3
68613: NEG
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 3
68621: NEG
68622: PUSH
68623: LD_INT 4
68625: NEG
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 2
68633: NEG
68634: PUSH
68635: LD_INT 3
68637: NEG
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 2
68645: NEG
68646: PUSH
68647: LD_INT 2
68649: NEG
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 3
68657: NEG
68658: PUSH
68659: LD_INT 2
68661: NEG
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 4
68669: NEG
68670: PUSH
68671: LD_INT 3
68673: NEG
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 4
68681: NEG
68682: PUSH
68683: LD_INT 4
68685: NEG
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 2
68693: NEG
68694: PUSH
68695: LD_INT 4
68697: NEG
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 4
68705: NEG
68706: PUSH
68707: LD_INT 2
68709: NEG
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 0
68717: PUSH
68718: LD_INT 4
68720: NEG
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: PUSH
68726: LD_INT 0
68728: PUSH
68729: LD_INT 5
68731: NEG
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 1
68739: PUSH
68740: LD_INT 4
68742: NEG
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 1
68750: PUSH
68751: LD_INT 3
68753: NEG
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 0
68761: PUSH
68762: LD_INT 3
68764: NEG
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 1
68772: NEG
68773: PUSH
68774: LD_INT 4
68776: NEG
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 1
68784: NEG
68785: PUSH
68786: LD_INT 5
68788: NEG
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 2
68796: PUSH
68797: LD_INT 3
68799: NEG
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 2
68807: NEG
68808: PUSH
68809: LD_INT 5
68811: NEG
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 3
68819: PUSH
68820: LD_INT 0
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 3
68829: PUSH
68830: LD_INT 1
68832: NEG
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: LD_INT 4
68840: PUSH
68841: LD_INT 0
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: LD_INT 4
68850: PUSH
68851: LD_INT 1
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 3
68860: PUSH
68861: LD_INT 1
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 2
68870: PUSH
68871: LD_INT 0
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 2
68880: PUSH
68881: LD_INT 1
68883: NEG
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 2
68891: PUSH
68892: LD_INT 2
68894: NEG
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 4
68902: PUSH
68903: LD_INT 2
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 4
68912: PUSH
68913: LD_INT 4
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 4
68922: PUSH
68923: LD_INT 3
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 5
68932: PUSH
68933: LD_INT 4
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 5
68942: PUSH
68943: LD_INT 5
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 4
68952: PUSH
68953: LD_INT 5
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 3
68962: PUSH
68963: LD_INT 4
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 3
68972: PUSH
68973: LD_INT 3
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 5
68982: PUSH
68983: LD_INT 3
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 3
68992: PUSH
68993: LD_INT 5
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69047: LD_ADDR_VAR 0 33
69051: PUSH
69052: LD_INT 4
69054: NEG
69055: PUSH
69056: LD_INT 4
69058: NEG
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 4
69066: NEG
69067: PUSH
69068: LD_INT 5
69070: NEG
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 3
69078: NEG
69079: PUSH
69080: LD_INT 4
69082: NEG
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 3
69090: NEG
69091: PUSH
69092: LD_INT 3
69094: NEG
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 4
69102: NEG
69103: PUSH
69104: LD_INT 3
69106: NEG
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 5
69114: NEG
69115: PUSH
69116: LD_INT 4
69118: NEG
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 5
69126: NEG
69127: PUSH
69128: LD_INT 5
69130: NEG
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 3
69138: NEG
69139: PUSH
69140: LD_INT 5
69142: NEG
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 5
69150: NEG
69151: PUSH
69152: LD_INT 3
69154: NEG
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 0
69162: PUSH
69163: LD_INT 3
69165: NEG
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_INT 0
69173: PUSH
69174: LD_INT 4
69176: NEG
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 1
69184: PUSH
69185: LD_INT 3
69187: NEG
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 1
69195: PUSH
69196: LD_INT 2
69198: NEG
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 0
69206: PUSH
69207: LD_INT 2
69209: NEG
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 1
69217: NEG
69218: PUSH
69219: LD_INT 3
69221: NEG
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 1
69229: NEG
69230: PUSH
69231: LD_INT 4
69233: NEG
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 2
69241: PUSH
69242: LD_INT 2
69244: NEG
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 2
69252: NEG
69253: PUSH
69254: LD_INT 4
69256: NEG
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 4
69264: PUSH
69265: LD_INT 0
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 4
69274: PUSH
69275: LD_INT 1
69277: NEG
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 5
69285: PUSH
69286: LD_INT 0
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_INT 5
69295: PUSH
69296: LD_INT 1
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: LD_INT 4
69305: PUSH
69306: LD_INT 1
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 3
69315: PUSH
69316: LD_INT 0
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 3
69325: PUSH
69326: LD_INT 1
69328: NEG
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 3
69336: PUSH
69337: LD_INT 2
69339: NEG
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 5
69347: PUSH
69348: LD_INT 2
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 3
69357: PUSH
69358: LD_INT 3
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 3
69367: PUSH
69368: LD_INT 2
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 4
69377: PUSH
69378: LD_INT 3
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 4
69387: PUSH
69388: LD_INT 4
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 3
69397: PUSH
69398: LD_INT 4
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: LD_INT 2
69407: PUSH
69408: LD_INT 3
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 2
69417: PUSH
69418: LD_INT 2
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 4
69427: PUSH
69428: LD_INT 2
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 2
69437: PUSH
69438: LD_INT 4
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: LD_INT 0
69447: PUSH
69448: LD_INT 4
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 0
69457: PUSH
69458: LD_INT 3
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 1
69467: PUSH
69468: LD_INT 4
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 1
69477: PUSH
69478: LD_INT 5
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 0
69487: PUSH
69488: LD_INT 5
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 1
69497: NEG
69498: PUSH
69499: LD_INT 4
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 1
69508: NEG
69509: PUSH
69510: LD_INT 3
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 2
69519: PUSH
69520: LD_INT 5
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 2
69529: NEG
69530: PUSH
69531: LD_INT 3
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69585: LD_ADDR_VAR 0 34
69589: PUSH
69590: LD_INT 0
69592: PUSH
69593: LD_INT 4
69595: NEG
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_INT 0
69603: PUSH
69604: LD_INT 5
69606: NEG
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 1
69614: PUSH
69615: LD_INT 4
69617: NEG
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: LD_INT 1
69625: PUSH
69626: LD_INT 3
69628: NEG
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: LD_INT 0
69636: PUSH
69637: LD_INT 3
69639: NEG
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PUSH
69645: LD_INT 1
69647: NEG
69648: PUSH
69649: LD_INT 4
69651: NEG
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 1
69659: NEG
69660: PUSH
69661: LD_INT 5
69663: NEG
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 2
69671: PUSH
69672: LD_INT 3
69674: NEG
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 2
69682: NEG
69683: PUSH
69684: LD_INT 5
69686: NEG
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 3
69694: PUSH
69695: LD_INT 0
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 3
69704: PUSH
69705: LD_INT 1
69707: NEG
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: PUSH
69713: LD_INT 4
69715: PUSH
69716: LD_INT 0
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: LD_INT 4
69725: PUSH
69726: LD_INT 1
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PUSH
69733: LD_INT 3
69735: PUSH
69736: LD_INT 1
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: LD_INT 2
69745: PUSH
69746: LD_INT 0
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 2
69755: PUSH
69756: LD_INT 1
69758: NEG
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: LD_INT 2
69766: PUSH
69767: LD_INT 2
69769: NEG
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: LD_INT 4
69777: PUSH
69778: LD_INT 2
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PUSH
69785: LD_INT 4
69787: PUSH
69788: LD_INT 4
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: LD_INT 4
69797: PUSH
69798: LD_INT 3
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 5
69807: PUSH
69808: LD_INT 4
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 5
69817: PUSH
69818: LD_INT 5
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: LD_INT 4
69827: PUSH
69828: LD_INT 5
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 3
69837: PUSH
69838: LD_INT 4
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 3
69847: PUSH
69848: LD_INT 3
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 5
69857: PUSH
69858: LD_INT 3
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 3
69867: PUSH
69868: LD_INT 5
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 0
69877: PUSH
69878: LD_INT 3
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 0
69887: PUSH
69888: LD_INT 2
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 1
69897: PUSH
69898: LD_INT 3
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 1
69907: PUSH
69908: LD_INT 4
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 0
69917: PUSH
69918: LD_INT 4
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 1
69927: NEG
69928: PUSH
69929: LD_INT 3
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 1
69938: NEG
69939: PUSH
69940: LD_INT 2
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 2
69949: PUSH
69950: LD_INT 4
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 2
69959: NEG
69960: PUSH
69961: LD_INT 2
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 4
69970: NEG
69971: PUSH
69972: LD_INT 0
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 4
69981: NEG
69982: PUSH
69983: LD_INT 1
69985: NEG
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: LD_INT 3
69993: NEG
69994: PUSH
69995: LD_INT 0
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 3
70004: NEG
70005: PUSH
70006: LD_INT 1
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 4
70015: NEG
70016: PUSH
70017: LD_INT 1
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 5
70026: NEG
70027: PUSH
70028: LD_INT 0
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 5
70037: NEG
70038: PUSH
70039: LD_INT 1
70041: NEG
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 5
70049: NEG
70050: PUSH
70051: LD_INT 2
70053: NEG
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 3
70061: NEG
70062: PUSH
70063: LD_INT 2
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: ST_TO_ADDR
// end ; end ;
70117: GO 70120
70119: POP
// case btype of b_depot , b_warehouse :
70120: LD_VAR 0 1
70124: PUSH
70125: LD_INT 0
70127: DOUBLE
70128: EQUAL
70129: IFTRUE 70139
70131: LD_INT 1
70133: DOUBLE
70134: EQUAL
70135: IFTRUE 70139
70137: GO 70340
70139: POP
// case nation of nation_american :
70140: LD_VAR 0 5
70144: PUSH
70145: LD_INT 1
70147: DOUBLE
70148: EQUAL
70149: IFTRUE 70153
70151: GO 70209
70153: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70154: LD_ADDR_VAR 0 9
70158: PUSH
70159: LD_VAR 0 11
70163: PUSH
70164: LD_VAR 0 12
70168: PUSH
70169: LD_VAR 0 13
70173: PUSH
70174: LD_VAR 0 14
70178: PUSH
70179: LD_VAR 0 15
70183: PUSH
70184: LD_VAR 0 16
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: PUSH
70197: LD_VAR 0 4
70201: PUSH
70202: LD_INT 1
70204: PLUS
70205: ARRAY
70206: ST_TO_ADDR
70207: GO 70338
70209: LD_INT 2
70211: DOUBLE
70212: EQUAL
70213: IFTRUE 70217
70215: GO 70273
70217: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70218: LD_ADDR_VAR 0 9
70222: PUSH
70223: LD_VAR 0 17
70227: PUSH
70228: LD_VAR 0 18
70232: PUSH
70233: LD_VAR 0 19
70237: PUSH
70238: LD_VAR 0 20
70242: PUSH
70243: LD_VAR 0 21
70247: PUSH
70248: LD_VAR 0 22
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: PUSH
70261: LD_VAR 0 4
70265: PUSH
70266: LD_INT 1
70268: PLUS
70269: ARRAY
70270: ST_TO_ADDR
70271: GO 70338
70273: LD_INT 3
70275: DOUBLE
70276: EQUAL
70277: IFTRUE 70281
70279: GO 70337
70281: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70282: LD_ADDR_VAR 0 9
70286: PUSH
70287: LD_VAR 0 23
70291: PUSH
70292: LD_VAR 0 24
70296: PUSH
70297: LD_VAR 0 25
70301: PUSH
70302: LD_VAR 0 26
70306: PUSH
70307: LD_VAR 0 27
70311: PUSH
70312: LD_VAR 0 28
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: PUSH
70325: LD_VAR 0 4
70329: PUSH
70330: LD_INT 1
70332: PLUS
70333: ARRAY
70334: ST_TO_ADDR
70335: GO 70338
70337: POP
70338: GO 70893
70340: LD_INT 2
70342: DOUBLE
70343: EQUAL
70344: IFTRUE 70354
70346: LD_INT 3
70348: DOUBLE
70349: EQUAL
70350: IFTRUE 70354
70352: GO 70410
70354: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70355: LD_ADDR_VAR 0 9
70359: PUSH
70360: LD_VAR 0 29
70364: PUSH
70365: LD_VAR 0 30
70369: PUSH
70370: LD_VAR 0 31
70374: PUSH
70375: LD_VAR 0 32
70379: PUSH
70380: LD_VAR 0 33
70384: PUSH
70385: LD_VAR 0 34
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: PUSH
70398: LD_VAR 0 4
70402: PUSH
70403: LD_INT 1
70405: PLUS
70406: ARRAY
70407: ST_TO_ADDR
70408: GO 70893
70410: LD_INT 16
70412: DOUBLE
70413: EQUAL
70414: IFTRUE 70472
70416: LD_INT 17
70418: DOUBLE
70419: EQUAL
70420: IFTRUE 70472
70422: LD_INT 18
70424: DOUBLE
70425: EQUAL
70426: IFTRUE 70472
70428: LD_INT 19
70430: DOUBLE
70431: EQUAL
70432: IFTRUE 70472
70434: LD_INT 22
70436: DOUBLE
70437: EQUAL
70438: IFTRUE 70472
70440: LD_INT 20
70442: DOUBLE
70443: EQUAL
70444: IFTRUE 70472
70446: LD_INT 21
70448: DOUBLE
70449: EQUAL
70450: IFTRUE 70472
70452: LD_INT 23
70454: DOUBLE
70455: EQUAL
70456: IFTRUE 70472
70458: LD_INT 24
70460: DOUBLE
70461: EQUAL
70462: IFTRUE 70472
70464: LD_INT 25
70466: DOUBLE
70467: EQUAL
70468: IFTRUE 70472
70470: GO 70528
70472: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70473: LD_ADDR_VAR 0 9
70477: PUSH
70478: LD_VAR 0 35
70482: PUSH
70483: LD_VAR 0 36
70487: PUSH
70488: LD_VAR 0 37
70492: PUSH
70493: LD_VAR 0 38
70497: PUSH
70498: LD_VAR 0 39
70502: PUSH
70503: LD_VAR 0 40
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: PUSH
70516: LD_VAR 0 4
70520: PUSH
70521: LD_INT 1
70523: PLUS
70524: ARRAY
70525: ST_TO_ADDR
70526: GO 70893
70528: LD_INT 6
70530: DOUBLE
70531: EQUAL
70532: IFTRUE 70584
70534: LD_INT 7
70536: DOUBLE
70537: EQUAL
70538: IFTRUE 70584
70540: LD_INT 8
70542: DOUBLE
70543: EQUAL
70544: IFTRUE 70584
70546: LD_INT 13
70548: DOUBLE
70549: EQUAL
70550: IFTRUE 70584
70552: LD_INT 12
70554: DOUBLE
70555: EQUAL
70556: IFTRUE 70584
70558: LD_INT 15
70560: DOUBLE
70561: EQUAL
70562: IFTRUE 70584
70564: LD_INT 11
70566: DOUBLE
70567: EQUAL
70568: IFTRUE 70584
70570: LD_INT 14
70572: DOUBLE
70573: EQUAL
70574: IFTRUE 70584
70576: LD_INT 10
70578: DOUBLE
70579: EQUAL
70580: IFTRUE 70584
70582: GO 70640
70584: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70585: LD_ADDR_VAR 0 9
70589: PUSH
70590: LD_VAR 0 41
70594: PUSH
70595: LD_VAR 0 42
70599: PUSH
70600: LD_VAR 0 43
70604: PUSH
70605: LD_VAR 0 44
70609: PUSH
70610: LD_VAR 0 45
70614: PUSH
70615: LD_VAR 0 46
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: PUSH
70628: LD_VAR 0 4
70632: PUSH
70633: LD_INT 1
70635: PLUS
70636: ARRAY
70637: ST_TO_ADDR
70638: GO 70893
70640: LD_INT 36
70642: DOUBLE
70643: EQUAL
70644: IFTRUE 70648
70646: GO 70704
70648: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70649: LD_ADDR_VAR 0 9
70653: PUSH
70654: LD_VAR 0 47
70658: PUSH
70659: LD_VAR 0 48
70663: PUSH
70664: LD_VAR 0 49
70668: PUSH
70669: LD_VAR 0 50
70673: PUSH
70674: LD_VAR 0 51
70678: PUSH
70679: LD_VAR 0 52
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: PUSH
70692: LD_VAR 0 4
70696: PUSH
70697: LD_INT 1
70699: PLUS
70700: ARRAY
70701: ST_TO_ADDR
70702: GO 70893
70704: LD_INT 4
70706: DOUBLE
70707: EQUAL
70708: IFTRUE 70730
70710: LD_INT 5
70712: DOUBLE
70713: EQUAL
70714: IFTRUE 70730
70716: LD_INT 34
70718: DOUBLE
70719: EQUAL
70720: IFTRUE 70730
70722: LD_INT 37
70724: DOUBLE
70725: EQUAL
70726: IFTRUE 70730
70728: GO 70786
70730: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70731: LD_ADDR_VAR 0 9
70735: PUSH
70736: LD_VAR 0 53
70740: PUSH
70741: LD_VAR 0 54
70745: PUSH
70746: LD_VAR 0 55
70750: PUSH
70751: LD_VAR 0 56
70755: PUSH
70756: LD_VAR 0 57
70760: PUSH
70761: LD_VAR 0 58
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: PUSH
70774: LD_VAR 0 4
70778: PUSH
70779: LD_INT 1
70781: PLUS
70782: ARRAY
70783: ST_TO_ADDR
70784: GO 70893
70786: LD_INT 31
70788: DOUBLE
70789: EQUAL
70790: IFTRUE 70836
70792: LD_INT 32
70794: DOUBLE
70795: EQUAL
70796: IFTRUE 70836
70798: LD_INT 33
70800: DOUBLE
70801: EQUAL
70802: IFTRUE 70836
70804: LD_INT 27
70806: DOUBLE
70807: EQUAL
70808: IFTRUE 70836
70810: LD_INT 26
70812: DOUBLE
70813: EQUAL
70814: IFTRUE 70836
70816: LD_INT 28
70818: DOUBLE
70819: EQUAL
70820: IFTRUE 70836
70822: LD_INT 29
70824: DOUBLE
70825: EQUAL
70826: IFTRUE 70836
70828: LD_INT 30
70830: DOUBLE
70831: EQUAL
70832: IFTRUE 70836
70834: GO 70892
70836: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70837: LD_ADDR_VAR 0 9
70841: PUSH
70842: LD_VAR 0 59
70846: PUSH
70847: LD_VAR 0 60
70851: PUSH
70852: LD_VAR 0 61
70856: PUSH
70857: LD_VAR 0 62
70861: PUSH
70862: LD_VAR 0 63
70866: PUSH
70867: LD_VAR 0 64
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: PUSH
70880: LD_VAR 0 4
70884: PUSH
70885: LD_INT 1
70887: PLUS
70888: ARRAY
70889: ST_TO_ADDR
70890: GO 70893
70892: POP
// temp_list2 = [ ] ;
70893: LD_ADDR_VAR 0 10
70897: PUSH
70898: EMPTY
70899: ST_TO_ADDR
// for i in temp_list do
70900: LD_ADDR_VAR 0 8
70904: PUSH
70905: LD_VAR 0 9
70909: PUSH
70910: FOR_IN
70911: IFFALSE 70963
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70913: LD_ADDR_VAR 0 10
70917: PUSH
70918: LD_VAR 0 10
70922: PUSH
70923: LD_VAR 0 8
70927: PUSH
70928: LD_INT 1
70930: ARRAY
70931: PUSH
70932: LD_VAR 0 2
70936: PLUS
70937: PUSH
70938: LD_VAR 0 8
70942: PUSH
70943: LD_INT 2
70945: ARRAY
70946: PUSH
70947: LD_VAR 0 3
70951: PLUS
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: EMPTY
70958: LIST
70959: ADD
70960: ST_TO_ADDR
70961: GO 70910
70963: POP
70964: POP
// result = temp_list2 ;
70965: LD_ADDR_VAR 0 7
70969: PUSH
70970: LD_VAR 0 10
70974: ST_TO_ADDR
// end ;
70975: LD_VAR 0 7
70979: RET
// export function EnemyInRange ( unit , dist ) ; begin
70980: LD_INT 0
70982: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70983: LD_ADDR_VAR 0 3
70987: PUSH
70988: LD_VAR 0 1
70992: PPUSH
70993: CALL_OW 255
70997: PPUSH
70998: LD_VAR 0 1
71002: PPUSH
71003: CALL_OW 250
71007: PPUSH
71008: LD_VAR 0 1
71012: PPUSH
71013: CALL_OW 251
71017: PPUSH
71018: LD_VAR 0 2
71022: PPUSH
71023: CALL 44237 0 4
71027: PUSH
71028: LD_INT 4
71030: ARRAY
71031: ST_TO_ADDR
// end ;
71032: LD_VAR 0 3
71036: RET
// export function PlayerSeeMe ( unit ) ; begin
71037: LD_INT 0
71039: PPUSH
// result := See ( your_side , unit ) ;
71040: LD_ADDR_VAR 0 2
71044: PUSH
71045: LD_OWVAR 2
71049: PPUSH
71050: LD_VAR 0 1
71054: PPUSH
71055: CALL_OW 292
71059: ST_TO_ADDR
// end ;
71060: LD_VAR 0 2
71064: RET
// export function ReverseDir ( unit ) ; begin
71065: LD_INT 0
71067: PPUSH
// if not unit then
71068: LD_VAR 0 1
71072: NOT
71073: IFFALSE 71077
// exit ;
71075: GO 71100
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71077: LD_ADDR_VAR 0 2
71081: PUSH
71082: LD_VAR 0 1
71086: PPUSH
71087: CALL_OW 254
71091: PUSH
71092: LD_INT 3
71094: PLUS
71095: PUSH
71096: LD_INT 6
71098: MOD
71099: ST_TO_ADDR
// end ;
71100: LD_VAR 0 2
71104: RET
// export function ReverseArray ( array ) ; var i ; begin
71105: LD_INT 0
71107: PPUSH
71108: PPUSH
// if not array then
71109: LD_VAR 0 1
71113: NOT
71114: IFFALSE 71118
// exit ;
71116: GO 71173
// result := [ ] ;
71118: LD_ADDR_VAR 0 2
71122: PUSH
71123: EMPTY
71124: ST_TO_ADDR
// for i := array downto 1 do
71125: LD_ADDR_VAR 0 3
71129: PUSH
71130: DOUBLE
71131: LD_VAR 0 1
71135: INC
71136: ST_TO_ADDR
71137: LD_INT 1
71139: PUSH
71140: FOR_DOWNTO
71141: IFFALSE 71171
// result := Join ( result , array [ i ] ) ;
71143: LD_ADDR_VAR 0 2
71147: PUSH
71148: LD_VAR 0 2
71152: PPUSH
71153: LD_VAR 0 1
71157: PUSH
71158: LD_VAR 0 3
71162: ARRAY
71163: PPUSH
71164: CALL 76025 0 2
71168: ST_TO_ADDR
71169: GO 71140
71171: POP
71172: POP
// end ;
71173: LD_VAR 0 2
71177: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71178: LD_INT 0
71180: PPUSH
71181: PPUSH
71182: PPUSH
71183: PPUSH
71184: PPUSH
71185: PPUSH
// if not unit or not hexes then
71186: LD_VAR 0 1
71190: NOT
71191: IFTRUE 71200
71193: PUSH
71194: LD_VAR 0 2
71198: NOT
71199: OR
71200: IFFALSE 71204
// exit ;
71202: GO 71327
// dist := 9999 ;
71204: LD_ADDR_VAR 0 5
71208: PUSH
71209: LD_INT 9999
71211: ST_TO_ADDR
// for i = 1 to hexes do
71212: LD_ADDR_VAR 0 4
71216: PUSH
71217: DOUBLE
71218: LD_INT 1
71220: DEC
71221: ST_TO_ADDR
71222: LD_VAR 0 2
71226: PUSH
71227: FOR_TO
71228: IFFALSE 71315
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71230: LD_ADDR_VAR 0 6
71234: PUSH
71235: LD_VAR 0 1
71239: PPUSH
71240: LD_VAR 0 2
71244: PUSH
71245: LD_VAR 0 4
71249: ARRAY
71250: PUSH
71251: LD_INT 1
71253: ARRAY
71254: PPUSH
71255: LD_VAR 0 2
71259: PUSH
71260: LD_VAR 0 4
71264: ARRAY
71265: PUSH
71266: LD_INT 2
71268: ARRAY
71269: PPUSH
71270: CALL_OW 297
71274: ST_TO_ADDR
// if tdist < dist then
71275: LD_VAR 0 6
71279: PUSH
71280: LD_VAR 0 5
71284: LESS
71285: IFFALSE 71313
// begin hex := hexes [ i ] ;
71287: LD_ADDR_VAR 0 8
71291: PUSH
71292: LD_VAR 0 2
71296: PUSH
71297: LD_VAR 0 4
71301: ARRAY
71302: ST_TO_ADDR
// dist := tdist ;
71303: LD_ADDR_VAR 0 5
71307: PUSH
71308: LD_VAR 0 6
71312: ST_TO_ADDR
// end ; end ;
71313: GO 71227
71315: POP
71316: POP
// result := hex ;
71317: LD_ADDR_VAR 0 3
71321: PUSH
71322: LD_VAR 0 8
71326: ST_TO_ADDR
// end ;
71327: LD_VAR 0 3
71331: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71332: LD_INT 0
71334: PPUSH
71335: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71336: LD_VAR 0 1
71340: NOT
71341: IFTRUE 71380
71343: PUSH
71344: LD_VAR 0 1
71348: PUSH
71349: LD_INT 21
71351: PUSH
71352: LD_INT 2
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: LD_INT 23
71361: PUSH
71362: LD_INT 2
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: PPUSH
71373: CALL_OW 69
71377: IN
71378: NOT
71379: OR
71380: IFFALSE 71384
// exit ;
71382: GO 71431
// for i = 1 to 3 do
71384: LD_ADDR_VAR 0 3
71388: PUSH
71389: DOUBLE
71390: LD_INT 1
71392: DEC
71393: ST_TO_ADDR
71394: LD_INT 3
71396: PUSH
71397: FOR_TO
71398: IFFALSE 71429
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71400: LD_VAR 0 1
71404: PPUSH
71405: CALL_OW 250
71409: PPUSH
71410: LD_VAR 0 1
71414: PPUSH
71415: CALL_OW 251
71419: PPUSH
71420: LD_INT 1
71422: PPUSH
71423: CALL_OW 453
71427: GO 71397
71429: POP
71430: POP
// end ;
71431: LD_VAR 0 2
71435: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71436: LD_INT 0
71438: PPUSH
71439: PPUSH
71440: PPUSH
71441: PPUSH
71442: PPUSH
71443: PPUSH
// if not unit or not enemy_unit then
71444: LD_VAR 0 1
71448: NOT
71449: IFTRUE 71458
71451: PUSH
71452: LD_VAR 0 2
71456: NOT
71457: OR
71458: IFFALSE 71462
// exit ;
71460: GO 71943
// if GetLives ( i ) < 250 then
71462: LD_VAR 0 4
71466: PPUSH
71467: CALL_OW 256
71471: PUSH
71472: LD_INT 250
71474: LESS
71475: IFFALSE 71488
// begin ComAutodestruct ( i ) ;
71477: LD_VAR 0 4
71481: PPUSH
71482: CALL 71332 0 1
// exit ;
71486: GO 71943
// end ; x := GetX ( enemy_unit ) ;
71488: LD_ADDR_VAR 0 7
71492: PUSH
71493: LD_VAR 0 2
71497: PPUSH
71498: CALL_OW 250
71502: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71503: LD_ADDR_VAR 0 8
71507: PUSH
71508: LD_VAR 0 2
71512: PPUSH
71513: CALL_OW 251
71517: ST_TO_ADDR
// if not x or not y then
71518: LD_VAR 0 7
71522: NOT
71523: IFTRUE 71532
71525: PUSH
71526: LD_VAR 0 8
71530: NOT
71531: OR
71532: IFFALSE 71536
// exit ;
71534: GO 71943
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71536: LD_ADDR_VAR 0 6
71540: PUSH
71541: LD_VAR 0 7
71545: PPUSH
71546: LD_INT 0
71548: PPUSH
71549: LD_INT 4
71551: PPUSH
71552: CALL_OW 272
71556: PUSH
71557: LD_VAR 0 8
71561: PPUSH
71562: LD_INT 0
71564: PPUSH
71565: LD_INT 4
71567: PPUSH
71568: CALL_OW 273
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_VAR 0 7
71581: PPUSH
71582: LD_INT 1
71584: PPUSH
71585: LD_INT 4
71587: PPUSH
71588: CALL_OW 272
71592: PUSH
71593: LD_VAR 0 8
71597: PPUSH
71598: LD_INT 1
71600: PPUSH
71601: LD_INT 4
71603: PPUSH
71604: CALL_OW 273
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: PUSH
71613: LD_VAR 0 7
71617: PPUSH
71618: LD_INT 2
71620: PPUSH
71621: LD_INT 4
71623: PPUSH
71624: CALL_OW 272
71628: PUSH
71629: LD_VAR 0 8
71633: PPUSH
71634: LD_INT 2
71636: PPUSH
71637: LD_INT 4
71639: PPUSH
71640: CALL_OW 273
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_VAR 0 7
71653: PPUSH
71654: LD_INT 3
71656: PPUSH
71657: LD_INT 4
71659: PPUSH
71660: CALL_OW 272
71664: PUSH
71665: LD_VAR 0 8
71669: PPUSH
71670: LD_INT 3
71672: PPUSH
71673: LD_INT 4
71675: PPUSH
71676: CALL_OW 273
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_VAR 0 7
71689: PPUSH
71690: LD_INT 4
71692: PPUSH
71693: LD_INT 4
71695: PPUSH
71696: CALL_OW 272
71700: PUSH
71701: LD_VAR 0 8
71705: PPUSH
71706: LD_INT 4
71708: PPUSH
71709: LD_INT 4
71711: PPUSH
71712: CALL_OW 273
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PUSH
71721: LD_VAR 0 7
71725: PPUSH
71726: LD_INT 5
71728: PPUSH
71729: LD_INT 4
71731: PPUSH
71732: CALL_OW 272
71736: PUSH
71737: LD_VAR 0 8
71741: PPUSH
71742: LD_INT 5
71744: PPUSH
71745: LD_INT 4
71747: PPUSH
71748: CALL_OW 273
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: ST_TO_ADDR
// for i = tmp downto 1 do
71765: LD_ADDR_VAR 0 4
71769: PUSH
71770: DOUBLE
71771: LD_VAR 0 6
71775: INC
71776: ST_TO_ADDR
71777: LD_INT 1
71779: PUSH
71780: FOR_DOWNTO
71781: IFFALSE 71884
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71783: LD_VAR 0 6
71787: PUSH
71788: LD_VAR 0 4
71792: ARRAY
71793: PUSH
71794: LD_INT 1
71796: ARRAY
71797: PPUSH
71798: LD_VAR 0 6
71802: PUSH
71803: LD_VAR 0 4
71807: ARRAY
71808: PUSH
71809: LD_INT 2
71811: ARRAY
71812: PPUSH
71813: CALL_OW 488
71817: NOT
71818: IFTRUE 71860
71820: PUSH
71821: LD_VAR 0 6
71825: PUSH
71826: LD_VAR 0 4
71830: ARRAY
71831: PUSH
71832: LD_INT 1
71834: ARRAY
71835: PPUSH
71836: LD_VAR 0 6
71840: PUSH
71841: LD_VAR 0 4
71845: ARRAY
71846: PUSH
71847: LD_INT 2
71849: ARRAY
71850: PPUSH
71851: CALL_OW 428
71855: PUSH
71856: LD_INT 0
71858: NONEQUAL
71859: OR
71860: IFFALSE 71882
// tmp := Delete ( tmp , i ) ;
71862: LD_ADDR_VAR 0 6
71866: PUSH
71867: LD_VAR 0 6
71871: PPUSH
71872: LD_VAR 0 4
71876: PPUSH
71877: CALL_OW 3
71881: ST_TO_ADDR
71882: GO 71780
71884: POP
71885: POP
// j := GetClosestHex ( unit , tmp ) ;
71886: LD_ADDR_VAR 0 5
71890: PUSH
71891: LD_VAR 0 1
71895: PPUSH
71896: LD_VAR 0 6
71900: PPUSH
71901: CALL 71178 0 2
71905: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71906: LD_VAR 0 1
71910: PPUSH
71911: LD_VAR 0 5
71915: PUSH
71916: LD_INT 1
71918: ARRAY
71919: PPUSH
71920: LD_VAR 0 5
71924: PUSH
71925: LD_INT 2
71927: ARRAY
71928: PPUSH
71929: CALL_OW 111
// result := j ;
71933: LD_ADDR_VAR 0 3
71937: PUSH
71938: LD_VAR 0 5
71942: ST_TO_ADDR
// end ;
71943: LD_VAR 0 3
71947: RET
// export function PrepareApemanSoldier ( ) ; begin
71948: LD_INT 0
71950: PPUSH
// uc_nation := 0 ;
71951: LD_ADDR_OWVAR 21
71955: PUSH
71956: LD_INT 0
71958: ST_TO_ADDR
// hc_sex := sex_male ;
71959: LD_ADDR_OWVAR 27
71963: PUSH
71964: LD_INT 1
71966: ST_TO_ADDR
// hc_name :=  ;
71967: LD_ADDR_OWVAR 26
71971: PUSH
71972: LD_STRING 
71974: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
71975: LD_ADDR_OWVAR 28
71979: PUSH
71980: LD_INT 15
71982: ST_TO_ADDR
// hc_gallery :=  ;
71983: LD_ADDR_OWVAR 33
71987: PUSH
71988: LD_STRING 
71990: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71991: LD_ADDR_OWVAR 31
71995: PUSH
71996: LD_INT 0
71998: PPUSH
71999: LD_INT 3
72001: PPUSH
72002: CALL_OW 12
72006: PUSH
72007: LD_INT 0
72009: PPUSH
72010: LD_INT 3
72012: PPUSH
72013: CALL_OW 12
72017: PUSH
72018: LD_INT 0
72020: PUSH
72021: LD_INT 0
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
72030: LD_ADDR_OWVAR 29
72034: PUSH
72035: LD_INT 10
72037: PUSH
72038: LD_INT 12
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: ST_TO_ADDR
// end ;
72045: LD_VAR 0 1
72049: RET
// export function PrepareApemanEngineer ( ) ; begin
72050: LD_INT 0
72052: PPUSH
// uc_nation := 0 ;
72053: LD_ADDR_OWVAR 21
72057: PUSH
72058: LD_INT 0
72060: ST_TO_ADDR
// hc_sex := sex_male ;
72061: LD_ADDR_OWVAR 27
72065: PUSH
72066: LD_INT 1
72068: ST_TO_ADDR
// hc_name :=  ;
72069: LD_ADDR_OWVAR 26
72073: PUSH
72074: LD_STRING 
72076: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72077: LD_ADDR_OWVAR 28
72081: PUSH
72082: LD_INT 16
72084: ST_TO_ADDR
// hc_gallery :=  ;
72085: LD_ADDR_OWVAR 33
72089: PUSH
72090: LD_STRING 
72092: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72093: LD_ADDR_OWVAR 31
72097: PUSH
72098: LD_INT 0
72100: PPUSH
72101: LD_INT 3
72103: PPUSH
72104: CALL_OW 12
72108: PUSH
72109: LD_INT 0
72111: PPUSH
72112: LD_INT 3
72114: PPUSH
72115: CALL_OW 12
72119: PUSH
72120: LD_INT 0
72122: PUSH
72123: LD_INT 0
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
72132: LD_ADDR_OWVAR 29
72136: PUSH
72137: LD_INT 10
72139: PUSH
72140: LD_INT 12
72142: PUSH
72143: EMPTY
72144: LIST
72145: LIST
72146: ST_TO_ADDR
// end ;
72147: LD_VAR 0 1
72151: RET
// export function PrepareApeman ( agressivity ) ; begin
72152: LD_INT 0
72154: PPUSH
// uc_side := 0 ;
72155: LD_ADDR_OWVAR 20
72159: PUSH
72160: LD_INT 0
72162: ST_TO_ADDR
// uc_nation := 0 ;
72163: LD_ADDR_OWVAR 21
72167: PUSH
72168: LD_INT 0
72170: ST_TO_ADDR
// hc_sex := sex_male ;
72171: LD_ADDR_OWVAR 27
72175: PUSH
72176: LD_INT 1
72178: ST_TO_ADDR
// hc_class := class_apeman ;
72179: LD_ADDR_OWVAR 28
72183: PUSH
72184: LD_INT 12
72186: ST_TO_ADDR
// hc_gallery :=  ;
72187: LD_ADDR_OWVAR 33
72191: PUSH
72192: LD_STRING 
72194: ST_TO_ADDR
// hc_name :=  ;
72195: LD_ADDR_OWVAR 26
72199: PUSH
72200: LD_STRING 
72202: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
72203: LD_ADDR_OWVAR 29
72207: PUSH
72208: LD_INT 10
72210: PUSH
72211: LD_INT 12
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: ST_TO_ADDR
// if agressivity = 0 then
72218: LD_VAR 0 1
72222: PUSH
72223: LD_INT 0
72225: EQUAL
72226: IFFALSE 72238
// hc_agressivity := 0 else
72228: LD_ADDR_OWVAR 35
72232: PUSH
72233: LD_INT 0
72235: ST_TO_ADDR
72236: GO 72259
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72238: LD_ADDR_OWVAR 35
72242: PUSH
72243: LD_VAR 0 1
72247: NEG
72248: PPUSH
72249: LD_VAR 0 1
72253: PPUSH
72254: CALL_OW 12
72258: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72259: LD_ADDR_OWVAR 31
72263: PUSH
72264: LD_INT 0
72266: PPUSH
72267: LD_INT 3
72269: PPUSH
72270: CALL_OW 12
72274: PUSH
72275: LD_INT 0
72277: PPUSH
72278: LD_INT 3
72280: PPUSH
72281: CALL_OW 12
72285: PUSH
72286: LD_INT 0
72288: PUSH
72289: LD_INT 0
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: LIST
72296: LIST
72297: ST_TO_ADDR
// end ;
72298: LD_VAR 0 2
72302: RET
// export function PrepareTiger ( agressivity ) ; begin
72303: LD_INT 0
72305: PPUSH
// uc_side := 0 ;
72306: LD_ADDR_OWVAR 20
72310: PUSH
72311: LD_INT 0
72313: ST_TO_ADDR
// uc_nation := 0 ;
72314: LD_ADDR_OWVAR 21
72318: PUSH
72319: LD_INT 0
72321: ST_TO_ADDR
// InitHc ;
72322: CALL_OW 19
// hc_class := class_tiger ;
72326: LD_ADDR_OWVAR 28
72330: PUSH
72331: LD_INT 14
72333: ST_TO_ADDR
// hc_gallery :=  ;
72334: LD_ADDR_OWVAR 33
72338: PUSH
72339: LD_STRING 
72341: ST_TO_ADDR
// hc_name :=  ;
72342: LD_ADDR_OWVAR 26
72346: PUSH
72347: LD_STRING 
72349: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72350: LD_ADDR_OWVAR 35
72354: PUSH
72355: LD_VAR 0 1
72359: NEG
72360: PPUSH
72361: LD_VAR 0 1
72365: PPUSH
72366: CALL_OW 12
72370: ST_TO_ADDR
// end ;
72371: LD_VAR 0 2
72375: RET
// export function PrepareEnchidna ( ) ; begin
72376: LD_INT 0
72378: PPUSH
// uc_side := 0 ;
72379: LD_ADDR_OWVAR 20
72383: PUSH
72384: LD_INT 0
72386: ST_TO_ADDR
// uc_nation := 0 ;
72387: LD_ADDR_OWVAR 21
72391: PUSH
72392: LD_INT 0
72394: ST_TO_ADDR
// InitHc ;
72395: CALL_OW 19
// hc_class := class_baggie ;
72399: LD_ADDR_OWVAR 28
72403: PUSH
72404: LD_INT 13
72406: ST_TO_ADDR
// hc_gallery :=  ;
72407: LD_ADDR_OWVAR 33
72411: PUSH
72412: LD_STRING 
72414: ST_TO_ADDR
// hc_name :=  ;
72415: LD_ADDR_OWVAR 26
72419: PUSH
72420: LD_STRING 
72422: ST_TO_ADDR
// end ;
72423: LD_VAR 0 1
72427: RET
// export function PrepareFrog ( ) ; begin
72428: LD_INT 0
72430: PPUSH
// uc_side := 0 ;
72431: LD_ADDR_OWVAR 20
72435: PUSH
72436: LD_INT 0
72438: ST_TO_ADDR
// uc_nation := 0 ;
72439: LD_ADDR_OWVAR 21
72443: PUSH
72444: LD_INT 0
72446: ST_TO_ADDR
// InitHc ;
72447: CALL_OW 19
// hc_class := class_frog ;
72451: LD_ADDR_OWVAR 28
72455: PUSH
72456: LD_INT 19
72458: ST_TO_ADDR
// hc_gallery :=  ;
72459: LD_ADDR_OWVAR 33
72463: PUSH
72464: LD_STRING 
72466: ST_TO_ADDR
// hc_name :=  ;
72467: LD_ADDR_OWVAR 26
72471: PUSH
72472: LD_STRING 
72474: ST_TO_ADDR
// end ;
72475: LD_VAR 0 1
72479: RET
// export function PrepareFish ( ) ; begin
72480: LD_INT 0
72482: PPUSH
// uc_side := 0 ;
72483: LD_ADDR_OWVAR 20
72487: PUSH
72488: LD_INT 0
72490: ST_TO_ADDR
// uc_nation := 0 ;
72491: LD_ADDR_OWVAR 21
72495: PUSH
72496: LD_INT 0
72498: ST_TO_ADDR
// InitHc ;
72499: CALL_OW 19
// hc_class := class_fish ;
72503: LD_ADDR_OWVAR 28
72507: PUSH
72508: LD_INT 20
72510: ST_TO_ADDR
// hc_gallery :=  ;
72511: LD_ADDR_OWVAR 33
72515: PUSH
72516: LD_STRING 
72518: ST_TO_ADDR
// hc_name :=  ;
72519: LD_ADDR_OWVAR 26
72523: PUSH
72524: LD_STRING 
72526: ST_TO_ADDR
// end ;
72527: LD_VAR 0 1
72531: RET
// export function PrepareBird ( ) ; begin
72532: LD_INT 0
72534: PPUSH
// uc_side := 0 ;
72535: LD_ADDR_OWVAR 20
72539: PUSH
72540: LD_INT 0
72542: ST_TO_ADDR
// uc_nation := 0 ;
72543: LD_ADDR_OWVAR 21
72547: PUSH
72548: LD_INT 0
72550: ST_TO_ADDR
// InitHc ;
72551: CALL_OW 19
// hc_class := class_phororhacos ;
72555: LD_ADDR_OWVAR 28
72559: PUSH
72560: LD_INT 18
72562: ST_TO_ADDR
// hc_gallery :=  ;
72563: LD_ADDR_OWVAR 33
72567: PUSH
72568: LD_STRING 
72570: ST_TO_ADDR
// hc_name :=  ;
72571: LD_ADDR_OWVAR 26
72575: PUSH
72576: LD_STRING 
72578: ST_TO_ADDR
// end ;
72579: LD_VAR 0 1
72583: RET
// export function PrepareHorse ( ) ; begin
72584: LD_INT 0
72586: PPUSH
// uc_side := 0 ;
72587: LD_ADDR_OWVAR 20
72591: PUSH
72592: LD_INT 0
72594: ST_TO_ADDR
// uc_nation := 0 ;
72595: LD_ADDR_OWVAR 21
72599: PUSH
72600: LD_INT 0
72602: ST_TO_ADDR
// InitHc ;
72603: CALL_OW 19
// hc_class := class_horse ;
72607: LD_ADDR_OWVAR 28
72611: PUSH
72612: LD_INT 21
72614: ST_TO_ADDR
// hc_gallery :=  ;
72615: LD_ADDR_OWVAR 33
72619: PUSH
72620: LD_STRING 
72622: ST_TO_ADDR
// hc_name :=  ;
72623: LD_ADDR_OWVAR 26
72627: PUSH
72628: LD_STRING 
72630: ST_TO_ADDR
// end ;
72631: LD_VAR 0 1
72635: RET
// export function PrepareMastodont ( ) ; begin
72636: LD_INT 0
72638: PPUSH
// uc_side := 0 ;
72639: LD_ADDR_OWVAR 20
72643: PUSH
72644: LD_INT 0
72646: ST_TO_ADDR
// uc_nation := 0 ;
72647: LD_ADDR_OWVAR 21
72651: PUSH
72652: LD_INT 0
72654: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72655: LD_ADDR_OWVAR 37
72659: PUSH
72660: LD_INT 31
72662: ST_TO_ADDR
// vc_control := control_rider ;
72663: LD_ADDR_OWVAR 38
72667: PUSH
72668: LD_INT 4
72670: ST_TO_ADDR
// end ;
72671: LD_VAR 0 1
72675: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72676: LD_INT 0
72678: PPUSH
72679: PPUSH
72680: PPUSH
// uc_side = 0 ;
72681: LD_ADDR_OWVAR 20
72685: PUSH
72686: LD_INT 0
72688: ST_TO_ADDR
// uc_nation = 0 ;
72689: LD_ADDR_OWVAR 21
72693: PUSH
72694: LD_INT 0
72696: ST_TO_ADDR
// InitHc_All ( ) ;
72697: CALL_OW 584
// InitVc ;
72701: CALL_OW 20
// if mastodonts then
72705: LD_VAR 0 6
72709: IFFALSE 72776
// for i = 1 to mastodonts do
72711: LD_ADDR_VAR 0 11
72715: PUSH
72716: DOUBLE
72717: LD_INT 1
72719: DEC
72720: ST_TO_ADDR
72721: LD_VAR 0 6
72725: PUSH
72726: FOR_TO
72727: IFFALSE 72774
// begin vc_chassis := 31 ;
72729: LD_ADDR_OWVAR 37
72733: PUSH
72734: LD_INT 31
72736: ST_TO_ADDR
// vc_control := control_rider ;
72737: LD_ADDR_OWVAR 38
72741: PUSH
72742: LD_INT 4
72744: ST_TO_ADDR
// animal := CreateVehicle ;
72745: LD_ADDR_VAR 0 12
72749: PUSH
72750: CALL_OW 45
72754: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72755: LD_VAR 0 12
72759: PPUSH
72760: LD_VAR 0 8
72764: PPUSH
72765: LD_INT 0
72767: PPUSH
72768: CALL 74918 0 3
// end ;
72772: GO 72726
72774: POP
72775: POP
// if horses then
72776: LD_VAR 0 5
72780: IFFALSE 72847
// for i = 1 to horses do
72782: LD_ADDR_VAR 0 11
72786: PUSH
72787: DOUBLE
72788: LD_INT 1
72790: DEC
72791: ST_TO_ADDR
72792: LD_VAR 0 5
72796: PUSH
72797: FOR_TO
72798: IFFALSE 72845
// begin hc_class := 21 ;
72800: LD_ADDR_OWVAR 28
72804: PUSH
72805: LD_INT 21
72807: ST_TO_ADDR
// hc_gallery :=  ;
72808: LD_ADDR_OWVAR 33
72812: PUSH
72813: LD_STRING 
72815: ST_TO_ADDR
// animal := CreateHuman ;
72816: LD_ADDR_VAR 0 12
72820: PUSH
72821: CALL_OW 44
72825: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72826: LD_VAR 0 12
72830: PPUSH
72831: LD_VAR 0 8
72835: PPUSH
72836: LD_INT 0
72838: PPUSH
72839: CALL 74918 0 3
// end ;
72843: GO 72797
72845: POP
72846: POP
// if birds then
72847: LD_VAR 0 1
72851: IFFALSE 72918
// for i = 1 to birds do
72853: LD_ADDR_VAR 0 11
72857: PUSH
72858: DOUBLE
72859: LD_INT 1
72861: DEC
72862: ST_TO_ADDR
72863: LD_VAR 0 1
72867: PUSH
72868: FOR_TO
72869: IFFALSE 72916
// begin hc_class := 18 ;
72871: LD_ADDR_OWVAR 28
72875: PUSH
72876: LD_INT 18
72878: ST_TO_ADDR
// hc_gallery =  ;
72879: LD_ADDR_OWVAR 33
72883: PUSH
72884: LD_STRING 
72886: ST_TO_ADDR
// animal := CreateHuman ;
72887: LD_ADDR_VAR 0 12
72891: PUSH
72892: CALL_OW 44
72896: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72897: LD_VAR 0 12
72901: PPUSH
72902: LD_VAR 0 8
72906: PPUSH
72907: LD_INT 0
72909: PPUSH
72910: CALL 74918 0 3
// end ;
72914: GO 72868
72916: POP
72917: POP
// if tigers then
72918: LD_VAR 0 2
72922: IFFALSE 73006
// for i = 1 to tigers do
72924: LD_ADDR_VAR 0 11
72928: PUSH
72929: DOUBLE
72930: LD_INT 1
72932: DEC
72933: ST_TO_ADDR
72934: LD_VAR 0 2
72938: PUSH
72939: FOR_TO
72940: IFFALSE 73004
// begin hc_class = class_tiger ;
72942: LD_ADDR_OWVAR 28
72946: PUSH
72947: LD_INT 14
72949: ST_TO_ADDR
// hc_gallery =  ;
72950: LD_ADDR_OWVAR 33
72954: PUSH
72955: LD_STRING 
72957: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72958: LD_ADDR_OWVAR 35
72962: PUSH
72963: LD_INT 7
72965: NEG
72966: PPUSH
72967: LD_INT 7
72969: PPUSH
72970: CALL_OW 12
72974: ST_TO_ADDR
// animal := CreateHuman ;
72975: LD_ADDR_VAR 0 12
72979: PUSH
72980: CALL_OW 44
72984: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72985: LD_VAR 0 12
72989: PPUSH
72990: LD_VAR 0 8
72994: PPUSH
72995: LD_INT 0
72997: PPUSH
72998: CALL 74918 0 3
// end ;
73002: GO 72939
73004: POP
73005: POP
// if apemans then
73006: LD_VAR 0 3
73010: IFFALSE 73133
// for i = 1 to apemans do
73012: LD_ADDR_VAR 0 11
73016: PUSH
73017: DOUBLE
73018: LD_INT 1
73020: DEC
73021: ST_TO_ADDR
73022: LD_VAR 0 3
73026: PUSH
73027: FOR_TO
73028: IFFALSE 73131
// begin hc_class = class_apeman ;
73030: LD_ADDR_OWVAR 28
73034: PUSH
73035: LD_INT 12
73037: ST_TO_ADDR
// hc_gallery =  ;
73038: LD_ADDR_OWVAR 33
73042: PUSH
73043: LD_STRING 
73045: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73046: LD_ADDR_OWVAR 35
73050: PUSH
73051: LD_INT 2
73053: NEG
73054: PPUSH
73055: LD_INT 2
73057: PPUSH
73058: CALL_OW 12
73062: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73063: LD_ADDR_OWVAR 31
73067: PUSH
73068: LD_INT 1
73070: PPUSH
73071: LD_INT 3
73073: PPUSH
73074: CALL_OW 12
73078: PUSH
73079: LD_INT 1
73081: PPUSH
73082: LD_INT 3
73084: PPUSH
73085: CALL_OW 12
73089: PUSH
73090: LD_INT 0
73092: PUSH
73093: LD_INT 0
73095: PUSH
73096: EMPTY
73097: LIST
73098: LIST
73099: LIST
73100: LIST
73101: ST_TO_ADDR
// animal := CreateHuman ;
73102: LD_ADDR_VAR 0 12
73106: PUSH
73107: CALL_OW 44
73111: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73112: LD_VAR 0 12
73116: PPUSH
73117: LD_VAR 0 8
73121: PPUSH
73122: LD_INT 0
73124: PPUSH
73125: CALL 74918 0 3
// end ;
73129: GO 73027
73131: POP
73132: POP
// if enchidnas then
73133: LD_VAR 0 4
73137: IFFALSE 73204
// for i = 1 to enchidnas do
73139: LD_ADDR_VAR 0 11
73143: PUSH
73144: DOUBLE
73145: LD_INT 1
73147: DEC
73148: ST_TO_ADDR
73149: LD_VAR 0 4
73153: PUSH
73154: FOR_TO
73155: IFFALSE 73202
// begin hc_class = 13 ;
73157: LD_ADDR_OWVAR 28
73161: PUSH
73162: LD_INT 13
73164: ST_TO_ADDR
// hc_gallery =  ;
73165: LD_ADDR_OWVAR 33
73169: PUSH
73170: LD_STRING 
73172: ST_TO_ADDR
// animal := CreateHuman ;
73173: LD_ADDR_VAR 0 12
73177: PUSH
73178: CALL_OW 44
73182: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73183: LD_VAR 0 12
73187: PPUSH
73188: LD_VAR 0 8
73192: PPUSH
73193: LD_INT 0
73195: PPUSH
73196: CALL 74918 0 3
// end ;
73200: GO 73154
73202: POP
73203: POP
// if fishes then
73204: LD_VAR 0 7
73208: IFFALSE 73275
// for i = 1 to fishes do
73210: LD_ADDR_VAR 0 11
73214: PUSH
73215: DOUBLE
73216: LD_INT 1
73218: DEC
73219: ST_TO_ADDR
73220: LD_VAR 0 7
73224: PUSH
73225: FOR_TO
73226: IFFALSE 73273
// begin hc_class = 20 ;
73228: LD_ADDR_OWVAR 28
73232: PUSH
73233: LD_INT 20
73235: ST_TO_ADDR
// hc_gallery =  ;
73236: LD_ADDR_OWVAR 33
73240: PUSH
73241: LD_STRING 
73243: ST_TO_ADDR
// animal := CreateHuman ;
73244: LD_ADDR_VAR 0 12
73248: PUSH
73249: CALL_OW 44
73253: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73254: LD_VAR 0 12
73258: PPUSH
73259: LD_VAR 0 9
73263: PPUSH
73264: LD_INT 0
73266: PPUSH
73267: CALL 74918 0 3
// end ;
73271: GO 73225
73273: POP
73274: POP
// end ;
73275: LD_VAR 0 10
73279: RET
// export function WantHeal ( sci , unit ) ; begin
73280: LD_INT 0
73282: PPUSH
// if GetTaskList ( sci ) > 0 then
73283: LD_VAR 0 1
73287: PPUSH
73288: CALL_OW 437
73292: PUSH
73293: LD_INT 0
73295: GREATER
73296: IFFALSE 73368
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73298: LD_VAR 0 1
73302: PPUSH
73303: CALL_OW 437
73307: PUSH
73308: LD_INT 1
73310: ARRAY
73311: PUSH
73312: LD_INT 1
73314: ARRAY
73315: PUSH
73316: LD_STRING l
73318: EQUAL
73319: IFFALSE 73346
73321: PUSH
73322: LD_VAR 0 1
73326: PPUSH
73327: CALL_OW 437
73331: PUSH
73332: LD_INT 1
73334: ARRAY
73335: PUSH
73336: LD_INT 4
73338: ARRAY
73339: PUSH
73340: LD_VAR 0 2
73344: EQUAL
73345: AND
73346: IFFALSE 73358
// result := true else
73348: LD_ADDR_VAR 0 3
73352: PUSH
73353: LD_INT 1
73355: ST_TO_ADDR
73356: GO 73366
// result := false ;
73358: LD_ADDR_VAR 0 3
73362: PUSH
73363: LD_INT 0
73365: ST_TO_ADDR
// end else
73366: GO 73376
// result := false ;
73368: LD_ADDR_VAR 0 3
73372: PUSH
73373: LD_INT 0
73375: ST_TO_ADDR
// end ;
73376: LD_VAR 0 3
73380: RET
// export function HealTarget ( sci ) ; begin
73381: LD_INT 0
73383: PPUSH
// if not sci then
73384: LD_VAR 0 1
73388: NOT
73389: IFFALSE 73393
// exit ;
73391: GO 73458
// result := 0 ;
73393: LD_ADDR_VAR 0 2
73397: PUSH
73398: LD_INT 0
73400: ST_TO_ADDR
// if GetTaskList ( sci ) then
73401: LD_VAR 0 1
73405: PPUSH
73406: CALL_OW 437
73410: IFFALSE 73458
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73412: LD_VAR 0 1
73416: PPUSH
73417: CALL_OW 437
73421: PUSH
73422: LD_INT 1
73424: ARRAY
73425: PUSH
73426: LD_INT 1
73428: ARRAY
73429: PUSH
73430: LD_STRING l
73432: EQUAL
73433: IFFALSE 73458
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73435: LD_ADDR_VAR 0 2
73439: PUSH
73440: LD_VAR 0 1
73444: PPUSH
73445: CALL_OW 437
73449: PUSH
73450: LD_INT 1
73452: ARRAY
73453: PUSH
73454: LD_INT 4
73456: ARRAY
73457: ST_TO_ADDR
// end ;
73458: LD_VAR 0 2
73462: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73463: LD_INT 0
73465: PPUSH
73466: PPUSH
73467: PPUSH
73468: PPUSH
// if not base_units then
73469: LD_VAR 0 1
73473: NOT
73474: IFFALSE 73478
// exit ;
73476: GO 73565
// result := false ;
73478: LD_ADDR_VAR 0 2
73482: PUSH
73483: LD_INT 0
73485: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73486: LD_ADDR_VAR 0 5
73490: PUSH
73491: LD_VAR 0 1
73495: PPUSH
73496: LD_INT 21
73498: PUSH
73499: LD_INT 3
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: PPUSH
73506: CALL_OW 72
73510: ST_TO_ADDR
// if not tmp then
73511: LD_VAR 0 5
73515: NOT
73516: IFFALSE 73520
// exit ;
73518: GO 73565
// for i in tmp do
73520: LD_ADDR_VAR 0 3
73524: PUSH
73525: LD_VAR 0 5
73529: PUSH
73530: FOR_IN
73531: IFFALSE 73563
// begin result := EnemyInRange ( i , 22 ) ;
73533: LD_ADDR_VAR 0 2
73537: PUSH
73538: LD_VAR 0 3
73542: PPUSH
73543: LD_INT 22
73545: PPUSH
73546: CALL 70980 0 2
73550: ST_TO_ADDR
// if result then
73551: LD_VAR 0 2
73555: IFFALSE 73561
// exit ;
73557: POP
73558: POP
73559: GO 73565
// end ;
73561: GO 73530
73563: POP
73564: POP
// end ;
73565: LD_VAR 0 2
73569: RET
// export function FilterByTag ( units , tag ) ; begin
73570: LD_INT 0
73572: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73573: LD_ADDR_VAR 0 3
73577: PUSH
73578: LD_VAR 0 1
73582: PPUSH
73583: LD_INT 120
73585: PUSH
73586: LD_VAR 0 2
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: PPUSH
73595: CALL_OW 72
73599: ST_TO_ADDR
// end ;
73600: LD_VAR 0 3
73604: RET
// export function IsDriver ( un ) ; begin
73605: LD_INT 0
73607: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73608: LD_ADDR_VAR 0 2
73612: PUSH
73613: LD_VAR 0 1
73617: PUSH
73618: LD_INT 55
73620: PUSH
73621: EMPTY
73622: LIST
73623: PPUSH
73624: CALL_OW 69
73628: IN
73629: ST_TO_ADDR
// end ;
73630: LD_VAR 0 2
73634: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73635: LD_INT 0
73637: PPUSH
73638: PPUSH
// list := [ ] ;
73639: LD_ADDR_VAR 0 5
73643: PUSH
73644: EMPTY
73645: ST_TO_ADDR
// case d of 0 :
73646: LD_VAR 0 3
73650: PUSH
73651: LD_INT 0
73653: DOUBLE
73654: EQUAL
73655: IFTRUE 73659
73657: GO 73792
73659: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73660: LD_ADDR_VAR 0 5
73664: PUSH
73665: LD_VAR 0 1
73669: PUSH
73670: LD_INT 4
73672: MINUS
73673: PUSH
73674: LD_VAR 0 2
73678: PUSH
73679: LD_INT 4
73681: MINUS
73682: PUSH
73683: LD_INT 2
73685: PUSH
73686: EMPTY
73687: LIST
73688: LIST
73689: LIST
73690: PUSH
73691: LD_VAR 0 1
73695: PUSH
73696: LD_INT 3
73698: MINUS
73699: PUSH
73700: LD_VAR 0 2
73704: PUSH
73705: LD_INT 1
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: LIST
73712: PUSH
73713: LD_VAR 0 1
73717: PUSH
73718: LD_INT 4
73720: PLUS
73721: PUSH
73722: LD_VAR 0 2
73726: PUSH
73727: LD_INT 4
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: LIST
73734: PUSH
73735: LD_VAR 0 1
73739: PUSH
73740: LD_INT 3
73742: PLUS
73743: PUSH
73744: LD_VAR 0 2
73748: PUSH
73749: LD_INT 3
73751: PLUS
73752: PUSH
73753: LD_INT 5
73755: PUSH
73756: EMPTY
73757: LIST
73758: LIST
73759: LIST
73760: PUSH
73761: LD_VAR 0 1
73765: PUSH
73766: LD_VAR 0 2
73770: PUSH
73771: LD_INT 4
73773: PLUS
73774: PUSH
73775: LD_INT 0
73777: PUSH
73778: EMPTY
73779: LIST
73780: LIST
73781: LIST
73782: PUSH
73783: EMPTY
73784: LIST
73785: LIST
73786: LIST
73787: LIST
73788: LIST
73789: ST_TO_ADDR
// end ; 1 :
73790: GO 74490
73792: LD_INT 1
73794: DOUBLE
73795: EQUAL
73796: IFTRUE 73800
73798: GO 73933
73800: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73801: LD_ADDR_VAR 0 5
73805: PUSH
73806: LD_VAR 0 1
73810: PUSH
73811: LD_VAR 0 2
73815: PUSH
73816: LD_INT 4
73818: MINUS
73819: PUSH
73820: LD_INT 3
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: LIST
73827: PUSH
73828: LD_VAR 0 1
73832: PUSH
73833: LD_INT 3
73835: MINUS
73836: PUSH
73837: LD_VAR 0 2
73841: PUSH
73842: LD_INT 3
73844: MINUS
73845: PUSH
73846: LD_INT 2
73848: PUSH
73849: EMPTY
73850: LIST
73851: LIST
73852: LIST
73853: PUSH
73854: LD_VAR 0 1
73858: PUSH
73859: LD_INT 4
73861: MINUS
73862: PUSH
73863: LD_VAR 0 2
73867: PUSH
73868: LD_INT 1
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: LIST
73875: PUSH
73876: LD_VAR 0 1
73880: PUSH
73881: LD_VAR 0 2
73885: PUSH
73886: LD_INT 3
73888: PLUS
73889: PUSH
73890: LD_INT 0
73892: PUSH
73893: EMPTY
73894: LIST
73895: LIST
73896: LIST
73897: PUSH
73898: LD_VAR 0 1
73902: PUSH
73903: LD_INT 4
73905: PLUS
73906: PUSH
73907: LD_VAR 0 2
73911: PUSH
73912: LD_INT 4
73914: PLUS
73915: PUSH
73916: LD_INT 5
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: LIST
73923: PUSH
73924: EMPTY
73925: LIST
73926: LIST
73927: LIST
73928: LIST
73929: LIST
73930: ST_TO_ADDR
// end ; 2 :
73931: GO 74490
73933: LD_INT 2
73935: DOUBLE
73936: EQUAL
73937: IFTRUE 73941
73939: GO 74070
73941: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73942: LD_ADDR_VAR 0 5
73946: PUSH
73947: LD_VAR 0 1
73951: PUSH
73952: LD_VAR 0 2
73956: PUSH
73957: LD_INT 3
73959: MINUS
73960: PUSH
73961: LD_INT 3
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: LIST
73968: PUSH
73969: LD_VAR 0 1
73973: PUSH
73974: LD_INT 4
73976: PLUS
73977: PUSH
73978: LD_VAR 0 2
73982: PUSH
73983: LD_INT 4
73985: PUSH
73986: EMPTY
73987: LIST
73988: LIST
73989: LIST
73990: PUSH
73991: LD_VAR 0 1
73995: PUSH
73996: LD_VAR 0 2
74000: PUSH
74001: LD_INT 4
74003: PLUS
74004: PUSH
74005: LD_INT 0
74007: PUSH
74008: EMPTY
74009: LIST
74010: LIST
74011: LIST
74012: PUSH
74013: LD_VAR 0 1
74017: PUSH
74018: LD_INT 3
74020: MINUS
74021: PUSH
74022: LD_VAR 0 2
74026: PUSH
74027: LD_INT 1
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: LIST
74034: PUSH
74035: LD_VAR 0 1
74039: PUSH
74040: LD_INT 4
74042: MINUS
74043: PUSH
74044: LD_VAR 0 2
74048: PUSH
74049: LD_INT 4
74051: MINUS
74052: PUSH
74053: LD_INT 2
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: LIST
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: LIST
74065: LIST
74066: LIST
74067: ST_TO_ADDR
// end ; 3 :
74068: GO 74490
74070: LD_INT 3
74072: DOUBLE
74073: EQUAL
74074: IFTRUE 74078
74076: GO 74211
74078: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74079: LD_ADDR_VAR 0 5
74083: PUSH
74084: LD_VAR 0 1
74088: PUSH
74089: LD_INT 3
74091: PLUS
74092: PUSH
74093: LD_VAR 0 2
74097: PUSH
74098: LD_INT 4
74100: PUSH
74101: EMPTY
74102: LIST
74103: LIST
74104: LIST
74105: PUSH
74106: LD_VAR 0 1
74110: PUSH
74111: LD_INT 4
74113: PLUS
74114: PUSH
74115: LD_VAR 0 2
74119: PUSH
74120: LD_INT 4
74122: PLUS
74123: PUSH
74124: LD_INT 5
74126: PUSH
74127: EMPTY
74128: LIST
74129: LIST
74130: LIST
74131: PUSH
74132: LD_VAR 0 1
74136: PUSH
74137: LD_INT 4
74139: MINUS
74140: PUSH
74141: LD_VAR 0 2
74145: PUSH
74146: LD_INT 1
74148: PUSH
74149: EMPTY
74150: LIST
74151: LIST
74152: LIST
74153: PUSH
74154: LD_VAR 0 1
74158: PUSH
74159: LD_VAR 0 2
74163: PUSH
74164: LD_INT 4
74166: MINUS
74167: PUSH
74168: LD_INT 3
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: LIST
74175: PUSH
74176: LD_VAR 0 1
74180: PUSH
74181: LD_INT 3
74183: MINUS
74184: PUSH
74185: LD_VAR 0 2
74189: PUSH
74190: LD_INT 3
74192: MINUS
74193: PUSH
74194: LD_INT 2
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: LIST
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: LIST
74206: LIST
74207: LIST
74208: ST_TO_ADDR
// end ; 4 :
74209: GO 74490
74211: LD_INT 4
74213: DOUBLE
74214: EQUAL
74215: IFTRUE 74219
74217: GO 74352
74219: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74220: LD_ADDR_VAR 0 5
74224: PUSH
74225: LD_VAR 0 1
74229: PUSH
74230: LD_VAR 0 2
74234: PUSH
74235: LD_INT 4
74237: PLUS
74238: PUSH
74239: LD_INT 0
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: LIST
74246: PUSH
74247: LD_VAR 0 1
74251: PUSH
74252: LD_INT 3
74254: PLUS
74255: PUSH
74256: LD_VAR 0 2
74260: PUSH
74261: LD_INT 3
74263: PLUS
74264: PUSH
74265: LD_INT 5
74267: PUSH
74268: EMPTY
74269: LIST
74270: LIST
74271: LIST
74272: PUSH
74273: LD_VAR 0 1
74277: PUSH
74278: LD_INT 4
74280: PLUS
74281: PUSH
74282: LD_VAR 0 2
74286: PUSH
74287: LD_INT 4
74289: PUSH
74290: EMPTY
74291: LIST
74292: LIST
74293: LIST
74294: PUSH
74295: LD_VAR 0 1
74299: PUSH
74300: LD_VAR 0 2
74304: PUSH
74305: LD_INT 3
74307: MINUS
74308: PUSH
74309: LD_INT 3
74311: PUSH
74312: EMPTY
74313: LIST
74314: LIST
74315: LIST
74316: PUSH
74317: LD_VAR 0 1
74321: PUSH
74322: LD_INT 4
74324: MINUS
74325: PUSH
74326: LD_VAR 0 2
74330: PUSH
74331: LD_INT 4
74333: MINUS
74334: PUSH
74335: LD_INT 2
74337: PUSH
74338: EMPTY
74339: LIST
74340: LIST
74341: LIST
74342: PUSH
74343: EMPTY
74344: LIST
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: ST_TO_ADDR
// end ; 5 :
74350: GO 74490
74352: LD_INT 5
74354: DOUBLE
74355: EQUAL
74356: IFTRUE 74360
74358: GO 74489
74360: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74361: LD_ADDR_VAR 0 5
74365: PUSH
74366: LD_VAR 0 1
74370: PUSH
74371: LD_INT 4
74373: MINUS
74374: PUSH
74375: LD_VAR 0 2
74379: PUSH
74380: LD_INT 1
74382: PUSH
74383: EMPTY
74384: LIST
74385: LIST
74386: LIST
74387: PUSH
74388: LD_VAR 0 1
74392: PUSH
74393: LD_VAR 0 2
74397: PUSH
74398: LD_INT 4
74400: MINUS
74401: PUSH
74402: LD_INT 3
74404: PUSH
74405: EMPTY
74406: LIST
74407: LIST
74408: LIST
74409: PUSH
74410: LD_VAR 0 1
74414: PUSH
74415: LD_INT 4
74417: PLUS
74418: PUSH
74419: LD_VAR 0 2
74423: PUSH
74424: LD_INT 4
74426: PLUS
74427: PUSH
74428: LD_INT 5
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: LIST
74435: PUSH
74436: LD_VAR 0 1
74440: PUSH
74441: LD_INT 3
74443: PLUS
74444: PUSH
74445: LD_VAR 0 2
74449: PUSH
74450: LD_INT 4
74452: PUSH
74453: EMPTY
74454: LIST
74455: LIST
74456: LIST
74457: PUSH
74458: LD_VAR 0 1
74462: PUSH
74463: LD_VAR 0 2
74467: PUSH
74468: LD_INT 3
74470: PLUS
74471: PUSH
74472: LD_INT 0
74474: PUSH
74475: EMPTY
74476: LIST
74477: LIST
74478: LIST
74479: PUSH
74480: EMPTY
74481: LIST
74482: LIST
74483: LIST
74484: LIST
74485: LIST
74486: ST_TO_ADDR
// end ; end ;
74487: GO 74490
74489: POP
// result := list ;
74490: LD_ADDR_VAR 0 4
74494: PUSH
74495: LD_VAR 0 5
74499: ST_TO_ADDR
// end ;
74500: LD_VAR 0 4
74504: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74505: LD_INT 0
74507: PPUSH
74508: PPUSH
74509: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74510: LD_VAR 0 1
74514: NOT
74515: IFTRUE 74543
74517: PUSH
74518: LD_VAR 0 2
74522: PUSH
74523: LD_INT 1
74525: PUSH
74526: LD_INT 2
74528: PUSH
74529: LD_INT 3
74531: PUSH
74532: LD_INT 4
74534: PUSH
74535: EMPTY
74536: LIST
74537: LIST
74538: LIST
74539: LIST
74540: IN
74541: NOT
74542: OR
74543: IFFALSE 74547
// exit ;
74545: GO 74630
// tmp := [ ] ;
74547: LD_ADDR_VAR 0 5
74551: PUSH
74552: EMPTY
74553: ST_TO_ADDR
// for i in units do
74554: LD_ADDR_VAR 0 4
74558: PUSH
74559: LD_VAR 0 1
74563: PUSH
74564: FOR_IN
74565: IFFALSE 74599
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
74567: LD_ADDR_VAR 0 5
74571: PUSH
74572: LD_VAR 0 5
74576: PPUSH
74577: LD_VAR 0 4
74581: PPUSH
74582: LD_VAR 0 2
74586: PPUSH
74587: CALL_OW 259
74591: PPUSH
74592: CALL 76025 0 2
74596: ST_TO_ADDR
74597: GO 74564
74599: POP
74600: POP
// if not tmp then
74601: LD_VAR 0 5
74605: NOT
74606: IFFALSE 74610
// exit ;
74608: GO 74630
// result := SortListByListDesc ( units , tmp ) ;
74610: LD_ADDR_VAR 0 3
74614: PUSH
74615: LD_VAR 0 1
74619: PPUSH
74620: LD_VAR 0 5
74624: PPUSH
74625: CALL_OW 77
74629: ST_TO_ADDR
// end ;
74630: LD_VAR 0 3
74634: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74635: LD_INT 0
74637: PPUSH
74638: PPUSH
74639: PPUSH
// result := false ;
74640: LD_ADDR_VAR 0 3
74644: PUSH
74645: LD_INT 0
74647: ST_TO_ADDR
// if not building then
74648: LD_VAR 0 2
74652: NOT
74653: IFFALSE 74657
// exit ;
74655: GO 74801
// x := GetX ( building ) ;
74657: LD_ADDR_VAR 0 4
74661: PUSH
74662: LD_VAR 0 2
74666: PPUSH
74667: CALL_OW 250
74671: ST_TO_ADDR
// y := GetY ( building ) ;
74672: LD_ADDR_VAR 0 5
74676: PUSH
74677: LD_VAR 0 2
74681: PPUSH
74682: CALL_OW 251
74686: ST_TO_ADDR
// if not x or not y then
74687: LD_VAR 0 4
74691: NOT
74692: IFTRUE 74701
74694: PUSH
74695: LD_VAR 0 5
74699: NOT
74700: OR
74701: IFFALSE 74705
// exit ;
74703: GO 74801
// if GetTaskList ( unit ) then
74705: LD_VAR 0 1
74709: PPUSH
74710: CALL_OW 437
74714: IFFALSE 74801
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74716: LD_STRING e
74718: PUSH
74719: LD_VAR 0 1
74723: PPUSH
74724: CALL_OW 437
74728: PUSH
74729: LD_INT 1
74731: ARRAY
74732: PUSH
74733: LD_INT 1
74735: ARRAY
74736: EQUAL
74737: IFFALSE 74764
74739: PUSH
74740: LD_VAR 0 4
74744: PUSH
74745: LD_VAR 0 1
74749: PPUSH
74750: CALL_OW 437
74754: PUSH
74755: LD_INT 1
74757: ARRAY
74758: PUSH
74759: LD_INT 2
74761: ARRAY
74762: EQUAL
74763: AND
74764: IFFALSE 74791
74766: PUSH
74767: LD_VAR 0 5
74771: PUSH
74772: LD_VAR 0 1
74776: PPUSH
74777: CALL_OW 437
74781: PUSH
74782: LD_INT 1
74784: ARRAY
74785: PUSH
74786: LD_INT 3
74788: ARRAY
74789: EQUAL
74790: AND
74791: IFFALSE 74801
// result := true end ;
74793: LD_ADDR_VAR 0 3
74797: PUSH
74798: LD_INT 1
74800: ST_TO_ADDR
// end ;
74801: LD_VAR 0 3
74805: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74806: LD_INT 0
74808: PPUSH
// result := false ;
74809: LD_ADDR_VAR 0 4
74813: PUSH
74814: LD_INT 0
74816: ST_TO_ADDR
// if GetTaskList ( unit ) then
74817: LD_VAR 0 1
74821: PPUSH
74822: CALL_OW 437
74826: IFFALSE 74913
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74828: LD_STRING M
74830: PUSH
74831: LD_VAR 0 1
74835: PPUSH
74836: CALL_OW 437
74840: PUSH
74841: LD_INT 1
74843: ARRAY
74844: PUSH
74845: LD_INT 1
74847: ARRAY
74848: EQUAL
74849: IFFALSE 74876
74851: PUSH
74852: LD_VAR 0 2
74856: PUSH
74857: LD_VAR 0 1
74861: PPUSH
74862: CALL_OW 437
74866: PUSH
74867: LD_INT 1
74869: ARRAY
74870: PUSH
74871: LD_INT 2
74873: ARRAY
74874: EQUAL
74875: AND
74876: IFFALSE 74903
74878: PUSH
74879: LD_VAR 0 3
74883: PUSH
74884: LD_VAR 0 1
74888: PPUSH
74889: CALL_OW 437
74893: PUSH
74894: LD_INT 1
74896: ARRAY
74897: PUSH
74898: LD_INT 3
74900: ARRAY
74901: EQUAL
74902: AND
74903: IFFALSE 74913
// result := true ;
74905: LD_ADDR_VAR 0 4
74909: PUSH
74910: LD_INT 1
74912: ST_TO_ADDR
// end ; end ;
74913: LD_VAR 0 4
74917: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74918: LD_INT 0
74920: PPUSH
74921: PPUSH
74922: PPUSH
74923: PPUSH
// if not unit or not area then
74924: LD_VAR 0 1
74928: NOT
74929: IFTRUE 74938
74931: PUSH
74932: LD_VAR 0 2
74936: NOT
74937: OR
74938: IFFALSE 74942
// exit ;
74940: GO 75118
// tmp := AreaToList ( area , i ) ;
74942: LD_ADDR_VAR 0 6
74946: PUSH
74947: LD_VAR 0 2
74951: PPUSH
74952: LD_VAR 0 5
74956: PPUSH
74957: CALL_OW 517
74961: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74962: LD_ADDR_VAR 0 5
74966: PUSH
74967: DOUBLE
74968: LD_INT 1
74970: DEC
74971: ST_TO_ADDR
74972: LD_VAR 0 6
74976: PUSH
74977: LD_INT 1
74979: ARRAY
74980: PUSH
74981: FOR_TO
74982: IFFALSE 75116
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74984: LD_ADDR_VAR 0 7
74988: PUSH
74989: LD_VAR 0 6
74993: PUSH
74994: LD_INT 1
74996: ARRAY
74997: PUSH
74998: LD_VAR 0 5
75002: ARRAY
75003: PUSH
75004: LD_VAR 0 6
75008: PUSH
75009: LD_INT 2
75011: ARRAY
75012: PUSH
75013: LD_VAR 0 5
75017: ARRAY
75018: PUSH
75019: EMPTY
75020: LIST
75021: LIST
75022: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
75023: LD_INT 92
75025: PUSH
75026: LD_VAR 0 7
75030: PUSH
75031: LD_INT 1
75033: ARRAY
75034: PUSH
75035: LD_VAR 0 7
75039: PUSH
75040: LD_INT 2
75042: ARRAY
75043: PUSH
75044: LD_INT 2
75046: PUSH
75047: EMPTY
75048: LIST
75049: LIST
75050: LIST
75051: LIST
75052: PPUSH
75053: CALL_OW 69
75057: PUSH
75058: LD_INT 0
75060: EQUAL
75061: IFFALSE 75114
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75063: LD_VAR 0 1
75067: PPUSH
75068: LD_VAR 0 7
75072: PUSH
75073: LD_INT 1
75075: ARRAY
75076: PPUSH
75077: LD_VAR 0 7
75081: PUSH
75082: LD_INT 2
75084: ARRAY
75085: PPUSH
75086: LD_VAR 0 3
75090: PPUSH
75091: CALL_OW 48
// result := IsPlaced ( unit ) ;
75095: LD_ADDR_VAR 0 4
75099: PUSH
75100: LD_VAR 0 1
75104: PPUSH
75105: CALL_OW 305
75109: ST_TO_ADDR
// exit ;
75110: POP
75111: POP
75112: GO 75118
// end ; end ;
75114: GO 74981
75116: POP
75117: POP
// end ;
75118: LD_VAR 0 4
75122: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75123: LD_INT 0
75125: PPUSH
75126: PPUSH
75127: PPUSH
// if not side or side > 8 then
75128: LD_VAR 0 1
75132: NOT
75133: IFTRUE 75145
75135: PUSH
75136: LD_VAR 0 1
75140: PUSH
75141: LD_INT 8
75143: GREATER
75144: OR
75145: IFFALSE 75149
// exit ;
75147: GO 75336
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75149: LD_ADDR_VAR 0 4
75153: PUSH
75154: LD_INT 22
75156: PUSH
75157: LD_VAR 0 1
75161: PUSH
75162: EMPTY
75163: LIST
75164: LIST
75165: PUSH
75166: LD_INT 21
75168: PUSH
75169: LD_INT 3
75171: PUSH
75172: EMPTY
75173: LIST
75174: LIST
75175: PUSH
75176: EMPTY
75177: LIST
75178: LIST
75179: PPUSH
75180: CALL_OW 69
75184: ST_TO_ADDR
// if not tmp then
75185: LD_VAR 0 4
75189: NOT
75190: IFFALSE 75194
// exit ;
75192: GO 75336
// enable_addtolog := true ;
75194: LD_ADDR_OWVAR 81
75198: PUSH
75199: LD_INT 1
75201: ST_TO_ADDR
// AddToLog ( [ ) ;
75202: LD_STRING [
75204: PPUSH
75205: CALL_OW 561
// for i in tmp do
75209: LD_ADDR_VAR 0 3
75213: PUSH
75214: LD_VAR 0 4
75218: PUSH
75219: FOR_IN
75220: IFFALSE 75327
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75222: LD_STRING [
75224: PUSH
75225: LD_VAR 0 3
75229: PPUSH
75230: CALL_OW 266
75234: STR
75235: PUSH
75236: LD_STRING , 
75238: STR
75239: PUSH
75240: LD_VAR 0 3
75244: PPUSH
75245: CALL_OW 250
75249: STR
75250: PUSH
75251: LD_STRING , 
75253: STR
75254: PUSH
75255: LD_VAR 0 3
75259: PPUSH
75260: CALL_OW 251
75264: STR
75265: PUSH
75266: LD_STRING , 
75268: STR
75269: PUSH
75270: LD_VAR 0 3
75274: PPUSH
75275: CALL_OW 254
75279: STR
75280: PUSH
75281: LD_STRING , 
75283: STR
75284: PUSH
75285: LD_VAR 0 3
75289: PPUSH
75290: LD_INT 1
75292: PPUSH
75293: CALL_OW 268
75297: STR
75298: PUSH
75299: LD_STRING , 
75301: STR
75302: PUSH
75303: LD_VAR 0 3
75307: PPUSH
75308: LD_INT 2
75310: PPUSH
75311: CALL_OW 268
75315: STR
75316: PUSH
75317: LD_STRING ],
75319: STR
75320: PPUSH
75321: CALL_OW 561
// end ;
75325: GO 75219
75327: POP
75328: POP
// AddToLog ( ]; ) ;
75329: LD_STRING ];
75331: PPUSH
75332: CALL_OW 561
// end ;
75336: LD_VAR 0 2
75340: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75341: LD_INT 0
75343: PPUSH
75344: PPUSH
75345: PPUSH
75346: PPUSH
75347: PPUSH
// if not area or not rate or not max then
75348: LD_VAR 0 1
75352: NOT
75353: IFTRUE 75362
75355: PUSH
75356: LD_VAR 0 2
75360: NOT
75361: OR
75362: IFTRUE 75371
75364: PUSH
75365: LD_VAR 0 4
75369: NOT
75370: OR
75371: IFFALSE 75375
// exit ;
75373: GO 75564
// while 1 do
75375: LD_INT 1
75377: IFFALSE 75564
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75379: LD_ADDR_VAR 0 9
75383: PUSH
75384: LD_VAR 0 1
75388: PPUSH
75389: LD_INT 1
75391: PPUSH
75392: CALL_OW 287
75396: PUSH
75397: LD_INT 10
75399: MUL
75400: ST_TO_ADDR
// r := rate / 10 ;
75401: LD_ADDR_VAR 0 7
75405: PUSH
75406: LD_VAR 0 2
75410: PUSH
75411: LD_INT 10
75413: DIVREAL
75414: ST_TO_ADDR
// time := 1 1$00 ;
75415: LD_ADDR_VAR 0 8
75419: PUSH
75420: LD_INT 2100
75422: ST_TO_ADDR
// if amount < min then
75423: LD_VAR 0 9
75427: PUSH
75428: LD_VAR 0 3
75432: LESS
75433: IFFALSE 75451
// r := r * 2 else
75435: LD_ADDR_VAR 0 7
75439: PUSH
75440: LD_VAR 0 7
75444: PUSH
75445: LD_INT 2
75447: MUL
75448: ST_TO_ADDR
75449: GO 75477
// if amount > max then
75451: LD_VAR 0 9
75455: PUSH
75456: LD_VAR 0 4
75460: GREATER
75461: IFFALSE 75477
// r := r / 2 ;
75463: LD_ADDR_VAR 0 7
75467: PUSH
75468: LD_VAR 0 7
75472: PUSH
75473: LD_INT 2
75475: DIVREAL
75476: ST_TO_ADDR
// time := time / r ;
75477: LD_ADDR_VAR 0 8
75481: PUSH
75482: LD_VAR 0 8
75486: PUSH
75487: LD_VAR 0 7
75491: DIVREAL
75492: ST_TO_ADDR
// if time < 0 then
75493: LD_VAR 0 8
75497: PUSH
75498: LD_INT 0
75500: LESS
75501: IFFALSE 75518
// time := time * - 1 ;
75503: LD_ADDR_VAR 0 8
75507: PUSH
75508: LD_VAR 0 8
75512: PUSH
75513: LD_INT 1
75515: NEG
75516: MUL
75517: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75518: LD_VAR 0 8
75522: PUSH
75523: LD_INT 35
75525: PPUSH
75526: LD_INT 875
75528: PPUSH
75529: CALL_OW 12
75533: PLUS
75534: PPUSH
75535: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75539: LD_INT 1
75541: PPUSH
75542: LD_INT 5
75544: PPUSH
75545: CALL_OW 12
75549: PPUSH
75550: LD_VAR 0 1
75554: PPUSH
75555: LD_INT 1
75557: PPUSH
75558: CALL_OW 55
// end ;
75562: GO 75375
// end ;
75564: LD_VAR 0 5
75568: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75569: LD_INT 0
75571: PPUSH
75572: PPUSH
75573: PPUSH
75574: PPUSH
75575: PPUSH
75576: PPUSH
75577: PPUSH
75578: PPUSH
// if not turrets or not factories then
75579: LD_VAR 0 1
75583: NOT
75584: IFTRUE 75593
75586: PUSH
75587: LD_VAR 0 2
75591: NOT
75592: OR
75593: IFFALSE 75597
// exit ;
75595: GO 75904
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75597: LD_ADDR_VAR 0 10
75601: PUSH
75602: LD_INT 5
75604: PUSH
75605: LD_INT 6
75607: PUSH
75608: EMPTY
75609: LIST
75610: LIST
75611: PUSH
75612: LD_INT 2
75614: PUSH
75615: LD_INT 4
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: PUSH
75622: LD_INT 3
75624: PUSH
75625: LD_INT 5
75627: PUSH
75628: EMPTY
75629: LIST
75630: LIST
75631: PUSH
75632: EMPTY
75633: LIST
75634: LIST
75635: LIST
75636: PUSH
75637: LD_INT 24
75639: PUSH
75640: LD_INT 25
75642: PUSH
75643: EMPTY
75644: LIST
75645: LIST
75646: PUSH
75647: LD_INT 23
75649: PUSH
75650: LD_INT 27
75652: PUSH
75653: EMPTY
75654: LIST
75655: LIST
75656: PUSH
75657: EMPTY
75658: LIST
75659: LIST
75660: PUSH
75661: LD_INT 42
75663: PUSH
75664: LD_INT 43
75666: PUSH
75667: EMPTY
75668: LIST
75669: LIST
75670: PUSH
75671: LD_INT 44
75673: PUSH
75674: LD_INT 46
75676: PUSH
75677: EMPTY
75678: LIST
75679: LIST
75680: PUSH
75681: LD_INT 45
75683: PUSH
75684: LD_INT 47
75686: PUSH
75687: EMPTY
75688: LIST
75689: LIST
75690: PUSH
75691: EMPTY
75692: LIST
75693: LIST
75694: LIST
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: LIST
75700: ST_TO_ADDR
// result := [ ] ;
75701: LD_ADDR_VAR 0 3
75705: PUSH
75706: EMPTY
75707: ST_TO_ADDR
// for i in turrets do
75708: LD_ADDR_VAR 0 4
75712: PUSH
75713: LD_VAR 0 1
75717: PUSH
75718: FOR_IN
75719: IFFALSE 75902
// begin nat := GetNation ( i ) ;
75721: LD_ADDR_VAR 0 7
75725: PUSH
75726: LD_VAR 0 4
75730: PPUSH
75731: CALL_OW 248
75735: ST_TO_ADDR
// weapon := 0 ;
75736: LD_ADDR_VAR 0 8
75740: PUSH
75741: LD_INT 0
75743: ST_TO_ADDR
// if not nat then
75744: LD_VAR 0 7
75748: NOT
75749: IFFALSE 75753
// continue ;
75751: GO 75718
// for j in list [ nat ] do
75753: LD_ADDR_VAR 0 5
75757: PUSH
75758: LD_VAR 0 10
75762: PUSH
75763: LD_VAR 0 7
75767: ARRAY
75768: PUSH
75769: FOR_IN
75770: IFFALSE 75811
// if GetBWeapon ( i ) = j [ 1 ] then
75772: LD_VAR 0 4
75776: PPUSH
75777: CALL_OW 269
75781: PUSH
75782: LD_VAR 0 5
75786: PUSH
75787: LD_INT 1
75789: ARRAY
75790: EQUAL
75791: IFFALSE 75809
// begin weapon := j [ 2 ] ;
75793: LD_ADDR_VAR 0 8
75797: PUSH
75798: LD_VAR 0 5
75802: PUSH
75803: LD_INT 2
75805: ARRAY
75806: ST_TO_ADDR
// break ;
75807: GO 75811
// end ;
75809: GO 75769
75811: POP
75812: POP
// if not weapon then
75813: LD_VAR 0 8
75817: NOT
75818: IFFALSE 75822
// continue ;
75820: GO 75718
// for k in factories do
75822: LD_ADDR_VAR 0 6
75826: PUSH
75827: LD_VAR 0 2
75831: PUSH
75832: FOR_IN
75833: IFFALSE 75898
// begin weapons := AvailableWeaponList ( k ) ;
75835: LD_ADDR_VAR 0 9
75839: PUSH
75840: LD_VAR 0 6
75844: PPUSH
75845: CALL_OW 478
75849: ST_TO_ADDR
// if not weapons then
75850: LD_VAR 0 9
75854: NOT
75855: IFFALSE 75859
// continue ;
75857: GO 75832
// if weapon in weapons then
75859: LD_VAR 0 8
75863: PUSH
75864: LD_VAR 0 9
75868: IN
75869: IFFALSE 75896
// begin result := [ i , weapon ] ;
75871: LD_ADDR_VAR 0 3
75875: PUSH
75876: LD_VAR 0 4
75880: PUSH
75881: LD_VAR 0 8
75885: PUSH
75886: EMPTY
75887: LIST
75888: LIST
75889: ST_TO_ADDR
// exit ;
75890: POP
75891: POP
75892: POP
75893: POP
75894: GO 75904
// end ; end ;
75896: GO 75832
75898: POP
75899: POP
// end ;
75900: GO 75718
75902: POP
75903: POP
// end ;
75904: LD_VAR 0 3
75908: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75909: LD_INT 0
75911: PPUSH
// if not side or side > 8 then
75912: LD_VAR 0 3
75916: NOT
75917: IFTRUE 75929
75919: PUSH
75920: LD_VAR 0 3
75924: PUSH
75925: LD_INT 8
75927: GREATER
75928: OR
75929: IFFALSE 75933
// exit ;
75931: GO 75992
// if not range then
75933: LD_VAR 0 4
75937: NOT
75938: IFFALSE 75949
// range := - 12 ;
75940: LD_ADDR_VAR 0 4
75944: PUSH
75945: LD_INT 12
75947: NEG
75948: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75949: LD_VAR 0 1
75953: PPUSH
75954: LD_VAR 0 2
75958: PPUSH
75959: LD_VAR 0 3
75963: PPUSH
75964: LD_VAR 0 4
75968: PPUSH
75969: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75973: LD_VAR 0 1
75977: PPUSH
75978: LD_VAR 0 2
75982: PPUSH
75983: LD_VAR 0 3
75987: PPUSH
75988: CALL_OW 331
// end ;
75992: LD_VAR 0 5
75996: RET
// export function Video ( mode ) ; begin
75997: LD_INT 0
75999: PPUSH
// ingame_video = mode ;
76000: LD_ADDR_OWVAR 52
76004: PUSH
76005: LD_VAR 0 1
76009: ST_TO_ADDR
// interface_hidden = mode ;
76010: LD_ADDR_OWVAR 54
76014: PUSH
76015: LD_VAR 0 1
76019: ST_TO_ADDR
// end ;
76020: LD_VAR 0 2
76024: RET
// export function Join ( array , element ) ; begin
76025: LD_INT 0
76027: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76028: LD_ADDR_VAR 0 3
76032: PUSH
76033: LD_VAR 0 1
76037: PPUSH
76038: LD_VAR 0 1
76042: PUSH
76043: LD_INT 1
76045: PLUS
76046: PPUSH
76047: LD_VAR 0 2
76051: PPUSH
76052: CALL_OW 1
76056: ST_TO_ADDR
// end ;
76057: LD_VAR 0 3
76061: RET
// export function JoinUnion ( array , element ) ; begin
76062: LD_INT 0
76064: PPUSH
// result := array union element ;
76065: LD_ADDR_VAR 0 3
76069: PUSH
76070: LD_VAR 0 1
76074: PUSH
76075: LD_VAR 0 2
76079: UNION
76080: ST_TO_ADDR
// end ;
76081: LD_VAR 0 3
76085: RET
// export function GetBehemoths ( side ) ; begin
76086: LD_INT 0
76088: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76089: LD_ADDR_VAR 0 2
76093: PUSH
76094: LD_INT 22
76096: PUSH
76097: LD_VAR 0 1
76101: PUSH
76102: EMPTY
76103: LIST
76104: LIST
76105: PUSH
76106: LD_INT 31
76108: PUSH
76109: LD_INT 25
76111: PUSH
76112: EMPTY
76113: LIST
76114: LIST
76115: PUSH
76116: EMPTY
76117: LIST
76118: LIST
76119: PPUSH
76120: CALL_OW 69
76124: ST_TO_ADDR
// end ;
76125: LD_VAR 0 2
76129: RET
// export function Shuffle ( array ) ; var i , index ; begin
76130: LD_INT 0
76132: PPUSH
76133: PPUSH
76134: PPUSH
// result := [ ] ;
76135: LD_ADDR_VAR 0 2
76139: PUSH
76140: EMPTY
76141: ST_TO_ADDR
// if not array then
76142: LD_VAR 0 1
76146: NOT
76147: IFFALSE 76151
// exit ;
76149: GO 76250
// Randomize ;
76151: CALL_OW 10
// for i = array downto 1 do
76155: LD_ADDR_VAR 0 3
76159: PUSH
76160: DOUBLE
76161: LD_VAR 0 1
76165: INC
76166: ST_TO_ADDR
76167: LD_INT 1
76169: PUSH
76170: FOR_DOWNTO
76171: IFFALSE 76248
// begin index := rand ( 1 , array ) ;
76173: LD_ADDR_VAR 0 4
76177: PUSH
76178: LD_INT 1
76180: PPUSH
76181: LD_VAR 0 1
76185: PPUSH
76186: CALL_OW 12
76190: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76191: LD_ADDR_VAR 0 2
76195: PUSH
76196: LD_VAR 0 2
76200: PPUSH
76201: LD_VAR 0 2
76205: PUSH
76206: LD_INT 1
76208: PLUS
76209: PPUSH
76210: LD_VAR 0 1
76214: PUSH
76215: LD_VAR 0 4
76219: ARRAY
76220: PPUSH
76221: CALL_OW 2
76225: ST_TO_ADDR
// array := Delete ( array , index ) ;
76226: LD_ADDR_VAR 0 1
76230: PUSH
76231: LD_VAR 0 1
76235: PPUSH
76236: LD_VAR 0 4
76240: PPUSH
76241: CALL_OW 3
76245: ST_TO_ADDR
// end ;
76246: GO 76170
76248: POP
76249: POP
// end ;
76250: LD_VAR 0 2
76254: RET
// export function GetBaseMaterials ( base ) ; begin
76255: LD_INT 0
76257: PPUSH
// result := [ 0 , 0 , 0 ] ;
76258: LD_ADDR_VAR 0 2
76262: PUSH
76263: LD_INT 0
76265: PUSH
76266: LD_INT 0
76268: PUSH
76269: LD_INT 0
76271: PUSH
76272: EMPTY
76273: LIST
76274: LIST
76275: LIST
76276: ST_TO_ADDR
// if not base then
76277: LD_VAR 0 1
76281: NOT
76282: IFFALSE 76286
// exit ;
76284: GO 76335
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76286: LD_ADDR_VAR 0 2
76290: PUSH
76291: LD_VAR 0 1
76295: PPUSH
76296: LD_INT 1
76298: PPUSH
76299: CALL_OW 275
76303: PUSH
76304: LD_VAR 0 1
76308: PPUSH
76309: LD_INT 2
76311: PPUSH
76312: CALL_OW 275
76316: PUSH
76317: LD_VAR 0 1
76321: PPUSH
76322: LD_INT 3
76324: PPUSH
76325: CALL_OW 275
76329: PUSH
76330: EMPTY
76331: LIST
76332: LIST
76333: LIST
76334: ST_TO_ADDR
// end ;
76335: LD_VAR 0 2
76339: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76340: LD_INT 0
76342: PPUSH
76343: PPUSH
// result := array ;
76344: LD_ADDR_VAR 0 3
76348: PUSH
76349: LD_VAR 0 1
76353: ST_TO_ADDR
// if size >= result then
76354: LD_VAR 0 2
76358: PUSH
76359: LD_VAR 0 3
76363: GREATEREQUAL
76364: IFFALSE 76368
// exit ;
76366: GO 76418
// if size then
76368: LD_VAR 0 2
76372: IFFALSE 76418
// for i := array downto size do
76374: LD_ADDR_VAR 0 4
76378: PUSH
76379: DOUBLE
76380: LD_VAR 0 1
76384: INC
76385: ST_TO_ADDR
76386: LD_VAR 0 2
76390: PUSH
76391: FOR_DOWNTO
76392: IFFALSE 76416
// result := Delete ( result , result ) ;
76394: LD_ADDR_VAR 0 3
76398: PUSH
76399: LD_VAR 0 3
76403: PPUSH
76404: LD_VAR 0 3
76408: PPUSH
76409: CALL_OW 3
76413: ST_TO_ADDR
76414: GO 76391
76416: POP
76417: POP
// end ;
76418: LD_VAR 0 3
76422: RET
// export function ComExit ( unit ) ; var tmp ; begin
76423: LD_INT 0
76425: PPUSH
76426: PPUSH
// if not IsInUnit ( unit ) then
76427: LD_VAR 0 1
76431: PPUSH
76432: CALL_OW 310
76436: NOT
76437: IFFALSE 76441
// exit ;
76439: GO 76501
// tmp := IsInUnit ( unit ) ;
76441: LD_ADDR_VAR 0 3
76445: PUSH
76446: LD_VAR 0 1
76450: PPUSH
76451: CALL_OW 310
76455: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76456: LD_VAR 0 3
76460: PPUSH
76461: CALL_OW 247
76465: PUSH
76466: LD_INT 2
76468: EQUAL
76469: IFFALSE 76482
// ComExitVehicle ( unit ) else
76471: LD_VAR 0 1
76475: PPUSH
76476: CALL_OW 121
76480: GO 76491
// ComExitBuilding ( unit ) ;
76482: LD_VAR 0 1
76486: PPUSH
76487: CALL_OW 122
// result := tmp ;
76491: LD_ADDR_VAR 0 2
76495: PUSH
76496: LD_VAR 0 3
76500: ST_TO_ADDR
// end ;
76501: LD_VAR 0 2
76505: RET
// export function ComExitAll ( units ) ; var i ; begin
76506: LD_INT 0
76508: PPUSH
76509: PPUSH
// if not units then
76510: LD_VAR 0 1
76514: NOT
76515: IFFALSE 76519
// exit ;
76517: GO 76545
// for i in units do
76519: LD_ADDR_VAR 0 3
76523: PUSH
76524: LD_VAR 0 1
76528: PUSH
76529: FOR_IN
76530: IFFALSE 76543
// ComExit ( i ) ;
76532: LD_VAR 0 3
76536: PPUSH
76537: CALL 76423 0 1
76541: GO 76529
76543: POP
76544: POP
// end ;
76545: LD_VAR 0 2
76549: RET
// export function ResetHc ; begin
76550: LD_INT 0
76552: PPUSH
// InitHc ;
76553: CALL_OW 19
// hc_importance := 0 ;
76557: LD_ADDR_OWVAR 32
76561: PUSH
76562: LD_INT 0
76564: ST_TO_ADDR
// end ;
76565: LD_VAR 0 1
76569: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76570: LD_INT 0
76572: PPUSH
76573: PPUSH
76574: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76575: LD_ADDR_VAR 0 6
76579: PUSH
76580: LD_VAR 0 1
76584: PUSH
76585: LD_VAR 0 3
76589: PLUS
76590: PUSH
76591: LD_INT 2
76593: DIV
76594: ST_TO_ADDR
// if _x < 0 then
76595: LD_VAR 0 6
76599: PUSH
76600: LD_INT 0
76602: LESS
76603: IFFALSE 76620
// _x := _x * - 1 ;
76605: LD_ADDR_VAR 0 6
76609: PUSH
76610: LD_VAR 0 6
76614: PUSH
76615: LD_INT 1
76617: NEG
76618: MUL
76619: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76620: LD_ADDR_VAR 0 7
76624: PUSH
76625: LD_VAR 0 2
76629: PUSH
76630: LD_VAR 0 4
76634: PLUS
76635: PUSH
76636: LD_INT 2
76638: DIV
76639: ST_TO_ADDR
// if _y < 0 then
76640: LD_VAR 0 7
76644: PUSH
76645: LD_INT 0
76647: LESS
76648: IFFALSE 76665
// _y := _y * - 1 ;
76650: LD_ADDR_VAR 0 7
76654: PUSH
76655: LD_VAR 0 7
76659: PUSH
76660: LD_INT 1
76662: NEG
76663: MUL
76664: ST_TO_ADDR
// result := [ _x , _y ] ;
76665: LD_ADDR_VAR 0 5
76669: PUSH
76670: LD_VAR 0 6
76674: PUSH
76675: LD_VAR 0 7
76679: PUSH
76680: EMPTY
76681: LIST
76682: LIST
76683: ST_TO_ADDR
// end ;
76684: LD_VAR 0 5
76688: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76689: LD_INT 0
76691: PPUSH
76692: PPUSH
76693: PPUSH
76694: PPUSH
// task := GetTaskList ( unit ) ;
76695: LD_ADDR_VAR 0 7
76699: PUSH
76700: LD_VAR 0 1
76704: PPUSH
76705: CALL_OW 437
76709: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76710: LD_VAR 0 7
76714: NOT
76715: IFFALSE 76734
76717: PUSH
76718: LD_VAR 0 1
76722: PPUSH
76723: LD_VAR 0 2
76727: PPUSH
76728: CALL_OW 308
76732: NOT
76733: AND
76734: IFFALSE 76738
// exit ;
76736: GO 76856
// if IsInArea ( unit , area ) then
76738: LD_VAR 0 1
76742: PPUSH
76743: LD_VAR 0 2
76747: PPUSH
76748: CALL_OW 308
76752: IFFALSE 76770
// begin ComMoveToArea ( unit , goAway ) ;
76754: LD_VAR 0 1
76758: PPUSH
76759: LD_VAR 0 3
76763: PPUSH
76764: CALL_OW 113
// exit ;
76768: GO 76856
// end ; if task [ 1 ] [ 1 ] <> M then
76770: LD_VAR 0 7
76774: PUSH
76775: LD_INT 1
76777: ARRAY
76778: PUSH
76779: LD_INT 1
76781: ARRAY
76782: PUSH
76783: LD_STRING M
76785: NONEQUAL
76786: IFFALSE 76790
// exit ;
76788: GO 76856
// x := task [ 1 ] [ 2 ] ;
76790: LD_ADDR_VAR 0 5
76794: PUSH
76795: LD_VAR 0 7
76799: PUSH
76800: LD_INT 1
76802: ARRAY
76803: PUSH
76804: LD_INT 2
76806: ARRAY
76807: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76808: LD_ADDR_VAR 0 6
76812: PUSH
76813: LD_VAR 0 7
76817: PUSH
76818: LD_INT 1
76820: ARRAY
76821: PUSH
76822: LD_INT 3
76824: ARRAY
76825: ST_TO_ADDR
// if InArea ( x , y , area ) then
76826: LD_VAR 0 5
76830: PPUSH
76831: LD_VAR 0 6
76835: PPUSH
76836: LD_VAR 0 2
76840: PPUSH
76841: CALL_OW 309
76845: IFFALSE 76856
// ComStop ( unit ) ;
76847: LD_VAR 0 1
76851: PPUSH
76852: CALL_OW 141
// end ;
76856: LD_VAR 0 4
76860: RET
// export function Abs ( value ) ; begin
76861: LD_INT 0
76863: PPUSH
// result := value ;
76864: LD_ADDR_VAR 0 2
76868: PUSH
76869: LD_VAR 0 1
76873: ST_TO_ADDR
// if value < 0 then
76874: LD_VAR 0 1
76878: PUSH
76879: LD_INT 0
76881: LESS
76882: IFFALSE 76899
// result := value * - 1 ;
76884: LD_ADDR_VAR 0 2
76888: PUSH
76889: LD_VAR 0 1
76893: PUSH
76894: LD_INT 1
76896: NEG
76897: MUL
76898: ST_TO_ADDR
// end ;
76899: LD_VAR 0 2
76903: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76904: LD_INT 0
76906: PPUSH
76907: PPUSH
76908: PPUSH
76909: PPUSH
76910: PPUSH
76911: PPUSH
76912: PPUSH
76913: PPUSH
// if not unit or not building then
76914: LD_VAR 0 1
76918: NOT
76919: IFTRUE 76928
76921: PUSH
76922: LD_VAR 0 2
76926: NOT
76927: OR
76928: IFFALSE 76932
// exit ;
76930: GO 77160
// x := GetX ( building ) ;
76932: LD_ADDR_VAR 0 4
76936: PUSH
76937: LD_VAR 0 2
76941: PPUSH
76942: CALL_OW 250
76946: ST_TO_ADDR
// y := GetY ( building ) ;
76947: LD_ADDR_VAR 0 6
76951: PUSH
76952: LD_VAR 0 2
76956: PPUSH
76957: CALL_OW 251
76961: ST_TO_ADDR
// d := GetDir ( building ) ;
76962: LD_ADDR_VAR 0 8
76966: PUSH
76967: LD_VAR 0 2
76971: PPUSH
76972: CALL_OW 254
76976: ST_TO_ADDR
// r := 4 ;
76977: LD_ADDR_VAR 0 9
76981: PUSH
76982: LD_INT 4
76984: ST_TO_ADDR
// for i := 1 to 5 do
76985: LD_ADDR_VAR 0 10
76989: PUSH
76990: DOUBLE
76991: LD_INT 1
76993: DEC
76994: ST_TO_ADDR
76995: LD_INT 5
76997: PUSH
76998: FOR_TO
76999: IFFALSE 77158
// begin _x := ShiftX ( x , d , r + i ) ;
77001: LD_ADDR_VAR 0 5
77005: PUSH
77006: LD_VAR 0 4
77010: PPUSH
77011: LD_VAR 0 8
77015: PPUSH
77016: LD_VAR 0 9
77020: PUSH
77021: LD_VAR 0 10
77025: PLUS
77026: PPUSH
77027: CALL_OW 272
77031: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77032: LD_ADDR_VAR 0 7
77036: PUSH
77037: LD_VAR 0 6
77041: PPUSH
77042: LD_VAR 0 8
77046: PPUSH
77047: LD_VAR 0 9
77051: PUSH
77052: LD_VAR 0 10
77056: PLUS
77057: PPUSH
77058: CALL_OW 273
77062: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77063: LD_VAR 0 5
77067: PPUSH
77068: LD_VAR 0 7
77072: PPUSH
77073: CALL_OW 488
77077: IFFALSE 77112
77079: PUSH
77080: LD_VAR 0 5
77084: PPUSH
77085: LD_VAR 0 7
77089: PPUSH
77090: CALL_OW 428
77094: PPUSH
77095: CALL_OW 247
77099: PUSH
77100: LD_INT 3
77102: PUSH
77103: LD_INT 2
77105: PUSH
77106: EMPTY
77107: LIST
77108: LIST
77109: IN
77110: NOT
77111: AND
77112: IFFALSE 77156
// begin ComMoveXY ( unit , _x , _y ) ;
77114: LD_VAR 0 1
77118: PPUSH
77119: LD_VAR 0 5
77123: PPUSH
77124: LD_VAR 0 7
77128: PPUSH
77129: CALL_OW 111
// result := [ _x , _y ] ;
77133: LD_ADDR_VAR 0 3
77137: PUSH
77138: LD_VAR 0 5
77142: PUSH
77143: LD_VAR 0 7
77147: PUSH
77148: EMPTY
77149: LIST
77150: LIST
77151: ST_TO_ADDR
// exit ;
77152: POP
77153: POP
77154: GO 77160
// end ; end ;
77156: GO 76998
77158: POP
77159: POP
// end ;
77160: LD_VAR 0 3
77164: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77165: LD_INT 0
77167: PPUSH
77168: PPUSH
77169: PPUSH
// result := 0 ;
77170: LD_ADDR_VAR 0 3
77174: PUSH
77175: LD_INT 0
77177: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77178: LD_VAR 0 1
77182: PUSH
77183: LD_INT 0
77185: LESS
77186: IFTRUE 77198
77188: PUSH
77189: LD_VAR 0 1
77193: PUSH
77194: LD_INT 8
77196: GREATER
77197: OR
77198: IFTRUE 77210
77200: PUSH
77201: LD_VAR 0 2
77205: PUSH
77206: LD_INT 0
77208: LESS
77209: OR
77210: IFTRUE 77222
77212: PUSH
77213: LD_VAR 0 2
77217: PUSH
77218: LD_INT 8
77220: GREATER
77221: OR
77222: IFFALSE 77226
// exit ;
77224: GO 77301
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77226: LD_ADDR_VAR 0 4
77230: PUSH
77231: LD_INT 22
77233: PUSH
77234: LD_VAR 0 2
77238: PUSH
77239: EMPTY
77240: LIST
77241: LIST
77242: PPUSH
77243: CALL_OW 69
77247: PUSH
77248: FOR_IN
77249: IFFALSE 77299
// begin un := UnitShoot ( i ) ;
77251: LD_ADDR_VAR 0 5
77255: PUSH
77256: LD_VAR 0 4
77260: PPUSH
77261: CALL_OW 504
77265: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77266: LD_VAR 0 5
77270: PPUSH
77271: CALL_OW 255
77275: PUSH
77276: LD_VAR 0 1
77280: EQUAL
77281: IFFALSE 77297
// begin result := un ;
77283: LD_ADDR_VAR 0 3
77287: PUSH
77288: LD_VAR 0 5
77292: ST_TO_ADDR
// exit ;
77293: POP
77294: POP
77295: GO 77301
// end ; end ;
77297: GO 77248
77299: POP
77300: POP
// end ;
77301: LD_VAR 0 3
77305: RET
// export function GetCargoBay ( units ) ; begin
77306: LD_INT 0
77308: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77309: LD_ADDR_VAR 0 2
77313: PUSH
77314: LD_VAR 0 1
77318: PPUSH
77319: LD_INT 2
77321: PUSH
77322: LD_INT 34
77324: PUSH
77325: LD_INT 12
77327: PUSH
77328: EMPTY
77329: LIST
77330: LIST
77331: PUSH
77332: LD_INT 34
77334: PUSH
77335: LD_INT 51
77337: PUSH
77338: EMPTY
77339: LIST
77340: LIST
77341: PUSH
77342: LD_INT 34
77344: PUSH
77345: LD_INT 32
77347: PUSH
77348: EMPTY
77349: LIST
77350: LIST
77351: PUSH
77352: LD_INT 34
77354: PUSH
77355: LD_INT 89
77357: PUSH
77358: EMPTY
77359: LIST
77360: LIST
77361: PUSH
77362: EMPTY
77363: LIST
77364: LIST
77365: LIST
77366: LIST
77367: LIST
77368: PPUSH
77369: CALL_OW 72
77373: ST_TO_ADDR
// end ;
77374: LD_VAR 0 2
77378: RET
// export function Negate ( value ) ; begin
77379: LD_INT 0
77381: PPUSH
// result := not value ;
77382: LD_ADDR_VAR 0 2
77386: PUSH
77387: LD_VAR 0 1
77391: NOT
77392: ST_TO_ADDR
// end ;
77393: LD_VAR 0 2
77397: RET
// export function Inc ( value ) ; begin
77398: LD_INT 0
77400: PPUSH
// result := value + 1 ;
77401: LD_ADDR_VAR 0 2
77405: PUSH
77406: LD_VAR 0 1
77410: PUSH
77411: LD_INT 1
77413: PLUS
77414: ST_TO_ADDR
// end ;
77415: LD_VAR 0 2
77419: RET
// export function Dec ( value ) ; begin
77420: LD_INT 0
77422: PPUSH
// result := value - 1 ;
77423: LD_ADDR_VAR 0 2
77427: PUSH
77428: LD_VAR 0 1
77432: PUSH
77433: LD_INT 1
77435: MINUS
77436: ST_TO_ADDR
// end ;
77437: LD_VAR 0 2
77441: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77442: LD_INT 0
77444: PPUSH
77445: PPUSH
77446: PPUSH
77447: PPUSH
77448: PPUSH
77449: PPUSH
77450: PPUSH
77451: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77452: LD_VAR 0 1
77456: PPUSH
77457: LD_VAR 0 2
77461: PPUSH
77462: CALL_OW 488
77466: NOT
77467: IFTRUE 77486
77469: PUSH
77470: LD_VAR 0 3
77474: PPUSH
77475: LD_VAR 0 4
77479: PPUSH
77480: CALL_OW 488
77484: NOT
77485: OR
77486: IFFALSE 77499
// begin result := - 1 ;
77488: LD_ADDR_VAR 0 5
77492: PUSH
77493: LD_INT 1
77495: NEG
77496: ST_TO_ADDR
// exit ;
77497: GO 77734
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77499: LD_ADDR_VAR 0 12
77503: PUSH
77504: LD_VAR 0 1
77508: PPUSH
77509: LD_VAR 0 2
77513: PPUSH
77514: LD_VAR 0 3
77518: PPUSH
77519: LD_VAR 0 4
77523: PPUSH
77524: CALL 76570 0 4
77528: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77529: LD_ADDR_VAR 0 11
77533: PUSH
77534: LD_VAR 0 1
77538: PPUSH
77539: LD_VAR 0 2
77543: PPUSH
77544: LD_VAR 0 12
77548: PUSH
77549: LD_INT 1
77551: ARRAY
77552: PPUSH
77553: LD_VAR 0 12
77557: PUSH
77558: LD_INT 2
77560: ARRAY
77561: PPUSH
77562: CALL_OW 298
77566: ST_TO_ADDR
// distance := 9999 ;
77567: LD_ADDR_VAR 0 10
77571: PUSH
77572: LD_INT 9999
77574: ST_TO_ADDR
// for i := 0 to 5 do
77575: LD_ADDR_VAR 0 6
77579: PUSH
77580: DOUBLE
77581: LD_INT 0
77583: DEC
77584: ST_TO_ADDR
77585: LD_INT 5
77587: PUSH
77588: FOR_TO
77589: IFFALSE 77732
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77591: LD_ADDR_VAR 0 7
77595: PUSH
77596: LD_VAR 0 1
77600: PPUSH
77601: LD_VAR 0 6
77605: PPUSH
77606: LD_VAR 0 11
77610: PPUSH
77611: CALL_OW 272
77615: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77616: LD_ADDR_VAR 0 8
77620: PUSH
77621: LD_VAR 0 2
77625: PPUSH
77626: LD_VAR 0 6
77630: PPUSH
77631: LD_VAR 0 11
77635: PPUSH
77636: CALL_OW 273
77640: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77641: LD_VAR 0 7
77645: PPUSH
77646: LD_VAR 0 8
77650: PPUSH
77651: CALL_OW 488
77655: NOT
77656: IFFALSE 77660
// continue ;
77658: GO 77588
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77660: LD_ADDR_VAR 0 9
77664: PUSH
77665: LD_VAR 0 12
77669: PUSH
77670: LD_INT 1
77672: ARRAY
77673: PPUSH
77674: LD_VAR 0 12
77678: PUSH
77679: LD_INT 2
77681: ARRAY
77682: PPUSH
77683: LD_VAR 0 7
77687: PPUSH
77688: LD_VAR 0 8
77692: PPUSH
77693: CALL_OW 298
77697: ST_TO_ADDR
// if tmp < distance then
77698: LD_VAR 0 9
77702: PUSH
77703: LD_VAR 0 10
77707: LESS
77708: IFFALSE 77730
// begin result := i ;
77710: LD_ADDR_VAR 0 5
77714: PUSH
77715: LD_VAR 0 6
77719: ST_TO_ADDR
// distance := tmp ;
77720: LD_ADDR_VAR 0 10
77724: PUSH
77725: LD_VAR 0 9
77729: ST_TO_ADDR
// end ; end ;
77730: GO 77588
77732: POP
77733: POP
// end ;
77734: LD_VAR 0 5
77738: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77739: LD_INT 0
77741: PPUSH
77742: PPUSH
// if not driver or not IsInUnit ( driver ) then
77743: LD_VAR 0 1
77747: NOT
77748: IFTRUE 77762
77750: PUSH
77751: LD_VAR 0 1
77755: PPUSH
77756: CALL_OW 310
77760: NOT
77761: OR
77762: IFFALSE 77766
// exit ;
77764: GO 77856
// vehicle := IsInUnit ( driver ) ;
77766: LD_ADDR_VAR 0 3
77770: PUSH
77771: LD_VAR 0 1
77775: PPUSH
77776: CALL_OW 310
77780: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77781: LD_VAR 0 1
77785: PPUSH
77786: LD_STRING \
77788: PUSH
77789: LD_INT 0
77791: PUSH
77792: LD_INT 0
77794: PUSH
77795: LD_INT 0
77797: PUSH
77798: LD_INT 0
77800: PUSH
77801: LD_INT 0
77803: PUSH
77804: LD_INT 0
77806: PUSH
77807: EMPTY
77808: LIST
77809: LIST
77810: LIST
77811: LIST
77812: LIST
77813: LIST
77814: LIST
77815: PUSH
77816: LD_STRING E
77818: PUSH
77819: LD_INT 0
77821: PUSH
77822: LD_INT 0
77824: PUSH
77825: LD_VAR 0 3
77829: PUSH
77830: LD_INT 0
77832: PUSH
77833: LD_INT 0
77835: PUSH
77836: LD_INT 0
77838: PUSH
77839: EMPTY
77840: LIST
77841: LIST
77842: LIST
77843: LIST
77844: LIST
77845: LIST
77846: LIST
77847: PUSH
77848: EMPTY
77849: LIST
77850: LIST
77851: PPUSH
77852: CALL_OW 446
// end ;
77856: LD_VAR 0 2
77860: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77861: LD_INT 0
77863: PPUSH
77864: PPUSH
// if not driver or not IsInUnit ( driver ) then
77865: LD_VAR 0 1
77869: NOT
77870: IFTRUE 77884
77872: PUSH
77873: LD_VAR 0 1
77877: PPUSH
77878: CALL_OW 310
77882: NOT
77883: OR
77884: IFFALSE 77888
// exit ;
77886: GO 77978
// vehicle := IsInUnit ( driver ) ;
77888: LD_ADDR_VAR 0 3
77892: PUSH
77893: LD_VAR 0 1
77897: PPUSH
77898: CALL_OW 310
77902: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77903: LD_VAR 0 1
77907: PPUSH
77908: LD_STRING \
77910: PUSH
77911: LD_INT 0
77913: PUSH
77914: LD_INT 0
77916: PUSH
77917: LD_INT 0
77919: PUSH
77920: LD_INT 0
77922: PUSH
77923: LD_INT 0
77925: PUSH
77926: LD_INT 0
77928: PUSH
77929: EMPTY
77930: LIST
77931: LIST
77932: LIST
77933: LIST
77934: LIST
77935: LIST
77936: LIST
77937: PUSH
77938: LD_STRING E
77940: PUSH
77941: LD_INT 0
77943: PUSH
77944: LD_INT 0
77946: PUSH
77947: LD_VAR 0 3
77951: PUSH
77952: LD_INT 0
77954: PUSH
77955: LD_INT 0
77957: PUSH
77958: LD_INT 0
77960: PUSH
77961: EMPTY
77962: LIST
77963: LIST
77964: LIST
77965: LIST
77966: LIST
77967: LIST
77968: LIST
77969: PUSH
77970: EMPTY
77971: LIST
77972: LIST
77973: PPUSH
77974: CALL_OW 447
// end ;
77978: LD_VAR 0 2
77982: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77983: LD_INT 0
77985: PPUSH
77986: PPUSH
77987: PPUSH
// tmp := [ ] ;
77988: LD_ADDR_VAR 0 5
77992: PUSH
77993: EMPTY
77994: ST_TO_ADDR
// for i in units do
77995: LD_ADDR_VAR 0 4
77999: PUSH
78000: LD_VAR 0 1
78004: PUSH
78005: FOR_IN
78006: IFFALSE 78044
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78008: LD_ADDR_VAR 0 5
78012: PUSH
78013: LD_VAR 0 5
78017: PPUSH
78018: LD_VAR 0 5
78022: PUSH
78023: LD_INT 1
78025: PLUS
78026: PPUSH
78027: LD_VAR 0 4
78031: PPUSH
78032: CALL_OW 256
78036: PPUSH
78037: CALL_OW 2
78041: ST_TO_ADDR
78042: GO 78005
78044: POP
78045: POP
// if not tmp then
78046: LD_VAR 0 5
78050: NOT
78051: IFFALSE 78055
// exit ;
78053: GO 78103
// if asc then
78055: LD_VAR 0 2
78059: IFFALSE 78083
// result := SortListByListAsc ( units , tmp ) else
78061: LD_ADDR_VAR 0 3
78065: PUSH
78066: LD_VAR 0 1
78070: PPUSH
78071: LD_VAR 0 5
78075: PPUSH
78076: CALL_OW 76
78080: ST_TO_ADDR
78081: GO 78103
// result := SortListByListDesc ( units , tmp ) ;
78083: LD_ADDR_VAR 0 3
78087: PUSH
78088: LD_VAR 0 1
78092: PPUSH
78093: LD_VAR 0 5
78097: PPUSH
78098: CALL_OW 77
78102: ST_TO_ADDR
// end ;
78103: LD_VAR 0 3
78107: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78108: LD_INT 0
78110: PPUSH
78111: PPUSH
// task := GetTaskList ( mech ) ;
78112: LD_ADDR_VAR 0 4
78116: PUSH
78117: LD_VAR 0 1
78121: PPUSH
78122: CALL_OW 437
78126: ST_TO_ADDR
// if not task then
78127: LD_VAR 0 4
78131: NOT
78132: IFFALSE 78136
// exit ;
78134: GO 78180
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78136: LD_ADDR_VAR 0 3
78140: PUSH
78141: LD_VAR 0 4
78145: PUSH
78146: LD_INT 1
78148: ARRAY
78149: PUSH
78150: LD_INT 1
78152: ARRAY
78153: PUSH
78154: LD_STRING r
78156: EQUAL
78157: IFFALSE 78179
78159: PUSH
78160: LD_VAR 0 4
78164: PUSH
78165: LD_INT 1
78167: ARRAY
78168: PUSH
78169: LD_INT 4
78171: ARRAY
78172: PUSH
78173: LD_VAR 0 2
78177: EQUAL
78178: AND
78179: ST_TO_ADDR
// end ;
78180: LD_VAR 0 3
78184: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78185: LD_INT 0
78187: PPUSH
// SetDir ( unit , d ) ;
78188: LD_VAR 0 1
78192: PPUSH
78193: LD_VAR 0 4
78197: PPUSH
78198: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
78202: LD_ADDR_VAR 0 6
78206: PUSH
78207: LD_VAR 0 1
78211: PPUSH
78212: LD_VAR 0 2
78216: PPUSH
78217: LD_VAR 0 3
78221: PPUSH
78222: LD_VAR 0 5
78226: PPUSH
78227: CALL_OW 48
78231: ST_TO_ADDR
// end ;
78232: LD_VAR 0 6
78236: RET
// export function ToNaturalNumber ( number ) ; begin
78237: LD_INT 0
78239: PPUSH
// result := number div 1 ;
78240: LD_ADDR_VAR 0 2
78244: PUSH
78245: LD_VAR 0 1
78249: PUSH
78250: LD_INT 1
78252: DIV
78253: ST_TO_ADDR
// if number < 0 then
78254: LD_VAR 0 1
78258: PUSH
78259: LD_INT 0
78261: LESS
78262: IFFALSE 78272
// result := 0 ;
78264: LD_ADDR_VAR 0 2
78268: PUSH
78269: LD_INT 0
78271: ST_TO_ADDR
// end ;
78272: LD_VAR 0 2
78276: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
78277: LD_INT 0
78279: PPUSH
78280: PPUSH
78281: PPUSH
// if not buildings then
78282: LD_VAR 0 1
78286: NOT
78287: IFFALSE 78291
// exit ;
78289: GO 78406
// tmp := [ ] ;
78291: LD_ADDR_VAR 0 5
78295: PUSH
78296: EMPTY
78297: ST_TO_ADDR
// for b in buildings do
78298: LD_ADDR_VAR 0 4
78302: PUSH
78303: LD_VAR 0 1
78307: PUSH
78308: FOR_IN
78309: IFFALSE 78347
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
78311: LD_ADDR_VAR 0 5
78315: PUSH
78316: LD_VAR 0 5
78320: PPUSH
78321: LD_VAR 0 5
78325: PUSH
78326: LD_INT 1
78328: PLUS
78329: PPUSH
78330: LD_VAR 0 4
78334: PPUSH
78335: CALL_OW 266
78339: PPUSH
78340: CALL_OW 1
78344: ST_TO_ADDR
78345: GO 78308
78347: POP
78348: POP
// if not tmp then
78349: LD_VAR 0 5
78353: NOT
78354: IFFALSE 78358
// exit ;
78356: GO 78406
// if asc then
78358: LD_VAR 0 2
78362: IFFALSE 78386
// result := SortListByListAsc ( buildings , tmp ) else
78364: LD_ADDR_VAR 0 3
78368: PUSH
78369: LD_VAR 0 1
78373: PPUSH
78374: LD_VAR 0 5
78378: PPUSH
78379: CALL_OW 76
78383: ST_TO_ADDR
78384: GO 78406
// result := SortListByListDesc ( buildings , tmp ) ;
78386: LD_ADDR_VAR 0 3
78390: PUSH
78391: LD_VAR 0 1
78395: PPUSH
78396: LD_VAR 0 5
78400: PPUSH
78401: CALL_OW 77
78405: ST_TO_ADDR
// end ;
78406: LD_VAR 0 3
78410: RET
// export function SortByClass ( units , class ) ; var un ; begin
78411: LD_INT 0
78413: PPUSH
78414: PPUSH
// if not units or not class then
78415: LD_VAR 0 1
78419: NOT
78420: IFTRUE 78429
78422: PUSH
78423: LD_VAR 0 2
78427: NOT
78428: OR
78429: IFFALSE 78433
// exit ;
78431: GO 78528
// result := [ ] ;
78433: LD_ADDR_VAR 0 3
78437: PUSH
78438: EMPTY
78439: ST_TO_ADDR
// for un in units do
78440: LD_ADDR_VAR 0 4
78444: PUSH
78445: LD_VAR 0 1
78449: PUSH
78450: FOR_IN
78451: IFFALSE 78526
// if GetClass ( un ) = class then
78453: LD_VAR 0 4
78457: PPUSH
78458: CALL_OW 257
78462: PUSH
78463: LD_VAR 0 2
78467: EQUAL
78468: IFFALSE 78495
// result := Insert ( result , 1 , un ) else
78470: LD_ADDR_VAR 0 3
78474: PUSH
78475: LD_VAR 0 3
78479: PPUSH
78480: LD_INT 1
78482: PPUSH
78483: LD_VAR 0 4
78487: PPUSH
78488: CALL_OW 2
78492: ST_TO_ADDR
78493: GO 78524
// result := Replace ( result , result + 1 , un ) ;
78495: LD_ADDR_VAR 0 3
78499: PUSH
78500: LD_VAR 0 3
78504: PPUSH
78505: LD_VAR 0 3
78509: PUSH
78510: LD_INT 1
78512: PLUS
78513: PPUSH
78514: LD_VAR 0 4
78518: PPUSH
78519: CALL_OW 1
78523: ST_TO_ADDR
78524: GO 78450
78526: POP
78527: POP
// end ;
78528: LD_VAR 0 3
78532: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78533: LD_INT 0
78535: PPUSH
78536: PPUSH
78537: PPUSH
78538: PPUSH
78539: PPUSH
78540: PPUSH
78541: PPUSH
// result := [ ] ;
78542: LD_ADDR_VAR 0 4
78546: PUSH
78547: EMPTY
78548: ST_TO_ADDR
// if x - r < 0 then
78549: LD_VAR 0 1
78553: PUSH
78554: LD_VAR 0 3
78558: MINUS
78559: PUSH
78560: LD_INT 0
78562: LESS
78563: IFFALSE 78575
// min_x := 0 else
78565: LD_ADDR_VAR 0 8
78569: PUSH
78570: LD_INT 0
78572: ST_TO_ADDR
78573: GO 78591
// min_x := x - r ;
78575: LD_ADDR_VAR 0 8
78579: PUSH
78580: LD_VAR 0 1
78584: PUSH
78585: LD_VAR 0 3
78589: MINUS
78590: ST_TO_ADDR
// if y - r < 0 then
78591: LD_VAR 0 2
78595: PUSH
78596: LD_VAR 0 3
78600: MINUS
78601: PUSH
78602: LD_INT 0
78604: LESS
78605: IFFALSE 78617
// min_y := 0 else
78607: LD_ADDR_VAR 0 7
78611: PUSH
78612: LD_INT 0
78614: ST_TO_ADDR
78615: GO 78633
// min_y := y - r ;
78617: LD_ADDR_VAR 0 7
78621: PUSH
78622: LD_VAR 0 2
78626: PUSH
78627: LD_VAR 0 3
78631: MINUS
78632: ST_TO_ADDR
// max_x := x + r ;
78633: LD_ADDR_VAR 0 9
78637: PUSH
78638: LD_VAR 0 1
78642: PUSH
78643: LD_VAR 0 3
78647: PLUS
78648: ST_TO_ADDR
// max_y := y + r ;
78649: LD_ADDR_VAR 0 10
78653: PUSH
78654: LD_VAR 0 2
78658: PUSH
78659: LD_VAR 0 3
78663: PLUS
78664: ST_TO_ADDR
// for _x = min_x to max_x do
78665: LD_ADDR_VAR 0 5
78669: PUSH
78670: DOUBLE
78671: LD_VAR 0 8
78675: DEC
78676: ST_TO_ADDR
78677: LD_VAR 0 9
78681: PUSH
78682: FOR_TO
78683: IFFALSE 78784
// for _y = min_y to max_y do
78685: LD_ADDR_VAR 0 6
78689: PUSH
78690: DOUBLE
78691: LD_VAR 0 7
78695: DEC
78696: ST_TO_ADDR
78697: LD_VAR 0 10
78701: PUSH
78702: FOR_TO
78703: IFFALSE 78780
// begin if not ValidHex ( _x , _y ) then
78705: LD_VAR 0 5
78709: PPUSH
78710: LD_VAR 0 6
78714: PPUSH
78715: CALL_OW 488
78719: NOT
78720: IFFALSE 78724
// continue ;
78722: GO 78702
// if GetResourceTypeXY ( _x , _y ) then
78724: LD_VAR 0 5
78728: PPUSH
78729: LD_VAR 0 6
78733: PPUSH
78734: CALL_OW 283
78738: IFFALSE 78778
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78740: LD_ADDR_VAR 0 4
78744: PUSH
78745: LD_VAR 0 4
78749: PPUSH
78750: LD_VAR 0 4
78754: PUSH
78755: LD_INT 1
78757: PLUS
78758: PPUSH
78759: LD_VAR 0 5
78763: PUSH
78764: LD_VAR 0 6
78768: PUSH
78769: EMPTY
78770: LIST
78771: LIST
78772: PPUSH
78773: CALL_OW 1
78777: ST_TO_ADDR
// end ;
78778: GO 78702
78780: POP
78781: POP
78782: GO 78682
78784: POP
78785: POP
// end ;
78786: LD_VAR 0 4
78790: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78791: LD_INT 0
78793: PPUSH
78794: PPUSH
78795: PPUSH
78796: PPUSH
78797: PPUSH
78798: PPUSH
78799: PPUSH
78800: PPUSH
// if not units then
78801: LD_VAR 0 1
78805: NOT
78806: IFFALSE 78810
// exit ;
78808: GO 79342
// result := UnitFilter ( units , [ f_ok ] ) ;
78810: LD_ADDR_VAR 0 3
78814: PUSH
78815: LD_VAR 0 1
78819: PPUSH
78820: LD_INT 50
78822: PUSH
78823: EMPTY
78824: LIST
78825: PPUSH
78826: CALL_OW 72
78830: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78831: LD_ADDR_VAR 0 8
78835: PUSH
78836: LD_VAR 0 1
78840: PUSH
78841: LD_INT 1
78843: ARRAY
78844: PPUSH
78845: CALL_OW 255
78849: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78850: LD_ADDR_VAR 0 10
78854: PUSH
78855: LD_INT 29
78857: PUSH
78858: LD_INT 91
78860: PUSH
78861: LD_INT 49
78863: PUSH
78864: EMPTY
78865: LIST
78866: LIST
78867: LIST
78868: ST_TO_ADDR
// if not result then
78869: LD_VAR 0 3
78873: NOT
78874: IFFALSE 78878
// exit ;
78876: GO 79342
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78878: LD_ADDR_VAR 0 5
78882: PUSH
78883: LD_INT 81
78885: PUSH
78886: LD_VAR 0 8
78890: PUSH
78891: EMPTY
78892: LIST
78893: LIST
78894: PPUSH
78895: CALL_OW 69
78899: ST_TO_ADDR
// for i in result do
78900: LD_ADDR_VAR 0 4
78904: PUSH
78905: LD_VAR 0 3
78909: PUSH
78910: FOR_IN
78911: IFFALSE 79340
// begin tag := GetTag ( i ) + 1 ;
78913: LD_ADDR_VAR 0 9
78917: PUSH
78918: LD_VAR 0 4
78922: PPUSH
78923: CALL_OW 110
78927: PUSH
78928: LD_INT 1
78930: PLUS
78931: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
78932: LD_ADDR_VAR 0 7
78936: PUSH
78937: LD_VAR 0 4
78941: PPUSH
78942: CALL_OW 250
78946: PPUSH
78947: LD_VAR 0 4
78951: PPUSH
78952: CALL_OW 251
78956: PPUSH
78957: LD_INT 4
78959: PPUSH
78960: CALL 78533 0 3
78964: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
78965: LD_VAR 0 4
78969: PPUSH
78970: CALL_OW 247
78974: PUSH
78975: LD_INT 2
78977: EQUAL
78978: IFFALSE 78990
78980: PUSH
78981: LD_VAR 0 7
78985: PUSH
78986: LD_INT 2
78988: GREATER
78989: AND
78990: IFFALSE 79010
78992: PUSH
78993: LD_VAR 0 4
78997: PPUSH
78998: CALL_OW 264
79002: PUSH
79003: LD_VAR 0 10
79007: IN
79008: NOT
79009: AND
79010: IFFALSE 79049
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79012: LD_VAR 0 4
79016: PPUSH
79017: LD_VAR 0 7
79021: PUSH
79022: LD_INT 1
79024: ARRAY
79025: PUSH
79026: LD_INT 1
79028: ARRAY
79029: PPUSH
79030: LD_VAR 0 7
79034: PUSH
79035: LD_INT 1
79037: ARRAY
79038: PUSH
79039: LD_INT 2
79041: ARRAY
79042: PPUSH
79043: CALL_OW 116
79047: GO 79338
// if path > tag then
79049: LD_VAR 0 2
79053: PUSH
79054: LD_VAR 0 9
79058: GREATER
79059: IFFALSE 79267
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79061: LD_ADDR_VAR 0 6
79065: PUSH
79066: LD_VAR 0 5
79070: PPUSH
79071: LD_INT 91
79073: PUSH
79074: LD_VAR 0 4
79078: PUSH
79079: LD_INT 8
79081: PUSH
79082: EMPTY
79083: LIST
79084: LIST
79085: LIST
79086: PPUSH
79087: CALL_OW 72
79091: ST_TO_ADDR
// if nearEnemy then
79092: LD_VAR 0 6
79096: IFFALSE 79165
// begin if GetWeapon ( i ) = ru_time_lapser then
79098: LD_VAR 0 4
79102: PPUSH
79103: CALL_OW 264
79107: PUSH
79108: LD_INT 49
79110: EQUAL
79111: IFFALSE 79139
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79113: LD_VAR 0 4
79117: PPUSH
79118: LD_VAR 0 6
79122: PPUSH
79123: LD_VAR 0 4
79127: PPUSH
79128: CALL_OW 74
79132: PPUSH
79133: CALL_OW 112
79137: GO 79163
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79139: LD_VAR 0 4
79143: PPUSH
79144: LD_VAR 0 6
79148: PPUSH
79149: LD_VAR 0 4
79153: PPUSH
79154: CALL_OW 74
79158: PPUSH
79159: CALL 80423 0 2
// end else
79163: GO 79265
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79165: LD_VAR 0 4
79169: PPUSH
79170: LD_VAR 0 2
79174: PUSH
79175: LD_VAR 0 9
79179: ARRAY
79180: PUSH
79181: LD_INT 1
79183: ARRAY
79184: PPUSH
79185: LD_VAR 0 2
79189: PUSH
79190: LD_VAR 0 9
79194: ARRAY
79195: PUSH
79196: LD_INT 2
79198: ARRAY
79199: PPUSH
79200: CALL_OW 297
79204: PUSH
79205: LD_INT 6
79207: GREATER
79208: IFFALSE 79251
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79210: LD_VAR 0 4
79214: PPUSH
79215: LD_VAR 0 2
79219: PUSH
79220: LD_VAR 0 9
79224: ARRAY
79225: PUSH
79226: LD_INT 1
79228: ARRAY
79229: PPUSH
79230: LD_VAR 0 2
79234: PUSH
79235: LD_VAR 0 9
79239: ARRAY
79240: PUSH
79241: LD_INT 2
79243: ARRAY
79244: PPUSH
79245: CALL_OW 114
79249: GO 79265
// SetTag ( i , tag ) ;
79251: LD_VAR 0 4
79255: PPUSH
79256: LD_VAR 0 9
79260: PPUSH
79261: CALL_OW 109
// end else
79265: GO 79338
// if enemy then
79267: LD_VAR 0 5
79271: IFFALSE 79338
// begin if GetWeapon ( i ) = ru_time_lapser then
79273: LD_VAR 0 4
79277: PPUSH
79278: CALL_OW 264
79282: PUSH
79283: LD_INT 49
79285: EQUAL
79286: IFFALSE 79314
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79288: LD_VAR 0 4
79292: PPUSH
79293: LD_VAR 0 5
79297: PPUSH
79298: LD_VAR 0 4
79302: PPUSH
79303: CALL_OW 74
79307: PPUSH
79308: CALL_OW 112
79312: GO 79338
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79314: LD_VAR 0 4
79318: PPUSH
79319: LD_VAR 0 5
79323: PPUSH
79324: LD_VAR 0 4
79328: PPUSH
79329: CALL_OW 74
79333: PPUSH
79334: CALL 80423 0 2
// end ; end ;
79338: GO 78910
79340: POP
79341: POP
// end ;
79342: LD_VAR 0 3
79346: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79347: LD_INT 0
79349: PPUSH
79350: PPUSH
79351: PPUSH
// if not unit or IsInUnit ( unit ) then
79352: LD_VAR 0 1
79356: NOT
79357: IFTRUE 79370
79359: PUSH
79360: LD_VAR 0 1
79364: PPUSH
79365: CALL_OW 310
79369: OR
79370: IFFALSE 79374
// exit ;
79372: GO 79465
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79374: LD_ADDR_VAR 0 4
79378: PUSH
79379: LD_VAR 0 1
79383: PPUSH
79384: CALL_OW 250
79388: PPUSH
79389: LD_VAR 0 2
79393: PPUSH
79394: LD_INT 1
79396: PPUSH
79397: CALL_OW 272
79401: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79402: LD_ADDR_VAR 0 5
79406: PUSH
79407: LD_VAR 0 1
79411: PPUSH
79412: CALL_OW 251
79416: PPUSH
79417: LD_VAR 0 2
79421: PPUSH
79422: LD_INT 1
79424: PPUSH
79425: CALL_OW 273
79429: ST_TO_ADDR
// if ValidHex ( x , y ) then
79430: LD_VAR 0 4
79434: PPUSH
79435: LD_VAR 0 5
79439: PPUSH
79440: CALL_OW 488
79444: IFFALSE 79465
// ComTurnXY ( unit , x , y ) ;
79446: LD_VAR 0 1
79450: PPUSH
79451: LD_VAR 0 4
79455: PPUSH
79456: LD_VAR 0 5
79460: PPUSH
79461: CALL_OW 118
// end ;
79465: LD_VAR 0 3
79469: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79470: LD_INT 0
79472: PPUSH
79473: PPUSH
// result := false ;
79474: LD_ADDR_VAR 0 3
79478: PUSH
79479: LD_INT 0
79481: ST_TO_ADDR
// if not units then
79482: LD_VAR 0 2
79486: NOT
79487: IFFALSE 79491
// exit ;
79489: GO 79536
// for i in units do
79491: LD_ADDR_VAR 0 4
79495: PUSH
79496: LD_VAR 0 2
79500: PUSH
79501: FOR_IN
79502: IFFALSE 79534
// if See ( side , i ) then
79504: LD_VAR 0 1
79508: PPUSH
79509: LD_VAR 0 4
79513: PPUSH
79514: CALL_OW 292
79518: IFFALSE 79532
// begin result := true ;
79520: LD_ADDR_VAR 0 3
79524: PUSH
79525: LD_INT 1
79527: ST_TO_ADDR
// exit ;
79528: POP
79529: POP
79530: GO 79536
// end ;
79532: GO 79501
79534: POP
79535: POP
// end ;
79536: LD_VAR 0 3
79540: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79541: LD_INT 0
79543: PPUSH
79544: PPUSH
79545: PPUSH
79546: PPUSH
// if not unit or not points then
79547: LD_VAR 0 1
79551: NOT
79552: IFTRUE 79561
79554: PUSH
79555: LD_VAR 0 2
79559: NOT
79560: OR
79561: IFFALSE 79565
// exit ;
79563: GO 79655
// dist := 99999 ;
79565: LD_ADDR_VAR 0 5
79569: PUSH
79570: LD_INT 99999
79572: ST_TO_ADDR
// for i in points do
79573: LD_ADDR_VAR 0 4
79577: PUSH
79578: LD_VAR 0 2
79582: PUSH
79583: FOR_IN
79584: IFFALSE 79653
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79586: LD_ADDR_VAR 0 6
79590: PUSH
79591: LD_VAR 0 1
79595: PPUSH
79596: LD_VAR 0 4
79600: PUSH
79601: LD_INT 1
79603: ARRAY
79604: PPUSH
79605: LD_VAR 0 4
79609: PUSH
79610: LD_INT 2
79612: ARRAY
79613: PPUSH
79614: CALL_OW 297
79618: ST_TO_ADDR
// if tmpDist < dist then
79619: LD_VAR 0 6
79623: PUSH
79624: LD_VAR 0 5
79628: LESS
79629: IFFALSE 79651
// begin result := i ;
79631: LD_ADDR_VAR 0 3
79635: PUSH
79636: LD_VAR 0 4
79640: ST_TO_ADDR
// dist := tmpDist ;
79641: LD_ADDR_VAR 0 5
79645: PUSH
79646: LD_VAR 0 6
79650: ST_TO_ADDR
// end ; end ;
79651: GO 79583
79653: POP
79654: POP
// end ;
79655: LD_VAR 0 3
79659: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79660: LD_INT 0
79662: PPUSH
// uc_side := side ;
79663: LD_ADDR_OWVAR 20
79667: PUSH
79668: LD_VAR 0 1
79672: ST_TO_ADDR
// uc_nation := 3 ;
79673: LD_ADDR_OWVAR 21
79677: PUSH
79678: LD_INT 3
79680: ST_TO_ADDR
// vc_chassis := 25 ;
79681: LD_ADDR_OWVAR 37
79685: PUSH
79686: LD_INT 25
79688: ST_TO_ADDR
// vc_engine := engine_siberite ;
79689: LD_ADDR_OWVAR 39
79693: PUSH
79694: LD_INT 3
79696: ST_TO_ADDR
// vc_control := control_computer ;
79697: LD_ADDR_OWVAR 38
79701: PUSH
79702: LD_INT 3
79704: ST_TO_ADDR
// vc_weapon := 59 ;
79705: LD_ADDR_OWVAR 40
79709: PUSH
79710: LD_INT 59
79712: ST_TO_ADDR
// result := CreateVehicle ;
79713: LD_ADDR_VAR 0 5
79717: PUSH
79718: CALL_OW 45
79722: ST_TO_ADDR
// SetDir ( result , d ) ;
79723: LD_VAR 0 5
79727: PPUSH
79728: LD_VAR 0 4
79732: PPUSH
79733: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79737: LD_VAR 0 5
79741: PPUSH
79742: LD_VAR 0 2
79746: PPUSH
79747: LD_VAR 0 3
79751: PPUSH
79752: LD_INT 0
79754: PPUSH
79755: CALL_OW 48
// end ;
79759: LD_VAR 0 5
79763: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79764: LD_INT 0
79766: PPUSH
79767: PPUSH
79768: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79769: LD_ADDR_VAR 0 2
79773: PUSH
79774: LD_INT 0
79776: PUSH
79777: LD_INT 0
79779: PUSH
79780: LD_INT 0
79782: PUSH
79783: LD_INT 0
79785: PUSH
79786: EMPTY
79787: LIST
79788: LIST
79789: LIST
79790: LIST
79791: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79792: LD_VAR 0 1
79796: NOT
79797: IFTRUE 79830
79799: PUSH
79800: LD_VAR 0 1
79804: PPUSH
79805: CALL_OW 264
79809: PUSH
79810: LD_INT 12
79812: PUSH
79813: LD_INT 51
79815: PUSH
79816: LD_INT 32
79818: PUSH
79819: LD_INT 89
79821: PUSH
79822: EMPTY
79823: LIST
79824: LIST
79825: LIST
79826: LIST
79827: IN
79828: NOT
79829: OR
79830: IFFALSE 79834
// exit ;
79832: GO 79932
// for i := 1 to 3 do
79834: LD_ADDR_VAR 0 3
79838: PUSH
79839: DOUBLE
79840: LD_INT 1
79842: DEC
79843: ST_TO_ADDR
79844: LD_INT 3
79846: PUSH
79847: FOR_TO
79848: IFFALSE 79930
// begin tmp := GetCargo ( cargo , i ) ;
79850: LD_ADDR_VAR 0 4
79854: PUSH
79855: LD_VAR 0 1
79859: PPUSH
79860: LD_VAR 0 3
79864: PPUSH
79865: CALL_OW 289
79869: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79870: LD_ADDR_VAR 0 2
79874: PUSH
79875: LD_VAR 0 2
79879: PPUSH
79880: LD_VAR 0 3
79884: PPUSH
79885: LD_VAR 0 4
79889: PPUSH
79890: CALL_OW 1
79894: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79895: LD_ADDR_VAR 0 2
79899: PUSH
79900: LD_VAR 0 2
79904: PPUSH
79905: LD_INT 4
79907: PPUSH
79908: LD_VAR 0 2
79912: PUSH
79913: LD_INT 4
79915: ARRAY
79916: PUSH
79917: LD_VAR 0 4
79921: PLUS
79922: PPUSH
79923: CALL_OW 1
79927: ST_TO_ADDR
// end ;
79928: GO 79847
79930: POP
79931: POP
// end ;
79932: LD_VAR 0 2
79936: RET
// export function Length ( array ) ; begin
79937: LD_INT 0
79939: PPUSH
// result := array + 0 ;
79940: LD_ADDR_VAR 0 2
79944: PUSH
79945: LD_VAR 0 1
79949: PUSH
79950: LD_INT 0
79952: PLUS
79953: ST_TO_ADDR
// end ;
79954: LD_VAR 0 2
79958: RET
// export function PrepareArray ( array ) ; begin
79959: LD_INT 0
79961: PPUSH
// result := array diff 0 ;
79962: LD_ADDR_VAR 0 2
79966: PUSH
79967: LD_VAR 0 1
79971: PUSH
79972: LD_INT 0
79974: DIFF
79975: ST_TO_ADDR
// if not result [ 1 ] then
79976: LD_VAR 0 2
79980: PUSH
79981: LD_INT 1
79983: ARRAY
79984: NOT
79985: IFFALSE 80005
// result := Delete ( result , 1 ) ;
79987: LD_ADDR_VAR 0 2
79991: PUSH
79992: LD_VAR 0 2
79996: PPUSH
79997: LD_INT 1
79999: PPUSH
80000: CALL_OW 3
80004: ST_TO_ADDR
// end ;
80005: LD_VAR 0 2
80009: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80010: LD_INT 0
80012: PPUSH
80013: PPUSH
80014: PPUSH
80015: PPUSH
// sibRocketRange := 25 ;
80016: LD_ADDR_VAR 0 6
80020: PUSH
80021: LD_INT 25
80023: ST_TO_ADDR
// result := false ;
80024: LD_ADDR_VAR 0 4
80028: PUSH
80029: LD_INT 0
80031: ST_TO_ADDR
// for i := 0 to 5 do
80032: LD_ADDR_VAR 0 5
80036: PUSH
80037: DOUBLE
80038: LD_INT 0
80040: DEC
80041: ST_TO_ADDR
80042: LD_INT 5
80044: PUSH
80045: FOR_TO
80046: IFFALSE 80113
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80048: LD_VAR 0 1
80052: PPUSH
80053: LD_VAR 0 5
80057: PPUSH
80058: LD_VAR 0 6
80062: PPUSH
80063: CALL_OW 272
80067: PPUSH
80068: LD_VAR 0 2
80072: PPUSH
80073: LD_VAR 0 5
80077: PPUSH
80078: LD_VAR 0 6
80082: PPUSH
80083: CALL_OW 273
80087: PPUSH
80088: LD_VAR 0 3
80092: PPUSH
80093: CALL_OW 309
80097: IFFALSE 80111
// begin result := true ;
80099: LD_ADDR_VAR 0 4
80103: PUSH
80104: LD_INT 1
80106: ST_TO_ADDR
// exit ;
80107: POP
80108: POP
80109: GO 80115
// end ;
80111: GO 80045
80113: POP
80114: POP
// end ;
80115: LD_VAR 0 4
80119: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
80120: LD_INT 0
80122: PPUSH
80123: PPUSH
80124: PPUSH
// if btype = b_depot then
80125: LD_VAR 0 2
80129: PUSH
80130: LD_INT 0
80132: EQUAL
80133: IFFALSE 80145
// begin result := true ;
80135: LD_ADDR_VAR 0 3
80139: PUSH
80140: LD_INT 1
80142: ST_TO_ADDR
// exit ;
80143: GO 80265
// end ; pom := GetBase ( depot ) ;
80145: LD_ADDR_VAR 0 4
80149: PUSH
80150: LD_VAR 0 1
80154: PPUSH
80155: CALL_OW 274
80159: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
80160: LD_ADDR_VAR 0 5
80164: PUSH
80165: LD_VAR 0 2
80169: PPUSH
80170: LD_VAR 0 1
80174: PPUSH
80175: CALL_OW 248
80179: PPUSH
80180: CALL_OW 450
80184: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
80185: LD_ADDR_VAR 0 3
80189: PUSH
80190: LD_VAR 0 4
80194: PPUSH
80195: LD_INT 1
80197: PPUSH
80198: CALL_OW 275
80202: PUSH
80203: LD_VAR 0 5
80207: PUSH
80208: LD_INT 1
80210: ARRAY
80211: GREATEREQUAL
80212: IFFALSE 80238
80214: PUSH
80215: LD_VAR 0 4
80219: PPUSH
80220: LD_INT 2
80222: PPUSH
80223: CALL_OW 275
80227: PUSH
80228: LD_VAR 0 5
80232: PUSH
80233: LD_INT 2
80235: ARRAY
80236: GREATEREQUAL
80237: AND
80238: IFFALSE 80264
80240: PUSH
80241: LD_VAR 0 4
80245: PPUSH
80246: LD_INT 3
80248: PPUSH
80249: CALL_OW 275
80253: PUSH
80254: LD_VAR 0 5
80258: PUSH
80259: LD_INT 3
80261: ARRAY
80262: GREATEREQUAL
80263: AND
80264: ST_TO_ADDR
// end ;
80265: LD_VAR 0 3
80269: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80270: LD_INT 0
80272: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80273: LD_VAR 0 1
80277: PPUSH
80278: LD_VAR 0 2
80282: PPUSH
80283: LD_INT 0
80285: PPUSH
80286: LD_INT 0
80288: PPUSH
80289: LD_INT 1
80291: PPUSH
80292: LD_INT 0
80294: PPUSH
80295: CALL_OW 587
// end ;
80299: LD_VAR 0 3
80303: RET
// export function CenterOnNow ( unit ) ; begin
80304: LD_INT 0
80306: PPUSH
// result := IsInUnit ( unit ) ;
80307: LD_ADDR_VAR 0 2
80311: PUSH
80312: LD_VAR 0 1
80316: PPUSH
80317: CALL_OW 310
80321: ST_TO_ADDR
// if not result then
80322: LD_VAR 0 2
80326: NOT
80327: IFFALSE 80339
// result := unit ;
80329: LD_ADDR_VAR 0 2
80333: PUSH
80334: LD_VAR 0 1
80338: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
80339: LD_VAR 0 1
80343: PPUSH
80344: CALL_OW 87
// end ;
80348: LD_VAR 0 2
80352: RET
// export function ComMoveHex ( unit , hex ) ; begin
80353: LD_INT 0
80355: PPUSH
// if not hex then
80356: LD_VAR 0 2
80360: NOT
80361: IFFALSE 80365
// exit ;
80363: GO 80418
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
80365: LD_VAR 0 2
80369: PUSH
80370: LD_INT 1
80372: ARRAY
80373: PPUSH
80374: LD_VAR 0 2
80378: PUSH
80379: LD_INT 2
80381: ARRAY
80382: PPUSH
80383: CALL_OW 428
80387: IFFALSE 80391
// exit ;
80389: GO 80418
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
80391: LD_VAR 0 1
80395: PPUSH
80396: LD_VAR 0 2
80400: PUSH
80401: LD_INT 1
80403: ARRAY
80404: PPUSH
80405: LD_VAR 0 2
80409: PUSH
80410: LD_INT 2
80412: ARRAY
80413: PPUSH
80414: CALL_OW 111
// end ;
80418: LD_VAR 0 3
80422: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
80423: LD_INT 0
80425: PPUSH
80426: PPUSH
80427: PPUSH
// if not unit or not enemy then
80428: LD_VAR 0 1
80432: NOT
80433: IFTRUE 80442
80435: PUSH
80436: LD_VAR 0 2
80440: NOT
80441: OR
80442: IFFALSE 80446
// exit ;
80444: GO 80572
// x := GetX ( enemy ) ;
80446: LD_ADDR_VAR 0 4
80450: PUSH
80451: LD_VAR 0 2
80455: PPUSH
80456: CALL_OW 250
80460: ST_TO_ADDR
// y := GetY ( enemy ) ;
80461: LD_ADDR_VAR 0 5
80465: PUSH
80466: LD_VAR 0 2
80470: PPUSH
80471: CALL_OW 251
80475: ST_TO_ADDR
// if ValidHex ( x , y ) then
80476: LD_VAR 0 4
80480: PPUSH
80481: LD_VAR 0 5
80485: PPUSH
80486: CALL_OW 488
80490: IFFALSE 80572
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
80492: LD_VAR 0 2
80496: PPUSH
80497: CALL_OW 247
80501: PUSH
80502: LD_INT 3
80504: PUSH
80505: LD_INT 2
80507: PUSH
80508: EMPTY
80509: LIST
80510: LIST
80511: IN
80512: IFTRUE 80535
80514: PUSH
80515: LD_VAR 0 1
80519: PPUSH
80520: CALL_OW 255
80524: PPUSH
80525: LD_VAR 0 2
80529: PPUSH
80530: CALL_OW 292
80534: OR
80535: IFFALSE 80553
// ComAttackUnit ( unit , enemy ) else
80537: LD_VAR 0 1
80541: PPUSH
80542: LD_VAR 0 2
80546: PPUSH
80547: CALL_OW 115
80551: GO 80572
// ComAgressiveMove ( unit , x , y ) ;
80553: LD_VAR 0 1
80557: PPUSH
80558: LD_VAR 0 4
80562: PPUSH
80563: LD_VAR 0 5
80567: PPUSH
80568: CALL_OW 114
// end ;
80572: LD_VAR 0 3
80576: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
80577: LD_INT 0
80579: PPUSH
80580: PPUSH
80581: PPUSH
// list := AreaToList ( area , 0 ) ;
80582: LD_ADDR_VAR 0 5
80586: PUSH
80587: LD_VAR 0 1
80591: PPUSH
80592: LD_INT 0
80594: PPUSH
80595: CALL_OW 517
80599: ST_TO_ADDR
// if not list then
80600: LD_VAR 0 5
80604: NOT
80605: IFFALSE 80609
// exit ;
80607: GO 80739
// if all then
80609: LD_VAR 0 2
80613: IFFALSE 80701
// begin for i := 1 to list [ 1 ] do
80615: LD_ADDR_VAR 0 4
80619: PUSH
80620: DOUBLE
80621: LD_INT 1
80623: DEC
80624: ST_TO_ADDR
80625: LD_VAR 0 5
80629: PUSH
80630: LD_INT 1
80632: ARRAY
80633: PUSH
80634: FOR_TO
80635: IFFALSE 80697
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
80637: LD_ADDR_VAR 0 3
80641: PUSH
80642: LD_VAR 0 3
80646: PPUSH
80647: LD_VAR 0 3
80651: PUSH
80652: LD_INT 1
80654: PLUS
80655: PPUSH
80656: LD_VAR 0 5
80660: PUSH
80661: LD_INT 1
80663: ARRAY
80664: PUSH
80665: LD_VAR 0 4
80669: ARRAY
80670: PUSH
80671: LD_VAR 0 5
80675: PUSH
80676: LD_INT 2
80678: ARRAY
80679: PUSH
80680: LD_VAR 0 4
80684: ARRAY
80685: PUSH
80686: EMPTY
80687: LIST
80688: LIST
80689: PPUSH
80690: CALL_OW 1
80694: ST_TO_ADDR
80695: GO 80634
80697: POP
80698: POP
// exit ;
80699: GO 80739
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
80701: LD_ADDR_VAR 0 3
80705: PUSH
80706: LD_VAR 0 5
80710: PUSH
80711: LD_INT 1
80713: ARRAY
80714: PUSH
80715: LD_INT 1
80717: ARRAY
80718: PUSH
80719: LD_VAR 0 5
80723: PUSH
80724: LD_INT 2
80726: ARRAY
80727: PUSH
80728: LD_INT 1
80730: ARRAY
80731: PUSH
80732: EMPTY
80733: LIST
80734: LIST
80735: PUSH
80736: EMPTY
80737: LIST
80738: ST_TO_ADDR
// end ;
80739: LD_VAR 0 3
80743: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
80744: LD_INT 0
80746: PPUSH
80747: PPUSH
// list := AreaToList ( area , 0 ) ;
80748: LD_ADDR_VAR 0 4
80752: PUSH
80753: LD_VAR 0 1
80757: PPUSH
80758: LD_INT 0
80760: PPUSH
80761: CALL_OW 517
80765: ST_TO_ADDR
// if not list then
80766: LD_VAR 0 4
80770: NOT
80771: IFFALSE 80775
// exit ;
80773: GO 80816
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
80775: LD_ADDR_VAR 0 3
80779: PUSH
80780: LD_VAR 0 4
80784: PUSH
80785: LD_INT 1
80787: ARRAY
80788: PUSH
80789: LD_INT 1
80791: ARRAY
80792: PUSH
80793: LD_VAR 0 4
80797: PUSH
80798: LD_INT 2
80800: ARRAY
80801: PUSH
80802: LD_INT 1
80804: ARRAY
80805: PUSH
80806: LD_VAR 0 2
80810: PUSH
80811: EMPTY
80812: LIST
80813: LIST
80814: LIST
80815: ST_TO_ADDR
// end ;
80816: LD_VAR 0 3
80820: RET
// export function First ( array ) ; begin
80821: LD_INT 0
80823: PPUSH
// if not array then
80824: LD_VAR 0 1
80828: NOT
80829: IFFALSE 80833
// exit ;
80831: GO 80847
// result := array [ 1 ] ;
80833: LD_ADDR_VAR 0 2
80837: PUSH
80838: LD_VAR 0 1
80842: PUSH
80843: LD_INT 1
80845: ARRAY
80846: ST_TO_ADDR
// end ;
80847: LD_VAR 0 2
80851: RET
// export function Last ( array ) ; begin
80852: LD_INT 0
80854: PPUSH
// if not array then
80855: LD_VAR 0 1
80859: NOT
80860: IFFALSE 80864
// exit ;
80862: GO 80880
// result := array [ array ] ;
80864: LD_ADDR_VAR 0 2
80868: PUSH
80869: LD_VAR 0 1
80873: PUSH
80874: LD_VAR 0 1
80878: ARRAY
80879: ST_TO_ADDR
// end ;
80880: LD_VAR 0 2
80884: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
80885: LD_INT 0
80887: PPUSH
80888: PPUSH
// result := [ ] ;
80889: LD_ADDR_VAR 0 5
80893: PUSH
80894: EMPTY
80895: ST_TO_ADDR
// if not array then
80896: LD_VAR 0 1
80900: NOT
80901: IFFALSE 80905
// exit ;
80903: GO 81017
// for i := 1 to array do
80905: LD_ADDR_VAR 0 6
80909: PUSH
80910: DOUBLE
80911: LD_INT 1
80913: DEC
80914: ST_TO_ADDR
80915: LD_VAR 0 1
80919: PUSH
80920: FOR_TO
80921: IFFALSE 81015
// if array [ i ] [ index ] = value then
80923: LD_VAR 0 1
80927: PUSH
80928: LD_VAR 0 6
80932: ARRAY
80933: PUSH
80934: LD_VAR 0 2
80938: ARRAY
80939: PUSH
80940: LD_VAR 0 3
80944: EQUAL
80945: IFFALSE 81013
// begin if indexColumn then
80947: LD_VAR 0 4
80951: IFFALSE 80987
// result := Join ( result , array [ i ] [ indexColumn ] ) else
80953: LD_ADDR_VAR 0 5
80957: PUSH
80958: LD_VAR 0 5
80962: PPUSH
80963: LD_VAR 0 1
80967: PUSH
80968: LD_VAR 0 6
80972: ARRAY
80973: PUSH
80974: LD_VAR 0 4
80978: ARRAY
80979: PPUSH
80980: CALL 76025 0 2
80984: ST_TO_ADDR
80985: GO 81013
// result := Join ( result , array [ i ] ) ;
80987: LD_ADDR_VAR 0 5
80991: PUSH
80992: LD_VAR 0 5
80996: PPUSH
80997: LD_VAR 0 1
81001: PUSH
81002: LD_VAR 0 6
81006: ARRAY
81007: PPUSH
81008: CALL 76025 0 2
81012: ST_TO_ADDR
// end ;
81013: GO 80920
81015: POP
81016: POP
// end ;
81017: LD_VAR 0 5
81021: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
81022: LD_INT 0
81024: PPUSH
// if not vehicles or not parkingPoint then
81025: LD_VAR 0 1
81029: NOT
81030: IFTRUE 81039
81032: PUSH
81033: LD_VAR 0 2
81037: NOT
81038: OR
81039: IFFALSE 81043
// exit ;
81041: GO 81141
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
81043: LD_ADDR_VAR 0 1
81047: PUSH
81048: LD_VAR 0 1
81052: PPUSH
81053: LD_INT 50
81055: PUSH
81056: EMPTY
81057: LIST
81058: PUSH
81059: LD_INT 3
81061: PUSH
81062: LD_INT 92
81064: PUSH
81065: LD_VAR 0 2
81069: PUSH
81070: LD_INT 1
81072: ARRAY
81073: PUSH
81074: LD_VAR 0 2
81078: PUSH
81079: LD_INT 2
81081: ARRAY
81082: PUSH
81083: LD_INT 8
81085: PUSH
81086: EMPTY
81087: LIST
81088: LIST
81089: LIST
81090: LIST
81091: PUSH
81092: EMPTY
81093: LIST
81094: LIST
81095: PUSH
81096: EMPTY
81097: LIST
81098: LIST
81099: PPUSH
81100: CALL_OW 72
81104: ST_TO_ADDR
// if not vehicles then
81105: LD_VAR 0 1
81109: NOT
81110: IFFALSE 81114
// exit ;
81112: GO 81141
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
81114: LD_VAR 0 1
81118: PPUSH
81119: LD_VAR 0 2
81123: PUSH
81124: LD_INT 1
81126: ARRAY
81127: PPUSH
81128: LD_VAR 0 2
81132: PUSH
81133: LD_INT 2
81135: ARRAY
81136: PPUSH
81137: CALL_OW 111
// end ;
81141: LD_VAR 0 3
81145: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
81146: LD_INT 0
81148: PPUSH
81149: PPUSH
81150: PPUSH
// if not side or not area then
81151: LD_VAR 0 1
81155: NOT
81156: IFTRUE 81165
81158: PUSH
81159: LD_VAR 0 2
81163: NOT
81164: OR
81165: IFFALSE 81169
// exit ;
81167: GO 81288
// tmp := AreaToList ( area , 0 ) ;
81169: LD_ADDR_VAR 0 5
81173: PUSH
81174: LD_VAR 0 2
81178: PPUSH
81179: LD_INT 0
81181: PPUSH
81182: CALL_OW 517
81186: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
81187: LD_ADDR_VAR 0 4
81191: PUSH
81192: DOUBLE
81193: LD_INT 1
81195: DEC
81196: ST_TO_ADDR
81197: LD_VAR 0 5
81201: PUSH
81202: LD_INT 1
81204: ARRAY
81205: PUSH
81206: FOR_TO
81207: IFFALSE 81286
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
81209: LD_VAR 0 5
81213: PUSH
81214: LD_INT 1
81216: ARRAY
81217: PUSH
81218: LD_VAR 0 4
81222: ARRAY
81223: PPUSH
81224: LD_VAR 0 5
81228: PUSH
81229: LD_INT 2
81231: ARRAY
81232: PUSH
81233: LD_VAR 0 4
81237: ARRAY
81238: PPUSH
81239: CALL_OW 351
81243: IFFALSE 81284
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
81245: LD_VAR 0 5
81249: PUSH
81250: LD_INT 1
81252: ARRAY
81253: PUSH
81254: LD_VAR 0 4
81258: ARRAY
81259: PPUSH
81260: LD_VAR 0 5
81264: PUSH
81265: LD_INT 2
81267: ARRAY
81268: PUSH
81269: LD_VAR 0 4
81273: ARRAY
81274: PPUSH
81275: LD_VAR 0 1
81279: PPUSH
81280: CALL_OW 244
// end ;
81284: GO 81206
81286: POP
81287: POP
// end ;
81288: LD_VAR 0 3
81292: RET
// export function UniqueArray ( array ) ; var i ; begin
81293: LD_INT 0
81295: PPUSH
81296: PPUSH
// result := [ ] ;
81297: LD_ADDR_VAR 0 2
81301: PUSH
81302: EMPTY
81303: ST_TO_ADDR
// if not array then
81304: LD_VAR 0 1
81308: NOT
81309: IFFALSE 81313
// exit ;
81311: GO 81374
// for i := 1 to array do
81313: LD_ADDR_VAR 0 3
81317: PUSH
81318: DOUBLE
81319: LD_INT 1
81321: DEC
81322: ST_TO_ADDR
81323: LD_VAR 0 1
81327: PUSH
81328: FOR_TO
81329: IFFALSE 81372
// if not array [ i ] in result then
81331: LD_VAR 0 1
81335: PUSH
81336: LD_VAR 0 3
81340: ARRAY
81341: PUSH
81342: LD_VAR 0 2
81346: IN
81347: NOT
81348: IFFALSE 81370
// result := Join ( result , i ) ;
81350: LD_ADDR_VAR 0 2
81354: PUSH
81355: LD_VAR 0 2
81359: PPUSH
81360: LD_VAR 0 3
81364: PPUSH
81365: CALL 76025 0 2
81369: ST_TO_ADDR
81370: GO 81328
81372: POP
81373: POP
// end ; end_of_file
81374: LD_VAR 0 2
81378: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81379: LD_VAR 0 1
81383: PUSH
81384: LD_INT 200
81386: DOUBLE
81387: GREATEREQUAL
81388: IFFALSE 81396
81390: LD_INT 299
81392: DOUBLE
81393: LESSEQUAL
81394: IFTRUE 81398
81396: GO 81430
81398: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81399: LD_VAR 0 1
81403: PPUSH
81404: LD_VAR 0 2
81408: PPUSH
81409: LD_VAR 0 3
81413: PPUSH
81414: LD_VAR 0 4
81418: PPUSH
81419: LD_VAR 0 5
81423: PPUSH
81424: CALL 16015 0 5
81428: GO 81507
81430: LD_INT 300
81432: DOUBLE
81433: GREATEREQUAL
81434: IFFALSE 81442
81436: LD_INT 399
81438: DOUBLE
81439: LESSEQUAL
81440: IFTRUE 81444
81442: GO 81506
81444: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81445: LD_VAR 0 1
81449: PPUSH
81450: LD_VAR 0 2
81454: PPUSH
81455: LD_VAR 0 3
81459: PPUSH
81460: LD_VAR 0 4
81464: PPUSH
81465: LD_VAR 0 5
81469: PPUSH
81470: LD_VAR 0 6
81474: PPUSH
81475: LD_VAR 0 7
81479: PPUSH
81480: LD_VAR 0 8
81484: PPUSH
81485: LD_VAR 0 9
81489: PPUSH
81490: LD_VAR 0 10
81494: PPUSH
81495: LD_VAR 0 11
81499: PPUSH
81500: CALL 34378 0 11
81504: GO 81507
81506: POP
// end ;
81507: PPOPN 11
81509: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81510: LD_VAR 0 1
81514: PPUSH
81515: LD_VAR 0 2
81519: PPUSH
81520: LD_VAR 0 3
81524: PPUSH
81525: LD_VAR 0 4
81529: PPUSH
81530: LD_VAR 0 5
81534: PPUSH
81535: CALL 15315 0 5
// end ; end_of_file
81539: PPOPN 5
81541: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81542: LD_VAR 0 1
81546: PPUSH
81547: LD_VAR 0 2
81551: PPUSH
81552: LD_VAR 0 3
81556: PPUSH
81557: LD_VAR 0 4
81561: PPUSH
81562: LD_VAR 0 5
81566: PPUSH
81567: LD_VAR 0 6
81571: PPUSH
81572: CALL 21918 0 6
// end ;
81576: PPOPN 6
81578: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81579: LD_INT 0
81581: PPUSH
// begin if not units then
81582: LD_VAR 0 1
81586: NOT
81587: IFFALSE 81591
// exit ;
81589: GO 81625
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
81591: LD_VAR 0 1
81595: PPUSH
81596: LD_VAR 0 2
81600: PPUSH
81601: LD_VAR 0 3
81605: PPUSH
81606: LD_VAR 0 4
81610: PPUSH
81611: LD_VAR 0 5
81615: PPUSH
81616: LD_VAR 0 6
81620: PPUSH
81621: CALL 21712 0 6
// end ;
81625: PPOPN 7
81627: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81628: CALL 21798 0 0
// end ;
81632: PPOPN 1
81634: END
