// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// PrepareNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 690 0 2
// PrepareArabian ;
  31: CALL 2969 0 0
// PrepareRussian ;
  35: CALL 4567 0 0
// Action ;
  39: CALL 8120 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 210: LD_ADDR_EXP 14
 214: PUSH
 215: LD_STRING 04_1_RuLabCaptured
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 30
 225: ST_TO_ADDR
// end ;
 226: LD_VAR 0 1
 230: RET
// every 0 0$1 trigger debug do var i ;
 231: LD_EXP 1
 235: IFFALSE 319
 237: GO 239
 239: DISABLE
 240: LD_INT 0
 242: PPUSH
// begin enable ;
 243: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 244: LD_ADDR_VAR 0 1
 248: PUSH
 249: LD_INT 22
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: PUSH
 259: LD_INT 3
 261: PUSH
 262: LD_INT 21
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: EMPTY
 269: LIST
 270: LIST
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PPUSH
 280: CALL_OW 69
 284: PUSH
 285: FOR_IN
 286: IFFALSE 317
// if GetLives ( i ) < 1000 then
 288: LD_VAR 0 1
 292: PPUSH
 293: CALL_OW 256
 297: PUSH
 298: LD_INT 1000
 300: LESS
 301: IFFALSE 315
// SetLives ( i , 1000 ) ;
 303: LD_VAR 0 1
 307: PPUSH
 308: LD_INT 1000
 310: PPUSH
 311: CALL_OW 234
 315: GO 285
 317: POP
 318: POP
// end ; end_of_file
 319: PPOPN 1
 321: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 322: LD_INT 0
 324: PPUSH
 325: PPUSH
// if exist_mode then
 326: LD_VAR 0 2
 330: IFFALSE 355
// unit := CreateCharacter ( prefix & ident ) else
 332: LD_ADDR_VAR 0 5
 336: PUSH
 337: LD_VAR 0 3
 341: PUSH
 342: LD_VAR 0 1
 346: STR
 347: PPUSH
 348: CALL_OW 34
 352: ST_TO_ADDR
 353: GO 370
// unit := NewCharacter ( ident ) ;
 355: LD_ADDR_VAR 0 5
 359: PUSH
 360: LD_VAR 0 1
 364: PPUSH
 365: CALL_OW 25
 369: ST_TO_ADDR
// result := unit ;
 370: LD_ADDR_VAR 0 4
 374: PUSH
 375: LD_VAR 0 5
 379: ST_TO_ADDR
// end ;
 380: LD_VAR 0 4
 384: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 385: LD_INT 0
 387: PPUSH
// uc_side := side ;
 388: LD_ADDR_OWVAR 20
 392: PUSH
 393: LD_VAR 0 1
 397: ST_TO_ADDR
// uc_nation := nation ;
 398: LD_ADDR_OWVAR 21
 402: PUSH
 403: LD_VAR 0 2
 407: ST_TO_ADDR
// vc_chassis := chassis ;
 408: LD_ADDR_OWVAR 37
 412: PUSH
 413: LD_VAR 0 3
 417: ST_TO_ADDR
// vc_engine := engine ;
 418: LD_ADDR_OWVAR 39
 422: PUSH
 423: LD_VAR 0 4
 427: ST_TO_ADDR
// vc_control := control ;
 428: LD_ADDR_OWVAR 38
 432: PUSH
 433: LD_VAR 0 5
 437: ST_TO_ADDR
// vc_weapon := weapon ;
 438: LD_ADDR_OWVAR 40
 442: PUSH
 443: LD_VAR 0 6
 447: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 448: LD_ADDR_OWVAR 41
 452: PUSH
 453: LD_VAR 0 7
 457: ST_TO_ADDR
// result := CreateVehicle ;
 458: LD_ADDR_VAR 0 8
 462: PUSH
 463: CALL_OW 45
 467: ST_TO_ADDR
// end ;
 468: LD_VAR 0 8
 472: RET
// export function SayX ( units , ident ) ; var i ; begin
 473: LD_INT 0
 475: PPUSH
 476: PPUSH
// result := false ;
 477: LD_ADDR_VAR 0 3
 481: PUSH
 482: LD_INT 0
 484: ST_TO_ADDR
// if not units then
 485: LD_VAR 0 1
 489: NOT
 490: IFFALSE 494
// exit ;
 492: GO 548
// for i in units do
 494: LD_ADDR_VAR 0 4
 498: PUSH
 499: LD_VAR 0 1
 503: PUSH
 504: FOR_IN
 505: IFFALSE 546
// if IsOk ( i ) then
 507: LD_VAR 0 4
 511: PPUSH
 512: CALL_OW 302
 516: IFFALSE 544
// begin Say ( i , ident ) ;
 518: LD_VAR 0 4
 522: PPUSH
 523: LD_VAR 0 2
 527: PPUSH
 528: CALL_OW 88
// result := i ;
 532: LD_ADDR_VAR 0 3
 536: PUSH
 537: LD_VAR 0 4
 541: ST_TO_ADDR
// break ;
 542: GO 546
// end ;
 544: GO 504
 546: POP
 547: POP
// end ;
 548: LD_VAR 0 3
 552: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 553: LD_INT 0
 555: PPUSH
 556: PPUSH
// InitUc ;
 557: CALL_OW 18
// InitHc ;
 561: CALL_OW 19
// uc_side := 0 ;
 565: LD_ADDR_OWVAR 20
 569: PUSH
 570: LD_INT 0
 572: ST_TO_ADDR
// uc_nation := 0 ;
 573: LD_ADDR_OWVAR 21
 577: PUSH
 578: LD_INT 0
 580: ST_TO_ADDR
// for i = 1 to amount do
 581: LD_ADDR_VAR 0 4
 585: PUSH
 586: DOUBLE
 587: LD_INT 1
 589: DEC
 590: ST_TO_ADDR
 591: LD_VAR 0 2
 595: PUSH
 596: FOR_TO
 597: IFFALSE 679
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 599: LD_ADDR_OWVAR 29
 603: PUSH
 604: LD_INT 9
 606: PPUSH
 607: LD_INT 12
 609: PPUSH
 610: CALL_OW 12
 614: PUSH
 615: LD_INT 9
 617: PPUSH
 618: LD_INT 12
 620: PPUSH
 621: CALL_OW 12
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 630: LD_ADDR_OWVAR 35
 634: PUSH
 635: LD_INT 1
 637: NEG
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL_OW 12
 646: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 647: LD_INT 0
 649: PPUSH
 650: LD_INT 12
 652: PPUSH
 653: LD_INT 1
 655: PPUSH
 656: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 660: CALL_OW 44
 664: PPUSH
 665: LD_VAR 0 1
 669: PPUSH
 670: LD_INT 0
 672: PPUSH
 673: CALL_OW 49
// end ;
 677: GO 596
 679: POP
 680: POP
// InitHc ;
 681: CALL_OW 19
// end ;
 685: LD_VAR 0 3
 689: RET
// export function PrepareNature ( forest , swamp ) ; var i ; begin
 690: LD_INT 0
 692: PPUSH
 693: PPUSH
// for i := 1 to 3 do
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: DOUBLE
 700: LD_INT 1
 702: DEC
 703: ST_TO_ADDR
 704: LD_INT 3
 706: PUSH
 707: FOR_TO
 708: IFFALSE 745
// begin hc_class := 21 ;
 710: LD_ADDR_OWVAR 28
 714: PUSH
 715: LD_INT 21
 717: ST_TO_ADDR
// hc_gallery :=  ;
 718: LD_ADDR_OWVAR 33
 722: PUSH
 723: LD_STRING 
 725: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 726: CALL_OW 44
 730: PPUSH
 731: LD_VAR 0 1
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL_OW 49
// end ;
 743: GO 707
 745: POP
 746: POP
// for i := 1 to 3 do
 747: LD_ADDR_VAR 0 4
 751: PUSH
 752: DOUBLE
 753: LD_INT 1
 755: DEC
 756: ST_TO_ADDR
 757: LD_INT 3
 759: PUSH
 760: FOR_TO
 761: IFFALSE 798
// begin hc_class := 18 ;
 763: LD_ADDR_OWVAR 28
 767: PUSH
 768: LD_INT 18
 770: ST_TO_ADDR
// hc_gallery :=  ;
 771: LD_ADDR_OWVAR 33
 775: PUSH
 776: LD_STRING 
 778: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 779: CALL_OW 44
 783: PPUSH
 784: LD_VAR 0 1
 788: PPUSH
 789: LD_INT 0
 791: PPUSH
 792: CALL_OW 49
// end ;
 796: GO 760
 798: POP
 799: POP
// for i := 1 to 3 do
 800: LD_ADDR_VAR 0 4
 804: PUSH
 805: DOUBLE
 806: LD_INT 1
 808: DEC
 809: ST_TO_ADDR
 810: LD_INT 3
 812: PUSH
 813: FOR_TO
 814: IFFALSE 851
// begin hc_class := 13 ;
 816: LD_ADDR_OWVAR 28
 820: PUSH
 821: LD_INT 13
 823: ST_TO_ADDR
// hc_gallery :=  ;
 824: LD_ADDR_OWVAR 33
 828: PUSH
 829: LD_STRING 
 831: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 832: CALL_OW 44
 836: PPUSH
 837: LD_VAR 0 1
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: CALL_OW 49
// end ;
 849: GO 813
 851: POP
 852: POP
// for i := 1 to 4 do
 853: LD_ADDR_VAR 0 4
 857: PUSH
 858: DOUBLE
 859: LD_INT 1
 861: DEC
 862: ST_TO_ADDR
 863: LD_INT 4
 865: PUSH
 866: FOR_TO
 867: IFFALSE 904
// begin hc_class := class_frog ;
 869: LD_ADDR_OWVAR 28
 873: PUSH
 874: LD_INT 19
 876: ST_TO_ADDR
// hc_gallery :=  ;
 877: LD_ADDR_OWVAR 33
 881: PUSH
 882: LD_STRING 
 884: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 885: CALL_OW 44
 889: PPUSH
 890: LD_VAR 0 2
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL_OW 49
// end ;
 902: GO 866
 904: POP
 905: POP
// end ;
 906: LD_VAR 0 3
 910: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// if not observer or not unit then
 916: LD_VAR 0 1
 920: NOT
 921: PUSH
 922: LD_VAR 0 2
 926: NOT
 927: OR
 928: IFFALSE 932
// exit ;
 930: GO 980
// if not See ( GetSide ( observer ) , unit ) then
 932: LD_VAR 0 1
 936: PPUSH
 937: CALL_OW 255
 941: PPUSH
 942: LD_VAR 0 2
 946: PPUSH
 947: CALL_OW 292
 951: NOT
 952: IFFALSE 956
// exit ;
 954: GO 980
// result := GetDistUnits ( observer , unit ) < 12 ;
 956: LD_ADDR_VAR 0 3
 960: PUSH
 961: LD_VAR 0 1
 965: PPUSH
 966: LD_VAR 0 2
 970: PPUSH
 971: CALL_OW 296
 975: PUSH
 976: LD_INT 12
 978: LESS
 979: ST_TO_ADDR
// end ;
 980: LD_VAR 0 3
 984: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 985: LD_INT 0
 987: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 988: LD_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ARRAY
 996: PPUSH
 997: LD_VAR 0 2
1001: PUSH
1002: LD_INT 2
1004: ARRAY
1005: PPUSH
1006: CALL_OW 488
1010: PUSH
1011: LD_VAR 0 2
1015: PUSH
1016: LD_INT 1
1018: ARRAY
1019: PPUSH
1020: LD_VAR 0 2
1024: PUSH
1025: LD_INT 2
1027: ARRAY
1028: PPUSH
1029: CALL_OW 428
1033: PUSH
1034: LD_INT 0
1036: EQUAL
1037: AND
1038: IFFALSE 1072
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1040: LD_VAR 0 1
1044: PPUSH
1045: LD_VAR 0 2
1049: PUSH
1050: LD_INT 1
1052: ARRAY
1053: PPUSH
1054: LD_VAR 0 2
1058: PUSH
1059: LD_INT 2
1061: ARRAY
1062: PPUSH
1063: LD_VAR 0 3
1067: PPUSH
1068: CALL_OW 48
// end ;
1072: LD_VAR 0 4
1076: RET
// export function Video ( mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// ingame_video = mode ;
1080: LD_ADDR_OWVAR 52
1084: PUSH
1085: LD_VAR 0 1
1089: ST_TO_ADDR
// interface_hidden = mode ;
1090: LD_ADDR_OWVAR 54
1094: PUSH
1095: LD_VAR 0 1
1099: ST_TO_ADDR
// end ;
1100: LD_VAR 0 2
1104: RET
// export function ReverseArray ( array ) ; var i ; begin
1105: LD_INT 0
1107: PPUSH
1108: PPUSH
// if not array then
1109: LD_VAR 0 1
1113: NOT
1114: IFFALSE 1118
// exit ;
1116: GO 1176
// result := [ ] ;
1118: LD_ADDR_VAR 0 2
1122: PUSH
1123: EMPTY
1124: ST_TO_ADDR
// for i := 1 to array do
1125: LD_ADDR_VAR 0 3
1129: PUSH
1130: DOUBLE
1131: LD_INT 1
1133: DEC
1134: ST_TO_ADDR
1135: LD_VAR 0 1
1139: PUSH
1140: FOR_TO
1141: IFFALSE 1174
// result := Insert ( result , 1 , array [ i ] ) ;
1143: LD_ADDR_VAR 0 2
1147: PUSH
1148: LD_VAR 0 2
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: LD_VAR 0 1
1160: PUSH
1161: LD_VAR 0 3
1165: ARRAY
1166: PPUSH
1167: CALL_OW 2
1171: ST_TO_ADDR
1172: GO 1140
1174: POP
1175: POP
// end ;
1176: LD_VAR 0 2
1180: RET
// export function ComExit ( unit ) ; begin
1181: LD_INT 0
1183: PPUSH
// result := IsInUnit ( unit ) ;
1184: LD_ADDR_VAR 0 2
1188: PUSH
1189: LD_VAR 0 1
1193: PPUSH
1194: CALL_OW 310
1198: ST_TO_ADDR
// if not result then
1199: LD_VAR 0 2
1203: NOT
1204: IFFALSE 1208
// exit ;
1206: GO 1243
// if GetType ( result ) = unit_vehicle then
1208: LD_VAR 0 2
1212: PPUSH
1213: CALL_OW 247
1217: PUSH
1218: LD_INT 2
1220: EQUAL
1221: IFFALSE 1234
// ComExitVehicle ( unit ) else
1223: LD_VAR 0 1
1227: PPUSH
1228: CALL_OW 121
1232: GO 1243
// ComExitBuilding ( unit ) ;
1234: LD_VAR 0 1
1238: PPUSH
1239: CALL_OW 122
// end ;
1243: LD_VAR 0 2
1247: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1248: LD_INT 0
1250: PPUSH
1251: PPUSH
// if not side or not nation then
1252: LD_VAR 0 1
1256: NOT
1257: PUSH
1258: LD_VAR 0 2
1262: NOT
1263: OR
1264: IFFALSE 1268
// exit ;
1266: GO 2032
// case nation of nation_american :
1268: LD_VAR 0 2
1272: PUSH
1273: LD_INT 1
1275: DOUBLE
1276: EQUAL
1277: IFTRUE 1281
1279: GO 1495
1281: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1282: LD_ADDR_VAR 0 4
1286: PUSH
1287: LD_INT 35
1289: PUSH
1290: LD_INT 45
1292: PUSH
1293: LD_INT 46
1295: PUSH
1296: LD_INT 47
1298: PUSH
1299: LD_INT 82
1301: PUSH
1302: LD_INT 83
1304: PUSH
1305: LD_INT 84
1307: PUSH
1308: LD_INT 85
1310: PUSH
1311: LD_INT 86
1313: PUSH
1314: LD_INT 1
1316: PUSH
1317: LD_INT 2
1319: PUSH
1320: LD_INT 6
1322: PUSH
1323: LD_INT 15
1325: PUSH
1326: LD_INT 16
1328: PUSH
1329: LD_INT 7
1331: PUSH
1332: LD_INT 12
1334: PUSH
1335: LD_INT 13
1337: PUSH
1338: LD_INT 10
1340: PUSH
1341: LD_INT 14
1343: PUSH
1344: LD_INT 20
1346: PUSH
1347: LD_INT 21
1349: PUSH
1350: LD_INT 22
1352: PUSH
1353: LD_INT 25
1355: PUSH
1356: LD_INT 32
1358: PUSH
1359: LD_INT 27
1361: PUSH
1362: LD_INT 36
1364: PUSH
1365: LD_INT 69
1367: PUSH
1368: LD_INT 39
1370: PUSH
1371: LD_INT 34
1373: PUSH
1374: LD_INT 40
1376: PUSH
1377: LD_INT 48
1379: PUSH
1380: LD_INT 49
1382: PUSH
1383: LD_INT 50
1385: PUSH
1386: LD_INT 51
1388: PUSH
1389: LD_INT 52
1391: PUSH
1392: LD_INT 53
1394: PUSH
1395: LD_INT 54
1397: PUSH
1398: LD_INT 55
1400: PUSH
1401: LD_INT 56
1403: PUSH
1404: LD_INT 57
1406: PUSH
1407: LD_INT 58
1409: PUSH
1410: LD_INT 59
1412: PUSH
1413: LD_INT 60
1415: PUSH
1416: LD_INT 61
1418: PUSH
1419: LD_INT 62
1421: PUSH
1422: LD_INT 80
1424: PUSH
1425: LD_INT 82
1427: PUSH
1428: LD_INT 83
1430: PUSH
1431: LD_INT 84
1433: PUSH
1434: LD_INT 85
1436: PUSH
1437: LD_INT 86
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: ST_TO_ADDR
1493: GO 1956
1495: LD_INT 2
1497: DOUBLE
1498: EQUAL
1499: IFTRUE 1503
1501: GO 1725
1503: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1504: LD_ADDR_VAR 0 4
1508: PUSH
1509: LD_INT 35
1511: PUSH
1512: LD_INT 45
1514: PUSH
1515: LD_INT 46
1517: PUSH
1518: LD_INT 47
1520: PUSH
1521: LD_INT 82
1523: PUSH
1524: LD_INT 83
1526: PUSH
1527: LD_INT 84
1529: PUSH
1530: LD_INT 85
1532: PUSH
1533: LD_INT 87
1535: PUSH
1536: LD_INT 70
1538: PUSH
1539: LD_INT 1
1541: PUSH
1542: LD_INT 11
1544: PUSH
1545: LD_INT 3
1547: PUSH
1548: LD_INT 4
1550: PUSH
1551: LD_INT 5
1553: PUSH
1554: LD_INT 6
1556: PUSH
1557: LD_INT 15
1559: PUSH
1560: LD_INT 18
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: LD_INT 17
1568: PUSH
1569: LD_INT 8
1571: PUSH
1572: LD_INT 20
1574: PUSH
1575: LD_INT 21
1577: PUSH
1578: LD_INT 22
1580: PUSH
1581: LD_INT 72
1583: PUSH
1584: LD_INT 26
1586: PUSH
1587: LD_INT 69
1589: PUSH
1590: LD_INT 39
1592: PUSH
1593: LD_INT 40
1595: PUSH
1596: LD_INT 41
1598: PUSH
1599: LD_INT 42
1601: PUSH
1602: LD_INT 43
1604: PUSH
1605: LD_INT 48
1607: PUSH
1608: LD_INT 49
1610: PUSH
1611: LD_INT 50
1613: PUSH
1614: LD_INT 51
1616: PUSH
1617: LD_INT 52
1619: PUSH
1620: LD_INT 53
1622: PUSH
1623: LD_INT 54
1625: PUSH
1626: LD_INT 55
1628: PUSH
1629: LD_INT 56
1631: PUSH
1632: LD_INT 60
1634: PUSH
1635: LD_INT 61
1637: PUSH
1638: LD_INT 62
1640: PUSH
1641: LD_INT 66
1643: PUSH
1644: LD_INT 67
1646: PUSH
1647: LD_INT 68
1649: PUSH
1650: LD_INT 81
1652: PUSH
1653: LD_INT 82
1655: PUSH
1656: LD_INT 83
1658: PUSH
1659: LD_INT 84
1661: PUSH
1662: LD_INT 85
1664: PUSH
1665: LD_INT 87
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: ST_TO_ADDR
1723: GO 1956
1725: LD_INT 3
1727: DOUBLE
1728: EQUAL
1729: IFTRUE 1733
1731: GO 1955
1733: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1734: LD_ADDR_VAR 0 4
1738: PUSH
1739: LD_INT 46
1741: PUSH
1742: LD_INT 47
1744: PUSH
1745: LD_INT 1
1747: PUSH
1748: LD_INT 2
1750: PUSH
1751: LD_INT 82
1753: PUSH
1754: LD_INT 83
1756: PUSH
1757: LD_INT 84
1759: PUSH
1760: LD_INT 85
1762: PUSH
1763: LD_INT 86
1765: PUSH
1766: LD_INT 11
1768: PUSH
1769: LD_INT 9
1771: PUSH
1772: LD_INT 20
1774: PUSH
1775: LD_INT 19
1777: PUSH
1778: LD_INT 21
1780: PUSH
1781: LD_INT 24
1783: PUSH
1784: LD_INT 22
1786: PUSH
1787: LD_INT 25
1789: PUSH
1790: LD_INT 28
1792: PUSH
1793: LD_INT 29
1795: PUSH
1796: LD_INT 30
1798: PUSH
1799: LD_INT 31
1801: PUSH
1802: LD_INT 37
1804: PUSH
1805: LD_INT 38
1807: PUSH
1808: LD_INT 32
1810: PUSH
1811: LD_INT 27
1813: PUSH
1814: LD_INT 33
1816: PUSH
1817: LD_INT 69
1819: PUSH
1820: LD_INT 39
1822: PUSH
1823: LD_INT 34
1825: PUSH
1826: LD_INT 40
1828: PUSH
1829: LD_INT 71
1831: PUSH
1832: LD_INT 23
1834: PUSH
1835: LD_INT 44
1837: PUSH
1838: LD_INT 48
1840: PUSH
1841: LD_INT 49
1843: PUSH
1844: LD_INT 50
1846: PUSH
1847: LD_INT 51
1849: PUSH
1850: LD_INT 52
1852: PUSH
1853: LD_INT 53
1855: PUSH
1856: LD_INT 54
1858: PUSH
1859: LD_INT 55
1861: PUSH
1862: LD_INT 56
1864: PUSH
1865: LD_INT 57
1867: PUSH
1868: LD_INT 58
1870: PUSH
1871: LD_INT 59
1873: PUSH
1874: LD_INT 63
1876: PUSH
1877: LD_INT 64
1879: PUSH
1880: LD_INT 65
1882: PUSH
1883: LD_INT 82
1885: PUSH
1886: LD_INT 83
1888: PUSH
1889: LD_INT 84
1891: PUSH
1892: LD_INT 85
1894: PUSH
1895: LD_INT 86
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: ST_TO_ADDR
1953: GO 1956
1955: POP
// if state > - 1 and state < 3 then
1956: LD_VAR 0 3
1960: PUSH
1961: LD_INT 1
1963: NEG
1964: GREATER
1965: PUSH
1966: LD_VAR 0 3
1970: PUSH
1971: LD_INT 3
1973: LESS
1974: AND
1975: IFFALSE 2032
// for i in result do
1977: LD_ADDR_VAR 0 5
1981: PUSH
1982: LD_VAR 0 4
1986: PUSH
1987: FOR_IN
1988: IFFALSE 2030
// if GetTech ( i , side ) <> state then
1990: LD_VAR 0 5
1994: PPUSH
1995: LD_VAR 0 1
1999: PPUSH
2000: CALL_OW 321
2004: PUSH
2005: LD_VAR 0 3
2009: NONEQUAL
2010: IFFALSE 2028
// result := result diff i ;
2012: LD_ADDR_VAR 0 4
2016: PUSH
2017: LD_VAR 0 4
2021: PUSH
2022: LD_VAR 0 5
2026: DIFF
2027: ST_TO_ADDR
2028: GO 1987
2030: POP
2031: POP
// end ;
2032: LD_VAR 0 4
2036: RET
// export function SortByDistanceXY ( x , y , list , asc ) ; var i , j , tmp ; begin
2037: LD_INT 0
2039: PPUSH
2040: PPUSH
2041: PPUSH
2042: PPUSH
// if not list then
2043: LD_VAR 0 3
2047: NOT
2048: IFFALSE 2052
// exit ;
2050: GO 2360
// result := [ ] ;
2052: LD_ADDR_VAR 0 5
2056: PUSH
2057: EMPTY
2058: ST_TO_ADDR
// for i in list do
2059: LD_ADDR_VAR 0 6
2063: PUSH
2064: LD_VAR 0 3
2068: PUSH
2069: FOR_IN
2070: IFFALSE 2272
// begin tmp := GetDistUnitXY ( i , x , y ) ;
2072: LD_ADDR_VAR 0 8
2076: PUSH
2077: LD_VAR 0 6
2081: PPUSH
2082: LD_VAR 0 1
2086: PPUSH
2087: LD_VAR 0 2
2091: PPUSH
2092: CALL_OW 297
2096: ST_TO_ADDR
// if not result then
2097: LD_VAR 0 5
2101: NOT
2102: IFFALSE 2128
// result := [ [ i , tmp ] ] else
2104: LD_ADDR_VAR 0 5
2108: PUSH
2109: LD_VAR 0 6
2113: PUSH
2114: LD_VAR 0 8
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PUSH
2123: EMPTY
2124: LIST
2125: ST_TO_ADDR
2126: GO 2270
// begin if result [ result ] [ 2 ] < tmp then
2128: LD_VAR 0 5
2132: PUSH
2133: LD_VAR 0 5
2137: ARRAY
2138: PUSH
2139: LD_INT 2
2141: ARRAY
2142: PUSH
2143: LD_VAR 0 8
2147: LESS
2148: IFFALSE 2190
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
2150: LD_ADDR_VAR 0 5
2154: PUSH
2155: LD_VAR 0 5
2159: PPUSH
2160: LD_VAR 0 5
2164: PUSH
2165: LD_INT 1
2167: PLUS
2168: PPUSH
2169: LD_VAR 0 6
2173: PUSH
2174: LD_VAR 0 8
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PPUSH
2183: CALL_OW 2
2187: ST_TO_ADDR
2188: GO 2270
// for j = 1 to result do
2190: LD_ADDR_VAR 0 7
2194: PUSH
2195: DOUBLE
2196: LD_INT 1
2198: DEC
2199: ST_TO_ADDR
2200: LD_VAR 0 5
2204: PUSH
2205: FOR_TO
2206: IFFALSE 2268
// begin if tmp < result [ j ] [ 2 ] then
2208: LD_VAR 0 8
2212: PUSH
2213: LD_VAR 0 5
2217: PUSH
2218: LD_VAR 0 7
2222: ARRAY
2223: PUSH
2224: LD_INT 2
2226: ARRAY
2227: LESS
2228: IFFALSE 2266
// begin result := Insert ( result , j , [ i , tmp ] ) ;
2230: LD_ADDR_VAR 0 5
2234: PUSH
2235: LD_VAR 0 5
2239: PPUSH
2240: LD_VAR 0 7
2244: PPUSH
2245: LD_VAR 0 6
2249: PUSH
2250: LD_VAR 0 8
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PPUSH
2259: CALL_OW 2
2263: ST_TO_ADDR
// break ;
2264: GO 2268
// end ; end ;
2266: GO 2205
2268: POP
2269: POP
// end ; end ;
2270: GO 2069
2272: POP
2273: POP
// if result and not asc then
2274: LD_VAR 0 5
2278: PUSH
2279: LD_VAR 0 4
2283: NOT
2284: AND
2285: IFFALSE 2360
// begin tmp := result ;
2287: LD_ADDR_VAR 0 8
2291: PUSH
2292: LD_VAR 0 5
2296: ST_TO_ADDR
// for i = tmp downto 1 do
2297: LD_ADDR_VAR 0 6
2301: PUSH
2302: DOUBLE
2303: LD_VAR 0 8
2307: INC
2308: ST_TO_ADDR
2309: LD_INT 1
2311: PUSH
2312: FOR_DOWNTO
2313: IFFALSE 2358
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
2315: LD_ADDR_VAR 0 5
2319: PUSH
2320: LD_VAR 0 5
2324: PPUSH
2325: LD_VAR 0 8
2329: PUSH
2330: LD_VAR 0 6
2334: MINUS
2335: PUSH
2336: LD_INT 1
2338: PLUS
2339: PPUSH
2340: LD_VAR 0 8
2344: PUSH
2345: LD_VAR 0 6
2349: ARRAY
2350: PPUSH
2351: CALL_OW 1
2355: ST_TO_ADDR
2356: GO 2312
2358: POP
2359: POP
// end ; end ;
2360: LD_VAR 0 5
2364: RET
// export function SortByDistanceUnit ( unit , list , asc ) ; begin
2365: LD_INT 0
2367: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc ) ;
2368: LD_ADDR_VAR 0 4
2372: PUSH
2373: LD_VAR 0 1
2377: PPUSH
2378: CALL_OW 250
2382: PPUSH
2383: LD_VAR 0 1
2387: PPUSH
2388: CALL_OW 251
2392: PPUSH
2393: LD_VAR 0 2
2397: PPUSH
2398: LD_VAR 0 3
2402: PPUSH
2403: CALL 2037 0 4
2407: ST_TO_ADDR
// end ;
2408: LD_VAR 0 4
2412: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
2413: LD_INT 0
2415: PPUSH
2416: PPUSH
2417: PPUSH
2418: PPUSH
2419: PPUSH
// if not unit then
2420: LD_VAR 0 1
2424: NOT
2425: IFFALSE 2429
// exit ;
2427: GO 2631
// side := GetSide ( unit ) ;
2429: LD_ADDR_VAR 0 4
2433: PUSH
2434: LD_VAR 0 1
2438: PPUSH
2439: CALL_OW 255
2443: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
2444: LD_ADDR_VAR 0 5
2448: PUSH
2449: LD_INT 22
2451: PUSH
2452: LD_VAR 0 4
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: PUSH
2461: LD_INT 30
2463: PUSH
2464: LD_VAR 0 2
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: PPUSH
2477: CALL_OW 69
2481: ST_TO_ADDR
// if not tmp then
2482: LD_VAR 0 5
2486: NOT
2487: IFFALSE 2491
// exit ;
2489: GO 2631
// tmp := SortByDistanceUnit ( unit , tmp , true ) ;
2491: LD_ADDR_VAR 0 5
2495: PUSH
2496: LD_VAR 0 1
2500: PPUSH
2501: LD_VAR 0 5
2505: PPUSH
2506: LD_INT 1
2508: PPUSH
2509: CALL 2365 0 3
2513: ST_TO_ADDR
// places := 1 ;
2514: LD_ADDR_VAR 0 7
2518: PUSH
2519: LD_INT 1
2521: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
2522: LD_VAR 0 2
2526: PUSH
2527: LD_INT 0
2529: PUSH
2530: LD_INT 1
2532: PUSH
2533: LD_INT 4
2535: PUSH
2536: LD_INT 5
2538: PUSH
2539: LD_INT 2
2541: PUSH
2542: LD_INT 3
2544: PUSH
2545: LD_INT 6
2547: PUSH
2548: LD_INT 7
2550: PUSH
2551: LD_INT 8
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: IN
2565: IFFALSE 2575
// places := 6 ;
2567: LD_ADDR_VAR 0 7
2571: PUSH
2572: LD_INT 6
2574: ST_TO_ADDR
// for i in tmp do
2575: LD_ADDR_VAR 0 6
2579: PUSH
2580: LD_VAR 0 5
2584: PUSH
2585: FOR_IN
2586: IFFALSE 2629
// begin if UnitsInside ( i ) - places <= 0 then
2588: LD_VAR 0 6
2592: PPUSH
2593: CALL_OW 313
2597: PUSH
2598: LD_VAR 0 7
2602: MINUS
2603: PUSH
2604: LD_INT 0
2606: LESSEQUAL
2607: IFFALSE 2613
// continue else
2609: GO 2585
2611: GO 2627
// begin result := i ;
2613: LD_ADDR_VAR 0 3
2617: PUSH
2618: LD_VAR 0 6
2622: ST_TO_ADDR
// exit ;
2623: POP
2624: POP
2625: GO 2631
// end ; end ;
2627: GO 2585
2629: POP
2630: POP
// end ;
2631: LD_VAR 0 3
2635: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
2636: LD_INT 0
2638: PPUSH
2639: PPUSH
2640: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
2641: LD_VAR 0 1
2645: NOT
2646: PUSH
2647: LD_VAR 0 2
2651: PUSH
2652: LD_INT 1
2654: PUSH
2655: LD_INT 2
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: LD_INT 4
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: LIST
2668: LIST
2669: IN
2670: NOT
2671: OR
2672: IFFALSE 2676
// exit ;
2674: GO 2768
// tmp := [ ] ;
2676: LD_ADDR_VAR 0 5
2680: PUSH
2681: EMPTY
2682: ST_TO_ADDR
// for i in units do
2683: LD_ADDR_VAR 0 4
2687: PUSH
2688: LD_VAR 0 1
2692: PUSH
2693: FOR_IN
2694: IFFALSE 2737
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
2696: LD_ADDR_VAR 0 5
2700: PUSH
2701: LD_VAR 0 5
2705: PPUSH
2706: LD_VAR 0 5
2710: PUSH
2711: LD_INT 1
2713: PLUS
2714: PPUSH
2715: LD_VAR 0 4
2719: PPUSH
2720: LD_VAR 0 2
2724: PPUSH
2725: CALL_OW 259
2729: PPUSH
2730: CALL_OW 2
2734: ST_TO_ADDR
2735: GO 2693
2737: POP
2738: POP
// if not tmp then
2739: LD_VAR 0 5
2743: NOT
2744: IFFALSE 2748
// exit ;
2746: GO 2768
// result := SortListByListDesc ( units , tmp ) ;
2748: LD_ADDR_VAR 0 3
2752: PUSH
2753: LD_VAR 0 1
2757: PPUSH
2758: LD_VAR 0 5
2762: PPUSH
2763: CALL_OW 77
2767: ST_TO_ADDR
// end ;
2768: LD_VAR 0 3
2772: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
2773: LD_INT 0
2775: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
2776: LD_VAR 0 1
2780: PPUSH
2781: LD_VAR 0 2
2785: PPUSH
2786: LD_VAR 0 3
2790: PPUSH
2791: LD_VAR 0 4
2795: PPUSH
2796: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
2800: LD_VAR 0 1
2804: PPUSH
2805: LD_VAR 0 2
2809: PPUSH
2810: LD_VAR 0 3
2814: PPUSH
2815: CALL_OW 331
// end ;
2819: LD_VAR 0 5
2823: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
2824: LD_INT 0
2826: PPUSH
// if not units then
2827: LD_VAR 0 1
2831: NOT
2832: IFFALSE 2836
// exit ;
2834: GO 2901
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) , menDialog ) then
2836: LD_VAR 0 1
2840: PPUSH
2841: LD_INT 26
2843: PUSH
2844: LD_INT 1
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: PPUSH
2851: CALL_OW 72
2855: PPUSH
2856: LD_VAR 0 2
2860: PPUSH
2861: CALL_OW 88
2865: NOT
2866: IFFALSE 2901
// Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
2868: LD_VAR 0 1
2872: PPUSH
2873: LD_INT 26
2875: PUSH
2876: LD_INT 2
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PPUSH
2883: CALL_OW 72
2887: PUSH
2888: LD_INT 1
2890: ARRAY
2891: PPUSH
2892: LD_VAR 0 3
2896: PPUSH
2897: CALL_OW 88
// end ;
2901: LD_VAR 0 4
2905: RET
// export function SeeGroup ( side , group ) ; var i ; begin
2906: LD_INT 0
2908: PPUSH
2909: PPUSH
// if not group then
2910: LD_VAR 0 2
2914: NOT
2915: IFFALSE 2919
// exit ;
2917: GO 2964
// for i in group do
2919: LD_ADDR_VAR 0 4
2923: PUSH
2924: LD_VAR 0 2
2928: PUSH
2929: FOR_IN
2930: IFFALSE 2962
// if See ( side , i ) then
2932: LD_VAR 0 1
2936: PPUSH
2937: LD_VAR 0 4
2941: PPUSH
2942: CALL_OW 292
2946: IFFALSE 2960
// begin result := true ;
2948: LD_ADDR_VAR 0 3
2952: PUSH
2953: LD_INT 1
2955: ST_TO_ADDR
// exit ;
2956: POP
2957: POP
2958: GO 2964
// end ;
2960: GO 2929
2962: POP
2963: POP
// end ; end_of_file
2964: LD_VAR 0 3
2968: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
2969: LD_INT 0
2971: PPUSH
2972: PPUSH
// uc_side := 2 ;
2973: LD_ADDR_OWVAR 20
2977: PUSH
2978: LD_INT 2
2980: ST_TO_ADDR
// uc_nation := 2 ;
2981: LD_ADDR_OWVAR 21
2985: PUSH
2986: LD_INT 2
2988: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2989: LD_ADDR_EXP 18
2993: PUSH
2994: LD_STRING Heike
2996: PPUSH
2997: LD_EXP 1
3001: NOT
3002: PPUSH
3003: LD_EXP 2
3007: PPUSH
3008: CALL 322 0 3
3012: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
3013: LD_ADDR_EXP 21
3017: PUSH
3018: LD_STRING Ibrahim
3020: PPUSH
3021: LD_EXP 1
3025: NOT
3026: PPUSH
3027: LD_EXP 2
3031: PPUSH
3032: CALL 322 0 3
3036: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
3037: LD_ADDR_EXP 19
3041: PUSH
3042: LD_STRING Givi
3044: PPUSH
3045: LD_EXP 1
3049: NOT
3050: PPUSH
3051: LD_EXP 2
3055: PPUSH
3056: CALL 322 0 3
3060: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
3061: LD_ADDR_EXP 22
3065: PUSH
3066: LD_STRING Kamil
3068: PPUSH
3069: LD_EXP 1
3073: NOT
3074: PPUSH
3075: LD_EXP 2
3079: PPUSH
3080: CALL 322 0 3
3084: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
3085: LD_ADDR_EXP 23
3089: PUSH
3090: LD_STRING Kaia
3092: PPUSH
3093: LD_EXP 1
3097: NOT
3098: PPUSH
3099: LD_EXP 2
3103: PPUSH
3104: CALL 322 0 3
3108: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
3109: LD_ADDR_EXP 24
3113: PUSH
3114: LD_STRING Sophia
3116: PPUSH
3117: LD_EXP 1
3121: NOT
3122: PPUSH
3123: LD_EXP 2
3127: PPUSH
3128: CALL 322 0 3
3132: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
3133: LD_ADDR_EXP 25
3137: PUSH
3138: LD_STRING Markov
3140: PPUSH
3141: LD_EXP 1
3145: NOT
3146: PPUSH
3147: LD_EXP 2
3151: PPUSH
3152: CALL 322 0 3
3156: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
3157: LD_ADDR_EXP 30
3161: PUSH
3162: LD_STRING Aviradze
3164: PPUSH
3165: LD_EXP 1
3169: NOT
3170: PPUSH
3171: LD_EXP 2
3175: PPUSH
3176: CALL 322 0 3
3180: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
3181: LD_ADDR_EXP 29
3185: PUSH
3186: LD_STRING Kurt
3188: PPUSH
3189: LD_EXP 1
3193: NOT
3194: PPUSH
3195: LD_EXP 2
3199: PPUSH
3200: CALL 322 0 3
3204: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
3205: LD_ADDR_EXP 20
3209: PUSH
3210: LD_STRING Mike
3212: PPUSH
3213: LD_EXP 1
3217: NOT
3218: PPUSH
3219: LD_EXP 2
3223: PPUSH
3224: CALL 322 0 3
3228: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
3229: LD_ADDR_EXP 27
3233: PUSH
3234: LD_STRING Olaf
3236: PPUSH
3237: LD_INT 0
3239: PPUSH
3240: LD_STRING 
3242: PPUSH
3243: CALL 322 0 3
3247: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
3248: LD_ADDR_EXP 31
3252: PUSH
3253: LD_STRING 04_2_others
3255: PPUSH
3256: CALL_OW 31
3260: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
3261: LD_ADDR_EXP 33
3265: PUSH
3266: LD_STRING 04_2_apes
3268: PPUSH
3269: CALL_OW 31
3273: ST_TO_ADDR
// if hasFlamethrower then
3274: LD_EXP 3
3278: IFFALSE 3509
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
3280: LD_INT 70
3282: PPUSH
3283: LD_INT 2
3285: PPUSH
3286: LD_INT 2
3288: PPUSH
3289: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
3293: LD_ADDR_EXP 32
3297: PUSH
3298: LD_INT 13
3300: PUSH
3301: LD_INT 1
3303: PUSH
3304: LD_INT 1
3306: PUSH
3307: LD_INT 27
3309: PUSH
3310: LD_INT 2
3312: PUSH
3313: LD_INT 1000
3315: PUSH
3316: LD_INT 0
3318: PUSH
3319: LD_INT 0
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: PUSH
3335: LD_INT 13
3337: PUSH
3338: LD_INT 1
3340: PUSH
3341: LD_INT 1
3343: PUSH
3344: LD_INT 25
3346: PUSH
3347: LD_INT 2
3349: PUSH
3350: LD_INT 1000
3352: PUSH
3353: LD_INT 0
3355: PUSH
3356: LD_INT 0
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: PUSH
3372: LD_INT 13
3374: PUSH
3375: LD_INT 1
3377: PUSH
3378: LD_INT 1
3380: PUSH
3381: LD_INT 26
3383: PUSH
3384: LD_INT 2
3386: PUSH
3387: LD_INT 1000
3389: PUSH
3390: LD_INT 0
3392: PUSH
3393: LD_INT 0
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: PUSH
3409: LD_INT 13
3411: PUSH
3412: LD_INT 1
3414: PUSH
3415: LD_INT 1
3417: PUSH
3418: LD_INT 27
3420: PUSH
3421: LD_INT 2
3423: PUSH
3424: LD_INT 1000
3426: PUSH
3427: LD_INT 0
3429: PUSH
3430: LD_INT 0
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: PUSH
3446: LD_INT 13
3448: PUSH
3449: LD_INT 1
3451: PUSH
3452: LD_INT 1
3454: PUSH
3455: LD_INT 32
3457: PUSH
3458: LD_INT 2
3460: PUSH
3461: LD_INT 1000
3463: PUSH
3464: LD_INT 0
3466: PUSH
3467: LD_INT 60
3469: PUSH
3470: LD_INT 40
3472: PUSH
3473: LD_INT 20
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: PUSH
3481: LD_OWVAR 67
3485: ARRAY
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: ST_TO_ADDR
// end else
3507: GO 3723
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
3509: LD_ADDR_EXP 32
3513: PUSH
3514: LD_INT 13
3516: PUSH
3517: LD_INT 1
3519: PUSH
3520: LD_INT 1
3522: PUSH
3523: LD_INT 25
3525: PUSH
3526: LD_INT 2
3528: PUSH
3529: LD_INT 1000
3531: PUSH
3532: LD_INT 0
3534: PUSH
3535: LD_INT 0
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: PUSH
3551: LD_INT 13
3553: PUSH
3554: LD_INT 1
3556: PUSH
3557: LD_INT 1
3559: PUSH
3560: LD_INT 27
3562: PUSH
3563: LD_INT 2
3565: PUSH
3566: LD_INT 1000
3568: PUSH
3569: LD_INT 0
3571: PUSH
3572: LD_INT 0
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 13
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: LD_INT 1
3596: PUSH
3597: LD_INT 24
3599: PUSH
3600: LD_INT 2
3602: PUSH
3603: LD_INT 1000
3605: PUSH
3606: LD_INT 0
3608: PUSH
3609: LD_INT 0
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: PUSH
3625: LD_INT 13
3627: PUSH
3628: LD_INT 1
3630: PUSH
3631: LD_INT 1
3633: PUSH
3634: LD_INT 27
3636: PUSH
3637: LD_INT 2
3639: PUSH
3640: LD_INT 1000
3642: PUSH
3643: LD_INT 0
3645: PUSH
3646: LD_INT 0
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: PUSH
3662: LD_INT 13
3664: PUSH
3665: LD_INT 1
3667: PUSH
3668: LD_INT 1
3670: PUSH
3671: LD_INT 32
3673: PUSH
3674: LD_INT 2
3676: PUSH
3677: LD_INT 1000
3679: PUSH
3680: LD_INT 0
3682: PUSH
3683: LD_INT 50
3685: PUSH
3686: LD_INT 30
3688: PUSH
3689: LD_INT 20
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_OWVAR 67
3701: ARRAY
3702: PUSH
3703: EMPTY
3704: LIST
3705: LIST
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: ST_TO_ADDR
// end ; uc_side := 5 ;
3723: LD_ADDR_OWVAR 20
3727: PUSH
3728: LD_INT 5
3730: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
3731: LD_ADDR_EXP 26
3735: PUSH
3736: LD_STRING Abdul
3738: PPUSH
3739: LD_INT 0
3741: PPUSH
3742: LD_STRING 
3744: PPUSH
3745: CALL 322 0 3
3749: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
3750: LD_ADDR_EXP 28
3754: PUSH
3755: LD_STRING Omar
3757: PPUSH
3758: LD_INT 0
3760: PPUSH
3761: LD_STRING 
3763: PPUSH
3764: CALL 322 0 3
3768: ST_TO_ADDR
// end ;
3769: LD_VAR 0 1
3773: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
3774: LD_INT 0
3776: PPUSH
3777: PPUSH
3778: PPUSH
3779: PPUSH
3780: PPUSH
// pfx := 04_1 ;
3781: LD_ADDR_VAR 0 2
3785: PUSH
3786: LD_STRING 04_1
3788: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3789: LD_INT 35
3791: PPUSH
3792: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
3796: LD_INT 3
3798: PPUSH
3799: LD_INT 2
3801: PPUSH
3802: CALL_OW 428
3806: NOT
3807: IFFALSE 3789
// tmp := [ ] ;
3809: LD_ADDR_VAR 0 4
3813: PUSH
3814: EMPTY
3815: ST_TO_ADDR
// uc_side := 5 ;
3816: LD_ADDR_OWVAR 20
3820: PUSH
3821: LD_INT 5
3823: ST_TO_ADDR
// uc_nation := 2 ;
3824: LD_ADDR_OWVAR 21
3828: PUSH
3829: LD_INT 2
3831: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
3832: LD_ADDR_EXP 30
3836: PUSH
3837: LD_STRING Aviradze_L
3839: PPUSH
3840: LD_EXP 1
3844: NOT
3845: PPUSH
3846: LD_VAR 0 2
3850: PPUSH
3851: CALL 322 0 3
3855: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
3856: LD_EXP 30
3860: PPUSH
3861: LD_INT 2
3863: PPUSH
3864: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
3868: LD_EXP 30
3872: PPUSH
3873: LD_INT 14
3875: PPUSH
3876: LD_INT 0
3878: PPUSH
3879: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
3883: LD_EXP 30
3887: PPUSH
3888: LD_INT 8
3890: PPUSH
3891: LD_INT 6
3893: PPUSH
3894: CALL_OW 111
// AddComHold ( Aviradze ) ;
3898: LD_EXP 30
3902: PPUSH
3903: CALL_OW 200
// tmp := [ Aviradze ] ;
3907: LD_ADDR_VAR 0 4
3911: PUSH
3912: LD_EXP 30
3916: PUSH
3917: EMPTY
3918: LIST
3919: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3920: LD_INT 70
3922: PPUSH
3923: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
3927: LD_STRING Ibrahim_L
3929: PPUSH
3930: LD_EXP 1
3934: NOT
3935: PPUSH
3936: LD_VAR 0 2
3940: PPUSH
3941: CALL 322 0 3
3945: IFFALSE 4045
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
3947: LD_ADDR_EXP 21
3951: PUSH
3952: LD_STRING Ibrahim_L
3954: PPUSH
3955: LD_EXP 1
3959: NOT
3960: PPUSH
3961: LD_VAR 0 2
3965: PPUSH
3966: CALL 322 0 3
3970: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
3971: LD_EXP 21
3975: PPUSH
3976: LD_INT 2
3978: PPUSH
3979: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
3983: LD_EXP 21
3987: PPUSH
3988: LD_INT 14
3990: PPUSH
3991: LD_INT 0
3993: PPUSH
3994: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
3998: LD_EXP 21
4002: PPUSH
4003: LD_INT 8
4005: PPUSH
4006: LD_INT 7
4008: PPUSH
4009: CALL_OW 111
// AddComHold ( Ibrahim ) ;
4013: LD_EXP 21
4017: PPUSH
4018: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
4022: LD_ADDR_VAR 0 4
4026: PUSH
4027: LD_VAR 0 4
4031: PUSH
4032: LD_EXP 21
4036: ADD
4037: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4038: LD_INT 70
4040: PPUSH
4041: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
4045: LD_STRING Kaia_L
4047: PPUSH
4048: LD_EXP 1
4052: NOT
4053: PPUSH
4054: LD_VAR 0 2
4058: PPUSH
4059: CALL 322 0 3
4063: IFFALSE 4163
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
4065: LD_ADDR_EXP 23
4069: PUSH
4070: LD_STRING Kaia_L
4072: PPUSH
4073: LD_EXP 1
4077: NOT
4078: PPUSH
4079: LD_VAR 0 2
4083: PPUSH
4084: CALL 322 0 3
4088: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
4089: LD_EXP 23
4093: PPUSH
4094: LD_INT 2
4096: PPUSH
4097: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
4101: LD_EXP 23
4105: PPUSH
4106: LD_INT 14
4108: PPUSH
4109: LD_INT 0
4111: PPUSH
4112: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
4116: LD_EXP 23
4120: PPUSH
4121: LD_INT 8
4123: PPUSH
4124: LD_INT 7
4126: PPUSH
4127: CALL_OW 111
// AddComHold ( Kaia ) ;
4131: LD_EXP 23
4135: PPUSH
4136: CALL_OW 200
// tmp := tmp ^ Kaia ;
4140: LD_ADDR_VAR 0 4
4144: PUSH
4145: LD_VAR 0 4
4149: PUSH
4150: LD_EXP 23
4154: ADD
4155: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4156: LD_INT 70
4158: PPUSH
4159: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
4163: LD_STRING Kamil_L
4165: PPUSH
4166: LD_EXP 1
4170: NOT
4171: PPUSH
4172: LD_VAR 0 2
4176: PPUSH
4177: CALL 322 0 3
4181: IFFALSE 4281
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
4183: LD_ADDR_EXP 22
4187: PUSH
4188: LD_STRING Kamil_L
4190: PPUSH
4191: LD_EXP 1
4195: NOT
4196: PPUSH
4197: LD_VAR 0 2
4201: PPUSH
4202: CALL 322 0 3
4206: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
4207: LD_EXP 22
4211: PPUSH
4212: LD_INT 2
4214: PPUSH
4215: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
4219: LD_EXP 22
4223: PPUSH
4224: LD_INT 14
4226: PPUSH
4227: LD_INT 0
4229: PPUSH
4230: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
4234: LD_EXP 22
4238: PPUSH
4239: LD_INT 8
4241: PPUSH
4242: LD_INT 7
4244: PPUSH
4245: CALL_OW 111
// AddComHold ( Kamil ) ;
4249: LD_EXP 22
4253: PPUSH
4254: CALL_OW 200
// tmp := tmp ^ Kamil ;
4258: LD_ADDR_VAR 0 4
4262: PUSH
4263: LD_VAR 0 4
4267: PUSH
4268: LD_EXP 22
4272: ADD
4273: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4274: LD_INT 70
4276: PPUSH
4277: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
4281: LD_STRING Sophia_L
4283: PPUSH
4284: LD_EXP 1
4288: NOT
4289: PPUSH
4290: LD_VAR 0 2
4294: PPUSH
4295: CALL 322 0 3
4299: IFFALSE 4399
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
4301: LD_ADDR_EXP 24
4305: PUSH
4306: LD_STRING Sophia_L
4308: PPUSH
4309: LD_EXP 1
4313: NOT
4314: PPUSH
4315: LD_VAR 0 2
4319: PPUSH
4320: CALL 322 0 3
4324: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
4325: LD_EXP 24
4329: PPUSH
4330: LD_INT 2
4332: PPUSH
4333: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
4337: LD_EXP 24
4341: PPUSH
4342: LD_INT 14
4344: PPUSH
4345: LD_INT 0
4347: PPUSH
4348: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
4352: LD_EXP 24
4356: PPUSH
4357: LD_INT 9
4359: PPUSH
4360: LD_INT 6
4362: PPUSH
4363: CALL_OW 111
// AddComHold ( Sophia ) ;
4367: LD_EXP 24
4371: PPUSH
4372: CALL_OW 200
// tmp := tmp ^ Sophia ;
4376: LD_ADDR_VAR 0 4
4380: PUSH
4381: LD_VAR 0 4
4385: PUSH
4386: LD_EXP 24
4390: ADD
4391: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4392: LD_INT 70
4394: PPUSH
4395: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
4399: LD_ADDR_VAR 0 5
4403: PUSH
4404: LD_STRING 04_1_others_L
4406: PPUSH
4407: CALL_OW 31
4411: ST_TO_ADDR
// if tmp2 then
4412: LD_VAR 0 5
4416: IFFALSE 4513
// for i in tmp2 do
4418: LD_ADDR_VAR 0 3
4422: PUSH
4423: LD_VAR 0 5
4427: PUSH
4428: FOR_IN
4429: IFFALSE 4511
// begin SetDir ( i , 2 ) ;
4431: LD_VAR 0 3
4435: PPUSH
4436: LD_INT 2
4438: PPUSH
4439: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
4443: LD_VAR 0 3
4447: PPUSH
4448: LD_INT 14
4450: PPUSH
4451: LD_INT 0
4453: PPUSH
4454: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
4458: LD_ADDR_EXP 31
4462: PUSH
4463: LD_EXP 31
4467: PPUSH
4468: LD_EXP 31
4472: PUSH
4473: LD_INT 1
4475: PLUS
4476: PPUSH
4477: LD_VAR 0 3
4481: PPUSH
4482: CALL_OW 1
4486: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
4487: LD_VAR 0 3
4491: PPUSH
4492: LD_INT 17
4494: PPUSH
4495: LD_INT 14
4497: PPUSH
4498: CALL_OW 111
// wait ( 0 0$2 ) ;
4502: LD_INT 70
4504: PPUSH
4505: CALL_OW 67
// end ;
4509: GO 4428
4511: POP
4512: POP
// for i in tmp union tmp2 do
4513: LD_ADDR_VAR 0 3
4517: PUSH
4518: LD_VAR 0 4
4522: PUSH
4523: LD_VAR 0 5
4527: UNION
4528: PUSH
4529: FOR_IN
4530: IFFALSE 4560
// begin SetSide ( i , 2 ) ;
4532: LD_VAR 0 3
4536: PPUSH
4537: LD_INT 2
4539: PPUSH
4540: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
4544: LD_VAR 0 3
4548: PPUSH
4549: LD_EXP 18
4553: PPUSH
4554: CALL_OW 112
// end ;
4558: GO 4529
4560: POP
4561: POP
// end ; end_of_file
4562: LD_VAR 0 1
4566: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
4567: LD_INT 0
4569: PPUSH
4570: PPUSH
4571: PPUSH
// uc_side := 3 ;
4572: LD_ADDR_OWVAR 20
4576: PUSH
4577: LD_INT 3
4579: ST_TO_ADDR
// uc_nation := 3 ;
4580: LD_ADDR_OWVAR 21
4584: PUSH
4585: LD_INT 3
4587: ST_TO_ADDR
// crossRoadGuard := [ ] ;
4588: LD_ADDR_EXP 34
4592: PUSH
4593: EMPTY
4594: ST_TO_ADDR
// oilBaseGuard := [ ] ;
4595: LD_ADDR_EXP 35
4599: PUSH
4600: EMPTY
4601: ST_TO_ADDR
// ruConvoySquad := [ ] ;
4602: LD_ADDR_EXP 38
4606: PUSH
4607: EMPTY
4608: ST_TO_ADDR
// for i := 1 to 2 do
4609: LD_ADDR_VAR 0 2
4613: PUSH
4614: DOUBLE
4615: LD_INT 1
4617: DEC
4618: ST_TO_ADDR
4619: LD_INT 2
4621: PUSH
4622: FOR_TO
4623: IFFALSE 4758
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4625: LD_INT 0
4627: PPUSH
4628: LD_INT 1
4630: PPUSH
4631: LD_INT 3
4633: PUSH
4634: LD_INT 4
4636: PUSH
4637: LD_INT 5
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: PUSH
4645: LD_OWVAR 67
4649: ARRAY
4650: PPUSH
4651: CALL_OW 380
// un := CreateHuman ;
4655: LD_ADDR_VAR 0 3
4659: PUSH
4660: CALL_OW 44
4664: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
4665: LD_ADDR_EXP 34
4669: PUSH
4670: LD_EXP 34
4674: PPUSH
4675: LD_EXP 34
4679: PUSH
4680: LD_INT 1
4682: PLUS
4683: PPUSH
4684: LD_VAR 0 3
4688: PPUSH
4689: CALL_OW 1
4693: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
4694: LD_VAR 0 3
4698: PPUSH
4699: LD_INT 100
4701: PPUSH
4702: LD_INT 63
4704: PPUSH
4705: LD_INT 3
4707: PPUSH
4708: LD_INT 0
4710: PPUSH
4711: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
4715: LD_VAR 0 3
4719: PPUSH
4720: LD_INT 97
4722: PPUSH
4723: LD_INT 64
4725: PPUSH
4726: CALL_OW 428
4730: PUSH
4731: LD_INT 98
4733: PPUSH
4734: LD_INT 58
4736: PPUSH
4737: CALL_OW 428
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: PUSH
4746: LD_VAR 0 2
4750: ARRAY
4751: PPUSH
4752: CALL_OW 120
// end ;
4756: GO 4622
4758: POP
4759: POP
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
4760: LD_INT 10
4762: PPUSH
4763: CALL_OW 274
4767: PPUSH
4768: LD_INT 2
4770: PPUSH
4771: LD_INT 300
4773: PPUSH
4774: CALL_OW 277
// for i := 1 to 2 do
4778: LD_ADDR_VAR 0 2
4782: PUSH
4783: DOUBLE
4784: LD_INT 1
4786: DEC
4787: ST_TO_ADDR
4788: LD_INT 2
4790: PUSH
4791: FOR_TO
4792: IFFALSE 4906
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4794: LD_INT 0
4796: PPUSH
4797: LD_INT 1
4799: PPUSH
4800: LD_INT 3
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: LD_INT 5
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: PUSH
4814: LD_OWVAR 67
4818: ARRAY
4819: PPUSH
4820: CALL_OW 380
// un := CreateHuman ;
4824: LD_ADDR_VAR 0 3
4828: PUSH
4829: CALL_OW 44
4833: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
4834: LD_ADDR_EXP 35
4838: PUSH
4839: LD_EXP 35
4843: PPUSH
4844: LD_EXP 35
4848: PUSH
4849: LD_INT 1
4851: PLUS
4852: PPUSH
4853: LD_VAR 0 3
4857: PPUSH
4858: CALL_OW 1
4862: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
4863: LD_VAR 0 3
4867: PPUSH
4868: LD_INT 198
4870: PPUSH
4871: LD_INT 106
4873: PPUSH
4874: CALL_OW 428
4878: PUSH
4879: LD_INT 205
4881: PPUSH
4882: LD_INT 114
4884: PPUSH
4885: CALL_OW 428
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: LD_VAR 0 2
4898: ARRAY
4899: PPUSH
4900: CALL_OW 52
// end ;
4904: GO 4791
4906: POP
4907: POP
// for i := 1 to 2 do
4908: LD_ADDR_VAR 0 2
4912: PUSH
4913: DOUBLE
4914: LD_INT 1
4916: DEC
4917: ST_TO_ADDR
4918: LD_INT 2
4920: PUSH
4921: FOR_TO
4922: IFFALSE 4999
// begin PrepareHuman ( false , 2 , 3 ) ;
4924: LD_INT 0
4926: PPUSH
4927: LD_INT 2
4929: PPUSH
4930: LD_INT 3
4932: PPUSH
4933: CALL_OW 380
// un := CreateHuman ;
4937: LD_ADDR_VAR 0 3
4941: PUSH
4942: CALL_OW 44
4946: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
4947: LD_ADDR_EXP 35
4951: PUSH
4952: LD_EXP 35
4956: PPUSH
4957: LD_EXP 35
4961: PUSH
4962: LD_INT 1
4964: PLUS
4965: PPUSH
4966: LD_VAR 0 3
4970: PPUSH
4971: CALL_OW 1
4975: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
4976: LD_VAR 0 3
4980: PPUSH
4981: LD_INT 204
4983: PPUSH
4984: LD_INT 108
4986: PPUSH
4987: LD_INT 2
4989: PPUSH
4990: LD_INT 0
4992: PPUSH
4993: CALL_OW 50
// end ;
4997: GO 4921
4999: POP
5000: POP
// for i := 1 to [ 4 , 6 , 7 ] [ Difficulty ] do
5001: LD_ADDR_VAR 0 2
5005: PUSH
5006: DOUBLE
5007: LD_INT 1
5009: DEC
5010: ST_TO_ADDR
5011: LD_INT 4
5013: PUSH
5014: LD_INT 6
5016: PUSH
5017: LD_INT 7
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: PUSH
5025: LD_OWVAR 67
5029: ARRAY
5030: PUSH
5031: FOR_TO
5032: IFFALSE 5151
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5034: LD_INT 0
5036: PPUSH
5037: LD_INT 1
5039: PUSH
5040: LD_INT 1
5042: PUSH
5043: LD_INT 2
5045: PUSH
5046: LD_INT 4
5048: PUSH
5049: LD_INT 1
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: PUSH
5059: LD_INT 1
5061: PPUSH
5062: LD_INT 5
5064: PPUSH
5065: CALL_OW 12
5069: ARRAY
5070: PPUSH
5071: LD_INT 3
5073: PUSH
5074: LD_INT 4
5076: PUSH
5077: LD_INT 5
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: PUSH
5085: LD_OWVAR 67
5089: ARRAY
5090: PPUSH
5091: CALL_OW 380
// un := CreateHuman ;
5095: LD_ADDR_VAR 0 3
5099: PUSH
5100: CALL_OW 44
5104: ST_TO_ADDR
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
5105: LD_ADDR_EXP 36
5109: PUSH
5110: LD_EXP 36
5114: PPUSH
5115: LD_EXP 36
5119: PUSH
5120: LD_INT 1
5122: PLUS
5123: PPUSH
5124: LD_VAR 0 3
5128: PPUSH
5129: CALL_OW 1
5133: ST_TO_ADDR
// PlaceUnitArea ( un , northGroupArea , false ) ;
5134: LD_VAR 0 3
5138: PPUSH
5139: LD_INT 10
5141: PPUSH
5142: LD_INT 0
5144: PPUSH
5145: CALL_OW 49
// end ;
5149: GO 5031
5151: POP
5152: POP
// for i := 1 to 3 do
5153: LD_ADDR_VAR 0 2
5157: PUSH
5158: DOUBLE
5159: LD_INT 1
5161: DEC
5162: ST_TO_ADDR
5163: LD_INT 3
5165: PUSH
5166: FOR_TO
5167: IFFALSE 5255
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5169: LD_INT 0
5171: PPUSH
5172: LD_INT 1
5174: PPUSH
5175: LD_INT 3
5177: PUSH
5178: LD_INT 4
5180: PUSH
5181: LD_INT 5
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: LIST
5188: PUSH
5189: LD_OWVAR 67
5193: ARRAY
5194: PPUSH
5195: CALL_OW 380
// un := CreateHuman ;
5199: LD_ADDR_VAR 0 3
5203: PUSH
5204: CALL_OW 44
5208: ST_TO_ADDR
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
5209: LD_ADDR_EXP 36
5213: PUSH
5214: LD_EXP 36
5218: PPUSH
5219: LD_EXP 36
5223: PUSH
5224: LD_INT 1
5226: PLUS
5227: PPUSH
5228: LD_VAR 0 3
5232: PPUSH
5233: CALL_OW 1
5237: ST_TO_ADDR
// PlaceUnitArea ( un , northGroupArea , false ) ;
5238: LD_VAR 0 3
5242: PPUSH
5243: LD_INT 10
5245: PPUSH
5246: LD_INT 0
5248: PPUSH
5249: CALL_OW 49
// end ;
5253: GO 5166
5255: POP
5256: POP
// for i := 1 to [ 6 , 7 , 7 ] [ Difficulty ] do
5257: LD_ADDR_VAR 0 2
5261: PUSH
5262: DOUBLE
5263: LD_INT 1
5265: DEC
5266: ST_TO_ADDR
5267: LD_INT 6
5269: PUSH
5270: LD_INT 7
5272: PUSH
5273: LD_INT 7
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: LIST
5280: PUSH
5281: LD_OWVAR 67
5285: ARRAY
5286: PUSH
5287: FOR_TO
5288: IFFALSE 5407
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5290: LD_INT 0
5292: PPUSH
5293: LD_INT 1
5295: PUSH
5296: LD_INT 1
5298: PUSH
5299: LD_INT 2
5301: PUSH
5302: LD_INT 4
5304: PUSH
5305: LD_INT 1
5307: PUSH
5308: EMPTY
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: PUSH
5315: LD_INT 1
5317: PPUSH
5318: LD_INT 5
5320: PPUSH
5321: CALL_OW 12
5325: ARRAY
5326: PPUSH
5327: LD_INT 3
5329: PUSH
5330: LD_INT 4
5332: PUSH
5333: LD_INT 5
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: LIST
5340: PUSH
5341: LD_OWVAR 67
5345: ARRAY
5346: PPUSH
5347: CALL_OW 380
// un := CreateHuman ;
5351: LD_ADDR_VAR 0 3
5355: PUSH
5356: CALL_OW 44
5360: ST_TO_ADDR
// ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
5361: LD_ADDR_EXP 37
5365: PUSH
5366: LD_EXP 37
5370: PPUSH
5371: LD_EXP 37
5375: PUSH
5376: LD_INT 1
5378: PLUS
5379: PPUSH
5380: LD_VAR 0 3
5384: PPUSH
5385: CALL_OW 1
5389: ST_TO_ADDR
// PlaceUnitArea ( un , southGroupArea , false ) ;
5390: LD_VAR 0 3
5394: PPUSH
5395: LD_INT 15
5397: PPUSH
5398: LD_INT 0
5400: PPUSH
5401: CALL_OW 49
// end ;
5405: GO 5287
5407: POP
5408: POP
// end ;
5409: LD_VAR 0 1
5413: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
5414: LD_INT 0
5416: PPUSH
5417: PPUSH
5418: PPUSH
// uc_side := 3 ;
5419: LD_ADDR_OWVAR 20
5423: PUSH
5424: LD_INT 3
5426: ST_TO_ADDR
// uc_nation := 3 ;
5427: LD_ADDR_OWVAR 21
5431: PUSH
5432: LD_INT 3
5434: ST_TO_ADDR
// for i := 1 to 6 do
5435: LD_ADDR_VAR 0 2
5439: PUSH
5440: DOUBLE
5441: LD_INT 1
5443: DEC
5444: ST_TO_ADDR
5445: LD_INT 6
5447: PUSH
5448: FOR_TO
5449: IFFALSE 5528
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
5451: LD_INT 0
5453: PPUSH
5454: LD_INT 1
5456: PUSH
5457: LD_INT 4
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: PUSH
5464: LD_INT 1
5466: PPUSH
5467: LD_INT 2
5469: PPUSH
5470: CALL_OW 12
5474: ARRAY
5475: PPUSH
5476: LD_INT 0
5478: PPUSH
5479: CALL_OW 380
// un := CreateHuman ;
5483: LD_ADDR_VAR 0 3
5487: PUSH
5488: CALL_OW 44
5492: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
5493: LD_VAR 0 3
5497: PPUSH
5498: LD_INT 54
5500: PPUSH
5501: LD_INT 88
5503: PPUSH
5504: LD_INT 12
5506: PPUSH
5507: LD_INT 0
5509: PPUSH
5510: CALL_OW 50
// SetLives ( un , 1 ) ;
5514: LD_VAR 0 3
5518: PPUSH
5519: LD_INT 1
5521: PPUSH
5522: CALL_OW 234
// end ;
5526: GO 5448
5528: POP
5529: POP
// uc_side := 3 ;
5530: LD_ADDR_OWVAR 20
5534: PUSH
5535: LD_INT 3
5537: ST_TO_ADDR
// uc_nation := 0 ;
5538: LD_ADDR_OWVAR 21
5542: PUSH
5543: LD_INT 0
5545: ST_TO_ADDR
// apeSoldGroup := [ ] ;
5546: LD_ADDR_EXP 39
5550: PUSH
5551: EMPTY
5552: ST_TO_ADDR
// apeEngGroup := [ ] ;
5553: LD_ADDR_EXP 40
5557: PUSH
5558: EMPTY
5559: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5560: LD_ADDR_VAR 0 2
5564: PUSH
5565: DOUBLE
5566: LD_INT 1
5568: DEC
5569: ST_TO_ADDR
5570: LD_INT 4
5572: PUSH
5573: LD_INT 5
5575: PUSH
5576: LD_INT 6
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: LIST
5583: PUSH
5584: LD_OWVAR 67
5588: ARRAY
5589: PUSH
5590: FOR_TO
5591: IFFALSE 5705
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5593: LD_INT 0
5595: PPUSH
5596: LD_INT 15
5598: PPUSH
5599: LD_INT 3
5601: PUSH
5602: LD_INT 4
5604: PUSH
5605: LD_INT 5
5607: PUSH
5608: EMPTY
5609: LIST
5610: LIST
5611: LIST
5612: PUSH
5613: LD_OWVAR 67
5617: ARRAY
5618: PPUSH
5619: CALL_OW 380
// un := CreateHuman ;
5623: LD_ADDR_VAR 0 3
5627: PUSH
5628: CALL_OW 44
5632: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
5633: LD_ADDR_EXP 39
5637: PUSH
5638: LD_EXP 39
5642: PPUSH
5643: LD_EXP 39
5647: PUSH
5648: LD_INT 1
5650: PLUS
5651: PPUSH
5652: LD_VAR 0 3
5656: PPUSH
5657: CALL_OW 1
5661: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
5662: LD_VAR 0 3
5666: PPUSH
5667: LD_INT 0
5669: PPUSH
5670: LD_INT 5
5672: PPUSH
5673: CALL_OW 12
5677: PPUSH
5678: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
5682: LD_VAR 0 3
5686: PPUSH
5687: LD_INT 56
5689: PPUSH
5690: LD_INT 82
5692: PPUSH
5693: LD_INT 6
5695: PPUSH
5696: LD_INT 0
5698: PPUSH
5699: CALL_OW 50
// end ;
5703: GO 5590
5705: POP
5706: POP
// for i := 1 to 2 do
5707: LD_ADDR_VAR 0 2
5711: PUSH
5712: DOUBLE
5713: LD_INT 1
5715: DEC
5716: ST_TO_ADDR
5717: LD_INT 2
5719: PUSH
5720: FOR_TO
5721: IFFALSE 5797
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
5723: LD_INT 0
5725: PPUSH
5726: LD_INT 16
5728: PPUSH
5729: LD_INT 4
5731: PPUSH
5732: CALL_OW 380
// un := CreateHuman ;
5736: LD_ADDR_VAR 0 3
5740: PUSH
5741: CALL_OW 44
5745: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
5746: LD_ADDR_EXP 40
5750: PUSH
5751: LD_EXP 40
5755: PPUSH
5756: LD_EXP 40
5760: PUSH
5761: LD_INT 1
5763: PLUS
5764: PPUSH
5765: LD_VAR 0 3
5769: PPUSH
5770: CALL_OW 1
5774: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
5775: LD_VAR 0 3
5779: PPUSH
5780: LD_INT 51
5782: PPUSH
5783: LD_INT 77
5785: PPUSH
5786: CALL_OW 428
5790: PPUSH
5791: CALL_OW 52
// end ;
5795: GO 5720
5797: POP
5798: POP
// end ;
5799: LD_VAR 0 1
5803: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
5804: LD_EXP 39
5808: PPUSH
5809: LD_INT 3
5811: PUSH
5812: LD_INT 24
5814: PUSH
5815: LD_INT 600
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PUSH
5826: LD_INT 3
5828: PUSH
5829: LD_INT 54
5831: PUSH
5832: EMPTY
5833: LIST
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: PUSH
5839: EMPTY
5840: LIST
5841: LIST
5842: PPUSH
5843: CALL_OW 72
5847: PUSH
5848: LD_INT 66
5850: PPUSH
5851: LD_INT 89
5853: PPUSH
5854: CALL_OW 428
5858: PPUSH
5859: CALL_OW 302
5863: AND
5864: IFFALSE 5949
5866: GO 5868
5868: DISABLE
5869: LD_INT 0
5871: PPUSH
// begin enable ;
5872: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
5873: LD_ADDR_VAR 0 1
5877: PUSH
5878: LD_EXP 39
5882: PPUSH
5883: LD_INT 3
5885: PUSH
5886: LD_INT 24
5888: PUSH
5889: LD_INT 600
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: LD_INT 3
5902: PUSH
5903: LD_INT 54
5905: PUSH
5906: EMPTY
5907: LIST
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: PPUSH
5917: CALL_OW 72
5921: PUSH
5922: FOR_IN
5923: IFFALSE 5947
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
5925: LD_VAR 0 1
5929: PPUSH
5930: LD_INT 66
5932: PPUSH
5933: LD_INT 89
5935: PPUSH
5936: CALL_OW 428
5940: PPUSH
5941: CALL_OW 120
5945: GO 5922
5947: POP
5948: POP
// end ;
5949: PPOPN 1
5951: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
5952: LD_INT 22
5954: PUSH
5955: LD_INT 2
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: LD_INT 92
5964: PUSH
5965: LD_INT 54
5967: PUSH
5968: LD_INT 77
5970: PUSH
5971: LD_INT 8
5973: PUSH
5974: EMPTY
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: PPUSH
5984: CALL_OW 69
5988: IFFALSE 6052
5990: GO 5992
5992: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
5993: LD_EXP 40
5997: PPUSH
5998: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
6002: LD_EXP 40
6006: PPUSH
6007: LD_INT 22
6009: PUSH
6010: LD_INT 2
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PUSH
6017: LD_INT 92
6019: PUSH
6020: LD_INT 54
6022: PUSH
6023: LD_INT 77
6025: PUSH
6026: LD_INT 8
6028: PUSH
6029: EMPTY
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: PPUSH
6039: CALL_OW 69
6043: PUSH
6044: LD_INT 1
6046: ARRAY
6047: PPUSH
6048: CALL_OW 175
// end ;
6052: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , movePoints , un , tag ; begin
6053: LD_INT 0
6055: PPUSH
6056: PPUSH
6057: PPUSH
6058: PPUSH
6059: PPUSH
6060: PPUSH
6061: PPUSH
6062: PPUSH
// spawnPoint := rand ( 1 , 2 ) ;
6063: LD_ADDR_VAR 0 3
6067: PUSH
6068: LD_INT 1
6070: PPUSH
6071: LD_INT 2
6073: PPUSH
6074: CALL_OW 12
6078: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea ] [ spawnPoint ] ;
6079: LD_ADDR_VAR 0 5
6083: PUSH
6084: LD_INT 16
6086: PUSH
6087: LD_INT 17
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PUSH
6094: LD_VAR 0 3
6098: ARRAY
6099: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
6100: LD_ADDR_VAR 0 6
6104: PUSH
6105: LD_INT 159
6107: PUSH
6108: LD_INT 25
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PUSH
6115: LD_INT 137
6117: PUSH
6118: LD_INT 37
6120: PUSH
6121: EMPTY
6122: LIST
6123: LIST
6124: PUSH
6125: LD_INT 123
6127: PUSH
6128: LD_INT 55
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 115
6137: PUSH
6138: LD_INT 71
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: LD_INT 106
6147: PUSH
6148: LD_INT 88
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: LD_INT 97
6157: PUSH
6158: LD_INT 114
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PUSH
6165: LD_INT 75
6167: PUSH
6168: LD_INT 146
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: PUSH
6184: LD_INT 206
6186: PUSH
6187: LD_INT 135
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 184
6196: PUSH
6197: LD_INT 111
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 154
6206: PUSH
6207: LD_INT 97
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 122
6216: PUSH
6217: LD_INT 80
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 109
6226: PUSH
6227: LD_INT 78
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 97
6236: PUSH
6237: LD_INT 113
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 75
6246: PUSH
6247: LD_INT 147
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_VAR 0 3
6271: ARRAY
6272: ST_TO_ADDR
// dir := [ 4 , 5 ] [ spawnPoint ] ;
6273: LD_ADDR_VAR 0 4
6277: PUSH
6278: LD_INT 4
6280: PUSH
6281: LD_INT 5
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_VAR 0 3
6292: ARRAY
6293: ST_TO_ADDR
// case convoyCounter of 1 .. 3 :
6294: LD_EXP 16
6298: PUSH
6299: LD_INT 1
6301: DOUBLE
6302: GREATEREQUAL
6303: IFFALSE 6311
6305: LD_INT 3
6307: DOUBLE
6308: LESSEQUAL
6309: IFTRUE 6313
6311: GO 6904
6313: POP
// begin uc_side := 3 ;
6314: LD_ADDR_OWVAR 20
6318: PUSH
6319: LD_INT 3
6321: ST_TO_ADDR
// uc_nation := 3 ;
6322: LD_ADDR_OWVAR 21
6326: PUSH
6327: LD_INT 3
6329: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] - convoyCounter do
6330: LD_ADDR_VAR 0 2
6334: PUSH
6335: DOUBLE
6336: LD_INT 1
6338: DEC
6339: ST_TO_ADDR
6340: LD_INT 5
6342: PUSH
6343: LD_INT 6
6345: PUSH
6346: LD_INT 7
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: PUSH
6354: LD_OWVAR 67
6358: ARRAY
6359: PUSH
6360: LD_EXP 16
6364: MINUS
6365: PUSH
6366: FOR_TO
6367: IFFALSE 6552
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
6369: LD_INT 0
6371: PPUSH
6372: LD_INT 1
6374: PUSH
6375: LD_INT 1
6377: PUSH
6378: LD_INT 1
6380: PUSH
6381: LD_INT 4
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: PUSH
6390: LD_INT 1
6392: PPUSH
6393: LD_INT 4
6395: PPUSH
6396: CALL_OW 12
6400: ARRAY
6401: PPUSH
6402: LD_INT 4
6404: PUSH
6405: LD_INT 5
6407: PUSH
6408: LD_INT 6
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: PUSH
6416: LD_OWVAR 67
6420: ARRAY
6421: PPUSH
6422: CALL_OW 380
// un := CreateHuman ;
6426: LD_ADDR_VAR 0 7
6430: PUSH
6431: CALL_OW 44
6435: ST_TO_ADDR
// SetDir ( un , dir ) ;
6436: LD_VAR 0 7
6440: PPUSH
6441: LD_VAR 0 4
6445: PPUSH
6446: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6450: LD_VAR 0 7
6454: PPUSH
6455: LD_VAR 0 5
6459: PPUSH
6460: LD_INT 0
6462: PPUSH
6463: CALL_OW 49
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6467: LD_ADDR_EXP 38
6471: PUSH
6472: LD_EXP 38
6476: PPUSH
6477: LD_EXP 38
6481: PUSH
6482: LD_INT 1
6484: PLUS
6485: PPUSH
6486: LD_VAR 0 7
6490: PPUSH
6491: CALL_OW 1
6495: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6496: LD_VAR 0 7
6500: PPUSH
6501: LD_INT 1
6503: PPUSH
6504: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6508: LD_VAR 0 7
6512: PPUSH
6513: LD_VAR 0 6
6517: PUSH
6518: LD_INT 1
6520: ARRAY
6521: PUSH
6522: LD_INT 1
6524: ARRAY
6525: PPUSH
6526: LD_VAR 0 6
6530: PUSH
6531: LD_INT 1
6533: ARRAY
6534: PUSH
6535: LD_INT 2
6537: ARRAY
6538: PPUSH
6539: CALL_OW 111
// wait ( 0 0$2 ) ;
6543: LD_INT 70
6545: PPUSH
6546: CALL_OW 67
// end ;
6550: GO 6366
6552: POP
6553: POP
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
6554: LD_ADDR_VAR 0 2
6558: PUSH
6559: DOUBLE
6560: LD_INT 1
6562: DEC
6563: ST_TO_ADDR
6564: LD_INT 3
6566: PUSH
6567: LD_INT 4
6569: PUSH
6570: LD_INT 4
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: LIST
6577: PUSH
6578: LD_OWVAR 67
6582: ARRAY
6583: PUSH
6584: FOR_TO
6585: IFFALSE 6900
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
6587: LD_INT 3
6589: PPUSH
6590: LD_INT 3
6592: PPUSH
6593: LD_INT 21
6595: PUSH
6596: LD_INT 22
6598: PUSH
6599: LD_INT 23
6601: PUSH
6602: LD_INT 24
6604: PUSH
6605: LD_INT 24
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: PUSH
6615: LD_OWVAR 67
6619: PPUSH
6620: LD_OWVAR 67
6624: PUSH
6625: LD_INT 2
6627: PLUS
6628: PPUSH
6629: CALL_OW 12
6633: ARRAY
6634: PPUSH
6635: LD_INT 1
6637: PPUSH
6638: LD_INT 1
6640: PPUSH
6641: LD_INT 42
6643: PUSH
6644: LD_INT 44
6646: PUSH
6647: LD_INT 43
6649: PUSH
6650: LD_INT 44
6652: PUSH
6653: LD_INT 46
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: PUSH
6663: LD_INT 1
6665: PPUSH
6666: LD_OWVAR 67
6670: PUSH
6671: LD_INT 2
6673: PLUS
6674: PPUSH
6675: CALL_OW 12
6679: ARRAY
6680: PPUSH
6681: LD_INT 90
6683: PPUSH
6684: CALL 385 0 7
// un := CreateVehicle ;
6688: LD_ADDR_VAR 0 7
6692: PUSH
6693: CALL_OW 45
6697: ST_TO_ADDR
// SetDir ( un , dir ) ;
6698: LD_VAR 0 7
6702: PPUSH
6703: LD_VAR 0 4
6707: PPUSH
6708: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6712: LD_VAR 0 7
6716: PPUSH
6717: LD_VAR 0 5
6721: PPUSH
6722: LD_INT 0
6724: PPUSH
6725: CALL_OW 49
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6729: LD_ADDR_EXP 38
6733: PUSH
6734: LD_EXP 38
6738: PPUSH
6739: LD_EXP 38
6743: PUSH
6744: LD_INT 1
6746: PLUS
6747: PPUSH
6748: LD_VAR 0 7
6752: PPUSH
6753: CALL_OW 1
6757: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
6758: LD_INT 0
6760: PPUSH
6761: LD_INT 3
6763: PUSH
6764: LD_INT 4
6766: PUSH
6767: LD_INT 5
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: LIST
6774: PUSH
6775: LD_OWVAR 67
6779: ARRAY
6780: PPUSH
6781: CALL_OW 383
// un := CreateHuman ;
6785: LD_ADDR_VAR 0 7
6789: PUSH
6790: CALL_OW 44
6794: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6795: LD_VAR 0 7
6799: PPUSH
6800: LD_EXP 38
6804: PUSH
6805: LD_EXP 38
6809: ARRAY
6810: PPUSH
6811: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6815: LD_ADDR_EXP 38
6819: PUSH
6820: LD_EXP 38
6824: PPUSH
6825: LD_EXP 38
6829: PUSH
6830: LD_INT 1
6832: PLUS
6833: PPUSH
6834: LD_VAR 0 7
6838: PPUSH
6839: CALL_OW 1
6843: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6844: LD_VAR 0 7
6848: PPUSH
6849: LD_INT 1
6851: PPUSH
6852: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6856: LD_VAR 0 7
6860: PPUSH
6861: LD_VAR 0 6
6865: PUSH
6866: LD_INT 1
6868: ARRAY
6869: PUSH
6870: LD_INT 1
6872: ARRAY
6873: PPUSH
6874: LD_VAR 0 6
6878: PUSH
6879: LD_INT 1
6881: ARRAY
6882: PUSH
6883: LD_INT 2
6885: ARRAY
6886: PPUSH
6887: CALL_OW 111
// wait ( 0 0$2 ) ;
6891: LD_INT 70
6893: PPUSH
6894: CALL_OW 67
// end ;
6898: GO 6584
6900: POP
6901: POP
// end ; 4 .. 7 :
6902: GO 7453
6904: LD_INT 4
6906: DOUBLE
6907: GREATEREQUAL
6908: IFFALSE 6916
6910: LD_INT 7
6912: DOUBLE
6913: LESSEQUAL
6914: IFTRUE 6918
6916: GO 7452
6918: POP
// begin uc_side := 3 ;
6919: LD_ADDR_OWVAR 20
6923: PUSH
6924: LD_INT 3
6926: ST_TO_ADDR
// uc_nation := 3 ;
6927: LD_ADDR_OWVAR 21
6931: PUSH
6932: LD_INT 3
6934: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6935: LD_ADDR_VAR 0 2
6939: PUSH
6940: DOUBLE
6941: LD_INT 1
6943: DEC
6944: ST_TO_ADDR
6945: LD_INT 2
6947: PUSH
6948: LD_INT 3
6950: PUSH
6951: LD_INT 4
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: LIST
6958: PUSH
6959: LD_OWVAR 67
6963: ARRAY
6964: PUSH
6965: FOR_TO
6966: IFFALSE 7124
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
6968: LD_INT 0
6970: PPUSH
6971: LD_INT 1
6973: PPUSH
6974: LD_INT 4
6976: PUSH
6977: LD_INT 5
6979: PUSH
6980: LD_INT 6
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: LIST
6987: PUSH
6988: LD_OWVAR 67
6992: ARRAY
6993: PPUSH
6994: CALL_OW 380
// un := CreateHuman ;
6998: LD_ADDR_VAR 0 7
7002: PUSH
7003: CALL_OW 44
7007: ST_TO_ADDR
// SetDir ( un , dir ) ;
7008: LD_VAR 0 7
7012: PPUSH
7013: LD_VAR 0 4
7017: PPUSH
7018: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
7022: LD_VAR 0 7
7026: PPUSH
7027: LD_VAR 0 5
7031: PPUSH
7032: LD_INT 0
7034: PPUSH
7035: CALL_OW 49
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
7039: LD_ADDR_EXP 38
7043: PUSH
7044: LD_EXP 38
7048: PPUSH
7049: LD_EXP 38
7053: PUSH
7054: LD_INT 1
7056: PLUS
7057: PPUSH
7058: LD_VAR 0 7
7062: PPUSH
7063: CALL_OW 1
7067: ST_TO_ADDR
// SetTag ( un , 1 ) ;
7068: LD_VAR 0 7
7072: PPUSH
7073: LD_INT 1
7075: PPUSH
7076: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
7080: LD_VAR 0 7
7084: PPUSH
7085: LD_VAR 0 6
7089: PUSH
7090: LD_INT 1
7092: ARRAY
7093: PUSH
7094: LD_INT 1
7096: ARRAY
7097: PPUSH
7098: LD_VAR 0 6
7102: PUSH
7103: LD_INT 1
7105: ARRAY
7106: PUSH
7107: LD_INT 2
7109: ARRAY
7110: PPUSH
7111: CALL_OW 111
// wait ( 0 0$2 ) ;
7115: LD_INT 70
7117: PPUSH
7118: CALL_OW 67
// end ;
7122: GO 6965
7124: POP
7125: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
7126: LD_ADDR_VAR 0 2
7130: PUSH
7131: DOUBLE
7132: LD_INT 1
7134: DEC
7135: ST_TO_ADDR
7136: LD_INT 2
7138: PUSH
7139: LD_INT 3
7141: PUSH
7142: LD_INT 3
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: LIST
7149: PUSH
7150: LD_OWVAR 67
7154: ARRAY
7155: PUSH
7156: FOR_TO
7157: IFFALSE 7448
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
7159: LD_INT 3
7161: PPUSH
7162: LD_INT 3
7164: PPUSH
7165: LD_INT 21
7167: PUSH
7168: LD_INT 22
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 1
7177: PPUSH
7178: LD_INT 2
7180: PPUSH
7181: CALL_OW 12
7185: ARRAY
7186: PPUSH
7187: LD_INT 1
7189: PPUSH
7190: LD_INT 1
7192: PPUSH
7193: LD_INT 42
7195: PUSH
7196: LD_INT 44
7198: PUSH
7199: LD_INT 43
7201: PUSH
7202: LD_INT 44
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 1
7213: PPUSH
7214: LD_OWVAR 67
7218: PUSH
7219: LD_INT 1
7221: PLUS
7222: PPUSH
7223: CALL_OW 12
7227: ARRAY
7228: PPUSH
7229: LD_INT 90
7231: PPUSH
7232: CALL 385 0 7
// un := CreateVehicle ;
7236: LD_ADDR_VAR 0 7
7240: PUSH
7241: CALL_OW 45
7245: ST_TO_ADDR
// SetDir ( un , dir ) ;
7246: LD_VAR 0 7
7250: PPUSH
7251: LD_VAR 0 4
7255: PPUSH
7256: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
7260: LD_VAR 0 7
7264: PPUSH
7265: LD_VAR 0 5
7269: PPUSH
7270: LD_INT 0
7272: PPUSH
7273: CALL_OW 49
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
7277: LD_ADDR_EXP 38
7281: PUSH
7282: LD_EXP 38
7286: PPUSH
7287: LD_EXP 38
7291: PUSH
7292: LD_INT 1
7294: PLUS
7295: PPUSH
7296: LD_VAR 0 7
7300: PPUSH
7301: CALL_OW 1
7305: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
7306: LD_INT 0
7308: PPUSH
7309: LD_INT 3
7311: PUSH
7312: LD_INT 4
7314: PUSH
7315: LD_INT 5
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: LIST
7322: PUSH
7323: LD_OWVAR 67
7327: ARRAY
7328: PPUSH
7329: CALL_OW 383
// un := CreateHuman ;
7333: LD_ADDR_VAR 0 7
7337: PUSH
7338: CALL_OW 44
7342: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
7343: LD_VAR 0 7
7347: PPUSH
7348: LD_EXP 38
7352: PUSH
7353: LD_EXP 38
7357: ARRAY
7358: PPUSH
7359: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
7363: LD_ADDR_EXP 38
7367: PUSH
7368: LD_EXP 38
7372: PPUSH
7373: LD_EXP 38
7377: PUSH
7378: LD_INT 1
7380: PLUS
7381: PPUSH
7382: LD_VAR 0 7
7386: PPUSH
7387: CALL_OW 1
7391: ST_TO_ADDR
// SetTag ( un , 1 ) ;
7392: LD_VAR 0 7
7396: PPUSH
7397: LD_INT 1
7399: PPUSH
7400: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
7404: LD_VAR 0 7
7408: PPUSH
7409: LD_VAR 0 6
7413: PUSH
7414: LD_INT 1
7416: ARRAY
7417: PUSH
7418: LD_INT 1
7420: ARRAY
7421: PPUSH
7422: LD_VAR 0 6
7426: PUSH
7427: LD_INT 1
7429: ARRAY
7430: PUSH
7431: LD_INT 2
7433: ARRAY
7434: PPUSH
7435: CALL_OW 111
// wait ( 0 0$2 ) ;
7439: LD_INT 70
7441: PPUSH
7442: CALL_OW 67
// end ;
7446: GO 7156
7448: POP
7449: POP
// end ; end ;
7450: GO 7453
7452: POP
// repeat wait ( 0 0$1 ) ;
7453: LD_INT 35
7455: PPUSH
7456: CALL_OW 67
// for un in ruConvoySquad do
7460: LD_ADDR_VAR 0 7
7464: PUSH
7465: LD_EXP 38
7469: PUSH
7470: FOR_IN
7471: IFFALSE 7890
// begin if IsInArea ( un , westSouthOutArea ) then
7473: LD_VAR 0 7
7477: PPUSH
7478: LD_INT 18
7480: PPUSH
7481: CALL_OW 308
7485: IFFALSE 7528
// begin convoySavedCounter := convoySavedCounter + 1 ;
7487: LD_ADDR_EXP 15
7491: PUSH
7492: LD_EXP 15
7496: PUSH
7497: LD_INT 1
7499: PLUS
7500: ST_TO_ADDR
// RemoveUnit ( un ) ;
7501: LD_VAR 0 7
7505: PPUSH
7506: CALL_OW 64
// ruConvoySquad := ruConvoySquad diff un ;
7510: LD_ADDR_EXP 38
7514: PUSH
7515: LD_EXP 38
7519: PUSH
7520: LD_VAR 0 7
7524: DIFF
7525: ST_TO_ADDR
// break ;
7526: GO 7890
// end ; if IsOk ( un ) and not HasTask ( un ) then
7528: LD_VAR 0 7
7532: PPUSH
7533: CALL_OW 302
7537: PUSH
7538: LD_VAR 0 7
7542: PPUSH
7543: CALL_OW 314
7547: NOT
7548: AND
7549: IFFALSE 7888
// begin tag := GetTag ( un ) ;
7551: LD_ADDR_VAR 0 8
7555: PUSH
7556: LD_VAR 0 7
7560: PPUSH
7561: CALL_OW 110
7565: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
7566: LD_VAR 0 7
7570: PPUSH
7571: LD_VAR 0 6
7575: PUSH
7576: LD_VAR 0 8
7580: PUSH
7581: LD_INT 1
7583: PLUS
7584: ARRAY
7585: PUSH
7586: LD_INT 1
7588: ARRAY
7589: PPUSH
7590: LD_VAR 0 6
7594: PUSH
7595: LD_VAR 0 8
7599: PUSH
7600: LD_INT 1
7602: PLUS
7603: ARRAY
7604: PUSH
7605: LD_INT 2
7607: ARRAY
7608: PPUSH
7609: CALL_OW 297
7613: PUSH
7614: LD_INT 6
7616: LESS
7617: IFFALSE 7728
// begin SetTag ( un , tag + 1 ) ;
7619: LD_VAR 0 7
7623: PPUSH
7624: LD_VAR 0 8
7628: PUSH
7629: LD_INT 1
7631: PLUS
7632: PPUSH
7633: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
7637: LD_VAR 0 7
7641: PPUSH
7642: CALL_OW 247
7646: PUSH
7647: LD_INT 2
7649: EQUAL
7650: PUSH
7651: LD_VAR 0 7
7655: PPUSH
7656: CALL_OW 257
7660: PUSH
7661: LD_INT 3
7663: EQUAL
7664: OR
7665: IFFALSE 7726
// begin AddComWait ( un , 0 0$4 ) ;
7667: LD_VAR 0 7
7671: PPUSH
7672: LD_INT 140
7674: PPUSH
7675: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7679: LD_VAR 0 7
7683: PPUSH
7684: LD_VAR 0 6
7688: PUSH
7689: LD_VAR 0 8
7693: PUSH
7694: LD_INT 1
7696: PLUS
7697: ARRAY
7698: PUSH
7699: LD_INT 1
7701: ARRAY
7702: PPUSH
7703: LD_VAR 0 6
7707: PUSH
7708: LD_VAR 0 8
7712: PUSH
7713: LD_INT 1
7715: PLUS
7716: ARRAY
7717: PUSH
7718: LD_INT 2
7720: ARRAY
7721: PPUSH
7722: CALL_OW 174
// end ; end else
7726: GO 7888
// begin if GetClass ( un ) = 4 and UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7728: LD_VAR 0 7
7732: PPUSH
7733: CALL_OW 257
7737: PUSH
7738: LD_INT 4
7740: EQUAL
7741: PUSH
7742: LD_EXP 38
7746: PPUSH
7747: LD_INT 21
7749: PUSH
7750: LD_INT 1
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: LD_INT 3
7759: PUSH
7760: LD_INT 24
7762: PUSH
7763: LD_INT 1000
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 72
7782: AND
7783: IFFALSE 7841
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
7785: LD_VAR 0 7
7789: PPUSH
7790: LD_EXP 38
7794: PPUSH
7795: LD_INT 21
7797: PUSH
7798: LD_INT 1
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 3
7807: PUSH
7808: LD_INT 24
7810: PUSH
7811: LD_INT 1000
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PPUSH
7826: CALL_OW 72
7830: PUSH
7831: LD_INT 1
7833: ARRAY
7834: PPUSH
7835: CALL_OW 128
7839: GO 7888
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7841: LD_VAR 0 7
7845: PPUSH
7846: LD_VAR 0 6
7850: PUSH
7851: LD_VAR 0 8
7855: PUSH
7856: LD_INT 1
7858: PLUS
7859: ARRAY
7860: PUSH
7861: LD_INT 1
7863: ARRAY
7864: PPUSH
7865: LD_VAR 0 6
7869: PUSH
7870: LD_VAR 0 8
7874: PUSH
7875: LD_INT 1
7877: PLUS
7878: ARRAY
7879: PUSH
7880: LD_INT 2
7882: ARRAY
7883: PPUSH
7884: CALL_OW 114
// end ; end ; end ;
7888: GO 7470
7890: POP
7891: POP
// until not ruConvoySquad ;
7892: LD_EXP 38
7896: NOT
7897: IFFALSE 7453
// end ; end_of_file
7899: LD_VAR 0 1
7903: RET
// on UnitDestroyed ( un ) do begin if un = Heike then
7904: LD_VAR 0 1
7908: PUSH
7909: LD_EXP 18
7913: EQUAL
7914: IFFALSE 7923
// YouLost ( Heike ) ;
7916: LD_STRING Heike
7918: PPUSH
7919: CALL_OW 104
// if un in apeSoldGroup then
7923: LD_VAR 0 1
7927: PUSH
7928: LD_EXP 39
7932: IN
7933: IFFALSE 7951
// apeSoldGroup := apeSoldGroup diff un ;
7935: LD_ADDR_EXP 39
7939: PUSH
7940: LD_EXP 39
7944: PUSH
7945: LD_VAR 0 1
7949: DIFF
7950: ST_TO_ADDR
// if un in apeEngGroup then
7951: LD_VAR 0 1
7955: PUSH
7956: LD_EXP 40
7960: IN
7961: IFFALSE 7979
// apeEngGroup := apeEngGroup diff un ;
7963: LD_ADDR_EXP 40
7967: PUSH
7968: LD_EXP 40
7972: PUSH
7973: LD_VAR 0 1
7977: DIFF
7978: ST_TO_ADDR
// if un in oilBaseGuard then
7979: LD_VAR 0 1
7983: PUSH
7984: LD_EXP 35
7988: IN
7989: IFFALSE 8007
// oilBaseGuard := oilBaseGuard diff un ;
7991: LD_ADDR_EXP 35
7995: PUSH
7996: LD_EXP 35
8000: PUSH
8001: LD_VAR 0 1
8005: DIFF
8006: ST_TO_ADDR
// if un in ruNorthGroup then
8007: LD_VAR 0 1
8011: PUSH
8012: LD_EXP 36
8016: IN
8017: IFFALSE 8035
// ruNorthGroup := ruNorthGroup diff un ;
8019: LD_ADDR_EXP 36
8023: PUSH
8024: LD_EXP 36
8028: PUSH
8029: LD_VAR 0 1
8033: DIFF
8034: ST_TO_ADDR
// if un in ruSouthGroup then
8035: LD_VAR 0 1
8039: PUSH
8040: LD_EXP 37
8044: IN
8045: IFFALSE 8063
// ruSouthGroup := ruSouthGroup diff un ;
8047: LD_ADDR_EXP 37
8051: PUSH
8052: LD_EXP 37
8056: PUSH
8057: LD_VAR 0 1
8061: DIFF
8062: ST_TO_ADDR
// if un in ruConvoySquad then
8063: LD_VAR 0 1
8067: PUSH
8068: LD_EXP 38
8072: IN
8073: IFFALSE 8091
// ruConvoySquad := ruConvoySquad diff un ;
8075: LD_ADDR_EXP 38
8079: PUSH
8080: LD_EXP 38
8084: PUSH
8085: LD_VAR 0 1
8089: DIFF
8090: ST_TO_ADDR
// end ;
8091: PPOPN 1
8093: END
// on VehicleConstructed ( veh , fac ) do begin if GetWeapon ( veh ) = ar_radar then
8094: LD_VAR 0 1
8098: PPUSH
8099: CALL_OW 264
8103: PUSH
8104: LD_INT 30
8106: EQUAL
8107: IFFALSE 8117
// radarConstructed := true ;
8109: LD_ADDR_EXP 13
8113: PUSH
8114: LD_INT 1
8116: ST_TO_ADDR
// end ; end_of_file
8117: PPOPN 2
8119: END
// export function Action ; var i , un , veh , tmp ; begin
8120: LD_INT 0
8122: PPUSH
8123: PPUSH
8124: PPUSH
8125: PPUSH
8126: PPUSH
// InGameOn ;
8127: CALL_OW 8
// music_nat := 2 ;
8131: LD_ADDR_OWVAR 71
8135: PUSH
8136: LD_INT 2
8138: ST_TO_ADDR
// music_class := 0 ;
8139: LD_ADDR_OWVAR 72
8143: PUSH
8144: LD_INT 0
8146: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8147: LD_INT 7
8149: PPUSH
8150: LD_INT 6
8152: PPUSH
8153: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 20 ) ;
8157: LD_INT 7
8159: PPUSH
8160: LD_INT 6
8162: PPUSH
8163: LD_INT 2
8165: PPUSH
8166: LD_INT 20
8168: NEG
8169: PPUSH
8170: CALL 2773 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Aviradze ] ;
8174: LD_ADDR_VAR 0 5
8178: PUSH
8179: LD_EXP 18
8183: PUSH
8184: LD_EXP 19
8188: PUSH
8189: LD_EXP 20
8193: PUSH
8194: LD_EXP 21
8198: PUSH
8199: LD_EXP 22
8203: PUSH
8204: LD_EXP 23
8208: PUSH
8209: LD_EXP 24
8213: PUSH
8214: LD_EXP 25
8218: PUSH
8219: LD_EXP 30
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: ST_TO_ADDR
// tmp := tmp diff 0 ;
8235: LD_ADDR_VAR 0 5
8239: PUSH
8240: LD_VAR 0 5
8244: PUSH
8245: LD_INT 0
8247: DIFF
8248: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8249: LD_ADDR_VAR 0 5
8253: PUSH
8254: LD_VAR 0 5
8258: PPUSH
8259: LD_INT 3
8261: PPUSH
8262: CALL 2636 0 2
8266: ST_TO_ADDR
// for i in heikeVehicles do
8267: LD_ADDR_VAR 0 2
8271: PUSH
8272: LD_EXP 32
8276: PUSH
8277: FOR_IN
8278: IFFALSE 8477
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8280: LD_INT 5
8282: PPUSH
8283: LD_VAR 0 2
8287: PUSH
8288: LD_INT 5
8290: ARRAY
8291: PPUSH
8292: LD_VAR 0 2
8296: PUSH
8297: LD_INT 1
8299: ARRAY
8300: PPUSH
8301: LD_VAR 0 2
8305: PUSH
8306: LD_INT 2
8308: ARRAY
8309: PPUSH
8310: LD_VAR 0 2
8314: PUSH
8315: LD_INT 3
8317: ARRAY
8318: PPUSH
8319: LD_VAR 0 2
8323: PUSH
8324: LD_INT 4
8326: ARRAY
8327: PPUSH
8328: LD_INT 34
8330: PPUSH
8331: CALL 385 0 7
// veh := CreateVehicle ;
8335: LD_ADDR_VAR 0 4
8339: PUSH
8340: CALL_OW 45
8344: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8345: LD_VAR 0 2
8349: PUSH
8350: LD_INT 4
8352: ARRAY
8353: PUSH
8354: LD_INT 51
8356: PUSH
8357: LD_INT 32
8359: PUSH
8360: LD_INT 12
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: LIST
8367: IN
8368: IFFALSE 8448
// begin if i [ 7 ] [ 1 ] then
8370: LD_VAR 0 2
8374: PUSH
8375: LD_INT 7
8377: ARRAY
8378: PUSH
8379: LD_INT 1
8381: ARRAY
8382: IFFALSE 8409
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8384: LD_VAR 0 4
8388: PPUSH
8389: LD_INT 1
8391: PPUSH
8392: LD_VAR 0 2
8396: PUSH
8397: LD_INT 7
8399: ARRAY
8400: PUSH
8401: LD_INT 1
8403: ARRAY
8404: PPUSH
8405: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8409: LD_VAR 0 2
8413: PUSH
8414: LD_INT 7
8416: ARRAY
8417: PUSH
8418: LD_INT 2
8420: ARRAY
8421: IFFALSE 8448
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8423: LD_VAR 0 4
8427: PPUSH
8428: LD_INT 2
8430: PPUSH
8431: LD_VAR 0 2
8435: PUSH
8436: LD_INT 7
8438: ARRAY
8439: PUSH
8440: LD_INT 2
8442: ARRAY
8443: PPUSH
8444: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8448: LD_VAR 0 4
8452: PPUSH
8453: LD_INT 2
8455: PPUSH
8456: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8460: LD_VAR 0 4
8464: PPUSH
8465: LD_INT 4
8467: PPUSH
8468: LD_INT 0
8470: PPUSH
8471: CALL_OW 49
// end ;
8475: GO 8277
8477: POP
8478: POP
// if tmp then
8479: LD_VAR 0 5
8483: IFFALSE 8538
// for i in tmp union heikeApes do
8485: LD_ADDR_VAR 0 2
8489: PUSH
8490: LD_VAR 0 5
8494: PUSH
8495: LD_EXP 33
8499: UNION
8500: PUSH
8501: FOR_IN
8502: IFFALSE 8536
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
8504: LD_VAR 0 2
8508: PPUSH
8509: LD_INT 5
8511: PPUSH
8512: LD_INT 0
8514: PPUSH
8515: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8519: LD_VAR 0 2
8523: PPUSH
8524: LD_INT 26
8526: PPUSH
8527: LD_INT 9
8529: PPUSH
8530: CALL_OW 118
// end ;
8534: GO 8501
8536: POP
8537: POP
// if heikeSecondSquad then
8538: LD_EXP 31
8542: IFFALSE 8591
// for i in heikeSecondSquad do
8544: LD_ADDR_VAR 0 2
8548: PUSH
8549: LD_EXP 31
8553: PUSH
8554: FOR_IN
8555: IFFALSE 8589
// begin PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8557: LD_VAR 0 2
8561: PPUSH
8562: LD_INT 6
8564: PPUSH
8565: LD_INT 0
8567: PPUSH
8568: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8572: LD_VAR 0 2
8576: PPUSH
8577: LD_INT 26
8579: PPUSH
8580: LD_INT 9
8582: PPUSH
8583: CALL_OW 118
// end ;
8587: GO 8554
8589: POP
8590: POP
// if heikeApes then
8591: LD_EXP 33
8595: IFFALSE 8638
// for i in heikeApes do
8597: LD_ADDR_VAR 0 2
8601: PUSH
8602: LD_EXP 33
8606: PUSH
8607: FOR_IN
8608: IFFALSE 8636
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8610: LD_VAR 0 2
8614: PPUSH
8615: LD_INT 7
8617: PPUSH
8618: LD_INT 0
8620: PPUSH
8621: CALL_OW 49
// ComHold ( i ) ;
8625: LD_VAR 0 2
8629: PPUSH
8630: CALL_OW 140
// end ;
8634: GO 8607
8636: POP
8637: POP
// if Kurt then
8638: LD_EXP 29
8642: IFFALSE 8674
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8644: LD_EXP 29
8648: PPUSH
8649: LD_INT 8
8651: PPUSH
8652: LD_INT 0
8654: PPUSH
8655: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8659: LD_EXP 29
8663: PPUSH
8664: LD_INT 42
8666: PPUSH
8667: LD_INT 32
8669: PPUSH
8670: CALL_OW 118
// end ; Say ( Heike , DH-Start-1 ) ;
8674: LD_EXP 18
8678: PPUSH
8679: LD_STRING DH-Start-1
8681: PPUSH
8682: CALL_OW 88
// if Givi then
8686: LD_EXP 19
8690: IFFALSE 8953
// begin Say ( Givi , DG-Start-2-5 ) ;
8692: LD_EXP 19
8696: PPUSH
8697: LD_STRING DG-Start-2-5
8699: PPUSH
8700: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8704: LD_EXP 18
8708: PPUSH
8709: LD_STRING DH-Start-3
8711: PPUSH
8712: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8716: LD_EXP 18
8720: PPUSH
8721: LD_STRING DH-Start-4
8723: PPUSH
8724: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8728: LD_EXP 19
8732: PPUSH
8733: LD_STRING DG-Start-5
8735: PPUSH
8736: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8740: LD_EXP 18
8744: PPUSH
8745: LD_STRING DH-Start-6
8747: PPUSH
8748: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8752: LD_EXP 19
8756: PPUSH
8757: LD_STRING DG-Start-7
8759: PPUSH
8760: CALL_OW 88
// if Mike then
8764: LD_EXP 20
8768: IFFALSE 8941
// begin Say ( Mike , DM-Start-8 ) ;
8770: LD_EXP 20
8774: PPUSH
8775: LD_STRING DM-Start-8
8777: PPUSH
8778: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8782: LD_EXP 20
8786: PPUSH
8787: LD_STRING DM-Start-9
8789: PPUSH
8790: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8794: LD_EXP 19
8798: PPUSH
8799: LD_STRING DG-Start-10
8801: PPUSH
8802: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8806: LD_EXP 19
8810: PPUSH
8811: LD_STRING DG-Start-11
8813: PPUSH
8814: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8818: LD_EXP 18
8822: PPUSH
8823: LD_STRING DH-Start-12
8825: PPUSH
8826: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8830: LD_EXP 19
8834: PPUSH
8835: LD_STRING DG-Start-13
8837: PPUSH
8838: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8842: LD_EXP 19
8846: PPUSH
8847: LD_STRING DG-Start-14
8849: PPUSH
8850: CALL_OW 88
// if Kaia then
8854: LD_EXP 23
8858: IFFALSE 8941
// begin Say ( Kaia , DK-Start-15 ) ;
8860: LD_EXP 23
8864: PPUSH
8865: LD_STRING DK-Start-15
8867: PPUSH
8868: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8872: LD_EXP 23
8876: PPUSH
8877: LD_STRING DK-Start-16
8879: PPUSH
8880: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8884: LD_EXP 23
8888: PPUSH
8889: LD_STRING DK-Start-17
8891: PPUSH
8892: CALL_OW 88
// wait ( 0 0$0.3 ) ;
8896: LD_INT 10
8898: PPUSH
8899: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
8903: LD_EXP 19
8907: PPUSH
8908: LD_EXP 23
8912: PPUSH
8913: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
8917: LD_EXP 19
8921: PPUSH
8922: LD_STRING DG-Start-18
8924: PPUSH
8925: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
8929: LD_EXP 23
8933: PPUSH
8934: LD_STRING DK-Start-19
8936: PPUSH
8937: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
8941: LD_EXP 18
8945: PPUSH
8946: LD_STRING DH-Start-20
8948: PPUSH
8949: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
8953: LD_INT 70
8955: PPUSH
8956: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
8960: LD_EXP 26
8964: PPUSH
8965: LD_STRING DShar-Start-21
8967: PPUSH
8968: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
8972: LD_EXP 18
8976: PPUSH
8977: LD_STRING DH-Start-22
8979: PPUSH
8980: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
8984: LD_EXP 26
8988: PPUSH
8989: LD_STRING DShar-Start-23
8991: PPUSH
8992: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
8996: LD_EXP 26
9000: PPUSH
9001: LD_STRING DShar-Start-24
9003: PPUSH
9004: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9008: LD_EXP 26
9012: PPUSH
9013: LD_STRING DShar-Start-25
9015: PPUSH
9016: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9020: LD_EXP 26
9024: PPUSH
9025: LD_STRING DShar-Start-26
9027: PPUSH
9028: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9032: LD_EXP 18
9036: PPUSH
9037: LD_STRING DH-Start-27
9039: PPUSH
9040: CALL_OW 88
// if Kaia then
9044: LD_EXP 23
9048: IFFALSE 9088
// begin ComTurnUnit ( Heike , Kaia ) ;
9050: LD_EXP 18
9054: PPUSH
9055: LD_EXP 23
9059: PPUSH
9060: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9064: LD_EXP 23
9068: PPUSH
9069: LD_STRING DK-Start-28
9071: PPUSH
9072: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9076: LD_EXP 18
9080: PPUSH
9081: LD_STRING DH-Start-29
9083: PPUSH
9084: CALL_OW 88
// end ; if Givi then
9088: LD_EXP 19
9092: IFFALSE 9304
// begin ComTurnUnit ( Heike , Givi ) ;
9094: LD_EXP 18
9098: PPUSH
9099: LD_EXP 19
9103: PPUSH
9104: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9108: LD_EXP 19
9112: PPUSH
9113: LD_EXP 18
9117: PPUSH
9118: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9122: LD_EXP 18
9126: PPUSH
9127: LD_STRING DH-Start-30
9129: PPUSH
9130: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9134: LD_EXP 18
9138: PPUSH
9139: LD_STRING DH-Start-31
9141: PPUSH
9142: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9146: LD_EXP 19
9150: PPUSH
9151: LD_STRING DG-Start-32
9153: PPUSH
9154: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9158: LD_EXP 18
9162: PPUSH
9163: LD_STRING DH-Start-33
9165: PPUSH
9166: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9170: LD_EXP 19
9174: PPUSH
9175: LD_STRING DG-Start-34
9177: PPUSH
9178: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9182: LD_EXP 19
9186: PPUSH
9187: LD_STRING DG-Start-35
9189: PPUSH
9190: CALL_OW 88
// if Kurt and not dialogue_skipped then
9194: LD_EXP 29
9198: PUSH
9199: LD_OWVAR 59
9203: NOT
9204: AND
9205: IFFALSE 9236
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9207: LD_EXP 29
9211: PPUSH
9212: LD_INT 28
9214: PPUSH
9215: LD_INT 13
9217: PPUSH
9218: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9222: LD_EXP 29
9226: PPUSH
9227: LD_EXP 18
9231: PPUSH
9232: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9236: LD_EXP 19
9240: PPUSH
9241: LD_STRING DG-Start-36
9243: PPUSH
9244: CALL_OW 88
// if Kurt then
9248: LD_EXP 29
9252: IFFALSE 9304
// begin Say ( Kurt , DKs-Start-37 ) ;
9254: LD_EXP 29
9258: PPUSH
9259: LD_STRING DKs-Start-37
9261: PPUSH
9262: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9266: LD_EXP 29
9270: PPUSH
9271: LD_STRING DKs-Start-38
9273: PPUSH
9274: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9278: LD_EXP 18
9282: PPUSH
9283: LD_EXP 29
9287: PPUSH
9288: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9292: LD_EXP 18
9296: PPUSH
9297: LD_STRING DH-Start-39
9299: PPUSH
9300: CALL_OW 88
// end ; end ; if HexInfo ( 44 , 25 ) then
9304: LD_INT 44
9306: PPUSH
9307: LD_INT 25
9309: PPUSH
9310: CALL_OW 428
9314: IFFALSE 9331
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9316: LD_INT 44
9318: PPUSH
9319: LD_INT 25
9321: PPUSH
9322: CALL_OW 428
9326: PPUSH
9327: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9331: LD_EXP 27
9335: PPUSH
9336: LD_INT 5
9338: PPUSH
9339: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9343: LD_EXP 27
9347: PPUSH
9348: LD_INT 44
9350: PPUSH
9351: LD_INT 25
9353: PPUSH
9354: LD_INT 0
9356: PPUSH
9357: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9361: LD_EXP 27
9365: PPUSH
9366: LD_INT 29
9368: PPUSH
9369: LD_INT 12
9371: PPUSH
9372: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9376: LD_INT 35
9378: PPUSH
9379: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9383: LD_OWVAR 59
9387: PUSH
9388: LD_EXP 18
9392: PPUSH
9393: LD_EXP 27
9397: PPUSH
9398: CALL_OW 296
9402: PUSH
9403: LD_INT 8
9405: LESS
9406: OR
9407: PUSH
9408: LD_EXP 27
9412: PPUSH
9413: LD_INT 26
9415: PPUSH
9416: LD_INT 9
9418: PPUSH
9419: CALL_OW 297
9423: PUSH
9424: LD_INT 6
9426: LESS
9427: OR
9428: IFFALSE 9376
// Say ( Olaf , DO-Scout-1 ) ;
9430: LD_EXP 27
9434: PPUSH
9435: LD_STRING DO-Scout-1
9437: PPUSH
9438: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9442: LD_EXP 27
9446: PPUSH
9447: LD_EXP 18
9451: PPUSH
9452: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9456: LD_ADDR_VAR 0 2
9460: PUSH
9461: LD_VAR 0 5
9465: PUSH
9466: LD_EXP 31
9470: UNION
9471: PUSH
9472: FOR_IN
9473: IFFALSE 9491
// ComTurnUnit ( i , Olaf ) ;
9475: LD_VAR 0 2
9479: PPUSH
9480: LD_EXP 27
9484: PPUSH
9485: CALL_OW 119
9489: GO 9472
9491: POP
9492: POP
// wait ( 0 0$0.3 ) ;
9493: LD_INT 10
9495: PPUSH
9496: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9500: LD_EXP 18
9504: PPUSH
9505: LD_EXP 27
9509: PPUSH
9510: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9514: LD_EXP 18
9518: PPUSH
9519: LD_EXP 27
9523: PPUSH
9524: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9528: LD_EXP 18
9532: PPUSH
9533: LD_STRING DH-Scout-2
9535: PPUSH
9536: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9540: LD_EXP 27
9544: PPUSH
9545: LD_STRING DO-Scout-3
9547: PPUSH
9548: CALL_OW 88
// if Mike and Givi then
9552: LD_EXP 20
9556: PUSH
9557: LD_EXP 19
9561: AND
9562: IFFALSE 9578
// Say ( Olaf , DO-Scout-4 ) else
9564: LD_EXP 27
9568: PPUSH
9569: LD_STRING DO-Scout-4
9571: PPUSH
9572: CALL_OW 88
9576: GO 9678
// begin if Mike then
9578: LD_EXP 20
9582: IFFALSE 9610
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9584: LD_EXP 27
9588: PPUSH
9589: LD_STRING DO-Scout-a-4
9591: PPUSH
9592: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9596: LD_EXP 18
9600: PPUSH
9601: LD_STRING DH-Scout-a-5
9603: PPUSH
9604: CALL_OW 88
// end else
9608: GO 9678
// if Givi then
9610: LD_EXP 19
9614: IFFALSE 9642
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9616: LD_EXP 27
9620: PPUSH
9621: LD_STRING DO-Scout-b-4
9623: PPUSH
9624: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9628: LD_EXP 18
9632: PPUSH
9633: LD_STRING DH-Scout-b-5
9635: PPUSH
9636: CALL_OW 88
// end else
9640: GO 9678
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9642: LD_EXP 27
9646: PPUSH
9647: LD_STRING DO-Scout-f-4
9649: PPUSH
9650: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9654: LD_EXP 18
9658: PPUSH
9659: LD_STRING DH-Scout-f-5
9661: PPUSH
9662: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9666: LD_EXP 27
9670: PPUSH
9671: LD_STRING DO-Scout-f-6
9673: PPUSH
9674: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9678: LD_EXP 18
9682: PPUSH
9683: LD_STRING DH-Scout-5
9685: PPUSH
9686: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9690: LD_EXP 27
9694: PPUSH
9695: LD_STRING DO-Scout-6
9697: PPUSH
9698: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9702: LD_EXP 27
9706: PPUSH
9707: LD_STRING DO-Scout-7
9709: PPUSH
9710: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9714: LD_EXP 18
9718: PPUSH
9719: LD_STRING DH-Scout-8
9721: PPUSH
9722: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9726: LD_EXP 18
9730: PPUSH
9731: LD_STRING DH-Scout-9
9733: PPUSH
9734: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9738: LD_EXP 27
9742: PPUSH
9743: LD_STRING DO-Scout-10
9745: PPUSH
9746: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9750: LD_EXP 27
9754: PPUSH
9755: LD_STRING DO-Scout-12
9757: PPUSH
9758: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9762: LD_EXP 27
9766: PPUSH
9767: LD_STRING DO-Scout-13
9769: PPUSH
9770: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9774: LD_EXP 27
9778: PPUSH
9779: LD_STRING DO-Scout-14
9781: PPUSH
9782: CALL_OW 88
// if Givi then
9786: LD_EXP 19
9790: IFFALSE 9816
// begin Say ( Givi , DG-Scout-15 ) ;
9792: LD_EXP 19
9796: PPUSH
9797: LD_STRING DG-Scout-15
9799: PPUSH
9800: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9804: LD_EXP 23
9808: PPUSH
9809: LD_STRING DK-Scout-16
9811: PPUSH
9812: CALL_OW 88
// end ; if not dialogue_skipped then
9816: LD_OWVAR 59
9820: NOT
9821: IFFALSE 9940
// begin async ;
9823: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
9824: LD_EXP 27
9828: PPUSH
9829: LD_STRING DO-Scout-17
9831: PPUSH
9832: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9836: LD_INT 55
9838: PPUSH
9839: LD_INT 77
9841: PPUSH
9842: LD_INT 2
9844: PPUSH
9845: LD_INT 6
9847: NEG
9848: PPUSH
9849: CALL 2773 0 4
// wait ( 10 ) ;
9853: LD_INT 10
9855: PPUSH
9856: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
9860: LD_INT 55
9862: PPUSH
9863: LD_INT 77
9865: PPUSH
9866: CALL_OW 84
// wait ( 0 0$5 ) ;
9870: LD_INT 175
9872: PPUSH
9873: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
9877: LD_EXP 27
9881: PPUSH
9882: LD_STRING DO-Scout-18
9884: PPUSH
9885: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9889: LD_INT 204
9891: PPUSH
9892: LD_INT 107
9894: PPUSH
9895: LD_INT 2
9897: PPUSH
9898: LD_INT 12
9900: NEG
9901: PPUSH
9902: CALL 2773 0 4
// wait ( 10 ) ;
9906: LD_INT 10
9908: PPUSH
9909: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
9913: LD_INT 204
9915: PPUSH
9916: LD_INT 107
9918: PPUSH
9919: CALL_OW 84
// wait ( 0 0$5 ) ;
9923: LD_INT 175
9925: PPUSH
9926: CALL_OW 67
// sync ;
9930: SYNC
// CenterNowOnUnits ( Heike ) ;
9931: LD_EXP 18
9935: PPUSH
9936: CALL_OW 87
// end ; Say ( Olaf , DO-Scout-19 ) ;
9940: LD_EXP 27
9944: PPUSH
9945: LD_STRING DO-Scout-19
9947: PPUSH
9948: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
9952: LD_EXP 27
9956: PPUSH
9957: LD_STRING DO-Scout-20
9959: PPUSH
9960: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
9964: LD_EXP 18
9968: PPUSH
9969: LD_STRING DH-Scout-21
9971: PPUSH
9972: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
9976: LD_EXP 18
9980: PPUSH
9981: LD_STRING DH-Scout-22
9983: PPUSH
9984: CALL_OW 88
// InGameOff ;
9988: CALL_OW 9
// if Givi then
9992: LD_EXP 19
9996: IFFALSE 10011
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
9998: LD_INT 13
10000: PPUSH
10001: LD_INT 2
10003: PPUSH
10004: LD_INT 1
10006: PPUSH
10007: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10011: LD_STRING Road
10013: PPUSH
10014: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10018: LD_ADDR_VAR 0 2
10022: PUSH
10023: LD_INT 22
10025: PUSH
10026: LD_INT 5
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: LD_INT 21
10035: PUSH
10036: LD_INT 2
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: PPUSH
10047: CALL_OW 69
10051: PUSH
10052: FOR_IN
10053: IFFALSE 10069
// SetSide ( i , 2 ) ;
10055: LD_VAR 0 2
10059: PPUSH
10060: LD_INT 2
10062: PPUSH
10063: CALL_OW 235
10067: GO 10052
10069: POP
10070: POP
// SaveForQuickRestart ;
10071: CALL_OW 22
// end ;
10075: LD_VAR 0 1
10079: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10080: LD_INT 2
10082: PPUSH
10083: LD_INT 9
10085: PPUSH
10086: CALL_OW 294
10090: IFFALSE 10437
10092: GO 10094
10094: DISABLE
// begin DialogueOn ;
10095: CALL_OW 6
// ShowArea ( 2 , crossRoadArea ) ;
10099: LD_INT 2
10101: PPUSH
10102: LD_INT 9
10104: PPUSH
10105: CALL_OW 334
// CenterNowOnXY ( 111 , 72 ) ;
10109: LD_INT 111
10111: PPUSH
10112: LD_INT 72
10114: PPUSH
10115: CALL_OW 86
// if IsOk ( Kamil ) then
10119: LD_EXP 22
10123: PPUSH
10124: CALL_OW 302
10128: IFFALSE 10245
// begin Say ( Kamil , DKam-Cross-1 ) ;
10130: LD_EXP 22
10134: PPUSH
10135: LD_STRING DKam-Cross-1
10137: PPUSH
10138: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10142: LD_EXP 22
10146: PPUSH
10147: LD_STRING DKam-Cross-2
10149: PPUSH
10150: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10154: LD_EXP 22
10158: PPUSH
10159: LD_STRING DKam-Cross-3
10161: PPUSH
10162: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10166: LD_EXP 22
10170: PPUSH
10171: LD_STRING DKam-Cross-4
10173: PPUSH
10174: CALL_OW 88
// if IsOk ( Ibrahim ) then
10178: LD_EXP 21
10182: PPUSH
10183: CALL_OW 302
10187: IFFALSE 10243
// begin if ibrahimJoinedIn04 then
10189: LD_EXP 4
10193: IFFALSE 10207
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10195: LD_EXP 21
10199: PPUSH
10200: LD_STRING DI-Cross-b-5
10202: PPUSH
10203: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10207: LD_EXP 21
10211: PPUSH
10212: LD_STRING DI-Cross-b-6
10214: PPUSH
10215: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10219: LD_EXP 21
10223: PPUSH
10224: LD_STRING DI-Cross-b-7
10226: PPUSH
10227: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10231: LD_EXP 22
10235: PPUSH
10236: LD_STRING DKam-Cross-8
10238: PPUSH
10239: CALL_OW 88
// end ; end else
10243: GO 10403
// if IsOk ( Sophia ) then
10245: LD_EXP 24
10249: PPUSH
10250: CALL_OW 302
10254: IFFALSE 10371
// begin Say ( Sophia , DS-Cross-1 ) ;
10256: LD_EXP 24
10260: PPUSH
10261: LD_STRING DS-Cross-1
10263: PPUSH
10264: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10268: LD_EXP 24
10272: PPUSH
10273: LD_STRING DS-Cross-2
10275: PPUSH
10276: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10280: LD_EXP 24
10284: PPUSH
10285: LD_STRING DS-Cross-3
10287: PPUSH
10288: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10292: LD_EXP 24
10296: PPUSH
10297: LD_STRING DS-Cross-4
10299: PPUSH
10300: CALL_OW 88
// if IsOk ( Ibrahim ) then
10304: LD_EXP 21
10308: PPUSH
10309: CALL_OW 302
10313: IFFALSE 10369
// begin if ibrahimJoinedIn04 then
10315: LD_EXP 4
10319: IFFALSE 10333
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10321: LD_EXP 21
10325: PPUSH
10326: LD_STRING DI-Cross-b-5
10328: PPUSH
10329: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10333: LD_EXP 21
10337: PPUSH
10338: LD_STRING DI-Cross-b-6
10340: PPUSH
10341: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10345: LD_EXP 21
10349: PPUSH
10350: LD_STRING DI-Cross-b-7
10352: PPUSH
10353: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10357: LD_EXP 24
10361: PPUSH
10362: LD_STRING DS-Cross-8
10364: PPUSH
10365: CALL_OW 88
// end ; end else
10369: GO 10403
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10371: LD_EXP 31
10375: PPUSH
10376: LD_INT 50
10378: PUSH
10379: EMPTY
10380: LIST
10381: PPUSH
10382: CALL_OW 72
10386: IFFALSE 10403
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10388: LD_EXP 31
10392: PPUSH
10393: LD_STRING DArm-Cross-c-1
10395: PPUSH
10396: LD_STRING DArf-Cross-c-1
10398: PPUSH
10399: CALL 2824 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10403: LD_EXP 52
10407: PPUSH
10408: LD_INT 2
10410: PPUSH
10411: LD_INT 1
10413: PPUSH
10414: CALL_OW 322
// DialogueOff ;
10418: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10422: LD_STRING Crane
10424: PPUSH
10425: CALL_OW 337
// spottedCrossRoad := true ;
10429: LD_ADDR_EXP 8
10433: PUSH
10434: LD_INT 1
10436: ST_TO_ADDR
// end ;
10437: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10438: LD_INT 22
10440: PUSH
10441: LD_INT 2
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 2
10450: PUSH
10451: LD_INT 30
10453: PUSH
10454: LD_INT 0
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 30
10463: PUSH
10464: LD_INT 1
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: LIST
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: PPUSH
10480: CALL_OW 69
10484: PUSH
10485: LD_EXP 23
10489: PPUSH
10490: CALL_OW 302
10494: PUSH
10495: LD_EXP 31
10499: OR
10500: AND
10501: IFFALSE 10700
10503: GO 10505
10505: DISABLE
// begin DialogueOn ;
10506: CALL_OW 6
// if Kaia then
10510: LD_EXP 23
10514: IFFALSE 10527
// CenterNowOnUnits ( Kaia ) else
10516: LD_EXP 23
10520: PPUSH
10521: CALL_OW 87
10525: GO 10536
// CenterNowOnUnits ( Heike ) ;
10527: LD_EXP 18
10531: PPUSH
10532: CALL_OW 87
// if IsOk ( Kaia ) then
10536: LD_EXP 23
10540: PPUSH
10541: CALL_OW 302
10545: IFFALSE 10561
// Say ( Kaia , DK-Cam-1 ) else
10547: LD_EXP 23
10551: PPUSH
10552: LD_STRING DK-Cam-1
10554: PPUSH
10555: CALL_OW 88
10559: GO 10576
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10561: LD_EXP 31
10565: PPUSH
10566: LD_STRING DArm-Cam-1
10568: PPUSH
10569: LD_STRING DArf-Cam-1
10571: PPUSH
10572: CALL 2824 0 3
// Say ( Heike , DH-Cam-2 ) ;
10576: LD_EXP 18
10580: PPUSH
10581: LD_STRING DH-Cam-2
10583: PPUSH
10584: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10588: LD_EXP 18
10592: PPUSH
10593: LD_STRING DH-Cam-3
10595: PPUSH
10596: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10600: LD_EXP 18
10604: PPUSH
10605: LD_STRING DH-Cam-4
10607: PPUSH
10608: CALL_OW 88
// if IsOk ( Kaia ) then
10612: LD_EXP 23
10616: PPUSH
10617: CALL_OW 302
10621: IFFALSE 10637
// Say ( Kaia , DK-Cam-5 ) else
10623: LD_EXP 23
10627: PPUSH
10628: LD_STRING DK-Cam-5
10630: PPUSH
10631: CALL_OW 88
10635: GO 10652
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10637: LD_EXP 31
10641: PPUSH
10642: LD_STRING DArm-Cam-5
10644: PPUSH
10645: LD_STRING DArf-Cam-5
10647: PPUSH
10648: CALL 2824 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10652: LD_EXP 27
10656: PPUSH
10657: LD_STRING DO-Cam-6
10659: PPUSH
10660: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10664: LD_EXP 27
10668: PPUSH
10669: LD_STRING DO-Cam-7
10671: PPUSH
10672: CALL_OW 88
// DialogueOff ;
10676: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10680: LD_STRING Radar
10682: PPUSH
10683: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10687: LD_INT 6
10689: PPUSH
10690: LD_INT 2
10692: PPUSH
10693: LD_INT 1
10695: PPUSH
10696: CALL_OW 322
// end ;
10700: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ) do
10701: LD_INT 22
10703: PUSH
10704: LD_INT 2
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: PUSH
10711: LD_INT 34
10713: PUSH
10714: LD_INT 30
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: LD_INT 35
10723: PUSH
10724: LD_INT 30
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: LIST
10735: PPUSH
10736: CALL_OW 69
10740: IFFALSE 10752
10742: GO 10744
10744: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
10745: LD_STRING RadarDone
10747: PPUSH
10748: CALL_OW 337
10752: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
10753: LD_EXP 27
10757: PPUSH
10758: CALL_OW 302
10762: PUSH
10763: LD_EXP 30
10767: PPUSH
10768: CALL_OW 302
10772: AND
10773: PUSH
10774: LD_INT 6
10776: PPUSH
10777: LD_INT 2
10779: PPUSH
10780: CALL_OW 321
10784: PUSH
10785: LD_INT 2
10787: EQUAL
10788: AND
10789: PUSH
10790: LD_EXP 30
10794: PPUSH
10795: LD_EXP 18
10799: PPUSH
10800: CALL_OW 296
10804: PUSH
10805: LD_INT 10
10807: LESS
10808: PUSH
10809: LD_EXP 30
10813: PPUSH
10814: CALL_OW 310
10818: OR
10819: AND
10820: IFFALSE 11021
10822: GO 10824
10824: DISABLE
// begin DialogueOn ;
10825: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
10829: LD_EXP 30
10833: PPUSH
10834: LD_STRING DA-RC-1
10836: PPUSH
10837: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
10841: LD_EXP 30
10845: PPUSH
10846: LD_STRING DA-RC-2
10848: PPUSH
10849: CALL_OW 88
// if IsOk ( Kaia ) then
10853: LD_EXP 23
10857: PPUSH
10858: CALL_OW 302
10862: IFFALSE 10936
// begin Say ( Kaia , DK-RC-3 ) ;
10864: LD_EXP 23
10868: PPUSH
10869: LD_STRING DK-RC-3
10871: PPUSH
10872: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
10876: LD_EXP 30
10880: PPUSH
10881: LD_STRING DA-RC-4
10883: PPUSH
10884: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
10888: LD_EXP 23
10892: PPUSH
10893: LD_STRING DK-RC-5
10895: PPUSH
10896: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
10900: LD_EXP 30
10904: PPUSH
10905: LD_STRING DA-RC-6
10907: PPUSH
10908: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
10912: LD_EXP 23
10916: PPUSH
10917: LD_STRING DK-RC-7
10919: PPUSH
10920: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
10924: LD_EXP 30
10928: PPUSH
10929: LD_STRING DA-RC-8
10931: PPUSH
10932: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
10936: LD_EXP 18
10940: PPUSH
10941: LD_STRING DH-RC-9
10943: PPUSH
10944: CALL_OW 88
// if IsOk ( Markov ) then
10948: LD_EXP 25
10952: PPUSH
10953: CALL_OW 302
10957: IFFALSE 10985
// begin Say ( Markov , DMar-RC-10 ) ;
10959: LD_EXP 25
10963: PPUSH
10964: LD_STRING DMar-RC-10
10966: PPUSH
10967: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
10971: LD_EXP 25
10975: PPUSH
10976: LD_STRING DMar-RC-11
10978: PPUSH
10979: CALL_OW 88
// end else
10983: GO 10997
// begin Say ( Olaf , DO-RC-a-10 ) ;
10985: LD_EXP 27
10989: PPUSH
10990: LD_STRING DO-RC-a-10
10992: PPUSH
10993: CALL_OW 88
// end ; DialogueOff ;
10997: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11001: LD_STRING RemoteControl
11003: PPUSH
11004: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11008: LD_INT 15
11010: PPUSH
11011: LD_INT 2
11013: PPUSH
11014: LD_INT 1
11016: PPUSH
11017: CALL_OW 322
// end ;
11021: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11022: LD_INT 12
11024: PPUSH
11025: LD_INT 22
11027: PUSH
11028: LD_INT 2
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PPUSH
11035: CALL_OW 70
11039: IFFALSE 11393
11041: GO 11043
11043: DISABLE
11044: LD_INT 0
11046: PPUSH
// begin PrepareWestBase ;
11047: CALL 5414 0 0
// westBaseSpotted := true ;
11051: LD_ADDR_EXP 5
11055: PUSH
11056: LD_INT 1
11058: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11059: LD_INT 70
11061: PPUSH
11062: CALL_OW 67
// InGameOn ;
11066: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11070: LD_INT 56
11072: PPUSH
11073: LD_INT 77
11075: PPUSH
11076: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11080: LD_INT 56
11082: PPUSH
11083: LD_INT 77
11085: PPUSH
11086: LD_INT 2
11088: PPUSH
11089: LD_INT 12
11091: NEG
11092: PPUSH
11093: CALL_OW 330
// wait ( 0 0$2 ) ;
11097: LD_INT 70
11099: PPUSH
11100: CALL_OW 67
// DialogueOn ;
11104: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11108: LD_EXP 18
11112: PPUSH
11113: LD_STRING DH-Rbase-1
11115: PPUSH
11116: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11120: LD_EXP 23
11124: PPUSH
11125: LD_STRING DK-Rbase-2
11127: PPUSH
11128: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11132: LD_EXP 23
11136: PPUSH
11137: LD_STRING DK-Rbase-3
11139: PPUSH
11140: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11144: LD_EXP 23
11148: PPUSH
11149: LD_STRING DK-Rbase-4
11151: PPUSH
11152: CALL_OW 88
// DialogueOff ;
11156: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11160: LD_INT 56
11162: PPUSH
11163: LD_INT 77
11165: PPUSH
11166: LD_INT 2
11168: PPUSH
11169: CALL_OW 331
// InGameOff ;
11173: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11177: LD_INT 35
11179: PPUSH
11180: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11184: LD_EXP 39
11188: NOT
11189: PUSH
11190: LD_EXP 40
11194: NOT
11195: AND
11196: IFFALSE 11177
// wait ( 0 0$2 ) ;
11198: LD_INT 70
11200: PPUSH
11201: CALL_OW 67
// if IsOk ( Kaia ) then
11205: LD_EXP 23
11209: PPUSH
11210: CALL_OW 302
11214: IFFALSE 11329
// begin DialogueOn ;
11216: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11220: LD_INT 56
11222: PPUSH
11223: LD_INT 81
11225: PPUSH
11226: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11230: LD_EXP 23
11234: PPUSH
11235: LD_STRING DK-Rbase-5
11237: PPUSH
11238: CALL_OW 88
// if IsOk ( Givi ) then
11242: LD_EXP 19
11246: PPUSH
11247: CALL_OW 302
11251: IFFALSE 11325
// begin Say ( Givi , DG-Rbase-6 ) ;
11253: LD_EXP 19
11257: PPUSH
11258: LD_STRING DG-Rbase-6
11260: PPUSH
11261: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11265: LD_EXP 19
11269: PPUSH
11270: LD_STRING DG-Rbase-7
11272: PPUSH
11273: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11277: LD_EXP 23
11281: PPUSH
11282: LD_STRING DK-Rbase-8
11284: PPUSH
11285: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11289: LD_EXP 19
11293: PPUSH
11294: LD_STRING DG-Rbase-9
11296: PPUSH
11297: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11301: LD_EXP 19
11305: PPUSH
11306: LD_STRING DG-Rbase-10
11308: PPUSH
11309: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11313: LD_EXP 23
11317: PPUSH
11318: LD_STRING DK-Rbase-11
11320: PPUSH
11321: CALL_OW 88
// end ; DialogueOff ;
11325: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11329: LD_ADDR_VAR 0 1
11333: PUSH
11334: LD_INT 12
11336: PPUSH
11337: LD_INT 22
11339: PUSH
11340: LD_INT 3
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PUSH
11347: LD_INT 21
11349: PUSH
11350: LD_INT 3
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PPUSH
11361: CALL_OW 70
11365: PUSH
11366: FOR_IN
11367: IFFALSE 11383
// SetSide ( i , 2 ) ;
11369: LD_VAR 0 1
11373: PPUSH
11374: LD_INT 2
11376: PPUSH
11377: CALL_OW 235
11381: GO 11366
11383: POP
11384: POP
// westBaseCaptured := true ;
11385: LD_ADDR_EXP 9
11389: PUSH
11390: LD_INT 1
11392: ST_TO_ADDR
// end ;
11393: PPOPN 1
11395: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11396: LD_EXP 35
11400: NOT
11401: PUSH
11402: LD_INT 10
11404: PPUSH
11405: CALL_OW 255
11409: PUSH
11410: LD_INT 2
11412: EQUAL
11413: OR
11414: IFFALSE 11541
11416: GO 11418
11418: DISABLE
// begin DialogueOn ;
11419: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11423: LD_EXP 18
11427: PPUSH
11428: LD_STRING DH-Goal-1
11430: PPUSH
11431: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11435: LD_EXP 26
11439: PPUSH
11440: LD_STRING DShar-Goal-2
11442: PPUSH
11443: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11447: LD_EXP 18
11451: PPUSH
11452: LD_STRING DH-Goal-3
11454: PPUSH
11455: CALL_OW 88
// if reinforcementsAllowed then
11459: LD_EXP 14
11463: IFFALSE 11489
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11465: LD_EXP 26
11469: PPUSH
11470: LD_STRING DShar-Goal-4
11472: PPUSH
11473: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11477: LD_EXP 18
11481: PPUSH
11482: LD_STRING DH-Goal-5
11484: PPUSH
11485: CALL_OW 88
// end ; DialogueOff ;
11489: CALL_OW 7
// eastBaseCaptured := true ;
11493: LD_ADDR_EXP 10
11497: PUSH
11498: LD_INT 1
11500: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11501: LD_STRING BaseCaptured
11503: PPUSH
11504: CALL_OW 337
// if not reinforcementsAllowed then
11508: LD_EXP 14
11512: NOT
11513: IFFALSE 11517
// exit ;
11515: GO 11541
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11517: LD_INT 21000
11519: PUSH
11520: LD_INT 1050
11522: NEG
11523: PPUSH
11524: LD_INT 1050
11526: PPUSH
11527: CALL_OW 12
11531: PLUS
11532: PPUSH
11533: CALL_OW 67
// PrepareReinforcements ;
11537: CALL 3774 0 0
// end ;
11541: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11542: LD_INT 22
11544: PUSH
11545: LD_INT 2
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 30
11554: PUSH
11555: LD_INT 13
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PPUSH
11566: CALL_OW 69
11570: IFFALSE 11587
11572: GO 11574
11574: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11575: LD_EXP 19
11579: PPUSH
11580: LD_STRING DG-Lab-1
11582: PPUSH
11583: CALL_OW 88
// end ;
11587: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched do
11588: LD_INT 5
11590: PPUSH
11591: LD_INT 2
11593: PPUSH
11594: CALL_OW 321
11598: PUSH
11599: LD_INT 2
11601: EQUAL
11602: IFFALSE 11663
11604: GO 11606
11606: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11607: LD_EXP 19
11611: PPUSH
11612: LD_STRING DG-Stim-1
11614: PPUSH
11615: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11619: LD_EXP 18
11623: PPUSH
11624: LD_STRING DH-Stim-2
11626: PPUSH
11627: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11631: LD_EXP 19
11635: PPUSH
11636: LD_STRING DG-Stim-3
11638: PPUSH
11639: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
11643: LD_EXP 18
11647: PPUSH
11648: LD_STRING DH-Stim-4
11650: PPUSH
11651: CALL_OW 88
// drugsResearched := true ;
11655: LD_ADDR_EXP 11
11659: PUSH
11660: LD_INT 1
11662: ST_TO_ADDR
// end ;
11663: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
11664: LD_EXP 11
11668: IFFALSE 11960
11670: GO 11672
11672: DISABLE
11673: LD_INT 0
11675: PPUSH
11676: PPUSH
11677: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11678: LD_ADDR_VAR 0 2
11682: PUSH
11683: LD_EXP 18
11687: PUSH
11688: LD_EXP 19
11692: PUSH
11693: LD_EXP 27
11697: PUSH
11698: LD_EXP 25
11702: PUSH
11703: LD_EXP 23
11707: PUSH
11708: LD_EXP 24
11712: PUSH
11713: LD_EXP 29
11717: PUSH
11718: LD_EXP 22
11722: PUSH
11723: LD_EXP 20
11727: PUSH
11728: LD_EXP 21
11732: PUSH
11733: LD_EXP 30
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11751: LD_ADDR_VAR 0 3
11755: PUSH
11756: LD_STRING H
11758: PUSH
11759: LD_STRING G
11761: PUSH
11762: LD_STRING O
11764: PUSH
11765: LD_STRING Mar
11767: PUSH
11768: LD_STRING K
11770: PUSH
11771: LD_STRING S
11773: PUSH
11774: LD_STRING Ks
11776: PUSH
11777: LD_STRING Kam
11779: PUSH
11780: LD_STRING M
11782: PUSH
11783: LD_STRING I
11785: PUSH
11786: LD_STRING A
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11802: LD_INT 35
11804: PPUSH
11805: CALL_OW 67
// for i := tmp downto 1 do
11809: LD_ADDR_VAR 0 1
11813: PUSH
11814: DOUBLE
11815: LD_VAR 0 2
11819: INC
11820: ST_TO_ADDR
11821: LD_INT 1
11823: PUSH
11824: FOR_DOWNTO
11825: IFFALSE 11951
// if IsDying ( tmp [ i ] ) then
11827: LD_VAR 0 2
11831: PUSH
11832: LD_VAR 0 1
11836: ARRAY
11837: PPUSH
11838: CALL_OW 303
11842: IFFALSE 11949
// begin DialogueOn ;
11844: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
11848: LD_VAR 0 2
11852: PUSH
11853: LD_VAR 0 1
11857: ARRAY
11858: PPUSH
11859: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
11863: LD_VAR 0 2
11867: PUSH
11868: LD_VAR 0 1
11872: ARRAY
11873: PPUSH
11874: LD_STRING D
11876: PUSH
11877: LD_VAR 0 3
11881: PUSH
11882: LD_VAR 0 1
11886: ARRAY
11887: STR
11888: PUSH
11889: LD_STRING -Stim-a-1
11891: STR
11892: PPUSH
11893: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
11897: LD_ADDR_VAR 0 2
11901: PUSH
11902: LD_VAR 0 2
11906: PPUSH
11907: LD_VAR 0 1
11911: PPUSH
11912: CALL_OW 3
11916: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
11917: LD_ADDR_VAR 0 3
11921: PUSH
11922: LD_VAR 0 3
11926: PPUSH
11927: LD_VAR 0 1
11931: PPUSH
11932: CALL_OW 3
11936: ST_TO_ADDR
// drugsTested := true ;
11937: LD_ADDR_EXP 6
11941: PUSH
11942: LD_INT 1
11944: ST_TO_ADDR
// DialogueOff ;
11945: CALL_OW 7
// end ;
11949: GO 11824
11951: POP
11952: POP
// until not tmp ;
11953: LD_VAR 0 2
11957: NOT
11958: IFFALSE 11802
// end ;
11960: PPOPN 3
11962: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , control_remote ] ] ) do
11963: LD_INT 22
11965: PUSH
11966: LD_INT 2
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 34
11975: PUSH
11976: LD_INT 31
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PPUSH
11987: CALL_OW 69
11991: PUSH
11992: LD_INT 22
11994: PUSH
11995: LD_INT 2
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: LD_INT 34
12004: PUSH
12005: LD_INT 2
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PPUSH
12016: CALL_OW 69
12020: AND
12021: IFFALSE 12034
12023: GO 12025
12025: DISABLE
// remoteControlConstructed := true ;
12026: LD_ADDR_EXP 12
12030: PUSH
12031: LD_INT 1
12033: ST_TO_ADDR
12034: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12035: LD_EXP 12
12039: IFFALSE 12316
12041: GO 12043
12043: DISABLE
12044: LD_INT 0
12046: PPUSH
12047: PPUSH
12048: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12049: LD_ADDR_VAR 0 2
12053: PUSH
12054: LD_EXP 18
12058: PUSH
12059: LD_EXP 19
12063: PUSH
12064: LD_EXP 27
12068: PUSH
12069: LD_EXP 25
12073: PUSH
12074: LD_EXP 23
12078: PUSH
12079: LD_EXP 24
12083: PUSH
12084: LD_EXP 29
12088: PUSH
12089: LD_EXP 22
12093: PUSH
12094: LD_EXP 20
12098: PUSH
12099: LD_EXP 21
12103: PUSH
12104: LD_EXP 30
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12122: LD_ADDR_VAR 0 3
12126: PUSH
12127: LD_STRING H
12129: PUSH
12130: LD_STRING G
12132: PUSH
12133: LD_STRING O
12135: PUSH
12136: LD_STRING Mar
12138: PUSH
12139: LD_STRING K
12141: PUSH
12142: LD_STRING S
12144: PUSH
12145: LD_STRING Ks
12147: PUSH
12148: LD_STRING Kam
12150: PUSH
12151: LD_STRING M
12153: PUSH
12154: LD_STRING I
12156: PUSH
12157: LD_STRING A
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12173: LD_INT 35
12175: PPUSH
12176: CALL_OW 67
// for i := tmp downto 1 do
12180: LD_ADDR_VAR 0 1
12184: PUSH
12185: DOUBLE
12186: LD_VAR 0 2
12190: INC
12191: ST_TO_ADDR
12192: LD_INT 1
12194: PUSH
12195: FOR_DOWNTO
12196: IFFALSE 12307
// if UnitsLinked ( tmp [ i ] ) then
12198: LD_VAR 0 2
12202: PUSH
12203: LD_VAR 0 1
12207: ARRAY
12208: PPUSH
12209: CALL_OW 432
12213: IFFALSE 12305
// begin DialogueOn ;
12215: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12219: LD_VAR 0 2
12223: PUSH
12224: LD_VAR 0 1
12228: ARRAY
12229: PPUSH
12230: LD_STRING D
12232: PUSH
12233: LD_VAR 0 3
12237: PUSH
12238: LD_VAR 0 1
12242: ARRAY
12243: STR
12244: PUSH
12245: LD_STRING -RC-a-1
12247: STR
12248: PPUSH
12249: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12253: LD_ADDR_VAR 0 2
12257: PUSH
12258: LD_VAR 0 2
12262: PPUSH
12263: LD_VAR 0 1
12267: PPUSH
12268: CALL_OW 3
12272: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12273: LD_ADDR_VAR 0 3
12277: PUSH
12278: LD_VAR 0 3
12282: PPUSH
12283: LD_VAR 0 1
12287: PPUSH
12288: CALL_OW 3
12292: ST_TO_ADDR
// DialogueOff ;
12293: CALL_OW 7
// remoteControlTested := true ;
12297: LD_ADDR_EXP 7
12301: PUSH
12302: LD_INT 1
12304: ST_TO_ADDR
// end ;
12305: GO 12195
12307: POP
12308: POP
// until not tmp ;
12309: LD_VAR 0 2
12313: NOT
12314: IFFALSE 12173
// end ;
12316: PPOPN 3
12318: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) and not InBattle ( 2 ) do
12319: LD_EXP 7
12323: PUSH
12324: LD_EXP 25
12328: PPUSH
12329: CALL_OW 302
12333: AND
12334: PUSH
12335: LD_INT 2
12337: PPUSH
12338: CALL_OW 463
12342: NOT
12343: AND
12344: IFFALSE 12373
12346: GO 12348
12348: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12349: LD_EXP 25
12353: PPUSH
12354: LD_STRING DMar-RC-a-2
12356: PPUSH
12357: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12361: LD_EXP 25
12365: PPUSH
12366: LD_STRING DMar-RC-a-3
12368: PPUSH
12369: CALL_OW 88
// end ;
12373: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12374: LD_EXP 14
12378: PUSH
12379: LD_EXP 18
12383: PPUSH
12384: LD_EXP 30
12388: PPUSH
12389: CALL_OW 296
12393: PUSH
12394: LD_INT 8
12396: LESS
12397: AND
12398: PUSH
12399: LD_INT 2
12401: PPUSH
12402: CALL_OW 463
12406: NOT
12407: AND
12408: PUSH
12409: LD_EXP 30
12413: PPUSH
12414: CALL_OW 302
12418: AND
12419: PUSH
12420: LD_EXP 18
12424: PPUSH
12425: CALL_OW 302
12429: AND
12430: IFFALSE 12608
12432: GO 12434
12434: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12435: LD_EXP 30
12439: PPUSH
12440: CALL_OW 310
12444: NOT
12445: IFFALSE 12461
// ComTurnUnit ( Aviradze , Heike ) ;
12447: LD_EXP 30
12451: PPUSH
12452: LD_EXP 18
12456: PPUSH
12457: CALL_OW 119
// if not IsInUnit ( Heike ) then
12461: LD_EXP 18
12465: PPUSH
12466: CALL_OW 310
12470: NOT
12471: IFFALSE 12487
// ComTurnUnit ( Heike , Aviradze ) ;
12473: LD_EXP 18
12477: PPUSH
12478: LD_EXP 30
12482: PPUSH
12483: CALL_OW 119
// wait ( 0 0$1 ) ;
12487: LD_INT 35
12489: PPUSH
12490: CALL_OW 67
// DialogueOn ;
12494: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12498: LD_EXP 30
12502: PPUSH
12503: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12507: LD_EXP 18
12511: PPUSH
12512: LD_STRING DH-Beria-1
12514: PPUSH
12515: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12519: LD_EXP 30
12523: PPUSH
12524: LD_STRING DA-Beria-2
12526: PPUSH
12527: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12531: LD_EXP 18
12535: PPUSH
12536: LD_STRING DH-Beria-3
12538: PPUSH
12539: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12543: LD_EXP 30
12547: PPUSH
12548: LD_STRING DA-Beria-4
12550: PPUSH
12551: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12555: LD_EXP 30
12559: PPUSH
12560: LD_STRING DA-Beria-5
12562: PPUSH
12563: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12567: LD_EXP 30
12571: PPUSH
12572: LD_STRING DA-Beria-6
12574: PPUSH
12575: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12579: LD_EXP 18
12583: PPUSH
12584: LD_STRING DA-Beria-7
12586: PPUSH
12587: CALL_OW 88
// DialogueOff ;
12591: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12595: LD_INT 52
12597: PPUSH
12598: LD_INT 2
12600: PPUSH
12601: LD_INT 1
12603: PPUSH
12604: CALL_OW 322
// end ;
12608: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
12609: LD_EXP 23
12613: PPUSH
12614: CALL_OW 256
12618: PUSH
12619: LD_INT 10
12621: LESS
12622: IFFALSE 12659
12624: GO 12626
12626: DISABLE
// begin DialogueOn ;
12627: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
12631: LD_EXP 23
12635: PPUSH
12636: LD_STRING DK-Kdeath-1
12638: PPUSH
12639: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
12643: LD_EXP 18
12647: PPUSH
12648: LD_STRING DH-Kdeath-2
12650: PPUSH
12651: CALL_OW 88
// DialogueOff ;
12655: CALL_OW 7
// end ;
12659: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
12660: LD_INT 2
12662: PPUSH
12663: LD_EXP 36
12667: PPUSH
12668: CALL 2906 0 2
12672: IFFALSE 12689
12674: GO 12676
12676: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
12677: LD_EXP 18
12681: PPUSH
12682: LD_STRING DH-Obj-1
12684: PPUSH
12685: CALL_OW 88
12689: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
12690: LD_INT 2
12692: PPUSH
12693: LD_EXP 37
12697: PPUSH
12698: CALL 2906 0 2
12702: IFFALSE 12719
12704: GO 12706
12706: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
12707: LD_EXP 18
12711: PPUSH
12712: LD_STRING DH-Obj-a-1
12714: PPUSH
12715: CALL_OW 88
12719: END
// every 5 5$30 trigger eastBaseCaptured do
12720: LD_EXP 10
12724: IFFALSE 12752
12726: GO 12728
12728: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
12729: LD_INT 4200
12731: PPUSH
12732: LD_INT 5250
12734: PPUSH
12735: CALL_OW 12
12739: PPUSH
12740: CALL_OW 67
// convoyStarted := true ;
12744: LD_ADDR_EXP 17
12748: PUSH
12749: LD_INT 1
12751: ST_TO_ADDR
// end ;
12752: END
// every 0 0$1 trigger convoyStarted do
12753: LD_EXP 17
12757: IFFALSE 12841
12759: GO 12761
12761: DISABLE
// begin DialogueOn ;
12762: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
12766: LD_EXP 26
12770: PPUSH
12771: LD_STRING DShar-Convoy-1
12773: PPUSH
12774: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
12778: LD_EXP 18
12782: PPUSH
12783: LD_STRING DH-Convoy-2
12785: PPUSH
12786: CALL_OW 88
// DialogueOff ;
12790: CALL_OW 7
// PrepareConvoy ;
12794: CALL 6053 0 0
// repeat wait ( rand ( 3 3$30 , 6 6$30 ) ) ;
12798: LD_INT 7350
12800: PPUSH
12801: LD_INT 13650
12803: PPUSH
12804: CALL_OW 12
12808: PPUSH
12809: CALL_OW 67
// PrepareConvoy ;
12813: CALL 6053 0 0
// convoyCounter := convoyCounter - 1 ;
12817: LD_ADDR_EXP 16
12821: PUSH
12822: LD_EXP 16
12826: PUSH
12827: LD_INT 1
12829: MINUS
12830: ST_TO_ADDR
// until convoyCounter = 0 ;
12831: LD_EXP 16
12835: PUSH
12836: LD_INT 0
12838: EQUAL
12839: IFFALSE 12798
// end ;
12841: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
12842: LD_EXP 15
12846: PUSH
12847: LD_INT 10
12849: GREATEREQUAL
12850: IFFALSE 12867
12852: GO 12854
12854: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
12855: LD_EXP 28
12859: PPUSH
12860: LD_STRING DOm-Fail-1
12862: PPUSH
12863: CALL_OW 94
12867: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
12868: LD_EXP 36
12872: NOT
12873: PUSH
12874: LD_EXP 37
12878: NOT
12879: AND
12880: IFFALSE 12892
12882: GO 12884
12884: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
12885: LD_STRING RaiderDone
12887: PPUSH
12888: CALL_OW 337
12892: END
// every 0 0$1 trigger convoyCounter = 0 and not ruConvoySquad do var tmp ;
12893: LD_EXP 16
12897: PUSH
12898: LD_INT 0
12900: EQUAL
12901: PUSH
12902: LD_EXP 38
12906: NOT
12907: AND
12908: IFFALSE 13674
12910: GO 12912
12912: DISABLE
12913: LD_INT 0
12915: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
12916: LD_STRING ReinforcementsDone
12918: PPUSH
12919: CALL_OW 337
// InGameOn ;
12923: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
12927: LD_EXP 18
12931: PPUSH
12932: LD_STRING DH-end-1
12934: PPUSH
12935: CALL_OW 88
// wait ( 0 0$2 ) ;
12939: LD_INT 70
12941: PPUSH
12942: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
12946: LD_EXP 26
12950: PPUSH
12951: LD_STRING DShar-end-2
12953: PPUSH
12954: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
12958: LD_EXP 36
12962: NOT
12963: PUSH
12964: LD_EXP 37
12968: NOT
12969: AND
12970: IFFALSE 12986
// begin Say ( Heike , DH-end-3 ) ;
12972: LD_EXP 18
12976: PPUSH
12977: LD_STRING DH-end-3
12979: PPUSH
12980: CALL_OW 88
// end else
12984: GO 13083
// begin Say ( Heike , DH-end-a-3 ) ;
12986: LD_EXP 18
12990: PPUSH
12991: LD_STRING DH-end-a-3
12993: PPUSH
12994: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
12998: LD_EXP 26
13002: PPUSH
13003: LD_STRING DShar-end-a-4
13005: PPUSH
13006: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13010: LD_EXP 18
13014: PPUSH
13015: LD_STRING DH-end-a-5
13017: PPUSH
13018: CALL_OW 88
// InGameOff ;
13022: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13026: LD_INT 35
13028: PPUSH
13029: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13033: LD_INT 22
13035: PUSH
13036: LD_INT 3
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 21
13045: PUSH
13046: LD_INT 1
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PPUSH
13057: CALL_OW 69
13061: PUSH
13062: LD_INT 0
13064: EQUAL
13065: IFFALSE 13026
// InGameOn ;
13067: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13071: LD_EXP 18
13075: PPUSH
13076: LD_STRING DH-end-a-6
13078: PPUSH
13079: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13083: LD_EXP 26
13087: PPUSH
13088: LD_STRING DShar-end-3
13090: PPUSH
13091: CALL_OW 94
// if drugsTested then
13095: LD_EXP 6
13099: IFFALSE 13113
// AddMedal ( med1 , 1 ) else
13101: LD_STRING med1
13103: PPUSH
13104: LD_INT 1
13106: PPUSH
13107: CALL_OW 101
13111: GO 13124
// AddMedal ( med1 , - 1 ) ;
13113: LD_STRING med1
13115: PPUSH
13116: LD_INT 1
13118: NEG
13119: PPUSH
13120: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 then
13124: LD_INT 22
13126: PUSH
13127: LD_INT 2
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PUSH
13134: LD_INT 33
13136: PUSH
13137: LD_INT 2
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PPUSH
13148: CALL_OW 69
13152: PUSH
13153: LD_INT 3
13155: GREATEREQUAL
13156: PUSH
13157: LD_INT 22
13159: PUSH
13160: LD_INT 2
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PUSH
13167: LD_INT 34
13169: PUSH
13170: LD_INT 31
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: PPUSH
13181: CALL_OW 69
13185: PUSH
13186: LD_INT 2
13188: GREATEREQUAL
13189: AND
13190: IFFALSE 13204
// AddMedal ( med2 , 1 ) else
13192: LD_STRING med2
13194: PPUSH
13195: LD_INT 1
13197: PPUSH
13198: CALL_OW 101
13202: GO 13215
// AddMedal ( med2 , - 1 ) ;
13204: LD_STRING med2
13206: PPUSH
13207: LD_INT 1
13209: NEG
13210: PPUSH
13211: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
13215: LD_EXP 15
13219: PUSH
13220: LD_INT 10
13222: PUSH
13223: LD_INT 8
13225: PUSH
13226: LD_INT 6
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: LIST
13233: PUSH
13234: LD_OWVAR 67
13238: ARRAY
13239: LESS
13240: IFFALSE 13254
// AddMedal ( med3 , 1 ) else
13242: LD_STRING med3
13244: PPUSH
13245: LD_INT 1
13247: PPUSH
13248: CALL_OW 101
13252: GO 13265
// AddMedal ( med3 , - 1 ) ;
13254: LD_STRING med3
13256: PPUSH
13257: LD_INT 1
13259: NEG
13260: PPUSH
13261: CALL_OW 101
// GiveMedals ( MAIN ) ;
13265: LD_STRING MAIN
13267: PPUSH
13268: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13272: LD_INT 22
13274: PUSH
13275: LD_INT 2
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 23
13284: PUSH
13285: LD_INT 2
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: LD_INT 21
13294: PUSH
13295: LD_INT 1
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: LIST
13306: PPUSH
13307: CALL_OW 69
13311: PPUSH
13312: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13316: LD_EXP 15
13320: PPUSH
13321: LD_STRING 05_ConvoySavedCounter
13323: PPUSH
13324: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13328: LD_EXP 13
13332: PPUSH
13333: LD_STRING 05_Radar
13335: PPUSH
13336: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13340: LD_EXP 6
13344: PPUSH
13345: LD_STRING 05_DrugsTested
13347: PPUSH
13348: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13352: LD_INT 22
13354: PUSH
13355: LD_INT 2
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 33
13364: PUSH
13365: LD_INT 2
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PPUSH
13376: CALL_OW 69
13380: PUSH
13381: LD_INT 3
13383: GREATEREQUAL
13384: PUSH
13385: LD_INT 22
13387: PUSH
13388: LD_INT 2
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 34
13397: PUSH
13398: LD_INT 31
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PPUSH
13409: CALL_OW 69
13413: PUSH
13414: LD_INT 2
13416: GREATEREQUAL
13417: AND
13418: PPUSH
13419: LD_STRING 05_RemoteControl
13421: PPUSH
13422: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
13426: LD_EXP 18
13430: PPUSH
13431: LD_STRING 05_Heike
13433: PPUSH
13434: CALL_OW 38
// if Aviradze then
13438: LD_EXP 30
13442: IFFALSE 13456
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
13444: LD_EXP 30
13448: PPUSH
13449: LD_STRING 05_Aviradze
13451: PPUSH
13452: CALL_OW 38
// if Ibrahim then
13456: LD_EXP 21
13460: IFFALSE 13474
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
13462: LD_EXP 21
13466: PPUSH
13467: LD_STRING 05_Ibrahim
13469: PPUSH
13470: CALL_OW 38
// if Kamil then
13474: LD_EXP 22
13478: IFFALSE 13492
// SaveCharacters ( Kamil , 05_Kamil ) ;
13480: LD_EXP 22
13484: PPUSH
13485: LD_STRING 05_Kamil
13487: PPUSH
13488: CALL_OW 38
// if Sophia then
13492: LD_EXP 24
13496: IFFALSE 13510
// SaveCharacters ( Sophia , 05_Sophia ) ;
13498: LD_EXP 24
13502: PPUSH
13503: LD_STRING 05_Sophia
13505: PPUSH
13506: CALL_OW 38
// if Kaia then
13510: LD_EXP 23
13514: IFFALSE 13528
// SaveCharacters ( Kaia , 05_Kaia ) ;
13516: LD_EXP 23
13520: PPUSH
13521: LD_STRING 05_Kaia
13523: PPUSH
13524: CALL_OW 38
// if Givi then
13528: LD_EXP 19
13532: IFFALSE 13546
// SaveCharacters ( Givi , 05_Givi ) ;
13534: LD_EXP 19
13538: PPUSH
13539: LD_STRING 05_Givi
13541: PPUSH
13542: CALL_OW 38
// if Mike then
13546: LD_EXP 20
13550: IFFALSE 13564
// SaveCharacters ( Mike , 05_Mike ) ;
13552: LD_EXP 20
13556: PPUSH
13557: LD_STRING 05_Mike
13559: PPUSH
13560: CALL_OW 38
// if Markov then
13564: LD_EXP 25
13568: IFFALSE 13582
// SaveCharacters ( Markov , 05_Markov ) ;
13570: LD_EXP 25
13574: PPUSH
13575: LD_STRING 05_Markov
13577: PPUSH
13578: CALL_OW 38
// if Kurt then
13582: LD_EXP 29
13586: IFFALSE 13600
// SaveCharacters ( Kurt , 05_Kurt ) ;
13588: LD_EXP 29
13592: PPUSH
13593: LD_STRING 05_Kurt
13595: PPUSH
13596: CALL_OW 38
// if heikeSecondSquad then
13600: LD_EXP 31
13604: IFFALSE 13618
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
13606: LD_EXP 31
13610: PPUSH
13611: LD_STRING 05_others
13613: PPUSH
13614: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
13618: LD_ADDR_VAR 0 1
13622: PUSH
13623: LD_INT 22
13625: PUSH
13626: LD_INT 2
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: LD_INT 23
13635: PUSH
13636: LD_INT 0
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PPUSH
13647: CALL_OW 69
13651: ST_TO_ADDR
// if tmp then
13652: LD_VAR 0 1
13656: IFFALSE 13670
// SaveCharacters ( tmp , 05_apes ) ;
13658: LD_VAR 0 1
13662: PPUSH
13663: LD_STRING 05_apes
13665: PPUSH
13666: CALL_OW 38
// YouWin ;
13670: CALL_OW 103
// end ; end_of_file
13674: PPOPN 1
13676: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 20 do
13677: LD_EXP 9
13681: PUSH
13682: LD_INT 13
13684: PPUSH
13685: LD_INT 1
13687: PPUSH
13688: CALL_OW 287
13692: PUSH
13693: LD_INT 20
13695: LESS
13696: AND
13697: IFFALSE 13724
13699: GO 13701
13701: DISABLE
// begin enable ;
13702: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
13703: LD_INT 1
13705: PPUSH
13706: LD_INT 5
13708: PPUSH
13709: CALL_OW 12
13713: PPUSH
13714: LD_INT 13
13716: PPUSH
13717: LD_INT 1
13719: PPUSH
13720: CALL_OW 55
// end ; end_of_file
13724: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
13725: GO 13727
13727: DISABLE
// begin ru_radar := 98 ;
13728: LD_ADDR_EXP 41
13732: PUSH
13733: LD_INT 98
13735: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
13736: LD_ADDR_EXP 42
13740: PUSH
13741: LD_INT 89
13743: ST_TO_ADDR
// us_hack := 99 ;
13744: LD_ADDR_EXP 43
13748: PUSH
13749: LD_INT 99
13751: ST_TO_ADDR
// us_artillery := 97 ;
13752: LD_ADDR_EXP 44
13756: PUSH
13757: LD_INT 97
13759: ST_TO_ADDR
// ar_bio_bomb := 91 ;
13760: LD_ADDR_EXP 45
13764: PUSH
13765: LD_INT 91
13767: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
13768: LD_ADDR_EXP 46
13772: PUSH
13773: LD_INT 92
13775: ST_TO_ADDR
// tech_Artillery := 80 ;
13776: LD_ADDR_EXP 47
13780: PUSH
13781: LD_INT 80
13783: ST_TO_ADDR
// tech_RadMat := 81 ;
13784: LD_ADDR_EXP 48
13788: PUSH
13789: LD_INT 81
13791: ST_TO_ADDR
// tech_BasicTools := 82 ;
13792: LD_ADDR_EXP 49
13796: PUSH
13797: LD_INT 82
13799: ST_TO_ADDR
// tech_Cargo := 83 ;
13800: LD_ADDR_EXP 50
13804: PUSH
13805: LD_INT 83
13807: ST_TO_ADDR
// tech_Track := 84 ;
13808: LD_ADDR_EXP 51
13812: PUSH
13813: LD_INT 84
13815: ST_TO_ADDR
// tech_Crane := 85 ;
13816: LD_ADDR_EXP 52
13820: PUSH
13821: LD_INT 85
13823: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13824: LD_ADDR_EXP 53
13828: PUSH
13829: LD_INT 86
13831: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13832: LD_ADDR_EXP 54
13836: PUSH
13837: LD_INT 87
13839: ST_TO_ADDR
// end ;
13840: END
