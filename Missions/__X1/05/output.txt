// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 740 0 2
// PrepareArabian ;
  31: CALL 1433 0 0
// PrepareRussian ;
  35: CALL 3031 0 0
// Action ;
  39: CALL 7713 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 210: LD_ADDR_EXP 14
 214: PUSH
 215: LD_STRING 04_1_RuLabCaptured
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 30
 225: ST_TO_ADDR
// captureCounter := 0 ;
 226: LD_ADDR_EXP 18
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 234: LD_ADDR_EXP 19
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// flamethrowerBuilt := false ;
 242: LD_ADDR_EXP 20
 246: PUSH
 247: LD_INT 0
 249: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 250: LD_ADDR_OWVAR 79
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// end ;
 258: LD_VAR 0 1
 262: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 263: LD_EXP 10
 267: NOT
 268: PUSH
 269: LD_EXP 9
 273: NOT
 274: AND
 275: PUSH
 276: LD_EXP 39
 280: NOT
 281: AND
 282: PUSH
 283: LD_EXP 40
 287: NOT
 288: AND
 289: IFFALSE 301
 291: GO 293
 293: DISABLE
// SetAchievement ( ACH_EXT ) ;
 294: LD_STRING ACH_EXT
 296: PPUSH
 297: CALL_OW 543
 301: END
// every 0 0$1 trigger captureCounter >= 6 do
 302: LD_EXP 18
 306: PUSH
 307: LD_INT 6
 309: GREATEREQUAL
 310: IFFALSE 322
 312: GO 314
 314: DISABLE
// SetAchievement ( ACH_KEY ) ;
 315: LD_STRING ACH_KEY
 317: PPUSH
 318: CALL_OW 543
 322: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 323: LD_EXP 19
 327: PUSH
 328: LD_INT 3
 330: GREATEREQUAL
 331: IFFALSE 343
 333: GO 335
 335: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 336: LD_STRING ACH_CHEM
 338: PPUSH
 339: CALL_OW 543
 343: END
// every 0 0$1 trigger debug do var i ;
 344: LD_EXP 1
 348: IFFALSE 432
 350: GO 352
 352: DISABLE
 353: LD_INT 0
 355: PPUSH
// begin enable ;
 356: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 357: LD_ADDR_VAR 0 1
 361: PUSH
 362: LD_INT 22
 364: PUSH
 365: LD_INT 2
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: PUSH
 372: LD_INT 3
 374: PUSH
 375: LD_INT 21
 377: PUSH
 378: LD_INT 3
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PPUSH
 393: CALL_OW 69
 397: PUSH
 398: FOR_IN
 399: IFFALSE 430
// if GetLives ( i ) < 1000 then
 401: LD_VAR 0 1
 405: PPUSH
 406: CALL_OW 256
 410: PUSH
 411: LD_INT 1000
 413: LESS
 414: IFFALSE 428
// SetLives ( i , 1000 ) ;
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 1000
 423: PPUSH
 424: CALL_OW 234
 428: GO 398
 430: POP
 431: POP
// end ; end_of_file
 432: PPOPN 1
 434: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 435: LD_INT 0
 437: PPUSH
// uc_side := side ;
 438: LD_ADDR_OWVAR 20
 442: PUSH
 443: LD_VAR 0 1
 447: ST_TO_ADDR
// uc_nation := nation ;
 448: LD_ADDR_OWVAR 21
 452: PUSH
 453: LD_VAR 0 2
 457: ST_TO_ADDR
// vc_chassis := chassis ;
 458: LD_ADDR_OWVAR 37
 462: PUSH
 463: LD_VAR 0 3
 467: ST_TO_ADDR
// vc_engine := engine ;
 468: LD_ADDR_OWVAR 39
 472: PUSH
 473: LD_VAR 0 4
 477: ST_TO_ADDR
// vc_control := control ;
 478: LD_ADDR_OWVAR 38
 482: PUSH
 483: LD_VAR 0 5
 487: ST_TO_ADDR
// vc_weapon := weapon ;
 488: LD_ADDR_OWVAR 40
 492: PUSH
 493: LD_VAR 0 6
 497: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 498: LD_ADDR_OWVAR 41
 502: PUSH
 503: LD_VAR 0 7
 507: ST_TO_ADDR
// result := CreateVehicle ;
 508: LD_ADDR_VAR 0 8
 512: PUSH
 513: CALL_OW 45
 517: ST_TO_ADDR
// end ;
 518: LD_VAR 0 8
 522: RET
// export function SayX ( units , ident ) ; var i ; begin
 523: LD_INT 0
 525: PPUSH
 526: PPUSH
// result := false ;
 527: LD_ADDR_VAR 0 3
 531: PUSH
 532: LD_INT 0
 534: ST_TO_ADDR
// if not units then
 535: LD_VAR 0 1
 539: NOT
 540: IFFALSE 544
// exit ;
 542: GO 598
// for i in units do
 544: LD_ADDR_VAR 0 4
 548: PUSH
 549: LD_VAR 0 1
 553: PUSH
 554: FOR_IN
 555: IFFALSE 596
// if IsOk ( i ) then
 557: LD_VAR 0 4
 561: PPUSH
 562: CALL_OW 302
 566: IFFALSE 594
// begin Say ( i , ident ) ;
 568: LD_VAR 0 4
 572: PPUSH
 573: LD_VAR 0 2
 577: PPUSH
 578: CALL_OW 88
// result := i ;
 582: LD_ADDR_VAR 0 3
 586: PUSH
 587: LD_VAR 0 4
 591: ST_TO_ADDR
// break ;
 592: GO 596
// end ;
 594: GO 554
 596: POP
 597: POP
// end ;
 598: LD_VAR 0 3
 602: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 603: LD_INT 0
 605: PPUSH
 606: PPUSH
// InitUc ;
 607: CALL_OW 18
// InitHc ;
 611: CALL_OW 19
// uc_side := 0 ;
 615: LD_ADDR_OWVAR 20
 619: PUSH
 620: LD_INT 0
 622: ST_TO_ADDR
// uc_nation := 0 ;
 623: LD_ADDR_OWVAR 21
 627: PUSH
 628: LD_INT 0
 630: ST_TO_ADDR
// for i = 1 to amount do
 631: LD_ADDR_VAR 0 4
 635: PUSH
 636: DOUBLE
 637: LD_INT 1
 639: DEC
 640: ST_TO_ADDR
 641: LD_VAR 0 2
 645: PUSH
 646: FOR_TO
 647: IFFALSE 729
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 649: LD_ADDR_OWVAR 29
 653: PUSH
 654: LD_INT 9
 656: PPUSH
 657: LD_INT 12
 659: PPUSH
 660: CALL_OW 12
 664: PUSH
 665: LD_INT 9
 667: PPUSH
 668: LD_INT 12
 670: PPUSH
 671: CALL_OW 12
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 680: LD_ADDR_OWVAR 35
 684: PUSH
 685: LD_INT 1
 687: NEG
 688: PPUSH
 689: LD_INT 1
 691: PPUSH
 692: CALL_OW 12
 696: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 697: LD_INT 0
 699: PPUSH
 700: LD_INT 12
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 646
 729: POP
 730: POP
// InitHc ;
 731: CALL_OW 19
// end ;
 735: LD_VAR 0 3
 739: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 740: LD_INT 0
 742: PPUSH
 743: PPUSH
// uc_side := 0 ;
 744: LD_ADDR_OWVAR 20
 748: PUSH
 749: LD_INT 0
 751: ST_TO_ADDR
// uc_nation := 0 ;
 752: LD_ADDR_OWVAR 21
 756: PUSH
 757: LD_INT 0
 759: ST_TO_ADDR
// for i := 1 to 3 do
 760: LD_ADDR_VAR 0 4
 764: PUSH
 765: DOUBLE
 766: LD_INT 1
 768: DEC
 769: ST_TO_ADDR
 770: LD_INT 3
 772: PUSH
 773: FOR_TO
 774: IFFALSE 811
// begin hc_class := 21 ;
 776: LD_ADDR_OWVAR 28
 780: PUSH
 781: LD_INT 21
 783: ST_TO_ADDR
// hc_gallery :=  ;
 784: LD_ADDR_OWVAR 33
 788: PUSH
 789: LD_STRING 
 791: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 792: CALL_OW 44
 796: PPUSH
 797: LD_VAR 0 1
 801: PPUSH
 802: LD_INT 0
 804: PPUSH
 805: CALL_OW 49
// end ;
 809: GO 773
 811: POP
 812: POP
// for i := 1 to 3 do
 813: LD_ADDR_VAR 0 4
 817: PUSH
 818: DOUBLE
 819: LD_INT 1
 821: DEC
 822: ST_TO_ADDR
 823: LD_INT 3
 825: PUSH
 826: FOR_TO
 827: IFFALSE 864
// begin hc_class := 18 ;
 829: LD_ADDR_OWVAR 28
 833: PUSH
 834: LD_INT 18
 836: ST_TO_ADDR
// hc_gallery :=  ;
 837: LD_ADDR_OWVAR 33
 841: PUSH
 842: LD_STRING 
 844: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 845: CALL_OW 44
 849: PPUSH
 850: LD_VAR 0 1
 854: PPUSH
 855: LD_INT 0
 857: PPUSH
 858: CALL_OW 49
// end ;
 862: GO 826
 864: POP
 865: POP
// for i := 1 to 3 do
 866: LD_ADDR_VAR 0 4
 870: PUSH
 871: DOUBLE
 872: LD_INT 1
 874: DEC
 875: ST_TO_ADDR
 876: LD_INT 3
 878: PUSH
 879: FOR_TO
 880: IFFALSE 917
// begin hc_class := 13 ;
 882: LD_ADDR_OWVAR 28
 886: PUSH
 887: LD_INT 13
 889: ST_TO_ADDR
// hc_gallery :=  ;
 890: LD_ADDR_OWVAR 33
 894: PUSH
 895: LD_STRING 
 897: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 898: CALL_OW 44
 902: PPUSH
 903: LD_VAR 0 1
 907: PPUSH
 908: LD_INT 0
 910: PPUSH
 911: CALL_OW 49
// end ;
 915: GO 879
 917: POP
 918: POP
// for i := 1 to 4 do
 919: LD_ADDR_VAR 0 4
 923: PUSH
 924: DOUBLE
 925: LD_INT 1
 927: DEC
 928: ST_TO_ADDR
 929: LD_INT 4
 931: PUSH
 932: FOR_TO
 933: IFFALSE 970
// begin hc_class := class_frog ;
 935: LD_ADDR_OWVAR 28
 939: PUSH
 940: LD_INT 19
 942: ST_TO_ADDR
// hc_gallery :=  ;
 943: LD_ADDR_OWVAR 33
 947: PUSH
 948: LD_STRING 
 950: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 951: CALL_OW 44
 955: PPUSH
 956: LD_VAR 0 2
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end ;
 968: GO 932
 970: POP
 971: POP
// end ;
 972: LD_VAR 0 3
 976: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 977: LD_INT 0
 979: PPUSH
 980: PPUSH
 981: PPUSH
// if not observer or not unit then
 982: LD_VAR 0 1
 986: NOT
 987: PUSH
 988: LD_VAR 0 2
 992: NOT
 993: OR
 994: IFFALSE 998
// exit ;
 996: GO 1046
// if not See ( GetSide ( observer ) , unit ) then
 998: LD_VAR 0 1
1002: PPUSH
1003: CALL_OW 255
1007: PPUSH
1008: LD_VAR 0 2
1012: PPUSH
1013: CALL_OW 292
1017: NOT
1018: IFFALSE 1022
// exit ;
1020: GO 1046
// result := GetDistUnits ( observer , unit ) < 12 ;
1022: LD_ADDR_VAR 0 3
1026: PUSH
1027: LD_VAR 0 1
1031: PPUSH
1032: LD_VAR 0 2
1036: PPUSH
1037: CALL_OW 296
1041: PUSH
1042: LD_INT 12
1044: LESS
1045: ST_TO_ADDR
// end ;
1046: LD_VAR 0 3
1050: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1051: LD_INT 0
1053: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1054: LD_VAR 0 2
1058: PUSH
1059: LD_INT 1
1061: ARRAY
1062: PPUSH
1063: LD_VAR 0 2
1067: PUSH
1068: LD_INT 2
1070: ARRAY
1071: PPUSH
1072: CALL_OW 488
1076: PUSH
1077: LD_VAR 0 2
1081: PUSH
1082: LD_INT 1
1084: ARRAY
1085: PPUSH
1086: LD_VAR 0 2
1090: PUSH
1091: LD_INT 2
1093: ARRAY
1094: PPUSH
1095: CALL_OW 428
1099: PUSH
1100: LD_INT 0
1102: EQUAL
1103: AND
1104: IFFALSE 1138
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1106: LD_VAR 0 1
1110: PPUSH
1111: LD_VAR 0 2
1115: PUSH
1116: LD_INT 1
1118: ARRAY
1119: PPUSH
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 2
1127: ARRAY
1128: PPUSH
1129: LD_VAR 0 3
1133: PPUSH
1134: CALL_OW 48
// end ;
1138: LD_VAR 0 4
1142: RET
// export function ReverseArray ( array ) ; var i ; begin
1143: LD_INT 0
1145: PPUSH
1146: PPUSH
// if not array then
1147: LD_VAR 0 1
1151: NOT
1152: IFFALSE 1156
// exit ;
1154: GO 1214
// result := [ ] ;
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: EMPTY
1162: ST_TO_ADDR
// for i := 1 to array do
1163: LD_ADDR_VAR 0 3
1167: PUSH
1168: DOUBLE
1169: LD_INT 1
1171: DEC
1172: ST_TO_ADDR
1173: LD_VAR 0 1
1177: PUSH
1178: FOR_TO
1179: IFFALSE 1212
// result := Insert ( result , 1 , array [ i ] ) ;
1181: LD_ADDR_VAR 0 2
1185: PUSH
1186: LD_VAR 0 2
1190: PPUSH
1191: LD_INT 1
1193: PPUSH
1194: LD_VAR 0 1
1198: PUSH
1199: LD_VAR 0 3
1203: ARRAY
1204: PPUSH
1205: CALL_OW 2
1209: ST_TO_ADDR
1210: GO 1178
1212: POP
1213: POP
// end ;
1214: LD_VAR 0 2
1218: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1219: LD_INT 0
1221: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1222: LD_VAR 0 1
1226: PPUSH
1227: LD_VAR 0 2
1231: PPUSH
1232: LD_VAR 0 3
1236: PPUSH
1237: LD_VAR 0 4
1241: PPUSH
1242: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1246: LD_VAR 0 1
1250: PPUSH
1251: LD_VAR 0 2
1255: PPUSH
1256: LD_VAR 0 3
1260: PPUSH
1261: CALL_OW 331
// end ;
1265: LD_VAR 0 5
1269: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1270: LD_INT 0
1272: PPUSH
// if not units then
1273: LD_VAR 0 1
1277: NOT
1278: IFFALSE 1282
// exit ;
1280: GO 1365
// result := true ;
1282: LD_ADDR_VAR 0 4
1286: PUSH
1287: LD_INT 1
1289: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1290: LD_VAR 0 1
1294: PPUSH
1295: LD_INT 26
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PPUSH
1305: CALL_OW 72
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: LD_VAR 0 2
1318: PPUSH
1319: CALL_OW 88
1323: NOT
1324: IFFALSE 1365
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1326: LD_ADDR_VAR 0 4
1330: PUSH
1331: LD_VAR 0 1
1335: PPUSH
1336: LD_INT 26
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: PPUSH
1346: CALL_OW 72
1350: PUSH
1351: LD_INT 1
1353: ARRAY
1354: PPUSH
1355: LD_VAR 0 3
1359: PPUSH
1360: CALL_OW 88
1364: ST_TO_ADDR
// end ;
1365: LD_VAR 0 4
1369: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1370: LD_INT 0
1372: PPUSH
1373: PPUSH
// if not group then
1374: LD_VAR 0 2
1378: NOT
1379: IFFALSE 1383
// exit ;
1381: GO 1428
// for i in group do
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: LD_VAR 0 2
1392: PUSH
1393: FOR_IN
1394: IFFALSE 1426
// if See ( side , i ) then
1396: LD_VAR 0 1
1400: PPUSH
1401: LD_VAR 0 4
1405: PPUSH
1406: CALL_OW 292
1410: IFFALSE 1424
// begin result := true ;
1412: LD_ADDR_VAR 0 3
1416: PUSH
1417: LD_INT 1
1419: ST_TO_ADDR
// exit ;
1420: POP
1421: POP
1422: GO 1428
// end ;
1424: GO 1393
1426: POP
1427: POP
// end ; end_of_file
1428: LD_VAR 0 3
1432: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1433: LD_INT 0
1435: PPUSH
1436: PPUSH
// uc_side := 2 ;
1437: LD_ADDR_OWVAR 20
1441: PUSH
1442: LD_INT 2
1444: ST_TO_ADDR
// uc_nation := 2 ;
1445: LD_ADDR_OWVAR 21
1449: PUSH
1450: LD_INT 2
1452: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 21
1457: PUSH
1458: LD_STRING Heike
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 31265 0 3
1476: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 24
1481: PUSH
1482: LD_STRING Ibrahim
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 31265 0 3
1500: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 22
1505: PUSH
1506: LD_STRING Givi
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 31265 0 3
1524: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1525: LD_ADDR_EXP 25
1529: PUSH
1530: LD_STRING Kamil
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 2
1543: PPUSH
1544: CALL 31265 0 3
1548: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1549: LD_ADDR_EXP 26
1553: PUSH
1554: LD_STRING Kaia
1556: PPUSH
1557: LD_EXP 1
1561: NOT
1562: PPUSH
1563: LD_EXP 2
1567: PPUSH
1568: CALL 31265 0 3
1572: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1573: LD_ADDR_EXP 27
1577: PUSH
1578: LD_STRING Sophia
1580: PPUSH
1581: LD_EXP 1
1585: NOT
1586: PPUSH
1587: LD_EXP 2
1591: PPUSH
1592: CALL 31265 0 3
1596: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1597: LD_ADDR_EXP 28
1601: PUSH
1602: LD_STRING Markov
1604: PPUSH
1605: LD_EXP 1
1609: NOT
1610: PPUSH
1611: LD_EXP 2
1615: PPUSH
1616: CALL 31265 0 3
1620: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1621: LD_ADDR_EXP 33
1625: PUSH
1626: LD_STRING Aviradze
1628: PPUSH
1629: LD_EXP 1
1633: NOT
1634: PPUSH
1635: LD_EXP 2
1639: PPUSH
1640: CALL 31265 0 3
1644: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1645: LD_ADDR_EXP 32
1649: PUSH
1650: LD_STRING Kurt
1652: PPUSH
1653: LD_EXP 1
1657: NOT
1658: PPUSH
1659: LD_EXP 2
1663: PPUSH
1664: CALL 31265 0 3
1668: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1669: LD_ADDR_EXP 23
1673: PUSH
1674: LD_STRING Mike
1676: PPUSH
1677: LD_EXP 1
1681: NOT
1682: PPUSH
1683: LD_EXP 2
1687: PPUSH
1688: CALL 31265 0 3
1692: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1693: LD_ADDR_EXP 30
1697: PUSH
1698: LD_STRING Olaf
1700: PPUSH
1701: LD_INT 0
1703: PPUSH
1704: LD_STRING 
1706: PPUSH
1707: CALL 31265 0 3
1711: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1712: LD_ADDR_EXP 34
1716: PUSH
1717: LD_STRING 04_2_others
1719: PPUSH
1720: CALL_OW 31
1724: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1725: LD_ADDR_EXP 36
1729: PUSH
1730: LD_STRING 04_2_apes
1732: PPUSH
1733: CALL_OW 31
1737: ST_TO_ADDR
// if hasFlamethrower then
1738: LD_EXP 3
1742: IFFALSE 1973
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1744: LD_INT 70
1746: PPUSH
1747: LD_INT 2
1749: PPUSH
1750: LD_INT 2
1752: PPUSH
1753: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
1757: LD_ADDR_EXP 35
1761: PUSH
1762: LD_INT 13
1764: PUSH
1765: LD_INT 1
1767: PUSH
1768: LD_INT 1
1770: PUSH
1771: LD_INT 27
1773: PUSH
1774: LD_INT 2
1776: PUSH
1777: LD_INT 1000
1779: PUSH
1780: LD_INT 0
1782: PUSH
1783: LD_INT 0
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: PUSH
1799: LD_INT 13
1801: PUSH
1802: LD_INT 1
1804: PUSH
1805: LD_INT 1
1807: PUSH
1808: LD_INT 25
1810: PUSH
1811: LD_INT 2
1813: PUSH
1814: LD_INT 1000
1816: PUSH
1817: LD_INT 0
1819: PUSH
1820: LD_INT 0
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: LD_INT 13
1838: PUSH
1839: LD_INT 1
1841: PUSH
1842: LD_INT 1
1844: PUSH
1845: LD_INT 26
1847: PUSH
1848: LD_INT 2
1850: PUSH
1851: LD_INT 1000
1853: PUSH
1854: LD_INT 0
1856: PUSH
1857: LD_INT 0
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 13
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 1
1881: PUSH
1882: LD_INT 27
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: LD_INT 1000
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: LD_INT 0
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 32
1921: PUSH
1922: LD_INT 2
1924: PUSH
1925: LD_INT 1000
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: LD_INT 60
1933: PUSH
1934: LD_INT 40
1936: PUSH
1937: LD_INT 20
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: PUSH
1945: LD_OWVAR 67
1949: ARRAY
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// end else
1971: GO 2187
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
1973: LD_ADDR_EXP 35
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 1
1986: PUSH
1987: LD_INT 25
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 1000
1995: PUSH
1996: LD_INT 0
1998: PUSH
1999: LD_INT 0
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 13
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: LD_INT 27
2026: PUSH
2027: LD_INT 2
2029: PUSH
2030: LD_INT 1000
2032: PUSH
2033: LD_INT 0
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: PUSH
2052: LD_INT 13
2054: PUSH
2055: LD_INT 1
2057: PUSH
2058: LD_INT 1
2060: PUSH
2061: LD_INT 24
2063: PUSH
2064: LD_INT 2
2066: PUSH
2067: LD_INT 1000
2069: PUSH
2070: LD_INT 0
2072: PUSH
2073: LD_INT 0
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 13
2091: PUSH
2092: LD_INT 1
2094: PUSH
2095: LD_INT 1
2097: PUSH
2098: LD_INT 27
2100: PUSH
2101: LD_INT 2
2103: PUSH
2104: LD_INT 1000
2106: PUSH
2107: LD_INT 0
2109: PUSH
2110: LD_INT 0
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 13
2128: PUSH
2129: LD_INT 1
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: LD_INT 32
2137: PUSH
2138: LD_INT 2
2140: PUSH
2141: LD_INT 1000
2143: PUSH
2144: LD_INT 0
2146: PUSH
2147: LD_INT 50
2149: PUSH
2150: LD_INT 30
2152: PUSH
2153: LD_INT 20
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: LIST
2160: PUSH
2161: LD_OWVAR 67
2165: ARRAY
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: ST_TO_ADDR
// end ; uc_side := 5 ;
2187: LD_ADDR_OWVAR 20
2191: PUSH
2192: LD_INT 5
2194: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2195: LD_ADDR_EXP 29
2199: PUSH
2200: LD_STRING Abdul
2202: PPUSH
2203: LD_INT 0
2205: PPUSH
2206: LD_STRING 
2208: PPUSH
2209: CALL 31265 0 3
2213: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2214: LD_ADDR_EXP 31
2218: PUSH
2219: LD_STRING Omar
2221: PPUSH
2222: LD_INT 0
2224: PPUSH
2225: LD_STRING 
2227: PPUSH
2228: CALL 31265 0 3
2232: ST_TO_ADDR
// end ;
2233: LD_VAR 0 1
2237: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2238: LD_INT 0
2240: PPUSH
2241: PPUSH
2242: PPUSH
2243: PPUSH
2244: PPUSH
// pfx := 04_1_ ;
2245: LD_ADDR_VAR 0 2
2249: PUSH
2250: LD_STRING 04_1_
2252: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2253: LD_INT 35
2255: PPUSH
2256: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2260: LD_INT 3
2262: PPUSH
2263: LD_INT 2
2265: PPUSH
2266: CALL_OW 428
2270: NOT
2271: IFFALSE 2253
// tmp := [ ] ;
2273: LD_ADDR_VAR 0 4
2277: PUSH
2278: EMPTY
2279: ST_TO_ADDR
// uc_side := 5 ;
2280: LD_ADDR_OWVAR 20
2284: PUSH
2285: LD_INT 5
2287: ST_TO_ADDR
// uc_nation := 2 ;
2288: LD_ADDR_OWVAR 21
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2296: LD_ADDR_EXP 33
2300: PUSH
2301: LD_STRING Aviradze_L
2303: PPUSH
2304: LD_EXP 1
2308: NOT
2309: PPUSH
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL 31265 0 3
2319: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2320: LD_EXP 33
2324: PPUSH
2325: LD_INT 2
2327: PPUSH
2328: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2332: LD_EXP 33
2336: PPUSH
2337: LD_INT 14
2339: PPUSH
2340: LD_INT 0
2342: PPUSH
2343: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2347: LD_EXP 33
2351: PPUSH
2352: LD_INT 8
2354: PPUSH
2355: LD_INT 6
2357: PPUSH
2358: CALL_OW 111
// AddComHold ( Aviradze ) ;
2362: LD_EXP 33
2366: PPUSH
2367: CALL_OW 200
// tmp := [ Aviradze ] ;
2371: LD_ADDR_VAR 0 4
2375: PUSH
2376: LD_EXP 33
2380: PUSH
2381: EMPTY
2382: LIST
2383: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2384: LD_INT 70
2386: PPUSH
2387: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2391: LD_STRING Ibrahim_L
2393: PPUSH
2394: LD_EXP 1
2398: NOT
2399: PPUSH
2400: LD_VAR 0 2
2404: PPUSH
2405: CALL 31265 0 3
2409: IFFALSE 2509
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2411: LD_ADDR_EXP 24
2415: PUSH
2416: LD_STRING Ibrahim_L
2418: PPUSH
2419: LD_EXP 1
2423: NOT
2424: PPUSH
2425: LD_VAR 0 2
2429: PPUSH
2430: CALL 31265 0 3
2434: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2435: LD_EXP 24
2439: PPUSH
2440: LD_INT 2
2442: PPUSH
2443: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2447: LD_EXP 24
2451: PPUSH
2452: LD_INT 14
2454: PPUSH
2455: LD_INT 0
2457: PPUSH
2458: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2462: LD_EXP 24
2466: PPUSH
2467: LD_INT 8
2469: PPUSH
2470: LD_INT 7
2472: PPUSH
2473: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2477: LD_EXP 24
2481: PPUSH
2482: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2486: LD_ADDR_VAR 0 4
2490: PUSH
2491: LD_VAR 0 4
2495: PUSH
2496: LD_EXP 24
2500: ADD
2501: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2502: LD_INT 70
2504: PPUSH
2505: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2509: LD_STRING Kaia_L
2511: PPUSH
2512: LD_EXP 1
2516: NOT
2517: PPUSH
2518: LD_VAR 0 2
2522: PPUSH
2523: CALL 31265 0 3
2527: IFFALSE 2627
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2529: LD_ADDR_EXP 26
2533: PUSH
2534: LD_STRING Kaia_L
2536: PPUSH
2537: LD_EXP 1
2541: NOT
2542: PPUSH
2543: LD_VAR 0 2
2547: PPUSH
2548: CALL 31265 0 3
2552: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2553: LD_EXP 26
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2565: LD_EXP 26
2569: PPUSH
2570: LD_INT 14
2572: PPUSH
2573: LD_INT 0
2575: PPUSH
2576: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2580: LD_EXP 26
2584: PPUSH
2585: LD_INT 8
2587: PPUSH
2588: LD_INT 7
2590: PPUSH
2591: CALL_OW 111
// AddComHold ( Kaia ) ;
2595: LD_EXP 26
2599: PPUSH
2600: CALL_OW 200
// tmp := tmp ^ Kaia ;
2604: LD_ADDR_VAR 0 4
2608: PUSH
2609: LD_VAR 0 4
2613: PUSH
2614: LD_EXP 26
2618: ADD
2619: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2620: LD_INT 70
2622: PPUSH
2623: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2627: LD_STRING Kamil_L
2629: PPUSH
2630: LD_EXP 1
2634: NOT
2635: PPUSH
2636: LD_VAR 0 2
2640: PPUSH
2641: CALL 31265 0 3
2645: IFFALSE 2745
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2647: LD_ADDR_EXP 25
2651: PUSH
2652: LD_STRING Kamil_L
2654: PPUSH
2655: LD_EXP 1
2659: NOT
2660: PPUSH
2661: LD_VAR 0 2
2665: PPUSH
2666: CALL 31265 0 3
2670: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2671: LD_EXP 25
2675: PPUSH
2676: LD_INT 2
2678: PPUSH
2679: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2683: LD_EXP 25
2687: PPUSH
2688: LD_INT 14
2690: PPUSH
2691: LD_INT 0
2693: PPUSH
2694: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2698: LD_EXP 25
2702: PPUSH
2703: LD_INT 8
2705: PPUSH
2706: LD_INT 7
2708: PPUSH
2709: CALL_OW 111
// AddComHold ( Kamil ) ;
2713: LD_EXP 25
2717: PPUSH
2718: CALL_OW 200
// tmp := tmp ^ Kamil ;
2722: LD_ADDR_VAR 0 4
2726: PUSH
2727: LD_VAR 0 4
2731: PUSH
2732: LD_EXP 25
2736: ADD
2737: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2738: LD_INT 70
2740: PPUSH
2741: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2745: LD_STRING Sophia_L
2747: PPUSH
2748: LD_EXP 1
2752: NOT
2753: PPUSH
2754: LD_VAR 0 2
2758: PPUSH
2759: CALL 31265 0 3
2763: IFFALSE 2863
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2765: LD_ADDR_EXP 27
2769: PUSH
2770: LD_STRING Sophia_L
2772: PPUSH
2773: LD_EXP 1
2777: NOT
2778: PPUSH
2779: LD_VAR 0 2
2783: PPUSH
2784: CALL 31265 0 3
2788: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2789: LD_EXP 27
2793: PPUSH
2794: LD_INT 2
2796: PPUSH
2797: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2801: LD_EXP 27
2805: PPUSH
2806: LD_INT 14
2808: PPUSH
2809: LD_INT 0
2811: PPUSH
2812: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2816: LD_EXP 27
2820: PPUSH
2821: LD_INT 9
2823: PPUSH
2824: LD_INT 6
2826: PPUSH
2827: CALL_OW 111
// AddComHold ( Sophia ) ;
2831: LD_EXP 27
2835: PPUSH
2836: CALL_OW 200
// tmp := tmp ^ Sophia ;
2840: LD_ADDR_VAR 0 4
2844: PUSH
2845: LD_VAR 0 4
2849: PUSH
2850: LD_EXP 27
2854: ADD
2855: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2856: LD_INT 70
2858: PPUSH
2859: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2863: LD_ADDR_VAR 0 5
2867: PUSH
2868: LD_STRING 04_1_others_L
2870: PPUSH
2871: CALL_OW 31
2875: ST_TO_ADDR
// if tmp2 then
2876: LD_VAR 0 5
2880: IFFALSE 2977
// for i in tmp2 do
2882: LD_ADDR_VAR 0 3
2886: PUSH
2887: LD_VAR 0 5
2891: PUSH
2892: FOR_IN
2893: IFFALSE 2975
// begin SetDir ( i , 2 ) ;
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 2
2902: PPUSH
2903: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 14
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2922: LD_ADDR_EXP 34
2926: PUSH
2927: LD_EXP 34
2931: PPUSH
2932: LD_EXP 34
2936: PUSH
2937: LD_INT 1
2939: PLUS
2940: PPUSH
2941: LD_VAR 0 3
2945: PPUSH
2946: CALL_OW 1
2950: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2951: LD_VAR 0 3
2955: PPUSH
2956: LD_INT 17
2958: PPUSH
2959: LD_INT 14
2961: PPUSH
2962: CALL_OW 111
// wait ( 0 0$2 ) ;
2966: LD_INT 70
2968: PPUSH
2969: CALL_OW 67
// end ;
2973: GO 2892
2975: POP
2976: POP
// for i in tmp union tmp2 do
2977: LD_ADDR_VAR 0 3
2981: PUSH
2982: LD_VAR 0 4
2986: PUSH
2987: LD_VAR 0 5
2991: UNION
2992: PUSH
2993: FOR_IN
2994: IFFALSE 3024
// begin SetSide ( i , 2 ) ;
2996: LD_VAR 0 3
3000: PPUSH
3001: LD_INT 2
3003: PPUSH
3004: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
3008: LD_VAR 0 3
3012: PPUSH
3013: LD_EXP 21
3017: PPUSH
3018: CALL_OW 112
// end ;
3022: GO 2993
3024: POP
3025: POP
// end ; end_of_file
3026: LD_VAR 0 1
3030: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3031: LD_INT 0
3033: PPUSH
3034: PPUSH
3035: PPUSH
// uc_side := 3 ;
3036: LD_ADDR_OWVAR 20
3040: PUSH
3041: LD_INT 3
3043: ST_TO_ADDR
// uc_nation := 3 ;
3044: LD_ADDR_OWVAR 21
3048: PUSH
3049: LD_INT 3
3051: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3052: LD_ADDR_EXP 37
3056: PUSH
3057: EMPTY
3058: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3059: LD_ADDR_EXP 38
3063: PUSH
3064: EMPTY
3065: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3066: LD_ADDR_EXP 41
3070: PUSH
3071: EMPTY
3072: ST_TO_ADDR
// for i := 1 to 2 do
3073: LD_ADDR_VAR 0 2
3077: PUSH
3078: DOUBLE
3079: LD_INT 1
3081: DEC
3082: ST_TO_ADDR
3083: LD_INT 2
3085: PUSH
3086: FOR_TO
3087: IFFALSE 3222
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3089: LD_INT 0
3091: PPUSH
3092: LD_INT 1
3094: PPUSH
3095: LD_INT 3
3097: PUSH
3098: LD_INT 4
3100: PUSH
3101: LD_INT 5
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: LIST
3108: PUSH
3109: LD_OWVAR 67
3113: ARRAY
3114: PPUSH
3115: CALL_OW 380
// un := CreateHuman ;
3119: LD_ADDR_VAR 0 3
3123: PUSH
3124: CALL_OW 44
3128: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3129: LD_ADDR_EXP 37
3133: PUSH
3134: LD_EXP 37
3138: PPUSH
3139: LD_EXP 37
3143: PUSH
3144: LD_INT 1
3146: PLUS
3147: PPUSH
3148: LD_VAR 0 3
3152: PPUSH
3153: CALL_OW 1
3157: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3158: LD_VAR 0 3
3162: PPUSH
3163: LD_INT 100
3165: PPUSH
3166: LD_INT 63
3168: PPUSH
3169: LD_INT 3
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3179: LD_VAR 0 3
3183: PPUSH
3184: LD_INT 97
3186: PPUSH
3187: LD_INT 64
3189: PPUSH
3190: CALL_OW 428
3194: PUSH
3195: LD_INT 98
3197: PPUSH
3198: LD_INT 58
3200: PPUSH
3201: CALL_OW 428
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: LD_VAR 0 2
3214: ARRAY
3215: PPUSH
3216: CALL_OW 120
// end ;
3220: GO 3086
3222: POP
3223: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3224: LD_INT 51
3226: PPUSH
3227: LD_INT 77
3229: PPUSH
3230: CALL_OW 428
3234: PPUSH
3235: CALL_OW 274
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_INT 120
3245: PPUSH
3246: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3250: LD_INT 10
3252: PPUSH
3253: CALL_OW 274
3257: PPUSH
3258: LD_INT 2
3260: PPUSH
3261: LD_INT 300
3263: PPUSH
3264: CALL_OW 277
// for i := 1 to 2 do
3268: LD_ADDR_VAR 0 2
3272: PUSH
3273: DOUBLE
3274: LD_INT 1
3276: DEC
3277: ST_TO_ADDR
3278: LD_INT 2
3280: PUSH
3281: FOR_TO
3282: IFFALSE 3396
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3284: LD_INT 0
3286: PPUSH
3287: LD_INT 1
3289: PPUSH
3290: LD_INT 3
3292: PUSH
3293: LD_INT 4
3295: PUSH
3296: LD_INT 5
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: PUSH
3304: LD_OWVAR 67
3308: ARRAY
3309: PPUSH
3310: CALL_OW 380
// un := CreateHuman ;
3314: LD_ADDR_VAR 0 3
3318: PUSH
3319: CALL_OW 44
3323: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3324: LD_ADDR_EXP 38
3328: PUSH
3329: LD_EXP 38
3333: PPUSH
3334: LD_EXP 38
3338: PUSH
3339: LD_INT 1
3341: PLUS
3342: PPUSH
3343: LD_VAR 0 3
3347: PPUSH
3348: CALL_OW 1
3352: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3353: LD_VAR 0 3
3357: PPUSH
3358: LD_INT 198
3360: PPUSH
3361: LD_INT 106
3363: PPUSH
3364: CALL_OW 428
3368: PUSH
3369: LD_INT 205
3371: PPUSH
3372: LD_INT 114
3374: PPUSH
3375: CALL_OW 428
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PUSH
3384: LD_VAR 0 2
3388: ARRAY
3389: PPUSH
3390: CALL_OW 52
// end ;
3394: GO 3281
3396: POP
3397: POP
// for i := 1 to 2 do
3398: LD_ADDR_VAR 0 2
3402: PUSH
3403: DOUBLE
3404: LD_INT 1
3406: DEC
3407: ST_TO_ADDR
3408: LD_INT 2
3410: PUSH
3411: FOR_TO
3412: IFFALSE 3489
// begin PrepareHuman ( false , 2 , 3 ) ;
3414: LD_INT 0
3416: PPUSH
3417: LD_INT 2
3419: PPUSH
3420: LD_INT 3
3422: PPUSH
3423: CALL_OW 380
// un := CreateHuman ;
3427: LD_ADDR_VAR 0 3
3431: PUSH
3432: CALL_OW 44
3436: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3437: LD_ADDR_EXP 38
3441: PUSH
3442: LD_EXP 38
3446: PPUSH
3447: LD_EXP 38
3451: PUSH
3452: LD_INT 1
3454: PLUS
3455: PPUSH
3456: LD_VAR 0 3
3460: PPUSH
3461: CALL_OW 1
3465: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3466: LD_VAR 0 3
3470: PPUSH
3471: LD_INT 204
3473: PPUSH
3474: LD_INT 108
3476: PPUSH
3477: LD_INT 2
3479: PPUSH
3480: LD_INT 0
3482: PPUSH
3483: CALL_OW 50
// end ;
3487: GO 3411
3489: POP
3490: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3491: LD_ADDR_VAR 0 2
3495: PUSH
3496: DOUBLE
3497: LD_INT 1
3499: DEC
3500: ST_TO_ADDR
3501: LD_INT 4
3503: PUSH
3504: LD_INT 5
3506: PUSH
3507: LD_INT 6
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: PUSH
3515: LD_OWVAR 67
3519: ARRAY
3520: PUSH
3521: FOR_TO
3522: IFFALSE 3643
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3524: LD_INT 0
3526: PPUSH
3527: LD_INT 1
3529: PUSH
3530: LD_INT 1
3532: PUSH
3533: LD_INT 2
3535: PUSH
3536: LD_INT 4
3538: PUSH
3539: LD_INT 1
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 1
3551: PPUSH
3552: LD_INT 5
3554: PPUSH
3555: CALL_OW 12
3559: ARRAY
3560: PPUSH
3561: LD_INT 3
3563: PUSH
3564: LD_INT 4
3566: PUSH
3567: LD_INT 5
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: LIST
3574: PUSH
3575: LD_OWVAR 67
3579: ARRAY
3580: PPUSH
3581: CALL_OW 380
// un := CreateHuman ;
3585: LD_ADDR_VAR 0 3
3589: PUSH
3590: CALL_OW 44
3594: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3595: LD_VAR 0 3
3599: PPUSH
3600: LD_INT 11
3602: PPUSH
3603: LD_INT 0
3605: PPUSH
3606: CALL 66917 0 3
3610: IFFALSE 3641
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3612: LD_ADDR_EXP 39
3616: PUSH
3617: LD_EXP 39
3621: PPUSH
3622: LD_EXP 39
3626: PUSH
3627: LD_INT 1
3629: PLUS
3630: PPUSH
3631: LD_VAR 0 3
3635: PPUSH
3636: CALL_OW 1
3640: ST_TO_ADDR
// end ;
3641: GO 3521
3643: POP
3644: POP
// for i := 1 to 3 do
3645: LD_ADDR_VAR 0 2
3649: PUSH
3650: DOUBLE
3651: LD_INT 1
3653: DEC
3654: ST_TO_ADDR
3655: LD_INT 3
3657: PUSH
3658: FOR_TO
3659: IFFALSE 3749
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
3661: LD_INT 0
3663: PPUSH
3664: LD_INT 1
3666: PPUSH
3667: LD_INT 3
3669: PUSH
3670: LD_INT 4
3672: PUSH
3673: LD_INT 4
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: PUSH
3681: LD_OWVAR 67
3685: ARRAY
3686: PPUSH
3687: CALL_OW 380
// un := CreateHuman ;
3691: LD_ADDR_VAR 0 3
3695: PUSH
3696: CALL_OW 44
3700: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3701: LD_VAR 0 3
3705: PPUSH
3706: LD_INT 11
3708: PPUSH
3709: LD_INT 0
3711: PPUSH
3712: CALL 66917 0 3
3716: IFFALSE 3747
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3718: LD_ADDR_EXP 39
3722: PUSH
3723: LD_EXP 39
3727: PPUSH
3728: LD_EXP 39
3732: PUSH
3733: LD_INT 1
3735: PLUS
3736: PPUSH
3737: LD_VAR 0 3
3741: PPUSH
3742: CALL_OW 1
3746: ST_TO_ADDR
// end ;
3747: GO 3658
3749: POP
3750: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
3751: LD_ADDR_VAR 0 2
3755: PUSH
3756: DOUBLE
3757: LD_INT 1
3759: DEC
3760: ST_TO_ADDR
3761: LD_INT 5
3763: PUSH
3764: LD_INT 6
3766: PUSH
3767: LD_INT 7
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: PUSH
3775: LD_OWVAR 67
3779: ARRAY
3780: PUSH
3781: FOR_TO
3782: IFFALSE 3903
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3784: LD_INT 0
3786: PPUSH
3787: LD_INT 1
3789: PUSH
3790: LD_INT 1
3792: PUSH
3793: LD_INT 2
3795: PUSH
3796: LD_INT 4
3798: PUSH
3799: LD_INT 1
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: PUSH
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 5
3814: PPUSH
3815: CALL_OW 12
3819: ARRAY
3820: PPUSH
3821: LD_INT 3
3823: PUSH
3824: LD_INT 4
3826: PUSH
3827: LD_INT 5
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: LIST
3834: PUSH
3835: LD_OWVAR 67
3839: ARRAY
3840: PPUSH
3841: CALL_OW 380
// un := CreateHuman ;
3845: LD_ADDR_VAR 0 3
3849: PUSH
3850: CALL_OW 44
3854: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3855: LD_VAR 0 3
3859: PPUSH
3860: LD_INT 15
3862: PPUSH
3863: LD_INT 0
3865: PPUSH
3866: CALL 66917 0 3
3870: IFFALSE 3901
// ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3872: LD_ADDR_EXP 40
3876: PUSH
3877: LD_EXP 40
3881: PPUSH
3882: LD_EXP 40
3886: PUSH
3887: LD_INT 1
3889: PLUS
3890: PPUSH
3891: LD_VAR 0 3
3895: PPUSH
3896: CALL_OW 1
3900: ST_TO_ADDR
// end ;
3901: GO 3781
3903: POP
3904: POP
// end ;
3905: LD_VAR 0 1
3909: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3910: LD_INT 0
3912: PPUSH
3913: PPUSH
3914: PPUSH
// uc_side := 3 ;
3915: LD_ADDR_OWVAR 20
3919: PUSH
3920: LD_INT 3
3922: ST_TO_ADDR
// uc_nation := 3 ;
3923: LD_ADDR_OWVAR 21
3927: PUSH
3928: LD_INT 3
3930: ST_TO_ADDR
// for i := 1 to 6 do
3931: LD_ADDR_VAR 0 2
3935: PUSH
3936: DOUBLE
3937: LD_INT 1
3939: DEC
3940: ST_TO_ADDR
3941: LD_INT 6
3943: PUSH
3944: FOR_TO
3945: IFFALSE 4024
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3947: LD_INT 0
3949: PPUSH
3950: LD_INT 1
3952: PUSH
3953: LD_INT 4
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PUSH
3960: LD_INT 1
3962: PPUSH
3963: LD_INT 2
3965: PPUSH
3966: CALL_OW 12
3970: ARRAY
3971: PPUSH
3972: LD_INT 0
3974: PPUSH
3975: CALL_OW 380
// un := CreateHuman ;
3979: LD_ADDR_VAR 0 3
3983: PUSH
3984: CALL_OW 44
3988: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
3989: LD_VAR 0 3
3993: PPUSH
3994: LD_INT 54
3996: PPUSH
3997: LD_INT 88
3999: PPUSH
4000: LD_INT 12
4002: PPUSH
4003: LD_INT 0
4005: PPUSH
4006: CALL_OW 50
// SetLives ( un , 1 ) ;
4010: LD_VAR 0 3
4014: PPUSH
4015: LD_INT 1
4017: PPUSH
4018: CALL_OW 234
// end ;
4022: GO 3944
4024: POP
4025: POP
// uc_side := 3 ;
4026: LD_ADDR_OWVAR 20
4030: PUSH
4031: LD_INT 3
4033: ST_TO_ADDR
// uc_nation := 0 ;
4034: LD_ADDR_OWVAR 21
4038: PUSH
4039: LD_INT 0
4041: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4042: LD_ADDR_EXP 42
4046: PUSH
4047: EMPTY
4048: ST_TO_ADDR
// apeEngGroup := [ ] ;
4049: LD_ADDR_EXP 43
4053: PUSH
4054: EMPTY
4055: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
4056: LD_ADDR_VAR 0 2
4060: PUSH
4061: DOUBLE
4062: LD_INT 1
4064: DEC
4065: ST_TO_ADDR
4066: LD_INT 4
4068: PUSH
4069: LD_INT 5
4071: PUSH
4072: LD_INT 6
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: LIST
4079: PUSH
4080: LD_OWVAR 67
4084: ARRAY
4085: PUSH
4086: FOR_TO
4087: IFFALSE 4201
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4089: LD_INT 0
4091: PPUSH
4092: LD_INT 15
4094: PPUSH
4095: LD_INT 3
4097: PUSH
4098: LD_INT 4
4100: PUSH
4101: LD_INT 5
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: PUSH
4109: LD_OWVAR 67
4113: ARRAY
4114: PPUSH
4115: CALL_OW 380
// un := CreateHuman ;
4119: LD_ADDR_VAR 0 3
4123: PUSH
4124: CALL_OW 44
4128: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4129: LD_ADDR_EXP 42
4133: PUSH
4134: LD_EXP 42
4138: PPUSH
4139: LD_EXP 42
4143: PUSH
4144: LD_INT 1
4146: PLUS
4147: PPUSH
4148: LD_VAR 0 3
4152: PPUSH
4153: CALL_OW 1
4157: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4158: LD_VAR 0 3
4162: PPUSH
4163: LD_INT 0
4165: PPUSH
4166: LD_INT 5
4168: PPUSH
4169: CALL_OW 12
4173: PPUSH
4174: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 56
4185: PPUSH
4186: LD_INT 82
4188: PPUSH
4189: LD_INT 6
4191: PPUSH
4192: LD_INT 0
4194: PPUSH
4195: CALL_OW 50
// end ;
4199: GO 4086
4201: POP
4202: POP
// for i := 1 to 2 do
4203: LD_ADDR_VAR 0 2
4207: PUSH
4208: DOUBLE
4209: LD_INT 1
4211: DEC
4212: ST_TO_ADDR
4213: LD_INT 2
4215: PUSH
4216: FOR_TO
4217: IFFALSE 4293
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4219: LD_INT 0
4221: PPUSH
4222: LD_INT 16
4224: PPUSH
4225: LD_INT 4
4227: PPUSH
4228: CALL_OW 380
// un := CreateHuman ;
4232: LD_ADDR_VAR 0 3
4236: PUSH
4237: CALL_OW 44
4241: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4242: LD_ADDR_EXP 43
4246: PUSH
4247: LD_EXP 43
4251: PPUSH
4252: LD_EXP 43
4256: PUSH
4257: LD_INT 1
4259: PLUS
4260: PPUSH
4261: LD_VAR 0 3
4265: PPUSH
4266: CALL_OW 1
4270: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4271: LD_VAR 0 3
4275: PPUSH
4276: LD_INT 51
4278: PPUSH
4279: LD_INT 77
4281: PPUSH
4282: CALL_OW 428
4286: PPUSH
4287: CALL_OW 52
// end ;
4291: GO 4216
4293: POP
4294: POP
// end ;
4295: LD_VAR 0 1
4299: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4300: LD_EXP 42
4304: PPUSH
4305: LD_INT 3
4307: PUSH
4308: LD_INT 24
4310: PUSH
4311: LD_INT 600
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PUSH
4322: LD_INT 3
4324: PUSH
4325: LD_INT 54
4327: PUSH
4328: EMPTY
4329: LIST
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PPUSH
4339: CALL_OW 72
4343: PUSH
4344: LD_INT 66
4346: PPUSH
4347: LD_INT 89
4349: PPUSH
4350: CALL_OW 428
4354: PPUSH
4355: CALL_OW 302
4359: AND
4360: IFFALSE 4445
4362: GO 4364
4364: DISABLE
4365: LD_INT 0
4367: PPUSH
// begin enable ;
4368: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4369: LD_ADDR_VAR 0 1
4373: PUSH
4374: LD_EXP 42
4378: PPUSH
4379: LD_INT 3
4381: PUSH
4382: LD_INT 24
4384: PUSH
4385: LD_INT 600
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PUSH
4396: LD_INT 3
4398: PUSH
4399: LD_INT 54
4401: PUSH
4402: EMPTY
4403: LIST
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PPUSH
4413: CALL_OW 72
4417: PUSH
4418: FOR_IN
4419: IFFALSE 4443
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4421: LD_VAR 0 1
4425: PPUSH
4426: LD_INT 66
4428: PPUSH
4429: LD_INT 89
4431: PPUSH
4432: CALL_OW 428
4436: PPUSH
4437: CALL_OW 120
4441: GO 4418
4443: POP
4444: POP
// end ;
4445: PPOPN 1
4447: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4448: LD_INT 22
4450: PUSH
4451: LD_INT 2
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: LD_INT 92
4460: PUSH
4461: LD_INT 54
4463: PUSH
4464: LD_INT 77
4466: PUSH
4467: LD_INT 8
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: IFFALSE 4548
4486: GO 4488
4488: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4489: LD_EXP 43
4493: PPUSH
4494: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4498: LD_EXP 43
4502: PPUSH
4503: LD_INT 22
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 92
4515: PUSH
4516: LD_INT 54
4518: PUSH
4519: LD_INT 77
4521: PUSH
4522: LD_INT 8
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PPUSH
4535: CALL_OW 69
4539: PUSH
4540: LD_INT 1
4542: ARRAY
4543: PPUSH
4544: CALL_OW 175
// end ;
4548: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag ; begin
4549: LD_INT 0
4551: PPUSH
4552: PPUSH
4553: PPUSH
4554: PPUSH
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
4559: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4560: LD_ADDR_VAR 0 3
4564: PUSH
4565: LD_INT 1
4567: PPUSH
4568: LD_INT 3
4570: PPUSH
4571: CALL_OW 12
4575: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4576: LD_ADDR_VAR 0 5
4580: PUSH
4581: LD_INT 16
4583: PUSH
4584: LD_INT 17
4586: PUSH
4587: LD_INT 19
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: PUSH
4595: LD_VAR 0 3
4599: ARRAY
4600: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4601: LD_ADDR_VAR 0 7
4605: PUSH
4606: LD_INT 159
4608: PUSH
4609: LD_INT 25
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PUSH
4616: LD_INT 137
4618: PUSH
4619: LD_INT 37
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 123
4628: PUSH
4629: LD_INT 55
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 115
4638: PUSH
4639: LD_INT 71
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: LD_INT 106
4648: PUSH
4649: LD_INT 88
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PUSH
4656: LD_INT 97
4658: PUSH
4659: LD_INT 114
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_INT 75
4668: PUSH
4669: LD_INT 146
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: PUSH
4685: LD_INT 206
4687: PUSH
4688: LD_INT 135
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PUSH
4695: LD_INT 184
4697: PUSH
4698: LD_INT 111
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: PUSH
4705: LD_INT 154
4707: PUSH
4708: LD_INT 97
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PUSH
4715: LD_INT 122
4717: PUSH
4718: LD_INT 80
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: PUSH
4725: LD_INT 109
4727: PUSH
4728: LD_INT 78
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PUSH
4735: LD_INT 97
4737: PUSH
4738: LD_INT 113
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: PUSH
4745: LD_INT 75
4747: PUSH
4748: LD_INT 147
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: PUSH
4764: LD_INT 185
4766: PUSH
4767: LD_INT 72
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PUSH
4774: LD_INT 171
4776: PUSH
4777: LD_INT 83
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PUSH
4784: LD_INT 161
4786: PUSH
4787: LD_INT 99
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PUSH
4794: LD_INT 125
4796: PUSH
4797: LD_INT 82
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: PUSH
4804: LD_INT 105
4806: PUSH
4807: LD_INT 90
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PUSH
4814: LD_INT 96
4816: PUSH
4817: LD_INT 116
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PUSH
4824: LD_INT 75
4826: PUSH
4827: LD_INT 147
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: PUSH
4848: LD_VAR 0 3
4852: ARRAY
4853: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4854: LD_ADDR_VAR 0 4
4858: PUSH
4859: LD_INT 4
4861: PUSH
4862: LD_INT 5
4864: PUSH
4865: LD_INT 3
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: PUSH
4873: LD_VAR 0 3
4877: ARRAY
4878: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4879: LD_ADDR_VAR 0 6
4883: PUSH
4884: LD_INT 22
4886: PUSH
4887: LD_INT 20
4889: PUSH
4890: LD_INT 21
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: LD_VAR 0 3
4902: ARRAY
4903: ST_TO_ADDR
// for i := 1 to 2 do
4904: LD_ADDR_VAR 0 2
4908: PUSH
4909: DOUBLE
4910: LD_INT 1
4912: DEC
4913: ST_TO_ADDR
4914: LD_INT 2
4916: PUSH
4917: FOR_TO
4918: IFFALSE 4936
// EraseResourceArea ( i , outerSpawnArea ) ;
4920: LD_VAR 0 2
4924: PPUSH
4925: LD_VAR 0 6
4929: PPUSH
4930: CALL_OW 286
4934: GO 4917
4936: POP
4937: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4938: LD_VAR 0 6
4942: PPUSH
4943: LD_INT 2
4945: PUSH
4946: LD_INT 21
4948: PUSH
4949: LD_INT 1
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 21
4958: PUSH
4959: LD_INT 2
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 21
4968: PUSH
4969: LD_INT 3
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: PPUSH
4982: CALL_OW 70
4986: IFFALSE 5201
// repeat wait ( 0 0$1 ) ;
4988: LD_INT 35
4990: PPUSH
4991: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4995: LD_VAR 0 6
4999: PPUSH
5000: LD_INT 2
5002: PUSH
5003: LD_INT 21
5005: PUSH
5006: LD_INT 2
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PUSH
5013: LD_INT 21
5015: PUSH
5016: LD_INT 3
5018: PUSH
5019: EMPTY
5020: LIST
5021: LIST
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: LIST
5027: PPUSH
5028: CALL_OW 70
5032: IFFALSE 5093
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5034: LD_ADDR_VAR 0 2
5038: PUSH
5039: LD_VAR 0 6
5043: PPUSH
5044: LD_INT 2
5046: PUSH
5047: LD_INT 21
5049: PUSH
5050: LD_INT 2
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 21
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: PPUSH
5072: CALL_OW 70
5076: PUSH
5077: FOR_IN
5078: IFFALSE 5091
// RemoveUnit ( i ) ;
5080: LD_VAR 0 2
5084: PPUSH
5085: CALL_OW 64
5089: GO 5077
5091: POP
5092: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5093: LD_VAR 0 6
5097: PPUSH
5098: LD_INT 21
5100: PUSH
5101: LD_INT 1
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: PPUSH
5108: CALL_OW 70
5112: IFFALSE 5161
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5114: LD_ADDR_VAR 0 2
5118: PUSH
5119: LD_VAR 0 6
5123: PPUSH
5124: LD_INT 21
5126: PUSH
5127: LD_INT 1
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: PPUSH
5134: CALL_OW 70
5138: PUSH
5139: FOR_IN
5140: IFFALSE 5159
// ComMoveXY ( i , 113 , 53 ) ;
5142: LD_VAR 0 2
5146: PPUSH
5147: LD_INT 113
5149: PPUSH
5150: LD_INT 53
5152: PPUSH
5153: CALL_OW 111
5157: GO 5139
5159: POP
5160: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5161: LD_VAR 0 6
5165: PPUSH
5166: LD_INT 2
5168: PUSH
5169: LD_INT 21
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 21
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: LIST
5193: PPUSH
5194: CALL_OW 70
5198: NOT
5199: IFFALSE 4988
// case convoyCounter of 1 .. 3 :
5201: LD_EXP 16
5205: PUSH
5206: LD_INT 1
5208: DOUBLE
5209: GREATEREQUAL
5210: IFFALSE 5218
5212: LD_INT 3
5214: DOUBLE
5215: LESSEQUAL
5216: IFTRUE 5220
5218: GO 5815
5220: POP
// begin uc_side := 3 ;
5221: LD_ADDR_OWVAR 20
5225: PUSH
5226: LD_INT 3
5228: ST_TO_ADDR
// uc_nation := 3 ;
5229: LD_ADDR_OWVAR 21
5233: PUSH
5234: LD_INT 3
5236: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] - convoyCounter do
5237: LD_ADDR_VAR 0 2
5241: PUSH
5242: DOUBLE
5243: LD_INT 1
5245: DEC
5246: ST_TO_ADDR
5247: LD_INT 5
5249: PUSH
5250: LD_INT 6
5252: PUSH
5253: LD_INT 7
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: LIST
5260: PUSH
5261: LD_OWVAR 67
5265: ARRAY
5266: PUSH
5267: LD_EXP 16
5271: MINUS
5272: PUSH
5273: FOR_TO
5274: IFFALSE 5461
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5276: LD_INT 0
5278: PPUSH
5279: LD_INT 1
5281: PUSH
5282: LD_INT 1
5284: PUSH
5285: LD_INT 1
5287: PUSH
5288: LD_INT 4
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_INT 4
5302: PPUSH
5303: CALL_OW 12
5307: ARRAY
5308: PPUSH
5309: LD_INT 4
5311: PUSH
5312: LD_INT 5
5314: PUSH
5315: LD_INT 6
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_OWVAR 67
5327: ARRAY
5328: PPUSH
5329: CALL_OW 380
// un := CreateHuman ;
5333: LD_ADDR_VAR 0 8
5337: PUSH
5338: CALL_OW 44
5342: ST_TO_ADDR
// SetDir ( un , dir ) ;
5343: LD_VAR 0 8
5347: PPUSH
5348: LD_VAR 0 4
5352: PPUSH
5353: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5357: LD_VAR 0 8
5361: PPUSH
5362: LD_VAR 0 5
5366: PPUSH
5367: LD_INT 0
5369: PPUSH
5370: CALL 66917 0 3
5374: IFFALSE 5459
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5376: LD_ADDR_EXP 41
5380: PUSH
5381: LD_EXP 41
5385: PPUSH
5386: LD_EXP 41
5390: PUSH
5391: LD_INT 1
5393: PLUS
5394: PPUSH
5395: LD_VAR 0 8
5399: PPUSH
5400: CALL_OW 1
5404: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5405: LD_VAR 0 8
5409: PPUSH
5410: LD_INT 1
5412: PPUSH
5413: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5417: LD_VAR 0 8
5421: PPUSH
5422: LD_VAR 0 7
5426: PUSH
5427: LD_INT 1
5429: ARRAY
5430: PUSH
5431: LD_INT 1
5433: ARRAY
5434: PPUSH
5435: LD_VAR 0 7
5439: PUSH
5440: LD_INT 1
5442: ARRAY
5443: PUSH
5444: LD_INT 2
5446: ARRAY
5447: PPUSH
5448: CALL_OW 111
// wait ( 0 0$2 ) ;
5452: LD_INT 70
5454: PPUSH
5455: CALL_OW 67
// end ; end ;
5459: GO 5273
5461: POP
5462: POP
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5463: LD_ADDR_VAR 0 2
5467: PUSH
5468: DOUBLE
5469: LD_INT 1
5471: DEC
5472: ST_TO_ADDR
5473: LD_INT 3
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: LD_INT 4
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: LIST
5486: PUSH
5487: LD_OWVAR 67
5491: ARRAY
5492: PUSH
5493: FOR_TO
5494: IFFALSE 5811
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5496: LD_INT 3
5498: PPUSH
5499: LD_INT 3
5501: PPUSH
5502: LD_INT 21
5504: PUSH
5505: LD_INT 22
5507: PUSH
5508: LD_INT 23
5510: PUSH
5511: LD_INT 24
5513: PUSH
5514: LD_INT 24
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: PUSH
5524: LD_OWVAR 67
5528: PPUSH
5529: LD_OWVAR 67
5533: PUSH
5534: LD_INT 2
5536: PLUS
5537: PPUSH
5538: CALL_OW 12
5542: ARRAY
5543: PPUSH
5544: LD_INT 1
5546: PPUSH
5547: LD_INT 1
5549: PPUSH
5550: LD_INT 42
5552: PUSH
5553: LD_INT 44
5555: PUSH
5556: LD_INT 43
5558: PUSH
5559: LD_INT 44
5561: PUSH
5562: LD_INT 46
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: PUSH
5572: LD_INT 1
5574: PPUSH
5575: LD_OWVAR 67
5579: PUSH
5580: LD_INT 2
5582: PLUS
5583: PPUSH
5584: CALL_OW 12
5588: ARRAY
5589: PPUSH
5590: LD_INT 90
5592: PPUSH
5593: CALL 435 0 7
// un := CreateVehicle ;
5597: LD_ADDR_VAR 0 8
5601: PUSH
5602: CALL_OW 45
5606: ST_TO_ADDR
// SetDir ( un , dir ) ;
5607: LD_VAR 0 8
5611: PPUSH
5612: LD_VAR 0 4
5616: PPUSH
5617: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5621: LD_VAR 0 8
5625: PPUSH
5626: LD_VAR 0 5
5630: PPUSH
5631: LD_INT 0
5633: PPUSH
5634: CALL 66917 0 3
5638: IFFALSE 5809
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5640: LD_ADDR_EXP 41
5644: PUSH
5645: LD_EXP 41
5649: PPUSH
5650: LD_EXP 41
5654: PUSH
5655: LD_INT 1
5657: PLUS
5658: PPUSH
5659: LD_VAR 0 8
5663: PPUSH
5664: CALL_OW 1
5668: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5669: LD_INT 0
5671: PPUSH
5672: LD_INT 3
5674: PUSH
5675: LD_INT 4
5677: PUSH
5678: LD_INT 5
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: LIST
5685: PUSH
5686: LD_OWVAR 67
5690: ARRAY
5691: PPUSH
5692: CALL_OW 383
// un := CreateHuman ;
5696: LD_ADDR_VAR 0 8
5700: PUSH
5701: CALL_OW 44
5705: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5706: LD_VAR 0 8
5710: PPUSH
5711: LD_EXP 41
5715: PUSH
5716: LD_EXP 41
5720: ARRAY
5721: PPUSH
5722: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5726: LD_ADDR_EXP 41
5730: PUSH
5731: LD_EXP 41
5735: PPUSH
5736: LD_EXP 41
5740: PUSH
5741: LD_INT 1
5743: PLUS
5744: PPUSH
5745: LD_VAR 0 8
5749: PPUSH
5750: CALL_OW 1
5754: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5755: LD_VAR 0 8
5759: PPUSH
5760: LD_INT 1
5762: PPUSH
5763: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5767: LD_VAR 0 8
5771: PPUSH
5772: LD_VAR 0 7
5776: PUSH
5777: LD_INT 1
5779: ARRAY
5780: PUSH
5781: LD_INT 1
5783: ARRAY
5784: PPUSH
5785: LD_VAR 0 7
5789: PUSH
5790: LD_INT 1
5792: ARRAY
5793: PUSH
5794: LD_INT 2
5796: ARRAY
5797: PPUSH
5798: CALL_OW 111
// wait ( 0 0$3 ) ;
5802: LD_INT 105
5804: PPUSH
5805: CALL_OW 67
// end ; end ;
5809: GO 5493
5811: POP
5812: POP
// end ; 4 .. 7 :
5813: GO 6368
5815: LD_INT 4
5817: DOUBLE
5818: GREATEREQUAL
5819: IFFALSE 5827
5821: LD_INT 7
5823: DOUBLE
5824: LESSEQUAL
5825: IFTRUE 5829
5827: GO 6367
5829: POP
// begin uc_side := 3 ;
5830: LD_ADDR_OWVAR 20
5834: PUSH
5835: LD_INT 3
5837: ST_TO_ADDR
// uc_nation := 3 ;
5838: LD_ADDR_OWVAR 21
5842: PUSH
5843: LD_INT 3
5845: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
5846: LD_ADDR_VAR 0 2
5850: PUSH
5851: DOUBLE
5852: LD_INT 1
5854: DEC
5855: ST_TO_ADDR
5856: LD_INT 2
5858: PUSH
5859: LD_INT 3
5861: PUSH
5862: LD_INT 4
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: PUSH
5870: LD_OWVAR 67
5874: ARRAY
5875: PUSH
5876: FOR_TO
5877: IFFALSE 6037
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5879: LD_INT 0
5881: PPUSH
5882: LD_INT 1
5884: PPUSH
5885: LD_INT 4
5887: PUSH
5888: LD_INT 5
5890: PUSH
5891: LD_INT 6
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: LIST
5898: PUSH
5899: LD_OWVAR 67
5903: ARRAY
5904: PPUSH
5905: CALL_OW 380
// un := CreateHuman ;
5909: LD_ADDR_VAR 0 8
5913: PUSH
5914: CALL_OW 44
5918: ST_TO_ADDR
// SetDir ( un , dir ) ;
5919: LD_VAR 0 8
5923: PPUSH
5924: LD_VAR 0 4
5928: PPUSH
5929: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5933: LD_VAR 0 8
5937: PPUSH
5938: LD_VAR 0 5
5942: PPUSH
5943: LD_INT 0
5945: PPUSH
5946: CALL 66917 0 3
5950: IFFALSE 6035
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5952: LD_ADDR_EXP 41
5956: PUSH
5957: LD_EXP 41
5961: PPUSH
5962: LD_EXP 41
5966: PUSH
5967: LD_INT 1
5969: PLUS
5970: PPUSH
5971: LD_VAR 0 8
5975: PPUSH
5976: CALL_OW 1
5980: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5981: LD_VAR 0 8
5985: PPUSH
5986: LD_INT 1
5988: PPUSH
5989: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5993: LD_VAR 0 8
5997: PPUSH
5998: LD_VAR 0 7
6002: PUSH
6003: LD_INT 1
6005: ARRAY
6006: PUSH
6007: LD_INT 1
6009: ARRAY
6010: PPUSH
6011: LD_VAR 0 7
6015: PUSH
6016: LD_INT 1
6018: ARRAY
6019: PUSH
6020: LD_INT 2
6022: ARRAY
6023: PPUSH
6024: CALL_OW 111
// wait ( 0 0$2 ) ;
6028: LD_INT 70
6030: PPUSH
6031: CALL_OW 67
// end ; end ;
6035: GO 5876
6037: POP
6038: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
6039: LD_ADDR_VAR 0 2
6043: PUSH
6044: DOUBLE
6045: LD_INT 1
6047: DEC
6048: ST_TO_ADDR
6049: LD_INT 2
6051: PUSH
6052: LD_INT 3
6054: PUSH
6055: LD_INT 3
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: LIST
6062: PUSH
6063: LD_OWVAR 67
6067: ARRAY
6068: PUSH
6069: FOR_TO
6070: IFFALSE 6363
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6072: LD_INT 3
6074: PPUSH
6075: LD_INT 3
6077: PPUSH
6078: LD_INT 21
6080: PUSH
6081: LD_INT 22
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: LD_INT 1
6090: PPUSH
6091: LD_INT 2
6093: PPUSH
6094: CALL_OW 12
6098: ARRAY
6099: PPUSH
6100: LD_INT 1
6102: PPUSH
6103: LD_INT 1
6105: PPUSH
6106: LD_INT 42
6108: PUSH
6109: LD_INT 44
6111: PUSH
6112: LD_INT 43
6114: PUSH
6115: LD_INT 44
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: PUSH
6124: LD_INT 1
6126: PPUSH
6127: LD_OWVAR 67
6131: PUSH
6132: LD_INT 1
6134: PLUS
6135: PPUSH
6136: CALL_OW 12
6140: ARRAY
6141: PPUSH
6142: LD_INT 90
6144: PPUSH
6145: CALL 435 0 7
// un := CreateVehicle ;
6149: LD_ADDR_VAR 0 8
6153: PUSH
6154: CALL_OW 45
6158: ST_TO_ADDR
// SetDir ( un , dir ) ;
6159: LD_VAR 0 8
6163: PPUSH
6164: LD_VAR 0 4
6168: PPUSH
6169: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6173: LD_VAR 0 8
6177: PPUSH
6178: LD_VAR 0 5
6182: PPUSH
6183: LD_INT 0
6185: PPUSH
6186: CALL 66917 0 3
6190: IFFALSE 6361
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6192: LD_ADDR_EXP 41
6196: PUSH
6197: LD_EXP 41
6201: PPUSH
6202: LD_EXP 41
6206: PUSH
6207: LD_INT 1
6209: PLUS
6210: PPUSH
6211: LD_VAR 0 8
6215: PPUSH
6216: CALL_OW 1
6220: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
6221: LD_INT 0
6223: PPUSH
6224: LD_INT 3
6226: PUSH
6227: LD_INT 4
6229: PUSH
6230: LD_INT 5
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: LIST
6237: PUSH
6238: LD_OWVAR 67
6242: ARRAY
6243: PPUSH
6244: CALL_OW 383
// un := CreateHuman ;
6248: LD_ADDR_VAR 0 8
6252: PUSH
6253: CALL_OW 44
6257: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6258: LD_VAR 0 8
6262: PPUSH
6263: LD_EXP 41
6267: PUSH
6268: LD_EXP 41
6272: ARRAY
6273: PPUSH
6274: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6278: LD_ADDR_EXP 41
6282: PUSH
6283: LD_EXP 41
6287: PPUSH
6288: LD_EXP 41
6292: PUSH
6293: LD_INT 1
6295: PLUS
6296: PPUSH
6297: LD_VAR 0 8
6301: PPUSH
6302: CALL_OW 1
6306: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6307: LD_VAR 0 8
6311: PPUSH
6312: LD_INT 1
6314: PPUSH
6315: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6319: LD_VAR 0 8
6323: PPUSH
6324: LD_VAR 0 7
6328: PUSH
6329: LD_INT 1
6331: ARRAY
6332: PUSH
6333: LD_INT 1
6335: ARRAY
6336: PPUSH
6337: LD_VAR 0 7
6341: PUSH
6342: LD_INT 1
6344: ARRAY
6345: PUSH
6346: LD_INT 2
6348: ARRAY
6349: PPUSH
6350: CALL_OW 111
// wait ( 0 0$2 ) ;
6354: LD_INT 70
6356: PPUSH
6357: CALL_OW 67
// end ; end ;
6361: GO 6069
6363: POP
6364: POP
// end ; end ;
6365: GO 6368
6367: POP
// repeat wait ( 0 0$1 ) ;
6368: LD_INT 35
6370: PPUSH
6371: CALL_OW 67
// for un in ruConvoySquad do
6375: LD_ADDR_VAR 0 8
6379: PUSH
6380: LD_EXP 41
6384: PUSH
6385: FOR_IN
6386: IFFALSE 6938
// begin if IsInArea ( un , westSouthOutArea ) then
6388: LD_VAR 0 8
6392: PPUSH
6393: LD_INT 18
6395: PPUSH
6396: CALL_OW 308
6400: IFFALSE 6488
// begin if GetType ( un ) = unit_vehicle then
6402: LD_VAR 0 8
6406: PPUSH
6407: CALL_OW 247
6411: PUSH
6412: LD_INT 2
6414: EQUAL
6415: IFFALSE 6447
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6417: LD_ADDR_EXP 41
6421: PUSH
6422: LD_EXP 41
6426: PUSH
6427: LD_VAR 0 8
6431: PPUSH
6432: CALL_OW 311
6436: DIFF
6437: ST_TO_ADDR
// RemoveUnit ( un ) ;
6438: LD_VAR 0 8
6442: PPUSH
6443: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6447: LD_ADDR_EXP 15
6451: PUSH
6452: LD_EXP 15
6456: PUSH
6457: LD_INT 1
6459: PLUS
6460: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6461: LD_ADDR_EXP 41
6465: PUSH
6466: LD_EXP 41
6470: PUSH
6471: LD_VAR 0 8
6475: DIFF
6476: ST_TO_ADDR
// RemoveUnit ( un ) ;
6477: LD_VAR 0 8
6481: PPUSH
6482: CALL_OW 64
// break ;
6486: GO 6938
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6488: LD_VAR 0 8
6492: PPUSH
6493: CALL_OW 305
6497: NOT
6498: PUSH
6499: LD_VAR 0 8
6503: PPUSH
6504: CALL_OW 310
6508: NOT
6509: AND
6510: IFFALSE 6528
// ruConvoySquad := ruConvoySquad diff un ;
6512: LD_ADDR_EXP 41
6516: PUSH
6517: LD_EXP 41
6521: PUSH
6522: LD_VAR 0 8
6526: DIFF
6527: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6528: LD_VAR 0 8
6532: PPUSH
6533: CALL_OW 302
6537: PUSH
6538: LD_VAR 0 8
6542: PPUSH
6543: CALL_OW 314
6547: NOT
6548: AND
6549: IFFALSE 6936
// begin tag := GetTag ( un ) ;
6551: LD_ADDR_VAR 0 9
6555: PUSH
6556: LD_VAR 0 8
6560: PPUSH
6561: CALL_OW 110
6565: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6566: LD_VAR 0 8
6570: PPUSH
6571: LD_VAR 0 7
6575: PUSH
6576: LD_VAR 0 9
6580: PUSH
6581: LD_INT 1
6583: PLUS
6584: ARRAY
6585: PUSH
6586: LD_INT 1
6588: ARRAY
6589: PPUSH
6590: LD_VAR 0 7
6594: PUSH
6595: LD_VAR 0 9
6599: PUSH
6600: LD_INT 1
6602: PLUS
6603: ARRAY
6604: PUSH
6605: LD_INT 2
6607: ARRAY
6608: PPUSH
6609: CALL_OW 297
6613: PUSH
6614: LD_INT 6
6616: LESS
6617: IFFALSE 6728
// begin SetTag ( un , tag + 1 ) ;
6619: LD_VAR 0 8
6623: PPUSH
6624: LD_VAR 0 9
6628: PUSH
6629: LD_INT 1
6631: PLUS
6632: PPUSH
6633: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6637: LD_VAR 0 8
6641: PPUSH
6642: CALL_OW 247
6646: PUSH
6647: LD_INT 2
6649: EQUAL
6650: PUSH
6651: LD_VAR 0 8
6655: PPUSH
6656: CALL_OW 257
6660: PUSH
6661: LD_INT 3
6663: EQUAL
6664: OR
6665: IFFALSE 6726
// begin AddComWait ( un , 0 0$4 ) ;
6667: LD_VAR 0 8
6671: PPUSH
6672: LD_INT 140
6674: PPUSH
6675: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6679: LD_VAR 0 8
6683: PPUSH
6684: LD_VAR 0 7
6688: PUSH
6689: LD_VAR 0 9
6693: PUSH
6694: LD_INT 1
6696: PLUS
6697: ARRAY
6698: PUSH
6699: LD_INT 1
6701: ARRAY
6702: PPUSH
6703: LD_VAR 0 7
6707: PUSH
6708: LD_VAR 0 9
6712: PUSH
6713: LD_INT 1
6715: PLUS
6716: ARRAY
6717: PUSH
6718: LD_INT 2
6720: ARRAY
6721: PPUSH
6722: CALL_OW 174
// end ; end else
6726: GO 6936
// begin if GetClass ( un ) = 4 then
6728: LD_VAR 0 8
6732: PPUSH
6733: CALL_OW 257
6737: PUSH
6738: LD_INT 4
6740: EQUAL
6741: IFFALSE 6889
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6743: LD_EXP 41
6747: PPUSH
6748: LD_INT 21
6750: PUSH
6751: LD_INT 1
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PUSH
6758: LD_INT 3
6760: PUSH
6761: LD_INT 24
6763: PUSH
6764: LD_INT 1000
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: PPUSH
6779: CALL_OW 72
6783: IFFALSE 6841
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6785: LD_VAR 0 8
6789: PPUSH
6790: LD_EXP 41
6794: PPUSH
6795: LD_INT 21
6797: PUSH
6798: LD_INT 1
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PUSH
6805: LD_INT 3
6807: PUSH
6808: LD_INT 24
6810: PUSH
6811: LD_INT 1000
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PPUSH
6826: CALL_OW 72
6830: PUSH
6831: LD_INT 1
6833: ARRAY
6834: PPUSH
6835: CALL_OW 128
6839: GO 6887
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
6841: LD_VAR 0 8
6845: PPUSH
6846: LD_EXP 41
6850: PPUSH
6851: LD_INT 3
6853: PUSH
6854: LD_INT 25
6856: PUSH
6857: LD_INT 4
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PPUSH
6868: CALL_OW 72
6872: PPUSH
6873: LD_VAR 0 8
6877: PPUSH
6878: CALL_OW 74
6882: PPUSH
6883: CALL_OW 112
6887: GO 6936
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6889: LD_VAR 0 8
6893: PPUSH
6894: LD_VAR 0 7
6898: PUSH
6899: LD_VAR 0 9
6903: PUSH
6904: LD_INT 1
6906: PLUS
6907: ARRAY
6908: PUSH
6909: LD_INT 1
6911: ARRAY
6912: PPUSH
6913: LD_VAR 0 7
6917: PUSH
6918: LD_VAR 0 9
6922: PUSH
6923: LD_INT 1
6925: PLUS
6926: ARRAY
6927: PUSH
6928: LD_INT 2
6930: ARRAY
6931: PPUSH
6932: CALL_OW 114
// end ; end ; end ;
6936: GO 6385
6938: POP
6939: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
6940: LD_EXP 41
6944: PPUSH
6945: LD_INT 52
6947: PUSH
6948: EMPTY
6949: LIST
6950: PUSH
6951: LD_INT 21
6953: PUSH
6954: LD_INT 1
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 72
6969: NOT
6970: IFFALSE 6368
// end ;
6972: LD_VAR 0 1
6976: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
6977: LD_EXP 16
6981: PUSH
6982: LD_INT 3
6984: PPUSH
6985: LD_INT 5
6987: PPUSH
6988: CALL_OW 12
6992: LESS
6993: PUSH
6994: LD_EXP 41
6998: NOT
6999: AND
7000: PUSH
7001: LD_OWVAR 67
7005: PUSH
7006: LD_INT 1
7008: GREATER
7009: AND
7010: IFFALSE 7398
7012: GO 7014
7014: DISABLE
7015: LD_INT 0
7017: PPUSH
7018: PPUSH
7019: PPUSH
// begin uc_side := 3 ;
7020: LD_ADDR_OWVAR 20
7024: PUSH
7025: LD_INT 3
7027: ST_TO_ADDR
// uc_nation := 3 ;
7028: LD_ADDR_OWVAR 21
7032: PUSH
7033: LD_INT 3
7035: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
7036: LD_ADDR_VAR 0 1
7040: PUSH
7041: DOUBLE
7042: LD_INT 1
7044: DEC
7045: ST_TO_ADDR
7046: LD_INT 2
7048: PUSH
7049: LD_INT 3
7051: PUSH
7052: LD_INT 4
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: LIST
7059: PUSH
7060: LD_OWVAR 67
7064: ARRAY
7065: PUSH
7066: FOR_TO
7067: IFFALSE 7319
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7069: LD_INT 3
7071: PPUSH
7072: LD_INT 3
7074: PPUSH
7075: LD_INT 21
7077: PUSH
7078: LD_INT 22
7080: PUSH
7081: LD_INT 23
7083: PUSH
7084: LD_INT 24
7086: PUSH
7087: LD_INT 24
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: PUSH
7097: LD_OWVAR 67
7101: PPUSH
7102: LD_OWVAR 67
7106: PUSH
7107: LD_INT 2
7109: PLUS
7110: PPUSH
7111: CALL_OW 12
7115: ARRAY
7116: PPUSH
7117: LD_INT 1
7119: PPUSH
7120: LD_INT 1
7122: PPUSH
7123: LD_INT 42
7125: PUSH
7126: LD_INT 44
7128: PUSH
7129: LD_INT 43
7131: PUSH
7132: LD_INT 44
7134: PUSH
7135: LD_INT 46
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: PUSH
7145: LD_INT 1
7147: PPUSH
7148: LD_OWVAR 67
7152: PUSH
7153: LD_INT 2
7155: PLUS
7156: PPUSH
7157: CALL_OW 12
7161: ARRAY
7162: PPUSH
7163: LD_INT 90
7165: PPUSH
7166: CALL 435 0 7
// un := CreateVehicle ;
7170: LD_ADDR_VAR 0 3
7174: PUSH
7175: CALL_OW 45
7179: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7180: LD_VAR 0 3
7184: PPUSH
7185: LD_INT 0
7187: PPUSH
7188: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7192: LD_VAR 0 3
7196: PPUSH
7197: LD_INT 23
7199: PPUSH
7200: LD_INT 0
7202: PPUSH
7203: CALL 66917 0 3
7207: IFFALSE 7317
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7209: LD_ADDR_VAR 0 2
7213: PUSH
7214: LD_VAR 0 2
7218: PPUSH
7219: LD_VAR 0 2
7223: PUSH
7224: LD_INT 1
7226: PLUS
7227: PPUSH
7228: LD_VAR 0 3
7232: PPUSH
7233: CALL_OW 1
7237: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
7238: LD_INT 0
7240: PPUSH
7241: LD_INT 3
7243: PUSH
7244: LD_INT 4
7246: PUSH
7247: LD_INT 5
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: LIST
7254: PUSH
7255: LD_OWVAR 67
7259: ARRAY
7260: PPUSH
7261: CALL_OW 383
// un := CreateHuman ;
7265: LD_ADDR_VAR 0 3
7269: PUSH
7270: CALL_OW 44
7274: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7275: LD_VAR 0 3
7279: PPUSH
7280: LD_VAR 0 2
7284: PUSH
7285: LD_VAR 0 2
7289: ARRAY
7290: PPUSH
7291: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7295: LD_VAR 0 3
7299: PPUSH
7300: LD_INT 80
7302: PPUSH
7303: LD_INT 139
7305: PPUSH
7306: CALL_OW 111
// wait ( 0 0$3 ) ;
7310: LD_INT 105
7312: PPUSH
7313: CALL_OW 67
// end ; end ;
7317: GO 7066
7319: POP
7320: POP
// for i in tmp do
7321: LD_ADDR_VAR 0 1
7325: PUSH
7326: LD_VAR 0 2
7330: PUSH
7331: FOR_IN
7332: IFFALSE 7396
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7334: LD_VAR 0 1
7338: PPUSH
7339: LD_INT 101
7341: PPUSH
7342: LD_INT 102
7344: PPUSH
7345: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7349: LD_VAR 0 1
7353: PPUSH
7354: LD_INT 110
7356: PPUSH
7357: LD_INT 78
7359: PPUSH
7360: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7364: LD_VAR 0 1
7368: PPUSH
7369: LD_INT 75
7371: PPUSH
7372: LD_INT 101
7374: PPUSH
7375: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7379: LD_VAR 0 1
7383: PPUSH
7384: LD_INT 57
7386: PPUSH
7387: LD_INT 83
7389: PPUSH
7390: CALL_OW 174
// end ;
7394: GO 7331
7396: POP
7397: POP
// end ; end_of_file
7398: PPOPN 3
7400: END
// on UnitDestroyed ( un ) do begin if un = Heike then
7401: LD_VAR 0 1
7405: PUSH
7406: LD_EXP 21
7410: EQUAL
7411: IFFALSE 7420
// YouLost ( Heike ) ;
7413: LD_STRING Heike
7415: PPUSH
7416: CALL_OW 104
// if un in apeSoldGroup then
7420: LD_VAR 0 1
7424: PUSH
7425: LD_EXP 42
7429: IN
7430: IFFALSE 7448
// apeSoldGroup := apeSoldGroup diff un ;
7432: LD_ADDR_EXP 42
7436: PUSH
7437: LD_EXP 42
7441: PUSH
7442: LD_VAR 0 1
7446: DIFF
7447: ST_TO_ADDR
// if un in apeEngGroup then
7448: LD_VAR 0 1
7452: PUSH
7453: LD_EXP 43
7457: IN
7458: IFFALSE 7476
// apeEngGroup := apeEngGroup diff un ;
7460: LD_ADDR_EXP 43
7464: PUSH
7465: LD_EXP 43
7469: PUSH
7470: LD_VAR 0 1
7474: DIFF
7475: ST_TO_ADDR
// if un in oilBaseGuard then
7476: LD_VAR 0 1
7480: PUSH
7481: LD_EXP 38
7485: IN
7486: IFFALSE 7504
// oilBaseGuard := oilBaseGuard diff un ;
7488: LD_ADDR_EXP 38
7492: PUSH
7493: LD_EXP 38
7497: PUSH
7498: LD_VAR 0 1
7502: DIFF
7503: ST_TO_ADDR
// if un in ruNorthGroup then
7504: LD_VAR 0 1
7508: PUSH
7509: LD_EXP 39
7513: IN
7514: IFFALSE 7532
// ruNorthGroup := ruNorthGroup diff un ;
7516: LD_ADDR_EXP 39
7520: PUSH
7521: LD_EXP 39
7525: PUSH
7526: LD_VAR 0 1
7530: DIFF
7531: ST_TO_ADDR
// if un in ruSouthGroup then
7532: LD_VAR 0 1
7536: PUSH
7537: LD_EXP 40
7541: IN
7542: IFFALSE 7560
// ruSouthGroup := ruSouthGroup diff un ;
7544: LD_ADDR_EXP 40
7548: PUSH
7549: LD_EXP 40
7553: PUSH
7554: LD_VAR 0 1
7558: DIFF
7559: ST_TO_ADDR
// if un in ruConvoySquad then
7560: LD_VAR 0 1
7564: PUSH
7565: LD_EXP 41
7569: IN
7570: IFFALSE 7588
// ruConvoySquad := ruConvoySquad diff un ;
7572: LD_ADDR_EXP 41
7576: PUSH
7577: LD_EXP 41
7581: PUSH
7582: LD_VAR 0 1
7586: DIFF
7587: ST_TO_ADDR
// end ;
7588: PPOPN 1
7590: END
// on VehicleConstructed ( veh , fac ) do begin if GetWeapon ( veh ) = ar_radar then
7591: LD_VAR 0 1
7595: PPUSH
7596: CALL_OW 264
7600: PUSH
7601: LD_INT 30
7603: EQUAL
7604: IFFALSE 7614
// radarConstructed := true ;
7606: LD_ADDR_EXP 13
7610: PUSH
7611: LD_INT 1
7613: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
7614: LD_VAR 0 1
7618: PPUSH
7619: CALL_OW 264
7623: PUSH
7624: LD_INT 26
7626: EQUAL
7627: IFFALSE 7637
// flamethrowerBuilt := true ;
7629: LD_ADDR_EXP 20
7633: PUSH
7634: LD_INT 1
7636: ST_TO_ADDR
// end ;
7637: PPOPN 2
7639: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
7640: LD_ADDR_EXP 18
7644: PUSH
7645: LD_EXP 18
7649: PUSH
7650: LD_INT 1
7652: PLUS
7653: ST_TO_ADDR
// if oldId in ruConvoySquad then
7654: LD_VAR 0 2
7658: PUSH
7659: LD_EXP 41
7663: IN
7664: IFFALSE 7682
// ruConvoySquad := ruConvoySquad diff oldId ;
7666: LD_ADDR_EXP 41
7670: PUSH
7671: LD_EXP 41
7675: PUSH
7676: LD_VAR 0 2
7680: DIFF
7681: ST_TO_ADDR
// if newId in ruConvoySquad then
7682: LD_VAR 0 1
7686: PUSH
7687: LD_EXP 41
7691: IN
7692: IFFALSE 7710
// ruConvoySquad := ruConvoySquad diff newId ;
7694: LD_ADDR_EXP 41
7698: PUSH
7699: LD_EXP 41
7703: PUSH
7704: LD_VAR 0 1
7708: DIFF
7709: ST_TO_ADDR
// end ; end_of_file
7710: PPOPN 4
7712: END
// export function Action ; var i , p , un , veh , tmp ; begin
7713: LD_INT 0
7715: PPUSH
7716: PPUSH
7717: PPUSH
7718: PPUSH
7719: PPUSH
7720: PPUSH
// InGameOn ;
7721: CALL_OW 8
// music_nat := 2 ;
7725: LD_ADDR_OWVAR 71
7729: PUSH
7730: LD_INT 2
7732: ST_TO_ADDR
// music_class := music_recon ;
7733: LD_ADDR_OWVAR 72
7737: PUSH
7738: LD_INT 3
7740: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
7741: LD_INT 7
7743: PPUSH
7744: LD_INT 6
7746: PPUSH
7747: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 20 ) ;
7751: LD_INT 7
7753: PPUSH
7754: LD_INT 6
7756: PPUSH
7757: LD_INT 2
7759: PPUSH
7760: LD_INT 20
7762: NEG
7763: PPUSH
7764: CALL 1219 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Aviradze ] ;
7768: LD_ADDR_VAR 0 6
7772: PUSH
7773: LD_EXP 21
7777: PUSH
7778: LD_EXP 22
7782: PUSH
7783: LD_EXP 23
7787: PUSH
7788: LD_EXP 24
7792: PUSH
7793: LD_EXP 25
7797: PUSH
7798: LD_EXP 26
7802: PUSH
7803: LD_EXP 27
7807: PUSH
7808: LD_EXP 28
7812: PUSH
7813: LD_EXP 33
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: ST_TO_ADDR
// tmp := tmp diff 0 ;
7829: LD_ADDR_VAR 0 6
7833: PUSH
7834: LD_VAR 0 6
7838: PUSH
7839: LD_INT 0
7841: DIFF
7842: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
7843: LD_ADDR_VAR 0 6
7847: PUSH
7848: LD_VAR 0 6
7852: PPUSH
7853: LD_INT 3
7855: PPUSH
7856: CALL 66509 0 2
7860: ST_TO_ADDR
// for i in heikeVehicles do
7861: LD_ADDR_VAR 0 2
7865: PUSH
7866: LD_EXP 35
7870: PUSH
7871: FOR_IN
7872: IFFALSE 8071
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
7874: LD_INT 5
7876: PPUSH
7877: LD_VAR 0 2
7881: PUSH
7882: LD_INT 5
7884: ARRAY
7885: PPUSH
7886: LD_VAR 0 2
7890: PUSH
7891: LD_INT 1
7893: ARRAY
7894: PPUSH
7895: LD_VAR 0 2
7899: PUSH
7900: LD_INT 2
7902: ARRAY
7903: PPUSH
7904: LD_VAR 0 2
7908: PUSH
7909: LD_INT 3
7911: ARRAY
7912: PPUSH
7913: LD_VAR 0 2
7917: PUSH
7918: LD_INT 4
7920: ARRAY
7921: PPUSH
7922: LD_INT 34
7924: PPUSH
7925: CALL 435 0 7
// veh := CreateVehicle ;
7929: LD_ADDR_VAR 0 5
7933: PUSH
7934: CALL_OW 45
7938: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
7939: LD_VAR 0 2
7943: PUSH
7944: LD_INT 4
7946: ARRAY
7947: PUSH
7948: LD_INT 51
7950: PUSH
7951: LD_INT 32
7953: PUSH
7954: LD_INT 12
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: LIST
7961: IN
7962: IFFALSE 8042
// begin if i [ 7 ] [ 1 ] then
7964: LD_VAR 0 2
7968: PUSH
7969: LD_INT 7
7971: ARRAY
7972: PUSH
7973: LD_INT 1
7975: ARRAY
7976: IFFALSE 8003
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
7978: LD_VAR 0 5
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: LD_VAR 0 2
7990: PUSH
7991: LD_INT 7
7993: ARRAY
7994: PUSH
7995: LD_INT 1
7997: ARRAY
7998: PPUSH
7999: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8003: LD_VAR 0 2
8007: PUSH
8008: LD_INT 7
8010: ARRAY
8011: PUSH
8012: LD_INT 2
8014: ARRAY
8015: IFFALSE 8042
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8017: LD_VAR 0 5
8021: PPUSH
8022: LD_INT 2
8024: PPUSH
8025: LD_VAR 0 2
8029: PUSH
8030: LD_INT 7
8032: ARRAY
8033: PUSH
8034: LD_INT 2
8036: ARRAY
8037: PPUSH
8038: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8042: LD_VAR 0 5
8046: PPUSH
8047: LD_INT 2
8049: PPUSH
8050: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8054: LD_VAR 0 5
8058: PPUSH
8059: LD_INT 4
8061: PPUSH
8062: LD_INT 0
8064: PPUSH
8065: CALL_OW 49
// end ;
8069: GO 7871
8071: POP
8072: POP
// if tmp then
8073: LD_VAR 0 6
8077: IFFALSE 8187
// begin p := 0 ;
8079: LD_ADDR_VAR 0 3
8083: PUSH
8084: LD_INT 0
8086: ST_TO_ADDR
// for i in tmp do
8087: LD_ADDR_VAR 0 2
8091: PUSH
8092: LD_VAR 0 6
8096: PUSH
8097: FOR_IN
8098: IFFALSE 8185
// begin p := p + 1 ;
8100: LD_ADDR_VAR 0 3
8104: PUSH
8105: LD_VAR 0 3
8109: PUSH
8110: LD_INT 1
8112: PLUS
8113: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8114: LD_VAR 0 2
8118: PPUSH
8119: LD_INT 5
8121: PPUSH
8122: LD_INT 0
8124: PPUSH
8125: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8129: LD_VAR 0 2
8133: PPUSH
8134: LD_INT 26
8136: PPUSH
8137: LD_INT 9
8139: PPUSH
8140: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8144: LD_VAR 0 3
8148: PUSH
8149: LD_EXP 35
8153: GREATEREQUAL
8154: PUSH
8155: LD_VAR 0 2
8159: PPUSH
8160: CALL_OW 257
8164: PUSH
8165: LD_INT 3
8167: EQUAL
8168: AND
8169: IFFALSE 8183
// SetClass ( i , 1 ) ;
8171: LD_VAR 0 2
8175: PPUSH
8176: LD_INT 1
8178: PPUSH
8179: CALL_OW 336
// end ;
8183: GO 8097
8185: POP
8186: POP
// end ; if heikeSecondSquad then
8187: LD_EXP 34
8191: IFFALSE 8293
// for i in heikeSecondSquad do
8193: LD_ADDR_VAR 0 2
8197: PUSH
8198: LD_EXP 34
8202: PUSH
8203: FOR_IN
8204: IFFALSE 8291
// begin p := p + 1 ;
8206: LD_ADDR_VAR 0 3
8210: PUSH
8211: LD_VAR 0 3
8215: PUSH
8216: LD_INT 1
8218: PLUS
8219: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8220: LD_VAR 0 2
8224: PPUSH
8225: LD_INT 6
8227: PPUSH
8228: LD_INT 0
8230: PPUSH
8231: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8235: LD_VAR 0 2
8239: PPUSH
8240: LD_INT 26
8242: PPUSH
8243: LD_INT 9
8245: PPUSH
8246: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8250: LD_VAR 0 3
8254: PUSH
8255: LD_EXP 35
8259: GREATEREQUAL
8260: PUSH
8261: LD_VAR 0 2
8265: PPUSH
8266: CALL_OW 257
8270: PUSH
8271: LD_INT 3
8273: EQUAL
8274: AND
8275: IFFALSE 8289
// SetClass ( i , 1 ) ;
8277: LD_VAR 0 2
8281: PPUSH
8282: LD_INT 1
8284: PPUSH
8285: CALL_OW 336
// end ;
8289: GO 8203
8291: POP
8292: POP
// if heikeApes then
8293: LD_EXP 36
8297: IFFALSE 8340
// for i in heikeApes do
8299: LD_ADDR_VAR 0 2
8303: PUSH
8304: LD_EXP 36
8308: PUSH
8309: FOR_IN
8310: IFFALSE 8338
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8312: LD_VAR 0 2
8316: PPUSH
8317: LD_INT 7
8319: PPUSH
8320: LD_INT 0
8322: PPUSH
8323: CALL_OW 49
// ComHold ( i ) ;
8327: LD_VAR 0 2
8331: PPUSH
8332: CALL_OW 140
// end ;
8336: GO 8309
8338: POP
8339: POP
// if Kurt then
8340: LD_EXP 32
8344: IFFALSE 8376
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8346: LD_EXP 32
8350: PPUSH
8351: LD_INT 8
8353: PPUSH
8354: LD_INT 0
8356: PPUSH
8357: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8361: LD_EXP 32
8365: PPUSH
8366: LD_INT 42
8368: PPUSH
8369: LD_INT 32
8371: PPUSH
8372: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
8376: LD_INT 70
8378: PPUSH
8379: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
8383: LD_EXP 21
8387: PPUSH
8388: LD_STRING DH-Start-1
8390: PPUSH
8391: CALL_OW 88
// if Givi then
8395: LD_EXP 22
8399: IFFALSE 8662
// begin Say ( Givi , DG-Start-2-5 ) ;
8401: LD_EXP 22
8405: PPUSH
8406: LD_STRING DG-Start-2-5
8408: PPUSH
8409: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8413: LD_EXP 21
8417: PPUSH
8418: LD_STRING DH-Start-3
8420: PPUSH
8421: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8425: LD_EXP 21
8429: PPUSH
8430: LD_STRING DH-Start-4
8432: PPUSH
8433: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8437: LD_EXP 22
8441: PPUSH
8442: LD_STRING DG-Start-5
8444: PPUSH
8445: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8449: LD_EXP 21
8453: PPUSH
8454: LD_STRING DH-Start-6
8456: PPUSH
8457: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8461: LD_EXP 22
8465: PPUSH
8466: LD_STRING DG-Start-7
8468: PPUSH
8469: CALL_OW 88
// if Mike then
8473: LD_EXP 23
8477: IFFALSE 8650
// begin Say ( Mike , DM-Start-8 ) ;
8479: LD_EXP 23
8483: PPUSH
8484: LD_STRING DM-Start-8
8486: PPUSH
8487: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8491: LD_EXP 23
8495: PPUSH
8496: LD_STRING DM-Start-9
8498: PPUSH
8499: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8503: LD_EXP 22
8507: PPUSH
8508: LD_STRING DG-Start-10
8510: PPUSH
8511: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8515: LD_EXP 22
8519: PPUSH
8520: LD_STRING DG-Start-11
8522: PPUSH
8523: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8527: LD_EXP 21
8531: PPUSH
8532: LD_STRING DH-Start-12
8534: PPUSH
8535: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8539: LD_EXP 22
8543: PPUSH
8544: LD_STRING DG-Start-13
8546: PPUSH
8547: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8551: LD_EXP 22
8555: PPUSH
8556: LD_STRING DG-Start-14
8558: PPUSH
8559: CALL_OW 88
// if Kaia then
8563: LD_EXP 26
8567: IFFALSE 8650
// begin Say ( Kaia , DK-Start-15 ) ;
8569: LD_EXP 26
8573: PPUSH
8574: LD_STRING DK-Start-15
8576: PPUSH
8577: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8581: LD_EXP 26
8585: PPUSH
8586: LD_STRING DK-Start-16
8588: PPUSH
8589: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8593: LD_EXP 26
8597: PPUSH
8598: LD_STRING DK-Start-17
8600: PPUSH
8601: CALL_OW 88
// wait ( 0 0$0.3 ) ;
8605: LD_INT 10
8607: PPUSH
8608: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
8612: LD_EXP 22
8616: PPUSH
8617: LD_EXP 26
8621: PPUSH
8622: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
8626: LD_EXP 22
8630: PPUSH
8631: LD_STRING DG-Start-18
8633: PPUSH
8634: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
8638: LD_EXP 26
8642: PPUSH
8643: LD_STRING DK-Start-19
8645: PPUSH
8646: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
8650: LD_EXP 21
8654: PPUSH
8655: LD_STRING DH-Start-20
8657: PPUSH
8658: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
8662: LD_INT 70
8664: PPUSH
8665: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
8669: LD_EXP 29
8673: PPUSH
8674: LD_STRING DShar-Start-21
8676: PPUSH
8677: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
8681: LD_EXP 21
8685: PPUSH
8686: LD_STRING DH-Start-22
8688: PPUSH
8689: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
8693: LD_EXP 29
8697: PPUSH
8698: LD_STRING DShar-Start-23
8700: PPUSH
8701: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
8705: LD_EXP 29
8709: PPUSH
8710: LD_STRING DShar-Start-24
8712: PPUSH
8713: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
8717: LD_EXP 29
8721: PPUSH
8722: LD_STRING DShar-Start-25
8724: PPUSH
8725: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
8729: LD_EXP 29
8733: PPUSH
8734: LD_STRING DShar-Start-26
8736: PPUSH
8737: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
8741: LD_EXP 21
8745: PPUSH
8746: LD_STRING DH-Start-27
8748: PPUSH
8749: CALL_OW 88
// if Kaia then
8753: LD_EXP 26
8757: IFFALSE 8799
// begin ComTurnUnit ( Heike , Kaia ) ;
8759: LD_EXP 21
8763: PPUSH
8764: LD_EXP 26
8768: PPUSH
8769: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
8773: LD_EXP 26
8777: PPUSH
8778: LD_STRING DK-Start-28
8780: PPUSH
8781: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
8785: LD_EXP 21
8789: PPUSH
8790: LD_STRING DH-Start-29
8792: PPUSH
8793: CALL_OW 88
// end else
8797: GO 8811
// Say ( Heike , DH-Start-a-28 ) ;
8799: LD_EXP 21
8803: PPUSH
8804: LD_STRING DH-Start-a-28
8806: PPUSH
8807: CALL_OW 88
// if Givi then
8811: LD_EXP 22
8815: IFFALSE 9050
// begin ComTurnUnit ( Heike , Givi ) ;
8817: LD_EXP 21
8821: PPUSH
8822: LD_EXP 22
8826: PPUSH
8827: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
8831: LD_EXP 22
8835: PPUSH
8836: LD_EXP 21
8840: PPUSH
8841: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
8845: LD_EXP 21
8849: PPUSH
8850: LD_STRING DH-Start-30
8852: PPUSH
8853: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
8857: LD_EXP 21
8861: PPUSH
8862: LD_STRING DH-Start-31
8864: PPUSH
8865: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
8869: LD_EXP 22
8873: PPUSH
8874: LD_STRING DG-Start-32
8876: PPUSH
8877: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
8881: LD_EXP 21
8885: PPUSH
8886: LD_STRING DH-Start-33
8888: PPUSH
8889: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
8893: LD_EXP 22
8897: PPUSH
8898: LD_STRING DG-Start-34
8900: PPUSH
8901: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
8905: LD_EXP 22
8909: PPUSH
8910: LD_STRING DG-Start-35
8912: PPUSH
8913: CALL_OW 88
// if Kurt and not dialogue_skipped then
8917: LD_EXP 32
8921: PUSH
8922: LD_OWVAR 59
8926: NOT
8927: AND
8928: IFFALSE 8959
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
8930: LD_EXP 32
8934: PPUSH
8935: LD_INT 28
8937: PPUSH
8938: LD_INT 13
8940: PPUSH
8941: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
8945: LD_EXP 32
8949: PPUSH
8950: LD_EXP 21
8954: PPUSH
8955: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
8959: LD_EXP 22
8963: PPUSH
8964: LD_STRING DG-Start-36
8966: PPUSH
8967: CALL_OW 88
// if Kurt then
8971: LD_EXP 32
8975: IFFALSE 9048
// begin if not Givi then
8977: LD_EXP 22
8981: NOT
8982: IFFALSE 8998
// Say ( Kurt , DKs-Start-37-a ) else
8984: LD_EXP 32
8988: PPUSH
8989: LD_STRING DKs-Start-37-a
8991: PPUSH
8992: CALL_OW 88
8996: GO 9010
// Say ( Kurt , DKs-Start-37 ) ;
8998: LD_EXP 32
9002: PPUSH
9003: LD_STRING DKs-Start-37
9005: PPUSH
9006: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9010: LD_EXP 32
9014: PPUSH
9015: LD_STRING DKs-Start-38
9017: PPUSH
9018: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9022: LD_EXP 21
9026: PPUSH
9027: LD_EXP 32
9031: PPUSH
9032: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9036: LD_EXP 21
9040: PPUSH
9041: LD_STRING DH-Start-39
9043: PPUSH
9044: CALL_OW 88
// end ; end else
9048: GO 9079
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9050: LD_EXP 34
9054: PPUSH
9055: LD_STRING DArm-Start-a-37
9057: PPUSH
9058: LD_STRING DArf-Start-a-37
9060: PPUSH
9061: CALL 1270 0 3
9065: IFFALSE 9079
// Say ( Heike , DH-Start-39 ) ;
9067: LD_EXP 21
9071: PPUSH
9072: LD_STRING DH-Start-39
9074: PPUSH
9075: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9079: LD_INT 44
9081: PPUSH
9082: LD_INT 25
9084: PPUSH
9085: CALL_OW 428
9089: IFFALSE 9106
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9091: LD_INT 44
9093: PPUSH
9094: LD_INT 25
9096: PPUSH
9097: CALL_OW 428
9101: PPUSH
9102: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9106: LD_EXP 30
9110: PPUSH
9111: LD_INT 5
9113: PPUSH
9114: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9118: LD_EXP 30
9122: PPUSH
9123: LD_INT 44
9125: PPUSH
9126: LD_INT 25
9128: PPUSH
9129: LD_INT 0
9131: PPUSH
9132: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9136: LD_EXP 30
9140: PPUSH
9141: LD_INT 29
9143: PPUSH
9144: LD_INT 12
9146: PPUSH
9147: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9151: LD_INT 35
9153: PPUSH
9154: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9158: LD_OWVAR 59
9162: PUSH
9163: LD_EXP 21
9167: PPUSH
9168: LD_EXP 30
9172: PPUSH
9173: CALL_OW 296
9177: PUSH
9178: LD_INT 8
9180: LESS
9181: OR
9182: PUSH
9183: LD_EXP 30
9187: PPUSH
9188: LD_INT 26
9190: PPUSH
9191: LD_INT 9
9193: PPUSH
9194: CALL_OW 297
9198: PUSH
9199: LD_INT 6
9201: LESS
9202: OR
9203: IFFALSE 9151
// Say ( Olaf , DO-Scout-1 ) ;
9205: LD_EXP 30
9209: PPUSH
9210: LD_STRING DO-Scout-1
9212: PPUSH
9213: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9217: LD_EXP 30
9221: PPUSH
9222: LD_EXP 21
9226: PPUSH
9227: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9231: LD_ADDR_VAR 0 2
9235: PUSH
9236: LD_VAR 0 6
9240: PUSH
9241: LD_EXP 34
9245: UNION
9246: PUSH
9247: FOR_IN
9248: IFFALSE 9266
// ComTurnUnit ( i , Olaf ) ;
9250: LD_VAR 0 2
9254: PPUSH
9255: LD_EXP 30
9259: PPUSH
9260: CALL_OW 119
9264: GO 9247
9266: POP
9267: POP
// wait ( 0 0$0.3 ) ;
9268: LD_INT 10
9270: PPUSH
9271: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9275: LD_EXP 21
9279: PPUSH
9280: LD_EXP 30
9284: PPUSH
9285: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9289: LD_EXP 21
9293: PPUSH
9294: LD_EXP 30
9298: PPUSH
9299: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9303: LD_EXP 21
9307: PPUSH
9308: LD_STRING DH-Scout-2
9310: PPUSH
9311: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9315: LD_EXP 30
9319: PPUSH
9320: LD_STRING DO-Scout-3
9322: PPUSH
9323: CALL_OW 88
// if Mike and Givi then
9327: LD_EXP 23
9331: PUSH
9332: LD_EXP 22
9336: AND
9337: IFFALSE 9353
// Say ( Olaf , DO-Scout-4 ) else
9339: LD_EXP 30
9343: PPUSH
9344: LD_STRING DO-Scout-4
9346: PPUSH
9347: CALL_OW 88
9351: GO 9453
// begin if Mike then
9353: LD_EXP 23
9357: IFFALSE 9385
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9359: LD_EXP 30
9363: PPUSH
9364: LD_STRING DO-Scout-a-4
9366: PPUSH
9367: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9371: LD_EXP 21
9375: PPUSH
9376: LD_STRING DH-Scout-a-5
9378: PPUSH
9379: CALL_OW 88
// end else
9383: GO 9453
// if Givi then
9385: LD_EXP 22
9389: IFFALSE 9417
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9391: LD_EXP 30
9395: PPUSH
9396: LD_STRING DO-Scout-b-4
9398: PPUSH
9399: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9403: LD_EXP 21
9407: PPUSH
9408: LD_STRING DH-Scout-b-5
9410: PPUSH
9411: CALL_OW 88
// end else
9415: GO 9453
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9417: LD_EXP 30
9421: PPUSH
9422: LD_STRING DO-Scout-f-4
9424: PPUSH
9425: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9429: LD_EXP 21
9433: PPUSH
9434: LD_STRING DH-Scout-f-5
9436: PPUSH
9437: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9441: LD_EXP 30
9445: PPUSH
9446: LD_STRING DO-Scout-f-6
9448: PPUSH
9449: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9453: LD_EXP 21
9457: PPUSH
9458: LD_STRING DH-Scout-5
9460: PPUSH
9461: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9465: LD_EXP 30
9469: PPUSH
9470: LD_STRING DO-Scout-6
9472: PPUSH
9473: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9477: LD_EXP 30
9481: PPUSH
9482: LD_STRING DO-Scout-7
9484: PPUSH
9485: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9489: LD_EXP 21
9493: PPUSH
9494: LD_STRING DH-Scout-8
9496: PPUSH
9497: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9501: LD_EXP 21
9505: PPUSH
9506: LD_STRING DH-Scout-9
9508: PPUSH
9509: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9513: LD_EXP 30
9517: PPUSH
9518: LD_STRING DO-Scout-10
9520: PPUSH
9521: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9525: LD_EXP 30
9529: PPUSH
9530: LD_STRING DO-Scout-12
9532: PPUSH
9533: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9537: LD_EXP 30
9541: PPUSH
9542: LD_STRING DO-Scout-13
9544: PPUSH
9545: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9549: LD_EXP 30
9553: PPUSH
9554: LD_STRING DO-Scout-14
9556: PPUSH
9557: CALL_OW 88
// if Givi then
9561: LD_EXP 22
9565: IFFALSE 9591
// begin Say ( Givi , DG-Scout-15 ) ;
9567: LD_EXP 22
9571: PPUSH
9572: LD_STRING DG-Scout-15
9574: PPUSH
9575: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9579: LD_EXP 26
9583: PPUSH
9584: LD_STRING DK-Scout-16
9586: PPUSH
9587: CALL_OW 88
// end ; if not dialogue_skipped then
9591: LD_OWVAR 59
9595: NOT
9596: IFFALSE 9717
// begin async ;
9598: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
9599: LD_EXP 30
9603: PPUSH
9604: LD_STRING DO-Scout-17
9606: PPUSH
9607: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9611: LD_INT 55
9613: PPUSH
9614: LD_INT 77
9616: PPUSH
9617: LD_INT 2
9619: PPUSH
9620: LD_INT 6
9622: NEG
9623: PPUSH
9624: CALL 1219 0 4
// wait ( 10 ) ;
9628: LD_INT 10
9630: PPUSH
9631: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
9635: LD_INT 55
9637: PPUSH
9638: LD_INT 77
9640: PPUSH
9641: CALL_OW 84
// wait ( 0 0$5 ) ;
9645: LD_INT 175
9647: PPUSH
9648: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
9652: LD_EXP 30
9656: PPUSH
9657: LD_STRING DO-Scout-18
9659: PPUSH
9660: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9664: LD_INT 204
9666: PPUSH
9667: LD_INT 107
9669: PPUSH
9670: LD_INT 2
9672: PPUSH
9673: LD_INT 12
9675: NEG
9676: PPUSH
9677: CALL 1219 0 4
// wait ( 10 ) ;
9681: LD_INT 10
9683: PPUSH
9684: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
9688: LD_INT 204
9690: PPUSH
9691: LD_INT 107
9693: PPUSH
9694: CALL_OW 84
// wait ( 0 0$5 ) ;
9698: LD_INT 175
9700: PPUSH
9701: CALL_OW 67
// sync ;
9705: SYNC
// CenterNowOnUnits ( Heike ) ;
9706: LD_EXP 21
9710: PPUSH
9711: CALL_OW 87
// end else
9715: GO 9751
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9717: LD_INT 55
9719: PPUSH
9720: LD_INT 77
9722: PPUSH
9723: LD_INT 2
9725: PPUSH
9726: LD_INT 6
9728: NEG
9729: PPUSH
9730: CALL 1219 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9734: LD_INT 204
9736: PPUSH
9737: LD_INT 107
9739: PPUSH
9740: LD_INT 2
9742: PPUSH
9743: LD_INT 12
9745: NEG
9746: PPUSH
9747: CALL 1219 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
9751: LD_EXP 30
9755: PPUSH
9756: LD_STRING DO-Scout-19
9758: PPUSH
9759: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
9763: LD_EXP 30
9767: PPUSH
9768: LD_STRING DO-Scout-20
9770: PPUSH
9771: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
9775: LD_EXP 21
9779: PPUSH
9780: LD_STRING DH-Scout-21
9782: PPUSH
9783: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
9787: LD_EXP 21
9791: PPUSH
9792: LD_STRING DH-Scout-22
9794: PPUSH
9795: CALL_OW 88
// InGameOff ;
9799: CALL_OW 9
// if Givi then
9803: LD_EXP 22
9807: IFFALSE 9822
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
9809: LD_INT 13
9811: PPUSH
9812: LD_INT 2
9814: PPUSH
9815: LD_INT 1
9817: PPUSH
9818: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
9822: LD_STRING Road
9824: PPUSH
9825: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
9829: LD_ADDR_VAR 0 2
9833: PUSH
9834: LD_INT 22
9836: PUSH
9837: LD_INT 5
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: PUSH
9844: LD_INT 21
9846: PUSH
9847: LD_INT 2
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PPUSH
9858: CALL_OW 69
9862: PUSH
9863: FOR_IN
9864: IFFALSE 9880
// SetSide ( i , 2 ) ;
9866: LD_VAR 0 2
9870: PPUSH
9871: LD_INT 2
9873: PPUSH
9874: CALL_OW 235
9878: GO 9863
9880: POP
9881: POP
// SaveForQuickRestart ;
9882: CALL_OW 22
// music_class := music_auto ;
9886: LD_ADDR_OWVAR 72
9890: PUSH
9891: LD_INT 0
9893: ST_TO_ADDR
// end ;
9894: LD_VAR 0 1
9898: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
9899: LD_INT 2
9901: PPUSH
9902: LD_INT 9
9904: PPUSH
9905: CALL_OW 294
9909: IFFALSE 10276
9911: GO 9913
9913: DISABLE
// begin DialogueOn ;
9914: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
9918: LD_INT 111
9920: PPUSH
9921: LD_INT 72
9923: PPUSH
9924: LD_INT 2
9926: PPUSH
9927: LD_INT 20
9929: NEG
9930: PPUSH
9931: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
9935: LD_INT 111
9937: PPUSH
9938: LD_INT 72
9940: PPUSH
9941: LD_INT 2
9943: PPUSH
9944: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
9948: LD_INT 111
9950: PPUSH
9951: LD_INT 72
9953: PPUSH
9954: CALL_OW 86
// if IsOk ( Kamil ) then
9958: LD_EXP 25
9962: PPUSH
9963: CALL_OW 302
9967: IFFALSE 10084
// begin Say ( Kamil , DKam-Cross-1 ) ;
9969: LD_EXP 25
9973: PPUSH
9974: LD_STRING DKam-Cross-1
9976: PPUSH
9977: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
9981: LD_EXP 25
9985: PPUSH
9986: LD_STRING DKam-Cross-2
9988: PPUSH
9989: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
9993: LD_EXP 25
9997: PPUSH
9998: LD_STRING DKam-Cross-3
10000: PPUSH
10001: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10005: LD_EXP 25
10009: PPUSH
10010: LD_STRING DKam-Cross-4
10012: PPUSH
10013: CALL_OW 88
// if IsOk ( Ibrahim ) then
10017: LD_EXP 24
10021: PPUSH
10022: CALL_OW 302
10026: IFFALSE 10082
// begin if ibrahimJoinedIn04 then
10028: LD_EXP 4
10032: IFFALSE 10046
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10034: LD_EXP 24
10038: PPUSH
10039: LD_STRING DI-Cross-b-5
10041: PPUSH
10042: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10046: LD_EXP 24
10050: PPUSH
10051: LD_STRING DI-Cross-b-6
10053: PPUSH
10054: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10058: LD_EXP 24
10062: PPUSH
10063: LD_STRING DI-Cross-b-7
10065: PPUSH
10066: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10070: LD_EXP 25
10074: PPUSH
10075: LD_STRING DKam-Cross-8
10077: PPUSH
10078: CALL_OW 88
// end ; end else
10082: GO 10242
// if IsOk ( Sophia ) then
10084: LD_EXP 27
10088: PPUSH
10089: CALL_OW 302
10093: IFFALSE 10210
// begin Say ( Sophia , DS-Cross-1 ) ;
10095: LD_EXP 27
10099: PPUSH
10100: LD_STRING DS-Cross-1
10102: PPUSH
10103: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10107: LD_EXP 27
10111: PPUSH
10112: LD_STRING DS-Cross-2
10114: PPUSH
10115: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10119: LD_EXP 27
10123: PPUSH
10124: LD_STRING DS-Cross-3
10126: PPUSH
10127: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10131: LD_EXP 27
10135: PPUSH
10136: LD_STRING DS-Cross-4
10138: PPUSH
10139: CALL_OW 88
// if IsOk ( Ibrahim ) then
10143: LD_EXP 24
10147: PPUSH
10148: CALL_OW 302
10152: IFFALSE 10208
// begin if ibrahimJoinedIn04 then
10154: LD_EXP 4
10158: IFFALSE 10172
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10160: LD_EXP 24
10164: PPUSH
10165: LD_STRING DI-Cross-b-5
10167: PPUSH
10168: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10172: LD_EXP 24
10176: PPUSH
10177: LD_STRING DI-Cross-b-6
10179: PPUSH
10180: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10184: LD_EXP 24
10188: PPUSH
10189: LD_STRING DI-Cross-b-7
10191: PPUSH
10192: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10196: LD_EXP 27
10200: PPUSH
10201: LD_STRING DS-Cross-8
10203: PPUSH
10204: CALL_OW 88
// end ; end else
10208: GO 10242
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10210: LD_EXP 34
10214: PPUSH
10215: LD_INT 50
10217: PUSH
10218: EMPTY
10219: LIST
10220: PPUSH
10221: CALL_OW 72
10225: IFFALSE 10242
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10227: LD_EXP 34
10231: PPUSH
10232: LD_STRING DArm-Cross-c-1
10234: PPUSH
10235: LD_STRING DArf-Cross-c-1
10237: PPUSH
10238: CALL 1270 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10242: LD_EXP 57
10246: PPUSH
10247: LD_INT 2
10249: PPUSH
10250: LD_INT 1
10252: PPUSH
10253: CALL_OW 322
// DialogueOff ;
10257: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10261: LD_STRING Crane
10263: PPUSH
10264: CALL_OW 337
// spottedCrossRoad := true ;
10268: LD_ADDR_EXP 8
10272: PUSH
10273: LD_INT 1
10275: ST_TO_ADDR
// end ;
10276: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10277: LD_INT 22
10279: PUSH
10280: LD_INT 2
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 2
10289: PUSH
10290: LD_INT 30
10292: PUSH
10293: LD_INT 0
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 30
10302: PUSH
10303: LD_INT 1
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: PPUSH
10319: CALL_OW 69
10323: PUSH
10324: LD_EXP 26
10328: PPUSH
10329: CALL_OW 302
10333: PUSH
10334: LD_EXP 34
10338: OR
10339: AND
10340: IFFALSE 10552
10342: GO 10344
10344: DISABLE
// begin DialogueOn ;
10345: CALL_OW 6
// if Kaia then
10349: LD_EXP 26
10353: IFFALSE 10366
// CenterNowOnUnits ( Kaia ) else
10355: LD_EXP 26
10359: PPUSH
10360: CALL_OW 87
10364: GO 10375
// CenterNowOnUnits ( Heike ) ;
10366: LD_EXP 21
10370: PPUSH
10371: CALL_OW 87
// if IsOk ( Kaia ) then
10375: LD_EXP 26
10379: PPUSH
10380: CALL_OW 302
10384: IFFALSE 10400
// Say ( Kaia , DK-Cam-1 ) else
10386: LD_EXP 26
10390: PPUSH
10391: LD_STRING DK-Cam-1
10393: PPUSH
10394: CALL_OW 88
10398: GO 10415
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10400: LD_EXP 34
10404: PPUSH
10405: LD_STRING DArm-Cam-1
10407: PPUSH
10408: LD_STRING DArf-Cam-1
10410: PPUSH
10411: CALL 1270 0 3
// Say ( Heike , DH-Cam-2 ) ;
10415: LD_EXP 21
10419: PPUSH
10420: LD_STRING DH-Cam-2
10422: PPUSH
10423: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10427: LD_EXP 21
10431: PPUSH
10432: LD_STRING DH-Cam-3
10434: PPUSH
10435: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10439: LD_EXP 21
10443: PPUSH
10444: LD_STRING DH-Cam-4
10446: PPUSH
10447: CALL_OW 88
// if IsOk ( Kaia ) then
10451: LD_EXP 26
10455: PPUSH
10456: CALL_OW 302
10460: IFFALSE 10476
// Say ( Kaia , DK-Cam-5 ) else
10462: LD_EXP 26
10466: PPUSH
10467: LD_STRING DK-Cam-5
10469: PPUSH
10470: CALL_OW 88
10474: GO 10491
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10476: LD_EXP 34
10480: PPUSH
10481: LD_STRING DArm-Cam-5
10483: PPUSH
10484: LD_STRING DArf-Cam-5
10486: PPUSH
10487: CALL 1270 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10491: LD_EXP 30
10495: PPUSH
10496: LD_STRING DO-Cam-6
10498: PPUSH
10499: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10503: LD_EXP 30
10507: PPUSH
10508: LD_STRING DO-Cam-7
10510: PPUSH
10511: CALL_OW 88
// DialogueOff ;
10515: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10519: LD_STRING Radar
10521: PPUSH
10522: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10526: LD_INT 6
10528: PPUSH
10529: LD_INT 2
10531: PPUSH
10532: LD_INT 1
10534: PPUSH
10535: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10539: LD_INT 20
10541: PPUSH
10542: LD_INT 2
10544: PPUSH
10545: LD_INT 1
10547: PPUSH
10548: CALL_OW 324
// end ;
10552: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10553: LD_INT 22
10555: PUSH
10556: LD_INT 2
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 2
10565: PUSH
10566: LD_INT 34
10568: PUSH
10569: LD_INT 30
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PUSH
10576: LD_INT 35
10578: PUSH
10579: LD_INT 30
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: LIST
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PPUSH
10595: CALL_OW 69
10599: IFFALSE 10611
10601: GO 10603
10603: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
10604: LD_STRING RadarDone
10606: PPUSH
10607: CALL_OW 337
10611: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
10612: LD_INT 22
10614: PUSH
10615: LD_INT 2
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 34
10624: PUSH
10625: LD_EXP 50
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PPUSH
10638: CALL_OW 69
10642: IFFALSE 10654
10644: GO 10646
10646: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
10647: LD_STRING CraneDone
10649: PPUSH
10650: CALL_OW 337
10654: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
10655: LD_EXP 30
10659: PPUSH
10660: CALL_OW 302
10664: PUSH
10665: LD_EXP 33
10669: PPUSH
10670: CALL_OW 302
10674: AND
10675: PUSH
10676: LD_INT 6
10678: PPUSH
10679: LD_INT 2
10681: PPUSH
10682: CALL_OW 321
10686: PUSH
10687: LD_INT 2
10689: EQUAL
10690: AND
10691: PUSH
10692: LD_EXP 33
10696: PPUSH
10697: LD_EXP 21
10701: PPUSH
10702: CALL_OW 296
10706: PUSH
10707: LD_INT 10
10709: LESS
10710: PUSH
10711: LD_EXP 33
10715: PPUSH
10716: CALL_OW 310
10720: OR
10721: AND
10722: IFFALSE 10936
10724: GO 10726
10726: DISABLE
// begin DialogueOn ;
10727: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
10731: LD_EXP 33
10735: PPUSH
10736: LD_STRING DA-RC-1
10738: PPUSH
10739: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
10743: LD_EXP 33
10747: PPUSH
10748: LD_STRING DA-RC-2
10750: PPUSH
10751: CALL_OW 88
// if IsOk ( Kaia ) then
10755: LD_EXP 26
10759: PPUSH
10760: CALL_OW 302
10764: IFFALSE 10838
// begin Say ( Kaia , DK-RC-3 ) ;
10766: LD_EXP 26
10770: PPUSH
10771: LD_STRING DK-RC-3
10773: PPUSH
10774: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
10778: LD_EXP 33
10782: PPUSH
10783: LD_STRING DA-RC-4
10785: PPUSH
10786: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
10790: LD_EXP 26
10794: PPUSH
10795: LD_STRING DK-RC-5
10797: PPUSH
10798: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
10802: LD_EXP 33
10806: PPUSH
10807: LD_STRING DA-RC-6
10809: PPUSH
10810: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
10814: LD_EXP 26
10818: PPUSH
10819: LD_STRING DK-RC-7
10821: PPUSH
10822: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
10826: LD_EXP 33
10830: PPUSH
10831: LD_STRING DA-RC-8
10833: PPUSH
10834: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
10838: LD_EXP 21
10842: PPUSH
10843: LD_STRING DH-RC-9
10845: PPUSH
10846: CALL_OW 88
// if IsOk ( Markov ) then
10850: LD_EXP 28
10854: PPUSH
10855: CALL_OW 302
10859: IFFALSE 10887
// begin Say ( Markov , DMar-RC-10 ) ;
10861: LD_EXP 28
10865: PPUSH
10866: LD_STRING DMar-RC-10
10868: PPUSH
10869: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
10873: LD_EXP 28
10877: PPUSH
10878: LD_STRING DMar-RC-11
10880: PPUSH
10881: CALL_OW 88
// end else
10885: GO 10899
// begin Say ( Olaf , DO-RC-a-10 ) ;
10887: LD_EXP 30
10891: PPUSH
10892: LD_STRING DO-RC-a-10
10894: PPUSH
10895: CALL_OW 88
// end ; DialogueOff ;
10899: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
10903: LD_STRING RemoteControl
10905: PPUSH
10906: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
10910: LD_INT 15
10912: PPUSH
10913: LD_INT 2
10915: PPUSH
10916: LD_INT 1
10918: PPUSH
10919: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
10923: LD_INT 22
10925: PPUSH
10926: LD_INT 2
10928: PPUSH
10929: LD_INT 1
10931: PPUSH
10932: CALL_OW 324
// end ;
10936: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
10937: LD_INT 12
10939: PPUSH
10940: LD_INT 22
10942: PUSH
10943: LD_INT 2
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PPUSH
10950: CALL_OW 70
10954: IFFALSE 11321
10956: GO 10958
10958: DISABLE
10959: LD_INT 0
10961: PPUSH
// begin PrepareWestBase ;
10962: CALL 3910 0 0
// westBaseSpotted := true ;
10966: LD_ADDR_EXP 5
10970: PUSH
10971: LD_INT 1
10973: ST_TO_ADDR
// wait ( 0 0$2 ) ;
10974: LD_INT 70
10976: PPUSH
10977: CALL_OW 67
// InGameOn ;
10981: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
10985: LD_INT 56
10987: PPUSH
10988: LD_INT 77
10990: PPUSH
10991: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
10995: LD_INT 56
10997: PPUSH
10998: LD_INT 77
11000: PPUSH
11001: LD_INT 2
11003: PPUSH
11004: LD_INT 12
11006: NEG
11007: PPUSH
11008: CALL_OW 330
// wait ( 0 0$2 ) ;
11012: LD_INT 70
11014: PPUSH
11015: CALL_OW 67
// DialogueOn ;
11019: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11023: LD_EXP 21
11027: PPUSH
11028: LD_STRING DH-Rbase-1
11030: PPUSH
11031: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11035: LD_EXP 26
11039: PPUSH
11040: LD_STRING DK-Rbase-2
11042: PPUSH
11043: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11047: LD_EXP 26
11051: PPUSH
11052: LD_STRING DK-Rbase-3
11054: PPUSH
11055: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11059: LD_EXP 26
11063: PPUSH
11064: LD_STRING DK-Rbase-4
11066: PPUSH
11067: CALL_OW 88
// DialogueOff ;
11071: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11075: LD_INT 56
11077: PPUSH
11078: LD_INT 77
11080: PPUSH
11081: LD_INT 2
11083: PPUSH
11084: CALL_OW 331
// InGameOff ;
11088: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11092: LD_INT 35
11094: PPUSH
11095: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11099: LD_EXP 42
11103: NOT
11104: PUSH
11105: LD_EXP 43
11109: NOT
11110: AND
11111: IFFALSE 11092
// wait ( 0 0$2 ) ;
11113: LD_INT 70
11115: PPUSH
11116: CALL_OW 67
// if IsOk ( Kaia ) then
11120: LD_EXP 26
11124: PPUSH
11125: CALL_OW 302
11129: IFFALSE 11244
// begin DialogueOn ;
11131: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11135: LD_INT 56
11137: PPUSH
11138: LD_INT 81
11140: PPUSH
11141: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11145: LD_EXP 26
11149: PPUSH
11150: LD_STRING DK-Rbase-5
11152: PPUSH
11153: CALL_OW 88
// if IsOk ( Givi ) then
11157: LD_EXP 22
11161: PPUSH
11162: CALL_OW 302
11166: IFFALSE 11240
// begin Say ( Givi , DG-Rbase-6 ) ;
11168: LD_EXP 22
11172: PPUSH
11173: LD_STRING DG-Rbase-6
11175: PPUSH
11176: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11180: LD_EXP 22
11184: PPUSH
11185: LD_STRING DG-Rbase-7
11187: PPUSH
11188: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11192: LD_EXP 26
11196: PPUSH
11197: LD_STRING DK-Rbase-8
11199: PPUSH
11200: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11204: LD_EXP 22
11208: PPUSH
11209: LD_STRING DG-Rbase-9
11211: PPUSH
11212: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11216: LD_EXP 22
11220: PPUSH
11221: LD_STRING DG-Rbase-10
11223: PPUSH
11224: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11228: LD_EXP 26
11232: PPUSH
11233: LD_STRING DK-Rbase-11
11235: PPUSH
11236: CALL_OW 88
// end ; DialogueOff ;
11240: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11244: LD_ADDR_VAR 0 1
11248: PUSH
11249: LD_INT 12
11251: PPUSH
11252: LD_INT 22
11254: PUSH
11255: LD_INT 3
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 21
11264: PUSH
11265: LD_INT 3
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 70
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11298
// SetSide ( i , 2 ) ;
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_INT 2
11291: PPUSH
11292: CALL_OW 235
11296: GO 11281
11298: POP
11299: POP
// westBaseCaptured := true ;
11300: LD_ADDR_EXP 9
11304: PUSH
11305: LD_INT 1
11307: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11308: LD_INT 0
11310: PPUSH
11311: LD_INT 2
11313: PPUSH
11314: LD_INT 1
11316: PPUSH
11317: CALL_OW 324
// end ;
11321: PPOPN 1
11323: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11324: LD_EXP 38
11328: NOT
11329: PUSH
11330: LD_INT 10
11332: PPUSH
11333: CALL_OW 255
11337: PUSH
11338: LD_INT 2
11340: EQUAL
11341: OR
11342: IFFALSE 11479
11344: GO 11346
11346: DISABLE
// begin DialogueOn ;
11347: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11351: LD_EXP 21
11355: PPUSH
11356: LD_STRING DH-Goal-1
11358: PPUSH
11359: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11363: LD_EXP 29
11367: PPUSH
11368: LD_STRING DShar-Goal-2
11370: PPUSH
11371: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11375: LD_EXP 21
11379: PPUSH
11380: LD_STRING DH-Goal-3
11382: PPUSH
11383: CALL_OW 88
// if reinforcementsAllowed then
11387: LD_EXP 14
11391: IFFALSE 11417
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11393: LD_EXP 29
11397: PPUSH
11398: LD_STRING DShar-Goal-4
11400: PPUSH
11401: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11405: LD_EXP 21
11409: PPUSH
11410: LD_STRING DH-Goal-5
11412: PPUSH
11413: CALL_OW 88
// end ; DialogueOff ;
11417: CALL_OW 7
// eastBaseCaptured := true ;
11421: LD_ADDR_EXP 10
11425: PUSH
11426: LD_INT 1
11428: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11429: LD_STRING BaseCaptured
11431: PPUSH
11432: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11436: LD_INT 10
11438: PPUSH
11439: LD_INT 2
11441: PPUSH
11442: CALL_OW 235
// if not reinforcementsAllowed then
11446: LD_EXP 14
11450: NOT
11451: IFFALSE 11455
// exit ;
11453: GO 11479
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11455: LD_INT 21000
11457: PUSH
11458: LD_INT 1050
11460: NEG
11461: PPUSH
11462: LD_INT 1050
11464: PPUSH
11465: CALL_OW 12
11469: PLUS
11470: PPUSH
11471: CALL_OW 67
// PrepareReinforcements ;
11475: CALL 2238 0 0
// end ;
11479: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11480: LD_INT 22
11482: PUSH
11483: LD_INT 2
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 30
11492: PUSH
11493: LD_INT 13
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PPUSH
11504: CALL_OW 69
11508: IFFALSE 11525
11510: GO 11512
11512: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11513: LD_EXP 22
11517: PPUSH
11518: LD_STRING DG-Lab-1
11520: PPUSH
11521: CALL_OW 88
// end ;
11525: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11526: LD_INT 5
11528: PPUSH
11529: LD_INT 2
11531: PPUSH
11532: CALL_OW 321
11536: PUSH
11537: LD_INT 2
11539: EQUAL
11540: PUSH
11541: LD_EXP 22
11545: PPUSH
11546: CALL_OW 302
11550: AND
11551: IFFALSE 11612
11553: GO 11555
11555: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11556: LD_EXP 22
11560: PPUSH
11561: LD_STRING DG-Stim-1
11563: PPUSH
11564: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11568: LD_EXP 21
11572: PPUSH
11573: LD_STRING DH-Stim-2
11575: PPUSH
11576: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11580: LD_EXP 22
11584: PPUSH
11585: LD_STRING DG-Stim-3
11587: PPUSH
11588: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
11592: LD_EXP 21
11596: PPUSH
11597: LD_STRING DH-Stim-4
11599: PPUSH
11600: CALL_OW 88
// drugsResearched := true ;
11604: LD_ADDR_EXP 11
11608: PUSH
11609: LD_INT 1
11611: ST_TO_ADDR
// end ;
11612: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
11613: LD_EXP 11
11617: IFFALSE 11929
11619: GO 11621
11621: DISABLE
11622: LD_INT 0
11624: PPUSH
11625: PPUSH
11626: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11627: LD_ADDR_VAR 0 2
11631: PUSH
11632: LD_EXP 21
11636: PUSH
11637: LD_EXP 22
11641: PUSH
11642: LD_EXP 30
11646: PUSH
11647: LD_EXP 28
11651: PUSH
11652: LD_EXP 26
11656: PUSH
11657: LD_EXP 27
11661: PUSH
11662: LD_EXP 32
11666: PUSH
11667: LD_EXP 25
11671: PUSH
11672: LD_EXP 23
11676: PUSH
11677: LD_EXP 24
11681: PUSH
11682: LD_EXP 33
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11700: LD_ADDR_VAR 0 3
11704: PUSH
11705: LD_STRING H
11707: PUSH
11708: LD_STRING G
11710: PUSH
11711: LD_STRING O
11713: PUSH
11714: LD_STRING Mar
11716: PUSH
11717: LD_STRING K
11719: PUSH
11720: LD_STRING S
11722: PUSH
11723: LD_STRING Ks
11725: PUSH
11726: LD_STRING Kam
11728: PUSH
11729: LD_STRING M
11731: PUSH
11732: LD_STRING I
11734: PUSH
11735: LD_STRING A
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11751: LD_INT 35
11753: PPUSH
11754: CALL_OW 67
// for i := tmp downto 1 do
11758: LD_ADDR_VAR 0 1
11762: PUSH
11763: DOUBLE
11764: LD_VAR 0 2
11768: INC
11769: ST_TO_ADDR
11770: LD_INT 1
11772: PUSH
11773: FOR_DOWNTO
11774: IFFALSE 11920
// if GetLives ( tmp [ i ] ) < 250 then
11776: LD_VAR 0 2
11780: PUSH
11781: LD_VAR 0 1
11785: ARRAY
11786: PPUSH
11787: CALL_OW 256
11791: PUSH
11792: LD_INT 250
11794: LESS
11795: IFFALSE 11918
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
11797: LD_ADDR_EXP 19
11801: PUSH
11802: LD_EXP 19
11806: PUSH
11807: LD_INT 1
11809: PLUS
11810: ST_TO_ADDR
// DialogueOn ;
11811: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
11815: LD_VAR 0 2
11819: PUSH
11820: LD_VAR 0 1
11824: ARRAY
11825: PPUSH
11826: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
11830: LD_VAR 0 2
11834: PUSH
11835: LD_VAR 0 1
11839: ARRAY
11840: PPUSH
11841: LD_STRING D
11843: PUSH
11844: LD_VAR 0 3
11848: PUSH
11849: LD_VAR 0 1
11853: ARRAY
11854: STR
11855: PUSH
11856: LD_STRING -Stim-a-1
11858: STR
11859: PPUSH
11860: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
11864: LD_ADDR_VAR 0 2
11868: PUSH
11869: LD_VAR 0 2
11873: PPUSH
11874: LD_VAR 0 1
11878: PPUSH
11879: CALL_OW 3
11883: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
11884: LD_ADDR_VAR 0 3
11888: PUSH
11889: LD_VAR 0 3
11893: PPUSH
11894: LD_VAR 0 1
11898: PPUSH
11899: CALL_OW 3
11903: ST_TO_ADDR
// drugsTested := true ;
11904: LD_ADDR_EXP 6
11908: PUSH
11909: LD_INT 1
11911: ST_TO_ADDR
// DialogueOff ;
11912: CALL_OW 7
// break ;
11916: GO 11920
// end ;
11918: GO 11773
11920: POP
11921: POP
// until not tmp ;
11922: LD_VAR 0 2
11926: NOT
11927: IFFALSE 11751
// end ;
11929: PPOPN 3
11931: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
11932: LD_INT 22
11934: PUSH
11935: LD_INT 2
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: LD_INT 34
11944: PUSH
11945: LD_INT 31
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PPUSH
11956: CALL_OW 69
11960: PUSH
11961: LD_INT 22
11963: PUSH
11964: LD_INT 2
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: PUSH
11971: LD_INT 33
11973: PUSH
11974: LD_INT 2
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PPUSH
11985: CALL_OW 69
11989: AND
11990: IFFALSE 12003
11992: GO 11994
11994: DISABLE
// remoteControlConstructed := true ;
11995: LD_ADDR_EXP 12
11999: PUSH
12000: LD_INT 1
12002: ST_TO_ADDR
12003: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12004: LD_EXP 12
12008: IFFALSE 12308
12010: GO 12012
12012: DISABLE
12013: LD_INT 0
12015: PPUSH
12016: PPUSH
12017: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12018: LD_ADDR_VAR 0 2
12022: PUSH
12023: LD_EXP 21
12027: PUSH
12028: LD_EXP 22
12032: PUSH
12033: LD_EXP 30
12037: PUSH
12038: LD_EXP 28
12042: PUSH
12043: LD_EXP 26
12047: PUSH
12048: LD_EXP 27
12052: PUSH
12053: LD_EXP 32
12057: PUSH
12058: LD_EXP 25
12062: PUSH
12063: LD_EXP 23
12067: PUSH
12068: LD_EXP 24
12072: PUSH
12073: LD_EXP 33
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12091: LD_ADDR_VAR 0 3
12095: PUSH
12096: LD_STRING H
12098: PUSH
12099: LD_STRING G
12101: PUSH
12102: LD_STRING O
12104: PUSH
12105: LD_STRING Mar
12107: PUSH
12108: LD_STRING K
12110: PUSH
12111: LD_STRING S
12113: PUSH
12114: LD_STRING Ks
12116: PUSH
12117: LD_STRING Kam
12119: PUSH
12120: LD_STRING M
12122: PUSH
12123: LD_STRING I
12125: PUSH
12126: LD_STRING A
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12142: LD_INT 35
12144: PPUSH
12145: CALL_OW 67
// for i := tmp downto 1 do
12149: LD_ADDR_VAR 0 1
12153: PUSH
12154: DOUBLE
12155: LD_VAR 0 2
12159: INC
12160: ST_TO_ADDR
12161: LD_INT 1
12163: PUSH
12164: FOR_DOWNTO
12165: IFFALSE 12299
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12167: LD_VAR 0 2
12171: PUSH
12172: LD_VAR 0 1
12176: ARRAY
12177: PPUSH
12178: CALL_OW 257
12182: PUSH
12183: LD_INT 3
12185: EQUAL
12186: PUSH
12187: LD_VAR 0 2
12191: PUSH
12192: LD_VAR 0 1
12196: ARRAY
12197: PPUSH
12198: CALL_OW 432
12202: AND
12203: IFFALSE 12297
// begin DialogueOn ;
12205: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12209: LD_VAR 0 2
12213: PUSH
12214: LD_VAR 0 1
12218: ARRAY
12219: PPUSH
12220: LD_STRING D
12222: PUSH
12223: LD_VAR 0 3
12227: PUSH
12228: LD_VAR 0 1
12232: ARRAY
12233: STR
12234: PUSH
12235: LD_STRING -RC-a-1
12237: STR
12238: PPUSH
12239: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12243: LD_ADDR_VAR 0 2
12247: PUSH
12248: LD_VAR 0 2
12252: PPUSH
12253: LD_VAR 0 1
12257: PPUSH
12258: CALL_OW 3
12262: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12263: LD_ADDR_VAR 0 3
12267: PUSH
12268: LD_VAR 0 3
12272: PPUSH
12273: LD_VAR 0 1
12277: PPUSH
12278: CALL_OW 3
12282: ST_TO_ADDR
// DialogueOff ;
12283: CALL_OW 7
// remoteControlTested := true ;
12287: LD_ADDR_EXP 7
12291: PUSH
12292: LD_INT 1
12294: ST_TO_ADDR
// break ;
12295: GO 12299
// end ;
12297: GO 12164
12299: POP
12300: POP
// until not tmp ;
12301: LD_VAR 0 2
12305: NOT
12306: IFFALSE 12142
// end ;
12308: PPOPN 3
12310: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12311: LD_EXP 7
12315: PUSH
12316: LD_EXP 28
12320: PPUSH
12321: CALL_OW 302
12325: AND
12326: IFFALSE 12355
12328: GO 12330
12330: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12331: LD_EXP 28
12335: PPUSH
12336: LD_STRING DMar-RC-a-2
12338: PPUSH
12339: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12343: LD_EXP 28
12347: PPUSH
12348: LD_STRING DMar-RC-a-3
12350: PPUSH
12351: CALL_OW 88
// end ;
12355: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12356: LD_EXP 14
12360: PUSH
12361: LD_EXP 21
12365: PPUSH
12366: LD_EXP 33
12370: PPUSH
12371: CALL_OW 296
12375: PUSH
12376: LD_INT 8
12378: LESS
12379: AND
12380: PUSH
12381: LD_INT 2
12383: PPUSH
12384: CALL_OW 463
12388: NOT
12389: AND
12390: PUSH
12391: LD_EXP 33
12395: PPUSH
12396: CALL_OW 302
12400: AND
12401: PUSH
12402: LD_EXP 21
12406: PPUSH
12407: CALL_OW 302
12411: AND
12412: IFFALSE 12590
12414: GO 12416
12416: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12417: LD_EXP 33
12421: PPUSH
12422: CALL_OW 310
12426: NOT
12427: IFFALSE 12443
// ComTurnUnit ( Aviradze , Heike ) ;
12429: LD_EXP 33
12433: PPUSH
12434: LD_EXP 21
12438: PPUSH
12439: CALL_OW 119
// if not IsInUnit ( Heike ) then
12443: LD_EXP 21
12447: PPUSH
12448: CALL_OW 310
12452: NOT
12453: IFFALSE 12469
// ComTurnUnit ( Heike , Aviradze ) ;
12455: LD_EXP 21
12459: PPUSH
12460: LD_EXP 33
12464: PPUSH
12465: CALL_OW 119
// wait ( 0 0$1 ) ;
12469: LD_INT 35
12471: PPUSH
12472: CALL_OW 67
// DialogueOn ;
12476: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12480: LD_EXP 33
12484: PPUSH
12485: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12489: LD_EXP 21
12493: PPUSH
12494: LD_STRING DH-Beria-1
12496: PPUSH
12497: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12501: LD_EXP 33
12505: PPUSH
12506: LD_STRING DA-Beria-2
12508: PPUSH
12509: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12513: LD_EXP 21
12517: PPUSH
12518: LD_STRING DH-Beria-3
12520: PPUSH
12521: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12525: LD_EXP 33
12529: PPUSH
12530: LD_STRING DA-Beria-4
12532: PPUSH
12533: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12537: LD_EXP 33
12541: PPUSH
12542: LD_STRING DA-Beria-5
12544: PPUSH
12545: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12549: LD_EXP 33
12553: PPUSH
12554: LD_STRING DA-Beria-6
12556: PPUSH
12557: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12561: LD_EXP 21
12565: PPUSH
12566: LD_STRING DA-Beria-7
12568: PPUSH
12569: CALL_OW 88
// DialogueOff ;
12573: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12577: LD_INT 52
12579: PPUSH
12580: LD_INT 2
12582: PPUSH
12583: LD_INT 1
12585: PPUSH
12586: CALL_OW 322
// end ;
12590: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
12591: LD_EXP 26
12595: PPUSH
12596: CALL_OW 300
12600: PUSH
12601: LD_EXP 26
12605: PPUSH
12606: CALL_OW 256
12610: PUSH
12611: LD_INT 10
12613: LESS
12614: AND
12615: IFFALSE 12652
12617: GO 12619
12619: DISABLE
// begin DialogueOn ;
12620: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
12624: LD_EXP 26
12628: PPUSH
12629: LD_STRING DK-Kdeath-1
12631: PPUSH
12632: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
12636: LD_EXP 21
12640: PPUSH
12641: LD_STRING DH-Kdeath-2
12643: PPUSH
12644: CALL_OW 88
// DialogueOff ;
12648: CALL_OW 7
// end ;
12652: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
12653: LD_INT 2
12655: PPUSH
12656: LD_EXP 39
12660: PPUSH
12661: CALL 1370 0 2
12665: IFFALSE 12682
12667: GO 12669
12669: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
12670: LD_EXP 21
12674: PPUSH
12675: LD_STRING DH-Obj-1
12677: PPUSH
12678: CALL_OW 88
12682: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
12683: LD_INT 2
12685: PPUSH
12686: LD_EXP 40
12690: PPUSH
12691: CALL 1370 0 2
12695: IFFALSE 12712
12697: GO 12699
12699: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
12700: LD_EXP 21
12704: PPUSH
12705: LD_STRING DH-Obj-a-1
12707: PPUSH
12708: CALL_OW 88
12712: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 ] [ Difficulty ] do
12713: LD_EXP 10
12717: PUSH
12718: LD_OWVAR 1
12722: PUSH
12723: LD_INT 14700
12725: PUSH
12726: LD_INT 13650
12728: PUSH
12729: LD_INT 12600
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: LIST
12736: PUSH
12737: LD_OWVAR 67
12741: ARRAY
12742: GREATEREQUAL
12743: OR
12744: IFFALSE 12772
12746: GO 12748
12748: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
12749: LD_INT 4200
12751: PPUSH
12752: LD_INT 5250
12754: PPUSH
12755: CALL_OW 12
12759: PPUSH
12760: CALL_OW 67
// convoyStarted := true ;
12764: LD_ADDR_EXP 17
12768: PUSH
12769: LD_INT 1
12771: ST_TO_ADDR
// end ;
12772: END
// every 0 0$1 trigger convoyStarted do
12773: LD_EXP 17
12777: IFFALSE 12861
12779: GO 12781
12781: DISABLE
// begin DialogueOn ;
12782: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
12786: LD_EXP 29
12790: PPUSH
12791: LD_STRING DShar-Convoy-1
12793: PPUSH
12794: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
12798: LD_EXP 21
12802: PPUSH
12803: LD_STRING DH-Convoy-2
12805: PPUSH
12806: CALL_OW 88
// DialogueOff ;
12810: CALL_OW 7
// PrepareConvoy ;
12814: CALL 4549 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
12818: LD_INT 5250
12820: PPUSH
12821: LD_INT 11550
12823: PPUSH
12824: CALL_OW 12
12828: PPUSH
12829: CALL_OW 67
// PrepareConvoy ;
12833: CALL 4549 0 0
// convoyCounter := convoyCounter - 1 ;
12837: LD_ADDR_EXP 16
12841: PUSH
12842: LD_EXP 16
12846: PUSH
12847: LD_INT 1
12849: MINUS
12850: ST_TO_ADDR
// until convoyCounter <= 0 ;
12851: LD_EXP 16
12855: PUSH
12856: LD_INT 0
12858: LESSEQUAL
12859: IFFALSE 12818
// end ;
12861: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
12862: LD_EXP 15
12866: PUSH
12867: LD_INT 10
12869: GREATEREQUAL
12870: IFFALSE 12887
12872: GO 12874
12874: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
12875: LD_EXP 31
12879: PPUSH
12880: LD_STRING DOm-Fail-1
12882: PPUSH
12883: CALL_OW 94
12887: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
12888: LD_EXP 39
12892: NOT
12893: PUSH
12894: LD_EXP 40
12898: NOT
12899: AND
12900: IFFALSE 12912
12902: GO 12904
12904: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
12905: LD_STRING RaiderDone
12907: PPUSH
12908: CALL_OW 337
12912: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
12913: LD_INT 22
12915: PUSH
12916: LD_INT 2
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 33
12925: PUSH
12926: LD_INT 2
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PPUSH
12937: CALL_OW 69
12941: PUSH
12942: LD_INT 3
12944: GREATEREQUAL
12945: PUSH
12946: LD_INT 22
12948: PUSH
12949: LD_INT 2
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 34
12958: PUSH
12959: LD_INT 31
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PPUSH
12970: CALL_OW 69
12974: PUSH
12975: LD_INT 2
12977: GREATEREQUAL
12978: AND
12979: IFFALSE 12991
12981: GO 12983
12983: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
12984: LD_STRING RemoteControlDone
12986: PPUSH
12987: CALL_OW 337
12991: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var tmp ;
12992: LD_EXP 16
12996: PUSH
12997: LD_INT 1
12999: LESS
13000: PUSH
13001: LD_EXP 41
13005: PPUSH
13006: LD_INT 52
13008: PUSH
13009: EMPTY
13010: LIST
13011: PUSH
13012: LD_INT 21
13014: PUSH
13015: LD_INT 1
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PPUSH
13026: CALL_OW 72
13030: NOT
13031: AND
13032: PUSH
13033: LD_OWVAR 1
13037: PUSH
13038: LD_INT 126000
13040: GREATEREQUAL
13041: OR
13042: IFFALSE 13859
13044: GO 13046
13046: DISABLE
13047: LD_INT 0
13049: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13050: LD_STRING ReinforcementsDone
13052: PPUSH
13053: CALL_OW 337
// music_class := music_victory ;
13057: LD_ADDR_OWVAR 72
13061: PUSH
13062: LD_INT 4
13064: ST_TO_ADDR
// InGameOn ;
13065: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13069: LD_EXP 21
13073: PPUSH
13074: LD_STRING DH-end-1
13076: PPUSH
13077: CALL_OW 88
// wait ( 0 0$2 ) ;
13081: LD_INT 70
13083: PPUSH
13084: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13088: LD_EXP 29
13092: PPUSH
13093: LD_STRING DShar-end-2
13095: PPUSH
13096: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13100: LD_EXP 39
13104: NOT
13105: PUSH
13106: LD_EXP 40
13110: NOT
13111: AND
13112: IFFALSE 13128
// begin Say ( Heike , DH-end-3 ) ;
13114: LD_EXP 21
13118: PPUSH
13119: LD_STRING DH-end-3
13121: PPUSH
13122: CALL_OW 88
// end else
13126: GO 13225
// begin Say ( Heike , DH-end-a-3 ) ;
13128: LD_EXP 21
13132: PPUSH
13133: LD_STRING DH-end-a-3
13135: PPUSH
13136: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13140: LD_EXP 29
13144: PPUSH
13145: LD_STRING DShar-end-a-4
13147: PPUSH
13148: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13152: LD_EXP 21
13156: PPUSH
13157: LD_STRING DH-end-a-5
13159: PPUSH
13160: CALL_OW 88
// InGameOff ;
13164: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13168: LD_INT 35
13170: PPUSH
13171: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13175: LD_INT 22
13177: PUSH
13178: LD_INT 3
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: PUSH
13185: LD_INT 21
13187: PUSH
13188: LD_INT 1
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PPUSH
13199: CALL_OW 69
13203: PUSH
13204: LD_INT 0
13206: EQUAL
13207: IFFALSE 13168
// InGameOn ;
13209: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13213: LD_EXP 21
13217: PPUSH
13218: LD_STRING DH-end-a-6
13220: PPUSH
13221: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13225: LD_EXP 29
13229: PPUSH
13230: LD_STRING DShar-end-3
13232: PPUSH
13233: CALL_OW 94
// if not flamethrowerBuilt then
13237: LD_EXP 20
13241: NOT
13242: IFFALSE 13251
// SetAchievement ( ACH_FIRE ) ;
13244: LD_STRING ACH_FIRE
13246: PPUSH
13247: CALL_OW 543
// if drugsTested then
13251: LD_EXP 6
13255: IFFALSE 13269
// AddMedal ( med1 , 1 ) else
13257: LD_STRING med1
13259: PPUSH
13260: LD_INT 1
13262: PPUSH
13263: CALL_OW 101
13267: GO 13309
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13269: LD_INT 5
13271: PPUSH
13272: LD_INT 2
13274: PPUSH
13275: CALL_OW 321
13279: PUSH
13280: LD_INT 2
13282: EQUAL
13283: IFFALSE 13298
// AddMedal ( med1 , - 1 ) else
13285: LD_STRING med1
13287: PPUSH
13288: LD_INT 1
13290: NEG
13291: PPUSH
13292: CALL_OW 101
13296: GO 13309
// AddMedal ( med1 , - 2 ) ;
13298: LD_STRING med1
13300: PPUSH
13301: LD_INT 2
13303: NEG
13304: PPUSH
13305: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
13309: LD_INT 22
13311: PUSH
13312: LD_INT 2
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: PUSH
13319: LD_INT 33
13321: PUSH
13322: LD_INT 2
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: PPUSH
13333: CALL_OW 69
13337: PUSH
13338: LD_INT 3
13340: GREATEREQUAL
13341: PUSH
13342: LD_INT 22
13344: PUSH
13345: LD_INT 2
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PUSH
13352: LD_INT 34
13354: PUSH
13355: LD_INT 31
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PPUSH
13366: CALL_OW 69
13370: PUSH
13371: LD_INT 1
13373: GREATEREQUAL
13374: AND
13375: IFFALSE 13389
// AddMedal ( med2 , 1 ) else
13377: LD_STRING med2
13379: PPUSH
13380: LD_INT 1
13382: PPUSH
13383: CALL_OW 101
13387: GO 13400
// AddMedal ( med2 , - 1 ) ;
13389: LD_STRING med2
13391: PPUSH
13392: LD_INT 1
13394: NEG
13395: PPUSH
13396: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
13400: LD_EXP 15
13404: PUSH
13405: LD_INT 10
13407: PUSH
13408: LD_INT 8
13410: PUSH
13411: LD_INT 6
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: LIST
13418: PUSH
13419: LD_OWVAR 67
13423: ARRAY
13424: LESS
13425: IFFALSE 13439
// AddMedal ( med3 , 1 ) else
13427: LD_STRING med3
13429: PPUSH
13430: LD_INT 1
13432: PPUSH
13433: CALL_OW 101
13437: GO 13450
// AddMedal ( med3 , - 1 ) ;
13439: LD_STRING med3
13441: PPUSH
13442: LD_INT 1
13444: NEG
13445: PPUSH
13446: CALL_OW 101
// GiveMedals ( MAIN ) ;
13450: LD_STRING MAIN
13452: PPUSH
13453: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13457: LD_INT 22
13459: PUSH
13460: LD_INT 2
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: LD_INT 23
13469: PUSH
13470: LD_INT 2
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PUSH
13477: LD_INT 21
13479: PUSH
13480: LD_INT 1
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: PPUSH
13492: CALL_OW 69
13496: PPUSH
13497: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13501: LD_EXP 15
13505: PPUSH
13506: LD_STRING 05_ConvoySavedCounter
13508: PPUSH
13509: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13513: LD_EXP 13
13517: PPUSH
13518: LD_STRING 05_Radar
13520: PPUSH
13521: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13525: LD_EXP 6
13529: PPUSH
13530: LD_STRING 05_DrugsTested
13532: PPUSH
13533: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13537: LD_INT 22
13539: PUSH
13540: LD_INT 2
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 33
13549: PUSH
13550: LD_INT 2
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PPUSH
13561: CALL_OW 69
13565: PUSH
13566: LD_INT 3
13568: GREATEREQUAL
13569: PUSH
13570: LD_INT 22
13572: PUSH
13573: LD_INT 2
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 34
13582: PUSH
13583: LD_INT 31
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PPUSH
13594: CALL_OW 69
13598: PUSH
13599: LD_INT 2
13601: GREATEREQUAL
13602: AND
13603: PPUSH
13604: LD_STRING 05_RemoteControl
13606: PPUSH
13607: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
13611: LD_EXP 21
13615: PPUSH
13616: LD_STRING 05_Heike
13618: PPUSH
13619: CALL_OW 38
// if Aviradze then
13623: LD_EXP 33
13627: IFFALSE 13641
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
13629: LD_EXP 33
13633: PPUSH
13634: LD_STRING 05_Aviradze
13636: PPUSH
13637: CALL_OW 38
// if Ibrahim then
13641: LD_EXP 24
13645: IFFALSE 13659
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
13647: LD_EXP 24
13651: PPUSH
13652: LD_STRING 05_Ibrahim
13654: PPUSH
13655: CALL_OW 38
// if Kamil then
13659: LD_EXP 25
13663: IFFALSE 13677
// SaveCharacters ( Kamil , 05_Kamil ) ;
13665: LD_EXP 25
13669: PPUSH
13670: LD_STRING 05_Kamil
13672: PPUSH
13673: CALL_OW 38
// if Sophia then
13677: LD_EXP 27
13681: IFFALSE 13695
// SaveCharacters ( Sophia , 05_Sophia ) ;
13683: LD_EXP 27
13687: PPUSH
13688: LD_STRING 05_Sophia
13690: PPUSH
13691: CALL_OW 38
// if Kaia then
13695: LD_EXP 26
13699: IFFALSE 13713
// SaveCharacters ( Kaia , 05_Kaia ) ;
13701: LD_EXP 26
13705: PPUSH
13706: LD_STRING 05_Kaia
13708: PPUSH
13709: CALL_OW 38
// if Givi then
13713: LD_EXP 22
13717: IFFALSE 13731
// SaveCharacters ( Givi , 05_Givi ) ;
13719: LD_EXP 22
13723: PPUSH
13724: LD_STRING 05_Givi
13726: PPUSH
13727: CALL_OW 38
// if Mike then
13731: LD_EXP 23
13735: IFFALSE 13749
// SaveCharacters ( Mike , 05_Mike ) ;
13737: LD_EXP 23
13741: PPUSH
13742: LD_STRING 05_Mike
13744: PPUSH
13745: CALL_OW 38
// if Markov then
13749: LD_EXP 28
13753: IFFALSE 13767
// SaveCharacters ( Markov , 05_Markov ) ;
13755: LD_EXP 28
13759: PPUSH
13760: LD_STRING 05_Markov
13762: PPUSH
13763: CALL_OW 38
// if Kurt then
13767: LD_EXP 32
13771: IFFALSE 13785
// SaveCharacters ( Kurt , 05_Kurt ) ;
13773: LD_EXP 32
13777: PPUSH
13778: LD_STRING 05_Kurt
13780: PPUSH
13781: CALL_OW 38
// if heikeSecondSquad then
13785: LD_EXP 34
13789: IFFALSE 13803
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
13791: LD_EXP 34
13795: PPUSH
13796: LD_STRING 05_others
13798: PPUSH
13799: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
13803: LD_ADDR_VAR 0 1
13807: PUSH
13808: LD_INT 22
13810: PUSH
13811: LD_INT 2
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PUSH
13818: LD_INT 23
13820: PUSH
13821: LD_INT 0
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: PPUSH
13832: CALL_OW 69
13836: ST_TO_ADDR
// if tmp then
13837: LD_VAR 0 1
13841: IFFALSE 13855
// SaveCharacters ( tmp , 05_apes ) ;
13843: LD_VAR 0 1
13847: PPUSH
13848: LD_STRING 05_apes
13850: PPUSH
13851: CALL_OW 38
// YouWin ;
13855: CALL_OW 103
// end ; end_of_file
13859: PPOPN 1
13861: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
13862: LD_EXP 9
13866: PUSH
13867: LD_INT 13
13869: PPUSH
13870: LD_INT 1
13872: PPUSH
13873: CALL_OW 287
13877: PUSH
13878: LD_INT 25
13880: LESS
13881: AND
13882: IFFALSE 13909
13884: GO 13886
13886: DISABLE
// begin enable ;
13887: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
13888: LD_INT 1
13890: PPUSH
13891: LD_INT 5
13893: PPUSH
13894: CALL_OW 12
13898: PPUSH
13899: LD_INT 13
13901: PPUSH
13902: LD_INT 1
13904: PPUSH
13905: CALL_OW 55
// end ; end_of_file
13909: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
13910: LD_INT 0
13912: PPUSH
// ar_miner := 81 ;
13913: LD_ADDR_EXP 51
13917: PUSH
13918: LD_INT 81
13920: ST_TO_ADDR
// ar_crane := 88 ;
13921: LD_ADDR_EXP 50
13925: PUSH
13926: LD_INT 88
13928: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
13929: LD_ADDR_EXP 45
13933: PUSH
13934: LD_INT 89
13936: ST_TO_ADDR
// us_hack := 99 ;
13937: LD_ADDR_EXP 46
13941: PUSH
13942: LD_INT 99
13944: ST_TO_ADDR
// us_artillery := 97 ;
13945: LD_ADDR_EXP 47
13949: PUSH
13950: LD_INT 97
13952: ST_TO_ADDR
// ar_bio_bomb := 91 ;
13953: LD_ADDR_EXP 48
13957: PUSH
13958: LD_INT 91
13960: ST_TO_ADDR
// ar_mortar := 92 ;
13961: LD_ADDR_EXP 49
13965: PUSH
13966: LD_INT 92
13968: ST_TO_ADDR
// ru_radar := 98 ;
13969: LD_ADDR_EXP 44
13973: PUSH
13974: LD_INT 98
13976: ST_TO_ADDR
// tech_Artillery := 80 ;
13977: LD_ADDR_EXP 52
13981: PUSH
13982: LD_INT 80
13984: ST_TO_ADDR
// tech_RadMat := 81 ;
13985: LD_ADDR_EXP 53
13989: PUSH
13990: LD_INT 81
13992: ST_TO_ADDR
// tech_BasicTools := 82 ;
13993: LD_ADDR_EXP 54
13997: PUSH
13998: LD_INT 82
14000: ST_TO_ADDR
// tech_Cargo := 83 ;
14001: LD_ADDR_EXP 55
14005: PUSH
14006: LD_INT 83
14008: ST_TO_ADDR
// tech_Track := 84 ;
14009: LD_ADDR_EXP 56
14013: PUSH
14014: LD_INT 84
14016: ST_TO_ADDR
// tech_Crane := 85 ;
14017: LD_ADDR_EXP 57
14021: PUSH
14022: LD_INT 85
14024: ST_TO_ADDR
// tech_Bulldozer := 86 ;
14025: LD_ADDR_EXP 58
14029: PUSH
14030: LD_INT 86
14032: ST_TO_ADDR
// tech_Hovercraft := 87 ;
14033: LD_ADDR_EXP 59
14037: PUSH
14038: LD_INT 87
14040: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
14041: LD_ADDR_EXP 60
14045: PUSH
14046: LD_INT 88
14048: ST_TO_ADDR
// class_mastodont := 31 ;
14049: LD_ADDR_EXP 61
14053: PUSH
14054: LD_INT 31
14056: ST_TO_ADDR
// class_horse := 21 ;
14057: LD_ADDR_EXP 62
14061: PUSH
14062: LD_INT 21
14064: ST_TO_ADDR
// end ;
14065: LD_VAR 0 1
14069: RET
// every 1 do
14070: GO 14072
14072: DISABLE
// InitGlobalVariables ; end_of_file
14073: CALL 13910 0 0
14077: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14078: LD_INT 0
14080: PPUSH
14081: PPUSH
14082: PPUSH
14083: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14084: LD_VAR 0 1
14088: PPUSH
14089: CALL_OW 264
14093: PUSH
14094: LD_EXP 48
14098: EQUAL
14099: IFFALSE 14171
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14101: LD_INT 68
14103: PPUSH
14104: LD_VAR 0 1
14108: PPUSH
14109: CALL_OW 255
14113: PPUSH
14114: CALL_OW 321
14118: PUSH
14119: LD_INT 2
14121: EQUAL
14122: IFFALSE 14134
// eff := 70 else
14124: LD_ADDR_VAR 0 4
14128: PUSH
14129: LD_INT 70
14131: ST_TO_ADDR
14132: GO 14142
// eff := 30 ;
14134: LD_ADDR_VAR 0 4
14138: PUSH
14139: LD_INT 30
14141: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14142: LD_VAR 0 1
14146: PPUSH
14147: CALL_OW 250
14151: PPUSH
14152: LD_VAR 0 1
14156: PPUSH
14157: CALL_OW 251
14161: PPUSH
14162: LD_VAR 0 4
14166: PPUSH
14167: CALL_OW 495
// end ; end ;
14171: LD_VAR 0 2
14175: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14176: LD_INT 0
14178: PPUSH
// end ;
14179: LD_VAR 0 4
14183: RET
// export function SOS_Command ( cmd ) ; begin
14184: LD_INT 0
14186: PPUSH
// end ;
14187: LD_VAR 0 2
14191: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14192: LD_INT 0
14194: PPUSH
// if cmd = 121 then
14195: LD_VAR 0 1
14199: PUSH
14200: LD_INT 121
14202: EQUAL
14203: IFFALSE 14205
// end ;
14205: LD_VAR 0 6
14209: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14210: LD_INT 0
14212: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14213: LD_VAR 0 1
14217: PUSH
14218: LD_INT 250
14220: EQUAL
14221: PUSH
14222: LD_VAR 0 2
14226: PPUSH
14227: CALL_OW 264
14231: PUSH
14232: LD_EXP 51
14236: EQUAL
14237: AND
14238: IFFALSE 14259
// MinerPlaceMine ( unit , x , y ) ;
14240: LD_VAR 0 2
14244: PPUSH
14245: LD_VAR 0 4
14249: PPUSH
14250: LD_VAR 0 5
14254: PPUSH
14255: CALL 16608 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14259: LD_VAR 0 1
14263: PUSH
14264: LD_INT 251
14266: EQUAL
14267: PUSH
14268: LD_VAR 0 2
14272: PPUSH
14273: CALL_OW 264
14277: PUSH
14278: LD_EXP 51
14282: EQUAL
14283: AND
14284: IFFALSE 14305
// MinerDetonateMine ( unit , x , y ) ;
14286: LD_VAR 0 2
14290: PPUSH
14291: LD_VAR 0 4
14295: PPUSH
14296: LD_VAR 0 5
14300: PPUSH
14301: CALL 16885 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14305: LD_VAR 0 1
14309: PUSH
14310: LD_INT 252
14312: EQUAL
14313: PUSH
14314: LD_VAR 0 2
14318: PPUSH
14319: CALL_OW 264
14323: PUSH
14324: LD_EXP 51
14328: EQUAL
14329: AND
14330: IFFALSE 14351
// MinerCreateMinefield ( unit , x , y ) ;
14332: LD_VAR 0 2
14336: PPUSH
14337: LD_VAR 0 4
14341: PPUSH
14342: LD_VAR 0 5
14346: PPUSH
14347: CALL 17302 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
14351: LD_VAR 0 1
14355: PUSH
14356: LD_INT 253
14358: EQUAL
14359: PUSH
14360: LD_VAR 0 2
14364: PPUSH
14365: CALL_OW 257
14369: PUSH
14370: LD_INT 5
14372: EQUAL
14373: AND
14374: IFFALSE 14395
// ComBinocular ( unit , x , y ) ;
14376: LD_VAR 0 2
14380: PPUSH
14381: LD_VAR 0 4
14385: PPUSH
14386: LD_VAR 0 5
14390: PPUSH
14391: CALL 17673 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
14395: LD_VAR 0 1
14399: PUSH
14400: LD_INT 254
14402: EQUAL
14403: PUSH
14404: LD_VAR 0 2
14408: PPUSH
14409: CALL_OW 264
14413: PUSH
14414: LD_EXP 46
14418: EQUAL
14419: AND
14420: PUSH
14421: LD_VAR 0 3
14425: PPUSH
14426: CALL_OW 263
14430: PUSH
14431: LD_INT 3
14433: EQUAL
14434: AND
14435: IFFALSE 14451
// HackDestroyVehicle ( unit , selectedUnit ) ;
14437: LD_VAR 0 2
14441: PPUSH
14442: LD_VAR 0 3
14446: PPUSH
14447: CALL 15968 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
14451: LD_VAR 0 1
14455: PUSH
14456: LD_INT 255
14458: EQUAL
14459: PUSH
14460: LD_VAR 0 2
14464: PPUSH
14465: CALL_OW 264
14469: PUSH
14470: LD_INT 14
14472: PUSH
14473: LD_INT 53
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: IN
14480: AND
14481: PUSH
14482: LD_VAR 0 4
14486: PPUSH
14487: LD_VAR 0 5
14491: PPUSH
14492: CALL_OW 488
14496: AND
14497: IFFALSE 14521
// CutTreeXYR ( unit , x , y , 12 ) ;
14499: LD_VAR 0 2
14503: PPUSH
14504: LD_VAR 0 4
14508: PPUSH
14509: LD_VAR 0 5
14513: PPUSH
14514: LD_INT 12
14516: PPUSH
14517: CALL 14534 0 4
// end ;
14521: LD_VAR 0 6
14525: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
14526: LD_INT 0
14528: PPUSH
// end ;
14529: LD_VAR 0 4
14533: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
14534: LD_INT 0
14536: PPUSH
14537: PPUSH
14538: PPUSH
14539: PPUSH
14540: PPUSH
14541: PPUSH
14542: PPUSH
14543: PPUSH
14544: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
14545: LD_VAR 0 1
14549: NOT
14550: PUSH
14551: LD_VAR 0 2
14555: PPUSH
14556: LD_VAR 0 3
14560: PPUSH
14561: CALL_OW 488
14565: NOT
14566: OR
14567: PUSH
14568: LD_VAR 0 4
14572: NOT
14573: OR
14574: IFFALSE 14578
// exit ;
14576: GO 14918
// list := [ ] ;
14578: LD_ADDR_VAR 0 13
14582: PUSH
14583: EMPTY
14584: ST_TO_ADDR
// if x - r < 0 then
14585: LD_VAR 0 2
14589: PUSH
14590: LD_VAR 0 4
14594: MINUS
14595: PUSH
14596: LD_INT 0
14598: LESS
14599: IFFALSE 14611
// min_x := 0 else
14601: LD_ADDR_VAR 0 7
14605: PUSH
14606: LD_INT 0
14608: ST_TO_ADDR
14609: GO 14627
// min_x := x - r ;
14611: LD_ADDR_VAR 0 7
14615: PUSH
14616: LD_VAR 0 2
14620: PUSH
14621: LD_VAR 0 4
14625: MINUS
14626: ST_TO_ADDR
// if y - r < 0 then
14627: LD_VAR 0 3
14631: PUSH
14632: LD_VAR 0 4
14636: MINUS
14637: PUSH
14638: LD_INT 0
14640: LESS
14641: IFFALSE 14653
// min_y := 0 else
14643: LD_ADDR_VAR 0 8
14647: PUSH
14648: LD_INT 0
14650: ST_TO_ADDR
14651: GO 14669
// min_y := y - r ;
14653: LD_ADDR_VAR 0 8
14657: PUSH
14658: LD_VAR 0 3
14662: PUSH
14663: LD_VAR 0 4
14667: MINUS
14668: ST_TO_ADDR
// max_x := x + r ;
14669: LD_ADDR_VAR 0 9
14673: PUSH
14674: LD_VAR 0 2
14678: PUSH
14679: LD_VAR 0 4
14683: PLUS
14684: ST_TO_ADDR
// max_y := y + r ;
14685: LD_ADDR_VAR 0 10
14689: PUSH
14690: LD_VAR 0 3
14694: PUSH
14695: LD_VAR 0 4
14699: PLUS
14700: ST_TO_ADDR
// for _x = min_x to max_x do
14701: LD_ADDR_VAR 0 11
14705: PUSH
14706: DOUBLE
14707: LD_VAR 0 7
14711: DEC
14712: ST_TO_ADDR
14713: LD_VAR 0 9
14717: PUSH
14718: FOR_TO
14719: IFFALSE 14836
// for _y = min_y to max_y do
14721: LD_ADDR_VAR 0 12
14725: PUSH
14726: DOUBLE
14727: LD_VAR 0 8
14731: DEC
14732: ST_TO_ADDR
14733: LD_VAR 0 10
14737: PUSH
14738: FOR_TO
14739: IFFALSE 14832
// begin if not ValidHex ( _x , _y ) then
14741: LD_VAR 0 11
14745: PPUSH
14746: LD_VAR 0 12
14750: PPUSH
14751: CALL_OW 488
14755: NOT
14756: IFFALSE 14760
// continue ;
14758: GO 14738
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
14760: LD_VAR 0 11
14764: PPUSH
14765: LD_VAR 0 12
14769: PPUSH
14770: CALL_OW 351
14774: PUSH
14775: LD_VAR 0 11
14779: PPUSH
14780: LD_VAR 0 12
14784: PPUSH
14785: CALL_OW 554
14789: AND
14790: IFFALSE 14830
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
14792: LD_ADDR_VAR 0 13
14796: PUSH
14797: LD_VAR 0 13
14801: PPUSH
14802: LD_VAR 0 13
14806: PUSH
14807: LD_INT 1
14809: PLUS
14810: PPUSH
14811: LD_VAR 0 11
14815: PUSH
14816: LD_VAR 0 12
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PPUSH
14825: CALL_OW 2
14829: ST_TO_ADDR
// end ;
14830: GO 14738
14832: POP
14833: POP
14834: GO 14718
14836: POP
14837: POP
// if not list then
14838: LD_VAR 0 13
14842: NOT
14843: IFFALSE 14847
// exit ;
14845: GO 14918
// for i in list do
14847: LD_ADDR_VAR 0 6
14851: PUSH
14852: LD_VAR 0 13
14856: PUSH
14857: FOR_IN
14858: IFFALSE 14916
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
14860: LD_VAR 0 1
14864: PPUSH
14865: LD_STRING M
14867: PUSH
14868: LD_VAR 0 6
14872: PUSH
14873: LD_INT 1
14875: ARRAY
14876: PUSH
14877: LD_VAR 0 6
14881: PUSH
14882: LD_INT 2
14884: ARRAY
14885: PUSH
14886: LD_INT 0
14888: PUSH
14889: LD_INT 0
14891: PUSH
14892: LD_INT 0
14894: PUSH
14895: LD_INT 0
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: PUSH
14907: EMPTY
14908: LIST
14909: PPUSH
14910: CALL_OW 447
14914: GO 14857
14916: POP
14917: POP
// end ;
14918: LD_VAR 0 5
14922: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
14923: LD_EXP 65
14927: NOT
14928: IFFALSE 14978
14930: GO 14932
14932: DISABLE
// begin initHack := true ;
14933: LD_ADDR_EXP 65
14937: PUSH
14938: LD_INT 1
14940: ST_TO_ADDR
// hackTanks := [ ] ;
14941: LD_ADDR_EXP 66
14945: PUSH
14946: EMPTY
14947: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
14948: LD_ADDR_EXP 67
14952: PUSH
14953: EMPTY
14954: ST_TO_ADDR
// hackLimit := 3 ;
14955: LD_ADDR_EXP 68
14959: PUSH
14960: LD_INT 3
14962: ST_TO_ADDR
// hackDist := 12 ;
14963: LD_ADDR_EXP 69
14967: PUSH
14968: LD_INT 12
14970: ST_TO_ADDR
// hackCounter := [ ] ;
14971: LD_ADDR_EXP 70
14975: PUSH
14976: EMPTY
14977: ST_TO_ADDR
// end ;
14978: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
14979: LD_EXP 65
14983: PUSH
14984: LD_INT 34
14986: PUSH
14987: LD_EXP 46
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PPUSH
14996: CALL_OW 69
15000: AND
15001: IFFALSE 15256
15003: GO 15005
15005: DISABLE
15006: LD_INT 0
15008: PPUSH
15009: PPUSH
// begin enable ;
15010: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15011: LD_ADDR_VAR 0 1
15015: PUSH
15016: LD_INT 34
15018: PUSH
15019: LD_EXP 46
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: PPUSH
15028: CALL_OW 69
15032: PUSH
15033: FOR_IN
15034: IFFALSE 15254
// begin if not i in hackTanks then
15036: LD_VAR 0 1
15040: PUSH
15041: LD_EXP 66
15045: IN
15046: NOT
15047: IFFALSE 15130
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15049: LD_ADDR_EXP 66
15053: PUSH
15054: LD_EXP 66
15058: PPUSH
15059: LD_EXP 66
15063: PUSH
15064: LD_INT 1
15066: PLUS
15067: PPUSH
15068: LD_VAR 0 1
15072: PPUSH
15073: CALL_OW 1
15077: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15078: LD_ADDR_EXP 67
15082: PUSH
15083: LD_EXP 67
15087: PPUSH
15088: LD_EXP 67
15092: PUSH
15093: LD_INT 1
15095: PLUS
15096: PPUSH
15097: EMPTY
15098: PPUSH
15099: CALL_OW 1
15103: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
15104: LD_ADDR_EXP 70
15108: PUSH
15109: LD_EXP 70
15113: PPUSH
15114: LD_EXP 70
15118: PUSH
15119: LD_INT 1
15121: PLUS
15122: PPUSH
15123: EMPTY
15124: PPUSH
15125: CALL_OW 1
15129: ST_TO_ADDR
// end ; if not IsOk ( i ) then
15130: LD_VAR 0 1
15134: PPUSH
15135: CALL_OW 302
15139: NOT
15140: IFFALSE 15153
// begin HackUnlinkAll ( i ) ;
15142: LD_VAR 0 1
15146: PPUSH
15147: CALL 15259 0 1
// continue ;
15151: GO 15033
// end ; HackCheckCapturedStatus ( i ) ;
15153: LD_VAR 0 1
15157: PPUSH
15158: CALL 15702 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
15162: LD_ADDR_VAR 0 2
15166: PUSH
15167: LD_INT 81
15169: PUSH
15170: LD_VAR 0 1
15174: PPUSH
15175: CALL_OW 255
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: LD_INT 33
15186: PUSH
15187: LD_INT 3
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 91
15196: PUSH
15197: LD_VAR 0 1
15201: PUSH
15202: LD_EXP 69
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 50
15214: PUSH
15215: EMPTY
15216: LIST
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: PPUSH
15224: CALL_OW 69
15228: ST_TO_ADDR
// if not tmp then
15229: LD_VAR 0 2
15233: NOT
15234: IFFALSE 15238
// continue ;
15236: GO 15033
// HackLink ( i , tmp ) ;
15238: LD_VAR 0 1
15242: PPUSH
15243: LD_VAR 0 2
15247: PPUSH
15248: CALL 15395 0 2
// end ;
15252: GO 15033
15254: POP
15255: POP
// end ;
15256: PPOPN 2
15258: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
15259: LD_INT 0
15261: PPUSH
15262: PPUSH
15263: PPUSH
// if not hack in hackTanks then
15264: LD_VAR 0 1
15268: PUSH
15269: LD_EXP 66
15273: IN
15274: NOT
15275: IFFALSE 15279
// exit ;
15277: GO 15390
// index := GetElementIndex ( hackTanks , hack ) ;
15279: LD_ADDR_VAR 0 4
15283: PUSH
15284: LD_EXP 66
15288: PPUSH
15289: LD_VAR 0 1
15293: PPUSH
15294: CALL 36036 0 2
15298: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
15299: LD_EXP 67
15303: PUSH
15304: LD_VAR 0 4
15308: ARRAY
15309: IFFALSE 15390
// begin for i in hackTanksCaptured [ index ] do
15311: LD_ADDR_VAR 0 3
15315: PUSH
15316: LD_EXP 67
15320: PUSH
15321: LD_VAR 0 4
15325: ARRAY
15326: PUSH
15327: FOR_IN
15328: IFFALSE 15354
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
15330: LD_VAR 0 3
15334: PUSH
15335: LD_INT 1
15337: ARRAY
15338: PPUSH
15339: LD_VAR 0 3
15343: PUSH
15344: LD_INT 2
15346: ARRAY
15347: PPUSH
15348: CALL_OW 235
15352: GO 15327
15354: POP
15355: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
15356: LD_ADDR_EXP 67
15360: PUSH
15361: LD_EXP 67
15365: PPUSH
15366: LD_VAR 0 4
15370: PPUSH
15371: EMPTY
15372: PPUSH
15373: CALL_OW 1
15377: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
15378: LD_VAR 0 1
15382: PPUSH
15383: LD_INT 0
15385: PPUSH
15386: CALL_OW 505
// end ; end ;
15390: LD_VAR 0 2
15394: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
15395: LD_INT 0
15397: PPUSH
15398: PPUSH
15399: PPUSH
// if not hack in hackTanks or not vehicles then
15400: LD_VAR 0 1
15404: PUSH
15405: LD_EXP 66
15409: IN
15410: NOT
15411: PUSH
15412: LD_VAR 0 2
15416: NOT
15417: OR
15418: IFFALSE 15422
// exit ;
15420: GO 15697
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
15422: LD_ADDR_VAR 0 2
15426: PUSH
15427: LD_VAR 0 1
15431: PPUSH
15432: LD_VAR 0 2
15436: PPUSH
15437: LD_INT 1
15439: PPUSH
15440: LD_INT 1
15442: PPUSH
15443: CALL 36686 0 4
15447: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
15448: LD_ADDR_VAR 0 5
15452: PUSH
15453: LD_EXP 66
15457: PPUSH
15458: LD_VAR 0 1
15462: PPUSH
15463: CALL 36036 0 2
15467: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
15468: LD_EXP 67
15472: PUSH
15473: LD_VAR 0 5
15477: ARRAY
15478: PUSH
15479: LD_EXP 68
15483: LESS
15484: IFFALSE 15673
// begin for i := 1 to vehicles do
15486: LD_ADDR_VAR 0 4
15490: PUSH
15491: DOUBLE
15492: LD_INT 1
15494: DEC
15495: ST_TO_ADDR
15496: LD_VAR 0 2
15500: PUSH
15501: FOR_TO
15502: IFFALSE 15671
// begin if hackTanksCaptured [ index ] = hackLimit then
15504: LD_EXP 67
15508: PUSH
15509: LD_VAR 0 5
15513: ARRAY
15514: PUSH
15515: LD_EXP 68
15519: EQUAL
15520: IFFALSE 15524
// break ;
15522: GO 15671
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
15524: LD_ADDR_EXP 70
15528: PUSH
15529: LD_EXP 70
15533: PPUSH
15534: LD_VAR 0 5
15538: PPUSH
15539: LD_EXP 70
15543: PUSH
15544: LD_VAR 0 5
15548: ARRAY
15549: PUSH
15550: LD_INT 1
15552: PLUS
15553: PPUSH
15554: CALL_OW 1
15558: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
15559: LD_ADDR_EXP 67
15563: PUSH
15564: LD_EXP 67
15568: PPUSH
15569: LD_VAR 0 5
15573: PUSH
15574: LD_EXP 67
15578: PUSH
15579: LD_VAR 0 5
15583: ARRAY
15584: PUSH
15585: LD_INT 1
15587: PLUS
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PPUSH
15593: LD_VAR 0 2
15597: PUSH
15598: LD_VAR 0 4
15602: ARRAY
15603: PUSH
15604: LD_VAR 0 2
15608: PUSH
15609: LD_VAR 0 4
15613: ARRAY
15614: PPUSH
15615: CALL_OW 255
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PPUSH
15624: CALL 36251 0 3
15628: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
15629: LD_VAR 0 2
15633: PUSH
15634: LD_VAR 0 4
15638: ARRAY
15639: PPUSH
15640: LD_VAR 0 1
15644: PPUSH
15645: CALL_OW 255
15649: PPUSH
15650: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
15654: LD_VAR 0 2
15658: PUSH
15659: LD_VAR 0 4
15663: ARRAY
15664: PPUSH
15665: CALL_OW 141
// end ;
15669: GO 15501
15671: POP
15672: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15673: LD_VAR 0 1
15677: PPUSH
15678: LD_EXP 67
15682: PUSH
15683: LD_VAR 0 5
15687: ARRAY
15688: PUSH
15689: LD_INT 0
15691: PLUS
15692: PPUSH
15693: CALL_OW 505
// end ;
15697: LD_VAR 0 3
15701: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
15702: LD_INT 0
15704: PPUSH
15705: PPUSH
15706: PPUSH
15707: PPUSH
// if not hack in hackTanks then
15708: LD_VAR 0 1
15712: PUSH
15713: LD_EXP 66
15717: IN
15718: NOT
15719: IFFALSE 15723
// exit ;
15721: GO 15963
// index := GetElementIndex ( hackTanks , hack ) ;
15723: LD_ADDR_VAR 0 4
15727: PUSH
15728: LD_EXP 66
15732: PPUSH
15733: LD_VAR 0 1
15737: PPUSH
15738: CALL 36036 0 2
15742: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
15743: LD_ADDR_VAR 0 3
15747: PUSH
15748: DOUBLE
15749: LD_EXP 67
15753: PUSH
15754: LD_VAR 0 4
15758: ARRAY
15759: INC
15760: ST_TO_ADDR
15761: LD_INT 1
15763: PUSH
15764: FOR_DOWNTO
15765: IFFALSE 15937
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
15767: LD_ADDR_VAR 0 5
15771: PUSH
15772: LD_EXP 67
15776: PUSH
15777: LD_VAR 0 4
15781: ARRAY
15782: PUSH
15783: LD_VAR 0 3
15787: ARRAY
15788: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
15789: LD_VAR 0 5
15793: PUSH
15794: LD_INT 1
15796: ARRAY
15797: PPUSH
15798: CALL_OW 302
15802: NOT
15803: PUSH
15804: LD_VAR 0 5
15808: PUSH
15809: LD_INT 1
15811: ARRAY
15812: PPUSH
15813: CALL_OW 255
15817: PUSH
15818: LD_VAR 0 1
15822: PPUSH
15823: CALL_OW 255
15827: NONEQUAL
15828: OR
15829: IFFALSE 15935
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
15831: LD_VAR 0 5
15835: PUSH
15836: LD_INT 1
15838: ARRAY
15839: PPUSH
15840: CALL_OW 305
15844: PUSH
15845: LD_VAR 0 5
15849: PUSH
15850: LD_INT 1
15852: ARRAY
15853: PPUSH
15854: CALL_OW 255
15858: PUSH
15859: LD_VAR 0 1
15863: PPUSH
15864: CALL_OW 255
15868: EQUAL
15869: AND
15870: IFFALSE 15894
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
15872: LD_VAR 0 5
15876: PUSH
15877: LD_INT 1
15879: ARRAY
15880: PPUSH
15881: LD_VAR 0 5
15885: PUSH
15886: LD_INT 2
15888: ARRAY
15889: PPUSH
15890: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
15894: LD_ADDR_EXP 67
15898: PUSH
15899: LD_EXP 67
15903: PPUSH
15904: LD_VAR 0 4
15908: PPUSH
15909: LD_EXP 67
15913: PUSH
15914: LD_VAR 0 4
15918: ARRAY
15919: PPUSH
15920: LD_VAR 0 3
15924: PPUSH
15925: CALL_OW 3
15929: PPUSH
15930: CALL_OW 1
15934: ST_TO_ADDR
// end ; end ;
15935: GO 15764
15937: POP
15938: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15939: LD_VAR 0 1
15943: PPUSH
15944: LD_EXP 67
15948: PUSH
15949: LD_VAR 0 4
15953: ARRAY
15954: PUSH
15955: LD_INT 0
15957: PLUS
15958: PPUSH
15959: CALL_OW 505
// end ;
15963: LD_VAR 0 2
15967: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
15968: LD_INT 0
15970: PPUSH
15971: PPUSH
15972: PPUSH
15973: PPUSH
// if not hack in hackTanks then
15974: LD_VAR 0 1
15978: PUSH
15979: LD_EXP 66
15983: IN
15984: NOT
15985: IFFALSE 15989
// exit ;
15987: GO 16074
// index := GetElementIndex ( hackTanks , hack ) ;
15989: LD_ADDR_VAR 0 5
15993: PUSH
15994: LD_EXP 66
15998: PPUSH
15999: LD_VAR 0 1
16003: PPUSH
16004: CALL 36036 0 2
16008: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16009: LD_ADDR_VAR 0 4
16013: PUSH
16014: DOUBLE
16015: LD_INT 1
16017: DEC
16018: ST_TO_ADDR
16019: LD_EXP 67
16023: PUSH
16024: LD_VAR 0 5
16028: ARRAY
16029: PUSH
16030: FOR_TO
16031: IFFALSE 16072
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16033: LD_EXP 67
16037: PUSH
16038: LD_VAR 0 5
16042: ARRAY
16043: PUSH
16044: LD_VAR 0 4
16048: ARRAY
16049: PUSH
16050: LD_INT 1
16052: ARRAY
16053: PUSH
16054: LD_VAR 0 2
16058: EQUAL
16059: IFFALSE 16070
// KillUnit ( vehicle ) ;
16061: LD_VAR 0 2
16065: PPUSH
16066: CALL_OW 66
16070: GO 16030
16072: POP
16073: POP
// end ;
16074: LD_VAR 0 3
16078: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
16079: LD_EXP 71
16083: NOT
16084: IFFALSE 16119
16086: GO 16088
16088: DISABLE
// begin initMiner := true ;
16089: LD_ADDR_EXP 71
16093: PUSH
16094: LD_INT 1
16096: ST_TO_ADDR
// minersList := [ ] ;
16097: LD_ADDR_EXP 72
16101: PUSH
16102: EMPTY
16103: ST_TO_ADDR
// minerMinesList := [ ] ;
16104: LD_ADDR_EXP 73
16108: PUSH
16109: EMPTY
16110: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
16111: LD_ADDR_EXP 74
16115: PUSH
16116: LD_INT 5
16118: ST_TO_ADDR
// end ;
16119: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
16120: LD_EXP 71
16124: PUSH
16125: LD_INT 34
16127: PUSH
16128: LD_EXP 51
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PPUSH
16137: CALL_OW 69
16141: AND
16142: IFFALSE 16605
16144: GO 16146
16146: DISABLE
16147: LD_INT 0
16149: PPUSH
16150: PPUSH
16151: PPUSH
16152: PPUSH
// begin enable ;
16153: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
16154: LD_ADDR_VAR 0 1
16158: PUSH
16159: LD_INT 34
16161: PUSH
16162: LD_EXP 51
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: PPUSH
16171: CALL_OW 69
16175: PUSH
16176: FOR_IN
16177: IFFALSE 16249
// begin if not i in minersList then
16179: LD_VAR 0 1
16183: PUSH
16184: LD_EXP 72
16188: IN
16189: NOT
16190: IFFALSE 16247
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
16192: LD_ADDR_EXP 72
16196: PUSH
16197: LD_EXP 72
16201: PPUSH
16202: LD_EXP 72
16206: PUSH
16207: LD_INT 1
16209: PLUS
16210: PPUSH
16211: LD_VAR 0 1
16215: PPUSH
16216: CALL_OW 1
16220: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
16221: LD_ADDR_EXP 73
16225: PUSH
16226: LD_EXP 73
16230: PPUSH
16231: LD_EXP 73
16235: PUSH
16236: LD_INT 1
16238: PLUS
16239: PPUSH
16240: EMPTY
16241: PPUSH
16242: CALL_OW 1
16246: ST_TO_ADDR
// end end ;
16247: GO 16176
16249: POP
16250: POP
// for i := minerMinesList downto 1 do
16251: LD_ADDR_VAR 0 1
16255: PUSH
16256: DOUBLE
16257: LD_EXP 73
16261: INC
16262: ST_TO_ADDR
16263: LD_INT 1
16265: PUSH
16266: FOR_DOWNTO
16267: IFFALSE 16603
// begin if IsLive ( minersList [ i ] ) then
16269: LD_EXP 72
16273: PUSH
16274: LD_VAR 0 1
16278: ARRAY
16279: PPUSH
16280: CALL_OW 300
16284: IFFALSE 16312
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
16286: LD_EXP 72
16290: PUSH
16291: LD_VAR 0 1
16295: ARRAY
16296: PPUSH
16297: LD_EXP 73
16301: PUSH
16302: LD_VAR 0 1
16306: ARRAY
16307: PPUSH
16308: CALL_OW 505
// if not minerMinesList [ i ] then
16312: LD_EXP 73
16316: PUSH
16317: LD_VAR 0 1
16321: ARRAY
16322: NOT
16323: IFFALSE 16327
// continue ;
16325: GO 16266
// for j := minerMinesList [ i ] downto 1 do
16327: LD_ADDR_VAR 0 2
16331: PUSH
16332: DOUBLE
16333: LD_EXP 73
16337: PUSH
16338: LD_VAR 0 1
16342: ARRAY
16343: INC
16344: ST_TO_ADDR
16345: LD_INT 1
16347: PUSH
16348: FOR_DOWNTO
16349: IFFALSE 16599
// begin side := GetSide ( minersList [ i ] ) ;
16351: LD_ADDR_VAR 0 3
16355: PUSH
16356: LD_EXP 72
16360: PUSH
16361: LD_VAR 0 1
16365: ARRAY
16366: PPUSH
16367: CALL_OW 255
16371: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
16372: LD_ADDR_VAR 0 4
16376: PUSH
16377: LD_EXP 73
16381: PUSH
16382: LD_VAR 0 1
16386: ARRAY
16387: PUSH
16388: LD_VAR 0 2
16392: ARRAY
16393: PUSH
16394: LD_INT 1
16396: ARRAY
16397: PPUSH
16398: LD_EXP 73
16402: PUSH
16403: LD_VAR 0 1
16407: ARRAY
16408: PUSH
16409: LD_VAR 0 2
16413: ARRAY
16414: PUSH
16415: LD_INT 2
16417: ARRAY
16418: PPUSH
16419: CALL_OW 428
16423: ST_TO_ADDR
// if not tmp then
16424: LD_VAR 0 4
16428: NOT
16429: IFFALSE 16433
// continue ;
16431: GO 16348
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
16433: LD_VAR 0 4
16437: PUSH
16438: LD_INT 81
16440: PUSH
16441: LD_VAR 0 3
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PPUSH
16450: CALL_OW 69
16454: IN
16455: PUSH
16456: LD_EXP 73
16460: PUSH
16461: LD_VAR 0 1
16465: ARRAY
16466: PUSH
16467: LD_VAR 0 2
16471: ARRAY
16472: PUSH
16473: LD_INT 1
16475: ARRAY
16476: PPUSH
16477: LD_EXP 73
16481: PUSH
16482: LD_VAR 0 1
16486: ARRAY
16487: PUSH
16488: LD_VAR 0 2
16492: ARRAY
16493: PUSH
16494: LD_INT 2
16496: ARRAY
16497: PPUSH
16498: CALL_OW 458
16502: AND
16503: IFFALSE 16597
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
16505: LD_EXP 73
16509: PUSH
16510: LD_VAR 0 1
16514: ARRAY
16515: PUSH
16516: LD_VAR 0 2
16520: ARRAY
16521: PUSH
16522: LD_INT 1
16524: ARRAY
16525: PPUSH
16526: LD_EXP 73
16530: PUSH
16531: LD_VAR 0 1
16535: ARRAY
16536: PUSH
16537: LD_VAR 0 2
16541: ARRAY
16542: PUSH
16543: LD_INT 2
16545: ARRAY
16546: PPUSH
16547: LD_VAR 0 3
16551: PPUSH
16552: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
16556: LD_ADDR_EXP 73
16560: PUSH
16561: LD_EXP 73
16565: PPUSH
16566: LD_VAR 0 1
16570: PPUSH
16571: LD_EXP 73
16575: PUSH
16576: LD_VAR 0 1
16580: ARRAY
16581: PPUSH
16582: LD_VAR 0 2
16586: PPUSH
16587: CALL_OW 3
16591: PPUSH
16592: CALL_OW 1
16596: ST_TO_ADDR
// end ; end ;
16597: GO 16348
16599: POP
16600: POP
// end ;
16601: GO 16266
16603: POP
16604: POP
// end ;
16605: PPOPN 4
16607: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
16608: LD_INT 0
16610: PPUSH
16611: PPUSH
// result := false ;
16612: LD_ADDR_VAR 0 4
16616: PUSH
16617: LD_INT 0
16619: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
16620: LD_VAR 0 1
16624: PPUSH
16625: CALL_OW 264
16629: PUSH
16630: LD_EXP 51
16634: EQUAL
16635: NOT
16636: IFFALSE 16640
// exit ;
16638: GO 16880
// index := GetElementIndex ( minersList , unit ) ;
16640: LD_ADDR_VAR 0 5
16644: PUSH
16645: LD_EXP 72
16649: PPUSH
16650: LD_VAR 0 1
16654: PPUSH
16655: CALL 36036 0 2
16659: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
16660: LD_EXP 73
16664: PUSH
16665: LD_VAR 0 5
16669: ARRAY
16670: PUSH
16671: LD_EXP 74
16675: GREATEREQUAL
16676: IFFALSE 16680
// exit ;
16678: GO 16880
// ComMoveXY ( unit , x , y ) ;
16680: LD_VAR 0 1
16684: PPUSH
16685: LD_VAR 0 2
16689: PPUSH
16690: LD_VAR 0 3
16694: PPUSH
16695: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16699: LD_INT 35
16701: PPUSH
16702: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
16706: LD_VAR 0 1
16710: PPUSH
16711: LD_VAR 0 2
16715: PPUSH
16716: LD_VAR 0 3
16720: PPUSH
16721: CALL 66809 0 3
16725: NOT
16726: PUSH
16727: LD_VAR 0 1
16731: PPUSH
16732: CALL_OW 314
16736: AND
16737: IFFALSE 16741
// exit ;
16739: GO 16880
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
16741: LD_VAR 0 2
16745: PPUSH
16746: LD_VAR 0 3
16750: PPUSH
16751: CALL_OW 428
16755: PUSH
16756: LD_VAR 0 1
16760: EQUAL
16761: PUSH
16762: LD_VAR 0 1
16766: PPUSH
16767: CALL_OW 314
16771: NOT
16772: AND
16773: IFFALSE 16699
// PlaySoundXY ( x , y , PlantMine ) ;
16775: LD_VAR 0 2
16779: PPUSH
16780: LD_VAR 0 3
16784: PPUSH
16785: LD_STRING PlantMine
16787: PPUSH
16788: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
16792: LD_VAR 0 2
16796: PPUSH
16797: LD_VAR 0 3
16801: PPUSH
16802: LD_VAR 0 1
16806: PPUSH
16807: CALL_OW 255
16811: PPUSH
16812: LD_INT 0
16814: PPUSH
16815: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
16819: LD_ADDR_EXP 73
16823: PUSH
16824: LD_EXP 73
16828: PPUSH
16829: LD_VAR 0 5
16833: PUSH
16834: LD_EXP 73
16838: PUSH
16839: LD_VAR 0 5
16843: ARRAY
16844: PUSH
16845: LD_INT 1
16847: PLUS
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PPUSH
16853: LD_VAR 0 2
16857: PUSH
16858: LD_VAR 0 3
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PPUSH
16867: CALL 36251 0 3
16871: ST_TO_ADDR
// result := true ;
16872: LD_ADDR_VAR 0 4
16876: PUSH
16877: LD_INT 1
16879: ST_TO_ADDR
// end ;
16880: LD_VAR 0 4
16884: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
16885: LD_INT 0
16887: PPUSH
16888: PPUSH
16889: PPUSH
// if not unit in minersList then
16890: LD_VAR 0 1
16894: PUSH
16895: LD_EXP 72
16899: IN
16900: NOT
16901: IFFALSE 16905
// exit ;
16903: GO 17297
// index := GetElementIndex ( minersList , unit ) ;
16905: LD_ADDR_VAR 0 6
16909: PUSH
16910: LD_EXP 72
16914: PPUSH
16915: LD_VAR 0 1
16919: PPUSH
16920: CALL 36036 0 2
16924: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
16925: LD_ADDR_VAR 0 5
16929: PUSH
16930: DOUBLE
16931: LD_EXP 73
16935: PUSH
16936: LD_VAR 0 6
16940: ARRAY
16941: INC
16942: ST_TO_ADDR
16943: LD_INT 1
16945: PUSH
16946: FOR_DOWNTO
16947: IFFALSE 17108
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
16949: LD_EXP 73
16953: PUSH
16954: LD_VAR 0 6
16958: ARRAY
16959: PUSH
16960: LD_VAR 0 5
16964: ARRAY
16965: PUSH
16966: LD_INT 1
16968: ARRAY
16969: PUSH
16970: LD_VAR 0 2
16974: EQUAL
16975: PUSH
16976: LD_EXP 73
16980: PUSH
16981: LD_VAR 0 6
16985: ARRAY
16986: PUSH
16987: LD_VAR 0 5
16991: ARRAY
16992: PUSH
16993: LD_INT 2
16995: ARRAY
16996: PUSH
16997: LD_VAR 0 3
17001: EQUAL
17002: AND
17003: IFFALSE 17106
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17005: LD_EXP 73
17009: PUSH
17010: LD_VAR 0 6
17014: ARRAY
17015: PUSH
17016: LD_VAR 0 5
17020: ARRAY
17021: PUSH
17022: LD_INT 1
17024: ARRAY
17025: PPUSH
17026: LD_EXP 73
17030: PUSH
17031: LD_VAR 0 6
17035: ARRAY
17036: PUSH
17037: LD_VAR 0 5
17041: ARRAY
17042: PUSH
17043: LD_INT 2
17045: ARRAY
17046: PPUSH
17047: LD_VAR 0 1
17051: PPUSH
17052: CALL_OW 255
17056: PPUSH
17057: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17061: LD_ADDR_EXP 73
17065: PUSH
17066: LD_EXP 73
17070: PPUSH
17071: LD_VAR 0 6
17075: PPUSH
17076: LD_EXP 73
17080: PUSH
17081: LD_VAR 0 6
17085: ARRAY
17086: PPUSH
17087: LD_VAR 0 5
17091: PPUSH
17092: CALL_OW 3
17096: PPUSH
17097: CALL_OW 1
17101: ST_TO_ADDR
// exit ;
17102: POP
17103: POP
17104: GO 17297
// end ; end ;
17106: GO 16946
17108: POP
17109: POP
// for i := minerMinesList [ index ] downto 1 do
17110: LD_ADDR_VAR 0 5
17114: PUSH
17115: DOUBLE
17116: LD_EXP 73
17120: PUSH
17121: LD_VAR 0 6
17125: ARRAY
17126: INC
17127: ST_TO_ADDR
17128: LD_INT 1
17130: PUSH
17131: FOR_DOWNTO
17132: IFFALSE 17295
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
17134: LD_EXP 73
17138: PUSH
17139: LD_VAR 0 6
17143: ARRAY
17144: PUSH
17145: LD_VAR 0 5
17149: ARRAY
17150: PUSH
17151: LD_INT 1
17153: ARRAY
17154: PPUSH
17155: LD_EXP 73
17159: PUSH
17160: LD_VAR 0 6
17164: ARRAY
17165: PUSH
17166: LD_VAR 0 5
17170: ARRAY
17171: PUSH
17172: LD_INT 2
17174: ARRAY
17175: PPUSH
17176: LD_VAR 0 2
17180: PPUSH
17181: LD_VAR 0 3
17185: PPUSH
17186: CALL_OW 298
17190: PUSH
17191: LD_INT 6
17193: LESS
17194: IFFALSE 17293
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17196: LD_EXP 73
17200: PUSH
17201: LD_VAR 0 6
17205: ARRAY
17206: PUSH
17207: LD_VAR 0 5
17211: ARRAY
17212: PUSH
17213: LD_INT 1
17215: ARRAY
17216: PPUSH
17217: LD_EXP 73
17221: PUSH
17222: LD_VAR 0 6
17226: ARRAY
17227: PUSH
17228: LD_VAR 0 5
17232: ARRAY
17233: PUSH
17234: LD_INT 2
17236: ARRAY
17237: PPUSH
17238: LD_VAR 0 1
17242: PPUSH
17243: CALL_OW 255
17247: PPUSH
17248: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17252: LD_ADDR_EXP 73
17256: PUSH
17257: LD_EXP 73
17261: PPUSH
17262: LD_VAR 0 6
17266: PPUSH
17267: LD_EXP 73
17271: PUSH
17272: LD_VAR 0 6
17276: ARRAY
17277: PPUSH
17278: LD_VAR 0 5
17282: PPUSH
17283: CALL_OW 3
17287: PPUSH
17288: CALL_OW 1
17292: ST_TO_ADDR
// end ; end ;
17293: GO 17131
17295: POP
17296: POP
// end ;
17297: LD_VAR 0 4
17301: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
17302: LD_INT 0
17304: PPUSH
17305: PPUSH
17306: PPUSH
17307: PPUSH
17308: PPUSH
17309: PPUSH
17310: PPUSH
17311: PPUSH
17312: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
17313: LD_VAR 0 1
17317: PPUSH
17318: CALL_OW 264
17322: PUSH
17323: LD_EXP 51
17327: EQUAL
17328: NOT
17329: PUSH
17330: LD_VAR 0 1
17334: PUSH
17335: LD_EXP 72
17339: IN
17340: NOT
17341: OR
17342: IFFALSE 17346
// exit ;
17344: GO 17668
// index := GetElementIndex ( minersList , unit ) ;
17346: LD_ADDR_VAR 0 6
17350: PUSH
17351: LD_EXP 72
17355: PPUSH
17356: LD_VAR 0 1
17360: PPUSH
17361: CALL 36036 0 2
17365: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
17366: LD_ADDR_VAR 0 8
17370: PUSH
17371: LD_EXP 74
17375: PUSH
17376: LD_EXP 73
17380: PUSH
17381: LD_VAR 0 6
17385: ARRAY
17386: MINUS
17387: ST_TO_ADDR
// if not minesFreeAmount then
17388: LD_VAR 0 8
17392: NOT
17393: IFFALSE 17397
// exit ;
17395: GO 17668
// tmp := [ ] ;
17397: LD_ADDR_VAR 0 7
17401: PUSH
17402: EMPTY
17403: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
17404: LD_ADDR_VAR 0 5
17408: PUSH
17409: DOUBLE
17410: LD_INT 1
17412: DEC
17413: ST_TO_ADDR
17414: LD_VAR 0 8
17418: PUSH
17419: FOR_TO
17420: IFFALSE 17615
// begin _d := rand ( 0 , 5 ) ;
17422: LD_ADDR_VAR 0 11
17426: PUSH
17427: LD_INT 0
17429: PPUSH
17430: LD_INT 5
17432: PPUSH
17433: CALL_OW 12
17437: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
17438: LD_ADDR_VAR 0 12
17442: PUSH
17443: LD_INT 2
17445: PPUSH
17446: LD_INT 6
17448: PPUSH
17449: CALL_OW 12
17453: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
17454: LD_ADDR_VAR 0 9
17458: PUSH
17459: LD_VAR 0 2
17463: PPUSH
17464: LD_VAR 0 11
17468: PPUSH
17469: LD_VAR 0 12
17473: PPUSH
17474: CALL_OW 272
17478: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
17479: LD_ADDR_VAR 0 10
17483: PUSH
17484: LD_VAR 0 3
17488: PPUSH
17489: LD_VAR 0 11
17493: PPUSH
17494: LD_VAR 0 12
17498: PPUSH
17499: CALL_OW 273
17503: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
17504: LD_VAR 0 9
17508: PPUSH
17509: LD_VAR 0 10
17513: PPUSH
17514: CALL_OW 488
17518: PUSH
17519: LD_VAR 0 9
17523: PUSH
17524: LD_VAR 0 10
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_VAR 0 7
17537: IN
17538: NOT
17539: AND
17540: PUSH
17541: LD_VAR 0 9
17545: PPUSH
17546: LD_VAR 0 10
17550: PPUSH
17551: CALL_OW 458
17555: NOT
17556: AND
17557: IFFALSE 17599
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
17559: LD_ADDR_VAR 0 7
17563: PUSH
17564: LD_VAR 0 7
17568: PPUSH
17569: LD_VAR 0 7
17573: PUSH
17574: LD_INT 1
17576: PLUS
17577: PPUSH
17578: LD_VAR 0 9
17582: PUSH
17583: LD_VAR 0 10
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PPUSH
17592: CALL_OW 1
17596: ST_TO_ADDR
17597: GO 17613
// i := i - 1 ;
17599: LD_ADDR_VAR 0 5
17603: PUSH
17604: LD_VAR 0 5
17608: PUSH
17609: LD_INT 1
17611: MINUS
17612: ST_TO_ADDR
// end ;
17613: GO 17419
17615: POP
17616: POP
// for i in tmp do
17617: LD_ADDR_VAR 0 5
17621: PUSH
17622: LD_VAR 0 7
17626: PUSH
17627: FOR_IN
17628: IFFALSE 17666
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
17630: LD_VAR 0 1
17634: PPUSH
17635: LD_VAR 0 5
17639: PUSH
17640: LD_INT 1
17642: ARRAY
17643: PPUSH
17644: LD_VAR 0 5
17648: PUSH
17649: LD_INT 2
17651: ARRAY
17652: PPUSH
17653: CALL 16608 0 3
17657: NOT
17658: IFFALSE 17664
// exit ;
17660: POP
17661: POP
17662: GO 17668
17664: GO 17627
17666: POP
17667: POP
// end ;
17668: LD_VAR 0 4
17672: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
17673: LD_INT 0
17675: PPUSH
17676: PPUSH
17677: PPUSH
17678: PPUSH
17679: PPUSH
17680: PPUSH
17681: PPUSH
// if not GetClass ( unit ) = class_sniper then
17682: LD_VAR 0 1
17686: PPUSH
17687: CALL_OW 257
17691: PUSH
17692: LD_INT 5
17694: EQUAL
17695: NOT
17696: IFFALSE 17700
// exit ;
17698: GO 18088
// dist := 8 ;
17700: LD_ADDR_VAR 0 5
17704: PUSH
17705: LD_INT 8
17707: ST_TO_ADDR
// viewRange := 12 ;
17708: LD_ADDR_VAR 0 7
17712: PUSH
17713: LD_INT 12
17715: ST_TO_ADDR
// side := GetSide ( unit ) ;
17716: LD_ADDR_VAR 0 6
17720: PUSH
17721: LD_VAR 0 1
17725: PPUSH
17726: CALL_OW 255
17730: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
17731: LD_INT 61
17733: PPUSH
17734: LD_VAR 0 6
17738: PPUSH
17739: CALL_OW 321
17743: PUSH
17744: LD_INT 2
17746: EQUAL
17747: IFFALSE 17757
// viewRange := 16 ;
17749: LD_ADDR_VAR 0 7
17753: PUSH
17754: LD_INT 16
17756: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
17757: LD_VAR 0 1
17761: PPUSH
17762: LD_VAR 0 2
17766: PPUSH
17767: LD_VAR 0 3
17771: PPUSH
17772: CALL_OW 297
17776: PUSH
17777: LD_VAR 0 5
17781: GREATER
17782: IFFALSE 17861
// begin ComMoveXY ( unit , x , y ) ;
17784: LD_VAR 0 1
17788: PPUSH
17789: LD_VAR 0 2
17793: PPUSH
17794: LD_VAR 0 3
17798: PPUSH
17799: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17803: LD_INT 35
17805: PPUSH
17806: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
17810: LD_VAR 0 1
17814: PPUSH
17815: LD_VAR 0 2
17819: PPUSH
17820: LD_VAR 0 3
17824: PPUSH
17825: CALL 66809 0 3
17829: NOT
17830: IFFALSE 17834
// exit ;
17832: GO 18088
// until GetDistUnitXY ( unit , x , y ) < dist ;
17834: LD_VAR 0 1
17838: PPUSH
17839: LD_VAR 0 2
17843: PPUSH
17844: LD_VAR 0 3
17848: PPUSH
17849: CALL_OW 297
17853: PUSH
17854: LD_VAR 0 5
17858: LESS
17859: IFFALSE 17803
// end ; ComTurnXY ( unit , x , y ) ;
17861: LD_VAR 0 1
17865: PPUSH
17866: LD_VAR 0 2
17870: PPUSH
17871: LD_VAR 0 3
17875: PPUSH
17876: CALL_OW 118
// wait ( 5 ) ;
17880: LD_INT 5
17882: PPUSH
17883: CALL_OW 67
// _d := GetDir ( unit ) ;
17887: LD_ADDR_VAR 0 10
17891: PUSH
17892: LD_VAR 0 1
17896: PPUSH
17897: CALL_OW 254
17901: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
17902: LD_ADDR_VAR 0 8
17906: PUSH
17907: LD_VAR 0 1
17911: PPUSH
17912: CALL_OW 250
17916: PPUSH
17917: LD_VAR 0 10
17921: PPUSH
17922: LD_VAR 0 5
17926: PPUSH
17927: CALL_OW 272
17931: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
17932: LD_ADDR_VAR 0 9
17936: PUSH
17937: LD_VAR 0 1
17941: PPUSH
17942: CALL_OW 251
17946: PPUSH
17947: LD_VAR 0 10
17951: PPUSH
17952: LD_VAR 0 5
17956: PPUSH
17957: CALL_OW 273
17961: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17962: LD_VAR 0 8
17966: PPUSH
17967: LD_VAR 0 9
17971: PPUSH
17972: CALL_OW 488
17976: NOT
17977: IFFALSE 17981
// exit ;
17979: GO 18088
// ComAnimCustom ( unit , 1 ) ;
17981: LD_VAR 0 1
17985: PPUSH
17986: LD_INT 1
17988: PPUSH
17989: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
17993: LD_VAR 0 8
17997: PPUSH
17998: LD_VAR 0 9
18002: PPUSH
18003: LD_VAR 0 6
18007: PPUSH
18008: LD_VAR 0 7
18012: PPUSH
18013: CALL_OW 330
// repeat wait ( 1 ) ;
18017: LD_INT 1
18019: PPUSH
18020: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
18024: LD_VAR 0 1
18028: PPUSH
18029: CALL_OW 316
18033: PUSH
18034: LD_VAR 0 1
18038: PPUSH
18039: CALL_OW 314
18043: OR
18044: PUSH
18045: LD_VAR 0 1
18049: PPUSH
18050: CALL_OW 302
18054: NOT
18055: OR
18056: PUSH
18057: LD_VAR 0 1
18061: PPUSH
18062: CALL_OW 301
18066: OR
18067: IFFALSE 18017
// RemoveSeeing ( _x , _y , side ) ;
18069: LD_VAR 0 8
18073: PPUSH
18074: LD_VAR 0 9
18078: PPUSH
18079: LD_VAR 0 6
18083: PPUSH
18084: CALL_OW 331
// end ; end_of_file
18088: LD_VAR 0 4
18092: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18093: LD_INT 0
18095: PPUSH
// if p2 = 100 then
18096: LD_VAR 0 2
18100: PUSH
18101: LD_INT 100
18103: EQUAL
18104: IFFALSE 19053
// begin if not StreamModeActive then
18106: LD_EXP 75
18110: NOT
18111: IFFALSE 18121
// StreamModeActive := true ;
18113: LD_ADDR_EXP 75
18117: PUSH
18118: LD_INT 1
18120: ST_TO_ADDR
// if p3 = 0 then
18121: LD_VAR 0 3
18125: PUSH
18126: LD_INT 0
18128: EQUAL
18129: IFFALSE 18135
// InitStreamMode ;
18131: CALL 19213 0 0
// if p3 = 1 then
18135: LD_VAR 0 3
18139: PUSH
18140: LD_INT 1
18142: EQUAL
18143: IFFALSE 18153
// sRocket := true ;
18145: LD_ADDR_EXP 80
18149: PUSH
18150: LD_INT 1
18152: ST_TO_ADDR
// if p3 = 2 then
18153: LD_VAR 0 3
18157: PUSH
18158: LD_INT 2
18160: EQUAL
18161: IFFALSE 18171
// sSpeed := true ;
18163: LD_ADDR_EXP 79
18167: PUSH
18168: LD_INT 1
18170: ST_TO_ADDR
// if p3 = 3 then
18171: LD_VAR 0 3
18175: PUSH
18176: LD_INT 3
18178: EQUAL
18179: IFFALSE 18189
// sEngine := true ;
18181: LD_ADDR_EXP 81
18185: PUSH
18186: LD_INT 1
18188: ST_TO_ADDR
// if p3 = 4 then
18189: LD_VAR 0 3
18193: PUSH
18194: LD_INT 4
18196: EQUAL
18197: IFFALSE 18207
// sSpec := true ;
18199: LD_ADDR_EXP 78
18203: PUSH
18204: LD_INT 1
18206: ST_TO_ADDR
// if p3 = 5 then
18207: LD_VAR 0 3
18211: PUSH
18212: LD_INT 5
18214: EQUAL
18215: IFFALSE 18225
// sLevel := true ;
18217: LD_ADDR_EXP 82
18221: PUSH
18222: LD_INT 1
18224: ST_TO_ADDR
// if p3 = 6 then
18225: LD_VAR 0 3
18229: PUSH
18230: LD_INT 6
18232: EQUAL
18233: IFFALSE 18243
// sArmoury := true ;
18235: LD_ADDR_EXP 83
18239: PUSH
18240: LD_INT 1
18242: ST_TO_ADDR
// if p3 = 7 then
18243: LD_VAR 0 3
18247: PUSH
18248: LD_INT 7
18250: EQUAL
18251: IFFALSE 18261
// sRadar := true ;
18253: LD_ADDR_EXP 84
18257: PUSH
18258: LD_INT 1
18260: ST_TO_ADDR
// if p3 = 8 then
18261: LD_VAR 0 3
18265: PUSH
18266: LD_INT 8
18268: EQUAL
18269: IFFALSE 18279
// sBunker := true ;
18271: LD_ADDR_EXP 85
18275: PUSH
18276: LD_INT 1
18278: ST_TO_ADDR
// if p3 = 9 then
18279: LD_VAR 0 3
18283: PUSH
18284: LD_INT 9
18286: EQUAL
18287: IFFALSE 18297
// sHack := true ;
18289: LD_ADDR_EXP 86
18293: PUSH
18294: LD_INT 1
18296: ST_TO_ADDR
// if p3 = 10 then
18297: LD_VAR 0 3
18301: PUSH
18302: LD_INT 10
18304: EQUAL
18305: IFFALSE 18315
// sFire := true ;
18307: LD_ADDR_EXP 87
18311: PUSH
18312: LD_INT 1
18314: ST_TO_ADDR
// if p3 = 11 then
18315: LD_VAR 0 3
18319: PUSH
18320: LD_INT 11
18322: EQUAL
18323: IFFALSE 18333
// sRefresh := true ;
18325: LD_ADDR_EXP 88
18329: PUSH
18330: LD_INT 1
18332: ST_TO_ADDR
// if p3 = 12 then
18333: LD_VAR 0 3
18337: PUSH
18338: LD_INT 12
18340: EQUAL
18341: IFFALSE 18351
// sExp := true ;
18343: LD_ADDR_EXP 89
18347: PUSH
18348: LD_INT 1
18350: ST_TO_ADDR
// if p3 = 13 then
18351: LD_VAR 0 3
18355: PUSH
18356: LD_INT 13
18358: EQUAL
18359: IFFALSE 18369
// sDepot := true ;
18361: LD_ADDR_EXP 90
18365: PUSH
18366: LD_INT 1
18368: ST_TO_ADDR
// if p3 = 14 then
18369: LD_VAR 0 3
18373: PUSH
18374: LD_INT 14
18376: EQUAL
18377: IFFALSE 18387
// sFlag := true ;
18379: LD_ADDR_EXP 91
18383: PUSH
18384: LD_INT 1
18386: ST_TO_ADDR
// if p3 = 15 then
18387: LD_VAR 0 3
18391: PUSH
18392: LD_INT 15
18394: EQUAL
18395: IFFALSE 18405
// sKamikadze := true ;
18397: LD_ADDR_EXP 99
18401: PUSH
18402: LD_INT 1
18404: ST_TO_ADDR
// if p3 = 16 then
18405: LD_VAR 0 3
18409: PUSH
18410: LD_INT 16
18412: EQUAL
18413: IFFALSE 18423
// sTroll := true ;
18415: LD_ADDR_EXP 100
18419: PUSH
18420: LD_INT 1
18422: ST_TO_ADDR
// if p3 = 17 then
18423: LD_VAR 0 3
18427: PUSH
18428: LD_INT 17
18430: EQUAL
18431: IFFALSE 18441
// sSlow := true ;
18433: LD_ADDR_EXP 101
18437: PUSH
18438: LD_INT 1
18440: ST_TO_ADDR
// if p3 = 18 then
18441: LD_VAR 0 3
18445: PUSH
18446: LD_INT 18
18448: EQUAL
18449: IFFALSE 18459
// sLack := true ;
18451: LD_ADDR_EXP 102
18455: PUSH
18456: LD_INT 1
18458: ST_TO_ADDR
// if p3 = 19 then
18459: LD_VAR 0 3
18463: PUSH
18464: LD_INT 19
18466: EQUAL
18467: IFFALSE 18477
// sTank := true ;
18469: LD_ADDR_EXP 104
18473: PUSH
18474: LD_INT 1
18476: ST_TO_ADDR
// if p3 = 20 then
18477: LD_VAR 0 3
18481: PUSH
18482: LD_INT 20
18484: EQUAL
18485: IFFALSE 18495
// sRemote := true ;
18487: LD_ADDR_EXP 105
18491: PUSH
18492: LD_INT 1
18494: ST_TO_ADDR
// if p3 = 21 then
18495: LD_VAR 0 3
18499: PUSH
18500: LD_INT 21
18502: EQUAL
18503: IFFALSE 18513
// sPowell := true ;
18505: LD_ADDR_EXP 106
18509: PUSH
18510: LD_INT 1
18512: ST_TO_ADDR
// if p3 = 22 then
18513: LD_VAR 0 3
18517: PUSH
18518: LD_INT 22
18520: EQUAL
18521: IFFALSE 18531
// sTeleport := true ;
18523: LD_ADDR_EXP 109
18527: PUSH
18528: LD_INT 1
18530: ST_TO_ADDR
// if p3 = 23 then
18531: LD_VAR 0 3
18535: PUSH
18536: LD_INT 23
18538: EQUAL
18539: IFFALSE 18549
// sOilTower := true ;
18541: LD_ADDR_EXP 111
18545: PUSH
18546: LD_INT 1
18548: ST_TO_ADDR
// if p3 = 24 then
18549: LD_VAR 0 3
18553: PUSH
18554: LD_INT 24
18556: EQUAL
18557: IFFALSE 18567
// sShovel := true ;
18559: LD_ADDR_EXP 112
18563: PUSH
18564: LD_INT 1
18566: ST_TO_ADDR
// if p3 = 25 then
18567: LD_VAR 0 3
18571: PUSH
18572: LD_INT 25
18574: EQUAL
18575: IFFALSE 18585
// sSheik := true ;
18577: LD_ADDR_EXP 113
18581: PUSH
18582: LD_INT 1
18584: ST_TO_ADDR
// if p3 = 26 then
18585: LD_VAR 0 3
18589: PUSH
18590: LD_INT 26
18592: EQUAL
18593: IFFALSE 18603
// sEarthquake := true ;
18595: LD_ADDR_EXP 115
18599: PUSH
18600: LD_INT 1
18602: ST_TO_ADDR
// if p3 = 27 then
18603: LD_VAR 0 3
18607: PUSH
18608: LD_INT 27
18610: EQUAL
18611: IFFALSE 18621
// sAI := true ;
18613: LD_ADDR_EXP 116
18617: PUSH
18618: LD_INT 1
18620: ST_TO_ADDR
// if p3 = 28 then
18621: LD_VAR 0 3
18625: PUSH
18626: LD_INT 28
18628: EQUAL
18629: IFFALSE 18639
// sCargo := true ;
18631: LD_ADDR_EXP 119
18635: PUSH
18636: LD_INT 1
18638: ST_TO_ADDR
// if p3 = 29 then
18639: LD_VAR 0 3
18643: PUSH
18644: LD_INT 29
18646: EQUAL
18647: IFFALSE 18657
// sDLaser := true ;
18649: LD_ADDR_EXP 120
18653: PUSH
18654: LD_INT 1
18656: ST_TO_ADDR
// if p3 = 30 then
18657: LD_VAR 0 3
18661: PUSH
18662: LD_INT 30
18664: EQUAL
18665: IFFALSE 18675
// sExchange := true ;
18667: LD_ADDR_EXP 121
18671: PUSH
18672: LD_INT 1
18674: ST_TO_ADDR
// if p3 = 31 then
18675: LD_VAR 0 3
18679: PUSH
18680: LD_INT 31
18682: EQUAL
18683: IFFALSE 18693
// sFac := true ;
18685: LD_ADDR_EXP 122
18689: PUSH
18690: LD_INT 1
18692: ST_TO_ADDR
// if p3 = 32 then
18693: LD_VAR 0 3
18697: PUSH
18698: LD_INT 32
18700: EQUAL
18701: IFFALSE 18711
// sPower := true ;
18703: LD_ADDR_EXP 123
18707: PUSH
18708: LD_INT 1
18710: ST_TO_ADDR
// if p3 = 33 then
18711: LD_VAR 0 3
18715: PUSH
18716: LD_INT 33
18718: EQUAL
18719: IFFALSE 18729
// sRandom := true ;
18721: LD_ADDR_EXP 124
18725: PUSH
18726: LD_INT 1
18728: ST_TO_ADDR
// if p3 = 34 then
18729: LD_VAR 0 3
18733: PUSH
18734: LD_INT 34
18736: EQUAL
18737: IFFALSE 18747
// sShield := true ;
18739: LD_ADDR_EXP 125
18743: PUSH
18744: LD_INT 1
18746: ST_TO_ADDR
// if p3 = 35 then
18747: LD_VAR 0 3
18751: PUSH
18752: LD_INT 35
18754: EQUAL
18755: IFFALSE 18765
// sTime := true ;
18757: LD_ADDR_EXP 126
18761: PUSH
18762: LD_INT 1
18764: ST_TO_ADDR
// if p3 = 36 then
18765: LD_VAR 0 3
18769: PUSH
18770: LD_INT 36
18772: EQUAL
18773: IFFALSE 18783
// sTools := true ;
18775: LD_ADDR_EXP 127
18779: PUSH
18780: LD_INT 1
18782: ST_TO_ADDR
// if p3 = 101 then
18783: LD_VAR 0 3
18787: PUSH
18788: LD_INT 101
18790: EQUAL
18791: IFFALSE 18801
// sSold := true ;
18793: LD_ADDR_EXP 92
18797: PUSH
18798: LD_INT 1
18800: ST_TO_ADDR
// if p3 = 102 then
18801: LD_VAR 0 3
18805: PUSH
18806: LD_INT 102
18808: EQUAL
18809: IFFALSE 18819
// sDiff := true ;
18811: LD_ADDR_EXP 93
18815: PUSH
18816: LD_INT 1
18818: ST_TO_ADDR
// if p3 = 103 then
18819: LD_VAR 0 3
18823: PUSH
18824: LD_INT 103
18826: EQUAL
18827: IFFALSE 18837
// sFog := true ;
18829: LD_ADDR_EXP 96
18833: PUSH
18834: LD_INT 1
18836: ST_TO_ADDR
// if p3 = 104 then
18837: LD_VAR 0 3
18841: PUSH
18842: LD_INT 104
18844: EQUAL
18845: IFFALSE 18855
// sReset := true ;
18847: LD_ADDR_EXP 97
18851: PUSH
18852: LD_INT 1
18854: ST_TO_ADDR
// if p3 = 105 then
18855: LD_VAR 0 3
18859: PUSH
18860: LD_INT 105
18862: EQUAL
18863: IFFALSE 18873
// sSun := true ;
18865: LD_ADDR_EXP 98
18869: PUSH
18870: LD_INT 1
18872: ST_TO_ADDR
// if p3 = 106 then
18873: LD_VAR 0 3
18877: PUSH
18878: LD_INT 106
18880: EQUAL
18881: IFFALSE 18891
// sTiger := true ;
18883: LD_ADDR_EXP 94
18887: PUSH
18888: LD_INT 1
18890: ST_TO_ADDR
// if p3 = 107 then
18891: LD_VAR 0 3
18895: PUSH
18896: LD_INT 107
18898: EQUAL
18899: IFFALSE 18909
// sBomb := true ;
18901: LD_ADDR_EXP 95
18905: PUSH
18906: LD_INT 1
18908: ST_TO_ADDR
// if p3 = 108 then
18909: LD_VAR 0 3
18913: PUSH
18914: LD_INT 108
18916: EQUAL
18917: IFFALSE 18927
// sWound := true ;
18919: LD_ADDR_EXP 103
18923: PUSH
18924: LD_INT 1
18926: ST_TO_ADDR
// if p3 = 109 then
18927: LD_VAR 0 3
18931: PUSH
18932: LD_INT 109
18934: EQUAL
18935: IFFALSE 18945
// sBetray := true ;
18937: LD_ADDR_EXP 107
18941: PUSH
18942: LD_INT 1
18944: ST_TO_ADDR
// if p3 = 110 then
18945: LD_VAR 0 3
18949: PUSH
18950: LD_INT 110
18952: EQUAL
18953: IFFALSE 18963
// sContamin := true ;
18955: LD_ADDR_EXP 108
18959: PUSH
18960: LD_INT 1
18962: ST_TO_ADDR
// if p3 = 111 then
18963: LD_VAR 0 3
18967: PUSH
18968: LD_INT 111
18970: EQUAL
18971: IFFALSE 18981
// sOil := true ;
18973: LD_ADDR_EXP 110
18977: PUSH
18978: LD_INT 1
18980: ST_TO_ADDR
// if p3 = 112 then
18981: LD_VAR 0 3
18985: PUSH
18986: LD_INT 112
18988: EQUAL
18989: IFFALSE 18999
// sStu := true ;
18991: LD_ADDR_EXP 114
18995: PUSH
18996: LD_INT 1
18998: ST_TO_ADDR
// if p3 = 113 then
18999: LD_VAR 0 3
19003: PUSH
19004: LD_INT 113
19006: EQUAL
19007: IFFALSE 19017
// sBazooka := true ;
19009: LD_ADDR_EXP 117
19013: PUSH
19014: LD_INT 1
19016: ST_TO_ADDR
// if p3 = 114 then
19017: LD_VAR 0 3
19021: PUSH
19022: LD_INT 114
19024: EQUAL
19025: IFFALSE 19035
// sMortar := true ;
19027: LD_ADDR_EXP 118
19031: PUSH
19032: LD_INT 1
19034: ST_TO_ADDR
// if p3 = 115 then
19035: LD_VAR 0 3
19039: PUSH
19040: LD_INT 115
19042: EQUAL
19043: IFFALSE 19053
// sRanger := true ;
19045: LD_ADDR_EXP 128
19049: PUSH
19050: LD_INT 1
19052: ST_TO_ADDR
// end ; if p2 = 101 then
19053: LD_VAR 0 2
19057: PUSH
19058: LD_INT 101
19060: EQUAL
19061: IFFALSE 19189
// begin case p3 of 1 :
19063: LD_VAR 0 3
19067: PUSH
19068: LD_INT 1
19070: DOUBLE
19071: EQUAL
19072: IFTRUE 19076
19074: GO 19083
19076: POP
// hHackUnlimitedResources ; 2 :
19077: CALL 30226 0 0
19081: GO 19189
19083: LD_INT 2
19085: DOUBLE
19086: EQUAL
19087: IFTRUE 19091
19089: GO 19098
19091: POP
// hHackSetLevel10 ; 3 :
19092: CALL 30359 0 0
19096: GO 19189
19098: LD_INT 3
19100: DOUBLE
19101: EQUAL
19102: IFTRUE 19106
19104: GO 19113
19106: POP
// hHackSetLevel10YourUnits ; 4 :
19107: CALL 30444 0 0
19111: GO 19189
19113: LD_INT 4
19115: DOUBLE
19116: EQUAL
19117: IFTRUE 19121
19119: GO 19128
19121: POP
// hHackInvincible ; 5 :
19122: CALL 30892 0 0
19126: GO 19189
19128: LD_INT 5
19130: DOUBLE
19131: EQUAL
19132: IFTRUE 19136
19134: GO 19143
19136: POP
// hHackInvisible ; 6 :
19137: CALL 31003 0 0
19141: GO 19189
19143: LD_INT 6
19145: DOUBLE
19146: EQUAL
19147: IFTRUE 19151
19149: GO 19158
19151: POP
// hHackChangeYourSide ; 7 :
19152: CALL 31060 0 0
19156: GO 19189
19158: LD_INT 7
19160: DOUBLE
19161: EQUAL
19162: IFTRUE 19166
19164: GO 19173
19166: POP
// hHackChangeUnitSide ; 8 :
19167: CALL 31102 0 0
19171: GO 19189
19173: LD_INT 8
19175: DOUBLE
19176: EQUAL
19177: IFTRUE 19181
19179: GO 19188
19181: POP
// hHackFog ; end ;
19182: CALL 31203 0 0
19186: GO 19189
19188: POP
// end ; end ;
19189: LD_VAR 0 7
19193: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19194: GO 19196
19196: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19197: LD_STRING initStreamRollete();
19199: PPUSH
19200: CALL_OW 559
// InitStreamMode ;
19204: CALL 19213 0 0
// DefineStreamItems ( ) ;
19208: CALL 19653 0 0
// end ;
19212: END
// function InitStreamMode ; begin
19213: LD_INT 0
19215: PPUSH
// streamModeActive := false ;
19216: LD_ADDR_EXP 75
19220: PUSH
19221: LD_INT 0
19223: ST_TO_ADDR
// normalCounter := 36 ;
19224: LD_ADDR_EXP 76
19228: PUSH
19229: LD_INT 36
19231: ST_TO_ADDR
// hardcoreCounter := 16 ;
19232: LD_ADDR_EXP 77
19236: PUSH
19237: LD_INT 16
19239: ST_TO_ADDR
// sRocket := false ;
19240: LD_ADDR_EXP 80
19244: PUSH
19245: LD_INT 0
19247: ST_TO_ADDR
// sSpeed := false ;
19248: LD_ADDR_EXP 79
19252: PUSH
19253: LD_INT 0
19255: ST_TO_ADDR
// sEngine := false ;
19256: LD_ADDR_EXP 81
19260: PUSH
19261: LD_INT 0
19263: ST_TO_ADDR
// sSpec := false ;
19264: LD_ADDR_EXP 78
19268: PUSH
19269: LD_INT 0
19271: ST_TO_ADDR
// sLevel := false ;
19272: LD_ADDR_EXP 82
19276: PUSH
19277: LD_INT 0
19279: ST_TO_ADDR
// sArmoury := false ;
19280: LD_ADDR_EXP 83
19284: PUSH
19285: LD_INT 0
19287: ST_TO_ADDR
// sRadar := false ;
19288: LD_ADDR_EXP 84
19292: PUSH
19293: LD_INT 0
19295: ST_TO_ADDR
// sBunker := false ;
19296: LD_ADDR_EXP 85
19300: PUSH
19301: LD_INT 0
19303: ST_TO_ADDR
// sHack := false ;
19304: LD_ADDR_EXP 86
19308: PUSH
19309: LD_INT 0
19311: ST_TO_ADDR
// sFire := false ;
19312: LD_ADDR_EXP 87
19316: PUSH
19317: LD_INT 0
19319: ST_TO_ADDR
// sRefresh := false ;
19320: LD_ADDR_EXP 88
19324: PUSH
19325: LD_INT 0
19327: ST_TO_ADDR
// sExp := false ;
19328: LD_ADDR_EXP 89
19332: PUSH
19333: LD_INT 0
19335: ST_TO_ADDR
// sDepot := false ;
19336: LD_ADDR_EXP 90
19340: PUSH
19341: LD_INT 0
19343: ST_TO_ADDR
// sFlag := false ;
19344: LD_ADDR_EXP 91
19348: PUSH
19349: LD_INT 0
19351: ST_TO_ADDR
// sKamikadze := false ;
19352: LD_ADDR_EXP 99
19356: PUSH
19357: LD_INT 0
19359: ST_TO_ADDR
// sTroll := false ;
19360: LD_ADDR_EXP 100
19364: PUSH
19365: LD_INT 0
19367: ST_TO_ADDR
// sSlow := false ;
19368: LD_ADDR_EXP 101
19372: PUSH
19373: LD_INT 0
19375: ST_TO_ADDR
// sLack := false ;
19376: LD_ADDR_EXP 102
19380: PUSH
19381: LD_INT 0
19383: ST_TO_ADDR
// sTank := false ;
19384: LD_ADDR_EXP 104
19388: PUSH
19389: LD_INT 0
19391: ST_TO_ADDR
// sRemote := false ;
19392: LD_ADDR_EXP 105
19396: PUSH
19397: LD_INT 0
19399: ST_TO_ADDR
// sPowell := false ;
19400: LD_ADDR_EXP 106
19404: PUSH
19405: LD_INT 0
19407: ST_TO_ADDR
// sTeleport := false ;
19408: LD_ADDR_EXP 109
19412: PUSH
19413: LD_INT 0
19415: ST_TO_ADDR
// sOilTower := false ;
19416: LD_ADDR_EXP 111
19420: PUSH
19421: LD_INT 0
19423: ST_TO_ADDR
// sShovel := false ;
19424: LD_ADDR_EXP 112
19428: PUSH
19429: LD_INT 0
19431: ST_TO_ADDR
// sSheik := false ;
19432: LD_ADDR_EXP 113
19436: PUSH
19437: LD_INT 0
19439: ST_TO_ADDR
// sEarthquake := false ;
19440: LD_ADDR_EXP 115
19444: PUSH
19445: LD_INT 0
19447: ST_TO_ADDR
// sAI := false ;
19448: LD_ADDR_EXP 116
19452: PUSH
19453: LD_INT 0
19455: ST_TO_ADDR
// sCargo := false ;
19456: LD_ADDR_EXP 119
19460: PUSH
19461: LD_INT 0
19463: ST_TO_ADDR
// sDLaser := false ;
19464: LD_ADDR_EXP 120
19468: PUSH
19469: LD_INT 0
19471: ST_TO_ADDR
// sExchange := false ;
19472: LD_ADDR_EXP 121
19476: PUSH
19477: LD_INT 0
19479: ST_TO_ADDR
// sFac := false ;
19480: LD_ADDR_EXP 122
19484: PUSH
19485: LD_INT 0
19487: ST_TO_ADDR
// sPower := false ;
19488: LD_ADDR_EXP 123
19492: PUSH
19493: LD_INT 0
19495: ST_TO_ADDR
// sRandom := false ;
19496: LD_ADDR_EXP 124
19500: PUSH
19501: LD_INT 0
19503: ST_TO_ADDR
// sShield := false ;
19504: LD_ADDR_EXP 125
19508: PUSH
19509: LD_INT 0
19511: ST_TO_ADDR
// sTime := false ;
19512: LD_ADDR_EXP 126
19516: PUSH
19517: LD_INT 0
19519: ST_TO_ADDR
// sTools := false ;
19520: LD_ADDR_EXP 127
19524: PUSH
19525: LD_INT 0
19527: ST_TO_ADDR
// sSold := false ;
19528: LD_ADDR_EXP 92
19532: PUSH
19533: LD_INT 0
19535: ST_TO_ADDR
// sDiff := false ;
19536: LD_ADDR_EXP 93
19540: PUSH
19541: LD_INT 0
19543: ST_TO_ADDR
// sFog := false ;
19544: LD_ADDR_EXP 96
19548: PUSH
19549: LD_INT 0
19551: ST_TO_ADDR
// sReset := false ;
19552: LD_ADDR_EXP 97
19556: PUSH
19557: LD_INT 0
19559: ST_TO_ADDR
// sSun := false ;
19560: LD_ADDR_EXP 98
19564: PUSH
19565: LD_INT 0
19567: ST_TO_ADDR
// sTiger := false ;
19568: LD_ADDR_EXP 94
19572: PUSH
19573: LD_INT 0
19575: ST_TO_ADDR
// sBomb := false ;
19576: LD_ADDR_EXP 95
19580: PUSH
19581: LD_INT 0
19583: ST_TO_ADDR
// sWound := false ;
19584: LD_ADDR_EXP 103
19588: PUSH
19589: LD_INT 0
19591: ST_TO_ADDR
// sBetray := false ;
19592: LD_ADDR_EXP 107
19596: PUSH
19597: LD_INT 0
19599: ST_TO_ADDR
// sContamin := false ;
19600: LD_ADDR_EXP 108
19604: PUSH
19605: LD_INT 0
19607: ST_TO_ADDR
// sOil := false ;
19608: LD_ADDR_EXP 110
19612: PUSH
19613: LD_INT 0
19615: ST_TO_ADDR
// sStu := false ;
19616: LD_ADDR_EXP 114
19620: PUSH
19621: LD_INT 0
19623: ST_TO_ADDR
// sBazooka := false ;
19624: LD_ADDR_EXP 117
19628: PUSH
19629: LD_INT 0
19631: ST_TO_ADDR
// sMortar := false ;
19632: LD_ADDR_EXP 118
19636: PUSH
19637: LD_INT 0
19639: ST_TO_ADDR
// sRanger := false ;
19640: LD_ADDR_EXP 128
19644: PUSH
19645: LD_INT 0
19647: ST_TO_ADDR
// end ;
19648: LD_VAR 0 1
19652: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
19653: LD_INT 0
19655: PPUSH
19656: PPUSH
19657: PPUSH
19658: PPUSH
19659: PPUSH
// result := [ ] ;
19660: LD_ADDR_VAR 0 1
19664: PUSH
19665: EMPTY
19666: ST_TO_ADDR
// if campaign_id = 1 then
19667: LD_OWVAR 69
19671: PUSH
19672: LD_INT 1
19674: EQUAL
19675: IFFALSE 22613
// begin case mission_number of 1 :
19677: LD_OWVAR 70
19681: PUSH
19682: LD_INT 1
19684: DOUBLE
19685: EQUAL
19686: IFTRUE 19690
19688: GO 19754
19690: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
19691: LD_ADDR_VAR 0 1
19695: PUSH
19696: LD_INT 2
19698: PUSH
19699: LD_INT 4
19701: PUSH
19702: LD_INT 11
19704: PUSH
19705: LD_INT 12
19707: PUSH
19708: LD_INT 15
19710: PUSH
19711: LD_INT 16
19713: PUSH
19714: LD_INT 22
19716: PUSH
19717: LD_INT 23
19719: PUSH
19720: LD_INT 26
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 101
19736: PUSH
19737: LD_INT 102
19739: PUSH
19740: LD_INT 106
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: LIST
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: ST_TO_ADDR
19752: GO 22611
19754: LD_INT 2
19756: DOUBLE
19757: EQUAL
19758: IFTRUE 19762
19760: GO 19834
19762: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
19763: LD_ADDR_VAR 0 1
19767: PUSH
19768: LD_INT 2
19770: PUSH
19771: LD_INT 4
19773: PUSH
19774: LD_INT 11
19776: PUSH
19777: LD_INT 12
19779: PUSH
19780: LD_INT 15
19782: PUSH
19783: LD_INT 16
19785: PUSH
19786: LD_INT 22
19788: PUSH
19789: LD_INT 23
19791: PUSH
19792: LD_INT 26
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 101
19808: PUSH
19809: LD_INT 102
19811: PUSH
19812: LD_INT 105
19814: PUSH
19815: LD_INT 106
19817: PUSH
19818: LD_INT 108
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: ST_TO_ADDR
19832: GO 22611
19834: LD_INT 3
19836: DOUBLE
19837: EQUAL
19838: IFTRUE 19842
19840: GO 19918
19842: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
19843: LD_ADDR_VAR 0 1
19847: PUSH
19848: LD_INT 2
19850: PUSH
19851: LD_INT 4
19853: PUSH
19854: LD_INT 5
19856: PUSH
19857: LD_INT 11
19859: PUSH
19860: LD_INT 12
19862: PUSH
19863: LD_INT 15
19865: PUSH
19866: LD_INT 16
19868: PUSH
19869: LD_INT 22
19871: PUSH
19872: LD_INT 26
19874: PUSH
19875: LD_INT 36
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 101
19892: PUSH
19893: LD_INT 102
19895: PUSH
19896: LD_INT 105
19898: PUSH
19899: LD_INT 106
19901: PUSH
19902: LD_INT 108
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: ST_TO_ADDR
19916: GO 22611
19918: LD_INT 4
19920: DOUBLE
19921: EQUAL
19922: IFTRUE 19926
19924: GO 20010
19926: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
19927: LD_ADDR_VAR 0 1
19931: PUSH
19932: LD_INT 2
19934: PUSH
19935: LD_INT 4
19937: PUSH
19938: LD_INT 5
19940: PUSH
19941: LD_INT 8
19943: PUSH
19944: LD_INT 11
19946: PUSH
19947: LD_INT 12
19949: PUSH
19950: LD_INT 15
19952: PUSH
19953: LD_INT 16
19955: PUSH
19956: LD_INT 22
19958: PUSH
19959: LD_INT 23
19961: PUSH
19962: LD_INT 26
19964: PUSH
19965: LD_INT 36
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 101
19984: PUSH
19985: LD_INT 102
19987: PUSH
19988: LD_INT 105
19990: PUSH
19991: LD_INT 106
19993: PUSH
19994: LD_INT 108
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: ST_TO_ADDR
20008: GO 22611
20010: LD_INT 5
20012: DOUBLE
20013: EQUAL
20014: IFTRUE 20018
20016: GO 20118
20018: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20019: LD_ADDR_VAR 0 1
20023: PUSH
20024: LD_INT 2
20026: PUSH
20027: LD_INT 4
20029: PUSH
20030: LD_INT 5
20032: PUSH
20033: LD_INT 6
20035: PUSH
20036: LD_INT 8
20038: PUSH
20039: LD_INT 11
20041: PUSH
20042: LD_INT 12
20044: PUSH
20045: LD_INT 15
20047: PUSH
20048: LD_INT 16
20050: PUSH
20051: LD_INT 22
20053: PUSH
20054: LD_INT 23
20056: PUSH
20057: LD_INT 25
20059: PUSH
20060: LD_INT 26
20062: PUSH
20063: LD_INT 36
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 101
20084: PUSH
20085: LD_INT 102
20087: PUSH
20088: LD_INT 105
20090: PUSH
20091: LD_INT 106
20093: PUSH
20094: LD_INT 108
20096: PUSH
20097: LD_INT 109
20099: PUSH
20100: LD_INT 112
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: ST_TO_ADDR
20116: GO 22611
20118: LD_INT 6
20120: DOUBLE
20121: EQUAL
20122: IFTRUE 20126
20124: GO 20246
20126: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20127: LD_ADDR_VAR 0 1
20131: PUSH
20132: LD_INT 2
20134: PUSH
20135: LD_INT 4
20137: PUSH
20138: LD_INT 5
20140: PUSH
20141: LD_INT 6
20143: PUSH
20144: LD_INT 8
20146: PUSH
20147: LD_INT 11
20149: PUSH
20150: LD_INT 12
20152: PUSH
20153: LD_INT 15
20155: PUSH
20156: LD_INT 16
20158: PUSH
20159: LD_INT 20
20161: PUSH
20162: LD_INT 21
20164: PUSH
20165: LD_INT 22
20167: PUSH
20168: LD_INT 23
20170: PUSH
20171: LD_INT 25
20173: PUSH
20174: LD_INT 26
20176: PUSH
20177: LD_INT 30
20179: PUSH
20180: LD_INT 31
20182: PUSH
20183: LD_INT 32
20185: PUSH
20186: LD_INT 36
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 101
20212: PUSH
20213: LD_INT 102
20215: PUSH
20216: LD_INT 105
20218: PUSH
20219: LD_INT 106
20221: PUSH
20222: LD_INT 108
20224: PUSH
20225: LD_INT 109
20227: PUSH
20228: LD_INT 112
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: ST_TO_ADDR
20244: GO 22611
20246: LD_INT 7
20248: DOUBLE
20249: EQUAL
20250: IFTRUE 20254
20252: GO 20354
20254: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20255: LD_ADDR_VAR 0 1
20259: PUSH
20260: LD_INT 2
20262: PUSH
20263: LD_INT 4
20265: PUSH
20266: LD_INT 5
20268: PUSH
20269: LD_INT 7
20271: PUSH
20272: LD_INT 11
20274: PUSH
20275: LD_INT 12
20277: PUSH
20278: LD_INT 15
20280: PUSH
20281: LD_INT 16
20283: PUSH
20284: LD_INT 20
20286: PUSH
20287: LD_INT 21
20289: PUSH
20290: LD_INT 22
20292: PUSH
20293: LD_INT 23
20295: PUSH
20296: LD_INT 25
20298: PUSH
20299: LD_INT 26
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 101
20320: PUSH
20321: LD_INT 102
20323: PUSH
20324: LD_INT 103
20326: PUSH
20327: LD_INT 105
20329: PUSH
20330: LD_INT 106
20332: PUSH
20333: LD_INT 108
20335: PUSH
20336: LD_INT 112
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: ST_TO_ADDR
20352: GO 22611
20354: LD_INT 8
20356: DOUBLE
20357: EQUAL
20358: IFTRUE 20362
20360: GO 20490
20362: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20363: LD_ADDR_VAR 0 1
20367: PUSH
20368: LD_INT 2
20370: PUSH
20371: LD_INT 4
20373: PUSH
20374: LD_INT 5
20376: PUSH
20377: LD_INT 6
20379: PUSH
20380: LD_INT 7
20382: PUSH
20383: LD_INT 8
20385: PUSH
20386: LD_INT 11
20388: PUSH
20389: LD_INT 12
20391: PUSH
20392: LD_INT 15
20394: PUSH
20395: LD_INT 16
20397: PUSH
20398: LD_INT 20
20400: PUSH
20401: LD_INT 21
20403: PUSH
20404: LD_INT 22
20406: PUSH
20407: LD_INT 23
20409: PUSH
20410: LD_INT 25
20412: PUSH
20413: LD_INT 26
20415: PUSH
20416: LD_INT 30
20418: PUSH
20419: LD_INT 31
20421: PUSH
20422: LD_INT 32
20424: PUSH
20425: LD_INT 36
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 101
20452: PUSH
20453: LD_INT 102
20455: PUSH
20456: LD_INT 103
20458: PUSH
20459: LD_INT 105
20461: PUSH
20462: LD_INT 106
20464: PUSH
20465: LD_INT 108
20467: PUSH
20468: LD_INT 109
20470: PUSH
20471: LD_INT 112
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: ST_TO_ADDR
20488: GO 22611
20490: LD_INT 9
20492: DOUBLE
20493: EQUAL
20494: IFTRUE 20498
20496: GO 20634
20498: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
20499: LD_ADDR_VAR 0 1
20503: PUSH
20504: LD_INT 2
20506: PUSH
20507: LD_INT 4
20509: PUSH
20510: LD_INT 5
20512: PUSH
20513: LD_INT 6
20515: PUSH
20516: LD_INT 7
20518: PUSH
20519: LD_INT 8
20521: PUSH
20522: LD_INT 11
20524: PUSH
20525: LD_INT 12
20527: PUSH
20528: LD_INT 15
20530: PUSH
20531: LD_INT 16
20533: PUSH
20534: LD_INT 20
20536: PUSH
20537: LD_INT 21
20539: PUSH
20540: LD_INT 22
20542: PUSH
20543: LD_INT 23
20545: PUSH
20546: LD_INT 25
20548: PUSH
20549: LD_INT 26
20551: PUSH
20552: LD_INT 28
20554: PUSH
20555: LD_INT 30
20557: PUSH
20558: LD_INT 31
20560: PUSH
20561: LD_INT 32
20563: PUSH
20564: LD_INT 36
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 101
20592: PUSH
20593: LD_INT 102
20595: PUSH
20596: LD_INT 103
20598: PUSH
20599: LD_INT 105
20601: PUSH
20602: LD_INT 106
20604: PUSH
20605: LD_INT 108
20607: PUSH
20608: LD_INT 109
20610: PUSH
20611: LD_INT 112
20613: PUSH
20614: LD_INT 114
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: ST_TO_ADDR
20632: GO 22611
20634: LD_INT 10
20636: DOUBLE
20637: EQUAL
20638: IFTRUE 20642
20640: GO 20826
20642: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
20643: LD_ADDR_VAR 0 1
20647: PUSH
20648: LD_INT 2
20650: PUSH
20651: LD_INT 4
20653: PUSH
20654: LD_INT 5
20656: PUSH
20657: LD_INT 6
20659: PUSH
20660: LD_INT 7
20662: PUSH
20663: LD_INT 8
20665: PUSH
20666: LD_INT 9
20668: PUSH
20669: LD_INT 10
20671: PUSH
20672: LD_INT 11
20674: PUSH
20675: LD_INT 12
20677: PUSH
20678: LD_INT 13
20680: PUSH
20681: LD_INT 14
20683: PUSH
20684: LD_INT 15
20686: PUSH
20687: LD_INT 16
20689: PUSH
20690: LD_INT 17
20692: PUSH
20693: LD_INT 18
20695: PUSH
20696: LD_INT 19
20698: PUSH
20699: LD_INT 20
20701: PUSH
20702: LD_INT 21
20704: PUSH
20705: LD_INT 22
20707: PUSH
20708: LD_INT 23
20710: PUSH
20711: LD_INT 24
20713: PUSH
20714: LD_INT 25
20716: PUSH
20717: LD_INT 26
20719: PUSH
20720: LD_INT 28
20722: PUSH
20723: LD_INT 30
20725: PUSH
20726: LD_INT 31
20728: PUSH
20729: LD_INT 32
20731: PUSH
20732: LD_INT 36
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 101
20768: PUSH
20769: LD_INT 102
20771: PUSH
20772: LD_INT 103
20774: PUSH
20775: LD_INT 104
20777: PUSH
20778: LD_INT 105
20780: PUSH
20781: LD_INT 106
20783: PUSH
20784: LD_INT 107
20786: PUSH
20787: LD_INT 108
20789: PUSH
20790: LD_INT 109
20792: PUSH
20793: LD_INT 110
20795: PUSH
20796: LD_INT 111
20798: PUSH
20799: LD_INT 112
20801: PUSH
20802: LD_INT 114
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: ST_TO_ADDR
20824: GO 22611
20826: LD_INT 11
20828: DOUBLE
20829: EQUAL
20830: IFTRUE 20834
20832: GO 21026
20834: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
20835: LD_ADDR_VAR 0 1
20839: PUSH
20840: LD_INT 2
20842: PUSH
20843: LD_INT 3
20845: PUSH
20846: LD_INT 4
20848: PUSH
20849: LD_INT 5
20851: PUSH
20852: LD_INT 6
20854: PUSH
20855: LD_INT 7
20857: PUSH
20858: LD_INT 8
20860: PUSH
20861: LD_INT 9
20863: PUSH
20864: LD_INT 10
20866: PUSH
20867: LD_INT 11
20869: PUSH
20870: LD_INT 12
20872: PUSH
20873: LD_INT 13
20875: PUSH
20876: LD_INT 14
20878: PUSH
20879: LD_INT 15
20881: PUSH
20882: LD_INT 16
20884: PUSH
20885: LD_INT 17
20887: PUSH
20888: LD_INT 18
20890: PUSH
20891: LD_INT 19
20893: PUSH
20894: LD_INT 20
20896: PUSH
20897: LD_INT 21
20899: PUSH
20900: LD_INT 22
20902: PUSH
20903: LD_INT 23
20905: PUSH
20906: LD_INT 24
20908: PUSH
20909: LD_INT 25
20911: PUSH
20912: LD_INT 26
20914: PUSH
20915: LD_INT 28
20917: PUSH
20918: LD_INT 30
20920: PUSH
20921: LD_INT 31
20923: PUSH
20924: LD_INT 32
20926: PUSH
20927: LD_INT 34
20929: PUSH
20930: LD_INT 36
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 101
20968: PUSH
20969: LD_INT 102
20971: PUSH
20972: LD_INT 103
20974: PUSH
20975: LD_INT 104
20977: PUSH
20978: LD_INT 105
20980: PUSH
20981: LD_INT 106
20983: PUSH
20984: LD_INT 107
20986: PUSH
20987: LD_INT 108
20989: PUSH
20990: LD_INT 109
20992: PUSH
20993: LD_INT 110
20995: PUSH
20996: LD_INT 111
20998: PUSH
20999: LD_INT 112
21001: PUSH
21002: LD_INT 114
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: ST_TO_ADDR
21024: GO 22611
21026: LD_INT 12
21028: DOUBLE
21029: EQUAL
21030: IFTRUE 21034
21032: GO 21242
21034: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21035: LD_ADDR_VAR 0 1
21039: PUSH
21040: LD_INT 1
21042: PUSH
21043: LD_INT 2
21045: PUSH
21046: LD_INT 3
21048: PUSH
21049: LD_INT 4
21051: PUSH
21052: LD_INT 5
21054: PUSH
21055: LD_INT 6
21057: PUSH
21058: LD_INT 7
21060: PUSH
21061: LD_INT 8
21063: PUSH
21064: LD_INT 9
21066: PUSH
21067: LD_INT 10
21069: PUSH
21070: LD_INT 11
21072: PUSH
21073: LD_INT 12
21075: PUSH
21076: LD_INT 13
21078: PUSH
21079: LD_INT 14
21081: PUSH
21082: LD_INT 15
21084: PUSH
21085: LD_INT 16
21087: PUSH
21088: LD_INT 17
21090: PUSH
21091: LD_INT 18
21093: PUSH
21094: LD_INT 19
21096: PUSH
21097: LD_INT 20
21099: PUSH
21100: LD_INT 21
21102: PUSH
21103: LD_INT 22
21105: PUSH
21106: LD_INT 23
21108: PUSH
21109: LD_INT 24
21111: PUSH
21112: LD_INT 25
21114: PUSH
21115: LD_INT 26
21117: PUSH
21118: LD_INT 27
21120: PUSH
21121: LD_INT 28
21123: PUSH
21124: LD_INT 30
21126: PUSH
21127: LD_INT 31
21129: PUSH
21130: LD_INT 32
21132: PUSH
21133: LD_INT 33
21135: PUSH
21136: LD_INT 34
21138: PUSH
21139: LD_INT 36
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: PUSH
21178: LD_INT 101
21180: PUSH
21181: LD_INT 102
21183: PUSH
21184: LD_INT 103
21186: PUSH
21187: LD_INT 104
21189: PUSH
21190: LD_INT 105
21192: PUSH
21193: LD_INT 106
21195: PUSH
21196: LD_INT 107
21198: PUSH
21199: LD_INT 108
21201: PUSH
21202: LD_INT 109
21204: PUSH
21205: LD_INT 110
21207: PUSH
21208: LD_INT 111
21210: PUSH
21211: LD_INT 112
21213: PUSH
21214: LD_INT 113
21216: PUSH
21217: LD_INT 114
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: ST_TO_ADDR
21240: GO 22611
21242: LD_INT 13
21244: DOUBLE
21245: EQUAL
21246: IFTRUE 21250
21248: GO 21446
21250: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21251: LD_ADDR_VAR 0 1
21255: PUSH
21256: LD_INT 1
21258: PUSH
21259: LD_INT 2
21261: PUSH
21262: LD_INT 3
21264: PUSH
21265: LD_INT 4
21267: PUSH
21268: LD_INT 5
21270: PUSH
21271: LD_INT 8
21273: PUSH
21274: LD_INT 9
21276: PUSH
21277: LD_INT 10
21279: PUSH
21280: LD_INT 11
21282: PUSH
21283: LD_INT 12
21285: PUSH
21286: LD_INT 14
21288: PUSH
21289: LD_INT 15
21291: PUSH
21292: LD_INT 16
21294: PUSH
21295: LD_INT 17
21297: PUSH
21298: LD_INT 18
21300: PUSH
21301: LD_INT 19
21303: PUSH
21304: LD_INT 20
21306: PUSH
21307: LD_INT 21
21309: PUSH
21310: LD_INT 22
21312: PUSH
21313: LD_INT 23
21315: PUSH
21316: LD_INT 24
21318: PUSH
21319: LD_INT 25
21321: PUSH
21322: LD_INT 26
21324: PUSH
21325: LD_INT 27
21327: PUSH
21328: LD_INT 28
21330: PUSH
21331: LD_INT 30
21333: PUSH
21334: LD_INT 31
21336: PUSH
21337: LD_INT 32
21339: PUSH
21340: LD_INT 33
21342: PUSH
21343: LD_INT 34
21345: PUSH
21346: LD_INT 36
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 101
21384: PUSH
21385: LD_INT 102
21387: PUSH
21388: LD_INT 103
21390: PUSH
21391: LD_INT 104
21393: PUSH
21394: LD_INT 105
21396: PUSH
21397: LD_INT 106
21399: PUSH
21400: LD_INT 107
21402: PUSH
21403: LD_INT 108
21405: PUSH
21406: LD_INT 109
21408: PUSH
21409: LD_INT 110
21411: PUSH
21412: LD_INT 111
21414: PUSH
21415: LD_INT 112
21417: PUSH
21418: LD_INT 113
21420: PUSH
21421: LD_INT 114
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: ST_TO_ADDR
21444: GO 22611
21446: LD_INT 14
21448: DOUBLE
21449: EQUAL
21450: IFTRUE 21454
21452: GO 21666
21454: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21455: LD_ADDR_VAR 0 1
21459: PUSH
21460: LD_INT 1
21462: PUSH
21463: LD_INT 2
21465: PUSH
21466: LD_INT 3
21468: PUSH
21469: LD_INT 4
21471: PUSH
21472: LD_INT 5
21474: PUSH
21475: LD_INT 6
21477: PUSH
21478: LD_INT 7
21480: PUSH
21481: LD_INT 8
21483: PUSH
21484: LD_INT 9
21486: PUSH
21487: LD_INT 10
21489: PUSH
21490: LD_INT 11
21492: PUSH
21493: LD_INT 12
21495: PUSH
21496: LD_INT 13
21498: PUSH
21499: LD_INT 14
21501: PUSH
21502: LD_INT 15
21504: PUSH
21505: LD_INT 16
21507: PUSH
21508: LD_INT 17
21510: PUSH
21511: LD_INT 18
21513: PUSH
21514: LD_INT 19
21516: PUSH
21517: LD_INT 20
21519: PUSH
21520: LD_INT 21
21522: PUSH
21523: LD_INT 22
21525: PUSH
21526: LD_INT 23
21528: PUSH
21529: LD_INT 24
21531: PUSH
21532: LD_INT 25
21534: PUSH
21535: LD_INT 26
21537: PUSH
21538: LD_INT 27
21540: PUSH
21541: LD_INT 28
21543: PUSH
21544: LD_INT 29
21546: PUSH
21547: LD_INT 30
21549: PUSH
21550: LD_INT 31
21552: PUSH
21553: LD_INT 32
21555: PUSH
21556: LD_INT 33
21558: PUSH
21559: LD_INT 34
21561: PUSH
21562: LD_INT 36
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 101
21604: PUSH
21605: LD_INT 102
21607: PUSH
21608: LD_INT 103
21610: PUSH
21611: LD_INT 104
21613: PUSH
21614: LD_INT 105
21616: PUSH
21617: LD_INT 106
21619: PUSH
21620: LD_INT 107
21622: PUSH
21623: LD_INT 108
21625: PUSH
21626: LD_INT 109
21628: PUSH
21629: LD_INT 110
21631: PUSH
21632: LD_INT 111
21634: PUSH
21635: LD_INT 112
21637: PUSH
21638: LD_INT 113
21640: PUSH
21641: LD_INT 114
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: ST_TO_ADDR
21664: GO 22611
21666: LD_INT 15
21668: DOUBLE
21669: EQUAL
21670: IFTRUE 21674
21672: GO 21886
21674: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
21675: LD_ADDR_VAR 0 1
21679: PUSH
21680: LD_INT 1
21682: PUSH
21683: LD_INT 2
21685: PUSH
21686: LD_INT 3
21688: PUSH
21689: LD_INT 4
21691: PUSH
21692: LD_INT 5
21694: PUSH
21695: LD_INT 6
21697: PUSH
21698: LD_INT 7
21700: PUSH
21701: LD_INT 8
21703: PUSH
21704: LD_INT 9
21706: PUSH
21707: LD_INT 10
21709: PUSH
21710: LD_INT 11
21712: PUSH
21713: LD_INT 12
21715: PUSH
21716: LD_INT 13
21718: PUSH
21719: LD_INT 14
21721: PUSH
21722: LD_INT 15
21724: PUSH
21725: LD_INT 16
21727: PUSH
21728: LD_INT 17
21730: PUSH
21731: LD_INT 18
21733: PUSH
21734: LD_INT 19
21736: PUSH
21737: LD_INT 20
21739: PUSH
21740: LD_INT 21
21742: PUSH
21743: LD_INT 22
21745: PUSH
21746: LD_INT 23
21748: PUSH
21749: LD_INT 24
21751: PUSH
21752: LD_INT 25
21754: PUSH
21755: LD_INT 26
21757: PUSH
21758: LD_INT 27
21760: PUSH
21761: LD_INT 28
21763: PUSH
21764: LD_INT 29
21766: PUSH
21767: LD_INT 30
21769: PUSH
21770: LD_INT 31
21772: PUSH
21773: LD_INT 32
21775: PUSH
21776: LD_INT 33
21778: PUSH
21779: LD_INT 34
21781: PUSH
21782: LD_INT 36
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 101
21824: PUSH
21825: LD_INT 102
21827: PUSH
21828: LD_INT 103
21830: PUSH
21831: LD_INT 104
21833: PUSH
21834: LD_INT 105
21836: PUSH
21837: LD_INT 106
21839: PUSH
21840: LD_INT 107
21842: PUSH
21843: LD_INT 108
21845: PUSH
21846: LD_INT 109
21848: PUSH
21849: LD_INT 110
21851: PUSH
21852: LD_INT 111
21854: PUSH
21855: LD_INT 112
21857: PUSH
21858: LD_INT 113
21860: PUSH
21861: LD_INT 114
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: ST_TO_ADDR
21884: GO 22611
21886: LD_INT 16
21888: DOUBLE
21889: EQUAL
21890: IFTRUE 21894
21892: GO 22018
21894: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
21895: LD_ADDR_VAR 0 1
21899: PUSH
21900: LD_INT 2
21902: PUSH
21903: LD_INT 4
21905: PUSH
21906: LD_INT 5
21908: PUSH
21909: LD_INT 7
21911: PUSH
21912: LD_INT 11
21914: PUSH
21915: LD_INT 12
21917: PUSH
21918: LD_INT 15
21920: PUSH
21921: LD_INT 16
21923: PUSH
21924: LD_INT 20
21926: PUSH
21927: LD_INT 21
21929: PUSH
21930: LD_INT 22
21932: PUSH
21933: LD_INT 23
21935: PUSH
21936: LD_INT 25
21938: PUSH
21939: LD_INT 26
21941: PUSH
21942: LD_INT 30
21944: PUSH
21945: LD_INT 31
21947: PUSH
21948: LD_INT 32
21950: PUSH
21951: LD_INT 33
21953: PUSH
21954: LD_INT 34
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 101
21980: PUSH
21981: LD_INT 102
21983: PUSH
21984: LD_INT 103
21986: PUSH
21987: LD_INT 106
21989: PUSH
21990: LD_INT 108
21992: PUSH
21993: LD_INT 112
21995: PUSH
21996: LD_INT 113
21998: PUSH
21999: LD_INT 114
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: ST_TO_ADDR
22016: GO 22611
22018: LD_INT 17
22020: DOUBLE
22021: EQUAL
22022: IFTRUE 22026
22024: GO 22238
22026: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22027: LD_ADDR_VAR 0 1
22031: PUSH
22032: LD_INT 1
22034: PUSH
22035: LD_INT 2
22037: PUSH
22038: LD_INT 3
22040: PUSH
22041: LD_INT 4
22043: PUSH
22044: LD_INT 5
22046: PUSH
22047: LD_INT 6
22049: PUSH
22050: LD_INT 7
22052: PUSH
22053: LD_INT 8
22055: PUSH
22056: LD_INT 9
22058: PUSH
22059: LD_INT 10
22061: PUSH
22062: LD_INT 11
22064: PUSH
22065: LD_INT 12
22067: PUSH
22068: LD_INT 13
22070: PUSH
22071: LD_INT 14
22073: PUSH
22074: LD_INT 15
22076: PUSH
22077: LD_INT 16
22079: PUSH
22080: LD_INT 17
22082: PUSH
22083: LD_INT 18
22085: PUSH
22086: LD_INT 19
22088: PUSH
22089: LD_INT 20
22091: PUSH
22092: LD_INT 21
22094: PUSH
22095: LD_INT 22
22097: PUSH
22098: LD_INT 23
22100: PUSH
22101: LD_INT 24
22103: PUSH
22104: LD_INT 25
22106: PUSH
22107: LD_INT 26
22109: PUSH
22110: LD_INT 27
22112: PUSH
22113: LD_INT 28
22115: PUSH
22116: LD_INT 29
22118: PUSH
22119: LD_INT 30
22121: PUSH
22122: LD_INT 31
22124: PUSH
22125: LD_INT 32
22127: PUSH
22128: LD_INT 33
22130: PUSH
22131: LD_INT 34
22133: PUSH
22134: LD_INT 36
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 101
22176: PUSH
22177: LD_INT 102
22179: PUSH
22180: LD_INT 103
22182: PUSH
22183: LD_INT 104
22185: PUSH
22186: LD_INT 105
22188: PUSH
22189: LD_INT 106
22191: PUSH
22192: LD_INT 107
22194: PUSH
22195: LD_INT 108
22197: PUSH
22198: LD_INT 109
22200: PUSH
22201: LD_INT 110
22203: PUSH
22204: LD_INT 111
22206: PUSH
22207: LD_INT 112
22209: PUSH
22210: LD_INT 113
22212: PUSH
22213: LD_INT 114
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: ST_TO_ADDR
22236: GO 22611
22238: LD_INT 18
22240: DOUBLE
22241: EQUAL
22242: IFTRUE 22246
22244: GO 22382
22246: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22247: LD_ADDR_VAR 0 1
22251: PUSH
22252: LD_INT 2
22254: PUSH
22255: LD_INT 4
22257: PUSH
22258: LD_INT 5
22260: PUSH
22261: LD_INT 7
22263: PUSH
22264: LD_INT 11
22266: PUSH
22267: LD_INT 12
22269: PUSH
22270: LD_INT 15
22272: PUSH
22273: LD_INT 16
22275: PUSH
22276: LD_INT 20
22278: PUSH
22279: LD_INT 21
22281: PUSH
22282: LD_INT 22
22284: PUSH
22285: LD_INT 23
22287: PUSH
22288: LD_INT 25
22290: PUSH
22291: LD_INT 26
22293: PUSH
22294: LD_INT 30
22296: PUSH
22297: LD_INT 31
22299: PUSH
22300: LD_INT 32
22302: PUSH
22303: LD_INT 33
22305: PUSH
22306: LD_INT 34
22308: PUSH
22309: LD_INT 35
22311: PUSH
22312: LD_INT 36
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 101
22340: PUSH
22341: LD_INT 102
22343: PUSH
22344: LD_INT 103
22346: PUSH
22347: LD_INT 106
22349: PUSH
22350: LD_INT 108
22352: PUSH
22353: LD_INT 112
22355: PUSH
22356: LD_INT 113
22358: PUSH
22359: LD_INT 114
22361: PUSH
22362: LD_INT 115
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: ST_TO_ADDR
22380: GO 22611
22382: LD_INT 19
22384: DOUBLE
22385: EQUAL
22386: IFTRUE 22390
22388: GO 22610
22390: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22391: LD_ADDR_VAR 0 1
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: LD_INT 2
22401: PUSH
22402: LD_INT 3
22404: PUSH
22405: LD_INT 4
22407: PUSH
22408: LD_INT 5
22410: PUSH
22411: LD_INT 6
22413: PUSH
22414: LD_INT 7
22416: PUSH
22417: LD_INT 8
22419: PUSH
22420: LD_INT 9
22422: PUSH
22423: LD_INT 10
22425: PUSH
22426: LD_INT 11
22428: PUSH
22429: LD_INT 12
22431: PUSH
22432: LD_INT 13
22434: PUSH
22435: LD_INT 14
22437: PUSH
22438: LD_INT 15
22440: PUSH
22441: LD_INT 16
22443: PUSH
22444: LD_INT 17
22446: PUSH
22447: LD_INT 18
22449: PUSH
22450: LD_INT 19
22452: PUSH
22453: LD_INT 20
22455: PUSH
22456: LD_INT 21
22458: PUSH
22459: LD_INT 22
22461: PUSH
22462: LD_INT 23
22464: PUSH
22465: LD_INT 24
22467: PUSH
22468: LD_INT 25
22470: PUSH
22471: LD_INT 26
22473: PUSH
22474: LD_INT 27
22476: PUSH
22477: LD_INT 28
22479: PUSH
22480: LD_INT 29
22482: PUSH
22483: LD_INT 30
22485: PUSH
22486: LD_INT 31
22488: PUSH
22489: LD_INT 32
22491: PUSH
22492: LD_INT 33
22494: PUSH
22495: LD_INT 34
22497: PUSH
22498: LD_INT 35
22500: PUSH
22501: LD_INT 36
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 101
22544: PUSH
22545: LD_INT 102
22547: PUSH
22548: LD_INT 103
22550: PUSH
22551: LD_INT 104
22553: PUSH
22554: LD_INT 105
22556: PUSH
22557: LD_INT 106
22559: PUSH
22560: LD_INT 107
22562: PUSH
22563: LD_INT 108
22565: PUSH
22566: LD_INT 109
22568: PUSH
22569: LD_INT 110
22571: PUSH
22572: LD_INT 111
22574: PUSH
22575: LD_INT 112
22577: PUSH
22578: LD_INT 113
22580: PUSH
22581: LD_INT 114
22583: PUSH
22584: LD_INT 115
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: ST_TO_ADDR
22608: GO 22611
22610: POP
// end else
22611: GO 22830
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
22613: LD_ADDR_VAR 0 1
22617: PUSH
22618: LD_INT 1
22620: PUSH
22621: LD_INT 2
22623: PUSH
22624: LD_INT 3
22626: PUSH
22627: LD_INT 4
22629: PUSH
22630: LD_INT 5
22632: PUSH
22633: LD_INT 6
22635: PUSH
22636: LD_INT 7
22638: PUSH
22639: LD_INT 8
22641: PUSH
22642: LD_INT 9
22644: PUSH
22645: LD_INT 10
22647: PUSH
22648: LD_INT 11
22650: PUSH
22651: LD_INT 12
22653: PUSH
22654: LD_INT 13
22656: PUSH
22657: LD_INT 14
22659: PUSH
22660: LD_INT 15
22662: PUSH
22663: LD_INT 16
22665: PUSH
22666: LD_INT 17
22668: PUSH
22669: LD_INT 18
22671: PUSH
22672: LD_INT 19
22674: PUSH
22675: LD_INT 20
22677: PUSH
22678: LD_INT 21
22680: PUSH
22681: LD_INT 22
22683: PUSH
22684: LD_INT 23
22686: PUSH
22687: LD_INT 24
22689: PUSH
22690: LD_INT 25
22692: PUSH
22693: LD_INT 26
22695: PUSH
22696: LD_INT 27
22698: PUSH
22699: LD_INT 28
22701: PUSH
22702: LD_INT 29
22704: PUSH
22705: LD_INT 30
22707: PUSH
22708: LD_INT 31
22710: PUSH
22711: LD_INT 32
22713: PUSH
22714: LD_INT 33
22716: PUSH
22717: LD_INT 34
22719: PUSH
22720: LD_INT 35
22722: PUSH
22723: LD_INT 36
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 101
22766: PUSH
22767: LD_INT 102
22769: PUSH
22770: LD_INT 103
22772: PUSH
22773: LD_INT 104
22775: PUSH
22776: LD_INT 105
22778: PUSH
22779: LD_INT 106
22781: PUSH
22782: LD_INT 107
22784: PUSH
22785: LD_INT 108
22787: PUSH
22788: LD_INT 109
22790: PUSH
22791: LD_INT 110
22793: PUSH
22794: LD_INT 111
22796: PUSH
22797: LD_INT 112
22799: PUSH
22800: LD_INT 113
22802: PUSH
22803: LD_INT 114
22805: PUSH
22806: LD_INT 115
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: ST_TO_ADDR
// if result then
22830: LD_VAR 0 1
22834: IFFALSE 23123
// begin normal :=  ;
22836: LD_ADDR_VAR 0 3
22840: PUSH
22841: LD_STRING 
22843: ST_TO_ADDR
// hardcore :=  ;
22844: LD_ADDR_VAR 0 4
22848: PUSH
22849: LD_STRING 
22851: ST_TO_ADDR
// for i = 1 to normalCounter do
22852: LD_ADDR_VAR 0 5
22856: PUSH
22857: DOUBLE
22858: LD_INT 1
22860: DEC
22861: ST_TO_ADDR
22862: LD_EXP 76
22866: PUSH
22867: FOR_TO
22868: IFFALSE 22969
// begin tmp := 0 ;
22870: LD_ADDR_VAR 0 2
22874: PUSH
22875: LD_STRING 0
22877: ST_TO_ADDR
// if result [ 1 ] then
22878: LD_VAR 0 1
22882: PUSH
22883: LD_INT 1
22885: ARRAY
22886: IFFALSE 22951
// if result [ 1 ] [ 1 ] = i then
22888: LD_VAR 0 1
22892: PUSH
22893: LD_INT 1
22895: ARRAY
22896: PUSH
22897: LD_INT 1
22899: ARRAY
22900: PUSH
22901: LD_VAR 0 5
22905: EQUAL
22906: IFFALSE 22951
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22908: LD_ADDR_VAR 0 1
22912: PUSH
22913: LD_VAR 0 1
22917: PPUSH
22918: LD_INT 1
22920: PPUSH
22921: LD_VAR 0 1
22925: PUSH
22926: LD_INT 1
22928: ARRAY
22929: PPUSH
22930: LD_INT 1
22932: PPUSH
22933: CALL_OW 3
22937: PPUSH
22938: CALL_OW 1
22942: ST_TO_ADDR
// tmp := 1 ;
22943: LD_ADDR_VAR 0 2
22947: PUSH
22948: LD_STRING 1
22950: ST_TO_ADDR
// end ; normal := normal & tmp ;
22951: LD_ADDR_VAR 0 3
22955: PUSH
22956: LD_VAR 0 3
22960: PUSH
22961: LD_VAR 0 2
22965: STR
22966: ST_TO_ADDR
// end ;
22967: GO 22867
22969: POP
22970: POP
// for i = 1 to hardcoreCounter do
22971: LD_ADDR_VAR 0 5
22975: PUSH
22976: DOUBLE
22977: LD_INT 1
22979: DEC
22980: ST_TO_ADDR
22981: LD_EXP 77
22985: PUSH
22986: FOR_TO
22987: IFFALSE 23092
// begin tmp := 0 ;
22989: LD_ADDR_VAR 0 2
22993: PUSH
22994: LD_STRING 0
22996: ST_TO_ADDR
// if result [ 2 ] then
22997: LD_VAR 0 1
23001: PUSH
23002: LD_INT 2
23004: ARRAY
23005: IFFALSE 23074
// if result [ 2 ] [ 1 ] = 100 + i then
23007: LD_VAR 0 1
23011: PUSH
23012: LD_INT 2
23014: ARRAY
23015: PUSH
23016: LD_INT 1
23018: ARRAY
23019: PUSH
23020: LD_INT 100
23022: PUSH
23023: LD_VAR 0 5
23027: PLUS
23028: EQUAL
23029: IFFALSE 23074
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23031: LD_ADDR_VAR 0 1
23035: PUSH
23036: LD_VAR 0 1
23040: PPUSH
23041: LD_INT 2
23043: PPUSH
23044: LD_VAR 0 1
23048: PUSH
23049: LD_INT 2
23051: ARRAY
23052: PPUSH
23053: LD_INT 1
23055: PPUSH
23056: CALL_OW 3
23060: PPUSH
23061: CALL_OW 1
23065: ST_TO_ADDR
// tmp := 1 ;
23066: LD_ADDR_VAR 0 2
23070: PUSH
23071: LD_STRING 1
23073: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23074: LD_ADDR_VAR 0 4
23078: PUSH
23079: LD_VAR 0 4
23083: PUSH
23084: LD_VAR 0 2
23088: STR
23089: ST_TO_ADDR
// end ;
23090: GO 22986
23092: POP
23093: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23094: LD_STRING getStreamItemsFromMission("
23096: PUSH
23097: LD_VAR 0 3
23101: STR
23102: PUSH
23103: LD_STRING ","
23105: STR
23106: PUSH
23107: LD_VAR 0 4
23111: STR
23112: PUSH
23113: LD_STRING ")
23115: STR
23116: PPUSH
23117: CALL_OW 559
// end else
23121: GO 23130
// ToLua ( getStreamItemsFromMission("","") ) ;
23123: LD_STRING getStreamItemsFromMission("","")
23125: PPUSH
23126: CALL_OW 559
// end ;
23130: LD_VAR 0 1
23134: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23135: LD_EXP 75
23139: PUSH
23140: LD_EXP 80
23144: AND
23145: IFFALSE 23269
23147: GO 23149
23149: DISABLE
23150: LD_INT 0
23152: PPUSH
23153: PPUSH
// begin enable ;
23154: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23155: LD_ADDR_VAR 0 2
23159: PUSH
23160: LD_INT 22
23162: PUSH
23163: LD_OWVAR 2
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 2
23174: PUSH
23175: LD_INT 34
23177: PUSH
23178: LD_INT 7
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 34
23187: PUSH
23188: LD_INT 45
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 34
23197: PUSH
23198: LD_INT 28
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 34
23207: PUSH
23208: LD_INT 47
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PPUSH
23226: CALL_OW 69
23230: ST_TO_ADDR
// if not tmp then
23231: LD_VAR 0 2
23235: NOT
23236: IFFALSE 23240
// exit ;
23238: GO 23269
// for i in tmp do
23240: LD_ADDR_VAR 0 1
23244: PUSH
23245: LD_VAR 0 2
23249: PUSH
23250: FOR_IN
23251: IFFALSE 23267
// begin SetLives ( i , 0 ) ;
23253: LD_VAR 0 1
23257: PPUSH
23258: LD_INT 0
23260: PPUSH
23261: CALL_OW 234
// end ;
23265: GO 23250
23267: POP
23268: POP
// end ;
23269: PPOPN 2
23271: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23272: LD_EXP 75
23276: PUSH
23277: LD_EXP 81
23281: AND
23282: IFFALSE 23366
23284: GO 23286
23286: DISABLE
23287: LD_INT 0
23289: PPUSH
23290: PPUSH
// begin enable ;
23291: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23292: LD_ADDR_VAR 0 2
23296: PUSH
23297: LD_INT 22
23299: PUSH
23300: LD_OWVAR 2
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 32
23311: PUSH
23312: LD_INT 3
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PPUSH
23323: CALL_OW 69
23327: ST_TO_ADDR
// if not tmp then
23328: LD_VAR 0 2
23332: NOT
23333: IFFALSE 23337
// exit ;
23335: GO 23366
// for i in tmp do
23337: LD_ADDR_VAR 0 1
23341: PUSH
23342: LD_VAR 0 2
23346: PUSH
23347: FOR_IN
23348: IFFALSE 23364
// begin SetLives ( i , 0 ) ;
23350: LD_VAR 0 1
23354: PPUSH
23355: LD_INT 0
23357: PPUSH
23358: CALL_OW 234
// end ;
23362: GO 23347
23364: POP
23365: POP
// end ;
23366: PPOPN 2
23368: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23369: LD_EXP 75
23373: PUSH
23374: LD_EXP 78
23378: AND
23379: IFFALSE 23472
23381: GO 23383
23383: DISABLE
23384: LD_INT 0
23386: PPUSH
// begin enable ;
23387: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23388: LD_ADDR_VAR 0 1
23392: PUSH
23393: LD_INT 22
23395: PUSH
23396: LD_OWVAR 2
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 2
23407: PUSH
23408: LD_INT 25
23410: PUSH
23411: LD_INT 5
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 25
23420: PUSH
23421: LD_INT 9
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 25
23430: PUSH
23431: LD_INT 8
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PPUSH
23448: CALL_OW 69
23452: PUSH
23453: FOR_IN
23454: IFFALSE 23470
// begin SetClass ( i , 1 ) ;
23456: LD_VAR 0 1
23460: PPUSH
23461: LD_INT 1
23463: PPUSH
23464: CALL_OW 336
// end ;
23468: GO 23453
23470: POP
23471: POP
// end ;
23472: PPOPN 1
23474: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23475: LD_EXP 75
23479: PUSH
23480: LD_EXP 79
23484: AND
23485: PUSH
23486: LD_OWVAR 65
23490: PUSH
23491: LD_INT 7
23493: LESS
23494: AND
23495: IFFALSE 23509
23497: GO 23499
23499: DISABLE
// begin enable ;
23500: ENABLE
// game_speed := 7 ;
23501: LD_ADDR_OWVAR 65
23505: PUSH
23506: LD_INT 7
23508: ST_TO_ADDR
// end ;
23509: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23510: LD_EXP 75
23514: PUSH
23515: LD_EXP 82
23519: AND
23520: IFFALSE 23722
23522: GO 23524
23524: DISABLE
23525: LD_INT 0
23527: PPUSH
23528: PPUSH
23529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23530: LD_ADDR_VAR 0 3
23534: PUSH
23535: LD_INT 81
23537: PUSH
23538: LD_OWVAR 2
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 21
23549: PUSH
23550: LD_INT 1
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PPUSH
23561: CALL_OW 69
23565: ST_TO_ADDR
// if not tmp then
23566: LD_VAR 0 3
23570: NOT
23571: IFFALSE 23575
// exit ;
23573: GO 23722
// if tmp > 5 then
23575: LD_VAR 0 3
23579: PUSH
23580: LD_INT 5
23582: GREATER
23583: IFFALSE 23595
// k := 5 else
23585: LD_ADDR_VAR 0 2
23589: PUSH
23590: LD_INT 5
23592: ST_TO_ADDR
23593: GO 23605
// k := tmp ;
23595: LD_ADDR_VAR 0 2
23599: PUSH
23600: LD_VAR 0 3
23604: ST_TO_ADDR
// for i := 1 to k do
23605: LD_ADDR_VAR 0 1
23609: PUSH
23610: DOUBLE
23611: LD_INT 1
23613: DEC
23614: ST_TO_ADDR
23615: LD_VAR 0 2
23619: PUSH
23620: FOR_TO
23621: IFFALSE 23720
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23623: LD_VAR 0 3
23627: PUSH
23628: LD_VAR 0 1
23632: ARRAY
23633: PPUSH
23634: LD_VAR 0 1
23638: PUSH
23639: LD_INT 4
23641: MOD
23642: PUSH
23643: LD_INT 1
23645: PLUS
23646: PPUSH
23647: CALL_OW 259
23651: PUSH
23652: LD_INT 10
23654: LESS
23655: IFFALSE 23718
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23657: LD_VAR 0 3
23661: PUSH
23662: LD_VAR 0 1
23666: ARRAY
23667: PPUSH
23668: LD_VAR 0 1
23672: PUSH
23673: LD_INT 4
23675: MOD
23676: PUSH
23677: LD_INT 1
23679: PLUS
23680: PPUSH
23681: LD_VAR 0 3
23685: PUSH
23686: LD_VAR 0 1
23690: ARRAY
23691: PPUSH
23692: LD_VAR 0 1
23696: PUSH
23697: LD_INT 4
23699: MOD
23700: PUSH
23701: LD_INT 1
23703: PLUS
23704: PPUSH
23705: CALL_OW 259
23709: PUSH
23710: LD_INT 1
23712: PLUS
23713: PPUSH
23714: CALL_OW 237
23718: GO 23620
23720: POP
23721: POP
// end ;
23722: PPOPN 3
23724: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23725: LD_EXP 75
23729: PUSH
23730: LD_EXP 83
23734: AND
23735: IFFALSE 23755
23737: GO 23739
23739: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23740: LD_INT 4
23742: PPUSH
23743: LD_OWVAR 2
23747: PPUSH
23748: LD_INT 0
23750: PPUSH
23751: CALL_OW 324
23755: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23756: LD_EXP 75
23760: PUSH
23761: LD_EXP 112
23765: AND
23766: IFFALSE 23786
23768: GO 23770
23770: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23771: LD_INT 19
23773: PPUSH
23774: LD_OWVAR 2
23778: PPUSH
23779: LD_INT 0
23781: PPUSH
23782: CALL_OW 324
23786: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23787: LD_EXP 75
23791: PUSH
23792: LD_EXP 84
23796: AND
23797: IFFALSE 23899
23799: GO 23801
23801: DISABLE
23802: LD_INT 0
23804: PPUSH
23805: PPUSH
// begin enable ;
23806: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23807: LD_ADDR_VAR 0 2
23811: PUSH
23812: LD_INT 22
23814: PUSH
23815: LD_OWVAR 2
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 2
23826: PUSH
23827: LD_INT 34
23829: PUSH
23830: LD_INT 11
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 34
23839: PUSH
23840: LD_INT 30
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: LIST
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PPUSH
23856: CALL_OW 69
23860: ST_TO_ADDR
// if not tmp then
23861: LD_VAR 0 2
23865: NOT
23866: IFFALSE 23870
// exit ;
23868: GO 23899
// for i in tmp do
23870: LD_ADDR_VAR 0 1
23874: PUSH
23875: LD_VAR 0 2
23879: PUSH
23880: FOR_IN
23881: IFFALSE 23897
// begin SetLives ( i , 0 ) ;
23883: LD_VAR 0 1
23887: PPUSH
23888: LD_INT 0
23890: PPUSH
23891: CALL_OW 234
// end ;
23895: GO 23880
23897: POP
23898: POP
// end ;
23899: PPOPN 2
23901: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23902: LD_EXP 75
23906: PUSH
23907: LD_EXP 85
23911: AND
23912: IFFALSE 23932
23914: GO 23916
23916: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23917: LD_INT 32
23919: PPUSH
23920: LD_OWVAR 2
23924: PPUSH
23925: LD_INT 0
23927: PPUSH
23928: CALL_OW 324
23932: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23933: LD_EXP 75
23937: PUSH
23938: LD_EXP 86
23942: AND
23943: IFFALSE 24124
23945: GO 23947
23947: DISABLE
23948: LD_INT 0
23950: PPUSH
23951: PPUSH
23952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23953: LD_ADDR_VAR 0 2
23957: PUSH
23958: LD_INT 22
23960: PUSH
23961: LD_OWVAR 2
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 33
23972: PUSH
23973: LD_INT 3
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PPUSH
23984: CALL_OW 69
23988: ST_TO_ADDR
// if not tmp then
23989: LD_VAR 0 2
23993: NOT
23994: IFFALSE 23998
// exit ;
23996: GO 24124
// side := 0 ;
23998: LD_ADDR_VAR 0 3
24002: PUSH
24003: LD_INT 0
24005: ST_TO_ADDR
// for i := 1 to 8 do
24006: LD_ADDR_VAR 0 1
24010: PUSH
24011: DOUBLE
24012: LD_INT 1
24014: DEC
24015: ST_TO_ADDR
24016: LD_INT 8
24018: PUSH
24019: FOR_TO
24020: IFFALSE 24068
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24022: LD_OWVAR 2
24026: PUSH
24027: LD_VAR 0 1
24031: NONEQUAL
24032: PUSH
24033: LD_OWVAR 2
24037: PPUSH
24038: LD_VAR 0 1
24042: PPUSH
24043: CALL_OW 81
24047: PUSH
24048: LD_INT 2
24050: EQUAL
24051: AND
24052: IFFALSE 24066
// begin side := i ;
24054: LD_ADDR_VAR 0 3
24058: PUSH
24059: LD_VAR 0 1
24063: ST_TO_ADDR
// break ;
24064: GO 24068
// end ;
24066: GO 24019
24068: POP
24069: POP
// if not side then
24070: LD_VAR 0 3
24074: NOT
24075: IFFALSE 24079
// exit ;
24077: GO 24124
// for i := 1 to tmp do
24079: LD_ADDR_VAR 0 1
24083: PUSH
24084: DOUBLE
24085: LD_INT 1
24087: DEC
24088: ST_TO_ADDR
24089: LD_VAR 0 2
24093: PUSH
24094: FOR_TO
24095: IFFALSE 24122
// if Prob ( 60 ) then
24097: LD_INT 60
24099: PPUSH
24100: CALL_OW 13
24104: IFFALSE 24120
// SetSide ( i , side ) ;
24106: LD_VAR 0 1
24110: PPUSH
24111: LD_VAR 0 3
24115: PPUSH
24116: CALL_OW 235
24120: GO 24094
24122: POP
24123: POP
// end ;
24124: PPOPN 3
24126: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24127: LD_EXP 75
24131: PUSH
24132: LD_EXP 88
24136: AND
24137: IFFALSE 24256
24139: GO 24141
24141: DISABLE
24142: LD_INT 0
24144: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24145: LD_ADDR_VAR 0 1
24149: PUSH
24150: LD_INT 22
24152: PUSH
24153: LD_OWVAR 2
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 21
24164: PUSH
24165: LD_INT 1
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 3
24174: PUSH
24175: LD_INT 23
24177: PUSH
24178: LD_INT 0
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: LIST
24193: PPUSH
24194: CALL_OW 69
24198: PUSH
24199: FOR_IN
24200: IFFALSE 24254
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24202: LD_VAR 0 1
24206: PPUSH
24207: CALL_OW 257
24211: PUSH
24212: LD_INT 1
24214: PUSH
24215: LD_INT 2
24217: PUSH
24218: LD_INT 3
24220: PUSH
24221: LD_INT 4
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: IN
24230: IFFALSE 24252
// SetClass ( un , rand ( 1 , 4 ) ) ;
24232: LD_VAR 0 1
24236: PPUSH
24237: LD_INT 1
24239: PPUSH
24240: LD_INT 4
24242: PPUSH
24243: CALL_OW 12
24247: PPUSH
24248: CALL_OW 336
24252: GO 24199
24254: POP
24255: POP
// end ;
24256: PPOPN 1
24258: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24259: LD_EXP 75
24263: PUSH
24264: LD_EXP 87
24268: AND
24269: IFFALSE 24348
24271: GO 24273
24273: DISABLE
24274: LD_INT 0
24276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24277: LD_ADDR_VAR 0 1
24281: PUSH
24282: LD_INT 22
24284: PUSH
24285: LD_OWVAR 2
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 21
24296: PUSH
24297: LD_INT 3
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PPUSH
24308: CALL_OW 69
24312: ST_TO_ADDR
// if not tmp then
24313: LD_VAR 0 1
24317: NOT
24318: IFFALSE 24322
// exit ;
24320: GO 24348
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24322: LD_VAR 0 1
24326: PUSH
24327: LD_INT 1
24329: PPUSH
24330: LD_VAR 0 1
24334: PPUSH
24335: CALL_OW 12
24339: ARRAY
24340: PPUSH
24341: LD_INT 100
24343: PPUSH
24344: CALL_OW 234
// end ;
24348: PPOPN 1
24350: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24351: LD_EXP 75
24355: PUSH
24356: LD_EXP 89
24360: AND
24361: IFFALSE 24459
24363: GO 24365
24365: DISABLE
24366: LD_INT 0
24368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24369: LD_ADDR_VAR 0 1
24373: PUSH
24374: LD_INT 22
24376: PUSH
24377: LD_OWVAR 2
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 21
24388: PUSH
24389: LD_INT 1
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PPUSH
24400: CALL_OW 69
24404: ST_TO_ADDR
// if not tmp then
24405: LD_VAR 0 1
24409: NOT
24410: IFFALSE 24414
// exit ;
24412: GO 24459
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24414: LD_VAR 0 1
24418: PUSH
24419: LD_INT 1
24421: PPUSH
24422: LD_VAR 0 1
24426: PPUSH
24427: CALL_OW 12
24431: ARRAY
24432: PPUSH
24433: LD_INT 1
24435: PPUSH
24436: LD_INT 4
24438: PPUSH
24439: CALL_OW 12
24443: PPUSH
24444: LD_INT 3000
24446: PPUSH
24447: LD_INT 9000
24449: PPUSH
24450: CALL_OW 12
24454: PPUSH
24455: CALL_OW 492
// end ;
24459: PPOPN 1
24461: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24462: LD_EXP 75
24466: PUSH
24467: LD_EXP 90
24471: AND
24472: IFFALSE 24492
24474: GO 24476
24476: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24477: LD_INT 1
24479: PPUSH
24480: LD_OWVAR 2
24484: PPUSH
24485: LD_INT 0
24487: PPUSH
24488: CALL_OW 324
24492: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24493: LD_EXP 75
24497: PUSH
24498: LD_EXP 91
24502: AND
24503: IFFALSE 24586
24505: GO 24507
24507: DISABLE
24508: LD_INT 0
24510: PPUSH
24511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24512: LD_ADDR_VAR 0 2
24516: PUSH
24517: LD_INT 22
24519: PUSH
24520: LD_OWVAR 2
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 21
24531: PUSH
24532: LD_INT 3
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PPUSH
24543: CALL_OW 69
24547: ST_TO_ADDR
// if not tmp then
24548: LD_VAR 0 2
24552: NOT
24553: IFFALSE 24557
// exit ;
24555: GO 24586
// for i in tmp do
24557: LD_ADDR_VAR 0 1
24561: PUSH
24562: LD_VAR 0 2
24566: PUSH
24567: FOR_IN
24568: IFFALSE 24584
// SetBLevel ( i , 10 ) ;
24570: LD_VAR 0 1
24574: PPUSH
24575: LD_INT 10
24577: PPUSH
24578: CALL_OW 241
24582: GO 24567
24584: POP
24585: POP
// end ;
24586: PPOPN 2
24588: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24589: LD_EXP 75
24593: PUSH
24594: LD_EXP 92
24598: AND
24599: IFFALSE 24710
24601: GO 24603
24603: DISABLE
24604: LD_INT 0
24606: PPUSH
24607: PPUSH
24608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24609: LD_ADDR_VAR 0 3
24613: PUSH
24614: LD_INT 22
24616: PUSH
24617: LD_OWVAR 2
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 25
24628: PUSH
24629: LD_INT 1
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PPUSH
24640: CALL_OW 69
24644: ST_TO_ADDR
// if not tmp then
24645: LD_VAR 0 3
24649: NOT
24650: IFFALSE 24654
// exit ;
24652: GO 24710
// un := tmp [ rand ( 1 , tmp ) ] ;
24654: LD_ADDR_VAR 0 2
24658: PUSH
24659: LD_VAR 0 3
24663: PUSH
24664: LD_INT 1
24666: PPUSH
24667: LD_VAR 0 3
24671: PPUSH
24672: CALL_OW 12
24676: ARRAY
24677: ST_TO_ADDR
// if Crawls ( un ) then
24678: LD_VAR 0 2
24682: PPUSH
24683: CALL_OW 318
24687: IFFALSE 24698
// ComWalk ( un ) ;
24689: LD_VAR 0 2
24693: PPUSH
24694: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24698: LD_VAR 0 2
24702: PPUSH
24703: LD_INT 5
24705: PPUSH
24706: CALL_OW 336
// end ;
24710: PPOPN 3
24712: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
24713: LD_EXP 75
24717: PUSH
24718: LD_EXP 93
24722: AND
24723: PUSH
24724: LD_OWVAR 67
24728: PUSH
24729: LD_INT 3
24731: LESS
24732: AND
24733: IFFALSE 24752
24735: GO 24737
24737: DISABLE
// Difficulty := Difficulty + 1 ;
24738: LD_ADDR_OWVAR 67
24742: PUSH
24743: LD_OWVAR 67
24747: PUSH
24748: LD_INT 1
24750: PLUS
24751: ST_TO_ADDR
24752: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24753: LD_EXP 75
24757: PUSH
24758: LD_EXP 94
24762: AND
24763: IFFALSE 24866
24765: GO 24767
24767: DISABLE
24768: LD_INT 0
24770: PPUSH
// begin for i := 1 to 5 do
24771: LD_ADDR_VAR 0 1
24775: PUSH
24776: DOUBLE
24777: LD_INT 1
24779: DEC
24780: ST_TO_ADDR
24781: LD_INT 5
24783: PUSH
24784: FOR_TO
24785: IFFALSE 24864
// begin uc_nation := nation_nature ;
24787: LD_ADDR_OWVAR 21
24791: PUSH
24792: LD_INT 0
24794: ST_TO_ADDR
// uc_side := 0 ;
24795: LD_ADDR_OWVAR 20
24799: PUSH
24800: LD_INT 0
24802: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24803: LD_ADDR_OWVAR 29
24807: PUSH
24808: LD_INT 12
24810: PUSH
24811: LD_INT 12
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: ST_TO_ADDR
// hc_agressivity := 20 ;
24818: LD_ADDR_OWVAR 35
24822: PUSH
24823: LD_INT 20
24825: ST_TO_ADDR
// hc_class := class_tiger ;
24826: LD_ADDR_OWVAR 28
24830: PUSH
24831: LD_INT 14
24833: ST_TO_ADDR
// hc_gallery :=  ;
24834: LD_ADDR_OWVAR 33
24838: PUSH
24839: LD_STRING 
24841: ST_TO_ADDR
// hc_name :=  ;
24842: LD_ADDR_OWVAR 26
24846: PUSH
24847: LD_STRING 
24849: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24850: CALL_OW 44
24854: PPUSH
24855: LD_INT 0
24857: PPUSH
24858: CALL_OW 51
// end ;
24862: GO 24784
24864: POP
24865: POP
// end ;
24866: PPOPN 1
24868: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24869: LD_EXP 75
24873: PUSH
24874: LD_EXP 95
24878: AND
24879: IFFALSE 24888
24881: GO 24883
24883: DISABLE
// StreamSibBomb ;
24884: CALL 24889 0 0
24888: END
// export function StreamSibBomb ; var i , x , y ; begin
24889: LD_INT 0
24891: PPUSH
24892: PPUSH
24893: PPUSH
24894: PPUSH
// result := false ;
24895: LD_ADDR_VAR 0 1
24899: PUSH
24900: LD_INT 0
24902: ST_TO_ADDR
// for i := 1 to 16 do
24903: LD_ADDR_VAR 0 2
24907: PUSH
24908: DOUBLE
24909: LD_INT 1
24911: DEC
24912: ST_TO_ADDR
24913: LD_INT 16
24915: PUSH
24916: FOR_TO
24917: IFFALSE 25116
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24919: LD_ADDR_VAR 0 3
24923: PUSH
24924: LD_INT 10
24926: PUSH
24927: LD_INT 20
24929: PUSH
24930: LD_INT 30
24932: PUSH
24933: LD_INT 40
24935: PUSH
24936: LD_INT 50
24938: PUSH
24939: LD_INT 60
24941: PUSH
24942: LD_INT 70
24944: PUSH
24945: LD_INT 80
24947: PUSH
24948: LD_INT 90
24950: PUSH
24951: LD_INT 100
24953: PUSH
24954: LD_INT 110
24956: PUSH
24957: LD_INT 120
24959: PUSH
24960: LD_INT 130
24962: PUSH
24963: LD_INT 140
24965: PUSH
24966: LD_INT 150
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 1
24988: PPUSH
24989: LD_INT 15
24991: PPUSH
24992: CALL_OW 12
24996: ARRAY
24997: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24998: LD_ADDR_VAR 0 4
25002: PUSH
25003: LD_INT 10
25005: PUSH
25006: LD_INT 20
25008: PUSH
25009: LD_INT 30
25011: PUSH
25012: LD_INT 40
25014: PUSH
25015: LD_INT 50
25017: PUSH
25018: LD_INT 60
25020: PUSH
25021: LD_INT 70
25023: PUSH
25024: LD_INT 80
25026: PUSH
25027: LD_INT 90
25029: PUSH
25030: LD_INT 100
25032: PUSH
25033: LD_INT 110
25035: PUSH
25036: LD_INT 120
25038: PUSH
25039: LD_INT 130
25041: PUSH
25042: LD_INT 140
25044: PUSH
25045: LD_INT 150
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 1
25067: PPUSH
25068: LD_INT 15
25070: PPUSH
25071: CALL_OW 12
25075: ARRAY
25076: ST_TO_ADDR
// if ValidHex ( x , y ) then
25077: LD_VAR 0 3
25081: PPUSH
25082: LD_VAR 0 4
25086: PPUSH
25087: CALL_OW 488
25091: IFFALSE 25114
// begin result := [ x , y ] ;
25093: LD_ADDR_VAR 0 1
25097: PUSH
25098: LD_VAR 0 3
25102: PUSH
25103: LD_VAR 0 4
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: ST_TO_ADDR
// break ;
25112: GO 25116
// end ; end ;
25114: GO 24916
25116: POP
25117: POP
// if result then
25118: LD_VAR 0 1
25122: IFFALSE 25182
// begin ToLua ( playSibBomb() ) ;
25124: LD_STRING playSibBomb()
25126: PPUSH
25127: CALL_OW 559
// wait ( 0 0$14 ) ;
25131: LD_INT 490
25133: PPUSH
25134: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25138: LD_VAR 0 1
25142: PUSH
25143: LD_INT 1
25145: ARRAY
25146: PPUSH
25147: LD_VAR 0 1
25151: PUSH
25152: LD_INT 2
25154: ARRAY
25155: PPUSH
25156: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25160: LD_VAR 0 1
25164: PUSH
25165: LD_INT 1
25167: ARRAY
25168: PPUSH
25169: LD_VAR 0 1
25173: PUSH
25174: LD_INT 2
25176: ARRAY
25177: PPUSH
25178: CALL_OW 429
// end ; end ;
25182: LD_VAR 0 1
25186: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25187: LD_EXP 75
25191: PUSH
25192: LD_EXP 97
25196: AND
25197: IFFALSE 25209
25199: GO 25201
25201: DISABLE
// YouLost (  ) ;
25202: LD_STRING 
25204: PPUSH
25205: CALL_OW 104
25209: END
// every 0 0$1 trigger StreamModeActive and sFog do
25210: LD_EXP 75
25214: PUSH
25215: LD_EXP 96
25219: AND
25220: IFFALSE 25234
25222: GO 25224
25224: DISABLE
// FogOff ( your_side ) ;
25225: LD_OWVAR 2
25229: PPUSH
25230: CALL_OW 344
25234: END
// every 0 0$1 trigger StreamModeActive and sSun do
25235: LD_EXP 75
25239: PUSH
25240: LD_EXP 98
25244: AND
25245: IFFALSE 25273
25247: GO 25249
25249: DISABLE
// begin solar_recharge_percent := 0 ;
25250: LD_ADDR_OWVAR 79
25254: PUSH
25255: LD_INT 0
25257: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25258: LD_INT 10500
25260: PPUSH
25261: CALL_OW 67
// solar_recharge_percent := 100 ;
25265: LD_ADDR_OWVAR 79
25269: PUSH
25270: LD_INT 100
25272: ST_TO_ADDR
// end ;
25273: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25274: LD_EXP 75
25278: PUSH
25279: LD_EXP 99
25283: AND
25284: IFFALSE 25523
25286: GO 25288
25288: DISABLE
25289: LD_INT 0
25291: PPUSH
25292: PPUSH
25293: PPUSH
// begin tmp := [ ] ;
25294: LD_ADDR_VAR 0 3
25298: PUSH
25299: EMPTY
25300: ST_TO_ADDR
// for i := 1 to 6 do
25301: LD_ADDR_VAR 0 1
25305: PUSH
25306: DOUBLE
25307: LD_INT 1
25309: DEC
25310: ST_TO_ADDR
25311: LD_INT 6
25313: PUSH
25314: FOR_TO
25315: IFFALSE 25420
// begin uc_nation := nation_nature ;
25317: LD_ADDR_OWVAR 21
25321: PUSH
25322: LD_INT 0
25324: ST_TO_ADDR
// uc_side := 0 ;
25325: LD_ADDR_OWVAR 20
25329: PUSH
25330: LD_INT 0
25332: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25333: LD_ADDR_OWVAR 29
25337: PUSH
25338: LD_INT 12
25340: PUSH
25341: LD_INT 12
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: ST_TO_ADDR
// hc_agressivity := 20 ;
25348: LD_ADDR_OWVAR 35
25352: PUSH
25353: LD_INT 20
25355: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25356: LD_ADDR_OWVAR 28
25360: PUSH
25361: LD_INT 17
25363: ST_TO_ADDR
// hc_gallery :=  ;
25364: LD_ADDR_OWVAR 33
25368: PUSH
25369: LD_STRING 
25371: ST_TO_ADDR
// hc_name :=  ;
25372: LD_ADDR_OWVAR 26
25376: PUSH
25377: LD_STRING 
25379: ST_TO_ADDR
// un := CreateHuman ;
25380: LD_ADDR_VAR 0 2
25384: PUSH
25385: CALL_OW 44
25389: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25390: LD_VAR 0 2
25394: PPUSH
25395: LD_INT 1
25397: PPUSH
25398: CALL_OW 51
// tmp := tmp ^ un ;
25402: LD_ADDR_VAR 0 3
25406: PUSH
25407: LD_VAR 0 3
25411: PUSH
25412: LD_VAR 0 2
25416: ADD
25417: ST_TO_ADDR
// end ;
25418: GO 25314
25420: POP
25421: POP
// repeat wait ( 0 0$1 ) ;
25422: LD_INT 35
25424: PPUSH
25425: CALL_OW 67
// for un in tmp do
25429: LD_ADDR_VAR 0 2
25433: PUSH
25434: LD_VAR 0 3
25438: PUSH
25439: FOR_IN
25440: IFFALSE 25514
// begin if IsDead ( un ) then
25442: LD_VAR 0 2
25446: PPUSH
25447: CALL_OW 301
25451: IFFALSE 25471
// begin tmp := tmp diff un ;
25453: LD_ADDR_VAR 0 3
25457: PUSH
25458: LD_VAR 0 3
25462: PUSH
25463: LD_VAR 0 2
25467: DIFF
25468: ST_TO_ADDR
// continue ;
25469: GO 25439
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25471: LD_VAR 0 2
25475: PPUSH
25476: LD_INT 3
25478: PUSH
25479: LD_INT 22
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PPUSH
25493: CALL_OW 69
25497: PPUSH
25498: LD_VAR 0 2
25502: PPUSH
25503: CALL_OW 74
25507: PPUSH
25508: CALL_OW 115
// end ;
25512: GO 25439
25514: POP
25515: POP
// until not tmp ;
25516: LD_VAR 0 3
25520: NOT
25521: IFFALSE 25422
// end ;
25523: PPOPN 3
25525: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25526: LD_EXP 75
25530: PUSH
25531: LD_EXP 100
25535: AND
25536: IFFALSE 25590
25538: GO 25540
25540: DISABLE
// begin ToLua ( displayTroll(); ) ;
25541: LD_STRING displayTroll();
25543: PPUSH
25544: CALL_OW 559
// wait ( 3 3$00 ) ;
25548: LD_INT 6300
25550: PPUSH
25551: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25555: LD_STRING hideTroll();
25557: PPUSH
25558: CALL_OW 559
// wait ( 1 1$00 ) ;
25562: LD_INT 2100
25564: PPUSH
25565: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25569: LD_STRING displayTroll();
25571: PPUSH
25572: CALL_OW 559
// wait ( 1 1$00 ) ;
25576: LD_INT 2100
25578: PPUSH
25579: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25583: LD_STRING hideTroll();
25585: PPUSH
25586: CALL_OW 559
// end ;
25590: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25591: LD_EXP 75
25595: PUSH
25596: LD_EXP 101
25600: AND
25601: IFFALSE 25664
25603: GO 25605
25605: DISABLE
25606: LD_INT 0
25608: PPUSH
// begin p := 0 ;
25609: LD_ADDR_VAR 0 1
25613: PUSH
25614: LD_INT 0
25616: ST_TO_ADDR
// repeat game_speed := 1 ;
25617: LD_ADDR_OWVAR 65
25621: PUSH
25622: LD_INT 1
25624: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25625: LD_INT 35
25627: PPUSH
25628: CALL_OW 67
// p := p + 1 ;
25632: LD_ADDR_VAR 0 1
25636: PUSH
25637: LD_VAR 0 1
25641: PUSH
25642: LD_INT 1
25644: PLUS
25645: ST_TO_ADDR
// until p >= 60 ;
25646: LD_VAR 0 1
25650: PUSH
25651: LD_INT 60
25653: GREATEREQUAL
25654: IFFALSE 25617
// game_speed := 4 ;
25656: LD_ADDR_OWVAR 65
25660: PUSH
25661: LD_INT 4
25663: ST_TO_ADDR
// end ;
25664: PPOPN 1
25666: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25667: LD_EXP 75
25671: PUSH
25672: LD_EXP 102
25676: AND
25677: IFFALSE 25823
25679: GO 25681
25681: DISABLE
25682: LD_INT 0
25684: PPUSH
25685: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25686: LD_ADDR_VAR 0 1
25690: PUSH
25691: LD_INT 22
25693: PUSH
25694: LD_OWVAR 2
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 2
25705: PUSH
25706: LD_INT 30
25708: PUSH
25709: LD_INT 0
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 30
25718: PUSH
25719: LD_INT 1
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: LIST
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PPUSH
25735: CALL_OW 69
25739: ST_TO_ADDR
// if not depot then
25740: LD_VAR 0 1
25744: NOT
25745: IFFALSE 25749
// exit ;
25747: GO 25823
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25749: LD_ADDR_VAR 0 2
25753: PUSH
25754: LD_VAR 0 1
25758: PUSH
25759: LD_INT 1
25761: PPUSH
25762: LD_VAR 0 1
25766: PPUSH
25767: CALL_OW 12
25771: ARRAY
25772: PPUSH
25773: CALL_OW 274
25777: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25778: LD_VAR 0 2
25782: PPUSH
25783: LD_INT 1
25785: PPUSH
25786: LD_INT 0
25788: PPUSH
25789: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25793: LD_VAR 0 2
25797: PPUSH
25798: LD_INT 2
25800: PPUSH
25801: LD_INT 0
25803: PPUSH
25804: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25808: LD_VAR 0 2
25812: PPUSH
25813: LD_INT 3
25815: PPUSH
25816: LD_INT 0
25818: PPUSH
25819: CALL_OW 277
// end ;
25823: PPOPN 2
25825: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25826: LD_EXP 75
25830: PUSH
25831: LD_EXP 103
25835: AND
25836: IFFALSE 25933
25838: GO 25840
25840: DISABLE
25841: LD_INT 0
25843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25844: LD_ADDR_VAR 0 1
25848: PUSH
25849: LD_INT 22
25851: PUSH
25852: LD_OWVAR 2
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 21
25863: PUSH
25864: LD_INT 1
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 3
25873: PUSH
25874: LD_INT 23
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: LIST
25892: PPUSH
25893: CALL_OW 69
25897: ST_TO_ADDR
// if not tmp then
25898: LD_VAR 0 1
25902: NOT
25903: IFFALSE 25907
// exit ;
25905: GO 25933
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25907: LD_VAR 0 1
25911: PUSH
25912: LD_INT 1
25914: PPUSH
25915: LD_VAR 0 1
25919: PPUSH
25920: CALL_OW 12
25924: ARRAY
25925: PPUSH
25926: LD_INT 200
25928: PPUSH
25929: CALL_OW 234
// end ;
25933: PPOPN 1
25935: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25936: LD_EXP 75
25940: PUSH
25941: LD_EXP 104
25945: AND
25946: IFFALSE 26025
25948: GO 25950
25950: DISABLE
25951: LD_INT 0
25953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25954: LD_ADDR_VAR 0 1
25958: PUSH
25959: LD_INT 22
25961: PUSH
25962: LD_OWVAR 2
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 21
25973: PUSH
25974: LD_INT 2
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PPUSH
25985: CALL_OW 69
25989: ST_TO_ADDR
// if not tmp then
25990: LD_VAR 0 1
25994: NOT
25995: IFFALSE 25999
// exit ;
25997: GO 26025
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25999: LD_VAR 0 1
26003: PUSH
26004: LD_INT 1
26006: PPUSH
26007: LD_VAR 0 1
26011: PPUSH
26012: CALL_OW 12
26016: ARRAY
26017: PPUSH
26018: LD_INT 60
26020: PPUSH
26021: CALL_OW 234
// end ;
26025: PPOPN 1
26027: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26028: LD_EXP 75
26032: PUSH
26033: LD_EXP 105
26037: AND
26038: IFFALSE 26137
26040: GO 26042
26042: DISABLE
26043: LD_INT 0
26045: PPUSH
26046: PPUSH
// begin enable ;
26047: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26048: LD_ADDR_VAR 0 1
26052: PUSH
26053: LD_INT 22
26055: PUSH
26056: LD_OWVAR 2
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 61
26067: PUSH
26068: EMPTY
26069: LIST
26070: PUSH
26071: LD_INT 33
26073: PUSH
26074: LD_INT 2
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: LIST
26085: PPUSH
26086: CALL_OW 69
26090: ST_TO_ADDR
// if not tmp then
26091: LD_VAR 0 1
26095: NOT
26096: IFFALSE 26100
// exit ;
26098: GO 26137
// for i in tmp do
26100: LD_ADDR_VAR 0 2
26104: PUSH
26105: LD_VAR 0 1
26109: PUSH
26110: FOR_IN
26111: IFFALSE 26135
// if IsControledBy ( i ) then
26113: LD_VAR 0 2
26117: PPUSH
26118: CALL_OW 312
26122: IFFALSE 26133
// ComUnlink ( i ) ;
26124: LD_VAR 0 2
26128: PPUSH
26129: CALL_OW 136
26133: GO 26110
26135: POP
26136: POP
// end ;
26137: PPOPN 2
26139: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26140: LD_EXP 75
26144: PUSH
26145: LD_EXP 106
26149: AND
26150: IFFALSE 26290
26152: GO 26154
26154: DISABLE
26155: LD_INT 0
26157: PPUSH
26158: PPUSH
// begin ToLua ( displayPowell(); ) ;
26159: LD_STRING displayPowell();
26161: PPUSH
26162: CALL_OW 559
// uc_side := 0 ;
26166: LD_ADDR_OWVAR 20
26170: PUSH
26171: LD_INT 0
26173: ST_TO_ADDR
// uc_nation := 2 ;
26174: LD_ADDR_OWVAR 21
26178: PUSH
26179: LD_INT 2
26181: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26182: LD_ADDR_OWVAR 37
26186: PUSH
26187: LD_INT 14
26189: ST_TO_ADDR
// vc_engine := engine_siberite ;
26190: LD_ADDR_OWVAR 39
26194: PUSH
26195: LD_INT 3
26197: ST_TO_ADDR
// vc_control := control_apeman ;
26198: LD_ADDR_OWVAR 38
26202: PUSH
26203: LD_INT 5
26205: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26206: LD_ADDR_OWVAR 40
26210: PUSH
26211: LD_INT 29
26213: ST_TO_ADDR
// un := CreateVehicle ;
26214: LD_ADDR_VAR 0 2
26218: PUSH
26219: CALL_OW 45
26223: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26224: LD_VAR 0 2
26228: PPUSH
26229: LD_INT 1
26231: PPUSH
26232: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26236: LD_INT 35
26238: PPUSH
26239: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26243: LD_VAR 0 2
26247: PPUSH
26248: LD_INT 22
26250: PUSH
26251: LD_OWVAR 2
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PPUSH
26260: CALL_OW 69
26264: PPUSH
26265: LD_VAR 0 2
26269: PPUSH
26270: CALL_OW 74
26274: PPUSH
26275: CALL_OW 115
// until IsDead ( un ) ;
26279: LD_VAR 0 2
26283: PPUSH
26284: CALL_OW 301
26288: IFFALSE 26236
// end ;
26290: PPOPN 2
26292: END
// every 0 0$1 trigger StreamModeActive and sStu do
26293: LD_EXP 75
26297: PUSH
26298: LD_EXP 114
26302: AND
26303: IFFALSE 26319
26305: GO 26307
26307: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26308: LD_STRING displayStucuk();
26310: PPUSH
26311: CALL_OW 559
// ResetFog ;
26315: CALL_OW 335
// end ;
26319: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26320: LD_EXP 75
26324: PUSH
26325: LD_EXP 107
26329: AND
26330: IFFALSE 26471
26332: GO 26334
26334: DISABLE
26335: LD_INT 0
26337: PPUSH
26338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26339: LD_ADDR_VAR 0 2
26343: PUSH
26344: LD_INT 22
26346: PUSH
26347: LD_OWVAR 2
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 21
26358: PUSH
26359: LD_INT 1
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PPUSH
26370: CALL_OW 69
26374: ST_TO_ADDR
// if not tmp then
26375: LD_VAR 0 2
26379: NOT
26380: IFFALSE 26384
// exit ;
26382: GO 26471
// un := tmp [ rand ( 1 , tmp ) ] ;
26384: LD_ADDR_VAR 0 1
26388: PUSH
26389: LD_VAR 0 2
26393: PUSH
26394: LD_INT 1
26396: PPUSH
26397: LD_VAR 0 2
26401: PPUSH
26402: CALL_OW 12
26406: ARRAY
26407: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26408: LD_VAR 0 1
26412: PPUSH
26413: LD_INT 0
26415: PPUSH
26416: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26420: LD_VAR 0 1
26424: PPUSH
26425: LD_OWVAR 3
26429: PUSH
26430: LD_VAR 0 1
26434: DIFF
26435: PPUSH
26436: LD_VAR 0 1
26440: PPUSH
26441: CALL_OW 74
26445: PPUSH
26446: CALL_OW 115
// wait ( 0 0$20 ) ;
26450: LD_INT 700
26452: PPUSH
26453: CALL_OW 67
// SetSide ( un , your_side ) ;
26457: LD_VAR 0 1
26461: PPUSH
26462: LD_OWVAR 2
26466: PPUSH
26467: CALL_OW 235
// end ;
26471: PPOPN 2
26473: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26474: LD_EXP 75
26478: PUSH
26479: LD_EXP 108
26483: AND
26484: IFFALSE 26590
26486: GO 26488
26488: DISABLE
26489: LD_INT 0
26491: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26492: LD_ADDR_VAR 0 1
26496: PUSH
26497: LD_INT 22
26499: PUSH
26500: LD_OWVAR 2
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 2
26511: PUSH
26512: LD_INT 30
26514: PUSH
26515: LD_INT 0
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 30
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: LIST
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PPUSH
26541: CALL_OW 69
26545: ST_TO_ADDR
// if not depot then
26546: LD_VAR 0 1
26550: NOT
26551: IFFALSE 26555
// exit ;
26553: GO 26590
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26555: LD_VAR 0 1
26559: PUSH
26560: LD_INT 1
26562: ARRAY
26563: PPUSH
26564: CALL_OW 250
26568: PPUSH
26569: LD_VAR 0 1
26573: PUSH
26574: LD_INT 1
26576: ARRAY
26577: PPUSH
26578: CALL_OW 251
26582: PPUSH
26583: LD_INT 70
26585: PPUSH
26586: CALL_OW 495
// end ;
26590: PPOPN 1
26592: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26593: LD_EXP 75
26597: PUSH
26598: LD_EXP 109
26602: AND
26603: IFFALSE 26814
26605: GO 26607
26607: DISABLE
26608: LD_INT 0
26610: PPUSH
26611: PPUSH
26612: PPUSH
26613: PPUSH
26614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26615: LD_ADDR_VAR 0 5
26619: PUSH
26620: LD_INT 22
26622: PUSH
26623: LD_OWVAR 2
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 21
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PPUSH
26646: CALL_OW 69
26650: ST_TO_ADDR
// if not tmp then
26651: LD_VAR 0 5
26655: NOT
26656: IFFALSE 26660
// exit ;
26658: GO 26814
// for i in tmp do
26660: LD_ADDR_VAR 0 1
26664: PUSH
26665: LD_VAR 0 5
26669: PUSH
26670: FOR_IN
26671: IFFALSE 26812
// begin d := rand ( 0 , 5 ) ;
26673: LD_ADDR_VAR 0 4
26677: PUSH
26678: LD_INT 0
26680: PPUSH
26681: LD_INT 5
26683: PPUSH
26684: CALL_OW 12
26688: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26689: LD_ADDR_VAR 0 2
26693: PUSH
26694: LD_VAR 0 1
26698: PPUSH
26699: CALL_OW 250
26703: PPUSH
26704: LD_VAR 0 4
26708: PPUSH
26709: LD_INT 3
26711: PPUSH
26712: LD_INT 12
26714: PPUSH
26715: CALL_OW 12
26719: PPUSH
26720: CALL_OW 272
26724: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26725: LD_ADDR_VAR 0 3
26729: PUSH
26730: LD_VAR 0 1
26734: PPUSH
26735: CALL_OW 251
26739: PPUSH
26740: LD_VAR 0 4
26744: PPUSH
26745: LD_INT 3
26747: PPUSH
26748: LD_INT 12
26750: PPUSH
26751: CALL_OW 12
26755: PPUSH
26756: CALL_OW 273
26760: ST_TO_ADDR
// if ValidHex ( x , y ) then
26761: LD_VAR 0 2
26765: PPUSH
26766: LD_VAR 0 3
26770: PPUSH
26771: CALL_OW 488
26775: IFFALSE 26810
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26777: LD_VAR 0 1
26781: PPUSH
26782: LD_VAR 0 2
26786: PPUSH
26787: LD_VAR 0 3
26791: PPUSH
26792: LD_INT 3
26794: PPUSH
26795: LD_INT 6
26797: PPUSH
26798: CALL_OW 12
26802: PPUSH
26803: LD_INT 1
26805: PPUSH
26806: CALL_OW 483
// end ;
26810: GO 26670
26812: POP
26813: POP
// end ;
26814: PPOPN 5
26816: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26817: LD_EXP 75
26821: PUSH
26822: LD_EXP 110
26826: AND
26827: IFFALSE 26921
26829: GO 26831
26831: DISABLE
26832: LD_INT 0
26834: PPUSH
26835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26836: LD_ADDR_VAR 0 2
26840: PUSH
26841: LD_INT 22
26843: PUSH
26844: LD_OWVAR 2
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 32
26855: PUSH
26856: LD_INT 1
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 21
26865: PUSH
26866: LD_INT 2
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: LIST
26877: PPUSH
26878: CALL_OW 69
26882: ST_TO_ADDR
// if not tmp then
26883: LD_VAR 0 2
26887: NOT
26888: IFFALSE 26892
// exit ;
26890: GO 26921
// for i in tmp do
26892: LD_ADDR_VAR 0 1
26896: PUSH
26897: LD_VAR 0 2
26901: PUSH
26902: FOR_IN
26903: IFFALSE 26919
// SetFuel ( i , 0 ) ;
26905: LD_VAR 0 1
26909: PPUSH
26910: LD_INT 0
26912: PPUSH
26913: CALL_OW 240
26917: GO 26902
26919: POP
26920: POP
// end ;
26921: PPOPN 2
26923: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26924: LD_EXP 75
26928: PUSH
26929: LD_EXP 111
26933: AND
26934: IFFALSE 27000
26936: GO 26938
26938: DISABLE
26939: LD_INT 0
26941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26942: LD_ADDR_VAR 0 1
26946: PUSH
26947: LD_INT 22
26949: PUSH
26950: LD_OWVAR 2
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 30
26961: PUSH
26962: LD_INT 29
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PPUSH
26973: CALL_OW 69
26977: ST_TO_ADDR
// if not tmp then
26978: LD_VAR 0 1
26982: NOT
26983: IFFALSE 26987
// exit ;
26985: GO 27000
// DestroyUnit ( tmp [ 1 ] ) ;
26987: LD_VAR 0 1
26991: PUSH
26992: LD_INT 1
26994: ARRAY
26995: PPUSH
26996: CALL_OW 65
// end ;
27000: PPOPN 1
27002: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27003: LD_EXP 75
27007: PUSH
27008: LD_EXP 113
27012: AND
27013: IFFALSE 27142
27015: GO 27017
27017: DISABLE
27018: LD_INT 0
27020: PPUSH
// begin uc_side := 0 ;
27021: LD_ADDR_OWVAR 20
27025: PUSH
27026: LD_INT 0
27028: ST_TO_ADDR
// uc_nation := nation_arabian ;
27029: LD_ADDR_OWVAR 21
27033: PUSH
27034: LD_INT 2
27036: ST_TO_ADDR
// hc_gallery :=  ;
27037: LD_ADDR_OWVAR 33
27041: PUSH
27042: LD_STRING 
27044: ST_TO_ADDR
// hc_name :=  ;
27045: LD_ADDR_OWVAR 26
27049: PUSH
27050: LD_STRING 
27052: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27053: LD_INT 1
27055: PPUSH
27056: LD_INT 11
27058: PPUSH
27059: LD_INT 10
27061: PPUSH
27062: CALL_OW 380
// un := CreateHuman ;
27066: LD_ADDR_VAR 0 1
27070: PUSH
27071: CALL_OW 44
27075: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27076: LD_VAR 0 1
27080: PPUSH
27081: LD_INT 1
27083: PPUSH
27084: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27088: LD_INT 35
27090: PPUSH
27091: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27095: LD_VAR 0 1
27099: PPUSH
27100: LD_INT 22
27102: PUSH
27103: LD_OWVAR 2
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PPUSH
27112: CALL_OW 69
27116: PPUSH
27117: LD_VAR 0 1
27121: PPUSH
27122: CALL_OW 74
27126: PPUSH
27127: CALL_OW 115
// until IsDead ( un ) ;
27131: LD_VAR 0 1
27135: PPUSH
27136: CALL_OW 301
27140: IFFALSE 27088
// end ;
27142: PPOPN 1
27144: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27145: LD_EXP 75
27149: PUSH
27150: LD_EXP 115
27154: AND
27155: IFFALSE 27167
27157: GO 27159
27159: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27160: LD_STRING earthquake(getX(game), 0, 32)
27162: PPUSH
27163: CALL_OW 559
27167: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27168: LD_EXP 75
27172: PUSH
27173: LD_EXP 116
27177: AND
27178: IFFALSE 27269
27180: GO 27182
27182: DISABLE
27183: LD_INT 0
27185: PPUSH
// begin enable ;
27186: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27187: LD_ADDR_VAR 0 1
27191: PUSH
27192: LD_INT 22
27194: PUSH
27195: LD_OWVAR 2
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 21
27206: PUSH
27207: LD_INT 2
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 33
27216: PUSH
27217: LD_INT 3
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: LIST
27228: PPUSH
27229: CALL_OW 69
27233: ST_TO_ADDR
// if not tmp then
27234: LD_VAR 0 1
27238: NOT
27239: IFFALSE 27243
// exit ;
27241: GO 27269
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27243: LD_VAR 0 1
27247: PUSH
27248: LD_INT 1
27250: PPUSH
27251: LD_VAR 0 1
27255: PPUSH
27256: CALL_OW 12
27260: ARRAY
27261: PPUSH
27262: LD_INT 1
27264: PPUSH
27265: CALL_OW 234
// end ;
27269: PPOPN 1
27271: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27272: LD_EXP 75
27276: PUSH
27277: LD_EXP 117
27281: AND
27282: IFFALSE 27423
27284: GO 27286
27286: DISABLE
27287: LD_INT 0
27289: PPUSH
27290: PPUSH
27291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27292: LD_ADDR_VAR 0 3
27296: PUSH
27297: LD_INT 22
27299: PUSH
27300: LD_OWVAR 2
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 25
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PPUSH
27323: CALL_OW 69
27327: ST_TO_ADDR
// if not tmp then
27328: LD_VAR 0 3
27332: NOT
27333: IFFALSE 27337
// exit ;
27335: GO 27423
// un := tmp [ rand ( 1 , tmp ) ] ;
27337: LD_ADDR_VAR 0 2
27341: PUSH
27342: LD_VAR 0 3
27346: PUSH
27347: LD_INT 1
27349: PPUSH
27350: LD_VAR 0 3
27354: PPUSH
27355: CALL_OW 12
27359: ARRAY
27360: ST_TO_ADDR
// if Crawls ( un ) then
27361: LD_VAR 0 2
27365: PPUSH
27366: CALL_OW 318
27370: IFFALSE 27381
// ComWalk ( un ) ;
27372: LD_VAR 0 2
27376: PPUSH
27377: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27381: LD_VAR 0 2
27385: PPUSH
27386: LD_INT 9
27388: PPUSH
27389: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27393: LD_INT 28
27395: PPUSH
27396: LD_OWVAR 2
27400: PPUSH
27401: LD_INT 2
27403: PPUSH
27404: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27408: LD_INT 29
27410: PPUSH
27411: LD_OWVAR 2
27415: PPUSH
27416: LD_INT 2
27418: PPUSH
27419: CALL_OW 322
// end ;
27423: PPOPN 3
27425: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27426: LD_EXP 75
27430: PUSH
27431: LD_EXP 118
27435: AND
27436: IFFALSE 27547
27438: GO 27440
27440: DISABLE
27441: LD_INT 0
27443: PPUSH
27444: PPUSH
27445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27446: LD_ADDR_VAR 0 3
27450: PUSH
27451: LD_INT 22
27453: PUSH
27454: LD_OWVAR 2
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 25
27465: PUSH
27466: LD_INT 1
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PPUSH
27477: CALL_OW 69
27481: ST_TO_ADDR
// if not tmp then
27482: LD_VAR 0 3
27486: NOT
27487: IFFALSE 27491
// exit ;
27489: GO 27547
// un := tmp [ rand ( 1 , tmp ) ] ;
27491: LD_ADDR_VAR 0 2
27495: PUSH
27496: LD_VAR 0 3
27500: PUSH
27501: LD_INT 1
27503: PPUSH
27504: LD_VAR 0 3
27508: PPUSH
27509: CALL_OW 12
27513: ARRAY
27514: ST_TO_ADDR
// if Crawls ( un ) then
27515: LD_VAR 0 2
27519: PPUSH
27520: CALL_OW 318
27524: IFFALSE 27535
// ComWalk ( un ) ;
27526: LD_VAR 0 2
27530: PPUSH
27531: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27535: LD_VAR 0 2
27539: PPUSH
27540: LD_INT 8
27542: PPUSH
27543: CALL_OW 336
// end ;
27547: PPOPN 3
27549: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27550: LD_EXP 75
27554: PUSH
27555: LD_EXP 119
27559: AND
27560: IFFALSE 27704
27562: GO 27564
27564: DISABLE
27565: LD_INT 0
27567: PPUSH
27568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27569: LD_ADDR_VAR 0 2
27573: PUSH
27574: LD_INT 22
27576: PUSH
27577: LD_OWVAR 2
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 21
27588: PUSH
27589: LD_INT 2
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 2
27598: PUSH
27599: LD_INT 34
27601: PUSH
27602: LD_INT 12
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 34
27611: PUSH
27612: LD_INT 51
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 34
27621: PUSH
27622: LD_INT 32
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: LIST
27639: PPUSH
27640: CALL_OW 69
27644: ST_TO_ADDR
// if not tmp then
27645: LD_VAR 0 2
27649: NOT
27650: IFFALSE 27654
// exit ;
27652: GO 27704
// for i in tmp do
27654: LD_ADDR_VAR 0 1
27658: PUSH
27659: LD_VAR 0 2
27663: PUSH
27664: FOR_IN
27665: IFFALSE 27702
// if GetCargo ( i , mat_artifact ) = 0 then
27667: LD_VAR 0 1
27671: PPUSH
27672: LD_INT 4
27674: PPUSH
27675: CALL_OW 289
27679: PUSH
27680: LD_INT 0
27682: EQUAL
27683: IFFALSE 27700
// SetCargo ( i , mat_siberit , 100 ) ;
27685: LD_VAR 0 1
27689: PPUSH
27690: LD_INT 3
27692: PPUSH
27693: LD_INT 100
27695: PPUSH
27696: CALL_OW 290
27700: GO 27664
27702: POP
27703: POP
// end ;
27704: PPOPN 2
27706: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27707: LD_EXP 75
27711: PUSH
27712: LD_EXP 120
27716: AND
27717: IFFALSE 27900
27719: GO 27721
27721: DISABLE
27722: LD_INT 0
27724: PPUSH
27725: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27726: LD_ADDR_VAR 0 2
27730: PUSH
27731: LD_INT 22
27733: PUSH
27734: LD_OWVAR 2
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PPUSH
27743: CALL_OW 69
27747: ST_TO_ADDR
// if not tmp then
27748: LD_VAR 0 2
27752: NOT
27753: IFFALSE 27757
// exit ;
27755: GO 27900
// for i := 1 to 2 do
27757: LD_ADDR_VAR 0 1
27761: PUSH
27762: DOUBLE
27763: LD_INT 1
27765: DEC
27766: ST_TO_ADDR
27767: LD_INT 2
27769: PUSH
27770: FOR_TO
27771: IFFALSE 27898
// begin uc_side := your_side ;
27773: LD_ADDR_OWVAR 20
27777: PUSH
27778: LD_OWVAR 2
27782: ST_TO_ADDR
// uc_nation := nation_american ;
27783: LD_ADDR_OWVAR 21
27787: PUSH
27788: LD_INT 1
27790: ST_TO_ADDR
// vc_chassis := us_morphling ;
27791: LD_ADDR_OWVAR 37
27795: PUSH
27796: LD_INT 5
27798: ST_TO_ADDR
// vc_engine := engine_siberite ;
27799: LD_ADDR_OWVAR 39
27803: PUSH
27804: LD_INT 3
27806: ST_TO_ADDR
// vc_control := control_computer ;
27807: LD_ADDR_OWVAR 38
27811: PUSH
27812: LD_INT 3
27814: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27815: LD_ADDR_OWVAR 40
27819: PUSH
27820: LD_INT 10
27822: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27823: LD_VAR 0 2
27827: PUSH
27828: LD_INT 1
27830: ARRAY
27831: PPUSH
27832: CALL_OW 310
27836: NOT
27837: IFFALSE 27884
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27839: CALL_OW 45
27843: PPUSH
27844: LD_VAR 0 2
27848: PUSH
27849: LD_INT 1
27851: ARRAY
27852: PPUSH
27853: CALL_OW 250
27857: PPUSH
27858: LD_VAR 0 2
27862: PUSH
27863: LD_INT 1
27865: ARRAY
27866: PPUSH
27867: CALL_OW 251
27871: PPUSH
27872: LD_INT 12
27874: PPUSH
27875: LD_INT 1
27877: PPUSH
27878: CALL_OW 50
27882: GO 27896
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27884: CALL_OW 45
27888: PPUSH
27889: LD_INT 1
27891: PPUSH
27892: CALL_OW 51
// end ;
27896: GO 27770
27898: POP
27899: POP
// end ;
27900: PPOPN 2
27902: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27903: LD_EXP 75
27907: PUSH
27908: LD_EXP 121
27912: AND
27913: IFFALSE 28135
27915: GO 27917
27917: DISABLE
27918: LD_INT 0
27920: PPUSH
27921: PPUSH
27922: PPUSH
27923: PPUSH
27924: PPUSH
27925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27926: LD_ADDR_VAR 0 6
27930: PUSH
27931: LD_INT 22
27933: PUSH
27934: LD_OWVAR 2
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 21
27945: PUSH
27946: LD_INT 1
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 3
27955: PUSH
27956: LD_INT 23
27958: PUSH
27959: LD_INT 0
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: LIST
27974: PPUSH
27975: CALL_OW 69
27979: ST_TO_ADDR
// if not tmp then
27980: LD_VAR 0 6
27984: NOT
27985: IFFALSE 27989
// exit ;
27987: GO 28135
// s1 := rand ( 1 , 4 ) ;
27989: LD_ADDR_VAR 0 2
27993: PUSH
27994: LD_INT 1
27996: PPUSH
27997: LD_INT 4
27999: PPUSH
28000: CALL_OW 12
28004: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28005: LD_ADDR_VAR 0 4
28009: PUSH
28010: LD_VAR 0 6
28014: PUSH
28015: LD_INT 1
28017: ARRAY
28018: PPUSH
28019: LD_VAR 0 2
28023: PPUSH
28024: CALL_OW 259
28028: ST_TO_ADDR
// if s1 = 1 then
28029: LD_VAR 0 2
28033: PUSH
28034: LD_INT 1
28036: EQUAL
28037: IFFALSE 28057
// s2 := rand ( 2 , 4 ) else
28039: LD_ADDR_VAR 0 3
28043: PUSH
28044: LD_INT 2
28046: PPUSH
28047: LD_INT 4
28049: PPUSH
28050: CALL_OW 12
28054: ST_TO_ADDR
28055: GO 28065
// s2 := 1 ;
28057: LD_ADDR_VAR 0 3
28061: PUSH
28062: LD_INT 1
28064: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28065: LD_ADDR_VAR 0 5
28069: PUSH
28070: LD_VAR 0 6
28074: PUSH
28075: LD_INT 1
28077: ARRAY
28078: PPUSH
28079: LD_VAR 0 3
28083: PPUSH
28084: CALL_OW 259
28088: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28089: LD_VAR 0 6
28093: PUSH
28094: LD_INT 1
28096: ARRAY
28097: PPUSH
28098: LD_VAR 0 2
28102: PPUSH
28103: LD_VAR 0 5
28107: PPUSH
28108: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28112: LD_VAR 0 6
28116: PUSH
28117: LD_INT 1
28119: ARRAY
28120: PPUSH
28121: LD_VAR 0 3
28125: PPUSH
28126: LD_VAR 0 4
28130: PPUSH
28131: CALL_OW 237
// end ;
28135: PPOPN 6
28137: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28138: LD_EXP 75
28142: PUSH
28143: LD_EXP 122
28147: AND
28148: IFFALSE 28227
28150: GO 28152
28152: DISABLE
28153: LD_INT 0
28155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28156: LD_ADDR_VAR 0 1
28160: PUSH
28161: LD_INT 22
28163: PUSH
28164: LD_OWVAR 2
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 30
28175: PUSH
28176: LD_INT 3
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PPUSH
28187: CALL_OW 69
28191: ST_TO_ADDR
// if not tmp then
28192: LD_VAR 0 1
28196: NOT
28197: IFFALSE 28201
// exit ;
28199: GO 28227
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28201: LD_VAR 0 1
28205: PUSH
28206: LD_INT 1
28208: PPUSH
28209: LD_VAR 0 1
28213: PPUSH
28214: CALL_OW 12
28218: ARRAY
28219: PPUSH
28220: LD_INT 1
28222: PPUSH
28223: CALL_OW 234
// end ;
28227: PPOPN 1
28229: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28230: LD_EXP 75
28234: PUSH
28235: LD_EXP 123
28239: AND
28240: IFFALSE 28352
28242: GO 28244
28244: DISABLE
28245: LD_INT 0
28247: PPUSH
28248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28249: LD_ADDR_VAR 0 2
28253: PUSH
28254: LD_INT 22
28256: PUSH
28257: LD_OWVAR 2
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 2
28268: PUSH
28269: LD_INT 30
28271: PUSH
28272: LD_INT 27
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 30
28281: PUSH
28282: LD_INT 26
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 30
28291: PUSH
28292: LD_INT 28
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PPUSH
28309: CALL_OW 69
28313: ST_TO_ADDR
// if not tmp then
28314: LD_VAR 0 2
28318: NOT
28319: IFFALSE 28323
// exit ;
28321: GO 28352
// for i in tmp do
28323: LD_ADDR_VAR 0 1
28327: PUSH
28328: LD_VAR 0 2
28332: PUSH
28333: FOR_IN
28334: IFFALSE 28350
// SetLives ( i , 1 ) ;
28336: LD_VAR 0 1
28340: PPUSH
28341: LD_INT 1
28343: PPUSH
28344: CALL_OW 234
28348: GO 28333
28350: POP
28351: POP
// end ;
28352: PPOPN 2
28354: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28355: LD_EXP 75
28359: PUSH
28360: LD_EXP 124
28364: AND
28365: IFFALSE 28639
28367: GO 28369
28369: DISABLE
28370: LD_INT 0
28372: PPUSH
28373: PPUSH
28374: PPUSH
// begin i := rand ( 1 , 7 ) ;
28375: LD_ADDR_VAR 0 1
28379: PUSH
28380: LD_INT 1
28382: PPUSH
28383: LD_INT 7
28385: PPUSH
28386: CALL_OW 12
28390: ST_TO_ADDR
// case i of 1 :
28391: LD_VAR 0 1
28395: PUSH
28396: LD_INT 1
28398: DOUBLE
28399: EQUAL
28400: IFTRUE 28404
28402: GO 28414
28404: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28405: LD_STRING earthquake(getX(game), 0, 32)
28407: PPUSH
28408: CALL_OW 559
28412: GO 28639
28414: LD_INT 2
28416: DOUBLE
28417: EQUAL
28418: IFTRUE 28422
28420: GO 28436
28422: POP
// begin ToLua ( displayStucuk(); ) ;
28423: LD_STRING displayStucuk();
28425: PPUSH
28426: CALL_OW 559
// ResetFog ;
28430: CALL_OW 335
// end ; 3 :
28434: GO 28639
28436: LD_INT 3
28438: DOUBLE
28439: EQUAL
28440: IFTRUE 28444
28442: GO 28548
28444: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28445: LD_ADDR_VAR 0 2
28449: PUSH
28450: LD_INT 22
28452: PUSH
28453: LD_OWVAR 2
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 25
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PPUSH
28476: CALL_OW 69
28480: ST_TO_ADDR
// if not tmp then
28481: LD_VAR 0 2
28485: NOT
28486: IFFALSE 28490
// exit ;
28488: GO 28639
// un := tmp [ rand ( 1 , tmp ) ] ;
28490: LD_ADDR_VAR 0 3
28494: PUSH
28495: LD_VAR 0 2
28499: PUSH
28500: LD_INT 1
28502: PPUSH
28503: LD_VAR 0 2
28507: PPUSH
28508: CALL_OW 12
28512: ARRAY
28513: ST_TO_ADDR
// if Crawls ( un ) then
28514: LD_VAR 0 3
28518: PPUSH
28519: CALL_OW 318
28523: IFFALSE 28534
// ComWalk ( un ) ;
28525: LD_VAR 0 3
28529: PPUSH
28530: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28534: LD_VAR 0 3
28538: PPUSH
28539: LD_INT 8
28541: PPUSH
28542: CALL_OW 336
// end ; 4 :
28546: GO 28639
28548: LD_INT 4
28550: DOUBLE
28551: EQUAL
28552: IFTRUE 28556
28554: GO 28617
28556: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28557: LD_ADDR_VAR 0 2
28561: PUSH
28562: LD_INT 22
28564: PUSH
28565: LD_OWVAR 2
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 30
28576: PUSH
28577: LD_INT 29
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PPUSH
28588: CALL_OW 69
28592: ST_TO_ADDR
// if not tmp then
28593: LD_VAR 0 2
28597: NOT
28598: IFFALSE 28602
// exit ;
28600: GO 28639
// DestroyUnit ( tmp [ 1 ] ) ;
28602: LD_VAR 0 2
28606: PUSH
28607: LD_INT 1
28609: ARRAY
28610: PPUSH
28611: CALL_OW 65
// end ; 5 .. 7 :
28615: GO 28639
28617: LD_INT 5
28619: DOUBLE
28620: GREATEREQUAL
28621: IFFALSE 28629
28623: LD_INT 7
28625: DOUBLE
28626: LESSEQUAL
28627: IFTRUE 28631
28629: GO 28638
28631: POP
// StreamSibBomb ; end ;
28632: CALL 24889 0 0
28636: GO 28639
28638: POP
// end ;
28639: PPOPN 3
28641: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28642: LD_EXP 75
28646: PUSH
28647: LD_EXP 125
28651: AND
28652: IFFALSE 28808
28654: GO 28656
28656: DISABLE
28657: LD_INT 0
28659: PPUSH
28660: PPUSH
28661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28662: LD_ADDR_VAR 0 2
28666: PUSH
28667: LD_INT 81
28669: PUSH
28670: LD_OWVAR 2
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 2
28681: PUSH
28682: LD_INT 21
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 21
28694: PUSH
28695: LD_INT 2
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: LIST
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PPUSH
28711: CALL_OW 69
28715: ST_TO_ADDR
// if not tmp then
28716: LD_VAR 0 2
28720: NOT
28721: IFFALSE 28725
// exit ;
28723: GO 28808
// p := 0 ;
28725: LD_ADDR_VAR 0 3
28729: PUSH
28730: LD_INT 0
28732: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28733: LD_INT 35
28735: PPUSH
28736: CALL_OW 67
// p := p + 1 ;
28740: LD_ADDR_VAR 0 3
28744: PUSH
28745: LD_VAR 0 3
28749: PUSH
28750: LD_INT 1
28752: PLUS
28753: ST_TO_ADDR
// for i in tmp do
28754: LD_ADDR_VAR 0 1
28758: PUSH
28759: LD_VAR 0 2
28763: PUSH
28764: FOR_IN
28765: IFFALSE 28796
// if GetLives ( i ) < 1000 then
28767: LD_VAR 0 1
28771: PPUSH
28772: CALL_OW 256
28776: PUSH
28777: LD_INT 1000
28779: LESS
28780: IFFALSE 28794
// SetLives ( i , 1000 ) ;
28782: LD_VAR 0 1
28786: PPUSH
28787: LD_INT 1000
28789: PPUSH
28790: CALL_OW 234
28794: GO 28764
28796: POP
28797: POP
// until p > 20 ;
28798: LD_VAR 0 3
28802: PUSH
28803: LD_INT 20
28805: GREATER
28806: IFFALSE 28733
// end ;
28808: PPOPN 3
28810: END
// every 0 0$1 trigger StreamModeActive and sTime do
28811: LD_EXP 75
28815: PUSH
28816: LD_EXP 126
28820: AND
28821: IFFALSE 28856
28823: GO 28825
28825: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28826: LD_INT 28
28828: PPUSH
28829: LD_OWVAR 2
28833: PPUSH
28834: LD_INT 2
28836: PPUSH
28837: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28841: LD_INT 30
28843: PPUSH
28844: LD_OWVAR 2
28848: PPUSH
28849: LD_INT 2
28851: PPUSH
28852: CALL_OW 322
// end ;
28856: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28857: LD_EXP 75
28861: PUSH
28862: LD_EXP 127
28866: AND
28867: IFFALSE 28988
28869: GO 28871
28871: DISABLE
28872: LD_INT 0
28874: PPUSH
28875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28876: LD_ADDR_VAR 0 2
28880: PUSH
28881: LD_INT 22
28883: PUSH
28884: LD_OWVAR 2
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 21
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 3
28905: PUSH
28906: LD_INT 23
28908: PUSH
28909: LD_INT 0
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: LIST
28924: PPUSH
28925: CALL_OW 69
28929: ST_TO_ADDR
// if not tmp then
28930: LD_VAR 0 2
28934: NOT
28935: IFFALSE 28939
// exit ;
28937: GO 28988
// for i in tmp do
28939: LD_ADDR_VAR 0 1
28943: PUSH
28944: LD_VAR 0 2
28948: PUSH
28949: FOR_IN
28950: IFFALSE 28986
// begin if Crawls ( i ) then
28952: LD_VAR 0 1
28956: PPUSH
28957: CALL_OW 318
28961: IFFALSE 28972
// ComWalk ( i ) ;
28963: LD_VAR 0 1
28967: PPUSH
28968: CALL_OW 138
// SetClass ( i , 2 ) ;
28972: LD_VAR 0 1
28976: PPUSH
28977: LD_INT 2
28979: PPUSH
28980: CALL_OW 336
// end ;
28984: GO 28949
28986: POP
28987: POP
// end ;
28988: PPOPN 2
28990: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28991: LD_EXP 75
28995: PUSH
28996: LD_EXP 128
29000: AND
29001: IFFALSE 29282
29003: GO 29005
29005: DISABLE
29006: LD_INT 0
29008: PPUSH
29009: PPUSH
29010: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29011: LD_OWVAR 2
29015: PPUSH
29016: LD_INT 9
29018: PPUSH
29019: LD_INT 1
29021: PPUSH
29022: LD_INT 1
29024: PPUSH
29025: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29029: LD_INT 9
29031: PPUSH
29032: LD_OWVAR 2
29036: PPUSH
29037: CALL_OW 343
// uc_side := 9 ;
29041: LD_ADDR_OWVAR 20
29045: PUSH
29046: LD_INT 9
29048: ST_TO_ADDR
// uc_nation := 2 ;
29049: LD_ADDR_OWVAR 21
29053: PUSH
29054: LD_INT 2
29056: ST_TO_ADDR
// hc_name := Dark Warrior ;
29057: LD_ADDR_OWVAR 26
29061: PUSH
29062: LD_STRING Dark Warrior
29064: ST_TO_ADDR
// hc_gallery :=  ;
29065: LD_ADDR_OWVAR 33
29069: PUSH
29070: LD_STRING 
29072: ST_TO_ADDR
// hc_noskilllimit := true ;
29073: LD_ADDR_OWVAR 76
29077: PUSH
29078: LD_INT 1
29080: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29081: LD_ADDR_OWVAR 31
29085: PUSH
29086: LD_INT 30
29088: PUSH
29089: LD_INT 30
29091: PUSH
29092: LD_INT 30
29094: PUSH
29095: LD_INT 30
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: ST_TO_ADDR
// un := CreateHuman ;
29104: LD_ADDR_VAR 0 3
29108: PUSH
29109: CALL_OW 44
29113: ST_TO_ADDR
// hc_noskilllimit := false ;
29114: LD_ADDR_OWVAR 76
29118: PUSH
29119: LD_INT 0
29121: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29122: LD_VAR 0 3
29126: PPUSH
29127: LD_INT 1
29129: PPUSH
29130: CALL_OW 51
// p := 0 ;
29134: LD_ADDR_VAR 0 2
29138: PUSH
29139: LD_INT 0
29141: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29142: LD_INT 35
29144: PPUSH
29145: CALL_OW 67
// p := p + 1 ;
29149: LD_ADDR_VAR 0 2
29153: PUSH
29154: LD_VAR 0 2
29158: PUSH
29159: LD_INT 1
29161: PLUS
29162: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29163: LD_VAR 0 3
29167: PPUSH
29168: CALL_OW 256
29172: PUSH
29173: LD_INT 1000
29175: LESS
29176: IFFALSE 29190
// SetLives ( un , 1000 ) ;
29178: LD_VAR 0 3
29182: PPUSH
29183: LD_INT 1000
29185: PPUSH
29186: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29190: LD_VAR 0 3
29194: PPUSH
29195: LD_INT 81
29197: PUSH
29198: LD_OWVAR 2
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 91
29209: PUSH
29210: LD_VAR 0 3
29214: PUSH
29215: LD_INT 30
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: LIST
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PPUSH
29227: CALL_OW 69
29231: PPUSH
29232: LD_VAR 0 3
29236: PPUSH
29237: CALL_OW 74
29241: PPUSH
29242: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29246: LD_VAR 0 2
29250: PUSH
29251: LD_INT 60
29253: GREATER
29254: PUSH
29255: LD_VAR 0 3
29259: PPUSH
29260: CALL_OW 301
29264: OR
29265: IFFALSE 29142
// if un then
29267: LD_VAR 0 3
29271: IFFALSE 29282
// RemoveUnit ( un ) ;
29273: LD_VAR 0 3
29277: PPUSH
29278: CALL_OW 64
// end ;
29282: PPOPN 3
29284: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29285: LD_INT 0
29287: PPUSH
// case cmd of 301 :
29288: LD_VAR 0 1
29292: PUSH
29293: LD_INT 301
29295: DOUBLE
29296: EQUAL
29297: IFTRUE 29301
29299: GO 29333
29301: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29302: LD_VAR 0 6
29306: PPUSH
29307: LD_VAR 0 7
29311: PPUSH
29312: LD_VAR 0 8
29316: PPUSH
29317: LD_VAR 0 4
29321: PPUSH
29322: LD_VAR 0 5
29326: PPUSH
29327: CALL 30534 0 5
29331: GO 29454
29333: LD_INT 302
29335: DOUBLE
29336: EQUAL
29337: IFTRUE 29341
29339: GO 29378
29341: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29342: LD_VAR 0 6
29346: PPUSH
29347: LD_VAR 0 7
29351: PPUSH
29352: LD_VAR 0 8
29356: PPUSH
29357: LD_VAR 0 9
29361: PPUSH
29362: LD_VAR 0 4
29366: PPUSH
29367: LD_VAR 0 5
29371: PPUSH
29372: CALL 30625 0 6
29376: GO 29454
29378: LD_INT 303
29380: DOUBLE
29381: EQUAL
29382: IFTRUE 29386
29384: GO 29423
29386: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29387: LD_VAR 0 6
29391: PPUSH
29392: LD_VAR 0 7
29396: PPUSH
29397: LD_VAR 0 8
29401: PPUSH
29402: LD_VAR 0 9
29406: PPUSH
29407: LD_VAR 0 4
29411: PPUSH
29412: LD_VAR 0 5
29416: PPUSH
29417: CALL 29459 0 6
29421: GO 29454
29423: LD_INT 304
29425: DOUBLE
29426: EQUAL
29427: IFTRUE 29431
29429: GO 29453
29431: POP
// hHackTeleport ( unit , x , y ) ; end ;
29432: LD_VAR 0 2
29436: PPUSH
29437: LD_VAR 0 4
29441: PPUSH
29442: LD_VAR 0 5
29446: PPUSH
29447: CALL 31218 0 3
29451: GO 29454
29453: POP
// end ;
29454: LD_VAR 0 12
29458: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29459: LD_INT 0
29461: PPUSH
29462: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29463: LD_VAR 0 1
29467: PUSH
29468: LD_INT 1
29470: LESS
29471: PUSH
29472: LD_VAR 0 1
29476: PUSH
29477: LD_INT 3
29479: GREATER
29480: OR
29481: PUSH
29482: LD_VAR 0 5
29486: PPUSH
29487: LD_VAR 0 6
29491: PPUSH
29492: CALL_OW 428
29496: OR
29497: IFFALSE 29501
// exit ;
29499: GO 30221
// uc_side := your_side ;
29501: LD_ADDR_OWVAR 20
29505: PUSH
29506: LD_OWVAR 2
29510: ST_TO_ADDR
// uc_nation := nation ;
29511: LD_ADDR_OWVAR 21
29515: PUSH
29516: LD_VAR 0 1
29520: ST_TO_ADDR
// bc_level = 1 ;
29521: LD_ADDR_OWVAR 43
29525: PUSH
29526: LD_INT 1
29528: ST_TO_ADDR
// case btype of 1 :
29529: LD_VAR 0 2
29533: PUSH
29534: LD_INT 1
29536: DOUBLE
29537: EQUAL
29538: IFTRUE 29542
29540: GO 29553
29542: POP
// bc_type := b_depot ; 2 :
29543: LD_ADDR_OWVAR 42
29547: PUSH
29548: LD_INT 0
29550: ST_TO_ADDR
29551: GO 30165
29553: LD_INT 2
29555: DOUBLE
29556: EQUAL
29557: IFTRUE 29561
29559: GO 29572
29561: POP
// bc_type := b_warehouse ; 3 :
29562: LD_ADDR_OWVAR 42
29566: PUSH
29567: LD_INT 1
29569: ST_TO_ADDR
29570: GO 30165
29572: LD_INT 3
29574: DOUBLE
29575: EQUAL
29576: IFTRUE 29580
29578: GO 29591
29580: POP
// bc_type := b_lab ; 4 .. 9 :
29581: LD_ADDR_OWVAR 42
29585: PUSH
29586: LD_INT 6
29588: ST_TO_ADDR
29589: GO 30165
29591: LD_INT 4
29593: DOUBLE
29594: GREATEREQUAL
29595: IFFALSE 29603
29597: LD_INT 9
29599: DOUBLE
29600: LESSEQUAL
29601: IFTRUE 29605
29603: GO 29657
29605: POP
// begin bc_type := b_lab_half ;
29606: LD_ADDR_OWVAR 42
29610: PUSH
29611: LD_INT 7
29613: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29614: LD_ADDR_OWVAR 44
29618: PUSH
29619: LD_INT 10
29621: PUSH
29622: LD_INT 11
29624: PUSH
29625: LD_INT 12
29627: PUSH
29628: LD_INT 15
29630: PUSH
29631: LD_INT 14
29633: PUSH
29634: LD_INT 13
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: PUSH
29645: LD_VAR 0 2
29649: PUSH
29650: LD_INT 3
29652: MINUS
29653: ARRAY
29654: ST_TO_ADDR
// end ; 10 .. 13 :
29655: GO 30165
29657: LD_INT 10
29659: DOUBLE
29660: GREATEREQUAL
29661: IFFALSE 29669
29663: LD_INT 13
29665: DOUBLE
29666: LESSEQUAL
29667: IFTRUE 29671
29669: GO 29748
29671: POP
// begin bc_type := b_lab_full ;
29672: LD_ADDR_OWVAR 42
29676: PUSH
29677: LD_INT 8
29679: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29680: LD_ADDR_OWVAR 44
29684: PUSH
29685: LD_INT 10
29687: PUSH
29688: LD_INT 12
29690: PUSH
29691: LD_INT 14
29693: PUSH
29694: LD_INT 13
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: PUSH
29703: LD_VAR 0 2
29707: PUSH
29708: LD_INT 9
29710: MINUS
29711: ARRAY
29712: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29713: LD_ADDR_OWVAR 45
29717: PUSH
29718: LD_INT 11
29720: PUSH
29721: LD_INT 15
29723: PUSH
29724: LD_INT 12
29726: PUSH
29727: LD_INT 15
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: PUSH
29736: LD_VAR 0 2
29740: PUSH
29741: LD_INT 9
29743: MINUS
29744: ARRAY
29745: ST_TO_ADDR
// end ; 14 :
29746: GO 30165
29748: LD_INT 14
29750: DOUBLE
29751: EQUAL
29752: IFTRUE 29756
29754: GO 29767
29756: POP
// bc_type := b_workshop ; 15 :
29757: LD_ADDR_OWVAR 42
29761: PUSH
29762: LD_INT 2
29764: ST_TO_ADDR
29765: GO 30165
29767: LD_INT 15
29769: DOUBLE
29770: EQUAL
29771: IFTRUE 29775
29773: GO 29786
29775: POP
// bc_type := b_factory ; 16 :
29776: LD_ADDR_OWVAR 42
29780: PUSH
29781: LD_INT 3
29783: ST_TO_ADDR
29784: GO 30165
29786: LD_INT 16
29788: DOUBLE
29789: EQUAL
29790: IFTRUE 29794
29792: GO 29805
29794: POP
// bc_type := b_ext_gun ; 17 :
29795: LD_ADDR_OWVAR 42
29799: PUSH
29800: LD_INT 17
29802: ST_TO_ADDR
29803: GO 30165
29805: LD_INT 17
29807: DOUBLE
29808: EQUAL
29809: IFTRUE 29813
29811: GO 29841
29813: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29814: LD_ADDR_OWVAR 42
29818: PUSH
29819: LD_INT 19
29821: PUSH
29822: LD_INT 23
29824: PUSH
29825: LD_INT 19
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: LIST
29832: PUSH
29833: LD_VAR 0 1
29837: ARRAY
29838: ST_TO_ADDR
29839: GO 30165
29841: LD_INT 18
29843: DOUBLE
29844: EQUAL
29845: IFTRUE 29849
29847: GO 29860
29849: POP
// bc_type := b_ext_radar ; 19 :
29850: LD_ADDR_OWVAR 42
29854: PUSH
29855: LD_INT 20
29857: ST_TO_ADDR
29858: GO 30165
29860: LD_INT 19
29862: DOUBLE
29863: EQUAL
29864: IFTRUE 29868
29866: GO 29879
29868: POP
// bc_type := b_ext_radio ; 20 :
29869: LD_ADDR_OWVAR 42
29873: PUSH
29874: LD_INT 22
29876: ST_TO_ADDR
29877: GO 30165
29879: LD_INT 20
29881: DOUBLE
29882: EQUAL
29883: IFTRUE 29887
29885: GO 29898
29887: POP
// bc_type := b_ext_siberium ; 21 :
29888: LD_ADDR_OWVAR 42
29892: PUSH
29893: LD_INT 21
29895: ST_TO_ADDR
29896: GO 30165
29898: LD_INT 21
29900: DOUBLE
29901: EQUAL
29902: IFTRUE 29906
29904: GO 29917
29906: POP
// bc_type := b_ext_computer ; 22 :
29907: LD_ADDR_OWVAR 42
29911: PUSH
29912: LD_INT 24
29914: ST_TO_ADDR
29915: GO 30165
29917: LD_INT 22
29919: DOUBLE
29920: EQUAL
29921: IFTRUE 29925
29923: GO 29936
29925: POP
// bc_type := b_ext_track ; 23 :
29926: LD_ADDR_OWVAR 42
29930: PUSH
29931: LD_INT 16
29933: ST_TO_ADDR
29934: GO 30165
29936: LD_INT 23
29938: DOUBLE
29939: EQUAL
29940: IFTRUE 29944
29942: GO 29955
29944: POP
// bc_type := b_ext_laser ; 24 :
29945: LD_ADDR_OWVAR 42
29949: PUSH
29950: LD_INT 25
29952: ST_TO_ADDR
29953: GO 30165
29955: LD_INT 24
29957: DOUBLE
29958: EQUAL
29959: IFTRUE 29963
29961: GO 29974
29963: POP
// bc_type := b_control_tower ; 25 :
29964: LD_ADDR_OWVAR 42
29968: PUSH
29969: LD_INT 36
29971: ST_TO_ADDR
29972: GO 30165
29974: LD_INT 25
29976: DOUBLE
29977: EQUAL
29978: IFTRUE 29982
29980: GO 29993
29982: POP
// bc_type := b_breastwork ; 26 :
29983: LD_ADDR_OWVAR 42
29987: PUSH
29988: LD_INT 31
29990: ST_TO_ADDR
29991: GO 30165
29993: LD_INT 26
29995: DOUBLE
29996: EQUAL
29997: IFTRUE 30001
29999: GO 30012
30001: POP
// bc_type := b_bunker ; 27 :
30002: LD_ADDR_OWVAR 42
30006: PUSH
30007: LD_INT 32
30009: ST_TO_ADDR
30010: GO 30165
30012: LD_INT 27
30014: DOUBLE
30015: EQUAL
30016: IFTRUE 30020
30018: GO 30031
30020: POP
// bc_type := b_turret ; 28 :
30021: LD_ADDR_OWVAR 42
30025: PUSH
30026: LD_INT 33
30028: ST_TO_ADDR
30029: GO 30165
30031: LD_INT 28
30033: DOUBLE
30034: EQUAL
30035: IFTRUE 30039
30037: GO 30050
30039: POP
// bc_type := b_armoury ; 29 :
30040: LD_ADDR_OWVAR 42
30044: PUSH
30045: LD_INT 4
30047: ST_TO_ADDR
30048: GO 30165
30050: LD_INT 29
30052: DOUBLE
30053: EQUAL
30054: IFTRUE 30058
30056: GO 30069
30058: POP
// bc_type := b_barracks ; 30 :
30059: LD_ADDR_OWVAR 42
30063: PUSH
30064: LD_INT 5
30066: ST_TO_ADDR
30067: GO 30165
30069: LD_INT 30
30071: DOUBLE
30072: EQUAL
30073: IFTRUE 30077
30075: GO 30088
30077: POP
// bc_type := b_solar_power ; 31 :
30078: LD_ADDR_OWVAR 42
30082: PUSH
30083: LD_INT 27
30085: ST_TO_ADDR
30086: GO 30165
30088: LD_INT 31
30090: DOUBLE
30091: EQUAL
30092: IFTRUE 30096
30094: GO 30107
30096: POP
// bc_type := b_oil_power ; 32 :
30097: LD_ADDR_OWVAR 42
30101: PUSH
30102: LD_INT 26
30104: ST_TO_ADDR
30105: GO 30165
30107: LD_INT 32
30109: DOUBLE
30110: EQUAL
30111: IFTRUE 30115
30113: GO 30126
30115: POP
// bc_type := b_siberite_power ; 33 :
30116: LD_ADDR_OWVAR 42
30120: PUSH
30121: LD_INT 28
30123: ST_TO_ADDR
30124: GO 30165
30126: LD_INT 33
30128: DOUBLE
30129: EQUAL
30130: IFTRUE 30134
30132: GO 30145
30134: POP
// bc_type := b_oil_mine ; 34 :
30135: LD_ADDR_OWVAR 42
30139: PUSH
30140: LD_INT 29
30142: ST_TO_ADDR
30143: GO 30165
30145: LD_INT 34
30147: DOUBLE
30148: EQUAL
30149: IFTRUE 30153
30151: GO 30164
30153: POP
// bc_type := b_siberite_mine ; end ;
30154: LD_ADDR_OWVAR 42
30158: PUSH
30159: LD_INT 30
30161: ST_TO_ADDR
30162: GO 30165
30164: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30165: LD_ADDR_VAR 0 8
30169: PUSH
30170: LD_VAR 0 5
30174: PPUSH
30175: LD_VAR 0 6
30179: PPUSH
30180: LD_VAR 0 3
30184: PPUSH
30185: CALL_OW 47
30189: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30190: LD_OWVAR 42
30194: PUSH
30195: LD_INT 32
30197: PUSH
30198: LD_INT 33
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: IN
30205: IFFALSE 30221
// PlaceWeaponTurret ( b , weapon ) ;
30207: LD_VAR 0 8
30211: PPUSH
30212: LD_VAR 0 4
30216: PPUSH
30217: CALL_OW 431
// end ;
30221: LD_VAR 0 7
30225: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30226: LD_INT 0
30228: PPUSH
30229: PPUSH
30230: PPUSH
30231: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30232: LD_ADDR_VAR 0 4
30236: PUSH
30237: LD_INT 22
30239: PUSH
30240: LD_OWVAR 2
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 2
30251: PUSH
30252: LD_INT 30
30254: PUSH
30255: LD_INT 0
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 30
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: LIST
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PPUSH
30281: CALL_OW 69
30285: ST_TO_ADDR
// if not tmp then
30286: LD_VAR 0 4
30290: NOT
30291: IFFALSE 30295
// exit ;
30293: GO 30354
// for i in tmp do
30295: LD_ADDR_VAR 0 2
30299: PUSH
30300: LD_VAR 0 4
30304: PUSH
30305: FOR_IN
30306: IFFALSE 30352
// for j = 1 to 3 do
30308: LD_ADDR_VAR 0 3
30312: PUSH
30313: DOUBLE
30314: LD_INT 1
30316: DEC
30317: ST_TO_ADDR
30318: LD_INT 3
30320: PUSH
30321: FOR_TO
30322: IFFALSE 30348
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30324: LD_VAR 0 2
30328: PPUSH
30329: CALL_OW 274
30333: PPUSH
30334: LD_VAR 0 3
30338: PPUSH
30339: LD_INT 99999
30341: PPUSH
30342: CALL_OW 277
30346: GO 30321
30348: POP
30349: POP
30350: GO 30305
30352: POP
30353: POP
// end ;
30354: LD_VAR 0 1
30358: RET
// export function hHackSetLevel10 ; var i , j ; begin
30359: LD_INT 0
30361: PPUSH
30362: PPUSH
30363: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30364: LD_ADDR_VAR 0 2
30368: PUSH
30369: LD_INT 21
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PPUSH
30379: CALL_OW 69
30383: PUSH
30384: FOR_IN
30385: IFFALSE 30437
// if IsSelected ( i ) then
30387: LD_VAR 0 2
30391: PPUSH
30392: CALL_OW 306
30396: IFFALSE 30435
// begin for j := 1 to 4 do
30398: LD_ADDR_VAR 0 3
30402: PUSH
30403: DOUBLE
30404: LD_INT 1
30406: DEC
30407: ST_TO_ADDR
30408: LD_INT 4
30410: PUSH
30411: FOR_TO
30412: IFFALSE 30433
// SetSkill ( i , j , 10 ) ;
30414: LD_VAR 0 2
30418: PPUSH
30419: LD_VAR 0 3
30423: PPUSH
30424: LD_INT 10
30426: PPUSH
30427: CALL_OW 237
30431: GO 30411
30433: POP
30434: POP
// end ;
30435: GO 30384
30437: POP
30438: POP
// end ;
30439: LD_VAR 0 1
30443: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30444: LD_INT 0
30446: PPUSH
30447: PPUSH
30448: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30449: LD_ADDR_VAR 0 2
30453: PUSH
30454: LD_INT 22
30456: PUSH
30457: LD_OWVAR 2
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 21
30468: PUSH
30469: LD_INT 1
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PPUSH
30480: CALL_OW 69
30484: PUSH
30485: FOR_IN
30486: IFFALSE 30527
// begin for j := 1 to 4 do
30488: LD_ADDR_VAR 0 3
30492: PUSH
30493: DOUBLE
30494: LD_INT 1
30496: DEC
30497: ST_TO_ADDR
30498: LD_INT 4
30500: PUSH
30501: FOR_TO
30502: IFFALSE 30523
// SetSkill ( i , j , 10 ) ;
30504: LD_VAR 0 2
30508: PPUSH
30509: LD_VAR 0 3
30513: PPUSH
30514: LD_INT 10
30516: PPUSH
30517: CALL_OW 237
30521: GO 30501
30523: POP
30524: POP
// end ;
30525: GO 30485
30527: POP
30528: POP
// end ;
30529: LD_VAR 0 1
30533: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30534: LD_INT 0
30536: PPUSH
// uc_side := your_side ;
30537: LD_ADDR_OWVAR 20
30541: PUSH
30542: LD_OWVAR 2
30546: ST_TO_ADDR
// uc_nation := nation ;
30547: LD_ADDR_OWVAR 21
30551: PUSH
30552: LD_VAR 0 1
30556: ST_TO_ADDR
// InitHc ;
30557: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30561: LD_INT 0
30563: PPUSH
30564: LD_VAR 0 2
30568: PPUSH
30569: LD_VAR 0 3
30573: PPUSH
30574: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30578: LD_VAR 0 4
30582: PPUSH
30583: LD_VAR 0 5
30587: PPUSH
30588: CALL_OW 428
30592: PUSH
30593: LD_INT 0
30595: EQUAL
30596: IFFALSE 30620
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30598: CALL_OW 44
30602: PPUSH
30603: LD_VAR 0 4
30607: PPUSH
30608: LD_VAR 0 5
30612: PPUSH
30613: LD_INT 1
30615: PPUSH
30616: CALL_OW 48
// end ;
30620: LD_VAR 0 6
30624: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30625: LD_INT 0
30627: PPUSH
30628: PPUSH
// uc_side := your_side ;
30629: LD_ADDR_OWVAR 20
30633: PUSH
30634: LD_OWVAR 2
30638: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30639: LD_VAR 0 1
30643: PUSH
30644: LD_INT 1
30646: PUSH
30647: LD_INT 2
30649: PUSH
30650: LD_INT 3
30652: PUSH
30653: LD_INT 4
30655: PUSH
30656: LD_INT 5
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: IN
30666: IFFALSE 30678
// uc_nation := nation_american else
30668: LD_ADDR_OWVAR 21
30672: PUSH
30673: LD_INT 1
30675: ST_TO_ADDR
30676: GO 30721
// if chassis in [ 11 , 12 , 13 , 14 ] then
30678: LD_VAR 0 1
30682: PUSH
30683: LD_INT 11
30685: PUSH
30686: LD_INT 12
30688: PUSH
30689: LD_INT 13
30691: PUSH
30692: LD_INT 14
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: IN
30701: IFFALSE 30713
// uc_nation := nation_arabian else
30703: LD_ADDR_OWVAR 21
30707: PUSH
30708: LD_INT 2
30710: ST_TO_ADDR
30711: GO 30721
// uc_nation := nation_russian ;
30713: LD_ADDR_OWVAR 21
30717: PUSH
30718: LD_INT 3
30720: ST_TO_ADDR
// vc_chassis := chassis ;
30721: LD_ADDR_OWVAR 37
30725: PUSH
30726: LD_VAR 0 1
30730: ST_TO_ADDR
// vc_engine := engine ;
30731: LD_ADDR_OWVAR 39
30735: PUSH
30736: LD_VAR 0 2
30740: ST_TO_ADDR
// vc_control := control ;
30741: LD_ADDR_OWVAR 38
30745: PUSH
30746: LD_VAR 0 3
30750: ST_TO_ADDR
// vc_weapon := weapon ;
30751: LD_ADDR_OWVAR 40
30755: PUSH
30756: LD_VAR 0 4
30760: ST_TO_ADDR
// un := CreateVehicle ;
30761: LD_ADDR_VAR 0 8
30765: PUSH
30766: CALL_OW 45
30770: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30771: LD_VAR 0 8
30775: PPUSH
30776: LD_INT 0
30778: PPUSH
30779: LD_INT 5
30781: PPUSH
30782: CALL_OW 12
30786: PPUSH
30787: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30791: LD_VAR 0 8
30795: PPUSH
30796: LD_VAR 0 5
30800: PPUSH
30801: LD_VAR 0 6
30805: PPUSH
30806: LD_INT 1
30808: PPUSH
30809: CALL_OW 48
// end ;
30813: LD_VAR 0 7
30817: RET
// export hInvincible ; every 1 do
30818: GO 30820
30820: DISABLE
// hInvincible := [ ] ;
30821: LD_ADDR_EXP 129
30825: PUSH
30826: EMPTY
30827: ST_TO_ADDR
30828: END
// every 10 do var i ;
30829: GO 30831
30831: DISABLE
30832: LD_INT 0
30834: PPUSH
// begin enable ;
30835: ENABLE
// if not hInvincible then
30836: LD_EXP 129
30840: NOT
30841: IFFALSE 30845
// exit ;
30843: GO 30889
// for i in hInvincible do
30845: LD_ADDR_VAR 0 1
30849: PUSH
30850: LD_EXP 129
30854: PUSH
30855: FOR_IN
30856: IFFALSE 30887
// if GetLives ( i ) < 1000 then
30858: LD_VAR 0 1
30862: PPUSH
30863: CALL_OW 256
30867: PUSH
30868: LD_INT 1000
30870: LESS
30871: IFFALSE 30885
// SetLives ( i , 1000 ) ;
30873: LD_VAR 0 1
30877: PPUSH
30878: LD_INT 1000
30880: PPUSH
30881: CALL_OW 234
30885: GO 30855
30887: POP
30888: POP
// end ;
30889: PPOPN 1
30891: END
// export function hHackInvincible ; var i ; begin
30892: LD_INT 0
30894: PPUSH
30895: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30896: LD_ADDR_VAR 0 2
30900: PUSH
30901: LD_INT 2
30903: PUSH
30904: LD_INT 21
30906: PUSH
30907: LD_INT 1
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 21
30916: PUSH
30917: LD_INT 2
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: LIST
30928: PPUSH
30929: CALL_OW 69
30933: PUSH
30934: FOR_IN
30935: IFFALSE 30996
// if IsSelected ( i ) then
30937: LD_VAR 0 2
30941: PPUSH
30942: CALL_OW 306
30946: IFFALSE 30994
// begin if i in hInvincible then
30948: LD_VAR 0 2
30952: PUSH
30953: LD_EXP 129
30957: IN
30958: IFFALSE 30978
// hInvincible := hInvincible diff i else
30960: LD_ADDR_EXP 129
30964: PUSH
30965: LD_EXP 129
30969: PUSH
30970: LD_VAR 0 2
30974: DIFF
30975: ST_TO_ADDR
30976: GO 30994
// hInvincible := hInvincible union i ;
30978: LD_ADDR_EXP 129
30982: PUSH
30983: LD_EXP 129
30987: PUSH
30988: LD_VAR 0 2
30992: UNION
30993: ST_TO_ADDR
// end ;
30994: GO 30934
30996: POP
30997: POP
// end ;
30998: LD_VAR 0 1
31002: RET
// export function hHackInvisible ; var i , j ; begin
31003: LD_INT 0
31005: PPUSH
31006: PPUSH
31007: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31008: LD_ADDR_VAR 0 2
31012: PUSH
31013: LD_INT 21
31015: PUSH
31016: LD_INT 1
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PPUSH
31023: CALL_OW 69
31027: PUSH
31028: FOR_IN
31029: IFFALSE 31053
// if IsSelected ( i ) then
31031: LD_VAR 0 2
31035: PPUSH
31036: CALL_OW 306
31040: IFFALSE 31051
// ComForceInvisible ( i ) ;
31042: LD_VAR 0 2
31046: PPUSH
31047: CALL_OW 496
31051: GO 31028
31053: POP
31054: POP
// end ;
31055: LD_VAR 0 1
31059: RET
// export function hHackChangeYourSide ; begin
31060: LD_INT 0
31062: PPUSH
// if your_side = 8 then
31063: LD_OWVAR 2
31067: PUSH
31068: LD_INT 8
31070: EQUAL
31071: IFFALSE 31083
// your_side := 0 else
31073: LD_ADDR_OWVAR 2
31077: PUSH
31078: LD_INT 0
31080: ST_TO_ADDR
31081: GO 31097
// your_side := your_side + 1 ;
31083: LD_ADDR_OWVAR 2
31087: PUSH
31088: LD_OWVAR 2
31092: PUSH
31093: LD_INT 1
31095: PLUS
31096: ST_TO_ADDR
// end ;
31097: LD_VAR 0 1
31101: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31102: LD_INT 0
31104: PPUSH
31105: PPUSH
31106: PPUSH
// for i in all_units do
31107: LD_ADDR_VAR 0 2
31111: PUSH
31112: LD_OWVAR 3
31116: PUSH
31117: FOR_IN
31118: IFFALSE 31196
// if IsSelected ( i ) then
31120: LD_VAR 0 2
31124: PPUSH
31125: CALL_OW 306
31129: IFFALSE 31194
// begin j := GetSide ( i ) ;
31131: LD_ADDR_VAR 0 3
31135: PUSH
31136: LD_VAR 0 2
31140: PPUSH
31141: CALL_OW 255
31145: ST_TO_ADDR
// if j = 8 then
31146: LD_VAR 0 3
31150: PUSH
31151: LD_INT 8
31153: EQUAL
31154: IFFALSE 31166
// j := 0 else
31156: LD_ADDR_VAR 0 3
31160: PUSH
31161: LD_INT 0
31163: ST_TO_ADDR
31164: GO 31180
// j := j + 1 ;
31166: LD_ADDR_VAR 0 3
31170: PUSH
31171: LD_VAR 0 3
31175: PUSH
31176: LD_INT 1
31178: PLUS
31179: ST_TO_ADDR
// SetSide ( i , j ) ;
31180: LD_VAR 0 2
31184: PPUSH
31185: LD_VAR 0 3
31189: PPUSH
31190: CALL_OW 235
// end ;
31194: GO 31117
31196: POP
31197: POP
// end ;
31198: LD_VAR 0 1
31202: RET
// export function hHackFog ; begin
31203: LD_INT 0
31205: PPUSH
// FogOff ( true ) ;
31206: LD_INT 1
31208: PPUSH
31209: CALL_OW 344
// end ;
31213: LD_VAR 0 1
31217: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31218: LD_INT 0
31220: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31221: LD_VAR 0 1
31225: PPUSH
31226: LD_VAR 0 2
31230: PPUSH
31231: LD_VAR 0 3
31235: PPUSH
31236: LD_INT 1
31238: PPUSH
31239: LD_INT 1
31241: PPUSH
31242: CALL_OW 483
// CenterOnXY ( x , y ) ;
31246: LD_VAR 0 2
31250: PPUSH
31251: LD_VAR 0 3
31255: PPUSH
31256: CALL_OW 84
// end ; end_of_file end_of_file
31260: LD_VAR 0 4
31264: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31265: LD_INT 0
31267: PPUSH
31268: PPUSH
// if exist_mode then
31269: LD_VAR 0 2
31273: IFFALSE 31298
// unit := CreateCharacter ( prefix & ident ) else
31275: LD_ADDR_VAR 0 5
31279: PUSH
31280: LD_VAR 0 3
31284: PUSH
31285: LD_VAR 0 1
31289: STR
31290: PPUSH
31291: CALL_OW 34
31295: ST_TO_ADDR
31296: GO 31313
// unit := NewCharacter ( ident ) ;
31298: LD_ADDR_VAR 0 5
31302: PUSH
31303: LD_VAR 0 1
31307: PPUSH
31308: CALL_OW 25
31312: ST_TO_ADDR
// result := unit ;
31313: LD_ADDR_VAR 0 4
31317: PUSH
31318: LD_VAR 0 5
31322: ST_TO_ADDR
// end ;
31323: LD_VAR 0 4
31327: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31328: LD_INT 0
31330: PPUSH
31331: PPUSH
// if not side or not nation then
31332: LD_VAR 0 1
31336: NOT
31337: PUSH
31338: LD_VAR 0 2
31342: NOT
31343: OR
31344: IFFALSE 31348
// exit ;
31346: GO 32116
// case nation of nation_american :
31348: LD_VAR 0 2
31352: PUSH
31353: LD_INT 1
31355: DOUBLE
31356: EQUAL
31357: IFTRUE 31361
31359: GO 31575
31361: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31362: LD_ADDR_VAR 0 4
31366: PUSH
31367: LD_INT 35
31369: PUSH
31370: LD_INT 45
31372: PUSH
31373: LD_INT 46
31375: PUSH
31376: LD_INT 47
31378: PUSH
31379: LD_INT 82
31381: PUSH
31382: LD_INT 83
31384: PUSH
31385: LD_INT 84
31387: PUSH
31388: LD_INT 85
31390: PUSH
31391: LD_INT 86
31393: PUSH
31394: LD_INT 1
31396: PUSH
31397: LD_INT 2
31399: PUSH
31400: LD_INT 6
31402: PUSH
31403: LD_INT 15
31405: PUSH
31406: LD_INT 16
31408: PUSH
31409: LD_INT 7
31411: PUSH
31412: LD_INT 12
31414: PUSH
31415: LD_INT 13
31417: PUSH
31418: LD_INT 10
31420: PUSH
31421: LD_INT 14
31423: PUSH
31424: LD_INT 20
31426: PUSH
31427: LD_INT 21
31429: PUSH
31430: LD_INT 22
31432: PUSH
31433: LD_INT 25
31435: PUSH
31436: LD_INT 32
31438: PUSH
31439: LD_INT 27
31441: PUSH
31442: LD_INT 36
31444: PUSH
31445: LD_INT 69
31447: PUSH
31448: LD_INT 39
31450: PUSH
31451: LD_INT 34
31453: PUSH
31454: LD_INT 40
31456: PUSH
31457: LD_INT 48
31459: PUSH
31460: LD_INT 49
31462: PUSH
31463: LD_INT 50
31465: PUSH
31466: LD_INT 51
31468: PUSH
31469: LD_INT 52
31471: PUSH
31472: LD_INT 53
31474: PUSH
31475: LD_INT 54
31477: PUSH
31478: LD_INT 55
31480: PUSH
31481: LD_INT 56
31483: PUSH
31484: LD_INT 57
31486: PUSH
31487: LD_INT 58
31489: PUSH
31490: LD_INT 59
31492: PUSH
31493: LD_INT 60
31495: PUSH
31496: LD_INT 61
31498: PUSH
31499: LD_INT 62
31501: PUSH
31502: LD_INT 80
31504: PUSH
31505: LD_INT 82
31507: PUSH
31508: LD_INT 83
31510: PUSH
31511: LD_INT 84
31513: PUSH
31514: LD_INT 85
31516: PUSH
31517: LD_INT 86
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: ST_TO_ADDR
31573: GO 32040
31575: LD_INT 2
31577: DOUBLE
31578: EQUAL
31579: IFTRUE 31583
31581: GO 31809
31583: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31584: LD_ADDR_VAR 0 4
31588: PUSH
31589: LD_INT 35
31591: PUSH
31592: LD_INT 45
31594: PUSH
31595: LD_INT 46
31597: PUSH
31598: LD_INT 47
31600: PUSH
31601: LD_INT 82
31603: PUSH
31604: LD_INT 83
31606: PUSH
31607: LD_INT 84
31609: PUSH
31610: LD_INT 85
31612: PUSH
31613: LD_INT 87
31615: PUSH
31616: LD_INT 70
31618: PUSH
31619: LD_INT 1
31621: PUSH
31622: LD_INT 11
31624: PUSH
31625: LD_INT 3
31627: PUSH
31628: LD_INT 4
31630: PUSH
31631: LD_INT 5
31633: PUSH
31634: LD_INT 6
31636: PUSH
31637: LD_INT 15
31639: PUSH
31640: LD_INT 18
31642: PUSH
31643: LD_INT 7
31645: PUSH
31646: LD_INT 17
31648: PUSH
31649: LD_INT 8
31651: PUSH
31652: LD_INT 20
31654: PUSH
31655: LD_INT 21
31657: PUSH
31658: LD_INT 22
31660: PUSH
31661: LD_INT 72
31663: PUSH
31664: LD_INT 26
31666: PUSH
31667: LD_INT 69
31669: PUSH
31670: LD_INT 39
31672: PUSH
31673: LD_INT 40
31675: PUSH
31676: LD_INT 41
31678: PUSH
31679: LD_INT 42
31681: PUSH
31682: LD_INT 43
31684: PUSH
31685: LD_INT 48
31687: PUSH
31688: LD_INT 49
31690: PUSH
31691: LD_INT 50
31693: PUSH
31694: LD_INT 51
31696: PUSH
31697: LD_INT 52
31699: PUSH
31700: LD_INT 53
31702: PUSH
31703: LD_INT 54
31705: PUSH
31706: LD_INT 55
31708: PUSH
31709: LD_INT 56
31711: PUSH
31712: LD_INT 60
31714: PUSH
31715: LD_INT 61
31717: PUSH
31718: LD_INT 62
31720: PUSH
31721: LD_INT 66
31723: PUSH
31724: LD_INT 67
31726: PUSH
31727: LD_INT 68
31729: PUSH
31730: LD_INT 81
31732: PUSH
31733: LD_INT 82
31735: PUSH
31736: LD_INT 83
31738: PUSH
31739: LD_INT 84
31741: PUSH
31742: LD_INT 85
31744: PUSH
31745: LD_INT 87
31747: PUSH
31748: LD_INT 88
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: ST_TO_ADDR
31807: GO 32040
31809: LD_INT 3
31811: DOUBLE
31812: EQUAL
31813: IFTRUE 31817
31815: GO 32039
31817: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31818: LD_ADDR_VAR 0 4
31822: PUSH
31823: LD_INT 46
31825: PUSH
31826: LD_INT 47
31828: PUSH
31829: LD_INT 1
31831: PUSH
31832: LD_INT 2
31834: PUSH
31835: LD_INT 82
31837: PUSH
31838: LD_INT 83
31840: PUSH
31841: LD_INT 84
31843: PUSH
31844: LD_INT 85
31846: PUSH
31847: LD_INT 86
31849: PUSH
31850: LD_INT 11
31852: PUSH
31853: LD_INT 9
31855: PUSH
31856: LD_INT 20
31858: PUSH
31859: LD_INT 19
31861: PUSH
31862: LD_INT 21
31864: PUSH
31865: LD_INT 24
31867: PUSH
31868: LD_INT 22
31870: PUSH
31871: LD_INT 25
31873: PUSH
31874: LD_INT 28
31876: PUSH
31877: LD_INT 29
31879: PUSH
31880: LD_INT 30
31882: PUSH
31883: LD_INT 31
31885: PUSH
31886: LD_INT 37
31888: PUSH
31889: LD_INT 38
31891: PUSH
31892: LD_INT 32
31894: PUSH
31895: LD_INT 27
31897: PUSH
31898: LD_INT 33
31900: PUSH
31901: LD_INT 69
31903: PUSH
31904: LD_INT 39
31906: PUSH
31907: LD_INT 34
31909: PUSH
31910: LD_INT 40
31912: PUSH
31913: LD_INT 71
31915: PUSH
31916: LD_INT 23
31918: PUSH
31919: LD_INT 44
31921: PUSH
31922: LD_INT 48
31924: PUSH
31925: LD_INT 49
31927: PUSH
31928: LD_INT 50
31930: PUSH
31931: LD_INT 51
31933: PUSH
31934: LD_INT 52
31936: PUSH
31937: LD_INT 53
31939: PUSH
31940: LD_INT 54
31942: PUSH
31943: LD_INT 55
31945: PUSH
31946: LD_INT 56
31948: PUSH
31949: LD_INT 57
31951: PUSH
31952: LD_INT 58
31954: PUSH
31955: LD_INT 59
31957: PUSH
31958: LD_INT 63
31960: PUSH
31961: LD_INT 64
31963: PUSH
31964: LD_INT 65
31966: PUSH
31967: LD_INT 82
31969: PUSH
31970: LD_INT 83
31972: PUSH
31973: LD_INT 84
31975: PUSH
31976: LD_INT 85
31978: PUSH
31979: LD_INT 86
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: ST_TO_ADDR
32037: GO 32040
32039: POP
// if state > - 1 and state < 3 then
32040: LD_VAR 0 3
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: GREATER
32049: PUSH
32050: LD_VAR 0 3
32054: PUSH
32055: LD_INT 3
32057: LESS
32058: AND
32059: IFFALSE 32116
// for i in result do
32061: LD_ADDR_VAR 0 5
32065: PUSH
32066: LD_VAR 0 4
32070: PUSH
32071: FOR_IN
32072: IFFALSE 32114
// if GetTech ( i , side ) <> state then
32074: LD_VAR 0 5
32078: PPUSH
32079: LD_VAR 0 1
32083: PPUSH
32084: CALL_OW 321
32088: PUSH
32089: LD_VAR 0 3
32093: NONEQUAL
32094: IFFALSE 32112
// result := result diff i ;
32096: LD_ADDR_VAR 0 4
32100: PUSH
32101: LD_VAR 0 4
32105: PUSH
32106: LD_VAR 0 5
32110: DIFF
32111: ST_TO_ADDR
32112: GO 32071
32114: POP
32115: POP
// end ;
32116: LD_VAR 0 4
32120: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32121: LD_INT 0
32123: PPUSH
32124: PPUSH
32125: PPUSH
// result := true ;
32126: LD_ADDR_VAR 0 3
32130: PUSH
32131: LD_INT 1
32133: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32134: LD_ADDR_VAR 0 5
32138: PUSH
32139: LD_VAR 0 2
32143: PPUSH
32144: CALL_OW 480
32148: ST_TO_ADDR
// if not tmp then
32149: LD_VAR 0 5
32153: NOT
32154: IFFALSE 32158
// exit ;
32156: GO 32207
// for i in tmp do
32158: LD_ADDR_VAR 0 4
32162: PUSH
32163: LD_VAR 0 5
32167: PUSH
32168: FOR_IN
32169: IFFALSE 32205
// if GetTech ( i , side ) <> state_researched then
32171: LD_VAR 0 4
32175: PPUSH
32176: LD_VAR 0 1
32180: PPUSH
32181: CALL_OW 321
32185: PUSH
32186: LD_INT 2
32188: NONEQUAL
32189: IFFALSE 32203
// begin result := false ;
32191: LD_ADDR_VAR 0 3
32195: PUSH
32196: LD_INT 0
32198: ST_TO_ADDR
// exit ;
32199: POP
32200: POP
32201: GO 32207
// end ;
32203: GO 32168
32205: POP
32206: POP
// end ;
32207: LD_VAR 0 3
32211: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32212: LD_INT 0
32214: PPUSH
32215: PPUSH
32216: PPUSH
32217: PPUSH
32218: PPUSH
32219: PPUSH
32220: PPUSH
32221: PPUSH
32222: PPUSH
32223: PPUSH
32224: PPUSH
32225: PPUSH
32226: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32227: LD_VAR 0 1
32231: NOT
32232: PUSH
32233: LD_VAR 0 1
32237: PPUSH
32238: CALL_OW 257
32242: PUSH
32243: LD_INT 9
32245: NONEQUAL
32246: OR
32247: IFFALSE 32251
// exit ;
32249: GO 32824
// side := GetSide ( unit ) ;
32251: LD_ADDR_VAR 0 9
32255: PUSH
32256: LD_VAR 0 1
32260: PPUSH
32261: CALL_OW 255
32265: ST_TO_ADDR
// tech_space := tech_spacanom ;
32266: LD_ADDR_VAR 0 12
32270: PUSH
32271: LD_INT 29
32273: ST_TO_ADDR
// tech_time := tech_taurad ;
32274: LD_ADDR_VAR 0 13
32278: PUSH
32279: LD_INT 28
32281: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32282: LD_ADDR_VAR 0 11
32286: PUSH
32287: LD_VAR 0 1
32291: PPUSH
32292: CALL_OW 310
32296: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32297: LD_VAR 0 11
32301: PPUSH
32302: CALL_OW 247
32306: PUSH
32307: LD_INT 2
32309: EQUAL
32310: IFFALSE 32314
// exit ;
32312: GO 32824
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32314: LD_ADDR_VAR 0 8
32318: PUSH
32319: LD_INT 81
32321: PUSH
32322: LD_VAR 0 9
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 3
32333: PUSH
32334: LD_INT 21
32336: PUSH
32337: LD_INT 3
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PPUSH
32352: CALL_OW 69
32356: ST_TO_ADDR
// if not tmp then
32357: LD_VAR 0 8
32361: NOT
32362: IFFALSE 32366
// exit ;
32364: GO 32824
// if in_unit then
32366: LD_VAR 0 11
32370: IFFALSE 32394
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32372: LD_ADDR_VAR 0 10
32376: PUSH
32377: LD_VAR 0 8
32381: PPUSH
32382: LD_VAR 0 11
32386: PPUSH
32387: CALL_OW 74
32391: ST_TO_ADDR
32392: GO 32414
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32394: LD_ADDR_VAR 0 10
32398: PUSH
32399: LD_VAR 0 8
32403: PPUSH
32404: LD_VAR 0 1
32408: PPUSH
32409: CALL_OW 74
32413: ST_TO_ADDR
// if not enemy then
32414: LD_VAR 0 10
32418: NOT
32419: IFFALSE 32423
// exit ;
32421: GO 32824
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32423: LD_VAR 0 11
32427: PUSH
32428: LD_VAR 0 11
32432: PPUSH
32433: LD_VAR 0 10
32437: PPUSH
32438: CALL_OW 296
32442: PUSH
32443: LD_INT 13
32445: GREATER
32446: AND
32447: PUSH
32448: LD_VAR 0 1
32452: PPUSH
32453: LD_VAR 0 10
32457: PPUSH
32458: CALL_OW 296
32462: PUSH
32463: LD_INT 12
32465: GREATER
32466: OR
32467: IFFALSE 32471
// exit ;
32469: GO 32824
// missile := [ 1 ] ;
32471: LD_ADDR_VAR 0 14
32475: PUSH
32476: LD_INT 1
32478: PUSH
32479: EMPTY
32480: LIST
32481: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32482: LD_VAR 0 9
32486: PPUSH
32487: LD_VAR 0 12
32491: PPUSH
32492: CALL_OW 325
32496: IFFALSE 32525
// missile := Insert ( missile , missile + 1 , 2 ) ;
32498: LD_ADDR_VAR 0 14
32502: PUSH
32503: LD_VAR 0 14
32507: PPUSH
32508: LD_VAR 0 14
32512: PUSH
32513: LD_INT 1
32515: PLUS
32516: PPUSH
32517: LD_INT 2
32519: PPUSH
32520: CALL_OW 2
32524: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32525: LD_VAR 0 9
32529: PPUSH
32530: LD_VAR 0 13
32534: PPUSH
32535: CALL_OW 325
32539: PUSH
32540: LD_VAR 0 10
32544: PPUSH
32545: CALL_OW 255
32549: PPUSH
32550: LD_VAR 0 13
32554: PPUSH
32555: CALL_OW 325
32559: NOT
32560: AND
32561: IFFALSE 32590
// missile := Insert ( missile , missile + 1 , 3 ) ;
32563: LD_ADDR_VAR 0 14
32567: PUSH
32568: LD_VAR 0 14
32572: PPUSH
32573: LD_VAR 0 14
32577: PUSH
32578: LD_INT 1
32580: PLUS
32581: PPUSH
32582: LD_INT 3
32584: PPUSH
32585: CALL_OW 2
32589: ST_TO_ADDR
// if missile < 2 then
32590: LD_VAR 0 14
32594: PUSH
32595: LD_INT 2
32597: LESS
32598: IFFALSE 32602
// exit ;
32600: GO 32824
// x := GetX ( enemy ) ;
32602: LD_ADDR_VAR 0 4
32606: PUSH
32607: LD_VAR 0 10
32611: PPUSH
32612: CALL_OW 250
32616: ST_TO_ADDR
// y := GetY ( enemy ) ;
32617: LD_ADDR_VAR 0 5
32621: PUSH
32622: LD_VAR 0 10
32626: PPUSH
32627: CALL_OW 251
32631: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32632: LD_ADDR_VAR 0 6
32636: PUSH
32637: LD_VAR 0 4
32641: PUSH
32642: LD_INT 1
32644: NEG
32645: PPUSH
32646: LD_INT 1
32648: PPUSH
32649: CALL_OW 12
32653: PLUS
32654: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32655: LD_ADDR_VAR 0 7
32659: PUSH
32660: LD_VAR 0 5
32664: PUSH
32665: LD_INT 1
32667: NEG
32668: PPUSH
32669: LD_INT 1
32671: PPUSH
32672: CALL_OW 12
32676: PLUS
32677: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32678: LD_VAR 0 6
32682: PPUSH
32683: LD_VAR 0 7
32687: PPUSH
32688: CALL_OW 488
32692: NOT
32693: IFFALSE 32715
// begin _x := x ;
32695: LD_ADDR_VAR 0 6
32699: PUSH
32700: LD_VAR 0 4
32704: ST_TO_ADDR
// _y := y ;
32705: LD_ADDR_VAR 0 7
32709: PUSH
32710: LD_VAR 0 5
32714: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32715: LD_ADDR_VAR 0 3
32719: PUSH
32720: LD_INT 1
32722: PPUSH
32723: LD_VAR 0 14
32727: PPUSH
32728: CALL_OW 12
32732: ST_TO_ADDR
// case i of 1 :
32733: LD_VAR 0 3
32737: PUSH
32738: LD_INT 1
32740: DOUBLE
32741: EQUAL
32742: IFTRUE 32746
32744: GO 32763
32746: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32747: LD_VAR 0 1
32751: PPUSH
32752: LD_VAR 0 10
32756: PPUSH
32757: CALL_OW 115
32761: GO 32824
32763: LD_INT 2
32765: DOUBLE
32766: EQUAL
32767: IFTRUE 32771
32769: GO 32793
32771: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32772: LD_VAR 0 1
32776: PPUSH
32777: LD_VAR 0 6
32781: PPUSH
32782: LD_VAR 0 7
32786: PPUSH
32787: CALL_OW 153
32791: GO 32824
32793: LD_INT 3
32795: DOUBLE
32796: EQUAL
32797: IFTRUE 32801
32799: GO 32823
32801: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32802: LD_VAR 0 1
32806: PPUSH
32807: LD_VAR 0 6
32811: PPUSH
32812: LD_VAR 0 7
32816: PPUSH
32817: CALL_OW 154
32821: GO 32824
32823: POP
// end ;
32824: LD_VAR 0 2
32828: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32829: LD_INT 0
32831: PPUSH
32832: PPUSH
32833: PPUSH
32834: PPUSH
32835: PPUSH
32836: PPUSH
// if not unit or not building then
32837: LD_VAR 0 1
32841: NOT
32842: PUSH
32843: LD_VAR 0 2
32847: NOT
32848: OR
32849: IFFALSE 32853
// exit ;
32851: GO 33011
// x := GetX ( building ) ;
32853: LD_ADDR_VAR 0 5
32857: PUSH
32858: LD_VAR 0 2
32862: PPUSH
32863: CALL_OW 250
32867: ST_TO_ADDR
// y := GetY ( building ) ;
32868: LD_ADDR_VAR 0 6
32872: PUSH
32873: LD_VAR 0 2
32877: PPUSH
32878: CALL_OW 251
32882: ST_TO_ADDR
// for i = 0 to 5 do
32883: LD_ADDR_VAR 0 4
32887: PUSH
32888: DOUBLE
32889: LD_INT 0
32891: DEC
32892: ST_TO_ADDR
32893: LD_INT 5
32895: PUSH
32896: FOR_TO
32897: IFFALSE 33009
// begin _x := ShiftX ( x , i , 3 ) ;
32899: LD_ADDR_VAR 0 7
32903: PUSH
32904: LD_VAR 0 5
32908: PPUSH
32909: LD_VAR 0 4
32913: PPUSH
32914: LD_INT 3
32916: PPUSH
32917: CALL_OW 272
32921: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32922: LD_ADDR_VAR 0 8
32926: PUSH
32927: LD_VAR 0 6
32931: PPUSH
32932: LD_VAR 0 4
32936: PPUSH
32937: LD_INT 3
32939: PPUSH
32940: CALL_OW 273
32944: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32945: LD_VAR 0 7
32949: PPUSH
32950: LD_VAR 0 8
32954: PPUSH
32955: CALL_OW 488
32959: NOT
32960: IFFALSE 32964
// continue ;
32962: GO 32896
// if HexInfo ( _x , _y ) = 0 then
32964: LD_VAR 0 7
32968: PPUSH
32969: LD_VAR 0 8
32973: PPUSH
32974: CALL_OW 428
32978: PUSH
32979: LD_INT 0
32981: EQUAL
32982: IFFALSE 33007
// begin ComMoveXY ( unit , _x , _y ) ;
32984: LD_VAR 0 1
32988: PPUSH
32989: LD_VAR 0 7
32993: PPUSH
32994: LD_VAR 0 8
32998: PPUSH
32999: CALL_OW 111
// exit ;
33003: POP
33004: POP
33005: GO 33011
// end ; end ;
33007: GO 32896
33009: POP
33010: POP
// end ;
33011: LD_VAR 0 3
33015: RET
// export function ScanBase ( side , base_area ) ; begin
33016: LD_INT 0
33018: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33019: LD_ADDR_VAR 0 3
33023: PUSH
33024: LD_VAR 0 2
33028: PPUSH
33029: LD_INT 81
33031: PUSH
33032: LD_VAR 0 1
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PPUSH
33041: CALL_OW 70
33045: ST_TO_ADDR
// end ;
33046: LD_VAR 0 3
33050: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33051: LD_INT 0
33053: PPUSH
33054: PPUSH
33055: PPUSH
33056: PPUSH
// result := false ;
33057: LD_ADDR_VAR 0 2
33061: PUSH
33062: LD_INT 0
33064: ST_TO_ADDR
// side := GetSide ( unit ) ;
33065: LD_ADDR_VAR 0 3
33069: PUSH
33070: LD_VAR 0 1
33074: PPUSH
33075: CALL_OW 255
33079: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33080: LD_ADDR_VAR 0 4
33084: PUSH
33085: LD_VAR 0 1
33089: PPUSH
33090: CALL_OW 248
33094: ST_TO_ADDR
// case nat of 1 :
33095: LD_VAR 0 4
33099: PUSH
33100: LD_INT 1
33102: DOUBLE
33103: EQUAL
33104: IFTRUE 33108
33106: GO 33119
33108: POP
// tech := tech_lassight ; 2 :
33109: LD_ADDR_VAR 0 5
33113: PUSH
33114: LD_INT 12
33116: ST_TO_ADDR
33117: GO 33158
33119: LD_INT 2
33121: DOUBLE
33122: EQUAL
33123: IFTRUE 33127
33125: GO 33138
33127: POP
// tech := tech_mortar ; 3 :
33128: LD_ADDR_VAR 0 5
33132: PUSH
33133: LD_INT 41
33135: ST_TO_ADDR
33136: GO 33158
33138: LD_INT 3
33140: DOUBLE
33141: EQUAL
33142: IFTRUE 33146
33144: GO 33157
33146: POP
// tech := tech_bazooka ; end ;
33147: LD_ADDR_VAR 0 5
33151: PUSH
33152: LD_INT 44
33154: ST_TO_ADDR
33155: GO 33158
33157: POP
// if Researched ( side , tech ) then
33158: LD_VAR 0 3
33162: PPUSH
33163: LD_VAR 0 5
33167: PPUSH
33168: CALL_OW 325
33172: IFFALSE 33199
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33174: LD_ADDR_VAR 0 2
33178: PUSH
33179: LD_INT 5
33181: PUSH
33182: LD_INT 8
33184: PUSH
33185: LD_INT 9
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: LIST
33192: PUSH
33193: LD_VAR 0 4
33197: ARRAY
33198: ST_TO_ADDR
// end ;
33199: LD_VAR 0 2
33203: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33204: LD_INT 0
33206: PPUSH
33207: PPUSH
33208: PPUSH
// if not mines then
33209: LD_VAR 0 2
33213: NOT
33214: IFFALSE 33218
// exit ;
33216: GO 33362
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33218: LD_ADDR_VAR 0 5
33222: PUSH
33223: LD_INT 81
33225: PUSH
33226: LD_VAR 0 1
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 3
33237: PUSH
33238: LD_INT 21
33240: PUSH
33241: LD_INT 3
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PPUSH
33256: CALL_OW 69
33260: ST_TO_ADDR
// for i in mines do
33261: LD_ADDR_VAR 0 4
33265: PUSH
33266: LD_VAR 0 2
33270: PUSH
33271: FOR_IN
33272: IFFALSE 33360
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33274: LD_VAR 0 4
33278: PUSH
33279: LD_INT 1
33281: ARRAY
33282: PPUSH
33283: LD_VAR 0 4
33287: PUSH
33288: LD_INT 2
33290: ARRAY
33291: PPUSH
33292: CALL_OW 458
33296: NOT
33297: IFFALSE 33301
// continue ;
33299: GO 33271
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33301: LD_VAR 0 4
33305: PUSH
33306: LD_INT 1
33308: ARRAY
33309: PPUSH
33310: LD_VAR 0 4
33314: PUSH
33315: LD_INT 2
33317: ARRAY
33318: PPUSH
33319: CALL_OW 428
33323: PUSH
33324: LD_VAR 0 5
33328: IN
33329: IFFALSE 33358
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33331: LD_VAR 0 4
33335: PUSH
33336: LD_INT 1
33338: ARRAY
33339: PPUSH
33340: LD_VAR 0 4
33344: PUSH
33345: LD_INT 2
33347: ARRAY
33348: PPUSH
33349: LD_VAR 0 1
33353: PPUSH
33354: CALL_OW 456
// end ;
33358: GO 33271
33360: POP
33361: POP
// end ;
33362: LD_VAR 0 3
33366: RET
// export function Count ( array ) ; var i ; begin
33367: LD_INT 0
33369: PPUSH
33370: PPUSH
// result := 0 ;
33371: LD_ADDR_VAR 0 2
33375: PUSH
33376: LD_INT 0
33378: ST_TO_ADDR
// for i in array do
33379: LD_ADDR_VAR 0 3
33383: PUSH
33384: LD_VAR 0 1
33388: PUSH
33389: FOR_IN
33390: IFFALSE 33414
// if i then
33392: LD_VAR 0 3
33396: IFFALSE 33412
// result := result + 1 ;
33398: LD_ADDR_VAR 0 2
33402: PUSH
33403: LD_VAR 0 2
33407: PUSH
33408: LD_INT 1
33410: PLUS
33411: ST_TO_ADDR
33412: GO 33389
33414: POP
33415: POP
// end ;
33416: LD_VAR 0 2
33420: RET
// export function IsEmpty ( building ) ; begin
33421: LD_INT 0
33423: PPUSH
// if not building then
33424: LD_VAR 0 1
33428: NOT
33429: IFFALSE 33433
// exit ;
33431: GO 33476
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33433: LD_ADDR_VAR 0 2
33437: PUSH
33438: LD_VAR 0 1
33442: PUSH
33443: LD_INT 22
33445: PUSH
33446: LD_VAR 0 1
33450: PPUSH
33451: CALL_OW 255
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 58
33462: PUSH
33463: EMPTY
33464: LIST
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PPUSH
33470: CALL_OW 69
33474: IN
33475: ST_TO_ADDR
// end ;
33476: LD_VAR 0 2
33480: RET
// export function IsNotFull ( building ) ; begin
33481: LD_INT 0
33483: PPUSH
// if not building then
33484: LD_VAR 0 1
33488: NOT
33489: IFFALSE 33493
// exit ;
33491: GO 33512
// result := UnitsInside ( building ) < 6 ;
33493: LD_ADDR_VAR 0 2
33497: PUSH
33498: LD_VAR 0 1
33502: PPUSH
33503: CALL_OW 313
33507: PUSH
33508: LD_INT 6
33510: LESS
33511: ST_TO_ADDR
// end ;
33512: LD_VAR 0 2
33516: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33517: LD_INT 0
33519: PPUSH
33520: PPUSH
33521: PPUSH
33522: PPUSH
// tmp := [ ] ;
33523: LD_ADDR_VAR 0 3
33527: PUSH
33528: EMPTY
33529: ST_TO_ADDR
// list := [ ] ;
33530: LD_ADDR_VAR 0 5
33534: PUSH
33535: EMPTY
33536: ST_TO_ADDR
// for i = 16 to 25 do
33537: LD_ADDR_VAR 0 4
33541: PUSH
33542: DOUBLE
33543: LD_INT 16
33545: DEC
33546: ST_TO_ADDR
33547: LD_INT 25
33549: PUSH
33550: FOR_TO
33551: IFFALSE 33624
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33553: LD_ADDR_VAR 0 3
33557: PUSH
33558: LD_VAR 0 3
33562: PUSH
33563: LD_INT 22
33565: PUSH
33566: LD_VAR 0 1
33570: PPUSH
33571: CALL_OW 255
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 91
33582: PUSH
33583: LD_VAR 0 1
33587: PUSH
33588: LD_INT 6
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 30
33598: PUSH
33599: LD_VAR 0 4
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: LIST
33612: PUSH
33613: EMPTY
33614: LIST
33615: PPUSH
33616: CALL_OW 69
33620: ADD
33621: ST_TO_ADDR
33622: GO 33550
33624: POP
33625: POP
// for i = 1 to tmp do
33626: LD_ADDR_VAR 0 4
33630: PUSH
33631: DOUBLE
33632: LD_INT 1
33634: DEC
33635: ST_TO_ADDR
33636: LD_VAR 0 3
33640: PUSH
33641: FOR_TO
33642: IFFALSE 33730
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33644: LD_ADDR_VAR 0 5
33648: PUSH
33649: LD_VAR 0 5
33653: PUSH
33654: LD_VAR 0 3
33658: PUSH
33659: LD_VAR 0 4
33663: ARRAY
33664: PPUSH
33665: CALL_OW 266
33669: PUSH
33670: LD_VAR 0 3
33674: PUSH
33675: LD_VAR 0 4
33679: ARRAY
33680: PPUSH
33681: CALL_OW 250
33685: PUSH
33686: LD_VAR 0 3
33690: PUSH
33691: LD_VAR 0 4
33695: ARRAY
33696: PPUSH
33697: CALL_OW 251
33701: PUSH
33702: LD_VAR 0 3
33706: PUSH
33707: LD_VAR 0 4
33711: ARRAY
33712: PPUSH
33713: CALL_OW 254
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: PUSH
33724: EMPTY
33725: LIST
33726: ADD
33727: ST_TO_ADDR
33728: GO 33641
33730: POP
33731: POP
// result := list ;
33732: LD_ADDR_VAR 0 2
33736: PUSH
33737: LD_VAR 0 5
33741: ST_TO_ADDR
// end ;
33742: LD_VAR 0 2
33746: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33747: LD_INT 0
33749: PPUSH
33750: PPUSH
33751: PPUSH
33752: PPUSH
33753: PPUSH
33754: PPUSH
33755: PPUSH
// if not factory then
33756: LD_VAR 0 1
33760: NOT
33761: IFFALSE 33765
// exit ;
33763: GO 34358
// if control = control_apeman then
33765: LD_VAR 0 4
33769: PUSH
33770: LD_INT 5
33772: EQUAL
33773: IFFALSE 33882
// begin tmp := UnitsInside ( factory ) ;
33775: LD_ADDR_VAR 0 8
33779: PUSH
33780: LD_VAR 0 1
33784: PPUSH
33785: CALL_OW 313
33789: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33790: LD_VAR 0 8
33794: PPUSH
33795: LD_INT 25
33797: PUSH
33798: LD_INT 12
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PPUSH
33805: CALL_OW 72
33809: NOT
33810: IFFALSE 33820
// control := control_manual ;
33812: LD_ADDR_VAR 0 4
33816: PUSH
33817: LD_INT 1
33819: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33820: LD_ADDR_VAR 0 8
33824: PUSH
33825: LD_VAR 0 1
33829: PPUSH
33830: CALL 33517 0 1
33834: ST_TO_ADDR
// if tmp then
33835: LD_VAR 0 8
33839: IFFALSE 33882
// begin for i in tmp do
33841: LD_ADDR_VAR 0 7
33845: PUSH
33846: LD_VAR 0 8
33850: PUSH
33851: FOR_IN
33852: IFFALSE 33880
// if i [ 1 ] = b_ext_radio then
33854: LD_VAR 0 7
33858: PUSH
33859: LD_INT 1
33861: ARRAY
33862: PUSH
33863: LD_INT 22
33865: EQUAL
33866: IFFALSE 33878
// begin control := control_remote ;
33868: LD_ADDR_VAR 0 4
33872: PUSH
33873: LD_INT 2
33875: ST_TO_ADDR
// break ;
33876: GO 33880
// end ;
33878: GO 33851
33880: POP
33881: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33882: LD_VAR 0 1
33886: PPUSH
33887: LD_VAR 0 2
33891: PPUSH
33892: LD_VAR 0 3
33896: PPUSH
33897: LD_VAR 0 4
33901: PPUSH
33902: LD_VAR 0 5
33906: PPUSH
33907: CALL_OW 448
33911: IFFALSE 33946
// begin result := [ chassis , engine , control , weapon ] ;
33913: LD_ADDR_VAR 0 6
33917: PUSH
33918: LD_VAR 0 2
33922: PUSH
33923: LD_VAR 0 3
33927: PUSH
33928: LD_VAR 0 4
33932: PUSH
33933: LD_VAR 0 5
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: ST_TO_ADDR
// exit ;
33944: GO 34358
// end ; _chassis := AvailableChassisList ( factory ) ;
33946: LD_ADDR_VAR 0 9
33950: PUSH
33951: LD_VAR 0 1
33955: PPUSH
33956: CALL_OW 475
33960: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33961: LD_ADDR_VAR 0 11
33965: PUSH
33966: LD_VAR 0 1
33970: PPUSH
33971: CALL_OW 476
33975: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33976: LD_ADDR_VAR 0 12
33980: PUSH
33981: LD_VAR 0 1
33985: PPUSH
33986: CALL_OW 477
33990: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33991: LD_ADDR_VAR 0 10
33995: PUSH
33996: LD_VAR 0 1
34000: PPUSH
34001: CALL_OW 478
34005: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34006: LD_VAR 0 9
34010: NOT
34011: PUSH
34012: LD_VAR 0 11
34016: NOT
34017: OR
34018: PUSH
34019: LD_VAR 0 12
34023: NOT
34024: OR
34025: PUSH
34026: LD_VAR 0 10
34030: NOT
34031: OR
34032: IFFALSE 34067
// begin result := [ chassis , engine , control , weapon ] ;
34034: LD_ADDR_VAR 0 6
34038: PUSH
34039: LD_VAR 0 2
34043: PUSH
34044: LD_VAR 0 3
34048: PUSH
34049: LD_VAR 0 4
34053: PUSH
34054: LD_VAR 0 5
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: ST_TO_ADDR
// exit ;
34065: GO 34358
// end ; if not chassis in _chassis then
34067: LD_VAR 0 2
34071: PUSH
34072: LD_VAR 0 9
34076: IN
34077: NOT
34078: IFFALSE 34104
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34080: LD_ADDR_VAR 0 2
34084: PUSH
34085: LD_VAR 0 9
34089: PUSH
34090: LD_INT 1
34092: PPUSH
34093: LD_VAR 0 9
34097: PPUSH
34098: CALL_OW 12
34102: ARRAY
34103: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34104: LD_VAR 0 2
34108: PPUSH
34109: LD_VAR 0 3
34113: PPUSH
34114: CALL 34363 0 2
34118: NOT
34119: IFFALSE 34178
// repeat engine := _engine [ 1 ] ;
34121: LD_ADDR_VAR 0 3
34125: PUSH
34126: LD_VAR 0 11
34130: PUSH
34131: LD_INT 1
34133: ARRAY
34134: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34135: LD_ADDR_VAR 0 11
34139: PUSH
34140: LD_VAR 0 11
34144: PPUSH
34145: LD_INT 1
34147: PPUSH
34148: CALL_OW 3
34152: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34153: LD_VAR 0 2
34157: PPUSH
34158: LD_VAR 0 3
34162: PPUSH
34163: CALL 34363 0 2
34167: PUSH
34168: LD_VAR 0 11
34172: PUSH
34173: EMPTY
34174: EQUAL
34175: OR
34176: IFFALSE 34121
// if not control in _control then
34178: LD_VAR 0 4
34182: PUSH
34183: LD_VAR 0 12
34187: IN
34188: NOT
34189: IFFALSE 34215
// control := _control [ rand ( 1 , _control ) ] ;
34191: LD_ADDR_VAR 0 4
34195: PUSH
34196: LD_VAR 0 12
34200: PUSH
34201: LD_INT 1
34203: PPUSH
34204: LD_VAR 0 12
34208: PPUSH
34209: CALL_OW 12
34213: ARRAY
34214: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34215: LD_VAR 0 2
34219: PPUSH
34220: LD_VAR 0 5
34224: PPUSH
34225: CALL 34583 0 2
34229: NOT
34230: IFFALSE 34289
// repeat weapon := _weapon [ 1 ] ;
34232: LD_ADDR_VAR 0 5
34236: PUSH
34237: LD_VAR 0 10
34241: PUSH
34242: LD_INT 1
34244: ARRAY
34245: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34246: LD_ADDR_VAR 0 10
34250: PUSH
34251: LD_VAR 0 10
34255: PPUSH
34256: LD_INT 1
34258: PPUSH
34259: CALL_OW 3
34263: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34264: LD_VAR 0 2
34268: PPUSH
34269: LD_VAR 0 5
34273: PPUSH
34274: CALL 34583 0 2
34278: PUSH
34279: LD_VAR 0 10
34283: PUSH
34284: EMPTY
34285: EQUAL
34286: OR
34287: IFFALSE 34232
// result := [ ] ;
34289: LD_ADDR_VAR 0 6
34293: PUSH
34294: EMPTY
34295: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34296: LD_VAR 0 1
34300: PPUSH
34301: LD_VAR 0 2
34305: PPUSH
34306: LD_VAR 0 3
34310: PPUSH
34311: LD_VAR 0 4
34315: PPUSH
34316: LD_VAR 0 5
34320: PPUSH
34321: CALL_OW 448
34325: IFFALSE 34358
// result := [ chassis , engine , control , weapon ] ;
34327: LD_ADDR_VAR 0 6
34331: PUSH
34332: LD_VAR 0 2
34336: PUSH
34337: LD_VAR 0 3
34341: PUSH
34342: LD_VAR 0 4
34346: PUSH
34347: LD_VAR 0 5
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: ST_TO_ADDR
// end ;
34358: LD_VAR 0 6
34362: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34363: LD_INT 0
34365: PPUSH
// if not chassis or not engine then
34366: LD_VAR 0 1
34370: NOT
34371: PUSH
34372: LD_VAR 0 2
34376: NOT
34377: OR
34378: IFFALSE 34382
// exit ;
34380: GO 34578
// case engine of engine_solar :
34382: LD_VAR 0 2
34386: PUSH
34387: LD_INT 2
34389: DOUBLE
34390: EQUAL
34391: IFTRUE 34395
34393: GO 34433
34395: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34396: LD_ADDR_VAR 0 3
34400: PUSH
34401: LD_INT 11
34403: PUSH
34404: LD_INT 12
34406: PUSH
34407: LD_INT 13
34409: PUSH
34410: LD_INT 14
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: LD_INT 2
34418: PUSH
34419: LD_INT 3
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: ST_TO_ADDR
34431: GO 34562
34433: LD_INT 1
34435: DOUBLE
34436: EQUAL
34437: IFTRUE 34441
34439: GO 34503
34441: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34442: LD_ADDR_VAR 0 3
34446: PUSH
34447: LD_INT 11
34449: PUSH
34450: LD_INT 12
34452: PUSH
34453: LD_INT 13
34455: PUSH
34456: LD_INT 14
34458: PUSH
34459: LD_INT 1
34461: PUSH
34462: LD_INT 2
34464: PUSH
34465: LD_INT 3
34467: PUSH
34468: LD_INT 4
34470: PUSH
34471: LD_INT 5
34473: PUSH
34474: LD_INT 21
34476: PUSH
34477: LD_INT 23
34479: PUSH
34480: LD_INT 22
34482: PUSH
34483: LD_INT 24
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: ST_TO_ADDR
34501: GO 34562
34503: LD_INT 3
34505: DOUBLE
34506: EQUAL
34507: IFTRUE 34511
34509: GO 34561
34511: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34512: LD_ADDR_VAR 0 3
34516: PUSH
34517: LD_INT 13
34519: PUSH
34520: LD_INT 14
34522: PUSH
34523: LD_INT 2
34525: PUSH
34526: LD_INT 3
34528: PUSH
34529: LD_INT 4
34531: PUSH
34532: LD_INT 5
34534: PUSH
34535: LD_INT 21
34537: PUSH
34538: LD_INT 22
34540: PUSH
34541: LD_INT 23
34543: PUSH
34544: LD_INT 24
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: ST_TO_ADDR
34559: GO 34562
34561: POP
// result := ( chassis in result ) ;
34562: LD_ADDR_VAR 0 3
34566: PUSH
34567: LD_VAR 0 1
34571: PUSH
34572: LD_VAR 0 3
34576: IN
34577: ST_TO_ADDR
// end ;
34578: LD_VAR 0 3
34582: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34583: LD_INT 0
34585: PPUSH
// if not chassis or not weapon then
34586: LD_VAR 0 1
34590: NOT
34591: PUSH
34592: LD_VAR 0 2
34596: NOT
34597: OR
34598: IFFALSE 34602
// exit ;
34600: GO 35664
// case weapon of us_machine_gun :
34602: LD_VAR 0 2
34606: PUSH
34607: LD_INT 2
34609: DOUBLE
34610: EQUAL
34611: IFTRUE 34615
34613: GO 34645
34615: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34616: LD_ADDR_VAR 0 3
34620: PUSH
34621: LD_INT 1
34623: PUSH
34624: LD_INT 2
34626: PUSH
34627: LD_INT 3
34629: PUSH
34630: LD_INT 4
34632: PUSH
34633: LD_INT 5
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: ST_TO_ADDR
34643: GO 35648
34645: LD_INT 3
34647: DOUBLE
34648: EQUAL
34649: IFTRUE 34653
34651: GO 34683
34653: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34654: LD_ADDR_VAR 0 3
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: LD_INT 2
34664: PUSH
34665: LD_INT 3
34667: PUSH
34668: LD_INT 4
34670: PUSH
34671: LD_INT 5
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: ST_TO_ADDR
34681: GO 35648
34683: LD_INT 11
34685: DOUBLE
34686: EQUAL
34687: IFTRUE 34691
34689: GO 34721
34691: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34692: LD_ADDR_VAR 0 3
34696: PUSH
34697: LD_INT 1
34699: PUSH
34700: LD_INT 2
34702: PUSH
34703: LD_INT 3
34705: PUSH
34706: LD_INT 4
34708: PUSH
34709: LD_INT 5
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: ST_TO_ADDR
34719: GO 35648
34721: LD_INT 4
34723: DOUBLE
34724: EQUAL
34725: IFTRUE 34729
34727: GO 34755
34729: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34730: LD_ADDR_VAR 0 3
34734: PUSH
34735: LD_INT 2
34737: PUSH
34738: LD_INT 3
34740: PUSH
34741: LD_INT 4
34743: PUSH
34744: LD_INT 5
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: ST_TO_ADDR
34753: GO 35648
34755: LD_INT 5
34757: DOUBLE
34758: EQUAL
34759: IFTRUE 34763
34761: GO 34789
34763: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34764: LD_ADDR_VAR 0 3
34768: PUSH
34769: LD_INT 2
34771: PUSH
34772: LD_INT 3
34774: PUSH
34775: LD_INT 4
34777: PUSH
34778: LD_INT 5
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: ST_TO_ADDR
34787: GO 35648
34789: LD_INT 9
34791: DOUBLE
34792: EQUAL
34793: IFTRUE 34797
34795: GO 34823
34797: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34798: LD_ADDR_VAR 0 3
34802: PUSH
34803: LD_INT 2
34805: PUSH
34806: LD_INT 3
34808: PUSH
34809: LD_INT 4
34811: PUSH
34812: LD_INT 5
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: ST_TO_ADDR
34821: GO 35648
34823: LD_INT 7
34825: DOUBLE
34826: EQUAL
34827: IFTRUE 34831
34829: GO 34857
34831: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34832: LD_ADDR_VAR 0 3
34836: PUSH
34837: LD_INT 2
34839: PUSH
34840: LD_INT 3
34842: PUSH
34843: LD_INT 4
34845: PUSH
34846: LD_INT 5
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: ST_TO_ADDR
34855: GO 35648
34857: LD_INT 12
34859: DOUBLE
34860: EQUAL
34861: IFTRUE 34865
34863: GO 34891
34865: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34866: LD_ADDR_VAR 0 3
34870: PUSH
34871: LD_INT 2
34873: PUSH
34874: LD_INT 3
34876: PUSH
34877: LD_INT 4
34879: PUSH
34880: LD_INT 5
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: ST_TO_ADDR
34889: GO 35648
34891: LD_INT 13
34893: DOUBLE
34894: EQUAL
34895: IFTRUE 34899
34897: GO 34925
34899: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34900: LD_ADDR_VAR 0 3
34904: PUSH
34905: LD_INT 2
34907: PUSH
34908: LD_INT 3
34910: PUSH
34911: LD_INT 4
34913: PUSH
34914: LD_INT 5
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: ST_TO_ADDR
34923: GO 35648
34925: LD_INT 14
34927: DOUBLE
34928: EQUAL
34929: IFTRUE 34933
34931: GO 34951
34933: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34934: LD_ADDR_VAR 0 3
34938: PUSH
34939: LD_INT 4
34941: PUSH
34942: LD_INT 5
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: ST_TO_ADDR
34949: GO 35648
34951: LD_INT 6
34953: DOUBLE
34954: EQUAL
34955: IFTRUE 34959
34957: GO 34977
34959: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34960: LD_ADDR_VAR 0 3
34964: PUSH
34965: LD_INT 4
34967: PUSH
34968: LD_INT 5
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: ST_TO_ADDR
34975: GO 35648
34977: LD_INT 10
34979: DOUBLE
34980: EQUAL
34981: IFTRUE 34985
34983: GO 35003
34985: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34986: LD_ADDR_VAR 0 3
34990: PUSH
34991: LD_INT 4
34993: PUSH
34994: LD_INT 5
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: ST_TO_ADDR
35001: GO 35648
35003: LD_INT 22
35005: DOUBLE
35006: EQUAL
35007: IFTRUE 35011
35009: GO 35037
35011: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35012: LD_ADDR_VAR 0 3
35016: PUSH
35017: LD_INT 11
35019: PUSH
35020: LD_INT 12
35022: PUSH
35023: LD_INT 13
35025: PUSH
35026: LD_INT 14
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: ST_TO_ADDR
35035: GO 35648
35037: LD_INT 23
35039: DOUBLE
35040: EQUAL
35041: IFTRUE 35045
35043: GO 35071
35045: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35046: LD_ADDR_VAR 0 3
35050: PUSH
35051: LD_INT 11
35053: PUSH
35054: LD_INT 12
35056: PUSH
35057: LD_INT 13
35059: PUSH
35060: LD_INT 14
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: ST_TO_ADDR
35069: GO 35648
35071: LD_INT 24
35073: DOUBLE
35074: EQUAL
35075: IFTRUE 35079
35077: GO 35105
35079: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35080: LD_ADDR_VAR 0 3
35084: PUSH
35085: LD_INT 11
35087: PUSH
35088: LD_INT 12
35090: PUSH
35091: LD_INT 13
35093: PUSH
35094: LD_INT 14
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: ST_TO_ADDR
35103: GO 35648
35105: LD_INT 30
35107: DOUBLE
35108: EQUAL
35109: IFTRUE 35113
35111: GO 35139
35113: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35114: LD_ADDR_VAR 0 3
35118: PUSH
35119: LD_INT 11
35121: PUSH
35122: LD_INT 12
35124: PUSH
35125: LD_INT 13
35127: PUSH
35128: LD_INT 14
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: ST_TO_ADDR
35137: GO 35648
35139: LD_INT 25
35141: DOUBLE
35142: EQUAL
35143: IFTRUE 35147
35145: GO 35165
35147: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35148: LD_ADDR_VAR 0 3
35152: PUSH
35153: LD_INT 13
35155: PUSH
35156: LD_INT 14
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: ST_TO_ADDR
35163: GO 35648
35165: LD_INT 27
35167: DOUBLE
35168: EQUAL
35169: IFTRUE 35173
35171: GO 35191
35173: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35174: LD_ADDR_VAR 0 3
35178: PUSH
35179: LD_INT 13
35181: PUSH
35182: LD_INT 14
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: ST_TO_ADDR
35189: GO 35648
35191: LD_EXP 49
35195: DOUBLE
35196: EQUAL
35197: IFTRUE 35201
35199: GO 35227
35201: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35202: LD_ADDR_VAR 0 3
35206: PUSH
35207: LD_INT 11
35209: PUSH
35210: LD_INT 12
35212: PUSH
35213: LD_INT 13
35215: PUSH
35216: LD_INT 14
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: ST_TO_ADDR
35225: GO 35648
35227: LD_INT 28
35229: DOUBLE
35230: EQUAL
35231: IFTRUE 35235
35233: GO 35253
35235: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35236: LD_ADDR_VAR 0 3
35240: PUSH
35241: LD_INT 13
35243: PUSH
35244: LD_INT 14
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: ST_TO_ADDR
35251: GO 35648
35253: LD_INT 29
35255: DOUBLE
35256: EQUAL
35257: IFTRUE 35261
35259: GO 35279
35261: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35262: LD_ADDR_VAR 0 3
35266: PUSH
35267: LD_INT 13
35269: PUSH
35270: LD_INT 14
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: ST_TO_ADDR
35277: GO 35648
35279: LD_INT 31
35281: DOUBLE
35282: EQUAL
35283: IFTRUE 35287
35285: GO 35305
35287: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35288: LD_ADDR_VAR 0 3
35292: PUSH
35293: LD_INT 13
35295: PUSH
35296: LD_INT 14
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: ST_TO_ADDR
35303: GO 35648
35305: LD_INT 26
35307: DOUBLE
35308: EQUAL
35309: IFTRUE 35313
35311: GO 35331
35313: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35314: LD_ADDR_VAR 0 3
35318: PUSH
35319: LD_INT 13
35321: PUSH
35322: LD_INT 14
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: ST_TO_ADDR
35329: GO 35648
35331: LD_INT 42
35333: DOUBLE
35334: EQUAL
35335: IFTRUE 35339
35337: GO 35365
35339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35340: LD_ADDR_VAR 0 3
35344: PUSH
35345: LD_INT 21
35347: PUSH
35348: LD_INT 22
35350: PUSH
35351: LD_INT 23
35353: PUSH
35354: LD_INT 24
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: ST_TO_ADDR
35363: GO 35648
35365: LD_INT 43
35367: DOUBLE
35368: EQUAL
35369: IFTRUE 35373
35371: GO 35399
35373: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35374: LD_ADDR_VAR 0 3
35378: PUSH
35379: LD_INT 21
35381: PUSH
35382: LD_INT 22
35384: PUSH
35385: LD_INT 23
35387: PUSH
35388: LD_INT 24
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: ST_TO_ADDR
35397: GO 35648
35399: LD_INT 44
35401: DOUBLE
35402: EQUAL
35403: IFTRUE 35407
35405: GO 35433
35407: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35408: LD_ADDR_VAR 0 3
35412: PUSH
35413: LD_INT 21
35415: PUSH
35416: LD_INT 22
35418: PUSH
35419: LD_INT 23
35421: PUSH
35422: LD_INT 24
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: ST_TO_ADDR
35431: GO 35648
35433: LD_INT 45
35435: DOUBLE
35436: EQUAL
35437: IFTRUE 35441
35439: GO 35467
35441: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35442: LD_ADDR_VAR 0 3
35446: PUSH
35447: LD_INT 21
35449: PUSH
35450: LD_INT 22
35452: PUSH
35453: LD_INT 23
35455: PUSH
35456: LD_INT 24
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: ST_TO_ADDR
35465: GO 35648
35467: LD_INT 49
35469: DOUBLE
35470: EQUAL
35471: IFTRUE 35475
35473: GO 35501
35475: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35476: LD_ADDR_VAR 0 3
35480: PUSH
35481: LD_INT 21
35483: PUSH
35484: LD_INT 22
35486: PUSH
35487: LD_INT 23
35489: PUSH
35490: LD_INT 24
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: ST_TO_ADDR
35499: GO 35648
35501: LD_INT 51
35503: DOUBLE
35504: EQUAL
35505: IFTRUE 35509
35507: GO 35535
35509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35510: LD_ADDR_VAR 0 3
35514: PUSH
35515: LD_INT 21
35517: PUSH
35518: LD_INT 22
35520: PUSH
35521: LD_INT 23
35523: PUSH
35524: LD_INT 24
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: ST_TO_ADDR
35533: GO 35648
35535: LD_INT 52
35537: DOUBLE
35538: EQUAL
35539: IFTRUE 35543
35541: GO 35569
35543: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35544: LD_ADDR_VAR 0 3
35548: PUSH
35549: LD_INT 21
35551: PUSH
35552: LD_INT 22
35554: PUSH
35555: LD_INT 23
35557: PUSH
35558: LD_INT 24
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: ST_TO_ADDR
35567: GO 35648
35569: LD_INT 53
35571: DOUBLE
35572: EQUAL
35573: IFTRUE 35577
35575: GO 35595
35577: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35578: LD_ADDR_VAR 0 3
35582: PUSH
35583: LD_INT 23
35585: PUSH
35586: LD_INT 24
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: ST_TO_ADDR
35593: GO 35648
35595: LD_INT 46
35597: DOUBLE
35598: EQUAL
35599: IFTRUE 35603
35601: GO 35621
35603: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35604: LD_ADDR_VAR 0 3
35608: PUSH
35609: LD_INT 23
35611: PUSH
35612: LD_INT 24
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: ST_TO_ADDR
35619: GO 35648
35621: LD_INT 47
35623: DOUBLE
35624: EQUAL
35625: IFTRUE 35629
35627: GO 35647
35629: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35630: LD_ADDR_VAR 0 3
35634: PUSH
35635: LD_INT 23
35637: PUSH
35638: LD_INT 24
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: ST_TO_ADDR
35645: GO 35648
35647: POP
// result := ( chassis in result ) ;
35648: LD_ADDR_VAR 0 3
35652: PUSH
35653: LD_VAR 0 1
35657: PUSH
35658: LD_VAR 0 3
35662: IN
35663: ST_TO_ADDR
// end ;
35664: LD_VAR 0 3
35668: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35669: LD_INT 0
35671: PPUSH
35672: PPUSH
35673: PPUSH
35674: PPUSH
35675: PPUSH
35676: PPUSH
35677: PPUSH
// result := array ;
35678: LD_ADDR_VAR 0 5
35682: PUSH
35683: LD_VAR 0 1
35687: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35688: LD_VAR 0 1
35692: NOT
35693: PUSH
35694: LD_VAR 0 2
35698: NOT
35699: OR
35700: PUSH
35701: LD_VAR 0 3
35705: NOT
35706: OR
35707: PUSH
35708: LD_VAR 0 2
35712: PUSH
35713: LD_VAR 0 1
35717: GREATER
35718: OR
35719: PUSH
35720: LD_VAR 0 3
35724: PUSH
35725: LD_VAR 0 1
35729: GREATER
35730: OR
35731: IFFALSE 35735
// exit ;
35733: GO 36031
// if direction then
35735: LD_VAR 0 4
35739: IFFALSE 35803
// begin d := 1 ;
35741: LD_ADDR_VAR 0 9
35745: PUSH
35746: LD_INT 1
35748: ST_TO_ADDR
// if i_from > i_to then
35749: LD_VAR 0 2
35753: PUSH
35754: LD_VAR 0 3
35758: GREATER
35759: IFFALSE 35785
// length := ( array - i_from ) + i_to else
35761: LD_ADDR_VAR 0 11
35765: PUSH
35766: LD_VAR 0 1
35770: PUSH
35771: LD_VAR 0 2
35775: MINUS
35776: PUSH
35777: LD_VAR 0 3
35781: PLUS
35782: ST_TO_ADDR
35783: GO 35801
// length := i_to - i_from ;
35785: LD_ADDR_VAR 0 11
35789: PUSH
35790: LD_VAR 0 3
35794: PUSH
35795: LD_VAR 0 2
35799: MINUS
35800: ST_TO_ADDR
// end else
35801: GO 35864
// begin d := - 1 ;
35803: LD_ADDR_VAR 0 9
35807: PUSH
35808: LD_INT 1
35810: NEG
35811: ST_TO_ADDR
// if i_from > i_to then
35812: LD_VAR 0 2
35816: PUSH
35817: LD_VAR 0 3
35821: GREATER
35822: IFFALSE 35842
// length := i_from - i_to else
35824: LD_ADDR_VAR 0 11
35828: PUSH
35829: LD_VAR 0 2
35833: PUSH
35834: LD_VAR 0 3
35838: MINUS
35839: ST_TO_ADDR
35840: GO 35864
// length := ( array - i_to ) + i_from ;
35842: LD_ADDR_VAR 0 11
35846: PUSH
35847: LD_VAR 0 1
35851: PUSH
35852: LD_VAR 0 3
35856: MINUS
35857: PUSH
35858: LD_VAR 0 2
35862: PLUS
35863: ST_TO_ADDR
// end ; if not length then
35864: LD_VAR 0 11
35868: NOT
35869: IFFALSE 35873
// exit ;
35871: GO 36031
// tmp := array ;
35873: LD_ADDR_VAR 0 10
35877: PUSH
35878: LD_VAR 0 1
35882: ST_TO_ADDR
// for i = 1 to length do
35883: LD_ADDR_VAR 0 6
35887: PUSH
35888: DOUBLE
35889: LD_INT 1
35891: DEC
35892: ST_TO_ADDR
35893: LD_VAR 0 11
35897: PUSH
35898: FOR_TO
35899: IFFALSE 36019
// begin for j = 1 to array do
35901: LD_ADDR_VAR 0 7
35905: PUSH
35906: DOUBLE
35907: LD_INT 1
35909: DEC
35910: ST_TO_ADDR
35911: LD_VAR 0 1
35915: PUSH
35916: FOR_TO
35917: IFFALSE 36005
// begin k := j + d ;
35919: LD_ADDR_VAR 0 8
35923: PUSH
35924: LD_VAR 0 7
35928: PUSH
35929: LD_VAR 0 9
35933: PLUS
35934: ST_TO_ADDR
// if k > array then
35935: LD_VAR 0 8
35939: PUSH
35940: LD_VAR 0 1
35944: GREATER
35945: IFFALSE 35955
// k := 1 ;
35947: LD_ADDR_VAR 0 8
35951: PUSH
35952: LD_INT 1
35954: ST_TO_ADDR
// if not k then
35955: LD_VAR 0 8
35959: NOT
35960: IFFALSE 35972
// k := array ;
35962: LD_ADDR_VAR 0 8
35966: PUSH
35967: LD_VAR 0 1
35971: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35972: LD_ADDR_VAR 0 10
35976: PUSH
35977: LD_VAR 0 10
35981: PPUSH
35982: LD_VAR 0 8
35986: PPUSH
35987: LD_VAR 0 1
35991: PUSH
35992: LD_VAR 0 7
35996: ARRAY
35997: PPUSH
35998: CALL_OW 1
36002: ST_TO_ADDR
// end ;
36003: GO 35916
36005: POP
36006: POP
// array := tmp ;
36007: LD_ADDR_VAR 0 1
36011: PUSH
36012: LD_VAR 0 10
36016: ST_TO_ADDR
// end ;
36017: GO 35898
36019: POP
36020: POP
// result := array ;
36021: LD_ADDR_VAR 0 5
36025: PUSH
36026: LD_VAR 0 1
36030: ST_TO_ADDR
// end ;
36031: LD_VAR 0 5
36035: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36036: LD_INT 0
36038: PPUSH
36039: PPUSH
// result := 0 ;
36040: LD_ADDR_VAR 0 3
36044: PUSH
36045: LD_INT 0
36047: ST_TO_ADDR
// if not array or not value in array then
36048: LD_VAR 0 1
36052: NOT
36053: PUSH
36054: LD_VAR 0 2
36058: PUSH
36059: LD_VAR 0 1
36063: IN
36064: NOT
36065: OR
36066: IFFALSE 36070
// exit ;
36068: GO 36124
// for i = 1 to array do
36070: LD_ADDR_VAR 0 4
36074: PUSH
36075: DOUBLE
36076: LD_INT 1
36078: DEC
36079: ST_TO_ADDR
36080: LD_VAR 0 1
36084: PUSH
36085: FOR_TO
36086: IFFALSE 36122
// if value = array [ i ] then
36088: LD_VAR 0 2
36092: PUSH
36093: LD_VAR 0 1
36097: PUSH
36098: LD_VAR 0 4
36102: ARRAY
36103: EQUAL
36104: IFFALSE 36120
// begin result := i ;
36106: LD_ADDR_VAR 0 3
36110: PUSH
36111: LD_VAR 0 4
36115: ST_TO_ADDR
// exit ;
36116: POP
36117: POP
36118: GO 36124
// end ;
36120: GO 36085
36122: POP
36123: POP
// end ;
36124: LD_VAR 0 3
36128: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36129: LD_INT 0
36131: PPUSH
// vc_chassis := chassis ;
36132: LD_ADDR_OWVAR 37
36136: PUSH
36137: LD_VAR 0 1
36141: ST_TO_ADDR
// vc_engine := engine ;
36142: LD_ADDR_OWVAR 39
36146: PUSH
36147: LD_VAR 0 2
36151: ST_TO_ADDR
// vc_control := control ;
36152: LD_ADDR_OWVAR 38
36156: PUSH
36157: LD_VAR 0 3
36161: ST_TO_ADDR
// vc_weapon := weapon ;
36162: LD_ADDR_OWVAR 40
36166: PUSH
36167: LD_VAR 0 4
36171: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36172: LD_ADDR_OWVAR 41
36176: PUSH
36177: LD_VAR 0 5
36181: ST_TO_ADDR
// end ;
36182: LD_VAR 0 6
36186: RET
// export function WantPlant ( unit ) ; var task ; begin
36187: LD_INT 0
36189: PPUSH
36190: PPUSH
// result := false ;
36191: LD_ADDR_VAR 0 2
36195: PUSH
36196: LD_INT 0
36198: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36199: LD_ADDR_VAR 0 3
36203: PUSH
36204: LD_VAR 0 1
36208: PPUSH
36209: CALL_OW 437
36213: ST_TO_ADDR
// if task then
36214: LD_VAR 0 3
36218: IFFALSE 36246
// if task [ 1 ] [ 1 ] = p then
36220: LD_VAR 0 3
36224: PUSH
36225: LD_INT 1
36227: ARRAY
36228: PUSH
36229: LD_INT 1
36231: ARRAY
36232: PUSH
36233: LD_STRING p
36235: EQUAL
36236: IFFALSE 36246
// result := true ;
36238: LD_ADDR_VAR 0 2
36242: PUSH
36243: LD_INT 1
36245: ST_TO_ADDR
// end ;
36246: LD_VAR 0 2
36250: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36251: LD_INT 0
36253: PPUSH
36254: PPUSH
36255: PPUSH
36256: PPUSH
// if pos < 1 then
36257: LD_VAR 0 2
36261: PUSH
36262: LD_INT 1
36264: LESS
36265: IFFALSE 36269
// exit ;
36267: GO 36572
// if pos = 1 then
36269: LD_VAR 0 2
36273: PUSH
36274: LD_INT 1
36276: EQUAL
36277: IFFALSE 36310
// result := Replace ( arr , pos [ 1 ] , value ) else
36279: LD_ADDR_VAR 0 4
36283: PUSH
36284: LD_VAR 0 1
36288: PPUSH
36289: LD_VAR 0 2
36293: PUSH
36294: LD_INT 1
36296: ARRAY
36297: PPUSH
36298: LD_VAR 0 3
36302: PPUSH
36303: CALL_OW 1
36307: ST_TO_ADDR
36308: GO 36572
// begin tmp := arr ;
36310: LD_ADDR_VAR 0 6
36314: PUSH
36315: LD_VAR 0 1
36319: ST_TO_ADDR
// s_arr := [ tmp ] ;
36320: LD_ADDR_VAR 0 7
36324: PUSH
36325: LD_VAR 0 6
36329: PUSH
36330: EMPTY
36331: LIST
36332: ST_TO_ADDR
// for i = 1 to pos - 1 do
36333: LD_ADDR_VAR 0 5
36337: PUSH
36338: DOUBLE
36339: LD_INT 1
36341: DEC
36342: ST_TO_ADDR
36343: LD_VAR 0 2
36347: PUSH
36348: LD_INT 1
36350: MINUS
36351: PUSH
36352: FOR_TO
36353: IFFALSE 36398
// begin tmp := tmp [ pos [ i ] ] ;
36355: LD_ADDR_VAR 0 6
36359: PUSH
36360: LD_VAR 0 6
36364: PUSH
36365: LD_VAR 0 2
36369: PUSH
36370: LD_VAR 0 5
36374: ARRAY
36375: ARRAY
36376: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36377: LD_ADDR_VAR 0 7
36381: PUSH
36382: LD_VAR 0 7
36386: PUSH
36387: LD_VAR 0 6
36391: PUSH
36392: EMPTY
36393: LIST
36394: ADD
36395: ST_TO_ADDR
// end ;
36396: GO 36352
36398: POP
36399: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36400: LD_ADDR_VAR 0 6
36404: PUSH
36405: LD_VAR 0 6
36409: PPUSH
36410: LD_VAR 0 2
36414: PUSH
36415: LD_VAR 0 2
36419: ARRAY
36420: PPUSH
36421: LD_VAR 0 3
36425: PPUSH
36426: CALL_OW 1
36430: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36431: LD_ADDR_VAR 0 7
36435: PUSH
36436: LD_VAR 0 7
36440: PPUSH
36441: LD_VAR 0 7
36445: PPUSH
36446: LD_VAR 0 6
36450: PPUSH
36451: CALL_OW 1
36455: ST_TO_ADDR
// for i = s_arr downto 2 do
36456: LD_ADDR_VAR 0 5
36460: PUSH
36461: DOUBLE
36462: LD_VAR 0 7
36466: INC
36467: ST_TO_ADDR
36468: LD_INT 2
36470: PUSH
36471: FOR_DOWNTO
36472: IFFALSE 36556
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36474: LD_ADDR_VAR 0 6
36478: PUSH
36479: LD_VAR 0 7
36483: PUSH
36484: LD_VAR 0 5
36488: PUSH
36489: LD_INT 1
36491: MINUS
36492: ARRAY
36493: PPUSH
36494: LD_VAR 0 2
36498: PUSH
36499: LD_VAR 0 5
36503: PUSH
36504: LD_INT 1
36506: MINUS
36507: ARRAY
36508: PPUSH
36509: LD_VAR 0 7
36513: PUSH
36514: LD_VAR 0 5
36518: ARRAY
36519: PPUSH
36520: CALL_OW 1
36524: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36525: LD_ADDR_VAR 0 7
36529: PUSH
36530: LD_VAR 0 7
36534: PPUSH
36535: LD_VAR 0 5
36539: PUSH
36540: LD_INT 1
36542: MINUS
36543: PPUSH
36544: LD_VAR 0 6
36548: PPUSH
36549: CALL_OW 1
36553: ST_TO_ADDR
// end ;
36554: GO 36471
36556: POP
36557: POP
// result := s_arr [ 1 ] ;
36558: LD_ADDR_VAR 0 4
36562: PUSH
36563: LD_VAR 0 7
36567: PUSH
36568: LD_INT 1
36570: ARRAY
36571: ST_TO_ADDR
// end ; end ;
36572: LD_VAR 0 4
36576: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36577: LD_INT 0
36579: PPUSH
36580: PPUSH
// if not list then
36581: LD_VAR 0 1
36585: NOT
36586: IFFALSE 36590
// exit ;
36588: GO 36681
// i := list [ pos1 ] ;
36590: LD_ADDR_VAR 0 5
36594: PUSH
36595: LD_VAR 0 1
36599: PUSH
36600: LD_VAR 0 2
36604: ARRAY
36605: ST_TO_ADDR
// if not i then
36606: LD_VAR 0 5
36610: NOT
36611: IFFALSE 36615
// exit ;
36613: GO 36681
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36615: LD_ADDR_VAR 0 1
36619: PUSH
36620: LD_VAR 0 1
36624: PPUSH
36625: LD_VAR 0 2
36629: PPUSH
36630: LD_VAR 0 1
36634: PUSH
36635: LD_VAR 0 3
36639: ARRAY
36640: PPUSH
36641: CALL_OW 1
36645: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36646: LD_ADDR_VAR 0 1
36650: PUSH
36651: LD_VAR 0 1
36655: PPUSH
36656: LD_VAR 0 3
36660: PPUSH
36661: LD_VAR 0 5
36665: PPUSH
36666: CALL_OW 1
36670: ST_TO_ADDR
// result := list ;
36671: LD_ADDR_VAR 0 4
36675: PUSH
36676: LD_VAR 0 1
36680: ST_TO_ADDR
// end ;
36681: LD_VAR 0 4
36685: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36686: LD_INT 0
36688: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36689: LD_ADDR_VAR 0 5
36693: PUSH
36694: LD_VAR 0 1
36698: PPUSH
36699: CALL_OW 250
36703: PPUSH
36704: LD_VAR 0 1
36708: PPUSH
36709: CALL_OW 251
36713: PPUSH
36714: LD_VAR 0 2
36718: PPUSH
36719: LD_VAR 0 3
36723: PPUSH
36724: LD_VAR 0 4
36728: PPUSH
36729: CALL 36739 0 5
36733: ST_TO_ADDR
// end ;
36734: LD_VAR 0 5
36738: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36739: LD_INT 0
36741: PPUSH
36742: PPUSH
36743: PPUSH
36744: PPUSH
// if not list then
36745: LD_VAR 0 3
36749: NOT
36750: IFFALSE 36754
// exit ;
36752: GO 37142
// result := [ ] ;
36754: LD_ADDR_VAR 0 6
36758: PUSH
36759: EMPTY
36760: ST_TO_ADDR
// for i in list do
36761: LD_ADDR_VAR 0 7
36765: PUSH
36766: LD_VAR 0 3
36770: PUSH
36771: FOR_IN
36772: IFFALSE 36974
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36774: LD_ADDR_VAR 0 9
36778: PUSH
36779: LD_VAR 0 7
36783: PPUSH
36784: LD_VAR 0 1
36788: PPUSH
36789: LD_VAR 0 2
36793: PPUSH
36794: CALL_OW 297
36798: ST_TO_ADDR
// if not result then
36799: LD_VAR 0 6
36803: NOT
36804: IFFALSE 36830
// result := [ [ i , tmp ] ] else
36806: LD_ADDR_VAR 0 6
36810: PUSH
36811: LD_VAR 0 7
36815: PUSH
36816: LD_VAR 0 9
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: EMPTY
36826: LIST
36827: ST_TO_ADDR
36828: GO 36972
// begin if result [ result ] [ 2 ] < tmp then
36830: LD_VAR 0 6
36834: PUSH
36835: LD_VAR 0 6
36839: ARRAY
36840: PUSH
36841: LD_INT 2
36843: ARRAY
36844: PUSH
36845: LD_VAR 0 9
36849: LESS
36850: IFFALSE 36892
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36852: LD_ADDR_VAR 0 6
36856: PUSH
36857: LD_VAR 0 6
36861: PPUSH
36862: LD_VAR 0 6
36866: PUSH
36867: LD_INT 1
36869: PLUS
36870: PPUSH
36871: LD_VAR 0 7
36875: PUSH
36876: LD_VAR 0 9
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PPUSH
36885: CALL_OW 2
36889: ST_TO_ADDR
36890: GO 36972
// for j = 1 to result do
36892: LD_ADDR_VAR 0 8
36896: PUSH
36897: DOUBLE
36898: LD_INT 1
36900: DEC
36901: ST_TO_ADDR
36902: LD_VAR 0 6
36906: PUSH
36907: FOR_TO
36908: IFFALSE 36970
// begin if tmp < result [ j ] [ 2 ] then
36910: LD_VAR 0 9
36914: PUSH
36915: LD_VAR 0 6
36919: PUSH
36920: LD_VAR 0 8
36924: ARRAY
36925: PUSH
36926: LD_INT 2
36928: ARRAY
36929: LESS
36930: IFFALSE 36968
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36932: LD_ADDR_VAR 0 6
36936: PUSH
36937: LD_VAR 0 6
36941: PPUSH
36942: LD_VAR 0 8
36946: PPUSH
36947: LD_VAR 0 7
36951: PUSH
36952: LD_VAR 0 9
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PPUSH
36961: CALL_OW 2
36965: ST_TO_ADDR
// break ;
36966: GO 36970
// end ; end ;
36968: GO 36907
36970: POP
36971: POP
// end ; end ;
36972: GO 36771
36974: POP
36975: POP
// if result and not asc then
36976: LD_VAR 0 6
36980: PUSH
36981: LD_VAR 0 4
36985: NOT
36986: AND
36987: IFFALSE 37062
// begin tmp := result ;
36989: LD_ADDR_VAR 0 9
36993: PUSH
36994: LD_VAR 0 6
36998: ST_TO_ADDR
// for i = tmp downto 1 do
36999: LD_ADDR_VAR 0 7
37003: PUSH
37004: DOUBLE
37005: LD_VAR 0 9
37009: INC
37010: ST_TO_ADDR
37011: LD_INT 1
37013: PUSH
37014: FOR_DOWNTO
37015: IFFALSE 37060
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37017: LD_ADDR_VAR 0 6
37021: PUSH
37022: LD_VAR 0 6
37026: PPUSH
37027: LD_VAR 0 9
37031: PUSH
37032: LD_VAR 0 7
37036: MINUS
37037: PUSH
37038: LD_INT 1
37040: PLUS
37041: PPUSH
37042: LD_VAR 0 9
37046: PUSH
37047: LD_VAR 0 7
37051: ARRAY
37052: PPUSH
37053: CALL_OW 1
37057: ST_TO_ADDR
37058: GO 37014
37060: POP
37061: POP
// end ; tmp := [ ] ;
37062: LD_ADDR_VAR 0 9
37066: PUSH
37067: EMPTY
37068: ST_TO_ADDR
// if mode then
37069: LD_VAR 0 5
37073: IFFALSE 37142
// begin for i = 1 to result do
37075: LD_ADDR_VAR 0 7
37079: PUSH
37080: DOUBLE
37081: LD_INT 1
37083: DEC
37084: ST_TO_ADDR
37085: LD_VAR 0 6
37089: PUSH
37090: FOR_TO
37091: IFFALSE 37130
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37093: LD_ADDR_VAR 0 9
37097: PUSH
37098: LD_VAR 0 9
37102: PPUSH
37103: LD_VAR 0 7
37107: PPUSH
37108: LD_VAR 0 6
37112: PUSH
37113: LD_VAR 0 7
37117: ARRAY
37118: PUSH
37119: LD_INT 1
37121: ARRAY
37122: PPUSH
37123: CALL_OW 1
37127: ST_TO_ADDR
37128: GO 37090
37130: POP
37131: POP
// result := tmp ;
37132: LD_ADDR_VAR 0 6
37136: PUSH
37137: LD_VAR 0 9
37141: ST_TO_ADDR
// end ; end ;
37142: LD_VAR 0 6
37146: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37147: LD_INT 0
37149: PPUSH
37150: PPUSH
37151: PPUSH
37152: PPUSH
37153: PPUSH
37154: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37155: LD_ADDR_VAR 0 5
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: EMPTY
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: ST_TO_ADDR
// if not x or not y then
37177: LD_VAR 0 2
37181: NOT
37182: PUSH
37183: LD_VAR 0 3
37187: NOT
37188: OR
37189: IFFALSE 37193
// exit ;
37191: GO 38845
// if not range then
37193: LD_VAR 0 4
37197: NOT
37198: IFFALSE 37208
// range := 10 ;
37200: LD_ADDR_VAR 0 4
37204: PUSH
37205: LD_INT 10
37207: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37208: LD_ADDR_VAR 0 8
37212: PUSH
37213: LD_INT 81
37215: PUSH
37216: LD_VAR 0 1
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 92
37227: PUSH
37228: LD_VAR 0 2
37232: PUSH
37233: LD_VAR 0 3
37237: PUSH
37238: LD_VAR 0 4
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 3
37251: PUSH
37252: LD_INT 21
37254: PUSH
37255: LD_INT 3
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: LIST
37270: PPUSH
37271: CALL_OW 69
37275: ST_TO_ADDR
// if not tmp then
37276: LD_VAR 0 8
37280: NOT
37281: IFFALSE 37285
// exit ;
37283: GO 38845
// for i in tmp do
37285: LD_ADDR_VAR 0 6
37289: PUSH
37290: LD_VAR 0 8
37294: PUSH
37295: FOR_IN
37296: IFFALSE 38820
// begin points := [ 0 , 0 , 0 ] ;
37298: LD_ADDR_VAR 0 9
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: LIST
37316: ST_TO_ADDR
// bpoints := 1 ;
37317: LD_ADDR_VAR 0 10
37321: PUSH
37322: LD_INT 1
37324: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37325: LD_VAR 0 6
37329: PPUSH
37330: CALL_OW 247
37334: PUSH
37335: LD_INT 1
37337: DOUBLE
37338: EQUAL
37339: IFTRUE 37343
37341: GO 37921
37343: POP
// begin if GetClass ( i ) = 1 then
37344: LD_VAR 0 6
37348: PPUSH
37349: CALL_OW 257
37353: PUSH
37354: LD_INT 1
37356: EQUAL
37357: IFFALSE 37378
// points := [ 10 , 5 , 3 ] ;
37359: LD_ADDR_VAR 0 9
37363: PUSH
37364: LD_INT 10
37366: PUSH
37367: LD_INT 5
37369: PUSH
37370: LD_INT 3
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: LIST
37377: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37378: LD_VAR 0 6
37382: PPUSH
37383: CALL_OW 257
37387: PUSH
37388: LD_INT 2
37390: PUSH
37391: LD_INT 3
37393: PUSH
37394: LD_INT 4
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: LIST
37401: IN
37402: IFFALSE 37423
// points := [ 3 , 2 , 1 ] ;
37404: LD_ADDR_VAR 0 9
37408: PUSH
37409: LD_INT 3
37411: PUSH
37412: LD_INT 2
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: LIST
37422: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37423: LD_VAR 0 6
37427: PPUSH
37428: CALL_OW 257
37432: PUSH
37433: LD_INT 5
37435: EQUAL
37436: IFFALSE 37457
// points := [ 130 , 5 , 2 ] ;
37438: LD_ADDR_VAR 0 9
37442: PUSH
37443: LD_INT 130
37445: PUSH
37446: LD_INT 5
37448: PUSH
37449: LD_INT 2
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: LIST
37456: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37457: LD_VAR 0 6
37461: PPUSH
37462: CALL_OW 257
37466: PUSH
37467: LD_INT 8
37469: EQUAL
37470: IFFALSE 37491
// points := [ 35 , 35 , 30 ] ;
37472: LD_ADDR_VAR 0 9
37476: PUSH
37477: LD_INT 35
37479: PUSH
37480: LD_INT 35
37482: PUSH
37483: LD_INT 30
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: LIST
37490: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37491: LD_VAR 0 6
37495: PPUSH
37496: CALL_OW 257
37500: PUSH
37501: LD_INT 9
37503: EQUAL
37504: IFFALSE 37525
// points := [ 20 , 55 , 40 ] ;
37506: LD_ADDR_VAR 0 9
37510: PUSH
37511: LD_INT 20
37513: PUSH
37514: LD_INT 55
37516: PUSH
37517: LD_INT 40
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: LIST
37524: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37525: LD_VAR 0 6
37529: PPUSH
37530: CALL_OW 257
37534: PUSH
37535: LD_INT 12
37537: PUSH
37538: LD_INT 16
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: IN
37545: IFFALSE 37566
// points := [ 5 , 3 , 2 ] ;
37547: LD_ADDR_VAR 0 9
37551: PUSH
37552: LD_INT 5
37554: PUSH
37555: LD_INT 3
37557: PUSH
37558: LD_INT 2
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: LIST
37565: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37566: LD_VAR 0 6
37570: PPUSH
37571: CALL_OW 257
37575: PUSH
37576: LD_INT 17
37578: EQUAL
37579: IFFALSE 37600
// points := [ 100 , 50 , 75 ] ;
37581: LD_ADDR_VAR 0 9
37585: PUSH
37586: LD_INT 100
37588: PUSH
37589: LD_INT 50
37591: PUSH
37592: LD_INT 75
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: LIST
37599: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37600: LD_VAR 0 6
37604: PPUSH
37605: CALL_OW 257
37609: PUSH
37610: LD_INT 15
37612: EQUAL
37613: IFFALSE 37634
// points := [ 10 , 5 , 3 ] ;
37615: LD_ADDR_VAR 0 9
37619: PUSH
37620: LD_INT 10
37622: PUSH
37623: LD_INT 5
37625: PUSH
37626: LD_INT 3
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: LIST
37633: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37634: LD_VAR 0 6
37638: PPUSH
37639: CALL_OW 257
37643: PUSH
37644: LD_INT 14
37646: EQUAL
37647: IFFALSE 37668
// points := [ 10 , 0 , 0 ] ;
37649: LD_ADDR_VAR 0 9
37653: PUSH
37654: LD_INT 10
37656: PUSH
37657: LD_INT 0
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: LIST
37667: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37668: LD_VAR 0 6
37672: PPUSH
37673: CALL_OW 257
37677: PUSH
37678: LD_INT 11
37680: EQUAL
37681: IFFALSE 37702
// points := [ 30 , 10 , 5 ] ;
37683: LD_ADDR_VAR 0 9
37687: PUSH
37688: LD_INT 30
37690: PUSH
37691: LD_INT 10
37693: PUSH
37694: LD_INT 5
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: LIST
37701: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37702: LD_VAR 0 1
37706: PPUSH
37707: LD_INT 5
37709: PPUSH
37710: CALL_OW 321
37714: PUSH
37715: LD_INT 2
37717: EQUAL
37718: IFFALSE 37735
// bpoints := bpoints * 1.8 ;
37720: LD_ADDR_VAR 0 10
37724: PUSH
37725: LD_VAR 0 10
37729: PUSH
37730: LD_REAL  1.80000000000000E+0000
37733: MUL
37734: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37735: LD_VAR 0 6
37739: PPUSH
37740: CALL_OW 257
37744: PUSH
37745: LD_INT 1
37747: PUSH
37748: LD_INT 2
37750: PUSH
37751: LD_INT 3
37753: PUSH
37754: LD_INT 4
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: IN
37763: PUSH
37764: LD_VAR 0 1
37768: PPUSH
37769: LD_INT 51
37771: PPUSH
37772: CALL_OW 321
37776: PUSH
37777: LD_INT 2
37779: EQUAL
37780: AND
37781: IFFALSE 37798
// bpoints := bpoints * 1.2 ;
37783: LD_ADDR_VAR 0 10
37787: PUSH
37788: LD_VAR 0 10
37792: PUSH
37793: LD_REAL  1.20000000000000E+0000
37796: MUL
37797: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37798: LD_VAR 0 6
37802: PPUSH
37803: CALL_OW 257
37807: PUSH
37808: LD_INT 5
37810: PUSH
37811: LD_INT 7
37813: PUSH
37814: LD_INT 9
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: LIST
37821: IN
37822: PUSH
37823: LD_VAR 0 1
37827: PPUSH
37828: LD_INT 52
37830: PPUSH
37831: CALL_OW 321
37835: PUSH
37836: LD_INT 2
37838: EQUAL
37839: AND
37840: IFFALSE 37857
// bpoints := bpoints * 1.5 ;
37842: LD_ADDR_VAR 0 10
37846: PUSH
37847: LD_VAR 0 10
37851: PUSH
37852: LD_REAL  1.50000000000000E+0000
37855: MUL
37856: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37857: LD_VAR 0 1
37861: PPUSH
37862: LD_INT 66
37864: PPUSH
37865: CALL_OW 321
37869: PUSH
37870: LD_INT 2
37872: EQUAL
37873: IFFALSE 37890
// bpoints := bpoints * 1.1 ;
37875: LD_ADDR_VAR 0 10
37879: PUSH
37880: LD_VAR 0 10
37884: PUSH
37885: LD_REAL  1.10000000000000E+0000
37888: MUL
37889: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37890: LD_ADDR_VAR 0 10
37894: PUSH
37895: LD_VAR 0 10
37899: PUSH
37900: LD_VAR 0 6
37904: PPUSH
37905: LD_INT 1
37907: PPUSH
37908: CALL_OW 259
37912: PUSH
37913: LD_REAL  1.15000000000000E+0000
37916: MUL
37917: MUL
37918: ST_TO_ADDR
// end ; unit_vehicle :
37919: GO 38749
37921: LD_INT 2
37923: DOUBLE
37924: EQUAL
37925: IFTRUE 37929
37927: GO 38737
37929: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37930: LD_VAR 0 6
37934: PPUSH
37935: CALL_OW 264
37939: PUSH
37940: LD_INT 2
37942: PUSH
37943: LD_INT 42
37945: PUSH
37946: LD_INT 24
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: LIST
37953: IN
37954: IFFALSE 37975
// points := [ 25 , 5 , 3 ] ;
37956: LD_ADDR_VAR 0 9
37960: PUSH
37961: LD_INT 25
37963: PUSH
37964: LD_INT 5
37966: PUSH
37967: LD_INT 3
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: LIST
37974: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37975: LD_VAR 0 6
37979: PPUSH
37980: CALL_OW 264
37984: PUSH
37985: LD_INT 4
37987: PUSH
37988: LD_INT 43
37990: PUSH
37991: LD_INT 25
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: LIST
37998: IN
37999: IFFALSE 38020
// points := [ 40 , 15 , 5 ] ;
38001: LD_ADDR_VAR 0 9
38005: PUSH
38006: LD_INT 40
38008: PUSH
38009: LD_INT 15
38011: PUSH
38012: LD_INT 5
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: LIST
38019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38020: LD_VAR 0 6
38024: PPUSH
38025: CALL_OW 264
38029: PUSH
38030: LD_INT 3
38032: PUSH
38033: LD_INT 23
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: IN
38040: IFFALSE 38061
// points := [ 7 , 25 , 8 ] ;
38042: LD_ADDR_VAR 0 9
38046: PUSH
38047: LD_INT 7
38049: PUSH
38050: LD_INT 25
38052: PUSH
38053: LD_INT 8
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: LIST
38060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38061: LD_VAR 0 6
38065: PPUSH
38066: CALL_OW 264
38070: PUSH
38071: LD_INT 5
38073: PUSH
38074: LD_INT 27
38076: PUSH
38077: LD_INT 44
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: LIST
38084: IN
38085: IFFALSE 38106
// points := [ 14 , 50 , 16 ] ;
38087: LD_ADDR_VAR 0 9
38091: PUSH
38092: LD_INT 14
38094: PUSH
38095: LD_INT 50
38097: PUSH
38098: LD_INT 16
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: LIST
38105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38106: LD_VAR 0 6
38110: PPUSH
38111: CALL_OW 264
38115: PUSH
38116: LD_INT 6
38118: PUSH
38119: LD_INT 46
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: IN
38126: IFFALSE 38147
// points := [ 32 , 120 , 70 ] ;
38128: LD_ADDR_VAR 0 9
38132: PUSH
38133: LD_INT 32
38135: PUSH
38136: LD_INT 120
38138: PUSH
38139: LD_INT 70
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: LIST
38146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38147: LD_VAR 0 6
38151: PPUSH
38152: CALL_OW 264
38156: PUSH
38157: LD_INT 7
38159: PUSH
38160: LD_INT 28
38162: PUSH
38163: LD_INT 45
38165: PUSH
38166: LD_EXP 49
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: IN
38177: IFFALSE 38198
// points := [ 35 , 20 , 45 ] ;
38179: LD_ADDR_VAR 0 9
38183: PUSH
38184: LD_INT 35
38186: PUSH
38187: LD_INT 20
38189: PUSH
38190: LD_INT 45
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: LIST
38197: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38198: LD_VAR 0 6
38202: PPUSH
38203: CALL_OW 264
38207: PUSH
38208: LD_INT 47
38210: PUSH
38211: EMPTY
38212: LIST
38213: IN
38214: IFFALSE 38235
// points := [ 67 , 45 , 75 ] ;
38216: LD_ADDR_VAR 0 9
38220: PUSH
38221: LD_INT 67
38223: PUSH
38224: LD_INT 45
38226: PUSH
38227: LD_INT 75
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: LIST
38234: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38235: LD_VAR 0 6
38239: PPUSH
38240: CALL_OW 264
38244: PUSH
38245: LD_INT 26
38247: PUSH
38248: EMPTY
38249: LIST
38250: IN
38251: IFFALSE 38272
// points := [ 120 , 30 , 80 ] ;
38253: LD_ADDR_VAR 0 9
38257: PUSH
38258: LD_INT 120
38260: PUSH
38261: LD_INT 30
38263: PUSH
38264: LD_INT 80
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: LIST
38271: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38272: LD_VAR 0 6
38276: PPUSH
38277: CALL_OW 264
38281: PUSH
38282: LD_INT 22
38284: PUSH
38285: EMPTY
38286: LIST
38287: IN
38288: IFFALSE 38309
// points := [ 40 , 1 , 1 ] ;
38290: LD_ADDR_VAR 0 9
38294: PUSH
38295: LD_INT 40
38297: PUSH
38298: LD_INT 1
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: LIST
38308: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38309: LD_VAR 0 6
38313: PPUSH
38314: CALL_OW 264
38318: PUSH
38319: LD_INT 29
38321: PUSH
38322: EMPTY
38323: LIST
38324: IN
38325: IFFALSE 38346
// points := [ 70 , 200 , 400 ] ;
38327: LD_ADDR_VAR 0 9
38331: PUSH
38332: LD_INT 70
38334: PUSH
38335: LD_INT 200
38337: PUSH
38338: LD_INT 400
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: LIST
38345: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38346: LD_VAR 0 6
38350: PPUSH
38351: CALL_OW 264
38355: PUSH
38356: LD_INT 14
38358: PUSH
38359: LD_INT 53
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: IN
38366: IFFALSE 38387
// points := [ 40 , 10 , 20 ] ;
38368: LD_ADDR_VAR 0 9
38372: PUSH
38373: LD_INT 40
38375: PUSH
38376: LD_INT 10
38378: PUSH
38379: LD_INT 20
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: LIST
38386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38387: LD_VAR 0 6
38391: PPUSH
38392: CALL_OW 264
38396: PUSH
38397: LD_INT 9
38399: PUSH
38400: EMPTY
38401: LIST
38402: IN
38403: IFFALSE 38424
// points := [ 5 , 70 , 20 ] ;
38405: LD_ADDR_VAR 0 9
38409: PUSH
38410: LD_INT 5
38412: PUSH
38413: LD_INT 70
38415: PUSH
38416: LD_INT 20
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: LIST
38423: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38424: LD_VAR 0 6
38428: PPUSH
38429: CALL_OW 264
38433: PUSH
38434: LD_INT 10
38436: PUSH
38437: EMPTY
38438: LIST
38439: IN
38440: IFFALSE 38461
// points := [ 35 , 110 , 70 ] ;
38442: LD_ADDR_VAR 0 9
38446: PUSH
38447: LD_INT 35
38449: PUSH
38450: LD_INT 110
38452: PUSH
38453: LD_INT 70
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: LIST
38460: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38461: LD_VAR 0 6
38465: PPUSH
38466: CALL_OW 265
38470: PUSH
38471: LD_INT 25
38473: EQUAL
38474: IFFALSE 38495
// points := [ 80 , 65 , 100 ] ;
38476: LD_ADDR_VAR 0 9
38480: PUSH
38481: LD_INT 80
38483: PUSH
38484: LD_INT 65
38486: PUSH
38487: LD_INT 100
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: LIST
38494: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38495: LD_VAR 0 6
38499: PPUSH
38500: CALL_OW 263
38504: PUSH
38505: LD_INT 1
38507: EQUAL
38508: IFFALSE 38543
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38510: LD_ADDR_VAR 0 10
38514: PUSH
38515: LD_VAR 0 10
38519: PUSH
38520: LD_VAR 0 6
38524: PPUSH
38525: CALL_OW 311
38529: PPUSH
38530: LD_INT 3
38532: PPUSH
38533: CALL_OW 259
38537: PUSH
38538: LD_INT 4
38540: MUL
38541: MUL
38542: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38543: LD_VAR 0 6
38547: PPUSH
38548: CALL_OW 263
38552: PUSH
38553: LD_INT 2
38555: EQUAL
38556: IFFALSE 38607
// begin j := IsControledBy ( i ) ;
38558: LD_ADDR_VAR 0 7
38562: PUSH
38563: LD_VAR 0 6
38567: PPUSH
38568: CALL_OW 312
38572: ST_TO_ADDR
// if j then
38573: LD_VAR 0 7
38577: IFFALSE 38607
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38579: LD_ADDR_VAR 0 10
38583: PUSH
38584: LD_VAR 0 10
38588: PUSH
38589: LD_VAR 0 7
38593: PPUSH
38594: LD_INT 3
38596: PPUSH
38597: CALL_OW 259
38601: PUSH
38602: LD_INT 3
38604: MUL
38605: MUL
38606: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38607: LD_VAR 0 6
38611: PPUSH
38612: CALL_OW 264
38616: PUSH
38617: LD_INT 5
38619: PUSH
38620: LD_INT 6
38622: PUSH
38623: LD_INT 46
38625: PUSH
38626: LD_INT 44
38628: PUSH
38629: LD_INT 47
38631: PUSH
38632: LD_INT 45
38634: PUSH
38635: LD_INT 28
38637: PUSH
38638: LD_INT 7
38640: PUSH
38641: LD_INT 27
38643: PUSH
38644: LD_INT 29
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: IN
38659: PUSH
38660: LD_VAR 0 1
38664: PPUSH
38665: LD_INT 52
38667: PPUSH
38668: CALL_OW 321
38672: PUSH
38673: LD_INT 2
38675: EQUAL
38676: AND
38677: IFFALSE 38694
// bpoints := bpoints * 1.2 ;
38679: LD_ADDR_VAR 0 10
38683: PUSH
38684: LD_VAR 0 10
38688: PUSH
38689: LD_REAL  1.20000000000000E+0000
38692: MUL
38693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38694: LD_VAR 0 6
38698: PPUSH
38699: CALL_OW 264
38703: PUSH
38704: LD_INT 6
38706: PUSH
38707: LD_INT 46
38709: PUSH
38710: LD_INT 47
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: LIST
38717: IN
38718: IFFALSE 38735
// bpoints := bpoints * 1.2 ;
38720: LD_ADDR_VAR 0 10
38724: PUSH
38725: LD_VAR 0 10
38729: PUSH
38730: LD_REAL  1.20000000000000E+0000
38733: MUL
38734: ST_TO_ADDR
// end ; unit_building :
38735: GO 38749
38737: LD_INT 3
38739: DOUBLE
38740: EQUAL
38741: IFTRUE 38745
38743: GO 38748
38745: POP
// ; end ;
38746: GO 38749
38748: POP
// for j = 1 to 3 do
38749: LD_ADDR_VAR 0 7
38753: PUSH
38754: DOUBLE
38755: LD_INT 1
38757: DEC
38758: ST_TO_ADDR
38759: LD_INT 3
38761: PUSH
38762: FOR_TO
38763: IFFALSE 38816
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38765: LD_ADDR_VAR 0 5
38769: PUSH
38770: LD_VAR 0 5
38774: PPUSH
38775: LD_VAR 0 7
38779: PPUSH
38780: LD_VAR 0 5
38784: PUSH
38785: LD_VAR 0 7
38789: ARRAY
38790: PUSH
38791: LD_VAR 0 9
38795: PUSH
38796: LD_VAR 0 7
38800: ARRAY
38801: PUSH
38802: LD_VAR 0 10
38806: MUL
38807: PLUS
38808: PPUSH
38809: CALL_OW 1
38813: ST_TO_ADDR
38814: GO 38762
38816: POP
38817: POP
// end ;
38818: GO 37295
38820: POP
38821: POP
// result := Replace ( result , 4 , tmp ) ;
38822: LD_ADDR_VAR 0 5
38826: PUSH
38827: LD_VAR 0 5
38831: PPUSH
38832: LD_INT 4
38834: PPUSH
38835: LD_VAR 0 8
38839: PPUSH
38840: CALL_OW 1
38844: ST_TO_ADDR
// end ;
38845: LD_VAR 0 5
38849: RET
// export function DangerAtRange ( unit , range ) ; begin
38850: LD_INT 0
38852: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38853: LD_ADDR_VAR 0 3
38857: PUSH
38858: LD_VAR 0 1
38862: PPUSH
38863: CALL_OW 255
38867: PPUSH
38868: LD_VAR 0 1
38872: PPUSH
38873: CALL_OW 250
38877: PPUSH
38878: LD_VAR 0 1
38882: PPUSH
38883: CALL_OW 251
38887: PPUSH
38888: LD_VAR 0 2
38892: PPUSH
38893: CALL 37147 0 4
38897: ST_TO_ADDR
// end ;
38898: LD_VAR 0 3
38902: RET
// export function DangerInArea ( side , area ) ; begin
38903: LD_INT 0
38905: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38906: LD_ADDR_VAR 0 3
38910: PUSH
38911: LD_VAR 0 2
38915: PPUSH
38916: LD_INT 81
38918: PUSH
38919: LD_VAR 0 1
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PPUSH
38928: CALL_OW 70
38932: ST_TO_ADDR
// end ;
38933: LD_VAR 0 3
38937: RET
// export function IsExtension ( b ) ; begin
38938: LD_INT 0
38940: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38941: LD_ADDR_VAR 0 2
38945: PUSH
38946: LD_VAR 0 1
38950: PUSH
38951: LD_INT 23
38953: PUSH
38954: LD_INT 20
38956: PUSH
38957: LD_INT 22
38959: PUSH
38960: LD_INT 17
38962: PUSH
38963: LD_INT 24
38965: PUSH
38966: LD_INT 21
38968: PUSH
38969: LD_INT 19
38971: PUSH
38972: LD_INT 16
38974: PUSH
38975: LD_INT 25
38977: PUSH
38978: LD_INT 18
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: IN
38993: ST_TO_ADDR
// end ;
38994: LD_VAR 0 2
38998: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38999: LD_INT 0
39001: PPUSH
39002: PPUSH
39003: PPUSH
// result := [ ] ;
39004: LD_ADDR_VAR 0 4
39008: PUSH
39009: EMPTY
39010: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39011: LD_ADDR_VAR 0 5
39015: PUSH
39016: LD_VAR 0 2
39020: PPUSH
39021: LD_INT 21
39023: PUSH
39024: LD_INT 3
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PPUSH
39031: CALL_OW 70
39035: ST_TO_ADDR
// if not tmp then
39036: LD_VAR 0 5
39040: NOT
39041: IFFALSE 39045
// exit ;
39043: GO 39109
// if checkLink then
39045: LD_VAR 0 3
39049: IFFALSE 39099
// begin for i in tmp do
39051: LD_ADDR_VAR 0 6
39055: PUSH
39056: LD_VAR 0 5
39060: PUSH
39061: FOR_IN
39062: IFFALSE 39097
// if GetBase ( i ) <> base then
39064: LD_VAR 0 6
39068: PPUSH
39069: CALL_OW 274
39073: PUSH
39074: LD_VAR 0 1
39078: NONEQUAL
39079: IFFALSE 39095
// ComLinkToBase ( base , i ) ;
39081: LD_VAR 0 1
39085: PPUSH
39086: LD_VAR 0 6
39090: PPUSH
39091: CALL_OW 169
39095: GO 39061
39097: POP
39098: POP
// end ; result := tmp ;
39099: LD_ADDR_VAR 0 4
39103: PUSH
39104: LD_VAR 0 5
39108: ST_TO_ADDR
// end ;
39109: LD_VAR 0 4
39113: RET
// export function ComComplete ( units , b ) ; var i ; begin
39114: LD_INT 0
39116: PPUSH
39117: PPUSH
// if not units then
39118: LD_VAR 0 1
39122: NOT
39123: IFFALSE 39127
// exit ;
39125: GO 39217
// for i in units do
39127: LD_ADDR_VAR 0 4
39131: PUSH
39132: LD_VAR 0 1
39136: PUSH
39137: FOR_IN
39138: IFFALSE 39215
// if BuildingStatus ( b ) = bs_build then
39140: LD_VAR 0 2
39144: PPUSH
39145: CALL_OW 461
39149: PUSH
39150: LD_INT 1
39152: EQUAL
39153: IFFALSE 39213
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39155: LD_VAR 0 4
39159: PPUSH
39160: LD_STRING h
39162: PUSH
39163: LD_VAR 0 2
39167: PPUSH
39168: CALL_OW 250
39172: PUSH
39173: LD_VAR 0 2
39177: PPUSH
39178: CALL_OW 251
39182: PUSH
39183: LD_VAR 0 2
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: PUSH
39206: EMPTY
39207: LIST
39208: PPUSH
39209: CALL_OW 446
39213: GO 39137
39215: POP
39216: POP
// end ;
39217: LD_VAR 0 3
39221: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39222: LD_INT 0
39224: PPUSH
39225: PPUSH
39226: PPUSH
39227: PPUSH
39228: PPUSH
39229: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
39230: LD_VAR 0 1
39234: NOT
39235: PUSH
39236: LD_VAR 0 1
39240: PPUSH
39241: CALL_OW 263
39245: PUSH
39246: LD_INT 2
39248: EQUAL
39249: NOT
39250: OR
39251: IFFALSE 39255
// exit ;
39253: GO 39571
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39255: LD_ADDR_VAR 0 6
39259: PUSH
39260: LD_INT 22
39262: PUSH
39263: LD_VAR 0 1
39267: PPUSH
39268: CALL_OW 255
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 2
39279: PUSH
39280: LD_INT 30
39282: PUSH
39283: LD_INT 36
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 34
39292: PUSH
39293: LD_INT 31
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: LIST
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PPUSH
39309: CALL_OW 69
39313: ST_TO_ADDR
// if not tmp then
39314: LD_VAR 0 6
39318: NOT
39319: IFFALSE 39323
// exit ;
39321: GO 39571
// result := [ ] ;
39323: LD_ADDR_VAR 0 2
39327: PUSH
39328: EMPTY
39329: ST_TO_ADDR
// for i in tmp do
39330: LD_ADDR_VAR 0 3
39334: PUSH
39335: LD_VAR 0 6
39339: PUSH
39340: FOR_IN
39341: IFFALSE 39412
// begin t := UnitsInside ( i ) ;
39343: LD_ADDR_VAR 0 4
39347: PUSH
39348: LD_VAR 0 3
39352: PPUSH
39353: CALL_OW 313
39357: ST_TO_ADDR
// if t then
39358: LD_VAR 0 4
39362: IFFALSE 39410
// for j in t do
39364: LD_ADDR_VAR 0 7
39368: PUSH
39369: LD_VAR 0 4
39373: PUSH
39374: FOR_IN
39375: IFFALSE 39408
// result := Insert ( result , result + 1 , j ) ;
39377: LD_ADDR_VAR 0 2
39381: PUSH
39382: LD_VAR 0 2
39386: PPUSH
39387: LD_VAR 0 2
39391: PUSH
39392: LD_INT 1
39394: PLUS
39395: PPUSH
39396: LD_VAR 0 7
39400: PPUSH
39401: CALL_OW 2
39405: ST_TO_ADDR
39406: GO 39374
39408: POP
39409: POP
// end ;
39410: GO 39340
39412: POP
39413: POP
// if not result then
39414: LD_VAR 0 2
39418: NOT
39419: IFFALSE 39423
// exit ;
39421: GO 39571
// mech := result [ 1 ] ;
39423: LD_ADDR_VAR 0 5
39427: PUSH
39428: LD_VAR 0 2
39432: PUSH
39433: LD_INT 1
39435: ARRAY
39436: ST_TO_ADDR
// if result > 1 then
39437: LD_VAR 0 2
39441: PUSH
39442: LD_INT 1
39444: GREATER
39445: IFFALSE 39557
// for i = 2 to result do
39447: LD_ADDR_VAR 0 3
39451: PUSH
39452: DOUBLE
39453: LD_INT 2
39455: DEC
39456: ST_TO_ADDR
39457: LD_VAR 0 2
39461: PUSH
39462: FOR_TO
39463: IFFALSE 39555
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39465: LD_ADDR_VAR 0 4
39469: PUSH
39470: LD_VAR 0 2
39474: PUSH
39475: LD_VAR 0 3
39479: ARRAY
39480: PPUSH
39481: LD_INT 3
39483: PPUSH
39484: CALL_OW 259
39488: PUSH
39489: LD_VAR 0 2
39493: PUSH
39494: LD_VAR 0 3
39498: ARRAY
39499: PPUSH
39500: CALL_OW 432
39504: MINUS
39505: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39506: LD_VAR 0 4
39510: PUSH
39511: LD_VAR 0 5
39515: PPUSH
39516: LD_INT 3
39518: PPUSH
39519: CALL_OW 259
39523: PUSH
39524: LD_VAR 0 5
39528: PPUSH
39529: CALL_OW 432
39533: MINUS
39534: GREATEREQUAL
39535: IFFALSE 39553
// mech := result [ i ] ;
39537: LD_ADDR_VAR 0 5
39541: PUSH
39542: LD_VAR 0 2
39546: PUSH
39547: LD_VAR 0 3
39551: ARRAY
39552: ST_TO_ADDR
// end ;
39553: GO 39462
39555: POP
39556: POP
// ComLinkTo ( vehicle , mech ) ;
39557: LD_VAR 0 1
39561: PPUSH
39562: LD_VAR 0 5
39566: PPUSH
39567: CALL_OW 135
// end ;
39571: LD_VAR 0 2
39575: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39576: LD_INT 0
39578: PPUSH
39579: PPUSH
39580: PPUSH
39581: PPUSH
39582: PPUSH
39583: PPUSH
39584: PPUSH
39585: PPUSH
39586: PPUSH
39587: PPUSH
39588: PPUSH
39589: PPUSH
39590: PPUSH
// result := [ ] ;
39591: LD_ADDR_VAR 0 7
39595: PUSH
39596: EMPTY
39597: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39598: LD_VAR 0 1
39602: PPUSH
39603: CALL_OW 266
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: IN
39618: NOT
39619: IFFALSE 39623
// exit ;
39621: GO 41257
// if name then
39623: LD_VAR 0 3
39627: IFFALSE 39643
// SetBName ( base_dep , name ) ;
39629: LD_VAR 0 1
39633: PPUSH
39634: LD_VAR 0 3
39638: PPUSH
39639: CALL_OW 500
// base := GetBase ( base_dep ) ;
39643: LD_ADDR_VAR 0 15
39647: PUSH
39648: LD_VAR 0 1
39652: PPUSH
39653: CALL_OW 274
39657: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39658: LD_ADDR_VAR 0 16
39662: PUSH
39663: LD_VAR 0 1
39667: PPUSH
39668: CALL_OW 255
39672: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39673: LD_ADDR_VAR 0 17
39677: PUSH
39678: LD_VAR 0 1
39682: PPUSH
39683: CALL_OW 248
39687: ST_TO_ADDR
// if sources then
39688: LD_VAR 0 5
39692: IFFALSE 39739
// for i = 1 to 3 do
39694: LD_ADDR_VAR 0 8
39698: PUSH
39699: DOUBLE
39700: LD_INT 1
39702: DEC
39703: ST_TO_ADDR
39704: LD_INT 3
39706: PUSH
39707: FOR_TO
39708: IFFALSE 39737
// AddResourceType ( base , i , sources [ i ] ) ;
39710: LD_VAR 0 15
39714: PPUSH
39715: LD_VAR 0 8
39719: PPUSH
39720: LD_VAR 0 5
39724: PUSH
39725: LD_VAR 0 8
39729: ARRAY
39730: PPUSH
39731: CALL_OW 276
39735: GO 39707
39737: POP
39738: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39739: LD_ADDR_VAR 0 18
39743: PUSH
39744: LD_VAR 0 15
39748: PPUSH
39749: LD_VAR 0 2
39753: PPUSH
39754: LD_INT 1
39756: PPUSH
39757: CALL 38999 0 3
39761: ST_TO_ADDR
// InitHc ;
39762: CALL_OW 19
// InitUc ;
39766: CALL_OW 18
// uc_side := side ;
39770: LD_ADDR_OWVAR 20
39774: PUSH
39775: LD_VAR 0 16
39779: ST_TO_ADDR
// uc_nation := nation ;
39780: LD_ADDR_OWVAR 21
39784: PUSH
39785: LD_VAR 0 17
39789: ST_TO_ADDR
// if buildings then
39790: LD_VAR 0 18
39794: IFFALSE 41116
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39796: LD_ADDR_VAR 0 19
39800: PUSH
39801: LD_VAR 0 18
39805: PPUSH
39806: LD_INT 2
39808: PUSH
39809: LD_INT 30
39811: PUSH
39812: LD_INT 29
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 30
39821: PUSH
39822: LD_INT 30
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: LIST
39833: PPUSH
39834: CALL_OW 72
39838: ST_TO_ADDR
// if tmp then
39839: LD_VAR 0 19
39843: IFFALSE 39891
// for i in tmp do
39845: LD_ADDR_VAR 0 8
39849: PUSH
39850: LD_VAR 0 19
39854: PUSH
39855: FOR_IN
39856: IFFALSE 39889
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39858: LD_VAR 0 8
39862: PPUSH
39863: CALL_OW 250
39867: PPUSH
39868: LD_VAR 0 8
39872: PPUSH
39873: CALL_OW 251
39877: PPUSH
39878: LD_VAR 0 16
39882: PPUSH
39883: CALL_OW 441
39887: GO 39855
39889: POP
39890: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39891: LD_VAR 0 18
39895: PPUSH
39896: LD_INT 2
39898: PUSH
39899: LD_INT 30
39901: PUSH
39902: LD_INT 32
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 30
39911: PUSH
39912: LD_INT 33
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: LIST
39923: PPUSH
39924: CALL_OW 72
39928: IFFALSE 40016
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39930: LD_ADDR_VAR 0 8
39934: PUSH
39935: LD_VAR 0 18
39939: PPUSH
39940: LD_INT 2
39942: PUSH
39943: LD_INT 30
39945: PUSH
39946: LD_INT 32
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 30
39955: PUSH
39956: LD_INT 33
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: LIST
39967: PPUSH
39968: CALL_OW 72
39972: PUSH
39973: FOR_IN
39974: IFFALSE 40014
// begin if not GetBWeapon ( i ) then
39976: LD_VAR 0 8
39980: PPUSH
39981: CALL_OW 269
39985: NOT
39986: IFFALSE 40012
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39988: LD_VAR 0 8
39992: PPUSH
39993: LD_VAR 0 8
39997: PPUSH
39998: LD_VAR 0 2
40002: PPUSH
40003: CALL 41262 0 2
40007: PPUSH
40008: CALL_OW 431
// end ;
40012: GO 39973
40014: POP
40015: POP
// end ; for i = 1 to personel do
40016: LD_ADDR_VAR 0 8
40020: PUSH
40021: DOUBLE
40022: LD_INT 1
40024: DEC
40025: ST_TO_ADDR
40026: LD_VAR 0 6
40030: PUSH
40031: FOR_TO
40032: IFFALSE 41096
// begin if i > 4 then
40034: LD_VAR 0 8
40038: PUSH
40039: LD_INT 4
40041: GREATER
40042: IFFALSE 40046
// break ;
40044: GO 41096
// case i of 1 :
40046: LD_VAR 0 8
40050: PUSH
40051: LD_INT 1
40053: DOUBLE
40054: EQUAL
40055: IFTRUE 40059
40057: GO 40139
40059: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40060: LD_ADDR_VAR 0 12
40064: PUSH
40065: LD_VAR 0 18
40069: PPUSH
40070: LD_INT 22
40072: PUSH
40073: LD_VAR 0 16
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 58
40084: PUSH
40085: EMPTY
40086: LIST
40087: PUSH
40088: LD_INT 2
40090: PUSH
40091: LD_INT 30
40093: PUSH
40094: LD_INT 32
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 30
40103: PUSH
40104: LD_INT 4
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 30
40113: PUSH
40114: LD_INT 5
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: LIST
40131: PPUSH
40132: CALL_OW 72
40136: ST_TO_ADDR
40137: GO 40361
40139: LD_INT 2
40141: DOUBLE
40142: EQUAL
40143: IFTRUE 40147
40145: GO 40209
40147: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40148: LD_ADDR_VAR 0 12
40152: PUSH
40153: LD_VAR 0 18
40157: PPUSH
40158: LD_INT 22
40160: PUSH
40161: LD_VAR 0 16
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 2
40172: PUSH
40173: LD_INT 30
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 30
40185: PUSH
40186: LD_INT 1
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: LIST
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PPUSH
40202: CALL_OW 72
40206: ST_TO_ADDR
40207: GO 40361
40209: LD_INT 3
40211: DOUBLE
40212: EQUAL
40213: IFTRUE 40217
40215: GO 40279
40217: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40218: LD_ADDR_VAR 0 12
40222: PUSH
40223: LD_VAR 0 18
40227: PPUSH
40228: LD_INT 22
40230: PUSH
40231: LD_VAR 0 16
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: LD_INT 30
40245: PUSH
40246: LD_INT 2
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 30
40255: PUSH
40256: LD_INT 3
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: LIST
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PPUSH
40272: CALL_OW 72
40276: ST_TO_ADDR
40277: GO 40361
40279: LD_INT 4
40281: DOUBLE
40282: EQUAL
40283: IFTRUE 40287
40285: GO 40360
40287: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40288: LD_ADDR_VAR 0 12
40292: PUSH
40293: LD_VAR 0 18
40297: PPUSH
40298: LD_INT 22
40300: PUSH
40301: LD_VAR 0 16
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 2
40312: PUSH
40313: LD_INT 30
40315: PUSH
40316: LD_INT 6
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 30
40325: PUSH
40326: LD_INT 7
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 30
40335: PUSH
40336: LD_INT 8
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PPUSH
40353: CALL_OW 72
40357: ST_TO_ADDR
40358: GO 40361
40360: POP
// if i = 1 then
40361: LD_VAR 0 8
40365: PUSH
40366: LD_INT 1
40368: EQUAL
40369: IFFALSE 40480
// begin tmp := [ ] ;
40371: LD_ADDR_VAR 0 19
40375: PUSH
40376: EMPTY
40377: ST_TO_ADDR
// for j in f do
40378: LD_ADDR_VAR 0 9
40382: PUSH
40383: LD_VAR 0 12
40387: PUSH
40388: FOR_IN
40389: IFFALSE 40462
// if GetBType ( j ) = b_bunker then
40391: LD_VAR 0 9
40395: PPUSH
40396: CALL_OW 266
40400: PUSH
40401: LD_INT 32
40403: EQUAL
40404: IFFALSE 40431
// tmp := Insert ( tmp , 1 , j ) else
40406: LD_ADDR_VAR 0 19
40410: PUSH
40411: LD_VAR 0 19
40415: PPUSH
40416: LD_INT 1
40418: PPUSH
40419: LD_VAR 0 9
40423: PPUSH
40424: CALL_OW 2
40428: ST_TO_ADDR
40429: GO 40460
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40431: LD_ADDR_VAR 0 19
40435: PUSH
40436: LD_VAR 0 19
40440: PPUSH
40441: LD_VAR 0 19
40445: PUSH
40446: LD_INT 1
40448: PLUS
40449: PPUSH
40450: LD_VAR 0 9
40454: PPUSH
40455: CALL_OW 2
40459: ST_TO_ADDR
40460: GO 40388
40462: POP
40463: POP
// if tmp then
40464: LD_VAR 0 19
40468: IFFALSE 40480
// f := tmp ;
40470: LD_ADDR_VAR 0 12
40474: PUSH
40475: LD_VAR 0 19
40479: ST_TO_ADDR
// end ; x := personel [ i ] ;
40480: LD_ADDR_VAR 0 13
40484: PUSH
40485: LD_VAR 0 6
40489: PUSH
40490: LD_VAR 0 8
40494: ARRAY
40495: ST_TO_ADDR
// if x = - 1 then
40496: LD_VAR 0 13
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: EQUAL
40505: IFFALSE 40714
// begin for j in f do
40507: LD_ADDR_VAR 0 9
40511: PUSH
40512: LD_VAR 0 12
40516: PUSH
40517: FOR_IN
40518: IFFALSE 40710
// repeat InitHc ;
40520: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40524: LD_VAR 0 9
40528: PPUSH
40529: CALL_OW 266
40533: PUSH
40534: LD_INT 5
40536: EQUAL
40537: IFFALSE 40607
// begin if UnitsInside ( j ) < 3 then
40539: LD_VAR 0 9
40543: PPUSH
40544: CALL_OW 313
40548: PUSH
40549: LD_INT 3
40551: LESS
40552: IFFALSE 40588
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40554: LD_INT 0
40556: PPUSH
40557: LD_INT 5
40559: PUSH
40560: LD_INT 8
40562: PUSH
40563: LD_INT 9
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: LIST
40570: PUSH
40571: LD_VAR 0 17
40575: ARRAY
40576: PPUSH
40577: LD_VAR 0 4
40581: PPUSH
40582: CALL_OW 380
40586: GO 40605
// PrepareHuman ( false , i , skill ) ;
40588: LD_INT 0
40590: PPUSH
40591: LD_VAR 0 8
40595: PPUSH
40596: LD_VAR 0 4
40600: PPUSH
40601: CALL_OW 380
// end else
40605: GO 40624
// PrepareHuman ( false , i , skill ) ;
40607: LD_INT 0
40609: PPUSH
40610: LD_VAR 0 8
40614: PPUSH
40615: LD_VAR 0 4
40619: PPUSH
40620: CALL_OW 380
// un := CreateHuman ;
40624: LD_ADDR_VAR 0 14
40628: PUSH
40629: CALL_OW 44
40633: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40634: LD_ADDR_VAR 0 7
40638: PUSH
40639: LD_VAR 0 7
40643: PPUSH
40644: LD_INT 1
40646: PPUSH
40647: LD_VAR 0 14
40651: PPUSH
40652: CALL_OW 2
40656: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40657: LD_VAR 0 14
40661: PPUSH
40662: LD_VAR 0 9
40666: PPUSH
40667: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40671: LD_VAR 0 9
40675: PPUSH
40676: CALL_OW 313
40680: PUSH
40681: LD_INT 6
40683: EQUAL
40684: PUSH
40685: LD_VAR 0 9
40689: PPUSH
40690: CALL_OW 266
40694: PUSH
40695: LD_INT 32
40697: PUSH
40698: LD_INT 31
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: IN
40705: OR
40706: IFFALSE 40520
40708: GO 40517
40710: POP
40711: POP
// end else
40712: GO 41094
// for j = 1 to x do
40714: LD_ADDR_VAR 0 9
40718: PUSH
40719: DOUBLE
40720: LD_INT 1
40722: DEC
40723: ST_TO_ADDR
40724: LD_VAR 0 13
40728: PUSH
40729: FOR_TO
40730: IFFALSE 41092
// begin InitHc ;
40732: CALL_OW 19
// if not f then
40736: LD_VAR 0 12
40740: NOT
40741: IFFALSE 40830
// begin PrepareHuman ( false , i , skill ) ;
40743: LD_INT 0
40745: PPUSH
40746: LD_VAR 0 8
40750: PPUSH
40751: LD_VAR 0 4
40755: PPUSH
40756: CALL_OW 380
// un := CreateHuman ;
40760: LD_ADDR_VAR 0 14
40764: PUSH
40765: CALL_OW 44
40769: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40770: LD_ADDR_VAR 0 7
40774: PUSH
40775: LD_VAR 0 7
40779: PPUSH
40780: LD_INT 1
40782: PPUSH
40783: LD_VAR 0 14
40787: PPUSH
40788: CALL_OW 2
40792: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40793: LD_VAR 0 14
40797: PPUSH
40798: LD_VAR 0 1
40802: PPUSH
40803: CALL_OW 250
40807: PPUSH
40808: LD_VAR 0 1
40812: PPUSH
40813: CALL_OW 251
40817: PPUSH
40818: LD_INT 10
40820: PPUSH
40821: LD_INT 0
40823: PPUSH
40824: CALL_OW 50
// continue ;
40828: GO 40729
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40830: LD_VAR 0 12
40834: PUSH
40835: LD_INT 1
40837: ARRAY
40838: PPUSH
40839: CALL_OW 313
40843: PUSH
40844: LD_VAR 0 12
40848: PUSH
40849: LD_INT 1
40851: ARRAY
40852: PPUSH
40853: CALL_OW 266
40857: PUSH
40858: LD_INT 32
40860: PUSH
40861: LD_INT 31
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: IN
40868: AND
40869: PUSH
40870: LD_VAR 0 12
40874: PUSH
40875: LD_INT 1
40877: ARRAY
40878: PPUSH
40879: CALL_OW 313
40883: PUSH
40884: LD_INT 6
40886: EQUAL
40887: OR
40888: IFFALSE 40908
// f := Delete ( f , 1 ) ;
40890: LD_ADDR_VAR 0 12
40894: PUSH
40895: LD_VAR 0 12
40899: PPUSH
40900: LD_INT 1
40902: PPUSH
40903: CALL_OW 3
40907: ST_TO_ADDR
// if not f then
40908: LD_VAR 0 12
40912: NOT
40913: IFFALSE 40931
// begin x := x + 2 ;
40915: LD_ADDR_VAR 0 13
40919: PUSH
40920: LD_VAR 0 13
40924: PUSH
40925: LD_INT 2
40927: PLUS
40928: ST_TO_ADDR
// continue ;
40929: GO 40729
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40931: LD_VAR 0 12
40935: PUSH
40936: LD_INT 1
40938: ARRAY
40939: PPUSH
40940: CALL_OW 266
40944: PUSH
40945: LD_INT 5
40947: EQUAL
40948: IFFALSE 41022
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40950: LD_VAR 0 12
40954: PUSH
40955: LD_INT 1
40957: ARRAY
40958: PPUSH
40959: CALL_OW 313
40963: PUSH
40964: LD_INT 3
40966: LESS
40967: IFFALSE 41003
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40969: LD_INT 0
40971: PPUSH
40972: LD_INT 5
40974: PUSH
40975: LD_INT 8
40977: PUSH
40978: LD_INT 9
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: LIST
40985: PUSH
40986: LD_VAR 0 17
40990: ARRAY
40991: PPUSH
40992: LD_VAR 0 4
40996: PPUSH
40997: CALL_OW 380
41001: GO 41020
// PrepareHuman ( false , i , skill ) ;
41003: LD_INT 0
41005: PPUSH
41006: LD_VAR 0 8
41010: PPUSH
41011: LD_VAR 0 4
41015: PPUSH
41016: CALL_OW 380
// end else
41020: GO 41039
// PrepareHuman ( false , i , skill ) ;
41022: LD_INT 0
41024: PPUSH
41025: LD_VAR 0 8
41029: PPUSH
41030: LD_VAR 0 4
41034: PPUSH
41035: CALL_OW 380
// un := CreateHuman ;
41039: LD_ADDR_VAR 0 14
41043: PUSH
41044: CALL_OW 44
41048: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41049: LD_ADDR_VAR 0 7
41053: PUSH
41054: LD_VAR 0 7
41058: PPUSH
41059: LD_INT 1
41061: PPUSH
41062: LD_VAR 0 14
41066: PPUSH
41067: CALL_OW 2
41071: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41072: LD_VAR 0 14
41076: PPUSH
41077: LD_VAR 0 12
41081: PUSH
41082: LD_INT 1
41084: ARRAY
41085: PPUSH
41086: CALL_OW 52
// end ;
41090: GO 40729
41092: POP
41093: POP
// end ;
41094: GO 40031
41096: POP
41097: POP
// result := result ^ buildings ;
41098: LD_ADDR_VAR 0 7
41102: PUSH
41103: LD_VAR 0 7
41107: PUSH
41108: LD_VAR 0 18
41112: ADD
41113: ST_TO_ADDR
// end else
41114: GO 41257
// begin for i = 1 to personel do
41116: LD_ADDR_VAR 0 8
41120: PUSH
41121: DOUBLE
41122: LD_INT 1
41124: DEC
41125: ST_TO_ADDR
41126: LD_VAR 0 6
41130: PUSH
41131: FOR_TO
41132: IFFALSE 41255
// begin if i > 4 then
41134: LD_VAR 0 8
41138: PUSH
41139: LD_INT 4
41141: GREATER
41142: IFFALSE 41146
// break ;
41144: GO 41255
// x := personel [ i ] ;
41146: LD_ADDR_VAR 0 13
41150: PUSH
41151: LD_VAR 0 6
41155: PUSH
41156: LD_VAR 0 8
41160: ARRAY
41161: ST_TO_ADDR
// if x = - 1 then
41162: LD_VAR 0 13
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: EQUAL
41171: IFFALSE 41175
// continue ;
41173: GO 41131
// PrepareHuman ( false , i , skill ) ;
41175: LD_INT 0
41177: PPUSH
41178: LD_VAR 0 8
41182: PPUSH
41183: LD_VAR 0 4
41187: PPUSH
41188: CALL_OW 380
// un := CreateHuman ;
41192: LD_ADDR_VAR 0 14
41196: PUSH
41197: CALL_OW 44
41201: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41202: LD_VAR 0 14
41206: PPUSH
41207: LD_VAR 0 1
41211: PPUSH
41212: CALL_OW 250
41216: PPUSH
41217: LD_VAR 0 1
41221: PPUSH
41222: CALL_OW 251
41226: PPUSH
41227: LD_INT 10
41229: PPUSH
41230: LD_INT 0
41232: PPUSH
41233: CALL_OW 50
// result := result ^ un ;
41237: LD_ADDR_VAR 0 7
41241: PUSH
41242: LD_VAR 0 7
41246: PUSH
41247: LD_VAR 0 14
41251: ADD
41252: ST_TO_ADDR
// end ;
41253: GO 41131
41255: POP
41256: POP
// end ; end ;
41257: LD_VAR 0 7
41261: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41262: LD_INT 0
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
41268: PPUSH
41269: PPUSH
41270: PPUSH
41271: PPUSH
41272: PPUSH
41273: PPUSH
41274: PPUSH
41275: PPUSH
41276: PPUSH
41277: PPUSH
41278: PPUSH
41279: PPUSH
// result := false ;
41280: LD_ADDR_VAR 0 3
41284: PUSH
41285: LD_INT 0
41287: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41288: LD_VAR 0 1
41292: NOT
41293: PUSH
41294: LD_VAR 0 1
41298: PPUSH
41299: CALL_OW 266
41303: PUSH
41304: LD_INT 32
41306: PUSH
41307: LD_INT 33
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: IN
41314: NOT
41315: OR
41316: IFFALSE 41320
// exit ;
41318: GO 42429
// nat := GetNation ( tower ) ;
41320: LD_ADDR_VAR 0 12
41324: PUSH
41325: LD_VAR 0 1
41329: PPUSH
41330: CALL_OW 248
41334: ST_TO_ADDR
// side := GetSide ( tower ) ;
41335: LD_ADDR_VAR 0 16
41339: PUSH
41340: LD_VAR 0 1
41344: PPUSH
41345: CALL_OW 255
41349: ST_TO_ADDR
// x := GetX ( tower ) ;
41350: LD_ADDR_VAR 0 10
41354: PUSH
41355: LD_VAR 0 1
41359: PPUSH
41360: CALL_OW 250
41364: ST_TO_ADDR
// y := GetY ( tower ) ;
41365: LD_ADDR_VAR 0 11
41369: PUSH
41370: LD_VAR 0 1
41374: PPUSH
41375: CALL_OW 251
41379: ST_TO_ADDR
// if not x or not y then
41380: LD_VAR 0 10
41384: NOT
41385: PUSH
41386: LD_VAR 0 11
41390: NOT
41391: OR
41392: IFFALSE 41396
// exit ;
41394: GO 42429
// weapon := 0 ;
41396: LD_ADDR_VAR 0 18
41400: PUSH
41401: LD_INT 0
41403: ST_TO_ADDR
// fac_list := [ ] ;
41404: LD_ADDR_VAR 0 17
41408: PUSH
41409: EMPTY
41410: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41411: LD_ADDR_VAR 0 6
41415: PUSH
41416: LD_VAR 0 1
41420: PPUSH
41421: CALL_OW 274
41425: PPUSH
41426: LD_VAR 0 2
41430: PPUSH
41431: LD_INT 0
41433: PPUSH
41434: CALL 38999 0 3
41438: PPUSH
41439: LD_INT 30
41441: PUSH
41442: LD_INT 3
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PPUSH
41449: CALL_OW 72
41453: ST_TO_ADDR
// if not factories then
41454: LD_VAR 0 6
41458: NOT
41459: IFFALSE 41463
// exit ;
41461: GO 42429
// for i in factories do
41463: LD_ADDR_VAR 0 8
41467: PUSH
41468: LD_VAR 0 6
41472: PUSH
41473: FOR_IN
41474: IFFALSE 41499
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41476: LD_ADDR_VAR 0 17
41480: PUSH
41481: LD_VAR 0 17
41485: PUSH
41486: LD_VAR 0 8
41490: PPUSH
41491: CALL_OW 478
41495: UNION
41496: ST_TO_ADDR
41497: GO 41473
41499: POP
41500: POP
// if not fac_list then
41501: LD_VAR 0 17
41505: NOT
41506: IFFALSE 41510
// exit ;
41508: GO 42429
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41510: LD_ADDR_VAR 0 5
41514: PUSH
41515: LD_INT 4
41517: PUSH
41518: LD_INT 5
41520: PUSH
41521: LD_INT 9
41523: PUSH
41524: LD_INT 10
41526: PUSH
41527: LD_INT 6
41529: PUSH
41530: LD_INT 7
41532: PUSH
41533: LD_INT 11
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 27
41547: PUSH
41548: LD_INT 28
41550: PUSH
41551: LD_INT 26
41553: PUSH
41554: LD_INT 30
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 43
41565: PUSH
41566: LD_INT 44
41568: PUSH
41569: LD_INT 46
41571: PUSH
41572: LD_INT 45
41574: PUSH
41575: LD_INT 47
41577: PUSH
41578: LD_INT 49
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: LIST
41593: PUSH
41594: LD_VAR 0 12
41598: ARRAY
41599: ST_TO_ADDR
// list := list isect fac_list ;
41600: LD_ADDR_VAR 0 5
41604: PUSH
41605: LD_VAR 0 5
41609: PUSH
41610: LD_VAR 0 17
41614: ISECT
41615: ST_TO_ADDR
// if not list then
41616: LD_VAR 0 5
41620: NOT
41621: IFFALSE 41625
// exit ;
41623: GO 42429
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41625: LD_VAR 0 12
41629: PUSH
41630: LD_INT 3
41632: EQUAL
41633: PUSH
41634: LD_INT 49
41636: PUSH
41637: LD_VAR 0 5
41641: IN
41642: AND
41643: PUSH
41644: LD_INT 31
41646: PPUSH
41647: LD_VAR 0 16
41651: PPUSH
41652: CALL_OW 321
41656: PUSH
41657: LD_INT 2
41659: EQUAL
41660: AND
41661: IFFALSE 41721
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41663: LD_INT 22
41665: PUSH
41666: LD_VAR 0 16
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 35
41677: PUSH
41678: LD_INT 49
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 91
41687: PUSH
41688: LD_VAR 0 1
41692: PUSH
41693: LD_INT 10
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: LIST
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: LIST
41705: PPUSH
41706: CALL_OW 69
41710: NOT
41711: IFFALSE 41721
// weapon := ru_time_lapser ;
41713: LD_ADDR_VAR 0 18
41717: PUSH
41718: LD_INT 49
41720: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41721: LD_VAR 0 12
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: LD_INT 2
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: IN
41736: PUSH
41737: LD_INT 11
41739: PUSH
41740: LD_VAR 0 5
41744: IN
41745: PUSH
41746: LD_INT 30
41748: PUSH
41749: LD_VAR 0 5
41753: IN
41754: OR
41755: AND
41756: PUSH
41757: LD_INT 6
41759: PPUSH
41760: LD_VAR 0 16
41764: PPUSH
41765: CALL_OW 321
41769: PUSH
41770: LD_INT 2
41772: EQUAL
41773: AND
41774: IFFALSE 41939
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41776: LD_INT 22
41778: PUSH
41779: LD_VAR 0 16
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: LD_INT 35
41793: PUSH
41794: LD_INT 11
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 35
41803: PUSH
41804: LD_INT 30
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 91
41818: PUSH
41819: LD_VAR 0 1
41823: PUSH
41824: LD_INT 18
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: LIST
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: LIST
41836: PPUSH
41837: CALL_OW 69
41841: NOT
41842: PUSH
41843: LD_INT 22
41845: PUSH
41846: LD_VAR 0 16
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 2
41857: PUSH
41858: LD_INT 30
41860: PUSH
41861: LD_INT 32
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 30
41870: PUSH
41871: LD_INT 33
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 91
41885: PUSH
41886: LD_VAR 0 1
41890: PUSH
41891: LD_INT 12
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: LIST
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: LIST
41903: PUSH
41904: EMPTY
41905: LIST
41906: PPUSH
41907: CALL_OW 69
41911: PUSH
41912: LD_INT 2
41914: GREATER
41915: AND
41916: IFFALSE 41939
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41918: LD_ADDR_VAR 0 18
41922: PUSH
41923: LD_INT 11
41925: PUSH
41926: LD_INT 30
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_VAR 0 12
41937: ARRAY
41938: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41939: LD_VAR 0 18
41943: NOT
41944: PUSH
41945: LD_INT 40
41947: PPUSH
41948: LD_VAR 0 16
41952: PPUSH
41953: CALL_OW 321
41957: PUSH
41958: LD_INT 2
41960: EQUAL
41961: AND
41962: PUSH
41963: LD_INT 7
41965: PUSH
41966: LD_VAR 0 5
41970: IN
41971: PUSH
41972: LD_INT 28
41974: PUSH
41975: LD_VAR 0 5
41979: IN
41980: OR
41981: PUSH
41982: LD_INT 45
41984: PUSH
41985: LD_VAR 0 5
41989: IN
41990: OR
41991: AND
41992: IFFALSE 42246
// begin hex := GetHexInfo ( x , y ) ;
41994: LD_ADDR_VAR 0 4
41998: PUSH
41999: LD_VAR 0 10
42003: PPUSH
42004: LD_VAR 0 11
42008: PPUSH
42009: CALL_OW 546
42013: ST_TO_ADDR
// if hex [ 1 ] then
42014: LD_VAR 0 4
42018: PUSH
42019: LD_INT 1
42021: ARRAY
42022: IFFALSE 42026
// exit ;
42024: GO 42429
// height := hex [ 2 ] ;
42026: LD_ADDR_VAR 0 15
42030: PUSH
42031: LD_VAR 0 4
42035: PUSH
42036: LD_INT 2
42038: ARRAY
42039: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42040: LD_ADDR_VAR 0 14
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: LD_INT 2
42050: PUSH
42051: LD_INT 3
42053: PUSH
42054: LD_INT 5
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: ST_TO_ADDR
// for i in tmp do
42063: LD_ADDR_VAR 0 8
42067: PUSH
42068: LD_VAR 0 14
42072: PUSH
42073: FOR_IN
42074: IFFALSE 42244
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42076: LD_ADDR_VAR 0 9
42080: PUSH
42081: LD_VAR 0 10
42085: PPUSH
42086: LD_VAR 0 8
42090: PPUSH
42091: LD_INT 5
42093: PPUSH
42094: CALL_OW 272
42098: PUSH
42099: LD_VAR 0 11
42103: PPUSH
42104: LD_VAR 0 8
42108: PPUSH
42109: LD_INT 5
42111: PPUSH
42112: CALL_OW 273
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42121: LD_VAR 0 9
42125: PUSH
42126: LD_INT 1
42128: ARRAY
42129: PPUSH
42130: LD_VAR 0 9
42134: PUSH
42135: LD_INT 2
42137: ARRAY
42138: PPUSH
42139: CALL_OW 488
42143: IFFALSE 42242
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42145: LD_ADDR_VAR 0 4
42149: PUSH
42150: LD_VAR 0 9
42154: PUSH
42155: LD_INT 1
42157: ARRAY
42158: PPUSH
42159: LD_VAR 0 9
42163: PUSH
42164: LD_INT 2
42166: ARRAY
42167: PPUSH
42168: CALL_OW 546
42172: ST_TO_ADDR
// if hex [ 1 ] then
42173: LD_VAR 0 4
42177: PUSH
42178: LD_INT 1
42180: ARRAY
42181: IFFALSE 42185
// continue ;
42183: GO 42073
// h := hex [ 2 ] ;
42185: LD_ADDR_VAR 0 13
42189: PUSH
42190: LD_VAR 0 4
42194: PUSH
42195: LD_INT 2
42197: ARRAY
42198: ST_TO_ADDR
// if h + 7 < height then
42199: LD_VAR 0 13
42203: PUSH
42204: LD_INT 7
42206: PLUS
42207: PUSH
42208: LD_VAR 0 15
42212: LESS
42213: IFFALSE 42242
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42215: LD_ADDR_VAR 0 18
42219: PUSH
42220: LD_INT 7
42222: PUSH
42223: LD_INT 28
42225: PUSH
42226: LD_INT 45
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: LIST
42233: PUSH
42234: LD_VAR 0 12
42238: ARRAY
42239: ST_TO_ADDR
// break ;
42240: GO 42244
// end ; end ; end ;
42242: GO 42073
42244: POP
42245: POP
// end ; if not weapon then
42246: LD_VAR 0 18
42250: NOT
42251: IFFALSE 42311
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42253: LD_ADDR_VAR 0 5
42257: PUSH
42258: LD_VAR 0 5
42262: PUSH
42263: LD_INT 11
42265: PUSH
42266: LD_INT 30
42268: PUSH
42269: LD_INT 49
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: LIST
42276: DIFF
42277: ST_TO_ADDR
// if not list then
42278: LD_VAR 0 5
42282: NOT
42283: IFFALSE 42287
// exit ;
42285: GO 42429
// weapon := list [ rand ( 1 , list ) ] ;
42287: LD_ADDR_VAR 0 18
42291: PUSH
42292: LD_VAR 0 5
42296: PUSH
42297: LD_INT 1
42299: PPUSH
42300: LD_VAR 0 5
42304: PPUSH
42305: CALL_OW 12
42309: ARRAY
42310: ST_TO_ADDR
// end ; if weapon then
42311: LD_VAR 0 18
42315: IFFALSE 42429
// begin tmp := CostOfWeapon ( weapon ) ;
42317: LD_ADDR_VAR 0 14
42321: PUSH
42322: LD_VAR 0 18
42326: PPUSH
42327: CALL_OW 451
42331: ST_TO_ADDR
// j := GetBase ( tower ) ;
42332: LD_ADDR_VAR 0 9
42336: PUSH
42337: LD_VAR 0 1
42341: PPUSH
42342: CALL_OW 274
42346: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42347: LD_VAR 0 9
42351: PPUSH
42352: LD_INT 1
42354: PPUSH
42355: CALL_OW 275
42359: PUSH
42360: LD_VAR 0 14
42364: PUSH
42365: LD_INT 1
42367: ARRAY
42368: GREATEREQUAL
42369: PUSH
42370: LD_VAR 0 9
42374: PPUSH
42375: LD_INT 2
42377: PPUSH
42378: CALL_OW 275
42382: PUSH
42383: LD_VAR 0 14
42387: PUSH
42388: LD_INT 2
42390: ARRAY
42391: GREATEREQUAL
42392: AND
42393: PUSH
42394: LD_VAR 0 9
42398: PPUSH
42399: LD_INT 3
42401: PPUSH
42402: CALL_OW 275
42406: PUSH
42407: LD_VAR 0 14
42411: PUSH
42412: LD_INT 3
42414: ARRAY
42415: GREATEREQUAL
42416: AND
42417: IFFALSE 42429
// result := weapon ;
42419: LD_ADDR_VAR 0 3
42423: PUSH
42424: LD_VAR 0 18
42428: ST_TO_ADDR
// end ; end ;
42429: LD_VAR 0 3
42433: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42434: LD_INT 0
42436: PPUSH
42437: PPUSH
// result := true ;
42438: LD_ADDR_VAR 0 3
42442: PUSH
42443: LD_INT 1
42445: ST_TO_ADDR
// if array1 = array2 then
42446: LD_VAR 0 1
42450: PUSH
42451: LD_VAR 0 2
42455: EQUAL
42456: IFFALSE 42516
// begin for i = 1 to array1 do
42458: LD_ADDR_VAR 0 4
42462: PUSH
42463: DOUBLE
42464: LD_INT 1
42466: DEC
42467: ST_TO_ADDR
42468: LD_VAR 0 1
42472: PUSH
42473: FOR_TO
42474: IFFALSE 42512
// if array1 [ i ] <> array2 [ i ] then
42476: LD_VAR 0 1
42480: PUSH
42481: LD_VAR 0 4
42485: ARRAY
42486: PUSH
42487: LD_VAR 0 2
42491: PUSH
42492: LD_VAR 0 4
42496: ARRAY
42497: NONEQUAL
42498: IFFALSE 42510
// begin result := false ;
42500: LD_ADDR_VAR 0 3
42504: PUSH
42505: LD_INT 0
42507: ST_TO_ADDR
// break ;
42508: GO 42512
// end ;
42510: GO 42473
42512: POP
42513: POP
// end else
42514: GO 42524
// result := false ;
42516: LD_ADDR_VAR 0 3
42520: PUSH
42521: LD_INT 0
42523: ST_TO_ADDR
// end ;
42524: LD_VAR 0 3
42528: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42529: LD_INT 0
42531: PPUSH
42532: PPUSH
// if not array1 or not array2 then
42533: LD_VAR 0 1
42537: NOT
42538: PUSH
42539: LD_VAR 0 2
42543: NOT
42544: OR
42545: IFFALSE 42549
// exit ;
42547: GO 42613
// result := true ;
42549: LD_ADDR_VAR 0 3
42553: PUSH
42554: LD_INT 1
42556: ST_TO_ADDR
// for i = 1 to array1 do
42557: LD_ADDR_VAR 0 4
42561: PUSH
42562: DOUBLE
42563: LD_INT 1
42565: DEC
42566: ST_TO_ADDR
42567: LD_VAR 0 1
42571: PUSH
42572: FOR_TO
42573: IFFALSE 42611
// if array1 [ i ] <> array2 [ i ] then
42575: LD_VAR 0 1
42579: PUSH
42580: LD_VAR 0 4
42584: ARRAY
42585: PUSH
42586: LD_VAR 0 2
42590: PUSH
42591: LD_VAR 0 4
42595: ARRAY
42596: NONEQUAL
42597: IFFALSE 42609
// begin result := false ;
42599: LD_ADDR_VAR 0 3
42603: PUSH
42604: LD_INT 0
42606: ST_TO_ADDR
// break ;
42607: GO 42611
// end ;
42609: GO 42572
42611: POP
42612: POP
// end ;
42613: LD_VAR 0 3
42617: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42618: LD_INT 0
42620: PPUSH
42621: PPUSH
42622: PPUSH
// pom := GetBase ( fac ) ;
42623: LD_ADDR_VAR 0 5
42627: PUSH
42628: LD_VAR 0 1
42632: PPUSH
42633: CALL_OW 274
42637: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42638: LD_ADDR_VAR 0 4
42642: PUSH
42643: LD_VAR 0 2
42647: PUSH
42648: LD_INT 1
42650: ARRAY
42651: PPUSH
42652: LD_VAR 0 2
42656: PUSH
42657: LD_INT 2
42659: ARRAY
42660: PPUSH
42661: LD_VAR 0 2
42665: PUSH
42666: LD_INT 3
42668: ARRAY
42669: PPUSH
42670: LD_VAR 0 2
42674: PUSH
42675: LD_INT 4
42677: ARRAY
42678: PPUSH
42679: CALL_OW 449
42683: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42684: LD_ADDR_VAR 0 3
42688: PUSH
42689: LD_VAR 0 5
42693: PPUSH
42694: LD_INT 1
42696: PPUSH
42697: CALL_OW 275
42701: PUSH
42702: LD_VAR 0 4
42706: PUSH
42707: LD_INT 1
42709: ARRAY
42710: GREATEREQUAL
42711: PUSH
42712: LD_VAR 0 5
42716: PPUSH
42717: LD_INT 2
42719: PPUSH
42720: CALL_OW 275
42724: PUSH
42725: LD_VAR 0 4
42729: PUSH
42730: LD_INT 2
42732: ARRAY
42733: GREATEREQUAL
42734: AND
42735: PUSH
42736: LD_VAR 0 5
42740: PPUSH
42741: LD_INT 3
42743: PPUSH
42744: CALL_OW 275
42748: PUSH
42749: LD_VAR 0 4
42753: PUSH
42754: LD_INT 3
42756: ARRAY
42757: GREATEREQUAL
42758: AND
42759: ST_TO_ADDR
// end ;
42760: LD_VAR 0 3
42764: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42765: LD_INT 0
42767: PPUSH
42768: PPUSH
42769: PPUSH
42770: PPUSH
// pom := GetBase ( building ) ;
42771: LD_ADDR_VAR 0 3
42775: PUSH
42776: LD_VAR 0 1
42780: PPUSH
42781: CALL_OW 274
42785: ST_TO_ADDR
// if not pom then
42786: LD_VAR 0 3
42790: NOT
42791: IFFALSE 42795
// exit ;
42793: GO 42965
// btype := GetBType ( building ) ;
42795: LD_ADDR_VAR 0 5
42799: PUSH
42800: LD_VAR 0 1
42804: PPUSH
42805: CALL_OW 266
42809: ST_TO_ADDR
// if btype = b_armoury then
42810: LD_VAR 0 5
42814: PUSH
42815: LD_INT 4
42817: EQUAL
42818: IFFALSE 42828
// btype := b_barracks ;
42820: LD_ADDR_VAR 0 5
42824: PUSH
42825: LD_INT 5
42827: ST_TO_ADDR
// if btype = b_depot then
42828: LD_VAR 0 5
42832: PUSH
42833: LD_INT 0
42835: EQUAL
42836: IFFALSE 42846
// btype := b_warehouse ;
42838: LD_ADDR_VAR 0 5
42842: PUSH
42843: LD_INT 1
42845: ST_TO_ADDR
// if btype = b_workshop then
42846: LD_VAR 0 5
42850: PUSH
42851: LD_INT 2
42853: EQUAL
42854: IFFALSE 42864
// btype := b_factory ;
42856: LD_ADDR_VAR 0 5
42860: PUSH
42861: LD_INT 3
42863: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42864: LD_ADDR_VAR 0 4
42868: PUSH
42869: LD_VAR 0 5
42873: PPUSH
42874: LD_VAR 0 1
42878: PPUSH
42879: CALL_OW 248
42883: PPUSH
42884: CALL_OW 450
42888: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42889: LD_ADDR_VAR 0 2
42893: PUSH
42894: LD_VAR 0 3
42898: PPUSH
42899: LD_INT 1
42901: PPUSH
42902: CALL_OW 275
42906: PUSH
42907: LD_VAR 0 4
42911: PUSH
42912: LD_INT 1
42914: ARRAY
42915: GREATEREQUAL
42916: PUSH
42917: LD_VAR 0 3
42921: PPUSH
42922: LD_INT 2
42924: PPUSH
42925: CALL_OW 275
42929: PUSH
42930: LD_VAR 0 4
42934: PUSH
42935: LD_INT 2
42937: ARRAY
42938: GREATEREQUAL
42939: AND
42940: PUSH
42941: LD_VAR 0 3
42945: PPUSH
42946: LD_INT 3
42948: PPUSH
42949: CALL_OW 275
42953: PUSH
42954: LD_VAR 0 4
42958: PUSH
42959: LD_INT 3
42961: ARRAY
42962: GREATEREQUAL
42963: AND
42964: ST_TO_ADDR
// end ;
42965: LD_VAR 0 2
42969: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42970: LD_INT 0
42972: PPUSH
42973: PPUSH
42974: PPUSH
// pom := GetBase ( building ) ;
42975: LD_ADDR_VAR 0 4
42979: PUSH
42980: LD_VAR 0 1
42984: PPUSH
42985: CALL_OW 274
42989: ST_TO_ADDR
// if not pom then
42990: LD_VAR 0 4
42994: NOT
42995: IFFALSE 42999
// exit ;
42997: GO 43100
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42999: LD_ADDR_VAR 0 5
43003: PUSH
43004: LD_VAR 0 2
43008: PPUSH
43009: LD_VAR 0 1
43013: PPUSH
43014: CALL_OW 248
43018: PPUSH
43019: CALL_OW 450
43023: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43024: LD_ADDR_VAR 0 3
43028: PUSH
43029: LD_VAR 0 4
43033: PPUSH
43034: LD_INT 1
43036: PPUSH
43037: CALL_OW 275
43041: PUSH
43042: LD_VAR 0 5
43046: PUSH
43047: LD_INT 1
43049: ARRAY
43050: GREATEREQUAL
43051: PUSH
43052: LD_VAR 0 4
43056: PPUSH
43057: LD_INT 2
43059: PPUSH
43060: CALL_OW 275
43064: PUSH
43065: LD_VAR 0 5
43069: PUSH
43070: LD_INT 2
43072: ARRAY
43073: GREATEREQUAL
43074: AND
43075: PUSH
43076: LD_VAR 0 4
43080: PPUSH
43081: LD_INT 3
43083: PPUSH
43084: CALL_OW 275
43088: PUSH
43089: LD_VAR 0 5
43093: PUSH
43094: LD_INT 3
43096: ARRAY
43097: GREATEREQUAL
43098: AND
43099: ST_TO_ADDR
// end ;
43100: LD_VAR 0 3
43104: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43105: LD_INT 0
43107: PPUSH
43108: PPUSH
43109: PPUSH
43110: PPUSH
43111: PPUSH
43112: PPUSH
43113: PPUSH
43114: PPUSH
43115: PPUSH
43116: PPUSH
43117: PPUSH
// result := false ;
43118: LD_ADDR_VAR 0 8
43122: PUSH
43123: LD_INT 0
43125: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43126: LD_VAR 0 5
43130: NOT
43131: PUSH
43132: LD_VAR 0 1
43136: NOT
43137: OR
43138: PUSH
43139: LD_VAR 0 2
43143: NOT
43144: OR
43145: PUSH
43146: LD_VAR 0 3
43150: NOT
43151: OR
43152: IFFALSE 43156
// exit ;
43154: GO 43970
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43156: LD_ADDR_VAR 0 14
43160: PUSH
43161: LD_VAR 0 1
43165: PPUSH
43166: LD_VAR 0 2
43170: PPUSH
43171: LD_VAR 0 3
43175: PPUSH
43176: LD_VAR 0 4
43180: PPUSH
43181: LD_VAR 0 5
43185: PUSH
43186: LD_INT 1
43188: ARRAY
43189: PPUSH
43190: CALL_OW 248
43194: PPUSH
43195: LD_INT 0
43197: PPUSH
43198: CALL 45207 0 6
43202: ST_TO_ADDR
// if not hexes then
43203: LD_VAR 0 14
43207: NOT
43208: IFFALSE 43212
// exit ;
43210: GO 43970
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43212: LD_ADDR_VAR 0 17
43216: PUSH
43217: LD_VAR 0 5
43221: PPUSH
43222: LD_INT 22
43224: PUSH
43225: LD_VAR 0 13
43229: PPUSH
43230: CALL_OW 255
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: LD_INT 30
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 30
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: LIST
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PPUSH
43271: CALL_OW 72
43275: ST_TO_ADDR
// for i = 1 to hexes do
43276: LD_ADDR_VAR 0 9
43280: PUSH
43281: DOUBLE
43282: LD_INT 1
43284: DEC
43285: ST_TO_ADDR
43286: LD_VAR 0 14
43290: PUSH
43291: FOR_TO
43292: IFFALSE 43968
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43294: LD_ADDR_VAR 0 13
43298: PUSH
43299: LD_VAR 0 14
43303: PUSH
43304: LD_VAR 0 9
43308: ARRAY
43309: PUSH
43310: LD_INT 1
43312: ARRAY
43313: PPUSH
43314: LD_VAR 0 14
43318: PUSH
43319: LD_VAR 0 9
43323: ARRAY
43324: PUSH
43325: LD_INT 2
43327: ARRAY
43328: PPUSH
43329: CALL_OW 428
43333: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43334: LD_VAR 0 14
43338: PUSH
43339: LD_VAR 0 9
43343: ARRAY
43344: PUSH
43345: LD_INT 1
43347: ARRAY
43348: PPUSH
43349: LD_VAR 0 14
43353: PUSH
43354: LD_VAR 0 9
43358: ARRAY
43359: PUSH
43360: LD_INT 2
43362: ARRAY
43363: PPUSH
43364: CALL_OW 351
43368: PUSH
43369: LD_VAR 0 14
43373: PUSH
43374: LD_VAR 0 9
43378: ARRAY
43379: PUSH
43380: LD_INT 1
43382: ARRAY
43383: PPUSH
43384: LD_VAR 0 14
43388: PUSH
43389: LD_VAR 0 9
43393: ARRAY
43394: PUSH
43395: LD_INT 2
43397: ARRAY
43398: PPUSH
43399: CALL_OW 488
43403: NOT
43404: OR
43405: PUSH
43406: LD_VAR 0 13
43410: PPUSH
43411: CALL_OW 247
43415: PUSH
43416: LD_INT 3
43418: EQUAL
43419: OR
43420: IFFALSE 43426
// exit ;
43422: POP
43423: POP
43424: GO 43970
// if not tmp then
43426: LD_VAR 0 13
43430: NOT
43431: IFFALSE 43435
// continue ;
43433: GO 43291
// result := true ;
43435: LD_ADDR_VAR 0 8
43439: PUSH
43440: LD_INT 1
43442: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43443: LD_VAR 0 6
43447: PUSH
43448: LD_VAR 0 13
43452: PPUSH
43453: CALL_OW 247
43457: PUSH
43458: LD_INT 2
43460: EQUAL
43461: AND
43462: PUSH
43463: LD_VAR 0 13
43467: PPUSH
43468: CALL_OW 263
43472: PUSH
43473: LD_INT 1
43475: EQUAL
43476: AND
43477: IFFALSE 43641
// begin if IsDrivenBy ( tmp ) then
43479: LD_VAR 0 13
43483: PPUSH
43484: CALL_OW 311
43488: IFFALSE 43492
// continue ;
43490: GO 43291
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43492: LD_VAR 0 6
43496: PPUSH
43497: LD_INT 3
43499: PUSH
43500: LD_INT 60
43502: PUSH
43503: EMPTY
43504: LIST
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 3
43512: PUSH
43513: LD_INT 55
43515: PUSH
43516: EMPTY
43517: LIST
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PPUSH
43527: CALL_OW 72
43531: IFFALSE 43639
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43533: LD_ADDR_VAR 0 18
43537: PUSH
43538: LD_VAR 0 6
43542: PPUSH
43543: LD_INT 3
43545: PUSH
43546: LD_INT 60
43548: PUSH
43549: EMPTY
43550: LIST
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 3
43558: PUSH
43559: LD_INT 55
43561: PUSH
43562: EMPTY
43563: LIST
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PPUSH
43573: CALL_OW 72
43577: PUSH
43578: LD_INT 1
43580: ARRAY
43581: ST_TO_ADDR
// if IsInUnit ( driver ) then
43582: LD_VAR 0 18
43586: PPUSH
43587: CALL_OW 310
43591: IFFALSE 43602
// ComExit ( driver ) ;
43593: LD_VAR 0 18
43597: PPUSH
43598: CALL 68391 0 1
// AddComEnterUnit ( driver , tmp ) ;
43602: LD_VAR 0 18
43606: PPUSH
43607: LD_VAR 0 13
43611: PPUSH
43612: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43616: LD_VAR 0 18
43620: PPUSH
43621: LD_VAR 0 7
43625: PPUSH
43626: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43630: LD_VAR 0 18
43634: PPUSH
43635: CALL_OW 181
// end ; continue ;
43639: GO 43291
// end ; if not cleaners or not tmp in cleaners then
43641: LD_VAR 0 6
43645: NOT
43646: PUSH
43647: LD_VAR 0 13
43651: PUSH
43652: LD_VAR 0 6
43656: IN
43657: NOT
43658: OR
43659: IFFALSE 43966
// begin if dep then
43661: LD_VAR 0 17
43665: IFFALSE 43801
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43667: LD_ADDR_VAR 0 16
43671: PUSH
43672: LD_VAR 0 17
43676: PUSH
43677: LD_INT 1
43679: ARRAY
43680: PPUSH
43681: CALL_OW 250
43685: PPUSH
43686: LD_VAR 0 17
43690: PUSH
43691: LD_INT 1
43693: ARRAY
43694: PPUSH
43695: CALL_OW 254
43699: PPUSH
43700: LD_INT 5
43702: PPUSH
43703: CALL_OW 272
43707: PUSH
43708: LD_VAR 0 17
43712: PUSH
43713: LD_INT 1
43715: ARRAY
43716: PPUSH
43717: CALL_OW 251
43721: PPUSH
43722: LD_VAR 0 17
43726: PUSH
43727: LD_INT 1
43729: ARRAY
43730: PPUSH
43731: CALL_OW 254
43735: PPUSH
43736: LD_INT 5
43738: PPUSH
43739: CALL_OW 273
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43748: LD_VAR 0 16
43752: PUSH
43753: LD_INT 1
43755: ARRAY
43756: PPUSH
43757: LD_VAR 0 16
43761: PUSH
43762: LD_INT 2
43764: ARRAY
43765: PPUSH
43766: CALL_OW 488
43770: IFFALSE 43801
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43772: LD_VAR 0 13
43776: PPUSH
43777: LD_VAR 0 16
43781: PUSH
43782: LD_INT 1
43784: ARRAY
43785: PPUSH
43786: LD_VAR 0 16
43790: PUSH
43791: LD_INT 2
43793: ARRAY
43794: PPUSH
43795: CALL_OW 111
// continue ;
43799: GO 43291
// end ; end ; r := GetDir ( tmp ) ;
43801: LD_ADDR_VAR 0 15
43805: PUSH
43806: LD_VAR 0 13
43810: PPUSH
43811: CALL_OW 254
43815: ST_TO_ADDR
// if r = 5 then
43816: LD_VAR 0 15
43820: PUSH
43821: LD_INT 5
43823: EQUAL
43824: IFFALSE 43834
// r := 0 ;
43826: LD_ADDR_VAR 0 15
43830: PUSH
43831: LD_INT 0
43833: ST_TO_ADDR
// for j = r to 5 do
43834: LD_ADDR_VAR 0 10
43838: PUSH
43839: DOUBLE
43840: LD_VAR 0 15
43844: DEC
43845: ST_TO_ADDR
43846: LD_INT 5
43848: PUSH
43849: FOR_TO
43850: IFFALSE 43964
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43852: LD_ADDR_VAR 0 11
43856: PUSH
43857: LD_VAR 0 13
43861: PPUSH
43862: CALL_OW 250
43866: PPUSH
43867: LD_VAR 0 10
43871: PPUSH
43872: LD_INT 2
43874: PPUSH
43875: CALL_OW 272
43879: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43880: LD_ADDR_VAR 0 12
43884: PUSH
43885: LD_VAR 0 13
43889: PPUSH
43890: CALL_OW 251
43894: PPUSH
43895: LD_VAR 0 10
43899: PPUSH
43900: LD_INT 2
43902: PPUSH
43903: CALL_OW 273
43907: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43908: LD_VAR 0 11
43912: PPUSH
43913: LD_VAR 0 12
43917: PPUSH
43918: CALL_OW 488
43922: PUSH
43923: LD_VAR 0 11
43927: PPUSH
43928: LD_VAR 0 12
43932: PPUSH
43933: CALL_OW 428
43937: NOT
43938: AND
43939: IFFALSE 43962
// begin ComMoveXY ( tmp , _x , _y ) ;
43941: LD_VAR 0 13
43945: PPUSH
43946: LD_VAR 0 11
43950: PPUSH
43951: LD_VAR 0 12
43955: PPUSH
43956: CALL_OW 111
// break ;
43960: GO 43964
// end ; end ;
43962: GO 43849
43964: POP
43965: POP
// end ; end ;
43966: GO 43291
43968: POP
43969: POP
// end ;
43970: LD_VAR 0 8
43974: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43975: LD_INT 0
43977: PPUSH
// result := true ;
43978: LD_ADDR_VAR 0 3
43982: PUSH
43983: LD_INT 1
43985: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43986: LD_VAR 0 2
43990: PUSH
43991: LD_INT 24
43993: DOUBLE
43994: EQUAL
43995: IFTRUE 44005
43997: LD_INT 33
43999: DOUBLE
44000: EQUAL
44001: IFTRUE 44005
44003: GO 44030
44005: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44006: LD_ADDR_VAR 0 3
44010: PUSH
44011: LD_INT 32
44013: PPUSH
44014: LD_VAR 0 1
44018: PPUSH
44019: CALL_OW 321
44023: PUSH
44024: LD_INT 2
44026: EQUAL
44027: ST_TO_ADDR
44028: GO 44350
44030: LD_INT 20
44032: DOUBLE
44033: EQUAL
44034: IFTRUE 44038
44036: GO 44063
44038: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44039: LD_ADDR_VAR 0 3
44043: PUSH
44044: LD_INT 6
44046: PPUSH
44047: LD_VAR 0 1
44051: PPUSH
44052: CALL_OW 321
44056: PUSH
44057: LD_INT 2
44059: EQUAL
44060: ST_TO_ADDR
44061: GO 44350
44063: LD_INT 22
44065: DOUBLE
44066: EQUAL
44067: IFTRUE 44077
44069: LD_INT 36
44071: DOUBLE
44072: EQUAL
44073: IFTRUE 44077
44075: GO 44102
44077: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44078: LD_ADDR_VAR 0 3
44082: PUSH
44083: LD_INT 15
44085: PPUSH
44086: LD_VAR 0 1
44090: PPUSH
44091: CALL_OW 321
44095: PUSH
44096: LD_INT 2
44098: EQUAL
44099: ST_TO_ADDR
44100: GO 44350
44102: LD_INT 30
44104: DOUBLE
44105: EQUAL
44106: IFTRUE 44110
44108: GO 44135
44110: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44111: LD_ADDR_VAR 0 3
44115: PUSH
44116: LD_INT 20
44118: PPUSH
44119: LD_VAR 0 1
44123: PPUSH
44124: CALL_OW 321
44128: PUSH
44129: LD_INT 2
44131: EQUAL
44132: ST_TO_ADDR
44133: GO 44350
44135: LD_INT 28
44137: DOUBLE
44138: EQUAL
44139: IFTRUE 44149
44141: LD_INT 21
44143: DOUBLE
44144: EQUAL
44145: IFTRUE 44149
44147: GO 44174
44149: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44150: LD_ADDR_VAR 0 3
44154: PUSH
44155: LD_INT 21
44157: PPUSH
44158: LD_VAR 0 1
44162: PPUSH
44163: CALL_OW 321
44167: PUSH
44168: LD_INT 2
44170: EQUAL
44171: ST_TO_ADDR
44172: GO 44350
44174: LD_INT 16
44176: DOUBLE
44177: EQUAL
44178: IFTRUE 44182
44180: GO 44209
44182: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44183: LD_ADDR_VAR 0 3
44187: PUSH
44188: LD_EXP 56
44192: PPUSH
44193: LD_VAR 0 1
44197: PPUSH
44198: CALL_OW 321
44202: PUSH
44203: LD_INT 2
44205: EQUAL
44206: ST_TO_ADDR
44207: GO 44350
44209: LD_INT 19
44211: DOUBLE
44212: EQUAL
44213: IFTRUE 44223
44215: LD_INT 23
44217: DOUBLE
44218: EQUAL
44219: IFTRUE 44223
44221: GO 44250
44223: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44224: LD_ADDR_VAR 0 3
44228: PUSH
44229: LD_EXP 55
44233: PPUSH
44234: LD_VAR 0 1
44238: PPUSH
44239: CALL_OW 321
44243: PUSH
44244: LD_INT 2
44246: EQUAL
44247: ST_TO_ADDR
44248: GO 44350
44250: LD_INT 17
44252: DOUBLE
44253: EQUAL
44254: IFTRUE 44258
44256: GO 44283
44258: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44259: LD_ADDR_VAR 0 3
44263: PUSH
44264: LD_INT 39
44266: PPUSH
44267: LD_VAR 0 1
44271: PPUSH
44272: CALL_OW 321
44276: PUSH
44277: LD_INT 2
44279: EQUAL
44280: ST_TO_ADDR
44281: GO 44350
44283: LD_INT 18
44285: DOUBLE
44286: EQUAL
44287: IFTRUE 44291
44289: GO 44316
44291: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44292: LD_ADDR_VAR 0 3
44296: PUSH
44297: LD_INT 40
44299: PPUSH
44300: LD_VAR 0 1
44304: PPUSH
44305: CALL_OW 321
44309: PUSH
44310: LD_INT 2
44312: EQUAL
44313: ST_TO_ADDR
44314: GO 44350
44316: LD_INT 27
44318: DOUBLE
44319: EQUAL
44320: IFTRUE 44324
44322: GO 44349
44324: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44325: LD_ADDR_VAR 0 3
44329: PUSH
44330: LD_INT 35
44332: PPUSH
44333: LD_VAR 0 1
44337: PPUSH
44338: CALL_OW 321
44342: PUSH
44343: LD_INT 2
44345: EQUAL
44346: ST_TO_ADDR
44347: GO 44350
44349: POP
// end ;
44350: LD_VAR 0 3
44354: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44355: LD_INT 0
44357: PPUSH
44358: PPUSH
44359: PPUSH
44360: PPUSH
44361: PPUSH
44362: PPUSH
44363: PPUSH
44364: PPUSH
44365: PPUSH
44366: PPUSH
44367: PPUSH
// result := false ;
44368: LD_ADDR_VAR 0 6
44372: PUSH
44373: LD_INT 0
44375: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44376: LD_VAR 0 1
44380: NOT
44381: PUSH
44382: LD_VAR 0 1
44386: PPUSH
44387: CALL_OW 266
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: LD_INT 1
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: IN
44402: NOT
44403: OR
44404: PUSH
44405: LD_VAR 0 2
44409: NOT
44410: OR
44411: PUSH
44412: LD_VAR 0 5
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: LD_INT 3
44428: PUSH
44429: LD_INT 4
44431: PUSH
44432: LD_INT 5
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: IN
44443: NOT
44444: OR
44445: PUSH
44446: LD_VAR 0 3
44450: PPUSH
44451: LD_VAR 0 4
44455: PPUSH
44456: CALL_OW 488
44460: NOT
44461: OR
44462: IFFALSE 44466
// exit ;
44464: GO 45202
// side := GetSide ( depot ) ;
44466: LD_ADDR_VAR 0 9
44470: PUSH
44471: LD_VAR 0 1
44475: PPUSH
44476: CALL_OW 255
44480: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44481: LD_VAR 0 9
44485: PPUSH
44486: LD_VAR 0 2
44490: PPUSH
44491: CALL 43975 0 2
44495: NOT
44496: IFFALSE 44500
// exit ;
44498: GO 45202
// pom := GetBase ( depot ) ;
44500: LD_ADDR_VAR 0 10
44504: PUSH
44505: LD_VAR 0 1
44509: PPUSH
44510: CALL_OW 274
44514: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44515: LD_ADDR_VAR 0 11
44519: PUSH
44520: LD_VAR 0 2
44524: PPUSH
44525: LD_VAR 0 1
44529: PPUSH
44530: CALL_OW 248
44534: PPUSH
44535: CALL_OW 450
44539: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44540: LD_VAR 0 10
44544: PPUSH
44545: LD_INT 1
44547: PPUSH
44548: CALL_OW 275
44552: PUSH
44553: LD_VAR 0 11
44557: PUSH
44558: LD_INT 1
44560: ARRAY
44561: GREATEREQUAL
44562: PUSH
44563: LD_VAR 0 10
44567: PPUSH
44568: LD_INT 2
44570: PPUSH
44571: CALL_OW 275
44575: PUSH
44576: LD_VAR 0 11
44580: PUSH
44581: LD_INT 2
44583: ARRAY
44584: GREATEREQUAL
44585: AND
44586: PUSH
44587: LD_VAR 0 10
44591: PPUSH
44592: LD_INT 3
44594: PPUSH
44595: CALL_OW 275
44599: PUSH
44600: LD_VAR 0 11
44604: PUSH
44605: LD_INT 3
44607: ARRAY
44608: GREATEREQUAL
44609: AND
44610: NOT
44611: IFFALSE 44615
// exit ;
44613: GO 45202
// if GetBType ( depot ) = b_depot then
44615: LD_VAR 0 1
44619: PPUSH
44620: CALL_OW 266
44624: PUSH
44625: LD_INT 0
44627: EQUAL
44628: IFFALSE 44640
// dist := 28 else
44630: LD_ADDR_VAR 0 14
44634: PUSH
44635: LD_INT 28
44637: ST_TO_ADDR
44638: GO 44648
// dist := 36 ;
44640: LD_ADDR_VAR 0 14
44644: PUSH
44645: LD_INT 36
44647: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44648: LD_VAR 0 1
44652: PPUSH
44653: LD_VAR 0 3
44657: PPUSH
44658: LD_VAR 0 4
44662: PPUSH
44663: CALL_OW 297
44667: PUSH
44668: LD_VAR 0 14
44672: GREATER
44673: IFFALSE 44677
// exit ;
44675: GO 45202
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44677: LD_ADDR_VAR 0 12
44681: PUSH
44682: LD_VAR 0 2
44686: PPUSH
44687: LD_VAR 0 3
44691: PPUSH
44692: LD_VAR 0 4
44696: PPUSH
44697: LD_VAR 0 5
44701: PPUSH
44702: LD_VAR 0 1
44706: PPUSH
44707: CALL_OW 248
44711: PPUSH
44712: LD_INT 0
44714: PPUSH
44715: CALL 45207 0 6
44719: ST_TO_ADDR
// if not hexes then
44720: LD_VAR 0 12
44724: NOT
44725: IFFALSE 44729
// exit ;
44727: GO 45202
// hex := GetHexInfo ( x , y ) ;
44729: LD_ADDR_VAR 0 15
44733: PUSH
44734: LD_VAR 0 3
44738: PPUSH
44739: LD_VAR 0 4
44743: PPUSH
44744: CALL_OW 546
44748: ST_TO_ADDR
// if hex [ 1 ] then
44749: LD_VAR 0 15
44753: PUSH
44754: LD_INT 1
44756: ARRAY
44757: IFFALSE 44761
// exit ;
44759: GO 45202
// height := hex [ 2 ] ;
44761: LD_ADDR_VAR 0 13
44765: PUSH
44766: LD_VAR 0 15
44770: PUSH
44771: LD_INT 2
44773: ARRAY
44774: ST_TO_ADDR
// for i = 1 to hexes do
44775: LD_ADDR_VAR 0 7
44779: PUSH
44780: DOUBLE
44781: LD_INT 1
44783: DEC
44784: ST_TO_ADDR
44785: LD_VAR 0 12
44789: PUSH
44790: FOR_TO
44791: IFFALSE 45121
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44793: LD_VAR 0 12
44797: PUSH
44798: LD_VAR 0 7
44802: ARRAY
44803: PUSH
44804: LD_INT 1
44806: ARRAY
44807: PPUSH
44808: LD_VAR 0 12
44812: PUSH
44813: LD_VAR 0 7
44817: ARRAY
44818: PUSH
44819: LD_INT 2
44821: ARRAY
44822: PPUSH
44823: CALL_OW 488
44827: NOT
44828: PUSH
44829: LD_VAR 0 12
44833: PUSH
44834: LD_VAR 0 7
44838: ARRAY
44839: PUSH
44840: LD_INT 1
44842: ARRAY
44843: PPUSH
44844: LD_VAR 0 12
44848: PUSH
44849: LD_VAR 0 7
44853: ARRAY
44854: PUSH
44855: LD_INT 2
44857: ARRAY
44858: PPUSH
44859: CALL_OW 428
44863: PUSH
44864: LD_INT 0
44866: GREATER
44867: OR
44868: PUSH
44869: LD_VAR 0 12
44873: PUSH
44874: LD_VAR 0 7
44878: ARRAY
44879: PUSH
44880: LD_INT 1
44882: ARRAY
44883: PPUSH
44884: LD_VAR 0 12
44888: PUSH
44889: LD_VAR 0 7
44893: ARRAY
44894: PUSH
44895: LD_INT 2
44897: ARRAY
44898: PPUSH
44899: CALL_OW 351
44903: OR
44904: IFFALSE 44910
// exit ;
44906: POP
44907: POP
44908: GO 45202
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44910: LD_ADDR_VAR 0 8
44914: PUSH
44915: LD_VAR 0 12
44919: PUSH
44920: LD_VAR 0 7
44924: ARRAY
44925: PUSH
44926: LD_INT 1
44928: ARRAY
44929: PPUSH
44930: LD_VAR 0 12
44934: PUSH
44935: LD_VAR 0 7
44939: ARRAY
44940: PUSH
44941: LD_INT 2
44943: ARRAY
44944: PPUSH
44945: CALL_OW 546
44949: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44950: LD_VAR 0 8
44954: PUSH
44955: LD_INT 1
44957: ARRAY
44958: PUSH
44959: LD_VAR 0 8
44963: PUSH
44964: LD_INT 2
44966: ARRAY
44967: PUSH
44968: LD_VAR 0 13
44972: PUSH
44973: LD_INT 2
44975: PLUS
44976: GREATER
44977: OR
44978: PUSH
44979: LD_VAR 0 8
44983: PUSH
44984: LD_INT 2
44986: ARRAY
44987: PUSH
44988: LD_VAR 0 13
44992: PUSH
44993: LD_INT 2
44995: MINUS
44996: LESS
44997: OR
44998: PUSH
44999: LD_VAR 0 8
45003: PUSH
45004: LD_INT 3
45006: ARRAY
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: LD_INT 8
45013: PUSH
45014: LD_INT 9
45016: PUSH
45017: LD_INT 10
45019: PUSH
45020: LD_INT 11
45022: PUSH
45023: LD_INT 12
45025: PUSH
45026: LD_INT 13
45028: PUSH
45029: LD_INT 16
45031: PUSH
45032: LD_INT 17
45034: PUSH
45035: LD_INT 18
45037: PUSH
45038: LD_INT 19
45040: PUSH
45041: LD_INT 20
45043: PUSH
45044: LD_INT 21
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: IN
45062: NOT
45063: OR
45064: PUSH
45065: LD_VAR 0 8
45069: PUSH
45070: LD_INT 5
45072: ARRAY
45073: NOT
45074: OR
45075: PUSH
45076: LD_VAR 0 8
45080: PUSH
45081: LD_INT 6
45083: ARRAY
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: LD_INT 2
45090: PUSH
45091: LD_INT 7
45093: PUSH
45094: LD_INT 9
45096: PUSH
45097: LD_INT 10
45099: PUSH
45100: LD_INT 11
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: IN
45111: NOT
45112: OR
45113: IFFALSE 45119
// exit ;
45115: POP
45116: POP
45117: GO 45202
// end ;
45119: GO 44790
45121: POP
45122: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45123: LD_VAR 0 9
45127: PPUSH
45128: LD_VAR 0 3
45132: PPUSH
45133: LD_VAR 0 4
45137: PPUSH
45138: LD_INT 20
45140: PPUSH
45141: CALL 37147 0 4
45145: PUSH
45146: LD_INT 4
45148: ARRAY
45149: IFFALSE 45153
// exit ;
45151: GO 45202
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45153: LD_VAR 0 2
45157: PUSH
45158: LD_INT 29
45160: PUSH
45161: LD_INT 30
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: IN
45168: PUSH
45169: LD_VAR 0 3
45173: PPUSH
45174: LD_VAR 0 4
45178: PPUSH
45179: LD_VAR 0 9
45183: PPUSH
45184: CALL_OW 440
45188: NOT
45189: AND
45190: IFFALSE 45194
// exit ;
45192: GO 45202
// result := true ;
45194: LD_ADDR_VAR 0 6
45198: PUSH
45199: LD_INT 1
45201: ST_TO_ADDR
// end ;
45202: LD_VAR 0 6
45206: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45207: LD_INT 0
45209: PPUSH
45210: PPUSH
45211: PPUSH
45212: PPUSH
45213: PPUSH
45214: PPUSH
45215: PPUSH
45216: PPUSH
45217: PPUSH
45218: PPUSH
45219: PPUSH
45220: PPUSH
45221: PPUSH
45222: PPUSH
45223: PPUSH
45224: PPUSH
45225: PPUSH
45226: PPUSH
45227: PPUSH
45228: PPUSH
45229: PPUSH
45230: PPUSH
45231: PPUSH
45232: PPUSH
45233: PPUSH
45234: PPUSH
45235: PPUSH
45236: PPUSH
45237: PPUSH
45238: PPUSH
45239: PPUSH
45240: PPUSH
45241: PPUSH
45242: PPUSH
45243: PPUSH
45244: PPUSH
45245: PPUSH
45246: PPUSH
45247: PPUSH
45248: PPUSH
45249: PPUSH
45250: PPUSH
45251: PPUSH
45252: PPUSH
45253: PPUSH
45254: PPUSH
45255: PPUSH
45256: PPUSH
45257: PPUSH
45258: PPUSH
45259: PPUSH
45260: PPUSH
45261: PPUSH
45262: PPUSH
45263: PPUSH
45264: PPUSH
45265: PPUSH
45266: PPUSH
// result = [ ] ;
45267: LD_ADDR_VAR 0 7
45271: PUSH
45272: EMPTY
45273: ST_TO_ADDR
// temp_list = [ ] ;
45274: LD_ADDR_VAR 0 9
45278: PUSH
45279: EMPTY
45280: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45281: LD_VAR 0 4
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: LD_INT 3
45297: PUSH
45298: LD_INT 4
45300: PUSH
45301: LD_INT 5
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: IN
45312: NOT
45313: PUSH
45314: LD_VAR 0 1
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: IN
45329: PUSH
45330: LD_VAR 0 5
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: LD_INT 2
45340: PUSH
45341: LD_INT 3
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: LIST
45348: IN
45349: NOT
45350: AND
45351: OR
45352: IFFALSE 45356
// exit ;
45354: GO 63747
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45356: LD_VAR 0 1
45360: PUSH
45361: LD_INT 6
45363: PUSH
45364: LD_INT 7
45366: PUSH
45367: LD_INT 8
45369: PUSH
45370: LD_INT 13
45372: PUSH
45373: LD_INT 12
45375: PUSH
45376: LD_INT 15
45378: PUSH
45379: LD_INT 11
45381: PUSH
45382: LD_INT 14
45384: PUSH
45385: LD_INT 10
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: IN
45399: IFFALSE 45409
// btype = b_lab ;
45401: LD_ADDR_VAR 0 1
45405: PUSH
45406: LD_INT 6
45408: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45409: LD_VAR 0 6
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: LIST
45427: IN
45428: NOT
45429: PUSH
45430: LD_VAR 0 1
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: LD_INT 1
45440: PUSH
45441: LD_INT 2
45443: PUSH
45444: LD_INT 3
45446: PUSH
45447: LD_INT 6
45449: PUSH
45450: LD_INT 36
45452: PUSH
45453: LD_INT 4
45455: PUSH
45456: LD_INT 5
45458: PUSH
45459: LD_INT 31
45461: PUSH
45462: LD_INT 32
45464: PUSH
45465: LD_INT 33
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: IN
45481: NOT
45482: PUSH
45483: LD_VAR 0 6
45487: PUSH
45488: LD_INT 1
45490: EQUAL
45491: AND
45492: OR
45493: PUSH
45494: LD_VAR 0 1
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: LD_INT 3
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: IN
45509: NOT
45510: PUSH
45511: LD_VAR 0 6
45515: PUSH
45516: LD_INT 2
45518: EQUAL
45519: AND
45520: OR
45521: IFFALSE 45531
// mode = 0 ;
45523: LD_ADDR_VAR 0 6
45527: PUSH
45528: LD_INT 0
45530: ST_TO_ADDR
// case mode of 0 :
45531: LD_VAR 0 6
45535: PUSH
45536: LD_INT 0
45538: DOUBLE
45539: EQUAL
45540: IFTRUE 45544
45542: GO 56997
45544: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45545: LD_ADDR_VAR 0 11
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: LD_INT 2
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: LD_INT 2
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: LD_INT 3
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 3
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45738: LD_ADDR_VAR 0 12
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 2
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: NEG
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 3
45895: NEG
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 3
45906: NEG
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45934: LD_ADDR_VAR 0 13
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: LD_INT 1
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: LD_INT 2
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 2
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 2
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: LD_INT 2
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: LD_INT 3
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 3
46093: NEG
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 3
46105: NEG
46106: PUSH
46107: LD_INT 3
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46133: LD_ADDR_VAR 0 14
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: LD_INT 2
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: LD_INT 3
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: LD_INT 3
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46329: LD_ADDR_VAR 0 15
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 2
46452: NEG
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 2
46463: NEG
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 3
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 3
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46522: LD_ADDR_VAR 0 16
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: LD_INT 2
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: LD_INT 2
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: NEG
46658: PUSH
46659: LD_INT 2
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 3
46669: PUSH
46670: LD_INT 2
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: LD_INT 3
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 2
46689: PUSH
46690: LD_INT 3
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46715: LD_ADDR_VAR 0 17
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: LD_INT 2
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 2
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 2
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: LD_INT 2
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 2
46891: NEG
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: NEG
46915: PUSH
46916: LD_INT 2
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46945: LD_ADDR_VAR 0 18
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 1
47003: NEG
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: LD_INT 2
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: LD_INT 2
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 2
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 2
47121: NEG
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 2
47132: NEG
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 2
47144: NEG
47145: PUSH
47146: LD_INT 2
47148: NEG
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47175: LD_ADDR_VAR 0 19
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: LD_INT 2
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 2
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: NEG
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47405: LD_ADDR_VAR 0 20
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: LD_INT 2
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 2
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: LD_INT 2
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47635: LD_ADDR_VAR 0 21
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 2
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: LD_INT 2
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: LD_INT 2
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47865: LD_ADDR_VAR 0 22
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: LD_INT 2
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 2
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: LD_INT 2
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: LD_INT 2
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 2
48041: NEG
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: NEG
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: LD_INT 2
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48095: LD_ADDR_VAR 0 23
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: LD_INT 2
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 2
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 2
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: NEG
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: NEG
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: LD_INT 2
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: LD_INT 3
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: LD_INT 3
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 2
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48375: LD_ADDR_VAR 0 24
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 2
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 2
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 2
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: PUSH
48511: LD_INT 2
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 2
48551: NEG
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 2
48562: NEG
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: LD_INT 2
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 2
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 3
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 3
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48651: LD_ADDR_VAR 0 25
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 2
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 2
48786: PUSH
48787: LD_INT 2
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 2
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 2
48827: NEG
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 2
48838: NEG
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 2
48850: NEG
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 3
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 3
48872: PUSH
48873: LD_INT 2
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 2
48882: PUSH
48883: LD_INT 3
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: LD_INT 3
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48925: LD_ADDR_VAR 0 26
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: LD_INT 2
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 2
49060: PUSH
49061: LD_INT 2
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: LD_INT 2
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: NEG
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 2
49112: NEG
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 2
49124: NEG
49125: PUSH
49126: LD_INT 2
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: PUSH
49137: LD_INT 3
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: LD_INT 3
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: LD_INT 2
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 2
49167: NEG
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49201: LD_ADDR_VAR 0 27
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: NEG
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: NEG
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: LD_INT 2
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 2
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 2
49336: PUSH
49337: LD_INT 2
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: NEG
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 2
49400: NEG
49401: PUSH
49402: LD_INT 2
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: NEG
49413: PUSH
49414: LD_INT 2
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 2
49423: NEG
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 3
49434: NEG
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 3
49446: NEG
49447: PUSH
49448: LD_INT 2
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49481: LD_ADDR_VAR 0 28
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: LD_INT 2
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 2
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 2
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: LD_INT 2
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: LD_INT 2
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 2
49657: NEG
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 2
49668: NEG
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 2
49680: NEG
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: LD_INT 3
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: LD_INT 3
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 3
49716: NEG
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 3
49728: NEG
49729: PUSH
49730: LD_INT 2
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49763: LD_ADDR_VAR 0 29
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: LD_INT 2
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: LD_INT 2
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 2
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: LD_INT 2
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 2
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: LD_INT 2
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: LD_INT 3
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 2
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 3
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: LD_INT 3
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 3
50007: NEG
50008: PUSH
50009: LD_INT 2
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50042: LD_ADDR_VAR 0 30
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: LD_INT 2
50127: NEG
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: LD_INT 2
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 2
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 2
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: LD_INT 2
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: NEG
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 2
50219: NEG
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: LD_INT 3
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: LD_INT 2
50246: NEG
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 3
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 2
50264: PUSH
50265: LD_INT 3
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 2
50274: NEG
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 3
50285: NEG
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50320: LD_ADDR_VAR 0 31
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: LD_INT 2
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 2
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: LD_INT 2
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: LD_INT 2
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 2
50485: NEG
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: NEG
50498: PUSH
50499: LD_INT 2
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: NEG
50510: PUSH
50511: LD_INT 3
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 2
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 3
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: LD_INT 3
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 3
50563: NEG
50564: PUSH
50565: LD_INT 2
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50598: LD_ADDR_VAR 0 32
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: LD_INT 2
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 2
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 2
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: LD_INT 2
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: LD_INT 2
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 2
50764: NEG
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: LD_INT 3
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: LD_INT 2
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 3
50810: PUSH
50811: LD_INT 2
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 2
50820: PUSH
50821: LD_INT 3
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 2
50830: NEG
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 3
50841: NEG
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50876: LD_ADDR_VAR 0 33
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: LD_INT 2
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 2
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: LD_INT 2
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: LD_INT 2
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: NEG
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: LD_INT 2
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 2
51066: NEG
51067: PUSH
51068: LD_INT 3
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 2
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 3
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 3
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: LD_INT 2
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 3
51120: NEG
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51155: LD_ADDR_VAR 0 34
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: LD_INT 1
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 1
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: LD_INT 2
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 2
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: LD_INT 2
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: LD_INT 2
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 2
51311: NEG
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 2
51322: NEG
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: LD_INT 2
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: LD_INT 3
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 2
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 3
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 2
51379: PUSH
51380: LD_INT 3
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 2
51389: NEG
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 3
51400: NEG
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51435: LD_ADDR_VAR 0 35
51439: PUSH
51440: LD_INT 0
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51547: LD_ADDR_VAR 0 36
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51659: LD_ADDR_VAR 0 37
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51771: LD_ADDR_VAR 0 38
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51883: LD_ADDR_VAR 0 39
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 2
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: LD_INT 2
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51995: LD_ADDR_VAR 0 40
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: LD_INT 1
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52107: LD_ADDR_VAR 0 41
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: LD_INT 1
52127: NEG
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: LD_INT 1
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: LD_INT 2
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: LD_INT 1
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 2
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 2
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 2
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: LD_INT 2
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 2
52262: NEG
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 2
52273: NEG
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 2
52285: NEG
52286: PUSH
52287: LD_INT 2
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: NEG
52298: PUSH
52299: LD_INT 3
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 3
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 3
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 3
52340: PUSH
52341: LD_INT 2
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 3
52350: PUSH
52351: LD_INT 3
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 2
52360: PUSH
52361: LD_INT 3
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 2
52370: NEG
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 3
52381: NEG
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 3
52392: NEG
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 3
52404: NEG
52405: PUSH
52406: LD_INT 2
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 3
52416: NEG
52417: PUSH
52418: LD_INT 3
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52457: LD_ADDR_VAR 0 42
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: LD_INT 2
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 2
52582: PUSH
52583: LD_INT 2
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 2
52635: NEG
52636: PUSH
52637: LD_INT 2
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 2
52647: NEG
52648: PUSH
52649: LD_INT 3
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 3
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 3
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 2
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 3
52693: PUSH
52694: LD_INT 2
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 3
52703: PUSH
52704: LD_INT 3
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: LD_INT 3
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: LD_INT 3
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 3
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 3
52754: NEG
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 3
52766: NEG
52767: PUSH
52768: LD_INT 3
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52807: LD_ADDR_VAR 0 43
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: LD_INT 2
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: LD_INT 2
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 2
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 2
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: LD_INT 2
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: LD_INT 2
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 2
52973: NEG
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 2
52984: NEG
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: LD_INT 3
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: LD_INT 3
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: LD_INT 2
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 2
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 3
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 3
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 3
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: LD_INT 3
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 2
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 3
53103: NEG
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 3
53114: NEG
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53155: LD_ADDR_VAR 0 44
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: LD_INT 2
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 2
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 2
53279: PUSH
53280: LD_INT 2
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: LD_INT 2
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 2
53310: NEG
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 2
53321: NEG
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: LD_INT 3
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 2
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 3
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 3
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 3
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 3
53398: PUSH
53399: LD_INT 3
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: LD_INT 3
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 2
53418: NEG
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 3
53429: NEG
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 3
53440: NEG
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 3
53452: NEG
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 3
53464: NEG
53465: PUSH
53466: LD_INT 3
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53505: LD_ADDR_VAR 0 45
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: LD_INT 2
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: LD_INT 2
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 2
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 2
53630: PUSH
53631: LD_INT 2
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: LD_INT 2
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 2
53671: NEG
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 2
53683: NEG
53684: PUSH
53685: LD_INT 2
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: LD_INT 3
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 3
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: LD_INT 3
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 2
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 3
53741: PUSH
53742: LD_INT 2
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 3
53751: PUSH
53752: LD_INT 3
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: LD_INT 3
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: LD_INT 3
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: LD_INT 3
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 3
53802: NEG
53803: PUSH
53804: LD_INT 2
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 3
53814: NEG
53815: PUSH
53816: LD_INT 3
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53855: LD_ADDR_VAR 0 46
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: LD_INT 2
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 2
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 2
54021: NEG
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 2
54032: NEG
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: LD_INT 3
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 3
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: LD_INT 2
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 2
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 3
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 3
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: LD_INT 3
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: LD_INT 3
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: LD_INT 2
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 2
54140: NEG
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 3
54151: NEG
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 3
54162: NEG
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54203: LD_ADDR_VAR 0 47
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: LD_INT 1
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: LD_INT 2
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 2
54318: NEG
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 2
54330: NEG
54331: PUSH
54332: LD_INT 2
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54354: LD_ADDR_VAR 0 48
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: LD_INT 2
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: LD_INT 2
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54501: LD_ADDR_VAR 0 49
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 2
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 2
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 2
54613: PUSH
54614: LD_INT 2
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54645: LD_ADDR_VAR 0 50
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 2
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: LD_INT 2
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: LD_INT 2
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54789: LD_ADDR_VAR 0 51
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: LD_INT 2
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 2
54901: NEG
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 2
54912: NEG
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54936: LD_ADDR_VAR 0 52
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: LD_INT 2
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 2
55040: NEG
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 2
55051: NEG
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55087: LD_ADDR_VAR 0 53
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: LD_INT 1
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: NEG
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: LD_INT 2
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 2
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 2
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 2
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 2
55263: NEG
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 2
55274: NEG
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 2
55286: NEG
55287: PUSH
55288: LD_INT 2
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55317: LD_ADDR_VAR 0 54
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: LD_INT 2
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 2
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 2
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 2
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 2
55493: NEG
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: LD_INT 1
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: LD_INT 2
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55547: LD_ADDR_VAR 0 55
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: LD_INT 1
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 2
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: LD_INT 2
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: NEG
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 2
55746: NEG
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55777: LD_ADDR_VAR 0 56
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: LD_INT 2
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: LD_INT 2
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 2
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 2
55912: PUSH
55913: LD_INT 2
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: LD_INT 2
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 2
55953: NEG
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: NEG
55977: PUSH
55978: LD_INT 2
55980: NEG
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56007: LD_ADDR_VAR 0 57
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: PUSH
56143: LD_INT 2
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 2
56183: NEG
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: NEG
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: NEG
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56237: LD_ADDR_VAR 0 58
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: LD_INT 2
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 2
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 2
56413: NEG
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: NEG
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 2
56436: NEG
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56467: LD_ADDR_VAR 0 59
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56555: LD_ADDR_VAR 0 60
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 1
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56643: LD_ADDR_VAR 0 61
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: NEG
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56731: LD_ADDR_VAR 0 62
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56819: LD_ADDR_VAR 0 63
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56907: LD_ADDR_VAR 0 64
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 0
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 1
56965: NEG
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: ST_TO_ADDR
// end ; 1 :
56995: GO 62892
56997: LD_INT 1
56999: DOUBLE
57000: EQUAL
57001: IFTRUE 57005
57003: GO 59628
57005: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57006: LD_ADDR_VAR 0 11
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: LD_INT 3
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: LD_INT 3
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: LD_INT 2
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: LIST
57049: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57050: LD_ADDR_VAR 0 12
57054: PUSH
57055: LD_INT 2
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 3
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 3
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: LIST
57090: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57091: LD_ADDR_VAR 0 13
57095: PUSH
57096: LD_INT 3
57098: PUSH
57099: LD_INT 2
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 3
57108: PUSH
57109: LD_INT 3
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 2
57118: PUSH
57119: LD_INT 3
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: LIST
57130: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57131: LD_ADDR_VAR 0 14
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: LD_INT 3
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: LD_INT 3
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: LD_INT 2
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: LIST
57171: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57172: LD_ADDR_VAR 0 15
57176: PUSH
57177: LD_INT 2
57179: NEG
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 3
57190: NEG
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 3
57201: NEG
57202: PUSH
57203: LD_INT 1
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: LIST
57215: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57216: LD_ADDR_VAR 0 16
57220: PUSH
57221: LD_INT 2
57223: NEG
57224: PUSH
57225: LD_INT 3
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 3
57235: NEG
57236: PUSH
57237: LD_INT 2
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 3
57247: NEG
57248: PUSH
57249: LD_INT 3
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: LIST
57261: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57262: LD_ADDR_VAR 0 17
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: LD_INT 3
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: LD_INT 3
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: LD_INT 2
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: LIST
57305: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57306: LD_ADDR_VAR 0 18
57310: PUSH
57311: LD_INT 2
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 3
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 3
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: LIST
57346: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57347: LD_ADDR_VAR 0 19
57351: PUSH
57352: LD_INT 3
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 3
57364: PUSH
57365: LD_INT 3
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: LD_INT 3
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: LIST
57386: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57387: LD_ADDR_VAR 0 20
57391: PUSH
57392: LD_INT 1
57394: PUSH
57395: LD_INT 3
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: LD_INT 3
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: LD_INT 2
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: LIST
57427: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57428: LD_ADDR_VAR 0 21
57432: PUSH
57433: LD_INT 2
57435: NEG
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 3
57446: NEG
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 3
57457: NEG
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: LIST
57471: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57472: LD_ADDR_VAR 0 22
57476: PUSH
57477: LD_INT 2
57479: NEG
57480: PUSH
57481: LD_INT 3
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 3
57491: NEG
57492: PUSH
57493: LD_INT 2
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 3
57503: NEG
57504: PUSH
57505: LD_INT 3
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: LIST
57517: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57518: LD_ADDR_VAR 0 23
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: LD_INT 3
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: LD_INT 4
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: LD_INT 3
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: LIST
57561: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57562: LD_ADDR_VAR 0 24
57566: PUSH
57567: LD_INT 3
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 3
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 4
57590: PUSH
57591: LD_INT 1
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: LIST
57602: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57603: LD_ADDR_VAR 0 25
57607: PUSH
57608: LD_INT 3
57610: PUSH
57611: LD_INT 3
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 4
57620: PUSH
57621: LD_INT 3
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 3
57630: PUSH
57631: LD_INT 4
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: LIST
57642: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57643: LD_ADDR_VAR 0 26
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: LD_INT 3
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: LD_INT 4
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: LD_INT 3
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: LIST
57683: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57684: LD_ADDR_VAR 0 27
57688: PUSH
57689: LD_INT 3
57691: NEG
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 3
57702: NEG
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 4
57713: NEG
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: LIST
57727: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57728: LD_ADDR_VAR 0 28
57732: PUSH
57733: LD_INT 3
57735: NEG
57736: PUSH
57737: LD_INT 3
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 3
57747: NEG
57748: PUSH
57749: LD_INT 4
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 4
57759: NEG
57760: PUSH
57761: LD_INT 3
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: LIST
57773: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57774: LD_ADDR_VAR 0 29
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: LD_INT 3
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: LD_INT 3
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: LD_INT 2
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 4
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: LD_INT 4
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: LD_INT 3
57841: NEG
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 1
57849: NEG
57850: PUSH
57851: LD_INT 5
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: LD_INT 5
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: PUSH
57873: LD_INT 4
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: LD_INT 6
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: LD_INT 6
57898: NEG
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: LD_INT 5
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57929: LD_ADDR_VAR 0 30
57933: PUSH
57934: LD_INT 2
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 3
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 3
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 3
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 4
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 4
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 4
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 5
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 5
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 5
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 6
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 6
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58072: LD_ADDR_VAR 0 31
58076: PUSH
58077: LD_INT 3
58079: PUSH
58080: LD_INT 2
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 3
58089: PUSH
58090: LD_INT 3
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: LD_INT 3
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 4
58109: PUSH
58110: LD_INT 3
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 4
58119: PUSH
58120: LD_INT 4
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 3
58129: PUSH
58130: LD_INT 4
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 5
58139: PUSH
58140: LD_INT 4
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 5
58149: PUSH
58150: LD_INT 5
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 4
58159: PUSH
58160: LD_INT 5
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 6
58169: PUSH
58170: LD_INT 5
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 6
58179: PUSH
58180: LD_INT 6
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 5
58189: PUSH
58190: LD_INT 6
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58211: LD_ADDR_VAR 0 32
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: LD_INT 3
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: LD_INT 3
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: LD_INT 4
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: LD_INT 4
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: LD_INT 3
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: LD_INT 5
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 0
58290: PUSH
58291: LD_INT 5
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: NEG
58301: PUSH
58302: LD_INT 4
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: LD_INT 6
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: LD_INT 6
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 1
58331: NEG
58332: PUSH
58333: LD_INT 5
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58354: LD_ADDR_VAR 0 33
58358: PUSH
58359: LD_INT 2
58361: NEG
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 3
58372: NEG
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 3
58383: NEG
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 3
58395: NEG
58396: PUSH
58397: LD_INT 1
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 4
58406: NEG
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 4
58417: NEG
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 4
58429: NEG
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 5
58440: NEG
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 5
58451: NEG
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 5
58463: NEG
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 6
58474: NEG
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 6
58485: NEG
58486: PUSH
58487: LD_INT 1
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58509: LD_ADDR_VAR 0 34
58513: PUSH
58514: LD_INT 2
58516: NEG
58517: PUSH
58518: LD_INT 3
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 3
58528: NEG
58529: PUSH
58530: LD_INT 2
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 3
58540: NEG
58541: PUSH
58542: LD_INT 3
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 3
58552: NEG
58553: PUSH
58554: LD_INT 4
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 4
58564: NEG
58565: PUSH
58566: LD_INT 3
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 4
58576: NEG
58577: PUSH
58578: LD_INT 4
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 4
58588: NEG
58589: PUSH
58590: LD_INT 5
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 5
58600: NEG
58601: PUSH
58602: LD_INT 4
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 5
58612: NEG
58613: PUSH
58614: LD_INT 5
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 5
58624: NEG
58625: PUSH
58626: LD_INT 6
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 6
58636: NEG
58637: PUSH
58638: LD_INT 5
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 6
58648: NEG
58649: PUSH
58650: LD_INT 6
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58672: LD_ADDR_VAR 0 41
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: LD_INT 3
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: LD_INT 2
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: LIST
58715: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58716: LD_ADDR_VAR 0 42
58720: PUSH
58721: LD_INT 2
58723: PUSH
58724: LD_INT 0
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 2
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 3
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: LIST
58756: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58757: LD_ADDR_VAR 0 43
58761: PUSH
58762: LD_INT 2
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 3
58774: PUSH
58775: LD_INT 2
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: LD_INT 3
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: LIST
58796: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58797: LD_ADDR_VAR 0 44
58801: PUSH
58802: LD_INT 0
58804: PUSH
58805: LD_INT 2
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: LD_INT 3
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: LIST
58837: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58838: LD_ADDR_VAR 0 45
58842: PUSH
58843: LD_INT 2
58845: NEG
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 2
58856: NEG
58857: PUSH
58858: LD_INT 1
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 3
58867: NEG
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: LIST
58881: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58882: LD_ADDR_VAR 0 46
58886: PUSH
58887: LD_INT 2
58889: NEG
58890: PUSH
58891: LD_INT 2
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 2
58901: NEG
58902: PUSH
58903: LD_INT 3
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 3
58913: NEG
58914: PUSH
58915: LD_INT 2
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: LIST
58927: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58928: LD_ADDR_VAR 0 47
58932: PUSH
58933: LD_INT 2
58935: NEG
58936: PUSH
58937: LD_INT 3
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 1
58947: NEG
58948: PUSH
58949: LD_INT 3
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58961: LD_ADDR_VAR 0 48
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: LD_INT 2
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 2
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58992: LD_ADDR_VAR 0 49
58996: PUSH
58997: LD_INT 3
58999: PUSH
59000: LD_INT 1
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 3
59009: PUSH
59010: LD_INT 2
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59021: LD_ADDR_VAR 0 50
59025: PUSH
59026: LD_INT 2
59028: PUSH
59029: LD_INT 3
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: LD_INT 3
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59050: LD_ADDR_VAR 0 51
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: LD_INT 2
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 2
59068: NEG
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59081: LD_ADDR_VAR 0 52
59085: PUSH
59086: LD_INT 3
59088: NEG
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 3
59100: NEG
59101: PUSH
59102: LD_INT 2
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59114: LD_ADDR_VAR 0 53
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: LD_INT 3
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: LD_INT 3
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 1
59144: PUSH
59145: LD_INT 2
59147: NEG
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: LIST
59157: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59158: LD_ADDR_VAR 0 54
59162: PUSH
59163: LD_INT 2
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 3
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 3
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: LIST
59198: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59199: LD_ADDR_VAR 0 55
59203: PUSH
59204: LD_INT 3
59206: PUSH
59207: LD_INT 2
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 3
59216: PUSH
59217: LD_INT 3
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 2
59226: PUSH
59227: LD_INT 3
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: LIST
59238: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59239: LD_ADDR_VAR 0 56
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: LD_INT 3
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: LD_INT 3
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: LD_INT 2
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: LIST
59279: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59280: LD_ADDR_VAR 0 57
59284: PUSH
59285: LD_INT 2
59287: NEG
59288: PUSH
59289: LD_INT 1
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 3
59298: NEG
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 3
59309: NEG
59310: PUSH
59311: LD_INT 1
59313: NEG
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: LIST
59323: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59324: LD_ADDR_VAR 0 58
59328: PUSH
59329: LD_INT 2
59331: NEG
59332: PUSH
59333: LD_INT 3
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 3
59343: NEG
59344: PUSH
59345: LD_INT 2
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 3
59355: NEG
59356: PUSH
59357: LD_INT 3
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: LIST
59369: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59370: LD_ADDR_VAR 0 59
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: PUSH
59379: LD_INT 2
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 0
59389: PUSH
59390: LD_INT 2
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: LIST
59413: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59414: LD_ADDR_VAR 0 60
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: LIST
59454: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59455: LD_ADDR_VAR 0 61
59459: PUSH
59460: LD_INT 2
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 2
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: PUSH
59483: LD_INT 2
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: LIST
59494: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59495: LD_ADDR_VAR 0 62
59499: PUSH
59500: LD_INT 1
59502: PUSH
59503: LD_INT 2
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: LD_INT 2
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: LD_INT 1
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: LIST
59535: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59536: LD_ADDR_VAR 0 63
59540: PUSH
59541: LD_INT 1
59543: NEG
59544: PUSH
59545: LD_INT 1
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 2
59554: NEG
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 2
59565: NEG
59566: PUSH
59567: LD_INT 1
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: LIST
59579: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59580: LD_ADDR_VAR 0 64
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: LD_INT 2
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 2
59599: NEG
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 2
59611: NEG
59612: PUSH
59613: LD_INT 2
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: LIST
59625: ST_TO_ADDR
// end ; 2 :
59626: GO 62892
59628: LD_INT 2
59630: DOUBLE
59631: EQUAL
59632: IFTRUE 59636
59634: GO 62891
59636: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59637: LD_ADDR_VAR 0 29
59641: PUSH
59642: LD_INT 4
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 4
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 5
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 5
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 4
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 3
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 3
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 3
59716: PUSH
59717: LD_INT 2
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 5
59727: PUSH
59728: LD_INT 2
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 3
59737: PUSH
59738: LD_INT 3
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 3
59747: PUSH
59748: LD_INT 2
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 4
59757: PUSH
59758: LD_INT 3
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 4
59767: PUSH
59768: LD_INT 4
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 3
59777: PUSH
59778: LD_INT 4
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 2
59787: PUSH
59788: LD_INT 3
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 2
59797: PUSH
59798: LD_INT 2
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 4
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: LD_INT 4
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: LD_INT 4
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: LD_INT 3
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: LD_INT 4
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: LD_INT 5
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: LD_INT 5
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: LD_INT 4
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: LD_INT 3
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 2
59899: PUSH
59900: LD_INT 5
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 2
59909: NEG
59910: PUSH
59911: LD_INT 3
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 3
59920: NEG
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 3
59931: NEG
59932: PUSH
59933: LD_INT 1
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 2
59943: NEG
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: NEG
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 3
59965: NEG
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 4
59976: NEG
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 4
59987: NEG
59988: PUSH
59989: LD_INT 1
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 4
59999: NEG
60000: PUSH
60001: LD_INT 2
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 2
60011: NEG
60012: PUSH
60013: LD_INT 2
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 4
60022: NEG
60023: PUSH
60024: LD_INT 4
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 4
60034: NEG
60035: PUSH
60036: LD_INT 5
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 3
60046: NEG
60047: PUSH
60048: LD_INT 4
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 3
60058: NEG
60059: PUSH
60060: LD_INT 3
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 4
60070: NEG
60071: PUSH
60072: LD_INT 3
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 5
60082: NEG
60083: PUSH
60084: LD_INT 4
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 5
60094: NEG
60095: PUSH
60096: LD_INT 5
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 3
60106: NEG
60107: PUSH
60108: LD_INT 5
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 5
60118: NEG
60119: PUSH
60120: LD_INT 3
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60175: LD_ADDR_VAR 0 30
60179: PUSH
60180: LD_INT 4
60182: PUSH
60183: LD_INT 4
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 4
60192: PUSH
60193: LD_INT 3
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 5
60202: PUSH
60203: LD_INT 4
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 5
60212: PUSH
60213: LD_INT 5
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 4
60222: PUSH
60223: LD_INT 5
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 3
60232: PUSH
60233: LD_INT 4
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 3
60242: PUSH
60243: LD_INT 3
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 5
60252: PUSH
60253: LD_INT 3
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 3
60262: PUSH
60263: LD_INT 5
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: LD_INT 3
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: LD_INT 2
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: PUSH
60293: LD_INT 3
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 1
60302: PUSH
60303: LD_INT 4
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: LD_INT 4
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 1
60322: NEG
60323: PUSH
60324: LD_INT 3
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: LD_INT 2
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 2
60344: PUSH
60345: LD_INT 4
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 2
60354: NEG
60355: PUSH
60356: LD_INT 2
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 4
60365: NEG
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 4
60376: NEG
60377: PUSH
60378: LD_INT 1
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 3
60388: NEG
60389: PUSH
60390: LD_INT 0
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 3
60399: NEG
60400: PUSH
60401: LD_INT 1
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 4
60410: NEG
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 5
60421: NEG
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 5
60432: NEG
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 5
60444: NEG
60445: PUSH
60446: LD_INT 2
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 3
60456: NEG
60457: PUSH
60458: LD_INT 2
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 3
60467: NEG
60468: PUSH
60469: LD_INT 3
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 3
60479: NEG
60480: PUSH
60481: LD_INT 4
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 2
60491: NEG
60492: PUSH
60493: LD_INT 3
60495: NEG
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 2
60503: NEG
60504: PUSH
60505: LD_INT 2
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 3
60515: NEG
60516: PUSH
60517: LD_INT 2
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 4
60527: NEG
60528: PUSH
60529: LD_INT 3
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 4
60539: NEG
60540: PUSH
60541: LD_INT 4
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 2
60551: NEG
60552: PUSH
60553: LD_INT 4
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 4
60563: NEG
60564: PUSH
60565: LD_INT 2
60567: NEG
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: LD_INT 4
60578: NEG
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 0
60586: PUSH
60587: LD_INT 5
60589: NEG
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 1
60597: PUSH
60598: LD_INT 4
60600: NEG
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: LD_INT 3
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: LD_INT 3
60622: NEG
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 1
60630: NEG
60631: PUSH
60632: LD_INT 4
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 1
60642: NEG
60643: PUSH
60644: LD_INT 5
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 2
60654: PUSH
60655: LD_INT 3
60657: NEG
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 2
60665: NEG
60666: PUSH
60667: LD_INT 5
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60722: LD_ADDR_VAR 0 31
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: LD_INT 4
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: LD_INT 3
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 1
60749: PUSH
60750: LD_INT 4
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: LD_INT 5
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: LD_INT 5
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: LD_INT 4
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: LD_INT 3
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 2
60801: PUSH
60802: LD_INT 5
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 2
60811: NEG
60812: PUSH
60813: LD_INT 3
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 3
60822: NEG
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 3
60833: NEG
60834: PUSH
60835: LD_INT 1
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 2
60845: NEG
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: LD_INT 1
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 3
60867: NEG
60868: PUSH
60869: LD_INT 1
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 4
60878: NEG
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 4
60889: NEG
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 4
60901: NEG
60902: PUSH
60903: LD_INT 2
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 2
60913: NEG
60914: PUSH
60915: LD_INT 2
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 4
60924: NEG
60925: PUSH
60926: LD_INT 4
60928: NEG
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 4
60936: NEG
60937: PUSH
60938: LD_INT 5
60940: NEG
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 3
60948: NEG
60949: PUSH
60950: LD_INT 4
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 3
60960: NEG
60961: PUSH
60962: LD_INT 3
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 4
60972: NEG
60973: PUSH
60974: LD_INT 3
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 5
60984: NEG
60985: PUSH
60986: LD_INT 4
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 5
60996: NEG
60997: PUSH
60998: LD_INT 5
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 3
61008: NEG
61009: PUSH
61010: LD_INT 5
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 5
61020: NEG
61021: PUSH
61022: LD_INT 3
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: LD_INT 3
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: LD_INT 4
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: LD_INT 3
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 1
61065: PUSH
61066: LD_INT 2
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: NEG
61088: PUSH
61089: LD_INT 3
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: LD_INT 4
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 2
61111: PUSH
61112: LD_INT 2
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 2
61122: NEG
61123: PUSH
61124: LD_INT 4
61126: NEG
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 4
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 4
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 5
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 5
61165: PUSH
61166: LD_INT 1
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 4
61175: PUSH
61176: LD_INT 1
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 3
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 3
61195: PUSH
61196: LD_INT 1
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 3
61206: PUSH
61207: LD_INT 2
61209: NEG
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 5
61217: PUSH
61218: LD_INT 2
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61272: LD_ADDR_VAR 0 32
61276: PUSH
61277: LD_INT 4
61279: NEG
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 4
61290: NEG
61291: PUSH
61292: LD_INT 1
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 3
61302: NEG
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: LD_INT 1
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 4
61324: NEG
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 5
61335: NEG
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 5
61346: NEG
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 5
61358: NEG
61359: PUSH
61360: LD_INT 2
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 3
61370: NEG
61371: PUSH
61372: LD_INT 2
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 3
61381: NEG
61382: PUSH
61383: LD_INT 3
61385: NEG
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 3
61393: NEG
61394: PUSH
61395: LD_INT 4
61397: NEG
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 2
61405: NEG
61406: PUSH
61407: LD_INT 3
61409: NEG
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 2
61417: NEG
61418: PUSH
61419: LD_INT 2
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 3
61429: NEG
61430: PUSH
61431: LD_INT 2
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 4
61441: NEG
61442: PUSH
61443: LD_INT 3
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 4
61453: NEG
61454: PUSH
61455: LD_INT 4
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 2
61465: NEG
61466: PUSH
61467: LD_INT 4
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 4
61477: NEG
61478: PUSH
61479: LD_INT 2
61481: NEG
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: LD_INT 4
61492: NEG
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: LD_INT 5
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: PUSH
61512: LD_INT 4
61514: NEG
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: LD_INT 3
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: LD_INT 3
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 1
61544: NEG
61545: PUSH
61546: LD_INT 4
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 1
61556: NEG
61557: PUSH
61558: LD_INT 5
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: LD_INT 3
61571: NEG
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 2
61579: NEG
61580: PUSH
61581: LD_INT 5
61583: NEG
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 3
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 3
61601: PUSH
61602: LD_INT 1
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 4
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 4
61622: PUSH
61623: LD_INT 1
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 3
61632: PUSH
61633: LD_INT 1
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 2
61642: PUSH
61643: LD_INT 0
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 2
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 2
61663: PUSH
61664: LD_INT 2
61666: NEG
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 4
61674: PUSH
61675: LD_INT 2
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 4
61684: PUSH
61685: LD_INT 4
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 4
61694: PUSH
61695: LD_INT 3
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 5
61704: PUSH
61705: LD_INT 4
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 5
61714: PUSH
61715: LD_INT 5
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 4
61724: PUSH
61725: LD_INT 5
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 3
61734: PUSH
61735: LD_INT 4
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 3
61744: PUSH
61745: LD_INT 3
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 5
61754: PUSH
61755: LD_INT 3
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 3
61764: PUSH
61765: LD_INT 5
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61819: LD_ADDR_VAR 0 33
61823: PUSH
61824: LD_INT 4
61826: NEG
61827: PUSH
61828: LD_INT 4
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 4
61838: NEG
61839: PUSH
61840: LD_INT 5
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 3
61850: NEG
61851: PUSH
61852: LD_INT 4
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 3
61862: NEG
61863: PUSH
61864: LD_INT 3
61866: NEG
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 4
61874: NEG
61875: PUSH
61876: LD_INT 3
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 5
61886: NEG
61887: PUSH
61888: LD_INT 4
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 5
61898: NEG
61899: PUSH
61900: LD_INT 5
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 3
61910: NEG
61911: PUSH
61912: LD_INT 5
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 5
61922: NEG
61923: PUSH
61924: LD_INT 3
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: LD_INT 3
61937: NEG
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: LD_INT 4
61948: NEG
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 1
61956: PUSH
61957: LD_INT 3
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: PUSH
61968: LD_INT 2
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 0
61978: PUSH
61979: LD_INT 2
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 1
61989: NEG
61990: PUSH
61991: LD_INT 3
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: LD_INT 4
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 2
62013: PUSH
62014: LD_INT 2
62016: NEG
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 2
62024: NEG
62025: PUSH
62026: LD_INT 4
62028: NEG
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 4
62036: PUSH
62037: LD_INT 0
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 4
62046: PUSH
62047: LD_INT 1
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 5
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 5
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 4
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 3
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 3
62097: PUSH
62098: LD_INT 1
62100: NEG
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 3
62108: PUSH
62109: LD_INT 2
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 5
62119: PUSH
62120: LD_INT 2
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 3
62129: PUSH
62130: LD_INT 3
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 3
62139: PUSH
62140: LD_INT 2
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 4
62149: PUSH
62150: LD_INT 3
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 4
62159: PUSH
62160: LD_INT 4
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 3
62169: PUSH
62170: LD_INT 4
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 2
62179: PUSH
62180: LD_INT 3
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 2
62189: PUSH
62190: LD_INT 2
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 4
62199: PUSH
62200: LD_INT 2
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 2
62209: PUSH
62210: LD_INT 4
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: LD_INT 4
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: LD_INT 3
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: LD_INT 4
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: PUSH
62250: LD_INT 5
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: LD_INT 5
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: NEG
62270: PUSH
62271: LD_INT 4
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: PUSH
62282: LD_INT 3
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 2
62291: PUSH
62292: LD_INT 5
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 2
62301: NEG
62302: PUSH
62303: LD_INT 3
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62357: LD_ADDR_VAR 0 34
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: LD_INT 4
62367: NEG
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 0
62375: PUSH
62376: LD_INT 5
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 1
62386: PUSH
62387: LD_INT 4
62389: NEG
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 1
62397: PUSH
62398: LD_INT 3
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 0
62408: PUSH
62409: LD_INT 3
62411: NEG
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 1
62419: NEG
62420: PUSH
62421: LD_INT 4
62423: NEG
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: LD_INT 5
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 2
62443: PUSH
62444: LD_INT 3
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 2
62454: NEG
62455: PUSH
62456: LD_INT 5
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 3
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 3
62476: PUSH
62477: LD_INT 1
62479: NEG
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 4
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 4
62497: PUSH
62498: LD_INT 1
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 3
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 2
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 2
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 2
62538: PUSH
62539: LD_INT 2
62541: NEG
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 4
62549: PUSH
62550: LD_INT 2
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 4
62559: PUSH
62560: LD_INT 4
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 4
62569: PUSH
62570: LD_INT 3
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 5
62579: PUSH
62580: LD_INT 4
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 5
62589: PUSH
62590: LD_INT 5
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 4
62599: PUSH
62600: LD_INT 5
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 3
62609: PUSH
62610: LD_INT 4
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 3
62619: PUSH
62620: LD_INT 3
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 5
62629: PUSH
62630: LD_INT 3
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 3
62639: PUSH
62640: LD_INT 5
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: LD_INT 3
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: LD_INT 2
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: LD_INT 3
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 1
62679: PUSH
62680: LD_INT 4
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: LD_INT 4
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 1
62699: NEG
62700: PUSH
62701: LD_INT 3
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: NEG
62711: PUSH
62712: LD_INT 2
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 2
62721: PUSH
62722: LD_INT 4
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 2
62731: NEG
62732: PUSH
62733: LD_INT 2
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 4
62742: NEG
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 4
62753: NEG
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 3
62765: NEG
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 3
62776: NEG
62777: PUSH
62778: LD_INT 1
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 4
62787: NEG
62788: PUSH
62789: LD_INT 1
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 5
62798: NEG
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 5
62809: NEG
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 5
62821: NEG
62822: PUSH
62823: LD_INT 2
62825: NEG
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 3
62833: NEG
62834: PUSH
62835: LD_INT 2
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: ST_TO_ADDR
// end ; end ;
62889: GO 62892
62891: POP
// case btype of b_depot , b_warehouse :
62892: LD_VAR 0 1
62896: PUSH
62897: LD_INT 0
62899: DOUBLE
62900: EQUAL
62901: IFTRUE 62911
62903: LD_INT 1
62905: DOUBLE
62906: EQUAL
62907: IFTRUE 62911
62909: GO 63112
62911: POP
// case nation of nation_american :
62912: LD_VAR 0 5
62916: PUSH
62917: LD_INT 1
62919: DOUBLE
62920: EQUAL
62921: IFTRUE 62925
62923: GO 62981
62925: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62926: LD_ADDR_VAR 0 9
62930: PUSH
62931: LD_VAR 0 11
62935: PUSH
62936: LD_VAR 0 12
62940: PUSH
62941: LD_VAR 0 13
62945: PUSH
62946: LD_VAR 0 14
62950: PUSH
62951: LD_VAR 0 15
62955: PUSH
62956: LD_VAR 0 16
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: PUSH
62969: LD_VAR 0 4
62973: PUSH
62974: LD_INT 1
62976: PLUS
62977: ARRAY
62978: ST_TO_ADDR
62979: GO 63110
62981: LD_INT 2
62983: DOUBLE
62984: EQUAL
62985: IFTRUE 62989
62987: GO 63045
62989: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62990: LD_ADDR_VAR 0 9
62994: PUSH
62995: LD_VAR 0 17
62999: PUSH
63000: LD_VAR 0 18
63004: PUSH
63005: LD_VAR 0 19
63009: PUSH
63010: LD_VAR 0 20
63014: PUSH
63015: LD_VAR 0 21
63019: PUSH
63020: LD_VAR 0 22
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: PUSH
63033: LD_VAR 0 4
63037: PUSH
63038: LD_INT 1
63040: PLUS
63041: ARRAY
63042: ST_TO_ADDR
63043: GO 63110
63045: LD_INT 3
63047: DOUBLE
63048: EQUAL
63049: IFTRUE 63053
63051: GO 63109
63053: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63054: LD_ADDR_VAR 0 9
63058: PUSH
63059: LD_VAR 0 23
63063: PUSH
63064: LD_VAR 0 24
63068: PUSH
63069: LD_VAR 0 25
63073: PUSH
63074: LD_VAR 0 26
63078: PUSH
63079: LD_VAR 0 27
63083: PUSH
63084: LD_VAR 0 28
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: PUSH
63097: LD_VAR 0 4
63101: PUSH
63102: LD_INT 1
63104: PLUS
63105: ARRAY
63106: ST_TO_ADDR
63107: GO 63110
63109: POP
63110: GO 63665
63112: LD_INT 2
63114: DOUBLE
63115: EQUAL
63116: IFTRUE 63126
63118: LD_INT 3
63120: DOUBLE
63121: EQUAL
63122: IFTRUE 63126
63124: GO 63182
63126: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63127: LD_ADDR_VAR 0 9
63131: PUSH
63132: LD_VAR 0 29
63136: PUSH
63137: LD_VAR 0 30
63141: PUSH
63142: LD_VAR 0 31
63146: PUSH
63147: LD_VAR 0 32
63151: PUSH
63152: LD_VAR 0 33
63156: PUSH
63157: LD_VAR 0 34
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: PUSH
63170: LD_VAR 0 4
63174: PUSH
63175: LD_INT 1
63177: PLUS
63178: ARRAY
63179: ST_TO_ADDR
63180: GO 63665
63182: LD_INT 16
63184: DOUBLE
63185: EQUAL
63186: IFTRUE 63244
63188: LD_INT 17
63190: DOUBLE
63191: EQUAL
63192: IFTRUE 63244
63194: LD_INT 18
63196: DOUBLE
63197: EQUAL
63198: IFTRUE 63244
63200: LD_INT 19
63202: DOUBLE
63203: EQUAL
63204: IFTRUE 63244
63206: LD_INT 22
63208: DOUBLE
63209: EQUAL
63210: IFTRUE 63244
63212: LD_INT 20
63214: DOUBLE
63215: EQUAL
63216: IFTRUE 63244
63218: LD_INT 21
63220: DOUBLE
63221: EQUAL
63222: IFTRUE 63244
63224: LD_INT 23
63226: DOUBLE
63227: EQUAL
63228: IFTRUE 63244
63230: LD_INT 24
63232: DOUBLE
63233: EQUAL
63234: IFTRUE 63244
63236: LD_INT 25
63238: DOUBLE
63239: EQUAL
63240: IFTRUE 63244
63242: GO 63300
63244: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63245: LD_ADDR_VAR 0 9
63249: PUSH
63250: LD_VAR 0 35
63254: PUSH
63255: LD_VAR 0 36
63259: PUSH
63260: LD_VAR 0 37
63264: PUSH
63265: LD_VAR 0 38
63269: PUSH
63270: LD_VAR 0 39
63274: PUSH
63275: LD_VAR 0 40
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: PUSH
63288: LD_VAR 0 4
63292: PUSH
63293: LD_INT 1
63295: PLUS
63296: ARRAY
63297: ST_TO_ADDR
63298: GO 63665
63300: LD_INT 6
63302: DOUBLE
63303: EQUAL
63304: IFTRUE 63356
63306: LD_INT 7
63308: DOUBLE
63309: EQUAL
63310: IFTRUE 63356
63312: LD_INT 8
63314: DOUBLE
63315: EQUAL
63316: IFTRUE 63356
63318: LD_INT 13
63320: DOUBLE
63321: EQUAL
63322: IFTRUE 63356
63324: LD_INT 12
63326: DOUBLE
63327: EQUAL
63328: IFTRUE 63356
63330: LD_INT 15
63332: DOUBLE
63333: EQUAL
63334: IFTRUE 63356
63336: LD_INT 11
63338: DOUBLE
63339: EQUAL
63340: IFTRUE 63356
63342: LD_INT 14
63344: DOUBLE
63345: EQUAL
63346: IFTRUE 63356
63348: LD_INT 10
63350: DOUBLE
63351: EQUAL
63352: IFTRUE 63356
63354: GO 63412
63356: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63357: LD_ADDR_VAR 0 9
63361: PUSH
63362: LD_VAR 0 41
63366: PUSH
63367: LD_VAR 0 42
63371: PUSH
63372: LD_VAR 0 43
63376: PUSH
63377: LD_VAR 0 44
63381: PUSH
63382: LD_VAR 0 45
63386: PUSH
63387: LD_VAR 0 46
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: PUSH
63400: LD_VAR 0 4
63404: PUSH
63405: LD_INT 1
63407: PLUS
63408: ARRAY
63409: ST_TO_ADDR
63410: GO 63665
63412: LD_INT 36
63414: DOUBLE
63415: EQUAL
63416: IFTRUE 63420
63418: GO 63476
63420: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63421: LD_ADDR_VAR 0 9
63425: PUSH
63426: LD_VAR 0 47
63430: PUSH
63431: LD_VAR 0 48
63435: PUSH
63436: LD_VAR 0 49
63440: PUSH
63441: LD_VAR 0 50
63445: PUSH
63446: LD_VAR 0 51
63450: PUSH
63451: LD_VAR 0 52
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: PUSH
63464: LD_VAR 0 4
63468: PUSH
63469: LD_INT 1
63471: PLUS
63472: ARRAY
63473: ST_TO_ADDR
63474: GO 63665
63476: LD_INT 4
63478: DOUBLE
63479: EQUAL
63480: IFTRUE 63502
63482: LD_INT 5
63484: DOUBLE
63485: EQUAL
63486: IFTRUE 63502
63488: LD_INT 34
63490: DOUBLE
63491: EQUAL
63492: IFTRUE 63502
63494: LD_INT 37
63496: DOUBLE
63497: EQUAL
63498: IFTRUE 63502
63500: GO 63558
63502: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63503: LD_ADDR_VAR 0 9
63507: PUSH
63508: LD_VAR 0 53
63512: PUSH
63513: LD_VAR 0 54
63517: PUSH
63518: LD_VAR 0 55
63522: PUSH
63523: LD_VAR 0 56
63527: PUSH
63528: LD_VAR 0 57
63532: PUSH
63533: LD_VAR 0 58
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: PUSH
63546: LD_VAR 0 4
63550: PUSH
63551: LD_INT 1
63553: PLUS
63554: ARRAY
63555: ST_TO_ADDR
63556: GO 63665
63558: LD_INT 31
63560: DOUBLE
63561: EQUAL
63562: IFTRUE 63608
63564: LD_INT 32
63566: DOUBLE
63567: EQUAL
63568: IFTRUE 63608
63570: LD_INT 33
63572: DOUBLE
63573: EQUAL
63574: IFTRUE 63608
63576: LD_INT 27
63578: DOUBLE
63579: EQUAL
63580: IFTRUE 63608
63582: LD_INT 26
63584: DOUBLE
63585: EQUAL
63586: IFTRUE 63608
63588: LD_INT 28
63590: DOUBLE
63591: EQUAL
63592: IFTRUE 63608
63594: LD_INT 29
63596: DOUBLE
63597: EQUAL
63598: IFTRUE 63608
63600: LD_INT 30
63602: DOUBLE
63603: EQUAL
63604: IFTRUE 63608
63606: GO 63664
63608: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63609: LD_ADDR_VAR 0 9
63613: PUSH
63614: LD_VAR 0 59
63618: PUSH
63619: LD_VAR 0 60
63623: PUSH
63624: LD_VAR 0 61
63628: PUSH
63629: LD_VAR 0 62
63633: PUSH
63634: LD_VAR 0 63
63638: PUSH
63639: LD_VAR 0 64
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: PUSH
63652: LD_VAR 0 4
63656: PUSH
63657: LD_INT 1
63659: PLUS
63660: ARRAY
63661: ST_TO_ADDR
63662: GO 63665
63664: POP
// temp_list2 = [ ] ;
63665: LD_ADDR_VAR 0 10
63669: PUSH
63670: EMPTY
63671: ST_TO_ADDR
// for i in temp_list do
63672: LD_ADDR_VAR 0 8
63676: PUSH
63677: LD_VAR 0 9
63681: PUSH
63682: FOR_IN
63683: IFFALSE 63735
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63685: LD_ADDR_VAR 0 10
63689: PUSH
63690: LD_VAR 0 10
63694: PUSH
63695: LD_VAR 0 8
63699: PUSH
63700: LD_INT 1
63702: ARRAY
63703: PUSH
63704: LD_VAR 0 2
63708: PLUS
63709: PUSH
63710: LD_VAR 0 8
63714: PUSH
63715: LD_INT 2
63717: ARRAY
63718: PUSH
63719: LD_VAR 0 3
63723: PLUS
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: EMPTY
63730: LIST
63731: ADD
63732: ST_TO_ADDR
63733: GO 63682
63735: POP
63736: POP
// result = temp_list2 ;
63737: LD_ADDR_VAR 0 7
63741: PUSH
63742: LD_VAR 0 10
63746: ST_TO_ADDR
// end ;
63747: LD_VAR 0 7
63751: RET
// export function EnemyInRange ( unit , dist ) ; begin
63752: LD_INT 0
63754: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63755: LD_ADDR_VAR 0 3
63759: PUSH
63760: LD_VAR 0 1
63764: PPUSH
63765: CALL_OW 255
63769: PPUSH
63770: LD_VAR 0 1
63774: PPUSH
63775: CALL_OW 250
63779: PPUSH
63780: LD_VAR 0 1
63784: PPUSH
63785: CALL_OW 251
63789: PPUSH
63790: LD_VAR 0 2
63794: PPUSH
63795: CALL 37147 0 4
63799: PUSH
63800: LD_INT 4
63802: ARRAY
63803: ST_TO_ADDR
// end ;
63804: LD_VAR 0 3
63808: RET
// export function PlayerSeeMe ( unit ) ; begin
63809: LD_INT 0
63811: PPUSH
// result := See ( your_side , unit ) ;
63812: LD_ADDR_VAR 0 2
63816: PUSH
63817: LD_OWVAR 2
63821: PPUSH
63822: LD_VAR 0 1
63826: PPUSH
63827: CALL_OW 292
63831: ST_TO_ADDR
// end ;
63832: LD_VAR 0 2
63836: RET
// export function ReverseDir ( unit ) ; begin
63837: LD_INT 0
63839: PPUSH
// if not unit then
63840: LD_VAR 0 1
63844: NOT
63845: IFFALSE 63849
// exit ;
63847: GO 63872
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63849: LD_ADDR_VAR 0 2
63853: PUSH
63854: LD_VAR 0 1
63858: PPUSH
63859: CALL_OW 254
63863: PUSH
63864: LD_INT 3
63866: PLUS
63867: PUSH
63868: LD_INT 6
63870: MOD
63871: ST_TO_ADDR
// end ;
63872: LD_VAR 0 2
63876: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63877: LD_INT 0
63879: PPUSH
63880: PPUSH
63881: PPUSH
63882: PPUSH
63883: PPUSH
// if not hexes then
63884: LD_VAR 0 2
63888: NOT
63889: IFFALSE 63893
// exit ;
63891: GO 64041
// dist := 9999 ;
63893: LD_ADDR_VAR 0 5
63897: PUSH
63898: LD_INT 9999
63900: ST_TO_ADDR
// for i = 1 to hexes do
63901: LD_ADDR_VAR 0 4
63905: PUSH
63906: DOUBLE
63907: LD_INT 1
63909: DEC
63910: ST_TO_ADDR
63911: LD_VAR 0 2
63915: PUSH
63916: FOR_TO
63917: IFFALSE 64029
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63919: LD_VAR 0 1
63923: PPUSH
63924: LD_VAR 0 2
63928: PUSH
63929: LD_VAR 0 4
63933: ARRAY
63934: PUSH
63935: LD_INT 1
63937: ARRAY
63938: PPUSH
63939: LD_VAR 0 2
63943: PUSH
63944: LD_VAR 0 4
63948: ARRAY
63949: PUSH
63950: LD_INT 2
63952: ARRAY
63953: PPUSH
63954: CALL_OW 297
63958: PUSH
63959: LD_VAR 0 5
63963: LESS
63964: IFFALSE 64027
// begin hex := hexes [ i ] ;
63966: LD_ADDR_VAR 0 7
63970: PUSH
63971: LD_VAR 0 2
63975: PUSH
63976: LD_VAR 0 4
63980: ARRAY
63981: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63982: LD_ADDR_VAR 0 5
63986: PUSH
63987: LD_VAR 0 1
63991: PPUSH
63992: LD_VAR 0 2
63996: PUSH
63997: LD_VAR 0 4
64001: ARRAY
64002: PUSH
64003: LD_INT 1
64005: ARRAY
64006: PPUSH
64007: LD_VAR 0 2
64011: PUSH
64012: LD_VAR 0 4
64016: ARRAY
64017: PUSH
64018: LD_INT 2
64020: ARRAY
64021: PPUSH
64022: CALL_OW 297
64026: ST_TO_ADDR
// end ; end ;
64027: GO 63916
64029: POP
64030: POP
// result := hex ;
64031: LD_ADDR_VAR 0 3
64035: PUSH
64036: LD_VAR 0 7
64040: ST_TO_ADDR
// end ;
64041: LD_VAR 0 3
64045: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64046: LD_INT 0
64048: PPUSH
64049: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64050: LD_VAR 0 1
64054: NOT
64055: PUSH
64056: LD_VAR 0 1
64060: PUSH
64061: LD_INT 21
64063: PUSH
64064: LD_INT 2
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 23
64073: PUSH
64074: LD_INT 2
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PPUSH
64085: CALL_OW 69
64089: IN
64090: NOT
64091: OR
64092: IFFALSE 64096
// exit ;
64094: GO 64143
// for i = 1 to 3 do
64096: LD_ADDR_VAR 0 3
64100: PUSH
64101: DOUBLE
64102: LD_INT 1
64104: DEC
64105: ST_TO_ADDR
64106: LD_INT 3
64108: PUSH
64109: FOR_TO
64110: IFFALSE 64141
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64112: LD_VAR 0 1
64116: PPUSH
64117: CALL_OW 250
64121: PPUSH
64122: LD_VAR 0 1
64126: PPUSH
64127: CALL_OW 251
64131: PPUSH
64132: LD_INT 1
64134: PPUSH
64135: CALL_OW 453
64139: GO 64109
64141: POP
64142: POP
// end ;
64143: LD_VAR 0 2
64147: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64148: LD_INT 0
64150: PPUSH
64151: PPUSH
64152: PPUSH
64153: PPUSH
64154: PPUSH
64155: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64156: LD_VAR 0 1
64160: NOT
64161: PUSH
64162: LD_VAR 0 2
64166: NOT
64167: OR
64168: PUSH
64169: LD_VAR 0 1
64173: PPUSH
64174: CALL_OW 314
64178: OR
64179: IFFALSE 64183
// exit ;
64181: GO 64624
// x := GetX ( enemy_unit ) ;
64183: LD_ADDR_VAR 0 7
64187: PUSH
64188: LD_VAR 0 2
64192: PPUSH
64193: CALL_OW 250
64197: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64198: LD_ADDR_VAR 0 8
64202: PUSH
64203: LD_VAR 0 2
64207: PPUSH
64208: CALL_OW 251
64212: ST_TO_ADDR
// if not x or not y then
64213: LD_VAR 0 7
64217: NOT
64218: PUSH
64219: LD_VAR 0 8
64223: NOT
64224: OR
64225: IFFALSE 64229
// exit ;
64227: GO 64624
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64229: LD_ADDR_VAR 0 6
64233: PUSH
64234: LD_VAR 0 7
64238: PPUSH
64239: LD_INT 0
64241: PPUSH
64242: LD_INT 4
64244: PPUSH
64245: CALL_OW 272
64249: PUSH
64250: LD_VAR 0 8
64254: PPUSH
64255: LD_INT 0
64257: PPUSH
64258: LD_INT 4
64260: PPUSH
64261: CALL_OW 273
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_VAR 0 7
64274: PPUSH
64275: LD_INT 1
64277: PPUSH
64278: LD_INT 4
64280: PPUSH
64281: CALL_OW 272
64285: PUSH
64286: LD_VAR 0 8
64290: PPUSH
64291: LD_INT 1
64293: PPUSH
64294: LD_INT 4
64296: PPUSH
64297: CALL_OW 273
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_VAR 0 7
64310: PPUSH
64311: LD_INT 2
64313: PPUSH
64314: LD_INT 4
64316: PPUSH
64317: CALL_OW 272
64321: PUSH
64322: LD_VAR 0 8
64326: PPUSH
64327: LD_INT 2
64329: PPUSH
64330: LD_INT 4
64332: PPUSH
64333: CALL_OW 273
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_VAR 0 7
64346: PPUSH
64347: LD_INT 3
64349: PPUSH
64350: LD_INT 4
64352: PPUSH
64353: CALL_OW 272
64357: PUSH
64358: LD_VAR 0 8
64362: PPUSH
64363: LD_INT 3
64365: PPUSH
64366: LD_INT 4
64368: PPUSH
64369: CALL_OW 273
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_VAR 0 7
64382: PPUSH
64383: LD_INT 4
64385: PPUSH
64386: LD_INT 4
64388: PPUSH
64389: CALL_OW 272
64393: PUSH
64394: LD_VAR 0 8
64398: PPUSH
64399: LD_INT 4
64401: PPUSH
64402: LD_INT 4
64404: PPUSH
64405: CALL_OW 273
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_VAR 0 7
64418: PPUSH
64419: LD_INT 5
64421: PPUSH
64422: LD_INT 4
64424: PPUSH
64425: CALL_OW 272
64429: PUSH
64430: LD_VAR 0 8
64434: PPUSH
64435: LD_INT 5
64437: PPUSH
64438: LD_INT 4
64440: PPUSH
64441: CALL_OW 273
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: ST_TO_ADDR
// for i = tmp downto 1 do
64458: LD_ADDR_VAR 0 4
64462: PUSH
64463: DOUBLE
64464: LD_VAR 0 6
64468: INC
64469: ST_TO_ADDR
64470: LD_INT 1
64472: PUSH
64473: FOR_DOWNTO
64474: IFFALSE 64575
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64476: LD_VAR 0 6
64480: PUSH
64481: LD_VAR 0 4
64485: ARRAY
64486: PUSH
64487: LD_INT 1
64489: ARRAY
64490: PPUSH
64491: LD_VAR 0 6
64495: PUSH
64496: LD_VAR 0 4
64500: ARRAY
64501: PUSH
64502: LD_INT 2
64504: ARRAY
64505: PPUSH
64506: CALL_OW 488
64510: NOT
64511: PUSH
64512: LD_VAR 0 6
64516: PUSH
64517: LD_VAR 0 4
64521: ARRAY
64522: PUSH
64523: LD_INT 1
64525: ARRAY
64526: PPUSH
64527: LD_VAR 0 6
64531: PUSH
64532: LD_VAR 0 4
64536: ARRAY
64537: PUSH
64538: LD_INT 2
64540: ARRAY
64541: PPUSH
64542: CALL_OW 428
64546: PUSH
64547: LD_INT 0
64549: NONEQUAL
64550: OR
64551: IFFALSE 64573
// tmp := Delete ( tmp , i ) ;
64553: LD_ADDR_VAR 0 6
64557: PUSH
64558: LD_VAR 0 6
64562: PPUSH
64563: LD_VAR 0 4
64567: PPUSH
64568: CALL_OW 3
64572: ST_TO_ADDR
64573: GO 64473
64575: POP
64576: POP
// j := GetClosestHex ( unit , tmp ) ;
64577: LD_ADDR_VAR 0 5
64581: PUSH
64582: LD_VAR 0 1
64586: PPUSH
64587: LD_VAR 0 6
64591: PPUSH
64592: CALL 63877 0 2
64596: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64597: LD_VAR 0 1
64601: PPUSH
64602: LD_VAR 0 5
64606: PUSH
64607: LD_INT 1
64609: ARRAY
64610: PPUSH
64611: LD_VAR 0 5
64615: PUSH
64616: LD_INT 2
64618: ARRAY
64619: PPUSH
64620: CALL_OW 111
// end ;
64624: LD_VAR 0 3
64628: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64629: LD_INT 0
64631: PPUSH
64632: PPUSH
64633: PPUSH
// uc_side = 0 ;
64634: LD_ADDR_OWVAR 20
64638: PUSH
64639: LD_INT 0
64641: ST_TO_ADDR
// uc_nation = 0 ;
64642: LD_ADDR_OWVAR 21
64646: PUSH
64647: LD_INT 0
64649: ST_TO_ADDR
// InitHc_All ( ) ;
64650: CALL_OW 584
// InitVc ;
64654: CALL_OW 20
// if mastodonts then
64658: LD_VAR 0 6
64662: IFFALSE 64729
// for i = 1 to mastodonts do
64664: LD_ADDR_VAR 0 11
64668: PUSH
64669: DOUBLE
64670: LD_INT 1
64672: DEC
64673: ST_TO_ADDR
64674: LD_VAR 0 6
64678: PUSH
64679: FOR_TO
64680: IFFALSE 64727
// begin vc_chassis := 31 ;
64682: LD_ADDR_OWVAR 37
64686: PUSH
64687: LD_INT 31
64689: ST_TO_ADDR
// vc_control := control_rider ;
64690: LD_ADDR_OWVAR 38
64694: PUSH
64695: LD_INT 4
64697: ST_TO_ADDR
// animal := CreateVehicle ;
64698: LD_ADDR_VAR 0 12
64702: PUSH
64703: CALL_OW 45
64707: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64708: LD_VAR 0 12
64712: PPUSH
64713: LD_VAR 0 8
64717: PPUSH
64718: LD_INT 0
64720: PPUSH
64721: CALL 66917 0 3
// end ;
64725: GO 64679
64727: POP
64728: POP
// if horses then
64729: LD_VAR 0 5
64733: IFFALSE 64800
// for i = 1 to horses do
64735: LD_ADDR_VAR 0 11
64739: PUSH
64740: DOUBLE
64741: LD_INT 1
64743: DEC
64744: ST_TO_ADDR
64745: LD_VAR 0 5
64749: PUSH
64750: FOR_TO
64751: IFFALSE 64798
// begin hc_class := 21 ;
64753: LD_ADDR_OWVAR 28
64757: PUSH
64758: LD_INT 21
64760: ST_TO_ADDR
// hc_gallery :=  ;
64761: LD_ADDR_OWVAR 33
64765: PUSH
64766: LD_STRING 
64768: ST_TO_ADDR
// animal := CreateHuman ;
64769: LD_ADDR_VAR 0 12
64773: PUSH
64774: CALL_OW 44
64778: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64779: LD_VAR 0 12
64783: PPUSH
64784: LD_VAR 0 8
64788: PPUSH
64789: LD_INT 0
64791: PPUSH
64792: CALL 66917 0 3
// end ;
64796: GO 64750
64798: POP
64799: POP
// if birds then
64800: LD_VAR 0 1
64804: IFFALSE 64871
// for i = 1 to birds do
64806: LD_ADDR_VAR 0 11
64810: PUSH
64811: DOUBLE
64812: LD_INT 1
64814: DEC
64815: ST_TO_ADDR
64816: LD_VAR 0 1
64820: PUSH
64821: FOR_TO
64822: IFFALSE 64869
// begin hc_class = 18 ;
64824: LD_ADDR_OWVAR 28
64828: PUSH
64829: LD_INT 18
64831: ST_TO_ADDR
// hc_gallery =  ;
64832: LD_ADDR_OWVAR 33
64836: PUSH
64837: LD_STRING 
64839: ST_TO_ADDR
// animal := CreateHuman ;
64840: LD_ADDR_VAR 0 12
64844: PUSH
64845: CALL_OW 44
64849: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64850: LD_VAR 0 12
64854: PPUSH
64855: LD_VAR 0 8
64859: PPUSH
64860: LD_INT 0
64862: PPUSH
64863: CALL 66917 0 3
// end ;
64867: GO 64821
64869: POP
64870: POP
// if tigers then
64871: LD_VAR 0 2
64875: IFFALSE 64959
// for i = 1 to tigers do
64877: LD_ADDR_VAR 0 11
64881: PUSH
64882: DOUBLE
64883: LD_INT 1
64885: DEC
64886: ST_TO_ADDR
64887: LD_VAR 0 2
64891: PUSH
64892: FOR_TO
64893: IFFALSE 64957
// begin hc_class = class_tiger ;
64895: LD_ADDR_OWVAR 28
64899: PUSH
64900: LD_INT 14
64902: ST_TO_ADDR
// hc_gallery =  ;
64903: LD_ADDR_OWVAR 33
64907: PUSH
64908: LD_STRING 
64910: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64911: LD_ADDR_OWVAR 35
64915: PUSH
64916: LD_INT 7
64918: NEG
64919: PPUSH
64920: LD_INT 7
64922: PPUSH
64923: CALL_OW 12
64927: ST_TO_ADDR
// animal := CreateHuman ;
64928: LD_ADDR_VAR 0 12
64932: PUSH
64933: CALL_OW 44
64937: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64938: LD_VAR 0 12
64942: PPUSH
64943: LD_VAR 0 8
64947: PPUSH
64948: LD_INT 0
64950: PPUSH
64951: CALL 66917 0 3
// end ;
64955: GO 64892
64957: POP
64958: POP
// if apemans then
64959: LD_VAR 0 3
64963: IFFALSE 65086
// for i = 1 to apemans do
64965: LD_ADDR_VAR 0 11
64969: PUSH
64970: DOUBLE
64971: LD_INT 1
64973: DEC
64974: ST_TO_ADDR
64975: LD_VAR 0 3
64979: PUSH
64980: FOR_TO
64981: IFFALSE 65084
// begin hc_class = class_apeman ;
64983: LD_ADDR_OWVAR 28
64987: PUSH
64988: LD_INT 12
64990: ST_TO_ADDR
// hc_gallery =  ;
64991: LD_ADDR_OWVAR 33
64995: PUSH
64996: LD_STRING 
64998: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64999: LD_ADDR_OWVAR 35
65003: PUSH
65004: LD_INT 2
65006: NEG
65007: PPUSH
65008: LD_INT 2
65010: PPUSH
65011: CALL_OW 12
65015: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65016: LD_ADDR_OWVAR 31
65020: PUSH
65021: LD_INT 1
65023: PPUSH
65024: LD_INT 3
65026: PPUSH
65027: CALL_OW 12
65031: PUSH
65032: LD_INT 1
65034: PPUSH
65035: LD_INT 3
65037: PPUSH
65038: CALL_OW 12
65042: PUSH
65043: LD_INT 0
65045: PUSH
65046: LD_INT 0
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: ST_TO_ADDR
// animal := CreateHuman ;
65055: LD_ADDR_VAR 0 12
65059: PUSH
65060: CALL_OW 44
65064: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65065: LD_VAR 0 12
65069: PPUSH
65070: LD_VAR 0 8
65074: PPUSH
65075: LD_INT 0
65077: PPUSH
65078: CALL 66917 0 3
// end ;
65082: GO 64980
65084: POP
65085: POP
// if enchidnas then
65086: LD_VAR 0 4
65090: IFFALSE 65157
// for i = 1 to enchidnas do
65092: LD_ADDR_VAR 0 11
65096: PUSH
65097: DOUBLE
65098: LD_INT 1
65100: DEC
65101: ST_TO_ADDR
65102: LD_VAR 0 4
65106: PUSH
65107: FOR_TO
65108: IFFALSE 65155
// begin hc_class = 13 ;
65110: LD_ADDR_OWVAR 28
65114: PUSH
65115: LD_INT 13
65117: ST_TO_ADDR
// hc_gallery =  ;
65118: LD_ADDR_OWVAR 33
65122: PUSH
65123: LD_STRING 
65125: ST_TO_ADDR
// animal := CreateHuman ;
65126: LD_ADDR_VAR 0 12
65130: PUSH
65131: CALL_OW 44
65135: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65136: LD_VAR 0 12
65140: PPUSH
65141: LD_VAR 0 8
65145: PPUSH
65146: LD_INT 0
65148: PPUSH
65149: CALL 66917 0 3
// end ;
65153: GO 65107
65155: POP
65156: POP
// if fishes then
65157: LD_VAR 0 7
65161: IFFALSE 65228
// for i = 1 to fishes do
65163: LD_ADDR_VAR 0 11
65167: PUSH
65168: DOUBLE
65169: LD_INT 1
65171: DEC
65172: ST_TO_ADDR
65173: LD_VAR 0 7
65177: PUSH
65178: FOR_TO
65179: IFFALSE 65226
// begin hc_class = 20 ;
65181: LD_ADDR_OWVAR 28
65185: PUSH
65186: LD_INT 20
65188: ST_TO_ADDR
// hc_gallery =  ;
65189: LD_ADDR_OWVAR 33
65193: PUSH
65194: LD_STRING 
65196: ST_TO_ADDR
// animal := CreateHuman ;
65197: LD_ADDR_VAR 0 12
65201: PUSH
65202: CALL_OW 44
65206: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65207: LD_VAR 0 12
65211: PPUSH
65212: LD_VAR 0 9
65216: PPUSH
65217: LD_INT 0
65219: PPUSH
65220: CALL 66917 0 3
// end ;
65224: GO 65178
65226: POP
65227: POP
// end ;
65228: LD_VAR 0 10
65232: RET
// export function WantHeal ( sci , unit ) ; begin
65233: LD_INT 0
65235: PPUSH
// if GetTaskList ( sci ) > 0 then
65236: LD_VAR 0 1
65240: PPUSH
65241: CALL_OW 437
65245: PUSH
65246: LD_INT 0
65248: GREATER
65249: IFFALSE 65319
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65251: LD_VAR 0 1
65255: PPUSH
65256: CALL_OW 437
65260: PUSH
65261: LD_INT 1
65263: ARRAY
65264: PUSH
65265: LD_INT 1
65267: ARRAY
65268: PUSH
65269: LD_STRING l
65271: EQUAL
65272: PUSH
65273: LD_VAR 0 1
65277: PPUSH
65278: CALL_OW 437
65282: PUSH
65283: LD_INT 1
65285: ARRAY
65286: PUSH
65287: LD_INT 4
65289: ARRAY
65290: PUSH
65291: LD_VAR 0 2
65295: EQUAL
65296: AND
65297: IFFALSE 65309
// result := true else
65299: LD_ADDR_VAR 0 3
65303: PUSH
65304: LD_INT 1
65306: ST_TO_ADDR
65307: GO 65317
// result := false ;
65309: LD_ADDR_VAR 0 3
65313: PUSH
65314: LD_INT 0
65316: ST_TO_ADDR
// end else
65317: GO 65327
// result := false ;
65319: LD_ADDR_VAR 0 3
65323: PUSH
65324: LD_INT 0
65326: ST_TO_ADDR
// end ;
65327: LD_VAR 0 3
65331: RET
// export function HealTarget ( sci ) ; begin
65332: LD_INT 0
65334: PPUSH
// if not sci then
65335: LD_VAR 0 1
65339: NOT
65340: IFFALSE 65344
// exit ;
65342: GO 65409
// result := 0 ;
65344: LD_ADDR_VAR 0 2
65348: PUSH
65349: LD_INT 0
65351: ST_TO_ADDR
// if GetTaskList ( sci ) then
65352: LD_VAR 0 1
65356: PPUSH
65357: CALL_OW 437
65361: IFFALSE 65409
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65363: LD_VAR 0 1
65367: PPUSH
65368: CALL_OW 437
65372: PUSH
65373: LD_INT 1
65375: ARRAY
65376: PUSH
65377: LD_INT 1
65379: ARRAY
65380: PUSH
65381: LD_STRING l
65383: EQUAL
65384: IFFALSE 65409
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65386: LD_ADDR_VAR 0 2
65390: PUSH
65391: LD_VAR 0 1
65395: PPUSH
65396: CALL_OW 437
65400: PUSH
65401: LD_INT 1
65403: ARRAY
65404: PUSH
65405: LD_INT 4
65407: ARRAY
65408: ST_TO_ADDR
// end ;
65409: LD_VAR 0 2
65413: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65414: LD_INT 0
65416: PPUSH
65417: PPUSH
65418: PPUSH
65419: PPUSH
// if not base_units then
65420: LD_VAR 0 1
65424: NOT
65425: IFFALSE 65429
// exit ;
65427: GO 65516
// result := false ;
65429: LD_ADDR_VAR 0 2
65433: PUSH
65434: LD_INT 0
65436: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65437: LD_ADDR_VAR 0 5
65441: PUSH
65442: LD_VAR 0 1
65446: PPUSH
65447: LD_INT 21
65449: PUSH
65450: LD_INT 3
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PPUSH
65457: CALL_OW 72
65461: ST_TO_ADDR
// if not tmp then
65462: LD_VAR 0 5
65466: NOT
65467: IFFALSE 65471
// exit ;
65469: GO 65516
// for i in tmp do
65471: LD_ADDR_VAR 0 3
65475: PUSH
65476: LD_VAR 0 5
65480: PUSH
65481: FOR_IN
65482: IFFALSE 65514
// begin result := EnemyInRange ( i , 22 ) ;
65484: LD_ADDR_VAR 0 2
65488: PUSH
65489: LD_VAR 0 3
65493: PPUSH
65494: LD_INT 22
65496: PPUSH
65497: CALL 63752 0 2
65501: ST_TO_ADDR
// if result then
65502: LD_VAR 0 2
65506: IFFALSE 65512
// exit ;
65508: POP
65509: POP
65510: GO 65516
// end ;
65512: GO 65481
65514: POP
65515: POP
// end ;
65516: LD_VAR 0 2
65520: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
65521: LD_INT 0
65523: PPUSH
65524: PPUSH
// if not units then
65525: LD_VAR 0 1
65529: NOT
65530: IFFALSE 65534
// exit ;
65532: GO 65604
// result := [ ] ;
65534: LD_ADDR_VAR 0 3
65538: PUSH
65539: EMPTY
65540: ST_TO_ADDR
// for i in units do
65541: LD_ADDR_VAR 0 4
65545: PUSH
65546: LD_VAR 0 1
65550: PUSH
65551: FOR_IN
65552: IFFALSE 65602
// if GetTag ( i ) = tag then
65554: LD_VAR 0 4
65558: PPUSH
65559: CALL_OW 110
65563: PUSH
65564: LD_VAR 0 2
65568: EQUAL
65569: IFFALSE 65600
// result := Insert ( result , result + 1 , i ) ;
65571: LD_ADDR_VAR 0 3
65575: PUSH
65576: LD_VAR 0 3
65580: PPUSH
65581: LD_VAR 0 3
65585: PUSH
65586: LD_INT 1
65588: PLUS
65589: PPUSH
65590: LD_VAR 0 4
65594: PPUSH
65595: CALL_OW 2
65599: ST_TO_ADDR
65600: GO 65551
65602: POP
65603: POP
// end ;
65604: LD_VAR 0 3
65608: RET
// export function IsDriver ( un ) ; begin
65609: LD_INT 0
65611: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65612: LD_ADDR_VAR 0 2
65616: PUSH
65617: LD_VAR 0 1
65621: PUSH
65622: LD_INT 55
65624: PUSH
65625: EMPTY
65626: LIST
65627: PPUSH
65628: CALL_OW 69
65632: IN
65633: ST_TO_ADDR
// end ;
65634: LD_VAR 0 2
65638: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65639: LD_INT 0
65641: PPUSH
65642: PPUSH
// list := [ ] ;
65643: LD_ADDR_VAR 0 5
65647: PUSH
65648: EMPTY
65649: ST_TO_ADDR
// case d of 0 :
65650: LD_VAR 0 3
65654: PUSH
65655: LD_INT 0
65657: DOUBLE
65658: EQUAL
65659: IFTRUE 65663
65661: GO 65796
65663: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65664: LD_ADDR_VAR 0 5
65668: PUSH
65669: LD_VAR 0 1
65673: PUSH
65674: LD_INT 4
65676: MINUS
65677: PUSH
65678: LD_VAR 0 2
65682: PUSH
65683: LD_INT 4
65685: MINUS
65686: PUSH
65687: LD_INT 2
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: LIST
65694: PUSH
65695: LD_VAR 0 1
65699: PUSH
65700: LD_INT 3
65702: MINUS
65703: PUSH
65704: LD_VAR 0 2
65708: PUSH
65709: LD_INT 1
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: LIST
65716: PUSH
65717: LD_VAR 0 1
65721: PUSH
65722: LD_INT 4
65724: PLUS
65725: PUSH
65726: LD_VAR 0 2
65730: PUSH
65731: LD_INT 4
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: LIST
65738: PUSH
65739: LD_VAR 0 1
65743: PUSH
65744: LD_INT 3
65746: PLUS
65747: PUSH
65748: LD_VAR 0 2
65752: PUSH
65753: LD_INT 3
65755: PLUS
65756: PUSH
65757: LD_INT 5
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: LIST
65764: PUSH
65765: LD_VAR 0 1
65769: PUSH
65770: LD_VAR 0 2
65774: PUSH
65775: LD_INT 4
65777: PLUS
65778: PUSH
65779: LD_INT 0
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: LIST
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: ST_TO_ADDR
// end ; 1 :
65794: GO 66494
65796: LD_INT 1
65798: DOUBLE
65799: EQUAL
65800: IFTRUE 65804
65802: GO 65937
65804: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65805: LD_ADDR_VAR 0 5
65809: PUSH
65810: LD_VAR 0 1
65814: PUSH
65815: LD_VAR 0 2
65819: PUSH
65820: LD_INT 4
65822: MINUS
65823: PUSH
65824: LD_INT 3
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: LIST
65831: PUSH
65832: LD_VAR 0 1
65836: PUSH
65837: LD_INT 3
65839: MINUS
65840: PUSH
65841: LD_VAR 0 2
65845: PUSH
65846: LD_INT 3
65848: MINUS
65849: PUSH
65850: LD_INT 2
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: LIST
65857: PUSH
65858: LD_VAR 0 1
65862: PUSH
65863: LD_INT 4
65865: MINUS
65866: PUSH
65867: LD_VAR 0 2
65871: PUSH
65872: LD_INT 1
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: LIST
65879: PUSH
65880: LD_VAR 0 1
65884: PUSH
65885: LD_VAR 0 2
65889: PUSH
65890: LD_INT 3
65892: PLUS
65893: PUSH
65894: LD_INT 0
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: LIST
65901: PUSH
65902: LD_VAR 0 1
65906: PUSH
65907: LD_INT 4
65909: PLUS
65910: PUSH
65911: LD_VAR 0 2
65915: PUSH
65916: LD_INT 4
65918: PLUS
65919: PUSH
65920: LD_INT 5
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: LIST
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: ST_TO_ADDR
// end ; 2 :
65935: GO 66494
65937: LD_INT 2
65939: DOUBLE
65940: EQUAL
65941: IFTRUE 65945
65943: GO 66074
65945: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65946: LD_ADDR_VAR 0 5
65950: PUSH
65951: LD_VAR 0 1
65955: PUSH
65956: LD_VAR 0 2
65960: PUSH
65961: LD_INT 3
65963: MINUS
65964: PUSH
65965: LD_INT 3
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: LIST
65972: PUSH
65973: LD_VAR 0 1
65977: PUSH
65978: LD_INT 4
65980: PLUS
65981: PUSH
65982: LD_VAR 0 2
65986: PUSH
65987: LD_INT 4
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: LIST
65994: PUSH
65995: LD_VAR 0 1
65999: PUSH
66000: LD_VAR 0 2
66004: PUSH
66005: LD_INT 4
66007: PLUS
66008: PUSH
66009: LD_INT 0
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: LIST
66016: PUSH
66017: LD_VAR 0 1
66021: PUSH
66022: LD_INT 3
66024: MINUS
66025: PUSH
66026: LD_VAR 0 2
66030: PUSH
66031: LD_INT 1
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: LIST
66038: PUSH
66039: LD_VAR 0 1
66043: PUSH
66044: LD_INT 4
66046: MINUS
66047: PUSH
66048: LD_VAR 0 2
66052: PUSH
66053: LD_INT 4
66055: MINUS
66056: PUSH
66057: LD_INT 2
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: LIST
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: ST_TO_ADDR
// end ; 3 :
66072: GO 66494
66074: LD_INT 3
66076: DOUBLE
66077: EQUAL
66078: IFTRUE 66082
66080: GO 66215
66082: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66083: LD_ADDR_VAR 0 5
66087: PUSH
66088: LD_VAR 0 1
66092: PUSH
66093: LD_INT 3
66095: PLUS
66096: PUSH
66097: LD_VAR 0 2
66101: PUSH
66102: LD_INT 4
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: LIST
66109: PUSH
66110: LD_VAR 0 1
66114: PUSH
66115: LD_INT 4
66117: PLUS
66118: PUSH
66119: LD_VAR 0 2
66123: PUSH
66124: LD_INT 4
66126: PLUS
66127: PUSH
66128: LD_INT 5
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: LIST
66135: PUSH
66136: LD_VAR 0 1
66140: PUSH
66141: LD_INT 4
66143: MINUS
66144: PUSH
66145: LD_VAR 0 2
66149: PUSH
66150: LD_INT 1
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: LIST
66157: PUSH
66158: LD_VAR 0 1
66162: PUSH
66163: LD_VAR 0 2
66167: PUSH
66168: LD_INT 4
66170: MINUS
66171: PUSH
66172: LD_INT 3
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: LIST
66179: PUSH
66180: LD_VAR 0 1
66184: PUSH
66185: LD_INT 3
66187: MINUS
66188: PUSH
66189: LD_VAR 0 2
66193: PUSH
66194: LD_INT 3
66196: MINUS
66197: PUSH
66198: LD_INT 2
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: LIST
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: ST_TO_ADDR
// end ; 4 :
66213: GO 66494
66215: LD_INT 4
66217: DOUBLE
66218: EQUAL
66219: IFTRUE 66223
66221: GO 66356
66223: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66224: LD_ADDR_VAR 0 5
66228: PUSH
66229: LD_VAR 0 1
66233: PUSH
66234: LD_VAR 0 2
66238: PUSH
66239: LD_INT 4
66241: PLUS
66242: PUSH
66243: LD_INT 0
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: LIST
66250: PUSH
66251: LD_VAR 0 1
66255: PUSH
66256: LD_INT 3
66258: PLUS
66259: PUSH
66260: LD_VAR 0 2
66264: PUSH
66265: LD_INT 3
66267: PLUS
66268: PUSH
66269: LD_INT 5
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: LIST
66276: PUSH
66277: LD_VAR 0 1
66281: PUSH
66282: LD_INT 4
66284: PLUS
66285: PUSH
66286: LD_VAR 0 2
66290: PUSH
66291: LD_INT 4
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: LIST
66298: PUSH
66299: LD_VAR 0 1
66303: PUSH
66304: LD_VAR 0 2
66308: PUSH
66309: LD_INT 3
66311: MINUS
66312: PUSH
66313: LD_INT 3
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: LIST
66320: PUSH
66321: LD_VAR 0 1
66325: PUSH
66326: LD_INT 4
66328: MINUS
66329: PUSH
66330: LD_VAR 0 2
66334: PUSH
66335: LD_INT 4
66337: MINUS
66338: PUSH
66339: LD_INT 2
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: LIST
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: ST_TO_ADDR
// end ; 5 :
66354: GO 66494
66356: LD_INT 5
66358: DOUBLE
66359: EQUAL
66360: IFTRUE 66364
66362: GO 66493
66364: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66365: LD_ADDR_VAR 0 5
66369: PUSH
66370: LD_VAR 0 1
66374: PUSH
66375: LD_INT 4
66377: MINUS
66378: PUSH
66379: LD_VAR 0 2
66383: PUSH
66384: LD_INT 1
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: LIST
66391: PUSH
66392: LD_VAR 0 1
66396: PUSH
66397: LD_VAR 0 2
66401: PUSH
66402: LD_INT 4
66404: MINUS
66405: PUSH
66406: LD_INT 3
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: LIST
66413: PUSH
66414: LD_VAR 0 1
66418: PUSH
66419: LD_INT 4
66421: PLUS
66422: PUSH
66423: LD_VAR 0 2
66427: PUSH
66428: LD_INT 4
66430: PLUS
66431: PUSH
66432: LD_INT 5
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: LIST
66439: PUSH
66440: LD_VAR 0 1
66444: PUSH
66445: LD_INT 3
66447: PLUS
66448: PUSH
66449: LD_VAR 0 2
66453: PUSH
66454: LD_INT 4
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: LIST
66461: PUSH
66462: LD_VAR 0 1
66466: PUSH
66467: LD_VAR 0 2
66471: PUSH
66472: LD_INT 3
66474: PLUS
66475: PUSH
66476: LD_INT 0
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: LIST
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: ST_TO_ADDR
// end ; end ;
66491: GO 66494
66493: POP
// result := list ;
66494: LD_ADDR_VAR 0 4
66498: PUSH
66499: LD_VAR 0 5
66503: ST_TO_ADDR
// end ;
66504: LD_VAR 0 4
66508: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66509: LD_INT 0
66511: PPUSH
66512: PPUSH
66513: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66514: LD_VAR 0 1
66518: NOT
66519: PUSH
66520: LD_VAR 0 2
66524: PUSH
66525: LD_INT 1
66527: PUSH
66528: LD_INT 2
66530: PUSH
66531: LD_INT 3
66533: PUSH
66534: LD_INT 4
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: IN
66543: NOT
66544: OR
66545: IFFALSE 66549
// exit ;
66547: GO 66641
// tmp := [ ] ;
66549: LD_ADDR_VAR 0 5
66553: PUSH
66554: EMPTY
66555: ST_TO_ADDR
// for i in units do
66556: LD_ADDR_VAR 0 4
66560: PUSH
66561: LD_VAR 0 1
66565: PUSH
66566: FOR_IN
66567: IFFALSE 66610
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66569: LD_ADDR_VAR 0 5
66573: PUSH
66574: LD_VAR 0 5
66578: PPUSH
66579: LD_VAR 0 5
66583: PUSH
66584: LD_INT 1
66586: PLUS
66587: PPUSH
66588: LD_VAR 0 4
66592: PPUSH
66593: LD_VAR 0 2
66597: PPUSH
66598: CALL_OW 259
66602: PPUSH
66603: CALL_OW 2
66607: ST_TO_ADDR
66608: GO 66566
66610: POP
66611: POP
// if not tmp then
66612: LD_VAR 0 5
66616: NOT
66617: IFFALSE 66621
// exit ;
66619: GO 66641
// result := SortListByListDesc ( units , tmp ) ;
66621: LD_ADDR_VAR 0 3
66625: PUSH
66626: LD_VAR 0 1
66630: PPUSH
66631: LD_VAR 0 5
66635: PPUSH
66636: CALL_OW 77
66640: ST_TO_ADDR
// end ;
66641: LD_VAR 0 3
66645: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66646: LD_INT 0
66648: PPUSH
66649: PPUSH
66650: PPUSH
// result := false ;
66651: LD_ADDR_VAR 0 3
66655: PUSH
66656: LD_INT 0
66658: ST_TO_ADDR
// x := GetX ( building ) ;
66659: LD_ADDR_VAR 0 4
66663: PUSH
66664: LD_VAR 0 2
66668: PPUSH
66669: CALL_OW 250
66673: ST_TO_ADDR
// y := GetY ( building ) ;
66674: LD_ADDR_VAR 0 5
66678: PUSH
66679: LD_VAR 0 2
66683: PPUSH
66684: CALL_OW 251
66688: ST_TO_ADDR
// if not building or not x or not y then
66689: LD_VAR 0 2
66693: NOT
66694: PUSH
66695: LD_VAR 0 4
66699: NOT
66700: OR
66701: PUSH
66702: LD_VAR 0 5
66706: NOT
66707: OR
66708: IFFALSE 66712
// exit ;
66710: GO 66804
// if GetTaskList ( unit ) then
66712: LD_VAR 0 1
66716: PPUSH
66717: CALL_OW 437
66721: IFFALSE 66804
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66723: LD_STRING e
66725: PUSH
66726: LD_VAR 0 1
66730: PPUSH
66731: CALL_OW 437
66735: PUSH
66736: LD_INT 1
66738: ARRAY
66739: PUSH
66740: LD_INT 1
66742: ARRAY
66743: EQUAL
66744: PUSH
66745: LD_VAR 0 4
66749: PUSH
66750: LD_VAR 0 1
66754: PPUSH
66755: CALL_OW 437
66759: PUSH
66760: LD_INT 1
66762: ARRAY
66763: PUSH
66764: LD_INT 2
66766: ARRAY
66767: EQUAL
66768: AND
66769: PUSH
66770: LD_VAR 0 5
66774: PUSH
66775: LD_VAR 0 1
66779: PPUSH
66780: CALL_OW 437
66784: PUSH
66785: LD_INT 1
66787: ARRAY
66788: PUSH
66789: LD_INT 3
66791: ARRAY
66792: EQUAL
66793: AND
66794: IFFALSE 66804
// result := true end ;
66796: LD_ADDR_VAR 0 3
66800: PUSH
66801: LD_INT 1
66803: ST_TO_ADDR
// end ;
66804: LD_VAR 0 3
66808: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66809: LD_INT 0
66811: PPUSH
// result := false ;
66812: LD_ADDR_VAR 0 4
66816: PUSH
66817: LD_INT 0
66819: ST_TO_ADDR
// if GetTaskList ( unit ) then
66820: LD_VAR 0 1
66824: PPUSH
66825: CALL_OW 437
66829: IFFALSE 66912
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66831: LD_STRING M
66833: PUSH
66834: LD_VAR 0 1
66838: PPUSH
66839: CALL_OW 437
66843: PUSH
66844: LD_INT 1
66846: ARRAY
66847: PUSH
66848: LD_INT 1
66850: ARRAY
66851: EQUAL
66852: PUSH
66853: LD_VAR 0 2
66857: PUSH
66858: LD_VAR 0 1
66862: PPUSH
66863: CALL_OW 437
66867: PUSH
66868: LD_INT 1
66870: ARRAY
66871: PUSH
66872: LD_INT 2
66874: ARRAY
66875: EQUAL
66876: AND
66877: PUSH
66878: LD_VAR 0 3
66882: PUSH
66883: LD_VAR 0 1
66887: PPUSH
66888: CALL_OW 437
66892: PUSH
66893: LD_INT 1
66895: ARRAY
66896: PUSH
66897: LD_INT 3
66899: ARRAY
66900: EQUAL
66901: AND
66902: IFFALSE 66912
// result := true ;
66904: LD_ADDR_VAR 0 4
66908: PUSH
66909: LD_INT 1
66911: ST_TO_ADDR
// end ; end ;
66912: LD_VAR 0 4
66916: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66917: LD_INT 0
66919: PPUSH
66920: PPUSH
66921: PPUSH
66922: PPUSH
// if not unit or not area then
66923: LD_VAR 0 1
66927: NOT
66928: PUSH
66929: LD_VAR 0 2
66933: NOT
66934: OR
66935: IFFALSE 66939
// exit ;
66937: GO 67103
// tmp := AreaToList ( area , i ) ;
66939: LD_ADDR_VAR 0 6
66943: PUSH
66944: LD_VAR 0 2
66948: PPUSH
66949: LD_VAR 0 5
66953: PPUSH
66954: CALL_OW 517
66958: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66959: LD_ADDR_VAR 0 5
66963: PUSH
66964: DOUBLE
66965: LD_INT 1
66967: DEC
66968: ST_TO_ADDR
66969: LD_VAR 0 6
66973: PUSH
66974: LD_INT 1
66976: ARRAY
66977: PUSH
66978: FOR_TO
66979: IFFALSE 67101
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66981: LD_ADDR_VAR 0 7
66985: PUSH
66986: LD_VAR 0 6
66990: PUSH
66991: LD_INT 1
66993: ARRAY
66994: PUSH
66995: LD_VAR 0 5
66999: ARRAY
67000: PUSH
67001: LD_VAR 0 6
67005: PUSH
67006: LD_INT 2
67008: ARRAY
67009: PUSH
67010: LD_VAR 0 5
67014: ARRAY
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67020: LD_VAR 0 7
67024: PUSH
67025: LD_INT 1
67027: ARRAY
67028: PPUSH
67029: LD_VAR 0 7
67033: PUSH
67034: LD_INT 2
67036: ARRAY
67037: PPUSH
67038: CALL_OW 428
67042: PUSH
67043: LD_INT 0
67045: EQUAL
67046: IFFALSE 67099
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67048: LD_VAR 0 1
67052: PPUSH
67053: LD_VAR 0 7
67057: PUSH
67058: LD_INT 1
67060: ARRAY
67061: PPUSH
67062: LD_VAR 0 7
67066: PUSH
67067: LD_INT 2
67069: ARRAY
67070: PPUSH
67071: LD_VAR 0 3
67075: PPUSH
67076: CALL_OW 48
// result := IsPlaced ( unit ) ;
67080: LD_ADDR_VAR 0 4
67084: PUSH
67085: LD_VAR 0 1
67089: PPUSH
67090: CALL_OW 305
67094: ST_TO_ADDR
// exit ;
67095: POP
67096: POP
67097: GO 67103
// end ; end ;
67099: GO 66978
67101: POP
67102: POP
// end ;
67103: LD_VAR 0 4
67107: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67108: LD_INT 0
67110: PPUSH
67111: PPUSH
67112: PPUSH
// if not side or side > 8 then
67113: LD_VAR 0 1
67117: NOT
67118: PUSH
67119: LD_VAR 0 1
67123: PUSH
67124: LD_INT 8
67126: GREATER
67127: OR
67128: IFFALSE 67132
// exit ;
67130: GO 67319
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67132: LD_ADDR_VAR 0 4
67136: PUSH
67137: LD_INT 22
67139: PUSH
67140: LD_VAR 0 1
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 21
67151: PUSH
67152: LD_INT 3
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PPUSH
67163: CALL_OW 69
67167: ST_TO_ADDR
// if not tmp then
67168: LD_VAR 0 4
67172: NOT
67173: IFFALSE 67177
// exit ;
67175: GO 67319
// enable_addtolog := true ;
67177: LD_ADDR_OWVAR 81
67181: PUSH
67182: LD_INT 1
67184: ST_TO_ADDR
// AddToLog ( [ ) ;
67185: LD_STRING [
67187: PPUSH
67188: CALL_OW 561
// for i in tmp do
67192: LD_ADDR_VAR 0 3
67196: PUSH
67197: LD_VAR 0 4
67201: PUSH
67202: FOR_IN
67203: IFFALSE 67310
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67205: LD_STRING [
67207: PUSH
67208: LD_VAR 0 3
67212: PPUSH
67213: CALL_OW 266
67217: STR
67218: PUSH
67219: LD_STRING , 
67221: STR
67222: PUSH
67223: LD_VAR 0 3
67227: PPUSH
67228: CALL_OW 250
67232: STR
67233: PUSH
67234: LD_STRING , 
67236: STR
67237: PUSH
67238: LD_VAR 0 3
67242: PPUSH
67243: CALL_OW 251
67247: STR
67248: PUSH
67249: LD_STRING , 
67251: STR
67252: PUSH
67253: LD_VAR 0 3
67257: PPUSH
67258: CALL_OW 254
67262: STR
67263: PUSH
67264: LD_STRING , 
67266: STR
67267: PUSH
67268: LD_VAR 0 3
67272: PPUSH
67273: LD_INT 1
67275: PPUSH
67276: CALL_OW 268
67280: STR
67281: PUSH
67282: LD_STRING , 
67284: STR
67285: PUSH
67286: LD_VAR 0 3
67290: PPUSH
67291: LD_INT 2
67293: PPUSH
67294: CALL_OW 268
67298: STR
67299: PUSH
67300: LD_STRING ],
67302: STR
67303: PPUSH
67304: CALL_OW 561
// end ;
67308: GO 67202
67310: POP
67311: POP
// AddToLog ( ]; ) ;
67312: LD_STRING ];
67314: PPUSH
67315: CALL_OW 561
// end ;
67319: LD_VAR 0 2
67323: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67324: LD_INT 0
67326: PPUSH
67327: PPUSH
67328: PPUSH
67329: PPUSH
67330: PPUSH
// if not area or not rate or not max then
67331: LD_VAR 0 1
67335: NOT
67336: PUSH
67337: LD_VAR 0 2
67341: NOT
67342: OR
67343: PUSH
67344: LD_VAR 0 4
67348: NOT
67349: OR
67350: IFFALSE 67354
// exit ;
67352: GO 67546
// while 1 do
67354: LD_INT 1
67356: IFFALSE 67546
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67358: LD_ADDR_VAR 0 9
67362: PUSH
67363: LD_VAR 0 1
67367: PPUSH
67368: LD_INT 1
67370: PPUSH
67371: CALL_OW 287
67375: PUSH
67376: LD_INT 10
67378: MUL
67379: ST_TO_ADDR
// r := rate / 10 ;
67380: LD_ADDR_VAR 0 7
67384: PUSH
67385: LD_VAR 0 2
67389: PUSH
67390: LD_INT 10
67392: DIVREAL
67393: ST_TO_ADDR
// time := 1 1$00 ;
67394: LD_ADDR_VAR 0 8
67398: PUSH
67399: LD_INT 2100
67401: ST_TO_ADDR
// if amount < min then
67402: LD_VAR 0 9
67406: PUSH
67407: LD_VAR 0 3
67411: LESS
67412: IFFALSE 67430
// r := r * 2 else
67414: LD_ADDR_VAR 0 7
67418: PUSH
67419: LD_VAR 0 7
67423: PUSH
67424: LD_INT 2
67426: MUL
67427: ST_TO_ADDR
67428: GO 67456
// if amount > max then
67430: LD_VAR 0 9
67434: PUSH
67435: LD_VAR 0 4
67439: GREATER
67440: IFFALSE 67456
// r := r / 2 ;
67442: LD_ADDR_VAR 0 7
67446: PUSH
67447: LD_VAR 0 7
67451: PUSH
67452: LD_INT 2
67454: DIVREAL
67455: ST_TO_ADDR
// time := time / r ;
67456: LD_ADDR_VAR 0 8
67460: PUSH
67461: LD_VAR 0 8
67465: PUSH
67466: LD_VAR 0 7
67470: DIVREAL
67471: ST_TO_ADDR
// if time < 0 then
67472: LD_VAR 0 8
67476: PUSH
67477: LD_INT 0
67479: LESS
67480: IFFALSE 67497
// time := time * - 1 ;
67482: LD_ADDR_VAR 0 8
67486: PUSH
67487: LD_VAR 0 8
67491: PUSH
67492: LD_INT 1
67494: NEG
67495: MUL
67496: ST_TO_ADDR
// wait ( time ) ;
67497: LD_VAR 0 8
67501: PPUSH
67502: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
67506: LD_INT 35
67508: PPUSH
67509: LD_INT 875
67511: PPUSH
67512: CALL_OW 12
67516: PPUSH
67517: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67521: LD_INT 1
67523: PPUSH
67524: LD_INT 5
67526: PPUSH
67527: CALL_OW 12
67531: PPUSH
67532: LD_VAR 0 1
67536: PPUSH
67537: LD_INT 1
67539: PPUSH
67540: CALL_OW 55
// end ;
67544: GO 67354
// end ;
67546: LD_VAR 0 5
67550: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67551: LD_INT 0
67553: PPUSH
67554: PPUSH
67555: PPUSH
67556: PPUSH
67557: PPUSH
67558: PPUSH
67559: PPUSH
67560: PPUSH
// if not turrets or not factories then
67561: LD_VAR 0 1
67565: NOT
67566: PUSH
67567: LD_VAR 0 2
67571: NOT
67572: OR
67573: IFFALSE 67577
// exit ;
67575: GO 67884
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67577: LD_ADDR_VAR 0 10
67581: PUSH
67582: LD_INT 5
67584: PUSH
67585: LD_INT 6
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 2
67594: PUSH
67595: LD_INT 4
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 3
67604: PUSH
67605: LD_INT 5
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 24
67619: PUSH
67620: LD_INT 25
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 23
67629: PUSH
67630: LD_INT 27
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 42
67643: PUSH
67644: LD_INT 43
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 44
67653: PUSH
67654: LD_INT 46
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 45
67663: PUSH
67664: LD_INT 47
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: LIST
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: LIST
67680: ST_TO_ADDR
// result := [ ] ;
67681: LD_ADDR_VAR 0 3
67685: PUSH
67686: EMPTY
67687: ST_TO_ADDR
// for i in turrets do
67688: LD_ADDR_VAR 0 4
67692: PUSH
67693: LD_VAR 0 1
67697: PUSH
67698: FOR_IN
67699: IFFALSE 67882
// begin nat := GetNation ( i ) ;
67701: LD_ADDR_VAR 0 7
67705: PUSH
67706: LD_VAR 0 4
67710: PPUSH
67711: CALL_OW 248
67715: ST_TO_ADDR
// weapon := 0 ;
67716: LD_ADDR_VAR 0 8
67720: PUSH
67721: LD_INT 0
67723: ST_TO_ADDR
// if not nat then
67724: LD_VAR 0 7
67728: NOT
67729: IFFALSE 67733
// continue ;
67731: GO 67698
// for j in list [ nat ] do
67733: LD_ADDR_VAR 0 5
67737: PUSH
67738: LD_VAR 0 10
67742: PUSH
67743: LD_VAR 0 7
67747: ARRAY
67748: PUSH
67749: FOR_IN
67750: IFFALSE 67791
// if GetBWeapon ( i ) = j [ 1 ] then
67752: LD_VAR 0 4
67756: PPUSH
67757: CALL_OW 269
67761: PUSH
67762: LD_VAR 0 5
67766: PUSH
67767: LD_INT 1
67769: ARRAY
67770: EQUAL
67771: IFFALSE 67789
// begin weapon := j [ 2 ] ;
67773: LD_ADDR_VAR 0 8
67777: PUSH
67778: LD_VAR 0 5
67782: PUSH
67783: LD_INT 2
67785: ARRAY
67786: ST_TO_ADDR
// break ;
67787: GO 67791
// end ;
67789: GO 67749
67791: POP
67792: POP
// if not weapon then
67793: LD_VAR 0 8
67797: NOT
67798: IFFALSE 67802
// continue ;
67800: GO 67698
// for k in factories do
67802: LD_ADDR_VAR 0 6
67806: PUSH
67807: LD_VAR 0 2
67811: PUSH
67812: FOR_IN
67813: IFFALSE 67878
// begin weapons := AvailableWeaponList ( k ) ;
67815: LD_ADDR_VAR 0 9
67819: PUSH
67820: LD_VAR 0 6
67824: PPUSH
67825: CALL_OW 478
67829: ST_TO_ADDR
// if not weapons then
67830: LD_VAR 0 9
67834: NOT
67835: IFFALSE 67839
// continue ;
67837: GO 67812
// if weapon in weapons then
67839: LD_VAR 0 8
67843: PUSH
67844: LD_VAR 0 9
67848: IN
67849: IFFALSE 67876
// begin result := [ i , weapon ] ;
67851: LD_ADDR_VAR 0 3
67855: PUSH
67856: LD_VAR 0 4
67860: PUSH
67861: LD_VAR 0 8
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: ST_TO_ADDR
// exit ;
67870: POP
67871: POP
67872: POP
67873: POP
67874: GO 67884
// end ; end ;
67876: GO 67812
67878: POP
67879: POP
// end ;
67880: GO 67698
67882: POP
67883: POP
// end ;
67884: LD_VAR 0 3
67888: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67889: LD_INT 0
67891: PPUSH
// if not side or side > 8 then
67892: LD_VAR 0 3
67896: NOT
67897: PUSH
67898: LD_VAR 0 3
67902: PUSH
67903: LD_INT 8
67905: GREATER
67906: OR
67907: IFFALSE 67911
// exit ;
67909: GO 67970
// if not range then
67911: LD_VAR 0 4
67915: NOT
67916: IFFALSE 67927
// range := - 12 ;
67918: LD_ADDR_VAR 0 4
67922: PUSH
67923: LD_INT 12
67925: NEG
67926: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67927: LD_VAR 0 1
67931: PPUSH
67932: LD_VAR 0 2
67936: PPUSH
67937: LD_VAR 0 3
67941: PPUSH
67942: LD_VAR 0 4
67946: PPUSH
67947: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67951: LD_VAR 0 1
67955: PPUSH
67956: LD_VAR 0 2
67960: PPUSH
67961: LD_VAR 0 3
67965: PPUSH
67966: CALL_OW 331
// end ;
67970: LD_VAR 0 5
67974: RET
// export function Video ( mode ) ; begin
67975: LD_INT 0
67977: PPUSH
// ingame_video = mode ;
67978: LD_ADDR_OWVAR 52
67982: PUSH
67983: LD_VAR 0 1
67987: ST_TO_ADDR
// interface_hidden = mode ;
67988: LD_ADDR_OWVAR 54
67992: PUSH
67993: LD_VAR 0 1
67997: ST_TO_ADDR
// end ;
67998: LD_VAR 0 2
68002: RET
// export function Join ( array , element ) ; begin
68003: LD_INT 0
68005: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68006: LD_ADDR_VAR 0 3
68010: PUSH
68011: LD_VAR 0 1
68015: PPUSH
68016: LD_VAR 0 1
68020: PUSH
68021: LD_INT 1
68023: PLUS
68024: PPUSH
68025: LD_VAR 0 2
68029: PPUSH
68030: CALL_OW 1
68034: ST_TO_ADDR
// end ;
68035: LD_VAR 0 3
68039: RET
// export function JoinUnion ( array , element ) ; begin
68040: LD_INT 0
68042: PPUSH
// result := array union element ;
68043: LD_ADDR_VAR 0 3
68047: PUSH
68048: LD_VAR 0 1
68052: PUSH
68053: LD_VAR 0 2
68057: UNION
68058: ST_TO_ADDR
// end ;
68059: LD_VAR 0 3
68063: RET
// export function GetBehemoths ( side ) ; begin
68064: LD_INT 0
68066: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68067: LD_ADDR_VAR 0 2
68071: PUSH
68072: LD_INT 22
68074: PUSH
68075: LD_VAR 0 1
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 31
68086: PUSH
68087: LD_INT 25
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PPUSH
68098: CALL_OW 69
68102: ST_TO_ADDR
// end ;
68103: LD_VAR 0 2
68107: RET
// export function Shuffle ( array ) ; var i , index ; begin
68108: LD_INT 0
68110: PPUSH
68111: PPUSH
68112: PPUSH
// result := [ ] ;
68113: LD_ADDR_VAR 0 2
68117: PUSH
68118: EMPTY
68119: ST_TO_ADDR
// if not array then
68120: LD_VAR 0 1
68124: NOT
68125: IFFALSE 68129
// exit ;
68127: GO 68228
// Randomize ;
68129: CALL_OW 10
// for i = array downto 1 do
68133: LD_ADDR_VAR 0 3
68137: PUSH
68138: DOUBLE
68139: LD_VAR 0 1
68143: INC
68144: ST_TO_ADDR
68145: LD_INT 1
68147: PUSH
68148: FOR_DOWNTO
68149: IFFALSE 68226
// begin index := rand ( 1 , array ) ;
68151: LD_ADDR_VAR 0 4
68155: PUSH
68156: LD_INT 1
68158: PPUSH
68159: LD_VAR 0 1
68163: PPUSH
68164: CALL_OW 12
68168: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68169: LD_ADDR_VAR 0 2
68173: PUSH
68174: LD_VAR 0 2
68178: PPUSH
68179: LD_VAR 0 2
68183: PUSH
68184: LD_INT 1
68186: PLUS
68187: PPUSH
68188: LD_VAR 0 1
68192: PUSH
68193: LD_VAR 0 4
68197: ARRAY
68198: PPUSH
68199: CALL_OW 2
68203: ST_TO_ADDR
// array := Delete ( array , index ) ;
68204: LD_ADDR_VAR 0 1
68208: PUSH
68209: LD_VAR 0 1
68213: PPUSH
68214: LD_VAR 0 4
68218: PPUSH
68219: CALL_OW 3
68223: ST_TO_ADDR
// end ;
68224: GO 68148
68226: POP
68227: POP
// end ;
68228: LD_VAR 0 2
68232: RET
// export function GetBaseMaterials ( base ) ; begin
68233: LD_INT 0
68235: PPUSH
// result := [ 0 , 0 , 0 ] ;
68236: LD_ADDR_VAR 0 2
68240: PUSH
68241: LD_INT 0
68243: PUSH
68244: LD_INT 0
68246: PUSH
68247: LD_INT 0
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: LIST
68254: ST_TO_ADDR
// if not base then
68255: LD_VAR 0 1
68259: NOT
68260: IFFALSE 68264
// exit ;
68262: GO 68313
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68264: LD_ADDR_VAR 0 2
68268: PUSH
68269: LD_VAR 0 1
68273: PPUSH
68274: LD_INT 1
68276: PPUSH
68277: CALL_OW 275
68281: PUSH
68282: LD_VAR 0 1
68286: PPUSH
68287: LD_INT 2
68289: PPUSH
68290: CALL_OW 275
68294: PUSH
68295: LD_VAR 0 1
68299: PPUSH
68300: LD_INT 3
68302: PPUSH
68303: CALL_OW 275
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: LIST
68312: ST_TO_ADDR
// end ;
68313: LD_VAR 0 2
68317: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68318: LD_INT 0
68320: PPUSH
68321: PPUSH
// result := array ;
68322: LD_ADDR_VAR 0 3
68326: PUSH
68327: LD_VAR 0 1
68331: ST_TO_ADDR
// if size > 0 then
68332: LD_VAR 0 2
68336: PUSH
68337: LD_INT 0
68339: GREATER
68340: IFFALSE 68386
// for i := array downto size do
68342: LD_ADDR_VAR 0 4
68346: PUSH
68347: DOUBLE
68348: LD_VAR 0 1
68352: INC
68353: ST_TO_ADDR
68354: LD_VAR 0 2
68358: PUSH
68359: FOR_DOWNTO
68360: IFFALSE 68384
// result := Delete ( result , result ) ;
68362: LD_ADDR_VAR 0 3
68366: PUSH
68367: LD_VAR 0 3
68371: PPUSH
68372: LD_VAR 0 3
68376: PPUSH
68377: CALL_OW 3
68381: ST_TO_ADDR
68382: GO 68359
68384: POP
68385: POP
// end ;
68386: LD_VAR 0 3
68390: RET
// export function ComExit ( unit ) ; var tmp ; begin
68391: LD_INT 0
68393: PPUSH
68394: PPUSH
// if not IsInUnit ( unit ) then
68395: LD_VAR 0 1
68399: PPUSH
68400: CALL_OW 310
68404: NOT
68405: IFFALSE 68409
// exit ;
68407: GO 68469
// tmp := IsInUnit ( unit ) ;
68409: LD_ADDR_VAR 0 3
68413: PUSH
68414: LD_VAR 0 1
68418: PPUSH
68419: CALL_OW 310
68423: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68424: LD_VAR 0 3
68428: PPUSH
68429: CALL_OW 247
68433: PUSH
68434: LD_INT 2
68436: EQUAL
68437: IFFALSE 68450
// ComExitVehicle ( unit ) else
68439: LD_VAR 0 1
68443: PPUSH
68444: CALL_OW 121
68448: GO 68459
// ComExitBuilding ( unit ) ;
68450: LD_VAR 0 1
68454: PPUSH
68455: CALL_OW 122
// result := tmp ;
68459: LD_ADDR_VAR 0 2
68463: PUSH
68464: LD_VAR 0 3
68468: ST_TO_ADDR
// end ;
68469: LD_VAR 0 2
68473: RET
// export function ComExitAll ( units ) ; var i ; begin
68474: LD_INT 0
68476: PPUSH
68477: PPUSH
// if not units then
68478: LD_VAR 0 1
68482: NOT
68483: IFFALSE 68487
// exit ;
68485: GO 68513
// for i in units do
68487: LD_ADDR_VAR 0 3
68491: PUSH
68492: LD_VAR 0 1
68496: PUSH
68497: FOR_IN
68498: IFFALSE 68511
// ComExit ( i ) ;
68500: LD_VAR 0 3
68504: PPUSH
68505: CALL 68391 0 1
68509: GO 68497
68511: POP
68512: POP
// end ;
68513: LD_VAR 0 2
68517: RET
// export function ResetHc ; begin
68518: LD_INT 0
68520: PPUSH
// InitHc ;
68521: CALL_OW 19
// hc_importance := 0 ;
68525: LD_ADDR_OWVAR 32
68529: PUSH
68530: LD_INT 0
68532: ST_TO_ADDR
// end ;
68533: LD_VAR 0 1
68537: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68538: LD_INT 0
68540: PPUSH
68541: PPUSH
68542: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68543: LD_ADDR_VAR 0 6
68547: PUSH
68548: LD_VAR 0 1
68552: PUSH
68553: LD_VAR 0 3
68557: PLUS
68558: PUSH
68559: LD_INT 2
68561: DIV
68562: ST_TO_ADDR
// if _x < 0 then
68563: LD_VAR 0 6
68567: PUSH
68568: LD_INT 0
68570: LESS
68571: IFFALSE 68588
// _x := _x * - 1 ;
68573: LD_ADDR_VAR 0 6
68577: PUSH
68578: LD_VAR 0 6
68582: PUSH
68583: LD_INT 1
68585: NEG
68586: MUL
68587: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68588: LD_ADDR_VAR 0 7
68592: PUSH
68593: LD_VAR 0 2
68597: PUSH
68598: LD_VAR 0 4
68602: PLUS
68603: PUSH
68604: LD_INT 2
68606: DIV
68607: ST_TO_ADDR
// if _y < 0 then
68608: LD_VAR 0 7
68612: PUSH
68613: LD_INT 0
68615: LESS
68616: IFFALSE 68633
// _y := _y * - 1 ;
68618: LD_ADDR_VAR 0 7
68622: PUSH
68623: LD_VAR 0 7
68627: PUSH
68628: LD_INT 1
68630: NEG
68631: MUL
68632: ST_TO_ADDR
// result := [ _x , _y ] ;
68633: LD_ADDR_VAR 0 5
68637: PUSH
68638: LD_VAR 0 6
68642: PUSH
68643: LD_VAR 0 7
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: ST_TO_ADDR
// end ;
68652: LD_VAR 0 5
68656: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68657: LD_INT 0
68659: PPUSH
68660: PPUSH
68661: PPUSH
68662: PPUSH
// task := GetTaskList ( unit ) ;
68663: LD_ADDR_VAR 0 7
68667: PUSH
68668: LD_VAR 0 1
68672: PPUSH
68673: CALL_OW 437
68677: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68678: LD_VAR 0 7
68682: NOT
68683: PUSH
68684: LD_VAR 0 1
68688: PPUSH
68689: LD_VAR 0 2
68693: PPUSH
68694: CALL_OW 308
68698: NOT
68699: AND
68700: IFFALSE 68704
// exit ;
68702: GO 68822
// if IsInArea ( unit , area ) then
68704: LD_VAR 0 1
68708: PPUSH
68709: LD_VAR 0 2
68713: PPUSH
68714: CALL_OW 308
68718: IFFALSE 68736
// begin ComMoveToArea ( unit , goAway ) ;
68720: LD_VAR 0 1
68724: PPUSH
68725: LD_VAR 0 3
68729: PPUSH
68730: CALL_OW 113
// exit ;
68734: GO 68822
// end ; if task [ 1 ] [ 1 ] <> M then
68736: LD_VAR 0 7
68740: PUSH
68741: LD_INT 1
68743: ARRAY
68744: PUSH
68745: LD_INT 1
68747: ARRAY
68748: PUSH
68749: LD_STRING M
68751: NONEQUAL
68752: IFFALSE 68756
// exit ;
68754: GO 68822
// x := task [ 1 ] [ 2 ] ;
68756: LD_ADDR_VAR 0 5
68760: PUSH
68761: LD_VAR 0 7
68765: PUSH
68766: LD_INT 1
68768: ARRAY
68769: PUSH
68770: LD_INT 2
68772: ARRAY
68773: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68774: LD_ADDR_VAR 0 6
68778: PUSH
68779: LD_VAR 0 7
68783: PUSH
68784: LD_INT 1
68786: ARRAY
68787: PUSH
68788: LD_INT 3
68790: ARRAY
68791: ST_TO_ADDR
// if InArea ( x , y , area ) then
68792: LD_VAR 0 5
68796: PPUSH
68797: LD_VAR 0 6
68801: PPUSH
68802: LD_VAR 0 2
68806: PPUSH
68807: CALL_OW 309
68811: IFFALSE 68822
// ComStop ( unit ) ;
68813: LD_VAR 0 1
68817: PPUSH
68818: CALL_OW 141
// end ;
68822: LD_VAR 0 4
68826: RET
// export function Abs ( value ) ; begin
68827: LD_INT 0
68829: PPUSH
// result := value ;
68830: LD_ADDR_VAR 0 2
68834: PUSH
68835: LD_VAR 0 1
68839: ST_TO_ADDR
// if value < 0 then
68840: LD_VAR 0 1
68844: PUSH
68845: LD_INT 0
68847: LESS
68848: IFFALSE 68865
// result := value * - 1 ;
68850: LD_ADDR_VAR 0 2
68854: PUSH
68855: LD_VAR 0 1
68859: PUSH
68860: LD_INT 1
68862: NEG
68863: MUL
68864: ST_TO_ADDR
// end ;
68865: LD_VAR 0 2
68869: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68870: LD_INT 0
68872: PPUSH
68873: PPUSH
68874: PPUSH
68875: PPUSH
68876: PPUSH
68877: PPUSH
68878: PPUSH
68879: PPUSH
// if not unit or not building then
68880: LD_VAR 0 1
68884: NOT
68885: PUSH
68886: LD_VAR 0 2
68890: NOT
68891: OR
68892: IFFALSE 68896
// exit ;
68894: GO 69122
// x := GetX ( building ) ;
68896: LD_ADDR_VAR 0 4
68900: PUSH
68901: LD_VAR 0 2
68905: PPUSH
68906: CALL_OW 250
68910: ST_TO_ADDR
// y := GetY ( building ) ;
68911: LD_ADDR_VAR 0 6
68915: PUSH
68916: LD_VAR 0 2
68920: PPUSH
68921: CALL_OW 251
68925: ST_TO_ADDR
// d := GetDir ( building ) ;
68926: LD_ADDR_VAR 0 8
68930: PUSH
68931: LD_VAR 0 2
68935: PPUSH
68936: CALL_OW 254
68940: ST_TO_ADDR
// r := 4 ;
68941: LD_ADDR_VAR 0 9
68945: PUSH
68946: LD_INT 4
68948: ST_TO_ADDR
// for i := 1 to 5 do
68949: LD_ADDR_VAR 0 10
68953: PUSH
68954: DOUBLE
68955: LD_INT 1
68957: DEC
68958: ST_TO_ADDR
68959: LD_INT 5
68961: PUSH
68962: FOR_TO
68963: IFFALSE 69120
// begin _x := ShiftX ( x , d , r + i ) ;
68965: LD_ADDR_VAR 0 5
68969: PUSH
68970: LD_VAR 0 4
68974: PPUSH
68975: LD_VAR 0 8
68979: PPUSH
68980: LD_VAR 0 9
68984: PUSH
68985: LD_VAR 0 10
68989: PLUS
68990: PPUSH
68991: CALL_OW 272
68995: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68996: LD_ADDR_VAR 0 7
69000: PUSH
69001: LD_VAR 0 6
69005: PPUSH
69006: LD_VAR 0 8
69010: PPUSH
69011: LD_VAR 0 9
69015: PUSH
69016: LD_VAR 0 10
69020: PLUS
69021: PPUSH
69022: CALL_OW 273
69026: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69027: LD_VAR 0 5
69031: PPUSH
69032: LD_VAR 0 7
69036: PPUSH
69037: CALL_OW 488
69041: PUSH
69042: LD_VAR 0 5
69046: PPUSH
69047: LD_VAR 0 7
69051: PPUSH
69052: CALL_OW 428
69056: PPUSH
69057: CALL_OW 247
69061: PUSH
69062: LD_INT 3
69064: PUSH
69065: LD_INT 2
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: IN
69072: NOT
69073: AND
69074: IFFALSE 69118
// begin ComMoveXY ( unit , _x , _y ) ;
69076: LD_VAR 0 1
69080: PPUSH
69081: LD_VAR 0 5
69085: PPUSH
69086: LD_VAR 0 7
69090: PPUSH
69091: CALL_OW 111
// result := [ _x , _y ] ;
69095: LD_ADDR_VAR 0 3
69099: PUSH
69100: LD_VAR 0 5
69104: PUSH
69105: LD_VAR 0 7
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: ST_TO_ADDR
// exit ;
69114: POP
69115: POP
69116: GO 69122
// end ; end ;
69118: GO 68962
69120: POP
69121: POP
// end ;
69122: LD_VAR 0 3
69126: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69127: LD_INT 0
69129: PPUSH
69130: PPUSH
69131: PPUSH
// result := 0 ;
69132: LD_ADDR_VAR 0 3
69136: PUSH
69137: LD_INT 0
69139: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69140: LD_VAR 0 1
69144: PUSH
69145: LD_INT 0
69147: LESS
69148: PUSH
69149: LD_VAR 0 1
69153: PUSH
69154: LD_INT 8
69156: GREATER
69157: OR
69158: PUSH
69159: LD_VAR 0 2
69163: PUSH
69164: LD_INT 0
69166: LESS
69167: OR
69168: PUSH
69169: LD_VAR 0 2
69173: PUSH
69174: LD_INT 8
69176: GREATER
69177: OR
69178: IFFALSE 69182
// exit ;
69180: GO 69257
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69182: LD_ADDR_VAR 0 4
69186: PUSH
69187: LD_INT 22
69189: PUSH
69190: LD_VAR 0 2
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PPUSH
69199: CALL_OW 69
69203: PUSH
69204: FOR_IN
69205: IFFALSE 69255
// begin un := UnitShoot ( i ) ;
69207: LD_ADDR_VAR 0 5
69211: PUSH
69212: LD_VAR 0 4
69216: PPUSH
69217: CALL_OW 504
69221: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69222: LD_VAR 0 5
69226: PPUSH
69227: CALL_OW 255
69231: PUSH
69232: LD_VAR 0 1
69236: EQUAL
69237: IFFALSE 69253
// begin result := un ;
69239: LD_ADDR_VAR 0 3
69243: PUSH
69244: LD_VAR 0 5
69248: ST_TO_ADDR
// exit ;
69249: POP
69250: POP
69251: GO 69257
// end ; end ;
69253: GO 69204
69255: POP
69256: POP
// end ;
69257: LD_VAR 0 3
69261: RET
// export function GetCargoBay ( units ) ; begin
69262: LD_INT 0
69264: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69265: LD_ADDR_VAR 0 2
69269: PUSH
69270: LD_VAR 0 1
69274: PPUSH
69275: LD_INT 2
69277: PUSH
69278: LD_INT 34
69280: PUSH
69281: LD_INT 12
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 34
69290: PUSH
69291: LD_INT 51
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 34
69300: PUSH
69301: LD_INT 32
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 34
69310: PUSH
69311: LD_EXP 45
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: PPUSH
69327: CALL_OW 72
69331: ST_TO_ADDR
// end ;
69332: LD_VAR 0 2
69336: RET
// export function Negate ( value ) ; begin
69337: LD_INT 0
69339: PPUSH
// result := not value ;
69340: LD_ADDR_VAR 0 2
69344: PUSH
69345: LD_VAR 0 1
69349: NOT
69350: ST_TO_ADDR
// end ;
69351: LD_VAR 0 2
69355: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
69356: LD_INT 0
69358: PPUSH
// if x1 = x2 then
69359: LD_VAR 0 1
69363: PUSH
69364: LD_VAR 0 3
69368: EQUAL
69369: IFFALSE 69403
// begin if y1 > y2 then
69371: LD_VAR 0 2
69375: PUSH
69376: LD_VAR 0 4
69380: GREATER
69381: IFFALSE 69393
// result := 0 else
69383: LD_ADDR_VAR 0 5
69387: PUSH
69388: LD_INT 0
69390: ST_TO_ADDR
69391: GO 69401
// result := 3 ;
69393: LD_ADDR_VAR 0 5
69397: PUSH
69398: LD_INT 3
69400: ST_TO_ADDR
// exit ;
69401: GO 69489
// end ; if y1 = y2 then
69403: LD_VAR 0 2
69407: PUSH
69408: LD_VAR 0 4
69412: EQUAL
69413: IFFALSE 69447
// begin if x1 > x2 then
69415: LD_VAR 0 1
69419: PUSH
69420: LD_VAR 0 3
69424: GREATER
69425: IFFALSE 69437
// result := 1 else
69427: LD_ADDR_VAR 0 5
69431: PUSH
69432: LD_INT 1
69434: ST_TO_ADDR
69435: GO 69445
// result := 4 ;
69437: LD_ADDR_VAR 0 5
69441: PUSH
69442: LD_INT 4
69444: ST_TO_ADDR
// exit ;
69445: GO 69489
// end ; if x1 > x2 and y1 > y2 then
69447: LD_VAR 0 1
69451: PUSH
69452: LD_VAR 0 3
69456: GREATER
69457: PUSH
69458: LD_VAR 0 2
69462: PUSH
69463: LD_VAR 0 4
69467: GREATER
69468: AND
69469: IFFALSE 69481
// result := 2 else
69471: LD_ADDR_VAR 0 5
69475: PUSH
69476: LD_INT 2
69478: ST_TO_ADDR
69479: GO 69489
// result := 5 ;
69481: LD_ADDR_VAR 0 5
69485: PUSH
69486: LD_INT 5
69488: ST_TO_ADDR
// end ;
69489: LD_VAR 0 5
69493: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69494: LD_INT 0
69496: PPUSH
69497: PPUSH
// if not driver or not IsInUnit ( driver ) then
69498: LD_VAR 0 1
69502: NOT
69503: PUSH
69504: LD_VAR 0 1
69508: PPUSH
69509: CALL_OW 310
69513: NOT
69514: OR
69515: IFFALSE 69519
// exit ;
69517: GO 69609
// vehicle := IsInUnit ( driver ) ;
69519: LD_ADDR_VAR 0 3
69523: PUSH
69524: LD_VAR 0 1
69528: PPUSH
69529: CALL_OW 310
69533: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69534: LD_VAR 0 1
69538: PPUSH
69539: LD_STRING \
69541: PUSH
69542: LD_INT 0
69544: PUSH
69545: LD_INT 0
69547: PUSH
69548: LD_INT 0
69550: PUSH
69551: LD_INT 0
69553: PUSH
69554: LD_INT 0
69556: PUSH
69557: LD_INT 0
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: PUSH
69569: LD_STRING E
69571: PUSH
69572: LD_INT 0
69574: PUSH
69575: LD_INT 0
69577: PUSH
69578: LD_VAR 0 3
69582: PUSH
69583: LD_INT 0
69585: PUSH
69586: LD_INT 0
69588: PUSH
69589: LD_INT 0
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PPUSH
69605: CALL_OW 446
// end ;
69609: LD_VAR 0 2
69613: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69614: LD_INT 0
69616: PPUSH
69617: PPUSH
// if not driver or not IsInUnit ( driver ) then
69618: LD_VAR 0 1
69622: NOT
69623: PUSH
69624: LD_VAR 0 1
69628: PPUSH
69629: CALL_OW 310
69633: NOT
69634: OR
69635: IFFALSE 69639
// exit ;
69637: GO 69729
// vehicle := IsInUnit ( driver ) ;
69639: LD_ADDR_VAR 0 3
69643: PUSH
69644: LD_VAR 0 1
69648: PPUSH
69649: CALL_OW 310
69653: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69654: LD_VAR 0 1
69658: PPUSH
69659: LD_STRING \
69661: PUSH
69662: LD_INT 0
69664: PUSH
69665: LD_INT 0
69667: PUSH
69668: LD_INT 0
69670: PUSH
69671: LD_INT 0
69673: PUSH
69674: LD_INT 0
69676: PUSH
69677: LD_INT 0
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: PUSH
69689: LD_STRING E
69691: PUSH
69692: LD_INT 0
69694: PUSH
69695: LD_INT 0
69697: PUSH
69698: LD_VAR 0 3
69702: PUSH
69703: LD_INT 0
69705: PUSH
69706: LD_INT 0
69708: PUSH
69709: LD_INT 0
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PPUSH
69725: CALL_OW 447
// end ;
69729: LD_VAR 0 2
69733: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69734: LD_INT 0
69736: PPUSH
69737: PPUSH
69738: PPUSH
// tmp := [ ] ;
69739: LD_ADDR_VAR 0 5
69743: PUSH
69744: EMPTY
69745: ST_TO_ADDR
// for i in units do
69746: LD_ADDR_VAR 0 4
69750: PUSH
69751: LD_VAR 0 1
69755: PUSH
69756: FOR_IN
69757: IFFALSE 69795
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69759: LD_ADDR_VAR 0 5
69763: PUSH
69764: LD_VAR 0 5
69768: PPUSH
69769: LD_VAR 0 5
69773: PUSH
69774: LD_INT 1
69776: PLUS
69777: PPUSH
69778: LD_VAR 0 4
69782: PPUSH
69783: CALL_OW 256
69787: PPUSH
69788: CALL_OW 2
69792: ST_TO_ADDR
69793: GO 69756
69795: POP
69796: POP
// if not tmp then
69797: LD_VAR 0 5
69801: NOT
69802: IFFALSE 69806
// exit ;
69804: GO 69854
// if asc then
69806: LD_VAR 0 2
69810: IFFALSE 69834
// result := SortListByListAsc ( units , tmp ) else
69812: LD_ADDR_VAR 0 3
69816: PUSH
69817: LD_VAR 0 1
69821: PPUSH
69822: LD_VAR 0 5
69826: PPUSH
69827: CALL_OW 76
69831: ST_TO_ADDR
69832: GO 69854
// result := SortListByListDesc ( units , tmp ) ;
69834: LD_ADDR_VAR 0 3
69838: PUSH
69839: LD_VAR 0 1
69843: PPUSH
69844: LD_VAR 0 5
69848: PPUSH
69849: CALL_OW 77
69853: ST_TO_ADDR
// end ;
69854: LD_VAR 0 3
69858: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69859: LD_INT 0
69861: PPUSH
69862: PPUSH
// task := GetTaskList ( mech ) ;
69863: LD_ADDR_VAR 0 4
69867: PUSH
69868: LD_VAR 0 1
69872: PPUSH
69873: CALL_OW 437
69877: ST_TO_ADDR
// if not task then
69878: LD_VAR 0 4
69882: NOT
69883: IFFALSE 69887
// exit ;
69885: GO 69929
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69887: LD_ADDR_VAR 0 3
69891: PUSH
69892: LD_VAR 0 4
69896: PUSH
69897: LD_INT 1
69899: ARRAY
69900: PUSH
69901: LD_INT 1
69903: ARRAY
69904: PUSH
69905: LD_STRING r
69907: EQUAL
69908: PUSH
69909: LD_VAR 0 4
69913: PUSH
69914: LD_INT 1
69916: ARRAY
69917: PUSH
69918: LD_INT 4
69920: ARRAY
69921: PUSH
69922: LD_VAR 0 2
69926: EQUAL
69927: AND
69928: ST_TO_ADDR
// end ;
69929: LD_VAR 0 3
69933: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69934: LD_INT 0
69936: PPUSH
// SetDir ( unit , d ) ;
69937: LD_VAR 0 1
69941: PPUSH
69942: LD_VAR 0 4
69946: PPUSH
69947: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69951: LD_VAR 0 1
69955: PPUSH
69956: LD_VAR 0 2
69960: PPUSH
69961: LD_VAR 0 3
69965: PPUSH
69966: LD_VAR 0 5
69970: PPUSH
69971: CALL_OW 48
// end ;
69975: LD_VAR 0 6
69979: RET
// export function ToNaturalNumber ( number ) ; begin
69980: LD_INT 0
69982: PPUSH
// result := number div 1 ;
69983: LD_ADDR_VAR 0 2
69987: PUSH
69988: LD_VAR 0 1
69992: PUSH
69993: LD_INT 1
69995: DIV
69996: ST_TO_ADDR
// if number < 0 then
69997: LD_VAR 0 1
70001: PUSH
70002: LD_INT 0
70004: LESS
70005: IFFALSE 70015
// result := 0 ;
70007: LD_ADDR_VAR 0 2
70011: PUSH
70012: LD_INT 0
70014: ST_TO_ADDR
// end ; end_of_file
70015: LD_VAR 0 2
70019: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70020: LD_VAR 0 1
70024: PUSH
70025: LD_INT 200
70027: DOUBLE
70028: GREATEREQUAL
70029: IFFALSE 70037
70031: LD_INT 299
70033: DOUBLE
70034: LESSEQUAL
70035: IFTRUE 70039
70037: GO 70071
70039: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70040: LD_VAR 0 1
70044: PPUSH
70045: LD_VAR 0 2
70049: PPUSH
70050: LD_VAR 0 3
70054: PPUSH
70055: LD_VAR 0 4
70059: PPUSH
70060: LD_VAR 0 5
70064: PPUSH
70065: CALL 14210 0 5
70069: GO 70148
70071: LD_INT 300
70073: DOUBLE
70074: GREATEREQUAL
70075: IFFALSE 70083
70077: LD_INT 399
70079: DOUBLE
70080: LESSEQUAL
70081: IFTRUE 70085
70083: GO 70147
70085: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70086: LD_VAR 0 1
70090: PPUSH
70091: LD_VAR 0 2
70095: PPUSH
70096: LD_VAR 0 3
70100: PPUSH
70101: LD_VAR 0 4
70105: PPUSH
70106: LD_VAR 0 5
70110: PPUSH
70111: LD_VAR 0 6
70115: PPUSH
70116: LD_VAR 0 7
70120: PPUSH
70121: LD_VAR 0 8
70125: PPUSH
70126: LD_VAR 0 9
70130: PPUSH
70131: LD_VAR 0 10
70135: PPUSH
70136: LD_VAR 0 11
70140: PPUSH
70141: CALL 29285 0 11
70145: GO 70148
70147: POP
// end ;
70148: PPOPN 11
70150: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70151: LD_VAR 0 1
70155: PPUSH
70156: LD_VAR 0 2
70160: PPUSH
70161: LD_VAR 0 3
70165: PPUSH
70166: LD_VAR 0 4
70170: PPUSH
70171: LD_VAR 0 5
70175: PPUSH
70176: CALL 14192 0 5
// end ; end_of_file
70180: PPOPN 5
70182: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70183: LD_VAR 0 1
70187: PPUSH
70188: LD_VAR 0 2
70192: PPUSH
70193: LD_VAR 0 3
70197: PPUSH
70198: LD_VAR 0 4
70202: PPUSH
70203: LD_VAR 0 5
70207: PPUSH
70208: LD_VAR 0 6
70212: PPUSH
70213: CALL 18093 0 6
// end ;
70217: PPOPN 6
70219: END
