// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 744 0 2
// PrepareArabian ;
  31: CALL 1437 0 0
// PrepareRussian ;
  35: CALL 3043 0 0
// Action ;
  39: CALL 8092 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// end ;
 262: LD_VAR 0 1
 266: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 267: LD_EXP 10
 271: NOT
 272: PUSH
 273: LD_EXP 9
 277: NOT
 278: AND
 279: PUSH
 280: LD_EXP 39
 284: NOT
 285: AND
 286: PUSH
 287: LD_EXP 40
 291: NOT
 292: AND
 293: IFFALSE 305
 295: GO 297
 297: DISABLE
// SetAchievement ( ACH_EXT ) ;
 298: LD_STRING ACH_EXT
 300: PPUSH
 301: CALL_OW 543
 305: END
// every 0 0$1 trigger captureCounter >= 6 do
 306: LD_EXP 18
 310: PUSH
 311: LD_INT 6
 313: GREATEREQUAL
 314: IFFALSE 326
 316: GO 318
 318: DISABLE
// SetAchievement ( ACH_KEY ) ;
 319: LD_STRING ACH_KEY
 321: PPUSH
 322: CALL_OW 543
 326: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 327: LD_EXP 19
 331: PUSH
 332: LD_INT 3
 334: GREATEREQUAL
 335: IFFALSE 347
 337: GO 339
 339: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 340: LD_STRING ACH_CHEM
 342: PPUSH
 343: CALL_OW 543
 347: END
// every 0 0$1 trigger debug do var i ;
 348: LD_EXP 1
 352: IFFALSE 436
 354: GO 356
 356: DISABLE
 357: LD_INT 0
 359: PPUSH
// begin enable ;
 360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 361: LD_ADDR_VAR 0 1
 365: PUSH
 366: LD_INT 22
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 21
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 434
// if GetLives ( i ) < 1000 then
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 256
 414: PUSH
 415: LD_INT 1000
 417: LESS
 418: IFFALSE 432
// SetLives ( i , 1000 ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_INT 1000
 427: PPUSH
 428: CALL_OW 234
 432: GO 402
 434: POP
 435: POP
// end ; end_of_file
 436: PPOPN 1
 438: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 439: LD_INT 0
 441: PPUSH
// uc_side := side ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_VAR 0 1
 451: ST_TO_ADDR
// uc_nation := nation ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_VAR 0 2
 461: ST_TO_ADDR
// vc_chassis := chassis ;
 462: LD_ADDR_OWVAR 37
 466: PUSH
 467: LD_VAR 0 3
 471: ST_TO_ADDR
// vc_engine := engine ;
 472: LD_ADDR_OWVAR 39
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// vc_control := control ;
 482: LD_ADDR_OWVAR 38
 486: PUSH
 487: LD_VAR 0 5
 491: ST_TO_ADDR
// vc_weapon := weapon ;
 492: LD_ADDR_OWVAR 40
 496: PUSH
 497: LD_VAR 0 6
 501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 502: LD_ADDR_OWVAR 41
 506: PUSH
 507: LD_VAR 0 7
 511: ST_TO_ADDR
// result := CreateVehicle ;
 512: LD_ADDR_VAR 0 8
 516: PUSH
 517: CALL_OW 45
 521: ST_TO_ADDR
// end ;
 522: LD_VAR 0 8
 526: RET
// export function SayX ( units , ident ) ; var i ; begin
 527: LD_INT 0
 529: PPUSH
 530: PPUSH
// result := false ;
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 0
 538: ST_TO_ADDR
// if not units then
 539: LD_VAR 0 1
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 602
// for i in units do
 548: LD_ADDR_VAR 0 4
 552: PUSH
 553: LD_VAR 0 1
 557: PUSH
 558: FOR_IN
 559: IFFALSE 600
// if IsOk ( i ) then
 561: LD_VAR 0 4
 565: PPUSH
 566: CALL_OW 302
 570: IFFALSE 598
// begin Say ( i , ident ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 88
// result := i ;
 586: LD_ADDR_VAR 0 3
 590: PUSH
 591: LD_VAR 0 4
 595: ST_TO_ADDR
// break ;
 596: GO 600
// end ;
 598: GO 558
 600: POP
 601: POP
// end ;
 602: LD_VAR 0 3
 606: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
// InitUc ;
 611: CALL_OW 18
// InitHc ;
 615: CALL_OW 19
// uc_side := 0 ;
 619: LD_ADDR_OWVAR 20
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// uc_nation := 0 ;
 627: LD_ADDR_OWVAR 21
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// for i = 1 to amount do
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 733
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 653: LD_ADDR_OWVAR 29
 657: PUSH
 658: LD_INT 9
 660: PPUSH
 661: LD_INT 12
 663: PPUSH
 664: CALL_OW 12
 668: PUSH
 669: LD_INT 9
 671: PPUSH
 672: LD_INT 12
 674: PPUSH
 675: CALL_OW 12
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 684: LD_ADDR_OWVAR 35
 688: PUSH
 689: LD_INT 1
 691: NEG
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 12
 700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 701: LD_INT 0
 703: PPUSH
 704: LD_INT 12
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 714: CALL_OW 44
 718: PPUSH
 719: LD_VAR 0 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 650
 733: POP
 734: POP
// InitHc ;
 735: CALL_OW 19
// end ;
 739: LD_VAR 0 3
 743: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
// uc_side := 0 ;
 748: LD_ADDR_OWVAR 20
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// uc_nation := 0 ;
 756: LD_ADDR_OWVAR 21
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// for i := 1 to 3 do
 764: LD_ADDR_VAR 0 4
 768: PUSH
 769: DOUBLE
 770: LD_INT 1
 772: DEC
 773: ST_TO_ADDR
 774: LD_INT 3
 776: PUSH
 777: FOR_TO
 778: IFFALSE 815
// begin hc_class := 21 ;
 780: LD_ADDR_OWVAR 28
 784: PUSH
 785: LD_INT 21
 787: ST_TO_ADDR
// hc_gallery :=  ;
 788: LD_ADDR_OWVAR 33
 792: PUSH
 793: LD_STRING 
 795: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 796: CALL_OW 44
 800: PPUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 777
 815: POP
 816: POP
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 868
// begin hc_class := 18 ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 18
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 849: CALL_OW 44
 853: PPUSH
 854: LD_VAR 0 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// end ;
 866: GO 830
 868: POP
 869: POP
// for i := 1 to 3 do
 870: LD_ADDR_VAR 0 4
 874: PUSH
 875: DOUBLE
 876: LD_INT 1
 878: DEC
 879: ST_TO_ADDR
 880: LD_INT 3
 882: PUSH
 883: FOR_TO
 884: IFFALSE 921
// begin hc_class := 13 ;
 886: LD_ADDR_OWVAR 28
 890: PUSH
 891: LD_INT 13
 893: ST_TO_ADDR
// hc_gallery :=  ;
 894: LD_ADDR_OWVAR 33
 898: PUSH
 899: LD_STRING 
 901: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 902: CALL_OW 44
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: LD_INT 0
 914: PPUSH
 915: CALL_OW 49
// end ;
 919: GO 883
 921: POP
 922: POP
// for i := 1 to 4 do
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: DOUBLE
 929: LD_INT 1
 931: DEC
 932: ST_TO_ADDR
 933: LD_INT 4
 935: PUSH
 936: FOR_TO
 937: IFFALSE 974
// begin hc_class := class_frog ;
 939: LD_ADDR_OWVAR 28
 943: PUSH
 944: LD_INT 19
 946: ST_TO_ADDR
// hc_gallery :=  ;
 947: LD_ADDR_OWVAR 33
 951: PUSH
 952: LD_STRING 
 954: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 955: CALL_OW 44
 959: PPUSH
 960: LD_VAR 0 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ;
 972: GO 936
 974: POP
 975: POP
// end ;
 976: LD_VAR 0 3
 980: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 981: LD_INT 0
 983: PPUSH
 984: PPUSH
 985: PPUSH
// if not observer or not unit then
 986: LD_VAR 0 1
 990: NOT
 991: PUSH
 992: LD_VAR 0 2
 996: NOT
 997: OR
 998: IFFALSE 1002
// exit ;
1000: GO 1050
// if not See ( GetSide ( observer ) , unit ) then
1002: LD_VAR 0 1
1006: PPUSH
1007: CALL_OW 255
1011: PPUSH
1012: LD_VAR 0 2
1016: PPUSH
1017: CALL_OW 292
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1050
// result := GetDistUnits ( observer , unit ) < 12 ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: LD_VAR 0 1
1035: PPUSH
1036: LD_VAR 0 2
1040: PPUSH
1041: CALL_OW 296
1045: PUSH
1046: LD_INT 12
1048: LESS
1049: ST_TO_ADDR
// end ;
1050: LD_VAR 0 3
1054: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1055: LD_INT 0
1057: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 488
1080: PUSH
1081: LD_VAR 0 2
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PPUSH
1099: CALL_OW 428
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1142
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1110: LD_VAR 0 1
1114: PPUSH
1115: LD_VAR 0 2
1119: PUSH
1120: LD_INT 1
1122: ARRAY
1123: PPUSH
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 3
1137: PPUSH
1138: CALL_OW 48
// end ;
1142: LD_VAR 0 4
1146: RET
// export function ReverseArray ( array ) ; var i ; begin
1147: LD_INT 0
1149: PPUSH
1150: PPUSH
// if not array then
1151: LD_VAR 0 1
1155: NOT
1156: IFFALSE 1160
// exit ;
1158: GO 1218
// result := [ ] ;
1160: LD_ADDR_VAR 0 2
1164: PUSH
1165: EMPTY
1166: ST_TO_ADDR
// for i := 1 to array do
1167: LD_ADDR_VAR 0 3
1171: PUSH
1172: DOUBLE
1173: LD_INT 1
1175: DEC
1176: ST_TO_ADDR
1177: LD_VAR 0 1
1181: PUSH
1182: FOR_TO
1183: IFFALSE 1216
// result := Insert ( result , 1 , array [ i ] ) ;
1185: LD_ADDR_VAR 0 2
1189: PUSH
1190: LD_VAR 0 2
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_VAR 0 1
1202: PUSH
1203: LD_VAR 0 3
1207: ARRAY
1208: PPUSH
1209: CALL_OW 2
1213: ST_TO_ADDR
1214: GO 1182
1216: POP
1217: POP
// end ;
1218: LD_VAR 0 2
1222: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1223: LD_INT 0
1225: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1226: LD_VAR 0 1
1230: PPUSH
1231: LD_VAR 0 2
1235: PPUSH
1236: LD_VAR 0 3
1240: PPUSH
1241: LD_VAR 0 4
1245: PPUSH
1246: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1250: LD_VAR 0 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: LD_VAR 0 3
1264: PPUSH
1265: CALL_OW 331
// end ;
1269: LD_VAR 0 5
1273: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1274: LD_INT 0
1276: PPUSH
// if not units then
1277: LD_VAR 0 1
1281: NOT
1282: IFFALSE 1286
// exit ;
1284: GO 1369
// result := true ;
1286: LD_ADDR_VAR 0 4
1290: PUSH
1291: LD_INT 1
1293: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1294: LD_VAR 0 1
1298: PPUSH
1299: LD_INT 26
1301: PUSH
1302: LD_INT 1
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PPUSH
1309: CALL_OW 72
1313: PUSH
1314: LD_INT 1
1316: ARRAY
1317: PPUSH
1318: LD_VAR 0 2
1322: PPUSH
1323: CALL_OW 88
1327: NOT
1328: IFFALSE 1369
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1330: LD_ADDR_VAR 0 4
1334: PUSH
1335: LD_VAR 0 1
1339: PPUSH
1340: LD_INT 26
1342: PUSH
1343: LD_INT 2
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: PPUSH
1350: CALL_OW 72
1354: PUSH
1355: LD_INT 1
1357: ARRAY
1358: PPUSH
1359: LD_VAR 0 3
1363: PPUSH
1364: CALL_OW 88
1368: ST_TO_ADDR
// end ;
1369: LD_VAR 0 4
1373: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1374: LD_INT 0
1376: PPUSH
1377: PPUSH
// if not group then
1378: LD_VAR 0 2
1382: NOT
1383: IFFALSE 1387
// exit ;
1385: GO 1432
// for i in group do
1387: LD_ADDR_VAR 0 4
1391: PUSH
1392: LD_VAR 0 2
1396: PUSH
1397: FOR_IN
1398: IFFALSE 1430
// if See ( side , i ) then
1400: LD_VAR 0 1
1404: PPUSH
1405: LD_VAR 0 4
1409: PPUSH
1410: CALL_OW 292
1414: IFFALSE 1428
// begin result := true ;
1416: LD_ADDR_VAR 0 3
1420: PUSH
1421: LD_INT 1
1423: ST_TO_ADDR
// exit ;
1424: POP
1425: POP
1426: GO 1432
// end ;
1428: GO 1397
1430: POP
1431: POP
// end ; end_of_file
1432: LD_VAR 0 3
1436: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1437: LD_INT 0
1439: PPUSH
1440: PPUSH
// uc_side := 2 ;
1441: LD_ADDR_OWVAR 20
1445: PUSH
1446: LD_INT 2
1448: ST_TO_ADDR
// uc_nation := 2 ;
1449: LD_ADDR_OWVAR 21
1453: PUSH
1454: LD_INT 2
1456: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1457: LD_ADDR_EXP 21
1461: PUSH
1462: LD_STRING Heike
1464: PPUSH
1465: LD_EXP 1
1469: NOT
1470: PPUSH
1471: LD_EXP 2
1475: PPUSH
1476: CALL 31682 0 3
1480: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1481: LD_ADDR_EXP 24
1485: PUSH
1486: LD_STRING Ibrahim
1488: PPUSH
1489: LD_EXP 1
1493: NOT
1494: PPUSH
1495: LD_EXP 2
1499: PPUSH
1500: CALL 31682 0 3
1504: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1505: LD_ADDR_EXP 22
1509: PUSH
1510: LD_STRING Givi
1512: PPUSH
1513: LD_EXP 1
1517: NOT
1518: PPUSH
1519: LD_EXP 2
1523: PPUSH
1524: CALL 31682 0 3
1528: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1529: LD_ADDR_EXP 25
1533: PUSH
1534: LD_STRING Kamil
1536: PPUSH
1537: LD_EXP 1
1541: NOT
1542: PPUSH
1543: LD_EXP 2
1547: PPUSH
1548: CALL 31682 0 3
1552: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1553: LD_ADDR_EXP 26
1557: PUSH
1558: LD_STRING Kaia
1560: PPUSH
1561: LD_EXP 1
1565: NOT
1566: PPUSH
1567: LD_EXP 2
1571: PPUSH
1572: CALL 31682 0 3
1576: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1577: LD_ADDR_EXP 27
1581: PUSH
1582: LD_STRING Sophia
1584: PPUSH
1585: LD_EXP 1
1589: NOT
1590: PPUSH
1591: LD_EXP 2
1595: PPUSH
1596: CALL 31682 0 3
1600: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1601: LD_ADDR_EXP 28
1605: PUSH
1606: LD_STRING Markov
1608: PPUSH
1609: LD_EXP 1
1613: NOT
1614: PPUSH
1615: LD_EXP 2
1619: PPUSH
1620: CALL 31682 0 3
1624: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1625: LD_ADDR_EXP 33
1629: PUSH
1630: LD_STRING Aviradze
1632: PPUSH
1633: LD_EXP 1
1637: NOT
1638: PPUSH
1639: LD_EXP 2
1643: PPUSH
1644: CALL 31682 0 3
1648: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1649: LD_ADDR_EXP 32
1653: PUSH
1654: LD_STRING Kurt
1656: PPUSH
1657: LD_EXP 1
1661: NOT
1662: PPUSH
1663: LD_EXP 2
1667: PPUSH
1668: CALL 31682 0 3
1672: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1673: LD_ADDR_EXP 23
1677: PUSH
1678: LD_STRING Mike
1680: PPUSH
1681: LD_EXP 1
1685: NOT
1686: PPUSH
1687: LD_EXP 2
1691: PPUSH
1692: CALL 31682 0 3
1696: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1697: LD_ADDR_EXP 30
1701: PUSH
1702: LD_STRING Olaf
1704: PPUSH
1705: LD_INT 0
1707: PPUSH
1708: LD_STRING 
1710: PPUSH
1711: CALL 31682 0 3
1715: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1716: LD_ADDR_EXP 34
1720: PUSH
1721: LD_STRING 04_2_others
1723: PPUSH
1724: CALL_OW 31
1728: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1729: LD_ADDR_EXP 36
1733: PUSH
1734: LD_STRING 04_2_apes
1736: PPUSH
1737: CALL_OW 31
1741: ST_TO_ADDR
// if hasFlamethrower then
1742: LD_EXP 3
1746: IFFALSE 1981
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1748: LD_INT 70
1750: PPUSH
1751: LD_INT 2
1753: PPUSH
1754: LD_INT 2
1756: PPUSH
1757: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1761: LD_ADDR_EXP 35
1765: PUSH
1766: LD_INT 13
1768: PUSH
1769: LD_INT 1
1771: PUSH
1772: LD_INT 1
1774: PUSH
1775: LD_INT 27
1777: PUSH
1778: LD_INT 2
1780: PUSH
1781: LD_INT 1000
1783: PUSH
1784: LD_INT 0
1786: PUSH
1787: LD_INT 0
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: LD_INT 13
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: LD_INT 1
1811: PUSH
1812: LD_INT 25
1814: PUSH
1815: LD_INT 2
1817: PUSH
1818: LD_INT 1000
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: LD_INT 0
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 13
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: LD_INT 1
1848: PUSH
1849: LD_INT 26
1851: PUSH
1852: LD_INT 2
1854: PUSH
1855: LD_INT 1000
1857: PUSH
1858: LD_INT 0
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 13
1879: PUSH
1880: LD_INT 1
1882: PUSH
1883: LD_INT 1
1885: PUSH
1886: LD_INT 27
1888: PUSH
1889: LD_INT 2
1891: PUSH
1892: LD_INT 1000
1894: PUSH
1895: LD_INT 0
1897: PUSH
1898: LD_INT 0
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 13
1916: PUSH
1917: LD_INT 1
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: LD_INT 32
1925: PUSH
1926: LD_INT 2
1928: PUSH
1929: LD_INT 1000
1931: PUSH
1932: LD_INT 0
1934: PUSH
1935: LD_INT 60
1937: PUSH
1938: LD_INT 40
1940: PUSH
1941: LD_INT 20
1943: PUSH
1944: LD_INT 10
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_OWVAR 67
1957: ARRAY
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: ST_TO_ADDR
// end else
1979: GO 2199
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1981: LD_ADDR_EXP 35
1985: PUSH
1986: LD_INT 13
1988: PUSH
1989: LD_INT 1
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: LD_INT 25
1997: PUSH
1998: LD_INT 2
2000: PUSH
2001: LD_INT 1000
2003: PUSH
2004: LD_INT 0
2006: PUSH
2007: LD_INT 0
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 13
2025: PUSH
2026: LD_INT 1
2028: PUSH
2029: LD_INT 1
2031: PUSH
2032: LD_INT 27
2034: PUSH
2035: LD_INT 2
2037: PUSH
2038: LD_INT 1000
2040: PUSH
2041: LD_INT 0
2043: PUSH
2044: LD_INT 0
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: LD_INT 13
2062: PUSH
2063: LD_INT 1
2065: PUSH
2066: LD_INT 1
2068: PUSH
2069: LD_INT 24
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 1000
2077: PUSH
2078: LD_INT 0
2080: PUSH
2081: LD_INT 0
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 13
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: LD_INT 1
2105: PUSH
2106: LD_INT 27
2108: PUSH
2109: LD_INT 2
2111: PUSH
2112: LD_INT 1000
2114: PUSH
2115: LD_INT 0
2117: PUSH
2118: LD_INT 0
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: LD_INT 13
2136: PUSH
2137: LD_INT 1
2139: PUSH
2140: LD_INT 1
2142: PUSH
2143: LD_INT 32
2145: PUSH
2146: LD_INT 2
2148: PUSH
2149: LD_INT 1000
2151: PUSH
2152: LD_INT 0
2154: PUSH
2155: LD_INT 50
2157: PUSH
2158: LD_INT 30
2160: PUSH
2161: LD_INT 20
2163: PUSH
2164: LD_INT 10
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_OWVAR 67
2177: ARRAY
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: ST_TO_ADDR
// end ; uc_side := 5 ;
2199: LD_ADDR_OWVAR 20
2203: PUSH
2204: LD_INT 5
2206: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2207: LD_ADDR_EXP 29
2211: PUSH
2212: LD_STRING Abdul
2214: PPUSH
2215: LD_INT 0
2217: PPUSH
2218: LD_STRING 
2220: PPUSH
2221: CALL 31682 0 3
2225: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2226: LD_ADDR_EXP 31
2230: PUSH
2231: LD_STRING Omar
2233: PPUSH
2234: LD_INT 0
2236: PPUSH
2237: LD_STRING 
2239: PPUSH
2240: CALL 31682 0 3
2244: ST_TO_ADDR
// end ;
2245: LD_VAR 0 1
2249: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2250: LD_INT 0
2252: PPUSH
2253: PPUSH
2254: PPUSH
2255: PPUSH
2256: PPUSH
// pfx := 04_1_ ;
2257: LD_ADDR_VAR 0 2
2261: PUSH
2262: LD_STRING 04_1_
2264: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2265: LD_INT 35
2267: PPUSH
2268: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2272: LD_INT 3
2274: PPUSH
2275: LD_INT 2
2277: PPUSH
2278: CALL_OW 428
2282: NOT
2283: IFFALSE 2265
// tmp := [ ] ;
2285: LD_ADDR_VAR 0 4
2289: PUSH
2290: EMPTY
2291: ST_TO_ADDR
// uc_side := 5 ;
2292: LD_ADDR_OWVAR 20
2296: PUSH
2297: LD_INT 5
2299: ST_TO_ADDR
// uc_nation := 2 ;
2300: LD_ADDR_OWVAR 21
2304: PUSH
2305: LD_INT 2
2307: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2308: LD_ADDR_EXP 33
2312: PUSH
2313: LD_STRING Aviradze_L
2315: PPUSH
2316: LD_EXP 1
2320: NOT
2321: PPUSH
2322: LD_VAR 0 2
2326: PPUSH
2327: CALL 31682 0 3
2331: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2332: LD_EXP 33
2336: PPUSH
2337: LD_INT 2
2339: PPUSH
2340: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2344: LD_EXP 33
2348: PPUSH
2349: LD_INT 14
2351: PPUSH
2352: LD_INT 0
2354: PPUSH
2355: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2359: LD_EXP 33
2363: PPUSH
2364: LD_INT 8
2366: PPUSH
2367: LD_INT 6
2369: PPUSH
2370: CALL_OW 111
// AddComHold ( Aviradze ) ;
2374: LD_EXP 33
2378: PPUSH
2379: CALL_OW 200
// tmp := [ Aviradze ] ;
2383: LD_ADDR_VAR 0 4
2387: PUSH
2388: LD_EXP 33
2392: PUSH
2393: EMPTY
2394: LIST
2395: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2396: LD_INT 70
2398: PPUSH
2399: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2403: LD_STRING Ibrahim_L
2405: PPUSH
2406: LD_EXP 1
2410: NOT
2411: PPUSH
2412: LD_VAR 0 2
2416: PPUSH
2417: CALL 31682 0 3
2421: IFFALSE 2521
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2423: LD_ADDR_EXP 24
2427: PUSH
2428: LD_STRING Ibrahim_L
2430: PPUSH
2431: LD_EXP 1
2435: NOT
2436: PPUSH
2437: LD_VAR 0 2
2441: PPUSH
2442: CALL 31682 0 3
2446: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2447: LD_EXP 24
2451: PPUSH
2452: LD_INT 2
2454: PPUSH
2455: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2459: LD_EXP 24
2463: PPUSH
2464: LD_INT 14
2466: PPUSH
2467: LD_INT 0
2469: PPUSH
2470: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2474: LD_EXP 24
2478: PPUSH
2479: LD_INT 8
2481: PPUSH
2482: LD_INT 7
2484: PPUSH
2485: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2489: LD_EXP 24
2493: PPUSH
2494: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_VAR 0 4
2507: PUSH
2508: LD_EXP 24
2512: ADD
2513: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2514: LD_INT 70
2516: PPUSH
2517: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2521: LD_STRING Kaia_L
2523: PPUSH
2524: LD_EXP 1
2528: NOT
2529: PPUSH
2530: LD_VAR 0 2
2534: PPUSH
2535: CALL 31682 0 3
2539: IFFALSE 2639
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2541: LD_ADDR_EXP 26
2545: PUSH
2546: LD_STRING Kaia_L
2548: PPUSH
2549: LD_EXP 1
2553: NOT
2554: PPUSH
2555: LD_VAR 0 2
2559: PPUSH
2560: CALL 31682 0 3
2564: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2565: LD_EXP 26
2569: PPUSH
2570: LD_INT 2
2572: PPUSH
2573: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2577: LD_EXP 26
2581: PPUSH
2582: LD_INT 14
2584: PPUSH
2585: LD_INT 0
2587: PPUSH
2588: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2592: LD_EXP 26
2596: PPUSH
2597: LD_INT 8
2599: PPUSH
2600: LD_INT 7
2602: PPUSH
2603: CALL_OW 111
// AddComHold ( Kaia ) ;
2607: LD_EXP 26
2611: PPUSH
2612: CALL_OW 200
// tmp := tmp ^ Kaia ;
2616: LD_ADDR_VAR 0 4
2620: PUSH
2621: LD_VAR 0 4
2625: PUSH
2626: LD_EXP 26
2630: ADD
2631: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2632: LD_INT 70
2634: PPUSH
2635: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2639: LD_STRING Kamil_L
2641: PPUSH
2642: LD_EXP 1
2646: NOT
2647: PPUSH
2648: LD_VAR 0 2
2652: PPUSH
2653: CALL 31682 0 3
2657: IFFALSE 2757
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2659: LD_ADDR_EXP 25
2663: PUSH
2664: LD_STRING Kamil_L
2666: PPUSH
2667: LD_EXP 1
2671: NOT
2672: PPUSH
2673: LD_VAR 0 2
2677: PPUSH
2678: CALL 31682 0 3
2682: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2683: LD_EXP 25
2687: PPUSH
2688: LD_INT 2
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2695: LD_EXP 25
2699: PPUSH
2700: LD_INT 14
2702: PPUSH
2703: LD_INT 0
2705: PPUSH
2706: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2710: LD_EXP 25
2714: PPUSH
2715: LD_INT 8
2717: PPUSH
2718: LD_INT 7
2720: PPUSH
2721: CALL_OW 111
// AddComHold ( Kamil ) ;
2725: LD_EXP 25
2729: PPUSH
2730: CALL_OW 200
// tmp := tmp ^ Kamil ;
2734: LD_ADDR_VAR 0 4
2738: PUSH
2739: LD_VAR 0 4
2743: PUSH
2744: LD_EXP 25
2748: ADD
2749: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2750: LD_INT 70
2752: PPUSH
2753: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2757: LD_STRING Sophia_L
2759: PPUSH
2760: LD_EXP 1
2764: NOT
2765: PPUSH
2766: LD_VAR 0 2
2770: PPUSH
2771: CALL 31682 0 3
2775: IFFALSE 2875
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2777: LD_ADDR_EXP 27
2781: PUSH
2782: LD_STRING Sophia_L
2784: PPUSH
2785: LD_EXP 1
2789: NOT
2790: PPUSH
2791: LD_VAR 0 2
2795: PPUSH
2796: CALL 31682 0 3
2800: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2801: LD_EXP 27
2805: PPUSH
2806: LD_INT 2
2808: PPUSH
2809: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2813: LD_EXP 27
2817: PPUSH
2818: LD_INT 14
2820: PPUSH
2821: LD_INT 0
2823: PPUSH
2824: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2828: LD_EXP 27
2832: PPUSH
2833: LD_INT 9
2835: PPUSH
2836: LD_INT 6
2838: PPUSH
2839: CALL_OW 111
// AddComHold ( Sophia ) ;
2843: LD_EXP 27
2847: PPUSH
2848: CALL_OW 200
// tmp := tmp ^ Sophia ;
2852: LD_ADDR_VAR 0 4
2856: PUSH
2857: LD_VAR 0 4
2861: PUSH
2862: LD_EXP 27
2866: ADD
2867: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2868: LD_INT 70
2870: PPUSH
2871: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2875: LD_ADDR_VAR 0 5
2879: PUSH
2880: LD_STRING 04_1_others_L
2882: PPUSH
2883: CALL_OW 31
2887: ST_TO_ADDR
// if tmp2 then
2888: LD_VAR 0 5
2892: IFFALSE 2989
// for i in tmp2 do
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_VAR 0 5
2903: PUSH
2904: FOR_IN
2905: IFFALSE 2987
// begin SetDir ( i , 2 ) ;
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 2
2914: PPUSH
2915: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2919: LD_VAR 0 3
2923: PPUSH
2924: LD_INT 14
2926: PPUSH
2927: LD_INT 0
2929: PPUSH
2930: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2934: LD_ADDR_EXP 34
2938: PUSH
2939: LD_EXP 34
2943: PPUSH
2944: LD_EXP 34
2948: PUSH
2949: LD_INT 1
2951: PLUS
2952: PPUSH
2953: LD_VAR 0 3
2957: PPUSH
2958: CALL_OW 1
2962: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2963: LD_VAR 0 3
2967: PPUSH
2968: LD_INT 17
2970: PPUSH
2971: LD_INT 14
2973: PPUSH
2974: CALL_OW 111
// wait ( 0 0$2 ) ;
2978: LD_INT 70
2980: PPUSH
2981: CALL_OW 67
// end ;
2985: GO 2904
2987: POP
2988: POP
// for i in tmp union tmp2 do
2989: LD_ADDR_VAR 0 3
2993: PUSH
2994: LD_VAR 0 4
2998: PUSH
2999: LD_VAR 0 5
3003: UNION
3004: PUSH
3005: FOR_IN
3006: IFFALSE 3036
// begin SetSide ( i , 2 ) ;
3008: LD_VAR 0 3
3012: PPUSH
3013: LD_INT 2
3015: PPUSH
3016: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
3020: LD_VAR 0 3
3024: PPUSH
3025: LD_EXP 21
3029: PPUSH
3030: CALL_OW 112
// end ;
3034: GO 3005
3036: POP
3037: POP
// end ; end_of_file
3038: LD_VAR 0 1
3042: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3043: LD_INT 0
3045: PPUSH
3046: PPUSH
3047: PPUSH
// uc_side := 3 ;
3048: LD_ADDR_OWVAR 20
3052: PUSH
3053: LD_INT 3
3055: ST_TO_ADDR
// uc_nation := 3 ;
3056: LD_ADDR_OWVAR 21
3060: PUSH
3061: LD_INT 3
3063: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3064: LD_ADDR_EXP 37
3068: PUSH
3069: EMPTY
3070: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3071: LD_ADDR_EXP 38
3075: PUSH
3076: EMPTY
3077: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3078: LD_ADDR_EXP 41
3082: PUSH
3083: EMPTY
3084: ST_TO_ADDR
// for i := 1 to 2 do
3085: LD_ADDR_VAR 0 2
3089: PUSH
3090: DOUBLE
3091: LD_INT 1
3093: DEC
3094: ST_TO_ADDR
3095: LD_INT 2
3097: PUSH
3098: FOR_TO
3099: IFFALSE 3238
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3101: LD_INT 0
3103: PPUSH
3104: LD_INT 1
3106: PPUSH
3107: LD_INT 3
3109: PUSH
3110: LD_INT 4
3112: PUSH
3113: LD_INT 5
3115: PUSH
3116: LD_INT 6
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: PUSH
3125: LD_OWVAR 67
3129: ARRAY
3130: PPUSH
3131: CALL_OW 380
// un := CreateHuman ;
3135: LD_ADDR_VAR 0 3
3139: PUSH
3140: CALL_OW 44
3144: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3145: LD_ADDR_EXP 37
3149: PUSH
3150: LD_EXP 37
3154: PPUSH
3155: LD_EXP 37
3159: PUSH
3160: LD_INT 1
3162: PLUS
3163: PPUSH
3164: LD_VAR 0 3
3168: PPUSH
3169: CALL_OW 1
3173: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3174: LD_VAR 0 3
3178: PPUSH
3179: LD_INT 100
3181: PPUSH
3182: LD_INT 63
3184: PPUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_INT 0
3190: PPUSH
3191: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3195: LD_VAR 0 3
3199: PPUSH
3200: LD_INT 97
3202: PPUSH
3203: LD_INT 64
3205: PPUSH
3206: CALL_OW 428
3210: PUSH
3211: LD_INT 98
3213: PPUSH
3214: LD_INT 58
3216: PPUSH
3217: CALL_OW 428
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: LD_VAR 0 2
3230: ARRAY
3231: PPUSH
3232: CALL_OW 120
// end ;
3236: GO 3098
3238: POP
3239: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3240: LD_INT 51
3242: PPUSH
3243: LD_INT 77
3245: PPUSH
3246: CALL_OW 428
3250: PPUSH
3251: CALL_OW 274
3255: PPUSH
3256: LD_INT 1
3258: PPUSH
3259: LD_INT 120
3261: PPUSH
3262: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3266: LD_INT 10
3268: PPUSH
3269: CALL_OW 274
3273: PPUSH
3274: LD_INT 2
3276: PPUSH
3277: LD_INT 300
3279: PPUSH
3280: CALL_OW 277
// for i := 1 to 2 do
3284: LD_ADDR_VAR 0 2
3288: PUSH
3289: DOUBLE
3290: LD_INT 1
3292: DEC
3293: ST_TO_ADDR
3294: LD_INT 2
3296: PUSH
3297: FOR_TO
3298: IFFALSE 3416
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3300: LD_INT 0
3302: PPUSH
3303: LD_INT 1
3305: PPUSH
3306: LD_INT 3
3308: PUSH
3309: LD_INT 4
3311: PUSH
3312: LD_INT 5
3314: PUSH
3315: LD_INT 6
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: PUSH
3324: LD_OWVAR 67
3328: ARRAY
3329: PPUSH
3330: CALL_OW 380
// un := CreateHuman ;
3334: LD_ADDR_VAR 0 3
3338: PUSH
3339: CALL_OW 44
3343: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3344: LD_ADDR_EXP 38
3348: PUSH
3349: LD_EXP 38
3353: PPUSH
3354: LD_EXP 38
3358: PUSH
3359: LD_INT 1
3361: PLUS
3362: PPUSH
3363: LD_VAR 0 3
3367: PPUSH
3368: CALL_OW 1
3372: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3373: LD_VAR 0 3
3377: PPUSH
3378: LD_INT 198
3380: PPUSH
3381: LD_INT 106
3383: PPUSH
3384: CALL_OW 428
3388: PUSH
3389: LD_INT 205
3391: PPUSH
3392: LD_INT 114
3394: PPUSH
3395: CALL_OW 428
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_VAR 0 2
3408: ARRAY
3409: PPUSH
3410: CALL_OW 52
// end ;
3414: GO 3297
3416: POP
3417: POP
// for i := 1 to 2 do
3418: LD_ADDR_VAR 0 2
3422: PUSH
3423: DOUBLE
3424: LD_INT 1
3426: DEC
3427: ST_TO_ADDR
3428: LD_INT 2
3430: PUSH
3431: FOR_TO
3432: IFFALSE 3509
// begin PrepareHuman ( false , 2 , 3 ) ;
3434: LD_INT 0
3436: PPUSH
3437: LD_INT 2
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: CALL_OW 380
// un := CreateHuman ;
3447: LD_ADDR_VAR 0 3
3451: PUSH
3452: CALL_OW 44
3456: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3457: LD_ADDR_EXP 38
3461: PUSH
3462: LD_EXP 38
3466: PPUSH
3467: LD_EXP 38
3471: PUSH
3472: LD_INT 1
3474: PLUS
3475: PPUSH
3476: LD_VAR 0 3
3480: PPUSH
3481: CALL_OW 1
3485: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3486: LD_VAR 0 3
3490: PPUSH
3491: LD_INT 204
3493: PPUSH
3494: LD_INT 108
3496: PPUSH
3497: LD_INT 2
3499: PPUSH
3500: LD_INT 0
3502: PPUSH
3503: CALL_OW 50
// end ;
3507: GO 3431
3509: POP
3510: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3511: LD_ADDR_VAR 0 2
3515: PUSH
3516: DOUBLE
3517: LD_INT 1
3519: DEC
3520: ST_TO_ADDR
3521: LD_INT 4
3523: PUSH
3524: LD_INT 5
3526: PUSH
3527: LD_INT 6
3529: PUSH
3530: LD_INT 7
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: PUSH
3539: LD_OWVAR 67
3543: ARRAY
3544: PUSH
3545: FOR_TO
3546: IFFALSE 3692
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3548: LD_INT 0
3550: PPUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 1
3556: PUSH
3557: LD_INT 2
3559: PUSH
3560: LD_INT 4
3562: PUSH
3563: LD_INT 1
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 1
3575: PPUSH
3576: LD_INT 5
3578: PPUSH
3579: CALL_OW 12
3583: ARRAY
3584: PPUSH
3585: LD_INT 3
3587: PUSH
3588: LD_INT 4
3590: PUSH
3591: LD_INT 5
3593: PUSH
3594: LD_INT 5
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: PUSH
3603: LD_OWVAR 67
3607: ARRAY
3608: PPUSH
3609: CALL_OW 380
// un := CreateHuman ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: CALL_OW 44
3622: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_INT 10
3630: PPUSH
3631: LD_INT 0
3633: PPUSH
3634: CALL 67333 0 3
3638: IFFALSE 3690
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3640: LD_ADDR_EXP 39
3644: PUSH
3645: LD_EXP 39
3649: PPUSH
3650: LD_EXP 39
3654: PUSH
3655: LD_INT 1
3657: PLUS
3658: PPUSH
3659: LD_VAR 0 3
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// if Prob ( 50 ) then
3669: LD_INT 50
3671: PPUSH
3672: CALL_OW 13
3676: IFFALSE 3690
// ForceSleep ( un , true ) ;
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_INT 1
3685: PPUSH
3686: CALL_OW 585
// end ; end ;
3690: GO 3545
3692: POP
3693: POP
// for i := 1 to 3 do
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: DOUBLE
3700: LD_INT 1
3702: DEC
3703: ST_TO_ADDR
3704: LD_INT 3
3706: PUSH
3707: FOR_TO
3708: IFFALSE 3802
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3710: LD_INT 0
3712: PPUSH
3713: LD_INT 1
3715: PPUSH
3716: LD_INT 3
3718: PUSH
3719: LD_INT 4
3721: PUSH
3722: LD_INT 4
3724: PUSH
3725: LD_INT 5
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PUSH
3734: LD_OWVAR 67
3738: ARRAY
3739: PPUSH
3740: CALL_OW 380
// un := CreateHuman ;
3744: LD_ADDR_VAR 0 3
3748: PUSH
3749: CALL_OW 44
3753: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3754: LD_VAR 0 3
3758: PPUSH
3759: LD_INT 11
3761: PPUSH
3762: LD_INT 0
3764: PPUSH
3765: CALL 67333 0 3
3769: IFFALSE 3800
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3771: LD_ADDR_EXP 39
3775: PUSH
3776: LD_EXP 39
3780: PPUSH
3781: LD_EXP 39
3785: PUSH
3786: LD_INT 1
3788: PLUS
3789: PPUSH
3790: LD_VAR 0 3
3794: PPUSH
3795: CALL_OW 1
3799: ST_TO_ADDR
// end ;
3800: GO 3707
3802: POP
3803: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3804: LD_ADDR_VAR 0 2
3808: PUSH
3809: DOUBLE
3810: LD_INT 1
3812: DEC
3813: ST_TO_ADDR
3814: LD_INT 5
3816: PUSH
3817: LD_INT 6
3819: PUSH
3820: LD_INT 7
3822: PUSH
3823: LD_INT 8
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: PUSH
3832: LD_OWVAR 67
3836: ARRAY
3837: PUSH
3838: FOR_TO
3839: IFFALSE 3985
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3841: LD_INT 0
3843: PPUSH
3844: LD_INT 1
3846: PUSH
3847: LD_INT 1
3849: PUSH
3850: LD_INT 2
3852: PUSH
3853: LD_INT 4
3855: PUSH
3856: LD_INT 1
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: PUSH
3866: LD_INT 1
3868: PPUSH
3869: LD_INT 5
3871: PPUSH
3872: CALL_OW 12
3876: ARRAY
3877: PPUSH
3878: LD_INT 3
3880: PUSH
3881: LD_INT 4
3883: PUSH
3884: LD_INT 5
3886: PUSH
3887: LD_INT 5
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: PUSH
3896: LD_OWVAR 67
3900: ARRAY
3901: PPUSH
3902: CALL_OW 380
// un := CreateHuman ;
3906: LD_ADDR_VAR 0 3
3910: PUSH
3911: CALL_OW 44
3915: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3916: LD_VAR 0 3
3920: PPUSH
3921: LD_INT 15
3923: PPUSH
3924: LD_INT 0
3926: PPUSH
3927: CALL 67333 0 3
3931: IFFALSE 3983
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3933: LD_ADDR_EXP 40
3937: PUSH
3938: LD_EXP 40
3942: PPUSH
3943: LD_EXP 40
3947: PUSH
3948: LD_INT 1
3950: PLUS
3951: PPUSH
3952: LD_VAR 0 3
3956: PPUSH
3957: CALL_OW 1
3961: ST_TO_ADDR
// if Prob ( 50 ) then
3962: LD_INT 50
3964: PPUSH
3965: CALL_OW 13
3969: IFFALSE 3983
// ForceSleep ( un , true ) ;
3971: LD_VAR 0 3
3975: PPUSH
3976: LD_INT 1
3978: PPUSH
3979: CALL_OW 585
// end ; end ;
3983: GO 3838
3985: POP
3986: POP
// end ;
3987: LD_VAR 0 1
3991: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3992: LD_INT 0
3994: PPUSH
3995: PPUSH
3996: PPUSH
// uc_side := 3 ;
3997: LD_ADDR_OWVAR 20
4001: PUSH
4002: LD_INT 3
4004: ST_TO_ADDR
// uc_nation := 3 ;
4005: LD_ADDR_OWVAR 21
4009: PUSH
4010: LD_INT 3
4012: ST_TO_ADDR
// for i := 1 to 6 do
4013: LD_ADDR_VAR 0 2
4017: PUSH
4018: DOUBLE
4019: LD_INT 1
4021: DEC
4022: ST_TO_ADDR
4023: LD_INT 6
4025: PUSH
4026: FOR_TO
4027: IFFALSE 4106
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
4029: LD_INT 0
4031: PPUSH
4032: LD_INT 1
4034: PUSH
4035: LD_INT 4
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: LD_INT 1
4044: PPUSH
4045: LD_INT 2
4047: PPUSH
4048: CALL_OW 12
4052: ARRAY
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 380
// un := CreateHuman ;
4061: LD_ADDR_VAR 0 3
4065: PUSH
4066: CALL_OW 44
4070: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
4071: LD_VAR 0 3
4075: PPUSH
4076: LD_INT 54
4078: PPUSH
4079: LD_INT 88
4081: PPUSH
4082: LD_INT 12
4084: PPUSH
4085: LD_INT 0
4087: PPUSH
4088: CALL_OW 50
// SetLives ( un , 1 ) ;
4092: LD_VAR 0 3
4096: PPUSH
4097: LD_INT 1
4099: PPUSH
4100: CALL_OW 234
// end ;
4104: GO 4026
4106: POP
4107: POP
// uc_side := 3 ;
4108: LD_ADDR_OWVAR 20
4112: PUSH
4113: LD_INT 3
4115: ST_TO_ADDR
// uc_nation := 0 ;
4116: LD_ADDR_OWVAR 21
4120: PUSH
4121: LD_INT 0
4123: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4124: LD_ADDR_EXP 42
4128: PUSH
4129: EMPTY
4130: ST_TO_ADDR
// apeEngGroup := [ ] ;
4131: LD_ADDR_EXP 43
4135: PUSH
4136: EMPTY
4137: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4138: LD_ADDR_VAR 0 2
4142: PUSH
4143: DOUBLE
4144: LD_INT 1
4146: DEC
4147: ST_TO_ADDR
4148: LD_INT 4
4150: PUSH
4151: LD_INT 5
4153: PUSH
4154: LD_INT 6
4156: PUSH
4157: LD_INT 7
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: PUSH
4166: LD_OWVAR 67
4170: ARRAY
4171: PUSH
4172: FOR_TO
4173: IFFALSE 4291
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4175: LD_INT 0
4177: PPUSH
4178: LD_INT 15
4180: PPUSH
4181: LD_INT 3
4183: PUSH
4184: LD_INT 4
4186: PUSH
4187: LD_INT 5
4189: PUSH
4190: LD_INT 6
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: PUSH
4199: LD_OWVAR 67
4203: ARRAY
4204: PPUSH
4205: CALL_OW 380
// un := CreateHuman ;
4209: LD_ADDR_VAR 0 3
4213: PUSH
4214: CALL_OW 44
4218: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4219: LD_ADDR_EXP 42
4223: PUSH
4224: LD_EXP 42
4228: PPUSH
4229: LD_EXP 42
4233: PUSH
4234: LD_INT 1
4236: PLUS
4237: PPUSH
4238: LD_VAR 0 3
4242: PPUSH
4243: CALL_OW 1
4247: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4248: LD_VAR 0 3
4252: PPUSH
4253: LD_INT 0
4255: PPUSH
4256: LD_INT 5
4258: PPUSH
4259: CALL_OW 12
4263: PPUSH
4264: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4268: LD_VAR 0 3
4272: PPUSH
4273: LD_INT 56
4275: PPUSH
4276: LD_INT 82
4278: PPUSH
4279: LD_INT 6
4281: PPUSH
4282: LD_INT 0
4284: PPUSH
4285: CALL_OW 50
// end ;
4289: GO 4172
4291: POP
4292: POP
// for i := 1 to 2 do
4293: LD_ADDR_VAR 0 2
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_INT 2
4305: PUSH
4306: FOR_TO
4307: IFFALSE 4383
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4309: LD_INT 0
4311: PPUSH
4312: LD_INT 16
4314: PPUSH
4315: LD_INT 4
4317: PPUSH
4318: CALL_OW 380
// un := CreateHuman ;
4322: LD_ADDR_VAR 0 3
4326: PUSH
4327: CALL_OW 44
4331: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4332: LD_ADDR_EXP 43
4336: PUSH
4337: LD_EXP 43
4341: PPUSH
4342: LD_EXP 43
4346: PUSH
4347: LD_INT 1
4349: PLUS
4350: PPUSH
4351: LD_VAR 0 3
4355: PPUSH
4356: CALL_OW 1
4360: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4361: LD_VAR 0 3
4365: PPUSH
4366: LD_INT 51
4368: PPUSH
4369: LD_INT 77
4371: PPUSH
4372: CALL_OW 428
4376: PPUSH
4377: CALL_OW 52
// end ;
4381: GO 4306
4383: POP
4384: POP
// end ;
4385: LD_VAR 0 1
4389: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4390: LD_EXP 42
4394: PPUSH
4395: LD_INT 3
4397: PUSH
4398: LD_INT 24
4400: PUSH
4401: LD_INT 600
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 3
4414: PUSH
4415: LD_INT 54
4417: PUSH
4418: EMPTY
4419: LIST
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PPUSH
4429: CALL_OW 72
4433: PUSH
4434: LD_INT 66
4436: PPUSH
4437: LD_INT 89
4439: PPUSH
4440: CALL_OW 428
4444: PPUSH
4445: CALL_OW 302
4449: AND
4450: IFFALSE 4535
4452: GO 4454
4454: DISABLE
4455: LD_INT 0
4457: PPUSH
// begin enable ;
4458: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4459: LD_ADDR_VAR 0 1
4463: PUSH
4464: LD_EXP 42
4468: PPUSH
4469: LD_INT 3
4471: PUSH
4472: LD_INT 24
4474: PUSH
4475: LD_INT 600
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 3
4488: PUSH
4489: LD_INT 54
4491: PUSH
4492: EMPTY
4493: LIST
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PPUSH
4503: CALL_OW 72
4507: PUSH
4508: FOR_IN
4509: IFFALSE 4533
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4511: LD_VAR 0 1
4515: PPUSH
4516: LD_INT 66
4518: PPUSH
4519: LD_INT 89
4521: PPUSH
4522: CALL_OW 428
4526: PPUSH
4527: CALL_OW 120
4531: GO 4508
4533: POP
4534: POP
// end ;
4535: PPOPN 1
4537: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4538: LD_INT 22
4540: PUSH
4541: LD_INT 2
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 92
4550: PUSH
4551: LD_INT 54
4553: PUSH
4554: LD_INT 77
4556: PUSH
4557: LD_INT 8
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PPUSH
4570: CALL_OW 69
4574: IFFALSE 4638
4576: GO 4578
4578: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4579: LD_EXP 43
4583: PPUSH
4584: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4588: LD_EXP 43
4592: PPUSH
4593: LD_INT 22
4595: PUSH
4596: LD_INT 2
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: PUSH
4603: LD_INT 92
4605: PUSH
4606: LD_INT 54
4608: PUSH
4609: LD_INT 77
4611: PUSH
4612: LD_INT 8
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: PPUSH
4625: CALL_OW 69
4629: PUSH
4630: LD_INT 1
4632: ARRAY
4633: PPUSH
4634: CALL_OW 175
// end ;
4638: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4639: LD_INT 0
4641: PPUSH
4642: PPUSH
4643: PPUSH
4644: PPUSH
4645: PPUSH
4646: PPUSH
4647: PPUSH
4648: PPUSH
4649: PPUSH
4650: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: LD_INT 1
4658: PPUSH
4659: LD_INT 3
4661: PPUSH
4662: CALL_OW 12
4666: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4667: LD_ADDR_VAR 0 5
4671: PUSH
4672: LD_INT 16
4674: PUSH
4675: LD_INT 17
4677: PUSH
4678: LD_INT 19
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: PUSH
4686: LD_VAR 0 3
4690: ARRAY
4691: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4692: LD_ADDR_VAR 0 7
4696: PUSH
4697: LD_INT 159
4699: PUSH
4700: LD_INT 25
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 137
4709: PUSH
4710: LD_INT 37
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_INT 123
4719: PUSH
4720: LD_INT 55
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 115
4729: PUSH
4730: LD_INT 71
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PUSH
4737: LD_INT 106
4739: PUSH
4740: LD_INT 88
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: LD_INT 97
4749: PUSH
4750: LD_INT 114
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 75
4759: PUSH
4760: LD_INT 146
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: PUSH
4776: LD_INT 206
4778: PUSH
4779: LD_INT 135
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 184
4788: PUSH
4789: LD_INT 111
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 154
4798: PUSH
4799: LD_INT 97
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 122
4808: PUSH
4809: LD_INT 80
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 109
4818: PUSH
4819: LD_INT 78
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 97
4828: PUSH
4829: LD_INT 113
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 75
4838: PUSH
4839: LD_INT 147
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 185
4857: PUSH
4858: LD_INT 72
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 171
4867: PUSH
4868: LD_INT 83
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PUSH
4875: LD_INT 161
4877: PUSH
4878: LD_INT 99
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PUSH
4885: LD_INT 125
4887: PUSH
4888: LD_INT 82
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 105
4897: PUSH
4898: LD_INT 90
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 96
4907: PUSH
4908: LD_INT 116
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 75
4917: PUSH
4918: LD_INT 147
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: LD_VAR 0 3
4943: ARRAY
4944: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4945: LD_ADDR_VAR 0 4
4949: PUSH
4950: LD_INT 4
4952: PUSH
4953: LD_INT 5
4955: PUSH
4956: LD_INT 3
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: LIST
4963: PUSH
4964: LD_VAR 0 3
4968: ARRAY
4969: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4970: LD_ADDR_VAR 0 6
4974: PUSH
4975: LD_INT 22
4977: PUSH
4978: LD_INT 20
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: PUSH
4989: LD_VAR 0 3
4993: ARRAY
4994: ST_TO_ADDR
// for i := 1 to 2 do
4995: LD_ADDR_VAR 0 2
4999: PUSH
5000: DOUBLE
5001: LD_INT 1
5003: DEC
5004: ST_TO_ADDR
5005: LD_INT 2
5007: PUSH
5008: FOR_TO
5009: IFFALSE 5027
// EraseResourceArea ( i , outerSpawnArea ) ;
5011: LD_VAR 0 2
5015: PPUSH
5016: LD_VAR 0 6
5020: PPUSH
5021: CALL_OW 286
5025: GO 5008
5027: POP
5028: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5029: LD_VAR 0 6
5033: PPUSH
5034: LD_INT 2
5036: PUSH
5037: LD_INT 21
5039: PUSH
5040: LD_INT 1
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PUSH
5047: LD_INT 21
5049: PUSH
5050: LD_INT 2
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 21
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 70
5077: IFFALSE 5292
// repeat wait ( 0 0$1 ) ;
5079: LD_INT 35
5081: PPUSH
5082: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5086: LD_VAR 0 6
5090: PPUSH
5091: LD_INT 2
5093: PUSH
5094: LD_INT 21
5096: PUSH
5097: LD_INT 2
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 3
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: PPUSH
5119: CALL_OW 70
5123: IFFALSE 5184
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5125: LD_ADDR_VAR 0 2
5129: PUSH
5130: LD_VAR 0 6
5134: PPUSH
5135: LD_INT 2
5137: PUSH
5138: LD_INT 21
5140: PUSH
5141: LD_INT 2
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: LD_INT 21
5150: PUSH
5151: LD_INT 3
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 70
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5182
// RemoveUnit ( i ) ;
5171: LD_VAR 0 2
5175: PPUSH
5176: CALL_OW 64
5180: GO 5168
5182: POP
5183: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 21
5191: PUSH
5192: LD_INT 1
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PPUSH
5199: CALL_OW 70
5203: IFFALSE 5252
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5205: LD_ADDR_VAR 0 2
5209: PUSH
5210: LD_VAR 0 6
5214: PPUSH
5215: LD_INT 21
5217: PUSH
5218: LD_INT 1
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: CALL_OW 70
5229: PUSH
5230: FOR_IN
5231: IFFALSE 5250
// ComMoveXY ( i , 113 , 53 ) ;
5233: LD_VAR 0 2
5237: PPUSH
5238: LD_INT 113
5240: PPUSH
5241: LD_INT 53
5243: PPUSH
5244: CALL_OW 111
5248: GO 5230
5250: POP
5251: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5252: LD_VAR 0 6
5256: PPUSH
5257: LD_INT 2
5259: PUSH
5260: LD_INT 21
5262: PUSH
5263: LD_INT 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 21
5272: PUSH
5273: LD_INT 2
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: LIST
5284: PPUSH
5285: CALL_OW 70
5289: NOT
5290: IFFALSE 5079
// case convoyCounter of 1 .. 3 :
5292: LD_EXP 16
5296: PUSH
5297: LD_INT 1
5299: DOUBLE
5300: GREATEREQUAL
5301: IFFALSE 5309
5303: LD_INT 3
5305: DOUBLE
5306: LESSEQUAL
5307: IFTRUE 5311
5309: GO 5930
5311: POP
// begin uc_side := 3 ;
5312: LD_ADDR_OWVAR 20
5316: PUSH
5317: LD_INT 3
5319: ST_TO_ADDR
// uc_nation := 3 ;
5320: LD_ADDR_OWVAR 21
5324: PUSH
5325: LD_INT 3
5327: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5328: LD_ADDR_VAR 0 2
5332: PUSH
5333: DOUBLE
5334: LD_INT 1
5336: DEC
5337: ST_TO_ADDR
5338: LD_INT 5
5340: PUSH
5341: LD_INT 6
5343: PUSH
5344: LD_INT 7
5346: PUSH
5347: LD_INT 8
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_OWVAR 67
5360: ARRAY
5361: PUSH
5362: LD_EXP 16
5366: MINUS
5367: PUSH
5368: FOR_TO
5369: IFFALSE 5560
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5371: LD_INT 0
5373: PPUSH
5374: LD_INT 1
5376: PUSH
5377: LD_INT 1
5379: PUSH
5380: LD_INT 1
5382: PUSH
5383: LD_INT 4
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: PUSH
5392: LD_INT 1
5394: PPUSH
5395: LD_INT 4
5397: PPUSH
5398: CALL_OW 12
5402: ARRAY
5403: PPUSH
5404: LD_INT 4
5406: PUSH
5407: LD_INT 5
5409: PUSH
5410: LD_INT 6
5412: PUSH
5413: LD_INT 7
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: PUSH
5422: LD_OWVAR 67
5426: ARRAY
5427: PPUSH
5428: CALL_OW 380
// un := CreateHuman ;
5432: LD_ADDR_VAR 0 8
5436: PUSH
5437: CALL_OW 44
5441: ST_TO_ADDR
// SetDir ( un , dir ) ;
5442: LD_VAR 0 8
5446: PPUSH
5447: LD_VAR 0 4
5451: PPUSH
5452: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5456: LD_VAR 0 8
5460: PPUSH
5461: LD_VAR 0 5
5465: PPUSH
5466: LD_INT 0
5468: PPUSH
5469: CALL 67333 0 3
5473: IFFALSE 5558
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5475: LD_ADDR_EXP 41
5479: PUSH
5480: LD_EXP 41
5484: PPUSH
5485: LD_EXP 41
5489: PUSH
5490: LD_INT 1
5492: PLUS
5493: PPUSH
5494: LD_VAR 0 8
5498: PPUSH
5499: CALL_OW 1
5503: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5504: LD_VAR 0 8
5508: PPUSH
5509: LD_INT 1
5511: PPUSH
5512: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5516: LD_VAR 0 8
5520: PPUSH
5521: LD_VAR 0 7
5525: PUSH
5526: LD_INT 1
5528: ARRAY
5529: PUSH
5530: LD_INT 1
5532: ARRAY
5533: PPUSH
5534: LD_VAR 0 7
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PUSH
5543: LD_INT 2
5545: ARRAY
5546: PPUSH
5547: CALL_OW 111
// wait ( 0 0$2 ) ;
5551: LD_INT 70
5553: PPUSH
5554: CALL_OW 67
// end ; end ;
5558: GO 5368
5560: POP
5561: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5562: LD_ADDR_VAR 0 2
5566: PUSH
5567: DOUBLE
5568: LD_INT 1
5570: DEC
5571: ST_TO_ADDR
5572: LD_INT 3
5574: PUSH
5575: LD_INT 4
5577: PUSH
5578: LD_INT 4
5580: PUSH
5581: LD_INT 4
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: LD_OWVAR 67
5594: ARRAY
5595: PUSH
5596: FOR_TO
5597: IFFALSE 5926
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5599: LD_INT 3
5601: PPUSH
5602: LD_INT 3
5604: PPUSH
5605: LD_INT 21
5607: PUSH
5608: LD_INT 22
5610: PUSH
5611: LD_INT 23
5613: PUSH
5614: LD_INT 24
5616: PUSH
5617: LD_INT 24
5619: PUSH
5620: LD_INT 24
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: PUSH
5631: LD_OWVAR 67
5635: PPUSH
5636: LD_OWVAR 67
5640: PUSH
5641: LD_INT 2
5643: PLUS
5644: PPUSH
5645: CALL_OW 12
5649: ARRAY
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: LD_INT 1
5656: PPUSH
5657: LD_INT 42
5659: PUSH
5660: LD_INT 44
5662: PUSH
5663: LD_INT 43
5665: PUSH
5666: LD_INT 44
5668: PUSH
5669: LD_INT 46
5671: PUSH
5672: LD_INT 46
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: PUSH
5683: LD_INT 1
5685: PPUSH
5686: LD_OWVAR 67
5690: PUSH
5691: LD_INT 2
5693: PLUS
5694: PPUSH
5695: CALL_OW 12
5699: ARRAY
5700: PPUSH
5701: LD_INT 90
5703: PPUSH
5704: CALL 439 0 7
// un := CreateVehicle ;
5708: LD_ADDR_VAR 0 8
5712: PUSH
5713: CALL_OW 45
5717: ST_TO_ADDR
// SetDir ( un , dir ) ;
5718: LD_VAR 0 8
5722: PPUSH
5723: LD_VAR 0 4
5727: PPUSH
5728: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5732: LD_VAR 0 8
5736: PPUSH
5737: LD_VAR 0 5
5741: PPUSH
5742: LD_INT 0
5744: PPUSH
5745: CALL 67333 0 3
5749: IFFALSE 5924
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5751: LD_ADDR_EXP 41
5755: PUSH
5756: LD_EXP 41
5760: PPUSH
5761: LD_EXP 41
5765: PUSH
5766: LD_INT 1
5768: PLUS
5769: PPUSH
5770: LD_VAR 0 8
5774: PPUSH
5775: CALL_OW 1
5779: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5780: LD_INT 0
5782: PPUSH
5783: LD_INT 3
5785: PUSH
5786: LD_INT 4
5788: PUSH
5789: LD_INT 5
5791: PUSH
5792: LD_INT 6
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: PUSH
5801: LD_OWVAR 67
5805: ARRAY
5806: PPUSH
5807: CALL_OW 383
// un := CreateHuman ;
5811: LD_ADDR_VAR 0 8
5815: PUSH
5816: CALL_OW 44
5820: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5821: LD_VAR 0 8
5825: PPUSH
5826: LD_EXP 41
5830: PUSH
5831: LD_EXP 41
5835: ARRAY
5836: PPUSH
5837: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5841: LD_ADDR_EXP 41
5845: PUSH
5846: LD_EXP 41
5850: PPUSH
5851: LD_EXP 41
5855: PUSH
5856: LD_INT 1
5858: PLUS
5859: PPUSH
5860: LD_VAR 0 8
5864: PPUSH
5865: CALL_OW 1
5869: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5870: LD_VAR 0 8
5874: PPUSH
5875: LD_INT 1
5877: PPUSH
5878: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5882: LD_VAR 0 8
5886: PPUSH
5887: LD_VAR 0 7
5891: PUSH
5892: LD_INT 1
5894: ARRAY
5895: PUSH
5896: LD_INT 1
5898: ARRAY
5899: PPUSH
5900: LD_VAR 0 7
5904: PUSH
5905: LD_INT 1
5907: ARRAY
5908: PUSH
5909: LD_INT 2
5911: ARRAY
5912: PPUSH
5913: CALL_OW 111
// wait ( 0 0$3 ) ;
5917: LD_INT 105
5919: PPUSH
5920: CALL_OW 67
// end ; end ;
5924: GO 5596
5926: POP
5927: POP
// end ; 4 .. 7 :
5928: GO 6503
5930: LD_INT 4
5932: DOUBLE
5933: GREATEREQUAL
5934: IFFALSE 5942
5936: LD_INT 7
5938: DOUBLE
5939: LESSEQUAL
5940: IFTRUE 5944
5942: GO 6502
5944: POP
// begin uc_side := 3 ;
5945: LD_ADDR_OWVAR 20
5949: PUSH
5950: LD_INT 3
5952: ST_TO_ADDR
// uc_nation := 3 ;
5953: LD_ADDR_OWVAR 21
5957: PUSH
5958: LD_INT 3
5960: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5961: LD_ADDR_VAR 0 2
5965: PUSH
5966: DOUBLE
5967: LD_INT 1
5969: DEC
5970: ST_TO_ADDR
5971: LD_INT 2
5973: PUSH
5974: LD_INT 3
5976: PUSH
5977: LD_INT 4
5979: PUSH
5980: LD_INT 4
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: LD_OWVAR 67
5993: ARRAY
5994: PUSH
5995: FOR_TO
5996: IFFALSE 6160
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5998: LD_INT 0
6000: PPUSH
6001: LD_INT 1
6003: PPUSH
6004: LD_INT 4
6006: PUSH
6007: LD_INT 5
6009: PUSH
6010: LD_INT 6
6012: PUSH
6013: LD_INT 7
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: PUSH
6022: LD_OWVAR 67
6026: ARRAY
6027: PPUSH
6028: CALL_OW 380
// un := CreateHuman ;
6032: LD_ADDR_VAR 0 8
6036: PUSH
6037: CALL_OW 44
6041: ST_TO_ADDR
// SetDir ( un , dir ) ;
6042: LD_VAR 0 8
6046: PPUSH
6047: LD_VAR 0 4
6051: PPUSH
6052: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6056: LD_VAR 0 8
6060: PPUSH
6061: LD_VAR 0 5
6065: PPUSH
6066: LD_INT 0
6068: PPUSH
6069: CALL 67333 0 3
6073: IFFALSE 6158
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6075: LD_ADDR_EXP 41
6079: PUSH
6080: LD_EXP 41
6084: PPUSH
6085: LD_EXP 41
6089: PUSH
6090: LD_INT 1
6092: PLUS
6093: PPUSH
6094: LD_VAR 0 8
6098: PPUSH
6099: CALL_OW 1
6103: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6104: LD_VAR 0 8
6108: PPUSH
6109: LD_INT 1
6111: PPUSH
6112: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6116: LD_VAR 0 8
6120: PPUSH
6121: LD_VAR 0 7
6125: PUSH
6126: LD_INT 1
6128: ARRAY
6129: PUSH
6130: LD_INT 1
6132: ARRAY
6133: PPUSH
6134: LD_VAR 0 7
6138: PUSH
6139: LD_INT 1
6141: ARRAY
6142: PUSH
6143: LD_INT 2
6145: ARRAY
6146: PPUSH
6147: CALL_OW 111
// wait ( 0 0$2 ) ;
6151: LD_INT 70
6153: PPUSH
6154: CALL_OW 67
// end ; end ;
6158: GO 5995
6160: POP
6161: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6162: LD_ADDR_VAR 0 2
6166: PUSH
6167: DOUBLE
6168: LD_INT 1
6170: DEC
6171: ST_TO_ADDR
6172: LD_INT 2
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: LD_INT 3
6180: PUSH
6181: LD_INT 4
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: PUSH
6190: LD_OWVAR 67
6194: ARRAY
6195: PUSH
6196: FOR_TO
6197: IFFALSE 6498
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6199: LD_INT 3
6201: PPUSH
6202: LD_INT 3
6204: PPUSH
6205: LD_INT 21
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 1
6217: PPUSH
6218: LD_INT 2
6220: PPUSH
6221: CALL_OW 12
6225: ARRAY
6226: PPUSH
6227: LD_INT 1
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: LD_INT 42
6235: PUSH
6236: LD_INT 44
6238: PUSH
6239: LD_INT 43
6241: PUSH
6242: LD_INT 44
6244: PUSH
6245: LD_INT 44
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 1
6257: PPUSH
6258: LD_OWVAR 67
6262: PUSH
6263: LD_INT 1
6265: PLUS
6266: PPUSH
6267: CALL_OW 12
6271: ARRAY
6272: PPUSH
6273: LD_INT 90
6275: PPUSH
6276: CALL 439 0 7
// un := CreateVehicle ;
6280: LD_ADDR_VAR 0 8
6284: PUSH
6285: CALL_OW 45
6289: ST_TO_ADDR
// SetDir ( un , dir ) ;
6290: LD_VAR 0 8
6294: PPUSH
6295: LD_VAR 0 4
6299: PPUSH
6300: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6304: LD_VAR 0 8
6308: PPUSH
6309: LD_VAR 0 5
6313: PPUSH
6314: LD_INT 0
6316: PPUSH
6317: CALL 67333 0 3
6321: IFFALSE 6496
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6323: LD_ADDR_EXP 41
6327: PUSH
6328: LD_EXP 41
6332: PPUSH
6333: LD_EXP 41
6337: PUSH
6338: LD_INT 1
6340: PLUS
6341: PPUSH
6342: LD_VAR 0 8
6346: PPUSH
6347: CALL_OW 1
6351: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6352: LD_INT 0
6354: PPUSH
6355: LD_INT 3
6357: PUSH
6358: LD_INT 4
6360: PUSH
6361: LD_INT 5
6363: PUSH
6364: LD_INT 6
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: PUSH
6373: LD_OWVAR 67
6377: ARRAY
6378: PPUSH
6379: CALL_OW 383
// un := CreateHuman ;
6383: LD_ADDR_VAR 0 8
6387: PUSH
6388: CALL_OW 44
6392: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6393: LD_VAR 0 8
6397: PPUSH
6398: LD_EXP 41
6402: PUSH
6403: LD_EXP 41
6407: ARRAY
6408: PPUSH
6409: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6413: LD_ADDR_EXP 41
6417: PUSH
6418: LD_EXP 41
6422: PPUSH
6423: LD_EXP 41
6427: PUSH
6428: LD_INT 1
6430: PLUS
6431: PPUSH
6432: LD_VAR 0 8
6436: PPUSH
6437: CALL_OW 1
6441: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6442: LD_VAR 0 8
6446: PPUSH
6447: LD_INT 1
6449: PPUSH
6450: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6454: LD_VAR 0 8
6458: PPUSH
6459: LD_VAR 0 7
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PUSH
6468: LD_INT 1
6470: ARRAY
6471: PPUSH
6472: LD_VAR 0 7
6476: PUSH
6477: LD_INT 1
6479: ARRAY
6480: PUSH
6481: LD_INT 2
6483: ARRAY
6484: PPUSH
6485: CALL_OW 111
// wait ( 0 0$2 ) ;
6489: LD_INT 70
6491: PPUSH
6492: CALL_OW 67
// end ; end ;
6496: GO 6196
6498: POP
6499: POP
// end ; end ;
6500: GO 6503
6502: POP
// repeat wait ( 0 0$1 ) ;
6503: LD_INT 35
6505: PPUSH
6506: CALL_OW 67
// for un in ruConvoySquad do
6510: LD_ADDR_VAR 0 8
6514: PUSH
6515: LD_EXP 41
6519: PUSH
6520: FOR_IN
6521: IFFALSE 7145
// begin if IsInArea ( un , westSouthOutArea ) then
6523: LD_VAR 0 8
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: CALL_OW 308
6535: IFFALSE 6623
// begin if GetType ( un ) = unit_vehicle then
6537: LD_VAR 0 8
6541: PPUSH
6542: CALL_OW 247
6546: PUSH
6547: LD_INT 2
6549: EQUAL
6550: IFFALSE 6582
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6552: LD_ADDR_EXP 41
6556: PUSH
6557: LD_EXP 41
6561: PUSH
6562: LD_VAR 0 8
6566: PPUSH
6567: CALL_OW 311
6571: DIFF
6572: ST_TO_ADDR
// RemoveUnit ( un ) ;
6573: LD_VAR 0 8
6577: PPUSH
6578: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6582: LD_ADDR_EXP 15
6586: PUSH
6587: LD_EXP 15
6591: PUSH
6592: LD_INT 1
6594: PLUS
6595: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6596: LD_ADDR_EXP 41
6600: PUSH
6601: LD_EXP 41
6605: PUSH
6606: LD_VAR 0 8
6610: DIFF
6611: ST_TO_ADDR
// RemoveUnit ( un ) ;
6612: LD_VAR 0 8
6616: PPUSH
6617: CALL_OW 64
// break ;
6621: GO 7145
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6623: LD_VAR 0 8
6627: PPUSH
6628: CALL_OW 305
6632: NOT
6633: PUSH
6634: LD_VAR 0 8
6638: PPUSH
6639: CALL_OW 310
6643: NOT
6644: AND
6645: IFFALSE 6663
// ruConvoySquad := ruConvoySquad diff un ;
6647: LD_ADDR_EXP 41
6651: PUSH
6652: LD_EXP 41
6656: PUSH
6657: LD_VAR 0 8
6661: DIFF
6662: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6663: LD_VAR 0 8
6667: PPUSH
6668: CALL_OW 302
6672: PUSH
6673: LD_VAR 0 8
6677: PPUSH
6678: CALL_OW 314
6682: NOT
6683: AND
6684: IFFALSE 7143
// begin tag := GetTag ( un ) ;
6686: LD_ADDR_VAR 0 9
6690: PUSH
6691: LD_VAR 0 8
6695: PPUSH
6696: CALL_OW 110
6700: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6701: LD_VAR 0 8
6705: PPUSH
6706: LD_VAR 0 7
6710: PUSH
6711: LD_VAR 0 9
6715: PUSH
6716: LD_INT 1
6718: PLUS
6719: ARRAY
6720: PUSH
6721: LD_INT 1
6723: ARRAY
6724: PPUSH
6725: LD_VAR 0 7
6729: PUSH
6730: LD_VAR 0 9
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: ARRAY
6739: PUSH
6740: LD_INT 2
6742: ARRAY
6743: PPUSH
6744: CALL_OW 297
6748: PUSH
6749: LD_INT 6
6751: LESS
6752: IFFALSE 6935
// begin SetTag ( un , tag + 1 ) ;
6754: LD_VAR 0 8
6758: PPUSH
6759: LD_VAR 0 9
6763: PUSH
6764: LD_INT 1
6766: PLUS
6767: PPUSH
6768: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6772: LD_VAR 0 8
6776: PPUSH
6777: CALL_OW 247
6781: PUSH
6782: LD_INT 2
6784: EQUAL
6785: PUSH
6786: LD_VAR 0 8
6790: PPUSH
6791: CALL_OW 257
6795: PUSH
6796: LD_INT 3
6798: EQUAL
6799: OR
6800: IFFALSE 6933
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6802: LD_ADDR_VAR 0 10
6806: PUSH
6807: LD_INT 22
6809: PUSH
6810: LD_INT 2
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 91
6819: PUSH
6820: LD_VAR 0 8
6824: PUSH
6825: LD_INT 8
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PPUSH
6837: CALL_OW 69
6841: ST_TO_ADDR
// if enemy then
6842: LD_VAR 0 10
6846: IFFALSE 6874
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6848: LD_VAR 0 8
6852: PPUSH
6853: LD_VAR 0 10
6857: PPUSH
6858: LD_VAR 0 8
6862: PPUSH
6863: CALL_OW 74
6867: PPUSH
6868: CALL_OW 115
6872: GO 6933
// begin AddComWait ( un , 0 0$4 ) ;
6874: LD_VAR 0 8
6878: PPUSH
6879: LD_INT 140
6881: PPUSH
6882: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6886: LD_VAR 0 8
6890: PPUSH
6891: LD_VAR 0 7
6895: PUSH
6896: LD_VAR 0 9
6900: PUSH
6901: LD_INT 1
6903: PLUS
6904: ARRAY
6905: PUSH
6906: LD_INT 1
6908: ARRAY
6909: PPUSH
6910: LD_VAR 0 7
6914: PUSH
6915: LD_VAR 0 9
6919: PUSH
6920: LD_INT 1
6922: PLUS
6923: ARRAY
6924: PUSH
6925: LD_INT 2
6927: ARRAY
6928: PPUSH
6929: CALL_OW 174
// end ; end ; end else
6933: GO 7143
// begin if GetClass ( un ) = 4 then
6935: LD_VAR 0 8
6939: PPUSH
6940: CALL_OW 257
6944: PUSH
6945: LD_INT 4
6947: EQUAL
6948: IFFALSE 7096
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6950: LD_EXP 41
6954: PPUSH
6955: LD_INT 21
6957: PUSH
6958: LD_INT 1
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 3
6967: PUSH
6968: LD_INT 24
6970: PUSH
6971: LD_INT 1000
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 72
6990: IFFALSE 7048
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6992: LD_VAR 0 8
6996: PPUSH
6997: LD_EXP 41
7001: PPUSH
7002: LD_INT 21
7004: PUSH
7005: LD_INT 1
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 3
7014: PUSH
7015: LD_INT 24
7017: PUSH
7018: LD_INT 1000
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PPUSH
7033: CALL_OW 72
7037: PUSH
7038: LD_INT 1
7040: ARRAY
7041: PPUSH
7042: CALL_OW 128
7046: GO 7094
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7048: LD_VAR 0 8
7052: PPUSH
7053: LD_EXP 41
7057: PPUSH
7058: LD_INT 3
7060: PUSH
7061: LD_INT 25
7063: PUSH
7064: LD_INT 4
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 72
7079: PPUSH
7080: LD_VAR 0 8
7084: PPUSH
7085: CALL_OW 74
7089: PPUSH
7090: CALL_OW 112
7094: GO 7143
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7096: LD_VAR 0 8
7100: PPUSH
7101: LD_VAR 0 7
7105: PUSH
7106: LD_VAR 0 9
7110: PUSH
7111: LD_INT 1
7113: PLUS
7114: ARRAY
7115: PUSH
7116: LD_INT 1
7118: ARRAY
7119: PPUSH
7120: LD_VAR 0 7
7124: PUSH
7125: LD_VAR 0 9
7129: PUSH
7130: LD_INT 1
7132: PLUS
7133: ARRAY
7134: PUSH
7135: LD_INT 2
7137: ARRAY
7138: PPUSH
7139: CALL_OW 114
// end ; end ; end ;
7143: GO 6520
7145: POP
7146: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7147: LD_EXP 41
7151: PPUSH
7152: LD_INT 52
7154: PUSH
7155: EMPTY
7156: LIST
7157: PUSH
7158: LD_INT 21
7160: PUSH
7161: LD_INT 1
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 72
7176: NOT
7177: IFFALSE 6503
// end ;
7179: LD_VAR 0 1
7183: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7184: LD_EXP 16
7188: PUSH
7189: LD_INT 3
7191: PPUSH
7192: LD_INT 5
7194: PPUSH
7195: CALL_OW 12
7199: LESS
7200: PUSH
7201: LD_EXP 41
7205: NOT
7206: AND
7207: PUSH
7208: LD_OWVAR 67
7212: PUSH
7213: LD_INT 1
7215: GREATER
7216: AND
7217: IFFALSE 7621
7219: GO 7221
7221: DISABLE
7222: LD_INT 0
7224: PPUSH
7225: PPUSH
7226: PPUSH
// begin uc_side := 3 ;
7227: LD_ADDR_OWVAR 20
7231: PUSH
7232: LD_INT 3
7234: ST_TO_ADDR
// uc_nation := 3 ;
7235: LD_ADDR_OWVAR 21
7239: PUSH
7240: LD_INT 3
7242: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7243: LD_ADDR_VAR 0 1
7247: PUSH
7248: DOUBLE
7249: LD_INT 1
7251: DEC
7252: ST_TO_ADDR
7253: LD_INT 2
7255: PUSH
7256: LD_INT 3
7258: PUSH
7259: LD_INT 4
7261: PUSH
7262: LD_INT 5
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: PUSH
7271: LD_OWVAR 67
7275: ARRAY
7276: PUSH
7277: FOR_TO
7278: IFFALSE 7542
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7280: LD_INT 3
7282: PPUSH
7283: LD_INT 3
7285: PPUSH
7286: LD_INT 21
7288: PUSH
7289: LD_INT 22
7291: PUSH
7292: LD_INT 23
7294: PUSH
7295: LD_INT 24
7297: PUSH
7298: LD_INT 24
7300: PUSH
7301: LD_INT 24
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: PUSH
7312: LD_OWVAR 67
7316: PPUSH
7317: LD_OWVAR 67
7321: PUSH
7322: LD_INT 2
7324: PLUS
7325: PPUSH
7326: CALL_OW 12
7330: ARRAY
7331: PPUSH
7332: LD_INT 1
7334: PPUSH
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 42
7340: PUSH
7341: LD_INT 44
7343: PUSH
7344: LD_INT 43
7346: PUSH
7347: LD_INT 44
7349: PUSH
7350: LD_INT 46
7352: PUSH
7353: LD_INT 46
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 1
7366: PPUSH
7367: LD_OWVAR 67
7371: PUSH
7372: LD_INT 2
7374: PLUS
7375: PPUSH
7376: CALL_OW 12
7380: ARRAY
7381: PPUSH
7382: LD_INT 90
7384: PPUSH
7385: CALL 439 0 7
// un := CreateVehicle ;
7389: LD_ADDR_VAR 0 3
7393: PUSH
7394: CALL_OW 45
7398: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7399: LD_VAR 0 3
7403: PPUSH
7404: LD_INT 0
7406: PPUSH
7407: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7411: LD_VAR 0 3
7415: PPUSH
7416: LD_INT 23
7418: PPUSH
7419: LD_INT 0
7421: PPUSH
7422: CALL 67333 0 3
7426: IFFALSE 7540
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7428: LD_ADDR_VAR 0 2
7432: PUSH
7433: LD_VAR 0 2
7437: PPUSH
7438: LD_VAR 0 2
7442: PUSH
7443: LD_INT 1
7445: PLUS
7446: PPUSH
7447: LD_VAR 0 3
7451: PPUSH
7452: CALL_OW 1
7456: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7457: LD_INT 0
7459: PPUSH
7460: LD_INT 3
7462: PUSH
7463: LD_INT 4
7465: PUSH
7466: LD_INT 5
7468: PUSH
7469: LD_INT 6
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: PUSH
7478: LD_OWVAR 67
7482: ARRAY
7483: PPUSH
7484: CALL_OW 383
// un := CreateHuman ;
7488: LD_ADDR_VAR 0 3
7492: PUSH
7493: CALL_OW 44
7497: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7498: LD_VAR 0 3
7502: PPUSH
7503: LD_VAR 0 2
7507: PUSH
7508: LD_VAR 0 2
7512: ARRAY
7513: PPUSH
7514: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7518: LD_VAR 0 3
7522: PPUSH
7523: LD_INT 80
7525: PPUSH
7526: LD_INT 139
7528: PPUSH
7529: CALL_OW 111
// wait ( 0 0$3 ) ;
7533: LD_INT 105
7535: PPUSH
7536: CALL_OW 67
// end ; end ;
7540: GO 7277
7542: POP
7543: POP
// for i in tmp do
7544: LD_ADDR_VAR 0 1
7548: PUSH
7549: LD_VAR 0 2
7553: PUSH
7554: FOR_IN
7555: IFFALSE 7619
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7557: LD_VAR 0 1
7561: PPUSH
7562: LD_INT 101
7564: PPUSH
7565: LD_INT 102
7567: PPUSH
7568: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7572: LD_VAR 0 1
7576: PPUSH
7577: LD_INT 110
7579: PPUSH
7580: LD_INT 78
7582: PPUSH
7583: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7587: LD_VAR 0 1
7591: PPUSH
7592: LD_INT 75
7594: PPUSH
7595: LD_INT 101
7597: PPUSH
7598: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7602: LD_VAR 0 1
7606: PPUSH
7607: LD_INT 57
7609: PPUSH
7610: LD_INT 83
7612: PPUSH
7613: CALL_OW 174
// end ;
7617: GO 7554
7619: POP
7620: POP
// end ;
7621: PPOPN 3
7623: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7624: LD_EXP 39
7628: PPUSH
7629: LD_INT 3
7631: PUSH
7632: LD_INT 24
7634: PUSH
7635: LD_INT 1000
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PPUSH
7646: CALL_OW 72
7650: PUSH
7651: LD_EXP 40
7655: PPUSH
7656: LD_INT 3
7658: PUSH
7659: LD_INT 24
7661: PUSH
7662: LD_INT 1000
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 72
7677: OR
7678: IFFALSE 7777
7680: GO 7682
7682: DISABLE
7683: LD_INT 0
7685: PPUSH
// begin enable ;
7686: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7687: LD_ADDR_VAR 0 1
7691: PUSH
7692: LD_EXP 39
7696: PPUSH
7697: LD_INT 3
7699: PUSH
7700: LD_INT 24
7702: PUSH
7703: LD_INT 1000
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 72
7718: PUSH
7719: LD_EXP 40
7723: PPUSH
7724: LD_INT 3
7726: PUSH
7727: LD_INT 24
7729: PUSH
7730: LD_INT 1000
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PPUSH
7741: CALL_OW 72
7745: UNION
7746: PUSH
7747: FOR_IN
7748: IFFALSE 7775
// if IsSleeping ( i ) then
7750: LD_VAR 0 1
7754: PPUSH
7755: CALL_OW 555
7759: IFFALSE 7773
// ForceSleep ( i , false ) ;
7761: LD_VAR 0 1
7765: PPUSH
7766: LD_INT 0
7768: PPUSH
7769: CALL_OW 585
7773: GO 7747
7775: POP
7776: POP
// end ; end_of_file
7777: PPOPN 1
7779: END
// on UnitDestroyed ( un ) do begin if un = Heike then
7780: LD_VAR 0 1
7784: PUSH
7785: LD_EXP 21
7789: EQUAL
7790: IFFALSE 7799
// YouLost ( Heike ) ;
7792: LD_STRING Heike
7794: PPUSH
7795: CALL_OW 104
// if un in apeSoldGroup then
7799: LD_VAR 0 1
7803: PUSH
7804: LD_EXP 42
7808: IN
7809: IFFALSE 7827
// apeSoldGroup := apeSoldGroup diff un ;
7811: LD_ADDR_EXP 42
7815: PUSH
7816: LD_EXP 42
7820: PUSH
7821: LD_VAR 0 1
7825: DIFF
7826: ST_TO_ADDR
// if un in apeEngGroup then
7827: LD_VAR 0 1
7831: PUSH
7832: LD_EXP 43
7836: IN
7837: IFFALSE 7855
// apeEngGroup := apeEngGroup diff un ;
7839: LD_ADDR_EXP 43
7843: PUSH
7844: LD_EXP 43
7848: PUSH
7849: LD_VAR 0 1
7853: DIFF
7854: ST_TO_ADDR
// if un in oilBaseGuard then
7855: LD_VAR 0 1
7859: PUSH
7860: LD_EXP 38
7864: IN
7865: IFFALSE 7883
// oilBaseGuard := oilBaseGuard diff un ;
7867: LD_ADDR_EXP 38
7871: PUSH
7872: LD_EXP 38
7876: PUSH
7877: LD_VAR 0 1
7881: DIFF
7882: ST_TO_ADDR
// if un in ruNorthGroup then
7883: LD_VAR 0 1
7887: PUSH
7888: LD_EXP 39
7892: IN
7893: IFFALSE 7911
// ruNorthGroup := ruNorthGroup diff un ;
7895: LD_ADDR_EXP 39
7899: PUSH
7900: LD_EXP 39
7904: PUSH
7905: LD_VAR 0 1
7909: DIFF
7910: ST_TO_ADDR
// if un in ruSouthGroup then
7911: LD_VAR 0 1
7915: PUSH
7916: LD_EXP 40
7920: IN
7921: IFFALSE 7939
// ruSouthGroup := ruSouthGroup diff un ;
7923: LD_ADDR_EXP 40
7927: PUSH
7928: LD_EXP 40
7932: PUSH
7933: LD_VAR 0 1
7937: DIFF
7938: ST_TO_ADDR
// if un in ruConvoySquad then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_EXP 41
7948: IN
7949: IFFALSE 7967
// ruConvoySquad := ruConvoySquad diff un ;
7951: LD_ADDR_EXP 41
7955: PUSH
7956: LD_EXP 41
7960: PUSH
7961: LD_VAR 0 1
7965: DIFF
7966: ST_TO_ADDR
// end ;
7967: PPOPN 1
7969: END
// on VehicleConstructed ( veh , fac ) do begin if GetWeapon ( veh ) = ar_radar then
7970: LD_VAR 0 1
7974: PPUSH
7975: CALL_OW 264
7979: PUSH
7980: LD_INT 30
7982: EQUAL
7983: IFFALSE 7993
// radarConstructed := true ;
7985: LD_ADDR_EXP 13
7989: PUSH
7990: LD_INT 1
7992: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
7993: LD_VAR 0 1
7997: PPUSH
7998: CALL_OW 264
8002: PUSH
8003: LD_INT 26
8005: EQUAL
8006: IFFALSE 8016
// flamethrowerBuilt := true ;
8008: LD_ADDR_EXP 20
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// end ;
8016: PPOPN 2
8018: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8019: LD_ADDR_EXP 18
8023: PUSH
8024: LD_EXP 18
8028: PUSH
8029: LD_INT 1
8031: PLUS
8032: ST_TO_ADDR
// if oldId in ruConvoySquad then
8033: LD_VAR 0 2
8037: PUSH
8038: LD_EXP 41
8042: IN
8043: IFFALSE 8061
// ruConvoySquad := ruConvoySquad diff oldId ;
8045: LD_ADDR_EXP 41
8049: PUSH
8050: LD_EXP 41
8054: PUSH
8055: LD_VAR 0 2
8059: DIFF
8060: ST_TO_ADDR
// if newId in ruConvoySquad then
8061: LD_VAR 0 1
8065: PUSH
8066: LD_EXP 41
8070: IN
8071: IFFALSE 8089
// ruConvoySquad := ruConvoySquad diff newId ;
8073: LD_ADDR_EXP 41
8077: PUSH
8078: LD_EXP 41
8082: PUSH
8083: LD_VAR 0 1
8087: DIFF
8088: ST_TO_ADDR
// end ; end_of_file
8089: PPOPN 4
8091: END
// export function Action ; var i , p , un , veh , tmp ; begin
8092: LD_INT 0
8094: PPUSH
8095: PPUSH
8096: PPUSH
8097: PPUSH
8098: PPUSH
8099: PPUSH
// InGameOn ;
8100: CALL_OW 8
// music_nat := 2 ;
8104: LD_ADDR_OWVAR 71
8108: PUSH
8109: LD_INT 2
8111: ST_TO_ADDR
// music_class := music_recon ;
8112: LD_ADDR_OWVAR 72
8116: PUSH
8117: LD_INT 3
8119: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8120: LD_INT 7
8122: PPUSH
8123: LD_INT 6
8125: PPUSH
8126: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8130: LD_INT 7
8132: PPUSH
8133: LD_INT 6
8135: PPUSH
8136: LD_INT 2
8138: PPUSH
8139: LD_INT 30
8141: NEG
8142: PPUSH
8143: CALL 1223 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8147: LD_ADDR_VAR 0 6
8151: PUSH
8152: LD_EXP 21
8156: PUSH
8157: LD_EXP 22
8161: PUSH
8162: LD_EXP 23
8166: PUSH
8167: LD_EXP 24
8171: PUSH
8172: LD_EXP 25
8176: PUSH
8177: LD_EXP 26
8181: PUSH
8182: LD_EXP 28
8186: PUSH
8187: LD_EXP 33
8191: PUSH
8192: LD_EXP 27
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: ST_TO_ADDR
// tmp := tmp diff 0 ;
8208: LD_ADDR_VAR 0 6
8212: PUSH
8213: LD_VAR 0 6
8217: PUSH
8218: LD_INT 0
8220: DIFF
8221: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8222: LD_ADDR_VAR 0 6
8226: PUSH
8227: LD_VAR 0 6
8231: PPUSH
8232: LD_INT 3
8234: PPUSH
8235: CALL 66925 0 2
8239: ST_TO_ADDR
// for i in heikeVehicles do
8240: LD_ADDR_VAR 0 2
8244: PUSH
8245: LD_EXP 35
8249: PUSH
8250: FOR_IN
8251: IFFALSE 8450
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8253: LD_INT 5
8255: PPUSH
8256: LD_VAR 0 2
8260: PUSH
8261: LD_INT 5
8263: ARRAY
8264: PPUSH
8265: LD_VAR 0 2
8269: PUSH
8270: LD_INT 1
8272: ARRAY
8273: PPUSH
8274: LD_VAR 0 2
8278: PUSH
8279: LD_INT 2
8281: ARRAY
8282: PPUSH
8283: LD_VAR 0 2
8287: PUSH
8288: LD_INT 3
8290: ARRAY
8291: PPUSH
8292: LD_VAR 0 2
8296: PUSH
8297: LD_INT 4
8299: ARRAY
8300: PPUSH
8301: LD_INT 34
8303: PPUSH
8304: CALL 439 0 7
// veh := CreateVehicle ;
8308: LD_ADDR_VAR 0 5
8312: PUSH
8313: CALL_OW 45
8317: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8318: LD_VAR 0 2
8322: PUSH
8323: LD_INT 4
8325: ARRAY
8326: PUSH
8327: LD_INT 51
8329: PUSH
8330: LD_INT 32
8332: PUSH
8333: LD_INT 12
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: LIST
8340: IN
8341: IFFALSE 8421
// begin if i [ 7 ] [ 1 ] then
8343: LD_VAR 0 2
8347: PUSH
8348: LD_INT 7
8350: ARRAY
8351: PUSH
8352: LD_INT 1
8354: ARRAY
8355: IFFALSE 8382
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8357: LD_VAR 0 5
8361: PPUSH
8362: LD_INT 1
8364: PPUSH
8365: LD_VAR 0 2
8369: PUSH
8370: LD_INT 7
8372: ARRAY
8373: PUSH
8374: LD_INT 1
8376: ARRAY
8377: PPUSH
8378: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8382: LD_VAR 0 2
8386: PUSH
8387: LD_INT 7
8389: ARRAY
8390: PUSH
8391: LD_INT 2
8393: ARRAY
8394: IFFALSE 8421
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8396: LD_VAR 0 5
8400: PPUSH
8401: LD_INT 2
8403: PPUSH
8404: LD_VAR 0 2
8408: PUSH
8409: LD_INT 7
8411: ARRAY
8412: PUSH
8413: LD_INT 2
8415: ARRAY
8416: PPUSH
8417: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8421: LD_VAR 0 5
8425: PPUSH
8426: LD_INT 2
8428: PPUSH
8429: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8433: LD_VAR 0 5
8437: PPUSH
8438: LD_INT 4
8440: PPUSH
8441: LD_INT 0
8443: PPUSH
8444: CALL_OW 49
// end ;
8448: GO 8250
8450: POP
8451: POP
// if tmp then
8452: LD_VAR 0 6
8456: IFFALSE 8566
// begin p := 0 ;
8458: LD_ADDR_VAR 0 3
8462: PUSH
8463: LD_INT 0
8465: ST_TO_ADDR
// for i in tmp do
8466: LD_ADDR_VAR 0 2
8470: PUSH
8471: LD_VAR 0 6
8475: PUSH
8476: FOR_IN
8477: IFFALSE 8564
// begin p := p + 1 ;
8479: LD_ADDR_VAR 0 3
8483: PUSH
8484: LD_VAR 0 3
8488: PUSH
8489: LD_INT 1
8491: PLUS
8492: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8493: LD_VAR 0 2
8497: PPUSH
8498: LD_INT 5
8500: PPUSH
8501: LD_INT 0
8503: PPUSH
8504: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8508: LD_VAR 0 2
8512: PPUSH
8513: LD_INT 26
8515: PPUSH
8516: LD_INT 9
8518: PPUSH
8519: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8523: LD_VAR 0 3
8527: PUSH
8528: LD_EXP 35
8532: GREATEREQUAL
8533: PUSH
8534: LD_VAR 0 2
8538: PPUSH
8539: CALL_OW 257
8543: PUSH
8544: LD_INT 3
8546: EQUAL
8547: AND
8548: IFFALSE 8562
// SetClass ( i , 1 ) ;
8550: LD_VAR 0 2
8554: PPUSH
8555: LD_INT 1
8557: PPUSH
8558: CALL_OW 336
// end ;
8562: GO 8476
8564: POP
8565: POP
// end ; if heikeSecondSquad then
8566: LD_EXP 34
8570: IFFALSE 8684
// for i in heikeSecondSquad do
8572: LD_ADDR_VAR 0 2
8576: PUSH
8577: LD_EXP 34
8581: PUSH
8582: FOR_IN
8583: IFFALSE 8682
// begin p := p + 1 ;
8585: LD_ADDR_VAR 0 3
8589: PUSH
8590: LD_VAR 0 3
8594: PUSH
8595: LD_INT 1
8597: PLUS
8598: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8599: LD_VAR 0 2
8603: PPUSH
8604: LD_INT 6
8606: PPUSH
8607: LD_INT 0
8609: PPUSH
8610: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8614: LD_VAR 0 2
8618: PPUSH
8619: LD_INT 26
8621: PPUSH
8622: LD_INT 9
8624: PPUSH
8625: CALL_OW 118
// ForceSleep ( i , true ) ;
8629: LD_VAR 0 2
8633: PPUSH
8634: LD_INT 1
8636: PPUSH
8637: CALL_OW 585
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8641: LD_VAR 0 3
8645: PUSH
8646: LD_EXP 35
8650: GREATEREQUAL
8651: PUSH
8652: LD_VAR 0 2
8656: PPUSH
8657: CALL_OW 257
8661: PUSH
8662: LD_INT 3
8664: EQUAL
8665: AND
8666: IFFALSE 8680
// SetClass ( i , 1 ) ;
8668: LD_VAR 0 2
8672: PPUSH
8673: LD_INT 1
8675: PPUSH
8676: CALL_OW 336
// end ;
8680: GO 8582
8682: POP
8683: POP
// if heikeApes then
8684: LD_EXP 36
8688: IFFALSE 8731
// for i in heikeApes do
8690: LD_ADDR_VAR 0 2
8694: PUSH
8695: LD_EXP 36
8699: PUSH
8700: FOR_IN
8701: IFFALSE 8729
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8703: LD_VAR 0 2
8707: PPUSH
8708: LD_INT 7
8710: PPUSH
8711: LD_INT 0
8713: PPUSH
8714: CALL_OW 49
// ComHold ( i ) ;
8718: LD_VAR 0 2
8722: PPUSH
8723: CALL_OW 140
// end ;
8727: GO 8700
8729: POP
8730: POP
// if Kurt then
8731: LD_EXP 32
8735: IFFALSE 8767
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8737: LD_EXP 32
8741: PPUSH
8742: LD_INT 8
8744: PPUSH
8745: LD_INT 0
8747: PPUSH
8748: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8752: LD_EXP 32
8756: PPUSH
8757: LD_INT 42
8759: PPUSH
8760: LD_INT 32
8762: PPUSH
8763: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
8767: LD_INT 70
8769: PPUSH
8770: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
8774: LD_EXP 21
8778: PPUSH
8779: LD_STRING DH-Start-1
8781: PPUSH
8782: CALL_OW 88
// if Givi then
8786: LD_EXP 22
8790: IFFALSE 9053
// begin Say ( Givi , DG-Start-2-5 ) ;
8792: LD_EXP 22
8796: PPUSH
8797: LD_STRING DG-Start-2-5
8799: PPUSH
8800: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8804: LD_EXP 21
8808: PPUSH
8809: LD_STRING DH-Start-3
8811: PPUSH
8812: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8816: LD_EXP 21
8820: PPUSH
8821: LD_STRING DH-Start-4
8823: PPUSH
8824: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8828: LD_EXP 22
8832: PPUSH
8833: LD_STRING DG-Start-5
8835: PPUSH
8836: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8840: LD_EXP 21
8844: PPUSH
8845: LD_STRING DH-Start-6
8847: PPUSH
8848: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8852: LD_EXP 22
8856: PPUSH
8857: LD_STRING DG-Start-7
8859: PPUSH
8860: CALL_OW 88
// if Mike then
8864: LD_EXP 23
8868: IFFALSE 9041
// begin Say ( Mike , DM-Start-8 ) ;
8870: LD_EXP 23
8874: PPUSH
8875: LD_STRING DM-Start-8
8877: PPUSH
8878: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8882: LD_EXP 23
8886: PPUSH
8887: LD_STRING DM-Start-9
8889: PPUSH
8890: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8894: LD_EXP 22
8898: PPUSH
8899: LD_STRING DG-Start-10
8901: PPUSH
8902: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8906: LD_EXP 22
8910: PPUSH
8911: LD_STRING DG-Start-11
8913: PPUSH
8914: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8918: LD_EXP 21
8922: PPUSH
8923: LD_STRING DH-Start-12
8925: PPUSH
8926: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8930: LD_EXP 22
8934: PPUSH
8935: LD_STRING DG-Start-13
8937: PPUSH
8938: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8942: LD_EXP 22
8946: PPUSH
8947: LD_STRING DG-Start-14
8949: PPUSH
8950: CALL_OW 88
// if Kaia then
8954: LD_EXP 26
8958: IFFALSE 9041
// begin Say ( Kaia , DK-Start-15 ) ;
8960: LD_EXP 26
8964: PPUSH
8965: LD_STRING DK-Start-15
8967: PPUSH
8968: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8972: LD_EXP 26
8976: PPUSH
8977: LD_STRING DK-Start-16
8979: PPUSH
8980: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8984: LD_EXP 26
8988: PPUSH
8989: LD_STRING DK-Start-17
8991: PPUSH
8992: CALL_OW 88
// wait ( 0 0$0.3 ) ;
8996: LD_INT 10
8998: PPUSH
8999: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9003: LD_EXP 22
9007: PPUSH
9008: LD_EXP 26
9012: PPUSH
9013: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9017: LD_EXP 22
9021: PPUSH
9022: LD_STRING DG-Start-18
9024: PPUSH
9025: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9029: LD_EXP 26
9033: PPUSH
9034: LD_STRING DK-Start-19
9036: PPUSH
9037: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9041: LD_EXP 21
9045: PPUSH
9046: LD_STRING DH-Start-20
9048: PPUSH
9049: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9053: LD_INT 70
9055: PPUSH
9056: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9060: LD_EXP 29
9064: PPUSH
9065: LD_STRING DShar-Start-21
9067: PPUSH
9068: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9072: LD_EXP 21
9076: PPUSH
9077: LD_STRING DH-Start-22
9079: PPUSH
9080: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9084: LD_EXP 29
9088: PPUSH
9089: LD_STRING DShar-Start-23
9091: PPUSH
9092: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9096: LD_EXP 29
9100: PPUSH
9101: LD_STRING DShar-Start-24
9103: PPUSH
9104: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9108: LD_EXP 29
9112: PPUSH
9113: LD_STRING DShar-Start-25
9115: PPUSH
9116: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9120: LD_EXP 29
9124: PPUSH
9125: LD_STRING DShar-Start-26
9127: PPUSH
9128: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9132: LD_EXP 21
9136: PPUSH
9137: LD_STRING DH-Start-27
9139: PPUSH
9140: CALL_OW 88
// if Kaia then
9144: LD_EXP 26
9148: IFFALSE 9190
// begin ComTurnUnit ( Heike , Kaia ) ;
9150: LD_EXP 21
9154: PPUSH
9155: LD_EXP 26
9159: PPUSH
9160: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9164: LD_EXP 26
9168: PPUSH
9169: LD_STRING DK-Start-28
9171: PPUSH
9172: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9176: LD_EXP 21
9180: PPUSH
9181: LD_STRING DH-Start-29
9183: PPUSH
9184: CALL_OW 88
// end else
9188: GO 9202
// Say ( Heike , DH-Start-a-28 ) ;
9190: LD_EXP 21
9194: PPUSH
9195: LD_STRING DH-Start-a-28
9197: PPUSH
9198: CALL_OW 88
// if Givi then
9202: LD_EXP 22
9206: IFFALSE 9441
// begin ComTurnUnit ( Heike , Givi ) ;
9208: LD_EXP 21
9212: PPUSH
9213: LD_EXP 22
9217: PPUSH
9218: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9222: LD_EXP 22
9226: PPUSH
9227: LD_EXP 21
9231: PPUSH
9232: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9236: LD_EXP 21
9240: PPUSH
9241: LD_STRING DH-Start-30
9243: PPUSH
9244: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9248: LD_EXP 21
9252: PPUSH
9253: LD_STRING DH-Start-31
9255: PPUSH
9256: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9260: LD_EXP 22
9264: PPUSH
9265: LD_STRING DG-Start-32
9267: PPUSH
9268: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9272: LD_EXP 21
9276: PPUSH
9277: LD_STRING DH-Start-33
9279: PPUSH
9280: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9284: LD_EXP 22
9288: PPUSH
9289: LD_STRING DG-Start-34
9291: PPUSH
9292: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9296: LD_EXP 22
9300: PPUSH
9301: LD_STRING DG-Start-35
9303: PPUSH
9304: CALL_OW 88
// if Kurt and not dialogue_skipped then
9308: LD_EXP 32
9312: PUSH
9313: LD_OWVAR 59
9317: NOT
9318: AND
9319: IFFALSE 9350
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9321: LD_EXP 32
9325: PPUSH
9326: LD_INT 28
9328: PPUSH
9329: LD_INT 13
9331: PPUSH
9332: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9336: LD_EXP 32
9340: PPUSH
9341: LD_EXP 21
9345: PPUSH
9346: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9350: LD_EXP 22
9354: PPUSH
9355: LD_STRING DG-Start-36
9357: PPUSH
9358: CALL_OW 88
// if Kurt then
9362: LD_EXP 32
9366: IFFALSE 9439
// begin if not Givi then
9368: LD_EXP 22
9372: NOT
9373: IFFALSE 9389
// Say ( Kurt , DKs-Start-37-a ) else
9375: LD_EXP 32
9379: PPUSH
9380: LD_STRING DKs-Start-37-a
9382: PPUSH
9383: CALL_OW 88
9387: GO 9401
// Say ( Kurt , DKs-Start-37 ) ;
9389: LD_EXP 32
9393: PPUSH
9394: LD_STRING DKs-Start-37
9396: PPUSH
9397: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9401: LD_EXP 32
9405: PPUSH
9406: LD_STRING DKs-Start-38
9408: PPUSH
9409: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9413: LD_EXP 21
9417: PPUSH
9418: LD_EXP 32
9422: PPUSH
9423: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9427: LD_EXP 21
9431: PPUSH
9432: LD_STRING DH-Start-39
9434: PPUSH
9435: CALL_OW 88
// end ; end else
9439: GO 9470
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9441: LD_EXP 34
9445: PPUSH
9446: LD_STRING DArm-Start-a-37
9448: PPUSH
9449: LD_STRING DArf-Start-a-37
9451: PPUSH
9452: CALL 1274 0 3
9456: IFFALSE 9470
// Say ( Heike , DH-Start-39 ) ;
9458: LD_EXP 21
9462: PPUSH
9463: LD_STRING DH-Start-39
9465: PPUSH
9466: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9470: LD_INT 44
9472: PPUSH
9473: LD_INT 25
9475: PPUSH
9476: CALL_OW 428
9480: IFFALSE 9497
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9482: LD_INT 44
9484: PPUSH
9485: LD_INT 25
9487: PPUSH
9488: CALL_OW 428
9492: PPUSH
9493: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9497: LD_EXP 30
9501: PPUSH
9502: LD_INT 5
9504: PPUSH
9505: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9509: LD_EXP 30
9513: PPUSH
9514: LD_INT 44
9516: PPUSH
9517: LD_INT 25
9519: PPUSH
9520: LD_INT 0
9522: PPUSH
9523: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9527: LD_EXP 30
9531: PPUSH
9532: LD_INT 29
9534: PPUSH
9535: LD_INT 12
9537: PPUSH
9538: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9542: LD_INT 35
9544: PPUSH
9545: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9549: LD_OWVAR 59
9553: PUSH
9554: LD_EXP 21
9558: PPUSH
9559: LD_EXP 30
9563: PPUSH
9564: CALL_OW 296
9568: PUSH
9569: LD_INT 8
9571: LESS
9572: OR
9573: PUSH
9574: LD_EXP 30
9578: PPUSH
9579: LD_INT 26
9581: PPUSH
9582: LD_INT 9
9584: PPUSH
9585: CALL_OW 297
9589: PUSH
9590: LD_INT 6
9592: LESS
9593: OR
9594: IFFALSE 9542
// Say ( Olaf , DO-Scout-1 ) ;
9596: LD_EXP 30
9600: PPUSH
9601: LD_STRING DO-Scout-1
9603: PPUSH
9604: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9608: LD_EXP 30
9612: PPUSH
9613: LD_EXP 21
9617: PPUSH
9618: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9622: LD_ADDR_VAR 0 2
9626: PUSH
9627: LD_VAR 0 6
9631: PUSH
9632: LD_EXP 34
9636: UNION
9637: PUSH
9638: FOR_IN
9639: IFFALSE 9657
// ComTurnUnit ( i , Olaf ) ;
9641: LD_VAR 0 2
9645: PPUSH
9646: LD_EXP 30
9650: PPUSH
9651: CALL_OW 119
9655: GO 9638
9657: POP
9658: POP
// wait ( 0 0$0.3 ) ;
9659: LD_INT 10
9661: PPUSH
9662: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9666: LD_EXP 21
9670: PPUSH
9671: LD_EXP 30
9675: PPUSH
9676: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9680: LD_EXP 21
9684: PPUSH
9685: LD_EXP 30
9689: PPUSH
9690: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9694: LD_EXP 21
9698: PPUSH
9699: LD_STRING DH-Scout-2
9701: PPUSH
9702: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9706: LD_EXP 30
9710: PPUSH
9711: LD_STRING DO-Scout-3
9713: PPUSH
9714: CALL_OW 88
// if Mike and Givi then
9718: LD_EXP 23
9722: PUSH
9723: LD_EXP 22
9727: AND
9728: IFFALSE 9744
// Say ( Olaf , DO-Scout-4 ) else
9730: LD_EXP 30
9734: PPUSH
9735: LD_STRING DO-Scout-4
9737: PPUSH
9738: CALL_OW 88
9742: GO 9844
// begin if Mike then
9744: LD_EXP 23
9748: IFFALSE 9776
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9750: LD_EXP 30
9754: PPUSH
9755: LD_STRING DO-Scout-a-4
9757: PPUSH
9758: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9762: LD_EXP 21
9766: PPUSH
9767: LD_STRING DH-Scout-a-5
9769: PPUSH
9770: CALL_OW 88
// end else
9774: GO 9844
// if Givi then
9776: LD_EXP 22
9780: IFFALSE 9808
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9782: LD_EXP 30
9786: PPUSH
9787: LD_STRING DO-Scout-b-4
9789: PPUSH
9790: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9794: LD_EXP 21
9798: PPUSH
9799: LD_STRING DH-Scout-b-5
9801: PPUSH
9802: CALL_OW 88
// end else
9806: GO 9844
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9808: LD_EXP 30
9812: PPUSH
9813: LD_STRING DO-Scout-f-4
9815: PPUSH
9816: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9820: LD_EXP 21
9824: PPUSH
9825: LD_STRING DH-Scout-f-5
9827: PPUSH
9828: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9832: LD_EXP 30
9836: PPUSH
9837: LD_STRING DO-Scout-f-6
9839: PPUSH
9840: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9844: LD_EXP 21
9848: PPUSH
9849: LD_STRING DH-Scout-5
9851: PPUSH
9852: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9856: LD_EXP 30
9860: PPUSH
9861: LD_STRING DO-Scout-6
9863: PPUSH
9864: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9868: LD_EXP 30
9872: PPUSH
9873: LD_STRING DO-Scout-7
9875: PPUSH
9876: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9880: LD_EXP 21
9884: PPUSH
9885: LD_STRING DH-Scout-8
9887: PPUSH
9888: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9892: LD_EXP 21
9896: PPUSH
9897: LD_STRING DH-Scout-9
9899: PPUSH
9900: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9904: LD_EXP 30
9908: PPUSH
9909: LD_STRING DO-Scout-10
9911: PPUSH
9912: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9916: LD_EXP 30
9920: PPUSH
9921: LD_STRING DO-Scout-12
9923: PPUSH
9924: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9928: LD_EXP 30
9932: PPUSH
9933: LD_STRING DO-Scout-13
9935: PPUSH
9936: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9940: LD_EXP 30
9944: PPUSH
9945: LD_STRING DO-Scout-14
9947: PPUSH
9948: CALL_OW 88
// if Givi then
9952: LD_EXP 22
9956: IFFALSE 9982
// begin Say ( Givi , DG-Scout-15 ) ;
9958: LD_EXP 22
9962: PPUSH
9963: LD_STRING DG-Scout-15
9965: PPUSH
9966: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9970: LD_EXP 26
9974: PPUSH
9975: LD_STRING DK-Scout-16
9977: PPUSH
9978: CALL_OW 88
// end ; if not dialogue_skipped then
9982: LD_OWVAR 59
9986: NOT
9987: IFFALSE 10108
// begin async ;
9989: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
9990: LD_EXP 30
9994: PPUSH
9995: LD_STRING DO-Scout-17
9997: PPUSH
9998: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10002: LD_INT 55
10004: PPUSH
10005: LD_INT 77
10007: PPUSH
10008: LD_INT 2
10010: PPUSH
10011: LD_INT 6
10013: NEG
10014: PPUSH
10015: CALL 1223 0 4
// wait ( 10 ) ;
10019: LD_INT 10
10021: PPUSH
10022: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10026: LD_INT 55
10028: PPUSH
10029: LD_INT 77
10031: PPUSH
10032: CALL_OW 84
// wait ( 0 0$10 ) ;
10036: LD_INT 350
10038: PPUSH
10039: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10043: LD_EXP 30
10047: PPUSH
10048: LD_STRING DO-Scout-18
10050: PPUSH
10051: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10055: LD_INT 204
10057: PPUSH
10058: LD_INT 107
10060: PPUSH
10061: LD_INT 2
10063: PPUSH
10064: LD_INT 12
10066: NEG
10067: PPUSH
10068: CALL 1223 0 4
// wait ( 10 ) ;
10072: LD_INT 10
10074: PPUSH
10075: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10079: LD_INT 204
10081: PPUSH
10082: LD_INT 107
10084: PPUSH
10085: CALL_OW 84
// wait ( 0 0$10 ) ;
10089: LD_INT 350
10091: PPUSH
10092: CALL_OW 67
// sync ;
10096: SYNC
// CenterNowOnUnits ( Heike ) ;
10097: LD_EXP 21
10101: PPUSH
10102: CALL_OW 87
// end else
10106: GO 10142
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10108: LD_INT 55
10110: PPUSH
10111: LD_INT 77
10113: PPUSH
10114: LD_INT 2
10116: PPUSH
10117: LD_INT 6
10119: NEG
10120: PPUSH
10121: CALL 1223 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10125: LD_INT 204
10127: PPUSH
10128: LD_INT 107
10130: PPUSH
10131: LD_INT 2
10133: PPUSH
10134: LD_INT 12
10136: NEG
10137: PPUSH
10138: CALL 1223 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10142: LD_EXP 30
10146: PPUSH
10147: LD_STRING DO-Scout-19
10149: PPUSH
10150: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10154: LD_EXP 30
10158: PPUSH
10159: LD_STRING DO-Scout-20
10161: PPUSH
10162: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10166: LD_EXP 21
10170: PPUSH
10171: LD_STRING DH-Scout-21
10173: PPUSH
10174: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10178: LD_EXP 21
10182: PPUSH
10183: LD_STRING DH-Scout-22
10185: PPUSH
10186: CALL_OW 88
// InGameOff ;
10190: CALL_OW 9
// if heikeSecondSquad then
10194: LD_EXP 34
10198: IFFALSE 10212
// ForceSleep ( heikeSecondSquad , false ) ;
10200: LD_EXP 34
10204: PPUSH
10205: LD_INT 0
10207: PPUSH
10208: CALL_OW 585
// if Givi then
10212: LD_EXP 22
10216: IFFALSE 10231
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10218: LD_INT 13
10220: PPUSH
10221: LD_INT 2
10223: PPUSH
10224: LD_INT 1
10226: PPUSH
10227: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10231: LD_STRING Road
10233: PPUSH
10234: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10238: LD_ADDR_VAR 0 2
10242: PUSH
10243: LD_INT 22
10245: PUSH
10246: LD_INT 5
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 21
10255: PUSH
10256: LD_INT 2
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PPUSH
10267: CALL_OW 69
10271: PUSH
10272: FOR_IN
10273: IFFALSE 10289
// SetSide ( i , 2 ) ;
10275: LD_VAR 0 2
10279: PPUSH
10280: LD_INT 2
10282: PPUSH
10283: CALL_OW 235
10287: GO 10272
10289: POP
10290: POP
// SaveForQuickRestart ;
10291: CALL_OW 22
// music_class := music_auto ;
10295: LD_ADDR_OWVAR 72
10299: PUSH
10300: LD_INT 0
10302: ST_TO_ADDR
// end ;
10303: LD_VAR 0 1
10307: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10308: LD_INT 2
10310: PPUSH
10311: LD_INT 9
10313: PPUSH
10314: CALL_OW 294
10318: IFFALSE 10685
10320: GO 10322
10322: DISABLE
// begin DialogueOn ;
10323: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10327: LD_INT 111
10329: PPUSH
10330: LD_INT 72
10332: PPUSH
10333: LD_INT 2
10335: PPUSH
10336: LD_INT 20
10338: NEG
10339: PPUSH
10340: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10344: LD_INT 111
10346: PPUSH
10347: LD_INT 72
10349: PPUSH
10350: LD_INT 2
10352: PPUSH
10353: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10357: LD_INT 111
10359: PPUSH
10360: LD_INT 72
10362: PPUSH
10363: CALL_OW 86
// if IsOk ( Kamil ) then
10367: LD_EXP 25
10371: PPUSH
10372: CALL_OW 302
10376: IFFALSE 10493
// begin Say ( Kamil , DKam-Cross-1 ) ;
10378: LD_EXP 25
10382: PPUSH
10383: LD_STRING DKam-Cross-1
10385: PPUSH
10386: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10390: LD_EXP 25
10394: PPUSH
10395: LD_STRING DKam-Cross-2
10397: PPUSH
10398: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10402: LD_EXP 25
10406: PPUSH
10407: LD_STRING DKam-Cross-3
10409: PPUSH
10410: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10414: LD_EXP 25
10418: PPUSH
10419: LD_STRING DKam-Cross-4
10421: PPUSH
10422: CALL_OW 88
// if IsOk ( Ibrahim ) then
10426: LD_EXP 24
10430: PPUSH
10431: CALL_OW 302
10435: IFFALSE 10491
// begin if ibrahimJoinedIn04 then
10437: LD_EXP 4
10441: IFFALSE 10455
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10443: LD_EXP 24
10447: PPUSH
10448: LD_STRING DI-Cross-b-5
10450: PPUSH
10451: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10455: LD_EXP 24
10459: PPUSH
10460: LD_STRING DI-Cross-b-6
10462: PPUSH
10463: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10467: LD_EXP 24
10471: PPUSH
10472: LD_STRING DI-Cross-b-7
10474: PPUSH
10475: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10479: LD_EXP 25
10483: PPUSH
10484: LD_STRING DKam-Cross-8
10486: PPUSH
10487: CALL_OW 88
// end ; end else
10491: GO 10651
// if IsOk ( Sophia ) then
10493: LD_EXP 27
10497: PPUSH
10498: CALL_OW 302
10502: IFFALSE 10619
// begin Say ( Sophia , DS-Cross-1 ) ;
10504: LD_EXP 27
10508: PPUSH
10509: LD_STRING DS-Cross-1
10511: PPUSH
10512: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10516: LD_EXP 27
10520: PPUSH
10521: LD_STRING DS-Cross-2
10523: PPUSH
10524: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10528: LD_EXP 27
10532: PPUSH
10533: LD_STRING DS-Cross-3
10535: PPUSH
10536: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10540: LD_EXP 27
10544: PPUSH
10545: LD_STRING DS-Cross-4
10547: PPUSH
10548: CALL_OW 88
// if IsOk ( Ibrahim ) then
10552: LD_EXP 24
10556: PPUSH
10557: CALL_OW 302
10561: IFFALSE 10617
// begin if ibrahimJoinedIn04 then
10563: LD_EXP 4
10567: IFFALSE 10581
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10569: LD_EXP 24
10573: PPUSH
10574: LD_STRING DI-Cross-b-5
10576: PPUSH
10577: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10581: LD_EXP 24
10585: PPUSH
10586: LD_STRING DI-Cross-b-6
10588: PPUSH
10589: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10593: LD_EXP 24
10597: PPUSH
10598: LD_STRING DI-Cross-b-7
10600: PPUSH
10601: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10605: LD_EXP 27
10609: PPUSH
10610: LD_STRING DS-Cross-8
10612: PPUSH
10613: CALL_OW 88
// end ; end else
10617: GO 10651
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10619: LD_EXP 34
10623: PPUSH
10624: LD_INT 50
10626: PUSH
10627: EMPTY
10628: LIST
10629: PPUSH
10630: CALL_OW 72
10634: IFFALSE 10651
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10636: LD_EXP 34
10640: PPUSH
10641: LD_STRING DArm-Cross-c-1
10643: PPUSH
10644: LD_STRING DArf-Cross-c-1
10646: PPUSH
10647: CALL 1274 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10651: LD_EXP 57
10655: PPUSH
10656: LD_INT 2
10658: PPUSH
10659: LD_INT 1
10661: PPUSH
10662: CALL_OW 322
// DialogueOff ;
10666: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10670: LD_STRING Crane
10672: PPUSH
10673: CALL_OW 337
// spottedCrossRoad := true ;
10677: LD_ADDR_EXP 8
10681: PUSH
10682: LD_INT 1
10684: ST_TO_ADDR
// end ;
10685: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10686: LD_INT 22
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 2
10698: PUSH
10699: LD_INT 30
10701: PUSH
10702: LD_INT 0
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: LD_INT 30
10711: PUSH
10712: LD_INT 1
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: LIST
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PPUSH
10728: CALL_OW 69
10732: PUSH
10733: LD_EXP 26
10737: PPUSH
10738: CALL_OW 302
10742: PUSH
10743: LD_EXP 34
10747: OR
10748: AND
10749: IFFALSE 10961
10751: GO 10753
10753: DISABLE
// begin DialogueOn ;
10754: CALL_OW 6
// if Kaia then
10758: LD_EXP 26
10762: IFFALSE 10775
// CenterNowOnUnits ( Kaia ) else
10764: LD_EXP 26
10768: PPUSH
10769: CALL_OW 87
10773: GO 10784
// CenterNowOnUnits ( Heike ) ;
10775: LD_EXP 21
10779: PPUSH
10780: CALL_OW 87
// if IsOk ( Kaia ) then
10784: LD_EXP 26
10788: PPUSH
10789: CALL_OW 302
10793: IFFALSE 10809
// Say ( Kaia , DK-Cam-1 ) else
10795: LD_EXP 26
10799: PPUSH
10800: LD_STRING DK-Cam-1
10802: PPUSH
10803: CALL_OW 88
10807: GO 10824
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10809: LD_EXP 34
10813: PPUSH
10814: LD_STRING DArm-Cam-1
10816: PPUSH
10817: LD_STRING DArf-Cam-1
10819: PPUSH
10820: CALL 1274 0 3
// Say ( Heike , DH-Cam-2 ) ;
10824: LD_EXP 21
10828: PPUSH
10829: LD_STRING DH-Cam-2
10831: PPUSH
10832: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10836: LD_EXP 21
10840: PPUSH
10841: LD_STRING DH-Cam-3
10843: PPUSH
10844: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10848: LD_EXP 21
10852: PPUSH
10853: LD_STRING DH-Cam-4
10855: PPUSH
10856: CALL_OW 88
// if IsOk ( Kaia ) then
10860: LD_EXP 26
10864: PPUSH
10865: CALL_OW 302
10869: IFFALSE 10885
// Say ( Kaia , DK-Cam-5 ) else
10871: LD_EXP 26
10875: PPUSH
10876: LD_STRING DK-Cam-5
10878: PPUSH
10879: CALL_OW 88
10883: GO 10900
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10885: LD_EXP 34
10889: PPUSH
10890: LD_STRING DArm-Cam-5
10892: PPUSH
10893: LD_STRING DArf-Cam-5
10895: PPUSH
10896: CALL 1274 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10900: LD_EXP 30
10904: PPUSH
10905: LD_STRING DO-Cam-6
10907: PPUSH
10908: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10912: LD_EXP 30
10916: PPUSH
10917: LD_STRING DO-Cam-7
10919: PPUSH
10920: CALL_OW 88
// DialogueOff ;
10924: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10928: LD_STRING Radar
10930: PPUSH
10931: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10935: LD_INT 6
10937: PPUSH
10938: LD_INT 2
10940: PPUSH
10941: LD_INT 1
10943: PPUSH
10944: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10948: LD_INT 20
10950: PPUSH
10951: LD_INT 2
10953: PPUSH
10954: LD_INT 1
10956: PPUSH
10957: CALL_OW 324
// end ;
10961: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10962: LD_INT 22
10964: PUSH
10965: LD_INT 2
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PUSH
10972: LD_INT 2
10974: PUSH
10975: LD_INT 34
10977: PUSH
10978: LD_INT 30
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 35
10987: PUSH
10988: LD_INT 30
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: LIST
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PPUSH
11004: CALL_OW 69
11008: IFFALSE 11020
11010: GO 11012
11012: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11013: LD_STRING RadarDone
11015: PPUSH
11016: CALL_OW 337
11020: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11021: LD_INT 22
11023: PUSH
11024: LD_INT 2
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 34
11033: PUSH
11034: LD_EXP 50
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PPUSH
11047: CALL_OW 69
11051: IFFALSE 11063
11053: GO 11055
11055: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11056: LD_STRING CraneDone
11058: PPUSH
11059: CALL_OW 337
11063: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11064: LD_EXP 30
11068: PPUSH
11069: CALL_OW 302
11073: PUSH
11074: LD_EXP 33
11078: PPUSH
11079: CALL_OW 302
11083: AND
11084: PUSH
11085: LD_INT 6
11087: PPUSH
11088: LD_INT 2
11090: PPUSH
11091: CALL_OW 321
11095: PUSH
11096: LD_INT 2
11098: EQUAL
11099: AND
11100: PUSH
11101: LD_EXP 33
11105: PPUSH
11106: LD_EXP 21
11110: PPUSH
11111: CALL_OW 296
11115: PUSH
11116: LD_INT 10
11118: LESS
11119: PUSH
11120: LD_EXP 33
11124: PPUSH
11125: CALL_OW 310
11129: OR
11130: AND
11131: IFFALSE 11345
11133: GO 11135
11135: DISABLE
// begin DialogueOn ;
11136: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11140: LD_EXP 33
11144: PPUSH
11145: LD_STRING DA-RC-1
11147: PPUSH
11148: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11152: LD_EXP 33
11156: PPUSH
11157: LD_STRING DA-RC-2
11159: PPUSH
11160: CALL_OW 88
// if IsOk ( Kaia ) then
11164: LD_EXP 26
11168: PPUSH
11169: CALL_OW 302
11173: IFFALSE 11247
// begin Say ( Kaia , DK-RC-3 ) ;
11175: LD_EXP 26
11179: PPUSH
11180: LD_STRING DK-RC-3
11182: PPUSH
11183: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11187: LD_EXP 33
11191: PPUSH
11192: LD_STRING DA-RC-4
11194: PPUSH
11195: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11199: LD_EXP 26
11203: PPUSH
11204: LD_STRING DK-RC-5
11206: PPUSH
11207: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11211: LD_EXP 33
11215: PPUSH
11216: LD_STRING DA-RC-6
11218: PPUSH
11219: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11223: LD_EXP 26
11227: PPUSH
11228: LD_STRING DK-RC-7
11230: PPUSH
11231: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11235: LD_EXP 33
11239: PPUSH
11240: LD_STRING DA-RC-8
11242: PPUSH
11243: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11247: LD_EXP 21
11251: PPUSH
11252: LD_STRING DH-RC-9
11254: PPUSH
11255: CALL_OW 88
// if IsOk ( Markov ) then
11259: LD_EXP 28
11263: PPUSH
11264: CALL_OW 302
11268: IFFALSE 11296
// begin Say ( Markov , DMar-RC-10 ) ;
11270: LD_EXP 28
11274: PPUSH
11275: LD_STRING DMar-RC-10
11277: PPUSH
11278: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11282: LD_EXP 28
11286: PPUSH
11287: LD_STRING DMar-RC-11
11289: PPUSH
11290: CALL_OW 88
// end else
11294: GO 11308
// begin Say ( Olaf , DO-RC-a-10 ) ;
11296: LD_EXP 30
11300: PPUSH
11301: LD_STRING DO-RC-a-10
11303: PPUSH
11304: CALL_OW 88
// end ; DialogueOff ;
11308: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11312: LD_STRING RemoteControl
11314: PPUSH
11315: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11319: LD_INT 15
11321: PPUSH
11322: LD_INT 2
11324: PPUSH
11325: LD_INT 1
11327: PPUSH
11328: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11332: LD_INT 22
11334: PPUSH
11335: LD_INT 2
11337: PPUSH
11338: LD_INT 1
11340: PPUSH
11341: CALL_OW 324
// end ;
11345: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11346: LD_INT 12
11348: PPUSH
11349: LD_INT 22
11351: PUSH
11352: LD_INT 2
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PPUSH
11359: CALL_OW 70
11363: IFFALSE 11730
11365: GO 11367
11367: DISABLE
11368: LD_INT 0
11370: PPUSH
// begin PrepareWestBase ;
11371: CALL 3992 0 0
// westBaseSpotted := true ;
11375: LD_ADDR_EXP 5
11379: PUSH
11380: LD_INT 1
11382: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11383: LD_INT 70
11385: PPUSH
11386: CALL_OW 67
// InGameOn ;
11390: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11394: LD_INT 56
11396: PPUSH
11397: LD_INT 77
11399: PPUSH
11400: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11404: LD_INT 56
11406: PPUSH
11407: LD_INT 77
11409: PPUSH
11410: LD_INT 2
11412: PPUSH
11413: LD_INT 12
11415: NEG
11416: PPUSH
11417: CALL_OW 330
// wait ( 0 0$2 ) ;
11421: LD_INT 70
11423: PPUSH
11424: CALL_OW 67
// DialogueOn ;
11428: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11432: LD_EXP 21
11436: PPUSH
11437: LD_STRING DH-Rbase-1
11439: PPUSH
11440: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11444: LD_EXP 26
11448: PPUSH
11449: LD_STRING DK-Rbase-2
11451: PPUSH
11452: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11456: LD_EXP 26
11460: PPUSH
11461: LD_STRING DK-Rbase-3
11463: PPUSH
11464: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11468: LD_EXP 26
11472: PPUSH
11473: LD_STRING DK-Rbase-4
11475: PPUSH
11476: CALL_OW 88
// DialogueOff ;
11480: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11484: LD_INT 56
11486: PPUSH
11487: LD_INT 77
11489: PPUSH
11490: LD_INT 2
11492: PPUSH
11493: CALL_OW 331
// InGameOff ;
11497: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11501: LD_INT 35
11503: PPUSH
11504: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11508: LD_EXP 42
11512: NOT
11513: PUSH
11514: LD_EXP 43
11518: NOT
11519: AND
11520: IFFALSE 11501
// wait ( 0 0$2 ) ;
11522: LD_INT 70
11524: PPUSH
11525: CALL_OW 67
// if IsOk ( Kaia ) then
11529: LD_EXP 26
11533: PPUSH
11534: CALL_OW 302
11538: IFFALSE 11653
// begin DialogueOn ;
11540: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11544: LD_INT 56
11546: PPUSH
11547: LD_INT 81
11549: PPUSH
11550: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11554: LD_EXP 26
11558: PPUSH
11559: LD_STRING DK-Rbase-5
11561: PPUSH
11562: CALL_OW 88
// if IsOk ( Givi ) then
11566: LD_EXP 22
11570: PPUSH
11571: CALL_OW 302
11575: IFFALSE 11649
// begin Say ( Givi , DG-Rbase-6 ) ;
11577: LD_EXP 22
11581: PPUSH
11582: LD_STRING DG-Rbase-6
11584: PPUSH
11585: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11589: LD_EXP 22
11593: PPUSH
11594: LD_STRING DG-Rbase-7
11596: PPUSH
11597: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11601: LD_EXP 26
11605: PPUSH
11606: LD_STRING DK-Rbase-8
11608: PPUSH
11609: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11613: LD_EXP 22
11617: PPUSH
11618: LD_STRING DG-Rbase-9
11620: PPUSH
11621: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11625: LD_EXP 22
11629: PPUSH
11630: LD_STRING DG-Rbase-10
11632: PPUSH
11633: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11637: LD_EXP 26
11641: PPUSH
11642: LD_STRING DK-Rbase-11
11644: PPUSH
11645: CALL_OW 88
// end ; DialogueOff ;
11649: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11653: LD_ADDR_VAR 0 1
11657: PUSH
11658: LD_INT 12
11660: PPUSH
11661: LD_INT 22
11663: PUSH
11664: LD_INT 3
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 21
11673: PUSH
11674: LD_INT 3
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PPUSH
11685: CALL_OW 70
11689: PUSH
11690: FOR_IN
11691: IFFALSE 11707
// SetSide ( i , 2 ) ;
11693: LD_VAR 0 1
11697: PPUSH
11698: LD_INT 2
11700: PPUSH
11701: CALL_OW 235
11705: GO 11690
11707: POP
11708: POP
// westBaseCaptured := true ;
11709: LD_ADDR_EXP 9
11713: PUSH
11714: LD_INT 1
11716: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11717: LD_INT 0
11719: PPUSH
11720: LD_INT 2
11722: PPUSH
11723: LD_INT 1
11725: PPUSH
11726: CALL_OW 324
// end ;
11730: PPOPN 1
11732: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11733: LD_EXP 38
11737: NOT
11738: PUSH
11739: LD_INT 10
11741: PPUSH
11742: CALL_OW 255
11746: PUSH
11747: LD_INT 2
11749: EQUAL
11750: OR
11751: IFFALSE 11888
11753: GO 11755
11755: DISABLE
// begin DialogueOn ;
11756: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11760: LD_EXP 21
11764: PPUSH
11765: LD_STRING DH-Goal-1
11767: PPUSH
11768: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11772: LD_EXP 29
11776: PPUSH
11777: LD_STRING DShar-Goal-2
11779: PPUSH
11780: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11784: LD_EXP 21
11788: PPUSH
11789: LD_STRING DH-Goal-3
11791: PPUSH
11792: CALL_OW 88
// if reinforcementsAllowed then
11796: LD_EXP 14
11800: IFFALSE 11826
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11802: LD_EXP 29
11806: PPUSH
11807: LD_STRING DShar-Goal-4
11809: PPUSH
11810: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11814: LD_EXP 21
11818: PPUSH
11819: LD_STRING DH-Goal-5
11821: PPUSH
11822: CALL_OW 88
// end ; DialogueOff ;
11826: CALL_OW 7
// eastBaseCaptured := true ;
11830: LD_ADDR_EXP 10
11834: PUSH
11835: LD_INT 1
11837: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11838: LD_STRING BaseCaptured
11840: PPUSH
11841: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11845: LD_INT 10
11847: PPUSH
11848: LD_INT 2
11850: PPUSH
11851: CALL_OW 235
// if not reinforcementsAllowed then
11855: LD_EXP 14
11859: NOT
11860: IFFALSE 11864
// exit ;
11862: GO 11888
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11864: LD_INT 21000
11866: PUSH
11867: LD_INT 1050
11869: NEG
11870: PPUSH
11871: LD_INT 1050
11873: PPUSH
11874: CALL_OW 12
11878: PLUS
11879: PPUSH
11880: CALL_OW 67
// PrepareReinforcements ;
11884: CALL 2250 0 0
// end ;
11888: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11889: LD_INT 22
11891: PUSH
11892: LD_INT 2
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 30
11901: PUSH
11902: LD_INT 13
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PPUSH
11913: CALL_OW 69
11917: IFFALSE 11934
11919: GO 11921
11921: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11922: LD_EXP 22
11926: PPUSH
11927: LD_STRING DG-Lab-1
11929: PPUSH
11930: CALL_OW 88
// end ;
11934: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11935: LD_INT 5
11937: PPUSH
11938: LD_INT 2
11940: PPUSH
11941: CALL_OW 321
11945: PUSH
11946: LD_INT 2
11948: EQUAL
11949: PUSH
11950: LD_EXP 22
11954: PPUSH
11955: CALL_OW 302
11959: AND
11960: IFFALSE 12021
11962: GO 11964
11964: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11965: LD_EXP 22
11969: PPUSH
11970: LD_STRING DG-Stim-1
11972: PPUSH
11973: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11977: LD_EXP 21
11981: PPUSH
11982: LD_STRING DH-Stim-2
11984: PPUSH
11985: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11989: LD_EXP 22
11993: PPUSH
11994: LD_STRING DG-Stim-3
11996: PPUSH
11997: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12001: LD_EXP 21
12005: PPUSH
12006: LD_STRING DH-Stim-4
12008: PPUSH
12009: CALL_OW 88
// drugsResearched := true ;
12013: LD_ADDR_EXP 11
12017: PUSH
12018: LD_INT 1
12020: ST_TO_ADDR
// end ;
12021: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12022: LD_EXP 11
12026: IFFALSE 12338
12028: GO 12030
12030: DISABLE
12031: LD_INT 0
12033: PPUSH
12034: PPUSH
12035: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12036: LD_ADDR_VAR 0 2
12040: PUSH
12041: LD_EXP 21
12045: PUSH
12046: LD_EXP 22
12050: PUSH
12051: LD_EXP 30
12055: PUSH
12056: LD_EXP 28
12060: PUSH
12061: LD_EXP 26
12065: PUSH
12066: LD_EXP 27
12070: PUSH
12071: LD_EXP 32
12075: PUSH
12076: LD_EXP 25
12080: PUSH
12081: LD_EXP 23
12085: PUSH
12086: LD_EXP 24
12090: PUSH
12091: LD_EXP 33
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12109: LD_ADDR_VAR 0 3
12113: PUSH
12114: LD_STRING H
12116: PUSH
12117: LD_STRING G
12119: PUSH
12120: LD_STRING O
12122: PUSH
12123: LD_STRING Mar
12125: PUSH
12126: LD_STRING K
12128: PUSH
12129: LD_STRING S
12131: PUSH
12132: LD_STRING Ks
12134: PUSH
12135: LD_STRING Kam
12137: PUSH
12138: LD_STRING M
12140: PUSH
12141: LD_STRING I
12143: PUSH
12144: LD_STRING A
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12160: LD_INT 35
12162: PPUSH
12163: CALL_OW 67
// for i := tmp downto 1 do
12167: LD_ADDR_VAR 0 1
12171: PUSH
12172: DOUBLE
12173: LD_VAR 0 2
12177: INC
12178: ST_TO_ADDR
12179: LD_INT 1
12181: PUSH
12182: FOR_DOWNTO
12183: IFFALSE 12329
// if GetLives ( tmp [ i ] ) < 250 then
12185: LD_VAR 0 2
12189: PUSH
12190: LD_VAR 0 1
12194: ARRAY
12195: PPUSH
12196: CALL_OW 256
12200: PUSH
12201: LD_INT 250
12203: LESS
12204: IFFALSE 12327
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12206: LD_ADDR_EXP 19
12210: PUSH
12211: LD_EXP 19
12215: PUSH
12216: LD_INT 1
12218: PLUS
12219: ST_TO_ADDR
// DialogueOn ;
12220: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12224: LD_VAR 0 2
12228: PUSH
12229: LD_VAR 0 1
12233: ARRAY
12234: PPUSH
12235: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12239: LD_VAR 0 2
12243: PUSH
12244: LD_VAR 0 1
12248: ARRAY
12249: PPUSH
12250: LD_STRING D
12252: PUSH
12253: LD_VAR 0 3
12257: PUSH
12258: LD_VAR 0 1
12262: ARRAY
12263: STR
12264: PUSH
12265: LD_STRING -Stim-a-1
12267: STR
12268: PPUSH
12269: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12273: LD_ADDR_VAR 0 2
12277: PUSH
12278: LD_VAR 0 2
12282: PPUSH
12283: LD_VAR 0 1
12287: PPUSH
12288: CALL_OW 3
12292: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12293: LD_ADDR_VAR 0 3
12297: PUSH
12298: LD_VAR 0 3
12302: PPUSH
12303: LD_VAR 0 1
12307: PPUSH
12308: CALL_OW 3
12312: ST_TO_ADDR
// drugsTested := true ;
12313: LD_ADDR_EXP 6
12317: PUSH
12318: LD_INT 1
12320: ST_TO_ADDR
// DialogueOff ;
12321: CALL_OW 7
// break ;
12325: GO 12329
// end ;
12327: GO 12182
12329: POP
12330: POP
// until not tmp ;
12331: LD_VAR 0 2
12335: NOT
12336: IFFALSE 12160
// end ;
12338: PPOPN 3
12340: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12341: LD_INT 22
12343: PUSH
12344: LD_INT 2
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 34
12353: PUSH
12354: LD_INT 31
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PPUSH
12365: CALL_OW 69
12369: PUSH
12370: LD_INT 22
12372: PUSH
12373: LD_INT 2
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: LD_INT 33
12382: PUSH
12383: LD_INT 2
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PPUSH
12394: CALL_OW 69
12398: AND
12399: IFFALSE 12412
12401: GO 12403
12403: DISABLE
// remoteControlConstructed := true ;
12404: LD_ADDR_EXP 12
12408: PUSH
12409: LD_INT 1
12411: ST_TO_ADDR
12412: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12413: LD_EXP 12
12417: IFFALSE 12717
12419: GO 12421
12421: DISABLE
12422: LD_INT 0
12424: PPUSH
12425: PPUSH
12426: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12427: LD_ADDR_VAR 0 2
12431: PUSH
12432: LD_EXP 21
12436: PUSH
12437: LD_EXP 22
12441: PUSH
12442: LD_EXP 30
12446: PUSH
12447: LD_EXP 28
12451: PUSH
12452: LD_EXP 26
12456: PUSH
12457: LD_EXP 27
12461: PUSH
12462: LD_EXP 32
12466: PUSH
12467: LD_EXP 25
12471: PUSH
12472: LD_EXP 23
12476: PUSH
12477: LD_EXP 24
12481: PUSH
12482: LD_EXP 33
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12500: LD_ADDR_VAR 0 3
12504: PUSH
12505: LD_STRING H
12507: PUSH
12508: LD_STRING G
12510: PUSH
12511: LD_STRING O
12513: PUSH
12514: LD_STRING Mar
12516: PUSH
12517: LD_STRING K
12519: PUSH
12520: LD_STRING S
12522: PUSH
12523: LD_STRING Ks
12525: PUSH
12526: LD_STRING Kam
12528: PUSH
12529: LD_STRING M
12531: PUSH
12532: LD_STRING I
12534: PUSH
12535: LD_STRING A
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12551: LD_INT 35
12553: PPUSH
12554: CALL_OW 67
// for i := tmp downto 1 do
12558: LD_ADDR_VAR 0 1
12562: PUSH
12563: DOUBLE
12564: LD_VAR 0 2
12568: INC
12569: ST_TO_ADDR
12570: LD_INT 1
12572: PUSH
12573: FOR_DOWNTO
12574: IFFALSE 12708
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12576: LD_VAR 0 2
12580: PUSH
12581: LD_VAR 0 1
12585: ARRAY
12586: PPUSH
12587: CALL_OW 257
12591: PUSH
12592: LD_INT 3
12594: EQUAL
12595: PUSH
12596: LD_VAR 0 2
12600: PUSH
12601: LD_VAR 0 1
12605: ARRAY
12606: PPUSH
12607: CALL_OW 432
12611: AND
12612: IFFALSE 12706
// begin DialogueOn ;
12614: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12618: LD_VAR 0 2
12622: PUSH
12623: LD_VAR 0 1
12627: ARRAY
12628: PPUSH
12629: LD_STRING D
12631: PUSH
12632: LD_VAR 0 3
12636: PUSH
12637: LD_VAR 0 1
12641: ARRAY
12642: STR
12643: PUSH
12644: LD_STRING -RC-a-1
12646: STR
12647: PPUSH
12648: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12652: LD_ADDR_VAR 0 2
12656: PUSH
12657: LD_VAR 0 2
12661: PPUSH
12662: LD_VAR 0 1
12666: PPUSH
12667: CALL_OW 3
12671: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12672: LD_ADDR_VAR 0 3
12676: PUSH
12677: LD_VAR 0 3
12681: PPUSH
12682: LD_VAR 0 1
12686: PPUSH
12687: CALL_OW 3
12691: ST_TO_ADDR
// DialogueOff ;
12692: CALL_OW 7
// remoteControlTested := true ;
12696: LD_ADDR_EXP 7
12700: PUSH
12701: LD_INT 1
12703: ST_TO_ADDR
// break ;
12704: GO 12708
// end ;
12706: GO 12573
12708: POP
12709: POP
// until not tmp ;
12710: LD_VAR 0 2
12714: NOT
12715: IFFALSE 12551
// end ;
12717: PPOPN 3
12719: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12720: LD_EXP 7
12724: PUSH
12725: LD_EXP 28
12729: PPUSH
12730: CALL_OW 302
12734: AND
12735: IFFALSE 12764
12737: GO 12739
12739: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12740: LD_EXP 28
12744: PPUSH
12745: LD_STRING DMar-RC-a-2
12747: PPUSH
12748: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12752: LD_EXP 28
12756: PPUSH
12757: LD_STRING DMar-RC-a-3
12759: PPUSH
12760: CALL_OW 88
// end ;
12764: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12765: LD_EXP 14
12769: PUSH
12770: LD_EXP 21
12774: PPUSH
12775: LD_EXP 33
12779: PPUSH
12780: CALL_OW 296
12784: PUSH
12785: LD_INT 8
12787: LESS
12788: AND
12789: PUSH
12790: LD_INT 2
12792: PPUSH
12793: CALL_OW 463
12797: NOT
12798: AND
12799: PUSH
12800: LD_EXP 33
12804: PPUSH
12805: CALL_OW 302
12809: AND
12810: PUSH
12811: LD_EXP 21
12815: PPUSH
12816: CALL_OW 302
12820: AND
12821: IFFALSE 12999
12823: GO 12825
12825: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12826: LD_EXP 33
12830: PPUSH
12831: CALL_OW 310
12835: NOT
12836: IFFALSE 12852
// ComTurnUnit ( Aviradze , Heike ) ;
12838: LD_EXP 33
12842: PPUSH
12843: LD_EXP 21
12847: PPUSH
12848: CALL_OW 119
// if not IsInUnit ( Heike ) then
12852: LD_EXP 21
12856: PPUSH
12857: CALL_OW 310
12861: NOT
12862: IFFALSE 12878
// ComTurnUnit ( Heike , Aviradze ) ;
12864: LD_EXP 21
12868: PPUSH
12869: LD_EXP 33
12873: PPUSH
12874: CALL_OW 119
// wait ( 0 0$1 ) ;
12878: LD_INT 35
12880: PPUSH
12881: CALL_OW 67
// DialogueOn ;
12885: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12889: LD_EXP 33
12893: PPUSH
12894: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12898: LD_EXP 21
12902: PPUSH
12903: LD_STRING DH-Beria-1
12905: PPUSH
12906: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12910: LD_EXP 33
12914: PPUSH
12915: LD_STRING DA-Beria-2
12917: PPUSH
12918: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12922: LD_EXP 21
12926: PPUSH
12927: LD_STRING DH-Beria-3
12929: PPUSH
12930: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12934: LD_EXP 33
12938: PPUSH
12939: LD_STRING DA-Beria-4
12941: PPUSH
12942: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12946: LD_EXP 33
12950: PPUSH
12951: LD_STRING DA-Beria-5
12953: PPUSH
12954: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12958: LD_EXP 33
12962: PPUSH
12963: LD_STRING DA-Beria-6
12965: PPUSH
12966: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12970: LD_EXP 21
12974: PPUSH
12975: LD_STRING DA-Beria-7
12977: PPUSH
12978: CALL_OW 88
// DialogueOff ;
12982: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12986: LD_INT 52
12988: PPUSH
12989: LD_INT 2
12991: PPUSH
12992: LD_INT 1
12994: PPUSH
12995: CALL_OW 322
// end ;
12999: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13000: LD_EXP 26
13004: PPUSH
13005: CALL_OW 300
13009: PUSH
13010: LD_EXP 26
13014: PPUSH
13015: CALL_OW 256
13019: PUSH
13020: LD_INT 10
13022: LESS
13023: AND
13024: IFFALSE 13061
13026: GO 13028
13028: DISABLE
// begin DialogueOn ;
13029: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13033: LD_EXP 26
13037: PPUSH
13038: LD_STRING DK-Kdeath-1
13040: PPUSH
13041: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13045: LD_EXP 21
13049: PPUSH
13050: LD_STRING DH-Kdeath-2
13052: PPUSH
13053: CALL_OW 88
// DialogueOff ;
13057: CALL_OW 7
// end ;
13061: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13062: LD_INT 2
13064: PPUSH
13065: LD_EXP 39
13069: PPUSH
13070: CALL 1374 0 2
13074: IFFALSE 13091
13076: GO 13078
13078: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13079: LD_EXP 21
13083: PPUSH
13084: LD_STRING DH-Obj-1
13086: PPUSH
13087: CALL_OW 88
13091: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13092: LD_INT 2
13094: PPUSH
13095: LD_EXP 40
13099: PPUSH
13100: CALL 1374 0 2
13104: IFFALSE 13121
13106: GO 13108
13108: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13109: LD_EXP 21
13113: PPUSH
13114: LD_STRING DH-Obj-a-1
13116: PPUSH
13117: CALL_OW 88
13121: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 , 5 5$30 ] [ Difficulty ] do
13122: LD_EXP 10
13126: PUSH
13127: LD_OWVAR 1
13131: PUSH
13132: LD_INT 14700
13134: PUSH
13135: LD_INT 13650
13137: PUSH
13138: LD_INT 12600
13140: PUSH
13141: LD_INT 11550
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: PUSH
13150: LD_OWVAR 67
13154: ARRAY
13155: GREATEREQUAL
13156: OR
13157: IFFALSE 13185
13159: GO 13161
13161: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
13162: LD_INT 4200
13164: PPUSH
13165: LD_INT 5250
13167: PPUSH
13168: CALL_OW 12
13172: PPUSH
13173: CALL_OW 67
// convoyStarted := true ;
13177: LD_ADDR_EXP 17
13181: PUSH
13182: LD_INT 1
13184: ST_TO_ADDR
// end ;
13185: END
// every 0 0$1 trigger convoyStarted do
13186: LD_EXP 17
13190: IFFALSE 13274
13192: GO 13194
13194: DISABLE
// begin DialogueOn ;
13195: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13199: LD_EXP 29
13203: PPUSH
13204: LD_STRING DShar-Convoy-1
13206: PPUSH
13207: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13211: LD_EXP 21
13215: PPUSH
13216: LD_STRING DH-Convoy-2
13218: PPUSH
13219: CALL_OW 88
// DialogueOff ;
13223: CALL_OW 7
// PrepareConvoy ;
13227: CALL 4639 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13231: LD_INT 5250
13233: PPUSH
13234: LD_INT 11550
13236: PPUSH
13237: CALL_OW 12
13241: PPUSH
13242: CALL_OW 67
// PrepareConvoy ;
13246: CALL 4639 0 0
// convoyCounter := convoyCounter - 1 ;
13250: LD_ADDR_EXP 16
13254: PUSH
13255: LD_EXP 16
13259: PUSH
13260: LD_INT 1
13262: MINUS
13263: ST_TO_ADDR
// until convoyCounter <= 0 ;
13264: LD_EXP 16
13268: PUSH
13269: LD_INT 0
13271: LESSEQUAL
13272: IFFALSE 13231
// end ;
13274: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13275: LD_EXP 15
13279: PUSH
13280: LD_INT 10
13282: GREATEREQUAL
13283: IFFALSE 13300
13285: GO 13287
13287: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13288: LD_EXP 31
13292: PPUSH
13293: LD_STRING DOm-Fail-1
13295: PPUSH
13296: CALL_OW 94
13300: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13301: LD_EXP 39
13305: NOT
13306: PUSH
13307: LD_EXP 40
13311: NOT
13312: AND
13313: IFFALSE 13325
13315: GO 13317
13317: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13318: LD_STRING RaiderDone
13320: PPUSH
13321: CALL_OW 337
13325: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13326: LD_INT 22
13328: PUSH
13329: LD_INT 2
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: LD_INT 33
13338: PUSH
13339: LD_INT 2
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PPUSH
13350: CALL_OW 69
13354: PUSH
13355: LD_INT 3
13357: GREATEREQUAL
13358: PUSH
13359: LD_INT 22
13361: PUSH
13362: LD_INT 2
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 34
13371: PUSH
13372: LD_INT 31
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PPUSH
13383: CALL_OW 69
13387: PUSH
13388: LD_INT 2
13390: GREATEREQUAL
13391: AND
13392: IFFALSE 13404
13394: GO 13396
13396: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13397: LD_STRING RemoteControlDone
13399: PPUSH
13400: CALL_OW 337
13404: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var tmp ;
13405: LD_EXP 16
13409: PUSH
13410: LD_INT 1
13412: LESS
13413: PUSH
13414: LD_EXP 41
13418: PPUSH
13419: LD_INT 52
13421: PUSH
13422: EMPTY
13423: LIST
13424: PUSH
13425: LD_INT 21
13427: PUSH
13428: LD_INT 1
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PPUSH
13439: CALL_OW 72
13443: NOT
13444: AND
13445: PUSH
13446: LD_OWVAR 1
13450: PUSH
13451: LD_INT 126000
13453: GREATEREQUAL
13454: OR
13455: IFFALSE 14276
13457: GO 13459
13459: DISABLE
13460: LD_INT 0
13462: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13463: LD_STRING ReinforcementsDone
13465: PPUSH
13466: CALL_OW 337
// music_class := music_victory ;
13470: LD_ADDR_OWVAR 72
13474: PUSH
13475: LD_INT 4
13477: ST_TO_ADDR
// InGameOn ;
13478: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13482: LD_EXP 21
13486: PPUSH
13487: LD_STRING DH-end-1
13489: PPUSH
13490: CALL_OW 88
// wait ( 0 0$2 ) ;
13494: LD_INT 70
13496: PPUSH
13497: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13501: LD_EXP 29
13505: PPUSH
13506: LD_STRING DShar-end-2
13508: PPUSH
13509: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13513: LD_EXP 39
13517: NOT
13518: PUSH
13519: LD_EXP 40
13523: NOT
13524: AND
13525: IFFALSE 13541
// begin Say ( Heike , DH-end-3 ) ;
13527: LD_EXP 21
13531: PPUSH
13532: LD_STRING DH-end-3
13534: PPUSH
13535: CALL_OW 88
// end else
13539: GO 13638
// begin Say ( Heike , DH-end-a-3 ) ;
13541: LD_EXP 21
13545: PPUSH
13546: LD_STRING DH-end-a-3
13548: PPUSH
13549: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13553: LD_EXP 29
13557: PPUSH
13558: LD_STRING DShar-end-a-4
13560: PPUSH
13561: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13565: LD_EXP 21
13569: PPUSH
13570: LD_STRING DH-end-a-5
13572: PPUSH
13573: CALL_OW 88
// InGameOff ;
13577: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13581: LD_INT 35
13583: PPUSH
13584: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13588: LD_INT 22
13590: PUSH
13591: LD_INT 3
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 21
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PPUSH
13612: CALL_OW 69
13616: PUSH
13617: LD_INT 0
13619: EQUAL
13620: IFFALSE 13581
// InGameOn ;
13622: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13626: LD_EXP 21
13630: PPUSH
13631: LD_STRING DH-end-a-6
13633: PPUSH
13634: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13638: LD_EXP 29
13642: PPUSH
13643: LD_STRING DShar-end-3
13645: PPUSH
13646: CALL_OW 94
// if not flamethrowerBuilt then
13650: LD_EXP 20
13654: NOT
13655: IFFALSE 13664
// SetAchievement ( ACH_FIRE ) ;
13657: LD_STRING ACH_FIRE
13659: PPUSH
13660: CALL_OW 543
// if drugsTested then
13664: LD_EXP 6
13668: IFFALSE 13682
// AddMedal ( med1 , 1 ) else
13670: LD_STRING med1
13672: PPUSH
13673: LD_INT 1
13675: PPUSH
13676: CALL_OW 101
13680: GO 13722
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13682: LD_INT 5
13684: PPUSH
13685: LD_INT 2
13687: PPUSH
13688: CALL_OW 321
13692: PUSH
13693: LD_INT 2
13695: EQUAL
13696: IFFALSE 13711
// AddMedal ( med1 , - 1 ) else
13698: LD_STRING med1
13700: PPUSH
13701: LD_INT 1
13703: NEG
13704: PPUSH
13705: CALL_OW 101
13709: GO 13722
// AddMedal ( med1 , - 2 ) ;
13711: LD_STRING med1
13713: PPUSH
13714: LD_INT 2
13716: NEG
13717: PPUSH
13718: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
13722: LD_INT 22
13724: PUSH
13725: LD_INT 2
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: LD_INT 33
13734: PUSH
13735: LD_INT 2
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PPUSH
13746: CALL_OW 69
13750: PUSH
13751: LD_INT 3
13753: GREATEREQUAL
13754: PUSH
13755: LD_INT 22
13757: PUSH
13758: LD_INT 2
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 34
13767: PUSH
13768: LD_INT 31
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PPUSH
13779: CALL_OW 69
13783: PUSH
13784: LD_INT 1
13786: GREATEREQUAL
13787: AND
13788: IFFALSE 13802
// AddMedal ( med2 , 1 ) else
13790: LD_STRING med2
13792: PPUSH
13793: LD_INT 1
13795: PPUSH
13796: CALL_OW 101
13800: GO 13813
// AddMedal ( med2 , - 1 ) ;
13802: LD_STRING med2
13804: PPUSH
13805: LD_INT 1
13807: NEG
13808: PPUSH
13809: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
13813: LD_EXP 15
13817: PUSH
13818: LD_INT 10
13820: PUSH
13821: LD_INT 8
13823: PUSH
13824: LD_INT 6
13826: PUSH
13827: LD_INT 5
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: PUSH
13836: LD_OWVAR 67
13840: ARRAY
13841: LESS
13842: IFFALSE 13856
// AddMedal ( med3 , 1 ) else
13844: LD_STRING med3
13846: PPUSH
13847: LD_INT 1
13849: PPUSH
13850: CALL_OW 101
13854: GO 13867
// AddMedal ( med3 , - 1 ) ;
13856: LD_STRING med3
13858: PPUSH
13859: LD_INT 1
13861: NEG
13862: PPUSH
13863: CALL_OW 101
// GiveMedals ( MAIN ) ;
13867: LD_STRING MAIN
13869: PPUSH
13870: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13874: LD_INT 22
13876: PUSH
13877: LD_INT 2
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: LD_INT 23
13886: PUSH
13887: LD_INT 2
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 21
13896: PUSH
13897: LD_INT 1
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: PPUSH
13914: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13918: LD_EXP 15
13922: PPUSH
13923: LD_STRING 05_ConvoySavedCounter
13925: PPUSH
13926: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13930: LD_EXP 13
13934: PPUSH
13935: LD_STRING 05_Radar
13937: PPUSH
13938: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13942: LD_EXP 6
13946: PPUSH
13947: LD_STRING 05_DrugsTested
13949: PPUSH
13950: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13954: LD_INT 22
13956: PUSH
13957: LD_INT 2
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 33
13966: PUSH
13967: LD_INT 2
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PPUSH
13978: CALL_OW 69
13982: PUSH
13983: LD_INT 3
13985: GREATEREQUAL
13986: PUSH
13987: LD_INT 22
13989: PUSH
13990: LD_INT 2
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 34
13999: PUSH
14000: LD_INT 31
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PPUSH
14011: CALL_OW 69
14015: PUSH
14016: LD_INT 2
14018: GREATEREQUAL
14019: AND
14020: PPUSH
14021: LD_STRING 05_RemoteControl
14023: PPUSH
14024: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
14028: LD_EXP 21
14032: PPUSH
14033: LD_STRING 05_Heike
14035: PPUSH
14036: CALL_OW 38
// if Aviradze then
14040: LD_EXP 33
14044: IFFALSE 14058
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14046: LD_EXP 33
14050: PPUSH
14051: LD_STRING 05_Aviradze
14053: PPUSH
14054: CALL_OW 38
// if Ibrahim then
14058: LD_EXP 24
14062: IFFALSE 14076
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14064: LD_EXP 24
14068: PPUSH
14069: LD_STRING 05_Ibrahim
14071: PPUSH
14072: CALL_OW 38
// if Kamil then
14076: LD_EXP 25
14080: IFFALSE 14094
// SaveCharacters ( Kamil , 05_Kamil ) ;
14082: LD_EXP 25
14086: PPUSH
14087: LD_STRING 05_Kamil
14089: PPUSH
14090: CALL_OW 38
// if Sophia then
14094: LD_EXP 27
14098: IFFALSE 14112
// SaveCharacters ( Sophia , 05_Sophia ) ;
14100: LD_EXP 27
14104: PPUSH
14105: LD_STRING 05_Sophia
14107: PPUSH
14108: CALL_OW 38
// if Kaia then
14112: LD_EXP 26
14116: IFFALSE 14130
// SaveCharacters ( Kaia , 05_Kaia ) ;
14118: LD_EXP 26
14122: PPUSH
14123: LD_STRING 05_Kaia
14125: PPUSH
14126: CALL_OW 38
// if Givi then
14130: LD_EXP 22
14134: IFFALSE 14148
// SaveCharacters ( Givi , 05_Givi ) ;
14136: LD_EXP 22
14140: PPUSH
14141: LD_STRING 05_Givi
14143: PPUSH
14144: CALL_OW 38
// if Mike then
14148: LD_EXP 23
14152: IFFALSE 14166
// SaveCharacters ( Mike , 05_Mike ) ;
14154: LD_EXP 23
14158: PPUSH
14159: LD_STRING 05_Mike
14161: PPUSH
14162: CALL_OW 38
// if Markov then
14166: LD_EXP 28
14170: IFFALSE 14184
// SaveCharacters ( Markov , 05_Markov ) ;
14172: LD_EXP 28
14176: PPUSH
14177: LD_STRING 05_Markov
14179: PPUSH
14180: CALL_OW 38
// if Kurt then
14184: LD_EXP 32
14188: IFFALSE 14202
// SaveCharacters ( Kurt , 05_Kurt ) ;
14190: LD_EXP 32
14194: PPUSH
14195: LD_STRING 05_Kurt
14197: PPUSH
14198: CALL_OW 38
// if heikeSecondSquad then
14202: LD_EXP 34
14206: IFFALSE 14220
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14208: LD_EXP 34
14212: PPUSH
14213: LD_STRING 05_others
14215: PPUSH
14216: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14220: LD_ADDR_VAR 0 1
14224: PUSH
14225: LD_INT 22
14227: PUSH
14228: LD_INT 2
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 23
14237: PUSH
14238: LD_INT 0
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PPUSH
14249: CALL_OW 69
14253: ST_TO_ADDR
// if tmp then
14254: LD_VAR 0 1
14258: IFFALSE 14272
// SaveCharacters ( tmp , 05_apes ) ;
14260: LD_VAR 0 1
14264: PPUSH
14265: LD_STRING 05_apes
14267: PPUSH
14268: CALL_OW 38
// YouWin ;
14272: CALL_OW 103
// end ; end_of_file
14276: PPOPN 1
14278: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14279: LD_EXP 9
14283: PUSH
14284: LD_INT 13
14286: PPUSH
14287: LD_INT 1
14289: PPUSH
14290: CALL_OW 287
14294: PUSH
14295: LD_INT 25
14297: LESS
14298: AND
14299: IFFALSE 14326
14301: GO 14303
14303: DISABLE
// begin enable ;
14304: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
14305: LD_INT 1
14307: PPUSH
14308: LD_INT 5
14310: PPUSH
14311: CALL_OW 12
14315: PPUSH
14316: LD_INT 13
14318: PPUSH
14319: LD_INT 1
14321: PPUSH
14322: CALL_OW 55
// end ; end_of_file
14326: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
14327: LD_INT 0
14329: PPUSH
// ar_miner := 81 ;
14330: LD_ADDR_EXP 51
14334: PUSH
14335: LD_INT 81
14337: ST_TO_ADDR
// ar_crane := 88 ;
14338: LD_ADDR_EXP 50
14342: PUSH
14343: LD_INT 88
14345: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
14346: LD_ADDR_EXP 45
14350: PUSH
14351: LD_INT 89
14353: ST_TO_ADDR
// us_hack := 99 ;
14354: LD_ADDR_EXP 46
14358: PUSH
14359: LD_INT 99
14361: ST_TO_ADDR
// us_artillery := 97 ;
14362: LD_ADDR_EXP 47
14366: PUSH
14367: LD_INT 97
14369: ST_TO_ADDR
// ar_bio_bomb := 91 ;
14370: LD_ADDR_EXP 48
14374: PUSH
14375: LD_INT 91
14377: ST_TO_ADDR
// ar_mortar := 92 ;
14378: LD_ADDR_EXP 49
14382: PUSH
14383: LD_INT 92
14385: ST_TO_ADDR
// ru_radar := 98 ;
14386: LD_ADDR_EXP 44
14390: PUSH
14391: LD_INT 98
14393: ST_TO_ADDR
// tech_Artillery := 80 ;
14394: LD_ADDR_EXP 52
14398: PUSH
14399: LD_INT 80
14401: ST_TO_ADDR
// tech_RadMat := 81 ;
14402: LD_ADDR_EXP 53
14406: PUSH
14407: LD_INT 81
14409: ST_TO_ADDR
// tech_BasicTools := 82 ;
14410: LD_ADDR_EXP 54
14414: PUSH
14415: LD_INT 82
14417: ST_TO_ADDR
// tech_Cargo := 83 ;
14418: LD_ADDR_EXP 55
14422: PUSH
14423: LD_INT 83
14425: ST_TO_ADDR
// tech_Track := 84 ;
14426: LD_ADDR_EXP 56
14430: PUSH
14431: LD_INT 84
14433: ST_TO_ADDR
// tech_Crane := 85 ;
14434: LD_ADDR_EXP 57
14438: PUSH
14439: LD_INT 85
14441: ST_TO_ADDR
// tech_Bulldozer := 86 ;
14442: LD_ADDR_EXP 58
14446: PUSH
14447: LD_INT 86
14449: ST_TO_ADDR
// tech_Hovercraft := 87 ;
14450: LD_ADDR_EXP 59
14454: PUSH
14455: LD_INT 87
14457: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
14458: LD_ADDR_EXP 60
14462: PUSH
14463: LD_INT 88
14465: ST_TO_ADDR
// class_mastodont := 31 ;
14466: LD_ADDR_EXP 61
14470: PUSH
14471: LD_INT 31
14473: ST_TO_ADDR
// class_horse := 21 ;
14474: LD_ADDR_EXP 62
14478: PUSH
14479: LD_INT 21
14481: ST_TO_ADDR
// end ;
14482: LD_VAR 0 1
14486: RET
// every 1 do
14487: GO 14489
14489: DISABLE
// InitGlobalVariables ; end_of_file
14490: CALL 14327 0 0
14494: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14495: LD_INT 0
14497: PPUSH
14498: PPUSH
14499: PPUSH
14500: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL_OW 264
14510: PUSH
14511: LD_EXP 48
14515: EQUAL
14516: IFFALSE 14588
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14518: LD_INT 68
14520: PPUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 255
14530: PPUSH
14531: CALL_OW 321
14535: PUSH
14536: LD_INT 2
14538: EQUAL
14539: IFFALSE 14551
// eff := 70 else
14541: LD_ADDR_VAR 0 4
14545: PUSH
14546: LD_INT 70
14548: ST_TO_ADDR
14549: GO 14559
// eff := 30 ;
14551: LD_ADDR_VAR 0 4
14555: PUSH
14556: LD_INT 30
14558: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14559: LD_VAR 0 1
14563: PPUSH
14564: CALL_OW 250
14568: PPUSH
14569: LD_VAR 0 1
14573: PPUSH
14574: CALL_OW 251
14578: PPUSH
14579: LD_VAR 0 4
14583: PPUSH
14584: CALL_OW 495
// end ; end ;
14588: LD_VAR 0 2
14592: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14593: LD_INT 0
14595: PPUSH
// end ;
14596: LD_VAR 0 4
14600: RET
// export function SOS_Command ( cmd ) ; begin
14601: LD_INT 0
14603: PPUSH
// end ;
14604: LD_VAR 0 2
14608: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14609: LD_INT 0
14611: PPUSH
// if cmd = 121 then
14612: LD_VAR 0 1
14616: PUSH
14617: LD_INT 121
14619: EQUAL
14620: IFFALSE 14622
// end ;
14622: LD_VAR 0 6
14626: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14627: LD_INT 0
14629: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14630: LD_VAR 0 1
14634: PUSH
14635: LD_INT 250
14637: EQUAL
14638: PUSH
14639: LD_VAR 0 2
14643: PPUSH
14644: CALL_OW 264
14648: PUSH
14649: LD_EXP 51
14653: EQUAL
14654: AND
14655: IFFALSE 14676
// MinerPlaceMine ( unit , x , y ) ;
14657: LD_VAR 0 2
14661: PPUSH
14662: LD_VAR 0 4
14666: PPUSH
14667: LD_VAR 0 5
14671: PPUSH
14672: CALL 17025 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14676: LD_VAR 0 1
14680: PUSH
14681: LD_INT 251
14683: EQUAL
14684: PUSH
14685: LD_VAR 0 2
14689: PPUSH
14690: CALL_OW 264
14694: PUSH
14695: LD_EXP 51
14699: EQUAL
14700: AND
14701: IFFALSE 14722
// MinerDetonateMine ( unit , x , y ) ;
14703: LD_VAR 0 2
14707: PPUSH
14708: LD_VAR 0 4
14712: PPUSH
14713: LD_VAR 0 5
14717: PPUSH
14718: CALL 17302 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14722: LD_VAR 0 1
14726: PUSH
14727: LD_INT 252
14729: EQUAL
14730: PUSH
14731: LD_VAR 0 2
14735: PPUSH
14736: CALL_OW 264
14740: PUSH
14741: LD_EXP 51
14745: EQUAL
14746: AND
14747: IFFALSE 14768
// MinerCreateMinefield ( unit , x , y ) ;
14749: LD_VAR 0 2
14753: PPUSH
14754: LD_VAR 0 4
14758: PPUSH
14759: LD_VAR 0 5
14763: PPUSH
14764: CALL 17719 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
14768: LD_VAR 0 1
14772: PUSH
14773: LD_INT 253
14775: EQUAL
14776: PUSH
14777: LD_VAR 0 2
14781: PPUSH
14782: CALL_OW 257
14786: PUSH
14787: LD_INT 5
14789: EQUAL
14790: AND
14791: IFFALSE 14812
// ComBinocular ( unit , x , y ) ;
14793: LD_VAR 0 2
14797: PPUSH
14798: LD_VAR 0 4
14802: PPUSH
14803: LD_VAR 0 5
14807: PPUSH
14808: CALL 18090 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
14812: LD_VAR 0 1
14816: PUSH
14817: LD_INT 254
14819: EQUAL
14820: PUSH
14821: LD_VAR 0 2
14825: PPUSH
14826: CALL_OW 264
14830: PUSH
14831: LD_EXP 46
14835: EQUAL
14836: AND
14837: PUSH
14838: LD_VAR 0 3
14842: PPUSH
14843: CALL_OW 263
14847: PUSH
14848: LD_INT 3
14850: EQUAL
14851: AND
14852: IFFALSE 14868
// HackDestroyVehicle ( unit , selectedUnit ) ;
14854: LD_VAR 0 2
14858: PPUSH
14859: LD_VAR 0 3
14863: PPUSH
14864: CALL 16385 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
14868: LD_VAR 0 1
14872: PUSH
14873: LD_INT 255
14875: EQUAL
14876: PUSH
14877: LD_VAR 0 2
14881: PPUSH
14882: CALL_OW 264
14886: PUSH
14887: LD_INT 14
14889: PUSH
14890: LD_INT 53
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: IN
14897: AND
14898: PUSH
14899: LD_VAR 0 4
14903: PPUSH
14904: LD_VAR 0 5
14908: PPUSH
14909: CALL_OW 488
14913: AND
14914: IFFALSE 14938
// CutTreeXYR ( unit , x , y , 12 ) ;
14916: LD_VAR 0 2
14920: PPUSH
14921: LD_VAR 0 4
14925: PPUSH
14926: LD_VAR 0 5
14930: PPUSH
14931: LD_INT 12
14933: PPUSH
14934: CALL 14951 0 4
// end ;
14938: LD_VAR 0 6
14942: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
14943: LD_INT 0
14945: PPUSH
// end ;
14946: LD_VAR 0 4
14950: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
14951: LD_INT 0
14953: PPUSH
14954: PPUSH
14955: PPUSH
14956: PPUSH
14957: PPUSH
14958: PPUSH
14959: PPUSH
14960: PPUSH
14961: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
14962: LD_VAR 0 1
14966: NOT
14967: PUSH
14968: LD_VAR 0 2
14972: PPUSH
14973: LD_VAR 0 3
14977: PPUSH
14978: CALL_OW 488
14982: NOT
14983: OR
14984: PUSH
14985: LD_VAR 0 4
14989: NOT
14990: OR
14991: IFFALSE 14995
// exit ;
14993: GO 15335
// list := [ ] ;
14995: LD_ADDR_VAR 0 13
14999: PUSH
15000: EMPTY
15001: ST_TO_ADDR
// if x - r < 0 then
15002: LD_VAR 0 2
15006: PUSH
15007: LD_VAR 0 4
15011: MINUS
15012: PUSH
15013: LD_INT 0
15015: LESS
15016: IFFALSE 15028
// min_x := 0 else
15018: LD_ADDR_VAR 0 7
15022: PUSH
15023: LD_INT 0
15025: ST_TO_ADDR
15026: GO 15044
// min_x := x - r ;
15028: LD_ADDR_VAR 0 7
15032: PUSH
15033: LD_VAR 0 2
15037: PUSH
15038: LD_VAR 0 4
15042: MINUS
15043: ST_TO_ADDR
// if y - r < 0 then
15044: LD_VAR 0 3
15048: PUSH
15049: LD_VAR 0 4
15053: MINUS
15054: PUSH
15055: LD_INT 0
15057: LESS
15058: IFFALSE 15070
// min_y := 0 else
15060: LD_ADDR_VAR 0 8
15064: PUSH
15065: LD_INT 0
15067: ST_TO_ADDR
15068: GO 15086
// min_y := y - r ;
15070: LD_ADDR_VAR 0 8
15074: PUSH
15075: LD_VAR 0 3
15079: PUSH
15080: LD_VAR 0 4
15084: MINUS
15085: ST_TO_ADDR
// max_x := x + r ;
15086: LD_ADDR_VAR 0 9
15090: PUSH
15091: LD_VAR 0 2
15095: PUSH
15096: LD_VAR 0 4
15100: PLUS
15101: ST_TO_ADDR
// max_y := y + r ;
15102: LD_ADDR_VAR 0 10
15106: PUSH
15107: LD_VAR 0 3
15111: PUSH
15112: LD_VAR 0 4
15116: PLUS
15117: ST_TO_ADDR
// for _x = min_x to max_x do
15118: LD_ADDR_VAR 0 11
15122: PUSH
15123: DOUBLE
15124: LD_VAR 0 7
15128: DEC
15129: ST_TO_ADDR
15130: LD_VAR 0 9
15134: PUSH
15135: FOR_TO
15136: IFFALSE 15253
// for _y = min_y to max_y do
15138: LD_ADDR_VAR 0 12
15142: PUSH
15143: DOUBLE
15144: LD_VAR 0 8
15148: DEC
15149: ST_TO_ADDR
15150: LD_VAR 0 10
15154: PUSH
15155: FOR_TO
15156: IFFALSE 15249
// begin if not ValidHex ( _x , _y ) then
15158: LD_VAR 0 11
15162: PPUSH
15163: LD_VAR 0 12
15167: PPUSH
15168: CALL_OW 488
15172: NOT
15173: IFFALSE 15177
// continue ;
15175: GO 15155
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15177: LD_VAR 0 11
15181: PPUSH
15182: LD_VAR 0 12
15186: PPUSH
15187: CALL_OW 351
15191: PUSH
15192: LD_VAR 0 11
15196: PPUSH
15197: LD_VAR 0 12
15201: PPUSH
15202: CALL_OW 554
15206: AND
15207: IFFALSE 15247
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15209: LD_ADDR_VAR 0 13
15213: PUSH
15214: LD_VAR 0 13
15218: PPUSH
15219: LD_VAR 0 13
15223: PUSH
15224: LD_INT 1
15226: PLUS
15227: PPUSH
15228: LD_VAR 0 11
15232: PUSH
15233: LD_VAR 0 12
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PPUSH
15242: CALL_OW 2
15246: ST_TO_ADDR
// end ;
15247: GO 15155
15249: POP
15250: POP
15251: GO 15135
15253: POP
15254: POP
// if not list then
15255: LD_VAR 0 13
15259: NOT
15260: IFFALSE 15264
// exit ;
15262: GO 15335
// for i in list do
15264: LD_ADDR_VAR 0 6
15268: PUSH
15269: LD_VAR 0 13
15273: PUSH
15274: FOR_IN
15275: IFFALSE 15333
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15277: LD_VAR 0 1
15281: PPUSH
15282: LD_STRING M
15284: PUSH
15285: LD_VAR 0 6
15289: PUSH
15290: LD_INT 1
15292: ARRAY
15293: PUSH
15294: LD_VAR 0 6
15298: PUSH
15299: LD_INT 2
15301: ARRAY
15302: PUSH
15303: LD_INT 0
15305: PUSH
15306: LD_INT 0
15308: PUSH
15309: LD_INT 0
15311: PUSH
15312: LD_INT 0
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: PUSH
15324: EMPTY
15325: LIST
15326: PPUSH
15327: CALL_OW 447
15331: GO 15274
15333: POP
15334: POP
// end ;
15335: LD_VAR 0 5
15339: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15340: LD_EXP 65
15344: NOT
15345: IFFALSE 15395
15347: GO 15349
15349: DISABLE
// begin initHack := true ;
15350: LD_ADDR_EXP 65
15354: PUSH
15355: LD_INT 1
15357: ST_TO_ADDR
// hackTanks := [ ] ;
15358: LD_ADDR_EXP 66
15362: PUSH
15363: EMPTY
15364: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15365: LD_ADDR_EXP 67
15369: PUSH
15370: EMPTY
15371: ST_TO_ADDR
// hackLimit := 3 ;
15372: LD_ADDR_EXP 68
15376: PUSH
15377: LD_INT 3
15379: ST_TO_ADDR
// hackDist := 12 ;
15380: LD_ADDR_EXP 69
15384: PUSH
15385: LD_INT 12
15387: ST_TO_ADDR
// hackCounter := [ ] ;
15388: LD_ADDR_EXP 70
15392: PUSH
15393: EMPTY
15394: ST_TO_ADDR
// end ;
15395: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
15396: LD_EXP 65
15400: PUSH
15401: LD_INT 34
15403: PUSH
15404: LD_EXP 46
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PPUSH
15413: CALL_OW 69
15417: AND
15418: IFFALSE 15673
15420: GO 15422
15422: DISABLE
15423: LD_INT 0
15425: PPUSH
15426: PPUSH
// begin enable ;
15427: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15428: LD_ADDR_VAR 0 1
15432: PUSH
15433: LD_INT 34
15435: PUSH
15436: LD_EXP 46
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PPUSH
15445: CALL_OW 69
15449: PUSH
15450: FOR_IN
15451: IFFALSE 15671
// begin if not i in hackTanks then
15453: LD_VAR 0 1
15457: PUSH
15458: LD_EXP 66
15462: IN
15463: NOT
15464: IFFALSE 15547
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15466: LD_ADDR_EXP 66
15470: PUSH
15471: LD_EXP 66
15475: PPUSH
15476: LD_EXP 66
15480: PUSH
15481: LD_INT 1
15483: PLUS
15484: PPUSH
15485: LD_VAR 0 1
15489: PPUSH
15490: CALL_OW 1
15494: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15495: LD_ADDR_EXP 67
15499: PUSH
15500: LD_EXP 67
15504: PPUSH
15505: LD_EXP 67
15509: PUSH
15510: LD_INT 1
15512: PLUS
15513: PPUSH
15514: EMPTY
15515: PPUSH
15516: CALL_OW 1
15520: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
15521: LD_ADDR_EXP 70
15525: PUSH
15526: LD_EXP 70
15530: PPUSH
15531: LD_EXP 70
15535: PUSH
15536: LD_INT 1
15538: PLUS
15539: PPUSH
15540: EMPTY
15541: PPUSH
15542: CALL_OW 1
15546: ST_TO_ADDR
// end ; if not IsOk ( i ) then
15547: LD_VAR 0 1
15551: PPUSH
15552: CALL_OW 302
15556: NOT
15557: IFFALSE 15570
// begin HackUnlinkAll ( i ) ;
15559: LD_VAR 0 1
15563: PPUSH
15564: CALL 15676 0 1
// continue ;
15568: GO 15450
// end ; HackCheckCapturedStatus ( i ) ;
15570: LD_VAR 0 1
15574: PPUSH
15575: CALL 16119 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
15579: LD_ADDR_VAR 0 2
15583: PUSH
15584: LD_INT 81
15586: PUSH
15587: LD_VAR 0 1
15591: PPUSH
15592: CALL_OW 255
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: LD_INT 33
15603: PUSH
15604: LD_INT 3
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: LD_INT 91
15613: PUSH
15614: LD_VAR 0 1
15618: PUSH
15619: LD_EXP 69
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 50
15631: PUSH
15632: EMPTY
15633: LIST
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: PPUSH
15641: CALL_OW 69
15645: ST_TO_ADDR
// if not tmp then
15646: LD_VAR 0 2
15650: NOT
15651: IFFALSE 15655
// continue ;
15653: GO 15450
// HackLink ( i , tmp ) ;
15655: LD_VAR 0 1
15659: PPUSH
15660: LD_VAR 0 2
15664: PPUSH
15665: CALL 15812 0 2
// end ;
15669: GO 15450
15671: POP
15672: POP
// end ;
15673: PPOPN 2
15675: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
15676: LD_INT 0
15678: PPUSH
15679: PPUSH
15680: PPUSH
// if not hack in hackTanks then
15681: LD_VAR 0 1
15685: PUSH
15686: LD_EXP 66
15690: IN
15691: NOT
15692: IFFALSE 15696
// exit ;
15694: GO 15807
// index := GetElementIndex ( hackTanks , hack ) ;
15696: LD_ADDR_VAR 0 4
15700: PUSH
15701: LD_EXP 66
15705: PPUSH
15706: LD_VAR 0 1
15710: PPUSH
15711: CALL 36453 0 2
15715: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
15716: LD_EXP 67
15720: PUSH
15721: LD_VAR 0 4
15725: ARRAY
15726: IFFALSE 15807
// begin for i in hackTanksCaptured [ index ] do
15728: LD_ADDR_VAR 0 3
15732: PUSH
15733: LD_EXP 67
15737: PUSH
15738: LD_VAR 0 4
15742: ARRAY
15743: PUSH
15744: FOR_IN
15745: IFFALSE 15771
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
15747: LD_VAR 0 3
15751: PUSH
15752: LD_INT 1
15754: ARRAY
15755: PPUSH
15756: LD_VAR 0 3
15760: PUSH
15761: LD_INT 2
15763: ARRAY
15764: PPUSH
15765: CALL_OW 235
15769: GO 15744
15771: POP
15772: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
15773: LD_ADDR_EXP 67
15777: PUSH
15778: LD_EXP 67
15782: PPUSH
15783: LD_VAR 0 4
15787: PPUSH
15788: EMPTY
15789: PPUSH
15790: CALL_OW 1
15794: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
15795: LD_VAR 0 1
15799: PPUSH
15800: LD_INT 0
15802: PPUSH
15803: CALL_OW 505
// end ; end ;
15807: LD_VAR 0 2
15811: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
15812: LD_INT 0
15814: PPUSH
15815: PPUSH
15816: PPUSH
// if not hack in hackTanks or not vehicles then
15817: LD_VAR 0 1
15821: PUSH
15822: LD_EXP 66
15826: IN
15827: NOT
15828: PUSH
15829: LD_VAR 0 2
15833: NOT
15834: OR
15835: IFFALSE 15839
// exit ;
15837: GO 16114
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
15839: LD_ADDR_VAR 0 2
15843: PUSH
15844: LD_VAR 0 1
15848: PPUSH
15849: LD_VAR 0 2
15853: PPUSH
15854: LD_INT 1
15856: PPUSH
15857: LD_INT 1
15859: PPUSH
15860: CALL 37103 0 4
15864: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
15865: LD_ADDR_VAR 0 5
15869: PUSH
15870: LD_EXP 66
15874: PPUSH
15875: LD_VAR 0 1
15879: PPUSH
15880: CALL 36453 0 2
15884: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
15885: LD_EXP 67
15889: PUSH
15890: LD_VAR 0 5
15894: ARRAY
15895: PUSH
15896: LD_EXP 68
15900: LESS
15901: IFFALSE 16090
// begin for i := 1 to vehicles do
15903: LD_ADDR_VAR 0 4
15907: PUSH
15908: DOUBLE
15909: LD_INT 1
15911: DEC
15912: ST_TO_ADDR
15913: LD_VAR 0 2
15917: PUSH
15918: FOR_TO
15919: IFFALSE 16088
// begin if hackTanksCaptured [ index ] = hackLimit then
15921: LD_EXP 67
15925: PUSH
15926: LD_VAR 0 5
15930: ARRAY
15931: PUSH
15932: LD_EXP 68
15936: EQUAL
15937: IFFALSE 15941
// break ;
15939: GO 16088
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
15941: LD_ADDR_EXP 70
15945: PUSH
15946: LD_EXP 70
15950: PPUSH
15951: LD_VAR 0 5
15955: PPUSH
15956: LD_EXP 70
15960: PUSH
15961: LD_VAR 0 5
15965: ARRAY
15966: PUSH
15967: LD_INT 1
15969: PLUS
15970: PPUSH
15971: CALL_OW 1
15975: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
15976: LD_ADDR_EXP 67
15980: PUSH
15981: LD_EXP 67
15985: PPUSH
15986: LD_VAR 0 5
15990: PUSH
15991: LD_EXP 67
15995: PUSH
15996: LD_VAR 0 5
16000: ARRAY
16001: PUSH
16002: LD_INT 1
16004: PLUS
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PPUSH
16010: LD_VAR 0 2
16014: PUSH
16015: LD_VAR 0 4
16019: ARRAY
16020: PUSH
16021: LD_VAR 0 2
16025: PUSH
16026: LD_VAR 0 4
16030: ARRAY
16031: PPUSH
16032: CALL_OW 255
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PPUSH
16041: CALL 36668 0 3
16045: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16046: LD_VAR 0 2
16050: PUSH
16051: LD_VAR 0 4
16055: ARRAY
16056: PPUSH
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 255
16066: PPUSH
16067: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16071: LD_VAR 0 2
16075: PUSH
16076: LD_VAR 0 4
16080: ARRAY
16081: PPUSH
16082: CALL_OW 141
// end ;
16086: GO 15918
16088: POP
16089: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16090: LD_VAR 0 1
16094: PPUSH
16095: LD_EXP 67
16099: PUSH
16100: LD_VAR 0 5
16104: ARRAY
16105: PUSH
16106: LD_INT 0
16108: PLUS
16109: PPUSH
16110: CALL_OW 505
// end ;
16114: LD_VAR 0 3
16118: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16119: LD_INT 0
16121: PPUSH
16122: PPUSH
16123: PPUSH
16124: PPUSH
// if not hack in hackTanks then
16125: LD_VAR 0 1
16129: PUSH
16130: LD_EXP 66
16134: IN
16135: NOT
16136: IFFALSE 16140
// exit ;
16138: GO 16380
// index := GetElementIndex ( hackTanks , hack ) ;
16140: LD_ADDR_VAR 0 4
16144: PUSH
16145: LD_EXP 66
16149: PPUSH
16150: LD_VAR 0 1
16154: PPUSH
16155: CALL 36453 0 2
16159: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16160: LD_ADDR_VAR 0 3
16164: PUSH
16165: DOUBLE
16166: LD_EXP 67
16170: PUSH
16171: LD_VAR 0 4
16175: ARRAY
16176: INC
16177: ST_TO_ADDR
16178: LD_INT 1
16180: PUSH
16181: FOR_DOWNTO
16182: IFFALSE 16354
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16184: LD_ADDR_VAR 0 5
16188: PUSH
16189: LD_EXP 67
16193: PUSH
16194: LD_VAR 0 4
16198: ARRAY
16199: PUSH
16200: LD_VAR 0 3
16204: ARRAY
16205: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16206: LD_VAR 0 5
16210: PUSH
16211: LD_INT 1
16213: ARRAY
16214: PPUSH
16215: CALL_OW 302
16219: NOT
16220: PUSH
16221: LD_VAR 0 5
16225: PUSH
16226: LD_INT 1
16228: ARRAY
16229: PPUSH
16230: CALL_OW 255
16234: PUSH
16235: LD_VAR 0 1
16239: PPUSH
16240: CALL_OW 255
16244: NONEQUAL
16245: OR
16246: IFFALSE 16352
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16248: LD_VAR 0 5
16252: PUSH
16253: LD_INT 1
16255: ARRAY
16256: PPUSH
16257: CALL_OW 305
16261: PUSH
16262: LD_VAR 0 5
16266: PUSH
16267: LD_INT 1
16269: ARRAY
16270: PPUSH
16271: CALL_OW 255
16275: PUSH
16276: LD_VAR 0 1
16280: PPUSH
16281: CALL_OW 255
16285: EQUAL
16286: AND
16287: IFFALSE 16311
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16289: LD_VAR 0 5
16293: PUSH
16294: LD_INT 1
16296: ARRAY
16297: PPUSH
16298: LD_VAR 0 5
16302: PUSH
16303: LD_INT 2
16305: ARRAY
16306: PPUSH
16307: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16311: LD_ADDR_EXP 67
16315: PUSH
16316: LD_EXP 67
16320: PPUSH
16321: LD_VAR 0 4
16325: PPUSH
16326: LD_EXP 67
16330: PUSH
16331: LD_VAR 0 4
16335: ARRAY
16336: PPUSH
16337: LD_VAR 0 3
16341: PPUSH
16342: CALL_OW 3
16346: PPUSH
16347: CALL_OW 1
16351: ST_TO_ADDR
// end ; end ;
16352: GO 16181
16354: POP
16355: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16356: LD_VAR 0 1
16360: PPUSH
16361: LD_EXP 67
16365: PUSH
16366: LD_VAR 0 4
16370: ARRAY
16371: PUSH
16372: LD_INT 0
16374: PLUS
16375: PPUSH
16376: CALL_OW 505
// end ;
16380: LD_VAR 0 2
16384: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
16385: LD_INT 0
16387: PPUSH
16388: PPUSH
16389: PPUSH
16390: PPUSH
// if not hack in hackTanks then
16391: LD_VAR 0 1
16395: PUSH
16396: LD_EXP 66
16400: IN
16401: NOT
16402: IFFALSE 16406
// exit ;
16404: GO 16491
// index := GetElementIndex ( hackTanks , hack ) ;
16406: LD_ADDR_VAR 0 5
16410: PUSH
16411: LD_EXP 66
16415: PPUSH
16416: LD_VAR 0 1
16420: PPUSH
16421: CALL 36453 0 2
16425: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16426: LD_ADDR_VAR 0 4
16430: PUSH
16431: DOUBLE
16432: LD_INT 1
16434: DEC
16435: ST_TO_ADDR
16436: LD_EXP 67
16440: PUSH
16441: LD_VAR 0 5
16445: ARRAY
16446: PUSH
16447: FOR_TO
16448: IFFALSE 16489
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16450: LD_EXP 67
16454: PUSH
16455: LD_VAR 0 5
16459: ARRAY
16460: PUSH
16461: LD_VAR 0 4
16465: ARRAY
16466: PUSH
16467: LD_INT 1
16469: ARRAY
16470: PUSH
16471: LD_VAR 0 2
16475: EQUAL
16476: IFFALSE 16487
// KillUnit ( vehicle ) ;
16478: LD_VAR 0 2
16482: PPUSH
16483: CALL_OW 66
16487: GO 16447
16489: POP
16490: POP
// end ;
16491: LD_VAR 0 3
16495: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
16496: LD_EXP 71
16500: NOT
16501: IFFALSE 16536
16503: GO 16505
16505: DISABLE
// begin initMiner := true ;
16506: LD_ADDR_EXP 71
16510: PUSH
16511: LD_INT 1
16513: ST_TO_ADDR
// minersList := [ ] ;
16514: LD_ADDR_EXP 72
16518: PUSH
16519: EMPTY
16520: ST_TO_ADDR
// minerMinesList := [ ] ;
16521: LD_ADDR_EXP 73
16525: PUSH
16526: EMPTY
16527: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
16528: LD_ADDR_EXP 74
16532: PUSH
16533: LD_INT 5
16535: ST_TO_ADDR
// end ;
16536: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
16537: LD_EXP 71
16541: PUSH
16542: LD_INT 34
16544: PUSH
16545: LD_EXP 51
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PPUSH
16554: CALL_OW 69
16558: AND
16559: IFFALSE 17022
16561: GO 16563
16563: DISABLE
16564: LD_INT 0
16566: PPUSH
16567: PPUSH
16568: PPUSH
16569: PPUSH
// begin enable ;
16570: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
16571: LD_ADDR_VAR 0 1
16575: PUSH
16576: LD_INT 34
16578: PUSH
16579: LD_EXP 51
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PPUSH
16588: CALL_OW 69
16592: PUSH
16593: FOR_IN
16594: IFFALSE 16666
// begin if not i in minersList then
16596: LD_VAR 0 1
16600: PUSH
16601: LD_EXP 72
16605: IN
16606: NOT
16607: IFFALSE 16664
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
16609: LD_ADDR_EXP 72
16613: PUSH
16614: LD_EXP 72
16618: PPUSH
16619: LD_EXP 72
16623: PUSH
16624: LD_INT 1
16626: PLUS
16627: PPUSH
16628: LD_VAR 0 1
16632: PPUSH
16633: CALL_OW 1
16637: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
16638: LD_ADDR_EXP 73
16642: PUSH
16643: LD_EXP 73
16647: PPUSH
16648: LD_EXP 73
16652: PUSH
16653: LD_INT 1
16655: PLUS
16656: PPUSH
16657: EMPTY
16658: PPUSH
16659: CALL_OW 1
16663: ST_TO_ADDR
// end end ;
16664: GO 16593
16666: POP
16667: POP
// for i := minerMinesList downto 1 do
16668: LD_ADDR_VAR 0 1
16672: PUSH
16673: DOUBLE
16674: LD_EXP 73
16678: INC
16679: ST_TO_ADDR
16680: LD_INT 1
16682: PUSH
16683: FOR_DOWNTO
16684: IFFALSE 17020
// begin if IsLive ( minersList [ i ] ) then
16686: LD_EXP 72
16690: PUSH
16691: LD_VAR 0 1
16695: ARRAY
16696: PPUSH
16697: CALL_OW 300
16701: IFFALSE 16729
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
16703: LD_EXP 72
16707: PUSH
16708: LD_VAR 0 1
16712: ARRAY
16713: PPUSH
16714: LD_EXP 73
16718: PUSH
16719: LD_VAR 0 1
16723: ARRAY
16724: PPUSH
16725: CALL_OW 505
// if not minerMinesList [ i ] then
16729: LD_EXP 73
16733: PUSH
16734: LD_VAR 0 1
16738: ARRAY
16739: NOT
16740: IFFALSE 16744
// continue ;
16742: GO 16683
// for j := minerMinesList [ i ] downto 1 do
16744: LD_ADDR_VAR 0 2
16748: PUSH
16749: DOUBLE
16750: LD_EXP 73
16754: PUSH
16755: LD_VAR 0 1
16759: ARRAY
16760: INC
16761: ST_TO_ADDR
16762: LD_INT 1
16764: PUSH
16765: FOR_DOWNTO
16766: IFFALSE 17016
// begin side := GetSide ( minersList [ i ] ) ;
16768: LD_ADDR_VAR 0 3
16772: PUSH
16773: LD_EXP 72
16777: PUSH
16778: LD_VAR 0 1
16782: ARRAY
16783: PPUSH
16784: CALL_OW 255
16788: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
16789: LD_ADDR_VAR 0 4
16793: PUSH
16794: LD_EXP 73
16798: PUSH
16799: LD_VAR 0 1
16803: ARRAY
16804: PUSH
16805: LD_VAR 0 2
16809: ARRAY
16810: PUSH
16811: LD_INT 1
16813: ARRAY
16814: PPUSH
16815: LD_EXP 73
16819: PUSH
16820: LD_VAR 0 1
16824: ARRAY
16825: PUSH
16826: LD_VAR 0 2
16830: ARRAY
16831: PUSH
16832: LD_INT 2
16834: ARRAY
16835: PPUSH
16836: CALL_OW 428
16840: ST_TO_ADDR
// if not tmp then
16841: LD_VAR 0 4
16845: NOT
16846: IFFALSE 16850
// continue ;
16848: GO 16765
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
16850: LD_VAR 0 4
16854: PUSH
16855: LD_INT 81
16857: PUSH
16858: LD_VAR 0 3
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PPUSH
16867: CALL_OW 69
16871: IN
16872: PUSH
16873: LD_EXP 73
16877: PUSH
16878: LD_VAR 0 1
16882: ARRAY
16883: PUSH
16884: LD_VAR 0 2
16888: ARRAY
16889: PUSH
16890: LD_INT 1
16892: ARRAY
16893: PPUSH
16894: LD_EXP 73
16898: PUSH
16899: LD_VAR 0 1
16903: ARRAY
16904: PUSH
16905: LD_VAR 0 2
16909: ARRAY
16910: PUSH
16911: LD_INT 2
16913: ARRAY
16914: PPUSH
16915: CALL_OW 458
16919: AND
16920: IFFALSE 17014
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
16922: LD_EXP 73
16926: PUSH
16927: LD_VAR 0 1
16931: ARRAY
16932: PUSH
16933: LD_VAR 0 2
16937: ARRAY
16938: PUSH
16939: LD_INT 1
16941: ARRAY
16942: PPUSH
16943: LD_EXP 73
16947: PUSH
16948: LD_VAR 0 1
16952: ARRAY
16953: PUSH
16954: LD_VAR 0 2
16958: ARRAY
16959: PUSH
16960: LD_INT 2
16962: ARRAY
16963: PPUSH
16964: LD_VAR 0 3
16968: PPUSH
16969: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
16973: LD_ADDR_EXP 73
16977: PUSH
16978: LD_EXP 73
16982: PPUSH
16983: LD_VAR 0 1
16987: PPUSH
16988: LD_EXP 73
16992: PUSH
16993: LD_VAR 0 1
16997: ARRAY
16998: PPUSH
16999: LD_VAR 0 2
17003: PPUSH
17004: CALL_OW 3
17008: PPUSH
17009: CALL_OW 1
17013: ST_TO_ADDR
// end ; end ;
17014: GO 16765
17016: POP
17017: POP
// end ;
17018: GO 16683
17020: POP
17021: POP
// end ;
17022: PPOPN 4
17024: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17025: LD_INT 0
17027: PPUSH
17028: PPUSH
// result := false ;
17029: LD_ADDR_VAR 0 4
17033: PUSH
17034: LD_INT 0
17036: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17037: LD_VAR 0 1
17041: PPUSH
17042: CALL_OW 264
17046: PUSH
17047: LD_EXP 51
17051: EQUAL
17052: NOT
17053: IFFALSE 17057
// exit ;
17055: GO 17297
// index := GetElementIndex ( minersList , unit ) ;
17057: LD_ADDR_VAR 0 5
17061: PUSH
17062: LD_EXP 72
17066: PPUSH
17067: LD_VAR 0 1
17071: PPUSH
17072: CALL 36453 0 2
17076: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17077: LD_EXP 73
17081: PUSH
17082: LD_VAR 0 5
17086: ARRAY
17087: PUSH
17088: LD_EXP 74
17092: GREATEREQUAL
17093: IFFALSE 17097
// exit ;
17095: GO 17297
// ComMoveXY ( unit , x , y ) ;
17097: LD_VAR 0 1
17101: PPUSH
17102: LD_VAR 0 2
17106: PPUSH
17107: LD_VAR 0 3
17111: PPUSH
17112: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17116: LD_INT 35
17118: PPUSH
17119: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17123: LD_VAR 0 1
17127: PPUSH
17128: LD_VAR 0 2
17132: PPUSH
17133: LD_VAR 0 3
17137: PPUSH
17138: CALL 67225 0 3
17142: NOT
17143: PUSH
17144: LD_VAR 0 1
17148: PPUSH
17149: CALL_OW 314
17153: AND
17154: IFFALSE 17158
// exit ;
17156: GO 17297
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17158: LD_VAR 0 2
17162: PPUSH
17163: LD_VAR 0 3
17167: PPUSH
17168: CALL_OW 428
17172: PUSH
17173: LD_VAR 0 1
17177: EQUAL
17178: PUSH
17179: LD_VAR 0 1
17183: PPUSH
17184: CALL_OW 314
17188: NOT
17189: AND
17190: IFFALSE 17116
// PlaySoundXY ( x , y , PlantMine ) ;
17192: LD_VAR 0 2
17196: PPUSH
17197: LD_VAR 0 3
17201: PPUSH
17202: LD_STRING PlantMine
17204: PPUSH
17205: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17209: LD_VAR 0 2
17213: PPUSH
17214: LD_VAR 0 3
17218: PPUSH
17219: LD_VAR 0 1
17223: PPUSH
17224: CALL_OW 255
17228: PPUSH
17229: LD_INT 0
17231: PPUSH
17232: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17236: LD_ADDR_EXP 73
17240: PUSH
17241: LD_EXP 73
17245: PPUSH
17246: LD_VAR 0 5
17250: PUSH
17251: LD_EXP 73
17255: PUSH
17256: LD_VAR 0 5
17260: ARRAY
17261: PUSH
17262: LD_INT 1
17264: PLUS
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PPUSH
17270: LD_VAR 0 2
17274: PUSH
17275: LD_VAR 0 3
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PPUSH
17284: CALL 36668 0 3
17288: ST_TO_ADDR
// result := true ;
17289: LD_ADDR_VAR 0 4
17293: PUSH
17294: LD_INT 1
17296: ST_TO_ADDR
// end ;
17297: LD_VAR 0 4
17301: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17302: LD_INT 0
17304: PPUSH
17305: PPUSH
17306: PPUSH
// if not unit in minersList then
17307: LD_VAR 0 1
17311: PUSH
17312: LD_EXP 72
17316: IN
17317: NOT
17318: IFFALSE 17322
// exit ;
17320: GO 17714
// index := GetElementIndex ( minersList , unit ) ;
17322: LD_ADDR_VAR 0 6
17326: PUSH
17327: LD_EXP 72
17331: PPUSH
17332: LD_VAR 0 1
17336: PPUSH
17337: CALL 36453 0 2
17341: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17342: LD_ADDR_VAR 0 5
17346: PUSH
17347: DOUBLE
17348: LD_EXP 73
17352: PUSH
17353: LD_VAR 0 6
17357: ARRAY
17358: INC
17359: ST_TO_ADDR
17360: LD_INT 1
17362: PUSH
17363: FOR_DOWNTO
17364: IFFALSE 17525
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
17366: LD_EXP 73
17370: PUSH
17371: LD_VAR 0 6
17375: ARRAY
17376: PUSH
17377: LD_VAR 0 5
17381: ARRAY
17382: PUSH
17383: LD_INT 1
17385: ARRAY
17386: PUSH
17387: LD_VAR 0 2
17391: EQUAL
17392: PUSH
17393: LD_EXP 73
17397: PUSH
17398: LD_VAR 0 6
17402: ARRAY
17403: PUSH
17404: LD_VAR 0 5
17408: ARRAY
17409: PUSH
17410: LD_INT 2
17412: ARRAY
17413: PUSH
17414: LD_VAR 0 3
17418: EQUAL
17419: AND
17420: IFFALSE 17523
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17422: LD_EXP 73
17426: PUSH
17427: LD_VAR 0 6
17431: ARRAY
17432: PUSH
17433: LD_VAR 0 5
17437: ARRAY
17438: PUSH
17439: LD_INT 1
17441: ARRAY
17442: PPUSH
17443: LD_EXP 73
17447: PUSH
17448: LD_VAR 0 6
17452: ARRAY
17453: PUSH
17454: LD_VAR 0 5
17458: ARRAY
17459: PUSH
17460: LD_INT 2
17462: ARRAY
17463: PPUSH
17464: LD_VAR 0 1
17468: PPUSH
17469: CALL_OW 255
17473: PPUSH
17474: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17478: LD_ADDR_EXP 73
17482: PUSH
17483: LD_EXP 73
17487: PPUSH
17488: LD_VAR 0 6
17492: PPUSH
17493: LD_EXP 73
17497: PUSH
17498: LD_VAR 0 6
17502: ARRAY
17503: PPUSH
17504: LD_VAR 0 5
17508: PPUSH
17509: CALL_OW 3
17513: PPUSH
17514: CALL_OW 1
17518: ST_TO_ADDR
// exit ;
17519: POP
17520: POP
17521: GO 17714
// end ; end ;
17523: GO 17363
17525: POP
17526: POP
// for i := minerMinesList [ index ] downto 1 do
17527: LD_ADDR_VAR 0 5
17531: PUSH
17532: DOUBLE
17533: LD_EXP 73
17537: PUSH
17538: LD_VAR 0 6
17542: ARRAY
17543: INC
17544: ST_TO_ADDR
17545: LD_INT 1
17547: PUSH
17548: FOR_DOWNTO
17549: IFFALSE 17712
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
17551: LD_EXP 73
17555: PUSH
17556: LD_VAR 0 6
17560: ARRAY
17561: PUSH
17562: LD_VAR 0 5
17566: ARRAY
17567: PUSH
17568: LD_INT 1
17570: ARRAY
17571: PPUSH
17572: LD_EXP 73
17576: PUSH
17577: LD_VAR 0 6
17581: ARRAY
17582: PUSH
17583: LD_VAR 0 5
17587: ARRAY
17588: PUSH
17589: LD_INT 2
17591: ARRAY
17592: PPUSH
17593: LD_VAR 0 2
17597: PPUSH
17598: LD_VAR 0 3
17602: PPUSH
17603: CALL_OW 298
17607: PUSH
17608: LD_INT 6
17610: LESS
17611: IFFALSE 17710
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17613: LD_EXP 73
17617: PUSH
17618: LD_VAR 0 6
17622: ARRAY
17623: PUSH
17624: LD_VAR 0 5
17628: ARRAY
17629: PUSH
17630: LD_INT 1
17632: ARRAY
17633: PPUSH
17634: LD_EXP 73
17638: PUSH
17639: LD_VAR 0 6
17643: ARRAY
17644: PUSH
17645: LD_VAR 0 5
17649: ARRAY
17650: PUSH
17651: LD_INT 2
17653: ARRAY
17654: PPUSH
17655: LD_VAR 0 1
17659: PPUSH
17660: CALL_OW 255
17664: PPUSH
17665: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17669: LD_ADDR_EXP 73
17673: PUSH
17674: LD_EXP 73
17678: PPUSH
17679: LD_VAR 0 6
17683: PPUSH
17684: LD_EXP 73
17688: PUSH
17689: LD_VAR 0 6
17693: ARRAY
17694: PPUSH
17695: LD_VAR 0 5
17699: PPUSH
17700: CALL_OW 3
17704: PPUSH
17705: CALL_OW 1
17709: ST_TO_ADDR
// end ; end ;
17710: GO 17548
17712: POP
17713: POP
// end ;
17714: LD_VAR 0 4
17718: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
17719: LD_INT 0
17721: PPUSH
17722: PPUSH
17723: PPUSH
17724: PPUSH
17725: PPUSH
17726: PPUSH
17727: PPUSH
17728: PPUSH
17729: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
17730: LD_VAR 0 1
17734: PPUSH
17735: CALL_OW 264
17739: PUSH
17740: LD_EXP 51
17744: EQUAL
17745: NOT
17746: PUSH
17747: LD_VAR 0 1
17751: PUSH
17752: LD_EXP 72
17756: IN
17757: NOT
17758: OR
17759: IFFALSE 17763
// exit ;
17761: GO 18085
// index := GetElementIndex ( minersList , unit ) ;
17763: LD_ADDR_VAR 0 6
17767: PUSH
17768: LD_EXP 72
17772: PPUSH
17773: LD_VAR 0 1
17777: PPUSH
17778: CALL 36453 0 2
17782: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
17783: LD_ADDR_VAR 0 8
17787: PUSH
17788: LD_EXP 74
17792: PUSH
17793: LD_EXP 73
17797: PUSH
17798: LD_VAR 0 6
17802: ARRAY
17803: MINUS
17804: ST_TO_ADDR
// if not minesFreeAmount then
17805: LD_VAR 0 8
17809: NOT
17810: IFFALSE 17814
// exit ;
17812: GO 18085
// tmp := [ ] ;
17814: LD_ADDR_VAR 0 7
17818: PUSH
17819: EMPTY
17820: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
17821: LD_ADDR_VAR 0 5
17825: PUSH
17826: DOUBLE
17827: LD_INT 1
17829: DEC
17830: ST_TO_ADDR
17831: LD_VAR 0 8
17835: PUSH
17836: FOR_TO
17837: IFFALSE 18032
// begin _d := rand ( 0 , 5 ) ;
17839: LD_ADDR_VAR 0 11
17843: PUSH
17844: LD_INT 0
17846: PPUSH
17847: LD_INT 5
17849: PPUSH
17850: CALL_OW 12
17854: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
17855: LD_ADDR_VAR 0 12
17859: PUSH
17860: LD_INT 2
17862: PPUSH
17863: LD_INT 6
17865: PPUSH
17866: CALL_OW 12
17870: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
17871: LD_ADDR_VAR 0 9
17875: PUSH
17876: LD_VAR 0 2
17880: PPUSH
17881: LD_VAR 0 11
17885: PPUSH
17886: LD_VAR 0 12
17890: PPUSH
17891: CALL_OW 272
17895: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
17896: LD_ADDR_VAR 0 10
17900: PUSH
17901: LD_VAR 0 3
17905: PPUSH
17906: LD_VAR 0 11
17910: PPUSH
17911: LD_VAR 0 12
17915: PPUSH
17916: CALL_OW 273
17920: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
17921: LD_VAR 0 9
17925: PPUSH
17926: LD_VAR 0 10
17930: PPUSH
17931: CALL_OW 488
17935: PUSH
17936: LD_VAR 0 9
17940: PUSH
17941: LD_VAR 0 10
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_VAR 0 7
17954: IN
17955: NOT
17956: AND
17957: PUSH
17958: LD_VAR 0 9
17962: PPUSH
17963: LD_VAR 0 10
17967: PPUSH
17968: CALL_OW 458
17972: NOT
17973: AND
17974: IFFALSE 18016
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
17976: LD_ADDR_VAR 0 7
17980: PUSH
17981: LD_VAR 0 7
17985: PPUSH
17986: LD_VAR 0 7
17990: PUSH
17991: LD_INT 1
17993: PLUS
17994: PPUSH
17995: LD_VAR 0 9
17999: PUSH
18000: LD_VAR 0 10
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PPUSH
18009: CALL_OW 1
18013: ST_TO_ADDR
18014: GO 18030
// i := i - 1 ;
18016: LD_ADDR_VAR 0 5
18020: PUSH
18021: LD_VAR 0 5
18025: PUSH
18026: LD_INT 1
18028: MINUS
18029: ST_TO_ADDR
// end ;
18030: GO 17836
18032: POP
18033: POP
// for i in tmp do
18034: LD_ADDR_VAR 0 5
18038: PUSH
18039: LD_VAR 0 7
18043: PUSH
18044: FOR_IN
18045: IFFALSE 18083
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18047: LD_VAR 0 1
18051: PPUSH
18052: LD_VAR 0 5
18056: PUSH
18057: LD_INT 1
18059: ARRAY
18060: PPUSH
18061: LD_VAR 0 5
18065: PUSH
18066: LD_INT 2
18068: ARRAY
18069: PPUSH
18070: CALL 17025 0 3
18074: NOT
18075: IFFALSE 18081
// exit ;
18077: POP
18078: POP
18079: GO 18085
18081: GO 18044
18083: POP
18084: POP
// end ;
18085: LD_VAR 0 4
18089: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18090: LD_INT 0
18092: PPUSH
18093: PPUSH
18094: PPUSH
18095: PPUSH
18096: PPUSH
18097: PPUSH
18098: PPUSH
// if not GetClass ( unit ) = class_sniper then
18099: LD_VAR 0 1
18103: PPUSH
18104: CALL_OW 257
18108: PUSH
18109: LD_INT 5
18111: EQUAL
18112: NOT
18113: IFFALSE 18117
// exit ;
18115: GO 18505
// dist := 8 ;
18117: LD_ADDR_VAR 0 5
18121: PUSH
18122: LD_INT 8
18124: ST_TO_ADDR
// viewRange := 12 ;
18125: LD_ADDR_VAR 0 7
18129: PUSH
18130: LD_INT 12
18132: ST_TO_ADDR
// side := GetSide ( unit ) ;
18133: LD_ADDR_VAR 0 6
18137: PUSH
18138: LD_VAR 0 1
18142: PPUSH
18143: CALL_OW 255
18147: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18148: LD_INT 61
18150: PPUSH
18151: LD_VAR 0 6
18155: PPUSH
18156: CALL_OW 321
18160: PUSH
18161: LD_INT 2
18163: EQUAL
18164: IFFALSE 18174
// viewRange := 16 ;
18166: LD_ADDR_VAR 0 7
18170: PUSH
18171: LD_INT 16
18173: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18174: LD_VAR 0 1
18178: PPUSH
18179: LD_VAR 0 2
18183: PPUSH
18184: LD_VAR 0 3
18188: PPUSH
18189: CALL_OW 297
18193: PUSH
18194: LD_VAR 0 5
18198: GREATER
18199: IFFALSE 18278
// begin ComMoveXY ( unit , x , y ) ;
18201: LD_VAR 0 1
18205: PPUSH
18206: LD_VAR 0 2
18210: PPUSH
18211: LD_VAR 0 3
18215: PPUSH
18216: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18220: LD_INT 35
18222: PPUSH
18223: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18227: LD_VAR 0 1
18231: PPUSH
18232: LD_VAR 0 2
18236: PPUSH
18237: LD_VAR 0 3
18241: PPUSH
18242: CALL 67225 0 3
18246: NOT
18247: IFFALSE 18251
// exit ;
18249: GO 18505
// until GetDistUnitXY ( unit , x , y ) < dist ;
18251: LD_VAR 0 1
18255: PPUSH
18256: LD_VAR 0 2
18260: PPUSH
18261: LD_VAR 0 3
18265: PPUSH
18266: CALL_OW 297
18270: PUSH
18271: LD_VAR 0 5
18275: LESS
18276: IFFALSE 18220
// end ; ComTurnXY ( unit , x , y ) ;
18278: LD_VAR 0 1
18282: PPUSH
18283: LD_VAR 0 2
18287: PPUSH
18288: LD_VAR 0 3
18292: PPUSH
18293: CALL_OW 118
// wait ( 5 ) ;
18297: LD_INT 5
18299: PPUSH
18300: CALL_OW 67
// _d := GetDir ( unit ) ;
18304: LD_ADDR_VAR 0 10
18308: PUSH
18309: LD_VAR 0 1
18313: PPUSH
18314: CALL_OW 254
18318: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18319: LD_ADDR_VAR 0 8
18323: PUSH
18324: LD_VAR 0 1
18328: PPUSH
18329: CALL_OW 250
18333: PPUSH
18334: LD_VAR 0 10
18338: PPUSH
18339: LD_VAR 0 5
18343: PPUSH
18344: CALL_OW 272
18348: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18349: LD_ADDR_VAR 0 9
18353: PUSH
18354: LD_VAR 0 1
18358: PPUSH
18359: CALL_OW 251
18363: PPUSH
18364: LD_VAR 0 10
18368: PPUSH
18369: LD_VAR 0 5
18373: PPUSH
18374: CALL_OW 273
18378: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18379: LD_VAR 0 8
18383: PPUSH
18384: LD_VAR 0 9
18388: PPUSH
18389: CALL_OW 488
18393: NOT
18394: IFFALSE 18398
// exit ;
18396: GO 18505
// ComAnimCustom ( unit , 1 ) ;
18398: LD_VAR 0 1
18402: PPUSH
18403: LD_INT 1
18405: PPUSH
18406: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18410: LD_VAR 0 8
18414: PPUSH
18415: LD_VAR 0 9
18419: PPUSH
18420: LD_VAR 0 6
18424: PPUSH
18425: LD_VAR 0 7
18429: PPUSH
18430: CALL_OW 330
// repeat wait ( 1 ) ;
18434: LD_INT 1
18436: PPUSH
18437: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
18441: LD_VAR 0 1
18445: PPUSH
18446: CALL_OW 316
18450: PUSH
18451: LD_VAR 0 1
18455: PPUSH
18456: CALL_OW 314
18460: OR
18461: PUSH
18462: LD_VAR 0 1
18466: PPUSH
18467: CALL_OW 302
18471: NOT
18472: OR
18473: PUSH
18474: LD_VAR 0 1
18478: PPUSH
18479: CALL_OW 301
18483: OR
18484: IFFALSE 18434
// RemoveSeeing ( _x , _y , side ) ;
18486: LD_VAR 0 8
18490: PPUSH
18491: LD_VAR 0 9
18495: PPUSH
18496: LD_VAR 0 6
18500: PPUSH
18501: CALL_OW 331
// end ; end_of_file
18505: LD_VAR 0 4
18509: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18510: LD_INT 0
18512: PPUSH
// if p2 = 100 then
18513: LD_VAR 0 2
18517: PUSH
18518: LD_INT 100
18520: EQUAL
18521: IFFALSE 19470
// begin if not StreamModeActive then
18523: LD_EXP 75
18527: NOT
18528: IFFALSE 18538
// StreamModeActive := true ;
18530: LD_ADDR_EXP 75
18534: PUSH
18535: LD_INT 1
18537: ST_TO_ADDR
// if p3 = 0 then
18538: LD_VAR 0 3
18542: PUSH
18543: LD_INT 0
18545: EQUAL
18546: IFFALSE 18552
// InitStreamMode ;
18548: CALL 19630 0 0
// if p3 = 1 then
18552: LD_VAR 0 3
18556: PUSH
18557: LD_INT 1
18559: EQUAL
18560: IFFALSE 18570
// sRocket := true ;
18562: LD_ADDR_EXP 80
18566: PUSH
18567: LD_INT 1
18569: ST_TO_ADDR
// if p3 = 2 then
18570: LD_VAR 0 3
18574: PUSH
18575: LD_INT 2
18577: EQUAL
18578: IFFALSE 18588
// sSpeed := true ;
18580: LD_ADDR_EXP 79
18584: PUSH
18585: LD_INT 1
18587: ST_TO_ADDR
// if p3 = 3 then
18588: LD_VAR 0 3
18592: PUSH
18593: LD_INT 3
18595: EQUAL
18596: IFFALSE 18606
// sEngine := true ;
18598: LD_ADDR_EXP 81
18602: PUSH
18603: LD_INT 1
18605: ST_TO_ADDR
// if p3 = 4 then
18606: LD_VAR 0 3
18610: PUSH
18611: LD_INT 4
18613: EQUAL
18614: IFFALSE 18624
// sSpec := true ;
18616: LD_ADDR_EXP 78
18620: PUSH
18621: LD_INT 1
18623: ST_TO_ADDR
// if p3 = 5 then
18624: LD_VAR 0 3
18628: PUSH
18629: LD_INT 5
18631: EQUAL
18632: IFFALSE 18642
// sLevel := true ;
18634: LD_ADDR_EXP 82
18638: PUSH
18639: LD_INT 1
18641: ST_TO_ADDR
// if p3 = 6 then
18642: LD_VAR 0 3
18646: PUSH
18647: LD_INT 6
18649: EQUAL
18650: IFFALSE 18660
// sArmoury := true ;
18652: LD_ADDR_EXP 83
18656: PUSH
18657: LD_INT 1
18659: ST_TO_ADDR
// if p3 = 7 then
18660: LD_VAR 0 3
18664: PUSH
18665: LD_INT 7
18667: EQUAL
18668: IFFALSE 18678
// sRadar := true ;
18670: LD_ADDR_EXP 84
18674: PUSH
18675: LD_INT 1
18677: ST_TO_ADDR
// if p3 = 8 then
18678: LD_VAR 0 3
18682: PUSH
18683: LD_INT 8
18685: EQUAL
18686: IFFALSE 18696
// sBunker := true ;
18688: LD_ADDR_EXP 85
18692: PUSH
18693: LD_INT 1
18695: ST_TO_ADDR
// if p3 = 9 then
18696: LD_VAR 0 3
18700: PUSH
18701: LD_INT 9
18703: EQUAL
18704: IFFALSE 18714
// sHack := true ;
18706: LD_ADDR_EXP 86
18710: PUSH
18711: LD_INT 1
18713: ST_TO_ADDR
// if p3 = 10 then
18714: LD_VAR 0 3
18718: PUSH
18719: LD_INT 10
18721: EQUAL
18722: IFFALSE 18732
// sFire := true ;
18724: LD_ADDR_EXP 87
18728: PUSH
18729: LD_INT 1
18731: ST_TO_ADDR
// if p3 = 11 then
18732: LD_VAR 0 3
18736: PUSH
18737: LD_INT 11
18739: EQUAL
18740: IFFALSE 18750
// sRefresh := true ;
18742: LD_ADDR_EXP 88
18746: PUSH
18747: LD_INT 1
18749: ST_TO_ADDR
// if p3 = 12 then
18750: LD_VAR 0 3
18754: PUSH
18755: LD_INT 12
18757: EQUAL
18758: IFFALSE 18768
// sExp := true ;
18760: LD_ADDR_EXP 89
18764: PUSH
18765: LD_INT 1
18767: ST_TO_ADDR
// if p3 = 13 then
18768: LD_VAR 0 3
18772: PUSH
18773: LD_INT 13
18775: EQUAL
18776: IFFALSE 18786
// sDepot := true ;
18778: LD_ADDR_EXP 90
18782: PUSH
18783: LD_INT 1
18785: ST_TO_ADDR
// if p3 = 14 then
18786: LD_VAR 0 3
18790: PUSH
18791: LD_INT 14
18793: EQUAL
18794: IFFALSE 18804
// sFlag := true ;
18796: LD_ADDR_EXP 91
18800: PUSH
18801: LD_INT 1
18803: ST_TO_ADDR
// if p3 = 15 then
18804: LD_VAR 0 3
18808: PUSH
18809: LD_INT 15
18811: EQUAL
18812: IFFALSE 18822
// sKamikadze := true ;
18814: LD_ADDR_EXP 99
18818: PUSH
18819: LD_INT 1
18821: ST_TO_ADDR
// if p3 = 16 then
18822: LD_VAR 0 3
18826: PUSH
18827: LD_INT 16
18829: EQUAL
18830: IFFALSE 18840
// sTroll := true ;
18832: LD_ADDR_EXP 100
18836: PUSH
18837: LD_INT 1
18839: ST_TO_ADDR
// if p3 = 17 then
18840: LD_VAR 0 3
18844: PUSH
18845: LD_INT 17
18847: EQUAL
18848: IFFALSE 18858
// sSlow := true ;
18850: LD_ADDR_EXP 101
18854: PUSH
18855: LD_INT 1
18857: ST_TO_ADDR
// if p3 = 18 then
18858: LD_VAR 0 3
18862: PUSH
18863: LD_INT 18
18865: EQUAL
18866: IFFALSE 18876
// sLack := true ;
18868: LD_ADDR_EXP 102
18872: PUSH
18873: LD_INT 1
18875: ST_TO_ADDR
// if p3 = 19 then
18876: LD_VAR 0 3
18880: PUSH
18881: LD_INT 19
18883: EQUAL
18884: IFFALSE 18894
// sTank := true ;
18886: LD_ADDR_EXP 104
18890: PUSH
18891: LD_INT 1
18893: ST_TO_ADDR
// if p3 = 20 then
18894: LD_VAR 0 3
18898: PUSH
18899: LD_INT 20
18901: EQUAL
18902: IFFALSE 18912
// sRemote := true ;
18904: LD_ADDR_EXP 105
18908: PUSH
18909: LD_INT 1
18911: ST_TO_ADDR
// if p3 = 21 then
18912: LD_VAR 0 3
18916: PUSH
18917: LD_INT 21
18919: EQUAL
18920: IFFALSE 18930
// sPowell := true ;
18922: LD_ADDR_EXP 106
18926: PUSH
18927: LD_INT 1
18929: ST_TO_ADDR
// if p3 = 22 then
18930: LD_VAR 0 3
18934: PUSH
18935: LD_INT 22
18937: EQUAL
18938: IFFALSE 18948
// sTeleport := true ;
18940: LD_ADDR_EXP 109
18944: PUSH
18945: LD_INT 1
18947: ST_TO_ADDR
// if p3 = 23 then
18948: LD_VAR 0 3
18952: PUSH
18953: LD_INT 23
18955: EQUAL
18956: IFFALSE 18966
// sOilTower := true ;
18958: LD_ADDR_EXP 111
18962: PUSH
18963: LD_INT 1
18965: ST_TO_ADDR
// if p3 = 24 then
18966: LD_VAR 0 3
18970: PUSH
18971: LD_INT 24
18973: EQUAL
18974: IFFALSE 18984
// sShovel := true ;
18976: LD_ADDR_EXP 112
18980: PUSH
18981: LD_INT 1
18983: ST_TO_ADDR
// if p3 = 25 then
18984: LD_VAR 0 3
18988: PUSH
18989: LD_INT 25
18991: EQUAL
18992: IFFALSE 19002
// sSheik := true ;
18994: LD_ADDR_EXP 113
18998: PUSH
18999: LD_INT 1
19001: ST_TO_ADDR
// if p3 = 26 then
19002: LD_VAR 0 3
19006: PUSH
19007: LD_INT 26
19009: EQUAL
19010: IFFALSE 19020
// sEarthquake := true ;
19012: LD_ADDR_EXP 115
19016: PUSH
19017: LD_INT 1
19019: ST_TO_ADDR
// if p3 = 27 then
19020: LD_VAR 0 3
19024: PUSH
19025: LD_INT 27
19027: EQUAL
19028: IFFALSE 19038
// sAI := true ;
19030: LD_ADDR_EXP 116
19034: PUSH
19035: LD_INT 1
19037: ST_TO_ADDR
// if p3 = 28 then
19038: LD_VAR 0 3
19042: PUSH
19043: LD_INT 28
19045: EQUAL
19046: IFFALSE 19056
// sCargo := true ;
19048: LD_ADDR_EXP 119
19052: PUSH
19053: LD_INT 1
19055: ST_TO_ADDR
// if p3 = 29 then
19056: LD_VAR 0 3
19060: PUSH
19061: LD_INT 29
19063: EQUAL
19064: IFFALSE 19074
// sDLaser := true ;
19066: LD_ADDR_EXP 120
19070: PUSH
19071: LD_INT 1
19073: ST_TO_ADDR
// if p3 = 30 then
19074: LD_VAR 0 3
19078: PUSH
19079: LD_INT 30
19081: EQUAL
19082: IFFALSE 19092
// sExchange := true ;
19084: LD_ADDR_EXP 121
19088: PUSH
19089: LD_INT 1
19091: ST_TO_ADDR
// if p3 = 31 then
19092: LD_VAR 0 3
19096: PUSH
19097: LD_INT 31
19099: EQUAL
19100: IFFALSE 19110
// sFac := true ;
19102: LD_ADDR_EXP 122
19106: PUSH
19107: LD_INT 1
19109: ST_TO_ADDR
// if p3 = 32 then
19110: LD_VAR 0 3
19114: PUSH
19115: LD_INT 32
19117: EQUAL
19118: IFFALSE 19128
// sPower := true ;
19120: LD_ADDR_EXP 123
19124: PUSH
19125: LD_INT 1
19127: ST_TO_ADDR
// if p3 = 33 then
19128: LD_VAR 0 3
19132: PUSH
19133: LD_INT 33
19135: EQUAL
19136: IFFALSE 19146
// sRandom := true ;
19138: LD_ADDR_EXP 124
19142: PUSH
19143: LD_INT 1
19145: ST_TO_ADDR
// if p3 = 34 then
19146: LD_VAR 0 3
19150: PUSH
19151: LD_INT 34
19153: EQUAL
19154: IFFALSE 19164
// sShield := true ;
19156: LD_ADDR_EXP 125
19160: PUSH
19161: LD_INT 1
19163: ST_TO_ADDR
// if p3 = 35 then
19164: LD_VAR 0 3
19168: PUSH
19169: LD_INT 35
19171: EQUAL
19172: IFFALSE 19182
// sTime := true ;
19174: LD_ADDR_EXP 126
19178: PUSH
19179: LD_INT 1
19181: ST_TO_ADDR
// if p3 = 36 then
19182: LD_VAR 0 3
19186: PUSH
19187: LD_INT 36
19189: EQUAL
19190: IFFALSE 19200
// sTools := true ;
19192: LD_ADDR_EXP 127
19196: PUSH
19197: LD_INT 1
19199: ST_TO_ADDR
// if p3 = 101 then
19200: LD_VAR 0 3
19204: PUSH
19205: LD_INT 101
19207: EQUAL
19208: IFFALSE 19218
// sSold := true ;
19210: LD_ADDR_EXP 92
19214: PUSH
19215: LD_INT 1
19217: ST_TO_ADDR
// if p3 = 102 then
19218: LD_VAR 0 3
19222: PUSH
19223: LD_INT 102
19225: EQUAL
19226: IFFALSE 19236
// sDiff := true ;
19228: LD_ADDR_EXP 93
19232: PUSH
19233: LD_INT 1
19235: ST_TO_ADDR
// if p3 = 103 then
19236: LD_VAR 0 3
19240: PUSH
19241: LD_INT 103
19243: EQUAL
19244: IFFALSE 19254
// sFog := true ;
19246: LD_ADDR_EXP 96
19250: PUSH
19251: LD_INT 1
19253: ST_TO_ADDR
// if p3 = 104 then
19254: LD_VAR 0 3
19258: PUSH
19259: LD_INT 104
19261: EQUAL
19262: IFFALSE 19272
// sReset := true ;
19264: LD_ADDR_EXP 97
19268: PUSH
19269: LD_INT 1
19271: ST_TO_ADDR
// if p3 = 105 then
19272: LD_VAR 0 3
19276: PUSH
19277: LD_INT 105
19279: EQUAL
19280: IFFALSE 19290
// sSun := true ;
19282: LD_ADDR_EXP 98
19286: PUSH
19287: LD_INT 1
19289: ST_TO_ADDR
// if p3 = 106 then
19290: LD_VAR 0 3
19294: PUSH
19295: LD_INT 106
19297: EQUAL
19298: IFFALSE 19308
// sTiger := true ;
19300: LD_ADDR_EXP 94
19304: PUSH
19305: LD_INT 1
19307: ST_TO_ADDR
// if p3 = 107 then
19308: LD_VAR 0 3
19312: PUSH
19313: LD_INT 107
19315: EQUAL
19316: IFFALSE 19326
// sBomb := true ;
19318: LD_ADDR_EXP 95
19322: PUSH
19323: LD_INT 1
19325: ST_TO_ADDR
// if p3 = 108 then
19326: LD_VAR 0 3
19330: PUSH
19331: LD_INT 108
19333: EQUAL
19334: IFFALSE 19344
// sWound := true ;
19336: LD_ADDR_EXP 103
19340: PUSH
19341: LD_INT 1
19343: ST_TO_ADDR
// if p3 = 109 then
19344: LD_VAR 0 3
19348: PUSH
19349: LD_INT 109
19351: EQUAL
19352: IFFALSE 19362
// sBetray := true ;
19354: LD_ADDR_EXP 107
19358: PUSH
19359: LD_INT 1
19361: ST_TO_ADDR
// if p3 = 110 then
19362: LD_VAR 0 3
19366: PUSH
19367: LD_INT 110
19369: EQUAL
19370: IFFALSE 19380
// sContamin := true ;
19372: LD_ADDR_EXP 108
19376: PUSH
19377: LD_INT 1
19379: ST_TO_ADDR
// if p3 = 111 then
19380: LD_VAR 0 3
19384: PUSH
19385: LD_INT 111
19387: EQUAL
19388: IFFALSE 19398
// sOil := true ;
19390: LD_ADDR_EXP 110
19394: PUSH
19395: LD_INT 1
19397: ST_TO_ADDR
// if p3 = 112 then
19398: LD_VAR 0 3
19402: PUSH
19403: LD_INT 112
19405: EQUAL
19406: IFFALSE 19416
// sStu := true ;
19408: LD_ADDR_EXP 114
19412: PUSH
19413: LD_INT 1
19415: ST_TO_ADDR
// if p3 = 113 then
19416: LD_VAR 0 3
19420: PUSH
19421: LD_INT 113
19423: EQUAL
19424: IFFALSE 19434
// sBazooka := true ;
19426: LD_ADDR_EXP 117
19430: PUSH
19431: LD_INT 1
19433: ST_TO_ADDR
// if p3 = 114 then
19434: LD_VAR 0 3
19438: PUSH
19439: LD_INT 114
19441: EQUAL
19442: IFFALSE 19452
// sMortar := true ;
19444: LD_ADDR_EXP 118
19448: PUSH
19449: LD_INT 1
19451: ST_TO_ADDR
// if p3 = 115 then
19452: LD_VAR 0 3
19456: PUSH
19457: LD_INT 115
19459: EQUAL
19460: IFFALSE 19470
// sRanger := true ;
19462: LD_ADDR_EXP 128
19466: PUSH
19467: LD_INT 1
19469: ST_TO_ADDR
// end ; if p2 = 101 then
19470: LD_VAR 0 2
19474: PUSH
19475: LD_INT 101
19477: EQUAL
19478: IFFALSE 19606
// begin case p3 of 1 :
19480: LD_VAR 0 3
19484: PUSH
19485: LD_INT 1
19487: DOUBLE
19488: EQUAL
19489: IFTRUE 19493
19491: GO 19500
19493: POP
// hHackUnlimitedResources ; 2 :
19494: CALL 30643 0 0
19498: GO 19606
19500: LD_INT 2
19502: DOUBLE
19503: EQUAL
19504: IFTRUE 19508
19506: GO 19515
19508: POP
// hHackSetLevel10 ; 3 :
19509: CALL 30776 0 0
19513: GO 19606
19515: LD_INT 3
19517: DOUBLE
19518: EQUAL
19519: IFTRUE 19523
19521: GO 19530
19523: POP
// hHackSetLevel10YourUnits ; 4 :
19524: CALL 30861 0 0
19528: GO 19606
19530: LD_INT 4
19532: DOUBLE
19533: EQUAL
19534: IFTRUE 19538
19536: GO 19545
19538: POP
// hHackInvincible ; 5 :
19539: CALL 31309 0 0
19543: GO 19606
19545: LD_INT 5
19547: DOUBLE
19548: EQUAL
19549: IFTRUE 19553
19551: GO 19560
19553: POP
// hHackInvisible ; 6 :
19554: CALL 31420 0 0
19558: GO 19606
19560: LD_INT 6
19562: DOUBLE
19563: EQUAL
19564: IFTRUE 19568
19566: GO 19575
19568: POP
// hHackChangeYourSide ; 7 :
19569: CALL 31477 0 0
19573: GO 19606
19575: LD_INT 7
19577: DOUBLE
19578: EQUAL
19579: IFTRUE 19583
19581: GO 19590
19583: POP
// hHackChangeUnitSide ; 8 :
19584: CALL 31519 0 0
19588: GO 19606
19590: LD_INT 8
19592: DOUBLE
19593: EQUAL
19594: IFTRUE 19598
19596: GO 19605
19598: POP
// hHackFog ; end ;
19599: CALL 31620 0 0
19603: GO 19606
19605: POP
// end ; end ;
19606: LD_VAR 0 7
19610: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19611: GO 19613
19613: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19614: LD_STRING initStreamRollete();
19616: PPUSH
19617: CALL_OW 559
// InitStreamMode ;
19621: CALL 19630 0 0
// DefineStreamItems ( ) ;
19625: CALL 20070 0 0
// end ;
19629: END
// function InitStreamMode ; begin
19630: LD_INT 0
19632: PPUSH
// streamModeActive := false ;
19633: LD_ADDR_EXP 75
19637: PUSH
19638: LD_INT 0
19640: ST_TO_ADDR
// normalCounter := 36 ;
19641: LD_ADDR_EXP 76
19645: PUSH
19646: LD_INT 36
19648: ST_TO_ADDR
// hardcoreCounter := 16 ;
19649: LD_ADDR_EXP 77
19653: PUSH
19654: LD_INT 16
19656: ST_TO_ADDR
// sRocket := false ;
19657: LD_ADDR_EXP 80
19661: PUSH
19662: LD_INT 0
19664: ST_TO_ADDR
// sSpeed := false ;
19665: LD_ADDR_EXP 79
19669: PUSH
19670: LD_INT 0
19672: ST_TO_ADDR
// sEngine := false ;
19673: LD_ADDR_EXP 81
19677: PUSH
19678: LD_INT 0
19680: ST_TO_ADDR
// sSpec := false ;
19681: LD_ADDR_EXP 78
19685: PUSH
19686: LD_INT 0
19688: ST_TO_ADDR
// sLevel := false ;
19689: LD_ADDR_EXP 82
19693: PUSH
19694: LD_INT 0
19696: ST_TO_ADDR
// sArmoury := false ;
19697: LD_ADDR_EXP 83
19701: PUSH
19702: LD_INT 0
19704: ST_TO_ADDR
// sRadar := false ;
19705: LD_ADDR_EXP 84
19709: PUSH
19710: LD_INT 0
19712: ST_TO_ADDR
// sBunker := false ;
19713: LD_ADDR_EXP 85
19717: PUSH
19718: LD_INT 0
19720: ST_TO_ADDR
// sHack := false ;
19721: LD_ADDR_EXP 86
19725: PUSH
19726: LD_INT 0
19728: ST_TO_ADDR
// sFire := false ;
19729: LD_ADDR_EXP 87
19733: PUSH
19734: LD_INT 0
19736: ST_TO_ADDR
// sRefresh := false ;
19737: LD_ADDR_EXP 88
19741: PUSH
19742: LD_INT 0
19744: ST_TO_ADDR
// sExp := false ;
19745: LD_ADDR_EXP 89
19749: PUSH
19750: LD_INT 0
19752: ST_TO_ADDR
// sDepot := false ;
19753: LD_ADDR_EXP 90
19757: PUSH
19758: LD_INT 0
19760: ST_TO_ADDR
// sFlag := false ;
19761: LD_ADDR_EXP 91
19765: PUSH
19766: LD_INT 0
19768: ST_TO_ADDR
// sKamikadze := false ;
19769: LD_ADDR_EXP 99
19773: PUSH
19774: LD_INT 0
19776: ST_TO_ADDR
// sTroll := false ;
19777: LD_ADDR_EXP 100
19781: PUSH
19782: LD_INT 0
19784: ST_TO_ADDR
// sSlow := false ;
19785: LD_ADDR_EXP 101
19789: PUSH
19790: LD_INT 0
19792: ST_TO_ADDR
// sLack := false ;
19793: LD_ADDR_EXP 102
19797: PUSH
19798: LD_INT 0
19800: ST_TO_ADDR
// sTank := false ;
19801: LD_ADDR_EXP 104
19805: PUSH
19806: LD_INT 0
19808: ST_TO_ADDR
// sRemote := false ;
19809: LD_ADDR_EXP 105
19813: PUSH
19814: LD_INT 0
19816: ST_TO_ADDR
// sPowell := false ;
19817: LD_ADDR_EXP 106
19821: PUSH
19822: LD_INT 0
19824: ST_TO_ADDR
// sTeleport := false ;
19825: LD_ADDR_EXP 109
19829: PUSH
19830: LD_INT 0
19832: ST_TO_ADDR
// sOilTower := false ;
19833: LD_ADDR_EXP 111
19837: PUSH
19838: LD_INT 0
19840: ST_TO_ADDR
// sShovel := false ;
19841: LD_ADDR_EXP 112
19845: PUSH
19846: LD_INT 0
19848: ST_TO_ADDR
// sSheik := false ;
19849: LD_ADDR_EXP 113
19853: PUSH
19854: LD_INT 0
19856: ST_TO_ADDR
// sEarthquake := false ;
19857: LD_ADDR_EXP 115
19861: PUSH
19862: LD_INT 0
19864: ST_TO_ADDR
// sAI := false ;
19865: LD_ADDR_EXP 116
19869: PUSH
19870: LD_INT 0
19872: ST_TO_ADDR
// sCargo := false ;
19873: LD_ADDR_EXP 119
19877: PUSH
19878: LD_INT 0
19880: ST_TO_ADDR
// sDLaser := false ;
19881: LD_ADDR_EXP 120
19885: PUSH
19886: LD_INT 0
19888: ST_TO_ADDR
// sExchange := false ;
19889: LD_ADDR_EXP 121
19893: PUSH
19894: LD_INT 0
19896: ST_TO_ADDR
// sFac := false ;
19897: LD_ADDR_EXP 122
19901: PUSH
19902: LD_INT 0
19904: ST_TO_ADDR
// sPower := false ;
19905: LD_ADDR_EXP 123
19909: PUSH
19910: LD_INT 0
19912: ST_TO_ADDR
// sRandom := false ;
19913: LD_ADDR_EXP 124
19917: PUSH
19918: LD_INT 0
19920: ST_TO_ADDR
// sShield := false ;
19921: LD_ADDR_EXP 125
19925: PUSH
19926: LD_INT 0
19928: ST_TO_ADDR
// sTime := false ;
19929: LD_ADDR_EXP 126
19933: PUSH
19934: LD_INT 0
19936: ST_TO_ADDR
// sTools := false ;
19937: LD_ADDR_EXP 127
19941: PUSH
19942: LD_INT 0
19944: ST_TO_ADDR
// sSold := false ;
19945: LD_ADDR_EXP 92
19949: PUSH
19950: LD_INT 0
19952: ST_TO_ADDR
// sDiff := false ;
19953: LD_ADDR_EXP 93
19957: PUSH
19958: LD_INT 0
19960: ST_TO_ADDR
// sFog := false ;
19961: LD_ADDR_EXP 96
19965: PUSH
19966: LD_INT 0
19968: ST_TO_ADDR
// sReset := false ;
19969: LD_ADDR_EXP 97
19973: PUSH
19974: LD_INT 0
19976: ST_TO_ADDR
// sSun := false ;
19977: LD_ADDR_EXP 98
19981: PUSH
19982: LD_INT 0
19984: ST_TO_ADDR
// sTiger := false ;
19985: LD_ADDR_EXP 94
19989: PUSH
19990: LD_INT 0
19992: ST_TO_ADDR
// sBomb := false ;
19993: LD_ADDR_EXP 95
19997: PUSH
19998: LD_INT 0
20000: ST_TO_ADDR
// sWound := false ;
20001: LD_ADDR_EXP 103
20005: PUSH
20006: LD_INT 0
20008: ST_TO_ADDR
// sBetray := false ;
20009: LD_ADDR_EXP 107
20013: PUSH
20014: LD_INT 0
20016: ST_TO_ADDR
// sContamin := false ;
20017: LD_ADDR_EXP 108
20021: PUSH
20022: LD_INT 0
20024: ST_TO_ADDR
// sOil := false ;
20025: LD_ADDR_EXP 110
20029: PUSH
20030: LD_INT 0
20032: ST_TO_ADDR
// sStu := false ;
20033: LD_ADDR_EXP 114
20037: PUSH
20038: LD_INT 0
20040: ST_TO_ADDR
// sBazooka := false ;
20041: LD_ADDR_EXP 117
20045: PUSH
20046: LD_INT 0
20048: ST_TO_ADDR
// sMortar := false ;
20049: LD_ADDR_EXP 118
20053: PUSH
20054: LD_INT 0
20056: ST_TO_ADDR
// sRanger := false ;
20057: LD_ADDR_EXP 128
20061: PUSH
20062: LD_INT 0
20064: ST_TO_ADDR
// end ;
20065: LD_VAR 0 1
20069: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20070: LD_INT 0
20072: PPUSH
20073: PPUSH
20074: PPUSH
20075: PPUSH
20076: PPUSH
// result := [ ] ;
20077: LD_ADDR_VAR 0 1
20081: PUSH
20082: EMPTY
20083: ST_TO_ADDR
// if campaign_id = 1 then
20084: LD_OWVAR 69
20088: PUSH
20089: LD_INT 1
20091: EQUAL
20092: IFFALSE 23030
// begin case mission_number of 1 :
20094: LD_OWVAR 70
20098: PUSH
20099: LD_INT 1
20101: DOUBLE
20102: EQUAL
20103: IFTRUE 20107
20105: GO 20171
20107: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20108: LD_ADDR_VAR 0 1
20112: PUSH
20113: LD_INT 2
20115: PUSH
20116: LD_INT 4
20118: PUSH
20119: LD_INT 11
20121: PUSH
20122: LD_INT 12
20124: PUSH
20125: LD_INT 15
20127: PUSH
20128: LD_INT 16
20130: PUSH
20131: LD_INT 22
20133: PUSH
20134: LD_INT 23
20136: PUSH
20137: LD_INT 26
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 101
20153: PUSH
20154: LD_INT 102
20156: PUSH
20157: LD_INT 106
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: LIST
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: ST_TO_ADDR
20169: GO 23028
20171: LD_INT 2
20173: DOUBLE
20174: EQUAL
20175: IFTRUE 20179
20177: GO 20251
20179: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20180: LD_ADDR_VAR 0 1
20184: PUSH
20185: LD_INT 2
20187: PUSH
20188: LD_INT 4
20190: PUSH
20191: LD_INT 11
20193: PUSH
20194: LD_INT 12
20196: PUSH
20197: LD_INT 15
20199: PUSH
20200: LD_INT 16
20202: PUSH
20203: LD_INT 22
20205: PUSH
20206: LD_INT 23
20208: PUSH
20209: LD_INT 26
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 101
20225: PUSH
20226: LD_INT 102
20228: PUSH
20229: LD_INT 105
20231: PUSH
20232: LD_INT 106
20234: PUSH
20235: LD_INT 108
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: ST_TO_ADDR
20249: GO 23028
20251: LD_INT 3
20253: DOUBLE
20254: EQUAL
20255: IFTRUE 20259
20257: GO 20335
20259: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20260: LD_ADDR_VAR 0 1
20264: PUSH
20265: LD_INT 2
20267: PUSH
20268: LD_INT 4
20270: PUSH
20271: LD_INT 5
20273: PUSH
20274: LD_INT 11
20276: PUSH
20277: LD_INT 12
20279: PUSH
20280: LD_INT 15
20282: PUSH
20283: LD_INT 16
20285: PUSH
20286: LD_INT 22
20288: PUSH
20289: LD_INT 26
20291: PUSH
20292: LD_INT 36
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 101
20309: PUSH
20310: LD_INT 102
20312: PUSH
20313: LD_INT 105
20315: PUSH
20316: LD_INT 106
20318: PUSH
20319: LD_INT 108
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: ST_TO_ADDR
20333: GO 23028
20335: LD_INT 4
20337: DOUBLE
20338: EQUAL
20339: IFTRUE 20343
20341: GO 20427
20343: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20344: LD_ADDR_VAR 0 1
20348: PUSH
20349: LD_INT 2
20351: PUSH
20352: LD_INT 4
20354: PUSH
20355: LD_INT 5
20357: PUSH
20358: LD_INT 8
20360: PUSH
20361: LD_INT 11
20363: PUSH
20364: LD_INT 12
20366: PUSH
20367: LD_INT 15
20369: PUSH
20370: LD_INT 16
20372: PUSH
20373: LD_INT 22
20375: PUSH
20376: LD_INT 23
20378: PUSH
20379: LD_INT 26
20381: PUSH
20382: LD_INT 36
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 101
20401: PUSH
20402: LD_INT 102
20404: PUSH
20405: LD_INT 105
20407: PUSH
20408: LD_INT 106
20410: PUSH
20411: LD_INT 108
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: ST_TO_ADDR
20425: GO 23028
20427: LD_INT 5
20429: DOUBLE
20430: EQUAL
20431: IFTRUE 20435
20433: GO 20535
20435: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20436: LD_ADDR_VAR 0 1
20440: PUSH
20441: LD_INT 2
20443: PUSH
20444: LD_INT 4
20446: PUSH
20447: LD_INT 5
20449: PUSH
20450: LD_INT 6
20452: PUSH
20453: LD_INT 8
20455: PUSH
20456: LD_INT 11
20458: PUSH
20459: LD_INT 12
20461: PUSH
20462: LD_INT 15
20464: PUSH
20465: LD_INT 16
20467: PUSH
20468: LD_INT 22
20470: PUSH
20471: LD_INT 23
20473: PUSH
20474: LD_INT 25
20476: PUSH
20477: LD_INT 26
20479: PUSH
20480: LD_INT 36
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 101
20501: PUSH
20502: LD_INT 102
20504: PUSH
20505: LD_INT 105
20507: PUSH
20508: LD_INT 106
20510: PUSH
20511: LD_INT 108
20513: PUSH
20514: LD_INT 109
20516: PUSH
20517: LD_INT 112
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: ST_TO_ADDR
20533: GO 23028
20535: LD_INT 6
20537: DOUBLE
20538: EQUAL
20539: IFTRUE 20543
20541: GO 20663
20543: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20544: LD_ADDR_VAR 0 1
20548: PUSH
20549: LD_INT 2
20551: PUSH
20552: LD_INT 4
20554: PUSH
20555: LD_INT 5
20557: PUSH
20558: LD_INT 6
20560: PUSH
20561: LD_INT 8
20563: PUSH
20564: LD_INT 11
20566: PUSH
20567: LD_INT 12
20569: PUSH
20570: LD_INT 15
20572: PUSH
20573: LD_INT 16
20575: PUSH
20576: LD_INT 20
20578: PUSH
20579: LD_INT 21
20581: PUSH
20582: LD_INT 22
20584: PUSH
20585: LD_INT 23
20587: PUSH
20588: LD_INT 25
20590: PUSH
20591: LD_INT 26
20593: PUSH
20594: LD_INT 30
20596: PUSH
20597: LD_INT 31
20599: PUSH
20600: LD_INT 32
20602: PUSH
20603: LD_INT 36
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 101
20629: PUSH
20630: LD_INT 102
20632: PUSH
20633: LD_INT 105
20635: PUSH
20636: LD_INT 106
20638: PUSH
20639: LD_INT 108
20641: PUSH
20642: LD_INT 109
20644: PUSH
20645: LD_INT 112
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: ST_TO_ADDR
20661: GO 23028
20663: LD_INT 7
20665: DOUBLE
20666: EQUAL
20667: IFTRUE 20671
20669: GO 20771
20671: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20672: LD_ADDR_VAR 0 1
20676: PUSH
20677: LD_INT 2
20679: PUSH
20680: LD_INT 4
20682: PUSH
20683: LD_INT 5
20685: PUSH
20686: LD_INT 7
20688: PUSH
20689: LD_INT 11
20691: PUSH
20692: LD_INT 12
20694: PUSH
20695: LD_INT 15
20697: PUSH
20698: LD_INT 16
20700: PUSH
20701: LD_INT 20
20703: PUSH
20704: LD_INT 21
20706: PUSH
20707: LD_INT 22
20709: PUSH
20710: LD_INT 23
20712: PUSH
20713: LD_INT 25
20715: PUSH
20716: LD_INT 26
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 101
20737: PUSH
20738: LD_INT 102
20740: PUSH
20741: LD_INT 103
20743: PUSH
20744: LD_INT 105
20746: PUSH
20747: LD_INT 106
20749: PUSH
20750: LD_INT 108
20752: PUSH
20753: LD_INT 112
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: ST_TO_ADDR
20769: GO 23028
20771: LD_INT 8
20773: DOUBLE
20774: EQUAL
20775: IFTRUE 20779
20777: GO 20907
20779: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20780: LD_ADDR_VAR 0 1
20784: PUSH
20785: LD_INT 2
20787: PUSH
20788: LD_INT 4
20790: PUSH
20791: LD_INT 5
20793: PUSH
20794: LD_INT 6
20796: PUSH
20797: LD_INT 7
20799: PUSH
20800: LD_INT 8
20802: PUSH
20803: LD_INT 11
20805: PUSH
20806: LD_INT 12
20808: PUSH
20809: LD_INT 15
20811: PUSH
20812: LD_INT 16
20814: PUSH
20815: LD_INT 20
20817: PUSH
20818: LD_INT 21
20820: PUSH
20821: LD_INT 22
20823: PUSH
20824: LD_INT 23
20826: PUSH
20827: LD_INT 25
20829: PUSH
20830: LD_INT 26
20832: PUSH
20833: LD_INT 30
20835: PUSH
20836: LD_INT 31
20838: PUSH
20839: LD_INT 32
20841: PUSH
20842: LD_INT 36
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 101
20869: PUSH
20870: LD_INT 102
20872: PUSH
20873: LD_INT 103
20875: PUSH
20876: LD_INT 105
20878: PUSH
20879: LD_INT 106
20881: PUSH
20882: LD_INT 108
20884: PUSH
20885: LD_INT 109
20887: PUSH
20888: LD_INT 112
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: ST_TO_ADDR
20905: GO 23028
20907: LD_INT 9
20909: DOUBLE
20910: EQUAL
20911: IFTRUE 20915
20913: GO 21051
20915: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
20916: LD_ADDR_VAR 0 1
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: LD_INT 4
20926: PUSH
20927: LD_INT 5
20929: PUSH
20930: LD_INT 6
20932: PUSH
20933: LD_INT 7
20935: PUSH
20936: LD_INT 8
20938: PUSH
20939: LD_INT 11
20941: PUSH
20942: LD_INT 12
20944: PUSH
20945: LD_INT 15
20947: PUSH
20948: LD_INT 16
20950: PUSH
20951: LD_INT 20
20953: PUSH
20954: LD_INT 21
20956: PUSH
20957: LD_INT 22
20959: PUSH
20960: LD_INT 23
20962: PUSH
20963: LD_INT 25
20965: PUSH
20966: LD_INT 26
20968: PUSH
20969: LD_INT 28
20971: PUSH
20972: LD_INT 30
20974: PUSH
20975: LD_INT 31
20977: PUSH
20978: LD_INT 32
20980: PUSH
20981: LD_INT 36
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 101
21009: PUSH
21010: LD_INT 102
21012: PUSH
21013: LD_INT 103
21015: PUSH
21016: LD_INT 105
21018: PUSH
21019: LD_INT 106
21021: PUSH
21022: LD_INT 108
21024: PUSH
21025: LD_INT 109
21027: PUSH
21028: LD_INT 112
21030: PUSH
21031: LD_INT 114
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: ST_TO_ADDR
21049: GO 23028
21051: LD_INT 10
21053: DOUBLE
21054: EQUAL
21055: IFTRUE 21059
21057: GO 21243
21059: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21060: LD_ADDR_VAR 0 1
21064: PUSH
21065: LD_INT 2
21067: PUSH
21068: LD_INT 4
21070: PUSH
21071: LD_INT 5
21073: PUSH
21074: LD_INT 6
21076: PUSH
21077: LD_INT 7
21079: PUSH
21080: LD_INT 8
21082: PUSH
21083: LD_INT 9
21085: PUSH
21086: LD_INT 10
21088: PUSH
21089: LD_INT 11
21091: PUSH
21092: LD_INT 12
21094: PUSH
21095: LD_INT 13
21097: PUSH
21098: LD_INT 14
21100: PUSH
21101: LD_INT 15
21103: PUSH
21104: LD_INT 16
21106: PUSH
21107: LD_INT 17
21109: PUSH
21110: LD_INT 18
21112: PUSH
21113: LD_INT 19
21115: PUSH
21116: LD_INT 20
21118: PUSH
21119: LD_INT 21
21121: PUSH
21122: LD_INT 22
21124: PUSH
21125: LD_INT 23
21127: PUSH
21128: LD_INT 24
21130: PUSH
21131: LD_INT 25
21133: PUSH
21134: LD_INT 26
21136: PUSH
21137: LD_INT 28
21139: PUSH
21140: LD_INT 30
21142: PUSH
21143: LD_INT 31
21145: PUSH
21146: LD_INT 32
21148: PUSH
21149: LD_INT 36
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 101
21185: PUSH
21186: LD_INT 102
21188: PUSH
21189: LD_INT 103
21191: PUSH
21192: LD_INT 104
21194: PUSH
21195: LD_INT 105
21197: PUSH
21198: LD_INT 106
21200: PUSH
21201: LD_INT 107
21203: PUSH
21204: LD_INT 108
21206: PUSH
21207: LD_INT 109
21209: PUSH
21210: LD_INT 110
21212: PUSH
21213: LD_INT 111
21215: PUSH
21216: LD_INT 112
21218: PUSH
21219: LD_INT 114
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: ST_TO_ADDR
21241: GO 23028
21243: LD_INT 11
21245: DOUBLE
21246: EQUAL
21247: IFTRUE 21251
21249: GO 21443
21251: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21252: LD_ADDR_VAR 0 1
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: LD_INT 3
21262: PUSH
21263: LD_INT 4
21265: PUSH
21266: LD_INT 5
21268: PUSH
21269: LD_INT 6
21271: PUSH
21272: LD_INT 7
21274: PUSH
21275: LD_INT 8
21277: PUSH
21278: LD_INT 9
21280: PUSH
21281: LD_INT 10
21283: PUSH
21284: LD_INT 11
21286: PUSH
21287: LD_INT 12
21289: PUSH
21290: LD_INT 13
21292: PUSH
21293: LD_INT 14
21295: PUSH
21296: LD_INT 15
21298: PUSH
21299: LD_INT 16
21301: PUSH
21302: LD_INT 17
21304: PUSH
21305: LD_INT 18
21307: PUSH
21308: LD_INT 19
21310: PUSH
21311: LD_INT 20
21313: PUSH
21314: LD_INT 21
21316: PUSH
21317: LD_INT 22
21319: PUSH
21320: LD_INT 23
21322: PUSH
21323: LD_INT 24
21325: PUSH
21326: LD_INT 25
21328: PUSH
21329: LD_INT 26
21331: PUSH
21332: LD_INT 28
21334: PUSH
21335: LD_INT 30
21337: PUSH
21338: LD_INT 31
21340: PUSH
21341: LD_INT 32
21343: PUSH
21344: LD_INT 34
21346: PUSH
21347: LD_INT 36
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 101
21385: PUSH
21386: LD_INT 102
21388: PUSH
21389: LD_INT 103
21391: PUSH
21392: LD_INT 104
21394: PUSH
21395: LD_INT 105
21397: PUSH
21398: LD_INT 106
21400: PUSH
21401: LD_INT 107
21403: PUSH
21404: LD_INT 108
21406: PUSH
21407: LD_INT 109
21409: PUSH
21410: LD_INT 110
21412: PUSH
21413: LD_INT 111
21415: PUSH
21416: LD_INT 112
21418: PUSH
21419: LD_INT 114
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: ST_TO_ADDR
21441: GO 23028
21443: LD_INT 12
21445: DOUBLE
21446: EQUAL
21447: IFTRUE 21451
21449: GO 21659
21451: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21452: LD_ADDR_VAR 0 1
21456: PUSH
21457: LD_INT 1
21459: PUSH
21460: LD_INT 2
21462: PUSH
21463: LD_INT 3
21465: PUSH
21466: LD_INT 4
21468: PUSH
21469: LD_INT 5
21471: PUSH
21472: LD_INT 6
21474: PUSH
21475: LD_INT 7
21477: PUSH
21478: LD_INT 8
21480: PUSH
21481: LD_INT 9
21483: PUSH
21484: LD_INT 10
21486: PUSH
21487: LD_INT 11
21489: PUSH
21490: LD_INT 12
21492: PUSH
21493: LD_INT 13
21495: PUSH
21496: LD_INT 14
21498: PUSH
21499: LD_INT 15
21501: PUSH
21502: LD_INT 16
21504: PUSH
21505: LD_INT 17
21507: PUSH
21508: LD_INT 18
21510: PUSH
21511: LD_INT 19
21513: PUSH
21514: LD_INT 20
21516: PUSH
21517: LD_INT 21
21519: PUSH
21520: LD_INT 22
21522: PUSH
21523: LD_INT 23
21525: PUSH
21526: LD_INT 24
21528: PUSH
21529: LD_INT 25
21531: PUSH
21532: LD_INT 26
21534: PUSH
21535: LD_INT 27
21537: PUSH
21538: LD_INT 28
21540: PUSH
21541: LD_INT 30
21543: PUSH
21544: LD_INT 31
21546: PUSH
21547: LD_INT 32
21549: PUSH
21550: LD_INT 33
21552: PUSH
21553: LD_INT 34
21555: PUSH
21556: LD_INT 36
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: PUSH
21595: LD_INT 101
21597: PUSH
21598: LD_INT 102
21600: PUSH
21601: LD_INT 103
21603: PUSH
21604: LD_INT 104
21606: PUSH
21607: LD_INT 105
21609: PUSH
21610: LD_INT 106
21612: PUSH
21613: LD_INT 107
21615: PUSH
21616: LD_INT 108
21618: PUSH
21619: LD_INT 109
21621: PUSH
21622: LD_INT 110
21624: PUSH
21625: LD_INT 111
21627: PUSH
21628: LD_INT 112
21630: PUSH
21631: LD_INT 113
21633: PUSH
21634: LD_INT 114
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: ST_TO_ADDR
21657: GO 23028
21659: LD_INT 13
21661: DOUBLE
21662: EQUAL
21663: IFTRUE 21667
21665: GO 21863
21667: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21668: LD_ADDR_VAR 0 1
21672: PUSH
21673: LD_INT 1
21675: PUSH
21676: LD_INT 2
21678: PUSH
21679: LD_INT 3
21681: PUSH
21682: LD_INT 4
21684: PUSH
21685: LD_INT 5
21687: PUSH
21688: LD_INT 8
21690: PUSH
21691: LD_INT 9
21693: PUSH
21694: LD_INT 10
21696: PUSH
21697: LD_INT 11
21699: PUSH
21700: LD_INT 12
21702: PUSH
21703: LD_INT 14
21705: PUSH
21706: LD_INT 15
21708: PUSH
21709: LD_INT 16
21711: PUSH
21712: LD_INT 17
21714: PUSH
21715: LD_INT 18
21717: PUSH
21718: LD_INT 19
21720: PUSH
21721: LD_INT 20
21723: PUSH
21724: LD_INT 21
21726: PUSH
21727: LD_INT 22
21729: PUSH
21730: LD_INT 23
21732: PUSH
21733: LD_INT 24
21735: PUSH
21736: LD_INT 25
21738: PUSH
21739: LD_INT 26
21741: PUSH
21742: LD_INT 27
21744: PUSH
21745: LD_INT 28
21747: PUSH
21748: LD_INT 30
21750: PUSH
21751: LD_INT 31
21753: PUSH
21754: LD_INT 32
21756: PUSH
21757: LD_INT 33
21759: PUSH
21760: LD_INT 34
21762: PUSH
21763: LD_INT 36
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 101
21801: PUSH
21802: LD_INT 102
21804: PUSH
21805: LD_INT 103
21807: PUSH
21808: LD_INT 104
21810: PUSH
21811: LD_INT 105
21813: PUSH
21814: LD_INT 106
21816: PUSH
21817: LD_INT 107
21819: PUSH
21820: LD_INT 108
21822: PUSH
21823: LD_INT 109
21825: PUSH
21826: LD_INT 110
21828: PUSH
21829: LD_INT 111
21831: PUSH
21832: LD_INT 112
21834: PUSH
21835: LD_INT 113
21837: PUSH
21838: LD_INT 114
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: ST_TO_ADDR
21861: GO 23028
21863: LD_INT 14
21865: DOUBLE
21866: EQUAL
21867: IFTRUE 21871
21869: GO 22083
21871: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21872: LD_ADDR_VAR 0 1
21876: PUSH
21877: LD_INT 1
21879: PUSH
21880: LD_INT 2
21882: PUSH
21883: LD_INT 3
21885: PUSH
21886: LD_INT 4
21888: PUSH
21889: LD_INT 5
21891: PUSH
21892: LD_INT 6
21894: PUSH
21895: LD_INT 7
21897: PUSH
21898: LD_INT 8
21900: PUSH
21901: LD_INT 9
21903: PUSH
21904: LD_INT 10
21906: PUSH
21907: LD_INT 11
21909: PUSH
21910: LD_INT 12
21912: PUSH
21913: LD_INT 13
21915: PUSH
21916: LD_INT 14
21918: PUSH
21919: LD_INT 15
21921: PUSH
21922: LD_INT 16
21924: PUSH
21925: LD_INT 17
21927: PUSH
21928: LD_INT 18
21930: PUSH
21931: LD_INT 19
21933: PUSH
21934: LD_INT 20
21936: PUSH
21937: LD_INT 21
21939: PUSH
21940: LD_INT 22
21942: PUSH
21943: LD_INT 23
21945: PUSH
21946: LD_INT 24
21948: PUSH
21949: LD_INT 25
21951: PUSH
21952: LD_INT 26
21954: PUSH
21955: LD_INT 27
21957: PUSH
21958: LD_INT 28
21960: PUSH
21961: LD_INT 29
21963: PUSH
21964: LD_INT 30
21966: PUSH
21967: LD_INT 31
21969: PUSH
21970: LD_INT 32
21972: PUSH
21973: LD_INT 33
21975: PUSH
21976: LD_INT 34
21978: PUSH
21979: LD_INT 36
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 101
22021: PUSH
22022: LD_INT 102
22024: PUSH
22025: LD_INT 103
22027: PUSH
22028: LD_INT 104
22030: PUSH
22031: LD_INT 105
22033: PUSH
22034: LD_INT 106
22036: PUSH
22037: LD_INT 107
22039: PUSH
22040: LD_INT 108
22042: PUSH
22043: LD_INT 109
22045: PUSH
22046: LD_INT 110
22048: PUSH
22049: LD_INT 111
22051: PUSH
22052: LD_INT 112
22054: PUSH
22055: LD_INT 113
22057: PUSH
22058: LD_INT 114
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: ST_TO_ADDR
22081: GO 23028
22083: LD_INT 15
22085: DOUBLE
22086: EQUAL
22087: IFTRUE 22091
22089: GO 22303
22091: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22092: LD_ADDR_VAR 0 1
22096: PUSH
22097: LD_INT 1
22099: PUSH
22100: LD_INT 2
22102: PUSH
22103: LD_INT 3
22105: PUSH
22106: LD_INT 4
22108: PUSH
22109: LD_INT 5
22111: PUSH
22112: LD_INT 6
22114: PUSH
22115: LD_INT 7
22117: PUSH
22118: LD_INT 8
22120: PUSH
22121: LD_INT 9
22123: PUSH
22124: LD_INT 10
22126: PUSH
22127: LD_INT 11
22129: PUSH
22130: LD_INT 12
22132: PUSH
22133: LD_INT 13
22135: PUSH
22136: LD_INT 14
22138: PUSH
22139: LD_INT 15
22141: PUSH
22142: LD_INT 16
22144: PUSH
22145: LD_INT 17
22147: PUSH
22148: LD_INT 18
22150: PUSH
22151: LD_INT 19
22153: PUSH
22154: LD_INT 20
22156: PUSH
22157: LD_INT 21
22159: PUSH
22160: LD_INT 22
22162: PUSH
22163: LD_INT 23
22165: PUSH
22166: LD_INT 24
22168: PUSH
22169: LD_INT 25
22171: PUSH
22172: LD_INT 26
22174: PUSH
22175: LD_INT 27
22177: PUSH
22178: LD_INT 28
22180: PUSH
22181: LD_INT 29
22183: PUSH
22184: LD_INT 30
22186: PUSH
22187: LD_INT 31
22189: PUSH
22190: LD_INT 32
22192: PUSH
22193: LD_INT 33
22195: PUSH
22196: LD_INT 34
22198: PUSH
22199: LD_INT 36
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 101
22241: PUSH
22242: LD_INT 102
22244: PUSH
22245: LD_INT 103
22247: PUSH
22248: LD_INT 104
22250: PUSH
22251: LD_INT 105
22253: PUSH
22254: LD_INT 106
22256: PUSH
22257: LD_INT 107
22259: PUSH
22260: LD_INT 108
22262: PUSH
22263: LD_INT 109
22265: PUSH
22266: LD_INT 110
22268: PUSH
22269: LD_INT 111
22271: PUSH
22272: LD_INT 112
22274: PUSH
22275: LD_INT 113
22277: PUSH
22278: LD_INT 114
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: ST_TO_ADDR
22301: GO 23028
22303: LD_INT 16
22305: DOUBLE
22306: EQUAL
22307: IFTRUE 22311
22309: GO 22435
22311: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22312: LD_ADDR_VAR 0 1
22316: PUSH
22317: LD_INT 2
22319: PUSH
22320: LD_INT 4
22322: PUSH
22323: LD_INT 5
22325: PUSH
22326: LD_INT 7
22328: PUSH
22329: LD_INT 11
22331: PUSH
22332: LD_INT 12
22334: PUSH
22335: LD_INT 15
22337: PUSH
22338: LD_INT 16
22340: PUSH
22341: LD_INT 20
22343: PUSH
22344: LD_INT 21
22346: PUSH
22347: LD_INT 22
22349: PUSH
22350: LD_INT 23
22352: PUSH
22353: LD_INT 25
22355: PUSH
22356: LD_INT 26
22358: PUSH
22359: LD_INT 30
22361: PUSH
22362: LD_INT 31
22364: PUSH
22365: LD_INT 32
22367: PUSH
22368: LD_INT 33
22370: PUSH
22371: LD_INT 34
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 101
22397: PUSH
22398: LD_INT 102
22400: PUSH
22401: LD_INT 103
22403: PUSH
22404: LD_INT 106
22406: PUSH
22407: LD_INT 108
22409: PUSH
22410: LD_INT 112
22412: PUSH
22413: LD_INT 113
22415: PUSH
22416: LD_INT 114
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: ST_TO_ADDR
22433: GO 23028
22435: LD_INT 17
22437: DOUBLE
22438: EQUAL
22439: IFTRUE 22443
22441: GO 22655
22443: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22444: LD_ADDR_VAR 0 1
22448: PUSH
22449: LD_INT 1
22451: PUSH
22452: LD_INT 2
22454: PUSH
22455: LD_INT 3
22457: PUSH
22458: LD_INT 4
22460: PUSH
22461: LD_INT 5
22463: PUSH
22464: LD_INT 6
22466: PUSH
22467: LD_INT 7
22469: PUSH
22470: LD_INT 8
22472: PUSH
22473: LD_INT 9
22475: PUSH
22476: LD_INT 10
22478: PUSH
22479: LD_INT 11
22481: PUSH
22482: LD_INT 12
22484: PUSH
22485: LD_INT 13
22487: PUSH
22488: LD_INT 14
22490: PUSH
22491: LD_INT 15
22493: PUSH
22494: LD_INT 16
22496: PUSH
22497: LD_INT 17
22499: PUSH
22500: LD_INT 18
22502: PUSH
22503: LD_INT 19
22505: PUSH
22506: LD_INT 20
22508: PUSH
22509: LD_INT 21
22511: PUSH
22512: LD_INT 22
22514: PUSH
22515: LD_INT 23
22517: PUSH
22518: LD_INT 24
22520: PUSH
22521: LD_INT 25
22523: PUSH
22524: LD_INT 26
22526: PUSH
22527: LD_INT 27
22529: PUSH
22530: LD_INT 28
22532: PUSH
22533: LD_INT 29
22535: PUSH
22536: LD_INT 30
22538: PUSH
22539: LD_INT 31
22541: PUSH
22542: LD_INT 32
22544: PUSH
22545: LD_INT 33
22547: PUSH
22548: LD_INT 34
22550: PUSH
22551: LD_INT 36
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 101
22593: PUSH
22594: LD_INT 102
22596: PUSH
22597: LD_INT 103
22599: PUSH
22600: LD_INT 104
22602: PUSH
22603: LD_INT 105
22605: PUSH
22606: LD_INT 106
22608: PUSH
22609: LD_INT 107
22611: PUSH
22612: LD_INT 108
22614: PUSH
22615: LD_INT 109
22617: PUSH
22618: LD_INT 110
22620: PUSH
22621: LD_INT 111
22623: PUSH
22624: LD_INT 112
22626: PUSH
22627: LD_INT 113
22629: PUSH
22630: LD_INT 114
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: ST_TO_ADDR
22653: GO 23028
22655: LD_INT 18
22657: DOUBLE
22658: EQUAL
22659: IFTRUE 22663
22661: GO 22799
22663: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22664: LD_ADDR_VAR 0 1
22668: PUSH
22669: LD_INT 2
22671: PUSH
22672: LD_INT 4
22674: PUSH
22675: LD_INT 5
22677: PUSH
22678: LD_INT 7
22680: PUSH
22681: LD_INT 11
22683: PUSH
22684: LD_INT 12
22686: PUSH
22687: LD_INT 15
22689: PUSH
22690: LD_INT 16
22692: PUSH
22693: LD_INT 20
22695: PUSH
22696: LD_INT 21
22698: PUSH
22699: LD_INT 22
22701: PUSH
22702: LD_INT 23
22704: PUSH
22705: LD_INT 25
22707: PUSH
22708: LD_INT 26
22710: PUSH
22711: LD_INT 30
22713: PUSH
22714: LD_INT 31
22716: PUSH
22717: LD_INT 32
22719: PUSH
22720: LD_INT 33
22722: PUSH
22723: LD_INT 34
22725: PUSH
22726: LD_INT 35
22728: PUSH
22729: LD_INT 36
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 101
22757: PUSH
22758: LD_INT 102
22760: PUSH
22761: LD_INT 103
22763: PUSH
22764: LD_INT 106
22766: PUSH
22767: LD_INT 108
22769: PUSH
22770: LD_INT 112
22772: PUSH
22773: LD_INT 113
22775: PUSH
22776: LD_INT 114
22778: PUSH
22779: LD_INT 115
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: ST_TO_ADDR
22797: GO 23028
22799: LD_INT 19
22801: DOUBLE
22802: EQUAL
22803: IFTRUE 22807
22805: GO 23027
22807: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22808: LD_ADDR_VAR 0 1
22812: PUSH
22813: LD_INT 1
22815: PUSH
22816: LD_INT 2
22818: PUSH
22819: LD_INT 3
22821: PUSH
22822: LD_INT 4
22824: PUSH
22825: LD_INT 5
22827: PUSH
22828: LD_INT 6
22830: PUSH
22831: LD_INT 7
22833: PUSH
22834: LD_INT 8
22836: PUSH
22837: LD_INT 9
22839: PUSH
22840: LD_INT 10
22842: PUSH
22843: LD_INT 11
22845: PUSH
22846: LD_INT 12
22848: PUSH
22849: LD_INT 13
22851: PUSH
22852: LD_INT 14
22854: PUSH
22855: LD_INT 15
22857: PUSH
22858: LD_INT 16
22860: PUSH
22861: LD_INT 17
22863: PUSH
22864: LD_INT 18
22866: PUSH
22867: LD_INT 19
22869: PUSH
22870: LD_INT 20
22872: PUSH
22873: LD_INT 21
22875: PUSH
22876: LD_INT 22
22878: PUSH
22879: LD_INT 23
22881: PUSH
22882: LD_INT 24
22884: PUSH
22885: LD_INT 25
22887: PUSH
22888: LD_INT 26
22890: PUSH
22891: LD_INT 27
22893: PUSH
22894: LD_INT 28
22896: PUSH
22897: LD_INT 29
22899: PUSH
22900: LD_INT 30
22902: PUSH
22903: LD_INT 31
22905: PUSH
22906: LD_INT 32
22908: PUSH
22909: LD_INT 33
22911: PUSH
22912: LD_INT 34
22914: PUSH
22915: LD_INT 35
22917: PUSH
22918: LD_INT 36
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 101
22961: PUSH
22962: LD_INT 102
22964: PUSH
22965: LD_INT 103
22967: PUSH
22968: LD_INT 104
22970: PUSH
22971: LD_INT 105
22973: PUSH
22974: LD_INT 106
22976: PUSH
22977: LD_INT 107
22979: PUSH
22980: LD_INT 108
22982: PUSH
22983: LD_INT 109
22985: PUSH
22986: LD_INT 110
22988: PUSH
22989: LD_INT 111
22991: PUSH
22992: LD_INT 112
22994: PUSH
22995: LD_INT 113
22997: PUSH
22998: LD_INT 114
23000: PUSH
23001: LD_INT 115
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: ST_TO_ADDR
23025: GO 23028
23027: POP
// end else
23028: GO 23247
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23030: LD_ADDR_VAR 0 1
23034: PUSH
23035: LD_INT 1
23037: PUSH
23038: LD_INT 2
23040: PUSH
23041: LD_INT 3
23043: PUSH
23044: LD_INT 4
23046: PUSH
23047: LD_INT 5
23049: PUSH
23050: LD_INT 6
23052: PUSH
23053: LD_INT 7
23055: PUSH
23056: LD_INT 8
23058: PUSH
23059: LD_INT 9
23061: PUSH
23062: LD_INT 10
23064: PUSH
23065: LD_INT 11
23067: PUSH
23068: LD_INT 12
23070: PUSH
23071: LD_INT 13
23073: PUSH
23074: LD_INT 14
23076: PUSH
23077: LD_INT 15
23079: PUSH
23080: LD_INT 16
23082: PUSH
23083: LD_INT 17
23085: PUSH
23086: LD_INT 18
23088: PUSH
23089: LD_INT 19
23091: PUSH
23092: LD_INT 20
23094: PUSH
23095: LD_INT 21
23097: PUSH
23098: LD_INT 22
23100: PUSH
23101: LD_INT 23
23103: PUSH
23104: LD_INT 24
23106: PUSH
23107: LD_INT 25
23109: PUSH
23110: LD_INT 26
23112: PUSH
23113: LD_INT 27
23115: PUSH
23116: LD_INT 28
23118: PUSH
23119: LD_INT 29
23121: PUSH
23122: LD_INT 30
23124: PUSH
23125: LD_INT 31
23127: PUSH
23128: LD_INT 32
23130: PUSH
23131: LD_INT 33
23133: PUSH
23134: LD_INT 34
23136: PUSH
23137: LD_INT 35
23139: PUSH
23140: LD_INT 36
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 101
23183: PUSH
23184: LD_INT 102
23186: PUSH
23187: LD_INT 103
23189: PUSH
23190: LD_INT 104
23192: PUSH
23193: LD_INT 105
23195: PUSH
23196: LD_INT 106
23198: PUSH
23199: LD_INT 107
23201: PUSH
23202: LD_INT 108
23204: PUSH
23205: LD_INT 109
23207: PUSH
23208: LD_INT 110
23210: PUSH
23211: LD_INT 111
23213: PUSH
23214: LD_INT 112
23216: PUSH
23217: LD_INT 113
23219: PUSH
23220: LD_INT 114
23222: PUSH
23223: LD_INT 115
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: ST_TO_ADDR
// if result then
23247: LD_VAR 0 1
23251: IFFALSE 23540
// begin normal :=  ;
23253: LD_ADDR_VAR 0 3
23257: PUSH
23258: LD_STRING 
23260: ST_TO_ADDR
// hardcore :=  ;
23261: LD_ADDR_VAR 0 4
23265: PUSH
23266: LD_STRING 
23268: ST_TO_ADDR
// for i = 1 to normalCounter do
23269: LD_ADDR_VAR 0 5
23273: PUSH
23274: DOUBLE
23275: LD_INT 1
23277: DEC
23278: ST_TO_ADDR
23279: LD_EXP 76
23283: PUSH
23284: FOR_TO
23285: IFFALSE 23386
// begin tmp := 0 ;
23287: LD_ADDR_VAR 0 2
23291: PUSH
23292: LD_STRING 0
23294: ST_TO_ADDR
// if result [ 1 ] then
23295: LD_VAR 0 1
23299: PUSH
23300: LD_INT 1
23302: ARRAY
23303: IFFALSE 23368
// if result [ 1 ] [ 1 ] = i then
23305: LD_VAR 0 1
23309: PUSH
23310: LD_INT 1
23312: ARRAY
23313: PUSH
23314: LD_INT 1
23316: ARRAY
23317: PUSH
23318: LD_VAR 0 5
23322: EQUAL
23323: IFFALSE 23368
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23325: LD_ADDR_VAR 0 1
23329: PUSH
23330: LD_VAR 0 1
23334: PPUSH
23335: LD_INT 1
23337: PPUSH
23338: LD_VAR 0 1
23342: PUSH
23343: LD_INT 1
23345: ARRAY
23346: PPUSH
23347: LD_INT 1
23349: PPUSH
23350: CALL_OW 3
23354: PPUSH
23355: CALL_OW 1
23359: ST_TO_ADDR
// tmp := 1 ;
23360: LD_ADDR_VAR 0 2
23364: PUSH
23365: LD_STRING 1
23367: ST_TO_ADDR
// end ; normal := normal & tmp ;
23368: LD_ADDR_VAR 0 3
23372: PUSH
23373: LD_VAR 0 3
23377: PUSH
23378: LD_VAR 0 2
23382: STR
23383: ST_TO_ADDR
// end ;
23384: GO 23284
23386: POP
23387: POP
// for i = 1 to hardcoreCounter do
23388: LD_ADDR_VAR 0 5
23392: PUSH
23393: DOUBLE
23394: LD_INT 1
23396: DEC
23397: ST_TO_ADDR
23398: LD_EXP 77
23402: PUSH
23403: FOR_TO
23404: IFFALSE 23509
// begin tmp := 0 ;
23406: LD_ADDR_VAR 0 2
23410: PUSH
23411: LD_STRING 0
23413: ST_TO_ADDR
// if result [ 2 ] then
23414: LD_VAR 0 1
23418: PUSH
23419: LD_INT 2
23421: ARRAY
23422: IFFALSE 23491
// if result [ 2 ] [ 1 ] = 100 + i then
23424: LD_VAR 0 1
23428: PUSH
23429: LD_INT 2
23431: ARRAY
23432: PUSH
23433: LD_INT 1
23435: ARRAY
23436: PUSH
23437: LD_INT 100
23439: PUSH
23440: LD_VAR 0 5
23444: PLUS
23445: EQUAL
23446: IFFALSE 23491
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23448: LD_ADDR_VAR 0 1
23452: PUSH
23453: LD_VAR 0 1
23457: PPUSH
23458: LD_INT 2
23460: PPUSH
23461: LD_VAR 0 1
23465: PUSH
23466: LD_INT 2
23468: ARRAY
23469: PPUSH
23470: LD_INT 1
23472: PPUSH
23473: CALL_OW 3
23477: PPUSH
23478: CALL_OW 1
23482: ST_TO_ADDR
// tmp := 1 ;
23483: LD_ADDR_VAR 0 2
23487: PUSH
23488: LD_STRING 1
23490: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23491: LD_ADDR_VAR 0 4
23495: PUSH
23496: LD_VAR 0 4
23500: PUSH
23501: LD_VAR 0 2
23505: STR
23506: ST_TO_ADDR
// end ;
23507: GO 23403
23509: POP
23510: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23511: LD_STRING getStreamItemsFromMission("
23513: PUSH
23514: LD_VAR 0 3
23518: STR
23519: PUSH
23520: LD_STRING ","
23522: STR
23523: PUSH
23524: LD_VAR 0 4
23528: STR
23529: PUSH
23530: LD_STRING ")
23532: STR
23533: PPUSH
23534: CALL_OW 559
// end else
23538: GO 23547
// ToLua ( getStreamItemsFromMission("","") ) ;
23540: LD_STRING getStreamItemsFromMission("","")
23542: PPUSH
23543: CALL_OW 559
// end ;
23547: LD_VAR 0 1
23551: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23552: LD_EXP 75
23556: PUSH
23557: LD_EXP 80
23561: AND
23562: IFFALSE 23686
23564: GO 23566
23566: DISABLE
23567: LD_INT 0
23569: PPUSH
23570: PPUSH
// begin enable ;
23571: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23572: LD_ADDR_VAR 0 2
23576: PUSH
23577: LD_INT 22
23579: PUSH
23580: LD_OWVAR 2
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 2
23591: PUSH
23592: LD_INT 34
23594: PUSH
23595: LD_INT 7
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 34
23604: PUSH
23605: LD_INT 45
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 34
23614: PUSH
23615: LD_INT 28
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 34
23624: PUSH
23625: LD_INT 47
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PPUSH
23643: CALL_OW 69
23647: ST_TO_ADDR
// if not tmp then
23648: LD_VAR 0 2
23652: NOT
23653: IFFALSE 23657
// exit ;
23655: GO 23686
// for i in tmp do
23657: LD_ADDR_VAR 0 1
23661: PUSH
23662: LD_VAR 0 2
23666: PUSH
23667: FOR_IN
23668: IFFALSE 23684
// begin SetLives ( i , 0 ) ;
23670: LD_VAR 0 1
23674: PPUSH
23675: LD_INT 0
23677: PPUSH
23678: CALL_OW 234
// end ;
23682: GO 23667
23684: POP
23685: POP
// end ;
23686: PPOPN 2
23688: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23689: LD_EXP 75
23693: PUSH
23694: LD_EXP 81
23698: AND
23699: IFFALSE 23783
23701: GO 23703
23703: DISABLE
23704: LD_INT 0
23706: PPUSH
23707: PPUSH
// begin enable ;
23708: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23709: LD_ADDR_VAR 0 2
23713: PUSH
23714: LD_INT 22
23716: PUSH
23717: LD_OWVAR 2
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 32
23728: PUSH
23729: LD_INT 3
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PPUSH
23740: CALL_OW 69
23744: ST_TO_ADDR
// if not tmp then
23745: LD_VAR 0 2
23749: NOT
23750: IFFALSE 23754
// exit ;
23752: GO 23783
// for i in tmp do
23754: LD_ADDR_VAR 0 1
23758: PUSH
23759: LD_VAR 0 2
23763: PUSH
23764: FOR_IN
23765: IFFALSE 23781
// begin SetLives ( i , 0 ) ;
23767: LD_VAR 0 1
23771: PPUSH
23772: LD_INT 0
23774: PPUSH
23775: CALL_OW 234
// end ;
23779: GO 23764
23781: POP
23782: POP
// end ;
23783: PPOPN 2
23785: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23786: LD_EXP 75
23790: PUSH
23791: LD_EXP 78
23795: AND
23796: IFFALSE 23889
23798: GO 23800
23800: DISABLE
23801: LD_INT 0
23803: PPUSH
// begin enable ;
23804: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23805: LD_ADDR_VAR 0 1
23809: PUSH
23810: LD_INT 22
23812: PUSH
23813: LD_OWVAR 2
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 2
23824: PUSH
23825: LD_INT 25
23827: PUSH
23828: LD_INT 5
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 25
23837: PUSH
23838: LD_INT 9
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 25
23847: PUSH
23848: LD_INT 8
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PPUSH
23865: CALL_OW 69
23869: PUSH
23870: FOR_IN
23871: IFFALSE 23887
// begin SetClass ( i , 1 ) ;
23873: LD_VAR 0 1
23877: PPUSH
23878: LD_INT 1
23880: PPUSH
23881: CALL_OW 336
// end ;
23885: GO 23870
23887: POP
23888: POP
// end ;
23889: PPOPN 1
23891: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23892: LD_EXP 75
23896: PUSH
23897: LD_EXP 79
23901: AND
23902: PUSH
23903: LD_OWVAR 65
23907: PUSH
23908: LD_INT 7
23910: LESS
23911: AND
23912: IFFALSE 23926
23914: GO 23916
23916: DISABLE
// begin enable ;
23917: ENABLE
// game_speed := 7 ;
23918: LD_ADDR_OWVAR 65
23922: PUSH
23923: LD_INT 7
23925: ST_TO_ADDR
// end ;
23926: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23927: LD_EXP 75
23931: PUSH
23932: LD_EXP 82
23936: AND
23937: IFFALSE 24139
23939: GO 23941
23941: DISABLE
23942: LD_INT 0
23944: PPUSH
23945: PPUSH
23946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23947: LD_ADDR_VAR 0 3
23951: PUSH
23952: LD_INT 81
23954: PUSH
23955: LD_OWVAR 2
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 21
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PPUSH
23978: CALL_OW 69
23982: ST_TO_ADDR
// if not tmp then
23983: LD_VAR 0 3
23987: NOT
23988: IFFALSE 23992
// exit ;
23990: GO 24139
// if tmp > 5 then
23992: LD_VAR 0 3
23996: PUSH
23997: LD_INT 5
23999: GREATER
24000: IFFALSE 24012
// k := 5 else
24002: LD_ADDR_VAR 0 2
24006: PUSH
24007: LD_INT 5
24009: ST_TO_ADDR
24010: GO 24022
// k := tmp ;
24012: LD_ADDR_VAR 0 2
24016: PUSH
24017: LD_VAR 0 3
24021: ST_TO_ADDR
// for i := 1 to k do
24022: LD_ADDR_VAR 0 1
24026: PUSH
24027: DOUBLE
24028: LD_INT 1
24030: DEC
24031: ST_TO_ADDR
24032: LD_VAR 0 2
24036: PUSH
24037: FOR_TO
24038: IFFALSE 24137
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24040: LD_VAR 0 3
24044: PUSH
24045: LD_VAR 0 1
24049: ARRAY
24050: PPUSH
24051: LD_VAR 0 1
24055: PUSH
24056: LD_INT 4
24058: MOD
24059: PUSH
24060: LD_INT 1
24062: PLUS
24063: PPUSH
24064: CALL_OW 259
24068: PUSH
24069: LD_INT 10
24071: LESS
24072: IFFALSE 24135
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24074: LD_VAR 0 3
24078: PUSH
24079: LD_VAR 0 1
24083: ARRAY
24084: PPUSH
24085: LD_VAR 0 1
24089: PUSH
24090: LD_INT 4
24092: MOD
24093: PUSH
24094: LD_INT 1
24096: PLUS
24097: PPUSH
24098: LD_VAR 0 3
24102: PUSH
24103: LD_VAR 0 1
24107: ARRAY
24108: PPUSH
24109: LD_VAR 0 1
24113: PUSH
24114: LD_INT 4
24116: MOD
24117: PUSH
24118: LD_INT 1
24120: PLUS
24121: PPUSH
24122: CALL_OW 259
24126: PUSH
24127: LD_INT 1
24129: PLUS
24130: PPUSH
24131: CALL_OW 237
24135: GO 24037
24137: POP
24138: POP
// end ;
24139: PPOPN 3
24141: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24142: LD_EXP 75
24146: PUSH
24147: LD_EXP 83
24151: AND
24152: IFFALSE 24172
24154: GO 24156
24156: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24157: LD_INT 4
24159: PPUSH
24160: LD_OWVAR 2
24164: PPUSH
24165: LD_INT 0
24167: PPUSH
24168: CALL_OW 324
24172: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24173: LD_EXP 75
24177: PUSH
24178: LD_EXP 112
24182: AND
24183: IFFALSE 24203
24185: GO 24187
24187: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24188: LD_INT 19
24190: PPUSH
24191: LD_OWVAR 2
24195: PPUSH
24196: LD_INT 0
24198: PPUSH
24199: CALL_OW 324
24203: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24204: LD_EXP 75
24208: PUSH
24209: LD_EXP 84
24213: AND
24214: IFFALSE 24316
24216: GO 24218
24218: DISABLE
24219: LD_INT 0
24221: PPUSH
24222: PPUSH
// begin enable ;
24223: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24224: LD_ADDR_VAR 0 2
24228: PUSH
24229: LD_INT 22
24231: PUSH
24232: LD_OWVAR 2
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 2
24243: PUSH
24244: LD_INT 34
24246: PUSH
24247: LD_INT 11
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 34
24256: PUSH
24257: LD_INT 30
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: LIST
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PPUSH
24273: CALL_OW 69
24277: ST_TO_ADDR
// if not tmp then
24278: LD_VAR 0 2
24282: NOT
24283: IFFALSE 24287
// exit ;
24285: GO 24316
// for i in tmp do
24287: LD_ADDR_VAR 0 1
24291: PUSH
24292: LD_VAR 0 2
24296: PUSH
24297: FOR_IN
24298: IFFALSE 24314
// begin SetLives ( i , 0 ) ;
24300: LD_VAR 0 1
24304: PPUSH
24305: LD_INT 0
24307: PPUSH
24308: CALL_OW 234
// end ;
24312: GO 24297
24314: POP
24315: POP
// end ;
24316: PPOPN 2
24318: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24319: LD_EXP 75
24323: PUSH
24324: LD_EXP 85
24328: AND
24329: IFFALSE 24349
24331: GO 24333
24333: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24334: LD_INT 32
24336: PPUSH
24337: LD_OWVAR 2
24341: PPUSH
24342: LD_INT 0
24344: PPUSH
24345: CALL_OW 324
24349: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24350: LD_EXP 75
24354: PUSH
24355: LD_EXP 86
24359: AND
24360: IFFALSE 24541
24362: GO 24364
24364: DISABLE
24365: LD_INT 0
24367: PPUSH
24368: PPUSH
24369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24370: LD_ADDR_VAR 0 2
24374: PUSH
24375: LD_INT 22
24377: PUSH
24378: LD_OWVAR 2
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 33
24389: PUSH
24390: LD_INT 3
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PPUSH
24401: CALL_OW 69
24405: ST_TO_ADDR
// if not tmp then
24406: LD_VAR 0 2
24410: NOT
24411: IFFALSE 24415
// exit ;
24413: GO 24541
// side := 0 ;
24415: LD_ADDR_VAR 0 3
24419: PUSH
24420: LD_INT 0
24422: ST_TO_ADDR
// for i := 1 to 8 do
24423: LD_ADDR_VAR 0 1
24427: PUSH
24428: DOUBLE
24429: LD_INT 1
24431: DEC
24432: ST_TO_ADDR
24433: LD_INT 8
24435: PUSH
24436: FOR_TO
24437: IFFALSE 24485
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24439: LD_OWVAR 2
24443: PUSH
24444: LD_VAR 0 1
24448: NONEQUAL
24449: PUSH
24450: LD_OWVAR 2
24454: PPUSH
24455: LD_VAR 0 1
24459: PPUSH
24460: CALL_OW 81
24464: PUSH
24465: LD_INT 2
24467: EQUAL
24468: AND
24469: IFFALSE 24483
// begin side := i ;
24471: LD_ADDR_VAR 0 3
24475: PUSH
24476: LD_VAR 0 1
24480: ST_TO_ADDR
// break ;
24481: GO 24485
// end ;
24483: GO 24436
24485: POP
24486: POP
// if not side then
24487: LD_VAR 0 3
24491: NOT
24492: IFFALSE 24496
// exit ;
24494: GO 24541
// for i := 1 to tmp do
24496: LD_ADDR_VAR 0 1
24500: PUSH
24501: DOUBLE
24502: LD_INT 1
24504: DEC
24505: ST_TO_ADDR
24506: LD_VAR 0 2
24510: PUSH
24511: FOR_TO
24512: IFFALSE 24539
// if Prob ( 60 ) then
24514: LD_INT 60
24516: PPUSH
24517: CALL_OW 13
24521: IFFALSE 24537
// SetSide ( i , side ) ;
24523: LD_VAR 0 1
24527: PPUSH
24528: LD_VAR 0 3
24532: PPUSH
24533: CALL_OW 235
24537: GO 24511
24539: POP
24540: POP
// end ;
24541: PPOPN 3
24543: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24544: LD_EXP 75
24548: PUSH
24549: LD_EXP 88
24553: AND
24554: IFFALSE 24673
24556: GO 24558
24558: DISABLE
24559: LD_INT 0
24561: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24562: LD_ADDR_VAR 0 1
24566: PUSH
24567: LD_INT 22
24569: PUSH
24570: LD_OWVAR 2
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 21
24581: PUSH
24582: LD_INT 1
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 3
24591: PUSH
24592: LD_INT 23
24594: PUSH
24595: LD_INT 0
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: LIST
24610: PPUSH
24611: CALL_OW 69
24615: PUSH
24616: FOR_IN
24617: IFFALSE 24671
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24619: LD_VAR 0 1
24623: PPUSH
24624: CALL_OW 257
24628: PUSH
24629: LD_INT 1
24631: PUSH
24632: LD_INT 2
24634: PUSH
24635: LD_INT 3
24637: PUSH
24638: LD_INT 4
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: IN
24647: IFFALSE 24669
// SetClass ( un , rand ( 1 , 4 ) ) ;
24649: LD_VAR 0 1
24653: PPUSH
24654: LD_INT 1
24656: PPUSH
24657: LD_INT 4
24659: PPUSH
24660: CALL_OW 12
24664: PPUSH
24665: CALL_OW 336
24669: GO 24616
24671: POP
24672: POP
// end ;
24673: PPOPN 1
24675: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24676: LD_EXP 75
24680: PUSH
24681: LD_EXP 87
24685: AND
24686: IFFALSE 24765
24688: GO 24690
24690: DISABLE
24691: LD_INT 0
24693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24694: LD_ADDR_VAR 0 1
24698: PUSH
24699: LD_INT 22
24701: PUSH
24702: LD_OWVAR 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 21
24713: PUSH
24714: LD_INT 3
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PPUSH
24725: CALL_OW 69
24729: ST_TO_ADDR
// if not tmp then
24730: LD_VAR 0 1
24734: NOT
24735: IFFALSE 24739
// exit ;
24737: GO 24765
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24739: LD_VAR 0 1
24743: PUSH
24744: LD_INT 1
24746: PPUSH
24747: LD_VAR 0 1
24751: PPUSH
24752: CALL_OW 12
24756: ARRAY
24757: PPUSH
24758: LD_INT 100
24760: PPUSH
24761: CALL_OW 234
// end ;
24765: PPOPN 1
24767: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24768: LD_EXP 75
24772: PUSH
24773: LD_EXP 89
24777: AND
24778: IFFALSE 24876
24780: GO 24782
24782: DISABLE
24783: LD_INT 0
24785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24786: LD_ADDR_VAR 0 1
24790: PUSH
24791: LD_INT 22
24793: PUSH
24794: LD_OWVAR 2
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 21
24805: PUSH
24806: LD_INT 1
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PPUSH
24817: CALL_OW 69
24821: ST_TO_ADDR
// if not tmp then
24822: LD_VAR 0 1
24826: NOT
24827: IFFALSE 24831
// exit ;
24829: GO 24876
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24831: LD_VAR 0 1
24835: PUSH
24836: LD_INT 1
24838: PPUSH
24839: LD_VAR 0 1
24843: PPUSH
24844: CALL_OW 12
24848: ARRAY
24849: PPUSH
24850: LD_INT 1
24852: PPUSH
24853: LD_INT 4
24855: PPUSH
24856: CALL_OW 12
24860: PPUSH
24861: LD_INT 3000
24863: PPUSH
24864: LD_INT 9000
24866: PPUSH
24867: CALL_OW 12
24871: PPUSH
24872: CALL_OW 492
// end ;
24876: PPOPN 1
24878: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24879: LD_EXP 75
24883: PUSH
24884: LD_EXP 90
24888: AND
24889: IFFALSE 24909
24891: GO 24893
24893: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24894: LD_INT 1
24896: PPUSH
24897: LD_OWVAR 2
24901: PPUSH
24902: LD_INT 0
24904: PPUSH
24905: CALL_OW 324
24909: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24910: LD_EXP 75
24914: PUSH
24915: LD_EXP 91
24919: AND
24920: IFFALSE 25003
24922: GO 24924
24924: DISABLE
24925: LD_INT 0
24927: PPUSH
24928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24929: LD_ADDR_VAR 0 2
24933: PUSH
24934: LD_INT 22
24936: PUSH
24937: LD_OWVAR 2
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 21
24948: PUSH
24949: LD_INT 3
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PPUSH
24960: CALL_OW 69
24964: ST_TO_ADDR
// if not tmp then
24965: LD_VAR 0 2
24969: NOT
24970: IFFALSE 24974
// exit ;
24972: GO 25003
// for i in tmp do
24974: LD_ADDR_VAR 0 1
24978: PUSH
24979: LD_VAR 0 2
24983: PUSH
24984: FOR_IN
24985: IFFALSE 25001
// SetBLevel ( i , 10 ) ;
24987: LD_VAR 0 1
24991: PPUSH
24992: LD_INT 10
24994: PPUSH
24995: CALL_OW 241
24999: GO 24984
25001: POP
25002: POP
// end ;
25003: PPOPN 2
25005: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25006: LD_EXP 75
25010: PUSH
25011: LD_EXP 92
25015: AND
25016: IFFALSE 25127
25018: GO 25020
25020: DISABLE
25021: LD_INT 0
25023: PPUSH
25024: PPUSH
25025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25026: LD_ADDR_VAR 0 3
25030: PUSH
25031: LD_INT 22
25033: PUSH
25034: LD_OWVAR 2
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 25
25045: PUSH
25046: LD_INT 1
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PPUSH
25057: CALL_OW 69
25061: ST_TO_ADDR
// if not tmp then
25062: LD_VAR 0 3
25066: NOT
25067: IFFALSE 25071
// exit ;
25069: GO 25127
// un := tmp [ rand ( 1 , tmp ) ] ;
25071: LD_ADDR_VAR 0 2
25075: PUSH
25076: LD_VAR 0 3
25080: PUSH
25081: LD_INT 1
25083: PPUSH
25084: LD_VAR 0 3
25088: PPUSH
25089: CALL_OW 12
25093: ARRAY
25094: ST_TO_ADDR
// if Crawls ( un ) then
25095: LD_VAR 0 2
25099: PPUSH
25100: CALL_OW 318
25104: IFFALSE 25115
// ComWalk ( un ) ;
25106: LD_VAR 0 2
25110: PPUSH
25111: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25115: LD_VAR 0 2
25119: PPUSH
25120: LD_INT 5
25122: PPUSH
25123: CALL_OW 336
// end ;
25127: PPOPN 3
25129: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25130: LD_EXP 75
25134: PUSH
25135: LD_EXP 93
25139: AND
25140: PUSH
25141: LD_OWVAR 67
25145: PUSH
25146: LD_INT 4
25148: LESS
25149: AND
25150: IFFALSE 25169
25152: GO 25154
25154: DISABLE
// begin Difficulty := Difficulty + 1 ;
25155: LD_ADDR_OWVAR 67
25159: PUSH
25160: LD_OWVAR 67
25164: PUSH
25165: LD_INT 1
25167: PLUS
25168: ST_TO_ADDR
// end ;
25169: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25170: LD_EXP 75
25174: PUSH
25175: LD_EXP 94
25179: AND
25180: IFFALSE 25283
25182: GO 25184
25184: DISABLE
25185: LD_INT 0
25187: PPUSH
// begin for i := 1 to 5 do
25188: LD_ADDR_VAR 0 1
25192: PUSH
25193: DOUBLE
25194: LD_INT 1
25196: DEC
25197: ST_TO_ADDR
25198: LD_INT 5
25200: PUSH
25201: FOR_TO
25202: IFFALSE 25281
// begin uc_nation := nation_nature ;
25204: LD_ADDR_OWVAR 21
25208: PUSH
25209: LD_INT 0
25211: ST_TO_ADDR
// uc_side := 0 ;
25212: LD_ADDR_OWVAR 20
25216: PUSH
25217: LD_INT 0
25219: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25220: LD_ADDR_OWVAR 29
25224: PUSH
25225: LD_INT 12
25227: PUSH
25228: LD_INT 12
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: ST_TO_ADDR
// hc_agressivity := 20 ;
25235: LD_ADDR_OWVAR 35
25239: PUSH
25240: LD_INT 20
25242: ST_TO_ADDR
// hc_class := class_tiger ;
25243: LD_ADDR_OWVAR 28
25247: PUSH
25248: LD_INT 14
25250: ST_TO_ADDR
// hc_gallery :=  ;
25251: LD_ADDR_OWVAR 33
25255: PUSH
25256: LD_STRING 
25258: ST_TO_ADDR
// hc_name :=  ;
25259: LD_ADDR_OWVAR 26
25263: PUSH
25264: LD_STRING 
25266: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25267: CALL_OW 44
25271: PPUSH
25272: LD_INT 0
25274: PPUSH
25275: CALL_OW 51
// end ;
25279: GO 25201
25281: POP
25282: POP
// end ;
25283: PPOPN 1
25285: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25286: LD_EXP 75
25290: PUSH
25291: LD_EXP 95
25295: AND
25296: IFFALSE 25305
25298: GO 25300
25300: DISABLE
// StreamSibBomb ;
25301: CALL 25306 0 0
25305: END
// export function StreamSibBomb ; var i , x , y ; begin
25306: LD_INT 0
25308: PPUSH
25309: PPUSH
25310: PPUSH
25311: PPUSH
// result := false ;
25312: LD_ADDR_VAR 0 1
25316: PUSH
25317: LD_INT 0
25319: ST_TO_ADDR
// for i := 1 to 16 do
25320: LD_ADDR_VAR 0 2
25324: PUSH
25325: DOUBLE
25326: LD_INT 1
25328: DEC
25329: ST_TO_ADDR
25330: LD_INT 16
25332: PUSH
25333: FOR_TO
25334: IFFALSE 25533
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25336: LD_ADDR_VAR 0 3
25340: PUSH
25341: LD_INT 10
25343: PUSH
25344: LD_INT 20
25346: PUSH
25347: LD_INT 30
25349: PUSH
25350: LD_INT 40
25352: PUSH
25353: LD_INT 50
25355: PUSH
25356: LD_INT 60
25358: PUSH
25359: LD_INT 70
25361: PUSH
25362: LD_INT 80
25364: PUSH
25365: LD_INT 90
25367: PUSH
25368: LD_INT 100
25370: PUSH
25371: LD_INT 110
25373: PUSH
25374: LD_INT 120
25376: PUSH
25377: LD_INT 130
25379: PUSH
25380: LD_INT 140
25382: PUSH
25383: LD_INT 150
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: PPUSH
25406: LD_INT 15
25408: PPUSH
25409: CALL_OW 12
25413: ARRAY
25414: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25415: LD_ADDR_VAR 0 4
25419: PUSH
25420: LD_INT 10
25422: PUSH
25423: LD_INT 20
25425: PUSH
25426: LD_INT 30
25428: PUSH
25429: LD_INT 40
25431: PUSH
25432: LD_INT 50
25434: PUSH
25435: LD_INT 60
25437: PUSH
25438: LD_INT 70
25440: PUSH
25441: LD_INT 80
25443: PUSH
25444: LD_INT 90
25446: PUSH
25447: LD_INT 100
25449: PUSH
25450: LD_INT 110
25452: PUSH
25453: LD_INT 120
25455: PUSH
25456: LD_INT 130
25458: PUSH
25459: LD_INT 140
25461: PUSH
25462: LD_INT 150
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 1
25484: PPUSH
25485: LD_INT 15
25487: PPUSH
25488: CALL_OW 12
25492: ARRAY
25493: ST_TO_ADDR
// if ValidHex ( x , y ) then
25494: LD_VAR 0 3
25498: PPUSH
25499: LD_VAR 0 4
25503: PPUSH
25504: CALL_OW 488
25508: IFFALSE 25531
// begin result := [ x , y ] ;
25510: LD_ADDR_VAR 0 1
25514: PUSH
25515: LD_VAR 0 3
25519: PUSH
25520: LD_VAR 0 4
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: ST_TO_ADDR
// break ;
25529: GO 25533
// end ; end ;
25531: GO 25333
25533: POP
25534: POP
// if result then
25535: LD_VAR 0 1
25539: IFFALSE 25599
// begin ToLua ( playSibBomb() ) ;
25541: LD_STRING playSibBomb()
25543: PPUSH
25544: CALL_OW 559
// wait ( 0 0$14 ) ;
25548: LD_INT 490
25550: PPUSH
25551: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25555: LD_VAR 0 1
25559: PUSH
25560: LD_INT 1
25562: ARRAY
25563: PPUSH
25564: LD_VAR 0 1
25568: PUSH
25569: LD_INT 2
25571: ARRAY
25572: PPUSH
25573: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25577: LD_VAR 0 1
25581: PUSH
25582: LD_INT 1
25584: ARRAY
25585: PPUSH
25586: LD_VAR 0 1
25590: PUSH
25591: LD_INT 2
25593: ARRAY
25594: PPUSH
25595: CALL_OW 429
// end ; end ;
25599: LD_VAR 0 1
25603: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25604: LD_EXP 75
25608: PUSH
25609: LD_EXP 97
25613: AND
25614: IFFALSE 25626
25616: GO 25618
25618: DISABLE
// YouLost (  ) ;
25619: LD_STRING 
25621: PPUSH
25622: CALL_OW 104
25626: END
// every 0 0$1 trigger StreamModeActive and sFog do
25627: LD_EXP 75
25631: PUSH
25632: LD_EXP 96
25636: AND
25637: IFFALSE 25651
25639: GO 25641
25641: DISABLE
// FogOff ( your_side ) ;
25642: LD_OWVAR 2
25646: PPUSH
25647: CALL_OW 344
25651: END
// every 0 0$1 trigger StreamModeActive and sSun do
25652: LD_EXP 75
25656: PUSH
25657: LD_EXP 98
25661: AND
25662: IFFALSE 25690
25664: GO 25666
25666: DISABLE
// begin solar_recharge_percent := 0 ;
25667: LD_ADDR_OWVAR 79
25671: PUSH
25672: LD_INT 0
25674: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25675: LD_INT 10500
25677: PPUSH
25678: CALL_OW 67
// solar_recharge_percent := 100 ;
25682: LD_ADDR_OWVAR 79
25686: PUSH
25687: LD_INT 100
25689: ST_TO_ADDR
// end ;
25690: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25691: LD_EXP 75
25695: PUSH
25696: LD_EXP 99
25700: AND
25701: IFFALSE 25940
25703: GO 25705
25705: DISABLE
25706: LD_INT 0
25708: PPUSH
25709: PPUSH
25710: PPUSH
// begin tmp := [ ] ;
25711: LD_ADDR_VAR 0 3
25715: PUSH
25716: EMPTY
25717: ST_TO_ADDR
// for i := 1 to 6 do
25718: LD_ADDR_VAR 0 1
25722: PUSH
25723: DOUBLE
25724: LD_INT 1
25726: DEC
25727: ST_TO_ADDR
25728: LD_INT 6
25730: PUSH
25731: FOR_TO
25732: IFFALSE 25837
// begin uc_nation := nation_nature ;
25734: LD_ADDR_OWVAR 21
25738: PUSH
25739: LD_INT 0
25741: ST_TO_ADDR
// uc_side := 0 ;
25742: LD_ADDR_OWVAR 20
25746: PUSH
25747: LD_INT 0
25749: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25750: LD_ADDR_OWVAR 29
25754: PUSH
25755: LD_INT 12
25757: PUSH
25758: LD_INT 12
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: ST_TO_ADDR
// hc_agressivity := 20 ;
25765: LD_ADDR_OWVAR 35
25769: PUSH
25770: LD_INT 20
25772: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25773: LD_ADDR_OWVAR 28
25777: PUSH
25778: LD_INT 17
25780: ST_TO_ADDR
// hc_gallery :=  ;
25781: LD_ADDR_OWVAR 33
25785: PUSH
25786: LD_STRING 
25788: ST_TO_ADDR
// hc_name :=  ;
25789: LD_ADDR_OWVAR 26
25793: PUSH
25794: LD_STRING 
25796: ST_TO_ADDR
// un := CreateHuman ;
25797: LD_ADDR_VAR 0 2
25801: PUSH
25802: CALL_OW 44
25806: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25807: LD_VAR 0 2
25811: PPUSH
25812: LD_INT 1
25814: PPUSH
25815: CALL_OW 51
// tmp := tmp ^ un ;
25819: LD_ADDR_VAR 0 3
25823: PUSH
25824: LD_VAR 0 3
25828: PUSH
25829: LD_VAR 0 2
25833: ADD
25834: ST_TO_ADDR
// end ;
25835: GO 25731
25837: POP
25838: POP
// repeat wait ( 0 0$1 ) ;
25839: LD_INT 35
25841: PPUSH
25842: CALL_OW 67
// for un in tmp do
25846: LD_ADDR_VAR 0 2
25850: PUSH
25851: LD_VAR 0 3
25855: PUSH
25856: FOR_IN
25857: IFFALSE 25931
// begin if IsDead ( un ) then
25859: LD_VAR 0 2
25863: PPUSH
25864: CALL_OW 301
25868: IFFALSE 25888
// begin tmp := tmp diff un ;
25870: LD_ADDR_VAR 0 3
25874: PUSH
25875: LD_VAR 0 3
25879: PUSH
25880: LD_VAR 0 2
25884: DIFF
25885: ST_TO_ADDR
// continue ;
25886: GO 25856
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25888: LD_VAR 0 2
25892: PPUSH
25893: LD_INT 3
25895: PUSH
25896: LD_INT 22
25898: PUSH
25899: LD_INT 0
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PPUSH
25910: CALL_OW 69
25914: PPUSH
25915: LD_VAR 0 2
25919: PPUSH
25920: CALL_OW 74
25924: PPUSH
25925: CALL_OW 115
// end ;
25929: GO 25856
25931: POP
25932: POP
// until not tmp ;
25933: LD_VAR 0 3
25937: NOT
25938: IFFALSE 25839
// end ;
25940: PPOPN 3
25942: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25943: LD_EXP 75
25947: PUSH
25948: LD_EXP 100
25952: AND
25953: IFFALSE 26007
25955: GO 25957
25957: DISABLE
// begin ToLua ( displayTroll(); ) ;
25958: LD_STRING displayTroll();
25960: PPUSH
25961: CALL_OW 559
// wait ( 3 3$00 ) ;
25965: LD_INT 6300
25967: PPUSH
25968: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25972: LD_STRING hideTroll();
25974: PPUSH
25975: CALL_OW 559
// wait ( 1 1$00 ) ;
25979: LD_INT 2100
25981: PPUSH
25982: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25986: LD_STRING displayTroll();
25988: PPUSH
25989: CALL_OW 559
// wait ( 1 1$00 ) ;
25993: LD_INT 2100
25995: PPUSH
25996: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26000: LD_STRING hideTroll();
26002: PPUSH
26003: CALL_OW 559
// end ;
26007: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26008: LD_EXP 75
26012: PUSH
26013: LD_EXP 101
26017: AND
26018: IFFALSE 26081
26020: GO 26022
26022: DISABLE
26023: LD_INT 0
26025: PPUSH
// begin p := 0 ;
26026: LD_ADDR_VAR 0 1
26030: PUSH
26031: LD_INT 0
26033: ST_TO_ADDR
// repeat game_speed := 1 ;
26034: LD_ADDR_OWVAR 65
26038: PUSH
26039: LD_INT 1
26041: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26042: LD_INT 35
26044: PPUSH
26045: CALL_OW 67
// p := p + 1 ;
26049: LD_ADDR_VAR 0 1
26053: PUSH
26054: LD_VAR 0 1
26058: PUSH
26059: LD_INT 1
26061: PLUS
26062: ST_TO_ADDR
// until p >= 60 ;
26063: LD_VAR 0 1
26067: PUSH
26068: LD_INT 60
26070: GREATEREQUAL
26071: IFFALSE 26034
// game_speed := 4 ;
26073: LD_ADDR_OWVAR 65
26077: PUSH
26078: LD_INT 4
26080: ST_TO_ADDR
// end ;
26081: PPOPN 1
26083: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26084: LD_EXP 75
26088: PUSH
26089: LD_EXP 102
26093: AND
26094: IFFALSE 26240
26096: GO 26098
26098: DISABLE
26099: LD_INT 0
26101: PPUSH
26102: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26103: LD_ADDR_VAR 0 1
26107: PUSH
26108: LD_INT 22
26110: PUSH
26111: LD_OWVAR 2
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 2
26122: PUSH
26123: LD_INT 30
26125: PUSH
26126: LD_INT 0
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 30
26135: PUSH
26136: LD_INT 1
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: LIST
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PPUSH
26152: CALL_OW 69
26156: ST_TO_ADDR
// if not depot then
26157: LD_VAR 0 1
26161: NOT
26162: IFFALSE 26166
// exit ;
26164: GO 26240
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26166: LD_ADDR_VAR 0 2
26170: PUSH
26171: LD_VAR 0 1
26175: PUSH
26176: LD_INT 1
26178: PPUSH
26179: LD_VAR 0 1
26183: PPUSH
26184: CALL_OW 12
26188: ARRAY
26189: PPUSH
26190: CALL_OW 274
26194: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26195: LD_VAR 0 2
26199: PPUSH
26200: LD_INT 1
26202: PPUSH
26203: LD_INT 0
26205: PPUSH
26206: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26210: LD_VAR 0 2
26214: PPUSH
26215: LD_INT 2
26217: PPUSH
26218: LD_INT 0
26220: PPUSH
26221: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26225: LD_VAR 0 2
26229: PPUSH
26230: LD_INT 3
26232: PPUSH
26233: LD_INT 0
26235: PPUSH
26236: CALL_OW 277
// end ;
26240: PPOPN 2
26242: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26243: LD_EXP 75
26247: PUSH
26248: LD_EXP 103
26252: AND
26253: IFFALSE 26350
26255: GO 26257
26257: DISABLE
26258: LD_INT 0
26260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26261: LD_ADDR_VAR 0 1
26265: PUSH
26266: LD_INT 22
26268: PUSH
26269: LD_OWVAR 2
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 21
26280: PUSH
26281: LD_INT 1
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 3
26290: PUSH
26291: LD_INT 23
26293: PUSH
26294: LD_INT 0
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: LIST
26309: PPUSH
26310: CALL_OW 69
26314: ST_TO_ADDR
// if not tmp then
26315: LD_VAR 0 1
26319: NOT
26320: IFFALSE 26324
// exit ;
26322: GO 26350
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26324: LD_VAR 0 1
26328: PUSH
26329: LD_INT 1
26331: PPUSH
26332: LD_VAR 0 1
26336: PPUSH
26337: CALL_OW 12
26341: ARRAY
26342: PPUSH
26343: LD_INT 200
26345: PPUSH
26346: CALL_OW 234
// end ;
26350: PPOPN 1
26352: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26353: LD_EXP 75
26357: PUSH
26358: LD_EXP 104
26362: AND
26363: IFFALSE 26442
26365: GO 26367
26367: DISABLE
26368: LD_INT 0
26370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26371: LD_ADDR_VAR 0 1
26375: PUSH
26376: LD_INT 22
26378: PUSH
26379: LD_OWVAR 2
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 21
26390: PUSH
26391: LD_INT 2
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PPUSH
26402: CALL_OW 69
26406: ST_TO_ADDR
// if not tmp then
26407: LD_VAR 0 1
26411: NOT
26412: IFFALSE 26416
// exit ;
26414: GO 26442
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26416: LD_VAR 0 1
26420: PUSH
26421: LD_INT 1
26423: PPUSH
26424: LD_VAR 0 1
26428: PPUSH
26429: CALL_OW 12
26433: ARRAY
26434: PPUSH
26435: LD_INT 60
26437: PPUSH
26438: CALL_OW 234
// end ;
26442: PPOPN 1
26444: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26445: LD_EXP 75
26449: PUSH
26450: LD_EXP 105
26454: AND
26455: IFFALSE 26554
26457: GO 26459
26459: DISABLE
26460: LD_INT 0
26462: PPUSH
26463: PPUSH
// begin enable ;
26464: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26465: LD_ADDR_VAR 0 1
26469: PUSH
26470: LD_INT 22
26472: PUSH
26473: LD_OWVAR 2
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 61
26484: PUSH
26485: EMPTY
26486: LIST
26487: PUSH
26488: LD_INT 33
26490: PUSH
26491: LD_INT 2
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: LIST
26502: PPUSH
26503: CALL_OW 69
26507: ST_TO_ADDR
// if not tmp then
26508: LD_VAR 0 1
26512: NOT
26513: IFFALSE 26517
// exit ;
26515: GO 26554
// for i in tmp do
26517: LD_ADDR_VAR 0 2
26521: PUSH
26522: LD_VAR 0 1
26526: PUSH
26527: FOR_IN
26528: IFFALSE 26552
// if IsControledBy ( i ) then
26530: LD_VAR 0 2
26534: PPUSH
26535: CALL_OW 312
26539: IFFALSE 26550
// ComUnlink ( i ) ;
26541: LD_VAR 0 2
26545: PPUSH
26546: CALL_OW 136
26550: GO 26527
26552: POP
26553: POP
// end ;
26554: PPOPN 2
26556: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26557: LD_EXP 75
26561: PUSH
26562: LD_EXP 106
26566: AND
26567: IFFALSE 26707
26569: GO 26571
26571: DISABLE
26572: LD_INT 0
26574: PPUSH
26575: PPUSH
// begin ToLua ( displayPowell(); ) ;
26576: LD_STRING displayPowell();
26578: PPUSH
26579: CALL_OW 559
// uc_side := 0 ;
26583: LD_ADDR_OWVAR 20
26587: PUSH
26588: LD_INT 0
26590: ST_TO_ADDR
// uc_nation := 2 ;
26591: LD_ADDR_OWVAR 21
26595: PUSH
26596: LD_INT 2
26598: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26599: LD_ADDR_OWVAR 37
26603: PUSH
26604: LD_INT 14
26606: ST_TO_ADDR
// vc_engine := engine_siberite ;
26607: LD_ADDR_OWVAR 39
26611: PUSH
26612: LD_INT 3
26614: ST_TO_ADDR
// vc_control := control_apeman ;
26615: LD_ADDR_OWVAR 38
26619: PUSH
26620: LD_INT 5
26622: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26623: LD_ADDR_OWVAR 40
26627: PUSH
26628: LD_INT 29
26630: ST_TO_ADDR
// un := CreateVehicle ;
26631: LD_ADDR_VAR 0 2
26635: PUSH
26636: CALL_OW 45
26640: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26641: LD_VAR 0 2
26645: PPUSH
26646: LD_INT 1
26648: PPUSH
26649: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26653: LD_INT 35
26655: PPUSH
26656: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26660: LD_VAR 0 2
26664: PPUSH
26665: LD_INT 22
26667: PUSH
26668: LD_OWVAR 2
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PPUSH
26677: CALL_OW 69
26681: PPUSH
26682: LD_VAR 0 2
26686: PPUSH
26687: CALL_OW 74
26691: PPUSH
26692: CALL_OW 115
// until IsDead ( un ) ;
26696: LD_VAR 0 2
26700: PPUSH
26701: CALL_OW 301
26705: IFFALSE 26653
// end ;
26707: PPOPN 2
26709: END
// every 0 0$1 trigger StreamModeActive and sStu do
26710: LD_EXP 75
26714: PUSH
26715: LD_EXP 114
26719: AND
26720: IFFALSE 26736
26722: GO 26724
26724: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26725: LD_STRING displayStucuk();
26727: PPUSH
26728: CALL_OW 559
// ResetFog ;
26732: CALL_OW 335
// end ;
26736: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26737: LD_EXP 75
26741: PUSH
26742: LD_EXP 107
26746: AND
26747: IFFALSE 26888
26749: GO 26751
26751: DISABLE
26752: LD_INT 0
26754: PPUSH
26755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26756: LD_ADDR_VAR 0 2
26760: PUSH
26761: LD_INT 22
26763: PUSH
26764: LD_OWVAR 2
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 21
26775: PUSH
26776: LD_INT 1
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PPUSH
26787: CALL_OW 69
26791: ST_TO_ADDR
// if not tmp then
26792: LD_VAR 0 2
26796: NOT
26797: IFFALSE 26801
// exit ;
26799: GO 26888
// un := tmp [ rand ( 1 , tmp ) ] ;
26801: LD_ADDR_VAR 0 1
26805: PUSH
26806: LD_VAR 0 2
26810: PUSH
26811: LD_INT 1
26813: PPUSH
26814: LD_VAR 0 2
26818: PPUSH
26819: CALL_OW 12
26823: ARRAY
26824: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26825: LD_VAR 0 1
26829: PPUSH
26830: LD_INT 0
26832: PPUSH
26833: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26837: LD_VAR 0 1
26841: PPUSH
26842: LD_OWVAR 3
26846: PUSH
26847: LD_VAR 0 1
26851: DIFF
26852: PPUSH
26853: LD_VAR 0 1
26857: PPUSH
26858: CALL_OW 74
26862: PPUSH
26863: CALL_OW 115
// wait ( 0 0$20 ) ;
26867: LD_INT 700
26869: PPUSH
26870: CALL_OW 67
// SetSide ( un , your_side ) ;
26874: LD_VAR 0 1
26878: PPUSH
26879: LD_OWVAR 2
26883: PPUSH
26884: CALL_OW 235
// end ;
26888: PPOPN 2
26890: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26891: LD_EXP 75
26895: PUSH
26896: LD_EXP 108
26900: AND
26901: IFFALSE 27007
26903: GO 26905
26905: DISABLE
26906: LD_INT 0
26908: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26909: LD_ADDR_VAR 0 1
26913: PUSH
26914: LD_INT 22
26916: PUSH
26917: LD_OWVAR 2
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 2
26928: PUSH
26929: LD_INT 30
26931: PUSH
26932: LD_INT 0
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 30
26941: PUSH
26942: LD_INT 1
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: LIST
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PPUSH
26958: CALL_OW 69
26962: ST_TO_ADDR
// if not depot then
26963: LD_VAR 0 1
26967: NOT
26968: IFFALSE 26972
// exit ;
26970: GO 27007
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26972: LD_VAR 0 1
26976: PUSH
26977: LD_INT 1
26979: ARRAY
26980: PPUSH
26981: CALL_OW 250
26985: PPUSH
26986: LD_VAR 0 1
26990: PUSH
26991: LD_INT 1
26993: ARRAY
26994: PPUSH
26995: CALL_OW 251
26999: PPUSH
27000: LD_INT 70
27002: PPUSH
27003: CALL_OW 495
// end ;
27007: PPOPN 1
27009: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27010: LD_EXP 75
27014: PUSH
27015: LD_EXP 109
27019: AND
27020: IFFALSE 27231
27022: GO 27024
27024: DISABLE
27025: LD_INT 0
27027: PPUSH
27028: PPUSH
27029: PPUSH
27030: PPUSH
27031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27032: LD_ADDR_VAR 0 5
27036: PUSH
27037: LD_INT 22
27039: PUSH
27040: LD_OWVAR 2
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 21
27051: PUSH
27052: LD_INT 1
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PPUSH
27063: CALL_OW 69
27067: ST_TO_ADDR
// if not tmp then
27068: LD_VAR 0 5
27072: NOT
27073: IFFALSE 27077
// exit ;
27075: GO 27231
// for i in tmp do
27077: LD_ADDR_VAR 0 1
27081: PUSH
27082: LD_VAR 0 5
27086: PUSH
27087: FOR_IN
27088: IFFALSE 27229
// begin d := rand ( 0 , 5 ) ;
27090: LD_ADDR_VAR 0 4
27094: PUSH
27095: LD_INT 0
27097: PPUSH
27098: LD_INT 5
27100: PPUSH
27101: CALL_OW 12
27105: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27106: LD_ADDR_VAR 0 2
27110: PUSH
27111: LD_VAR 0 1
27115: PPUSH
27116: CALL_OW 250
27120: PPUSH
27121: LD_VAR 0 4
27125: PPUSH
27126: LD_INT 3
27128: PPUSH
27129: LD_INT 12
27131: PPUSH
27132: CALL_OW 12
27136: PPUSH
27137: CALL_OW 272
27141: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27142: LD_ADDR_VAR 0 3
27146: PUSH
27147: LD_VAR 0 1
27151: PPUSH
27152: CALL_OW 251
27156: PPUSH
27157: LD_VAR 0 4
27161: PPUSH
27162: LD_INT 3
27164: PPUSH
27165: LD_INT 12
27167: PPUSH
27168: CALL_OW 12
27172: PPUSH
27173: CALL_OW 273
27177: ST_TO_ADDR
// if ValidHex ( x , y ) then
27178: LD_VAR 0 2
27182: PPUSH
27183: LD_VAR 0 3
27187: PPUSH
27188: CALL_OW 488
27192: IFFALSE 27227
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27194: LD_VAR 0 1
27198: PPUSH
27199: LD_VAR 0 2
27203: PPUSH
27204: LD_VAR 0 3
27208: PPUSH
27209: LD_INT 3
27211: PPUSH
27212: LD_INT 6
27214: PPUSH
27215: CALL_OW 12
27219: PPUSH
27220: LD_INT 1
27222: PPUSH
27223: CALL_OW 483
// end ;
27227: GO 27087
27229: POP
27230: POP
// end ;
27231: PPOPN 5
27233: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27234: LD_EXP 75
27238: PUSH
27239: LD_EXP 110
27243: AND
27244: IFFALSE 27338
27246: GO 27248
27248: DISABLE
27249: LD_INT 0
27251: PPUSH
27252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27253: LD_ADDR_VAR 0 2
27257: PUSH
27258: LD_INT 22
27260: PUSH
27261: LD_OWVAR 2
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 32
27272: PUSH
27273: LD_INT 1
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 21
27282: PUSH
27283: LD_INT 2
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: LIST
27294: PPUSH
27295: CALL_OW 69
27299: ST_TO_ADDR
// if not tmp then
27300: LD_VAR 0 2
27304: NOT
27305: IFFALSE 27309
// exit ;
27307: GO 27338
// for i in tmp do
27309: LD_ADDR_VAR 0 1
27313: PUSH
27314: LD_VAR 0 2
27318: PUSH
27319: FOR_IN
27320: IFFALSE 27336
// SetFuel ( i , 0 ) ;
27322: LD_VAR 0 1
27326: PPUSH
27327: LD_INT 0
27329: PPUSH
27330: CALL_OW 240
27334: GO 27319
27336: POP
27337: POP
// end ;
27338: PPOPN 2
27340: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27341: LD_EXP 75
27345: PUSH
27346: LD_EXP 111
27350: AND
27351: IFFALSE 27417
27353: GO 27355
27355: DISABLE
27356: LD_INT 0
27358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27359: LD_ADDR_VAR 0 1
27363: PUSH
27364: LD_INT 22
27366: PUSH
27367: LD_OWVAR 2
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 30
27378: PUSH
27379: LD_INT 29
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PPUSH
27390: CALL_OW 69
27394: ST_TO_ADDR
// if not tmp then
27395: LD_VAR 0 1
27399: NOT
27400: IFFALSE 27404
// exit ;
27402: GO 27417
// DestroyUnit ( tmp [ 1 ] ) ;
27404: LD_VAR 0 1
27408: PUSH
27409: LD_INT 1
27411: ARRAY
27412: PPUSH
27413: CALL_OW 65
// end ;
27417: PPOPN 1
27419: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27420: LD_EXP 75
27424: PUSH
27425: LD_EXP 113
27429: AND
27430: IFFALSE 27559
27432: GO 27434
27434: DISABLE
27435: LD_INT 0
27437: PPUSH
// begin uc_side := 0 ;
27438: LD_ADDR_OWVAR 20
27442: PUSH
27443: LD_INT 0
27445: ST_TO_ADDR
// uc_nation := nation_arabian ;
27446: LD_ADDR_OWVAR 21
27450: PUSH
27451: LD_INT 2
27453: ST_TO_ADDR
// hc_gallery :=  ;
27454: LD_ADDR_OWVAR 33
27458: PUSH
27459: LD_STRING 
27461: ST_TO_ADDR
// hc_name :=  ;
27462: LD_ADDR_OWVAR 26
27466: PUSH
27467: LD_STRING 
27469: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27470: LD_INT 1
27472: PPUSH
27473: LD_INT 11
27475: PPUSH
27476: LD_INT 10
27478: PPUSH
27479: CALL_OW 380
// un := CreateHuman ;
27483: LD_ADDR_VAR 0 1
27487: PUSH
27488: CALL_OW 44
27492: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27493: LD_VAR 0 1
27497: PPUSH
27498: LD_INT 1
27500: PPUSH
27501: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27505: LD_INT 35
27507: PPUSH
27508: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27512: LD_VAR 0 1
27516: PPUSH
27517: LD_INT 22
27519: PUSH
27520: LD_OWVAR 2
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PPUSH
27529: CALL_OW 69
27533: PPUSH
27534: LD_VAR 0 1
27538: PPUSH
27539: CALL_OW 74
27543: PPUSH
27544: CALL_OW 115
// until IsDead ( un ) ;
27548: LD_VAR 0 1
27552: PPUSH
27553: CALL_OW 301
27557: IFFALSE 27505
// end ;
27559: PPOPN 1
27561: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27562: LD_EXP 75
27566: PUSH
27567: LD_EXP 115
27571: AND
27572: IFFALSE 27584
27574: GO 27576
27576: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27577: LD_STRING earthquake(getX(game), 0, 32)
27579: PPUSH
27580: CALL_OW 559
27584: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27585: LD_EXP 75
27589: PUSH
27590: LD_EXP 116
27594: AND
27595: IFFALSE 27686
27597: GO 27599
27599: DISABLE
27600: LD_INT 0
27602: PPUSH
// begin enable ;
27603: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27604: LD_ADDR_VAR 0 1
27608: PUSH
27609: LD_INT 22
27611: PUSH
27612: LD_OWVAR 2
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 21
27623: PUSH
27624: LD_INT 2
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 33
27633: PUSH
27634: LD_INT 3
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: LIST
27645: PPUSH
27646: CALL_OW 69
27650: ST_TO_ADDR
// if not tmp then
27651: LD_VAR 0 1
27655: NOT
27656: IFFALSE 27660
// exit ;
27658: GO 27686
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27660: LD_VAR 0 1
27664: PUSH
27665: LD_INT 1
27667: PPUSH
27668: LD_VAR 0 1
27672: PPUSH
27673: CALL_OW 12
27677: ARRAY
27678: PPUSH
27679: LD_INT 1
27681: PPUSH
27682: CALL_OW 234
// end ;
27686: PPOPN 1
27688: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27689: LD_EXP 75
27693: PUSH
27694: LD_EXP 117
27698: AND
27699: IFFALSE 27840
27701: GO 27703
27703: DISABLE
27704: LD_INT 0
27706: PPUSH
27707: PPUSH
27708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27709: LD_ADDR_VAR 0 3
27713: PUSH
27714: LD_INT 22
27716: PUSH
27717: LD_OWVAR 2
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 25
27728: PUSH
27729: LD_INT 1
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PPUSH
27740: CALL_OW 69
27744: ST_TO_ADDR
// if not tmp then
27745: LD_VAR 0 3
27749: NOT
27750: IFFALSE 27754
// exit ;
27752: GO 27840
// un := tmp [ rand ( 1 , tmp ) ] ;
27754: LD_ADDR_VAR 0 2
27758: PUSH
27759: LD_VAR 0 3
27763: PUSH
27764: LD_INT 1
27766: PPUSH
27767: LD_VAR 0 3
27771: PPUSH
27772: CALL_OW 12
27776: ARRAY
27777: ST_TO_ADDR
// if Crawls ( un ) then
27778: LD_VAR 0 2
27782: PPUSH
27783: CALL_OW 318
27787: IFFALSE 27798
// ComWalk ( un ) ;
27789: LD_VAR 0 2
27793: PPUSH
27794: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27798: LD_VAR 0 2
27802: PPUSH
27803: LD_INT 9
27805: PPUSH
27806: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27810: LD_INT 28
27812: PPUSH
27813: LD_OWVAR 2
27817: PPUSH
27818: LD_INT 2
27820: PPUSH
27821: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27825: LD_INT 29
27827: PPUSH
27828: LD_OWVAR 2
27832: PPUSH
27833: LD_INT 2
27835: PPUSH
27836: CALL_OW 322
// end ;
27840: PPOPN 3
27842: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27843: LD_EXP 75
27847: PUSH
27848: LD_EXP 118
27852: AND
27853: IFFALSE 27964
27855: GO 27857
27857: DISABLE
27858: LD_INT 0
27860: PPUSH
27861: PPUSH
27862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27863: LD_ADDR_VAR 0 3
27867: PUSH
27868: LD_INT 22
27870: PUSH
27871: LD_OWVAR 2
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 25
27882: PUSH
27883: LD_INT 1
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PPUSH
27894: CALL_OW 69
27898: ST_TO_ADDR
// if not tmp then
27899: LD_VAR 0 3
27903: NOT
27904: IFFALSE 27908
// exit ;
27906: GO 27964
// un := tmp [ rand ( 1 , tmp ) ] ;
27908: LD_ADDR_VAR 0 2
27912: PUSH
27913: LD_VAR 0 3
27917: PUSH
27918: LD_INT 1
27920: PPUSH
27921: LD_VAR 0 3
27925: PPUSH
27926: CALL_OW 12
27930: ARRAY
27931: ST_TO_ADDR
// if Crawls ( un ) then
27932: LD_VAR 0 2
27936: PPUSH
27937: CALL_OW 318
27941: IFFALSE 27952
// ComWalk ( un ) ;
27943: LD_VAR 0 2
27947: PPUSH
27948: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27952: LD_VAR 0 2
27956: PPUSH
27957: LD_INT 8
27959: PPUSH
27960: CALL_OW 336
// end ;
27964: PPOPN 3
27966: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27967: LD_EXP 75
27971: PUSH
27972: LD_EXP 119
27976: AND
27977: IFFALSE 28121
27979: GO 27981
27981: DISABLE
27982: LD_INT 0
27984: PPUSH
27985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27986: LD_ADDR_VAR 0 2
27990: PUSH
27991: LD_INT 22
27993: PUSH
27994: LD_OWVAR 2
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 21
28005: PUSH
28006: LD_INT 2
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 2
28015: PUSH
28016: LD_INT 34
28018: PUSH
28019: LD_INT 12
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 34
28028: PUSH
28029: LD_INT 51
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 34
28038: PUSH
28039: LD_INT 32
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: LIST
28056: PPUSH
28057: CALL_OW 69
28061: ST_TO_ADDR
// if not tmp then
28062: LD_VAR 0 2
28066: NOT
28067: IFFALSE 28071
// exit ;
28069: GO 28121
// for i in tmp do
28071: LD_ADDR_VAR 0 1
28075: PUSH
28076: LD_VAR 0 2
28080: PUSH
28081: FOR_IN
28082: IFFALSE 28119
// if GetCargo ( i , mat_artifact ) = 0 then
28084: LD_VAR 0 1
28088: PPUSH
28089: LD_INT 4
28091: PPUSH
28092: CALL_OW 289
28096: PUSH
28097: LD_INT 0
28099: EQUAL
28100: IFFALSE 28117
// SetCargo ( i , mat_siberit , 100 ) ;
28102: LD_VAR 0 1
28106: PPUSH
28107: LD_INT 3
28109: PPUSH
28110: LD_INT 100
28112: PPUSH
28113: CALL_OW 290
28117: GO 28081
28119: POP
28120: POP
// end ;
28121: PPOPN 2
28123: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28124: LD_EXP 75
28128: PUSH
28129: LD_EXP 120
28133: AND
28134: IFFALSE 28317
28136: GO 28138
28138: DISABLE
28139: LD_INT 0
28141: PPUSH
28142: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28143: LD_ADDR_VAR 0 2
28147: PUSH
28148: LD_INT 22
28150: PUSH
28151: LD_OWVAR 2
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PPUSH
28160: CALL_OW 69
28164: ST_TO_ADDR
// if not tmp then
28165: LD_VAR 0 2
28169: NOT
28170: IFFALSE 28174
// exit ;
28172: GO 28317
// for i := 1 to 2 do
28174: LD_ADDR_VAR 0 1
28178: PUSH
28179: DOUBLE
28180: LD_INT 1
28182: DEC
28183: ST_TO_ADDR
28184: LD_INT 2
28186: PUSH
28187: FOR_TO
28188: IFFALSE 28315
// begin uc_side := your_side ;
28190: LD_ADDR_OWVAR 20
28194: PUSH
28195: LD_OWVAR 2
28199: ST_TO_ADDR
// uc_nation := nation_american ;
28200: LD_ADDR_OWVAR 21
28204: PUSH
28205: LD_INT 1
28207: ST_TO_ADDR
// vc_chassis := us_morphling ;
28208: LD_ADDR_OWVAR 37
28212: PUSH
28213: LD_INT 5
28215: ST_TO_ADDR
// vc_engine := engine_siberite ;
28216: LD_ADDR_OWVAR 39
28220: PUSH
28221: LD_INT 3
28223: ST_TO_ADDR
// vc_control := control_computer ;
28224: LD_ADDR_OWVAR 38
28228: PUSH
28229: LD_INT 3
28231: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28232: LD_ADDR_OWVAR 40
28236: PUSH
28237: LD_INT 10
28239: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28240: LD_VAR 0 2
28244: PUSH
28245: LD_INT 1
28247: ARRAY
28248: PPUSH
28249: CALL_OW 310
28253: NOT
28254: IFFALSE 28301
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28256: CALL_OW 45
28260: PPUSH
28261: LD_VAR 0 2
28265: PUSH
28266: LD_INT 1
28268: ARRAY
28269: PPUSH
28270: CALL_OW 250
28274: PPUSH
28275: LD_VAR 0 2
28279: PUSH
28280: LD_INT 1
28282: ARRAY
28283: PPUSH
28284: CALL_OW 251
28288: PPUSH
28289: LD_INT 12
28291: PPUSH
28292: LD_INT 1
28294: PPUSH
28295: CALL_OW 50
28299: GO 28313
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28301: CALL_OW 45
28305: PPUSH
28306: LD_INT 1
28308: PPUSH
28309: CALL_OW 51
// end ;
28313: GO 28187
28315: POP
28316: POP
// end ;
28317: PPOPN 2
28319: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28320: LD_EXP 75
28324: PUSH
28325: LD_EXP 121
28329: AND
28330: IFFALSE 28552
28332: GO 28334
28334: DISABLE
28335: LD_INT 0
28337: PPUSH
28338: PPUSH
28339: PPUSH
28340: PPUSH
28341: PPUSH
28342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28343: LD_ADDR_VAR 0 6
28347: PUSH
28348: LD_INT 22
28350: PUSH
28351: LD_OWVAR 2
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 21
28362: PUSH
28363: LD_INT 1
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 3
28372: PUSH
28373: LD_INT 23
28375: PUSH
28376: LD_INT 0
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: LIST
28391: PPUSH
28392: CALL_OW 69
28396: ST_TO_ADDR
// if not tmp then
28397: LD_VAR 0 6
28401: NOT
28402: IFFALSE 28406
// exit ;
28404: GO 28552
// s1 := rand ( 1 , 4 ) ;
28406: LD_ADDR_VAR 0 2
28410: PUSH
28411: LD_INT 1
28413: PPUSH
28414: LD_INT 4
28416: PPUSH
28417: CALL_OW 12
28421: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28422: LD_ADDR_VAR 0 4
28426: PUSH
28427: LD_VAR 0 6
28431: PUSH
28432: LD_INT 1
28434: ARRAY
28435: PPUSH
28436: LD_VAR 0 2
28440: PPUSH
28441: CALL_OW 259
28445: ST_TO_ADDR
// if s1 = 1 then
28446: LD_VAR 0 2
28450: PUSH
28451: LD_INT 1
28453: EQUAL
28454: IFFALSE 28474
// s2 := rand ( 2 , 4 ) else
28456: LD_ADDR_VAR 0 3
28460: PUSH
28461: LD_INT 2
28463: PPUSH
28464: LD_INT 4
28466: PPUSH
28467: CALL_OW 12
28471: ST_TO_ADDR
28472: GO 28482
// s2 := 1 ;
28474: LD_ADDR_VAR 0 3
28478: PUSH
28479: LD_INT 1
28481: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28482: LD_ADDR_VAR 0 5
28486: PUSH
28487: LD_VAR 0 6
28491: PUSH
28492: LD_INT 1
28494: ARRAY
28495: PPUSH
28496: LD_VAR 0 3
28500: PPUSH
28501: CALL_OW 259
28505: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28506: LD_VAR 0 6
28510: PUSH
28511: LD_INT 1
28513: ARRAY
28514: PPUSH
28515: LD_VAR 0 2
28519: PPUSH
28520: LD_VAR 0 5
28524: PPUSH
28525: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28529: LD_VAR 0 6
28533: PUSH
28534: LD_INT 1
28536: ARRAY
28537: PPUSH
28538: LD_VAR 0 3
28542: PPUSH
28543: LD_VAR 0 4
28547: PPUSH
28548: CALL_OW 237
// end ;
28552: PPOPN 6
28554: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28555: LD_EXP 75
28559: PUSH
28560: LD_EXP 122
28564: AND
28565: IFFALSE 28644
28567: GO 28569
28569: DISABLE
28570: LD_INT 0
28572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28573: LD_ADDR_VAR 0 1
28577: PUSH
28578: LD_INT 22
28580: PUSH
28581: LD_OWVAR 2
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 30
28592: PUSH
28593: LD_INT 3
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PPUSH
28604: CALL_OW 69
28608: ST_TO_ADDR
// if not tmp then
28609: LD_VAR 0 1
28613: NOT
28614: IFFALSE 28618
// exit ;
28616: GO 28644
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28618: LD_VAR 0 1
28622: PUSH
28623: LD_INT 1
28625: PPUSH
28626: LD_VAR 0 1
28630: PPUSH
28631: CALL_OW 12
28635: ARRAY
28636: PPUSH
28637: LD_INT 1
28639: PPUSH
28640: CALL_OW 234
// end ;
28644: PPOPN 1
28646: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28647: LD_EXP 75
28651: PUSH
28652: LD_EXP 123
28656: AND
28657: IFFALSE 28769
28659: GO 28661
28661: DISABLE
28662: LD_INT 0
28664: PPUSH
28665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28666: LD_ADDR_VAR 0 2
28670: PUSH
28671: LD_INT 22
28673: PUSH
28674: LD_OWVAR 2
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 2
28685: PUSH
28686: LD_INT 30
28688: PUSH
28689: LD_INT 27
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 30
28698: PUSH
28699: LD_INT 26
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 30
28708: PUSH
28709: LD_INT 28
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PPUSH
28726: CALL_OW 69
28730: ST_TO_ADDR
// if not tmp then
28731: LD_VAR 0 2
28735: NOT
28736: IFFALSE 28740
// exit ;
28738: GO 28769
// for i in tmp do
28740: LD_ADDR_VAR 0 1
28744: PUSH
28745: LD_VAR 0 2
28749: PUSH
28750: FOR_IN
28751: IFFALSE 28767
// SetLives ( i , 1 ) ;
28753: LD_VAR 0 1
28757: PPUSH
28758: LD_INT 1
28760: PPUSH
28761: CALL_OW 234
28765: GO 28750
28767: POP
28768: POP
// end ;
28769: PPOPN 2
28771: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28772: LD_EXP 75
28776: PUSH
28777: LD_EXP 124
28781: AND
28782: IFFALSE 29056
28784: GO 28786
28786: DISABLE
28787: LD_INT 0
28789: PPUSH
28790: PPUSH
28791: PPUSH
// begin i := rand ( 1 , 7 ) ;
28792: LD_ADDR_VAR 0 1
28796: PUSH
28797: LD_INT 1
28799: PPUSH
28800: LD_INT 7
28802: PPUSH
28803: CALL_OW 12
28807: ST_TO_ADDR
// case i of 1 :
28808: LD_VAR 0 1
28812: PUSH
28813: LD_INT 1
28815: DOUBLE
28816: EQUAL
28817: IFTRUE 28821
28819: GO 28831
28821: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28822: LD_STRING earthquake(getX(game), 0, 32)
28824: PPUSH
28825: CALL_OW 559
28829: GO 29056
28831: LD_INT 2
28833: DOUBLE
28834: EQUAL
28835: IFTRUE 28839
28837: GO 28853
28839: POP
// begin ToLua ( displayStucuk(); ) ;
28840: LD_STRING displayStucuk();
28842: PPUSH
28843: CALL_OW 559
// ResetFog ;
28847: CALL_OW 335
// end ; 3 :
28851: GO 29056
28853: LD_INT 3
28855: DOUBLE
28856: EQUAL
28857: IFTRUE 28861
28859: GO 28965
28861: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28862: LD_ADDR_VAR 0 2
28866: PUSH
28867: LD_INT 22
28869: PUSH
28870: LD_OWVAR 2
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 25
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PPUSH
28893: CALL_OW 69
28897: ST_TO_ADDR
// if not tmp then
28898: LD_VAR 0 2
28902: NOT
28903: IFFALSE 28907
// exit ;
28905: GO 29056
// un := tmp [ rand ( 1 , tmp ) ] ;
28907: LD_ADDR_VAR 0 3
28911: PUSH
28912: LD_VAR 0 2
28916: PUSH
28917: LD_INT 1
28919: PPUSH
28920: LD_VAR 0 2
28924: PPUSH
28925: CALL_OW 12
28929: ARRAY
28930: ST_TO_ADDR
// if Crawls ( un ) then
28931: LD_VAR 0 3
28935: PPUSH
28936: CALL_OW 318
28940: IFFALSE 28951
// ComWalk ( un ) ;
28942: LD_VAR 0 3
28946: PPUSH
28947: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28951: LD_VAR 0 3
28955: PPUSH
28956: LD_INT 8
28958: PPUSH
28959: CALL_OW 336
// end ; 4 :
28963: GO 29056
28965: LD_INT 4
28967: DOUBLE
28968: EQUAL
28969: IFTRUE 28973
28971: GO 29034
28973: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28974: LD_ADDR_VAR 0 2
28978: PUSH
28979: LD_INT 22
28981: PUSH
28982: LD_OWVAR 2
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 30
28993: PUSH
28994: LD_INT 29
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PPUSH
29005: CALL_OW 69
29009: ST_TO_ADDR
// if not tmp then
29010: LD_VAR 0 2
29014: NOT
29015: IFFALSE 29019
// exit ;
29017: GO 29056
// DestroyUnit ( tmp [ 1 ] ) ;
29019: LD_VAR 0 2
29023: PUSH
29024: LD_INT 1
29026: ARRAY
29027: PPUSH
29028: CALL_OW 65
// end ; 5 .. 7 :
29032: GO 29056
29034: LD_INT 5
29036: DOUBLE
29037: GREATEREQUAL
29038: IFFALSE 29046
29040: LD_INT 7
29042: DOUBLE
29043: LESSEQUAL
29044: IFTRUE 29048
29046: GO 29055
29048: POP
// StreamSibBomb ; end ;
29049: CALL 25306 0 0
29053: GO 29056
29055: POP
// end ;
29056: PPOPN 3
29058: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29059: LD_EXP 75
29063: PUSH
29064: LD_EXP 125
29068: AND
29069: IFFALSE 29225
29071: GO 29073
29073: DISABLE
29074: LD_INT 0
29076: PPUSH
29077: PPUSH
29078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29079: LD_ADDR_VAR 0 2
29083: PUSH
29084: LD_INT 81
29086: PUSH
29087: LD_OWVAR 2
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 2
29098: PUSH
29099: LD_INT 21
29101: PUSH
29102: LD_INT 1
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 21
29111: PUSH
29112: LD_INT 2
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: LIST
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PPUSH
29128: CALL_OW 69
29132: ST_TO_ADDR
// if not tmp then
29133: LD_VAR 0 2
29137: NOT
29138: IFFALSE 29142
// exit ;
29140: GO 29225
// p := 0 ;
29142: LD_ADDR_VAR 0 3
29146: PUSH
29147: LD_INT 0
29149: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29150: LD_INT 35
29152: PPUSH
29153: CALL_OW 67
// p := p + 1 ;
29157: LD_ADDR_VAR 0 3
29161: PUSH
29162: LD_VAR 0 3
29166: PUSH
29167: LD_INT 1
29169: PLUS
29170: ST_TO_ADDR
// for i in tmp do
29171: LD_ADDR_VAR 0 1
29175: PUSH
29176: LD_VAR 0 2
29180: PUSH
29181: FOR_IN
29182: IFFALSE 29213
// if GetLives ( i ) < 1000 then
29184: LD_VAR 0 1
29188: PPUSH
29189: CALL_OW 256
29193: PUSH
29194: LD_INT 1000
29196: LESS
29197: IFFALSE 29211
// SetLives ( i , 1000 ) ;
29199: LD_VAR 0 1
29203: PPUSH
29204: LD_INT 1000
29206: PPUSH
29207: CALL_OW 234
29211: GO 29181
29213: POP
29214: POP
// until p > 20 ;
29215: LD_VAR 0 3
29219: PUSH
29220: LD_INT 20
29222: GREATER
29223: IFFALSE 29150
// end ;
29225: PPOPN 3
29227: END
// every 0 0$1 trigger StreamModeActive and sTime do
29228: LD_EXP 75
29232: PUSH
29233: LD_EXP 126
29237: AND
29238: IFFALSE 29273
29240: GO 29242
29242: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29243: LD_INT 28
29245: PPUSH
29246: LD_OWVAR 2
29250: PPUSH
29251: LD_INT 2
29253: PPUSH
29254: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29258: LD_INT 30
29260: PPUSH
29261: LD_OWVAR 2
29265: PPUSH
29266: LD_INT 2
29268: PPUSH
29269: CALL_OW 322
// end ;
29273: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29274: LD_EXP 75
29278: PUSH
29279: LD_EXP 127
29283: AND
29284: IFFALSE 29405
29286: GO 29288
29288: DISABLE
29289: LD_INT 0
29291: PPUSH
29292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29293: LD_ADDR_VAR 0 2
29297: PUSH
29298: LD_INT 22
29300: PUSH
29301: LD_OWVAR 2
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 21
29312: PUSH
29313: LD_INT 1
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 3
29322: PUSH
29323: LD_INT 23
29325: PUSH
29326: LD_INT 0
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: LIST
29341: PPUSH
29342: CALL_OW 69
29346: ST_TO_ADDR
// if not tmp then
29347: LD_VAR 0 2
29351: NOT
29352: IFFALSE 29356
// exit ;
29354: GO 29405
// for i in tmp do
29356: LD_ADDR_VAR 0 1
29360: PUSH
29361: LD_VAR 0 2
29365: PUSH
29366: FOR_IN
29367: IFFALSE 29403
// begin if Crawls ( i ) then
29369: LD_VAR 0 1
29373: PPUSH
29374: CALL_OW 318
29378: IFFALSE 29389
// ComWalk ( i ) ;
29380: LD_VAR 0 1
29384: PPUSH
29385: CALL_OW 138
// SetClass ( i , 2 ) ;
29389: LD_VAR 0 1
29393: PPUSH
29394: LD_INT 2
29396: PPUSH
29397: CALL_OW 336
// end ;
29401: GO 29366
29403: POP
29404: POP
// end ;
29405: PPOPN 2
29407: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29408: LD_EXP 75
29412: PUSH
29413: LD_EXP 128
29417: AND
29418: IFFALSE 29699
29420: GO 29422
29422: DISABLE
29423: LD_INT 0
29425: PPUSH
29426: PPUSH
29427: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29428: LD_OWVAR 2
29432: PPUSH
29433: LD_INT 9
29435: PPUSH
29436: LD_INT 1
29438: PPUSH
29439: LD_INT 1
29441: PPUSH
29442: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29446: LD_INT 9
29448: PPUSH
29449: LD_OWVAR 2
29453: PPUSH
29454: CALL_OW 343
// uc_side := 9 ;
29458: LD_ADDR_OWVAR 20
29462: PUSH
29463: LD_INT 9
29465: ST_TO_ADDR
// uc_nation := 2 ;
29466: LD_ADDR_OWVAR 21
29470: PUSH
29471: LD_INT 2
29473: ST_TO_ADDR
// hc_name := Dark Warrior ;
29474: LD_ADDR_OWVAR 26
29478: PUSH
29479: LD_STRING Dark Warrior
29481: ST_TO_ADDR
// hc_gallery :=  ;
29482: LD_ADDR_OWVAR 33
29486: PUSH
29487: LD_STRING 
29489: ST_TO_ADDR
// hc_noskilllimit := true ;
29490: LD_ADDR_OWVAR 76
29494: PUSH
29495: LD_INT 1
29497: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29498: LD_ADDR_OWVAR 31
29502: PUSH
29503: LD_INT 30
29505: PUSH
29506: LD_INT 30
29508: PUSH
29509: LD_INT 30
29511: PUSH
29512: LD_INT 30
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: ST_TO_ADDR
// un := CreateHuman ;
29521: LD_ADDR_VAR 0 3
29525: PUSH
29526: CALL_OW 44
29530: ST_TO_ADDR
// hc_noskilllimit := false ;
29531: LD_ADDR_OWVAR 76
29535: PUSH
29536: LD_INT 0
29538: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29539: LD_VAR 0 3
29543: PPUSH
29544: LD_INT 1
29546: PPUSH
29547: CALL_OW 51
// p := 0 ;
29551: LD_ADDR_VAR 0 2
29555: PUSH
29556: LD_INT 0
29558: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29559: LD_INT 35
29561: PPUSH
29562: CALL_OW 67
// p := p + 1 ;
29566: LD_ADDR_VAR 0 2
29570: PUSH
29571: LD_VAR 0 2
29575: PUSH
29576: LD_INT 1
29578: PLUS
29579: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29580: LD_VAR 0 3
29584: PPUSH
29585: CALL_OW 256
29589: PUSH
29590: LD_INT 1000
29592: LESS
29593: IFFALSE 29607
// SetLives ( un , 1000 ) ;
29595: LD_VAR 0 3
29599: PPUSH
29600: LD_INT 1000
29602: PPUSH
29603: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29607: LD_VAR 0 3
29611: PPUSH
29612: LD_INT 81
29614: PUSH
29615: LD_OWVAR 2
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 91
29626: PUSH
29627: LD_VAR 0 3
29631: PUSH
29632: LD_INT 30
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: LIST
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PPUSH
29644: CALL_OW 69
29648: PPUSH
29649: LD_VAR 0 3
29653: PPUSH
29654: CALL_OW 74
29658: PPUSH
29659: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29663: LD_VAR 0 2
29667: PUSH
29668: LD_INT 60
29670: GREATER
29671: PUSH
29672: LD_VAR 0 3
29676: PPUSH
29677: CALL_OW 301
29681: OR
29682: IFFALSE 29559
// if un then
29684: LD_VAR 0 3
29688: IFFALSE 29699
// RemoveUnit ( un ) ;
29690: LD_VAR 0 3
29694: PPUSH
29695: CALL_OW 64
// end ;
29699: PPOPN 3
29701: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29702: LD_INT 0
29704: PPUSH
// case cmd of 301 :
29705: LD_VAR 0 1
29709: PUSH
29710: LD_INT 301
29712: DOUBLE
29713: EQUAL
29714: IFTRUE 29718
29716: GO 29750
29718: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29719: LD_VAR 0 6
29723: PPUSH
29724: LD_VAR 0 7
29728: PPUSH
29729: LD_VAR 0 8
29733: PPUSH
29734: LD_VAR 0 4
29738: PPUSH
29739: LD_VAR 0 5
29743: PPUSH
29744: CALL 30951 0 5
29748: GO 29871
29750: LD_INT 302
29752: DOUBLE
29753: EQUAL
29754: IFTRUE 29758
29756: GO 29795
29758: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29759: LD_VAR 0 6
29763: PPUSH
29764: LD_VAR 0 7
29768: PPUSH
29769: LD_VAR 0 8
29773: PPUSH
29774: LD_VAR 0 9
29778: PPUSH
29779: LD_VAR 0 4
29783: PPUSH
29784: LD_VAR 0 5
29788: PPUSH
29789: CALL 31042 0 6
29793: GO 29871
29795: LD_INT 303
29797: DOUBLE
29798: EQUAL
29799: IFTRUE 29803
29801: GO 29840
29803: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29804: LD_VAR 0 6
29808: PPUSH
29809: LD_VAR 0 7
29813: PPUSH
29814: LD_VAR 0 8
29818: PPUSH
29819: LD_VAR 0 9
29823: PPUSH
29824: LD_VAR 0 4
29828: PPUSH
29829: LD_VAR 0 5
29833: PPUSH
29834: CALL 29876 0 6
29838: GO 29871
29840: LD_INT 304
29842: DOUBLE
29843: EQUAL
29844: IFTRUE 29848
29846: GO 29870
29848: POP
// hHackTeleport ( unit , x , y ) ; end ;
29849: LD_VAR 0 2
29853: PPUSH
29854: LD_VAR 0 4
29858: PPUSH
29859: LD_VAR 0 5
29863: PPUSH
29864: CALL 31635 0 3
29868: GO 29871
29870: POP
// end ;
29871: LD_VAR 0 12
29875: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29876: LD_INT 0
29878: PPUSH
29879: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29880: LD_VAR 0 1
29884: PUSH
29885: LD_INT 1
29887: LESS
29888: PUSH
29889: LD_VAR 0 1
29893: PUSH
29894: LD_INT 3
29896: GREATER
29897: OR
29898: PUSH
29899: LD_VAR 0 5
29903: PPUSH
29904: LD_VAR 0 6
29908: PPUSH
29909: CALL_OW 428
29913: OR
29914: IFFALSE 29918
// exit ;
29916: GO 30638
// uc_side := your_side ;
29918: LD_ADDR_OWVAR 20
29922: PUSH
29923: LD_OWVAR 2
29927: ST_TO_ADDR
// uc_nation := nation ;
29928: LD_ADDR_OWVAR 21
29932: PUSH
29933: LD_VAR 0 1
29937: ST_TO_ADDR
// bc_level = 1 ;
29938: LD_ADDR_OWVAR 43
29942: PUSH
29943: LD_INT 1
29945: ST_TO_ADDR
// case btype of 1 :
29946: LD_VAR 0 2
29950: PUSH
29951: LD_INT 1
29953: DOUBLE
29954: EQUAL
29955: IFTRUE 29959
29957: GO 29970
29959: POP
// bc_type := b_depot ; 2 :
29960: LD_ADDR_OWVAR 42
29964: PUSH
29965: LD_INT 0
29967: ST_TO_ADDR
29968: GO 30582
29970: LD_INT 2
29972: DOUBLE
29973: EQUAL
29974: IFTRUE 29978
29976: GO 29989
29978: POP
// bc_type := b_warehouse ; 3 :
29979: LD_ADDR_OWVAR 42
29983: PUSH
29984: LD_INT 1
29986: ST_TO_ADDR
29987: GO 30582
29989: LD_INT 3
29991: DOUBLE
29992: EQUAL
29993: IFTRUE 29997
29995: GO 30008
29997: POP
// bc_type := b_lab ; 4 .. 9 :
29998: LD_ADDR_OWVAR 42
30002: PUSH
30003: LD_INT 6
30005: ST_TO_ADDR
30006: GO 30582
30008: LD_INT 4
30010: DOUBLE
30011: GREATEREQUAL
30012: IFFALSE 30020
30014: LD_INT 9
30016: DOUBLE
30017: LESSEQUAL
30018: IFTRUE 30022
30020: GO 30074
30022: POP
// begin bc_type := b_lab_half ;
30023: LD_ADDR_OWVAR 42
30027: PUSH
30028: LD_INT 7
30030: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30031: LD_ADDR_OWVAR 44
30035: PUSH
30036: LD_INT 10
30038: PUSH
30039: LD_INT 11
30041: PUSH
30042: LD_INT 12
30044: PUSH
30045: LD_INT 15
30047: PUSH
30048: LD_INT 14
30050: PUSH
30051: LD_INT 13
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: PUSH
30062: LD_VAR 0 2
30066: PUSH
30067: LD_INT 3
30069: MINUS
30070: ARRAY
30071: ST_TO_ADDR
// end ; 10 .. 13 :
30072: GO 30582
30074: LD_INT 10
30076: DOUBLE
30077: GREATEREQUAL
30078: IFFALSE 30086
30080: LD_INT 13
30082: DOUBLE
30083: LESSEQUAL
30084: IFTRUE 30088
30086: GO 30165
30088: POP
// begin bc_type := b_lab_full ;
30089: LD_ADDR_OWVAR 42
30093: PUSH
30094: LD_INT 8
30096: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30097: LD_ADDR_OWVAR 44
30101: PUSH
30102: LD_INT 10
30104: PUSH
30105: LD_INT 12
30107: PUSH
30108: LD_INT 14
30110: PUSH
30111: LD_INT 13
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: PUSH
30120: LD_VAR 0 2
30124: PUSH
30125: LD_INT 9
30127: MINUS
30128: ARRAY
30129: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30130: LD_ADDR_OWVAR 45
30134: PUSH
30135: LD_INT 11
30137: PUSH
30138: LD_INT 15
30140: PUSH
30141: LD_INT 12
30143: PUSH
30144: LD_INT 15
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: PUSH
30153: LD_VAR 0 2
30157: PUSH
30158: LD_INT 9
30160: MINUS
30161: ARRAY
30162: ST_TO_ADDR
// end ; 14 :
30163: GO 30582
30165: LD_INT 14
30167: DOUBLE
30168: EQUAL
30169: IFTRUE 30173
30171: GO 30184
30173: POP
// bc_type := b_workshop ; 15 :
30174: LD_ADDR_OWVAR 42
30178: PUSH
30179: LD_INT 2
30181: ST_TO_ADDR
30182: GO 30582
30184: LD_INT 15
30186: DOUBLE
30187: EQUAL
30188: IFTRUE 30192
30190: GO 30203
30192: POP
// bc_type := b_factory ; 16 :
30193: LD_ADDR_OWVAR 42
30197: PUSH
30198: LD_INT 3
30200: ST_TO_ADDR
30201: GO 30582
30203: LD_INT 16
30205: DOUBLE
30206: EQUAL
30207: IFTRUE 30211
30209: GO 30222
30211: POP
// bc_type := b_ext_gun ; 17 :
30212: LD_ADDR_OWVAR 42
30216: PUSH
30217: LD_INT 17
30219: ST_TO_ADDR
30220: GO 30582
30222: LD_INT 17
30224: DOUBLE
30225: EQUAL
30226: IFTRUE 30230
30228: GO 30258
30230: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30231: LD_ADDR_OWVAR 42
30235: PUSH
30236: LD_INT 19
30238: PUSH
30239: LD_INT 23
30241: PUSH
30242: LD_INT 19
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: LIST
30249: PUSH
30250: LD_VAR 0 1
30254: ARRAY
30255: ST_TO_ADDR
30256: GO 30582
30258: LD_INT 18
30260: DOUBLE
30261: EQUAL
30262: IFTRUE 30266
30264: GO 30277
30266: POP
// bc_type := b_ext_radar ; 19 :
30267: LD_ADDR_OWVAR 42
30271: PUSH
30272: LD_INT 20
30274: ST_TO_ADDR
30275: GO 30582
30277: LD_INT 19
30279: DOUBLE
30280: EQUAL
30281: IFTRUE 30285
30283: GO 30296
30285: POP
// bc_type := b_ext_radio ; 20 :
30286: LD_ADDR_OWVAR 42
30290: PUSH
30291: LD_INT 22
30293: ST_TO_ADDR
30294: GO 30582
30296: LD_INT 20
30298: DOUBLE
30299: EQUAL
30300: IFTRUE 30304
30302: GO 30315
30304: POP
// bc_type := b_ext_siberium ; 21 :
30305: LD_ADDR_OWVAR 42
30309: PUSH
30310: LD_INT 21
30312: ST_TO_ADDR
30313: GO 30582
30315: LD_INT 21
30317: DOUBLE
30318: EQUAL
30319: IFTRUE 30323
30321: GO 30334
30323: POP
// bc_type := b_ext_computer ; 22 :
30324: LD_ADDR_OWVAR 42
30328: PUSH
30329: LD_INT 24
30331: ST_TO_ADDR
30332: GO 30582
30334: LD_INT 22
30336: DOUBLE
30337: EQUAL
30338: IFTRUE 30342
30340: GO 30353
30342: POP
// bc_type := b_ext_track ; 23 :
30343: LD_ADDR_OWVAR 42
30347: PUSH
30348: LD_INT 16
30350: ST_TO_ADDR
30351: GO 30582
30353: LD_INT 23
30355: DOUBLE
30356: EQUAL
30357: IFTRUE 30361
30359: GO 30372
30361: POP
// bc_type := b_ext_laser ; 24 :
30362: LD_ADDR_OWVAR 42
30366: PUSH
30367: LD_INT 25
30369: ST_TO_ADDR
30370: GO 30582
30372: LD_INT 24
30374: DOUBLE
30375: EQUAL
30376: IFTRUE 30380
30378: GO 30391
30380: POP
// bc_type := b_control_tower ; 25 :
30381: LD_ADDR_OWVAR 42
30385: PUSH
30386: LD_INT 36
30388: ST_TO_ADDR
30389: GO 30582
30391: LD_INT 25
30393: DOUBLE
30394: EQUAL
30395: IFTRUE 30399
30397: GO 30410
30399: POP
// bc_type := b_breastwork ; 26 :
30400: LD_ADDR_OWVAR 42
30404: PUSH
30405: LD_INT 31
30407: ST_TO_ADDR
30408: GO 30582
30410: LD_INT 26
30412: DOUBLE
30413: EQUAL
30414: IFTRUE 30418
30416: GO 30429
30418: POP
// bc_type := b_bunker ; 27 :
30419: LD_ADDR_OWVAR 42
30423: PUSH
30424: LD_INT 32
30426: ST_TO_ADDR
30427: GO 30582
30429: LD_INT 27
30431: DOUBLE
30432: EQUAL
30433: IFTRUE 30437
30435: GO 30448
30437: POP
// bc_type := b_turret ; 28 :
30438: LD_ADDR_OWVAR 42
30442: PUSH
30443: LD_INT 33
30445: ST_TO_ADDR
30446: GO 30582
30448: LD_INT 28
30450: DOUBLE
30451: EQUAL
30452: IFTRUE 30456
30454: GO 30467
30456: POP
// bc_type := b_armoury ; 29 :
30457: LD_ADDR_OWVAR 42
30461: PUSH
30462: LD_INT 4
30464: ST_TO_ADDR
30465: GO 30582
30467: LD_INT 29
30469: DOUBLE
30470: EQUAL
30471: IFTRUE 30475
30473: GO 30486
30475: POP
// bc_type := b_barracks ; 30 :
30476: LD_ADDR_OWVAR 42
30480: PUSH
30481: LD_INT 5
30483: ST_TO_ADDR
30484: GO 30582
30486: LD_INT 30
30488: DOUBLE
30489: EQUAL
30490: IFTRUE 30494
30492: GO 30505
30494: POP
// bc_type := b_solar_power ; 31 :
30495: LD_ADDR_OWVAR 42
30499: PUSH
30500: LD_INT 27
30502: ST_TO_ADDR
30503: GO 30582
30505: LD_INT 31
30507: DOUBLE
30508: EQUAL
30509: IFTRUE 30513
30511: GO 30524
30513: POP
// bc_type := b_oil_power ; 32 :
30514: LD_ADDR_OWVAR 42
30518: PUSH
30519: LD_INT 26
30521: ST_TO_ADDR
30522: GO 30582
30524: LD_INT 32
30526: DOUBLE
30527: EQUAL
30528: IFTRUE 30532
30530: GO 30543
30532: POP
// bc_type := b_siberite_power ; 33 :
30533: LD_ADDR_OWVAR 42
30537: PUSH
30538: LD_INT 28
30540: ST_TO_ADDR
30541: GO 30582
30543: LD_INT 33
30545: DOUBLE
30546: EQUAL
30547: IFTRUE 30551
30549: GO 30562
30551: POP
// bc_type := b_oil_mine ; 34 :
30552: LD_ADDR_OWVAR 42
30556: PUSH
30557: LD_INT 29
30559: ST_TO_ADDR
30560: GO 30582
30562: LD_INT 34
30564: DOUBLE
30565: EQUAL
30566: IFTRUE 30570
30568: GO 30581
30570: POP
// bc_type := b_siberite_mine ; end ;
30571: LD_ADDR_OWVAR 42
30575: PUSH
30576: LD_INT 30
30578: ST_TO_ADDR
30579: GO 30582
30581: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30582: LD_ADDR_VAR 0 8
30586: PUSH
30587: LD_VAR 0 5
30591: PPUSH
30592: LD_VAR 0 6
30596: PPUSH
30597: LD_VAR 0 3
30601: PPUSH
30602: CALL_OW 47
30606: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30607: LD_OWVAR 42
30611: PUSH
30612: LD_INT 32
30614: PUSH
30615: LD_INT 33
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: IN
30622: IFFALSE 30638
// PlaceWeaponTurret ( b , weapon ) ;
30624: LD_VAR 0 8
30628: PPUSH
30629: LD_VAR 0 4
30633: PPUSH
30634: CALL_OW 431
// end ;
30638: LD_VAR 0 7
30642: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30643: LD_INT 0
30645: PPUSH
30646: PPUSH
30647: PPUSH
30648: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30649: LD_ADDR_VAR 0 4
30653: PUSH
30654: LD_INT 22
30656: PUSH
30657: LD_OWVAR 2
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 2
30668: PUSH
30669: LD_INT 30
30671: PUSH
30672: LD_INT 0
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 30
30681: PUSH
30682: LD_INT 1
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: LIST
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PPUSH
30698: CALL_OW 69
30702: ST_TO_ADDR
// if not tmp then
30703: LD_VAR 0 4
30707: NOT
30708: IFFALSE 30712
// exit ;
30710: GO 30771
// for i in tmp do
30712: LD_ADDR_VAR 0 2
30716: PUSH
30717: LD_VAR 0 4
30721: PUSH
30722: FOR_IN
30723: IFFALSE 30769
// for j = 1 to 3 do
30725: LD_ADDR_VAR 0 3
30729: PUSH
30730: DOUBLE
30731: LD_INT 1
30733: DEC
30734: ST_TO_ADDR
30735: LD_INT 3
30737: PUSH
30738: FOR_TO
30739: IFFALSE 30765
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30741: LD_VAR 0 2
30745: PPUSH
30746: CALL_OW 274
30750: PPUSH
30751: LD_VAR 0 3
30755: PPUSH
30756: LD_INT 99999
30758: PPUSH
30759: CALL_OW 277
30763: GO 30738
30765: POP
30766: POP
30767: GO 30722
30769: POP
30770: POP
// end ;
30771: LD_VAR 0 1
30775: RET
// export function hHackSetLevel10 ; var i , j ; begin
30776: LD_INT 0
30778: PPUSH
30779: PPUSH
30780: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30781: LD_ADDR_VAR 0 2
30785: PUSH
30786: LD_INT 21
30788: PUSH
30789: LD_INT 1
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PPUSH
30796: CALL_OW 69
30800: PUSH
30801: FOR_IN
30802: IFFALSE 30854
// if IsSelected ( i ) then
30804: LD_VAR 0 2
30808: PPUSH
30809: CALL_OW 306
30813: IFFALSE 30852
// begin for j := 1 to 4 do
30815: LD_ADDR_VAR 0 3
30819: PUSH
30820: DOUBLE
30821: LD_INT 1
30823: DEC
30824: ST_TO_ADDR
30825: LD_INT 4
30827: PUSH
30828: FOR_TO
30829: IFFALSE 30850
// SetSkill ( i , j , 10 ) ;
30831: LD_VAR 0 2
30835: PPUSH
30836: LD_VAR 0 3
30840: PPUSH
30841: LD_INT 10
30843: PPUSH
30844: CALL_OW 237
30848: GO 30828
30850: POP
30851: POP
// end ;
30852: GO 30801
30854: POP
30855: POP
// end ;
30856: LD_VAR 0 1
30860: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30861: LD_INT 0
30863: PPUSH
30864: PPUSH
30865: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30866: LD_ADDR_VAR 0 2
30870: PUSH
30871: LD_INT 22
30873: PUSH
30874: LD_OWVAR 2
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 21
30885: PUSH
30886: LD_INT 1
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PPUSH
30897: CALL_OW 69
30901: PUSH
30902: FOR_IN
30903: IFFALSE 30944
// begin for j := 1 to 4 do
30905: LD_ADDR_VAR 0 3
30909: PUSH
30910: DOUBLE
30911: LD_INT 1
30913: DEC
30914: ST_TO_ADDR
30915: LD_INT 4
30917: PUSH
30918: FOR_TO
30919: IFFALSE 30940
// SetSkill ( i , j , 10 ) ;
30921: LD_VAR 0 2
30925: PPUSH
30926: LD_VAR 0 3
30930: PPUSH
30931: LD_INT 10
30933: PPUSH
30934: CALL_OW 237
30938: GO 30918
30940: POP
30941: POP
// end ;
30942: GO 30902
30944: POP
30945: POP
// end ;
30946: LD_VAR 0 1
30950: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30951: LD_INT 0
30953: PPUSH
// uc_side := your_side ;
30954: LD_ADDR_OWVAR 20
30958: PUSH
30959: LD_OWVAR 2
30963: ST_TO_ADDR
// uc_nation := nation ;
30964: LD_ADDR_OWVAR 21
30968: PUSH
30969: LD_VAR 0 1
30973: ST_TO_ADDR
// InitHc ;
30974: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30978: LD_INT 0
30980: PPUSH
30981: LD_VAR 0 2
30985: PPUSH
30986: LD_VAR 0 3
30990: PPUSH
30991: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30995: LD_VAR 0 4
30999: PPUSH
31000: LD_VAR 0 5
31004: PPUSH
31005: CALL_OW 428
31009: PUSH
31010: LD_INT 0
31012: EQUAL
31013: IFFALSE 31037
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31015: CALL_OW 44
31019: PPUSH
31020: LD_VAR 0 4
31024: PPUSH
31025: LD_VAR 0 5
31029: PPUSH
31030: LD_INT 1
31032: PPUSH
31033: CALL_OW 48
// end ;
31037: LD_VAR 0 6
31041: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31042: LD_INT 0
31044: PPUSH
31045: PPUSH
// uc_side := your_side ;
31046: LD_ADDR_OWVAR 20
31050: PUSH
31051: LD_OWVAR 2
31055: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31056: LD_VAR 0 1
31060: PUSH
31061: LD_INT 1
31063: PUSH
31064: LD_INT 2
31066: PUSH
31067: LD_INT 3
31069: PUSH
31070: LD_INT 4
31072: PUSH
31073: LD_INT 5
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: IN
31083: IFFALSE 31095
// uc_nation := nation_american else
31085: LD_ADDR_OWVAR 21
31089: PUSH
31090: LD_INT 1
31092: ST_TO_ADDR
31093: GO 31138
// if chassis in [ 11 , 12 , 13 , 14 ] then
31095: LD_VAR 0 1
31099: PUSH
31100: LD_INT 11
31102: PUSH
31103: LD_INT 12
31105: PUSH
31106: LD_INT 13
31108: PUSH
31109: LD_INT 14
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: IN
31118: IFFALSE 31130
// uc_nation := nation_arabian else
31120: LD_ADDR_OWVAR 21
31124: PUSH
31125: LD_INT 2
31127: ST_TO_ADDR
31128: GO 31138
// uc_nation := nation_russian ;
31130: LD_ADDR_OWVAR 21
31134: PUSH
31135: LD_INT 3
31137: ST_TO_ADDR
// vc_chassis := chassis ;
31138: LD_ADDR_OWVAR 37
31142: PUSH
31143: LD_VAR 0 1
31147: ST_TO_ADDR
// vc_engine := engine ;
31148: LD_ADDR_OWVAR 39
31152: PUSH
31153: LD_VAR 0 2
31157: ST_TO_ADDR
// vc_control := control ;
31158: LD_ADDR_OWVAR 38
31162: PUSH
31163: LD_VAR 0 3
31167: ST_TO_ADDR
// vc_weapon := weapon ;
31168: LD_ADDR_OWVAR 40
31172: PUSH
31173: LD_VAR 0 4
31177: ST_TO_ADDR
// un := CreateVehicle ;
31178: LD_ADDR_VAR 0 8
31182: PUSH
31183: CALL_OW 45
31187: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31188: LD_VAR 0 8
31192: PPUSH
31193: LD_INT 0
31195: PPUSH
31196: LD_INT 5
31198: PPUSH
31199: CALL_OW 12
31203: PPUSH
31204: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31208: LD_VAR 0 8
31212: PPUSH
31213: LD_VAR 0 5
31217: PPUSH
31218: LD_VAR 0 6
31222: PPUSH
31223: LD_INT 1
31225: PPUSH
31226: CALL_OW 48
// end ;
31230: LD_VAR 0 7
31234: RET
// export hInvincible ; every 1 do
31235: GO 31237
31237: DISABLE
// hInvincible := [ ] ;
31238: LD_ADDR_EXP 129
31242: PUSH
31243: EMPTY
31244: ST_TO_ADDR
31245: END
// every 10 do var i ;
31246: GO 31248
31248: DISABLE
31249: LD_INT 0
31251: PPUSH
// begin enable ;
31252: ENABLE
// if not hInvincible then
31253: LD_EXP 129
31257: NOT
31258: IFFALSE 31262
// exit ;
31260: GO 31306
// for i in hInvincible do
31262: LD_ADDR_VAR 0 1
31266: PUSH
31267: LD_EXP 129
31271: PUSH
31272: FOR_IN
31273: IFFALSE 31304
// if GetLives ( i ) < 1000 then
31275: LD_VAR 0 1
31279: PPUSH
31280: CALL_OW 256
31284: PUSH
31285: LD_INT 1000
31287: LESS
31288: IFFALSE 31302
// SetLives ( i , 1000 ) ;
31290: LD_VAR 0 1
31294: PPUSH
31295: LD_INT 1000
31297: PPUSH
31298: CALL_OW 234
31302: GO 31272
31304: POP
31305: POP
// end ;
31306: PPOPN 1
31308: END
// export function hHackInvincible ; var i ; begin
31309: LD_INT 0
31311: PPUSH
31312: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31313: LD_ADDR_VAR 0 2
31317: PUSH
31318: LD_INT 2
31320: PUSH
31321: LD_INT 21
31323: PUSH
31324: LD_INT 1
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 21
31333: PUSH
31334: LD_INT 2
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: LIST
31345: PPUSH
31346: CALL_OW 69
31350: PUSH
31351: FOR_IN
31352: IFFALSE 31413
// if IsSelected ( i ) then
31354: LD_VAR 0 2
31358: PPUSH
31359: CALL_OW 306
31363: IFFALSE 31411
// begin if i in hInvincible then
31365: LD_VAR 0 2
31369: PUSH
31370: LD_EXP 129
31374: IN
31375: IFFALSE 31395
// hInvincible := hInvincible diff i else
31377: LD_ADDR_EXP 129
31381: PUSH
31382: LD_EXP 129
31386: PUSH
31387: LD_VAR 0 2
31391: DIFF
31392: ST_TO_ADDR
31393: GO 31411
// hInvincible := hInvincible union i ;
31395: LD_ADDR_EXP 129
31399: PUSH
31400: LD_EXP 129
31404: PUSH
31405: LD_VAR 0 2
31409: UNION
31410: ST_TO_ADDR
// end ;
31411: GO 31351
31413: POP
31414: POP
// end ;
31415: LD_VAR 0 1
31419: RET
// export function hHackInvisible ; var i , j ; begin
31420: LD_INT 0
31422: PPUSH
31423: PPUSH
31424: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31425: LD_ADDR_VAR 0 2
31429: PUSH
31430: LD_INT 21
31432: PUSH
31433: LD_INT 1
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PPUSH
31440: CALL_OW 69
31444: PUSH
31445: FOR_IN
31446: IFFALSE 31470
// if IsSelected ( i ) then
31448: LD_VAR 0 2
31452: PPUSH
31453: CALL_OW 306
31457: IFFALSE 31468
// ComForceInvisible ( i ) ;
31459: LD_VAR 0 2
31463: PPUSH
31464: CALL_OW 496
31468: GO 31445
31470: POP
31471: POP
// end ;
31472: LD_VAR 0 1
31476: RET
// export function hHackChangeYourSide ; begin
31477: LD_INT 0
31479: PPUSH
// if your_side = 8 then
31480: LD_OWVAR 2
31484: PUSH
31485: LD_INT 8
31487: EQUAL
31488: IFFALSE 31500
// your_side := 0 else
31490: LD_ADDR_OWVAR 2
31494: PUSH
31495: LD_INT 0
31497: ST_TO_ADDR
31498: GO 31514
// your_side := your_side + 1 ;
31500: LD_ADDR_OWVAR 2
31504: PUSH
31505: LD_OWVAR 2
31509: PUSH
31510: LD_INT 1
31512: PLUS
31513: ST_TO_ADDR
// end ;
31514: LD_VAR 0 1
31518: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31519: LD_INT 0
31521: PPUSH
31522: PPUSH
31523: PPUSH
// for i in all_units do
31524: LD_ADDR_VAR 0 2
31528: PUSH
31529: LD_OWVAR 3
31533: PUSH
31534: FOR_IN
31535: IFFALSE 31613
// if IsSelected ( i ) then
31537: LD_VAR 0 2
31541: PPUSH
31542: CALL_OW 306
31546: IFFALSE 31611
// begin j := GetSide ( i ) ;
31548: LD_ADDR_VAR 0 3
31552: PUSH
31553: LD_VAR 0 2
31557: PPUSH
31558: CALL_OW 255
31562: ST_TO_ADDR
// if j = 8 then
31563: LD_VAR 0 3
31567: PUSH
31568: LD_INT 8
31570: EQUAL
31571: IFFALSE 31583
// j := 0 else
31573: LD_ADDR_VAR 0 3
31577: PUSH
31578: LD_INT 0
31580: ST_TO_ADDR
31581: GO 31597
// j := j + 1 ;
31583: LD_ADDR_VAR 0 3
31587: PUSH
31588: LD_VAR 0 3
31592: PUSH
31593: LD_INT 1
31595: PLUS
31596: ST_TO_ADDR
// SetSide ( i , j ) ;
31597: LD_VAR 0 2
31601: PPUSH
31602: LD_VAR 0 3
31606: PPUSH
31607: CALL_OW 235
// end ;
31611: GO 31534
31613: POP
31614: POP
// end ;
31615: LD_VAR 0 1
31619: RET
// export function hHackFog ; begin
31620: LD_INT 0
31622: PPUSH
// FogOff ( true ) ;
31623: LD_INT 1
31625: PPUSH
31626: CALL_OW 344
// end ;
31630: LD_VAR 0 1
31634: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31635: LD_INT 0
31637: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31638: LD_VAR 0 1
31642: PPUSH
31643: LD_VAR 0 2
31647: PPUSH
31648: LD_VAR 0 3
31652: PPUSH
31653: LD_INT 1
31655: PPUSH
31656: LD_INT 1
31658: PPUSH
31659: CALL_OW 483
// CenterOnXY ( x , y ) ;
31663: LD_VAR 0 2
31667: PPUSH
31668: LD_VAR 0 3
31672: PPUSH
31673: CALL_OW 84
// end ; end_of_file end_of_file
31677: LD_VAR 0 4
31681: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31682: LD_INT 0
31684: PPUSH
31685: PPUSH
// if exist_mode then
31686: LD_VAR 0 2
31690: IFFALSE 31715
// unit := CreateCharacter ( prefix & ident ) else
31692: LD_ADDR_VAR 0 5
31696: PUSH
31697: LD_VAR 0 3
31701: PUSH
31702: LD_VAR 0 1
31706: STR
31707: PPUSH
31708: CALL_OW 34
31712: ST_TO_ADDR
31713: GO 31730
// unit := NewCharacter ( ident ) ;
31715: LD_ADDR_VAR 0 5
31719: PUSH
31720: LD_VAR 0 1
31724: PPUSH
31725: CALL_OW 25
31729: ST_TO_ADDR
// result := unit ;
31730: LD_ADDR_VAR 0 4
31734: PUSH
31735: LD_VAR 0 5
31739: ST_TO_ADDR
// end ;
31740: LD_VAR 0 4
31744: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31745: LD_INT 0
31747: PPUSH
31748: PPUSH
// if not side or not nation then
31749: LD_VAR 0 1
31753: NOT
31754: PUSH
31755: LD_VAR 0 2
31759: NOT
31760: OR
31761: IFFALSE 31765
// exit ;
31763: GO 32533
// case nation of nation_american :
31765: LD_VAR 0 2
31769: PUSH
31770: LD_INT 1
31772: DOUBLE
31773: EQUAL
31774: IFTRUE 31778
31776: GO 31992
31778: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31779: LD_ADDR_VAR 0 4
31783: PUSH
31784: LD_INT 35
31786: PUSH
31787: LD_INT 45
31789: PUSH
31790: LD_INT 46
31792: PUSH
31793: LD_INT 47
31795: PUSH
31796: LD_INT 82
31798: PUSH
31799: LD_INT 83
31801: PUSH
31802: LD_INT 84
31804: PUSH
31805: LD_INT 85
31807: PUSH
31808: LD_INT 86
31810: PUSH
31811: LD_INT 1
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: LD_INT 6
31819: PUSH
31820: LD_INT 15
31822: PUSH
31823: LD_INT 16
31825: PUSH
31826: LD_INT 7
31828: PUSH
31829: LD_INT 12
31831: PUSH
31832: LD_INT 13
31834: PUSH
31835: LD_INT 10
31837: PUSH
31838: LD_INT 14
31840: PUSH
31841: LD_INT 20
31843: PUSH
31844: LD_INT 21
31846: PUSH
31847: LD_INT 22
31849: PUSH
31850: LD_INT 25
31852: PUSH
31853: LD_INT 32
31855: PUSH
31856: LD_INT 27
31858: PUSH
31859: LD_INT 36
31861: PUSH
31862: LD_INT 69
31864: PUSH
31865: LD_INT 39
31867: PUSH
31868: LD_INT 34
31870: PUSH
31871: LD_INT 40
31873: PUSH
31874: LD_INT 48
31876: PUSH
31877: LD_INT 49
31879: PUSH
31880: LD_INT 50
31882: PUSH
31883: LD_INT 51
31885: PUSH
31886: LD_INT 52
31888: PUSH
31889: LD_INT 53
31891: PUSH
31892: LD_INT 54
31894: PUSH
31895: LD_INT 55
31897: PUSH
31898: LD_INT 56
31900: PUSH
31901: LD_INT 57
31903: PUSH
31904: LD_INT 58
31906: PUSH
31907: LD_INT 59
31909: PUSH
31910: LD_INT 60
31912: PUSH
31913: LD_INT 61
31915: PUSH
31916: LD_INT 62
31918: PUSH
31919: LD_INT 80
31921: PUSH
31922: LD_INT 82
31924: PUSH
31925: LD_INT 83
31927: PUSH
31928: LD_INT 84
31930: PUSH
31931: LD_INT 85
31933: PUSH
31934: LD_INT 86
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: ST_TO_ADDR
31990: GO 32457
31992: LD_INT 2
31994: DOUBLE
31995: EQUAL
31996: IFTRUE 32000
31998: GO 32226
32000: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32001: LD_ADDR_VAR 0 4
32005: PUSH
32006: LD_INT 35
32008: PUSH
32009: LD_INT 45
32011: PUSH
32012: LD_INT 46
32014: PUSH
32015: LD_INT 47
32017: PUSH
32018: LD_INT 82
32020: PUSH
32021: LD_INT 83
32023: PUSH
32024: LD_INT 84
32026: PUSH
32027: LD_INT 85
32029: PUSH
32030: LD_INT 87
32032: PUSH
32033: LD_INT 70
32035: PUSH
32036: LD_INT 1
32038: PUSH
32039: LD_INT 11
32041: PUSH
32042: LD_INT 3
32044: PUSH
32045: LD_INT 4
32047: PUSH
32048: LD_INT 5
32050: PUSH
32051: LD_INT 6
32053: PUSH
32054: LD_INT 15
32056: PUSH
32057: LD_INT 18
32059: PUSH
32060: LD_INT 7
32062: PUSH
32063: LD_INT 17
32065: PUSH
32066: LD_INT 8
32068: PUSH
32069: LD_INT 20
32071: PUSH
32072: LD_INT 21
32074: PUSH
32075: LD_INT 22
32077: PUSH
32078: LD_INT 72
32080: PUSH
32081: LD_INT 26
32083: PUSH
32084: LD_INT 69
32086: PUSH
32087: LD_INT 39
32089: PUSH
32090: LD_INT 40
32092: PUSH
32093: LD_INT 41
32095: PUSH
32096: LD_INT 42
32098: PUSH
32099: LD_INT 43
32101: PUSH
32102: LD_INT 48
32104: PUSH
32105: LD_INT 49
32107: PUSH
32108: LD_INT 50
32110: PUSH
32111: LD_INT 51
32113: PUSH
32114: LD_INT 52
32116: PUSH
32117: LD_INT 53
32119: PUSH
32120: LD_INT 54
32122: PUSH
32123: LD_INT 55
32125: PUSH
32126: LD_INT 56
32128: PUSH
32129: LD_INT 60
32131: PUSH
32132: LD_INT 61
32134: PUSH
32135: LD_INT 62
32137: PUSH
32138: LD_INT 66
32140: PUSH
32141: LD_INT 67
32143: PUSH
32144: LD_INT 68
32146: PUSH
32147: LD_INT 81
32149: PUSH
32150: LD_INT 82
32152: PUSH
32153: LD_INT 83
32155: PUSH
32156: LD_INT 84
32158: PUSH
32159: LD_INT 85
32161: PUSH
32162: LD_INT 87
32164: PUSH
32165: LD_INT 88
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: ST_TO_ADDR
32224: GO 32457
32226: LD_INT 3
32228: DOUBLE
32229: EQUAL
32230: IFTRUE 32234
32232: GO 32456
32234: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32235: LD_ADDR_VAR 0 4
32239: PUSH
32240: LD_INT 46
32242: PUSH
32243: LD_INT 47
32245: PUSH
32246: LD_INT 1
32248: PUSH
32249: LD_INT 2
32251: PUSH
32252: LD_INT 82
32254: PUSH
32255: LD_INT 83
32257: PUSH
32258: LD_INT 84
32260: PUSH
32261: LD_INT 85
32263: PUSH
32264: LD_INT 86
32266: PUSH
32267: LD_INT 11
32269: PUSH
32270: LD_INT 9
32272: PUSH
32273: LD_INT 20
32275: PUSH
32276: LD_INT 19
32278: PUSH
32279: LD_INT 21
32281: PUSH
32282: LD_INT 24
32284: PUSH
32285: LD_INT 22
32287: PUSH
32288: LD_INT 25
32290: PUSH
32291: LD_INT 28
32293: PUSH
32294: LD_INT 29
32296: PUSH
32297: LD_INT 30
32299: PUSH
32300: LD_INT 31
32302: PUSH
32303: LD_INT 37
32305: PUSH
32306: LD_INT 38
32308: PUSH
32309: LD_INT 32
32311: PUSH
32312: LD_INT 27
32314: PUSH
32315: LD_INT 33
32317: PUSH
32318: LD_INT 69
32320: PUSH
32321: LD_INT 39
32323: PUSH
32324: LD_INT 34
32326: PUSH
32327: LD_INT 40
32329: PUSH
32330: LD_INT 71
32332: PUSH
32333: LD_INT 23
32335: PUSH
32336: LD_INT 44
32338: PUSH
32339: LD_INT 48
32341: PUSH
32342: LD_INT 49
32344: PUSH
32345: LD_INT 50
32347: PUSH
32348: LD_INT 51
32350: PUSH
32351: LD_INT 52
32353: PUSH
32354: LD_INT 53
32356: PUSH
32357: LD_INT 54
32359: PUSH
32360: LD_INT 55
32362: PUSH
32363: LD_INT 56
32365: PUSH
32366: LD_INT 57
32368: PUSH
32369: LD_INT 58
32371: PUSH
32372: LD_INT 59
32374: PUSH
32375: LD_INT 63
32377: PUSH
32378: LD_INT 64
32380: PUSH
32381: LD_INT 65
32383: PUSH
32384: LD_INT 82
32386: PUSH
32387: LD_INT 83
32389: PUSH
32390: LD_INT 84
32392: PUSH
32393: LD_INT 85
32395: PUSH
32396: LD_INT 86
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: ST_TO_ADDR
32454: GO 32457
32456: POP
// if state > - 1 and state < 3 then
32457: LD_VAR 0 3
32461: PUSH
32462: LD_INT 1
32464: NEG
32465: GREATER
32466: PUSH
32467: LD_VAR 0 3
32471: PUSH
32472: LD_INT 3
32474: LESS
32475: AND
32476: IFFALSE 32533
// for i in result do
32478: LD_ADDR_VAR 0 5
32482: PUSH
32483: LD_VAR 0 4
32487: PUSH
32488: FOR_IN
32489: IFFALSE 32531
// if GetTech ( i , side ) <> state then
32491: LD_VAR 0 5
32495: PPUSH
32496: LD_VAR 0 1
32500: PPUSH
32501: CALL_OW 321
32505: PUSH
32506: LD_VAR 0 3
32510: NONEQUAL
32511: IFFALSE 32529
// result := result diff i ;
32513: LD_ADDR_VAR 0 4
32517: PUSH
32518: LD_VAR 0 4
32522: PUSH
32523: LD_VAR 0 5
32527: DIFF
32528: ST_TO_ADDR
32529: GO 32488
32531: POP
32532: POP
// end ;
32533: LD_VAR 0 4
32537: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32538: LD_INT 0
32540: PPUSH
32541: PPUSH
32542: PPUSH
// result := true ;
32543: LD_ADDR_VAR 0 3
32547: PUSH
32548: LD_INT 1
32550: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32551: LD_ADDR_VAR 0 5
32555: PUSH
32556: LD_VAR 0 2
32560: PPUSH
32561: CALL_OW 480
32565: ST_TO_ADDR
// if not tmp then
32566: LD_VAR 0 5
32570: NOT
32571: IFFALSE 32575
// exit ;
32573: GO 32624
// for i in tmp do
32575: LD_ADDR_VAR 0 4
32579: PUSH
32580: LD_VAR 0 5
32584: PUSH
32585: FOR_IN
32586: IFFALSE 32622
// if GetTech ( i , side ) <> state_researched then
32588: LD_VAR 0 4
32592: PPUSH
32593: LD_VAR 0 1
32597: PPUSH
32598: CALL_OW 321
32602: PUSH
32603: LD_INT 2
32605: NONEQUAL
32606: IFFALSE 32620
// begin result := false ;
32608: LD_ADDR_VAR 0 3
32612: PUSH
32613: LD_INT 0
32615: ST_TO_ADDR
// exit ;
32616: POP
32617: POP
32618: GO 32624
// end ;
32620: GO 32585
32622: POP
32623: POP
// end ;
32624: LD_VAR 0 3
32628: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32629: LD_INT 0
32631: PPUSH
32632: PPUSH
32633: PPUSH
32634: PPUSH
32635: PPUSH
32636: PPUSH
32637: PPUSH
32638: PPUSH
32639: PPUSH
32640: PPUSH
32641: PPUSH
32642: PPUSH
32643: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32644: LD_VAR 0 1
32648: NOT
32649: PUSH
32650: LD_VAR 0 1
32654: PPUSH
32655: CALL_OW 257
32659: PUSH
32660: LD_INT 9
32662: NONEQUAL
32663: OR
32664: IFFALSE 32668
// exit ;
32666: GO 33241
// side := GetSide ( unit ) ;
32668: LD_ADDR_VAR 0 9
32672: PUSH
32673: LD_VAR 0 1
32677: PPUSH
32678: CALL_OW 255
32682: ST_TO_ADDR
// tech_space := tech_spacanom ;
32683: LD_ADDR_VAR 0 12
32687: PUSH
32688: LD_INT 29
32690: ST_TO_ADDR
// tech_time := tech_taurad ;
32691: LD_ADDR_VAR 0 13
32695: PUSH
32696: LD_INT 28
32698: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32699: LD_ADDR_VAR 0 11
32703: PUSH
32704: LD_VAR 0 1
32708: PPUSH
32709: CALL_OW 310
32713: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32714: LD_VAR 0 11
32718: PPUSH
32719: CALL_OW 247
32723: PUSH
32724: LD_INT 2
32726: EQUAL
32727: IFFALSE 32731
// exit ;
32729: GO 33241
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32731: LD_ADDR_VAR 0 8
32735: PUSH
32736: LD_INT 81
32738: PUSH
32739: LD_VAR 0 9
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 3
32750: PUSH
32751: LD_INT 21
32753: PUSH
32754: LD_INT 3
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PPUSH
32769: CALL_OW 69
32773: ST_TO_ADDR
// if not tmp then
32774: LD_VAR 0 8
32778: NOT
32779: IFFALSE 32783
// exit ;
32781: GO 33241
// if in_unit then
32783: LD_VAR 0 11
32787: IFFALSE 32811
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32789: LD_ADDR_VAR 0 10
32793: PUSH
32794: LD_VAR 0 8
32798: PPUSH
32799: LD_VAR 0 11
32803: PPUSH
32804: CALL_OW 74
32808: ST_TO_ADDR
32809: GO 32831
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32811: LD_ADDR_VAR 0 10
32815: PUSH
32816: LD_VAR 0 8
32820: PPUSH
32821: LD_VAR 0 1
32825: PPUSH
32826: CALL_OW 74
32830: ST_TO_ADDR
// if not enemy then
32831: LD_VAR 0 10
32835: NOT
32836: IFFALSE 32840
// exit ;
32838: GO 33241
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32840: LD_VAR 0 11
32844: PUSH
32845: LD_VAR 0 11
32849: PPUSH
32850: LD_VAR 0 10
32854: PPUSH
32855: CALL_OW 296
32859: PUSH
32860: LD_INT 13
32862: GREATER
32863: AND
32864: PUSH
32865: LD_VAR 0 1
32869: PPUSH
32870: LD_VAR 0 10
32874: PPUSH
32875: CALL_OW 296
32879: PUSH
32880: LD_INT 12
32882: GREATER
32883: OR
32884: IFFALSE 32888
// exit ;
32886: GO 33241
// missile := [ 1 ] ;
32888: LD_ADDR_VAR 0 14
32892: PUSH
32893: LD_INT 1
32895: PUSH
32896: EMPTY
32897: LIST
32898: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32899: LD_VAR 0 9
32903: PPUSH
32904: LD_VAR 0 12
32908: PPUSH
32909: CALL_OW 325
32913: IFFALSE 32942
// missile := Insert ( missile , missile + 1 , 2 ) ;
32915: LD_ADDR_VAR 0 14
32919: PUSH
32920: LD_VAR 0 14
32924: PPUSH
32925: LD_VAR 0 14
32929: PUSH
32930: LD_INT 1
32932: PLUS
32933: PPUSH
32934: LD_INT 2
32936: PPUSH
32937: CALL_OW 2
32941: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32942: LD_VAR 0 9
32946: PPUSH
32947: LD_VAR 0 13
32951: PPUSH
32952: CALL_OW 325
32956: PUSH
32957: LD_VAR 0 10
32961: PPUSH
32962: CALL_OW 255
32966: PPUSH
32967: LD_VAR 0 13
32971: PPUSH
32972: CALL_OW 325
32976: NOT
32977: AND
32978: IFFALSE 33007
// missile := Insert ( missile , missile + 1 , 3 ) ;
32980: LD_ADDR_VAR 0 14
32984: PUSH
32985: LD_VAR 0 14
32989: PPUSH
32990: LD_VAR 0 14
32994: PUSH
32995: LD_INT 1
32997: PLUS
32998: PPUSH
32999: LD_INT 3
33001: PPUSH
33002: CALL_OW 2
33006: ST_TO_ADDR
// if missile < 2 then
33007: LD_VAR 0 14
33011: PUSH
33012: LD_INT 2
33014: LESS
33015: IFFALSE 33019
// exit ;
33017: GO 33241
// x := GetX ( enemy ) ;
33019: LD_ADDR_VAR 0 4
33023: PUSH
33024: LD_VAR 0 10
33028: PPUSH
33029: CALL_OW 250
33033: ST_TO_ADDR
// y := GetY ( enemy ) ;
33034: LD_ADDR_VAR 0 5
33038: PUSH
33039: LD_VAR 0 10
33043: PPUSH
33044: CALL_OW 251
33048: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33049: LD_ADDR_VAR 0 6
33053: PUSH
33054: LD_VAR 0 4
33058: PUSH
33059: LD_INT 1
33061: NEG
33062: PPUSH
33063: LD_INT 1
33065: PPUSH
33066: CALL_OW 12
33070: PLUS
33071: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33072: LD_ADDR_VAR 0 7
33076: PUSH
33077: LD_VAR 0 5
33081: PUSH
33082: LD_INT 1
33084: NEG
33085: PPUSH
33086: LD_INT 1
33088: PPUSH
33089: CALL_OW 12
33093: PLUS
33094: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33095: LD_VAR 0 6
33099: PPUSH
33100: LD_VAR 0 7
33104: PPUSH
33105: CALL_OW 488
33109: NOT
33110: IFFALSE 33132
// begin _x := x ;
33112: LD_ADDR_VAR 0 6
33116: PUSH
33117: LD_VAR 0 4
33121: ST_TO_ADDR
// _y := y ;
33122: LD_ADDR_VAR 0 7
33126: PUSH
33127: LD_VAR 0 5
33131: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33132: LD_ADDR_VAR 0 3
33136: PUSH
33137: LD_INT 1
33139: PPUSH
33140: LD_VAR 0 14
33144: PPUSH
33145: CALL_OW 12
33149: ST_TO_ADDR
// case i of 1 :
33150: LD_VAR 0 3
33154: PUSH
33155: LD_INT 1
33157: DOUBLE
33158: EQUAL
33159: IFTRUE 33163
33161: GO 33180
33163: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33164: LD_VAR 0 1
33168: PPUSH
33169: LD_VAR 0 10
33173: PPUSH
33174: CALL_OW 115
33178: GO 33241
33180: LD_INT 2
33182: DOUBLE
33183: EQUAL
33184: IFTRUE 33188
33186: GO 33210
33188: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33189: LD_VAR 0 1
33193: PPUSH
33194: LD_VAR 0 6
33198: PPUSH
33199: LD_VAR 0 7
33203: PPUSH
33204: CALL_OW 153
33208: GO 33241
33210: LD_INT 3
33212: DOUBLE
33213: EQUAL
33214: IFTRUE 33218
33216: GO 33240
33218: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33219: LD_VAR 0 1
33223: PPUSH
33224: LD_VAR 0 6
33228: PPUSH
33229: LD_VAR 0 7
33233: PPUSH
33234: CALL_OW 154
33238: GO 33241
33240: POP
// end ;
33241: LD_VAR 0 2
33245: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33246: LD_INT 0
33248: PPUSH
33249: PPUSH
33250: PPUSH
33251: PPUSH
33252: PPUSH
33253: PPUSH
// if not unit or not building then
33254: LD_VAR 0 1
33258: NOT
33259: PUSH
33260: LD_VAR 0 2
33264: NOT
33265: OR
33266: IFFALSE 33270
// exit ;
33268: GO 33428
// x := GetX ( building ) ;
33270: LD_ADDR_VAR 0 5
33274: PUSH
33275: LD_VAR 0 2
33279: PPUSH
33280: CALL_OW 250
33284: ST_TO_ADDR
// y := GetY ( building ) ;
33285: LD_ADDR_VAR 0 6
33289: PUSH
33290: LD_VAR 0 2
33294: PPUSH
33295: CALL_OW 251
33299: ST_TO_ADDR
// for i = 0 to 5 do
33300: LD_ADDR_VAR 0 4
33304: PUSH
33305: DOUBLE
33306: LD_INT 0
33308: DEC
33309: ST_TO_ADDR
33310: LD_INT 5
33312: PUSH
33313: FOR_TO
33314: IFFALSE 33426
// begin _x := ShiftX ( x , i , 3 ) ;
33316: LD_ADDR_VAR 0 7
33320: PUSH
33321: LD_VAR 0 5
33325: PPUSH
33326: LD_VAR 0 4
33330: PPUSH
33331: LD_INT 3
33333: PPUSH
33334: CALL_OW 272
33338: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33339: LD_ADDR_VAR 0 8
33343: PUSH
33344: LD_VAR 0 6
33348: PPUSH
33349: LD_VAR 0 4
33353: PPUSH
33354: LD_INT 3
33356: PPUSH
33357: CALL_OW 273
33361: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33362: LD_VAR 0 7
33366: PPUSH
33367: LD_VAR 0 8
33371: PPUSH
33372: CALL_OW 488
33376: NOT
33377: IFFALSE 33381
// continue ;
33379: GO 33313
// if HexInfo ( _x , _y ) = 0 then
33381: LD_VAR 0 7
33385: PPUSH
33386: LD_VAR 0 8
33390: PPUSH
33391: CALL_OW 428
33395: PUSH
33396: LD_INT 0
33398: EQUAL
33399: IFFALSE 33424
// begin ComMoveXY ( unit , _x , _y ) ;
33401: LD_VAR 0 1
33405: PPUSH
33406: LD_VAR 0 7
33410: PPUSH
33411: LD_VAR 0 8
33415: PPUSH
33416: CALL_OW 111
// exit ;
33420: POP
33421: POP
33422: GO 33428
// end ; end ;
33424: GO 33313
33426: POP
33427: POP
// end ;
33428: LD_VAR 0 3
33432: RET
// export function ScanBase ( side , base_area ) ; begin
33433: LD_INT 0
33435: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33436: LD_ADDR_VAR 0 3
33440: PUSH
33441: LD_VAR 0 2
33445: PPUSH
33446: LD_INT 81
33448: PUSH
33449: LD_VAR 0 1
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PPUSH
33458: CALL_OW 70
33462: ST_TO_ADDR
// end ;
33463: LD_VAR 0 3
33467: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33468: LD_INT 0
33470: PPUSH
33471: PPUSH
33472: PPUSH
33473: PPUSH
// result := false ;
33474: LD_ADDR_VAR 0 2
33478: PUSH
33479: LD_INT 0
33481: ST_TO_ADDR
// side := GetSide ( unit ) ;
33482: LD_ADDR_VAR 0 3
33486: PUSH
33487: LD_VAR 0 1
33491: PPUSH
33492: CALL_OW 255
33496: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33497: LD_ADDR_VAR 0 4
33501: PUSH
33502: LD_VAR 0 1
33506: PPUSH
33507: CALL_OW 248
33511: ST_TO_ADDR
// case nat of 1 :
33512: LD_VAR 0 4
33516: PUSH
33517: LD_INT 1
33519: DOUBLE
33520: EQUAL
33521: IFTRUE 33525
33523: GO 33536
33525: POP
// tech := tech_lassight ; 2 :
33526: LD_ADDR_VAR 0 5
33530: PUSH
33531: LD_INT 12
33533: ST_TO_ADDR
33534: GO 33575
33536: LD_INT 2
33538: DOUBLE
33539: EQUAL
33540: IFTRUE 33544
33542: GO 33555
33544: POP
// tech := tech_mortar ; 3 :
33545: LD_ADDR_VAR 0 5
33549: PUSH
33550: LD_INT 41
33552: ST_TO_ADDR
33553: GO 33575
33555: LD_INT 3
33557: DOUBLE
33558: EQUAL
33559: IFTRUE 33563
33561: GO 33574
33563: POP
// tech := tech_bazooka ; end ;
33564: LD_ADDR_VAR 0 5
33568: PUSH
33569: LD_INT 44
33571: ST_TO_ADDR
33572: GO 33575
33574: POP
// if Researched ( side , tech ) then
33575: LD_VAR 0 3
33579: PPUSH
33580: LD_VAR 0 5
33584: PPUSH
33585: CALL_OW 325
33589: IFFALSE 33616
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33591: LD_ADDR_VAR 0 2
33595: PUSH
33596: LD_INT 5
33598: PUSH
33599: LD_INT 8
33601: PUSH
33602: LD_INT 9
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: LIST
33609: PUSH
33610: LD_VAR 0 4
33614: ARRAY
33615: ST_TO_ADDR
// end ;
33616: LD_VAR 0 2
33620: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33621: LD_INT 0
33623: PPUSH
33624: PPUSH
33625: PPUSH
// if not mines then
33626: LD_VAR 0 2
33630: NOT
33631: IFFALSE 33635
// exit ;
33633: GO 33779
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33635: LD_ADDR_VAR 0 5
33639: PUSH
33640: LD_INT 81
33642: PUSH
33643: LD_VAR 0 1
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 3
33654: PUSH
33655: LD_INT 21
33657: PUSH
33658: LD_INT 3
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PPUSH
33673: CALL_OW 69
33677: ST_TO_ADDR
// for i in mines do
33678: LD_ADDR_VAR 0 4
33682: PUSH
33683: LD_VAR 0 2
33687: PUSH
33688: FOR_IN
33689: IFFALSE 33777
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33691: LD_VAR 0 4
33695: PUSH
33696: LD_INT 1
33698: ARRAY
33699: PPUSH
33700: LD_VAR 0 4
33704: PUSH
33705: LD_INT 2
33707: ARRAY
33708: PPUSH
33709: CALL_OW 458
33713: NOT
33714: IFFALSE 33718
// continue ;
33716: GO 33688
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33718: LD_VAR 0 4
33722: PUSH
33723: LD_INT 1
33725: ARRAY
33726: PPUSH
33727: LD_VAR 0 4
33731: PUSH
33732: LD_INT 2
33734: ARRAY
33735: PPUSH
33736: CALL_OW 428
33740: PUSH
33741: LD_VAR 0 5
33745: IN
33746: IFFALSE 33775
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33748: LD_VAR 0 4
33752: PUSH
33753: LD_INT 1
33755: ARRAY
33756: PPUSH
33757: LD_VAR 0 4
33761: PUSH
33762: LD_INT 2
33764: ARRAY
33765: PPUSH
33766: LD_VAR 0 1
33770: PPUSH
33771: CALL_OW 456
// end ;
33775: GO 33688
33777: POP
33778: POP
// end ;
33779: LD_VAR 0 3
33783: RET
// export function Count ( array ) ; var i ; begin
33784: LD_INT 0
33786: PPUSH
33787: PPUSH
// result := 0 ;
33788: LD_ADDR_VAR 0 2
33792: PUSH
33793: LD_INT 0
33795: ST_TO_ADDR
// for i in array do
33796: LD_ADDR_VAR 0 3
33800: PUSH
33801: LD_VAR 0 1
33805: PUSH
33806: FOR_IN
33807: IFFALSE 33831
// if i then
33809: LD_VAR 0 3
33813: IFFALSE 33829
// result := result + 1 ;
33815: LD_ADDR_VAR 0 2
33819: PUSH
33820: LD_VAR 0 2
33824: PUSH
33825: LD_INT 1
33827: PLUS
33828: ST_TO_ADDR
33829: GO 33806
33831: POP
33832: POP
// end ;
33833: LD_VAR 0 2
33837: RET
// export function IsEmpty ( building ) ; begin
33838: LD_INT 0
33840: PPUSH
// if not building then
33841: LD_VAR 0 1
33845: NOT
33846: IFFALSE 33850
// exit ;
33848: GO 33893
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33850: LD_ADDR_VAR 0 2
33854: PUSH
33855: LD_VAR 0 1
33859: PUSH
33860: LD_INT 22
33862: PUSH
33863: LD_VAR 0 1
33867: PPUSH
33868: CALL_OW 255
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 58
33879: PUSH
33880: EMPTY
33881: LIST
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PPUSH
33887: CALL_OW 69
33891: IN
33892: ST_TO_ADDR
// end ;
33893: LD_VAR 0 2
33897: RET
// export function IsNotFull ( building ) ; begin
33898: LD_INT 0
33900: PPUSH
// if not building then
33901: LD_VAR 0 1
33905: NOT
33906: IFFALSE 33910
// exit ;
33908: GO 33929
// result := UnitsInside ( building ) < 6 ;
33910: LD_ADDR_VAR 0 2
33914: PUSH
33915: LD_VAR 0 1
33919: PPUSH
33920: CALL_OW 313
33924: PUSH
33925: LD_INT 6
33927: LESS
33928: ST_TO_ADDR
// end ;
33929: LD_VAR 0 2
33933: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33934: LD_INT 0
33936: PPUSH
33937: PPUSH
33938: PPUSH
33939: PPUSH
// tmp := [ ] ;
33940: LD_ADDR_VAR 0 3
33944: PUSH
33945: EMPTY
33946: ST_TO_ADDR
// list := [ ] ;
33947: LD_ADDR_VAR 0 5
33951: PUSH
33952: EMPTY
33953: ST_TO_ADDR
// for i = 16 to 25 do
33954: LD_ADDR_VAR 0 4
33958: PUSH
33959: DOUBLE
33960: LD_INT 16
33962: DEC
33963: ST_TO_ADDR
33964: LD_INT 25
33966: PUSH
33967: FOR_TO
33968: IFFALSE 34041
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33970: LD_ADDR_VAR 0 3
33974: PUSH
33975: LD_VAR 0 3
33979: PUSH
33980: LD_INT 22
33982: PUSH
33983: LD_VAR 0 1
33987: PPUSH
33988: CALL_OW 255
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 91
33999: PUSH
34000: LD_VAR 0 1
34004: PUSH
34005: LD_INT 6
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 30
34015: PUSH
34016: LD_VAR 0 4
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: LIST
34029: PUSH
34030: EMPTY
34031: LIST
34032: PPUSH
34033: CALL_OW 69
34037: ADD
34038: ST_TO_ADDR
34039: GO 33967
34041: POP
34042: POP
// for i = 1 to tmp do
34043: LD_ADDR_VAR 0 4
34047: PUSH
34048: DOUBLE
34049: LD_INT 1
34051: DEC
34052: ST_TO_ADDR
34053: LD_VAR 0 3
34057: PUSH
34058: FOR_TO
34059: IFFALSE 34147
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34061: LD_ADDR_VAR 0 5
34065: PUSH
34066: LD_VAR 0 5
34070: PUSH
34071: LD_VAR 0 3
34075: PUSH
34076: LD_VAR 0 4
34080: ARRAY
34081: PPUSH
34082: CALL_OW 266
34086: PUSH
34087: LD_VAR 0 3
34091: PUSH
34092: LD_VAR 0 4
34096: ARRAY
34097: PPUSH
34098: CALL_OW 250
34102: PUSH
34103: LD_VAR 0 3
34107: PUSH
34108: LD_VAR 0 4
34112: ARRAY
34113: PPUSH
34114: CALL_OW 251
34118: PUSH
34119: LD_VAR 0 3
34123: PUSH
34124: LD_VAR 0 4
34128: ARRAY
34129: PPUSH
34130: CALL_OW 254
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: PUSH
34141: EMPTY
34142: LIST
34143: ADD
34144: ST_TO_ADDR
34145: GO 34058
34147: POP
34148: POP
// result := list ;
34149: LD_ADDR_VAR 0 2
34153: PUSH
34154: LD_VAR 0 5
34158: ST_TO_ADDR
// end ;
34159: LD_VAR 0 2
34163: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34164: LD_INT 0
34166: PPUSH
34167: PPUSH
34168: PPUSH
34169: PPUSH
34170: PPUSH
34171: PPUSH
34172: PPUSH
// if not factory then
34173: LD_VAR 0 1
34177: NOT
34178: IFFALSE 34182
// exit ;
34180: GO 34775
// if control = control_apeman then
34182: LD_VAR 0 4
34186: PUSH
34187: LD_INT 5
34189: EQUAL
34190: IFFALSE 34299
// begin tmp := UnitsInside ( factory ) ;
34192: LD_ADDR_VAR 0 8
34196: PUSH
34197: LD_VAR 0 1
34201: PPUSH
34202: CALL_OW 313
34206: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34207: LD_VAR 0 8
34211: PPUSH
34212: LD_INT 25
34214: PUSH
34215: LD_INT 12
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PPUSH
34222: CALL_OW 72
34226: NOT
34227: IFFALSE 34237
// control := control_manual ;
34229: LD_ADDR_VAR 0 4
34233: PUSH
34234: LD_INT 1
34236: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34237: LD_ADDR_VAR 0 8
34241: PUSH
34242: LD_VAR 0 1
34246: PPUSH
34247: CALL 33934 0 1
34251: ST_TO_ADDR
// if tmp then
34252: LD_VAR 0 8
34256: IFFALSE 34299
// begin for i in tmp do
34258: LD_ADDR_VAR 0 7
34262: PUSH
34263: LD_VAR 0 8
34267: PUSH
34268: FOR_IN
34269: IFFALSE 34297
// if i [ 1 ] = b_ext_radio then
34271: LD_VAR 0 7
34275: PUSH
34276: LD_INT 1
34278: ARRAY
34279: PUSH
34280: LD_INT 22
34282: EQUAL
34283: IFFALSE 34295
// begin control := control_remote ;
34285: LD_ADDR_VAR 0 4
34289: PUSH
34290: LD_INT 2
34292: ST_TO_ADDR
// break ;
34293: GO 34297
// end ;
34295: GO 34268
34297: POP
34298: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34299: LD_VAR 0 1
34303: PPUSH
34304: LD_VAR 0 2
34308: PPUSH
34309: LD_VAR 0 3
34313: PPUSH
34314: LD_VAR 0 4
34318: PPUSH
34319: LD_VAR 0 5
34323: PPUSH
34324: CALL_OW 448
34328: IFFALSE 34363
// begin result := [ chassis , engine , control , weapon ] ;
34330: LD_ADDR_VAR 0 6
34334: PUSH
34335: LD_VAR 0 2
34339: PUSH
34340: LD_VAR 0 3
34344: PUSH
34345: LD_VAR 0 4
34349: PUSH
34350: LD_VAR 0 5
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: ST_TO_ADDR
// exit ;
34361: GO 34775
// end ; _chassis := AvailableChassisList ( factory ) ;
34363: LD_ADDR_VAR 0 9
34367: PUSH
34368: LD_VAR 0 1
34372: PPUSH
34373: CALL_OW 475
34377: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34378: LD_ADDR_VAR 0 11
34382: PUSH
34383: LD_VAR 0 1
34387: PPUSH
34388: CALL_OW 476
34392: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34393: LD_ADDR_VAR 0 12
34397: PUSH
34398: LD_VAR 0 1
34402: PPUSH
34403: CALL_OW 477
34407: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34408: LD_ADDR_VAR 0 10
34412: PUSH
34413: LD_VAR 0 1
34417: PPUSH
34418: CALL_OW 478
34422: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34423: LD_VAR 0 9
34427: NOT
34428: PUSH
34429: LD_VAR 0 11
34433: NOT
34434: OR
34435: PUSH
34436: LD_VAR 0 12
34440: NOT
34441: OR
34442: PUSH
34443: LD_VAR 0 10
34447: NOT
34448: OR
34449: IFFALSE 34484
// begin result := [ chassis , engine , control , weapon ] ;
34451: LD_ADDR_VAR 0 6
34455: PUSH
34456: LD_VAR 0 2
34460: PUSH
34461: LD_VAR 0 3
34465: PUSH
34466: LD_VAR 0 4
34470: PUSH
34471: LD_VAR 0 5
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: ST_TO_ADDR
// exit ;
34482: GO 34775
// end ; if not chassis in _chassis then
34484: LD_VAR 0 2
34488: PUSH
34489: LD_VAR 0 9
34493: IN
34494: NOT
34495: IFFALSE 34521
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34497: LD_ADDR_VAR 0 2
34501: PUSH
34502: LD_VAR 0 9
34506: PUSH
34507: LD_INT 1
34509: PPUSH
34510: LD_VAR 0 9
34514: PPUSH
34515: CALL_OW 12
34519: ARRAY
34520: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34521: LD_VAR 0 2
34525: PPUSH
34526: LD_VAR 0 3
34530: PPUSH
34531: CALL 34780 0 2
34535: NOT
34536: IFFALSE 34595
// repeat engine := _engine [ 1 ] ;
34538: LD_ADDR_VAR 0 3
34542: PUSH
34543: LD_VAR 0 11
34547: PUSH
34548: LD_INT 1
34550: ARRAY
34551: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34552: LD_ADDR_VAR 0 11
34556: PUSH
34557: LD_VAR 0 11
34561: PPUSH
34562: LD_INT 1
34564: PPUSH
34565: CALL_OW 3
34569: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34570: LD_VAR 0 2
34574: PPUSH
34575: LD_VAR 0 3
34579: PPUSH
34580: CALL 34780 0 2
34584: PUSH
34585: LD_VAR 0 11
34589: PUSH
34590: EMPTY
34591: EQUAL
34592: OR
34593: IFFALSE 34538
// if not control in _control then
34595: LD_VAR 0 4
34599: PUSH
34600: LD_VAR 0 12
34604: IN
34605: NOT
34606: IFFALSE 34632
// control := _control [ rand ( 1 , _control ) ] ;
34608: LD_ADDR_VAR 0 4
34612: PUSH
34613: LD_VAR 0 12
34617: PUSH
34618: LD_INT 1
34620: PPUSH
34621: LD_VAR 0 12
34625: PPUSH
34626: CALL_OW 12
34630: ARRAY
34631: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34632: LD_VAR 0 2
34636: PPUSH
34637: LD_VAR 0 5
34641: PPUSH
34642: CALL 35000 0 2
34646: NOT
34647: IFFALSE 34706
// repeat weapon := _weapon [ 1 ] ;
34649: LD_ADDR_VAR 0 5
34653: PUSH
34654: LD_VAR 0 10
34658: PUSH
34659: LD_INT 1
34661: ARRAY
34662: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34663: LD_ADDR_VAR 0 10
34667: PUSH
34668: LD_VAR 0 10
34672: PPUSH
34673: LD_INT 1
34675: PPUSH
34676: CALL_OW 3
34680: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34681: LD_VAR 0 2
34685: PPUSH
34686: LD_VAR 0 5
34690: PPUSH
34691: CALL 35000 0 2
34695: PUSH
34696: LD_VAR 0 10
34700: PUSH
34701: EMPTY
34702: EQUAL
34703: OR
34704: IFFALSE 34649
// result := [ ] ;
34706: LD_ADDR_VAR 0 6
34710: PUSH
34711: EMPTY
34712: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34713: LD_VAR 0 1
34717: PPUSH
34718: LD_VAR 0 2
34722: PPUSH
34723: LD_VAR 0 3
34727: PPUSH
34728: LD_VAR 0 4
34732: PPUSH
34733: LD_VAR 0 5
34737: PPUSH
34738: CALL_OW 448
34742: IFFALSE 34775
// result := [ chassis , engine , control , weapon ] ;
34744: LD_ADDR_VAR 0 6
34748: PUSH
34749: LD_VAR 0 2
34753: PUSH
34754: LD_VAR 0 3
34758: PUSH
34759: LD_VAR 0 4
34763: PUSH
34764: LD_VAR 0 5
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: ST_TO_ADDR
// end ;
34775: LD_VAR 0 6
34779: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34780: LD_INT 0
34782: PPUSH
// if not chassis or not engine then
34783: LD_VAR 0 1
34787: NOT
34788: PUSH
34789: LD_VAR 0 2
34793: NOT
34794: OR
34795: IFFALSE 34799
// exit ;
34797: GO 34995
// case engine of engine_solar :
34799: LD_VAR 0 2
34803: PUSH
34804: LD_INT 2
34806: DOUBLE
34807: EQUAL
34808: IFTRUE 34812
34810: GO 34850
34812: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34813: LD_ADDR_VAR 0 3
34817: PUSH
34818: LD_INT 11
34820: PUSH
34821: LD_INT 12
34823: PUSH
34824: LD_INT 13
34826: PUSH
34827: LD_INT 14
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: LD_INT 2
34835: PUSH
34836: LD_INT 3
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: ST_TO_ADDR
34848: GO 34979
34850: LD_INT 1
34852: DOUBLE
34853: EQUAL
34854: IFTRUE 34858
34856: GO 34920
34858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34859: LD_ADDR_VAR 0 3
34863: PUSH
34864: LD_INT 11
34866: PUSH
34867: LD_INT 12
34869: PUSH
34870: LD_INT 13
34872: PUSH
34873: LD_INT 14
34875: PUSH
34876: LD_INT 1
34878: PUSH
34879: LD_INT 2
34881: PUSH
34882: LD_INT 3
34884: PUSH
34885: LD_INT 4
34887: PUSH
34888: LD_INT 5
34890: PUSH
34891: LD_INT 21
34893: PUSH
34894: LD_INT 23
34896: PUSH
34897: LD_INT 22
34899: PUSH
34900: LD_INT 24
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: ST_TO_ADDR
34918: GO 34979
34920: LD_INT 3
34922: DOUBLE
34923: EQUAL
34924: IFTRUE 34928
34926: GO 34978
34928: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34929: LD_ADDR_VAR 0 3
34933: PUSH
34934: LD_INT 13
34936: PUSH
34937: LD_INT 14
34939: PUSH
34940: LD_INT 2
34942: PUSH
34943: LD_INT 3
34945: PUSH
34946: LD_INT 4
34948: PUSH
34949: LD_INT 5
34951: PUSH
34952: LD_INT 21
34954: PUSH
34955: LD_INT 22
34957: PUSH
34958: LD_INT 23
34960: PUSH
34961: LD_INT 24
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: ST_TO_ADDR
34976: GO 34979
34978: POP
// result := ( chassis in result ) ;
34979: LD_ADDR_VAR 0 3
34983: PUSH
34984: LD_VAR 0 1
34988: PUSH
34989: LD_VAR 0 3
34993: IN
34994: ST_TO_ADDR
// end ;
34995: LD_VAR 0 3
34999: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35000: LD_INT 0
35002: PPUSH
// if not chassis or not weapon then
35003: LD_VAR 0 1
35007: NOT
35008: PUSH
35009: LD_VAR 0 2
35013: NOT
35014: OR
35015: IFFALSE 35019
// exit ;
35017: GO 36081
// case weapon of us_machine_gun :
35019: LD_VAR 0 2
35023: PUSH
35024: LD_INT 2
35026: DOUBLE
35027: EQUAL
35028: IFTRUE 35032
35030: GO 35062
35032: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35033: LD_ADDR_VAR 0 3
35037: PUSH
35038: LD_INT 1
35040: PUSH
35041: LD_INT 2
35043: PUSH
35044: LD_INT 3
35046: PUSH
35047: LD_INT 4
35049: PUSH
35050: LD_INT 5
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: ST_TO_ADDR
35060: GO 36065
35062: LD_INT 3
35064: DOUBLE
35065: EQUAL
35066: IFTRUE 35070
35068: GO 35100
35070: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35071: LD_ADDR_VAR 0 3
35075: PUSH
35076: LD_INT 1
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: LD_INT 3
35084: PUSH
35085: LD_INT 4
35087: PUSH
35088: LD_INT 5
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: ST_TO_ADDR
35098: GO 36065
35100: LD_INT 11
35102: DOUBLE
35103: EQUAL
35104: IFTRUE 35108
35106: GO 35138
35108: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35109: LD_ADDR_VAR 0 3
35113: PUSH
35114: LD_INT 1
35116: PUSH
35117: LD_INT 2
35119: PUSH
35120: LD_INT 3
35122: PUSH
35123: LD_INT 4
35125: PUSH
35126: LD_INT 5
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: ST_TO_ADDR
35136: GO 36065
35138: LD_INT 4
35140: DOUBLE
35141: EQUAL
35142: IFTRUE 35146
35144: GO 35172
35146: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35147: LD_ADDR_VAR 0 3
35151: PUSH
35152: LD_INT 2
35154: PUSH
35155: LD_INT 3
35157: PUSH
35158: LD_INT 4
35160: PUSH
35161: LD_INT 5
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: ST_TO_ADDR
35170: GO 36065
35172: LD_INT 5
35174: DOUBLE
35175: EQUAL
35176: IFTRUE 35180
35178: GO 35206
35180: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35181: LD_ADDR_VAR 0 3
35185: PUSH
35186: LD_INT 2
35188: PUSH
35189: LD_INT 3
35191: PUSH
35192: LD_INT 4
35194: PUSH
35195: LD_INT 5
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: ST_TO_ADDR
35204: GO 36065
35206: LD_INT 9
35208: DOUBLE
35209: EQUAL
35210: IFTRUE 35214
35212: GO 35240
35214: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35215: LD_ADDR_VAR 0 3
35219: PUSH
35220: LD_INT 2
35222: PUSH
35223: LD_INT 3
35225: PUSH
35226: LD_INT 4
35228: PUSH
35229: LD_INT 5
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: ST_TO_ADDR
35238: GO 36065
35240: LD_INT 7
35242: DOUBLE
35243: EQUAL
35244: IFTRUE 35248
35246: GO 35274
35248: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35249: LD_ADDR_VAR 0 3
35253: PUSH
35254: LD_INT 2
35256: PUSH
35257: LD_INT 3
35259: PUSH
35260: LD_INT 4
35262: PUSH
35263: LD_INT 5
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: ST_TO_ADDR
35272: GO 36065
35274: LD_INT 12
35276: DOUBLE
35277: EQUAL
35278: IFTRUE 35282
35280: GO 35308
35282: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35283: LD_ADDR_VAR 0 3
35287: PUSH
35288: LD_INT 2
35290: PUSH
35291: LD_INT 3
35293: PUSH
35294: LD_INT 4
35296: PUSH
35297: LD_INT 5
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: ST_TO_ADDR
35306: GO 36065
35308: LD_INT 13
35310: DOUBLE
35311: EQUAL
35312: IFTRUE 35316
35314: GO 35342
35316: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35317: LD_ADDR_VAR 0 3
35321: PUSH
35322: LD_INT 2
35324: PUSH
35325: LD_INT 3
35327: PUSH
35328: LD_INT 4
35330: PUSH
35331: LD_INT 5
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: ST_TO_ADDR
35340: GO 36065
35342: LD_INT 14
35344: DOUBLE
35345: EQUAL
35346: IFTRUE 35350
35348: GO 35368
35350: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35351: LD_ADDR_VAR 0 3
35355: PUSH
35356: LD_INT 4
35358: PUSH
35359: LD_INT 5
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: ST_TO_ADDR
35366: GO 36065
35368: LD_INT 6
35370: DOUBLE
35371: EQUAL
35372: IFTRUE 35376
35374: GO 35394
35376: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35377: LD_ADDR_VAR 0 3
35381: PUSH
35382: LD_INT 4
35384: PUSH
35385: LD_INT 5
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: ST_TO_ADDR
35392: GO 36065
35394: LD_INT 10
35396: DOUBLE
35397: EQUAL
35398: IFTRUE 35402
35400: GO 35420
35402: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35403: LD_ADDR_VAR 0 3
35407: PUSH
35408: LD_INT 4
35410: PUSH
35411: LD_INT 5
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: ST_TO_ADDR
35418: GO 36065
35420: LD_INT 22
35422: DOUBLE
35423: EQUAL
35424: IFTRUE 35428
35426: GO 35454
35428: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35429: LD_ADDR_VAR 0 3
35433: PUSH
35434: LD_INT 11
35436: PUSH
35437: LD_INT 12
35439: PUSH
35440: LD_INT 13
35442: PUSH
35443: LD_INT 14
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: ST_TO_ADDR
35452: GO 36065
35454: LD_INT 23
35456: DOUBLE
35457: EQUAL
35458: IFTRUE 35462
35460: GO 35488
35462: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35463: LD_ADDR_VAR 0 3
35467: PUSH
35468: LD_INT 11
35470: PUSH
35471: LD_INT 12
35473: PUSH
35474: LD_INT 13
35476: PUSH
35477: LD_INT 14
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: ST_TO_ADDR
35486: GO 36065
35488: LD_INT 24
35490: DOUBLE
35491: EQUAL
35492: IFTRUE 35496
35494: GO 35522
35496: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35497: LD_ADDR_VAR 0 3
35501: PUSH
35502: LD_INT 11
35504: PUSH
35505: LD_INT 12
35507: PUSH
35508: LD_INT 13
35510: PUSH
35511: LD_INT 14
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: ST_TO_ADDR
35520: GO 36065
35522: LD_INT 30
35524: DOUBLE
35525: EQUAL
35526: IFTRUE 35530
35528: GO 35556
35530: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35531: LD_ADDR_VAR 0 3
35535: PUSH
35536: LD_INT 11
35538: PUSH
35539: LD_INT 12
35541: PUSH
35542: LD_INT 13
35544: PUSH
35545: LD_INT 14
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: ST_TO_ADDR
35554: GO 36065
35556: LD_INT 25
35558: DOUBLE
35559: EQUAL
35560: IFTRUE 35564
35562: GO 35582
35564: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35565: LD_ADDR_VAR 0 3
35569: PUSH
35570: LD_INT 13
35572: PUSH
35573: LD_INT 14
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: ST_TO_ADDR
35580: GO 36065
35582: LD_INT 27
35584: DOUBLE
35585: EQUAL
35586: IFTRUE 35590
35588: GO 35608
35590: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35591: LD_ADDR_VAR 0 3
35595: PUSH
35596: LD_INT 13
35598: PUSH
35599: LD_INT 14
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: ST_TO_ADDR
35606: GO 36065
35608: LD_EXP 49
35612: DOUBLE
35613: EQUAL
35614: IFTRUE 35618
35616: GO 35644
35618: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35619: LD_ADDR_VAR 0 3
35623: PUSH
35624: LD_INT 11
35626: PUSH
35627: LD_INT 12
35629: PUSH
35630: LD_INT 13
35632: PUSH
35633: LD_INT 14
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: ST_TO_ADDR
35642: GO 36065
35644: LD_INT 28
35646: DOUBLE
35647: EQUAL
35648: IFTRUE 35652
35650: GO 35670
35652: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35653: LD_ADDR_VAR 0 3
35657: PUSH
35658: LD_INT 13
35660: PUSH
35661: LD_INT 14
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: ST_TO_ADDR
35668: GO 36065
35670: LD_INT 29
35672: DOUBLE
35673: EQUAL
35674: IFTRUE 35678
35676: GO 35696
35678: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35679: LD_ADDR_VAR 0 3
35683: PUSH
35684: LD_INT 13
35686: PUSH
35687: LD_INT 14
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: ST_TO_ADDR
35694: GO 36065
35696: LD_INT 31
35698: DOUBLE
35699: EQUAL
35700: IFTRUE 35704
35702: GO 35722
35704: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35705: LD_ADDR_VAR 0 3
35709: PUSH
35710: LD_INT 13
35712: PUSH
35713: LD_INT 14
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: ST_TO_ADDR
35720: GO 36065
35722: LD_INT 26
35724: DOUBLE
35725: EQUAL
35726: IFTRUE 35730
35728: GO 35748
35730: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35731: LD_ADDR_VAR 0 3
35735: PUSH
35736: LD_INT 13
35738: PUSH
35739: LD_INT 14
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: ST_TO_ADDR
35746: GO 36065
35748: LD_INT 42
35750: DOUBLE
35751: EQUAL
35752: IFTRUE 35756
35754: GO 35782
35756: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35757: LD_ADDR_VAR 0 3
35761: PUSH
35762: LD_INT 21
35764: PUSH
35765: LD_INT 22
35767: PUSH
35768: LD_INT 23
35770: PUSH
35771: LD_INT 24
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: ST_TO_ADDR
35780: GO 36065
35782: LD_INT 43
35784: DOUBLE
35785: EQUAL
35786: IFTRUE 35790
35788: GO 35816
35790: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35791: LD_ADDR_VAR 0 3
35795: PUSH
35796: LD_INT 21
35798: PUSH
35799: LD_INT 22
35801: PUSH
35802: LD_INT 23
35804: PUSH
35805: LD_INT 24
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: ST_TO_ADDR
35814: GO 36065
35816: LD_INT 44
35818: DOUBLE
35819: EQUAL
35820: IFTRUE 35824
35822: GO 35850
35824: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35825: LD_ADDR_VAR 0 3
35829: PUSH
35830: LD_INT 21
35832: PUSH
35833: LD_INT 22
35835: PUSH
35836: LD_INT 23
35838: PUSH
35839: LD_INT 24
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: ST_TO_ADDR
35848: GO 36065
35850: LD_INT 45
35852: DOUBLE
35853: EQUAL
35854: IFTRUE 35858
35856: GO 35884
35858: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35859: LD_ADDR_VAR 0 3
35863: PUSH
35864: LD_INT 21
35866: PUSH
35867: LD_INT 22
35869: PUSH
35870: LD_INT 23
35872: PUSH
35873: LD_INT 24
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: ST_TO_ADDR
35882: GO 36065
35884: LD_INT 49
35886: DOUBLE
35887: EQUAL
35888: IFTRUE 35892
35890: GO 35918
35892: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35893: LD_ADDR_VAR 0 3
35897: PUSH
35898: LD_INT 21
35900: PUSH
35901: LD_INT 22
35903: PUSH
35904: LD_INT 23
35906: PUSH
35907: LD_INT 24
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: ST_TO_ADDR
35916: GO 36065
35918: LD_INT 51
35920: DOUBLE
35921: EQUAL
35922: IFTRUE 35926
35924: GO 35952
35926: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35927: LD_ADDR_VAR 0 3
35931: PUSH
35932: LD_INT 21
35934: PUSH
35935: LD_INT 22
35937: PUSH
35938: LD_INT 23
35940: PUSH
35941: LD_INT 24
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: ST_TO_ADDR
35950: GO 36065
35952: LD_INT 52
35954: DOUBLE
35955: EQUAL
35956: IFTRUE 35960
35958: GO 35986
35960: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35961: LD_ADDR_VAR 0 3
35965: PUSH
35966: LD_INT 21
35968: PUSH
35969: LD_INT 22
35971: PUSH
35972: LD_INT 23
35974: PUSH
35975: LD_INT 24
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: ST_TO_ADDR
35984: GO 36065
35986: LD_INT 53
35988: DOUBLE
35989: EQUAL
35990: IFTRUE 35994
35992: GO 36012
35994: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35995: LD_ADDR_VAR 0 3
35999: PUSH
36000: LD_INT 23
36002: PUSH
36003: LD_INT 24
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: ST_TO_ADDR
36010: GO 36065
36012: LD_INT 46
36014: DOUBLE
36015: EQUAL
36016: IFTRUE 36020
36018: GO 36038
36020: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36021: LD_ADDR_VAR 0 3
36025: PUSH
36026: LD_INT 23
36028: PUSH
36029: LD_INT 24
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: ST_TO_ADDR
36036: GO 36065
36038: LD_INT 47
36040: DOUBLE
36041: EQUAL
36042: IFTRUE 36046
36044: GO 36064
36046: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36047: LD_ADDR_VAR 0 3
36051: PUSH
36052: LD_INT 23
36054: PUSH
36055: LD_INT 24
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: ST_TO_ADDR
36062: GO 36065
36064: POP
// result := ( chassis in result ) ;
36065: LD_ADDR_VAR 0 3
36069: PUSH
36070: LD_VAR 0 1
36074: PUSH
36075: LD_VAR 0 3
36079: IN
36080: ST_TO_ADDR
// end ;
36081: LD_VAR 0 3
36085: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36086: LD_INT 0
36088: PPUSH
36089: PPUSH
36090: PPUSH
36091: PPUSH
36092: PPUSH
36093: PPUSH
36094: PPUSH
// result := array ;
36095: LD_ADDR_VAR 0 5
36099: PUSH
36100: LD_VAR 0 1
36104: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36105: LD_VAR 0 1
36109: NOT
36110: PUSH
36111: LD_VAR 0 2
36115: NOT
36116: OR
36117: PUSH
36118: LD_VAR 0 3
36122: NOT
36123: OR
36124: PUSH
36125: LD_VAR 0 2
36129: PUSH
36130: LD_VAR 0 1
36134: GREATER
36135: OR
36136: PUSH
36137: LD_VAR 0 3
36141: PUSH
36142: LD_VAR 0 1
36146: GREATER
36147: OR
36148: IFFALSE 36152
// exit ;
36150: GO 36448
// if direction then
36152: LD_VAR 0 4
36156: IFFALSE 36220
// begin d := 1 ;
36158: LD_ADDR_VAR 0 9
36162: PUSH
36163: LD_INT 1
36165: ST_TO_ADDR
// if i_from > i_to then
36166: LD_VAR 0 2
36170: PUSH
36171: LD_VAR 0 3
36175: GREATER
36176: IFFALSE 36202
// length := ( array - i_from ) + i_to else
36178: LD_ADDR_VAR 0 11
36182: PUSH
36183: LD_VAR 0 1
36187: PUSH
36188: LD_VAR 0 2
36192: MINUS
36193: PUSH
36194: LD_VAR 0 3
36198: PLUS
36199: ST_TO_ADDR
36200: GO 36218
// length := i_to - i_from ;
36202: LD_ADDR_VAR 0 11
36206: PUSH
36207: LD_VAR 0 3
36211: PUSH
36212: LD_VAR 0 2
36216: MINUS
36217: ST_TO_ADDR
// end else
36218: GO 36281
// begin d := - 1 ;
36220: LD_ADDR_VAR 0 9
36224: PUSH
36225: LD_INT 1
36227: NEG
36228: ST_TO_ADDR
// if i_from > i_to then
36229: LD_VAR 0 2
36233: PUSH
36234: LD_VAR 0 3
36238: GREATER
36239: IFFALSE 36259
// length := i_from - i_to else
36241: LD_ADDR_VAR 0 11
36245: PUSH
36246: LD_VAR 0 2
36250: PUSH
36251: LD_VAR 0 3
36255: MINUS
36256: ST_TO_ADDR
36257: GO 36281
// length := ( array - i_to ) + i_from ;
36259: LD_ADDR_VAR 0 11
36263: PUSH
36264: LD_VAR 0 1
36268: PUSH
36269: LD_VAR 0 3
36273: MINUS
36274: PUSH
36275: LD_VAR 0 2
36279: PLUS
36280: ST_TO_ADDR
// end ; if not length then
36281: LD_VAR 0 11
36285: NOT
36286: IFFALSE 36290
// exit ;
36288: GO 36448
// tmp := array ;
36290: LD_ADDR_VAR 0 10
36294: PUSH
36295: LD_VAR 0 1
36299: ST_TO_ADDR
// for i = 1 to length do
36300: LD_ADDR_VAR 0 6
36304: PUSH
36305: DOUBLE
36306: LD_INT 1
36308: DEC
36309: ST_TO_ADDR
36310: LD_VAR 0 11
36314: PUSH
36315: FOR_TO
36316: IFFALSE 36436
// begin for j = 1 to array do
36318: LD_ADDR_VAR 0 7
36322: PUSH
36323: DOUBLE
36324: LD_INT 1
36326: DEC
36327: ST_TO_ADDR
36328: LD_VAR 0 1
36332: PUSH
36333: FOR_TO
36334: IFFALSE 36422
// begin k := j + d ;
36336: LD_ADDR_VAR 0 8
36340: PUSH
36341: LD_VAR 0 7
36345: PUSH
36346: LD_VAR 0 9
36350: PLUS
36351: ST_TO_ADDR
// if k > array then
36352: LD_VAR 0 8
36356: PUSH
36357: LD_VAR 0 1
36361: GREATER
36362: IFFALSE 36372
// k := 1 ;
36364: LD_ADDR_VAR 0 8
36368: PUSH
36369: LD_INT 1
36371: ST_TO_ADDR
// if not k then
36372: LD_VAR 0 8
36376: NOT
36377: IFFALSE 36389
// k := array ;
36379: LD_ADDR_VAR 0 8
36383: PUSH
36384: LD_VAR 0 1
36388: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36389: LD_ADDR_VAR 0 10
36393: PUSH
36394: LD_VAR 0 10
36398: PPUSH
36399: LD_VAR 0 8
36403: PPUSH
36404: LD_VAR 0 1
36408: PUSH
36409: LD_VAR 0 7
36413: ARRAY
36414: PPUSH
36415: CALL_OW 1
36419: ST_TO_ADDR
// end ;
36420: GO 36333
36422: POP
36423: POP
// array := tmp ;
36424: LD_ADDR_VAR 0 1
36428: PUSH
36429: LD_VAR 0 10
36433: ST_TO_ADDR
// end ;
36434: GO 36315
36436: POP
36437: POP
// result := array ;
36438: LD_ADDR_VAR 0 5
36442: PUSH
36443: LD_VAR 0 1
36447: ST_TO_ADDR
// end ;
36448: LD_VAR 0 5
36452: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36453: LD_INT 0
36455: PPUSH
36456: PPUSH
// result := 0 ;
36457: LD_ADDR_VAR 0 3
36461: PUSH
36462: LD_INT 0
36464: ST_TO_ADDR
// if not array or not value in array then
36465: LD_VAR 0 1
36469: NOT
36470: PUSH
36471: LD_VAR 0 2
36475: PUSH
36476: LD_VAR 0 1
36480: IN
36481: NOT
36482: OR
36483: IFFALSE 36487
// exit ;
36485: GO 36541
// for i = 1 to array do
36487: LD_ADDR_VAR 0 4
36491: PUSH
36492: DOUBLE
36493: LD_INT 1
36495: DEC
36496: ST_TO_ADDR
36497: LD_VAR 0 1
36501: PUSH
36502: FOR_TO
36503: IFFALSE 36539
// if value = array [ i ] then
36505: LD_VAR 0 2
36509: PUSH
36510: LD_VAR 0 1
36514: PUSH
36515: LD_VAR 0 4
36519: ARRAY
36520: EQUAL
36521: IFFALSE 36537
// begin result := i ;
36523: LD_ADDR_VAR 0 3
36527: PUSH
36528: LD_VAR 0 4
36532: ST_TO_ADDR
// exit ;
36533: POP
36534: POP
36535: GO 36541
// end ;
36537: GO 36502
36539: POP
36540: POP
// end ;
36541: LD_VAR 0 3
36545: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36546: LD_INT 0
36548: PPUSH
// vc_chassis := chassis ;
36549: LD_ADDR_OWVAR 37
36553: PUSH
36554: LD_VAR 0 1
36558: ST_TO_ADDR
// vc_engine := engine ;
36559: LD_ADDR_OWVAR 39
36563: PUSH
36564: LD_VAR 0 2
36568: ST_TO_ADDR
// vc_control := control ;
36569: LD_ADDR_OWVAR 38
36573: PUSH
36574: LD_VAR 0 3
36578: ST_TO_ADDR
// vc_weapon := weapon ;
36579: LD_ADDR_OWVAR 40
36583: PUSH
36584: LD_VAR 0 4
36588: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36589: LD_ADDR_OWVAR 41
36593: PUSH
36594: LD_VAR 0 5
36598: ST_TO_ADDR
// end ;
36599: LD_VAR 0 6
36603: RET
// export function WantPlant ( unit ) ; var task ; begin
36604: LD_INT 0
36606: PPUSH
36607: PPUSH
// result := false ;
36608: LD_ADDR_VAR 0 2
36612: PUSH
36613: LD_INT 0
36615: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36616: LD_ADDR_VAR 0 3
36620: PUSH
36621: LD_VAR 0 1
36625: PPUSH
36626: CALL_OW 437
36630: ST_TO_ADDR
// if task then
36631: LD_VAR 0 3
36635: IFFALSE 36663
// if task [ 1 ] [ 1 ] = p then
36637: LD_VAR 0 3
36641: PUSH
36642: LD_INT 1
36644: ARRAY
36645: PUSH
36646: LD_INT 1
36648: ARRAY
36649: PUSH
36650: LD_STRING p
36652: EQUAL
36653: IFFALSE 36663
// result := true ;
36655: LD_ADDR_VAR 0 2
36659: PUSH
36660: LD_INT 1
36662: ST_TO_ADDR
// end ;
36663: LD_VAR 0 2
36667: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36668: LD_INT 0
36670: PPUSH
36671: PPUSH
36672: PPUSH
36673: PPUSH
// if pos < 1 then
36674: LD_VAR 0 2
36678: PUSH
36679: LD_INT 1
36681: LESS
36682: IFFALSE 36686
// exit ;
36684: GO 36989
// if pos = 1 then
36686: LD_VAR 0 2
36690: PUSH
36691: LD_INT 1
36693: EQUAL
36694: IFFALSE 36727
// result := Replace ( arr , pos [ 1 ] , value ) else
36696: LD_ADDR_VAR 0 4
36700: PUSH
36701: LD_VAR 0 1
36705: PPUSH
36706: LD_VAR 0 2
36710: PUSH
36711: LD_INT 1
36713: ARRAY
36714: PPUSH
36715: LD_VAR 0 3
36719: PPUSH
36720: CALL_OW 1
36724: ST_TO_ADDR
36725: GO 36989
// begin tmp := arr ;
36727: LD_ADDR_VAR 0 6
36731: PUSH
36732: LD_VAR 0 1
36736: ST_TO_ADDR
// s_arr := [ tmp ] ;
36737: LD_ADDR_VAR 0 7
36741: PUSH
36742: LD_VAR 0 6
36746: PUSH
36747: EMPTY
36748: LIST
36749: ST_TO_ADDR
// for i = 1 to pos - 1 do
36750: LD_ADDR_VAR 0 5
36754: PUSH
36755: DOUBLE
36756: LD_INT 1
36758: DEC
36759: ST_TO_ADDR
36760: LD_VAR 0 2
36764: PUSH
36765: LD_INT 1
36767: MINUS
36768: PUSH
36769: FOR_TO
36770: IFFALSE 36815
// begin tmp := tmp [ pos [ i ] ] ;
36772: LD_ADDR_VAR 0 6
36776: PUSH
36777: LD_VAR 0 6
36781: PUSH
36782: LD_VAR 0 2
36786: PUSH
36787: LD_VAR 0 5
36791: ARRAY
36792: ARRAY
36793: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36794: LD_ADDR_VAR 0 7
36798: PUSH
36799: LD_VAR 0 7
36803: PUSH
36804: LD_VAR 0 6
36808: PUSH
36809: EMPTY
36810: LIST
36811: ADD
36812: ST_TO_ADDR
// end ;
36813: GO 36769
36815: POP
36816: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36817: LD_ADDR_VAR 0 6
36821: PUSH
36822: LD_VAR 0 6
36826: PPUSH
36827: LD_VAR 0 2
36831: PUSH
36832: LD_VAR 0 2
36836: ARRAY
36837: PPUSH
36838: LD_VAR 0 3
36842: PPUSH
36843: CALL_OW 1
36847: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36848: LD_ADDR_VAR 0 7
36852: PUSH
36853: LD_VAR 0 7
36857: PPUSH
36858: LD_VAR 0 7
36862: PPUSH
36863: LD_VAR 0 6
36867: PPUSH
36868: CALL_OW 1
36872: ST_TO_ADDR
// for i = s_arr downto 2 do
36873: LD_ADDR_VAR 0 5
36877: PUSH
36878: DOUBLE
36879: LD_VAR 0 7
36883: INC
36884: ST_TO_ADDR
36885: LD_INT 2
36887: PUSH
36888: FOR_DOWNTO
36889: IFFALSE 36973
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36891: LD_ADDR_VAR 0 6
36895: PUSH
36896: LD_VAR 0 7
36900: PUSH
36901: LD_VAR 0 5
36905: PUSH
36906: LD_INT 1
36908: MINUS
36909: ARRAY
36910: PPUSH
36911: LD_VAR 0 2
36915: PUSH
36916: LD_VAR 0 5
36920: PUSH
36921: LD_INT 1
36923: MINUS
36924: ARRAY
36925: PPUSH
36926: LD_VAR 0 7
36930: PUSH
36931: LD_VAR 0 5
36935: ARRAY
36936: PPUSH
36937: CALL_OW 1
36941: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36942: LD_ADDR_VAR 0 7
36946: PUSH
36947: LD_VAR 0 7
36951: PPUSH
36952: LD_VAR 0 5
36956: PUSH
36957: LD_INT 1
36959: MINUS
36960: PPUSH
36961: LD_VAR 0 6
36965: PPUSH
36966: CALL_OW 1
36970: ST_TO_ADDR
// end ;
36971: GO 36888
36973: POP
36974: POP
// result := s_arr [ 1 ] ;
36975: LD_ADDR_VAR 0 4
36979: PUSH
36980: LD_VAR 0 7
36984: PUSH
36985: LD_INT 1
36987: ARRAY
36988: ST_TO_ADDR
// end ; end ;
36989: LD_VAR 0 4
36993: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36994: LD_INT 0
36996: PPUSH
36997: PPUSH
// if not list then
36998: LD_VAR 0 1
37002: NOT
37003: IFFALSE 37007
// exit ;
37005: GO 37098
// i := list [ pos1 ] ;
37007: LD_ADDR_VAR 0 5
37011: PUSH
37012: LD_VAR 0 1
37016: PUSH
37017: LD_VAR 0 2
37021: ARRAY
37022: ST_TO_ADDR
// if not i then
37023: LD_VAR 0 5
37027: NOT
37028: IFFALSE 37032
// exit ;
37030: GO 37098
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37032: LD_ADDR_VAR 0 1
37036: PUSH
37037: LD_VAR 0 1
37041: PPUSH
37042: LD_VAR 0 2
37046: PPUSH
37047: LD_VAR 0 1
37051: PUSH
37052: LD_VAR 0 3
37056: ARRAY
37057: PPUSH
37058: CALL_OW 1
37062: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37063: LD_ADDR_VAR 0 1
37067: PUSH
37068: LD_VAR 0 1
37072: PPUSH
37073: LD_VAR 0 3
37077: PPUSH
37078: LD_VAR 0 5
37082: PPUSH
37083: CALL_OW 1
37087: ST_TO_ADDR
// result := list ;
37088: LD_ADDR_VAR 0 4
37092: PUSH
37093: LD_VAR 0 1
37097: ST_TO_ADDR
// end ;
37098: LD_VAR 0 4
37102: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37103: LD_INT 0
37105: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37106: LD_ADDR_VAR 0 5
37110: PUSH
37111: LD_VAR 0 1
37115: PPUSH
37116: CALL_OW 250
37120: PPUSH
37121: LD_VAR 0 1
37125: PPUSH
37126: CALL_OW 251
37130: PPUSH
37131: LD_VAR 0 2
37135: PPUSH
37136: LD_VAR 0 3
37140: PPUSH
37141: LD_VAR 0 4
37145: PPUSH
37146: CALL 37156 0 5
37150: ST_TO_ADDR
// end ;
37151: LD_VAR 0 5
37155: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37156: LD_INT 0
37158: PPUSH
37159: PPUSH
37160: PPUSH
37161: PPUSH
// if not list then
37162: LD_VAR 0 3
37166: NOT
37167: IFFALSE 37171
// exit ;
37169: GO 37559
// result := [ ] ;
37171: LD_ADDR_VAR 0 6
37175: PUSH
37176: EMPTY
37177: ST_TO_ADDR
// for i in list do
37178: LD_ADDR_VAR 0 7
37182: PUSH
37183: LD_VAR 0 3
37187: PUSH
37188: FOR_IN
37189: IFFALSE 37391
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37191: LD_ADDR_VAR 0 9
37195: PUSH
37196: LD_VAR 0 7
37200: PPUSH
37201: LD_VAR 0 1
37205: PPUSH
37206: LD_VAR 0 2
37210: PPUSH
37211: CALL_OW 297
37215: ST_TO_ADDR
// if not result then
37216: LD_VAR 0 6
37220: NOT
37221: IFFALSE 37247
// result := [ [ i , tmp ] ] else
37223: LD_ADDR_VAR 0 6
37227: PUSH
37228: LD_VAR 0 7
37232: PUSH
37233: LD_VAR 0 9
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: EMPTY
37243: LIST
37244: ST_TO_ADDR
37245: GO 37389
// begin if result [ result ] [ 2 ] < tmp then
37247: LD_VAR 0 6
37251: PUSH
37252: LD_VAR 0 6
37256: ARRAY
37257: PUSH
37258: LD_INT 2
37260: ARRAY
37261: PUSH
37262: LD_VAR 0 9
37266: LESS
37267: IFFALSE 37309
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37269: LD_ADDR_VAR 0 6
37273: PUSH
37274: LD_VAR 0 6
37278: PPUSH
37279: LD_VAR 0 6
37283: PUSH
37284: LD_INT 1
37286: PLUS
37287: PPUSH
37288: LD_VAR 0 7
37292: PUSH
37293: LD_VAR 0 9
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PPUSH
37302: CALL_OW 2
37306: ST_TO_ADDR
37307: GO 37389
// for j = 1 to result do
37309: LD_ADDR_VAR 0 8
37313: PUSH
37314: DOUBLE
37315: LD_INT 1
37317: DEC
37318: ST_TO_ADDR
37319: LD_VAR 0 6
37323: PUSH
37324: FOR_TO
37325: IFFALSE 37387
// begin if tmp < result [ j ] [ 2 ] then
37327: LD_VAR 0 9
37331: PUSH
37332: LD_VAR 0 6
37336: PUSH
37337: LD_VAR 0 8
37341: ARRAY
37342: PUSH
37343: LD_INT 2
37345: ARRAY
37346: LESS
37347: IFFALSE 37385
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37349: LD_ADDR_VAR 0 6
37353: PUSH
37354: LD_VAR 0 6
37358: PPUSH
37359: LD_VAR 0 8
37363: PPUSH
37364: LD_VAR 0 7
37368: PUSH
37369: LD_VAR 0 9
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PPUSH
37378: CALL_OW 2
37382: ST_TO_ADDR
// break ;
37383: GO 37387
// end ; end ;
37385: GO 37324
37387: POP
37388: POP
// end ; end ;
37389: GO 37188
37391: POP
37392: POP
// if result and not asc then
37393: LD_VAR 0 6
37397: PUSH
37398: LD_VAR 0 4
37402: NOT
37403: AND
37404: IFFALSE 37479
// begin tmp := result ;
37406: LD_ADDR_VAR 0 9
37410: PUSH
37411: LD_VAR 0 6
37415: ST_TO_ADDR
// for i = tmp downto 1 do
37416: LD_ADDR_VAR 0 7
37420: PUSH
37421: DOUBLE
37422: LD_VAR 0 9
37426: INC
37427: ST_TO_ADDR
37428: LD_INT 1
37430: PUSH
37431: FOR_DOWNTO
37432: IFFALSE 37477
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37434: LD_ADDR_VAR 0 6
37438: PUSH
37439: LD_VAR 0 6
37443: PPUSH
37444: LD_VAR 0 9
37448: PUSH
37449: LD_VAR 0 7
37453: MINUS
37454: PUSH
37455: LD_INT 1
37457: PLUS
37458: PPUSH
37459: LD_VAR 0 9
37463: PUSH
37464: LD_VAR 0 7
37468: ARRAY
37469: PPUSH
37470: CALL_OW 1
37474: ST_TO_ADDR
37475: GO 37431
37477: POP
37478: POP
// end ; tmp := [ ] ;
37479: LD_ADDR_VAR 0 9
37483: PUSH
37484: EMPTY
37485: ST_TO_ADDR
// if mode then
37486: LD_VAR 0 5
37490: IFFALSE 37559
// begin for i = 1 to result do
37492: LD_ADDR_VAR 0 7
37496: PUSH
37497: DOUBLE
37498: LD_INT 1
37500: DEC
37501: ST_TO_ADDR
37502: LD_VAR 0 6
37506: PUSH
37507: FOR_TO
37508: IFFALSE 37547
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37510: LD_ADDR_VAR 0 9
37514: PUSH
37515: LD_VAR 0 9
37519: PPUSH
37520: LD_VAR 0 7
37524: PPUSH
37525: LD_VAR 0 6
37529: PUSH
37530: LD_VAR 0 7
37534: ARRAY
37535: PUSH
37536: LD_INT 1
37538: ARRAY
37539: PPUSH
37540: CALL_OW 1
37544: ST_TO_ADDR
37545: GO 37507
37547: POP
37548: POP
// result := tmp ;
37549: LD_ADDR_VAR 0 6
37553: PUSH
37554: LD_VAR 0 9
37558: ST_TO_ADDR
// end ; end ;
37559: LD_VAR 0 6
37563: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37564: LD_INT 0
37566: PPUSH
37567: PPUSH
37568: PPUSH
37569: PPUSH
37570: PPUSH
37571: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37572: LD_ADDR_VAR 0 5
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: EMPTY
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: ST_TO_ADDR
// if not x or not y then
37594: LD_VAR 0 2
37598: NOT
37599: PUSH
37600: LD_VAR 0 3
37604: NOT
37605: OR
37606: IFFALSE 37610
// exit ;
37608: GO 39262
// if not range then
37610: LD_VAR 0 4
37614: NOT
37615: IFFALSE 37625
// range := 10 ;
37617: LD_ADDR_VAR 0 4
37621: PUSH
37622: LD_INT 10
37624: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37625: LD_ADDR_VAR 0 8
37629: PUSH
37630: LD_INT 81
37632: PUSH
37633: LD_VAR 0 1
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 92
37644: PUSH
37645: LD_VAR 0 2
37649: PUSH
37650: LD_VAR 0 3
37654: PUSH
37655: LD_VAR 0 4
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 3
37668: PUSH
37669: LD_INT 21
37671: PUSH
37672: LD_INT 3
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: PPUSH
37688: CALL_OW 69
37692: ST_TO_ADDR
// if not tmp then
37693: LD_VAR 0 8
37697: NOT
37698: IFFALSE 37702
// exit ;
37700: GO 39262
// for i in tmp do
37702: LD_ADDR_VAR 0 6
37706: PUSH
37707: LD_VAR 0 8
37711: PUSH
37712: FOR_IN
37713: IFFALSE 39237
// begin points := [ 0 , 0 , 0 ] ;
37715: LD_ADDR_VAR 0 9
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: LD_INT 0
37725: PUSH
37726: LD_INT 0
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: LIST
37733: ST_TO_ADDR
// bpoints := 1 ;
37734: LD_ADDR_VAR 0 10
37738: PUSH
37739: LD_INT 1
37741: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37742: LD_VAR 0 6
37746: PPUSH
37747: CALL_OW 247
37751: PUSH
37752: LD_INT 1
37754: DOUBLE
37755: EQUAL
37756: IFTRUE 37760
37758: GO 38338
37760: POP
// begin if GetClass ( i ) = 1 then
37761: LD_VAR 0 6
37765: PPUSH
37766: CALL_OW 257
37770: PUSH
37771: LD_INT 1
37773: EQUAL
37774: IFFALSE 37795
// points := [ 10 , 5 , 3 ] ;
37776: LD_ADDR_VAR 0 9
37780: PUSH
37781: LD_INT 10
37783: PUSH
37784: LD_INT 5
37786: PUSH
37787: LD_INT 3
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: LIST
37794: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37795: LD_VAR 0 6
37799: PPUSH
37800: CALL_OW 257
37804: PUSH
37805: LD_INT 2
37807: PUSH
37808: LD_INT 3
37810: PUSH
37811: LD_INT 4
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: LIST
37818: IN
37819: IFFALSE 37840
// points := [ 3 , 2 , 1 ] ;
37821: LD_ADDR_VAR 0 9
37825: PUSH
37826: LD_INT 3
37828: PUSH
37829: LD_INT 2
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: LIST
37839: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37840: LD_VAR 0 6
37844: PPUSH
37845: CALL_OW 257
37849: PUSH
37850: LD_INT 5
37852: EQUAL
37853: IFFALSE 37874
// points := [ 130 , 5 , 2 ] ;
37855: LD_ADDR_VAR 0 9
37859: PUSH
37860: LD_INT 130
37862: PUSH
37863: LD_INT 5
37865: PUSH
37866: LD_INT 2
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: LIST
37873: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37874: LD_VAR 0 6
37878: PPUSH
37879: CALL_OW 257
37883: PUSH
37884: LD_INT 8
37886: EQUAL
37887: IFFALSE 37908
// points := [ 35 , 35 , 30 ] ;
37889: LD_ADDR_VAR 0 9
37893: PUSH
37894: LD_INT 35
37896: PUSH
37897: LD_INT 35
37899: PUSH
37900: LD_INT 30
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: LIST
37907: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37908: LD_VAR 0 6
37912: PPUSH
37913: CALL_OW 257
37917: PUSH
37918: LD_INT 9
37920: EQUAL
37921: IFFALSE 37942
// points := [ 20 , 55 , 40 ] ;
37923: LD_ADDR_VAR 0 9
37927: PUSH
37928: LD_INT 20
37930: PUSH
37931: LD_INT 55
37933: PUSH
37934: LD_INT 40
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: LIST
37941: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37942: LD_VAR 0 6
37946: PPUSH
37947: CALL_OW 257
37951: PUSH
37952: LD_INT 12
37954: PUSH
37955: LD_INT 16
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: IN
37962: IFFALSE 37983
// points := [ 5 , 3 , 2 ] ;
37964: LD_ADDR_VAR 0 9
37968: PUSH
37969: LD_INT 5
37971: PUSH
37972: LD_INT 3
37974: PUSH
37975: LD_INT 2
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: LIST
37982: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37983: LD_VAR 0 6
37987: PPUSH
37988: CALL_OW 257
37992: PUSH
37993: LD_INT 17
37995: EQUAL
37996: IFFALSE 38017
// points := [ 100 , 50 , 75 ] ;
37998: LD_ADDR_VAR 0 9
38002: PUSH
38003: LD_INT 100
38005: PUSH
38006: LD_INT 50
38008: PUSH
38009: LD_INT 75
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: LIST
38016: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38017: LD_VAR 0 6
38021: PPUSH
38022: CALL_OW 257
38026: PUSH
38027: LD_INT 15
38029: EQUAL
38030: IFFALSE 38051
// points := [ 10 , 5 , 3 ] ;
38032: LD_ADDR_VAR 0 9
38036: PUSH
38037: LD_INT 10
38039: PUSH
38040: LD_INT 5
38042: PUSH
38043: LD_INT 3
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: LIST
38050: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38051: LD_VAR 0 6
38055: PPUSH
38056: CALL_OW 257
38060: PUSH
38061: LD_INT 14
38063: EQUAL
38064: IFFALSE 38085
// points := [ 10 , 0 , 0 ] ;
38066: LD_ADDR_VAR 0 9
38070: PUSH
38071: LD_INT 10
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: LD_INT 0
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: LIST
38084: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38085: LD_VAR 0 6
38089: PPUSH
38090: CALL_OW 257
38094: PUSH
38095: LD_INT 11
38097: EQUAL
38098: IFFALSE 38119
// points := [ 30 , 10 , 5 ] ;
38100: LD_ADDR_VAR 0 9
38104: PUSH
38105: LD_INT 30
38107: PUSH
38108: LD_INT 10
38110: PUSH
38111: LD_INT 5
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: LIST
38118: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38119: LD_VAR 0 1
38123: PPUSH
38124: LD_INT 5
38126: PPUSH
38127: CALL_OW 321
38131: PUSH
38132: LD_INT 2
38134: EQUAL
38135: IFFALSE 38152
// bpoints := bpoints * 1.8 ;
38137: LD_ADDR_VAR 0 10
38141: PUSH
38142: LD_VAR 0 10
38146: PUSH
38147: LD_REAL  1.80000000000000E+0000
38150: MUL
38151: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38152: LD_VAR 0 6
38156: PPUSH
38157: CALL_OW 257
38161: PUSH
38162: LD_INT 1
38164: PUSH
38165: LD_INT 2
38167: PUSH
38168: LD_INT 3
38170: PUSH
38171: LD_INT 4
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: IN
38180: PUSH
38181: LD_VAR 0 1
38185: PPUSH
38186: LD_INT 51
38188: PPUSH
38189: CALL_OW 321
38193: PUSH
38194: LD_INT 2
38196: EQUAL
38197: AND
38198: IFFALSE 38215
// bpoints := bpoints * 1.2 ;
38200: LD_ADDR_VAR 0 10
38204: PUSH
38205: LD_VAR 0 10
38209: PUSH
38210: LD_REAL  1.20000000000000E+0000
38213: MUL
38214: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38215: LD_VAR 0 6
38219: PPUSH
38220: CALL_OW 257
38224: PUSH
38225: LD_INT 5
38227: PUSH
38228: LD_INT 7
38230: PUSH
38231: LD_INT 9
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: LIST
38238: IN
38239: PUSH
38240: LD_VAR 0 1
38244: PPUSH
38245: LD_INT 52
38247: PPUSH
38248: CALL_OW 321
38252: PUSH
38253: LD_INT 2
38255: EQUAL
38256: AND
38257: IFFALSE 38274
// bpoints := bpoints * 1.5 ;
38259: LD_ADDR_VAR 0 10
38263: PUSH
38264: LD_VAR 0 10
38268: PUSH
38269: LD_REAL  1.50000000000000E+0000
38272: MUL
38273: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38274: LD_VAR 0 1
38278: PPUSH
38279: LD_INT 66
38281: PPUSH
38282: CALL_OW 321
38286: PUSH
38287: LD_INT 2
38289: EQUAL
38290: IFFALSE 38307
// bpoints := bpoints * 1.1 ;
38292: LD_ADDR_VAR 0 10
38296: PUSH
38297: LD_VAR 0 10
38301: PUSH
38302: LD_REAL  1.10000000000000E+0000
38305: MUL
38306: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38307: LD_ADDR_VAR 0 10
38311: PUSH
38312: LD_VAR 0 10
38316: PUSH
38317: LD_VAR 0 6
38321: PPUSH
38322: LD_INT 1
38324: PPUSH
38325: CALL_OW 259
38329: PUSH
38330: LD_REAL  1.15000000000000E+0000
38333: MUL
38334: MUL
38335: ST_TO_ADDR
// end ; unit_vehicle :
38336: GO 39166
38338: LD_INT 2
38340: DOUBLE
38341: EQUAL
38342: IFTRUE 38346
38344: GO 39154
38346: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38347: LD_VAR 0 6
38351: PPUSH
38352: CALL_OW 264
38356: PUSH
38357: LD_INT 2
38359: PUSH
38360: LD_INT 42
38362: PUSH
38363: LD_INT 24
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: LIST
38370: IN
38371: IFFALSE 38392
// points := [ 25 , 5 , 3 ] ;
38373: LD_ADDR_VAR 0 9
38377: PUSH
38378: LD_INT 25
38380: PUSH
38381: LD_INT 5
38383: PUSH
38384: LD_INT 3
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: LIST
38391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38392: LD_VAR 0 6
38396: PPUSH
38397: CALL_OW 264
38401: PUSH
38402: LD_INT 4
38404: PUSH
38405: LD_INT 43
38407: PUSH
38408: LD_INT 25
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: LIST
38415: IN
38416: IFFALSE 38437
// points := [ 40 , 15 , 5 ] ;
38418: LD_ADDR_VAR 0 9
38422: PUSH
38423: LD_INT 40
38425: PUSH
38426: LD_INT 15
38428: PUSH
38429: LD_INT 5
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: LIST
38436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38437: LD_VAR 0 6
38441: PPUSH
38442: CALL_OW 264
38446: PUSH
38447: LD_INT 3
38449: PUSH
38450: LD_INT 23
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: IN
38457: IFFALSE 38478
// points := [ 7 , 25 , 8 ] ;
38459: LD_ADDR_VAR 0 9
38463: PUSH
38464: LD_INT 7
38466: PUSH
38467: LD_INT 25
38469: PUSH
38470: LD_INT 8
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: LIST
38477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38478: LD_VAR 0 6
38482: PPUSH
38483: CALL_OW 264
38487: PUSH
38488: LD_INT 5
38490: PUSH
38491: LD_INT 27
38493: PUSH
38494: LD_INT 44
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: IN
38502: IFFALSE 38523
// points := [ 14 , 50 , 16 ] ;
38504: LD_ADDR_VAR 0 9
38508: PUSH
38509: LD_INT 14
38511: PUSH
38512: LD_INT 50
38514: PUSH
38515: LD_INT 16
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: LIST
38522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38523: LD_VAR 0 6
38527: PPUSH
38528: CALL_OW 264
38532: PUSH
38533: LD_INT 6
38535: PUSH
38536: LD_INT 46
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: IN
38543: IFFALSE 38564
// points := [ 32 , 120 , 70 ] ;
38545: LD_ADDR_VAR 0 9
38549: PUSH
38550: LD_INT 32
38552: PUSH
38553: LD_INT 120
38555: PUSH
38556: LD_INT 70
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38564: LD_VAR 0 6
38568: PPUSH
38569: CALL_OW 264
38573: PUSH
38574: LD_INT 7
38576: PUSH
38577: LD_INT 28
38579: PUSH
38580: LD_INT 45
38582: PUSH
38583: LD_EXP 49
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: IN
38594: IFFALSE 38615
// points := [ 35 , 20 , 45 ] ;
38596: LD_ADDR_VAR 0 9
38600: PUSH
38601: LD_INT 35
38603: PUSH
38604: LD_INT 20
38606: PUSH
38607: LD_INT 45
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: LIST
38614: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38615: LD_VAR 0 6
38619: PPUSH
38620: CALL_OW 264
38624: PUSH
38625: LD_INT 47
38627: PUSH
38628: EMPTY
38629: LIST
38630: IN
38631: IFFALSE 38652
// points := [ 67 , 45 , 75 ] ;
38633: LD_ADDR_VAR 0 9
38637: PUSH
38638: LD_INT 67
38640: PUSH
38641: LD_INT 45
38643: PUSH
38644: LD_INT 75
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: LIST
38651: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38652: LD_VAR 0 6
38656: PPUSH
38657: CALL_OW 264
38661: PUSH
38662: LD_INT 26
38664: PUSH
38665: EMPTY
38666: LIST
38667: IN
38668: IFFALSE 38689
// points := [ 120 , 30 , 80 ] ;
38670: LD_ADDR_VAR 0 9
38674: PUSH
38675: LD_INT 120
38677: PUSH
38678: LD_INT 30
38680: PUSH
38681: LD_INT 80
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: LIST
38688: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38689: LD_VAR 0 6
38693: PPUSH
38694: CALL_OW 264
38698: PUSH
38699: LD_INT 22
38701: PUSH
38702: EMPTY
38703: LIST
38704: IN
38705: IFFALSE 38726
// points := [ 40 , 1 , 1 ] ;
38707: LD_ADDR_VAR 0 9
38711: PUSH
38712: LD_INT 40
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: LIST
38725: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38726: LD_VAR 0 6
38730: PPUSH
38731: CALL_OW 264
38735: PUSH
38736: LD_INT 29
38738: PUSH
38739: EMPTY
38740: LIST
38741: IN
38742: IFFALSE 38763
// points := [ 70 , 200 , 400 ] ;
38744: LD_ADDR_VAR 0 9
38748: PUSH
38749: LD_INT 70
38751: PUSH
38752: LD_INT 200
38754: PUSH
38755: LD_INT 400
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: LIST
38762: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38763: LD_VAR 0 6
38767: PPUSH
38768: CALL_OW 264
38772: PUSH
38773: LD_INT 14
38775: PUSH
38776: LD_INT 53
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: IN
38783: IFFALSE 38804
// points := [ 40 , 10 , 20 ] ;
38785: LD_ADDR_VAR 0 9
38789: PUSH
38790: LD_INT 40
38792: PUSH
38793: LD_INT 10
38795: PUSH
38796: LD_INT 20
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: LIST
38803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38804: LD_VAR 0 6
38808: PPUSH
38809: CALL_OW 264
38813: PUSH
38814: LD_INT 9
38816: PUSH
38817: EMPTY
38818: LIST
38819: IN
38820: IFFALSE 38841
// points := [ 5 , 70 , 20 ] ;
38822: LD_ADDR_VAR 0 9
38826: PUSH
38827: LD_INT 5
38829: PUSH
38830: LD_INT 70
38832: PUSH
38833: LD_INT 20
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: LIST
38840: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38841: LD_VAR 0 6
38845: PPUSH
38846: CALL_OW 264
38850: PUSH
38851: LD_INT 10
38853: PUSH
38854: EMPTY
38855: LIST
38856: IN
38857: IFFALSE 38878
// points := [ 35 , 110 , 70 ] ;
38859: LD_ADDR_VAR 0 9
38863: PUSH
38864: LD_INT 35
38866: PUSH
38867: LD_INT 110
38869: PUSH
38870: LD_INT 70
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: LIST
38877: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38878: LD_VAR 0 6
38882: PPUSH
38883: CALL_OW 265
38887: PUSH
38888: LD_INT 25
38890: EQUAL
38891: IFFALSE 38912
// points := [ 80 , 65 , 100 ] ;
38893: LD_ADDR_VAR 0 9
38897: PUSH
38898: LD_INT 80
38900: PUSH
38901: LD_INT 65
38903: PUSH
38904: LD_INT 100
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: LIST
38911: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38912: LD_VAR 0 6
38916: PPUSH
38917: CALL_OW 263
38921: PUSH
38922: LD_INT 1
38924: EQUAL
38925: IFFALSE 38960
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38927: LD_ADDR_VAR 0 10
38931: PUSH
38932: LD_VAR 0 10
38936: PUSH
38937: LD_VAR 0 6
38941: PPUSH
38942: CALL_OW 311
38946: PPUSH
38947: LD_INT 3
38949: PPUSH
38950: CALL_OW 259
38954: PUSH
38955: LD_INT 4
38957: MUL
38958: MUL
38959: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38960: LD_VAR 0 6
38964: PPUSH
38965: CALL_OW 263
38969: PUSH
38970: LD_INT 2
38972: EQUAL
38973: IFFALSE 39024
// begin j := IsControledBy ( i ) ;
38975: LD_ADDR_VAR 0 7
38979: PUSH
38980: LD_VAR 0 6
38984: PPUSH
38985: CALL_OW 312
38989: ST_TO_ADDR
// if j then
38990: LD_VAR 0 7
38994: IFFALSE 39024
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38996: LD_ADDR_VAR 0 10
39000: PUSH
39001: LD_VAR 0 10
39005: PUSH
39006: LD_VAR 0 7
39010: PPUSH
39011: LD_INT 3
39013: PPUSH
39014: CALL_OW 259
39018: PUSH
39019: LD_INT 3
39021: MUL
39022: MUL
39023: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39024: LD_VAR 0 6
39028: PPUSH
39029: CALL_OW 264
39033: PUSH
39034: LD_INT 5
39036: PUSH
39037: LD_INT 6
39039: PUSH
39040: LD_INT 46
39042: PUSH
39043: LD_INT 44
39045: PUSH
39046: LD_INT 47
39048: PUSH
39049: LD_INT 45
39051: PUSH
39052: LD_INT 28
39054: PUSH
39055: LD_INT 7
39057: PUSH
39058: LD_INT 27
39060: PUSH
39061: LD_INT 29
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: IN
39076: PUSH
39077: LD_VAR 0 1
39081: PPUSH
39082: LD_INT 52
39084: PPUSH
39085: CALL_OW 321
39089: PUSH
39090: LD_INT 2
39092: EQUAL
39093: AND
39094: IFFALSE 39111
// bpoints := bpoints * 1.2 ;
39096: LD_ADDR_VAR 0 10
39100: PUSH
39101: LD_VAR 0 10
39105: PUSH
39106: LD_REAL  1.20000000000000E+0000
39109: MUL
39110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39111: LD_VAR 0 6
39115: PPUSH
39116: CALL_OW 264
39120: PUSH
39121: LD_INT 6
39123: PUSH
39124: LD_INT 46
39126: PUSH
39127: LD_INT 47
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: LIST
39134: IN
39135: IFFALSE 39152
// bpoints := bpoints * 1.2 ;
39137: LD_ADDR_VAR 0 10
39141: PUSH
39142: LD_VAR 0 10
39146: PUSH
39147: LD_REAL  1.20000000000000E+0000
39150: MUL
39151: ST_TO_ADDR
// end ; unit_building :
39152: GO 39166
39154: LD_INT 3
39156: DOUBLE
39157: EQUAL
39158: IFTRUE 39162
39160: GO 39165
39162: POP
// ; end ;
39163: GO 39166
39165: POP
// for j = 1 to 3 do
39166: LD_ADDR_VAR 0 7
39170: PUSH
39171: DOUBLE
39172: LD_INT 1
39174: DEC
39175: ST_TO_ADDR
39176: LD_INT 3
39178: PUSH
39179: FOR_TO
39180: IFFALSE 39233
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39182: LD_ADDR_VAR 0 5
39186: PUSH
39187: LD_VAR 0 5
39191: PPUSH
39192: LD_VAR 0 7
39196: PPUSH
39197: LD_VAR 0 5
39201: PUSH
39202: LD_VAR 0 7
39206: ARRAY
39207: PUSH
39208: LD_VAR 0 9
39212: PUSH
39213: LD_VAR 0 7
39217: ARRAY
39218: PUSH
39219: LD_VAR 0 10
39223: MUL
39224: PLUS
39225: PPUSH
39226: CALL_OW 1
39230: ST_TO_ADDR
39231: GO 39179
39233: POP
39234: POP
// end ;
39235: GO 37712
39237: POP
39238: POP
// result := Replace ( result , 4 , tmp ) ;
39239: LD_ADDR_VAR 0 5
39243: PUSH
39244: LD_VAR 0 5
39248: PPUSH
39249: LD_INT 4
39251: PPUSH
39252: LD_VAR 0 8
39256: PPUSH
39257: CALL_OW 1
39261: ST_TO_ADDR
// end ;
39262: LD_VAR 0 5
39266: RET
// export function DangerAtRange ( unit , range ) ; begin
39267: LD_INT 0
39269: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39270: LD_ADDR_VAR 0 3
39274: PUSH
39275: LD_VAR 0 1
39279: PPUSH
39280: CALL_OW 255
39284: PPUSH
39285: LD_VAR 0 1
39289: PPUSH
39290: CALL_OW 250
39294: PPUSH
39295: LD_VAR 0 1
39299: PPUSH
39300: CALL_OW 251
39304: PPUSH
39305: LD_VAR 0 2
39309: PPUSH
39310: CALL 37564 0 4
39314: ST_TO_ADDR
// end ;
39315: LD_VAR 0 3
39319: RET
// export function DangerInArea ( side , area ) ; begin
39320: LD_INT 0
39322: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39323: LD_ADDR_VAR 0 3
39327: PUSH
39328: LD_VAR 0 2
39332: PPUSH
39333: LD_INT 81
39335: PUSH
39336: LD_VAR 0 1
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PPUSH
39345: CALL_OW 70
39349: ST_TO_ADDR
// end ;
39350: LD_VAR 0 3
39354: RET
// export function IsExtension ( b ) ; begin
39355: LD_INT 0
39357: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39358: LD_ADDR_VAR 0 2
39362: PUSH
39363: LD_VAR 0 1
39367: PUSH
39368: LD_INT 23
39370: PUSH
39371: LD_INT 20
39373: PUSH
39374: LD_INT 22
39376: PUSH
39377: LD_INT 17
39379: PUSH
39380: LD_INT 24
39382: PUSH
39383: LD_INT 21
39385: PUSH
39386: LD_INT 19
39388: PUSH
39389: LD_INT 16
39391: PUSH
39392: LD_INT 25
39394: PUSH
39395: LD_INT 18
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: IN
39410: ST_TO_ADDR
// end ;
39411: LD_VAR 0 2
39415: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39416: LD_INT 0
39418: PPUSH
39419: PPUSH
39420: PPUSH
// result := [ ] ;
39421: LD_ADDR_VAR 0 4
39425: PUSH
39426: EMPTY
39427: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39428: LD_ADDR_VAR 0 5
39432: PUSH
39433: LD_VAR 0 2
39437: PPUSH
39438: LD_INT 21
39440: PUSH
39441: LD_INT 3
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PPUSH
39448: CALL_OW 70
39452: ST_TO_ADDR
// if not tmp then
39453: LD_VAR 0 5
39457: NOT
39458: IFFALSE 39462
// exit ;
39460: GO 39526
// if checkLink then
39462: LD_VAR 0 3
39466: IFFALSE 39516
// begin for i in tmp do
39468: LD_ADDR_VAR 0 6
39472: PUSH
39473: LD_VAR 0 5
39477: PUSH
39478: FOR_IN
39479: IFFALSE 39514
// if GetBase ( i ) <> base then
39481: LD_VAR 0 6
39485: PPUSH
39486: CALL_OW 274
39490: PUSH
39491: LD_VAR 0 1
39495: NONEQUAL
39496: IFFALSE 39512
// ComLinkToBase ( base , i ) ;
39498: LD_VAR 0 1
39502: PPUSH
39503: LD_VAR 0 6
39507: PPUSH
39508: CALL_OW 169
39512: GO 39478
39514: POP
39515: POP
// end ; result := tmp ;
39516: LD_ADDR_VAR 0 4
39520: PUSH
39521: LD_VAR 0 5
39525: ST_TO_ADDR
// end ;
39526: LD_VAR 0 4
39530: RET
// export function ComComplete ( units , b ) ; var i ; begin
39531: LD_INT 0
39533: PPUSH
39534: PPUSH
// if not units then
39535: LD_VAR 0 1
39539: NOT
39540: IFFALSE 39544
// exit ;
39542: GO 39634
// for i in units do
39544: LD_ADDR_VAR 0 4
39548: PUSH
39549: LD_VAR 0 1
39553: PUSH
39554: FOR_IN
39555: IFFALSE 39632
// if BuildingStatus ( b ) = bs_build then
39557: LD_VAR 0 2
39561: PPUSH
39562: CALL_OW 461
39566: PUSH
39567: LD_INT 1
39569: EQUAL
39570: IFFALSE 39630
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39572: LD_VAR 0 4
39576: PPUSH
39577: LD_STRING h
39579: PUSH
39580: LD_VAR 0 2
39584: PPUSH
39585: CALL_OW 250
39589: PUSH
39590: LD_VAR 0 2
39594: PPUSH
39595: CALL_OW 251
39599: PUSH
39600: LD_VAR 0 2
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: PUSH
39623: EMPTY
39624: LIST
39625: PPUSH
39626: CALL_OW 446
39630: GO 39554
39632: POP
39633: POP
// end ;
39634: LD_VAR 0 3
39638: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39639: LD_INT 0
39641: PPUSH
39642: PPUSH
39643: PPUSH
39644: PPUSH
39645: PPUSH
39646: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39647: LD_VAR 0 1
39651: NOT
39652: PUSH
39653: LD_VAR 0 1
39657: PPUSH
39658: CALL_OW 263
39662: PUSH
39663: LD_INT 2
39665: NONEQUAL
39666: OR
39667: IFFALSE 39671
// exit ;
39669: GO 39987
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39671: LD_ADDR_VAR 0 6
39675: PUSH
39676: LD_INT 22
39678: PUSH
39679: LD_VAR 0 1
39683: PPUSH
39684: CALL_OW 255
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 2
39695: PUSH
39696: LD_INT 30
39698: PUSH
39699: LD_INT 36
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 34
39708: PUSH
39709: LD_INT 31
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: LIST
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PPUSH
39725: CALL_OW 69
39729: ST_TO_ADDR
// if not tmp then
39730: LD_VAR 0 6
39734: NOT
39735: IFFALSE 39739
// exit ;
39737: GO 39987
// result := [ ] ;
39739: LD_ADDR_VAR 0 2
39743: PUSH
39744: EMPTY
39745: ST_TO_ADDR
// for i in tmp do
39746: LD_ADDR_VAR 0 3
39750: PUSH
39751: LD_VAR 0 6
39755: PUSH
39756: FOR_IN
39757: IFFALSE 39828
// begin t := UnitsInside ( i ) ;
39759: LD_ADDR_VAR 0 4
39763: PUSH
39764: LD_VAR 0 3
39768: PPUSH
39769: CALL_OW 313
39773: ST_TO_ADDR
// if t then
39774: LD_VAR 0 4
39778: IFFALSE 39826
// for j in t do
39780: LD_ADDR_VAR 0 7
39784: PUSH
39785: LD_VAR 0 4
39789: PUSH
39790: FOR_IN
39791: IFFALSE 39824
// result := Replace ( result , result + 1 , j ) ;
39793: LD_ADDR_VAR 0 2
39797: PUSH
39798: LD_VAR 0 2
39802: PPUSH
39803: LD_VAR 0 2
39807: PUSH
39808: LD_INT 1
39810: PLUS
39811: PPUSH
39812: LD_VAR 0 7
39816: PPUSH
39817: CALL_OW 1
39821: ST_TO_ADDR
39822: GO 39790
39824: POP
39825: POP
// end ;
39826: GO 39756
39828: POP
39829: POP
// if not result then
39830: LD_VAR 0 2
39834: NOT
39835: IFFALSE 39839
// exit ;
39837: GO 39987
// mech := result [ 1 ] ;
39839: LD_ADDR_VAR 0 5
39843: PUSH
39844: LD_VAR 0 2
39848: PUSH
39849: LD_INT 1
39851: ARRAY
39852: ST_TO_ADDR
// if result > 1 then
39853: LD_VAR 0 2
39857: PUSH
39858: LD_INT 1
39860: GREATER
39861: IFFALSE 39973
// begin for i = 2 to result do
39863: LD_ADDR_VAR 0 3
39867: PUSH
39868: DOUBLE
39869: LD_INT 2
39871: DEC
39872: ST_TO_ADDR
39873: LD_VAR 0 2
39877: PUSH
39878: FOR_TO
39879: IFFALSE 39971
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39881: LD_ADDR_VAR 0 4
39885: PUSH
39886: LD_VAR 0 2
39890: PUSH
39891: LD_VAR 0 3
39895: ARRAY
39896: PPUSH
39897: LD_INT 3
39899: PPUSH
39900: CALL_OW 259
39904: PUSH
39905: LD_VAR 0 2
39909: PUSH
39910: LD_VAR 0 3
39914: ARRAY
39915: PPUSH
39916: CALL_OW 432
39920: MINUS
39921: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39922: LD_VAR 0 4
39926: PUSH
39927: LD_VAR 0 5
39931: PPUSH
39932: LD_INT 3
39934: PPUSH
39935: CALL_OW 259
39939: PUSH
39940: LD_VAR 0 5
39944: PPUSH
39945: CALL_OW 432
39949: MINUS
39950: GREATEREQUAL
39951: IFFALSE 39969
// mech := result [ i ] ;
39953: LD_ADDR_VAR 0 5
39957: PUSH
39958: LD_VAR 0 2
39962: PUSH
39963: LD_VAR 0 3
39967: ARRAY
39968: ST_TO_ADDR
// end ;
39969: GO 39878
39971: POP
39972: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39973: LD_VAR 0 1
39977: PPUSH
39978: LD_VAR 0 5
39982: PPUSH
39983: CALL_OW 135
// end ;
39987: LD_VAR 0 2
39991: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39992: LD_INT 0
39994: PPUSH
39995: PPUSH
39996: PPUSH
39997: PPUSH
39998: PPUSH
39999: PPUSH
40000: PPUSH
40001: PPUSH
40002: PPUSH
40003: PPUSH
40004: PPUSH
40005: PPUSH
40006: PPUSH
// result := [ ] ;
40007: LD_ADDR_VAR 0 7
40011: PUSH
40012: EMPTY
40013: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40014: LD_VAR 0 1
40018: PPUSH
40019: CALL_OW 266
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 1
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: IN
40034: NOT
40035: IFFALSE 40039
// exit ;
40037: GO 41673
// if name then
40039: LD_VAR 0 3
40043: IFFALSE 40059
// SetBName ( base_dep , name ) ;
40045: LD_VAR 0 1
40049: PPUSH
40050: LD_VAR 0 3
40054: PPUSH
40055: CALL_OW 500
// base := GetBase ( base_dep ) ;
40059: LD_ADDR_VAR 0 15
40063: PUSH
40064: LD_VAR 0 1
40068: PPUSH
40069: CALL_OW 274
40073: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40074: LD_ADDR_VAR 0 16
40078: PUSH
40079: LD_VAR 0 1
40083: PPUSH
40084: CALL_OW 255
40088: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40089: LD_ADDR_VAR 0 17
40093: PUSH
40094: LD_VAR 0 1
40098: PPUSH
40099: CALL_OW 248
40103: ST_TO_ADDR
// if sources then
40104: LD_VAR 0 5
40108: IFFALSE 40155
// for i = 1 to 3 do
40110: LD_ADDR_VAR 0 8
40114: PUSH
40115: DOUBLE
40116: LD_INT 1
40118: DEC
40119: ST_TO_ADDR
40120: LD_INT 3
40122: PUSH
40123: FOR_TO
40124: IFFALSE 40153
// AddResourceType ( base , i , sources [ i ] ) ;
40126: LD_VAR 0 15
40130: PPUSH
40131: LD_VAR 0 8
40135: PPUSH
40136: LD_VAR 0 5
40140: PUSH
40141: LD_VAR 0 8
40145: ARRAY
40146: PPUSH
40147: CALL_OW 276
40151: GO 40123
40153: POP
40154: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40155: LD_ADDR_VAR 0 18
40159: PUSH
40160: LD_VAR 0 15
40164: PPUSH
40165: LD_VAR 0 2
40169: PPUSH
40170: LD_INT 1
40172: PPUSH
40173: CALL 39416 0 3
40177: ST_TO_ADDR
// InitHc ;
40178: CALL_OW 19
// InitUc ;
40182: CALL_OW 18
// uc_side := side ;
40186: LD_ADDR_OWVAR 20
40190: PUSH
40191: LD_VAR 0 16
40195: ST_TO_ADDR
// uc_nation := nation ;
40196: LD_ADDR_OWVAR 21
40200: PUSH
40201: LD_VAR 0 17
40205: ST_TO_ADDR
// if buildings then
40206: LD_VAR 0 18
40210: IFFALSE 41532
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40212: LD_ADDR_VAR 0 19
40216: PUSH
40217: LD_VAR 0 18
40221: PPUSH
40222: LD_INT 2
40224: PUSH
40225: LD_INT 30
40227: PUSH
40228: LD_INT 29
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 30
40237: PUSH
40238: LD_INT 30
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: LIST
40249: PPUSH
40250: CALL_OW 72
40254: ST_TO_ADDR
// if tmp then
40255: LD_VAR 0 19
40259: IFFALSE 40307
// for i in tmp do
40261: LD_ADDR_VAR 0 8
40265: PUSH
40266: LD_VAR 0 19
40270: PUSH
40271: FOR_IN
40272: IFFALSE 40305
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40274: LD_VAR 0 8
40278: PPUSH
40279: CALL_OW 250
40283: PPUSH
40284: LD_VAR 0 8
40288: PPUSH
40289: CALL_OW 251
40293: PPUSH
40294: LD_VAR 0 16
40298: PPUSH
40299: CALL_OW 441
40303: GO 40271
40305: POP
40306: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40307: LD_VAR 0 18
40311: PPUSH
40312: LD_INT 2
40314: PUSH
40315: LD_INT 30
40317: PUSH
40318: LD_INT 32
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 30
40327: PUSH
40328: LD_INT 33
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: LIST
40339: PPUSH
40340: CALL_OW 72
40344: IFFALSE 40432
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40346: LD_ADDR_VAR 0 8
40350: PUSH
40351: LD_VAR 0 18
40355: PPUSH
40356: LD_INT 2
40358: PUSH
40359: LD_INT 30
40361: PUSH
40362: LD_INT 32
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 30
40371: PUSH
40372: LD_INT 33
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: LIST
40383: PPUSH
40384: CALL_OW 72
40388: PUSH
40389: FOR_IN
40390: IFFALSE 40430
// begin if not GetBWeapon ( i ) then
40392: LD_VAR 0 8
40396: PPUSH
40397: CALL_OW 269
40401: NOT
40402: IFFALSE 40428
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40404: LD_VAR 0 8
40408: PPUSH
40409: LD_VAR 0 8
40413: PPUSH
40414: LD_VAR 0 2
40418: PPUSH
40419: CALL 41678 0 2
40423: PPUSH
40424: CALL_OW 431
// end ;
40428: GO 40389
40430: POP
40431: POP
// end ; for i = 1 to personel do
40432: LD_ADDR_VAR 0 8
40436: PUSH
40437: DOUBLE
40438: LD_INT 1
40440: DEC
40441: ST_TO_ADDR
40442: LD_VAR 0 6
40446: PUSH
40447: FOR_TO
40448: IFFALSE 41512
// begin if i > 4 then
40450: LD_VAR 0 8
40454: PUSH
40455: LD_INT 4
40457: GREATER
40458: IFFALSE 40462
// break ;
40460: GO 41512
// case i of 1 :
40462: LD_VAR 0 8
40466: PUSH
40467: LD_INT 1
40469: DOUBLE
40470: EQUAL
40471: IFTRUE 40475
40473: GO 40555
40475: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40476: LD_ADDR_VAR 0 12
40480: PUSH
40481: LD_VAR 0 18
40485: PPUSH
40486: LD_INT 22
40488: PUSH
40489: LD_VAR 0 16
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 58
40500: PUSH
40501: EMPTY
40502: LIST
40503: PUSH
40504: LD_INT 2
40506: PUSH
40507: LD_INT 30
40509: PUSH
40510: LD_INT 32
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 30
40519: PUSH
40520: LD_INT 4
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 30
40529: PUSH
40530: LD_INT 5
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: LIST
40547: PPUSH
40548: CALL_OW 72
40552: ST_TO_ADDR
40553: GO 40777
40555: LD_INT 2
40557: DOUBLE
40558: EQUAL
40559: IFTRUE 40563
40561: GO 40625
40563: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40564: LD_ADDR_VAR 0 12
40568: PUSH
40569: LD_VAR 0 18
40573: PPUSH
40574: LD_INT 22
40576: PUSH
40577: LD_VAR 0 16
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 2
40588: PUSH
40589: LD_INT 30
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 30
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: LIST
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PPUSH
40618: CALL_OW 72
40622: ST_TO_ADDR
40623: GO 40777
40625: LD_INT 3
40627: DOUBLE
40628: EQUAL
40629: IFTRUE 40633
40631: GO 40695
40633: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40634: LD_ADDR_VAR 0 12
40638: PUSH
40639: LD_VAR 0 18
40643: PPUSH
40644: LD_INT 22
40646: PUSH
40647: LD_VAR 0 16
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 2
40658: PUSH
40659: LD_INT 30
40661: PUSH
40662: LD_INT 2
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 30
40671: PUSH
40672: LD_INT 3
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: LIST
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PPUSH
40688: CALL_OW 72
40692: ST_TO_ADDR
40693: GO 40777
40695: LD_INT 4
40697: DOUBLE
40698: EQUAL
40699: IFTRUE 40703
40701: GO 40776
40703: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40704: LD_ADDR_VAR 0 12
40708: PUSH
40709: LD_VAR 0 18
40713: PPUSH
40714: LD_INT 22
40716: PUSH
40717: LD_VAR 0 16
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: LD_INT 30
40731: PUSH
40732: LD_INT 6
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 30
40741: PUSH
40742: LD_INT 7
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 30
40751: PUSH
40752: LD_INT 8
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PPUSH
40769: CALL_OW 72
40773: ST_TO_ADDR
40774: GO 40777
40776: POP
// if i = 1 then
40777: LD_VAR 0 8
40781: PUSH
40782: LD_INT 1
40784: EQUAL
40785: IFFALSE 40896
// begin tmp := [ ] ;
40787: LD_ADDR_VAR 0 19
40791: PUSH
40792: EMPTY
40793: ST_TO_ADDR
// for j in f do
40794: LD_ADDR_VAR 0 9
40798: PUSH
40799: LD_VAR 0 12
40803: PUSH
40804: FOR_IN
40805: IFFALSE 40878
// if GetBType ( j ) = b_bunker then
40807: LD_VAR 0 9
40811: PPUSH
40812: CALL_OW 266
40816: PUSH
40817: LD_INT 32
40819: EQUAL
40820: IFFALSE 40847
// tmp := Insert ( tmp , 1 , j ) else
40822: LD_ADDR_VAR 0 19
40826: PUSH
40827: LD_VAR 0 19
40831: PPUSH
40832: LD_INT 1
40834: PPUSH
40835: LD_VAR 0 9
40839: PPUSH
40840: CALL_OW 2
40844: ST_TO_ADDR
40845: GO 40876
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40847: LD_ADDR_VAR 0 19
40851: PUSH
40852: LD_VAR 0 19
40856: PPUSH
40857: LD_VAR 0 19
40861: PUSH
40862: LD_INT 1
40864: PLUS
40865: PPUSH
40866: LD_VAR 0 9
40870: PPUSH
40871: CALL_OW 2
40875: ST_TO_ADDR
40876: GO 40804
40878: POP
40879: POP
// if tmp then
40880: LD_VAR 0 19
40884: IFFALSE 40896
// f := tmp ;
40886: LD_ADDR_VAR 0 12
40890: PUSH
40891: LD_VAR 0 19
40895: ST_TO_ADDR
// end ; x := personel [ i ] ;
40896: LD_ADDR_VAR 0 13
40900: PUSH
40901: LD_VAR 0 6
40905: PUSH
40906: LD_VAR 0 8
40910: ARRAY
40911: ST_TO_ADDR
// if x = - 1 then
40912: LD_VAR 0 13
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: EQUAL
40921: IFFALSE 41130
// begin for j in f do
40923: LD_ADDR_VAR 0 9
40927: PUSH
40928: LD_VAR 0 12
40932: PUSH
40933: FOR_IN
40934: IFFALSE 41126
// repeat InitHc ;
40936: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40940: LD_VAR 0 9
40944: PPUSH
40945: CALL_OW 266
40949: PUSH
40950: LD_INT 5
40952: EQUAL
40953: IFFALSE 41023
// begin if UnitsInside ( j ) < 3 then
40955: LD_VAR 0 9
40959: PPUSH
40960: CALL_OW 313
40964: PUSH
40965: LD_INT 3
40967: LESS
40968: IFFALSE 41004
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40970: LD_INT 0
40972: PPUSH
40973: LD_INT 5
40975: PUSH
40976: LD_INT 8
40978: PUSH
40979: LD_INT 9
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: LIST
40986: PUSH
40987: LD_VAR 0 17
40991: ARRAY
40992: PPUSH
40993: LD_VAR 0 4
40997: PPUSH
40998: CALL_OW 380
41002: GO 41021
// PrepareHuman ( false , i , skill ) ;
41004: LD_INT 0
41006: PPUSH
41007: LD_VAR 0 8
41011: PPUSH
41012: LD_VAR 0 4
41016: PPUSH
41017: CALL_OW 380
// end else
41021: GO 41040
// PrepareHuman ( false , i , skill ) ;
41023: LD_INT 0
41025: PPUSH
41026: LD_VAR 0 8
41030: PPUSH
41031: LD_VAR 0 4
41035: PPUSH
41036: CALL_OW 380
// un := CreateHuman ;
41040: LD_ADDR_VAR 0 14
41044: PUSH
41045: CALL_OW 44
41049: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41050: LD_ADDR_VAR 0 7
41054: PUSH
41055: LD_VAR 0 7
41059: PPUSH
41060: LD_INT 1
41062: PPUSH
41063: LD_VAR 0 14
41067: PPUSH
41068: CALL_OW 2
41072: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41073: LD_VAR 0 14
41077: PPUSH
41078: LD_VAR 0 9
41082: PPUSH
41083: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41087: LD_VAR 0 9
41091: PPUSH
41092: CALL_OW 313
41096: PUSH
41097: LD_INT 6
41099: EQUAL
41100: PUSH
41101: LD_VAR 0 9
41105: PPUSH
41106: CALL_OW 266
41110: PUSH
41111: LD_INT 32
41113: PUSH
41114: LD_INT 31
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: IN
41121: OR
41122: IFFALSE 40936
41124: GO 40933
41126: POP
41127: POP
// end else
41128: GO 41510
// for j = 1 to x do
41130: LD_ADDR_VAR 0 9
41134: PUSH
41135: DOUBLE
41136: LD_INT 1
41138: DEC
41139: ST_TO_ADDR
41140: LD_VAR 0 13
41144: PUSH
41145: FOR_TO
41146: IFFALSE 41508
// begin InitHc ;
41148: CALL_OW 19
// if not f then
41152: LD_VAR 0 12
41156: NOT
41157: IFFALSE 41246
// begin PrepareHuman ( false , i , skill ) ;
41159: LD_INT 0
41161: PPUSH
41162: LD_VAR 0 8
41166: PPUSH
41167: LD_VAR 0 4
41171: PPUSH
41172: CALL_OW 380
// un := CreateHuman ;
41176: LD_ADDR_VAR 0 14
41180: PUSH
41181: CALL_OW 44
41185: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41186: LD_ADDR_VAR 0 7
41190: PUSH
41191: LD_VAR 0 7
41195: PPUSH
41196: LD_INT 1
41198: PPUSH
41199: LD_VAR 0 14
41203: PPUSH
41204: CALL_OW 2
41208: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41209: LD_VAR 0 14
41213: PPUSH
41214: LD_VAR 0 1
41218: PPUSH
41219: CALL_OW 250
41223: PPUSH
41224: LD_VAR 0 1
41228: PPUSH
41229: CALL_OW 251
41233: PPUSH
41234: LD_INT 10
41236: PPUSH
41237: LD_INT 0
41239: PPUSH
41240: CALL_OW 50
// continue ;
41244: GO 41145
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41246: LD_VAR 0 12
41250: PUSH
41251: LD_INT 1
41253: ARRAY
41254: PPUSH
41255: CALL_OW 313
41259: PUSH
41260: LD_VAR 0 12
41264: PUSH
41265: LD_INT 1
41267: ARRAY
41268: PPUSH
41269: CALL_OW 266
41273: PUSH
41274: LD_INT 32
41276: PUSH
41277: LD_INT 31
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: IN
41284: AND
41285: PUSH
41286: LD_VAR 0 12
41290: PUSH
41291: LD_INT 1
41293: ARRAY
41294: PPUSH
41295: CALL_OW 313
41299: PUSH
41300: LD_INT 6
41302: EQUAL
41303: OR
41304: IFFALSE 41324
// f := Delete ( f , 1 ) ;
41306: LD_ADDR_VAR 0 12
41310: PUSH
41311: LD_VAR 0 12
41315: PPUSH
41316: LD_INT 1
41318: PPUSH
41319: CALL_OW 3
41323: ST_TO_ADDR
// if not f then
41324: LD_VAR 0 12
41328: NOT
41329: IFFALSE 41347
// begin x := x + 2 ;
41331: LD_ADDR_VAR 0 13
41335: PUSH
41336: LD_VAR 0 13
41340: PUSH
41341: LD_INT 2
41343: PLUS
41344: ST_TO_ADDR
// continue ;
41345: GO 41145
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41347: LD_VAR 0 12
41351: PUSH
41352: LD_INT 1
41354: ARRAY
41355: PPUSH
41356: CALL_OW 266
41360: PUSH
41361: LD_INT 5
41363: EQUAL
41364: IFFALSE 41438
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41366: LD_VAR 0 12
41370: PUSH
41371: LD_INT 1
41373: ARRAY
41374: PPUSH
41375: CALL_OW 313
41379: PUSH
41380: LD_INT 3
41382: LESS
41383: IFFALSE 41419
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41385: LD_INT 0
41387: PPUSH
41388: LD_INT 5
41390: PUSH
41391: LD_INT 8
41393: PUSH
41394: LD_INT 9
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: LIST
41401: PUSH
41402: LD_VAR 0 17
41406: ARRAY
41407: PPUSH
41408: LD_VAR 0 4
41412: PPUSH
41413: CALL_OW 380
41417: GO 41436
// PrepareHuman ( false , i , skill ) ;
41419: LD_INT 0
41421: PPUSH
41422: LD_VAR 0 8
41426: PPUSH
41427: LD_VAR 0 4
41431: PPUSH
41432: CALL_OW 380
// end else
41436: GO 41455
// PrepareHuman ( false , i , skill ) ;
41438: LD_INT 0
41440: PPUSH
41441: LD_VAR 0 8
41445: PPUSH
41446: LD_VAR 0 4
41450: PPUSH
41451: CALL_OW 380
// un := CreateHuman ;
41455: LD_ADDR_VAR 0 14
41459: PUSH
41460: CALL_OW 44
41464: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41465: LD_ADDR_VAR 0 7
41469: PUSH
41470: LD_VAR 0 7
41474: PPUSH
41475: LD_INT 1
41477: PPUSH
41478: LD_VAR 0 14
41482: PPUSH
41483: CALL_OW 2
41487: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41488: LD_VAR 0 14
41492: PPUSH
41493: LD_VAR 0 12
41497: PUSH
41498: LD_INT 1
41500: ARRAY
41501: PPUSH
41502: CALL_OW 52
// end ;
41506: GO 41145
41508: POP
41509: POP
// end ;
41510: GO 40447
41512: POP
41513: POP
// result := result ^ buildings ;
41514: LD_ADDR_VAR 0 7
41518: PUSH
41519: LD_VAR 0 7
41523: PUSH
41524: LD_VAR 0 18
41528: ADD
41529: ST_TO_ADDR
// end else
41530: GO 41673
// begin for i = 1 to personel do
41532: LD_ADDR_VAR 0 8
41536: PUSH
41537: DOUBLE
41538: LD_INT 1
41540: DEC
41541: ST_TO_ADDR
41542: LD_VAR 0 6
41546: PUSH
41547: FOR_TO
41548: IFFALSE 41671
// begin if i > 4 then
41550: LD_VAR 0 8
41554: PUSH
41555: LD_INT 4
41557: GREATER
41558: IFFALSE 41562
// break ;
41560: GO 41671
// x := personel [ i ] ;
41562: LD_ADDR_VAR 0 13
41566: PUSH
41567: LD_VAR 0 6
41571: PUSH
41572: LD_VAR 0 8
41576: ARRAY
41577: ST_TO_ADDR
// if x = - 1 then
41578: LD_VAR 0 13
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: EQUAL
41587: IFFALSE 41591
// continue ;
41589: GO 41547
// PrepareHuman ( false , i , skill ) ;
41591: LD_INT 0
41593: PPUSH
41594: LD_VAR 0 8
41598: PPUSH
41599: LD_VAR 0 4
41603: PPUSH
41604: CALL_OW 380
// un := CreateHuman ;
41608: LD_ADDR_VAR 0 14
41612: PUSH
41613: CALL_OW 44
41617: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41618: LD_VAR 0 14
41622: PPUSH
41623: LD_VAR 0 1
41627: PPUSH
41628: CALL_OW 250
41632: PPUSH
41633: LD_VAR 0 1
41637: PPUSH
41638: CALL_OW 251
41642: PPUSH
41643: LD_INT 10
41645: PPUSH
41646: LD_INT 0
41648: PPUSH
41649: CALL_OW 50
// result := result ^ un ;
41653: LD_ADDR_VAR 0 7
41657: PUSH
41658: LD_VAR 0 7
41662: PUSH
41663: LD_VAR 0 14
41667: ADD
41668: ST_TO_ADDR
// end ;
41669: GO 41547
41671: POP
41672: POP
// end ; end ;
41673: LD_VAR 0 7
41677: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41678: LD_INT 0
41680: PPUSH
41681: PPUSH
41682: PPUSH
41683: PPUSH
41684: PPUSH
41685: PPUSH
41686: PPUSH
41687: PPUSH
41688: PPUSH
41689: PPUSH
41690: PPUSH
41691: PPUSH
41692: PPUSH
41693: PPUSH
41694: PPUSH
41695: PPUSH
// result := false ;
41696: LD_ADDR_VAR 0 3
41700: PUSH
41701: LD_INT 0
41703: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41704: LD_VAR 0 1
41708: NOT
41709: PUSH
41710: LD_VAR 0 1
41714: PPUSH
41715: CALL_OW 266
41719: PUSH
41720: LD_INT 32
41722: PUSH
41723: LD_INT 33
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: IN
41730: NOT
41731: OR
41732: IFFALSE 41736
// exit ;
41734: GO 42845
// nat := GetNation ( tower ) ;
41736: LD_ADDR_VAR 0 12
41740: PUSH
41741: LD_VAR 0 1
41745: PPUSH
41746: CALL_OW 248
41750: ST_TO_ADDR
// side := GetSide ( tower ) ;
41751: LD_ADDR_VAR 0 16
41755: PUSH
41756: LD_VAR 0 1
41760: PPUSH
41761: CALL_OW 255
41765: ST_TO_ADDR
// x := GetX ( tower ) ;
41766: LD_ADDR_VAR 0 10
41770: PUSH
41771: LD_VAR 0 1
41775: PPUSH
41776: CALL_OW 250
41780: ST_TO_ADDR
// y := GetY ( tower ) ;
41781: LD_ADDR_VAR 0 11
41785: PUSH
41786: LD_VAR 0 1
41790: PPUSH
41791: CALL_OW 251
41795: ST_TO_ADDR
// if not x or not y then
41796: LD_VAR 0 10
41800: NOT
41801: PUSH
41802: LD_VAR 0 11
41806: NOT
41807: OR
41808: IFFALSE 41812
// exit ;
41810: GO 42845
// weapon := 0 ;
41812: LD_ADDR_VAR 0 18
41816: PUSH
41817: LD_INT 0
41819: ST_TO_ADDR
// fac_list := [ ] ;
41820: LD_ADDR_VAR 0 17
41824: PUSH
41825: EMPTY
41826: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41827: LD_ADDR_VAR 0 6
41831: PUSH
41832: LD_VAR 0 1
41836: PPUSH
41837: CALL_OW 274
41841: PPUSH
41842: LD_VAR 0 2
41846: PPUSH
41847: LD_INT 0
41849: PPUSH
41850: CALL 39416 0 3
41854: PPUSH
41855: LD_INT 30
41857: PUSH
41858: LD_INT 3
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PPUSH
41865: CALL_OW 72
41869: ST_TO_ADDR
// if not factories then
41870: LD_VAR 0 6
41874: NOT
41875: IFFALSE 41879
// exit ;
41877: GO 42845
// for i in factories do
41879: LD_ADDR_VAR 0 8
41883: PUSH
41884: LD_VAR 0 6
41888: PUSH
41889: FOR_IN
41890: IFFALSE 41915
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41892: LD_ADDR_VAR 0 17
41896: PUSH
41897: LD_VAR 0 17
41901: PUSH
41902: LD_VAR 0 8
41906: PPUSH
41907: CALL_OW 478
41911: UNION
41912: ST_TO_ADDR
41913: GO 41889
41915: POP
41916: POP
// if not fac_list then
41917: LD_VAR 0 17
41921: NOT
41922: IFFALSE 41926
// exit ;
41924: GO 42845
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41926: LD_ADDR_VAR 0 5
41930: PUSH
41931: LD_INT 4
41933: PUSH
41934: LD_INT 5
41936: PUSH
41937: LD_INT 9
41939: PUSH
41940: LD_INT 10
41942: PUSH
41943: LD_INT 6
41945: PUSH
41946: LD_INT 7
41948: PUSH
41949: LD_INT 11
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 27
41963: PUSH
41964: LD_INT 28
41966: PUSH
41967: LD_INT 26
41969: PUSH
41970: LD_INT 30
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 43
41981: PUSH
41982: LD_INT 44
41984: PUSH
41985: LD_INT 46
41987: PUSH
41988: LD_INT 45
41990: PUSH
41991: LD_INT 47
41993: PUSH
41994: LD_INT 49
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: LIST
42009: PUSH
42010: LD_VAR 0 12
42014: ARRAY
42015: ST_TO_ADDR
// list := list isect fac_list ;
42016: LD_ADDR_VAR 0 5
42020: PUSH
42021: LD_VAR 0 5
42025: PUSH
42026: LD_VAR 0 17
42030: ISECT
42031: ST_TO_ADDR
// if not list then
42032: LD_VAR 0 5
42036: NOT
42037: IFFALSE 42041
// exit ;
42039: GO 42845
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42041: LD_VAR 0 12
42045: PUSH
42046: LD_INT 3
42048: EQUAL
42049: PUSH
42050: LD_INT 49
42052: PUSH
42053: LD_VAR 0 5
42057: IN
42058: AND
42059: PUSH
42060: LD_INT 31
42062: PPUSH
42063: LD_VAR 0 16
42067: PPUSH
42068: CALL_OW 321
42072: PUSH
42073: LD_INT 2
42075: EQUAL
42076: AND
42077: IFFALSE 42137
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42079: LD_INT 22
42081: PUSH
42082: LD_VAR 0 16
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 35
42093: PUSH
42094: LD_INT 49
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 91
42103: PUSH
42104: LD_VAR 0 1
42108: PUSH
42109: LD_INT 10
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: LIST
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: LIST
42121: PPUSH
42122: CALL_OW 69
42126: NOT
42127: IFFALSE 42137
// weapon := ru_time_lapser ;
42129: LD_ADDR_VAR 0 18
42133: PUSH
42134: LD_INT 49
42136: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42137: LD_VAR 0 12
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: LD_INT 2
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: IN
42152: PUSH
42153: LD_INT 11
42155: PUSH
42156: LD_VAR 0 5
42160: IN
42161: PUSH
42162: LD_INT 30
42164: PUSH
42165: LD_VAR 0 5
42169: IN
42170: OR
42171: AND
42172: PUSH
42173: LD_INT 6
42175: PPUSH
42176: LD_VAR 0 16
42180: PPUSH
42181: CALL_OW 321
42185: PUSH
42186: LD_INT 2
42188: EQUAL
42189: AND
42190: IFFALSE 42355
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42192: LD_INT 22
42194: PUSH
42195: LD_VAR 0 16
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 2
42206: PUSH
42207: LD_INT 35
42209: PUSH
42210: LD_INT 11
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 35
42219: PUSH
42220: LD_INT 30
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 91
42234: PUSH
42235: LD_VAR 0 1
42239: PUSH
42240: LD_INT 18
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: LIST
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: LIST
42252: PPUSH
42253: CALL_OW 69
42257: NOT
42258: PUSH
42259: LD_INT 22
42261: PUSH
42262: LD_VAR 0 16
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: LD_INT 30
42276: PUSH
42277: LD_INT 32
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 30
42286: PUSH
42287: LD_INT 33
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 91
42301: PUSH
42302: LD_VAR 0 1
42306: PUSH
42307: LD_INT 12
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: LIST
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: LIST
42319: PUSH
42320: EMPTY
42321: LIST
42322: PPUSH
42323: CALL_OW 69
42327: PUSH
42328: LD_INT 2
42330: GREATER
42331: AND
42332: IFFALSE 42355
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42334: LD_ADDR_VAR 0 18
42338: PUSH
42339: LD_INT 11
42341: PUSH
42342: LD_INT 30
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_VAR 0 12
42353: ARRAY
42354: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42355: LD_VAR 0 18
42359: NOT
42360: PUSH
42361: LD_INT 40
42363: PPUSH
42364: LD_VAR 0 16
42368: PPUSH
42369: CALL_OW 321
42373: PUSH
42374: LD_INT 2
42376: EQUAL
42377: AND
42378: PUSH
42379: LD_INT 7
42381: PUSH
42382: LD_VAR 0 5
42386: IN
42387: PUSH
42388: LD_INT 28
42390: PUSH
42391: LD_VAR 0 5
42395: IN
42396: OR
42397: PUSH
42398: LD_INT 45
42400: PUSH
42401: LD_VAR 0 5
42405: IN
42406: OR
42407: AND
42408: IFFALSE 42662
// begin hex := GetHexInfo ( x , y ) ;
42410: LD_ADDR_VAR 0 4
42414: PUSH
42415: LD_VAR 0 10
42419: PPUSH
42420: LD_VAR 0 11
42424: PPUSH
42425: CALL_OW 546
42429: ST_TO_ADDR
// if hex [ 1 ] then
42430: LD_VAR 0 4
42434: PUSH
42435: LD_INT 1
42437: ARRAY
42438: IFFALSE 42442
// exit ;
42440: GO 42845
// height := hex [ 2 ] ;
42442: LD_ADDR_VAR 0 15
42446: PUSH
42447: LD_VAR 0 4
42451: PUSH
42452: LD_INT 2
42454: ARRAY
42455: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42456: LD_ADDR_VAR 0 14
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: LD_INT 2
42466: PUSH
42467: LD_INT 3
42469: PUSH
42470: LD_INT 5
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: ST_TO_ADDR
// for i in tmp do
42479: LD_ADDR_VAR 0 8
42483: PUSH
42484: LD_VAR 0 14
42488: PUSH
42489: FOR_IN
42490: IFFALSE 42660
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42492: LD_ADDR_VAR 0 9
42496: PUSH
42497: LD_VAR 0 10
42501: PPUSH
42502: LD_VAR 0 8
42506: PPUSH
42507: LD_INT 5
42509: PPUSH
42510: CALL_OW 272
42514: PUSH
42515: LD_VAR 0 11
42519: PPUSH
42520: LD_VAR 0 8
42524: PPUSH
42525: LD_INT 5
42527: PPUSH
42528: CALL_OW 273
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42537: LD_VAR 0 9
42541: PUSH
42542: LD_INT 1
42544: ARRAY
42545: PPUSH
42546: LD_VAR 0 9
42550: PUSH
42551: LD_INT 2
42553: ARRAY
42554: PPUSH
42555: CALL_OW 488
42559: IFFALSE 42658
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42561: LD_ADDR_VAR 0 4
42565: PUSH
42566: LD_VAR 0 9
42570: PUSH
42571: LD_INT 1
42573: ARRAY
42574: PPUSH
42575: LD_VAR 0 9
42579: PUSH
42580: LD_INT 2
42582: ARRAY
42583: PPUSH
42584: CALL_OW 546
42588: ST_TO_ADDR
// if hex [ 1 ] then
42589: LD_VAR 0 4
42593: PUSH
42594: LD_INT 1
42596: ARRAY
42597: IFFALSE 42601
// continue ;
42599: GO 42489
// h := hex [ 2 ] ;
42601: LD_ADDR_VAR 0 13
42605: PUSH
42606: LD_VAR 0 4
42610: PUSH
42611: LD_INT 2
42613: ARRAY
42614: ST_TO_ADDR
// if h + 7 < height then
42615: LD_VAR 0 13
42619: PUSH
42620: LD_INT 7
42622: PLUS
42623: PUSH
42624: LD_VAR 0 15
42628: LESS
42629: IFFALSE 42658
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42631: LD_ADDR_VAR 0 18
42635: PUSH
42636: LD_INT 7
42638: PUSH
42639: LD_INT 28
42641: PUSH
42642: LD_INT 45
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: LIST
42649: PUSH
42650: LD_VAR 0 12
42654: ARRAY
42655: ST_TO_ADDR
// break ;
42656: GO 42660
// end ; end ; end ;
42658: GO 42489
42660: POP
42661: POP
// end ; if not weapon then
42662: LD_VAR 0 18
42666: NOT
42667: IFFALSE 42727
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42669: LD_ADDR_VAR 0 5
42673: PUSH
42674: LD_VAR 0 5
42678: PUSH
42679: LD_INT 11
42681: PUSH
42682: LD_INT 30
42684: PUSH
42685: LD_INT 49
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: LIST
42692: DIFF
42693: ST_TO_ADDR
// if not list then
42694: LD_VAR 0 5
42698: NOT
42699: IFFALSE 42703
// exit ;
42701: GO 42845
// weapon := list [ rand ( 1 , list ) ] ;
42703: LD_ADDR_VAR 0 18
42707: PUSH
42708: LD_VAR 0 5
42712: PUSH
42713: LD_INT 1
42715: PPUSH
42716: LD_VAR 0 5
42720: PPUSH
42721: CALL_OW 12
42725: ARRAY
42726: ST_TO_ADDR
// end ; if weapon then
42727: LD_VAR 0 18
42731: IFFALSE 42845
// begin tmp := CostOfWeapon ( weapon ) ;
42733: LD_ADDR_VAR 0 14
42737: PUSH
42738: LD_VAR 0 18
42742: PPUSH
42743: CALL_OW 451
42747: ST_TO_ADDR
// j := GetBase ( tower ) ;
42748: LD_ADDR_VAR 0 9
42752: PUSH
42753: LD_VAR 0 1
42757: PPUSH
42758: CALL_OW 274
42762: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42763: LD_VAR 0 9
42767: PPUSH
42768: LD_INT 1
42770: PPUSH
42771: CALL_OW 275
42775: PUSH
42776: LD_VAR 0 14
42780: PUSH
42781: LD_INT 1
42783: ARRAY
42784: GREATEREQUAL
42785: PUSH
42786: LD_VAR 0 9
42790: PPUSH
42791: LD_INT 2
42793: PPUSH
42794: CALL_OW 275
42798: PUSH
42799: LD_VAR 0 14
42803: PUSH
42804: LD_INT 2
42806: ARRAY
42807: GREATEREQUAL
42808: AND
42809: PUSH
42810: LD_VAR 0 9
42814: PPUSH
42815: LD_INT 3
42817: PPUSH
42818: CALL_OW 275
42822: PUSH
42823: LD_VAR 0 14
42827: PUSH
42828: LD_INT 3
42830: ARRAY
42831: GREATEREQUAL
42832: AND
42833: IFFALSE 42845
// result := weapon ;
42835: LD_ADDR_VAR 0 3
42839: PUSH
42840: LD_VAR 0 18
42844: ST_TO_ADDR
// end ; end ;
42845: LD_VAR 0 3
42849: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42850: LD_INT 0
42852: PPUSH
42853: PPUSH
// result := true ;
42854: LD_ADDR_VAR 0 3
42858: PUSH
42859: LD_INT 1
42861: ST_TO_ADDR
// if array1 = array2 then
42862: LD_VAR 0 1
42866: PUSH
42867: LD_VAR 0 2
42871: EQUAL
42872: IFFALSE 42932
// begin for i = 1 to array1 do
42874: LD_ADDR_VAR 0 4
42878: PUSH
42879: DOUBLE
42880: LD_INT 1
42882: DEC
42883: ST_TO_ADDR
42884: LD_VAR 0 1
42888: PUSH
42889: FOR_TO
42890: IFFALSE 42928
// if array1 [ i ] <> array2 [ i ] then
42892: LD_VAR 0 1
42896: PUSH
42897: LD_VAR 0 4
42901: ARRAY
42902: PUSH
42903: LD_VAR 0 2
42907: PUSH
42908: LD_VAR 0 4
42912: ARRAY
42913: NONEQUAL
42914: IFFALSE 42926
// begin result := false ;
42916: LD_ADDR_VAR 0 3
42920: PUSH
42921: LD_INT 0
42923: ST_TO_ADDR
// break ;
42924: GO 42928
// end ;
42926: GO 42889
42928: POP
42929: POP
// end else
42930: GO 42940
// result := false ;
42932: LD_ADDR_VAR 0 3
42936: PUSH
42937: LD_INT 0
42939: ST_TO_ADDR
// end ;
42940: LD_VAR 0 3
42944: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42945: LD_INT 0
42947: PPUSH
42948: PPUSH
// if not array1 or not array2 then
42949: LD_VAR 0 1
42953: NOT
42954: PUSH
42955: LD_VAR 0 2
42959: NOT
42960: OR
42961: IFFALSE 42965
// exit ;
42963: GO 43029
// result := true ;
42965: LD_ADDR_VAR 0 3
42969: PUSH
42970: LD_INT 1
42972: ST_TO_ADDR
// for i = 1 to array1 do
42973: LD_ADDR_VAR 0 4
42977: PUSH
42978: DOUBLE
42979: LD_INT 1
42981: DEC
42982: ST_TO_ADDR
42983: LD_VAR 0 1
42987: PUSH
42988: FOR_TO
42989: IFFALSE 43027
// if array1 [ i ] <> array2 [ i ] then
42991: LD_VAR 0 1
42995: PUSH
42996: LD_VAR 0 4
43000: ARRAY
43001: PUSH
43002: LD_VAR 0 2
43006: PUSH
43007: LD_VAR 0 4
43011: ARRAY
43012: NONEQUAL
43013: IFFALSE 43025
// begin result := false ;
43015: LD_ADDR_VAR 0 3
43019: PUSH
43020: LD_INT 0
43022: ST_TO_ADDR
// break ;
43023: GO 43027
// end ;
43025: GO 42988
43027: POP
43028: POP
// end ;
43029: LD_VAR 0 3
43033: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43034: LD_INT 0
43036: PPUSH
43037: PPUSH
43038: PPUSH
// pom := GetBase ( fac ) ;
43039: LD_ADDR_VAR 0 5
43043: PUSH
43044: LD_VAR 0 1
43048: PPUSH
43049: CALL_OW 274
43053: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43054: LD_ADDR_VAR 0 4
43058: PUSH
43059: LD_VAR 0 2
43063: PUSH
43064: LD_INT 1
43066: ARRAY
43067: PPUSH
43068: LD_VAR 0 2
43072: PUSH
43073: LD_INT 2
43075: ARRAY
43076: PPUSH
43077: LD_VAR 0 2
43081: PUSH
43082: LD_INT 3
43084: ARRAY
43085: PPUSH
43086: LD_VAR 0 2
43090: PUSH
43091: LD_INT 4
43093: ARRAY
43094: PPUSH
43095: CALL_OW 449
43099: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43100: LD_ADDR_VAR 0 3
43104: PUSH
43105: LD_VAR 0 5
43109: PPUSH
43110: LD_INT 1
43112: PPUSH
43113: CALL_OW 275
43117: PUSH
43118: LD_VAR 0 4
43122: PUSH
43123: LD_INT 1
43125: ARRAY
43126: GREATEREQUAL
43127: PUSH
43128: LD_VAR 0 5
43132: PPUSH
43133: LD_INT 2
43135: PPUSH
43136: CALL_OW 275
43140: PUSH
43141: LD_VAR 0 4
43145: PUSH
43146: LD_INT 2
43148: ARRAY
43149: GREATEREQUAL
43150: AND
43151: PUSH
43152: LD_VAR 0 5
43156: PPUSH
43157: LD_INT 3
43159: PPUSH
43160: CALL_OW 275
43164: PUSH
43165: LD_VAR 0 4
43169: PUSH
43170: LD_INT 3
43172: ARRAY
43173: GREATEREQUAL
43174: AND
43175: ST_TO_ADDR
// end ;
43176: LD_VAR 0 3
43180: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43181: LD_INT 0
43183: PPUSH
43184: PPUSH
43185: PPUSH
43186: PPUSH
// pom := GetBase ( building ) ;
43187: LD_ADDR_VAR 0 3
43191: PUSH
43192: LD_VAR 0 1
43196: PPUSH
43197: CALL_OW 274
43201: ST_TO_ADDR
// if not pom then
43202: LD_VAR 0 3
43206: NOT
43207: IFFALSE 43211
// exit ;
43209: GO 43381
// btype := GetBType ( building ) ;
43211: LD_ADDR_VAR 0 5
43215: PUSH
43216: LD_VAR 0 1
43220: PPUSH
43221: CALL_OW 266
43225: ST_TO_ADDR
// if btype = b_armoury then
43226: LD_VAR 0 5
43230: PUSH
43231: LD_INT 4
43233: EQUAL
43234: IFFALSE 43244
// btype := b_barracks ;
43236: LD_ADDR_VAR 0 5
43240: PUSH
43241: LD_INT 5
43243: ST_TO_ADDR
// if btype = b_depot then
43244: LD_VAR 0 5
43248: PUSH
43249: LD_INT 0
43251: EQUAL
43252: IFFALSE 43262
// btype := b_warehouse ;
43254: LD_ADDR_VAR 0 5
43258: PUSH
43259: LD_INT 1
43261: ST_TO_ADDR
// if btype = b_workshop then
43262: LD_VAR 0 5
43266: PUSH
43267: LD_INT 2
43269: EQUAL
43270: IFFALSE 43280
// btype := b_factory ;
43272: LD_ADDR_VAR 0 5
43276: PUSH
43277: LD_INT 3
43279: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43280: LD_ADDR_VAR 0 4
43284: PUSH
43285: LD_VAR 0 5
43289: PPUSH
43290: LD_VAR 0 1
43294: PPUSH
43295: CALL_OW 248
43299: PPUSH
43300: CALL_OW 450
43304: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43305: LD_ADDR_VAR 0 2
43309: PUSH
43310: LD_VAR 0 3
43314: PPUSH
43315: LD_INT 1
43317: PPUSH
43318: CALL_OW 275
43322: PUSH
43323: LD_VAR 0 4
43327: PUSH
43328: LD_INT 1
43330: ARRAY
43331: GREATEREQUAL
43332: PUSH
43333: LD_VAR 0 3
43337: PPUSH
43338: LD_INT 2
43340: PPUSH
43341: CALL_OW 275
43345: PUSH
43346: LD_VAR 0 4
43350: PUSH
43351: LD_INT 2
43353: ARRAY
43354: GREATEREQUAL
43355: AND
43356: PUSH
43357: LD_VAR 0 3
43361: PPUSH
43362: LD_INT 3
43364: PPUSH
43365: CALL_OW 275
43369: PUSH
43370: LD_VAR 0 4
43374: PUSH
43375: LD_INT 3
43377: ARRAY
43378: GREATEREQUAL
43379: AND
43380: ST_TO_ADDR
// end ;
43381: LD_VAR 0 2
43385: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43386: LD_INT 0
43388: PPUSH
43389: PPUSH
43390: PPUSH
// pom := GetBase ( building ) ;
43391: LD_ADDR_VAR 0 4
43395: PUSH
43396: LD_VAR 0 1
43400: PPUSH
43401: CALL_OW 274
43405: ST_TO_ADDR
// if not pom then
43406: LD_VAR 0 4
43410: NOT
43411: IFFALSE 43415
// exit ;
43413: GO 43516
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43415: LD_ADDR_VAR 0 5
43419: PUSH
43420: LD_VAR 0 2
43424: PPUSH
43425: LD_VAR 0 1
43429: PPUSH
43430: CALL_OW 248
43434: PPUSH
43435: CALL_OW 450
43439: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43440: LD_ADDR_VAR 0 3
43444: PUSH
43445: LD_VAR 0 4
43449: PPUSH
43450: LD_INT 1
43452: PPUSH
43453: CALL_OW 275
43457: PUSH
43458: LD_VAR 0 5
43462: PUSH
43463: LD_INT 1
43465: ARRAY
43466: GREATEREQUAL
43467: PUSH
43468: LD_VAR 0 4
43472: PPUSH
43473: LD_INT 2
43475: PPUSH
43476: CALL_OW 275
43480: PUSH
43481: LD_VAR 0 5
43485: PUSH
43486: LD_INT 2
43488: ARRAY
43489: GREATEREQUAL
43490: AND
43491: PUSH
43492: LD_VAR 0 4
43496: PPUSH
43497: LD_INT 3
43499: PPUSH
43500: CALL_OW 275
43504: PUSH
43505: LD_VAR 0 5
43509: PUSH
43510: LD_INT 3
43512: ARRAY
43513: GREATEREQUAL
43514: AND
43515: ST_TO_ADDR
// end ;
43516: LD_VAR 0 3
43520: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43521: LD_INT 0
43523: PPUSH
43524: PPUSH
43525: PPUSH
43526: PPUSH
43527: PPUSH
43528: PPUSH
43529: PPUSH
43530: PPUSH
43531: PPUSH
43532: PPUSH
43533: PPUSH
// result := false ;
43534: LD_ADDR_VAR 0 8
43538: PUSH
43539: LD_INT 0
43541: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43542: LD_VAR 0 5
43546: NOT
43547: PUSH
43548: LD_VAR 0 1
43552: NOT
43553: OR
43554: PUSH
43555: LD_VAR 0 2
43559: NOT
43560: OR
43561: PUSH
43562: LD_VAR 0 3
43566: NOT
43567: OR
43568: IFFALSE 43572
// exit ;
43570: GO 44386
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43572: LD_ADDR_VAR 0 14
43576: PUSH
43577: LD_VAR 0 1
43581: PPUSH
43582: LD_VAR 0 2
43586: PPUSH
43587: LD_VAR 0 3
43591: PPUSH
43592: LD_VAR 0 4
43596: PPUSH
43597: LD_VAR 0 5
43601: PUSH
43602: LD_INT 1
43604: ARRAY
43605: PPUSH
43606: CALL_OW 248
43610: PPUSH
43611: LD_INT 0
43613: PPUSH
43614: CALL 45623 0 6
43618: ST_TO_ADDR
// if not hexes then
43619: LD_VAR 0 14
43623: NOT
43624: IFFALSE 43628
// exit ;
43626: GO 44386
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43628: LD_ADDR_VAR 0 17
43632: PUSH
43633: LD_VAR 0 5
43637: PPUSH
43638: LD_INT 22
43640: PUSH
43641: LD_VAR 0 13
43645: PPUSH
43646: CALL_OW 255
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 2
43657: PUSH
43658: LD_INT 30
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 30
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: LIST
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PPUSH
43687: CALL_OW 72
43691: ST_TO_ADDR
// for i = 1 to hexes do
43692: LD_ADDR_VAR 0 9
43696: PUSH
43697: DOUBLE
43698: LD_INT 1
43700: DEC
43701: ST_TO_ADDR
43702: LD_VAR 0 14
43706: PUSH
43707: FOR_TO
43708: IFFALSE 44384
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43710: LD_ADDR_VAR 0 13
43714: PUSH
43715: LD_VAR 0 14
43719: PUSH
43720: LD_VAR 0 9
43724: ARRAY
43725: PUSH
43726: LD_INT 1
43728: ARRAY
43729: PPUSH
43730: LD_VAR 0 14
43734: PUSH
43735: LD_VAR 0 9
43739: ARRAY
43740: PUSH
43741: LD_INT 2
43743: ARRAY
43744: PPUSH
43745: CALL_OW 428
43749: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43750: LD_VAR 0 14
43754: PUSH
43755: LD_VAR 0 9
43759: ARRAY
43760: PUSH
43761: LD_INT 1
43763: ARRAY
43764: PPUSH
43765: LD_VAR 0 14
43769: PUSH
43770: LD_VAR 0 9
43774: ARRAY
43775: PUSH
43776: LD_INT 2
43778: ARRAY
43779: PPUSH
43780: CALL_OW 351
43784: PUSH
43785: LD_VAR 0 14
43789: PUSH
43790: LD_VAR 0 9
43794: ARRAY
43795: PUSH
43796: LD_INT 1
43798: ARRAY
43799: PPUSH
43800: LD_VAR 0 14
43804: PUSH
43805: LD_VAR 0 9
43809: ARRAY
43810: PUSH
43811: LD_INT 2
43813: ARRAY
43814: PPUSH
43815: CALL_OW 488
43819: NOT
43820: OR
43821: PUSH
43822: LD_VAR 0 13
43826: PPUSH
43827: CALL_OW 247
43831: PUSH
43832: LD_INT 3
43834: EQUAL
43835: OR
43836: IFFALSE 43842
// exit ;
43838: POP
43839: POP
43840: GO 44386
// if not tmp then
43842: LD_VAR 0 13
43846: NOT
43847: IFFALSE 43851
// continue ;
43849: GO 43707
// result := true ;
43851: LD_ADDR_VAR 0 8
43855: PUSH
43856: LD_INT 1
43858: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43859: LD_VAR 0 6
43863: PUSH
43864: LD_VAR 0 13
43868: PPUSH
43869: CALL_OW 247
43873: PUSH
43874: LD_INT 2
43876: EQUAL
43877: AND
43878: PUSH
43879: LD_VAR 0 13
43883: PPUSH
43884: CALL_OW 263
43888: PUSH
43889: LD_INT 1
43891: EQUAL
43892: AND
43893: IFFALSE 44057
// begin if IsDrivenBy ( tmp ) then
43895: LD_VAR 0 13
43899: PPUSH
43900: CALL_OW 311
43904: IFFALSE 43908
// continue ;
43906: GO 43707
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43908: LD_VAR 0 6
43912: PPUSH
43913: LD_INT 3
43915: PUSH
43916: LD_INT 60
43918: PUSH
43919: EMPTY
43920: LIST
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 3
43928: PUSH
43929: LD_INT 55
43931: PUSH
43932: EMPTY
43933: LIST
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PPUSH
43943: CALL_OW 72
43947: IFFALSE 44055
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43949: LD_ADDR_VAR 0 18
43953: PUSH
43954: LD_VAR 0 6
43958: PPUSH
43959: LD_INT 3
43961: PUSH
43962: LD_INT 60
43964: PUSH
43965: EMPTY
43966: LIST
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 3
43974: PUSH
43975: LD_INT 55
43977: PUSH
43978: EMPTY
43979: LIST
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PPUSH
43989: CALL_OW 72
43993: PUSH
43994: LD_INT 1
43996: ARRAY
43997: ST_TO_ADDR
// if IsInUnit ( driver ) then
43998: LD_VAR 0 18
44002: PPUSH
44003: CALL_OW 310
44007: IFFALSE 44018
// ComExit ( driver ) ;
44009: LD_VAR 0 18
44013: PPUSH
44014: CALL 68807 0 1
// AddComEnterUnit ( driver , tmp ) ;
44018: LD_VAR 0 18
44022: PPUSH
44023: LD_VAR 0 13
44027: PPUSH
44028: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44032: LD_VAR 0 18
44036: PPUSH
44037: LD_VAR 0 7
44041: PPUSH
44042: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44046: LD_VAR 0 18
44050: PPUSH
44051: CALL_OW 181
// end ; continue ;
44055: GO 43707
// end ; if not cleaners or not tmp in cleaners then
44057: LD_VAR 0 6
44061: NOT
44062: PUSH
44063: LD_VAR 0 13
44067: PUSH
44068: LD_VAR 0 6
44072: IN
44073: NOT
44074: OR
44075: IFFALSE 44382
// begin if dep then
44077: LD_VAR 0 17
44081: IFFALSE 44217
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44083: LD_ADDR_VAR 0 16
44087: PUSH
44088: LD_VAR 0 17
44092: PUSH
44093: LD_INT 1
44095: ARRAY
44096: PPUSH
44097: CALL_OW 250
44101: PPUSH
44102: LD_VAR 0 17
44106: PUSH
44107: LD_INT 1
44109: ARRAY
44110: PPUSH
44111: CALL_OW 254
44115: PPUSH
44116: LD_INT 5
44118: PPUSH
44119: CALL_OW 272
44123: PUSH
44124: LD_VAR 0 17
44128: PUSH
44129: LD_INT 1
44131: ARRAY
44132: PPUSH
44133: CALL_OW 251
44137: PPUSH
44138: LD_VAR 0 17
44142: PUSH
44143: LD_INT 1
44145: ARRAY
44146: PPUSH
44147: CALL_OW 254
44151: PPUSH
44152: LD_INT 5
44154: PPUSH
44155: CALL_OW 273
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44164: LD_VAR 0 16
44168: PUSH
44169: LD_INT 1
44171: ARRAY
44172: PPUSH
44173: LD_VAR 0 16
44177: PUSH
44178: LD_INT 2
44180: ARRAY
44181: PPUSH
44182: CALL_OW 488
44186: IFFALSE 44217
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44188: LD_VAR 0 13
44192: PPUSH
44193: LD_VAR 0 16
44197: PUSH
44198: LD_INT 1
44200: ARRAY
44201: PPUSH
44202: LD_VAR 0 16
44206: PUSH
44207: LD_INT 2
44209: ARRAY
44210: PPUSH
44211: CALL_OW 111
// continue ;
44215: GO 43707
// end ; end ; r := GetDir ( tmp ) ;
44217: LD_ADDR_VAR 0 15
44221: PUSH
44222: LD_VAR 0 13
44226: PPUSH
44227: CALL_OW 254
44231: ST_TO_ADDR
// if r = 5 then
44232: LD_VAR 0 15
44236: PUSH
44237: LD_INT 5
44239: EQUAL
44240: IFFALSE 44250
// r := 0 ;
44242: LD_ADDR_VAR 0 15
44246: PUSH
44247: LD_INT 0
44249: ST_TO_ADDR
// for j = r to 5 do
44250: LD_ADDR_VAR 0 10
44254: PUSH
44255: DOUBLE
44256: LD_VAR 0 15
44260: DEC
44261: ST_TO_ADDR
44262: LD_INT 5
44264: PUSH
44265: FOR_TO
44266: IFFALSE 44380
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44268: LD_ADDR_VAR 0 11
44272: PUSH
44273: LD_VAR 0 13
44277: PPUSH
44278: CALL_OW 250
44282: PPUSH
44283: LD_VAR 0 10
44287: PPUSH
44288: LD_INT 2
44290: PPUSH
44291: CALL_OW 272
44295: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44296: LD_ADDR_VAR 0 12
44300: PUSH
44301: LD_VAR 0 13
44305: PPUSH
44306: CALL_OW 251
44310: PPUSH
44311: LD_VAR 0 10
44315: PPUSH
44316: LD_INT 2
44318: PPUSH
44319: CALL_OW 273
44323: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44324: LD_VAR 0 11
44328: PPUSH
44329: LD_VAR 0 12
44333: PPUSH
44334: CALL_OW 488
44338: PUSH
44339: LD_VAR 0 11
44343: PPUSH
44344: LD_VAR 0 12
44348: PPUSH
44349: CALL_OW 428
44353: NOT
44354: AND
44355: IFFALSE 44378
// begin ComMoveXY ( tmp , _x , _y ) ;
44357: LD_VAR 0 13
44361: PPUSH
44362: LD_VAR 0 11
44366: PPUSH
44367: LD_VAR 0 12
44371: PPUSH
44372: CALL_OW 111
// break ;
44376: GO 44380
// end ; end ;
44378: GO 44265
44380: POP
44381: POP
// end ; end ;
44382: GO 43707
44384: POP
44385: POP
// end ;
44386: LD_VAR 0 8
44390: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44391: LD_INT 0
44393: PPUSH
// result := true ;
44394: LD_ADDR_VAR 0 3
44398: PUSH
44399: LD_INT 1
44401: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44402: LD_VAR 0 2
44406: PUSH
44407: LD_INT 24
44409: DOUBLE
44410: EQUAL
44411: IFTRUE 44421
44413: LD_INT 33
44415: DOUBLE
44416: EQUAL
44417: IFTRUE 44421
44419: GO 44446
44421: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44422: LD_ADDR_VAR 0 3
44426: PUSH
44427: LD_INT 32
44429: PPUSH
44430: LD_VAR 0 1
44434: PPUSH
44435: CALL_OW 321
44439: PUSH
44440: LD_INT 2
44442: EQUAL
44443: ST_TO_ADDR
44444: GO 44766
44446: LD_INT 20
44448: DOUBLE
44449: EQUAL
44450: IFTRUE 44454
44452: GO 44479
44454: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44455: LD_ADDR_VAR 0 3
44459: PUSH
44460: LD_INT 6
44462: PPUSH
44463: LD_VAR 0 1
44467: PPUSH
44468: CALL_OW 321
44472: PUSH
44473: LD_INT 2
44475: EQUAL
44476: ST_TO_ADDR
44477: GO 44766
44479: LD_INT 22
44481: DOUBLE
44482: EQUAL
44483: IFTRUE 44493
44485: LD_INT 36
44487: DOUBLE
44488: EQUAL
44489: IFTRUE 44493
44491: GO 44518
44493: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44494: LD_ADDR_VAR 0 3
44498: PUSH
44499: LD_INT 15
44501: PPUSH
44502: LD_VAR 0 1
44506: PPUSH
44507: CALL_OW 321
44511: PUSH
44512: LD_INT 2
44514: EQUAL
44515: ST_TO_ADDR
44516: GO 44766
44518: LD_INT 30
44520: DOUBLE
44521: EQUAL
44522: IFTRUE 44526
44524: GO 44551
44526: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44527: LD_ADDR_VAR 0 3
44531: PUSH
44532: LD_INT 20
44534: PPUSH
44535: LD_VAR 0 1
44539: PPUSH
44540: CALL_OW 321
44544: PUSH
44545: LD_INT 2
44547: EQUAL
44548: ST_TO_ADDR
44549: GO 44766
44551: LD_INT 28
44553: DOUBLE
44554: EQUAL
44555: IFTRUE 44565
44557: LD_INT 21
44559: DOUBLE
44560: EQUAL
44561: IFTRUE 44565
44563: GO 44590
44565: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44566: LD_ADDR_VAR 0 3
44570: PUSH
44571: LD_INT 21
44573: PPUSH
44574: LD_VAR 0 1
44578: PPUSH
44579: CALL_OW 321
44583: PUSH
44584: LD_INT 2
44586: EQUAL
44587: ST_TO_ADDR
44588: GO 44766
44590: LD_INT 16
44592: DOUBLE
44593: EQUAL
44594: IFTRUE 44598
44596: GO 44625
44598: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44599: LD_ADDR_VAR 0 3
44603: PUSH
44604: LD_EXP 56
44608: PPUSH
44609: LD_VAR 0 1
44613: PPUSH
44614: CALL_OW 321
44618: PUSH
44619: LD_INT 2
44621: EQUAL
44622: ST_TO_ADDR
44623: GO 44766
44625: LD_INT 19
44627: DOUBLE
44628: EQUAL
44629: IFTRUE 44639
44631: LD_INT 23
44633: DOUBLE
44634: EQUAL
44635: IFTRUE 44639
44637: GO 44666
44639: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44640: LD_ADDR_VAR 0 3
44644: PUSH
44645: LD_EXP 55
44649: PPUSH
44650: LD_VAR 0 1
44654: PPUSH
44655: CALL_OW 321
44659: PUSH
44660: LD_INT 2
44662: EQUAL
44663: ST_TO_ADDR
44664: GO 44766
44666: LD_INT 17
44668: DOUBLE
44669: EQUAL
44670: IFTRUE 44674
44672: GO 44699
44674: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44675: LD_ADDR_VAR 0 3
44679: PUSH
44680: LD_INT 39
44682: PPUSH
44683: LD_VAR 0 1
44687: PPUSH
44688: CALL_OW 321
44692: PUSH
44693: LD_INT 2
44695: EQUAL
44696: ST_TO_ADDR
44697: GO 44766
44699: LD_INT 18
44701: DOUBLE
44702: EQUAL
44703: IFTRUE 44707
44705: GO 44732
44707: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44708: LD_ADDR_VAR 0 3
44712: PUSH
44713: LD_INT 40
44715: PPUSH
44716: LD_VAR 0 1
44720: PPUSH
44721: CALL_OW 321
44725: PUSH
44726: LD_INT 2
44728: EQUAL
44729: ST_TO_ADDR
44730: GO 44766
44732: LD_INT 27
44734: DOUBLE
44735: EQUAL
44736: IFTRUE 44740
44738: GO 44765
44740: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44741: LD_ADDR_VAR 0 3
44745: PUSH
44746: LD_INT 35
44748: PPUSH
44749: LD_VAR 0 1
44753: PPUSH
44754: CALL_OW 321
44758: PUSH
44759: LD_INT 2
44761: EQUAL
44762: ST_TO_ADDR
44763: GO 44766
44765: POP
// end ;
44766: LD_VAR 0 3
44770: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44771: LD_INT 0
44773: PPUSH
44774: PPUSH
44775: PPUSH
44776: PPUSH
44777: PPUSH
44778: PPUSH
44779: PPUSH
44780: PPUSH
44781: PPUSH
44782: PPUSH
44783: PPUSH
// result := false ;
44784: LD_ADDR_VAR 0 6
44788: PUSH
44789: LD_INT 0
44791: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44792: LD_VAR 0 1
44796: NOT
44797: PUSH
44798: LD_VAR 0 1
44802: PPUSH
44803: CALL_OW 266
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: IN
44818: NOT
44819: OR
44820: PUSH
44821: LD_VAR 0 2
44825: NOT
44826: OR
44827: PUSH
44828: LD_VAR 0 5
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 2
44841: PUSH
44842: LD_INT 3
44844: PUSH
44845: LD_INT 4
44847: PUSH
44848: LD_INT 5
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: IN
44859: NOT
44860: OR
44861: PUSH
44862: LD_VAR 0 3
44866: PPUSH
44867: LD_VAR 0 4
44871: PPUSH
44872: CALL_OW 488
44876: NOT
44877: OR
44878: IFFALSE 44882
// exit ;
44880: GO 45618
// side := GetSide ( depot ) ;
44882: LD_ADDR_VAR 0 9
44886: PUSH
44887: LD_VAR 0 1
44891: PPUSH
44892: CALL_OW 255
44896: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44897: LD_VAR 0 9
44901: PPUSH
44902: LD_VAR 0 2
44906: PPUSH
44907: CALL 44391 0 2
44911: NOT
44912: IFFALSE 44916
// exit ;
44914: GO 45618
// pom := GetBase ( depot ) ;
44916: LD_ADDR_VAR 0 10
44920: PUSH
44921: LD_VAR 0 1
44925: PPUSH
44926: CALL_OW 274
44930: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44931: LD_ADDR_VAR 0 11
44935: PUSH
44936: LD_VAR 0 2
44940: PPUSH
44941: LD_VAR 0 1
44945: PPUSH
44946: CALL_OW 248
44950: PPUSH
44951: CALL_OW 450
44955: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44956: LD_VAR 0 10
44960: PPUSH
44961: LD_INT 1
44963: PPUSH
44964: CALL_OW 275
44968: PUSH
44969: LD_VAR 0 11
44973: PUSH
44974: LD_INT 1
44976: ARRAY
44977: GREATEREQUAL
44978: PUSH
44979: LD_VAR 0 10
44983: PPUSH
44984: LD_INT 2
44986: PPUSH
44987: CALL_OW 275
44991: PUSH
44992: LD_VAR 0 11
44996: PUSH
44997: LD_INT 2
44999: ARRAY
45000: GREATEREQUAL
45001: AND
45002: PUSH
45003: LD_VAR 0 10
45007: PPUSH
45008: LD_INT 3
45010: PPUSH
45011: CALL_OW 275
45015: PUSH
45016: LD_VAR 0 11
45020: PUSH
45021: LD_INT 3
45023: ARRAY
45024: GREATEREQUAL
45025: AND
45026: NOT
45027: IFFALSE 45031
// exit ;
45029: GO 45618
// if GetBType ( depot ) = b_depot then
45031: LD_VAR 0 1
45035: PPUSH
45036: CALL_OW 266
45040: PUSH
45041: LD_INT 0
45043: EQUAL
45044: IFFALSE 45056
// dist := 28 else
45046: LD_ADDR_VAR 0 14
45050: PUSH
45051: LD_INT 28
45053: ST_TO_ADDR
45054: GO 45064
// dist := 36 ;
45056: LD_ADDR_VAR 0 14
45060: PUSH
45061: LD_INT 36
45063: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45064: LD_VAR 0 1
45068: PPUSH
45069: LD_VAR 0 3
45073: PPUSH
45074: LD_VAR 0 4
45078: PPUSH
45079: CALL_OW 297
45083: PUSH
45084: LD_VAR 0 14
45088: GREATER
45089: IFFALSE 45093
// exit ;
45091: GO 45618
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45093: LD_ADDR_VAR 0 12
45097: PUSH
45098: LD_VAR 0 2
45102: PPUSH
45103: LD_VAR 0 3
45107: PPUSH
45108: LD_VAR 0 4
45112: PPUSH
45113: LD_VAR 0 5
45117: PPUSH
45118: LD_VAR 0 1
45122: PPUSH
45123: CALL_OW 248
45127: PPUSH
45128: LD_INT 0
45130: PPUSH
45131: CALL 45623 0 6
45135: ST_TO_ADDR
// if not hexes then
45136: LD_VAR 0 12
45140: NOT
45141: IFFALSE 45145
// exit ;
45143: GO 45618
// hex := GetHexInfo ( x , y ) ;
45145: LD_ADDR_VAR 0 15
45149: PUSH
45150: LD_VAR 0 3
45154: PPUSH
45155: LD_VAR 0 4
45159: PPUSH
45160: CALL_OW 546
45164: ST_TO_ADDR
// if hex [ 1 ] then
45165: LD_VAR 0 15
45169: PUSH
45170: LD_INT 1
45172: ARRAY
45173: IFFALSE 45177
// exit ;
45175: GO 45618
// height := hex [ 2 ] ;
45177: LD_ADDR_VAR 0 13
45181: PUSH
45182: LD_VAR 0 15
45186: PUSH
45187: LD_INT 2
45189: ARRAY
45190: ST_TO_ADDR
// for i = 1 to hexes do
45191: LD_ADDR_VAR 0 7
45195: PUSH
45196: DOUBLE
45197: LD_INT 1
45199: DEC
45200: ST_TO_ADDR
45201: LD_VAR 0 12
45205: PUSH
45206: FOR_TO
45207: IFFALSE 45537
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45209: LD_VAR 0 12
45213: PUSH
45214: LD_VAR 0 7
45218: ARRAY
45219: PUSH
45220: LD_INT 1
45222: ARRAY
45223: PPUSH
45224: LD_VAR 0 12
45228: PUSH
45229: LD_VAR 0 7
45233: ARRAY
45234: PUSH
45235: LD_INT 2
45237: ARRAY
45238: PPUSH
45239: CALL_OW 488
45243: NOT
45244: PUSH
45245: LD_VAR 0 12
45249: PUSH
45250: LD_VAR 0 7
45254: ARRAY
45255: PUSH
45256: LD_INT 1
45258: ARRAY
45259: PPUSH
45260: LD_VAR 0 12
45264: PUSH
45265: LD_VAR 0 7
45269: ARRAY
45270: PUSH
45271: LD_INT 2
45273: ARRAY
45274: PPUSH
45275: CALL_OW 428
45279: PUSH
45280: LD_INT 0
45282: GREATER
45283: OR
45284: PUSH
45285: LD_VAR 0 12
45289: PUSH
45290: LD_VAR 0 7
45294: ARRAY
45295: PUSH
45296: LD_INT 1
45298: ARRAY
45299: PPUSH
45300: LD_VAR 0 12
45304: PUSH
45305: LD_VAR 0 7
45309: ARRAY
45310: PUSH
45311: LD_INT 2
45313: ARRAY
45314: PPUSH
45315: CALL_OW 351
45319: OR
45320: IFFALSE 45326
// exit ;
45322: POP
45323: POP
45324: GO 45618
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45326: LD_ADDR_VAR 0 8
45330: PUSH
45331: LD_VAR 0 12
45335: PUSH
45336: LD_VAR 0 7
45340: ARRAY
45341: PUSH
45342: LD_INT 1
45344: ARRAY
45345: PPUSH
45346: LD_VAR 0 12
45350: PUSH
45351: LD_VAR 0 7
45355: ARRAY
45356: PUSH
45357: LD_INT 2
45359: ARRAY
45360: PPUSH
45361: CALL_OW 546
45365: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45366: LD_VAR 0 8
45370: PUSH
45371: LD_INT 1
45373: ARRAY
45374: PUSH
45375: LD_VAR 0 8
45379: PUSH
45380: LD_INT 2
45382: ARRAY
45383: PUSH
45384: LD_VAR 0 13
45388: PUSH
45389: LD_INT 2
45391: PLUS
45392: GREATER
45393: OR
45394: PUSH
45395: LD_VAR 0 8
45399: PUSH
45400: LD_INT 2
45402: ARRAY
45403: PUSH
45404: LD_VAR 0 13
45408: PUSH
45409: LD_INT 2
45411: MINUS
45412: LESS
45413: OR
45414: PUSH
45415: LD_VAR 0 8
45419: PUSH
45420: LD_INT 3
45422: ARRAY
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: LD_INT 8
45429: PUSH
45430: LD_INT 9
45432: PUSH
45433: LD_INT 10
45435: PUSH
45436: LD_INT 11
45438: PUSH
45439: LD_INT 12
45441: PUSH
45442: LD_INT 13
45444: PUSH
45445: LD_INT 16
45447: PUSH
45448: LD_INT 17
45450: PUSH
45451: LD_INT 18
45453: PUSH
45454: LD_INT 19
45456: PUSH
45457: LD_INT 20
45459: PUSH
45460: LD_INT 21
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: IN
45478: NOT
45479: OR
45480: PUSH
45481: LD_VAR 0 8
45485: PUSH
45486: LD_INT 5
45488: ARRAY
45489: NOT
45490: OR
45491: PUSH
45492: LD_VAR 0 8
45496: PUSH
45497: LD_INT 6
45499: ARRAY
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: LD_INT 7
45509: PUSH
45510: LD_INT 9
45512: PUSH
45513: LD_INT 10
45515: PUSH
45516: LD_INT 11
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: IN
45527: NOT
45528: OR
45529: IFFALSE 45535
// exit ;
45531: POP
45532: POP
45533: GO 45618
// end ;
45535: GO 45206
45537: POP
45538: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45539: LD_VAR 0 9
45543: PPUSH
45544: LD_VAR 0 3
45548: PPUSH
45549: LD_VAR 0 4
45553: PPUSH
45554: LD_INT 20
45556: PPUSH
45557: CALL 37564 0 4
45561: PUSH
45562: LD_INT 4
45564: ARRAY
45565: IFFALSE 45569
// exit ;
45567: GO 45618
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45569: LD_VAR 0 2
45573: PUSH
45574: LD_INT 29
45576: PUSH
45577: LD_INT 30
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: IN
45584: PUSH
45585: LD_VAR 0 3
45589: PPUSH
45590: LD_VAR 0 4
45594: PPUSH
45595: LD_VAR 0 9
45599: PPUSH
45600: CALL_OW 440
45604: NOT
45605: AND
45606: IFFALSE 45610
// exit ;
45608: GO 45618
// result := true ;
45610: LD_ADDR_VAR 0 6
45614: PUSH
45615: LD_INT 1
45617: ST_TO_ADDR
// end ;
45618: LD_VAR 0 6
45622: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45623: LD_INT 0
45625: PPUSH
45626: PPUSH
45627: PPUSH
45628: PPUSH
45629: PPUSH
45630: PPUSH
45631: PPUSH
45632: PPUSH
45633: PPUSH
45634: PPUSH
45635: PPUSH
45636: PPUSH
45637: PPUSH
45638: PPUSH
45639: PPUSH
45640: PPUSH
45641: PPUSH
45642: PPUSH
45643: PPUSH
45644: PPUSH
45645: PPUSH
45646: PPUSH
45647: PPUSH
45648: PPUSH
45649: PPUSH
45650: PPUSH
45651: PPUSH
45652: PPUSH
45653: PPUSH
45654: PPUSH
45655: PPUSH
45656: PPUSH
45657: PPUSH
45658: PPUSH
45659: PPUSH
45660: PPUSH
45661: PPUSH
45662: PPUSH
45663: PPUSH
45664: PPUSH
45665: PPUSH
45666: PPUSH
45667: PPUSH
45668: PPUSH
45669: PPUSH
45670: PPUSH
45671: PPUSH
45672: PPUSH
45673: PPUSH
45674: PPUSH
45675: PPUSH
45676: PPUSH
45677: PPUSH
45678: PPUSH
45679: PPUSH
45680: PPUSH
45681: PPUSH
45682: PPUSH
// result = [ ] ;
45683: LD_ADDR_VAR 0 7
45687: PUSH
45688: EMPTY
45689: ST_TO_ADDR
// temp_list = [ ] ;
45690: LD_ADDR_VAR 0 9
45694: PUSH
45695: EMPTY
45696: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45697: LD_VAR 0 4
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: LD_INT 2
45710: PUSH
45711: LD_INT 3
45713: PUSH
45714: LD_INT 4
45716: PUSH
45717: LD_INT 5
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: IN
45728: NOT
45729: PUSH
45730: LD_VAR 0 1
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: IN
45745: PUSH
45746: LD_VAR 0 5
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: LD_INT 2
45756: PUSH
45757: LD_INT 3
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: LIST
45764: IN
45765: NOT
45766: AND
45767: OR
45768: IFFALSE 45772
// exit ;
45770: GO 64163
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45772: LD_VAR 0 1
45776: PUSH
45777: LD_INT 6
45779: PUSH
45780: LD_INT 7
45782: PUSH
45783: LD_INT 8
45785: PUSH
45786: LD_INT 13
45788: PUSH
45789: LD_INT 12
45791: PUSH
45792: LD_INT 15
45794: PUSH
45795: LD_INT 11
45797: PUSH
45798: LD_INT 14
45800: PUSH
45801: LD_INT 10
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: IN
45815: IFFALSE 45825
// btype = b_lab ;
45817: LD_ADDR_VAR 0 1
45821: PUSH
45822: LD_INT 6
45824: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45825: LD_VAR 0 6
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: LIST
45843: IN
45844: NOT
45845: PUSH
45846: LD_VAR 0 1
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: LD_INT 2
45859: PUSH
45860: LD_INT 3
45862: PUSH
45863: LD_INT 6
45865: PUSH
45866: LD_INT 36
45868: PUSH
45869: LD_INT 4
45871: PUSH
45872: LD_INT 5
45874: PUSH
45875: LD_INT 31
45877: PUSH
45878: LD_INT 32
45880: PUSH
45881: LD_INT 33
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: IN
45897: NOT
45898: PUSH
45899: LD_VAR 0 6
45903: PUSH
45904: LD_INT 1
45906: EQUAL
45907: AND
45908: OR
45909: PUSH
45910: LD_VAR 0 1
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: LD_INT 3
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: IN
45925: NOT
45926: PUSH
45927: LD_VAR 0 6
45931: PUSH
45932: LD_INT 2
45934: EQUAL
45935: AND
45936: OR
45937: IFFALSE 45947
// mode = 0 ;
45939: LD_ADDR_VAR 0 6
45943: PUSH
45944: LD_INT 0
45946: ST_TO_ADDR
// case mode of 0 :
45947: LD_VAR 0 6
45951: PUSH
45952: LD_INT 0
45954: DOUBLE
45955: EQUAL
45956: IFTRUE 45960
45958: GO 57413
45960: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45961: LD_ADDR_VAR 0 11
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: NEG
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: LD_INT 2
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: LD_INT 2
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: LD_INT 3
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: LD_INT 3
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46154: LD_ADDR_VAR 0 12
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 3
46311: NEG
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 3
46322: NEG
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46350: LD_ADDR_VAR 0 13
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: LD_INT 2
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 2
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 2
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: NEG
46474: PUSH
46475: LD_INT 1
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 2
46485: NEG
46486: PUSH
46487: LD_INT 2
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 2
46497: NEG
46498: PUSH
46499: LD_INT 3
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 3
46509: NEG
46510: PUSH
46511: LD_INT 2
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 3
46521: NEG
46522: PUSH
46523: LD_INT 3
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46549: LD_ADDR_VAR 0 14
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: LD_INT 2
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 3
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 3
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46745: LD_ADDR_VAR 0 15
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 2
46868: NEG
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 2
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 3
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 3
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46938: LD_ADDR_VAR 0 16
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: LD_INT 2
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 2
47061: NEG
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 2
47073: NEG
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 3
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 3
47095: PUSH
47096: LD_INT 3
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: LD_INT 3
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47131: LD_ADDR_VAR 0 17
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: NEG
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: LD_INT 2
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: LD_INT 2
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 2
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: PUSH
47267: LD_INT 2
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: LD_INT 2
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: LD_INT 2
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: NEG
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: NEG
47331: PUSH
47332: LD_INT 2
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47361: LD_ADDR_VAR 0 18
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: LD_INT 2
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: LD_INT 2
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 2
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 2
47496: PUSH
47497: LD_INT 2
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 2
47537: NEG
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 2
47548: NEG
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: NEG
47561: PUSH
47562: LD_INT 2
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47591: LD_ADDR_VAR 0 19
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: LD_INT 2
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: LD_INT 2
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 2
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: NEG
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 2
47778: NEG
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 2
47790: NEG
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47821: LD_ADDR_VAR 0 20
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: LD_INT 1
47928: NEG
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 2
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 2
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: LD_INT 2
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48051: LD_ADDR_VAR 0 21
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 1
48109: NEG
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: LD_INT 2
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: LD_INT 2
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: PUSH
48187: LD_INT 2
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 2
48227: NEG
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 2
48238: NEG
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 2
48250: NEG
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48281: LD_ADDR_VAR 0 22
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: LD_INT 2
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: LD_INT 1
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 2
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 2
48457: NEG
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: NEG
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 2
48480: NEG
48481: PUSH
48482: LD_INT 2
48484: NEG
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48511: LD_ADDR_VAR 0 23
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 1
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: LD_INT 1
48584: NEG
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: LD_INT 2
48596: NEG
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: LD_INT 2
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 2
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 2
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 2
48646: PUSH
48647: LD_INT 2
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: LD_INT 2
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: NEG
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: NEG
48711: PUSH
48712: LD_INT 2
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 2
48722: NEG
48723: PUSH
48724: LD_INT 3
48726: NEG
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: LD_INT 3
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: LD_INT 2
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48791: LD_ADDR_VAR 0 24
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 1
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: LD_INT 2
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: LD_INT 2
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 2
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 2
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 2
48926: PUSH
48927: LD_INT 2
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: LD_INT 2
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: LD_INT 2
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 2
48967: NEG
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 2
48978: NEG
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 2
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 3
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 3
49034: PUSH
49035: LD_INT 2
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49067: LD_ADDR_VAR 0 25
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: LD_INT 2
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: LD_INT 2
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 2
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: LD_INT 2
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 2
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: NEG
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: NEG
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 2
49266: NEG
49267: PUSH
49268: LD_INT 2
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 3
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 3
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: LD_INT 3
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: LD_INT 3
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49341: LD_ADDR_VAR 0 26
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: LD_INT 2
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: LD_INT 2
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 2
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 2
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: LD_INT 2
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: LD_INT 2
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: LD_INT 2
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 2
49517: NEG
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: NEG
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: NEG
49541: PUSH
49542: LD_INT 2
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 2
49552: PUSH
49553: LD_INT 3
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: LD_INT 3
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49617: LD_ADDR_VAR 0 27
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 1
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: LD_INT 2
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 2
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 2
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 2
49752: PUSH
49753: LD_INT 2
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: LD_INT 2
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: LD_INT 2
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 2
49793: NEG
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: NEG
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 2
49816: NEG
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: LD_INT 2
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 2
49839: NEG
49840: PUSH
49841: LD_INT 1
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 3
49850: NEG
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 3
49862: NEG
49863: PUSH
49864: LD_INT 2
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49897: LD_ADDR_VAR 0 28
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: LD_INT 2
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 2
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 2
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 2
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: PUSH
50033: LD_INT 2
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: LD_INT 2
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 2
50073: NEG
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 2
50084: NEG
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 2
50096: NEG
50097: PUSH
50098: LD_INT 2
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 2
50108: NEG
50109: PUSH
50110: LD_INT 3
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: LD_INT 3
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 3
50132: NEG
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 3
50144: NEG
50145: PUSH
50146: LD_INT 2
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50179: LD_ADDR_VAR 0 29
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: LD_INT 1
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: LD_INT 2
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 2
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: LD_INT 2
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: NEG
50358: PUSH
50359: LD_INT 2
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 2
50369: NEG
50370: PUSH
50371: LD_INT 3
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 3
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: LD_INT 3
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: LD_INT 2
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 3
50423: NEG
50424: PUSH
50425: LD_INT 2
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50458: LD_ADDR_VAR 0 30
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: LD_INT 2
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: LD_INT 2
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: LD_INT 2
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 2
50624: NEG
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: NEG
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: LD_INT 3
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: LD_INT 2
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 3
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: LD_INT 3
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 3
50701: NEG
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50736: LD_ADDR_VAR 0 31
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: LD_INT 2
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: LD_INT 1
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 2
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: LD_INT 2
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: NEG
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 2
50913: NEG
50914: PUSH
50915: LD_INT 2
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 2
50925: NEG
50926: PUSH
50927: LD_INT 3
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 2
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 3
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: LD_INT 3
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 3
50979: NEG
50980: PUSH
50981: LD_INT 2
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51014: LD_ADDR_VAR 0 32
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: NEG
51096: PUSH
51097: LD_INT 2
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 2
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: LD_INT 2
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 2
51180: NEG
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: LD_INT 3
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 2
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 3
51226: PUSH
51227: LD_INT 2
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 2
51236: PUSH
51237: LD_INT 3
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 2
51246: NEG
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 3
51257: NEG
51258: PUSH
51259: LD_INT 1
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51292: LD_ADDR_VAR 0 33
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: LD_INT 2
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 2
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 2
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: LD_INT 2
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: NEG
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 2
51458: NEG
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 2
51470: NEG
51471: PUSH
51472: LD_INT 2
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 2
51482: NEG
51483: PUSH
51484: LD_INT 3
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 3
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 3
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 3
51536: NEG
51537: PUSH
51538: LD_INT 2
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51571: LD_ADDR_VAR 0 34
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: LD_INT 2
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: LD_INT 2
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 2
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 2
51727: NEG
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 2
51738: NEG
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: LD_INT 2
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: LD_INT 3
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: LD_INT 2
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 3
51785: PUSH
51786: LD_INT 2
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: PUSH
51796: LD_INT 3
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 3
51816: NEG
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51851: LD_ADDR_VAR 0 35
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 2
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 2
51942: NEG
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51963: LD_ADDR_VAR 0 36
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: LD_INT 2
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52075: LD_ADDR_VAR 0 37
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: LD_INT 1
52095: NEG
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52187: LD_ADDR_VAR 0 38
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 2
52278: NEG
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52299: LD_ADDR_VAR 0 39
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: LD_INT 2
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 2
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52411: LD_ADDR_VAR 0 40
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52523: LD_ADDR_VAR 0 41
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 2
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 2
52647: PUSH
52648: LD_INT 2
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: LD_INT 2
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 2
52689: NEG
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 2
52701: NEG
52702: PUSH
52703: LD_INT 2
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 2
52713: NEG
52714: PUSH
52715: LD_INT 3
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 2
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 3
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 3
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 3
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 3
52766: PUSH
52767: LD_INT 3
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: LD_INT 3
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 2
52786: NEG
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 3
52797: NEG
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 3
52808: NEG
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 3
52820: NEG
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 3
52832: NEG
52833: PUSH
52834: LD_INT 3
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52873: LD_ADDR_VAR 0 42
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: LD_INT 2
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 2
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: LD_INT 2
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: LD_INT 2
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 2
53063: NEG
53064: PUSH
53065: LD_INT 3
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: LD_INT 3
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: LD_INT 3
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: LD_INT 2
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 3
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 3
53119: PUSH
53120: LD_INT 3
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: LD_INT 3
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: LD_INT 3
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 3
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 3
53170: NEG
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 3
53182: NEG
53183: PUSH
53184: LD_INT 3
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53223: LD_ADDR_VAR 0 43
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: LD_INT 2
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: LD_INT 2
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 2
53400: NEG
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: LD_INT 3
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: LD_INT 3
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: LD_INT 2
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 2
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 3
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 3
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: LD_INT 3
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 3
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: LD_INT 2
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 3
53519: NEG
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 3
53530: NEG
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53571: LD_ADDR_VAR 0 44
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 2
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 2
53685: PUSH
53686: LD_INT 1
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: LD_INT 2
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: LD_INT 2
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 2
53726: NEG
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 2
53737: NEG
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 2
53749: NEG
53750: PUSH
53751: LD_INT 2
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 2
53761: NEG
53762: PUSH
53763: LD_INT 3
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 3
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 3
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 3
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 3
53814: PUSH
53815: LD_INT 3
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 2
53824: PUSH
53825: LD_INT 3
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 3
53856: NEG
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 3
53868: NEG
53869: PUSH
53870: LD_INT 2
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 3
53880: NEG
53881: PUSH
53882: LD_INT 3
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53921: LD_ADDR_VAR 0 45
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 1
53990: NEG
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: LD_INT 2
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 2
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 2
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 2
54087: NEG
54088: PUSH
54089: LD_INT 1
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 2
54099: NEG
54100: PUSH
54101: LD_INT 2
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: LD_INT 3
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: LD_INT 3
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: LD_INT 3
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: LD_INT 2
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 3
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 3
54167: PUSH
54168: LD_INT 3
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 2
54177: PUSH
54178: LD_INT 3
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: LD_INT 3
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 3
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 3
54218: NEG
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 3
54230: NEG
54231: PUSH
54232: LD_INT 3
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54271: LD_ADDR_VAR 0 46
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: LD_INT 2
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: LD_INT 2
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 2
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: LD_INT 2
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: LD_INT 2
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 2
54448: NEG
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: LD_INT 3
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: LD_INT 3
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: LD_INT 2
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 2
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 3
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 3
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: LD_INT 3
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: LD_INT 3
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 2
54556: NEG
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 3
54567: NEG
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 3
54578: NEG
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54619: LD_ADDR_VAR 0 47
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: LD_INT 2
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 2
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 2
54734: NEG
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 2
54746: NEG
54747: PUSH
54748: LD_INT 2
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54770: LD_ADDR_VAR 0 48
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 2
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 2
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 2
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54917: LD_ADDR_VAR 0 49
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 2
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: PUSH
55030: LD_INT 2
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55061: LD_ADDR_VAR 0 50
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: NEG
55131: PUSH
55132: LD_INT 1
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 2
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 2
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55205: LD_ADDR_VAR 0 51
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: LD_INT 1
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: NEG
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55352: LD_ADDR_VAR 0 52
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: LD_INT 2
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 2
55479: NEG
55480: PUSH
55481: LD_INT 2
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55503: LD_ADDR_VAR 0 53
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: LD_INT 2
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 2
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 2
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 2
55679: NEG
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 2
55702: NEG
55703: PUSH
55704: LD_INT 2
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55733: LD_ADDR_VAR 0 54
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: LD_INT 2
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: LD_INT 2
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 2
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 2
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 2
55868: PUSH
55869: LD_INT 2
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: LD_INT 2
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 2
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 2
55909: NEG
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 2
55920: NEG
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 2
55932: NEG
55933: PUSH
55934: LD_INT 2
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55963: LD_ADDR_VAR 0 55
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: LD_INT 1
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: LD_INT 2
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 2
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 2
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 2
56098: PUSH
56099: LD_INT 2
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: LD_INT 2
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 2
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: NEG
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 2
56150: NEG
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 2
56162: NEG
56163: PUSH
56164: LD_INT 2
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56193: LD_ADDR_VAR 0 56
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: LD_INT 2
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 2
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: LD_INT 1
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 2
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: LD_INT 2
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: LD_INT 2
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: LD_INT 2
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 2
56369: NEG
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 2
56380: NEG
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 2
56392: NEG
56393: PUSH
56394: LD_INT 2
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56423: LD_ADDR_VAR 0 57
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: LD_INT 2
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 2
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: LD_INT 1
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 2
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 2
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 2
56558: PUSH
56559: LD_INT 2
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: LD_INT 2
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: LD_INT 2
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: LD_INT 1
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 2
56599: NEG
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 2
56610: NEG
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 2
56622: NEG
56623: PUSH
56624: LD_INT 2
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56653: LD_ADDR_VAR 0 58
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 1
56711: NEG
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: LD_INT 2
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: LD_INT 2
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: LD_INT 1
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 2
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 2
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 2
56829: NEG
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 2
56840: NEG
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: LD_INT 2
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56883: LD_ADDR_VAR 0 59
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 1
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56971: LD_ADDR_VAR 0 60
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57059: LD_ADDR_VAR 0 61
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57147: LD_ADDR_VAR 0 62
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 1
57205: NEG
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57235: LD_ADDR_VAR 0 63
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: LD_INT 1
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57323: LD_ADDR_VAR 0 64
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: ST_TO_ADDR
// end ; 1 :
57411: GO 63308
57413: LD_INT 1
57415: DOUBLE
57416: EQUAL
57417: IFTRUE 57421
57419: GO 60044
57421: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57422: LD_ADDR_VAR 0 11
57426: PUSH
57427: LD_INT 1
57429: NEG
57430: PUSH
57431: LD_INT 3
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 0
57441: PUSH
57442: LD_INT 3
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: LIST
57465: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57466: LD_ADDR_VAR 0 12
57470: PUSH
57471: LD_INT 2
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 3
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 3
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: LIST
57506: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57507: LD_ADDR_VAR 0 13
57511: PUSH
57512: LD_INT 3
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 3
57524: PUSH
57525: LD_INT 3
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 2
57534: PUSH
57535: LD_INT 3
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: LIST
57546: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57547: LD_ADDR_VAR 0 14
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: LD_INT 3
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 3
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 2
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57588: LD_ADDR_VAR 0 15
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 3
57606: NEG
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 3
57617: NEG
57618: PUSH
57619: LD_INT 1
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: LIST
57631: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57632: LD_ADDR_VAR 0 16
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: LD_INT 3
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 3
57651: NEG
57652: PUSH
57653: LD_INT 2
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 3
57663: NEG
57664: PUSH
57665: LD_INT 3
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: LIST
57677: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57678: LD_ADDR_VAR 0 17
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: LD_INT 3
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: LD_INT 3
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: LD_INT 2
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: LIST
57721: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57722: LD_ADDR_VAR 0 18
57726: PUSH
57727: LD_INT 2
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 3
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 3
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: LIST
57762: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57763: LD_ADDR_VAR 0 19
57767: PUSH
57768: LD_INT 3
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 3
57780: PUSH
57781: LD_INT 3
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: LD_INT 3
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: LIST
57802: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57803: LD_ADDR_VAR 0 20
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: LD_INT 3
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: LD_INT 3
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: LD_INT 2
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: LIST
57843: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57844: LD_ADDR_VAR 0 21
57848: PUSH
57849: LD_INT 2
57851: NEG
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 3
57862: NEG
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 3
57873: NEG
57874: PUSH
57875: LD_INT 1
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: LIST
57887: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57888: LD_ADDR_VAR 0 22
57892: PUSH
57893: LD_INT 2
57895: NEG
57896: PUSH
57897: LD_INT 3
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 3
57907: NEG
57908: PUSH
57909: LD_INT 2
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 3
57919: NEG
57920: PUSH
57921: LD_INT 3
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: LIST
57933: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57934: LD_ADDR_VAR 0 23
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: LD_INT 3
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: LD_INT 4
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: LD_INT 3
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: LIST
57977: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57978: LD_ADDR_VAR 0 24
57982: PUSH
57983: LD_INT 3
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 3
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 4
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: LIST
58018: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58019: LD_ADDR_VAR 0 25
58023: PUSH
58024: LD_INT 3
58026: PUSH
58027: LD_INT 3
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 4
58036: PUSH
58037: LD_INT 3
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 3
58046: PUSH
58047: LD_INT 4
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: LIST
58058: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58059: LD_ADDR_VAR 0 26
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: LD_INT 3
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: LD_INT 4
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 1
58086: NEG
58087: PUSH
58088: LD_INT 3
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: LIST
58099: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58100: LD_ADDR_VAR 0 27
58104: PUSH
58105: LD_INT 3
58107: NEG
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 3
58118: NEG
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 4
58129: NEG
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: LIST
58143: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58144: LD_ADDR_VAR 0 28
58148: PUSH
58149: LD_INT 3
58151: NEG
58152: PUSH
58153: LD_INT 3
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 3
58163: NEG
58164: PUSH
58165: LD_INT 4
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 4
58175: NEG
58176: PUSH
58177: LD_INT 3
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: LIST
58189: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58190: LD_ADDR_VAR 0 29
58194: PUSH
58195: LD_INT 1
58197: NEG
58198: PUSH
58199: LD_INT 3
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: LD_INT 3
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: LD_INT 2
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: LD_INT 4
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: LD_INT 4
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: LD_INT 3
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: LD_INT 5
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 0
58277: PUSH
58278: LD_INT 5
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: LD_INT 4
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: LD_INT 6
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: LD_INT 6
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: LD_INT 5
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58345: LD_ADDR_VAR 0 30
58349: PUSH
58350: LD_INT 2
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 3
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 3
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 4
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 4
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 4
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 5
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 5
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 5
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 6
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 6
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58488: LD_ADDR_VAR 0 31
58492: PUSH
58493: LD_INT 3
58495: PUSH
58496: LD_INT 2
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 3
58505: PUSH
58506: LD_INT 3
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 2
58515: PUSH
58516: LD_INT 3
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 4
58525: PUSH
58526: LD_INT 3
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 4
58535: PUSH
58536: LD_INT 4
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 3
58545: PUSH
58546: LD_INT 4
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 5
58555: PUSH
58556: LD_INT 4
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 5
58565: PUSH
58566: LD_INT 5
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 4
58575: PUSH
58576: LD_INT 5
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 6
58585: PUSH
58586: LD_INT 5
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 6
58595: PUSH
58596: LD_INT 6
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 5
58605: PUSH
58606: LD_INT 6
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58627: LD_ADDR_VAR 0 32
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: LD_INT 3
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: LD_INT 3
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: LD_INT 2
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: PUSH
58666: LD_INT 4
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: LD_INT 4
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: LD_INT 3
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: LD_INT 5
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: LD_INT 5
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: LD_INT 4
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: LD_INT 6
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: LD_INT 6
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: LD_INT 5
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58770: LD_ADDR_VAR 0 33
58774: PUSH
58775: LD_INT 2
58777: NEG
58778: PUSH
58779: LD_INT 1
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 3
58788: NEG
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 3
58799: NEG
58800: PUSH
58801: LD_INT 1
58803: NEG
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 3
58811: NEG
58812: PUSH
58813: LD_INT 1
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 4
58822: NEG
58823: PUSH
58824: LD_INT 0
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 4
58833: NEG
58834: PUSH
58835: LD_INT 1
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 4
58845: NEG
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 5
58856: NEG
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 5
58867: NEG
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 5
58879: NEG
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 6
58890: NEG
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 6
58901: NEG
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58925: LD_ADDR_VAR 0 34
58929: PUSH
58930: LD_INT 2
58932: NEG
58933: PUSH
58934: LD_INT 3
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 3
58944: NEG
58945: PUSH
58946: LD_INT 2
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 3
58956: NEG
58957: PUSH
58958: LD_INT 3
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 3
58968: NEG
58969: PUSH
58970: LD_INT 4
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 4
58980: NEG
58981: PUSH
58982: LD_INT 3
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 4
58992: NEG
58993: PUSH
58994: LD_INT 4
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 4
59004: NEG
59005: PUSH
59006: LD_INT 5
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 5
59016: NEG
59017: PUSH
59018: LD_INT 4
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 5
59028: NEG
59029: PUSH
59030: LD_INT 5
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 5
59040: NEG
59041: PUSH
59042: LD_INT 6
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 6
59052: NEG
59053: PUSH
59054: LD_INT 5
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 6
59064: NEG
59065: PUSH
59066: LD_INT 6
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59088: LD_ADDR_VAR 0 41
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: LD_INT 2
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 1
59106: NEG
59107: PUSH
59108: LD_INT 3
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: LD_INT 2
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: LIST
59131: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59132: LD_ADDR_VAR 0 42
59136: PUSH
59137: LD_INT 2
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: LD_INT 1
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 3
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: LIST
59172: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59173: LD_ADDR_VAR 0 43
59177: PUSH
59178: LD_INT 2
59180: PUSH
59181: LD_INT 2
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 3
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 2
59200: PUSH
59201: LD_INT 3
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: LIST
59212: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59213: LD_ADDR_VAR 0 44
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: LD_INT 2
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: LD_INT 3
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 1
59240: NEG
59241: PUSH
59242: LD_INT 2
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: LIST
59253: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59254: LD_ADDR_VAR 0 45
59258: PUSH
59259: LD_INT 2
59261: NEG
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 2
59272: NEG
59273: PUSH
59274: LD_INT 1
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 3
59283: NEG
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: LIST
59297: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59298: LD_ADDR_VAR 0 46
59302: PUSH
59303: LD_INT 2
59305: NEG
59306: PUSH
59307: LD_INT 2
59309: NEG
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 2
59317: NEG
59318: PUSH
59319: LD_INT 3
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 3
59329: NEG
59330: PUSH
59331: LD_INT 2
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: LIST
59343: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59344: LD_ADDR_VAR 0 47
59348: PUSH
59349: LD_INT 2
59351: NEG
59352: PUSH
59353: LD_INT 3
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 1
59363: NEG
59364: PUSH
59365: LD_INT 3
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59377: LD_ADDR_VAR 0 48
59381: PUSH
59382: LD_INT 1
59384: PUSH
59385: LD_INT 2
59387: NEG
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 2
59395: PUSH
59396: LD_INT 1
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59408: LD_ADDR_VAR 0 49
59412: PUSH
59413: LD_INT 3
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 3
59425: PUSH
59426: LD_INT 2
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59437: LD_ADDR_VAR 0 50
59441: PUSH
59442: LD_INT 2
59444: PUSH
59445: LD_INT 3
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: LD_INT 3
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59466: LD_ADDR_VAR 0 51
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: LD_INT 2
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: NEG
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59497: LD_ADDR_VAR 0 52
59501: PUSH
59502: LD_INT 3
59504: NEG
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 3
59516: NEG
59517: PUSH
59518: LD_INT 2
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59530: LD_ADDR_VAR 0 53
59534: PUSH
59535: LD_INT 1
59537: NEG
59538: PUSH
59539: LD_INT 3
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: LD_INT 3
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: PUSH
59561: LD_INT 2
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: LIST
59573: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59574: LD_ADDR_VAR 0 54
59578: PUSH
59579: LD_INT 2
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 3
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 3
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: LIST
59614: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59615: LD_ADDR_VAR 0 55
59619: PUSH
59620: LD_INT 3
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 3
59632: PUSH
59633: LD_INT 3
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: LD_INT 3
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: LIST
59654: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59655: LD_ADDR_VAR 0 56
59659: PUSH
59660: LD_INT 1
59662: PUSH
59663: LD_INT 3
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: LD_INT 3
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: LD_INT 2
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: LIST
59695: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59696: LD_ADDR_VAR 0 57
59700: PUSH
59701: LD_INT 2
59703: NEG
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 3
59714: NEG
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 3
59725: NEG
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: LIST
59739: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59740: LD_ADDR_VAR 0 58
59744: PUSH
59745: LD_INT 2
59747: NEG
59748: PUSH
59749: LD_INT 3
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 3
59759: NEG
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 3
59771: NEG
59772: PUSH
59773: LD_INT 3
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: LIST
59785: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59786: LD_ADDR_VAR 0 59
59790: PUSH
59791: LD_INT 1
59793: NEG
59794: PUSH
59795: LD_INT 2
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: LD_INT 2
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 1
59816: PUSH
59817: LD_INT 1
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: LIST
59829: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59830: LD_ADDR_VAR 0 60
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 2
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 2
59858: PUSH
59859: LD_INT 1
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: LIST
59870: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59871: LD_ADDR_VAR 0 61
59875: PUSH
59876: LD_INT 2
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 2
59888: PUSH
59889: LD_INT 2
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 1
59898: PUSH
59899: LD_INT 2
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: LIST
59910: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59911: LD_ADDR_VAR 0 62
59915: PUSH
59916: LD_INT 1
59918: PUSH
59919: LD_INT 2
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: LD_INT 2
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: LIST
59951: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59952: LD_ADDR_VAR 0 63
59956: PUSH
59957: LD_INT 1
59959: NEG
59960: PUSH
59961: LD_INT 1
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 2
59970: NEG
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 2
59981: NEG
59982: PUSH
59983: LD_INT 1
59985: NEG
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: LIST
59995: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59996: LD_ADDR_VAR 0 64
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: LD_INT 2
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 2
60015: NEG
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 2
60027: NEG
60028: PUSH
60029: LD_INT 2
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: LIST
60041: ST_TO_ADDR
// end ; 2 :
60042: GO 63308
60044: LD_INT 2
60046: DOUBLE
60047: EQUAL
60048: IFTRUE 60052
60050: GO 63307
60052: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60053: LD_ADDR_VAR 0 29
60057: PUSH
60058: LD_INT 4
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 4
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 5
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 5
60091: PUSH
60092: LD_INT 1
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 4
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 3
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 3
60121: PUSH
60122: LD_INT 1
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 3
60132: PUSH
60133: LD_INT 2
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 5
60143: PUSH
60144: LD_INT 2
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 3
60153: PUSH
60154: LD_INT 3
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 3
60163: PUSH
60164: LD_INT 2
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 4
60173: PUSH
60174: LD_INT 3
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 4
60183: PUSH
60184: LD_INT 4
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 3
60193: PUSH
60194: LD_INT 4
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 2
60203: PUSH
60204: LD_INT 3
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: LD_INT 2
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 4
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 2
60233: PUSH
60234: LD_INT 4
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: LD_INT 4
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: LD_INT 3
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 1
60263: PUSH
60264: LD_INT 4
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: PUSH
60274: LD_INT 5
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: LD_INT 5
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: LD_INT 4
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: NEG
60305: PUSH
60306: LD_INT 3
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: PUSH
60316: LD_INT 5
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 2
60325: NEG
60326: PUSH
60327: LD_INT 3
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 3
60336: NEG
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 3
60347: NEG
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 2
60359: NEG
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 2
60370: NEG
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 3
60381: NEG
60382: PUSH
60383: LD_INT 1
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 4
60392: NEG
60393: PUSH
60394: LD_INT 0
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 4
60403: NEG
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 4
60415: NEG
60416: PUSH
60417: LD_INT 2
60419: NEG
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 2
60427: NEG
60428: PUSH
60429: LD_INT 2
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 4
60438: NEG
60439: PUSH
60440: LD_INT 4
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 4
60450: NEG
60451: PUSH
60452: LD_INT 5
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 3
60462: NEG
60463: PUSH
60464: LD_INT 4
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 3
60474: NEG
60475: PUSH
60476: LD_INT 3
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 4
60486: NEG
60487: PUSH
60488: LD_INT 3
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 5
60498: NEG
60499: PUSH
60500: LD_INT 4
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 5
60510: NEG
60511: PUSH
60512: LD_INT 5
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 3
60522: NEG
60523: PUSH
60524: LD_INT 5
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 5
60534: NEG
60535: PUSH
60536: LD_INT 3
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60591: LD_ADDR_VAR 0 30
60595: PUSH
60596: LD_INT 4
60598: PUSH
60599: LD_INT 4
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 4
60608: PUSH
60609: LD_INT 3
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 5
60618: PUSH
60619: LD_INT 4
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 5
60628: PUSH
60629: LD_INT 5
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 4
60638: PUSH
60639: LD_INT 5
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 3
60648: PUSH
60649: LD_INT 4
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 3
60658: PUSH
60659: LD_INT 3
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 5
60668: PUSH
60669: LD_INT 3
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 3
60678: PUSH
60679: LD_INT 5
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: LD_INT 3
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: LD_INT 2
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: PUSH
60709: LD_INT 3
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: LD_INT 4
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: LD_INT 4
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: LD_INT 3
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 1
60749: NEG
60750: PUSH
60751: LD_INT 2
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 2
60760: PUSH
60761: LD_INT 4
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 2
60770: NEG
60771: PUSH
60772: LD_INT 2
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 4
60781: NEG
60782: PUSH
60783: LD_INT 0
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 4
60792: NEG
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 3
60804: NEG
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 3
60815: NEG
60816: PUSH
60817: LD_INT 1
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 4
60826: NEG
60827: PUSH
60828: LD_INT 1
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 5
60837: NEG
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 5
60848: NEG
60849: PUSH
60850: LD_INT 1
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 5
60860: NEG
60861: PUSH
60862: LD_INT 2
60864: NEG
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 3
60872: NEG
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 3
60883: NEG
60884: PUSH
60885: LD_INT 3
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 3
60895: NEG
60896: PUSH
60897: LD_INT 4
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 2
60907: NEG
60908: PUSH
60909: LD_INT 3
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 2
60919: NEG
60920: PUSH
60921: LD_INT 2
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 3
60931: NEG
60932: PUSH
60933: LD_INT 2
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 4
60943: NEG
60944: PUSH
60945: LD_INT 3
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 4
60955: NEG
60956: PUSH
60957: LD_INT 4
60959: NEG
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 2
60967: NEG
60968: PUSH
60969: LD_INT 4
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 4
60979: NEG
60980: PUSH
60981: LD_INT 2
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: LD_INT 4
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: LD_INT 5
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: PUSH
61014: LD_INT 4
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 1
61024: PUSH
61025: LD_INT 3
61027: NEG
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 0
61035: PUSH
61036: LD_INT 3
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: LD_INT 4
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 1
61058: NEG
61059: PUSH
61060: LD_INT 5
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 2
61070: PUSH
61071: LD_INT 3
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 2
61081: NEG
61082: PUSH
61083: LD_INT 5
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61138: LD_ADDR_VAR 0 31
61142: PUSH
61143: LD_INT 0
61145: PUSH
61146: LD_INT 4
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: LD_INT 3
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: LD_INT 4
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 1
61175: PUSH
61176: LD_INT 5
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: LD_INT 5
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: NEG
61196: PUSH
61197: LD_INT 4
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 1
61206: NEG
61207: PUSH
61208: LD_INT 3
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 2
61217: PUSH
61218: LD_INT 5
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 2
61227: NEG
61228: PUSH
61229: LD_INT 3
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 3
61238: NEG
61239: PUSH
61240: LD_INT 0
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 3
61249: NEG
61250: PUSH
61251: LD_INT 1
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 2
61261: NEG
61262: PUSH
61263: LD_INT 0
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 2
61272: NEG
61273: PUSH
61274: LD_INT 1
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 3
61283: NEG
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 4
61294: NEG
61295: PUSH
61296: LD_INT 0
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 4
61305: NEG
61306: PUSH
61307: LD_INT 1
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 4
61317: NEG
61318: PUSH
61319: LD_INT 2
61321: NEG
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 2
61329: NEG
61330: PUSH
61331: LD_INT 2
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 4
61340: NEG
61341: PUSH
61342: LD_INT 4
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 4
61352: NEG
61353: PUSH
61354: LD_INT 5
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 3
61364: NEG
61365: PUSH
61366: LD_INT 4
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 3
61376: NEG
61377: PUSH
61378: LD_INT 3
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 4
61388: NEG
61389: PUSH
61390: LD_INT 3
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 5
61400: NEG
61401: PUSH
61402: LD_INT 4
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 5
61412: NEG
61413: PUSH
61414: LD_INT 5
61416: NEG
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 3
61424: NEG
61425: PUSH
61426: LD_INT 5
61428: NEG
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 5
61436: NEG
61437: PUSH
61438: LD_INT 3
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: LD_INT 3
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 0
61459: PUSH
61460: LD_INT 4
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 1
61470: PUSH
61471: LD_INT 3
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: LD_INT 2
61484: NEG
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 0
61492: PUSH
61493: LD_INT 2
61495: NEG
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: LD_INT 3
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: NEG
61516: PUSH
61517: LD_INT 4
61519: NEG
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 2
61527: PUSH
61528: LD_INT 2
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 2
61538: NEG
61539: PUSH
61540: LD_INT 4
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 4
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 4
61560: PUSH
61561: LD_INT 1
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 5
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 5
61581: PUSH
61582: LD_INT 1
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 4
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 3
61601: PUSH
61602: LD_INT 0
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 3
61611: PUSH
61612: LD_INT 1
61614: NEG
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 3
61622: PUSH
61623: LD_INT 2
61625: NEG
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 5
61633: PUSH
61634: LD_INT 2
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61688: LD_ADDR_VAR 0 32
61692: PUSH
61693: LD_INT 4
61695: NEG
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 4
61706: NEG
61707: PUSH
61708: LD_INT 1
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 3
61718: NEG
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 3
61729: NEG
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 4
61740: NEG
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 5
61751: NEG
61752: PUSH
61753: LD_INT 0
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 5
61762: NEG
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 5
61774: NEG
61775: PUSH
61776: LD_INT 2
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 3
61786: NEG
61787: PUSH
61788: LD_INT 2
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 3
61797: NEG
61798: PUSH
61799: LD_INT 3
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 3
61809: NEG
61810: PUSH
61811: LD_INT 4
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 2
61821: NEG
61822: PUSH
61823: LD_INT 3
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 2
61833: NEG
61834: PUSH
61835: LD_INT 2
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 3
61845: NEG
61846: PUSH
61847: LD_INT 2
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 4
61857: NEG
61858: PUSH
61859: LD_INT 3
61861: NEG
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 4
61869: NEG
61870: PUSH
61871: LD_INT 4
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 2
61881: NEG
61882: PUSH
61883: LD_INT 4
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 4
61893: NEG
61894: PUSH
61895: LD_INT 2
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: LD_INT 4
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 0
61916: PUSH
61917: LD_INT 5
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 1
61927: PUSH
61928: LD_INT 4
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: PUSH
61939: LD_INT 3
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: LD_INT 3
61952: NEG
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 1
61960: NEG
61961: PUSH
61962: LD_INT 4
61964: NEG
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: LD_INT 5
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 2
61984: PUSH
61985: LD_INT 3
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 2
61995: NEG
61996: PUSH
61997: LD_INT 5
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 3
62007: PUSH
62008: LD_INT 0
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 3
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 4
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 4
62038: PUSH
62039: LD_INT 1
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 3
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 2
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 2
62068: PUSH
62069: LD_INT 1
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 2
62079: PUSH
62080: LD_INT 2
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 4
62090: PUSH
62091: LD_INT 2
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 4
62100: PUSH
62101: LD_INT 4
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 4
62110: PUSH
62111: LD_INT 3
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 5
62120: PUSH
62121: LD_INT 4
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 5
62130: PUSH
62131: LD_INT 5
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 4
62140: PUSH
62141: LD_INT 5
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 3
62150: PUSH
62151: LD_INT 4
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 3
62160: PUSH
62161: LD_INT 3
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 5
62170: PUSH
62171: LD_INT 3
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 3
62180: PUSH
62181: LD_INT 5
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62235: LD_ADDR_VAR 0 33
62239: PUSH
62240: LD_INT 4
62242: NEG
62243: PUSH
62244: LD_INT 4
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 4
62254: NEG
62255: PUSH
62256: LD_INT 5
62258: NEG
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 3
62266: NEG
62267: PUSH
62268: LD_INT 4
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 3
62278: NEG
62279: PUSH
62280: LD_INT 3
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 4
62290: NEG
62291: PUSH
62292: LD_INT 3
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 5
62302: NEG
62303: PUSH
62304: LD_INT 4
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 5
62314: NEG
62315: PUSH
62316: LD_INT 5
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 3
62326: NEG
62327: PUSH
62328: LD_INT 5
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 5
62338: NEG
62339: PUSH
62340: LD_INT 3
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 0
62350: PUSH
62351: LD_INT 3
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: LD_INT 4
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 1
62372: PUSH
62373: LD_INT 3
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: PUSH
62384: LD_INT 2
62386: NEG
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: LD_INT 2
62397: NEG
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 1
62405: NEG
62406: PUSH
62407: LD_INT 3
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 1
62417: NEG
62418: PUSH
62419: LD_INT 4
62421: NEG
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 2
62429: PUSH
62430: LD_INT 2
62432: NEG
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 2
62440: NEG
62441: PUSH
62442: LD_INT 4
62444: NEG
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 4
62452: PUSH
62453: LD_INT 0
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 4
62462: PUSH
62463: LD_INT 1
62465: NEG
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 5
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 5
62483: PUSH
62484: LD_INT 1
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 4
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 3
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 3
62513: PUSH
62514: LD_INT 1
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 3
62524: PUSH
62525: LD_INT 2
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 5
62535: PUSH
62536: LD_INT 2
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 3
62545: PUSH
62546: LD_INT 3
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 3
62555: PUSH
62556: LD_INT 2
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 4
62565: PUSH
62566: LD_INT 3
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 4
62575: PUSH
62576: LD_INT 4
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 3
62585: PUSH
62586: LD_INT 4
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 2
62595: PUSH
62596: LD_INT 3
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 2
62605: PUSH
62606: LD_INT 2
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 4
62615: PUSH
62616: LD_INT 2
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 2
62625: PUSH
62626: LD_INT 4
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: LD_INT 4
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: LD_INT 3
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 1
62655: PUSH
62656: LD_INT 4
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: PUSH
62666: LD_INT 5
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 0
62675: PUSH
62676: LD_INT 5
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 1
62685: NEG
62686: PUSH
62687: LD_INT 4
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 1
62696: NEG
62697: PUSH
62698: LD_INT 3
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 2
62707: PUSH
62708: LD_INT 5
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 2
62717: NEG
62718: PUSH
62719: LD_INT 3
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62773: LD_ADDR_VAR 0 34
62777: PUSH
62778: LD_INT 0
62780: PUSH
62781: LD_INT 4
62783: NEG
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 0
62791: PUSH
62792: LD_INT 5
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 1
62802: PUSH
62803: LD_INT 4
62805: NEG
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 1
62813: PUSH
62814: LD_INT 3
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 0
62824: PUSH
62825: LD_INT 3
62827: NEG
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 1
62835: NEG
62836: PUSH
62837: LD_INT 4
62839: NEG
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: LD_INT 5
62851: NEG
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 2
62859: PUSH
62860: LD_INT 3
62862: NEG
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 2
62870: NEG
62871: PUSH
62872: LD_INT 5
62874: NEG
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 3
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 3
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 4
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 4
62913: PUSH
62914: LD_INT 1
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 3
62923: PUSH
62924: LD_INT 1
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 2
62933: PUSH
62934: LD_INT 0
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 2
62954: PUSH
62955: LD_INT 2
62957: NEG
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 4
62965: PUSH
62966: LD_INT 2
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 4
62975: PUSH
62976: LD_INT 4
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 4
62985: PUSH
62986: LD_INT 3
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 5
62995: PUSH
62996: LD_INT 4
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 5
63005: PUSH
63006: LD_INT 5
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 4
63015: PUSH
63016: LD_INT 5
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 3
63025: PUSH
63026: LD_INT 4
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 3
63035: PUSH
63036: LD_INT 3
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 5
63045: PUSH
63046: LD_INT 3
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 3
63055: PUSH
63056: LD_INT 5
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 0
63065: PUSH
63066: LD_INT 3
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: LD_INT 2
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 1
63085: PUSH
63086: LD_INT 3
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: LD_INT 4
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: LD_INT 4
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: LD_INT 3
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: LD_INT 2
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 2
63137: PUSH
63138: LD_INT 4
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 2
63147: NEG
63148: PUSH
63149: LD_INT 2
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 4
63158: NEG
63159: PUSH
63160: LD_INT 0
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 4
63169: NEG
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 3
63181: NEG
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 3
63192: NEG
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 4
63203: NEG
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 5
63214: NEG
63215: PUSH
63216: LD_INT 0
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 5
63225: NEG
63226: PUSH
63227: LD_INT 1
63229: NEG
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 5
63237: NEG
63238: PUSH
63239: LD_INT 2
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 3
63249: NEG
63250: PUSH
63251: LD_INT 2
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: ST_TO_ADDR
// end ; end ;
63305: GO 63308
63307: POP
// case btype of b_depot , b_warehouse :
63308: LD_VAR 0 1
63312: PUSH
63313: LD_INT 0
63315: DOUBLE
63316: EQUAL
63317: IFTRUE 63327
63319: LD_INT 1
63321: DOUBLE
63322: EQUAL
63323: IFTRUE 63327
63325: GO 63528
63327: POP
// case nation of nation_american :
63328: LD_VAR 0 5
63332: PUSH
63333: LD_INT 1
63335: DOUBLE
63336: EQUAL
63337: IFTRUE 63341
63339: GO 63397
63341: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63342: LD_ADDR_VAR 0 9
63346: PUSH
63347: LD_VAR 0 11
63351: PUSH
63352: LD_VAR 0 12
63356: PUSH
63357: LD_VAR 0 13
63361: PUSH
63362: LD_VAR 0 14
63366: PUSH
63367: LD_VAR 0 15
63371: PUSH
63372: LD_VAR 0 16
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: PUSH
63385: LD_VAR 0 4
63389: PUSH
63390: LD_INT 1
63392: PLUS
63393: ARRAY
63394: ST_TO_ADDR
63395: GO 63526
63397: LD_INT 2
63399: DOUBLE
63400: EQUAL
63401: IFTRUE 63405
63403: GO 63461
63405: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63406: LD_ADDR_VAR 0 9
63410: PUSH
63411: LD_VAR 0 17
63415: PUSH
63416: LD_VAR 0 18
63420: PUSH
63421: LD_VAR 0 19
63425: PUSH
63426: LD_VAR 0 20
63430: PUSH
63431: LD_VAR 0 21
63435: PUSH
63436: LD_VAR 0 22
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: PUSH
63449: LD_VAR 0 4
63453: PUSH
63454: LD_INT 1
63456: PLUS
63457: ARRAY
63458: ST_TO_ADDR
63459: GO 63526
63461: LD_INT 3
63463: DOUBLE
63464: EQUAL
63465: IFTRUE 63469
63467: GO 63525
63469: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63470: LD_ADDR_VAR 0 9
63474: PUSH
63475: LD_VAR 0 23
63479: PUSH
63480: LD_VAR 0 24
63484: PUSH
63485: LD_VAR 0 25
63489: PUSH
63490: LD_VAR 0 26
63494: PUSH
63495: LD_VAR 0 27
63499: PUSH
63500: LD_VAR 0 28
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: PUSH
63513: LD_VAR 0 4
63517: PUSH
63518: LD_INT 1
63520: PLUS
63521: ARRAY
63522: ST_TO_ADDR
63523: GO 63526
63525: POP
63526: GO 64081
63528: LD_INT 2
63530: DOUBLE
63531: EQUAL
63532: IFTRUE 63542
63534: LD_INT 3
63536: DOUBLE
63537: EQUAL
63538: IFTRUE 63542
63540: GO 63598
63542: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63543: LD_ADDR_VAR 0 9
63547: PUSH
63548: LD_VAR 0 29
63552: PUSH
63553: LD_VAR 0 30
63557: PUSH
63558: LD_VAR 0 31
63562: PUSH
63563: LD_VAR 0 32
63567: PUSH
63568: LD_VAR 0 33
63572: PUSH
63573: LD_VAR 0 34
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: PUSH
63586: LD_VAR 0 4
63590: PUSH
63591: LD_INT 1
63593: PLUS
63594: ARRAY
63595: ST_TO_ADDR
63596: GO 64081
63598: LD_INT 16
63600: DOUBLE
63601: EQUAL
63602: IFTRUE 63660
63604: LD_INT 17
63606: DOUBLE
63607: EQUAL
63608: IFTRUE 63660
63610: LD_INT 18
63612: DOUBLE
63613: EQUAL
63614: IFTRUE 63660
63616: LD_INT 19
63618: DOUBLE
63619: EQUAL
63620: IFTRUE 63660
63622: LD_INT 22
63624: DOUBLE
63625: EQUAL
63626: IFTRUE 63660
63628: LD_INT 20
63630: DOUBLE
63631: EQUAL
63632: IFTRUE 63660
63634: LD_INT 21
63636: DOUBLE
63637: EQUAL
63638: IFTRUE 63660
63640: LD_INT 23
63642: DOUBLE
63643: EQUAL
63644: IFTRUE 63660
63646: LD_INT 24
63648: DOUBLE
63649: EQUAL
63650: IFTRUE 63660
63652: LD_INT 25
63654: DOUBLE
63655: EQUAL
63656: IFTRUE 63660
63658: GO 63716
63660: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63661: LD_ADDR_VAR 0 9
63665: PUSH
63666: LD_VAR 0 35
63670: PUSH
63671: LD_VAR 0 36
63675: PUSH
63676: LD_VAR 0 37
63680: PUSH
63681: LD_VAR 0 38
63685: PUSH
63686: LD_VAR 0 39
63690: PUSH
63691: LD_VAR 0 40
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: PUSH
63704: LD_VAR 0 4
63708: PUSH
63709: LD_INT 1
63711: PLUS
63712: ARRAY
63713: ST_TO_ADDR
63714: GO 64081
63716: LD_INT 6
63718: DOUBLE
63719: EQUAL
63720: IFTRUE 63772
63722: LD_INT 7
63724: DOUBLE
63725: EQUAL
63726: IFTRUE 63772
63728: LD_INT 8
63730: DOUBLE
63731: EQUAL
63732: IFTRUE 63772
63734: LD_INT 13
63736: DOUBLE
63737: EQUAL
63738: IFTRUE 63772
63740: LD_INT 12
63742: DOUBLE
63743: EQUAL
63744: IFTRUE 63772
63746: LD_INT 15
63748: DOUBLE
63749: EQUAL
63750: IFTRUE 63772
63752: LD_INT 11
63754: DOUBLE
63755: EQUAL
63756: IFTRUE 63772
63758: LD_INT 14
63760: DOUBLE
63761: EQUAL
63762: IFTRUE 63772
63764: LD_INT 10
63766: DOUBLE
63767: EQUAL
63768: IFTRUE 63772
63770: GO 63828
63772: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63773: LD_ADDR_VAR 0 9
63777: PUSH
63778: LD_VAR 0 41
63782: PUSH
63783: LD_VAR 0 42
63787: PUSH
63788: LD_VAR 0 43
63792: PUSH
63793: LD_VAR 0 44
63797: PUSH
63798: LD_VAR 0 45
63802: PUSH
63803: LD_VAR 0 46
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: PUSH
63816: LD_VAR 0 4
63820: PUSH
63821: LD_INT 1
63823: PLUS
63824: ARRAY
63825: ST_TO_ADDR
63826: GO 64081
63828: LD_INT 36
63830: DOUBLE
63831: EQUAL
63832: IFTRUE 63836
63834: GO 63892
63836: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63837: LD_ADDR_VAR 0 9
63841: PUSH
63842: LD_VAR 0 47
63846: PUSH
63847: LD_VAR 0 48
63851: PUSH
63852: LD_VAR 0 49
63856: PUSH
63857: LD_VAR 0 50
63861: PUSH
63862: LD_VAR 0 51
63866: PUSH
63867: LD_VAR 0 52
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: PUSH
63880: LD_VAR 0 4
63884: PUSH
63885: LD_INT 1
63887: PLUS
63888: ARRAY
63889: ST_TO_ADDR
63890: GO 64081
63892: LD_INT 4
63894: DOUBLE
63895: EQUAL
63896: IFTRUE 63918
63898: LD_INT 5
63900: DOUBLE
63901: EQUAL
63902: IFTRUE 63918
63904: LD_INT 34
63906: DOUBLE
63907: EQUAL
63908: IFTRUE 63918
63910: LD_INT 37
63912: DOUBLE
63913: EQUAL
63914: IFTRUE 63918
63916: GO 63974
63918: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63919: LD_ADDR_VAR 0 9
63923: PUSH
63924: LD_VAR 0 53
63928: PUSH
63929: LD_VAR 0 54
63933: PUSH
63934: LD_VAR 0 55
63938: PUSH
63939: LD_VAR 0 56
63943: PUSH
63944: LD_VAR 0 57
63948: PUSH
63949: LD_VAR 0 58
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: PUSH
63962: LD_VAR 0 4
63966: PUSH
63967: LD_INT 1
63969: PLUS
63970: ARRAY
63971: ST_TO_ADDR
63972: GO 64081
63974: LD_INT 31
63976: DOUBLE
63977: EQUAL
63978: IFTRUE 64024
63980: LD_INT 32
63982: DOUBLE
63983: EQUAL
63984: IFTRUE 64024
63986: LD_INT 33
63988: DOUBLE
63989: EQUAL
63990: IFTRUE 64024
63992: LD_INT 27
63994: DOUBLE
63995: EQUAL
63996: IFTRUE 64024
63998: LD_INT 26
64000: DOUBLE
64001: EQUAL
64002: IFTRUE 64024
64004: LD_INT 28
64006: DOUBLE
64007: EQUAL
64008: IFTRUE 64024
64010: LD_INT 29
64012: DOUBLE
64013: EQUAL
64014: IFTRUE 64024
64016: LD_INT 30
64018: DOUBLE
64019: EQUAL
64020: IFTRUE 64024
64022: GO 64080
64024: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64025: LD_ADDR_VAR 0 9
64029: PUSH
64030: LD_VAR 0 59
64034: PUSH
64035: LD_VAR 0 60
64039: PUSH
64040: LD_VAR 0 61
64044: PUSH
64045: LD_VAR 0 62
64049: PUSH
64050: LD_VAR 0 63
64054: PUSH
64055: LD_VAR 0 64
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: PUSH
64068: LD_VAR 0 4
64072: PUSH
64073: LD_INT 1
64075: PLUS
64076: ARRAY
64077: ST_TO_ADDR
64078: GO 64081
64080: POP
// temp_list2 = [ ] ;
64081: LD_ADDR_VAR 0 10
64085: PUSH
64086: EMPTY
64087: ST_TO_ADDR
// for i in temp_list do
64088: LD_ADDR_VAR 0 8
64092: PUSH
64093: LD_VAR 0 9
64097: PUSH
64098: FOR_IN
64099: IFFALSE 64151
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64101: LD_ADDR_VAR 0 10
64105: PUSH
64106: LD_VAR 0 10
64110: PUSH
64111: LD_VAR 0 8
64115: PUSH
64116: LD_INT 1
64118: ARRAY
64119: PUSH
64120: LD_VAR 0 2
64124: PLUS
64125: PUSH
64126: LD_VAR 0 8
64130: PUSH
64131: LD_INT 2
64133: ARRAY
64134: PUSH
64135: LD_VAR 0 3
64139: PLUS
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: EMPTY
64146: LIST
64147: ADD
64148: ST_TO_ADDR
64149: GO 64098
64151: POP
64152: POP
// result = temp_list2 ;
64153: LD_ADDR_VAR 0 7
64157: PUSH
64158: LD_VAR 0 10
64162: ST_TO_ADDR
// end ;
64163: LD_VAR 0 7
64167: RET
// export function EnemyInRange ( unit , dist ) ; begin
64168: LD_INT 0
64170: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64171: LD_ADDR_VAR 0 3
64175: PUSH
64176: LD_VAR 0 1
64180: PPUSH
64181: CALL_OW 255
64185: PPUSH
64186: LD_VAR 0 1
64190: PPUSH
64191: CALL_OW 250
64195: PPUSH
64196: LD_VAR 0 1
64200: PPUSH
64201: CALL_OW 251
64205: PPUSH
64206: LD_VAR 0 2
64210: PPUSH
64211: CALL 37564 0 4
64215: PUSH
64216: LD_INT 4
64218: ARRAY
64219: ST_TO_ADDR
// end ;
64220: LD_VAR 0 3
64224: RET
// export function PlayerSeeMe ( unit ) ; begin
64225: LD_INT 0
64227: PPUSH
// result := See ( your_side , unit ) ;
64228: LD_ADDR_VAR 0 2
64232: PUSH
64233: LD_OWVAR 2
64237: PPUSH
64238: LD_VAR 0 1
64242: PPUSH
64243: CALL_OW 292
64247: ST_TO_ADDR
// end ;
64248: LD_VAR 0 2
64252: RET
// export function ReverseDir ( unit ) ; begin
64253: LD_INT 0
64255: PPUSH
// if not unit then
64256: LD_VAR 0 1
64260: NOT
64261: IFFALSE 64265
// exit ;
64263: GO 64288
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64265: LD_ADDR_VAR 0 2
64269: PUSH
64270: LD_VAR 0 1
64274: PPUSH
64275: CALL_OW 254
64279: PUSH
64280: LD_INT 3
64282: PLUS
64283: PUSH
64284: LD_INT 6
64286: MOD
64287: ST_TO_ADDR
// end ;
64288: LD_VAR 0 2
64292: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64293: LD_INT 0
64295: PPUSH
64296: PPUSH
64297: PPUSH
64298: PPUSH
64299: PPUSH
// if not hexes then
64300: LD_VAR 0 2
64304: NOT
64305: IFFALSE 64309
// exit ;
64307: GO 64457
// dist := 9999 ;
64309: LD_ADDR_VAR 0 5
64313: PUSH
64314: LD_INT 9999
64316: ST_TO_ADDR
// for i = 1 to hexes do
64317: LD_ADDR_VAR 0 4
64321: PUSH
64322: DOUBLE
64323: LD_INT 1
64325: DEC
64326: ST_TO_ADDR
64327: LD_VAR 0 2
64331: PUSH
64332: FOR_TO
64333: IFFALSE 64445
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64335: LD_VAR 0 1
64339: PPUSH
64340: LD_VAR 0 2
64344: PUSH
64345: LD_VAR 0 4
64349: ARRAY
64350: PUSH
64351: LD_INT 1
64353: ARRAY
64354: PPUSH
64355: LD_VAR 0 2
64359: PUSH
64360: LD_VAR 0 4
64364: ARRAY
64365: PUSH
64366: LD_INT 2
64368: ARRAY
64369: PPUSH
64370: CALL_OW 297
64374: PUSH
64375: LD_VAR 0 5
64379: LESS
64380: IFFALSE 64443
// begin hex := hexes [ i ] ;
64382: LD_ADDR_VAR 0 7
64386: PUSH
64387: LD_VAR 0 2
64391: PUSH
64392: LD_VAR 0 4
64396: ARRAY
64397: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64398: LD_ADDR_VAR 0 5
64402: PUSH
64403: LD_VAR 0 1
64407: PPUSH
64408: LD_VAR 0 2
64412: PUSH
64413: LD_VAR 0 4
64417: ARRAY
64418: PUSH
64419: LD_INT 1
64421: ARRAY
64422: PPUSH
64423: LD_VAR 0 2
64427: PUSH
64428: LD_VAR 0 4
64432: ARRAY
64433: PUSH
64434: LD_INT 2
64436: ARRAY
64437: PPUSH
64438: CALL_OW 297
64442: ST_TO_ADDR
// end ; end ;
64443: GO 64332
64445: POP
64446: POP
// result := hex ;
64447: LD_ADDR_VAR 0 3
64451: PUSH
64452: LD_VAR 0 7
64456: ST_TO_ADDR
// end ;
64457: LD_VAR 0 3
64461: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64462: LD_INT 0
64464: PPUSH
64465: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64466: LD_VAR 0 1
64470: NOT
64471: PUSH
64472: LD_VAR 0 1
64476: PUSH
64477: LD_INT 21
64479: PUSH
64480: LD_INT 2
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 23
64489: PUSH
64490: LD_INT 2
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PPUSH
64501: CALL_OW 69
64505: IN
64506: NOT
64507: OR
64508: IFFALSE 64512
// exit ;
64510: GO 64559
// for i = 1 to 3 do
64512: LD_ADDR_VAR 0 3
64516: PUSH
64517: DOUBLE
64518: LD_INT 1
64520: DEC
64521: ST_TO_ADDR
64522: LD_INT 3
64524: PUSH
64525: FOR_TO
64526: IFFALSE 64557
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64528: LD_VAR 0 1
64532: PPUSH
64533: CALL_OW 250
64537: PPUSH
64538: LD_VAR 0 1
64542: PPUSH
64543: CALL_OW 251
64547: PPUSH
64548: LD_INT 1
64550: PPUSH
64551: CALL_OW 453
64555: GO 64525
64557: POP
64558: POP
// end ;
64559: LD_VAR 0 2
64563: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64564: LD_INT 0
64566: PPUSH
64567: PPUSH
64568: PPUSH
64569: PPUSH
64570: PPUSH
64571: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64572: LD_VAR 0 1
64576: NOT
64577: PUSH
64578: LD_VAR 0 2
64582: NOT
64583: OR
64584: PUSH
64585: LD_VAR 0 1
64589: PPUSH
64590: CALL_OW 314
64594: OR
64595: IFFALSE 64599
// exit ;
64597: GO 65040
// x := GetX ( enemy_unit ) ;
64599: LD_ADDR_VAR 0 7
64603: PUSH
64604: LD_VAR 0 2
64608: PPUSH
64609: CALL_OW 250
64613: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64614: LD_ADDR_VAR 0 8
64618: PUSH
64619: LD_VAR 0 2
64623: PPUSH
64624: CALL_OW 251
64628: ST_TO_ADDR
// if not x or not y then
64629: LD_VAR 0 7
64633: NOT
64634: PUSH
64635: LD_VAR 0 8
64639: NOT
64640: OR
64641: IFFALSE 64645
// exit ;
64643: GO 65040
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64645: LD_ADDR_VAR 0 6
64649: PUSH
64650: LD_VAR 0 7
64654: PPUSH
64655: LD_INT 0
64657: PPUSH
64658: LD_INT 4
64660: PPUSH
64661: CALL_OW 272
64665: PUSH
64666: LD_VAR 0 8
64670: PPUSH
64671: LD_INT 0
64673: PPUSH
64674: LD_INT 4
64676: PPUSH
64677: CALL_OW 273
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_VAR 0 7
64690: PPUSH
64691: LD_INT 1
64693: PPUSH
64694: LD_INT 4
64696: PPUSH
64697: CALL_OW 272
64701: PUSH
64702: LD_VAR 0 8
64706: PPUSH
64707: LD_INT 1
64709: PPUSH
64710: LD_INT 4
64712: PPUSH
64713: CALL_OW 273
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_VAR 0 7
64726: PPUSH
64727: LD_INT 2
64729: PPUSH
64730: LD_INT 4
64732: PPUSH
64733: CALL_OW 272
64737: PUSH
64738: LD_VAR 0 8
64742: PPUSH
64743: LD_INT 2
64745: PPUSH
64746: LD_INT 4
64748: PPUSH
64749: CALL_OW 273
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_VAR 0 7
64762: PPUSH
64763: LD_INT 3
64765: PPUSH
64766: LD_INT 4
64768: PPUSH
64769: CALL_OW 272
64773: PUSH
64774: LD_VAR 0 8
64778: PPUSH
64779: LD_INT 3
64781: PPUSH
64782: LD_INT 4
64784: PPUSH
64785: CALL_OW 273
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_VAR 0 7
64798: PPUSH
64799: LD_INT 4
64801: PPUSH
64802: LD_INT 4
64804: PPUSH
64805: CALL_OW 272
64809: PUSH
64810: LD_VAR 0 8
64814: PPUSH
64815: LD_INT 4
64817: PPUSH
64818: LD_INT 4
64820: PPUSH
64821: CALL_OW 273
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_VAR 0 7
64834: PPUSH
64835: LD_INT 5
64837: PPUSH
64838: LD_INT 4
64840: PPUSH
64841: CALL_OW 272
64845: PUSH
64846: LD_VAR 0 8
64850: PPUSH
64851: LD_INT 5
64853: PPUSH
64854: LD_INT 4
64856: PPUSH
64857: CALL_OW 273
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: ST_TO_ADDR
// for i = tmp downto 1 do
64874: LD_ADDR_VAR 0 4
64878: PUSH
64879: DOUBLE
64880: LD_VAR 0 6
64884: INC
64885: ST_TO_ADDR
64886: LD_INT 1
64888: PUSH
64889: FOR_DOWNTO
64890: IFFALSE 64991
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64892: LD_VAR 0 6
64896: PUSH
64897: LD_VAR 0 4
64901: ARRAY
64902: PUSH
64903: LD_INT 1
64905: ARRAY
64906: PPUSH
64907: LD_VAR 0 6
64911: PUSH
64912: LD_VAR 0 4
64916: ARRAY
64917: PUSH
64918: LD_INT 2
64920: ARRAY
64921: PPUSH
64922: CALL_OW 488
64926: NOT
64927: PUSH
64928: LD_VAR 0 6
64932: PUSH
64933: LD_VAR 0 4
64937: ARRAY
64938: PUSH
64939: LD_INT 1
64941: ARRAY
64942: PPUSH
64943: LD_VAR 0 6
64947: PUSH
64948: LD_VAR 0 4
64952: ARRAY
64953: PUSH
64954: LD_INT 2
64956: ARRAY
64957: PPUSH
64958: CALL_OW 428
64962: PUSH
64963: LD_INT 0
64965: NONEQUAL
64966: OR
64967: IFFALSE 64989
// tmp := Delete ( tmp , i ) ;
64969: LD_ADDR_VAR 0 6
64973: PUSH
64974: LD_VAR 0 6
64978: PPUSH
64979: LD_VAR 0 4
64983: PPUSH
64984: CALL_OW 3
64988: ST_TO_ADDR
64989: GO 64889
64991: POP
64992: POP
// j := GetClosestHex ( unit , tmp ) ;
64993: LD_ADDR_VAR 0 5
64997: PUSH
64998: LD_VAR 0 1
65002: PPUSH
65003: LD_VAR 0 6
65007: PPUSH
65008: CALL 64293 0 2
65012: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65013: LD_VAR 0 1
65017: PPUSH
65018: LD_VAR 0 5
65022: PUSH
65023: LD_INT 1
65025: ARRAY
65026: PPUSH
65027: LD_VAR 0 5
65031: PUSH
65032: LD_INT 2
65034: ARRAY
65035: PPUSH
65036: CALL_OW 111
// end ;
65040: LD_VAR 0 3
65044: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65045: LD_INT 0
65047: PPUSH
65048: PPUSH
65049: PPUSH
// uc_side = 0 ;
65050: LD_ADDR_OWVAR 20
65054: PUSH
65055: LD_INT 0
65057: ST_TO_ADDR
// uc_nation = 0 ;
65058: LD_ADDR_OWVAR 21
65062: PUSH
65063: LD_INT 0
65065: ST_TO_ADDR
// InitHc_All ( ) ;
65066: CALL_OW 584
// InitVc ;
65070: CALL_OW 20
// if mastodonts then
65074: LD_VAR 0 6
65078: IFFALSE 65145
// for i = 1 to mastodonts do
65080: LD_ADDR_VAR 0 11
65084: PUSH
65085: DOUBLE
65086: LD_INT 1
65088: DEC
65089: ST_TO_ADDR
65090: LD_VAR 0 6
65094: PUSH
65095: FOR_TO
65096: IFFALSE 65143
// begin vc_chassis := 31 ;
65098: LD_ADDR_OWVAR 37
65102: PUSH
65103: LD_INT 31
65105: ST_TO_ADDR
// vc_control := control_rider ;
65106: LD_ADDR_OWVAR 38
65110: PUSH
65111: LD_INT 4
65113: ST_TO_ADDR
// animal := CreateVehicle ;
65114: LD_ADDR_VAR 0 12
65118: PUSH
65119: CALL_OW 45
65123: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65124: LD_VAR 0 12
65128: PPUSH
65129: LD_VAR 0 8
65133: PPUSH
65134: LD_INT 0
65136: PPUSH
65137: CALL 67333 0 3
// end ;
65141: GO 65095
65143: POP
65144: POP
// if horses then
65145: LD_VAR 0 5
65149: IFFALSE 65216
// for i = 1 to horses do
65151: LD_ADDR_VAR 0 11
65155: PUSH
65156: DOUBLE
65157: LD_INT 1
65159: DEC
65160: ST_TO_ADDR
65161: LD_VAR 0 5
65165: PUSH
65166: FOR_TO
65167: IFFALSE 65214
// begin hc_class := 21 ;
65169: LD_ADDR_OWVAR 28
65173: PUSH
65174: LD_INT 21
65176: ST_TO_ADDR
// hc_gallery :=  ;
65177: LD_ADDR_OWVAR 33
65181: PUSH
65182: LD_STRING 
65184: ST_TO_ADDR
// animal := CreateHuman ;
65185: LD_ADDR_VAR 0 12
65189: PUSH
65190: CALL_OW 44
65194: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65195: LD_VAR 0 12
65199: PPUSH
65200: LD_VAR 0 8
65204: PPUSH
65205: LD_INT 0
65207: PPUSH
65208: CALL 67333 0 3
// end ;
65212: GO 65166
65214: POP
65215: POP
// if birds then
65216: LD_VAR 0 1
65220: IFFALSE 65287
// for i = 1 to birds do
65222: LD_ADDR_VAR 0 11
65226: PUSH
65227: DOUBLE
65228: LD_INT 1
65230: DEC
65231: ST_TO_ADDR
65232: LD_VAR 0 1
65236: PUSH
65237: FOR_TO
65238: IFFALSE 65285
// begin hc_class = 18 ;
65240: LD_ADDR_OWVAR 28
65244: PUSH
65245: LD_INT 18
65247: ST_TO_ADDR
// hc_gallery =  ;
65248: LD_ADDR_OWVAR 33
65252: PUSH
65253: LD_STRING 
65255: ST_TO_ADDR
// animal := CreateHuman ;
65256: LD_ADDR_VAR 0 12
65260: PUSH
65261: CALL_OW 44
65265: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65266: LD_VAR 0 12
65270: PPUSH
65271: LD_VAR 0 8
65275: PPUSH
65276: LD_INT 0
65278: PPUSH
65279: CALL 67333 0 3
// end ;
65283: GO 65237
65285: POP
65286: POP
// if tigers then
65287: LD_VAR 0 2
65291: IFFALSE 65375
// for i = 1 to tigers do
65293: LD_ADDR_VAR 0 11
65297: PUSH
65298: DOUBLE
65299: LD_INT 1
65301: DEC
65302: ST_TO_ADDR
65303: LD_VAR 0 2
65307: PUSH
65308: FOR_TO
65309: IFFALSE 65373
// begin hc_class = class_tiger ;
65311: LD_ADDR_OWVAR 28
65315: PUSH
65316: LD_INT 14
65318: ST_TO_ADDR
// hc_gallery =  ;
65319: LD_ADDR_OWVAR 33
65323: PUSH
65324: LD_STRING 
65326: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65327: LD_ADDR_OWVAR 35
65331: PUSH
65332: LD_INT 7
65334: NEG
65335: PPUSH
65336: LD_INT 7
65338: PPUSH
65339: CALL_OW 12
65343: ST_TO_ADDR
// animal := CreateHuman ;
65344: LD_ADDR_VAR 0 12
65348: PUSH
65349: CALL_OW 44
65353: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65354: LD_VAR 0 12
65358: PPUSH
65359: LD_VAR 0 8
65363: PPUSH
65364: LD_INT 0
65366: PPUSH
65367: CALL 67333 0 3
// end ;
65371: GO 65308
65373: POP
65374: POP
// if apemans then
65375: LD_VAR 0 3
65379: IFFALSE 65502
// for i = 1 to apemans do
65381: LD_ADDR_VAR 0 11
65385: PUSH
65386: DOUBLE
65387: LD_INT 1
65389: DEC
65390: ST_TO_ADDR
65391: LD_VAR 0 3
65395: PUSH
65396: FOR_TO
65397: IFFALSE 65500
// begin hc_class = class_apeman ;
65399: LD_ADDR_OWVAR 28
65403: PUSH
65404: LD_INT 12
65406: ST_TO_ADDR
// hc_gallery =  ;
65407: LD_ADDR_OWVAR 33
65411: PUSH
65412: LD_STRING 
65414: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65415: LD_ADDR_OWVAR 35
65419: PUSH
65420: LD_INT 2
65422: NEG
65423: PPUSH
65424: LD_INT 2
65426: PPUSH
65427: CALL_OW 12
65431: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65432: LD_ADDR_OWVAR 31
65436: PUSH
65437: LD_INT 1
65439: PPUSH
65440: LD_INT 3
65442: PPUSH
65443: CALL_OW 12
65447: PUSH
65448: LD_INT 1
65450: PPUSH
65451: LD_INT 3
65453: PPUSH
65454: CALL_OW 12
65458: PUSH
65459: LD_INT 0
65461: PUSH
65462: LD_INT 0
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: ST_TO_ADDR
// animal := CreateHuman ;
65471: LD_ADDR_VAR 0 12
65475: PUSH
65476: CALL_OW 44
65480: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65481: LD_VAR 0 12
65485: PPUSH
65486: LD_VAR 0 8
65490: PPUSH
65491: LD_INT 0
65493: PPUSH
65494: CALL 67333 0 3
// end ;
65498: GO 65396
65500: POP
65501: POP
// if enchidnas then
65502: LD_VAR 0 4
65506: IFFALSE 65573
// for i = 1 to enchidnas do
65508: LD_ADDR_VAR 0 11
65512: PUSH
65513: DOUBLE
65514: LD_INT 1
65516: DEC
65517: ST_TO_ADDR
65518: LD_VAR 0 4
65522: PUSH
65523: FOR_TO
65524: IFFALSE 65571
// begin hc_class = 13 ;
65526: LD_ADDR_OWVAR 28
65530: PUSH
65531: LD_INT 13
65533: ST_TO_ADDR
// hc_gallery =  ;
65534: LD_ADDR_OWVAR 33
65538: PUSH
65539: LD_STRING 
65541: ST_TO_ADDR
// animal := CreateHuman ;
65542: LD_ADDR_VAR 0 12
65546: PUSH
65547: CALL_OW 44
65551: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65552: LD_VAR 0 12
65556: PPUSH
65557: LD_VAR 0 8
65561: PPUSH
65562: LD_INT 0
65564: PPUSH
65565: CALL 67333 0 3
// end ;
65569: GO 65523
65571: POP
65572: POP
// if fishes then
65573: LD_VAR 0 7
65577: IFFALSE 65644
// for i = 1 to fishes do
65579: LD_ADDR_VAR 0 11
65583: PUSH
65584: DOUBLE
65585: LD_INT 1
65587: DEC
65588: ST_TO_ADDR
65589: LD_VAR 0 7
65593: PUSH
65594: FOR_TO
65595: IFFALSE 65642
// begin hc_class = 20 ;
65597: LD_ADDR_OWVAR 28
65601: PUSH
65602: LD_INT 20
65604: ST_TO_ADDR
// hc_gallery =  ;
65605: LD_ADDR_OWVAR 33
65609: PUSH
65610: LD_STRING 
65612: ST_TO_ADDR
// animal := CreateHuman ;
65613: LD_ADDR_VAR 0 12
65617: PUSH
65618: CALL_OW 44
65622: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65623: LD_VAR 0 12
65627: PPUSH
65628: LD_VAR 0 9
65632: PPUSH
65633: LD_INT 0
65635: PPUSH
65636: CALL 67333 0 3
// end ;
65640: GO 65594
65642: POP
65643: POP
// end ;
65644: LD_VAR 0 10
65648: RET
// export function WantHeal ( sci , unit ) ; begin
65649: LD_INT 0
65651: PPUSH
// if GetTaskList ( sci ) > 0 then
65652: LD_VAR 0 1
65656: PPUSH
65657: CALL_OW 437
65661: PUSH
65662: LD_INT 0
65664: GREATER
65665: IFFALSE 65735
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65667: LD_VAR 0 1
65671: PPUSH
65672: CALL_OW 437
65676: PUSH
65677: LD_INT 1
65679: ARRAY
65680: PUSH
65681: LD_INT 1
65683: ARRAY
65684: PUSH
65685: LD_STRING l
65687: EQUAL
65688: PUSH
65689: LD_VAR 0 1
65693: PPUSH
65694: CALL_OW 437
65698: PUSH
65699: LD_INT 1
65701: ARRAY
65702: PUSH
65703: LD_INT 4
65705: ARRAY
65706: PUSH
65707: LD_VAR 0 2
65711: EQUAL
65712: AND
65713: IFFALSE 65725
// result := true else
65715: LD_ADDR_VAR 0 3
65719: PUSH
65720: LD_INT 1
65722: ST_TO_ADDR
65723: GO 65733
// result := false ;
65725: LD_ADDR_VAR 0 3
65729: PUSH
65730: LD_INT 0
65732: ST_TO_ADDR
// end else
65733: GO 65743
// result := false ;
65735: LD_ADDR_VAR 0 3
65739: PUSH
65740: LD_INT 0
65742: ST_TO_ADDR
// end ;
65743: LD_VAR 0 3
65747: RET
// export function HealTarget ( sci ) ; begin
65748: LD_INT 0
65750: PPUSH
// if not sci then
65751: LD_VAR 0 1
65755: NOT
65756: IFFALSE 65760
// exit ;
65758: GO 65825
// result := 0 ;
65760: LD_ADDR_VAR 0 2
65764: PUSH
65765: LD_INT 0
65767: ST_TO_ADDR
// if GetTaskList ( sci ) then
65768: LD_VAR 0 1
65772: PPUSH
65773: CALL_OW 437
65777: IFFALSE 65825
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65779: LD_VAR 0 1
65783: PPUSH
65784: CALL_OW 437
65788: PUSH
65789: LD_INT 1
65791: ARRAY
65792: PUSH
65793: LD_INT 1
65795: ARRAY
65796: PUSH
65797: LD_STRING l
65799: EQUAL
65800: IFFALSE 65825
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65802: LD_ADDR_VAR 0 2
65806: PUSH
65807: LD_VAR 0 1
65811: PPUSH
65812: CALL_OW 437
65816: PUSH
65817: LD_INT 1
65819: ARRAY
65820: PUSH
65821: LD_INT 4
65823: ARRAY
65824: ST_TO_ADDR
// end ;
65825: LD_VAR 0 2
65829: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65830: LD_INT 0
65832: PPUSH
65833: PPUSH
65834: PPUSH
65835: PPUSH
// if not base_units then
65836: LD_VAR 0 1
65840: NOT
65841: IFFALSE 65845
// exit ;
65843: GO 65932
// result := false ;
65845: LD_ADDR_VAR 0 2
65849: PUSH
65850: LD_INT 0
65852: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65853: LD_ADDR_VAR 0 5
65857: PUSH
65858: LD_VAR 0 1
65862: PPUSH
65863: LD_INT 21
65865: PUSH
65866: LD_INT 3
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PPUSH
65873: CALL_OW 72
65877: ST_TO_ADDR
// if not tmp then
65878: LD_VAR 0 5
65882: NOT
65883: IFFALSE 65887
// exit ;
65885: GO 65932
// for i in tmp do
65887: LD_ADDR_VAR 0 3
65891: PUSH
65892: LD_VAR 0 5
65896: PUSH
65897: FOR_IN
65898: IFFALSE 65930
// begin result := EnemyInRange ( i , 22 ) ;
65900: LD_ADDR_VAR 0 2
65904: PUSH
65905: LD_VAR 0 3
65909: PPUSH
65910: LD_INT 22
65912: PPUSH
65913: CALL 64168 0 2
65917: ST_TO_ADDR
// if result then
65918: LD_VAR 0 2
65922: IFFALSE 65928
// exit ;
65924: POP
65925: POP
65926: GO 65932
// end ;
65928: GO 65897
65930: POP
65931: POP
// end ;
65932: LD_VAR 0 2
65936: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
65937: LD_INT 0
65939: PPUSH
65940: PPUSH
// if not units then
65941: LD_VAR 0 1
65945: NOT
65946: IFFALSE 65950
// exit ;
65948: GO 66020
// result := [ ] ;
65950: LD_ADDR_VAR 0 3
65954: PUSH
65955: EMPTY
65956: ST_TO_ADDR
// for i in units do
65957: LD_ADDR_VAR 0 4
65961: PUSH
65962: LD_VAR 0 1
65966: PUSH
65967: FOR_IN
65968: IFFALSE 66018
// if GetTag ( i ) = tag then
65970: LD_VAR 0 4
65974: PPUSH
65975: CALL_OW 110
65979: PUSH
65980: LD_VAR 0 2
65984: EQUAL
65985: IFFALSE 66016
// result := Replace ( result , result + 1 , i ) ;
65987: LD_ADDR_VAR 0 3
65991: PUSH
65992: LD_VAR 0 3
65996: PPUSH
65997: LD_VAR 0 3
66001: PUSH
66002: LD_INT 1
66004: PLUS
66005: PPUSH
66006: LD_VAR 0 4
66010: PPUSH
66011: CALL_OW 1
66015: ST_TO_ADDR
66016: GO 65967
66018: POP
66019: POP
// end ;
66020: LD_VAR 0 3
66024: RET
// export function IsDriver ( un ) ; begin
66025: LD_INT 0
66027: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66028: LD_ADDR_VAR 0 2
66032: PUSH
66033: LD_VAR 0 1
66037: PUSH
66038: LD_INT 55
66040: PUSH
66041: EMPTY
66042: LIST
66043: PPUSH
66044: CALL_OW 69
66048: IN
66049: ST_TO_ADDR
// end ;
66050: LD_VAR 0 2
66054: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66055: LD_INT 0
66057: PPUSH
66058: PPUSH
// list := [ ] ;
66059: LD_ADDR_VAR 0 5
66063: PUSH
66064: EMPTY
66065: ST_TO_ADDR
// case d of 0 :
66066: LD_VAR 0 3
66070: PUSH
66071: LD_INT 0
66073: DOUBLE
66074: EQUAL
66075: IFTRUE 66079
66077: GO 66212
66079: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66080: LD_ADDR_VAR 0 5
66084: PUSH
66085: LD_VAR 0 1
66089: PUSH
66090: LD_INT 4
66092: MINUS
66093: PUSH
66094: LD_VAR 0 2
66098: PUSH
66099: LD_INT 4
66101: MINUS
66102: PUSH
66103: LD_INT 2
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: LIST
66110: PUSH
66111: LD_VAR 0 1
66115: PUSH
66116: LD_INT 3
66118: MINUS
66119: PUSH
66120: LD_VAR 0 2
66124: PUSH
66125: LD_INT 1
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: LIST
66132: PUSH
66133: LD_VAR 0 1
66137: PUSH
66138: LD_INT 4
66140: PLUS
66141: PUSH
66142: LD_VAR 0 2
66146: PUSH
66147: LD_INT 4
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: LIST
66154: PUSH
66155: LD_VAR 0 1
66159: PUSH
66160: LD_INT 3
66162: PLUS
66163: PUSH
66164: LD_VAR 0 2
66168: PUSH
66169: LD_INT 3
66171: PLUS
66172: PUSH
66173: LD_INT 5
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: LIST
66180: PUSH
66181: LD_VAR 0 1
66185: PUSH
66186: LD_VAR 0 2
66190: PUSH
66191: LD_INT 4
66193: PLUS
66194: PUSH
66195: LD_INT 0
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: LIST
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: ST_TO_ADDR
// end ; 1 :
66210: GO 66910
66212: LD_INT 1
66214: DOUBLE
66215: EQUAL
66216: IFTRUE 66220
66218: GO 66353
66220: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66221: LD_ADDR_VAR 0 5
66225: PUSH
66226: LD_VAR 0 1
66230: PUSH
66231: LD_VAR 0 2
66235: PUSH
66236: LD_INT 4
66238: MINUS
66239: PUSH
66240: LD_INT 3
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: LIST
66247: PUSH
66248: LD_VAR 0 1
66252: PUSH
66253: LD_INT 3
66255: MINUS
66256: PUSH
66257: LD_VAR 0 2
66261: PUSH
66262: LD_INT 3
66264: MINUS
66265: PUSH
66266: LD_INT 2
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: LIST
66273: PUSH
66274: LD_VAR 0 1
66278: PUSH
66279: LD_INT 4
66281: MINUS
66282: PUSH
66283: LD_VAR 0 2
66287: PUSH
66288: LD_INT 1
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: LIST
66295: PUSH
66296: LD_VAR 0 1
66300: PUSH
66301: LD_VAR 0 2
66305: PUSH
66306: LD_INT 3
66308: PLUS
66309: PUSH
66310: LD_INT 0
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: LIST
66317: PUSH
66318: LD_VAR 0 1
66322: PUSH
66323: LD_INT 4
66325: PLUS
66326: PUSH
66327: LD_VAR 0 2
66331: PUSH
66332: LD_INT 4
66334: PLUS
66335: PUSH
66336: LD_INT 5
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: LIST
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: ST_TO_ADDR
// end ; 2 :
66351: GO 66910
66353: LD_INT 2
66355: DOUBLE
66356: EQUAL
66357: IFTRUE 66361
66359: GO 66490
66361: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66362: LD_ADDR_VAR 0 5
66366: PUSH
66367: LD_VAR 0 1
66371: PUSH
66372: LD_VAR 0 2
66376: PUSH
66377: LD_INT 3
66379: MINUS
66380: PUSH
66381: LD_INT 3
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: LIST
66388: PUSH
66389: LD_VAR 0 1
66393: PUSH
66394: LD_INT 4
66396: PLUS
66397: PUSH
66398: LD_VAR 0 2
66402: PUSH
66403: LD_INT 4
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: LIST
66410: PUSH
66411: LD_VAR 0 1
66415: PUSH
66416: LD_VAR 0 2
66420: PUSH
66421: LD_INT 4
66423: PLUS
66424: PUSH
66425: LD_INT 0
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: LIST
66432: PUSH
66433: LD_VAR 0 1
66437: PUSH
66438: LD_INT 3
66440: MINUS
66441: PUSH
66442: LD_VAR 0 2
66446: PUSH
66447: LD_INT 1
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: LIST
66454: PUSH
66455: LD_VAR 0 1
66459: PUSH
66460: LD_INT 4
66462: MINUS
66463: PUSH
66464: LD_VAR 0 2
66468: PUSH
66469: LD_INT 4
66471: MINUS
66472: PUSH
66473: LD_INT 2
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: LIST
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: ST_TO_ADDR
// end ; 3 :
66488: GO 66910
66490: LD_INT 3
66492: DOUBLE
66493: EQUAL
66494: IFTRUE 66498
66496: GO 66631
66498: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66499: LD_ADDR_VAR 0 5
66503: PUSH
66504: LD_VAR 0 1
66508: PUSH
66509: LD_INT 3
66511: PLUS
66512: PUSH
66513: LD_VAR 0 2
66517: PUSH
66518: LD_INT 4
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: LIST
66525: PUSH
66526: LD_VAR 0 1
66530: PUSH
66531: LD_INT 4
66533: PLUS
66534: PUSH
66535: LD_VAR 0 2
66539: PUSH
66540: LD_INT 4
66542: PLUS
66543: PUSH
66544: LD_INT 5
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: LIST
66551: PUSH
66552: LD_VAR 0 1
66556: PUSH
66557: LD_INT 4
66559: MINUS
66560: PUSH
66561: LD_VAR 0 2
66565: PUSH
66566: LD_INT 1
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: LIST
66573: PUSH
66574: LD_VAR 0 1
66578: PUSH
66579: LD_VAR 0 2
66583: PUSH
66584: LD_INT 4
66586: MINUS
66587: PUSH
66588: LD_INT 3
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: LIST
66595: PUSH
66596: LD_VAR 0 1
66600: PUSH
66601: LD_INT 3
66603: MINUS
66604: PUSH
66605: LD_VAR 0 2
66609: PUSH
66610: LD_INT 3
66612: MINUS
66613: PUSH
66614: LD_INT 2
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: LIST
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: ST_TO_ADDR
// end ; 4 :
66629: GO 66910
66631: LD_INT 4
66633: DOUBLE
66634: EQUAL
66635: IFTRUE 66639
66637: GO 66772
66639: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66640: LD_ADDR_VAR 0 5
66644: PUSH
66645: LD_VAR 0 1
66649: PUSH
66650: LD_VAR 0 2
66654: PUSH
66655: LD_INT 4
66657: PLUS
66658: PUSH
66659: LD_INT 0
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: LIST
66666: PUSH
66667: LD_VAR 0 1
66671: PUSH
66672: LD_INT 3
66674: PLUS
66675: PUSH
66676: LD_VAR 0 2
66680: PUSH
66681: LD_INT 3
66683: PLUS
66684: PUSH
66685: LD_INT 5
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: LIST
66692: PUSH
66693: LD_VAR 0 1
66697: PUSH
66698: LD_INT 4
66700: PLUS
66701: PUSH
66702: LD_VAR 0 2
66706: PUSH
66707: LD_INT 4
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: LIST
66714: PUSH
66715: LD_VAR 0 1
66719: PUSH
66720: LD_VAR 0 2
66724: PUSH
66725: LD_INT 3
66727: MINUS
66728: PUSH
66729: LD_INT 3
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: LIST
66736: PUSH
66737: LD_VAR 0 1
66741: PUSH
66742: LD_INT 4
66744: MINUS
66745: PUSH
66746: LD_VAR 0 2
66750: PUSH
66751: LD_INT 4
66753: MINUS
66754: PUSH
66755: LD_INT 2
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: LIST
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: ST_TO_ADDR
// end ; 5 :
66770: GO 66910
66772: LD_INT 5
66774: DOUBLE
66775: EQUAL
66776: IFTRUE 66780
66778: GO 66909
66780: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66781: LD_ADDR_VAR 0 5
66785: PUSH
66786: LD_VAR 0 1
66790: PUSH
66791: LD_INT 4
66793: MINUS
66794: PUSH
66795: LD_VAR 0 2
66799: PUSH
66800: LD_INT 1
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: LIST
66807: PUSH
66808: LD_VAR 0 1
66812: PUSH
66813: LD_VAR 0 2
66817: PUSH
66818: LD_INT 4
66820: MINUS
66821: PUSH
66822: LD_INT 3
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: LIST
66829: PUSH
66830: LD_VAR 0 1
66834: PUSH
66835: LD_INT 4
66837: PLUS
66838: PUSH
66839: LD_VAR 0 2
66843: PUSH
66844: LD_INT 4
66846: PLUS
66847: PUSH
66848: LD_INT 5
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: LIST
66855: PUSH
66856: LD_VAR 0 1
66860: PUSH
66861: LD_INT 3
66863: PLUS
66864: PUSH
66865: LD_VAR 0 2
66869: PUSH
66870: LD_INT 4
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: LIST
66877: PUSH
66878: LD_VAR 0 1
66882: PUSH
66883: LD_VAR 0 2
66887: PUSH
66888: LD_INT 3
66890: PLUS
66891: PUSH
66892: LD_INT 0
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: LIST
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: ST_TO_ADDR
// end ; end ;
66907: GO 66910
66909: POP
// result := list ;
66910: LD_ADDR_VAR 0 4
66914: PUSH
66915: LD_VAR 0 5
66919: ST_TO_ADDR
// end ;
66920: LD_VAR 0 4
66924: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66925: LD_INT 0
66927: PPUSH
66928: PPUSH
66929: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66930: LD_VAR 0 1
66934: NOT
66935: PUSH
66936: LD_VAR 0 2
66940: PUSH
66941: LD_INT 1
66943: PUSH
66944: LD_INT 2
66946: PUSH
66947: LD_INT 3
66949: PUSH
66950: LD_INT 4
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: IN
66959: NOT
66960: OR
66961: IFFALSE 66965
// exit ;
66963: GO 67057
// tmp := [ ] ;
66965: LD_ADDR_VAR 0 5
66969: PUSH
66970: EMPTY
66971: ST_TO_ADDR
// for i in units do
66972: LD_ADDR_VAR 0 4
66976: PUSH
66977: LD_VAR 0 1
66981: PUSH
66982: FOR_IN
66983: IFFALSE 67026
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66985: LD_ADDR_VAR 0 5
66989: PUSH
66990: LD_VAR 0 5
66994: PPUSH
66995: LD_VAR 0 5
66999: PUSH
67000: LD_INT 1
67002: PLUS
67003: PPUSH
67004: LD_VAR 0 4
67008: PPUSH
67009: LD_VAR 0 2
67013: PPUSH
67014: CALL_OW 259
67018: PPUSH
67019: CALL_OW 2
67023: ST_TO_ADDR
67024: GO 66982
67026: POP
67027: POP
// if not tmp then
67028: LD_VAR 0 5
67032: NOT
67033: IFFALSE 67037
// exit ;
67035: GO 67057
// result := SortListByListDesc ( units , tmp ) ;
67037: LD_ADDR_VAR 0 3
67041: PUSH
67042: LD_VAR 0 1
67046: PPUSH
67047: LD_VAR 0 5
67051: PPUSH
67052: CALL_OW 77
67056: ST_TO_ADDR
// end ;
67057: LD_VAR 0 3
67061: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67062: LD_INT 0
67064: PPUSH
67065: PPUSH
67066: PPUSH
// result := false ;
67067: LD_ADDR_VAR 0 3
67071: PUSH
67072: LD_INT 0
67074: ST_TO_ADDR
// x := GetX ( building ) ;
67075: LD_ADDR_VAR 0 4
67079: PUSH
67080: LD_VAR 0 2
67084: PPUSH
67085: CALL_OW 250
67089: ST_TO_ADDR
// y := GetY ( building ) ;
67090: LD_ADDR_VAR 0 5
67094: PUSH
67095: LD_VAR 0 2
67099: PPUSH
67100: CALL_OW 251
67104: ST_TO_ADDR
// if not building or not x or not y then
67105: LD_VAR 0 2
67109: NOT
67110: PUSH
67111: LD_VAR 0 4
67115: NOT
67116: OR
67117: PUSH
67118: LD_VAR 0 5
67122: NOT
67123: OR
67124: IFFALSE 67128
// exit ;
67126: GO 67220
// if GetTaskList ( unit ) then
67128: LD_VAR 0 1
67132: PPUSH
67133: CALL_OW 437
67137: IFFALSE 67220
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67139: LD_STRING e
67141: PUSH
67142: LD_VAR 0 1
67146: PPUSH
67147: CALL_OW 437
67151: PUSH
67152: LD_INT 1
67154: ARRAY
67155: PUSH
67156: LD_INT 1
67158: ARRAY
67159: EQUAL
67160: PUSH
67161: LD_VAR 0 4
67165: PUSH
67166: LD_VAR 0 1
67170: PPUSH
67171: CALL_OW 437
67175: PUSH
67176: LD_INT 1
67178: ARRAY
67179: PUSH
67180: LD_INT 2
67182: ARRAY
67183: EQUAL
67184: AND
67185: PUSH
67186: LD_VAR 0 5
67190: PUSH
67191: LD_VAR 0 1
67195: PPUSH
67196: CALL_OW 437
67200: PUSH
67201: LD_INT 1
67203: ARRAY
67204: PUSH
67205: LD_INT 3
67207: ARRAY
67208: EQUAL
67209: AND
67210: IFFALSE 67220
// result := true end ;
67212: LD_ADDR_VAR 0 3
67216: PUSH
67217: LD_INT 1
67219: ST_TO_ADDR
// end ;
67220: LD_VAR 0 3
67224: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67225: LD_INT 0
67227: PPUSH
// result := false ;
67228: LD_ADDR_VAR 0 4
67232: PUSH
67233: LD_INT 0
67235: ST_TO_ADDR
// if GetTaskList ( unit ) then
67236: LD_VAR 0 1
67240: PPUSH
67241: CALL_OW 437
67245: IFFALSE 67328
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67247: LD_STRING M
67249: PUSH
67250: LD_VAR 0 1
67254: PPUSH
67255: CALL_OW 437
67259: PUSH
67260: LD_INT 1
67262: ARRAY
67263: PUSH
67264: LD_INT 1
67266: ARRAY
67267: EQUAL
67268: PUSH
67269: LD_VAR 0 2
67273: PUSH
67274: LD_VAR 0 1
67278: PPUSH
67279: CALL_OW 437
67283: PUSH
67284: LD_INT 1
67286: ARRAY
67287: PUSH
67288: LD_INT 2
67290: ARRAY
67291: EQUAL
67292: AND
67293: PUSH
67294: LD_VAR 0 3
67298: PUSH
67299: LD_VAR 0 1
67303: PPUSH
67304: CALL_OW 437
67308: PUSH
67309: LD_INT 1
67311: ARRAY
67312: PUSH
67313: LD_INT 3
67315: ARRAY
67316: EQUAL
67317: AND
67318: IFFALSE 67328
// result := true ;
67320: LD_ADDR_VAR 0 4
67324: PUSH
67325: LD_INT 1
67327: ST_TO_ADDR
// end ; end ;
67328: LD_VAR 0 4
67332: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67333: LD_INT 0
67335: PPUSH
67336: PPUSH
67337: PPUSH
67338: PPUSH
// if not unit or not area then
67339: LD_VAR 0 1
67343: NOT
67344: PUSH
67345: LD_VAR 0 2
67349: NOT
67350: OR
67351: IFFALSE 67355
// exit ;
67353: GO 67519
// tmp := AreaToList ( area , i ) ;
67355: LD_ADDR_VAR 0 6
67359: PUSH
67360: LD_VAR 0 2
67364: PPUSH
67365: LD_VAR 0 5
67369: PPUSH
67370: CALL_OW 517
67374: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67375: LD_ADDR_VAR 0 5
67379: PUSH
67380: DOUBLE
67381: LD_INT 1
67383: DEC
67384: ST_TO_ADDR
67385: LD_VAR 0 6
67389: PUSH
67390: LD_INT 1
67392: ARRAY
67393: PUSH
67394: FOR_TO
67395: IFFALSE 67517
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67397: LD_ADDR_VAR 0 7
67401: PUSH
67402: LD_VAR 0 6
67406: PUSH
67407: LD_INT 1
67409: ARRAY
67410: PUSH
67411: LD_VAR 0 5
67415: ARRAY
67416: PUSH
67417: LD_VAR 0 6
67421: PUSH
67422: LD_INT 2
67424: ARRAY
67425: PUSH
67426: LD_VAR 0 5
67430: ARRAY
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67436: LD_VAR 0 7
67440: PUSH
67441: LD_INT 1
67443: ARRAY
67444: PPUSH
67445: LD_VAR 0 7
67449: PUSH
67450: LD_INT 2
67452: ARRAY
67453: PPUSH
67454: CALL_OW 428
67458: PUSH
67459: LD_INT 0
67461: EQUAL
67462: IFFALSE 67515
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67464: LD_VAR 0 1
67468: PPUSH
67469: LD_VAR 0 7
67473: PUSH
67474: LD_INT 1
67476: ARRAY
67477: PPUSH
67478: LD_VAR 0 7
67482: PUSH
67483: LD_INT 2
67485: ARRAY
67486: PPUSH
67487: LD_VAR 0 3
67491: PPUSH
67492: CALL_OW 48
// result := IsPlaced ( unit ) ;
67496: LD_ADDR_VAR 0 4
67500: PUSH
67501: LD_VAR 0 1
67505: PPUSH
67506: CALL_OW 305
67510: ST_TO_ADDR
// exit ;
67511: POP
67512: POP
67513: GO 67519
// end ; end ;
67515: GO 67394
67517: POP
67518: POP
// end ;
67519: LD_VAR 0 4
67523: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67524: LD_INT 0
67526: PPUSH
67527: PPUSH
67528: PPUSH
// if not side or side > 8 then
67529: LD_VAR 0 1
67533: NOT
67534: PUSH
67535: LD_VAR 0 1
67539: PUSH
67540: LD_INT 8
67542: GREATER
67543: OR
67544: IFFALSE 67548
// exit ;
67546: GO 67735
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67548: LD_ADDR_VAR 0 4
67552: PUSH
67553: LD_INT 22
67555: PUSH
67556: LD_VAR 0 1
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 21
67567: PUSH
67568: LD_INT 3
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PPUSH
67579: CALL_OW 69
67583: ST_TO_ADDR
// if not tmp then
67584: LD_VAR 0 4
67588: NOT
67589: IFFALSE 67593
// exit ;
67591: GO 67735
// enable_addtolog := true ;
67593: LD_ADDR_OWVAR 81
67597: PUSH
67598: LD_INT 1
67600: ST_TO_ADDR
// AddToLog ( [ ) ;
67601: LD_STRING [
67603: PPUSH
67604: CALL_OW 561
// for i in tmp do
67608: LD_ADDR_VAR 0 3
67612: PUSH
67613: LD_VAR 0 4
67617: PUSH
67618: FOR_IN
67619: IFFALSE 67726
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67621: LD_STRING [
67623: PUSH
67624: LD_VAR 0 3
67628: PPUSH
67629: CALL_OW 266
67633: STR
67634: PUSH
67635: LD_STRING , 
67637: STR
67638: PUSH
67639: LD_VAR 0 3
67643: PPUSH
67644: CALL_OW 250
67648: STR
67649: PUSH
67650: LD_STRING , 
67652: STR
67653: PUSH
67654: LD_VAR 0 3
67658: PPUSH
67659: CALL_OW 251
67663: STR
67664: PUSH
67665: LD_STRING , 
67667: STR
67668: PUSH
67669: LD_VAR 0 3
67673: PPUSH
67674: CALL_OW 254
67678: STR
67679: PUSH
67680: LD_STRING , 
67682: STR
67683: PUSH
67684: LD_VAR 0 3
67688: PPUSH
67689: LD_INT 1
67691: PPUSH
67692: CALL_OW 268
67696: STR
67697: PUSH
67698: LD_STRING , 
67700: STR
67701: PUSH
67702: LD_VAR 0 3
67706: PPUSH
67707: LD_INT 2
67709: PPUSH
67710: CALL_OW 268
67714: STR
67715: PUSH
67716: LD_STRING ],
67718: STR
67719: PPUSH
67720: CALL_OW 561
// end ;
67724: GO 67618
67726: POP
67727: POP
// AddToLog ( ]; ) ;
67728: LD_STRING ];
67730: PPUSH
67731: CALL_OW 561
// end ;
67735: LD_VAR 0 2
67739: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67740: LD_INT 0
67742: PPUSH
67743: PPUSH
67744: PPUSH
67745: PPUSH
67746: PPUSH
// if not area or not rate or not max then
67747: LD_VAR 0 1
67751: NOT
67752: PUSH
67753: LD_VAR 0 2
67757: NOT
67758: OR
67759: PUSH
67760: LD_VAR 0 4
67764: NOT
67765: OR
67766: IFFALSE 67770
// exit ;
67768: GO 67962
// while 1 do
67770: LD_INT 1
67772: IFFALSE 67962
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67774: LD_ADDR_VAR 0 9
67778: PUSH
67779: LD_VAR 0 1
67783: PPUSH
67784: LD_INT 1
67786: PPUSH
67787: CALL_OW 287
67791: PUSH
67792: LD_INT 10
67794: MUL
67795: ST_TO_ADDR
// r := rate / 10 ;
67796: LD_ADDR_VAR 0 7
67800: PUSH
67801: LD_VAR 0 2
67805: PUSH
67806: LD_INT 10
67808: DIVREAL
67809: ST_TO_ADDR
// time := 1 1$00 ;
67810: LD_ADDR_VAR 0 8
67814: PUSH
67815: LD_INT 2100
67817: ST_TO_ADDR
// if amount < min then
67818: LD_VAR 0 9
67822: PUSH
67823: LD_VAR 0 3
67827: LESS
67828: IFFALSE 67846
// r := r * 2 else
67830: LD_ADDR_VAR 0 7
67834: PUSH
67835: LD_VAR 0 7
67839: PUSH
67840: LD_INT 2
67842: MUL
67843: ST_TO_ADDR
67844: GO 67872
// if amount > max then
67846: LD_VAR 0 9
67850: PUSH
67851: LD_VAR 0 4
67855: GREATER
67856: IFFALSE 67872
// r := r / 2 ;
67858: LD_ADDR_VAR 0 7
67862: PUSH
67863: LD_VAR 0 7
67867: PUSH
67868: LD_INT 2
67870: DIVREAL
67871: ST_TO_ADDR
// time := time / r ;
67872: LD_ADDR_VAR 0 8
67876: PUSH
67877: LD_VAR 0 8
67881: PUSH
67882: LD_VAR 0 7
67886: DIVREAL
67887: ST_TO_ADDR
// if time < 0 then
67888: LD_VAR 0 8
67892: PUSH
67893: LD_INT 0
67895: LESS
67896: IFFALSE 67913
// time := time * - 1 ;
67898: LD_ADDR_VAR 0 8
67902: PUSH
67903: LD_VAR 0 8
67907: PUSH
67908: LD_INT 1
67910: NEG
67911: MUL
67912: ST_TO_ADDR
// wait ( time ) ;
67913: LD_VAR 0 8
67917: PPUSH
67918: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
67922: LD_INT 35
67924: PPUSH
67925: LD_INT 875
67927: PPUSH
67928: CALL_OW 12
67932: PPUSH
67933: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67937: LD_INT 1
67939: PPUSH
67940: LD_INT 5
67942: PPUSH
67943: CALL_OW 12
67947: PPUSH
67948: LD_VAR 0 1
67952: PPUSH
67953: LD_INT 1
67955: PPUSH
67956: CALL_OW 55
// end ;
67960: GO 67770
// end ;
67962: LD_VAR 0 5
67966: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67967: LD_INT 0
67969: PPUSH
67970: PPUSH
67971: PPUSH
67972: PPUSH
67973: PPUSH
67974: PPUSH
67975: PPUSH
67976: PPUSH
// if not turrets or not factories then
67977: LD_VAR 0 1
67981: NOT
67982: PUSH
67983: LD_VAR 0 2
67987: NOT
67988: OR
67989: IFFALSE 67993
// exit ;
67991: GO 68300
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67993: LD_ADDR_VAR 0 10
67997: PUSH
67998: LD_INT 5
68000: PUSH
68001: LD_INT 6
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 2
68010: PUSH
68011: LD_INT 4
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 3
68020: PUSH
68021: LD_INT 5
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 24
68035: PUSH
68036: LD_INT 25
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 23
68045: PUSH
68046: LD_INT 27
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 42
68059: PUSH
68060: LD_INT 43
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 44
68069: PUSH
68070: LD_INT 46
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 45
68079: PUSH
68080: LD_INT 47
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: LIST
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: LIST
68096: ST_TO_ADDR
// result := [ ] ;
68097: LD_ADDR_VAR 0 3
68101: PUSH
68102: EMPTY
68103: ST_TO_ADDR
// for i in turrets do
68104: LD_ADDR_VAR 0 4
68108: PUSH
68109: LD_VAR 0 1
68113: PUSH
68114: FOR_IN
68115: IFFALSE 68298
// begin nat := GetNation ( i ) ;
68117: LD_ADDR_VAR 0 7
68121: PUSH
68122: LD_VAR 0 4
68126: PPUSH
68127: CALL_OW 248
68131: ST_TO_ADDR
// weapon := 0 ;
68132: LD_ADDR_VAR 0 8
68136: PUSH
68137: LD_INT 0
68139: ST_TO_ADDR
// if not nat then
68140: LD_VAR 0 7
68144: NOT
68145: IFFALSE 68149
// continue ;
68147: GO 68114
// for j in list [ nat ] do
68149: LD_ADDR_VAR 0 5
68153: PUSH
68154: LD_VAR 0 10
68158: PUSH
68159: LD_VAR 0 7
68163: ARRAY
68164: PUSH
68165: FOR_IN
68166: IFFALSE 68207
// if GetBWeapon ( i ) = j [ 1 ] then
68168: LD_VAR 0 4
68172: PPUSH
68173: CALL_OW 269
68177: PUSH
68178: LD_VAR 0 5
68182: PUSH
68183: LD_INT 1
68185: ARRAY
68186: EQUAL
68187: IFFALSE 68205
// begin weapon := j [ 2 ] ;
68189: LD_ADDR_VAR 0 8
68193: PUSH
68194: LD_VAR 0 5
68198: PUSH
68199: LD_INT 2
68201: ARRAY
68202: ST_TO_ADDR
// break ;
68203: GO 68207
// end ;
68205: GO 68165
68207: POP
68208: POP
// if not weapon then
68209: LD_VAR 0 8
68213: NOT
68214: IFFALSE 68218
// continue ;
68216: GO 68114
// for k in factories do
68218: LD_ADDR_VAR 0 6
68222: PUSH
68223: LD_VAR 0 2
68227: PUSH
68228: FOR_IN
68229: IFFALSE 68294
// begin weapons := AvailableWeaponList ( k ) ;
68231: LD_ADDR_VAR 0 9
68235: PUSH
68236: LD_VAR 0 6
68240: PPUSH
68241: CALL_OW 478
68245: ST_TO_ADDR
// if not weapons then
68246: LD_VAR 0 9
68250: NOT
68251: IFFALSE 68255
// continue ;
68253: GO 68228
// if weapon in weapons then
68255: LD_VAR 0 8
68259: PUSH
68260: LD_VAR 0 9
68264: IN
68265: IFFALSE 68292
// begin result := [ i , weapon ] ;
68267: LD_ADDR_VAR 0 3
68271: PUSH
68272: LD_VAR 0 4
68276: PUSH
68277: LD_VAR 0 8
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: ST_TO_ADDR
// exit ;
68286: POP
68287: POP
68288: POP
68289: POP
68290: GO 68300
// end ; end ;
68292: GO 68228
68294: POP
68295: POP
// end ;
68296: GO 68114
68298: POP
68299: POP
// end ;
68300: LD_VAR 0 3
68304: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68305: LD_INT 0
68307: PPUSH
// if not side or side > 8 then
68308: LD_VAR 0 3
68312: NOT
68313: PUSH
68314: LD_VAR 0 3
68318: PUSH
68319: LD_INT 8
68321: GREATER
68322: OR
68323: IFFALSE 68327
// exit ;
68325: GO 68386
// if not range then
68327: LD_VAR 0 4
68331: NOT
68332: IFFALSE 68343
// range := - 12 ;
68334: LD_ADDR_VAR 0 4
68338: PUSH
68339: LD_INT 12
68341: NEG
68342: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68343: LD_VAR 0 1
68347: PPUSH
68348: LD_VAR 0 2
68352: PPUSH
68353: LD_VAR 0 3
68357: PPUSH
68358: LD_VAR 0 4
68362: PPUSH
68363: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68367: LD_VAR 0 1
68371: PPUSH
68372: LD_VAR 0 2
68376: PPUSH
68377: LD_VAR 0 3
68381: PPUSH
68382: CALL_OW 331
// end ;
68386: LD_VAR 0 5
68390: RET
// export function Video ( mode ) ; begin
68391: LD_INT 0
68393: PPUSH
// ingame_video = mode ;
68394: LD_ADDR_OWVAR 52
68398: PUSH
68399: LD_VAR 0 1
68403: ST_TO_ADDR
// interface_hidden = mode ;
68404: LD_ADDR_OWVAR 54
68408: PUSH
68409: LD_VAR 0 1
68413: ST_TO_ADDR
// end ;
68414: LD_VAR 0 2
68418: RET
// export function Join ( array , element ) ; begin
68419: LD_INT 0
68421: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68422: LD_ADDR_VAR 0 3
68426: PUSH
68427: LD_VAR 0 1
68431: PPUSH
68432: LD_VAR 0 1
68436: PUSH
68437: LD_INT 1
68439: PLUS
68440: PPUSH
68441: LD_VAR 0 2
68445: PPUSH
68446: CALL_OW 1
68450: ST_TO_ADDR
// end ;
68451: LD_VAR 0 3
68455: RET
// export function JoinUnion ( array , element ) ; begin
68456: LD_INT 0
68458: PPUSH
// result := array union element ;
68459: LD_ADDR_VAR 0 3
68463: PUSH
68464: LD_VAR 0 1
68468: PUSH
68469: LD_VAR 0 2
68473: UNION
68474: ST_TO_ADDR
// end ;
68475: LD_VAR 0 3
68479: RET
// export function GetBehemoths ( side ) ; begin
68480: LD_INT 0
68482: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68483: LD_ADDR_VAR 0 2
68487: PUSH
68488: LD_INT 22
68490: PUSH
68491: LD_VAR 0 1
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 31
68502: PUSH
68503: LD_INT 25
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PPUSH
68514: CALL_OW 69
68518: ST_TO_ADDR
// end ;
68519: LD_VAR 0 2
68523: RET
// export function Shuffle ( array ) ; var i , index ; begin
68524: LD_INT 0
68526: PPUSH
68527: PPUSH
68528: PPUSH
// result := [ ] ;
68529: LD_ADDR_VAR 0 2
68533: PUSH
68534: EMPTY
68535: ST_TO_ADDR
// if not array then
68536: LD_VAR 0 1
68540: NOT
68541: IFFALSE 68545
// exit ;
68543: GO 68644
// Randomize ;
68545: CALL_OW 10
// for i = array downto 1 do
68549: LD_ADDR_VAR 0 3
68553: PUSH
68554: DOUBLE
68555: LD_VAR 0 1
68559: INC
68560: ST_TO_ADDR
68561: LD_INT 1
68563: PUSH
68564: FOR_DOWNTO
68565: IFFALSE 68642
// begin index := rand ( 1 , array ) ;
68567: LD_ADDR_VAR 0 4
68571: PUSH
68572: LD_INT 1
68574: PPUSH
68575: LD_VAR 0 1
68579: PPUSH
68580: CALL_OW 12
68584: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68585: LD_ADDR_VAR 0 2
68589: PUSH
68590: LD_VAR 0 2
68594: PPUSH
68595: LD_VAR 0 2
68599: PUSH
68600: LD_INT 1
68602: PLUS
68603: PPUSH
68604: LD_VAR 0 1
68608: PUSH
68609: LD_VAR 0 4
68613: ARRAY
68614: PPUSH
68615: CALL_OW 2
68619: ST_TO_ADDR
// array := Delete ( array , index ) ;
68620: LD_ADDR_VAR 0 1
68624: PUSH
68625: LD_VAR 0 1
68629: PPUSH
68630: LD_VAR 0 4
68634: PPUSH
68635: CALL_OW 3
68639: ST_TO_ADDR
// end ;
68640: GO 68564
68642: POP
68643: POP
// end ;
68644: LD_VAR 0 2
68648: RET
// export function GetBaseMaterials ( base ) ; begin
68649: LD_INT 0
68651: PPUSH
// result := [ 0 , 0 , 0 ] ;
68652: LD_ADDR_VAR 0 2
68656: PUSH
68657: LD_INT 0
68659: PUSH
68660: LD_INT 0
68662: PUSH
68663: LD_INT 0
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: LIST
68670: ST_TO_ADDR
// if not base then
68671: LD_VAR 0 1
68675: NOT
68676: IFFALSE 68680
// exit ;
68678: GO 68729
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68680: LD_ADDR_VAR 0 2
68684: PUSH
68685: LD_VAR 0 1
68689: PPUSH
68690: LD_INT 1
68692: PPUSH
68693: CALL_OW 275
68697: PUSH
68698: LD_VAR 0 1
68702: PPUSH
68703: LD_INT 2
68705: PPUSH
68706: CALL_OW 275
68710: PUSH
68711: LD_VAR 0 1
68715: PPUSH
68716: LD_INT 3
68718: PPUSH
68719: CALL_OW 275
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: LIST
68728: ST_TO_ADDR
// end ;
68729: LD_VAR 0 2
68733: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68734: LD_INT 0
68736: PPUSH
68737: PPUSH
// result := array ;
68738: LD_ADDR_VAR 0 3
68742: PUSH
68743: LD_VAR 0 1
68747: ST_TO_ADDR
// if size > 0 then
68748: LD_VAR 0 2
68752: PUSH
68753: LD_INT 0
68755: GREATER
68756: IFFALSE 68802
// for i := array downto size do
68758: LD_ADDR_VAR 0 4
68762: PUSH
68763: DOUBLE
68764: LD_VAR 0 1
68768: INC
68769: ST_TO_ADDR
68770: LD_VAR 0 2
68774: PUSH
68775: FOR_DOWNTO
68776: IFFALSE 68800
// result := Delete ( result , result ) ;
68778: LD_ADDR_VAR 0 3
68782: PUSH
68783: LD_VAR 0 3
68787: PPUSH
68788: LD_VAR 0 3
68792: PPUSH
68793: CALL_OW 3
68797: ST_TO_ADDR
68798: GO 68775
68800: POP
68801: POP
// end ;
68802: LD_VAR 0 3
68806: RET
// export function ComExit ( unit ) ; var tmp ; begin
68807: LD_INT 0
68809: PPUSH
68810: PPUSH
// if not IsInUnit ( unit ) then
68811: LD_VAR 0 1
68815: PPUSH
68816: CALL_OW 310
68820: NOT
68821: IFFALSE 68825
// exit ;
68823: GO 68885
// tmp := IsInUnit ( unit ) ;
68825: LD_ADDR_VAR 0 3
68829: PUSH
68830: LD_VAR 0 1
68834: PPUSH
68835: CALL_OW 310
68839: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68840: LD_VAR 0 3
68844: PPUSH
68845: CALL_OW 247
68849: PUSH
68850: LD_INT 2
68852: EQUAL
68853: IFFALSE 68866
// ComExitVehicle ( unit ) else
68855: LD_VAR 0 1
68859: PPUSH
68860: CALL_OW 121
68864: GO 68875
// ComExitBuilding ( unit ) ;
68866: LD_VAR 0 1
68870: PPUSH
68871: CALL_OW 122
// result := tmp ;
68875: LD_ADDR_VAR 0 2
68879: PUSH
68880: LD_VAR 0 3
68884: ST_TO_ADDR
// end ;
68885: LD_VAR 0 2
68889: RET
// export function ComExitAll ( units ) ; var i ; begin
68890: LD_INT 0
68892: PPUSH
68893: PPUSH
// if not units then
68894: LD_VAR 0 1
68898: NOT
68899: IFFALSE 68903
// exit ;
68901: GO 68929
// for i in units do
68903: LD_ADDR_VAR 0 3
68907: PUSH
68908: LD_VAR 0 1
68912: PUSH
68913: FOR_IN
68914: IFFALSE 68927
// ComExit ( i ) ;
68916: LD_VAR 0 3
68920: PPUSH
68921: CALL 68807 0 1
68925: GO 68913
68927: POP
68928: POP
// end ;
68929: LD_VAR 0 2
68933: RET
// export function ResetHc ; begin
68934: LD_INT 0
68936: PPUSH
// InitHc ;
68937: CALL_OW 19
// hc_importance := 0 ;
68941: LD_ADDR_OWVAR 32
68945: PUSH
68946: LD_INT 0
68948: ST_TO_ADDR
// end ;
68949: LD_VAR 0 1
68953: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68954: LD_INT 0
68956: PPUSH
68957: PPUSH
68958: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68959: LD_ADDR_VAR 0 6
68963: PUSH
68964: LD_VAR 0 1
68968: PUSH
68969: LD_VAR 0 3
68973: PLUS
68974: PUSH
68975: LD_INT 2
68977: DIV
68978: ST_TO_ADDR
// if _x < 0 then
68979: LD_VAR 0 6
68983: PUSH
68984: LD_INT 0
68986: LESS
68987: IFFALSE 69004
// _x := _x * - 1 ;
68989: LD_ADDR_VAR 0 6
68993: PUSH
68994: LD_VAR 0 6
68998: PUSH
68999: LD_INT 1
69001: NEG
69002: MUL
69003: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69004: LD_ADDR_VAR 0 7
69008: PUSH
69009: LD_VAR 0 2
69013: PUSH
69014: LD_VAR 0 4
69018: PLUS
69019: PUSH
69020: LD_INT 2
69022: DIV
69023: ST_TO_ADDR
// if _y < 0 then
69024: LD_VAR 0 7
69028: PUSH
69029: LD_INT 0
69031: LESS
69032: IFFALSE 69049
// _y := _y * - 1 ;
69034: LD_ADDR_VAR 0 7
69038: PUSH
69039: LD_VAR 0 7
69043: PUSH
69044: LD_INT 1
69046: NEG
69047: MUL
69048: ST_TO_ADDR
// result := [ _x , _y ] ;
69049: LD_ADDR_VAR 0 5
69053: PUSH
69054: LD_VAR 0 6
69058: PUSH
69059: LD_VAR 0 7
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: ST_TO_ADDR
// end ;
69068: LD_VAR 0 5
69072: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69073: LD_INT 0
69075: PPUSH
69076: PPUSH
69077: PPUSH
69078: PPUSH
// task := GetTaskList ( unit ) ;
69079: LD_ADDR_VAR 0 7
69083: PUSH
69084: LD_VAR 0 1
69088: PPUSH
69089: CALL_OW 437
69093: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69094: LD_VAR 0 7
69098: NOT
69099: PUSH
69100: LD_VAR 0 1
69104: PPUSH
69105: LD_VAR 0 2
69109: PPUSH
69110: CALL_OW 308
69114: NOT
69115: AND
69116: IFFALSE 69120
// exit ;
69118: GO 69238
// if IsInArea ( unit , area ) then
69120: LD_VAR 0 1
69124: PPUSH
69125: LD_VAR 0 2
69129: PPUSH
69130: CALL_OW 308
69134: IFFALSE 69152
// begin ComMoveToArea ( unit , goAway ) ;
69136: LD_VAR 0 1
69140: PPUSH
69141: LD_VAR 0 3
69145: PPUSH
69146: CALL_OW 113
// exit ;
69150: GO 69238
// end ; if task [ 1 ] [ 1 ] <> M then
69152: LD_VAR 0 7
69156: PUSH
69157: LD_INT 1
69159: ARRAY
69160: PUSH
69161: LD_INT 1
69163: ARRAY
69164: PUSH
69165: LD_STRING M
69167: NONEQUAL
69168: IFFALSE 69172
// exit ;
69170: GO 69238
// x := task [ 1 ] [ 2 ] ;
69172: LD_ADDR_VAR 0 5
69176: PUSH
69177: LD_VAR 0 7
69181: PUSH
69182: LD_INT 1
69184: ARRAY
69185: PUSH
69186: LD_INT 2
69188: ARRAY
69189: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69190: LD_ADDR_VAR 0 6
69194: PUSH
69195: LD_VAR 0 7
69199: PUSH
69200: LD_INT 1
69202: ARRAY
69203: PUSH
69204: LD_INT 3
69206: ARRAY
69207: ST_TO_ADDR
// if InArea ( x , y , area ) then
69208: LD_VAR 0 5
69212: PPUSH
69213: LD_VAR 0 6
69217: PPUSH
69218: LD_VAR 0 2
69222: PPUSH
69223: CALL_OW 309
69227: IFFALSE 69238
// ComStop ( unit ) ;
69229: LD_VAR 0 1
69233: PPUSH
69234: CALL_OW 141
// end ;
69238: LD_VAR 0 4
69242: RET
// export function Abs ( value ) ; begin
69243: LD_INT 0
69245: PPUSH
// result := value ;
69246: LD_ADDR_VAR 0 2
69250: PUSH
69251: LD_VAR 0 1
69255: ST_TO_ADDR
// if value < 0 then
69256: LD_VAR 0 1
69260: PUSH
69261: LD_INT 0
69263: LESS
69264: IFFALSE 69281
// result := value * - 1 ;
69266: LD_ADDR_VAR 0 2
69270: PUSH
69271: LD_VAR 0 1
69275: PUSH
69276: LD_INT 1
69278: NEG
69279: MUL
69280: ST_TO_ADDR
// end ;
69281: LD_VAR 0 2
69285: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69286: LD_INT 0
69288: PPUSH
69289: PPUSH
69290: PPUSH
69291: PPUSH
69292: PPUSH
69293: PPUSH
69294: PPUSH
69295: PPUSH
// if not unit or not building then
69296: LD_VAR 0 1
69300: NOT
69301: PUSH
69302: LD_VAR 0 2
69306: NOT
69307: OR
69308: IFFALSE 69312
// exit ;
69310: GO 69538
// x := GetX ( building ) ;
69312: LD_ADDR_VAR 0 4
69316: PUSH
69317: LD_VAR 0 2
69321: PPUSH
69322: CALL_OW 250
69326: ST_TO_ADDR
// y := GetY ( building ) ;
69327: LD_ADDR_VAR 0 6
69331: PUSH
69332: LD_VAR 0 2
69336: PPUSH
69337: CALL_OW 251
69341: ST_TO_ADDR
// d := GetDir ( building ) ;
69342: LD_ADDR_VAR 0 8
69346: PUSH
69347: LD_VAR 0 2
69351: PPUSH
69352: CALL_OW 254
69356: ST_TO_ADDR
// r := 4 ;
69357: LD_ADDR_VAR 0 9
69361: PUSH
69362: LD_INT 4
69364: ST_TO_ADDR
// for i := 1 to 5 do
69365: LD_ADDR_VAR 0 10
69369: PUSH
69370: DOUBLE
69371: LD_INT 1
69373: DEC
69374: ST_TO_ADDR
69375: LD_INT 5
69377: PUSH
69378: FOR_TO
69379: IFFALSE 69536
// begin _x := ShiftX ( x , d , r + i ) ;
69381: LD_ADDR_VAR 0 5
69385: PUSH
69386: LD_VAR 0 4
69390: PPUSH
69391: LD_VAR 0 8
69395: PPUSH
69396: LD_VAR 0 9
69400: PUSH
69401: LD_VAR 0 10
69405: PLUS
69406: PPUSH
69407: CALL_OW 272
69411: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69412: LD_ADDR_VAR 0 7
69416: PUSH
69417: LD_VAR 0 6
69421: PPUSH
69422: LD_VAR 0 8
69426: PPUSH
69427: LD_VAR 0 9
69431: PUSH
69432: LD_VAR 0 10
69436: PLUS
69437: PPUSH
69438: CALL_OW 273
69442: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69443: LD_VAR 0 5
69447: PPUSH
69448: LD_VAR 0 7
69452: PPUSH
69453: CALL_OW 488
69457: PUSH
69458: LD_VAR 0 5
69462: PPUSH
69463: LD_VAR 0 7
69467: PPUSH
69468: CALL_OW 428
69472: PPUSH
69473: CALL_OW 247
69477: PUSH
69478: LD_INT 3
69480: PUSH
69481: LD_INT 2
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: IN
69488: NOT
69489: AND
69490: IFFALSE 69534
// begin ComMoveXY ( unit , _x , _y ) ;
69492: LD_VAR 0 1
69496: PPUSH
69497: LD_VAR 0 5
69501: PPUSH
69502: LD_VAR 0 7
69506: PPUSH
69507: CALL_OW 111
// result := [ _x , _y ] ;
69511: LD_ADDR_VAR 0 3
69515: PUSH
69516: LD_VAR 0 5
69520: PUSH
69521: LD_VAR 0 7
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: ST_TO_ADDR
// exit ;
69530: POP
69531: POP
69532: GO 69538
// end ; end ;
69534: GO 69378
69536: POP
69537: POP
// end ;
69538: LD_VAR 0 3
69542: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69543: LD_INT 0
69545: PPUSH
69546: PPUSH
69547: PPUSH
// result := 0 ;
69548: LD_ADDR_VAR 0 3
69552: PUSH
69553: LD_INT 0
69555: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69556: LD_VAR 0 1
69560: PUSH
69561: LD_INT 0
69563: LESS
69564: PUSH
69565: LD_VAR 0 1
69569: PUSH
69570: LD_INT 8
69572: GREATER
69573: OR
69574: PUSH
69575: LD_VAR 0 2
69579: PUSH
69580: LD_INT 0
69582: LESS
69583: OR
69584: PUSH
69585: LD_VAR 0 2
69589: PUSH
69590: LD_INT 8
69592: GREATER
69593: OR
69594: IFFALSE 69598
// exit ;
69596: GO 69673
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69598: LD_ADDR_VAR 0 4
69602: PUSH
69603: LD_INT 22
69605: PUSH
69606: LD_VAR 0 2
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PPUSH
69615: CALL_OW 69
69619: PUSH
69620: FOR_IN
69621: IFFALSE 69671
// begin un := UnitShoot ( i ) ;
69623: LD_ADDR_VAR 0 5
69627: PUSH
69628: LD_VAR 0 4
69632: PPUSH
69633: CALL_OW 504
69637: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69638: LD_VAR 0 5
69642: PPUSH
69643: CALL_OW 255
69647: PUSH
69648: LD_VAR 0 1
69652: EQUAL
69653: IFFALSE 69669
// begin result := un ;
69655: LD_ADDR_VAR 0 3
69659: PUSH
69660: LD_VAR 0 5
69664: ST_TO_ADDR
// exit ;
69665: POP
69666: POP
69667: GO 69673
// end ; end ;
69669: GO 69620
69671: POP
69672: POP
// end ;
69673: LD_VAR 0 3
69677: RET
// export function GetCargoBay ( units ) ; begin
69678: LD_INT 0
69680: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69681: LD_ADDR_VAR 0 2
69685: PUSH
69686: LD_VAR 0 1
69690: PPUSH
69691: LD_INT 2
69693: PUSH
69694: LD_INT 34
69696: PUSH
69697: LD_INT 12
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: LD_INT 34
69706: PUSH
69707: LD_INT 51
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_INT 34
69716: PUSH
69717: LD_INT 32
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 34
69726: PUSH
69727: LD_EXP 45
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: PPUSH
69743: CALL_OW 72
69747: ST_TO_ADDR
// end ;
69748: LD_VAR 0 2
69752: RET
// export function Negate ( value ) ; begin
69753: LD_INT 0
69755: PPUSH
// result := not value ;
69756: LD_ADDR_VAR 0 2
69760: PUSH
69761: LD_VAR 0 1
69765: NOT
69766: ST_TO_ADDR
// end ;
69767: LD_VAR 0 2
69771: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
69772: LD_INT 0
69774: PPUSH
// if x1 = x2 then
69775: LD_VAR 0 1
69779: PUSH
69780: LD_VAR 0 3
69784: EQUAL
69785: IFFALSE 69819
// begin if y1 > y2 then
69787: LD_VAR 0 2
69791: PUSH
69792: LD_VAR 0 4
69796: GREATER
69797: IFFALSE 69809
// result := 0 else
69799: LD_ADDR_VAR 0 5
69803: PUSH
69804: LD_INT 0
69806: ST_TO_ADDR
69807: GO 69817
// result := 3 ;
69809: LD_ADDR_VAR 0 5
69813: PUSH
69814: LD_INT 3
69816: ST_TO_ADDR
// exit ;
69817: GO 69905
// end ; if y1 = y2 then
69819: LD_VAR 0 2
69823: PUSH
69824: LD_VAR 0 4
69828: EQUAL
69829: IFFALSE 69863
// begin if x1 > x2 then
69831: LD_VAR 0 1
69835: PUSH
69836: LD_VAR 0 3
69840: GREATER
69841: IFFALSE 69853
// result := 1 else
69843: LD_ADDR_VAR 0 5
69847: PUSH
69848: LD_INT 1
69850: ST_TO_ADDR
69851: GO 69861
// result := 4 ;
69853: LD_ADDR_VAR 0 5
69857: PUSH
69858: LD_INT 4
69860: ST_TO_ADDR
// exit ;
69861: GO 69905
// end ; if x1 > x2 and y1 > y2 then
69863: LD_VAR 0 1
69867: PUSH
69868: LD_VAR 0 3
69872: GREATER
69873: PUSH
69874: LD_VAR 0 2
69878: PUSH
69879: LD_VAR 0 4
69883: GREATER
69884: AND
69885: IFFALSE 69897
// result := 2 else
69887: LD_ADDR_VAR 0 5
69891: PUSH
69892: LD_INT 2
69894: ST_TO_ADDR
69895: GO 69905
// result := 5 ;
69897: LD_ADDR_VAR 0 5
69901: PUSH
69902: LD_INT 5
69904: ST_TO_ADDR
// end ;
69905: LD_VAR 0 5
69909: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69910: LD_INT 0
69912: PPUSH
69913: PPUSH
// if not driver or not IsInUnit ( driver ) then
69914: LD_VAR 0 1
69918: NOT
69919: PUSH
69920: LD_VAR 0 1
69924: PPUSH
69925: CALL_OW 310
69929: NOT
69930: OR
69931: IFFALSE 69935
// exit ;
69933: GO 70025
// vehicle := IsInUnit ( driver ) ;
69935: LD_ADDR_VAR 0 3
69939: PUSH
69940: LD_VAR 0 1
69944: PPUSH
69945: CALL_OW 310
69949: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69950: LD_VAR 0 1
69954: PPUSH
69955: LD_STRING \
69957: PUSH
69958: LD_INT 0
69960: PUSH
69961: LD_INT 0
69963: PUSH
69964: LD_INT 0
69966: PUSH
69967: LD_INT 0
69969: PUSH
69970: LD_INT 0
69972: PUSH
69973: LD_INT 0
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: PUSH
69985: LD_STRING E
69987: PUSH
69988: LD_INT 0
69990: PUSH
69991: LD_INT 0
69993: PUSH
69994: LD_VAR 0 3
69998: PUSH
69999: LD_INT 0
70001: PUSH
70002: LD_INT 0
70004: PUSH
70005: LD_INT 0
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: PPUSH
70021: CALL_OW 446
// end ;
70025: LD_VAR 0 2
70029: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70030: LD_INT 0
70032: PPUSH
70033: PPUSH
// if not driver or not IsInUnit ( driver ) then
70034: LD_VAR 0 1
70038: NOT
70039: PUSH
70040: LD_VAR 0 1
70044: PPUSH
70045: CALL_OW 310
70049: NOT
70050: OR
70051: IFFALSE 70055
// exit ;
70053: GO 70145
// vehicle := IsInUnit ( driver ) ;
70055: LD_ADDR_VAR 0 3
70059: PUSH
70060: LD_VAR 0 1
70064: PPUSH
70065: CALL_OW 310
70069: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70070: LD_VAR 0 1
70074: PPUSH
70075: LD_STRING \
70077: PUSH
70078: LD_INT 0
70080: PUSH
70081: LD_INT 0
70083: PUSH
70084: LD_INT 0
70086: PUSH
70087: LD_INT 0
70089: PUSH
70090: LD_INT 0
70092: PUSH
70093: LD_INT 0
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: PUSH
70105: LD_STRING E
70107: PUSH
70108: LD_INT 0
70110: PUSH
70111: LD_INT 0
70113: PUSH
70114: LD_VAR 0 3
70118: PUSH
70119: LD_INT 0
70121: PUSH
70122: LD_INT 0
70124: PUSH
70125: LD_INT 0
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PPUSH
70141: CALL_OW 447
// end ;
70145: LD_VAR 0 2
70149: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70150: LD_INT 0
70152: PPUSH
70153: PPUSH
70154: PPUSH
// tmp := [ ] ;
70155: LD_ADDR_VAR 0 5
70159: PUSH
70160: EMPTY
70161: ST_TO_ADDR
// for i in units do
70162: LD_ADDR_VAR 0 4
70166: PUSH
70167: LD_VAR 0 1
70171: PUSH
70172: FOR_IN
70173: IFFALSE 70211
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70175: LD_ADDR_VAR 0 5
70179: PUSH
70180: LD_VAR 0 5
70184: PPUSH
70185: LD_VAR 0 5
70189: PUSH
70190: LD_INT 1
70192: PLUS
70193: PPUSH
70194: LD_VAR 0 4
70198: PPUSH
70199: CALL_OW 256
70203: PPUSH
70204: CALL_OW 2
70208: ST_TO_ADDR
70209: GO 70172
70211: POP
70212: POP
// if not tmp then
70213: LD_VAR 0 5
70217: NOT
70218: IFFALSE 70222
// exit ;
70220: GO 70270
// if asc then
70222: LD_VAR 0 2
70226: IFFALSE 70250
// result := SortListByListAsc ( units , tmp ) else
70228: LD_ADDR_VAR 0 3
70232: PUSH
70233: LD_VAR 0 1
70237: PPUSH
70238: LD_VAR 0 5
70242: PPUSH
70243: CALL_OW 76
70247: ST_TO_ADDR
70248: GO 70270
// result := SortListByListDesc ( units , tmp ) ;
70250: LD_ADDR_VAR 0 3
70254: PUSH
70255: LD_VAR 0 1
70259: PPUSH
70260: LD_VAR 0 5
70264: PPUSH
70265: CALL_OW 77
70269: ST_TO_ADDR
// end ;
70270: LD_VAR 0 3
70274: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70275: LD_INT 0
70277: PPUSH
70278: PPUSH
// task := GetTaskList ( mech ) ;
70279: LD_ADDR_VAR 0 4
70283: PUSH
70284: LD_VAR 0 1
70288: PPUSH
70289: CALL_OW 437
70293: ST_TO_ADDR
// if not task then
70294: LD_VAR 0 4
70298: NOT
70299: IFFALSE 70303
// exit ;
70301: GO 70345
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70303: LD_ADDR_VAR 0 3
70307: PUSH
70308: LD_VAR 0 4
70312: PUSH
70313: LD_INT 1
70315: ARRAY
70316: PUSH
70317: LD_INT 1
70319: ARRAY
70320: PUSH
70321: LD_STRING r
70323: EQUAL
70324: PUSH
70325: LD_VAR 0 4
70329: PUSH
70330: LD_INT 1
70332: ARRAY
70333: PUSH
70334: LD_INT 4
70336: ARRAY
70337: PUSH
70338: LD_VAR 0 2
70342: EQUAL
70343: AND
70344: ST_TO_ADDR
// end ;
70345: LD_VAR 0 3
70349: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70350: LD_INT 0
70352: PPUSH
// SetDir ( unit , d ) ;
70353: LD_VAR 0 1
70357: PPUSH
70358: LD_VAR 0 4
70362: PPUSH
70363: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70367: LD_VAR 0 1
70371: PPUSH
70372: LD_VAR 0 2
70376: PPUSH
70377: LD_VAR 0 3
70381: PPUSH
70382: LD_VAR 0 5
70386: PPUSH
70387: CALL_OW 48
// end ;
70391: LD_VAR 0 6
70395: RET
// export function ToNaturalNumber ( number ) ; begin
70396: LD_INT 0
70398: PPUSH
// result := number div 1 ;
70399: LD_ADDR_VAR 0 2
70403: PUSH
70404: LD_VAR 0 1
70408: PUSH
70409: LD_INT 1
70411: DIV
70412: ST_TO_ADDR
// if number < 0 then
70413: LD_VAR 0 1
70417: PUSH
70418: LD_INT 0
70420: LESS
70421: IFFALSE 70431
// result := 0 ;
70423: LD_ADDR_VAR 0 2
70427: PUSH
70428: LD_INT 0
70430: ST_TO_ADDR
// end ;
70431: LD_VAR 0 2
70435: RET
// export function SortByClass ( units , class ) ; var un ; begin
70436: LD_INT 0
70438: PPUSH
70439: PPUSH
// if not units or not class then
70440: LD_VAR 0 1
70444: NOT
70445: PUSH
70446: LD_VAR 0 2
70450: NOT
70451: OR
70452: IFFALSE 70456
// exit ;
70454: GO 70551
// result := [ ] ;
70456: LD_ADDR_VAR 0 3
70460: PUSH
70461: EMPTY
70462: ST_TO_ADDR
// for un in units do
70463: LD_ADDR_VAR 0 4
70467: PUSH
70468: LD_VAR 0 1
70472: PUSH
70473: FOR_IN
70474: IFFALSE 70549
// if GetClass ( un ) = class then
70476: LD_VAR 0 4
70480: PPUSH
70481: CALL_OW 257
70485: PUSH
70486: LD_VAR 0 2
70490: EQUAL
70491: IFFALSE 70518
// result := Insert ( result , 1 , un ) else
70493: LD_ADDR_VAR 0 3
70497: PUSH
70498: LD_VAR 0 3
70502: PPUSH
70503: LD_INT 1
70505: PPUSH
70506: LD_VAR 0 4
70510: PPUSH
70511: CALL_OW 2
70515: ST_TO_ADDR
70516: GO 70547
// result := Replace ( result , result + 1 , un ) ;
70518: LD_ADDR_VAR 0 3
70522: PUSH
70523: LD_VAR 0 3
70527: PPUSH
70528: LD_VAR 0 3
70532: PUSH
70533: LD_INT 1
70535: PLUS
70536: PPUSH
70537: LD_VAR 0 4
70541: PPUSH
70542: CALL_OW 1
70546: ST_TO_ADDR
70547: GO 70473
70549: POP
70550: POP
// end ;
70551: LD_VAR 0 3
70555: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70556: LD_INT 0
70558: PPUSH
70559: PPUSH
70560: PPUSH
70561: PPUSH
70562: PPUSH
70563: PPUSH
70564: PPUSH
// result := [ ] ;
70565: LD_ADDR_VAR 0 4
70569: PUSH
70570: EMPTY
70571: ST_TO_ADDR
// if x - r < 0 then
70572: LD_VAR 0 1
70576: PUSH
70577: LD_VAR 0 3
70581: MINUS
70582: PUSH
70583: LD_INT 0
70585: LESS
70586: IFFALSE 70598
// min_x := 0 else
70588: LD_ADDR_VAR 0 8
70592: PUSH
70593: LD_INT 0
70595: ST_TO_ADDR
70596: GO 70614
// min_x := x - r ;
70598: LD_ADDR_VAR 0 8
70602: PUSH
70603: LD_VAR 0 1
70607: PUSH
70608: LD_VAR 0 3
70612: MINUS
70613: ST_TO_ADDR
// if y - r < 0 then
70614: LD_VAR 0 2
70618: PUSH
70619: LD_VAR 0 3
70623: MINUS
70624: PUSH
70625: LD_INT 0
70627: LESS
70628: IFFALSE 70640
// min_y := 0 else
70630: LD_ADDR_VAR 0 7
70634: PUSH
70635: LD_INT 0
70637: ST_TO_ADDR
70638: GO 70656
// min_y := y - r ;
70640: LD_ADDR_VAR 0 7
70644: PUSH
70645: LD_VAR 0 2
70649: PUSH
70650: LD_VAR 0 3
70654: MINUS
70655: ST_TO_ADDR
// max_x := x + r ;
70656: LD_ADDR_VAR 0 9
70660: PUSH
70661: LD_VAR 0 1
70665: PUSH
70666: LD_VAR 0 3
70670: PLUS
70671: ST_TO_ADDR
// max_y := y + r ;
70672: LD_ADDR_VAR 0 10
70676: PUSH
70677: LD_VAR 0 2
70681: PUSH
70682: LD_VAR 0 3
70686: PLUS
70687: ST_TO_ADDR
// for _x = min_x to max_x do
70688: LD_ADDR_VAR 0 5
70692: PUSH
70693: DOUBLE
70694: LD_VAR 0 8
70698: DEC
70699: ST_TO_ADDR
70700: LD_VAR 0 9
70704: PUSH
70705: FOR_TO
70706: IFFALSE 70807
// for _y = min_y to max_y do
70708: LD_ADDR_VAR 0 6
70712: PUSH
70713: DOUBLE
70714: LD_VAR 0 7
70718: DEC
70719: ST_TO_ADDR
70720: LD_VAR 0 10
70724: PUSH
70725: FOR_TO
70726: IFFALSE 70803
// begin if not ValidHex ( _x , _y ) then
70728: LD_VAR 0 5
70732: PPUSH
70733: LD_VAR 0 6
70737: PPUSH
70738: CALL_OW 488
70742: NOT
70743: IFFALSE 70747
// continue ;
70745: GO 70725
// if GetResourceTypeXY ( _x , _y ) then
70747: LD_VAR 0 5
70751: PPUSH
70752: LD_VAR 0 6
70756: PPUSH
70757: CALL_OW 283
70761: IFFALSE 70801
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70763: LD_ADDR_VAR 0 4
70767: PUSH
70768: LD_VAR 0 4
70772: PPUSH
70773: LD_VAR 0 4
70777: PUSH
70778: LD_INT 1
70780: PLUS
70781: PPUSH
70782: LD_VAR 0 5
70786: PUSH
70787: LD_VAR 0 6
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PPUSH
70796: CALL_OW 1
70800: ST_TO_ADDR
// end ;
70801: GO 70725
70803: POP
70804: POP
70805: GO 70705
70807: POP
70808: POP
// end ;
70809: LD_VAR 0 4
70813: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
70814: LD_INT 0
70816: PPUSH
70817: PPUSH
70818: PPUSH
70819: PPUSH
70820: PPUSH
70821: PPUSH
// if not units then
70822: LD_VAR 0 1
70826: NOT
70827: IFFALSE 70831
// exit ;
70829: GO 71232
// result := UnitFilter ( units , [ f_ok ] ) ;
70831: LD_ADDR_VAR 0 3
70835: PUSH
70836: LD_VAR 0 1
70840: PPUSH
70841: LD_INT 50
70843: PUSH
70844: EMPTY
70845: LIST
70846: PPUSH
70847: CALL_OW 72
70851: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70852: LD_ADDR_VAR 0 7
70856: PUSH
70857: LD_VAR 0 1
70861: PUSH
70862: LD_INT 1
70864: ARRAY
70865: PPUSH
70866: CALL_OW 255
70870: ST_TO_ADDR
// if not result then
70871: LD_VAR 0 3
70875: NOT
70876: IFFALSE 70880
// exit ;
70878: GO 71232
// for i in result do
70880: LD_ADDR_VAR 0 4
70884: PUSH
70885: LD_VAR 0 3
70889: PUSH
70890: FOR_IN
70891: IFFALSE 71230
// begin tag := GetTag ( i ) + 1 ;
70893: LD_ADDR_VAR 0 8
70897: PUSH
70898: LD_VAR 0 4
70902: PPUSH
70903: CALL_OW 110
70907: PUSH
70908: LD_INT 1
70910: PLUS
70911: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70912: LD_ADDR_VAR 0 6
70916: PUSH
70917: LD_VAR 0 4
70921: PPUSH
70922: CALL_OW 250
70926: PPUSH
70927: LD_VAR 0 4
70931: PPUSH
70932: CALL_OW 251
70936: PPUSH
70937: LD_INT 6
70939: PPUSH
70940: CALL 70556 0 3
70944: ST_TO_ADDR
// if cr then
70945: LD_VAR 0 6
70949: IFFALSE 70988
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70951: LD_VAR 0 4
70955: PPUSH
70956: LD_VAR 0 6
70960: PUSH
70961: LD_INT 1
70963: ARRAY
70964: PUSH
70965: LD_INT 1
70967: ARRAY
70968: PPUSH
70969: LD_VAR 0 6
70973: PUSH
70974: LD_INT 1
70976: ARRAY
70977: PUSH
70978: LD_INT 2
70980: ARRAY
70981: PPUSH
70982: CALL_OW 116
70986: GO 71228
// if path > tag then
70988: LD_VAR 0 2
70992: PUSH
70993: LD_VAR 0 8
70997: GREATER
70998: IFFALSE 71176
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
71000: LD_ADDR_VAR 0 5
71004: PUSH
71005: LD_INT 81
71007: PUSH
71008: LD_VAR 0 7
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: PUSH
71017: LD_INT 91
71019: PUSH
71020: LD_VAR 0 4
71024: PUSH
71025: LD_INT 12
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: LIST
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: PPUSH
71037: CALL_OW 69
71041: ST_TO_ADDR
// if enemy then
71042: LD_VAR 0 5
71046: IFFALSE 71074
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71048: LD_VAR 0 4
71052: PPUSH
71053: LD_VAR 0 5
71057: PPUSH
71058: LD_VAR 0 4
71062: PPUSH
71063: CALL_OW 74
71067: PPUSH
71068: CALL_OW 115
71072: GO 71174
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71074: LD_VAR 0 4
71078: PPUSH
71079: LD_VAR 0 2
71083: PUSH
71084: LD_VAR 0 8
71088: ARRAY
71089: PUSH
71090: LD_INT 1
71092: ARRAY
71093: PPUSH
71094: LD_VAR 0 2
71098: PUSH
71099: LD_VAR 0 8
71103: ARRAY
71104: PUSH
71105: LD_INT 2
71107: ARRAY
71108: PPUSH
71109: CALL_OW 297
71113: PUSH
71114: LD_INT 6
71116: GREATER
71117: IFFALSE 71160
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71119: LD_VAR 0 4
71123: PPUSH
71124: LD_VAR 0 2
71128: PUSH
71129: LD_VAR 0 8
71133: ARRAY
71134: PUSH
71135: LD_INT 1
71137: ARRAY
71138: PPUSH
71139: LD_VAR 0 2
71143: PUSH
71144: LD_VAR 0 8
71148: ARRAY
71149: PUSH
71150: LD_INT 2
71152: ARRAY
71153: PPUSH
71154: CALL_OW 114
71158: GO 71174
// SetTag ( i , tag ) ;
71160: LD_VAR 0 4
71164: PPUSH
71165: LD_VAR 0 8
71169: PPUSH
71170: CALL_OW 109
// end else
71174: GO 71228
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71176: LD_ADDR_VAR 0 5
71180: PUSH
71181: LD_INT 81
71183: PUSH
71184: LD_VAR 0 7
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PPUSH
71193: CALL_OW 69
71197: ST_TO_ADDR
// if enemy then
71198: LD_VAR 0 5
71202: IFFALSE 71228
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71204: LD_VAR 0 4
71208: PPUSH
71209: LD_VAR 0 5
71213: PPUSH
71214: LD_VAR 0 4
71218: PPUSH
71219: CALL_OW 74
71223: PPUSH
71224: CALL_OW 115
// end ; end ;
71228: GO 70890
71230: POP
71231: POP
// end ; end_of_file
71232: LD_VAR 0 3
71236: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71237: LD_VAR 0 1
71241: PUSH
71242: LD_INT 200
71244: DOUBLE
71245: GREATEREQUAL
71246: IFFALSE 71254
71248: LD_INT 299
71250: DOUBLE
71251: LESSEQUAL
71252: IFTRUE 71256
71254: GO 71288
71256: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71257: LD_VAR 0 1
71261: PPUSH
71262: LD_VAR 0 2
71266: PPUSH
71267: LD_VAR 0 3
71271: PPUSH
71272: LD_VAR 0 4
71276: PPUSH
71277: LD_VAR 0 5
71281: PPUSH
71282: CALL 14627 0 5
71286: GO 71365
71288: LD_INT 300
71290: DOUBLE
71291: GREATEREQUAL
71292: IFFALSE 71300
71294: LD_INT 399
71296: DOUBLE
71297: LESSEQUAL
71298: IFTRUE 71302
71300: GO 71364
71302: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71303: LD_VAR 0 1
71307: PPUSH
71308: LD_VAR 0 2
71312: PPUSH
71313: LD_VAR 0 3
71317: PPUSH
71318: LD_VAR 0 4
71322: PPUSH
71323: LD_VAR 0 5
71327: PPUSH
71328: LD_VAR 0 6
71332: PPUSH
71333: LD_VAR 0 7
71337: PPUSH
71338: LD_VAR 0 8
71342: PPUSH
71343: LD_VAR 0 9
71347: PPUSH
71348: LD_VAR 0 10
71352: PPUSH
71353: LD_VAR 0 11
71357: PPUSH
71358: CALL 29702 0 11
71362: GO 71365
71364: POP
// end ;
71365: PPOPN 11
71367: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71368: LD_VAR 0 1
71372: PPUSH
71373: LD_VAR 0 2
71377: PPUSH
71378: LD_VAR 0 3
71382: PPUSH
71383: LD_VAR 0 4
71387: PPUSH
71388: LD_VAR 0 5
71392: PPUSH
71393: CALL 14609 0 5
// end ; end_of_file
71397: PPOPN 5
71399: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71400: LD_VAR 0 1
71404: PPUSH
71405: LD_VAR 0 2
71409: PPUSH
71410: LD_VAR 0 3
71414: PPUSH
71415: LD_VAR 0 4
71419: PPUSH
71420: LD_VAR 0 5
71424: PPUSH
71425: LD_VAR 0 6
71429: PPUSH
71430: CALL 18510 0 6
// end ;
71434: PPOPN 6
71436: END
